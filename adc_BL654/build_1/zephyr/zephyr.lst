
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   0:	50 60 00 20 09 49 01 00 2f 6b 02 00 dd 48 01 00     P`. .I../k...H..
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
  10:	dd 48 01 00 dd 48 01 00 dd 48 01 00 00 00 00 00     .H...H...H......
	...
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
		LOG_ERR("Configuration error - sector count");
  2c:	79 42 01 00 dd 48 01 00 00 00 00 00 31 42 01 00     yB...H......1B..
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
  3c:	dd 48 01 00                                         .H..

00000040 <_irq_vector_table>:
  40:	f5 42 01 00 77 99 02 00 f5 42 01 00 f5 42 01 00     .B..w....B...B..
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
  50:	f5 42 01 00 f5 42 01 00 f5 42 01 00 f5 42 01 00     .B...B...B...B..
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
  60:	25 99 02 00 f5 42 01 00 f5 42 01 00 5d 99 02 00     %....B...B..]...
	if (!fs->sector_size || fs->sector_size % info.size) {
  70:	f5 42 01 00 f5 42 01 00 f5 42 01 00 f5 42 01 00     .B...B...B...B..
	if (fs->sector_count < 2) {
  80:	f5 42 01 00 f5 42 01 00 f5 42 01 00 f5 42 01 00     .B...B...B...B..
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
  90:	f5 42 01 00 f5 42 01 00 f5 42 01 00 f5 42 01 00     .B...B...B...B..
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
  a0:	f5 42 01 00 f5 42 01 00 f5 42 01 00 f5 42 01 00     .B...B...B...B..
	for (i = 0; i < fs->sector_count; i++) {
  b0:	f5 42 01 00 f5 42 01 00 f5 42 01 00 f5 42 01 00     .B...B...B...B..
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
  c0:	f5 42 01 00 f5 42 01 00 f5 42 01 00 f5 42 01 00     .B...B...B...B..
			nvs_sector_advance(fs, &addr);
  d0:	f5 42 01 00 f5 42 01 00 f5 42 01 00 f5 42 01 00     .B...B...B...B..
	rc = nvs_recover_last_ate(fs, &addr);
  e0:	f5 42 01 00 f5 42 01 00 f5 42 01 00 f5 42 01 00     .B...B...B...B..
	fs->data_wra = addr & ADDR_SECT_MASK;
  f0:	f5 42 01 00 f5 42 01 00 f5 42 01 00 f5 42 01 00     .B...B...B...B..

Disassembly of section text:

00000100 <__aeabi_frsub>:
	while (fs->ate_wra >= fs->data_wra) {
     100:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
     104:	e002      	b.n	10c <__addsf3>
     106:	bf00      	nop

00000108 <__aeabi_fsub>:
     108:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000010c <__addsf3>:
     10c:	0042      	lsls	r2, r0, #1
		if (rc) {
     10e:	bf1f      	itttt	ne
     110:	ea5f 0341 	movsne.w	r3, r1, lsl #1
		if (data8[i] != value) {
     114:	ea92 0f03 	teqne	r2, r3
     118:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     11c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
     120:	d06a      	beq.n	1f8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x4>
     122:	ea4f 6212 	mov.w	r2, r2, lsr #24
	nvs_sector_advance(fs, &addr);
     126:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
	addr = fs->ate_wra & ADDR_SECT_MASK;
     12a:	bfc1      	itttt	gt
	nvs_sector_advance(fs, &addr);
     12c:	18d2      	addgt	r2, r2, r3
     12e:	4041      	eorgt	r1, r0
	addr = fs->ate_wra & ADDR_SECT_MASK;
     130:	4048      	eorgt	r0, r1
	nvs_sector_advance(fs, &addr);
     132:	4041      	eorgt	r1, r0
     134:	bfb8      	it	lt
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
     136:	425b      	neglt	r3, r3
     138:	2b19      	cmp	r3, #25
     13a:	bf88      	it	hi
     13c:	4770      	bxhi	lr
     13e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
	if (rc < 0) {
     142:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     146:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		       (uint16_t)(fs->sector_size - ate_size);
     14a:	bf18      	it	ne
		addr = (i << ADDR_SECT_SHIFT) +
     14c:	4240      	negne	r0, r0
		       (uint16_t)(fs->sector_size - ate_size);
     14e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
		addr = (i << ADDR_SECT_SHIFT) +
     152:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
     156:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		addr = (i << ADDR_SECT_SHIFT) +
     15a:	bf18      	it	ne
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
     15c:	4249      	negne	r1, r1
     15e:	ea92 0f03 	teq	r2, r3
			nvs_sector_advance(fs, &addr);
     162:	d03f      	beq.n	1e4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x77>
     164:	f1a2 0201 	sub.w	r2, r2, #1
     168:	fa41 fc03 	asr.w	ip, r1, r3
			closed_sectors++;
     16c:	eb10 000c 	adds.w	r0, r0, ip
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
     170:	f1c3 0320 	rsb	r3, r3, #32
     174:	fa01 f103 	lsl.w	r1, r1, r3
			closed_sectors++;
     178:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
     17c:	d502      	bpl.n	184 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17>
     17e:	4249      	negs	r1, r1
			if (!rc) {
     180:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
	for (i = 0; i < fs->sector_count; i++) {
     184:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
     188:	d313      	bcc.n	1b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x45>
     18a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
				rc = -ESPIPE;
     18e:	d306      	bcc.n	19e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x31>
     190:	0840      	lsrs	r0, r0, #1
     192:	ea4f 0131 	mov.w	r1, r1, rrx
		addr = fs->ate_wra + ate_size;
     196:	f102 0201 	add.w	r2, r2, #1
     19a:	2afe      	cmp	r2, #254	; 0xfe
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
     19c:	d251      	bcs.n	242 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x4e>
     19e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     1a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     1a6:	bf08      	it	eq
     1a8:	f020 0001 	biceq.w	r0, r0, #1
		LOG_INF("No GC Done marker found: restarting gc");
     1ac:	ea40 0003 	orr.w	r0, r0, r3
     1b0:	4770      	bx	lr
     1b2:	0049      	lsls	r1, r1, #1
     1b4:	eb40 0000 	adc.w	r0, r0, r0
     1b8:	3a01      	subs	r2, #1
     1ba:	bf28      	it	cs
     1bc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     1c0:	d2ed      	bcs.n	19e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x31>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
     1c2:	fab0 fc80 	clz	ip, r0
     1c6:	f1ac 0c08 	sub.w	ip, ip, #8
		if (rc) {
     1ca:	ebb2 020c 	subs.w	r2, r2, ip
		fs->ate_wra &= ADDR_SECT_MASK;
     1ce:	fa00 f00c 	lsl.w	r0, r0, ip
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
     1d2:	bfaa      	itet	ge
		fs->ate_wra &= ADDR_SECT_MASK;
     1d4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
     1d8:	4252      	neglt	r2, r2
     1da:	4318      	orrge	r0, r3
     1dc:	bfbc      	itt	lt
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
     1de:	40d0      	lsrlt	r0, r2
     1e0:	4318      	orrlt	r0, r3
		rc = nvs_gc(fs);
     1e2:	4770      	bx	lr
     1e4:	f092 0f00 	teq	r2, #0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
     1e8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     1ec:	bf06      	itte	eq
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
     1ee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     1f2:	3201      	addeq	r2, #1
     1f4:	3b01      	subne	r3, #1
     1f6:	e7b5      	b.n	164 <CONFIG_IDLE_STACK_SIZE+0x24>
     1f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
			if (rc) {
     1fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
			if (nvs_ate_valid(fs, &gc_done_ate) &&
     200:	bf18      	it	ne
     202:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     206:	d021      	beq.n	24c <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x58>
     208:	ea92 0f03 	teq	r2, r3
     20c:	d004      	beq.n	218 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x24>
     20e:	f092 0f00 	teq	r2, #0
			    (gc_done_ate.id == 0xffff) &&
     212:	bf08      	it	eq
     214:	4608      	moveq	r0, r1
     216:	4770      	bx	lr
			addr += ate_size;
     218:	ea90 0f01 	teq	r0, r1
     21c:	bf1c      	itt	ne
     21e:	2000      	movne	r0, #0
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
     220:	4770      	bxne	lr
     222:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     226:	d104      	bne.n	232 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x3e>
     228:	0040      	lsls	r0, r0, #1
		if (rc < 0) {
     22a:	bf28      	it	cs
     22c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
		fs->data_wra += fs->flash_parameters->write_block_size;
     230:	4770      	bx	lr
     232:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     236:	bf3c      	itt	cc
     238:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
	while (fs->ate_wra > fs->data_wra) {
     23c:	4770      	bxcc	lr
     23e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
     242:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     246:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     24a:	4770      	bx	lr
     24c:	ea7f 6222 	mvns.w	r2, r2, asr #24
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
     250:	bf16      	itet	ne
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
     252:	4608      	movne	r0, r1
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
     254:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
     258:	4601      	movne	r1, r0
     25a:	0242      	lsls	r2, r0, #9
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
     25c:	bf06      	itte	eq
     25e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
		if (rc) {
     262:	ea90 0f01 	teqeq	r0, r1
     266:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
     26a:	4770      	bx	lr

0000026c <__aeabi_ui2f>:
     26c:	f04f 0300 	mov.w	r3, #0
		      (fs->sector_size - 2 * ate_size))) {
     270:	e004      	b.n	27c <__aeabi_i2f+0x8>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
     272:	bf00      	nop

00000274 <__aeabi_i2f>:
		      (fs->sector_size - 2 * ate_size))) {
     274:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
     278:	bf48      	it	mi
     27a:	4240      	negmi	r0, r0
		rc = nvs_add_gc_done_ate(fs);
     27c:	ea5f 0c00 	movs.w	ip, r0
     280:	bf08      	it	eq
     282:	4770      	bxeq	lr
     284:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     288:	4601      	mov	r1, r0
     28a:	f04f 0000 	mov.w	r0, #0
     28e:	e01c      	b.n	2ca <__aeabi_l2f+0x2a>

00000290 <__aeabi_ul2f>:
     290:	ea50 0201 	orrs.w	r2, r0, r1
     294:	bf08      	it	eq
     296:	4770      	bxeq	lr
     298:	f04f 0300 	mov.w	r3, #0
     29c:	e00a      	b.n	2b4 <__aeabi_l2f+0x14>
     29e:	bf00      	nop

000002a0 <__aeabi_l2f>:
     2a0:	ea50 0201 	orrs.w	r2, r0, r1
		rc = -EDEADLK;
     2a4:	bf08      	it	eq
     2a6:	4770      	bxeq	lr
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
     2a8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     2ac:	d502      	bpl.n	2b4 <__aeabi_l2f+0x14>
	if (rc) {
     2ae:	4240      	negs	r0, r0
     2b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
	fs->ready = true;
     2b4:	ea5f 0c01 	movs.w	ip, r1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
     2b8:	bf02      	ittt	eq
	fs->ready = true;
     2ba:	4684      	moveq	ip, r0
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
     2bc:	4601      	moveq	r1, r0
     2be:	2000      	moveq	r0, #0
     2c0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     2c4:	bf08      	it	eq
     2c6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     2ca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     2ce:	fabc f28c 	clz	r2, ip
     2d2:	3a08      	subs	r2, #8
     2d4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     2d8:	db10      	blt.n	2fc <__aeabi_l2f+0x5c>
     2da:	fa01 fc02 	lsl.w	ip, r1, r2
     2de:	4463      	add	r3, ip
     2e0:	fa00 fc02 	lsl.w	ip, r0, r2
	LOG_INF("alloc wra: %d, %x",
     2e4:	f1c2 0220 	rsb	r2, r2, #32
     2e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2ec:	fa20 f202 	lsr.w	r2, r0, r2
     2f0:	eb43 0002 	adc.w	r0, r3, r2
     2f4:	bf08      	it	eq
     2f6:	f020 0001 	biceq.w	r0, r0, #1
     2fa:	4770      	bx	lr
     2fc:	f102 0220 	add.w	r2, r2, #32
     300:	fa01 fc02 	lsl.w	ip, r1, r2
	LOG_INF("data wra: %d, %x",
     304:	f1c2 0220 	rsb	r2, r2, #32
     308:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     30c:	fa21 f202 	lsr.w	r2, r1, r2
     310:	eb43 0002 	adc.w	r0, r3, r2
     314:	bf08      	it	eq
     316:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     31a:	4770      	bx	lr

0000031c <__aeabi_fmul>:
     31c:	f04f 0cff 	mov.w	ip, #255	; 0xff
     320:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     324:	bf1e      	ittt	ne
	return 0;
     326:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
			LOG_INF("GC Done marker found");
     32a:	ea92 0f0c 	teqne	r2, ip
     32e:	ea93 0f0c 	teqne	r3, ip
     332:	d06f      	beq.n	414 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x14>
     334:	441a      	add	r2, r3
     336:	ea80 0c01 	eor.w	ip, r0, r1
     33a:	0240      	lsls	r0, r0, #9
     33c:	bf18      	it	ne
			addr = fs->ate_wra & ADDR_SECT_MASK;
     33e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     342:	d01e      	beq.n	382 <CONFIG_BT_DEVICE_APPEARANCE+0x41>
     344:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
			nvs_sector_advance(fs, &addr);
     348:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     34c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
			rc = nvs_flash_erase_sector(fs, addr);
     350:	fba0 3101 	umull	r3, r1, r0, r1
     354:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
			goto end;
     358:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
		if (nvs_ate_valid(fs, &last_ate)) {
     35c:	bf3e      	ittt	cc
     35e:	0049      	lslcc	r1, r1, #1
     360:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     364:	005b      	lslcc	r3, r3, #1
     366:	ea40 0001 	orr.w	r0, r0, r1
			fs->data_wra = addr & ADDR_SECT_MASK;
     36a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
     36e:	2afd      	cmp	r2, #253	; 0xfd
     370:	d81d      	bhi.n	3ae <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x2a>
     372:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
			fs->data_wra = addr & ADDR_SECT_MASK;
     376:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
     37a:	bf08      	it	eq
     37c:	f020 0001 	biceq.w	r0, r0, #1
     380:	4770      	bx	lr
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
     382:	f090 0f00 	teq	r0, #0
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
     386:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
     38a:	bf08      	it	eq
		fs->ate_wra -= ate_size;
     38c:	0249      	lsleq	r1, r1, #9
     38e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     392:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     396:	3a7f      	subs	r2, #127	; 0x7f
     398:	bfc2      	ittt	gt
     39a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     39e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     3a2:	4770      	bxgt	lr
     3a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     3a8:	f04f 0300 	mov.w	r3, #0
     3ac:	3a01      	subs	r2, #1
     3ae:	dc5d      	bgt.n	46c <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x6c>
     3b0:	f112 0f19 	cmn.w	r2, #25
     3b4:	bfdc      	itt	le
     3b6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     3ba:	4770      	bxle	lr
     3bc:	f1c2 0200 	rsb	r2, r2, #0
     3c0:	0041      	lsls	r1, r0, #1
     3c2:	fa21 f102 	lsr.w	r1, r1, r2
     3c6:	f1c2 0220 	rsb	r2, r2, #32
     3ca:	fa00 fc02 	lsl.w	ip, r0, r2
     3ce:	ea5f 0031 	movs.w	r0, r1, rrx
     3d2:	f140 0000 	adc.w	r0, r0, #0
     3d6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     3da:	bf08      	it	eq
     3dc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     3e0:	4770      	bx	lr
     3e2:	f092 0f00 	teq	r2, #0
     3e6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     3ea:	bf02      	ittt	eq
     3ec:	0040      	lsleq	r0, r0, #1
     3ee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     3f2:	3a01      	subeq	r2, #1
     3f4:	d0f9      	beq.n	3ea <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x2>
     3f6:	ea40 000c 	orr.w	r0, r0, ip
     3fa:	f093 0f00 	teq	r3, #0
     3fe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     402:	bf02      	ittt	eq
     404:	0049      	lsleq	r1, r1, #1
     406:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     40a:	3b01      	subeq	r3, #1
     40c:	d0f9      	beq.n	402 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x2>
     40e:	ea41 010c 	orr.w	r1, r1, ip
     412:	e78f      	b.n	334 <__aeabi_fmul+0x18>
     414:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     418:	ea92 0f0c 	teq	r2, ip
     41c:	bf18      	it	ne
     41e:	ea93 0f0c 	teqne	r3, ip
     422:	d00a      	beq.n	43a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x3a>
     424:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     428:	bf18      	it	ne
     42a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     42e:	d1d8      	bne.n	3e2 <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x5e>
     430:	ea80 0001 	eor.w	r0, r0, r1
     434:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     438:	4770      	bx	lr
     43a:	f090 0f00 	teq	r0, #0
     43e:	bf17      	itett	ne
     440:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     444:	4608      	moveq	r0, r1
     446:	f091 0f00 	teqne	r1, #0
     44a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     44e:	d014      	beq.n	47a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x7a>
     450:	ea92 0f0c 	teq	r2, ip
     454:	d101      	bne.n	45a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x5a>
     456:	0242      	lsls	r2, r0, #9
     458:	d10f      	bne.n	47a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x7a>
     45a:	ea93 0f0c 	teq	r3, ip
     45e:	d103      	bne.n	468 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x68>
     460:	024b      	lsls	r3, r1, #9
     462:	bf18      	it	ne
     464:	4608      	movne	r0, r1
     466:	d108      	bne.n	47a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x7a>
     468:	ea80 0001 	eor.w	r0, r0, r1
     46c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     470:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     474:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     478:	4770      	bx	lr
     47a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     47e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     482:	4770      	bx	lr

00000484 <__aeabi_fdiv>:
     484:	f04f 0cff 	mov.w	ip, #255	; 0xff
     488:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     48c:	bf1e      	ittt	ne
     48e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     492:	ea92 0f0c 	teqne	r2, ip
     496:	ea93 0f0c 	teqne	r3, ip
     49a:	d069      	beq.n	570 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x5c>
     49c:	eba2 0203 	sub.w	r2, r2, r3
     4a0:	ea80 0c01 	eor.w	ip, r0, r1
     4a4:	0249      	lsls	r1, r1, #9
     4a6:	ea4f 2040 	mov.w	r0, r0, lsl #9
     4aa:	d037      	beq.n	51c <CONFIG_BT_LONG_WQ_STACK_SIZE+0x8>
     4ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     4b0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     4b4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     4b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     4bc:	428b      	cmp	r3, r1
     4be:	bf38      	it	cc
     4c0:	005b      	lslcc	r3, r3, #1
     4c2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     4c6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     4ca:	428b      	cmp	r3, r1
     4cc:	bf24      	itt	cs
     4ce:	1a5b      	subcs	r3, r3, r1
     4d0:	ea40 000c 	orrcs.w	r0, r0, ip
     4d4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     4d8:	bf24      	itt	cs
     4da:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     4de:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     4e2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     4e6:	bf24      	itt	cs
     4e8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     4ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     4f0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     4f4:	bf24      	itt	cs
     4f6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     4fa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     4fe:	011b      	lsls	r3, r3, #4
     500:	bf18      	it	ne
     502:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     506:	d1e0      	bne.n	4ca <__aeabi_fdiv+0x46>
     508:	2afd      	cmp	r2, #253	; 0xfd
     50a:	f63f af50 	bhi.w	3ae <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x2a>
     50e:	428b      	cmp	r3, r1
     510:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     514:	bf08      	it	eq
     516:	f020 0001 	biceq.w	r0, r0, #1
     51a:	4770      	bx	lr
     51c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     520:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     524:	327f      	adds	r2, #127	; 0x7f
     526:	bfc2      	ittt	gt
     528:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     52c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     530:	4770      	bxgt	lr
     532:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     536:	f04f 0300 	mov.w	r3, #0
     53a:	3a01      	subs	r2, #1
     53c:	e737      	b.n	3ae <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x2a>
     53e:	f092 0f00 	teq	r2, #0
     542:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     546:	bf02      	ittt	eq
     548:	0040      	lsleq	r0, r0, #1
     54a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     54e:	3a01      	subeq	r2, #1
     550:	d0f9      	beq.n	546 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x32>
     552:	ea40 000c 	orr.w	r0, r0, ip
     556:	f093 0f00 	teq	r3, #0
     55a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     55e:	bf02      	ittt	eq
     560:	0049      	lsleq	r1, r1, #1
     562:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     566:	3b01      	subeq	r3, #1
     568:	d0f9      	beq.n	55e <CONFIG_BT_LONG_WQ_STACK_SIZE+0x4a>
     56a:	ea41 010c 	orr.w	r1, r1, ip
     56e:	e795      	b.n	49c <__aeabi_fdiv+0x18>
     570:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     574:	ea92 0f0c 	teq	r2, ip
     578:	d108      	bne.n	58c <CONFIG_BT_LONG_WQ_STACK_SIZE+0x78>
     57a:	0242      	lsls	r2, r0, #9
     57c:	f47f af7d 	bne.w	47a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x7a>
     580:	ea93 0f0c 	teq	r3, ip
     584:	f47f af70 	bne.w	468 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x68>
     588:	4608      	mov	r0, r1
     58a:	e776      	b.n	47a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x7a>
     58c:	ea93 0f0c 	teq	r3, ip
     590:	d104      	bne.n	59c <CONFIG_BT_LONG_WQ_STACK_SIZE+0x88>
     592:	024b      	lsls	r3, r1, #9
     594:	f43f af4c 	beq.w	430 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x30>
     598:	4608      	mov	r0, r1
     59a:	e76e      	b.n	47a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x7a>
     59c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     5a0:	bf18      	it	ne
     5a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     5a6:	d1ca      	bne.n	53e <CONFIG_BT_LONG_WQ_STACK_SIZE+0x2a>
     5a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     5ac:	f47f af5c 	bne.w	468 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x68>
     5b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     5b4:	f47f af3c 	bne.w	430 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x30>
     5b8:	e75f      	b.n	47a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x7a>
     5ba:	bf00      	nop

000005bc <__aeabi_f2iz>:
     5bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
     5c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     5c4:	d30f      	bcc.n	5e6 <__aeabi_f2iz+0x2a>
     5c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
     5ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     5ce:	d90d      	bls.n	5ec <__aeabi_f2iz+0x30>
     5d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
     5d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     5d8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     5dc:	fa23 f002 	lsr.w	r0, r3, r2
     5e0:	bf18      	it	ne
     5e2:	4240      	negne	r0, r0
     5e4:	4770      	bx	lr
     5e6:	f04f 0000 	mov.w	r0, #0
     5ea:	4770      	bx	lr
     5ec:	f112 0f61 	cmn.w	r2, #97	; 0x61
     5f0:	d101      	bne.n	5f6 <CONFIG_BT_COMPANY_ID+0x5>
     5f2:	0242      	lsls	r2, r0, #9
     5f4:	d105      	bne.n	602 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     5f6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     5fa:	bf08      	it	eq
     5fc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     600:	4770      	bx	lr
     602:	f04f 0000 	mov.w	r0, #0
     606:	4770      	bx	lr

00000608 <__aeabi_uldivmod>:
     608:	b953      	cbnz	r3, 620 <__aeabi_uldivmod+0x18>
     60a:	b94a      	cbnz	r2, 620 <__aeabi_uldivmod+0x18>
     60c:	2900      	cmp	r1, #0
     60e:	bf08      	it	eq
     610:	2800      	cmpeq	r0, #0
     612:	bf1c      	itt	ne
     614:	f04f 31ff 	movne.w	r1, #4294967295
     618:	f04f 30ff 	movne.w	r0, #4294967295
     61c:	f000 b80c 	b.w	638 <__aeabi_idiv0>
     620:	f1ad 0c08 	sub.w	ip, sp, #8
     624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     628:	f00b ff32 	bl	c490 <__udivmoddi4>
     62c:	f8dd e004 	ldr.w	lr, [sp, #4]
     630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     634:	b004      	add	sp, #16
     636:	4770      	bx	lr

00000638 <__aeabi_idiv0>:
     638:	4770      	bx	lr
     63a:	bf00      	nop

0000063c <ocrypto_bigint_add256>:
     63c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     640:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     644:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     648:	185b      	adds	r3, r3, r1
     64a:	eb54 040c 	adcs.w	r4, r4, ip
     64e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     652:	414d      	adcs	r5, r1
     654:	eb56 060c 	adcs.w	r6, r6, ip
     658:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     65c:	414f      	adcs	r7, r1
     65e:	eb58 080c 	adcs.w	r8, r8, ip
     662:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     666:	eb59 0901 	adcs.w	r9, r9, r1
     66a:	eb5a 0a0c 	adcs.w	sl, sl, ip
     66e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     672:	4180      	sbcs	r0, r0
     674:	3001      	adds	r0, #1
     676:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     67a:	4770      	bx	lr

0000067c <ocrypto_bigint_sub256>:
     67c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     680:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     684:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     688:	1a5b      	subs	r3, r3, r1
     68a:	eb74 040c 	sbcs.w	r4, r4, ip
     68e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     692:	418d      	sbcs	r5, r1
     694:	eb76 060c 	sbcs.w	r6, r6, ip
     698:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     69c:	418f      	sbcs	r7, r1
     69e:	eb78 080c 	sbcs.w	r8, r8, ip
     6a2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     6a6:	eb79 0901 	sbcs.w	r9, r9, r1
     6aa:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     6ae:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     6b2:	4180      	sbcs	r0, r0
     6b4:	4240      	negs	r0, r0
     6b6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     6ba:	4770      	bx	lr

000006bc <ocrypto_bigint_cadd256>:
     6bc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     6c0:	4252      	negs	r2, r2
     6c2:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     6c6:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     6ca:	4017      	ands	r7, r2
     6cc:	19db      	adds	r3, r3, r7
     6ce:	ea18 0802 	ands.w	r8, r8, r2
     6d2:	eb54 0408 	adcs.w	r4, r4, r8
     6d6:	ea19 0902 	ands.w	r9, r9, r2
     6da:	eb55 0509 	adcs.w	r5, r5, r9
     6de:	ea1a 0a02 	ands.w	sl, sl, r2
     6e2:	eb56 060a 	adcs.w	r6, r6, sl
     6e6:	c078      	stmia	r0!, {r3, r4, r5, r6}
     6e8:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     6ec:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     6f0:	4017      	ands	r7, r2
     6f2:	417b      	adcs	r3, r7
     6f4:	ea18 0802 	ands.w	r8, r8, r2
     6f8:	eb54 0408 	adcs.w	r4, r4, r8
     6fc:	ea19 0902 	ands.w	r9, r9, r2
     700:	eb55 0509 	adcs.w	r5, r5, r9
     704:	ea1a 0a02 	ands.w	sl, sl, r2
     708:	eb56 060a 	adcs.w	r6, r6, sl
     70c:	c078      	stmia	r0!, {r3, r4, r5, r6}
     70e:	4180      	sbcs	r0, r0
     710:	3001      	adds	r0, #1
     712:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     716:	4770      	bx	lr

00000718 <ocrypto_bigint_csub256>:
     718:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     71c:	4252      	negs	r2, r2
     71e:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     722:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     726:	4017      	ands	r7, r2
     728:	1bdb      	subs	r3, r3, r7
     72a:	ea18 0802 	ands.w	r8, r8, r2
     72e:	eb74 0408 	sbcs.w	r4, r4, r8
     732:	ea19 0902 	ands.w	r9, r9, r2
     736:	eb75 0509 	sbcs.w	r5, r5, r9
     73a:	ea1a 0a02 	ands.w	sl, sl, r2
     73e:	eb76 060a 	sbcs.w	r6, r6, sl
     742:	c078      	stmia	r0!, {r3, r4, r5, r6}
     744:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     748:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     74c:	4017      	ands	r7, r2
     74e:	41bb      	sbcs	r3, r7
     750:	ea18 0802 	ands.w	r8, r8, r2
     754:	eb74 0408 	sbcs.w	r4, r4, r8
     758:	ea19 0902 	ands.w	r9, r9, r2
     75c:	eb75 0509 	sbcs.w	r5, r5, r9
     760:	ea1a 0a02 	ands.w	sl, sl, r2
     764:	eb76 060a 	sbcs.w	r6, r6, sl
     768:	c078      	stmia	r0!, {r3, r4, r5, r6}
     76a:	4180      	sbcs	r0, r0
     76c:	4240      	negs	r0, r0
     76e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     772:	4770      	bx	lr

00000774 <ocrypto_bigint_cswap256>:
     774:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     778:	4252      	negs	r2, r2
     77a:	f04f 0804 	mov.w	r8, #4

0000077e <cswap256_loop>:
     77e:	e890 0030 	ldmia.w	r0, {r4, r5}
     782:	e891 00c0 	ldmia.w	r1, {r6, r7}
     786:	1ba3      	subs	r3, r4, r6
     788:	4013      	ands	r3, r2
     78a:	1ae4      	subs	r4, r4, r3
     78c:	18f6      	adds	r6, r6, r3
     78e:	1beb      	subs	r3, r5, r7
     790:	4013      	ands	r3, r2
     792:	1aed      	subs	r5, r5, r3
     794:	18ff      	adds	r7, r7, r3
     796:	c030      	stmia	r0!, {r4, r5}
     798:	c1c0      	stmia	r1!, {r6, r7}
     79a:	f1b8 0801 	subs.w	r8, r8, #1
     79e:	d1ee      	bne.n	77e <cswap256_loop>
     7a0:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     7a4:	4770      	bx	lr
     7a6:	bf00      	nop

000007a8 <ocrypto_mul256_noframe>:
     7a8:	b500      	push	{lr}
     7aa:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
     7ae:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     7b2:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     7b6:	b402      	push	{r1}
     7b8:	fba7 5102 	umull	r5, r1, r7, r2
     7bc:	950a      	str	r5, [sp, #40]	; 0x28
     7be:	fba8 0b02 	umull	r0, fp, r8, r2
     7c2:	fbe7 1063 	umaal	r1, r0, r7, r3
     7c6:	fbe9 b062 	umaal	fp, r0, r9, r2
     7ca:	910b      	str	r1, [sp, #44]	; 0x2c
     7cc:	fba8 5103 	umull	r5, r1, r8, r3
     7d0:	fbea 0162 	umaal	r0, r1, sl, r2
     7d4:	fbe7 b564 	umaal	fp, r5, r7, r4
     7d8:	fbe7 0566 	umaal	r0, r5, r7, r6
     7dc:	fbe8 1566 	umaal	r1, r5, r8, r6
     7e0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
     7e4:	fba9 b603 	umull	fp, r6, r9, r3
     7e8:	fbea 1663 	umaal	r1, r6, sl, r3
     7ec:	fbec 5663 	umaal	r5, r6, ip, r3
     7f0:	fbe8 0b64 	umaal	r0, fp, r8, r4
     7f4:	fbe9 1b64 	umaal	r1, fp, r9, r4
     7f8:	fbea 5b64 	umaal	r5, fp, sl, r4
     7fc:	fbec 6b64 	umaal	r6, fp, ip, r4
     800:	900d      	str	r0, [sp, #52]	; 0x34
     802:	fbac 3002 	umull	r3, r0, ip, r2
     806:	9c05      	ldr	r4, [sp, #20]
     808:	fbee 5062 	umaal	r5, r0, lr, r2
     80c:	fbe9 6064 	umaal	r6, r0, r9, r4
     810:	fbea b064 	umaal	fp, r0, sl, r4
     814:	fbe7 3164 	umaal	r3, r1, r7, r4
     818:	fbe8 5164 	umaal	r5, r1, r8, r4
     81c:	9c06      	ldr	r4, [sp, #24]
     81e:	fbe8 6164 	umaal	r6, r1, r8, r4
     822:	fbe9 b164 	umaal	fp, r1, r9, r4
     826:	fbea 0164 	umaal	r0, r1, sl, r4
     82a:	930e      	str	r3, [sp, #56]	; 0x38
     82c:	fba7 3204 	umull	r3, r2, r7, r4
     830:	9c07      	ldr	r4, [sp, #28]
     832:	fbe7 6264 	umaal	r6, r2, r7, r4
     836:	fbe8 b264 	umaal	fp, r2, r8, r4
     83a:	fbe9 0264 	umaal	r0, r2, r9, r4
     83e:	fbea 1264 	umaal	r1, r2, sl, r4
     842:	9c04      	ldr	r4, [sp, #16]
     844:	fbe9 5364 	umaal	r5, r3, r9, r4
     848:	fbea 6364 	umaal	r6, r3, sl, r4
     84c:	9c08      	ldr	r4, [sp, #32]
     84e:	fbe7 b364 	umaal	fp, r3, r7, r4
     852:	fbe8 0364 	umaal	r0, r3, r8, r4
     856:	fbe9 1364 	umaal	r1, r3, r9, r4
     85a:	fbea 2364 	umaal	r2, r3, sl, r4
     85e:	950f      	str	r5, [sp, #60]	; 0x3c
     860:	f85d 9b04 	ldr.w	r9, [sp], #4
     864:	e899 0600 	ldmia.w	r9, {r9, sl}
     868:	f8dd 8000 	ldr.w	r8, [sp]
     86c:	fba9 5408 	umull	r5, r4, r9, r8
     870:	fbea b468 	umaal	fp, r4, sl, r8
     874:	f8dd 8010 	ldr.w	r8, [sp, #16]
     878:	fbec 0468 	umaal	r0, r4, ip, r8
     87c:	fbee 1468 	umaal	r1, r4, lr, r8
     880:	fbe9 2468 	umaal	r2, r4, r9, r8
     884:	fbea 3468 	umaal	r3, r4, sl, r8
     888:	f8dd 8004 	ldr.w	r8, [sp, #4]
     88c:	fbee 6568 	umaal	r6, r5, lr, r8
     890:	fbe9 b568 	umaal	fp, r5, r9, r8
     894:	fbea 0568 	umaal	r0, r5, sl, r8
     898:	f8dd 8014 	ldr.w	r8, [sp, #20]
     89c:	fbec 1568 	umaal	r1, r5, ip, r8
     8a0:	fbee 2568 	umaal	r2, r5, lr, r8
     8a4:	fbe9 3568 	umaal	r3, r5, r9, r8
     8a8:	fbea 4568 	umaal	r4, r5, sl, r8
     8ac:	960f      	str	r6, [sp, #60]	; 0x3c
     8ae:	f8dd 8008 	ldr.w	r8, [sp, #8]
     8b2:	fbae 7608 	umull	r7, r6, lr, r8
     8b6:	fbe9 0668 	umaal	r0, r6, r9, r8
     8ba:	fbea 1668 	umaal	r1, r6, sl, r8
     8be:	f8dd 8018 	ldr.w	r8, [sp, #24]
     8c2:	fbec 2668 	umaal	r2, r6, ip, r8
     8c6:	fbee 3668 	umaal	r3, r6, lr, r8
     8ca:	fbe9 4668 	umaal	r4, r6, r9, r8
     8ce:	fbea 5668 	umaal	r5, r6, sl, r8
     8d2:	f8dd 800c 	ldr.w	r8, [sp, #12]
     8d6:	fbec b768 	umaal	fp, r7, ip, r8
     8da:	fbee 0768 	umaal	r0, r7, lr, r8
     8de:	fbe9 1768 	umaal	r1, r7, r9, r8
     8e2:	fbea 2768 	umaal	r2, r7, sl, r8
     8e6:	f8dd 801c 	ldr.w	r8, [sp, #28]
     8ea:	fbec 3768 	umaal	r3, r7, ip, r8
     8ee:	fbee 4768 	umaal	r4, r7, lr, r8
     8f2:	fbe9 5768 	umaal	r5, r7, r9, r8
     8f6:	fbea 6768 	umaal	r6, r7, sl, r8
     8fa:	b008      	add	sp, #32
     8fc:	bd00      	pop	{pc}
     8fe:	bf00      	nop

00000900 <ocrypto_bigint_mul256>:
     900:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     904:	b087      	sub	sp, #28
     906:	f7ff ff4f 	bl	7a8 <ocrypto_mul256_noframe>
     90a:	f8dd 801c 	ldr.w	r8, [sp, #28]
     90e:	f108 0820 	add.w	r8, r8, #32
     912:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     916:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     918:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000920 <ocrypto_sqr256_noframe>:
     920:	b500      	push	{lr}
     922:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     926:	fba3 5203 	umull	r5, r2, r3, r3
     92a:	9501      	str	r5, [sp, #4]
     92c:	fba3 0104 	umull	r0, r1, r3, r4
     930:	fbe3 2064 	umaal	r2, r0, r3, r4
     934:	fbe3 1067 	umaal	r1, r0, r3, r7
     938:	9202      	str	r2, [sp, #8]
     93a:	fba3 5207 	umull	r5, r2, r3, r7
     93e:	fbe3 0268 	umaal	r0, r2, r3, r8
     942:	fbe4 1564 	umaal	r1, r5, r4, r4
     946:	fbe3 0568 	umaal	r0, r5, r3, r8
     94a:	fbe3 2569 	umaal	r2, r5, r3, r9
     94e:	9103      	str	r1, [sp, #12]
     950:	fba4 b607 	umull	fp, r6, r4, r7
     954:	fbe3 2669 	umaal	r2, r6, r3, r9
     958:	fbe3 566a 	umaal	r5, r6, r3, sl
     95c:	fbe4 0b67 	umaal	r0, fp, r4, r7
     960:	fbe4 2b68 	umaal	r2, fp, r4, r8
     964:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     968:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     96c:	9004      	str	r0, [sp, #16]
     96e:	fba4 1008 	umull	r1, r0, r4, r8
     972:	fbe4 5069 	umaal	r5, r0, r4, r9
     976:	fbe3 606c 	umaal	r6, r0, r3, ip
     97a:	fbe3 b06e 	umaal	fp, r0, r3, lr
     97e:	fbe7 2167 	umaal	r2, r1, r7, r7
     982:	fbe4 5169 	umaal	r5, r1, r4, r9
     986:	fbe4 616a 	umaal	r6, r1, r4, sl
     98a:	fbe3 b16e 	umaal	fp, r1, r3, lr
     98e:	fbe4 016e 	umaal	r0, r1, r4, lr
     992:	9205      	str	r2, [sp, #20]
     994:	fba7 3208 	umull	r3, r2, r7, r8
     998:	fbe4 626a 	umaal	r6, r2, r4, sl
     99c:	fbe4 b26c 	umaal	fp, r2, r4, ip
     9a0:	fbe4 026e 	umaal	r0, r2, r4, lr
     9a4:	fbe7 126e 	umaal	r1, r2, r7, lr
     9a8:	fbe7 5368 	umaal	r5, r3, r7, r8
     9ac:	fbe7 6369 	umaal	r6, r3, r7, r9
     9b0:	fbe4 b36c 	umaal	fp, r3, r4, ip
     9b4:	fbe7 036c 	umaal	r0, r3, r7, ip
     9b8:	fbe7 136e 	umaal	r1, r3, r7, lr
     9bc:	fbe8 236e 	umaal	r2, r3, r8, lr
     9c0:	9506      	str	r5, [sp, #24]
     9c2:	fba7 5409 	umull	r5, r4, r7, r9
     9c6:	fbe7 b46a 	umaal	fp, r4, r7, sl
     9ca:	fbe7 046c 	umaal	r0, r4, r7, ip
     9ce:	fbe8 146c 	umaal	r1, r4, r8, ip
     9d2:	fbe8 246e 	umaal	r2, r4, r8, lr
     9d6:	fbe9 346e 	umaal	r3, r4, r9, lr
     9da:	fbe8 6568 	umaal	r6, r5, r8, r8
     9de:	fbe7 b56a 	umaal	fp, r5, r7, sl
     9e2:	fbe8 056a 	umaal	r0, r5, r8, sl
     9e6:	fbe8 156c 	umaal	r1, r5, r8, ip
     9ea:	fbe9 256c 	umaal	r2, r5, r9, ip
     9ee:	fbe9 356e 	umaal	r3, r5, r9, lr
     9f2:	fbea 456e 	umaal	r4, r5, sl, lr
     9f6:	9607      	str	r6, [sp, #28]
     9f8:	fba8 7609 	umull	r7, r6, r8, r9
     9fc:	fbe8 066a 	umaal	r0, r6, r8, sl
     a00:	fbe9 166a 	umaal	r1, r6, r9, sl
     a04:	fbe9 266c 	umaal	r2, r6, r9, ip
     a08:	fbea 366c 	umaal	r3, r6, sl, ip
     a0c:	fbea 466e 	umaal	r4, r6, sl, lr
     a10:	fbec 566e 	umaal	r5, r6, ip, lr
     a14:	fbe8 b769 	umaal	fp, r7, r8, r9
     a18:	fbe9 0769 	umaal	r0, r7, r9, r9
     a1c:	fbe9 176a 	umaal	r1, r7, r9, sl
     a20:	fbea 276a 	umaal	r2, r7, sl, sl
     a24:	fbea 376c 	umaal	r3, r7, sl, ip
     a28:	fbec 476c 	umaal	r4, r7, ip, ip
     a2c:	fbec 576e 	umaal	r5, r7, ip, lr
     a30:	fbee 676e 	umaal	r6, r7, lr, lr
     a34:	bd00      	pop	{pc}
     a36:	bf00      	nop

00000a38 <ocrypto_bigint_sqr256>:
     a38:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a3c:	b087      	sub	sp, #28
     a3e:	f7ff ff6f 	bl	920 <ocrypto_sqr256_noframe>
     a42:	f8dd 801c 	ldr.w	r8, [sp, #28]
     a46:	f108 0820 	add.w	r8, r8, #32
     a4a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     a4e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     a50:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000a58 <ocrypto_constant_time_equal>:
     a58:	b430      	push	{r4, r5}
     a5a:	f04f 0300 	mov.w	r3, #0

00000a5e <constant_time_equal_loop>:
     a5e:	f810 4b01 	ldrb.w	r4, [r0], #1
     a62:	f811 5b01 	ldrb.w	r5, [r1], #1
     a66:	3a01      	subs	r2, #1
     a68:	ea84 0405 	eor.w	r4, r4, r5
     a6c:	ea43 0304 	orr.w	r3, r3, r4
     a70:	d1f5      	bne.n	a5e <constant_time_equal_loop>
     a72:	f1a3 0301 	sub.w	r3, r3, #1
     a76:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     a7a:	bc30      	pop	{r4, r5}
     a7c:	4770      	bx	lr
     a7e:	bf00      	nop

00000a80 <ocrypto_constant_time_is_zero>:
     a80:	f04f 0300 	mov.w	r3, #0

00000a84 <constant_time_is_zero_loop>:
     a84:	f810 2b01 	ldrb.w	r2, [r0], #1
     a88:	3901      	subs	r1, #1
     a8a:	ea43 0302 	orr.w	r3, r3, r2
     a8e:	d1f9      	bne.n	a84 <constant_time_is_zero_loop>
     a90:	f1a3 0301 	sub.w	r3, r3, #1
     a94:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     a98:	4770      	bx	lr
     a9a:	bf00      	nop

00000a9c <ocrypto_constant_time_xor>:
     a9c:	b430      	push	{r4, r5}

00000a9e <constant_time_xor_loop>:
     a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
     aa2:	f812 5b01 	ldrb.w	r5, [r2], #1
     aa6:	406c      	eors	r4, r5
     aa8:	f800 4b01 	strb.w	r4, [r0], #1
     aac:	3b01      	subs	r3, #1
     aae:	d1f6      	bne.n	a9e <constant_time_xor_loop>
     ab0:	bc30      	pop	{r4, r5}
     ab2:	4770      	bx	lr

00000ab4 <ocrypto_mod_p256_add>:
     ab4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     ab8:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     abc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     ac0:	185b      	adds	r3, r3, r1
     ac2:	eb54 040c 	adcs.w	r4, r4, ip
     ac6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     aca:	414d      	adcs	r5, r1
     acc:	eb56 060c 	adcs.w	r6, r6, ip
     ad0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     ad4:	414f      	adcs	r7, r1
     ad6:	eb58 080c 	adcs.w	r8, r8, ip
     ada:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     ade:	eb59 0901 	adcs.w	r9, r9, r1
     ae2:	eb5a 0a0c 	adcs.w	sl, sl, ip
     ae6:	4189      	sbcs	r1, r1
     ae8:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     aec:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     af0:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     af4:	f176 0600 	sbcs.w	r6, r6, #0
     af8:	f177 0700 	sbcs.w	r7, r7, #0
     afc:	f178 0800 	sbcs.w	r8, r8, #0
     b00:	f179 0901 	sbcs.w	r9, r9, #1
     b04:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     b08:	f151 0100 	adcs.w	r1, r1, #0
     b0c:	185b      	adds	r3, r3, r1
     b0e:	414c      	adcs	r4, r1
     b10:	414d      	adcs	r5, r1
     b12:	f156 0600 	adcs.w	r6, r6, #0
     b16:	f157 0700 	adcs.w	r7, r7, #0
     b1a:	f158 0800 	adcs.w	r8, r8, #0
     b1e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     b22:	eb5a 0a01 	adcs.w	sl, sl, r1
     b26:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     b2a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     b2e:	4770      	bx	lr

00000b30 <ocrypto_mod_p256_sub>:
     b30:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     b34:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     b38:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     b3c:	1a5b      	subs	r3, r3, r1
     b3e:	eb74 040c 	sbcs.w	r4, r4, ip
     b42:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     b46:	418d      	sbcs	r5, r1
     b48:	eb76 060c 	sbcs.w	r6, r6, ip
     b4c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     b50:	418f      	sbcs	r7, r1
     b52:	eb78 080c 	sbcs.w	r8, r8, ip
     b56:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     b5a:	eb79 0901 	sbcs.w	r9, r9, r1
     b5e:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     b62:	4189      	sbcs	r1, r1
     b64:	185b      	adds	r3, r3, r1
     b66:	414c      	adcs	r4, r1
     b68:	414d      	adcs	r5, r1
     b6a:	f156 0600 	adcs.w	r6, r6, #0
     b6e:	f157 0700 	adcs.w	r7, r7, #0
     b72:	f158 0800 	adcs.w	r8, r8, #0
     b76:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     b7a:	eb5a 0a01 	adcs.w	sl, sl, r1
     b7e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     b82:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     b86:	4770      	bx	lr

00000b88 <mul_reduce>:
     b88:	eb18 0804 	adds.w	r8, r8, r4
     b8c:	eb59 0905 	adcs.w	r9, r9, r5
     b90:	eb5a 0a06 	adcs.w	sl, sl, r6
     b94:	eb5b 0b07 	adcs.w	fp, fp, r7
     b98:	f05f 0c00 	movs.w	ip, #0
     b9c:	f14c 0c00 	adc.w	ip, ip, #0
     ba0:	eb18 0805 	adds.w	r8, r8, r5
     ba4:	eb59 0906 	adcs.w	r9, r9, r6
     ba8:	eb5a 0a07 	adcs.w	sl, sl, r7
     bac:	eb5b 0b07 	adcs.w	fp, fp, r7
     bb0:	eb50 000c 	adcs.w	r0, r0, ip
     bb4:	f05f 0c00 	movs.w	ip, #0
     bb8:	eb51 010c 	adcs.w	r1, r1, ip
     bbc:	eb52 020c 	adcs.w	r2, r2, ip
     bc0:	4163      	adcs	r3, r4
     bc2:	f14c 0c00 	adc.w	ip, ip, #0
     bc6:	ebb8 0807 	subs.w	r8, r8, r7
     bca:	f179 0900 	sbcs.w	r9, r9, #0
     bce:	f17a 0a00 	sbcs.w	sl, sl, #0
     bd2:	eb7b 0b04 	sbcs.w	fp, fp, r4
     bd6:	41a8      	sbcs	r0, r5
     bd8:	41b1      	sbcs	r1, r6
     bda:	41a2      	sbcs	r2, r4
     bdc:	41b3      	sbcs	r3, r6
     bde:	f16c 0c00 	sbc.w	ip, ip, #0
     be2:	ebbb 0b05 	subs.w	fp, fp, r5
     be6:	41b0      	sbcs	r0, r6
     be8:	41b9      	sbcs	r1, r7
     bea:	41aa      	sbcs	r2, r5
     bec:	41bb      	sbcs	r3, r7
     bee:	f16c 0c00 	sbc.w	ip, ip, #0
     bf2:	ea6f 74ec 	mvn.w	r4, ip, asr #31
     bf6:	ebb8 0804 	subs.w	r8, r8, r4
     bfa:	eb79 0904 	sbcs.w	r9, r9, r4
     bfe:	eb7a 0a04 	sbcs.w	sl, sl, r4
     c02:	f17b 0b00 	sbcs.w	fp, fp, #0
     c06:	f170 0000 	sbcs.w	r0, r0, #0
     c0a:	f171 0100 	sbcs.w	r1, r1, #0
     c0e:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
     c12:	41a3      	sbcs	r3, r4
     c14:	f16c 0c00 	sbc.w	ip, ip, #0
     c18:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
     c1c:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
     c20:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
     c24:	f15b 0b00 	adcs.w	fp, fp, #0
     c28:	f150 0400 	adcs.w	r4, r0, #0
     c2c:	f151 0500 	adcs.w	r5, r1, #0
     c30:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
     c34:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
     c38:	f14c 0c00 	adc.w	ip, ip, #0
     c3c:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
     c40:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
     c44:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
     c48:	f15b 0300 	adcs.w	r3, fp, #0
     c4c:	f154 0400 	adcs.w	r4, r4, #0
     c50:	f155 0500 	adcs.w	r5, r5, #0
     c54:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     c58:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
     c5c:	4770      	bx	lr
     c5e:	bf00      	nop

00000c60 <ocrypto_mod_p256_mul>:
     c60:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c64:	b087      	sub	sp, #28
     c66:	f7ff fd9f 	bl	7a8 <ocrypto_mul256_noframe>
     c6a:	f8dd 8010 	ldr.w	r8, [sp, #16]
     c6e:	f8dd 9014 	ldr.w	r9, [sp, #20]
     c72:	f8dd a018 	ldr.w	sl, [sp, #24]
     c76:	f7ff ff87 	bl	b88 <mul_reduce>
     c7a:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     c7e:	f7ff ff83 	bl	b88 <mul_reduce>
     c82:	b003      	add	sp, #12
     c84:	f85d 8b04 	ldr.w	r8, [sp], #4
     c88:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c90 <ocrypto_mod_p256_sqr>:
     c90:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c94:	b087      	sub	sp, #28
     c96:	f7ff fe43 	bl	920 <ocrypto_sqr256_noframe>
     c9a:	f8dd 8010 	ldr.w	r8, [sp, #16]
     c9e:	f8dd 9014 	ldr.w	r9, [sp, #20]
     ca2:	f8dd a018 	ldr.w	sl, [sp, #24]
     ca6:	f7ff ff6f 	bl	b88 <mul_reduce>
     caa:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     cae:	f7ff ff6b 	bl	b88 <mul_reduce>
     cb2:	b003      	add	sp, #12
     cb4:	f85d 8b04 	ldr.w	r8, [sp], #4
     cb8:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000cc0 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
     cc0:	4801      	ldr	r0, [pc, #4]	; (cc8 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
     cc2:	7800      	ldrb	r0, [r0, #0]
     cc4:	4770      	bx	lr
     cc6:	0000      	.short	0x0000
     cc8:	20000028 	.word	0x20000028

00000ccc <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
     ccc:	b570      	push	{r4, r5, r6, lr}
     cce:	f00c f8bb 	bl	ce48 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
     cd2:	4c13      	ldr	r4, [pc, #76]	; (d20 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>)
     cd4:	f06f 0527 	mvn.w	r5, #39	; 0x27
     cd8:	b928      	cbnz	r0, ce6 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x1a>
     cda:	f00c f8eb 	bl	ceb4 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
     cde:	b910      	cbnz	r0, ce6 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x1a>
     ce0:	f00c f8f2 	bl	cec8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
     ce4:	b120      	cbz	r0, cf0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     ce6:	480f      	ldr	r0, [pc, #60]	; (d24 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x58>)
     ce8:	6060      	str	r0, [r4, #4]
     cea:	7065      	strb	r5, [r4, #1]
     cec:	2008      	movs	r0, #8
     cee:	e010      	b.n	d12 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     cf0:	f00c f87f 	bl	cdf2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
     cf4:	b940      	cbnz	r0, d08 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
     cf6:	f00c f886 	bl	ce06 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
     cfa:	b928      	cbnz	r0, d08 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
     cfc:	f00c f89a 	bl	ce34 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
     d00:	b910      	cbnz	r0, d08 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
     d02:	f00c f8ab 	bl	ce5c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
     d06:	b130      	cbz	r0, d16 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x4a>
     d08:	4806      	ldr	r0, [pc, #24]	; (d24 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x58>)
     d0a:	3031      	adds	r0, #49	; 0x31
     d0c:	6060      	str	r0, [r4, #4]
     d0e:	7065      	strb	r5, [r4, #1]
     d10:	2004      	movs	r0, #4
     d12:	70a0      	strb	r0, [r4, #2]
     d14:	bd70      	pop	{r4, r5, r6, pc}
     d16:	21e8      	movs	r1, #232	; 0xe8
     d18:	2074      	movs	r0, #116	; 0x74
     d1a:	f003 fbbf 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d1e:	0000      	.short	0x0000
     d20:	20000028 	.word	0x20000028
     d24:	00010e1c 	.word	0x00010e1c

00000d28 <mpsl_tx_power_radio_supported_power_adjust>:
     d28:	4907      	ldr	r1, [pc, #28]	; (d48 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
     d2a:	f991 2002 	ldrsb.w	r2, [r1, #2]
     d2e:	4290      	cmp	r0, r2
     d30:	da03      	bge.n	d3a <mpsl_tx_power_radio_supported_power_adjust+0x12>
     d32:	f991 2001 	ldrsb.w	r2, [r1, #1]
     d36:	4290      	cmp	r0, r2
     d38:	dc01      	bgt.n	d3e <mpsl_tx_power_radio_supported_power_adjust+0x16>
     d3a:	4610      	mov	r0, r2
     d3c:	4770      	bx	lr
     d3e:	6849      	ldr	r1, [r1, #4]
     d40:	1a80      	subs	r0, r0, r2
     d42:	5608      	ldrsb	r0, [r1, r0]
     d44:	4770      	bx	lr
     d46:	0000      	.short	0x0000
     d48:	20000028 	.word	0x20000028

00000d4c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
     d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     d50:	461c      	mov	r4, r3
     d52:	4690      	mov	r8, r2
     d54:	460d      	mov	r5, r1
     d56:	4606      	mov	r6, r0
     d58:	f06f 0715 	mvn.w	r7, #21
     d5c:	2804      	cmp	r0, #4
     d5e:	d804      	bhi.n	d6a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     d60:	b11c      	cbz	r4, d6a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     d62:	f00b fce8 	bl	c736 <__udivmoddi4+0x2a6>
     d66:	42a8      	cmp	r0, r5
     d68:	d802      	bhi.n	d70 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
     d6a:	4638      	mov	r0, r7
     d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d70:	4805      	ldr	r0, [pc, #20]	; (d88 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
     d72:	4642      	mov	r2, r8
     d74:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
     d78:	b118      	cbz	r0, d82 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     d7a:	5740      	ldrsb	r0, [r0, r5]
     d7c:	4282      	cmp	r2, r0
     d7e:	dd00      	ble.n	d82 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     d80:	4602      	mov	r2, r0
     d82:	7022      	strb	r2, [r4, #0]
     d84:	2000      	movs	r0, #0
     d86:	e7f1      	b.n	d6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
     d88:	20000d18 	.word	0x20000d18
     d8c:	2800      	cmp	r0, #0
     d8e:	d019      	beq.n	dc4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x78>
     d90:	7803      	ldrb	r3, [r0, #0]
     d92:	4913      	ldr	r1, [pc, #76]	; (de0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x94>)
     d94:	4a13      	ldr	r2, [pc, #76]	; (de4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x98>)
     d96:	b113      	cbz	r3, d9e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x52>
     d98:	2b01      	cmp	r3, #1
     d9a:	d00e      	beq.n	dba <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x6e>
     d9c:	e011      	b.n	dc2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
     d9e:	7903      	ldrb	r3, [r0, #4]
     da0:	2b01      	cmp	r3, #1
     da2:	d000      	beq.n	da6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x5a>
     da4:	b96b      	cbnz	r3, dc2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
     da6:	7943      	ldrb	r3, [r0, #5]
     da8:	b10b      	cbz	r3, dae <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x62>
     daa:	2b01      	cmp	r3, #1
     dac:	d109      	bne.n	dc2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
     dae:	6883      	ldr	r3, [r0, #8]
     db0:	3b64      	subs	r3, #100	; 0x64
     db2:	428b      	cmp	r3, r1
     db4:	d205      	bcs.n	dc2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
     db6:	68c0      	ldr	r0, [r0, #12]
     db8:	e00e      	b.n	dd8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
     dba:	7903      	ldrb	r3, [r0, #4]
     dbc:	2b01      	cmp	r3, #1
     dbe:	d002      	beq.n	dc6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x7a>
     dc0:	b10b      	cbz	r3, dc6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x7a>
     dc2:	2000      	movs	r0, #0
     dc4:	4770      	bx	lr
     dc6:	7943      	ldrb	r3, [r0, #5]
     dc8:	b10b      	cbz	r3, dce <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x82>
     dca:	2b01      	cmp	r3, #1
     dcc:	d1f9      	bne.n	dc2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
     dce:	68c3      	ldr	r3, [r0, #12]
     dd0:	3b64      	subs	r3, #100	; 0x64
     dd2:	428b      	cmp	r3, r1
     dd4:	d2f5      	bcs.n	dc2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
     dd6:	6880      	ldr	r0, [r0, #8]
     dd8:	4290      	cmp	r0, r2
     dda:	d8f2      	bhi.n	dc2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
     ddc:	2001      	movs	r0, #1
     dde:	4770      	bx	lr
     de0:	0001863d 	.word	0x0001863d
     de4:	0f423fff 	.word	0x0f423fff
     de8:	b510      	push	{r4, lr}
     dea:	4c05      	ldr	r4, [pc, #20]	; (e00 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xb4>)
     dec:	6820      	ldr	r0, [r4, #0]
     dee:	b110      	cbz	r0, df6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xaa>
     df0:	4780      	blx	r0
     df2:	2000      	movs	r0, #0
     df4:	6020      	str	r0, [r4, #0]
     df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     dfa:	f002 b8bd 	b.w	2f78 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
     dfe:	0000      	.short	0x0000
     e00:	20000030 	.word	0x20000030

00000e04 <mpsl_timeslot_session_open>:
     e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     e08:	460e      	mov	r6, r1
     e0a:	0005      	movs	r5, r0
     e0c:	d004      	beq.n	e18 <mpsl_timeslot_session_open+0x14>
     e0e:	f000 f847 	bl	ea0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
     e12:	4607      	mov	r7, r0
     e14:	2400      	movs	r4, #0
     e16:	e00b      	b.n	e30 <mpsl_timeslot_session_open+0x2c>
     e18:	f06f 0015 	mvn.w	r0, #21
     e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e20:	4620      	mov	r0, r4
     e22:	f000 f843 	bl	eac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     e26:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
     e2a:	b130      	cbz	r0, e3a <mpsl_timeslot_session_open+0x36>
     e2c:	1c64      	adds	r4, r4, #1
     e2e:	b2e4      	uxtb	r4, r4
     e30:	42bc      	cmp	r4, r7
     e32:	d3f5      	bcc.n	e20 <mpsl_timeslot_session_open+0x1c>
     e34:	f06f 000b 	mvn.w	r0, #11
     e38:	e7f0      	b.n	e1c <mpsl_timeslot_session_open+0x18>
     e3a:	4627      	mov	r7, r4
     e3c:	2cff      	cmp	r4, #255	; 0xff
     e3e:	d0f9      	beq.n	e34 <mpsl_timeslot_session_open+0x30>
     e40:	4620      	mov	r0, r4
     e42:	f000 f833 	bl	eac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     e46:	4604      	mov	r4, r0
     e48:	f00b fe41 	bl	cace <__udivmoddi4+0x63e>
     e4c:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
     e50:	4621      	mov	r1, r4
     e52:	4808      	ldr	r0, [pc, #32]	; (e74 <mpsl_timeslot_session_open+0x70>)
     e54:	f002 f868 	bl	2f28 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
     e58:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
     e5c:	2820      	cmp	r0, #32
     e5e:	d006      	beq.n	e6e <mpsl_timeslot_session_open+0x6a>
     e60:	2001      	movs	r0, #1
     e62:	6225      	str	r5, [r4, #32]
     e64:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
     e68:	7037      	strb	r7, [r6, #0]
     e6a:	2000      	movs	r0, #0
     e6c:	e7d6      	b.n	e1c <mpsl_timeslot_session_open+0x18>
     e6e:	f06f 0022 	mvn.w	r0, #34	; 0x22
     e72:	e7d3      	b.n	e1c <mpsl_timeslot_session_open+0x18>
     e74:	0000c7f9 	.word	0x0000c7f9

00000e78 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
     e78:	b510      	push	{r4, lr}
     e7a:	0782      	lsls	r2, r0, #30
     e7c:	d002      	beq.n	e84 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
     e7e:	f06f 000d 	mvn.w	r0, #13
     e82:	bd10      	pop	{r4, pc}
     e84:	4a05      	ldr	r2, [pc, #20]	; (e9c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
     e86:	7011      	strb	r1, [r2, #0]
     e88:	6050      	str	r0, [r2, #4]
     e8a:	b128      	cbz	r0, e98 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
     e8c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
     e90:	010a      	lsls	r2, r1, #4
     e92:	2100      	movs	r1, #0
     e94:	f00c f89c 	bl	cfd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     e98:	2000      	movs	r0, #0
     e9a:	bd10      	pop	{r4, pc}
     e9c:	20000034 	.word	0x20000034

00000ea0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     ea0:	4801      	ldr	r0, [pc, #4]	; (ea8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     ea2:	7800      	ldrb	r0, [r0, #0]
     ea4:	4770      	bx	lr
     ea6:	0000      	.short	0x0000
     ea8:	20000034 	.word	0x20000034

00000eac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     eac:	4905      	ldr	r1, [pc, #20]	; (ec4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     eae:	780a      	ldrb	r2, [r1, #0]
     eb0:	4290      	cmp	r0, r2
     eb2:	d301      	bcc.n	eb8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     eb4:	2000      	movs	r0, #0
     eb6:	4770      	bx	lr
     eb8:	6849      	ldr	r1, [r1, #4]
     eba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     ebe:	eb01 1000 	add.w	r0, r1, r0, lsl #4
     ec2:	4770      	bx	lr
     ec4:	20000034 	.word	0x20000034

00000ec8 <MPSL_IRQ_RADIO_Handler>:
     ec8:	490e      	ldr	r1, [pc, #56]	; (f04 <MPSL_IRQ_RADIO_Handler+0x3c>)
     eca:	b510      	push	{r4, lr}
     ecc:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     ed0:	2820      	cmp	r0, #32
     ed2:	d012      	beq.n	efa <MPSL_IRQ_RADIO_Handler+0x32>
     ed4:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     ed8:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
     edc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     ee0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
     ee4:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
     ee8:	6840      	ldr	r0, [r0, #4]
     eea:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     eee:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
     ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     ef6:	2104      	movs	r1, #4
     ef8:	4710      	bx	r2
     efa:	f640 0187 	movw	r1, #2183	; 0x887
     efe:	2070      	movs	r0, #112	; 0x70
     f00:	f003 facc 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f04:	2000112c 	.word	0x2000112c
     f08:	b570      	push	{r4, r5, r6, lr}
     f0a:	4605      	mov	r5, r0
     f0c:	2a20      	cmp	r2, #32
     f0e:	d028      	beq.n	f62 <MPSL_IRQ_RADIO_Handler+0x9a>
     f10:	4819      	ldr	r0, [pc, #100]	; (f78 <MPSL_IRQ_RADIO_Handler+0xb0>)
     f12:	4c1a      	ldr	r4, [pc, #104]	; (f7c <MPSL_IRQ_RADIO_Handler+0xb4>)
     f14:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     f18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     f1c:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     f20:	4423      	add	r3, r4
     f22:	2920      	cmp	r1, #32
     f24:	d022      	beq.n	f6c <MPSL_IRQ_RADIO_Handler+0xa4>
     f26:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     f2a:	7840      	ldrb	r0, [r0, #1]
     f2c:	784c      	ldrb	r4, [r1, #1]
     f2e:	7048      	strb	r0, [r1, #1]
     f30:	4620      	mov	r0, r4
     f32:	4601      	mov	r1, r0
     f34:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     f38:	4291      	cmp	r1, r2
     f3a:	7005      	strb	r5, [r0, #0]
     f3c:	7840      	ldrb	r0, [r0, #1]
     f3e:	d1f8      	bne.n	f32 <MPSL_IRQ_RADIO_Handler+0x6a>
     f40:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     f44:	2a20      	cmp	r2, #32
     f46:	bf1a      	itte	ne
     f48:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     f4c:	7054      	strbne	r4, [r2, #1]
     f4e:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     f52:	2220      	movs	r2, #32
     f54:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     f58:	f88c 2001 	strb.w	r2, [ip, #1]
     f5c:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     f60:	bd70      	pop	{r4, r5, r6, pc}
     f62:	f240 2192 	movw	r1, #658	; 0x292
     f66:	2070      	movs	r0, #112	; 0x70
     f68:	f003 fa98 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f6c:	f893 4020 	ldrb.w	r4, [r3, #32]
     f70:	7840      	ldrb	r0, [r0, #1]
     f72:	f883 0020 	strb.w	r0, [r3, #32]
     f76:	e7db      	b.n	f30 <MPSL_IRQ_RADIO_Handler+0x68>
     f78:	200010ac 	.word	0x200010ac
     f7c:	2000112c 	.word	0x2000112c
     f80:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f84:	b085      	sub	sp, #20
     f86:	4615      	mov	r5, r2
     f88:	460c      	mov	r4, r1
     f8a:	f002 f9e3 	bl	3354 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     f8e:	4428      	add	r0, r5
     f90:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     f94:	9102      	str	r1, [sp, #8]
     f96:	6820      	ldr	r0, [r4, #0]
     f98:	1a40      	subs	r0, r0, r1
     f9a:	0200      	lsls	r0, r0, #8
     f9c:	17c1      	asrs	r1, r0, #31
     f9e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     fa2:	1200      	asrs	r0, r0, #8
     fa4:	2800      	cmp	r0, #0
     fa6:	f300 80f0 	bgt.w	118a <CONFIG_FPROTECT_BLOCK_SIZE+0x18a>
     faa:	f8dd 8020 	ldr.w	r8, [sp, #32]
     fae:	48ca      	ldr	r0, [pc, #808]	; (12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>)
     fb0:	eb08 0148 	add.w	r1, r8, r8, lsl #1
     fb4:	4408      	add	r0, r1
     fb6:	9003      	str	r0, [sp, #12]
     fb8:	f890 5020 	ldrb.w	r5, [r0, #32]
     fbc:	2020      	movs	r0, #32
     fbe:	4ec7      	ldr	r6, [pc, #796]	; (12dc <CONFIG_FPROTECT_BLOCK_SIZE+0x2dc>)
     fc0:	46ea      	mov	sl, sp
     fc2:	f10d 0904 	add.w	r9, sp, #4
     fc6:	f88d 0000 	strb.w	r0, [sp]
     fca:	2d20      	cmp	r5, #32
     fcc:	bf1c      	itt	ne
     fce:	48c4      	ldrne	r0, [pc, #784]	; (12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>)
     fd0:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     fd4:	d039      	beq.n	104a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
     fd6:	bf00      	nop
     fd8:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     fdc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     fe0:	f100 0108 	add.w	r1, r0, #8
     fe4:	68c0      	ldr	r0, [r0, #12]
     fe6:	6827      	ldr	r7, [r4, #0]
     fe8:	1a38      	subs	r0, r7, r0
     fea:	0200      	lsls	r0, r0, #8
     fec:	17c2      	asrs	r2, r0, #31
     fee:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     ff2:	1200      	asrs	r0, r0, #8
     ff4:	d429      	bmi.n	104a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
     ff6:	89e0      	ldrh	r0, [r4, #14]
     ff8:	b300      	cbz	r0, 103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
     ffa:	89c8      	ldrh	r0, [r1, #14]
     ffc:	b9f0      	cbnz	r0, 103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
     ffe:	6808      	ldr	r0, [r1, #0]
    1000:	9004      	str	r0, [sp, #16]
    1002:	f003 f8a1 	bl	4148 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1006:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    100a:	bf08      	it	eq
    100c:	200d      	moveq	r0, #13
    100e:	d00b      	beq.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
    1010:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1014:	3856      	subs	r0, #86	; 0x56
    1016:	bf08      	it	eq
    1018:	201c      	moveq	r0, #28
    101a:	d005      	beq.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
    101c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1020:	389f      	subs	r0, #159	; 0x9f
    1022:	bf14      	ite	ne
    1024:	2000      	movne	r0, #0
    1026:	2032      	moveq	r0, #50	; 0x32
    1028:	1c41      	adds	r1, r0, #1
    102a:	9804      	ldr	r0, [sp, #16]
    102c:	1a38      	subs	r0, r7, r0
    102e:	0200      	lsls	r0, r0, #8
    1030:	17c2      	asrs	r2, r0, #31
    1032:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1036:	1200      	asrs	r0, r0, #8
    1038:	4288      	cmp	r0, r1
    103a:	db06      	blt.n	104a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
    103c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1040:	f88a 5000 	strb.w	r5, [sl]
    1044:	7845      	ldrb	r5, [r0, #1]
    1046:	2d20      	cmp	r5, #32
    1048:	d1c6      	bne.n	fd8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x38>
    104a:	f89a 0000 	ldrb.w	r0, [sl]
    104e:	f889 0000 	strb.w	r0, [r9]
    1052:	2d20      	cmp	r5, #32
    1054:	bf1c      	itt	ne
    1056:	48a2      	ldrne	r0, [pc, #648]	; (12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>)
    1058:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    105c:	f000 8138 	beq.w	12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>
    1060:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1064:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    1068:	6860      	ldr	r0, [r4, #4]
    106a:	f8d7 8008 	ldr.w	r8, [r7, #8]
    106e:	f107 0108 	add.w	r1, r7, #8
    1072:	eba8 0000 	sub.w	r0, r8, r0
    1076:	0200      	lsls	r0, r0, #8
    1078:	17c2      	asrs	r2, r0, #31
    107a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    107e:	1200      	asrs	r0, r0, #8
    1080:	d427      	bmi.n	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
    1082:	89c8      	ldrh	r0, [r1, #14]
    1084:	2800      	cmp	r0, #0
    1086:	f000 8123 	beq.w	12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>
    108a:	89e0      	ldrh	r0, [r4, #14]
    108c:	2800      	cmp	r0, #0
    108e:	f040 811f 	bne.w	12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>
    1092:	f8d4 a000 	ldr.w	sl, [r4]
    1096:	f003 f857 	bl	4148 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    109a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    109e:	bf08      	it	eq
    10a0:	200d      	moveq	r0, #13
    10a2:	d00b      	beq.n	10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>
    10a4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    10a8:	3856      	subs	r0, #86	; 0x56
    10aa:	bf08      	it	eq
    10ac:	201c      	moveq	r0, #28
    10ae:	d005      	beq.n	10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>
    10b0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    10b4:	389f      	subs	r0, #159	; 0x9f
    10b6:	bf14      	ite	ne
    10b8:	2000      	movne	r0, #0
    10ba:	2032      	moveq	r0, #50	; 0x32
    10bc:	1c41      	adds	r1, r0, #1
    10be:	eba8 000a 	sub.w	r0, r8, sl
    10c2:	0200      	lsls	r0, r0, #8
    10c4:	17c2      	asrs	r2, r0, #31
    10c6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    10ca:	1200      	asrs	r0, r0, #8
    10cc:	4288      	cmp	r0, r1
    10ce:	f280 80ff 	bge.w	12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>
    10d2:	f889 5000 	strb.w	r5, [r9]
    10d6:	7e39      	ldrb	r1, [r7, #24]
    10d8:	7c20      	ldrb	r0, [r4, #16]
    10da:	4281      	cmp	r1, r0
    10dc:	d906      	bls.n	10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>
    10de:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    10e2:	7845      	ldrb	r5, [r0, #1]
    10e4:	2d20      	cmp	r5, #32
    10e6:	d1bb      	bne.n	1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
    10e8:	f000 b8f2 	b.w	12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>
    10ec:	f89d 0004 	ldrb.w	r0, [sp, #4]
    10f0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    10f4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    10f8:	8ac1      	ldrh	r1, [r0, #22]
    10fa:	68c5      	ldr	r5, [r0, #12]
    10fc:	bbe1      	cbnz	r1, 1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>
    10fe:	89e1      	ldrh	r1, [r4, #14]
    1100:	b3d1      	cbz	r1, 1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>
    1102:	6887      	ldr	r7, [r0, #8]
    1104:	f003 f820 	bl	4148 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1108:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    110c:	bf08      	it	eq
    110e:	200d      	moveq	r0, #13
    1110:	d00b      	beq.n	112a <CONFIG_FPROTECT_BLOCK_SIZE+0x12a>
    1112:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1116:	3856      	subs	r0, #86	; 0x56
    1118:	bf08      	it	eq
    111a:	201c      	moveq	r0, #28
    111c:	d005      	beq.n	112a <CONFIG_FPROTECT_BLOCK_SIZE+0x12a>
    111e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1122:	389f      	subs	r0, #159	; 0x9f
    1124:	bf14      	ite	ne
    1126:	2000      	movne	r0, #0
    1128:	2032      	moveq	r0, #50	; 0x32
    112a:	1c41      	adds	r1, r0, #1
    112c:	1be8      	subs	r0, r5, r7
    112e:	0200      	lsls	r0, r0, #8
    1130:	17c2      	asrs	r2, r0, #31
    1132:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1136:	1200      	asrs	r0, r0, #8
    1138:	4288      	cmp	r0, r1
    113a:	da1d      	bge.n	1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>
    113c:	f003 f804 	bl	4148 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1140:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1144:	bf08      	it	eq
    1146:	200d      	moveq	r0, #13
    1148:	d00b      	beq.n	1162 <CONFIG_FPROTECT_BLOCK_SIZE+0x162>
    114a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    114e:	3856      	subs	r0, #86	; 0x56
    1150:	bf08      	it	eq
    1152:	201c      	moveq	r0, #28
    1154:	d005      	beq.n	1162 <CONFIG_FPROTECT_BLOCK_SIZE+0x162>
    1156:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    115a:	389f      	subs	r0, #159	; 0x9f
    115c:	bf14      	ite	ne
    115e:	2000      	movne	r0, #0
    1160:	2032      	moveq	r0, #50	; 0x32
    1162:	f89d 1004 	ldrb.w	r1, [sp, #4]
    1166:	1c40      	adds	r0, r0, #1
    1168:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    116c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    1170:	6889      	ldr	r1, [r1, #8]
    1172:	4408      	add	r0, r1
    1174:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    1178:	9802      	ldr	r0, [sp, #8]
    117a:	1a28      	subs	r0, r5, r0
    117c:	0200      	lsls	r0, r0, #8
    117e:	17c1      	asrs	r1, r0, #31
    1180:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1184:	1200      	asrs	r0, r0, #8
    1186:	2800      	cmp	r0, #0
    1188:	dd03      	ble.n	1192 <CONFIG_FPROTECT_BLOCK_SIZE+0x192>
    118a:	b009      	add	sp, #36	; 0x24
    118c:	2000      	movs	r0, #0
    118e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1192:	e9d4 1000 	ldrd	r1, r0, [r4]
    1196:	1a40      	subs	r0, r0, r1
    1198:	4428      	add	r0, r5
    119a:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
    119e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    11a2:	e9c4 1000 	strd	r1, r0, [r4]
    11a6:	9808      	ldr	r0, [sp, #32]
    11a8:	9004      	str	r0, [sp, #16]
    11aa:	9803      	ldr	r0, [sp, #12]
    11ac:	46ea      	mov	sl, sp
    11ae:	f10d 0804 	add.w	r8, sp, #4
    11b2:	f890 5020 	ldrb.w	r5, [r0, #32]
    11b6:	2020      	movs	r0, #32
    11b8:	f88d 0000 	strb.w	r0, [sp]
    11bc:	2d20      	cmp	r5, #32
    11be:	d03c      	beq.n	123a <CONFIG_FPROTECT_BLOCK_SIZE+0x23a>
    11c0:	4847      	ldr	r0, [pc, #284]	; (12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>)
    11c2:	9904      	ldr	r1, [sp, #16]
    11c4:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    11c8:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    11cc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    11d0:	f100 0108 	add.w	r1, r0, #8
    11d4:	68c0      	ldr	r0, [r0, #12]
    11d6:	6827      	ldr	r7, [r4, #0]
    11d8:	1a38      	subs	r0, r7, r0
    11da:	0200      	lsls	r0, r0, #8
    11dc:	17c2      	asrs	r2, r0, #31
    11de:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    11e2:	1200      	asrs	r0, r0, #8
    11e4:	d429      	bmi.n	123a <CONFIG_FPROTECT_BLOCK_SIZE+0x23a>
    11e6:	89e0      	ldrh	r0, [r4, #14]
    11e8:	b300      	cbz	r0, 122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>
    11ea:	89c8      	ldrh	r0, [r1, #14]
    11ec:	b9f0      	cbnz	r0, 122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>
    11ee:	f8d1 9000 	ldr.w	r9, [r1]
    11f2:	f002 ffa9 	bl	4148 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    11f6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    11fa:	bf08      	it	eq
    11fc:	200d      	moveq	r0, #13
    11fe:	d00b      	beq.n	1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>
    1200:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1204:	3856      	subs	r0, #86	; 0x56
    1206:	bf08      	it	eq
    1208:	201c      	moveq	r0, #28
    120a:	d005      	beq.n	1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>
    120c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1210:	389f      	subs	r0, #159	; 0x9f
    1212:	bf14      	ite	ne
    1214:	2000      	movne	r0, #0
    1216:	2032      	moveq	r0, #50	; 0x32
    1218:	1c41      	adds	r1, r0, #1
    121a:	eba7 0009 	sub.w	r0, r7, r9
    121e:	0200      	lsls	r0, r0, #8
    1220:	17c2      	asrs	r2, r0, #31
    1222:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1226:	1200      	asrs	r0, r0, #8
    1228:	4288      	cmp	r0, r1
    122a:	db06      	blt.n	123a <CONFIG_FPROTECT_BLOCK_SIZE+0x23a>
    122c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1230:	f88a 5000 	strb.w	r5, [sl]
    1234:	7845      	ldrb	r5, [r0, #1]
    1236:	2d20      	cmp	r5, #32
    1238:	d1c6      	bne.n	11c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>
    123a:	f89a 0000 	ldrb.w	r0, [sl]
    123e:	f888 0000 	strb.w	r0, [r8]
    1242:	9804      	ldr	r0, [sp, #16]
    1244:	2d20      	cmp	r5, #32
    1246:	bf1c      	itt	ne
    1248:	4925      	ldrne	r1, [pc, #148]	; (12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>)
    124a:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    124e:	d03f      	beq.n	12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>
    1250:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1254:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    1258:	6861      	ldr	r1, [r4, #4]
    125a:	f8d7 9008 	ldr.w	r9, [r7, #8]
    125e:	f107 0008 	add.w	r0, r7, #8
    1262:	eba9 0101 	sub.w	r1, r9, r1
    1266:	0209      	lsls	r1, r1, #8
    1268:	17ca      	asrs	r2, r1, #31
    126a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    126e:	1209      	asrs	r1, r1, #8
    1270:	d422      	bmi.n	12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>
    1272:	89c0      	ldrh	r0, [r0, #14]
    1274:	b360      	cbz	r0, 12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>
    1276:	89e0      	ldrh	r0, [r4, #14]
    1278:	bb50      	cbnz	r0, 12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>
    127a:	f8d4 a000 	ldr.w	sl, [r4]
    127e:	f002 ff63 	bl	4148 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1282:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1286:	bf08      	it	eq
    1288:	200d      	moveq	r0, #13
    128a:	d00b      	beq.n	12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>
    128c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1290:	3856      	subs	r0, #86	; 0x56
    1292:	bf08      	it	eq
    1294:	201c      	moveq	r0, #28
    1296:	d005      	beq.n	12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>
    1298:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    129c:	389f      	subs	r0, #159	; 0x9f
    129e:	bf14      	ite	ne
    12a0:	2000      	movne	r0, #0
    12a2:	2032      	moveq	r0, #50	; 0x32
    12a4:	1c41      	adds	r1, r0, #1
    12a6:	eba9 000a 	sub.w	r0, r9, sl
    12aa:	0200      	lsls	r0, r0, #8
    12ac:	17c2      	asrs	r2, r0, #31
    12ae:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    12b2:	1200      	asrs	r0, r0, #8
    12b4:	4288      	cmp	r0, r1
    12b6:	da0b      	bge.n	12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>
    12b8:	f888 5000 	strb.w	r5, [r8]
    12bc:	7e38      	ldrb	r0, [r7, #24]
    12be:	7c21      	ldrb	r1, [r4, #16]
    12c0:	4288      	cmp	r0, r1
    12c2:	f67f af13 	bls.w	10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>
    12c6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    12ca:	7845      	ldrb	r5, [r0, #1]
    12cc:	2d20      	cmp	r5, #32
    12ce:	d1bf      	bne.n	1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>
    12d0:	b009      	add	sp, #36	; 0x24
    12d2:	2001      	movs	r0, #1
    12d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12d8:	2000112c 	.word	0x2000112c
    12dc:	20000d2c 	.word	0x20000d2c
    12e0:	200010ac 	.word	0x200010ac
    12e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12e8:	460f      	mov	r7, r1
    12ea:	4606      	mov	r6, r0
    12ec:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    12f0:	494b      	ldr	r1, [pc, #300]	; (1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>)
    12f2:	4699      	mov	r9, r3
    12f4:	4408      	add	r0, r1
    12f6:	4692      	mov	sl, r2
    12f8:	f890 4020 	ldrb.w	r4, [r0, #32]
    12fc:	2020      	movs	r0, #32
    12fe:	7010      	strb	r0, [r2, #0]
    1300:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    1304:	2c20      	cmp	r4, #32
    1306:	bf1c      	itt	ne
    1308:	4846      	ldrne	r0, [pc, #280]	; (1424 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9c>)
    130a:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    130e:	d038      	beq.n	1382 <CONFIG_FPROTECT_BLOCK_SIZE+0x382>
    1310:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1314:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    1318:	f100 0108 	add.w	r1, r0, #8
    131c:	68c0      	ldr	r0, [r0, #12]
    131e:	6835      	ldr	r5, [r6, #0]
    1320:	1a28      	subs	r0, r5, r0
    1322:	0200      	lsls	r0, r0, #8
    1324:	17c2      	asrs	r2, r0, #31
    1326:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    132a:	1200      	asrs	r0, r0, #8
    132c:	d429      	bmi.n	1382 <CONFIG_FPROTECT_BLOCK_SIZE+0x382>
    132e:	89f0      	ldrh	r0, [r6, #14]
    1330:	b300      	cbz	r0, 1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>
    1332:	89c8      	ldrh	r0, [r1, #14]
    1334:	b9f0      	cbnz	r0, 1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>
    1336:	6808      	ldr	r0, [r1, #0]
    1338:	9000      	str	r0, [sp, #0]
    133a:	f002 ff05 	bl	4148 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    133e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1342:	bf08      	it	eq
    1344:	200d      	moveq	r0, #13
    1346:	d00b      	beq.n	1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>
    1348:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    134c:	3856      	subs	r0, #86	; 0x56
    134e:	bf08      	it	eq
    1350:	201c      	moveq	r0, #28
    1352:	d005      	beq.n	1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>
    1354:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1358:	389f      	subs	r0, #159	; 0x9f
    135a:	bf14      	ite	ne
    135c:	2000      	movne	r0, #0
    135e:	2032      	moveq	r0, #50	; 0x32
    1360:	1c41      	adds	r1, r0, #1
    1362:	9800      	ldr	r0, [sp, #0]
    1364:	1a28      	subs	r0, r5, r0
    1366:	0200      	lsls	r0, r0, #8
    1368:	17c2      	asrs	r2, r0, #31
    136a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    136e:	1200      	asrs	r0, r0, #8
    1370:	4288      	cmp	r0, r1
    1372:	db06      	blt.n	1382 <CONFIG_FPROTECT_BLOCK_SIZE+0x382>
    1374:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    1378:	f88a 4000 	strb.w	r4, [sl]
    137c:	7844      	ldrb	r4, [r0, #1]
    137e:	2c20      	cmp	r4, #32
    1380:	d1c6      	bne.n	1310 <CONFIG_FPROTECT_BLOCK_SIZE+0x310>
    1382:	f89a 0000 	ldrb.w	r0, [sl]
    1386:	f889 0000 	strb.w	r0, [r9]
    138a:	2c20      	cmp	r4, #32
    138c:	bf1c      	itt	ne
    138e:	4825      	ldrne	r0, [pc, #148]	; (1424 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9c>)
    1390:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    1394:	d040      	beq.n	1418 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x90>
    1396:	bf00      	nop
    1398:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    139c:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    13a0:	6870      	ldr	r0, [r6, #4]
    13a2:	68bd      	ldr	r5, [r7, #8]
    13a4:	f107 0108 	add.w	r1, r7, #8
    13a8:	1a28      	subs	r0, r5, r0
    13aa:	0200      	lsls	r0, r0, #8
    13ac:	17c2      	asrs	r2, r0, #31
    13ae:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    13b2:	1200      	asrs	r0, r0, #8
    13b4:	d422      	bmi.n	13fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74>
    13b6:	89c8      	ldrh	r0, [r1, #14]
    13b8:	b370      	cbz	r0, 1418 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x90>
    13ba:	89f0      	ldrh	r0, [r6, #14]
    13bc:	bb60      	cbnz	r0, 1418 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x90>
    13be:	f8d6 b000 	ldr.w	fp, [r6]
    13c2:	f002 fec1 	bl	4148 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    13c6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    13ca:	bf08      	it	eq
    13cc:	200d      	moveq	r0, #13
    13ce:	d00b      	beq.n	13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>
    13d0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    13d4:	3856      	subs	r0, #86	; 0x56
    13d6:	bf08      	it	eq
    13d8:	201c      	moveq	r0, #28
    13da:	d005      	beq.n	13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>
    13dc:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    13e0:	389f      	subs	r0, #159	; 0x9f
    13e2:	bf14      	ite	ne
    13e4:	2000      	movne	r0, #0
    13e6:	2032      	moveq	r0, #50	; 0x32
    13e8:	1c41      	adds	r1, r0, #1
    13ea:	eba5 000b 	sub.w	r0, r5, fp
    13ee:	0200      	lsls	r0, r0, #8
    13f0:	17c2      	asrs	r2, r0, #31
    13f2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    13f6:	1200      	asrs	r0, r0, #8
    13f8:	4288      	cmp	r0, r1
    13fa:	da0d      	bge.n	1418 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x90>
    13fc:	f889 4000 	strb.w	r4, [r9]
    1400:	7e38      	ldrb	r0, [r7, #24]
    1402:	7c31      	ldrb	r1, [r6, #16]
    1404:	4288      	cmp	r0, r1
    1406:	d802      	bhi.n	140e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x86>
    1408:	2000      	movs	r0, #0
    140a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    140e:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    1412:	7844      	ldrb	r4, [r0, #1]
    1414:	2c20      	cmp	r4, #32
    1416:	d1bf      	bne.n	1398 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10>
    1418:	2001      	movs	r0, #1
    141a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    141e:	0000      	.short	0x0000
    1420:	2000112c 	.word	0x2000112c
    1424:	200010ac 	.word	0x200010ac
    1428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    142c:	b082      	sub	sp, #8
    142e:	4605      	mov	r5, r0
    1430:	4614      	mov	r4, r2
    1432:	4688      	mov	r8, r1
    1434:	89d0      	ldrh	r0, [r2, #14]
    1436:	aa01      	add	r2, sp, #4
    1438:	4669      	mov	r1, sp
    143a:	f001 ffa7 	bl	338c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    143e:	f002 fcb5 	bl	3dac <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    1442:	f001 ff87 	bl	3354 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1446:	4607      	mov	r7, r0
    1448:	4820      	ldr	r0, [pc, #128]	; (14cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x144>)
    144a:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    144e:	2920      	cmp	r1, #32
    1450:	d004      	beq.n	145c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd4>
    1452:	68c0      	ldr	r0, [r0, #12]
    1454:	1d40      	adds	r0, r0, #5
    1456:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    145a:	e024      	b.n	14a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11e>
    145c:	89e0      	ldrh	r0, [r4, #14]
    145e:	f105 0609 	add.w	r6, r5, #9
    1462:	b1b0      	cbz	r0, 1492 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10a>
    1464:	f002 ffa2 	bl	43ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1468:	b998      	cbnz	r0, 1492 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10a>
    146a:	f002 fe6d 	bl	4148 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    146e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1472:	bf08      	it	eq
    1474:	200d      	moveq	r0, #13
    1476:	d00b      	beq.n	1490 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x108>
    1478:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    147c:	3856      	subs	r0, #86	; 0x56
    147e:	bf08      	it	eq
    1480:	201c      	moveq	r0, #28
    1482:	d005      	beq.n	1490 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x108>
    1484:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1488:	389f      	subs	r0, #159	; 0x9f
    148a:	bf14      	ite	ne
    148c:	2000      	movne	r0, #0
    148e:	2032      	moveq	r0, #50	; 0x32
    1490:	4406      	add	r6, r0
    1492:	f1b8 0f00 	cmp.w	r8, #0
    1496:	d104      	bne.n	14a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11a>
    1498:	9800      	ldr	r0, [sp, #0]
    149a:	4287      	cmp	r7, r0
    149c:	bf84      	itt	hi
    149e:	1a38      	subhi	r0, r7, r0
    14a0:	4406      	addhi	r6, r0
    14a2:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    14a6:	e9d4 2000 	ldrd	r2, r0, [r4]
    14aa:	1a80      	subs	r0, r0, r2
    14ac:	4408      	add	r0, r1
    14ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    14b2:	e9c4 1000 	strd	r1, r0, [r4]
    14b6:	42a9      	cmp	r1, r5
    14b8:	bf24      	itt	cs
    14ba:	b002      	addcs	sp, #8
    14bc:	e8bd 81f0 	ldmiacs.w	sp!, {r4, r5, r6, r7, r8, pc}
    14c0:	68a0      	ldr	r0, [r4, #8]
    14c2:	1c40      	adds	r0, r0, #1
    14c4:	60a0      	str	r0, [r4, #8]
    14c6:	b002      	add	sp, #8
    14c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    14cc:	2000112c 	.word	0x2000112c
    14d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14d4:	b097      	sub	sp, #92	; 0x5c
    14d6:	4617      	mov	r7, r2
    14d8:	468b      	mov	fp, r1
    14da:	4605      	mov	r5, r0
    14dc:	f002 f9e8 	bl	38b0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    14e0:	4604      	mov	r4, r0
    14e2:	f002 fc63 	bl	3dac <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    14e6:	4606      	mov	r6, r0
    14e8:	f1bb 0f01 	cmp.w	fp, #1
    14ec:	bf18      	it	ne
    14ee:	f1bb 0f02 	cmpne.w	fp, #2
    14f2:	d005      	beq.n	1500 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x178>
    14f4:	f640 115d 	movw	r1, #2397	; 0x95d
    14f8:	f04f 0070 	mov.w	r0, #112	; 0x70
    14fc:	f002 ffce 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1500:	49f8      	ldr	r1, [pc, #992]	; (18e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x55c>)
    1502:	2001      	movs	r0, #1
    1504:	6008      	str	r0, [r1, #0]
    1506:	49f8      	ldr	r1, [pc, #992]	; (18e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x560>)
    1508:	6889      	ldr	r1, [r1, #8]
    150a:	6008      	str	r0, [r1, #0]
    150c:	2000      	movs	r0, #0
    150e:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    1512:	900c      	str	r0, [sp, #48]	; 0x30
    1514:	1e40      	subs	r0, r0, #1
    1516:	900d      	str	r0, [sp, #52]	; 0x34
    1518:	49f4      	ldr	r1, [pc, #976]	; (18ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x564>)
    151a:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
    151e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1522:	f100 0108 	add.w	r1, r0, #8
    1526:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    152a:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    152e:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    1532:	6980      	ldr	r0, [r0, #24]
    1534:	9012      	str	r0, [sp, #72]	; 0x48
    1536:	a80e      	add	r0, sp, #56	; 0x38
    1538:	f000 fbc4 	bl	1cc4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x93c>
    153c:	9007      	str	r0, [sp, #28]
    153e:	48ec      	ldr	r0, [pc, #944]	; (18f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x568>)
    1540:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    1544:	8b80      	ldrh	r0, [r0, #28]
    1546:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    154a:	f1b8 0f00 	cmp.w	r8, #0
    154e:	bf04      	itt	eq
    1550:	2000      	moveq	r0, #0
    1552:	9006      	streq	r0, [sp, #24]
    1554:	d00b      	beq.n	156e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1e6>
    1556:	2001      	movs	r0, #1
    1558:	9006      	str	r0, [sp, #24]
    155a:	48e5      	ldr	r0, [pc, #916]	; (18f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x568>)
    155c:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    1560:	b928      	cbnz	r0, 156e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1e6>
    1562:	f002 ff23 	bl	43ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1566:	2800      	cmp	r0, #0
    1568:	bf08      	it	eq
    156a:	2701      	moveq	r7, #1
    156c:	d000      	beq.n	1570 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1e8>
    156e:	2700      	movs	r7, #0
    1570:	f002 fdea 	bl	4148 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1574:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1578:	bf08      	it	eq
    157a:	200d      	moveq	r0, #13
    157c:	d00b      	beq.n	1596 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20e>
    157e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1582:	3856      	subs	r0, #86	; 0x56
    1584:	bf08      	it	eq
    1586:	201c      	moveq	r0, #28
    1588:	d005      	beq.n	1596 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20e>
    158a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    158e:	389f      	subs	r0, #159	; 0x9f
    1590:	bf14      	ite	ne
    1592:	2000      	movne	r0, #0
    1594:	2032      	moveq	r0, #50	; 0x32
    1596:	f04f 0900 	mov.w	r9, #0
    159a:	46ca      	mov	sl, r9
    159c:	900b      	str	r0, [sp, #44]	; 0x2c
    159e:	4546      	cmp	r6, r8
    15a0:	d938      	bls.n	1614 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28c>
    15a2:	9907      	ldr	r1, [sp, #28]
    15a4:	f8df 934c 	ldr.w	r9, [pc, #844]	; 18f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x56c>
    15a8:	ea6f 0c06 	mvn.w	ip, r6
    15ac:	466b      	mov	r3, sp
    15ae:	aa16      	add	r2, sp, #88	; 0x58
    15b0:	eb01 000c 	add.w	r0, r1, ip
    15b4:	4549      	cmp	r1, r9
    15b6:	d904      	bls.n	15c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x23a>
    15b8:	f240 516f 	movw	r1, #1391	; 0x56f
    15bc:	2070      	movs	r0, #112	; 0x70
    15be:	f002 ff6d 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15c2:	49cd      	ldr	r1, [pc, #820]	; (18f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x570>)
    15c4:	458c      	cmp	ip, r1
    15c6:	dd04      	ble.n	15d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24a>
    15c8:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    15cc:	2070      	movs	r0, #112	; 0x70
    15ce:	f002 ff65 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15d2:	49ca      	ldr	r1, [pc, #808]	; (18fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x574>)
    15d4:	458c      	cmp	ip, r1
    15d6:	da04      	bge.n	15e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x25a>
    15d8:	f240 5171 	movw	r1, #1393	; 0x571
    15dc:	2070      	movs	r0, #112	; 0x70
    15de:	f002 ff5d 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15e2:	49c7      	ldr	r1, [pc, #796]	; (1900 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x578>)
    15e4:	4281      	cmp	r1, r0
    15e6:	bfdc      	itt	le
    15e8:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    15ec:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    15f0:	dd05      	ble.n	15fe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x276>
    15f2:	2800      	cmp	r0, #0
    15f4:	bfbc      	itt	lt
    15f6:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    15fa:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    15fe:	4619      	mov	r1, r3
    1600:	f001 fec4 	bl	338c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1604:	9800      	ldr	r0, [sp, #0]
    1606:	990e      	ldr	r1, [sp, #56]	; 0x38
    1608:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    160c:	9000      	str	r0, [sp, #0]
    160e:	1a08      	subs	r0, r1, r0
    1610:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    1614:	2f00      	cmp	r7, #0
    1616:	bf18      	it	ne
    1618:	f8dd a02c 	ldrne.w	sl, [sp, #44]	; 0x2c
    161c:	d105      	bne.n	162a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a2>
    161e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1622:	2800      	cmp	r0, #0
    1624:	bf18      	it	ne
    1626:	f04f 0a02 	movne.w	sl, #2
    162a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    162e:	d008      	beq.n	1642 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ba>
    1630:	980e      	ldr	r0, [sp, #56]	; 0x38
    1632:	1b00      	subs	r0, r0, r4
    1634:	0200      	lsls	r0, r0, #8
    1636:	17c1      	asrs	r1, r0, #31
    1638:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    163c:	1200      	asrs	r0, r0, #8
    163e:	2801      	cmp	r0, #1
    1640:	da01      	bge.n	1646 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2be>
    1642:	2003      	movs	r0, #3
    1644:	e00d      	b.n	1662 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2da>
    1646:	b157      	cbz	r7, 165e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2d6>
    1648:	48a9      	ldr	r0, [pc, #676]	; (18f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x568>)
    164a:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
    164e:	b130      	cbz	r0, 165e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2d6>
    1650:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1654:	f110 0a00 	adds.w	sl, r0, #0
    1658:	bf18      	it	ne
    165a:	f04f 0a02 	movne.w	sl, #2
    165e:	4625      	mov	r5, r4
    1660:	2000      	movs	r0, #0
    1662:	4482      	add	sl, r0
    1664:	980e      	ldr	r0, [sp, #56]	; 0x38
    1666:	eba0 0009 	sub.w	r0, r0, r9
    166a:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    166e:	1e50      	subs	r0, r2, #1
    1670:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1674:	1b41      	subs	r1, r0, r5
    1676:	0209      	lsls	r1, r1, #8
    1678:	17cb      	asrs	r3, r1, #31
    167a:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    167e:	1209      	asrs	r1, r1, #8
    1680:	4551      	cmp	r1, sl
    1682:	db04      	blt.n	168e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x306>
    1684:	f1b9 0f00 	cmp.w	r9, #0
    1688:	bf18      	it	ne
    168a:	920e      	strne	r2, [sp, #56]	; 0x38
    168c:	e02d      	b.n	16ea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x362>
    168e:	f1b9 0f00 	cmp.w	r9, #0
    1692:	d005      	beq.n	16a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x318>
    1694:	f89d 004d 	ldrb.w	r0, [sp, #77]	; 0x4d
    1698:	b920      	cbnz	r0, 16a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x31c>
    169a:	f002 fb7d 	bl	3d98 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    169e:	b108      	cbz	r0, 16a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x31c>
    16a0:	b9af      	cbnz	r7, 16ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x346>
    16a2:	e00c      	b.n	16be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x336>
    16a4:	b92f      	cbnz	r7, 16b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32a>
    16a6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    16aa:	2800      	cmp	r0, #0
    16ac:	bf18      	it	ne
    16ae:	f1aa 0a02 	subne.w	sl, sl, #2
    16b2:	f04f 0900 	mov.w	r9, #0
    16b6:	f88d 904c 	strb.w	r9, [sp, #76]	; 0x4c
    16ba:	464e      	mov	r6, r9
    16bc:	e007      	b.n	16ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x346>
    16be:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    16c2:	b120      	cbz	r0, 16ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x346>
    16c4:	2000      	movs	r0, #0
    16c6:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    16ca:	f1aa 0a02 	sub.w	sl, sl, #2
    16ce:	980e      	ldr	r0, [sp, #56]	; 0x38
    16d0:	eba0 0009 	sub.w	r0, r0, r9
    16d4:	1e40      	subs	r0, r0, #1
    16d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16da:	1b41      	subs	r1, r0, r5
    16dc:	0209      	lsls	r1, r1, #8
    16de:	17ca      	asrs	r2, r1, #31
    16e0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    16e4:	1209      	asrs	r1, r1, #8
    16e6:	4551      	cmp	r1, sl
    16e8:	db7e      	blt.n	17e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x460>
    16ea:	9714      	str	r7, [sp, #80]	; 0x50
    16ec:	4605      	mov	r5, r0
    16ee:	f04f 0900 	mov.w	r9, #0
    16f2:	9f06      	ldr	r7, [sp, #24]
    16f4:	f001 ffb4 	bl	3660 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    16f8:	1a28      	subs	r0, r5, r0
    16fa:	0200      	lsls	r0, r0, #8
    16fc:	17c1      	asrs	r1, r0, #31
    16fe:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1702:	ea4f 2a20 	mov.w	sl, r0, asr #8
    1706:	f002 fd1f 	bl	4148 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    170a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    170e:	bf08      	it	eq
    1710:	200d      	moveq	r0, #13
    1712:	d00b      	beq.n	172c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a4>
    1714:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1718:	3856      	subs	r0, #86	; 0x56
    171a:	bf08      	it	eq
    171c:	201c      	moveq	r0, #28
    171e:	d005      	beq.n	172c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a4>
    1720:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1724:	389f      	subs	r0, #159	; 0x9f
    1726:	bf14      	ite	ne
    1728:	2000      	movne	r0, #0
    172a:	2032      	moveq	r0, #50	; 0x32
    172c:	300b      	adds	r0, #11
    172e:	4582      	cmp	sl, r0
    1730:	da20      	bge.n	1774 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3ec>
    1732:	f1bb 0f01 	cmp.w	fp, #1
    1736:	d002      	beq.n	173e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b6>
    1738:	9814      	ldr	r0, [sp, #80]	; 0x50
    173a:	b140      	cbz	r0, 174e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c6>
    173c:	e012      	b.n	1764 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3dc>
    173e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1742:	d11c      	bne.n	177e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f6>
    1744:	f640 01de 	movw	r1, #2270	; 0x8de
    1748:	2070      	movs	r0, #112	; 0x70
    174a:	f002 fea7 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    174e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1752:	d007      	beq.n	1764 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3dc>
    1754:	1b60      	subs	r0, r4, r5
    1756:	0200      	lsls	r0, r0, #8
    1758:	17c1      	asrs	r1, r0, #31
    175a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    175e:	1200      	asrs	r0, r0, #8
    1760:	2804      	cmp	r0, #4
    1762:	dd04      	ble.n	176e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3e6>
    1764:	462c      	mov	r4, r5
    1766:	4620      	mov	r0, r4
    1768:	f001 ffa0 	bl	36ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    176c:	e007      	b.n	177e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f6>
    176e:	2800      	cmp	r0, #0
    1770:	dc63      	bgt.n	183a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b2>
    1772:	e004      	b.n	177e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f6>
    1774:	462c      	mov	r4, r5
    1776:	4620      	mov	r0, r4
    1778:	f001 ff98 	bl	36ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    177c:	46b9      	mov	r9, r7
    177e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1782:	d055      	beq.n	1830 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a8>
    1784:	980e      	ldr	r0, [sp, #56]	; 0x38
    1786:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    1788:	1b00      	subs	r0, r0, r4
    178a:	1b12      	subs	r2, r2, r4
    178c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1790:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1794:	2801      	cmp	r0, #1
    1796:	d350      	bcc.n	183a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b2>
    1798:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    179c:	bf98      	it	ls
    179e:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    17a2:	d84a      	bhi.n	183a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b2>
    17a4:	4620      	mov	r0, r4
    17a6:	f00b fa3f 	bl	cc28 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    17aa:	9907      	ldr	r1, [sp, #28]
    17ac:	4a52      	ldr	r2, [pc, #328]	; (18f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x570>)
    17ae:	1a0d      	subs	r5, r1, r0
    17b0:	f04f 0a00 	mov.w	sl, #0
    17b4:	1aaa      	subs	r2, r5, r2
    17b6:	f17a 0200 	sbcs.w	r2, sl, #0
    17ba:	d318      	bcc.n	17ee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x466>
    17bc:	4b4e      	ldr	r3, [pc, #312]	; (18f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x570>)
    17be:	1a42      	subs	r2, r0, r1
    17c0:	1ad3      	subs	r3, r2, r3
    17c2:	f17a 0300 	sbcs.w	r3, sl, #0
    17c6:	d312      	bcc.n	17ee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x466>
    17c8:	4b4a      	ldr	r3, [pc, #296]	; (18f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x56c>)
    17ca:	42ab      	cmp	r3, r5
    17cc:	bf3e      	ittt	cc
    17ce:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    17d2:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    17d6:	1845      	addcc	r5, r0, r1
    17d8:	d309      	bcc.n	17ee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x466>
    17da:	4293      	cmp	r3, r2
    17dc:	d231      	bcs.n	1842 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ba>
    17de:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    17e2:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    17e6:	e000      	b.n	17ea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x462>
    17e8:	e027      	b.n	183a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b2>
    17ea:	4408      	add	r0, r1
    17ec:	4245      	negs	r5, r0
    17ee:	4f40      	ldr	r7, [pc, #256]	; (18f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x568>)
    17f0:	7fb8      	ldrb	r0, [r7, #30]
    17f2:	b358      	cbz	r0, 184c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c4>
    17f4:	f1bb 0f01 	cmp.w	fp, #1
    17f8:	d005      	beq.n	1806 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x47e>
    17fa:	2002      	movs	r0, #2
    17fc:	f002 f992 	bl	3b24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1800:	2001      	movs	r0, #1
    1802:	f002 f98f 	bl	3b24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1806:	45b0      	cmp	r8, r6
    1808:	d22c      	bcs.n	1864 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4dc>
    180a:	eba5 0106 	sub.w	r1, r5, r6
    180e:	f04f 0002 	mov.w	r0, #2
    1812:	f002 f8d1 	bl	39b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1816:	b390      	cbz	r0, 187e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f6>
    1818:	f1b8 0f00 	cmp.w	r8, #0
    181c:	bf1c      	itt	ne
    181e:	eba5 0108 	subne.w	r1, r5, r8
    1822:	2001      	movne	r0, #1
    1824:	d034      	beq.n	1890 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x508>
    1826:	bf00      	nop
    1828:	f002 f8c6 	bl	39b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    182c:	b338      	cbz	r0, 187e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f6>
    182e:	e02f      	b.n	1890 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x508>
    1830:	f640 11f1 	movw	r1, #2545	; 0x9f1
    1834:	2070      	movs	r0, #112	; 0x70
    1836:	f002 fe31 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    183a:	b017      	add	sp, #92	; 0x5c
    183c:	2000      	movs	r0, #0
    183e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1842:	f640 21c2 	movw	r1, #2754	; 0xac2
    1846:	2070      	movs	r0, #112	; 0x70
    1848:	f002 fe28 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    184c:	45b0      	cmp	r8, r6
    184e:	bf34      	ite	cc
    1850:	4630      	movcc	r0, r6
    1852:	4640      	movcs	r0, r8
    1854:	301e      	adds	r0, #30
    1856:	42a8      	cmp	r0, r5
    1858:	dbcc      	blt.n	17f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x46c>
    185a:	f640 2105 	movw	r1, #2565	; 0xa05
    185e:	2070      	movs	r0, #112	; 0x70
    1860:	f002 fe1c 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1864:	d90c      	bls.n	1880 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f8>
    1866:	eba5 0108 	sub.w	r1, r5, r8
    186a:	2001      	movs	r0, #1
    186c:	f002 f8a4 	bl	39b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1870:	b128      	cbz	r0, 187e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f6>
    1872:	2e00      	cmp	r6, #0
    1874:	bf1c      	itt	ne
    1876:	1ba9      	subne	r1, r5, r6
    1878:	2002      	movne	r0, #2
    187a:	d009      	beq.n	1890 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x508>
    187c:	e7d4      	b.n	1828 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a0>
    187e:	e030      	b.n	18e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x55a>
    1880:	ea56 0008 	orrs.w	r0, r6, r8
    1884:	d004      	beq.n	1890 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x508>
    1886:	f640 1141 	movw	r1, #2369	; 0x941
    188a:	2070      	movs	r0, #112	; 0x70
    188c:	f002 fe06 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1890:	4629      	mov	r1, r5
    1892:	2000      	movs	r0, #0
    1894:	f002 f890 	bl	39b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1898:	b318      	cbz	r0, 18e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x55a>
    189a:	9806      	ldr	r0, [sp, #24]
    189c:	2601      	movs	r6, #1
    189e:	2800      	cmp	r0, #0
    18a0:	bf04      	itt	eq
    18a2:	f897 002b 	ldrbeq.w	r0, [r7, #43]	; 0x2b
    18a6:	2800      	cmpeq	r0, #0
    18a8:	d002      	beq.n	18b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x528>
    18aa:	f1b9 0f00 	cmp.w	r9, #0
    18ae:	d033      	beq.n	1918 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x590>
    18b0:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    18b4:	b118      	cbz	r0, 18be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x536>
    18b6:	f002 fc4d 	bl	4154 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    18ba:	f887 a02a 	strb.w	sl, [r7, #42]	; 0x2a
    18be:	f1b9 0f00 	cmp.w	r9, #0
    18c2:	d02c      	beq.n	191e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x596>
    18c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    18c6:	1a20      	subs	r0, r4, r0
    18c8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    18cc:	2005      	movs	r0, #5
    18ce:	f002 f873 	bl	39b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    18d2:	b3e0      	cbz	r0, 194e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c6>
    18d4:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    18d8:	2800      	cmp	r0, #0
    18da:	bf08      	it	eq
    18dc:	f887 602b 	strbeq.w	r6, [r7, #43]	; 0x2b
    18e0:	e025      	b.n	192e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a6>
    18e2:	e00f      	b.n	1904 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x57c>
    18e4:	40000508 	.word	0x40000508
    18e8:	2000003c 	.word	0x2000003c
    18ec:	20000d2c 	.word	0x20000d2c
    18f0:	2000112c 	.word	0x2000112c
    18f4:	1e847fff 	.word	0x1e847fff
    18f8:	0f424000 	.word	0x0f424000
    18fc:	f0bdc000 	.word	0xf0bdc000
    1900:	1e848000 	.word	0x1e848000
    1904:	2002      	movs	r0, #2
    1906:	f002 f90d 	bl	3b24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    190a:	2001      	movs	r0, #1
    190c:	f002 f90a 	bl	3b24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1910:	b017      	add	sp, #92	; 0x5c
    1912:	2000      	movs	r0, #0
    1914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1918:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    191c:	b190      	cbz	r0, 1944 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5bc>
    191e:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    1922:	b120      	cbz	r0, 192e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a6>
    1924:	2005      	movs	r0, #5
    1926:	f002 f8fd 	bl	3b24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    192a:	f887 a02b 	strb.w	sl, [r7, #43]	; 0x2b
    192e:	eba5 0008 	sub.w	r0, r5, r8
    1932:	f1a0 0119 	sub.w	r1, r0, #25
    1936:	2900      	cmp	r1, #0
    1938:	dc0f      	bgt.n	195a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5d2>
    193a:	f640 212e 	movw	r1, #2606	; 0xa2e
    193e:	2070      	movs	r0, #112	; 0x70
    1940:	f002 fdac 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1944:	f002 fc22 	bl	418c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1948:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
    194c:	e7b7      	b.n	18be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x536>
    194e:	e7ff      	b.n	1950 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c8>
    1950:	f240 21f2 	movw	r1, #754	; 0x2f2
    1954:	2070      	movs	r0, #112	; 0x70
    1956:	f002 fda1 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    195a:	2003      	movs	r0, #3
    195c:	f002 f82c 	bl	39b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1960:	b1c0      	cbz	r0, 1994 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60c>
    1962:	480f      	ldr	r0, [pc, #60]	; (19a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x618>)
    1964:	6880      	ldr	r0, [r0, #8]
    1966:	f8c0 a000 	str.w	sl, [r0]
    196a:	480e      	ldr	r0, [pc, #56]	; (19a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x61c>)
    196c:	f8c0 a000 	str.w	sl, [r0]
    1970:	ac0c      	add	r4, sp, #48	; 0x30
    1972:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    1976:	6038      	str	r0, [r7, #0]
    1978:	6079      	str	r1, [r7, #4]
    197a:	60ba      	str	r2, [r7, #8]
    197c:	60fb      	str	r3, [r7, #12]
    197e:	ac10      	add	r4, sp, #64	; 0x40
    1980:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    1984:	6138      	str	r0, [r7, #16]
    1986:	6179      	str	r1, [r7, #20]
    1988:	61ba      	str	r2, [r7, #24]
    198a:	61fb      	str	r3, [r7, #28]
    198c:	b017      	add	sp, #92	; 0x5c
    198e:	2001      	movs	r0, #1
    1990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1994:	f640 2136 	movw	r1, #2614	; 0xa36
    1998:	2070      	movs	r0, #112	; 0x70
    199a:	f002 fd7f 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    199e:	0000      	.short	0x0000
    19a0:	2000003c 	.word	0x2000003c
    19a4:	40000508 	.word	0x40000508
    19a8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    19ac:	4606      	mov	r6, r0
    19ae:	7808      	ldrb	r0, [r1, #0]
    19b0:	7490      	strb	r0, [r2, #18]
    19b2:	7ac8      	ldrb	r0, [r1, #11]
    19b4:	7450      	strb	r0, [r2, #17]
    19b6:	7a88      	ldrb	r0, [r1, #10]
    19b8:	7410      	strb	r0, [r2, #16]
    19ba:	8908      	ldrh	r0, [r1, #8]
    19bc:	81d0      	strh	r0, [r2, #14]
    19be:	f8df 8198 	ldr.w	r8, [pc, #408]	; 1b58 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7d0>
    19c2:	6870      	ldr	r0, [r6, #4]
    19c4:	469a      	mov	sl, r3
    19c6:	fba0 7908 	umull	r7, r9, r0, r8
    19ca:	4614      	mov	r4, r2
    19cc:	460d      	mov	r5, r1
    19ce:	6830      	ldr	r0, [r6, #0]
    19d0:	f00b f92a 	bl	cc28 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    19d4:	19c1      	adds	r1, r0, r7
    19d6:	7828      	ldrb	r0, [r5, #0]
    19d8:	ea4f 0c68 	mov.w	ip, r8, asr #1
    19dc:	f149 0200 	adc.w	r2, r9, #0
    19e0:	f1a8 0e01 	sub.w	lr, r8, #1
    19e4:	f1cc 0b00 	rsb	fp, ip, #0
    19e8:	b168      	cbz	r0, 1a06 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x67e>
    19ea:	89e0      	ldrh	r0, [r4, #14]
    19ec:	7c67      	ldrb	r7, [r4, #17]
    19ee:	43c0      	mvns	r0, r0
    19f0:	f8d5 9004 	ldr.w	r9, [r5, #4]
    19f4:	f104 020c 	add.w	r2, r4, #12
    19f8:	4560      	cmp	r0, ip
    19fa:	dd5f      	ble.n	1abc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x734>
    19fc:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    1a00:	2070      	movs	r0, #112	; 0x70
    1a02:	f002 fd4b 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a06:	f8df 9154 	ldr.w	r9, [pc, #340]	; 1b5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7d4>
    1a0a:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    1a0e:	eb11 0a09 	adds.w	sl, r1, r9
    1a12:	f142 0900 	adc.w	r9, r2, #0
    1a16:	ebb0 0a0a 	subs.w	sl, r0, sl
    1a1a:	eb73 0909 	sbcs.w	r9, r3, r9
    1a1e:	d245      	bcs.n	1aac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x724>
    1a20:	1a41      	subs	r1, r0, r1
    1a22:	eb73 0102 	sbcs.w	r1, r3, r2
    1a26:	d341      	bcc.n	1aac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x724>
    1a28:	1bc7      	subs	r7, r0, r7
    1a2a:	6870      	ldr	r0, [r6, #4]
    1a2c:	60a0      	str	r0, [r4, #8]
    1a2e:	4547      	cmp	r7, r8
    1a30:	d305      	bcc.n	1a3e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6b6>
    1a32:	1c40      	adds	r0, r0, #1
    1a34:	f1a7 57f4 	sub.w	r7, r7, #511705088	; 0x1e800000
    1a38:	f5a7 2790 	sub.w	r7, r7, #294912	; 0x48000
    1a3c:	60a0      	str	r0, [r4, #8]
    1a3e:	89e0      	ldrh	r0, [r4, #14]
    1a40:	686d      	ldr	r5, [r5, #4]
    1a42:	43c1      	mvns	r1, r0
    1a44:	7c66      	ldrb	r6, [r4, #17]
    1a46:	1878      	adds	r0, r7, r1
    1a48:	f104 020c 	add.w	r2, r4, #12
    1a4c:	4577      	cmp	r7, lr
    1a4e:	d904      	bls.n	1a5a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6d2>
    1a50:	f240 516f 	movw	r1, #1391	; 0x56f
    1a54:	2070      	movs	r0, #112	; 0x70
    1a56:	f002 fd21 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a5a:	4561      	cmp	r1, ip
    1a5c:	dcce      	bgt.n	19fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x674>
    1a5e:	4559      	cmp	r1, fp
    1a60:	db2f      	blt.n	1ac2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x73a>
    1a62:	4580      	cmp	r8, r0
    1a64:	bfdc      	itt	le
    1a66:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1a6a:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1a6e:	dd05      	ble.n	1a7c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6f4>
    1a70:	2800      	cmp	r0, #0
    1a72:	bfbc      	itt	lt
    1a74:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1a78:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1a7c:	4621      	mov	r1, r4
    1a7e:	f001 fc85 	bl	338c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1a82:	6820      	ldr	r0, [r4, #0]
    1a84:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1a88:	1978      	adds	r0, r7, r5
    1a8a:	1c40      	adds	r0, r0, #1
    1a8c:	6021      	str	r1, [r4, #0]
    1a8e:	2e00      	cmp	r6, #0
    1a90:	bf08      	it	eq
    1a92:	307a      	addeq	r0, #122	; 0x7a
    1a94:	d003      	beq.n	1a9e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x716>
    1a96:	2e01      	cmp	r6, #1
    1a98:	bf08      	it	eq
    1a9a:	3048      	addeq	r0, #72	; 0x48
    1a9c:	d134      	bne.n	1b08 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x780>
    1a9e:	f001 fc59 	bl	3354 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1aa2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1aa6:	6060      	str	r0, [r4, #4]
    1aa8:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1aac:	6830      	ldr	r0, [r6, #0]
    1aae:	1e40      	subs	r0, r0, #1
    1ab0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1ab4:	6020      	str	r0, [r4, #0]
    1ab6:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    1aba:	e7f4      	b.n	1aa6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x71e>
    1abc:	4601      	mov	r1, r0
    1abe:	4558      	cmp	r0, fp
    1ac0:	da04      	bge.n	1acc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x744>
    1ac2:	f240 5171 	movw	r1, #1393	; 0x571
    1ac6:	2070      	movs	r0, #112	; 0x70
    1ac8:	f002 fce8 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1acc:	4580      	cmp	r8, r0
    1ace:	bfdc      	itt	le
    1ad0:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    1ad4:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    1ad8:	dd05      	ble.n	1ae6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x75e>
    1ada:	2800      	cmp	r0, #0
    1adc:	bfbc      	itt	lt
    1ade:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    1ae2:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    1ae6:	4621      	mov	r1, r4
    1ae8:	f001 fc50 	bl	338c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1aec:	6820      	ldr	r0, [r4, #0]
    1aee:	2f00      	cmp	r7, #0
    1af0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1af4:	f109 0001 	add.w	r0, r9, #1
    1af8:	6021      	str	r1, [r4, #0]
    1afa:	bf08      	it	eq
    1afc:	307a      	addeq	r0, #122	; 0x7a
    1afe:	d008      	beq.n	1b12 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78a>
    1b00:	2f01      	cmp	r7, #1
    1b02:	bf08      	it	eq
    1b04:	3048      	addeq	r0, #72	; 0x48
    1b06:	d004      	beq.n	1b12 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78a>
    1b08:	f240 6124 	movw	r1, #1572	; 0x624
    1b0c:	2070      	movs	r0, #112	; 0x70
    1b0e:	f002 fcc5 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b12:	f001 fc1f 	bl	3354 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1b16:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1b1a:	6061      	str	r1, [r4, #4]
    1b1c:	6870      	ldr	r0, [r6, #4]
    1b1e:	60a0      	str	r0, [r4, #8]
    1b20:	2100      	movs	r1, #0
    1b22:	4622      	mov	r2, r4
    1b24:	6830      	ldr	r0, [r6, #0]
    1b26:	f7ff fc7f 	bl	1428 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa0>
    1b2a:	6832      	ldr	r2, [r6, #0]
    1b2c:	4653      	mov	r3, sl
    1b2e:	4621      	mov	r1, r4
    1b30:	6928      	ldr	r0, [r5, #16]
    1b32:	f7ff fa25 	bl	f80 <MPSL_IRQ_RADIO_Handler+0xb8>
    1b36:	2800      	cmp	r0, #0
    1b38:	bf18      	it	ne
    1b3a:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1b3e:	e9d4 2100 	ldrd	r2, r1, [r4]
    1b42:	6830      	ldr	r0, [r6, #0]
    1b44:	1a89      	subs	r1, r1, r2
    1b46:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1b4a:	4408      	add	r0, r1
    1b4c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b50:	e9c4 2000 	strd	r2, r0, [r4]
    1b54:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1b58:	1e848000 	.word	0x1e848000
    1b5c:	0f424000 	.word	0x0f424000
    1b60:	b570      	push	{r4, r5, r6, lr}
    1b62:	4d1e      	ldr	r5, [pc, #120]	; (1bdc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x854>)
    1b64:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1b68:	2820      	cmp	r0, #32
    1b6a:	bf18      	it	ne
    1b6c:	bd70      	popne	{r4, r5, r6, pc}
    1b6e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    1b72:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    1b76:	4428      	add	r0, r5
    1b78:	f890 4020 	ldrb.w	r4, [r0, #32]
    1b7c:	2c20      	cmp	r4, #32
    1b7e:	d027      	beq.n	1bd0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x848>
    1b80:	4b17      	ldr	r3, [pc, #92]	; (1be0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x858>)
    1b82:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    1b86:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    1b8a:	7849      	ldrb	r1, [r1, #1]
    1b8c:	f880 1020 	strb.w	r1, [r0, #32]
    1b90:	20ff      	movs	r0, #255	; 0xff
    1b92:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    1b96:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
    1b9a:	4621      	mov	r1, r4
    1b9c:	2002      	movs	r0, #2
    1b9e:	f000 f8cb 	bl	1d38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9b0>
    1ba2:	2000      	movs	r0, #0
    1ba4:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    1ba8:	77a8      	strb	r0, [r5, #30]
    1baa:	490e      	ldr	r1, [pc, #56]	; (1be4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x85c>)
    1bac:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1bb0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1bb4:	7e00      	ldrb	r0, [r0, #24]
    1bb6:	2800      	cmp	r0, #0
    1bb8:	bf08      	it	eq
    1bba:	f002 fdc9 	bleq	4750 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    1bbe:	2000      	movs	r0, #0
    1bc0:	4909      	ldr	r1, [pc, #36]	; (1be8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x860>)
    1bc2:	6849      	ldr	r1, [r1, #4]
    1bc4:	2900      	cmp	r1, #0
    1bc6:	bf08      	it	eq
    1bc8:	bd70      	popeq	{r4, r5, r6, pc}
    1bca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1bce:	4708      	bx	r1
    1bd0:	f44f 714b 	mov.w	r1, #812	; 0x32c
    1bd4:	2070      	movs	r0, #112	; 0x70
    1bd6:	f002 fc61 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1bda:	0000      	.short	0x0000
    1bdc:	2000112c 	.word	0x2000112c
    1be0:	200010ac 	.word	0x200010ac
    1be4:	20000d2c 	.word	0x20000d2c
    1be8:	2000003c 	.word	0x2000003c
    1bec:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1bf0:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1cb4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x92c>
    1bf4:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    1bf8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1bfc:	4440      	add	r0, r8
    1bfe:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1c02:	2c20      	cmp	r4, #32
    1c04:	bf08      	it	eq
    1c06:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1c0a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 1cb8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x930>
    1c0e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1cbc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x934>
    1c12:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    1c16:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1c1a:	2607      	movs	r6, #7
    1c1c:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    1c20:	2801      	cmp	r0, #1
    1c22:	d00e      	beq.n	1c42 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8ba>
    1c24:	2804      	cmp	r0, #4
    1c26:	bf08      	it	eq
    1c28:	2602      	moveq	r6, #2
    1c2a:	d00a      	beq.n	1c42 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8ba>
    1c2c:	2805      	cmp	r0, #5
    1c2e:	bf0c      	ite	eq
    1c30:	2603      	moveq	r6, #3
    1c32:	2806      	cmpne	r0, #6
    1c34:	d005      	beq.n	1c42 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8ba>
    1c36:	f640 01a8 	movw	r1, #2216	; 0x8a8
    1c3a:	f04f 0070 	mov.w	r0, #112	; 0x70
    1c3e:	f002 fc2d 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c42:	f1bb 0f00 	cmp.w	fp, #0
    1c46:	bf18      	it	ne
    1c48:	f3af 8000 	nopne.w
    1c4c:	f3ef 8010 	mrs	r0, PRIMASK
    1c50:	b672      	cpsid	i
    1c52:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1c56:	784a      	ldrb	r2, [r1, #1]
    1c58:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1c5c:	4441      	add	r1, r8
    1c5e:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1c62:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1c66:	42a2      	cmp	r2, r4
    1c68:	bf04      	itt	eq
    1c6a:	2220      	moveq	r2, #32
    1c6c:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1c70:	b1c0      	cbz	r0, 1ca4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x91c>
    1c72:	462a      	mov	r2, r5
    1c74:	4621      	mov	r1, r4
    1c76:	2001      	movs	r0, #1
    1c78:	f000 f85e 	bl	1d38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9b0>
    1c7c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1c80:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    1c84:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    1c88:	6840      	ldr	r0, [r0, #4]
    1c8a:	4631      	mov	r1, r6
    1c8c:	4790      	blx	r2
    1c8e:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    1c92:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1c96:	4440      	add	r0, r8
    1c98:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1c9c:	2c20      	cmp	r4, #32
    1c9e:	d1ba      	bne.n	1c16 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88e>
    1ca0:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1ca4:	4806      	ldr	r0, [pc, #24]	; (1cc0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x938>)
    1ca6:	2800      	cmp	r0, #0
    1ca8:	bf18      	it	ne
    1caa:	f3af 8000 	nopne.w
    1cae:	b662      	cpsie	i
    1cb0:	e7df      	b.n	1c72 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8ea>
    1cb2:	0000      	.short	0x0000
    1cb4:	2000112c 	.word	0x2000112c
    1cb8:	00000000 	.word	0x00000000
    1cbc:	200010ac 	.word	0x200010ac
    1cc0:	00000000 	.word	0x00000000
    1cc4:	b510      	push	{r4, lr}
    1cc6:	4604      	mov	r4, r0
    1cc8:	6800      	ldr	r0, [r0, #0]
    1cca:	f00a ffad 	bl	cc28 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1cce:	4602      	mov	r2, r0
    1cd0:	89e0      	ldrh	r0, [r4, #14]
    1cd2:	7b21      	ldrb	r1, [r4, #12]
    1cd4:	4b14      	ldr	r3, [pc, #80]	; (1d28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9a0>)
    1cd6:	4408      	add	r0, r1
    1cd8:	1c41      	adds	r1, r0, #1
    1cda:	1850      	adds	r0, r2, r1
    1cdc:	429a      	cmp	r2, r3
    1cde:	d904      	bls.n	1cea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x962>
    1ce0:	f240 516f 	movw	r1, #1391	; 0x56f
    1ce4:	2070      	movs	r0, #112	; 0x70
    1ce6:	f002 fbd9 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1cea:	4a10      	ldr	r2, [pc, #64]	; (1d2c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9a4>)
    1cec:	4291      	cmp	r1, r2
    1cee:	dd04      	ble.n	1cfa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x972>
    1cf0:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    1cf4:	2070      	movs	r0, #112	; 0x70
    1cf6:	f002 fbd1 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1cfa:	4a0d      	ldr	r2, [pc, #52]	; (1d30 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9a8>)
    1cfc:	4291      	cmp	r1, r2
    1cfe:	da04      	bge.n	1d0a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x982>
    1d00:	f240 5171 	movw	r1, #1393	; 0x571
    1d04:	2070      	movs	r0, #112	; 0x70
    1d06:	f002 fbc9 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d0a:	490a      	ldr	r1, [pc, #40]	; (1d34 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9ac>)
    1d0c:	4281      	cmp	r1, r0
    1d0e:	bfde      	ittt	le
    1d10:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1d14:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1d18:	bd10      	pople	{r4, pc}
    1d1a:	2800      	cmp	r0, #0
    1d1c:	bfbc      	itt	lt
    1d1e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1d22:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1d26:	bd10      	pop	{r4, pc}
    1d28:	1e847fff 	.word	0x1e847fff
    1d2c:	0f424000 	.word	0x0f424000
    1d30:	f0bdc000 	.word	0xf0bdc000
    1d34:	1e848000 	.word	0x1e848000
    1d38:	f8df c058 	ldr.w	ip, [pc, #88]	; 1d94 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48>
    1d3c:	b510      	push	{r4, lr}
    1d3e:	2300      	movs	r3, #0
    1d40:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1d44:	2807      	cmp	r0, #7
    1d46:	d21f      	bcs.n	1d88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>
    1d48:	e8df f000 	tbb	[pc, r0]
    1d4c:	05050505 	.word	0x05050505
    1d50:	00040404 	.word	0x00040404
    1d54:	2301      	movs	r3, #1
    1d56:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1d5a:	2b00      	cmp	r3, #0
    1d5c:	bf08      	it	eq
    1d5e:	bd10      	popeq	{r4, pc}
    1d60:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1d64:	480c      	ldr	r0, [pc, #48]	; (1d98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c>)
    1d66:	4402      	add	r2, r0
    1d68:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1d6c:	2820      	cmp	r0, #32
    1d6e:	bf0e      	itee	eq
    1d70:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1d74:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    1d78:	7041      	strbne	r1, [r0, #1]
    1d7a:	2020      	movs	r0, #32
    1d7c:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1d80:	7058      	strb	r0, [r3, #1]
    1d82:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1d86:	bd10      	pop	{r4, pc}
    1d88:	f44f 711a 	mov.w	r1, #616	; 0x268
    1d8c:	2070      	movs	r0, #112	; 0x70
    1d8e:	f002 fb85 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d92:	0000      	.short	0x0000
    1d94:	200010ac 	.word	0x200010ac
    1d98:	2000112c 	.word	0x2000112c
    1d9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1da0:	4617      	mov	r7, r2
    1da2:	f8df a158 	ldr.w	sl, [pc, #344]	; 1efc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b0>
    1da6:	eb02 0047 	add.w	r0, r2, r7, lsl #1
    1daa:	4450      	add	r0, sl
    1dac:	4688      	mov	r8, r1
    1dae:	f890 4020 	ldrb.w	r4, [r0, #32]
    1db2:	2901      	cmp	r1, #1
    1db4:	4625      	mov	r5, r4
    1db6:	bf18      	it	ne
    1db8:	f1b8 0f02 	cmpne.w	r8, #2
    1dbc:	d005      	beq.n	1dca <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7e>
    1dbe:	f640 216c 	movw	r1, #2668	; 0xa6c
    1dc2:	f04f 0070 	mov.w	r0, #112	; 0x70
    1dc6:	f002 fb69 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1dca:	f04f 0b00 	mov.w	fp, #0
    1dce:	2d20      	cmp	r5, #32
    1dd0:	d044      	beq.n	1e5c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x110>
    1dd2:	f89a 001e 	ldrb.w	r0, [sl, #30]
    1dd6:	2600      	movs	r6, #0
    1dd8:	2800      	cmp	r0, #0
    1dda:	bf08      	it	eq
    1ddc:	2602      	moveq	r6, #2
    1dde:	f001 fc3f 	bl	3660 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1de2:	4b47      	ldr	r3, [pc, #284]	; (1f00 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b4>)
    1de4:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1de8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1dec:	688a      	ldr	r2, [r1, #8]
    1dee:	68c9      	ldr	r1, [r1, #12]
    1df0:	1a12      	subs	r2, r2, r0
    1df2:	1a09      	subs	r1, r1, r0
    1df4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1df8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1dfc:	4296      	cmp	r6, r2
    1dfe:	bf99      	ittee	ls
    1e00:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    1e04:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1e08:	4a3e      	ldrhi	r2, [pc, #248]	; (1f04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b8>)
    1e0a:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    1e0e:	d923      	bls.n	1e58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    1e10:	4622      	mov	r2, r4
    1e12:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    1e16:	784c      	ldrb	r4, [r1, #1]
    1e18:	2c20      	cmp	r4, #32
    1e1a:	d015      	beq.n	1e48 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfc>
    1e1c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1e20:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    1e24:	f8dc 1008 	ldr.w	r1, [ip, #8]
    1e28:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1e2c:	1a09      	subs	r1, r1, r0
    1e2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1e32:	ebac 0c00 	sub.w	ip, ip, r0
    1e36:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    1e3a:	428e      	cmp	r6, r1
    1e3c:	bf9c      	itt	ls
    1e3e:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1e42:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    1e46:	d8e3      	bhi.n	1e10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>
    1e48:	2a20      	cmp	r2, #32
    1e4a:	d005      	beq.n	1e58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    1e4c:	463b      	mov	r3, r7
    1e4e:	2120      	movs	r1, #32
    1e50:	2004      	movs	r0, #4
    1e52:	f7ff f859 	bl	f08 <MPSL_IRQ_RADIO_Handler+0x40>
    1e56:	4604      	mov	r4, r0
    1e58:	42ac      	cmp	r4, r5
    1e5a:	d10f      	bne.n	1e7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x130>
    1e5c:	f89a 002e 	ldrb.w	r0, [sl, #46]	; 0x2e
    1e60:	2820      	cmp	r0, #32
    1e62:	d00f      	beq.n	1e84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x138>
    1e64:	9900      	ldr	r1, [sp, #0]
    1e66:	f8da 0008 	ldr.w	r0, [sl, #8]
    1e6a:	1c89      	adds	r1, r1, #2
    1e6c:	1a08      	subs	r0, r1, r0
    1e6e:	0200      	lsls	r0, r0, #8
    1e70:	17c1      	asrs	r1, r0, #31
    1e72:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1e76:	1200      	asrs	r0, r0, #8
    1e78:	2800      	cmp	r0, #0
    1e7a:	dd03      	ble.n	1e84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x138>
    1e7c:	b003      	add	sp, #12
    1e7e:	2000      	movs	r0, #0
    1e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e84:	2d20      	cmp	r5, #32
    1e86:	d016      	beq.n	1eb6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x16a>
    1e88:	462a      	mov	r2, r5
    1e8a:	4641      	mov	r1, r8
    1e8c:	9800      	ldr	r0, [sp, #0]
    1e8e:	f7ff fb1f 	bl	14d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x148>
    1e92:	2800      	cmp	r0, #0
    1e94:	bf1f      	itttt	ne
    1e96:	f88a 502e 	strbne.w	r5, [sl, #46]	; 0x2e
    1e9a:	2002      	movne	r0, #2
    1e9c:	b003      	addne	sp, #12
    1e9e:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ea2:	463b      	mov	r3, r7
    1ea4:	462a      	mov	r2, r5
    1ea6:	2120      	movs	r1, #32
    1ea8:	2004      	movs	r0, #4
    1eaa:	f7ff f82d 	bl	f08 <MPSL_IRQ_RADIO_Handler+0x40>
    1eae:	b003      	add	sp, #12
    1eb0:	2000      	movs	r0, #0
    1eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1eb6:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
    1eba:	b118      	cbz	r0, 1ec4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x178>
    1ebc:	f002 f94a 	bl	4154 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1ec0:	f88a b02a 	strb.w	fp, [sl, #42]	; 0x2a
    1ec4:	f89a 002b 	ldrb.w	r0, [sl, #43]	; 0x2b
    1ec8:	b120      	cbz	r0, 1ed4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x188>
    1eca:	2005      	movs	r0, #5
    1ecc:	f001 fe2a 	bl	3b24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1ed0:	f88a b02b 	strb.w	fp, [sl, #43]	; 0x2b
    1ed4:	2004      	movs	r0, #4
    1ed6:	f001 fe25 	bl	3b24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1eda:	f001 fe93 	bl	3c04 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    1ede:	2020      	movs	r0, #32
    1ee0:	f88a 002e 	strb.w	r0, [sl, #46]	; 0x2e
    1ee4:	4808      	ldr	r0, [pc, #32]	; (1f08 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1bc>)
    1ee6:	6880      	ldr	r0, [r0, #8]
    1ee8:	f8c0 b000 	str.w	fp, [r0]
    1eec:	4807      	ldr	r0, [pc, #28]	; (1f0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c0>)
    1eee:	f8c0 b000 	str.w	fp, [r0]
    1ef2:	b003      	add	sp, #12
    1ef4:	2001      	movs	r0, #1
    1ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1efa:	0000      	.short	0x0000
    1efc:	2000112c 	.word	0x2000112c
    1f00:	20000d2c 	.word	0x20000d2c
    1f04:	200010ac 	.word	0x200010ac
    1f08:	2000003c 	.word	0x2000003c
    1f0c:	40000508 	.word	0x40000508

00001f10 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1f10:	4906      	ldr	r1, [pc, #24]	; (1f2c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    1f12:	b510      	push	{r4, lr}
    1f14:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    1f18:	2a20      	cmp	r2, #32
    1f1a:	bf1c      	itt	ne
    1f1c:	7788      	strbne	r0, [r1, #30]
    1f1e:	bd10      	popne	{r4, pc}
    1f20:	f240 317a 	movw	r1, #890	; 0x37a
    1f24:	2070      	movs	r0, #112	; 0x70
    1f26:	f002 fab9 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f2a:	0000      	.short	0x0000
    1f2c:	2000112c 	.word	0x2000112c

00001f30 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f34:	4e69      	ldr	r6, [pc, #420]	; (20dc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xdc>)
    1f36:	4607      	mov	r7, r0
    1f38:	b08d      	sub	sp, #52	; 0x34
    1f3a:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    1f3e:	4688      	mov	r8, r1
    1f40:	2820      	cmp	r0, #32
    1f42:	d055      	beq.n	1ff0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    1f44:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    1f48:	f106 0408 	add.w	r4, r6, #8
    1f4c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1f50:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    1f54:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    1f58:	2020      	movs	r0, #32
    1f5a:	f88d 0020 	strb.w	r0, [sp, #32]
    1f5e:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    1f62:	aa0a      	add	r2, sp, #40	; 0x28
    1f64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1f68:	4430      	add	r0, r6
    1f6a:	a909      	add	r1, sp, #36	; 0x24
    1f6c:	f890 5020 	ldrb.w	r5, [r0, #32]
    1f70:	68f0      	ldr	r0, [r6, #12]
    1f72:	9002      	str	r0, [sp, #8]
    1f74:	6830      	ldr	r0, [r6, #0]
    1f76:	4438      	add	r0, r7
    1f78:	f001 fa08 	bl	338c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1f7c:	f8da 000c 	ldr.w	r0, [sl, #12]
    1f80:	9909      	ldr	r1, [sp, #36]	; 0x24
    1f82:	2f65      	cmp	r7, #101	; 0x65
    1f84:	4408      	add	r0, r1
    1f86:	d338      	bcc.n	1ffa <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1f88:	4a55      	ldr	r2, [pc, #340]	; (20e0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe0>)
    1f8a:	2100      	movs	r1, #0
    1f8c:	1bd2      	subs	r2, r2, r7
    1f8e:	eb71 0201 	sbcs.w	r2, r1, r1
    1f92:	d332      	bcc.n	1ffa <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1f94:	6822      	ldr	r2, [r4, #0]
    1f96:	1a82      	subs	r2, r0, r2
    1f98:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1f9c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    1fa0:	d82b      	bhi.n	1ffa <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1fa2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1fa6:	6060      	str	r0, [r4, #4]
    1fa8:	4630      	mov	r0, r6
    1faa:	f884 8010 	strb.w	r8, [r4, #16]
    1fae:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1fb2:	f10d 0a20 	add.w	sl, sp, #32
    1fb6:	2d20      	cmp	r5, #32
    1fb8:	bf1c      	itt	ne
    1fba:	494a      	ldrne	r1, [pc, #296]	; (20e4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe4>)
    1fbc:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    1fc0:	d050      	beq.n	2064 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x64>
    1fc2:	bf00      	nop
    1fc4:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1fc8:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    1fcc:	6861      	ldr	r1, [r4, #4]
    1fce:	f8d8 6008 	ldr.w	r6, [r8, #8]
    1fd2:	f108 0008 	add.w	r0, r8, #8
    1fd6:	1a71      	subs	r1, r6, r1
    1fd8:	0209      	lsls	r1, r1, #8
    1fda:	17ca      	asrs	r2, r1, #31
    1fdc:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1fe0:	1209      	asrs	r1, r1, #8
    1fe2:	d42d      	bmi.n	2040 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x40>
    1fe4:	89c0      	ldrh	r0, [r0, #14]
    1fe6:	2800      	cmp	r0, #0
    1fe8:	d03c      	beq.n	2064 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x64>
    1fea:	89e0      	ldrh	r0, [r4, #14]
    1fec:	b148      	cbz	r0, 2002 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2>
    1fee:	e039      	b.n	2064 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x64>
    1ff0:	f44f 6133 	mov.w	r1, #2864	; 0xb30
    1ff4:	2070      	movs	r0, #112	; 0x70
    1ff6:	f002 fa51 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ffa:	b00d      	add	sp, #52	; 0x34
    1ffc:	2001      	movs	r0, #1
    1ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2002:	6820      	ldr	r0, [r4, #0]
    2004:	900c      	str	r0, [sp, #48]	; 0x30
    2006:	f002 f89f 	bl	4148 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    200a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    200e:	bf08      	it	eq
    2010:	200d      	moveq	r0, #13
    2012:	d00b      	beq.n	202c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2c>
    2014:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    2018:	3856      	subs	r0, #86	; 0x56
    201a:	bf08      	it	eq
    201c:	201c      	moveq	r0, #28
    201e:	d005      	beq.n	202c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2c>
    2020:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2024:	389f      	subs	r0, #159	; 0x9f
    2026:	bf14      	ite	ne
    2028:	2000      	movne	r0, #0
    202a:	2032      	moveq	r0, #50	; 0x32
    202c:	1c41      	adds	r1, r0, #1
    202e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2030:	1a30      	subs	r0, r6, r0
    2032:	0200      	lsls	r0, r0, #8
    2034:	17c2      	asrs	r2, r0, #31
    2036:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    203a:	1200      	asrs	r0, r0, #8
    203c:	4288      	cmp	r0, r1
    203e:	da11      	bge.n	2064 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x64>
    2040:	f88a 5000 	strb.w	r5, [sl]
    2044:	f898 1018 	ldrb.w	r1, [r8, #24]
    2048:	7c20      	ldrb	r0, [r4, #16]
    204a:	4281      	cmp	r1, r0
    204c:	d805      	bhi.n	205a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5a>
    204e:	9802      	ldr	r0, [sp, #8]
    2050:	6060      	str	r0, [r4, #4]
    2052:	b00d      	add	sp, #52	; 0x34
    2054:	2002      	movs	r0, #2
    2056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    205a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    205e:	7845      	ldrb	r5, [r0, #1]
    2060:	2d20      	cmp	r5, #32
    2062:	d1af      	bne.n	1fc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    2064:	2005      	movs	r0, #5
    2066:	f001 fd5d 	bl	3b24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    206a:	4c1c      	ldr	r4, [pc, #112]	; (20dc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xdc>)
    206c:	f04f 30ff 	mov.w	r0, #4294967295
    2070:	6060      	str	r0, [r4, #4]
    2072:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    2076:	f89d 2020 	ldrb.w	r2, [sp, #32]
    207a:	2120      	movs	r1, #32
    207c:	2a20      	cmp	r2, #32
    207e:	d003      	beq.n	2088 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x88>
    2080:	2005      	movs	r0, #5
    2082:	f7fe ff41 	bl	f08 <MPSL_IRQ_RADIO_Handler+0x40>
    2086:	e004      	b.n	2092 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x92>
    2088:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    208c:	4420      	add	r0, r4
    208e:	f890 0020 	ldrb.w	r0, [r0, #32]
    2092:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    2096:	4913      	ldr	r1, [pc, #76]	; (20e4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe4>)
    2098:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    209c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    20a0:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    20a4:	7048      	strb	r0, [r1, #1]
    20a6:	6820      	ldr	r0, [r4, #0]
    20a8:	4438      	add	r0, r7
    20aa:	6020      	str	r0, [r4, #0]
    20ac:	20ff      	movs	r0, #255	; 0xff
    20ae:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    20b2:	7e60      	ldrb	r0, [r4, #25]
    20b4:	2801      	cmp	r0, #1
    20b6:	d105      	bne.n	20c4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xc4>
    20b8:	68e0      	ldr	r0, [r4, #12]
    20ba:	1e40      	subs	r0, r0, #1
    20bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    20c0:	f001 fb94 	bl	37ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    20c4:	f89d 0020 	ldrb.w	r0, [sp, #32]
    20c8:	2820      	cmp	r0, #32
    20ca:	d003      	beq.n	20d4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xd4>
    20cc:	4806      	ldr	r0, [pc, #24]	; (20e8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe8>)
    20ce:	7840      	ldrb	r0, [r0, #1]
    20d0:	f002 fab8 	bl	4644 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    20d4:	b00d      	add	sp, #52	; 0x34
    20d6:	2000      	movs	r0, #0
    20d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20dc:	2000112c 	.word	0x2000112c
    20e0:	0f424000 	.word	0x0f424000
    20e4:	200010ac 	.word	0x200010ac
    20e8:	2000003c 	.word	0x2000003c

000020ec <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    20ec:	4806      	ldr	r0, [pc, #24]	; (2108 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    20ee:	b510      	push	{r4, lr}
    20f0:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    20f4:	2920      	cmp	r1, #32
    20f6:	bf1c      	itt	ne
    20f8:	7e00      	ldrbne	r0, [r0, #24]
    20fa:	bd10      	popne	{r4, pc}
    20fc:	f640 312a 	movw	r1, #2858	; 0xb2a
    2100:	2070      	movs	r0, #112	; 0x70
    2102:	f002 f9cb 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2106:	0000      	.short	0x0000
    2108:	2000112c 	.word	0x2000112c

0000210c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    210c:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    2110:	b570      	push	{r4, r5, r6, lr}
    2112:	4807      	ldr	r0, [pc, #28]	; (2130 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    2114:	4a07      	ldr	r2, [pc, #28]	; (2134 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x28>)
    2116:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    211a:	6901      	ldr	r1, [r0, #16]
    211c:	3008      	adds	r0, #8
    211e:	fba1 4502 	umull	r4, r5, r1, r2
    2122:	f7ff fdcf 	bl	1cc4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x93c>
    2126:	1900      	adds	r0, r0, r4
    2128:	f145 0100 	adc.w	r1, r5, #0
    212c:	bd70      	pop	{r4, r5, r6, pc}
    212e:	0000      	.short	0x0000
    2130:	20000d2c 	.word	0x20000d2c
    2134:	1e848000 	.word	0x1e848000

00002138 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    2138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    213a:	4d6b      	ldr	r5, [pc, #428]	; (22e8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    213c:	4a6b      	ldr	r2, [pc, #428]	; (22ec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    213e:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    2142:	2601      	movs	r6, #1
    2144:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    2148:	2808      	cmp	r0, #8
    214a:	d27c      	bcs.n	2246 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    214c:	e8df f000 	tbb	[pc, r0]
    2150:	a9977004 	.word	0xa9977004
    2154:	b3ae41c7 	.word	0xb3ae41c7
    2158:	b919      	cbnz	r1, 2162 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    215a:	f002 f817 	bl	418c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    215e:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2162:	8ae0      	ldrh	r0, [r4, #22]
    2164:	b110      	cbz	r0, 216c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    2166:	f002 f921 	bl	43ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    216a:	b180      	cbz	r0, 218e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x56>
    216c:	f7ff fcf8 	bl	1b60 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7d8>
    2170:	20ff      	movs	r0, #255	; 0xff
    2172:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    2176:	6861      	ldr	r1, [r4, #4]
    2178:	f1b1 3fff 	cmp.w	r1, #4294967295
    217c:	d003      	beq.n	2186 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x4e>
    217e:	2005      	movs	r0, #5
    2180:	f001 fc1a 	bl	39b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2184:	b140      	cbz	r0, 2198 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x60>
    2186:	7e60      	ldrb	r0, [r4, #25]
    2188:	2801      	cmp	r0, #1
    218a:	d110      	bne.n	21ae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    218c:	e009      	b.n	21a2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6a>
    218e:	f640 0134 	movw	r1, #2100	; 0x834
    2192:	2070      	movs	r0, #112	; 0x70
    2194:	f002 f982 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2198:	f640 0139 	movw	r1, #2105	; 0x839
    219c:	2070      	movs	r0, #112	; 0x70
    219e:	f002 f97d 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    21a2:	68e0      	ldr	r0, [r4, #12]
    21a4:	1e40      	subs	r0, r0, #1
    21a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    21aa:	f001 fb1f 	bl	37ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    21ae:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    21b2:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    21b6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    21ba:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    21be:	6840      	ldr	r0, [r0, #4]
    21c0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    21c4:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    21c8:	b001      	add	sp, #4
    21ca:	2101      	movs	r1, #1
    21cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    21d0:	4710      	bx	r2
    21d2:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    21d6:	b140      	cbz	r0, 21ea <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb2>
    21d8:	b919      	cbnz	r1, 21e2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xaa>
    21da:	f001 ffd7 	bl	418c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    21de:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    21e2:	2000      	movs	r0, #0
    21e4:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    21e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21ea:	f7ff fcb9 	bl	1b60 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7d8>
    21ee:	f04f 30ff 	mov.w	r0, #4294967295
    21f2:	6060      	str	r0, [r4, #4]
    21f4:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    21f8:	f88d 0000 	strb.w	r0, [sp]
    21fc:	f89d 0000 	ldrb.w	r0, [sp]
    2200:	b188      	cbz	r0, 2226 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xee>
    2202:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2206:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    220a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    220e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2212:	6840      	ldr	r0, [r0, #4]
    2214:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2218:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    221c:	b001      	add	sp, #4
    221e:	2106      	movs	r1, #6
    2220:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2224:	4710      	bx	r2
    2226:	f44f 6105 	mov.w	r1, #2128	; 0x850
    222a:	2070      	movs	r0, #112	; 0x70
    222c:	f002 f936 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2230:	f7ff fc96 	bl	1b60 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7d8>
    2234:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    2238:	f002 f8b8 	bl	43ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    223c:	b120      	cbz	r0, 2248 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x110>
    223e:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    2242:	b130      	cbz	r0, 2252 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11a>
    2244:	e009      	b.n	225a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x122>
    2246:	e04a      	b.n	22de <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a6>
    2248:	f640 015e 	movw	r1, #2142	; 0x85e
    224c:	2070      	movs	r0, #112	; 0x70
    224e:	f002 f925 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2252:	f001 ff9b 	bl	418c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2256:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    225a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    225e:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2262:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2266:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    226a:	6840      	ldr	r0, [r0, #4]
    226c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2270:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2274:	b001      	add	sp, #4
    2276:	2100      	movs	r1, #0
    2278:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    227c:	4710      	bx	r2
    227e:	f001 fd77 	bl	3d70 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    2282:	8ae0      	ldrh	r0, [r4, #22]
    2284:	b110      	cbz	r0, 228c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x154>
    2286:	f002 f891 	bl	43ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    228a:	b128      	cbz	r0, 2298 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x160>
    228c:	f001 fd84 	bl	3d98 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    2290:	2800      	cmp	r0, #0
    2292:	bf18      	it	ne
    2294:	7766      	strbne	r6, [r4, #29]
    2296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2298:	f640 0168 	movw	r1, #2152	; 0x868
    229c:	2070      	movs	r0, #112	; 0x70
    229e:	f002 f8fd 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22a2:	4813      	ldr	r0, [pc, #76]	; (22f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    22a4:	6006      	str	r6, [r0, #0]
    22a6:	6890      	ldr	r0, [r2, #8]
    22a8:	6006      	str	r6, [r0, #0]
    22aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22ac:	7810      	ldrb	r0, [r2, #0]
    22ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    22b2:	f002 b9c7 	b.w	4644 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    22b6:	f7ff fc53 	bl	1b60 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7d8>
    22ba:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    22be:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    22c2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    22c6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    22ca:	6840      	ldr	r0, [r0, #4]
    22cc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    22d0:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    22d4:	b001      	add	sp, #4
    22d6:	2105      	movs	r1, #5
    22d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    22dc:	4710      	bx	r2
    22de:	f640 017b 	movw	r1, #2171	; 0x87b
    22e2:	2070      	movs	r0, #112	; 0x70
    22e4:	f002 f8da 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22e8:	20000d2c 	.word	0x20000d2c
    22ec:	2000003c 	.word	0x2000003c
    22f0:	40000508 	.word	0x40000508

000022f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    22f4:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22f8:	4682      	mov	sl, r0
    22fa:	48f0      	ldr	r0, [pc, #960]	; (26bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    22fc:	b095      	sub	sp, #84	; 0x54
    22fe:	6800      	ldr	r0, [r0, #0]
    2300:	4def      	ldr	r5, [pc, #956]	; (26c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    2302:	05c0      	lsls	r0, r0, #23
    2304:	0dc0      	lsrs	r0, r0, #23
    2306:	d00e      	beq.n	2326 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    2308:	3810      	subs	r0, #16
    230a:	b240      	sxtb	r0, r0
    230c:	2800      	cmp	r0, #0
    230e:	bfb8      	it	lt
    2310:	f000 000f 	andlt.w	r0, r0, #15
    2314:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2318:	bfac      	ite	ge
    231a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    231e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2322:	0940      	lsrs	r0, r0, #5
    2324:	d00d      	beq.n	2342 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    2326:	9816      	ldr	r0, [sp, #88]	; 0x58
    2328:	f04f 0b00 	mov.w	fp, #0
    232c:	7800      	ldrb	r0, [r0, #0]
    232e:	2800      	cmp	r0, #0
    2330:	bf18      	it	ne
    2332:	2801      	cmpne	r0, #1
    2334:	d018      	beq.n	2368 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2336:	f240 7104 	movw	r1, #1796	; 0x704
    233a:	f04f 0070 	mov.w	r0, #112	; 0x70
    233e:	f002 f8ad 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2342:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    2346:	f04f 0b01 	mov.w	fp, #1
    234a:	2820      	cmp	r0, #32
    234c:	d007      	beq.n	235e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    234e:	9816      	ldr	r0, [sp, #88]	; 0x58
    2350:	7800      	ldrb	r0, [r0, #0]
    2352:	b148      	cbz	r0, 2368 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2354:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    2358:	2070      	movs	r0, #112	; 0x70
    235a:	f002 f89f 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    235e:	f240 61fd 	movw	r1, #1789	; 0x6fd
    2362:	2070      	movs	r0, #112	; 0x70
    2364:	f002 f89a 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2368:	4cd6      	ldr	r4, [pc, #856]	; (26c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    236a:	b124      	cbz	r4, 2376 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    236c:	2100      	movs	r1, #0
    236e:	f240 7007 	movw	r0, #1799	; 0x707
    2372:	f3af 8000 	nop.w
    2376:	2000      	movs	r0, #0
    2378:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    237c:	49d2      	ldr	r1, [pc, #840]	; (26c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    237e:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    2382:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2386:	f04f 0901 	mov.w	r9, #1
    238a:	9000      	str	r0, [sp, #0]
    238c:	b124      	cbz	r4, 2398 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    238e:	2100      	movs	r1, #0
    2390:	f240 7012 	movw	r0, #1810	; 0x712
    2394:	f3af 8000 	nop.w
    2398:	f1b9 0f00 	cmp.w	r9, #0
    239c:	d00a      	beq.n	23b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    239e:	bf00      	nop
    23a0:	f895 602c 	ldrb.w	r6, [r5, #44]	; 0x2c
    23a4:	f04f 0800 	mov.w	r8, #0
    23a8:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    23ac:	f1bb 0f00 	cmp.w	fp, #0
    23b0:	d007      	beq.n	23c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    23b2:	e038      	b.n	2426 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    23b4:	48c5      	ldr	r0, [pc, #788]	; (26cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    23b6:	2800      	cmp	r0, #0
    23b8:	bf18      	it	ne
    23ba:	f3af 8000 	nopne.w
    23be:	b662      	cpsie	i
    23c0:	e7ee      	b.n	23a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    23c2:	4637      	mov	r7, r6
    23c4:	2001      	movs	r0, #1
    23c6:	ea20 0607 	bic.w	r6, r0, r7
    23ca:	48c1      	ldr	r0, [pc, #772]	; (26d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    23cc:	2240      	movs	r2, #64	; 0x40
    23ce:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    23d2:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    23d6:	f00a fd81 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    23da:	b124      	cbz	r4, 23e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    23dc:	2100      	movs	r1, #0
    23de:	f240 502f 	movw	r0, #1327	; 0x52f
    23e2:	f3af 8000 	nop.w
    23e6:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    23ea:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    23ee:	4429      	add	r1, r5
    23f0:	4428      	add	r0, r5
    23f2:	8c0a      	ldrh	r2, [r1, #32]
    23f4:	8402      	strh	r2, [r0, #32]
    23f6:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    23fa:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    23fe:	b124      	cbz	r4, 240a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    2400:	2100      	movs	r1, #0
    2402:	f240 5033 	movw	r0, #1331	; 0x533
    2406:	f3af 8000 	nop.w
    240a:	b124      	cbz	r4, 2416 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    240c:	2100      	movs	r1, #0
    240e:	f240 701c 	movw	r0, #1820	; 0x71c
    2412:	f3af 8000 	nop.w
    2416:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    241a:	f88d 0008 	strb.w	r0, [sp, #8]
    241e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2422:	2800      	cmp	r0, #0
    2424:	d1b2      	bne.n	238c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    2426:	b124      	cbz	r4, 2432 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    2428:	2100      	movs	r1, #0
    242a:	f240 7026 	movw	r0, #1830	; 0x726
    242e:	f3af 8000 	nop.w
    2432:	a802      	add	r0, sp, #8
    2434:	f001 f91a 	bl	366c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2438:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    243c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    2440:	4633      	mov	r3, r6
    2442:	aa09      	add	r2, sp, #36	; 0x24
    2444:	a80e      	add	r0, sp, #56	; 0x38
    2446:	9916      	ldr	r1, [sp, #88]	; 0x58
    2448:	f7ff faae 	bl	19a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x620>
    244c:	b124      	cbz	r4, 2458 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    244e:	2100      	movs	r1, #0
    2450:	f240 702d 	movw	r0, #1837	; 0x72d
    2454:	f3af 8000 	nop.w
    2458:	4a9d      	ldr	r2, [pc, #628]	; (26d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    245a:	990e      	ldr	r1, [sp, #56]	; 0x38
    245c:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    2460:	a809      	add	r0, sp, #36	; 0x24
    2462:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    2466:	2a01      	cmp	r2, #1
    2468:	bf18      	it	ne
    246a:	2a02      	cmpne	r2, #2
    246c:	d138      	bne.n	24e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    246e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2472:	eba2 0201 	sub.w	r2, r2, r1
    2476:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    247a:	eba3 0101 	sub.w	r1, r3, r1
    247e:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    2482:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2486:	2a02      	cmp	r2, #2
    2488:	d364      	bcc.n	2554 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    248a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    248e:	bf98      	it	ls
    2490:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    2494:	d85e      	bhi.n	2554 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    2496:	f04f 0801 	mov.w	r8, #1
    249a:	ab14      	add	r3, sp, #80	; 0x50
    249c:	aa13      	add	r2, sp, #76	; 0x4c
    249e:	4631      	mov	r1, r6
    24a0:	f7fe ff20 	bl	12e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e4>
    24a4:	2800      	cmp	r0, #0
    24a6:	d05d      	beq.n	2564 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    24a8:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    24ac:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    24b0:	4633      	mov	r3, r6
    24b2:	428a      	cmp	r2, r1
    24b4:	d05a      	beq.n	256c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    24b6:	2005      	movs	r0, #5
    24b8:	f7fe fd26 	bl	f08 <MPSL_IRQ_RADIO_Handler+0x40>
    24bc:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    24c0:	7048      	strb	r0, [r1, #1]
    24c2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    24c6:	2820      	cmp	r0, #32
    24c8:	bf1c      	itt	ne
    24ca:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    24ce:	f880 a001 	strbne.w	sl, [r0, #1]
    24d2:	d057      	beq.n	2584 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    24d4:	4632      	mov	r2, r6
    24d6:	4651      	mov	r1, sl
    24d8:	f05f 0003 	movs.w	r0, #3
    24dc:	f7ff fc2c 	bl	1d38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9b0>
    24e0:	b124      	cbz	r4, 24ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    24e2:	2100      	movs	r1, #0
    24e4:	f240 7032 	movw	r0, #1842	; 0x732
    24e8:	f3af 8000 	nop.w
    24ec:	4879      	ldr	r0, [pc, #484]	; (26d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    24ee:	2800      	cmp	r0, #0
    24f0:	bf18      	it	ne
    24f2:	f3af 8000 	nopne.w
    24f6:	f3ef 8910 	mrs	r9, PRIMASK
    24fa:	b672      	cpsid	i
    24fc:	b124      	cbz	r4, 2508 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    24fe:	2100      	movs	r1, #0
    2500:	f44f 60e7 	mov.w	r0, #1848	; 0x738
    2504:	f3af 8000 	nop.w
    2508:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    250c:	f88d 0008 	strb.w	r0, [sp, #8]
    2510:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2514:	2800      	cmp	r0, #0
    2516:	f47f af39 	bne.w	238c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    251a:	b124      	cbz	r4, 2526 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    251c:	2100      	movs	r1, #0
    251e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
    2522:	f3af 8000 	nop.w
    2526:	af09      	add	r7, sp, #36	; 0x24
    2528:	9800      	ldr	r0, [sp, #0]
    252a:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    252e:	f100 0708 	add.w	r7, r0, #8
    2532:	f1b8 0f00 	cmp.w	r8, #0
    2536:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    253a:	990d      	ldr	r1, [sp, #52]	; 0x34
    253c:	6181      	str	r1, [r0, #24]
    253e:	d053      	beq.n	25e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    2540:	b124      	cbz	r4, 254c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    2542:	2100      	movs	r1, #0
    2544:	f240 704d 	movw	r0, #1869	; 0x74d
    2548:	f3af 8000 	nop.w
    254c:	f1bb 0f00 	cmp.w	fp, #0
    2550:	d13a      	bne.n	25c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    2552:	e01f      	b.n	2594 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    2554:	4632      	mov	r2, r6
    2556:	4651      	mov	r1, sl
    2558:	2004      	movs	r0, #4
    255a:	f7ff fbed 	bl	1d38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9b0>
    255e:	f04f 0801 	mov.w	r8, #1
    2562:	e7bd      	b.n	24e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    2564:	4632      	mov	r2, r6
    2566:	4651      	mov	r1, sl
    2568:	2004      	movs	r0, #4
    256a:	e7b7      	b.n	24dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    256c:	2920      	cmp	r1, #32
    256e:	bf19      	ittee	ne
    2570:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    2574:	7840      	ldrbne	r0, [r0, #1]
    2576:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    257a:	4428      	addeq	r0, r5
    257c:	bf08      	it	eq
    257e:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    2582:	e79b      	b.n	24bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    2584:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    2588:	4429      	add	r1, r5
    258a:	f881 a020 	strb.w	sl, [r1, #32]
    258e:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    2592:	e79f      	b.n	24d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    2594:	9811      	ldr	r0, [sp, #68]	; 0x44
    2596:	f010 0fff 	tst.w	r0, #255	; 0xff
    259a:	d015      	beq.n	25c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    259c:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    25a0:	2820      	cmp	r0, #32
    25a2:	d111      	bne.n	25c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    25a4:	b124      	cbz	r4, 25b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    25a6:	2100      	movs	r1, #0
    25a8:	f240 7052 	movw	r0, #1874	; 0x752
    25ac:	f3af 8000 	nop.w
    25b0:	4632      	mov	r2, r6
    25b2:	2102      	movs	r1, #2
    25b4:	980e      	ldr	r0, [sp, #56]	; 0x38
    25b6:	f7ff fbf1 	bl	1d9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50>
    25ba:	9010      	str	r0, [sp, #64]	; 0x40
    25bc:	b920      	cbnz	r0, 25c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    25be:	9816      	ldr	r0, [sp, #88]	; 0x58
    25c0:	7800      	ldrb	r0, [r0, #0]
    25c2:	b1f0      	cbz	r0, 2602 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30e>
    25c4:	2801      	cmp	r0, #1
    25c6:	d02b      	beq.n	2620 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    25c8:	b124      	cbz	r4, 25d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e0>
    25ca:	2100      	movs	r1, #0
    25cc:	f240 706f 	movw	r0, #1903	; 0x76f
    25d0:	f3af 8000 	nop.w
    25d4:	20ff      	movs	r0, #255	; 0xff
    25d6:	f1bb 0f00 	cmp.w	fp, #0
    25da:	bf18      	it	ne
    25dc:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    25e0:	d027      	beq.n	2632 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33e>
    25e2:	bf00      	nop
    25e4:	f04f 0801 	mov.w	r8, #1
    25e8:	b124      	cbz	r4, 25f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x300>
    25ea:	2100      	movs	r1, #0
    25ec:	f44f 60f0 	mov.w	r0, #1920	; 0x780
    25f0:	f3af 8000 	nop.w
    25f4:	9810      	ldr	r0, [sp, #64]	; 0x40
    25f6:	4e38      	ldr	r6, [pc, #224]	; (26d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    25f8:	2802      	cmp	r0, #2
    25fa:	d023      	beq.n	2644 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x350>
    25fc:	2801      	cmp	r0, #1
    25fe:	d029      	beq.n	2654 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>
    2600:	e02d      	b.n	265e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    2602:	b124      	cbz	r4, 260e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x31a>
    2604:	2100      	movs	r1, #0
    2606:	f240 705a 	movw	r0, #1882	; 0x75a
    260a:	f3af 8000 	nop.w
    260e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    2612:	4651      	mov	r1, sl
    2614:	2004      	movs	r0, #4
    2616:	f7ff fb8f 	bl	1d38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9b0>
    261a:	f04f 0801 	mov.w	r8, #1
    261e:	e7e3      	b.n	25e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    2620:	2c00      	cmp	r4, #0
    2622:	f43f aeb3 	beq.w	238c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    2626:	2100      	movs	r1, #0
    2628:	f240 7065 	movw	r0, #1893	; 0x765
    262c:	f3af 8000 	nop.w
    2630:	e6ac      	b.n	238c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    2632:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    2636:	2101      	movs	r1, #1
    2638:	4391      	bics	r1, r2
    263a:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    263e:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    2642:	e7cf      	b.n	25e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    2644:	68a8      	ldr	r0, [r5, #8]
    2646:	990e      	ldr	r1, [sp, #56]	; 0x38
    2648:	1a40      	subs	r0, r0, r1
    264a:	f00a faed 	bl	cc28 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    264e:	6871      	ldr	r1, [r6, #4]
    2650:	b921      	cbnz	r1, 265c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>
    2652:	e004      	b.n	265e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    2654:	6871      	ldr	r1, [r6, #4]
    2656:	f04f 30ff 	mov.w	r0, #4294967295
    265a:	b101      	cbz	r1, 265e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    265c:	4788      	blx	r1
    265e:	f1b9 0f00 	cmp.w	r9, #0
    2662:	d024      	beq.n	26ae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ba>
    2664:	b124      	cbz	r4, 2670 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>
    2666:	2100      	movs	r1, #0
    2668:	f44f 60f2 	mov.w	r0, #1936	; 0x790
    266c:	f3af 8000 	nop.w
    2670:	f1b8 0f00 	cmp.w	r8, #0
    2674:	d011      	beq.n	269a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a6>
    2676:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    267a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    267e:	4428      	add	r0, r5
    2680:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2684:	2820      	cmp	r0, #32
    2686:	d008      	beq.n	269a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a6>
    2688:	b124      	cbz	r4, 2694 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a0>
    268a:	2100      	movs	r1, #0
    268c:	f240 7097 	movw	r0, #1943	; 0x797
    2690:	f3af 8000 	nop.w
    2694:	7870      	ldrb	r0, [r6, #1]
    2696:	f001 ffd5 	bl	4644 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    269a:	b124      	cbz	r4, 26a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    269c:	2100      	movs	r1, #0
    269e:	f240 709c 	movw	r0, #1948	; 0x79c
    26a2:	f3af 8000 	nop.w
    26a6:	b017      	add	sp, #92	; 0x5c
    26a8:	4640      	mov	r0, r8
    26aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26ae:	4807      	ldr	r0, [pc, #28]	; (26cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    26b0:	2800      	cmp	r0, #0
    26b2:	bf18      	it	ne
    26b4:	f3af 8000 	nopne.w
    26b8:	b662      	cpsie	i
    26ba:	e7d3      	b.n	2664 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x370>
    26bc:	e000ed04 	.word	0xe000ed04
    26c0:	2000112c 	.word	0x2000112c
    26c4:	00000000 	.word	0x00000000
    26c8:	20000d2c 	.word	0x20000d2c
    26cc:	00000000 	.word	0x00000000
    26d0:	200010ac 	.word	0x200010ac
    26d4:	00000000 	.word	0x00000000
    26d8:	2000003c 	.word	0x2000003c

000026dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    26dc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    26e0:	48c9      	ldr	r0, [pc, #804]	; (2a08 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x32c>)
    26e2:	b08a      	sub	sp, #40	; 0x28
    26e4:	6800      	ldr	r0, [r0, #0]
    26e6:	05c0      	lsls	r0, r0, #23
    26e8:	0dc0      	lsrs	r0, r0, #23
    26ea:	d011      	beq.n	2710 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    26ec:	3810      	subs	r0, #16
    26ee:	b240      	sxtb	r0, r0
    26f0:	2800      	cmp	r0, #0
    26f2:	bfb8      	it	lt
    26f4:	f000 000f 	andlt.w	r0, r0, #15
    26f8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    26fc:	bfac      	ite	ge
    26fe:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2702:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2706:	0940      	lsrs	r0, r0, #5
    2708:	bf08      	it	eq
    270a:	f04f 0b01 	moveq.w	fp, #1
    270e:	d001      	beq.n	2714 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    2710:	f04f 0b00 	mov.w	fp, #0
    2714:	980a      	ldr	r0, [sp, #40]	; 0x28
    2716:	7800      	ldrb	r0, [r0, #0]
    2718:	2800      	cmp	r0, #0
    271a:	bf1e      	ittt	ne
    271c:	2000      	movne	r0, #0
    271e:	b00b      	addne	sp, #44	; 0x2c
    2720:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2724:	f04f 0a00 	mov.w	sl, #0
    2728:	4db8      	ldr	r5, [pc, #736]	; (2a0c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x330>)
    272a:	4cb9      	ldr	r4, [pc, #740]	; (2a10 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x334>)
    272c:	46d1      	mov	r9, sl
    272e:	b125      	cbz	r5, 273a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x5e>
    2730:	2100      	movs	r1, #0
    2732:	f240 50b9 	movw	r0, #1465	; 0x5b9
    2736:	f3af 8000 	nop.w
    273a:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    273e:	f884 9029 	strb.w	r9, [r4, #41]	; 0x29
    2742:	f04f 0800 	mov.w	r8, #0
    2746:	b125      	cbz	r5, 2752 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x76>
    2748:	2100      	movs	r1, #0
    274a:	f240 50be 	movw	r0, #1470	; 0x5be
    274e:	f3af 8000 	nop.w
    2752:	f1bb 0f00 	cmp.w	fp, #0
    2756:	d123      	bne.n	27a0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    2758:	4637      	mov	r7, r6
    275a:	2001      	movs	r0, #1
    275c:	ea20 0607 	bic.w	r6, r0, r7
    2760:	48ac      	ldr	r0, [pc, #688]	; (2a14 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x338>)
    2762:	2240      	movs	r2, #64	; 0x40
    2764:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2768:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    276c:	f00a fbb6 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2770:	b125      	cbz	r5, 277c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa0>
    2772:	2100      	movs	r1, #0
    2774:	f240 502f 	movw	r0, #1327	; 0x52f
    2778:	f3af 8000 	nop.w
    277c:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    2780:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    2784:	4421      	add	r1, r4
    2786:	4420      	add	r0, r4
    2788:	8c0a      	ldrh	r2, [r1, #32]
    278a:	8402      	strh	r2, [r0, #32]
    278c:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    2790:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    2794:	b125      	cbz	r5, 27a0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    2796:	2100      	movs	r1, #0
    2798:	f240 5033 	movw	r0, #1331	; 0x533
    279c:	f3af 8000 	nop.w
    27a0:	b125      	cbz	r5, 27ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd0>
    27a2:	2100      	movs	r1, #0
    27a4:	f240 50c6 	movw	r0, #1478	; 0x5c6
    27a8:	f3af 8000 	nop.w
    27ac:	a808      	add	r0, sp, #32
    27ae:	f000 ff5d 	bl	366c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    27b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    27b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
    27ba:	4633      	mov	r3, r6
    27bc:	466a      	mov	r2, sp
    27be:	a806      	add	r0, sp, #24
    27c0:	990a      	ldr	r1, [sp, #40]	; 0x28
    27c2:	f7ff f8f1 	bl	19a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x620>
    27c6:	b125      	cbz	r5, 27d2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xf6>
    27c8:	2100      	movs	r1, #0
    27ca:	f240 50cc 	movw	r0, #1484	; 0x5cc
    27ce:	f3af 8000 	nop.w
    27d2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    27d6:	2820      	cmp	r0, #32
    27d8:	d019      	beq.n	280e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x132>
    27da:	68e0      	ldr	r0, [r4, #12]
    27dc:	9900      	ldr	r1, [sp, #0]
    27de:	1a09      	subs	r1, r1, r0
    27e0:	0209      	lsls	r1, r1, #8
    27e2:	17ca      	asrs	r2, r1, #31
    27e4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    27e8:	1209      	asrs	r1, r1, #8
    27ea:	d510      	bpl.n	280e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x132>
    27ec:	e9dd 2100 	ldrd	r2, r1, [sp]
    27f0:	1a89      	subs	r1, r1, r2
    27f2:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    27f6:	4408      	add	r0, r1
    27f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    27fc:	e9cd 3000 	strd	r3, r0, [sp]
    2800:	4293      	cmp	r3, r2
    2802:	d202      	bcs.n	280a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    2804:	9802      	ldr	r0, [sp, #8]
    2806:	1c40      	adds	r0, r0, #1
    2808:	9002      	str	r0, [sp, #8]
    280a:	f04f 0801 	mov.w	r8, #1
    280e:	b14d      	cbz	r5, 2824 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x148>
    2810:	2100      	movs	r1, #0
    2812:	f240 50df 	movw	r0, #1503	; 0x5df
    2816:	f3af 8000 	nop.w
    281a:	2100      	movs	r1, #0
    281c:	f240 50e5 	movw	r0, #1509	; 0x5e5
    2820:	f3af 8000 	nop.w
    2824:	9900      	ldr	r1, [sp, #0]
    2826:	9806      	ldr	r0, [sp, #24]
    2828:	9a01      	ldr	r2, [sp, #4]
    282a:	1a09      	subs	r1, r1, r0
    282c:	1a10      	subs	r0, r2, r0
    282e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2832:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2836:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    283a:	bf98      	it	ls
    283c:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    2840:	d803      	bhi.n	284a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x16e>
    2842:	f1bb 0f00 	cmp.w	fp, #0
    2846:	d10c      	bne.n	2862 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x186>
    2848:	e003      	b.n	2852 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x176>
    284a:	f1bb 0f00 	cmp.w	fp, #0
    284e:	d039      	beq.n	28c4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e8>
    2850:	e0c0      	b.n	29d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    2852:	4633      	mov	r3, r6
    2854:	4669      	mov	r1, sp
    2856:	4870      	ldr	r0, [pc, #448]	; (2a18 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    2858:	9a06      	ldr	r2, [sp, #24]
    285a:	f7fe fb91 	bl	f80 <MPSL_IRQ_RADIO_Handler+0xb8>
    285e:	ea48 0800 	orr.w	r8, r8, r0
    2862:	f1b8 0f00 	cmp.w	r8, #0
    2866:	d023      	beq.n	28b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d4>
    2868:	9800      	ldr	r0, [sp, #0]
    286a:	f00a f9dd 	bl	cc28 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    286e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    2872:	f89d 200c 	ldrb.w	r2, [sp, #12]
    2876:	4b69      	ldr	r3, [pc, #420]	; (2a1c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x340>)
    2878:	4411      	add	r1, r2
    287a:	1c49      	adds	r1, r1, #1
    287c:	1842      	adds	r2, r0, r1
    287e:	4298      	cmp	r0, r3
    2880:	d856      	bhi.n	2930 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    2882:	4865      	ldr	r0, [pc, #404]	; (2a18 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    2884:	4281      	cmp	r1, r0
    2886:	dc7c      	bgt.n	2982 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a6>
    2888:	4240      	negs	r0, r0
    288a:	4281      	cmp	r1, r0
    288c:	db7a      	blt.n	2984 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>
    288e:	1c58      	adds	r0, r3, #1
    2890:	4290      	cmp	r0, r2
    2892:	bfdc      	itt	le
    2894:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2898:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    289c:	dd05      	ble.n	28aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ce>
    289e:	2a00      	cmp	r2, #0
    28a0:	bfbc      	itt	lt
    28a2:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    28a6:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    28aa:	980a      	ldr	r0, [sp, #40]	; 0x28
    28ac:	e9c0 2904 	strd	r2, r9, [r0, #16]
    28b0:	f04f 0a01 	mov.w	sl, #1
    28b4:	2d00      	cmp	r5, #0
    28b6:	d07c      	beq.n	29b2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2d6>
    28b8:	2100      	movs	r1, #0
    28ba:	f44f 60bf 	mov.w	r0, #1528	; 0x5f8
    28be:	f3af 8000 	nop.w
    28c2:	e087      	b.n	29d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    28c4:	9807      	ldr	r0, [sp, #28]
    28c6:	9002      	str	r0, [sp, #8]
    28c8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    28cc:	aa08      	add	r2, sp, #32
    28ce:	a905      	add	r1, sp, #20
    28d0:	f8dd 8018 	ldr.w	r8, [sp, #24]
    28d4:	f000 fd5a 	bl	338c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    28d8:	f001 fa68 	bl	3dac <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    28dc:	f000 fd3a 	bl	3354 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    28e0:	4607      	mov	r7, r0
    28e2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    28e6:	2820      	cmp	r0, #32
    28e8:	d027      	beq.n	293a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    28ea:	68e0      	ldr	r0, [r4, #12]
    28ec:	1d40      	adds	r0, r0, #5
    28ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    28f2:	bf00      	nop
    28f4:	e9dd 2100 	ldrd	r2, r1, [sp]
    28f8:	1a89      	subs	r1, r1, r2
    28fa:	9000      	str	r0, [sp, #0]
    28fc:	4408      	add	r0, r1
    28fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2902:	9001      	str	r0, [sp, #4]
    2904:	9800      	ldr	r0, [sp, #0]
    2906:	4540      	cmp	r0, r8
    2908:	d202      	bcs.n	2910 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    290a:	9802      	ldr	r0, [sp, #8]
    290c:	1c40      	adds	r0, r0, #1
    290e:	9002      	str	r0, [sp, #8]
    2910:	201f      	movs	r0, #31
    2912:	f88d 000c 	strb.w	r0, [sp, #12]
    2916:	9800      	ldr	r0, [sp, #0]
    2918:	f00a f986 	bl	cc28 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    291c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    2920:	f89d 200c 	ldrb.w	r2, [sp, #12]
    2924:	4b3d      	ldr	r3, [pc, #244]	; (2a1c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x340>)
    2926:	4411      	add	r1, r2
    2928:	1c49      	adds	r1, r1, #1
    292a:	1842      	adds	r2, r0, r1
    292c:	4298      	cmp	r0, r3
    292e:	d92a      	bls.n	2986 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2aa>
    2930:	f240 516f 	movw	r1, #1391	; 0x56f
    2934:	2070      	movs	r0, #112	; 0x70
    2936:	f001 fdb1 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    293a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    293e:	f108 0609 	add.w	r6, r8, #9
    2942:	b1b0      	cbz	r0, 2972 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x296>
    2944:	f001 fd32 	bl	43ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2948:	b998      	cbnz	r0, 2972 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x296>
    294a:	f001 fbfd 	bl	4148 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    294e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    2952:	bf08      	it	eq
    2954:	200d      	moveq	r0, #13
    2956:	d00b      	beq.n	2970 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>
    2958:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    295c:	3856      	subs	r0, #86	; 0x56
    295e:	bf08      	it	eq
    2960:	201c      	moveq	r0, #28
    2962:	d005      	beq.n	2970 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>
    2964:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2968:	389f      	subs	r0, #159	; 0x9f
    296a:	bf14      	ite	ne
    296c:	4648      	movne	r0, r9
    296e:	2032      	moveq	r0, #50	; 0x32
    2970:	4406      	add	r6, r0
    2972:	9805      	ldr	r0, [sp, #20]
    2974:	4287      	cmp	r7, r0
    2976:	bf84      	itt	hi
    2978:	1a38      	subhi	r0, r7, r0
    297a:	4406      	addhi	r6, r0
    297c:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    2980:	e7b8      	b.n	28f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x218>
    2982:	e003      	b.n	298c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>
    2984:	e00a      	b.n	299c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>
    2986:	4824      	ldr	r0, [pc, #144]	; (2a18 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    2988:	4281      	cmp	r1, r0
    298a:	dd04      	ble.n	2996 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ba>
    298c:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    2990:	2070      	movs	r0, #112	; 0x70
    2992:	f001 fd83 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2996:	4822      	ldr	r0, [pc, #136]	; (2a20 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x344>)
    2998:	4281      	cmp	r1, r0
    299a:	da04      	bge.n	29a6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ca>
    299c:	f240 5171 	movw	r1, #1393	; 0x571
    29a0:	2070      	movs	r0, #112	; 0x70
    29a2:	f001 fd7b 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29a6:	481f      	ldr	r0, [pc, #124]	; (2a24 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x348>)
    29a8:	4290      	cmp	r0, r2
    29aa:	bfd8      	it	le
    29ac:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    29b0:	e000      	b.n	29b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2d8>
    29b2:	e00f      	b.n	29d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    29b4:	bfd8      	it	le
    29b6:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    29ba:	dd05      	ble.n	29c8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ec>
    29bc:	2a00      	cmp	r2, #0
    29be:	bfbc      	itt	lt
    29c0:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    29c4:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    29c8:	980a      	ldr	r0, [sp, #40]	; 0x28
    29ca:	f04f 0a01 	mov.w	sl, #1
    29ce:	46d0      	mov	r8, sl
    29d0:	e9c0 2904 	strd	r2, r9, [r0, #16]
    29d4:	ea1a 0f08 	tst.w	sl, r8
    29d8:	d009      	beq.n	29ee <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x312>
    29da:	980a      	ldr	r0, [sp, #40]	; 0x28
    29dc:	4911      	ldr	r1, [pc, #68]	; (2a24 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x348>)
    29de:	9b02      	ldr	r3, [sp, #8]
    29e0:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
    29e4:	fbe3 2001 	umlal	r2, r0, r3, r1
    29e8:	990a      	ldr	r1, [sp, #40]	; 0x28
    29ea:	e9c1 2004 	strd	r2, r0, [r1, #16]
    29ee:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    29f2:	f88d 0014 	strb.w	r0, [sp, #20]
    29f6:	f89d 0014 	ldrb.w	r0, [sp, #20]
    29fa:	2800      	cmp	r0, #0
    29fc:	f47f ae97 	bne.w	272e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    2a00:	b00b      	add	sp, #44	; 0x2c
    2a02:	4650      	mov	r0, sl
    2a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a08:	e000ed04 	.word	0xe000ed04
    2a0c:	00000000 	.word	0x00000000
    2a10:	2000112c 	.word	0x2000112c
    2a14:	200010ac 	.word	0x200010ac
    2a18:	0f424000 	.word	0x0f424000
    2a1c:	1e847fff 	.word	0x1e847fff
    2a20:	f0bdc000 	.word	0xf0bdc000
    2a24:	1e848000 	.word	0x1e848000

00002a28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2a28:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a2c:	4d94      	ldr	r5, [pc, #592]	; (2c80 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    2a2e:	b08c      	sub	sp, #48	; 0x30
    2a30:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    2a34:	2000      	movs	r0, #0
    2a36:	9009      	str	r0, [sp, #36]	; 0x24
    2a38:	9006      	str	r0, [sp, #24]
    2a3a:	2001      	movs	r0, #1
    2a3c:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    2a40:	f04f 0800 	mov.w	r8, #0
    2a44:	4607      	mov	r7, r0
    2a46:	4c8f      	ldr	r4, [pc, #572]	; (2c84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    2a48:	f8cd 001c 	str.w	r0, [sp, #28]
    2a4c:	f000 fe08 	bl	3660 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2a50:	9008      	str	r0, [sp, #32]
    2a52:	b124      	cbz	r4, 2a5e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x36>
    2a54:	2100      	movs	r1, #0
    2a56:	f44f 60f6 	mov.w	r0, #1968	; 0x7b0
    2a5a:	f3af 8000 	nop.w
    2a5e:	9807      	ldr	r0, [sp, #28]
    2a60:	2800      	cmp	r0, #0
    2a62:	d03c      	beq.n	2ade <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb6>
    2a64:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    2a68:	b124      	cbz	r4, 2a74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x4c>
    2a6a:	2100      	movs	r1, #0
    2a6c:	f240 70b5 	movw	r0, #1973	; 0x7b5
    2a70:	f3af 8000 	nop.w
    2a74:	f895 a02c 	ldrb.w	sl, [r5, #44]	; 0x2c
    2a78:	2240      	movs	r2, #64	; 0x40
    2a7a:	ea27 060a 	bic.w	r6, r7, sl
    2a7e:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    2a82:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    2a86:	4683      	mov	fp, r0
    2a88:	f00a fa28 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2a8c:	b124      	cbz	r4, 2a98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x70>
    2a8e:	2100      	movs	r1, #0
    2a90:	f240 502f 	movw	r0, #1327	; 0x52f
    2a94:	f3af 8000 	nop.w
    2a98:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    2a9c:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    2aa0:	4428      	add	r0, r5
    2aa2:	4429      	add	r1, r5
    2aa4:	9000      	str	r0, [sp, #0]
    2aa6:	8c0a      	ldrh	r2, [r1, #32]
    2aa8:	8402      	strh	r2, [r0, #32]
    2aaa:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    2aae:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    2ab2:	b124      	cbz	r4, 2abe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    2ab4:	2100      	movs	r1, #0
    2ab6:	f240 5033 	movw	r0, #1331	; 0x533
    2aba:	f3af 8000 	nop.w
    2abe:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    2ac2:	f88d 0008 	strb.w	r0, [sp, #8]
    2ac6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2aca:	b178      	cbz	r0, 2aec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc4>
    2acc:	2c00      	cmp	r4, #0
    2ace:	bf1c      	itt	ne
    2ad0:	2100      	movne	r1, #0
    2ad2:	f240 70bb 	movwne	r0, #1979	; 0x7bb
    2ad6:	d0b9      	beq.n	2a4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    2ad8:	f3af 8000 	nop.w
    2adc:	e7b6      	b.n	2a4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    2ade:	486a      	ldr	r0, [pc, #424]	; (2c88 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    2ae0:	2800      	cmp	r0, #0
    2ae2:	bf18      	it	ne
    2ae4:	f3af 8000 	nopne.w
    2ae8:	b662      	cpsie	i
    2aea:	e7bb      	b.n	2a64 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x3c>
    2aec:	b124      	cbz	r4, 2af8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xd0>
    2aee:	2100      	movs	r1, #0
    2af0:	f240 70bf 	movw	r0, #1983	; 0x7bf
    2af4:	f3af 8000 	nop.w
    2af8:	980c      	ldr	r0, [sp, #48]	; 0x30
    2afa:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    2afe:	2803      	cmp	r0, #3
    2b00:	d17d      	bne.n	2bfe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d6>
    2b02:	9a00      	ldr	r2, [sp, #0]
    2b04:	990c      	ldr	r1, [sp, #48]	; 0x30
    2b06:	f892 0020 	ldrb.w	r0, [r2, #32]
    2b0a:	4288      	cmp	r0, r1
    2b0c:	bf14      	ite	ne
    2b0e:	f04f 0a00 	movne.w	sl, #0
    2b12:	f04f 0a01 	moveq.w	sl, #1
    2b16:	f102 0c20 	add.w	ip, r2, #32
    2b1a:	4683      	mov	fp, r0
    2b1c:	2220      	movs	r2, #32
    2b1e:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    2b22:	e003      	b.n	2b2c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x104>
    2b24:	4602      	mov	r2, r0
    2b26:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2b2a:	7840      	ldrb	r0, [r0, #1]
    2b2c:	4288      	cmp	r0, r1
    2b2e:	d002      	beq.n	2b36 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    2b30:	2820      	cmp	r0, #32
    2b32:	d00a      	beq.n	2b4a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x122>
    2b34:	e7f6      	b.n	2b24 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    2b36:	2820      	cmp	r0, #32
    2b38:	d007      	beq.n	2b4a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x122>
    2b3a:	4583      	cmp	fp, r0
    2b3c:	d107      	bne.n	2b4e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    2b3e:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    2b42:	7840      	ldrb	r0, [r0, #1]
    2b44:	f88c 0000 	strb.w	r0, [ip]
    2b48:	e007      	b.n	2b5a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    2b4a:	4640      	mov	r0, r8
    2b4c:	e00c      	b.n	2b68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    2b4e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2b52:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2b56:	7840      	ldrb	r0, [r0, #1]
    2b58:	7048      	strb	r0, [r1, #1]
    2b5a:	b124      	cbz	r4, 2b66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x13e>
    2b5c:	2100      	movs	r1, #0
    2b5e:	f240 409a 	movw	r0, #1178	; 0x49a
    2b62:	f3af 8000 	nop.w
    2b66:	4638      	mov	r0, r7
    2b68:	46c3      	mov	fp, r8
    2b6a:	ea10 0f0a 	tst.w	r0, sl
    2b6e:	bf18      	it	ne
    2b70:	46bb      	movne	fp, r7
    2b72:	2800      	cmp	r0, #0
    2b74:	d04f      	beq.n	2c16 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ee>
    2b76:	b124      	cbz	r4, 2b82 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15a>
    2b78:	2100      	movs	r1, #0
    2b7a:	f240 70c4 	movw	r0, #1988	; 0x7c4
    2b7e:	f3af 8000 	nop.w
    2b82:	4632      	mov	r2, r6
    2b84:	2001      	movs	r0, #1
    2b86:	990c      	ldr	r1, [sp, #48]	; 0x30
    2b88:	f7ff f8d6 	bl	1d38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9b0>
    2b8c:	b124      	cbz	r4, 2b98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    2b8e:	2100      	movs	r1, #0
    2b90:	f240 70cd 	movw	r0, #1997	; 0x7cd
    2b94:	f3af 8000 	nop.w
    2b98:	483c      	ldr	r0, [pc, #240]	; (2c8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x264>)
    2b9a:	2800      	cmp	r0, #0
    2b9c:	bf18      	it	ne
    2b9e:	f3af 8000 	nopne.w
    2ba2:	f3ef 8010 	mrs	r0, PRIMASK
    2ba6:	b672      	cpsid	i
    2ba8:	9007      	str	r0, [sp, #28]
    2baa:	b124      	cbz	r4, 2bb6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    2bac:	2100      	movs	r1, #0
    2bae:	f240 70d2 	movw	r0, #2002	; 0x7d2
    2bb2:	f3af 8000 	nop.w
    2bb6:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    2bba:	f88d 0008 	strb.w	r0, [sp, #8]
    2bbe:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2bc2:	b138      	cbz	r0, 2bd4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    2bc4:	2c00      	cmp	r4, #0
    2bc6:	bf1c      	itt	ne
    2bc8:	2100      	movne	r1, #0
    2bca:	f240 70d6 	movwne	r0, #2006	; 0x7d6
    2bce:	f43f af3d 	beq.w	2a4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    2bd2:	e781      	b.n	2ad8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    2bd4:	f1bb 0f00 	cmp.w	fp, #0
    2bd8:	d00a      	beq.n	2bf0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c8>
    2bda:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    2bde:	2820      	cmp	r0, #32
    2be0:	d106      	bne.n	2bf0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c8>
    2be2:	4632      	mov	r2, r6
    2be4:	2102      	movs	r1, #2
    2be6:	9808      	ldr	r0, [sp, #32]
    2be8:	f7ff f8d8 	bl	1d9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50>
    2bec:	9006      	str	r0, [sp, #24]
    2bee:	b1f8      	cbz	r0, 2c30 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>
    2bf0:	b124      	cbz	r4, 2bfc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    2bf2:	2100      	movs	r1, #0
    2bf4:	f240 70ea 	movw	r0, #2026	; 0x7ea
    2bf8:	f3af 8000 	nop.w
    2bfc:	e000      	b.n	2c00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d8>
    2bfe:	e00a      	b.n	2c16 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ee>
    2c00:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    2c04:	ea27 0000 	bic.w	r0, r7, r0
    2c08:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    2c0c:	20ff      	movs	r0, #255	; 0xff
    2c0e:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    2c12:	2001      	movs	r0, #1
    2c14:	9009      	str	r0, [sp, #36]	; 0x24
    2c16:	b124      	cbz	r4, 2c22 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fa>
    2c18:	2100      	movs	r1, #0
    2c1a:	f240 70f3 	movw	r0, #2035	; 0x7f3
    2c1e:	f3af 8000 	nop.w
    2c22:	9806      	ldr	r0, [sp, #24]
    2c24:	4e1a      	ldr	r6, [pc, #104]	; (2c90 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x268>)
    2c26:	2802      	cmp	r0, #2
    2c28:	d009      	beq.n	2c3e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x216>
    2c2a:	2801      	cmp	r0, #1
    2c2c:	d00f      	beq.n	2c4e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    2c2e:	e013      	b.n	2c58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    2c30:	b194      	cbz	r4, 2c58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    2c32:	2100      	movs	r1, #0
    2c34:	f240 70e5 	movw	r0, #2021	; 0x7e5
    2c38:	f3af 8000 	nop.w
    2c3c:	e7ec      	b.n	2c18 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    2c3e:	68a9      	ldr	r1, [r5, #8]
    2c40:	9808      	ldr	r0, [sp, #32]
    2c42:	1a08      	subs	r0, r1, r0
    2c44:	f009 fff0 	bl	cc28 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2c48:	6871      	ldr	r1, [r6, #4]
    2c4a:	b921      	cbnz	r1, 2c56 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22e>
    2c4c:	e004      	b.n	2c58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    2c4e:	6871      	ldr	r1, [r6, #4]
    2c50:	f04f 30ff 	mov.w	r0, #4294967295
    2c54:	b101      	cbz	r1, 2c58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    2c56:	4788      	blx	r1
    2c58:	9807      	ldr	r0, [sp, #28]
    2c5a:	b148      	cbz	r0, 2c70 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x248>
    2c5c:	b124      	cbz	r4, 2c68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    2c5e:	2100      	movs	r1, #0
    2c60:	f640 0007 	movw	r0, #2055	; 0x807
    2c64:	f3af 8000 	nop.w
    2c68:	9809      	ldr	r0, [sp, #36]	; 0x24
    2c6a:	b00d      	add	sp, #52	; 0x34
    2c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c70:	4805      	ldr	r0, [pc, #20]	; (2c88 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    2c72:	2800      	cmp	r0, #0
    2c74:	bf18      	it	ne
    2c76:	f3af 8000 	nopne.w
    2c7a:	b662      	cpsie	i
    2c7c:	e7ee      	b.n	2c5c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>
    2c7e:	0000      	.short	0x0000
    2c80:	2000112c 	.word	0x2000112c
	...
    2c90:	2000003c 	.word	0x2000003c

00002c94 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    2c94:	2820      	cmp	r0, #32
    2c96:	bf24      	itt	cs
    2c98:	2000      	movcs	r0, #0
    2c9a:	4770      	bxcs	lr
    2c9c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2ca0:	4b03      	ldr	r3, [pc, #12]	; (2cb0 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    2ca2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    2ca6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2caa:	6042      	str	r2, [r0, #4]
    2cac:	2001      	movs	r0, #1
    2cae:	4770      	bx	lr
    2cb0:	20000d2c 	.word	0x20000d2c

00002cb4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    2cb4:	b510      	push	{r4, lr}
    2cb6:	2820      	cmp	r0, #32
    2cb8:	d211      	bcs.n	2cde <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2cba:	490e      	ldr	r1, [pc, #56]	; (2cf4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2cbc:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    2cc0:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    2cc4:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2cc8:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2ccc:	b13b      	cbz	r3, 2cde <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2cce:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    2cd2:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    2cd6:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    2cda:	2a01      	cmp	r2, #1
    2cdc:	d001      	beq.n	2ce2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2cde:	2000      	movs	r0, #0
    2ce0:	bd10      	pop	{r4, pc}
    2ce2:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    2ce6:	4601      	mov	r1, r0
    2ce8:	2000      	movs	r0, #0
    2cea:	f7ff f825 	bl	1d38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9b0>
    2cee:	2001      	movs	r0, #1
    2cf0:	bd10      	pop	{r4, pc}
    2cf2:	0000      	.short	0x0000
    2cf4:	2000112c 	.word	0x2000112c

00002cf8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2cf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cfc:	4e86      	ldr	r6, [pc, #536]	; (2f18 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    2cfe:	4680      	mov	r8, r0
    2d00:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    2d04:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2d08:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2d0c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2d10:	2800      	cmp	r0, #0
    2d12:	d071      	beq.n	2df8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    2d14:	f896 902c 	ldrb.w	r9, [r6, #44]	; 0x2c
    2d18:	4d80      	ldr	r5, [pc, #512]	; (2f1c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    2d1a:	b125      	cbz	r5, 2d26 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2d1c:	2100      	movs	r1, #0
    2d1e:	f640 3076 	movw	r0, #2934	; 0xb76
    2d22:	f3af 8000 	nop.w
    2d26:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    2d2a:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2d2e:	2801      	cmp	r0, #1
    2d30:	d018      	beq.n	2d64 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2d32:	b2c0      	uxtb	r0, r0
    2d34:	2804      	cmp	r0, #4
    2d36:	bf1c      	itt	ne
    2d38:	2805      	cmpne	r0, #5
    2d3a:	2806      	cmpne	r0, #6
    2d3c:	d061      	beq.n	2e02 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    2d3e:	b12d      	cbz	r5, 2d4c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2d40:	f04f 0100 	mov.w	r1, #0
    2d44:	f640 3082 	movw	r0, #2946	; 0xb82
    2d48:	f3af 8000 	nop.w
    2d4c:	f001 fcd0 	bl	46f0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2d50:	b125      	cbz	r5, 2d5c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2d52:	2100      	movs	r1, #0
    2d54:	f640 3086 	movw	r0, #2950	; 0xb86
    2d58:	f3af 8000 	nop.w
    2d5c:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2d60:	2801      	cmp	r0, #1
    2d62:	d1e6      	bne.n	2d32 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2d64:	2401      	movs	r4, #1
    2d66:	b125      	cbz	r5, 2d72 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2d68:	2100      	movs	r1, #0
    2d6a:	f640 308d 	movw	r0, #2957	; 0xb8d
    2d6e:	f3af 8000 	nop.w
    2d72:	2c00      	cmp	r4, #0
    2d74:	d04b      	beq.n	2e0e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    2d76:	2000      	movs	r0, #0
    2d78:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    2d7c:	b125      	cbz	r5, 2d88 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    2d7e:	2100      	movs	r1, #0
    2d80:	f640 3092 	movw	r0, #2962	; 0xb92
    2d84:	f3af 8000 	nop.w
    2d88:	f896 b02c 	ldrb.w	fp, [r6, #44]	; 0x2c
    2d8c:	2001      	movs	r0, #1
    2d8e:	ea20 090b 	bic.w	r9, r0, fp
    2d92:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    2d96:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2d9a:	2240      	movs	r2, #64	; 0x40
    2d9c:	f00a f89e 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2da0:	b125      	cbz	r5, 2dac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    2da2:	2100      	movs	r1, #0
    2da4:	f240 502f 	movw	r0, #1327	; 0x52f
    2da8:	f3af 8000 	nop.w
    2dac:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    2db0:	eb00 0a06 	add.w	sl, r0, r6
    2db4:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    2db8:	4430      	add	r0, r6
    2dba:	8c01      	ldrh	r1, [r0, #32]
    2dbc:	f8aa 1020 	strh.w	r1, [sl, #32]
    2dc0:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    2dc4:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    2dc8:	b125      	cbz	r5, 2dd4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    2dca:	2100      	movs	r1, #0
    2dcc:	f240 5033 	movw	r0, #1331	; 0x533
    2dd0:	f3af 8000 	nop.w
    2dd4:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2dd8:	f88d 0000 	strb.w	r0, [sp]
    2ddc:	f89d 0000 	ldrb.w	r0, [sp]
    2de0:	b1e0      	cbz	r0, 2e1c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    2de2:	2d00      	cmp	r5, #0
    2de4:	bf1c      	itt	ne
    2de6:	2100      	movne	r1, #0
    2de8:	f640 3098 	movwne	r0, #2968	; 0xb98
    2dec:	d0bb      	beq.n	2d66 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2dee:	bf00      	nop
    2df0:	f3af 8000 	nop.w
    2df4:	e7b7      	b.n	2d66 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2df6:	e7ff      	b.n	2df8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    2df8:	f640 316d 	movw	r1, #2925	; 0xb6d
    2dfc:	2070      	movs	r0, #112	; 0x70
    2dfe:	f001 fb4d 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e02:	464a      	mov	r2, r9
    2e04:	4641      	mov	r1, r8
    2e06:	2001      	movs	r0, #1
    2e08:	f7fe ff96 	bl	1d38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9b0>
    2e0c:	e7a0      	b.n	2d50 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    2e0e:	4844      	ldr	r0, [pc, #272]	; (2f20 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    2e10:	2800      	cmp	r0, #0
    2e12:	bf18      	it	ne
    2e14:	f3af 8000 	nopne.w
    2e18:	b662      	cpsie	i
    2e1a:	e7ac      	b.n	2d76 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    2e1c:	b125      	cbz	r5, 2e28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    2e1e:	2100      	movs	r1, #0
    2e20:	f640 309c 	movw	r0, #2972	; 0xb9c
    2e24:	f3af 8000 	nop.w
    2e28:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    2e2c:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2e30:	4640      	mov	r0, r8
    2e32:	461c      	mov	r4, r3
    2e34:	f04f 0b20 	mov.w	fp, #32
    2e38:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    2e3c:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2e40:	e004      	b.n	2e4c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    2e42:	46a3      	mov	fp, r4
    2e44:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    2e48:	f89c 4001 	ldrb.w	r4, [ip, #1]
    2e4c:	4284      	cmp	r4, r0
    2e4e:	d002      	beq.n	2e56 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    2e50:	2c20      	cmp	r4, #32
    2e52:	d02b      	beq.n	2eac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    2e54:	e7f5      	b.n	2e42 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    2e56:	2c20      	cmp	r4, #32
    2e58:	d028      	beq.n	2eac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    2e5a:	42a3      	cmp	r3, r4
    2e5c:	d104      	bne.n	2e68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    2e5e:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    2e62:	7840      	ldrb	r0, [r0, #1]
    2e64:	7008      	strb	r0, [r1, #0]
    2e66:	e005      	b.n	2e74 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    2e68:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    2e6c:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    2e70:	7840      	ldrb	r0, [r0, #1]
    2e72:	7048      	strb	r0, [r1, #1]
    2e74:	f1ba 0f00 	cmp.w	sl, #0
    2e78:	d011      	beq.n	2e9e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    2e7a:	b125      	cbz	r5, 2e86 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    2e7c:	2100      	movs	r1, #0
    2e7e:	f240 4092 	movw	r0, #1170	; 0x492
    2e82:	f3af 8000 	nop.w
    2e86:	f89a 0000 	ldrb.w	r0, [sl]
    2e8a:	42a0      	cmp	r0, r4
    2e8c:	d107      	bne.n	2e9e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    2e8e:	b125      	cbz	r5, 2e9a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    2e90:	2100      	movs	r1, #0
    2e92:	f240 4095 	movw	r0, #1173	; 0x495
    2e96:	f3af 8000 	nop.w
    2e9a:	f88a b000 	strb.w	fp, [sl]
    2e9e:	b15d      	cbz	r5, 2eb8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    2ea0:	2100      	movs	r1, #0
    2ea2:	f240 409a 	movw	r0, #1178	; 0x49a
    2ea6:	f3af 8000 	nop.w
    2eaa:	e000      	b.n	2eae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    2eac:	b125      	cbz	r5, 2eb8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    2eae:	2100      	movs	r1, #0
    2eb0:	f44f 603a 	mov.w	r0, #2976	; 0xba0
    2eb4:	f3af 8000 	nop.w
    2eb8:	481a      	ldr	r0, [pc, #104]	; (2f24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    2eba:	2800      	cmp	r0, #0
    2ebc:	bf18      	it	ne
    2ebe:	f3af 8000 	nopne.w
    2ec2:	f3ef 8410 	mrs	r4, PRIMASK
    2ec6:	b672      	cpsid	i
    2ec8:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2ecc:	f88d 0000 	strb.w	r0, [sp]
    2ed0:	f89d 0000 	ldrb.w	r0, [sp]
    2ed4:	b138      	cbz	r0, 2ee6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    2ed6:	2d00      	cmp	r5, #0
    2ed8:	bf1c      	itt	ne
    2eda:	2100      	movne	r1, #0
    2edc:	f640 30a6 	movwne	r0, #2982	; 0xba6
    2ee0:	f43f af41 	beq.w	2d66 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2ee4:	e784      	b.n	2df0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    2ee6:	f886 902c 	strb.w	r9, [r6, #44]	; 0x2c
    2eea:	20ff      	movs	r0, #255	; 0xff
    2eec:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    2ef0:	b154      	cbz	r4, 2f08 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    2ef2:	2d00      	cmp	r5, #0
    2ef4:	bf08      	it	eq
    2ef6:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2efa:	2100      	movs	r1, #0
    2efc:	f640 30b3 	movw	r0, #2995	; 0xbb3
    2f00:	f3af 8000 	nop.w
    2f04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f08:	4805      	ldr	r0, [pc, #20]	; (2f20 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    2f0a:	2800      	cmp	r0, #0
    2f0c:	bf18      	it	ne
    2f0e:	f3af 8000 	nopne.w
    2f12:	b662      	cpsie	i
    2f14:	e7ed      	b.n	2ef2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    2f16:	0000      	.short	0x0000
    2f18:	2000112c 	.word	0x2000112c
	...

00002f28 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2f28:	b570      	push	{r4, r5, r6, lr}
    2f2a:	460d      	mov	r5, r1
    2f2c:	4606      	mov	r6, r0
    2f2e:	f001 fa2b 	bl	4388 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    2f32:	480f      	ldr	r0, [pc, #60]	; (2f70 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    2f34:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
    2f38:	2400      	movs	r4, #0
    2f3a:	3880      	subs	r0, #128	; 0x80
    2f3c:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2f40:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2f44:	b129      	cbz	r1, 2f52 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    2f46:	1c61      	adds	r1, r4, #1
    2f48:	b2cc      	uxtb	r4, r1
    2f4a:	2c20      	cmp	r4, #32
    2f4c:	d3f8      	bcc.n	2f40 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2f4e:	2020      	movs	r0, #32
    2f50:	bd70      	pop	{r4, r5, r6, pc}
    2f52:	4808      	ldr	r0, [pc, #32]	; (2f74 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    2f54:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    2f58:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    2f5c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2f60:	4621      	mov	r1, r4
    2f62:	6045      	str	r5, [r0, #4]
    2f64:	2001      	movs	r0, #1
    2f66:	f7fe fee7 	bl	1d38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9b0>
    2f6a:	4620      	mov	r0, r4
    2f6c:	bd70      	pop	{r4, r5, r6, pc}
    2f6e:	0000      	.short	0x0000
    2f70:	2000112c 	.word	0x2000112c
    2f74:	20000d2c 	.word	0x20000d2c

00002f78 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2f78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f7c:	f000 fb70 	bl	3660 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2f80:	4605      	mov	r5, r0
    2f82:	f000 fe3f 	bl	3c04 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2f86:	4c60      	ldr	r4, [pc, #384]	; (3108 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x190>)
    2f88:	6860      	ldr	r0, [r4, #4]
    2f8a:	f1b0 3fff 	cmp.w	r0, #4294967295
    2f8e:	bf1c      	itt	ne
    2f90:	f04f 30ff 	movne.w	r0, #4294967295
    2f94:	6060      	strne	r0, [r4, #4]
    2f96:	7fa0      	ldrb	r0, [r4, #30]
    2f98:	4f5c      	ldr	r7, [pc, #368]	; (310c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>)
    2f9a:	b990      	cbnz	r0, 2fc2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4a>
    2f9c:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    2fa0:	1a40      	subs	r0, r0, r1
    2fa2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2fa6:	f44f 710c 	mov.w	r1, #560	; 0x230
    2faa:	f009 fe68 	bl	cc7e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2fae:	68e1      	ldr	r1, [r4, #12]
    2fb0:	4408      	add	r0, r1
    2fb2:	1a28      	subs	r0, r5, r0
    2fb4:	0200      	lsls	r0, r0, #8
    2fb6:	17c1      	asrs	r1, r0, #31
    2fb8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2fbc:	1200      	asrs	r0, r0, #8
    2fbe:	0fc0      	lsrs	r0, r0, #31
    2fc0:	d012      	beq.n	2fe8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x70>
    2fc2:	7e60      	ldrb	r0, [r4, #25]
    2fc4:	b320      	cbz	r0, 3010 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    2fc6:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2fca:	f88d 0000 	strb.w	r0, [sp]
    2fce:	f89d 0000 	ldrb.w	r0, [sp]
    2fd2:	b1e8      	cbz	r0, 3010 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    2fd4:	f000 fc72 	bl	38bc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2fd8:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    2fdc:	b1f0      	cbz	r0, 301c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    2fde:	f240 31d5 	movw	r1, #981	; 0x3d5
    2fe2:	2070      	movs	r0, #112	; 0x70
    2fe4:	f001 fa5a 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2fe8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2fec:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2ff0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2ff4:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    2ff8:	6840      	ldr	r0, [r0, #4]
    2ffa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2ffe:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
    3002:	2108      	movs	r1, #8
    3004:	4790      	blx	r2
    3006:	f240 31bd 	movw	r1, #957	; 0x3bd
    300a:	2070      	movs	r0, #112	; 0x70
    300c:	f001 fa46 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3010:	1ce8      	adds	r0, r5, #3
    3012:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3016:	f000 fb49 	bl	36ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    301a:	e7dd      	b.n	2fd8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x60>
    301c:	2001      	movs	r0, #1
    301e:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    3022:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3026:	2820      	cmp	r0, #32
    3028:	d021      	beq.n	306e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf6>
    302a:	f894 902d 	ldrb.w	r9, [r4, #45]	; 0x2d
    302e:	2020      	movs	r0, #32
    3030:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    3034:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3038:	2600      	movs	r6, #0
    303a:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    303e:	f884 6027 	strb.w	r6, [r4, #39]	; 0x27
    3042:	6026      	str	r6, [r4, #0]
    3044:	f000 feb8 	bl	3db8 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    3048:	7720      	strb	r0, [r4, #28]
    304a:	f894 802c 	ldrb.w	r8, [r4, #44]	; 0x2c
    304e:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    3052:	eb00 0a04 	add.w	sl, r0, r4
    3056:	f89a 0020 	ldrb.w	r0, [sl, #32]
    305a:	2820      	cmp	r0, #32
    305c:	d012      	beq.n	3084 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    305e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3062:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    3066:	7e81      	ldrb	r1, [r0, #26]
    3068:	2901      	cmp	r1, #1
    306a:	d005      	beq.n	3078 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x100>
    306c:	e00a      	b.n	3084 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    306e:	f44f 7176 	mov.w	r1, #984	; 0x3d8
    3072:	2070      	movs	r0, #112	; 0x70
    3074:	f001 fa12 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3078:	f100 0208 	add.w	r2, r0, #8
    307c:	2101      	movs	r1, #1
    307e:	4628      	mov	r0, r5
    3080:	f7fe f9d2 	bl	1428 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa0>
    3084:	4642      	mov	r2, r8
    3086:	2101      	movs	r1, #1
    3088:	4628      	mov	r0, r5
    308a:	f7fe fe87 	bl	1d9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50>
    308e:	0007      	movs	r7, r0
    3090:	d0f8      	beq.n	3084 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    3092:	481f      	ldr	r0, [pc, #124]	; (3110 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x198>)
    3094:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    3098:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    309c:	2802      	cmp	r0, #2
    309e:	d104      	bne.n	30aa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x132>
    30a0:	4642      	mov	r2, r8
    30a2:	4649      	mov	r1, r9
    30a4:	2006      	movs	r0, #6
    30a6:	f7fe fe47 	bl	1d38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9b0>
    30aa:	20ff      	movs	r0, #255	; 0xff
    30ac:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    30b0:	f89a 0021 	ldrb.w	r0, [sl, #33]	; 0x21
    30b4:	f8df 805c 	ldr.w	r8, [pc, #92]	; 3114 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19c>
    30b8:	2820      	cmp	r0, #32
    30ba:	bf1c      	itt	ne
    30bc:	f898 0001 	ldrbne.w	r0, [r8, #1]
    30c0:	f001 fac0 	blne	4644 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    30c4:	7f20      	ldrb	r0, [r4, #28]
    30c6:	b118      	cbz	r0, 30d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x158>
    30c8:	f000 fe52 	bl	3d70 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    30cc:	7726      	strb	r6, [r4, #28]
    30ce:	7766      	strb	r6, [r4, #29]
    30d0:	2f02      	cmp	r7, #2
    30d2:	d00f      	beq.n	30f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x17c>
    30d4:	2f01      	cmp	r7, #1
    30d6:	bf18      	it	ne
    30d8:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30dc:	f04f 30ff 	mov.w	r0, #4294967295
    30e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
    30e4:	2900      	cmp	r1, #0
    30e6:	bf08      	it	eq
    30e8:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30ec:	b001      	add	sp, #4
    30ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30f2:	4708      	bx	r1
    30f4:	68a0      	ldr	r0, [r4, #8]
    30f6:	1b40      	subs	r0, r0, r5
    30f8:	f009 fd96 	bl	cc28 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    30fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
    3100:	2900      	cmp	r1, #0
    3102:	d1f3      	bne.n	30ec <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x174>
    3104:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3108:	2000112c 	.word	0x2000112c
    310c:	20000d2c 	.word	0x20000d2c
    3110:	200010ac 	.word	0x200010ac
    3114:	2000003c 	.word	0x2000003c

00003118 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    3118:	b530      	push	{r4, r5, lr}
    311a:	4c36      	ldr	r4, [pc, #216]	; (31f4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    311c:	4605      	mov	r5, r0
    311e:	b083      	sub	sp, #12
    3120:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3124:	2820      	cmp	r0, #32
    3126:	d008      	beq.n	313a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    3128:	6860      	ldr	r0, [r4, #4]
    312a:	f1b0 3fff 	cmp.w	r0, #4294967295
    312e:	d009      	beq.n	3144 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    3130:	f640 21a1 	movw	r1, #2721	; 0xaa1
    3134:	2070      	movs	r0, #112	; 0x70
    3136:	f001 f9b1 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    313a:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
    313e:	2070      	movs	r0, #112	; 0x70
    3140:	f001 f9ac 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3144:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3148:	492b      	ldr	r1, [pc, #172]	; (31f8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe0>)
    314a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    314e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3152:	3008      	adds	r0, #8
    3154:	f7fe fdb6 	bl	1cc4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x93c>
    3158:	4601      	mov	r1, r0
    315a:	4a28      	ldr	r2, [pc, #160]	; (31fc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe4>)
    315c:	4428      	add	r0, r5
    315e:	4291      	cmp	r1, r2
    3160:	d904      	bls.n	316c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x54>
    3162:	f240 516f 	movw	r1, #1391	; 0x56f
    3166:	2070      	movs	r0, #112	; 0x70
    3168:	f001 f998 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    316c:	4924      	ldr	r1, [pc, #144]	; (3200 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe8>)
    316e:	428d      	cmp	r5, r1
    3170:	dd04      	ble.n	317c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x64>
    3172:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    3176:	2070      	movs	r0, #112	; 0x70
    3178:	f001 f990 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    317c:	4921      	ldr	r1, [pc, #132]	; (3204 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xec>)
    317e:	428d      	cmp	r5, r1
    3180:	da04      	bge.n	318c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x74>
    3182:	f240 5171 	movw	r1, #1393	; 0x571
    3186:	2070      	movs	r0, #112	; 0x70
    3188:	f001 f988 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    318c:	491e      	ldr	r1, [pc, #120]	; (3208 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xf0>)
    318e:	4281      	cmp	r1, r0
    3190:	bfdc      	itt	le
    3192:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    3196:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    319a:	dd05      	ble.n	31a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    319c:	2800      	cmp	r0, #0
    319e:	bfbc      	itt	lt
    31a0:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    31a4:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    31a8:	aa01      	add	r2, sp, #4
    31aa:	4669      	mov	r1, sp
    31ac:	f000 f8ee 	bl	338c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    31b0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    31b4:	280f      	cmp	r0, #15
    31b6:	bf8c      	ite	hi
    31b8:	2001      	movhi	r0, #1
    31ba:	2000      	movls	r0, #0
    31bc:	9900      	ldr	r1, [sp, #0]
    31be:	4408      	add	r0, r1
    31c0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    31c4:	6061      	str	r1, [r4, #4]
    31c6:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    31ca:	f88d 0000 	strb.w	r0, [sp]
    31ce:	f89d 0000 	ldrb.w	r0, [sp]
    31d2:	2800      	cmp	r0, #0
    31d4:	bf04      	itt	eq
    31d6:	b003      	addeq	sp, #12
    31d8:	bd30      	popeq	{r4, r5, pc}
    31da:	2005      	movs	r0, #5
    31dc:	f000 fbec 	bl	39b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    31e0:	2800      	cmp	r0, #0
    31e2:	bf1c      	itt	ne
    31e4:	b003      	addne	sp, #12
    31e6:	bd30      	popne	{r4, r5, pc}
    31e8:	f640 21a8 	movw	r1, #2728	; 0xaa8
    31ec:	2070      	movs	r0, #112	; 0x70
    31ee:	f001 f955 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31f2:	0000      	.short	0x0000
    31f4:	2000112c 	.word	0x2000112c
    31f8:	20000d2c 	.word	0x20000d2c
    31fc:	1e847fff 	.word	0x1e847fff
    3200:	0f424000 	.word	0x0f424000
    3204:	f0bdc000 	.word	0xf0bdc000
    3208:	1e848000 	.word	0x1e848000

0000320c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    320c:	b570      	push	{r4, r5, r6, lr}
    320e:	4c1c      	ldr	r4, [pc, #112]	; (3280 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    3210:	2120      	movs	r1, #32
    3212:	f884 1020 	strb.w	r1, [r4, #32]
    3216:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    321a:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    321e:	2000      	movs	r0, #0
    3220:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    3224:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
    3228:	1e42      	subs	r2, r0, #1
    322a:	e9c4 0200 	strd	r0, r2, [r4]
    322e:	77a0      	strb	r0, [r4, #30]
    3230:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    3234:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    3238:	7720      	strb	r0, [r4, #28]
    323a:	7760      	strb	r0, [r4, #29]
    323c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    3240:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    3244:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    3248:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    324c:	2210      	movs	r2, #16
    324e:	7088      	strb	r0, [r1, #2]
    3250:	f801 0f04 	strb.w	r0, [r1, #4]!
    3254:	1e52      	subs	r2, r2, #1
    3256:	d1fa      	bne.n	324e <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x42>
    3258:	f000 fdb8 	bl	3dcc <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    325c:	4d09      	ldr	r5, [pc, #36]	; (3284 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    325e:	2601      	movs	r6, #1
    3260:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    3264:	20ff      	movs	r0, #255	; 0xff
    3266:	7028      	strb	r0, [r5, #0]
    3268:	4807      	ldr	r0, [pc, #28]	; (3288 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    326a:	f001 f9cd 	bl	4608 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    326e:	7068      	strb	r0, [r5, #1]
    3270:	f001 fa28 	bl	46c4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    3274:	60a8      	str	r0, [r5, #8]
    3276:	f000 fd33 	bl	3ce0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    327a:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    327e:	bd70      	pop	{r4, r5, r6, pc}
    3280:	2000112c 	.word	0x2000112c
    3284:	2000003c 	.word	0x2000003c
    3288:	00001bed 	.word	0x00001bed

0000328c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    328c:	b500      	push	{lr}
    328e:	b083      	sub	sp, #12
    3290:	4668      	mov	r0, sp
    3292:	f000 f9eb 	bl	366c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    3296:	9800      	ldr	r0, [sp, #0]
    3298:	f009 fcc6 	bl	cc28 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    329c:	9a01      	ldr	r2, [sp, #4]
    329e:	4b03      	ldr	r3, [pc, #12]	; (32ac <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    32a0:	2100      	movs	r1, #0
    32a2:	fbe2 0103 	umlal	r0, r1, r2, r3
    32a6:	b003      	add	sp, #12
    32a8:	bd00      	pop	{pc}
    32aa:	0000      	.short	0x0000
    32ac:	1e848000 	.word	0x1e848000

000032b0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    32b0:	b570      	push	{r4, r5, r6, lr}
    32b2:	4606      	mov	r6, r0
    32b4:	b082      	sub	sp, #8
    32b6:	461d      	mov	r5, r3
    32b8:	4610      	mov	r0, r2
    32ba:	f009 fcb5 	bl	cc28 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    32be:	4604      	mov	r4, r0
    32c0:	4668      	mov	r0, sp
    32c2:	f000 f9d3 	bl	366c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    32c6:	4920      	ldr	r1, [pc, #128]	; (3348 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x98>)
    32c8:	9801      	ldr	r0, [sp, #4]
    32ca:	fba0 0201 	umull	r0, r2, r0, r1
    32ce:	1a30      	subs	r0, r6, r0
    32d0:	bf44      	itt	mi
    32d2:	f5a0 00f7 	submi.w	r0, r0, #8093696	; 0x7b8000
    32d6:	f110 50f8 	addsmi.w	r0, r0, #520093696	; 0x1f000000
    32da:	d504      	bpl.n	32e6 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x36>
    32dc:	f640 31c8 	movw	r1, #3016	; 0xbc8
    32e0:	2070      	movs	r0, #112	; 0x70
    32e2:	f001 f8db 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32e6:	4288      	cmp	r0, r1
    32e8:	db04      	blt.n	32f4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x44>
    32ea:	f640 31c9 	movw	r1, #3017	; 0xbc9
    32ee:	2070      	movs	r0, #112	; 0x70
    32f0:	f001 f8d4 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32f4:	4a15      	ldr	r2, [pc, #84]	; (334c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>)
    32f6:	1a21      	subs	r1, r4, r0
    32f8:	2300      	movs	r3, #0
    32fa:	1a8a      	subs	r2, r1, r2
    32fc:	f173 0200 	sbcs.w	r2, r3, #0
    3300:	d318      	bcc.n	3334 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    3302:	f8df c048 	ldr.w	ip, [pc, #72]	; 334c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>
    3306:	1b02      	subs	r2, r0, r4
    3308:	ebb2 0c0c 	subs.w	ip, r2, ip
    330c:	f173 0300 	sbcs.w	r3, r3, #0
    3310:	d310      	bcc.n	3334 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    3312:	4b0f      	ldr	r3, [pc, #60]	; (3350 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0xa0>)
    3314:	428b      	cmp	r3, r1
    3316:	bf3e      	ittt	cc
    3318:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    331c:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    3320:	1901      	addcc	r1, r0, r4
    3322:	d307      	bcc.n	3334 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    3324:	4293      	cmp	r3, r2
    3326:	d20a      	bcs.n	333e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x8e>
    3328:	f5c4 2190 	rsb	r1, r4, #294912	; 0x48000
    332c:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    3330:	4408      	add	r0, r1
    3332:	4241      	negs	r1, r0
    3334:	f101 000f 	add.w	r0, r1, #15
    3338:	b002      	add	sp, #8
    333a:	1a28      	subs	r0, r5, r0
    333c:	bd70      	pop	{r4, r5, r6, pc}
    333e:	f640 21c2 	movw	r1, #2754	; 0xac2
    3342:	2070      	movs	r0, #112	; 0x70
    3344:	f001 f8aa 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3348:	1e848000 	.word	0x1e848000
    334c:	0f424000 	.word	0x0f424000
    3350:	1e847fff 	.word	0x1e847fff

00003354 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    3354:	0b41      	lsrs	r1, r0, #13
    3356:	f248 6237 	movw	r2, #34359	; 0x8637
    335a:	4351      	muls	r1, r2
    335c:	0c0a      	lsrs	r2, r1, #16
    335e:	4b09      	ldr	r3, [pc, #36]	; (3384 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    3360:	0251      	lsls	r1, r2, #9
    3362:	fb02 0203 	mla	r2, r2, r3, r0
    3366:	4808      	ldr	r0, [pc, #32]	; (3388 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    3368:	4350      	muls	r0, r2
    336a:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    336e:	306e      	adds	r0, #110	; 0x6e
    3370:	0d40      	lsrs	r0, r0, #21
    3372:	425b      	negs	r3, r3
    3374:	fb10 f303 	smulbb	r3, r0, r3
    3378:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    337c:	bf88      	it	hi
    337e:	1c49      	addhi	r1, r1, #1
    3380:	4408      	add	r0, r1
    3382:	4770      	bx	lr
    3384:	ffffc2f7 	.word	0xffffc2f7
    3388:	00010c6f 	.word	0x00010c6f

0000338c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    338c:	0b43      	lsrs	r3, r0, #13
    338e:	f248 6c37 	movw	ip, #34359	; 0x8637
    3392:	fb03 f30c 	mul.w	r3, r3, ip
    3396:	b430      	push	{r4, r5}
    3398:	0c1b      	lsrs	r3, r3, #16
    339a:	f8df c044 	ldr.w	ip, [pc, #68]	; 33e0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    339e:	025c      	lsls	r4, r3, #9
    33a0:	fb03 030c 	mla	r3, r3, ip, r0
    33a4:	480f      	ldr	r0, [pc, #60]	; (33e4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    33a6:	4358      	muls	r0, r3
    33a8:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    33ac:	eb04 000c 	add.w	r0, r4, ip
    33b0:	f643 5409 	movw	r4, #15625	; 0x3d09
    33b4:	fb1c f404 	smulbb	r4, ip, r4
    33b8:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    33bc:	f643 5508 	movw	r5, #15624	; 0x3d08
    33c0:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    33c4:	442c      	add	r4, r5
    33c6:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    33ca:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    33ce:	bf84      	itt	hi
    33d0:	f04f 0c00 	movhi.w	ip, #0
    33d4:	1c40      	addhi	r0, r0, #1
    33d6:	6008      	str	r0, [r1, #0]
    33d8:	f882 c000 	strb.w	ip, [r2]
    33dc:	bc30      	pop	{r4, r5}
    33de:	4770      	bx	lr
    33e0:	ffffc2f7 	.word	0xffffc2f7
    33e4:	00010c6f 	.word	0x00010c6f

000033e8 <MPSL_IRQ_RTC0_Handler>:
    33e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33ec:	4d3b      	ldr	r5, [pc, #236]	; (34dc <MPSL_IRQ_RTC0_Handler+0xf4>)
    33ee:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    33f2:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 34e0 <MPSL_IRQ_RTC0_Handler+0xf8>
    33f6:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    33fa:	f44f 6600 	mov.w	r6, #2048	; 0x800
    33fe:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    3402:	f04f 0400 	mov.w	r4, #0
    3406:	d019      	beq.n	343c <MPSL_IRQ_RTC0_Handler+0x54>
    3408:	4836      	ldr	r0, [pc, #216]	; (34e4 <MPSL_IRQ_RTC0_Handler+0xfc>)
    340a:	6800      	ldr	r0, [r0, #0]
    340c:	b1b0      	cbz	r0, 343c <MPSL_IRQ_RTC0_Handler+0x54>
    340e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    3412:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3416:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    341a:	f8d8 1000 	ldr.w	r1, [r8]
    341e:	1a40      	subs	r0, r0, r1
    3420:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3424:	2802      	cmp	r0, #2
    3426:	d302      	bcc.n	342e <MPSL_IRQ_RTC0_Handler+0x46>
    3428:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    342c:	d906      	bls.n	343c <MPSL_IRQ_RTC0_Handler+0x54>
    342e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3432:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3436:	2004      	movs	r0, #4
    3438:	f7fe fe7e 	bl	2138 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    343c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3440:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3444:	d01a      	beq.n	347c <MPSL_IRQ_RTC0_Handler+0x94>
    3446:	4828      	ldr	r0, [pc, #160]	; (34e8 <MPSL_IRQ_RTC0_Handler+0x100>)
    3448:	6800      	ldr	r0, [r0, #0]
    344a:	b1b8      	cbz	r0, 347c <MPSL_IRQ_RTC0_Handler+0x94>
    344c:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    3450:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3454:	4825      	ldr	r0, [pc, #148]	; (34ec <MPSL_IRQ_RTC0_Handler+0x104>)
    3456:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    345a:	f8d8 1000 	ldr.w	r1, [r8]
    345e:	1a40      	subs	r0, r0, r1
    3460:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3464:	2802      	cmp	r0, #2
    3466:	d302      	bcc.n	346e <MPSL_IRQ_RTC0_Handler+0x86>
    3468:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    346c:	d906      	bls.n	347c <MPSL_IRQ_RTC0_Handler+0x94>
    346e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3472:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3476:	2005      	movs	r0, #5
    3478:	f7fe fe5e 	bl	2138 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    347c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3480:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3484:	d01a      	beq.n	34bc <MPSL_IRQ_RTC0_Handler+0xd4>
    3486:	481a      	ldr	r0, [pc, #104]	; (34f0 <MPSL_IRQ_RTC0_Handler+0x108>)
    3488:	6800      	ldr	r0, [r0, #0]
    348a:	b1b8      	cbz	r0, 34bc <MPSL_IRQ_RTC0_Handler+0xd4>
    348c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    3490:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3494:	4817      	ldr	r0, [pc, #92]	; (34f4 <MPSL_IRQ_RTC0_Handler+0x10c>)
    3496:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    349a:	f8d8 1000 	ldr.w	r1, [r8]
    349e:	1a40      	subs	r0, r0, r1
    34a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    34a4:	2802      	cmp	r0, #2
    34a6:	d302      	bcc.n	34ae <MPSL_IRQ_RTC0_Handler+0xc6>
    34a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    34ac:	d906      	bls.n	34bc <MPSL_IRQ_RTC0_Handler+0xd4>
    34ae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    34b2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    34b6:	2006      	movs	r0, #6
    34b8:	f7fe fe3e 	bl	2138 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    34bc:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    34c0:	2800      	cmp	r0, #0
    34c2:	bf08      	it	eq
    34c4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    34c8:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    34cc:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    34d0:	4809      	ldr	r0, [pc, #36]	; (34f8 <MPSL_IRQ_RTC0_Handler+0x110>)
    34d2:	68c1      	ldr	r1, [r0, #12]
    34d4:	1c49      	adds	r1, r1, #1
    34d6:	60c1      	str	r1, [r0, #12]
    34d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34dc:	4000b000 	.word	0x4000b000
    34e0:	4000b504 	.word	0x4000b504
    34e4:	4000b140 	.word	0x4000b140
    34e8:	4000b144 	.word	0x4000b144
    34ec:	4000b004 	.word	0x4000b004
    34f0:	4000b148 	.word	0x4000b148
    34f4:	4000b008 	.word	0x4000b008
    34f8:	20000048 	.word	0x20000048

000034fc <MPSL_IRQ_TIMER0_Handler>:
    34fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3500:	4d38      	ldr	r5, [pc, #224]	; (35e4 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    3502:	7828      	ldrb	r0, [r5, #0]
    3504:	2804      	cmp	r0, #4
    3506:	d068      	beq.n	35da <MPSL_IRQ_TIMER0_Handler+0xde>
    3508:	1ca8      	adds	r0, r5, #2
    350a:	2201      	movs	r2, #1
    350c:	7801      	ldrb	r1, [r0, #0]
    350e:	b159      	cbz	r1, 3528 <MPSL_IRQ_TIMER0_Handler+0x2c>
    3510:	2901      	cmp	r1, #1
    3512:	bf08      	it	eq
    3514:	706a      	strbeq	r2, [r5, #1]
    3516:	d002      	beq.n	351e <MPSL_IRQ_TIMER0_Handler+0x22>
    3518:	7869      	ldrb	r1, [r5, #1]
    351a:	2900      	cmp	r1, #0
    351c:	d058      	beq.n	35d0 <MPSL_IRQ_TIMER0_Handler+0xd4>
    351e:	2102      	movs	r1, #2
    3520:	7001      	strb	r1, [r0, #0]
    3522:	7840      	ldrb	r0, [r0, #1]
    3524:	f000 fafe 	bl	3b24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3528:	4c2f      	ldr	r4, [pc, #188]	; (35e8 <MPSL_IRQ_TIMER0_Handler+0xec>)
    352a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    352e:	f04f 0800 	mov.w	r8, #0
    3532:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    3536:	f44f 7780 	mov.w	r7, #256	; 0x100
    353a:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    353e:	d00a      	beq.n	3556 <MPSL_IRQ_TIMER0_Handler+0x5a>
    3540:	482a      	ldr	r0, [pc, #168]	; (35ec <MPSL_IRQ_TIMER0_Handler+0xf0>)
    3542:	6800      	ldr	r0, [r0, #0]
    3544:	b138      	cbz	r0, 3556 <MPSL_IRQ_TIMER0_Handler+0x5a>
    3546:	2003      	movs	r0, #3
    3548:	f000 faec 	bl	3b24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    354c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3550:	2003      	movs	r0, #3
    3552:	f7fe fdf1 	bl	2138 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3556:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    355a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    355e:	d00a      	beq.n	3576 <MPSL_IRQ_TIMER0_Handler+0x7a>
    3560:	4823      	ldr	r0, [pc, #140]	; (35f0 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    3562:	6800      	ldr	r0, [r0, #0]
    3564:	b138      	cbz	r0, 3576 <MPSL_IRQ_TIMER0_Handler+0x7a>
    3566:	2002      	movs	r0, #2
    3568:	f000 fadc 	bl	3b24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    356c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3570:	2002      	movs	r0, #2
    3572:	f7fe fde1 	bl	2138 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3576:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    357a:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    357e:	d00a      	beq.n	3596 <MPSL_IRQ_TIMER0_Handler+0x9a>
    3580:	481c      	ldr	r0, [pc, #112]	; (35f4 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    3582:	6800      	ldr	r0, [r0, #0]
    3584:	b138      	cbz	r0, 3596 <MPSL_IRQ_TIMER0_Handler+0x9a>
    3586:	2001      	movs	r0, #1
    3588:	f000 facc 	bl	3b24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    358c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3590:	2001      	movs	r0, #1
    3592:	f7fe fdd1 	bl	2138 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3596:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    359a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    359e:	bf08      	it	eq
    35a0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    35a4:	4814      	ldr	r0, [pc, #80]	; (35f8 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    35a6:	6800      	ldr	r0, [r0, #0]
    35a8:	2800      	cmp	r0, #0
    35aa:	bf08      	it	eq
    35ac:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    35b0:	2000      	movs	r0, #0
    35b2:	f000 fab7 	bl	3b24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    35b6:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    35ba:	2004      	movs	r0, #4
    35bc:	7028      	strb	r0, [r5, #0]
    35be:	f8c5 8004 	str.w	r8, [r5, #4]
    35c2:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    35c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    35ca:	2000      	movs	r0, #0
    35cc:	f7fe bdb4 	b.w	2138 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    35d0:	f240 419f 	movw	r1, #1183	; 0x49f
    35d4:	206c      	movs	r0, #108	; 0x6c
    35d6:	f000 ff61 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    35de:	2007      	movs	r0, #7
    35e0:	f7fe bdaa 	b.w	2138 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    35e4:	20000048 	.word	0x20000048
    35e8:	40008000 	.word	0x40008000
    35ec:	4000814c 	.word	0x4000814c
    35f0:	40008148 	.word	0x40008148
    35f4:	40008144 	.word	0x40008144
    35f8:	40008140 	.word	0x40008140
    35fc:	2201      	movs	r2, #1
    35fe:	0211      	lsls	r1, r2, #8
    3600:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3604:	2000      	movs	r0, #0
    3606:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    360a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    360e:	f3bf 8f4f 	dsb	sy
    3612:	f3bf 8f6f 	isb	sy
    3616:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    361a:	490e      	ldr	r1, [pc, #56]	; (3654 <MPSL_IRQ_TIMER0_Handler+0x158>)
    361c:	f841 2f04 	str.w	r2, [r1, #4]!
    3620:	1e43      	subs	r3, r0, #1
    3622:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    3626:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    362a:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    362e:	4b0a      	ldr	r3, [pc, #40]	; (3658 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    3630:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3634:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3638:	1d1b      	adds	r3, r3, #4
    363a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    363e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3642:	1d1b      	adds	r3, r3, #4
    3644:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3648:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    364c:	60ca      	str	r2, [r1, #12]
    364e:	4903      	ldr	r1, [pc, #12]	; (365c <MPSL_IRQ_TIMER0_Handler+0x160>)
    3650:	7048      	strb	r0, [r1, #1]
    3652:	4770      	bx	lr
    3654:	40008000 	.word	0x40008000
    3658:	40008004 	.word	0x40008004
    365c:	20000048 	.word	0x20000048

00003660 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    3660:	4801      	ldr	r0, [pc, #4]	; (3668 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    3662:	6800      	ldr	r0, [r0, #0]
    3664:	4770      	bx	lr
    3666:	0000      	.short	0x0000
    3668:	4000b504 	.word	0x4000b504

0000366c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    366c:	b430      	push	{r4, r5}
    366e:	f3ef 8c10 	mrs	ip, PRIMASK
    3672:	b672      	cpsid	i
    3674:	2500      	movs	r5, #0
    3676:	4b0b      	ldr	r3, [pc, #44]	; (36a4 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    3678:	4a0b      	ldr	r2, [pc, #44]	; (36a8 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    367a:	bf00      	nop
    367c:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    3680:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    3684:	b12c      	cbz	r4, 3692 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    3686:	68d1      	ldr	r1, [r2, #12]
    3688:	1c49      	adds	r1, r1, #1
    368a:	60d1      	str	r1, [r2, #12]
    368c:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    3690:	e7f4      	b.n	367c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    3692:	68d2      	ldr	r2, [r2, #12]
    3694:	f1bc 0f00 	cmp.w	ip, #0
    3698:	d100      	bne.n	369c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    369a:	b662      	cpsie	i
    369c:	e9c0 1200 	strd	r1, r2, [r0]
    36a0:	bc30      	pop	{r4, r5}
    36a2:	4770      	bx	lr
    36a4:	4000b000 	.word	0x4000b000
    36a8:	20000048 	.word	0x20000048

000036ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    36ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    36b0:	4e46      	ldr	r6, [pc, #280]	; (37cc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    36b2:	4605      	mov	r5, r0
    36b4:	1eb7      	subs	r7, r6, #2
    36b6:	7833      	ldrb	r3, [r6, #0]
    36b8:	68b9      	ldr	r1, [r7, #8]
    36ba:	2b01      	cmp	r3, #1
    36bc:	bf04      	itt	eq
    36be:	42a9      	cmpeq	r1, r5
    36c0:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    36c4:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    36c8:	4a41      	ldr	r2, [pc, #260]	; (37d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    36ca:	6010      	str	r0, [r2, #0]
    36cc:	4a42      	ldr	r2, [pc, #264]	; (37d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    36ce:	4841      	ldr	r0, [pc, #260]	; (37d4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    36d0:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    36d4:	f102 0c04 	add.w	ip, r2, #4
    36d8:	f04f 0400 	mov.w	r4, #0
    36dc:	2b00      	cmp	r3, #0
    36de:	d062      	beq.n	37a6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    36e0:	483e      	ldr	r0, [pc, #248]	; (37dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    36e2:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    36e6:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    36ea:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    36ee:	bf00      	nop
    36f0:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
    36f4:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    36f8:	f04f 0801 	mov.w	r8, #1
    36fc:	2800      	cmp	r0, #0
    36fe:	bf01      	itttt	eq
    3700:	f8d2 0104 	ldreq.w	r0, [r2, #260]	; 0x104
    3704:	2800      	cmpeq	r0, #0
    3706:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    370a:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    370e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3712:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    3716:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    371a:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    371e:	4830      	ldr	r0, [pc, #192]	; (37e0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    3720:	f8d0 c000 	ldr.w	ip, [r0]
    3724:	eba5 0c0c 	sub.w	ip, r5, ip
    3728:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    372c:	f1bc 0f02 	cmp.w	ip, #2
    3730:	d344      	bcc.n	37bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    3732:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    3736:	d841      	bhi.n	37bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    3738:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    373c:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    3740:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    3744:	b12b      	cbz	r3, 3752 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa6>
    3746:	6802      	ldr	r2, [r0, #0]
    3748:	1a8a      	subs	r2, r1, r2
    374a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    374e:	2a02      	cmp	r2, #2
    3750:	d3f9      	bcc.n	3746 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9a>
    3752:	f8c7 8004 	str.w	r8, [r7, #4]
    3756:	703c      	strb	r4, [r7, #0]
    3758:	f7ff ff50 	bl	35fc <MPSL_IRQ_TIMER0_Handler+0x100>
    375c:	4821      	ldr	r0, [pc, #132]	; (37e4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    375e:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    3762:	f364 0101 	bfi	r1, r4, #0, #2
    3766:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    376a:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    376e:	2102      	movs	r1, #2
    3770:	f361 0201 	bfi	r2, r1, #0, #2
    3774:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    3778:	2104      	movs	r1, #4
    377a:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    377e:	f8c0 800c 	str.w	r8, [r0, #12]
    3782:	6879      	ldr	r1, [r7, #4]
    3784:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3788:	1580      	asrs	r0, r0, #22
    378a:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    378e:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    3792:	4915      	ldr	r1, [pc, #84]	; (37e8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    3794:	05c0      	lsls	r0, r0, #23
    3796:	6008      	str	r0, [r1, #0]
    3798:	2004      	movs	r0, #4
    379a:	60bd      	str	r5, [r7, #8]
    379c:	7070      	strb	r0, [r6, #1]
    379e:	f886 8000 	strb.w	r8, [r6]
    37a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    37a6:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    37aa:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    37ae:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    37b2:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    37b6:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    37ba:	e799      	b.n	36f0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x44>
    37bc:	2000      	movs	r0, #0
    37be:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    37c2:	f240 2193 	movw	r1, #659	; 0x293
    37c6:	206c      	movs	r0, #108	; 0x6c
    37c8:	f000 fe68 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    37cc:	2000004a 	.word	0x2000004a
    37d0:	4001f508 	.word	0x4001f508
    37d4:	fffbfffd 	.word	0xfffbfffd
    37d8:	4000b000 	.word	0x4000b000
    37dc:	fffafffd 	.word	0xfffafffd
    37e0:	4000b504 	.word	0x4000b504
    37e4:	40008000 	.word	0x40008000
    37e8:	4001f504 	.word	0x4001f504

000037ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    37ec:	b570      	push	{r4, r5, r6, lr}
    37ee:	4c2a      	ldr	r4, [pc, #168]	; (3898 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    37f0:	68a1      	ldr	r1, [r4, #8]
    37f2:	4281      	cmp	r1, r0
    37f4:	bf14      	ite	ne
    37f6:	2201      	movne	r2, #1
    37f8:	2200      	moveq	r2, #0
    37fa:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 389c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    37fe:	f89c 5000 	ldrb.w	r5, [ip]
    3802:	2d02      	cmp	r5, #2
    3804:	d002      	beq.n	380c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    3806:	2a00      	cmp	r2, #0
    3808:	d034      	beq.n	3874 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    380a:	e002      	b.n	3812 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    380c:	2a00      	cmp	r2, #0
    380e:	bf08      	it	eq
    3810:	bd70      	popeq	{r4, r5, r6, pc}
    3812:	7862      	ldrb	r2, [r4, #1]
    3814:	b39a      	cbz	r2, 387e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    3816:	4b22      	ldr	r3, [pc, #136]	; (38a0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    3818:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    381c:	601a      	str	r2, [r3, #0]
    381e:	4b21      	ldr	r3, [pc, #132]	; (38a4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    3820:	1392      	asrs	r2, r2, #14
    3822:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    3826:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    382a:	2200      	movs	r2, #0
    382c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    3830:	4a1d      	ldr	r2, [pc, #116]	; (38a8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3832:	6816      	ldr	r6, [r2, #0]
    3834:	1b86      	subs	r6, r0, r6
    3836:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    383a:	2e02      	cmp	r6, #2
    383c:	d324      	bcc.n	3888 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    383e:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    3842:	d821      	bhi.n	3888 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3844:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3848:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    384c:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    3850:	b12d      	cbz	r5, 385e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    3852:	6813      	ldr	r3, [r2, #0]
    3854:	1acb      	subs	r3, r1, r3
    3856:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    385a:	2b02      	cmp	r3, #2
    385c:	d3f9      	bcc.n	3852 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    385e:	4b13      	ldr	r3, [pc, #76]	; (38ac <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    3860:	2102      	movs	r1, #2
    3862:	074a      	lsls	r2, r1, #29
    3864:	601a      	str	r2, [r3, #0]
    3866:	60a0      	str	r0, [r4, #8]
    3868:	2004      	movs	r0, #4
    386a:	f88c 0001 	strb.w	r0, [ip, #1]
    386e:	f88c 1000 	strb.w	r1, [ip]
    3872:	bd70      	pop	{r4, r5, r6, pc}
    3874:	f240 21a1 	movw	r1, #673	; 0x2a1
    3878:	206c      	movs	r0, #108	; 0x6c
    387a:	f000 fe0f 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    387e:	f240 21a5 	movw	r1, #677	; 0x2a5
    3882:	206c      	movs	r0, #108	; 0x6c
    3884:	f000 fe0a 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3888:	2000      	movs	r0, #0
    388a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    388e:	f240 21b1 	movw	r1, #689	; 0x2b1
    3892:	206c      	movs	r0, #108	; 0x6c
    3894:	f000 fe02 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3898:	20000048 	.word	0x20000048
    389c:	2000004a 	.word	0x2000004a
    38a0:	4001f508 	.word	0x4001f508
    38a4:	4000b000 	.word	0x4000b000
    38a8:	4000b504 	.word	0x4000b504
    38ac:	4001f504 	.word	0x4001f504

000038b0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    38b0:	4801      	ldr	r0, [pc, #4]	; (38b8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    38b2:	6880      	ldr	r0, [r0, #8]
    38b4:	4770      	bx	lr
    38b6:	0000      	.short	0x0000
    38b8:	20000048 	.word	0x20000048

000038bc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    38bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38c0:	4836      	ldr	r0, [pc, #216]	; (399c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    38c2:	4a35      	ldr	r2, [pc, #212]	; (3998 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    38c4:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    38c8:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 39a0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    38cc:	1d03      	adds	r3, r0, #4
    38ce:	2100      	movs	r1, #0
    38d0:	f89c 4000 	ldrb.w	r4, [ip]
    38d4:	b184      	cbz	r4, 38f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    38d6:	4a33      	ldr	r2, [pc, #204]	; (39a4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    38d8:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    38dc:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    38e0:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    38e4:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    38e8:	2301      	movs	r3, #1
    38ea:	2a00      	cmp	r2, #0
    38ec:	bf04      	itt	eq
    38ee:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    38f2:	2800      	cmpeq	r0, #0
    38f4:	d111      	bne.n	391a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    38f6:	e00a      	b.n	390e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    38f8:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    38fc:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3900:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3904:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3908:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    390c:	e7ea      	b.n	38e4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    390e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3912:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3916:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    391a:	2c02      	cmp	r4, #2
    391c:	d004      	beq.n	3928 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    391e:	f240 21bd 	movw	r1, #701	; 0x2bd
    3922:	206c      	movs	r0, #108	; 0x6c
    3924:	f000 fdba 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3928:	4e1f      	ldr	r6, [pc, #124]	; (39a8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    392a:	6830      	ldr	r0, [r6, #0]
    392c:	4c1f      	ldr	r4, [pc, #124]	; (39ac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    392e:	1cc0      	adds	r0, r0, #3
    3930:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3934:	68a2      	ldr	r2, [r4, #8]
    3936:	4d1e      	ldr	r5, [pc, #120]	; (39b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    3938:	4290      	cmp	r0, r2
    393a:	d00b      	beq.n	3954 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    393c:	6837      	ldr	r7, [r6, #0]
    393e:	1bd7      	subs	r7, r2, r7
    3940:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    3944:	2f04      	cmp	r7, #4
    3946:	d305      	bcc.n	3954 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    3948:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    394c:	d802      	bhi.n	3954 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    394e:	f7ff fead 	bl	36ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3952:	e01b      	b.n	398c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    3954:	6830      	ldr	r0, [r6, #0]
    3956:	1a10      	subs	r0, r2, r0
    3958:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    395c:	2802      	cmp	r0, #2
    395e:	d313      	bcc.n	3988 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    3960:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3964:	d810      	bhi.n	3988 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    3966:	4a13      	ldr	r2, [pc, #76]	; (39b4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    3968:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    396c:	6010      	str	r0, [r2, #0]
    396e:	6063      	str	r3, [r4, #4]
    3970:	7021      	strb	r1, [r4, #0]
    3972:	606b      	str	r3, [r5, #4]
    3974:	60eb      	str	r3, [r5, #12]
    3976:	0040      	lsls	r0, r0, #1
    3978:	1f11      	subs	r1, r2, #4
    397a:	6008      	str	r0, [r1, #0]
    397c:	2004      	movs	r0, #4
    397e:	f88c 0001 	strb.w	r0, [ip, #1]
    3982:	f88c 3000 	strb.w	r3, [ip]
    3986:	e001      	b.n	398c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    3988:	6063      	str	r3, [r4, #4]
    398a:	7021      	strb	r1, [r4, #0]
    398c:	6860      	ldr	r0, [r4, #4]
    398e:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3996:	0000      	.short	0x0000
    3998:	fffbfffd 	.word	0xfffbfffd
    399c:	4000b000 	.word	0x4000b000
    39a0:	2000004a 	.word	0x2000004a
    39a4:	fffafffd 	.word	0xfffafffd
    39a8:	4000b504 	.word	0x4000b504
    39ac:	20000048 	.word	0x20000048
    39b0:	40008000 	.word	0x40008000
    39b4:	4001f508 	.word	0x4001f508

000039b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    39b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39bc:	4a54      	ldr	r2, [pc, #336]	; (3b10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x78>)
    39be:	2500      	movs	r5, #0
    39c0:	2401      	movs	r4, #1
    39c2:	f892 c000 	ldrb.w	ip, [r2]
    39c6:	7853      	ldrb	r3, [r2, #1]
    39c8:	f44f 76a0 	mov.w	r6, #320	; 0x140
    39cc:	2807      	cmp	r0, #7
    39ce:	d27d      	bcs.n	3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>
    39d0:	e8df f000 	tbb	[pc, r0]
    39d4:	04040404 	.word	0x04040404
    39d8:	00585858 	.word	0x00585858
    39dc:	4a4d      	ldr	r2, [pc, #308]	; (3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>)
    39de:	6897      	ldr	r7, [r2, #8]
    39e0:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    39e4:	bf04      	itt	eq
    39e6:	7852      	ldrbeq	r2, [r2, #1]
    39e8:	2a00      	cmpeq	r2, #0
    39ea:	d003      	beq.n	39f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    39ec:	f1bc 0f02 	cmp.w	ip, #2
    39f0:	d005      	beq.n	39fe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    39f2:	e026      	b.n	3a42 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    39f4:	f240 314d 	movw	r1, #845	; 0x34d
    39f8:	206c      	movs	r0, #108	; 0x6c
    39fa:	f000 fd4f 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    39fe:	1f1a      	subs	r2, r3, #4
    3a00:	b2d2      	uxtb	r2, r2
    3a02:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    3a06:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    3a0a:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    3a0e:	2200      	movs	r2, #0
    3a10:	f1bc 0f01 	cmp.w	ip, #1
    3a14:	d003      	beq.n	3a1e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    3a16:	f1bc 0f02 	cmp.w	ip, #2
    3a1a:	d008      	beq.n	3a2e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    3a1c:	e00e      	b.n	3a3c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    3a1e:	2b04      	cmp	r3, #4
    3a20:	bf24      	itt	cs
    3a22:	6837      	ldrcs	r7, [r6, #0]
    3a24:	2f00      	cmpcs	r7, #0
    3a26:	bf08      	it	eq
    3a28:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    3a2c:	e006      	b.n	3a3c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    3a2e:	2b04      	cmp	r3, #4
    3a30:	bf24      	itt	cs
    3a32:	6837      	ldrcs	r7, [r6, #0]
    3a34:	2f00      	cmpcs	r7, #0
    3a36:	bf08      	it	eq
    3a38:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    3a3c:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    3a40:	d1e5      	bne.n	3a0e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    3a42:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>
    3a46:	f100 0210 	add.w	r2, r0, #16
    3a4a:	fa04 f202 	lsl.w	r2, r4, r2
    3a4e:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    3a52:	f04f 0340 	mov.w	r3, #64	; 0x40
    3a56:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3a5a:	b2db      	uxtb	r3, r3
    3a5c:	4463      	add	r3, ip
    3a5e:	601c      	str	r4, [r3, #0]
    3a60:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    3a64:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    3a68:	eba1 0303 	sub.w	r3, r1, r3
    3a6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3a70:	2b03      	cmp	r3, #3
    3a72:	bf26      	itte	cs
    3a74:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    3a78:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    3a7c:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    3a80:	d237      	bcs.n	3af2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5a>
    3a82:	e03c      	b.n	3afe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x66>
    3a84:	f1bc 0f00 	cmp.w	ip, #0
    3a88:	d006      	beq.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    3a8a:	4283      	cmp	r3, r0
    3a8c:	d104      	bne.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    3a8e:	f240 316d 	movw	r1, #877	; 0x36d
    3a92:	206c      	movs	r0, #108	; 0x6c
    3a94:	f000 fd02 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a98:	1f02      	subs	r2, r0, #4
    3a9a:	b2d3      	uxtb	r3, r2
    3a9c:	2b03      	cmp	r3, #3
    3a9e:	d304      	bcc.n	3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
    3aa0:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    3aa4:	206c      	movs	r0, #108	; 0x6c
    3aa6:	f000 fcf9 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3aaa:	f8df c070 	ldr.w	ip, [pc, #112]	; 3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>
    3aae:	f103 0210 	add.w	r2, r3, #16
    3ab2:	fa04 f202 	lsl.w	r2, r4, r2
    3ab6:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    3aba:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    3abe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3ac2:	f84c 5003 	str.w	r5, [ip, r3]
    3ac6:	4b16      	ldr	r3, [pc, #88]	; (3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>)
    3ac8:	681b      	ldr	r3, [r3, #0]
    3aca:	e000      	b.n	3ace <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36>
    3acc:	e01a      	b.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
    3ace:	1f00      	subs	r0, r0, #4
    3ad0:	1acb      	subs	r3, r1, r3
    3ad2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3ad6:	b2c0      	uxtb	r0, r0
    3ad8:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    3adc:	2b02      	cmp	r3, #2
    3ade:	d30b      	bcc.n	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
    3ae0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    3ae4:	d808      	bhi.n	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
    3ae6:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3aea:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    3aee:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    3af2:	2001      	movs	r0, #1
    3af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3af8:	2100      	movs	r1, #0
    3afa:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3afe:	2000      	movs	r0, #0
    3b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b04:	f240 3171 	movw	r1, #881	; 0x371
    3b08:	206c      	movs	r0, #108	; 0x6c
    3b0a:	f000 fcc7 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b0e:	0000      	.short	0x0000
    3b10:	2000004a 	.word	0x2000004a
    3b14:	20000048 	.word	0x20000048
    3b18:	40008000 	.word	0x40008000
    3b1c:	4000b000 	.word	0x4000b000
    3b20:	4000b504 	.word	0x4000b504

00003b24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3b28:	2601      	movs	r6, #1
    3b2a:	2700      	movs	r7, #0
    3b2c:	f44f 78a0 	mov.w	r8, #320	; 0x140
    3b30:	2807      	cmp	r0, #7
    3b32:	d251      	bcs.n	3bd8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    3b34:	e8df f000 	tbb	[pc, r0]
    3b38:	04040404 	.word	0x04040404
    3b3c:	00191919 	.word	0x00191919
    3b40:	f100 0110 	add.w	r1, r0, #16
    3b44:	fa06 f201 	lsl.w	r2, r6, r1
    3b48:	4926      	ldr	r1, [pc, #152]	; (3be4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    3b4a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3b4e:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    3b52:	2200      	movs	r2, #0
    3b54:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3b58:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    3b5c:	508f      	str	r7, [r1, r2]
    3b5e:	4922      	ldr	r1, [pc, #136]	; (3be8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    3b60:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3b64:	9000      	str	r0, [sp, #0]
    3b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3b6a:	4d20      	ldr	r5, [pc, #128]	; (3bec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    3b6c:	1f01      	subs	r1, r0, #4
    3b6e:	b2cc      	uxtb	r4, r1
    3b70:	7829      	ldrb	r1, [r5, #0]
    3b72:	b179      	cbz	r1, 3b94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    3b74:	786a      	ldrb	r2, [r5, #1]
    3b76:	4282      	cmp	r2, r0
    3b78:	d10c      	bne.n	3b94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    3b7a:	4a1d      	ldr	r2, [pc, #116]	; (3bf0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    3b7c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3b80:	6010      	str	r0, [r2, #0]
    3b82:	2901      	cmp	r1, #1
    3b84:	bf08      	it	eq
    3b86:	f7ff fd39 	bleq	35fc <MPSL_IRQ_TIMER0_Handler+0x100>
    3b8a:	702f      	strb	r7, [r5, #0]
    3b8c:	4919      	ldr	r1, [pc, #100]	; (3bf4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    3b8e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3b92:	6088      	str	r0, [r1, #8]
    3b94:	4918      	ldr	r1, [pc, #96]	; (3bf8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    3b96:	f104 0010 	add.w	r0, r4, #16
    3b9a:	fa06 f000 	lsl.w	r0, r6, r0
    3b9e:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    3ba2:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    3ba6:	00a0      	lsls	r0, r4, #2
    3ba8:	4408      	add	r0, r1
    3baa:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3bae:	4a13      	ldr	r2, [pc, #76]	; (3bfc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    3bb0:	6812      	ldr	r2, [r2, #0]
    3bb2:	1a80      	subs	r0, r0, r2
    3bb4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3bb8:	2802      	cmp	r0, #2
    3bba:	d307      	bcc.n	3bcc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    3bbc:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    3bc0:	2000      	movs	r0, #0
    3bc2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3bc6:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    3bca:	500f      	str	r7, [r1, r0]
    3bcc:	480c      	ldr	r0, [pc, #48]	; (3c00 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    3bce:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    3bd2:	9000      	str	r0, [sp, #0]
    3bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3bd8:	f240 31f5 	movw	r1, #1013	; 0x3f5
    3bdc:	206c      	movs	r0, #108	; 0x6c
    3bde:	f000 fc5d 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3be2:	0000      	.short	0x0000
    3be4:	40008000 	.word	0x40008000
    3be8:	40008140 	.word	0x40008140
    3bec:	2000004a 	.word	0x2000004a
    3bf0:	4001f508 	.word	0x4001f508
    3bf4:	20000048 	.word	0x20000048
    3bf8:	4000b000 	.word	0x4000b000
    3bfc:	4000b504 	.word	0x4000b504
    3c00:	4000b140 	.word	0x4000b140

00003c04 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3c04:	4825      	ldr	r0, [pc, #148]	; (3c9c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    3c06:	4a24      	ldr	r2, [pc, #144]	; (3c98 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    3c08:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    3c0c:	4924      	ldr	r1, [pc, #144]	; (3ca0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    3c0e:	1d03      	adds	r3, r0, #4
    3c10:	f891 c000 	ldrb.w	ip, [r1]
    3c14:	2100      	movs	r1, #0
    3c16:	f1bc 0f00 	cmp.w	ip, #0
    3c1a:	d010      	beq.n	3c3e <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    3c1c:	4a21      	ldr	r2, [pc, #132]	; (3ca4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    3c1e:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3c22:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3c26:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3c2a:	bf00      	nop
    3c2c:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    3c30:	2a00      	cmp	r2, #0
    3c32:	bf04      	itt	eq
    3c34:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    3c38:	2800      	cmpeq	r0, #0
    3c3a:	d111      	bne.n	3c60 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    3c3c:	e00a      	b.n	3c54 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    3c3e:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3c42:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3c46:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3c4a:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3c4e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3c52:	e7eb      	b.n	3c2c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    3c54:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3c58:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3c5c:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    3c60:	4811      	ldr	r0, [pc, #68]	; (3ca8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    3c62:	f04f 32ff 	mov.w	r2, #4294967295
    3c66:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    3c6a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3c6e:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3c72:	f100 0204 	add.w	r2, r0, #4
    3c76:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3c7a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3c7e:	f102 0204 	add.w	r2, r2, #4
    3c82:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3c86:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    3c8a:	f102 0204 	add.w	r2, r2, #4
    3c8e:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3c92:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    3c96:	4770      	bx	lr
    3c98:	fffbfffd 	.word	0xfffbfffd
    3c9c:	4000b000 	.word	0x4000b000
    3ca0:	2000004a 	.word	0x2000004a
    3ca4:	fffafffd 	.word	0xfffafffd
    3ca8:	40008000 	.word	0x40008000

00003cac <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    3cac:	b510      	push	{r4, lr}
    3cae:	2807      	cmp	r0, #7
    3cb0:	d20d      	bcs.n	3cce <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    3cb2:	e8df f000 	tbb	[pc, r0]
    3cb6:	0404      	.short	0x0404
    3cb8:	06060404 	.word	0x06060404
    3cbc:	0006      	.short	0x0006
    3cbe:	4906      	ldr	r1, [pc, #24]	; (3cd8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    3cc0:	e002      	b.n	3cc8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    3cc2:	1f00      	subs	r0, r0, #4
    3cc4:	4905      	ldr	r1, [pc, #20]	; (3cdc <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    3cc6:	b2c0      	uxtb	r0, r0
    3cc8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3ccc:	bd10      	pop	{r4, pc}
    3cce:	f240 3195 	movw	r1, #917	; 0x395
    3cd2:	206c      	movs	r0, #108	; 0x6c
    3cd4:	f000 fbe2 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3cd8:	40008140 	.word	0x40008140
    3cdc:	4000b140 	.word	0x4000b140

00003ce0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3ce0:	b570      	push	{r4, r5, r6, lr}
    3ce2:	481f      	ldr	r0, [pc, #124]	; (3d60 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    3ce4:	2400      	movs	r4, #0
    3ce6:	2104      	movs	r1, #4
    3ce8:	7004      	strb	r4, [r0, #0]
    3cea:	1e80      	subs	r0, r0, #2
    3cec:	7001      	strb	r1, [r0, #0]
    3cee:	0589      	lsls	r1, r1, #22
    3cf0:	60c4      	str	r4, [r0, #12]
    3cf2:	6081      	str	r1, [r0, #8]
    3cf4:	f7ff fc82 	bl	35fc <MPSL_IRQ_TIMER0_Handler+0x100>
    3cf8:	2501      	movs	r5, #1
    3cfa:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    3cfe:	02eb      	lsls	r3, r5, #11
    3d00:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    3d04:	f3bf 8f4f 	dsb	sy
    3d08:	f3bf 8f6f 	isb	sy
    3d0c:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    3d10:	4814      	ldr	r0, [pc, #80]	; (3d64 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    3d12:	6045      	str	r5, [r0, #4]
    3d14:	6085      	str	r5, [r0, #8]
    3d16:	4914      	ldr	r1, [pc, #80]	; (3d68 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    3d18:	680a      	ldr	r2, [r1, #0]
    3d1a:	2a00      	cmp	r2, #0
    3d1c:	d1fc      	bne.n	3d18 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    3d1e:	1e51      	subs	r1, r2, #1
    3d20:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3d24:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3d28:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3d2c:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3d30:	490e      	ldr	r1, [pc, #56]	; (3d6c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    3d32:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3d36:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    3d3a:	1d09      	adds	r1, r1, #4
    3d3c:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3d40:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    3d44:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    3d48:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    3d4c:	6005      	str	r5, [r0, #0]
    3d4e:	f44f 7182 	mov.w	r1, #260	; 0x104
    3d52:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    3d56:	2102      	movs	r1, #2
    3d58:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    3d5c:	bd70      	pop	{r4, r5, r6, pc}
    3d5e:	0000      	.short	0x0000
    3d60:	2000004a 	.word	0x2000004a
    3d64:	4000b000 	.word	0x4000b000
    3d68:	4000b504 	.word	0x4000b504
    3d6c:	4000b004 	.word	0x4000b004

00003d70 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    3d70:	4808      	ldr	r0, [pc, #32]	; (3d94 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    3d72:	f990 0000 	ldrsb.w	r0, [r0]
    3d76:	2800      	cmp	r0, #0
    3d78:	bfb8      	it	lt
    3d7a:	4770      	bxlt	lr
    3d7c:	f000 011f 	and.w	r1, r0, #31
    3d80:	2201      	movs	r2, #1
    3d82:	fa02 f101 	lsl.w	r1, r2, r1
    3d86:	0940      	lsrs	r0, r0, #5
    3d88:	0080      	lsls	r0, r0, #2
    3d8a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3d8e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3d92:	4770      	bx	lr
    3d94:	20000328 	.word	0x20000328

00003d98 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    3d98:	4803      	ldr	r0, [pc, #12]	; (3da8 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    3d9a:	7800      	ldrb	r0, [r0, #0]
    3d9c:	2803      	cmp	r0, #3
    3d9e:	bf0c      	ite	eq
    3da0:	2001      	moveq	r0, #1
    3da2:	2000      	movne	r0, #0
    3da4:	4770      	bx	lr
    3da6:	0000      	.short	0x0000
    3da8:	20000314 	.word	0x20000314

00003dac <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    3dac:	4801      	ldr	r0, [pc, #4]	; (3db4 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    3dae:	8840      	ldrh	r0, [r0, #2]
    3db0:	4770      	bx	lr
    3db2:	0000      	.short	0x0000
    3db4:	20000314 	.word	0x20000314

00003db8 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    3db8:	4803      	ldr	r0, [pc, #12]	; (3dc8 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    3dba:	7800      	ldrb	r0, [r0, #0]
    3dbc:	2802      	cmp	r0, #2
    3dbe:	bf16      	itet	ne
    3dc0:	2803      	cmpne	r0, #3
    3dc2:	2001      	moveq	r0, #1
    3dc4:	2000      	movne	r0, #0
    3dc6:	4770      	bx	lr
    3dc8:	20000314 	.word	0x20000314

00003dcc <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    3dcc:	4802      	ldr	r0, [pc, #8]	; (3dd8 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    3dce:	2100      	movs	r1, #0
    3dd0:	7001      	strb	r1, [r0, #0]
    3dd2:	8041      	strh	r1, [r0, #2]
    3dd4:	4770      	bx	lr
    3dd6:	0000      	.short	0x0000
    3dd8:	20000314 	.word	0x20000314

00003ddc <MPSL_IRQ_CLOCK_Handler>:
    3ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3de0:	4c16      	ldr	r4, [pc, #88]	; (3e3c <MPSL_IRQ_CLOCK_Handler+0x60>)
    3de2:	7a60      	ldrb	r0, [r4, #9]
    3de4:	2800      	cmp	r0, #0
    3de6:	d027      	beq.n	3e38 <MPSL_IRQ_CLOCK_Handler+0x5c>
    3de8:	f44f 7180 	mov.w	r1, #256	; 0x100
    3dec:	058d      	lsls	r5, r1, #22
    3dee:	4628      	mov	r0, r5
    3df0:	f008 ff69 	bl	ccc6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3df4:	4680      	mov	r8, r0
    3df6:	f44f 7182 	mov.w	r1, #260	; 0x104
    3dfa:	4628      	mov	r0, r5
    3dfc:	f008 ff63 	bl	ccc6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3e00:	2600      	movs	r6, #0
    3e02:	4607      	mov	r7, r0
    3e04:	f1b8 0f00 	cmp.w	r8, #0
    3e08:	d009      	beq.n	3e1e <MPSL_IRQ_CLOCK_Handler+0x42>
    3e0a:	2001      	movs	r0, #1
    3e0c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3e10:	7920      	ldrb	r0, [r4, #4]
    3e12:	b120      	cbz	r0, 3e1e <MPSL_IRQ_CLOCK_Handler+0x42>
    3e14:	7126      	strb	r6, [r4, #4]
    3e16:	69e0      	ldr	r0, [r4, #28]
    3e18:	b108      	cbz	r0, 3e1e <MPSL_IRQ_CLOCK_Handler+0x42>
    3e1a:	4780      	blx	r0
    3e1c:	61e6      	str	r6, [r4, #28]
    3e1e:	b137      	cbz	r7, 3e2e <MPSL_IRQ_CLOCK_Handler+0x52>
    3e20:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3e24:	2002      	movs	r0, #2
    3e26:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3e2a:	f000 fa6b 	bl	4304 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3e2e:	4640      	mov	r0, r8
    3e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3e34:	f000 b858 	b.w	3ee8 <MPSL_IRQ_CLOCK_Handler+0x10c>
    3e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e3c:	20000058 	.word	0x20000058
    3e40:	b510      	push	{r4, lr}
    3e42:	f008 ffea 	bl	ce1a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3e46:	b930      	cbnz	r0, 3e56 <MPSL_IRQ_CLOCK_Handler+0x7a>
    3e48:	f009 f808 	bl	ce5c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3e4c:	b918      	cbnz	r0, 3e56 <MPSL_IRQ_CLOCK_Handler+0x7a>
    3e4e:	f009 f83b 	bl	cec8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3e52:	2800      	cmp	r0, #0
    3e54:	d002      	beq.n	3e5c <MPSL_IRQ_CLOCK_Handler+0x80>
    3e56:	4902      	ldr	r1, [pc, #8]	; (3e60 <MPSL_IRQ_CLOCK_Handler+0x84>)
    3e58:	2002      	movs	r0, #2
    3e5a:	6008      	str	r0, [r1, #0]
    3e5c:	bd10      	pop	{r4, pc}
    3e5e:	0000      	.short	0x0000
    3e60:	40000c34 	.word	0x40000c34
    3e64:	b570      	push	{r4, r5, r6, lr}
    3e66:	f000 f991 	bl	418c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3e6a:	f000 fa9f 	bl	43ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3e6e:	4c09      	ldr	r4, [pc, #36]	; (3e94 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3e70:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3e74:	b130      	cbz	r0, 3e84 <MPSL_IRQ_CLOCK_Handler+0xa8>
    3e76:	f7ff ffe3 	bl	3e40 <MPSL_IRQ_CLOCK_Handler+0x64>
    3e7a:	2001      	movs	r0, #1
    3e7c:	6128      	str	r0, [r5, #16]
    3e7e:	2004      	movs	r0, #4
    3e80:	72a0      	strb	r0, [r4, #10]
    3e82:	e004      	b.n	3e8e <MPSL_IRQ_CLOCK_Handler+0xb2>
    3e84:	2003      	movs	r0, #3
    3e86:	72a0      	strb	r0, [r4, #10]
    3e88:	2001      	movs	r0, #1
    3e8a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3e8e:	2000      	movs	r0, #0
    3e90:	71e0      	strb	r0, [r4, #7]
    3e92:	bd70      	pop	{r4, r5, r6, pc}
    3e94:	20000058 	.word	0x20000058
    3e98:	b570      	push	{r4, r5, r6, lr}
    3e9a:	4c12      	ldr	r4, [pc, #72]	; (3ee4 <MPSL_IRQ_CLOCK_Handler+0x108>)
    3e9c:	79a0      	ldrb	r0, [r4, #6]
    3e9e:	b1e0      	cbz	r0, 3eda <MPSL_IRQ_CLOCK_Handler+0xfe>
    3ea0:	79e1      	ldrb	r1, [r4, #7]
    3ea2:	1e40      	subs	r0, r0, #1
    3ea4:	4281      	cmp	r1, r0
    3ea6:	da18      	bge.n	3eda <MPSL_IRQ_CLOCK_Handler+0xfe>
    3ea8:	f000 fa80 	bl	43ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3eac:	4605      	mov	r5, r0
    3eae:	f000 fb69 	bl	4584 <mpsl_temperature_get>
    3eb2:	79a1      	ldrb	r1, [r4, #6]
    3eb4:	2901      	cmp	r1, #1
    3eb6:	d902      	bls.n	3ebe <MPSL_IRQ_CLOCK_Handler+0xe2>
    3eb8:	79e1      	ldrb	r1, [r4, #7]
    3eba:	1c49      	adds	r1, r1, #1
    3ebc:	71e1      	strb	r1, [r4, #7]
    3ebe:	b10d      	cbz	r5, 3ec4 <MPSL_IRQ_CLOCK_Handler+0xe8>
    3ec0:	6961      	ldr	r1, [r4, #20]
    3ec2:	e000      	b.n	3ec6 <MPSL_IRQ_CLOCK_Handler+0xea>
    3ec4:	6921      	ldr	r1, [r4, #16]
    3ec6:	1a41      	subs	r1, r0, r1
    3ec8:	2902      	cmp	r1, #2
    3eca:	da02      	bge.n	3ed2 <MPSL_IRQ_CLOCK_Handler+0xf6>
    3ecc:	f111 0f02 	cmn.w	r1, #2
    3ed0:	dc07      	bgt.n	3ee2 <MPSL_IRQ_CLOCK_Handler+0x106>
    3ed2:	b10d      	cbz	r5, 3ed8 <MPSL_IRQ_CLOCK_Handler+0xfc>
    3ed4:	6160      	str	r0, [r4, #20]
    3ed6:	e000      	b.n	3eda <MPSL_IRQ_CLOCK_Handler+0xfe>
    3ed8:	6120      	str	r0, [r4, #16]
    3eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ede:	f7ff bfc1 	b.w	3e64 <MPSL_IRQ_CLOCK_Handler+0x88>
    3ee2:	bd70      	pop	{r4, r5, r6, pc}
    3ee4:	20000058 	.word	0x20000058
    3ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3eec:	4606      	mov	r6, r0
    3eee:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3ef2:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3ef6:	4628      	mov	r0, r5
    3ef8:	f008 fee5 	bl	ccc6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3efc:	4680      	mov	r8, r0
    3efe:	f44f 7188 	mov.w	r1, #272	; 0x110
    3f02:	4628      	mov	r0, r5
    3f04:	f008 fedf 	bl	ccc6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3f08:	4c27      	ldr	r4, [pc, #156]	; (3fa8 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    3f0a:	4682      	mov	sl, r0
    3f0c:	7827      	ldrb	r7, [r4, #0]
    3f0e:	f104 0008 	add.w	r0, r4, #8
    3f12:	f008 ff4c 	bl	cdae <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3f16:	b110      	cbz	r0, 3f1e <MPSL_IRQ_CLOCK_Handler+0x142>
    3f18:	f240 11b9 	movw	r1, #441	; 0x1b9
    3f1c:	e016      	b.n	3f4c <MPSL_IRQ_CLOCK_Handler+0x170>
    3f1e:	f04f 0901 	mov.w	r9, #1
    3f22:	b146      	cbz	r6, 3f36 <MPSL_IRQ_CLOCK_Handler+0x15a>
    3f24:	7aa0      	ldrb	r0, [r4, #10]
    3f26:	2803      	cmp	r0, #3
    3f28:	d105      	bne.n	3f36 <MPSL_IRQ_CLOCK_Handler+0x15a>
    3f2a:	2004      	movs	r0, #4
    3f2c:	72a0      	strb	r0, [r4, #10]
    3f2e:	f7ff ff87 	bl	3e40 <MPSL_IRQ_CLOCK_Handler+0x64>
    3f32:	f8c5 9010 	str.w	r9, [r5, #16]
    3f36:	2600      	movs	r6, #0
    3f38:	f1b8 0f00 	cmp.w	r8, #0
    3f3c:	d018      	beq.n	3f70 <MPSL_IRQ_CLOCK_Handler+0x194>
    3f3e:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    3f42:	7aa0      	ldrb	r0, [r4, #10]
    3f44:	2804      	cmp	r0, #4
    3f46:	d004      	beq.n	3f52 <MPSL_IRQ_CLOCK_Handler+0x176>
    3f48:	f240 11cb 	movw	r1, #459	; 0x1cb
    3f4c:	206d      	movs	r0, #109	; 0x6d
    3f4e:	f000 faa5 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3f52:	f008 ff62 	bl	ce1a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3f56:	b928      	cbnz	r0, 3f64 <MPSL_IRQ_CLOCK_Handler+0x188>
    3f58:	f008 ff80 	bl	ce5c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3f5c:	b910      	cbnz	r0, 3f64 <MPSL_IRQ_CLOCK_Handler+0x188>
    3f5e:	f008 ffb3 	bl	cec8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3f62:	b108      	cbz	r0, 3f68 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3f64:	4811      	ldr	r0, [pc, #68]	; (3fac <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3f66:	6006      	str	r6, [r0, #0]
    3f68:	2002      	movs	r0, #2
    3f6a:	72a0      	strb	r0, [r4, #10]
    3f6c:	f000 f8f2 	bl	4154 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3f70:	f1ba 0f00 	cmp.w	sl, #0
    3f74:	d008      	beq.n	3f88 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    3f76:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3f7a:	7aa0      	ldrb	r0, [r4, #10]
    3f7c:	2802      	cmp	r0, #2
    3f7e:	d101      	bne.n	3f84 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    3f80:	f7ff ff8a 	bl	3e98 <MPSL_IRQ_CLOCK_Handler+0xbc>
    3f84:	f8c5 9014 	str.w	r9, [r5, #20]
    3f88:	b13f      	cbz	r7, 3f9a <MPSL_IRQ_CLOCK_Handler+0x1be>
    3f8a:	7026      	strb	r6, [r4, #0]
    3f8c:	7aa0      	ldrb	r0, [r4, #10]
    3f8e:	2802      	cmp	r0, #2
    3f90:	d101      	bne.n	3f96 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    3f92:	f7ff ff67 	bl	3e64 <MPSL_IRQ_CLOCK_Handler+0x88>
    3f96:	f000 f8dd 	bl	4154 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3f9a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3f9e:	4802      	ldr	r0, [pc, #8]	; (3fa8 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    3fa0:	3008      	adds	r0, #8
    3fa2:	f008 bf1b 	b.w	cddc <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3fa6:	0000      	.short	0x0000
    3fa8:	20000058 	.word	0x20000058
    3fac:	40000c34 	.word	0x40000c34
    3fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3fb4:	4c5f      	ldr	r4, [pc, #380]	; (4134 <MPSL_IRQ_CLOCK_Handler+0x358>)
    3fb6:	2700      	movs	r7, #0
    3fb8:	4606      	mov	r6, r0
    3fba:	61a7      	str	r7, [r4, #24]
    3fbc:	7842      	ldrb	r2, [r0, #1]
    3fbe:	7881      	ldrb	r1, [r0, #2]
    3fc0:	7800      	ldrb	r0, [r0, #0]
    3fc2:	72e0      	strb	r0, [r4, #11]
    3fc4:	7162      	strb	r2, [r4, #5]
    3fc6:	71a1      	strb	r1, [r4, #6]
    3fc8:	71e7      	strb	r7, [r4, #7]
    3fca:	f04f 0801 	mov.w	r8, #1
    3fce:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3fd2:	2805      	cmp	r0, #5
    3fd4:	d225      	bcs.n	4022 <MPSL_IRQ_CLOCK_Handler+0x246>
    3fd6:	e8df f000 	tbb	[pc, r0]
    3fda:	0310      	.short	0x0310
    3fdc:	00222006 	.word	0x00222006
    3fe0:	f8c4 8018 	str.w	r8, [r4, #24]
    3fe4:	e009      	b.n	3ffa <MPSL_IRQ_CLOCK_Handler+0x21e>
    3fe6:	f000 f8d1 	bl	418c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3fea:	2101      	movs	r1, #1
    3fec:	4628      	mov	r0, r5
    3fee:	f008 fe6f 	bl	ccd0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3ff2:	2800      	cmp	r0, #0
    3ff4:	d0f9      	beq.n	3fea <MPSL_IRQ_CLOCK_Handler+0x20e>
    3ff6:	2002      	movs	r0, #2
    3ff8:	61a0      	str	r0, [r4, #24]
    3ffa:	f008 fe95 	bl	cd28 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3ffe:	b1b0      	cbz	r0, 402e <MPSL_IRQ_CLOCK_Handler+0x252>
    4000:	f000 f9ee 	bl	43e0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    4004:	7e21      	ldrb	r1, [r4, #24]
    4006:	f001 0103 	and.w	r1, r1, #3
    400a:	4288      	cmp	r0, r1
    400c:	d10f      	bne.n	402e <MPSL_IRQ_CLOCK_Handler+0x252>
    400e:	79b0      	ldrb	r0, [r6, #6]
    4010:	b150      	cbz	r0, 4028 <MPSL_IRQ_CLOCK_Handler+0x24c>
    4012:	2002      	movs	r0, #2
    4014:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4018:	e070      	b.n	40fc <MPSL_IRQ_CLOCK_Handler+0x320>
    401a:	4847      	ldr	r0, [pc, #284]	; (4138 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    401c:	e7ec      	b.n	3ff8 <MPSL_IRQ_CLOCK_Handler+0x21c>
    401e:	4847      	ldr	r0, [pc, #284]	; (413c <MPSL_IRQ_CLOCK_Handler+0x360>)
    4020:	e7ea      	b.n	3ff8 <MPSL_IRQ_CLOCK_Handler+0x21c>
    4022:	f240 313a 	movw	r1, #826	; 0x33a
    4026:	e04d      	b.n	40c4 <MPSL_IRQ_CLOCK_Handler+0x2e8>
    4028:	f000 f9ae 	bl	4388 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    402c:	e066      	b.n	40fc <MPSL_IRQ_CLOCK_Handler+0x320>
    402e:	f8c5 800c 	str.w	r8, [r5, #12]
    4032:	f44f 7a82 	mov.w	sl, #260	; 0x104
    4036:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    403a:	69a0      	ldr	r0, [r4, #24]
    403c:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    4040:	f008 fed7 	bl	cdf2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4044:	b940      	cbnz	r0, 4058 <MPSL_IRQ_CLOCK_Handler+0x27c>
    4046:	f008 fede 	bl	ce06 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    404a:	b928      	cbnz	r0, 4058 <MPSL_IRQ_CLOCK_Handler+0x27c>
    404c:	f008 fef2 	bl	ce34 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4050:	b910      	cbnz	r0, 4058 <MPSL_IRQ_CLOCK_Handler+0x27c>
    4052:	f008 ff03 	bl	ce5c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4056:	b138      	cbz	r0, 4068 <MPSL_IRQ_CLOCK_Handler+0x28c>
    4058:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    405c:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    4060:	4937      	ldr	r1, [pc, #220]	; (4140 <MPSL_IRQ_CLOCK_Handler+0x364>)
    4062:	f3c0 3042 	ubfx	r0, r0, #13, #3
    4066:	6008      	str	r0, [r1, #0]
    4068:	f008 fec3 	bl	cdf2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    406c:	b940      	cbnz	r0, 4080 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    406e:	f008 feca 	bl	ce06 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4072:	b928      	cbnz	r0, 4080 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    4074:	f008 fede 	bl	ce34 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4078:	b910      	cbnz	r0, 4080 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    407a:	f008 feef 	bl	ce5c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    407e:	b118      	cbz	r0, 4088 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    4080:	492f      	ldr	r1, [pc, #188]	; (4140 <MPSL_IRQ_CLOCK_Handler+0x364>)
    4082:	3110      	adds	r1, #16
    4084:	f8c1 8000 	str.w	r8, [r1]
    4088:	f8c5 8008 	str.w	r8, [r5, #8]
    408c:	2002      	movs	r0, #2
    408e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4092:	79b0      	ldrb	r0, [r6, #6]
    4094:	bb90      	cbnz	r0, 40fc <MPSL_IRQ_CLOCK_Handler+0x320>
    4096:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    409a:	f010 0f02 	tst.w	r0, #2
    409e:	d00f      	beq.n	40c0 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    40a0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 4144 <MPSL_IRQ_CLOCK_Handler+0x368>
    40a4:	f8d9 1000 	ldr.w	r1, [r9]
    40a8:	43c9      	mvns	r1, r1
    40aa:	f341 1100 	sbfx	r1, r1, #4, #1
    40ae:	f101 0801 	add.w	r8, r1, #1
    40b2:	f8d9 1000 	ldr.w	r1, [r9]
    40b6:	f041 0110 	orr.w	r1, r1, #16
    40ba:	f8c9 1000 	str.w	r1, [r9]
    40be:	e007      	b.n	40d0 <MPSL_IRQ_CLOCK_Handler+0x2f4>
    40c0:	f240 21fb 	movw	r1, #763	; 0x2fb
    40c4:	206d      	movs	r0, #109	; 0x6d
    40c6:	f000 f9e9 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    40ca:	bf00      	nop
    40cc:	f000 fb10 	bl	46f0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    40d0:	4651      	mov	r1, sl
    40d2:	4628      	mov	r0, r5
    40d4:	f008 fdf7 	bl	ccc6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    40d8:	2800      	cmp	r0, #0
    40da:	d0f7      	beq.n	40cc <MPSL_IRQ_CLOCK_Handler+0x2f0>
    40dc:	f000 f954 	bl	4388 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    40e0:	f1b8 0f00 	cmp.w	r8, #0
    40e4:	d105      	bne.n	40f2 <MPSL_IRQ_CLOCK_Handler+0x316>
    40e6:	f8d9 1000 	ldr.w	r1, [r9]
    40ea:	f021 0110 	bic.w	r1, r1, #16
    40ee:	f8c9 1000 	str.w	r1, [r9]
    40f2:	2002      	movs	r0, #2
    40f4:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    40f8:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    40fc:	79a0      	ldrb	r0, [r4, #6]
    40fe:	b170      	cbz	r0, 411e <MPSL_IRQ_CLOCK_Handler+0x342>
    4100:	7830      	ldrb	r0, [r6, #0]
    4102:	b960      	cbnz	r0, 411e <MPSL_IRQ_CLOCK_Handler+0x342>
    4104:	f000 f952 	bl	43ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4108:	4606      	mov	r6, r0
    410a:	f000 fa3b 	bl	4584 <mpsl_temperature_get>
    410e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4112:	b116      	cbz	r6, 411a <MPSL_IRQ_CLOCK_Handler+0x33e>
    4114:	e9c4 1004 	strd	r1, r0, [r4, #16]
    4118:	e001      	b.n	411e <MPSL_IRQ_CLOCK_Handler+0x342>
    411a:	e9c4 0104 	strd	r0, r1, [r4, #16]
    411e:	2101      	movs	r1, #1
    4120:	4628      	mov	r0, r5
    4122:	f008 fdd5 	bl	ccd0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4126:	b108      	cbz	r0, 412c <MPSL_IRQ_CLOCK_Handler+0x350>
    4128:	f000 f93a 	bl	43a0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    412c:	72a7      	strb	r7, [r4, #10]
    412e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4132:	0000      	.short	0x0000
    4134:	20000058 	.word	0x20000058
    4138:	00020001 	.word	0x00020001
    413c:	00030001 	.word	0x00030001
    4140:	4000053c 	.word	0x4000053c
    4144:	e000ed10 	.word	0xe000ed10

00004148 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    4148:	4801      	ldr	r0, [pc, #4]	; (4150 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    414a:	89c0      	ldrh	r0, [r0, #14]
    414c:	4770      	bx	lr
    414e:	0000      	.short	0x0000
    4150:	20000058 	.word	0x20000058

00004154 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    4154:	b510      	push	{r4, lr}
    4156:	f3ef 8410 	mrs	r4, PRIMASK
    415a:	b672      	cpsid	i
    415c:	480a      	ldr	r0, [pc, #40]	; (4188 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    415e:	7841      	ldrb	r1, [r0, #1]
    4160:	b129      	cbz	r1, 416e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    4162:	7841      	ldrb	r1, [r0, #1]
    4164:	1e49      	subs	r1, r1, #1
    4166:	7041      	strb	r1, [r0, #1]
    4168:	7841      	ldrb	r1, [r0, #1]
    416a:	b129      	cbz	r1, 4178 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    416c:	e008      	b.n	4180 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    416e:	f44f 718e 	mov.w	r1, #284	; 0x11c
    4172:	206d      	movs	r0, #109	; 0x6d
    4174:	f000 f992 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4178:	7880      	ldrb	r0, [r0, #2]
    417a:	b908      	cbnz	r0, 4180 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    417c:	f000 f924 	bl	43c8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    4180:	2c00      	cmp	r4, #0
    4182:	d100      	bne.n	4186 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    4184:	b662      	cpsie	i
    4186:	bd10      	pop	{r4, pc}
    4188:	20000058 	.word	0x20000058

0000418c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    418c:	b510      	push	{r4, lr}
    418e:	f3ef 8410 	mrs	r4, PRIMASK
    4192:	b672      	cpsid	i
    4194:	4806      	ldr	r0, [pc, #24]	; (41b0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    4196:	7841      	ldrb	r1, [r0, #1]
    4198:	1c49      	adds	r1, r1, #1
    419a:	7041      	strb	r1, [r0, #1]
    419c:	7840      	ldrb	r0, [r0, #1]
    419e:	2801      	cmp	r0, #1
    41a0:	d101      	bne.n	41a6 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    41a2:	f008 fdac 	bl	ccfe <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    41a6:	2c00      	cmp	r4, #0
    41a8:	d100      	bne.n	41ac <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    41aa:	b662      	cpsie	i
    41ac:	bd10      	pop	{r4, pc}
    41ae:	0000      	.short	0x0000
    41b0:	20000058 	.word	0x20000058

000041b4 <mpsl_clock_hfclk_release>:
    41b4:	4805      	ldr	r0, [pc, #20]	; (41cc <mpsl_clock_hfclk_release+0x18>)
    41b6:	b510      	push	{r4, lr}
    41b8:	78c1      	ldrb	r1, [r0, #3]
    41ba:	b121      	cbz	r1, 41c6 <mpsl_clock_hfclk_release+0x12>
    41bc:	2100      	movs	r1, #0
    41be:	7101      	strb	r1, [r0, #4]
    41c0:	70c1      	strb	r1, [r0, #3]
    41c2:	f7ff ffc7 	bl	4154 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    41c6:	2000      	movs	r0, #0
    41c8:	bd10      	pop	{r4, pc}
    41ca:	0000      	.short	0x0000
    41cc:	20000058 	.word	0x20000058

000041d0 <mpsl_clock_hfclk_request>:
    41d0:	b570      	push	{r4, r5, r6, lr}
    41d2:	4c0c      	ldr	r4, [pc, #48]	; (4204 <mpsl_clock_hfclk_request+0x34>)
    41d4:	78e1      	ldrb	r1, [r4, #3]
    41d6:	b961      	cbnz	r1, 41f2 <mpsl_clock_hfclk_request+0x22>
    41d8:	2501      	movs	r5, #1
    41da:	70e5      	strb	r5, [r4, #3]
    41dc:	61e0      	str	r0, [r4, #28]
    41de:	f7ff ffd5 	bl	418c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    41e2:	f000 f8e3 	bl	43ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    41e6:	b130      	cbz	r0, 41f6 <mpsl_clock_hfclk_request+0x26>
    41e8:	69e0      	ldr	r0, [r4, #28]
    41ea:	b110      	cbz	r0, 41f2 <mpsl_clock_hfclk_request+0x22>
    41ec:	4780      	blx	r0
    41ee:	2000      	movs	r0, #0
    41f0:	61e0      	str	r0, [r4, #28]
    41f2:	2000      	movs	r0, #0
    41f4:	bd70      	pop	{r4, r5, r6, pc}
    41f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    41fa:	7125      	strb	r5, [r4, #4]
    41fc:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    4200:	e7f7      	b.n	41f2 <mpsl_clock_hfclk_request+0x22>
    4202:	0000      	.short	0x0000
    4204:	20000058 	.word	0x20000058

00004208 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    4208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    420c:	0005      	movs	r5, r0
    420e:	f06f 0015 	mvn.w	r0, #21
    4212:	d03f      	beq.n	4294 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4214:	7829      	ldrb	r1, [r5, #0]
    4216:	2904      	cmp	r1, #4
    4218:	d83c      	bhi.n	4294 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    421a:	2900      	cmp	r1, #0
    421c:	7869      	ldrb	r1, [r5, #1]
    421e:	d03b      	beq.n	4298 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    4220:	2900      	cmp	r1, #0
    4222:	d137      	bne.n	4294 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4224:	78a9      	ldrb	r1, [r5, #2]
    4226:	2900      	cmp	r1, #0
    4228:	d134      	bne.n	4294 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    422a:	2000      	movs	r0, #0
    422c:	f008 fd16 	bl	cc5c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    4230:	2000      	movs	r0, #0
    4232:	f008 fd06 	bl	cc42 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    4236:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    423a:	f04f 31ff 	mov.w	r1, #4294967295
    423e:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    4242:	2600      	movs	r6, #0
    4244:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    4248:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    424c:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    4250:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    4254:	4c14      	ldr	r4, [pc, #80]	; (42a8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    4256:	7066      	strb	r6, [r4, #1]
    4258:	88a8      	ldrh	r0, [r5, #4]
    425a:	81a0      	strh	r0, [r4, #12]
    425c:	f008 fd46 	bl	ccec <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    4260:	2701      	movs	r7, #1
    4262:	b108      	cbz	r0, 4268 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    4264:	70e7      	strb	r7, [r4, #3]
    4266:	7067      	strb	r7, [r4, #1]
    4268:	2101      	movs	r1, #1
    426a:	4640      	mov	r0, r8
    426c:	f008 fd30 	bl	ccd0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4270:	b108      	cbz	r0, 4276 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    4272:	f000 f895 	bl	43a0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    4276:	f240 50f5 	movw	r0, #1525	; 0x5f5
    427a:	81e0      	strh	r0, [r4, #14]
    427c:	4628      	mov	r0, r5
    427e:	f7ff fe97 	bl	3fb0 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    4282:	7267      	strb	r7, [r4, #9]
    4284:	2000      	movs	r0, #0
    4286:	f008 fcdc 	bl	cc42 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    428a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    428e:	4630      	mov	r0, r6
    4290:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    4294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4298:	2900      	cmp	r1, #0
    429a:	d0fb      	beq.n	4294 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    429c:	2920      	cmp	r1, #32
    429e:	d8f9      	bhi.n	4294 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    42a0:	78a9      	ldrb	r1, [r5, #2]
    42a2:	2921      	cmp	r1, #33	; 0x21
    42a4:	d9c1      	bls.n	422a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    42a6:	e7f5      	b.n	4294 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    42a8:	20000058 	.word	0x20000058

000042ac <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    42ac:	4801      	ldr	r0, [pc, #4]	; (42b4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    42ae:	8980      	ldrh	r0, [r0, #12]
    42b0:	4770      	bx	lr
    42b2:	0000      	.short	0x0000
    42b4:	20000058 	.word	0x20000058

000042b8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    42b8:	b510      	push	{r4, lr}
    42ba:	480d      	ldr	r0, [pc, #52]	; (42f0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    42bc:	f008 fd77 	bl	cdae <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    42c0:	490b      	ldr	r1, [pc, #44]	; (42f0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    42c2:	3908      	subs	r1, #8
    42c4:	b148      	cbz	r0, 42da <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    42c6:	2001      	movs	r0, #1
    42c8:	7008      	strb	r0, [r1, #0]
    42ca:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    42ce:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    42d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42d6:	f7ff bf59 	b.w	418c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    42da:	7a88      	ldrb	r0, [r1, #10]
    42dc:	2802      	cmp	r0, #2
    42de:	d101      	bne.n	42e4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    42e0:	f7ff fdc0 	bl	3e64 <MPSL_IRQ_CLOCK_Handler+0x88>
    42e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42e8:	4801      	ldr	r0, [pc, #4]	; (42f0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    42ea:	f008 bd77 	b.w	cddc <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    42ee:	0000      	.short	0x0000
    42f0:	20000060 	.word	0x20000060

000042f4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    42f4:	4802      	ldr	r0, [pc, #8]	; (4300 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    42f6:	7a80      	ldrb	r0, [r0, #10]
    42f8:	2800      	cmp	r0, #0
    42fa:	d000      	beq.n	42fe <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    42fc:	2001      	movs	r0, #1
    42fe:	4770      	bx	lr
    4300:	20000058 	.word	0x20000058

00004304 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    4304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4306:	4d1f      	ldr	r5, [pc, #124]	; (4384 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4308:	7ae8      	ldrb	r0, [r5, #11]
    430a:	2800      	cmp	r0, #0
    430c:	d10f      	bne.n	432e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    430e:	7e28      	ldrb	r0, [r5, #24]
    4310:	f000 0003 	and.w	r0, r0, #3
    4314:	f008 fcf8 	bl	cd08 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4318:	2800      	cmp	r0, #0
    431a:	d008      	beq.n	432e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    431c:	f3ef 8110 	mrs	r1, PRIMASK
    4320:	b672      	cpsid	i
    4322:	f7ff ffe7 	bl	42f4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    4326:	b118      	cbz	r0, 4330 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    4328:	2900      	cmp	r1, #0
    432a:	d100      	bne.n	432e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    432c:	b662      	cpsie	i
    432e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4330:	2601      	movs	r6, #1
    4332:	72ae      	strb	r6, [r5, #10]
    4334:	b901      	cbnz	r1, 4338 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    4336:	b662      	cpsie	i
    4338:	2018      	movs	r0, #24
    433a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    433e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4342:	61a6      	str	r6, [r4, #24]
    4344:	f44f 7020 	mov.w	r0, #640	; 0x280
    4348:	f8ad 0000 	strh.w	r0, [sp]
    434c:	f8bd 0000 	ldrh.w	r0, [sp]
    4350:	1e41      	subs	r1, r0, #1
    4352:	f8ad 1000 	strh.w	r1, [sp]
    4356:	d2f9      	bcs.n	434c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    4358:	2700      	movs	r7, #0
    435a:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    435e:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    4362:	4808      	ldr	r0, [pc, #32]	; (4384 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4364:	3008      	adds	r0, #8
    4366:	f008 fd35 	bl	cdd4 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    436a:	702f      	strb	r7, [r5, #0]
    436c:	f7ff fd7a 	bl	3e64 <MPSL_IRQ_CLOCK_Handler+0x88>
    4370:	6166      	str	r6, [r4, #20]
    4372:	7968      	ldrb	r0, [r5, #5]
    4374:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    4378:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    437c:	2018      	movs	r0, #24
    437e:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    4382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4384:	20000058 	.word	0x20000058

00004388 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    4388:	b510      	push	{r4, lr}
    438a:	4c04      	ldr	r4, [pc, #16]	; (439c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    438c:	7e20      	ldrb	r0, [r4, #24]
    438e:	f000 0003 	and.w	r0, r0, #3
    4392:	f008 fcb9 	bl	cd08 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4396:	2800      	cmp	r0, #0
    4398:	d0f8      	beq.n	438c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    439a:	bd10      	pop	{r4, pc}
    439c:	20000058 	.word	0x20000058

000043a0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    43a0:	4901      	ldr	r1, [pc, #4]	; (43a8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    43a2:	2001      	movs	r0, #1
    43a4:	7008      	strb	r0, [r1, #0]
    43a6:	4770      	bx	lr
    43a8:	20000329 	.word	0x20000329

000043ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    43ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    43b0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    43b4:	b918      	cbnz	r0, 43be <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    43b6:	4803      	ldr	r0, [pc, #12]	; (43c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    43b8:	7800      	ldrb	r0, [r0, #0]
    43ba:	2800      	cmp	r0, #0
    43bc:	d000      	beq.n	43c0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    43be:	2001      	movs	r0, #1
    43c0:	4770      	bx	lr
    43c2:	0000      	.short	0x0000
    43c4:	20000329 	.word	0x20000329

000043c8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    43c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    43cc:	2101      	movs	r1, #1
    43ce:	6041      	str	r1, [r0, #4]
    43d0:	2100      	movs	r1, #0
    43d2:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    43d6:	4801      	ldr	r0, [pc, #4]	; (43dc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    43d8:	7001      	strb	r1, [r0, #0]
    43da:	4770      	bx	lr
    43dc:	20000329 	.word	0x20000329

000043e0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    43e0:	4802      	ldr	r0, [pc, #8]	; (43ec <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    43e2:	6800      	ldr	r0, [r0, #0]
    43e4:	f000 0003 	and.w	r0, r0, #3
    43e8:	4770      	bx	lr
    43ea:	0000      	.short	0x0000
    43ec:	4000041c 	.word	0x4000041c
    43f0:	b510      	push	{r4, lr}
    43f2:	b131      	cbz	r1, 4402 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    43f4:	2901      	cmp	r1, #1
    43f6:	d007      	beq.n	4408 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    43f8:	f240 3102 	movw	r1, #770	; 0x302
    43fc:	a005      	add	r0, pc, #20	; (adr r0, 4414 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    43fe:	f000 f821 	bl	4444 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    4402:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    4406:	e001      	b.n	440c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    4408:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    440c:	f000 0001 	and.w	r0, r0, #1
    4410:	bd10      	pop	{r4, pc}
    4412:	0000      	.short	0x0000
    4414:	5f66726e 	.word	0x5f66726e
    4418:	636f6c63 	.word	0x636f6c63
    441c:	00682e6b 	.word	0x00682e6b
    4420:	f3bf 8f4f 	dsb	sy
    4424:	4805      	ldr	r0, [pc, #20]	; (443c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    4426:	6801      	ldr	r1, [r0, #0]
    4428:	4a05      	ldr	r2, [pc, #20]	; (4440 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    442a:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    442e:	4311      	orrs	r1, r2
    4430:	6001      	str	r1, [r0, #0]
    4432:	f3bf 8f4f 	dsb	sy
    4436:	bf00      	nop
    4438:	e7fd      	b.n	4436 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    443a:	0000      	.short	0x0000
    443c:	e000ed0c 	.word	0xe000ed0c
    4440:	05fa0004 	.word	0x05fa0004

00004444 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    4444:	b672      	cpsid	i
    4446:	4a03      	ldr	r2, [pc, #12]	; (4454 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    4448:	6852      	ldr	r2, [r2, #4]
    444a:	b102      	cbz	r2, 444e <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    444c:	4790      	blx	r2
    444e:	f7ff ffe7 	bl	4420 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    4452:	0000      	.short	0x0000
    4454:	20000078 	.word	0x20000078
    4458:	4806      	ldr	r0, [pc, #24]	; (4474 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    445a:	b510      	push	{r4, lr}
    445c:	2100      	movs	r1, #0
    445e:	6001      	str	r1, [r0, #0]
    4460:	2101      	movs	r1, #1
    4462:	6001      	str	r1, [r0, #0]
    4464:	4608      	mov	r0, r1
    4466:	f008 fc76 	bl	cd56 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    446a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    446e:	2001      	movs	r0, #1
    4470:	f008 bc64 	b.w	cd3c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4474:	40001ffc 	.word	0x40001ffc
    4478:	4807      	ldr	r0, [pc, #28]	; (4498 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    447a:	b510      	push	{r4, lr}
    447c:	2101      	movs	r1, #1
    447e:	6041      	str	r1, [r0, #4]
    4480:	1e89      	subs	r1, r1, #2
    4482:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    4486:	200c      	movs	r0, #12
    4488:	f008 fc65 	bl	cd56 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    448c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4490:	200c      	movs	r0, #12
    4492:	f008 bc53 	b.w	cd3c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4496:	0000      	.short	0x0000
    4498:	4000c000 	.word	0x4000c000

0000449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    449c:	b50e      	push	{r1, r2, r3, lr}
    449e:	b672      	cpsid	i
    44a0:	4a0f      	ldr	r2, [pc, #60]	; (44e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    44a2:	6855      	ldr	r5, [r2, #4]
    44a4:	b1d5      	cbz	r5, 44dc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    44a6:	2200      	movs	r2, #0
    44a8:	4603      	mov	r3, r0
    44aa:	466e      	mov	r6, sp
    44ac:	240a      	movs	r4, #10
    44ae:	e003      	b.n	44b8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    44b0:	fbb0 f0f4 	udiv	r0, r0, r4
    44b4:	1c52      	adds	r2, r2, #1
    44b6:	b2d2      	uxtb	r2, r2
    44b8:	2800      	cmp	r0, #0
    44ba:	d1f9      	bne.n	44b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    44bc:	54b0      	strb	r0, [r6, r2]
    44be:	e009      	b.n	44d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    44c0:	fbb3 f0f4 	udiv	r0, r3, r4
    44c4:	fb04 3010 	mls	r0, r4, r0, r3
    44c8:	fbb3 f3f4 	udiv	r3, r3, r4
    44cc:	1e52      	subs	r2, r2, #1
    44ce:	b2d2      	uxtb	r2, r2
    44d0:	3030      	adds	r0, #48	; 0x30
    44d2:	54b0      	strb	r0, [r6, r2]
    44d4:	2a00      	cmp	r2, #0
    44d6:	d1f3      	bne.n	44c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    44d8:	4630      	mov	r0, r6
    44da:	47a8      	blx	r5
    44dc:	f7ff ffa0 	bl	4420 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    44e0:	20000078 	.word	0x20000078

000044e4 <mpsl_init>:
    44e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44e8:	4c18      	ldr	r4, [pc, #96]	; (454c <mpsl_init+0x68>)
    44ea:	4606      	mov	r6, r0
    44ec:	4617      	mov	r7, r2
    44ee:	7860      	ldrb	r0, [r4, #1]
    44f0:	460d      	mov	r5, r1
    44f2:	b118      	cbz	r0, 44fc <mpsl_init+0x18>
    44f4:	f04f 30ff 	mov.w	r0, #4294967295
    44f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    44fc:	f7fc fbe6 	bl	ccc <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    4500:	b906      	cbnz	r6, 4504 <mpsl_init+0x20>
    4502:	4e13      	ldr	r6, [pc, #76]	; (4550 <mpsl_init+0x6c>)
    4504:	6067      	str	r7, [r4, #4]
    4506:	7025      	strb	r5, [r4, #0]
    4508:	f7ff ffa6 	bl	4458 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    450c:	f7ff ffb4 	bl	4478 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    4510:	4630      	mov	r0, r6
    4512:	f7ff fe79 	bl	4208 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    4516:	0006      	movs	r6, r0
    4518:	d1ee      	bne.n	44f8 <mpsl_init+0x14>
    451a:	f7fe fe77 	bl	320c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    451e:	f7ff fef1 	bl	4304 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    4522:	f008 fadb 	bl	cadc <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    4526:	4628      	mov	r0, r5
    4528:	f008 fc08 	bl	cd3c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    452c:	2001      	movs	r0, #1
    452e:	2d00      	cmp	r5, #0
    4530:	db09      	blt.n	4546 <mpsl_init+0x62>
    4532:	f005 011f 	and.w	r1, r5, #31
    4536:	fa00 f101 	lsl.w	r1, r0, r1
    453a:	096a      	lsrs	r2, r5, #5
    453c:	0092      	lsls	r2, r2, #2
    453e:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4542:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    4546:	7060      	strb	r0, [r4, #1]
    4548:	4630      	mov	r0, r6
    454a:	e7d5      	b.n	44f8 <mpsl_init+0x14>
    454c:	20000078 	.word	0x20000078
    4550:	0000cd78 	.word	0x0000cd78

00004554 <mpsl_is_initialized>:
    4554:	4801      	ldr	r0, [pc, #4]	; (455c <mpsl_is_initialized+0x8>)
    4556:	7840      	ldrb	r0, [r0, #1]
    4558:	4770      	bx	lr
    455a:	0000      	.short	0x0000
    455c:	20000078 	.word	0x20000078

00004560 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    4560:	4807      	ldr	r0, [pc, #28]	; (4580 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    4562:	f990 0000 	ldrsb.w	r0, [r0]
    4566:	2800      	cmp	r0, #0
    4568:	db09      	blt.n	457e <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    456a:	f000 021f 	and.w	r2, r0, #31
    456e:	2101      	movs	r1, #1
    4570:	4091      	lsls	r1, r2
    4572:	0940      	lsrs	r0, r0, #5
    4574:	0080      	lsls	r0, r0, #2
    4576:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    457a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    457e:	4770      	bx	lr
    4580:	20000078 	.word	0x20000078

00004584 <mpsl_temperature_get>:
    4584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4588:	2601      	movs	r6, #1
    458a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    458e:	0331      	lsls	r1, r6, #12
    4590:	f04f 0800 	mov.w	r8, #0
    4594:	4640      	mov	r0, r8
    4596:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    459a:	f3bf 8f4f 	dsb	sy
    459e:	f3bf 8f6f 	isb	sy
    45a2:	4c16      	ldr	r4, [pc, #88]	; (45fc <mpsl_temperature_get+0x78>)
    45a4:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    45a8:	200c      	movs	r0, #12
    45aa:	f008 fbf3 	bl	cd94 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    45ae:	4d14      	ldr	r5, [pc, #80]	; (4600 <mpsl_temperature_get+0x7c>)
    45b0:	6828      	ldr	r0, [r5, #0]
    45b2:	43c0      	mvns	r0, r0
    45b4:	f340 1700 	sbfx	r7, r0, #4, #1
    45b8:	6828      	ldr	r0, [r5, #0]
    45ba:	f040 0010 	orr.w	r0, r0, #16
    45be:	6028      	str	r0, [r5, #0]
    45c0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    45c4:	6026      	str	r6, [r4, #0]
    45c6:	1c7f      	adds	r7, r7, #1
    45c8:	e002      	b.n	45d0 <mpsl_temperature_get+0x4c>
    45ca:	bf00      	nop
    45cc:	f000 f890 	bl	46f0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    45d0:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    45d4:	2800      	cmp	r0, #0
    45d6:	d0f9      	beq.n	45cc <mpsl_temperature_get+0x48>
    45d8:	b91f      	cbnz	r7, 45e2 <mpsl_temperature_get+0x5e>
    45da:	6828      	ldr	r0, [r5, #0]
    45dc:	f020 0010 	bic.w	r0, r0, #16
    45e0:	6028      	str	r0, [r5, #0]
    45e2:	4808      	ldr	r0, [pc, #32]	; (4604 <mpsl_temperature_get+0x80>)
    45e4:	6805      	ldr	r5, [r0, #0]
    45e6:	6066      	str	r6, [r4, #4]
    45e8:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    45ec:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    45f0:	200c      	movs	r0, #12
    45f2:	f008 fbcf 	bl	cd94 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    45f6:	4628      	mov	r0, r5
    45f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45fc:	4000c000 	.word	0x4000c000
    4600:	e000ed10 	.word	0xe000ed10
    4604:	4000c508 	.word	0x4000c508

00004608 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    4608:	b510      	push	{r4, lr}
    460a:	4602      	mov	r2, r0
    460c:	2005      	movs	r0, #5
    460e:	490c      	ldr	r1, [pc, #48]	; (4640 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    4610:	e004      	b.n	461c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    4612:	bf00      	nop
    4614:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    4618:	791b      	ldrb	r3, [r3, #4]
    461a:	b133      	cbz	r3, 462a <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    461c:	1e40      	subs	r0, r0, #1
    461e:	b2c0      	uxtb	r0, r0
    4620:	d2f8      	bcs.n	4614 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    4622:	2148      	movs	r1, #72	; 0x48
    4624:	2069      	movs	r0, #105	; 0x69
    4626:	f7ff ff39 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    462a:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    462e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    4632:	2200      	movs	r2, #0
    4634:	714a      	strb	r2, [r1, #5]
    4636:	718a      	strb	r2, [r1, #6]
    4638:	2201      	movs	r2, #1
    463a:	710a      	strb	r2, [r1, #4]
    463c:	bd10      	pop	{r4, pc}
    463e:	0000      	.short	0x0000
    4640:	2000115c 	.word	0x2000115c

00004644 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    4644:	b510      	push	{r4, lr}
    4646:	2805      	cmp	r0, #5
    4648:	d301      	bcc.n	464e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    464a:	2158      	movs	r1, #88	; 0x58
    464c:	e006      	b.n	465c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    464e:	490a      	ldr	r1, [pc, #40]	; (4678 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    4650:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    4654:	7901      	ldrb	r1, [r0, #4]
    4656:	2901      	cmp	r1, #1
    4658:	d003      	beq.n	4662 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    465a:	2159      	movs	r1, #89	; 0x59
    465c:	2069      	movs	r0, #105	; 0x69
    465e:	f7ff ff1d 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4662:	7941      	ldrb	r1, [r0, #5]
    4664:	7982      	ldrb	r2, [r0, #6]
    4666:	1c49      	adds	r1, r1, #1
    4668:	b2c9      	uxtb	r1, r1
    466a:	428a      	cmp	r2, r1
    466c:	d000      	beq.n	4670 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    466e:	7141      	strb	r1, [r0, #5]
    4670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4674:	f7ff bf74 	b.w	4560 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    4678:	2000115c 	.word	0x2000115c

0000467c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    467c:	b570      	push	{r4, r5, r6, lr}
    467e:	2505      	movs	r5, #5
    4680:	4e0e      	ldr	r6, [pc, #56]	; (46bc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    4682:	4c0f      	ldr	r4, [pc, #60]	; (46c0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    4684:	e016      	b.n	46b4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4686:	7821      	ldrb	r1, [r4, #0]
    4688:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    468c:	7902      	ldrb	r2, [r0, #4]
    468e:	2a01      	cmp	r2, #1
    4690:	d108      	bne.n	46a4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4692:	7942      	ldrb	r2, [r0, #5]
    4694:	7983      	ldrb	r3, [r0, #6]
    4696:	429a      	cmp	r2, r3
    4698:	d004      	beq.n	46a4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    469a:	7942      	ldrb	r2, [r0, #5]
    469c:	7182      	strb	r2, [r0, #6]
    469e:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    46a2:	4780      	blx	r0
    46a4:	7820      	ldrb	r0, [r4, #0]
    46a6:	1c40      	adds	r0, r0, #1
    46a8:	b2c0      	uxtb	r0, r0
    46aa:	7020      	strb	r0, [r4, #0]
    46ac:	2805      	cmp	r0, #5
    46ae:	d301      	bcc.n	46b4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    46b0:	2000      	movs	r0, #0
    46b2:	7020      	strb	r0, [r4, #0]
    46b4:	1e6d      	subs	r5, r5, #1
    46b6:	b2ed      	uxtb	r5, r5
    46b8:	d2e5      	bcs.n	4686 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    46ba:	bd70      	pop	{r4, r5, r6, pc}
    46bc:	2000115c 	.word	0x2000115c
    46c0:	2000032a 	.word	0x2000032a

000046c4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    46c4:	b500      	push	{lr}
    46c6:	f008 fb94 	bl	cdf2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    46ca:	b940      	cbnz	r0, 46de <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    46cc:	f008 fb9b 	bl	ce06 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    46d0:	b928      	cbnz	r0, 46de <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    46d2:	f008 fbaf 	bl	ce34 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    46d6:	b910      	cbnz	r0, 46de <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    46d8:	f008 fbc0 	bl	ce5c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    46dc:	b108      	cbz	r0, 46e2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    46de:	4802      	ldr	r0, [pc, #8]	; (46e8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    46e0:	bd00      	pop	{pc}
    46e2:	4802      	ldr	r0, [pc, #8]	; (46ec <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    46e4:	bd00      	pop	{pc}
    46e6:	0000      	.short	0x0000
    46e8:	4000050c 	.word	0x4000050c
    46ec:	4001e700 	.word	0x4001e700

000046f0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    46f0:	b510      	push	{r4, lr}
    46f2:	f008 fbb3 	bl	ce5c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    46f6:	b330      	cbz	r0, 4746 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    46f8:	f3ef 8010 	mrs	r0, PRIMASK
    46fc:	b1c8      	cbz	r0, 4732 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    46fe:	2100      	movs	r1, #0
    4700:	b672      	cpsid	i
    4702:	4812      	ldr	r0, [pc, #72]	; (474c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    4704:	6802      	ldr	r2, [r0, #0]
    4706:	6803      	ldr	r3, [r0, #0]
    4708:	f3c2 1200 	ubfx	r2, r2, #4, #1
    470c:	f043 0310 	orr.w	r3, r3, #16
    4710:	6003      	str	r3, [r0, #0]
    4712:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4716:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    471a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    471e:	431c      	orrs	r4, r3
    4720:	d000      	beq.n	4724 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    4722:	bf40      	sev
    4724:	bf20      	wfe
    4726:	bf00      	nop
    4728:	bf00      	nop
    472a:	bf00      	nop
    472c:	bf00      	nop
    472e:	b112      	cbz	r2, 4736 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    4730:	e005      	b.n	473e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    4732:	2101      	movs	r1, #1
    4734:	e7e4      	b.n	4700 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    4736:	6802      	ldr	r2, [r0, #0]
    4738:	f022 0210 	bic.w	r2, r2, #16
    473c:	6002      	str	r2, [r0, #0]
    473e:	2900      	cmp	r1, #0
    4740:	d000      	beq.n	4744 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    4742:	b662      	cpsie	i
    4744:	bd10      	pop	{r4, pc}
    4746:	bf20      	wfe
    4748:	bd10      	pop	{r4, pc}
    474a:	0000      	.short	0x0000
    474c:	e000ed10 	.word	0xe000ed10

00004750 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    4750:	4901      	ldr	r1, [pc, #4]	; (4758 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    4752:	2001      	movs	r0, #1
    4754:	7088      	strb	r0, [r1, #2]
    4756:	4770      	bx	lr
    4758:	20000080 	.word	0x20000080

0000475c <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    475c:	0000d0a9 0000d0e1 0000d0cb 0000d0b9     ................
    476c:	0000d0c5 0000d0b3 0000d0a7 0000d0a5     ................
    477c:	0000d0dd 0000d0d1 0000d0bf 0000d0ad     ................
    478c:	0000d09f 0000d097 0000d09b 0000d091     ................

0000479c <mpsl_fem_disable>:
    479c:	4801      	ldr	r0, [pc, #4]	; (47a4 <mpsl_fem_disable+0x8>)
    479e:	6800      	ldr	r0, [r0, #0]
    47a0:	6800      	ldr	r0, [r0, #0]
    47a2:	4700      	bx	r0
    47a4:	20000094 	.word	0x20000094

000047a8 <mpsl_fem_lna_configuration_clear>:
    47a8:	4801      	ldr	r0, [pc, #4]	; (47b0 <mpsl_fem_lna_configuration_clear+0x8>)
    47aa:	6800      	ldr	r0, [r0, #0]
    47ac:	6940      	ldr	r0, [r0, #20]
    47ae:	4700      	bx	r0
    47b0:	20000094 	.word	0x20000094

000047b4 <mpsl_fem_lna_configuration_set>:
    47b4:	4a01      	ldr	r2, [pc, #4]	; (47bc <mpsl_fem_lna_configuration_set+0x8>)
    47b6:	6812      	ldr	r2, [r2, #0]
    47b8:	68d2      	ldr	r2, [r2, #12]
    47ba:	4710      	bx	r2
    47bc:	20000094 	.word	0x20000094

000047c0 <mpsl_fem_lna_is_configured>:
    47c0:	4901      	ldr	r1, [pc, #4]	; (47c8 <mpsl_fem_lna_is_configured+0x8>)
    47c2:	6809      	ldr	r1, [r1, #0]
    47c4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    47c6:	4708      	bx	r1
    47c8:	20000094 	.word	0x20000094

000047cc <mpsl_fem_pa_configuration_clear>:
    47cc:	4801      	ldr	r0, [pc, #4]	; (47d4 <mpsl_fem_pa_configuration_clear+0x8>)
    47ce:	6800      	ldr	r0, [r0, #0]
    47d0:	6900      	ldr	r0, [r0, #16]
    47d2:	4700      	bx	r0
    47d4:	20000094 	.word	0x20000094

000047d8 <mpsl_fem_pa_configuration_set>:
    47d8:	4a01      	ldr	r2, [pc, #4]	; (47e0 <mpsl_fem_pa_configuration_set+0x8>)
    47da:	6812      	ldr	r2, [r2, #0]
    47dc:	6892      	ldr	r2, [r2, #8]
    47de:	4710      	bx	r2
    47e0:	20000094 	.word	0x20000094

000047e4 <mpsl_fem_pa_gain_set>:
    47e4:	4901      	ldr	r1, [pc, #4]	; (47ec <mpsl_fem_pa_gain_set+0x8>)
    47e6:	6809      	ldr	r1, [r1, #0]
    47e8:	6a49      	ldr	r1, [r1, #36]	; 0x24
    47ea:	4708      	bx	r1
    47ec:	20000094 	.word	0x20000094

000047f0 <mpsl_fem_pa_is_configured>:
    47f0:	4901      	ldr	r1, [pc, #4]	; (47f8 <mpsl_fem_pa_is_configured+0x8>)
    47f2:	6809      	ldr	r1, [r1, #0]
    47f4:	6a89      	ldr	r1, [r1, #40]	; 0x28
    47f6:	4708      	bx	r1
    47f8:	20000094 	.word	0x20000094

000047fc <mpsl_fem_tx_power_split>:
    47fc:	4b01      	ldr	r3, [pc, #4]	; (4804 <mpsl_fem_tx_power_split+0x8>)
    47fe:	681b      	ldr	r3, [r3, #0]
    4800:	685b      	ldr	r3, [r3, #4]
    4802:	4718      	bx	r3
    4804:	20000094 	.word	0x20000094

00004808 <mpsl_fem_device_config_254_apply_get>:
    4808:	4801      	ldr	r0, [pc, #4]	; (4810 <mpsl_fem_device_config_254_apply_get+0x8>)
    480a:	7800      	ldrb	r0, [r0, #0]
    480c:	4770      	bx	lr
    480e:	0000      	.short	0x0000
    4810:	2000032b 	.word	0x2000032b
    4814:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4816:	4c14      	ldr	r4, [pc, #80]	; (4868 <mpsl_fem_device_config_254_apply_get+0x60>)
    4818:	7a20      	ldrb	r0, [r4, #8]
    481a:	f88d 0001 	strb.w	r0, [sp, #1]
    481e:	79e0      	ldrb	r0, [r4, #7]
    4820:	f88d 0000 	strb.w	r0, [sp]
    4824:	79a0      	ldrb	r0, [r4, #6]
    4826:	f8ad 0004 	strh.w	r0, [sp, #4]
    482a:	7960      	ldrb	r0, [r4, #5]
    482c:	f8ad 0002 	strh.w	r0, [sp, #2]
    4830:	4668      	mov	r0, sp
    4832:	f006 f973 	bl	ab1c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    4836:	b108      	cbz	r0, 483c <mpsl_fem_device_config_254_apply_get+0x34>
    4838:	2183      	movs	r1, #131	; 0x83
    483a:	e010      	b.n	485e <mpsl_fem_device_config_254_apply_get+0x56>
    483c:	68e0      	ldr	r0, [r4, #12]
    483e:	9002      	str	r0, [sp, #8]
    4840:	a802      	add	r0, sp, #8
    4842:	f006 f981 	bl	ab48 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    4846:	b108      	cbz	r0, 484c <mpsl_fem_device_config_254_apply_get+0x44>
    4848:	2187      	movs	r1, #135	; 0x87
    484a:	e008      	b.n	485e <mpsl_fem_device_config_254_apply_get+0x56>
    484c:	4807      	ldr	r0, [pc, #28]	; (486c <mpsl_fem_device_config_254_apply_get+0x64>)
    484e:	6800      	ldr	r0, [r0, #0]
    4850:	9003      	str	r0, [sp, #12]
    4852:	a803      	add	r0, sp, #12
    4854:	f00b fe34 	bl	104c0 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4858:	2800      	cmp	r0, #0
    485a:	d003      	beq.n	4864 <mpsl_fem_device_config_254_apply_get+0x5c>
    485c:	218b      	movs	r1, #139	; 0x8b
    485e:	2003      	movs	r0, #3
    4860:	f000 f8ec 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4864:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    4866:	0000      	.short	0x0000
    4868:	20001184 	.word	0x20001184
    486c:	00004b48 	.word	0x00004b48

00004870 <sdc_build_revision_get>:
    4870:	b510      	push	{r4, lr}
    4872:	b128      	cbz	r0, 4880 <sdc_build_revision_get+0x10>
    4874:	2214      	movs	r2, #20
    4876:	4904      	ldr	r1, [pc, #16]	; (4888 <sdc_build_revision_get+0x18>)
    4878:	f008 fb30 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    487c:	2000      	movs	r0, #0
    487e:	bd10      	pop	{r4, pc}
    4880:	f06f 0015 	mvn.w	r0, #21
    4884:	bd10      	pop	{r4, pc}
    4886:	0000      	.short	0x0000
    4888:	00004b64 	.word	0x00004b64

0000488c <sdc_cfg_set>:
    488c:	b570      	push	{r4, r5, r6, lr}
    488e:	0003      	movs	r3, r0
    4890:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    4894:	d103      	bne.n	489e <sdc_cfg_set+0x12>
    4896:	4c2e      	ldr	r4, [pc, #184]	; (4950 <sdc_cfg_set+0xc4>)
    4898:	7863      	ldrb	r3, [r4, #1]
    489a:	b10b      	cbz	r3, 48a0 <sdc_cfg_set+0x14>
    489c:	1180      	asrs	r0, r0, #6
    489e:	bd70      	pop	{r4, r5, r6, pc}
    48a0:	b301      	cbz	r1, 48e4 <sdc_cfg_set+0x58>
    48a2:	f06f 0515 	mvn.w	r5, #21
    48a6:	b38a      	cbz	r2, 490c <sdc_cfg_set+0x80>
    48a8:	4b2a      	ldr	r3, [pc, #168]	; (4954 <sdc_cfg_set+0xc8>)
    48aa:	290c      	cmp	r1, #12
    48ac:	d24b      	bcs.n	4946 <sdc_cfg_set+0xba>
    48ae:	e8df f001 	tbb	[pc, r1]
    48b2:	064a      	.short	0x064a
    48b4:	1d1a0c09 	.word	0x1d1a0c09
    48b8:	31202e25 	.word	0x31202e25
    48bc:	3b36      	.short	0x3b36
    48be:	7810      	ldrb	r0, [r2, #0]
    48c0:	7018      	strb	r0, [r3, #0]
    48c2:	e035      	b.n	4930 <sdc_cfg_set+0xa4>
    48c4:	7810      	ldrb	r0, [r2, #0]
    48c6:	7058      	strb	r0, [r3, #1]
    48c8:	e032      	b.n	4930 <sdc_cfg_set+0xa4>
    48ca:	7890      	ldrb	r0, [r2, #2]
    48cc:	b1f0      	cbz	r0, 490c <sdc_cfg_set+0x80>
    48ce:	78d0      	ldrb	r0, [r2, #3]
    48d0:	b1e0      	cbz	r0, 490c <sdc_cfg_set+0x80>
    48d2:	7810      	ldrb	r0, [r2, #0]
    48d4:	281b      	cmp	r0, #27
    48d6:	d336      	bcc.n	4946 <sdc_cfg_set+0xba>
    48d8:	7850      	ldrb	r0, [r2, #1]
    48da:	281b      	cmp	r0, #27
    48dc:	d333      	bcc.n	4946 <sdc_cfg_set+0xba>
    48de:	6810      	ldr	r0, [r2, #0]
    48e0:	f8c3 0005 	str.w	r0, [r3, #5]
    48e4:	e024      	b.n	4930 <sdc_cfg_set+0xa4>
    48e6:	6810      	ldr	r0, [r2, #0]
    48e8:	60d8      	str	r0, [r3, #12]
    48ea:	e021      	b.n	4930 <sdc_cfg_set+0xa4>
    48ec:	7810      	ldrb	r0, [r2, #0]
    48ee:	7098      	strb	r0, [r3, #2]
    48f0:	e01e      	b.n	4930 <sdc_cfg_set+0xa4>
    48f2:	7811      	ldrb	r1, [r2, #0]
    48f4:	2900      	cmp	r1, #0
    48f6:	d1d2      	bne.n	489e <sdc_cfg_set+0x12>
    48f8:	70d9      	strb	r1, [r3, #3]
    48fa:	e019      	b.n	4930 <sdc_cfg_set+0xa4>
    48fc:	78e0      	ldrb	r0, [r4, #3]
    48fe:	b110      	cbz	r0, 4906 <sdc_cfg_set+0x7a>
    4900:	7810      	ldrb	r0, [r2, #0]
    4902:	2802      	cmp	r0, #2
    4904:	d31f      	bcc.n	4946 <sdc_cfg_set+0xba>
    4906:	7810      	ldrb	r0, [r2, #0]
    4908:	7418      	strb	r0, [r3, #16]
    490a:	e011      	b.n	4930 <sdc_cfg_set+0xa4>
    490c:	e01b      	b.n	4946 <sdc_cfg_set+0xba>
    490e:	8810      	ldrh	r0, [r2, #0]
    4910:	8258      	strh	r0, [r3, #18]
    4912:	e00d      	b.n	4930 <sdc_cfg_set+0xa4>
    4914:	7811      	ldrb	r1, [r2, #0]
    4916:	2900      	cmp	r1, #0
    4918:	d1c1      	bne.n	489e <sdc_cfg_set+0x12>
    491a:	7119      	strb	r1, [r3, #4]
    491c:	e008      	b.n	4930 <sdc_cfg_set+0xa4>
    491e:	7810      	ldrb	r0, [r2, #0]
    4920:	2802      	cmp	r0, #2
    4922:	d310      	bcc.n	4946 <sdc_cfg_set+0xba>
    4924:	7518      	strb	r0, [r3, #20]
    4926:	e003      	b.n	4930 <sdc_cfg_set+0xa4>
    4928:	7811      	ldrb	r1, [r2, #0]
    492a:	2900      	cmp	r1, #0
    492c:	d1b7      	bne.n	489e <sdc_cfg_set+0x12>
    492e:	7559      	strb	r1, [r3, #21]
    4930:	2201      	movs	r2, #1
    4932:	4908      	ldr	r1, [pc, #32]	; (4954 <sdc_cfg_set+0xc8>)
    4934:	2000      	movs	r0, #0
    4936:	f008 fbed 	bl	d114 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    493a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    493e:	db04      	blt.n	494a <sdc_cfg_set+0xbe>
    4940:	f06f 000b 	mvn.w	r0, #11
    4944:	bd70      	pop	{r4, r5, r6, pc}
    4946:	4628      	mov	r0, r5
    4948:	bd70      	pop	{r4, r5, r6, pc}
    494a:	2101      	movs	r1, #1
    494c:	70a1      	strb	r1, [r4, #2]
    494e:	bd70      	pop	{r4, r5, r6, pc}
    4950:	20000098 	.word	0x20000098
    4954:	20001184 	.word	0x20001184

00004958 <sdc_enable>:
    4958:	b570      	push	{r4, r5, r6, lr}
    495a:	460c      	mov	r4, r1
    495c:	0005      	movs	r5, r0
    495e:	d019      	beq.n	4994 <sdc_enable+0x3c>
    4960:	b1c4      	cbz	r4, 4994 <sdc_enable+0x3c>
    4962:	f000 f925 	bl	4bb0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    4966:	b1c0      	cbz	r0, 499a <sdc_enable+0x42>
    4968:	4628      	mov	r0, r5
    496a:	f7ff fe4d 	bl	4608 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    496e:	4d0c      	ldr	r5, [pc, #48]	; (49a0 <sdc_enable+0x48>)
    4970:	2200      	movs	r2, #0
    4972:	490c      	ldr	r1, [pc, #48]	; (49a4 <sdc_enable+0x4c>)
    4974:	7028      	strb	r0, [r5, #0]
    4976:	4620      	mov	r0, r4
    4978:	f008 fbcc 	bl	d114 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    497c:	f00c f9df 	bl	10d3e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    4980:	2100      	movs	r1, #0
    4982:	7828      	ldrb	r0, [r5, #0]
    4984:	f006 fb28 	bl	afd8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4988:	f7ff ff44 	bl	4814 <mpsl_fem_device_config_254_apply_get+0xc>
    498c:	2001      	movs	r0, #1
    498e:	7068      	strb	r0, [r5, #1]
    4990:	2000      	movs	r0, #0
    4992:	bd70      	pop	{r4, r5, r6, pc}
    4994:	f06f 0015 	mvn.w	r0, #21
    4998:	bd70      	pop	{r4, r5, r6, pc}
    499a:	f04f 30ff 	mov.w	r0, #4294967295
    499e:	bd70      	pop	{r4, r5, r6, pc}
    49a0:	20000098 	.word	0x20000098
    49a4:	20001184 	.word	0x20001184

000049a8 <sdc_init>:
    49a8:	b530      	push	{r4, r5, lr}
    49aa:	b087      	sub	sp, #28
    49ac:	0005      	movs	r5, r0
    49ae:	d00c      	beq.n	49ca <sdc_init+0x22>
    49b0:	f7ff fdd0 	bl	4554 <mpsl_is_initialized>
    49b4:	f04f 34ff 	mov.w	r4, #4294967295
    49b8:	b120      	cbz	r0, 49c4 <sdc_init+0x1c>
    49ba:	f7ff fc77 	bl	42ac <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    49be:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    49c2:	d905      	bls.n	49d0 <sdc_init+0x28>
    49c4:	4620      	mov	r0, r4
    49c6:	b007      	add	sp, #28
    49c8:	bd30      	pop	{r4, r5, pc}
    49ca:	f06f 0015 	mvn.w	r0, #21
    49ce:	e7fa      	b.n	49c6 <sdc_init+0x1e>
    49d0:	4c15      	ldr	r4, [pc, #84]	; (4a28 <sdc_init+0x80>)
    49d2:	4816      	ldr	r0, [pc, #88]	; (4a2c <sdc_init+0x84>)
    49d4:	6065      	str	r5, [r4, #4]
    49d6:	f000 f9f5 	bl	4dc4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    49da:	2000      	movs	r0, #0
    49dc:	7060      	strb	r0, [r4, #1]
    49de:	70a0      	strb	r0, [r4, #2]
    49e0:	70e0      	strb	r0, [r4, #3]
    49e2:	4601      	mov	r1, r0
    49e4:	2218      	movs	r2, #24
    49e6:	4668      	mov	r0, sp
    49e8:	f008 faf2 	bl	cfd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    49ec:	2218      	movs	r2, #24
    49ee:	4910      	ldr	r1, [pc, #64]	; (4a30 <sdc_init+0x88>)
    49f0:	4668      	mov	r0, sp
    49f2:	f008 fa73 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    49f6:	2218      	movs	r2, #24
    49f8:	4669      	mov	r1, sp
    49fa:	480e      	ldr	r0, [pc, #56]	; (4a34 <sdc_init+0x8c>)
    49fc:	f008 fa6e 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4a00:	f3ef 8410 	mrs	r4, PRIMASK
    4a04:	b672      	cpsid	i
    4a06:	f06f 000c 	mvn.w	r0, #12
    4a0a:	f000 fd57 	bl	54bc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    4a0e:	480a      	ldr	r0, [pc, #40]	; (4a38 <sdc_init+0x90>)
    4a10:	f000 fe22 	bl	5658 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4a14:	b118      	cbz	r0, 4a1e <sdc_init+0x76>
    4a16:	219e      	movs	r1, #158	; 0x9e
    4a18:	2003      	movs	r0, #3
    4a1a:	f000 f80f 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a1e:	b904      	cbnz	r4, 4a22 <sdc_init+0x7a>
    4a20:	b662      	cpsie	i
    4a22:	2000      	movs	r0, #0
    4a24:	e7cf      	b.n	49c6 <sdc_init+0x1e>
    4a26:	0000      	.short	0x0000
    4a28:	20000098 	.word	0x20000098
    4a2c:	00004815 	.word	0x00004815
    4a30:	00004b4c 	.word	0x00004b4c
    4a34:	20001184 	.word	0x20001184
    4a38:	00004bdd 	.word	0x00004bdd

00004a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    4a3c:	b50e      	push	{r1, r2, r3, lr}
    4a3e:	b672      	cpsid	i
    4a40:	4a15      	ldr	r2, [pc, #84]	; (4a98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    4a42:	6855      	ldr	r5, [r2, #4]
    4a44:	b1dd      	cbz	r5, 4a7e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    4a46:	2200      	movs	r2, #0
    4a48:	4603      	mov	r3, r0
    4a4a:	466e      	mov	r6, sp
    4a4c:	240a      	movs	r4, #10
    4a4e:	e003      	b.n	4a58 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4a50:	fbb0 f0f4 	udiv	r0, r0, r4
    4a54:	1c52      	adds	r2, r2, #1
    4a56:	b2d2      	uxtb	r2, r2
    4a58:	2800      	cmp	r0, #0
    4a5a:	d1f9      	bne.n	4a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    4a5c:	54b0      	strb	r0, [r6, r2]
    4a5e:	e00a      	b.n	4a76 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    4a60:	b2d8      	uxtb	r0, r3
    4a62:	fbb0 f7f4 	udiv	r7, r0, r4
    4a66:	fbb3 f3f4 	udiv	r3, r3, r4
    4a6a:	fb04 0017 	mls	r0, r4, r7, r0
    4a6e:	1e52      	subs	r2, r2, #1
    4a70:	b2d2      	uxtb	r2, r2
    4a72:	3030      	adds	r0, #48	; 0x30
    4a74:	54b0      	strb	r0, [r6, r2]
    4a76:	2a00      	cmp	r2, #0
    4a78:	d1f2      	bne.n	4a60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    4a7a:	4630      	mov	r0, r6
    4a7c:	47a8      	blx	r5
    4a7e:	f3bf 8f4f 	dsb	sy
    4a82:	4806      	ldr	r0, [pc, #24]	; (4a9c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4a84:	6801      	ldr	r1, [r0, #0]
    4a86:	4a06      	ldr	r2, [pc, #24]	; (4aa0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4a88:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4a8c:	4311      	orrs	r1, r2
    4a8e:	6001      	str	r1, [r0, #0]
    4a90:	f3bf 8f4f 	dsb	sy
    4a94:	bf00      	nop
    4a96:	e7fd      	b.n	4a94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    4a98:	20000098 	.word	0x20000098
    4a9c:	e000ed0c 	.word	0xe000ed0c
    4aa0:	05fa0004 	.word	0x05fa0004

00004aa4 <sdc_support_adv>:
    4aa4:	4806      	ldr	r0, [pc, #24]	; (4ac0 <sdc_support_adv+0x1c>)
    4aa6:	b510      	push	{r4, lr}
    4aa8:	7881      	ldrb	r1, [r0, #2]
    4aaa:	7840      	ldrb	r0, [r0, #1]
    4aac:	4301      	orrs	r1, r0
    4aae:	d002      	beq.n	4ab6 <sdc_support_adv+0x12>
    4ab0:	f04f 30ff 	mov.w	r0, #4294967295
    4ab4:	bd10      	pop	{r4, pc}
    4ab6:	f006 faad 	bl	b014 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    4aba:	2000      	movs	r0, #0
    4abc:	bd10      	pop	{r4, pc}
    4abe:	0000      	.short	0x0000
    4ac0:	20000098 	.word	0x20000098

00004ac4 <sdc_support_dle_peripheral>:
    4ac4:	4806      	ldr	r0, [pc, #24]	; (4ae0 <sdc_support_dle_peripheral+0x1c>)
    4ac6:	b510      	push	{r4, lr}
    4ac8:	7881      	ldrb	r1, [r0, #2]
    4aca:	7840      	ldrb	r0, [r0, #1]
    4acc:	4301      	orrs	r1, r0
    4ace:	d002      	beq.n	4ad6 <sdc_support_dle_peripheral+0x12>
    4ad0:	f04f 30ff 	mov.w	r0, #4294967295
    4ad4:	bd10      	pop	{r4, pc}
    4ad6:	f006 f84f 	bl	ab78 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
    4ada:	2000      	movs	r0, #0
    4adc:	bd10      	pop	{r4, pc}
    4ade:	0000      	.short	0x0000
    4ae0:	20000098 	.word	0x20000098

00004ae4 <sdc_support_le_2m_phy>:
    4ae4:	4807      	ldr	r0, [pc, #28]	; (4b04 <sdc_support_le_2m_phy+0x20>)
    4ae6:	b510      	push	{r4, lr}
    4ae8:	7881      	ldrb	r1, [r0, #2]
    4aea:	7840      	ldrb	r0, [r0, #1]
    4aec:	4301      	orrs	r1, r0
    4aee:	d002      	beq.n	4af6 <sdc_support_le_2m_phy+0x12>
    4af0:	f04f 30ff 	mov.w	r0, #4294967295
    4af4:	bd10      	pop	{r4, pc}
    4af6:	f00b feb0 	bl	1085a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    4afa:	f00b febe 	bl	1087a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    4afe:	2000      	movs	r0, #0
    4b00:	bd10      	pop	{r4, pc}
    4b02:	0000      	.short	0x0000
    4b04:	20000098 	.word	0x20000098

00004b08 <sdc_support_peripheral>:
    4b08:	4806      	ldr	r0, [pc, #24]	; (4b24 <sdc_support_peripheral+0x1c>)
    4b0a:	b510      	push	{r4, lr}
    4b0c:	7881      	ldrb	r1, [r0, #2]
    4b0e:	7840      	ldrb	r0, [r0, #1]
    4b10:	4301      	orrs	r1, r0
    4b12:	d002      	beq.n	4b1a <sdc_support_peripheral+0x12>
    4b14:	f04f 30ff 	mov.w	r0, #4294967295
    4b18:	bd10      	pop	{r4, pc}
    4b1a:	f006 fa8d 	bl	b038 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    4b1e:	2000      	movs	r0, #0
    4b20:	bd10      	pop	{r4, pc}
    4b22:	0000      	.short	0x0000
    4b24:	20000098 	.word	0x20000098

00004b28 <sdc_support_phy_update_peripheral>:
    4b28:	4806      	ldr	r0, [pc, #24]	; (4b44 <sdc_support_phy_update_peripheral+0x1c>)
    4b2a:	b510      	push	{r4, lr}
    4b2c:	7881      	ldrb	r1, [r0, #2]
    4b2e:	7840      	ldrb	r0, [r0, #1]
    4b30:	4301      	orrs	r1, r0
    4b32:	d002      	beq.n	4b3a <sdc_support_phy_update_peripheral+0x12>
    4b34:	f04f 30ff 	mov.w	r0, #4294967295
    4b38:	bd10      	pop	{r4, pc}
    4b3a:	f00b fe9e 	bl	1087a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    4b3e:	2000      	movs	r0, #0
    4b40:	bd10      	pop	{r4, pc}
    4b42:	0000      	.short	0x0000
    4b44:	20000098 	.word	0x20000098
    4b48:	00000001 	.word	0x00000001
    4b4c:	00010101 	.word	0x00010101
    4b50:	031b1b00 	.word	0x031b1b00
    4b54:	00000002 	.word	0x00000002
    4b58:	00001d4c 	.word	0x00001d4c
    4b5c:	001f0003 	.word	0x001f0003
    4b60:	00000000 	.word	0x00000000
    4b64:	f1925c29 	.word	0xf1925c29
    4b68:	d1928136 	.word	0xd1928136
    4b6c:	f1f0a9b7 	.word	0xf1f0a9b7
    4b70:	194ce999 	.word	0x194ce999
    4b74:	4a83231f 	.word	0x4a83231f

00004b78 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    4b78:	4a05      	ldr	r2, [pc, #20]	; (4b90 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    4b7a:	b510      	push	{r4, lr}
    4b7c:	6852      	ldr	r2, [r2, #4]
    4b7e:	b112      	cbz	r2, 4b86 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b84:	4710      	bx	r2
    4b86:	2192      	movs	r1, #146	; 0x92
    4b88:	2004      	movs	r0, #4
    4b8a:	f7ff ff57 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b8e:	0000      	.short	0x0000
    4b90:	2000119c 	.word	0x2000119c

00004b94 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4b94:	4a05      	ldr	r2, [pc, #20]	; (4bac <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    4b96:	b510      	push	{r4, lr}
    4b98:	6892      	ldr	r2, [r2, #8]
    4b9a:	b112      	cbz	r2, 4ba2 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    4b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4ba0:	4710      	bx	r2
    4ba2:	2198      	movs	r1, #152	; 0x98
    4ba4:	2004      	movs	r0, #4
    4ba6:	f7ff ff49 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4baa:	0000      	.short	0x0000
    4bac:	2000119c 	.word	0x2000119c

00004bb0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4bb0:	4805      	ldr	r0, [pc, #20]	; (4bc8 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    4bb2:	6801      	ldr	r1, [r0, #0]
    4bb4:	b129      	cbz	r1, 4bc2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4bb6:	6841      	ldr	r1, [r0, #4]
    4bb8:	b119      	cbz	r1, 4bc2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4bba:	6880      	ldr	r0, [r0, #8]
    4bbc:	b108      	cbz	r0, 4bc2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4bbe:	2001      	movs	r0, #1
    4bc0:	4770      	bx	lr
    4bc2:	2000      	movs	r0, #0
    4bc4:	4770      	bx	lr
    4bc6:	0000      	.short	0x0000
    4bc8:	2000119c 	.word	0x2000119c

00004bcc <sdc_rand_source_register>:
    4bcc:	4902      	ldr	r1, [pc, #8]	; (4bd8 <sdc_rand_source_register+0xc>)
    4bce:	c80d      	ldmia	r0, {r0, r2, r3}
    4bd0:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4bd4:	2000      	movs	r0, #0
    4bd6:	4770      	bx	lr
    4bd8:	2000119c 	.word	0x2000119c

00004bdc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4bde:	4c12      	ldr	r4, [pc, #72]	; (4c28 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4be0:	2600      	movs	r6, #0
    4be2:	6825      	ldr	r5, [r4, #0]
    4be4:	e011      	b.n	4c0a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4be6:	9800      	ldr	r0, [sp, #0]
    4be8:	2802      	cmp	r0, #2
    4bea:	d002      	beq.n	4bf2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4bec:	2803      	cmp	r0, #3
    4bee:	d10c      	bne.n	4c0a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4bf0:	e006      	b.n	4c00 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4bf2:	6820      	ldr	r0, [r4, #0]
    4bf4:	b110      	cbz	r0, 4bfc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    4bf6:	2000      	movs	r0, #0
    4bf8:	6026      	str	r6, [r4, #0]
    4bfa:	e005      	b.n	4c08 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4bfc:	2128      	movs	r1, #40	; 0x28
    4bfe:	e00c      	b.n	4c1a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4c00:	6820      	ldr	r0, [r4, #0]
    4c02:	b168      	cbz	r0, 4c20 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4c04:	2001      	movs	r0, #1
    4c06:	6026      	str	r6, [r4, #0]
    4c08:	47a8      	blx	r5
    4c0a:	4668      	mov	r0, sp
    4c0c:	f000 fcf6 	bl	55fc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4c10:	2800      	cmp	r0, #0
    4c12:	d0e8      	beq.n	4be6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4c14:	2805      	cmp	r0, #5
    4c16:	d005      	beq.n	4c24 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4c18:	2135      	movs	r1, #53	; 0x35
    4c1a:	2004      	movs	r0, #4
    4c1c:	f7ff ff0e 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c20:	212d      	movs	r1, #45	; 0x2d
    4c22:	e7fa      	b.n	4c1a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4c26:	0000      	.short	0x0000
    4c28:	200000a0 	.word	0x200000a0
    4c2c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4c2e:	4c1f      	ldr	r4, [pc, #124]	; (4cac <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    4c30:	4605      	mov	r5, r0
    4c32:	7820      	ldrb	r0, [r4, #0]
    4c34:	b140      	cbz	r0, 4c48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    4c36:	78a2      	ldrb	r2, [r4, #2]
    4c38:	1c61      	adds	r1, r4, #1
    4c3a:	4628      	mov	r0, r5
    4c3c:	1c92      	adds	r2, r2, #2
    4c3e:	f008 f94d 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4c42:	2000      	movs	r0, #0
    4c44:	7020      	strb	r0, [r4, #0]
    4c46:	e021      	b.n	4c8c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4c48:	4819      	ldr	r0, [pc, #100]	; (4cb0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4c4a:	f002 f821 	bl	6c90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    4c4e:	2800      	cmp	r0, #0
    4c50:	d01d      	beq.n	4c8e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4c52:	4c17      	ldr	r4, [pc, #92]	; (4cb0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4c54:	7820      	ldrb	r0, [r4, #0]
    4c56:	2811      	cmp	r0, #17
    4c58:	d104      	bne.n	4c64 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    4c5a:	210a      	movs	r1, #10
    4c5c:	203e      	movs	r0, #62	; 0x3e
    4c5e:	f008 fae4 	bl	d22a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4c62:	b118      	cbz	r0, 4c6c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    4c64:	7820      	ldrb	r0, [r4, #0]
    4c66:	2808      	cmp	r0, #8
    4c68:	d005      	beq.n	4c76 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    4c6a:	e009      	b.n	4c80 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    4c6c:	4910      	ldr	r1, [pc, #64]	; (4cb0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4c6e:	4628      	mov	r0, r5
    4c70:	f008 fce4 	bl	d63c <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    4c74:	e00a      	b.n	4c8c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4c76:	2105      	movs	r1, #5
    4c78:	203e      	movs	r0, #62	; 0x3e
    4c7a:	f008 fad6 	bl	d22a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4c7e:	b138      	cbz	r0, 4c90 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    4c80:	490b      	ldr	r1, [pc, #44]	; (4cb0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4c82:	4628      	mov	r0, r5
    4c84:	f008 fb2d 	bl	d2e2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    4c88:	2800      	cmp	r0, #0
    4c8a:	d000      	beq.n	4c8e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4c8c:	2001      	movs	r0, #1
    4c8e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4c90:	88a0      	ldrh	r0, [r4, #4]
    4c92:	f8ad 0000 	strh.w	r0, [sp]
    4c96:	a901      	add	r1, sp, #4
    4c98:	4668      	mov	r0, sp
    4c9a:	f008 fe02 	bl	d8a2 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    4c9e:	2800      	cmp	r0, #0
    4ca0:	d0f5      	beq.n	4c8e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4ca2:	219c      	movs	r1, #156	; 0x9c
    4ca4:	2008      	movs	r0, #8
    4ca6:	f7ff fec9 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4caa:	0000      	.short	0x0000
    4cac:	2000133a 	.word	0x2000133a
    4cb0:	20001238 	.word	0x20001238
    4cb4:	b570      	push	{r4, r5, r6, lr}
    4cb6:	780a      	ldrb	r2, [r1, #0]
    4cb8:	7082      	strb	r2, [r0, #2]
    4cba:	b33a      	cbz	r2, 4d0c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    4cbc:	2a01      	cmp	r2, #1
    4cbe:	d825      	bhi.n	4d0c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    4cc0:	2313      	movs	r3, #19
    4cc2:	7003      	strb	r3, [r0, #0]
    4cc4:	2300      	movs	r3, #0
    4cc6:	e00a      	b.n	4cde <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
    4cc8:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4ccc:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4cd0:	78a6      	ldrb	r6, [r4, #2]
    4cd2:	70ee      	strb	r6, [r5, #3]
    4cd4:	8864      	ldrh	r4, [r4, #2]
    4cd6:	0a24      	lsrs	r4, r4, #8
    4cd8:	1c5b      	adds	r3, r3, #1
    4cda:	712c      	strb	r4, [r5, #4]
    4cdc:	b2db      	uxtb	r3, r3
    4cde:	4293      	cmp	r3, r2
    4ce0:	d3f2      	bcc.n	4cc8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    4ce2:	2300      	movs	r3, #0
    4ce4:	e00b      	b.n	4cfe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
    4ce6:	bf00      	nop
    4ce8:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4cec:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4cf0:	792e      	ldrb	r6, [r5, #4]
    4cf2:	7166      	strb	r6, [r4, #5]
    4cf4:	88ad      	ldrh	r5, [r5, #4]
    4cf6:	0a2d      	lsrs	r5, r5, #8
    4cf8:	1c5b      	adds	r3, r3, #1
    4cfa:	71a5      	strb	r5, [r4, #6]
    4cfc:	b2db      	uxtb	r3, r3
    4cfe:	4293      	cmp	r3, r2
    4d00:	d3f2      	bcc.n	4ce8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
    4d02:	2101      	movs	r1, #1
    4d04:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4d08:	b2c0      	uxtb	r0, r0
    4d0a:	bd70      	pop	{r4, r5, r6, pc}
    4d0c:	2000      	movs	r0, #0
    4d0e:	bd70      	pop	{r4, r5, r6, pc}

00004d10 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4d10:	2840      	cmp	r0, #64	; 0x40
    4d12:	d203      	bcs.n	4d1c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    4d14:	1e40      	subs	r0, r0, #1
    4d16:	b2c1      	uxtb	r1, r0
    4d18:	4805      	ldr	r0, [pc, #20]	; (4d30 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    4d1a:	e005      	b.n	4d28 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    4d1c:	28ff      	cmp	r0, #255	; 0xff
    4d1e:	d005      	beq.n	4d2c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    4d20:	3840      	subs	r0, #64	; 0x40
    4d22:	b2c1      	uxtb	r1, r0
    4d24:	4802      	ldr	r0, [pc, #8]	; (4d30 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    4d26:	3008      	adds	r0, #8
    4d28:	f008 bcb2 	b.w	d690 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    4d2c:	2001      	movs	r0, #1
    4d2e:	4770      	bx	lr
    4d30:	200000a4 	.word	0x200000a4

00004d34 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4d34:	1e40      	subs	r0, r0, #1
    4d36:	b2c1      	uxtb	r1, r0
    4d38:	4801      	ldr	r0, [pc, #4]	; (4d40 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    4d3a:	f008 bca9 	b.w	d690 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    4d3e:	0000      	.short	0x0000
    4d40:	200000b4 	.word	0x200000b4

00004d44 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4d44:	4902      	ldr	r1, [pc, #8]	; (4d50 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    4d46:	6802      	ldr	r2, [r0, #0]
    4d48:	610a      	str	r2, [r1, #16]
    4d4a:	6840      	ldr	r0, [r0, #4]
    4d4c:	6148      	str	r0, [r1, #20]
    4d4e:	4770      	bx	lr
    4d50:	200000a4 	.word	0x200000a4

00004d54 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    4d54:	4905      	ldr	r1, [pc, #20]	; (4d6c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    4d56:	6802      	ldr	r2, [r0, #0]
    4d58:	600a      	str	r2, [r1, #0]
    4d5a:	6840      	ldr	r0, [r0, #4]
    4d5c:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    4d60:	600a      	str	r2, [r1, #0]
    4d62:	4a03      	ldr	r2, [pc, #12]	; (4d70 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    4d64:	4310      	orrs	r0, r2
    4d66:	6048      	str	r0, [r1, #4]
    4d68:	4770      	bx	lr
    4d6a:	0000      	.short	0x0000
    4d6c:	200000a4 	.word	0x200000a4
    4d70:	024007f8 	.word	0x024007f8

00004d74 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    4d74:	4902      	ldr	r1, [pc, #8]	; (4d80 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    4d76:	6802      	ldr	r2, [r0, #0]
    4d78:	608a      	str	r2, [r1, #8]
    4d7a:	6840      	ldr	r0, [r0, #4]
    4d7c:	60c8      	str	r0, [r1, #12]
    4d7e:	4770      	bx	lr
    4d80:	200000a4 	.word	0x200000a4

00004d84 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4d84:	4807      	ldr	r0, [pc, #28]	; (4da4 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    4d86:	f04f 31ff 	mov.w	r1, #4294967295
    4d8a:	2200      	movs	r2, #0
    4d8c:	6001      	str	r1, [r0, #0]
    4d8e:	0cc9      	lsrs	r1, r1, #19
    4d90:	6041      	str	r1, [r0, #4]
    4d92:	f100 0108 	add.w	r1, r0, #8
    4d96:	201f      	movs	r0, #31
    4d98:	600a      	str	r2, [r1, #0]
    4d9a:	604a      	str	r2, [r1, #4]
    4d9c:	3108      	adds	r1, #8
    4d9e:	e9c1 0200 	strd	r0, r2, [r1]
    4da2:	4770      	bx	lr
    4da4:	200000a4 	.word	0x200000a4

00004da8 <sdc_hci_cmd_cb_reset>:
    4da8:	b510      	push	{r4, lr}
    4daa:	f7ff ffeb 	bl	4d84 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    4dae:	f00b fccd 	bl	1074c <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    4db2:	4604      	mov	r4, r0
    4db4:	4802      	ldr	r0, [pc, #8]	; (4dc0 <sdc_hci_cmd_cb_reset+0x18>)
    4db6:	6800      	ldr	r0, [r0, #0]
    4db8:	b100      	cbz	r0, 4dbc <sdc_hci_cmd_cb_reset+0x14>
    4dba:	4780      	blx	r0
    4dbc:	4620      	mov	r0, r4
    4dbe:	bd10      	pop	{r4, pc}
    4dc0:	200000bc 	.word	0x200000bc

00004dc4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4dc4:	4901      	ldr	r1, [pc, #4]	; (4dcc <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4dc6:	6008      	str	r0, [r1, #0]
    4dc8:	4770      	bx	lr
    4dca:	0000      	.short	0x0000
    4dcc:	200000bc 	.word	0x200000bc

00004dd0 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4dd0:	2102      	movs	r1, #2
    4dd2:	8001      	strh	r1, [r0, #0]
    4dd4:	8041      	strh	r1, [r0, #2]
    4dd6:	2100      	movs	r1, #0
    4dd8:	7101      	strb	r1, [r0, #4]
    4dda:	2129      	movs	r1, #41	; 0x29
    4ddc:	7141      	strb	r1, [r0, #5]
    4dde:	f249 215c 	movw	r1, #37468	; 0x925c
    4de2:	80c1      	strh	r1, [r0, #6]
    4de4:	4901      	ldr	r1, [pc, #4]	; (4dec <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4de6:	6081      	str	r1, [r0, #8]
    4de8:	2000      	movs	r0, #0
    4dea:	4770      	bx	lr
    4dec:	928136f1 	.word	0x928136f1

00004df0 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    4df0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    4df2:	4604      	mov	r4, r0
    4df4:	4669      	mov	r1, sp
    4df6:	f009 f8ad 	bl	df54 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    4dfa:	b170      	cbz	r0, 4e1a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4dfc:	f240 215a 	movw	r1, #602	; 0x25a
    4e00:	e008      	b.n	4e14 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    4e02:	bf00      	nop
    4e04:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    4e08:	4621      	mov	r1, r4
    4e0a:	f000 f8ab 	bl	4f64 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    4e0e:	b120      	cbz	r0, 4e1a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4e10:	f240 215f 	movw	r1, #607	; 0x25f
    4e14:	2017      	movs	r0, #23
    4e16:	f7ff fe11 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e1a:	4668      	mov	r0, sp
    4e1c:	f000 f852 	bl	4ec4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4e20:	2800      	cmp	r0, #0
    4e22:	d0ef      	beq.n	4e04 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    4e24:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00004e28 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4e28:	b510      	push	{r4, lr}
    4e2a:	2802      	cmp	r0, #2
    4e2c:	d304      	bcc.n	4e38 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    4e2e:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    4e32:	2017      	movs	r0, #23
    4e34:	f7ff fe02 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e38:	4901      	ldr	r1, [pc, #4]	; (4e40 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    4e3a:	5c08      	ldrb	r0, [r1, r0]
    4e3c:	bd10      	pop	{r4, pc}
    4e3e:	0000      	.short	0x0000
    4e40:	200011a8 	.word	0x200011a8

00004e44 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e46:	0005      	movs	r5, r0
    4e48:	9500      	str	r5, [sp, #0]
    4e4a:	d010      	beq.n	4e6e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
    4e4c:	2600      	movs	r6, #0
    4e4e:	7808      	ldrb	r0, [r1, #0]
    4e50:	7849      	ldrb	r1, [r1, #1]
    4e52:	4604      	mov	r4, r0
    4e54:	42a1      	cmp	r1, r4
    4e56:	d900      	bls.n	4e5a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    4e58:	460c      	mov	r4, r1
    4e5a:	1cea      	adds	r2, r5, #3
    4e5c:	f022 0203 	bic.w	r2, r2, #3
    4e60:	42aa      	cmp	r2, r5
    4e62:	d006      	beq.n	4e72 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    4e64:	f240 1179 	movw	r1, #377	; 0x179
    4e68:	2017      	movs	r0, #23
    4e6a:	f7ff fde7 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e6e:	2601      	movs	r6, #1
    4e70:	e7ed      	b.n	4e4e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    4e72:	4f13      	ldr	r7, [pc, #76]	; (4ec0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    4e74:	7038      	strb	r0, [r7, #0]
    4e76:	7079      	strb	r1, [r7, #1]
    4e78:	4631      	mov	r1, r6
    4e7a:	4668      	mov	r0, sp
    4e7c:	f000 f8ee 	bl	505c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    4e80:	2100      	movs	r1, #0
    4e82:	460b      	mov	r3, r1
    4e84:	9800      	ldr	r0, [sp, #0]
    4e86:	1cc0      	adds	r0, r0, #3
    4e88:	f020 0003 	bic.w	r0, r0, #3
    4e8c:	9000      	str	r0, [sp, #0]
    4e8e:	b96e      	cbnz	r6, 4eac <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    4e90:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    4e94:	60d0      	str	r0, [r2, #12]
    4e96:	2000      	movs	r0, #0
    4e98:	e006      	b.n	4ea8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    4e9a:	bf00      	nop
    4e9c:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    4ea0:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    4ea4:	1c40      	adds	r0, r0, #1
    4ea6:	b2c0      	uxtb	r0, r0
    4ea8:	42a0      	cmp	r0, r4
    4eaa:	d3f7      	bcc.n	4e9c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    4eac:	9800      	ldr	r0, [sp, #0]
    4eae:	1c49      	adds	r1, r1, #1
    4eb0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4eb4:	b2c9      	uxtb	r1, r1
    4eb6:	9000      	str	r0, [sp, #0]
    4eb8:	2902      	cmp	r1, #2
    4eba:	d3e3      	bcc.n	4e84 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
    4ebc:	1b40      	subs	r0, r0, r5
    4ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ec0:	200011a8 	.word	0x200011a8

00004ec4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4ec4:	b570      	push	{r4, r5, r6, lr}
    4ec6:	4604      	mov	r4, r0
    4ec8:	f009 f9f3 	bl	e2b2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    4ecc:	b108      	cbz	r0, 4ed2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    4ece:	2010      	movs	r0, #16
    4ed0:	bd70      	pop	{r4, r5, r6, pc}
    4ed2:	7825      	ldrb	r5, [r4, #0]
    4ed4:	f000 f8fe 	bl	50d4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    4ed8:	4602      	mov	r2, r0
    4eda:	480c      	ldr	r0, [pc, #48]	; (4f0c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    4edc:	8861      	ldrh	r1, [r4, #2]
    4ede:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4ee2:	e00e      	b.n	4f02 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    4ee4:	68c3      	ldr	r3, [r0, #12]
    4ee6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4eea:	b143      	cbz	r3, 4efe <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    4eec:	1c4a      	adds	r2, r1, #1
    4eee:	8062      	strh	r2, [r4, #2]
    4ef0:	80a1      	strh	r1, [r4, #4]
    4ef2:	68c0      	ldr	r0, [r0, #12]
    4ef4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4ef8:	60a0      	str	r0, [r4, #8]
    4efa:	2000      	movs	r0, #0
    4efc:	bd70      	pop	{r4, r5, r6, pc}
    4efe:	1c49      	adds	r1, r1, #1
    4f00:	b289      	uxth	r1, r1
    4f02:	4291      	cmp	r1, r2
    4f04:	d3ee      	bcc.n	4ee4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    4f06:	8061      	strh	r1, [r4, #2]
    4f08:	2005      	movs	r0, #5
    4f0a:	bd70      	pop	{r4, r5, r6, pc}
    4f0c:	200011a8 	.word	0x200011a8

00004f10 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f14:	b121      	cbz	r1, 4f20 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    4f16:	2901      	cmp	r1, #1
    4f18:	d002      	beq.n	4f20 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    4f1a:	2000      	movs	r0, #0
    4f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f20:	4c0f      	ldr	r4, [pc, #60]	; (4f60 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    4f22:	2700      	movs	r7, #0
    4f24:	463b      	mov	r3, r7
    4f26:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4f2a:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    4f2e:	f814 c001 	ldrb.w	ip, [r4, r1]
    4f32:	e00a      	b.n	4f4a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    4f34:	19dc      	adds	r4, r3, r7
    4f36:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    4f3a:	b2a4      	uxth	r4, r4
    4f3c:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    4f40:	f1be 0f00 	cmp.w	lr, #0
    4f44:	d004      	beq.n	4f50 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    4f46:	1c5b      	adds	r3, r3, #1
    4f48:	b29b      	uxth	r3, r3
    4f4a:	459c      	cmp	ip, r3
    4f4c:	d8f2      	bhi.n	4f34 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    4f4e:	4634      	mov	r4, r6
    4f50:	8004      	strh	r4, [r0, #0]
    4f52:	4620      	mov	r0, r4
    4f54:	42b4      	cmp	r4, r6
    4f56:	d0e0      	beq.n	4f1a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    4f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4f5c:	f000 b834 	b.w	4fc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    4f60:	200011a8 	.word	0x200011a8

00004f64 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f68:	4606      	mov	r6, r0
    4f6a:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4f6e:	460c      	mov	r4, r1
    4f70:	f243 0702 	movw	r7, #12290	; 0x3002
    4f74:	38ff      	subs	r0, #255	; 0xff
    4f76:	d020      	beq.n	4fba <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4f78:	2c02      	cmp	r4, #2
    4f7a:	d302      	bcc.n	4f82 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4f7c:	2007      	movs	r0, #7
    4f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f82:	4630      	mov	r0, r6
    4f84:	f000 f85a 	bl	503c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    4f88:	0005      	movs	r5, r0
    4f8a:	d016      	beq.n	4fba <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4f8c:	480c      	ldr	r0, [pc, #48]	; (4fc0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4f8e:	4629      	mov	r1, r5
    4f90:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4f94:	4630      	mov	r0, r6
    4f96:	4790      	blx	r2
    4f98:	480a      	ldr	r0, [pc, #40]	; (4fc4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4f9a:	2100      	movs	r1, #0
    4f9c:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    4fa0:	68f8      	ldr	r0, [r7, #12]
    4fa2:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    4fa6:	4620      	mov	r0, r4
    4fa8:	f000 f88a 	bl	50c0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4fac:	4602      	mov	r2, r0
    4fae:	4629      	mov	r1, r5
    4fb0:	6878      	ldr	r0, [r7, #4]
    4fb2:	f008 ffae 	bl	df12 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4fb6:	2000      	movs	r0, #0
    4fb8:	e7e1      	b.n	4f7e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4fba:	4638      	mov	r0, r7
    4fbc:	e7df      	b.n	4f7e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4fbe:	0000      	.short	0x0000
    4fc0:	000050f4 	.word	0x000050f4
    4fc4:	200011a8 	.word	0x200011a8
    4fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4fcc:	4690      	mov	r8, r2
    4fce:	460d      	mov	r5, r1
    4fd0:	4607      	mov	r7, r0
    4fd2:	f008 ffd0 	bl	df76 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4fd6:	b148      	cbz	r0, 4fec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    4fd8:	4816      	ldr	r0, [pc, #88]	; (5034 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    4fda:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4fde:	68f0      	ldr	r0, [r6, #12]
    4fe0:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4fe4:	b128      	cbz	r0, 4ff2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    4fe6:	f44f 719d 	mov.w	r1, #314	; 0x13a
    4fea:	e015      	b.n	5018 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4fec:	f240 1139 	movw	r1, #313	; 0x139
    4ff0:	e012      	b.n	5018 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4ff2:	6870      	ldr	r0, [r6, #4]
    4ff4:	2800      	cmp	r0, #0
    4ff6:	d01a      	beq.n	502e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    4ff8:	4628      	mov	r0, r5
    4ffa:	f000 f861 	bl	50c0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4ffe:	4601      	mov	r1, r0
    5000:	6870      	ldr	r0, [r6, #4]
    5002:	f008 ff2e 	bl	de62 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5006:	0004      	movs	r4, r0
    5008:	d010      	beq.n	502c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    500a:	68f0      	ldr	r0, [r6, #12]
    500c:	2d02      	cmp	r5, #2
    500e:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    5012:	d304      	bcc.n	501e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    5014:	f240 1145 	movw	r1, #325	; 0x145
    5018:	2017      	movs	r0, #23
    501a:	f7ff fd0f 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    501e:	4806      	ldr	r0, [pc, #24]	; (5038 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    5020:	4642      	mov	r2, r8
    5022:	4621      	mov	r1, r4
    5024:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    5028:	4638      	mov	r0, r7
    502a:	4798      	blx	r3
    502c:	4620      	mov	r0, r4
    502e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5032:	0000      	.short	0x0000
    5034:	200011a8 	.word	0x200011a8
    5038:	000050ec 	.word	0x000050ec
    503c:	b570      	push	{r4, r5, r6, lr}
    503e:	460c      	mov	r4, r1
    5040:	4605      	mov	r5, r0
    5042:	f008 ff98 	bl	df76 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    5046:	2800      	cmp	r0, #0
    5048:	d005      	beq.n	5056 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    504a:	4803      	ldr	r0, [pc, #12]	; (5058 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    504c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5050:	68c0      	ldr	r0, [r0, #12]
    5052:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    5056:	bd70      	pop	{r4, r5, r6, pc}
    5058:	200011a8 	.word	0x200011a8
    505c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5060:	4e16      	ldr	r6, [pc, #88]	; (50bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    5062:	4688      	mov	r8, r1
    5064:	4605      	mov	r5, r0
    5066:	2400      	movs	r4, #0
    5068:	6828      	ldr	r0, [r5, #0]
    506a:	1cc0      	adds	r0, r0, #3
    506c:	f020 0003 	bic.w	r0, r0, #3
    5070:	6028      	str	r0, [r5, #0]
    5072:	4620      	mov	r0, r4
    5074:	f000 f824 	bl	50c0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5078:	5d31      	ldrb	r1, [r6, r4]
    507a:	4348      	muls	r0, r1
    507c:	f1b8 0f00 	cmp.w	r8, #0
    5080:	d001      	beq.n	5086 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    5082:	2200      	movs	r2, #0
    5084:	e000      	b.n	5088 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    5086:	682a      	ldr	r2, [r5, #0]
    5088:	4601      	mov	r1, r0
    508a:	9200      	str	r2, [sp, #0]
    508c:	b132      	cbz	r2, 509c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    508e:	2700      	movs	r7, #0
    5090:	ea4f 000d 	mov.w	r0, sp
    5094:	f008 ff16 	bl	dec4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5098:	b11f      	cbz	r7, 50a2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    509a:	e006      	b.n	50aa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    509c:	2701      	movs	r7, #1
    509e:	2000      	movs	r0, #0
    50a0:	e7f8      	b.n	5094 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    50a2:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    50a6:	9a00      	ldr	r2, [sp, #0]
    50a8:	604a      	str	r2, [r1, #4]
    50aa:	6829      	ldr	r1, [r5, #0]
    50ac:	1c64      	adds	r4, r4, #1
    50ae:	4408      	add	r0, r1
    50b0:	b2e4      	uxtb	r4, r4
    50b2:	6028      	str	r0, [r5, #0]
    50b4:	2c02      	cmp	r4, #2
    50b6:	d3d7      	bcc.n	5068 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    50b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    50bc:	200011a8 	.word	0x200011a8
    50c0:	4903      	ldr	r1, [pc, #12]	; (50d0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    50c2:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    50c6:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    50ca:	1cc0      	adds	r0, r0, #3
    50cc:	4008      	ands	r0, r1
    50ce:	4770      	bx	lr
    50d0:	000050e8 	.word	0x000050e8
    50d4:	4903      	ldr	r1, [pc, #12]	; (50e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    50d6:	7808      	ldrb	r0, [r1, #0]
    50d8:	7849      	ldrb	r1, [r1, #1]
    50da:	4288      	cmp	r0, r1
    50dc:	d200      	bcs.n	50e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    50de:	4608      	mov	r0, r1
    50e0:	4770      	bx	lr
    50e2:	0000      	.short	0x0000
    50e4:	200011a8 	.word	0x200011a8
    50e8:	011002a0 	.word	0x011002a0
    50ec:	0000df8b 	.word	0x0000df8b
    50f0:	0000df8b 	.word	0x0000df8b
    50f4:	0000fdf9 	.word	0x0000fdf9
    50f8:	0000f119 	.word	0x0000f119

000050fc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    50fc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5100:	4c27      	ldr	r4, [pc, #156]	; (51a0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa4>)
    5102:	4606      	mov	r6, r0
    5104:	b081      	sub	sp, #4
    5106:	6820      	ldr	r0, [r4, #0]
    5108:	469a      	mov	sl, r3
    510a:	4693      	mov	fp, r2
    510c:	b158      	cbz	r0, 5126 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    510e:	7a01      	ldrb	r1, [r0, #8]
    5110:	42b1      	cmp	r1, r6
    5112:	d903      	bls.n	511c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    5114:	6840      	ldr	r0, [r0, #4]
    5116:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    511a:	b140      	cbz	r0, 512e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    511c:	f243 0002 	movw	r0, #12290	; 0x3002
    5120:	b005      	add	sp, #20
    5122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5126:	21a5      	movs	r1, #165	; 0xa5
    5128:	2018      	movs	r0, #24
    512a:	f7ff fc87 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    512e:	4619      	mov	r1, r3
    5130:	9802      	ldr	r0, [sp, #8]
    5132:	f008 ff44 	bl	dfbe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    5136:	4680      	mov	r8, r0
    5138:	4658      	mov	r0, fp
    513a:	990e      	ldr	r1, [sp, #56]	; 0x38
    513c:	f008 ff35 	bl	dfaa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    5140:	4605      	mov	r5, r0
    5142:	eb08 0005 	add.w	r0, r8, r5
    5146:	1d00      	adds	r0, r0, #4
    5148:	b287      	uxth	r7, r0
    514a:	6820      	ldr	r0, [r4, #0]
    514c:	46a1      	mov	r9, r4
    514e:	4639      	mov	r1, r7
    5150:	6800      	ldr	r0, [r0, #0]
    5152:	f008 fe86 	bl	de62 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5156:	0004      	movs	r4, r0
    5158:	d01f      	beq.n	519a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9e>
    515a:	8067      	strh	r7, [r4, #2]
    515c:	8025      	strh	r5, [r4, #0]
    515e:	4629      	mov	r1, r5
    5160:	1d20      	adds	r0, r4, #4
    5162:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5164:	4607      	mov	r7, r0
    5166:	465a      	mov	r2, fp
    5168:	2301      	movs	r3, #1
    516a:	9500      	str	r5, [sp, #0]
    516c:	f008 fdd8 	bl	dd20 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    5170:	8820      	ldrh	r0, [r4, #0]
    5172:	4641      	mov	r1, r8
    5174:	4438      	add	r0, r7
    5176:	230a      	movs	r3, #10
    5178:	9a02      	ldr	r2, [sp, #8]
    517a:	f8cd a000 	str.w	sl, [sp]
    517e:	f008 fdcf 	bl	dd20 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    5182:	8820      	ldrh	r0, [r4, #0]
    5184:	19c1      	adds	r1, r0, r7
    5186:	4638      	mov	r0, r7
    5188:	f008 fdfb 	bl	dd82 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    518c:	f8d9 0000 	ldr.w	r0, [r9]
    5190:	6840      	ldr	r0, [r0, #4]
    5192:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    5196:	2000      	movs	r0, #0
    5198:	e7c2      	b.n	5120 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    519a:	2004      	movs	r0, #4
    519c:	e7c0      	b.n	5120 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    519e:	0000      	.short	0x0000
    51a0:	200000c0 	.word	0x200000c0

000051a4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    51a4:	b570      	push	{r4, r5, r6, lr}
    51a6:	4c14      	ldr	r4, [pc, #80]	; (51f8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    51a8:	6823      	ldr	r3, [r4, #0]
    51aa:	b18b      	cbz	r3, 51d0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    51ac:	7a19      	ldrb	r1, [r3, #8]
    51ae:	4281      	cmp	r1, r0
    51b0:	d912      	bls.n	51d8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    51b2:	685a      	ldr	r2, [r3, #4]
    51b4:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    51b8:	b171      	cbz	r1, 51d8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    51ba:	2500      	movs	r5, #0
    51bc:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    51c0:	884a      	ldrh	r2, [r1, #2]
    51c2:	6818      	ldr	r0, [r3, #0]
    51c4:	f008 fea5 	bl	df12 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    51c8:	6821      	ldr	r1, [r4, #0]
    51ca:	2000      	movs	r0, #0
    51cc:	7a0a      	ldrb	r2, [r1, #8]
    51ce:	e00c      	b.n	51ea <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    51d0:	21c8      	movs	r1, #200	; 0xc8
    51d2:	2018      	movs	r0, #24
    51d4:	f7ff fc32 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51d8:	f243 0002 	movw	r0, #12290	; 0x3002
    51dc:	bd70      	pop	{r4, r5, r6, pc}
    51de:	684b      	ldr	r3, [r1, #4]
    51e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    51e4:	b933      	cbnz	r3, 51f4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    51e6:	1c40      	adds	r0, r0, #1
    51e8:	b2c0      	uxtb	r0, r0
    51ea:	4282      	cmp	r2, r0
    51ec:	d8f7      	bhi.n	51de <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    51ee:	6808      	ldr	r0, [r1, #0]
    51f0:	f008 fe84 	bl	defc <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    51f4:	2000      	movs	r0, #0
    51f6:	bd70      	pop	{r4, r5, r6, pc}
    51f8:	200000c0 	.word	0x200000c0

000051fc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    51fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5200:	460d      	mov	r5, r1
    5202:	0004      	movs	r4, r0
    5204:	4690      	mov	r8, r2
    5206:	f04f 0600 	mov.w	r6, #0
    520a:	d009      	beq.n	5220 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    520c:	2700      	movs	r7, #0
    520e:	1ce0      	adds	r0, r4, #3
    5210:	f020 0003 	bic.w	r0, r0, #3
    5214:	42a0      	cmp	r0, r4
    5216:	d005      	beq.n	5224 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    5218:	2186      	movs	r1, #134	; 0x86
    521a:	2018      	movs	r0, #24
    521c:	f7ff fc0e 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5220:	2701      	movs	r7, #1
    5222:	e7f4      	b.n	520e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    5224:	b1cd      	cbz	r5, 525a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5226:	4611      	mov	r1, r2
    5228:	2000      	movs	r0, #0
    522a:	f008 fe4b 	bl	dec4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    522e:	300c      	adds	r0, #12
    5230:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    5234:	b98f      	cbnz	r7, 525a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5236:	4f0a      	ldr	r7, [pc, #40]	; (5260 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    5238:	f104 000c 	add.w	r0, r4, #12
    523c:	00aa      	lsls	r2, r5, #2
    523e:	603c      	str	r4, [r7, #0]
    5240:	7225      	strb	r5, [r4, #8]
    5242:	6060      	str	r0, [r4, #4]
    5244:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5248:	6020      	str	r0, [r4, #0]
    524a:	2100      	movs	r1, #0
    524c:	6860      	ldr	r0, [r4, #4]
    524e:	f007 febf 	bl	cfd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5252:	4641      	mov	r1, r8
    5254:	6838      	ldr	r0, [r7, #0]
    5256:	f008 fe35 	bl	dec4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    525a:	4630      	mov	r0, r6
    525c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5260:	200000c0 	.word	0x200000c0

00005264 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    5264:	b570      	push	{r4, r5, r6, lr}
    5266:	4d08      	ldr	r5, [pc, #32]	; (5288 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    5268:	6828      	ldr	r0, [r5, #0]
    526a:	2800      	cmp	r0, #0
    526c:	d00a      	beq.n	5284 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    526e:	2400      	movs	r4, #0
    5270:	e004      	b.n	527c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    5272:	4620      	mov	r0, r4
    5274:	f7ff ff96 	bl	51a4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    5278:	1c64      	adds	r4, r4, #1
    527a:	b2e4      	uxtb	r4, r4
    527c:	6828      	ldr	r0, [r5, #0]
    527e:	7a00      	ldrb	r0, [r0, #8]
    5280:	42a0      	cmp	r0, r4
    5282:	d8f6      	bhi.n	5272 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    5284:	bd70      	pop	{r4, r5, r6, pc}
    5286:	0000      	.short	0x0000
    5288:	200000c0 	.word	0x200000c0

0000528c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    528c:	4909      	ldr	r1, [pc, #36]	; (52b4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    528e:	b510      	push	{r4, lr}
    5290:	4602      	mov	r2, r0
    5292:	6809      	ldr	r1, [r1, #0]
    5294:	2000      	movs	r0, #0
    5296:	b149      	cbz	r1, 52ac <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    5298:	7a0b      	ldrb	r3, [r1, #8]
    529a:	4293      	cmp	r3, r2
    529c:	d905      	bls.n	52aa <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    529e:	6849      	ldr	r1, [r1, #4]
    52a0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    52a4:	2900      	cmp	r1, #0
    52a6:	d000      	beq.n	52aa <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    52a8:	1d08      	adds	r0, r1, #4
    52aa:	bd10      	pop	{r4, pc}
    52ac:	21ee      	movs	r1, #238	; 0xee
    52ae:	2018      	movs	r0, #24
    52b0:	f7ff fbc4 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52b4:	200000c0 	.word	0x200000c0

000052b8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    52b8:	490a      	ldr	r1, [pc, #40]	; (52e4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    52ba:	b510      	push	{r4, lr}
    52bc:	4602      	mov	r2, r0
    52be:	6809      	ldr	r1, [r1, #0]
    52c0:	2000      	movs	r0, #0
    52c2:	b159      	cbz	r1, 52dc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    52c4:	7a0b      	ldrb	r3, [r1, #8]
    52c6:	4293      	cmp	r3, r2
    52c8:	d907      	bls.n	52da <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    52ca:	6849      	ldr	r1, [r1, #4]
    52cc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    52d0:	2900      	cmp	r1, #0
    52d2:	d002      	beq.n	52da <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    52d4:	f831 0b04 	ldrh.w	r0, [r1], #4
    52d8:	4408      	add	r0, r1
    52da:	bd10      	pop	{r4, pc}
    52dc:	21fc      	movs	r1, #252	; 0xfc
    52de:	2018      	movs	r0, #24
    52e0:	f7ff fbac 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52e4:	200000c0 	.word	0x200000c0
    52e8:	b570      	push	{r4, r5, r6, lr}
    52ea:	4b1e      	ldr	r3, [pc, #120]	; (5364 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    52ec:	6845      	ldr	r5, [r0, #4]
    52ee:	4604      	mov	r4, r0
    52f0:	2200      	movs	r2, #0
    52f2:	b1a1      	cbz	r1, 531e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    52f4:	2001      	movs	r0, #1
    52f6:	7060      	strb	r0, [r4, #1]
    52f8:	8858      	ldrh	r0, [r3, #2]
    52fa:	0881      	lsrs	r1, r0, #2
    52fc:	f05f 0000 	movs.w	r0, #0
    5300:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    5304:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    5308:	831a      	strh	r2, [r3, #24]
    530a:	8419      	strh	r1, [r3, #32]
    530c:	fb00 5301 	mla	r3, r0, r1, r5
    5310:	6073      	str	r3, [r6, #4]
    5312:	1823      	adds	r3, r4, r0
    5314:	1c40      	adds	r0, r0, #1
    5316:	751a      	strb	r2, [r3, #20]
    5318:	2804      	cmp	r0, #4
    531a:	d3f1      	bcc.n	5300 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    531c:	bd70      	pop	{r4, r5, r6, pc}
    531e:	7062      	strb	r2, [r4, #1]
    5320:	f05f 0000 	movs.w	r0, #0
    5324:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    5328:	830a      	strh	r2, [r1, #24]
    532a:	840a      	strh	r2, [r1, #32]
    532c:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    5330:	604a      	str	r2, [r1, #4]
    5332:	1821      	adds	r1, r4, r0
    5334:	1c40      	adds	r0, r0, #1
    5336:	750a      	strb	r2, [r1, #20]
    5338:	2804      	cmp	r0, #4
    533a:	d3f3      	bcc.n	5324 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    533c:	8858      	ldrh	r0, [r3, #2]
    533e:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    5342:	d201      	bcs.n	5348 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    5344:	0846      	lsrs	r6, r0, #1
    5346:	e000      	b.n	534a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    5348:	26ff      	movs	r6, #255	; 0xff
    534a:	f008 feac 	bl	e0a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    534e:	6065      	str	r5, [r4, #4]
    5350:	8420      	strh	r0, [r4, #32]
    5352:	1829      	adds	r1, r5, r0
    5354:	60a1      	str	r1, [r4, #8]
    5356:	8466      	strh	r6, [r4, #34]	; 0x22
    5358:	60e5      	str	r5, [r4, #12]
    535a:	84a0      	strh	r0, [r4, #36]	; 0x24
    535c:	6121      	str	r1, [r4, #16]
    535e:	84e6      	strh	r6, [r4, #38]	; 0x26
    5360:	bd70      	pop	{r4, r5, r6, pc}
    5362:	0000      	.short	0x0000
    5364:	200000c4 	.word	0x200000c4

00005368 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    5368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    536c:	b170      	cbz	r0, 538c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    536e:	2500      	movs	r5, #0
    5370:	4411      	add	r1, r2
    5372:	b2cc      	uxtb	r4, r1
    5374:	4e25      	ldr	r6, [pc, #148]	; (540c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa4>)
    5376:	1cc1      	adds	r1, r0, #3
    5378:	2700      	movs	r7, #0
    537a:	f021 0103 	bic.w	r1, r1, #3
    537e:	7034      	strb	r4, [r6, #0]
    5380:	4281      	cmp	r1, r0
    5382:	d005      	beq.n	5390 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    5384:	214e      	movs	r1, #78	; 0x4e
    5386:	2009      	movs	r0, #9
    5388:	f7ff fb58 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    538c:	2501      	movs	r5, #1
    538e:	e7ef      	b.n	5370 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    5390:	2b1f      	cmp	r3, #31
    5392:	d804      	bhi.n	539e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x36>
    5394:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5398:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    539c:	e009      	b.n	53b2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    539e:	0059      	lsls	r1, r3, #1
    53a0:	2bff      	cmp	r3, #255	; 0xff
    53a2:	d90c      	bls.n	53be <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x56>
    53a4:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    53a8:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    53ac:	d200      	bcs.n	53b0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    53ae:	4611      	mov	r1, r2
    53b0:	b289      	uxth	r1, r1
    53b2:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    53b6:	1cc9      	adds	r1, r1, #3
    53b8:	4011      	ands	r1, r2
    53ba:	b135      	cbz	r5, 53ca <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x62>
    53bc:	e007      	b.n	53ce <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x66>
    53be:	227c      	movs	r2, #124	; 0x7c
    53c0:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    53c4:	d3f4      	bcc.n	53b0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    53c6:	217c      	movs	r1, #124	; 0x7c
    53c8:	e7f2      	b.n	53b0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    53ca:	6070      	str	r0, [r6, #4]
    53cc:	8071      	strh	r1, [r6, #2]
    53ce:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    53d2:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    53d6:	2200      	movs	r2, #0
    53d8:	6876      	ldr	r6, [r6, #4]
    53da:	f04f 0c01 	mov.w	ip, #1
    53de:	e00d      	b.n	53fc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x94>
    53e0:	b94d      	cbnz	r5, 53f6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    53e2:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    53e6:	eb00 0e03 	add.w	lr, r0, r3
    53ea:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    53ee:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    53f2:	f8c7 e004 	str.w	lr, [r7, #4]
    53f6:	1c52      	adds	r2, r2, #1
    53f8:	440b      	add	r3, r1
    53fa:	b2d2      	uxtb	r2, r2
    53fc:	42a2      	cmp	r2, r4
    53fe:	d3ef      	bcc.n	53e0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x78>
    5400:	1ddb      	adds	r3, r3, #7
    5402:	f023 0007 	bic.w	r0, r3, #7
    5406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    540a:	0000      	.short	0x0000
    540c:	200000c4 	.word	0x200000c4

00005410 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    5410:	b570      	push	{r4, r5, r6, lr}
    5412:	4a10      	ldr	r2, [pc, #64]	; (5454 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    5414:	2000      	movs	r0, #0
    5416:	6851      	ldr	r1, [r2, #4]
    5418:	7812      	ldrb	r2, [r2, #0]
    541a:	e014      	b.n	5446 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    541c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    5420:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    5424:	b16b      	cbz	r3, 5442 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    5426:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    542a:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    542e:	d00c      	beq.n	544a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    5430:	2500      	movs	r5, #0
    5432:	70a5      	strb	r5, [r4, #2]
    5434:	2101      	movs	r1, #1
    5436:	4620      	mov	r0, r4
    5438:	f7ff ff56 	bl	52e8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    543c:	7025      	strb	r5, [r4, #0]
    543e:	4620      	mov	r0, r4
    5440:	bd70      	pop	{r4, r5, r6, pc}
    5442:	1c40      	adds	r0, r0, #1
    5444:	b2c0      	uxtb	r0, r0
    5446:	4290      	cmp	r0, r2
    5448:	d3e8      	bcc.n	541c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    544a:	21a9      	movs	r1, #169	; 0xa9
    544c:	2009      	movs	r0, #9
    544e:	f7ff faf5 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5452:	0000      	.short	0x0000
    5454:	200000c4 	.word	0x200000c4

00005458 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    5458:	4804      	ldr	r0, [pc, #16]	; (546c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    545a:	b510      	push	{r4, lr}
    545c:	8840      	ldrh	r0, [r0, #2]
    545e:	0884      	lsrs	r4, r0, #2
    5460:	f008 fe21 	bl	e0a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    5464:	4284      	cmp	r4, r0
    5466:	d300      	bcc.n	546a <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    5468:	4620      	mov	r0, r4
    546a:	bd10      	pop	{r4, pc}
    546c:	200000c4 	.word	0x200000c4
    5470:	b530      	push	{r4, r5, lr}
    5472:	490d      	ldr	r1, [pc, #52]	; (54a8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    5474:	2001      	movs	r0, #1
    5476:	6048      	str	r0, [r1, #4]
    5478:	1e82      	subs	r2, r0, #2
    547a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    547e:	490b      	ldr	r1, [pc, #44]	; (54ac <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    5480:	6088      	str	r0, [r1, #8]
    5482:	2300      	movs	r3, #0
    5484:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    5488:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    548c:	4c08      	ldr	r4, [pc, #32]	; (54b0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    548e:	6023      	str	r3, [r4, #0]
    5490:	1d25      	adds	r5, r4, #4
    5492:	6028      	str	r0, [r5, #0]
    5494:	6088      	str	r0, [r1, #8]
    5496:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    549a:	6023      	str	r3, [r4, #0]
    549c:	6028      	str	r0, [r5, #0]
    549e:	4906      	ldr	r1, [pc, #24]	; (54b8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    54a0:	4804      	ldr	r0, [pc, #16]	; (54b4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    54a2:	6008      	str	r0, [r1, #0]
    54a4:	bd30      	pop	{r4, r5, pc}
    54a6:	0000      	.short	0x0000
    54a8:	4000e000 	.word	0x4000e000
    54ac:	4000f000 	.word	0x4000f000
    54b0:	4000f500 	.word	0x4000f500
    54b4:	3ff60000 	.word	0x3ff60000
    54b8:	4001f508 	.word	0x4001f508

000054bc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    54bc:	b510      	push	{r4, lr}
    54be:	4604      	mov	r4, r0
    54c0:	f7ff ffd6 	bl	5470 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    54c4:	f008 fec2 	bl	e24c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    54c8:	f000 f888 	bl	55dc <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    54cc:	4905      	ldr	r1, [pc, #20]	; (54e4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    54ce:	4804      	ldr	r0, [pc, #16]	; (54e0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    54d0:	6008      	str	r0, [r1, #0]
    54d2:	4620      	mov	r0, r4
    54d4:	f000 f8b8 	bl	5648 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    54d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    54dc:	f000 b8d0 	b.w	5680 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    54e0:	3ff60000 	.word	0x3ff60000
    54e4:	4001f508 	.word	0x4001f508
    54e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    54ec:	4682      	mov	sl, r0
    54ee:	4838      	ldr	r0, [pc, #224]	; (55d0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    54f0:	f007 fc5d 	bl	cdae <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    54f4:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 55d0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    54f8:	b128      	cbz	r0, 5506 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    54fa:	2601      	movs	r6, #1
    54fc:	f10b 0001 	add.w	r0, fp, #1
    5500:	21ff      	movs	r1, #255	; 0xff
    5502:	7001      	strb	r1, [r0, #0]
    5504:	e000      	b.n	5508 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    5506:	2600      	movs	r6, #0
    5508:	f44f 7580 	mov.w	r5, #256	; 0x100
    550c:	4c31      	ldr	r4, [pc, #196]	; (55d4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    550e:	f04f 0800 	mov.w	r8, #0
    5512:	1d2f      	adds	r7, r5, #4
    5514:	2101      	movs	r1, #1
    5516:	6061      	str	r1, [r4, #4]
    5518:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    551c:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    5520:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    5524:	6021      	str	r1, [r4, #0]
    5526:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 55d8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    552a:	e01c      	b.n	5566 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    552c:	f8d9 0000 	ldr.w	r0, [r9]
    5530:	06c0      	lsls	r0, r0, #27
    5532:	d518      	bpl.n	5566 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5534:	200e      	movs	r0, #14
    5536:	f008 fe98 	bl	e26a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    553a:	f3ef 8010 	mrs	r0, PRIMASK
    553e:	9000      	str	r0, [sp, #0]
    5540:	b672      	cpsid	i
    5542:	2103      	movs	r1, #3
    5544:	4620      	mov	r0, r4
    5546:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    554a:	4629      	mov	r1, r5
    554c:	f008 fe9a 	bl	e284 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5550:	b930      	cbnz	r0, 5560 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    5552:	4639      	mov	r1, r7
    5554:	4620      	mov	r0, r4
    5556:	f008 fe95 	bl	e284 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    555a:	b908      	cbnz	r0, 5560 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    555c:	f7ff f8c8 	bl	46f0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    5560:	9800      	ldr	r0, [sp, #0]
    5562:	b900      	cbnz	r0, 5566 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5564:	b662      	cpsie	i
    5566:	4629      	mov	r1, r5
    5568:	4620      	mov	r0, r4
    556a:	f008 fe8b 	bl	e284 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    556e:	b928      	cbnz	r0, 557c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    5570:	4639      	mov	r1, r7
    5572:	4620      	mov	r0, r4
    5574:	f008 fe86 	bl	e284 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5578:	2800      	cmp	r0, #0
    557a:	d0d7      	beq.n	552c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    557c:	4639      	mov	r1, r7
    557e:	4620      	mov	r0, r4
    5580:	f008 fe80 	bl	e284 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5584:	2800      	cmp	r0, #0
    5586:	d1c5      	bne.n	5514 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    5588:	bb06      	cbnz	r6, 55cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    558a:	f89b 1001 	ldrb.w	r1, [fp, #1]
    558e:	f88d 1000 	strb.w	r1, [sp]
    5592:	9900      	ldr	r1, [sp, #0]
    5594:	9100      	str	r1, [sp, #0]
    5596:	f89d 1000 	ldrb.w	r1, [sp]
    559a:	b109      	cbz	r1, 55a0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    559c:	2501      	movs	r5, #1
    559e:	e000      	b.n	55a2 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    55a0:	2500      	movs	r5, #0
    55a2:	f10b 0001 	add.w	r0, fp, #1
    55a6:	f880 8000 	strb.w	r8, [r0]
    55aa:	2003      	movs	r0, #3
    55ac:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    55b0:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    55b4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    55b8:	200e      	movs	r0, #14
    55ba:	f008 fe56 	bl	e26a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    55be:	4804      	ldr	r0, [pc, #16]	; (55d0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    55c0:	f007 fc0c 	bl	cddc <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    55c4:	b115      	cbz	r5, 55cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    55c6:	2011      	movs	r0, #17
    55c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55cc:	2000      	movs	r0, #0
    55ce:	e7fb      	b.n	55c8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    55d0:	2000032c 	.word	0x2000032c
    55d4:	4000e000 	.word	0x4000e000
    55d8:	e000ed10 	.word	0xe000ed10

000055dc <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    55dc:	b510      	push	{r4, lr}
    55de:	4806      	ldr	r0, [pc, #24]	; (55f8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    55e0:	f007 fbf8 	bl	cdd4 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    55e4:	b118      	cbz	r0, 55ee <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    55e6:	2127      	movs	r1, #39	; 0x27
    55e8:	201d      	movs	r0, #29
    55ea:	f7ff fa27 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    55ee:	4802      	ldr	r0, [pc, #8]	; (55f8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    55f0:	2100      	movs	r1, #0
    55f2:	7041      	strb	r1, [r0, #1]
    55f4:	bd10      	pop	{r4, pc}
    55f6:	0000      	.short	0x0000
    55f8:	2000032c 	.word	0x2000032c

000055fc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    55fc:	b570      	push	{r4, r5, r6, lr}
    55fe:	4911      	ldr	r1, [pc, #68]	; (5644 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    5600:	680a      	ldr	r2, [r1, #0]
    5602:	b1ea      	cbz	r2, 5640 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    5604:	2300      	movs	r3, #0
    5606:	461d      	mov	r5, r3
    5608:	2401      	movs	r4, #1
    560a:	684a      	ldr	r2, [r1, #4]
    560c:	1c52      	adds	r2, r2, #1
    560e:	604a      	str	r2, [r1, #4]
    5610:	2a09      	cmp	r2, #9
    5612:	d300      	bcc.n	5616 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    5614:	604d      	str	r5, [r1, #4]
    5616:	790e      	ldrb	r6, [r1, #4]
    5618:	fa04 f206 	lsl.w	r2, r4, r6
    561c:	680e      	ldr	r6, [r1, #0]
    561e:	4216      	tst	r6, r2
    5620:	d00b      	beq.n	563a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    5622:	f3ef 8310 	mrs	r3, PRIMASK
    5626:	b672      	cpsid	i
    5628:	680c      	ldr	r4, [r1, #0]
    562a:	4394      	bics	r4, r2
    562c:	600c      	str	r4, [r1, #0]
    562e:	b903      	cbnz	r3, 5632 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    5630:	b662      	cpsie	i
    5632:	6849      	ldr	r1, [r1, #4]
    5634:	6001      	str	r1, [r0, #0]
    5636:	2000      	movs	r0, #0
    5638:	bd70      	pop	{r4, r5, r6, pc}
    563a:	1c5b      	adds	r3, r3, #1
    563c:	2b09      	cmp	r3, #9
    563e:	d3e4      	bcc.n	560a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    5640:	2005      	movs	r0, #5
    5642:	bd70      	pop	{r4, r5, r6, pc}
    5644:	200000cc 	.word	0x200000cc

00005648 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    5648:	4802      	ldr	r0, [pc, #8]	; (5654 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    564a:	2100      	movs	r1, #0
    564c:	6001      	str	r1, [r0, #0]
    564e:	6041      	str	r1, [r0, #4]
    5650:	4770      	bx	lr
    5652:	0000      	.short	0x0000
    5654:	200000cc 	.word	0x200000cc

00005658 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    5658:	b510      	push	{r4, lr}
    565a:	4c08      	ldr	r4, [pc, #32]	; (567c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    565c:	7861      	ldrb	r1, [r4, #1]
    565e:	b109      	cbz	r1, 5664 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    5660:	200f      	movs	r0, #15
    5662:	bd10      	pop	{r4, pc}
    5664:	f7fe ffd0 	bl	4608 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5668:	7020      	strb	r0, [r4, #0]
    566a:	28ff      	cmp	r0, #255	; 0xff
    566c:	d001      	beq.n	5672 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    566e:	2000      	movs	r0, #0
    5670:	bd10      	pop	{r4, pc}
    5672:	2178      	movs	r1, #120	; 0x78
    5674:	201f      	movs	r0, #31
    5676:	f7ff f9e1 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    567a:	0000      	.short	0x0000
    567c:	20000000 	.word	0x20000000

00005680 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    5680:	4901      	ldr	r1, [pc, #4]	; (5688 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    5682:	2000      	movs	r0, #0
    5684:	7048      	strb	r0, [r1, #1]
    5686:	4770      	bx	lr
    5688:	20000000 	.word	0x20000000

0000568c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    568c:	4806      	ldr	r0, [pc, #24]	; (56a8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    568e:	4a07      	ldr	r2, [pc, #28]	; (56ac <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    5690:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    5692:	8852      	ldrh	r2, [r2, #2]
    5694:	4291      	cmp	r1, r2
    5696:	d104      	bne.n	56a2 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5698:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    569c:	b108      	cbz	r0, 56a2 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    569e:	2000      	movs	r0, #0
    56a0:	4770      	bx	lr
    56a2:	2001      	movs	r0, #1
    56a4:	4770      	bx	lr
    56a6:	0000      	.short	0x0000
    56a8:	2000143c 	.word	0x2000143c
    56ac:	20000318 	.word	0x20000318

000056b0 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    56b0:	4901      	ldr	r1, [pc, #4]	; (56b8 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    56b2:	8048      	strh	r0, [r1, #2]
    56b4:	4770      	bx	lr
    56b6:	0000      	.short	0x0000
    56b8:	20000318 	.word	0x20000318

000056bc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    56bc:	4808      	ldr	r0, [pc, #32]	; (56e0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    56be:	4a09      	ldr	r2, [pc, #36]	; (56e4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    56c0:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    56c2:	8852      	ldrh	r2, [r2, #2]
    56c4:	4291      	cmp	r1, r2
    56c6:	d109      	bne.n	56dc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    56c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    56cc:	8481      	strh	r1, [r0, #36]	; 0x24
    56ce:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    56d2:	b119      	cbz	r1, 56dc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    56d4:	2100      	movs	r1, #0
    56d6:	7001      	strb	r1, [r0, #0]
    56d8:	2001      	movs	r0, #1
    56da:	4770      	bx	lr
    56dc:	2000      	movs	r0, #0
    56de:	4770      	bx	lr
    56e0:	2000143c 	.word	0x2000143c
    56e4:	20000318 	.word	0x20000318

000056e8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    56e8:	4807      	ldr	r0, [pc, #28]	; (5708 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    56ea:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    56ee:	2901      	cmp	r1, #1
    56f0:	d007      	beq.n	5702 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    56f2:	2101      	movs	r1, #1
    56f4:	7001      	strb	r1, [r0, #0]
    56f6:	4805      	ldr	r0, [pc, #20]	; (570c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    56f8:	4903      	ldr	r1, [pc, #12]	; (5708 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    56fa:	8800      	ldrh	r0, [r0, #0]
    56fc:	8488      	strh	r0, [r1, #36]	; 0x24
    56fe:	2001      	movs	r0, #1
    5700:	4770      	bx	lr
    5702:	2000      	movs	r0, #0
    5704:	4770      	bx	lr
    5706:	0000      	.short	0x0000
    5708:	2000143c 	.word	0x2000143c
    570c:	20000318 	.word	0x20000318

00005710 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    5710:	4906      	ldr	r1, [pc, #24]	; (572c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    5712:	4b07      	ldr	r3, [pc, #28]	; (5730 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    5714:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5716:	885b      	ldrh	r3, [r3, #2]
    5718:	429a      	cmp	r2, r3
    571a:	d105      	bne.n	5728 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    571c:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5720:	b112      	cbz	r2, 5728 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5722:	6001      	str	r1, [r0, #0]
    5724:	2001      	movs	r0, #1
    5726:	4770      	bx	lr
    5728:	2000      	movs	r0, #0
    572a:	4770      	bx	lr
    572c:	2000143c 	.word	0x2000143c
    5730:	20000318 	.word	0x20000318

00005734 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    5734:	4909      	ldr	r1, [pc, #36]	; (575c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5736:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5738:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    573c:	3bff      	subs	r3, #255	; 0xff
    573e:	d002      	beq.n	5746 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    5740:	2100      	movs	r1, #0
    5742:	6001      	str	r1, [r0, #0]
    5744:	e007      	b.n	5756 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5746:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    574a:	4904      	ldr	r1, [pc, #16]	; (575c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    574c:	2a01      	cmp	r2, #1
    574e:	d002      	beq.n	5756 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5750:	6001      	str	r1, [r0, #0]
    5752:	2001      	movs	r0, #1
    5754:	4770      	bx	lr
    5756:	2000      	movs	r0, #0
    5758:	4770      	bx	lr
    575a:	0000      	.short	0x0000
    575c:	2000143c 	.word	0x2000143c

00005760 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    5760:	4901      	ldr	r1, [pc, #4]	; (5768 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    5762:	8008      	strh	r0, [r1, #0]
    5764:	4770      	bx	lr
    5766:	0000      	.short	0x0000
    5768:	20000318 	.word	0x20000318

0000576c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    576c:	4905      	ldr	r1, [pc, #20]	; (5784 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    576e:	2000      	movs	r0, #0
    5770:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5774:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5778:	8488      	strh	r0, [r1, #36]	; 0x24
    577a:	4903      	ldr	r1, [pc, #12]	; (5788 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    577c:	8008      	strh	r0, [r1, #0]
    577e:	8048      	strh	r0, [r1, #2]
    5780:	4770      	bx	lr
    5782:	0000      	.short	0x0000
    5784:	2000143c 	.word	0x2000143c
    5788:	20000318 	.word	0x20000318
    578c:	4905      	ldr	r1, [pc, #20]	; (57a4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    578e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5790:	4282      	cmp	r2, r0
    5792:	d105      	bne.n	57a0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    5794:	2000      	movs	r0, #0
    5796:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    579a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    579e:	8488      	strh	r0, [r1, #36]	; 0x24
    57a0:	4770      	bx	lr
    57a2:	0000      	.short	0x0000
    57a4:	2000143c 	.word	0x2000143c

000057a8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    57a8:	4a0a      	ldr	r2, [pc, #40]	; (57d4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    57aa:	b110      	cbz	r0, 57b2 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    57ac:	2801      	cmp	r0, #1
    57ae:	d007      	beq.n	57c0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    57b0:	e00e      	b.n	57d0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    57b2:	7850      	ldrb	r0, [r2, #1]
    57b4:	b160      	cbz	r0, 57d0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    57b6:	f8d2 0002 	ldr.w	r0, [r2, #2]
    57ba:	6008      	str	r0, [r1, #0]
    57bc:	88d0      	ldrh	r0, [r2, #6]
    57be:	e004      	b.n	57ca <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    57c0:	7810      	ldrb	r0, [r2, #0]
    57c2:	b128      	cbz	r0, 57d0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    57c4:	6890      	ldr	r0, [r2, #8]
    57c6:	6008      	str	r0, [r1, #0]
    57c8:	8990      	ldrh	r0, [r2, #12]
    57ca:	8088      	strh	r0, [r1, #4]
    57cc:	2001      	movs	r0, #1
    57ce:	4770      	bx	lr
    57d0:	2000      	movs	r0, #0
    57d2:	4770      	bx	lr
    57d4:	2000032e 	.word	0x2000032e

000057d8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    57d8:	4a08      	ldr	r2, [pc, #32]	; (57fc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    57da:	2301      	movs	r3, #1
    57dc:	b138      	cbz	r0, 57ee <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    57de:	2801      	cmp	r0, #1
    57e0:	d104      	bne.n	57ec <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    57e2:	7013      	strb	r3, [r2, #0]
    57e4:	6808      	ldr	r0, [r1, #0]
    57e6:	6090      	str	r0, [r2, #8]
    57e8:	8888      	ldrh	r0, [r1, #4]
    57ea:	8190      	strh	r0, [r2, #12]
    57ec:	4770      	bx	lr
    57ee:	7053      	strb	r3, [r2, #1]
    57f0:	6808      	ldr	r0, [r1, #0]
    57f2:	f8c2 0002 	str.w	r0, [r2, #2]
    57f6:	8888      	ldrh	r0, [r1, #4]
    57f8:	80d0      	strh	r0, [r2, #6]
    57fa:	4770      	bx	lr
    57fc:	2000032e 	.word	0x2000032e

00005800 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    5800:	4906      	ldr	r1, [pc, #24]	; (581c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    5802:	b110      	cbz	r0, 580a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    5804:	2801      	cmp	r0, #1
    5806:	d002      	beq.n	580e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    5808:	e005      	b.n	5816 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    580a:	7848      	ldrb	r0, [r1, #1]
    580c:	e000      	b.n	5810 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    580e:	7808      	ldrb	r0, [r1, #0]
    5810:	b108      	cbz	r0, 5816 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5812:	2001      	movs	r0, #1
    5814:	4770      	bx	lr
    5816:	2000      	movs	r0, #0
    5818:	4770      	bx	lr
    581a:	0000      	.short	0x0000
    581c:	2000032e 	.word	0x2000032e

00005820 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    5820:	4901      	ldr	r1, [pc, #4]	; (5828 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    5822:	7708      	strb	r0, [r1, #28]
    5824:	4770      	bx	lr
    5826:	0000      	.short	0x0000
    5828:	20000cf2 	.word	0x20000cf2

0000582c <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    582c:	4801      	ldr	r0, [pc, #4]	; (5834 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    582e:	78c0      	ldrb	r0, [r0, #3]
    5830:	4770      	bx	lr
    5832:	0000      	.short	0x0000
    5834:	200000d4 	.word	0x200000d4

00005838 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    5838:	4801      	ldr	r0, [pc, #4]	; (5840 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    583a:	7900      	ldrb	r0, [r0, #4]
    583c:	4770      	bx	lr
    583e:	0000      	.short	0x0000
    5840:	200000d4 	.word	0x200000d4

00005844 <sym_TMJZXA73A2C5DMM5JAVJMETINB7KCHBEWVPWZQI>:
    5844:	4608      	mov	r0, r1
    5846:	2100      	movs	r1, #0
    5848:	7041      	strb	r1, [r0, #1]
    584a:	211a      	movs	r1, #26
    584c:	f800 1b04 	strb.w	r1, [r0], #4
    5850:	220e      	movs	r2, #14
    5852:	4901      	ldr	r1, [pc, #4]	; (5858 <sym_TMJZXA73A2C5DMM5JAVJMETINB7KCHBEWVPWZQI+0x14>)
    5854:	f007 bb42 	b.w	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5858:	20000d00 	.word	0x20000d00

0000585c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    585c:	b510      	push	{r4, lr}
    585e:	4604      	mov	r4, r0
    5860:	f000 f952 	bl	5b08 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    5864:	b118      	cbz	r0, 586e <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    5866:	21c2      	movs	r1, #194	; 0xc2
    5868:	2027      	movs	r0, #39	; 0x27
    586a:	f7ff f8e7 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    586e:	4803      	ldr	r0, [pc, #12]	; (587c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    5870:	2101      	movs	r1, #1
    5872:	f009 f921 	bl	eab8 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5876:	4802      	ldr	r0, [pc, #8]	; (5880 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    5878:	62c4      	str	r4, [r0, #44]	; 0x2c
    587a:	bd10      	pop	{r4, pc}
    587c:	20000cd0 	.word	0x20000cd0
    5880:	200000d4 	.word	0x200000d4

00005884 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5884:	4901      	ldr	r1, [pc, #4]	; (588c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    5886:	2001      	movs	r0, #1
    5888:	7188      	strb	r0, [r1, #6]
    588a:	4770      	bx	lr
    588c:	200000d4 	.word	0x200000d4

00005890 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5894:	4c5e      	ldr	r4, [pc, #376]	; (5a10 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>)
    5896:	9d06      	ldr	r5, [sp, #24]
    5898:	7826      	ldrb	r6, [r4, #0]
    589a:	2e00      	cmp	r6, #0
    589c:	d16b      	bne.n	5976 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    589e:	2a00      	cmp	r2, #0
    58a0:	d069      	beq.n	5976 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    58a2:	2b00      	cmp	r3, #0
    58a4:	d067      	beq.n	5976 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    58a6:	2d00      	cmp	r5, #0
    58a8:	d065      	beq.n	5976 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    58aa:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    58ae:	f104 0614 	add.w	r6, r4, #20
    58b2:	2000      	movs	r0, #0
    58b4:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    58b8:	71a0      	strb	r0, [r4, #6]
    58ba:	7160      	strb	r0, [r4, #5]
    58bc:	70e0      	strb	r0, [r4, #3]
    58be:	70a0      	strb	r0, [r4, #2]
    58c0:	7120      	strb	r0, [r4, #4]
    58c2:	81a0      	strh	r0, [r4, #12]
    58c4:	81e0      	strh	r0, [r4, #14]
    58c6:	f000 f957 	bl	5b78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    58ca:	4606      	mov	r6, r0
    58cc:	f000 f94e 	bl	5b6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    58d0:	4605      	mov	r5, r0
    58d2:	f006 f813 	bl	b8fc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    58d6:	f005 fd6b 	bl	b3b0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    58da:	f995 0072 	ldrsb.w	r0, [r5, #114]	; 0x72
    58de:	f006 f891 	bl	ba04 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    58e2:	f105 001c 	add.w	r0, r5, #28
    58e6:	f006 f963 	bl	bbb0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    58ea:	6968      	ldr	r0, [r5, #20]
    58ec:	f006 f956 	bl	bb9c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    58f0:	f896 0024 	ldrb.w	r0, [r6, #36]	; 0x24
    58f4:	f006 f990 	bl	bc18 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    58f8:	f104 0038 	add.w	r0, r4, #56	; 0x38
    58fc:	6840      	ldr	r0, [r0, #4]
    58fe:	f890 01c6 	ldrb.w	r0, [r0, #454]	; 0x1c6
    5902:	b108      	cbz	r0, 5908 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    5904:	f005 ff7a 	bl	b7fc <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    5908:	f895 106f 	ldrb.w	r1, [r5, #111]	; 0x6f
    590c:	2001      	movs	r0, #1
    590e:	f005 feb9 	bl	b684 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    5912:	2800      	cmp	r0, #0
    5914:	d075      	beq.n	5a02 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    5916:	483f      	ldr	r0, [pc, #252]	; (5a14 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5918:	f005 ff20 	bl	b75c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    591c:	8828      	ldrh	r0, [r5, #0]
    591e:	f7ff fccb 	bl	52b8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5922:	6320      	str	r0, [r4, #48]	; 0x30
    5924:	8828      	ldrh	r0, [r5, #0]
    5926:	f7ff fcb1 	bl	528c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    592a:	6360      	str	r0, [r4, #52]	; 0x34
    592c:	3678      	adds	r6, #120	; 0x78
    592e:	483a      	ldr	r0, [pc, #232]	; (5a18 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    5930:	ce8e      	ldmia	r6!, {r1, r2, r3, r7}
    5932:	f100 0808 	add.w	r8, r0, #8
    5936:	e888 008e 	stmia.w	r8, {r1, r2, r3, r7}
    593a:	f856 1b04 	ldr.w	r1, [r6], #4
    593e:	f8c0 1021 	str.w	r1, [r0, #33]	; 0x21
    5942:	f856 198c 	ldr.w	r1, [r6], #-140
    5946:	f8c0 1025 	str.w	r1, [r0, #37]	; 0x25
    594a:	f000 f999 	bl	5c80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x15c>
    594e:	4601      	mov	r1, r0
    5950:	8fa8      	ldrh	r0, [r5, #60]	; 0x3c
    5952:	f008 fe22 	bl	e59a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5956:	8f29      	ldrh	r1, [r5, #56]	; 0x38
    5958:	4281      	cmp	r1, r0
    595a:	d200      	bcs.n	595e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xce>
    595c:	4608      	mov	r0, r1
    595e:	7220      	strb	r0, [r4, #8]
    5960:	46a0      	mov	r8, r4
    5962:	f895 106f 	ldrb.w	r1, [r5, #111]	; 0x6f
    5966:	f8b5 0042 	ldrh.w	r0, [r5, #66]	; 0x42
    596a:	7d37      	ldrb	r7, [r6, #20]
    596c:	f8b5 4040 	ldrh.w	r4, [r5, #64]	; 0x40
    5970:	2908      	cmp	r1, #8
    5972:	d104      	bne.n	597e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
    5974:	e002      	b.n	597c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    5976:	f44f 718d 	mov.w	r1, #282	; 0x11a
    597a:	e046      	b.n	5a0a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17a>
    597c:	2104      	movs	r1, #4
    597e:	f008 fe0c 	bl	e59a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5982:	b90f      	cbnz	r7, 5988 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
    5984:	1d00      	adds	r0, r0, #4
    5986:	b280      	uxth	r0, r0
    5988:	4284      	cmp	r4, r0
    598a:	d200      	bcs.n	598e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    598c:	4620      	mov	r0, r4
    598e:	b2c4      	uxtb	r4, r0
    5990:	f888 4009 	strb.w	r4, [r8, #9]
    5994:	7d31      	ldrb	r1, [r6, #20]
    5996:	2900      	cmp	r1, #0
    5998:	d002      	beq.n	59a0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    599a:	bf00      	nop
    599c:	f04f 0104 	mov.w	r1, #4
    59a0:	4421      	add	r1, r4
    59a2:	f888 1007 	strb.w	r1, [r8, #7]
    59a6:	d014      	beq.n	59d2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x142>
    59a8:	481b      	ldr	r0, [pc, #108]	; (5a18 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    59aa:	f04f 0701 	mov.w	r7, #1
    59ae:	f100 0008 	add.w	r0, r0, #8
    59b2:	7607      	strb	r7, [r0, #24]
    59b4:	e9d6 121c 	ldrd	r1, r2, [r6, #112]	; 0x70
    59b8:	e9c0 1204 	strd	r1, r2, [r0, #16]
    59bc:	f895 006f 	ldrb.w	r0, [r5, #111]	; 0x6f
    59c0:	f008 fcf1 	bl	e3a6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    59c4:	4914      	ldr	r1, [pc, #80]	; (5a18 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    59c6:	4603      	mov	r3, r0
    59c8:	4622      	mov	r2, r4
    59ca:	3108      	adds	r1, #8
    59cc:	4638      	mov	r0, r7
    59ce:	f005 fc5b 	bl	b288 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    59d2:	2001      	movs	r0, #1
    59d4:	f000 fb9a 	bl	610c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    59d8:	4810      	ldr	r0, [pc, #64]	; (5a1c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    59da:	6800      	ldr	r0, [r0, #0]
    59dc:	2803      	cmp	r0, #3
    59de:	d012      	beq.n	5a06 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    59e0:	280b      	cmp	r0, #11
    59e2:	d010      	beq.n	5a06 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    59e4:	480c      	ldr	r0, [pc, #48]	; (5a18 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    59e6:	220e      	movs	r2, #14
    59e8:	2100      	movs	r1, #0
    59ea:	3052      	adds	r0, #82	; 0x52
    59ec:	f007 faf0 	bl	cfd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    59f0:	4809      	ldr	r0, [pc, #36]	; (5a18 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    59f2:	88b1      	ldrh	r1, [r6, #4]
    59f4:	3052      	adds	r0, #82	; 0x52
    59f6:	8041      	strh	r1, [r0, #2]
    59f8:	8829      	ldrh	r1, [r5, #0]
    59fa:	8001      	strh	r1, [r0, #0]
    59fc:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    5a00:	7101      	strb	r1, [r0, #4]
    5a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a06:	f240 11d5 	movw	r1, #469	; 0x1d5
    5a0a:	2027      	movs	r0, #39	; 0x27
    5a0c:	f7ff f816 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a10:	200000d4 	.word	0x200000d4
    5a14:	0000630c 	.word	0x0000630c
    5a18:	20000ca0 	.word	0x20000ca0
    5a1c:	40001550 	.word	0x40001550

00005a20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    5a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a24:	4605      	mov	r5, r0
    5a26:	f000 f8a7 	bl	5b78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5a2a:	4e32      	ldr	r6, [pc, #200]	; (5af4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd4>)
    5a2c:	4604      	mov	r4, r0
    5a2e:	f04f 0800 	mov.w	r8, #0
    5a32:	6a70      	ldr	r0, [r6, #36]	; 0x24
    5a34:	7847      	ldrb	r7, [r0, #1]
    5a36:	b10d      	cbz	r5, 5a3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x1c>
    5a38:	2d01      	cmp	r5, #1
    5a3a:	d101      	bne.n	5a40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    5a3c:	f886 8001 	strb.w	r8, [r6, #1]
    5a40:	7870      	ldrb	r0, [r6, #1]
    5a42:	f04f 0901 	mov.w	r9, #1
    5a46:	b150      	cbz	r0, 5a5e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x3e>
    5a48:	2801      	cmp	r0, #1
    5a4a:	d01a      	beq.n	5a82 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x62>
    5a4c:	2802      	cmp	r0, #2
    5a4e:	d034      	beq.n	5aba <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9a>
    5a50:	2803      	cmp	r0, #3
    5a52:	d048      	beq.n	5ae6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc6>
    5a54:	f240 411d 	movw	r1, #1053	; 0x41d
    5a58:	2027      	movs	r0, #39	; 0x27
    5a5a:	f7fe ffef 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a5e:	2d01      	cmp	r5, #1
    5a60:	d032      	beq.n	5ac8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5a62:	f000 f8f9 	bl	5c58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    5a66:	4639      	mov	r1, r7
    5a68:	2201      	movs	r2, #1
    5a6a:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5a6c:	f007 fff5 	bl	da5a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5a70:	e028      	b.n	5ac4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa4>
    5a72:	bf00      	nop
    5a74:	f884 8008 	strb.w	r8, [r4, #8]
    5a78:	e031      	b.n	5ade <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    5a7a:	bf00      	nop
    5a7c:	f884 9008 	strb.w	r9, [r4, #8]
    5a80:	e02d      	b.n	5ade <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    5a82:	2d01      	cmp	r5, #1
    5a84:	d008      	beq.n	5a98 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>
    5a86:	f000 f8e7 	bl	5c58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    5a8a:	4639      	mov	r1, r7
    5a8c:	2200      	movs	r2, #0
    5a8e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5a90:	f007 ffe3 	bl	da5a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5a94:	2d02      	cmp	r5, #2
    5a96:	d00b      	beq.n	5ab0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    5a98:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    5a9c:	1c40      	adds	r0, r0, #1
    5a9e:	f141 0100 	adc.w	r1, r1, #0
    5aa2:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    5aa6:	7a20      	ldrb	r0, [r4, #8]
    5aa8:	2801      	cmp	r0, #1
    5aaa:	d003      	beq.n	5ab4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5aac:	f884 9008 	strb.w	r9, [r4, #8]
    5ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ab4:	f884 8008 	strb.w	r8, [r4, #8]
    5ab8:	e7fa      	b.n	5ab0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    5aba:	2d01      	cmp	r5, #1
    5abc:	d004      	beq.n	5ac8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5abe:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5ac0:	f008 f9ca 	bl	de58 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5ac4:	2d02      	cmp	r5, #2
    5ac6:	d0f3      	beq.n	5ab0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    5ac8:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    5acc:	1c40      	adds	r0, r0, #1
    5ace:	f141 0100 	adc.w	r1, r1, #0
    5ad2:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    5ad6:	7a20      	ldrb	r0, [r4, #8]
    5ad8:	2801      	cmp	r0, #1
    5ada:	d1cf      	bne.n	5a7c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x5c>
    5adc:	e7ca      	b.n	5a74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x54>
    5ade:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ae2:	f001 b983 	b.w	6dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5ae6:	2d01      	cmp	r5, #1
    5ae8:	d0e2      	beq.n	5ab0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    5aea:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5aec:	f008 f9b4 	bl	de58 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5af0:	e7f5      	b.n	5ade <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    5af2:	0000      	.short	0x0000
    5af4:	200000d4 	.word	0x200000d4

00005af8 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    5af8:	4802      	ldr	r0, [pc, #8]	; (5b04 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    5afa:	89c0      	ldrh	r0, [r0, #14]
    5afc:	f3c0 2080 	ubfx	r0, r0, #10, #1
    5b00:	4770      	bx	lr
    5b02:	0000      	.short	0x0000
    5b04:	200000d4 	.word	0x200000d4

00005b08 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    5b08:	4804      	ldr	r0, [pc, #16]	; (5b1c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    5b0a:	7800      	ldrb	r0, [r0, #0]
    5b0c:	b108      	cbz	r0, 5b12 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    5b0e:	200c      	movs	r0, #12
    5b10:	4770      	bx	lr
    5b12:	4903      	ldr	r1, [pc, #12]	; (5b20 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    5b14:	2000      	movs	r0, #0
    5b16:	7708      	strb	r0, [r1, #28]
    5b18:	4770      	bx	lr
    5b1a:	0000      	.short	0x0000
    5b1c:	200000d4 	.word	0x200000d4
    5b20:	20000cf2 	.word	0x20000cf2

00005b24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    5b24:	480c      	ldr	r0, [pc, #48]	; (5b58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    5b26:	b510      	push	{r4, lr}
    5b28:	7801      	ldrb	r1, [r0, #0]
    5b2a:	b149      	cbz	r1, 5b40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    5b2c:	f100 0138 	add.w	r1, r0, #56	; 0x38
    5b30:	7800      	ldrb	r0, [r0, #0]
    5b32:	2802      	cmp	r0, #2
    5b34:	d008      	beq.n	5b48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    5b36:	f240 11f1 	movw	r1, #497	; 0x1f1
    5b3a:	2027      	movs	r0, #39	; 0x27
    5b3c:	f7fe ff7e 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5b44:	f000 b9fe 	b.w	5f44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    5b48:	6848      	ldr	r0, [r1, #4]
    5b4a:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
    5b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5b52:	f005 be0b 	b.w	b76c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    5b56:	0000      	.short	0x0000
    5b58:	200000d4 	.word	0x200000d4
    5b5c:	4a02      	ldr	r2, [pc, #8]	; (5b68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    5b5e:	8993      	ldrh	r3, [r2, #12]
    5b60:	4303      	orrs	r3, r0
    5b62:	8193      	strh	r3, [r2, #12]
    5b64:	6952      	ldr	r2, [r2, #20]
    5b66:	4710      	bx	r2
    5b68:	200000d4 	.word	0x200000d4
    5b6c:	4801      	ldr	r0, [pc, #4]	; (5b74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    5b6e:	6840      	ldr	r0, [r0, #4]
    5b70:	4770      	bx	lr
    5b72:	0000      	.short	0x0000
    5b74:	2000010c 	.word	0x2000010c
    5b78:	4801      	ldr	r0, [pc, #4]	; (5b80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    5b7a:	6840      	ldr	r0, [r0, #4]
    5b7c:	3078      	adds	r0, #120	; 0x78
    5b7e:	4770      	bx	lr
    5b80:	2000010c 	.word	0x2000010c
    5b84:	4a01      	ldr	r2, [pc, #4]	; (5b8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    5b86:	2100      	movs	r1, #0
    5b88:	6952      	ldr	r2, [r2, #20]
    5b8a:	4710      	bx	r2
    5b8c:	200000d4 	.word	0x200000d4
    5b90:	b570      	push	{r4, r5, r6, lr}
    5b92:	f7ff fff1 	bl	5b78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5b96:	4604      	mov	r4, r0
    5b98:	f7ff ffe8 	bl	5b6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5b9c:	4605      	mov	r5, r0
    5b9e:	4621      	mov	r1, r4
    5ba0:	f008 fd8c 	bl	e6bc <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5ba4:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
    5ba8:	2901      	cmp	r1, #1
    5baa:	d112      	bne.n	5bd2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xae>
    5bac:	2800      	cmp	r0, #0
    5bae:	d010      	beq.n	5bd2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xae>
    5bb0:	4808      	ldr	r0, [pc, #32]	; (5bd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>)
    5bb2:	882a      	ldrh	r2, [r5, #0]
    5bb4:	6841      	ldr	r1, [r0, #4]
    5bb6:	f501 7096 	add.w	r0, r1, #300	; 0x12c
    5bba:	8142      	strh	r2, [r0, #10]
    5bbc:	7a62      	ldrb	r2, [r4, #9]
    5bbe:	7302      	strb	r2, [r0, #12]
    5bc0:	7aa2      	ldrb	r2, [r4, #10]
    5bc2:	7342      	strb	r2, [r0, #13]
    5bc4:	2218      	movs	r2, #24
    5bc6:	f001 f83f 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5bca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5bce:	f001 b90d 	b.w	6dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5bd2:	bd70      	pop	{r4, r5, r6, pc}
    5bd4:	2000010c 	.word	0x2000010c
    5bd8:	b570      	push	{r4, r5, r6, lr}
    5bda:	4605      	mov	r5, r0
    5bdc:	2901      	cmp	r1, #1
    5bde:	d818      	bhi.n	5c12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    5be0:	4c12      	ldr	r4, [pc, #72]	; (5c2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>)
    5be2:	69a1      	ldr	r1, [r4, #24]
    5be4:	4788      	blx	r1
    5be6:	b1a0      	cbz	r0, 5c12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    5be8:	7960      	ldrb	r0, [r4, #5]
    5bea:	b990      	cbnz	r0, 5c12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    5bec:	b9e5      	cbnz	r5, 5c28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    5bee:	f104 0010 	add.w	r0, r4, #16
    5bf2:	7801      	ldrb	r1, [r0, #0]
    5bf4:	06c8      	lsls	r0, r1, #27
    5bf6:	d405      	bmi.n	5c04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe0>
    5bf8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5bfa:	7800      	ldrb	r0, [r0, #0]
    5bfc:	06c0      	lsls	r0, r0, #27
    5bfe:	d401      	bmi.n	5c04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe0>
    5c00:	2001      	movs	r0, #1
    5c02:	e000      	b.n	5c06 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    5c04:	2000      	movs	r0, #0
    5c06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5c08:	b92a      	cbnz	r2, 5c16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5c0a:	8962      	ldrh	r2, [r4, #10]
    5c0c:	b11a      	cbz	r2, 5c16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5c0e:	06c9      	lsls	r1, r1, #27
    5c10:	d401      	bmi.n	5c16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5c12:	2001      	movs	r0, #1
    5c14:	bd70      	pop	{r4, r5, r6, pc}
    5c16:	89a1      	ldrh	r1, [r4, #12]
    5c18:	078a      	lsls	r2, r1, #30
    5c1a:	d503      	bpl.n	5c24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
    5c1c:	6a22      	ldr	r2, [r4, #32]
    5c1e:	78d2      	ldrb	r2, [r2, #3]
    5c20:	2a02      	cmp	r2, #2
    5c22:	d001      	beq.n	5c28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    5c24:	4308      	orrs	r0, r1
    5c26:	d1f4      	bne.n	5c12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    5c28:	2000      	movs	r0, #0
    5c2a:	bd70      	pop	{r4, r5, r6, pc}
    5c2c:	200000d4 	.word	0x200000d4
    5c30:	b530      	push	{r4, r5, lr}
    5c32:	4b08      	ldr	r3, [pc, #32]	; (5c54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>)
    5c34:	88dd      	ldrh	r5, [r3, #6]
    5c36:	891c      	ldrh	r4, [r3, #8]
    5c38:	b12a      	cbz	r2, 5c46 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x122>
    5c3a:	b908      	cbnz	r0, 5c40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    5c3c:	b905      	cbnz	r5, 5c40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    5c3e:	b114      	cbz	r4, 5c46 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x122>
    5c40:	8958      	ldrh	r0, [r3, #10]
    5c42:	1c40      	adds	r0, r0, #1
    5c44:	8158      	strh	r0, [r3, #10]
    5c46:	b111      	cbz	r1, 5c4e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12a>
    5c48:	1c6d      	adds	r5, r5, #1
    5c4a:	80dd      	strh	r5, [r3, #6]
    5c4c:	bd30      	pop	{r4, r5, pc}
    5c4e:	1c64      	adds	r4, r4, #1
    5c50:	811c      	strh	r4, [r3, #8]
    5c52:	bd30      	pop	{r4, r5, pc}
    5c54:	20000cf2 	.word	0x20000cf2
    5c58:	b510      	push	{r4, lr}
    5c5a:	4c08      	ldr	r4, [pc, #32]	; (5c7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x158>)
    5c5c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5c5e:	b138      	cbz	r0, 5c70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x14c>
    5c60:	8962      	ldrh	r2, [r4, #10]
    5c62:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5c64:	1cd2      	adds	r2, r2, #3
    5c66:	f007 f939 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5c6a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5c6c:	6260      	str	r0, [r4, #36]	; 0x24
    5c6e:	bd10      	pop	{r4, pc}
    5c70:	f240 4163 	movw	r1, #1123	; 0x463
    5c74:	2027      	movs	r0, #39	; 0x27
    5c76:	f7fe fee1 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c7a:	0000      	.short	0x0000
    5c7c:	200000d4 	.word	0x200000d4
    5c80:	b510      	push	{r4, lr}
    5c82:	f7ff ff73 	bl	5b6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5c86:	4604      	mov	r4, r0
    5c88:	f7ff ff76 	bl	5b78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5c8c:	4601      	mov	r1, r0
    5c8e:	7b42      	ldrb	r2, [r0, #13]
    5c90:	4815      	ldr	r0, [pc, #84]	; (5ce8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c4>)
    5c92:	2a24      	cmp	r2, #36	; 0x24
    5c94:	d00e      	beq.n	5cb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x190>
    5c96:	7b89      	ldrb	r1, [r1, #14]
    5c98:	2924      	cmp	r1, #36	; 0x24
    5c9a:	d00b      	beq.n	5cb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x190>
    5c9c:	2a1f      	cmp	r2, #31
    5c9e:	d00d      	beq.n	5cbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    5ca0:	2a20      	cmp	r2, #32
    5ca2:	d00b      	beq.n	5cbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    5ca4:	2922      	cmp	r1, #34	; 0x22
    5ca6:	d00f      	beq.n	5cc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
    5ca8:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    5cac:	2804      	cmp	r0, #4
    5cae:	d100      	bne.n	5cb2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18e>
    5cb0:	2008      	movs	r0, #8
    5cb2:	bd10      	pop	{r4, pc}
    5cb4:	6840      	ldr	r0, [r0, #4]
    5cb6:	f890 1276 	ldrb.w	r1, [r0, #630]	; 0x276
    5cba:	e00e      	b.n	5cda <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b6>
    5cbc:	2922      	cmp	r1, #34	; 0x22
    5cbe:	d003      	beq.n	5cc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
    5cc0:	6840      	ldr	r0, [r0, #4]
    5cc2:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    5cc6:	e005      	b.n	5cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b0>
    5cc8:	6841      	ldr	r1, [r0, #4]
    5cca:	f891 0126 	ldrb.w	r0, [r1, #294]	; 0x126
    5cce:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    5cd2:	4008      	ands	r0, r1
    5cd4:	f008 fb5d 	bl	e392 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5cd8:	4601      	mov	r1, r0
    5cda:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    5cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5ce2:	f008 bb6e 	b.w	e3c2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5ce6:	0000      	.short	0x0000
    5ce8:	2000010c 	.word	0x2000010c
    5cec:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5cf0:	468b      	mov	fp, r1
    5cf2:	4607      	mov	r7, r0
    5cf4:	f7ff ff40 	bl	5b78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5cf8:	f04f 0900 	mov.w	r9, #0
    5cfc:	4c61      	ldr	r4, [pc, #388]	; (5e84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>)
    5cfe:	4605      	mov	r5, r0
    5d00:	f88d 9000 	strb.w	r9, [sp]
    5d04:	f8cd 9004 	str.w	r9, [sp, #4]
    5d08:	7820      	ldrb	r0, [r4, #0]
    5d0a:	464e      	mov	r6, r9
    5d0c:	2802      	cmp	r0, #2
    5d0e:	d004      	beq.n	5d1a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f6>
    5d10:	f240 41ea 	movw	r1, #1258	; 0x4ea
    5d14:	2027      	movs	r0, #39	; 0x27
    5d16:	f7fe fe91 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d1a:	7ba0      	ldrb	r0, [r4, #14]
    5d1c:	0640      	lsls	r0, r0, #25
    5d1e:	d406      	bmi.n	5d2e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    5d20:	2040      	movs	r0, #64	; 0x40
    5d22:	f7ff ff2f 	bl	5b84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5d26:	89e0      	ldrh	r0, [r4, #14]
    5d28:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5d2c:	81e0      	strh	r0, [r4, #14]
    5d2e:	7d28      	ldrb	r0, [r5, #20]
    5d30:	b3df      	cbz	r7, 5daa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x286>
    5d32:	b180      	cbz	r0, 5d56 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    5d34:	f005 fb76 	bl	b424 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    5d38:	f005 fb50 	bl	b3dc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    5d3c:	b958      	cbnz	r0, 5d56 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    5d3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5d40:	7841      	ldrb	r1, [r0, #1]
    5d42:	b141      	cbz	r1, 5d56 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    5d44:	7800      	ldrb	r0, [r0, #0]
    5d46:	7a29      	ldrb	r1, [r5, #8]
    5d48:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5d4c:	4288      	cmp	r0, r1
    5d4e:	d102      	bne.n	5d56 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    5d50:	2001      	movs	r0, #1
    5d52:	70a0      	strb	r0, [r4, #2]
    5d54:	e092      	b.n	5e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    5d56:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5d58:	7841      	ldrb	r1, [r0, #1]
    5d5a:	8161      	strh	r1, [r4, #10]
    5d5c:	b121      	cbz	r1, 5d68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x244>
    5d5e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5d60:	f008 f847 	bl	ddf2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5d64:	62a0      	str	r0, [r4, #40]	; 0x28
    5d66:	e000      	b.n	5d6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x246>
    5d68:	62a6      	str	r6, [r4, #40]	; 0x28
    5d6a:	89e0      	ldrh	r0, [r4, #14]
    5d6c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5d70:	81e0      	strh	r0, [r4, #14]
    5d72:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5d74:	79e9      	ldrb	r1, [r5, #7]
    5d76:	7800      	ldrb	r0, [r0, #0]
    5d78:	f3c0 0080 	ubfx	r0, r0, #2, #1
    5d7c:	4288      	cmp	r0, r1
    5d7e:	d007      	beq.n	5d90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26c>
    5d80:	a801      	add	r0, sp, #4
    5d82:	f000 f975 	bl	6070 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54c>
    5d86:	89e0      	ldrh	r0, [r4, #14]
    5d88:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5d8c:	81e0      	strh	r0, [r4, #14]
    5d8e:	e001      	b.n	5d94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x270>
    5d90:	f04f 0901 	mov.w	r9, #1
    5d94:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5d96:	7a29      	ldrb	r1, [r5, #8]
    5d98:	7800      	ldrb	r0, [r0, #0]
    5d9a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5d9e:	4288      	cmp	r0, r1
    5da0:	d10e      	bne.n	5dc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29c>
    5da2:	4668      	mov	r0, sp
    5da4:	f000 f926 	bl	5ff4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d0>
    5da8:	e00a      	b.n	5dc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29c>
    5daa:	e7ff      	b.n	5dac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x288>
    5dac:	b108      	cbz	r0, 5db2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    5dae:	f005 fb33 	bl	b418 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5db2:	78e0      	ldrb	r0, [r4, #3]
    5db4:	1c40      	adds	r0, r0, #1
    5db6:	70e0      	strb	r0, [r4, #3]
    5db8:	89e0      	ldrh	r0, [r4, #14]
    5dba:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5dbe:	81e0      	strh	r0, [r4, #14]
    5dc0:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 5e84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    5dc4:	7ce8      	ldrb	r0, [r5, #19]
    5dc6:	f10a 0a38 	add.w	sl, sl, #56	; 0x38
    5dca:	b188      	cbz	r0, 5df0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2cc>
    5dcc:	f7ff fece 	bl	5b6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5dd0:	492d      	ldr	r1, [pc, #180]	; (5e88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>)
    5dd2:	760e      	strb	r6, [r1, #24]
    5dd4:	e9d5 231a 	ldrd	r2, r3, [r5, #104]	; 0x68
    5dd8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5ddc:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    5de0:	f008 fae1 	bl	e3a6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5de4:	4603      	mov	r3, r0
    5de6:	22fb      	movs	r2, #251	; 0xfb
    5de8:	4927      	ldr	r1, [pc, #156]	; (5e88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>)
    5dea:	4630      	mov	r0, r6
    5dec:	f005 fa4c 	bl	b288 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    5df0:	f04f 0800 	mov.w	r8, #0
    5df4:	f1bb 0f00 	cmp.w	fp, #0
    5df8:	d104      	bne.n	5e04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>
    5dfa:	78e1      	ldrb	r1, [r4, #3]
    5dfc:	2001      	movs	r0, #1
    5dfe:	f7ff feeb 	bl	5bd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>
    5e02:	b198      	cbz	r0, 5e2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x308>
    5e04:	f005 feb6 	bl	bb74 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    5e08:	f89d 0000 	ldrb.w	r0, [sp]
    5e0c:	b110      	cbz	r0, 5e14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>
    5e0e:	2000      	movs	r0, #0
    5e10:	f7ff fe06 	bl	5a20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5e14:	88a8      	ldrh	r0, [r5, #4]
    5e16:	464a      	mov	r2, r9
    5e18:	4639      	mov	r1, r7
    5e1a:	f7ff ff09 	bl	5c30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    5e1e:	b117      	cbz	r7, 5e26 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x302>
    5e20:	70e6      	strb	r6, [r4, #3]
    5e22:	f7ff feb5 	bl	5b90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5e26:	f04f 0801 	mov.w	r8, #1
    5e2a:	e017      	b.n	5e5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    5e2c:	f89d 0000 	ldrb.w	r0, [sp]
    5e30:	b110      	cbz	r0, 5e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>
    5e32:	2001      	movs	r0, #1
    5e34:	f7ff fdf4 	bl	5a20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5e38:	2000      	movs	r0, #0
    5e3a:	f000 f9a3 	bl	6184 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x660>
    5e3e:	f89d 0000 	ldrb.w	r0, [sp]
    5e42:	b110      	cbz	r0, 5e4a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x326>
    5e44:	2002      	movs	r0, #2
    5e46:	f7ff fdeb 	bl	5a20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5e4a:	88a8      	ldrh	r0, [r5, #4]
    5e4c:	464a      	mov	r2, r9
    5e4e:	4639      	mov	r1, r7
    5e50:	f7ff feee 	bl	5c30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    5e54:	b117      	cbz	r7, 5e5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    5e56:	70e6      	strb	r6, [r4, #3]
    5e58:	f7ff fe9a 	bl	5b90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5e5c:	9801      	ldr	r0, [sp, #4]
    5e5e:	b150      	cbz	r0, 5e76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
    5e60:	f007 fe53 	bl	db0a <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    5e64:	f8da 1004 	ldr.w	r1, [sl, #4]
    5e68:	1c40      	adds	r0, r0, #1
    5e6a:	7206      	strb	r6, [r0, #8]
    5e6c:	220b      	movs	r2, #11
    5e6e:	f000 feeb 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5e72:	f000 ffbb 	bl	6dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5e76:	f1b8 0f00 	cmp.w	r8, #0
    5e7a:	d001      	beq.n	5e80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35c>
    5e7c:	f000 f862 	bl	5f44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    5e80:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5e84:	200000d4 	.word	0x200000d4
    5e88:	20000ca8 	.word	0x20000ca8
    5e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e90:	460f      	mov	r7, r1
    5e92:	4680      	mov	r8, r0
    5e94:	f7ff fe70 	bl	5b78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5e98:	4d28      	ldr	r5, [pc, #160]	; (5f3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    5e9a:	4604      	mov	r4, r0
    5e9c:	7828      	ldrb	r0, [r5, #0]
    5e9e:	2801      	cmp	r0, #1
    5ea0:	d004      	beq.n	5eac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
    5ea2:	f240 4172 	movw	r1, #1138	; 0x472
    5ea6:	2027      	movs	r0, #39	; 0x27
    5ea8:	f7fe fdc8 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5eac:	7821      	ldrb	r1, [r4, #0]
    5eae:	2000      	movs	r0, #0
    5eb0:	2601      	movs	r6, #1
    5eb2:	b129      	cbz	r1, 5ec0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x39c>
    5eb4:	7020      	strb	r0, [r4, #0]
    5eb6:	2100      	movs	r1, #0
    5eb8:	2004      	movs	r0, #4
    5eba:	f7ff fe4f 	bl	5b5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5ebe:	70a6      	strb	r6, [r4, #2]
    5ec0:	6a29      	ldr	r1, [r5, #32]
    5ec2:	7808      	ldrb	r0, [r1, #0]
    5ec4:	43c0      	mvns	r0, r0
    5ec6:	0780      	lsls	r0, r0, #30
    5ec8:	d109      	bne.n	5ede <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ba>
    5eca:	79a0      	ldrb	r0, [r4, #6]
    5ecc:	bb78      	cbnz	r0, 5f2e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40a>
    5ece:	2002      	movs	r0, #2
    5ed0:	f7ff fe44 	bl	5b5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5ed4:	6a28      	ldr	r0, [r5, #32]
    5ed6:	7800      	ldrb	r0, [r0, #0]
    5ed8:	43c0      	mvns	r0, r0
    5eda:	0780      	lsls	r0, r0, #30
    5edc:	d027      	beq.n	5f2e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40a>
    5ede:	6a28      	ldr	r0, [r5, #32]
    5ee0:	7840      	ldrb	r0, [r0, #1]
    5ee2:	b110      	cbz	r0, 5eea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c6>
    5ee4:	2002      	movs	r0, #2
    5ee6:	71a0      	strb	r0, [r4, #6]
    5ee8:	e000      	b.n	5eec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c8>
    5eea:	71a6      	strb	r6, [r4, #6]
    5eec:	7d20      	ldrb	r0, [r4, #20]
    5eee:	b190      	cbz	r0, 5f16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f2>
    5ef0:	f7ff fe3c 	bl	5b6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5ef4:	4912      	ldr	r1, [pc, #72]	; (5f40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>)
    5ef6:	7a6d      	ldrb	r5, [r5, #9]
    5ef8:	760e      	strb	r6, [r1, #24]
    5efa:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
    5efe:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5f02:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    5f06:	f008 fa4e 	bl	e3a6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5f0a:	4603      	mov	r3, r0
    5f0c:	462a      	mov	r2, r5
    5f0e:	490c      	ldr	r1, [pc, #48]	; (5f40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>)
    5f10:	4630      	mov	r0, r6
    5f12:	f005 f9b9 	bl	b288 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    5f16:	ea37 0708 	bics.w	r7, r7, r8
    5f1a:	d004      	beq.n	5f26 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x402>
    5f1c:	2100      	movs	r1, #0
    5f1e:	4608      	mov	r0, r1
    5f20:	f7ff fe5a 	bl	5bd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>
    5f24:	b128      	cbz	r0, 5f32 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40e>
    5f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5f2a:	f000 b80b 	b.w	5f44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    5f2e:	2003      	movs	r0, #3
    5f30:	e7d9      	b.n	5ee6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    5f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5f36:	2000      	movs	r0, #0
    5f38:	f000 b8e8 	b.w	610c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    5f3c:	200000d4 	.word	0x200000d4
    5f40:	20000ca8 	.word	0x20000ca8
    5f44:	b510      	push	{r4, lr}
    5f46:	f005 fb13 	bl	b570 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    5f4a:	f005 fa31 	bl	b3b0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5f4e:	4c0e      	ldr	r4, [pc, #56]	; (5f88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>)
    5f50:	89e0      	ldrh	r0, [r4, #14]
    5f52:	f7ff fe17 	bl	5b84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5f56:	69e2      	ldr	r2, [r4, #28]
    5f58:	7961      	ldrb	r1, [r4, #5]
    5f5a:	78a0      	ldrb	r0, [r4, #2]
    5f5c:	4790      	blx	r2
    5f5e:	480b      	ldr	r0, [pc, #44]	; (5f8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>)
    5f60:	7f00      	ldrb	r0, [r0, #28]
    5f62:	b168      	cbz	r0, 5f80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    5f64:	4909      	ldr	r1, [pc, #36]	; (5f8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>)
    5f66:	220e      	movs	r2, #14
    5f68:	f101 000e 	add.w	r0, r1, #14
    5f6c:	f006 ffb6 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5f70:	4806      	ldr	r0, [pc, #24]	; (5f8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>)
    5f72:	221d      	movs	r2, #29
    5f74:	2100      	movs	r1, #0
    5f76:	301d      	adds	r0, #29
    5f78:	f000 fe66 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5f7c:	f000 ff36 	bl	6dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5f80:	2000      	movs	r0, #0
    5f82:	7020      	strb	r0, [r4, #0]
    5f84:	bd10      	pop	{r4, pc}
    5f86:	0000      	.short	0x0000
    5f88:	200000d4 	.word	0x200000d4
    5f8c:	20000cf2 	.word	0x20000cf2
    5f90:	4808      	ldr	r0, [pc, #32]	; (5fb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x490>)
    5f92:	b510      	push	{r4, lr}
    5f94:	7800      	ldrb	r0, [r0, #0]
    5f96:	2802      	cmp	r0, #2
    5f98:	d004      	beq.n	5fa4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
    5f9a:	f240 212a 	movw	r1, #554	; 0x22a
    5f9e:	2027      	movs	r0, #39	; 0x27
    5fa0:	f7fe fd4c 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5fa4:	4904      	ldr	r1, [pc, #16]	; (5fb8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x494>)
    5fa6:	2001      	movs	r0, #1
    5fa8:	7308      	strb	r0, [r1, #12]
    5faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5fae:	f7ff bfc9 	b.w	5f44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    5fb2:	0000      	.short	0x0000
    5fb4:	200000d4 	.word	0x200000d4
    5fb8:	20000cf2 	.word	0x20000cf2
    5fbc:	4b0c      	ldr	r3, [pc, #48]	; (5ff0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4cc>)
    5fbe:	b430      	push	{r4, r5}
    5fc0:	79db      	ldrb	r3, [r3, #7]
    5fc2:	b93a      	cbnz	r2, 5fd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b0>
    5fc4:	2bff      	cmp	r3, #255	; 0xff
    5fc6:	d105      	bne.n	5fd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b0>
    5fc8:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    5fcc:	f890 406e 	ldrb.w	r4, [r0, #110]	; 0x6e
    5fd0:	42a2      	cmp	r2, r4
    5fd2:	d00a      	beq.n	5fea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c6>
    5fd4:	b129      	cbz	r1, 5fe2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    5fd6:	f890 106f 	ldrb.w	r1, [r0, #111]	; 0x6f
    5fda:	bc30      	pop	{r4, r5}
    5fdc:	4618      	mov	r0, r3
    5fde:	f005 bdf1 	b.w	bbc4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    5fe2:	23ff      	movs	r3, #255	; 0xff
    5fe4:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
    5fe8:	e7f7      	b.n	5fda <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b6>
    5fea:	bc30      	pop	{r4, r5}
    5fec:	4770      	bx	lr
    5fee:	0000      	.short	0x0000
    5ff0:	200000d4 	.word	0x200000d4
    5ff4:	b570      	push	{r4, r5, r6, lr}
    5ff6:	4606      	mov	r6, r0
    5ff8:	f7ff fdbe 	bl	5b78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5ffc:	4a1b      	ldr	r2, [pc, #108]	; (606c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x548>)
    5ffe:	4604      	mov	r4, r0
    6000:	2501      	movs	r5, #1
    6002:	6a51      	ldr	r1, [r2, #36]	; 0x24
    6004:	7808      	ldrb	r0, [r1, #0]
    6006:	f000 0003 	and.w	r0, r0, #3
    600a:	2801      	cmp	r0, #1
    600c:	d00c      	beq.n	6028 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    600e:	2802      	cmp	r0, #2
    6010:	d00a      	beq.n	6028 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    6012:	2803      	cmp	r0, #3
    6014:	d121      	bne.n	605a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    6016:	7025      	strb	r5, [r4, #0]
    6018:	89d0      	ldrh	r0, [r2, #14]
    601a:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    601e:	81d0      	strh	r0, [r2, #14]
    6020:	2001      	movs	r0, #1
    6022:	f7ff fd9b 	bl	5b5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6026:	e018      	b.n	605a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    6028:	7848      	ldrb	r0, [r1, #1]
    602a:	b1b0      	cbz	r0, 605a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    602c:	89d1      	ldrh	r1, [r2, #14]
    602e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    6032:	81d1      	strh	r1, [r2, #14]
    6034:	6a91      	ldr	r1, [r2, #40]	; 0x28
    6036:	2900      	cmp	r1, #0
    6038:	d009      	beq.n	604e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    603a:	28fb      	cmp	r0, #251	; 0xfb
    603c:	d808      	bhi.n	6050 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52c>
    603e:	7990      	ldrb	r0, [r2, #6]
    6040:	b120      	cbz	r0, 604c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x528>
    6042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6046:	2020      	movs	r0, #32
    6048:	f7ff bd9c 	b.w	5b84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    604c:	7035      	strb	r5, [r6, #0]
    604e:	bd70      	pop	{r4, r5, r6, pc}
    6050:	7950      	ldrb	r0, [r2, #5]
    6052:	f040 0010 	orr.w	r0, r0, #16
    6056:	7150      	strb	r0, [r2, #5]
    6058:	bd70      	pop	{r4, r5, r6, pc}
    605a:	7a20      	ldrb	r0, [r4, #8]
    605c:	2801      	cmp	r0, #1
    605e:	d001      	beq.n	6064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    6060:	7225      	strb	r5, [r4, #8]
    6062:	bd70      	pop	{r4, r5, r6, pc}
    6064:	2000      	movs	r0, #0
    6066:	7220      	strb	r0, [r4, #8]
    6068:	bd70      	pop	{r4, r5, r6, pc}
    606a:	0000      	.short	0x0000
    606c:	200000d4 	.word	0x200000d4
    6070:	b570      	push	{r4, r5, r6, lr}
    6072:	4605      	mov	r5, r0
    6074:	f7ff fd80 	bl	5b78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6078:	4604      	mov	r4, r0
    607a:	7980      	ldrb	r0, [r0, #6]
    607c:	2800      	cmp	r0, #0
    607e:	d02d      	beq.n	60dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b8>
    6080:	2802      	cmp	r0, #2
    6082:	d10c      	bne.n	609e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57a>
    6084:	481b      	ldr	r0, [pc, #108]	; (60f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d0>)
    6086:	4629      	mov	r1, r5
    6088:	6b00      	ldr	r0, [r0, #48]	; 0x30
    608a:	f007 fcba 	bl	da02 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    608e:	b330      	cbz	r0, 60de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ba>
    6090:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
    6094:	1c40      	adds	r0, r0, #1
    6096:	f141 0100 	adc.w	r1, r1, #0
    609a:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    609e:	2500      	movs	r5, #0
    60a0:	71a5      	strb	r5, [r4, #6]
    60a2:	78a0      	ldrb	r0, [r4, #2]
    60a4:	b120      	cbz	r0, 60b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x58c>
    60a6:	70a5      	strb	r5, [r4, #2]
    60a8:	2100      	movs	r1, #0
    60aa:	2010      	movs	r0, #16
    60ac:	f7ff fd56 	bl	5b5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    60b0:	7860      	ldrb	r0, [r4, #1]
    60b2:	b170      	cbz	r0, 60d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ae>
    60b4:	7065      	strb	r5, [r4, #1]
    60b6:	f7ff fb01 	bl	56bc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    60ba:	b198      	cbz	r0, 60e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c0>
    60bc:	2100      	movs	r1, #0
    60be:	2008      	movs	r0, #8
    60c0:	f7ff fd4c 	bl	5b5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    60c4:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
    60c8:	1c40      	adds	r0, r0, #1
    60ca:	f141 0100 	adc.w	r1, r1, #0
    60ce:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    60d2:	79e0      	ldrb	r0, [r4, #7]
    60d4:	2801      	cmp	r0, #1
    60d6:	d00a      	beq.n	60ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ca>
    60d8:	2001      	movs	r0, #1
    60da:	71e0      	strb	r0, [r4, #7]
    60dc:	bd70      	pop	{r4, r5, r6, pc}
    60de:	f240 31b9 	movw	r1, #953	; 0x3b9
    60e2:	e001      	b.n	60e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c4>
    60e4:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    60e8:	2027      	movs	r0, #39	; 0x27
    60ea:	f7fe fca7 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    60ee:	71e5      	strb	r5, [r4, #7]
    60f0:	bd70      	pop	{r4, r5, r6, pc}
    60f2:	0000      	.short	0x0000
    60f4:	200000d4 	.word	0x200000d4
    60f8:	4803      	ldr	r0, [pc, #12]	; (6108 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    60fa:	7800      	ldrb	r0, [r0, #0]
    60fc:	2800      	cmp	r0, #0
    60fe:	d001      	beq.n	6104 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>
    6100:	f7ff bf20 	b.w	5f44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    6104:	4770      	bx	lr
    6106:	0000      	.short	0x0000
    6108:	200000d4 	.word	0x200000d4
    610c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6110:	4606      	mov	r6, r0
    6112:	f7ff fd2b 	bl	5b6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6116:	4680      	mov	r8, r0
    6118:	f7ff fd2e 	bl	5b78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    611c:	4c16      	ldr	r4, [pc, #88]	; (6178 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x654>)
    611e:	4605      	mov	r5, r0
    6120:	4632      	mov	r2, r6
    6122:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6124:	6260      	str	r0, [r4, #36]	; 0x24
    6126:	2101      	movs	r1, #1
    6128:	4640      	mov	r0, r8
    612a:	f7ff ff47 	bl	5fbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    612e:	7d28      	ldrb	r0, [r5, #20]
    6130:	2700      	movs	r7, #0
    6132:	b170      	cbz	r0, 6152 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x62e>
    6134:	4811      	ldr	r0, [pc, #68]	; (617c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>)
    6136:	f005 fc87 	bl	ba48 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    613a:	4811      	ldr	r0, [pc, #68]	; (6180 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65c>)
    613c:	2101      	movs	r1, #1
    613e:	7601      	strb	r1, [r0, #24]
    6140:	e9d5 121c 	ldrd	r1, r2, [r5, #112]	; 0x70
    6144:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6148:	490c      	ldr	r1, [pc, #48]	; (617c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>)
    614a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    614c:	f005 f8ee 	bl	b32c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    6150:	e004      	b.n	615c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x638>
    6152:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6154:	f005 fc78 	bl	ba48 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6158:	f005 f92a 	bl	b3b0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    615c:	b916      	cbnz	r6, 6164 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x640>
    615e:	4638      	mov	r0, r7
    6160:	f005 fb28 	bl	b7b4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6164:	2100      	movs	r1, #0
    6166:	f898 206e 	ldrb.w	r2, [r8, #110]	; 0x6e
    616a:	4608      	mov	r0, r1
    616c:	f005 fce4 	bl	bb38 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6170:	2002      	movs	r0, #2
    6172:	7020      	strb	r0, [r4, #0]
    6174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6178:	200000d4 	.word	0x200000d4
    617c:	20000ba0 	.word	0x20000ba0
    6180:	20000ca8 	.word	0x20000ca8
    6184:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6188:	4604      	mov	r4, r0
    618a:	f7ff fcf5 	bl	5b78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    618e:	4605      	mov	r5, r0
    6190:	f7ff fcec 	bl	5b6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6194:	2700      	movs	r7, #0
    6196:	4606      	mov	r6, r0
    6198:	f8df 9164 	ldr.w	r9, [pc, #356]	; 6300 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7dc>
    619c:	f88d 7000 	strb.w	r7, [sp]
    61a0:	4622      	mov	r2, r4
    61a2:	4639      	mov	r1, r7
    61a4:	f7ff ff0a 	bl	5fbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    61a8:	79a8      	ldrb	r0, [r5, #6]
    61aa:	f04f 0801 	mov.w	r8, #1
    61ae:	f1a9 0420 	sub.w	r4, r9, #32
    61b2:	b140      	cbz	r0, 61c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    61b4:	2801      	cmp	r0, #1
    61b6:	d020      	beq.n	61fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d6>
    61b8:	2802      	cmp	r0, #2
    61ba:	d02f      	beq.n	621c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f8>
    61bc:	2803      	cmp	r0, #3
    61be:	d03b      	beq.n	6238 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x714>
    61c0:	f240 21d5 	movw	r1, #725	; 0x2d5
    61c4:	e057      	b.n	6276 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    61c6:	7a20      	ldrb	r0, [r4, #8]
    61c8:	2154      	movs	r1, #84	; 0x54
    61ca:	f8ad 0004 	strh.w	r0, [sp, #4]
    61ce:	5388      	strh	r0, [r1, r6]
    61d0:	4648      	mov	r0, r9
    61d2:	f7ff fa9d 	bl	5710 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    61d6:	b130      	cbz	r0, 61e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c2>
    61d8:	2080      	movs	r0, #128	; 0x80
    61da:	6a21      	ldr	r1, [r4, #32]
    61dc:	f7ff fcbe 	bl	5b5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    61e0:	f885 8001 	strb.w	r8, [r5, #1]
    61e4:	e02c      	b.n	6240 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    61e6:	466a      	mov	r2, sp
    61e8:	a901      	add	r1, sp, #4
    61ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
    61ec:	f008 f8f3 	bl	e3d6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    61f0:	6220      	str	r0, [r4, #32]
    61f2:	b110      	cbz	r0, 61fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d6>
    61f4:	f895 104b 	ldrb.w	r1, [r5, #75]	; 0x4b
    61f8:	b111      	cbz	r1, 6200 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6dc>
    61fa:	4842      	ldr	r0, [pc, #264]	; (6304 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e0>)
    61fc:	6220      	str	r0, [r4, #32]
    61fe:	e01f      	b.n	6240 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6200:	f89d 1000 	ldrb.w	r1, [sp]
    6204:	b921      	cbnz	r1, 6210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ec>
    6206:	8007      	strh	r7, [r0, #0]
    6208:	7087      	strb	r7, [r0, #2]
    620a:	2101      	movs	r1, #1
    620c:	f008 fc54 	bl	eab8 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6210:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6214:	6a20      	ldr	r0, [r4, #32]
    6216:	f008 fc03 	bl	ea20 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    621a:	e011      	b.n	6240 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    621c:	f8b6 0054 	ldrh.w	r0, [r6, #84]	; 0x54
    6220:	f8ad 0004 	strh.w	r0, [sp, #4]
    6224:	466a      	mov	r2, sp
    6226:	a901      	add	r1, sp, #4
    6228:	6b20      	ldr	r0, [r4, #48]	; 0x30
    622a:	f008 f8d4 	bl	e3d6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    622e:	6220      	str	r0, [r4, #32]
    6230:	b930      	cbnz	r0, 6240 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6232:	f240 21c6 	movw	r1, #710	; 0x2c6
    6236:	e01e      	b.n	6276 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    6238:	4648      	mov	r0, r9
    623a:	f7ff fa69 	bl	5710 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    623e:	b1c0      	cbz	r0, 6272 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74e>
    6240:	6a20      	ldr	r0, [r4, #32]
    6242:	2308      	movs	r3, #8
    6244:	7801      	ldrb	r1, [r0, #0]
    6246:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    624a:	7001      	strb	r1, [r0, #0]
    624c:	79ea      	ldrb	r2, [r5, #7]
    624e:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    6252:	4311      	orrs	r1, r2
    6254:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    6258:	7001      	strb	r1, [r0, #0]
    625a:	7a2a      	ldrb	r2, [r5, #8]
    625c:	2304      	movs	r3, #4
    625e:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    6262:	4311      	orrs	r1, r2
    6264:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    6268:	7001      	strb	r1, [r0, #0]
    626a:	43c9      	mvns	r1, r1
    626c:	0789      	lsls	r1, r1, #30
    626e:	d005      	beq.n	627c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x758>
    6270:	e007      	b.n	6282 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x75e>
    6272:	f240 21cf 	movw	r1, #719	; 0x2cf
    6276:	2027      	movs	r0, #39	; 0x27
    6278:	f7fe fbe0 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    627c:	78c0      	ldrb	r0, [r0, #3]
    627e:	2802      	cmp	r0, #2
    6280:	d00f      	beq.n	62a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x77e>
    6282:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6284:	f007 fcd7 	bl	dc36 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    6288:	b108      	cbz	r0, 628e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x76a>
    628a:	2101      	movs	r1, #1
    628c:	e00a      	b.n	62a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x780>
    628e:	6a20      	ldr	r0, [r4, #32]
    6290:	7800      	ldrb	r0, [r0, #0]
    6292:	43c0      	mvns	r0, r0
    6294:	0780      	lsls	r0, r0, #30
    6296:	d004      	beq.n	62a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x77e>
    6298:	f7ff f9f8 	bl	568c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    629c:	f080 0101 	eor.w	r1, r0, #1
    62a0:	e000      	b.n	62a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x780>
    62a2:	2100      	movs	r1, #0
    62a4:	6a20      	ldr	r0, [r4, #32]
    62a6:	7802      	ldrb	r2, [r0, #0]
    62a8:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    62ac:	7001      	strb	r1, [r0, #0]
    62ae:	7ce9      	ldrb	r1, [r5, #19]
    62b0:	b181      	cbz	r1, 62d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b0>
    62b2:	7841      	ldrb	r1, [r0, #1]
    62b4:	b171      	cbz	r1, 62d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b0>
    62b6:	4814      	ldr	r0, [pc, #80]	; (6308 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e4>)
    62b8:	f005 fbc6 	bl	ba48 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    62bc:	4811      	ldr	r0, [pc, #68]	; (6304 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e0>)
    62be:	3828      	subs	r0, #40	; 0x28
    62c0:	7607      	strb	r7, [r0, #24]
    62c2:	e9d5 121a 	ldrd	r1, r2, [r5, #104]	; 0x68
    62c6:	e9c0 1204 	strd	r1, r2, [r0, #16]
    62ca:	480f      	ldr	r0, [pc, #60]	; (6308 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e4>)
    62cc:	6a21      	ldr	r1, [r4, #32]
    62ce:	f005 f82d 	bl	b32c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    62d2:	e003      	b.n	62dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b8>
    62d4:	f005 fbb8 	bl	ba48 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    62d8:	f005 f86a 	bl	b3b0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    62dc:	f896 206f 	ldrb.w	r2, [r6, #111]	; 0x6f
    62e0:	2101      	movs	r1, #1
    62e2:	2000      	movs	r0, #0
    62e4:	f005 fc28 	bl	bb38 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    62e8:	f884 8004 	strb.w	r8, [r4, #4]
    62ec:	6a21      	ldr	r1, [r4, #32]
    62ee:	880a      	ldrh	r2, [r1, #0]
    62f0:	8222      	strh	r2, [r4, #16]
    62f2:	7889      	ldrb	r1, [r1, #2]
    62f4:	74a1      	strb	r1, [r4, #18]
    62f6:	f884 8000 	strb.w	r8, [r4]
    62fa:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    62fe:	0000      	.short	0x0000
    6300:	200000f4 	.word	0x200000f4
    6304:	20000cd0 	.word	0x20000cd0
    6308:	20000ba0 	.word	0x20000ba0
    630c:	00005f91 	.word	0x00005f91
    6310:	00005ced 	.word	0x00005ced
    6314:	00005e8d 	.word	0x00005e8d
    6318:	000060f9 	.word	0x000060f9

0000631c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    631c:	4800      	ldr	r0, [pc, #0]	; (6320 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    631e:	4770      	bx	lr
    6320:	20001635 	.word	0x20001635

00006324 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    6324:	4904      	ldr	r1, [pc, #16]	; (6338 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    6326:	788a      	ldrb	r2, [r1, #2]
    6328:	4282      	cmp	r2, r0
    632a:	d903      	bls.n	6334 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    632c:	4408      	add	r0, r1
    632e:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    6332:	4770      	bx	lr
    6334:	2000      	movs	r0, #0
    6336:	4770      	bx	lr
    6338:	20001462 	.word	0x20001462

0000633c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    633c:	4904      	ldr	r1, [pc, #16]	; (6350 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    633e:	788a      	ldrb	r2, [r1, #2]
    6340:	4282      	cmp	r2, r0
    6342:	d903      	bls.n	634c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    6344:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6348:	3083      	adds	r0, #131	; 0x83
    634a:	4770      	bx	lr
    634c:	2000      	movs	r0, #0
    634e:	4770      	bx	lr
    6350:	20001462 	.word	0x20001462

00006354 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    6354:	4a05      	ldr	r2, [pc, #20]	; (636c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    6356:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    635a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    635e:	6802      	ldr	r2, [r0, #0]
    6360:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    6364:	8880      	ldrh	r0, [r0, #4]
    6366:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    636a:	4770      	bx	lr
    636c:	20001462 	.word	0x20001462

00006370 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    6370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6374:	460e      	mov	r6, r1
    6376:	4607      	mov	r7, r0
    6378:	4615      	mov	r5, r2
    637a:	2106      	movs	r1, #6
    637c:	4630      	mov	r0, r6
    637e:	f008 fa2b 	bl	e7d8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6382:	4c0d      	ldr	r4, [pc, #52]	; (63b8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    6384:	b160      	cbz	r0, 63a0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    6386:	2000      	movs	r0, #0
    6388:	e004      	b.n	6394 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    638a:	1821      	adds	r1, r4, r0
    638c:	1c40      	adds	r0, r0, #1
    638e:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    6392:	b2c0      	uxtb	r0, r0
    6394:	78a1      	ldrb	r1, [r4, #2]
    6396:	4281      	cmp	r1, r0
    6398:	d8f7      	bhi.n	638a <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    639a:	2001      	movs	r0, #1
    639c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    63a0:	4631      	mov	r1, r6
    63a2:	4638      	mov	r0, r7
    63a4:	f008 f826 	bl	e3f4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    63a8:	2808      	cmp	r0, #8
    63aa:	d003      	beq.n	63b4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    63ac:	4420      	add	r0, r4
    63ae:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    63b2:	e7f2      	b.n	639a <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    63b4:	2000      	movs	r0, #0
    63b6:	e7f1      	b.n	639c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    63b8:	20001462 	.word	0x20001462

000063bc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    63bc:	4904      	ldr	r1, [pc, #16]	; (63d0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    63be:	788a      	ldrb	r2, [r1, #2]
    63c0:	4282      	cmp	r2, r0
    63c2:	d903      	bls.n	63cc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    63c4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    63c8:	1cc0      	adds	r0, r0, #3
    63ca:	4770      	bx	lr
    63cc:	2000      	movs	r0, #0
    63ce:	4770      	bx	lr
    63d0:	20001462 	.word	0x20001462

000063d4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    63d4:	b510      	push	{r4, lr}
    63d6:	f240 12d3 	movw	r2, #467	; 0x1d3
    63da:	2100      	movs	r1, #0
    63dc:	4808      	ldr	r0, [pc, #32]	; (6400 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    63de:	f006 fdf7 	bl	cfd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    63e2:	2208      	movs	r2, #8
    63e4:	21ff      	movs	r1, #255	; 0xff
    63e6:	4807      	ldr	r0, [pc, #28]	; (6404 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    63e8:	f006 fdf2 	bl	cfd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    63ec:	4805      	ldr	r0, [pc, #20]	; (6404 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    63ee:	2100      	movs	r1, #0
    63f0:	1f00      	subs	r0, r0, #4
    63f2:	7001      	strb	r1, [r0, #0]
    63f4:	7041      	strb	r1, [r0, #1]
    63f6:	f44f 7161 	mov.w	r1, #900	; 0x384
    63fa:	8041      	strh	r1, [r0, #2]
    63fc:	bd10      	pop	{r4, pc}
    63fe:	0000      	.short	0x0000
    6400:	20001462 	.word	0x20001462
    6404:	20000320 	.word	0x20000320

00006408 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    6408:	4901      	ldr	r1, [pc, #4]	; (6410 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    640a:	7008      	strb	r0, [r1, #0]
    640c:	4770      	bx	lr
    640e:	0000      	.short	0x0000
    6410:	2000031c 	.word	0x2000031c

00006414 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    6414:	4801      	ldr	r0, [pc, #4]	; (641c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    6416:	7800      	ldrb	r0, [r0, #0]
    6418:	4770      	bx	lr
    641a:	0000      	.short	0x0000
    641c:	2000031c 	.word	0x2000031c

00006420 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    6420:	4b0b      	ldr	r3, [pc, #44]	; (6450 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    6422:	b510      	push	{r4, lr}
    6424:	789c      	ldrb	r4, [r3, #2]
    6426:	4284      	cmp	r4, r0
    6428:	d90f      	bls.n	644a <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    642a:	4418      	add	r0, r3
    642c:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    6430:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6434:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    6438:	700b      	strb	r3, [r1, #0]
    643a:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    643e:	6011      	str	r1, [r2, #0]
    6440:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    6444:	8090      	strh	r0, [r2, #4]
    6446:	2001      	movs	r0, #1
    6448:	bd10      	pop	{r4, pc}
    644a:	2000      	movs	r0, #0
    644c:	bd10      	pop	{r4, pc}
    644e:	0000      	.short	0x0000
    6450:	20001462 	.word	0x20001462

00006454 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    6454:	4907      	ldr	r1, [pc, #28]	; (6474 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    6456:	788a      	ldrb	r2, [r1, #2]
    6458:	4282      	cmp	r2, r0
    645a:	d909      	bls.n	6470 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    645c:	4408      	add	r0, r1
    645e:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    6462:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    6466:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    646a:	f000 0001 	and.w	r0, r0, #1
    646e:	4770      	bx	lr
    6470:	2000      	movs	r0, #0
    6472:	4770      	bx	lr
    6474:	20001462 	.word	0x20001462

00006478 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    6478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    647c:	4698      	mov	r8, r3
    647e:	4691      	mov	r9, r2
    6480:	460c      	mov	r4, r1
    6482:	4605      	mov	r5, r0
    6484:	f000 f936 	bl	66f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    6488:	4606      	mov	r6, r0
    648a:	2810      	cmp	r0, #16
    648c:	d006      	beq.n	649c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    648e:	f000 f901 	bl	6694 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6492:	2810      	cmp	r0, #16
    6494:	d002      	beq.n	649c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    6496:	2012      	movs	r0, #18
    6498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    649c:	4f18      	ldr	r7, [pc, #96]	; (6500 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    649e:	78b8      	ldrb	r0, [r7, #2]
    64a0:	2808      	cmp	r0, #8
    64a2:	d22a      	bcs.n	64fa <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    64a4:	2e10      	cmp	r6, #16
    64a6:	d105      	bne.n	64b4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    64a8:	2200      	movs	r2, #0
    64aa:	4621      	mov	r1, r4
    64ac:	4628      	mov	r0, r5
    64ae:	f000 f905 	bl	66bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    64b2:	4606      	mov	r6, r0
    64b4:	78bc      	ldrb	r4, [r7, #2]
    64b6:	2210      	movs	r2, #16
    64b8:	1c60      	adds	r0, r4, #1
    64ba:	70b8      	strb	r0, [r7, #2]
    64bc:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    64c0:	1ce8      	adds	r0, r5, #3
    64c2:	4649      	mov	r1, r9
    64c4:	f008 f8ed 	bl	e6a2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    64c8:	f105 0083 	add.w	r0, r5, #131	; 0x83
    64cc:	2210      	movs	r2, #16
    64ce:	4641      	mov	r1, r8
    64d0:	f008 f8e7 	bl	e6a2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    64d4:	2110      	movs	r1, #16
    64d6:	4640      	mov	r0, r8
    64d8:	f008 f97e 	bl	e7d8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    64dc:	443c      	add	r4, r7
    64de:	2110      	movs	r1, #16
    64e0:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    64e4:	4648      	mov	r0, r9
    64e6:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    64ea:	f008 f975 	bl	e7d8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    64ee:	77e0      	strb	r0, [r4, #31]
    64f0:	f804 6c29 	strb.w	r6, [r4, #-41]
    64f4:	2000      	movs	r0, #0
    64f6:	73e0      	strb	r0, [r4, #15]
    64f8:	e7ce      	b.n	6498 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    64fa:	2007      	movs	r0, #7
    64fc:	e7cc      	b.n	6498 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    64fe:	0000      	.short	0x0000
    6500:	20001462 	.word	0x20001462

00006504 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    6504:	4806      	ldr	r0, [pc, #24]	; (6520 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    6506:	b510      	push	{r4, lr}
    6508:	7880      	ldrb	r0, [r0, #2]
    650a:	1e40      	subs	r0, r0, #1
    650c:	b244      	sxtb	r4, r0
    650e:	e004      	b.n	651a <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    6510:	b2e0      	uxtb	r0, r4
    6512:	f000 f94d 	bl	67b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    6516:	1e64      	subs	r4, r4, #1
    6518:	b264      	sxtb	r4, r4
    651a:	2c00      	cmp	r4, #0
    651c:	daf8      	bge.n	6510 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    651e:	bd10      	pop	{r4, pc}
    6520:	20001462 	.word	0x20001462

00006524 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    6524:	4801      	ldr	r0, [pc, #4]	; (652c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    6526:	8840      	ldrh	r0, [r0, #2]
    6528:	4770      	bx	lr
    652a:	0000      	.short	0x0000
    652c:	2000031c 	.word	0x2000031c

00006530 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    6530:	b138      	cbz	r0, 6542 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    6532:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    6536:	4288      	cmp	r0, r1
    6538:	d803      	bhi.n	6542 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    653a:	4903      	ldr	r1, [pc, #12]	; (6548 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    653c:	8048      	strh	r0, [r1, #2]
    653e:	2001      	movs	r0, #1
    6540:	4770      	bx	lr
    6542:	2000      	movs	r0, #0
    6544:	4770      	bx	lr
    6546:	0000      	.short	0x0000
    6548:	2000031c 	.word	0x2000031c

0000654c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    654c:	4905      	ldr	r1, [pc, #20]	; (6564 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    654e:	788a      	ldrb	r2, [r1, #2]
    6550:	4282      	cmp	r2, r0
    6552:	d903      	bls.n	655c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    6554:	4408      	add	r0, r1
    6556:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    655a:	b108      	cbz	r0, 6560 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    655c:	2000      	movs	r0, #0
    655e:	4770      	bx	lr
    6560:	2001      	movs	r0, #1
    6562:	4770      	bx	lr
    6564:	20001462 	.word	0x20001462

00006568 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    6568:	b570      	push	{r4, r5, r6, lr}
    656a:	460d      	mov	r5, r1
    656c:	4606      	mov	r6, r0
    656e:	f000 f8c1 	bl	66f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    6572:	4c10      	ldr	r4, [pc, #64]	; (65b4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    6574:	2810      	cmp	r0, #16
    6576:	d007      	beq.n	6588 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6578:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    657c:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    6580:	07c9      	lsls	r1, r1, #31
    6582:	d001      	beq.n	6588 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6584:	2001      	movs	r0, #1
    6586:	bd70      	pop	{r4, r5, r6, pc}
    6588:	7861      	ldrb	r1, [r4, #1]
    658a:	2908      	cmp	r1, #8
    658c:	d210      	bcs.n	65b0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    658e:	2810      	cmp	r0, #16
    6590:	d008      	beq.n	65a4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    6592:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    6596:	2101      	movs	r1, #1
    6598:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    659c:	7860      	ldrb	r0, [r4, #1]
    659e:	1c40      	adds	r0, r0, #1
    65a0:	7060      	strb	r0, [r4, #1]
    65a2:	e7ef      	b.n	6584 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    65a4:	2201      	movs	r2, #1
    65a6:	4629      	mov	r1, r5
    65a8:	4630      	mov	r0, r6
    65aa:	f000 f887 	bl	66bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    65ae:	e7f5      	b.n	659c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    65b0:	2000      	movs	r0, #0
    65b2:	bd70      	pop	{r4, r5, r6, pc}
    65b4:	20001462 	.word	0x20001462

000065b8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    65b8:	b570      	push	{r4, r5, r6, lr}
    65ba:	4d0b      	ldr	r5, [pc, #44]	; (65e8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    65bc:	7828      	ldrb	r0, [r5, #0]
    65be:	1e40      	subs	r0, r0, #1
    65c0:	b244      	sxtb	r4, r0
    65c2:	e00a      	b.n	65da <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    65c4:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    65c8:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    65cc:	07c0      	lsls	r0, r0, #31
    65ce:	d002      	beq.n	65d6 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    65d0:	b2e0      	uxtb	r0, r4
    65d2:	f000 f935 	bl	6840 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x250>
    65d6:	1e64      	subs	r4, r4, #1
    65d8:	b264      	sxtb	r4, r4
    65da:	2c00      	cmp	r4, #0
    65dc:	daf2      	bge.n	65c4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    65de:	4903      	ldr	r1, [pc, #12]	; (65ec <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    65e0:	2000      	movs	r0, #0
    65e2:	7048      	strb	r0, [r1, #1]
    65e4:	bd70      	pop	{r4, r5, r6, pc}
    65e6:	0000      	.short	0x0000
    65e8:	20001462 	.word	0x20001462
    65ec:	2000031c 	.word	0x2000031c

000065f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    65f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65f4:	2400      	movs	r4, #0
    65f6:	4625      	mov	r5, r4
    65f8:	4e18      	ldr	r6, [pc, #96]	; (665c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    65fa:	e029      	b.n	6650 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    65fc:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    6600:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    6604:	07c0      	lsls	r0, r0, #31
    6606:	d021      	beq.n	664c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    6608:	4628      	mov	r0, r5
    660a:	f000 f843 	bl	6694 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    660e:	4603      	mov	r3, r0
    6610:	f7ff fed4 	bl	63bc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6614:	4601      	mov	r1, r0
    6616:	2000      	movs	r0, #0
    6618:	2b10      	cmp	r3, #16
    661a:	d009      	beq.n	6630 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    661c:	18f2      	adds	r2, r6, r3
    661e:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    6622:	f1bc 0f01 	cmp.w	ip, #1
    6626:	d002      	beq.n	662e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    6628:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    662c:	b102      	cbz	r2, 6630 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    662e:	2001      	movs	r0, #1
    6630:	1e40      	subs	r0, r0, #1
    6632:	4201      	tst	r1, r0
    6634:	d10a      	bne.n	664c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    6636:	480a      	ldr	r0, [pc, #40]	; (6660 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    6638:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    663c:	5503      	strb	r3, [r0, r4]
    663e:	4620      	mov	r0, r4
    6640:	1c64      	adds	r4, r4, #1
    6642:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    6646:	b2e4      	uxtb	r4, r4
    6648:	f005 fb9e 	bl	bd88 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    664c:	1c6d      	adds	r5, r5, #1
    664e:	b2ed      	uxtb	r5, r5
    6650:	7830      	ldrb	r0, [r6, #0]
    6652:	42a8      	cmp	r0, r5
    6654:	d8d2      	bhi.n	65fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    6656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    665a:	0000      	.short	0x0000
    665c:	20001462 	.word	0x20001462
    6660:	20000320 	.word	0x20000320
    6664:	4602      	mov	r2, r0
    6666:	4809      	ldr	r0, [pc, #36]	; (668c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    6668:	b510      	push	{r4, lr}
    666a:	7800      	ldrb	r0, [r0, #0]
    666c:	460b      	mov	r3, r1
    666e:	b158      	cbz	r0, 6688 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6670:	4807      	ldr	r0, [pc, #28]	; (6690 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6672:	7881      	ldrb	r1, [r0, #2]
    6674:	b141      	cbz	r1, 6688 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6676:	b10b      	cbz	r3, 667c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    6678:	1cc0      	adds	r0, r0, #3
    667a:	e001      	b.n	6680 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    667c:	4804      	ldr	r0, [pc, #16]	; (6690 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    667e:	3083      	adds	r0, #131	; 0x83
    6680:	f004 fd5c 	bl	b13c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    6684:	2001      	movs	r0, #1
    6686:	bd10      	pop	{r4, pc}
    6688:	2000      	movs	r0, #0
    668a:	bd10      	pop	{r4, pc}
    668c:	2000031c 	.word	0x2000031c
    6690:	20001462 	.word	0x20001462
    6694:	4908      	ldr	r1, [pc, #32]	; (66b8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    6696:	b510      	push	{r4, lr}
    6698:	4603      	mov	r3, r0
    669a:	2000      	movs	r0, #0
    669c:	788a      	ldrb	r2, [r1, #2]
    669e:	e006      	b.n	66ae <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    66a0:	180c      	adds	r4, r1, r0
    66a2:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    66a6:	429c      	cmp	r4, r3
    66a8:	d004      	beq.n	66b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    66aa:	1c40      	adds	r0, r0, #1
    66ac:	b2c0      	uxtb	r0, r0
    66ae:	4282      	cmp	r2, r0
    66b0:	d8f6      	bhi.n	66a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    66b2:	2010      	movs	r0, #16
    66b4:	bd10      	pop	{r4, pc}
    66b6:	0000      	.short	0x0000
    66b8:	20001462 	.word	0x20001462
    66bc:	b570      	push	{r4, r5, r6, lr}
    66be:	4b0c      	ldr	r3, [pc, #48]	; (66f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    66c0:	4604      	mov	r4, r0
    66c2:	7818      	ldrb	r0, [r3, #0]
    66c4:	1c45      	adds	r5, r0, #1
    66c6:	701d      	strb	r5, [r3, #0]
    66c8:	2810      	cmp	r0, #16
    66ca:	d303      	bcc.n	66d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    66cc:	2146      	movs	r1, #70	; 0x46
    66ce:	2028      	movs	r0, #40	; 0x28
    66d0:	f7fe f9b4 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    66d4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    66d8:	680d      	ldr	r5, [r1, #0]
    66da:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    66de:	8889      	ldrh	r1, [r1, #4]
    66e0:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    66e4:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    66e8:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    66ec:	bd70      	pop	{r4, r5, r6, pc}
    66ee:	0000      	.short	0x0000
    66f0:	20001462 	.word	0x20001462
    66f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    66f6:	4c1a      	ldr	r4, [pc, #104]	; (6760 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    66f8:	4603      	mov	r3, r0
    66fa:	2000      	movs	r0, #0
    66fc:	7825      	ldrb	r5, [r4, #0]
    66fe:	e02a      	b.n	6756 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    6700:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    6704:	780f      	ldrb	r7, [r1, #0]
    6706:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    670a:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    670e:	ea87 070c 	eor.w	r7, r7, ip
    6712:	405e      	eors	r6, r3
    6714:	443e      	add	r6, r7
    6716:	784f      	ldrb	r7, [r1, #1]
    6718:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    671c:	ea87 070c 	eor.w	r7, r7, ip
    6720:	443e      	add	r6, r7
    6722:	788f      	ldrb	r7, [r1, #2]
    6724:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    6728:	ea87 070c 	eor.w	r7, r7, ip
    672c:	443e      	add	r6, r7
    672e:	78cf      	ldrb	r7, [r1, #3]
    6730:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    6734:	ea87 070c 	eor.w	r7, r7, ip
    6738:	443e      	add	r6, r7
    673a:	790f      	ldrb	r7, [r1, #4]
    673c:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    6740:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    6744:	ea87 070c 	eor.w	r7, r7, ip
    6748:	443e      	add	r6, r7
    674a:	794f      	ldrb	r7, [r1, #5]
    674c:	4057      	eors	r7, r2
    674e:	42f7      	cmn	r7, r6
    6750:	d004      	beq.n	675c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    6752:	1c40      	adds	r0, r0, #1
    6754:	b2c0      	uxtb	r0, r0
    6756:	4285      	cmp	r5, r0
    6758:	d8d2      	bhi.n	6700 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    675a:	2010      	movs	r0, #16
    675c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    675e:	0000      	.short	0x0000
    6760:	20001462 	.word	0x20001462
    6764:	b570      	push	{r4, r5, r6, lr}
    6766:	4605      	mov	r5, r0
    6768:	f7ff ff94 	bl	6694 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    676c:	2810      	cmp	r0, #16
    676e:	d11c      	bne.n	67aa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    6770:	4c0e      	ldr	r4, [pc, #56]	; (67ac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    6772:	7820      	ldrb	r0, [r4, #0]
    6774:	1e40      	subs	r0, r0, #1
    6776:	b2c0      	uxtb	r0, r0
    6778:	7020      	strb	r0, [r4, #0]
    677a:	42a8      	cmp	r0, r5
    677c:	d015      	beq.n	67aa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    677e:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    6782:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    6786:	f502 7080 	add.w	r0, r2, #256	; 0x100
    678a:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    678e:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    6792:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    6796:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    679a:	7820      	ldrb	r0, [r4, #0]
    679c:	f7ff ff7a 	bl	6694 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    67a0:	2810      	cmp	r0, #16
    67a2:	d002      	beq.n	67aa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    67a4:	4420      	add	r0, r4
    67a6:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    67aa:	bd70      	pop	{r4, r5, r6, pc}
    67ac:	20001462 	.word	0x20001462
    67b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67b4:	4c21      	ldr	r4, [pc, #132]	; (683c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x24c>)
    67b6:	4606      	mov	r6, r0
    67b8:	19a7      	adds	r7, r4, r6
    67ba:	78a0      	ldrb	r0, [r4, #2]
    67bc:	1e40      	subs	r0, r0, #1
    67be:	b2c5      	uxtb	r5, r0
    67c0:	70a5      	strb	r5, [r4, #2]
    67c2:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    67c6:	42ae      	cmp	r6, r5
    67c8:	d02a      	beq.n	6820 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x230>
    67ca:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    67ce:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    67d2:	f10a 0103 	add.w	r1, sl, #3
    67d6:	f109 0003 	add.w	r0, r9, #3
    67da:	2210      	movs	r2, #16
    67dc:	f006 fb7e 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    67e0:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    67e4:	f109 0083 	add.w	r0, r9, #131	; 0x83
    67e8:	2210      	movs	r2, #16
    67ea:	f006 fb77 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    67ee:	1960      	adds	r0, r4, r5
    67f0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    67f4:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    67f8:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    67fc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    6800:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6804:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    6808:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    680c:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    6810:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    6814:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    6818:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    681c:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    6820:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    6824:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6828:	07c0      	lsls	r0, r0, #31
    682a:	d104      	bne.n	6836 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x246>
    682c:	4640      	mov	r0, r8
    682e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6832:	f7ff bf97 	b.w	6764 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    6836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    683a:	0000      	.short	0x0000
    683c:	20001462 	.word	0x20001462
    6840:	4905      	ldr	r1, [pc, #20]	; (6858 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x268>)
    6842:	784a      	ldrb	r2, [r1, #1]
    6844:	1e52      	subs	r2, r2, #1
    6846:	704a      	strb	r2, [r1, #1]
    6848:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    684c:	2200      	movs	r2, #0
    684e:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    6852:	f7ff bf87 	b.w	6764 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    6856:	0000      	.short	0x0000
    6858:	20001462 	.word	0x20001462

0000685c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    685c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6860:	4604      	mov	r4, r0
    6862:	f04f 0801 	mov.w	r8, #1
    6866:	b181      	cbz	r1, 688a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    6868:	f104 068f 	add.w	r6, r4, #143	; 0x8f
    686c:	1e75      	subs	r5, r6, #1
    686e:	f104 0078 	add.w	r0, r4, #120	; 0x78
    6872:	2901      	cmp	r1, #1
    6874:	d022      	beq.n	68bc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x60>
    6876:	2902      	cmp	r1, #2
    6878:	d045      	beq.n	6906 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xaa>
    687a:	2903      	cmp	r1, #3
    687c:	d11c      	bne.n	68b8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    687e:	4631      	mov	r1, r6
    6880:	4628      	mov	r0, r5
    6882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6886:	f007 bfd7 	b.w	e838 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    688a:	f44f 7228 	mov.w	r2, #672	; 0x2a0
    688e:	2100      	movs	r1, #0
    6890:	f006 fb9e 	bl	cfd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6894:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
    6898:	3484      	adds	r4, #132	; 0x84
    689a:	f004 fc1f 	bl	b0dc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    689e:	f644 122b 	movw	r2, #18731	; 0x492b
    68a2:	4010      	ands	r0, r2
    68a4:	6520      	str	r0, [r4, #80]	; 0x50
    68a6:	f001 0106 	and.w	r1, r1, #6
    68aa:	6561      	str	r1, [r4, #84]	; 0x54
    68ac:	20fe      	movs	r0, #254	; 0xfe
    68ae:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
    68b2:	207f      	movs	r0, #127	; 0x7f
    68b4:	f804 0c03 	strb.w	r0, [r4, #-3]
    68b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68bc:	2700      	movs	r7, #0
    68be:	f8a4 71de 	strh.w	r7, [r4, #478]	; 0x1de
    68c2:	f884 71d3 	strb.w	r7, [r4, #467]	; 0x1d3
    68c6:	4a14      	ldr	r2, [pc, #80]	; (6918 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>)
    68c8:	6921      	ldr	r1, [r4, #16]
    68ca:	440a      	add	r2, r1
    68cc:	fbb2 f2f1 	udiv	r2, r2, r1
    68d0:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
    68d4:	f640 32b8 	movw	r2, #3000	; 0xbb8
    68d8:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    68dc:	8b63      	ldrh	r3, [r4, #26]
    68de:	460a      	mov	r2, r1
    68e0:	f000 f81c 	bl	691c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>
    68e4:	4631      	mov	r1, r6
    68e6:	4628      	mov	r0, r5
    68e8:	f007 ffa6 	bl	e838 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    68ec:	f006 fad2 	bl	ce94 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    68f0:	b118      	cbz	r0, 68fa <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9e>
    68f2:	6960      	ldr	r0, [r4, #20]
    68f4:	f000 fbae 	bl	7054 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    68f8:	b110      	cbz	r0, 6900 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa4>
    68fa:	f884 71c6 	strb.w	r7, [r4, #454]	; 0x1c6
    68fe:	e7db      	b.n	68b8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    6900:	f884 81c6 	strb.w	r8, [r4, #454]	; 0x1c6
    6904:	e7d8      	b.n	68b8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    6906:	f8b4 3282 	ldrh.w	r3, [r4, #642]	; 0x282
    690a:	f8d4 227c 	ldr.w	r2, [r4, #636]	; 0x27c
    690e:	6921      	ldr	r1, [r4, #16]
    6910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6914:	f000 b802 	b.w	691c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>
    6918:	01c9c37f 	.word	0x01c9c37f
    691c:	b530      	push	{r4, r5, lr}
    691e:	2400      	movs	r4, #0
    6920:	8784      	strh	r4, [r0, #60]	; 0x3c
    6922:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
    6926:	4d15      	ldr	r5, [pc, #84]	; (697c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    6928:	434c      	muls	r4, r1
    692a:	fbb4 f4f2 	udiv	r4, r4, r2
    692e:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
    6932:	f242 7410 	movw	r4, #10000	; 0x2710
    6936:	4363      	muls	r3, r4
    6938:	fbb3 f3f2 	udiv	r3, r3, r2
    693c:	1c5b      	adds	r3, r3, #1
    693e:	b29b      	uxth	r3, r3
    6940:	fb03 f402 	mul.w	r4, r3, r2
    6944:	87c3      	strh	r3, [r0, #62]	; 0x3e
    6946:	42ac      	cmp	r4, r5
    6948:	d901      	bls.n	694e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    694a:	1e5b      	subs	r3, r3, #1
    694c:	87c3      	strh	r3, [r0, #62]	; 0x3e
    694e:	4b0c      	ldr	r3, [pc, #48]	; (6980 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x124>)
    6950:	f240 2471 	movw	r4, #625	; 0x271
    6954:	fbb3 f3f2 	udiv	r3, r3, r2
    6958:	1c5b      	adds	r3, r3, #1
    695a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    695e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    6960:	4363      	muls	r3, r4
    6962:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6966:	1e5b      	subs	r3, r3, #1
    6968:	fbb3 f3f2 	udiv	r3, r3, r2
    696c:	6343      	str	r3, [r0, #52]	; 0x34
    696e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6970:	434b      	muls	r3, r1
    6972:	fbb3 f1f2 	udiv	r1, r3, r2
    6976:	6301      	str	r1, [r0, #48]	; 0x30
    6978:	bd30      	pop	{r4, r5, pc}
    697a:	0000      	.short	0x0000
    697c:	01e84800 	.word	0x01e84800
    6980:	02625a00 	.word	0x02625a00

00006984 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    6984:	b570      	push	{r4, r5, r6, lr}
    6986:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    698a:	b28b      	uxth	r3, r1
    698c:	7ac5      	ldrb	r5, [r0, #11]
    698e:	ea83 0102 	eor.w	r1, r3, r2
    6992:	2200      	movs	r2, #0
    6994:	b2cc      	uxtb	r4, r1
    6996:	0a09      	lsrs	r1, r1, #8
    6998:	fa94 f4a4 	rbit	r4, r4
    699c:	fa91 f1a1 	rbit	r1, r1
    69a0:	0e24      	lsrs	r4, r4, #24
    69a2:	0e09      	lsrs	r1, r1, #24
    69a4:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    69a8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    69ac:	1c52      	adds	r2, r2, #1
    69ae:	4419      	add	r1, r3
    69b0:	b2d2      	uxtb	r2, r2
    69b2:	b289      	uxth	r1, r1
    69b4:	2a03      	cmp	r2, #3
    69b6:	d3ed      	bcc.n	6994 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    69b8:	4059      	eors	r1, r3
    69ba:	2225      	movs	r2, #37	; 0x25
    69bc:	fbb1 f3f2 	udiv	r3, r1, r2
    69c0:	fb02 1213 	mls	r2, r2, r3, r1
    69c4:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    69c8:	f002 0607 	and.w	r6, r2, #7
    69cc:	785b      	ldrb	r3, [r3, #1]
    69ce:	2401      	movs	r4, #1
    69d0:	fa04 f606 	lsl.w	r6, r4, r6
    69d4:	4233      	tst	r3, r6
    69d6:	d001      	beq.n	69dc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    69d8:	4610      	mov	r0, r2
    69da:	bd70      	pop	{r4, r5, r6, pc}
    69dc:	434d      	muls	r5, r1
    69de:	0c29      	lsrs	r1, r5, #16
    69e0:	1c49      	adds	r1, r1, #1
    69e2:	b2c9      	uxtb	r1, r1
    69e4:	2200      	movs	r2, #0
    69e6:	1885      	adds	r5, r0, r2
    69e8:	79ab      	ldrb	r3, [r5, #6]
    69ea:	428b      	cmp	r3, r1
    69ec:	d312      	bcc.n	6a14 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    69ee:	f895 5001 	ldrb.w	r5, [r5, #1]
    69f2:	2300      	movs	r3, #0
    69f4:	fa04 f603 	lsl.w	r6, r4, r3
    69f8:	4235      	tst	r5, r6
    69fa:	d001      	beq.n	6a00 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    69fc:	1e49      	subs	r1, r1, #1
    69fe:	b2c9      	uxtb	r1, r1
    6a00:	b121      	cbz	r1, 6a0c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    6a02:	1c5b      	adds	r3, r3, #1
    6a04:	b2db      	uxtb	r3, r3
    6a06:	2b08      	cmp	r3, #8
    6a08:	d3f4      	bcc.n	69f4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    6a0a:	e005      	b.n	6a18 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    6a0c:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    6a10:	b2c0      	uxtb	r0, r0
    6a12:	bd70      	pop	{r4, r5, r6, pc}
    6a14:	1ac9      	subs	r1, r1, r3
    6a16:	b2c9      	uxtb	r1, r1
    6a18:	1c52      	adds	r2, r2, #1
    6a1a:	b2d2      	uxtb	r2, r2
    6a1c:	2a05      	cmp	r2, #5
    6a1e:	d3e2      	bcc.n	69e6 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    6a20:	f240 110d 	movw	r1, #269	; 0x10d
    6a24:	2046      	movs	r0, #70	; 0x46
    6a26:	f7fe f809 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a2a:	0000      	movs	r0, r0
    6a2c:	b570      	push	{r4, r5, r6, lr}
    6a2e:	f890 2023 	ldrb.w	r2, [r0, #35]	; 0x23
    6a32:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    6a36:	2401      	movs	r4, #1
    6a38:	fb03 2101 	mla	r1, r3, r1, r2
    6a3c:	2225      	movs	r2, #37	; 0x25
    6a3e:	fbb1 f3f2 	udiv	r3, r1, r2
    6a42:	fb02 1113 	mls	r1, r2, r3, r1
    6a46:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    6a4a:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    6a4e:	f001 0307 	and.w	r3, r1, #7
    6a52:	7dd2      	ldrb	r2, [r2, #23]
    6a54:	fa04 f303 	lsl.w	r3, r4, r3
    6a58:	421a      	tst	r2, r3
    6a5a:	d003      	beq.n	6a64 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    6a5c:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    6a60:	2000      	movs	r0, #0
    6a62:	bd70      	pop	{r4, r5, r6, pc}
    6a64:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
    6a68:	fbb1 f3f2 	udiv	r3, r1, r2
    6a6c:	fb02 1113 	mls	r1, r2, r3, r1
    6a70:	1c49      	adds	r1, r1, #1
    6a72:	b2c9      	uxtb	r1, r1
    6a74:	2300      	movs	r3, #0
    6a76:	18c5      	adds	r5, r0, r3
    6a78:	7f2a      	ldrb	r2, [r5, #28]
    6a7a:	428a      	cmp	r2, r1
    6a7c:	d311      	bcc.n	6aa2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    6a7e:	f895 5017 	ldrb.w	r5, [r5, #23]
    6a82:	2200      	movs	r2, #0
    6a84:	fa04 f602 	lsl.w	r6, r4, r2
    6a88:	4235      	tst	r5, r6
    6a8a:	d001      	beq.n	6a90 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    6a8c:	1e49      	subs	r1, r1, #1
    6a8e:	b2c9      	uxtb	r1, r1
    6a90:	b121      	cbz	r1, 6a9c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    6a92:	1c52      	adds	r2, r2, #1
    6a94:	b2d2      	uxtb	r2, r2
    6a96:	2a08      	cmp	r2, #8
    6a98:	d3f4      	bcc.n	6a84 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    6a9a:	e004      	b.n	6aa6 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    6a9c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    6aa0:	e7dc      	b.n	6a5c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    6aa2:	1a89      	subs	r1, r1, r2
    6aa4:	b2c9      	uxtb	r1, r1
    6aa6:	1c5b      	adds	r3, r3, #1
    6aa8:	b2db      	uxtb	r3, r3
    6aaa:	2b05      	cmp	r3, #5
    6aac:	d3e3      	bcc.n	6a76 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    6aae:	201f      	movs	r0, #31
    6ab0:	bd70      	pop	{r4, r5, r6, pc}
	...

00006ab4 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    6ab4:	7841      	ldrb	r1, [r0, #1]
    6ab6:	b141      	cbz	r1, 6aca <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6ab8:	78c0      	ldrb	r0, [r0, #3]
    6aba:	2826      	cmp	r0, #38	; 0x26
    6abc:	d203      	bcs.n	6ac6 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    6abe:	4a04      	ldr	r2, [pc, #16]	; (6ad0 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    6ac0:	5c10      	ldrb	r0, [r2, r0]
    6ac2:	4288      	cmp	r0, r1
    6ac4:	d101      	bne.n	6aca <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6ac6:	2001      	movs	r0, #1
    6ac8:	4770      	bx	lr
    6aca:	2000      	movs	r0, #0
    6acc:	4770      	bx	lr
    6ace:	0000      	.short	0x0000
    6ad0:	00010e7a 	.word	0x00010e7a

00006ad4 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    6ad4:	b510      	push	{r4, lr}
    6ad6:	2201      	movs	r2, #1
    6ad8:	70c1      	strb	r1, [r0, #3]
    6ada:	2926      	cmp	r1, #38	; 0x26
    6adc:	d202      	bcs.n	6ae4 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    6ade:	4a06      	ldr	r2, [pc, #24]	; (6af8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    6ae0:	5c52      	ldrb	r2, [r2, r1]
    6ae2:	e006      	b.n	6af2 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6ae4:	29ff      	cmp	r1, #255	; 0xff
    6ae6:	d004      	beq.n	6af2 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6ae8:	f240 411d 	movw	r1, #1053	; 0x41d
    6aec:	202a      	movs	r0, #42	; 0x2a
    6aee:	f7fd ffa5 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6af2:	7042      	strb	r2, [r0, #1]
    6af4:	bd10      	pop	{r4, pc}
    6af6:	0000      	.short	0x0000
    6af8:	00010e7a 	.word	0x00010e7a

00006afc <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    6afc:	4904      	ldr	r1, [pc, #16]	; (6b10 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    6afe:	7c89      	ldrb	r1, [r1, #18]
    6b00:	0749      	lsls	r1, r1, #29
    6b02:	d400      	bmi.n	6b06 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    6b04:	b108      	cbz	r0, 6b0a <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    6b06:	2000      	movs	r0, #0
    6b08:	4770      	bx	lr
    6b0a:	2001      	movs	r0, #1
    6b0c:	4770      	bx	lr
    6b0e:	0000      	.short	0x0000
    6b10:	200011bc 	.word	0x200011bc

00006b14 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    6b14:	4803      	ldr	r0, [pc, #12]	; (6b24 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    6b16:	7c80      	ldrb	r0, [r0, #18]
    6b18:	0780      	lsls	r0, r0, #30
    6b1a:	d401      	bmi.n	6b20 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    6b1c:	2001      	movs	r0, #1
    6b1e:	4770      	bx	lr
    6b20:	2000      	movs	r0, #0
    6b22:	4770      	bx	lr
    6b24:	200011bc 	.word	0x200011bc

00006b28 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    6b28:	4803      	ldr	r0, [pc, #12]	; (6b38 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    6b2a:	7c80      	ldrb	r0, [r0, #18]
    6b2c:	07c0      	lsls	r0, r0, #31
    6b2e:	d001      	beq.n	6b34 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    6b30:	2000      	movs	r0, #0
    6b32:	4770      	bx	lr
    6b34:	2001      	movs	r0, #1
    6b36:	4770      	bx	lr
    6b38:	200011bc 	.word	0x200011bc

00006b3c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b40:	4c12      	ldr	r4, [pc, #72]	; (6b8c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6b42:	4607      	mov	r7, r0
    6b44:	460e      	mov	r6, r1
    6b46:	7da0      	ldrb	r0, [r4, #22]
    6b48:	b110      	cbz	r0, 6b50 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    6b4a:	8b20      	ldrh	r0, [r4, #24]
    6b4c:	2800      	cmp	r0, #0
    6b4e:	d012      	beq.n	6b76 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6b50:	480e      	ldr	r0, [pc, #56]	; (6b8c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6b52:	3014      	adds	r0, #20
    6b54:	4680      	mov	r8, r0
    6b56:	f008 f82e 	bl	ebb6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6b5a:	b9a8      	cbnz	r0, 6b88 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6b5c:	8aa5      	ldrh	r5, [r4, #20]
    6b5e:	8aa0      	ldrh	r0, [r4, #20]
    6b60:	4632      	mov	r2, r6
    6b62:	4639      	mov	r1, r7
    6b64:	f008 f86b 	bl	ec3e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    6b68:	b138      	cbz	r0, 6b7a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    6b6a:	7da0      	ldrb	r0, [r4, #22]
    6b6c:	b110      	cbz	r0, 6b74 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    6b6e:	8b20      	ldrh	r0, [r4, #24]
    6b70:	1e40      	subs	r0, r0, #1
    6b72:	8320      	strh	r0, [r4, #24]
    6b74:	2001      	movs	r0, #1
    6b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b7a:	4640      	mov	r0, r8
    6b7c:	f008 f81b 	bl	ebb6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6b80:	b910      	cbnz	r0, 6b88 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6b82:	8aa0      	ldrh	r0, [r4, #20]
    6b84:	42a8      	cmp	r0, r5
    6b86:	d1ea      	bne.n	6b5e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    6b88:	2000      	movs	r0, #0
    6b8a:	e7f4      	b.n	6b76 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6b8c:	200011bc 	.word	0x200011bc
    6b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6b94:	468a      	mov	sl, r1
    6b96:	4699      	mov	r9, r3
    6b98:	4615      	mov	r5, r2
    6b9a:	4604      	mov	r4, r0
    6b9c:	a901      	add	r1, sp, #4
    6b9e:	f007 fc6c 	bl	e47a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6ba2:	bbe0      	cbnz	r0, 6c1e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe2>
    6ba4:	9f02      	ldr	r7, [sp, #8]
    6ba6:	f04f 0800 	mov.w	r8, #0
    6baa:	3778      	adds	r7, #120	; 0x78
    6bac:	b18d      	cbz	r5, 6bd2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x96>
    6bae:	4620      	mov	r0, r4
    6bb0:	f7fe fb82 	bl	52b8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6bb4:	0004      	movs	r4, r0
    6bb6:	d00f      	beq.n	6bd8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    6bb8:	4629      	mov	r1, r5
    6bba:	f007 f80e 	bl	dbda <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    6bbe:	0006      	movs	r6, r0
    6bc0:	d003      	beq.n	6bca <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    6bc2:	481d      	ldr	r0, [pc, #116]	; (6c38 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xfc>)
    6bc4:	8840      	ldrh	r0, [r0, #2]
    6bc6:	42a8      	cmp	r0, r5
    6bc8:	d208      	bcs.n	6bdc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa0>
    6bca:	2000      	movs	r0, #0
    6bcc:	b004      	add	sp, #16
    6bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6bd2:	2001      	movs	r0, #1
    6bd4:	7578      	strb	r0, [r7, #21]
    6bd6:	e029      	b.n	6c2c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6bd8:	216e      	movs	r1, #110	; 0x6e
    6bda:	e02a      	b.n	6c32 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf6>
    6bdc:	4620      	mov	r0, r4
    6bde:	4631      	mov	r1, r6
    6be0:	aa03      	add	r2, sp, #12
    6be2:	f006 fff3 	bl	dbcc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6be6:	9803      	ldr	r0, [sp, #12]
    6be8:	f8a0 8000 	strh.w	r8, [r0]
    6bec:	f880 8002 	strb.w	r8, [r0, #2]
    6bf0:	7d79      	ldrb	r1, [r7, #21]
    6bf2:	b109      	cbz	r1, 6bf8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    6bf4:	f04f 0a02 	mov.w	sl, #2
    6bf8:	4651      	mov	r1, sl
    6bfa:	f007 ff5d 	bl	eab8 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6bfe:	4631      	mov	r1, r6
    6c00:	2603      	movs	r6, #3
    6c02:	4620      	mov	r0, r4
    6c04:	464a      	mov	r2, r9
    6c06:	462b      	mov	r3, r5
    6c08:	9600      	str	r6, [sp, #0]
    6c0a:	f006 fed3 	bl	d9b4 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    6c0e:	4620      	mov	r0, r4
    6c10:	4629      	mov	r1, r5
    6c12:	f006 ff94 	bl	db3e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    6c16:	b158      	cbz	r0, 6c30 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf4>
    6c18:	4644      	mov	r4, r8
    6c1a:	a801      	add	r0, sp, #4
    6c1c:	e000      	b.n	6c20 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    6c1e:	e005      	b.n	6c2c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6c20:	f007 ffea 	bl	ebf8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6c24:	9802      	ldr	r0, [sp, #8]
    6c26:	f8a0 41ca 	strh.w	r4, [r0, #458]	; 0x1ca
    6c2a:	757c      	strb	r4, [r7, #21]
    6c2c:	2001      	movs	r0, #1
    6c2e:	e7cd      	b.n	6bcc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x90>
    6c30:	2184      	movs	r1, #132	; 0x84
    6c32:	202b      	movs	r0, #43	; 0x2b
    6c34:	f7fd ff02 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c38:	200011bc 	.word	0x200011bc

00006c3c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    6c3c:	4901      	ldr	r1, [pc, #4]	; (6c44 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    6c3e:	2001      	movs	r0, #1
    6c40:	7008      	strb	r0, [r1, #0]
    6c42:	4770      	bx	lr
    6c44:	20001645 	.word	0x20001645

00006c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>:
    6c48:	b538      	push	{r3, r4, r5, lr}
    6c4a:	b198      	cbz	r0, 6c74 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x2c>
    6c4c:	7a03      	ldrb	r3, [r0, #8]
    6c4e:	f88d 3000 	strb.w	r3, [sp]
    6c52:	9b00      	ldr	r3, [sp, #0]
    6c54:	9300      	str	r3, [sp, #0]
    6c56:	f89d 3000 	ldrb.w	r3, [sp]
    6c5a:	2b00      	cmp	r3, #0
    6c5c:	d114      	bne.n	6c88 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x40>
    6c5e:	6003      	str	r3, [r0, #0]
    6c60:	6041      	str	r1, [r0, #4]
    6c62:	f3ef 8310 	mrs	r3, PRIMASK
    6c66:	b672      	cpsid	i
    6c68:	4908      	ldr	r1, [pc, #32]	; (6c8c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x44>)
    6c6a:	680c      	ldr	r4, [r1, #0]
    6c6c:	b13c      	cbz	r4, 6c7e <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x36>
    6c6e:	684c      	ldr	r4, [r1, #4]
    6c70:	6020      	str	r0, [r4, #0]
    6c72:	e005      	b.n	6c80 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x38>
    6c74:	f240 4141 	movw	r1, #1089	; 0x441
    6c78:	2010      	movs	r0, #16
    6c7a:	f7fd fedf 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c7e:	6008      	str	r0, [r1, #0]
    6c80:	6048      	str	r0, [r1, #4]
    6c82:	b903      	cbnz	r3, 6c86 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x3e>
    6c84:	b662      	cpsie	i
    6c86:	7202      	strb	r2, [r0, #8]
    6c88:	bd38      	pop	{r3, r4, r5, pc}
    6c8a:	0000      	.short	0x0000
    6c8c:	20000118 	.word	0x20000118

00006c90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    6c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6c94:	0004      	movs	r4, r0
    6c96:	d00a      	beq.n	6cae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    6c98:	484d      	ldr	r0, [pc, #308]	; (6dd0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x140>)
    6c9a:	2600      	movs	r6, #0
    6c9c:	7801      	ldrb	r1, [r0, #0]
    6c9e:	b149      	cbz	r1, 6cb4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    6ca0:	7066      	strb	r6, [r4, #1]
    6ca2:	2103      	movs	r1, #3
    6ca4:	7021      	strb	r1, [r4, #0]
    6ca6:	2101      	movs	r1, #1
    6ca8:	7121      	strb	r1, [r4, #4]
    6caa:	7006      	strb	r6, [r0, #0]
    6cac:	e08d      	b.n	6dca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    6cae:	f240 315d 	movw	r1, #861	; 0x35d
    6cb2:	e050      	b.n	6d56 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc6>
    6cb4:	f8df 811c 	ldr.w	r8, [pc, #284]	; 6dd4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x144>
    6cb8:	f88d 6000 	strb.w	r6, [sp]
    6cbc:	4668      	mov	r0, sp
    6cbe:	f000 f8b9 	bl	6e34 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c>
    6cc2:	f89d 1000 	ldrb.w	r1, [sp]
    6cc6:	2900      	cmp	r1, #0
    6cc8:	d1f8      	bne.n	6cbc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2c>
    6cca:	2800      	cmp	r0, #0
    6ccc:	d07e      	beq.n	6dcc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13c>
    6cce:	4605      	mov	r5, r0
    6cd0:	7a00      	ldrb	r0, [r0, #8]
    6cd2:	f88d 0000 	strb.w	r0, [sp]
    6cd6:	9800      	ldr	r0, [sp, #0]
    6cd8:	9000      	str	r0, [sp, #0]
    6cda:	f89d 7000 	ldrb.w	r7, [sp]
    6cde:	2f1f      	cmp	r7, #31
    6ce0:	d26e      	bcs.n	6dc0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    6ce2:	e8df f007 	tbb	[pc, r7]
    6ce6:	3d6d      	.short	0x3d6d
    6ce8:	3d6d106d 	.word	0x3d6d106d
    6cec:	3d3d4d3d 	.word	0x3d3d4d3d
    6cf0:	6d3d3d3d 	.word	0x6d3d3d3d
    6cf4:	3d3d6d10 	.word	0x3d3d6d10
    6cf8:	6d6d6d10 	.word	0x6d6d6d10
    6cfc:	103d3d6d 	.word	0x103d3d6d
    6d00:	626d3d3d 	.word	0x626d3d3d
    6d04:	0010      	.short	0x0010
    6d06:	4834      	ldr	r0, [pc, #208]	; (6dd8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x148>)
    6d08:	6803      	ldr	r3, [r0, #0]
    6d0a:	2b00      	cmp	r3, #0
    6d0c:	d05c      	beq.n	6dc8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x138>
    6d0e:	6868      	ldr	r0, [r5, #4]
    6d10:	463a      	mov	r2, r7
    6d12:	4621      	mov	r1, r4
    6d14:	4798      	blx	r3
    6d16:	7820      	ldrb	r0, [r4, #0]
    6d18:	6869      	ldr	r1, [r5, #4]
    6d1a:	2811      	cmp	r0, #17
    6d1c:	d002      	beq.n	6d24 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    6d1e:	2814      	cmp	r0, #20
    6d20:	d003      	beq.n	6d2a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    6d22:	e01b      	b.n	6d5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6d24:	7920      	ldrb	r0, [r4, #4]
    6d26:	b930      	cbnz	r0, 6d36 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa6>
    6d28:	e018      	b.n	6d5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6d2a:	7920      	ldrb	r0, [r4, #4]
    6d2c:	b1b0      	cbz	r0, 6d5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6d2e:	4608      	mov	r0, r1
    6d30:	f008 fa99 	bl	f266 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6d34:	b990      	cbnz	r0, 6d5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6d36:	88e4      	ldrh	r4, [r4, #6]
    6d38:	2100      	movs	r1, #0
    6d3a:	4620      	mov	r0, r4
    6d3c:	f007 f900 	bl	df40 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6d40:	b160      	cbz	r0, 6d5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6d42:	8800      	ldrh	r0, [r0, #0]
    6d44:	f007 faba 	bl	e2bc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6d48:	2100      	movs	r1, #0
    6d4a:	4620      	mov	r0, r4
    6d4c:	f7fe f90a 	bl	4f64 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6d50:	b120      	cbz	r0, 6d5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6d52:	f44f 71af 	mov.w	r1, #350	; 0x15e
    6d56:	2010      	movs	r0, #16
    6d58:	f7fd fe70 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d5c:	722e      	strb	r6, [r5, #8]
    6d5e:	e034      	b.n	6dca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    6d60:	f8d8 0000 	ldr.w	r0, [r8]
    6d64:	b358      	cbz	r0, 6dbe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12e>
    6d66:	463a      	mov	r2, r7
    6d68:	4629      	mov	r1, r5
    6d6a:	4620      	mov	r0, r4
    6d6c:	f000 f892 	bl	6e94 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8c>
    6d70:	b110      	cbz	r0, 6d78 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe8>
    6d72:	2f0b      	cmp	r7, #11
    6d74:	d029      	beq.n	6dca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    6d76:	e7f1      	b.n	6d5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6d78:	2f0b      	cmp	r7, #11
    6d7a:	d026      	beq.n	6dca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    6d7c:	722e      	strb	r6, [r5, #8]
    6d7e:	e79b      	b.n	6cb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x28>
    6d80:	f8d8 0000 	ldr.w	r0, [r8]
    6d84:	b180      	cbz	r0, 6da8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    6d86:	6868      	ldr	r0, [r5, #4]
    6d88:	7066      	strb	r6, [r4, #1]
    6d8a:	2108      	movs	r1, #8
    6d8c:	7021      	strb	r1, [r4, #0]
    6d8e:	8801      	ldrh	r1, [r0, #0]
    6d90:	80a1      	strh	r1, [r4, #4]
    6d92:	f8d0 1290 	ldr.w	r1, [r0, #656]	; 0x290
    6d96:	f8c4 1006 	str.w	r1, [r4, #6]
    6d9a:	f8d0 1294 	ldr.w	r1, [r0, #660]	; 0x294
    6d9e:	f8c4 100a 	str.w	r1, [r4, #10]
    6da2:	f8b0 0298 	ldrh.w	r0, [r0, #664]	; 0x298
    6da6:	81e0      	strh	r0, [r4, #14]
    6da8:	e7d8      	b.n	6d5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6daa:	480c      	ldr	r0, [pc, #48]	; (6ddc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14c>)
    6dac:	6803      	ldr	r3, [r0, #0]
    6dae:	b11b      	cbz	r3, 6db8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x128>
    6db0:	2200      	movs	r2, #0
    6db2:	4621      	mov	r1, r4
    6db4:	4610      	mov	r0, r2
    6db6:	4798      	blx	r3
    6db8:	e7d0      	b.n	6d5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6dba:	e007      	b.n	6dcc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13c>
    6dbc:	e000      	b.n	6dc0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    6dbe:	e002      	b.n	6dc6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x136>
    6dc0:	f240 412d 	movw	r1, #1069	; 0x42d
    6dc4:	e7c7      	b.n	6d56 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc6>
    6dc6:	e7c9      	b.n	6d5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6dc8:	e7c8      	b.n	6d5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    6dca:	2001      	movs	r0, #1
    6dcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6dd0:	20001645 	.word	0x20001645
    6dd4:	20000124 	.word	0x20000124
    6dd8:	20000120 	.word	0x20000120
    6ddc:	20000128 	.word	0x20000128

00006de0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    6de0:	4901      	ldr	r1, [pc, #4]	; (6de8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    6de2:	7008      	strb	r0, [r1, #0]
    6de4:	f000 b928 	b.w	7038 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x230>
    6de8:	20000114 	.word	0x20000114

00006dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    6dec:	4801      	ldr	r0, [pc, #4]	; (6df4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    6dee:	7800      	ldrb	r0, [r0, #0]
    6df0:	f7fd bc28 	b.w	4644 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6df4:	20000114 	.word	0x20000114

00006df8 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    6df8:	4902      	ldr	r1, [pc, #8]	; (6e04 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    6dfa:	4801      	ldr	r0, [pc, #4]	; (6e00 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    6dfc:	6008      	str	r0, [r1, #0]
    6dfe:	4770      	bx	lr
    6e00:	0000f191 	.word	0x0000f191
    6e04:	20000120 	.word	0x20000120

00006e08 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    6e08:	4905      	ldr	r1, [pc, #20]	; (6e20 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    6e0a:	4804      	ldr	r0, [pc, #16]	; (6e1c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    6e0c:	6008      	str	r0, [r1, #0]
    6e0e:	4906      	ldr	r1, [pc, #24]	; (6e28 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    6e10:	4804      	ldr	r0, [pc, #16]	; (6e24 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    6e12:	6008      	str	r0, [r1, #0]
    6e14:	4906      	ldr	r1, [pc, #24]	; (6e30 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    6e16:	4805      	ldr	r0, [pc, #20]	; (6e2c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    6e18:	6008      	str	r0, [r1, #0]
    6e1a:	4770      	bx	lr
    6e1c:	0000f191 	.word	0x0000f191
    6e20:	20000120 	.word	0x20000120
    6e24:	0000ecd1 	.word	0x0000ecd1
    6e28:	20000124 	.word	0x20000124
    6e2c:	00005845 	.word	0x00005845
    6e30:	20000128 	.word	0x20000128
    6e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e36:	4605      	mov	r5, r0
    6e38:	4c15      	ldr	r4, [pc, #84]	; (6e90 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x88>)
    6e3a:	2000      	movs	r0, #0
    6e3c:	7028      	strb	r0, [r5, #0]
    6e3e:	6820      	ldr	r0, [r4, #0]
    6e40:	2800      	cmp	r0, #0
    6e42:	d023      	beq.n	6e8c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x84>
    6e44:	7a01      	ldrb	r1, [r0, #8]
    6e46:	2601      	movs	r6, #1
    6e48:	f88d 1000 	strb.w	r1, [sp]
    6e4c:	9900      	ldr	r1, [sp, #0]
    6e4e:	9100      	str	r1, [sp, #0]
    6e50:	f89d 1000 	ldrb.w	r1, [sp]
    6e54:	2908      	cmp	r1, #8
    6e56:	d107      	bne.n	6e68 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x60>
    6e58:	6840      	ldr	r0, [r0, #4]
    6e5a:	8800      	ldrh	r0, [r0, #0]
    6e5c:	f7fe fa16 	bl	528c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6e60:	f006 fdbf 	bl	d9e2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6e64:	2800      	cmp	r0, #0
    6e66:	d011      	beq.n	6e8c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x84>
    6e68:	f3ef 8110 	mrs	r1, PRIMASK
    6e6c:	6820      	ldr	r0, [r4, #0]
    6e6e:	b672      	cpsid	i
    6e70:	6802      	ldr	r2, [r0, #0]
    6e72:	6022      	str	r2, [r4, #0]
    6e74:	b901      	cbnz	r1, 6e78 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x70>
    6e76:	b662      	cpsie	i
    6e78:	7a01      	ldrb	r1, [r0, #8]
    6e7a:	f88d 1000 	strb.w	r1, [sp]
    6e7e:	9900      	ldr	r1, [sp, #0]
    6e80:	9100      	str	r1, [sp, #0]
    6e82:	f89d 1000 	ldrb.w	r1, [sp]
    6e86:	2900      	cmp	r1, #0
    6e88:	d100      	bne.n	6e8c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x84>
    6e8a:	702e      	strb	r6, [r5, #0]
    6e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e8e:	0000      	.short	0x0000
    6e90:	20000118 	.word	0x20000118
    6e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6e98:	b086      	sub	sp, #24
    6e9a:	000f      	movs	r7, r1
    6e9c:	4604      	mov	r4, r0
    6e9e:	4691      	mov	r9, r2
    6ea0:	d013      	beq.n	6eca <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc2>
    6ea2:	6878      	ldr	r0, [r7, #4]
    6ea4:	b188      	cbz	r0, 6eca <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc2>
    6ea6:	f100 0578 	add.w	r5, r0, #120	; 0x78
    6eaa:	f500 7196 	add.w	r1, r0, #300	; 0x12c
    6eae:	8806      	ldrh	r6, [r0, #0]
    6eb0:	4610      	mov	r0, r2
    6eb2:	f04f 0800 	mov.w	r8, #0
    6eb6:	2a10      	cmp	r2, #16
    6eb8:	d079      	beq.n	6fae <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a6>
    6eba:	dc09      	bgt.n	6ed0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc8>
    6ebc:	f04f 0a01 	mov.w	sl, #1
    6ec0:	2801      	cmp	r0, #1
    6ec2:	d00a      	beq.n	6eda <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd2>
    6ec4:	2a0b      	cmp	r2, #11
    6ec6:	d171      	bne.n	6fac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    6ec8:	e01a      	b.n	6f00 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf8>
    6eca:	f240 2182 	movw	r1, #642	; 0x282
    6ece:	e0ad      	b.n	702c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    6ed0:	281a      	cmp	r0, #26
    6ed2:	d04d      	beq.n	6f70 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x168>
    6ed4:	2a1b      	cmp	r2, #27
    6ed6:	d169      	bne.n	6fac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    6ed8:	e027      	b.n	6f2a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x122>
    6eda:	2d00      	cmp	r5, #0
    6edc:	d00f      	beq.n	6efe <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf6>
    6ede:	f884 8001 	strb.w	r8, [r4, #1]
    6ee2:	f884 a000 	strb.w	sl, [r4]
    6ee6:	f884 8004 	strb.w	r8, [r4, #4]
    6eea:	f8a4 6005 	strh.w	r6, [r4, #5]
    6eee:	f895 0057 	ldrb.w	r0, [r5, #87]	; 0x57
    6ef2:	71e0      	strb	r0, [r4, #7]
    6ef4:	f835 0f58 	ldrh.w	r0, [r5, #88]!
    6ef8:	8120      	strh	r0, [r4, #8]
    6efa:	8868      	ldrh	r0, [r5, #2]
    6efc:	8160      	strh	r0, [r4, #10]
    6efe:	e076      	b.n	6fee <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    6f00:	4630      	mov	r0, r6
    6f02:	f7fe f9d9 	bl	52b8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6f06:	b168      	cbz	r0, 6f24 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>
    6f08:	f884 8001 	strb.w	r8, [r4, #1]
    6f0c:	220d      	movs	r2, #13
    6f0e:	7022      	strb	r2, [r4, #0]
    6f10:	80e6      	strh	r6, [r4, #6]
    6f12:	4641      	mov	r1, r8
    6f14:	f8a4 a008 	strh.w	sl, [r4, #8]
    6f18:	f884 a004 	strb.w	sl, [r4, #4]
    6f1c:	460a      	mov	r2, r1
    6f1e:	f006 ff33 	bl	dd88 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6f22:	e064      	b.n	6fee <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    6f24:	f44f 71ce 	mov.w	r1, #412	; 0x19c
    6f28:	e080      	b.n	702c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    6f2a:	f7ff fdfd 	bl	6b28 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    6f2e:	b3e8      	cbz	r0, 6fac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    6f30:	f887 8008 	strb.w	r8, [r7, #8]
    6f34:	4630      	mov	r0, r6
    6f36:	f8ad 6000 	strh.w	r6, [sp]
    6f3a:	a902      	add	r1, sp, #8
    6f3c:	f007 fa9d 	bl	e47a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6f40:	b110      	cbz	r0, 6f48 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x140>
    6f42:	f44f 71b7 	mov.w	r1, #366	; 0x16e
    6f46:	e071      	b.n	702c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    6f48:	9803      	ldr	r0, [sp, #12]
    6f4a:	f810 1f6a 	ldrb.w	r1, [r0, #106]!
    6f4e:	f88d 1002 	strb.w	r1, [sp, #2]
    6f52:	7841      	ldrb	r1, [r0, #1]
    6f54:	f88d 1003 	strb.w	r1, [sp, #3]
    6f58:	8840      	ldrh	r0, [r0, #2]
    6f5a:	f8ad 0004 	strh.w	r0, [sp, #4]
    6f5e:	2102      	movs	r1, #2
    6f60:	4668      	mov	r0, sp
    6f62:	f009 fc1a 	bl	1079a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6f66:	2800      	cmp	r0, #0
    6f68:	d034      	beq.n	6fd4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1cc>
    6f6a:	f44f 71c2 	mov.w	r1, #388	; 0x184
    6f6e:	e05d      	b.n	702c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    6f70:	f7ff fdd0 	bl	6b14 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    6f74:	b1d0      	cbz	r0, 6fac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    6f76:	f887 8008 	strb.w	r8, [r7, #8]
    6f7a:	a903      	add	r1, sp, #12
    6f7c:	4630      	mov	r0, r6
    6f7e:	f009 fa83 	bl	10488 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    6f82:	b110      	cbz	r0, 6f8a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x182>
    6f84:	f240 118b 	movw	r1, #395	; 0x18b
    6f88:	e050      	b.n	702c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    6f8a:	f8ad 6000 	strh.w	r6, [sp]
    6f8e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6f92:	f8ad 0002 	strh.w	r0, [sp, #2]
    6f96:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6f9a:	f8ad 0004 	strh.w	r0, [sp, #4]
    6f9e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    6fa2:	f8ad 0006 	strh.w	r0, [sp, #6]
    6fa6:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6faa:	e001      	b.n	6fb0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a8>
    6fac:	e015      	b.n	6fda <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1d2>
    6fae:	e009      	b.n	6fc4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1bc>
    6fb0:	f8ad 0008 	strh.w	r0, [sp, #8]
    6fb4:	4668      	mov	r0, sp
    6fb6:	f009 fa8b 	bl	104d0 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6fba:	2800      	cmp	r0, #0
    6fbc:	d00a      	beq.n	6fd4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1cc>
    6fbe:	f44f 71ca 	mov.w	r1, #404	; 0x194
    6fc2:	e033      	b.n	702c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    6fc4:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    6fc8:	f000 0001 	and.w	r0, r0, #1
    6fcc:	f7ff fd96 	bl	6afc <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    6fd0:	b130      	cbz	r0, 6fe0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1d8>
    6fd2:	2000      	movs	r0, #0
    6fd4:	b006      	add	sp, #24
    6fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6fda:	f1b9 0f08 	cmp.w	r9, #8
    6fde:	d008      	beq.n	6ff2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1ea>
    6fe0:	4814      	ldr	r0, [pc, #80]	; (7034 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22c>)
    6fe2:	6803      	ldr	r3, [r0, #0]
    6fe4:	b11b      	cbz	r3, 6fee <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    6fe6:	6878      	ldr	r0, [r7, #4]
    6fe8:	464a      	mov	r2, r9
    6fea:	4621      	mov	r1, r4
    6fec:	4798      	blx	r3
    6fee:	2001      	movs	r0, #1
    6ff0:	e7f0      	b.n	6fd4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1cc>
    6ff2:	4630      	mov	r0, r6
    6ff4:	f7fe f94a 	bl	528c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6ff8:	f006 fcf3 	bl	d9e2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6ffc:	b1a0      	cbz	r0, 7028 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x220>
    6ffe:	4630      	mov	r0, r6
    7000:	f007 f95c 	bl	e2bc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    7004:	2100      	movs	r1, #0
    7006:	4630      	mov	r0, r6
    7008:	f7fd ffac 	bl	4f64 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    700c:	2d00      	cmp	r5, #0
    700e:	d0ee      	beq.n	6fee <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    7010:	f884 8001 	strb.w	r8, [r4, #1]
    7014:	210a      	movs	r1, #10
    7016:	7021      	strb	r1, [r4, #0]
    7018:	f884 8004 	strb.w	r8, [r4, #4]
    701c:	f8a4 6005 	strh.w	r6, [r4, #5]
    7020:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    7024:	71e0      	strb	r0, [r4, #7]
    7026:	e7e2      	b.n	6fee <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    7028:	f240 21c3 	movw	r1, #707	; 0x2c3
    702c:	2010      	movs	r0, #16
    702e:	f7fd fd05 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7032:	0000      	.short	0x0000
    7034:	20000124 	.word	0x20000124
    7038:	4904      	ldr	r1, [pc, #16]	; (704c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x244>)
    703a:	2000      	movs	r0, #0
    703c:	6048      	str	r0, [r1, #4]
    703e:	6088      	str	r0, [r1, #8]
    7040:	4903      	ldr	r1, [pc, #12]	; (7050 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x248>)
    7042:	6008      	str	r0, [r1, #0]
    7044:	6048      	str	r0, [r1, #4]
    7046:	8108      	strh	r0, [r1, #8]
    7048:	4770      	bx	lr
    704a:	0000      	.short	0x0000
    704c:	20000114 	.word	0x20000114
    7050:	20001645 	.word	0x20001645

00007054 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    7054:	b5f0      	push	{r4, r5, r6, r7, lr}
    7056:	f06f 021f 	mvn.w	r2, #31
    705a:	0c01      	lsrs	r1, r0, #16
    705c:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    7060:	251f      	movs	r5, #31
    7062:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    7066:	3854      	subs	r0, #84	; 0x54
    7068:	d00d      	beq.n	7086 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    706a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    706e:	3855      	subs	r0, #85	; 0x55
    7070:	d009      	beq.n	7086 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7072:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    7076:	38aa      	subs	r0, #170	; 0xaa
    7078:	d005      	beq.n	7086 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    707a:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    707e:	38aa      	subs	r0, #170	; 0xaa
    7080:	d001      	beq.n	7086 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7082:	2001      	movs	r0, #1
    7084:	e000      	b.n	7088 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    7086:	2000      	movs	r0, #0
    7088:	2200      	movs	r2, #0
    708a:	4613      	mov	r3, r2
    708c:	ea4f 0402 	mov.w	r4, r2
    7090:	ea82 0701 	eor.w	r7, r2, r1
    7094:	43ff      	mvns	r7, r7
    7096:	431f      	orrs	r7, r3
    7098:	1c7f      	adds	r7, r7, #1
    709a:	d00f      	beq.n	70bc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    709c:	f006 0701 	and.w	r7, r6, #1
    70a0:	0852      	lsrs	r2, r2, #1
    70a2:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    70a6:	f005 0701 	and.w	r7, r5, #1
    70aa:	085b      	lsrs	r3, r3, #1
    70ac:	0876      	lsrs	r6, r6, #1
    70ae:	086d      	lsrs	r5, r5, #1
    70b0:	1c64      	adds	r4, r4, #1
    70b2:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    70b6:	2c16      	cmp	r4, #22
    70b8:	d3ea      	bcc.n	7090 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    70ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70bc:	2000      	movs	r0, #0
    70be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000070c0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    70c0:	b510      	push	{r4, lr}
    70c2:	4804      	ldr	r0, [pc, #16]	; (70d4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    70c4:	f007 ffce 	bl	f064 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb4>
    70c8:	4802      	ldr	r0, [pc, #8]	; (70d4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    70ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    70ce:	3008      	adds	r0, #8
    70d0:	f007 bfc8 	b.w	f064 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb4>
    70d4:	2000012c 	.word	0x2000012c

000070d8 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    70d8:	4801      	ldr	r0, [pc, #4]	; (70e0 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    70da:	f000 b809 	b.w	70f0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    70de:	0000      	.short	0x0000
    70e0:	2000012c 	.word	0x2000012c

000070e4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    70e4:	4801      	ldr	r0, [pc, #4]	; (70ec <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    70e6:	f000 b803 	b.w	70f0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    70ea:	0000      	.short	0x0000
    70ec:	20000134 	.word	0x20000134
    70f0:	b510      	push	{r4, lr}
    70f2:	e9d0 2100 	ldrd	r2, r1, [r0]
    70f6:	4b09      	ldr	r3, [pc, #36]	; (711c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    70f8:	4c09      	ldr	r4, [pc, #36]	; (7120 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    70fa:	4353      	muls	r3, r2
    70fc:	4354      	muls	r4, r2
    70fe:	4051      	eors	r1, r2
    7100:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    7104:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    7108:	ea4f 41f1 	mov.w	r1, r1, ror #19
    710c:	e9c0 2100 	strd	r2, r1, [r0]
    7110:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    7114:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7118:	4618      	mov	r0, r3
    711a:	bd10      	pop	{r4, pc}
    711c:	c6ef3760 	.word	0xc6ef3760
    7120:	9e3779bb 	.word	0x9e3779bb

00007124 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    7124:	b570      	push	{r4, r5, r6, lr}
    7126:	4604      	mov	r4, r0
    7128:	7c00      	ldrb	r0, [r0, #16]
    712a:	b300      	cbz	r0, 716e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    712c:	2802      	cmp	r0, #2
    712e:	d01e      	beq.n	716e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    7130:	f05f 0001 	movs.w	r0, #1
    7134:	f104 0149 	add.w	r1, r4, #73	; 0x49
    7138:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    713c:	460d      	mov	r5, r1
    713e:	b1c0      	cbz	r0, 7172 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    7140:	7de0      	ldrb	r0, [r4, #23]
    7142:	b1f0      	cbz	r0, 7182 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    7144:	f8d4 0011 	ldr.w	r0, [r4, #17]
    7148:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    714c:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    7150:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    7154:	7c20      	ldrb	r0, [r4, #16]
    7156:	f007 ffa6 	bl	f0a6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf6>
    715a:	7620      	strb	r0, [r4, #24]
    715c:	2008      	movs	r0, #8
    715e:	7660      	strb	r0, [r4, #25]
    7160:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7164:	4629      	mov	r1, r5
    7166:	f007 ff8a 	bl	f07e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xce>
    716a:	b9a8      	cbnz	r0, 7198 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    716c:	e00e      	b.n	718c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    716e:	2000      	movs	r0, #0
    7170:	e7e0      	b.n	7134 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    7172:	2000      	movs	r0, #0
    7174:	f7fe fb18 	bl	57a8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    7178:	2800      	cmp	r0, #0
    717a:	d1eb      	bne.n	7154 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    717c:	f240 418a 	movw	r1, #1162	; 0x48a
    7180:	e001      	b.n	7186 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    7182:	f240 418e 	movw	r1, #1166	; 0x48e
    7186:	202d      	movs	r0, #45	; 0x2d
    7188:	f7fd fc58 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    718c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7190:	4629      	mov	r1, r5
    7192:	f007 ff7d 	bl	f090 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe0>
    7196:	b100      	cbz	r0, 719a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    7198:	2001      	movs	r0, #1
    719a:	76a0      	strb	r0, [r4, #26]
    719c:	7e20      	ldrb	r0, [r4, #24]
    719e:	b130      	cbz	r0, 71ae <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    71a0:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    71a4:	f104 0150 	add.w	r1, r4, #80	; 0x50
    71a8:	f007 f924 	bl	e3f4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    71ac:	7660      	strb	r0, [r4, #25]
    71ae:	f7ff f9b9 	bl	6524 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    71b2:	490c      	ldr	r1, [pc, #48]	; (71e4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    71b4:	fba0 2301 	umull	r2, r3, r0, r1
    71b8:	f104 0040 	add.w	r0, r4, #64	; 0x40
    71bc:	f008 f90c 	bl	f3d8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe0>
    71c0:	2100      	movs	r1, #0
    71c2:	4620      	mov	r0, r4
    71c4:	f008 f8b6 	bl	f334 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    71c8:	2000      	movs	r0, #0
    71ca:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    71ce:	78a0      	ldrb	r0, [r4, #2]
    71d0:	0740      	lsls	r0, r0, #29
    71d2:	d505      	bpl.n	71e0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    71d4:	4620      	mov	r0, r4
    71d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    71da:	2100      	movs	r1, #0
    71dc:	f000 bdac 	b.w	7d38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x660>
    71e0:	bd70      	pop	{r4, r5, r6, pc}
    71e2:	0000      	.short	0x0000
    71e4:	000f4240 	.word	0x000f4240

000071e8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    71e8:	b530      	push	{r4, r5, lr}
    71ea:	460c      	mov	r4, r1
    71ec:	b08d      	sub	sp, #52	; 0x34
    71ee:	4605      	mov	r5, r0
    71f0:	4601      	mov	r1, r0
    71f2:	2220      	movs	r2, #32
    71f4:	a802      	add	r0, sp, #8
    71f6:	f005 fe71 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    71fa:	a80a      	add	r0, sp, #40	; 0x28
    71fc:	f008 f952 	bl	f4a4 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    7200:	7aa0      	ldrb	r0, [r4, #10]
    7202:	f88d 0018 	strb.w	r0, [sp, #24]
    7206:	7820      	ldrb	r0, [r4, #0]
    7208:	f88d 0008 	strb.w	r0, [sp, #8]
    720c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    7210:	f8ad 0000 	strh.w	r0, [sp]
    7214:	f89d 0000 	ldrb.w	r0, [sp]
    7218:	f000 0101 	and.w	r1, r0, #1
    721c:	f3c0 0240 	ubfx	r2, r0, #1, #1
    7220:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    7224:	f3c0 0280 	ubfx	r2, r0, #2, #1
    7228:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    722c:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    7230:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    7234:	f3c0 1200 	ubfx	r2, r0, #4, #1
    7238:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    723c:	f3c0 1240 	ubfx	r2, r0, #5, #1
    7240:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    7244:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7248:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    724c:	f8ad 000a 	strh.w	r0, [sp, #10]
    7250:	7d20      	ldrb	r0, [r4, #20]
    7252:	2801      	cmp	r0, #1
    7254:	d006      	beq.n	7264 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    7256:	2802      	cmp	r0, #2
    7258:	d004      	beq.n	7264 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    725a:	f240 21bb 	movw	r1, #699	; 0x2bb
    725e:	2006      	movs	r0, #6
    7260:	f7fd fbec 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7264:	f88d 000c 	strb.w	r0, [sp, #12]
    7268:	7a61      	ldrb	r1, [r4, #9]
    726a:	a80a      	add	r0, sp, #40	; 0x28
    726c:	f008 f901 	bl	f472 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    7270:	7d20      	ldrb	r0, [r4, #20]
    7272:	2101      	movs	r1, #1
    7274:	2802      	cmp	r0, #2
    7276:	d102      	bne.n	727e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    7278:	7d60      	ldrb	r0, [r4, #21]
    727a:	1c40      	adds	r0, r0, #1
    727c:	b2c1      	uxtb	r1, r0
    727e:	7ea0      	ldrb	r0, [r4, #26]
    7280:	1c40      	adds	r0, r0, #1
    7282:	b2c2      	uxtb	r2, r0
    7284:	a80a      	add	r0, sp, #40	; 0x28
    7286:	f008 f8bb 	bl	f400 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    728a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    728e:	0700      	lsls	r0, r0, #28
    7290:	d501      	bpl.n	7296 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    7292:	2000      	movs	r0, #0
    7294:	e020      	b.n	72d8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    7296:	a80a      	add	r0, sp, #40	; 0x28
    7298:	f008 f8c4 	bl	f424 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    729c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    72a0:	2228      	movs	r2, #40	; 0x28
    72a2:	f000 fdef 	bl	7e84 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    72a6:	f240 2171 	movw	r1, #625	; 0x271
    72aa:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    72ae:	fbb0 f0f1 	udiv	r0, r0, r1
    72b2:	4348      	muls	r0, r1
    72b4:	f8d4 1002 	ldr.w	r1, [r4, #2]
    72b8:	f240 2371 	movw	r3, #625	; 0x271
    72bc:	0a0a      	lsrs	r2, r1, #8
    72be:	f240 2171 	movw	r1, #625	; 0x271
    72c2:	434a      	muls	r2, r1
    72c4:	f8d4 1005 	ldr.w	r1, [r4, #5]
    72c8:	0a09      	lsrs	r1, r1, #8
    72ca:	4359      	muls	r1, r3
    72cc:	4290      	cmp	r0, r2
    72ce:	d801      	bhi.n	72d4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    72d0:	9204      	str	r2, [sp, #16]
    72d2:	e004      	b.n	72de <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    72d4:	4288      	cmp	r0, r1
    72d6:	d801      	bhi.n	72dc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    72d8:	9004      	str	r0, [sp, #16]
    72da:	e000      	b.n	72de <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    72dc:	9104      	str	r1, [sp, #16]
    72de:	7ca0      	ldrb	r0, [r4, #18]
    72e0:	f88d 0017 	strb.w	r0, [sp, #23]
    72e4:	7e20      	ldrb	r0, [r4, #24]
    72e6:	2801      	cmp	r0, #1
    72e8:	d000      	beq.n	72ec <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    72ea:	2000      	movs	r0, #0
    72ec:	f88d 0014 	strb.w	r0, [sp, #20]
    72f0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    72f2:	f006 fee6 	bl	e0c2 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    72f6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    72f8:	f006 ff87 	bl	e20a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    72fc:	2220      	movs	r2, #32
    72fe:	a902      	add	r1, sp, #8
    7300:	4628      	mov	r0, r5
    7302:	f005 fdeb 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7306:	980a      	ldr	r0, [sp, #40]	; 0x28
    7308:	6228      	str	r0, [r5, #32]
    730a:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    730e:	84a8      	strh	r0, [r5, #36]	; 0x24
    7310:	7ae0      	ldrb	r0, [r4, #11]
    7312:	b168      	cbz	r0, 7330 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7314:	2802      	cmp	r0, #2
    7316:	d00b      	beq.n	7330 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7318:	f05f 0001 	movs.w	r0, #1
    731c:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    7320:	68e0      	ldr	r0, [r4, #12]
    7322:	6528      	str	r0, [r5, #80]	; 0x50
    7324:	8a20      	ldrh	r0, [r4, #16]
    7326:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    732a:	b00d      	add	sp, #52	; 0x34
    732c:	2000      	movs	r0, #0
    732e:	bd30      	pop	{r4, r5, pc}
    7330:	2000      	movs	r0, #0
    7332:	e7f3      	b.n	731c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00007334 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    7334:	4a0a      	ldr	r2, [pc, #40]	; (7360 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    7336:	b510      	push	{r4, lr}
    7338:	2100      	movs	r1, #0
    733a:	7011      	strb	r1, [r2, #0]
    733c:	4c09      	ldr	r4, [pc, #36]	; (7364 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    733e:	6060      	str	r0, [r4, #4]
    7340:	f000 f822 	bl	7388 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    7344:	b110      	cbz	r0, 734c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    7346:	f240 310a 	movw	r1, #778	; 0x30a
    734a:	e004      	b.n	7356 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    734c:	68a0      	ldr	r0, [r4, #8]
    734e:	2800      	cmp	r0, #0
    7350:	d104      	bne.n	735c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    7352:	f240 310d 	movw	r1, #781	; 0x30d
    7356:	202d      	movs	r0, #45	; 0x2d
    7358:	f7fd fb70 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    735c:	bd10      	pop	{r4, pc}
    735e:	0000      	.short	0x0000
    7360:	200011d8 	.word	0x200011d8
    7364:	2000013c 	.word	0x2000013c

00007368 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    7368:	4902      	ldr	r1, [pc, #8]	; (7374 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    736a:	4801      	ldr	r0, [pc, #4]	; (7370 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    736c:	6088      	str	r0, [r1, #8]
    736e:	4770      	bx	lr
    7370:	00007e6c 	.word	0x00007e6c
    7374:	2000013c 	.word	0x2000013c

00007378 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    7378:	4902      	ldr	r1, [pc, #8]	; (7384 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    737a:	6008      	str	r0, [r1, #0]
    737c:	6889      	ldr	r1, [r1, #8]
    737e:	6809      	ldr	r1, [r1, #0]
    7380:	4708      	bx	r1
    7382:	0000      	.short	0x0000
    7384:	2000013c 	.word	0x2000013c

00007388 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    7388:	4808      	ldr	r0, [pc, #32]	; (73ac <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    738a:	b510      	push	{r4, lr}
    738c:	7800      	ldrb	r0, [r0, #0]
    738e:	b110      	cbz	r0, 7396 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    7390:	240c      	movs	r4, #12
    7392:	4620      	mov	r0, r4
    7394:	bd10      	pop	{r4, pc}
    7396:	2400      	movs	r4, #0
    7398:	2218      	movs	r2, #24
    739a:	4621      	mov	r1, r4
    739c:	4803      	ldr	r0, [pc, #12]	; (73ac <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    739e:	f005 fe17 	bl	cfd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    73a2:	f004 f8bd 	bl	b520 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    73a6:	f003 fee1 	bl	b16c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    73aa:	e7f2      	b.n	7392 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    73ac:	200011d8 	.word	0x200011d8

000073b0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    73b0:	4904      	ldr	r1, [pc, #16]	; (73c4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    73b2:	b510      	push	{r4, lr}
    73b4:	7809      	ldrb	r1, [r1, #0]
    73b6:	2901      	cmp	r1, #1
    73b8:	d101      	bne.n	73be <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    73ba:	f000 fb7b 	bl	7ab4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    73be:	2000      	movs	r0, #0
    73c0:	bd10      	pop	{r4, pc}
    73c2:	0000      	.short	0x0000
    73c4:	200011d8 	.word	0x200011d8

000073c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    73c8:	4902      	ldr	r1, [pc, #8]	; (73d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    73ca:	4801      	ldr	r0, [pc, #4]	; (73d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    73cc:	6008      	str	r0, [r1, #0]
    73ce:	4770      	bx	lr
    73d0:	00007bf1 	.word	0x00007bf1
    73d4:	20000148 	.word	0x20000148
    73d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    73dc:	000f      	movs	r7, r1
    73de:	4604      	mov	r4, r0
    73e0:	d023      	beq.n	742a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    73e2:	f104 0020 	add.w	r0, r4, #32
    73e6:	4605      	mov	r5, r0
    73e8:	f008 f845 	bl	f476 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    73ec:	b9b0      	cbnz	r0, 741c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    73ee:	78a0      	ldrb	r0, [r4, #2]
    73f0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    73f4:	b350      	cbz	r0, 744c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    73f6:	4628      	mov	r0, r5
    73f8:	f008 f814 	bl	f424 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    73fc:	4606      	mov	r6, r0
    73fe:	4628      	mov	r0, r5
    7400:	f008 f839 	bl	f476 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7404:	1a30      	subs	r0, r6, r0
    7406:	b2c0      	uxtb	r0, r0
    7408:	f008 f88a 	bl	f520 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    740c:	4601      	mov	r1, r0
    740e:	4835      	ldr	r0, [pc, #212]	; (74e4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    7410:	6842      	ldr	r2, [r0, #4]
    7412:	4411      	add	r1, r2
    7414:	6041      	str	r1, [r0, #4]
    7416:	4628      	mov	r0, r5
    7418:	f008 f84b 	bl	f4b2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    741c:	4628      	mov	r0, r5
    741e:	f008 f80d 	bl	f43c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7422:	4601      	mov	r1, r0
    7424:	4620      	mov	r0, r4
    7426:	f007 ffc1 	bl	f3ac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb4>
    742a:	4d2f      	ldr	r5, [pc, #188]	; (74e8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    742c:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    7430:	2100      	movs	r1, #0
    7432:	6868      	ldr	r0, [r5, #4]
    7434:	8001      	strh	r1, [r0, #0]
    7436:	f007 ffda 	bl	f3ee <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    743a:	8860      	ldrh	r0, [r4, #2]
    743c:	2813      	cmp	r0, #19
    743e:	d013      	beq.n	7468 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    7440:	dc09      	bgt.n	7456 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    7442:	2810      	cmp	r0, #16
    7444:	d036      	beq.n	74b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    7446:	2812      	cmp	r0, #18
    7448:	d109      	bne.n	745e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    744a:	e031      	b.n	74b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    744c:	4620      	mov	r0, r4
    744e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7452:	f000 bb2f 	b.w	7ab4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7456:	2815      	cmp	r0, #21
    7458:	d00f      	beq.n	747a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    745a:	281d      	cmp	r0, #29
    745c:	d00d      	beq.n	747a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    745e:	f240 614a 	movw	r1, #1610	; 0x64a
    7462:	202d      	movs	r0, #45	; 0x2d
    7464:	f7fd faea 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7468:	2100      	movs	r1, #0
    746a:	6868      	ldr	r0, [r5, #4]
    746c:	f007 fb5c 	bl	eb28 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7470:	2101      	movs	r1, #1
    7472:	6868      	ldr	r0, [r5, #4]
    7474:	f007 ffbb 	bl	f3ee <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    7478:	e020      	b.n	74bc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    747a:	2101      	movs	r1, #1
    747c:	6868      	ldr	r0, [r5, #4]
    747e:	f007 fb53 	bl	eb28 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7482:	2101      	movs	r1, #1
    7484:	6868      	ldr	r0, [r5, #4]
    7486:	f007 ffb2 	bl	f3ee <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    748a:	b136      	cbz	r6, 749a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    748c:	f104 0157 	add.w	r1, r4, #87	; 0x57
    7490:	6868      	ldr	r0, [r5, #4]
    7492:	f007 fb64 	bl	eb5e <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7496:	2101      	movs	r1, #1
    7498:	e006      	b.n	74a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    749a:	f104 0150 	add.w	r1, r4, #80	; 0x50
    749e:	6868      	ldr	r0, [r5, #4]
    74a0:	f007 fb5d 	bl	eb5e <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    74a4:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    74a8:	6868      	ldr	r0, [r5, #4]
    74aa:	f007 fb5e 	bl	eb6a <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    74ae:	e005      	b.n	74bc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    74b0:	2106      	movs	r1, #6
    74b2:	e000      	b.n	74b6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    74b4:	2102      	movs	r1, #2
    74b6:	6868      	ldr	r0, [r5, #4]
    74b8:	f007 fb36 	bl	eb28 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    74bc:	4620      	mov	r0, r4
    74be:	f000 fcb1 	bl	7e24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x74c>
    74c2:	8860      	ldrh	r0, [r4, #2]
    74c4:	281d      	cmp	r0, #29
    74c6:	d007      	beq.n	74d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
    74c8:	2815      	cmp	r0, #21
    74ca:	d005      	beq.n	74d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
    74cc:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    74d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    74d2:	6868      	ldr	r0, [r5, #4]
    74d4:	f007 fb18 	bl	eb08 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    74d8:	4639      	mov	r1, r7
    74da:	4620      	mov	r0, r4
    74dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    74e0:	f000 b9e4 	b.w	78ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    74e4:	200011d8 	.word	0x200011d8
    74e8:	2000013c 	.word	0x2000013c
    74ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74f0:	4d2e      	ldr	r5, [pc, #184]	; (75ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    74f2:	4607      	mov	r7, r0
    74f4:	7828      	ldrb	r0, [r5, #0]
    74f6:	2802      	cmp	r0, #2
    74f8:	d005      	beq.n	7506 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    74fa:	7828      	ldrb	r0, [r5, #0]
    74fc:	2803      	cmp	r0, #3
    74fe:	d002      	beq.n	7506 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    7500:	f640 41b9 	movw	r1, #3257	; 0xcb9
    7504:	e028      	b.n	7558 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x190>
    7506:	4c2a      	ldr	r4, [pc, #168]	; (75b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    7508:	6820      	ldr	r0, [r4, #0]
    750a:	7b01      	ldrb	r1, [r0, #12]
    750c:	b109      	cbz	r1, 7512 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    750e:	f007 ff58 	bl	f3c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xca>
    7512:	f8d4 c004 	ldr.w	ip, [r4, #4]
    7516:	f04f 0800 	mov.w	r8, #0
    751a:	f89c 0000 	ldrb.w	r0, [ip]
    751e:	f000 060f 	and.w	r6, r0, #15
    7522:	b33f      	cbz	r7, 7574 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7524:	6821      	ldr	r1, [r4, #0]
    7526:	09c0      	lsrs	r0, r0, #7
    7528:	f101 0349 	add.w	r3, r1, #73	; 0x49
    752c:	f891 2048 	ldrb.w	r2, [r1, #72]	; 0x48
    7530:	f10c 0109 	add.w	r1, ip, #9
    7534:	f006 fec6 	bl	e2c4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7538:	b1e0      	cbz	r0, 7574 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    753a:	4641      	mov	r1, r8
    753c:	6860      	ldr	r0, [r4, #4]
    753e:	f007 fad3 	bl	eae8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    7542:	b1b8      	cbz	r0, 7574 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7544:	782a      	ldrb	r2, [r5, #0]
    7546:	6820      	ldr	r0, [r4, #0]
    7548:	4631      	mov	r1, r6
    754a:	2a02      	cmp	r2, #2
    754c:	d007      	beq.n	755e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    754e:	782a      	ldrb	r2, [r5, #0]
    7550:	2a03      	cmp	r2, #3
    7552:	d004      	beq.n	755e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    7554:	f640 4192 	movw	r1, #3218	; 0xc92
    7558:	202d      	movs	r0, #45	; 0x2d
    755a:	f7fd fa6f 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    755e:	68a2      	ldr	r2, [r4, #8]
    7560:	782b      	ldrb	r3, [r5, #0]
    7562:	6952      	ldr	r2, [r2, #20]
    7564:	f06f 0607 	mvn.w	r6, #7
    7568:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    756c:	58d2      	ldr	r2, [r2, r3]
    756e:	4790      	blx	r2
    7570:	4606      	mov	r6, r0
    7572:	e000      	b.n	7576 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    7574:	2601      	movs	r6, #1
    7576:	7ba8      	ldrb	r0, [r5, #14]
    7578:	b118      	cbz	r0, 7582 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ba>
    757a:	f003 ffd1 	bl	b520 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    757e:	f003 fdf5 	bl	b16c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7582:	2e00      	cmp	r6, #0
    7584:	d00f      	beq.n	75a6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1de>
    7586:	6820      	ldr	r0, [r4, #0]
    7588:	f007 ffe0 	bl	f54c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    758c:	b130      	cbz	r0, 759c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d4>
    758e:	f003 ffef 	bl	b570 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7592:	68a0      	ldr	r0, [r4, #8]
    7594:	6880      	ldr	r0, [r0, #8]
    7596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    759a:	4700      	bx	r0
    759c:	6820      	ldr	r0, [r4, #0]
    759e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    75a2:	f000 ba87 	b.w	7ab4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    75a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    75aa:	0000      	.short	0x0000
    75ac:	200011d8 	.word	0x200011d8
    75b0:	2000013c 	.word	0x2000013c
    75b4:	b510      	push	{r4, lr}
    75b6:	2903      	cmp	r1, #3
    75b8:	d002      	beq.n	75c0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    75ba:	2905      	cmp	r1, #5
    75bc:	d10a      	bne.n	75d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    75be:	e002      	b.n	75c6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    75c0:	f000 fb7e 	bl	7cc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e8>
    75c4:	e003      	b.n	75ce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    75c6:	4904      	ldr	r1, [pc, #16]	; (75d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    75c8:	6809      	ldr	r1, [r1, #0]
    75ca:	b109      	cbz	r1, 75d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    75cc:	4788      	blx	r1
    75ce:	b108      	cbz	r0, 75d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    75d0:	2000      	movs	r0, #0
    75d2:	bd10      	pop	{r4, pc}
    75d4:	2001      	movs	r0, #1
    75d6:	bd10      	pop	{r4, pc}
    75d8:	20000148 	.word	0x20000148
    75dc:	4a09      	ldr	r2, [pc, #36]	; (7604 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    75de:	0003      	movs	r3, r0
    75e0:	6810      	ldr	r0, [r2, #0]
    75e2:	d001      	beq.n	75e8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    75e4:	f000 ba66 	b.w	7ab4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    75e8:	2900      	cmp	r1, #0
    75ea:	d009      	beq.n	7600 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    75ec:	6891      	ldr	r1, [r2, #8]
    75ee:	4a06      	ldr	r2, [pc, #24]	; (7608 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    75f0:	6909      	ldr	r1, [r1, #16]
    75f2:	7812      	ldrb	r2, [r2, #0]
    75f4:	f06f 030f 	mvn.w	r3, #15
    75f8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    75fc:	5889      	ldr	r1, [r1, r2]
    75fe:	4708      	bx	r1
    7600:	4770      	bx	lr
    7602:	0000      	.short	0x0000
    7604:	2000013c 	.word	0x2000013c
    7608:	200011d8 	.word	0x200011d8
    760c:	b570      	push	{r4, r5, r6, lr}
    760e:	4604      	mov	r4, r0
    7610:	8840      	ldrh	r0, [r0, #2]
    7612:	2810      	cmp	r0, #16
    7614:	d019      	beq.n	764a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    7616:	4d10      	ldr	r5, [pc, #64]	; (7658 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    7618:	7ba8      	ldrb	r0, [r5, #14]
    761a:	b120      	cbz	r0, 7626 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    761c:	f003 fdc6 	bl	b1ac <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    7620:	2040      	movs	r0, #64	; 0x40
    7622:	f003 ff8b 	bl	b53c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7626:	480d      	ldr	r0, [pc, #52]	; (765c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    7628:	6840      	ldr	r0, [r0, #4]
    762a:	f004 fa0d 	bl	ba48 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    762e:	78a0      	ldrb	r0, [r4, #2]
    7630:	0740      	lsls	r0, r0, #29
    7632:	d404      	bmi.n	763e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    7634:	2100      	movs	r1, #0
    7636:	7922      	ldrb	r2, [r4, #4]
    7638:	4608      	mov	r0, r1
    763a:	f004 fa7d 	bl	bb38 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    763e:	2000      	movs	r0, #0
    7640:	f004 f8b8 	bl	b7b4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7644:	2002      	movs	r0, #2
    7646:	7028      	strb	r0, [r5, #0]
    7648:	bd70      	pop	{r4, r5, r6, pc}
    764a:	4620      	mov	r0, r4
    764c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7650:	2101      	movs	r1, #1
    7652:	f7ff bec1 	b.w	73d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7656:	0000      	.short	0x0000
    7658:	200011d8 	.word	0x200011d8
    765c:	2000013c 	.word	0x2000013c
    7660:	b510      	push	{r4, lr}
    7662:	4c12      	ldr	r4, [pc, #72]	; (76ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    7664:	6820      	ldr	r0, [r4, #0]
    7666:	f000 f825 	bl	76b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    766a:	6820      	ldr	r0, [r4, #0]
    766c:	f007 ff6e 	bl	f54c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7670:	2800      	cmp	r0, #0
    7672:	6820      	ldr	r0, [r4, #0]
    7674:	d00b      	beq.n	768e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    7676:	490e      	ldr	r1, [pc, #56]	; (76b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    7678:	780a      	ldrb	r2, [r1, #0]
    767a:	2a02      	cmp	r2, #2
    767c:	d00b      	beq.n	7696 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    767e:	780a      	ldrb	r2, [r1, #0]
    7680:	2a03      	cmp	r2, #3
    7682:	d008      	beq.n	7696 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    7684:	f640 31c6 	movw	r1, #3014	; 0xbc6
    7688:	202d      	movs	r0, #45	; 0x2d
    768a:	f7fd f9d7 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    768e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7692:	f000 ba0f 	b.w	7ab4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7696:	68a2      	ldr	r2, [r4, #8]
    7698:	7809      	ldrb	r1, [r1, #0]
    769a:	68d2      	ldr	r2, [r2, #12]
    769c:	f06f 0307 	mvn.w	r3, #7
    76a0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    76a4:	5851      	ldr	r1, [r2, r1]
    76a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    76aa:	4708      	bx	r1
    76ac:	2000013c 	.word	0x2000013c
    76b0:	200011d8 	.word	0x200011d8
    76b4:	b510      	push	{r4, lr}
    76b6:	7b01      	ldrb	r1, [r0, #12]
    76b8:	b109      	cbz	r1, 76be <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    76ba:	f007 fe82 	bl	f3c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xca>
    76be:	4805      	ldr	r0, [pc, #20]	; (76d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
    76c0:	7b80      	ldrb	r0, [r0, #14]
    76c2:	2800      	cmp	r0, #0
    76c4:	d005      	beq.n	76d2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
    76c6:	f003 ff2b 	bl	b520 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    76ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    76ce:	f003 bd4d 	b.w	b16c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    76d2:	bd10      	pop	{r4, pc}
    76d4:	200011d8 	.word	0x200011d8

000076d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    76d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    76da:	4d59      	ldr	r5, [pc, #356]	; (7840 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>)
    76dc:	4604      	mov	r4, r0
    76de:	b08b      	sub	sp, #44	; 0x2c
    76e0:	7828      	ldrb	r0, [r5, #0]
    76e2:	bbe8      	cbnz	r0, 7760 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x88>
    76e4:	7820      	ldrb	r0, [r4, #0]
    76e6:	28ff      	cmp	r0, #255	; 0xff
    76e8:	d03d      	beq.n	7766 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    76ea:	2000      	movs	r0, #0
    76ec:	81a8      	strh	r0, [r5, #12]
    76ee:	6068      	str	r0, [r5, #4]
    76f0:	7068      	strb	r0, [r5, #1]
    76f2:	70a8      	strb	r0, [r5, #2]
    76f4:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
    76f8:	4b52      	ldr	r3, [pc, #328]	; (7844 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    76fa:	af06      	add	r7, sp, #24
    76fc:	4e52      	ldr	r6, [pc, #328]	; (7848 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>)
    76fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    7700:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    7704:	68b0      	ldr	r0, [r6, #8]
    7706:	6840      	ldr	r0, [r0, #4]
    7708:	9009      	str	r0, [sp, #36]	; 0x24
    770a:	a806      	add	r0, sp, #24
    770c:	f004 f826 	bl	b75c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    7710:	f004 f8f4 	bl	b8fc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    7714:	f004 fb68 	bl	bde8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    7718:	f003 ff02 	bl	b520 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    771c:	f003 fd26 	bl	b16c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7720:	484a      	ldr	r0, [pc, #296]	; (784c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    7722:	f004 fa3b 	bl	bb9c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    7726:	4847      	ldr	r0, [pc, #284]	; (7844 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    7728:	1f00      	subs	r0, r0, #4
    772a:	f004 fa41 	bl	bbb0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    772e:	f104 0020 	add.w	r0, r4, #32
    7732:	4607      	mov	r7, r0
    7734:	f007 febd 	bl	f4b2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7738:	4638      	mov	r0, r7
    773a:	f007 fe7f 	bl	f43c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    773e:	4601      	mov	r1, r0
    7740:	4620      	mov	r0, r4
    7742:	f007 fe33 	bl	f3ac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb4>
    7746:	f994 000e 	ldrsb.w	r0, [r4, #14]
    774a:	f004 f95b 	bl	ba04 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    774e:	7921      	ldrb	r1, [r4, #4]
    7750:	2000      	movs	r0, #0
    7752:	f003 ff97 	bl	b684 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    7756:	2101      	movs	r1, #1
    7758:	60a8      	str	r0, [r5, #8]
    775a:	b138      	cbz	r0, 776c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x94>
    775c:	7ea0      	ldrb	r0, [r4, #26]
    775e:	e000      	b.n	7762 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    7760:	e001      	b.n	7766 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    7762:	b950      	cbnz	r0, 777a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa2>
    7764:	e004      	b.n	7770 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x98>
    7766:	200c      	movs	r0, #12
    7768:	b00b      	add	sp, #44	; 0x2c
    776a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    776c:	7029      	strb	r1, [r5, #0]
    776e:	e064      	b.n	783a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    7770:	7e20      	ldrb	r0, [r4, #24]
    7772:	b910      	cbnz	r0, 777a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa2>
    7774:	78a0      	ldrb	r0, [r4, #2]
    7776:	0740      	lsls	r0, r0, #29
    7778:	d522      	bpl.n	77c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    777a:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
    777e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    7782:	4050      	eors	r0, r2
    7784:	ea70 0101 	orns	r1, r0, r1
    7788:	d01a      	beq.n	77c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    778a:	f7fb fd7f 	bl	328c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    778e:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    7792:	1a80      	subs	r0, r0, r2
    7794:	4199      	sbcs	r1, r3
    7796:	d313      	bcc.n	77c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    7798:	f7fe fec4 	bl	6524 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    779c:	492c      	ldr	r1, [pc, #176]	; (7850 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
    779e:	fba0 2301 	umull	r2, r3, r0, r1
    77a2:	f104 0040 	add.w	r0, r4, #64	; 0x40
    77a6:	f007 fe17 	bl	f3d8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe0>
    77aa:	2101      	movs	r1, #1
    77ac:	4620      	mov	r0, r4
    77ae:	f007 fdc1 	bl	f334 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    77b2:	78a0      	ldrb	r0, [r4, #2]
    77b4:	0740      	lsls	r0, r0, #29
    77b6:	d503      	bpl.n	77c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    77b8:	2101      	movs	r1, #1
    77ba:	4620      	mov	r0, r4
    77bc:	f000 fabc 	bl	7d38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x660>
    77c0:	f104 0130 	add.w	r1, r4, #48	; 0x30
    77c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    77c6:	f006 fcef 	bl	e1a8 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    77ca:	f104 0138 	add.w	r1, r4, #56	; 0x38
    77ce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    77d0:	f006 fced 	bl	e1ae <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    77d4:	f7fe ff0c 	bl	65f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    77d8:	6870      	ldr	r0, [r6, #4]
    77da:	1cc0      	adds	r0, r0, #3
    77dc:	f006 fdfd 	bl	e3da <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    77e0:	73a8      	strb	r0, [r5, #14]
    77e2:	78a0      	ldrb	r0, [r4, #2]
    77e4:	07c0      	lsls	r0, r0, #31
    77e6:	d028      	beq.n	783a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    77e8:	a903      	add	r1, sp, #12
    77ea:	2000      	movs	r0, #0
    77ec:	f006 fbb2 	bl	df54 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    77f0:	b120      	cbz	r0, 77fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x124>
    77f2:	f640 118c 	movw	r1, #2444	; 0x98c
    77f6:	202d      	movs	r0, #45	; 0x2d
    77f8:	f7fd f920 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77fc:	20ff      	movs	r0, #255	; 0xff
    77fe:	73e8      	strb	r0, [r5, #15]
    7800:	69e6      	ldr	r6, [r4, #28]
    7802:	f106 070a 	add.w	r7, r6, #10
    7806:	e013      	b.n	7830 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    7808:	9c05      	ldr	r4, [sp, #20]
    780a:	42b4      	cmp	r4, r6
    780c:	d010      	beq.n	7830 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    780e:	7a72      	ldrb	r2, [r6, #9]
    7810:	7a60      	ldrb	r0, [r4, #9]
    7812:	463b      	mov	r3, r7
    7814:	f104 010a 	add.w	r1, r4, #10
    7818:	f006 fd54 	bl	e2c4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    781c:	b140      	cbz	r0, 7830 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    781e:	78a0      	ldrb	r0, [r4, #2]
    7820:	73e8      	strb	r0, [r5, #15]
    7822:	f8d4 0003 	ldr.w	r0, [r4, #3]
    7826:	6128      	str	r0, [r5, #16]
    7828:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    782c:	82a8      	strh	r0, [r5, #20]
    782e:	e004      	b.n	783a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    7830:	a803      	add	r0, sp, #12
    7832:	f7fd fb47 	bl	4ec4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7836:	2800      	cmp	r0, #0
    7838:	d0e6      	beq.n	7808 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x130>
    783a:	2000      	movs	r0, #0
    783c:	e794      	b.n	7768 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x90>
    783e:	0000      	.short	0x0000
    7840:	200011d8 	.word	0x200011d8
    7844:	00007e4c 	.word	0x00007e4c
    7848:	2000013c 	.word	0x2000013c
    784c:	8e89bed6 	.word	0x8e89bed6
    7850:	000f4240 	.word	0x000f4240
    7854:	b510      	push	{r4, lr}
    7856:	4604      	mov	r4, r0
    7858:	f7ff ff3e 	bl	76d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    785c:	2800      	cmp	r0, #0
    785e:	d108      	bne.n	7872 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19a>
    7860:	4804      	ldr	r0, [pc, #16]	; (7874 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>)
    7862:	7800      	ldrb	r0, [r0, #0]
    7864:	2801      	cmp	r0, #1
    7866:	d003      	beq.n	7870 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x198>
    7868:	2100      	movs	r1, #0
    786a:	4620      	mov	r0, r4
    786c:	f7ff fdb4 	bl	73d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7870:	2000      	movs	r0, #0
    7872:	bd10      	pop	{r4, pc}
    7874:	200011d8 	.word	0x200011d8
    7878:	480a      	ldr	r0, [pc, #40]	; (78a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1cc>)
    787a:	b510      	push	{r4, lr}
    787c:	490a      	ldr	r1, [pc, #40]	; (78a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    787e:	6804      	ldr	r4, [r0, #0]
    7880:	7808      	ldrb	r0, [r1, #0]
    7882:	2800      	cmp	r0, #0
    7884:	d00d      	beq.n	78a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ca>
    7886:	7808      	ldrb	r0, [r1, #0]
    7888:	2802      	cmp	r0, #2
    788a:	d002      	beq.n	7892 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ba>
    788c:	7808      	ldrb	r0, [r1, #0]
    788e:	2803      	cmp	r0, #3
    7890:	d102      	bne.n	7898 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c0>
    7892:	4620      	mov	r0, r4
    7894:	f7ff ff0e 	bl	76b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    7898:	4620      	mov	r0, r4
    789a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    789e:	f000 b909 	b.w	7ab4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    78a2:	bd10      	pop	{r4, pc}
    78a4:	2000013c 	.word	0x2000013c
    78a8:	200011d8 	.word	0x200011d8
    78ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78b0:	4604      	mov	r4, r0
    78b2:	4827      	ldr	r0, [pc, #156]	; (7950 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>)
    78b4:	460d      	mov	r5, r1
    78b6:	6840      	ldr	r0, [r0, #4]
    78b8:	f004 f8c6 	bl	ba48 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    78bc:	4e25      	ldr	r6, [pc, #148]	; (7954 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    78be:	2004      	movs	r0, #4
    78c0:	7030      	strb	r0, [r6, #0]
    78c2:	b325      	cbz	r5, 790e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    78c4:	8860      	ldrh	r0, [r4, #2]
    78c6:	2810      	cmp	r0, #16
    78c8:	d02a      	beq.n	7920 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x248>
    78ca:	f104 0020 	add.w	r0, r4, #32
    78ce:	4680      	mov	r8, r0
    78d0:	68b5      	ldr	r5, [r6, #8]
    78d2:	f007 fda7 	bl	f424 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    78d6:	4607      	mov	r7, r0
    78d8:	4640      	mov	r0, r8
    78da:	f007 fdcc 	bl	f476 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    78de:	1a38      	subs	r0, r7, r0
    78e0:	1e40      	subs	r0, r0, #1
    78e2:	b2c0      	uxtb	r0, r0
    78e4:	8861      	ldrh	r1, [r4, #2]
    78e6:	2228      	movs	r2, #40	; 0x28
    78e8:	f000 faec 	bl	7ec4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    78ec:	4405      	add	r5, r0
    78ee:	78a0      	ldrb	r0, [r4, #2]
    78f0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    78f4:	b130      	cbz	r0, 7904 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x22c>
    78f6:	6870      	ldr	r0, [r6, #4]
    78f8:	4405      	add	r5, r0
    78fa:	f007 fe15 	bl	f528 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    78fe:	4428      	add	r0, r5
    7900:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
    7904:	7922      	ldrb	r2, [r4, #4]
    7906:	4629      	mov	r1, r5
    7908:	2000      	movs	r0, #0
    790a:	f004 f8b3 	bl	ba74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    790e:	8860      	ldrh	r0, [r4, #2]
    7910:	2813      	cmp	r0, #19
    7912:	d013      	beq.n	793c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    7914:	dc09      	bgt.n	792a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x252>
    7916:	2810      	cmp	r0, #16
    7918:	d017      	beq.n	794a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    791a:	2812      	cmp	r0, #18
    791c:	d109      	bne.n	7932 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
    791e:	e00d      	b.n	793c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    7920:	7921      	ldrb	r1, [r4, #4]
    7922:	2000      	movs	r0, #0
    7924:	f003 fe74 	bl	b610 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    7928:	e7f1      	b.n	790e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    792a:	2815      	cmp	r0, #21
    792c:	d006      	beq.n	793c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    792e:	281d      	cmp	r0, #29
    7930:	d004      	beq.n	793c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    7932:	f640 5148 	movw	r1, #3400	; 0xd48
    7936:	202d      	movs	r0, #45	; 0x2d
    7938:	f7fd f880 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    793c:	7922      	ldrb	r2, [r4, #4]
    793e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7942:	2101      	movs	r1, #1
    7944:	2000      	movs	r0, #0
    7946:	f004 b8f7 	b.w	bb38 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    794a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    794e:	0000      	.short	0x0000
    7950:	2000013c 	.word	0x2000013c
    7954:	200011d8 	.word	0x200011d8
    7958:	b510      	push	{r4, lr}
    795a:	4604      	mov	r4, r0
    795c:	7800      	ldrb	r0, [r0, #0]
    795e:	460b      	mov	r3, r1
    7960:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
    7964:	29ff      	cmp	r1, #255	; 0xff
    7966:	d010      	beq.n	798a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b2>
    7968:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
    796c:	1e51      	subs	r1, r2, #1
    796e:	4618      	mov	r0, r3
    7970:	f7fe fd56 	bl	6420 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7974:	b130      	cbz	r0, 7984 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
    7976:	f894 00b6 	ldrb.w	r0, [r4, #182]	; 0xb6
    797a:	f040 0002 	orr.w	r0, r0, #2
    797e:	f884 00b6 	strb.w	r0, [r4, #182]	; 0xb6
    7982:	e011      	b.n	79a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d0>
    7984:	f640 7193 	movw	r1, #3987	; 0xf93
    7988:	e023      	b.n	79d2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fa>
    798a:	4813      	ldr	r0, [pc, #76]	; (79d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>)
    798c:	6840      	ldr	r0, [r0, #4]
    798e:	7801      	ldrb	r1, [r0, #0]
    7990:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7994:	f884 10b6 	strb.w	r1, [r4, #182]	; 0xb6
    7998:	f8d0 1003 	ldr.w	r1, [r0, #3]
    799c:	f8c4 10b7 	str.w	r1, [r4, #183]	; 0xb7
    79a0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    79a4:	f8a4 00bb 	strh.w	r0, [r4, #187]	; 0xbb
    79a8:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    79ac:	287f      	cmp	r0, #127	; 0x7f
    79ae:	d00e      	beq.n	79ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f6>
    79b0:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    79b4:	207f      	movs	r0, #127	; 0x7f
    79b6:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    79ba:	2219      	movs	r2, #25
    79bc:	4621      	mov	r1, r4
    79be:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    79c2:	f7ff f941 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    79c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    79ca:	f7ff ba0f 	b.w	6dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    79ce:	f640 51fb 	movw	r1, #3579	; 0xdfb
    79d2:	202d      	movs	r0, #45	; 0x2d
    79d4:	f7fd f832 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79d8:	2000013c 	.word	0x2000013c
    79dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    79e0:	4690      	mov	r8, r2
    79e2:	460e      	mov	r6, r1
    79e4:	4604      	mov	r4, r0
    79e6:	2903      	cmp	r1, #3
    79e8:	d004      	beq.n	79f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31c>
    79ea:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    79ee:	b108      	cbz	r0, 79f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31c>
    79f0:	2001      	movs	r0, #1
    79f2:	e000      	b.n	79f6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31e>
    79f4:	2000      	movs	r0, #0
    79f6:	4681      	mov	r9, r0
    79f8:	f003 fdac 	bl	b554 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    79fc:	4605      	mov	r5, r0
    79fe:	2e03      	cmp	r6, #3
    7a00:	d003      	beq.n	7a0a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
    7a02:	2701      	movs	r7, #1
    7a04:	2e05      	cmp	r6, #5
    7a06:	d005      	beq.n	7a14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    7a08:	e008      	b.n	7a1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x344>
    7a0a:	78a0      	ldrb	r0, [r4, #2]
    7a0c:	2702      	movs	r7, #2
    7a0e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7a12:	e001      	b.n	7a18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x340>
    7a14:	78a0      	ldrb	r0, [r4, #2]
    7a16:	07c0      	lsls	r0, r0, #31
    7a18:	2800      	cmp	r0, #0
    7a1a:	d042      	beq.n	7aa2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ca>
    7a1c:	f1b9 0f00 	cmp.w	r9, #0
    7a20:	d13e      	bne.n	7aa0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    7a22:	4822      	ldr	r0, [pc, #136]	; (7aac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>)
    7a24:	7b80      	ldrb	r0, [r0, #14]
    7a26:	b140      	cbz	r0, 7a3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x362>
    7a28:	f006 fcda 	bl	e3e0 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    7a2c:	f888 0000 	strb.w	r0, [r8]
    7a30:	28ff      	cmp	r0, #255	; 0xff
    7a32:	d002      	beq.n	7a3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x362>
    7a34:	f7fe fd0e 	bl	6454 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7a38:	4305      	orrs	r5, r0
    7a3a:	4e1d      	ldr	r6, [pc, #116]	; (7ab0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>)
    7a3c:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    7a40:	f104 0350 	add.w	r3, r4, #80	; 0x50
    7a44:	6871      	ldr	r1, [r6, #4]
    7a46:	f811 0b03 	ldrb.w	r0, [r1], #3
    7a4a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7a4e:	f006 fc39 	bl	e2c4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7a52:	f898 1000 	ldrb.w	r1, [r8]
    7a56:	29ff      	cmp	r1, #255	; 0xff
    7a58:	d004      	beq.n	7a64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38c>
    7a5a:	b990      	cbnz	r0, 7a82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    7a5c:	7e60      	ldrb	r0, [r4, #25]
    7a5e:	4288      	cmp	r0, r1
    7a60:	d00f      	beq.n	7a82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    7a62:	e008      	b.n	7a76 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39e>
    7a64:	b138      	cbz	r0, 7a76 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39e>
    7a66:	6871      	ldr	r1, [r6, #4]
    7a68:	f811 0b03 	ldrb.w	r0, [r1], #3
    7a6c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7a70:	f007 fc47 	bl	f302 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7a74:	b128      	cbz	r0, 7a82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    7a76:	2000      	movs	r0, #0
    7a78:	78a1      	ldrb	r1, [r4, #2]
    7a7a:	0749      	lsls	r1, r1, #29
    7a7c:	d503      	bpl.n	7a86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ae>
    7a7e:	b990      	cbnz	r0, 7aa6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ce>
    7a80:	e00e      	b.n	7aa0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    7a82:	2001      	movs	r0, #1
    7a84:	e7f8      	b.n	7a78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    7a86:	b975      	cbnz	r5, 7aa6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ce>
    7a88:	7be0      	ldrb	r0, [r4, #15]
    7a8a:	b108      	cbz	r0, 7a90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b8>
    7a8c:	42b8      	cmp	r0, r7
    7a8e:	d107      	bne.n	7aa0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    7a90:	6871      	ldr	r1, [r6, #4]
    7a92:	f811 0b03 	ldrb.w	r0, [r1], #3
    7a96:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7a9a:	f007 fc32 	bl	f302 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7a9e:	b110      	cbz	r0, 7aa6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ce>
    7aa0:	2000      	movs	r0, #0
    7aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7aa6:	2001      	movs	r0, #1
    7aa8:	e7fb      	b.n	7aa2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ca>
    7aaa:	0000      	.short	0x0000
    7aac:	200011d8 	.word	0x200011d8
    7ab0:	2000013c 	.word	0x2000013c
    7ab4:	b570      	push	{r4, r5, r6, lr}
    7ab6:	4604      	mov	r4, r0
    7ab8:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    7aba:	4d13      	ldr	r5, [pc, #76]	; (7b08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x430>)
    7abc:	1c40      	adds	r0, r0, #1
    7abe:	8520      	strh	r0, [r4, #40]	; 0x28
    7ac0:	7ba8      	ldrb	r0, [r5, #14]
    7ac2:	2600      	movs	r6, #0
    7ac4:	b120      	cbz	r0, 7ad0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f8>
    7ac6:	f003 fd2b 	bl	b520 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7aca:	f003 fb4f 	bl	b16c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7ace:	73ae      	strb	r6, [r5, #14]
    7ad0:	702e      	strb	r6, [r5, #0]
    7ad2:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    7ad6:	b108      	cbz	r0, 7adc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x404>
    7ad8:	2101      	movs	r1, #1
    7ada:	e00f      	b.n	7afc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    7adc:	7b60      	ldrb	r0, [r4, #13]
    7ade:	b160      	cbz	r0, 7afa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x422>
    7ae0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    7ae2:	4288      	cmp	r0, r1
    7ae4:	d809      	bhi.n	7afa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x422>
    7ae6:	2101      	movs	r1, #1
    7ae8:	4620      	mov	r0, r4
    7aea:	f007 fd41 	bl	f570 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    7aee:	78a0      	ldrb	r0, [r4, #2]
    7af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7af4:	07c0      	lsls	r0, r0, #31
    7af6:	f7ff b979 	b.w	6dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7afa:	2100      	movs	r1, #0
    7afc:	4620      	mov	r0, r4
    7afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b02:	f007 bd35 	b.w	f570 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    7b06:	0000      	.short	0x0000
    7b08:	200011d8 	.word	0x200011d8
    7b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b0e:	4604      	mov	r4, r0
    7b10:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    7b14:	4616      	mov	r6, r2
    7b16:	460d      	mov	r5, r1
    7b18:	f88d 0000 	strb.w	r0, [sp]
    7b1c:	9800      	ldr	r0, [sp, #0]
    7b1e:	9000      	str	r0, [sp, #0]
    7b20:	f89d 0000 	ldrb.w	r0, [sp]
    7b24:	b110      	cbz	r0, 7b2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    7b26:	f640 31fa 	movw	r1, #3066	; 0xbfa
    7b2a:	e055      	b.n	7bd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x500>
    7b2c:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
    7b30:	2700      	movs	r7, #0
    7b32:	8828      	ldrh	r0, [r5, #0]
    7b34:	f8a4 0070 	strh.w	r0, [r4, #112]	; 0x70
    7b38:	2b00      	cmp	r3, #0
    7b3a:	d14a      	bne.n	7bd2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fa>
    7b3c:	6928      	ldr	r0, [r5, #16]
    7b3e:	f006 fcad 	bl	e49c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7b42:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    7b46:	8b28      	ldrh	r0, [r5, #24]
    7b48:	f8a4 0088 	strh.w	r0, [r4, #136]	; 0x88
    7b4c:	8b68      	ldrh	r0, [r5, #26]
    7b4e:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    7b52:	f895 01c7 	ldrb.w	r0, [r5, #455]	; 0x1c7
    7b56:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    7b5a:	7e20      	ldrb	r0, [r4, #24]
    7b5c:	f104 0149 	add.w	r1, r4, #73	; 0x49
    7b60:	460d      	mov	r5, r1
    7b62:	b120      	cbz	r0, 7b6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x496>
    7b64:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7b68:	f007 fa92 	bl	f090 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe0>
    7b6c:	b940      	cbnz	r0, 7b80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a8>
    7b6e:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    7b72:	b170      	cbz	r0, 7b92 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ba>
    7b74:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7b78:	4629      	mov	r1, r5
    7b7a:	f007 fa80 	bl	f07e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xce>
    7b7e:	b140      	cbz	r0, 7b92 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ba>
    7b80:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    7b84:	f8c4 007a 	str.w	r0, [r4, #122]	; 0x7a
    7b88:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    7b8c:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    7b90:	e003      	b.n	7b9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c2>
    7b92:	f8c4 707a 	str.w	r7, [r4, #122]	; 0x7a
    7b96:	f8a4 707e 	strh.w	r7, [r4, #126]	; 0x7e
    7b9a:	4814      	ldr	r0, [pc, #80]	; (7bec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x514>)
    7b9c:	2eff      	cmp	r6, #255	; 0xff
    7b9e:	6840      	ldr	r0, [r0, #4]
    7ba0:	7801      	ldrb	r1, [r0, #0]
    7ba2:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7ba6:	f884 1073 	strb.w	r1, [r4, #115]	; 0x73
    7baa:	f850 1f03 	ldr.w	r1, [r0, #3]!
    7bae:	d016      	beq.n	7bde <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x506>
    7bb0:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    7bb4:	8880      	ldrh	r0, [r0, #4]
    7bb6:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    7bba:	f104 0274 	add.w	r2, r4, #116	; 0x74
    7bbe:	1e51      	subs	r1, r2, #1
    7bc0:	4630      	mov	r0, r6
    7bc2:	f7fe fc2d 	bl	6420 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7bc6:	b128      	cbz	r0, 7bd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fc>
    7bc8:	f814 0f73 	ldrb.w	r0, [r4, #115]!
    7bcc:	f040 0002 	orr.w	r0, r0, #2
    7bd0:	7020      	strb	r0, [r4, #0]
    7bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7bd4:	f640 411b 	movw	r1, #3099	; 0xc1b
    7bd8:	202d      	movs	r0, #45	; 0x2d
    7bda:	f7fc ff2f 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bde:	f844 1f74 	str.w	r1, [r4, #116]!
    7be2:	8880      	ldrh	r0, [r0, #4]
    7be4:	80a0      	strh	r0, [r4, #4]
    7be6:	60e7      	str	r7, [r4, #12]
    7be8:	8227      	strh	r7, [r4, #16]
    7bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7bec:	2000013c 	.word	0x2000013c
    7bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7bf2:	4604      	mov	r4, r0
    7bf4:	20ff      	movs	r0, #255	; 0xff
    7bf6:	f88d 0000 	strb.w	r0, [sp]
    7bfa:	2601      	movs	r6, #1
    7bfc:	466a      	mov	r2, sp
    7bfe:	2105      	movs	r1, #5
    7c00:	4620      	mov	r0, r4
    7c02:	f7ff feeb 	bl	79dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    7c06:	b160      	cbz	r0, 7c22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x54a>
    7c08:	4d2c      	ldr	r5, [pc, #176]	; (7cbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>)
    7c0a:	4f2b      	ldr	r7, [pc, #172]	; (7cb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
    7c0c:	6869      	ldr	r1, [r5, #4]
    7c0e:	7bfa      	ldrb	r2, [r7, #15]
    7c10:	f107 0310 	add.w	r3, r7, #16
    7c14:	f811 0b03 	ldrb.w	r0, [r1], #3
    7c18:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7c1c:	f006 fb52 	bl	e2c4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7c20:	b110      	cbz	r0, 7c28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x550>
    7c22:	2600      	movs	r6, #0
    7c24:	4630      	mov	r0, r6
    7c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7c28:	686a      	ldr	r2, [r5, #4]
    7c2a:	69e0      	ldr	r0, [r4, #28]
    7c2c:	7812      	ldrb	r2, [r2, #0]
    7c2e:	f810 1f8e 	ldrb.w	r1, [r0, #142]!
    7c32:	f3c2 1240 	ubfx	r2, r2, #5, #1
    7c36:	4011      	ands	r1, r2
    7c38:	7001      	strb	r1, [r0, #0]
    7c3a:	2201      	movs	r2, #1
    7c3c:	4620      	mov	r0, r4
    7c3e:	69e1      	ldr	r1, [r4, #28]
    7c40:	f000 f8a8 	bl	7d94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6bc>
    7c44:	2300      	movs	r3, #0
    7c46:	f89d 2000 	ldrb.w	r2, [sp]
    7c4a:	4620      	mov	r0, r4
    7c4c:	69e1      	ldr	r1, [r4, #28]
    7c4e:	f7ff ff5d 	bl	7b0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x434>
    7c52:	220e      	movs	r2, #14
    7c54:	4621      	mov	r1, r4
    7c56:	f104 0064 	add.w	r0, r4, #100	; 0x64
    7c5a:	f7fe fff5 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    7c5e:	69e0      	ldr	r0, [r4, #28]
    7c60:	2203      	movs	r2, #3
    7c62:	8801      	ldrh	r1, [r0, #0]
    7c64:	f8a4 10a8 	strh.w	r1, [r4, #168]	; 0xa8
    7c68:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
    7c6c:	f884 00aa 	strb.w	r0, [r4, #170]	; 0xaa
    7c70:	4621      	mov	r1, r4
    7c72:	f104 009e 	add.w	r0, r4, #158	; 0x9e
    7c76:	f7fe ffe7 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    7c7a:	f7ff f8b7 	bl	6dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7c7e:	2000      	movs	r0, #0
    7c80:	7038      	strb	r0, [r7, #0]
    7c82:	2200      	movs	r2, #0
    7c84:	4621      	mov	r1, r4
    7c86:	69e0      	ldr	r0, [r4, #28]
    7c88:	f000 fa74 	bl	8174 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    7c8c:	69e0      	ldr	r0, [r4, #28]
    7c8e:	8800      	ldrh	r0, [r0, #0]
    7c90:	f7fd fafc 	bl	528c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7c94:	f006 f830 	bl	dcf8 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    7c98:	6868      	ldr	r0, [r5, #4]
    7c9a:	69e1      	ldr	r1, [r4, #28]
    7c9c:	f8d0 2003 	ldr.w	r2, [r0, #3]
    7ca0:	f841 2f03 	str.w	r2, [r1, #3]!
    7ca4:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    7ca8:	808a      	strh	r2, [r1, #4]
    7caa:	7800      	ldrb	r0, [r0, #0]
    7cac:	69e1      	ldr	r1, [r4, #28]
    7cae:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7cb2:	7088      	strb	r0, [r1, #2]
    7cb4:	e7b6      	b.n	7c24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x54c>
    7cb6:	0000      	.short	0x0000
    7cb8:	200011d8 	.word	0x200011d8
    7cbc:	2000013c 	.word	0x2000013c
    7cc0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    7cc4:	4604      	mov	r4, r0
    7cc6:	20ff      	movs	r0, #255	; 0xff
    7cc8:	f88d 0000 	strb.w	r0, [sp]
    7ccc:	2501      	movs	r5, #1
    7cce:	466a      	mov	r2, sp
    7cd0:	2103      	movs	r1, #3
    7cd2:	4620      	mov	r0, r4
    7cd4:	f7ff fe82 	bl	79dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    7cd8:	b330      	cbz	r0, 7d28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x650>
    7cda:	7b20      	ldrb	r0, [r4, #12]
    7cdc:	2700      	movs	r7, #0
    7cde:	b168      	cbz	r0, 7cfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x624>
    7ce0:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    7ce4:	f88d 0004 	strb.w	r0, [sp, #4]
    7ce8:	9801      	ldr	r0, [sp, #4]
    7cea:	9001      	str	r0, [sp, #4]
    7cec:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7cf0:	b920      	cbnz	r0, 7cfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x624>
    7cf2:	f89d 1000 	ldrb.w	r1, [sp]
    7cf6:	4620      	mov	r0, r4
    7cf8:	f7ff fe2e 	bl	7958 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    7cfc:	4e0c      	ldr	r6, [pc, #48]	; (7d30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
    7cfe:	2104      	movs	r1, #4
    7d00:	6870      	ldr	r0, [r6, #4]
    7d02:	8007      	strh	r7, [r0, #0]
    7d04:	f006 ff10 	bl	eb28 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7d08:	4620      	mov	r0, r4
    7d0a:	f000 f88b 	bl	7e24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x74c>
    7d0e:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    7d12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    7d14:	6870      	ldr	r0, [r6, #4]
    7d16:	f006 ff3e 	bl	eb96 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    7d1a:	4906      	ldr	r1, [pc, #24]	; (7d34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>)
    7d1c:	2005      	movs	r0, #5
    7d1e:	7008      	strb	r0, [r1, #0]
    7d20:	6870      	ldr	r0, [r6, #4]
    7d22:	f003 fe91 	bl	ba48 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7d26:	e000      	b.n	7d2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x652>
    7d28:	2500      	movs	r5, #0
    7d2a:	4628      	mov	r0, r5
    7d2c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    7d30:	2000013c 	.word	0x2000013c
    7d34:	200011d8 	.word	0x200011d8
    7d38:	b570      	push	{r4, r5, r6, lr}
    7d3a:	4604      	mov	r4, r0
    7d3c:	460e      	mov	r6, r1
    7d3e:	7e40      	ldrb	r0, [r0, #25]
    7d40:	f7fe fb3c 	bl	63bc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    7d44:	0005      	movs	r5, r0
    7d46:	d019      	beq.n	7d7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>
    7d48:	2110      	movs	r1, #16
    7d4a:	f006 fd45 	bl	e7d8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7d4e:	2800      	cmp	r0, #0
    7d50:	d114      	bne.n	7d7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>
    7d52:	2001      	movs	r0, #1
    7d54:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    7d58:	f104 0157 	add.w	r1, r4, #87	; 0x57
    7d5c:	4632      	mov	r2, r6
    7d5e:	460c      	mov	r4, r1
    7d60:	4628      	mov	r0, r5
    7d62:	f006 fadf 	bl	e324 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7d66:	4621      	mov	r1, r4
    7d68:	4c05      	ldr	r4, [pc, #20]	; (7d80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a8>)
    7d6a:	6860      	ldr	r0, [r4, #4]
    7d6c:	f006 fef7 	bl	eb5e <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7d70:	6860      	ldr	r0, [r4, #4]
    7d72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7d76:	2101      	movs	r1, #1
    7d78:	f006 bef7 	b.w	eb6a <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7d7c:	bd70      	pop	{r4, r5, r6, pc}
    7d7e:	0000      	.short	0x0000
    7d80:	2000013c 	.word	0x2000013c
    7d84:	4802      	ldr	r0, [pc, #8]	; (7d90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b8>)
    7d86:	2101      	movs	r1, #1
    7d88:	6800      	ldr	r0, [r0, #0]
    7d8a:	f7ff bb25 	b.w	73d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7d8e:	0000      	.short	0x0000
    7d90:	2000013c 	.word	0x2000013c
    7d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d98:	4e21      	ldr	r6, [pc, #132]	; (7e20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x748>)
    7d9a:	4680      	mov	r8, r0
    7d9c:	460c      	mov	r4, r1
    7d9e:	6870      	ldr	r0, [r6, #4]
    7da0:	4615      	mov	r5, r2
    7da2:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    7da6:	6161      	str	r1, [r4, #20]
    7da8:	8881      	ldrh	r1, [r0, #4]
    7daa:	83a1      	strh	r1, [r4, #28]
    7dac:	7981      	ldrb	r1, [r0, #6]
    7dae:	77a1      	strb	r1, [r4, #30]
    7db0:	8940      	ldrh	r0, [r0, #10]
    7db2:	f006 fb6f 	bl	e494 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    7db6:	4607      	mov	r7, r0
    7db8:	6120      	str	r0, [r4, #16]
    7dba:	6870      	ldr	r0, [r6, #4]
    7dbc:	4639      	mov	r1, r7
    7dbe:	7d80      	ldrb	r0, [r0, #22]
    7dc0:	f006 fd01 	bl	e7c6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    7dc4:	8420      	strh	r0, [r4, #32]
    7dc6:	6870      	ldr	r0, [r6, #4]
    7dc8:	4639      	mov	r1, r7
    7dca:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    7dce:	f006 fcf6 	bl	e7be <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    7dd2:	6260      	str	r0, [r4, #36]	; 0x24
    7dd4:	6870      	ldr	r0, [r6, #4]
    7dd6:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    7dda:	8321      	strh	r1, [r4, #24]
    7ddc:	8841      	ldrh	r1, [r0, #2]
    7dde:	8361      	strh	r1, [r4, #26]
    7de0:	6841      	ldr	r1, [r0, #4]
    7de2:	f8c4 108f 	str.w	r1, [r4, #143]	; 0x8f
    7de6:	7a01      	ldrb	r1, [r0, #8]
    7de8:	f884 1093 	strb.w	r1, [r4, #147]	; 0x93
    7dec:	7a41      	ldrb	r1, [r0, #9]
    7dee:	f001 011f 	and.w	r1, r1, #31
    7df2:	f884 109a 	strb.w	r1, [r4, #154]	; 0x9a
    7df6:	7a40      	ldrb	r0, [r0, #9]
    7df8:	0940      	lsrs	r0, r0, #5
    7dfa:	f884 01c7 	strb.w	r0, [r4, #455]	; 0x1c7
    7dfe:	f104 0066 	add.w	r0, r4, #102	; 0x66
    7e02:	7205      	strb	r5, [r0, #8]
    7e04:	7245      	strb	r5, [r0, #9]
    7e06:	21ff      	movs	r1, #255	; 0xff
    7e08:	7281      	strb	r1, [r0, #10]
    7e0a:	2100      	movs	r1, #0
    7e0c:	3836      	subs	r0, #54	; 0x36
    7e0e:	f007 f8a4 	bl	ef5a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    7e12:	f898 000e 	ldrb.w	r0, [r8, #14]
    7e16:	f884 0072 	strb.w	r0, [r4, #114]	; 0x72
    7e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e1e:	0000      	.short	0x0000
    7e20:	2000013c 	.word	0x2000013c
    7e24:	b570      	push	{r4, r5, r6, lr}
    7e26:	4d07      	ldr	r5, [pc, #28]	; (7e44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x76c>)
    7e28:	4604      	mov	r4, r0
    7e2a:	f100 0149 	add.w	r1, r0, #73	; 0x49
    7e2e:	6868      	ldr	r0, [r5, #4]
    7e30:	f006 fea2 	bl	eb78 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7e34:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    7e38:	6868      	ldr	r0, [r5, #4]
    7e3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7e3e:	f006 bea1 	b.w	eb84 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    7e42:	0000      	.short	0x0000
    7e44:	2000013c 	.word	0x2000013c
    7e48:	00555555 	.word	0x00555555
    7e4c:	00007661 	.word	0x00007661
    7e50:	000074ed 	.word	0x000074ed
    7e54:	000075dd 	.word	0x000075dd
    7e58:	00000000 	.word	0x00000000
    7e5c:	000075b5 	.word	0x000075b5
    7e60:	0000760d 	.word	0x0000760d
    7e64:	0000f329 	.word	0x0000f329
    7e68:	0000f32f 	.word	0x0000f32f
    7e6c:	00007855 	.word	0x00007855
    7e70:	00007879 	.word	0x00007879
    7e74:	00007d85 	.word	0x00007d85
    7e78:	00007e68 	.word	0x00007e68
    7e7c:	00007e60 	.word	0x00007e60
    7e80:	00007e5c 	.word	0x00007e5c

00007e84 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    7e84:	b510      	push	{r4, lr}
    7e86:	1e42      	subs	r2, r0, #1
    7e88:	2a02      	cmp	r2, #2
    7e8a:	d901      	bls.n	7e90 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    7e8c:	21ca      	movs	r1, #202	; 0xca
    7e8e:	e009      	b.n	7ea4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    7e90:	1e40      	subs	r0, r0, #1
    7e92:	2910      	cmp	r1, #16
    7e94:	d009      	beq.n	7eaa <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    7e96:	2912      	cmp	r1, #18
    7e98:	d00c      	beq.n	7eb4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    7e9a:	2913      	cmp	r1, #19
    7e9c:	d00a      	beq.n	7eb4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    7e9e:	2915      	cmp	r1, #21
    7ea0:	d005      	beq.n	7eae <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    7ea2:	21d8      	movs	r1, #216	; 0xd8
    7ea4:	202f      	movs	r0, #47	; 0x2f
    7ea6:	f7fc fdc9 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7eaa:	4905      	ldr	r1, [pc, #20]	; (7ec0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7eac:	e004      	b.n	7eb8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    7eae:	4904      	ldr	r1, [pc, #16]	; (7ec0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7eb0:	1d89      	adds	r1, r1, #6
    7eb2:	e001      	b.n	7eb8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    7eb4:	4902      	ldr	r1, [pc, #8]	; (7ec0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7eb6:	1f89      	subs	r1, r1, #6
    7eb8:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7ebc:	bd10      	pop	{r4, pc}
    7ebe:	0000      	.short	0x0000
    7ec0:	0000f540 	.word	0x0000f540

00007ec4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    7ec4:	1e42      	subs	r2, r0, #1
    7ec6:	b510      	push	{r4, lr}
    7ec8:	b2d2      	uxtb	r2, r2
    7eca:	2a01      	cmp	r2, #1
    7ecc:	d903      	bls.n	7ed6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    7ece:	291d      	cmp	r1, #29
    7ed0:	d001      	beq.n	7ed6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    7ed2:	21ee      	movs	r1, #238	; 0xee
    7ed4:	e00d      	b.n	7ef2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    7ed6:	2913      	cmp	r1, #19
    7ed8:	d013      	beq.n	7f02 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7eda:	dc04      	bgt.n	7ee6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    7edc:	2910      	cmp	r1, #16
    7ede:	d00b      	beq.n	7ef8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    7ee0:	2912      	cmp	r1, #18
    7ee2:	d104      	bne.n	7eee <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    7ee4:	e00d      	b.n	7f02 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7ee6:	2915      	cmp	r1, #21
    7ee8:	d008      	beq.n	7efc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    7eea:	291d      	cmp	r1, #29
    7eec:	d00e      	beq.n	7f0c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    7eee:	f44f 7181 	mov.w	r1, #258	; 0x102
    7ef2:	202f      	movs	r0, #47	; 0x2f
    7ef4:	f7fc fda2 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ef8:	4807      	ldr	r0, [pc, #28]	; (7f18 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7efa:	e004      	b.n	7f06 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    7efc:	4806      	ldr	r0, [pc, #24]	; (7f18 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7efe:	3008      	adds	r0, #8
    7f00:	e001      	b.n	7f06 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    7f02:	4805      	ldr	r0, [pc, #20]	; (7f18 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7f04:	1d00      	adds	r0, r0, #4
    7f06:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    7f0a:	bd10      	pop	{r4, pc}
    7f0c:	f240 315a 	movw	r1, #858	; 0x35a
    7f10:	fb10 f001 	smulbb	r0, r0, r1
    7f14:	bd10      	pop	{r4, pc}
    7f16:	0000      	.short	0x0000
    7f18:	0000f52e 	.word	0x0000f52e

00007f1c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    7f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7f20:	4604      	mov	r4, r0
    7f22:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    7f26:	4616      	mov	r6, r2
    7f28:	460f      	mov	r7, r1
    7f2a:	2800      	cmp	r0, #0
    7f2c:	d15e      	bne.n	7fec <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    7f2e:	4621      	mov	r1, r4
    7f30:	484d      	ldr	r0, [pc, #308]	; (8068 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68>)
    7f32:	f7fa fff9 	bl	2f28 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7f36:	4605      	mov	r5, r0
    7f38:	2820      	cmp	r0, #32
    7f3a:	d057      	beq.n	7fec <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    7f3c:	2250      	movs	r2, #80	; 0x50
    7f3e:	2100      	movs	r1, #0
    7f40:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    7f44:	f005 f844 	bl	cfd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7f48:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
    7f4c:	2501      	movs	r5, #1
    7f4e:	f8c4 70c4 	str.w	r7, [r4, #196]	; 0xc4
    7f52:	f884 50d8 	strb.w	r5, [r4, #216]	; 0xd8
    7f56:	b137      	cbz	r7, 7f66 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    7f58:	f7ff f8c4 	bl	70e4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    7f5c:	f000 0007 	and.w	r0, r0, #7
    7f60:	1c40      	adds	r0, r0, #1
    7f62:	f887 01f4 	strb.w	r0, [r7, #500]	; 0x1f4
    7f66:	4620      	mov	r0, r4
    7f68:	f007 fcd4 	bl	f914 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    7f6c:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
    7f70:	2002      	movs	r0, #2
    7f72:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
    7f76:	46a8      	mov	r8, r5
    7f78:	f884 50eb 	strb.w	r5, [r4, #235]	; 0xeb
    7f7c:	2500      	movs	r5, #0
    7f7e:	f804 5fe0 	strb.w	r5, [r4, #224]!
    7f82:	f7fc f8e1 	bl	4148 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    7f86:	4607      	mov	r7, r0
    7f88:	f004 fe45 	bl	cc16 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7f8c:	8921      	ldrh	r1, [r4, #8]
    7f8e:	3ce0      	subs	r4, #224	; 0xe0
    7f90:	4288      	cmp	r0, r1
    7f92:	d800      	bhi.n	7f96 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    7f94:	4608      	mov	r0, r1
    7f96:	4438      	add	r0, r7
    7f98:	30cc      	adds	r0, #204	; 0xcc
    7f9a:	b287      	uxth	r7, r0
    7f9c:	4620      	mov	r0, r4
    7f9e:	f007 f962 	bl	f266 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7fa2:	b330      	cbz	r0, 7ff2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    7fa4:	f008 feb1 	bl	10d0a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    7fa8:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    7fac:	b281      	uxth	r1, r0
    7fae:	4630      	mov	r0, r6
    7fb0:	f004 fe65 	bl	cc7e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7fb4:	4430      	add	r0, r6
    7fb6:	f8c4 00e4 	str.w	r0, [r4, #228]	; 0xe4
    7fba:	34c4      	adds	r4, #196	; 0xc4
    7fbc:	f7fb f966 	bl	328c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    7fc0:	19c0      	adds	r0, r0, r7
    7fc2:	4169      	adcs	r1, r5
    7fc4:	e9c4 010b 	strd	r0, r1, [r4, #44]	; 0x2c
    7fc8:	f804 5c03 	strb.w	r5, [r4, #-3]
    7fcc:	f884 8004 	strb.w	r8, [r4, #4]
    7fd0:	2001      	movs	r0, #1
    7fd2:	f007 faa5 	bl	f520 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7fd6:	f500 7088 	add.w	r0, r0, #272	; 0x110
    7fda:	1a30      	subs	r0, r6, r0
    7fdc:	60a0      	str	r0, [r4, #8]
    7fde:	f04f 30ff 	mov.w	r0, #4294967295
    7fe2:	0841      	lsrs	r1, r0, #1
    7fe4:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
    7fe8:	3cc4      	subs	r4, #196	; 0xc4
    7fea:	e022      	b.n	8032 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32>
    7fec:	200c      	movs	r0, #12
    7fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7ff2:	4620      	mov	r0, r4
    7ff4:	f007 fbe1 	bl	f7ba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
    7ff8:	f844 0fe4 	str.w	r0, [r4, #228]!
    7ffc:	f804 8c23 	strb.w	r8, [r4, #-35]
    8000:	f7fb f944 	bl	328c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    8004:	4680      	mov	r8, r0
    8006:	4689      	mov	r9, r1
    8008:	f7ff f86c 	bl	70e4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    800c:	f242 7110 	movw	r1, #10000	; 0x2710
    8010:	fbb0 f2f1 	udiv	r2, r0, r1
    8014:	fb01 0012 	mls	r0, r1, r2, r0
    8018:	1839      	adds	r1, r7, r0
    801a:	eb11 0108 	adds.w	r1, r1, r8
    801e:	eb45 0009 	adc.w	r0, r5, r9
    8022:	e9c4 1003 	strd	r1, r0, [r4, #12]
    8026:	3ce4      	subs	r4, #228	; 0xe4
    8028:	b196      	cbz	r6, 8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
    802a:	1989      	adds	r1, r1, r6
    802c:	4168      	adcs	r0, r5
    802e:	e9c4 1040 	strd	r1, r0, [r4, #256]	; 0x100
    8032:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
    8036:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
    803a:	f007 fc69 	bl	f910 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
    803e:	b168      	cbz	r0, 805c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c>
    8040:	f8a4 50f8 	strh.w	r5, [r4, #248]	; 0xf8
    8044:	2100      	movs	r1, #0
    8046:	4620      	mov	r0, r4
    8048:	f007 f939 	bl	f2be <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    804c:	2000      	movs	r0, #0
    804e:	e7ce      	b.n	7fee <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    8050:	f04f 30ff 	mov.w	r0, #4294967295
    8054:	0841      	lsrs	r1, r0, #1
    8056:	e9c4 0140 	strd	r0, r1, [r4, #256]	; 0x100
    805a:	e7ea      	b.n	8032 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32>
    805c:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    8060:	2030      	movs	r0, #48	; 0x30
    8062:	f7fc fceb 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8066:	0000      	.short	0x0000
    8068:	0000fa91 	.word	0x0000fa91

0000806c <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    806c:	4803      	ldr	r0, [pc, #12]	; (807c <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x10>)
    806e:	2100      	movs	r1, #0
    8070:	7001      	strb	r1, [r0, #0]
    8072:	2201      	movs	r2, #1
    8074:	7082      	strb	r2, [r0, #2]
    8076:	7041      	strb	r1, [r0, #1]
    8078:	f007 baba 	b.w	f5f0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    807c:	2000014c 	.word	0x2000014c

00008080 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    8080:	4901      	ldr	r1, [pc, #4]	; (8088 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    8082:	7008      	strb	r0, [r1, #0]
    8084:	4770      	bx	lr
    8086:	0000      	.short	0x0000
    8088:	2000014c 	.word	0x2000014c

0000808c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    808c:	4908      	ldr	r1, [pc, #32]	; (80b0 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    808e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8092:	fbb1 f1f2 	udiv	r1, r1, r2
    8096:	b510      	push	{r4, lr}
    8098:	f501 7125 	add.w	r1, r1, #660	; 0x294
    809c:	f006 ff76 	bl	ef8c <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    80a0:	f640 0148 	movw	r1, #2120	; 0x848
    80a4:	4288      	cmp	r0, r1
    80a6:	d300      	bcc.n	80aa <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    80a8:	4608      	mov	r0, r1
    80aa:	b280      	uxth	r0, r0
    80ac:	bd10      	pop	{r4, pc}
    80ae:	0000      	.short	0x0000
    80b0:	0001527d 	.word	0x0001527d

000080b4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    80b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80b8:	4c10      	ldr	r4, [pc, #64]	; (80fc <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    80ba:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    80be:	f003 fbdd 	bl	b87c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    80c2:	4606      	mov	r6, r0
    80c4:	7820      	ldrb	r0, [r4, #0]
    80c6:	b128      	cbz	r0, 80d4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    80c8:	4632      	mov	r2, r6
    80ca:	4639      	mov	r1, r7
    80cc:	4628      	mov	r0, r5
    80ce:	f006 f9eb 	bl	e4a8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    80d2:	4605      	mov	r5, r0
    80d4:	6860      	ldr	r0, [r4, #4]
    80d6:	4285      	cmp	r5, r0
    80d8:	d005      	beq.n	80e6 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    80da:	68e1      	ldr	r1, [r4, #12]
    80dc:	1a28      	subs	r0, r5, r0
    80de:	4408      	add	r0, r1
    80e0:	60e0      	str	r0, [r4, #12]
    80e2:	f7fb f819 	bl	3118 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    80e6:	6065      	str	r5, [r4, #4]
    80e8:	42ae      	cmp	r6, r5
    80ea:	d801      	bhi.n	80f0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    80ec:	7860      	ldrb	r0, [r4, #1]
    80ee:	b110      	cbz	r0, 80f6 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    80f0:	2000      	movs	r0, #0
    80f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    80f6:	2001      	movs	r0, #1
    80f8:	e7fb      	b.n	80f2 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    80fa:	0000      	.short	0x0000
    80fc:	2000014c 	.word	0x2000014c

00008100 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    8100:	b510      	push	{r4, lr}
    8102:	4604      	mov	r4, r0
    8104:	2906      	cmp	r1, #6
    8106:	d22e      	bcs.n	8166 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66>
    8108:	e8df f001 	tbb	[pc, r1]
    810c:	14031105 	.word	0x14031105
    8110:	2815      	.short	0x2815
    8112:	2100      	movs	r1, #0
    8114:	e006      	b.n	8124 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    8116:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    811a:	b110      	cbz	r0, 8122 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    811c:	4620      	mov	r0, r4
    811e:	f007 fb8a 	bl	f836 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x218>
    8122:	2101      	movs	r1, #1
    8124:	4620      	mov	r0, r4
    8126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    812a:	f000 b8fb 	b.w	8324 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b0>
    812e:	2003      	movs	r0, #3
    8130:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    8134:	bd10      	pop	{r4, pc}
    8136:	f003 fba7 	bl	b888 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    813a:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    813e:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8142:	f003 fc65 	bl	ba10 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8146:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    814a:	1a09      	subs	r1, r1, r0
    814c:	4808      	ldr	r0, [pc, #32]	; (8170 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70>)
    814e:	6842      	ldr	r2, [r0, #4]
    8150:	440a      	add	r2, r1
    8152:	6042      	str	r2, [r0, #4]
    8154:	6882      	ldr	r2, [r0, #8]
    8156:	4411      	add	r1, r2
    8158:	6081      	str	r1, [r0, #8]
    815a:	bd10      	pop	{r4, pc}
    815c:	4620      	mov	r0, r4
    815e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8162:	f007 bb53 	b.w	f80c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    8166:	f240 715b 	movw	r1, #1883	; 0x75b
    816a:	2030      	movs	r0, #48	; 0x30
    816c:	f7fc fc66 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8170:	2000014c 	.word	0x2000014c

00008174 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    8174:	b570      	push	{r4, r5, r6, lr}
    8176:	460c      	mov	r4, r1
    8178:	4605      	mov	r5, r0
    817a:	b112      	cbz	r2, 8182 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    817c:	f240 7185 	movw	r1, #1925	; 0x785
    8180:	e010      	b.n	81a4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    8182:	f003 fb7b 	bl	b87c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8186:	4601      	mov	r1, r0
    8188:	2200      	movs	r2, #0
    818a:	4620      	mov	r0, r4
    818c:	f007 fc34 	bl	f9f8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3da>
    8190:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
    8194:	462a      	mov	r2, r5
    8196:	4905      	ldr	r1, [pc, #20]	; (81ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    8198:	f7fa fd7c 	bl	2c94 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    819c:	2800      	cmp	r0, #0
    819e:	d104      	bne.n	81aa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    81a0:	f240 716e 	movw	r1, #1902	; 0x76e
    81a4:	2030      	movs	r0, #48	; 0x30
    81a6:	f7fc fc49 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81aa:	bd70      	pop	{r4, r5, r6, pc}
    81ac:	0000fb31 	.word	0x0000fb31
    81b0:	b510      	push	{r4, lr}
    81b2:	280c      	cmp	r0, #12
    81b4:	d304      	bcc.n	81c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    81b6:	f44f 7157 	mov.w	r1, #860	; 0x35c
    81ba:	2006      	movs	r0, #6
    81bc:	f7fc fc3e 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81c0:	4901      	ldr	r1, [pc, #4]	; (81c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    81c2:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    81c6:	bd10      	pop	{r4, pc}
    81c8:	0000fd54 	.word	0x0000fd54
    81cc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    81ce:	4c18      	ldr	r4, [pc, #96]	; (8230 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbc>)
    81d0:	2001      	movs	r0, #1
    81d2:	7060      	strb	r0, [r4, #1]
    81d4:	f64f 75ff 	movw	r5, #65535	; 0xffff
    81d8:	e00b      	b.n	81f2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e>
    81da:	2100      	movs	r1, #0
    81dc:	f005 feb0 	bl	df40 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    81e0:	0006      	movs	r6, r0
    81e2:	d010      	beq.n	8206 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    81e4:	f896 024c 	ldrb.w	r0, [r6, #588]	; 0x24c
    81e8:	f7fa fd86 	bl	2cf8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    81ec:	4630      	mov	r0, r6
    81ee:	f007 fbf6 	bl	f9de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3c0>
    81f2:	4669      	mov	r1, sp
    81f4:	2000      	movs	r0, #0
    81f6:	f005 fead 	bl	df54 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    81fa:	b180      	cbz	r0, 821e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    81fc:	f240 1103 	movw	r1, #259	; 0x103
    8200:	2030      	movs	r0, #48	; 0x30
    8202:	f7fc fc1b 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8206:	f240 1123 	movw	r1, #291	; 0x123
    820a:	e7f9      	b.n	8200 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
    820c:	9802      	ldr	r0, [sp, #8]
    820e:	b130      	cbz	r0, 821e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8210:	f890 1204 	ldrb.w	r1, [r0, #516]	; 0x204
    8214:	b119      	cbz	r1, 821e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8216:	8800      	ldrh	r0, [r0, #0]
    8218:	42a8      	cmp	r0, r5
    821a:	d1de      	bne.n	81da <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x66>
    821c:	e004      	b.n	8228 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>
    821e:	4668      	mov	r0, sp
    8220:	f7fc fe50 	bl	4ec4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8224:	2800      	cmp	r0, #0
    8226:	d0f1      	beq.n	820c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98>
    8228:	2000      	movs	r0, #0
    822a:	7060      	strb	r0, [r4, #1]
    822c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    822e:	0000      	.short	0x0000
    8230:	2000014c 	.word	0x2000014c
    8234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8238:	4604      	mov	r4, r0
    823a:	4839      	ldr	r0, [pc, #228]	; (8320 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ac>)
    823c:	461e      	mov	r6, r3
    823e:	4690      	mov	r8, r2
    8240:	7880      	ldrb	r0, [r0, #2]
    8242:	4689      	mov	r9, r1
    8244:	2500      	movs	r5, #0
    8246:	2800      	cmp	r0, #0
    8248:	d063      	beq.n	8312 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    824a:	f7fc f853 	bl	42f4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    824e:	b3e0      	cbz	r0, 82ca <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x156>
    8250:	f8b4 01f0 	ldrh.w	r0, [r4, #496]	; 0x1f0
    8254:	2802      	cmp	r0, #2
    8256:	d35c      	bcc.n	8312 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8258:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    825c:	2802      	cmp	r0, #2
    825e:	d058      	beq.n	8312 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8260:	f894 021a 	ldrb.w	r0, [r4, #538]	; 0x21a
    8264:	bb88      	cbnz	r0, 82ca <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x156>
    8266:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
    826a:	f7ff ffa1 	bl	81b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    826e:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    8272:	b281      	uxth	r1, r0
    8274:	8031      	strh	r1, [r6, #0]
    8276:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    827a:	2700      	movs	r7, #0
    827c:	2801      	cmp	r0, #1
    827e:	d00d      	beq.n	829c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x128>
    8280:	6920      	ldr	r0, [r4, #16]
    8282:	f004 fcfc 	bl	cc7e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8286:	f8b4 21de 	ldrh.w	r2, [r4, #478]	; 0x1de
    828a:	4442      	add	r2, r8
    828c:	eba2 0109 	sub.w	r1, r2, r9
    8290:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
    8294:	1a82      	subs	r2, r0, r2
    8296:	fb01 7502 	mla	r5, r1, r2, r7
    829a:	e035      	b.n	8308 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x194>
    829c:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
    82a0:	2803      	cmp	r0, #3
    82a2:	d039      	beq.n	8318 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>
    82a4:	2101      	movs	r1, #1
    82a6:	2000      	movs	r0, #0
    82a8:	f006 f9b9 	bl	e61e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    82ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
    82ae:	1847      	adds	r7, r0, r1
    82b0:	8831      	ldrh	r1, [r6, #0]
    82b2:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    82b6:	f004 fce2 	bl	cc7e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    82ba:	f8d4 21f8 	ldr.w	r2, [r4, #504]	; 0x1f8
    82be:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    82c2:	1a82      	subs	r2, r0, r2
    82c4:	fb01 5502 	mla	r5, r1, r2, r5
    82c8:	e000      	b.n	82cc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x158>
    82ca:	e022      	b.n	8312 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    82cc:	f8c4 01f8 	str.w	r0, [r4, #504]	; 0x1f8
    82d0:	8831      	ldrh	r1, [r6, #0]
    82d2:	4638      	mov	r0, r7
    82d4:	f004 fcd3 	bl	cc7e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    82d8:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    82dc:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    82e0:	1a41      	subs	r1, r0, r1
    82e2:	440d      	add	r5, r1
    82e4:	8831      	ldrh	r1, [r6, #0]
    82e6:	6920      	ldr	r0, [r4, #16]
    82e8:	f004 fcc9 	bl	cc7e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    82ec:	f8b4 21de 	ldrh.w	r2, [r4, #478]	; 0x1de
    82f0:	4442      	add	r2, r8
    82f2:	eba2 0109 	sub.w	r1, r2, r9
    82f6:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    82fa:	1a89      	subs	r1, r1, r2
    82fc:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
    8300:	1a82      	subs	r2, r0, r2
    8302:	1e49      	subs	r1, r1, #1
    8304:	fb01 5502 	mla	r5, r1, r2, r5
    8308:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    830c:	2001      	movs	r0, #1
    830e:	f884 021a 	strb.w	r0, [r4, #538]	; 0x21a
    8312:	4628      	mov	r0, r5
    8314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8318:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    831c:	e7c6      	b.n	82ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x138>
    831e:	0000      	.short	0x0000
    8320:	2000014c 	.word	0x2000014c
    8324:	b538      	push	{r3, r4, r5, lr}
    8326:	2500      	movs	r5, #0
    8328:	4604      	mov	r4, r0
    832a:	2901      	cmp	r1, #1
    832c:	d102      	bne.n	8334 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c0>
    832e:	4810      	ldr	r0, [pc, #64]	; (8370 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1fc>)
    8330:	7840      	ldrb	r0, [r0, #1]
    8332:	b170      	cbz	r0, 8352 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1de>
    8334:	2004      	movs	r0, #4
    8336:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    833a:	bf00      	nop
    833c:	f007 fa74 	bl	f828 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>
    8340:	f8a4 524a 	strh.w	r5, [r4, #586]	; 0x24a
    8344:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    8348:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
    834c:	f884 5219 	strb.w	r5, [r4, #537]	; 0x219
    8350:	bd38      	pop	{r3, r4, r5, pc}
    8352:	9500      	str	r5, [sp, #0]
    8354:	f8b4 11cc 	ldrh.w	r1, [r4, #460]	; 0x1cc
    8358:	2301      	movs	r3, #1
    835a:	2200      	movs	r2, #0
    835c:	4620      	mov	r0, r4
    835e:	f000 f809 	bl	8374 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    8362:	2800      	cmp	r0, #0
    8364:	d0ea      	beq.n	833c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c8>
    8366:	f240 61cf 	movw	r1, #1743	; 0x6cf
    836a:	2030      	movs	r0, #48	; 0x30
    836c:	f7fc fb66 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8370:	2000014c 	.word	0x2000014c
    8374:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8378:	b08b      	sub	sp, #44	; 0x2c
    837a:	4604      	mov	r4, r0
    837c:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    8380:	4699      	mov	r9, r3
    8382:	460f      	mov	r7, r1
    8384:	9307      	str	r3, [sp, #28]
    8386:	9005      	str	r0, [sp, #20]
    8388:	f008 fcbf 	bl	10d0a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    838c:	4605      	mov	r5, r0
    838e:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
    8392:	f7ff ff0d 	bl	81b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    8396:	4428      	add	r0, r5
    8398:	f8ad 0004 	strh.w	r0, [sp, #4]
    839c:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    83a0:	280d      	cmp	r0, #13
    83a2:	d004      	beq.n	83ae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x23a>
    83a4:	2000      	movs	r0, #0
    83a6:	9008      	str	r0, [sp, #32]
    83a8:	980d      	ldr	r0, [sp, #52]	; 0x34
    83aa:	b110      	cbz	r0, 83b2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x23e>
    83ac:	e02e      	b.n	840c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    83ae:	2001      	movs	r0, #1
    83b0:	e7f9      	b.n	83a6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    83b2:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    83b6:	2803      	cmp	r0, #3
    83b8:	d128      	bne.n	840c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    83ba:	9808      	ldr	r0, [sp, #32]
    83bc:	b330      	cbz	r0, 840c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    83be:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    83c2:	42b8      	cmp	r0, r7
    83c4:	d122      	bne.n	840c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    83c6:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    83ca:	f8c4 01f8 	str.w	r0, [r4, #504]	; 0x1f8
    83ce:	6920      	ldr	r0, [r4, #16]
    83d0:	f8c4 01fc 	str.w	r0, [r4, #508]	; 0x1fc
    83d4:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    83d8:	f8b4 11de 	ldrh.w	r1, [r4, #478]	; 0x1de
    83dc:	4408      	add	r0, r1
    83de:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    83e2:	4620      	mov	r0, r4
    83e4:	f007 fcd6 	bl	fd94 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    83e8:	f8d4 0278 	ldr.w	r0, [r4, #632]	; 0x278
    83ec:	6260      	str	r0, [r4, #36]	; 0x24
    83ee:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    83f2:	8420      	strh	r0, [r4, #32]
    83f4:	f8d4 027c 	ldr.w	r0, [r4, #636]	; 0x27c
    83f8:	6120      	str	r0, [r4, #16]
    83fa:	f8b4 0280 	ldrh.w	r0, [r4, #640]	; 0x280
    83fe:	8320      	strh	r0, [r4, #24]
    8400:	f8b4 0282 	ldrh.w	r0, [r4, #642]	; 0x282
    8404:	8360      	strh	r0, [r4, #26]
    8406:	2002      	movs	r0, #2
    8408:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    840c:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    8410:	f504 7508 	add.w	r5, r4, #544	; 0x220
    8414:	1a38      	subs	r0, r7, r0
    8416:	fa0f fa80 	sxth.w	sl, r0
    841a:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
    841e:	1a38      	subs	r0, r7, r0
    8420:	fa0f f880 	sxth.w	r8, r0
    8424:	f1b8 0f00 	cmp.w	r8, #0
    8428:	da08      	bge.n	843c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c8>
    842a:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
    842e:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
    8432:	46d0      	mov	r8, sl
    8434:	e9c4 0190 	strd	r0, r1, [r4, #576]	; 0x240
    8438:	2001      	movs	r0, #1
    843a:	9007      	str	r0, [sp, #28]
    843c:	ab01      	add	r3, sp, #4
    843e:	4652      	mov	r2, sl
    8440:	4641      	mov	r1, r8
    8442:	4620      	mov	r0, r4
    8444:	f7ff fef6 	bl	8234 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xc0>
    8448:	9004      	str	r0, [sp, #16]
    844a:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    844e:	f8df b334 	ldr.w	fp, [pc, #820]	; 8784 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    8452:	b140      	cbz	r0, 8466 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f2>
    8454:	2801      	cmp	r0, #1
    8456:	d07d      	beq.n	8554 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3e0>
    8458:	2802      	cmp	r0, #2
    845a:	d051      	beq.n	8500 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38c>
    845c:	2803      	cmp	r0, #3
    845e:	d07a      	beq.n	8556 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3e2>
    8460:	f240 514b 	movw	r1, #1355	; 0x54b
    8464:	e18a      	b.n	877c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    8466:	2101      	movs	r1, #1
    8468:	2000      	movs	r0, #0
    846a:	f006 f8d8 	bl	e61e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    846e:	4606      	mov	r6, r0
    8470:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8472:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    8476:	4430      	add	r0, r6
    8478:	f004 fc01 	bl	cc7e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    847c:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    8480:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    8484:	6920      	ldr	r0, [r4, #16]
    8486:	f004 fbfa 	bl	cc7e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    848a:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    848e:	a907      	add	r1, sp, #28
    8490:	a806      	add	r0, sp, #24
    8492:	f003 f95b 	bl	b74c <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    8496:	e9d4 0190 	ldrd	r0, r1, [r4, #576]	; 0x240
    849a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    849e:	f7fa ff07 	bl	32b0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    84a2:	4682      	mov	sl, r0
    84a4:	4620      	mov	r0, r4
    84a6:	f007 f9b1 	bl	f80c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    84aa:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    84ae:	f8d4 8250 	ldr.w	r8, [r4, #592]	; 0x250
    84b2:	f003 fad9 	bl	ba68 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    84b6:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    84ba:	4401      	add	r1, r0
    84bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    84c0:	fbb1 f0f0 	udiv	r0, r1, r0
    84c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    84c6:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
    84ca:	4431      	add	r1, r6
    84cc:	1a08      	subs	r0, r1, r0
    84ce:	1a81      	subs	r1, r0, r2
    84d0:	4441      	add	r1, r8
    84d2:	3920      	subs	r1, #32
    84d4:	eba1 060a 	sub.w	r6, r1, sl
    84d8:	0050      	lsls	r0, r2, #1
    84da:	8c21      	ldrh	r1, [r4, #32]
    84dc:	3060      	adds	r0, #96	; 0x60
    84de:	4401      	add	r1, r0
    84e0:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    84e4:	f007 fa02 	bl	f8ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ce>
    84e8:	3022      	adds	r0, #34	; 0x22
    84ea:	f8cb 0010 	str.w	r0, [fp, #16]
    84ee:	f8d4 0250 	ldr.w	r0, [r4, #592]	; 0x250
    84f2:	1a30      	subs	r0, r6, r0
    84f4:	f5b0 7fde 	cmp.w	r0, #444	; 0x1bc
    84f8:	d258      	bcs.n	85ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x438>
    84fa:	f240 41e4 	movw	r1, #1252	; 0x4e4
    84fe:	e13d      	b.n	877c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    8500:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8502:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    8506:	4408      	add	r0, r1
    8508:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    850c:	f004 fbb7 	bl	cc7e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8510:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    8514:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    8518:	6920      	ldr	r0, [r4, #16]
    851a:	f004 fbb0 	bl	cc7e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    851e:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    8522:	4620      	mov	r0, r4
    8524:	f007 f972 	bl	f80c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    8528:	f8b4 01de 	ldrh.w	r0, [r4, #478]	; 0x1de
    852c:	bb10      	cbnz	r0, 8574 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x400>
    852e:	f1b9 0f00 	cmp.w	r9, #0
    8532:	d01f      	beq.n	8574 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x400>
    8534:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
    8538:	4640      	mov	r0, r8
    853a:	f003 fa95 	bl	ba68 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    853e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8542:	4401      	add	r1, r0
    8544:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8548:	fbb1 f0f0 	udiv	r0, r1, r0
    854c:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    8550:	4408      	add	r0, r1
    8552:	e001      	b.n	8558 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3e4>
    8554:	e02b      	b.n	85ae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x43a>
    8556:	e047      	b.n	85e8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x474>
    8558:	6a62      	ldr	r2, [r4, #36]	; 0x24
    855a:	f8d4 11fc 	ldr.w	r1, [r4, #508]	; 0x1fc
    855e:	4411      	add	r1, r2
    8560:	1a0e      	subs	r6, r1, r0
    8562:	4640      	mov	r0, r8
    8564:	f003 fa54 	bl	ba10 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8568:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    856c:	1a08      	subs	r0, r1, r0
    856e:	4406      	add	r6, r0
    8570:	3e20      	subs	r6, #32
    8572:	e006      	b.n	8582 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x40e>
    8574:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8576:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    857a:	4408      	add	r0, r1
    857c:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    8580:	1a46      	subs	r6, r0, r1
    8582:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    8586:	f8d4 11f8 	ldr.w	r1, [r4, #504]	; 0x1f8
    858a:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    858e:	fb01 0002 	mla	r0, r1, r2, r0
    8592:	0040      	lsls	r0, r0, #1
    8594:	8c21      	ldrh	r1, [r4, #32]
    8596:	3060      	adds	r0, #96	; 0x60
    8598:	4401      	add	r1, r0
    859a:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    859e:	f007 f9a5 	bl	f8ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ce>
    85a2:	f8cb 0010 	str.w	r0, [fp, #16]
    85a6:	2001      	movs	r0, #1
    85a8:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    85ac:	e061      	b.n	8672 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4fe>
    85ae:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
    85b2:	6920      	ldr	r0, [r4, #16]
    85b4:	f8b4 11de 	ldrh.w	r1, [r4, #478]	; 0x1de
    85b8:	1a86      	subs	r6, r0, r2
    85ba:	eb01 000a 	add.w	r0, r1, sl
    85be:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    85c2:	f8d4 c1f8 	ldr.w	ip, [r4, #504]	; 0x1f8
    85c6:	1a40      	subs	r0, r0, r1
    85c8:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
    85cc:	1e40      	subs	r0, r0, #1
    85ce:	fb0c 3101 	mla	r1, ip, r1, r3
    85d2:	fb00 1002 	mla	r0, r0, r2, r1
    85d6:	0040      	lsls	r0, r0, #1
    85d8:	8c21      	ldrh	r1, [r4, #32]
    85da:	3060      	adds	r0, #96	; 0x60
    85dc:	4401      	add	r1, r0
    85de:	fb06 f608 	mul.w	r6, r6, r8
    85e2:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    85e6:	e040      	b.n	866a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f6>
    85e8:	6920      	ldr	r0, [r4, #16]
    85ea:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    85ee:	fb00 f008 	mul.w	r0, r0, r8
    85f2:	fb08 0611 	mls	r6, r8, r1, r0
    85f6:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
    85fa:	2824      	cmp	r0, #36	; 0x24
    85fc:	d003      	beq.n	8606 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x492>
    85fe:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    8602:	2824      	cmp	r0, #36	; 0x24
    8604:	d109      	bne.n	861a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4a6>
    8606:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    860a:	1a38      	subs	r0, r7, r0
    860c:	b200      	sxth	r0, r0
    860e:	2800      	cmp	r0, #0
    8610:	db03      	blt.n	861a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4a6>
    8612:	f894 0277 	ldrb.w	r0, [r4, #631]	; 0x277
    8616:	b100      	cbz	r0, 861a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4a6>
    8618:	9005      	str	r0, [sp, #20]
    861a:	9807      	ldr	r0, [sp, #28]
    861c:	b1d8      	cbz	r0, 8656 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4e2>
    861e:	f8b4 01de 	ldrh.w	r0, [r4, #478]	; 0x1de
    8622:	b9c0      	cbnz	r0, 8656 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4e2>
    8624:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    8628:	2800      	cmp	r0, #0
    862a:	d07d      	beq.n	8728 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b4>
    862c:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8630:	f003 fa1a 	bl	ba68 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8634:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8638:	4401      	add	r1, r0
    863a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    863e:	fbb1 f0f0 	udiv	r0, r1, r0
    8642:	1a36      	subs	r6, r6, r0
    8644:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8648:	f003 f9e2 	bl	ba10 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    864c:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    8650:	1a08      	subs	r0, r1, r0
    8652:	4406      	add	r6, r0
    8654:	3e20      	subs	r6, #32
    8656:	f8b4 11de 	ldrh.w	r1, [r4, #478]	; 0x1de
    865a:	eb01 000a 	add.w	r0, r1, sl
    865e:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    8662:	4348      	muls	r0, r1
    8664:	0041      	lsls	r1, r0, #1
    8666:	3160      	adds	r1, #96	; 0x60
    8668:	9805      	ldr	r0, [sp, #20]
    866a:	f007 f93f 	bl	f8ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ce>
    866e:	f8cb 0010 	str.w	r0, [fp, #16]
    8672:	9804      	ldr	r0, [sp, #16]
    8674:	f8db 2010 	ldr.w	r2, [fp, #16]
    8678:	1a31      	subs	r1, r6, r0
    867a:	f8d4 620c 	ldr.w	r6, [r4, #524]	; 0x20c
    867e:	6920      	ldr	r0, [r4, #16]
    8680:	1b80      	subs	r0, r0, r6
    8682:	f2a0 2046 	subw	r0, r0, #582	; 0x246
    8686:	f8cb 0014 	str.w	r0, [fp, #20]
    868a:	4282      	cmp	r2, r0
    868c:	d800      	bhi.n	8690 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x51c>
    868e:	4610      	mov	r0, r2
    8690:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    8694:	2600      	movs	r6, #0
    8696:	702e      	strb	r6, [r5, #0]
    8698:	2064      	movs	r0, #100	; 0x64
    869a:	8128      	strh	r0, [r5, #8]
    869c:	e9d4 2090 	ldrd	r2, r0, [r4, #576]	; 0x240
    86a0:	1851      	adds	r1, r2, r1
    86a2:	4170      	adcs	r0, r6
    86a4:	e9c5 1004 	strd	r1, r0, [r5, #16]
    86a8:	f104 0030 	add.w	r0, r4, #48	; 0x30
    86ac:	f006 fc3f 	bl	ef2e <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    86b0:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
    86b4:	4408      	add	r0, r1
    86b6:	6068      	str	r0, [r5, #4]
    86b8:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    86bc:	e9c4 0190 	strd	r0, r1, [r4, #576]	; 0x240
    86c0:	f8a4 7248 	strh.w	r7, [r4, #584]	; 0x248
    86c4:	72ae      	strb	r6, [r5, #10]
    86c6:	f8b4 01c8 	ldrh.w	r0, [r4, #456]	; 0x1c8
    86ca:	1bc0      	subs	r0, r0, r7
    86cc:	b200      	sxth	r0, r0
    86ce:	2800      	cmp	r0, #0
    86d0:	dd01      	ble.n	86d6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x562>
    86d2:	2002      	movs	r0, #2
    86d4:	72a8      	strb	r0, [r5, #10]
    86d6:	9808      	ldr	r0, [sp, #32]
    86d8:	b338      	cbz	r0, 872a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b6>
    86da:	f1b9 0f00 	cmp.w	r9, #0
    86de:	d01c      	beq.n	871a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    86e0:	f8b4 11f0 	ldrh.w	r1, [r4, #496]	; 0x1f0
    86e4:	b3f1      	cbz	r1, 8764 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f0>
    86e6:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    86ea:	bf00      	nop
    86ec:	f8a4 01f2 	strh.w	r0, [r4, #498]	; 0x1f2
    86f0:	f894 21f4 	ldrb.w	r2, [r4, #500]	; 0x1f4
    86f4:	1c40      	adds	r0, r0, #1
    86f6:	4342      	muls	r2, r0
    86f8:	428a      	cmp	r2, r1
    86fa:	d20e      	bcs.n	871a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    86fc:	7aa8      	ldrb	r0, [r5, #10]
    86fe:	b160      	cbz	r0, 871a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    8700:	72ae      	strb	r6, [r5, #10]
    8702:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    8706:	1c40      	adds	r0, r0, #1
    8708:	f8a4 01f2 	strh.w	r0, [r4, #498]	; 0x1f2
    870c:	f7fe fce4 	bl	70d8 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    8710:	f000 0007 	and.w	r0, r0, #7
    8714:	1c40      	adds	r0, r0, #1
    8716:	f884 01f4 	strb.w	r0, [r4, #500]	; 0x1f4
    871a:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    871e:	4629      	mov	r1, r5
    8720:	f007 f8f6 	bl	f910 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
    8724:	b340      	cbz	r0, 8778 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    8726:	e001      	b.n	872c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b8>
    8728:	e009      	b.n	873e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ca>
    872a:	e00b      	b.n	8744 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5d0>
    872c:	980d      	ldr	r0, [sp, #52]	; 0x34
    872e:	f080 0001 	eor.w	r0, r0, #1
    8732:	f884 0218 	strb.w	r0, [r4, #536]	; 0x218
    8736:	2000      	movs	r0, #0
    8738:	b00f      	add	sp, #60	; 0x3c
    873a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    873e:	f240 5136 	movw	r1, #1334	; 0x536
    8742:	e01b      	b.n	877c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    8744:	f1b9 0f00 	cmp.w	r9, #0
    8748:	d1ca      	bne.n	86e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x56c>
    874a:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    874e:	2800      	cmp	r0, #0
    8750:	d0e3      	beq.n	871a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    8752:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    8756:	6920      	ldr	r0, [r4, #16]
    8758:	1a41      	subs	r1, r0, r1
    875a:	4628      	mov	r0, r5
    875c:	f005 ff71 	bl	e642 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8760:	0400      	lsls	r0, r0, #16
    8762:	e000      	b.n	8766 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f2>
    8764:	e006      	b.n	8774 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    8766:	0c00      	lsrs	r0, r0, #16
    8768:	d0d7      	beq.n	871a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    876a:	9918      	ldr	r1, [sp, #96]	; 0x60
    876c:	b101      	cbz	r1, 8770 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    876e:	8008      	strh	r0, [r1, #0]
    8770:	2001      	movs	r0, #1
    8772:	e7e1      	b.n	8738 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c4>
    8774:	2000      	movs	r0, #0
    8776:	e7b9      	b.n	86ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x578>
    8778:	f240 5194 	movw	r1, #1428	; 0x594
    877c:	2030      	movs	r0, #48	; 0x30
    877e:	f7fc f95d 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8782:	0000      	.short	0x0000
    8784:	2000014c 	.word	0x2000014c
    8788:	b570      	push	{r4, r5, r6, lr}
    878a:	4604      	mov	r4, r0
    878c:	f004 fa43 	bl	cc16 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8790:	2864      	cmp	r0, #100	; 0x64
    8792:	d901      	bls.n	8798 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x624>
    8794:	4605      	mov	r5, r0
    8796:	e000      	b.n	879a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x626>
    8798:	2564      	movs	r5, #100	; 0x64
    879a:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    879e:	2128      	movs	r1, #40	; 0x28
    87a0:	f006 ffa4 	bl	f6ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    87a4:	4428      	add	r0, r5
    87a6:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    87aa:	f500 7010 	add.w	r0, r0, #576	; 0x240
    87ae:	180e      	adds	r6, r1, r0
    87b0:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    87b4:	2128      	movs	r1, #40	; 0x28
    87b6:	f006 ff99 	bl	f6ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    87ba:	f500 7229 	add.w	r2, r0, #676	; 0x2a4
    87be:	4620      	mov	r0, r4
    87c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    87c2:	f006 fb51 	bl	ee68 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    87c6:	4605      	mov	r5, r0
    87c8:	4632      	mov	r2, r6
    87ca:	4620      	mov	r0, r4
    87cc:	6921      	ldr	r1, [r4, #16]
    87ce:	f006 fb4b 	bl	ee68 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    87d2:	4907      	ldr	r1, [pc, #28]	; (87f0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x67c>)
    87d4:	4285      	cmp	r5, r0
    87d6:	6088      	str	r0, [r1, #8]
    87d8:	d200      	bcs.n	87dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x668>
    87da:	4628      	mov	r0, r5
    87dc:	6048      	str	r0, [r1, #4]
    87de:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
    87e2:	f2a0 1069 	subw	r0, r0, #361	; 0x169
    87e6:	60c8      	str	r0, [r1, #12]
    87e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    87ec:	f7fa bc94 	b.w	3118 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    87f0:	2000014c 	.word	0x2000014c

000087f4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    87f4:	4806      	ldr	r0, [pc, #24]	; (8810 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    87f6:	4905      	ldr	r1, [pc, #20]	; (880c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    87f8:	6501      	str	r1, [r0, #80]	; 0x50
    87fa:	4906      	ldr	r1, [pc, #24]	; (8814 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    87fc:	6541      	str	r1, [r0, #84]	; 0x54
    87fe:	4807      	ldr	r0, [pc, #28]	; (881c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    8800:	4905      	ldr	r1, [pc, #20]	; (8818 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    8802:	6501      	str	r1, [r0, #80]	; 0x50
    8804:	4906      	ldr	r1, [pc, #24]	; (8820 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    8806:	6541      	str	r1, [r0, #84]	; 0x54
    8808:	4770      	bx	lr
    880a:	0000      	.short	0x0000
    880c:	00009c15 	.word	0x00009c15
    8810:	2000017c 	.word	0x2000017c
    8814:	00009cf9 	.word	0x00009cf9
    8818:	0000a3b5 	.word	0x0000a3b5
    881c:	20000214 	.word	0x20000214
    8820:	0000a3e5 	.word	0x0000a3e5

00008824 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    8824:	481e      	ldr	r0, [pc, #120]	; (88a0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    8826:	491d      	ldr	r1, [pc, #116]	; (889c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    8828:	6081      	str	r1, [r0, #8]
    882a:	491e      	ldr	r1, [pc, #120]	; (88a4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    882c:	6041      	str	r1, [r0, #4]
    882e:	491e      	ldr	r1, [pc, #120]	; (88a8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    8830:	6001      	str	r1, [r0, #0]
    8832:	491e      	ldr	r1, [pc, #120]	; (88ac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    8834:	6281      	str	r1, [r0, #40]	; 0x28
    8836:	491e      	ldr	r1, [pc, #120]	; (88b0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    8838:	62c1      	str	r1, [r0, #44]	; 0x2c
    883a:	491e      	ldr	r1, [pc, #120]	; (88b4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    883c:	60c1      	str	r1, [r0, #12]
    883e:	491e      	ldr	r1, [pc, #120]	; (88b8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    8840:	6181      	str	r1, [r0, #24]
    8842:	491e      	ldr	r1, [pc, #120]	; (88bc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    8844:	6301      	str	r1, [r0, #48]	; 0x30
    8846:	491e      	ldr	r1, [pc, #120]	; (88c0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    8848:	6201      	str	r1, [r0, #32]
    884a:	491e      	ldr	r1, [pc, #120]	; (88c4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    884c:	64c1      	str	r1, [r0, #76]	; 0x4c
    884e:	491e      	ldr	r1, [pc, #120]	; (88c8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    8850:	6481      	str	r1, [r0, #72]	; 0x48
    8852:	491e      	ldr	r1, [pc, #120]	; (88cc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    8854:	6441      	str	r1, [r0, #68]	; 0x44
    8856:	491e      	ldr	r1, [pc, #120]	; (88d0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    8858:	6341      	str	r1, [r0, #52]	; 0x34
    885a:	491e      	ldr	r1, [pc, #120]	; (88d4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    885c:	61c1      	str	r1, [r0, #28]
    885e:	491e      	ldr	r1, [pc, #120]	; (88d8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    8860:	6241      	str	r1, [r0, #36]	; 0x24
    8862:	481f      	ldr	r0, [pc, #124]	; (88e0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    8864:	491d      	ldr	r1, [pc, #116]	; (88dc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    8866:	6081      	str	r1, [r0, #8]
    8868:	491e      	ldr	r1, [pc, #120]	; (88e4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    886a:	61c1      	str	r1, [r0, #28]
    886c:	491e      	ldr	r1, [pc, #120]	; (88e8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    886e:	6241      	str	r1, [r0, #36]	; 0x24
    8870:	491e      	ldr	r1, [pc, #120]	; (88ec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    8872:	62c1      	str	r1, [r0, #44]	; 0x2c
    8874:	491e      	ldr	r1, [pc, #120]	; (88f0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    8876:	6101      	str	r1, [r0, #16]
    8878:	491e      	ldr	r1, [pc, #120]	; (88f4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    887a:	6141      	str	r1, [r0, #20]
    887c:	491e      	ldr	r1, [pc, #120]	; (88f8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    887e:	6441      	str	r1, [r0, #68]	; 0x44
    8880:	491e      	ldr	r1, [pc, #120]	; (88fc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    8882:	6341      	str	r1, [r0, #52]	; 0x34
    8884:	491e      	ldr	r1, [pc, #120]	; (8900 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    8886:	6181      	str	r1, [r0, #24]
    8888:	491e      	ldr	r1, [pc, #120]	; (8904 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    888a:	6301      	str	r1, [r0, #48]	; 0x30
    888c:	491e      	ldr	r1, [pc, #120]	; (8908 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    888e:	6481      	str	r1, [r0, #72]	; 0x48
    8890:	491e      	ldr	r1, [pc, #120]	; (890c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    8892:	64c1      	str	r1, [r0, #76]	; 0x4c
    8894:	491e      	ldr	r1, [pc, #120]	; (8910 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    8896:	6381      	str	r1, [r0, #56]	; 0x38
    8898:	4770      	bx	lr
    889a:	0000      	.short	0x0000
    889c:	0000a0e1 	.word	0x0000a0e1
    88a0:	2000017c 	.word	0x2000017c
    88a4:	00009939 	.word	0x00009939
    88a8:	0000999d 	.word	0x0000999d
    88ac:	00009dcd 	.word	0x00009dcd
    88b0:	00009e11 	.word	0x00009e11
    88b4:	00009a51 	.word	0x00009a51
    88b8:	0000a0b9 	.word	0x0000a0b9
    88bc:	0000a1f1 	.word	0x0000a1f1
    88c0:	00009b09 	.word	0x00009b09
    88c4:	00009d9d 	.word	0x00009d9d
    88c8:	00009d71 	.word	0x00009d71
    88cc:	0000a061 	.word	0x0000a061
    88d0:	0000a091 	.word	0x0000a091
    88d4:	0000a119 	.word	0x0000a119
    88d8:	00009b5d 	.word	0x00009b5d
    88dc:	0000a60d 	.word	0x0000a60d
    88e0:	20000214 	.word	0x20000214
    88e4:	0000a635 	.word	0x0000a635
    88e8:	0000a385 	.word	0x0000a385
    88ec:	0000a45d 	.word	0x0000a45d
    88f0:	0000a359 	.word	0x0000a359
    88f4:	0000a561 	.word	0x0000a561
    88f8:	0000a4e1 	.word	0x0000a4e1
    88fc:	0000a50d 	.word	0x0000a50d
    8900:	0000a585 	.word	0x0000a585
    8904:	0000a691 	.word	0x0000a691
    8908:	0000a415 	.word	0x0000a415
    890c:	0000a445 	.word	0x0000a445
    8910:	0000a531 	.word	0x0000a531

00008914 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    8914:	4806      	ldr	r0, [pc, #24]	; (8930 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    8916:	4905      	ldr	r1, [pc, #20]	; (892c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    8918:	6581      	str	r1, [r0, #88]	; 0x58
    891a:	4906      	ldr	r1, [pc, #24]	; (8934 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    891c:	6601      	str	r1, [r0, #96]	; 0x60
    891e:	4807      	ldr	r0, [pc, #28]	; (893c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    8920:	4905      	ldr	r1, [pc, #20]	; (8938 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    8922:	6581      	str	r1, [r0, #88]	; 0x58
    8924:	4906      	ldr	r1, [pc, #24]	; (8940 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    8926:	65c1      	str	r1, [r0, #92]	; 0x5c
    8928:	4770      	bx	lr
    892a:	0000      	.short	0x0000
    892c:	00009e31 	.word	0x00009e31
    8930:	2000017c 	.word	0x2000017c
    8934:	00009f11 	.word	0x00009f11
    8938:	0000a489 	.word	0x0000a489
    893c:	20000214 	.word	0x20000214
    8940:	0000a4b9 	.word	0x0000a4b9

00008944 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    8944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8946:	4c7c      	ldr	r4, [pc, #496]	; (8b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    8948:	2101      	movs	r1, #1
    894a:	f1a4 0610 	sub.w	r6, r4, #16
    894e:	7021      	strb	r1, [r4, #0]
    8950:	2500      	movs	r5, #0
    8952:	6060      	str	r0, [r4, #4]
    8954:	8075      	strh	r5, [r6, #2]
    8956:	7075      	strb	r5, [r6, #1]
    8958:	7035      	strb	r5, [r6, #0]
    895a:	f880 11d3 	strb.w	r1, [r0, #467]	; 0x1d3
    895e:	8800      	ldrh	r0, [r0, #0]
    8960:	f7fc fcaa 	bl	52b8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8964:	b180      	cbz	r0, 8988 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    8966:	6860      	ldr	r0, [r4, #4]
    8968:	8800      	ldrh	r0, [r0, #0]
    896a:	f7fc fef9 	bl	5760 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    896e:	6860      	ldr	r0, [r4, #4]
    8970:	8800      	ldrh	r0, [r0, #0]
    8972:	f7fc fe9d 	bl	56b0 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    8976:	6860      	ldr	r0, [r4, #4]
    8978:	f8b0 11ca 	ldrh.w	r1, [r0, #458]	; 0x1ca
    897c:	b1c9      	cbz	r1, 89b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    897e:	3078      	adds	r0, #120	; 0x78
    8980:	f007 fa4f 	bl	fe22 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8984:	b118      	cbz	r0, 898e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    8986:	e014      	b.n	89b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    8988:	f640 3166 	movw	r1, #2918	; 0xb66
    898c:	e06c      	b.n	8a68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    898e:	6860      	ldr	r0, [r4, #4]
    8990:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    8994:	f88d 1000 	strb.w	r1, [sp]
    8998:	9900      	ldr	r1, [sp, #0]
    899a:	9100      	str	r1, [sp, #0]
    899c:	f89d 1000 	ldrb.w	r1, [sp]
    89a0:	b139      	cbz	r1, 89b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    89a2:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    89a6:	2301      	movs	r3, #1
    89a8:	4619      	mov	r1, r3
    89aa:	3078      	adds	r0, #120	; 0x78
    89ac:	f005 fd8f 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    89b0:	b180      	cbz	r0, 89d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    89b2:	6860      	ldr	r0, [r4, #4]
    89b4:	3078      	adds	r0, #120	; 0x78
    89b6:	f007 fa34 	bl	fe22 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    89ba:	b128      	cbz	r0, 89c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    89bc:	6860      	ldr	r0, [r4, #4]
    89be:	f890 010c 	ldrb.w	r0, [r0, #268]	; 0x10c
    89c2:	bf00      	nop
    89c4:	f000 fbb2 	bl	912c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>
    89c8:	6860      	ldr	r0, [r4, #4]
    89ca:	f890 11d5 	ldrb.w	r1, [r0, #469]	; 0x1d5
    89ce:	b189      	cbz	r1, 89f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    89d0:	80b5      	strh	r5, [r6, #4]
    89d2:	e01e      	b.n	8a12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    89d4:	6860      	ldr	r0, [r4, #4]
    89d6:	f8a0 50b8 	strh.w	r5, [r0, #184]	; 0xb8
    89da:	f890 1119 	ldrb.w	r1, [r0, #281]	; 0x119
    89de:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    89e2:	2100      	movs	r1, #0
    89e4:	2002      	movs	r0, #2
    89e6:	f000 fe53 	bl	9690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    89ea:	6860      	ldr	r0, [r4, #4]
    89ec:	f880 51d2 	strb.w	r5, [r0, #466]	; 0x1d2
    89f0:	2002      	movs	r0, #2
    89f2:	e7e7      	b.n	89c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    89f4:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    89f8:	f88d 1000 	strb.w	r1, [sp]
    89fc:	9900      	ldr	r1, [sp, #0]
    89fe:	9100      	str	r1, [sp, #0]
    8a00:	f89d 1000 	ldrb.w	r1, [sp]
    8a04:	b919      	cbnz	r1, 8a0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    8a06:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    8a08:	8b02      	ldrh	r2, [r0, #24]
    8a0a:	4291      	cmp	r1, r2
    8a0c:	d800      	bhi.n	8a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    8a0e:	8b01      	ldrh	r1, [r0, #24]
    8a10:	80b1      	strh	r1, [r6, #4]
    8a12:	f8b0 11ce 	ldrh.w	r1, [r0, #462]	; 0x1ce
    8a16:	1e49      	subs	r1, r1, #1
    8a18:	b28f      	uxth	r7, r1
    8a1a:	f8b0 11d0 	ldrh.w	r1, [r0, #464]	; 0x1d0
    8a1e:	4439      	add	r1, r7
    8a20:	f8a0 11d0 	strh.w	r1, [r0, #464]	; 0x1d0
    8a24:	f830 1fb4 	ldrh.w	r1, [r0, #180]!
    8a28:	4439      	add	r1, r7
    8a2a:	8001      	strh	r1, [r0, #0]
    8a2c:	f001 fe5e 	bl	a6ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da8>
    8a30:	b120      	cbz	r0, 8a3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    8a32:	6860      	ldr	r0, [r4, #4]
    8a34:	f850 1fa8 	ldr.w	r1, [r0, #168]!
    8a38:	4439      	add	r1, r7
    8a3a:	6001      	str	r1, [r0, #0]
    8a3c:	6861      	ldr	r1, [r4, #4]
    8a3e:	f8b1 01ca 	ldrh.w	r0, [r1, #458]	; 0x1ca
    8a42:	2801      	cmp	r0, #1
    8a44:	d802      	bhi.n	8a4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    8a46:	1c40      	adds	r0, r0, #1
    8a48:	f8a1 01ca 	strh.w	r0, [r1, #458]	; 0x1ca
    8a4c:	b10f      	cbz	r7, 8a52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    8a4e:	f881 51dc 	strb.w	r5, [r1, #476]	; 0x1dc
    8a52:	f881 51d2 	strb.w	r5, [r1, #466]	; 0x1d2
    8a56:	f8b1 21ce 	ldrh.w	r2, [r1, #462]	; 0x1ce
    8a5a:	f101 0078 	add.w	r0, r1, #120	; 0x78
    8a5e:	f005 feca 	bl	e7f6 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    8a62:	b120      	cbz	r0, 8a6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    8a64:	f640 31ad 	movw	r1, #2989	; 0xbad
    8a68:	2031      	movs	r0, #49	; 0x31
    8a6a:	f7fb ffe7 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a6e:	6860      	ldr	r0, [r4, #4]
    8a70:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    8a74:	290b      	cmp	r1, #11
    8a76:	d001      	beq.n	8a7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    8a78:	290c      	cmp	r1, #12
    8a7a:	d119      	bne.n	8ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    8a7c:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
    8a80:	f8b0 3274 	ldrh.w	r3, [r0, #628]	; 0x274
    8a84:	1ad2      	subs	r2, r2, r3
    8a86:	b212      	sxth	r2, r2
    8a88:	2a00      	cmp	r2, #0
    8a8a:	db11      	blt.n	8ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    8a8c:	f8d0 1276 	ldr.w	r1, [r0, #630]	; 0x276
    8a90:	f8c0 108f 	str.w	r1, [r0, #143]	; 0x8f
    8a94:	f890 127a 	ldrb.w	r1, [r0, #634]	; 0x27a
    8a98:	f880 1093 	strb.w	r1, [r0, #147]	; 0x93
    8a9c:	2103      	movs	r1, #3
    8a9e:	f7fd fedd 	bl	685c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    8aa2:	6860      	ldr	r0, [r4, #4]
    8aa4:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    8aa8:	21ff      	movs	r1, #255	; 0xff
    8aaa:	f880 10dc 	strb.w	r1, [r0, #220]	; 0xdc
    8aae:	e026      	b.n	8afe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8ab0:	2924      	cmp	r1, #36	; 0x24
    8ab2:	d111      	bne.n	8ad8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8ab4:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    8ab8:	f8b0 2274 	ldrh.w	r2, [r0, #628]	; 0x274
    8abc:	1a89      	subs	r1, r1, r2
    8abe:	b209      	sxth	r1, r1
    8ac0:	2900      	cmp	r1, #0
    8ac2:	db09      	blt.n	8ad8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8ac4:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    8ac8:	f000 fe9c 	bl	9804 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec0>
    8acc:	2800      	cmp	r0, #0
    8ace:	6860      	ldr	r0, [r4, #4]
    8ad0:	f880 5124 	strb.w	r5, [r0, #292]	; 0x124
    8ad4:	d029      	beq.n	8b2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    8ad6:	e012      	b.n	8afe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8ad8:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    8adc:	2924      	cmp	r1, #36	; 0x24
    8ade:	d001      	beq.n	8ae4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    8ae0:	2925      	cmp	r1, #37	; 0x25
    8ae2:	d10c      	bne.n	8afe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8ae4:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    8ae8:	f8b0 2274 	ldrh.w	r2, [r0, #628]	; 0x274
    8aec:	1a89      	subs	r1, r1, r2
    8aee:	b209      	sxth	r1, r1
    8af0:	2900      	cmp	r1, #0
    8af2:	db04      	blt.n	8afe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8af4:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    8af8:	f000 fe84 	bl	9804 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec0>
    8afc:	b1a8      	cbz	r0, 8b2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    8afe:	480f      	ldr	r0, [pc, #60]	; (8b3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    8b00:	9000      	str	r0, [sp, #0]
    8b02:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    8b06:	4b0e      	ldr	r3, [pc, #56]	; (8b40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    8b08:	4a0e      	ldr	r2, [pc, #56]	; (8b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    8b0a:	f7fc fec1 	bl	5890 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8b0e:	6860      	ldr	r0, [r4, #4]
    8b10:	2301      	movs	r3, #1
    8b12:	2105      	movs	r1, #5
    8b14:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    8b18:	3078      	adds	r0, #120	; 0x78
    8b1a:	f005 fcd8 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8b1e:	2800      	cmp	r0, #0
    8b20:	d009      	beq.n	8b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    8b22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8b26:	f7fc bead 	b.w	5884 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8b2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8b2e:	2100      	movs	r1, #0
    8b30:	4608      	mov	r0, r1
    8b32:	f000 bbd9 	b.w	92e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a4>
    8b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8b38:	20000174 	.word	0x20000174
    8b3c:	000092e9 	.word	0x000092e9
    8b40:	00008e09 	.word	0x00008e09
    8b44:	00009751 	.word	0x00009751
    8b48:	4804      	ldr	r0, [pc, #16]	; (8b5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>)
    8b4a:	2100      	movs	r1, #0
    8b4c:	6840      	ldr	r0, [r0, #4]
    8b4e:	f820 1fc0 	strh.w	r1, [r0, #192]!
    8b52:	7881      	ldrb	r1, [r0, #2]
    8b54:	1c49      	adds	r1, r1, #1
    8b56:	7081      	strb	r1, [r0, #2]
    8b58:	4770      	bx	lr
    8b5a:	0000      	.short	0x0000
    8b5c:	20000174 	.word	0x20000174
    8b60:	4807      	ldr	r0, [pc, #28]	; (8b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>)
    8b62:	b510      	push	{r4, lr}
    8b64:	6841      	ldr	r1, [r0, #4]
    8b66:	f811 0fc2 	ldrb.w	r0, [r1, #194]!
    8b6a:	1e40      	subs	r0, r0, #1
    8b6c:	b240      	sxtb	r0, r0
    8b6e:	7008      	strb	r0, [r1, #0]
    8b70:	2800      	cmp	r0, #0
    8b72:	da04      	bge.n	8b7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    8b74:	f240 118d 	movw	r1, #397	; 0x18d
    8b78:	2031      	movs	r0, #49	; 0x31
    8b7a:	f7fb ff5f 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b7e:	bd10      	pop	{r4, pc}
    8b80:	20000174 	.word	0x20000174
    8b84:	491d      	ldr	r1, [pc, #116]	; (8bfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    8b86:	b508      	push	{r3, lr}
    8b88:	6849      	ldr	r1, [r1, #4]
    8b8a:	f891 2086 	ldrb.w	r2, [r1, #134]	; 0x86
    8b8e:	b1b8      	cbz	r0, 8bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>
    8b90:	2a10      	cmp	r2, #16
    8b92:	d006      	beq.n	8ba2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25e>
    8b94:	2a14      	cmp	r2, #20
    8b96:	d007      	beq.n	8ba8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    8b98:	2a15      	cmp	r2, #21
    8b9a:	d008      	beq.n	8bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x26a>
    8b9c:	2a1b      	cmp	r2, #27
    8b9e:	d127      	bne.n	8bf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    8ba0:	e008      	b.n	8bb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x270>
    8ba2:	2101      	movs	r1, #1
    8ba4:	200b      	movs	r0, #11
    8ba6:	e007      	b.n	8bb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x274>
    8ba8:	f001 fb88 	bl	a2bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    8bac:	e006      	b.n	8bbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x278>
    8bae:	f000 fd8d 	bl	96cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd88>
    8bb2:	e003      	b.n	8bbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x278>
    8bb4:	2101      	movs	r1, #1
    8bb6:	2006      	movs	r0, #6
    8bb8:	f000 fd6a 	bl	9690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    8bbc:	2001      	movs	r0, #1
    8bbe:	bd08      	pop	{r3, pc}
    8bc0:	2a21      	cmp	r2, #33	; 0x21
    8bc2:	d004      	beq.n	8bce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28a>
    8bc4:	2a28      	cmp	r2, #40	; 0x28
    8bc6:	d113      	bne.n	8bf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    8bc8:	2101      	movs	r1, #1
    8bca:	2011      	movs	r0, #17
    8bcc:	e7f4      	b.n	8bb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x274>
    8bce:	f891 0124 	ldrb.w	r0, [r1, #292]	; 0x124
    8bd2:	2802      	cmp	r0, #2
    8bd4:	d00e      	beq.n	8bf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b0>
    8bd6:	f891 0124 	ldrb.w	r0, [r1, #292]	; 0x124
    8bda:	2801      	cmp	r0, #1
    8bdc:	d108      	bne.n	8bf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    8bde:	f891 0125 	ldrb.w	r0, [r1, #293]	; 0x125
    8be2:	f88d 0000 	strb.w	r0, [sp]
    8be6:	9800      	ldr	r0, [sp, #0]
    8be8:	9000      	str	r0, [sp, #0]
    8bea:	f89d 0000 	ldrb.w	r0, [sp]
    8bee:	b108      	cbz	r0, 8bf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b0>
    8bf0:	2000      	movs	r0, #0
    8bf2:	bd08      	pop	{r3, pc}
    8bf4:	2101      	movs	r1, #1
    8bf6:	2017      	movs	r0, #23
    8bf8:	e7de      	b.n	8bb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x274>
    8bfa:	0000      	.short	0x0000
    8bfc:	20000174 	.word	0x20000174
    8c00:	b538      	push	{r3, r4, r5, lr}
    8c02:	2800      	cmp	r0, #0
    8c04:	d16d      	bne.n	8ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    8c06:	4c38      	ldr	r4, [pc, #224]	; (8ce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a4>)
    8c08:	6860      	ldr	r0, [r4, #4]
    8c0a:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    8c0e:	07ca      	lsls	r2, r1, #31
    8c10:	d002      	beq.n	8c18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2d4>
    8c12:	2101      	movs	r1, #1
    8c14:	2009      	movs	r0, #9
    8c16:	e05d      	b.n	8cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    8c18:	078a      	lsls	r2, r1, #30
    8c1a:	d50a      	bpl.n	8c32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    8c1c:	2101      	movs	r1, #1
    8c1e:	200c      	movs	r0, #12
    8c20:	f000 fd36 	bl	9690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    8c24:	6860      	ldr	r0, [r4, #4]
    8c26:	f810 1fc5 	ldrb.w	r1, [r0, #197]!
    8c2a:	f041 0101 	orr.w	r1, r1, #1
    8c2e:	7001      	strb	r1, [r0, #0]
    8c30:	e052      	b.n	8cd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>
    8c32:	074a      	lsls	r2, r1, #29
    8c34:	d502      	bpl.n	8c3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    8c36:	2101      	movs	r1, #1
    8c38:	2013      	movs	r0, #19
    8c3a:	e04b      	b.n	8cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    8c3c:	070a      	lsls	r2, r1, #28
    8c3e:	d506      	bpl.n	8c4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30a>
    8c40:	f890 1108 	ldrb.w	r1, [r0, #264]	; 0x108
    8c44:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    8c48:	2101      	movs	r1, #1
    8c4a:	2007      	movs	r0, #7
    8c4c:	e042      	b.n	8cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    8c4e:	f011 0f30 	tst.w	r1, #48	; 0x30
    8c52:	d046      	beq.n	8ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    8c54:	f890 111b 	ldrb.w	r1, [r0, #283]	; 0x11b
    8c58:	f88d 1000 	strb.w	r1, [sp]
    8c5c:	9900      	ldr	r1, [sp, #0]
    8c5e:	9100      	str	r1, [sp, #0]
    8c60:	f89d 1000 	ldrb.w	r1, [sp]
    8c64:	bbd1      	cbnz	r1, 8cdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x398>
    8c66:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
    8c6a:	2500      	movs	r5, #0
    8c6c:	f88d 1000 	strb.w	r1, [sp]
    8c70:	9900      	ldr	r1, [sp, #0]
    8c72:	9100      	str	r1, [sp, #0]
    8c74:	f89d 1000 	ldrb.w	r1, [sp]
    8c78:	b1c1      	cbz	r1, 8cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x368>
    8c7a:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    8c7e:	2924      	cmp	r1, #36	; 0x24
    8c80:	d02d      	beq.n	8cde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39a>
    8c82:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    8c86:	2924      	cmp	r1, #36	; 0x24
    8c88:	d029      	beq.n	8cde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39a>
    8c8a:	2300      	movs	r3, #0
    8c8c:	f200 2276 	addw	r2, r0, #630	; 0x276
    8c90:	f500 718d 	add.w	r1, r0, #282	; 0x11a
    8c94:	f006 f8da 	bl	ee4c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8c98:	6860      	ldr	r0, [r4, #4]
    8c9a:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    8c9e:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    8ca2:	f041 0110 	orr.w	r1, r1, #16
    8ca6:	7001      	strb	r1, [r0, #0]
    8ca8:	f880 5093 	strb.w	r5, [r0, #147]	; 0x93
    8cac:	6860      	ldr	r0, [r4, #4]
    8cae:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    8cb2:	06c9      	lsls	r1, r1, #27
    8cb4:	d515      	bpl.n	8ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    8cb6:	f006 f8e4 	bl	ee82 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8cba:	f000 f92b 	bl	8f14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    8cbe:	6861      	ldr	r1, [r4, #4]
    8cc0:	f101 0030 	add.w	r0, r1, #48	; 0x30
    8cc4:	8bc2      	ldrh	r2, [r0, #30]
    8cc6:	f8a1 210e 	strh.w	r2, [r1, #270]	; 0x10e
    8cca:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8ccc:	f8a1 0110 	strh.w	r0, [r1, #272]	; 0x110
    8cd0:	2101      	movs	r1, #1
    8cd2:	2015      	movs	r0, #21
    8cd4:	f000 fcdc 	bl	9690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    8cd8:	2001      	movs	r0, #1
    8cda:	bd38      	pop	{r3, r4, r5, pc}
    8cdc:	e001      	b.n	8ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    8cde:	2301      	movs	r3, #1
    8ce0:	e7d4      	b.n	8c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    8ce2:	2000      	movs	r0, #0
    8ce4:	e7f9      	b.n	8cda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x396>
    8ce6:	0000      	.short	0x0000
    8ce8:	20000174 	.word	0x20000174
    8cec:	b570      	push	{r4, r5, r6, lr}
    8cee:	460d      	mov	r5, r1
    8cf0:	4606      	mov	r6, r0
    8cf2:	f005 fe71 	bl	e9d8 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    8cf6:	4604      	mov	r4, r0
    8cf8:	4630      	mov	r0, r6
    8cfa:	f005 fe79 	bl	e9f0 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    8cfe:	4629      	mov	r1, r5
    8d00:	f000 f81e 	bl	8d40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fc>
    8d04:	b1b8      	cbz	r0, 8d36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f2>
    8d06:	4620      	mov	r0, r4
    8d08:	f005 fc7b 	bl	e602 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8d0c:	0001      	movs	r1, r0
    8d0e:	d00d      	beq.n	8d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>
    8d10:	480a      	ldr	r0, [pc, #40]	; (8d3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>)
    8d12:	6840      	ldr	r0, [r0, #4]
    8d14:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    8d18:	428a      	cmp	r2, r1
    8d1a:	d007      	beq.n	8d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>
    8d1c:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    8d20:	2901      	cmp	r1, #1
    8d22:	d005      	beq.n	8d30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ec>
    8d24:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    8d28:	4220      	tst	r0, r4
    8d2a:	d004      	beq.n	8d36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f2>
    8d2c:	2001      	movs	r0, #1
    8d2e:	bd70      	pop	{r4, r5, r6, pc}
    8d30:	f890 0127 	ldrb.w	r0, [r0, #295]	; 0x127
    8d34:	e7f8      	b.n	8d28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e4>
    8d36:	2000      	movs	r0, #0
    8d38:	bd70      	pop	{r4, r5, r6, pc}
    8d3a:	0000      	.short	0x0000
    8d3c:	20000174 	.word	0x20000174
    8d40:	b570      	push	{r4, r5, r6, lr}
    8d42:	460d      	mov	r5, r1
    8d44:	4604      	mov	r4, r0
    8d46:	f005 fc5c 	bl	e602 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8d4a:	b350      	cbz	r0, 8da2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    8d4c:	4916      	ldr	r1, [pc, #88]	; (8da8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x464>)
    8d4e:	6849      	ldr	r1, [r1, #4]
    8d50:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
    8d54:	4282      	cmp	r2, r0
    8d56:	d024      	beq.n	8da2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    8d58:	f891 3124 	ldrb.w	r3, [r1, #292]	; 0x124
    8d5c:	2b01      	cmp	r3, #1
    8d5e:	d005      	beq.n	8d6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x428>
    8d60:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
    8d64:	4223      	tst	r3, r4
    8d66:	d013      	beq.n	8d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44c>
    8d68:	b11d      	cbz	r5, 8d72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    8d6a:	e01a      	b.n	8da2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    8d6c:	f891 3126 	ldrb.w	r3, [r1, #294]	; 0x126
    8d70:	e7f8      	b.n	8d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    8d72:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    8d76:	4221      	tst	r1, r4
    8d78:	d113      	bne.n	8da2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    8d7a:	b15a      	cbz	r2, 8d94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x450>
    8d7c:	2a04      	cmp	r2, #4
    8d7e:	d00e      	beq.n	8d9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    8d80:	2804      	cmp	r0, #4
    8d82:	d00c      	beq.n	8d9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    8d84:	2a08      	cmp	r2, #8
    8d86:	d00a      	beq.n	8d9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    8d88:	2808      	cmp	r0, #8
    8d8a:	d008      	beq.n	8d9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    8d8c:	4282      	cmp	r2, r0
    8d8e:	d908      	bls.n	8da2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    8d90:	2000      	movs	r0, #0
    8d92:	bd70      	pop	{r4, r5, r6, pc}
    8d94:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    8d98:	2006      	movs	r0, #6
    8d9a:	f7fb fe4f 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d9e:	4282      	cmp	r2, r0
    8da0:	d3f6      	bcc.n	8d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44c>
    8da2:	2001      	movs	r0, #1
    8da4:	bd70      	pop	{r4, r5, r6, pc}
    8da6:	0000      	.short	0x0000
    8da8:	20000174 	.word	0x20000174
    8dac:	b510      	push	{r4, lr}
    8dae:	4c10      	ldr	r4, [pc, #64]	; (8df0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ac>)
    8db0:	2301      	movs	r3, #1
    8db2:	2100      	movs	r1, #0
    8db4:	6860      	ldr	r0, [r4, #4]
    8db6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8dba:	3078      	adds	r0, #120	; 0x78
    8dbc:	f005 fb87 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8dc0:	b140      	cbz	r0, 8dd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x490>
    8dc2:	6860      	ldr	r0, [r4, #4]
    8dc4:	2301      	movs	r3, #1
    8dc6:	2104      	movs	r1, #4
    8dc8:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    8dcc:	3078      	adds	r0, #120	; 0x78
    8dce:	f005 fb7e 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8dd2:	b108      	cbz	r0, 8dd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x494>
    8dd4:	2000      	movs	r0, #0
    8dd6:	bd10      	pop	{r4, pc}
    8dd8:	6860      	ldr	r0, [r4, #4]
    8dda:	f890 00b2 	ldrb.w	r0, [r0, #178]	; 0xb2
    8dde:	2800      	cmp	r0, #0
    8de0:	d0f9      	beq.n	8dd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    8de2:	2100      	movs	r1, #0
    8de4:	2012      	movs	r0, #18
    8de6:	f000 fc53 	bl	9690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    8dea:	2001      	movs	r0, #1
    8dec:	bd10      	pop	{r4, pc}
    8dee:	0000      	.short	0x0000
    8df0:	20000174 	.word	0x20000174
    8df4:	4903      	ldr	r1, [pc, #12]	; (8e04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c0>)
    8df6:	2000      	movs	r0, #0
    8df8:	6849      	ldr	r1, [r1, #4]
    8dfa:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    8dfe:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    8e02:	4770      	bx	lr
    8e04:	20000174 	.word	0x20000174
    8e08:	490d      	ldr	r1, [pc, #52]	; (8e40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4fc>)
    8e0a:	4602      	mov	r2, r0
    8e0c:	7848      	ldrb	r0, [r1, #1]
    8e0e:	b9a0      	cbnz	r0, 8e3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f6>
    8e10:	f101 0010 	add.w	r0, r1, #16
    8e14:	6840      	ldr	r0, [r0, #4]
    8e16:	b142      	cbz	r2, 8e2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e6>
    8e18:	7889      	ldrb	r1, [r1, #2]
    8e1a:	0709      	lsls	r1, r1, #28
    8e1c:	d503      	bpl.n	8e26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e2>
    8e1e:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
    8e22:	2808      	cmp	r0, #8
    8e24:	d009      	beq.n	8e3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f6>
    8e26:	2001      	movs	r0, #1
    8e28:	4770      	bx	lr
    8e2a:	f100 0130 	add.w	r1, r0, #48	; 0x30
    8e2e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    8e30:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    8e32:	428a      	cmp	r2, r1
    8e34:	d801      	bhi.n	8e3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f6>
    8e36:	f7ff b93d 	b.w	80b4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    8e3a:	2000      	movs	r0, #0
    8e3c:	4770      	bx	lr
    8e3e:	0000      	.short	0x0000
    8e40:	20000164 	.word	0x20000164
    8e44:	b538      	push	{r3, r4, r5, lr}
    8e46:	4c32      	ldr	r4, [pc, #200]	; (8f10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>)
    8e48:	4605      	mov	r5, r0
    8e4a:	6860      	ldr	r0, [r4, #4]
    8e4c:	3078      	adds	r0, #120	; 0x78
    8e4e:	f006 ffe8 	bl	fe22 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8e52:	2800      	cmp	r0, #0
    8e54:	d15b      	bne.n	8f0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    8e56:	2d00      	cmp	r5, #0
    8e58:	d159      	bne.n	8f0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    8e5a:	6860      	ldr	r0, [r4, #4]
    8e5c:	2301      	movs	r3, #1
    8e5e:	4619      	mov	r1, r3
    8e60:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    8e64:	3078      	adds	r0, #120	; 0x78
    8e66:	f005 fb32 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e6a:	2800      	cmp	r0, #0
    8e6c:	d14f      	bne.n	8f0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    8e6e:	6860      	ldr	r0, [r4, #4]
    8e70:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    8e74:	f88d 1000 	strb.w	r1, [sp]
    8e78:	9900      	ldr	r1, [sp, #0]
    8e7a:	9100      	str	r1, [sp, #0]
    8e7c:	f89d 2000 	ldrb.w	r2, [sp]
    8e80:	2100      	movs	r1, #0
    8e82:	b142      	cbz	r2, 8e96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x552>
    8e84:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8
    8e88:	f890 1119 	ldrb.w	r1, [r0, #281]	; 0x119
    8e8c:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    8e90:	2100      	movs	r1, #0
    8e92:	2002      	movs	r0, #2
    8e94:	e030      	b.n	8ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b4>
    8e96:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    8e9a:	2301      	movs	r3, #1
    8e9c:	2104      	movs	r1, #4
    8e9e:	3078      	adds	r0, #120	; 0x78
    8ea0:	f005 fb15 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ea4:	4605      	mov	r5, r0
    8ea6:	f7ff feab 	bl	8c00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    8eaa:	2800      	cmp	r0, #0
    8eac:	d12f      	bne.n	8f0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    8eae:	4628      	mov	r0, r5
    8eb0:	f7ff fe68 	bl	8b84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    8eb4:	2800      	cmp	r0, #0
    8eb6:	d12a      	bne.n	8f0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    8eb8:	f7ff ff78 	bl	8dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x468>
    8ebc:	2800      	cmp	r0, #0
    8ebe:	d126      	bne.n	8f0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    8ec0:	6860      	ldr	r0, [r4, #4]
    8ec2:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    8ec6:	290a      	cmp	r1, #10
    8ec8:	d01a      	beq.n	8f00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5bc>
    8eca:	2d00      	cmp	r5, #0
    8ecc:	d11f      	bne.n	8f0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    8ece:	f000 fb2b 	bl	9528 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbe4>
    8ed2:	2800      	cmp	r0, #0
    8ed4:	d11b      	bne.n	8f0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    8ed6:	6860      	ldr	r0, [r4, #4]
    8ed8:	2301      	movs	r3, #1
    8eda:	2100      	movs	r1, #0
    8edc:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8ee0:	3078      	adds	r0, #120	; 0x78
    8ee2:	f005 faf4 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ee6:	2800      	cmp	r0, #0
    8ee8:	d011      	beq.n	8f0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    8eea:	6860      	ldr	r0, [r4, #4]
    8eec:	f890 026c 	ldrb.w	r0, [r0, #620]	; 0x26c
    8ef0:	2800      	cmp	r0, #0
    8ef2:	d00c      	beq.n	8f0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    8ef4:	2100      	movs	r1, #0
    8ef6:	20ff      	movs	r0, #255	; 0xff
    8ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8efc:	f000 bbc8 	b.w	9690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    8f00:	f890 1109 	ldrb.w	r1, [r0, #265]	; 0x109
    8f04:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    8f08:	2100      	movs	r1, #0
    8f0a:	2007      	movs	r0, #7
    8f0c:	e7f4      	b.n	8ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b4>
    8f0e:	bd38      	pop	{r3, r4, r5, pc}
    8f10:	20000174 	.word	0x20000174
    8f14:	480a      	ldr	r0, [pc, #40]	; (8f40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fc>)
    8f16:	b510      	push	{r4, lr}
    8f18:	6843      	ldr	r3, [r0, #4]
    8f1a:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    8f1e:	2801      	cmp	r0, #1
    8f20:	d00a      	beq.n	8f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f4>
    8f22:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    8f26:	f103 0130 	add.w	r1, r3, #48	; 0x30
    8f2a:	8818      	ldrh	r0, [r3, #0]
    8f2c:	f005 ff66 	bl	edfc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    8f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8f34:	f7fd bf5a 	b.w	6dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8f38:	2002      	movs	r0, #2
    8f3a:	f883 0064 	strb.w	r0, [r3, #100]	; 0x64
    8f3e:	bd10      	pop	{r4, pc}
    8f40:	20000174 	.word	0x20000174
    8f44:	b570      	push	{r4, r5, r6, lr}
    8f46:	4c24      	ldr	r4, [pc, #144]	; (8fd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x694>)
    8f48:	0006      	movs	r6, r0
    8f4a:	f104 0510 	add.w	r5, r4, #16
    8f4e:	d12f      	bne.n	8fb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    8f50:	f000 f8a2 	bl	9098 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x754>
    8f54:	f000 f844 	bl	8fe0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>
    8f58:	0006      	movs	r6, r0
    8f5a:	d129      	bne.n	8fb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    8f5c:	8860      	ldrh	r0, [r4, #2]
    8f5e:	0741      	lsls	r1, r0, #29
    8f60:	d506      	bpl.n	8f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    8f62:	6869      	ldr	r1, [r5, #4]
    8f64:	f891 1088 	ldrb.w	r1, [r1, #136]	; 0x88
    8f68:	2907      	cmp	r1, #7
    8f6a:	d101      	bne.n	8f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    8f6c:	2101      	movs	r1, #1
    8f6e:	7021      	strb	r1, [r4, #0]
    8f70:	0780      	lsls	r0, r0, #30
    8f72:	d512      	bpl.n	8f9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    8f74:	68a0      	ldr	r0, [r4, #8]
    8f76:	78c0      	ldrb	r0, [r0, #3]
    8f78:	2826      	cmp	r0, #38	; 0x26
    8f7a:	d205      	bcs.n	8f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    8f7c:	4917      	ldr	r1, [pc, #92]	; (8fdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>)
    8f7e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    8f82:	b109      	cbz	r1, 8f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    8f84:	4788      	blx	r1
    8f86:	e008      	b.n	8f9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    8f88:	28ff      	cmp	r0, #255	; 0xff
    8f8a:	d004      	beq.n	8f96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
    8f8c:	f240 71c9 	movw	r1, #1993	; 0x7c9
    8f90:	2031      	movs	r0, #49	; 0x31
    8f92:	f7fb fd53 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f96:	f001 f9d3 	bl	a340 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19fc>
    8f9a:	78a0      	ldrb	r0, [r4, #2]
    8f9c:	06c0      	lsls	r0, r0, #27
    8f9e:	d507      	bpl.n	8fb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    8fa0:	6868      	ldr	r0, [r5, #4]
    8fa2:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    8fa6:	290b      	cmp	r1, #11
    8fa8:	d102      	bne.n	8fb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    8faa:	210c      	movs	r1, #12
    8fac:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    8fb0:	7860      	ldrb	r0, [r4, #1]
    8fb2:	0700      	lsls	r0, r0, #28
    8fb4:	d50d      	bpl.n	8fd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x68e>
    8fb6:	6868      	ldr	r0, [r5, #4]
    8fb8:	2301      	movs	r3, #1
    8fba:	2105      	movs	r1, #5
    8fbc:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    8fc0:	3078      	adds	r0, #120	; 0x78
    8fc2:	f005 fa84 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8fc6:	b108      	cbz	r0, 8fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x688>
    8fc8:	2608      	movs	r6, #8
    8fca:	e002      	b.n	8fd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x68e>
    8fcc:	2000      	movs	r0, #0
    8fce:	f7fc fd27 	bl	5a20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    8fd2:	4630      	mov	r0, r6
    8fd4:	bd70      	pop	{r4, r5, r6, pc}
    8fd6:	0000      	.short	0x0000
    8fd8:	20000164 	.word	0x20000164
    8fdc:	20000214 	.word	0x20000214
    8fe0:	b570      	push	{r4, r5, r6, lr}
    8fe2:	4d2b      	ldr	r5, [pc, #172]	; (9090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x74c>)
    8fe4:	2000      	movs	r0, #0
    8fe6:	78a9      	ldrb	r1, [r5, #2]
    8fe8:	07c9      	lsls	r1, r1, #31
    8fea:	d017      	beq.n	901c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d8>
    8fec:	68e8      	ldr	r0, [r5, #12]
    8fee:	f105 0410 	add.w	r4, r5, #16
    8ff2:	2301      	movs	r3, #1
    8ff4:	78c6      	ldrb	r6, [r0, #3]
    8ff6:	6860      	ldr	r0, [r4, #4]
    8ff8:	2105      	movs	r1, #5
    8ffa:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    8ffe:	3078      	adds	r0, #120	; 0x78
    9000:	f005 fa65 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9004:	b158      	cbz	r0, 901e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    9006:	1eb6      	subs	r6, r6, #2
    9008:	2e0a      	cmp	r6, #10
    900a:	d206      	bcs.n	901a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d6>
    900c:	e8df f006 	tbb	[pc, r6]
    9010:	05050707 	.word	0x05050707
    9014:	05050707 	.word	0x05050707
    9018:	0707      	.short	0x0707
    901a:	2008      	movs	r0, #8
    901c:	bd70      	pop	{r4, r5, r6, pc}
    901e:	68e8      	ldr	r0, [r5, #12]
    9020:	f7fd fd48 	bl	6ab4 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    9024:	b138      	cbz	r0, 9036 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f2>
    9026:	68e8      	ldr	r0, [r5, #12]
    9028:	78c5      	ldrb	r5, [r0, #3]
    902a:	b145      	cbz	r5, 903e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    902c:	2d01      	cmp	r5, #1
    902e:	d006      	beq.n	903e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    9030:	2d16      	cmp	r5, #22
    9032:	d118      	bne.n	9066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    9034:	e003      	b.n	903e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    9036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    903a:	f000 bdd1 	b.w	9be0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    903e:	6860      	ldr	r0, [r4, #4]
    9040:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9044:	f005 fa91 	bl	e56a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9048:	b168      	cbz	r0, 9066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    904a:	6861      	ldr	r1, [r4, #4]
    904c:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    9050:	281f      	cmp	r0, #31
    9052:	d008      	beq.n	9066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    9054:	2820      	cmp	r0, #32
    9056:	d003      	beq.n	9060 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x71c>
    9058:	2d16      	cmp	r5, #22
    905a:	d00c      	beq.n	9076 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x732>
    905c:	2002      	movs	r0, #2
    905e:	bd70      	pop	{r4, r5, r6, pc}
    9060:	2027      	movs	r0, #39	; 0x27
    9062:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9066:	2d26      	cmp	r5, #38	; 0x26
    9068:	d207      	bcs.n	907a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x736>
    906a:	480a      	ldr	r0, [pc, #40]	; (9094 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    906c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    9070:	b118      	cbz	r0, 907a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x736>
    9072:	4780      	blx	r0
    9074:	e003      	b.n	907e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73a>
    9076:	2020      	movs	r0, #32
    9078:	bd70      	pop	{r4, r5, r6, pc}
    907a:	f000 fdb1 	bl	9be0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    907e:	6861      	ldr	r1, [r4, #4]
    9080:	e9f1 233a 	ldrd	r2, r3, [r1, #232]!	; 0xe8
    9084:	1c52      	adds	r2, r2, #1
    9086:	f143 0300 	adc.w	r3, r3, #0
    908a:	e9c1 2300 	strd	r2, r3, [r1]
    908e:	bd70      	pop	{r4, r5, r6, pc}
    9090:	20000164 	.word	0x20000164
    9094:	2000017c 	.word	0x2000017c
    9098:	b570      	push	{r4, r5, r6, lr}
    909a:	4e23      	ldr	r6, [pc, #140]	; (9128 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>)
    909c:	78b0      	ldrb	r0, [r6, #2]
    909e:	0700      	lsls	r0, r0, #28
    90a0:	d540      	bpl.n	9124 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    90a2:	f106 0410 	add.w	r4, r6, #16
    90a6:	6860      	ldr	r0, [r4, #4]
    90a8:	3078      	adds	r0, #120	; 0x78
    90aa:	f006 feba 	bl	fe22 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    90ae:	b148      	cbz	r0, 90c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x780>
    90b0:	6860      	ldr	r0, [r4, #4]
    90b2:	21fe      	movs	r1, #254	; 0xfe
    90b4:	2500      	movs	r5, #0
    90b6:	f880 110c 	strb.w	r1, [r0, #268]	; 0x10c
    90ba:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    90be:	2919      	cmp	r1, #25
    90c0:	d10c      	bne.n	90dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x798>
    90c2:	e004      	b.n	90ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78a>
    90c4:	f240 71d3 	movw	r1, #2003	; 0x7d3
    90c8:	2031      	movs	r0, #49	; 0x31
    90ca:	f7fb fcb7 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90ce:	f880 50c3 	strb.w	r5, [r0, #195]	; 0xc3
    90d2:	f7ff fd45 	bl	8b60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    90d6:	6860      	ldr	r0, [r4, #4]
    90d8:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    90dc:	6860      	ldr	r0, [r4, #4]
    90de:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    90e2:	291f      	cmp	r1, #31
    90e4:	d002      	beq.n	90ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7a8>
    90e6:	2929      	cmp	r1, #41	; 0x29
    90e8:	d113      	bne.n	9112 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    90ea:	e00b      	b.n	9104 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c0>
    90ec:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    90f0:	f005 fa3b 	bl	e56a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    90f4:	b108      	cbz	r0, 90fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b6>
    90f6:	2027      	movs	r0, #39	; 0x27
    90f8:	e000      	b.n	90fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b8>
    90fa:	2020      	movs	r0, #32
    90fc:	6861      	ldr	r1, [r4, #4]
    90fe:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9102:	e006      	b.n	9112 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    9104:	2101      	movs	r1, #1
    9106:	f880 126d 	strb.w	r1, [r0, #621]	; 0x26d
    910a:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    910e:	f880 50be 	strb.w	r5, [r0, #190]	; 0xbe
    9112:	6860      	ldr	r0, [r4, #4]
    9114:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    9118:	2908      	cmp	r1, #8
    911a:	d103      	bne.n	9124 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    911c:	2102      	movs	r1, #2
    911e:	7031      	strb	r1, [r6, #0]
    9120:	f880 110c 	strb.w	r1, [r0, #268]	; 0x10c
    9124:	bd70      	pop	{r4, r5, r6, pc}
    9126:	0000      	.short	0x0000
    9128:	20000164 	.word	0x20000164
    912c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    912e:	4606      	mov	r6, r0
    9130:	4668      	mov	r0, sp
    9132:	f7fc faff 	bl	5734 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    9136:	b310      	cbz	r0, 917e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x83a>
    9138:	2222      	movs	r2, #34	; 0x22
    913a:	2100      	movs	r1, #0
    913c:	9800      	ldr	r0, [sp, #0]
    913e:	f003 ff47 	bl	cfd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9142:	2103      	movs	r1, #3
    9144:	9800      	ldr	r0, [sp, #0]
    9146:	f005 fcb7 	bl	eab8 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    914a:	9800      	ldr	r0, [sp, #0]
    914c:	7801      	ldrb	r1, [r0, #0]
    914e:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    9152:	7001      	strb	r1, [r0, #0]
    9154:	4631      	mov	r1, r6
    9156:	f7fd fcbd 	bl	6ad4 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    915a:	4c62      	ldr	r4, [pc, #392]	; (92e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a0>)
    915c:	f644 152f 	movw	r5, #18735	; 0x492f
    9160:	2e0e      	cmp	r6, #14
    9162:	d079      	beq.n	9258 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    9164:	dc0e      	bgt.n	9184 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x840>
    9166:	f1a6 0602 	sub.w	r6, r6, #2
    916a:	2e0c      	cmp	r6, #12
    916c:	d21c      	bcs.n	91a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x864>
    916e:	e8df f006 	tbb	[pc, r6]
    9172:	1b1e      	.short	0x1b1e
    9174:	23aeae52 	.word	0x23aeae52
    9178:	ae1b5f1b 	.word	0xae1b5f1b
    917c:	363c      	.short	0x363c
    917e:	f640 210a 	movw	r1, #2570	; 0xa0a
    9182:	e0aa      	b.n	92da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
    9184:	2e15      	cmp	r6, #21
    9186:	d068      	beq.n	925a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x916>
    9188:	dc08      	bgt.n	919c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x858>
    918a:	2e11      	cmp	r6, #17
    918c:	d01a      	beq.n	91c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x880>
    918e:	2e12      	cmp	r6, #18
    9190:	d017      	beq.n	91c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87e>
    9192:	2e13      	cmp	r6, #19
    9194:	d015      	beq.n	91c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87e>
    9196:	2e14      	cmp	r6, #20
    9198:	d106      	bne.n	91a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x864>
    919a:	e05e      	b.n	925a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x916>
    919c:	2e16      	cmp	r6, #22
    919e:	d030      	beq.n	9202 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8be>
    91a0:	2e17      	cmp	r6, #23
    91a2:	d075      	beq.n	9290 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94c>
    91a4:	2eff      	cmp	r6, #255	; 0xff
    91a6:	d072      	beq.n	928e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94a>
    91a8:	f640 217b 	movw	r1, #2683	; 0xa7b
    91ac:	e095      	b.n	92da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
    91ae:	6861      	ldr	r1, [r4, #4]
    91b0:	9800      	ldr	r0, [sp, #0]
    91b2:	f891 110e 	ldrb.w	r1, [r1, #270]	; 0x10e
    91b6:	e016      	b.n	91e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8a2>
    91b8:	6860      	ldr	r0, [r4, #4]
    91ba:	9900      	ldr	r1, [sp, #0]
    91bc:	f890 010e 	ldrb.w	r0, [r0, #270]	; 0x10e
    91c0:	7108      	strb	r0, [r1, #4]
    91c2:	e084      	b.n	92ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    91c4:	6860      	ldr	r0, [r4, #4]
    91c6:	f890 110b 	ldrb.w	r1, [r0, #267]	; 0x10b
    91ca:	9800      	ldr	r0, [sp, #0]
    91cc:	f005 fc50 	bl	ea70 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    91d0:	6860      	ldr	r0, [r4, #4]
    91d2:	f890 110a 	ldrb.w	r1, [r0, #266]	; 0x10a
    91d6:	9800      	ldr	r0, [sp, #0]
    91d8:	f005 fc4c 	bl	ea74 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    91dc:	e077      	b.n	92ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    91de:	6861      	ldr	r1, [r4, #4]
    91e0:	9800      	ldr	r0, [sp, #0]
    91e2:	f891 110a 	ldrb.w	r1, [r1, #266]	; 0x10a
    91e6:	7101      	strb	r1, [r0, #4]
    91e8:	e071      	b.n	92ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    91ea:	9800      	ldr	r0, [sp, #0]
    91ec:	210c      	movs	r1, #12
    91ee:	7101      	strb	r1, [r0, #4]
    91f0:	2159      	movs	r1, #89	; 0x59
    91f2:	7141      	strb	r1, [r0, #5]
    91f4:	2100      	movs	r1, #0
    91f6:	7181      	strb	r1, [r0, #6]
    91f8:	21d8      	movs	r1, #216	; 0xd8
    91fa:	71c1      	strb	r1, [r0, #7]
    91fc:	2111      	movs	r1, #17
    91fe:	7201      	strb	r1, [r0, #8]
    9200:	e065      	b.n	92ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9202:	9800      	ldr	r0, [sp, #0]
    9204:	f8d4 1004 	ldr.w	r1, [r4, #4]
    9208:	f891 2126 	ldrb.w	r2, [r1, #294]	; 0x126
    920c:	7102      	strb	r2, [r0, #4]
    920e:	f891 1127 	ldrb.w	r1, [r1, #295]	; 0x127
    9212:	7141      	strb	r1, [r0, #5]
    9214:	e05b      	b.n	92ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9216:	6861      	ldr	r1, [r4, #4]
    9218:	9800      	ldr	r0, [sp, #0]
    921a:	f501 71f4 	add.w	r1, r1, #488	; 0x1e8
    921e:	f005 fc3c 	bl	ea9a <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    9222:	6861      	ldr	r1, [r4, #4]
    9224:	9800      	ldr	r0, [sp, #0]
    9226:	f501 7182 	add.w	r1, r1, #260	; 0x104
    922a:	f005 fc33 	bl	ea94 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    922e:	e04e      	b.n	92ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9230:	f001 ff54 	bl	b0dc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9234:	4028      	ands	r0, r5
    9236:	f001 0106 	and.w	r1, r1, #6
    923a:	e9cd 0101 	strd	r0, r1, [sp, #4]
    923e:	6861      	ldr	r1, [r4, #4]
    9240:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9244:	f891 10d4 	ldrb.w	r1, [r1, #212]	; 0xd4
    9248:	4008      	ands	r0, r1
    924a:	f88d 0004 	strb.w	r0, [sp, #4]
    924e:	a901      	add	r1, sp, #4
    9250:	9800      	ldr	r0, [sp, #0]
    9252:	f005 fc2c 	bl	eaae <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    9256:	e03a      	b.n	92ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9258:	e025      	b.n	92a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x962>
    925a:	6860      	ldr	r0, [r4, #4]
    925c:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
    9260:	9800      	ldr	r0, [sp, #0]
    9262:	f005 fc31 	bl	eac8 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    9266:	6860      	ldr	r0, [r4, #4]
    9268:	f8b0 1110 	ldrh.w	r1, [r0, #272]	; 0x110
    926c:	9800      	ldr	r0, [sp, #0]
    926e:	f005 fc2f 	bl	ead0 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    9272:	6860      	ldr	r0, [r4, #4]
    9274:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    9278:	9800      	ldr	r0, [sp, #0]
    927a:	f005 fc2d 	bl	ead8 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    927e:	6860      	ldr	r0, [r4, #4]
    9280:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
    9284:	9800      	ldr	r0, [sp, #0]
    9286:	f005 fc2b 	bl	eae0 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    928a:	e020      	b.n	92ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    928c:	e000      	b.n	9290 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94c>
    928e:	e016      	b.n	92be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    9290:	6861      	ldr	r1, [r4, #4]
    9292:	f891 0124 	ldrb.w	r0, [r1, #292]	; 0x124
    9296:	2801      	cmp	r0, #1
    9298:	9800      	ldr	r0, [sp, #0]
    929a:	d0b5      	beq.n	9208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c4>
    929c:	f811 2f6a 	ldrb.w	r2, [r1, #106]!
    92a0:	7102      	strb	r2, [r0, #4]
    92a2:	7849      	ldrb	r1, [r1, #1]
    92a4:	e7b5      	b.n	9212 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8ce>
    92a6:	f001 ff19 	bl	b0dc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    92aa:	4028      	ands	r0, r5
    92ac:	f001 0106 	and.w	r1, r1, #6
    92b0:	e9cd 0101 	strd	r0, r1, [sp, #4]
    92b4:	a901      	add	r1, sp, #4
    92b6:	9800      	ldr	r0, [sp, #0]
    92b8:	f005 fbf4 	bl	eaa4 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    92bc:	e007      	b.n	92ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    92be:	6860      	ldr	r0, [r4, #4]
    92c0:	f890 226f 	ldrb.w	r2, [r0, #623]	; 0x26f
    92c4:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
    92c8:	9800      	ldr	r0, [sp, #0]
    92ca:	f005 fbd5 	bl	ea78 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    92ce:	f7fc fa0b 	bl	56e8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    92d2:	2800      	cmp	r0, #0
    92d4:	d104      	bne.n	92e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x99c>
    92d6:	f640 217f 	movw	r1, #2687	; 0xa7f
    92da:	2031      	movs	r0, #49	; 0x31
    92dc:	f7fb fbae 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    92e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    92e2:	0000      	.short	0x0000
    92e4:	20000174 	.word	0x20000174
    92e8:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    92ec:	4e8d      	ldr	r6, [pc, #564]	; (9524 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbe0>)
    92ee:	468a      	mov	sl, r1
    92f0:	6870      	ldr	r0, [r6, #4]
    92f2:	8800      	ldrh	r0, [r0, #0]
    92f4:	f7fb ffe0 	bl	52b8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    92f8:	0007      	movs	r7, r0
    92fa:	d00c      	beq.n	9316 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    92fc:	f1a6 0510 	sub.w	r5, r6, #16
    9300:	f04f 0400 	mov.w	r4, #0
    9304:	8868      	ldrh	r0, [r5, #2]
    9306:	05c0      	lsls	r0, r0, #23
    9308:	d50a      	bpl.n	9320 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9dc>
    930a:	6870      	ldr	r0, [r6, #4]
    930c:	f8a0 40b4 	strh.w	r4, [r0, #180]	; 0xb4
    9310:	f880 41dc 	strb.w	r4, [r0, #476]	; 0x1dc
    9314:	e009      	b.n	932a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e6>
    9316:	f640 515c 	movw	r1, #3420	; 0xd5c
    931a:	2031      	movs	r0, #49	; 0x31
    931c:	f7fb fb8e 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9320:	6871      	ldr	r1, [r6, #4]
    9322:	f831 0fb4 	ldrh.w	r0, [r1, #180]!
    9326:	1c40      	adds	r0, r0, #1
    9328:	8008      	strh	r0, [r1, #0]
    932a:	f001 f9df 	bl	a6ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da8>
    932e:	f04f 0901 	mov.w	r9, #1
    9332:	b348      	cbz	r0, 9388 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa44>
    9334:	8868      	ldrh	r0, [r5, #2]
    9336:	0500      	lsls	r0, r0, #20
    9338:	d506      	bpl.n	9348 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa04>
    933a:	6870      	ldr	r0, [r6, #4]
    933c:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    9340:	b111      	cbz	r1, 9348 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa04>
    9342:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
    9346:	e01f      	b.n	9388 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa44>
    9348:	6871      	ldr	r1, [r6, #4]
    934a:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
    934e:	1c40      	adds	r0, r0, #1
    9350:	f8c1 00a8 	str.w	r0, [r1, #168]	; 0xa8
    9354:	f8d1 20ac 	ldr.w	r2, [r1, #172]	; 0xac
    9358:	4282      	cmp	r2, r0
    935a:	d301      	bcc.n	9360 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1c>
    935c:	1a13      	subs	r3, r2, r0
    935e:	e000      	b.n	9362 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
    9360:	2300      	movs	r3, #0
    9362:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    9366:	f10c 0c05 	add.w	ip, ip, #5
    936a:	4563      	cmp	r3, ip
    936c:	d801      	bhi.n	9372 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
    936e:	f881 90b2 	strb.w	r9, [r1, #178]	; 0xb2
    9372:	4290      	cmp	r0, r2
    9374:	d308      	bcc.n	9388 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa44>
    9376:	f501 709d 	add.w	r0, r1, #314	; 0x13a
    937a:	220c      	movs	r2, #12
    937c:	f8c1 40a8 	str.w	r4, [r1, #168]	; 0xa8
    9380:	f7fd fc62 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9384:	f7fd fd32 	bl	6dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9388:	8868      	ldrh	r0, [r5, #2]
    938a:	f04f 0b02 	mov.w	fp, #2
    938e:	f410 7f40 	tst.w	r0, #768	; 0x300
    9392:	d00e      	beq.n	93b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6e>
    9394:	6870      	ldr	r0, [r6, #4]
    9396:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    939a:	b111      	cbz	r1, 93a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5e>
    939c:	2903      	cmp	r1, #3
    939e:	d108      	bne.n	93b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6e>
    93a0:	e002      	b.n	93a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa64>
    93a2:	f880 908a 	strb.w	r9, [r0, #138]	; 0x8a
    93a6:	e001      	b.n	93ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa68>
    93a8:	f880 b08a 	strb.w	fp, [r0, #138]	; 0x8a
    93ac:	2101      	movs	r1, #1
    93ae:	f7fe fea7 	bl	8100 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    93b2:	6870      	ldr	r0, [r6, #4]
    93b4:	46b0      	mov	r8, r6
    93b6:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    93ba:	2901      	cmp	r1, #1
    93bc:	d104      	bne.n	93c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa84>
    93be:	8869      	ldrh	r1, [r5, #2]
    93c0:	0549      	lsls	r1, r1, #21
    93c2:	d501      	bpl.n	93c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa84>
    93c4:	f880 b08a 	strb.w	fp, [r0, #138]	; 0x8a
    93c8:	9900      	ldr	r1, [sp, #0]
    93ca:	2900      	cmp	r1, #0
    93cc:	d179      	bne.n	94c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7e>
    93ce:	78a9      	ldrb	r1, [r5, #2]
    93d0:	0649      	lsls	r1, r1, #25
    93d2:	d502      	bpl.n	93da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa96>
    93d4:	f8a0 41f0 	strh.w	r4, [r0, #496]	; 0x1f0
    93d8:	e004      	b.n	93e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaa0>
    93da:	f8b0 11f0 	ldrh.w	r1, [r0, #496]	; 0x1f0
    93de:	1c49      	adds	r1, r1, #1
    93e0:	f8a0 11f0 	strh.w	r1, [r0, #496]	; 0x1f0
    93e4:	4650      	mov	r0, sl
    93e6:	f7ff fdad 	bl	8f44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    93ea:	ea40 000a 	orr.w	r0, r0, sl
    93ee:	4682      	mov	sl, r0
    93f0:	f7ff fd28 	bl	8e44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x500>
    93f4:	f8d8 6004 	ldr.w	r6, [r8, #4]
    93f8:	f8b6 01d0 	ldrh.w	r0, [r6, #464]	; 0x1d0
    93fc:	1c40      	adds	r0, r0, #1
    93fe:	f8a6 01d0 	strh.w	r0, [r6, #464]	; 0x1d0
    9402:	f896 01d4 	ldrb.w	r0, [r6, #468]	; 0x1d4
    9406:	b128      	cbz	r0, 9414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad0>
    9408:	f7fc fb76 	bl	5af8 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    940c:	b1b0      	cbz	r0, 943c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    940e:	f8a6 41d0 	strh.w	r4, [r6, #464]	; 0x1d0
    9412:	e013      	b.n	943c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9414:	f7fc fa10 	bl	5838 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    9418:	b108      	cbz	r0, 941e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xada>
    941a:	f8a6 41d0 	strh.w	r4, [r6, #464]	; 0x1d0
    941e:	f7fc fa05 	bl	582c <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    9422:	b158      	cbz	r0, 943c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9424:	f896 01dc 	ldrb.w	r0, [r6, #476]	; 0x1dc
    9428:	1c40      	adds	r0, r0, #1
    942a:	b2c0      	uxtb	r0, r0
    942c:	f886 01dc 	strb.w	r0, [r6, #476]	; 0x1dc
    9430:	2802      	cmp	r0, #2
    9432:	d903      	bls.n	943c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9434:	f8a6 41d0 	strh.w	r4, [r6, #464]	; 0x1d0
    9438:	f886 41dc 	strb.w	r4, [r6, #476]	; 0x1dc
    943c:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9440:	4646      	mov	r6, r8
    9442:	2301      	movs	r3, #1
    9444:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9448:	2100      	movs	r1, #0
    944a:	3078      	adds	r0, #120	; 0x78
    944c:	f005 f83f 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9450:	b920      	cbnz	r0, 945c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb18>
    9452:	6870      	ldr	r0, [r6, #4]
    9454:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9458:	280c      	cmp	r0, #12
    945a:	d160      	bne.n	951e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    945c:	6870      	ldr	r0, [r6, #4]
    945e:	2301      	movs	r3, #1
    9460:	2100      	movs	r1, #0
    9462:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9466:	3078      	adds	r0, #120	; 0x78
    9468:	f005 f831 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    946c:	b350      	cbz	r0, 94c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    946e:	6870      	ldr	r0, [r6, #4]
    9470:	2301      	movs	r3, #1
    9472:	2100      	movs	r1, #0
    9474:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9478:	3078      	adds	r0, #120	; 0x78
    947a:	f005 f828 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    947e:	b308      	cbz	r0, 94c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9480:	6870      	ldr	r0, [r6, #4]
    9482:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9486:	2902      	cmp	r1, #2
    9488:	d149      	bne.n	951e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    948a:	f890 01dc 	ldrb.w	r0, [r0, #476]	; 0x1dc
    948e:	b9c8      	cbnz	r0, 94c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9490:	4638      	mov	r0, r7
    9492:	f004 faa6 	bl	d9e2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    9496:	b1a8      	cbz	r0, 94c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9498:	6870      	ldr	r0, [r6, #4]
    949a:	3078      	adds	r0, #120	; 0x78
    949c:	f006 fcc1 	bl	fe22 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    94a0:	b980      	cbnz	r0, 94c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    94a2:	6871      	ldr	r1, [r6, #4]
    94a4:	f8b1 01ca 	ldrh.w	r0, [r1, #458]	; 0x1ca
    94a8:	2801      	cmp	r0, #1
    94aa:	d938      	bls.n	951e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    94ac:	f881 91d2 	strb.w	r9, [r1, #466]	; 0x1d2
    94b0:	f8b1 00b6 	ldrh.w	r0, [r1, #182]	; 0xb6
    94b4:	f8b1 20b4 	ldrh.w	r2, [r1, #180]	; 0xb4
    94b8:	1e83      	subs	r3, r0, #2
    94ba:	429a      	cmp	r2, r3
    94bc:	db03      	blt.n	94c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb82>
    94be:	2001      	movs	r0, #1
    94c0:	e004      	b.n	94cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
    94c2:	e01d      	b.n	9500 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    94c4:	e02b      	b.n	951e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    94c6:	1a80      	subs	r0, r0, r2
    94c8:	1e40      	subs	r0, r0, #1
    94ca:	b280      	uxth	r0, r0
    94cc:	f8b1 21d0 	ldrh.w	r2, [r1, #464]	; 0x1d0
    94d0:	88ab      	ldrh	r3, [r5, #4]
    94d2:	429a      	cmp	r2, r3
    94d4:	d301      	bcc.n	94da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb96>
    94d6:	2201      	movs	r2, #1
    94d8:	e002      	b.n	94e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb9c>
    94da:	1a9a      	subs	r2, r3, r2
    94dc:	1c52      	adds	r2, r2, #1
    94de:	b292      	uxth	r2, r2
    94e0:	4290      	cmp	r0, r2
    94e2:	d900      	bls.n	94e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba2>
    94e4:	4610      	mov	r0, r2
    94e6:	2801      	cmp	r0, #1
    94e8:	d102      	bne.n	94f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbac>
    94ea:	bf00      	nop
    94ec:	f881 41d2 	strb.w	r4, [r1, #466]	; 0x1d2
    94f0:	6871      	ldr	r1, [r6, #4]
    94f2:	f8b1 207c 	ldrh.w	r2, [r1, #124]	; 0x7c
    94f6:	4410      	add	r0, r2
    94f8:	f8a1 01cc 	strh.w	r0, [r1, #460]	; 0x1cc
    94fc:	f001 f9ca 	bl	a894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f50>
    9500:	78a8      	ldrb	r0, [r5, #2]
    9502:	4652      	mov	r2, sl
    9504:	f3c0 1180 	ubfx	r1, r0, #6, #1
    9508:	9800      	ldr	r0, [sp, #0]
    950a:	f001 f903 	bl	a714 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    950e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9512:	f880 41d3 	strb.w	r4, [r0, #467]	; 0x1d3
    9516:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    951a:	f7fc b8cf 	b.w	56bc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    951e:	2001      	movs	r0, #1
    9520:	6871      	ldr	r1, [r6, #4]
    9522:	e7e3      	b.n	94ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba8>
    9524:	20000174 	.word	0x20000174
    9528:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    952a:	4c58      	ldr	r4, [pc, #352]	; (968c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd48>)
    952c:	2301      	movs	r3, #1
    952e:	2100      	movs	r1, #0
    9530:	6860      	ldr	r0, [r4, #4]
    9532:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9536:	3078      	adds	r0, #120	; 0x78
    9538:	f004 ffc9 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    953c:	2800      	cmp	r0, #0
    953e:	d07c      	beq.n	963a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf6>
    9540:	6860      	ldr	r0, [r4, #4]
    9542:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    9546:	2500      	movs	r5, #0
    9548:	b139      	cbz	r1, 955a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc16>
    954a:	2100      	movs	r1, #0
    954c:	200e      	movs	r0, #14
    954e:	f000 f89f 	bl	9690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9552:	6860      	ldr	r0, [r4, #4]
    9554:	f880 512b 	strb.w	r5, [r0, #299]	; 0x12b
    9558:	e096      	b.n	9688 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    955a:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    955e:	b119      	cbz	r1, 9568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc24>
    9560:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    9564:	0789      	lsls	r1, r1, #30
    9566:	d016      	beq.n	9596 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc52>
    9568:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
    956c:	f88d 1004 	strb.w	r1, [sp, #4]
    9570:	9901      	ldr	r1, [sp, #4]
    9572:	9101      	str	r1, [sp, #4]
    9574:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9578:	b141      	cbz	r1, 958c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc48>
    957a:	f890 111b 	ldrb.w	r1, [r0, #283]	; 0x11b
    957e:	f88d 1000 	strb.w	r1, [sp]
    9582:	9900      	ldr	r1, [sp, #0]
    9584:	9100      	str	r1, [sp, #0]
    9586:	f89d 1000 	ldrb.w	r1, [sp]
    958a:	b189      	cbz	r1, 95b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    958c:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    9590:	2901      	cmp	r1, #1
    9592:	d030      	beq.n	95f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcb2>
    9594:	e072      	b.n	967c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    9596:	2100      	movs	r1, #0
    9598:	200c      	movs	r0, #12
    959a:	f000 f879 	bl	9690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    959e:	6860      	ldr	r0, [r4, #4]
    95a0:	f810 1fc5 	ldrb.w	r1, [r0, #197]!
    95a4:	f041 0101 	orr.w	r1, r1, #1
    95a8:	7001      	strb	r1, [r0, #0]
    95aa:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    95ae:	e06b      	b.n	9688 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    95b0:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    95b4:	2924      	cmp	r1, #36	; 0x24
    95b6:	d01c      	beq.n	95f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcae>
    95b8:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    95bc:	2924      	cmp	r1, #36	; 0x24
    95be:	d018      	beq.n	95f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcae>
    95c0:	f05f 0300 	movs.w	r3, #0
    95c4:	f200 2276 	addw	r2, r0, #630	; 0x276
    95c8:	f500 718d 	add.w	r1, r0, #282	; 0x11a
    95cc:	f005 fc3e 	bl	ee4c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    95d0:	6860      	ldr	r0, [r4, #4]
    95d2:	f880 511a 	strb.w	r5, [r0, #282]	; 0x11a
    95d6:	2100      	movs	r1, #0
    95d8:	2014      	movs	r0, #20
    95da:	f000 f859 	bl	9690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    95de:	6861      	ldr	r1, [r4, #4]
    95e0:	f101 0030 	add.w	r0, r1, #48	; 0x30
    95e4:	8bc2      	ldrh	r2, [r0, #30]
    95e6:	f8a1 210e 	strh.w	r2, [r1, #270]	; 0x10e
    95ea:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    95ec:	f8a1 0110 	strh.w	r0, [r1, #272]	; 0x110
    95f0:	e04a      	b.n	9688 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    95f2:	2301      	movs	r3, #1
    95f4:	e7e6      	b.n	95c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc80>
    95f6:	f890 1125 	ldrb.w	r1, [r0, #293]	; 0x125
    95fa:	f88d 1000 	strb.w	r1, [sp]
    95fe:	9900      	ldr	r1, [sp, #0]
    9600:	9100      	str	r1, [sp, #0]
    9602:	f89d 1000 	ldrb.w	r1, [sp]
    9606:	bb31      	cbnz	r1, 9656 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd12>
    9608:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    960c:	2301      	movs	r3, #1
    960e:	210b      	movs	r1, #11
    9610:	3078      	adds	r0, #120	; 0x78
    9612:	f004 ff5c 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9616:	b9f0      	cbnz	r0, 9656 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd12>
    9618:	6860      	ldr	r0, [r4, #4]
    961a:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    961e:	f006 fc08 	bl	fe32 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9622:	4605      	mov	r5, r0
    9624:	6860      	ldr	r0, [r4, #4]
    9626:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    962a:	f006 fc02 	bl	fe32 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    962e:	4606      	mov	r6, r0
    9630:	6860      	ldr	r0, [r4, #4]
    9632:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    9636:	4628      	mov	r0, r5
    9638:	e000      	b.n	963c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf8>
    963a:	e020      	b.n	967e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    963c:	f006 fc04 	bl	fe48 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9640:	b150      	cbz	r0, 9658 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>
    9642:	6860      	ldr	r0, [r4, #4]
    9644:	f890 1127 	ldrb.w	r1, [r0, #295]	; 0x127
    9648:	4630      	mov	r0, r6
    964a:	f006 fbfd 	bl	fe48 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    964e:	b118      	cbz	r0, 9658 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>
    9650:	2000      	movs	r0, #0
    9652:	f000 f929 	bl	98a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    9656:	e011      	b.n	967c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    9658:	6860      	ldr	r0, [r4, #4]
    965a:	2301      	movs	r3, #1
    965c:	2103      	movs	r1, #3
    965e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9662:	3078      	adds	r0, #120	; 0x78
    9664:	f004 ff33 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9668:	b940      	cbnz	r0, 967c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    966a:	6860      	ldr	r0, [r4, #4]
    966c:	2301      	movs	r3, #1
    966e:	2102      	movs	r1, #2
    9670:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9674:	3078      	adds	r0, #120	; 0x78
    9676:	f004 ff2a 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    967a:	b108      	cbz	r0, 9680 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3c>
    967c:	2000      	movs	r0, #0
    967e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9680:	2100      	movs	r1, #0
    9682:	2016      	movs	r0, #22
    9684:	f000 f804 	bl	9690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9688:	2001      	movs	r0, #1
    968a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    968c:	20000174 	.word	0x20000174
    9690:	b570      	push	{r4, r5, r6, lr}
    9692:	4c0d      	ldr	r4, [pc, #52]	; (96c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd84>)
    9694:	4606      	mov	r6, r0
    9696:	460d      	mov	r5, r1
    9698:	6860      	ldr	r0, [r4, #4]
    969a:	3078      	adds	r0, #120	; 0x78
    969c:	f006 fbc1 	bl	fe22 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    96a0:	b120      	cbz	r0, 96ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>
    96a2:	f640 2184 	movw	r1, #2692	; 0xa84
    96a6:	2031      	movs	r0, #49	; 0x31
    96a8:	f7fb f9c8 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96ac:	6862      	ldr	r2, [r4, #4]
    96ae:	2000      	movs	r0, #0
    96b0:	f882 610c 	strb.w	r6, [r2, #268]	; 0x10c
    96b4:	b115      	cbz	r5, 96bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    96b6:	f8a2 00c0 	strh.w	r0, [r2, #192]	; 0xc0
    96ba:	bd70      	pop	{r4, r5, r6, pc}
    96bc:	f822 0fba 	strh.w	r0, [r2, #186]!
    96c0:	2001      	movs	r0, #1
    96c2:	7110      	strb	r0, [r2, #4]
    96c4:	bd70      	pop	{r4, r5, r6, pc}
    96c6:	0000      	.short	0x0000
    96c8:	20000174 	.word	0x20000174
    96cc:	b538      	push	{r3, r4, r5, lr}
    96ce:	4c1f      	ldr	r4, [pc, #124]	; (974c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe08>)
    96d0:	2500      	movs	r5, #0
    96d2:	6860      	ldr	r0, [r4, #4]
    96d4:	f890 1258 	ldrb.w	r1, [r0, #600]	; 0x258
    96d8:	2901      	cmp	r1, #1
    96da:	d00a      	beq.n	96f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    96dc:	2902      	cmp	r1, #2
    96de:	d133      	bne.n	9748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe04>
    96e0:	f890 10c4 	ldrb.w	r1, [r0, #196]	; 0xc4
    96e4:	b1d9      	cbz	r1, 971e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdda>
    96e6:	2106      	movs	r1, #6
    96e8:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    96ec:	2101      	movs	r1, #1
    96ee:	2002      	movs	r0, #2
    96f0:	e025      	b.n	973e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfa>
    96f2:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    96f6:	f88d 1000 	strb.w	r1, [sp]
    96fa:	9900      	ldr	r1, [sp, #0]
    96fc:	9100      	str	r1, [sp, #0]
    96fe:	f89d 1000 	ldrb.w	r1, [sp]
    9702:	2900      	cmp	r1, #0
    9704:	d120      	bne.n	9748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe04>
    9706:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
    970a:	f500 71f0 	add.w	r1, r0, #480	; 0x1e0
    970e:	2200      	movs	r2, #0
    9710:	f200 2059 	addw	r0, r0, #601	; 0x259
    9714:	f004 fe93 	bl	e43e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9718:	2101      	movs	r1, #1
    971a:	2005      	movs	r0, #5
    971c:	e00f      	b.n	973e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfa>
    971e:	2203      	movs	r2, #3
    9720:	2106      	movs	r1, #6
    9722:	f880 210b 	strb.w	r2, [r0, #267]	; 0x10b
    9726:	f880 110a 	strb.w	r1, [r0, #266]	; 0x10a
    972a:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
    972e:	0880      	lsrs	r0, r0, #2
    9730:	f010 0f01 	tst.w	r0, #1
    9734:	d001      	beq.n	973a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf6>
    9736:	2011      	movs	r0, #17
    9738:	e000      	b.n	973c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf8>
    973a:	200d      	movs	r0, #13
    973c:	2101      	movs	r1, #1
    973e:	f7ff ffa7 	bl	9690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9742:	6860      	ldr	r0, [r4, #4]
    9744:	f880 5258 	strb.w	r5, [r0, #600]	; 0x258
    9748:	bd38      	pop	{r3, r4, r5, pc}
    974a:	0000      	.short	0x0000
    974c:	20000174 	.word	0x20000174
    9750:	b570      	push	{r4, r5, r6, lr}
    9752:	4b2b      	ldr	r3, [pc, #172]	; (9800 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xebc>)
    9754:	4602      	mov	r2, r0
    9756:	8858      	ldrh	r0, [r3, #2]
    9758:	4310      	orrs	r0, r2
    975a:	8058      	strh	r0, [r3, #2]
    975c:	f103 0010 	add.w	r0, r3, #16
    9760:	2a40      	cmp	r2, #64	; 0x40
    9762:	6840      	ldr	r0, [r0, #4]
    9764:	d00d      	beq.n	9782 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3e>
    9766:	0796      	lsls	r6, r2, #30
    9768:	f04f 0500 	mov.w	r5, #0
    976c:	f04f 0401 	mov.w	r4, #1
    9770:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    9774:	d50c      	bpl.n	9790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    9776:	b14e      	cbz	r6, 978c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe48>
    9778:	f640 41c9 	movw	r1, #3273	; 0xcc9
    977c:	2031      	movs	r0, #49	; 0x31
    977e:	f7fb f95d 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9786:	2104      	movs	r1, #4
    9788:	f7fe bcba 	b.w	8100 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    978c:	6099      	str	r1, [r3, #8]
    978e:	e01c      	b.n	97ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe86>
    9790:	b1c6      	cbz	r6, 97c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    9792:	60d9      	str	r1, [r3, #12]
    9794:	78c9      	ldrb	r1, [r1, #3]
    9796:	2906      	cmp	r1, #6
    9798:	d002      	beq.n	97a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5c>
    979a:	290b      	cmp	r1, #11
    979c:	d112      	bne.n	97c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    979e:	e009      	b.n	97b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe70>
    97a0:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    97a4:	2917      	cmp	r1, #23
    97a6:	d10d      	bne.n	97c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    97a8:	2100      	movs	r1, #0
    97aa:	e9c0 1138 	strd	r1, r1, [r0, #224]	; 0xe0
    97ae:	f880 408b 	strb.w	r4, [r0, #139]	; 0x8b
    97b2:	e007      	b.n	97c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    97b4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    97b8:	2911      	cmp	r1, #17
    97ba:	d103      	bne.n	97c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    97bc:	f880 508b 	strb.w	r5, [r0, #139]	; 0x8b
    97c0:	f880 40c4 	strb.w	r4, [r0, #196]	; 0xc4
    97c4:	0791      	lsls	r1, r2, #30
    97c6:	d516      	bpl.n	97f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    97c8:	6899      	ldr	r1, [r3, #8]
    97ca:	78c9      	ldrb	r1, [r1, #3]
    97cc:	2905      	cmp	r1, #5
    97ce:	d002      	beq.n	97d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe92>
    97d0:	290b      	cmp	r1, #11
    97d2:	d110      	bne.n	97f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    97d4:	e009      	b.n	97ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea6>
    97d6:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    97da:	2915      	cmp	r1, #21
    97dc:	d10b      	bne.n	97f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    97de:	2100      	movs	r1, #0
    97e0:	e9c0 113a 	strd	r1, r1, [r0, #232]	; 0xe8
    97e4:	f880 408c 	strb.w	r4, [r0, #140]	; 0x8c
    97e8:	e005      	b.n	97f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    97ea:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    97ee:	2910      	cmp	r1, #16
    97f0:	d101      	bne.n	97f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    97f2:	f880 508c 	strb.w	r5, [r0, #140]	; 0x8c
    97f6:	0690      	lsls	r0, r2, #26
    97f8:	d501      	bpl.n	97fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
    97fa:	2008      	movs	r0, #8
    97fc:	7058      	strb	r0, [r3, #1]
    97fe:	bd70      	pop	{r4, r5, r6, pc}
    9800:	20000164 	.word	0x20000164
    9804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9808:	4c26      	ldr	r4, [pc, #152]	; (98a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>)
    980a:	2501      	movs	r5, #1
    980c:	6862      	ldr	r2, [r4, #4]
    980e:	f892 0276 	ldrb.w	r0, [r2, #630]	; 0x276
    9812:	b108      	cbz	r0, 9818 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed4>
    9814:	2701      	movs	r7, #1
    9816:	e000      	b.n	981a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed6>
    9818:	2700      	movs	r7, #0
    981a:	f892 1277 	ldrb.w	r1, [r2, #631]	; 0x277
    981e:	b109      	cbz	r1, 9824 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee0>
    9820:	2601      	movs	r6, #1
    9822:	e000      	b.n	9826 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee2>
    9824:	2600      	movs	r6, #0
    9826:	b90f      	cbnz	r7, 982c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee8>
    9828:	f892 006e 	ldrb.w	r0, [r2, #110]	; 0x6e
    982c:	b90e      	cbnz	r6, 9832 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeee>
    982e:	f892 106f 	ldrb.w	r1, [r2, #111]	; 0x6f
    9832:	f102 0366 	add.w	r3, r2, #102	; 0x66
    9836:	7218      	strb	r0, [r3, #8]
    9838:	7259      	strb	r1, [r3, #9]
    983a:	20ff      	movs	r0, #255	; 0xff
    983c:	7298      	strb	r0, [r3, #10]
    983e:	f892 0124 	ldrb.w	r0, [r2, #292]	; 0x124
    9842:	2801      	cmp	r0, #1
    9844:	d001      	beq.n	984a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf06>
    9846:	b907      	cbnz	r7, 984a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf06>
    9848:	b116      	cbz	r6, 9850 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0c>
    984a:	2000      	movs	r0, #0
    984c:	f000 f82c 	bl	98a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    9850:	6860      	ldr	r0, [r4, #4]
    9852:	3030      	adds	r0, #48	; 0x30
    9854:	f005 fb6b 	bl	ef2e <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9858:	4607      	mov	r7, r0
    985a:	2105      	movs	r1, #5
    985c:	6860      	ldr	r0, [r4, #4]
    985e:	f7fe fc4f 	bl	8100 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9862:	6860      	ldr	r0, [r4, #4]
    9864:	3030      	adds	r0, #48	; 0x30
    9866:	f005 fb62 	bl	ef2e <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    986a:	4606      	mov	r6, r0
    986c:	42b7      	cmp	r7, r6
    986e:	d20a      	bcs.n	9886 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf42>
    9870:	f7f8 fc3c 	bl	20ec <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    9874:	4601      	mov	r1, r0
    9876:	1bf0      	subs	r0, r6, r7
    9878:	2865      	cmp	r0, #101	; 0x65
    987a:	d200      	bcs.n	987e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf3a>
    987c:	2065      	movs	r0, #101	; 0x65
    987e:	f7f8 fb57 	bl	1f30 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    9882:	b100      	cbz	r0, 9886 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf42>
    9884:	2500      	movs	r5, #0
    9886:	6860      	ldr	r0, [r4, #4]
    9888:	f005 fafb 	bl	ee82 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    988c:	b138      	cbz	r0, 989e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf5a>
    988e:	6863      	ldr	r3, [r4, #4]
    9890:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    9894:	8818      	ldrh	r0, [r3, #0]
    9896:	f103 0130 	add.w	r1, r3, #48	; 0x30
    989a:	f005 faaf 	bl	edfc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    989e:	4628      	mov	r0, r5
    98a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98a4:	20000174 	.word	0x20000174
    98a8:	b510      	push	{r4, lr}
    98aa:	4c11      	ldr	r4, [pc, #68]	; (98f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfac>)
    98ac:	6861      	ldr	r1, [r4, #4]
    98ae:	880a      	ldrh	r2, [r1, #0]
    98b0:	f8a1 2188 	strh.w	r2, [r1, #392]	; 0x188
    98b4:	f881 0186 	strb.w	r0, [r1, #390]	; 0x186
    98b8:	f891 006e 	ldrb.w	r0, [r1, #110]	; 0x6e
    98bc:	f006 fab9 	bl	fe32 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    98c0:	6861      	ldr	r1, [r4, #4]
    98c2:	f881 018a 	strb.w	r0, [r1, #394]	; 0x18a
    98c6:	f891 006f 	ldrb.w	r0, [r1, #111]	; 0x6f
    98ca:	f006 fab2 	bl	fe32 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    98ce:	6861      	ldr	r1, [r4, #4]
    98d0:	2211      	movs	r2, #17
    98d2:	f881 018b 	strb.w	r0, [r1, #395]	; 0x18b
    98d6:	f501 70be 	add.w	r0, r1, #380	; 0x17c
    98da:	f7fd f9b5 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    98de:	6861      	ldr	r1, [r4, #4]
    98e0:	2000      	movs	r0, #0
    98e2:	f881 0124 	strb.w	r0, [r1, #292]	; 0x124
    98e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    98ea:	f7fd ba7f 	b.w	6dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    98ee:	0000      	.short	0x0000
    98f0:	20000174 	.word	0x20000174
    98f4:	b570      	push	{r4, r5, r6, lr}
    98f6:	4d0f      	ldr	r5, [pc, #60]	; (9934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>)
    98f8:	686c      	ldr	r4, [r5, #4]
    98fa:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    98fe:	2920      	cmp	r1, #32
    9900:	d002      	beq.n	9908 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc4>
    9902:	2927      	cmp	r1, #39	; 0x27
    9904:	d003      	beq.n	990e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfca>
    9906:	e011      	b.n	992c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfe8>
    9908:	f7ff ffce 	bl	98a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    990c:	e008      	b.n	9920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfdc>
    990e:	f894 2086 	ldrb.w	r2, [r4, #134]	; 0x86
    9912:	f104 0078 	add.w	r0, r4, #120	; 0x78
    9916:	2301      	movs	r3, #1
    9918:	210b      	movs	r1, #11
    991a:	f004 fdd8 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    991e:	b138      	cbz	r0, 9930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfec>
    9920:	6869      	ldr	r1, [r5, #4]
    9922:	2000      	movs	r0, #0
    9924:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9928:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    992c:	2000      	movs	r0, #0
    992e:	bd70      	pop	{r4, r5, r6, pc}
    9930:	202a      	movs	r0, #42	; 0x2a
    9932:	e7e9      	b.n	9908 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc4>
    9934:	20000174 	.word	0x20000174
    9938:	b570      	push	{r4, r5, r6, lr}
    993a:	4c17      	ldr	r4, [pc, #92]	; (9998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1054>)
    993c:	2301      	movs	r3, #1
    993e:	2100      	movs	r1, #0
    9940:	6860      	ldr	r0, [r4, #4]
    9942:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9946:	3078      	adds	r0, #120	; 0x78
    9948:	f004 fdc1 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    994c:	b1b0      	cbz	r0, 997c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1038>
    994e:	f1a4 0510 	sub.w	r5, r4, #16
    9952:	68e8      	ldr	r0, [r5, #12]
    9954:	f005 f814 	bl	e980 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    9958:	6861      	ldr	r1, [r4, #4]
    995a:	f8a1 0274 	strh.w	r0, [r1, #628]	; 0x274
    995e:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    9962:	f006 fa7f 	bl	fe64 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9966:	b158      	cbz	r0, 9980 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x103c>
    9968:	6861      	ldr	r1, [r4, #4]
    996a:	2028      	movs	r0, #40	; 0x28
    996c:	2208      	movs	r2, #8
    996e:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    9972:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    9976:	f7fd f967 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    997a:	e00b      	b.n	9994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1050>
    997c:	2001      	movs	r0, #1
    997e:	bd70      	pop	{r4, r5, r6, pc}
    9980:	6861      	ldr	r1, [r4, #4]
    9982:	68e8      	ldr	r0, [r5, #12]
    9984:	f201 2176 	addw	r1, r1, #630	; 0x276
    9988:	f004 fff5 	bl	e976 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    998c:	6861      	ldr	r1, [r4, #4]
    998e:	200b      	movs	r0, #11
    9990:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9994:	2000      	movs	r0, #0
    9996:	bd70      	pop	{r4, r5, r6, pc}
    9998:	20000174 	.word	0x20000174
    999c:	b570      	push	{r4, r5, r6, lr}
    999e:	4d2b      	ldr	r5, [pc, #172]	; (9a4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1108>)
    99a0:	2301      	movs	r3, #1
    99a2:	2100      	movs	r1, #0
    99a4:	6868      	ldr	r0, [r5, #4]
    99a6:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    99aa:	3078      	adds	r0, #120	; 0x78
    99ac:	f004 fd8f 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99b0:	b1d8      	cbz	r0, 99ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a6>
    99b2:	f1a5 0410 	sub.w	r4, r5, #16
    99b6:	2100      	movs	r1, #0
    99b8:	68e0      	ldr	r0, [r4, #12]
    99ba:	f004 ffb4 	bl	e926 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    99be:	b1b0      	cbz	r0, 99ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10aa>
    99c0:	68e0      	ldr	r0, [r4, #12]
    99c2:	6869      	ldr	r1, [r5, #4]
    99c4:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    99c8:	f8a1 0274 	strh.w	r0, [r1, #628]	; 0x274
    99cc:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    99d0:	f006 fa48 	bl	fe64 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    99d4:	b178      	cbz	r0, 99f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b2>
    99d6:	6869      	ldr	r1, [r5, #4]
    99d8:	2028      	movs	r0, #40	; 0x28
    99da:	2208      	movs	r2, #8
    99dc:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    99e0:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    99e4:	f7fd f930 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    99e8:	e02e      	b.n	9a48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1104>
    99ea:	2001      	movs	r0, #1
    99ec:	bd70      	pop	{r4, r5, r6, pc}
    99ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    99f2:	f000 b8f5 	b.w	9be0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    99f6:	68e0      	ldr	r0, [r4, #12]
    99f8:	f004 ffc5 	bl	e986 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    99fc:	f004 fd4a 	bl	e494 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    9a00:	4606      	mov	r6, r0
    9a02:	6868      	ldr	r0, [r5, #4]
    9a04:	4631      	mov	r1, r6
    9a06:	f8c0 627c 	str.w	r6, [r0, #636]	; 0x27c
    9a0a:	68e0      	ldr	r0, [r4, #12]
    9a0c:	7900      	ldrb	r0, [r0, #4]
    9a0e:	f004 feda 	bl	e7c6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    9a12:	6869      	ldr	r1, [r5, #4]
    9a14:	f8a1 0276 	strh.w	r0, [r1, #630]	; 0x276
    9a18:	68e0      	ldr	r0, [r4, #12]
    9a1a:	4631      	mov	r1, r6
    9a1c:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    9a20:	f004 fecd 	bl	e7be <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    9a24:	6869      	ldr	r1, [r5, #4]
    9a26:	f8c1 0278 	str.w	r0, [r1, #632]	; 0x278
    9a2a:	68e0      	ldr	r0, [r4, #12]
    9a2c:	f004 ffae 	bl	e98c <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    9a30:	6869      	ldr	r1, [r5, #4]
    9a32:	f8a1 0280 	strh.w	r0, [r1, #640]	; 0x280
    9a36:	68e0      	ldr	r0, [r4, #12]
    9a38:	f004 ffab 	bl	e992 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    9a3c:	6869      	ldr	r1, [r5, #4]
    9a3e:	f8a1 0282 	strh.w	r0, [r1, #642]	; 0x282
    9a42:	200d      	movs	r0, #13
    9a44:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9a48:	2000      	movs	r0, #0
    9a4a:	bd70      	pop	{r4, r5, r6, pc}
    9a4c:	20000174 	.word	0x20000174
    9a50:	b538      	push	{r3, r4, r5, lr}
    9a52:	4c2c      	ldr	r4, [pc, #176]	; (9b04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>)
    9a54:	2301      	movs	r3, #1
    9a56:	2100      	movs	r1, #0
    9a58:	6860      	ldr	r0, [r4, #4]
    9a5a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9a5e:	3078      	adds	r0, #120	; 0x78
    9a60:	f004 fd35 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a64:	b970      	cbnz	r0, 9a84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1140>
    9a66:	6860      	ldr	r0, [r4, #4]
    9a68:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9a6c:	2a12      	cmp	r2, #18
    9a6e:	d009      	beq.n	9a84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1140>
    9a70:	2301      	movs	r3, #1
    9a72:	2105      	movs	r1, #5
    9a74:	3078      	adds	r0, #120	; 0x78
    9a76:	f004 fd2a 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a7a:	b108      	cbz	r0, 9a80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x113c>
    9a7c:	2008      	movs	r0, #8
    9a7e:	bd38      	pop	{r3, r4, r5, pc}
    9a80:	2001      	movs	r0, #1
    9a82:	bd38      	pop	{r3, r4, r5, pc}
    9a84:	6860      	ldr	r0, [r4, #4]
    9a86:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
    9a8a:	b908      	cbnz	r0, 9a90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x114c>
    9a8c:	f7ff f85c 	bl	8b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9a90:	4d1c      	ldr	r5, [pc, #112]	; (9b04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>)
    9a92:	6861      	ldr	r1, [r4, #4]
    9a94:	3d10      	subs	r5, #16
    9a96:	f501 71f0 	add.w	r1, r1, #480	; 0x1e0
    9a9a:	68e8      	ldr	r0, [r5, #12]
    9a9c:	f004 ff88 	bl	e9b0 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    9aa0:	6861      	ldr	r1, [r4, #4]
    9aa2:	68e8      	ldr	r0, [r5, #12]
    9aa4:	f501 7180 	add.w	r1, r1, #256	; 0x100
    9aa8:	f004 ff79 	bl	e99e <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    9aac:	6861      	ldr	r1, [r4, #4]
    9aae:	f891 028c 	ldrb.w	r0, [r1, #652]	; 0x28c
    9ab2:	f88d 0000 	strb.w	r0, [sp]
    9ab6:	9800      	ldr	r0, [sp, #0]
    9ab8:	9000      	str	r0, [sp, #0]
    9aba:	f89d 0000 	ldrb.w	r0, [sp]
    9abe:	b120      	cbz	r0, 9aca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1186>
    9ac0:	f240 21a2 	movw	r1, #674	; 0x2a2
    9ac4:	2031      	movs	r0, #49	; 0x31
    9ac6:	f7fa ffb9 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9aca:	8808      	ldrh	r0, [r1, #0]
    9acc:	f8a1 028e 	strh.w	r0, [r1, #654]	; 0x28e
    9ad0:	f501 7124 	add.w	r1, r1, #656	; 0x290
    9ad4:	68e8      	ldr	r0, [r5, #12]
    9ad6:	f004 ff66 	bl	e9a6 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    9ada:	6861      	ldr	r1, [r4, #4]
    9adc:	68e8      	ldr	r0, [r5, #12]
    9ade:	f501 7126 	add.w	r1, r1, #664	; 0x298
    9ae2:	f004 ff59 	bl	e998 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    9ae6:	6861      	ldr	r1, [r4, #4]
    9ae8:	2207      	movs	r2, #7
    9aea:	f501 7021 	add.w	r0, r1, #644	; 0x284
    9aee:	f7fd f8ab 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9af2:	6861      	ldr	r1, [r4, #4]
    9af4:	2014      	movs	r0, #20
    9af6:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9afa:	f7fd f977 	bl	6dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9afe:	2000      	movs	r0, #0
    9b00:	bd38      	pop	{r3, r4, r5, pc}
    9b02:	0000      	.short	0x0000
    9b04:	20000174 	.word	0x20000174
    9b08:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9b0a:	4c13      	ldr	r4, [pc, #76]	; (9b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>)
    9b0c:	6860      	ldr	r0, [r4, #4]
    9b0e:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    9b12:	07c0      	lsls	r0, r0, #31
    9b14:	d001      	beq.n	9b1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11d6>
    9b16:	2001      	movs	r0, #1
    9b18:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9b1a:	480f      	ldr	r0, [pc, #60]	; (9b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>)
    9b1c:	4669      	mov	r1, sp
    9b1e:	3810      	subs	r0, #16
    9b20:	68c0      	ldr	r0, [r0, #12]
    9b22:	f004 ff4b 	bl	e9bc <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    9b26:	f001 fad9 	bl	b0dc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9b2a:	f644 122f 	movw	r2, #18735	; 0x492f
    9b2e:	4010      	ands	r0, r2
    9b30:	e9dd 5200 	ldrd	r5, r2, [sp]
    9b34:	6863      	ldr	r3, [r4, #4]
    9b36:	4005      	ands	r5, r0
    9b38:	f001 0106 	and.w	r1, r1, #6
    9b3c:	f843 5fd4 	str.w	r5, [r3, #212]!
    9b40:	400a      	ands	r2, r1
    9b42:	605a      	str	r2, [r3, #4]
    9b44:	f7ff f800 	bl	8b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9b48:	6860      	ldr	r0, [r4, #4]
    9b4a:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    9b4e:	f041 0101 	orr.w	r1, r1, #1
    9b52:	7001      	strb	r1, [r0, #0]
    9b54:	2000      	movs	r0, #0
    9b56:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9b58:	20000174 	.word	0x20000174
    9b5c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9b60:	4d1e      	ldr	r5, [pc, #120]	; (9bdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1298>)
    9b62:	2301      	movs	r3, #1
    9b64:	2107      	movs	r1, #7
    9b66:	6868      	ldr	r0, [r5, #4]
    9b68:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9b6c:	3078      	adds	r0, #120	; 0x78
    9b6e:	f004 fcae 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b72:	b380      	cbz	r0, 9bd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1292>
    9b74:	f1a5 0010 	sub.w	r0, r5, #16
    9b78:	4669      	mov	r1, sp
    9b7a:	68c0      	ldr	r0, [r0, #12]
    9b7c:	f004 ff23 	bl	e9c6 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    9b80:	686e      	ldr	r6, [r5, #4]
    9b82:	f89d 7004 	ldrb.w	r7, [sp, #4]
    9b86:	36d4      	adds	r6, #212	; 0xd4
    9b88:	9c00      	ldr	r4, [sp, #0]
    9b8a:	f001 faa7 	bl	b0dc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9b8e:	4004      	ands	r4, r0
    9b90:	f644 102f 	movw	r0, #18735	; 0x492f
    9b94:	4004      	ands	r4, r0
    9b96:	400f      	ands	r7, r1
    9b98:	f007 0006 	and.w	r0, r7, #6
    9b9c:	6034      	str	r4, [r6, #0]
    9b9e:	6070      	str	r0, [r6, #4]
    9ba0:	6869      	ldr	r1, [r5, #4]
    9ba2:	2000      	movs	r0, #0
    9ba4:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    9ba8:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9bac:	880a      	ldrh	r2, [r1, #0]
    9bae:	f8a1 2198 	strh.w	r2, [r1, #408]	; 0x198
    9bb2:	f881 0196 	strb.w	r0, [r1, #406]	; 0x196
    9bb6:	9a00      	ldr	r2, [sp, #0]
    9bb8:	f8c1 219a 	str.w	r2, [r1, #410]	; 0x19a
    9bbc:	9a01      	ldr	r2, [sp, #4]
    9bbe:	f8c1 219e 	str.w	r2, [r1, #414]	; 0x19e
    9bc2:	f501 70c6 	add.w	r0, r1, #396	; 0x18c
    9bc6:	2205      	movs	r2, #5
    9bc8:	f7fd f83e 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9bcc:	f7fd f90e 	bl	6dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9bd0:	2000      	movs	r0, #0
    9bd2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9bd6:	e7ff      	b.n	9bd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1294>
    9bd8:	2001      	movs	r0, #1
    9bda:	e7fa      	b.n	9bd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128e>
    9bdc:	20000174 	.word	0x20000174
    9be0:	480b      	ldr	r0, [pc, #44]	; (9c10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12cc>)
    9be2:	b510      	push	{r4, lr}
    9be4:	6840      	ldr	r0, [r0, #4]
    9be6:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    9bea:	070a      	lsls	r2, r1, #28
    9bec:	d501      	bpl.n	9bf2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ae>
    9bee:	2001      	movs	r0, #1
    9bf0:	bd10      	pop	{r4, pc}
    9bf2:	f041 0108 	orr.w	r1, r1, #8
    9bf6:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    9bfa:	4905      	ldr	r1, [pc, #20]	; (9c10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12cc>)
    9bfc:	3910      	subs	r1, #16
    9bfe:	68c9      	ldr	r1, [r1, #12]
    9c00:	78c9      	ldrb	r1, [r1, #3]
    9c02:	f880 1108 	strb.w	r1, [r0, #264]	; 0x108
    9c06:	f7fe ff9f 	bl	8b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9c0a:	2000      	movs	r0, #0
    9c0c:	bd10      	pop	{r4, pc}
    9c0e:	0000      	.short	0x0000
    9c10:	20000174 	.word	0x20000174
    9c14:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9c18:	4d36      	ldr	r5, [pc, #216]	; (9cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b0>)
    9c1a:	6868      	ldr	r0, [r5, #4]
    9c1c:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    9c20:	f010 0f30 	tst.w	r0, #48	; 0x30
    9c24:	d002      	beq.n	9c2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e8>
    9c26:	2001      	movs	r0, #1
    9c28:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9c2c:	4c31      	ldr	r4, [pc, #196]	; (9cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b0>)
    9c2e:	3c10      	subs	r4, #16
    9c30:	68e0      	ldr	r0, [r4, #12]
    9c32:	f004 fee3 	bl	e9fc <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9c36:	b328      	cbz	r0, 9c84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1340>
    9c38:	68e0      	ldr	r0, [r4, #12]
    9c3a:	f004 fed1 	bl	e9e0 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9c3e:	4607      	mov	r7, r0
    9c40:	68e0      	ldr	r0, [r4, #12]
    9c42:	f004 fed1 	bl	e9e8 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9c46:	4680      	mov	r8, r0
    9c48:	68e0      	ldr	r0, [r4, #12]
    9c4a:	f004 fec7 	bl	e9dc <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9c4e:	4606      	mov	r6, r0
    9c50:	68e0      	ldr	r0, [r4, #12]
    9c52:	f004 fec7 	bl	e9e4 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9c56:	4601      	mov	r1, r0
    9c58:	9700      	str	r7, [sp, #0]
    9c5a:	6868      	ldr	r0, [r5, #4]
    9c5c:	4643      	mov	r3, r8
    9c5e:	4632      	mov	r2, r6
    9c60:	3030      	adds	r0, #48	; 0x30
    9c62:	f005 f99e 	bl	efa2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9c66:	78a0      	ldrb	r0, [r4, #2]
    9c68:	0781      	lsls	r1, r0, #30
    9c6a:	f04f 0001 	mov.w	r0, #1
    9c6e:	d503      	bpl.n	9c78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1334>
    9c70:	68a1      	ldr	r1, [r4, #8]
    9c72:	78c9      	ldrb	r1, [r1, #3]
    9c74:	2914      	cmp	r1, #20
    9c76:	d009      	beq.n	9c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1348>
    9c78:	6869      	ldr	r1, [r5, #4]
    9c7a:	f891 1085 	ldrb.w	r1, [r1, #133]	; 0x85
    9c7e:	291c      	cmp	r1, #28
    9c80:	d004      	beq.n	9c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1348>
    9c82:	e006      	b.n	9c92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134e>
    9c84:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9c88:	f7ff bfaa 	b.w	9be0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    9c8c:	6869      	ldr	r1, [r5, #4]
    9c8e:	f881 0064 	strb.w	r0, [r1, #100]	; 0x64
    9c92:	686b      	ldr	r3, [r5, #4]
    9c94:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    9c98:	2801      	cmp	r0, #1
    9c9a:	d011      	beq.n	9cc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137c>
    9c9c:	f893 011b 	ldrb.w	r0, [r3, #283]	; 0x11b
    9ca0:	f88d 0004 	strb.w	r0, [sp, #4]
    9ca4:	9801      	ldr	r0, [sp, #4]
    9ca6:	9001      	str	r0, [sp, #4]
    9ca8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9cac:	b940      	cbnz	r0, 9cc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137c>
    9cae:	f893 011a 	ldrb.w	r0, [r3, #282]	; 0x11a
    9cb2:	f88d 0000 	strb.w	r0, [sp]
    9cb6:	9800      	ldr	r0, [sp, #0]
    9cb8:	9000      	str	r0, [sp, #0]
    9cba:	f89d 0000 	ldrb.w	r0, [sp]
    9cbe:	b148      	cbz	r0, 9cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1390>
    9cc0:	f813 0f87 	ldrb.w	r0, [r3, #135]!
    9cc4:	f040 0010 	orr.w	r0, r0, #16
    9cc8:	f883 0000 	strb.w	r0, [r3]
    9ccc:	f7fe ff3c 	bl	8b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9cd0:	2000      	movs	r0, #0
    9cd2:	e7a9      	b.n	9c28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e4>
    9cd4:	f893 0087 	ldrb.w	r0, [r3, #135]	; 0x87
    9cd8:	f503 72ad 	add.w	r2, r3, #346	; 0x15a
    9cdc:	f040 0020 	orr.w	r0, r0, #32
    9ce0:	f883 0087 	strb.w	r0, [r3, #135]	; 0x87
    9ce4:	f103 0130 	add.w	r1, r3, #48	; 0x30
    9ce8:	8818      	ldrh	r0, [r3, #0]
    9cea:	f005 f961 	bl	efb0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    9cee:	f7fd f87d 	bl	6dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9cf2:	e7eb      	b.n	9ccc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1388>
    9cf4:	20000174 	.word	0x20000174
    9cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9cfc:	4c1b      	ldr	r4, [pc, #108]	; (9d6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>)
    9cfe:	2301      	movs	r3, #1
    9d00:	210a      	movs	r1, #10
    9d02:	6860      	ldr	r0, [r4, #4]
    9d04:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9d08:	3078      	adds	r0, #120	; 0x78
    9d0a:	f004 fbe0 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d0e:	b358      	cbz	r0, 9d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
    9d10:	f1a4 0510 	sub.w	r5, r4, #16
    9d14:	68e8      	ldr	r0, [r5, #12]
    9d16:	f004 fe71 	bl	e9fc <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9d1a:	b1d0      	cbz	r0, 9d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x140e>
    9d1c:	68e8      	ldr	r0, [r5, #12]
    9d1e:	f004 fe5f 	bl	e9e0 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9d22:	4680      	mov	r8, r0
    9d24:	68e8      	ldr	r0, [r5, #12]
    9d26:	f004 fe5f 	bl	e9e8 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9d2a:	4607      	mov	r7, r0
    9d2c:	68e8      	ldr	r0, [r5, #12]
    9d2e:	f004 fe55 	bl	e9dc <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9d32:	4606      	mov	r6, r0
    9d34:	68e8      	ldr	r0, [r5, #12]
    9d36:	f004 fe55 	bl	e9e4 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9d3a:	4601      	mov	r1, r0
    9d3c:	f8cd 8000 	str.w	r8, [sp]
    9d40:	6860      	ldr	r0, [r4, #4]
    9d42:	463b      	mov	r3, r7
    9d44:	4632      	mov	r2, r6
    9d46:	3030      	adds	r0, #48	; 0x30
    9d48:	f005 f92b 	bl	efa2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9d4c:	6860      	ldr	r0, [r4, #4]
    9d4e:	f005 f898 	bl	ee82 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9d52:	6861      	ldr	r1, [r4, #4]
    9d54:	2000      	movs	r0, #0
    9d56:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    9d5a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9d5e:	f7ff f8d9 	bl	8f14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    9d62:	2000      	movs	r0, #0
    9d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9d68:	2001      	movs	r0, #1
    9d6a:	e7fb      	b.n	9d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1420>
    9d6c:	20000174 	.word	0x20000174
    9d70:	b510      	push	{r4, lr}
    9d72:	4c09      	ldr	r4, [pc, #36]	; (9d98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1454>)
    9d74:	6860      	ldr	r0, [r4, #4]
    9d76:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    9d7a:	0740      	lsls	r0, r0, #29
    9d7c:	d501      	bpl.n	9d82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x143e>
    9d7e:	2001      	movs	r0, #1
    9d80:	bd10      	pop	{r4, pc}
    9d82:	f7fe fee1 	bl	8b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9d86:	6860      	ldr	r0, [r4, #4]
    9d88:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    9d8c:	f041 0104 	orr.w	r1, r1, #4
    9d90:	7001      	strb	r1, [r0, #0]
    9d92:	2000      	movs	r0, #0
    9d94:	bd10      	pop	{r4, pc}
    9d96:	0000      	.short	0x0000
    9d98:	20000174 	.word	0x20000174
    9d9c:	b510      	push	{r4, lr}
    9d9e:	4c0a      	ldr	r4, [pc, #40]	; (9dc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1484>)
    9da0:	2301      	movs	r3, #1
    9da2:	2109      	movs	r1, #9
    9da4:	6860      	ldr	r0, [r4, #4]
    9da6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9daa:	3078      	adds	r0, #120	; 0x78
    9dac:	f004 fb8f 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9db0:	2800      	cmp	r0, #0
    9db2:	d007      	beq.n	9dc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1480>
    9db4:	6860      	ldr	r0, [r4, #4]
    9db6:	2100      	movs	r1, #0
    9db8:	f800 1fb2 	strb.w	r1, [r0, #178]!
    9dbc:	7301      	strb	r1, [r0, #12]
    9dbe:	f800 1c2d 	strb.w	r1, [r0, #-45]
    9dc2:	4608      	mov	r0, r1
    9dc4:	bd10      	pop	{r4, pc}
    9dc6:	0000      	.short	0x0000
    9dc8:	20000174 	.word	0x20000174
    9dcc:	b510      	push	{r4, lr}
    9dce:	4c0f      	ldr	r4, [pc, #60]	; (9e0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>)
    9dd0:	2301      	movs	r3, #1
    9dd2:	2100      	movs	r1, #0
    9dd4:	6860      	ldr	r0, [r4, #4]
    9dd6:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9dda:	3078      	adds	r0, #120	; 0x78
    9ddc:	f004 fb77 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9de0:	b138      	cbz	r0, 9df2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ae>
    9de2:	f7fe feb1 	bl	8b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9de6:	6861      	ldr	r1, [r4, #4]
    9de8:	2010      	movs	r0, #16
    9dea:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9dee:	2000      	movs	r0, #0
    9df0:	bd10      	pop	{r4, pc}
    9df2:	6860      	ldr	r0, [r4, #4]
    9df4:	2301      	movs	r3, #1
    9df6:	2105      	movs	r1, #5
    9df8:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9dfc:	3078      	adds	r0, #120	; 0x78
    9dfe:	f004 fb66 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e02:	b108      	cbz	r0, 9e08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c4>
    9e04:	2008      	movs	r0, #8
    9e06:	bd10      	pop	{r4, pc}
    9e08:	2001      	movs	r0, #1
    9e0a:	bd10      	pop	{r4, pc}
    9e0c:	20000174 	.word	0x20000174
    9e10:	4806      	ldr	r0, [pc, #24]	; (9e2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e8>)
    9e12:	6840      	ldr	r0, [r0, #4]
    9e14:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9e18:	2911      	cmp	r1, #17
    9e1a:	d001      	beq.n	9e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14dc>
    9e1c:	2002      	movs	r0, #2
    9e1e:	4770      	bx	lr
    9e20:	2112      	movs	r1, #18
    9e22:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    9e26:	2000      	movs	r0, #0
    9e28:	4770      	bx	lr
    9e2a:	0000      	.short	0x0000
    9e2c:	20000174 	.word	0x20000174
    9e30:	b538      	push	{r3, r4, r5, lr}
    9e32:	4c36      	ldr	r4, [pc, #216]	; (9f0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    9e34:	2301      	movs	r3, #1
    9e36:	210b      	movs	r1, #11
    9e38:	6860      	ldr	r0, [r4, #4]
    9e3a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9e3e:	3078      	adds	r0, #120	; 0x78
    9e40:	f004 fb45 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e44:	bb80      	cbnz	r0, 9ea8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1564>
    9e46:	6860      	ldr	r0, [r4, #4]
    9e48:	2301      	movs	r3, #1
    9e4a:	2100      	movs	r1, #0
    9e4c:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9e50:	3078      	adds	r0, #120	; 0x78
    9e52:	f004 fb3c 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e56:	b328      	cbz	r0, 9ea4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1560>
    9e58:	6860      	ldr	r0, [r4, #4]
    9e5a:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9e5e:	2824      	cmp	r0, #36	; 0x24
    9e60:	d023      	beq.n	9eaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1566>
    9e62:	f1a4 0510 	sub.w	r5, r4, #16
    9e66:	68e8      	ldr	r0, [r5, #12]
    9e68:	f004 fde4 	bl	ea34 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    9e6c:	b1f8      	cbz	r0, 9eae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156a>
    9e6e:	6860      	ldr	r0, [r4, #4]
    9e70:	2102      	movs	r1, #2
    9e72:	30d4      	adds	r0, #212	; 0xd4
    9e74:	f005 ff84 	bl	fd80 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x762>
    9e78:	68e8      	ldr	r0, [r5, #12]
    9e7a:	7941      	ldrb	r1, [r0, #5]
    9e7c:	f001 0207 	and.w	r2, r1, #7
    9e80:	6861      	ldr	r1, [r4, #4]
    9e82:	f881 2067 	strb.w	r2, [r1, #103]	; 0x67
    9e86:	7900      	ldrb	r0, [r0, #4]
    9e88:	f000 0007 	and.w	r0, r0, #7
    9e8c:	f881 0066 	strb.w	r0, [r1, #102]	; 0x66
    9e90:	f891 3125 	ldrb.w	r3, [r1, #293]	; 0x125
    9e94:	f88d 3000 	strb.w	r3, [sp]
    9e98:	9b00      	ldr	r3, [sp, #0]
    9e9a:	9300      	str	r3, [sp, #0]
    9e9c:	f89d 3000 	ldrb.w	r3, [sp]
    9ea0:	bb5b      	cbnz	r3, 9efa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b6>
    9ea2:	e008      	b.n	9eb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1572>
    9ea4:	2001      	movs	r0, #1
    9ea6:	bd38      	pop	{r3, r4, r5, pc}
    9ea8:	e7ff      	b.n	9eaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1566>
    9eaa:	2020      	movs	r0, #32
    9eac:	e7fb      	b.n	9ea6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
    9eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9eb2:	f7ff be95 	b.w	9be0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    9eb6:	f891 3124 	ldrb.w	r3, [r1, #292]	; 0x124
    9eba:	2b01      	cmp	r3, #1
    9ebc:	d01d      	beq.n	9efa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b6>
    9ebe:	f101 036e 	add.w	r3, r1, #110	; 0x6e
    9ec2:	785d      	ldrb	r5, [r3, #1]
    9ec4:	4285      	cmp	r5, r0
    9ec6:	d106      	bne.n	9ed6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1592>
    9ec8:	7818      	ldrb	r0, [r3, #0]
    9eca:	4290      	cmp	r0, r2
    9ecc:	d103      	bne.n	9ed6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1592>
    9ece:	2002      	movs	r0, #2
    9ed0:	f881 0124 	strb.w	r0, [r1, #292]	; 0x124
    9ed4:	e011      	b.n	9efa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b6>
    9ed6:	f501 70bc 	add.w	r0, r1, #376	; 0x178
    9eda:	880a      	ldrh	r2, [r1, #0]
    9edc:	f820 2b02 	strh.w	r2, [r0], #2
    9ee0:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    9ee4:	f800 2b01 	strb.w	r2, [r0], #1
    9ee8:	f891 2067 	ldrb.w	r2, [r1, #103]	; 0x67
    9eec:	f800 290d 	strb.w	r2, [r0], #-13
    9ef0:	221b      	movs	r2, #27
    9ef2:	f7fc fea9 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9ef6:	f7fc ff79 	bl	6dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9efa:	6861      	ldr	r1, [r4, #4]
    9efc:	2021      	movs	r0, #33	; 0x21
    9efe:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9f02:	f7fe fe21 	bl	8b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9f06:	2000      	movs	r0, #0
    9f08:	e7cd      	b.n	9ea6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
    9f0a:	0000      	.short	0x0000
    9f0c:	20000174 	.word	0x20000174
    9f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9f14:	4951      	ldr	r1, [pc, #324]	; (a05c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1718>)
    9f16:	6848      	ldr	r0, [r1, #4]
    9f18:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9f1c:	2a20      	cmp	r2, #32
    9f1e:	d009      	beq.n	9f34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f0>
    9f20:	f05f 0600 	movs.w	r6, #0
    9f24:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9f28:	2a22      	cmp	r2, #34	; 0x22
    9f2a:	d005      	beq.n	9f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f4>
    9f2c:	b3a6      	cbz	r6, 9f98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1654>
    9f2e:	f100 0485 	add.w	r4, r0, #133	; 0x85
    9f32:	e003      	b.n	9f3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f8>
    9f34:	2601      	movs	r6, #1
    9f36:	e7f5      	b.n	9f24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15e0>
    9f38:	f100 0486 	add.w	r4, r0, #134	; 0x86
    9f3c:	4688      	mov	r8, r1
    9f3e:	2102      	movs	r1, #2
    9f40:	30d4      	adds	r0, #212	; 0xd4
    9f42:	f005 ff1d 	bl	fd80 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x762>
    9f46:	4d45      	ldr	r5, [pc, #276]	; (a05c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1718>)
    9f48:	3d10      	subs	r5, #16
    9f4a:	68e8      	ldr	r0, [r5, #12]
    9f4c:	f004 fd7c 	bl	ea48 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    9f50:	2700      	movs	r7, #0
    9f52:	b328      	cbz	r0, 9fa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    9f54:	4631      	mov	r1, r6
    9f56:	68e8      	ldr	r0, [r5, #12]
    9f58:	f7fe fec8 	bl	8cec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    9f5c:	b300      	cbz	r0, 9fa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    9f5e:	4646      	mov	r6, r8
    9f60:	466a      	mov	r2, sp
    9f62:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9f66:	68e9      	ldr	r1, [r5, #12]
    9f68:	f004 fbe3 	bl	e732 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    9f6c:	b3a8      	cbz	r0, 9fda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1696>
    9f6e:	68e8      	ldr	r0, [r5, #12]
    9f70:	f004 fd3c 	bl	e9ec <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    9f74:	6871      	ldr	r1, [r6, #4]
    9f76:	f8a1 0274 	strh.w	r0, [r1, #628]	; 0x274
    9f7a:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    9f7e:	f005 ff71 	bl	fe64 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9f82:	b358      	cbz	r0, 9fdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    9f84:	6871      	ldr	r1, [r6, #4]
    9f86:	2028      	movs	r0, #40	; 0x28
    9f88:	2208      	movs	r2, #8
    9f8a:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    9f8e:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    9f92:	f7fc fe59 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9f96:	e055      	b.n	a044 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1700>
    9f98:	e7ff      	b.n	9f9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1656>
    9f9a:	2002      	movs	r0, #2
    9f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9fa0:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9fa4:	f04f 0900 	mov.w	r9, #0
    9fa8:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    9fac:	2901      	cmp	r1, #1
    9fae:	d016      	beq.n	9fde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x169a>
    9fb0:	f880 7124 	strb.w	r7, [r0, #292]	; 0x124
    9fb4:	b1fe      	cbz	r6, 9ff6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b2>
    9fb6:	68e8      	ldr	r0, [r5, #12]
    9fb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
    9fbc:	2201      	movs	r2, #1
    9fbe:	78c0      	ldrb	r0, [r0, #3]
    9fc0:	f881 0109 	strb.w	r0, [r1, #265]	; 0x109
    9fc4:	4082      	lsls	r2, r0
    9fc6:	f3c2 6000 	ubfx	r0, r2, #24, #1
    9fca:	b160      	cbz	r0, 9fe6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a2>
    9fcc:	200a      	movs	r0, #10
    9fce:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9fd2:	f891 00be 	ldrb.w	r0, [r1, #190]	; 0xbe
    9fd6:	b9a0      	cbnz	r0, a002 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16be>
    9fd8:	e008      	b.n	9fec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a8>
    9fda:	e014      	b.n	a006 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c2>
    9fdc:	e027      	b.n	a02e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ea>
    9fde:	201e      	movs	r0, #30
    9fe0:	f7ff fc62 	bl	98a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    9fe4:	e7e6      	b.n	9fb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>
    9fe6:	f240 31fd 	movw	r1, #1021	; 0x3fd
    9fea:	e001      	b.n	9ff0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ac>
    9fec:	f240 4105 	movw	r1, #1029	; 0x405
    9ff0:	2031      	movs	r0, #49	; 0x31
    9ff2:	f7fa fd23 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ff6:	7027      	strb	r7, [r4, #0]
    9ff8:	f7fe fdb2 	bl	8b60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    9ffc:	f7ff fdf0 	bl	9be0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    a000:	4681      	mov	r9, r0
    a002:	4648      	mov	r0, r9
    a004:	e7ca      	b.n	9f9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1658>
    a006:	6870      	ldr	r0, [r6, #4]
    a008:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    a00c:	2901      	cmp	r1, #1
    a00e:	d009      	beq.n	a024 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e0>
    a010:	f880 7124 	strb.w	r7, [r0, #292]	; 0x124
    a014:	6870      	ldr	r0, [r6, #4]
    a016:	f100 0186 	add.w	r1, r0, #134	; 0x86
    a01a:	42a1      	cmp	r1, r4
    a01c:	d112      	bne.n	a044 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1700>
    a01e:	f880 7086 	strb.w	r7, [r0, #134]	; 0x86
    a022:	e00f      	b.n	a044 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1700>
    a024:	2000      	movs	r0, #0
    a026:	f7ff fc3f 	bl	98a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a02a:	7027      	strb	r7, [r4, #0]
    a02c:	e7f2      	b.n	a014 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    a02e:	6870      	ldr	r0, [r6, #4]
    a030:	f89d 1000 	ldrb.w	r1, [sp]
    a034:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
    a038:	f89d 1001 	ldrb.w	r1, [sp, #1]
    a03c:	f880 1277 	strb.w	r1, [r0, #631]	; 0x277
    a040:	2024      	movs	r0, #36	; 0x24
    a042:	7020      	strb	r0, [r4, #0]
    a044:	6870      	ldr	r0, [r6, #4]
    a046:	f100 0186 	add.w	r1, r0, #134	; 0x86
    a04a:	42a1      	cmp	r1, r4
    a04c:	d102      	bne.n	a054 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1710>
    a04e:	f7fe fd87 	bl	8b60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a052:	e001      	b.n	a058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1714>
    a054:	f880 70be 	strb.w	r7, [r0, #190]	; 0xbe
    a058:	2000      	movs	r0, #0
    a05a:	e79f      	b.n	9f9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1658>
    a05c:	20000174 	.word	0x20000174
    a060:	b570      	push	{r4, r5, r6, lr}
    a062:	480a      	ldr	r0, [pc, #40]	; (a08c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1748>)
    a064:	2102      	movs	r1, #2
    a066:	6840      	ldr	r0, [r0, #4]
    a068:	30d4      	adds	r0, #212	; 0xd4
    a06a:	f005 fe89 	bl	fd80 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x762>
    a06e:	4c07      	ldr	r4, [pc, #28]	; (a08c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1748>)
    a070:	3c10      	subs	r4, #16
    a072:	68e0      	ldr	r0, [r4, #12]
    a074:	f004 fcf8 	bl	ea68 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    a078:	4605      	mov	r5, r0
    a07a:	68e0      	ldr	r0, [r4, #12]
    a07c:	f004 fcf6 	bl	ea6c <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    a080:	4601      	mov	r1, r0
    a082:	4628      	mov	r0, r5
    a084:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a088:	f005 bef8 	b.w	fe7c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    a08c:	20000174 	.word	0x20000174
    a090:	4808      	ldr	r0, [pc, #32]	; (a0b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>)
    a092:	68c0      	ldr	r0, [r0, #12]
    a094:	7901      	ldrb	r1, [r0, #4]
    a096:	4807      	ldr	r0, [pc, #28]	; (a0b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>)
    a098:	3010      	adds	r0, #16
    a09a:	6840      	ldr	r0, [r0, #4]
    a09c:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    a0a0:	2820      	cmp	r0, #32
    a0a2:	d005      	beq.n	a0b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176c>
    a0a4:	2827      	cmp	r0, #39	; 0x27
    a0a6:	d003      	beq.n	a0b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176c>
    a0a8:	f05f 00fe 	movs.w	r0, #254	; 0xfe
    a0ac:	f005 bee6 	b.w	fe7c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    a0b0:	2016      	movs	r0, #22
    a0b2:	e7fb      	b.n	a0ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1768>
    a0b4:	20000164 	.word	0x20000164
    a0b8:	b510      	push	{r4, lr}
    a0ba:	4c08      	ldr	r4, [pc, #32]	; (a0dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>)
    a0bc:	6860      	ldr	r0, [r4, #4]
    a0be:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    a0c2:	2817      	cmp	r0, #23
    a0c4:	d001      	beq.n	a0ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1786>
    a0c6:	2002      	movs	r0, #2
    a0c8:	bd10      	pop	{r4, pc}
    a0ca:	f7fe fd49 	bl	8b60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a0ce:	6861      	ldr	r1, [r4, #4]
    a0d0:	201b      	movs	r0, #27
    a0d2:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a0d6:	2000      	movs	r0, #0
    a0d8:	bd10      	pop	{r4, pc}
    a0da:	0000      	.short	0x0000
    a0dc:	20000174 	.word	0x20000174
    a0e0:	b510      	push	{r4, lr}
    a0e2:	4c0c      	ldr	r4, [pc, #48]	; (a114 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d0>)
    a0e4:	2301      	movs	r3, #1
    a0e6:	4619      	mov	r1, r3
    a0e8:	6860      	ldr	r0, [r4, #4]
    a0ea:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a0ee:	3078      	adds	r0, #120	; 0x78
    a0f0:	f004 f9ed 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a0f4:	b108      	cbz	r0, a0fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b6>
    a0f6:	2000      	movs	r0, #0
    a0f8:	bd10      	pop	{r4, pc}
    a0fa:	4806      	ldr	r0, [pc, #24]	; (a114 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d0>)
    a0fc:	3810      	subs	r0, #16
    a0fe:	68c0      	ldr	r0, [r0, #12]
    a100:	f004 fc78 	bl	e9f4 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    a104:	6861      	ldr	r1, [r4, #4]
    a106:	f881 0089 	strb.w	r0, [r1, #137]	; 0x89
    a10a:	2007      	movs	r0, #7
    a10c:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    a110:	e7f1      	b.n	a0f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b2>
    a112:	0000      	.short	0x0000
    a114:	20000174 	.word	0x20000174
    a118:	b570      	push	{r4, r5, r6, lr}
    a11a:	4834      	ldr	r0, [pc, #208]	; (a1ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a8>)
    a11c:	4c33      	ldr	r4, [pc, #204]	; (a1ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a8>)
    a11e:	2500      	movs	r5, #0
    a120:	68c0      	ldr	r0, [r0, #12]
    a122:	3410      	adds	r4, #16
    a124:	6862      	ldr	r2, [r4, #4]
    a126:	7901      	ldrb	r1, [r0, #4]
    a128:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    a12c:	390e      	subs	r1, #14
    a12e:	290a      	cmp	r1, #10
    a130:	d259      	bcs.n	a1e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a132:	e8df f001 	tbb	[pc, r1]
    a136:	5805      	.short	0x5805
    a138:	581a5858 	.word	0x581a5858
    a13c:	442c5820 	.word	0x442c5820
    a140:	2804      	cmp	r0, #4
    a142:	d150      	bne.n	a1e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a144:	f7fe fe56 	bl	8df4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b0>
    a148:	6860      	ldr	r0, [r4, #4]
    a14a:	2205      	movs	r2, #5
    a14c:	f500 73c6 	add.w	r3, r0, #396	; 0x18c
    a150:	8801      	ldrh	r1, [r0, #0]
    a152:	f8a0 1198 	strh.w	r1, [r0, #408]	; 0x198
    a156:	211a      	movs	r1, #26
    a158:	f880 1196 	strb.w	r1, [r0, #406]	; 0x196
    a15c:	4601      	mov	r1, r0
    a15e:	4618      	mov	r0, r3
    a160:	f7fc fd72 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a164:	f7fc fe42 	bl	6dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a168:	e03d      	b.n	a1e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a16a:	280e      	cmp	r0, #14
    a16c:	d13b      	bne.n	a1e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a16e:	f7ff fe15 	bl	9d9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1458>
    a172:	4605      	mov	r5, r0
    a174:	e037      	b.n	a1e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a176:	281c      	cmp	r0, #28
    a178:	d135      	bne.n	a1e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a17a:	f7fe fe3b 	bl	8df4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b0>
    a17e:	6860      	ldr	r0, [r4, #4]
    a180:	2105      	movs	r1, #5
    a182:	30d4      	adds	r0, #212	; 0xd4
    a184:	f005 fdf2 	bl	fd6c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x74e>
    a188:	f7fe fec4 	bl	8f14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    a18c:	e02b      	b.n	a1e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a18e:	2820      	cmp	r0, #32
    a190:	d001      	beq.n	a196 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1852>
    a192:	2827      	cmp	r0, #39	; 0x27
    a194:	d127      	bne.n	a1e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a196:	f7fe fe2d 	bl	8df4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b0>
    a19a:	6860      	ldr	r0, [r4, #4]
    a19c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a1a0:	2921      	cmp	r1, #33	; 0x21
    a1a2:	d020      	beq.n	a1e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a1a4:	2108      	movs	r1, #8
    a1a6:	30d4      	adds	r0, #212	; 0xd4
    a1a8:	f005 fde0 	bl	fd6c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x74e>
    a1ac:	6860      	ldr	r0, [r4, #4]
    a1ae:	210b      	movs	r1, #11
    a1b0:	30d4      	adds	r0, #212	; 0xd4
    a1b2:	f005 fddb 	bl	fd6c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x74e>
    a1b6:	201a      	movs	r0, #26
    a1b8:	f7ff fb76 	bl	98a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a1bc:	e013      	b.n	a1e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a1be:	f892 0086 	ldrb.w	r0, [r2, #134]	; 0x86
    a1c2:	2822      	cmp	r0, #34	; 0x22
    a1c4:	d10f      	bne.n	a1e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    a1c6:	2600      	movs	r6, #0
    a1c8:	f882 6086 	strb.w	r6, [r2, #134]	; 0x86
    a1cc:	f7fe fcc8 	bl	8b60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a1d0:	6860      	ldr	r0, [r4, #4]
    a1d2:	f890 0124 	ldrb.w	r0, [r0, #292]	; 0x124
    a1d6:	2801      	cmp	r0, #1
    a1d8:	d102      	bne.n	a1e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x189c>
    a1da:	2000      	movs	r0, #0
    a1dc:	f7ff fb64 	bl	98a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a1e0:	6860      	ldr	r0, [r4, #4]
    a1e2:	f880 6124 	strb.w	r6, [r0, #292]	; 0x124
    a1e6:	4628      	mov	r0, r5
    a1e8:	bd70      	pop	{r4, r5, r6, pc}
    a1ea:	0000      	.short	0x0000
    a1ec:	20000164 	.word	0x20000164
    a1f0:	b570      	push	{r4, r5, r6, lr}
    a1f2:	4c31      	ldr	r4, [pc, #196]	; (a2b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1974>)
    a1f4:	6860      	ldr	r0, [r4, #4]
    a1f6:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a1fa:	0789      	lsls	r1, r1, #30
    a1fc:	d507      	bpl.n	a20e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ca>
    a1fe:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a202:	2301      	movs	r3, #1
    a204:	2108      	movs	r1, #8
    a206:	3078      	adds	r0, #120	; 0x78
    a208:	f004 f961 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a20c:	b1f8      	cbz	r0, a24e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190a>
    a20e:	6860      	ldr	r0, [r4, #4]
    a210:	f890 00c5 	ldrb.w	r0, [r0, #197]	; 0xc5
    a214:	0780      	lsls	r0, r0, #30
    a216:	d414      	bmi.n	a242 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fe>
    a218:	4d27      	ldr	r5, [pc, #156]	; (a2b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1974>)
    a21a:	3d10      	subs	r5, #16
    a21c:	68e8      	ldr	r0, [r5, #12]
    a21e:	f004 fbeb 	bl	e9f8 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    a222:	6861      	ldr	r1, [r4, #4]
    a224:	f881 00cf 	strb.w	r0, [r1, #207]	; 0xcf
    a228:	68e8      	ldr	r0, [r5, #12]
    a22a:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    a22e:	f8a1 20d0 	strh.w	r2, [r1, #208]	; 0xd0
    a232:	8840      	ldrh	r0, [r0, #2]
    a234:	f8a1 00d2 	strh.w	r0, [r1, #210]	; 0xd2
    a238:	f811 0fc5 	ldrb.w	r0, [r1, #197]!
    a23c:	f040 0002 	orr.w	r0, r0, #2
    a240:	7008      	strb	r0, [r1, #0]
    a242:	6860      	ldr	r0, [r4, #4]
    a244:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    a248:	07c9      	lsls	r1, r1, #31
    a24a:	d002      	beq.n	a252 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190e>
    a24c:	e015      	b.n	a27a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1936>
    a24e:	2001      	movs	r0, #1
    a250:	bd70      	pop	{r4, r5, r6, pc}
    a252:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a256:	078a      	lsls	r2, r1, #30
    a258:	d504      	bpl.n	a264 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1920>
    a25a:	f240 21e2 	movw	r1, #738	; 0x2e2
    a25e:	2031      	movs	r0, #49	; 0x31
    a260:	f7fa fbec 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a264:	f041 0102 	orr.w	r1, r1, #2
    a268:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    a26c:	f7fe fc6c 	bl	8b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a270:	6860      	ldr	r0, [r4, #4]
    a272:	f890 00c5 	ldrb.w	r0, [r0, #197]	; 0xc5
    a276:	07c0      	lsls	r0, r0, #31
    a278:	d007      	beq.n	a28a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1946>
    a27a:	6861      	ldr	r1, [r4, #4]
    a27c:	2201      	movs	r2, #1
    a27e:	f101 00c6 	add.w	r0, r1, #198	; 0xc6
    a282:	f7fc fce1 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a286:	f7fc fdb1 	bl	6dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a28a:	6860      	ldr	r0, [r4, #4]
    a28c:	2100      	movs	r1, #0
    a28e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a292:	2a06      	cmp	r2, #6
    a294:	d103      	bne.n	a29e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x195a>
    a296:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a29a:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    a29e:	f890 212a 	ldrb.w	r2, [r0, #298]	; 0x12a
    a2a2:	b132      	cbz	r2, a2b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196e>
    a2a4:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
    a2a8:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a2ac:	b90a      	cbnz	r2, a2b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196e>
    a2ae:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    a2b2:	2000      	movs	r0, #0
    a2b4:	bd70      	pop	{r4, r5, r6, pc}
    a2b6:	0000      	.short	0x0000
    a2b8:	20000174 	.word	0x20000174
    a2bc:	b510      	push	{r4, lr}
    a2be:	4c1f      	ldr	r4, [pc, #124]	; (a33c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f8>)
    a2c0:	6863      	ldr	r3, [r4, #4]
    a2c2:	f893 0112 	ldrb.w	r0, [r3, #274]	; 0x112
    a2c6:	2808      	cmp	r0, #8
    a2c8:	d20d      	bcs.n	a2e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a2>
    a2ca:	f500 72f4 	add.w	r2, r0, #488	; 0x1e8
    a2ce:	f1c0 0008 	rsb	r0, r0, #8
    a2d2:	b2c1      	uxtb	r1, r0
    a2d4:	1898      	adds	r0, r3, r2
    a2d6:	f7fa fc4f 	bl	4b78 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a2da:	6861      	ldr	r1, [r4, #4]
    a2dc:	f891 2112 	ldrb.w	r2, [r1, #274]	; 0x112
    a2e0:	4410      	add	r0, r2
    a2e2:	f881 0112 	strb.w	r0, [r1, #274]	; 0x112
    a2e6:	6863      	ldr	r3, [r4, #4]
    a2e8:	f893 0112 	ldrb.w	r0, [r3, #274]	; 0x112
    a2ec:	3808      	subs	r0, #8
    a2ee:	2804      	cmp	r0, #4
    a2f0:	d20d      	bcs.n	a30e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ca>
    a2f2:	f500 7282 	add.w	r2, r0, #260	; 0x104
    a2f6:	f1c0 0004 	rsb	r0, r0, #4
    a2fa:	b2c1      	uxtb	r1, r0
    a2fc:	1898      	adds	r0, r3, r2
    a2fe:	f7fa fc3b 	bl	4b78 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a302:	6861      	ldr	r1, [r4, #4]
    a304:	f891 2112 	ldrb.w	r2, [r1, #274]	; 0x112
    a308:	4410      	add	r0, r2
    a30a:	f881 0112 	strb.w	r0, [r1, #274]	; 0x112
    a30e:	6860      	ldr	r0, [r4, #4]
    a310:	f890 1112 	ldrb.w	r1, [r0, #274]	; 0x112
    a314:	290c      	cmp	r1, #12
    a316:	d30f      	bcc.n	a338 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f4>
    a318:	d005      	beq.n	a326 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e2>
    a31a:	f640 013b 	movw	r1, #2107	; 0x83b
    a31e:	f04f 0031 	mov.w	r0, #49	; 0x31
    a322:	f7fa fb8b 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a326:	2100      	movs	r1, #0
    a328:	f880 1112 	strb.w	r1, [r0, #274]	; 0x112
    a32c:	2101      	movs	r1, #1
    a32e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a332:	2004      	movs	r0, #4
    a334:	f7ff b9ac 	b.w	9690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    a338:	bd10      	pop	{r4, pc}
    a33a:	0000      	.short	0x0000
    a33c:	20000174 	.word	0x20000174
    a340:	4804      	ldr	r0, [pc, #16]	; (a354 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>)
    a342:	2129      	movs	r1, #41	; 0x29
    a344:	6840      	ldr	r0, [r0, #4]
    a346:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a34a:	2100      	movs	r1, #0
    a34c:	f880 126c 	strb.w	r1, [r0, #620]	; 0x26c
    a350:	4770      	bx	lr
    a352:	0000      	.short	0x0000
    a354:	20000174 	.word	0x20000174
    a358:	4809      	ldr	r0, [pc, #36]	; (a380 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3c>)
    a35a:	b510      	push	{r4, lr}
    a35c:	6840      	ldr	r0, [r0, #4]
    a35e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a362:	2914      	cmp	r1, #20
    a364:	d004      	beq.n	a370 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2c>
    a366:	f240 61fd 	movw	r1, #1789	; 0x6fd
    a36a:	2031      	movs	r0, #49	; 0x31
    a36c:	f7fa fb66 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a370:	2101      	movs	r1, #1
    a372:	f880 10c3 	strb.w	r1, [r0, #195]	; 0xc3
    a376:	2115      	movs	r1, #21
    a378:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a37c:	bd10      	pop	{r4, pc}
    a37e:	0000      	.short	0x0000
    a380:	20000174 	.word	0x20000174
    a384:	b510      	push	{r4, lr}
    a386:	4c0a      	ldr	r4, [pc, #40]	; (a3b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    a388:	6860      	ldr	r0, [r4, #4]
    a38a:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a38e:	07c0      	lsls	r0, r0, #31
    a390:	d008      	beq.n	a3a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a60>
    a392:	f7fe fbe5 	bl	8b60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a396:	6860      	ldr	r0, [r4, #4]
    a398:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a39c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
    a3a0:	7001      	strb	r1, [r0, #0]
    a3a2:	bd10      	pop	{r4, pc}
    a3a4:	f44f 61dd 	mov.w	r1, #1768	; 0x6e8
    a3a8:	2031      	movs	r0, #49	; 0x31
    a3aa:	f7fa fb47 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a3ae:	0000      	.short	0x0000
    a3b0:	20000174 	.word	0x20000174
    a3b4:	b510      	push	{r4, lr}
    a3b6:	4c0a      	ldr	r4, [pc, #40]	; (a3e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a9c>)
    a3b8:	2301      	movs	r3, #1
    a3ba:	2100      	movs	r1, #0
    a3bc:	6860      	ldr	r0, [r4, #4]
    a3be:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a3c2:	3078      	adds	r0, #120	; 0x78
    a3c4:	f004 f883 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a3c8:	b120      	cbz	r0, a3d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a90>
    a3ca:	6861      	ldr	r1, [r4, #4]
    a3cc:	201c      	movs	r0, #28
    a3ce:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a3d2:	bd10      	pop	{r4, pc}
    a3d4:	f240 7184 	movw	r1, #1924	; 0x784
    a3d8:	2031      	movs	r0, #49	; 0x31
    a3da:	f7fa fb2f 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a3de:	0000      	.short	0x0000
    a3e0:	20000174 	.word	0x20000174
    a3e4:	480a      	ldr	r0, [pc, #40]	; (a410 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1acc>)
    a3e6:	b510      	push	{r4, lr}
    a3e8:	6840      	ldr	r0, [r0, #4]
    a3ea:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a3ee:	f3c1 1201 	ubfx	r2, r1, #4, #2
    a3f2:	2a01      	cmp	r2, #1
    a3f4:	d004      	beq.n	a400 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abc>
    a3f6:	f240 718b 	movw	r1, #1931	; 0x78b
    a3fa:	2031      	movs	r0, #49	; 0x31
    a3fc:	f7fa fb1e 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a400:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    a404:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    a408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a40c:	f7fe bba8 	b.w	8b60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a410:	20000174 	.word	0x20000174
    a414:	b510      	push	{r4, lr}
    a416:	4c0a      	ldr	r4, [pc, #40]	; (a440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afc>)
    a418:	2301      	movs	r3, #1
    a41a:	2100      	movs	r1, #0
    a41c:	6860      	ldr	r0, [r4, #4]
    a41e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a422:	3078      	adds	r0, #120	; 0x78
    a424:	f004 f853 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a428:	b120      	cbz	r0, a434 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
    a42a:	6861      	ldr	r1, [r4, #4]
    a42c:	200e      	movs	r0, #14
    a42e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a432:	bd10      	pop	{r4, pc}
    a434:	f240 7177 	movw	r1, #1911	; 0x777
    a438:	2031      	movs	r0, #49	; 0x31
    a43a:	f7fa faff 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a43e:	0000      	.short	0x0000
    a440:	20000174 	.word	0x20000174
    a444:	4804      	ldr	r0, [pc, #16]	; (a458 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b14>)
    a446:	6840      	ldr	r0, [r0, #4]
    a448:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a44c:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    a450:	7001      	strb	r1, [r0, #0]
    a452:	f7fe bb85 	b.w	8b60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a456:	0000      	.short	0x0000
    a458:	20000174 	.word	0x20000174
    a45c:	4809      	ldr	r0, [pc, #36]	; (a484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b40>)
    a45e:	b510      	push	{r4, lr}
    a460:	6840      	ldr	r0, [r0, #4]
    a462:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a466:	2910      	cmp	r1, #16
    a468:	d004      	beq.n	a474 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b30>
    a46a:	f240 61f5 	movw	r1, #1781	; 0x6f5
    a46e:	2031      	movs	r0, #49	; 0x31
    a470:	f7fa fae4 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a474:	2101      	movs	r1, #1
    a476:	f880 10c3 	strb.w	r1, [r0, #195]	; 0xc3
    a47a:	2111      	movs	r1, #17
    a47c:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a480:	bd10      	pop	{r4, pc}
    a482:	0000      	.short	0x0000
    a484:	20000174 	.word	0x20000174
    a488:	b510      	push	{r4, lr}
    a48a:	4c0a      	ldr	r4, [pc, #40]	; (a4b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b70>)
    a48c:	2301      	movs	r3, #1
    a48e:	2100      	movs	r1, #0
    a490:	6860      	ldr	r0, [r4, #4]
    a492:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a496:	3078      	adds	r0, #120	; 0x78
    a498:	f004 f819 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a49c:	b120      	cbz	r0, a4a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b64>
    a49e:	6861      	ldr	r1, [r4, #4]
    a4a0:	201f      	movs	r0, #31
    a4a2:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a4a6:	bd10      	pop	{r4, pc}
    a4a8:	f240 7197 	movw	r1, #1943	; 0x797
    a4ac:	2031      	movs	r0, #49	; 0x31
    a4ae:	f7fa fac5 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a4b2:	0000      	.short	0x0000
    a4b4:	20000174 	.word	0x20000174
    a4b8:	4808      	ldr	r0, [pc, #32]	; (a4dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b98>)
    a4ba:	b510      	push	{r4, lr}
    a4bc:	6840      	ldr	r0, [r0, #4]
    a4be:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a4c2:	2921      	cmp	r1, #33	; 0x21
    a4c4:	d005      	beq.n	a4d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8e>
    a4c6:	b121      	cbz	r1, a4d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8e>
    a4c8:	f240 719e 	movw	r1, #1950	; 0x79e
    a4cc:	2031      	movs	r0, #49	; 0x31
    a4ce:	f7fa fab5 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a4d2:	2122      	movs	r1, #34	; 0x22
    a4d4:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a4d8:	bd10      	pop	{r4, pc}
    a4da:	0000      	.short	0x0000
    a4dc:	20000174 	.word	0x20000174
    a4e0:	4809      	ldr	r0, [pc, #36]	; (a508 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>)
    a4e2:	b510      	push	{r4, lr}
    a4e4:	6840      	ldr	r0, [r0, #4]
    a4e6:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a4ea:	2928      	cmp	r1, #40	; 0x28
    a4ec:	d006      	beq.n	a4fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bb8>
    a4ee:	2915      	cmp	r1, #21
    a4f0:	d006      	beq.n	a500 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbc>
    a4f2:	f240 711e 	movw	r1, #1822	; 0x71e
    a4f6:	2031      	movs	r0, #49	; 0x31
    a4f8:	f7fa faa0 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a4fc:	2100      	movs	r1, #0
    a4fe:	e000      	b.n	a502 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbe>
    a500:	2119      	movs	r1, #25
    a502:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a506:	bd10      	pop	{r4, pc}
    a508:	20000174 	.word	0x20000174
    a50c:	4807      	ldr	r0, [pc, #28]	; (a52c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be8>)
    a50e:	b510      	push	{r4, lr}
    a510:	6840      	ldr	r0, [r0, #4]
    a512:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a516:	2915      	cmp	r1, #21
    a518:	d004      	beq.n	a524 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be0>
    a51a:	f240 710a 	movw	r1, #1802	; 0x70a
    a51e:	2031      	movs	r0, #49	; 0x31
    a520:	f7fa fa8c 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a524:	2119      	movs	r1, #25
    a526:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a52a:	bd10      	pop	{r4, pc}
    a52c:	20000174 	.word	0x20000174
    a530:	b510      	push	{r4, lr}
    a532:	4c0a      	ldr	r4, [pc, #40]	; (a55c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c18>)
    a534:	2301      	movs	r3, #1
    a536:	2100      	movs	r1, #0
    a538:	6860      	ldr	r0, [r4, #4]
    a53a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a53e:	3078      	adds	r0, #120	; 0x78
    a540:	f003 ffc5 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a544:	b120      	cbz	r0, a550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c0c>
    a546:	6861      	ldr	r1, [r4, #4]
    a548:	2004      	movs	r0, #4
    a54a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a54e:	bd10      	pop	{r4, pc}
    a550:	f240 61ef 	movw	r1, #1775	; 0x6ef
    a554:	2031      	movs	r0, #49	; 0x31
    a556:	f7fa fa71 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a55a:	0000      	.short	0x0000
    a55c:	20000174 	.word	0x20000174
    a560:	4807      	ldr	r0, [pc, #28]	; (a580 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c3c>)
    a562:	b510      	push	{r4, lr}
    a564:	6840      	ldr	r0, [r0, #4]
    a566:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a56a:	2915      	cmp	r1, #21
    a56c:	d004      	beq.n	a578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c34>
    a56e:	f240 7104 	movw	r1, #1796	; 0x704
    a572:	2031      	movs	r0, #49	; 0x31
    a574:	f7fa fa62 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a578:	2117      	movs	r1, #23
    a57a:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a57e:	bd10      	pop	{r4, pc}
    a580:	20000174 	.word	0x20000174
    a584:	b538      	push	{r3, r4, r5, lr}
    a586:	4d20      	ldr	r5, [pc, #128]	; (a608 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc4>)
    a588:	6869      	ldr	r1, [r5, #4]
    a58a:	f891 0086 	ldrb.w	r0, [r1, #134]	; 0x86
    a58e:	281b      	cmp	r0, #27
    a590:	d002      	beq.n	a598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c54>
    a592:	f240 7137 	movw	r1, #1847	; 0x737
    a596:	e00e      	b.n	a5b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c72>
    a598:	2400      	movs	r4, #0
    a59a:	f881 40c3 	strb.w	r4, [r1, #195]	; 0xc3
    a59e:	f891 01be 	ldrb.w	r0, [r1, #446]	; 0x1be
    a5a2:	f88d 0000 	strb.w	r0, [sp]
    a5a6:	9800      	ldr	r0, [sp, #0]
    a5a8:	9000      	str	r0, [sp, #0]
    a5aa:	f89d 0000 	ldrb.w	r0, [sp]
    a5ae:	2201      	movs	r2, #1
    a5b0:	b120      	cbz	r0, a5bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c78>
    a5b2:	f240 713b 	movw	r1, #1851	; 0x73b
    a5b6:	2031      	movs	r0, #49	; 0x31
    a5b8:	f7fa fa40 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5bc:	4812      	ldr	r0, [pc, #72]	; (a608 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc4>)
    a5be:	f891 30c4 	ldrb.w	r3, [r1, #196]	; 0xc4
    a5c2:	6840      	ldr	r0, [r0, #4]
    a5c4:	f500 70db 	add.w	r0, r0, #438	; 0x1b6
    a5c8:	b143      	cbz	r3, a5dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c98>
    a5ca:	f881 40c4 	strb.w	r4, [r1, #196]	; 0xc4
    a5ce:	880a      	ldrh	r2, [r1, #0]
    a5d0:	f8a1 21c2 	strh.w	r2, [r1, #450]	; 0x1c2
    a5d4:	f881 41c0 	strb.w	r4, [r1, #448]	; 0x1c0
    a5d8:	220a      	movs	r2, #10
    a5da:	e007      	b.n	a5ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca8>
    a5dc:	880b      	ldrh	r3, [r1, #0]
    a5de:	f8a1 31c2 	strh.w	r3, [r1, #450]	; 0x1c2
    a5e2:	f881 41c0 	strb.w	r4, [r1, #448]	; 0x1c0
    a5e6:	f881 21c4 	strb.w	r2, [r1, #452]	; 0x1c4
    a5ea:	2209      	movs	r2, #9
    a5ec:	f7fc fb2c 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a5f0:	6868      	ldr	r0, [r5, #4]
    a5f2:	8800      	ldrh	r0, [r0, #0]
    a5f4:	f7fa fe4a 	bl	528c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    a5f8:	f003 fb7e 	bl	dcf8 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    a5fc:	f7fc fbf6 	bl	6dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a600:	6868      	ldr	r0, [r5, #4]
    a602:	f880 4086 	strb.w	r4, [r0, #134]	; 0x86
    a606:	bd38      	pop	{r3, r4, r5, pc}
    a608:	20000174 	.word	0x20000174
    a60c:	b510      	push	{r4, lr}
    a60e:	4c08      	ldr	r4, [pc, #32]	; (a630 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cec>)
    a610:	2301      	movs	r3, #1
    a612:	4619      	mov	r1, r3
    a614:	6860      	ldr	r0, [r4, #4]
    a616:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a61a:	3078      	adds	r0, #120	; 0x78
    a61c:	f003 ff57 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a620:	2800      	cmp	r0, #0
    a622:	d103      	bne.n	a62c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ce8>
    a624:	6861      	ldr	r1, [r4, #4]
    a626:	2008      	movs	r0, #8
    a628:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    a62c:	bd10      	pop	{r4, pc}
    a62e:	0000      	.short	0x0000
    a630:	20000174 	.word	0x20000174
    a634:	4815      	ldr	r0, [pc, #84]	; (a68c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d48>)
    a636:	b510      	push	{r4, lr}
    a638:	6880      	ldr	r0, [r0, #8]
    a63a:	7901      	ldrb	r1, [r0, #4]
    a63c:	4813      	ldr	r0, [pc, #76]	; (a68c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d48>)
    a63e:	3010      	adds	r0, #16
    a640:	6840      	ldr	r0, [r0, #4]
    a642:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a646:	2a0a      	cmp	r2, #10
    a648:	d109      	bne.n	a65e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1a>
    a64a:	f890 2109 	ldrb.w	r2, [r0, #265]	; 0x109
    a64e:	428a      	cmp	r2, r1
    a650:	d105      	bne.n	a65e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1a>
    a652:	2100      	movs	r1, #0
    a654:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a658:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    a65c:	bd10      	pop	{r4, pc}
    a65e:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    a662:	0713      	lsls	r3, r2, #28
    a664:	d507      	bpl.n	a676 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d32>
    a666:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
    a66a:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    a66e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a672:	f7fe ba75 	b.w	8b60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a676:	29ff      	cmp	r1, #255	; 0xff
    a678:	d004      	beq.n	a684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d40>
    a67a:	f240 61e2 	movw	r1, #1762	; 0x6e2
    a67e:	2031      	movs	r0, #49	; 0x31
    a680:	f7fa f9dc 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a688:	f7ff be5a 	b.w	a340 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19fc>
    a68c:	20000164 	.word	0x20000164
    a690:	b510      	push	{r4, lr}
    a692:	4c15      	ldr	r4, [pc, #84]	; (a6e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da4>)
    a694:	6860      	ldr	r0, [r4, #4]
    a696:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    a69a:	0789      	lsls	r1, r1, #30
    a69c:	d411      	bmi.n	a6c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7e>
    a69e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a6a2:	2301      	movs	r3, #1
    a6a4:	2100      	movs	r1, #0
    a6a6:	3078      	adds	r0, #120	; 0x78
    a6a8:	f003 ff11 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a6ac:	b120      	cbz	r0, a6b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d74>
    a6ae:	6861      	ldr	r1, [r4, #4]
    a6b0:	2006      	movs	r0, #6
    a6b2:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a6b6:	e009      	b.n	a6cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d88>
    a6b8:	f240 7163 	movw	r1, #1891	; 0x763
    a6bc:	2031      	movs	r0, #49	; 0x31
    a6be:	f7fa f9bd 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6c2:	2100      	movs	r1, #0
    a6c4:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    a6c8:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
    a6cc:	6860      	ldr	r0, [r4, #4]
    a6ce:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a6d2:	0780      	lsls	r0, r0, #30
    a6d4:	d507      	bpl.n	a6e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da2>
    a6d6:	f7fe fa43 	bl	8b60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a6da:	6860      	ldr	r0, [r4, #4]
    a6dc:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a6e0:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
    a6e4:	7001      	strb	r1, [r0, #0]
    a6e6:	bd10      	pop	{r4, pc}
    a6e8:	20000174 	.word	0x20000174
    a6ec:	4808      	ldr	r0, [pc, #32]	; (a710 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dcc>)
    a6ee:	b510      	push	{r4, lr}
    a6f0:	6840      	ldr	r0, [r0, #4]
    a6f2:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    a6f6:	b941      	cbnz	r1, a70a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc6>
    a6f8:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a6fc:	2301      	movs	r3, #1
    a6fe:	2106      	movs	r1, #6
    a700:	3078      	adds	r0, #120	; 0x78
    a702:	f003 fee4 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a706:	2800      	cmp	r0, #0
    a708:	d000      	beq.n	a70c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc8>
    a70a:	2001      	movs	r0, #1
    a70c:	bd10      	pop	{r4, pc}
    a70e:	0000      	.short	0x0000
    a710:	20000174 	.word	0x20000174
    a714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a716:	4c5e      	ldr	r4, [pc, #376]	; (a890 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4c>)
    a718:	4607      	mov	r7, r0
    a71a:	4615      	mov	r5, r2
    a71c:	6860      	ldr	r0, [r4, #4]
    a71e:	2200      	movs	r2, #0
    a720:	b111      	cbz	r1, a728 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1de4>
    a722:	f8a0 21de 	strh.w	r2, [r0, #478]	; 0x1de
    a726:	e006      	b.n	a736 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1df2>
    a728:	f8b0 11de 	ldrh.w	r1, [r0, #478]	; 0x1de
    a72c:	f8b0 21ce 	ldrh.w	r2, [r0, #462]	; 0x1ce
    a730:	4411      	add	r1, r2
    a732:	f8a0 11de 	strh.w	r1, [r0, #478]	; 0x1de
    a736:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    a73a:	f88d 1000 	strb.w	r1, [sp]
    a73e:	9900      	ldr	r1, [sp, #0]
    a740:	9100      	str	r1, [sp, #0]
    a742:	f89d 1000 	ldrb.w	r1, [sp]
    a746:	b939      	cbnz	r1, a758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e14>
    a748:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a74c:	2301      	movs	r3, #1
    a74e:	4619      	mov	r1, r3
    a750:	3078      	adds	r0, #120	; 0x78
    a752:	f003 febc 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a756:	b130      	cbz	r0, a766 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e22>
    a758:	6860      	ldr	r0, [r4, #4]
    a75a:	f830 1fb8 	ldrh.w	r1, [r0, #184]!
    a75e:	f8b0 2116 	ldrh.w	r2, [r0, #278]	; 0x116
    a762:	4411      	add	r1, r2
    a764:	8001      	strh	r1, [r0, #0]
    a766:	6861      	ldr	r1, [r4, #4]
    a768:	f891 00be 	ldrb.w	r0, [r1, #190]	; 0xbe
    a76c:	b130      	cbz	r0, a77c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e38>
    a76e:	f8b1 20ba 	ldrh.w	r2, [r1, #186]	; 0xba
    a772:	f8b1 31ce 	ldrh.w	r3, [r1, #462]	; 0x1ce
    a776:	441a      	add	r2, r3
    a778:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    a77c:	f991 20c2 	ldrsb.w	r2, [r1, #194]	; 0xc2
    a780:	2a00      	cmp	r2, #0
    a782:	dd06      	ble.n	a792 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e4e>
    a784:	f8b1 30c0 	ldrh.w	r3, [r1, #192]	; 0xc0
    a788:	f8b1 61ce 	ldrh.w	r6, [r1, #462]	; 0x1ce
    a78c:	4433      	add	r3, r6
    a78e:	f8a1 30c0 	strh.w	r3, [r1, #192]	; 0xc0
    a792:	263d      	movs	r6, #61	; 0x3d
    a794:	b117      	cbz	r7, a79c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e58>
    a796:	f881 60a6 	strb.w	r6, [r1, #166]	; 0xa6
    a79a:	e016      	b.n	a7ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e86>
    a79c:	4b3c      	ldr	r3, [pc, #240]	; (a890 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4c>)
    a79e:	3b10      	subs	r3, #16
    a7a0:	781b      	ldrb	r3, [r3, #0]
    a7a2:	2b02      	cmp	r3, #2
    a7a4:	d00b      	beq.n	a7be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e7a>
    a7a6:	2b01      	cmp	r3, #1
    a7a8:	d015      	beq.n	a7d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e92>
    a7aa:	b36d      	cbz	r5, a808 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ec4>
    a7ac:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    a7b0:	2208      	movs	r2, #8
    a7b2:	f7fc fa49 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a7b6:	06e8      	lsls	r0, r5, #27
    a7b8:	d510      	bpl.n	a7dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e98>
    a7ba:	201e      	movs	r0, #30
    a7bc:	e01b      	b.n	a7f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eb2>
    a7be:	f891 010e 	ldrb.w	r0, [r1, #270]	; 0x10e
    a7c2:	2806      	cmp	r0, #6
    a7c4:	d048      	beq.n	a858 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    a7c6:	2016      	movs	r0, #22
    a7c8:	e046      	b.n	a858 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    a7ca:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    a7ce:	2208      	movs	r2, #8
    a7d0:	f7fc fa3a 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a7d4:	e049      	b.n	a86a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    a7d6:	f891 0089 	ldrb.w	r0, [r1, #137]	; 0x89
    a7da:	e03d      	b.n	a858 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    a7dc:	0728      	lsls	r0, r5, #28
    a7de:	d503      	bpl.n	a7e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ea4>
    a7e0:	6860      	ldr	r0, [r4, #4]
    a7e2:	f880 60a6 	strb.w	r6, [r0, #166]	; 0xa6
    a7e6:	e040      	b.n	a86a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    a7e8:	06a8      	lsls	r0, r5, #26
    a7ea:	d501      	bpl.n	a7f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eac>
    a7ec:	2023      	movs	r0, #35	; 0x23
    a7ee:	e002      	b.n	a7f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eb2>
    a7f0:	07a8      	lsls	r0, r5, #30
    a7f2:	d004      	beq.n	a7fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eba>
    a7f4:	202a      	movs	r0, #42	; 0x2a
    a7f6:	6861      	ldr	r1, [r4, #4]
    a7f8:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    a7fc:	e035      	b.n	a86a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    a7fe:	f640 4173 	movw	r1, #3187	; 0xc73
    a802:	2031      	movs	r0, #49	; 0x31
    a804:	f7fa f91a 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a808:	b128      	cbz	r0, a816 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ed2>
    a80a:	f8b1 00ba 	ldrh.w	r0, [r1, #186]	; 0xba
    a80e:	f8b1 30bc 	ldrh.w	r3, [r1, #188]	; 0xbc
    a812:	4298      	cmp	r0, r3
    a814:	d216      	bcs.n	a844 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f00>
    a816:	2a00      	cmp	r2, #0
    a818:	dd05      	ble.n	a826 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ee2>
    a81a:	f8b1 00c0 	ldrh.w	r0, [r1, #192]	; 0xc0
    a81e:	f8b1 20bc 	ldrh.w	r2, [r1, #188]	; 0xbc
    a822:	4290      	cmp	r0, r2
    a824:	d20e      	bcs.n	a844 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f00>
    a826:	f8b1 20b8 	ldrh.w	r2, [r1, #184]	; 0xb8
    a82a:	f8b1 00b6 	ldrh.w	r0, [r1, #182]	; 0xb6
    a82e:	4282      	cmp	r2, r0
    a830:	d30a      	bcc.n	a848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f04>
    a832:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
    a836:	f88d 2000 	strb.w	r2, [sp]
    a83a:	9a00      	ldr	r2, [sp, #0]
    a83c:	9200      	str	r2, [sp, #0]
    a83e:	f89d 2000 	ldrb.w	r2, [sp]
    a842:	b10a      	cbz	r2, a848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f04>
    a844:	2022      	movs	r0, #34	; 0x22
    a846:	e007      	b.n	a858 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    a848:	f891 208a 	ldrb.w	r2, [r1, #138]	; 0x8a
    a84c:	b13a      	cbz	r2, a85e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f1a>
    a84e:	f8b1 20b4 	ldrh.w	r2, [r1, #180]	; 0xb4
    a852:	4282      	cmp	r2, r0
    a854:	d309      	bcc.n	a86a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    a856:	2008      	movs	r0, #8
    a858:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    a85c:	e7b5      	b.n	a7ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e86>
    a85e:	f8b1 00b4 	ldrh.w	r0, [r1, #180]	; 0xb4
    a862:	2806      	cmp	r0, #6
    a864:	d301      	bcc.n	a86a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    a866:	203e      	movs	r0, #62	; 0x3e
    a868:	e7f6      	b.n	a858 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    a86a:	6860      	ldr	r0, [r4, #4]
    a86c:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    a870:	f88d 1000 	strb.w	r1, [sp]
    a874:	9900      	ldr	r1, [sp, #0]
    a876:	9100      	str	r1, [sp, #0]
    a878:	f89d 1000 	ldrb.w	r1, [sp]
    a87c:	b119      	cbz	r1, a886 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f42>
    a87e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a882:	f005 babf 	b.w	fe04 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    a886:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a88a:	2100      	movs	r1, #0
    a88c:	f7fd bc38 	b.w	8100 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a890:	20000174 	.word	0x20000174
    a894:	b570      	push	{r4, r5, r6, lr}
    a896:	4d2e      	ldr	r5, [pc, #184]	; (a950 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200c>)
    a898:	6868      	ldr	r0, [r5, #4]
    a89a:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    a89e:	b151      	cbz	r1, a8b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f72>
    a8a0:	2901      	cmp	r1, #1
    a8a2:	d008      	beq.n	a8b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f72>
    a8a4:	2902      	cmp	r1, #2
    a8a6:	d009      	beq.n	a8bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f78>
    a8a8:	2903      	cmp	r1, #3
    a8aa:	d007      	beq.n	a8bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f78>
    a8ac:	f640 21f1 	movw	r1, #2801	; 0xaf1
    a8b0:	2031      	movs	r0, #49	; 0x31
    a8b2:	f7fa f8c3 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8b6:	f8b0 11cc 	ldrh.w	r1, [r0, #460]	; 0x1cc
    a8ba:	e037      	b.n	a92c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe8>
    a8bc:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    a8c0:	2908      	cmp	r1, #8
    a8c2:	d036      	beq.n	a932 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fee>
    a8c4:	f8b0 20b4 	ldrh.w	r2, [r0, #180]	; 0xb4
    a8c8:	f8b0 10b6 	ldrh.w	r1, [r0, #182]	; 0xb6
    a8cc:	2400      	movs	r4, #0
    a8ce:	1c93      	adds	r3, r2, #2
    a8d0:	4299      	cmp	r1, r3
    a8d2:	d306      	bcc.n	a8e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f9e>
    a8d4:	1a89      	subs	r1, r1, r2
    a8d6:	1e89      	subs	r1, r1, #2
    a8d8:	040c      	lsls	r4, r1, #16
    a8da:	0c24      	lsrs	r4, r4, #16
    a8dc:	d001      	beq.n	a8e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f9e>
    a8de:	1e64      	subs	r4, r4, #1
    a8e0:	b2a4      	uxth	r4, r4
    a8e2:	f890 10b2 	ldrb.w	r1, [r0, #178]	; 0xb2
    a8e6:	b139      	cbz	r1, a8f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fb4>
    a8e8:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a8ec:	2301      	movs	r3, #1
    a8ee:	2109      	movs	r1, #9
    a8f0:	3078      	adds	r0, #120	; 0x78
    a8f2:	f003 fdec 	bl	e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a8f6:	b340      	cbz	r0, a94a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2006>
    a8f8:	f7ff fef8 	bl	a6ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da8>
    a8fc:	b178      	cbz	r0, a91e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fda>
    a8fe:	686a      	ldr	r2, [r5, #4]
    a900:	2000      	movs	r0, #0
    a902:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
    a906:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
    a90a:	1c93      	adds	r3, r2, #2
    a90c:	4299      	cmp	r1, r3
    a90e:	d303      	bcc.n	a918 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fd4>
    a910:	1a88      	subs	r0, r1, r2
    a912:	1e80      	subs	r0, r0, #2
    a914:	d000      	beq.n	a918 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fd4>
    a916:	1e40      	subs	r0, r0, #1
    a918:	42a0      	cmp	r0, r4
    a91a:	d200      	bcs.n	a91e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fda>
    a91c:	b284      	uxth	r4, r0
    a91e:	b10c      	cbz	r4, a924 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe0>
    a920:	1e64      	subs	r4, r4, #1
    a922:	b2a4      	uxth	r4, r4
    a924:	6868      	ldr	r0, [r5, #4]
    a926:	f8b0 11cc 	ldrh.w	r1, [r0, #460]	; 0x1cc
    a92a:	4421      	add	r1, r4
    a92c:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    a930:	bd70      	pop	{r4, r5, r6, pc}
    a932:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    a936:	2903      	cmp	r1, #3
    a938:	d3bd      	bcc.n	a8b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f72>
    a93a:	f830 1f7c 	ldrh.w	r1, [r0, #124]!
    a93e:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    a940:	4411      	add	r1, r2
    a942:	1c49      	adds	r1, r1, #1
    a944:	f8a0 114c 	strh.w	r1, [r0, #332]	; 0x14c
    a948:	bd70      	pop	{r4, r5, r6, pc}
    a94a:	2400      	movs	r4, #0
    a94c:	e7ea      	b.n	a924 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe0>
    a94e:	0000      	.short	0x0000
    a950:	20000174 	.word	0x20000174

0000a954 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    a954:	4903      	ldr	r1, [pc, #12]	; (a964 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    a956:	884a      	ldrh	r2, [r1, #2]
    a958:	8002      	strh	r2, [r0, #0]
    a95a:	7809      	ldrb	r1, [r1, #0]
    a95c:	7081      	strb	r1, [r0, #2]
    a95e:	2000      	movs	r0, #0
    a960:	4770      	bx	lr
    a962:	0000      	.short	0x0000
    a964:	200011bc 	.word	0x200011bc

0000a968 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    a968:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a96a:	460c      	mov	r4, r1
    a96c:	4605      	mov	r5, r0
    a96e:	8800      	ldrh	r0, [r0, #0]
    a970:	4669      	mov	r1, sp
    a972:	f003 fd82 	bl	e47a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a976:	2200      	movs	r2, #0
    a978:	b128      	cbz	r0, a986 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    a97a:	f8c4 2002 	str.w	r2, [r4, #2]
    a97e:	71a2      	strb	r2, [r4, #6]
    a980:	8022      	strh	r2, [r4, #0]
    a982:	2002      	movs	r0, #2
    a984:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a986:	9901      	ldr	r1, [sp, #4]
    a988:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    a98c:	f881 2064 	strb.w	r2, [r1, #100]	; 0x64
    a990:	f8d1 0017 	ldr.w	r0, [r1, #23]
    a994:	f8c4 0002 	str.w	r0, [r4, #2]
    a998:	7ec8      	ldrb	r0, [r1, #27]
    a99a:	71a0      	strb	r0, [r4, #6]
    a99c:	8828      	ldrh	r0, [r5, #0]
    a99e:	8020      	strh	r0, [r4, #0]
    a9a0:	f891 0064 	ldrb.w	r0, [r1, #100]	; 0x64
    a9a4:	f88d 0008 	strb.w	r0, [sp, #8]
    a9a8:	9802      	ldr	r0, [sp, #8]
    a9aa:	9002      	str	r0, [sp, #8]
    a9ac:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a9b0:	2800      	cmp	r0, #0
    a9b2:	d1eb      	bne.n	a98c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    a9b4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

0000a9b8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    a9b8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    a9ba:	460d      	mov	r5, r1
    a9bc:	4606      	mov	r6, r0
    a9be:	8800      	ldrh	r0, [r0, #0]
    a9c0:	4669      	mov	r1, sp
    a9c2:	f003 fd5a 	bl	e47a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a9c6:	2800      	cmp	r0, #0
    a9c8:	d11a      	bne.n	aa00 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    a9ca:	f8dd 4004 	ldr.w	r4, [sp, #4]
    a9ce:	2700      	movs	r7, #0
    a9d0:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
    a9d4:	f814 0f6e 	ldrb.w	r0, [r4, #110]!
    a9d8:	f005 ff66 	bl	108a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    a9dc:	70a8      	strb	r0, [r5, #2]
    a9de:	7860      	ldrb	r0, [r4, #1]
    a9e0:	f005 ff62 	bl	108a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    a9e4:	70e8      	strb	r0, [r5, #3]
    a9e6:	78a0      	ldrb	r0, [r4, #2]
    a9e8:	f88d 0008 	strb.w	r0, [sp, #8]
    a9ec:	9802      	ldr	r0, [sp, #8]
    a9ee:	9002      	str	r0, [sp, #8]
    a9f0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a9f4:	3c6e      	subs	r4, #110	; 0x6e
    a9f6:	2800      	cmp	r0, #0
    a9f8:	d1ea      	bne.n	a9d0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    a9fa:	8830      	ldrh	r0, [r6, #0]
    a9fc:	8028      	strh	r0, [r5, #0]
    a9fe:	2000      	movs	r0, #0
    aa00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000aa04 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    aa04:	4903      	ldr	r1, [pc, #12]	; (aa14 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    aa06:	888a      	ldrh	r2, [r1, #4]
    aa08:	8002      	strh	r2, [r0, #0]
    aa0a:	88c9      	ldrh	r1, [r1, #6]
    aa0c:	8041      	strh	r1, [r0, #2]
    aa0e:	2000      	movs	r0, #0
    aa10:	4770      	bx	lr
    aa12:	0000      	.short	0x0000
    aa14:	200002b4 	.word	0x200002b4

0000aa18 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    aa18:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    aa1a:	2400      	movs	r4, #0
    aa1c:	a902      	add	r1, sp, #8
    aa1e:	f88d 4004 	strb.w	r4, [sp, #4]
    aa22:	f88d 4008 	strb.w	r4, [sp, #8]
    aa26:	9100      	str	r1, [sp, #0]
    aa28:	7882      	ldrb	r2, [r0, #2]
    aa2a:	7841      	ldrb	r1, [r0, #1]
    aa2c:	7800      	ldrb	r0, [r0, #0]
    aa2e:	ab01      	add	r3, sp, #4
    aa30:	f006 f8cc 	bl	10bcc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
    aa34:	2800      	cmp	r0, #0
    aa36:	d112      	bne.n	aa5e <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    aa38:	f89d 0004 	ldrb.w	r0, [sp, #4]
    aa3c:	f006 f800 	bl	10a40 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
    aa40:	b170      	cbz	r0, aa60 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    aa42:	f89d 0008 	ldrb.w	r0, [sp, #8]
    aa46:	f005 fffb 	bl	10a40 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
    aa4a:	b148      	cbz	r0, aa60 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    aa4c:	4805      	ldr	r0, [pc, #20]	; (aa64 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    aa4e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    aa52:	7381      	strb	r1, [r0, #14]
    aa54:	f89d 1008 	ldrb.w	r1, [sp, #8]
    aa58:	73c1      	strb	r1, [r0, #15]
    aa5a:	8204      	strh	r4, [r0, #16]
    aa5c:	2000      	movs	r0, #0
    aa5e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    aa60:	2011      	movs	r0, #17
    aa62:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    aa64:	200011bc 	.word	0x200011bc

0000aa68 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    aa68:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    aa6c:	460f      	mov	r7, r1
    aa6e:	4605      	mov	r5, r0
    aa70:	7806      	ldrb	r6, [r0, #0]
    aa72:	f005 ff98 	bl	109a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x12c>
    aa76:	2800      	cmp	r0, #0
    aa78:	d10a      	bne.n	aa90 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    aa7a:	4628      	mov	r0, r5
    aa7c:	f005 ff6d 	bl	1095a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
    aa80:	2800      	cmp	r0, #0
    aa82:	d105      	bne.n	aa90 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    aa84:	2001      	movs	r0, #1
    aa86:	f7fa f9cf 	bl	4e28 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    aa8a:	4286      	cmp	r6, r0
    aa8c:	d302      	bcc.n	aa94 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    aa8e:	2007      	movs	r0, #7
    aa90:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    aa94:	2101      	movs	r1, #1
    aa96:	4630      	mov	r0, r6
    aa98:	f003 fa52 	bl	df40 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    aa9c:	0004      	movs	r4, r0
    aa9e:	d004      	beq.n	aaaa <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    aaa0:	f004 fda3 	bl	f5ea <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    aaa4:	b170      	cbz	r0, aac4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5c>
    aaa6:	200c      	movs	r0, #12
    aaa8:	e7f2      	b.n	aa90 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    aaaa:	2200      	movs	r2, #0
    aaac:	2101      	movs	r1, #1
    aaae:	4630      	mov	r0, r6
    aab0:	f003 fa3c 	bl	df2c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    aab4:	0004      	movs	r4, r0
    aab6:	d013      	beq.n	aae0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x78>
    aab8:	4817      	ldr	r0, [pc, #92]	; (ab18 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xb0>)
    aaba:	f990 1000 	ldrsb.w	r1, [r0]
    aabe:	4620      	mov	r0, r4
    aac0:	f004 fb2f 	bl	f122 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    aac4:	4620      	mov	r0, r4
    aac6:	f004 fbd8 	bl	f27a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    aaca:	7038      	strb	r0, [r7, #0]
    aacc:	74e8      	strb	r0, [r5, #19]
    aace:	4629      	mov	r1, r5
    aad0:	4620      	mov	r0, r4
    aad2:	f7fc fb89 	bl	71e8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    aad6:	4606      	mov	r6, r0
    aad8:	7e68      	ldrb	r0, [r5, #25]
    aada:	b1d0      	cbz	r0, ab12 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xaa>
    aadc:	b12e      	cbz	r6, aaea <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x82>
    aade:	e018      	b.n	ab12 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xaa>
    aae0:	f241 215a 	movw	r1, #4698	; 0x125a
    aae4:	2039      	movs	r0, #57	; 0x39
    aae6:	f7f9 ffa9 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aaea:	2200      	movs	r2, #0
    aaec:	4668      	mov	r0, sp
    aaee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    aaf0:	f003 faea 	bl	e0c8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    aaf4:	2200      	movs	r2, #0
    aaf6:	2101      	movs	r1, #1
    aaf8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    aafa:	f003 fb5b 	bl	e1b4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    aafe:	2204      	movs	r2, #4
    ab00:	4668      	mov	r0, sp
    ab02:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ab04:	f003 fae0 	bl	e0c8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ab08:	2200      	movs	r2, #0
    ab0a:	4611      	mov	r1, r2
    ab0c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ab0e:	f003 fb51 	bl	e1b4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ab12:	4630      	mov	r0, r6
    ab14:	e7bc      	b.n	aa90 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    ab16:	0000      	.short	0x0000
    ab18:	200002ac 	.word	0x200002ac

0000ab1c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    ab1c:	7801      	ldrb	r1, [r0, #0]
    ab1e:	b171      	cbz	r1, ab3e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ab20:	7841      	ldrb	r1, [r0, #1]
    ab22:	b161      	cbz	r1, ab3e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ab24:	8841      	ldrh	r1, [r0, #2]
    ab26:	291b      	cmp	r1, #27
    ab28:	d309      	bcc.n	ab3e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ab2a:	8881      	ldrh	r1, [r0, #4]
    ab2c:	291b      	cmp	r1, #27
    ab2e:	d306      	bcc.n	ab3e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ab30:	4904      	ldr	r1, [pc, #16]	; (ab44 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    ab32:	6802      	ldr	r2, [r0, #0]
    ab34:	600a      	str	r2, [r1, #0]
    ab36:	8880      	ldrh	r0, [r0, #4]
    ab38:	8088      	strh	r0, [r1, #4]
    ab3a:	2000      	movs	r0, #0
    ab3c:	4770      	bx	lr
    ab3e:	2012      	movs	r0, #18
    ab40:	4770      	bx	lr
    ab42:	0000      	.short	0x0000
    ab44:	200011bc 	.word	0x200011bc

0000ab48 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    ab48:	6800      	ldr	r0, [r0, #0]
    ab4a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ab4e:	4288      	cmp	r0, r1
    ab50:	d303      	bcc.n	ab5a <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    ab52:	4903      	ldr	r1, [pc, #12]	; (ab60 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    ab54:	6088      	str	r0, [r1, #8]
    ab56:	2000      	movs	r0, #0
    ab58:	4770      	bx	lr
    ab5a:	2012      	movs	r0, #18
    ab5c:	4770      	bx	lr
    ab5e:	0000      	.short	0x0000
    ab60:	200011bc 	.word	0x200011bc

0000ab64 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    ab64:	4a03      	ldr	r2, [pc, #12]	; (ab74 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    ab66:	e9d2 1200 	ldrd	r1, r2, [r2]
    ab6a:	6001      	str	r1, [r0, #0]
    ab6c:	6042      	str	r2, [r0, #4]
    ab6e:	2000      	movs	r0, #0
    ab70:	4770      	bx	lr
    ab72:	0000      	.short	0x0000
    ab74:	0000afd0 	.word	0x0000afd0

0000ab78 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    ab78:	b510      	push	{r4, lr}
    ab7a:	2005      	movs	r0, #5
    ab7c:	f000 faa2 	bl	b0c4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    ab80:	f7fd fe38 	bl	87f4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    ab84:	4902      	ldr	r1, [pc, #8]	; (ab90 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    ab86:	4801      	ldr	r0, [pc, #4]	; (ab8c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    ab88:	6048      	str	r0, [r1, #4]
    ab8a:	bd10      	pop	{r4, pc}
    ab8c:	0000ab95 	.word	0x0000ab95
    ab90:	200002ac 	.word	0x200002ac
    ab94:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    ab98:	4613      	mov	r3, r2
    ab9a:	4a33      	ldr	r2, [pc, #204]	; (ac68 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf0>)
    ab9c:	460f      	mov	r7, r1
    ab9e:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
    aba2:	8814      	ldrh	r4, [r2, #0]
    aba4:	f8b0 6056 	ldrh.w	r6, [r0, #86]	; 0x56
    aba8:	428c      	cmp	r4, r1
    abaa:	d200      	bcs.n	abae <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    abac:	4621      	mov	r1, r4
    abae:	4688      	mov	r8, r1
    abb0:	8891      	ldrh	r1, [r2, #4]
    abb2:	42b1      	cmp	r1, r6
    abb4:	d200      	bcs.n	abb8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x40>
    abb6:	460e      	mov	r6, r1
    abb8:	8851      	ldrh	r1, [r2, #2]
    abba:	f640 0448 	movw	r4, #2120	; 0x848
    abbe:	42a1      	cmp	r1, r4
    abc0:	d300      	bcc.n	abc4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x4c>
    abc2:	4621      	mov	r1, r4
    abc4:	88d5      	ldrh	r5, [r2, #6]
    abc6:	42a5      	cmp	r5, r4
    abc8:	d300      	bcc.n	abcc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x54>
    abca:	4625      	mov	r5, r4
    abcc:	42a1      	cmp	r1, r4
    abce:	d200      	bcs.n	abd2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x5a>
    abd0:	460c      	mov	r4, r1
    abd2:	f44f 72a4 	mov.w	r2, #328	; 0x148
    abd6:	2e1b      	cmp	r6, #27
    abd8:	d001      	beq.n	abde <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x66>
    abda:	4295      	cmp	r5, r2
    abdc:	d104      	bne.n	abe8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x70>
    abde:	f1b8 0f1b 	cmp.w	r8, #27
    abe2:	d03e      	beq.n	ac62 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    abe4:	4294      	cmp	r4, r2
    abe6:	d03c      	beq.n	ac62 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    abe8:	466a      	mov	r2, sp
    abea:	4619      	mov	r1, r3
    abec:	f005 ff4b 	bl	10a86 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
    abf0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    abf4:	4641      	mov	r1, r8
    abf6:	4540      	cmp	r0, r8
    abf8:	d900      	bls.n	abfc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x84>
    abfa:	4608      	mov	r0, r1
    abfc:	80f8      	strh	r0, [r7, #6]
    abfe:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    ac02:	42a1      	cmp	r1, r4
    ac04:	d800      	bhi.n	ac08 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x90>
    ac06:	460c      	mov	r4, r1
    ac08:	813c      	strh	r4, [r7, #8]
    ac0a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    ac0e:	42b1      	cmp	r1, r6
    ac10:	d800      	bhi.n	ac14 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x9c>
    ac12:	460e      	mov	r6, r1
    ac14:	807e      	strh	r6, [r7, #2]
    ac16:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ac1a:	42a9      	cmp	r1, r5
    ac1c:	d800      	bhi.n	ac20 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xa8>
    ac1e:	460d      	mov	r5, r1
    ac20:	80bd      	strh	r5, [r7, #4]
    ac22:	21ff      	movs	r1, #255	; 0xff
    ac24:	7039      	strb	r1, [r7, #0]
    ac26:	381b      	subs	r0, #27
    ac28:	28e0      	cmp	r0, #224	; 0xe0
    ac2a:	d902      	bls.n	ac32 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xba>
    ac2c:	f640 41b8 	movw	r1, #3256	; 0xcb8
    ac30:	e014      	b.n	ac5c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe4>
    ac32:	3e1b      	subs	r6, #27
    ac34:	2ee0      	cmp	r6, #224	; 0xe0
    ac36:	d902      	bls.n	ac3e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xc6>
    ac38:	f640 41ba 	movw	r1, #3258	; 0xcba
    ac3c:	e00e      	b.n	ac5c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe4>
    ac3e:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    ac42:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    ac46:	4284      	cmp	r4, r0
    ac48:	d902      	bls.n	ac50 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xd8>
    ac4a:	f640 41bc 	movw	r1, #3260	; 0xcbc
    ac4e:	e005      	b.n	ac5c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe4>
    ac50:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    ac54:	4285      	cmp	r5, r0
    ac56:	d904      	bls.n	ac62 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    ac58:	f640 41be 	movw	r1, #3262	; 0xcbe
    ac5c:	2039      	movs	r0, #57	; 0x39
    ac5e:	f7f9 feed 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac62:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    ac66:	0000      	.short	0x0000
    ac68:	200002b4 	.word	0x200002b4
    ac6c:	b510      	push	{r4, lr}
    ac6e:	480e      	ldr	r0, [pc, #56]	; (aca8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x130>)
    ac70:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ac74:	4b0d      	ldr	r3, [pc, #52]	; (acac <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x134>)
    ac76:	8281      	strh	r1, [r0, #20]
    ac78:	2100      	movs	r1, #0
    ac7a:	7581      	strb	r1, [r0, #22]
    ac7c:	8301      	strh	r1, [r0, #24]
    ac7e:	221b      	movs	r2, #27
    ac80:	801a      	strh	r2, [r3, #0]
    ac82:	f44f 74a4 	mov.w	r4, #328	; 0x148
    ac86:	805c      	strh	r4, [r3, #2]
    ac88:	809a      	strh	r2, [r3, #4]
    ac8a:	80dc      	strh	r4, [r3, #6]
    ac8c:	7381      	strb	r1, [r0, #14]
    ac8e:	73c1      	strb	r1, [r0, #15]
    ac90:	2303      	movs	r3, #3
    ac92:	7003      	strb	r3, [r0, #0]
    ac94:	2302      	movs	r3, #2
    ac96:	7043      	strb	r3, [r0, #1]
    ac98:	8042      	strh	r2, [r0, #2]
    ac9a:	8082      	strh	r2, [r0, #4]
    ac9c:	f640 62a6 	movw	r2, #3750	; 0xea6
    aca0:	6082      	str	r2, [r0, #8]
    aca2:	7481      	strb	r1, [r0, #18]
    aca4:	7301      	strb	r1, [r0, #12]
    aca6:	bd10      	pop	{r4, pc}
    aca8:	200011bc 	.word	0x200011bc
    acac:	200002b4 	.word	0x200002b4
    acb0:	b510      	push	{r4, lr}
    acb2:	2101      	movs	r1, #1
    acb4:	2000      	movs	r0, #0
    acb6:	f003 f943 	bl	df40 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    acba:	0004      	movs	r4, r0
    acbc:	d10c      	bne.n	acd8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    acbe:	2200      	movs	r2, #0
    acc0:	2101      	movs	r1, #1
    acc2:	4610      	mov	r0, r2
    acc4:	f003 f932 	bl	df2c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    acc8:	0004      	movs	r4, r0
    acca:	d007      	beq.n	acdc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x164>
    accc:	4806      	ldr	r0, [pc, #24]	; (ace8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x170>)
    acce:	f990 1000 	ldrsb.w	r1, [r0]
    acd2:	4620      	mov	r0, r4
    acd4:	f004 fa25 	bl	f122 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    acd8:	4620      	mov	r0, r4
    acda:	bd10      	pop	{r4, pc}
    acdc:	f240 2135 	movw	r1, #565	; 0x235
    ace0:	2039      	movs	r0, #57	; 0x39
    ace2:	f7f9 feab 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ace6:	0000      	.short	0x0000
    ace8:	200002ac 	.word	0x200002ac

0000acec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    acec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    acf0:	b088      	sub	sp, #32
    acf2:	460c      	mov	r4, r1
    acf4:	4606      	mov	r6, r0
    acf6:	f004 fac3 	bl	f280 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    acfa:	b198      	cbz	r0, ad24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    acfc:	4630      	mov	r0, r6
    acfe:	f004 fab2 	bl	f266 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    ad02:	b130      	cbz	r0, ad12 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    ad04:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    ad08:	2012      	movs	r0, #18
    ad0a:	2900      	cmp	r1, #0
    ad0c:	d00b      	beq.n	ad26 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ad0e:	2980      	cmp	r1, #128	; 0x80
    ad10:	d809      	bhi.n	ad26 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ad12:	4630      	mov	r0, r6
    ad14:	f004 fa96 	bl	f244 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    ad18:	b140      	cbz	r0, ad2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    ad1a:	4630      	mov	r0, r6
    ad1c:	f004 f9cb 	bl	f0b6 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    ad20:	b130      	cbz	r0, ad30 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    ad22:	e009      	b.n	ad38 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    ad24:	2042      	movs	r0, #66	; 0x42
    ad26:	b008      	add	sp, #32
    ad28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ad2c:	200c      	movs	r0, #12
    ad2e:	e7fa      	b.n	ad26 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ad30:	4630      	mov	r0, r6
    ad32:	f004 fa92 	bl	f25a <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    ad36:	b3c0      	cbz	r0, adaa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    ad38:	4630      	mov	r0, r6
    ad3a:	f004 fc56 	bl	f5ea <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    ad3e:	2800      	cmp	r0, #0
    ad40:	d1f4      	bne.n	ad2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    ad42:	4630      	mov	r0, r6
    ad44:	f004 f9d2 	bl	f0ec <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    ad48:	2800      	cmp	r0, #0
    ad4a:	d1ef      	bne.n	ad2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    ad4c:	4630      	mov	r0, r6
    ad4e:	f7fc f9e9 	bl	7124 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    ad52:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    ad56:	f242 7110 	movw	r1, #10000	; 0x2710
    ad5a:	fb00 f801 	mul.w	r8, r0, r1
    ad5e:	78e1      	ldrb	r1, [r4, #3]
    ad60:	4630      	mov	r0, r6
    ad62:	f004 fa66 	bl	f232 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    ad66:	4630      	mov	r0, r6
    ad68:	f004 fa79 	bl	f25e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ad6c:	b300      	cbz	r0, adb0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    ad6e:	2200      	movs	r2, #0
    ad70:	4611      	mov	r1, r2
    ad72:	a801      	add	r0, sp, #4
    ad74:	f7fa f8cc 	bl	4f10 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    ad78:	0004      	movs	r4, r0
    ad7a:	d06d      	beq.n	ae58 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16c>
    ad7c:	2100      	movs	r1, #0
    ad7e:	f7fb fd6d 	bl	685c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    ad82:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    ad86:	8020      	strh	r0, [r4, #0]
    ad88:	4621      	mov	r1, r4
    ad8a:	4630      	mov	r0, r6
    ad8c:	f004 fa8b 	bl	f2a6 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    ad90:	f000 f9a4 	bl	b0dc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    ad94:	0940      	lsrs	r0, r0, #5
    ad96:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    ad9a:	07c0      	lsls	r0, r0, #31
    ad9c:	4d3a      	ldr	r5, [pc, #232]	; (ae88 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>)
    ad9e:	f104 0030 	add.w	r0, r4, #48	; 0x30
    ada2:	d00f      	beq.n	adc4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd8>
    ada4:	8869      	ldrh	r1, [r5, #2]
    ada6:	88aa      	ldrh	r2, [r5, #4]
    ada8:	e00e      	b.n	adc8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xdc>
    adaa:	e7ff      	b.n	adac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc0>
    adac:	2012      	movs	r0, #18
    adae:	e7ba      	b.n	ad26 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    adb0:	4642      	mov	r2, r8
    adb2:	2100      	movs	r1, #0
    adb4:	4630      	mov	r0, r6
    adb6:	f7fd f8b1 	bl	7f1c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    adba:	2800      	cmp	r0, #0
    adbc:	d0b3      	beq.n	ad26 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    adbe:	f241 417b 	movw	r1, #5243	; 0x147b
    adc2:	e053      	b.n	ae6c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    adc4:	211b      	movs	r1, #27
    adc6:	460a      	mov	r2, r1
    adc8:	84c1      	strh	r1, [r0, #38]	; 0x26
    adca:	8502      	strh	r2, [r0, #40]	; 0x28
    adcc:	68a8      	ldr	r0, [r5, #8]
    adce:	6320      	str	r0, [r4, #48]	; 0x30
    add0:	f641 574c 	movw	r7, #7500	; 0x1d4c
    add4:	4630      	mov	r0, r6
    add6:	f004 fa4a 	bl	f26e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    adda:	b910      	cbnz	r0, ade2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf6>
    addc:	4630      	mov	r0, r6
    adde:	f004 fa60 	bl	f2a2 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    ade2:	6127      	str	r7, [r4, #16]
    ade4:	8821      	ldrh	r1, [r4, #0]
    ade6:	f8ad 1008 	strh.w	r1, [sp, #8]
    adea:	7ba9      	ldrb	r1, [r5, #14]
    adec:	f88d 100a 	strb.w	r1, [sp, #10]
    adf0:	7be9      	ldrb	r1, [r5, #15]
    adf2:	f88d 100b 	strb.w	r1, [sp, #11]
    adf6:	8a29      	ldrh	r1, [r5, #16]
    adf8:	f8ad 100c 	strh.w	r1, [sp, #12]
    adfc:	a905      	add	r1, sp, #20
    adfe:	9100      	str	r1, [sp, #0]
    ae00:	2001      	movs	r0, #1
    ae02:	ab04      	add	r3, sp, #16
    ae04:	aa02      	add	r2, sp, #8
    ae06:	4621      	mov	r1, r4
    ae08:	f005 fe73 	bl	10af2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x278>
    ae0c:	b140      	cbz	r0, ae20 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x134>
    ae0e:	2100      	movs	r1, #0
    ae10:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    ae14:	f7fa f8a6 	bl	4f64 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ae18:	b1f0      	cbz	r0, ae58 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16c>
    ae1a:	f241 41cb 	movw	r1, #5323	; 0x14cb
    ae1e:	e025      	b.n	ae6c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    ae20:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ae24:	f88d 0018 	strb.w	r0, [sp, #24]
    ae28:	f89d 0014 	ldrb.w	r0, [sp, #20]
    ae2c:	f88d 0019 	strb.w	r0, [sp, #25]
    ae30:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    ae34:	f8ad 001a 	strh.w	r0, [sp, #26]
    ae38:	a906      	add	r1, sp, #24
    ae3a:	4620      	mov	r0, r4
    ae3c:	f003 fbdd 	bl	e5fa <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    ae40:	7868      	ldrb	r0, [r5, #1]
    ae42:	9000      	str	r0, [sp, #0]
    ae44:	782b      	ldrb	r3, [r5, #0]
    ae46:	88aa      	ldrh	r2, [r5, #4]
    ae48:	8869      	ldrh	r1, [r5, #2]
    ae4a:	8820      	ldrh	r0, [r4, #0]
    ae4c:	f7fa f956 	bl	50fc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    ae50:	b120      	cbz	r0, ae5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x170>
    ae52:	f241 41d6 	movw	r1, #5334	; 0x14d6
    ae56:	e009      	b.n	ae6c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    ae58:	2009      	movs	r0, #9
    ae5a:	e764      	b.n	ad26 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ae5c:	4642      	mov	r2, r8
    ae5e:	4621      	mov	r1, r4
    ae60:	4630      	mov	r0, r6
    ae62:	f7fd f85b 	bl	7f1c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    ae66:	b120      	cbz	r0, ae72 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x186>
    ae68:	f241 41d8 	movw	r1, #5336	; 0x14d8
    ae6c:	2039      	movs	r0, #57	; 0x39
    ae6e:	f7f9 fde5 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae72:	4806      	ldr	r0, [pc, #24]	; (ae8c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a0>)
    ae74:	6843      	ldr	r3, [r0, #4]
    ae76:	b123      	cbz	r3, ae82 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x196>
    ae78:	2200      	movs	r2, #0
    ae7a:	f504 718d 	add.w	r1, r4, #282	; 0x11a
    ae7e:	4620      	mov	r0, r4
    ae80:	4798      	blx	r3
    ae82:	2000      	movs	r0, #0
    ae84:	e74f      	b.n	ad26 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ae86:	0000      	.short	0x0000
    ae88:	200011bc 	.word	0x200011bc
    ae8c:	200002ac 	.word	0x200002ac
    ae90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae94:	b088      	sub	sp, #32
    ae96:	4604      	mov	r4, r0
    ae98:	8800      	ldrh	r0, [r0, #0]
    ae9a:	a906      	add	r1, sp, #24
    ae9c:	f003 faed 	bl	e47a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    aea0:	2800      	cmp	r0, #0
    aea2:	d147      	bne.n	af34 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    aea4:	9807      	ldr	r0, [sp, #28]
    aea6:	f890 1162 	ldrb.w	r1, [r0, #354]	; 0x162
    aeaa:	f88d 1008 	strb.w	r1, [sp, #8]
    aeae:	9902      	ldr	r1, [sp, #8]
    aeb0:	9102      	str	r1, [sp, #8]
    aeb2:	f89d 1008 	ldrb.w	r1, [sp, #8]
    aeb6:	3078      	adds	r0, #120	; 0x78
    aeb8:	b101      	cbz	r1, aebc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>
    aeba:	2101      	movs	r1, #1
    aebc:	f88d 100c 	strb.w	r1, [sp, #12]
    aec0:	7bc1      	ldrb	r1, [r0, #15]
    aec2:	f04f 0800 	mov.w	r8, #0
    aec6:	0689      	lsls	r1, r1, #26
    aec8:	d502      	bpl.n	aed0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e4>
    aeca:	f89d 100c 	ldrb.w	r1, [sp, #12]
    aece:	b149      	cbz	r1, aee4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f8>
    aed0:	f05f 0100 	movs.w	r1, #0
    aed4:	f88d 1004 	strb.w	r1, [sp, #4]
    aed8:	2105      	movs	r1, #5
    aeda:	305c      	adds	r0, #92	; 0x5c
    aedc:	f004 ffd6 	bl	fe8c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x88>
    aee0:	b110      	cbz	r0, aee8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1fc>
    aee2:	e004      	b.n	aeee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x202>
    aee4:	2101      	movs	r1, #1
    aee6:	e7f5      	b.n	aed4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e8>
    aee8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    aeec:	b308      	cbz	r0, af32 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    aeee:	8921      	ldrh	r1, [r4, #8]
    aef0:	88e0      	ldrh	r0, [r4, #6]
    aef2:	f005 fdba 	bl	10a6a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    aef6:	2800      	cmp	r0, #0
    aef8:	d11c      	bne.n	af34 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    aefa:	88a1      	ldrh	r1, [r4, #4]
    aefc:	8860      	ldrh	r0, [r4, #2]
    aefe:	f005 fdb4 	bl	10a6a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    af02:	2800      	cmp	r0, #0
    af04:	d116      	bne.n	af34 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    af06:	8921      	ldrh	r1, [r4, #8]
    af08:	88e0      	ldrh	r0, [r4, #6]
    af0a:	f005 fda4 	bl	10a56 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    af0e:	2800      	cmp	r0, #0
    af10:	d110      	bne.n	af34 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    af12:	88a1      	ldrh	r1, [r4, #4]
    af14:	8860      	ldrh	r0, [r4, #2]
    af16:	f005 fd9e 	bl	10a56 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    af1a:	0006      	movs	r6, r0
    af1c:	d10a      	bne.n	af34 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    af1e:	9807      	ldr	r0, [sp, #28]
    af20:	f500 758d 	add.w	r5, r0, #282	; 0x11a
    af24:	27ff      	movs	r7, #255	; 0xff
    af26:	706f      	strb	r7, [r5, #1]
    af28:	f89d 100c 	ldrb.w	r1, [sp, #12]
    af2c:	b129      	cbz	r1, af3a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24e>
    af2e:	263a      	movs	r6, #58	; 0x3a
    af30:	e02e      	b.n	af90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    af32:	201a      	movs	r0, #26
    af34:	b008      	add	sp, #32
    af36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    af3a:	4641      	mov	r1, r8
    af3c:	aa03      	add	r2, sp, #12
    af3e:	f005 fda2 	bl	10a86 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
    af42:	8861      	ldrh	r1, [r4, #2]
    af44:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    af48:	4281      	cmp	r1, r0
    af4a:	d200      	bcs.n	af4e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x262>
    af4c:	4608      	mov	r0, r1
    af4e:	80e8      	strh	r0, [r5, #6]
    af50:	88a1      	ldrh	r1, [r4, #4]
    af52:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    af56:	4281      	cmp	r1, r0
    af58:	d200      	bcs.n	af5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x270>
    af5a:	4608      	mov	r0, r1
    af5c:	8128      	strh	r0, [r5, #8]
    af5e:	88e2      	ldrh	r2, [r4, #6]
    af60:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    af64:	428a      	cmp	r2, r1
    af66:	d200      	bcs.n	af6a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x27e>
    af68:	4611      	mov	r1, r2
    af6a:	8069      	strh	r1, [r5, #2]
    af6c:	8922      	ldrh	r2, [r4, #8]
    af6e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    af72:	428a      	cmp	r2, r1
    af74:	d200      	bcs.n	af78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28c>
    af76:	4611      	mov	r1, r2
    af78:	f640 0248 	movw	r2, #2120	; 0x848
    af7c:	80a9      	strh	r1, [r5, #4]
    af7e:	4291      	cmp	r1, r2
    af80:	d300      	bcc.n	af84 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    af82:	4611      	mov	r1, r2
    af84:	80a9      	strh	r1, [r5, #4]
    af86:	4290      	cmp	r0, r2
    af88:	d200      	bcs.n	af8c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a0>
    af8a:	4602      	mov	r2, r0
    af8c:	812a      	strh	r2, [r5, #8]
    af8e:	702f      	strb	r7, [r5, #0]
    af90:	f885 8001 	strb.w	r8, [r5, #1]
    af94:	4630      	mov	r0, r6
    af96:	e7cd      	b.n	af34 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    af98:	b510      	push	{r4, lr}
    af9a:	4604      	mov	r4, r0
    af9c:	88c1      	ldrh	r1, [r0, #6]
    af9e:	8880      	ldrh	r0, [r0, #4]
    afa0:	f005 fd63 	bl	10a6a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    afa4:	2800      	cmp	r0, #0
    afa6:	d10f      	bne.n	afc8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2dc>
    afa8:	8861      	ldrh	r1, [r4, #2]
    afaa:	8820      	ldrh	r0, [r4, #0]
    afac:	f005 fd5d 	bl	10a6a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    afb0:	2800      	cmp	r0, #0
    afb2:	d109      	bne.n	afc8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2dc>
    afb4:	4805      	ldr	r0, [pc, #20]	; (afcc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2e0>)
    afb6:	88a1      	ldrh	r1, [r4, #4]
    afb8:	8081      	strh	r1, [r0, #4]
    afba:	8821      	ldrh	r1, [r4, #0]
    afbc:	8001      	strh	r1, [r0, #0]
    afbe:	88e1      	ldrh	r1, [r4, #6]
    afc0:	80c1      	strh	r1, [r0, #6]
    afc2:	8861      	ldrh	r1, [r4, #2]
    afc4:	8041      	strh	r1, [r0, #2]
    afc6:	2000      	movs	r0, #0
    afc8:	bd10      	pop	{r4, pc}
    afca:	0000      	.short	0x0000
    afcc:	200002b4 	.word	0x200002b4
    afd0:	0c11d80c 	.word	0x0c11d80c
    afd4:	11d80059 	.word	0x11d80059

0000afd8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    afd8:	b510      	push	{r4, lr}
    afda:	f7fb ff01 	bl	6de0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    afde:	4805      	ldr	r0, [pc, #20]	; (aff4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    afe0:	6840      	ldr	r0, [r0, #4]
    afe2:	f005 fe6b 	bl	10cbc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x442>
    afe6:	f005 fbd6 	bl	10796 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    afea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    afee:	f7fc b867 	b.w	70c0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    aff2:	0000      	.short	0x0000
    aff4:	200002bc 	.word	0x200002bc

0000aff8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    aff8:	b510      	push	{r4, lr}
    affa:	4c05      	ldr	r4, [pc, #20]	; (b010 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    affc:	68a0      	ldr	r0, [r4, #8]
    affe:	f005 fe5d 	bl	10cbc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x442>
    b002:	68e0      	ldr	r0, [r4, #12]
    b004:	f005 fe5a 	bl	10cbc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x442>
    b008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b00c:	f005 bc28 	b.w	10860 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    b010:	200002bc 	.word	0x200002bc

0000b014 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    b014:	b510      	push	{r4, lr}
    b016:	4905      	ldr	r1, [pc, #20]	; (b02c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    b018:	4805      	ldr	r0, [pc, #20]	; (b030 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b01a:	f005 fe42 	bl	10ca2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x428>
    b01e:	4804      	ldr	r0, [pc, #16]	; (b030 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b024:	4903      	ldr	r1, [pc, #12]	; (b034 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    b026:	1d00      	adds	r0, r0, #4
    b028:	f005 be3b 	b.w	10ca2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x428>
    b02c:	200002cc 	.word	0x200002cc
    b030:	200002c0 	.word	0x200002c0
    b034:	200002d4 	.word	0x200002d4

0000b038 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    b038:	b510      	push	{r4, lr}
    b03a:	4908      	ldr	r1, [pc, #32]	; (b05c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    b03c:	4808      	ldr	r0, [pc, #32]	; (b060 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b03e:	f005 fe30 	bl	10ca2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x428>
    b042:	4807      	ldr	r0, [pc, #28]	; (b060 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b044:	4907      	ldr	r1, [pc, #28]	; (b064 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    b046:	1d00      	adds	r0, r0, #4
    b048:	f005 fe2b 	bl	10ca2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x428>
    b04c:	4804      	ldr	r0, [pc, #16]	; (b060 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b04e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b052:	4905      	ldr	r1, [pc, #20]	; (b068 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    b054:	3008      	adds	r0, #8
    b056:	f005 be24 	b.w	10ca2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x428>
    b05a:	0000      	.short	0x0000
    b05c:	200002e4 	.word	0x200002e4
    b060:	200002c0 	.word	0x200002c0
    b064:	200002ec 	.word	0x200002ec
    b068:	200002dc 	.word	0x200002dc

0000b06c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    b06c:	4801      	ldr	r0, [pc, #4]	; (b074 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    b06e:	7800      	ldrb	r0, [r0, #0]
    b070:	4770      	bx	lr
    b072:	0000      	.short	0x0000
    b074:	200002bc 	.word	0x200002bc
    b078:	b510      	push	{r4, lr}
    b07a:	f7fc f975 	bl	7368 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    b07e:	f7fc fff5 	bl	806c <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    b082:	4803      	ldr	r0, [pc, #12]	; (b090 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    b084:	f7fc f956 	bl	7334 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    b088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b08c:	f7fb beb4 	b.w	6df8 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    b090:	2000164f 	.word	0x2000164f
    b094:	4909      	ldr	r1, [pc, #36]	; (b0bc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    b096:	b510      	push	{r4, lr}
    b098:	2001      	movs	r0, #1
    b09a:	7008      	strb	r0, [r1, #0]
    b09c:	f7fc f994 	bl	73c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    b0a0:	f7fd fbc0 	bl	8824 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    b0a4:	f003 f90c 	bl	e2c0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    b0a8:	4805      	ldr	r0, [pc, #20]	; (b0c0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    b0aa:	f7fa fbd7 	bl	585c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    b0ae:	2000      	movs	r0, #0
    b0b0:	f7f9 fe9e 	bl	4df0 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    b0b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b0b8:	f7fb bea6 	b.w	6e08 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    b0bc:	200002bc 	.word	0x200002bc
    b0c0:	2000164f 	.word	0x2000164f

0000b0c4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    b0c4:	4a04      	ldr	r2, [pc, #16]	; (b0d8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    b0c6:	08c1      	lsrs	r1, r0, #3
    b0c8:	f000 0307 	and.w	r3, r0, #7
    b0cc:	2001      	movs	r0, #1
    b0ce:	4098      	lsls	r0, r3
    b0d0:	5c53      	ldrb	r3, [r2, r1]
    b0d2:	4303      	orrs	r3, r0
    b0d4:	5453      	strb	r3, [r2, r1]
    b0d6:	4770      	bx	lr
    b0d8:	20000020 	.word	0x20000020

0000b0dc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    b0dc:	4901      	ldr	r1, [pc, #4]	; (b0e4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    b0de:	e9d1 0100 	ldrd	r0, r1, [r1]
    b0e2:	4770      	bx	lr
    b0e4:	20000020 	.word	0x20000020

0000b0e8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    b0e8:	4806      	ldr	r0, [pc, #24]	; (b104 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    b0ea:	8801      	ldrh	r1, [r0, #0]
    b0ec:	7900      	ldrb	r0, [r0, #4]
    b0ee:	0602      	lsls	r2, r0, #24
    b0f0:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    b0f4:	f000 0001 	and.w	r0, r0, #1
    b0f8:	1800      	adds	r0, r0, r0
    b0fa:	b2c0      	uxtb	r0, r0
    b0fc:	f040 0001 	orr.w	r0, r0, #1
    b100:	4770      	bx	lr
    b102:	0000      	.short	0x0000
    b104:	20000020 	.word	0x20000020

0000b108 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    b108:	b510      	push	{r4, lr}
    b10a:	f7f9 f8cf 	bl	42ac <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    b10e:	2200      	movs	r2, #0
    b110:	4b08      	ldr	r3, [pc, #32]	; (b134 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    b112:	4611      	mov	r1, r2
    b114:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    b118:	4284      	cmp	r4, r0
    b11a:	d303      	bcc.n	b124 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    b11c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    b120:	7882      	ldrb	r2, [r0, #2]
    b122:	e003      	b.n	b12c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    b124:	1c49      	adds	r1, r1, #1
    b126:	b2c9      	uxtb	r1, r1
    b128:	290c      	cmp	r1, #12
    b12a:	d3f3      	bcc.n	b114 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    b12c:	4802      	ldr	r0, [pc, #8]	; (b138 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    b12e:	7002      	strb	r2, [r0, #0]
    b130:	bd10      	pop	{r4, pc}
    b132:	0000      	.short	0x0000
    b134:	00010d0e 	.word	0x00010d0e
    b138:	2000033c 	.word	0x2000033c

0000b13c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    b13c:	b570      	push	{r4, r5, r6, lr}
    b13e:	4605      	mov	r5, r0
    b140:	4616      	mov	r6, r2
    b142:	460c      	mov	r4, r1
    b144:	2002      	movs	r0, #2
    b146:	f000 f9b7 	bl	b4b8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b14a:	4906      	ldr	r1, [pc, #24]	; (b164 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    b14c:	2001      	movs	r0, #1
    b14e:	1ef6      	subs	r6, r6, #3
    b150:	7008      	strb	r0, [r1, #0]
    b152:	4805      	ldr	r0, [pc, #20]	; (b168 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b154:	6006      	str	r6, [r0, #0]
    b156:	4804      	ldr	r0, [pc, #16]	; (b168 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b158:	3808      	subs	r0, #8
    b15a:	6005      	str	r5, [r0, #0]
    b15c:	1f00      	subs	r0, r0, #4
    b15e:	6004      	str	r4, [r0, #0]
    b160:	bd70      	pop	{r4, r5, r6, pc}
    b162:	0000      	.short	0x0000
    b164:	2000033d 	.word	0x2000033d
    b168:	4000f510 	.word	0x4000f510

0000b16c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    b16c:	b510      	push	{r4, lr}
    b16e:	4c0c      	ldr	r4, [pc, #48]	; (b1a0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    b170:	7820      	ldrb	r0, [r4, #0]
    b172:	b180      	cbz	r0, b196 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    b174:	490b      	ldr	r1, [pc, #44]	; (b1a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    b176:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b17a:	6008      	str	r0, [r1, #0]
    b17c:	f000 f86a 	bl	b254 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b180:	2100      	movs	r1, #0
    b182:	b120      	cbz	r0, b18e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    b184:	2001      	movs	r0, #1
    b186:	7060      	strb	r0, [r4, #1]
    b188:	4807      	ldr	r0, [pc, #28]	; (b1a8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    b18a:	6800      	ldr	r0, [r0, #0]
    b18c:	e001      	b.n	b192 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    b18e:	7061      	strb	r1, [r4, #1]
    b190:	2010      	movs	r0, #16
    b192:	70a0      	strb	r0, [r4, #2]
    b194:	7021      	strb	r1, [r4, #0]
    b196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b19a:	2000      	movs	r0, #0
    b19c:	f000 b98c 	b.w	b4b8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b1a0:	2000033d 	.word	0x2000033d
    b1a4:	4001f508 	.word	0x4001f508
    b1a8:	4000f400 	.word	0x4000f400

0000b1ac <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    b1ac:	b510      	push	{r4, lr}
    b1ae:	2002      	movs	r0, #2
    b1b0:	f000 f982 	bl	b4b8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b1b4:	4904      	ldr	r1, [pc, #16]	; (b1c8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    b1b6:	2001      	movs	r0, #1
    b1b8:	7008      	strb	r0, [r1, #0]
    b1ba:	f000 f859 	bl	b270 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    b1be:	4903      	ldr	r1, [pc, #12]	; (b1cc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    b1c0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b1c4:	6008      	str	r0, [r1, #0]
    b1c6:	bd10      	pop	{r4, pc}
    b1c8:	2000033d 	.word	0x2000033d
    b1cc:	4001f504 	.word	0x4001f504

0000b1d0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    b1d0:	4803      	ldr	r0, [pc, #12]	; (b1e0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    b1d2:	2100      	movs	r1, #0
    b1d4:	7001      	strb	r1, [r0, #0]
    b1d6:	7041      	strb	r1, [r0, #1]
    b1d8:	2110      	movs	r1, #16
    b1da:	7081      	strb	r1, [r0, #2]
    b1dc:	4770      	bx	lr
    b1de:	0000      	.short	0x0000
    b1e0:	2000033d 	.word	0x2000033d

0000b1e4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    b1e4:	4807      	ldr	r0, [pc, #28]	; (b204 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    b1e6:	b510      	push	{r4, lr}
    b1e8:	7801      	ldrb	r1, [r0, #0]
    b1ea:	b141      	cbz	r1, b1fe <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    b1ec:	f000 f832 	bl	b254 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b1f0:	b118      	cbz	r0, b1fa <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    b1f2:	4805      	ldr	r0, [pc, #20]	; (b208 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    b1f4:	6800      	ldr	r0, [r0, #0]
    b1f6:	b2c0      	uxtb	r0, r0
    b1f8:	bd10      	pop	{r4, pc}
    b1fa:	2010      	movs	r0, #16
    b1fc:	bd10      	pop	{r4, pc}
    b1fe:	7880      	ldrb	r0, [r0, #2]
    b200:	bd10      	pop	{r4, pc}
    b202:	0000      	.short	0x0000
    b204:	2000033d 	.word	0x2000033d
    b208:	4000f400 	.word	0x4000f400

0000b20c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    b20c:	4808      	ldr	r0, [pc, #32]	; (b230 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    b20e:	b510      	push	{r4, lr}
    b210:	7801      	ldrb	r1, [r0, #0]
    b212:	b159      	cbz	r1, b22c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    b214:	4807      	ldr	r0, [pc, #28]	; (b234 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    b216:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b21a:	b128      	cbz	r0, b228 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    b21c:	f000 f80c 	bl	b238 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b220:	2800      	cmp	r0, #0
    b222:	d000      	beq.n	b226 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    b224:	2001      	movs	r0, #1
    b226:	bd10      	pop	{r4, pc}
    b228:	2002      	movs	r0, #2
    b22a:	bd10      	pop	{r4, pc}
    b22c:	7840      	ldrb	r0, [r0, #1]
    b22e:	bd10      	pop	{r4, pc}
    b230:	2000033d 	.word	0x2000033d
    b234:	4000f000 	.word	0x4000f000
    b238:	4805      	ldr	r0, [pc, #20]	; (b250 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    b23a:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    b23e:	b111      	cbz	r1, b246 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    b240:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b244:	b108      	cbz	r0, b24a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    b246:	2000      	movs	r0, #0
    b248:	4770      	bx	lr
    b24a:	2001      	movs	r0, #1
    b24c:	4770      	bx	lr
    b24e:	0000      	.short	0x0000
    b250:	4000f000 	.word	0x4000f000
    b254:	4805      	ldr	r0, [pc, #20]	; (b26c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    b256:	b510      	push	{r4, lr}
    b258:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b25c:	b120      	cbz	r0, b268 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b25e:	f7ff ffeb 	bl	b238 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b262:	b108      	cbz	r0, b268 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b264:	2001      	movs	r0, #1
    b266:	bd10      	pop	{r4, pc}
    b268:	2000      	movs	r0, #0
    b26a:	bd10      	pop	{r4, pc}
    b26c:	4000f000 	.word	0x4000f000
    b270:	4804      	ldr	r0, [pc, #16]	; (b284 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    b272:	2100      	movs	r1, #0
    b274:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b278:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b27c:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b280:	4770      	bx	lr
    b282:	0000      	.short	0x0000
    b284:	4000f000 	.word	0x4000f000

0000b288 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    b288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b28c:	4604      	mov	r4, r0
    b28e:	461e      	mov	r6, r3
    b290:	4690      	mov	r8, r2
    b292:	460f      	mov	r7, r1
    b294:	2001      	movs	r0, #1
    b296:	f000 f90f 	bl	b4b8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b29a:	4d1e      	ldr	r5, [pc, #120]	; (b314 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    b29c:	481e      	ldr	r0, [pc, #120]	; (b318 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    b29e:	f004 0103 	and.w	r1, r4, #3
    b2a2:	712e      	strb	r6, [r5, #4]
    b2a4:	6800      	ldr	r0, [r0, #0]
    b2a6:	0432      	lsls	r2, r6, #16
    b2a8:	f361 0007 	bfi	r0, r1, #0, #8
    b2ac:	f366 200f 	bfi	r0, r6, #8, #8
    b2b0:	0c00      	lsrs	r0, r0, #16
    b2b2:	4e1a      	ldr	r6, [pc, #104]	; (b31c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    b2b4:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    b2b8:	4308      	orrs	r0, r1
    b2ba:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    b2be:	4818      	ldr	r0, [pc, #96]	; (b320 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    b2c0:	6007      	str	r7, [r0, #0]
    b2c2:	f001 fdcb 	bl	ce5c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b2c6:	b938      	cbnz	r0, b2d8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    b2c8:	4815      	ldr	r0, [pc, #84]	; (b320 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    b2ca:	3010      	adds	r0, #16
    b2cc:	6801      	ldr	r1, [r0, #0]
    b2ce:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    b2d2:	ea41 0108 	orr.w	r1, r1, r8
    b2d6:	6001      	str	r1, [r0, #0]
    b2d8:	f000 f8e4 	bl	b4a4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    b2dc:	b10c      	cbz	r4, b2e2 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    b2de:	2c04      	cmp	r4, #4
    b2e0:	d107      	bne.n	b2f2 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    b2e2:	4811      	ldr	r0, [pc, #68]	; (b328 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    b2e4:	490d      	ldr	r1, [pc, #52]	; (b31c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    b2e6:	4a0f      	ldr	r2, [pc, #60]	; (b324 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    b2e8:	1d09      	adds	r1, r1, #4
    b2ea:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    b2ee:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    b2f2:	2001      	movs	r0, #1
    b2f4:	7068      	strb	r0, [r5, #1]
    b2f6:	70ec      	strb	r4, [r5, #3]
    b2f8:	b11c      	cbz	r4, b302 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    b2fa:	2c01      	cmp	r4, #1
    b2fc:	d001      	beq.n	b302 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    b2fe:	2c02      	cmp	r4, #2
    b300:	d106      	bne.n	b310 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    b302:	7028      	strb	r0, [r5, #0]
    b304:	2100      	movs	r1, #0
    b306:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    b30a:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    b30e:	6030      	str	r0, [r6, #0]
    b310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b314:	20000340 	.word	0x20000340
    b318:	0000b4b4 	.word	0x0000b4b4
    b31c:	4000f000 	.word	0x4000f000
    b320:	4000f508 	.word	0x4000f508
    b324:	4000f100 	.word	0x4000f100
    b328:	4001f088 	.word	0x4001f088

0000b32c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    b32c:	b570      	push	{r4, r5, r6, lr}
    b32e:	4a1c      	ldr	r2, [pc, #112]	; (b3a0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    b330:	7853      	ldrb	r3, [r2, #1]
    b332:	b1a3      	cbz	r3, b35e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    b334:	4b1b      	ldr	r3, [pc, #108]	; (b3a4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    b336:	6019      	str	r1, [r3, #0]
    b338:	1d19      	adds	r1, r3, #4
    b33a:	6008      	str	r0, [r1, #0]
    b33c:	2501      	movs	r5, #1
    b33e:	7095      	strb	r5, [r2, #2]
    b340:	4610      	mov	r0, r2
    b342:	78d6      	ldrb	r6, [r2, #3]
    b344:	4b18      	ldr	r3, [pc, #96]	; (b3a8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    b346:	7800      	ldrb	r0, [r0, #0]
    b348:	4c18      	ldr	r4, [pc, #96]	; (b3ac <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    b34a:	2100      	movs	r1, #0
    b34c:	b156      	cbz	r6, b364 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    b34e:	2e04      	cmp	r6, #4
    b350:	d01b      	beq.n	b38a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    b352:	b308      	cbz	r0, b398 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    b354:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    b358:	0668      	lsls	r0, r5, #25
    b35a:	6018      	str	r0, [r3, #0]
    b35c:	bd70      	pop	{r4, r5, r6, pc}
    b35e:	f44f 71c2 	mov.w	r1, #388	; 0x184
    b362:	e01a      	b.n	b39a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    b364:	b178      	cbz	r0, b386 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    b366:	4620      	mov	r0, r4
    b368:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    b36c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    b370:	601e      	str	r6, [r3, #0]
    b372:	1271      	asrs	r1, r6, #9
    b374:	f005 fd00 	bl	10d78 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b378:	2800      	cmp	r0, #0
    b37a:	d0ef      	beq.n	b35c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    b37c:	6065      	str	r5, [r4, #4]
    b37e:	480a      	ldr	r0, [pc, #40]	; (b3a8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    b380:	1d00      	adds	r0, r0, #4
    b382:	6006      	str	r6, [r0, #0]
    b384:	bd70      	pop	{r4, r5, r6, pc}
    b386:	21b3      	movs	r1, #179	; 0xb3
    b388:	e007      	b.n	b39a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    b38a:	7015      	strb	r5, [r2, #0]
    b38c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    b390:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    b394:	6025      	str	r5, [r4, #0]
    b396:	bd70      	pop	{r4, r5, r6, pc}
    b398:	21c6      	movs	r1, #198	; 0xc6
    b39a:	203c      	movs	r0, #60	; 0x3c
    b39c:	f7f9 fb4e 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b3a0:	20000340 	.word	0x20000340
    b3a4:	4000f50c 	.word	0x4000f50c
    b3a8:	4001f504 	.word	0x4001f504
    b3ac:	4000f000 	.word	0x4000f000

0000b3b0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    b3b0:	b570      	push	{r4, r5, r6, lr}
    b3b2:	4d05      	ldr	r5, [pc, #20]	; (b3c8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    b3b4:	2400      	movs	r4, #0
    b3b6:	7828      	ldrb	r0, [r5, #0]
    b3b8:	b110      	cbz	r0, b3c0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    b3ba:	f000 f873 	bl	b4a4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    b3be:	702c      	strb	r4, [r5, #0]
    b3c0:	706c      	strb	r4, [r5, #1]
    b3c2:	70ac      	strb	r4, [r5, #2]
    b3c4:	bd70      	pop	{r4, r5, r6, pc}
    b3c6:	0000      	.short	0x0000
    b3c8:	20000340 	.word	0x20000340

0000b3cc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    b3cc:	4802      	ldr	r0, [pc, #8]	; (b3d8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    b3ce:	2100      	movs	r1, #0
    b3d0:	7001      	strb	r1, [r0, #0]
    b3d2:	7041      	strb	r1, [r0, #1]
    b3d4:	7081      	strb	r1, [r0, #2]
    b3d6:	4770      	bx	lr
    b3d8:	20000340 	.word	0x20000340

0000b3dc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    b3dc:	480b      	ldr	r0, [pc, #44]	; (b40c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    b3de:	b510      	push	{r4, lr}
    b3e0:	7800      	ldrb	r0, [r0, #0]
    b3e2:	b158      	cbz	r0, b3fc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    b3e4:	f44f 7182 	mov.w	r1, #260	; 0x104
    b3e8:	4809      	ldr	r0, [pc, #36]	; (b410 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    b3ea:	f005 fcc5 	bl	10d78 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b3ee:	b140      	cbz	r0, b402 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    b3f0:	4808      	ldr	r0, [pc, #32]	; (b414 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    b3f2:	6800      	ldr	r0, [r0, #0]
    b3f4:	2800      	cmp	r0, #0
    b3f6:	d000      	beq.n	b3fa <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    b3f8:	2001      	movs	r0, #1
    b3fa:	bd10      	pop	{r4, pc}
    b3fc:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    b400:	e001      	b.n	b406 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    b402:	f240 11eb 	movw	r1, #491	; 0x1eb
    b406:	203c      	movs	r0, #60	; 0x3c
    b408:	f7f9 fb18 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b40c:	20000340 	.word	0x20000340
    b410:	4000f000 	.word	0x4000f000
    b414:	4000f400 	.word	0x4000f400

0000b418 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    b418:	4801      	ldr	r0, [pc, #4]	; (b420 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    b41a:	2101      	movs	r1, #1
    b41c:	6081      	str	r1, [r0, #8]
    b41e:	4770      	bx	lr
    b420:	4000f000 	.word	0x4000f000

0000b424 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    b424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b428:	481b      	ldr	r0, [pc, #108]	; (b498 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    b42a:	7800      	ldrb	r0, [r0, #0]
    b42c:	b1d8      	cbz	r0, b466 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    b42e:	f8df 806c 	ldr.w	r8, [pc, #108]	; b49c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b432:	f44f 7682 	mov.w	r6, #260	; 0x104
    b436:	4631      	mov	r1, r6
    b438:	4640      	mov	r0, r8
    b43a:	f005 fc9d 	bl	10d78 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b43e:	2800      	cmp	r0, #0
    b440:	d128      	bne.n	b494 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    b442:	2002      	movs	r0, #2
    b444:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    b448:	4c15      	ldr	r4, [pc, #84]	; (b4a0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    b44a:	6820      	ldr	r0, [r4, #0]
    b44c:	43c0      	mvns	r0, r0
    b44e:	f340 1500 	sbfx	r5, r0, #4, #1
    b452:	6820      	ldr	r0, [r4, #0]
    b454:	f040 0010 	orr.w	r0, r0, #16
    b458:	6020      	str	r0, [r4, #0]
    b45a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    b45e:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b462:	1c6d      	adds	r5, r5, #1
    b464:	e008      	b.n	b478 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    b466:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
    b46a:	203c      	movs	r0, #60	; 0x3c
    b46c:	f7f9 fae6 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b470:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    b474:	f7f9 f93c 	bl	46f0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b478:	4631      	mov	r1, r6
    b47a:	4640      	mov	r0, r8
    b47c:	f005 fc7c 	bl	10d78 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b480:	2800      	cmp	r0, #0
    b482:	d0f5      	beq.n	b470 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    b484:	b91d      	cbnz	r5, b48e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    b486:	6820      	ldr	r0, [r4, #0]
    b488:	f020 0010 	bic.w	r0, r0, #16
    b48c:	6020      	str	r0, [r4, #0]
    b48e:	2002      	movs	r0, #2
    b490:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    b494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b498:	20000340 	.word	0x20000340
    b49c:	4000f000 	.word	0x4000f000
    b4a0:	e000ed10 	.word	0xe000ed10
    b4a4:	4902      	ldr	r1, [pc, #8]	; (b4b0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    b4a6:	4801      	ldr	r0, [pc, #4]	; (b4ac <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    b4a8:	6008      	str	r0, [r1, #0]
    b4aa:	4770      	bx	lr
    b4ac:	02020000 	.word	0x02020000
    b4b0:	4001f508 	.word	0x4001f508
    b4b4:	00010000 	.word	0x00010000

0000b4b8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    b4b8:	b510      	push	{r4, lr}
    b4ba:	4604      	mov	r4, r0
    b4bc:	f000 f820 	bl	b500 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    b4c0:	2c00      	cmp	r4, #0
    b4c2:	d00e      	beq.n	b4e2 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    b4c4:	4a0b      	ldr	r2, [pc, #44]	; (b4f4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    b4c6:	480b      	ldr	r0, [pc, #44]	; (b4f4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    b4c8:	490b      	ldr	r1, [pc, #44]	; (b4f8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b4ca:	3214      	adds	r2, #20
    b4cc:	2c01      	cmp	r4, #1
    b4ce:	d005      	beq.n	b4dc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    b4d0:	2c02      	cmp	r4, #2
    b4d2:	d007      	beq.n	b4e4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    b4d4:	2181      	movs	r1, #129	; 0x81
    b4d6:	203d      	movs	r0, #61	; 0x3d
    b4d8:	f7f9 fab0 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b4dc:	2302      	movs	r3, #2
    b4de:	6003      	str	r3, [r0, #0]
    b4e0:	6011      	str	r1, [r2, #0]
    b4e2:	bd10      	pop	{r4, pc}
    b4e4:	2303      	movs	r3, #3
    b4e6:	6003      	str	r3, [r0, #0]
    b4e8:	6011      	str	r1, [r2, #0]
    b4ea:	4904      	ldr	r1, [pc, #16]	; (b4fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    b4ec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b4f0:	6008      	str	r0, [r1, #0]
    b4f2:	bd10      	pop	{r4, pc}
    b4f4:	4000f500 	.word	0x4000f500
    b4f8:	20001751 	.word	0x20001751
    b4fc:	4001f504 	.word	0x4001f504
    b500:	4805      	ldr	r0, [pc, #20]	; (b518 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    b502:	b510      	push	{r4, lr}
    b504:	2100      	movs	r1, #0
    b506:	6001      	str	r1, [r0, #0]
    b508:	6001      	str	r1, [r0, #0]
    b50a:	f7ff ff51 	bl	b3b0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    b50e:	4903      	ldr	r1, [pc, #12]	; (b51c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    b510:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b514:	6008      	str	r0, [r1, #0]
    b516:	bd10      	pop	{r4, pc}
    b518:	4000f500 	.word	0x4000f500
    b51c:	4001f508 	.word	0x4001f508

0000b520 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    b520:	4805      	ldr	r0, [pc, #20]	; (b538 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    b522:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b526:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    b52a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b52e:	2100      	movs	r1, #0
    b530:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    b534:	4770      	bx	lr
    b536:	0000      	.short	0x0000
    b538:	40001000 	.word	0x40001000

0000b53c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    b53c:	4904      	ldr	r1, [pc, #16]	; (b550 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    b53e:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    b542:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    b546:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    b54a:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    b54e:	4770      	bx	lr
    b550:	40001000 	.word	0x40001000

0000b554 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    b554:	4801      	ldr	r0, [pc, #4]	; (b55c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    b556:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    b55a:	4770      	bx	lr
    b55c:	20001200 	.word	0x20001200

0000b560 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    b560:	4902      	ldr	r1, [pc, #8]	; (b56c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    b562:	5c08      	ldrb	r0, [r1, r0]
    b564:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    b568:	4770      	bx	lr
    b56a:	0000      	.short	0x0000
    b56c:	0000c28e 	.word	0x0000c28e

0000b570 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    b570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b572:	4c24      	ldr	r4, [pc, #144]	; (b604 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    b574:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b578:	f010 0f10 	tst.w	r0, #16
    b57c:	d001      	beq.n	b582 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    b57e:	2701      	movs	r7, #1
    b580:	e000      	b.n	b584 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    b582:	2700      	movs	r7, #0
    b584:	2010      	movs	r0, #16
    b586:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    b58a:	2002      	movs	r0, #2
    b58c:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b590:	481d      	ldr	r0, [pc, #116]	; (b608 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    b592:	2500      	movs	r5, #0
    b594:	491d      	ldr	r1, [pc, #116]	; (b60c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    b596:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    b59a:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    b59e:	6008      	str	r0, [r1, #0]
    b5a0:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    b5a4:	f44f 7688 	mov.w	r6, #272	; 0x110
    b5a8:	f010 0fff 	tst.w	r0, #255	; 0xff
    b5ac:	d019      	beq.n	b5e2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    b5ae:	20ff      	movs	r0, #255	; 0xff
    b5b0:	f88d 0000 	strb.w	r0, [sp]
    b5b4:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b5b8:	2001      	movs	r0, #1
    b5ba:	6120      	str	r0, [r4, #16]
    b5bc:	e005      	b.n	b5ca <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    b5be:	bf00      	nop
    b5c0:	f89d 0000 	ldrb.w	r0, [sp]
    b5c4:	1e40      	subs	r0, r0, #1
    b5c6:	f88d 0000 	strb.w	r0, [sp]
    b5ca:	f89d 0000 	ldrb.w	r0, [sp]
    b5ce:	b128      	cbz	r0, b5dc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    b5d0:	4631      	mov	r1, r6
    b5d2:	4620      	mov	r0, r4
    b5d4:	f005 fbff 	bl	10dd6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b5d8:	2800      	cmp	r0, #0
    b5da:	d0f1      	beq.n	b5c0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    b5dc:	f89d 0000 	ldrb.w	r0, [sp]
    b5e0:	b158      	cbz	r0, b5fa <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    b5e2:	f000 fc49 	bl	be78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    b5e6:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b5ea:	f000 fdd1 	bl	c190 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    b5ee:	2f00      	cmp	r7, #0
    b5f0:	d002      	beq.n	b5f8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    b5f2:	2010      	movs	r0, #16
    b5f4:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    b5f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b5fa:	f640 0183 	movw	r1, #2179	; 0x883
    b5fe:	203e      	movs	r0, #62	; 0x3e
    b600:	f7f9 fa1c 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b604:	40001000 	.word	0x40001000
    b608:	20001200 	.word	0x20001200
    b60c:	4001f508 	.word	0x4001f508

0000b610 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    b610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b614:	4d18      	ldr	r5, [pc, #96]	; (b678 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    b616:	4607      	mov	r7, r0
    b618:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    b61c:	07c2      	lsls	r2, r0, #31
    b61e:	d00f      	beq.n	b640 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    b620:	4c16      	ldr	r4, [pc, #88]	; (b67c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    b622:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    b626:	f042 0201 	orr.w	r2, r2, #1
    b62a:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    b62e:	f040 0002 	orr.w	r0, r0, #2
    b632:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    b636:	2601      	movs	r6, #1
    b638:	b13f      	cbz	r7, b64a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    b63a:	2f01      	cmp	r7, #1
    b63c:	d00b      	beq.n	b656 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    b63e:	e010      	b.n	b662 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    b640:	f44f 61ed 	mov.w	r1, #1896	; 0x768
    b644:	203e      	movs	r0, #62	; 0x3e
    b646:	f7f9 f9f9 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b64a:	4608      	mov	r0, r1
    b64c:	f000 fdfa 	bl	c244 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    b650:	726e      	strb	r6, [r5, #9]
    b652:	6026      	str	r6, [r4, #0]
    b654:	e005      	b.n	b662 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    b656:	4608      	mov	r0, r1
    b658:	f000 fdda 	bl	c210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    b65c:	2002      	movs	r0, #2
    b65e:	7268      	strb	r0, [r5, #9]
    b660:	6066      	str	r6, [r4, #4]
    b662:	4807      	ldr	r0, [pc, #28]	; (b680 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    b664:	64c6      	str	r6, [r0, #76]	; 0x4c
    b666:	4806      	ldr	r0, [pc, #24]	; (b680 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    b668:	300c      	adds	r0, #12
    b66a:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    b66e:	4638      	mov	r0, r7
    b670:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b674:	f000 bd5e 	b.w	c134 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    b678:	20001200 	.word	0x20001200
    b67c:	40001000 	.word	0x40001000
    b680:	40008000 	.word	0x40008000

0000b684 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    b684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b688:	4c2c      	ldr	r4, [pc, #176]	; (b73c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    b68a:	0006      	movs	r6, r0
    b68c:	4d2c      	ldr	r5, [pc, #176]	; (b740 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    b68e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b692:	f8df 80b0 	ldr.w	r8, [pc, #176]	; b744 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    b696:	f040 0002 	orr.w	r0, r0, #2
    b69a:	4689      	mov	r9, r1
    b69c:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b6a0:	f04f 0700 	mov.w	r7, #0
    b6a4:	d002      	beq.n	b6ac <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    b6a6:	2e01      	cmp	r6, #1
    b6a8:	d020      	beq.n	b6ec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    b6aa:	e036      	b.n	b71a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    b6ac:	4608      	mov	r0, r1
    b6ae:	f000 fdc9 	bl	c244 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    b6b2:	2001      	movs	r0, #1
    b6b4:	7260      	strb	r0, [r4, #9]
    b6b6:	79e0      	ldrb	r0, [r4, #7]
    b6b8:	2801      	cmp	r0, #1
    b6ba:	d105      	bne.n	b6c8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    b6bc:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    b6c0:	f040 0008 	orr.w	r0, r0, #8
    b6c4:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b6c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b6ca:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    b6ce:	62a0      	str	r0, [r4, #40]	; 0x28
    b6d0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b6d4:	f8c8 0000 	str.w	r0, [r8]
    b6d8:	491b      	ldr	r1, [pc, #108]	; (b748 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    b6da:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    b6de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b6e2:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    b6e6:	fbb0 f7f1 	udiv	r7, r0, r1
    b6ea:	e016      	b.n	b71a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    b6ec:	4608      	mov	r0, r1
    b6ee:	f000 fd8f 	bl	c210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    b6f2:	2002      	movs	r0, #2
    b6f4:	7260      	strb	r0, [r4, #9]
    b6f6:	79e0      	ldrb	r0, [r4, #7]
    b6f8:	2801      	cmp	r0, #1
    b6fa:	d105      	bne.n	b708 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    b6fc:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    b700:	f040 0004 	orr.w	r0, r0, #4
    b704:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b708:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b70a:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    b70e:	62a0      	str	r0, [r4, #40]	; 0x28
    b710:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    b714:	f8c8 0000 	str.w	r0, [r8]
    b718:	2729      	movs	r7, #41	; 0x29
    b71a:	f000 fc19 	bl	bf50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    b71e:	f001 fa71 	bl	cc04 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    b722:	b120      	cbz	r0, b72e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    b724:	f7ff ff24 	bl	b570 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b728:	2000      	movs	r0, #0
    b72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b72e:	2100      	movs	r1, #0
    b730:	4630      	mov	r0, r6
    b732:	f000 fcff 	bl	c134 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    b736:	4638      	mov	r0, r7
    b738:	e7f7      	b.n	b72a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    b73a:	0000      	.short	0x0000
    b73c:	20001200 	.word	0x20001200
    b740:	40001000 	.word	0x40001000
    b744:	4001f504 	.word	0x4001f504
    b748:	0000c288 	.word	0x0000c288

0000b74c <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    b74c:	4a02      	ldr	r2, [pc, #8]	; (b758 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    b74e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    b750:	6003      	str	r3, [r0, #0]
    b752:	6b50      	ldr	r0, [r2, #52]	; 0x34
    b754:	6008      	str	r0, [r1, #0]
    b756:	4770      	bx	lr
    b758:	20001200 	.word	0x20001200

0000b75c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    b75c:	b510      	push	{r4, lr}
    b75e:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    b760:	4901      	ldr	r1, [pc, #4]	; (b768 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    b762:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    b766:	bd10      	pop	{r4, pc}
    b768:	200011f0 	.word	0x200011f0

0000b76c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    b76c:	490f      	ldr	r1, [pc, #60]	; (b7ac <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    b76e:	b510      	push	{r4, lr}
    b770:	69ca      	ldr	r2, [r1, #28]
    b772:	4282      	cmp	r2, r0
    b774:	d302      	bcc.n	b77c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    b776:	f640 1117 	movw	r1, #2327	; 0x917
    b77a:	e00b      	b.n	b794 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    b77c:	2201      	movs	r2, #1
    b77e:	730a      	strb	r2, [r1, #12]
    b780:	6108      	str	r0, [r1, #16]
    b782:	490b      	ldr	r1, [pc, #44]	; (b7b0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    b784:	644a      	str	r2, [r1, #68]	; 0x44
    b786:	1d0a      	adds	r2, r1, #4
    b788:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    b78c:	4283      	cmp	r3, r0
    b78e:	d304      	bcc.n	b79a <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    b790:	f44f 6112 	mov.w	r1, #2336	; 0x920
    b794:	203e      	movs	r0, #62	; 0x3e
    b796:	f7f9 f951 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b79a:	2300      	movs	r3, #0
    b79c:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    b7a0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b7a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b7a8:	f000 bc98 	b.w	c0dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    b7ac:	20001200 	.word	0x20001200
    b7b0:	40008000 	.word	0x40008000

0000b7b4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    b7b4:	b570      	push	{r4, r5, r6, lr}
    b7b6:	4c0f      	ldr	r4, [pc, #60]	; (b7f4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    b7b8:	4603      	mov	r3, r0
    b7ba:	2002      	movs	r0, #2
    b7bc:	7320      	strb	r0, [r4, #12]
    b7be:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    b7c2:	2096      	movs	r0, #150	; 0x96
    b7c4:	f894 1020 	ldrb.w	r1, [r4, #32]
    b7c8:	7d22      	ldrb	r2, [r4, #20]
    b7ca:	2d01      	cmp	r5, #1
    b7cc:	d00e      	beq.n	b7ec <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    b7ce:	f000 fd97 	bl	c300 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    b7d2:	6120      	str	r0, [r4, #16]
    b7d4:	4808      	ldr	r0, [pc, #32]	; (b7f8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    b7d6:	2100      	movs	r1, #0
    b7d8:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b7dc:	6921      	ldr	r1, [r4, #16]
    b7de:	69e0      	ldr	r0, [r4, #28]
    b7e0:	4408      	add	r0, r1
    b7e2:	4905      	ldr	r1, [pc, #20]	; (b7f8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    b7e4:	1d09      	adds	r1, r1, #4
    b7e6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b7ea:	bd70      	pop	{r4, r5, r6, pc}
    b7ec:	f000 fda6 	bl	c33c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    b7f0:	e7ef      	b.n	b7d2 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    b7f2:	0000      	.short	0x0000
    b7f4:	20001200 	.word	0x20001200
    b7f8:	40008000 	.word	0x40008000

0000b7fc <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    b7fc:	b510      	push	{r4, lr}
    b7fe:	f001 fb49 	bl	ce94 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b802:	2800      	cmp	r0, #0
    b804:	d006      	beq.n	b814 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    b806:	4804      	ldr	r0, [pc, #16]	; (b818 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    b808:	6801      	ldr	r1, [r0, #0]
    b80a:	f021 0101 	bic.w	r1, r1, #1
    b80e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    b812:	6001      	str	r1, [r0, #0]
    b814:	bd10      	pop	{r4, pc}
    b816:	0000      	.short	0x0000
    b818:	40001774 	.word	0x40001774

0000b81c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    b81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b820:	2238      	movs	r2, #56	; 0x38
    b822:	2100      	movs	r1, #0
    b824:	4813      	ldr	r0, [pc, #76]	; (b874 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    b826:	f001 fbd3 	bl	cfd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b82a:	f000 fcb1 	bl	c190 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    b82e:	f001 faea 	bl	ce06 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b832:	4d11      	ldr	r5, [pc, #68]	; (b878 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b834:	4e10      	ldr	r6, [pc, #64]	; (b878 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b836:	2400      	movs	r4, #0
    b838:	4f0f      	ldr	r7, [pc, #60]	; (b878 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b83a:	3508      	adds	r5, #8
    b83c:	3610      	adds	r6, #16
    b83e:	b928      	cbnz	r0, b84c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b840:	f001 faf8 	bl	ce34 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    b844:	b910      	cbnz	r0, b84c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b846:	f001 faff 	bl	ce48 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    b84a:	b108      	cbz	r0, b850 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    b84c:	2224      	movs	r2, #36	; 0x24
    b84e:	e006      	b.n	b85e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b850:	f001 fb3a 	bl	cec8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b854:	b910      	cbnz	r0, b85c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    b856:	f001 fb2d 	bl	ceb4 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    b85a:	b140      	cbz	r0, b86e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    b85c:	2240      	movs	r2, #64	; 0x40
    b85e:	21ff      	movs	r1, #255	; 0xff
    b860:	4638      	mov	r0, r7
    b862:	f001 fbb5 	bl	cfd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b866:	602c      	str	r4, [r5, #0]
    b868:	6034      	str	r4, [r6, #0]
    b86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b86e:	2238      	movs	r2, #56	; 0x38
    b870:	e7f5      	b.n	b85e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b872:	0000      	.short	0x0000
    b874:	20001200 	.word	0x20001200
    b878:	40000e00 	.word	0x40000e00

0000b87c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    b87c:	4801      	ldr	r0, [pc, #4]	; (b884 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    b87e:	69c0      	ldr	r0, [r0, #28]
    b880:	4770      	bx	lr
    b882:	0000      	.short	0x0000
    b884:	20001200 	.word	0x20001200

0000b888 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    b888:	4801      	ldr	r0, [pc, #4]	; (b890 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    b88a:	6980      	ldr	r0, [r0, #24]
    b88c:	4770      	bx	lr
    b88e:	0000      	.short	0x0000
    b890:	20001200 	.word	0x20001200

0000b894 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    b894:	b510      	push	{r4, lr}
    b896:	f000 fc2f 	bl	c0f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    b89a:	f7ff fe69 	bl	b570 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b89e:	f7f8 ff7d 	bl	479c <mpsl_fem_disable>
    b8a2:	b130      	cbz	r0, b8b2 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    b8a4:	1c40      	adds	r0, r0, #1
    b8a6:	d004      	beq.n	b8b2 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    b8a8:	f240 5146 	movw	r1, #1350	; 0x546
    b8ac:	203e      	movs	r0, #62	; 0x3e
    b8ae:	f7f9 f8c5 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b8b2:	480f      	ldr	r0, [pc, #60]	; (b8f0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    b8b4:	4a0f      	ldr	r2, [pc, #60]	; (b8f4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    b8b6:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b8b8:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    b8bc:	6011      	str	r1, [r2, #0]
    b8be:	2400      	movs	r4, #0
    b8c0:	6284      	str	r4, [r0, #40]	; 0x28
    b8c2:	7304      	strb	r4, [r0, #12]
    b8c4:	61c4      	str	r4, [r0, #28]
    b8c6:	6184      	str	r4, [r0, #24]
    b8c8:	f000 fc16 	bl	c0f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    b8cc:	480a      	ldr	r0, [pc, #40]	; (b8f8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    b8ce:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    b8d2:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    b8d6:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    b8da:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    b8de:	2001      	movs	r0, #1
    b8e0:	f005 fa68 	bl	10db4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b8e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b8e8:	2001      	movs	r0, #1
    b8ea:	f005 ba56 	b.w	10d9a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b8ee:	0000      	.short	0x0000
    b8f0:	20001200 	.word	0x20001200
    b8f4:	4001f508 	.word	0x4001f508
    b8f8:	40008000 	.word	0x40008000

0000b8fc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    b8fc:	b570      	push	{r4, r5, r6, lr}
    b8fe:	2001      	movs	r0, #1
    b900:	f005 fa58 	bl	10db4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b904:	4c37      	ldr	r4, [pc, #220]	; (b9e4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    b906:	2000      	movs	r0, #0
    b908:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    b90c:	2001      	movs	r0, #1
    b90e:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    b912:	f001 faaf 	bl	ce74 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b916:	4d34      	ldr	r5, [pc, #208]	; (b9e8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b918:	b118      	cbz	r0, b922 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    b91a:	6828      	ldr	r0, [r5, #0]
    b91c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    b920:	6028      	str	r0, [r5, #0]
    b922:	f001 fa9b 	bl	ce5c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b926:	b128      	cbz	r0, b934 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    b928:	6828      	ldr	r0, [r5, #0]
    b92a:	4930      	ldr	r1, [pc, #192]	; (b9ec <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b92c:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    b930:	4308      	orrs	r0, r1
    b932:	6028      	str	r0, [r5, #0]
    b934:	f001 faae 	bl	ce94 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b938:	b138      	cbz	r0, b94a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    b93a:	482b      	ldr	r0, [pc, #172]	; (b9e8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b93c:	1d00      	adds	r0, r0, #4
    b93e:	6801      	ldr	r1, [r0, #0]
    b940:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    b944:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    b948:	6001      	str	r1, [r0, #0]
    b94a:	4927      	ldr	r1, [pc, #156]	; (b9e8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b94c:	4828      	ldr	r0, [pc, #160]	; (b9f0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    b94e:	313c      	adds	r1, #60	; 0x3c
    b950:	6008      	str	r0, [r1, #0]
    b952:	f7f8 ff59 	bl	4808 <mpsl_fem_device_config_254_apply_get>
    b956:	b140      	cbz	r0, b96a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    b958:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b95c:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    b960:	1c41      	adds	r1, r0, #1
    b962:	d002      	beq.n	b96a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    b964:	4920      	ldr	r1, [pc, #128]	; (b9e8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b966:	3110      	adds	r1, #16
    b968:	6008      	str	r0, [r1, #0]
    b96a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    b96e:	6e00      	ldr	r0, [r0, #96]	; 0x60
    b970:	1c41      	adds	r1, r0, #1
    b972:	d004      	beq.n	b97e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    b974:	491f      	ldr	r1, [pc, #124]	; (b9f4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b976:	680a      	ldr	r2, [r1, #0]
    b978:	f360 4217 	bfi	r2, r0, #16, #8
    b97c:	600a      	str	r2, [r1, #0]
    b97e:	f240 1103 	movw	r1, #259	; 0x103
    b982:	f240 605b 	movw	r0, #1627	; 0x65b
    b986:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    b98a:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    b98e:	2001      	movs	r0, #1
    b990:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    b994:	f000 f842 	bl	ba1c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    b998:	f240 2001 	movw	r0, #513	; 0x201
    b99c:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    b9a0:	2002      	movs	r0, #2
    b9a2:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b9a6:	4914      	ldr	r1, [pc, #80]	; (b9f8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    b9a8:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b9ac:	6008      	str	r0, [r1, #0]
    b9ae:	4913      	ldr	r1, [pc, #76]	; (b9fc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    b9b0:	2000      	movs	r0, #0
    b9b2:	4d13      	ldr	r5, [pc, #76]	; (ba00 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    b9b4:	8608      	strh	r0, [r1, #48]	; 0x30
    b9b6:	3110      	adds	r1, #16
    b9b8:	61c8      	str	r0, [r1, #28]
    b9ba:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    b9be:	7028      	strb	r0, [r5, #0]
    b9c0:	2001      	movs	r0, #1
    b9c2:	f005 f9ea 	bl	10d9a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b9c6:	2010      	movs	r0, #16
    b9c8:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    b9cc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b9d0:	2002      	movs	r0, #2
    b9d2:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    b9d6:	6868      	ldr	r0, [r5, #4]
    b9d8:	2800      	cmp	r0, #0
    b9da:	d002      	beq.n	b9e2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe6>
    b9dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b9e0:	4700      	bx	r0
    b9e2:	bd70      	pop	{r4, r5, r6, pc}
    b9e4:	40001000 	.word	0x40001000
    b9e8:	4000173c 	.word	0x4000173c
    b9ec:	80000096 	.word	0x80000096
    b9f0:	8900002c 	.word	0x8900002c
    b9f4:	4000158c 	.word	0x4000158c
    b9f8:	4001f504 	.word	0x4001f504
    b9fc:	200011f0 	.word	0x200011f0
    ba00:	200002f4 	.word	0x200002f4

0000ba04 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    ba04:	4901      	ldr	r1, [pc, #4]	; (ba0c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    ba06:	7548      	strb	r0, [r1, #21]
    ba08:	4770      	bx	lr
    ba0a:	0000      	.short	0x0000
    ba0c:	20001200 	.word	0x20001200

0000ba10 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    ba10:	4901      	ldr	r1, [pc, #4]	; (ba18 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    ba12:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    ba16:	4770      	bx	lr
    ba18:	0000c2dc 	.word	0x0000c2dc

0000ba1c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    ba1c:	4908      	ldr	r1, [pc, #32]	; (ba40 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    ba1e:	b510      	push	{r4, lr}
    ba20:	7508      	strb	r0, [r1, #20]
    ba22:	4908      	ldr	r1, [pc, #32]	; (ba44 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    ba24:	2801      	cmp	r0, #1
    ba26:	d006      	beq.n	ba36 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    ba28:	2802      	cmp	r0, #2
    ba2a:	d006      	beq.n	ba3a <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    ba2c:	f640 5155 	movw	r1, #3413	; 0xd55
    ba30:	203e      	movs	r0, #62	; 0x3e
    ba32:	f7f9 f803 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba36:	2003      	movs	r0, #3
    ba38:	e000      	b.n	ba3c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    ba3a:	2004      	movs	r0, #4
    ba3c:	6008      	str	r0, [r1, #0]
    ba3e:	bd10      	pop	{r4, pc}
    ba40:	20001200 	.word	0x20001200
    ba44:	40001510 	.word	0x40001510

0000ba48 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    ba48:	4905      	ldr	r1, [pc, #20]	; (ba60 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    ba4a:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    ba4e:	4805      	ldr	r0, [pc, #20]	; (ba64 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    ba50:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    ba54:	f041 0101 	orr.w	r1, r1, #1
    ba58:	7001      	strb	r1, [r0, #0]
    ba5a:	f000 ba3f 	b.w	bedc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    ba5e:	0000      	.short	0x0000
    ba60:	40001000 	.word	0x40001000
    ba64:	20001200 	.word	0x20001200

0000ba68 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    ba68:	4901      	ldr	r1, [pc, #4]	; (ba70 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    ba6a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    ba6e:	4770      	bx	lr
    ba70:	0000c2e8 	.word	0x0000c2e8

0000ba74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    ba74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba78:	f8df 90a0 	ldr.w	r9, [pc, #160]	; bb1c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>
    ba7c:	4d28      	ldr	r5, [pc, #160]	; (bb20 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xac>)
    ba7e:	460f      	mov	r7, r1
    ba80:	0006      	movs	r6, r0
    ba82:	4614      	mov	r4, r2
    ba84:	f04f 0801 	mov.w	r8, #1
    ba88:	d004      	beq.n	ba94 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20>
    ba8a:	2e01      	cmp	r6, #1
    ba8c:	d010      	beq.n	bab0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3c>
    ba8e:	f640 0114 	movw	r1, #2068	; 0x814
    ba92:	e039      	b.n	bb08 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x94>
    ba94:	4610      	mov	r0, r2
    ba96:	f000 fbd5 	bl	c244 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    ba9a:	4822      	ldr	r0, [pc, #136]	; (bb24 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb0>)
    ba9c:	f885 8009 	strb.w	r8, [r5, #9]
    baa0:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
    baa4:	4638      	mov	r0, r7
    baa6:	f000 fb7b 	bl	c1a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    baaa:	4604      	mov	r4, r0
    baac:	4648      	mov	r0, r9
    baae:	e00c      	b.n	baca <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x56>
    bab0:	4610      	mov	r0, r2
    bab2:	f000 fbad 	bl	c210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    bab6:	2002      	movs	r0, #2
    bab8:	7268      	strb	r0, [r5, #9]
    baba:	f649 71ba 	movw	r1, #40890	; 0x9fba
    babe:	4638      	mov	r0, r7
    bac0:	f000 fb6e 	bl	c1a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    bac4:	4604      	mov	r4, r0
    bac6:	4815      	ldr	r0, [pc, #84]	; (bb1c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>)
    bac8:	1d00      	adds	r0, r0, #4
    baca:	f000 fb27 	bl	c11c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    bace:	4f16      	ldr	r7, [pc, #88]	; (bb28 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    bad0:	f8c7 4540 	str.w	r4, [r7, #1344]	; 0x540
    bad4:	4916      	ldr	r1, [pc, #88]	; (bb30 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>)
    bad6:	4815      	ldr	r0, [pc, #84]	; (bb2c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>)
    bad8:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    badc:	2010      	movs	r0, #16
    bade:	f8c9 0304 	str.w	r0, [r9, #772]	; 0x304
    bae2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    bae4:	4913      	ldr	r1, [pc, #76]	; (bb34 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc0>)
    bae6:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    baea:	62a8      	str	r0, [r5, #40]	; 0x28
    baec:	0138      	lsls	r0, r7, #4
    baee:	6008      	str	r0, [r1, #0]
    baf0:	f000 fa2e 	bl	bf50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    baf4:	f8c7 804c 	str.w	r8, [r7, #76]	; 0x4c
    baf8:	480b      	ldr	r0, [pc, #44]	; (bb28 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    bafa:	300c      	adds	r0, #12
    bafc:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bb00:	42a0      	cmp	r0, r4
    bb02:	d304      	bcc.n	bb0e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x9a>
    bb04:	f640 012a 	movw	r1, #2090	; 0x82a
    bb08:	203e      	movs	r0, #62	; 0x3e
    bb0a:	f7f8 ff97 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb0e:	4621      	mov	r1, r4
    bb10:	4630      	mov	r0, r6
    bb12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bb16:	f000 bb0d 	b.w	c134 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    bb1a:	0000      	.short	0x0000
    bb1c:	40001000 	.word	0x40001000
    bb20:	20001200 	.word	0x20001200
    bb24:	0000c288 	.word	0x0000c288
    bb28:	40008000 	.word	0x40008000
    bb2c:	40008140 	.word	0x40008140
    bb30:	4001f098 	.word	0x4001f098
    bb34:	4001f504 	.word	0x4001f504

0000bb38 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    bb38:	4b0d      	ldr	r3, [pc, #52]	; (bb70 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    bb3a:	b510      	push	{r4, lr}
    bb3c:	71d8      	strb	r0, [r3, #7]
    bb3e:	729a      	strb	r2, [r3, #10]
    bb40:	b151      	cbz	r1, bb58 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    bb42:	2002      	movs	r0, #2
    bb44:	7218      	strb	r0, [r3, #8]
    bb46:	2801      	cmp	r0, #1
    bb48:	d008      	beq.n	bb5c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    bb4a:	2802      	cmp	r0, #2
    bb4c:	d00f      	beq.n	bb6e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    bb4e:	f640 213d 	movw	r1, #2621	; 0xa3d
    bb52:	203e      	movs	r0, #62	; 0x3e
    bb54:	f7f8 ff72 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb58:	2001      	movs	r0, #1
    bb5a:	e7f3      	b.n	bb44 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    bb5c:	7a58      	ldrb	r0, [r3, #9]
    bb5e:	2802      	cmp	r0, #2
    bb60:	d105      	bne.n	bb6e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    bb62:	f000 f97f 	bl	be64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    bb66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bb6a:	f000 baad 	b.w	c0c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    bb6e:	bd10      	pop	{r4, pc}
    bb70:	20001200 	.word	0x20001200

0000bb74 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    bb74:	4902      	ldr	r1, [pc, #8]	; (bb80 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    bb76:	2000      	movs	r0, #0
    bb78:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bb7c:	4770      	bx	lr
    bb7e:	0000      	.short	0x0000
    bb80:	40008000 	.word	0x40008000

0000bb84 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    bb84:	4904      	ldr	r1, [pc, #16]	; (bb98 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    bb86:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    bb8a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    bb8e:	4249      	negs	r1, r1
    bb90:	7001      	strb	r1, [r0, #0]
    bb92:	2001      	movs	r0, #1
    bb94:	4770      	bx	lr
    bb96:	0000      	.short	0x0000
    bb98:	40001000 	.word	0x40001000

0000bb9c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    bb9c:	4903      	ldr	r1, [pc, #12]	; (bbac <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    bb9e:	0e02      	lsrs	r2, r0, #24
    bba0:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    bba4:	0200      	lsls	r0, r0, #8
    bba6:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    bbaa:	4770      	bx	lr
    bbac:	40001000 	.word	0x40001000

0000bbb0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    bbb0:	6800      	ldr	r0, [r0, #0]
    bbb2:	4903      	ldr	r1, [pc, #12]	; (bbc0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    bbb4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bbb8:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    bbbc:	4770      	bx	lr
    bbbe:	0000      	.short	0x0000
    bbc0:	40001000 	.word	0x40001000

0000bbc4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    bbc4:	b510      	push	{r4, lr}
    bbc6:	2200      	movs	r2, #0
    bbc8:	2901      	cmp	r1, #1
    bbca:	d006      	beq.n	bbda <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    bbcc:	2902      	cmp	r1, #2
    bbce:	d002      	beq.n	bbd6 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    bbd0:	f44f 712f 	mov.w	r1, #700	; 0x2bc
    bbd4:	e014      	b.n	bc00 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    bbd6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    bbda:	490b      	ldr	r1, [pc, #44]	; (bc08 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    bbdc:	430a      	orrs	r2, r1
    bbde:	490b      	ldr	r1, [pc, #44]	; (bc0c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    bbe0:	600a      	str	r2, [r1, #0]
    bbe2:	490b      	ldr	r1, [pc, #44]	; (bc10 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    bbe4:	4308      	orrs	r0, r1
    bbe6:	4909      	ldr	r1, [pc, #36]	; (bc0c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    bbe8:	1d09      	adds	r1, r1, #4
    bbea:	6008      	str	r0, [r1, #0]
    bbec:	4809      	ldr	r0, [pc, #36]	; (bc14 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    bbee:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    bbf2:	b2c0      	uxtb	r0, r0
    bbf4:	2803      	cmp	r0, #3
    bbf6:	d001      	beq.n	bbfc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    bbf8:	280b      	cmp	r0, #11
    bbfa:	d104      	bne.n	bc06 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    bbfc:	f44f 7135 	mov.w	r1, #724	; 0x2d4
    bc00:	203e      	movs	r0, #62	; 0x3e
    bc02:	f7f8 ff1b 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc06:	bd10      	pop	{r4, pc}
    bc08:	00100108 	.word	0x00100108
    bc0c:	40001514 	.word	0x40001514
    bc10:	02030000 	.word	0x02030000
    bc14:	40001000 	.word	0x40001000

0000bc18 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    bc18:	4901      	ldr	r1, [pc, #4]	; (bc20 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    bc1a:	7588      	strb	r0, [r1, #22]
    bc1c:	4770      	bx	lr
    bc1e:	0000      	.short	0x0000
    bc20:	20001200 	.word	0x20001200

0000bc24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    bc24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bc28:	4852      	ldr	r0, [pc, #328]	; (bd74 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    bc2a:	f04f 0a01 	mov.w	sl, #1
    bc2e:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    bc32:	4850      	ldr	r0, [pc, #320]	; (bd74 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    bc34:	300c      	adds	r0, #12
    bc36:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    bc3a:	f000 ffe1 	bl	cc00 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    bc3e:	4c4e      	ldr	r4, [pc, #312]	; (bd78 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bc40:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    bc44:	f000 f918 	bl	be78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    bc48:	494c      	ldr	r1, [pc, #304]	; (bd7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    bc4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    bc4c:	6008      	str	r0, [r1, #0]
    bc4e:	f8df 9130 	ldr.w	r9, [pc, #304]	; bd80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    bc52:	2000      	movs	r0, #0
    bc54:	62a0      	str	r0, [r4, #40]	; 0x28
    bc56:	f8d9 2200 	ldr.w	r2, [r9, #512]	; 0x200
    bc5a:	f240 131d 	movw	r3, #285	; 0x11d
    bc5e:	439a      	bics	r2, r3
    bc60:	f8c9 2200 	str.w	r2, [r9, #512]	; 0x200
    bc64:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    bc68:	f000 f986 	bl	bf78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    bc6c:	4605      	mov	r5, r0
    bc6e:	4841      	ldr	r0, [pc, #260]	; (bd74 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    bc70:	3008      	adds	r0, #8
    bc72:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bc76:	4e3f      	ldr	r6, [pc, #252]	; (bd74 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    bc78:	61e0      	str	r0, [r4, #28]
    bc7a:	1d36      	adds	r6, r6, #4
    bc7c:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    bc80:	61a0      	str	r0, [r4, #24]
    bc82:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    bc86:	7d21      	ldrb	r1, [r4, #20]
    bc88:	f884 1020 	strb.w	r1, [r4, #32]
    bc8c:	7a61      	ldrb	r1, [r4, #9]
    bc8e:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    bc92:	46a0      	mov	r8, r4
    bc94:	2400      	movs	r4, #0
    bc96:	4639      	mov	r1, r7
    bc98:	4628      	mov	r0, r5
    bc9a:	f000 f9e1 	bl	c060 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    bc9e:	b910      	cbnz	r0, bca6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    bca0:	f8c9 a010 	str.w	sl, [r9, #16]
    bca4:	2401      	movs	r4, #1
    bca6:	4f34      	ldr	r7, [pc, #208]	; (bd78 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bca8:	07e8      	lsls	r0, r5, #31
    bcaa:	f1a7 0710 	sub.w	r7, r7, #16
    bcae:	d002      	beq.n	bcb6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    bcb0:	6838      	ldr	r0, [r7, #0]
    bcb2:	4780      	blx	r0
    bcb4:	e032      	b.n	bd1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    bcb6:	07a8      	lsls	r0, r5, #30
    bcb8:	d527      	bpl.n	bd0a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe6>
    bcba:	0768      	lsls	r0, r5, #29
    bcbc:	d41f      	bmi.n	bcfe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    bcbe:	f001 f8e9 	bl	ce94 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bcc2:	b9e0      	cbnz	r0, bcfe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    bcc4:	f001 f8d6 	bl	ce74 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bcc8:	b9c8      	cbnz	r0, bcfe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    bcca:	482e      	ldr	r0, [pc, #184]	; (bd84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    bccc:	6800      	ldr	r0, [r0, #0]
    bcce:	f3c0 6c00 	ubfx	ip, r0, #24, #1
    bcd2:	f3c0 5142 	ubfx	r1, r0, #21, #3
    bcd6:	f000 030f 	and.w	r3, r0, #15
    bcda:	f3c0 1203 	ubfx	r2, r0, #4, #4
    bcde:	f3c0 2003 	ubfx	r0, r0, #8, #4
    bce2:	f1bc 0f00 	cmp.w	ip, #0
    bce6:	d00a      	beq.n	bcfe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    bce8:	b10b      	cbz	r3, bcee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    bcea:	b102      	cbz	r2, bcee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    bcec:	b938      	cbnz	r0, bcfe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    bcee:	4825      	ldr	r0, [pc, #148]	; (bd84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    bcf0:	1d00      	adds	r0, r0, #4
    bcf2:	6800      	ldr	r0, [r0, #0]
    bcf4:	b118      	cbz	r0, bcfe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    bcf6:	2903      	cmp	r1, #3
    bcf8:	d201      	bcs.n	bcfe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    bcfa:	f045 0504 	orr.w	r5, r5, #4
    bcfe:	f345 0080 	sbfx	r0, r5, #2, #1
    bd02:	4621      	mov	r1, r4
    bd04:	1c40      	adds	r0, r0, #1
    bd06:	687a      	ldr	r2, [r7, #4]
    bd08:	e007      	b.n	bd1a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    bd0a:	f015 0f28 	tst.w	r5, #40	; 0x28
    bd0e:	d005      	beq.n	bd1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    bd10:	f345 1140 	sbfx	r1, r5, #5, #1
    bd14:	68ba      	ldr	r2, [r7, #8]
    bd16:	4620      	mov	r0, r4
    bd18:	1c49      	adds	r1, r1, #1
    bd1a:	4790      	blx	r2
    bd1c:	06e8      	lsls	r0, r5, #27
    bd1e:	d501      	bpl.n	bd24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    bd20:	68f8      	ldr	r0, [r7, #12]
    bd22:	4780      	blx	r0
    bd24:	f898 1009 	ldrb.w	r1, [r8, #9]
    bd28:	4640      	mov	r0, r8
    bd2a:	2902      	cmp	r1, #2
    bd2c:	d120      	bne.n	bd70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    bd2e:	7b01      	ldrb	r1, [r0, #12]
    bd30:	2900      	cmp	r1, #0
    bd32:	d01d      	beq.n	bd70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    bd34:	2902      	cmp	r1, #2
    bd36:	d004      	beq.n	bd42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11e>
    bd38:	2901      	cmp	r1, #1
    bd3a:	d009      	beq.n	bd50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12c>
    bd3c:	f640 4134 	movw	r1, #3124	; 0xc34
    bd40:	e00d      	b.n	bd5e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    bd42:	69c1      	ldr	r1, [r0, #28]
    bd44:	f8d8 0010 	ldr.w	r0, [r8, #16]
    bd48:	4408      	add	r0, r1
    bd4a:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    bd4e:	e00b      	b.n	bd68 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    bd50:	6901      	ldr	r1, [r0, #16]
    bd52:	f8d8 001c 	ldr.w	r0, [r8, #28]
    bd56:	4281      	cmp	r1, r0
    bd58:	d804      	bhi.n	bd64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x140>
    bd5a:	f640 4135 	movw	r1, #3125	; 0xc35
    bd5e:	203e      	movs	r0, #62	; 0x3e
    bd60:	f7f8 fe6c 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd64:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    bd68:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bd6c:	f000 b9b6 	b.w	c0dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    bd70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bd74:	40008000 	.word	0x40008000
    bd78:	20001200 	.word	0x20001200
    bd7c:	4001f508 	.word	0x4001f508
    bd80:	40001000 	.word	0x40001000
    bd84:	40001450 	.word	0x40001450

0000bd88 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    bd88:	b570      	push	{r4, r5, r6, lr}
    bd8a:	4b16      	ldr	r3, [pc, #88]	; (bde4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    bd8c:	888c      	ldrh	r4, [r1, #4]
    bd8e:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    bd92:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    bd96:	780c      	ldrb	r4, [r1, #0]
    bd98:	f8d1 1001 	ldr.w	r1, [r1, #1]
    bd9c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    bda0:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    bda4:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    bda8:	2401      	movs	r4, #1
    bdaa:	4084      	lsls	r4, r0
    bdac:	b2c9      	uxtb	r1, r1
    bdae:	b2e5      	uxtb	r5, r4
    bdb0:	4329      	orrs	r1, r5
    bdb2:	b132      	cbz	r2, bdc2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    bdb4:	2a01      	cmp	r2, #1
    bdb6:	d00a      	beq.n	bdce <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    bdb8:	f240 51ad 	movw	r1, #1453	; 0x5ad
    bdbc:	203e      	movs	r0, #62	; 0x3e
    bdbe:	f7f8 fe3d 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bdc2:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    bdc6:	f3c0 2007 	ubfx	r0, r0, #8, #8
    bdca:	43a0      	bics	r0, r4
    bdcc:	e004      	b.n	bdd8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    bdce:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    bdd2:	f3c0 2007 	ubfx	r0, r0, #8, #8
    bdd6:	4328      	orrs	r0, r5
    bdd8:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    bddc:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    bde0:	bd70      	pop	{r4, r5, r6, pc}
    bde2:	0000      	.short	0x0000
    bde4:	40001000 	.word	0x40001000

0000bde8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    bde8:	4901      	ldr	r1, [pc, #4]	; (bdf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    bdea:	2001      	movs	r0, #1
    bdec:	7008      	strb	r0, [r1, #0]
    bdee:	4770      	bx	lr
    bdf0:	200002f4 	.word	0x200002f4
    bdf4:	480b      	ldr	r0, [pc, #44]	; (be24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    bdf6:	7d81      	ldrb	r1, [r0, #22]
    bdf8:	480b      	ldr	r0, [pc, #44]	; (be28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    bdfa:	5c40      	ldrb	r0, [r0, r1]
    bdfc:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    be00:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    be04:	d204      	bcs.n	be10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    be06:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    be0a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    be0e:	e001      	b.n	be14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    be10:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    be14:	4a05      	ldr	r2, [pc, #20]	; (be2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    be16:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    be1a:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    be1e:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    be22:	4770      	bx	lr
    be24:	20001200 	.word	0x20001200
    be28:	0000c28e 	.word	0x0000c28e
    be2c:	40001000 	.word	0x40001000
    be30:	b508      	push	{r3, lr}
    be32:	490b      	ldr	r1, [pc, #44]	; (be60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    be34:	466b      	mov	r3, sp
    be36:	f991 2015 	ldrsb.w	r2, [r1, #21]
    be3a:	7d89      	ldrb	r1, [r1, #22]
    be3c:	f000 faca 	bl	c3d4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    be40:	f99d 0000 	ldrsb.w	r0, [sp]
    be44:	f000 fa9a 	bl	c37c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    be48:	f10d 0001 	add.w	r0, sp, #1
    be4c:	f7f8 fcca 	bl	47e4 <mpsl_fem_pa_gain_set>
    be50:	2800      	cmp	r0, #0
    be52:	d004      	beq.n	be5e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    be54:	f240 51ee 	movw	r1, #1518	; 0x5ee
    be58:	203e      	movs	r0, #62	; 0x3e
    be5a:	f7f8 fdef 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be5e:	bd08      	pop	{r3, pc}
    be60:	20001200 	.word	0x20001200
    be64:	4803      	ldr	r0, [pc, #12]	; (be74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    be66:	7a01      	ldrb	r1, [r0, #8]
    be68:	2901      	cmp	r1, #1
    be6a:	d102      	bne.n	be72 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    be6c:	7a80      	ldrb	r0, [r0, #10]
    be6e:	f7ff bfdf 	b.w	be30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    be72:	4770      	bx	lr
    be74:	20001200 	.word	0x20001200
    be78:	480d      	ldr	r0, [pc, #52]	; (beb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    be7a:	b510      	push	{r4, lr}
    be7c:	7a40      	ldrb	r0, [r0, #9]
    be7e:	2801      	cmp	r0, #1
    be80:	d00c      	beq.n	be9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    be82:	2802      	cmp	r0, #2
    be84:	d113      	bne.n	beae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    be86:	f7f8 fc8f 	bl	47a8 <mpsl_fem_lna_configuration_clear>
    be8a:	2800      	cmp	r0, #0
    be8c:	d00f      	beq.n	beae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    be8e:	1c40      	adds	r0, r0, #1
    be90:	d00d      	beq.n	beae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    be92:	f640 019a 	movw	r1, #2202	; 0x89a
    be96:	203e      	movs	r0, #62	; 0x3e
    be98:	f7f8 fdd0 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be9c:	f7f8 fc96 	bl	47cc <mpsl_fem_pa_configuration_clear>
    bea0:	2800      	cmp	r0, #0
    bea2:	d004      	beq.n	beae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    bea4:	1c40      	adds	r0, r0, #1
    bea6:	d002      	beq.n	beae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    bea8:	f640 0194 	movw	r1, #2196	; 0x894
    beac:	e7f3      	b.n	be96 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    beae:	bd10      	pop	{r4, pc}
    beb0:	20001200 	.word	0x20001200
    beb4:	4808      	ldr	r0, [pc, #32]	; (bed8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    beb6:	2100      	movs	r1, #0
    beb8:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    bebc:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    bec0:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    bec4:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    bec8:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    becc:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    bed0:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    bed4:	4770      	bx	lr
    bed6:	0000      	.short	0x0000
    bed8:	40001000 	.word	0x40001000
    bedc:	4818      	ldr	r0, [pc, #96]	; (bf40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    bede:	b510      	push	{r4, lr}
    bee0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    bee4:	07c1      	lsls	r1, r0, #31
    bee6:	d029      	beq.n	bf3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    bee8:	0781      	lsls	r1, r0, #30
    beea:	d514      	bpl.n	bf16 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    beec:	4815      	ldr	r0, [pc, #84]	; (bf44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    beee:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    bef2:	f041 0101 	orr.w	r1, r1, #1
    bef6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    befa:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    befe:	b2c0      	uxtb	r0, r0
    bf00:	280b      	cmp	r0, #11
    bf02:	d005      	beq.n	bf10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    bf04:	280a      	cmp	r0, #10
    bf06:	d003      	beq.n	bf10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    bf08:	2803      	cmp	r0, #3
    bf0a:	d001      	beq.n	bf10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    bf0c:	2802      	cmp	r0, #2
    bf0e:	d115      	bne.n	bf3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    bf10:	f240 6117 	movw	r1, #1559	; 0x617
    bf14:	e00f      	b.n	bf36 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    bf16:	0740      	lsls	r0, r0, #29
    bf18:	d510      	bpl.n	bf3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    bf1a:	480a      	ldr	r0, [pc, #40]	; (bf44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    bf1c:	490a      	ldr	r1, [pc, #40]	; (bf48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    bf1e:	3008      	adds	r0, #8
    bf20:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    bf24:	f44f 71a0 	mov.w	r1, #320	; 0x140
    bf28:	4808      	ldr	r0, [pc, #32]	; (bf4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    bf2a:	f004 ff59 	bl	10de0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    bf2e:	2800      	cmp	r0, #0
    bf30:	d004      	beq.n	bf3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    bf32:	f240 611f 	movw	r1, #1567	; 0x61f
    bf36:	203e      	movs	r0, #62	; 0x3e
    bf38:	f7f8 fd80 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf3c:	bd10      	pop	{r4, pc}
    bf3e:	0000      	.short	0x0000
    bf40:	20001200 	.word	0x20001200
    bf44:	40001000 	.word	0x40001000
    bf48:	4001f098 	.word	0x4001f098
    bf4c:	40008000 	.word	0x40008000
    bf50:	4808      	ldr	r0, [pc, #32]	; (bf74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    bf52:	4601      	mov	r1, r0
    bf54:	79c2      	ldrb	r2, [r0, #7]
    bf56:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    bf5a:	b112      	cbz	r2, bf62 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    bf5c:	2a01      	cmp	r2, #1
    bf5e:	d003      	beq.n	bf68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    bf60:	e006      	b.n	bf70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    bf62:	f041 0102 	orr.w	r1, r1, #2
    bf66:	e001      	b.n	bf6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    bf68:	f041 0104 	orr.w	r1, r1, #4
    bf6c:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    bf70:	f7ff bfb4 	b.w	bedc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    bf74:	20001200 	.word	0x20001200
    bf78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf7c:	4d34      	ldr	r5, [pc, #208]	; (c050 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    bf7e:	2400      	movs	r4, #0
    bf80:	7b28      	ldrb	r0, [r5, #12]
    bf82:	b138      	cbz	r0, bf94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    bf84:	f44f 71a2 	mov.w	r1, #324	; 0x144
    bf88:	4832      	ldr	r0, [pc, #200]	; (c054 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    bf8a:	f004 ff29 	bl	10de0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    bf8e:	b108      	cbz	r0, bf94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    bf90:	2601      	movs	r6, #1
    bf92:	e000      	b.n	bf96 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    bf94:	2600      	movs	r6, #0
    bf96:	7a68      	ldrb	r0, [r5, #9]
    bf98:	4f2f      	ldr	r7, [pc, #188]	; (c058 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    bf9a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    bf9e:	2801      	cmp	r0, #1
    bfa0:	d002      	beq.n	bfa8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    bfa2:	2802      	cmp	r0, #2
    bfa4:	d006      	beq.n	bfb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    bfa6:	e016      	b.n	bfd6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    bfa8:	4638      	mov	r0, r7
    bfaa:	f004 ff14 	bl	10dd6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    bfae:	b190      	cbz	r0, bfd6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    bfb0:	2408      	movs	r4, #8
    bfb2:	e010      	b.n	bfd6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    bfb4:	4638      	mov	r0, r7
    bfb6:	f004 ff0e 	bl	10dd6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    bfba:	b100      	cbz	r0, bfbe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    bfbc:	2402      	movs	r4, #2
    bfbe:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    bfc2:	43c0      	mvns	r0, r0
    bfc4:	f340 0000 	sbfx	r0, r0, #0, #1
    bfc8:	1c40      	adds	r0, r0, #1
    bfca:	d101      	bne.n	bfd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    bfcc:	f044 0404 	orr.w	r4, r4, #4
    bfd0:	b10e      	cbz	r6, bfd6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    bfd2:	f044 0401 	orr.w	r4, r4, #1
    bfd6:	f014 0f0b 	tst.w	r4, #11
    bfda:	d107      	bne.n	bfec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    bfdc:	f44f 7188 	mov.w	r1, #272	; 0x110
    bfe0:	4638      	mov	r0, r7
    bfe2:	f004 fef8 	bl	10dd6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    bfe6:	b108      	cbz	r0, bfec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    bfe8:	f044 0410 	orr.w	r4, r4, #16
    bfec:	481b      	ldr	r0, [pc, #108]	; (c05c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    bfee:	7800      	ldrb	r0, [r0, #0]
    bff0:	b1f8      	cbz	r0, c032 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    bff2:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    bff6:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    bffa:	d007      	beq.n	c00c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    bffc:	f44f 718a 	mov.w	r1, #276	; 0x114
    c000:	4638      	mov	r0, r7
    c002:	f004 fee8 	bl	10dd6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c006:	b108      	cbz	r0, c00c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c008:	2001      	movs	r0, #1
    c00a:	e000      	b.n	c00e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    c00c:	2000      	movs	r0, #0
    c00e:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    c012:	b13e      	cbz	r6, c024 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    c014:	f44f 718c 	mov.w	r1, #280	; 0x118
    c018:	4638      	mov	r0, r7
    c01a:	f004 fedc 	bl	10dd6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c01e:	b108      	cbz	r0, c024 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    c020:	2001      	movs	r0, #1
    c022:	e000      	b.n	c026 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    c024:	2000      	movs	r0, #0
    c026:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    c02a:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    c02e:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    c032:	f7ff ff3f 	bl	beb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    c036:	06e0      	lsls	r0, r4, #27
    c038:	d506      	bpl.n	c048 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    c03a:	0720      	lsls	r0, r4, #28
    c03c:	d404      	bmi.n	c048 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    c03e:	7a68      	ldrb	r0, [r5, #9]
    c040:	2801      	cmp	r0, #1
    c042:	d101      	bne.n	c048 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    c044:	f044 0420 	orr.w	r4, r4, #32
    c048:	4620      	mov	r0, r4
    c04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c04e:	0000      	.short	0x0000
    c050:	20001200 	.word	0x20001200
    c054:	40008000 	.word	0x40008000
    c058:	40001000 	.word	0x40001000
    c05c:	200002f4 	.word	0x200002f4
    c060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c064:	4c17      	ldr	r4, [pc, #92]	; (c0c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>)
    c066:	460d      	mov	r5, r1
    c068:	7a21      	ldrb	r1, [r4, #8]
    c06a:	b129      	cbz	r1, c078 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    c06c:	f010 0f11 	tst.w	r0, #17
    c070:	d007      	beq.n	c082 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    c072:	f7ff fa7d 	bl	b570 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c076:	e023      	b.n	c0c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    c078:	f000 f88a 	bl	c190 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    c07c:	2000      	movs	r0, #0
    c07e:	7320      	strb	r0, [r4, #12]
    c080:	e01e      	b.n	c0c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    c082:	2901      	cmp	r1, #1
    c084:	d001      	beq.n	c08a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    c086:	2601      	movs	r6, #1
    c088:	e000      	b.n	c08c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    c08a:	2600      	movs	r6, #0
    c08c:	79e0      	ldrb	r0, [r4, #7]
    c08e:	2801      	cmp	r0, #1
    c090:	d00e      	beq.n	c0b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    c092:	2700      	movs	r7, #0
    c094:	f000 f87c 	bl	c190 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    c098:	2196      	movs	r1, #150	; 0x96
    c09a:	4630      	mov	r0, r6
    c09c:	f000 f88e 	bl	c1bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d4>
    c0a0:	4601      	mov	r1, r0
    c0a2:	b14f      	cbz	r7, c0b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    c0a4:	353b      	adds	r5, #59	; 0x3b
    c0a6:	428d      	cmp	r5, r1
    c0a8:	d904      	bls.n	c0b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    c0aa:	2000      	movs	r0, #0
    c0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c0b0:	2701      	movs	r7, #1
    c0b2:	e7ef      	b.n	c094 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    c0b4:	2001      	movs	r0, #1
    c0b6:	71e0      	strb	r0, [r4, #7]
    c0b8:	7aa2      	ldrb	r2, [r4, #10]
    c0ba:	4630      	mov	r0, r6
    c0bc:	f7ff fcda 	bl	ba74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c0c0:	2001      	movs	r0, #1
    c0c2:	e7f3      	b.n	c0ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    c0c4:	20001200 	.word	0x20001200
    c0c8:	4803      	ldr	r0, [pc, #12]	; (c0d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    c0ca:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c0ce:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c0d2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c0d6:	4770      	bx	lr
    c0d8:	40001000 	.word	0x40001000
    c0dc:	4804      	ldr	r0, [pc, #16]	; (c0f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x308>)
    c0de:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c0e0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c0e4:	6281      	str	r1, [r0, #40]	; 0x28
    c0e6:	4903      	ldr	r1, [pc, #12]	; (c0f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x30c>)
    c0e8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c0ec:	6008      	str	r0, [r1, #0]
    c0ee:	4770      	bx	lr
    c0f0:	20001200 	.word	0x20001200
    c0f4:	4001f504 	.word	0x4001f504
    c0f8:	4a07      	ldr	r2, [pc, #28]	; (c118 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    c0fa:	2000      	movs	r0, #0
    c0fc:	3208      	adds	r2, #8
    c0fe:	4906      	ldr	r1, [pc, #24]	; (c118 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    c100:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c104:	1d0a      	adds	r2, r1, #4
    c106:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c10a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c10e:	4902      	ldr	r1, [pc, #8]	; (c118 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    c110:	310c      	adds	r1, #12
    c112:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c116:	4770      	bx	lr
    c118:	40008000 	.word	0x40008000
    c11c:	4903      	ldr	r1, [pc, #12]	; (c12c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x344>)
    c11e:	79c9      	ldrb	r1, [r1, #7]
    c120:	2900      	cmp	r1, #0
    c122:	d102      	bne.n	c12a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x342>
    c124:	4902      	ldr	r1, [pc, #8]	; (c130 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x348>)
    c126:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c12a:	4770      	bx	lr
    c12c:	20001200 	.word	0x20001200
    c130:	4001f098 	.word	0x4001f098
    c134:	b510      	push	{r4, lr}
    c136:	4a14      	ldr	r2, [pc, #80]	; (c188 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    c138:	b120      	cbz	r0, c144 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    c13a:	2801      	cmp	r0, #1
    c13c:	d011      	beq.n	c162 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37a>
    c13e:	f240 714c 	movw	r1, #1868	; 0x74c
    c142:	e01c      	b.n	c17e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    c144:	f101 0028 	add.w	r0, r1, #40	; 0x28
    c148:	e9c2 1002 	strd	r1, r0, [r2, #8]
    c14c:	490f      	ldr	r1, [pc, #60]	; (c18c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    c14e:	480e      	ldr	r0, [pc, #56]	; (c188 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    c150:	f7f8 fb42 	bl	47d8 <mpsl_fem_pa_configuration_set>
    c154:	2800      	cmp	r0, #0
    c156:	d015      	beq.n	c184 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    c158:	1c40      	adds	r0, r0, #1
    c15a:	d013      	beq.n	c184 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    c15c:	f240 713b 	movw	r1, #1851	; 0x73b
    c160:	e00d      	b.n	c17e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    c162:	f101 0029 	add.w	r0, r1, #41	; 0x29
    c166:	e9c2 1002 	strd	r1, r0, [r2, #8]
    c16a:	4908      	ldr	r1, [pc, #32]	; (c18c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    c16c:	4806      	ldr	r0, [pc, #24]	; (c188 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    c16e:	f7f8 fb21 	bl	47b4 <mpsl_fem_lna_configuration_set>
    c172:	2800      	cmp	r0, #0
    c174:	d006      	beq.n	c184 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    c176:	1c40      	adds	r0, r0, #1
    c178:	d004      	beq.n	c184 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    c17a:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    c17e:	203e      	movs	r0, #62	; 0x3e
    c180:	f7f8 fc5c 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c184:	bd10      	pop	{r4, pc}
    c186:	0000      	.short	0x0000
    c188:	200002fc 	.word	0x200002fc
    c18c:	0000c2b8 	.word	0x0000c2b8
    c190:	4802      	ldr	r0, [pc, #8]	; (c19c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>)
    c192:	2100      	movs	r1, #0
    c194:	71c1      	strb	r1, [r0, #7]
    c196:	7201      	strb	r1, [r0, #8]
    c198:	7241      	strb	r1, [r0, #9]
    c19a:	4770      	bx	lr
    c19c:	20001200 	.word	0x20001200
    c1a0:	4a05      	ldr	r2, [pc, #20]	; (c1b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d0>)
    c1a2:	79d2      	ldrb	r2, [r2, #7]
    c1a4:	2a01      	cmp	r2, #1
    c1a6:	d006      	beq.n	c1b6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ce>
    c1a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c1ac:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    c1b0:	fbb1 f1f2 	udiv	r1, r1, r2
    c1b4:	1a40      	subs	r0, r0, r1
    c1b6:	4770      	bx	lr
    c1b8:	20001200 	.word	0x20001200
    c1bc:	b570      	push	{r4, r5, r6, lr}
    c1be:	4c13      	ldr	r4, [pc, #76]	; (c20c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x424>)
    c1c0:	4603      	mov	r3, r0
    c1c2:	460d      	mov	r5, r1
    c1c4:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    c1c8:	2000      	movs	r0, #0
    c1ca:	b15a      	cbz	r2, c1e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fc>
    c1cc:	4621      	mov	r1, r4
    c1ce:	f891 1020 	ldrb.w	r1, [r1, #32]
    c1d2:	b163      	cbz	r3, c1ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    c1d4:	2b01      	cmp	r3, #1
    c1d6:	d111      	bne.n	c1fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>
    c1d8:	2a01      	cmp	r2, #1
    c1da:	4628      	mov	r0, r5
    c1dc:	d012      	beq.n	c204 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    c1de:	f004 fe04 	bl	10dea <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c1e2:	e009      	b.n	c1f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    c1e4:	f640 0147 	movw	r1, #2119	; 0x847
    c1e8:	203e      	movs	r0, #62	; 0x3e
    c1ea:	f7f8 fc27 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1ee:	2a01      	cmp	r2, #1
    c1f0:	4628      	mov	r0, r5
    c1f2:	d004      	beq.n	c1fe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x416>
    c1f4:	f004 fe07 	bl	10e06 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c1f8:	69e1      	ldr	r1, [r4, #28]
    c1fa:	4408      	add	r0, r1
    c1fc:	bd70      	pop	{r4, r5, r6, pc}
    c1fe:	f000 f8d1 	bl	c3a4 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c202:	e7f9      	b.n	c1f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    c204:	f000 f8c0 	bl	c388 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c208:	e7f6      	b.n	c1f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    c20a:	0000      	.short	0x0000
    c20c:	20001200 	.word	0x20001200
    c210:	b510      	push	{r4, lr}
    c212:	f7ff fc03 	bl	ba1c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    c216:	f7ff fded 	bl	bdf4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c21a:	f7ff fe23 	bl	be64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    c21e:	f7ff ff53 	bl	c0c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    c222:	f000 fe37 	bl	ce94 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c226:	2800      	cmp	r0, #0
    c228:	d108      	bne.n	c23c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    c22a:	f000 fe23 	bl	ce74 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c22e:	2800      	cmp	r0, #0
    c230:	d104      	bne.n	c23c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    c232:	4803      	ldr	r0, [pc, #12]	; (c240 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x458>)
    c234:	6801      	ldr	r1, [r0, #0]
    c236:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    c23a:	6001      	str	r1, [r0, #0]
    c23c:	bd10      	pop	{r4, pc}
    c23e:	0000      	.short	0x0000
    c240:	40001568 	.word	0x40001568
    c244:	b510      	push	{r4, lr}
    c246:	4604      	mov	r4, r0
    c248:	f7ff fbe8 	bl	ba1c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    c24c:	f7ff fdd2 	bl	bdf4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c250:	4620      	mov	r0, r4
    c252:	f7ff fded 	bl	be30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    c256:	f000 fe1d 	bl	ce94 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c25a:	2800      	cmp	r0, #0
    c25c:	d00d      	beq.n	c27a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x492>
    c25e:	4a09      	ldr	r2, [pc, #36]	; (c284 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49c>)
    c260:	6811      	ldr	r1, [r2, #0]
    c262:	0650      	lsls	r0, r2, #25
    c264:	2c02      	cmp	r4, #2
    c266:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    c26a:	d007      	beq.n	c27c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    c26c:	f3c0 2006 	ubfx	r0, r0, #8, #7
    c270:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    c274:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    c278:	6010      	str	r0, [r2, #0]
    c27a:	bd10      	pop	{r4, pc}
    c27c:	f3c0 6006 	ubfx	r0, r0, #24, #7
    c280:	e7f6      	b.n	c270 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    c282:	0000      	.short	0x0000
    c284:	40001588 	.word	0x40001588
    c288:	a62c0000 	.word	0xa62c0000
    c28c:	0604a1e0 	.word	0x0604a1e0
    c290:	0e0c0a08 	.word	0x0e0c0a08
    c294:	16141210 	.word	0x16141210
    c298:	201e1c18 	.word	0x201e1c18
    c29c:	28262422 	.word	0x28262422
    c2a0:	302e2c2a 	.word	0x302e2c2a
    c2a4:	38363432 	.word	0x38363432
    c2a8:	403e3c3a 	.word	0x403e3c3a
    c2ac:	48464442 	.word	0x48464442
    c2b0:	024e4c4a 	.word	0x024e4c4a
    c2b4:	0000501a 	.word	0x0000501a
    c2b8:	00000001 	.word	0x00000001
    c2bc:	40001110 	.word	0x40001110
	...
    c2d4:	00001e14 	.word	0x00001e14
    c2d8:	00001130 	.word	0x00001130
    c2dc:	00000000 	.word	0x00000000
    c2e0:	00000028 	.word	0x00000028
    c2e4:	00000018 	.word	0x00000018
    c2e8:	00000000 	.word	0x00000000
    c2ec:	00001e14 	.word	0x00001e14
    c2f0:	00001130 	.word	0x00001130
    c2f4:	00000000 	.word	0x00000000
    c2f8:	00001770 	.word	0x00001770
    c2fc:	00000fa0 	.word	0x00000fa0

0000c300 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    c300:	b570      	push	{r4, r5, r6, lr}
    c302:	4605      	mov	r5, r0
    c304:	4614      	mov	r4, r2
    c306:	4608      	mov	r0, r1
    c308:	f7ff fbae 	bl	ba68 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    c30c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    c310:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    c314:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    c318:	4807      	ldr	r0, [pc, #28]	; (c338 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    c31a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    c31e:	4408      	add	r0, r1
    c320:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c324:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    c328:	fbb0 f5f1 	udiv	r5, r0, r1
    c32c:	4620      	mov	r0, r4
    c32e:	f7ff fb6f 	bl	ba10 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    c332:	4428      	add	r0, r5
    c334:	1d40      	adds	r0, r0, #5
    c336:	bd70      	pop	{r4, r5, r6, pc}
    c338:	0000c3c8 	.word	0x0000c3c8

0000c33c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    c33c:	b570      	push	{r4, r5, r6, lr}
    c33e:	4d0e      	ldr	r5, [pc, #56]	; (c378 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    c340:	461c      	mov	r4, r3
    c342:	3d08      	subs	r5, #8
    c344:	4b0c      	ldr	r3, [pc, #48]	; (c378 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    c346:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    c34a:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    c34e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c352:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    c356:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c35a:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    c35e:	4418      	add	r0, r3
    c360:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c364:	fbb0 f5f1 	udiv	r5, r0, r1
    c368:	4610      	mov	r0, r2
    c36a:	f7ff fb51 	bl	ba10 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    c36e:	4428      	add	r0, r5
    c370:	4420      	add	r0, r4
    c372:	1d40      	adds	r0, r0, #5
    c374:	bd70      	pop	{r4, r5, r6, pc}
    c376:	0000      	.short	0x0000
    c378:	0000c3c8 	.word	0x0000c3c8

0000c37c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    c37c:	4901      	ldr	r1, [pc, #4]	; (c384 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    c37e:	b2c0      	uxtb	r0, r0
    c380:	6008      	str	r0, [r1, #0]
    c382:	4770      	bx	lr
    c384:	4000150c 	.word	0x4000150c

0000c388 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    c388:	4a05      	ldr	r2, [pc, #20]	; (c3a0 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    c38a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    c38e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c392:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    c396:	fbb1 f1f2 	udiv	r1, r1, r2
    c39a:	4408      	add	r0, r1
    c39c:	1e80      	subs	r0, r0, #2
    c39e:	4770      	bx	lr
    c3a0:	0000c3c0 	.word	0x0000c3c0

0000c3a4 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    c3a4:	4a05      	ldr	r2, [pc, #20]	; (c3bc <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    c3a6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    c3aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c3ae:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    c3b2:	fbb1 f1f2 	udiv	r1, r1, r2
    c3b6:	4408      	add	r0, r1
    c3b8:	4770      	bx	lr
    c3ba:	0000      	.short	0x0000
    c3bc:	0000c3c0 	.word	0x0000c3c0
    c3c0:	05dc0000 	.word	0x05dc0000
    c3c4:	000003e8 	.word	0x000003e8
    c3c8:	00000000 	.word	0x00000000
    c3cc:	00001e14 	.word	0x00001e14
    c3d0:	00001130 	.word	0x00001130

0000c3d4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    c3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c3d8:	461e      	mov	r6, r3
    c3da:	4617      	mov	r7, r2
    c3dc:	460c      	mov	r4, r1
    c3de:	4605      	mov	r5, r0
    c3e0:	f7f4 fc6e 	bl	cc0 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    c3e4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; c48c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    c3e8:	4680      	mov	r8, r0
    c3ea:	f899 0000 	ldrb.w	r0, [r9]
    c3ee:	42a8      	cmp	r0, r5
    c3f0:	d110      	bne.n	c414 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    c3f2:	f899 1001 	ldrb.w	r1, [r9, #1]
    c3f6:	4648      	mov	r0, r9
    c3f8:	42a1      	cmp	r1, r4
    c3fa:	d10b      	bne.n	c414 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    c3fc:	f990 1002 	ldrsb.w	r1, [r0, #2]
    c400:	42b9      	cmp	r1, r7
    c402:	d107      	bne.n	c414 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    c404:	78c2      	ldrb	r2, [r0, #3]
    c406:	4542      	cmp	r2, r8
    c408:	d104      	bne.n	c414 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    c40a:	8881      	ldrh	r1, [r0, #4]
    c40c:	8031      	strh	r1, [r6, #0]
    c40e:	7980      	ldrb	r0, [r0, #6]
    c410:	70b0      	strb	r0, [r6, #2]
    c412:	e036      	b.n	c482 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xae>
    c414:	463a      	mov	r2, r7
    c416:	4621      	mov	r1, r4
    c418:	2d01      	cmp	r5, #1
    c41a:	d009      	beq.n	c430 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    c41c:	2d02      	cmp	r5, #2
    c41e:	d009      	beq.n	c434 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    c420:	2d04      	cmp	r5, #4
    c422:	d009      	beq.n	c438 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    c424:	2d08      	cmp	r5, #8
    c426:	d009      	beq.n	c43c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    c428:	f240 4133 	movw	r1, #1075	; 0x433
    c42c:	2006      	movs	r0, #6
    c42e:	e00c      	b.n	c44a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    c430:	2000      	movs	r0, #0
    c432:	e004      	b.n	c43e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    c434:	2001      	movs	r0, #1
    c436:	e002      	b.n	c43e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    c438:	2003      	movs	r0, #3
    c43a:	e000      	b.n	c43e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    c43c:	2002      	movs	r0, #2
    c43e:	466b      	mov	r3, sp
    c440:	f7f4 fc84 	bl	d4c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    c444:	b118      	cbz	r0, c44e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    c446:	213d      	movs	r1, #61	; 0x3d
    c448:	2075      	movs	r0, #117	; 0x75
    c44a:	f7f8 faf7 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c44e:	4620      	mov	r0, r4
    c450:	f7ff f886 	bl	b560 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    c454:	4602      	mov	r2, r0
    c456:	4631      	mov	r1, r6
    c458:	f99d 0000 	ldrsb.w	r0, [sp]
    c45c:	f7f8 f9ce 	bl	47fc <mpsl_fem_tx_power_split>
    c460:	4601      	mov	r1, r0
    c462:	f889 1007 	strb.w	r1, [r9, #7]
    c466:	8831      	ldrh	r1, [r6, #0]
    c468:	f8a9 1004 	strh.w	r1, [r9, #4]
    c46c:	78b1      	ldrb	r1, [r6, #2]
    c46e:	f889 1006 	strb.w	r1, [r9, #6]
    c472:	f889 5000 	strb.w	r5, [r9]
    c476:	f889 4001 	strb.w	r4, [r9, #1]
    c47a:	f889 7002 	strb.w	r7, [r9, #2]
    c47e:	f889 8003 	strb.w	r8, [r9, #3]
    c482:	f999 0007 	ldrsb.w	r0, [r9, #7]
    c486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c48a:	0000      	.short	0x0000
    c48c:	20000345 	.word	0x20000345

0000c490 <__udivmoddi4>:
    c490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c494:	4607      	mov	r7, r0
    c496:	468c      	mov	ip, r1
    c498:	4608      	mov	r0, r1
    c49a:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c49c:	4615      	mov	r5, r2
    c49e:	463c      	mov	r4, r7
    c4a0:	4619      	mov	r1, r3
    c4a2:	2b00      	cmp	r3, #0
    c4a4:	f040 80c6 	bne.w	c634 <__udivmoddi4+0x1a4>
    c4a8:	4282      	cmp	r2, r0
    c4aa:	fab2 f782 	clz	r7, r2
    c4ae:	d946      	bls.n	c53e <__udivmoddi4+0xae>
    c4b0:	b14f      	cbz	r7, c4c6 <__udivmoddi4+0x36>
    c4b2:	f1c7 0e20 	rsb	lr, r7, #32
    c4b6:	fa24 fe0e 	lsr.w	lr, r4, lr
    c4ba:	fa00 f307 	lsl.w	r3, r0, r7
    c4be:	40bd      	lsls	r5, r7
    c4c0:	ea4e 0c03 	orr.w	ip, lr, r3
    c4c4:	40bc      	lsls	r4, r7
    c4c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
    c4ca:	fa1f fe85 	uxth.w	lr, r5
    c4ce:	fbbc f9f8 	udiv	r9, ip, r8
    c4d2:	0c22      	lsrs	r2, r4, #16
    c4d4:	fb08 c319 	mls	r3, r8, r9, ip
    c4d8:	fb09 fa0e 	mul.w	sl, r9, lr
    c4dc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    c4e0:	459a      	cmp	sl, r3
    c4e2:	d928      	bls.n	c536 <__udivmoddi4+0xa6>
    c4e4:	18eb      	adds	r3, r5, r3
    c4e6:	f109 30ff 	add.w	r0, r9, #4294967295
    c4ea:	d204      	bcs.n	c4f6 <__udivmoddi4+0x66>
    c4ec:	459a      	cmp	sl, r3
    c4ee:	d902      	bls.n	c4f6 <__udivmoddi4+0x66>
    c4f0:	f1a9 0002 	sub.w	r0, r9, #2
    c4f4:	442b      	add	r3, r5
    c4f6:	eba3 030a 	sub.w	r3, r3, sl
    c4fa:	b2a4      	uxth	r4, r4
    c4fc:	fbb3 f2f8 	udiv	r2, r3, r8
    c500:	fb08 3312 	mls	r3, r8, r2, r3
    c504:	fb02 fe0e 	mul.w	lr, r2, lr
    c508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c50c:	45a6      	cmp	lr, r4
    c50e:	d914      	bls.n	c53a <__udivmoddi4+0xaa>
    c510:	192c      	adds	r4, r5, r4
    c512:	f102 33ff 	add.w	r3, r2, #4294967295
    c516:	d203      	bcs.n	c520 <__udivmoddi4+0x90>
    c518:	45a6      	cmp	lr, r4
    c51a:	d901      	bls.n	c520 <__udivmoddi4+0x90>
    c51c:	1e93      	subs	r3, r2, #2
    c51e:	442c      	add	r4, r5
    c520:	eba4 040e 	sub.w	r4, r4, lr
    c524:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c528:	b11e      	cbz	r6, c532 <__udivmoddi4+0xa2>
    c52a:	40fc      	lsrs	r4, r7
    c52c:	2300      	movs	r3, #0
    c52e:	6034      	str	r4, [r6, #0]
    c530:	6073      	str	r3, [r6, #4]
    c532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c536:	4648      	mov	r0, r9
    c538:	e7dd      	b.n	c4f6 <__udivmoddi4+0x66>
    c53a:	4613      	mov	r3, r2
    c53c:	e7f0      	b.n	c520 <__udivmoddi4+0x90>
    c53e:	b902      	cbnz	r2, c542 <__udivmoddi4+0xb2>
    c540:	deff      	udf	#255	; 0xff
    c542:	bb87      	cbnz	r7, c5a6 <__udivmoddi4+0x116>
    c544:	1a83      	subs	r3, r0, r2
    c546:	2101      	movs	r1, #1
    c548:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c54c:	b2aa      	uxth	r2, r5
    c54e:	fbb3 fcfe 	udiv	ip, r3, lr
    c552:	0c20      	lsrs	r0, r4, #16
    c554:	fb0e 331c 	mls	r3, lr, ip, r3
    c558:	fb0c f802 	mul.w	r8, ip, r2
    c55c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c560:	4598      	cmp	r8, r3
    c562:	d963      	bls.n	c62c <__udivmoddi4+0x19c>
    c564:	18eb      	adds	r3, r5, r3
    c566:	f10c 30ff 	add.w	r0, ip, #4294967295
    c56a:	d204      	bcs.n	c576 <__udivmoddi4+0xe6>
    c56c:	4598      	cmp	r8, r3
    c56e:	d902      	bls.n	c576 <__udivmoddi4+0xe6>
    c570:	f1ac 0002 	sub.w	r0, ip, #2
    c574:	442b      	add	r3, r5
    c576:	eba3 0308 	sub.w	r3, r3, r8
    c57a:	b2a4      	uxth	r4, r4
    c57c:	fbb3 fcfe 	udiv	ip, r3, lr
    c580:	fb0e 331c 	mls	r3, lr, ip, r3
    c584:	fb0c f202 	mul.w	r2, ip, r2
    c588:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c58c:	42a2      	cmp	r2, r4
    c58e:	d94f      	bls.n	c630 <__udivmoddi4+0x1a0>
    c590:	192c      	adds	r4, r5, r4
    c592:	f10c 33ff 	add.w	r3, ip, #4294967295
    c596:	d204      	bcs.n	c5a2 <__udivmoddi4+0x112>
    c598:	42a2      	cmp	r2, r4
    c59a:	d902      	bls.n	c5a2 <__udivmoddi4+0x112>
    c59c:	f1ac 0302 	sub.w	r3, ip, #2
    c5a0:	442c      	add	r4, r5
    c5a2:	1aa4      	subs	r4, r4, r2
    c5a4:	e7be      	b.n	c524 <__udivmoddi4+0x94>
    c5a6:	f1c7 0c20 	rsb	ip, r7, #32
    c5aa:	fa20 f80c 	lsr.w	r8, r0, ip
    c5ae:	fa00 f307 	lsl.w	r3, r0, r7
    c5b2:	fa24 fc0c 	lsr.w	ip, r4, ip
    c5b6:	40bd      	lsls	r5, r7
    c5b8:	ea4c 0203 	orr.w	r2, ip, r3
    c5bc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c5c0:	b2ab      	uxth	r3, r5
    c5c2:	fbb8 fcfe 	udiv	ip, r8, lr
    c5c6:	0c11      	lsrs	r1, r2, #16
    c5c8:	fb0e 801c 	mls	r0, lr, ip, r8
    c5cc:	fb0c f903 	mul.w	r9, ip, r3
    c5d0:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    c5d4:	4581      	cmp	r9, r0
    c5d6:	fa04 f407 	lsl.w	r4, r4, r7
    c5da:	d923      	bls.n	c624 <__udivmoddi4+0x194>
    c5dc:	1828      	adds	r0, r5, r0
    c5de:	f10c 31ff 	add.w	r1, ip, #4294967295
    c5e2:	d204      	bcs.n	c5ee <__udivmoddi4+0x15e>
    c5e4:	4581      	cmp	r9, r0
    c5e6:	d902      	bls.n	c5ee <__udivmoddi4+0x15e>
    c5e8:	f1ac 0102 	sub.w	r1, ip, #2
    c5ec:	4428      	add	r0, r5
    c5ee:	eba0 0009 	sub.w	r0, r0, r9
    c5f2:	b292      	uxth	r2, r2
    c5f4:	fbb0 fcfe 	udiv	ip, r0, lr
    c5f8:	fb0e 001c 	mls	r0, lr, ip, r0
    c5fc:	fb0c f803 	mul.w	r8, ip, r3
    c600:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    c604:	4598      	cmp	r8, r3
    c606:	d90f      	bls.n	c628 <__udivmoddi4+0x198>
    c608:	18eb      	adds	r3, r5, r3
    c60a:	f10c 32ff 	add.w	r2, ip, #4294967295
    c60e:	d204      	bcs.n	c61a <__udivmoddi4+0x18a>
    c610:	4598      	cmp	r8, r3
    c612:	d902      	bls.n	c61a <__udivmoddi4+0x18a>
    c614:	f1ac 0202 	sub.w	r2, ip, #2
    c618:	442b      	add	r3, r5
    c61a:	eba3 0308 	sub.w	r3, r3, r8
    c61e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    c622:	e791      	b.n	c548 <__udivmoddi4+0xb8>
    c624:	4661      	mov	r1, ip
    c626:	e7e2      	b.n	c5ee <__udivmoddi4+0x15e>
    c628:	4662      	mov	r2, ip
    c62a:	e7f6      	b.n	c61a <__udivmoddi4+0x18a>
    c62c:	4660      	mov	r0, ip
    c62e:	e7a2      	b.n	c576 <__udivmoddi4+0xe6>
    c630:	4663      	mov	r3, ip
    c632:	e7b6      	b.n	c5a2 <__udivmoddi4+0x112>
    c634:	4283      	cmp	r3, r0
    c636:	d905      	bls.n	c644 <__udivmoddi4+0x1b4>
    c638:	b10e      	cbz	r6, c63e <__udivmoddi4+0x1ae>
    c63a:	e9c6 7000 	strd	r7, r0, [r6]
    c63e:	2100      	movs	r1, #0
    c640:	4608      	mov	r0, r1
    c642:	e776      	b.n	c532 <__udivmoddi4+0xa2>
    c644:	fab3 f183 	clz	r1, r3
    c648:	b981      	cbnz	r1, c66c <__udivmoddi4+0x1dc>
    c64a:	4283      	cmp	r3, r0
    c64c:	d301      	bcc.n	c652 <__udivmoddi4+0x1c2>
    c64e:	42ba      	cmp	r2, r7
    c650:	d80a      	bhi.n	c668 <__udivmoddi4+0x1d8>
    c652:	1abc      	subs	r4, r7, r2
    c654:	eb60 0303 	sbc.w	r3, r0, r3
    c658:	2001      	movs	r0, #1
    c65a:	469c      	mov	ip, r3
    c65c:	2e00      	cmp	r6, #0
    c65e:	d068      	beq.n	c732 <__udivmoddi4+0x2a2>
    c660:	e9c6 4c00 	strd	r4, ip, [r6]
    c664:	2100      	movs	r1, #0
    c666:	e764      	b.n	c532 <__udivmoddi4+0xa2>
    c668:	4608      	mov	r0, r1
    c66a:	e7f7      	b.n	c65c <__udivmoddi4+0x1cc>
    c66c:	f1c1 0c20 	rsb	ip, r1, #32
    c670:	408b      	lsls	r3, r1
    c672:	fa22 f40c 	lsr.w	r4, r2, ip
    c676:	431c      	orrs	r4, r3
    c678:	fa02 f501 	lsl.w	r5, r2, r1
    c67c:	fa00 f301 	lsl.w	r3, r0, r1
    c680:	fa27 f20c 	lsr.w	r2, r7, ip
    c684:	fa20 fb0c 	lsr.w	fp, r0, ip
    c688:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c68c:	4313      	orrs	r3, r2
    c68e:	fbbb f8f9 	udiv	r8, fp, r9
    c692:	fa1f fe84 	uxth.w	lr, r4
    c696:	fb09 bb18 	mls	fp, r9, r8, fp
    c69a:	0c1a      	lsrs	r2, r3, #16
    c69c:	fb08 fa0e 	mul.w	sl, r8, lr
    c6a0:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    c6a4:	4592      	cmp	sl, r2
    c6a6:	fa07 f701 	lsl.w	r7, r7, r1
    c6aa:	d93e      	bls.n	c72a <__udivmoddi4+0x29a>
    c6ac:	18a2      	adds	r2, r4, r2
    c6ae:	f108 30ff 	add.w	r0, r8, #4294967295
    c6b2:	d204      	bcs.n	c6be <__udivmoddi4+0x22e>
    c6b4:	4592      	cmp	sl, r2
    c6b6:	d902      	bls.n	c6be <__udivmoddi4+0x22e>
    c6b8:	f1a8 0002 	sub.w	r0, r8, #2
    c6bc:	4422      	add	r2, r4
    c6be:	eba2 020a 	sub.w	r2, r2, sl
    c6c2:	b29b      	uxth	r3, r3
    c6c4:	fbb2 f8f9 	udiv	r8, r2, r9
    c6c8:	fb09 2218 	mls	r2, r9, r8, r2
    c6cc:	fb08 fe0e 	mul.w	lr, r8, lr
    c6d0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    c6d4:	4596      	cmp	lr, r2
    c6d6:	d92a      	bls.n	c72e <__udivmoddi4+0x29e>
    c6d8:	18a2      	adds	r2, r4, r2
    c6da:	f108 33ff 	add.w	r3, r8, #4294967295
    c6de:	d204      	bcs.n	c6ea <__udivmoddi4+0x25a>
    c6e0:	4596      	cmp	lr, r2
    c6e2:	d902      	bls.n	c6ea <__udivmoddi4+0x25a>
    c6e4:	f1a8 0302 	sub.w	r3, r8, #2
    c6e8:	4422      	add	r2, r4
    c6ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c6ee:	fba0 9305 	umull	r9, r3, r0, r5
    c6f2:	eba2 020e 	sub.w	r2, r2, lr
    c6f6:	429a      	cmp	r2, r3
    c6f8:	46ce      	mov	lr, r9
    c6fa:	4698      	mov	r8, r3
    c6fc:	d302      	bcc.n	c704 <__udivmoddi4+0x274>
    c6fe:	d106      	bne.n	c70e <__udivmoddi4+0x27e>
    c700:	454f      	cmp	r7, r9
    c702:	d204      	bcs.n	c70e <__udivmoddi4+0x27e>
    c704:	ebb9 0e05 	subs.w	lr, r9, r5
    c708:	eb63 0804 	sbc.w	r8, r3, r4
    c70c:	3801      	subs	r0, #1
    c70e:	b186      	cbz	r6, c732 <__udivmoddi4+0x2a2>
    c710:	ebb7 030e 	subs.w	r3, r7, lr
    c714:	eb62 0708 	sbc.w	r7, r2, r8
    c718:	fa07 fc0c 	lsl.w	ip, r7, ip
    c71c:	40cb      	lsrs	r3, r1
    c71e:	ea4c 0303 	orr.w	r3, ip, r3
    c722:	40cf      	lsrs	r7, r1
    c724:	e9c6 3700 	strd	r3, r7, [r6]
    c728:	e79c      	b.n	c664 <__udivmoddi4+0x1d4>
    c72a:	4640      	mov	r0, r8
    c72c:	e7c7      	b.n	c6be <__udivmoddi4+0x22e>
    c72e:	4643      	mov	r3, r8
    c730:	e7db      	b.n	c6ea <__udivmoddi4+0x25a>
    c732:	4631      	mov	r1, r6
    c734:	e6fd      	b.n	c532 <__udivmoddi4+0xa2>
    c736:	2804      	cmp	r0, #4
    c738:	d202      	bcs.n	c740 <__udivmoddi4+0x2b0>
    c73a:	f04f 0028 	mov.w	r0, #40	; 0x28
    c73e:	4770      	bx	lr
    c740:	d102      	bne.n	c748 <__udivmoddi4+0x2b8>
    c742:	f04f 0010 	mov.w	r0, #16
    c746:	4770      	bx	lr
    c748:	f04f 0000 	mov.w	r0, #0
    c74c:	4770      	bx	lr
    c74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c752:	000d      	movs	r5, r1
    c754:	4604      	mov	r4, r0
    c756:	f04f 0602 	mov.w	r6, #2
    c75a:	f04f 0701 	mov.w	r7, #1
    c75e:	d008      	beq.n	c772 <__udivmoddi4+0x2e2>
    c760:	7828      	ldrb	r0, [r5, #0]
    c762:	b1d0      	cbz	r0, c79a <__udivmoddi4+0x30a>
    c764:	2801      	cmp	r0, #1
    c766:	d007      	beq.n	c778 <__udivmoddi4+0x2e8>
    c768:	2802      	cmp	r0, #2
    c76a:	d014      	beq.n	c796 <__udivmoddi4+0x306>
    c76c:	2803      	cmp	r0, #3
    c76e:	d13e      	bne.n	c7ee <__udivmoddi4+0x35e>
    c770:	e016      	b.n	c7a0 <__udivmoddi4+0x310>
    c772:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
    c776:	e00e      	b.n	c796 <__udivmoddi4+0x306>
    c778:	6868      	ldr	r0, [r5, #4]
    c77a:	28c8      	cmp	r0, #200	; 0xc8
    c77c:	d303      	bcc.n	c786 <__udivmoddi4+0x2f6>
    c77e:	2103      	movs	r1, #3
    c780:	f7f5 fbd6 	bl	1f30 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    c784:	b108      	cbz	r0, c78a <__udivmoddi4+0x2fa>
    c786:	2600      	movs	r6, #0
    c788:	e007      	b.n	c79a <__udivmoddi4+0x30a>
    c78a:	4620      	mov	r0, r4
    c78c:	6869      	ldr	r1, [r5, #4]
    c78e:	f000 f943 	bl	ca18 <__udivmoddi4+0x588>
    c792:	2601      	movs	r6, #1
    c794:	e001      	b.n	c79a <__udivmoddi4+0x30a>
    c796:	f7f4 fb27 	bl	de8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x9c>
    c79a:	4630      	mov	r0, r6
    c79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c7a0:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    c7a4:	2800      	cmp	r0, #0
    c7a6:	d1f6      	bne.n	c796 <__udivmoddi4+0x306>
    c7a8:	6868      	ldr	r0, [r5, #4]
    c7aa:	f7f4 faef 	bl	d8c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x40>
    c7ae:	b1f0      	cbz	r0, c7ee <__udivmoddi4+0x35e>
    c7b0:	6869      	ldr	r1, [r5, #4]
    c7b2:	7808      	ldrb	r0, [r1, #0]
    c7b4:	b130      	cbz	r0, c7c4 <__udivmoddi4+0x334>
    c7b6:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    c7ba:	2805      	cmp	r0, #5
    c7bc:	d008      	beq.n	c7d0 <__udivmoddi4+0x340>
    c7be:	f44f 71be 	mov.w	r1, #380	; 0x17c
    c7c2:	e011      	b.n	c7e8 <__udivmoddi4+0x358>
    c7c4:	4620      	mov	r0, r4
    c7c6:	f000 f92f 	bl	ca28 <__udivmoddi4+0x598>
    c7ca:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    c7ce:	e7e2      	b.n	c796 <__udivmoddi4+0x306>
    c7d0:	4620      	mov	r0, r4
    c7d2:	f000 f942 	bl	ca5a <__udivmoddi4+0x5ca>
    c7d6:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    c7da:	4621      	mov	r1, r4
    c7dc:	f000 f80a 	bl	c7f4 <__udivmoddi4+0x364>
    c7e0:	2800      	cmp	r0, #0
    c7e2:	d1d8      	bne.n	c796 <__udivmoddi4+0x306>
    c7e4:	f44f 71bf 	mov.w	r1, #382	; 0x17e
    c7e8:	206a      	movs	r0, #106	; 0x6a
    c7ea:	f7f7 fe57 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c7ee:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    c7f2:	e7d0      	b.n	c796 <__udivmoddi4+0x306>
    c7f4:	f7f5 bd7e 	b.w	22f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    c7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c7fc:	460d      	mov	r5, r1
    c7fe:	0004      	movs	r4, r0
    c800:	d00c      	beq.n	c81c <__udivmoddi4+0x38c>
    c802:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    c806:	2700      	movs	r7, #0
    c808:	2002      	movs	r0, #2
    c80a:	2d09      	cmp	r5, #9
    c80c:	d270      	bcs.n	c8f0 <__udivmoddi4+0x460>
    c80e:	e8df f005 	tbb	[pc, r5]
    c812:	1108      	.short	0x1108
    c814:	70653535 	.word	0x70653535
    c818:	0093a588 	.word	0x0093a588
    c81c:	f44f 71cb 	mov.w	r1, #406	; 0x196
    c820:	e0f7      	b.n	ca12 <__udivmoddi4+0x582>
    c822:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    c826:	2804      	cmp	r0, #4
    c828:	d07a      	beq.n	c920 <__udivmoddi4+0x490>
    c82a:	2803      	cmp	r0, #3
    c82c:	d0fc      	beq.n	c828 <__udivmoddi4+0x398>
    c82e:	f240 11a1 	movw	r1, #417	; 0x1a1
    c832:	e0ee      	b.n	ca12 <__udivmoddi4+0x582>
    c834:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    c838:	2804      	cmp	r0, #4
    c83a:	d004      	beq.n	c846 <__udivmoddi4+0x3b6>
    c83c:	2803      	cmp	r0, #3
    c83e:	d002      	beq.n	c846 <__udivmoddi4+0x3b6>
    c840:	f240 11a5 	movw	r1, #421	; 0x1a5
    c844:	e0e5      	b.n	ca12 <__udivmoddi4+0x582>
    c846:	2005      	movs	r0, #5
    c848:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    c84c:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    c850:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    c854:	bbb0      	cbnz	r0, c8c4 <__udivmoddi4+0x434>
    c856:	2100      	movs	r1, #0
    c858:	4620      	mov	r0, r4
    c85a:	f000 f8dd 	bl	ca18 <__udivmoddi4+0x588>
    c85e:	7820      	ldrb	r0, [r4, #0]
    c860:	2801      	cmp	r0, #1
    c862:	d006      	beq.n	c872 <__udivmoddi4+0x3e2>
    c864:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    c868:	e9c4 0106 	strd	r0, r1, [r4, #24]
    c86c:	2100      	movs	r1, #0
    c86e:	6a22      	ldr	r2, [r4, #32]
    c870:	e048      	b.n	c904 <__udivmoddi4+0x474>
    c872:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    c876:	f7f5 fc49 	bl	210c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    c87a:	e7f5      	b.n	c868 <__udivmoddi4+0x3d8>
    c87c:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    c880:	2904      	cmp	r1, #4
    c882:	d004      	beq.n	c88e <__udivmoddi4+0x3fe>
    c884:	2903      	cmp	r1, #3
    c886:	d002      	beq.n	c88e <__udivmoddi4+0x3fe>
    c888:	f240 11c3 	movw	r1, #451	; 0x1c3
    c88c:	e0c1      	b.n	ca12 <__udivmoddi4+0x582>
    c88e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    c892:	b122      	cbz	r2, c89e <__udivmoddi4+0x40e>
    c894:	4621      	mov	r1, r4
    c896:	4630      	mov	r0, r6
    c898:	f000 f8fe 	bl	ca98 <__udivmoddi4+0x608>
    c89c:	e0b1      	b.n	ca02 <__udivmoddi4+0x572>
    c89e:	2904      	cmp	r1, #4
    c8a0:	d000      	beq.n	c8a4 <__udivmoddi4+0x414>
    c8a2:	2001      	movs	r0, #1
    c8a4:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    c8a8:	6a22      	ldr	r2, [r4, #32]
    c8aa:	2d02      	cmp	r5, #2
    c8ac:	d00b      	beq.n	c8c6 <__udivmoddi4+0x436>
    c8ae:	2106      	movs	r1, #6
    c8b0:	4630      	mov	r0, r6
    c8b2:	4790      	blx	r2
    c8b4:	2800      	cmp	r0, #0
    c8b6:	d06d      	beq.n	c994 <__udivmoddi4+0x504>
    c8b8:	7800      	ldrb	r0, [r0, #0]
    c8ba:	2800      	cmp	r0, #0
    c8bc:	d06a      	beq.n	c994 <__udivmoddi4+0x504>
    c8be:	f240 11dd 	movw	r1, #477	; 0x1dd
    c8c2:	e0a6      	b.n	ca12 <__udivmoddi4+0x582>
    c8c4:	e034      	b.n	c930 <__udivmoddi4+0x4a0>
    c8c6:	2105      	movs	r1, #5
    c8c8:	4630      	mov	r0, r6
    c8ca:	4790      	blx	r2
    c8cc:	2800      	cmp	r0, #0
    c8ce:	d07c      	beq.n	c9ca <__udivmoddi4+0x53a>
    c8d0:	7800      	ldrb	r0, [r0, #0]
    c8d2:	2800      	cmp	r0, #0
    c8d4:	d079      	beq.n	c9ca <__udivmoddi4+0x53a>
    c8d6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    c8da:	e09a      	b.n	ca12 <__udivmoddi4+0x582>
    c8dc:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    c8e0:	2805      	cmp	r0, #5
    c8e2:	d002      	beq.n	c8ea <__udivmoddi4+0x45a>
    c8e4:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    c8e8:	e093      	b.n	ca12 <__udivmoddi4+0x582>
    c8ea:	2102      	movs	r1, #2
    c8ec:	6a22      	ldr	r2, [r4, #32]
    c8ee:	e009      	b.n	c904 <__udivmoddi4+0x474>
    c8f0:	e07e      	b.n	c9f0 <__udivmoddi4+0x560>
    c8f2:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    c8f6:	2805      	cmp	r0, #5
    c8f8:	d002      	beq.n	c900 <__udivmoddi4+0x470>
    c8fa:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    c8fe:	e088      	b.n	ca12 <__udivmoddi4+0x582>
    c900:	6a22      	ldr	r2, [r4, #32]
    c902:	2101      	movs	r1, #1
    c904:	4630      	mov	r0, r6
    c906:	4790      	blx	r2
    c908:	4601      	mov	r1, r0
    c90a:	4620      	mov	r0, r4
    c90c:	f7ff ff1f 	bl	c74e <__udivmoddi4+0x2be>
    c910:	2802      	cmp	r0, #2
    c912:	d076      	beq.n	ca02 <__udivmoddi4+0x572>
    c914:	b3e8      	cbz	r0, c992 <__udivmoddi4+0x502>
    c916:	2801      	cmp	r0, #1
    c918:	d06d      	beq.n	c9f6 <__udivmoddi4+0x566>
    c91a:	f240 212a 	movw	r1, #554	; 0x22a
    c91e:	e078      	b.n	ca12 <__udivmoddi4+0x582>
    c920:	e071      	b.n	ca06 <__udivmoddi4+0x576>
    c922:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    c926:	2805      	cmp	r0, #5
    c928:	d002      	beq.n	c930 <__udivmoddi4+0x4a0>
    c92a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    c92e:	e070      	b.n	ca12 <__udivmoddi4+0x582>
    c930:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c934:	f7f4 ba58 	b.w	de8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x9c>
    c938:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    c93c:	2805      	cmp	r0, #5
    c93e:	d002      	beq.n	c946 <__udivmoddi4+0x4b6>
    c940:	f240 11f5 	movw	r1, #501	; 0x1f5
    c944:	e065      	b.n	ca12 <__udivmoddi4+0x582>
    c946:	6a22      	ldr	r2, [r4, #32]
    c948:	210a      	movs	r1, #10
    c94a:	4630      	mov	r0, r6
    c94c:	4790      	blx	r2
    c94e:	4601      	mov	r1, r0
    c950:	4620      	mov	r0, r4
    c952:	f7ff fefc 	bl	c74e <__udivmoddi4+0x2be>
    c956:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    c95a:	e05a      	b.n	ca12 <__udivmoddi4+0x582>
    c95c:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    c960:	2905      	cmp	r1, #5
    c962:	d007      	beq.n	c974 <__udivmoddi4+0x4e4>
    c964:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    c968:	b10a      	cbz	r2, c96e <__udivmoddi4+0x4de>
    c96a:	2903      	cmp	r1, #3
    c96c:	d002      	beq.n	c974 <__udivmoddi4+0x4e4>
    c96e:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    c972:	e04e      	b.n	ca12 <__udivmoddi4+0x582>
    c974:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    c978:	b129      	cbz	r1, c986 <__udivmoddi4+0x4f6>
    c97a:	4621      	mov	r1, r4
    c97c:	4630      	mov	r0, r6
    c97e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c982:	f000 b889 	b.w	ca98 <__udivmoddi4+0x608>
    c986:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
    c98a:	b199      	cbz	r1, c9b4 <__udivmoddi4+0x524>
    c98c:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    c990:	e001      	b.n	c996 <__udivmoddi4+0x506>
    c992:	e033      	b.n	c9fc <__udivmoddi4+0x56c>
    c994:	e035      	b.n	ca02 <__udivmoddi4+0x572>
    c996:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    c99a:	6a22      	ldr	r2, [r4, #32]
    c99c:	2108      	movs	r1, #8
    c99e:	4630      	mov	r0, r6
    c9a0:	4790      	blx	r2
    c9a2:	2800      	cmp	r0, #0
    c9a4:	d011      	beq.n	c9ca <__udivmoddi4+0x53a>
    c9a6:	7800      	ldrb	r0, [r0, #0]
    c9a8:	2800      	cmp	r0, #0
    c9aa:	d00e      	beq.n	c9ca <__udivmoddi4+0x53a>
    c9ac:	f44f 7102 	mov.w	r1, #520	; 0x208
    c9b0:	e02f      	b.n	ca12 <__udivmoddi4+0x582>
    c9b2:	e00a      	b.n	c9ca <__udivmoddi4+0x53a>
    c9b4:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    c9b8:	b161      	cbz	r1, c9d4 <__udivmoddi4+0x544>
    c9ba:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    c9be:	4621      	mov	r1, r4
    c9c0:	f7ff ff18 	bl	c7f4 <__udivmoddi4+0x364>
    c9c4:	b118      	cbz	r0, c9ce <__udivmoddi4+0x53e>
    c9c6:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    c9ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c9ce:	f44f 7103 	mov.w	r1, #524	; 0x20c
    c9d2:	e01e      	b.n	ca12 <__udivmoddi4+0x582>
    c9d4:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    c9d8:	6a22      	ldr	r2, [r4, #32]
    c9da:	2107      	movs	r1, #7
    c9dc:	4630      	mov	r0, r6
    c9de:	4790      	blx	r2
    c9e0:	2800      	cmp	r0, #0
    c9e2:	d0f2      	beq.n	c9ca <__udivmoddi4+0x53a>
    c9e4:	7800      	ldrb	r0, [r0, #0]
    c9e6:	2800      	cmp	r0, #0
    c9e8:	d0ef      	beq.n	c9ca <__udivmoddi4+0x53a>
    c9ea:	f44f 7105 	mov.w	r1, #532	; 0x214
    c9ee:	e010      	b.n	ca12 <__udivmoddi4+0x582>
    c9f0:	f240 2119 	movw	r1, #537	; 0x219
    c9f4:	e00d      	b.n	ca12 <__udivmoddi4+0x582>
    c9f6:	2104      	movs	r1, #4
    c9f8:	6a22      	ldr	r2, [r4, #32]
    c9fa:	e783      	b.n	c904 <__udivmoddi4+0x474>
    c9fc:	2103      	movs	r1, #3
    c9fe:	6a22      	ldr	r2, [r4, #32]
    ca00:	e780      	b.n	c904 <__udivmoddi4+0x474>
    ca02:	2d00      	cmp	r5, #0
    ca04:	d1e1      	bne.n	c9ca <__udivmoddi4+0x53a>
    ca06:	f000 f8fd 	bl	cc04 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    ca0a:	2800      	cmp	r0, #0
    ca0c:	d0dd      	beq.n	c9ca <__udivmoddi4+0x53a>
    ca0e:	f240 2133 	movw	r1, #563	; 0x233
    ca12:	206a      	movs	r0, #106	; 0x6a
    ca14:	f7f7 fd42 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ca18:	4602      	mov	r2, r0
    ca1a:	7803      	ldrb	r3, [r0, #0]
    ca1c:	6840      	ldr	r0, [r0, #4]
    ca1e:	4408      	add	r0, r1
    ca20:	6050      	str	r0, [r2, #4]
    ca22:	3859      	subs	r0, #89	; 0x59
    ca24:	f7f6 bb78 	b.w	3118 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    ca28:	2201      	movs	r2, #1
    ca2a:	7002      	strb	r2, [r0, #0]
    ca2c:	2200      	movs	r2, #0
    ca2e:	72c2      	strb	r2, [r0, #11]
    ca30:	790a      	ldrb	r2, [r1, #4]
    ca32:	b172      	cbz	r2, ca52 <__udivmoddi4+0x5c2>
    ca34:	2200      	movs	r2, #0
    ca36:	8102      	strh	r2, [r0, #8]
    ca38:	794a      	ldrb	r2, [r1, #5]
    ca3a:	b162      	cbz	r2, ca56 <__udivmoddi4+0x5c6>
    ca3c:	2203      	movs	r2, #3
    ca3e:	7282      	strb	r2, [r0, #10]
    ca40:	688a      	ldr	r2, [r1, #8]
    ca42:	326a      	adds	r2, #106	; 0x6a
    ca44:	6042      	str	r2, [r0, #4]
    ca46:	68c9      	ldr	r1, [r1, #12]
    ca48:	6101      	str	r1, [r0, #16]
    ca4a:	2103      	movs	r1, #3
    ca4c:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    ca50:	4770      	bx	lr
    ca52:	222b      	movs	r2, #43	; 0x2b
    ca54:	e7ef      	b.n	ca36 <__udivmoddi4+0x5a6>
    ca56:	2202      	movs	r2, #2
    ca58:	e7f1      	b.n	ca3e <__udivmoddi4+0x5ae>
    ca5a:	b510      	push	{r4, lr}
    ca5c:	2200      	movs	r2, #0
    ca5e:	7002      	strb	r2, [r0, #0]
    ca60:	72c2      	strb	r2, [r0, #11]
    ca62:	790a      	ldrb	r2, [r1, #4]
    ca64:	b1a2      	cbz	r2, ca90 <__udivmoddi4+0x600>
    ca66:	2200      	movs	r2, #0
    ca68:	8102      	strh	r2, [r0, #8]
    ca6a:	794a      	ldrb	r2, [r1, #5]
    ca6c:	b192      	cbz	r2, ca94 <__udivmoddi4+0x604>
    ca6e:	2203      	movs	r2, #3
    ca70:	7282      	strb	r2, [r0, #10]
    ca72:	68ca      	ldr	r2, [r1, #12]
    ca74:	326a      	adds	r2, #106	; 0x6a
    ca76:	6042      	str	r2, [r0, #4]
    ca78:	e9d0 4206 	ldrd	r4, r2, [r0, #24]
    ca7c:	6889      	ldr	r1, [r1, #8]
    ca7e:	17cb      	asrs	r3, r1, #31
    ca80:	1861      	adds	r1, r4, r1
    ca82:	415a      	adcs	r2, r3
    ca84:	e9c0 1204 	strd	r1, r2, [r0, #16]
    ca88:	2104      	movs	r1, #4
    ca8a:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    ca8e:	bd10      	pop	{r4, pc}
    ca90:	222b      	movs	r2, #43	; 0x2b
    ca92:	e7e9      	b.n	ca68 <__udivmoddi4+0x5d8>
    ca94:	2202      	movs	r2, #2
    ca96:	e7eb      	b.n	ca70 <__udivmoddi4+0x5e0>
    ca98:	b570      	push	{r4, r5, r6, lr}
    ca9a:	4605      	mov	r5, r0
    ca9c:	460c      	mov	r4, r1
    ca9e:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
    caa2:	f7f6 f907 	bl	2cb4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    caa6:	b178      	cbz	r0, cac8 <__udivmoddi4+0x638>
    caa8:	4620      	mov	r0, r4
    caaa:	f000 f810 	bl	cace <__udivmoddi4+0x63e>
    caae:	6a22      	ldr	r2, [r4, #32]
    cab0:	2109      	movs	r1, #9
    cab2:	4628      	mov	r0, r5
    cab4:	4790      	blx	r2
    cab6:	2800      	cmp	r0, #0
    cab8:	d008      	beq.n	cacc <__udivmoddi4+0x63c>
    caba:	7800      	ldrb	r0, [r0, #0]
    cabc:	2800      	cmp	r0, #0
    cabe:	d005      	beq.n	cacc <__udivmoddi4+0x63c>
    cac0:	21dc      	movs	r1, #220	; 0xdc
    cac2:	206a      	movs	r0, #106	; 0x6a
    cac4:	f7f7 fcea 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    cac8:	21d8      	movs	r1, #216	; 0xd8
    caca:	e7fa      	b.n	cac2 <__udivmoddi4+0x632>
    cacc:	bd70      	pop	{r4, r5, r6, pc}
    cace:	2100      	movs	r1, #0
    cad0:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    cad4:	f800 1f24 	strb.w	r1, [r0, #36]!
    cad8:	7041      	strb	r1, [r0, #1]
    cada:	4770      	bx	lr

0000cadc <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    cadc:	b570      	push	{r4, r5, r6, lr}
    cade:	f7f4 f9df 	bl	ea0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    cae2:	4605      	mov	r5, r0
    cae4:	2400      	movs	r4, #0
    cae6:	e006      	b.n	caf6 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    cae8:	4620      	mov	r0, r4
    caea:	f7f4 f9df 	bl	eac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    caee:	f7ff ffee 	bl	cace <__udivmoddi4+0x63e>
    caf2:	1c64      	adds	r4, r4, #1
    caf4:	b2e4      	uxtb	r4, r4
    caf6:	42ac      	cmp	r4, r5
    caf8:	d3f6      	bcc.n	cae8 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    cafa:	bd70      	pop	{r4, r5, r6, pc}

0000cafc <mpsl_timeslot_request>:
    cafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb00:	460d      	mov	r5, r1
    cb02:	f7f4 f9d3 	bl	eac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    cb06:	0004      	movs	r4, r0
    cb08:	d008      	beq.n	cb1c <mpsl_timeslot_request+0x20>
    cb0a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    cb0e:	f06f 0622 	mvn.w	r6, #34	; 0x22
    cb12:	2801      	cmp	r0, #1
    cb14:	d006      	beq.n	cb24 <mpsl_timeslot_request+0x28>
    cb16:	2802      	cmp	r0, #2
    cb18:	d111      	bne.n	cb3e <mpsl_timeslot_request+0x42>
    cb1a:	e003      	b.n	cb24 <mpsl_timeslot_request+0x28>
    cb1c:	f06f 0001 	mvn.w	r0, #1
    cb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cb24:	f06f 0715 	mvn.w	r7, #21
    cb28:	b15d      	cbz	r5, cb42 <mpsl_timeslot_request+0x46>
    cb2a:	4628      	mov	r0, r5
    cb2c:	f7f4 f92e 	bl	d8c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x40>
    cb30:	b138      	cbz	r0, cb42 <mpsl_timeslot_request+0x46>
    cb32:	7828      	ldrb	r0, [r5, #0]
    cb34:	b138      	cbz	r0, cb46 <mpsl_timeslot_request+0x4a>
    cb36:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    cb3a:	2802      	cmp	r0, #2
    cb3c:	d008      	beq.n	cb50 <mpsl_timeslot_request+0x54>
    cb3e:	4630      	mov	r0, r6
    cb40:	e7ee      	b.n	cb20 <mpsl_timeslot_request+0x24>
    cb42:	4638      	mov	r0, r7
    cb44:	e7ec      	b.n	cb20 <mpsl_timeslot_request+0x24>
    cb46:	4629      	mov	r1, r5
    cb48:	4620      	mov	r0, r4
    cb4a:	f7ff ff6d 	bl	ca28 <__udivmoddi4+0x598>
    cb4e:	e003      	b.n	cb58 <mpsl_timeslot_request+0x5c>
    cb50:	4629      	mov	r1, r5
    cb52:	4620      	mov	r0, r4
    cb54:	f7ff ff81 	bl	ca5a <__udivmoddi4+0x5ca>
    cb58:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    cb5c:	4621      	mov	r1, r4
    cb5e:	f7ff fe49 	bl	c7f4 <__udivmoddi4+0x364>
    cb62:	b108      	cbz	r0, cb68 <mpsl_timeslot_request+0x6c>
    cb64:	2000      	movs	r0, #0
    cb66:	e7db      	b.n	cb20 <mpsl_timeslot_request+0x24>
    cb68:	f240 21b1 	movw	r1, #689	; 0x2b1
    cb6c:	206a      	movs	r0, #106	; 0x6a
    cb6e:	f7f7 fc95 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000cb72 <mpsl_timeslot_session_close>:
    cb72:	b510      	push	{r4, lr}
    cb74:	4604      	mov	r4, r0
    cb76:	f7f4 f999 	bl	eac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    cb7a:	0001      	movs	r1, r0
    cb7c:	d005      	beq.n	cb8a <mpsl_timeslot_session_close+0x18>
    cb7e:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
    cb82:	f06f 0222 	mvn.w	r2, #34	; 0x22
    cb86:	b978      	cbnz	r0, cba8 <mpsl_timeslot_session_close+0x36>
    cb88:	e002      	b.n	cb90 <mpsl_timeslot_session_close+0x1e>
    cb8a:	f06f 0001 	mvn.w	r0, #1
    cb8e:	bd10      	pop	{r4, pc}
    cb90:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
    cb94:	b140      	cbz	r0, cba8 <mpsl_timeslot_session_close+0x36>
    cb96:	2802      	cmp	r0, #2
    cb98:	d008      	beq.n	cbac <mpsl_timeslot_session_close+0x3a>
    cb9a:	2801      	cmp	r0, #1
    cb9c:	d006      	beq.n	cbac <mpsl_timeslot_session_close+0x3a>
    cb9e:	2001      	movs	r0, #1
    cba0:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    cba4:	2000      	movs	r0, #0
    cba6:	bd10      	pop	{r4, pc}
    cba8:	4610      	mov	r0, r2
    cbaa:	bd10      	pop	{r4, pc}
    cbac:	4620      	mov	r0, r4
    cbae:	f7ff ff73 	bl	ca98 <__udivmoddi4+0x608>
    cbb2:	e7f7      	b.n	cba4 <mpsl_timeslot_session_close+0x32>

0000cbb4 <mpsl_timeslot_session_count_set>:
    cbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cbb8:	460e      	mov	r6, r1
    cbba:	4607      	mov	r7, r0
    cbbc:	f7f4 f970 	bl	ea0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    cbc0:	4605      	mov	r5, r0
    cbc2:	2400      	movs	r4, #0
    cbc4:	e00b      	b.n	cbde <mpsl_timeslot_session_count_set+0x2a>
    cbc6:	4620      	mov	r0, r4
    cbc8:	f7f4 f970 	bl	eac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    cbcc:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    cbd0:	b118      	cbz	r0, cbda <mpsl_timeslot_session_count_set+0x26>
    cbd2:	f04f 30ff 	mov.w	r0, #4294967295
    cbd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cbda:	1c64      	adds	r4, r4, #1
    cbdc:	b2e4      	uxtb	r4, r4
    cbde:	42ac      	cmp	r4, r5
    cbe0:	d3f1      	bcc.n	cbc6 <mpsl_timeslot_session_count_set+0x12>
    cbe2:	2e08      	cmp	r6, #8
    cbe4:	d902      	bls.n	cbec <mpsl_timeslot_session_count_set+0x38>
    cbe6:	f06f 0015 	mvn.w	r0, #21
    cbea:	e7f4      	b.n	cbd6 <mpsl_timeslot_session_count_set+0x22>
    cbec:	b117      	cbz	r7, cbf4 <mpsl_timeslot_session_count_set+0x40>
    cbee:	4631      	mov	r1, r6
    cbf0:	4638      	mov	r0, r7
    cbf2:	e001      	b.n	cbf8 <mpsl_timeslot_session_count_set+0x44>
    cbf4:	2100      	movs	r1, #0
    cbf6:	4608      	mov	r0, r1
    cbf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cbfc:	f7f4 b93c 	b.w	e78 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000cc00 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    cc00:	f7f6 bd2e 	b.w	3660 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

0000cc04 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    cc04:	b510      	push	{r4, lr}
    cc06:	2000      	movs	r0, #0
    cc08:	f7f7 f850 	bl	3cac <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    cc0c:	6800      	ldr	r0, [r0, #0]
    cc0e:	2800      	cmp	r0, #0
    cc10:	bf18      	it	ne
    cc12:	2001      	movne	r0, #1
    cc14:	bd10      	pop	{r4, pc}

0000cc16 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    cc16:	b510      	push	{r4, lr}
    cc18:	f7f7 f8c8 	bl	3dac <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    cc1c:	f7f6 fb9a 	bl	3354 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    cc20:	f000 f802 	bl	cc28 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    cc24:	b280      	uxth	r0, r0
    cc26:	bd10      	pop	{r4, pc}

0000cc28 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    cc28:	0a41      	lsrs	r1, r0, #9
    cc2a:	f643 5209 	movw	r2, #15625	; 0x3d09
    cc2e:	4351      	muls	r1, r2
    cc30:	f3c0 0008 	ubfx	r0, r0, #0, #9
    cc34:	fb10 f002 	smulbb	r0, r0, r2
    cc38:	f500 7080 	add.w	r0, r0, #256	; 0x100
    cc3c:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    cc40:	4770      	bx	lr
    cc42:	2800      	cmp	r0, #0
    cc44:	db09      	blt.n	cc5a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    cc46:	f000 021f 	and.w	r2, r0, #31
    cc4a:	2101      	movs	r1, #1
    cc4c:	4091      	lsls	r1, r2
    cc4e:	0940      	lsrs	r0, r0, #5
    cc50:	0080      	lsls	r0, r0, #2
    cc52:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cc56:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    cc5a:	4770      	bx	lr
    cc5c:	2800      	cmp	r0, #0
    cc5e:	db0d      	blt.n	cc7c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    cc60:	f000 021f 	and.w	r2, r0, #31
    cc64:	2101      	movs	r1, #1
    cc66:	4091      	lsls	r1, r2
    cc68:	0940      	lsrs	r0, r0, #5
    cc6a:	0080      	lsls	r0, r0, #2
    cc6c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cc70:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    cc74:	f3bf 8f4f 	dsb	sy
    cc78:	f3bf 8f6f 	isb	sy
    cc7c:	4770      	bx	lr

0000cc7e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    cc7e:	b570      	push	{r4, r5, r6, lr}
    cc80:	4602      	mov	r2, r0
    cc82:	2000      	movs	r0, #0
    cc84:	2900      	cmp	r1, #0
    cc86:	d01d      	beq.n	ccc4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    cc88:	fba2 0101 	umull	r0, r1, r2, r1
    cc8c:	0a40      	lsrs	r0, r0, #9
    cc8e:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    cc92:	0a49      	lsrs	r1, r1, #9
    cc94:	1c40      	adds	r0, r0, #1
    cc96:	f141 0100 	adc.w	r1, r1, #0
    cc9a:	f240 72a1 	movw	r2, #1953	; 0x7a1
    cc9e:	1883      	adds	r3, r0, r2
    cca0:	f141 0100 	adc.w	r1, r1, #0
    cca4:	1c5b      	adds	r3, r3, #1
    cca6:	f141 0400 	adc.w	r4, r1, #0
    ccaa:	2100      	movs	r1, #0
    ccac:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    ccb0:	41a1      	sbcs	r1, r4
    ccb2:	d203      	bcs.n	ccbc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    ccb4:	2172      	movs	r1, #114	; 0x72
    ccb6:	206d      	movs	r0, #109	; 0x6d
    ccb8:	f7f7 fbf0 	bl	449c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ccbc:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    ccc0:	fbb0 f0f2 	udiv	r0, r0, r2
    ccc4:	bd70      	pop	{r4, r5, r6, pc}
    ccc6:	5840      	ldr	r0, [r0, r1]
    ccc8:	2800      	cmp	r0, #0
    ccca:	d000      	beq.n	ccce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    cccc:	2001      	movs	r0, #1
    ccce:	4770      	bx	lr
    ccd0:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    ccd4:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    ccd8:	f002 0201 	and.w	r2, r2, #1
    ccdc:	03c0      	lsls	r0, r0, #15
    ccde:	d503      	bpl.n	cce8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    cce0:	428a      	cmp	r2, r1
    cce2:	d101      	bne.n	cce8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    cce4:	2001      	movs	r0, #1
    cce6:	4770      	bx	lr
    cce8:	2000      	movs	r0, #0
    ccea:	4770      	bx	lr

0000ccec <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    ccec:	b510      	push	{r4, lr}
    ccee:	2101      	movs	r1, #1
    ccf0:	0788      	lsls	r0, r1, #30
    ccf2:	f7f7 fb7d 	bl	43f0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    ccf6:	2800      	cmp	r0, #0
    ccf8:	d000      	beq.n	ccfc <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    ccfa:	2001      	movs	r0, #1
    ccfc:	bd10      	pop	{r4, pc}

0000ccfe <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    ccfe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    cd02:	2101      	movs	r1, #1
    cd04:	6001      	str	r1, [r0, #0]
    cd06:	4770      	bx	lr

0000cd08 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    cd08:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    cd0c:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    cd10:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    cd14:	f002 0203 	and.w	r2, r2, #3
    cd18:	03c9      	lsls	r1, r1, #15
    cd1a:	d503      	bpl.n	cd24 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    cd1c:	4282      	cmp	r2, r0
    cd1e:	d101      	bne.n	cd24 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    cd20:	2001      	movs	r0, #1
    cd22:	4770      	bx	lr
    cd24:	2000      	movs	r0, #0
    cd26:	4770      	bx	lr

0000cd28 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    cd28:	b510      	push	{r4, lr}
    cd2a:	2100      	movs	r1, #0
    cd2c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    cd30:	f7f7 fb5e 	bl	43f0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    cd34:	2800      	cmp	r0, #0
    cd36:	d000      	beq.n	cd3a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    cd38:	2001      	movs	r0, #1
    cd3a:	bd10      	pop	{r4, pc}
    cd3c:	2800      	cmp	r0, #0
    cd3e:	db09      	blt.n	cd54 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    cd40:	f000 021f 	and.w	r2, r0, #31
    cd44:	2101      	movs	r1, #1
    cd46:	4091      	lsls	r1, r2
    cd48:	0940      	lsrs	r0, r0, #5
    cd4a:	0080      	lsls	r0, r0, #2
    cd4c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cd50:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    cd54:	4770      	bx	lr
    cd56:	2800      	cmp	r0, #0
    cd58:	db0d      	blt.n	cd76 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    cd5a:	f000 021f 	and.w	r2, r0, #31
    cd5e:	2101      	movs	r1, #1
    cd60:	4091      	lsls	r1, r2
    cd62:	0940      	lsrs	r0, r0, #5
    cd64:	0080      	lsls	r0, r0, #2
    cd66:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cd6a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    cd6e:	f3bf 8f4f 	dsb	sy
    cd72:	f3bf 8f6f 	isb	sy
    cd76:	4770      	bx	lr
    cd78:	00021000 	.word	0x00021000
    cd7c:	000000fa 	.word	0x000000fa
    cd80:	63a70f14 	.word	0x63a70f14
    cd84:	c477f9cf 	.word	0xc477f9cf
    cd88:	e931f9ef 	.word	0xe931f9ef
    cd8c:	03bcf561 	.word	0x03bcf561
    cd90:	2b06749a 	.word	0x2b06749a
    cd94:	2800      	cmp	r0, #0
    cd96:	db09      	blt.n	cdac <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    cd98:	f000 021f 	and.w	r2, r0, #31
    cd9c:	2101      	movs	r1, #1
    cd9e:	4091      	lsls	r1, r2
    cda0:	0940      	lsrs	r0, r0, #5
    cda2:	0080      	lsls	r0, r0, #2
    cda4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cda8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    cdac:	4770      	bx	lr

0000cdae <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    cdae:	f3ef 8110 	mrs	r1, PRIMASK
    cdb2:	b672      	cpsid	i
    cdb4:	7802      	ldrb	r2, [r0, #0]
    cdb6:	2a01      	cmp	r2, #1
    cdb8:	d001      	beq.n	cdbe <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    cdba:	2201      	movs	r2, #1
    cdbc:	e000      	b.n	cdc0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    cdbe:	2200      	movs	r2, #0
    cdc0:	2301      	movs	r3, #1
    cdc2:	7003      	strb	r3, [r0, #0]
    cdc4:	b901      	cbnz	r1, cdc8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    cdc6:	b662      	cpsie	i
    cdc8:	b10a      	cbz	r2, cdce <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    cdca:	2000      	movs	r0, #0
    cdcc:	4770      	bx	lr
    cdce:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cdd2:	4770      	bx	lr

0000cdd4 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    cdd4:	2100      	movs	r1, #0
    cdd6:	7001      	strb	r1, [r0, #0]
    cdd8:	4608      	mov	r0, r1
    cdda:	4770      	bx	lr

0000cddc <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    cddc:	f3ef 8110 	mrs	r1, PRIMASK
    cde0:	b672      	cpsid	i
    cde2:	2200      	movs	r2, #0
    cde4:	7002      	strb	r2, [r0, #0]
    cde6:	b901      	cbnz	r1, cdea <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    cde8:	b662      	cpsie	i
    cdea:	2000      	movs	r0, #0
    cdec:	4770      	bx	lr

0000cdee <mpsl_low_priority_process>:
    cdee:	f7f7 bc45 	b.w	467c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000cdf2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    cdf2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cdf6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cdfa:	280f      	cmp	r0, #15
    cdfc:	d001      	beq.n	ce02 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    cdfe:	2000      	movs	r0, #0
    ce00:	4770      	bx	lr
    ce02:	2001      	movs	r0, #1
    ce04:	4770      	bx	lr

0000ce06 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    ce06:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ce0a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ce0e:	280a      	cmp	r0, #10
    ce10:	d001      	beq.n	ce16 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    ce12:	2000      	movs	r0, #0
    ce14:	4770      	bx	lr
    ce16:	2001      	movs	r0, #1
    ce18:	4770      	bx	lr

0000ce1a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    ce1a:	b500      	push	{lr}
    ce1c:	f7ff fff3 	bl	ce06 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    ce20:	b120      	cbz	r0, ce2c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    ce22:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ce26:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    ce2a:	b108      	cbz	r0, ce30 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    ce2c:	2000      	movs	r0, #0
    ce2e:	bd00      	pop	{pc}
    ce30:	2001      	movs	r0, #1
    ce32:	bd00      	pop	{pc}

0000ce34 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    ce34:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ce38:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ce3c:	280e      	cmp	r0, #14
    ce3e:	d001      	beq.n	ce44 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    ce40:	2000      	movs	r0, #0
    ce42:	4770      	bx	lr
    ce44:	2001      	movs	r0, #1
    ce46:	4770      	bx	lr

0000ce48 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    ce48:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ce4c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ce50:	2810      	cmp	r0, #16
    ce52:	d001      	beq.n	ce58 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    ce54:	2000      	movs	r0, #0
    ce56:	4770      	bx	lr
    ce58:	2001      	movs	r0, #1
    ce5a:	4770      	bx	lr

0000ce5c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    ce5c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ce60:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ce64:	2806      	cmp	r0, #6
    ce66:	d003      	beq.n	ce70 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    ce68:	1c40      	adds	r0, r0, #1
    ce6a:	d001      	beq.n	ce70 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    ce6c:	2000      	movs	r0, #0
    ce6e:	4770      	bx	lr
    ce70:	2001      	movs	r0, #1
    ce72:	4770      	bx	lr

0000ce74 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    ce74:	b500      	push	{lr}
    ce76:	f7ff fff1 	bl	ce5c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ce7a:	b148      	cbz	r0, ce90 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    ce7c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ce80:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    ce84:	2806      	cmp	r0, #6
    ce86:	d303      	bcc.n	ce90 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    ce88:	1c40      	adds	r0, r0, #1
    ce8a:	d001      	beq.n	ce90 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    ce8c:	2001      	movs	r0, #1
    ce8e:	bd00      	pop	{pc}
    ce90:	2000      	movs	r0, #0
    ce92:	bd00      	pop	{pc}

0000ce94 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    ce94:	b500      	push	{lr}
    ce96:	f7ff ffe1 	bl	ce5c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ce9a:	b138      	cbz	r0, ceac <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    ce9c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cea0:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    cea4:	2806      	cmp	r0, #6
    cea6:	d303      	bcc.n	ceb0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    cea8:	1c40      	adds	r0, r0, #1
    ceaa:	d001      	beq.n	ceb0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    ceac:	2000      	movs	r0, #0
    ceae:	bd00      	pop	{pc}
    ceb0:	2001      	movs	r0, #1
    ceb2:	bd00      	pop	{pc}

0000ceb4 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    ceb4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ceb8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cebc:	280d      	cmp	r0, #13
    cebe:	d001      	beq.n	cec4 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    cec0:	2000      	movs	r0, #0
    cec2:	4770      	bx	lr
    cec4:	2001      	movs	r0, #1
    cec6:	4770      	bx	lr

0000cec8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    cec8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cecc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ced0:	2808      	cmp	r0, #8
    ced2:	d001      	beq.n	ced8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    ced4:	2000      	movs	r0, #0
    ced6:	4770      	bx	lr
    ced8:	2001      	movs	r0, #1
    ceda:	4770      	bx	lr

0000cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    cedc:	b4f0      	push	{r4, r5, r6, r7}
    cede:	ea80 0c01 	eor.w	ip, r0, r1
    cee2:	4603      	mov	r3, r0
    cee4:	f01c 0f03 	tst.w	ip, #3
    cee8:	d13c      	bne.n	cf64 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    ceea:	f013 0f03 	tst.w	r3, #3
    ceee:	d00b      	beq.n	cf08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    cef0:	2a00      	cmp	r2, #0
    cef2:	bf04      	itt	eq
    cef4:	bcf0      	popeq	{r4, r5, r6, r7}
    cef6:	4770      	bxeq	lr
    cef8:	f811 cb01 	ldrb.w	ip, [r1], #1
    cefc:	f803 cb01 	strb.w	ip, [r3], #1
    cf00:	1e52      	subs	r2, r2, #1
    cf02:	f013 0f03 	tst.w	r3, #3
    cf06:	d1f3      	bne.n	cef0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    cf08:	2a03      	cmp	r2, #3
    cf0a:	d94f      	bls.n	cfac <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    cf0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    cf10:	d24c      	bcs.n	cfac <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    cf12:	f1c2 0c00 	rsb	ip, r2, #0
    cf16:	ea4f 74ec 	mov.w	r4, ip, asr #31
    cf1a:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    cf1e:	ea4f 0cac 	mov.w	ip, ip, asr #2
    cf22:	f1cc 0c00 	rsb	ip, ip, #0
    cf26:	f1bc 0f00 	cmp.w	ip, #0
    cf2a:	dd1b      	ble.n	cf64 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    cf2c:	1f0d      	subs	r5, r1, #4
    cf2e:	1f1c      	subs	r4, r3, #4
    cf30:	f01c 0f01 	tst.w	ip, #1
    cf34:	d003      	beq.n	cf3e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    cf36:	f855 6f04 	ldr.w	r6, [r5, #4]!
    cf3a:	f844 6f04 	str.w	r6, [r4, #4]!
    cf3e:	ea5f 066c 	movs.w	r6, ip, asr #1
    cf42:	d007      	beq.n	cf54 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    cf44:	686f      	ldr	r7, [r5, #4]
    cf46:	6067      	str	r7, [r4, #4]
    cf48:	f855 7f08 	ldr.w	r7, [r5, #8]!
    cf4c:	f844 7f08 	str.w	r7, [r4, #8]!
    cf50:	1e76      	subs	r6, r6, #1
    cf52:	d1f7      	bne.n	cf44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    cf54:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    cf58:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    cf5c:	f1cc 0c00 	rsb	ip, ip, #0
    cf60:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    cf64:	2a00      	cmp	r2, #0
    cf66:	bf04      	itt	eq
    cf68:	bcf0      	popeq	{r4, r5, r6, r7}
    cf6a:	4770      	bxeq	lr
    cf6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    cf70:	d226      	bcs.n	cfc0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    cf72:	2a00      	cmp	r2, #0
    cf74:	bfdc      	itt	le
    cf76:	bcf0      	pople	{r4, r5, r6, r7}
    cf78:	4770      	bxle	lr
    cf7a:	1e49      	subs	r1, r1, #1
    cf7c:	1e5b      	subs	r3, r3, #1
    cf7e:	f012 0f01 	tst.w	r2, #1
    cf82:	d003      	beq.n	cf8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    cf84:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    cf88:	f803 cf01 	strb.w	ip, [r3, #1]!
    cf8c:	1052      	asrs	r2, r2, #1
    cf8e:	bf04      	itt	eq
    cf90:	bcf0      	popeq	{r4, r5, r6, r7}
    cf92:	4770      	bxeq	lr
    cf94:	f891 c001 	ldrb.w	ip, [r1, #1]
    cf98:	f883 c001 	strb.w	ip, [r3, #1]
    cf9c:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    cfa0:	f803 cf02 	strb.w	ip, [r3, #2]!
    cfa4:	1e52      	subs	r2, r2, #1
    cfa6:	d1f5      	bne.n	cf94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    cfa8:	bcf0      	pop	{r4, r5, r6, r7}
    cfaa:	4770      	bx	lr
    cfac:	2a04      	cmp	r2, #4
    cfae:	d3d9      	bcc.n	cf64 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    cfb0:	f851 cb04 	ldr.w	ip, [r1], #4
    cfb4:	1f12      	subs	r2, r2, #4
    cfb6:	f843 cb04 	str.w	ip, [r3], #4
    cfba:	2a04      	cmp	r2, #4
    cfbc:	d2f8      	bcs.n	cfb0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    cfbe:	e7d1      	b.n	cf64 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    cfc0:	f811 cb01 	ldrb.w	ip, [r1], #1
    cfc4:	f803 cb01 	strb.w	ip, [r3], #1
    cfc8:	1e52      	subs	r2, r2, #1
    cfca:	d1f9      	bne.n	cfc0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    cfcc:	bcf0      	pop	{r4, r5, r6, r7}
    cfce:	4770      	bx	lr

0000cfd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    cfd0:	b470      	push	{r4, r5, r6}
    cfd2:	4603      	mov	r3, r0
    cfd4:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    cfd8:	f010 0f03 	tst.w	r0, #3
    cfdc:	d009      	beq.n	cff2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    cfde:	2a00      	cmp	r2, #0
    cfe0:	bf04      	itt	eq
    cfe2:	bc70      	popeq	{r4, r5, r6}
    cfe4:	4770      	bxeq	lr
    cfe6:	f803 cb01 	strb.w	ip, [r3], #1
    cfea:	1e52      	subs	r2, r2, #1
    cfec:	f013 0f03 	tst.w	r3, #3
    cff0:	d1f5      	bne.n	cfde <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    cff2:	b2c9      	uxtb	r1, r1
    cff4:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    cff8:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    cffc:	2a03      	cmp	r2, #3
    cffe:	d939      	bls.n	d074 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d000:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d004:	d236      	bcs.n	d074 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d006:	4251      	negs	r1, r2
    d008:	17cc      	asrs	r4, r1, #31
    d00a:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    d00e:	1089      	asrs	r1, r1, #2
    d010:	424e      	negs	r6, r1
    d012:	2e00      	cmp	r6, #0
    d014:	dd11      	ble.n	d03a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d016:	1f19      	subs	r1, r3, #4
    d018:	f016 0f01 	tst.w	r6, #1
    d01c:	bf18      	it	ne
    d01e:	f841 5f04 	strne.w	r5, [r1, #4]!
    d022:	1074      	asrs	r4, r6, #1
    d024:	d004      	beq.n	d030 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    d026:	604d      	str	r5, [r1, #4]
    d028:	f841 5f08 	str.w	r5, [r1, #8]!
    d02c:	1e64      	subs	r4, r4, #1
    d02e:	d1fa      	bne.n	d026 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    d030:	4271      	negs	r1, r6
    d032:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    d036:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    d03a:	2a00      	cmp	r2, #0
    d03c:	bf04      	itt	eq
    d03e:	bc70      	popeq	{r4, r5, r6}
    d040:	4770      	bxeq	lr
    d042:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d046:	d21d      	bcs.n	d084 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d048:	2a00      	cmp	r2, #0
    d04a:	bfdc      	itt	le
    d04c:	bc70      	pople	{r4, r5, r6}
    d04e:	4770      	bxle	lr
    d050:	1e59      	subs	r1, r3, #1
    d052:	f012 0f01 	tst.w	r2, #1
    d056:	bf18      	it	ne
    d058:	f801 cf01 	strbne.w	ip, [r1, #1]!
    d05c:	1052      	asrs	r2, r2, #1
    d05e:	bf04      	itt	eq
    d060:	bc70      	popeq	{r4, r5, r6}
    d062:	4770      	bxeq	lr
    d064:	f881 c001 	strb.w	ip, [r1, #1]
    d068:	f801 cf02 	strb.w	ip, [r1, #2]!
    d06c:	1e52      	subs	r2, r2, #1
    d06e:	d1f9      	bne.n	d064 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    d070:	bc70      	pop	{r4, r5, r6}
    d072:	4770      	bx	lr
    d074:	2a04      	cmp	r2, #4
    d076:	d3e0      	bcc.n	d03a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d078:	1f12      	subs	r2, r2, #4
    d07a:	f843 5b04 	str.w	r5, [r3], #4
    d07e:	2a04      	cmp	r2, #4
    d080:	d2fa      	bcs.n	d078 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    d082:	e7da      	b.n	d03a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d084:	f803 cb01 	strb.w	ip, [r3], #1
    d088:	1e52      	subs	r2, r2, #1
    d08a:	d1fb      	bne.n	d084 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d08c:	bc70      	pop	{r4, r5, r6}
    d08e:	4770      	bx	lr
    d090:	f04f 30ff 	mov.w	r0, #4294967295
    d094:	4770      	bx	lr
    d096:	2000      	movs	r0, #0
    d098:	4770      	bx	lr
    d09a:	2000      	movs	r0, #0
    d09c:	4770      	bx	lr
    d09e:	f04f 30ff 	mov.w	r0, #4294967295
    d0a2:	4770      	bx	lr
    d0a4:	4770      	bx	lr
    d0a6:	4770      	bx	lr
    d0a8:	2000      	movs	r0, #0
    d0aa:	4770      	bx	lr
    d0ac:	2100      	movs	r1, #0
    d0ae:	7001      	strb	r1, [r0, #0]
    d0b0:	4770      	bx	lr
    d0b2:	f04f 30ff 	mov.w	r0, #4294967295
    d0b6:	4770      	bx	lr
    d0b8:	f04f 30ff 	mov.w	r0, #4294967295
    d0bc:	4770      	bx	lr
    d0be:	2100      	movs	r1, #0
    d0c0:	7001      	strb	r1, [r0, #0]
    d0c2:	4770      	bx	lr
    d0c4:	f04f 30ff 	mov.w	r0, #4294967295
    d0c8:	4770      	bx	lr
    d0ca:	f04f 30ff 	mov.w	r0, #4294967295
    d0ce:	4770      	bx	lr
    d0d0:	7800      	ldrb	r0, [r0, #0]
    d0d2:	2800      	cmp	r0, #0
    d0d4:	d001      	beq.n	d0da <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    d0d6:	f06f 0015 	mvn.w	r0, #21
    d0da:	4770      	bx	lr
    d0dc:	2000      	movs	r0, #0
    d0de:	4770      	bx	lr
    d0e0:	2200      	movs	r2, #0
    d0e2:	f000 b800 	b.w	d0e6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000d0e6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    d0e6:	b570      	push	{r4, r5, r6, lr}
    d0e8:	4614      	mov	r4, r2
    d0ea:	460d      	mov	r5, r1
    d0ec:	1b00      	subs	r0, r0, r4
    d0ee:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    d0f2:	4288      	cmp	r0, r1
    d0f4:	da01      	bge.n	d0fa <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    d0f6:	4608      	mov	r0, r1
    d0f8:	e002      	b.n	d100 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    d0fa:	287f      	cmp	r0, #127	; 0x7f
    d0fc:	dd00      	ble.n	d100 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    d0fe:	207f      	movs	r0, #127	; 0x7f
    d100:	b240      	sxtb	r0, r0
    d102:	f7f3 fe11 	bl	d28 <mpsl_tx_power_radio_supported_power_adjust>
    d106:	7028      	strb	r0, [r5, #0]
    d108:	706c      	strb	r4, [r5, #1]
    d10a:	2100      	movs	r1, #0
    d10c:	4420      	add	r0, r4
    d10e:	70a9      	strb	r1, [r5, #2]
    d110:	b240      	sxtb	r0, r0
    d112:	bd70      	pop	{r4, r5, r6, pc}
    d114:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d118:	460c      	mov	r4, r1
    d11a:	4681      	mov	r9, r0
    d11c:	7849      	ldrb	r1, [r1, #1]
    d11e:	f100 0003 	add.w	r0, r0, #3
    d122:	f88d 1000 	strb.w	r1, [sp]
    d126:	f020 0003 	bic.w	r0, r0, #3
    d12a:	78a1      	ldrb	r1, [r4, #2]
    d12c:	0016      	movs	r6, r2
    d12e:	4605      	mov	r5, r0
    d130:	f88d 1001 	strb.w	r1, [sp, #1]
    d134:	d000      	beq.n	d138 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x52>
    d136:	2000      	movs	r0, #0
    d138:	4669      	mov	r1, sp
    d13a:	f7f7 fe83 	bl	4e44 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    d13e:	4428      	add	r0, r5
    d140:	78a1      	ldrb	r1, [r4, #2]
    d142:	4605      	mov	r5, r0
    d144:	b131      	cbz	r1, d154 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x6e>
    d146:	8a63      	ldrh	r3, [r4, #18]
    d148:	78e2      	ldrb	r2, [r4, #3]
    d14a:	b106      	cbz	r6, d14e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x68>
    d14c:	2000      	movs	r0, #0
    d14e:	f7f8 f90b 	bl	5368 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    d152:	4405      	add	r5, r0
    d154:	7820      	ldrb	r0, [r4, #0]
    d156:	7861      	ldrb	r1, [r4, #1]
    d158:	46b2      	mov	sl, r6
    d15a:	2600      	movs	r6, #0
    d15c:	4408      	add	r0, r1
    d15e:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    d162:	4637      	mov	r7, r6
    d164:	e008      	b.n	d178 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x92>
    d166:	7a23      	ldrb	r3, [r4, #8]
    d168:	79e2      	ldrb	r2, [r4, #7]
    d16a:	79a1      	ldrb	r1, [r4, #6]
    d16c:	7960      	ldrb	r0, [r4, #5]
    d16e:	f000 ff0d 	bl	df8c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    d172:	1c7f      	adds	r7, r7, #1
    d174:	4406      	add	r6, r0
    d176:	b2ff      	uxtb	r7, r7
    d178:	4547      	cmp	r7, r8
    d17a:	d3f4      	bcc.n	d166 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x80>
    d17c:	1ced      	adds	r5, r5, #3
    d17e:	f025 0003 	bic.w	r0, r5, #3
    d182:	4604      	mov	r4, r0
    d184:	f1ba 0f00 	cmp.w	sl, #0
    d188:	d000      	beq.n	d18c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xa6>
    d18a:	2000      	movs	r0, #0
    d18c:	4632      	mov	r2, r6
    d18e:	4641      	mov	r1, r8
    d190:	f7f8 f834 	bl	51fc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    d194:	4420      	add	r0, r4
    d196:	1dc0      	adds	r0, r0, #7
    d198:	f020 0007 	bic.w	r0, r0, #7
    d19c:	eba0 0009 	sub.w	r0, r0, r9
    d1a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d1a4 <sdc_soc_ecb_block_encrypt>:
    d1a4:	b530      	push	{r4, r5, lr}
    d1a6:	460d      	mov	r5, r1
    d1a8:	b08d      	sub	sp, #52	; 0x34
    d1aa:	4614      	mov	r4, r2
    d1ac:	4601      	mov	r1, r0
    d1ae:	2210      	movs	r2, #16
    d1b0:	4668      	mov	r0, sp
    d1b2:	f7ff fe93 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d1b6:	2210      	movs	r2, #16
    d1b8:	4629      	mov	r1, r5
    d1ba:	a804      	add	r0, sp, #16
    d1bc:	f7ff fe8e 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d1c0:	4668      	mov	r0, sp
    d1c2:	f001 f864 	bl	e28e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    d1c6:	b118      	cbz	r0, d1d0 <sdc_soc_ecb_block_encrypt+0x2c>
    d1c8:	f06f 0015 	mvn.w	r0, #21
    d1cc:	b00d      	add	sp, #52	; 0x34
    d1ce:	bd30      	pop	{r4, r5, pc}
    d1d0:	2210      	movs	r2, #16
    d1d2:	4620      	mov	r0, r4
    d1d4:	a908      	add	r1, sp, #32
    d1d6:	f7ff fe81 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d1da:	2000      	movs	r0, #0
    d1dc:	e7f6      	b.n	d1cc <sdc_soc_ecb_block_encrypt+0x28>

0000d1de <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    d1de:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    d1e0:	4604      	mov	r4, r0
    d1e2:	1d01      	adds	r1, r0, #4
    d1e4:	4668      	mov	r0, sp
    d1e6:	f7f9 fca9 	bl	6b3c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    d1ea:	2800      	cmp	r0, #0
    d1ec:	d004      	beq.n	d1f8 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    d1ee:	4669      	mov	r1, sp
    d1f0:	4620      	mov	r0, r4
    d1f2:	f000 f848 	bl	d286 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    d1f6:	2001      	movs	r0, #1
    d1f8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000d1fa <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    d1fa:	b50e      	push	{r1, r2, r3, lr}
    d1fc:	4601      	mov	r1, r0
    d1fe:	4668      	mov	r0, sp
    d200:	f000 f827 	bl	d252 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    d204:	4668      	mov	r0, sp
    d206:	f001 fd03 	bl	ec10 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    d20a:	bd0e      	pop	{r1, r2, r3, pc}

0000d20c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    d20c:	b510      	push	{r4, lr}
    d20e:	4604      	mov	r4, r0
    d210:	4620      	mov	r0, r4
    d212:	f7f7 fd0b 	bl	4c2c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    d216:	2800      	cmp	r0, #0
    d218:	d006      	beq.n	d228 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    d21a:	78a1      	ldrb	r1, [r4, #2]
    d21c:	7820      	ldrb	r0, [r4, #0]
    d21e:	f000 f804 	bl	d22a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    d222:	2800      	cmp	r0, #0
    d224:	d0f4      	beq.n	d210 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    d226:	2001      	movs	r0, #1
    d228:	bd10      	pop	{r4, pc}
    d22a:	b570      	push	{r4, r5, r6, lr}
    d22c:	460c      	mov	r4, r1
    d22e:	4605      	mov	r5, r0
    d230:	f7f7 fd6e 	bl	4d10 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    d234:	2800      	cmp	r0, #0
    d236:	d002      	beq.n	d23e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    d238:	2d3e      	cmp	r5, #62	; 0x3e
    d23a:	d001      	beq.n	d240 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    d23c:	2001      	movs	r0, #1
    d23e:	bd70      	pop	{r4, r5, r6, pc}
    d240:	2c12      	cmp	r4, #18
    d242:	d004      	beq.n	d24e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    d244:	4620      	mov	r0, r4
    d246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d24a:	f7f7 bd73 	b.w	4d34 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d24e:	2000      	movs	r0, #0
    d250:	bd70      	pop	{r4, r5, r6, pc}

0000d252 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    d252:	880a      	ldrh	r2, [r1, #0]
    d254:	f3c2 020b 	ubfx	r2, r2, #0, #12
    d258:	8002      	strh	r2, [r0, #0]
    d25a:	884a      	ldrh	r2, [r1, #2]
    d25c:	8042      	strh	r2, [r0, #2]
    d25e:	784a      	ldrb	r2, [r1, #1]
    d260:	0993      	lsrs	r3, r2, #6
    d262:	2200      	movs	r2, #0
    d264:	7142      	strb	r2, [r0, #5]
    d266:	784b      	ldrb	r3, [r1, #1]
    d268:	f3c3 1301 	ubfx	r3, r3, #4, #2
    d26c:	b11b      	cbz	r3, d276 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d26e:	2b01      	cmp	r3, #1
    d270:	d005      	beq.n	d27e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    d272:	2b02      	cmp	r3, #2
    d274:	d005      	beq.n	d282 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    d276:	7102      	strb	r2, [r0, #4]
    d278:	1d09      	adds	r1, r1, #4
    d27a:	6081      	str	r1, [r0, #8]
    d27c:	4770      	bx	lr
    d27e:	2201      	movs	r2, #1
    d280:	e7f9      	b.n	d276 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d282:	2202      	movs	r2, #2
    d284:	e7f7      	b.n	d276 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000d286 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    d286:	b510      	push	{r4, lr}
    d288:	460c      	mov	r4, r1
    d28a:	7809      	ldrb	r1, [r1, #0]
    d28c:	7001      	strb	r1, [r0, #0]
    d28e:	7841      	ldrb	r1, [r0, #1]
    d290:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    d294:	7041      	strb	r1, [r0, #1]
    d296:	8822      	ldrh	r2, [r4, #0]
    d298:	f3c2 2203 	ubfx	r2, r2, #8, #4
    d29c:	4311      	orrs	r1, r2
    d29e:	7041      	strb	r1, [r0, #1]
    d2a0:	78a2      	ldrb	r2, [r4, #2]
    d2a2:	7082      	strb	r2, [r0, #2]
    d2a4:	8862      	ldrh	r2, [r4, #2]
    d2a6:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    d2aa:	0a12      	lsrs	r2, r2, #8
    d2ac:	70c2      	strb	r2, [r0, #3]
    d2ae:	7041      	strb	r1, [r0, #1]
    d2b0:	7922      	ldrb	r2, [r4, #4]
    d2b2:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    d2b6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    d2ba:	7041      	strb	r1, [r0, #1]
    d2bc:	7962      	ldrb	r2, [r4, #5]
    d2be:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    d2c2:	7041      	strb	r1, [r0, #1]
    d2c4:	68a1      	ldr	r1, [r4, #8]
    d2c6:	1d02      	adds	r2, r0, #4
    d2c8:	4291      	cmp	r1, r2
    d2ca:	d006      	beq.n	d2da <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    d2cc:	8862      	ldrh	r2, [r4, #2]
    d2ce:	2afb      	cmp	r2, #251	; 0xfb
    d2d0:	d300      	bcc.n	d2d4 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    d2d2:	22fb      	movs	r2, #251	; 0xfb
    d2d4:	1d00      	adds	r0, r0, #4
    d2d6:	f7ff fe01 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d2da:	78a0      	ldrb	r0, [r4, #2]
    d2dc:	1d00      	adds	r0, r0, #4
    d2de:	b2c0      	uxtb	r0, r0
    d2e0:	bd10      	pop	{r4, pc}

0000d2e2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    d2e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2e6:	4604      	mov	r4, r0
    d2e8:	f891 c000 	ldrb.w	ip, [r1]
    d2ec:	2000      	movs	r0, #0
    d2ee:	2513      	movs	r5, #19
    d2f0:	260c      	movs	r6, #12
    d2f2:	2705      	movs	r7, #5
    d2f4:	223e      	movs	r2, #62	; 0x3e
    d2f6:	23ff      	movs	r3, #255	; 0xff
    d2f8:	f1bc 0f1b 	cmp.w	ip, #27
    d2fc:	d27d      	bcs.n	d3fa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x118>
    d2fe:	e8df f00c 	tbb	[pc, ip]
    d302:	0e7c      	.short	0x0e7c
    d304:	872d2725 	.word	0x872d2725
    d308:	d0bda391 	.word	0xd0bda391
    d30c:	f2f4ddd2 	.word	0xf2f4ddd2
    d310:	537c7cf1 	.word	0x537c7cf1
    d314:	edeeefff 	.word	0xedeeefff
    d318:	e9eaebec 	.word	0xe9eaebec
    d31c:	00e8      	.short	0x00e8
    d31e:	7026      	strb	r6, [r4, #0]
    d320:	7908      	ldrb	r0, [r1, #4]
    d322:	70a0      	strb	r0, [r4, #2]
    d324:	7948      	ldrb	r0, [r1, #5]
    d326:	70e0      	strb	r0, [r4, #3]
    d328:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    d32c:	0a00      	lsrs	r0, r0, #8
    d32e:	7120      	strb	r0, [r4, #4]
    d330:	79c8      	ldrb	r0, [r1, #7]
    d332:	7160      	strb	r0, [r4, #5]
    d334:	7a08      	ldrb	r0, [r1, #8]
    d336:	71a0      	strb	r0, [r4, #6]
    d338:	8908      	ldrh	r0, [r1, #8]
    d33a:	0a00      	lsrs	r0, r0, #8
    d33c:	71e0      	strb	r0, [r4, #7]
    d33e:	7a88      	ldrb	r0, [r1, #10]
    d340:	7220      	strb	r0, [r4, #8]
    d342:	8948      	ldrh	r0, [r1, #10]
    d344:	0a00      	lsrs	r0, r0, #8
    d346:	7260      	strb	r0, [r4, #9]
    d348:	2008      	movs	r0, #8
    d34a:	e174      	b.n	d636 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d34c:	2010      	movs	r0, #16
    d34e:	e000      	b.n	d352 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x70>
    d350:	201a      	movs	r0, #26
    d352:	7020      	strb	r0, [r4, #0]
    d354:	7908      	ldrb	r0, [r1, #4]
    d356:	70a0      	strb	r0, [r4, #2]
    d358:	2001      	movs	r0, #1
    d35a:	e16c      	b.n	d636 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d35c:	7022      	strb	r2, [r4, #0]
    d35e:	2001      	movs	r0, #1
    d360:	70a0      	strb	r0, [r4, #2]
    d362:	7908      	ldrb	r0, [r1, #4]
    d364:	70e0      	strb	r0, [r4, #3]
    d366:	7988      	ldrb	r0, [r1, #6]
    d368:	7120      	strb	r0, [r4, #4]
    d36a:	88c8      	ldrh	r0, [r1, #6]
    d36c:	0a00      	lsrs	r0, r0, #8
    d36e:	7160      	strb	r0, [r4, #5]
    d370:	7a08      	ldrb	r0, [r1, #8]
    d372:	71a0      	strb	r0, [r4, #6]
    d374:	7a48      	ldrb	r0, [r1, #9]
    d376:	71e0      	strb	r0, [r4, #7]
    d378:	f8d1 000a 	ldr.w	r0, [r1, #10]
    d37c:	60a0      	str	r0, [r4, #8]
    d37e:	89c8      	ldrh	r0, [r1, #14]
    d380:	81a0      	strh	r0, [r4, #12]
    d382:	7c08      	ldrb	r0, [r1, #16]
    d384:	73a0      	strb	r0, [r4, #14]
    d386:	8a08      	ldrh	r0, [r1, #16]
    d388:	0a00      	lsrs	r0, r0, #8
    d38a:	73e0      	strb	r0, [r4, #15]
    d38c:	7c88      	ldrb	r0, [r1, #18]
    d38e:	7420      	strb	r0, [r4, #16]
    d390:	8a48      	ldrh	r0, [r1, #18]
    d392:	0a00      	lsrs	r0, r0, #8
    d394:	7460      	strb	r0, [r4, #17]
    d396:	7d08      	ldrb	r0, [r1, #20]
    d398:	74a0      	strb	r0, [r4, #18]
    d39a:	8a88      	ldrh	r0, [r1, #20]
    d39c:	0a00      	lsrs	r0, r0, #8
    d39e:	74e0      	strb	r0, [r4, #19]
    d3a0:	7d88      	ldrb	r0, [r1, #22]
    d3a2:	7520      	strb	r0, [r4, #20]
    d3a4:	4628      	mov	r0, r5
    d3a6:	e146      	b.n	d636 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d3a8:	7022      	strb	r2, [r4, #0]
    d3aa:	200a      	movs	r0, #10
    d3ac:	70a0      	strb	r0, [r4, #2]
    d3ae:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    d3b2:	70e0      	strb	r0, [r4, #3]
    d3b4:	7888      	ldrb	r0, [r1, #2]
    d3b6:	7120      	strb	r0, [r4, #4]
    d3b8:	8848      	ldrh	r0, [r1, #2]
    d3ba:	0a00      	lsrs	r0, r0, #8
    d3bc:	7160      	strb	r0, [r4, #5]
    d3be:	7908      	ldrb	r0, [r1, #4]
    d3c0:	71a0      	strb	r0, [r4, #6]
    d3c2:	7948      	ldrb	r0, [r1, #5]
    d3c4:	71e0      	strb	r0, [r4, #7]
    d3c6:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d3ca:	60a0      	str	r0, [r4, #8]
    d3cc:	8948      	ldrh	r0, [r1, #10]
    d3ce:	81a0      	strh	r0, [r4, #12]
    d3d0:	68c8      	ldr	r0, [r1, #12]
    d3d2:	f8c4 000e 	str.w	r0, [r4, #14]
    d3d6:	8a08      	ldrh	r0, [r1, #16]
    d3d8:	8260      	strh	r0, [r4, #18]
    d3da:	f8d1 0012 	ldr.w	r0, [r1, #18]
    d3de:	6160      	str	r0, [r4, #20]
    d3e0:	8ac8      	ldrh	r0, [r1, #22]
    d3e2:	8320      	strh	r0, [r4, #24]
    d3e4:	7e08      	ldrb	r0, [r1, #24]
    d3e6:	76a0      	strb	r0, [r4, #26]
    d3e8:	8b08      	ldrh	r0, [r1, #24]
    d3ea:	0a00      	lsrs	r0, r0, #8
    d3ec:	76e0      	strb	r0, [r4, #27]
    d3ee:	7e88      	ldrb	r0, [r1, #26]
    d3f0:	7720      	strb	r0, [r4, #28]
    d3f2:	8b48      	ldrh	r0, [r1, #26]
    d3f4:	0a00      	lsrs	r0, r0, #8
    d3f6:	7760      	strb	r0, [r4, #29]
    d3f8:	e000      	b.n	d3fc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11a>
    d3fa:	e097      	b.n	d52c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    d3fc:	7f08      	ldrb	r0, [r1, #28]
    d3fe:	77a0      	strb	r0, [r4, #30]
    d400:	8b88      	ldrh	r0, [r1, #28]
    d402:	0a00      	lsrs	r0, r0, #8
    d404:	77e0      	strb	r0, [r4, #31]
    d406:	7f88      	ldrb	r0, [r1, #30]
    d408:	f884 0020 	strb.w	r0, [r4, #32]
    d40c:	201f      	movs	r0, #31
    d40e:	e112      	b.n	d636 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d410:	7022      	strb	r2, [r4, #0]
    d412:	2014      	movs	r0, #20
    d414:	70a0      	strb	r0, [r4, #2]
    d416:	7908      	ldrb	r0, [r1, #4]
    d418:	70e0      	strb	r0, [r4, #3]
    d41a:	8888      	ldrh	r0, [r1, #4]
    d41c:	0a00      	lsrs	r0, r0, #8
    d41e:	7120      	strb	r0, [r4, #4]
    d420:	7988      	ldrb	r0, [r1, #6]
    d422:	e0a6      	b.n	d572 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    d424:	7022      	strb	r2, [r4, #0]
    d426:	2004      	movs	r0, #4
    d428:	70a0      	strb	r0, [r4, #2]
    d42a:	7908      	ldrb	r0, [r1, #4]
    d42c:	70e0      	strb	r0, [r4, #3]
    d42e:	7988      	ldrb	r0, [r1, #6]
    d430:	7120      	strb	r0, [r4, #4]
    d432:	88c8      	ldrh	r0, [r1, #6]
    d434:	0a00      	lsrs	r0, r0, #8
    d436:	7160      	strb	r0, [r4, #5]
    d438:	6888      	ldr	r0, [r1, #8]
    d43a:	f8c4 0006 	str.w	r0, [r4, #6]
    d43e:	68c8      	ldr	r0, [r1, #12]
    d440:	f8c4 000a 	str.w	r0, [r4, #10]
    d444:	200c      	movs	r0, #12
    d446:	e0f6      	b.n	d636 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d448:	7022      	strb	r2, [r4, #0]
    d44a:	2003      	movs	r0, #3
    d44c:	70a0      	strb	r0, [r4, #2]
    d44e:	7908      	ldrb	r0, [r1, #4]
    d450:	70e0      	strb	r0, [r4, #3]
    d452:	7988      	ldrb	r0, [r1, #6]
    d454:	7120      	strb	r0, [r4, #4]
    d456:	88c8      	ldrh	r0, [r1, #6]
    d458:	0a00      	lsrs	r0, r0, #8
    d45a:	7160      	strb	r0, [r4, #5]
    d45c:	7a08      	ldrb	r0, [r1, #8]
    d45e:	71a0      	strb	r0, [r4, #6]
    d460:	8908      	ldrh	r0, [r1, #8]
    d462:	0a00      	lsrs	r0, r0, #8
    d464:	71e0      	strb	r0, [r4, #7]
    d466:	7a88      	ldrb	r0, [r1, #10]
    d468:	7220      	strb	r0, [r4, #8]
    d46a:	8948      	ldrh	r0, [r1, #10]
    d46c:	0a00      	lsrs	r0, r0, #8
    d46e:	7260      	strb	r0, [r4, #9]
    d470:	7b08      	ldrb	r0, [r1, #12]
    d472:	72a0      	strb	r0, [r4, #10]
    d474:	8988      	ldrh	r0, [r1, #12]
    d476:	0a00      	lsrs	r0, r0, #8
    d478:	72e0      	strb	r0, [r4, #11]
    d47a:	e0b6      	b.n	d5ea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x308>
    d47c:	7022      	strb	r2, [r4, #0]
    d47e:	70a7      	strb	r7, [r4, #2]
    d480:	7908      	ldrb	r0, [r1, #4]
    d482:	70e0      	strb	r0, [r4, #3]
    d484:	8888      	ldrh	r0, [r1, #4]
    d486:	0a00      	lsrs	r0, r0, #8
    d488:	7120      	strb	r0, [r4, #4]
    d48a:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d48e:	f8c4 0005 	str.w	r0, [r4, #5]
    d492:	f8d1 000a 	ldr.w	r0, [r1, #10]
    d496:	f8c4 0009 	str.w	r0, [r4, #9]
    d49a:	89c8      	ldrh	r0, [r1, #14]
    d49c:	f8a4 000d 	strh.w	r0, [r4, #13]
    d4a0:	e0c8      	b.n	d634 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x352>
    d4a2:	2011      	movs	r0, #17
    d4a4:	e045      	b.n	d532 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    d4a6:	7027      	strb	r7, [r4, #0]
    d4a8:	7908      	ldrb	r0, [r1, #4]
    d4aa:	70a0      	strb	r0, [r4, #2]
    d4ac:	7948      	ldrb	r0, [r1, #5]
    d4ae:	70e0      	strb	r0, [r4, #3]
    d4b0:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    d4b4:	0a00      	lsrs	r0, r0, #8
    d4b6:	7120      	strb	r0, [r4, #4]
    d4b8:	79c8      	ldrb	r0, [r1, #7]
    d4ba:	e05a      	b.n	d572 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    d4bc:	2008      	movs	r0, #8
    d4be:	7020      	strb	r0, [r4, #0]
    d4c0:	7908      	ldrb	r0, [r1, #4]
    d4c2:	70a0      	strb	r0, [r4, #2]
    d4c4:	7988      	ldrb	r0, [r1, #6]
    d4c6:	70e0      	strb	r0, [r4, #3]
    d4c8:	88c8      	ldrh	r0, [r1, #6]
    d4ca:	0a00      	lsrs	r0, r0, #8
    d4cc:	7120      	strb	r0, [r4, #4]
    d4ce:	7a08      	ldrb	r0, [r1, #8]
    d4d0:	e04f      	b.n	d572 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    d4d2:	e09a      	b.n	d60a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    d4d4:	e06e      	b.n	d5b4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d2>
    d4d6:	e04f      	b.n	d578 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x296>
    d4d8:	e07a      	b.n	d5d0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ee>
    d4da:	e088      	b.n	d5ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x30c>
    d4dc:	e041      	b.n	d562 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x280>
    d4de:	e030      	b.n	d542 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x260>
    d4e0:	e011      	b.n	d506 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x224>
    d4e2:	e00d      	b.n	d500 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21e>
    d4e4:	e024      	b.n	d530 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24e>
    d4e6:	e01b      	b.n	d520 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23e>
    d4e8:	e7ff      	b.n	d4ea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x208>
    d4ea:	2030      	movs	r0, #48	; 0x30
    d4ec:	7020      	strb	r0, [r4, #0]
    d4ee:	7908      	ldrb	r0, [r1, #4]
    d4f0:	70a0      	strb	r0, [r4, #2]
    d4f2:	7988      	ldrb	r0, [r1, #6]
    d4f4:	70e0      	strb	r0, [r4, #3]
    d4f6:	88c8      	ldrh	r0, [r1, #6]
    d4f8:	0a00      	lsrs	r0, r0, #8
    d4fa:	7120      	strb	r0, [r4, #4]
    d4fc:	2003      	movs	r0, #3
    d4fe:	e09a      	b.n	d636 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d500:	7022      	strb	r2, [r4, #0]
    d502:	2007      	movs	r0, #7
    d504:	e03a      	b.n	d57c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29a>
    d506:	7022      	strb	r2, [r4, #0]
    d508:	70a6      	strb	r6, [r4, #2]
    d50a:	7908      	ldrb	r0, [r1, #4]
    d50c:	70e0      	strb	r0, [r4, #3]
    d50e:	7988      	ldrb	r0, [r1, #6]
    d510:	7120      	strb	r0, [r4, #4]
    d512:	88c8      	ldrh	r0, [r1, #6]
    d514:	0a00      	lsrs	r0, r0, #8
    d516:	7160      	strb	r0, [r4, #5]
    d518:	7a08      	ldrb	r0, [r1, #8]
    d51a:	71a0      	strb	r0, [r4, #6]
    d51c:	7a48      	ldrb	r0, [r1, #9]
    d51e:	e01d      	b.n	d55c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27a>
    d520:	4620      	mov	r0, r4
    d522:	1d09      	adds	r1, r1, #4
    d524:	f7f7 fbc6 	bl	4cb4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    d528:	2800      	cmp	r0, #0
    d52a:	d109      	bne.n	d540 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x25e>
    d52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d530:	2057      	movs	r0, #87	; 0x57
    d532:	7020      	strb	r0, [r4, #0]
    d534:	7908      	ldrb	r0, [r1, #4]
    d536:	70a0      	strb	r0, [r4, #2]
    d538:	8888      	ldrh	r0, [r1, #4]
    d53a:	0a00      	lsrs	r0, r0, #8
    d53c:	70e0      	strb	r0, [r4, #3]
    d53e:	2002      	movs	r0, #2
    d540:	e079      	b.n	d636 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d542:	7022      	strb	r2, [r4, #0]
    d544:	2012      	movs	r0, #18
    d546:	70a0      	strb	r0, [r4, #2]
    d548:	7908      	ldrb	r0, [r1, #4]
    d54a:	70e0      	strb	r0, [r4, #3]
    d54c:	7948      	ldrb	r0, [r1, #5]
    d54e:	7120      	strb	r0, [r4, #4]
    d550:	7988      	ldrb	r0, [r1, #6]
    d552:	7160      	strb	r0, [r4, #5]
    d554:	88c8      	ldrh	r0, [r1, #6]
    d556:	0a00      	lsrs	r0, r0, #8
    d558:	71a0      	strb	r0, [r4, #6]
    d55a:	7a08      	ldrb	r0, [r1, #8]
    d55c:	71e0      	strb	r0, [r4, #7]
    d55e:	2006      	movs	r0, #6
    d560:	e069      	b.n	d636 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d562:	7023      	strb	r3, [r4, #0]
    d564:	20a1      	movs	r0, #161	; 0xa1
    d566:	70a0      	strb	r0, [r4, #2]
    d568:	7908      	ldrb	r0, [r1, #4]
    d56a:	70e0      	strb	r0, [r4, #3]
    d56c:	7948      	ldrb	r0, [r1, #5]
    d56e:	7120      	strb	r0, [r4, #4]
    d570:	2000      	movs	r0, #0
    d572:	7160      	strb	r0, [r4, #5]
    d574:	2004      	movs	r0, #4
    d576:	e05e      	b.n	d636 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d578:	7023      	strb	r3, [r4, #0]
    d57a:	20a2      	movs	r0, #162	; 0xa2
    d57c:	70a0      	strb	r0, [r4, #2]
    d57e:	7908      	ldrb	r0, [r1, #4]
    d580:	70e0      	strb	r0, [r4, #3]
    d582:	8888      	ldrh	r0, [r1, #4]
    d584:	0a00      	lsrs	r0, r0, #8
    d586:	7120      	strb	r0, [r4, #4]
    d588:	7988      	ldrb	r0, [r1, #6]
    d58a:	7160      	strb	r0, [r4, #5]
    d58c:	88c8      	ldrh	r0, [r1, #6]
    d58e:	0a00      	lsrs	r0, r0, #8
    d590:	71a0      	strb	r0, [r4, #6]
    d592:	7a08      	ldrb	r0, [r1, #8]
    d594:	71e0      	strb	r0, [r4, #7]
    d596:	8908      	ldrh	r0, [r1, #8]
    d598:	0a00      	lsrs	r0, r0, #8
    d59a:	7220      	strb	r0, [r4, #8]
    d59c:	7a88      	ldrb	r0, [r1, #10]
    d59e:	7260      	strb	r0, [r4, #9]
    d5a0:	8948      	ldrh	r0, [r1, #10]
    d5a2:	0a00      	lsrs	r0, r0, #8
    d5a4:	72a0      	strb	r0, [r4, #10]
    d5a6:	7b08      	ldrb	r0, [r1, #12]
    d5a8:	72e0      	strb	r0, [r4, #11]
    d5aa:	8988      	ldrh	r0, [r1, #12]
    d5ac:	0a00      	lsrs	r0, r0, #8
    d5ae:	7320      	strb	r0, [r4, #12]
    d5b0:	200b      	movs	r0, #11
    d5b2:	e040      	b.n	d636 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d5b4:	7023      	strb	r3, [r4, #0]
    d5b6:	20a3      	movs	r0, #163	; 0xa3
    d5b8:	70a0      	strb	r0, [r4, #2]
    d5ba:	7908      	ldrb	r0, [r1, #4]
    d5bc:	70e0      	strb	r0, [r4, #3]
    d5be:	8888      	ldrh	r0, [r1, #4]
    d5c0:	0a00      	lsrs	r0, r0, #8
    d5c2:	7120      	strb	r0, [r4, #4]
    d5c4:	7988      	ldrb	r0, [r1, #6]
    d5c6:	7160      	strb	r0, [r4, #5]
    d5c8:	79c8      	ldrb	r0, [r1, #7]
    d5ca:	71a0      	strb	r0, [r4, #6]
    d5cc:	2005      	movs	r0, #5
    d5ce:	e032      	b.n	d636 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d5d0:	7022      	strb	r2, [r4, #0]
    d5d2:	70a5      	strb	r5, [r4, #2]
    d5d4:	7908      	ldrb	r0, [r1, #4]
    d5d6:	70e0      	strb	r0, [r4, #3]
    d5d8:	7948      	ldrb	r0, [r1, #5]
    d5da:	7120      	strb	r0, [r4, #4]
    d5dc:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d5e0:	f8c4 0005 	str.w	r0, [r4, #5]
    d5e4:	8948      	ldrh	r0, [r1, #10]
    d5e6:	f8a4 0009 	strh.w	r0, [r4, #9]
    d5ea:	200a      	movs	r0, #10
    d5ec:	e023      	b.n	d636 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d5ee:	7023      	strb	r3, [r4, #0]
    d5f0:	20a4      	movs	r0, #164	; 0xa4
    d5f2:	70a0      	strb	r0, [r4, #2]
    d5f4:	7908      	ldrb	r0, [r1, #4]
    d5f6:	70e0      	strb	r0, [r4, #3]
    d5f8:	8888      	ldrh	r0, [r1, #4]
    d5fa:	0a00      	lsrs	r0, r0, #8
    d5fc:	7120      	strb	r0, [r4, #4]
    d5fe:	7988      	ldrb	r0, [r1, #6]
    d600:	7160      	strb	r0, [r4, #5]
    d602:	79c8      	ldrb	r0, [r1, #7]
    d604:	71a0      	strb	r0, [r4, #6]
    d606:	2007      	movs	r0, #7
    d608:	e015      	b.n	d636 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d60a:	7023      	strb	r3, [r4, #0]
    d60c:	2080      	movs	r0, #128	; 0x80
    d60e:	70a0      	strb	r0, [r4, #2]
    d610:	888a      	ldrh	r2, [r1, #4]
    d612:	f8a4 2003 	strh.w	r2, [r4, #3]
    d616:	88ca      	ldrh	r2, [r1, #6]
    d618:	f8a4 2005 	strh.w	r2, [r4, #5]
    d61c:	7a0a      	ldrb	r2, [r1, #8]
    d61e:	71e2      	strb	r2, [r4, #7]
    d620:	894a      	ldrh	r2, [r1, #10]
    d622:	8122      	strh	r2, [r4, #8]
    d624:	898a      	ldrh	r2, [r1, #12]
    d626:	8162      	strh	r2, [r4, #10]
    d628:	89ca      	ldrh	r2, [r1, #14]
    d62a:	81a2      	strh	r2, [r4, #12]
    d62c:	7c09      	ldrb	r1, [r1, #16]
    d62e:	f001 0101 	and.w	r1, r1, #1
    d632:	73a1      	strb	r1, [r4, #14]
    d634:	200d      	movs	r0, #13
    d636:	7060      	strb	r0, [r4, #1]
    d638:	1c80      	adds	r0, r0, #2
    d63a:	e777      	b.n	d52c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>

0000d63c <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    d63c:	223e      	movs	r2, #62	; 0x3e
    d63e:	7002      	strb	r2, [r0, #0]
    d640:	2201      	movs	r2, #1
    d642:	7082      	strb	r2, [r0, #2]
    d644:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    d648:	70c2      	strb	r2, [r0, #3]
    d64a:	788a      	ldrb	r2, [r1, #2]
    d64c:	7102      	strb	r2, [r0, #4]
    d64e:	884a      	ldrh	r2, [r1, #2]
    d650:	0a12      	lsrs	r2, r2, #8
    d652:	7142      	strb	r2, [r0, #5]
    d654:	790a      	ldrb	r2, [r1, #4]
    d656:	7182      	strb	r2, [r0, #6]
    d658:	794a      	ldrb	r2, [r1, #5]
    d65a:	71c2      	strb	r2, [r0, #7]
    d65c:	f8d1 2006 	ldr.w	r2, [r1, #6]
    d660:	6082      	str	r2, [r0, #8]
    d662:	894a      	ldrh	r2, [r1, #10]
    d664:	8182      	strh	r2, [r0, #12]
    d666:	7e0a      	ldrb	r2, [r1, #24]
    d668:	7382      	strb	r2, [r0, #14]
    d66a:	8b0a      	ldrh	r2, [r1, #24]
    d66c:	0a12      	lsrs	r2, r2, #8
    d66e:	73c2      	strb	r2, [r0, #15]
    d670:	7e8a      	ldrb	r2, [r1, #26]
    d672:	7402      	strb	r2, [r0, #16]
    d674:	8b4a      	ldrh	r2, [r1, #26]
    d676:	0a12      	lsrs	r2, r2, #8
    d678:	7442      	strb	r2, [r0, #17]
    d67a:	7f0a      	ldrb	r2, [r1, #28]
    d67c:	7482      	strb	r2, [r0, #18]
    d67e:	8b8a      	ldrh	r2, [r1, #28]
    d680:	0a12      	lsrs	r2, r2, #8
    d682:	74c2      	strb	r2, [r0, #19]
    d684:	7f89      	ldrb	r1, [r1, #30]
    d686:	7501      	strb	r1, [r0, #20]
    d688:	2113      	movs	r1, #19
    d68a:	7041      	strb	r1, [r0, #1]
    d68c:	4608      	mov	r0, r1
    d68e:	4770      	bx	lr
    d690:	094a      	lsrs	r2, r1, #5
    d692:	f001 011f 	and.w	r1, r1, #31
    d696:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    d69a:	40c8      	lsrs	r0, r1
    d69c:	f000 0001 	and.w	r0, r0, #1
    d6a0:	4770      	bx	lr

0000d6a2 <sdc_hci_data_get>:
    d6a2:	b510      	push	{r4, lr}
    d6a4:	b120      	cbz	r0, d6b0 <sdc_hci_data_get+0xe>
    d6a6:	f7ff fd9a 	bl	d1de <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    d6aa:	b120      	cbz	r0, d6b6 <sdc_hci_data_get+0x14>
    d6ac:	2000      	movs	r0, #0
    d6ae:	bd10      	pop	{r4, pc}
    d6b0:	f06f 0015 	mvn.w	r0, #21
    d6b4:	bd10      	pop	{r4, pc}
    d6b6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d6ba:	bd10      	pop	{r4, pc}

0000d6bc <sdc_hci_data_put>:
    d6bc:	b510      	push	{r4, lr}
    d6be:	f06f 0415 	mvn.w	r4, #21
    d6c2:	b120      	cbz	r0, d6ce <sdc_hci_data_put+0x12>
    d6c4:	f7ff fd99 	bl	d1fa <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d6c8:	b108      	cbz	r0, d6ce <sdc_hci_data_put+0x12>
    d6ca:	2000      	movs	r0, #0
    d6cc:	bd10      	pop	{r4, pc}
    d6ce:	4620      	mov	r0, r4
    d6d0:	bd10      	pop	{r4, pc}

0000d6d2 <sdc_hci_evt_get>:
    d6d2:	b510      	push	{r4, lr}
    d6d4:	b120      	cbz	r0, d6e0 <sdc_hci_evt_get+0xe>
    d6d6:	f7ff fd99 	bl	d20c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    d6da:	b120      	cbz	r0, d6e6 <sdc_hci_evt_get+0x14>
    d6dc:	2000      	movs	r0, #0
    d6de:	bd10      	pop	{r4, pc}
    d6e0:	f06f 0015 	mvn.w	r0, #21
    d6e4:	bd10      	pop	{r4, pc}
    d6e6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d6ea:	bd10      	pop	{r4, pc}

0000d6ec <sdc_hci_get>:
    d6ec:	b118      	cbz	r0, d6f6 <sdc_hci_get+0xa>
    d6ee:	b111      	cbz	r1, d6f6 <sdc_hci_get+0xa>
    d6f0:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d6f4:	4770      	bx	lr
    d6f6:	f06f 0015 	mvn.w	r0, #21
    d6fa:	4770      	bx	lr

0000d6fc <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d6fc:	f002 bfbf 	b.w	1067e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d700 <sdc_hci_cmd_cb_read_transmit_power_level>:
    d700:	f003 b80d 	b.w	1071e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d704 <sdc_hci_cmd_cb_set_event_mask>:
    d704:	b510      	push	{r4, lr}
    d706:	f7f7 fb25 	bl	4d54 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d70a:	2000      	movs	r0, #0
    d70c:	bd10      	pop	{r4, pc}

0000d70e <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d70e:	b510      	push	{r4, lr}
    d710:	f7f7 fb30 	bl	4d74 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d714:	2000      	movs	r0, #0
    d716:	bd10      	pop	{r4, pc}

0000d718 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d718:	f003 b81d 	b.w	10756 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d71c <sdc_hci_cmd_vs_conn_event_extend>:
    d71c:	b508      	push	{r3, lr}
    d71e:	7800      	ldrb	r0, [r0, #0]
    d720:	f88d 0000 	strb.w	r0, [sp]
    d724:	4668      	mov	r0, sp
    d726:	f002 fecb 	bl	104c0 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d72a:	bd08      	pop	{r3, pc}

0000d72c <sdc_hci_cmd_vs_conn_update>:
    d72c:	2001      	movs	r0, #1
    d72e:	4770      	bx	lr

0000d730 <sdc_hci_cmd_vs_event_length_set>:
    d730:	f7fd ba0a 	b.w	ab48 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d734 <sdc_hci_cmd_vs_llpm_mode_set>:
    d734:	2001      	movs	r0, #1
    d736:	4770      	bx	lr

0000d738 <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    d738:	7881      	ldrb	r1, [r0, #2]
    d73a:	8800      	ldrh	r0, [r0, #0]
    d73c:	f002 be88 	b.w	10450 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000d740 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d740:	7800      	ldrb	r0, [r0, #0]
    d742:	b100      	cbz	r0, d746 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d744:	2001      	movs	r0, #1
    d746:	f002 be7e 	b.w	10446 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d74a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d74a:	b570      	push	{r4, r5, r6, lr}
    d74c:	4605      	mov	r5, r0
    d74e:	2210      	movs	r2, #16
    d750:	2100      	movs	r1, #0
    d752:	f7ff fc3d 	bl	cfd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d756:	2210      	movs	r2, #16
    d758:	2100      	movs	r1, #0
    d75a:	f105 0010 	add.w	r0, r5, #16
    d75e:	f7ff fc37 	bl	cfd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d762:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d766:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d76a:	1c40      	adds	r0, r0, #1
    d76c:	d10b      	bne.n	d786 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d76e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d772:	1c40      	adds	r0, r0, #1
    d774:	d107      	bne.n	d786 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d776:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d77a:	1c40      	adds	r0, r0, #1
    d77c:	d103      	bne.n	d786 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d77e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d782:	1c40      	adds	r0, r0, #1
    d784:	d00b      	beq.n	d79e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d786:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d78a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d78e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    d792:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d796:	612a      	str	r2, [r5, #16]
    d798:	6168      	str	r0, [r5, #20]
    d79a:	61a9      	str	r1, [r5, #24]
    d79c:	61eb      	str	r3, [r5, #28]
    d79e:	2000      	movs	r0, #0
    d7a0:	f7f8 f82e 	bl	5800 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d7a4:	b918      	cbnz	r0, d7ae <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d7a6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d7aa:	07c0      	lsls	r0, r0, #31
    d7ac:	d118      	bne.n	d7e0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d7ae:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d7b2:	1c40      	adds	r0, r0, #1
    d7b4:	d10b      	bne.n	d7ce <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d7b6:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d7ba:	1c40      	adds	r0, r0, #1
    d7bc:	d107      	bne.n	d7ce <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d7be:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d7c2:	1c40      	adds	r0, r0, #1
    d7c4:	d103      	bne.n	d7ce <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d7c6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d7ca:	1c40      	adds	r0, r0, #1
    d7cc:	d008      	beq.n	d7e0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d7ce:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d7d2:	6861      	ldr	r1, [r4, #4]
    d7d4:	68a2      	ldr	r2, [r4, #8]
    d7d6:	68e3      	ldr	r3, [r4, #12]
    d7d8:	6028      	str	r0, [r5, #0]
    d7da:	6069      	str	r1, [r5, #4]
    d7dc:	60aa      	str	r2, [r5, #8]
    d7de:	60eb      	str	r3, [r5, #12]
    d7e0:	2000      	movs	r0, #0
    d7e2:	bd70      	pop	{r4, r5, r6, pc}

0000d7e4 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d7e4:	b538      	push	{r3, r4, r5, lr}
    d7e6:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d7ea:	4604      	mov	r4, r0
    d7ec:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d7f0:	1c40      	adds	r0, r0, #1
    d7f2:	d105      	bne.n	d800 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d7f4:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d7f8:	43c0      	mvns	r0, r0
    d7fa:	0400      	lsls	r0, r0, #16
    d7fc:	0c00      	lsrs	r0, r0, #16
    d7fe:	d03e      	beq.n	d87e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d800:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d804:	07c0      	lsls	r0, r0, #31
    d806:	d03a      	beq.n	d87e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d808:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d80c:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    d810:	f8ad 1000 	strh.w	r1, [sp]
    d814:	f8c4 0001 	str.w	r0, [r4, #1]
    d818:	f8bd 0000 	ldrh.w	r0, [sp]
    d81c:	f8a4 0005 	strh.w	r0, [r4, #5]
    d820:	79a0      	ldrb	r0, [r4, #6]
    d822:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d826:	71a0      	strb	r0, [r4, #6]
    d828:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d82c:	1c40      	adds	r0, r0, #1
    d82e:	d00f      	beq.n	d850 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d830:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d834:	1c40      	adds	r0, r0, #1
    d836:	d00b      	beq.n	d850 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d838:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d83c:	1c40      	adds	r0, r0, #1
    d83e:	d007      	beq.n	d850 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d840:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d844:	1c40      	adds	r0, r0, #1
    d846:	d003      	beq.n	d850 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d848:	2000      	movs	r0, #0
    d84a:	f7f7 ffd9 	bl	5800 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d84e:	b140      	cbz	r0, d862 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d850:	2210      	movs	r2, #16
    d852:	2100      	movs	r1, #0
    d854:	1de0      	adds	r0, r4, #7
    d856:	f7ff fbbb 	bl	cfd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d85a:	2001      	movs	r0, #1
    d85c:	7020      	strb	r0, [r4, #0]
    d85e:	2000      	movs	r0, #0
    d860:	bd38      	pop	{r3, r4, r5, pc}
    d862:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d866:	6869      	ldr	r1, [r5, #4]
    d868:	68a8      	ldr	r0, [r5, #8]
    d86a:	68eb      	ldr	r3, [r5, #12]
    d86c:	f8c4 2007 	str.w	r2, [r4, #7]
    d870:	f8c4 100b 	str.w	r1, [r4, #11]
    d874:	f8c4 000f 	str.w	r0, [r4, #15]
    d878:	f8c4 3013 	str.w	r3, [r4, #19]
    d87c:	e7ed      	b.n	d85a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d87e:	2000      	movs	r0, #0
    d880:	e7ec      	b.n	d85c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d882 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d882:	f002 be0f 	b.w	104a4 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d886 <sdc_hci_cmd_ip_read_bd_addr>:
    d886:	f002 bf0b 	b.w	106a0 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d88a <sdc_hci_cmd_ip_read_local_version_information>:
    d88a:	f7fd b96b 	b.w	ab64 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d88e <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d88e:	f002 bb76 	b.w	ff7e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d892 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    d892:	f002 bb59 	b.w	ff48 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000d896 <sdc_hci_cmd_le_clear_filter_accept_list>:
    d896:	f002 bb96 	b.w	ffc6 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d89a <sdc_hci_cmd_le_clear_resolving_list>:
    d89a:	f002 bb87 	b.w	ffac <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000d89e <sdc_hci_cmd_le_encrypt>:
    d89e:	f002 bb9c 	b.w	ffda <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d8a2 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    d8a2:	8802      	ldrh	r2, [r0, #0]
    d8a4:	800a      	strh	r2, [r1, #0]
    d8a6:	f002 bba1 	b.w	ffec <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000d8aa <sdc_hci_cmd_le_long_term_key_request_reply>:
    d8aa:	8802      	ldrh	r2, [r0, #0]
    d8ac:	800a      	strh	r2, [r1, #0]
    d8ae:	f002 bbb6 	b.w	1001e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000d8b2 <sdc_hci_cmd_le_rand>:
    d8b2:	f002 bbde 	b.w	10072 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d8b6 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    d8b6:	f002 bbe2 	b.w	1007e <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000d8ba <sdc_hci_cmd_le_read_buffer_size>:
    d8ba:	f7fd b84b 	b.w	a954 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d8be <sdc_hci_cmd_le_read_channel_map>:
    d8be:	f7fd b853 	b.w	a968 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d8c2 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d8c2:	f002 bc17 	b.w	100f4 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d8c6 <sdc_hci_cmd_le_read_max_data_length>:
    d8c6:	f002 bbe3 	b.w	10090 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d8ca <sdc_hci_cmd_le_read_phy>:
    d8ca:	f7fd b875 	b.w	a9b8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d8ce <sdc_hci_cmd_le_read_remote_features>:
    d8ce:	f002 bbe8 	b.w	100a2 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d8d2 <sdc_hci_cmd_le_read_resolving_list_size>:
    d8d2:	f002 bc02 	b.w	100da <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000d8d6 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d8d6:	f7fd b895 	b.w	aa04 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d8da <sdc_hci_cmd_le_read_transmit_power>:
    d8da:	f002 bc02 	b.w	100e2 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d8de <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d8de:	f002 bc26 	b.w	1012e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d8e2 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    d8e2:	f002 bc0b 	b.w	100fc <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000d8e6 <sdc_hci_cmd_le_set_address_resolution_enable>:
    d8e6:	f002 bc37 	b.w	10158 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000d8ea <sdc_hci_cmd_le_set_adv_data>:
    d8ea:	f002 bc43 	b.w	10174 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000d8ee <sdc_hci_cmd_le_set_adv_enable>:
    d8ee:	f002 bc56 	b.w	1019e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000d8f2 <sdc_hci_cmd_le_set_adv_params>:
    d8f2:	f002 bc87 	b.w	10204 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000d8f6 <sdc_hci_cmd_le_set_data_length>:
    d8f6:	f002 bd1a 	b.w	1032e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d8fa <sdc_hci_cmd_le_set_default_phy>:
    d8fa:	f7fd b88d 	b.w	aa18 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d8fe <sdc_hci_cmd_le_set_event_mask>:
    d8fe:	b510      	push	{r4, lr}
    d900:	f7f7 fa20 	bl	4d44 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d904:	2000      	movs	r0, #0
    d906:	bd10      	pop	{r4, pc}

0000d908 <sdc_hci_cmd_le_set_phy>:
    d908:	f002 bd31 	b.w	1036e <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d90c <sdc_hci_cmd_le_set_privacy_mode>:
    d90c:	f002 bd48 	b.w	103a0 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000d910 <sdc_hci_cmd_le_set_random_address>:
    d910:	f002 bd5c 	b.w	103cc <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d914 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    d914:	f002 bd68 	b.w	103e8 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000d918 <sdc_hci_cmd_le_set_scan_response_data>:
    d918:	f002 bd6f 	b.w	103fa <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000d91c <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d91c:	f002 bd82 	b.w	10424 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d920 <sdc_hci_cmd_lc_disconnect>:
    d920:	f002 bac4 	b.w	feac <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d924 <sdc_hci_cmd_lc_read_remote_version_information>:
    d924:	f002 bec8 	b.w	106b8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d928:	b570      	push	{r4, r5, r6, lr}
    d92a:	880b      	ldrh	r3, [r1, #0]
    d92c:	7f04      	ldrb	r4, [r0, #28]
    d92e:	f100 0524 	add.w	r5, r0, #36	; 0x24
    d932:	f3c3 060e 	ubfx	r6, r3, #0, #15
    d936:	8802      	ldrh	r2, [r0, #0]
    d938:	4435      	add	r5, r6
    d93a:	1da4      	adds	r4, r4, #6
    d93c:	882d      	ldrh	r5, [r5, #0]
    d93e:	4422      	add	r2, r4
    d940:	b292      	uxth	r2, r2
    d942:	4425      	add	r5, r4
    d944:	1e54      	subs	r4, r2, #1
    d946:	442c      	add	r4, r5
    d948:	fb94 f4f2 	sdiv	r4, r4, r2
    d94c:	fb02 6204 	mla	r2, r2, r4, r6
    d950:	8840      	ldrh	r0, [r0, #2]
    d952:	b292      	uxth	r2, r2
    d954:	4290      	cmp	r0, r2
    d956:	d903      	bls.n	d960 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d958:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d95c:	4310      	orrs	r0, r2
    d95e:	e002      	b.n	d966 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d960:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d964:	4398      	bics	r0, r3
    d966:	8008      	strh	r0, [r1, #0]
    d968:	bd70      	pop	{r4, r5, r6, pc}
    d96a:	0442      	lsls	r2, r0, #17
    d96c:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    d970:	d107      	bne.n	d982 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d972:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d976:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d97a:	4288      	cmp	r0, r1
    d97c:	d001      	beq.n	d982 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d97e:	2001      	movs	r0, #1
    d980:	4770      	bx	lr
    d982:	2000      	movs	r0, #0
    d984:	4770      	bx	lr

0000d986 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    d986:	b570      	push	{r4, r5, r6, lr}
    d988:	7f00      	ldrb	r0, [r0, #28]
    d98a:	461c      	mov	r4, r3
    d98c:	1d80      	adds	r0, r0, #6
    d98e:	4408      	add	r0, r1
    d990:	4613      	mov	r3, r2
    d992:	8809      	ldrh	r1, [r1, #0]
    d994:	9a04      	ldr	r2, [sp, #16]
    d996:	1cc9      	adds	r1, r1, #3
    d998:	b289      	uxth	r1, r1
    d99a:	1915      	adds	r5, r2, r4
    d99c:	1ec0      	subs	r0, r0, #3
    d99e:	428d      	cmp	r5, r1
    d9a0:	d805      	bhi.n	d9ae <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    d9a2:	1881      	adds	r1, r0, r2
    d9a4:	4622      	mov	r2, r4
    d9a6:	4618      	mov	r0, r3
    d9a8:	f7ff fa98 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d9ac:	e000      	b.n	d9b0 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    d9ae:	2400      	movs	r4, #0
    d9b0:	4620      	mov	r0, r4
    d9b2:	bd70      	pop	{r4, r5, r6, pc}

0000d9b4 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    d9b4:	b570      	push	{r4, r5, r6, lr}
    d9b6:	7f00      	ldrb	r0, [r0, #28]
    d9b8:	461c      	mov	r4, r3
    d9ba:	1d80      	adds	r0, r0, #6
    d9bc:	4408      	add	r0, r1
    d9be:	4613      	mov	r3, r2
    d9c0:	8809      	ldrh	r1, [r1, #0]
    d9c2:	9a04      	ldr	r2, [sp, #16]
    d9c4:	1cc9      	adds	r1, r1, #3
    d9c6:	b289      	uxth	r1, r1
    d9c8:	1915      	adds	r5, r2, r4
    d9ca:	1ec0      	subs	r0, r0, #3
    d9cc:	428d      	cmp	r5, r1
    d9ce:	d805      	bhi.n	d9dc <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    d9d0:	4410      	add	r0, r2
    d9d2:	4622      	mov	r2, r4
    d9d4:	4619      	mov	r1, r3
    d9d6:	f7ff fa81 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d9da:	e000      	b.n	d9de <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    d9dc:	2400      	movs	r4, #0
    d9de:	4620      	mov	r0, r4
    d9e0:	bd70      	pop	{r4, r5, r6, pc}

0000d9e2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d9e2:	8881      	ldrh	r1, [r0, #4]
    d9e4:	88c0      	ldrh	r0, [r0, #6]
    d9e6:	4288      	cmp	r0, r1
    d9e8:	d101      	bne.n	d9ee <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d9ea:	2001      	movs	r0, #1
    d9ec:	4770      	bx	lr
    d9ee:	2000      	movs	r0, #0
    d9f0:	4770      	bx	lr

0000d9f2 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    d9f2:	8881      	ldrh	r1, [r0, #4]
    d9f4:	8900      	ldrh	r0, [r0, #8]
    d9f6:	4288      	cmp	r0, r1
    d9f8:	d101      	bne.n	d9fe <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    d9fa:	2001      	movs	r0, #1
    d9fc:	4770      	bx	lr
    d9fe:	2000      	movs	r0, #0
    da00:	4770      	bx	lr

0000da02 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    da02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da06:	460f      	mov	r7, r1
    da08:	4604      	mov	r4, r0
    da0a:	f100 0124 	add.w	r1, r0, #36	; 0x24
    da0e:	8880      	ldrh	r0, [r0, #4]
    da10:	2600      	movs	r6, #0
    da12:	f3c0 000e 	ubfx	r0, r0, #0, #15
    da16:	1845      	adds	r5, r0, r1
    da18:	603e      	str	r6, [r7, #0]
    da1a:	8a20      	ldrh	r0, [r4, #16]
    da1c:	2800      	cmp	r0, #0
    da1e:	d01a      	beq.n	da56 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x54>
    da20:	89a1      	ldrh	r1, [r4, #12]
    da22:	4408      	add	r0, r1
    da24:	b280      	uxth	r0, r0
    da26:	81a0      	strh	r0, [r4, #12]
    da28:	8829      	ldrh	r1, [r5, #0]
    da2a:	4288      	cmp	r0, r1
    da2c:	d905      	bls.n	da3a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    da2e:	f44f 71b3 	mov.w	r1, #358	; 0x166
    da32:	f04f 0014 	mov.w	r0, #20
    da36:	f7f7 f801 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da3a:	d10a      	bne.n	da52 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x50>
    da3c:	69a0      	ldr	r0, [r4, #24]
    da3e:	b108      	cbz	r0, da44 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x42>
    da40:	7f40      	ldrb	r0, [r0, #29]
    da42:	70a8      	strb	r0, [r5, #2]
    da44:	f104 0104 	add.w	r1, r4, #4
    da48:	4620      	mov	r0, r4
    da4a:	f7ff ff6d 	bl	d928 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    da4e:	81a6      	strh	r6, [r4, #12]
    da50:	603d      	str	r5, [r7, #0]
    da52:	8226      	strh	r6, [r4, #16]
    da54:	2001      	movs	r0, #1
    da56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000da5a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    da5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da5c:	4604      	mov	r4, r0
    da5e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    da62:	88c0      	ldrh	r0, [r0, #6]
    da64:	460e      	mov	r6, r1
    da66:	f3c0 070e 	ubfx	r7, r0, #0, #15
    da6a:	8a60      	ldrh	r0, [r4, #18]
    da6c:	19d9      	adds	r1, r3, r7
    da6e:	b108      	cbz	r0, da74 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    da70:	42b0      	cmp	r0, r6
    da72:	d201      	bcs.n	da78 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    da74:	2000      	movs	r0, #0
    da76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    da78:	89e0      	ldrh	r0, [r4, #14]
    da7a:	2500      	movs	r5, #0
    da7c:	b140      	cbz	r0, da90 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    da7e:	f8b1 c000 	ldrh.w	ip, [r1]
    da82:	4560      	cmp	r0, ip
    da84:	d008      	beq.n	da98 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    da86:	f240 2151 	movw	r1, #593	; 0x251
    da8a:	2014      	movs	r0, #20
    da8c:	f7f6 ffd6 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da90:	7f60      	ldrb	r0, [r4, #29]
    da92:	7088      	strb	r0, [r1, #2]
    da94:	800d      	strh	r5, [r1, #0]
    da96:	e00e      	b.n	dab6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    da98:	f894 c01c 	ldrb.w	ip, [r4, #28]
    da9c:	4418      	add	r0, r3
    da9e:	f10c 0c06 	add.w	ip, ip, #6
    daa2:	44bc      	add	ip, r7
    daa4:	4460      	add	r0, ip
    daa6:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    daaa:	f820 cc03 	strh.w	ip, [r0, #-3]
    daae:	f894 c020 	ldrb.w	ip, [r4, #32]
    dab2:	f800 cc01 	strb.w	ip, [r0, #-1]
    dab6:	89e0      	ldrh	r0, [r4, #14]
    dab8:	4430      	add	r0, r6
    daba:	81e0      	strh	r0, [r4, #14]
    dabc:	8808      	ldrh	r0, [r1, #0]
    dabe:	4430      	add	r0, r6
    dac0:	8008      	strh	r0, [r1, #0]
    dac2:	b19a      	cbz	r2, daec <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    dac4:	1da1      	adds	r1, r4, #6
    dac6:	4620      	mov	r0, r4
    dac8:	f7ff ff2e 	bl	d928 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    dacc:	81e5      	strh	r5, [r4, #14]
    dace:	7f60      	ldrb	r0, [r4, #29]
    dad0:	1c40      	adds	r0, r0, #1
    dad2:	7760      	strb	r0, [r4, #29]
    dad4:	7da0      	ldrb	r0, [r4, #22]
    dad6:	f88d 0000 	strb.w	r0, [sp]
    dada:	9800      	ldr	r0, [sp, #0]
    dadc:	9000      	str	r0, [sp, #0]
    dade:	f89d 0000 	ldrb.w	r0, [sp]
    dae2:	b178      	cbz	r0, db04 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    dae4:	88e0      	ldrh	r0, [r4, #6]
    dae6:	82a0      	strh	r0, [r4, #20]
    dae8:	75a5      	strb	r5, [r4, #22]
    daea:	e00b      	b.n	db04 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    daec:	7f20      	ldrb	r0, [r4, #28]
    daee:	89e1      	ldrh	r1, [r4, #14]
    daf0:	1d80      	adds	r0, r0, #6
    daf2:	4438      	add	r0, r7
    daf4:	4419      	add	r1, r3
    daf6:	4408      	add	r0, r1
    daf8:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    dafc:	83e1      	strh	r1, [r4, #30]
    dafe:	7880      	ldrb	r0, [r0, #2]
    db00:	f884 0020 	strb.w	r0, [r4, #32]
    db04:	8265      	strh	r5, [r4, #18]
    db06:	2001      	movs	r0, #1
    db08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000db0a <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    db0a:	1cc0      	adds	r0, r0, #3
    db0c:	4770      	bx	lr

0000db0e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    db0e:	b510      	push	{r4, lr}
    db10:	4604      	mov	r4, r0
    db12:	88c0      	ldrh	r0, [r0, #6]
    db14:	88a1      	ldrh	r1, [r4, #4]
    db16:	4281      	cmp	r1, r0
    db18:	d007      	beq.n	db2a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    db1a:	89a0      	ldrh	r0, [r4, #12]
    db1c:	b928      	cbnz	r0, db2a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    db1e:	8a20      	ldrh	r0, [r4, #16]
    db20:	b918      	cbnz	r0, db2a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    db22:	88a0      	ldrh	r0, [r4, #4]
    db24:	8aa1      	ldrh	r1, [r4, #20]
    db26:	4288      	cmp	r0, r1
    db28:	d101      	bne.n	db2e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    db2a:	2000      	movs	r0, #0
    db2c:	bd10      	pop	{r4, pc}
    db2e:	1d21      	adds	r1, r4, #4
    db30:	4620      	mov	r0, r4
    db32:	f7ff fef9 	bl	d928 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    db36:	2000      	movs	r0, #0
    db38:	8220      	strh	r0, [r4, #16]
    db3a:	2001      	movs	r0, #1
    db3c:	bd10      	pop	{r4, pc}

0000db3e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    db3e:	b510      	push	{r4, lr}
    db40:	4604      	mov	r4, r0
    db42:	f100 0224 	add.w	r2, r0, #36	; 0x24
    db46:	88c0      	ldrh	r0, [r0, #6]
    db48:	f3c0 000e 	ubfx	r0, r0, #0, #15
    db4c:	4402      	add	r2, r0
    db4e:	8820      	ldrh	r0, [r4, #0]
    db50:	2845      	cmp	r0, #69	; 0x45
    db52:	d200      	bcs.n	db56 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    db54:	2045      	movs	r0, #69	; 0x45
    db56:	4288      	cmp	r0, r1
    db58:	d204      	bcs.n	db64 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    db5a:	f240 1119 	movw	r1, #281	; 0x119
    db5e:	2014      	movs	r0, #20
    db60:	f7f6 ff6c 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db64:	7de0      	ldrb	r0, [r4, #23]
    db66:	2800      	cmp	r0, #0
    db68:	d003      	beq.n	db72 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    db6a:	8810      	ldrh	r0, [r2, #0]
    db6c:	4288      	cmp	r0, r1
    db6e:	d201      	bcs.n	db74 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    db70:	2000      	movs	r0, #0
    db72:	bd10      	pop	{r4, pc}
    db74:	8011      	strh	r1, [r2, #0]
    db76:	1da1      	adds	r1, r4, #6
    db78:	4620      	mov	r0, r4
    db7a:	f7ff fed5 	bl	d928 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    db7e:	2000      	movs	r0, #0
    db80:	75e0      	strb	r0, [r4, #23]
    db82:	2001      	movs	r0, #1
    db84:	bd10      	pop	{r4, pc}

0000db86 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    db86:	b530      	push	{r4, r5, lr}
    db88:	88c4      	ldrh	r4, [r0, #6]
    db8a:	8881      	ldrh	r1, [r0, #4]
    db8c:	f100 0224 	add.w	r2, r0, #36	; 0x24
    db90:	f3c1 030e 	ubfx	r3, r1, #0, #15
    db94:	4413      	add	r3, r2
    db96:	8882      	ldrh	r2, [r0, #4]
    db98:	8a85      	ldrh	r5, [r0, #20]
    db9a:	42aa      	cmp	r2, r5
    db9c:	d012      	beq.n	dbc4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    db9e:	42a1      	cmp	r1, r4
    dba0:	d010      	beq.n	dbc4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    dba2:	8981      	ldrh	r1, [r0, #12]
    dba4:	b971      	cbnz	r1, dbc4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    dba6:	6982      	ldr	r2, [r0, #24]
    dba8:	b172      	cbz	r2, dbc8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    dbaa:	4610      	mov	r0, r2
    dbac:	f7ff ff21 	bl	d9f2 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    dbb0:	b950      	cbnz	r0, dbc8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    dbb2:	8910      	ldrh	r0, [r2, #8]
    dbb4:	3224      	adds	r2, #36	; 0x24
    dbb6:	f3c0 000e 	ubfx	r0, r0, #0, #15
    dbba:	4410      	add	r0, r2
    dbbc:	7899      	ldrb	r1, [r3, #2]
    dbbe:	7880      	ldrb	r0, [r0, #2]
    dbc0:	4288      	cmp	r0, r1
    dbc2:	d101      	bne.n	dbc8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    dbc4:	2000      	movs	r0, #0
    dbc6:	bd30      	pop	{r4, r5, pc}
    dbc8:	4618      	mov	r0, r3
    dbca:	bd30      	pop	{r4, r5, pc}

0000dbcc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    dbcc:	7f00      	ldrb	r0, [r0, #28]
    dbce:	1d80      	adds	r0, r0, #6
    dbd0:	4408      	add	r0, r1
    dbd2:	1ec0      	subs	r0, r0, #3
    dbd4:	6010      	str	r0, [r2, #0]
    dbd6:	8808      	ldrh	r0, [r1, #0]
    dbd8:	4770      	bx	lr

0000dbda <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    dbda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dbde:	460e      	mov	r6, r1
    dbe0:	88c1      	ldrh	r1, [r0, #6]
    dbe2:	8902      	ldrh	r2, [r0, #8]
    dbe4:	4604      	mov	r4, r0
    dbe6:	f100 0824 	add.w	r8, r0, #36	; 0x24
    dbea:	8800      	ldrh	r0, [r0, #0]
    dbec:	f3c1 050e 	ubfx	r5, r1, #0, #15
    dbf0:	f3c2 070e 	ubfx	r7, r2, #0, #15
    dbf4:	2845      	cmp	r0, #69	; 0x45
    dbf6:	d200      	bcs.n	dbfa <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    dbf8:	2045      	movs	r0, #69	; 0x45
    dbfa:	42b0      	cmp	r0, r6
    dbfc:	d203      	bcs.n	dc06 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    dbfe:	21db      	movs	r1, #219	; 0xdb
    dc00:	2014      	movs	r0, #20
    dc02:	f7f6 ff1b 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc06:	4610      	mov	r0, r2
    dc08:	f7ff feaf 	bl	d96a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    dc0c:	b110      	cbz	r0, dc14 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    dc0e:	2000      	movs	r0, #0
    dc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc14:	42af      	cmp	r7, r5
    dc16:	d908      	bls.n	dc2a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    dc18:	7f21      	ldrb	r1, [r4, #28]
    dc1a:	1b78      	subs	r0, r7, r5
    dc1c:	1a40      	subs	r0, r0, r1
    dc1e:	1f80      	subs	r0, r0, #6
    dc20:	4286      	cmp	r6, r0
    dc22:	dd02      	ble.n	dc2a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    dc24:	2000      	movs	r0, #0
    dc26:	75e0      	strb	r0, [r4, #23]
    dc28:	e7f1      	b.n	dc0e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    dc2a:	eb08 0005 	add.w	r0, r8, r5
    dc2e:	2101      	movs	r1, #1
    dc30:	8006      	strh	r6, [r0, #0]
    dc32:	75e1      	strb	r1, [r4, #23]
    dc34:	e7ec      	b.n	dc10 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000dc36 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    dc36:	b538      	push	{r3, r4, r5, lr}
    dc38:	88c4      	ldrh	r4, [r0, #6]
    dc3a:	8881      	ldrh	r1, [r0, #4]
    dc3c:	f100 0224 	add.w	r2, r0, #36	; 0x24
    dc40:	f3c1 030e 	ubfx	r3, r1, #0, #15
    dc44:	441a      	add	r2, r3
    dc46:	42a1      	cmp	r1, r4
    dc48:	d010      	beq.n	dc6c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    dc4a:	8983      	ldrh	r3, [r0, #12]
    dc4c:	8a05      	ldrh	r5, [r0, #16]
    dc4e:	8812      	ldrh	r2, [r2, #0]
    dc50:	442b      	add	r3, r5
    dc52:	4293      	cmp	r3, r2
    dc54:	d308      	bcc.n	dc68 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    dc56:	f8ad 1000 	strh.w	r1, [sp]
    dc5a:	4669      	mov	r1, sp
    dc5c:	f7ff fe64 	bl	d928 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    dc60:	f8bd 0000 	ldrh.w	r0, [sp]
    dc64:	42a0      	cmp	r0, r4
    dc66:	d001      	beq.n	dc6c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    dc68:	2001      	movs	r0, #1
    dc6a:	bd38      	pop	{r3, r4, r5, pc}
    dc6c:	2000      	movs	r0, #0
    dc6e:	bd38      	pop	{r3, r4, r5, pc}

0000dc70 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    dc70:	b570      	push	{r4, r5, r6, lr}
    dc72:	88c6      	ldrh	r6, [r0, #6]
    dc74:	8885      	ldrh	r5, [r0, #4]
    dc76:	4603      	mov	r3, r0
    dc78:	f100 0424 	add.w	r4, r0, #36	; 0x24
    dc7c:	f3c5 000e 	ubfx	r0, r5, #0, #15
    dc80:	4420      	add	r0, r4
    dc82:	42b5      	cmp	r5, r6
    dc84:	d102      	bne.n	dc8c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    dc86:	2000      	movs	r0, #0
    dc88:	8218      	strh	r0, [r3, #16]
    dc8a:	bd70      	pop	{r4, r5, r6, pc}
    dc8c:	8804      	ldrh	r4, [r0, #0]
    dc8e:	899d      	ldrh	r5, [r3, #12]
    dc90:	7f1e      	ldrb	r6, [r3, #28]
    dc92:	1b64      	subs	r4, r4, r5
    dc94:	4435      	add	r5, r6
    dc96:	4428      	add	r0, r5
    dc98:	880d      	ldrh	r5, [r1, #0]
    dc9a:	b2a4      	uxth	r4, r4
    dc9c:	1cc0      	adds	r0, r0, #3
    dc9e:	42a5      	cmp	r5, r4
    dca0:	d900      	bls.n	dca4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    dca2:	800c      	strh	r4, [r1, #0]
    dca4:	899c      	ldrh	r4, [r3, #12]
    dca6:	b124      	cbz	r4, dcb2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    dca8:	2400      	movs	r4, #0
    dcaa:	7014      	strb	r4, [r2, #0]
    dcac:	8809      	ldrh	r1, [r1, #0]
    dcae:	8219      	strh	r1, [r3, #16]
    dcb0:	bd70      	pop	{r4, r5, r6, pc}
    dcb2:	2401      	movs	r4, #1
    dcb4:	e7f9      	b.n	dcaa <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000dcb6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    dcb6:	b508      	push	{r3, lr}
    dcb8:	8a81      	ldrh	r1, [r0, #20]
    dcba:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    dcbe:	3aff      	subs	r2, #255	; 0xff
    dcc0:	d008      	beq.n	dcd4 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    dcc2:	7d82      	ldrb	r2, [r0, #22]
    dcc4:	f88d 2000 	strb.w	r2, [sp]
    dcc8:	9a00      	ldr	r2, [sp, #0]
    dcca:	9200      	str	r2, [sp, #0]
    dccc:	f89d 2000 	ldrb.w	r2, [sp]
    dcd0:	b952      	cbnz	r2, dce8 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    dcd2:	e004      	b.n	dcde <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    dcd4:	f240 318e 	movw	r1, #910	; 0x38e
    dcd8:	2014      	movs	r0, #20
    dcda:	f7f6 feaf 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dcde:	8880      	ldrh	r0, [r0, #4]
    dce0:	4281      	cmp	r1, r0
    dce2:	d101      	bne.n	dce8 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    dce4:	2000      	movs	r0, #0
    dce6:	bd08      	pop	{r3, pc}
    dce8:	2001      	movs	r0, #1
    dcea:	bd08      	pop	{r3, pc}

0000dcec <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    dcec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dcf0:	8281      	strh	r1, [r0, #20]
    dcf2:	2100      	movs	r1, #0
    dcf4:	7581      	strb	r1, [r0, #22]
    dcf6:	4770      	bx	lr

0000dcf8 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    dcf8:	b510      	push	{r4, lr}
    dcfa:	8a81      	ldrh	r1, [r0, #20]
    dcfc:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    dd00:	3aff      	subs	r2, #255	; 0xff
    dd02:	d004      	beq.n	dd0e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    dd04:	f240 316a 	movw	r1, #874	; 0x36a
    dd08:	2014      	movs	r0, #20
    dd0a:	f7f6 fe97 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd0e:	88c1      	ldrh	r1, [r0, #6]
    dd10:	8281      	strh	r1, [r0, #20]
    dd12:	89c1      	ldrh	r1, [r0, #14]
    dd14:	b109      	cbz	r1, dd1a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    dd16:	21ff      	movs	r1, #255	; 0xff
    dd18:	e000      	b.n	dd1c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    dd1a:	2100      	movs	r1, #0
    dd1c:	7581      	strb	r1, [r0, #22]
    dd1e:	bd10      	pop	{r4, pc}

0000dd20 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    dd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd24:	461d      	mov	r5, r3
    dd26:	4616      	mov	r6, r2
    dd28:	9f06      	ldr	r7, [sp, #24]
    dd2a:	460b      	mov	r3, r1
    dd2c:	4604      	mov	r4, r0
    dd2e:	463a      	mov	r2, r7
    dd30:	4629      	mov	r1, r5
    dd32:	4630      	mov	r0, r6
    dd34:	f000 f84f 	bl	ddd6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    dd38:	4283      	cmp	r3, r0
    dd3a:	d201      	bcs.n	dd40 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    dd3c:	21a8      	movs	r1, #168	; 0xa8
    dd3e:	e018      	b.n	dd72 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    dd40:	1ce0      	adds	r0, r4, #3
    dd42:	f020 0103 	bic.w	r1, r0, #3
    dd46:	4620      	mov	r0, r4
    dd48:	42a1      	cmp	r1, r4
    dd4a:	d001      	beq.n	dd50 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    dd4c:	21a9      	movs	r1, #169	; 0xa9
    dd4e:	e010      	b.n	dd72 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    dd50:	2224      	movs	r2, #36	; 0x24
    dd52:	2100      	movs	r1, #0
    dd54:	f7ff f93c 	bl	cfd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dd58:	f64f 70ff 	movw	r0, #65535	; 0xffff
    dd5c:	82a0      	strh	r0, [r4, #20]
    dd5e:	19a8      	adds	r0, r5, r6
    dd60:	1d80      	adds	r0, r0, #6
    dd62:	4378      	muls	r0, r7
    dd64:	b280      	uxth	r0, r0
    dd66:	7725      	strb	r5, [r4, #28]
    dd68:	8060      	strh	r0, [r4, #2]
    dd6a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    dd6e:	d903      	bls.n	dd78 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    dd70:	21af      	movs	r1, #175	; 0xaf
    dd72:	2014      	movs	r0, #20
    dd74:	f7f6 fe62 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd78:	8026      	strh	r6, [r4, #0]
    dd7a:	2000      	movs	r0, #0
    dd7c:	7760      	strb	r0, [r4, #29]
    dd7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dd82 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    dd82:	6181      	str	r1, [r0, #24]
    dd84:	6188      	str	r0, [r1, #24]
    dd86:	4770      	bx	lr

0000dd88 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    dd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd8c:	460b      	mov	r3, r1
    dd8e:	4604      	mov	r4, r0
    dd90:	f100 0124 	add.w	r1, r0, #36	; 0x24
    dd94:	8905      	ldrh	r5, [r0, #8]
    dd96:	8946      	ldrh	r6, [r0, #10]
    dd98:	8880      	ldrh	r0, [r0, #4]
    dd9a:	f3c5 070e 	ubfx	r7, r5, #0, #15
    dd9e:	4439      	add	r1, r7
    dda0:	460f      	mov	r7, r1
    dda2:	4285      	cmp	r5, r0
    dda4:	d102      	bne.n	ddac <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    dda6:	2000      	movs	r0, #0
    dda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ddac:	b10a      	cbz	r2, ddb2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    ddae:	1cc8      	adds	r0, r1, #3
    ddb0:	6010      	str	r0, [r2, #0]
    ddb2:	b123      	cbz	r3, ddbe <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    ddb4:	7f22      	ldrb	r2, [r4, #28]
    ddb6:	1cf9      	adds	r1, r7, #3
    ddb8:	4618      	mov	r0, r3
    ddba:	f7ff f88f 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ddbe:	883f      	ldrh	r7, [r7, #0]
    ddc0:	f104 0108 	add.w	r1, r4, #8
    ddc4:	4620      	mov	r0, r4
    ddc6:	f7ff fdaf 	bl	d928 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    ddca:	42b5      	cmp	r5, r6
    ddcc:	d101      	bne.n	ddd2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    ddce:	8920      	ldrh	r0, [r4, #8]
    ddd0:	8160      	strh	r0, [r4, #10]
    ddd2:	4638      	mov	r0, r7
    ddd4:	e7e8      	b.n	dda8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000ddd6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    ddd6:	4401      	add	r1, r0
    ddd8:	1d89      	adds	r1, r1, #6
    ddda:	4351      	muls	r1, r2
    dddc:	b28a      	uxth	r2, r1
    ddde:	2100      	movs	r1, #0
    dde0:	2845      	cmp	r0, #69	; 0x45
    dde2:	d202      	bcs.n	ddea <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    dde4:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    dde8:	b281      	uxth	r1, r0
    ddea:	3224      	adds	r2, #36	; 0x24
    ddec:	1850      	adds	r0, r2, r1
    ddee:	b280      	uxth	r0, r0
    ddf0:	4770      	bx	lr

0000ddf2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    ddf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ddf6:	4688      	mov	r8, r1
    ddf8:	88c1      	ldrh	r1, [r0, #6]
    ddfa:	4604      	mov	r4, r0
    ddfc:	8900      	ldrh	r0, [r0, #8]
    ddfe:	f3c1 060e 	ubfx	r6, r1, #0, #15
    de02:	f104 0524 	add.w	r5, r4, #36	; 0x24
    de06:	f3c0 070e 	ubfx	r7, r0, #0, #15
    de0a:	eb05 0906 	add.w	r9, r5, r6
    de0e:	f7ff fdac 	bl	d96a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    de12:	2200      	movs	r2, #0
    de14:	b998      	cbnz	r0, de3e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    de16:	8820      	ldrh	r0, [r4, #0]
    de18:	2845      	cmp	r0, #69	; 0x45
    de1a:	d200      	bcs.n	de1e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    de1c:	2045      	movs	r0, #69	; 0x45
    de1e:	42b7      	cmp	r7, r6
    de20:	d906      	bls.n	de30 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    de22:	7f23      	ldrb	r3, [r4, #28]
    de24:	1bb9      	subs	r1, r7, r6
    de26:	1ac9      	subs	r1, r1, r3
    de28:	1f89      	subs	r1, r1, #6
    de2a:	4281      	cmp	r1, r0
    de2c:	da00      	bge.n	de30 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    de2e:	4608      	mov	r0, r1
    de30:	89e1      	ldrh	r1, [r4, #14]
    de32:	b111      	cbz	r1, de3a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    de34:	f8b9 3000 	ldrh.w	r3, [r9]
    de38:	1ac0      	subs	r0, r0, r3
    de3a:	4540      	cmp	r0, r8
    de3c:	da03      	bge.n	de46 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    de3e:	8262      	strh	r2, [r4, #18]
    de40:	2000      	movs	r0, #0
    de42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    de46:	7f20      	ldrb	r0, [r4, #28]
    de48:	4429      	add	r1, r5
    de4a:	1d80      	adds	r0, r0, #6
    de4c:	4430      	add	r0, r6
    de4e:	4408      	add	r0, r1
    de50:	f8a4 8012 	strh.w	r8, [r4, #18]
    de54:	1ec0      	subs	r0, r0, #3
    de56:	e7f4      	b.n	de42 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000de58 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    de58:	2100      	movs	r1, #0
    de5a:	81c1      	strh	r1, [r0, #14]
    de5c:	8241      	strh	r1, [r0, #18]
    de5e:	7581      	strb	r1, [r0, #22]
    de60:	4770      	bx	lr

0000de62 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    de62:	b570      	push	{r4, r5, r6, lr}
    de64:	2300      	movs	r3, #0
    de66:	f1a1 0208 	sub.w	r2, r1, #8
    de6a:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    de6e:	42a2      	cmp	r2, r4
    de70:	d304      	bcc.n	de7c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    de72:	f240 11cd 	movw	r1, #461	; 0x1cd
    de76:	2015      	movs	r0, #21
    de78:	f7f6 fde0 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de7c:	6802      	ldr	r2, [r0, #0]
    de7e:	b90a      	cbnz	r2, de84 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    de80:	e01e      	b.n	dec0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    de82:	4610      	mov	r0, r2
    de84:	6802      	ldr	r2, [r0, #0]
    de86:	8893      	ldrh	r3, [r2, #4]
    de88:	428b      	cmp	r3, r1
    de8a:	d002      	beq.n	de92 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    de8c:	6813      	ldr	r3, [r2, #0]
    de8e:	2b00      	cmp	r3, #0
    de90:	d1f7      	bne.n	de82 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    de92:	8894      	ldrh	r4, [r2, #4]
    de94:	4613      	mov	r3, r2
    de96:	428c      	cmp	r4, r1
    de98:	d101      	bne.n	de9e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    de9a:	6811      	ldr	r1, [r2, #0]
    de9c:	e00d      	b.n	deba <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    de9e:	f101 0508 	add.w	r5, r1, #8
    dea2:	b2ae      	uxth	r6, r5
    dea4:	2500      	movs	r5, #0
    dea6:	42b4      	cmp	r4, r6
    dea8:	d309      	bcc.n	debe <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    deaa:	1a64      	subs	r4, r4, r1
    deac:	4411      	add	r1, r2
    deae:	600d      	str	r5, [r1, #0]
    deb0:	808c      	strh	r4, [r1, #4]
    deb2:	6802      	ldr	r2, [r0, #0]
    deb4:	6812      	ldr	r2, [r2, #0]
    deb6:	6002      	str	r2, [r0, #0]
    deb8:	600a      	str	r2, [r1, #0]
    deba:	6001      	str	r1, [r0, #0]
    debc:	e000      	b.n	dec0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    debe:	2300      	movs	r3, #0
    dec0:	4618      	mov	r0, r3
    dec2:	bd70      	pop	{r4, r5, r6, pc}

0000dec4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    dec4:	b510      	push	{r4, lr}
    dec6:	000c      	movs	r4, r1
    dec8:	d004      	beq.n	ded4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    deca:	2c08      	cmp	r4, #8
    decc:	d207      	bcs.n	dede <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    dece:	f240 1195 	movw	r1, #405	; 0x195
    ded2:	e00a      	b.n	deea <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    ded4:	b108      	cbz	r0, deda <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    ded6:	2100      	movs	r1, #0
    ded8:	6001      	str	r1, [r0, #0]
    deda:	2000      	movs	r0, #0
    dedc:	bd10      	pop	{r4, pc}
    dede:	b158      	cbz	r0, def8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    dee0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    dee4:	d304      	bcc.n	def0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    dee6:	f240 11a7 	movw	r1, #423	; 0x1a7
    deea:	2015      	movs	r0, #21
    deec:	f7f6 fda6 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    def0:	b2a1      	uxth	r1, r4
    def2:	6800      	ldr	r0, [r0, #0]
    def4:	f000 f814 	bl	df20 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    def8:	1d20      	adds	r0, r4, #4
    defa:	bd10      	pop	{r4, pc}

0000defc <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    defc:	2100      	movs	r1, #0
    defe:	6802      	ldr	r2, [r0, #0]
    df00:	e003      	b.n	df0a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    df02:	8893      	ldrh	r3, [r2, #4]
    df04:	6812      	ldr	r2, [r2, #0]
    df06:	4419      	add	r1, r3
    df08:	b289      	uxth	r1, r1
    df0a:	2a00      	cmp	r2, #0
    df0c:	d1f9      	bne.n	df02 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    df0e:	f000 b807 	b.w	df20 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000df12 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    df12:	2300      	movs	r3, #0
    df14:	600b      	str	r3, [r1, #0]
    df16:	808a      	strh	r2, [r1, #4]
    df18:	6802      	ldr	r2, [r0, #0]
    df1a:	600a      	str	r2, [r1, #0]
    df1c:	6001      	str	r1, [r0, #0]
    df1e:	4770      	bx	lr
    df20:	2300      	movs	r3, #0
    df22:	6043      	str	r3, [r0, #4]
    df24:	1d02      	adds	r2, r0, #4
    df26:	8101      	strh	r1, [r0, #8]
    df28:	6002      	str	r2, [r0, #0]
    df2a:	4770      	bx	lr

0000df2c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    df2c:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    df30:	3bff      	subs	r3, #255	; 0xff
    df32:	d001      	beq.n	df38 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    df34:	2902      	cmp	r1, #2
    df36:	d301      	bcc.n	df3c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    df38:	2000      	movs	r0, #0
    df3a:	4770      	bx	lr
    df3c:	f7f7 b844 	b.w	4fc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000df40 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    df40:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    df44:	3aff      	subs	r2, #255	; 0xff
    df46:	d001      	beq.n	df4c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    df48:	2902      	cmp	r1, #2
    df4a:	d301      	bcc.n	df50 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    df4c:	2000      	movs	r0, #0
    df4e:	4770      	bx	lr
    df50:	f7f7 b874 	b.w	503c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000df54 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    df54:	b570      	push	{r4, r5, r6, lr}
    df56:	4605      	mov	r5, r0
    df58:	460c      	mov	r4, r1
    df5a:	4608      	mov	r0, r1
    df5c:	f000 f9a9 	bl	e2b2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    df60:	b108      	cbz	r0, df66 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    df62:	2010      	movs	r0, #16
    df64:	bd70      	pop	{r4, r5, r6, pc}
    df66:	2d02      	cmp	r5, #2
    df68:	d301      	bcc.n	df6e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    df6a:	2007      	movs	r0, #7
    df6c:	bd70      	pop	{r4, r5, r6, pc}
    df6e:	7025      	strb	r5, [r4, #0]
    df70:	2000      	movs	r0, #0
    df72:	8060      	strh	r0, [r4, #2]
    df74:	bd70      	pop	{r4, r5, r6, pc}
    df76:	b510      	push	{r4, lr}
    df78:	4604      	mov	r4, r0
    df7a:	f7f7 f8ab 	bl	50d4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    df7e:	42a0      	cmp	r0, r4
    df80:	d901      	bls.n	df86 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    df82:	2001      	movs	r0, #1
    df84:	bd10      	pop	{r4, pc}
    df86:	2000      	movs	r0, #0
    df88:	bd10      	pop	{r4, pc}
    df8a:	4770      	bx	lr

0000df8c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    df8c:	b570      	push	{r4, r5, r6, lr}
    df8e:	460e      	mov	r6, r1
    df90:	461d      	mov	r5, r3
    df92:	4611      	mov	r1, r2
    df94:	f000 f813 	bl	dfbe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    df98:	4604      	mov	r4, r0
    df9a:	4629      	mov	r1, r5
    df9c:	4630      	mov	r0, r6
    df9e:	f000 f804 	bl	dfaa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    dfa2:	4420      	add	r0, r4
    dfa4:	1d00      	adds	r0, r0, #4
    dfa6:	b280      	uxth	r0, r0
    dfa8:	bd70      	pop	{r4, r5, r6, pc}
    dfaa:	b510      	push	{r4, lr}
    dfac:	460a      	mov	r2, r1
    dfae:	2101      	movs	r1, #1
    dfb0:	f7ff ff11 	bl	ddd6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    dfb4:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    dfb8:	1cc0      	adds	r0, r0, #3
    dfba:	4008      	ands	r0, r1
    dfbc:	bd10      	pop	{r4, pc}
    dfbe:	b510      	push	{r4, lr}
    dfc0:	460a      	mov	r2, r1
    dfc2:	210a      	movs	r1, #10
    dfc4:	f7ff ff07 	bl	ddd6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    dfc8:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    dfcc:	1cc0      	adds	r0, r0, #3
    dfce:	4008      	ands	r0, r1
    dfd0:	bd10      	pop	{r4, pc}
    dfd2:	b109      	cbz	r1, dfd8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    dfd4:	2100      	movs	r1, #0
    dfd6:	e000      	b.n	dfda <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    dfd8:	2102      	movs	r1, #2
    dfda:	1843      	adds	r3, r0, r1
    dfdc:	7d1a      	ldrb	r2, [r3, #20]
    dfde:	2a02      	cmp	r2, #2
    dfe0:	d008      	beq.n	dff4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    dfe2:	7d5b      	ldrb	r3, [r3, #21]
    dfe4:	2b02      	cmp	r3, #2
    dfe6:	d009      	beq.n	dffc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    dfe8:	2a03      	cmp	r2, #3
    dfea:	d003      	beq.n	dff4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    dfec:	2b03      	cmp	r3, #3
    dfee:	d005      	beq.n	dffc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    dff0:	2000      	movs	r0, #0
    dff2:	4770      	bx	lr
    dff4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    dff8:	8b00      	ldrh	r0, [r0, #24]
    dffa:	4770      	bx	lr
    dffc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e000:	8b40      	ldrh	r0, [r0, #26]
    e002:	4770      	bx	lr
    e004:	b109      	cbz	r1, e00a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    e006:	2100      	movs	r1, #0
    e008:	e000      	b.n	e00c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    e00a:	2102      	movs	r1, #2
    e00c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e010:	8b01      	ldrh	r1, [r0, #24]
    e012:	b911      	cbnz	r1, e01a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    e014:	8b40      	ldrh	r0, [r0, #26]
    e016:	2800      	cmp	r0, #0
    e018:	d000      	beq.n	e01c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    e01a:	2001      	movs	r0, #1
    e01c:	4770      	bx	lr
    e01e:	b538      	push	{r3, r4, r5, lr}
    e020:	7883      	ldrb	r3, [r0, #2]
    e022:	f88d 3000 	strb.w	r3, [sp]
    e026:	9b00      	ldr	r3, [sp, #0]
    e028:	9300      	str	r3, [sp, #0]
    e02a:	f89d 3000 	ldrb.w	r3, [sp]
    e02e:	b95b      	cbnz	r3, e048 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    e030:	2400      	movs	r4, #0
    e032:	b10a      	cbz	r2, e038 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    e034:	2300      	movs	r3, #0
    e036:	e000      	b.n	e03a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    e038:	2302      	movs	r3, #2
    e03a:	18c2      	adds	r2, r0, r3
    e03c:	7d15      	ldrb	r5, [r2, #20]
    e03e:	2d02      	cmp	r5, #2
    e040:	d004      	beq.n	e04c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    e042:	7d52      	ldrb	r2, [r2, #21]
    e044:	2a02      	cmp	r2, #2
    e046:	d004      	beq.n	e052 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    e048:	2000      	movs	r0, #0
    e04a:	bd38      	pop	{r3, r4, r5, pc}
    e04c:	461a      	mov	r2, r3
    e04e:	1c5b      	adds	r3, r3, #1
    e050:	e000      	b.n	e054 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    e052:	1c5a      	adds	r2, r3, #1
    e054:	b179      	cbz	r1, e076 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    e056:	18c5      	adds	r5, r0, r3
    e058:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e05c:	752c      	strb	r4, [r5, #20]
    e05e:	831c      	strh	r4, [r3, #24]
    e060:	2303      	movs	r3, #3
    e062:	1884      	adds	r4, r0, r2
    e064:	7523      	strb	r3, [r4, #20]
    e066:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    e06a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    e06e:	685b      	ldr	r3, [r3, #4]
    e070:	600b      	str	r3, [r1, #0]
    e072:	8b00      	ldrh	r0, [r0, #24]
    e074:	8088      	strh	r0, [r1, #4]
    e076:	2001      	movs	r0, #1
    e078:	bd38      	pop	{r3, r4, r5, pc}
    e07a:	b510      	push	{r4, lr}
    e07c:	b109      	cbz	r1, e082 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    e07e:	2100      	movs	r1, #0
    e080:	e000      	b.n	e084 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    e082:	2102      	movs	r1, #2
    e084:	1843      	adds	r3, r0, r1
    e086:	7d1c      	ldrb	r4, [r3, #20]
    e088:	4294      	cmp	r4, r2
    e08a:	d103      	bne.n	e094 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    e08c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e090:	8b00      	ldrh	r0, [r0, #24]
    e092:	bd10      	pop	{r4, pc}
    e094:	7d5b      	ldrb	r3, [r3, #21]
    e096:	4293      	cmp	r3, r2
    e098:	d103      	bne.n	e0a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    e09a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e09e:	8b40      	ldrh	r0, [r0, #26]
    e0a0:	bd10      	pop	{r4, pc}
    e0a2:	2000      	movs	r0, #0
    e0a4:	bd10      	pop	{r4, pc}
    e0a6:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    e0aa:	d201      	bcs.n	e0b0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    e0ac:	0841      	lsrs	r1, r0, #1
    e0ae:	e000      	b.n	e0b2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    e0b0:	21ff      	movs	r1, #255	; 0xff
    e0b2:	1a40      	subs	r0, r0, r1
    e0b4:	f240 6172 	movw	r1, #1650	; 0x672
    e0b8:	4288      	cmp	r0, r1
    e0ba:	db00      	blt.n	e0be <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    e0bc:	4608      	mov	r0, r1
    e0be:	b280      	uxth	r0, r0
    e0c0:	4770      	bx	lr

0000e0c2 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    e0c2:	2101      	movs	r1, #1
    e0c4:	f7ff bf85 	b.w	dfd2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000e0c8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    e0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e0cc:	4606      	mov	r6, r0
    e0ce:	f342 0780 	sbfx	r7, r2, #2, #1
    e0d2:	7848      	ldrb	r0, [r1, #1]
    e0d4:	460c      	mov	r4, r1
    e0d6:	f022 0504 	bic.w	r5, r2, #4
    e0da:	1c7f      	adds	r7, r7, #1
    e0dc:	b100      	cbz	r0, e0e0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    e0de:	b90d      	cbnz	r5, e0e4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    e0e0:	4328      	orrs	r0, r5
    e0e2:	d104      	bne.n	e0ee <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    e0e4:	b145      	cbz	r5, e0f8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    e0e6:	2100      	movs	r1, #0
    e0e8:	4620      	mov	r0, r4
    e0ea:	f7f7 f8fd 	bl	52e8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    e0ee:	20ff      	movs	r0, #255	; 0xff
    e0f0:	70a0      	strb	r0, [r4, #2]
    e0f2:	b11f      	cbz	r7, e0fc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    e0f4:	2000      	movs	r0, #0
    e0f6:	e002      	b.n	e0fe <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    e0f8:	2101      	movs	r1, #1
    e0fa:	e7f5      	b.n	e0e8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    e0fc:	2002      	movs	r0, #2
    e0fe:	1821      	adds	r1, r4, r0
    e100:	7d09      	ldrb	r1, [r1, #20]
    e102:	2903      	cmp	r1, #3
    e104:	d102      	bne.n	e10c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    e106:	2d02      	cmp	r5, #2
    e108:	d000      	beq.n	e10c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    e10a:	1c40      	adds	r0, r0, #1
    e10c:	1822      	adds	r2, r4, r0
    e10e:	2101      	movs	r1, #1
    e110:	7511      	strb	r1, [r2, #20]
    e112:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    e116:	2200      	movs	r2, #0
    e118:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    e11c:	830a      	strh	r2, [r1, #24]
    e11e:	6840      	ldr	r0, [r0, #4]
    e120:	70a2      	strb	r2, [r4, #2]
    e122:	4631      	mov	r1, r6
    e124:	f362 010f 	bfi	r1, r2, #0, #16
    e128:	e9c6 0100 	strd	r0, r1, [r6]
    e12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e130 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    e130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e134:	461e      	mov	r6, r3
    e136:	4613      	mov	r3, r2
    e138:	4604      	mov	r4, r0
    e13a:	b109      	cbz	r1, e140 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    e13c:	2000      	movs	r0, #0
    e13e:	e000      	b.n	e142 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    e140:	2002      	movs	r0, #2
    e142:	21ff      	movs	r1, #255	; 0xff
    e144:	70a1      	strb	r1, [r4, #2]
    e146:	1821      	adds	r1, r4, r0
    e148:	7d0a      	ldrb	r2, [r1, #20]
    e14a:	2a01      	cmp	r2, #1
    e14c:	d003      	beq.n	e156 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    e14e:	7d49      	ldrb	r1, [r1, #21]
    e150:	2901      	cmp	r1, #1
    e152:	d10c      	bne.n	e16e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    e154:	1c40      	adds	r0, r0, #1
    e156:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    e15a:	2700      	movs	r7, #0
    e15c:	8b29      	ldrh	r1, [r5, #24]
    e15e:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    e162:	198a      	adds	r2, r1, r6
    e164:	4562      	cmp	r2, ip
    e166:	d905      	bls.n	e174 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    e168:	4420      	add	r0, r4
    e16a:	832f      	strh	r7, [r5, #24]
    e16c:	7507      	strb	r7, [r0, #20]
    e16e:	2000      	movs	r0, #0
    e170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e174:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    e178:	4632      	mov	r2, r6
    e17a:	6840      	ldr	r0, [r0, #4]
    e17c:	4408      	add	r0, r1
    e17e:	4619      	mov	r1, r3
    e180:	f7fe feac 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e184:	8b28      	ldrh	r0, [r5, #24]
    e186:	4430      	add	r0, r6
    e188:	8328      	strh	r0, [r5, #24]
    e18a:	70a7      	strb	r7, [r4, #2]
    e18c:	2001      	movs	r0, #1
    e18e:	e7ef      	b.n	e170 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000e190 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    e190:	2202      	movs	r2, #2
    e192:	2100      	movs	r1, #0
    e194:	f7ff bf71 	b.w	e07a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000e198 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    e198:	b510      	push	{r4, lr}
    e19a:	2101      	movs	r1, #1
    e19c:	f7ff ff32 	bl	e004 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    e1a0:	2800      	cmp	r0, #0
    e1a2:	d000      	beq.n	e1a6 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    e1a4:	2001      	movs	r0, #1
    e1a6:	bd10      	pop	{r4, pc}

0000e1a8 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    e1a8:	2201      	movs	r2, #1
    e1aa:	f7ff bf38 	b.w	e01e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000e1ae <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    e1ae:	2200      	movs	r2, #0
    e1b0:	f7ff bf35 	b.w	e01e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000e1b4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    e1b4:	b570      	push	{r4, r5, r6, lr}
    e1b6:	b109      	cbz	r1, e1bc <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    e1b8:	2300      	movs	r3, #0
    e1ba:	e000      	b.n	e1be <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    e1bc:	2302      	movs	r3, #2
    e1be:	21ff      	movs	r1, #255	; 0xff
    e1c0:	7081      	strb	r1, [r0, #2]
    e1c2:	18c1      	adds	r1, r0, r3
    e1c4:	2402      	movs	r4, #2
    e1c6:	7d0d      	ldrb	r5, [r1, #20]
    e1c8:	2d01      	cmp	r5, #1
    e1ca:	d007      	beq.n	e1dc <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    e1cc:	7d4d      	ldrb	r5, [r1, #21]
    e1ce:	2d01      	cmp	r5, #1
    e1d0:	d009      	beq.n	e1e6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    e1d2:	f44f 718b 	mov.w	r1, #278	; 0x116
    e1d6:	2009      	movs	r0, #9
    e1d8:	f7f6 fc30 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e1dc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e1e0:	831a      	strh	r2, [r3, #24]
    e1e2:	750c      	strb	r4, [r1, #20]
    e1e4:	e003      	b.n	e1ee <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    e1e6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e1ea:	835a      	strh	r2, [r3, #26]
    e1ec:	754c      	strb	r4, [r1, #21]
    e1ee:	2100      	movs	r1, #0
    e1f0:	7081      	strb	r1, [r0, #2]
    e1f2:	bd70      	pop	{r4, r5, r6, pc}

0000e1f4 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    e1f4:	2101      	movs	r1, #1
    e1f6:	7001      	strb	r1, [r0, #0]
    e1f8:	4770      	bx	lr

0000e1fa <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    e1fa:	2201      	movs	r2, #1
    e1fc:	4611      	mov	r1, r2
    e1fe:	f7ff bf3c 	b.w	e07a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000e202 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    e202:	2201      	movs	r2, #1
    e204:	2100      	movs	r1, #0
    e206:	f7ff bf38 	b.w	e07a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000e20a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    e20a:	2100      	movs	r1, #0
    e20c:	f7ff bee1 	b.w	dfd2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    e210:	2800      	cmp	r0, #0
    e212:	db09      	blt.n	e228 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    e214:	f000 021f 	and.w	r2, r0, #31
    e218:	2101      	movs	r1, #1
    e21a:	4091      	lsls	r1, r2
    e21c:	0940      	lsrs	r0, r0, #5
    e21e:	0080      	lsls	r0, r0, #2
    e220:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e224:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e228:	4770      	bx	lr
    e22a:	2800      	cmp	r0, #0
    e22c:	db0d      	blt.n	e24a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    e22e:	f000 021f 	and.w	r2, r0, #31
    e232:	2101      	movs	r1, #1
    e234:	4091      	lsls	r1, r2
    e236:	0940      	lsrs	r0, r0, #5
    e238:	0080      	lsls	r0, r0, #2
    e23a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e23e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    e242:	f3bf 8f4f 	dsb	sy
    e246:	f3bf 8f6f 	isb	sy
    e24a:	4770      	bx	lr
    e24c:	b510      	push	{r4, lr}
    e24e:	200e      	movs	r0, #14
    e250:	f7ff ffeb 	bl	e22a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    e254:	200e      	movs	r0, #14
    e256:	f7ff ffdb 	bl	e210 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    e25a:	200f      	movs	r0, #15
    e25c:	f7ff ffe5 	bl	e22a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    e260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e264:	200f      	movs	r0, #15
    e266:	f7ff bfd3 	b.w	e210 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    e26a:	2800      	cmp	r0, #0
    e26c:	db09      	blt.n	e282 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    e26e:	f000 021f 	and.w	r2, r0, #31
    e272:	2101      	movs	r1, #1
    e274:	4091      	lsls	r1, r2
    e276:	0940      	lsrs	r0, r0, #5
    e278:	0080      	lsls	r0, r0, #2
    e27a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e27e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e282:	4770      	bx	lr
    e284:	5840      	ldr	r0, [r0, r1]
    e286:	2800      	cmp	r0, #0
    e288:	d000      	beq.n	e28c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    e28a:	2001      	movs	r0, #1
    e28c:	4770      	bx	lr

0000e28e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    e28e:	b510      	push	{r4, lr}
    e290:	4604      	mov	r4, r0
    e292:	4620      	mov	r0, r4
    e294:	f7f7 f928 	bl	54e8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
    e298:	2811      	cmp	r0, #17
    e29a:	d0fa      	beq.n	e292 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    e29c:	bd10      	pop	{r4, pc}

0000e29e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    e29e:	b510      	push	{r4, lr}
    e2a0:	f7ff fff5 	bl	e28e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    e2a4:	2800      	cmp	r0, #0
    e2a6:	d003      	beq.n	e2b0 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    e2a8:	21a0      	movs	r1, #160	; 0xa0
    e2aa:	201d      	movs	r0, #29
    e2ac:	f7f6 fbc6 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2b0:	bd10      	pop	{r4, pc}

0000e2b2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    e2b2:	b108      	cbz	r0, e2b8 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    e2b4:	2000      	movs	r0, #0
    e2b6:	4770      	bx	lr
    e2b8:	2001      	movs	r0, #1
    e2ba:	4770      	bx	lr

0000e2bc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    e2bc:	f7f7 ba66 	b.w	578c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000e2c0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    e2c0:	f7f7 ba54 	b.w	576c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000e2c4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    e2c4:	b510      	push	{r4, lr}
    e2c6:	4050      	eors	r0, r2
    e2c8:	780a      	ldrb	r2, [r1, #0]
    e2ca:	781c      	ldrb	r4, [r3, #0]
    e2cc:	4062      	eors	r2, r4
    e2ce:	4410      	add	r0, r2
    e2d0:	784a      	ldrb	r2, [r1, #1]
    e2d2:	785c      	ldrb	r4, [r3, #1]
    e2d4:	4062      	eors	r2, r4
    e2d6:	4410      	add	r0, r2
    e2d8:	788a      	ldrb	r2, [r1, #2]
    e2da:	789c      	ldrb	r4, [r3, #2]
    e2dc:	4062      	eors	r2, r4
    e2de:	4410      	add	r0, r2
    e2e0:	78ca      	ldrb	r2, [r1, #3]
    e2e2:	78dc      	ldrb	r4, [r3, #3]
    e2e4:	4062      	eors	r2, r4
    e2e6:	4410      	add	r0, r2
    e2e8:	790a      	ldrb	r2, [r1, #4]
    e2ea:	791c      	ldrb	r4, [r3, #4]
    e2ec:	7949      	ldrb	r1, [r1, #5]
    e2ee:	4062      	eors	r2, r4
    e2f0:	4410      	add	r0, r2
    e2f2:	795a      	ldrb	r2, [r3, #5]
    e2f4:	4051      	eors	r1, r2
    e2f6:	42c1      	cmn	r1, r0
    e2f8:	d101      	bne.n	e2fe <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    e2fa:	2001      	movs	r0, #1
    e2fc:	bd10      	pop	{r4, pc}
    e2fe:	2000      	movs	r0, #0
    e300:	bd10      	pop	{r4, pc}

0000e302 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    e302:	b510      	push	{r4, lr}
    e304:	2900      	cmp	r1, #0
    e306:	4604      	mov	r4, r0
    e308:	f04f 0106 	mov.w	r1, #6
    e30c:	d002      	beq.n	e314 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    e30e:	f7f6 fc33 	bl	4b78 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e312:	e001      	b.n	e318 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    e314:	f7f6 fc3e 	bl	4b94 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e318:	7960      	ldrb	r0, [r4, #5]
    e31a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    e31e:	7160      	strb	r0, [r4, #5]
    e320:	bd10      	pop	{r4, pc}

0000e322 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    e322:	4770      	bx	lr

0000e324 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    e324:	b530      	push	{r4, r5, lr}
    e326:	460c      	mov	r4, r1
    e328:	4605      	mov	r5, r0
    e32a:	b08d      	sub	sp, #52	; 0x34
    e32c:	f04f 0103 	mov.w	r1, #3
    e330:	f104 0003 	add.w	r0, r4, #3
    e334:	b112      	cbz	r2, e33c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    e336:	f7f6 fc1f 	bl	4b78 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e33a:	e001      	b.n	e340 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    e33c:	f7f6 fc2a 	bl	4b94 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e340:	7960      	ldrb	r0, [r4, #5]
    e342:	220d      	movs	r2, #13
    e344:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    e348:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    e34c:	7160      	strb	r0, [r4, #5]
    e34e:	2100      	movs	r1, #0
    e350:	a804      	add	r0, sp, #16
    e352:	f7fe fe3d 	bl	cfd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e356:	78e0      	ldrb	r0, [r4, #3]
    e358:	f88d 001f 	strb.w	r0, [sp, #31]
    e35c:	7920      	ldrb	r0, [r4, #4]
    e35e:	f88d 001e 	strb.w	r0, [sp, #30]
    e362:	7960      	ldrb	r0, [r4, #5]
    e364:	f88d 001d 	strb.w	r0, [sp, #29]
    e368:	2210      	movs	r2, #16
    e36a:	4629      	mov	r1, r5
    e36c:	4668      	mov	r0, sp
    e36e:	f7fe fdb5 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e372:	4668      	mov	r0, sp
    e374:	f7ff ff93 	bl	e29e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e378:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    e37c:	7020      	strb	r0, [r4, #0]
    e37e:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    e382:	7060      	strb	r0, [r4, #1]
    e384:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    e388:	70a0      	strb	r0, [r4, #2]
    e38a:	b00d      	add	sp, #52	; 0x34
    e38c:	bd30      	pop	{r4, r5, pc}

0000e38e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    e38e:	f7f7 bdd9 	b.w	5f44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    e392:	07c1      	lsls	r1, r0, #31
    e394:	d001      	beq.n	e39a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    e396:	2001      	movs	r0, #1
    e398:	4770      	bx	lr
    e39a:	0780      	lsls	r0, r0, #30
    e39c:	d501      	bpl.n	e3a2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    e39e:	2002      	movs	r0, #2
    e3a0:	4770      	bx	lr
    e3a2:	2000      	movs	r0, #0
    e3a4:	4770      	bx	lr
    e3a6:	b510      	push	{r4, lr}
    e3a8:	2801      	cmp	r0, #1
    e3aa:	d008      	beq.n	e3be <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    e3ac:	2802      	cmp	r0, #2
    e3ae:	d004      	beq.n	e3ba <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    e3b0:	f240 31f3 	movw	r1, #1011	; 0x3f3
    e3b4:	2006      	movs	r0, #6
    e3b6:	f7f6 fb41 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3ba:	2001      	movs	r0, #1
    e3bc:	bd10      	pop	{r4, pc}
    e3be:	2000      	movs	r0, #0
    e3c0:	bd10      	pop	{r4, pc}
    e3c2:	2900      	cmp	r1, #0
    e3c4:	d004      	beq.n	e3d0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    e3c6:	2801      	cmp	r0, #1
    e3c8:	d003      	beq.n	e3d2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    e3ca:	2901      	cmp	r1, #1
    e3cc:	d001      	beq.n	e3d2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    e3ce:	2002      	movs	r0, #2
    e3d0:	4770      	bx	lr
    e3d2:	2001      	movs	r0, #1
    e3d4:	4770      	bx	lr
    e3d6:	f7ff bc4b 	b.w	dc70 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000e3da <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    e3da:	2101      	movs	r1, #1
    e3dc:	f7f8 b942 	b.w	6664 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000e3e0 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    e3e0:	b510      	push	{r4, lr}
    e3e2:	f002 fcb7 	bl	10d54 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    e3e6:	b118      	cbz	r0, e3f0 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    e3e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e3ec:	f7fc befa 	b.w	b1e4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    e3f0:	20ff      	movs	r0, #255	; 0xff
    e3f2:	bd10      	pop	{r4, pc}

0000e3f4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    e3f4:	b510      	push	{r4, lr}
    e3f6:	f7f8 f97d 	bl	66f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e3fa:	2810      	cmp	r0, #16
    e3fc:	d003      	beq.n	e406 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    e3fe:	f7f8 f949 	bl	6694 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    e402:	2810      	cmp	r0, #16
    e404:	d100      	bne.n	e408 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    e406:	2008      	movs	r0, #8
    e408:	bd10      	pop	{r4, pc}

0000e40a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    e40a:	b510      	push	{r4, lr}
    e40c:	f7f8 f972 	bl	66f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e410:	2810      	cmp	r0, #16
    e412:	d007      	beq.n	e424 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    e414:	f7f8 f93e 	bl	6694 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    e418:	2810      	cmp	r0, #16
    e41a:	d003      	beq.n	e424 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    e41c:	f7f8 f9c8 	bl	67b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    e420:	2001      	movs	r0, #1
    e422:	bd10      	pop	{r4, pc}
    e424:	2000      	movs	r0, #0
    e426:	bd10      	pop	{r4, pc}

0000e428 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    e428:	b510      	push	{r4, lr}
    e42a:	f7f8 f963 	bl	66f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e42e:	2810      	cmp	r0, #16
    e430:	d003      	beq.n	e43a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    e432:	f7f8 fa05 	bl	6840 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x250>
    e436:	2001      	movs	r0, #1
    e438:	bd10      	pop	{r4, pc}
    e43a:	2000      	movs	r0, #0
    e43c:	bd10      	pop	{r4, pc}

0000e43e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    e43e:	b570      	push	{r4, r5, r6, lr}
    e440:	460e      	mov	r6, r1
    e442:	b08c      	sub	sp, #48	; 0x30
    e444:	4614      	mov	r4, r2
    e446:	4601      	mov	r1, r0
    e448:	461d      	mov	r5, r3
    e44a:	2210      	movs	r2, #16
    e44c:	4668      	mov	r0, sp
    e44e:	f000 f928 	bl	e6a2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e452:	2210      	movs	r2, #16
    e454:	4631      	mov	r1, r6
    e456:	a804      	add	r0, sp, #16
    e458:	f000 f923 	bl	e6a2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e45c:	4668      	mov	r0, sp
    e45e:	f7ff ff1e 	bl	e29e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e462:	a908      	add	r1, sp, #32
    e464:	f04f 0210 	mov.w	r2, #16
    e468:	4628      	mov	r0, r5
    e46a:	b11c      	cbz	r4, e474 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    e46c:	f000 f919 	bl	e6a2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e470:	b00c      	add	sp, #48	; 0x30
    e472:	bd70      	pop	{r4, r5, r6, pc}
    e474:	f7fe fd32 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e478:	e7fa      	b.n	e470 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000e47a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    e47a:	b510      	push	{r4, lr}
    e47c:	460c      	mov	r4, r1
    e47e:	2100      	movs	r1, #0
    e480:	f7ff fd5e 	bl	df40 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e484:	6060      	str	r0, [r4, #4]
    e486:	b118      	cbz	r0, e490 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    e488:	2001      	movs	r0, #1
    e48a:	7020      	strb	r0, [r4, #0]
    e48c:	2000      	movs	r0, #0
    e48e:	bd10      	pop	{r4, pc}
    e490:	2002      	movs	r0, #2
    e492:	bd10      	pop	{r4, pc}

0000e494 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    e494:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e498:	4348      	muls	r0, r1
    e49a:	4770      	bx	lr

0000e49c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    e49c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e4a0:	fbb0 f0f1 	udiv	r0, r0, r1
    e4a4:	b280      	uxth	r0, r0
    e4a6:	4770      	bx	lr

0000e4a8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    e4a8:	b570      	push	{r4, r5, r6, lr}
    e4aa:	4604      	mov	r4, r0
    e4ac:	4290      	cmp	r0, r2
    e4ae:	d20b      	bcs.n	e4c8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    e4b0:	1b10      	subs	r0, r2, r4
    e4b2:	2865      	cmp	r0, #101	; 0x65
    e4b4:	d200      	bcs.n	e4b8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    e4b6:	2065      	movs	r0, #101	; 0x65
    e4b8:	1825      	adds	r5, r4, r0
    e4ba:	428d      	cmp	r5, r1
    e4bc:	d803      	bhi.n	e4c6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    e4be:	2103      	movs	r1, #3
    e4c0:	f7f3 fd36 	bl	1f30 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    e4c4:	b108      	cbz	r0, e4ca <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    e4c6:	4620      	mov	r0, r4
    e4c8:	bd70      	pop	{r4, r5, r6, pc}
    e4ca:	4628      	mov	r0, r5
    e4cc:	bd70      	pop	{r4, r5, r6, pc}

0000e4ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    e4ce:	b510      	push	{r4, lr}
    e4d0:	f1a2 030f 	sub.w	r3, r2, #15
    e4d4:	290c      	cmp	r1, #12
    e4d6:	d244      	bcs.n	e562 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e4d8:	e8df f001 	tbb	[pc, r1]
    e4dc:	120d0806 	.word	0x120d0806
    e4e0:	241c1815 	.word	0x241c1815
    e4e4:	312a4127 	.word	0x312a4127
    e4e8:	b3c2      	cbz	r2, e55c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    e4ea:	e03a      	b.n	e562 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e4ec:	2a07      	cmp	r2, #7
    e4ee:	d03a      	beq.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e4f0:	2a08      	cmp	r2, #8
    e4f2:	d038      	beq.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e4f4:	e035      	b.n	e562 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e4f6:	2a0c      	cmp	r2, #12
    e4f8:	d035      	beq.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e4fa:	2a0b      	cmp	r2, #11
    e4fc:	d033      	beq.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e4fe:	e030      	b.n	e562 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e500:	2a0d      	cmp	r2, #13
    e502:	d030      	beq.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e504:	e02d      	b.n	e562 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e506:	2b0c      	cmp	r3, #12
    e508:	d92d      	bls.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e50a:	e02a      	b.n	e562 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e50c:	3a10      	subs	r2, #16
    e50e:	2a0b      	cmp	r2, #11
    e510:	d929      	bls.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e512:	e026      	b.n	e562 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e514:	2b03      	cmp	r3, #3
    e516:	d926      	bls.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e518:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
    e51c:	b308      	cbz	r0, e562 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e51e:	2a1b      	cmp	r2, #27
    e520:	d921      	bls.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e522:	e01e      	b.n	e562 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e524:	2a04      	cmp	r2, #4
    e526:	d01e      	beq.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e528:	e01b      	b.n	e562 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e52a:	2a06      	cmp	r2, #6
    e52c:	d01b      	beq.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e52e:	e018      	b.n	e562 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e530:	2a1c      	cmp	r2, #28
    e532:	d018      	beq.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e534:	2a1d      	cmp	r2, #29
    e536:	d016      	beq.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e538:	2a1e      	cmp	r2, #30
    e53a:	d014      	beq.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e53c:	e011      	b.n	e562 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e53e:	2a1f      	cmp	r2, #31
    e540:	d011      	beq.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e542:	2a20      	cmp	r2, #32
    e544:	d00f      	beq.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e546:	2a21      	cmp	r2, #33	; 0x21
    e548:	d00d      	beq.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e54a:	2a22      	cmp	r2, #34	; 0x22
    e54c:	d00b      	beq.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e54e:	2a23      	cmp	r2, #35	; 0x23
    e550:	d009      	beq.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e552:	2a24      	cmp	r2, #36	; 0x24
    e554:	d007      	beq.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e556:	2a27      	cmp	r2, #39	; 0x27
    e558:	d005      	beq.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e55a:	e002      	b.n	e562 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e55c:	e003      	b.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e55e:	2a0e      	cmp	r2, #14
    e560:	d001      	beq.n	e566 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e562:	2000      	movs	r0, #0
    e564:	bd10      	pop	{r4, pc}
    e566:	2001      	movs	r0, #1
    e568:	bd10      	pop	{r4, pc}

0000e56a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    e56a:	280c      	cmp	r0, #12
    e56c:	d013      	beq.n	e596 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e56e:	280b      	cmp	r0, #11
    e570:	d011      	beq.n	e596 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e572:	280d      	cmp	r0, #13
    e574:	d00f      	beq.n	e596 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e576:	281f      	cmp	r0, #31
    e578:	d00d      	beq.n	e596 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e57a:	2820      	cmp	r0, #32
    e57c:	d00b      	beq.n	e596 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e57e:	2821      	cmp	r0, #33	; 0x21
    e580:	d009      	beq.n	e596 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e582:	2822      	cmp	r0, #34	; 0x22
    e584:	d007      	beq.n	e596 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e586:	2823      	cmp	r0, #35	; 0x23
    e588:	d005      	beq.n	e596 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e58a:	2824      	cmp	r0, #36	; 0x24
    e58c:	d003      	beq.n	e596 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e58e:	2827      	cmp	r0, #39	; 0x27
    e590:	d001      	beq.n	e596 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e592:	2000      	movs	r0, #0
    e594:	4770      	bx	lr
    e596:	2001      	movs	r0, #1
    e598:	4770      	bx	lr

0000e59a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    e59a:	f011 0f0c 	tst.w	r1, #12
    e59e:	d018      	beq.n	e5d2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    e5a0:	074a      	lsls	r2, r1, #29
    e5a2:	f44f 7116 	mov.w	r1, #600	; 0x258
    e5a6:	2a00      	cmp	r2, #0
    e5a8:	da02      	bge.n	e5b0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    e5aa:	f04f 0210 	mov.w	r2, #16
    e5ae:	e001      	b.n	e5b4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    e5b0:	f04f 0240 	mov.w	r2, #64	; 0x40
    e5b4:	da01      	bge.n	e5ba <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    e5b6:	f04f 0196 	mov.w	r1, #150	; 0x96
    e5ba:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    e5be:	eba0 0301 	sub.w	r3, r0, r1
    e5c2:	4288      	cmp	r0, r1
    e5c4:	d903      	bls.n	e5ce <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e5c6:	fb93 f0f2 	sdiv	r0, r3, r2
    e5ca:	b280      	uxth	r0, r0
    e5cc:	4770      	bx	lr
    e5ce:	2000      	movs	r0, #0
    e5d0:	4770      	bx	lr
    e5d2:	2902      	cmp	r1, #2
    e5d4:	d008      	beq.n	e5e8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    e5d6:	2870      	cmp	r0, #112	; 0x70
    e5d8:	d9f9      	bls.n	e5ce <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e5da:	3870      	subs	r0, #112	; 0x70
    e5dc:	17c1      	asrs	r1, r0, #31
    e5de:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    e5e2:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    e5e6:	4770      	bx	lr
    e5e8:	283c      	cmp	r0, #60	; 0x3c
    e5ea:	d9f0      	bls.n	e5ce <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e5ec:	383c      	subs	r0, #60	; 0x3c
    e5ee:	17c1      	asrs	r1, r0, #31
    e5f0:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    e5f4:	f3c0 008f 	ubfx	r0, r0, #2, #16
    e5f8:	4770      	bx	lr

0000e5fa <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    e5fa:	6809      	ldr	r1, [r1, #0]
    e5fc:	f8c0 106a 	str.w	r1, [r0, #106]	; 0x6a
    e600:	4770      	bx	lr

0000e602 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    e602:	07c1      	lsls	r1, r0, #31
    e604:	d001      	beq.n	e60a <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    e606:	2001      	movs	r0, #1
    e608:	4770      	bx	lr
    e60a:	0781      	lsls	r1, r0, #30
    e60c:	d501      	bpl.n	e612 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    e60e:	2002      	movs	r0, #2
    e610:	4770      	bx	lr
    e612:	0740      	lsls	r0, r0, #29
    e614:	d501      	bpl.n	e61a <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    e616:	2008      	movs	r0, #8
    e618:	4770      	bx	lr
    e61a:	2000      	movs	r0, #0
    e61c:	4770      	bx	lr

0000e61e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    e61e:	b510      	push	{r4, lr}
    e620:	f640 12c4 	movw	r2, #2500	; 0x9c4
    e624:	2901      	cmp	r1, #1
    e626:	d006      	beq.n	e636 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    e628:	2902      	cmp	r1, #2
    e62a:	d005      	beq.n	e638 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    e62c:	f240 31ba 	movw	r1, #954	; 0x3ba
    e630:	2029      	movs	r0, #41	; 0x29
    e632:	f7f6 fa03 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e636:	b108      	cbz	r0, e63c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    e638:	4610      	mov	r0, r2
    e63a:	bd10      	pop	{r4, pc}
    e63c:	f240 40e2 	movw	r0, #1250	; 0x4e2
    e640:	bd10      	pop	{r4, pc}

0000e642 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    e642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e646:	4607      	mov	r7, r0
    e648:	460e      	mov	r6, r1
    e64a:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    e64e:	f7f4 f845 	bl	26dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    e652:	b198      	cbz	r0, e67c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    e654:	b31e      	cbz	r6, e69e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    e656:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    e65a:	1b40      	subs	r0, r0, r5
    e65c:	2300      	movs	r3, #0
    e65e:	eb61 0104 	sbc.w	r1, r1, r4
    e662:	461a      	mov	r2, r3
    e664:	1a1b      	subs	r3, r3, r0
    e666:	418a      	sbcs	r2, r1
    e668:	da19      	bge.n	e69e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    e66a:	1c42      	adds	r2, r0, #1
    e66c:	f171 0100 	sbcs.w	r1, r1, #0
    e670:	db07      	blt.n	e682 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    e672:	f240 2136 	movw	r1, #566	; 0x236
    e676:	2029      	movs	r0, #41	; 0x29
    e678:	f7f6 f9e0 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e67c:	f44f 710b 	mov.w	r1, #556	; 0x22c
    e680:	e7f9      	b.n	e676 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    e682:	4430      	add	r0, r6
    e684:	1e40      	subs	r0, r0, #1
    e686:	fbb0 f1f6 	udiv	r1, r0, r6
    e68a:	fb01 f006 	mul.w	r0, r1, r6
    e68e:	1828      	adds	r0, r5, r0
    e690:	f144 0400 	adc.w	r4, r4, #0
    e694:	e9c7 0404 	strd	r0, r4, [r7, #16]
    e698:	4608      	mov	r0, r1
    e69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e69e:	2000      	movs	r0, #0
    e6a0:	e7fb      	b.n	e69a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000e6a2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    e6a2:	b530      	push	{r4, r5, lr}
    e6a4:	4613      	mov	r3, r2
    e6a6:	e006      	b.n	e6b6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    e6a8:	18cc      	adds	r4, r1, r3
    e6aa:	1ad5      	subs	r5, r2, r3
    e6ac:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    e6b0:	1e5b      	subs	r3, r3, #1
    e6b2:	5544      	strb	r4, [r0, r5]
    e6b4:	b2db      	uxtb	r3, r3
    e6b6:	2b00      	cmp	r3, #0
    e6b8:	d1f6      	bne.n	e6a8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    e6ba:	bd30      	pop	{r4, r5, pc}

0000e6bc <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    e6bc:	b538      	push	{r3, r4, r5, lr}
    e6be:	4605      	mov	r5, r0
    e6c0:	460c      	mov	r4, r1
    e6c2:	4668      	mov	r0, sp
    e6c4:	f7fd fa5e 	bl	bb84 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e6c8:	b310      	cbz	r0, e710 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    e6ca:	f99d 0000 	ldrsb.w	r0, [sp]
    e6ce:	7260      	strb	r0, [r4, #9]
    e6d0:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    e6d4:	72a1      	strb	r1, [r4, #10]
    e6d6:	f994 100b 	ldrsb.w	r1, [r4, #11]
    e6da:	2200      	movs	r2, #0
    e6dc:	1a41      	subs	r1, r0, r1
    e6de:	d500      	bpl.n	e6e2 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    e6e0:	4249      	negs	r1, r1
    e6e2:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    e6e6:	428b      	cmp	r3, r1
    e6e8:	dc10      	bgt.n	e70c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e6ea:	2bff      	cmp	r3, #255	; 0xff
    e6ec:	d00e      	beq.n	e70c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e6ee:	7b21      	ldrb	r1, [r4, #12]
    e6f0:	1c49      	adds	r1, r1, #1
    e6f2:	b2c9      	uxtb	r1, r1
    e6f4:	7321      	strb	r1, [r4, #12]
    e6f6:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    e6fa:	4299      	cmp	r1, r3
    e6fc:	d802      	bhi.n	e704 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    e6fe:	7ae1      	ldrb	r1, [r4, #11]
    e700:	297f      	cmp	r1, #127	; 0x7f
    e702:	d103      	bne.n	e70c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e704:	72e0      	strb	r0, [r4, #11]
    e706:	2000      	movs	r0, #0
    e708:	7320      	strb	r0, [r4, #12]
    e70a:	2201      	movs	r2, #1
    e70c:	4610      	mov	r0, r2
    e70e:	bd38      	pop	{r3, r4, r5, pc}
    e710:	207f      	movs	r0, #127	; 0x7f
    e712:	7260      	strb	r0, [r4, #9]
    e714:	2000      	movs	r0, #0
    e716:	bd38      	pop	{r3, r4, r5, pc}

0000e718 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    e718:	2300      	movs	r3, #0
    e71a:	6303      	str	r3, [r0, #48]	; 0x30
    e71c:	8702      	strh	r2, [r0, #56]	; 0x38
    e71e:	f240 2371 	movw	r3, #625	; 0x271
    e722:	435a      	muls	r2, r3
    e724:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    e728:	1e52      	subs	r2, r2, #1
    e72a:	fbb2 f1f1 	udiv	r1, r2, r1
    e72e:	6341      	str	r1, [r0, #52]	; 0x34
    e730:	4770      	bx	lr

0000e732 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    e732:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e736:	4607      	mov	r7, r0
    e738:	4690      	mov	r8, r2
    e73a:	468b      	mov	fp, r1
    e73c:	2601      	movs	r6, #1
    e73e:	4608      	mov	r0, r1
    e740:	f000 f94a 	bl	e9d8 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    e744:	4682      	mov	sl, r0
    e746:	4658      	mov	r0, fp
    e748:	f000 f952 	bl	e9f0 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    e74c:	4681      	mov	r9, r0
    e74e:	f7ff ff58 	bl	e602 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    e752:	4604      	mov	r4, r0
    e754:	4650      	mov	r0, sl
    e756:	f7ff ff54 	bl	e602 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    e75a:	4605      	mov	r5, r0
    e75c:	ea54 0005 	orrs.w	r0, r4, r5
    e760:	d100      	bne.n	e764 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    e762:	2600      	movs	r6, #0
    e764:	f7fc fcc0 	bl	b0e8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    e768:	ea10 0f09 	tst.w	r0, r9
    e76c:	d100      	bne.n	e770 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    e76e:	2400      	movs	r4, #0
    e770:	f7fc fcba 	bl	b0e8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    e774:	ea10 0f0a 	tst.w	r0, sl
    e778:	d100      	bne.n	e77c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    e77a:	2500      	movs	r5, #0
    e77c:	f897 006e 	ldrb.w	r0, [r7, #110]	; 0x6e
    e780:	42a0      	cmp	r0, r4
    e782:	d100      	bne.n	e786 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    e784:	2400      	movs	r4, #0
    e786:	f888 4000 	strb.w	r4, [r8]
    e78a:	f897 006f 	ldrb.w	r0, [r7, #111]	; 0x6f
    e78e:	42a8      	cmp	r0, r5
    e790:	d100      	bne.n	e794 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    e792:	2500      	movs	r5, #0
    e794:	f888 5001 	strb.w	r5, [r8, #1]
    e798:	b974      	cbnz	r4, e7b8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e79a:	b96d      	cbnz	r5, e7b8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e79c:	4658      	mov	r0, fp
    e79e:	f000 f925 	bl	e9ec <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    e7a2:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
    e7a6:	1a40      	subs	r0, r0, r1
    e7a8:	b200      	sxth	r0, r0
    e7aa:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    e7ae:	4288      	cmp	r0, r1
    e7b0:	dc01      	bgt.n	e7b6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    e7b2:	2800      	cmp	r0, #0
    e7b4:	dc00      	bgt.n	e7b8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e7b6:	2600      	movs	r6, #0
    e7b8:	4630      	mov	r0, r6
    e7ba:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000e7be <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    e7be:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e7c2:	4348      	muls	r0, r1
    e7c4:	4770      	bx	lr

0000e7c6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    e7c6:	f240 2171 	movw	r1, #625	; 0x271
    e7ca:	fb10 f001 	smulbb	r0, r0, r1
    e7ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e7d2:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    e7d6:	4770      	bx	lr

0000e7d8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    e7d8:	b510      	push	{r4, lr}
    e7da:	2300      	movs	r3, #0
    e7dc:	461a      	mov	r2, r3
    e7de:	e003      	b.n	e7e8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    e7e0:	5c84      	ldrb	r4, [r0, r2]
    e7e2:	4323      	orrs	r3, r4
    e7e4:	1c52      	adds	r2, r2, #1
    e7e6:	b2d2      	uxtb	r2, r2
    e7e8:	428a      	cmp	r2, r1
    e7ea:	d3f9      	bcc.n	e7e0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    e7ec:	b10b      	cbz	r3, e7f2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    e7ee:	2000      	movs	r0, #0
    e7f0:	bd10      	pop	{r4, pc}
    e7f2:	2001      	movs	r0, #1
    e7f4:	bd10      	pop	{r4, pc}

0000e7f6 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    e7f6:	b510      	push	{r4, lr}
    e7f8:	4604      	mov	r4, r0
    e7fa:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    e7fe:	b108      	cbz	r0, e804 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    e800:	2825      	cmp	r0, #37	; 0x25
    e802:	d901      	bls.n	e808 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    e804:	2012      	movs	r0, #18
    e806:	bd10      	pop	{r4, pc}
    e808:	b12a      	cbz	r2, e816 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    e80a:	7da0      	ldrb	r0, [r4, #22]
    e80c:	b128      	cbz	r0, e81a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    e80e:	2801      	cmp	r0, #1
    e810:	d009      	beq.n	e826 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    e812:	201f      	movs	r0, #31
    e814:	bd10      	pop	{r4, pc}
    e816:	2000      	movs	r0, #0
    e818:	bd10      	pop	{r4, pc}
    e81a:	4620      	mov	r0, r4
    e81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e820:	4611      	mov	r1, r2
    e822:	f7f8 b903 	b.w	6a2c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    e826:	88a2      	ldrh	r2, [r4, #4]
    e828:	6949      	ldr	r1, [r1, #20]
    e82a:	f104 0016 	add.w	r0, r4, #22
    e82e:	f7f8 f8a9 	bl	6984 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    e832:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    e836:	e7ee      	b.n	e816 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000e838 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    e838:	b530      	push	{r4, r5, lr}
    e83a:	1c42      	adds	r2, r0, #1
    e83c:	428a      	cmp	r2, r1
    e83e:	d004      	beq.n	e84a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    e840:	680a      	ldr	r2, [r1, #0]
    e842:	f8c0 2001 	str.w	r2, [r0, #1]
    e846:	7909      	ldrb	r1, [r1, #4]
    e848:	7141      	strb	r1, [r0, #5]
    e84a:	7941      	ldrb	r1, [r0, #5]
    e84c:	f001 011f 	and.w	r1, r1, #31
    e850:	7141      	strb	r1, [r0, #5]
    e852:	2100      	movs	r1, #0
    e854:	72c1      	strb	r1, [r0, #11]
    e856:	1843      	adds	r3, r0, r1
    e858:	1c49      	adds	r1, r1, #1
    e85a:	785c      	ldrb	r4, [r3, #1]
    e85c:	b2c9      	uxtb	r1, r1
    e85e:	f004 0201 	and.w	r2, r4, #1
    e862:	0864      	lsrs	r4, r4, #1
    e864:	f004 0501 	and.w	r5, r4, #1
    e868:	4415      	add	r5, r2
    e86a:	0862      	lsrs	r2, r4, #1
    e86c:	f002 0401 	and.w	r4, r2, #1
    e870:	442c      	add	r4, r5
    e872:	0852      	lsrs	r2, r2, #1
    e874:	f002 0501 	and.w	r5, r2, #1
    e878:	442c      	add	r4, r5
    e87a:	0852      	lsrs	r2, r2, #1
    e87c:	f002 0501 	and.w	r5, r2, #1
    e880:	442c      	add	r4, r5
    e882:	0852      	lsrs	r2, r2, #1
    e884:	f002 0501 	and.w	r5, r2, #1
    e888:	442c      	add	r4, r5
    e88a:	0852      	lsrs	r2, r2, #1
    e88c:	f002 0501 	and.w	r5, r2, #1
    e890:	442c      	add	r4, r5
    e892:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    e896:	719a      	strb	r2, [r3, #6]
    e898:	7ac3      	ldrb	r3, [r0, #11]
    e89a:	2905      	cmp	r1, #5
    e89c:	441a      	add	r2, r3
    e89e:	72c2      	strb	r2, [r0, #11]
    e8a0:	d3d9      	bcc.n	e856 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    e8a2:	bd30      	pop	{r4, r5, pc}
    e8a4:	b570      	push	{r4, r5, r6, lr}
    e8a6:	f8d0 201f 	ldr.w	r2, [r0, #31]
    e8aa:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    e8ae:	f012 0fff 	tst.w	r2, #255	; 0xff
    e8b2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    e8b6:	d108      	bne.n	e8ca <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e8b8:	f3c2 2407 	ubfx	r4, r2, #8, #8
    e8bc:	b92c      	cbnz	r4, e8ca <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e8be:	f3c2 4407 	ubfx	r4, r2, #16, #8
    e8c2:	b914      	cbnz	r4, e8ca <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e8c4:	0e12      	lsrs	r2, r2, #24
    e8c6:	d100      	bne.n	e8ca <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e8c8:	b35b      	cbz	r3, e922 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e8ca:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    e8ce:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    e8d2:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    e8d6:	7d83      	ldrb	r3, [r0, #22]
    e8d8:	b141      	cbz	r1, e8ec <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    e8da:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e8de:	d905      	bls.n	e8ec <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    e8e0:	f640 5107 	movw	r1, #3335	; 0xd07
    e8e4:	428a      	cmp	r2, r1
    e8e6:	d801      	bhi.n	e8ec <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    e8e8:	2101      	movs	r1, #1
    e8ea:	e000      	b.n	e8ee <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    e8ec:	2100      	movs	r1, #0
    e8ee:	7846      	ldrb	r6, [r0, #1]
    e8f0:	2e22      	cmp	r6, #34	; 0x22
    e8f2:	d116      	bne.n	e922 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e8f4:	b959      	cbnz	r1, e90e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
    e8f6:	1f91      	subs	r1, r2, #6
    e8f8:	f640 467a 	movw	r6, #3194	; 0xc7a
    e8fc:	42b1      	cmp	r1, r6
    e8fe:	d810      	bhi.n	e922 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e900:	b17b      	cbz	r3, e922 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e902:	2b08      	cmp	r3, #8
    e904:	d80d      	bhi.n	e922 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e906:	4293      	cmp	r3, r2
    e908:	d20b      	bcs.n	e922 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e90a:	4294      	cmp	r4, r2
    e90c:	d809      	bhi.n	e922 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e90e:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    e912:	d206      	bcs.n	e922 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e914:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    e918:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    e91c:	d801      	bhi.n	e922 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e91e:	2001      	movs	r0, #1
    e920:	bd70      	pop	{r4, r5, r6, pc}
    e922:	2000      	movs	r0, #0
    e924:	bd70      	pop	{r4, r5, r6, pc}

0000e926 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    e926:	b570      	push	{r4, r5, r6, lr}
    e928:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    e92c:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    e930:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    e934:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    e938:	88c0      	ldrh	r0, [r0, #6]
    e93a:	b131      	cbz	r1, e94a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    e93c:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e940:	d903      	bls.n	e94a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    e942:	f640 5107 	movw	r1, #3335	; 0xd07
    e946:	428a      	cmp	r2, r1
    e948:	d90b      	bls.n	e962 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    e94a:	1f91      	subs	r1, r2, #6
    e94c:	f640 467a 	movw	r6, #3194	; 0xc7a
    e950:	42b1      	cmp	r1, r6
    e952:	d80e      	bhi.n	e972 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e954:	b16b      	cbz	r3, e972 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e956:	2b08      	cmp	r3, #8
    e958:	d80b      	bhi.n	e972 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e95a:	4293      	cmp	r3, r2
    e95c:	d209      	bcs.n	e972 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e95e:	4294      	cmp	r4, r2
    e960:	d807      	bhi.n	e972 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e962:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    e966:	d204      	bcs.n	e972 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e968:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    e96c:	d801      	bhi.n	e972 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e96e:	2001      	movs	r0, #1
    e970:	bd70      	pop	{r4, r5, r6, pc}
    e972:	2000      	movs	r0, #0
    e974:	bd70      	pop	{r4, r5, r6, pc}

0000e976 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    e976:	6842      	ldr	r2, [r0, #4]
    e978:	600a      	str	r2, [r1, #0]
    e97a:	7a00      	ldrb	r0, [r0, #8]
    e97c:	7108      	strb	r0, [r1, #4]
    e97e:	4770      	bx	lr

0000e980 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    e980:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e984:	4770      	bx	lr

0000e986 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    e986:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    e98a:	4770      	bx	lr

0000e98c <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    e98c:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e990:	4770      	bx	lr

0000e992 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    e992:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    e996:	4770      	bx	lr

0000e998 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    e998:	8980      	ldrh	r0, [r0, #12]
    e99a:	8008      	strh	r0, [r1, #0]
    e99c:	4770      	bx	lr

0000e99e <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    e99e:	f8d0 0016 	ldr.w	r0, [r0, #22]
    e9a2:	6008      	str	r0, [r1, #0]
    e9a4:	4770      	bx	lr

0000e9a6 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    e9a6:	6842      	ldr	r2, [r0, #4]
    e9a8:	600a      	str	r2, [r1, #0]
    e9aa:	6880      	ldr	r0, [r0, #8]
    e9ac:	6048      	str	r0, [r1, #4]
    e9ae:	4770      	bx	lr

0000e9b0 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    e9b0:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    e9b4:	600a      	str	r2, [r1, #0]
    e9b6:	6840      	ldr	r0, [r0, #4]
    e9b8:	6048      	str	r0, [r1, #4]
    e9ba:	4770      	bx	lr

0000e9bc <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    e9bc:	6842      	ldr	r2, [r0, #4]
    e9be:	600a      	str	r2, [r1, #0]
    e9c0:	6880      	ldr	r0, [r0, #8]
    e9c2:	6048      	str	r0, [r1, #4]
    e9c4:	4770      	bx	lr

0000e9c6 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    e9c6:	6842      	ldr	r2, [r0, #4]
    e9c8:	600a      	str	r2, [r1, #0]
    e9ca:	6880      	ldr	r0, [r0, #8]
    e9cc:	6048      	str	r0, [r1, #4]
    e9ce:	4770      	bx	lr

0000e9d0 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    e9d0:	7800      	ldrb	r0, [r0, #0]
    e9d2:	f000 0003 	and.w	r0, r0, #3
    e9d6:	4770      	bx	lr

0000e9d8 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    e9d8:	7900      	ldrb	r0, [r0, #4]
    e9da:	4770      	bx	lr

0000e9dc <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    e9dc:	8880      	ldrh	r0, [r0, #4]
    e9de:	4770      	bx	lr

0000e9e0 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    e9e0:	88c0      	ldrh	r0, [r0, #6]
    e9e2:	4770      	bx	lr

0000e9e4 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    e9e4:	8900      	ldrh	r0, [r0, #8]
    e9e6:	4770      	bx	lr

0000e9e8 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    e9e8:	8940      	ldrh	r0, [r0, #10]
    e9ea:	4770      	bx	lr

0000e9ec <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    e9ec:	88c0      	ldrh	r0, [r0, #6]
    e9ee:	4770      	bx	lr

0000e9f0 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    e9f0:	7940      	ldrb	r0, [r0, #5]
    e9f2:	4770      	bx	lr

0000e9f4 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    e9f4:	7900      	ldrb	r0, [r0, #4]
    e9f6:	4770      	bx	lr

0000e9f8 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    e9f8:	7900      	ldrb	r0, [r0, #4]
    e9fa:	4770      	bx	lr

0000e9fc <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    e9fc:	8901      	ldrh	r1, [r0, #8]
    e9fe:	291b      	cmp	r1, #27
    ea00:	d30c      	bcc.n	ea1c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ea02:	8941      	ldrh	r1, [r0, #10]
    ea04:	f44f 72a4 	mov.w	r2, #328	; 0x148
    ea08:	4291      	cmp	r1, r2
    ea0a:	d307      	bcc.n	ea1c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ea0c:	8881      	ldrh	r1, [r0, #4]
    ea0e:	291b      	cmp	r1, #27
    ea10:	d304      	bcc.n	ea1c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ea12:	88c0      	ldrh	r0, [r0, #6]
    ea14:	4290      	cmp	r0, r2
    ea16:	d301      	bcc.n	ea1c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ea18:	2001      	movs	r0, #1
    ea1a:	4770      	bx	lr
    ea1c:	2000      	movs	r0, #0
    ea1e:	4770      	bx	lr

0000ea20 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    ea20:	b510      	push	{r4, lr}
    ea22:	29fb      	cmp	r1, #251	; 0xfb
    ea24:	d904      	bls.n	ea30 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    ea26:	f240 51fe 	movw	r1, #1534	; 0x5fe
    ea2a:	202a      	movs	r0, #42	; 0x2a
    ea2c:	f7f6 f806 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea30:	7041      	strb	r1, [r0, #1]
    ea32:	bd10      	pop	{r4, pc}

0000ea34 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    ea34:	7901      	ldrb	r1, [r0, #4]
    ea36:	0749      	lsls	r1, r1, #29
    ea38:	d004      	beq.n	ea44 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    ea3a:	7940      	ldrb	r0, [r0, #5]
    ea3c:	0740      	lsls	r0, r0, #29
    ea3e:	d001      	beq.n	ea44 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    ea40:	2001      	movs	r0, #1
    ea42:	4770      	bx	lr
    ea44:	2000      	movs	r0, #0
    ea46:	4770      	bx	lr

0000ea48 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    ea48:	7901      	ldrb	r1, [r0, #4]
    ea4a:	7940      	ldrb	r0, [r0, #5]
    ea4c:	f001 0107 	and.w	r1, r1, #7
    ea50:	1e4a      	subs	r2, r1, #1
    ea52:	f000 0007 	and.w	r0, r0, #7
    ea56:	4011      	ands	r1, r2
    ea58:	1e42      	subs	r2, r0, #1
    ea5a:	4010      	ands	r0, r2
    ea5c:	4301      	orrs	r1, r0
    ea5e:	d001      	beq.n	ea64 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x1c>
    ea60:	2000      	movs	r0, #0
    ea62:	4770      	bx	lr
    ea64:	2001      	movs	r0, #1
    ea66:	4770      	bx	lr

0000ea68 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    ea68:	7900      	ldrb	r0, [r0, #4]
    ea6a:	4770      	bx	lr

0000ea6c <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    ea6c:	7940      	ldrb	r0, [r0, #5]
    ea6e:	4770      	bx	lr

0000ea70 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    ea70:	7101      	strb	r1, [r0, #4]
    ea72:	4770      	bx	lr

0000ea74 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    ea74:	7141      	strb	r1, [r0, #5]
    ea76:	4770      	bx	lr

0000ea78 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    ea78:	b510      	push	{r4, lr}
    ea7a:	2a1b      	cmp	r2, #27
    ea7c:	d904      	bls.n	ea88 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    ea7e:	f240 4127 	movw	r1, #1063	; 0x427
    ea82:	202a      	movs	r0, #42	; 0x2a
    ea84:	f7f5 ffda 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea88:	7042      	strb	r2, [r0, #1]
    ea8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea8e:	1cc0      	adds	r0, r0, #3
    ea90:	f7fe ba24 	b.w	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000ea94 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    ea94:	6809      	ldr	r1, [r1, #0]
    ea96:	60c1      	str	r1, [r0, #12]
    ea98:	4770      	bx	lr

0000ea9a <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    ea9a:	680a      	ldr	r2, [r1, #0]
    ea9c:	6042      	str	r2, [r0, #4]
    ea9e:	6849      	ldr	r1, [r1, #4]
    eaa0:	6081      	str	r1, [r0, #8]
    eaa2:	4770      	bx	lr

0000eaa4 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    eaa4:	680a      	ldr	r2, [r1, #0]
    eaa6:	6042      	str	r2, [r0, #4]
    eaa8:	6849      	ldr	r1, [r1, #4]
    eaaa:	6081      	str	r1, [r0, #8]
    eaac:	4770      	bx	lr

0000eaae <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    eaae:	680a      	ldr	r2, [r1, #0]
    eab0:	6042      	str	r2, [r0, #4]
    eab2:	6849      	ldr	r1, [r1, #4]
    eab4:	6081      	str	r1, [r0, #8]
    eab6:	4770      	bx	lr

0000eab8 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    eab8:	7802      	ldrb	r2, [r0, #0]
    eaba:	f001 0103 	and.w	r1, r1, #3
    eabe:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    eac2:	430a      	orrs	r2, r1
    eac4:	7002      	strb	r2, [r0, #0]
    eac6:	4770      	bx	lr

0000eac8 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    eac8:	7101      	strb	r1, [r0, #4]
    eaca:	0a09      	lsrs	r1, r1, #8
    eacc:	7141      	strb	r1, [r0, #5]
    eace:	4770      	bx	lr

0000ead0 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    ead0:	7181      	strb	r1, [r0, #6]
    ead2:	0a09      	lsrs	r1, r1, #8
    ead4:	71c1      	strb	r1, [r0, #7]
    ead6:	4770      	bx	lr

0000ead8 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    ead8:	7201      	strb	r1, [r0, #8]
    eada:	0a09      	lsrs	r1, r1, #8
    eadc:	7241      	strb	r1, [r0, #9]
    eade:	4770      	bx	lr

0000eae0 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    eae0:	7281      	strb	r1, [r0, #10]
    eae2:	0a09      	lsrs	r1, r1, #8
    eae4:	72c1      	strb	r1, [r0, #11]
    eae6:	4770      	bx	lr

0000eae8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    eae8:	7802      	ldrb	r2, [r0, #0]
    eaea:	f002 020f 	and.w	r2, r2, #15
    eaee:	2a03      	cmp	r2, #3
    eaf0:	d003      	beq.n	eafa <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
    eaf2:	2a05      	cmp	r2, #5
    eaf4:	d104      	bne.n	eb00 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
    eaf6:	f7ff bed5 	b.w	e8a4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    eafa:	7840      	ldrb	r0, [r0, #1]
    eafc:	280c      	cmp	r0, #12
    eafe:	d001      	beq.n	eb04 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
    eb00:	2000      	movs	r0, #0
    eb02:	4770      	bx	lr
    eb04:	2001      	movs	r0, #1
    eb06:	4770      	bx	lr

0000eb08 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    eb08:	b570      	push	{r4, r5, r6, lr}
    eb0a:	4614      	mov	r4, r2
    eb0c:	4605      	mov	r5, r0
    eb0e:	2a1f      	cmp	r2, #31
    eb10:	d903      	bls.n	eb1a <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    eb12:	21b5      	movs	r1, #181	; 0xb5
    eb14:	202a      	movs	r0, #42	; 0x2a
    eb16:	f7f5 ff91 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb1a:	f105 0009 	add.w	r0, r5, #9
    eb1e:	f7fe f9dd 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eb22:	1da4      	adds	r4, r4, #6
    eb24:	706c      	strb	r4, [r5, #1]
    eb26:	bd70      	pop	{r4, r5, r6, pc}

0000eb28 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    eb28:	b510      	push	{r4, lr}
    eb2a:	7802      	ldrb	r2, [r0, #0]
    eb2c:	f001 030f 	and.w	r3, r1, #15
    eb30:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    eb34:	431a      	orrs	r2, r3
    eb36:	7002      	strb	r2, [r0, #0]
    eb38:	2907      	cmp	r1, #7
    eb3a:	d20c      	bcs.n	eb56 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    eb3c:	e8df f001 	tbb	[pc, r1]
    eb40:	06040604 	.word	0x06040604
    eb44:	00040804 	.word	0x00040804
    eb48:	2106      	movs	r1, #6
    eb4a:	e002      	b.n	eb52 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    eb4c:	210c      	movs	r1, #12
    eb4e:	e000      	b.n	eb52 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    eb50:	2122      	movs	r1, #34	; 0x22
    eb52:	7041      	strb	r1, [r0, #1]
    eb54:	bd10      	pop	{r4, pc}
    eb56:	216f      	movs	r1, #111	; 0x6f
    eb58:	202a      	movs	r0, #42	; 0x2a
    eb5a:	f7f5 ff6f 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eb5e <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    eb5e:	680a      	ldr	r2, [r1, #0]
    eb60:	f840 2f09 	str.w	r2, [r0, #9]!
    eb64:	8889      	ldrh	r1, [r1, #4]
    eb66:	8081      	strh	r1, [r0, #4]
    eb68:	4770      	bx	lr

0000eb6a <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    eb6a:	7802      	ldrb	r2, [r0, #0]
    eb6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    eb70:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    eb74:	7002      	strb	r2, [r0, #0]
    eb76:	4770      	bx	lr

0000eb78 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    eb78:	680a      	ldr	r2, [r1, #0]
    eb7a:	f840 2f03 	str.w	r2, [r0, #3]!
    eb7e:	8889      	ldrh	r1, [r1, #4]
    eb80:	8081      	strh	r1, [r0, #4]
    eb82:	4770      	bx	lr

0000eb84 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    eb84:	7802      	ldrb	r2, [r0, #0]
    eb86:	2340      	movs	r3, #64	; 0x40
    eb88:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    eb8c:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    eb90:	430a      	orrs	r2, r1
    eb92:	7002      	strb	r2, [r0, #0]
    eb94:	4770      	bx	lr

0000eb96 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    eb96:	b570      	push	{r4, r5, r6, lr}
    eb98:	4614      	mov	r4, r2
    eb9a:	4605      	mov	r5, r0
    eb9c:	2a1f      	cmp	r2, #31
    eb9e:	d903      	bls.n	eba8 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    eba0:	21d7      	movs	r1, #215	; 0xd7
    eba2:	202a      	movs	r0, #42	; 0x2a
    eba4:	f7f5 ff4a 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eba8:	f105 0009 	add.w	r0, r5, #9
    ebac:	f7fe f996 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ebb0:	1da4      	adds	r4, r4, #6
    ebb2:	706c      	strb	r4, [r5, #1]
    ebb4:	bd70      	pop	{r4, r5, r6, pc}

0000ebb6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    ebb6:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ebba:	4604      	mov	r4, r0
    ebbc:	2000      	movs	r0, #0
    ebbe:	f7f6 f933 	bl	4e28 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    ebc2:	2600      	movs	r6, #0
    ebc4:	4605      	mov	r5, r0
    ebc6:	4637      	mov	r7, r6
    ebc8:	e00e      	b.n	ebe8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    ebca:	8820      	ldrh	r0, [r4, #0]
    ebcc:	1c40      	adds	r0, r0, #1
    ebce:	b280      	uxth	r0, r0
    ebd0:	8020      	strh	r0, [r4, #0]
    ebd2:	42a8      	cmp	r0, r5
    ebd4:	d300      	bcc.n	ebd8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    ebd6:	8027      	strh	r7, [r4, #0]
    ebd8:	8820      	ldrh	r0, [r4, #0]
    ebda:	4669      	mov	r1, sp
    ebdc:	f7ff fc4d 	bl	e47a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ebe0:	2800      	cmp	r0, #0
    ebe2:	d007      	beq.n	ebf4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    ebe4:	1c76      	adds	r6, r6, #1
    ebe6:	b2f6      	uxtb	r6, r6
    ebe8:	42ae      	cmp	r6, r5
    ebea:	d3ee      	bcc.n	ebca <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    ebec:	f64f 70ff 	movw	r0, #65535	; 0xffff
    ebf0:	8020      	strh	r0, [r4, #0]
    ebf2:	2012      	movs	r0, #18
    ebf4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000ebf8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    ebf8:	6841      	ldr	r1, [r0, #4]
    ebfa:	2200      	movs	r2, #0
    ebfc:	f891 31d2 	ldrb.w	r3, [r1, #466]	; 0x1d2
    ec00:	2b00      	cmp	r3, #0
    ec02:	d004      	beq.n	ec0e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    ec04:	f881 21d2 	strb.w	r2, [r1, #466]	; 0x1d2
    ec08:	6840      	ldr	r0, [r0, #4]
    ec0a:	f000 bd08 	b.w	f61e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    ec0e:	4770      	bx	lr

0000ec10 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    ec10:	b510      	push	{r4, lr}
    ec12:	7901      	ldrb	r1, [r0, #4]
    ec14:	b119      	cbz	r1, ec1e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    ec16:	2901      	cmp	r1, #1
    ec18:	d006      	beq.n	ec28 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    ec1a:	2000      	movs	r0, #0
    ec1c:	bd10      	pop	{r4, pc}
    ec1e:	8842      	ldrh	r2, [r0, #2]
    ec20:	6883      	ldr	r3, [r0, #8]
    ec22:	8800      	ldrh	r0, [r0, #0]
    ec24:	2102      	movs	r1, #2
    ec26:	e003      	b.n	ec30 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    ec28:	8842      	ldrh	r2, [r0, #2]
    ec2a:	6883      	ldr	r3, [r0, #8]
    ec2c:	8800      	ldrh	r0, [r0, #0]
    ec2e:	2101      	movs	r1, #1
    ec30:	f7f7 ffae 	bl	6b90 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    ec34:	b908      	cbnz	r0, ec3a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    ec36:	f7f8 f801 	bl	6c3c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    ec3a:	2001      	movs	r0, #1
    ec3c:	bd10      	pop	{r4, pc}
    ec3e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ec42:	460e      	mov	r6, r1
    ec44:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    ec48:	4617      	mov	r7, r2
    ec4a:	39ff      	subs	r1, #255	; 0xff
    ec4c:	d014      	beq.n	ec78 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    ec4e:	8030      	strh	r0, [r6, #0]
    ec50:	2100      	movs	r1, #0
    ec52:	7171      	strb	r1, [r6, #5]
    ec54:	f7f6 fb1a 	bl	528c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    ec58:	4604      	mov	r4, r0
    ec5a:	f7fe ff94 	bl	db86 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    ec5e:	0005      	movs	r5, r0
    ec60:	d00a      	beq.n	ec78 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    ec62:	4620      	mov	r0, r4
    ec64:	4629      	mov	r1, r5
    ec66:	aa01      	add	r2, sp, #4
    ec68:	f7fe ffb0 	bl	dbcc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    ec6c:	8070      	strh	r0, [r6, #2]
    ec6e:	b130      	cbz	r0, ec7e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    ec70:	28fb      	cmp	r0, #251	; 0xfb
    ec72:	d906      	bls.n	ec82 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    ec74:	21ae      	movs	r1, #174	; 0xae
    ec76:	e026      	b.n	ecc6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    ec78:	2000      	movs	r0, #0
    ec7a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ec7e:	21ad      	movs	r1, #173	; 0xad
    ec80:	e021      	b.n	ecc6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    ec82:	9801      	ldr	r0, [sp, #4]
    ec84:	f7ff fea4 	bl	e9d0 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    ec88:	2801      	cmp	r0, #1
    ec8a:	d003      	beq.n	ec94 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    ec8c:	2802      	cmp	r0, #2
    ec8e:	d001      	beq.n	ec94 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    ec90:	21bd      	movs	r1, #189	; 0xbd
    ec92:	e018      	b.n	ecc6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    ec94:	7130      	strb	r0, [r6, #4]
    ec96:	4629      	mov	r1, r5
    ec98:	8873      	ldrh	r3, [r6, #2]
    ec9a:	2503      	movs	r5, #3
    ec9c:	4620      	mov	r0, r4
    ec9e:	463a      	mov	r2, r7
    eca0:	9500      	str	r5, [sp, #0]
    eca2:	f7fe fe70 	bl	d986 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    eca6:	4620      	mov	r0, r4
    eca8:	60b7      	str	r7, [r6, #8]
    ecaa:	f7fe ff30 	bl	db0e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    ecae:	b138      	cbz	r0, ecc0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    ecb0:	2100      	movs	r1, #0
    ecb2:	4620      	mov	r0, r4
    ecb4:	460a      	mov	r2, r1
    ecb6:	f7ff f867 	bl	dd88 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    ecba:	b118      	cbz	r0, ecc4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    ecbc:	2001      	movs	r0, #1
    ecbe:	e7dc      	b.n	ec7a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    ecc0:	21cd      	movs	r1, #205	; 0xcd
    ecc2:	e000      	b.n	ecc6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    ecc4:	21d2      	movs	r1, #210	; 0xd2
    ecc6:	202b      	movs	r0, #43	; 0x2b
    ecc8:	f7f5 feb8 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eccc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    eccc:	f7f8 b9b4 	b.w	7038 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x230>
    ecd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ecd4:	460c      	mov	r4, r1
    ecd6:	b180      	cbz	r0, ecfa <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2e>
    ecd8:	2700      	movs	r7, #0
    ecda:	4606      	mov	r6, r0
    ecdc:	f500 7596 	add.w	r5, r0, #300	; 0x12c
    ece0:	2a10      	cmp	r2, #16
    ece2:	d060      	beq.n	eda6 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xda>
    ece4:	dc0c      	bgt.n	ed00 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x34>
    ece6:	f1a2 0205 	sub.w	r2, r2, #5
    ecea:	2a08      	cmp	r2, #8
    ecec:	d210      	bcs.n	ed10 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    ecee:	e8df f002 	tbb	[pc, r2]
    ecf2:	124e      	.short	0x124e
    ecf4:	20330f0f 	.word	0x20330f0f
    ecf8:	540f      	.short	0x540f
    ecfa:	f44f 7112 	mov.w	r1, #584	; 0x248
    ecfe:	e034      	b.n	ed6a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    ed00:	2a11      	cmp	r2, #17
    ed02:	d072      	beq.n	edea <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x11e>
    ed04:	2a18      	cmp	r2, #24
    ed06:	d068      	beq.n	edda <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x10e>
    ed08:	2a1a      	cmp	r2, #26
    ed0a:	d057      	beq.n	edbc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xf0>
    ed0c:	2a1b      	cmp	r2, #27
    ed0e:	d060      	beq.n	edd2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x106>
    ed10:	f240 2175 	movw	r1, #629	; 0x275
    ed14:	e029      	b.n	ed6a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    ed16:	7067      	strb	r7, [r4, #1]
    ed18:	2007      	movs	r0, #7
    ed1a:	7020      	strb	r0, [r4, #0]
    ed1c:	8537      	strh	r7, [r6, #40]	; 0x28
    ed1e:	f855 0f80 	ldr.w	r0, [r5, #128]!
    ed22:	6060      	str	r0, [r4, #4]
    ed24:	6868      	ldr	r0, [r5, #4]
    ed26:	60a0      	str	r0, [r4, #8]
    ed28:	8928      	ldrh	r0, [r5, #8]
    ed2a:	81a0      	strh	r0, [r4, #12]
    ed2c:	7127      	strb	r7, [r4, #4]
    ed2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed32:	8830      	ldrh	r0, [r6, #0]
    ed34:	f7f6 faaa 	bl	528c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    ed38:	4680      	mov	r8, r0
    ed3a:	f7fe ffbc 	bl	dcb6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    ed3e:	b110      	cbz	r0, ed46 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x7a>
    ed40:	f240 11b9 	movw	r1, #441	; 0x1b9
    ed44:	e011      	b.n	ed6a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    ed46:	7067      	strb	r7, [r4, #1]
    ed48:	200c      	movs	r0, #12
    ed4a:	7020      	strb	r0, [r4, #0]
    ed4c:	f895 0094 	ldrb.w	r0, [r5, #148]	; 0x94
    ed50:	7120      	strb	r0, [r4, #4]
    ed52:	8830      	ldrh	r0, [r6, #0]
    ed54:	80e0      	strh	r0, [r4, #6]
    ed56:	e015      	b.n	ed84 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xb8>
    ed58:	8830      	ldrh	r0, [r6, #0]
    ed5a:	f7f6 fa97 	bl	528c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    ed5e:	4680      	mov	r8, r0
    ed60:	f7fe ffa9 	bl	dcb6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    ed64:	b120      	cbz	r0, ed70 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xa4>
    ed66:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    ed6a:	2010      	movs	r0, #16
    ed6c:	f7f5 fe66 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed70:	7067      	strb	r7, [r4, #1]
    ed72:	200b      	movs	r0, #11
    ed74:	7020      	strb	r0, [r4, #0]
    ed76:	f815 0f94 	ldrb.w	r0, [r5, #148]!
    ed7a:	7120      	strb	r0, [r4, #4]
    ed7c:	8830      	ldrh	r0, [r6, #0]
    ed7e:	80e0      	strh	r0, [r4, #6]
    ed80:	7928      	ldrb	r0, [r5, #4]
    ed82:	7220      	strb	r0, [r4, #8]
    ed84:	4640      	mov	r0, r8
    ed86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ed8a:	f7fe bfaf 	b.w	dcec <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    ed8e:	7067      	strb	r7, [r4, #1]
    ed90:	2006      	movs	r0, #6
    ed92:	7020      	strb	r0, [r4, #0]
    ed94:	f855 0f6a 	ldr.w	r0, [r5, #106]!
    ed98:	e00a      	b.n	edb0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xe4>
    ed9a:	7067      	strb	r7, [r4, #1]
    ed9c:	200e      	movs	r0, #14
    ed9e:	7020      	strb	r0, [r4, #0]
    eda0:	8830      	ldrh	r0, [r6, #0]
    eda2:	8088      	strh	r0, [r1, #4]
    eda4:	e7c3      	b.n	ed2e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    eda6:	7067      	strb	r7, [r4, #1]
    eda8:	2012      	movs	r0, #18
    edaa:	7020      	strb	r0, [r4, #0]
    edac:	f855 0f22 	ldr.w	r0, [r5, #34]!
    edb0:	6060      	str	r0, [r4, #4]
    edb2:	6868      	ldr	r0, [r5, #4]
    edb4:	60a0      	str	r0, [r4, #8]
    edb6:	68a8      	ldr	r0, [r5, #8]
    edb8:	60e0      	str	r0, [r4, #12]
    edba:	e7b8      	b.n	ed2e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    edbc:	7067      	strb	r7, [r4, #1]
    edbe:	2018      	movs	r0, #24
    edc0:	7020      	strb	r0, [r4, #0]
    edc2:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    edc4:	6060      	str	r0, [r4, #4]
    edc6:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    edc8:	60a0      	str	r0, [r4, #8]
    edca:	f8b5 0040 	ldrh.w	r0, [r5, #64]	; 0x40
    edce:	81a0      	strh	r0, [r4, #12]
    edd0:	e7ad      	b.n	ed2e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    edd2:	2019      	movs	r0, #25
    edd4:	7020      	strb	r0, [r4, #0]
    edd6:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    edd8:	e004      	b.n	ede4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x118>
    edda:	7067      	strb	r7, [r4, #1]
    eddc:	2016      	movs	r0, #22
    edde:	7020      	strb	r0, [r4, #0]
    ede0:	f8d5 000a 	ldr.w	r0, [r5, #10]
    ede4:	6048      	str	r0, [r1, #4]
    ede6:	e7a2      	b.n	ed2e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    ede8:	e7ff      	b.n	edea <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x11e>
    edea:	7067      	strb	r7, [r4, #1]
    edec:	2013      	movs	r0, #19
    edee:	7020      	strb	r0, [r4, #0]
    edf0:	f855 0f5a 	ldr.w	r0, [r5, #90]!
    edf4:	6060      	str	r0, [r4, #4]
    edf6:	88a8      	ldrh	r0, [r5, #4]
    edf8:	8120      	strh	r0, [r4, #8]
    edfa:	e798      	b.n	ed2e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>

0000edfc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    edfc:	b4f0      	push	{r4, r5, r6, r7}
    edfe:	8150      	strh	r0, [r2, #10]
    ee00:	890d      	ldrh	r5, [r1, #8]
    ee02:	4614      	mov	r4, r2
    ee04:	8195      	strh	r5, [r2, #12]
    ee06:	898a      	ldrh	r2, [r1, #12]
    ee08:	81e2      	strh	r2, [r4, #14]
    ee0a:	8948      	ldrh	r0, [r1, #10]
    ee0c:	8220      	strh	r0, [r4, #16]
    ee0e:	89ce      	ldrh	r6, [r1, #14]
    ee10:	8266      	strh	r6, [r4, #18]
    ee12:	8dcf      	ldrh	r7, [r1, #46]	; 0x2e
    ee14:	42b7      	cmp	r7, r6
    ee16:	d108      	bne.n	ee2a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    ee18:	8d4e      	ldrh	r6, [r1, #42]	; 0x2a
    ee1a:	4286      	cmp	r6, r0
    ee1c:	d105      	bne.n	ee2a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    ee1e:	8e0e      	ldrh	r6, [r1, #48]	; 0x30
    ee20:	4296      	cmp	r6, r2
    ee22:	d102      	bne.n	ee2a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    ee24:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    ee26:	42aa      	cmp	r2, r5
    ee28:	d001      	beq.n	ee2e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    ee2a:	2201      	movs	r2, #1
    ee2c:	e000      	b.n	ee30 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    ee2e:	2200      	movs	r2, #0
    ee30:	7522      	strb	r2, [r4, #20]
    ee32:	8548      	strh	r0, [r1, #42]	; 0x2a
    ee34:	8a60      	ldrh	r0, [r4, #18]
    ee36:	85c8      	strh	r0, [r1, #46]	; 0x2e
    ee38:	89a0      	ldrh	r0, [r4, #12]
    ee3a:	8588      	strh	r0, [r1, #44]	; 0x2c
    ee3c:	89e0      	ldrh	r0, [r4, #14]
    ee3e:	8608      	strh	r0, [r1, #48]	; 0x30
    ee40:	4620      	mov	r0, r4
    ee42:	bcf0      	pop	{r4, r5, r6, r7}
    ee44:	2210      	movs	r2, #16
    ee46:	4619      	mov	r1, r3
    ee48:	f7f7 befe 	b.w	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>

0000ee4c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    ee4c:	b510      	push	{r4, lr}
    ee4e:	888c      	ldrh	r4, [r1, #4]
    ee50:	890a      	ldrh	r2, [r1, #8]
    ee52:	884b      	ldrh	r3, [r1, #2]
    ee54:	88c9      	ldrh	r1, [r1, #6]
    ee56:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
    ee5a:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
    ee5e:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
    ee62:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    ee66:	bd10      	pop	{r4, pc}

0000ee68 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    ee68:	b570      	push	{r4, r5, r6, lr}
    ee6a:	4615      	mov	r5, r2
    ee6c:	460c      	mov	r4, r1
    ee6e:	f000 f8ce 	bl	f00e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    ee72:	3096      	adds	r0, #150	; 0x96
    ee74:	4428      	add	r0, r5
    ee76:	42a0      	cmp	r0, r4
    ee78:	d801      	bhi.n	ee7e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    ee7a:	1a20      	subs	r0, r4, r0
    ee7c:	bd70      	pop	{r4, r5, r6, pc}
    ee7e:	2000      	movs	r0, #0
    ee80:	bd70      	pop	{r4, r5, r6, pc}

0000ee82 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    ee82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ee86:	4604      	mov	r4, r0
    ee88:	8f47      	ldrh	r7, [r0, #58]	; 0x3a
    ee8a:	8fc6      	ldrh	r6, [r0, #62]	; 0x3e
    ee8c:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
    ee90:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    ee94:	4285      	cmp	r5, r0
    ee96:	d300      	bcc.n	ee9a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    ee98:	4605      	mov	r5, r0
    ee9a:	4620      	mov	r0, r4
    ee9c:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
    eea0:	f000 f8a5 	bl	efee <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    eea4:	4601      	mov	r1, r0
    eea6:	8765      	strh	r5, [r4, #58]	; 0x3a
    eea8:	87e1      	strh	r1, [r4, #62]	; 0x3e
    eeaa:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
    eeae:	f104 0030 	add.w	r0, r4, #48	; 0x30
    eeb2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    eeb6:	4680      	mov	r8, r0
    eeb8:	42aa      	cmp	r2, r5
    eeba:	d200      	bcs.n	eebe <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    eebc:	462a      	mov	r2, r5
    eebe:	428b      	cmp	r3, r1
    eec0:	d200      	bcs.n	eec4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    eec2:	460b      	mov	r3, r1
    eec4:	8202      	strh	r2, [r0, #16]
    eec6:	f8a8 3012 	strh.w	r3, [r8, #18]
    eeca:	42bd      	cmp	r5, r7
    eecc:	d101      	bne.n	eed2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    eece:	42b1      	cmp	r1, r6
    eed0:	d001      	beq.n	eed6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    eed2:	2001      	movs	r0, #1
    eed4:	e000      	b.n	eed8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x56>
    eed6:	2000      	movs	r0, #0
    eed8:	4681      	mov	r9, r0
    eeda:	f8b4 504c 	ldrh.w	r5, [r4, #76]	; 0x4c
    eede:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
    eee2:	8f27      	ldrh	r7, [r4, #56]	; 0x38
    eee4:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    eee6:	4285      	cmp	r5, r0
    eee8:	d300      	bcc.n	eeec <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x6a>
    eeea:	4605      	mov	r5, r0
    eeec:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
    eef0:	4620      	mov	r0, r4
    eef2:	f000 f884 	bl	effe <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    eef6:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
    eefa:	2902      	cmp	r1, #2
    eefc:	d108      	bne.n	ef10 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8e>
    eefe:	42af      	cmp	r7, r5
    ef00:	d200      	bcs.n	ef04 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x82>
    ef02:	463d      	mov	r5, r7
    ef04:	4286      	cmp	r6, r0
    ef06:	d200      	bcs.n	ef0a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x88>
    ef08:	4630      	mov	r0, r6
    ef0a:	2100      	movs	r1, #0
    ef0c:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    ef10:	f8a8 5008 	strh.w	r5, [r8, #8]
    ef14:	f8a8 000c 	strh.w	r0, [r8, #12]
    ef18:	42bd      	cmp	r5, r7
    ef1a:	d101      	bne.n	ef20 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    ef1c:	42b0      	cmp	r0, r6
    ef1e:	d001      	beq.n	ef24 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa2>
    ef20:	2001      	movs	r0, #1
    ef22:	e000      	b.n	ef26 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa4>
    ef24:	2000      	movs	r0, #0
    ef26:	ea40 0009 	orr.w	r0, r0, r9
    ef2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000ef2e <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    ef2e:	6840      	ldr	r0, [r0, #4]
    ef30:	4770      	bx	lr

0000ef32 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    ef32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef36:	4616      	mov	r6, r2
    ef38:	460f      	mov	r7, r1
    ef3a:	4604      	mov	r4, r0
    ef3c:	f000 f867 	bl	f00e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    ef40:	4605      	mov	r5, r0
    ef42:	463a      	mov	r2, r7
    ef44:	6921      	ldr	r1, [r4, #16]
    ef46:	6b20      	ldr	r0, [r4, #48]	; 0x30
    ef48:	f000 f84c 	bl	efe4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    ef4c:	19a9      	adds	r1, r5, r6
    ef4e:	4281      	cmp	r1, r0
    ef50:	d300      	bcc.n	ef54 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    ef52:	4608      	mov	r0, r1
    ef54:	6360      	str	r0, [r4, #52]	; 0x34
    ef56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ef5a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    ef5a:	221b      	movs	r2, #27
    ef5c:	8402      	strh	r2, [r0, #32]
    ef5e:	8382      	strh	r2, [r0, #28]
    ef60:	82c2      	strh	r2, [r0, #22]
    ef62:	8282      	strh	r2, [r0, #20]
    ef64:	8142      	strh	r2, [r0, #10]
    ef66:	8202      	strh	r2, [r0, #16]
    ef68:	8102      	strh	r2, [r0, #8]
    ef6a:	8542      	strh	r2, [r0, #42]	; 0x2a
    ef6c:	8582      	strh	r2, [r0, #44]	; 0x2c
    ef6e:	8482      	strh	r2, [r0, #36]	; 0x24
    ef70:	2900      	cmp	r1, #0
    ef72:	d10a      	bne.n	ef8a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    ef74:	f44f 71a4 	mov.w	r1, #328	; 0x148
    ef78:	8441      	strh	r1, [r0, #34]	; 0x22
    ef7a:	83c1      	strh	r1, [r0, #30]
    ef7c:	8341      	strh	r1, [r0, #26]
    ef7e:	8301      	strh	r1, [r0, #24]
    ef80:	81c1      	strh	r1, [r0, #14]
    ef82:	8241      	strh	r1, [r0, #18]
    ef84:	8181      	strh	r1, [r0, #12]
    ef86:	85c1      	strh	r1, [r0, #46]	; 0x2e
    ef88:	8601      	strh	r1, [r0, #48]	; 0x30
    ef8a:	4770      	bx	lr

0000ef8c <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    ef8c:	6800      	ldr	r0, [r0, #0]
    ef8e:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    ef92:	4290      	cmp	r0, r2
    ef94:	d903      	bls.n	ef9e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    ef96:	1a40      	subs	r0, r0, r1
    ef98:	389c      	subs	r0, #156	; 0x9c
    ef9a:	0840      	lsrs	r0, r0, #1
    ef9c:	4770      	bx	lr
    ef9e:	2000      	movs	r0, #0
    efa0:	4770      	bx	lr

0000efa2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    efa2:	b510      	push	{r4, lr}
    efa4:	9c02      	ldr	r4, [sp, #8]
    efa6:	8281      	strh	r1, [r0, #20]
    efa8:	82c2      	strh	r2, [r0, #22]
    efaa:	8303      	strh	r3, [r0, #24]
    efac:	8344      	strh	r4, [r0, #26]
    efae:	bd10      	pop	{r4, pc}

0000efb0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    efb0:	b430      	push	{r4, r5}
    efb2:	8150      	strh	r0, [r2, #10]
    efb4:	8a88      	ldrh	r0, [r1, #20]
    efb6:	8190      	strh	r0, [r2, #12]
    efb8:	8ac8      	ldrh	r0, [r1, #22]
    efba:	81d0      	strh	r0, [r2, #14]
    efbc:	8b08      	ldrh	r0, [r1, #24]
    efbe:	8210      	strh	r0, [r2, #16]
    efc0:	8b48      	ldrh	r0, [r1, #26]
    efc2:	4614      	mov	r4, r2
    efc4:	8250      	strh	r0, [r2, #18]
    efc6:	4620      	mov	r0, r4
    efc8:	bc30      	pop	{r4, r5}
    efca:	221a      	movs	r2, #26
    efcc:	4619      	mov	r1, r3
    efce:	f7f7 be3b 	b.w	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    efd2:	2902      	cmp	r1, #2
    efd4:	d003      	beq.n	efde <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2e>
    efd6:	00c0      	lsls	r0, r0, #3
    efd8:	3070      	adds	r0, #112	; 0x70
    efda:	b280      	uxth	r0, r0
    efdc:	4770      	bx	lr
    efde:	0080      	lsls	r0, r0, #2
    efe0:	303c      	adds	r0, #60	; 0x3c
    efe2:	e7fa      	b.n	efda <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    efe4:	4288      	cmp	r0, r1
    efe6:	d300      	bcc.n	efea <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    efe8:	4608      	mov	r0, r1
    efea:	1a80      	subs	r0, r0, r2
    efec:	4770      	bx	lr
    efee:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
    eff2:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
    eff6:	4281      	cmp	r1, r0
    eff8:	d200      	bcs.n	effc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4c>
    effa:	4608      	mov	r0, r1
    effc:	4770      	bx	lr
    effe:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    f002:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    f006:	4281      	cmp	r1, r0
    f008:	d200      	bcs.n	f00c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>
    f00a:	4608      	mov	r0, r1
    f00c:	4770      	bx	lr
    f00e:	2196      	movs	r1, #150	; 0x96
    f010:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
    f014:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
    f018:	f000 b800 	b.w	f01c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x6c>
    f01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f020:	460d      	mov	r5, r1
    f022:	4606      	mov	r6, r0
    f024:	4698      	mov	r8, r3
    f026:	4617      	mov	r7, r2
    f028:	8f00      	ldrh	r0, [r0, #56]	; 0x38
    f02a:	4611      	mov	r1, r2
    f02c:	f7ff ffd1 	bl	efd2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    f030:	4604      	mov	r4, r0
    f032:	4639      	mov	r1, r7
    f034:	4630      	mov	r0, r6
    f036:	f7ff ffe2 	bl	effe <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    f03a:	42a0      	cmp	r0, r4
    f03c:	d200      	bcs.n	f040 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x90>
    f03e:	4604      	mov	r4, r0
    f040:	f8b6 0040 	ldrh.w	r0, [r6, #64]	; 0x40
    f044:	4641      	mov	r1, r8
    f046:	f7ff ffc4 	bl	efd2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    f04a:	4607      	mov	r7, r0
    f04c:	4641      	mov	r1, r8
    f04e:	4630      	mov	r0, r6
    f050:	f7ff ffcd 	bl	efee <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    f054:	42b8      	cmp	r0, r7
    f056:	d300      	bcc.n	f05a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xaa>
    f058:	4638      	mov	r0, r7
    f05a:	4420      	add	r0, r4
    f05c:	4428      	add	r0, r5
    f05e:	1d80      	adds	r0, r0, #6
    f060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f064:	b510      	push	{r4, lr}
    f066:	4604      	mov	r4, r0
    f068:	2108      	movs	r1, #8
    f06a:	4620      	mov	r0, r4
    f06c:	f7f5 fd92 	bl	4b94 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f070:	6820      	ldr	r0, [r4, #0]
    f072:	2800      	cmp	r0, #0
    f074:	d102      	bne.n	f07c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    f076:	6860      	ldr	r0, [r4, #4]
    f078:	2800      	cmp	r0, #0
    f07a:	d0f5      	beq.n	f068 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb8>
    f07c:	bd10      	pop	{r4, pc}
    f07e:	2801      	cmp	r0, #1
    f080:	d102      	bne.n	f088 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd8>
    f082:	7948      	ldrb	r0, [r1, #5]
    f084:	0980      	lsrs	r0, r0, #6
    f086:	d001      	beq.n	f08c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    f088:	2000      	movs	r0, #0
    f08a:	4770      	bx	lr
    f08c:	2001      	movs	r0, #1
    f08e:	4770      	bx	lr
    f090:	2801      	cmp	r0, #1
    f092:	d106      	bne.n	f0a2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf2>
    f094:	7948      	ldrb	r0, [r1, #5]
    f096:	2101      	movs	r1, #1
    f098:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    f09c:	d101      	bne.n	f0a2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf2>
    f09e:	2001      	movs	r0, #1
    f0a0:	4770      	bx	lr
    f0a2:	2000      	movs	r0, #0
    f0a4:	4770      	bx	lr
    f0a6:	2802      	cmp	r0, #2
    f0a8:	d003      	beq.n	f0b2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x102>
    f0aa:	2803      	cmp	r0, #3
    f0ac:	d001      	beq.n	f0b2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x102>
    f0ae:	2000      	movs	r0, #0
    f0b0:	4770      	bx	lr
    f0b2:	2001      	movs	r0, #1
    f0b4:	4770      	bx	lr

0000f0b6 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    f0b6:	b510      	push	{r4, lr}
    f0b8:	4604      	mov	r4, r0
    f0ba:	7c00      	ldrb	r0, [r0, #16]
    f0bc:	f7ff fff3 	bl	f0a6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf6>
    f0c0:	b148      	cbz	r0, f0d6 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    f0c2:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    f0c6:	f104 0150 	add.w	r1, r4, #80	; 0x50
    f0ca:	f7ff f993 	bl	e3f4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    f0ce:	2808      	cmp	r0, #8
    f0d0:	d001      	beq.n	f0d6 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    f0d2:	2001      	movs	r0, #1
    f0d4:	bd10      	pop	{r4, pc}
    f0d6:	7c20      	ldrb	r0, [r4, #16]
    f0d8:	b118      	cbz	r0, f0e2 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    f0da:	2802      	cmp	r0, #2
    f0dc:	d001      	beq.n	f0e2 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    f0de:	7de0      	ldrb	r0, [r4, #23]
    f0e0:	bd10      	pop	{r4, pc}
    f0e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0e6:	2000      	movs	r0, #0
    f0e8:	f7f6 bb8a 	b.w	5800 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000f0ec <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    f0ec:	b508      	push	{r3, lr}
    f0ee:	f890 106c 	ldrb.w	r1, [r0, #108]	; 0x6c
    f0f2:	f88d 1000 	strb.w	r1, [sp]
    f0f6:	9900      	ldr	r1, [sp, #0]
    f0f8:	9100      	str	r1, [sp, #0]
    f0fa:	f89d 1000 	ldrb.w	r1, [sp]
    f0fe:	b109      	cbz	r1, f104 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    f100:	2001      	movs	r0, #1
    f102:	bd08      	pop	{r3, pc}
    f104:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    f108:	f88d 0000 	strb.w	r0, [sp]
    f10c:	9800      	ldr	r0, [sp, #0]
    f10e:	9000      	str	r0, [sp, #0]
    f110:	f89d 0000 	ldrb.w	r0, [sp]
    f114:	2000      	movs	r0, #0
    f116:	bd08      	pop	{r3, pc}

0000f118 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    f118:	20ff      	movs	r0, #255	; 0xff
    f11a:	7008      	strb	r0, [r1, #0]
    f11c:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    f11e:	f7ff b869 	b.w	e1f4 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000f122 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    f122:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f124:	460d      	mov	r5, r1
    f126:	4604      	mov	r4, r0
    f128:	f44f 7288 	mov.w	r2, #272	; 0x110
    f12c:	2100      	movs	r1, #0
    f12e:	f7fd ff4f 	bl	cfd0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f132:	20ff      	movs	r0, #255	; 0xff
    f134:	7020      	strb	r0, [r4, #0]
    f136:	207f      	movs	r0, #127	; 0x7f
    f138:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    f13c:	2013      	movs	r0, #19
    f13e:	8060      	strh	r0, [r4, #2]
    f140:	f7f6 f966 	bl	5410 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    f144:	4601      	mov	r1, r0
    f146:	62e0      	str	r0, [r4, #44]	; 0x2c
    f148:	2200      	movs	r2, #0
    f14a:	4668      	mov	r0, sp
    f14c:	f7fe ffbc 	bl	e0c8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f150:	2200      	movs	r2, #0
    f152:	2101      	movs	r1, #1
    f154:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f156:	f7ff f82d 	bl	e1b4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f15a:	2204      	movs	r2, #4
    f15c:	4668      	mov	r0, sp
    f15e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f160:	f7fe ffb2 	bl	e0c8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f164:	2200      	movs	r2, #0
    f166:	4611      	mov	r1, r2
    f168:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f16a:	f7ff f823 	bl	e1b4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f16e:	73a5      	strb	r5, [r4, #14]
    f170:	f104 0020 	add.w	r0, r4, #32
    f174:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    f178:	f000 b994 	b.w	f4a4 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000f17c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    f17c:	7880      	ldrb	r0, [r0, #2]
    f17e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    f182:	b108      	cbz	r0, f188 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    f184:	2000      	movs	r0, #0
    f186:	4770      	bx	lr
    f188:	201f      	movs	r0, #31
    f18a:	4770      	bx	lr

0000f18c <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    f18c:	f7f8 bc92 	b.w	7ab4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>

0000f190 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI>:
    f190:	b570      	push	{r4, r5, r6, lr}
    f192:	2300      	movs	r3, #0
    f194:	2a03      	cmp	r2, #3
    f196:	d015      	beq.n	f1c4 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x34>
    f198:	2a0e      	cmp	r2, #14
    f19a:	d01a      	beq.n	f1d2 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x42>
    f19c:	2a12      	cmp	r2, #18
    f19e:	d030      	beq.n	f202 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x72>
    f1a0:	2a19      	cmp	r2, #25
    f1a2:	d004      	beq.n	f1ae <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x1e>
    f1a4:	f240 21d2 	movw	r1, #722	; 0x2d2
    f1a8:	202d      	movs	r0, #45	; 0x2d
    f1aa:	f7f5 fc47 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f1ae:	704b      	strb	r3, [r1, #1]
    f1b0:	2217      	movs	r2, #23
    f1b2:	700a      	strb	r2, [r1, #0]
    f1b4:	f850 2fb5 	ldr.w	r2, [r0, #181]!
    f1b8:	604a      	str	r2, [r1, #4]
    f1ba:	6842      	ldr	r2, [r0, #4]
    f1bc:	608a      	str	r2, [r1, #8]
    f1be:	7a00      	ldrb	r0, [r0, #8]
    f1c0:	7308      	strb	r0, [r1, #12]
    f1c2:	bd70      	pop	{r4, r5, r6, pc}
    f1c4:	704b      	strb	r3, [r1, #1]
    f1c6:	2205      	movs	r2, #5
    f1c8:	700a      	strb	r2, [r1, #0]
    f1ca:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
    f1ce:	6048      	str	r0, [r1, #4]
    f1d0:	bd70      	pop	{r4, r5, r6, pc}
    f1d2:	4605      	mov	r5, r0
    f1d4:	704b      	strb	r3, [r1, #1]
    f1d6:	2011      	movs	r0, #17
    f1d8:	460c      	mov	r4, r1
    f1da:	7008      	strb	r0, [r1, #0]
    f1dc:	2220      	movs	r2, #32
    f1de:	f105 016e 	add.w	r1, r5, #110	; 0x6e
    f1e2:	1d20      	adds	r0, r4, #4
    f1e4:	f7fd fe7a 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f1e8:	2001      	movs	r0, #1
    f1ea:	7220      	strb	r0, [r4, #8]
    f1ec:	7920      	ldrb	r0, [r4, #4]
    f1ee:	2800      	cmp	r0, #0
    f1f0:	d1ee      	bne.n	f1d0 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x40>
    f1f2:	69e8      	ldr	r0, [r5, #28]
    f1f4:	8800      	ldrh	r0, [r0, #0]
    f1f6:	f7f6 f849 	bl	528c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f1fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f1fe:	f7fe bd75 	b.w	dcec <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    f202:	704b      	strb	r3, [r1, #1]
    f204:	2214      	movs	r2, #20
    f206:	700a      	strb	r2, [r1, #0]
    f208:	f850 2f98 	ldr.w	r2, [r0, #152]!
    f20c:	604a      	str	r2, [r1, #4]
    f20e:	8880      	ldrh	r0, [r0, #4]
    f210:	8108      	strh	r0, [r1, #8]
    f212:	bd70      	pop	{r4, r5, r6, pc}

0000f214 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    f214:	6880      	ldr	r0, [r0, #8]
    f216:	4770      	bx	lr

0000f218 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    f218:	2001      	movs	r0, #1
    f21a:	4770      	bx	lr

0000f21c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    f21c:	b510      	push	{r4, lr}
    f21e:	4604      	mov	r4, r0
    f220:	3020      	adds	r0, #32
    f222:	f000 f8ff 	bl	f424 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    f226:	8861      	ldrh	r1, [r4, #2]
    f228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f22c:	2228      	movs	r2, #40	; 0x28
    f22e:	f7f8 be29 	b.w	7e84 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000f232 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    f232:	2200      	movs	r2, #0
    f234:	8502      	strh	r2, [r0, #40]	; 0x28
    f236:	8843      	ldrh	r3, [r0, #2]
    f238:	2b1d      	cmp	r3, #29
    f23a:	d001      	beq.n	f240 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    f23c:	7341      	strb	r1, [r0, #13]
    f23e:	4770      	bx	lr
    f240:	7342      	strb	r2, [r0, #13]
    f242:	4770      	bx	lr

0000f244 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    f244:	b510      	push	{r4, lr}
    f246:	2400      	movs	r4, #0
    f248:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    f24a:	f7fe ffa1 	bl	e190 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    f24e:	b100      	cbz	r0, f252 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    f250:	2001      	movs	r0, #1
    f252:	4384      	bics	r4, r0
    f254:	f084 0001 	eor.w	r0, r4, #1
    f258:	bd10      	pop	{r4, pc}

0000f25a <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    f25a:	2000      	movs	r0, #0
    f25c:	4770      	bx	lr

0000f25e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    f25e:	7880      	ldrb	r0, [r0, #2]
    f260:	f000 0001 	and.w	r0, r0, #1
    f264:	4770      	bx	lr

0000f266 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    f266:	7880      	ldrb	r0, [r0, #2]
    f268:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    f26c:	4770      	bx	lr

0000f26e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    f26e:	2001      	movs	r0, #1
    f270:	4770      	bx	lr

0000f272 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    f272:	7880      	ldrb	r0, [r0, #2]
    f274:	f3c0 0040 	ubfx	r0, r0, #1, #1
    f278:	4770      	bx	lr

0000f27a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    f27a:	f990 000e 	ldrsb.w	r0, [r0, #14]
    f27e:	4770      	bx	lr

0000f280 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    f280:	7800      	ldrb	r0, [r0, #0]
    f282:	28ff      	cmp	r0, #255	; 0xff
    f284:	d001      	beq.n	f28a <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    f286:	2001      	movs	r0, #1
    f288:	4770      	bx	lr
    f28a:	2000      	movs	r0, #0
    f28c:	4770      	bx	lr

0000f28e <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    f28e:	680a      	ldr	r2, [r1, #0]
    f290:	f840 2f11 	str.w	r2, [r0, #17]!
    f294:	8889      	ldrh	r1, [r1, #4]
    f296:	8081      	strh	r1, [r0, #4]
    f298:	2101      	movs	r1, #1
    f29a:	7181      	strb	r1, [r0, #6]
    f29c:	4770      	bx	lr

0000f29e <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    f29e:	7b00      	ldrb	r0, [r0, #12]
    f2a0:	4770      	bx	lr

0000f2a2 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    f2a2:	2001      	movs	r0, #1
    f2a4:	4770      	bx	lr

0000f2a6 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    f2a6:	61c1      	str	r1, [r0, #28]
    f2a8:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
    f2ac:	724a      	strb	r2, [r1, #9]
    f2ae:	f8d0 2049 	ldr.w	r2, [r0, #73]	; 0x49
    f2b2:	f8c1 200a 	str.w	r2, [r1, #10]
    f2b6:	f8b0 004d 	ldrh.w	r0, [r0, #77]	; 0x4d
    f2ba:	81c8      	strh	r0, [r1, #14]
    f2bc:	4770      	bx	lr

0000f2be <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    f2be:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    f2c2:	4770      	bx	lr

0000f2c4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    f2c4:	b510      	push	{r4, lr}
    f2c6:	4604      	mov	r4, r0
    f2c8:	7880      	ldrb	r0, [r0, #2]
    f2ca:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    f2ce:	b158      	cbz	r0, f2e8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    f2d0:	233c      	movs	r3, #60	; 0x3c
    f2d2:	22ff      	movs	r2, #255	; 0xff
    f2d4:	4620      	mov	r0, r4
    f2d6:	69e1      	ldr	r1, [r4, #28]
    f2d8:	f7f8 fc18 	bl	7b0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x434>
    f2dc:	220e      	movs	r2, #14
    f2de:	4621      	mov	r1, r4
    f2e0:	f104 0064 	add.w	r0, r4, #100	; 0x64
    f2e4:	f7f7 fcb0 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f2e8:	78a0      	ldrb	r0, [r4, #2]
    f2ea:	07c0      	lsls	r0, r0, #31
    f2ec:	f7f7 fd7e 	bl	6dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f2f0:	2001      	movs	r0, #1
    f2f2:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
    f2f6:	bd10      	pop	{r4, pc}

0000f2f8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    f2f8:	7bc0      	ldrb	r0, [r0, #15]
    f2fa:	2800      	cmp	r0, #0
    f2fc:	d000      	beq.n	f300 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    f2fe:	2001      	movs	r0, #1
    f300:	4770      	bx	lr
    f302:	b510      	push	{r4, lr}
    f304:	f7ff f876 	bl	e3f4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    f308:	4604      	mov	r4, r0
    f30a:	f7f7 f91f 	bl	654c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    f30e:	b138      	cbz	r0, f320 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    f310:	4620      	mov	r0, r4
    f312:	f7f7 f853 	bl	63bc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    f316:	b118      	cbz	r0, f320 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    f318:	2110      	movs	r1, #16
    f31a:	f7ff fa5d 	bl	e7d8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    f31e:	b108      	cbz	r0, f324 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    f320:	2000      	movs	r0, #0
    f322:	bd10      	pop	{r4, pc}
    f324:	2001      	movs	r0, #1
    f326:	bd10      	pop	{r4, pc}
    f328:	2101      	movs	r1, #1
    f32a:	f7f8 b855 	b.w	73d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    f32e:	2101      	movs	r1, #1
    f330:	f7f8 b852 	b.w	73d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    f334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f338:	4604      	mov	r4, r0
    f33a:	460f      	mov	r7, r1
    f33c:	7e40      	ldrb	r0, [r0, #25]
    f33e:	f7f6 fffd 	bl	633c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    f342:	4606      	mov	r6, r0
    f344:	7e20      	ldrb	r0, [r4, #24]
    f346:	f104 0549 	add.w	r5, r4, #73	; 0x49
    f34a:	b120      	cbz	r0, f356 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x5e>
    f34c:	b11e      	cbz	r6, f356 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x5e>
    f34e:	7e60      	ldrb	r0, [r4, #25]
    f350:	f7f6 ffe8 	bl	6324 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    f354:	b1a0      	cbz	r0, f380 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x88>
    f356:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    f35a:	2800      	cmp	r0, #0
    f35c:	d024      	beq.n	f3a8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    f35e:	7ea0      	ldrb	r0, [r4, #26]
    f360:	2800      	cmp	r0, #0
    f362:	d021      	beq.n	f3a8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    f364:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    f368:	4629      	mov	r1, r5
    f36a:	f7ff fe91 	bl	f090 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe0>
    f36e:	b1a8      	cbz	r0, f39c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa4>
    f370:	f7f6 ffd4 	bl	631c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    f374:	463a      	mov	r2, r7
    f376:	4629      	mov	r1, r5
    f378:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f37c:	f7fe bfd2 	b.w	e324 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    f380:	2001      	movs	r0, #1
    f382:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    f386:	463a      	mov	r2, r7
    f388:	4629      	mov	r1, r5
    f38a:	4630      	mov	r0, r6
    f38c:	f7fe ffca 	bl	e324 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    f390:	7e61      	ldrb	r1, [r4, #25]
    f392:	4628      	mov	r0, r5
    f394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f398:	f7f6 bfdc 	b.w	6354 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    f39c:	4639      	mov	r1, r7
    f39e:	4628      	mov	r0, r5
    f3a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f3a4:	f7fe bfad 	b.w	e302 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    f3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f3ac:	b510      	push	{r4, lr}
    f3ae:	4604      	mov	r4, r0
    f3b0:	4608      	mov	r0, r1
    f3b2:	f7fc fc31 	bl	bc18 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    f3b6:	7921      	ldrb	r1, [r4, #4]
    f3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f3bc:	2025      	movs	r0, #37	; 0x25
    f3be:	f7fc bc01 	b.w	bbc4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    f3c2:	b510      	push	{r4, lr}
    f3c4:	4604      	mov	r4, r0
    f3c6:	3026      	adds	r0, #38	; 0x26
    f3c8:	f7fc fbdc 	bl	bb84 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    f3cc:	2800      	cmp	r0, #0
    f3ce:	d102      	bne.n	f3d6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xde>
    f3d0:	207f      	movs	r0, #127	; 0x7f
    f3d2:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    f3d6:	bd10      	pop	{r4, pc}
    f3d8:	b570      	push	{r4, r5, r6, lr}
    f3da:	4614      	mov	r4, r2
    f3dc:	461d      	mov	r5, r3
    f3de:	4606      	mov	r6, r0
    f3e0:	f7f3 ff54 	bl	328c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    f3e4:	1900      	adds	r0, r0, r4
    f3e6:	4169      	adcs	r1, r5
    f3e8:	e9c6 0100 	strd	r0, r1, [r6]
    f3ec:	bd70      	pop	{r4, r5, r6, pc}
    f3ee:	7802      	ldrb	r2, [r0, #0]
    f3f0:	2320      	movs	r3, #32
    f3f2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    f3f6:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    f3fa:	430a      	orrs	r2, r1
    f3fc:	7002      	strb	r2, [r0, #0]
    f3fe:	4770      	bx	lr

0000f400 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    f400:	b570      	push	{r4, r5, r6, lr}
    f402:	7001      	strb	r1, [r0, #0]
    f404:	7042      	strb	r2, [r0, #1]
    f406:	4614      	mov	r4, r2
    f408:	460d      	mov	r5, r1
    f40a:	7880      	ldrb	r0, [r0, #2]
    f40c:	f000 f87f 	bl	f50e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f410:	fb10 f005 	smulbb	r0, r0, r5
    f414:	4360      	muls	r0, r4
    f416:	28ff      	cmp	r0, #255	; 0xff
    f418:	d303      	bcc.n	f422 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    f41a:	215c      	movs	r1, #92	; 0x5c
    f41c:	202e      	movs	r0, #46	; 0x2e
    f41e:	f7f5 fb0d 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f422:	bd70      	pop	{r4, r5, r6, pc}

0000f424 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    f424:	b510      	push	{r4, lr}
    f426:	4604      	mov	r4, r0
    f428:	7880      	ldrb	r0, [r0, #2]
    f42a:	f000 f870 	bl	f50e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f42e:	7861      	ldrb	r1, [r4, #1]
    f430:	7822      	ldrb	r2, [r4, #0]
    f432:	fb11 f102 	smulbb	r1, r1, r2
    f436:	4348      	muls	r0, r1
    f438:	b2c0      	uxtb	r0, r0
    f43a:	bd10      	pop	{r4, pc}

0000f43c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    f43c:	b510      	push	{r4, lr}
    f43e:	4604      	mov	r4, r0
    f440:	f000 f84d 	bl	f4de <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    f444:	7961      	ldrb	r1, [r4, #5]
    f446:	1c49      	adds	r1, r1, #1
    f448:	b2c9      	uxtb	r1, r1
    f44a:	7161      	strb	r1, [r4, #5]
    f44c:	7862      	ldrb	r2, [r4, #1]
    f44e:	4291      	cmp	r1, r2
    f450:	d10b      	bne.n	f46a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    f452:	2200      	movs	r2, #0
    f454:	7162      	strb	r2, [r4, #5]
    f456:	78e1      	ldrb	r1, [r4, #3]
    f458:	4301      	orrs	r1, r0
    f45a:	70e1      	strb	r1, [r4, #3]
    f45c:	78a3      	ldrb	r3, [r4, #2]
    f45e:	4299      	cmp	r1, r3
    f460:	d103      	bne.n	f46a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    f462:	70e2      	strb	r2, [r4, #3]
    f464:	7921      	ldrb	r1, [r4, #4]
    f466:	1c49      	adds	r1, r1, #1
    f468:	7121      	strb	r1, [r4, #4]
    f46a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f46e:	f000 b825 	b.w	f4bc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000f472 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    f472:	7081      	strb	r1, [r0, #2]
    f474:	4770      	bx	lr

0000f476 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    f476:	b570      	push	{r4, r5, r6, lr}
    f478:	4604      	mov	r4, r0
    f47a:	7880      	ldrb	r0, [r0, #2]
    f47c:	f000 f847 	bl	f50e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f480:	7861      	ldrb	r1, [r4, #1]
    f482:	fb11 f500 	smulbb	r5, r1, r0
    f486:	78e0      	ldrb	r0, [r4, #3]
    f488:	f000 f841 	bl	f50e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f48c:	7861      	ldrb	r1, [r4, #1]
    f48e:	7962      	ldrb	r2, [r4, #5]
    f490:	fb10 2001 	smlabb	r0, r0, r1, r2
    f494:	7821      	ldrb	r1, [r4, #0]
    f496:	7922      	ldrb	r2, [r4, #4]
    f498:	1a89      	subs	r1, r1, r2
    f49a:	fb11 f105 	smulbb	r1, r1, r5
    f49e:	1a08      	subs	r0, r1, r0
    f4a0:	b2c0      	uxtb	r0, r0
    f4a2:	bd70      	pop	{r4, r5, r6, pc}

0000f4a4 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    f4a4:	2100      	movs	r1, #0
    f4a6:	6001      	str	r1, [r0, #0]
    f4a8:	8081      	strh	r1, [r0, #4]
    f4aa:	2101      	movs	r1, #1
    f4ac:	7041      	strb	r1, [r0, #1]
    f4ae:	7001      	strb	r1, [r0, #0]
    f4b0:	4770      	bx	lr

0000f4b2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    f4b2:	2100      	movs	r1, #0
    f4b4:	70c1      	strb	r1, [r0, #3]
    f4b6:	7141      	strb	r1, [r0, #5]
    f4b8:	7101      	strb	r1, [r0, #4]
    f4ba:	4770      	bx	lr
    f4bc:	b510      	push	{r4, lr}
    f4be:	2801      	cmp	r0, #1
    f4c0:	d007      	beq.n	f4d2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    f4c2:	2802      	cmp	r0, #2
    f4c4:	d007      	beq.n	f4d6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    f4c6:	2804      	cmp	r0, #4
    f4c8:	d007      	beq.n	f4da <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    f4ca:	2139      	movs	r1, #57	; 0x39
    f4cc:	202e      	movs	r0, #46	; 0x2e
    f4ce:	f7f5 fab5 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4d2:	2025      	movs	r0, #37	; 0x25
    f4d4:	bd10      	pop	{r4, pc}
    f4d6:	2026      	movs	r0, #38	; 0x26
    f4d8:	bd10      	pop	{r4, pc}
    f4da:	2027      	movs	r0, #39	; 0x27
    f4dc:	bd10      	pop	{r4, pc}
    f4de:	4601      	mov	r1, r0
    f4e0:	2000      	movs	r0, #0
    f4e2:	788a      	ldrb	r2, [r1, #2]
    f4e4:	07d3      	lsls	r3, r2, #31
    f4e6:	d002      	beq.n	f4ee <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    f4e8:	78cb      	ldrb	r3, [r1, #3]
    f4ea:	07db      	lsls	r3, r3, #31
    f4ec:	d006      	beq.n	f4fc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    f4ee:	0793      	lsls	r3, r2, #30
    f4f0:	d506      	bpl.n	f500 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    f4f2:	78cb      	ldrb	r3, [r1, #3]
    f4f4:	079b      	lsls	r3, r3, #30
    f4f6:	d403      	bmi.n	f500 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    f4f8:	2002      	movs	r0, #2
    f4fa:	4770      	bx	lr
    f4fc:	2001      	movs	r0, #1
    f4fe:	4770      	bx	lr
    f500:	0752      	lsls	r2, r2, #29
    f502:	d5fc      	bpl.n	f4fe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    f504:	78c9      	ldrb	r1, [r1, #3]
    f506:	0749      	lsls	r1, r1, #29
    f508:	d4f9      	bmi.n	f4fe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    f50a:	2004      	movs	r0, #4
    f50c:	4770      	bx	lr
    f50e:	f3c0 0180 	ubfx	r1, r0, #2, #1
    f512:	f3c0 0240 	ubfx	r2, r0, #1, #1
    f516:	4411      	add	r1, r2
    f518:	f000 0001 	and.w	r0, r0, #1
    f51c:	4408      	add	r0, r1
    f51e:	4770      	bx	lr

0000f520 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    f520:	f240 315a 	movw	r1, #858	; 0x35a
    f524:	4348      	muls	r0, r1
    f526:	4770      	bx	lr

0000f528 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    f528:	f240 20ef 	movw	r0, #751	; 0x2ef
    f52c:	4770      	bx	lr
    f52e:	020e      	.short	0x020e
    f530:	0630041c 	.word	0x0630041c
    f534:	035a0c60 	.word	0x035a0c60
    f538:	05c506b4 	.word	0x05c506b4
    f53c:	12250bf5 	.word	0x12250bf5
    f540:	03b101a3 	.word	0x03b101a3
    f544:	02ef05bf 	.word	0x02ef05bf
    f548:	09a30649 	.word	0x09a30649

0000f54c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    f54c:	b510      	push	{r4, lr}
    f54e:	f890 1108 	ldrb.w	r1, [r0, #264]	; 0x108
    f552:	b109      	cbz	r1, f558 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    f554:	2000      	movs	r0, #0
    f556:	bd10      	pop	{r4, pc}
    f558:	f890 10c8 	ldrb.w	r1, [r0, #200]	; 0xc8
    f55c:	b131      	cbz	r1, f56c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    f55e:	e9d0 1233 	ldrd	r1, r2, [r0, #204]	; 0xcc
    f562:	428a      	cmp	r2, r1
    f564:	d902      	bls.n	f56c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    f566:	f7ff fead 	bl	f2c4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f56a:	e7f3      	b.n	f554 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    f56c:	2001      	movs	r0, #1
    f56e:	bd10      	pop	{r4, pc}

0000f570 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    f570:	b510      	push	{r4, lr}
    f572:	b131      	cbz	r1, f582 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    f574:	2901      	cmp	r1, #1
    f576:	d008      	beq.n	f58a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    f578:	f240 7195 	movw	r1, #1941	; 0x795
    f57c:	2030      	movs	r0, #48	; 0x30
    f57e:	f7f5 fa5d 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f586:	f000 b9ec 	b.w	f962 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x344>
    f58a:	2100      	movs	r1, #0
    f58c:	f880 10c8 	strb.w	r1, [r0, #200]	; 0xc8
    f590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f594:	f000 b948 	b.w	f828 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>

0000f598 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    f598:	b510      	push	{r4, lr}
    f59a:	4604      	mov	r4, r0
    f59c:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    f5a0:	2800      	cmp	r0, #0
    f5a2:	d019      	beq.n	f5d8 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    f5a4:	2001      	movs	r0, #1
    f5a6:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
    f5aa:	4601      	mov	r1, r0
    f5ac:	4620      	mov	r0, r4
    f5ae:	f7ff fe86 	bl	f2be <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    f5b2:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    f5b6:	b170      	cbz	r0, f5d6 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    f5b8:	f814 0fc0 	ldrb.w	r0, [r4, #192]!
    f5bc:	f7f3 fa34 	bl	2a28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    f5c0:	7820      	ldrb	r0, [r4, #0]
    f5c2:	f7f3 fb99 	bl	2cf8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    f5c6:	f814 09c0 	ldrb.w	r0, [r4], #-192
    f5ca:	f7f3 fb73 	bl	2cb4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f5ce:	b120      	cbz	r0, f5da <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    f5d0:	2000      	movs	r0, #0
    f5d2:	f884 00d8 	strb.w	r0, [r4, #216]	; 0xd8
    f5d6:	2000      	movs	r0, #0
    f5d8:	bd10      	pop	{r4, pc}
    f5da:	f240 2109 	movw	r1, #521	; 0x209
    f5de:	2030      	movs	r0, #48	; 0x30
    f5e0:	f7f5 fa2c 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f5e4 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    f5e4:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
    f5e8:	4770      	bx	lr

0000f5ea <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    f5ea:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    f5ee:	4770      	bx	lr

0000f5f0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    f5f0:	b50e      	push	{r1, r2, r3, lr}
    f5f2:	4669      	mov	r1, sp
    f5f4:	2001      	movs	r0, #1
    f5f6:	f7fe fcad 	bl	df54 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f5fa:	b138      	cbz	r0, f60c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
    f5fc:	f240 1137 	movw	r1, #311	; 0x137
    f600:	2030      	movs	r0, #48	; 0x30
    f602:	f7f5 fa1b 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f606:	9802      	ldr	r0, [sp, #8]
    f608:	f7ff ffc6 	bl	f598 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    f60c:	4668      	mov	r0, sp
    f60e:	f7f5 fc59 	bl	4ec4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f612:	2800      	cmp	r0, #0
    f614:	d0f7      	beq.n	f606 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x16>
    f616:	f7f8 fdd9 	bl	81cc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    f61a:	2000      	movs	r0, #0
    f61c:	bd0e      	pop	{r1, r2, r3, pc}

0000f61e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    f61e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f620:	4604      	mov	r4, r0
    f622:	f890 01d3 	ldrb.w	r0, [r0, #467]	; 0x1d3
    f626:	2800      	cmp	r0, #0
    f628:	d15f      	bne.n	f6ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f62a:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    f62e:	2803      	cmp	r0, #3
    f630:	d15b      	bne.n	f6ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f632:	f7f3 fe2b 	bl	328c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    f636:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
    f63a:	f8d4 223c 	ldr.w	r2, [r4, #572]	; 0x23c
    f63e:	1ac0      	subs	r0, r0, r3
    f640:	eb61 0102 	sbc.w	r1, r1, r2
    f644:	2300      	movs	r3, #0
    f646:	461a      	mov	r2, r3
    f648:	1a1b      	subs	r3, r3, r0
    f64a:	418a      	sbcs	r2, r1
    f64c:	da4d      	bge.n	f6ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f64e:	1c42      	adds	r2, r0, #1
    f650:	f171 0100 	sbcs.w	r1, r1, #0
    f654:	db02      	blt.n	f65c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    f656:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
    f65a:	e036      	b.n	f6ca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    f65c:	6921      	ldr	r1, [r4, #16]
    f65e:	b111      	cbz	r1, f666 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    f660:	fbb0 f0f1 	udiv	r0, r0, r1
    f664:	e000      	b.n	f668 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    f666:	2000      	movs	r0, #0
    f668:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    f66c:	1c40      	adds	r0, r0, #1
    f66e:	4408      	add	r0, r1
    f670:	f8a4 0214 	strh.w	r0, [r4, #532]	; 0x214
    f674:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
    f678:	f8b4 11cc 	ldrh.w	r1, [r4, #460]	; 0x1cc
    f67c:	1a08      	subs	r0, r1, r0
    f67e:	b200      	sxth	r0, r0
    f680:	2800      	cmp	r0, #0
    f682:	dd32      	ble.n	f6ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f684:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    f688:	f7f3 f9ce 	bl	2a28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    f68c:	2800      	cmp	r0, #0
    f68e:	d02c      	beq.n	f6ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f690:	20ff      	movs	r0, #255	; 0xff
    f692:	f884 0219 	strb.w	r0, [r4, #537]	; 0x219
    f696:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	; 0xb6
    f69a:	f8b4 10b4 	ldrh.w	r1, [r4, #180]	; 0xb4
    f69e:	ae01      	add	r6, sp, #4
    f6a0:	1a40      	subs	r0, r0, r1
    f6a2:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    f6a6:	1e40      	subs	r0, r0, #1
    f6a8:	4408      	add	r0, r1
    f6aa:	b285      	uxth	r5, r0
    f6ac:	e017      	b.n	f6de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    f6ae:	9600      	str	r6, [sp, #0]
    f6b0:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
    f6b4:	2300      	movs	r3, #0
    f6b6:	2201      	movs	r2, #1
    f6b8:	4620      	mov	r0, r4
    f6ba:	f7f8 fe5b 	bl	8374 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    f6be:	2800      	cmp	r0, #0
    f6c0:	d013      	beq.n	f6ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f6c2:	2801      	cmp	r0, #1
    f6c4:	d004      	beq.n	f6d0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    f6c6:	f240 6101 	movw	r1, #1537	; 0x601
    f6ca:	2030      	movs	r0, #48	; 0x30
    f6cc:	f7f5 f9b6 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6d0:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
    f6d4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    f6d8:	4408      	add	r0, r1
    f6da:	f8a4 0214 	strh.w	r0, [r4, #532]	; 0x214
    f6de:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
    f6e2:	1a28      	subs	r0, r5, r0
    f6e4:	b200      	sxth	r0, r0
    f6e6:	2800      	cmp	r0, #0
    f6e8:	dae1      	bge.n	f6ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    f6ea:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f6ec:	2000      	movs	r0, #0
    f6ee:	4770      	bx	lr
    f6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f6f4:	4604      	mov	r4, r0
    f6f6:	2501      	movs	r5, #1
    f6f8:	f000 f90c 	bl	f914 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    f6fc:	2600      	movs	r6, #0
    f6fe:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
    f702:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
    f706:	2701      	movs	r7, #1
    f708:	f884 70eb 	strb.w	r7, [r4, #235]	; 0xeb
    f70c:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    f710:	f104 08e0 	add.w	r8, r4, #224	; 0xe0
    f714:	b169      	cbz	r1, f732 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x114>
    f716:	e9f4 013c 	ldrd	r0, r1, [r4, #240]!	; 0xf0
    f71a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f71e:	1880      	adds	r0, r0, r2
    f720:	f141 0100 	adc.w	r1, r1, #0
    f724:	e864 013c 	strd	r0, r1, [r4], #-240	; 0xf0
    f728:	2100      	movs	r1, #0
    f72a:	4640      	mov	r0, r8
    f72c:	f7fe ff89 	bl	e642 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f730:	e00d      	b.n	f74e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x130>
    f732:	4620      	mov	r0, r4
    f734:	f7ff fd6e 	bl	f214 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f738:	4601      	mov	r1, r0
    f73a:	e9f4 203c 	ldrd	r2, r0, [r4, #240]!	; 0xf0
    f73e:	1852      	adds	r2, r2, r1
    f740:	4170      	adcs	r0, r6
    f742:	e864 203c 	strd	r2, r0, [r4], #-240	; 0xf0
    f746:	4640      	mov	r0, r8
    f748:	f7fe ff7b 	bl	e642 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f74c:	1c45      	adds	r5, r0, #1
    f74e:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
    f752:	1c41      	adds	r1, r0, #1
    f754:	290a      	cmp	r1, #10
    f756:	d202      	bcs.n	f75e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x140>
    f758:	4428      	add	r0, r5
    f75a:	f8a4 00f8 	strh.w	r0, [r4, #248]	; 0xf8
    f75e:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    f762:	b138      	cbz	r0, f774 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x156>
    f764:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
    f768:	1c40      	adds	r0, r0, #1
    f76a:	280a      	cmp	r0, #10
    f76c:	d302      	bcc.n	f774 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x156>
    f76e:	f884 70ea 	strb.w	r7, [r4, #234]	; 0xea
    f772:	e002      	b.n	f77a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15c>
    f774:	2002      	movs	r0, #2
    f776:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
    f77a:	4620      	mov	r0, r4
    f77c:	f000 f823 	bl	f7c6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1a8>
    f780:	b120      	cbz	r0, f78c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16e>
    f782:	4620      	mov	r0, r4
    f784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f788:	f000 b80e 	b.w	f7a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18a>
    f78c:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
    f790:	4641      	mov	r1, r8
    f792:	f000 f8bd 	bl	f910 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
    f796:	2800      	cmp	r0, #0
    f798:	d104      	bne.n	f7a4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x186>
    f79a:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
    f79e:	2030      	movs	r0, #48	; 0x30
    f7a0:	f7f5 f94c 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f7a8:	b510      	push	{r4, lr}
    f7aa:	4604      	mov	r4, r0
    f7ac:	f814 0fc0 	ldrb.w	r0, [r4, #192]!
    f7b0:	f7f3 fa80 	bl	2cb4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f7b4:	2000      	movs	r0, #0
    f7b6:	7620      	strb	r0, [r4, #24]
    f7b8:	bd10      	pop	{r4, pc}
    f7ba:	b510      	push	{r4, lr}
    f7bc:	f7ff fd2e 	bl	f21c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    f7c0:	f500 7088 	add.w	r0, r0, #272	; 0x110
    f7c4:	bd10      	pop	{r4, pc}
    f7c6:	b570      	push	{r4, r5, r6, lr}
    f7c8:	4605      	mov	r5, r0
    f7ca:	f890 0108 	ldrb.w	r0, [r0, #264]	; 0x108
    f7ce:	b108      	cbz	r0, f7d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b6>
    f7d0:	2001      	movs	r0, #1
    f7d2:	bd70      	pop	{r4, r5, r6, pc}
    f7d4:	e9d5 1040 	ldrd	r1, r0, [r5, #256]	; 0x100
    f7d8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    f7dc:	4050      	eors	r0, r2
    f7de:	ea70 0101 	orns	r1, r0, r1
    f7e2:	d011      	beq.n	f808 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ea>
    f7e4:	2400      	movs	r4, #0
    f7e6:	4628      	mov	r0, r5
    f7e8:	f7ff ffe7 	bl	f7ba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
    f7ec:	e9f5 123c 	ldrd	r1, r2, [r5, #240]!	; 0xf0
    f7f0:	1840      	adds	r0, r0, r1
    f7f2:	4154      	adcs	r4, r2
    f7f4:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    f7f8:	3df0      	subs	r5, #240	; 0xf0
    f7fa:	1a10      	subs	r0, r2, r0
    f7fc:	41a1      	sbcs	r1, r4
    f7fe:	d503      	bpl.n	f808 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ea>
    f800:	4628      	mov	r0, r5
    f802:	f7ff fd5f 	bl	f2c4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f806:	e7e3      	b.n	f7d0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    f808:	2000      	movs	r0, #0
    f80a:	bd70      	pop	{r4, r5, r6, pc}
    f80c:	b510      	push	{r4, lr}
    f80e:	4604      	mov	r4, r0
    f810:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    f814:	f000 f9f2 	bl	fbfc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5de>
    f818:	4602      	mov	r2, r0
    f81a:	4620      	mov	r0, r4
    f81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f820:	f240 111b 	movw	r1, #283	; 0x11b
    f824:	f7ff bb85 	b.w	ef32 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    f828:	b510      	push	{r4, lr}
    f82a:	f7fc f833 	bl	b894 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    f82e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f832:	f7f3 bba1 	b.w	2f78 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    f836:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f83a:	4604      	mov	r4, r0
    f83c:	f890 021a 	ldrb.w	r0, [r0, #538]	; 0x21a
    f840:	2800      	cmp	r0, #0
    f842:	d051      	beq.n	f8e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ca>
    f844:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    f848:	2803      	cmp	r0, #3
    f84a:	d14d      	bne.n	f8e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ca>
    f84c:	f894 906f 	ldrb.w	r9, [r4, #111]	; 0x6f
    f850:	f001 fa5b 	bl	10d0a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    f854:	4605      	mov	r5, r0
    f856:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
    f85a:	f7f8 fca9 	bl	81b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    f85e:	4428      	add	r0, r5
    f860:	b286      	uxth	r6, r0
    f862:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
    f866:	f7f8 fca3 	bl	81b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    f86a:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    f86e:	fa1f f880 	uxth.w	r8, r0
    f872:	4648      	mov	r0, r9
    f874:	f7fc f8cc 	bl	ba10 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f878:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    f87c:	1a0d      	subs	r5, r1, r0
    f87e:	4648      	mov	r0, r9
    f880:	f7fc f8f2 	bl	ba68 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f884:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    f888:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f88c:	fbb0 f0fa 	udiv	r0, r0, sl
    f890:	1a2d      	subs	r5, r5, r0
    f892:	4648      	mov	r0, r9
    f894:	f7fc f8bc 	bl	ba10 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f898:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
    f89c:	1a0f      	subs	r7, r1, r0
    f89e:	4648      	mov	r0, r9
    f8a0:	f7fc f8e2 	bl	ba68 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f8a4:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f8a8:	4401      	add	r1, r0
    f8aa:	fbb1 f0fa 	udiv	r0, r1, sl
    f8ae:	1a39      	subs	r1, r7, r0
    f8b0:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    f8b4:	4370      	muls	r0, r6
    f8b6:	fbb0 f2f8 	udiv	r2, r0, r8
    f8ba:	2029      	movs	r0, #41	; 0x29
    f8bc:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    f8c0:	3260      	adds	r2, #96	; 0x60
    f8c2:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    f8c6:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    f8ca:	42a9      	cmp	r1, r5
    f8cc:	d801      	bhi.n	f8d2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    f8ce:	4285      	cmp	r5, r0
    f8d0:	d901      	bls.n	f8d6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b8>
    f8d2:	f7f4 fcf1 	bl	42b8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    f8d6:	4631      	mov	r1, r6
    f8d8:	6920      	ldr	r0, [r4, #16]
    f8da:	f7fd f9d0 	bl	cc7e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    f8de:	2100      	movs	r1, #0
    f8e0:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    f8e4:	f884 121a 	strb.w	r1, [r4, #538]	; 0x21a
    f8e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f8ec:	b570      	push	{r4, r5, r6, lr}
    f8ee:	460c      	mov	r4, r1
    f8f0:	4605      	mov	r5, r0
    f8f2:	f7fc f8b9 	bl	ba68 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f8f6:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f8fa:	4408      	add	r0, r1
    f8fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f900:	fbb0 f6f1 	udiv	r6, r0, r1
    f904:	4628      	mov	r0, r5
    f906:	f7fc f883 	bl	ba10 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f90a:	4430      	add	r0, r6
    f90c:	4420      	add	r0, r4
    f90e:	bd70      	pop	{r4, r5, r6, pc}
    f910:	f7f2 bcf0 	b.w	22f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f914:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f916:	4604      	mov	r4, r0
    f918:	f7ff fca9 	bl	f26e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f91c:	b1f8      	cbz	r0, f95e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x340>
    f91e:	4620      	mov	r0, r4
    f920:	f7ff fc9d 	bl	f25e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f924:	b918      	cbnz	r0, f92e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x310>
    f926:	4620      	mov	r0, r4
    f928:	f7ff fca3 	bl	f272 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f92c:	b140      	cbz	r0, f940 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x322>
    f92e:	2449      	movs	r4, #73	; 0x49
    f930:	4668      	mov	r0, sp
    f932:	f7f4 ff5d 	bl	47f0 <mpsl_fem_pa_is_configured>
    f936:	f89d 0000 	ldrb.w	r0, [sp]
    f93a:	b118      	cbz	r0, f944 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x326>
    f93c:	2501      	movs	r5, #1
    f93e:	e002      	b.n	f946 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
    f940:	2442      	movs	r4, #66	; 0x42
    f942:	e7f5      	b.n	f930 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x312>
    f944:	2500      	movs	r5, #0
    f946:	a801      	add	r0, sp, #4
    f948:	f7f4 ff3a 	bl	47c0 <mpsl_fem_lna_is_configured>
    f94c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f950:	b100      	cbz	r0, f954 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x336>
    f952:	2001      	movs	r0, #1
    f954:	4305      	orrs	r5, r0
    f956:	d000      	beq.n	f95a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x33c>
    f958:	3409      	adds	r4, #9
    f95a:	4620      	mov	r0, r4
    f95c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f95e:	206b      	movs	r0, #107	; 0x6b
    f960:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f962:	b570      	push	{r4, r5, r6, lr}
    f964:	4604      	mov	r4, r0
    f966:	f890 00c1 	ldrb.w	r0, [r0, #193]	; 0xc1
    f96a:	2500      	movs	r5, #0
    f96c:	b138      	cbz	r0, f97e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x360>
    f96e:	f7f7 fbb3 	bl	70d8 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    f972:	f242 7110 	movw	r1, #10000	; 0x2710
    f976:	fbb0 f2f1 	udiv	r2, r0, r1
    f97a:	fb01 0512 	mls	r5, r1, r2, r0
    f97e:	4620      	mov	r0, r4
    f980:	f7ff fc48 	bl	f214 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f984:	e9d4 213c 	ldrd	r2, r1, [r4, #240]	; 0xf0
    f988:	4428      	add	r0, r5
    f98a:	34e0      	adds	r4, #224	; 0xe0
    f98c:	2500      	movs	r5, #0
    f98e:	1882      	adds	r2, r0, r2
    f990:	eb45 0001 	adc.w	r0, r5, r1
    f994:	e9c4 2004 	strd	r2, r0, [r4, #16]
    f998:	f804 5b0b 	strb.w	r5, [r4], #11
    f99c:	2001      	movs	r0, #1
    f99e:	f804 0901 	strb.w	r0, [r4], #-1
    f9a2:	2002      	movs	r0, #2
    f9a4:	f804 09ea 	strb.w	r0, [r4], #-234
    f9a8:	4620      	mov	r0, r4
    f9aa:	f7ff ffb3 	bl	f914 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    f9ae:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
    f9b2:	4620      	mov	r0, r4
    f9b4:	f7ff ff07 	bl	f7c6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1a8>
    f9b8:	b930      	cbnz	r0, f9c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3aa>
    f9ba:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
    f9be:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
    f9c2:	f7ff ffa5 	bl	f910 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
    f9c6:	b128      	cbz	r0, f9d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3b6>
    f9c8:	f8a4 50f8 	strh.w	r5, [r4, #248]	; 0xf8
    f9cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f9d0:	f7ff bf2a 	b.w	f828 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>
    f9d4:	f240 61ef 	movw	r1, #1775	; 0x6ef
    f9d8:	2030      	movs	r0, #48	; 0x30
    f9da:	f7f5 f82f 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9de:	b510      	push	{r4, lr}
    f9e0:	4604      	mov	r4, r0
    f9e2:	2000      	movs	r0, #0
    f9e4:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    f9e8:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    f9ec:	f7f3 f962 	bl	2cb4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f9f0:	2020      	movs	r0, #32
    f9f2:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    f9f6:	bd10      	pop	{r4, pc}
    f9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f9fc:	4604      	mov	r4, r0
    f9fe:	2500      	movs	r5, #0
    fa00:	f880 50c8 	strb.w	r5, [r0, #200]	; 0xc8
    fa04:	e9d4 673c 	ldrd	r6, r7, [r4, #240]	; 0xf0
    fa08:	4689      	mov	r9, r1
    fa0a:	f880 50d8 	strb.w	r5, [r0, #216]	; 0xd8
    fa0e:	f04f 0801 	mov.w	r8, #1
    fa12:	f880 80d9 	strb.w	r8, [r0, #217]	; 0xd9
    fa16:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
    fa1a:	4641      	mov	r1, r8
    fa1c:	34c0      	adds	r4, #192	; 0xc0
    fa1e:	f7f6 ff1d 	bl	685c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    fa22:	6860      	ldr	r0, [r4, #4]
    fa24:	f8c0 6238 	str.w	r6, [r0, #568]	; 0x238
    fa28:	f8c0 723c 	str.w	r7, [r0, #572]	; 0x23c
    fa2c:	6861      	ldr	r1, [r4, #4]
    fa2e:	7820      	ldrb	r0, [r4, #0]
    fa30:	f881 024c 	strb.w	r0, [r1, #588]	; 0x24c
    fa34:	6861      	ldr	r1, [r4, #4]
    fa36:	f8c1 9250 	str.w	r9, [r1, #592]	; 0x250
    fa3a:	6860      	ldr	r0, [r4, #4]
    fa3c:	e9c0 6790 	strd	r6, r7, [r0, #576]	; 0x240
    fa40:	6864      	ldr	r4, [r4, #4]
    fa42:	f884 5204 	strb.w	r5, [r4, #516]	; 0x204
    fa46:	2300      	movs	r3, #0
    fa48:	f8a4 5248 	strh.w	r5, [r4, #584]	; 0x248
    fa4c:	461a      	mov	r2, r3
    fa4e:	4619      	mov	r1, r3
    fa50:	4620      	mov	r0, r4
    fa52:	9500      	str	r5, [sp, #0]
    fa54:	f7f8 fc8e 	bl	8374 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    fa58:	b120      	cbz	r0, fa64 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x446>
    fa5a:	f240 211d 	movw	r1, #541	; 0x21d
    fa5e:	2030      	movs	r0, #48	; 0x30
    fa60:	f7f4 ffec 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa64:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    fa68:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
    fa6c:	f884 8204 	strb.w	r8, [r4, #516]	; 0x204
    fa70:	f8a4 5216 	strh.w	r5, [r4, #534]	; 0x216
    fa74:	f8a4 5214 	strh.w	r5, [r4, #532]	; 0x214
    fa78:	347c      	adds	r4, #124	; 0x7c
    fa7a:	f884 519d 	strb.w	r5, [r4, #413]	; 0x19d
    fa7e:	8820      	ldrh	r0, [r4, #0]
    fa80:	1e40      	subs	r0, r0, #1
    fa82:	8020      	strh	r0, [r4, #0]
    fa84:	f8a4 51ce 	strh.w	r5, [r4, #462]	; 0x1ce
    fa88:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fa8c:	f7ff becc 	b.w	f828 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>
    fa90:	b570      	push	{r4, r5, r6, lr}
    fa92:	b140      	cbz	r0, faa6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x488>
    fa94:	2909      	cmp	r1, #9
    fa96:	d248      	bcs.n	fb2a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x50c>
    fa98:	e8df f001 	tbb	[pc, r1]
    fa9c:	3b3b1507 	.word	0x3b3b1507
    faa0:	3f294737 	.word	0x3f294737
    faa4:	0043      	.short	0x0043
    faa6:	21ca      	movs	r1, #202	; 0xca
    faa8:	e03c      	b.n	fb24 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
    faaa:	4604      	mov	r4, r0
    faac:	f7f7 fc64 	bl	7378 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    fab0:	b110      	cbz	r0, fab8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    fab2:	f240 2179 	movw	r1, #633	; 0x279
    fab6:	e035      	b.n	fb24 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
    fab8:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    fabc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fac0:	38ff      	subs	r0, #255	; 0xff
    fac2:	f7f3 bb29 	b.w	3118 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    fac6:	4605      	mov	r5, r0
    fac8:	f7ff fbcd 	bl	f266 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    facc:	b9a8      	cbnz	r0, fafa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    face:	4628      	mov	r0, r5
    fad0:	f7ff fe73 	bl	f7ba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
    fad4:	4604      	mov	r4, r0
    fad6:	f8d5 00e4 	ldr.w	r0, [r5, #228]	; 0xe4
    fada:	42a0      	cmp	r0, r4
    fadc:	d20b      	bcs.n	faf6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4d8>
    fade:	1a20      	subs	r0, r4, r0
    fae0:	2103      	movs	r1, #3
    fae2:	f7f2 fa25 	bl	1f30 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    fae6:	b130      	cbz	r0, faf6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4d8>
    fae8:	4628      	mov	r0, r5
    faea:	f8c5 40e4 	str.w	r4, [r5, #228]	; 0xe4
    faee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    faf2:	f7ff bb4b 	b.w	f18c <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    faf6:	f8c5 40e4 	str.w	r4, [r5, #228]	; 0xe4
    fafa:	4628      	mov	r0, r5
    fafc:	f7f7 fc58 	bl	73b0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    fb00:	2800      	cmp	r0, #0
    fb02:	d014      	beq.n	fb2e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x510>
    fb04:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    fb08:	e00c      	b.n	fb24 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
    fb0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fb0e:	f7fc b889 	b.w	bc24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    fb12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fb16:	f7ff bdeb 	b.w	f6f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
    fb1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fb1e:	f7ff be43 	b.w	f7a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18a>
    fb22:	21ea      	movs	r1, #234	; 0xea
    fb24:	2030      	movs	r0, #48	; 0x30
    fb26:	f7f4 ff89 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb2a:	21ee      	movs	r1, #238	; 0xee
    fb2c:	e7fa      	b.n	fb24 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
    fb2e:	bd70      	pop	{r4, r5, r6, pc}
    fb30:	b510      	push	{r4, lr}
    fb32:	0004      	movs	r4, r0
    fb34:	d008      	beq.n	fb48 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x52a>
    fb36:	2909      	cmp	r1, #9
    fb38:	d25e      	bcs.n	fbf8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5da>
    fb3a:	e8df f001 	tbb	[pc, r1]
    fb3e:	3807      	.short	0x3807
    fb40:	5d3c4040 	.word	0x5d3c4040
    fb44:	00594c45 	.word	0x00594c45
    fb48:	2193      	movs	r1, #147	; 0x93
    fb4a:	e052      	b.n	fbf2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5d4>
    fb4c:	2100      	movs	r1, #0
    fb4e:	f8c4 1254 	str.w	r1, [r4, #596]	; 0x254
    fb52:	f894 1218 	ldrb.w	r1, [r4, #536]	; 0x218
    fb56:	4620      	mov	r0, r4
    fb58:	b189      	cbz	r1, fb7e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x560>
    fb5a:	f8b0 2216 	ldrh.w	r2, [r0, #534]	; 0x216
    fb5e:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    fb62:	428a      	cmp	r2, r1
    fb64:	d106      	bne.n	fb74 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x556>
    fb66:	f8b0 21cc 	ldrh.w	r2, [r0, #460]	; 0x1cc
    fb6a:	1a51      	subs	r1, r2, r1
    fb6c:	f8a0 11ce 	strh.w	r1, [r0, #462]	; 0x1ce
    fb70:	4611      	mov	r1, r2
    fb72:	e00d      	b.n	fb90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x572>
    fb74:	1a51      	subs	r1, r2, r1
    fb76:	f8a0 11ce 	strh.w	r1, [r0, #462]	; 0x1ce
    fb7a:	b291      	uxth	r1, r2
    fb7c:	e008      	b.n	fb90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x572>
    fb7e:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
    fb82:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
    fb86:	1a89      	subs	r1, r1, r2
    fb88:	f8a0 11ce 	strh.w	r1, [r0, #462]	; 0x1ce
    fb8c:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
    fb90:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
    fb94:	e9d0 128c 	ldrd	r1, r2, [r0, #560]	; 0x230
    fb98:	f8c0 1238 	str.w	r1, [r0, #568]	; 0x238
    fb9c:	f8c0 223c 	str.w	r2, [r0, #572]	; 0x23c
    fba0:	f7f8 fed0 	bl	8944 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    fba4:	4620      	mov	r0, r4
    fba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fbaa:	f7f8 bded 	b.w	8788 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x614>
    fbae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fbb2:	f000 b925 	b.w	fe00 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    fbb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fbba:	f7fc b833 	b.w	bc24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    fbbe:	4620      	mov	r0, r4
    fbc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fbc4:	f000 b827 	b.w	fc16 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5f8>
    fbc8:	2001      	movs	r0, #1
    fbca:	f7f2 f9a1 	bl	1f10 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    fbce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fbd2:	f7fe bbdc 	b.w	e38e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    fbd6:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    fbda:	2804      	cmp	r0, #4
    fbdc:	d001      	beq.n	fbe2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5c4>
    fbde:	21b5      	movs	r1, #181	; 0xb5
    fbe0:	e007      	b.n	fbf2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5d4>
    fbe2:	4620      	mov	r0, r4
    fbe4:	f7ff fefb 	bl	f9de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3c0>
    fbe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fbec:	f7f7 b8fe 	b.w	6dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    fbf0:	21be      	movs	r1, #190	; 0xbe
    fbf2:	2030      	movs	r0, #48	; 0x30
    fbf4:	f7f4 ff22 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fbf8:	21c2      	movs	r1, #194	; 0xc2
    fbfa:	e7fa      	b.n	fbf2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5d4>
    fbfc:	b510      	push	{r4, lr}
    fbfe:	f7fb ff33 	bl	ba68 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fc02:	f64d 7141 	movw	r1, #57153	; 0xdf41
    fc06:	4408      	add	r0, r1
    fc08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fc0c:	fbb0 f0f1 	udiv	r0, r0, r1
    fc10:	f200 1079 	addw	r0, r0, #377	; 0x179
    fc14:	bd10      	pop	{r4, pc}
    fc16:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fc18:	4604      	mov	r4, r0
    fc1a:	f7f3 fb37 	bl	328c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    fc1e:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
    fc22:	f8d4 223c 	ldr.w	r2, [r4, #572]	; 0x23c
    fc26:	1ac0      	subs	r0, r0, r3
    fc28:	eb61 0102 	sbc.w	r1, r1, r2
    fc2c:	2200      	movs	r2, #0
    fc2e:	4613      	mov	r3, r2
    fc30:	1a12      	subs	r2, r2, r0
    fc32:	418b      	sbcs	r3, r1
    fc34:	db02      	blt.n	fc3c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x61e>
    fc36:	f240 6111 	movw	r1, #1553	; 0x611
    fc3a:	e052      	b.n	fce2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6c4>
    fc3c:	1c42      	adds	r2, r0, #1
    fc3e:	f171 0100 	sbcs.w	r1, r1, #0
    fc42:	db02      	blt.n	fc4a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x62c>
    fc44:	f240 6112 	movw	r1, #1554	; 0x612
    fc48:	e04b      	b.n	fce2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6c4>
    fc4a:	6922      	ldr	r2, [r4, #16]
    fc4c:	2100      	movs	r1, #0
    fc4e:	b10a      	cbz	r2, fc54 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x636>
    fc50:	fbb0 f1f2 	udiv	r1, r0, r2
    fc54:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    fc58:	280d      	cmp	r0, #13
    fc5a:	d00c      	beq.n	fc76 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x658>
    fc5c:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    fc60:	f8b4 2216 	ldrh.w	r2, [r4, #534]	; 0x216
    fc64:	1843      	adds	r3, r0, r1
    fc66:	1ad3      	subs	r3, r2, r3
    fc68:	b21b      	sxth	r3, r3
    fc6a:	2b00      	cmp	r3, #0
    fc6c:	db06      	blt.n	fc7c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x65e>
    fc6e:	1c52      	adds	r2, r2, #1
    fc70:	f8a4 2216 	strh.w	r2, [r4, #534]	; 0x216
    fc74:	e006      	b.n	fc84 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x666>
    fc76:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
    fc7a:	e012      	b.n	fca2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x684>
    fc7c:	1c49      	adds	r1, r1, #1
    fc7e:	4408      	add	r0, r1
    fc80:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
    fc84:	f894 0219 	ldrb.w	r0, [r4, #537]	; 0x219
    fc88:	f88d 0000 	strb.w	r0, [sp]
    fc8c:	9800      	ldr	r0, [sp, #0]
    fc8e:	9000      	str	r0, [sp, #0]
    fc90:	f89d 0000 	ldrb.w	r0, [sp]
    fc94:	b940      	cbnz	r0, fca8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x68a>
    fc96:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
    fc9a:	f8b4 11cc 	ldrh.w	r1, [r4, #460]	; 0x1cc
    fc9e:	4288      	cmp	r0, r1
    fca0:	d102      	bne.n	fca8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x68a>
    fca2:	1c40      	adds	r0, r0, #1
    fca4:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
    fca8:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    fcac:	1c40      	adds	r0, r0, #1
    fcae:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    fcb2:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	; 0xb6
    fcb6:	f8b4 10b4 	ldrh.w	r1, [r4, #180]	; 0xb4
    fcba:	1a40      	subs	r0, r0, r1
    fcbc:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    fcc0:	1e40      	subs	r0, r0, #1
    fcc2:	4408      	add	r0, r1
    fcc4:	b285      	uxth	r5, r0
    fcc6:	e026      	b.n	fd16 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f8>
    fcc8:	a801      	add	r0, sp, #4
    fcca:	2300      	movs	r3, #0
    fccc:	9000      	str	r0, [sp, #0]
    fcce:	461a      	mov	r2, r3
    fcd0:	4620      	mov	r0, r4
    fcd2:	f7f8 fb4f 	bl	8374 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    fcd6:	2800      	cmp	r0, #0
    fcd8:	d03b      	beq.n	fd52 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x734>
    fcda:	2801      	cmp	r0, #1
    fcdc:	d004      	beq.n	fce8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ca>
    fcde:	f240 6151 	movw	r1, #1617	; 0x651
    fce2:	2030      	movs	r0, #48	; 0x30
    fce4:	f7f4 feaa 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fce8:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
    fcec:	f8b4 11c8 	ldrh.w	r1, [r4, #456]	; 0x1c8
    fcf0:	1a42      	subs	r2, r0, r1
    fcf2:	b212      	sxth	r2, r2
    fcf4:	2a00      	cmp	r2, #0
    fcf6:	da09      	bge.n	fd0c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ee>
    fcf8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    fcfc:	4402      	add	r2, r0
    fcfe:	1aaa      	subs	r2, r5, r2
    fd00:	b212      	sxth	r2, r2
    fd02:	2a00      	cmp	r2, #0
    fd04:	da02      	bge.n	fd0c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ee>
    fd06:	f8a4 1216 	strh.w	r1, [r4, #534]	; 0x216
    fd0a:	e004      	b.n	fd16 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f8>
    fd0c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    fd10:	4408      	add	r0, r1
    fd12:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
    fd16:	f8b4 1216 	ldrh.w	r1, [r4, #534]	; 0x216
    fd1a:	1a68      	subs	r0, r5, r1
    fd1c:	b200      	sxth	r0, r0
    fd1e:	2800      	cmp	r0, #0
    fd20:	dad2      	bge.n	fcc8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
    fd22:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
    fd26:	b190      	cbz	r0, fd4e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x730>
    fd28:	2008      	movs	r0, #8
    fd2a:	f884 00a6 	strb.w	r0, [r4, #166]	; 0xa6
    fd2e:	2208      	movs	r2, #8
    fd30:	4621      	mov	r1, r4
    fd32:	f104 009d 	add.w	r0, r4, #157	; 0x9d
    fd36:	f7f6 ff87 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    fd3a:	4620      	mov	r0, r4
    fd3c:	f000 f862 	bl	fe04 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    fd40:	4620      	mov	r0, r4
    fd42:	f7ff fe4c 	bl	f9de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3c0>
    fd46:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    fd4a:	f7f7 b84f 	b.w	6dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    fd4e:	203e      	movs	r0, #62	; 0x3e
    fd50:	e7eb      	b.n	fd2a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x70c>
    fd52:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fd54:	00fa01f4 	.word	0x00fa01f4
    fd58:	00640096 	.word	0x00640096
    fd5c:	0032004b 	.word	0x0032004b
    fd60:	0014001e 	.word	0x0014001e
    fd64:	0005000a 	.word	0x0005000a
    fd68:	00010002 	.word	0x00010002
    fd6c:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    fd70:	f001 0307 	and.w	r3, r1, #7
    fd74:	7802      	ldrb	r2, [r0, #0]
    fd76:	2101      	movs	r1, #1
    fd78:	4099      	lsls	r1, r3
    fd7a:	438a      	bics	r2, r1
    fd7c:	7002      	strb	r2, [r0, #0]
    fd7e:	4770      	bx	lr
    fd80:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    fd84:	f001 0307 	and.w	r3, r1, #7
    fd88:	7802      	ldrb	r2, [r0, #0]
    fd8a:	2101      	movs	r1, #1
    fd8c:	4099      	lsls	r1, r3
    fd8e:	430a      	orrs	r2, r1
    fd90:	7002      	strb	r2, [r0, #0]
    fd92:	4770      	bx	lr

0000fd94 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    fd94:	b510      	push	{r4, lr}
    fd96:	4604      	mov	r4, r0
    fd98:	f8d0 027c 	ldr.w	r0, [r0, #636]	; 0x27c
    fd9c:	6921      	ldr	r1, [r4, #16]
    fd9e:	4288      	cmp	r0, r1
    fda0:	d109      	bne.n	fdb6 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    fda2:	f8b4 1280 	ldrh.w	r1, [r4, #640]	; 0x280
    fda6:	8b22      	ldrh	r2, [r4, #24]
    fda8:	4291      	cmp	r1, r2
    fdaa:	d104      	bne.n	fdb6 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    fdac:	f8b4 1282 	ldrh.w	r1, [r4, #642]	; 0x282
    fdb0:	8b62      	ldrh	r2, [r4, #26]
    fdb2:	4291      	cmp	r1, r2
    fdb4:	d016      	beq.n	fde4 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x50>
    fdb6:	8821      	ldrh	r1, [r4, #0]
    fdb8:	f8a4 11ae 	strh.w	r1, [r4, #430]	; 0x1ae
    fdbc:	f7fe fb6e 	bl	e49c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    fdc0:	f8a4 01b0 	strh.w	r0, [r4, #432]	; 0x1b0
    fdc4:	f8b4 0280 	ldrh.w	r0, [r4, #640]	; 0x280
    fdc8:	f8a4 01b2 	strh.w	r0, [r4, #434]	; 0x1b2
    fdcc:	f8b4 0282 	ldrh.w	r0, [r4, #642]	; 0x282
    fdd0:	f8a4 01b4 	strh.w	r0, [r4, #436]	; 0x1b4
    fdd4:	2206      	movs	r2, #6
    fdd6:	4621      	mov	r1, r4
    fdd8:	f504 70d1 	add.w	r0, r4, #418	; 0x1a2
    fddc:	f7f6 ff34 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    fde0:	f7f7 f804 	bl	6dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    fde4:	2102      	movs	r1, #2
    fde6:	4620      	mov	r0, r4
    fde8:	f7f6 fd38 	bl	685c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    fdec:	2000      	movs	r0, #0
    fdee:	f804 0f86 	strb.w	r0, [r4, #134]!
    fdf2:	2003      	movs	r0, #3
    fdf4:	7120      	strb	r0, [r4, #4]
    fdf6:	bd10      	pop	{r4, pc}

0000fdf8 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    fdf8:	f7f5 b9d4 	b.w	51a4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000fdfc <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    fdfc:	2000      	movs	r0, #0
    fdfe:	4770      	bx	lr

0000fe00 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    fe00:	f7f5 be90 	b.w	5b24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000fe04 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    fe04:	2100      	movs	r1, #0
    fe06:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    fe0a:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    fe0e:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    fe12:	f890 11d3 	ldrb.w	r1, [r0, #467]	; 0x1d3
    fe16:	b109      	cbz	r1, fe1c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    fe18:	2102      	movs	r1, #2
    fe1a:	e000      	b.n	fe1e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    fe1c:	2103      	movs	r1, #3
    fe1e:	f7f8 b96f 	b.w	8100 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    fe22:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
    fe26:	28fe      	cmp	r0, #254	; 0xfe
    fe28:	d001      	beq.n	fe2e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    fe2a:	2001      	movs	r0, #1
    fe2c:	4770      	bx	lr
    fe2e:	2000      	movs	r0, #0
    fe30:	4770      	bx	lr
    fe32:	b510      	push	{r4, lr}
    fe34:	2801      	cmp	r0, #1
    fe36:	d006      	beq.n	fe46 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    fe38:	2802      	cmp	r0, #2
    fe3a:	d004      	beq.n	fe46 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    fe3c:	f240 21a9 	movw	r1, #681	; 0x2a9
    fe40:	2006      	movs	r0, #6
    fe42:	f7f4 fdfb 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe46:	bd10      	pop	{r4, pc}
    fe48:	2801      	cmp	r0, #1
    fe4a:	d002      	beq.n	fe52 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    fe4c:	2802      	cmp	r0, #2
    fe4e:	d105      	bne.n	fe5c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    fe50:	e002      	b.n	fe58 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    fe52:	2901      	cmp	r1, #1
    fe54:	d004      	beq.n	fe60 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    fe56:	e001      	b.n	fe5c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    fe58:	2902      	cmp	r1, #2
    fe5a:	d001      	beq.n	fe60 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    fe5c:	2000      	movs	r0, #0
    fe5e:	4770      	bx	lr
    fe60:	2001      	movs	r0, #1
    fe62:	4770      	bx	lr
    fe64:	1a40      	subs	r0, r0, r1
    fe66:	b200      	sxth	r0, r0
    fe68:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    fe6c:	4288      	cmp	r0, r1
    fe6e:	dc01      	bgt.n	fe74 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    fe70:	2800      	cmp	r0, #0
    fe72:	dc01      	bgt.n	fe78 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    fe74:	2001      	movs	r0, #1
    fe76:	4770      	bx	lr
    fe78:	2000      	movs	r0, #0
    fe7a:	4770      	bx	lr
    fe7c:	4602      	mov	r2, r0
    fe7e:	2000      	movs	r0, #0
    fe80:	2a16      	cmp	r2, #22
    fe82:	d102      	bne.n	fe8a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x86>
    fe84:	4608      	mov	r0, r1
    fe86:	f7f9 bd35 	b.w	98f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb0>
    fe8a:	4770      	bx	lr
    fe8c:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    fe90:	f001 0107 	and.w	r1, r1, #7
    fe94:	7800      	ldrb	r0, [r0, #0]
    fe96:	40c8      	lsrs	r0, r1
    fe98:	f000 0001 	and.w	r0, r0, #1
    fe9c:	4770      	bx	lr
    fe9e:	b118      	cbz	r0, fea8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xa4>
    fea0:	2802      	cmp	r0, #2
    fea2:	d001      	beq.n	fea8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xa4>
    fea4:	2001      	movs	r0, #1
    fea6:	4770      	bx	lr
    fea8:	2000      	movs	r0, #0
    feaa:	4770      	bx	lr

0000feac <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    feac:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    feae:	7881      	ldrb	r1, [r0, #2]
    feb0:	4604      	mov	r4, r0
    feb2:	291a      	cmp	r1, #26
    feb4:	d025      	beq.n	ff02 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    feb6:	dc0e      	bgt.n	fed6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    feb8:	2916      	cmp	r1, #22
    feba:	d22c      	bcs.n	ff16 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    febc:	e8df f001 	tbb	[pc, r1]
    fec0:	2b2b2b2b 	.word	0x2b2b2b2b
    fec4:	2b2b212b 	.word	0x2b2b212b
    fec8:	2b2b2b2b 	.word	0x2b2b2b2b
    fecc:	2b2b2b2b 	.word	0x2b2b2b2b
    fed0:	212b2b2b 	.word	0x212b2b2b
    fed4:	2121      	.short	0x2121
    fed6:	292a      	cmp	r1, #42	; 0x2a
    fed8:	d01d      	beq.n	ff16 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    feda:	dc0b      	bgt.n	fef4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    fedc:	f1a1 011e 	sub.w	r1, r1, #30
    fee0:	290c      	cmp	r1, #12
    fee2:	d218      	bcs.n	ff16 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fee4:	e8df f001 	tbb	[pc, r1]
    fee8:	17171717 	.word	0x17171717
    feec:	17171717 	.word	0x17171717
    fef0:	0d171717 	.word	0x0d171717
    fef4:	393a      	subs	r1, #58	; 0x3a
    fef6:	2904      	cmp	r1, #4
    fef8:	d20d      	bcs.n	ff16 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fefa:	e8df f001 	tbb	[pc, r1]
    fefe:	020c      	.short	0x020c
    ff00:	020c      	.short	0x020c
    ff02:	8820      	ldrh	r0, [r4, #0]
    ff04:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    ff08:	d205      	bcs.n	ff16 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    ff0a:	4669      	mov	r1, sp
    ff0c:	f7fe fab5 	bl	e47a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ff10:	b118      	cbz	r0, ff1a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    ff12:	2002      	movs	r0, #2
    ff14:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ff16:	2012      	movs	r0, #18
    ff18:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ff1a:	9801      	ldr	r0, [sp, #4]
    ff1c:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    ff20:	f88d 1008 	strb.w	r1, [sp, #8]
    ff24:	9902      	ldr	r1, [sp, #8]
    ff26:	9102      	str	r1, [sp, #8]
    ff28:	f89d 1008 	ldrb.w	r1, [sp, #8]
    ff2c:	f500 708c 	add.w	r0, r0, #280	; 0x118
    ff30:	b109      	cbz	r1, ff36 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
    ff32:	200c      	movs	r0, #12
    ff34:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ff36:	21ff      	movs	r1, #255	; 0xff
    ff38:	7001      	strb	r1, [r0, #0]
    ff3a:	78a1      	ldrb	r1, [r4, #2]
    ff3c:	7041      	strb	r1, [r0, #1]
    ff3e:	4668      	mov	r0, sp
    ff40:	f7fe fe5a 	bl	ebf8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    ff44:	2000      	movs	r0, #0
    ff46:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ff48 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    ff48:	b510      	push	{r4, lr}
    ff4a:	4604      	mov	r4, r0
    ff4c:	7800      	ldrb	r0, [r0, #0]
    ff4e:	b118      	cbz	r0, ff58 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    ff50:	2801      	cmp	r0, #1
    ff52:	d001      	beq.n	ff58 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    ff54:	2012      	movs	r0, #18
    ff56:	bd10      	pop	{r4, pc}
    ff58:	f000 fe04 	bl	10b64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
    ff5c:	b120      	cbz	r0, ff68 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    ff5e:	f7f6 fa59 	bl	6414 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ff62:	b108      	cbz	r0, ff68 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    ff64:	200c      	movs	r0, #12
    ff66:	bd10      	pop	{r4, pc}
    ff68:	7820      	ldrb	r0, [r4, #0]
    ff6a:	f7ff ff98 	bl	fe9e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
    ff6e:	1de2      	adds	r2, r4, #7
    ff70:	f104 0317 	add.w	r3, r4, #23
    ff74:	1c61      	adds	r1, r4, #1
    ff76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff7a:	f7f6 ba7d 	b.w	6478 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000ff7e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    ff7e:	b510      	push	{r4, lr}
    ff80:	4604      	mov	r4, r0
    ff82:	f000 fe5f 	bl	10c44 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ca>
    ff86:	b108      	cbz	r0, ff8c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    ff88:	200c      	movs	r0, #12
    ff8a:	bd10      	pop	{r4, pc}
    ff8c:	7820      	ldrb	r0, [r4, #0]
    ff8e:	b118      	cbz	r0, ff98 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    ff90:	2801      	cmp	r0, #1
    ff92:	d001      	beq.n	ff98 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    ff94:	2012      	movs	r0, #18
    ff96:	bd10      	pop	{r4, pc}
    ff98:	f7ff ff81 	bl	fe9e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
    ff9c:	1c61      	adds	r1, r4, #1
    ff9e:	f7f6 fae3 	bl	6568 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    ffa2:	b108      	cbz	r0, ffa8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    ffa4:	2000      	movs	r0, #0
    ffa6:	bd10      	pop	{r4, pc}
    ffa8:	2007      	movs	r0, #7
    ffaa:	bd10      	pop	{r4, pc}

0000ffac <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    ffac:	b510      	push	{r4, lr}
    ffae:	f000 fdd9 	bl	10b64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
    ffb2:	b120      	cbz	r0, ffbe <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    ffb4:	f7f6 fa2e 	bl	6414 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ffb8:	b108      	cbz	r0, ffbe <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    ffba:	200c      	movs	r0, #12
    ffbc:	bd10      	pop	{r4, pc}
    ffbe:	f7f6 faa1 	bl	6504 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    ffc2:	2000      	movs	r0, #0
    ffc4:	bd10      	pop	{r4, pc}

0000ffc6 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    ffc6:	b510      	push	{r4, lr}
    ffc8:	f000 fe3c 	bl	10c44 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ca>
    ffcc:	b108      	cbz	r0, ffd2 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    ffce:	200c      	movs	r0, #12
    ffd0:	bd10      	pop	{r4, pc}
    ffd2:	f7f6 faf1 	bl	65b8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    ffd6:	2000      	movs	r0, #0
    ffd8:	bd10      	pop	{r4, pc}

0000ffda <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    ffda:	b510      	push	{r4, lr}
    ffdc:	460b      	mov	r3, r1
    ffde:	2201      	movs	r2, #1
    ffe0:	f100 0110 	add.w	r1, r0, #16
    ffe4:	f7fe fa2b 	bl	e43e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    ffe8:	2000      	movs	r0, #0
    ffea:	bd10      	pop	{r4, pc}

0000ffec <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    ffec:	b510      	push	{r4, lr}
    ffee:	8800      	ldrh	r0, [r0, #0]
    fff0:	2100      	movs	r1, #0
    fff2:	f7fd ffa5 	bl	df40 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fff6:	b118      	cbz	r0, 10000 <CONFIG_SPI_NOR_FLASH_LAYOUT_PAGE_SIZE>
    fff8:	f890 1258 	ldrb.w	r1, [r0, #600]	; 0x258
    fffc:	b111      	cbz	r1, 10004 <CONFIG_SPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4>
    fffe:	e007      	b.n	10010 <CONFIG_SPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x10>
   10000:	2002      	movs	r0, #2
   10002:	bd10      	pop	{r4, pc}
   10004:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   10008:	2914      	cmp	r1, #20
   1000a:	d003      	beq.n	10014 <CONFIG_SPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x14>
   1000c:	2915      	cmp	r1, #21
   1000e:	d001      	beq.n	10014 <CONFIG_SPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x14>
   10010:	200c      	movs	r0, #12
   10012:	bd10      	pop	{r4, pc}
   10014:	2102      	movs	r1, #2
   10016:	f880 1258 	strb.w	r1, [r0, #600]	; 0x258
   1001a:	2000      	movs	r0, #0
   1001c:	bd10      	pop	{r4, pc}

0001001e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
   1001e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10020:	4605      	mov	r5, r0
   10022:	8800      	ldrh	r0, [r0, #0]
   10024:	2100      	movs	r1, #0
   10026:	f7fd ff8b 	bl	df40 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1002a:	0004      	movs	r4, r0
   1002c:	d003      	beq.n	10036 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
   1002e:	f894 0258 	ldrb.w	r0, [r4, #600]	; 0x258
   10032:	b110      	cbz	r0, 1003a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
   10034:	e011      	b.n	1005a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   10036:	2002      	movs	r0, #2
   10038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1003a:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   1003e:	2814      	cmp	r0, #20
   10040:	d001      	beq.n	10046 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
   10042:	2815      	cmp	r0, #21
   10044:	d109      	bne.n	1005a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   10046:	f894 028c 	ldrb.w	r0, [r4, #652]	; 0x28c
   1004a:	f88d 0000 	strb.w	r0, [sp]
   1004e:	9800      	ldr	r0, [sp, #0]
   10050:	9000      	str	r0, [sp, #0]
   10052:	f89d 0000 	ldrb.w	r0, [sp]
   10056:	2601      	movs	r6, #1
   10058:	b108      	cbz	r0, 1005e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
   1005a:	200c      	movs	r0, #12
   1005c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1005e:	2210      	movs	r2, #16
   10060:	1ca9      	adds	r1, r5, #2
   10062:	f204 2059 	addw	r0, r4, #601	; 0x259
   10066:	f7fc ff39 	bl	cedc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1006a:	f884 6258 	strb.w	r6, [r4, #600]	; 0x258
   1006e:	2000      	movs	r0, #0
   10070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010072 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   10072:	b510      	push	{r4, lr}
   10074:	2108      	movs	r1, #8
   10076:	f7f4 fd8d 	bl	4b94 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   1007a:	2000      	movs	r0, #0
   1007c:	bd10      	pop	{r4, pc}

0001007e <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
   1007e:	b510      	push	{r4, lr}
   10080:	4604      	mov	r4, r0
   10082:	f7fa fe15 	bl	acb0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10086:	f7ff f8f8 	bl	f27a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   1008a:	7020      	strb	r0, [r4, #0]
   1008c:	2000      	movs	r0, #0
   1008e:	bd10      	pop	{r4, pc}

00010090 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   10090:	21fb      	movs	r1, #251	; 0xfb
   10092:	8001      	strh	r1, [r0, #0]
   10094:	f640 0248 	movw	r2, #2120	; 0x848
   10098:	8042      	strh	r2, [r0, #2]
   1009a:	8081      	strh	r1, [r0, #4]
   1009c:	80c2      	strh	r2, [r0, #6]
   1009e:	2000      	movs	r0, #0
   100a0:	4770      	bx	lr

000100a2 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
   100a2:	b51c      	push	{r2, r3, r4, lr}
   100a4:	8800      	ldrh	r0, [r0, #0]
   100a6:	4669      	mov	r1, sp
   100a8:	f7fe f9e7 	bl	e47a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   100ac:	2800      	cmp	r0, #0
   100ae:	d10d      	bne.n	100cc <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
   100b0:	f89d 0000 	ldrb.w	r0, [sp]
   100b4:	9c01      	ldr	r4, [sp, #4]
   100b6:	2801      	cmp	r0, #1
   100b8:	f504 748c 	add.w	r4, r4, #280	; 0x118
   100bc:	d103      	bne.n	100c6 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
   100be:	9801      	ldr	r0, [sp, #4]
   100c0:	f000 fd3a 	bl	10b38 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2be>
   100c4:	b118      	cbz	r0, 100ce <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
   100c6:	7ce0      	ldrb	r0, [r4, #19]
   100c8:	b118      	cbz	r0, 100d2 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
   100ca:	203a      	movs	r0, #58	; 0x3a
   100cc:	bd1c      	pop	{r2, r3, r4, pc}
   100ce:	2002      	movs	r0, #2
   100d0:	bd1c      	pop	{r2, r3, r4, pc}
   100d2:	2001      	movs	r0, #1
   100d4:	74e0      	strb	r0, [r4, #19]
   100d6:	2000      	movs	r0, #0
   100d8:	bd1c      	pop	{r2, r3, r4, pc}

000100da <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
   100da:	2108      	movs	r1, #8
   100dc:	7001      	strb	r1, [r0, #0]
   100de:	2000      	movs	r0, #0
   100e0:	4770      	bx	lr

000100e2 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   100e2:	b510      	push	{r4, lr}
   100e4:	4604      	mov	r4, r0
   100e6:	20d8      	movs	r0, #216	; 0xd8
   100e8:	7020      	strb	r0, [r4, #0]
   100ea:	f000 fd22 	bl	10b32 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b8>
   100ee:	7060      	strb	r0, [r4, #1]
   100f0:	2000      	movs	r0, #0
   100f2:	bd10      	pop	{r4, pc}

000100f4 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   100f4:	2108      	movs	r1, #8
   100f6:	7001      	strb	r1, [r0, #0]
   100f8:	2000      	movs	r0, #0
   100fa:	4770      	bx	lr

000100fc <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
   100fc:	b510      	push	{r4, lr}
   100fe:	4604      	mov	r4, r0
   10100:	7800      	ldrb	r0, [r0, #0]
   10102:	b108      	cbz	r0, 10108 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
   10104:	2801      	cmp	r0, #1
   10106:	d110      	bne.n	1012a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   10108:	f000 fd2c 	bl	10b64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
   1010c:	b120      	cbz	r0, 10118 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   1010e:	f7f6 f981 	bl	6414 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   10112:	b108      	cbz	r0, 10118 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   10114:	200c      	movs	r0, #12
   10116:	bd10      	pop	{r4, pc}
   10118:	7820      	ldrb	r0, [r4, #0]
   1011a:	f7ff fec0 	bl	fe9e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   1011e:	1c61      	adds	r1, r4, #1
   10120:	f7fe f973 	bl	e40a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
   10124:	b108      	cbz	r0, 1012a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   10126:	2000      	movs	r0, #0
   10128:	bd10      	pop	{r4, pc}
   1012a:	2012      	movs	r0, #18
   1012c:	bd10      	pop	{r4, pc}

0001012e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   1012e:	b510      	push	{r4, lr}
   10130:	4604      	mov	r4, r0
   10132:	f000 fd87 	bl	10c44 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ca>
   10136:	b108      	cbz	r0, 1013c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   10138:	200c      	movs	r0, #12
   1013a:	bd10      	pop	{r4, pc}
   1013c:	7820      	ldrb	r0, [r4, #0]
   1013e:	b108      	cbz	r0, 10144 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
   10140:	2801      	cmp	r0, #1
   10142:	d107      	bne.n	10154 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   10144:	f7ff feab 	bl	fe9e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   10148:	1c61      	adds	r1, r4, #1
   1014a:	f7fe f96d 	bl	e428 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   1014e:	b108      	cbz	r0, 10154 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   10150:	2000      	movs	r0, #0
   10152:	bd10      	pop	{r4, pc}
   10154:	2012      	movs	r0, #18
   10156:	bd10      	pop	{r4, pc}

00010158 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
   10158:	b510      	push	{r4, lr}
   1015a:	4604      	mov	r4, r0
   1015c:	f000 fd02 	bl	10b64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
   10160:	b108      	cbz	r0, 10166 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
   10162:	200c      	movs	r0, #12
   10164:	bd10      	pop	{r4, pc}
   10166:	7820      	ldrb	r0, [r4, #0]
   10168:	b100      	cbz	r0, 1016c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0x14>
   1016a:	2001      	movs	r0, #1
   1016c:	f7f6 f94c 	bl	6408 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
   10170:	2000      	movs	r0, #0
   10172:	bd10      	pop	{r4, pc}

00010174 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
   10174:	b51c      	push	{r2, r3, r4, lr}
   10176:	4604      	mov	r4, r0
   10178:	f7fa fd9a 	bl	acb0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   1017c:	2000      	movs	r0, #0
   1017e:	f88d 0002 	strb.w	r0, [sp, #2]
   10182:	2103      	movs	r1, #3
   10184:	f88d 1001 	strb.w	r1, [sp, #1]
   10188:	f814 1b01 	ldrb.w	r1, [r4], #1
   1018c:	f88d 1003 	strb.w	r1, [sp, #3]
   10190:	f88d 0000 	strb.w	r0, [sp]
   10194:	4668      	mov	r0, sp
   10196:	9401      	str	r4, [sp, #4]
   10198:	f000 f99c 	bl	104d4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
   1019c:	bd1c      	pop	{r2, r3, r4, pc}

0001019e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
   1019e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   101a0:	4605      	mov	r5, r0
   101a2:	f7fa fd85 	bl	acb0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   101a6:	4606      	mov	r6, r0
   101a8:	7828      	ldrb	r0, [r5, #0]
   101aa:	2400      	movs	r4, #0
   101ac:	b160      	cbz	r0, 101c8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   101ae:	f88d 4000 	strb.w	r4, [sp]
   101b2:	2001      	movs	r0, #1
   101b4:	f10d 0101 	add.w	r1, sp, #1
   101b8:	f7f5 faf6 	bl	57a8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   101bc:	b120      	cbz	r0, 101c8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   101be:	4668      	mov	r0, sp
   101c0:	f000 f897 	bl	102f2 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
   101c4:	2800      	cmp	r0, #0
   101c6:	d112      	bne.n	101ee <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   101c8:	f88d 400c 	strb.w	r4, [sp, #12]
   101cc:	4630      	mov	r0, r6
   101ce:	f7ff f84a 	bl	f266 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   101d2:	b118      	cbz	r0, 101dc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
   101d4:	2080      	movs	r0, #128	; 0x80
   101d6:	f8ad 000d 	strh.w	r0, [sp, #13]
   101da:	e001      	b.n	101e0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
   101dc:	f8ad 400d 	strh.w	r4, [sp, #13]
   101e0:	f88d 400f 	strb.w	r4, [sp, #15]
   101e4:	7828      	ldrb	r0, [r5, #0]
   101e6:	2801      	cmp	r0, #1
   101e8:	d003      	beq.n	101f2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
   101ea:	b138      	cbz	r0, 101fc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
   101ec:	2012      	movs	r0, #18
   101ee:	b004      	add	sp, #16
   101f0:	bd70      	pop	{r4, r5, r6, pc}
   101f2:	a903      	add	r1, sp, #12
   101f4:	4630      	mov	r0, r6
   101f6:	f7fa fd79 	bl	acec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
   101fa:	e7f8      	b.n	101ee <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   101fc:	4630      	mov	r0, r6
   101fe:	f000 fcb8 	bl	10b72 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2f8>
   10202:	e7f4      	b.n	101ee <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

00010204 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
   10204:	b530      	push	{r4, r5, lr}
   10206:	b08b      	sub	sp, #44	; 0x2c
   10208:	4604      	mov	r4, r0
   1020a:	f7fa fd51 	bl	acb0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   1020e:	4602      	mov	r2, r0
   10210:	7920      	ldrb	r0, [r4, #4]
   10212:	2804      	cmp	r0, #4
   10214:	d803      	bhi.n	1021e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
   10216:	8860      	ldrh	r0, [r4, #2]
   10218:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   1021c:	d902      	bls.n	10224 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
   1021e:	2012      	movs	r0, #18
   10220:	b00b      	add	sp, #44	; 0x2c
   10222:	bd30      	pop	{r4, r5, pc}
   10224:	2500      	movs	r5, #0
   10226:	f88d 5004 	strb.w	r5, [sp, #4]
   1022a:	7921      	ldrb	r1, [r4, #4]
   1022c:	9500      	str	r5, [sp, #0]
   1022e:	f89d 0000 	ldrb.w	r0, [sp]
   10232:	2905      	cmp	r1, #5
   10234:	f040 0010 	orr.w	r0, r0, #16
   10238:	f88d 0000 	strb.w	r0, [sp]
   1023c:	d254      	bcs.n	102e8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
   1023e:	e8df f001 	tbb	[pc, r1]
   10242:	0803      	.short	0x0803
   10244:	000b1105 	.word	0x000b1105
   10248:	f040 0001 	orr.w	r0, r0, #1
   1024c:	f040 0002 	orr.w	r0, r0, #2
   10250:	e006      	b.n	10260 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
   10252:	f040 0009 	orr.w	r0, r0, #9
   10256:	e001      	b.n	1025c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
   10258:	f040 0001 	orr.w	r0, r0, #1
   1025c:	f040 0004 	orr.w	r0, r0, #4
   10260:	f88d 0000 	strb.w	r0, [sp]
   10264:	f8bd 0000 	ldrh.w	r0, [sp]
   10268:	9000      	str	r0, [sp, #0]
   1026a:	f8bd 0000 	ldrh.w	r0, [sp]
   1026e:	f8ad 0005 	strh.w	r0, [sp, #5]
   10272:	8821      	ldrh	r1, [r4, #0]
   10274:	f8dd 0006 	ldr.w	r0, [sp, #6]
   10278:	f361 201f 	bfi	r0, r1, #8, #24
   1027c:	f8cd 0006 	str.w	r0, [sp, #6]
   10280:	8861      	ldrh	r1, [r4, #2]
   10282:	f8dd 0009 	ldr.w	r0, [sp, #9]
   10286:	f361 201f 	bfi	r0, r1, #8, #24
   1028a:	f8cd 0009 	str.w	r0, [sp, #9]
   1028e:	7b60      	ldrb	r0, [r4, #13]
   10290:	f88d 000d 	strb.w	r0, [sp, #13]
   10294:	7960      	ldrb	r0, [r4, #5]
   10296:	f88d 000e 	strb.w	r0, [sp, #14]
   1029a:	79a0      	ldrb	r0, [r4, #6]
   1029c:	f88d 000f 	strb.w	r0, [sp, #15]
   102a0:	f8d4 0007 	ldr.w	r0, [r4, #7]
   102a4:	9004      	str	r0, [sp, #16]
   102a6:	f8b4 000b 	ldrh.w	r0, [r4, #11]
   102aa:	f8ad 0014 	strh.w	r0, [sp, #20]
   102ae:	7ba0      	ldrb	r0, [r4, #14]
   102b0:	f88d 0016 	strb.w	r0, [sp, #22]
   102b4:	207f      	movs	r0, #127	; 0x7f
   102b6:	f88d 0017 	strb.w	r0, [sp, #23]
   102ba:	2001      	movs	r0, #1
   102bc:	f88d 0018 	strb.w	r0, [sp, #24]
   102c0:	f88d 5019 	strb.w	r5, [sp, #25]
   102c4:	f88d 001a 	strb.w	r0, [sp, #26]
   102c8:	f88d 501b 	strb.w	r5, [sp, #27]
   102cc:	4610      	mov	r0, r2
   102ce:	f7fe ffe6 	bl	f29e <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
   102d2:	f88d 001c 	strb.w	r0, [sp, #28]
   102d6:	f88d 501d 	strb.w	r5, [sp, #29]
   102da:	f88d 501e 	strb.w	r5, [sp, #30]
   102de:	a909      	add	r1, sp, #36	; 0x24
   102e0:	a801      	add	r0, sp, #4
   102e2:	f7fa fbc1 	bl	aa68 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
   102e6:	e79b      	b.n	10220 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
   102e8:	f241 01cf 	movw	r1, #4303	; 0x10cf
   102ec:	2039      	movs	r0, #57	; 0x39
   102ee:	f7f4 fba5 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000102f2 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
   102f2:	b570      	push	{r4, r5, r6, lr}
   102f4:	4604      	mov	r4, r0
   102f6:	7800      	ldrb	r0, [r0, #0]
   102f8:	2101      	movs	r1, #1
   102fa:	f7fd fe21 	bl	df40 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   102fe:	0005      	movs	r5, r0
   10300:	d007      	beq.n	10312 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
   10302:	f7ff f972 	bl	f5ea <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10306:	b160      	cbz	r0, 10322 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   10308:	4628      	mov	r0, r5
   1030a:	f7fe ffb2 	bl	f272 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1030e:	b110      	cbz	r0, 10316 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
   10310:	e005      	b.n	1031e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
   10312:	2042      	movs	r0, #66	; 0x42
   10314:	bd70      	pop	{r4, r5, r6, pc}
   10316:	4628      	mov	r0, r5
   10318:	f7fe ffa1 	bl	f25e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   1031c:	b108      	cbz	r0, 10322 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   1031e:	200c      	movs	r0, #12
   10320:	bd70      	pop	{r4, r5, r6, pc}
   10322:	1c61      	adds	r1, r4, #1
   10324:	4628      	mov	r0, r5
   10326:	f7fe ffb2 	bl	f28e <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
   1032a:	2000      	movs	r0, #0
   1032c:	bd70      	pop	{r4, r5, r6, pc}

0001032e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   1032e:	b50e      	push	{r1, r2, r3, lr}
   10330:	8882      	ldrh	r2, [r0, #4]
   10332:	f244 2390 	movw	r3, #17040	; 0x4290
   10336:	429a      	cmp	r2, r3
   10338:	d901      	bls.n	1033e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
   1033a:	2012      	movs	r0, #18
   1033c:	bd0e      	pop	{r1, r2, r3, pc}
   1033e:	f640 0348 	movw	r3, #2120	; 0x848
   10342:	429a      	cmp	r2, r3
   10344:	d300      	bcc.n	10348 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   10346:	461a      	mov	r2, r3
   10348:	8803      	ldrh	r3, [r0, #0]
   1034a:	f8ad 3000 	strh.w	r3, [sp]
   1034e:	8843      	ldrh	r3, [r0, #2]
   10350:	f8ad 3002 	strh.w	r3, [sp, #2]
   10354:	f8ad 2004 	strh.w	r2, [sp, #4]
   10358:	8843      	ldrh	r3, [r0, #2]
   1035a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1035e:	f8ad 2008 	strh.w	r2, [sp, #8]
   10362:	8800      	ldrh	r0, [r0, #0]
   10364:	8008      	strh	r0, [r1, #0]
   10366:	4668      	mov	r0, sp
   10368:	f7fa fd92 	bl	ae90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a4>
   1036c:	bd0e      	pop	{r1, r2, r3, pc}

0001036e <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   1036e:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10370:	4604      	mov	r4, r0
   10372:	f10d 0007 	add.w	r0, sp, #7
   10376:	9000      	str	r0, [sp, #0]
   10378:	7922      	ldrb	r2, [r4, #4]
   1037a:	78e1      	ldrb	r1, [r4, #3]
   1037c:	78a0      	ldrb	r0, [r4, #2]
   1037e:	f10d 0306 	add.w	r3, sp, #6
   10382:	f000 fc23 	bl	10bcc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
   10386:	2800      	cmp	r0, #0
   10388:	d109      	bne.n	1039e <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
   1038a:	8820      	ldrh	r0, [r4, #0]
   1038c:	f8ad 0004 	strh.w	r0, [sp, #4]
   10390:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   10394:	f8ad 0008 	strh.w	r0, [sp, #8]
   10398:	a801      	add	r0, sp, #4
   1039a:	f000 f956 	bl	1064a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   1039e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000103a0 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
   103a0:	b510      	push	{r4, lr}
   103a2:	4604      	mov	r4, r0
   103a4:	f000 fbde 	bl	10b64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
   103a8:	b120      	cbz	r0, 103b4 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   103aa:	f7f6 f833 	bl	6414 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   103ae:	b108      	cbz	r0, 103b4 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   103b0:	200c      	movs	r0, #12
   103b2:	bd10      	pop	{r4, pc}
   103b4:	7820      	ldrb	r0, [r4, #0]
   103b6:	f7ff fd72 	bl	fe9e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   103ba:	79e2      	ldrb	r2, [r4, #7]
   103bc:	1c61      	adds	r1, r4, #1
   103be:	f7f5 ffd7 	bl	6370 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
   103c2:	b108      	cbz	r0, 103c8 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
   103c4:	2000      	movs	r0, #0
   103c6:	bd10      	pop	{r4, pc}
   103c8:	2002      	movs	r0, #2
   103ca:	bd10      	pop	{r4, pc}

000103cc <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   103cc:	b510      	push	{r4, lr}
   103ce:	4604      	mov	r4, r0
   103d0:	2001      	movs	r0, #1
   103d2:	f000 fa8c 	bl	108ee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x74>
   103d6:	b128      	cbz	r0, 103e4 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   103d8:	4621      	mov	r1, r4
   103da:	2001      	movs	r0, #1
   103dc:	f7f5 f9fc 	bl	57d8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   103e0:	2000      	movs	r0, #0
   103e2:	bd10      	pop	{r4, pc}
   103e4:	200c      	movs	r0, #12
   103e6:	bd10      	pop	{r4, pc}

000103e8 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
   103e8:	b510      	push	{r4, lr}
   103ea:	8800      	ldrh	r0, [r0, #0]
   103ec:	f7f6 f8a0 	bl	6530 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
   103f0:	b108      	cbz	r0, 103f6 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
   103f2:	2000      	movs	r0, #0
   103f4:	bd10      	pop	{r4, pc}
   103f6:	2030      	movs	r0, #48	; 0x30
   103f8:	bd10      	pop	{r4, pc}

000103fa <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
   103fa:	b51c      	push	{r2, r3, r4, lr}
   103fc:	4604      	mov	r4, r0
   103fe:	f7fa fc57 	bl	acb0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10402:	2000      	movs	r0, #0
   10404:	f88d 0000 	strb.w	r0, [sp]
   10408:	f88d 0002 	strb.w	r0, [sp, #2]
   1040c:	2003      	movs	r0, #3
   1040e:	f88d 0001 	strb.w	r0, [sp, #1]
   10412:	f814 0b01 	ldrb.w	r0, [r4], #1
   10416:	f88d 0003 	strb.w	r0, [sp, #3]
   1041a:	4668      	mov	r0, sp
   1041c:	9401      	str	r4, [sp, #4]
   1041e:	f000 f8c2 	bl	105a6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   10422:	bd1c      	pop	{r2, r3, r4, pc}

00010424 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   10424:	b51c      	push	{r2, r3, r4, lr}
   10426:	8801      	ldrh	r1, [r0, #0]
   10428:	f8ad 1000 	strh.w	r1, [sp]
   1042c:	8841      	ldrh	r1, [r0, #2]
   1042e:	f8ad 1002 	strh.w	r1, [sp, #2]
   10432:	8801      	ldrh	r1, [r0, #0]
   10434:	f8ad 1004 	strh.w	r1, [sp, #4]
   10438:	8840      	ldrh	r0, [r0, #2]
   1043a:	f8ad 0006 	strh.w	r0, [sp, #6]
   1043e:	4668      	mov	r0, sp
   10440:	f7fa fdaa 	bl	af98 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ac>
   10444:	bd1c      	pop	{r2, r3, r4, pc}

00010446 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   10446:	b510      	push	{r4, lr}
   10448:	f7f5 f9ea 	bl	5820 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   1044c:	2000      	movs	r0, #0
   1044e:	bd10      	pop	{r4, pc}

00010450 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
   10450:	b510      	push	{r4, lr}
   10452:	460c      	mov	r4, r1
   10454:	2100      	movs	r1, #0
   10456:	f7fd fd73 	bl	df40 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1045a:	b118      	cbz	r0, 10464 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
   1045c:	2c02      	cmp	r4, #2
   1045e:	d903      	bls.n	10468 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
   10460:	2012      	movs	r0, #18
   10462:	bd10      	pop	{r4, pc}
   10464:	2002      	movs	r0, #2
   10466:	bd10      	pop	{r4, pc}
   10468:	f014 0101 	ands.w	r1, r4, #1
   1046c:	f880 11d5 	strb.w	r1, [r0, #469]	; 0x1d5
   10470:	f3c4 0240 	ubfx	r2, r4, #1, #1
   10474:	f880 21d4 	strb.w	r2, [r0, #468]	; 0x1d4
   10478:	d004      	beq.n	10484 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   1047a:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
   1047e:	b109      	cbz	r1, 10484 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   10480:	f7ff f8cd 	bl	f61e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
   10484:	2000      	movs	r0, #0
   10486:	bd10      	pop	{r4, pc}

00010488 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   10488:	b51c      	push	{r2, r3, r4, lr}
   1048a:	460c      	mov	r4, r1
   1048c:	4669      	mov	r1, sp
   1048e:	f7fd fff4 	bl	e47a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10492:	2800      	cmp	r0, #0
   10494:	d105      	bne.n	104a2 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
   10496:	2100      	movs	r1, #0
   10498:	4622      	mov	r2, r4
   1049a:	9801      	ldr	r0, [sp, #4]
   1049c:	f000 faf3 	bl	10a86 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
   104a0:	2000      	movs	r0, #0
   104a2:	bd1c      	pop	{r2, r3, r4, pc}

000104a4 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   104a4:	b510      	push	{r4, lr}
   104a6:	4604      	mov	r4, r0
   104a8:	2000      	movs	r0, #0
   104aa:	f000 fa20 	bl	108ee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x74>
   104ae:	b128      	cbz	r0, 104bc <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   104b0:	4621      	mov	r1, r4
   104b2:	2000      	movs	r0, #0
   104b4:	f7f5 f990 	bl	57d8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   104b8:	2000      	movs	r0, #0
   104ba:	bd10      	pop	{r4, pc}
   104bc:	200c      	movs	r0, #12
   104be:	bd10      	pop	{r4, pc}

000104c0 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   104c0:	b510      	push	{r4, lr}
   104c2:	7800      	ldrb	r0, [r0, #0]
   104c4:	b100      	cbz	r0, 104c8 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
   104c6:	2001      	movs	r0, #1
   104c8:	f7f7 fdda 	bl	8080 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   104cc:	2000      	movs	r0, #0
   104ce:	bd10      	pop	{r4, pc}

000104d0 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   104d0:	f7fa bcde 	b.w	ae90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a4>

000104d4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   104d4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   104d8:	4606      	mov	r6, r0
   104da:	7845      	ldrb	r5, [r0, #1]
   104dc:	7800      	ldrb	r0, [r0, #0]
   104de:	2101      	movs	r1, #1
   104e0:	f7fd fd2e 	bl	df40 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   104e4:	0004      	movs	r4, r0
   104e6:	d01e      	beq.n	10526 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
   104e8:	f7fe fe48 	bl	f17c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   104ec:	78f1      	ldrb	r1, [r6, #3]
   104ee:	4281      	cmp	r1, r0
   104f0:	d800      	bhi.n	104f4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
   104f2:	4608      	mov	r0, r1
   104f4:	4607      	mov	r7, r0
   104f6:	2d04      	cmp	r5, #4
   104f8:	d018      	beq.n	1052c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
   104fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   104fc:	f7fd fe7d 	bl	e1fa <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   10500:	4438      	add	r0, r7
   10502:	b281      	uxth	r1, r0
   10504:	4620      	mov	r0, r4
   10506:	2201      	movs	r2, #1
   10508:	f000 fa03 	bl	10912 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x98>
   1050c:	2800      	cmp	r0, #0
   1050e:	d10b      	bne.n	10528 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10510:	2d03      	cmp	r5, #3
   10512:	d000      	beq.n	10516 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10514:	b1df      	cbz	r7, 1054e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10516:	4620      	mov	r0, r4
   10518:	f7fe fea9 	bl	f26e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1051c:	7871      	ldrb	r1, [r6, #1]
   1051e:	2903      	cmp	r1, #3
   10520:	d010      	beq.n	10544 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   10522:	b9a0      	cbnz	r0, 1054e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10524:	e004      	b.n	10530 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
   10526:	2042      	movs	r0, #66	; 0x42
   10528:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1052c:	b97f      	cbnz	r7, 1054e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1052e:	e7f2      	b.n	10516 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10530:	2904      	cmp	r1, #4
   10532:	d107      	bne.n	10544 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   10534:	4620      	mov	r0, r4
   10536:	f7ff f858 	bl	f5ea <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1053a:	b140      	cbz	r0, 1054e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1053c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1053e:	f7fd fe2b 	bl	e198 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   10542:	b120      	cbz	r0, 1054e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10544:	2d01      	cmp	r5, #1
   10546:	d004      	beq.n	10552 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   10548:	2d03      	cmp	r5, #3
   1054a:	d002      	beq.n	10552 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   1054c:	e00e      	b.n	1056c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   1054e:	2012      	movs	r0, #18
   10550:	e7ea      	b.n	10528 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10552:	4620      	mov	r0, r4
   10554:	f7fe fe8b 	bl	f26e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10558:	b108      	cbz	r0, 1055e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   1055a:	2200      	movs	r2, #0
   1055c:	e002      	b.n	10564 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   1055e:	2d01      	cmp	r5, #1
   10560:	d013      	beq.n	1058a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   10562:	2201      	movs	r2, #1
   10564:	4668      	mov	r0, sp
   10566:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10568:	f7fd fdae 	bl	e0c8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1056c:	2d04      	cmp	r5, #4
   1056e:	d018      	beq.n	105a2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   10570:	6872      	ldr	r2, [r6, #4]
   10572:	463b      	mov	r3, r7
   10574:	2101      	movs	r1, #1
   10576:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10578:	f7fd fdda 	bl	e130 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   1057c:	b138      	cbz	r0, 1058e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   1057e:	7870      	ldrb	r0, [r6, #1]
   10580:	2802      	cmp	r0, #2
   10582:	d006      	beq.n	10592 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   10584:	2803      	cmp	r0, #3
   10586:	d004      	beq.n	10592 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   10588:	e00b      	b.n	105a2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   1058a:	2202      	movs	r2, #2
   1058c:	e7ea      	b.n	10564 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   1058e:	2007      	movs	r0, #7
   10590:	e7ca      	b.n	10528 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10592:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10594:	f7fd fe31 	bl	e1fa <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   10598:	4602      	mov	r2, r0
   1059a:	2101      	movs	r1, #1
   1059c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1059e:	f7fd fe09 	bl	e1b4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   105a2:	2000      	movs	r0, #0
   105a4:	e7c0      	b.n	10528 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

000105a6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   105a6:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   105aa:	4607      	mov	r7, r0
   105ac:	7845      	ldrb	r5, [r0, #1]
   105ae:	78c6      	ldrb	r6, [r0, #3]
   105b0:	7800      	ldrb	r0, [r0, #0]
   105b2:	2101      	movs	r1, #1
   105b4:	f7fd fcc4 	bl	df40 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   105b8:	0004      	movs	r4, r0
   105ba:	d003      	beq.n	105c4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   105bc:	f7fe fe59 	bl	f272 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   105c0:	b118      	cbz	r0, 105ca <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   105c2:	e003      	b.n	105cc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   105c4:	2042      	movs	r0, #66	; 0x42
   105c6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   105ca:	2600      	movs	r6, #0
   105cc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   105ce:	f7fd fe18 	bl	e202 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   105d2:	4430      	add	r0, r6
   105d4:	b281      	uxth	r1, r0
   105d6:	4688      	mov	r8, r1
   105d8:	4620      	mov	r0, r4
   105da:	2201      	movs	r2, #1
   105dc:	f000 f999 	bl	10912 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x98>
   105e0:	2800      	cmp	r0, #0
   105e2:	d1f0      	bne.n	105c6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   105e4:	2d04      	cmp	r5, #4
   105e6:	d008      	beq.n	105fa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   105e8:	2d03      	cmp	r5, #3
   105ea:	d00a      	beq.n	10602 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   105ec:	b12e      	cbz	r6, 105fa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   105ee:	4620      	mov	r0, r4
   105f0:	f7fe fffb 	bl	f5ea <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   105f4:	b118      	cbz	r0, 105fe <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   105f6:	200c      	movs	r0, #12
   105f8:	e7e5      	b.n	105c6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   105fa:	2012      	movs	r0, #18
   105fc:	e7e3      	b.n	105c6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   105fe:	2d01      	cmp	r5, #1
   10600:	d10c      	bne.n	1061c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   10602:	4620      	mov	r0, r4
   10604:	f7fe fe33 	bl	f26e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10608:	b108      	cbz	r0, 1060e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   1060a:	2204      	movs	r2, #4
   1060c:	e002      	b.n	10614 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   1060e:	2d01      	cmp	r5, #1
   10610:	d010      	beq.n	10634 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   10612:	2205      	movs	r2, #5
   10614:	4668      	mov	r0, sp
   10616:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10618:	f7fd fd56 	bl	e0c8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1061c:	687a      	ldr	r2, [r7, #4]
   1061e:	4633      	mov	r3, r6
   10620:	2100      	movs	r1, #0
   10622:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10624:	f7fd fd84 	bl	e130 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   10628:	b130      	cbz	r0, 10638 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   1062a:	2d02      	cmp	r5, #2
   1062c:	d006      	beq.n	1063c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   1062e:	2d03      	cmp	r5, #3
   10630:	d004      	beq.n	1063c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   10632:	e008      	b.n	10646 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   10634:	2206      	movs	r2, #6
   10636:	e7ed      	b.n	10614 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   10638:	2007      	movs	r0, #7
   1063a:	e7c4      	b.n	105c6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1063c:	4642      	mov	r2, r8
   1063e:	2100      	movs	r1, #0
   10640:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10642:	f7fd fdb7 	bl	e1b4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10646:	2000      	movs	r0, #0
   10648:	e7bd      	b.n	105c6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0001064a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   1064a:	b510      	push	{r4, lr}
   1064c:	4604      	mov	r4, r0
   1064e:	8880      	ldrh	r0, [r0, #4]
   10650:	b128      	cbz	r0, 1065e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10652:	2801      	cmp	r0, #1
   10654:	d003      	beq.n	1065e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10656:	2802      	cmp	r0, #2
   10658:	d001      	beq.n	1065e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1065a:	2012      	movs	r0, #18
   1065c:	bd10      	pop	{r4, pc}
   1065e:	78e0      	ldrb	r0, [r4, #3]
   10660:	f000 f9ee 	bl	10a40 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
   10664:	b148      	cbz	r0, 1067a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10666:	78a0      	ldrb	r0, [r4, #2]
   10668:	f000 f9ea 	bl	10a40 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
   1066c:	b128      	cbz	r0, 1067a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   1066e:	4620      	mov	r0, r4
   10670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10674:	2101      	movs	r1, #1
   10676:	f000 b890 	b.w	1079a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   1067a:	2011      	movs	r0, #17
   1067c:	bd10      	pop	{r4, pc}

0001067e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   1067e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10680:	460c      	mov	r4, r1
   10682:	4605      	mov	r5, r0
   10684:	8800      	ldrh	r0, [r0, #0]
   10686:	4669      	mov	r1, sp
   10688:	f7fd fef7 	bl	e47a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1068c:	2800      	cmp	r0, #0
   1068e:	d106      	bne.n	1069e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   10690:	9801      	ldr	r0, [sp, #4]
   10692:	8829      	ldrh	r1, [r5, #0]
   10694:	8021      	strh	r1, [r4, #0]
   10696:	f8b0 00b0 	ldrh.w	r0, [r0, #176]	; 0xb0
   1069a:	8060      	strh	r0, [r4, #2]
   1069c:	2000      	movs	r0, #0
   1069e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

000106a0 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   106a0:	b510      	push	{r4, lr}
   106a2:	4604      	mov	r4, r0
   106a4:	4601      	mov	r1, r0
   106a6:	2000      	movs	r0, #0
   106a8:	f7f5 f87e 	bl	57a8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   106ac:	b910      	cbnz	r0, 106b4 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   106ae:	2000      	movs	r0, #0
   106b0:	6020      	str	r0, [r4, #0]
   106b2:	80a0      	strh	r0, [r4, #4]
   106b4:	2000      	movs	r0, #0
   106b6:	bd10      	pop	{r4, pc}

000106b8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   106b8:	b50e      	push	{r1, r2, r3, lr}
   106ba:	8800      	ldrh	r0, [r0, #0]
   106bc:	4669      	mov	r1, sp
   106be:	f7fd fedc 	bl	e47a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   106c2:	b960      	cbnz	r0, 106de <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   106c4:	9801      	ldr	r0, [sp, #4]
   106c6:	f000 fa37 	bl	10b38 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2be>
   106ca:	b140      	cbz	r0, 106de <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   106cc:	9801      	ldr	r0, [sp, #4]
   106ce:	4601      	mov	r1, r0
   106d0:	f890 212a 	ldrb.w	r2, [r0, #298]	; 0x12a
   106d4:	3078      	adds	r0, #120	; 0x78
   106d6:	f501 7195 	add.w	r1, r1, #298	; 0x12a
   106da:	b962      	cbnz	r2, 106f6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
   106dc:	e001      	b.n	106e2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
   106de:	2002      	movs	r0, #2
   106e0:	bd0e      	pop	{r1, r2, r3, pc}
   106e2:	f890 2056 	ldrb.w	r2, [r0, #86]	; 0x56
   106e6:	f88d 2008 	strb.w	r2, [sp, #8]
   106ea:	9a02      	ldr	r2, [sp, #8]
   106ec:	9202      	str	r2, [sp, #8]
   106ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
   106f2:	2201      	movs	r2, #1
   106f4:	b10b      	cbz	r3, 106fa <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
   106f6:	203a      	movs	r0, #58	; 0x3a
   106f8:	bd0e      	pop	{r1, r2, r3, pc}
   106fa:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
   106fe:	079b      	lsls	r3, r3, #30
   10700:	d008      	beq.n	10714 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x5c>
   10702:	2201      	movs	r2, #1
   10704:	304e      	adds	r0, #78	; 0x4e
   10706:	9901      	ldr	r1, [sp, #4]
   10708:	f7f6 fa9e 	bl	6c48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1070c:	f7f6 fb6e 	bl	6dec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   10710:	2000      	movs	r0, #0
   10712:	bd0e      	pop	{r1, r2, r3, pc}
   10714:	700a      	strb	r2, [r1, #0]
   10716:	4668      	mov	r0, sp
   10718:	f7fe fa6e 	bl	ebf8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   1071c:	e7f8      	b.n	10710 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>

0001071e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   1071e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10720:	460c      	mov	r4, r1
   10722:	4605      	mov	r5, r0
   10724:	8800      	ldrh	r0, [r0, #0]
   10726:	4669      	mov	r1, sp
   10728:	f7fd fea7 	bl	e47a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1072c:	b108      	cbz	r0, 10732 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   1072e:	2002      	movs	r0, #2
   10730:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10732:	78a8      	ldrb	r0, [r5, #2]
   10734:	b130      	cbz	r0, 10744 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   10736:	f000 f9fc 	bl	10b32 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b8>
   1073a:	70a0      	strb	r0, [r4, #2]
   1073c:	8828      	ldrh	r0, [r5, #0]
   1073e:	8020      	strh	r0, [r4, #0]
   10740:	2000      	movs	r0, #0
   10742:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10744:	9801      	ldr	r0, [sp, #4]
   10746:	f890 0072 	ldrb.w	r0, [r0, #114]	; 0x72
   1074a:	e7f6      	b.n	1073a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0001074c <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   1074c:	b510      	push	{r4, lr}
   1074e:	f7fa fc53 	bl	aff8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   10752:	2000      	movs	r0, #0
   10754:	bd10      	pop	{r4, pc}

00010756 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   10756:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1075a:	4604      	mov	r4, r0
   1075c:	8840      	ldrh	r0, [r0, #2]
   1075e:	460d      	mov	r5, r1
   10760:	b1b8      	cbz	r0, 10792 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   10762:	8820      	ldrh	r0, [r4, #0]
   10764:	4669      	mov	r1, sp
   10766:	f7fd fe88 	bl	e47a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1076a:	2800      	cmp	r0, #0
   1076c:	d10f      	bne.n	1078e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   1076e:	8820      	ldrh	r0, [r4, #0]
   10770:	8028      	strh	r0, [r5, #0]
   10772:	9e01      	ldr	r6, [sp, #4]
   10774:	f106 0510 	add.w	r5, r6, #16
   10778:	3678      	adds	r6, #120	; 0x78
   1077a:	682f      	ldr	r7, [r5, #0]
   1077c:	8862      	ldrh	r2, [r4, #2]
   1077e:	4639      	mov	r1, r7
   10780:	4630      	mov	r0, r6
   10782:	f7fd ffc9 	bl	e718 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   10786:	6828      	ldr	r0, [r5, #0]
   10788:	42b8      	cmp	r0, r7
   1078a:	d1f6      	bne.n	1077a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   1078c:	2000      	movs	r0, #0
   1078e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10792:	2012      	movs	r0, #18
   10794:	e7fb      	b.n	1078e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00010796 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   10796:	f000 b863 	b.w	10860 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0001079a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   1079a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1079e:	b086      	sub	sp, #24
   107a0:	4689      	mov	r9, r1
   107a2:	4607      	mov	r7, r0
   107a4:	8800      	ldrh	r0, [r0, #0]
   107a6:	a901      	add	r1, sp, #4
   107a8:	f7fd fe67 	bl	e47a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   107ac:	2800      	cmp	r0, #0
   107ae:	d136      	bne.n	1081e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   107b0:	9802      	ldr	r0, [sp, #8]
   107b2:	4601      	mov	r1, r0
   107b4:	4688      	mov	r8, r1
   107b6:	f890 1176 	ldrb.w	r1, [r0, #374]	; 0x176
   107ba:	f500 748c 	add.w	r4, r0, #280	; 0x118
   107be:	f88d 1000 	strb.w	r1, [sp]
   107c2:	9900      	ldr	r1, [sp, #0]
   107c4:	9100      	str	r1, [sp, #0]
   107c6:	f89d 1000 	ldrb.w	r1, [sp]
   107ca:	3078      	adds	r0, #120	; 0x78
   107cc:	b109      	cbz	r1, 107d2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   107ce:	2601      	movs	r6, #1
   107d0:	e000      	b.n	107d4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   107d2:	2600      	movs	r6, #0
   107d4:	7b81      	ldrb	r1, [r0, #14]
   107d6:	2921      	cmp	r1, #33	; 0x21
   107d8:	d100      	bne.n	107dc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   107da:	b13e      	cbz	r6, 107ec <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   107dc:	2500      	movs	r5, #0
   107de:	305c      	adds	r0, #92	; 0x5c
   107e0:	2108      	movs	r1, #8
   107e2:	4682      	mov	sl, r0
   107e4:	f7ff fb52 	bl	fe8c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x88>
   107e8:	b110      	cbz	r0, 107f0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   107ea:	e007      	b.n	107fc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   107ec:	2501      	movs	r5, #1
   107ee:	e7f6      	b.n	107de <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   107f0:	210b      	movs	r1, #11
   107f2:	4650      	mov	r0, sl
   107f4:	f7ff fb4a 	bl	fe8c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x88>
   107f8:	b900      	cbnz	r0, 107fc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   107fa:	b17d      	cbz	r5, 1081c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
   107fc:	a804      	add	r0, sp, #16
   107fe:	9000      	str	r0, [sp, #0]
   10800:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10804:	ab03      	add	r3, sp, #12
   10806:	463a      	mov	r2, r7
   10808:	4641      	mov	r1, r8
   1080a:	f000 f972 	bl	10af2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x278>
   1080e:	0005      	movs	r5, r0
   10810:	d105      	bne.n	1081e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   10812:	340c      	adds	r4, #12
   10814:	20ff      	movs	r0, #255	; 0xff
   10816:	7060      	strb	r0, [r4, #1]
   10818:	b936      	cbnz	r6, 10828 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   1081a:	e003      	b.n	10824 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
   1081c:	201a      	movs	r0, #26
   1081e:	b006      	add	sp, #24
   10820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10824:	7820      	ldrb	r0, [r4, #0]
   10826:	b108      	cbz	r0, 1082c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
   10828:	253a      	movs	r5, #58	; 0x3a
   1082a:	e012      	b.n	10852 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   1082c:	f884 9000 	strb.w	r9, [r4]
   10830:	f89d 000c 	ldrb.w	r0, [sp, #12]
   10834:	70a0      	strb	r0, [r4, #2]
   10836:	f89d 1010 	ldrb.w	r1, [sp, #16]
   1083a:	70e1      	strb	r1, [r4, #3]
   1083c:	f88d 0000 	strb.w	r0, [sp]
   10840:	f88d 1001 	strb.w	r1, [sp, #1]
   10844:	88b8      	ldrh	r0, [r7, #4]
   10846:	f8ad 0002 	strh.w	r0, [sp, #2]
   1084a:	4669      	mov	r1, sp
   1084c:	4640      	mov	r0, r8
   1084e:	f7fd fed4 	bl	e5fa <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   10852:	2000      	movs	r0, #0
   10854:	7060      	strb	r0, [r4, #1]
   10856:	4628      	mov	r0, r5
   10858:	e7e1      	b.n	1081e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

0001085a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   1085a:	2008      	movs	r0, #8
   1085c:	f7fa bc32 	b.w	b0c4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

00010860 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   10860:	b510      	push	{r4, lr}
   10862:	f7fd fd5e 	bl	e322 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   10866:	f7f5 fdb5 	bl	63d4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   1086a:	f7fa fc4d 	bl	b108 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   1086e:	f7fe fa2d 	bl	eccc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   10872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10876:	f7fa b9f9 	b.w	ac6c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf4>

0001087a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   1087a:	f7f8 b84b 	b.w	8914 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   1087e:	f44f 71a4 	mov.w	r1, #328	; 0x148
   10882:	4288      	cmp	r0, r1
   10884:	d303      	bcc.n	1088e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   10886:	f640 0148 	movw	r1, #2120	; 0x848
   1088a:	4288      	cmp	r0, r1
   1088c:	d300      	bcc.n	10890 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   1088e:	4608      	mov	r0, r1
   10890:	b280      	uxth	r0, r0
   10892:	4770      	bx	lr
   10894:	07c1      	lsls	r1, r0, #31
   10896:	d001      	beq.n	1089c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   10898:	2001      	movs	r0, #1
   1089a:	4770      	bx	lr
   1089c:	0780      	lsls	r0, r0, #30
   1089e:	d501      	bpl.n	108a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   108a0:	2002      	movs	r0, #2
   108a2:	4770      	bx	lr
   108a4:	2000      	movs	r0, #0
   108a6:	4770      	bx	lr
   108a8:	b510      	push	{r4, lr}
   108aa:	2801      	cmp	r0, #1
   108ac:	d006      	beq.n	108bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   108ae:	2802      	cmp	r0, #2
   108b0:	d004      	beq.n	108bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   108b2:	f240 21a9 	movw	r1, #681	; 0x2a9
   108b6:	2006      	movs	r0, #6
   108b8:	f7f4 f8c0 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   108bc:	bd10      	pop	{r4, pc}
   108be:	b50e      	push	{r1, r2, r3, lr}
   108c0:	4669      	mov	r1, sp
   108c2:	2001      	movs	r0, #1
   108c4:	f7fd fb46 	bl	df54 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   108c8:	b150      	cbz	r0, 108e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x66>
   108ca:	f44f 71a3 	mov.w	r1, #326	; 0x146
   108ce:	2039      	movs	r0, #57	; 0x39
   108d0:	f7f4 f8b4 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   108d4:	9802      	ldr	r0, [sp, #8]
   108d6:	f7fe fe88 	bl	f5ea <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   108da:	b108      	cbz	r0, 108e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x66>
   108dc:	2001      	movs	r0, #1
   108de:	bd0e      	pop	{r1, r2, r3, pc}
   108e0:	4668      	mov	r0, sp
   108e2:	f7f4 faef 	bl	4ec4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   108e6:	2800      	cmp	r0, #0
   108e8:	d0f4      	beq.n	108d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5a>
   108ea:	2000      	movs	r0, #0
   108ec:	bd0e      	pop	{r1, r2, r3, pc}
   108ee:	b510      	push	{r4, lr}
   108f0:	f7ff ffe5 	bl	108be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   108f4:	b158      	cbz	r0, 1090e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x94>
   108f6:	f7fa f9db 	bl	acb0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   108fa:	4604      	mov	r4, r0
   108fc:	f7fe fcb9 	bl	f272 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10900:	b918      	cbnz	r0, 1090a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x90>
   10902:	4620      	mov	r0, r4
   10904:	f7fe fcab 	bl	f25e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   10908:	b108      	cbz	r0, 1090e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x94>
   1090a:	2000      	movs	r0, #0
   1090c:	bd10      	pop	{r4, pc}
   1090e:	2001      	movs	r0, #1
   10910:	bd10      	pop	{r4, pc}
   10912:	b570      	push	{r4, r5, r6, lr}
   10914:	460c      	mov	r4, r1
   10916:	4605      	mov	r5, r0
   10918:	b112      	cbz	r2, 10920 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa6>
   1091a:	291f      	cmp	r1, #31
   1091c:	d80c      	bhi.n	10938 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xbe>
   1091e:	e016      	b.n	1094e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd4>
   10920:	f7f4 fd9a 	bl	5458 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   10924:	42a0      	cmp	r0, r4
   10926:	d201      	bcs.n	1092c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb2>
   10928:	2007      	movs	r0, #7
   1092a:	bd70      	pop	{r4, r5, r6, pc}
   1092c:	4628      	mov	r0, r5
   1092e:	f7fe fc9e 	bl	f26e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10932:	b118      	cbz	r0, 1093c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xc2>
   10934:	2c1f      	cmp	r4, #31
   10936:	d901      	bls.n	1093c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xc2>
   10938:	2012      	movs	r0, #18
   1093a:	bd70      	pop	{r4, r5, r6, pc}
   1093c:	4628      	mov	r0, r5
   1093e:	f7fe fc9f 	bl	f280 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10942:	b130      	cbz	r0, 10952 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd8>
   10944:	4621      	mov	r1, r4
   10946:	4628      	mov	r0, r5
   10948:	f7fe fc66 	bl	f218 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   1094c:	b118      	cbz	r0, 10956 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xdc>
   1094e:	2000      	movs	r0, #0
   10950:	bd70      	pop	{r4, r5, r6, pc}
   10952:	2042      	movs	r0, #66	; 0x42
   10954:	bd70      	pop	{r4, r5, r6, pc}
   10956:	2045      	movs	r0, #69	; 0x45
   10958:	bd70      	pop	{r4, r5, r6, pc}
   1095a:	b510      	push	{r4, lr}
   1095c:	4604      	mov	r4, r0
   1095e:	7840      	ldrb	r0, [r0, #1]
   10960:	06c1      	lsls	r1, r0, #27
   10962:	d51c      	bpl.n	1099e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   10964:	07c0      	lsls	r0, r0, #31
   10966:	d00b      	beq.n	10980 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x106>
   10968:	f7fa fb80 	bl	b06c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   1096c:	b1b8      	cbz	r0, 1099e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   1096e:	7860      	ldrb	r0, [r4, #1]
   10970:	06c1      	lsls	r1, r0, #27
   10972:	d405      	bmi.n	10980 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x106>
   10974:	0700      	lsls	r0, r0, #28
   10976:	d503      	bpl.n	10980 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x106>
   10978:	7d20      	ldrb	r0, [r4, #20]
   1097a:	2802      	cmp	r0, #2
   1097c:	d10f      	bne.n	1099e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   1097e:	e010      	b.n	109a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x128>
   10980:	7d20      	ldrb	r0, [r4, #20]
   10982:	2802      	cmp	r0, #2
   10984:	d001      	beq.n	1098a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x110>
   10986:	7ea0      	ldrb	r0, [r4, #26]
   10988:	b948      	cbnz	r0, 1099e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   1098a:	7860      	ldrb	r0, [r4, #1]
   1098c:	0700      	lsls	r0, r0, #28
   1098e:	d408      	bmi.n	109a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x128>
   10990:	f8d4 0005 	ldr.w	r0, [r4, #5]
   10994:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   10998:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   1099c:	d201      	bcs.n	109a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x128>
   1099e:	2011      	movs	r0, #17
   109a0:	bd10      	pop	{r4, pc}
   109a2:	2000      	movs	r0, #0
   109a4:	bd10      	pop	{r4, pc}
   109a6:	b538      	push	{r3, r4, r5, lr}
   109a8:	4604      	mov	r4, r0
   109aa:	7800      	ldrb	r0, [r0, #0]
   109ac:	28ef      	cmp	r0, #239	; 0xef
   109ae:	d843      	bhi.n	10a38 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   109b0:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   109b4:	f8ad 0000 	strh.w	r0, [sp]
   109b8:	9800      	ldr	r0, [sp, #0]
   109ba:	f000 f91e 	bl	10bfa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x380>
   109be:	b3a0      	cbz	r0, 10a2a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b0>
   109c0:	7861      	ldrb	r1, [r4, #1]
   109c2:	0708      	lsls	r0, r1, #28
   109c4:	d40b      	bmi.n	109de <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   109c6:	f8d4 0002 	ldr.w	r0, [r4, #2]
   109ca:	f8d4 3005 	ldr.w	r3, [r4, #5]
   109ce:	0a02      	lsrs	r2, r0, #8
   109d0:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   109d4:	d830      	bhi.n	10a38 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   109d6:	2220      	movs	r2, #32
   109d8:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   109dc:	d82c      	bhi.n	10a38 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   109de:	7a60      	ldrb	r0, [r4, #9]
   109e0:	b318      	cbz	r0, 10a2a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b0>
   109e2:	2807      	cmp	r0, #7
   109e4:	d828      	bhi.n	10a38 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   109e6:	7aa0      	ldrb	r0, [r4, #10]
   109e8:	b128      	cbz	r0, 109f6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   109ea:	2801      	cmp	r0, #1
   109ec:	d003      	beq.n	109f6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   109ee:	2802      	cmp	r0, #2
   109f0:	d001      	beq.n	109f6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   109f2:	2803      	cmp	r0, #3
   109f4:	d120      	bne.n	10a38 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   109f6:	074a      	lsls	r2, r1, #29
   109f8:	d403      	bmi.n	10a02 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x188>
   109fa:	2802      	cmp	r0, #2
   109fc:	d001      	beq.n	10a02 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x188>
   109fe:	2803      	cmp	r0, #3
   10a00:	d105      	bne.n	10a0e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x194>
   10a02:	7ae0      	ldrb	r0, [r4, #11]
   10a04:	b108      	cbz	r0, 10a0a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x190>
   10a06:	2801      	cmp	r0, #1
   10a08:	d116      	bne.n	10a38 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10a0a:	0748      	lsls	r0, r1, #29
   10a0c:	d407      	bmi.n	10a1e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   10a0e:	7ca0      	ldrb	r0, [r4, #18]
   10a10:	b128      	cbz	r0, 10a1e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   10a12:	2801      	cmp	r0, #1
   10a14:	d003      	beq.n	10a1e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   10a16:	2802      	cmp	r0, #2
   10a18:	d001      	beq.n	10a1e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   10a1a:	2803      	cmp	r0, #3
   10a1c:	d10c      	bne.n	10a38 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10a1e:	06c8      	lsls	r0, r1, #27
   10a20:	7d20      	ldrb	r0, [r4, #20]
   10a22:	d503      	bpl.n	10a2c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b2>
   10a24:	2801      	cmp	r0, #1
   10a26:	d107      	bne.n	10a38 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10a28:	e002      	b.n	10a30 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b6>
   10a2a:	e005      	b.n	10a38 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10a2c:	2802      	cmp	r0, #2
   10a2e:	d003      	beq.n	10a38 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   10a30:	7e20      	ldrb	r0, [r4, #24]
   10a32:	b118      	cbz	r0, 10a3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c2>
   10a34:	2801      	cmp	r0, #1
   10a36:	d001      	beq.n	10a3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c2>
   10a38:	2012      	movs	r0, #18
   10a3a:	bd38      	pop	{r3, r4, r5, pc}
   10a3c:	2000      	movs	r0, #0
   10a3e:	bd38      	pop	{r3, r4, r5, pc}
   10a40:	b510      	push	{r4, lr}
   10a42:	0004      	movs	r4, r0
   10a44:	d005      	beq.n	10a52 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   10a46:	f7fa fb4f 	bl	b0e8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10a4a:	4384      	bics	r4, r0
   10a4c:	d001      	beq.n	10a52 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   10a4e:	2000      	movs	r0, #0
   10a50:	bd10      	pop	{r4, pc}
   10a52:	2001      	movs	r0, #1
   10a54:	bd10      	pop	{r4, pc}
   10a56:	28fb      	cmp	r0, #251	; 0xfb
   10a58:	d803      	bhi.n	10a62 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1e8>
   10a5a:	f640 0048 	movw	r0, #2120	; 0x848
   10a5e:	4281      	cmp	r1, r0
   10a60:	d901      	bls.n	10a66 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ec>
   10a62:	2011      	movs	r0, #17
   10a64:	4770      	bx	lr
   10a66:	2000      	movs	r0, #0
   10a68:	4770      	bx	lr
   10a6a:	381b      	subs	r0, #27
   10a6c:	28e1      	cmp	r0, #225	; 0xe1
   10a6e:	d206      	bcs.n	10a7e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x204>
   10a70:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   10a74:	d303      	bcc.n	10a7e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x204>
   10a76:	f244 2090 	movw	r0, #17040	; 0x4290
   10a7a:	4281      	cmp	r1, r0
   10a7c:	d901      	bls.n	10a82 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x208>
   10a7e:	2012      	movs	r0, #18
   10a80:	4770      	bx	lr
   10a82:	2000      	movs	r0, #0
   10a84:	4770      	bx	lr
   10a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10a8a:	4606      	mov	r6, r0
   10a8c:	f8b0 7056 	ldrh.w	r7, [r0, #86]	; 0x56
   10a90:	f8b0 4058 	ldrh.w	r4, [r0, #88]	; 0x58
   10a94:	4615      	mov	r5, r2
   10a96:	3030      	adds	r0, #48	; 0x30
   10a98:	f7f7 faf8 	bl	808c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   10a9c:	4680      	mov	r8, r0
   10a9e:	2102      	movs	r1, #2
   10aa0:	f7fd fd7b 	bl	e59a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10aa4:	4287      	cmp	r7, r0
   10aa6:	d200      	bcs.n	10aaa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x230>
   10aa8:	4638      	mov	r0, r7
   10aaa:	4607      	mov	r7, r0
   10aac:	2102      	movs	r1, #2
   10aae:	4640      	mov	r0, r8
   10ab0:	f7fd fd73 	bl	e59a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10ab4:	4284      	cmp	r4, r0
   10ab6:	d200      	bcs.n	10aba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   10ab8:	4620      	mov	r0, r4
   10aba:	8831      	ldrh	r1, [r6, #0]
   10abc:	8029      	strh	r1, [r5, #0]
   10abe:	2f1b      	cmp	r7, #27
   10ac0:	d913      	bls.n	10aea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x270>
   10ac2:	2ffb      	cmp	r7, #251	; 0xfb
   10ac4:	d300      	bcc.n	10ac8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x24e>
   10ac6:	27fb      	movs	r7, #251	; 0xfb
   10ac8:	806f      	strh	r7, [r5, #2]
   10aca:	281b      	cmp	r0, #27
   10acc:	d90f      	bls.n	10aee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x274>
   10ace:	28fb      	cmp	r0, #251	; 0xfb
   10ad0:	d300      	bcc.n	10ad4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   10ad2:	20fb      	movs	r0, #251	; 0xfb
   10ad4:	80e8      	strh	r0, [r5, #6]
   10ad6:	4640      	mov	r0, r8
   10ad8:	f7ff fed1 	bl	1087e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   10adc:	80a8      	strh	r0, [r5, #4]
   10ade:	4640      	mov	r0, r8
   10ae0:	f7ff fecd 	bl	1087e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   10ae4:	8128      	strh	r0, [r5, #8]
   10ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10aea:	271b      	movs	r7, #27
   10aec:	e7ec      	b.n	10ac8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x24e>
   10aee:	201b      	movs	r0, #27
   10af0:	e7f0      	b.n	10ad4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   10af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10af6:	7890      	ldrb	r0, [r2, #2]
   10af8:	9e06      	ldr	r6, [sp, #24]
   10afa:	461d      	mov	r5, r3
   10afc:	4614      	mov	r4, r2
   10afe:	b908      	cbnz	r0, 10b04 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28a>
   10b00:	f7fa faf2 	bl	b0e8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10b04:	78e4      	ldrb	r4, [r4, #3]
   10b06:	4607      	mov	r7, r0
   10b08:	b914      	cbnz	r4, 10b10 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x296>
   10b0a:	f7fa faed 	bl	b0e8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10b0e:	4604      	mov	r4, r0
   10b10:	b16f      	cbz	r7, 10b2e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   10b12:	b164      	cbz	r4, 10b2e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   10b14:	4638      	mov	r0, r7
   10b16:	f7ff febd 	bl	10894 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   10b1a:	4620      	mov	r0, r4
   10b1c:	f7ff feba 	bl	10894 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   10b20:	b12f      	cbz	r7, 10b2e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   10b22:	b124      	cbz	r4, 10b2e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   10b24:	702f      	strb	r7, [r5, #0]
   10b26:	7034      	strb	r4, [r6, #0]
   10b28:	2000      	movs	r0, #0
   10b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10b2e:	2009      	movs	r0, #9
   10b30:	e7fb      	b.n	10b2a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b0>
   10b32:	207f      	movs	r0, #127	; 0x7f
   10b34:	f000 b843 	b.w	10bbe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
   10b38:	b508      	push	{r3, lr}
   10b3a:	f890 1204 	ldrb.w	r1, [r0, #516]	; 0x204
   10b3e:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
   10b42:	f88d 0000 	strb.w	r0, [sp]
   10b46:	9800      	ldr	r0, [sp, #0]
   10b48:	9000      	str	r0, [sp, #0]
   10b4a:	f89d 0000 	ldrb.w	r0, [sp]
   10b4e:	b100      	cbz	r0, 10b52 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2d8>
   10b50:	2001      	movs	r0, #1
   10b52:	1e40      	subs	r0, r0, #1
   10b54:	4208      	tst	r0, r1
   10b56:	d003      	beq.n	10b60 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   10b58:	2904      	cmp	r1, #4
   10b5a:	d001      	beq.n	10b60 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   10b5c:	2001      	movs	r0, #1
   10b5e:	bd08      	pop	{r3, pc}
   10b60:	2000      	movs	r0, #0
   10b62:	bd08      	pop	{r3, pc}
   10b64:	b510      	push	{r4, lr}
   10b66:	f7ff feaa 	bl	108be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   10b6a:	2800      	cmp	r0, #0
   10b6c:	d000      	beq.n	10b70 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2f6>
   10b6e:	2001      	movs	r0, #1
   10b70:	bd10      	pop	{r4, pc}
   10b72:	b570      	push	{r4, r5, r6, lr}
   10b74:	4605      	mov	r5, r0
   10b76:	f7fe fb83 	bl	f280 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10b7a:	b170      	cbz	r0, 10b9a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x320>
   10b7c:	4628      	mov	r0, r5
   10b7e:	f7fe fd34 	bl	f5ea <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10b82:	2800      	cmp	r0, #0
   10b84:	d008      	beq.n	10b98 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x31e>
   10b86:	4628      	mov	r0, r5
   10b88:	f7fe fd2c 	bl	f5e4 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   10b8c:	4604      	mov	r4, r0
   10b8e:	4628      	mov	r0, r5
   10b90:	f7fe fd02 	bl	f598 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   10b94:	b118      	cbz	r0, 10b9e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x324>
   10b96:	200c      	movs	r0, #12
   10b98:	bd70      	pop	{r4, r5, r6, pc}
   10b9a:	2042      	movs	r0, #66	; 0x42
   10b9c:	bd70      	pop	{r4, r5, r6, pc}
   10b9e:	b164      	cbz	r4, 10bba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x340>
   10ba0:	8820      	ldrh	r0, [r4, #0]
   10ba2:	f7fd fb8b 	bl	e2bc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   10ba6:	8820      	ldrh	r0, [r4, #0]
   10ba8:	2100      	movs	r1, #0
   10baa:	f7f4 f9db 	bl	4f64 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   10bae:	b120      	cbz	r0, 10bba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x340>
   10bb0:	f241 41fd 	movw	r1, #5373	; 0x14fd
   10bb4:	2039      	movs	r0, #57	; 0x39
   10bb6:	f7f3 ff41 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10bba:	2000      	movs	r0, #0
   10bbc:	bd70      	pop	{r4, r5, r6, pc}
   10bbe:	b508      	push	{r3, lr}
   10bc0:	f640 1288 	movw	r2, #2440	; 0x988
   10bc4:	4669      	mov	r1, sp
   10bc6:	f7f3 fe19 	bl	47fc <mpsl_fem_tx_power_split>
   10bca:	bd08      	pop	{r3, pc}
   10bcc:	b530      	push	{r4, r5, lr}
   10bce:	f340 0400 	sbfx	r4, r0, #0, #1
   10bd2:	f340 0040 	sbfx	r0, r0, #1, #1
   10bd6:	1c40      	adds	r0, r0, #1
   10bd8:	9d03      	ldr	r5, [sp, #12]
   10bda:	1c64      	adds	r4, r4, #1
   10bdc:	d000      	beq.n	10be0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x366>
   10bde:	b119      	cbz	r1, 10be8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36e>
   10be0:	b100      	cbz	r0, 10be4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36a>
   10be2:	b10a      	cbz	r2, 10be8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36e>
   10be4:	b91c      	cbnz	r4, 10bee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x374>
   10be6:	e001      	b.n	10bec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x372>
   10be8:	2011      	movs	r0, #17
   10bea:	bd30      	pop	{r4, r5, pc}
   10bec:	2100      	movs	r1, #0
   10bee:	7019      	strb	r1, [r3, #0]
   10bf0:	b900      	cbnz	r0, 10bf4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37a>
   10bf2:	2200      	movs	r2, #0
   10bf4:	702a      	strb	r2, [r5, #0]
   10bf6:	2000      	movs	r0, #0
   10bf8:	bd30      	pop	{r4, r5, pc}
   10bfa:	b2c0      	uxtb	r0, r0
   10bfc:	06c1      	lsls	r1, r0, #27
   10bfe:	d40c      	bmi.n	10c1a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a0>
   10c00:	0681      	lsls	r1, r0, #26
   10c02:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   10c06:	d503      	bpl.n	10c10 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x396>
   10c08:	b9d1      	cbnz	r1, 10c40 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10c0a:	0781      	lsls	r1, r0, #30
   10c0c:	d418      	bmi.n	10c40 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10c0e:	e001      	b.n	10c14 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39a>
   10c10:	2900      	cmp	r1, #0
   10c12:	d1fa      	bne.n	10c0a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x390>
   10c14:	0700      	lsls	r0, r0, #28
   10c16:	d413      	bmi.n	10c40 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10c18:	e010      	b.n	10c3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c2>
   10c1a:	0641      	lsls	r1, r0, #25
   10c1c:	d410      	bmi.n	10c40 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10c1e:	0681      	lsls	r1, r0, #26
   10c20:	d40e      	bmi.n	10c40 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10c22:	07c1      	lsls	r1, r0, #31
   10c24:	ea4f 7180 	mov.w	r1, r0, lsl #30
   10c28:	d004      	beq.n	10c34 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
   10c2a:	2900      	cmp	r1, #0
   10c2c:	db02      	blt.n	10c34 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
   10c2e:	0740      	lsls	r0, r0, #29
   10c30:	d404      	bmi.n	10c3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c2>
   10c32:	e005      	b.n	10c40 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10c34:	0701      	lsls	r1, r0, #28
   10c36:	d403      	bmi.n	10c40 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10c38:	0740      	lsls	r0, r0, #29
   10c3a:	d401      	bmi.n	10c40 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   10c3c:	2001      	movs	r0, #1
   10c3e:	4770      	bx	lr
   10c40:	2000      	movs	r0, #0
   10c42:	4770      	bx	lr
   10c44:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10c46:	4669      	mov	r1, sp
   10c48:	2001      	movs	r0, #1
   10c4a:	f7fd f983 	bl	df54 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   10c4e:	b178      	cbz	r0, 10c70 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3f6>
   10c50:	f44f 71b2 	mov.w	r1, #356	; 0x164
   10c54:	2039      	movs	r0, #57	; 0x39
   10c56:	f7f3 fef1 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10c5a:	9c02      	ldr	r4, [sp, #8]
   10c5c:	4620      	mov	r0, r4
   10c5e:	f7fe fcc4 	bl	f5ea <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10c62:	b128      	cbz	r0, 10c70 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3f6>
   10c64:	4620      	mov	r0, r4
   10c66:	f7fe fb47 	bl	f2f8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   10c6a:	b108      	cbz	r0, 10c70 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3f6>
   10c6c:	2001      	movs	r0, #1
   10c6e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10c70:	4668      	mov	r0, sp
   10c72:	f7f4 f927 	bl	4ec4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   10c76:	2800      	cmp	r0, #0
   10c78:	d0ef      	beq.n	10c5a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3e0>
   10c7a:	2000      	movs	r0, #0
   10c7c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10c7e:	b510      	push	{r4, lr}
   10c80:	f7fe fcb6 	bl	f5f0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   10c84:	b108      	cbz	r0, 10c8a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x410>
   10c86:	21e7      	movs	r1, #231	; 0xe7
   10c88:	e003      	b.n	10c92 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x418>
   10c8a:	f7f6 fb7d 	bl	7388 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   10c8e:	b118      	cbz	r0, 10c98 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41e>
   10c90:	21ec      	movs	r1, #236	; 0xec
   10c92:	2001      	movs	r0, #1
   10c94:	f7f3 fed2 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10c9c:	2001      	movs	r0, #1
   10c9e:	f7f4 b8a7 	b.w	4df0 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10ca2:	6802      	ldr	r2, [r0, #0]
   10ca4:	b912      	cbnz	r2, 10cac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x432>
   10ca6:	6001      	str	r1, [r0, #0]
   10ca8:	4770      	bx	lr
   10caa:	4602      	mov	r2, r0
   10cac:	6850      	ldr	r0, [r2, #4]
   10cae:	b108      	cbz	r0, 10cb4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x43a>
   10cb0:	428a      	cmp	r2, r1
   10cb2:	d1fa      	bne.n	10caa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x430>
   10cb4:	428a      	cmp	r2, r1
   10cb6:	d0f7      	beq.n	10ca8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42e>
   10cb8:	6051      	str	r1, [r2, #4]
   10cba:	4770      	bx	lr
   10cbc:	b510      	push	{r4, lr}
   10cbe:	4604      	mov	r4, r0
   10cc0:	e002      	b.n	10cc8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44e>
   10cc2:	6820      	ldr	r0, [r4, #0]
   10cc4:	4780      	blx	r0
   10cc6:	6864      	ldr	r4, [r4, #4]
   10cc8:	2c00      	cmp	r4, #0
   10cca:	d1fa      	bne.n	10cc2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x448>
   10ccc:	bd10      	pop	{r4, pc}
   10cce:	b510      	push	{r4, lr}
   10cd0:	2000      	movs	r0, #0
   10cd2:	f7f4 f88d 	bl	4df0 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10cd6:	f7f4 fac5 	bl	5264 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   10cda:	f7f4 fd47 	bl	576c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   10cde:	f7f4 ff13 	bl	5b08 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   10ce2:	2800      	cmp	r0, #0
   10ce4:	d003      	beq.n	10cee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x474>
   10ce6:	21c6      	movs	r1, #198	; 0xc6
   10ce8:	2001      	movs	r0, #1
   10cea:	f7f3 fea7 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10cee:	bd10      	pop	{r4, pc}
   10cf0:	b510      	push	{r4, lr}
   10cf2:	f7ff ffc4 	bl	10c7e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x404>
   10cf6:	f7ff f881 	bl	fdfc <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   10cfa:	2800      	cmp	r0, #0
   10cfc:	d004      	beq.n	10d08 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x48e>
   10cfe:	f240 1103 	movw	r1, #259	; 0x103
   10d02:	2001      	movs	r0, #1
   10d04:	f7f3 fe9a 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10d08:	bd10      	pop	{r4, pc}

00010d0a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   10d0a:	f7f3 bacf 	b.w	42ac <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   10d0e:	0001      	.short	0x0001
   10d10:	0002000b 	.word	0x0002000b
   10d14:	0005000a 	.word	0x0005000a
   10d18:	000a0009 	.word	0x000a0009
   10d1c:	00140008 	.word	0x00140008
   10d20:	001e0007 	.word	0x001e0007
   10d24:	00320006 	.word	0x00320006
   10d28:	004b0005 	.word	0x004b0005
   10d2c:	00640004 	.word	0x00640004
   10d30:	00960003 	.word	0x00960003
   10d34:	00fa0002 	.word	0x00fa0002
   10d38:	01f40001 	.word	0x01f40001
	...

00010d3e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   10d3e:	b510      	push	{r4, lr}
   10d40:	f7fa fd6c 	bl	b81c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10d44:	f000 f81d 	bl	10d82 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10d48:	f7fa fa42 	bl	b1d0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   10d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10d50:	f7fa bb3c 	b.w	b3cc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010d54 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10d54:	b510      	push	{r4, lr}
   10d56:	24c8      	movs	r4, #200	; 0xc8
   10d58:	1e64      	subs	r4, r4, #1
   10d5a:	b2e4      	uxtb	r4, r4
   10d5c:	f7fa fa56 	bl	b20c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10d60:	2802      	cmp	r0, #2
   10d62:	d003      	beq.n	10d6c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   10d64:	2801      	cmp	r0, #1
   10d66:	d000      	beq.n	10d6a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10d68:	2000      	movs	r0, #0
   10d6a:	bd10      	pop	{r4, pc}
   10d6c:	2c00      	cmp	r4, #0
   10d6e:	d1f3      	bne.n	10d58 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   10d70:	219e      	movs	r1, #158	; 0x9e
   10d72:	203b      	movs	r0, #59	; 0x3b
   10d74:	f7f3 fe62 	bl	4a3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10d78:	5840      	ldr	r0, [r0, r1]
   10d7a:	2800      	cmp	r0, #0
   10d7c:	d000      	beq.n	10d80 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   10d7e:	2001      	movs	r0, #1
   10d80:	4770      	bx	lr

00010d82 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10d82:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10d86:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10d8a:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   10d8e:	f3bf 8f4f 	dsb	sy
   10d92:	f3bf 8f6f 	isb	sy
   10d96:	f7fa bbb3 	b.w	b500 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   10d9a:	2800      	cmp	r0, #0
   10d9c:	db09      	blt.n	10db2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   10d9e:	f000 021f 	and.w	r2, r0, #31
   10da2:	2101      	movs	r1, #1
   10da4:	4091      	lsls	r1, r2
   10da6:	0940      	lsrs	r0, r0, #5
   10da8:	0080      	lsls	r0, r0, #2
   10daa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10dae:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10db2:	4770      	bx	lr
   10db4:	2800      	cmp	r0, #0
   10db6:	db0d      	blt.n	10dd4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10db8:	f000 021f 	and.w	r2, r0, #31
   10dbc:	2101      	movs	r1, #1
   10dbe:	4091      	lsls	r1, r2
   10dc0:	0940      	lsrs	r0, r0, #5
   10dc2:	0080      	lsls	r0, r0, #2
   10dc4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10dc8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10dcc:	f3bf 8f4f 	dsb	sy
   10dd0:	f3bf 8f6f 	isb	sy
   10dd4:	4770      	bx	lr
   10dd6:	5840      	ldr	r0, [r0, r1]
   10dd8:	2800      	cmp	r0, #0
   10dda:	d000      	beq.n	10dde <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   10ddc:	2001      	movs	r0, #1
   10dde:	4770      	bx	lr
   10de0:	5840      	ldr	r0, [r0, r1]
   10de2:	2800      	cmp	r0, #0
   10de4:	d000      	beq.n	10de8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   10de6:	2001      	movs	r0, #1
   10de8:	4770      	bx	lr

00010dea <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   10dea:	b510      	push	{r4, lr}
   10dec:	4604      	mov	r4, r0
   10dee:	4608      	mov	r0, r1
   10df0:	f7fa fe3a 	bl	ba68 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10df4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10df8:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10dfc:	fbb0 f0f1 	udiv	r0, r0, r1
   10e00:	1a20      	subs	r0, r4, r0
   10e02:	1e80      	subs	r0, r0, #2
   10e04:	bd10      	pop	{r4, pc}

00010e06 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10e06:	b510      	push	{r4, lr}
   10e08:	4604      	mov	r4, r0
   10e0a:	4608      	mov	r0, r1
   10e0c:	f7fa fe2c 	bl	ba68 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10e10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10e14:	fbb0 f0f1 	udiv	r0, r0, r1
   10e18:	1a20      	subs	r0, r4, r0
   10e1a:	bd10      	pop	{r4, pc}
   10e1c:	d8d8d8d8 	.word	0xd8d8d8d8
   10e20:	d8d8d8d8 	.word	0xd8d8d8d8
   10e24:	d8d8d8d8 	.word	0xd8d8d8d8
   10e28:	d8d8d8d8 	.word	0xd8d8d8d8
   10e2c:	d8d8d8d8 	.word	0xd8d8d8d8
   10e30:	ecececec 	.word	0xecececec
   10e34:	f0f0f0f0 	.word	0xf0f0f0f0
   10e38:	f4f4f4f4 	.word	0xf4f4f4f4
   10e3c:	f8f8f8f8 	.word	0xf8f8f8f8
   10e40:	fcfcfcfc 	.word	0xfcfcfcfc
   10e44:	03020000 	.word	0x03020000
   10e48:	07060504 	.word	0x07060504
   10e4c:	d8d8d808 	.word	0xd8d8d808
   10e50:	d8d8d8d8 	.word	0xd8d8d8d8
   10e54:	d8d8d8d8 	.word	0xd8d8d8d8
   10e58:	d8d8d8d8 	.word	0xd8d8d8d8
   10e5c:	d8d8d8d8 	.word	0xd8d8d8d8
   10e60:	ecececd8 	.word	0xecececd8
   10e64:	f0f0f0ec 	.word	0xf0f0f0ec
   10e68:	f4f4f4f0 	.word	0xf4f4f4f0
   10e6c:	f8f8f8f4 	.word	0xf8f8f8f4
   10e70:	fcfcfcf8 	.word	0xfcfcfcf8
   10e74:	000000fc 	.word	0x000000fc
   10e78:	0403      	.short	0x0403
   10e7a:	080c      	.short	0x080c
   10e7c:	010d1702 	.word	0x010d1702
   10e80:	09090201 	.word	0x09090201
   10e84:	02060101 	.word	0x02060101
   10e88:	03181809 	.word	0x03181809
   10e8c:	09090101 	.word	0x09090101
   10e90:	03050303 	.word	0x03050303
   10e94:	02220102 	.word	0x02220102
   10e98:	10092402 	.word	0x10092402
   10e9c:	05050404 	.word	0x05050404

00010ea0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   10ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   10ea2:	4d47      	ldr	r5, [pc, #284]	; (10fc0 <bt_init+0x120>)
{
   10ea4:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   10ea6:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
   10eaa:	6899      	ldr	r1, [r3, #8]
   10eac:	f011 0101 	ands.w	r1, r1, #1
{
   10eb0:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   10eb2:	d122      	bne.n	10efa <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   10eb4:	f107 0208 	add.w	r2, r7, #8
   10eb8:	f640 4003 	movw	r0, #3075	; 0xc03
   10ebc:	f004 fe52 	bl	15b64 <bt_hci_cmd_send_sync>
		if (err) {
   10ec0:	4604      	mov	r4, r0
   10ec2:	2800      	cmp	r0, #0
   10ec4:	d177      	bne.n	10fb6 <bt_init+0x116>
	uint8_t status = buf->data[0];
   10ec6:	68bb      	ldr	r3, [r7, #8]
   10ec8:	689b      	ldr	r3, [r3, #8]
	if (status) {
   10eca:	781b      	ldrb	r3, [r3, #0]
   10ecc:	b993      	cbnz	r3, 10ef4 <bt_init+0x54>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10ece:	f3bf 8f5b 	dmb	ish
   10ed2:	462b      	mov	r3, r5
   10ed4:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   10ed8:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   10edc:	f002 0209 	and.w	r2, r2, #9
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10ee0:	f3bf 8f5b 	dmb	ish
   10ee4:	e853 1f00 	ldrex	r1, [r3]
   10ee8:	e843 2000 	strex	r0, r2, [r3]
   10eec:	2800      	cmp	r0, #0
   10eee:	d1f9      	bne.n	10ee4 <bt_init+0x44>
   10ef0:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   10ef4:	68b8      	ldr	r0, [r7, #8]
   10ef6:	f00c f897 	bl	1d028 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   10efa:	f107 0208 	add.w	r2, r7, #8
   10efe:	2100      	movs	r1, #0
   10f00:	f241 0003 	movw	r0, #4099	; 0x1003
   10f04:	f004 fe2e 	bl	15b64 <bt_hci_cmd_send_sync>
	if (err) {
   10f08:	4604      	mov	r4, r0
   10f0a:	2800      	cmp	r0, #0
   10f0c:	d153      	bne.n	10fb6 <bt_init+0x116>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   10f0e:	68bb      	ldr	r3, [r7, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   10f10:	482c      	ldr	r0, [pc, #176]	; (10fc4 <bt_init+0x124>)
   10f12:	6899      	ldr	r1, [r3, #8]
   10f14:	2208      	movs	r2, #8
   10f16:	3101      	adds	r1, #1
   10f18:	f015 fefe 	bl	26d18 <memcpy>
	net_buf_unref(rsp);
   10f1c:	68b8      	ldr	r0, [r7, #8]
   10f1e:	f00c f883 	bl	1d028 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   10f22:	4621      	mov	r1, r4
   10f24:	f107 0208 	add.w	r2, r7, #8
   10f28:	f241 0001 	movw	r0, #4097	; 0x1001
   10f2c:	f004 fe1a 	bl	15b64 <bt_hci_cmd_send_sync>
	if (err) {
   10f30:	4604      	mov	r4, r0
   10f32:	2800      	cmp	r0, #0
   10f34:	d13f      	bne.n	10fb6 <bt_init+0x116>
	read_local_ver_complete(rsp);
   10f36:	68b8      	ldr	r0, [r7, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   10f38:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   10f3a:	785a      	ldrb	r2, [r3, #1]
   10f3c:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   10f40:	78d9      	ldrb	r1, [r3, #3]
   10f42:	789a      	ldrb	r2, [r3, #2]
   10f44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   10f48:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   10f4c:	791a      	ldrb	r2, [r3, #4]
   10f4e:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   10f52:	7a19      	ldrb	r1, [r3, #8]
   10f54:	79da      	ldrb	r2, [r3, #7]
   10f56:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   10f5a:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   10f5e:	795a      	ldrb	r2, [r3, #5]
   10f60:	799b      	ldrb	r3, [r3, #6]
   10f62:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   10f66:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   10f6a:	f00c f85d 	bl	1d028 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   10f6e:	4621      	mov	r1, r4
   10f70:	f107 0208 	add.w	r2, r7, #8
   10f74:	f241 0002 	movw	r0, #4098	; 0x1002
   10f78:	f004 fdf4 	bl	15b64 <bt_hci_cmd_send_sync>
	if (err) {
   10f7c:	4604      	mov	r4, r0
   10f7e:	b9d0      	cbnz	r0, 10fb6 <bt_init+0x116>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   10f80:	68bb      	ldr	r3, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   10f82:	4811      	ldr	r0, [pc, #68]	; (10fc8 <bt_init+0x128>)
   10f84:	6899      	ldr	r1, [r3, #8]
   10f86:	2240      	movs	r2, #64	; 0x40
   10f88:	3101      	adds	r1, #1
   10f8a:	f015 fec5 	bl	26d18 <memcpy>
	net_buf_unref(rsp);
   10f8e:	68b8      	ldr	r0, [r7, #8]
   10f90:	f00c f84a 	bl	1d028 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   10f94:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   10f98:	065a      	lsls	r2, r3, #25
   10f9a:	d41b      	bmi.n	10fd4 <bt_init+0x134>
		BT_ERR("Non-LE capable controller detected!");
   10f9c:	4b0b      	ldr	r3, [pc, #44]	; (10fcc <bt_init+0x12c>)
   10f9e:	61fb      	str	r3, [r7, #28]
   10fa0:	480b      	ldr	r0, [pc, #44]	; (10fd0 <bt_init+0x130>)
   10fa2:	2302      	movs	r3, #2
   10fa4:	f107 0218 	add.w	r2, r7, #24
   10fa8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   10fac:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("Non-LE capable controller detected!");
   10fb0:	61bb      	str	r3, [r7, #24]
   10fb2:	f015 ffe3 	bl	26f7c <z_log_msg_static_create.constprop.0>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   10fb6:	4620      	mov	r0, r4
   10fb8:	3724      	adds	r7, #36	; 0x24
   10fba:	46bd      	mov	sp, r7
   10fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10fbe:	bf00      	nop
   10fc0:	20000350 	.word	0x20000350
   10fc4:	200003c0 	.word	0x200003c0
   10fc8:	200003c8 	.word	0x200003c8
   10fcc:	0002cb23 	.word	0x0002cb23
   10fd0:	0002ac10 	.word	0x0002ac10
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   10fd4:	4621      	mov	r1, r4
   10fd6:	f107 0208 	add.w	r2, r7, #8
   10fda:	f242 0003 	movw	r0, #8195	; 0x2003
   10fde:	f004 fdc1 	bl	15b64 <bt_hci_cmd_send_sync>
	if (err) {
   10fe2:	4604      	mov	r4, r0
   10fe4:	2800      	cmp	r0, #0
   10fe6:	d1e6      	bne.n	10fb6 <bt_init+0x116>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   10fe8:	68bb      	ldr	r3, [r7, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   10fea:	48bb      	ldr	r0, [pc, #748]	; (112d8 <bt_init+0x438>)
   10fec:	6899      	ldr	r1, [r3, #8]
   10fee:	2208      	movs	r2, #8
   10ff0:	3101      	adds	r1, #1
   10ff2:	f015 fe91 	bl	26d18 <memcpy>
	net_buf_unref(rsp);
   10ff6:	68b8      	ldr	r0, [r7, #8]
   10ff8:	f00c f816 	bl	1d028 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   10ffc:	4621      	mov	r1, r4
   10ffe:	f107 0208 	add.w	r2, r7, #8
   11002:	f242 0002 	movw	r0, #8194	; 0x2002
   11006:	f004 fdad 	bl	15b64 <bt_hci_cmd_send_sync>
		if (err) {
   1100a:	4604      	mov	r4, r0
   1100c:	2800      	cmp	r0, #0
   1100e:	d1d2      	bne.n	10fb6 <bt_init+0x116>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   11010:	68bb      	ldr	r3, [r7, #8]
   11012:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   11014:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   11018:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   1101c:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   1101e:	b121      	cbz	r1, 1102a <bt_init+0x18a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   11020:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   11022:	48ae      	ldr	r0, [pc, #696]	; (112dc <bt_init+0x43c>)
   11024:	4611      	mov	r1, r2
   11026:	f018 ffa4 	bl	29f72 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   1102a:	68b8      	ldr	r0, [r7, #8]
   1102c:	f00b fffc 	bl	1d028 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   11030:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   11034:	f016 0620 	ands.w	r6, r6, #32
   11038:	f000 811a 	beq.w	11270 <bt_init+0x3d0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   1103c:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   11040:	071b      	lsls	r3, r3, #28
   11042:	d513      	bpl.n	1106c <bt_init+0x1cc>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   11044:	f107 0208 	add.w	r2, r7, #8
   11048:	2100      	movs	r1, #0
   1104a:	f242 001c 	movw	r0, #8220	; 0x201c
   1104e:	f004 fd89 	bl	15b64 <bt_hci_cmd_send_sync>
		if (err) {
   11052:	4604      	mov	r4, r0
   11054:	2800      	cmp	r0, #0
   11056:	d1ae      	bne.n	10fb6 <bt_init+0x116>
		le_read_supp_states_complete(rsp);
   11058:	68b8      	ldr	r0, [r7, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1105a:	6883      	ldr	r3, [r0, #8]
   1105c:	f8d3 2001 	ldr.w	r2, [r3, #1]
   11060:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   11064:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   11068:	f00b ffde 	bl	1d028 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   1106c:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   11070:	069e      	lsls	r6, r3, #26
   11072:	d521      	bpl.n	110b8 <bt_init+0x218>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   11074:	1d39      	adds	r1, r7, #4
   11076:	1cb8      	adds	r0, r7, #2
   11078:	f004 fdf0 	bl	15c5c <hci_le_read_max_data_len>
		if (err) {
   1107c:	4604      	mov	r4, r0
   1107e:	2800      	cmp	r0, #0
   11080:	d199      	bne.n	10fb6 <bt_init+0x116>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   11082:	2104      	movs	r1, #4
   11084:	f242 0024 	movw	r0, #8228	; 0x2024
   11088:	f004 fd32 	bl	15af0 <bt_hci_cmd_create>
		if (!buf) {
   1108c:	4606      	mov	r6, r0
   1108e:	2800      	cmp	r0, #0
   11090:	f000 80f5 	beq.w	1127e <bt_init+0x3de>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   11094:	2104      	movs	r1, #4
   11096:	3008      	adds	r0, #8
   11098:	f018 f81c 	bl	290d4 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1109c:	887b      	ldrh	r3, [r7, #2]
   1109e:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   110a0:	88bb      	ldrh	r3, [r7, #4]
   110a2:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   110a4:	4622      	mov	r2, r4
   110a6:	4631      	mov	r1, r6
   110a8:	f242 0024 	movw	r0, #8228	; 0x2024
   110ac:	f004 fd5a 	bl	15b64 <bt_hci_cmd_send_sync>
		if (err) {
   110b0:	4604      	mov	r4, r0
   110b2:	2800      	cmp	r0, #0
   110b4:	f47f af7f 	bne.w	10fb6 <bt_init+0x116>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   110b8:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   110bc:	065c      	lsls	r4, r3, #25
   110be:	d52b      	bpl.n	11118 <bt_init+0x278>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
   110c0:	2102      	movs	r1, #2
   110c2:	f242 002e 	movw	r0, #8238	; 0x202e
   110c6:	f004 fd13 	bl	15af0 <bt_hci_cmd_create>
		if (!buf) {
   110ca:	4604      	mov	r4, r0
   110cc:	2800      	cmp	r0, #0
   110ce:	f000 80d6 	beq.w	1127e <bt_init+0x3de>
   110d2:	2102      	movs	r1, #2
   110d4:	3008      	adds	r0, #8
   110d6:	f017 fffd 	bl	290d4 <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(bt_dev.rpa_timeout);
   110da:	f8b5 31a0 	ldrh.w	r3, [r5, #416]	; 0x1a0
   110de:	8003      	strh	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
   110e0:	4621      	mov	r1, r4
   110e2:	2200      	movs	r2, #0
   110e4:	f242 002e 	movw	r0, #8238	; 0x202e
   110e8:	f004 fd3c 	bl	15b64 <bt_hci_cmd_send_sync>
		if (err) {
   110ec:	4604      	mov	r4, r0
   110ee:	2800      	cmp	r0, #0
   110f0:	f47f af61 	bne.w	10fb6 <bt_init+0x116>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   110f4:	4601      	mov	r1, r0
   110f6:	f107 0208 	add.w	r2, r7, #8
   110fa:	f242 002a 	movw	r0, #8234	; 0x202a
   110fe:	f004 fd31 	bl	15b64 <bt_hci_cmd_send_sync>
		if (err) {
   11102:	4604      	mov	r4, r0
   11104:	2800      	cmp	r0, #0
   11106:	f47f af56 	bne.w	10fb6 <bt_init+0x116>
		le_read_resolving_list_size_complete(rsp);
   1110a:	68b8      	ldr	r0, [r7, #8]
	bt_dev.le.rl_size = rp->rl_size;
   1110c:	6883      	ldr	r3, [r0, #8]
   1110e:	785b      	ldrb	r3, [r3, #1]
   11110:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   11114:	f00b ff88 	bl	1d028 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   11118:	2108      	movs	r1, #8
   1111a:	f242 0001 	movw	r0, #8193	; 0x2001
   1111e:	f004 fce7 	bl	15af0 <bt_hci_cmd_create>
	if (!buf) {
   11122:	4604      	mov	r4, r0
   11124:	2800      	cmp	r0, #0
   11126:	f000 80aa 	beq.w	1127e <bt_init+0x3de>
   1112a:	2108      	movs	r1, #8
   1112c:	4408      	add	r0, r1
   1112e:	f017 ffd1 	bl	290d4 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   11132:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   11136:	f011 0f40 	tst.w	r1, #64	; 0x40
   1113a:	4602      	mov	r2, r0
   1113c:	f240 2302 	movw	r3, #514	; 0x202
   11140:	bf08      	it	eq
   11142:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   11144:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   11146:	bf4c      	ite	mi
   11148:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   1114c:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   11150:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   11152:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   11156:	bf48      	it	mi
   11158:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1115c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   11160:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   11164:	bf18      	it	ne
   11166:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   1116a:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1116e:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   11170:	bf48      	it	mi
   11172:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   11176:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   11178:	bf08      	it	eq
   1117a:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   1117e:	2100      	movs	r1, #0
   11180:	f015 ff0b 	bl	26f9a <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   11184:	4621      	mov	r1, r4
   11186:	2200      	movs	r2, #0
   11188:	f242 0001 	movw	r0, #8193	; 0x2001
   1118c:	f004 fcea 	bl	15b64 <bt_hci_cmd_send_sync>
	if (err) {
   11190:	4604      	mov	r4, r0
   11192:	2800      	cmp	r0, #0
   11194:	f47f af0f 	bne.w	10fb6 <bt_init+0x116>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   11198:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   1119c:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   111a0:	0698      	lsls	r0, r3, #26
   111a2:	f100 8081 	bmi.w	112a8 <bt_init+0x408>
	if (bt_dev.le.acl_mtu) {
   111a6:	b9e1      	cbnz	r1, 111e2 <bt_init+0x342>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   111a8:	f107 0208 	add.w	r2, r7, #8
   111ac:	f241 0005 	movw	r0, #4101	; 0x1005
   111b0:	f004 fcd8 	bl	15b64 <bt_hci_cmd_send_sync>
	if (err) {
   111b4:	4604      	mov	r4, r0
   111b6:	2800      	cmp	r0, #0
   111b8:	f47f aefd 	bne.w	10fb6 <bt_init+0x116>
	if (bt_dev.le.acl_mtu) {
   111bc:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   111c0:	b963      	cbnz	r3, 111dc <bt_init+0x33c>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   111c2:	68bb      	ldr	r3, [r7, #8]
   111c4:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   111c6:	785a      	ldrb	r2, [r3, #1]
   111c8:	7899      	ldrb	r1, [r3, #2]
   111ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   111ce:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   111d2:	889a      	ldrh	r2, [r3, #4]
   111d4:	4841      	ldr	r0, [pc, #260]	; (112dc <bt_init+0x43c>)
   111d6:	4611      	mov	r1, r2
   111d8:	f018 fecb 	bl	29f72 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   111dc:	68b8      	ldr	r0, [r7, #8]
   111de:	f00b ff23 	bl	1d028 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   111e2:	2108      	movs	r1, #8
   111e4:	f640 4001 	movw	r0, #3073	; 0xc01
   111e8:	f004 fc82 	bl	15af0 <bt_hci_cmd_create>
	if (!buf) {
   111ec:	4604      	mov	r4, r0
   111ee:	2800      	cmp	r0, #0
   111f0:	d045      	beq.n	1127e <bt_init+0x3de>
   111f2:	2108      	movs	r1, #8
   111f4:	4408      	add	r0, r1
   111f6:	f017 ff6d 	bl	290d4 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   111fa:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   111fe:	07d9      	lsls	r1, r3, #31
   11200:	4602      	mov	r2, r0
   11202:	d561      	bpl.n	112c8 <bt_init+0x428>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   11204:	a132      	add	r1, pc, #200	; (adr r1, 112d0 <bt_init+0x430>)
   11206:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
   1120a:	f015 fec6 	bl	26f9a <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1120e:	4621      	mov	r1, r4
   11210:	2200      	movs	r2, #0
   11212:	f640 4001 	movw	r0, #3073	; 0xc01
   11216:	f004 fca5 	bl	15b64 <bt_hci_cmd_send_sync>
	if (err) {
   1121a:	4604      	mov	r4, r0
   1121c:	2800      	cmp	r0, #0
   1121e:	f47f aeca 	bne.w	10fb6 <bt_init+0x116>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   11222:	4601      	mov	r1, r0
   11224:	1d3a      	adds	r2, r7, #4
   11226:	f64f 4001 	movw	r0, #64513	; 0xfc01
   1122a:	f004 fc9b 	bl	15b64 <bt_hci_cmd_send_sync>
	if (err) {
   1122e:	2800      	cmp	r0, #0
   11230:	d05e      	beq.n	112f0 <bt_init+0x450>
		BT_WARN("Vendor HCI extensions not available");
   11232:	4b2b      	ldr	r3, [pc, #172]	; (112e0 <bt_init+0x440>)
   11234:	61fb      	str	r3, [r7, #28]
   11236:	2302      	movs	r3, #2
   11238:	61bb      	str	r3, [r7, #24]
			BT_WARN("Failed to read supported vendor features");
   1123a:	482a      	ldr	r0, [pc, #168]	; (112e4 <bt_init+0x444>)
   1123c:	f107 0218 	add.w	r2, r7, #24
   11240:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11244:	f015 fe9a 	bl	26f7c <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
   11248:	f005 ff78 	bl	1713c <bt_id_init>
	if (err) {
   1124c:	4604      	mov	r4, r0
   1124e:	2800      	cmp	r0, #0
   11250:	f47f aeb1 	bne.w	10fb6 <bt_init+0x116>
		err = bt_conn_init();
   11254:	f006 fe3c 	bl	17ed0 <bt_conn_init>
		if (err) {
   11258:	4604      	mov	r4, r0
   1125a:	2800      	cmp	r0, #0
   1125c:	f47f aeab 	bne.w	10fb6 <bt_init+0x116>
		if (!bt_dev.id_count) {
   11260:	79eb      	ldrb	r3, [r5, #7]
   11262:	2b00      	cmp	r3, #0
   11264:	f040 80d6 	bne.w	11414 <bt_init+0x574>
   11268:	f004 f842 	bl	152f0 <bt_init.part.0>
   1126c:	4604      	mov	r4, r0
   1126e:	e6a2      	b.n	10fb6 <bt_init+0x116>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   11270:	2102      	movs	r1, #2
   11272:	f640 406d 	movw	r0, #3181	; 0xc6d
   11276:	f004 fc3b 	bl	15af0 <bt_hci_cmd_create>
		if (!buf) {
   1127a:	4604      	mov	r4, r0
   1127c:	b910      	cbnz	r0, 11284 <bt_init+0x3e4>
		return -ENOBUFS;
   1127e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   11282:	e698      	b.n	10fb6 <bt_init+0x116>
   11284:	2102      	movs	r1, #2
   11286:	3008      	adds	r0, #8
   11288:	f017 ff24 	bl	290d4 <net_buf_simple_add>
		cp_le->le = 0x01;
   1128c:	2301      	movs	r3, #1
   1128e:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   11290:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   11292:	4621      	mov	r1, r4
   11294:	4632      	mov	r2, r6
   11296:	f640 406d 	movw	r0, #3181	; 0xc6d
   1129a:	f004 fc63 	bl	15b64 <bt_hci_cmd_send_sync>
		if (err) {
   1129e:	4604      	mov	r4, r0
   112a0:	2800      	cmp	r0, #0
   112a2:	f43f aecb 	beq.w	1103c <bt_init+0x19c>
   112a6:	e686      	b.n	10fb6 <bt_init+0x116>
	else if (!bt_dev.le.acl_mtu) {
   112a8:	2900      	cmp	r1, #0
   112aa:	d19a      	bne.n	111e2 <bt_init+0x342>
		BT_ERR("ACL BR/EDR buffers not initialized");
   112ac:	4b0e      	ldr	r3, [pc, #56]	; (112e8 <bt_init+0x448>)
   112ae:	61fb      	str	r3, [r7, #28]
   112b0:	480c      	ldr	r0, [pc, #48]	; (112e4 <bt_init+0x444>)
   112b2:	2302      	movs	r3, #2
   112b4:	f107 0218 	add.w	r2, r7, #24
   112b8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   112bc:	61bb      	str	r3, [r7, #24]
		return -EIO;
   112be:	f06f 0404 	mvn.w	r4, #4
		BT_ERR("ACL BR/EDR buffers not initialized");
   112c2:	f015 fe5b 	bl	26f7c <z_log_msg_static_create.constprop.0>
	if (err) {
   112c6:	e676      	b.n	10fb6 <bt_init+0x116>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   112c8:	4808      	ldr	r0, [pc, #32]	; (112ec <bt_init+0x44c>)
   112ca:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   112ce:	e79c      	b.n	1120a <bt_init+0x36a>
   112d0:	02008890 	.word	0x02008890
   112d4:	20008000 	.word	0x20008000
   112d8:	20000420 	.word	0x20000420
   112dc:	20000450 	.word	0x20000450
   112e0:	0002cb6a 	.word	0x0002cb6a
   112e4:	0002ac10 	.word	0x0002ac10
   112e8:	0002cb47 	.word	0x0002cb47
   112ec:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
   112f0:	687b      	ldr	r3, [r7, #4]
   112f2:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
   112f4:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   112f8:	2b03      	cmp	r3, #3
		return plat_str[platform];
   112fa:	bf96      	itet	ls
   112fc:	4a49      	ldrls	r2, [pc, #292]	; (11424 <bt_init+0x584>)
	return "unknown";
   112fe:	494a      	ldrhi	r1, [pc, #296]	; (11428 <bt_init+0x588>)
		return plat_str[platform];
   11300:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
   11304:	466e      	mov	r6, sp
   11306:	b08a      	sub	sp, #40	; 0x28
   11308:	466a      	mov	r2, sp
   1130a:	4848      	ldr	r0, [pc, #288]	; (1142c <bt_init+0x58c>)
   1130c:	61d3      	str	r3, [r2, #28]
   1130e:	2302      	movs	r3, #2
   11310:	f882 3020 	strb.w	r3, [r2, #32]
   11314:	4b46      	ldr	r3, [pc, #280]	; (11430 <bt_init+0x590>)
   11316:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1131a:	f842 3f10 	str.w	r3, [r2, #16]!
   1131e:	4845      	ldr	r0, [pc, #276]	; (11434 <bt_init+0x594>)
   11320:	f44f 510b 	mov.w	r1, #8896	; 0x22c0
   11324:	f015 fe2a 	bl	26f7c <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   11328:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
   1132c:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   11330:	2a02      	cmp	r2, #2
   11332:	46b5      	mov	sp, r6
   11334:	d149      	bne.n	113ca <bt_init+0x52a>
	if (variant < ARRAY_SIZE(nordic_str)) {
   11336:	2b03      	cmp	r3, #3
   11338:	d847      	bhi.n	113ca <bt_init+0x52a>
		return nordic_str[variant];
   1133a:	4a3f      	ldr	r2, [pc, #252]	; (11438 <bt_init+0x598>)
   1133c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
   11340:	466e      	mov	r6, sp
   11342:	b08a      	sub	sp, #40	; 0x28
   11344:	466a      	mov	r2, sp
   11346:	483d      	ldr	r0, [pc, #244]	; (1143c <bt_init+0x59c>)
   11348:	61d3      	str	r3, [r2, #28]
   1134a:	2302      	movs	r3, #2
   1134c:	f882 3020 	strb.w	r3, [r2, #32]
   11350:	4b37      	ldr	r3, [pc, #220]	; (11430 <bt_init+0x590>)
   11352:	e9c2 0105 	strd	r0, r1, [r2, #20]
   11356:	f842 3f10 	str.w	r3, [r2, #16]!
   1135a:	f44f 510b 	mov.w	r1, #8896	; 0x22c0
   1135e:	4835      	ldr	r0, [pc, #212]	; (11434 <bt_init+0x594>)
   11360:	f015 fe0c 	bl	26f7c <z_log_msg_static_create.constprop.0>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   11364:	7963      	ldrb	r3, [r4, #5]
   11366:	f894 e006 	ldrb.w	lr, [r4, #6]
   1136a:	f8b4 c007 	ldrh.w	ip, [r4, #7]
   1136e:	f8d4 0009 	ldr.w	r0, [r4, #9]
	if (variant < ARRAY_SIZE(var_str)) {
   11372:	2b03      	cmp	r3, #3
		return var_str[variant];
   11374:	bf96      	itet	ls
   11376:	4a32      	ldrls	r2, [pc, #200]	; (11440 <bt_init+0x5a0>)
	return "unknown";
   11378:	492b      	ldrhi	r1, [pc, #172]	; (11428 <bt_init+0x588>)
		return var_str[variant];
   1137a:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
   1137e:	46b5      	mov	sp, r6
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   11380:	466e      	mov	r6, sp
   11382:	b08c      	sub	sp, #48	; 0x30
   11384:	466a      	mov	r2, sp
   11386:	4c2f      	ldr	r4, [pc, #188]	; (11444 <bt_init+0x5a4>)
   11388:	e9c2 3e07 	strd	r3, lr, [r2, #28]
   1138c:	e9c2 4105 	strd	r4, r1, [r2, #20]
   11390:	4b2d      	ldr	r3, [pc, #180]	; (11448 <bt_init+0x5a8>)
   11392:	2402      	movs	r4, #2
   11394:	e9c2 c009 	strd	ip, r0, [r2, #36]	; 0x24
   11398:	f882 402c 	strb.w	r4, [r2, #44]	; 0x2c
   1139c:	f44f 516b 	mov.w	r1, #15040	; 0x3ac0
   113a0:	f842 3f10 	str.w	r3, [r2, #16]!
   113a4:	4823      	ldr	r0, [pc, #140]	; (11434 <bt_init+0x594>)
   113a6:	f015 fde9 	bl	26f7c <z_log_msg_static_create.constprop.0>
   113aa:	46b5      	mov	sp, r6
	net_buf_unref(rsp);
   113ac:	6878      	ldr	r0, [r7, #4]
   113ae:	f00b fe3b 	bl	1d028 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   113b2:	1d3a      	adds	r2, r7, #4
   113b4:	2100      	movs	r1, #0
   113b6:	f64f 4002 	movw	r0, #64514	; 0xfc02
   113ba:	f004 fbd3 	bl	15b64 <bt_hci_cmd_send_sync>
	if (err) {
   113be:	4606      	mov	r6, r0
   113c0:	b128      	cbz	r0, 113ce <bt_init+0x52e>
		BT_WARN("Failed to read supported vendor commands");
   113c2:	4b22      	ldr	r3, [pc, #136]	; (1144c <bt_init+0x5ac>)
			BT_WARN("Failed to read supported vendor features");
   113c4:	e9c7 4306 	strd	r4, r3, [r7, #24]
   113c8:	e737      	b.n	1123a <bt_init+0x39a>
		return "unknown";
   113ca:	4917      	ldr	r1, [pc, #92]	; (11428 <bt_init+0x588>)
   113cc:	e7b8      	b.n	11340 <bt_init+0x4a0>
	rp.cmds = (void *)rsp->data;
   113ce:	687b      	ldr	r3, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   113d0:	481f      	ldr	r0, [pc, #124]	; (11450 <bt_init+0x5b0>)
   113d2:	6899      	ldr	r1, [r3, #8]
   113d4:	4622      	mov	r2, r4
   113d6:	3101      	adds	r1, #1
   113d8:	f015 fc9e 	bl	26d18 <memcpy>
	net_buf_unref(rsp);
   113dc:	6878      	ldr	r0, [r7, #4]
   113de:	f00b fe23 	bl	1d028 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   113e2:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   113e6:	075b      	lsls	r3, r3, #29
   113e8:	f57f af2e 	bpl.w	11248 <bt_init+0x3a8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   113ec:	1d3a      	adds	r2, r7, #4
   113ee:	4631      	mov	r1, r6
   113f0:	f64f 4003 	movw	r0, #64515	; 0xfc03
   113f4:	f004 fbb6 	bl	15b64 <bt_hci_cmd_send_sync>
		if (err) {
   113f8:	b108      	cbz	r0, 113fe <bt_init+0x55e>
			BT_WARN("Failed to read supported vendor features");
   113fa:	4b16      	ldr	r3, [pc, #88]	; (11454 <bt_init+0x5b4>)
   113fc:	e7e2      	b.n	113c4 <bt_init+0x524>
		rp.feat = (void *)rsp->data;
   113fe:	687b      	ldr	r3, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   11400:	4815      	ldr	r0, [pc, #84]	; (11458 <bt_init+0x5b8>)
   11402:	6899      	ldr	r1, [r3, #8]
   11404:	2201      	movs	r2, #1
   11406:	4411      	add	r1, r2
   11408:	f015 fc86 	bl	26d18 <memcpy>
		net_buf_unref(rsp);
   1140c:	6878      	ldr	r0, [r7, #4]
   1140e:	f00b fe0b 	bl	1d028 <net_buf_unref>
   11412:	e719      	b.n	11248 <bt_init+0x3a8>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11414:	2108      	movs	r1, #8
   11416:	4811      	ldr	r0, [pc, #68]	; (1145c <bt_init+0x5bc>)
   11418:	f015 fd9c 	bl	26f54 <atomic_or>
	bt_finalize_init();
   1141c:	f005 f8da 	bl	165d4 <bt_finalize_init>
	return 0;
   11420:	e5c9      	b.n	10fb6 <bt_init+0x116>
   11422:	bf00      	nop
   11424:	0002b3c8 	.word	0x0002b3c8
   11428:	0002c62e 	.word	0x0002c62e
   1142c:	0002cb8e 	.word	0x0002cb8e
   11430:	01000004 	.word	0x01000004
   11434:	0002ac10 	.word	0x0002ac10
   11438:	0002b388 	.word	0x0002b388
   1143c:	0002cba7 	.word	0x0002cba7
   11440:	0002b400 	.word	0x0002b400
   11444:	0002cbbf 	.word	0x0002cbbf
   11448:	01000007 	.word	0x01000007
   1144c:	0002cbec 	.word	0x0002cbec
   11450:	20000409 	.word	0x20000409
   11454:	0002cc15 	.word	0x0002cc15
   11458:	20000408 	.word	0x20000408
   1145c:	2000041c 	.word	0x2000041c

00011460 <AD5940_SEQGenSearchReg>:
static AD5940Err AD5940_SEQGenSearchReg(uint32_t RegAddr, uint32_t *pIndex)
{
  uint32_t i;

  RegAddr = (RegAddr>>2)&0xff;
  for(i=0;i<SeqGenDB.RegCount;i++)
   11460:	4b0a      	ldr	r3, [pc, #40]	; (1148c <AD5940_SEQGenSearchReg+0x2c>)
{
   11462:	b530      	push	{r4, r5, lr}
  RegAddr = (RegAddr>>2)&0xff;
   11464:	f3c0 0087 	ubfx	r0, r0, #2, #8
  {
    if(RegAddr == SeqGenDB.pRegInfo[i].RegAddr)
   11468:	e9d3 4204 	ldrd	r4, r2, [r3, #16]
  for(i=0;i<SeqGenDB.RegCount;i++)
   1146c:	2300      	movs	r3, #0
   1146e:	429a      	cmp	r2, r3
   11470:	d102      	bne.n	11478 <AD5940_SEQGenSearchReg+0x18>
    {
      *pIndex = i;
      return AD5940ERR_OK;
    }
  }
  return AD5940ERR_SEQREG;
   11472:	f06f 0006 	mvn.w	r0, #6
   11476:	e005      	b.n	11484 <AD5940_SEQGenSearchReg+0x24>
    if(RegAddr == SeqGenDB.pRegInfo[i].RegAddr)
   11478:	f814 5023 	ldrb.w	r5, [r4, r3, lsl #2]
   1147c:	4285      	cmp	r5, r0
   1147e:	d102      	bne.n	11486 <AD5940_SEQGenSearchReg+0x26>
      *pIndex = i;
   11480:	600b      	str	r3, [r1, #0]
      return AD5940ERR_OK;
   11482:	2000      	movs	r0, #0
}
   11484:	bd30      	pop	{r4, r5, pc}
  for(i=0;i<SeqGenDB.RegCount;i++)
   11486:	3301      	adds	r3, #1
   11488:	e7f1      	b.n	1146e <AD5940_SEQGenSearchReg+0xe>
   1148a:	bf00      	nop
   1148c:	200024b8 	.word	0x200024b8

00011490 <AD5940_SEQRegInfoInsert>:
 * @return Return None.
*/
static void AD5940_SEQRegInfoInsert(uint16_t RegAddr, uint32_t RegData)
{
  uint32_t temp;
  temp = SeqGenDB.RegCount + SeqGenDB.SeqLen;
   11490:	4b0d      	ldr	r3, [pc, #52]	; (114c8 <AD5940_SEQRegInfoInsert+0x38>)
{
   11492:	b530      	push	{r4, r5, lr}
  temp = SeqGenDB.RegCount + SeqGenDB.SeqLen;
   11494:	695a      	ldr	r2, [r3, #20]
   11496:	68dc      	ldr	r4, [r3, #12]
  
  if(temp < SeqGenDB.BufferSize)
   11498:	685d      	ldr	r5, [r3, #4]
  temp = SeqGenDB.RegCount + SeqGenDB.SeqLen;
   1149a:	4414      	add	r4, r2
  if(temp < SeqGenDB.BufferSize)
   1149c:	42a5      	cmp	r5, r4
   1149e:	d90e      	bls.n	114be <AD5940_SEQRegInfoInsert+0x2e>
  {
    SeqGenDB.pRegInfo --; /* Move back */
   114a0:	691c      	ldr	r4, [r3, #16]
    SeqGenDB.pRegInfo[0].RegAddr = (RegAddr>>2)&0xff;
   114a2:	0880      	lsrs	r0, r0, #2
    SeqGenDB.pRegInfo --; /* Move back */
   114a4:	1f25      	subs	r5, r4, #4
   114a6:	611d      	str	r5, [r3, #16]
    SeqGenDB.pRegInfo[0].RegAddr = (RegAddr>>2)&0xff;
   114a8:	f804 0c04 	strb.w	r0, [r4, #-4]
    SeqGenDB.pRegInfo[0].RegValue = RegData&0x00ffffff;
   114ac:	f854 0c04 	ldr.w	r0, [r4, #-4]
    SeqGenDB.RegCount ++;
   114b0:	3201      	adds	r2, #1
    SeqGenDB.pRegInfo[0].RegValue = RegData&0x00ffffff;
   114b2:	f361 201f 	bfi	r0, r1, #8, #24
   114b6:	f844 0c04 	str.w	r0, [r4, #-4]
    SeqGenDB.RegCount ++;
   114ba:	615a      	str	r2, [r3, #20]
  }
  else  /* There is no more buffer  */
  {
    SeqGenDB.LastError = AD5940ERR_BUFF;
  }
}
   114bc:	bd30      	pop	{r4, r5, pc}
    SeqGenDB.LastError = AD5940ERR_BUFF;
   114be:	f06f 0203 	mvn.w	r2, #3
   114c2:	619a      	str	r2, [r3, #24]
}
   114c4:	e7fa      	b.n	114bc <AD5940_SEQRegInfoInsert+0x2c>
   114c6:	bf00      	nop
   114c8:	200024b8 	.word	0x200024b8

000114cc <AD5940_SEQGenInsert>:
  temp  = SeqGenDB.RegCount + SeqGenDB.SeqLen;
   114cc:	4b09      	ldr	r3, [pc, #36]	; (114f4 <AD5940_SEQGenInsert+0x28>)
   114ce:	68d9      	ldr	r1, [r3, #12]
   114d0:	695a      	ldr	r2, [r3, #20]
{
   114d2:	b510      	push	{r4, lr}
  if(temp < SeqGenDB.BufferSize)
   114d4:	685c      	ldr	r4, [r3, #4]
  temp  = SeqGenDB.RegCount + SeqGenDB.SeqLen;
   114d6:	440a      	add	r2, r1
  if(temp < SeqGenDB.BufferSize)
   114d8:	4294      	cmp	r4, r2
    SeqGenDB.pSeqBuff[SeqGenDB.SeqLen] = CmdWord;
   114da:	bf83      	ittte	hi
   114dc:	689a      	ldrhi	r2, [r3, #8]
   114de:	f842 0021 	strhi.w	r0, [r2, r1, lsl #2]
    SeqGenDB.SeqLen ++;
   114e2:	68da      	ldrhi	r2, [r3, #12]
    SeqGenDB.LastError = AD5940ERR_BUFF;
   114e4:	f06f 0203 	mvnls.w	r2, #3
    SeqGenDB.SeqLen ++;
   114e8:	bf86      	itte	hi
   114ea:	3201      	addhi	r2, #1
   114ec:	60da      	strhi	r2, [r3, #12]
    SeqGenDB.LastError = AD5940ERR_BUFF;
   114ee:	619a      	strls	r2, [r3, #24]
}
   114f0:	bd10      	pop	{r4, pc}
   114f2:	bf00      	nop
   114f4:	200024b8 	.word	0x200024b8

000114f8 <AD5940_ADCCode2Volt>:
  @param code: ADC code.
  @param VRef1p82: the actual 1.82V reference voltage.
  @return Voltage in volt.
**/
float AD5940_ADCCode2Volt(uint32_t code, uint32_t ADCPga, float VRef1p82)
{
   114f8:	b538      	push	{r3, r4, r5, lr}
  float kFactor = 1.835/1.82;
  float fVolt = 0.0;
  float tmp = 0;
  tmp = (int32_t)code - 32768;
   114fa:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
{
   114fe:	460d      	mov	r5, r1
   11500:	4614      	mov	r4, r2
  tmp = (int32_t)code - 32768;
   11502:	f7ee feb7 	bl	274 <__aeabi_i2f>
  switch(ADCPga)
   11506:	1e6b      	subs	r3, r5, #1
   11508:	2b03      	cmp	r3, #3
   1150a:	d80c      	bhi.n	11526 <AD5940_ADCCode2Volt+0x2e>
   1150c:	e8df f003 	tbb	[pc, r3]
   11510:	19160702 	.word	0x19160702
  {
  case ADCPGA_1:
    break;
  case ADCPGA_1P5:
    tmp /= 1.5f;
   11514:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    break;
  case ADCPGA_4:
    tmp /= 4.0f;
    break;
  case ADCPGA_9:
    tmp /= 9.0f;
   11518:	f7ee ffb4 	bl	484 <__aeabi_fdiv>
    break;
   1151c:	e003      	b.n	11526 <AD5940_ADCCode2Volt+0x2e>
    tmp /= 2.0f;
   1151e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    tmp /= 4.0f;
   11522:	f7ee fefb 	bl	31c <__aeabi_fmul>
  default:break;
  }
  fVolt = tmp*VRef1p82/32768*kFactor;
   11526:	4621      	mov	r1, r4
   11528:	f7ee fef8 	bl	31c <__aeabi_fmul>
   1152c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   11530:	f7ee fef4 	bl	31c <__aeabi_fmul>
   11534:	4904      	ldr	r1, [pc, #16]	; (11548 <AD5940_ADCCode2Volt+0x50>)
   11536:	f7ee fef1 	bl	31c <__aeabi_fmul>
  return fVolt;
}
   1153a:	bd38      	pop	{r3, r4, r5, pc}
    tmp /= 4.0f;
   1153c:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
   11540:	e7ef      	b.n	11522 <AD5940_ADCCode2Volt+0x2a>
    tmp /= 9.0f;
   11542:	4902      	ldr	r1, [pc, #8]	; (1154c <AD5940_ADCCode2Volt+0x54>)
   11544:	e7e8      	b.n	11518 <AD5940_ADCCode2Volt+0x20>
   11546:	bf00      	nop
   11548:	3f810e11 	.word	0x3f810e11
   1154c:	41100000 	.word	0x41100000

00011550 <AD5940_WriteReg>:
 * @param RegAddr: The register address.
 * @param RegData: The register data.
 * @return Return None.
**/
void AD5940_WriteReg(uint16_t RegAddr, uint32_t RegData)
{
   11550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#ifdef SEQUENCE_GENERATOR
  if(SeqGenDB.EngineStart == bTRUE)
   11552:	4f26      	ldr	r7, [pc, #152]	; (115ec <AD5940_WriteReg+0x9c>)
   11554:	783b      	ldrb	r3, [r7, #0]
   11556:	2b01      	cmp	r3, #1
{
   11558:	4604      	mov	r4, r0
   1155a:	460e      	mov	r6, r1
  if(SeqGenDB.EngineStart == bTRUE)
   1155c:	d124      	bne.n	115a8 <AD5940_WriteReg+0x58>
  if(RegAddr > 0x21ff)
   1155e:	f5b0 5f08 	cmp.w	r0, #8704	; 0x2200
   11562:	d304      	bcc.n	1156e <AD5940_WriteReg+0x1e>
    SeqGenDB.LastError = AD5940ERR_ADDROR;  /* address out of range  */
   11564:	f06f 0304 	mvn.w	r3, #4
   11568:	61bb      	str	r3, [r7, #24]
#ifdef CHIPSEL_M355
    AD5940_D2DWriteReg(RegAddr, RegData);
#else
    AD5940_SPIWriteReg(RegAddr, RegData);
#endif
}
   1156a:	b003      	add	sp, #12
   1156c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(AD5940_SEQGenSearchReg(RegAddr, &RegIndex) == AD5940ERR_OK)
   1156e:	a901      	add	r1, sp, #4
   11570:	f7ff ff76 	bl	11460 <AD5940_SEQGenSearchReg>
    AD5940_SEQGenInsert(SEQ_WR(RegAddr, RegData));
   11574:	05a5      	lsls	r5, r4, #22
   11576:	f005 45fe 	and.w	r5, r5, #2130706432	; 0x7f000000
   1157a:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
   1157e:	431d      	orrs	r5, r3
   11580:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
  if(AD5940_SEQGenSearchReg(RegAddr, &RegIndex) == AD5940ERR_OK)
   11584:	b958      	cbnz	r0, 1159e <AD5940_WriteReg+0x4e>
    SeqGenDB.pRegInfo[RegIndex].RegValue = RegData;
   11586:	9a01      	ldr	r2, [sp, #4]
   11588:	693b      	ldr	r3, [r7, #16]
   1158a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1158e:	f366 211f 	bfi	r1, r6, #8, #24
   11592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    AD5940_SEQGenInsert(SEQ_WR(RegAddr, RegData));
   11596:	4628      	mov	r0, r5
   11598:	f7ff ff98 	bl	114cc <AD5940_SEQGenInsert>
   1159c:	e7e5      	b.n	1156a <AD5940_WriteReg+0x1a>
    AD5940_SEQRegInfoInsert(RegAddr, RegData);
   1159e:	4631      	mov	r1, r6
   115a0:	4620      	mov	r0, r4
   115a2:	f7ff ff75 	bl	11490 <AD5940_SEQRegInfoInsert>
   115a6:	e7f6      	b.n	11596 <AD5940_WriteReg+0x46>
  AD5940_CsClr();
   115a8:	f014 f9a4 	bl	258f4 <AD5940_CsClr>
  AD5940_ReadWrite8B(SPICMD_SETADDR);
   115ac:	2020      	movs	r0, #32
   115ae:	f013 ff70 	bl	25492 <AD5940_ReadWrite8B.isra.0>
  AD5940_ReadWrite16B(RegAddr);
   115b2:	4620      	mov	r0, r4
   115b4:	f013 ff44 	bl	25440 <AD5940_ReadWrite16B>
  if(((RegAddr>=0x1000)&&(RegAddr<=0x3014)))
   115b8:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
  AD5940_CsSet();
   115bc:	f014 f99e 	bl	258fc <AD5940_CsSet>
  AD5940_CsClr();
   115c0:	f014 f998 	bl	258f4 <AD5940_CsClr>
  AD5940_ReadWrite8B(SPICMD_WRITEREG);
   115c4:	202d      	movs	r0, #45	; 0x2d
   115c6:	f013 ff64 	bl	25492 <AD5940_ReadWrite8B.isra.0>
  if(((RegAddr>=0x1000)&&(RegAddr<=0x3014)))
   115ca:	b2a4      	uxth	r4, r4
   115cc:	f242 0314 	movw	r3, #8212	; 0x2014
   115d0:	429c      	cmp	r4, r3
   115d2:	d807      	bhi.n	115e4 <AD5940_WriteReg+0x94>
    AD5940_ReadWrite32B(RegData);
   115d4:	4630      	mov	r0, r6
   115d6:	f013 ff45 	bl	25464 <AD5940_ReadWrite32B>
}
   115da:	b003      	add	sp, #12
   115dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  AD5940_CsSet();
   115e0:	f014 b98c 	b.w	258fc <AD5940_CsSet>
    AD5940_ReadWrite16B(RegData);
   115e4:	b2b0      	uxth	r0, r6
   115e6:	f013 ff2b 	bl	25440 <AD5940_ReadWrite16B>
   115ea:	e7f6      	b.n	115da <AD5940_WriteReg+0x8a>
   115ec:	200024b8 	.word	0x200024b8

000115f0 <AD5940_ReadReg>:
 *        Otherwise, read register value by SPI.
 * @param RegAddr: The register address.
 * @return Return register value.
**/
uint32_t AD5940_ReadReg(uint16_t RegAddr)
{
   115f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
#ifdef SEQUENCE_GENERATOR
  if(SeqGenDB.EngineStart == bTRUE)
   115f2:	4d0f      	ldr	r5, [pc, #60]	; (11630 <AD5940_ReadReg+0x40>)
   115f4:	782b      	ldrb	r3, [r5, #0]
   115f6:	2b01      	cmp	r3, #1
{
   115f8:	4604      	mov	r4, r0
  if(SeqGenDB.EngineStart == bTRUE)
   115fa:	d114      	bne.n	11626 <AD5940_ReadReg+0x36>
  if(AD5940_SEQGenSearchReg(RegAddr, &RegIndex) != AD5940ERR_OK)
   115fc:	a901      	add	r1, sp, #4
   115fe:	f7ff ff2f 	bl	11460 <AD5940_SEQGenSearchReg>
   11602:	b148      	cbz	r0, 11618 <AD5940_ReadReg+0x28>
  *pRegData = AD5940_SPIReadReg(RegAddr);
   11604:	4620      	mov	r0, r4
   11606:	f013 ff4f 	bl	254a8 <AD5940_SPIReadReg>
   1160a:	4601      	mov	r1, r0
    AD5940_SEQRegInfoInsert(RegAddr, RegData);
   1160c:	4620      	mov	r0, r4
   1160e:	f7ff ff3f 	bl	11490 <AD5940_SEQRegInfoInsert>
#ifdef CHIPSEL_M355
    return AD5940_D2DReadReg(RegAddr);
#else
    return AD5940_SPIReadReg(RegAddr);
#endif
}
   11612:	4608      	mov	r0, r1
   11614:	b003      	add	sp, #12
   11616:	bd30      	pop	{r4, r5, pc}
    RegData = SeqGenDB.pRegInfo[RegIndex].RegValue;
   11618:	692b      	ldr	r3, [r5, #16]
   1161a:	9a01      	ldr	r2, [sp, #4]
   1161c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11620:	f3c1 2117 	ubfx	r1, r1, #8, #24
    return AD5940_SEQReadReg(RegAddr);
   11624:	e7f5      	b.n	11612 <AD5940_ReadReg+0x22>
}
   11626:	b003      	add	sp, #12
   11628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return AD5940_SPIReadReg(RegAddr);
   1162c:	f013 bf3c 	b.w	254a8 <AD5940_SPIReadReg>
   11630:	200024b8 	.word	0x200024b8

00011634 <AD5940_Initialize>:
 * @brief Initialize AD5940. This function must be called whenever there is reset(Software Reset or Hardware reset or Power up) happened.
 *        This function is used to put AD5940 to correct state.
 * @return return None
**/
void AD5940_Initialize(void)
{
   11634:	b530      	push	{r4, r5, lr}
   11636:	b09d      	sub	sp, #116	; 0x74
  /* Write following registers with its data sequentially whenever there is a reset happened. */
  const struct
  {
    uint16_t reg_addr;
    uint32_t reg_data;
  }RegTable[]=
   11638:	4915      	ldr	r1, [pc, #84]	; (11690 <AD5940_Initialize+0x5c>)
   1163a:	2270      	movs	r2, #112	; 0x70
   1163c:	4668      	mov	r0, sp
   1163e:	f015 fb6b 	bl	26d18 <memcpy>
    {0x2250, 0x103F},
    {0x22B0, 0x203C},
    {0x2230, 0xDE87A5A0},
  };
  //initialize global variables
  SeqGenDB.SeqLen = 0;
   11642:	4b14      	ldr	r3, [pc, #80]	; (11694 <AD5940_Initialize+0x60>)
   11644:	2400      	movs	r4, #0
  SeqGenDB.RegCount = 0;
  SeqGenDB.LastError = AD5940ERR_OK;
   11646:	e9c3 4405 	strd	r4, r4, [r3, #20]
  SeqGenDB.SeqLen = 0;
   1164a:	60dc      	str	r4, [r3, #12]
  SeqGenDB.EngineStart = bFALSE;
   1164c:	701c      	strb	r4, [r3, #0]
#ifndef CHIPSEL_M355
  AD5940_CsSet(); /* Pull high CS in case it's low */
   1164e:	f014 f955 	bl	258fc <AD5940_CsSet>
#endif
  for(i=0; i<sizeof(RegTable)/sizeof(RegTable[0]); i++)
   11652:	466d      	mov	r5, sp
    AD5940_WriteReg(RegTable[i].reg_addr, RegTable[i].reg_data);
   11654:	6869      	ldr	r1, [r5, #4]
   11656:	8828      	ldrh	r0, [r5, #0]
  for(i=0; i<sizeof(RegTable)/sizeof(RegTable[0]); i++)
   11658:	3401      	adds	r4, #1
    AD5940_WriteReg(RegTable[i].reg_addr, RegTable[i].reg_data);
   1165a:	f7ff ff79 	bl	11550 <AD5940_WriteReg>
  for(i=0; i<sizeof(RegTable)/sizeof(RegTable[0]); i++)
   1165e:	2c0e      	cmp	r4, #14
   11660:	f105 0508 	add.w	r5, r5, #8
   11664:	d1f6      	bne.n	11654 <AD5940_Initialize+0x20>
  i = AD5940_ReadReg(REG_AFECON_CHIPID);  
   11666:	f240 4004 	movw	r0, #1028	; 0x404
   1166a:	f7ff ffc1 	bl	115f0 <AD5940_ReadReg>
  if(i == 0x5501)
   1166e:	f5a0 43aa 	sub.w	r3, r0, #21760	; 0x5500
   11672:	3b01      	subs	r3, #1
   11674:	2b01      	cmp	r3, #1
   11676:	d804      	bhi.n	11682 <AD5940_Initialize+0x4e>
    bIsS2silicon = bTRUE;
   11678:	4b07      	ldr	r3, [pc, #28]	; (11698 <AD5940_Initialize+0x64>)
   1167a:	2201      	movs	r2, #1
  else if(i == 0x5502)  /* S3 chip-id is 0x5502. The is no difference with S2. */
    bIsS2silicon = bTRUE;
  else if(i == 0x5500)
    bIsS2silicon = bFALSE;
   1167c:	701a      	strb	r2, [r3, #0]
  ADI_Print("This AD594x!\n");
#endif
  ADI_Print("Note: Current Silicon is %s\n", bIsS2silicon?"S2":"S1");
  ADI_Print("AD5940LIB Version:v%d.%d.%d\n", AD5940LIB_VER_MAJOR, AD5940LIB_VER_MINOR, AD5940LIB_VER_PATCH);
#endif
}
   1167e:	b01d      	add	sp, #116	; 0x74
   11680:	bd30      	pop	{r4, r5, pc}
  else if(i == 0x5500)
   11682:	f5b0 4faa 	cmp.w	r0, #21760	; 0x5500
   11686:	d1fa      	bne.n	1167e <AD5940_Initialize+0x4a>
    bIsS2silicon = bFALSE;
   11688:	4b03      	ldr	r3, [pc, #12]	; (11698 <AD5940_Initialize+0x64>)
   1168a:	2200      	movs	r2, #0
   1168c:	e7f6      	b.n	1167c <AD5940_Initialize+0x48>
   1168e:	bf00      	nop
   11690:	0002ae3c 	.word	0x0002ae3c
   11694:	200024b8 	.word	0x200024b8
   11698:	20003ab0 	.word	0x20003ab0

0001169c <AD5940_HSTIACfgS>:
   @brief Initialize High speed TIA amplifier
   @param pHsTiaCfg: Pointer to configuration structure
   @return return none.
*/
AD5940Err AD5940_HSTIACfgS(HSTIACfg_Type *pHsTiaCfg)
{
   1169c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tempreg;
  //Check parameters
  if(pHsTiaCfg == NULL) return AD5940ERR_NULLP;
   1169e:	4604      	mov	r4, r0
{
   116a0:	b085      	sub	sp, #20
  if(pHsTiaCfg == NULL) return AD5940ERR_NULLP;
   116a2:	2800      	cmp	r0, #0
   116a4:	d047      	beq.n	11736 <AD5940_HSTIACfgS+0x9a>
    /* Available parameter is 1k, 5k,...,160k, short, OPEN */
  if(pHsTiaCfg->HstiaDeRtia < HSTIADERTIA_1K)
   116a6:	6903      	ldr	r3, [r0, #16]
   116a8:	3b03      	subs	r3, #3
   116aa:	2b08      	cmp	r3, #8
   116ac:	d846      	bhi.n	1173c <AD5940_HSTIACfgS+0xa0>
    return AD5940ERR_PARA;
  if(pHsTiaCfg->HstiaDeRtia > HSTIADERTIA_OPEN)
    return AD5940ERR_PARA;  /* Parameter is invalid */

  if(pHsTiaCfg->HstiaDeRload > HSTIADERLOAD_OPEN)
   116ae:	6943      	ldr	r3, [r0, #20]
   116b0:	2b05      	cmp	r3, #5
   116b2:	d843      	bhi.n	1173c <AD5940_HSTIACfgS+0xa0>
    return AD5940ERR_PARA;  /* Available parameter is OPEN, 0R,..., 100R */

  tempreg = 0;
  tempreg |= pHsTiaCfg->HstiaBias;
  AD5940_WriteReg(REG_AFE_HSTIACON, tempreg);
   116b4:	6801      	ldr	r1, [r0, #0]
   116b6:	f242 00fc 	movw	r0, #8444	; 0x20fc
   116ba:	f7ff ff49 	bl	11550 <AD5940_WriteReg>
  /* HSRTIACON */
  /* Calculate CTIA value */
  tempreg = pHsTiaCfg->HstiaCtia << BITP_AFE_HSRTIACON_CTIACON;
  tempreg |= pHsTiaCfg->HstiaRtiaSel;
   116be:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   116c2:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
  if(pHsTiaCfg->DiodeClose == bTRUE)
   116c6:	7b23      	ldrb	r3, [r4, #12]
   116c8:	2b01      	cmp	r3, #1
    tempreg |= BITM_AFE_HSRTIACON_TIASW6CON; /* Close switch 6 */
   116ca:	bf08      	it	eq
   116cc:	f041 0110 	orreq.w	r1, r1, #16
  AD5940_WriteReg(REG_AFE_HSRTIACON, tempreg);
   116d0:	f242 00f0 	movw	r0, #8432	; 0x20f0
   116d4:	f7ff ff3c 	bl	11550 <AD5940_WriteReg>
  /* DExRESCON */
  __AD5940_SetDExRTIA(0, pHsTiaCfg->HstiaDeRtia, pHsTiaCfg->HstiaDeRload);
   116d8:	e9d4 3604 	ldrd	r3, r6, [r4, #16]
  if(DeRtia >= HSTIADERTIA_OPEN)
   116dc:	2b0a      	cmp	r3, #10
   116de:	d828      	bhi.n	11732 <AD5940_HSTIACfgS+0x96>
  else if(DeRtia >= HSTIADERTIA_1K)
   116e0:	2b02      	cmp	r3, #2
   116e2:	d90a      	bls.n	116fa <AD5940_HSTIACfgS+0x5e>
    tempreg = (DeRtia - 3 + 11) << 3;
   116e4:	f103 0108 	add.w	r1, r3, #8
      tempreg = (uint32_t)(DeRtiaTable[DeRtia][DeRload])<<3;
   116e8:	00c9      	lsls	r1, r1, #3
    AD5940_WriteReg(REG_AFE_DE0RESCON, tempreg);
   116ea:	f242 00f8 	movw	r0, #8440	; 0x20f8
   116ee:	4331      	orrs	r1, r6
   116f0:	f7ff ff2e 	bl	11550 <AD5940_WriteReg>
#ifdef CHIPSEL_M355
  __AD5940_SetDExRTIA(1, pHsTiaCfg->HstiaDe1Rtia, pHsTiaCfg->HstiaDe1Rload);
#endif

  /* Done */
  return AD5940ERR_OK;
   116f4:	2000      	movs	r0, #0
}
   116f6:	b005      	add	sp, #20
   116f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    const uint8_t DeRtiaTable[3][5] = 
   116fa:	4a12      	ldr	r2, [pc, #72]	; (11744 <AD5940_HSTIACfgS+0xa8>)
   116fc:	466c      	mov	r4, sp
   116fe:	f102 0708 	add.w	r7, r2, #8
   11702:	6810      	ldr	r0, [r2, #0]
   11704:	6851      	ldr	r1, [r2, #4]
   11706:	4625      	mov	r5, r4
   11708:	c503      	stmia	r5!, {r0, r1}
   1170a:	3208      	adds	r2, #8
   1170c:	42ba      	cmp	r2, r7
   1170e:	462c      	mov	r4, r5
   11710:	d1f7      	bne.n	11702 <AD5940_HSTIACfgS+0x66>
   11712:	6810      	ldr	r0, [r2, #0]
   11714:	8891      	ldrh	r1, [r2, #4]
   11716:	7992      	ldrb	r2, [r2, #6]
   11718:	6028      	str	r0, [r5, #0]
    if(DeRload < HSTIADERLOAD_OPEN)
   1171a:	2e04      	cmp	r6, #4
    const uint8_t DeRtiaTable[3][5] = 
   1171c:	80a9      	strh	r1, [r5, #4]
   1171e:	71aa      	strb	r2, [r5, #6]
    if(DeRload < HSTIADERLOAD_OPEN)
   11720:	d807      	bhi.n	11732 <AD5940_HSTIACfgS+0x96>
      tempreg = (uint32_t)(DeRtiaTable[DeRtia][DeRload])<<3;
   11722:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   11726:	aa04      	add	r2, sp, #16
   11728:	4413      	add	r3, r2
   1172a:	4433      	add	r3, r6
   1172c:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   11730:	e7da      	b.n	116e8 <AD5940_HSTIACfgS+0x4c>
    tempreg = 0x1f << 3;  /* bit field HPTIRES03CON[7:3] */
   11732:	21f8      	movs	r1, #248	; 0xf8
   11734:	e7d9      	b.n	116ea <AD5940_HSTIACfgS+0x4e>
  if(pHsTiaCfg == NULL) return AD5940ERR_NULLP;
   11736:	f06f 0002 	mvn.w	r0, #2
   1173a:	e7dc      	b.n	116f6 <AD5940_HSTIACfgS+0x5a>
    return AD5940ERR_PARA;
   1173c:	f06f 0001 	mvn.w	r0, #1
   11740:	e7d9      	b.n	116f6 <AD5940_HSTIACfgS+0x5a>
   11742:	bf00      	nop
   11744:	0002aeac 	.word	0x0002aeac

00011748 <__AD5940_TakeMeasurement>:
/**
 * @brief Turn on ADC to sample one SINC2 data.
 * @return return ADCCode.
*/
static uint32_t __AD5940_TakeMeasurement(int32_t *time_out)
{
   11748:	b510      	push	{r4, lr}
   1174a:	4604      	mov	r4, r0
  uint32_t ADCCode = 0;
  AD5940_INTCClrFlag(AFEINTSRC_SINC2RDY);
   1174c:	2004      	movs	r0, #4
   1174e:	f014 f8a6 	bl	2589e <AD5940_INTCClrFlag>
  AD5940_AFECtrlS(AFECTRL_ADCCNV|AFECTRL_SINC2NOTCH, bTRUE);/* Start conversion */
   11752:	4810      	ldr	r0, [pc, #64]	; (11794 <__AD5940_TakeMeasurement+0x4c>)
   11754:	2101      	movs	r1, #1
   11756:	f013 fece 	bl	254f6 <AD5940_AFECtrlS>
  do
  {
    AD5940_Delay10us(1);  /* Delay 10us */
   1175a:	2001      	movs	r0, #1
   1175c:	f014 f8c3 	bl	258e6 <AD5940_Delay10us>
    if(AD5940_INTCTestFlag(AFEINTC_1,AFEINTSRC_SINC2RDY))
   11760:	2104      	movs	r1, #4
   11762:	2001      	movs	r0, #1
   11764:	f014 f8a0 	bl	258a8 <AD5940_INTCTestFlag>
   11768:	b150      	cbz	r0, 11780 <__AD5940_TakeMeasurement+0x38>
      rd = AD5940_ReadReg(REG_AFE_SINC2DAT);
   1176a:	f44f 5002 	mov.w	r0, #8320	; 0x2080
   1176e:	f7ff ff3f 	bl	115f0 <AD5940_ReadReg>
   11772:	4604      	mov	r4, r0
        break;
    }
    if(*time_out != -1)
      (*time_out)--;	
  }while(*time_out != 0);
  AD5940_AFECtrlS(AFECTRL_ADCCNV|AFECTRL_SINC2NOTCH, bFALSE);/* Stop conversion */
   11774:	4807      	ldr	r0, [pc, #28]	; (11794 <__AD5940_TakeMeasurement+0x4c>)
   11776:	2100      	movs	r1, #0
   11778:	f013 febd 	bl	254f6 <AD5940_AFECtrlS>
  return ADCCode;
}
   1177c:	4620      	mov	r0, r4
   1177e:	bd10      	pop	{r4, pc}
    if(*time_out != -1)
   11780:	6823      	ldr	r3, [r4, #0]
   11782:	1c5a      	adds	r2, r3, #1
   11784:	d0e9      	beq.n	1175a <__AD5940_TakeMeasurement+0x12>
      (*time_out)--;	
   11786:	3b01      	subs	r3, #1
   11788:	6023      	str	r3, [r4, #0]
  }while(*time_out != 0);
   1178a:	2b00      	cmp	r3, #0
   1178c:	d1e5      	bne.n	1175a <__AD5940_TakeMeasurement+0x12>
  uint32_t ADCCode = 0;
   1178e:	461c      	mov	r4, r3
   11790:	e7f0      	b.n	11774 <__AD5940_TakeMeasurement+0x2c>
   11792:	bf00      	nop
   11794:	00010100 	.word	0x00010100

00011798 <AD5940_ADCPGACal>:
  @brief Calibrate ADC PGA
  @param pADCPGACal: PGA calibration parameters include filter setup and PGA gain.
  @return AD5940ERR_OK.
**/
AD5940Err AD5940_ADCPGACal(ADCPGACal_Type *pADCPGACal)
{
   11798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t ADCCode;
  BoolFlag bADCClk32MHzMode;

  uint32_t regaddr_gain, regaddr_offset;
  
  if(pADCPGACal == NULL) return AD5940ERR_NULLP;
   1179c:	4604      	mov	r4, r0
{
   1179e:	b0a7      	sub	sp, #156	; 0x9c
  if(pADCPGACal == NULL) return AD5940ERR_NULLP;
   117a0:	2800      	cmp	r0, #0
   117a2:	f000 8124 	beq.w	119ee <AD5940_ADCPGACal+0x256>
  if(pADCPGACal->ADCPga > ADCPGA_9) return AD5940ERR_PARA;  /* Parameter Error */
   117a6:	6982      	ldr	r2, [r0, #24]
   117a8:	2a04      	cmp	r2, #4
   117aa:	f200 8123 	bhi.w	119f4 <AD5940_ADCPGACal+0x25c>
    {REG_AFE_ADCGAINGN1P5,REG_AFE_ADCOFFSETGN1P5},
    {REG_AFE_ADCGAINGN2,REG_AFE_ADCOFFSETGN2},
    {REG_AFE_ADCGAINGN4,REG_AFE_ADCOFFSETGN4},
    {REG_AFE_ADCGAINGN9,REG_AFE_ADCOFFSETGN9},
  };
  regaddr_gain = cal_registers[pADCPGACal->ADCPga].gain_reg;
   117ae:	4b93      	ldr	r3, [pc, #588]	; (119fc <AD5940_ADCPGACal+0x264>)
   117b0:	f833 7022 	ldrh.w	r7, [r3, r2, lsl #2]
  regaddr_offset = cal_registers[pADCPGACal->ADCPga].offset_reg;
   117b4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  /* Initialize ADC filters ADCRawData-->SINC3-->SINC2+NOTCH. Use SIN2 data for calibration-->Lower noise */
  adc_filter.ADCSinc3Osr = pADCPGACal->ADCSinc3Osr;
  adc_filter.ADCSinc2Osr = pADCPGACal->ADCSinc2Osr;  /* 800KSPS/4/1333 = 150SPS */
  adc_filter.ADCAvgNum = ADCAVGNUM_2;         /* Don't care about it. Average function is only used for DFT */
  adc_filter.ADCRate = bADCClk32MHzMode?ADCRATE_1P6MHZ:ADCRATE_800KHZ;        /* If ADC clock is 32MHz, then set it to ADCRATE_1P6MHZ. Default is 16MHz, use ADCRATE_800KHZ. */
  adc_filter.BpNotch = bTRUE;                 /* SINC2+Notch is one block, when bypass notch filter, we can get fresh data from SINC2 filter. */
   117b8:	f04f 0901 	mov.w	r9, #1
  regaddr_offset = cal_registers[pADCPGACal->ADCPga].offset_reg;
   117bc:	f8b3 8002 	ldrh.w	r8, [r3, #2]
  __AD5940_ReferenceON();
   117c0:	f013 ff20 	bl	25604 <__AD5940_ReferenceON>
  adc_filter.ADCSinc3Osr = pADCPGACal->ADCSinc3Osr;
   117c4:	6923      	ldr	r3, [r4, #16]
   117c6:	9305      	str	r3, [sp, #20]
  adc_filter.ADCAvgNum = ADCAVGNUM_2;         /* Don't care about it. Average function is only used for DFT */
   117c8:	2500      	movs	r5, #0
  adc_filter.ADCSinc2Osr = pADCPGACal->ADCSinc2Osr;  /* 800KSPS/4/1333 = 150SPS */
   117ca:	6963      	ldr	r3, [r4, #20]
   117cc:	9306      	str	r3, [sp, #24]
  adc_filter.BpSinc3 = bFALSE;                /* We use SINC3 filter. */
  adc_filter.Sinc2NotchEnable = bTRUE;        /* Enable the SINC2+Notch block. You can also use function AD5940_AFECtrlS */
  AD5940_ADCFilterCfgS(&adc_filter);
   117ce:	a805      	add	r0, sp, #20
  adc_filter.ADCRate = bADCClk32MHzMode?ADCRATE_1P6MHZ:ADCRATE_800KHZ;        /* If ADC clock is 32MHz, then set it to ADCRATE_1P6MHZ. Default is 16MHz, use ADCRATE_800KHZ. */
   117d0:	e9cd 5507 	strd	r5, r5, [sp, #28]
  adc_filter.BpNotch = bTRUE;                 /* SINC2+Notch is one block, when bypass notch filter, we can get fresh data from SINC2 filter. */
   117d4:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
  adc_filter.Sinc2NotchEnable = bTRUE;        /* Enable the SINC2+Notch block. You can also use function AD5940_AFECtrlS */
   117d8:	f88d 9026 	strb.w	r9, [sp, #38]	; 0x26
  AD5940_ADCFilterCfgS(&adc_filter);
   117dc:	f013 fff4 	bl	257c8 <AD5940_ADCFilterCfgS>
  /* Turn ON reference and ADC power, and DAC reference. We use DAC 1.8V reference to calibrate ADC because of the ADC reference bug. */
  AD5940_AFECtrlS(AFECTRL_ALL, bFALSE); /* Disable all */
   117e0:	4887      	ldr	r0, [pc, #540]	; (11a00 <AD5940_ADCPGACal+0x268>)
   117e2:	4629      	mov	r1, r5
   117e4:	f013 fe87 	bl	254f6 <AD5940_AFECtrlS>
  AD5940_AFECtrlS(AFECTRL_ADCPWR|AFECTRL_HPREFPWR|AFECTRL_DACREFPWR|AFECTRL_HSDACPWR|AFECTRL_SINC2NOTCH, bTRUE);
   117e8:	4649      	mov	r1, r9
   117ea:	4886      	ldr	r0, [pc, #536]	; (11a04 <AD5940_ADCPGACal+0x26c>)
   117ec:	f013 fe83 	bl	254f6 <AD5940_AFECtrlS>
  AD5940_Delay10us(25);   /* Wait 250us for reference power up */
   117f0:	2019      	movs	r0, #25
   117f2:	f014 f878 	bl	258e6 <AD5940_Delay10us>
    tempreg = AD5940_ReadReg(REG_INTC_INTCSEL1);
   117f6:	f243 000c 	movw	r0, #12300	; 0x300c
   117fa:	f7ff fef9 	bl	115f0 <AD5940_ReadReg>
  /* INTC configure and open calibration lock */
  INTCCfg = AD5940_INTCGetCfg(AFEINTC_1);
  AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_SINC2RDY, bTRUE); /* Enable SINC2 Interrupt in INTC1 */
   117fe:	464a      	mov	r2, r9
   11800:	2104      	movs	r1, #4
    tempreg = AD5940_ReadReg(REG_INTC_INTCSEL1);
   11802:	4606      	mov	r6, r0
  AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_SINC2RDY, bTRUE); /* Enable SINC2 Interrupt in INTC1 */
   11804:	4648      	mov	r0, r9
   11806:	f014 f832 	bl	2586e <AD5940_INTCCfg>
  AD5940_WriteReg(REG_AFE_CALDATLOCK, KEY_CALDATLOCK);  /* Unlock KEY */
   1180a:	497f      	ldr	r1, [pc, #508]	; (11a08 <AD5940_ADCPGACal+0x270>)
   1180c:	f242 2030 	movw	r0, #8752	; 0x2230
   11810:	f7ff fe9e 	bl	11550 <AD5940_WriteReg>

  /* Do offset calibration. */
  if(pADCPGACal->PGACalType != PGACALTYPE_GAIN){  /* Need offset calibration */
   11814:	69e3      	ldr	r3, [r4, #28]
   11816:	454b      	cmp	r3, r9
   11818:	d16d      	bne.n	118f6 <AD5940_ADCPGACal+0x15e>
  /* Do gain calibration */
  if(pADCPGACal->PGACalType != PGACALTYPE_OFFSET)  /* Need gain calibration */
  {
    int32_t ExpectedGainCode;
    static const float ideal_pga_gain[]={1,1.5,2,4,9};
    AD5940_WriteReg(regaddr_gain, 0x4000);  /* Reset gain register */
   1181a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   1181e:	4638      	mov	r0, r7
   11820:	f7ff fe96 	bl	11550 <AD5940_WriteReg>
    if(pADCPGACal->ADCPga <= ADCPGA_2)
   11824:	f8d4 9018 	ldr.w	r9, [r4, #24]
   11828:	4d78      	ldr	r5, [pc, #480]	; (11a0c <AD5940_ADCPGACal+0x274>)
   1182a:	f1b9 0f02 	cmp.w	r9, #2
   1182e:	f240 80a2 	bls.w	11976 <AD5940_ADCPGACal+0x1de>
    }
    else
    {
      //gain4,9 use DAC generated voltage
      adc_base.ADCMuxP = ADCMUXP_P_NODE;
      adc_base.ADCMuxN = ADCMUXN_N_NODE;
   11832:	2224      	movs	r2, #36	; 0x24
   11834:	2314      	movs	r3, #20
      /* Setup HSLOOP to generate voltage for GAIN4/9 calibration. */
      AD5940_AFECtrlS(AFECTRL_EXTBUFPWR|AFECTRL_INAMPPWR|AFECTRL_HSTIAPWR|AFECTRL_WG, bTRUE);
   11836:	2101      	movs	r1, #1
   11838:	f44f 409c 	mov.w	r0, #19968	; 0x4e00
      adc_base.ADCMuxN = ADCMUXN_N_NODE;
   1183c:	e9cd 2302 	strd	r2, r3, [sp, #8]
      AD5940_AFECtrlS(AFECTRL_EXTBUFPWR|AFECTRL_INAMPPWR|AFECTRL_HSTIAPWR|AFECTRL_WG, bTRUE);
   11840:	f013 fe59 	bl	254f6 <AD5940_AFECtrlS>
      hsloop_cfg.HsDacCfg.ExcitBufGain = EXCITBUFGAIN_2;
      hsloop_cfg.HsDacCfg.HsDacGain = HSDACGAIN_1;
      hsloop_cfg.HsDacCfg.HsDacUpdateRate = 7;
      hsloop_cfg.HsTiaCfg.DiodeClose = bFALSE;
      hsloop_cfg.HsTiaCfg.HstiaBias = HSTIABIAS_1P1;
      hsloop_cfg.HsTiaCfg.HstiaCtia = 31;
   11844:	221f      	movs	r2, #31
      hsloop_cfg.HsTiaCfg.HstiaDeRload = HSTIADERLOAD_OPEN;
      hsloop_cfg.HsTiaCfg.HstiaDeRtia = HSTIADERTIA_OPEN;
   11846:	2105      	movs	r1, #5
      hsloop_cfg.HsTiaCfg.HstiaCtia = 31;
   11848:	9220      	str	r2, [sp, #128]	; 0x80
      hsloop_cfg.HsTiaCfg.HstiaDeRtia = HSTIADERTIA_OPEN;
   1184a:	220b      	movs	r2, #11
   1184c:	e9cd 2122 	strd	r2, r1, [sp, #136]	; 0x88
      hsloop_cfg.HsTiaCfg.HstiaDe1Rload = HSTIADERLOAD_OPEN;
      hsloop_cfg.HsTiaCfg.HstiaDe1Rtia = HSTIADERTIA_OPEN;
   11850:	e9cd 2124 	strd	r2, r1, [sp, #144]	; 0x90
      hsloop_cfg.HsTiaCfg.HstiaRtiaSel = HSTIARTIA_200;
      hsloop_cfg.SWMatCfg.Dswitch = SWD_OPEN;
      hsloop_cfg.SWMatCfg.Pswitch = SWP_PL;
      hsloop_cfg.SWMatCfg.Nswitch = SWN_NL;
   11854:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11858:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hsloop_cfg.HsTiaCfg.DiodeClose = bFALSE;
   1185c:	2300      	movs	r3, #0
      hsloop_cfg.SWMatCfg.Nswitch = SWN_NL;
   1185e:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
      hsloop_cfg.SWMatCfg.Tswitch = SWT_TRTIA;
   11862:	f44f 7280 	mov.w	r2, #256	; 0x100
      hsloop_cfg.HsDacCfg.ExcitBufGain = EXCITBUFGAIN_2;
   11866:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
      hsloop_cfg.HsDacCfg.HsDacUpdateRate = 7;
   1186a:	2207      	movs	r2, #7
      hsloop_cfg.WgCfg.GainCalEn = bTRUE;
      hsloop_cfg.WgCfg.OffsetCalEn = bTRUE;
      hsloop_cfg.WgCfg.WgType = WGTYPE_MMR;
   1186c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
      uint32_t HSDACCode;
      if(pADCPGACal->ADCPga == ADCPGA_4)
   11870:	69a2      	ldr	r2, [r4, #24]
      hsloop_cfg.HsTiaCfg.DiodeClose = bFALSE;
   11872:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
      hsloop_cfg.HsTiaCfg.HstiaBias = HSTIABIAS_1P1;
   11876:	931e      	str	r3, [sp, #120]	; 0x78
      hsloop_cfg.HsTiaCfg.HstiaRtiaSel = HSTIARTIA_200;
   11878:	931f      	str	r3, [sp, #124]	; 0x7c
      hsloop_cfg.SWMatCfg.Dswitch = SWD_OPEN;
   1187a:	930a      	str	r3, [sp, #40]	; 0x28
      hsloop_cfg.HsDacCfg.HsDacGain = HSDACGAIN_1;
   1187c:	930f      	str	r3, [sp, #60]	; 0x3c
      if(pADCPGACal->ADCPga == ADCPGA_4)
   1187e:	2a03      	cmp	r2, #3
      hsloop_cfg.WgCfg.GainCalEn = bTRUE;
   11880:	f240 1301 	movw	r3, #257	; 0x101
   11884:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
      if(pADCPGACal->ADCPga == ADCPGA_4)
   11888:	f000 80ae 	beq.w	119e8 <AD5940_ADCPGACal+0x250>
        HSDACCode = 0x800 + 0x300;  /* 0x300--> 0x300/0x1000*0.8*BUFFERGAIN2 = 0.3V. */
      else if(pADCPGACal->ADCPga == ADCPGA_9)
        HSDACCode = 0x800 + 0x155;  /* 0x155--> 0x155/0x1000*0.8*BUFFERGAIN2 = 0.133V. */
   1188c:	f640 1355 	movw	r3, #2389	; 0x955
   11890:	2a04      	cmp	r2, #4
   11892:	bf18      	it	ne
   11894:	2300      	movne	r3, #0
      hsloop_cfg.WgCfg.WgCode = HSDACCode;
      AD5940_HSLoopCfgS(&hsloop_cfg);
   11896:	a80a      	add	r0, sp, #40	; 0x28
      hsloop_cfg.WgCfg.WgCode = HSDACCode;
   11898:	931d      	str	r3, [sp, #116]	; 0x74
      AD5940_HSLoopCfgS(&hsloop_cfg);
   1189a:	f013 ff58 	bl	2574e <AD5940_HSLoopCfgS>

      //measure expected code
      adc_base.ADCPga = ADCPGA_1P5;
   1189e:	2301      	movs	r3, #1
      AD5940_ADCBaseCfgS(&adc_base);  
   118a0:	a802      	add	r0, sp, #8
      adc_base.ADCPga = ADCPGA_1P5;
   118a2:	9304      	str	r3, [sp, #16]
      AD5940_ADCBaseCfgS(&adc_base);  
   118a4:	f013 ff85 	bl	257b2 <AD5940_ADCBaseCfgS>
      AD5940_Delay10us(5);
   118a8:	2005      	movs	r0, #5
   118aa:	f014 f81c 	bl	258e6 <AD5940_Delay10us>
      time_out = pADCPGACal->TimeOut10us;   /* Reset time out counter */
   118ae:	6a23      	ldr	r3, [r4, #32]
   118b0:	9301      	str	r3, [sp, #4]
      ExpectedGainCode = 0x8000 + (int32_t)((__AD5940_TakeMeasurement(&time_out) - 0x8000)/1.5f\
   118b2:	a801      	add	r0, sp, #4
   118b4:	f7ff ff48 	bl	11748 <__AD5940_TakeMeasurement>
   118b8:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
   118bc:	f7ee fcd6 	bl	26c <__aeabi_ui2f>
   118c0:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
   118c4:	f7ee fdde 	bl	484 <__aeabi_fdiv>
                                            *ideal_pga_gain[pADCPGACal->ADCPga]);
   118c8:	69a3      	ldr	r3, [r4, #24]
   118ca:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   118ce:	f7ee fd25 	bl	31c <__aeabi_fmul>
      ExpectedGainCode = 0x8000 + (int32_t)((__AD5940_TakeMeasurement(&time_out) - 0x8000)/1.5f\
   118d2:	f7ee fe73 	bl	5bc <__aeabi_f2iz>
      if(time_out == 0) goto ADCPGACALERROR_TIMEOUT;
   118d6:	9b01      	ldr	r3, [sp, #4]
      ExpectedGainCode = 0x8000 + (int32_t)((__AD5940_TakeMeasurement(&time_out) - 0x8000)/1.5f\
   118d8:	f500 4500 	add.w	r5, r0, #32768	; 0x8000
      if(time_out == 0) goto ADCPGACALERROR_TIMEOUT;
   118dc:	2b00      	cmp	r3, #0
   118de:	d166      	bne.n	119ae <AD5940_ADCPGACal+0x216>
  AD5940_WriteReg(REG_AFE_CALDATLOCK, 0);  /* Lock KEY */
  /* Done */
  return AD5940ERR_OK;

ADCPGACALERROR_TIMEOUT:
  AD5940_ADCConvtCtrlS(bFALSE);  /* Stop conversion */
   118e0:	2000      	movs	r0, #0
   118e2:	f013 ffb1 	bl	25848 <AD5940_ADCConvtCtrlS>
  AD5940_WriteReg(REG_AFE_CALDATLOCK, 0);  /* Lock KEY */
   118e6:	f242 2030 	movw	r0, #8752	; 0x2230
   118ea:	2100      	movs	r1, #0
   118ec:	f7ff fe30 	bl	11550 <AD5940_WriteReg>
  return AD5940ERR_TIMEOUT;
   118f0:	f06f 0009 	mvn.w	r0, #9
   118f4:	e03c      	b.n	11970 <AD5940_ADCPGACal+0x1d8>
    AD5940_WriteReg(regaddr_offset, 0);   /* Reset offset register */
   118f6:	4629      	mov	r1, r5
   118f8:	4640      	mov	r0, r8
   118fa:	f7ff fe29 	bl	11550 <AD5940_WriteReg>
    adc_base.ADCMuxN = ADCMUXN_VSET1P1;   /* Short input with common voltage set to 1.11v */
   118fe:	f04f 0908 	mov.w	r9, #8
   11902:	230c      	movs	r3, #12
   11904:	e9cd 3902 	strd	r3, r9, [sp, #8]
    AD5940_ADCBaseCfgS(&adc_base);
   11908:	eb0d 0009 	add.w	r0, sp, r9
    adc_base.ADCPga = pADCPGACal->ADCPga; /* Set correct Gain value. */
   1190c:	69a3      	ldr	r3, [r4, #24]
   1190e:	9304      	str	r3, [sp, #16]
    AD5940_ADCBaseCfgS(&adc_base);
   11910:	f013 ff4f 	bl	257b2 <AD5940_ADCBaseCfgS>
    AD5940_Delay10us(5);                  /* Wait for sometime */
   11914:	2005      	movs	r0, #5
   11916:	f013 ffe6 	bl	258e6 <AD5940_Delay10us>
      time_out = pADCPGACal->TimeOut10us;   /* Reset time out counter */
   1191a:	6a23      	ldr	r3, [r4, #32]
   1191c:	9301      	str	r3, [sp, #4]
      ADCCode += __AD5940_TakeMeasurement(&time_out);  /* Turn on ADC to get one valid data and then turn off ADC. */
   1191e:	a801      	add	r0, sp, #4
   11920:	f7ff ff12 	bl	11748 <__AD5940_TakeMeasurement>
      if(time_out == 0) goto ADCPGACALERROR_TIMEOUT;  /* Time out error. */
   11924:	9b01      	ldr	r3, [sp, #4]
      ADCCode += __AD5940_TakeMeasurement(&time_out);  /* Turn on ADC to get one valid data and then turn off ADC. */
   11926:	4405      	add	r5, r0
      if(time_out == 0) goto ADCPGACALERROR_TIMEOUT;  /* Time out error. */
   11928:	2b00      	cmp	r3, #0
   1192a:	d0d9      	beq.n	118e0 <AD5940_ADCPGACal+0x148>
    for(int i=0; i<8; i++)
   1192c:	f1b9 0901 	subs.w	r9, r9, #1
   11930:	d1f3      	bne.n	1191a <AD5940_ADCPGACal+0x182>
    uint32_t gain = AD5940_ReadReg(regaddr_gain);
   11932:	4638      	mov	r0, r7
   11934:	f7ff fe5c 	bl	115f0 <AD5940_ReadReg>
    ADCCode = (ExpectedCode<<3) - ADCCode;  /* We will shift back 1bit below */
   11938:	f5c5 2580 	rsb	r5, r5, #262144	; 0x40000
    ADCCode = (ADCCode*0x4000)/gain;
   1193c:	03ad      	lsls	r5, r5, #14
   1193e:	fbb5 f5f0 	udiv	r5, r5, r0
    ADCCode = ((ADCCode+1)>>1)&0x7fff;      /* Round 0.5 */
   11942:	1c69      	adds	r1, r5, #1
    AD5940_WriteReg(regaddr_offset, ADCCode);
   11944:	f3c1 014e 	ubfx	r1, r1, #1, #15
   11948:	4640      	mov	r0, r8
   1194a:	f7ff fe01 	bl	11550 <AD5940_WriteReg>
  if(pADCPGACal->PGACalType != PGACALTYPE_OFFSET)  /* Need gain calibration */
   1194e:	69e3      	ldr	r3, [r4, #28]
   11950:	2b00      	cmp	r3, #0
   11952:	f47f af62 	bne.w	1181a <AD5940_ADCPGACal+0x82>
  if(INTCCfg&AFEINTSRC_SINC2RDY);
   11956:	f016 0204 	ands.w	r2, r6, #4
   1195a:	d103      	bne.n	11964 <AD5940_ADCPGACal+0x1cc>
    AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_SINC2RDY, bFALSE); /* Disable SINC2 Interrupt */
   1195c:	2104      	movs	r1, #4
   1195e:	2001      	movs	r0, #1
   11960:	f013 ff85 	bl	2586e <AD5940_INTCCfg>
  AD5940_WriteReg(REG_AFE_CALDATLOCK, 0);  /* Lock KEY */
   11964:	f242 2030 	movw	r0, #8752	; 0x2230
   11968:	2100      	movs	r1, #0
   1196a:	f7ff fdf1 	bl	11550 <AD5940_WriteReg>
  return AD5940ERR_OK;
   1196e:	2000      	movs	r0, #0
}
   11970:	b027      	add	sp, #156	; 0x9c
   11972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ExpectedGainCode = (int32_t)((pADCPGACal->VRef1p82 - pADCPGACal->VRef1p11)*ideal_pga_gain[pADCPGACal->ADCPga]/\
   11976:	f8d4 8008 	ldr.w	r8, [r4, #8]
   1197a:	68e1      	ldr	r1, [r4, #12]
      adc_base.ADCMuxN = ADCMUXN_VSET1P1;
   1197c:	2308      	movs	r3, #8
   1197e:	2012      	movs	r0, #18
   11980:	e9cd 0302 	strd	r0, r3, [sp, #8]
      ExpectedGainCode = (int32_t)((pADCPGACal->VRef1p82 - pADCPGACal->VRef1p11)*ideal_pga_gain[pADCPGACal->ADCPga]/\
   11984:	4640      	mov	r0, r8
   11986:	f7ee fbbf 	bl	108 <__aeabi_fsub>
   1198a:	f855 1029 	ldr.w	r1, [r5, r9, lsl #2]
   1198e:	f7ee fcc5 	bl	31c <__aeabi_fmul>
   11992:	4641      	mov	r1, r8
   11994:	f7ee fd76 	bl	484 <__aeabi_fdiv>
                                    pADCPGACal->VRef1p82*32768/kFactor)\
   11998:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   1199c:	f7ee fcbe 	bl	31c <__aeabi_fmul>
   119a0:	491b      	ldr	r1, [pc, #108]	; (11a10 <AD5940_ADCPGACal+0x278>)
   119a2:	f7ee fd6f 	bl	484 <__aeabi_fdiv>
      ExpectedGainCode = (int32_t)((pADCPGACal->VRef1p82 - pADCPGACal->VRef1p11)*ideal_pga_gain[pADCPGACal->ADCPga]/\
   119a6:	f7ee fe09 	bl	5bc <__aeabi_f2iz>
   119aa:	f500 4500 	add.w	r5, r0, #32768	; 0x8000
    adc_base.ADCPga = pADCPGACal->ADCPga;    /* Set to gain under calibration */
   119ae:	69a3      	ldr	r3, [r4, #24]
   119b0:	9304      	str	r3, [sp, #16]
    AD5940_ADCBaseCfgS(&adc_base);
   119b2:	a802      	add	r0, sp, #8
   119b4:	f013 fefd 	bl	257b2 <AD5940_ADCBaseCfgS>
    AD5940_Delay10us(5);
   119b8:	2005      	movs	r0, #5
   119ba:	f013 ff94 	bl	258e6 <AD5940_Delay10us>
    time_out = pADCPGACal->TimeOut10us;      /* Reset time out counter */
   119be:	6a23      	ldr	r3, [r4, #32]
   119c0:	9301      	str	r3, [sp, #4]
    ADCCode = __AD5940_TakeMeasurement(&time_out);
   119c2:	a801      	add	r0, sp, #4
   119c4:	f7ff fec0 	bl	11748 <__AD5940_TakeMeasurement>
    if(time_out == 0) goto ADCPGACALERROR_TIMEOUT;
   119c8:	9b01      	ldr	r3, [sp, #4]
   119ca:	2b00      	cmp	r3, #0
   119cc:	d088      	beq.n	118e0 <AD5940_ADCPGACal+0x148>
    ADCCode = (ExpectedGainCode - 0x8000)*0x4000/(ADCCode-0x8000);
   119ce:	f5a5 4100 	sub.w	r1, r5, #32768	; 0x8000
   119d2:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
   119d6:	0389      	lsls	r1, r1, #14
   119d8:	fb91 f1f0 	sdiv	r1, r1, r0
    AD5940_WriteReg(regaddr_gain, ADCCode);
   119dc:	4638      	mov	r0, r7
   119de:	f3c1 010e 	ubfx	r1, r1, #0, #15
   119e2:	f7ff fdb5 	bl	11550 <AD5940_WriteReg>
   119e6:	e7b6      	b.n	11956 <AD5940_ADCPGACal+0x1be>
        HSDACCode = 0x800 + 0x300;  /* 0x300--> 0x300/0x1000*0.8*BUFFERGAIN2 = 0.3V. */
   119e8:	f44f 6330 	mov.w	r3, #2816	; 0xb00
   119ec:	e753      	b.n	11896 <AD5940_ADCPGACal+0xfe>
  if(pADCPGACal == NULL) return AD5940ERR_NULLP;
   119ee:	f06f 0002 	mvn.w	r0, #2
   119f2:	e7bd      	b.n	11970 <AD5940_ADCPGACal+0x1d8>
  if(pADCPGACal->ADCPga > ADCPGA_9) return AD5940ERR_PARA;  /* Parameter Error */
   119f4:	f06f 0001 	mvn.w	r0, #1
   119f8:	e7ba      	b.n	11970 <AD5940_ADCPGACal+0x1d8>
   119fa:	bf00      	nop
   119fc:	0002bb54 	.word	0x0002bb54
   11a00:	0039ffe0 	.word	0x0039ffe0
   11a04:	001100e0 	.word	0x001100e0
   11a08:	de87a5af 	.word	0xde87a5af
   11a0c:	0002b028 	.word	0x0002b028
   11a10:	3f810e11 	.word	0x3f810e11

00011a14 <z_impl_gpio_pin_configure.constprop.0>:
 */
__syscall int gpio_pin_configure(const struct device *port,
				 gpio_pin_t pin,
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
   11a14:	4601      	mov	r1, r0
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
   11a16:	4808      	ldr	r0, [pc, #32]	; (11a38 <z_impl_gpio_pin_configure.constprop.0+0x24>)
static inline int z_impl_gpio_pin_configure(const struct device *port,
   11a18:	b430      	push	{r4, r5}
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   11a1a:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
   11a1c:	6885      	ldr	r5, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   11a1e:	2301      	movs	r3, #1
   11a20:	fa03 f201 	lsl.w	r2, r3, r1
   11a24:	6823      	ldr	r3, [r4, #0]
   11a26:	ea23 0302 	bic.w	r3, r3, r2
   11a2a:	6023      	str	r3, [r4, #0]
	}

	return api->pin_configure(port, pin, flags);
   11a2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   11a30:	682b      	ldr	r3, [r5, #0]
}
   11a32:	bc30      	pop	{r4, r5}
	return api->pin_configure(port, pin, flags);
   11a34:	4718      	bx	r3
   11a36:	bf00      	nop
   11a38:	0002a898 	.word	0x0002a898

00011a3c <gpio_pin_set.constprop.0.isra.0>:
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   11a3c:	2301      	movs	r3, #1
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   11a3e:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   11a40:	fa03 f100 	lsl.w	r1, r3, r0
	const struct gpio_driver_data *const data =
   11a44:	4b07      	ldr	r3, [pc, #28]	; (11a64 <gpio_pin_set.constprop.0.isra.0+0x28>)
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   11a46:	6918      	ldr	r0, [r3, #16]
   11a48:	6800      	ldr	r0, [r0, #0]
   11a4a:	4201      	tst	r1, r0
		value = (value != 0) ? 0 : 1;
   11a4c:	bf18      	it	ne
   11a4e:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   11a52:	b11a      	cbz	r2, 11a5c <gpio_pin_set.constprop.0.isra.0+0x20>
	return api->port_set_bits_raw(port, pins);
   11a54:	689b      	ldr	r3, [r3, #8]
   11a56:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   11a58:	4802      	ldr	r0, [pc, #8]	; (11a64 <gpio_pin_set.constprop.0.isra.0+0x28>)
   11a5a:	4718      	bx	r3
   11a5c:	689b      	ldr	r3, [r3, #8]
   11a5e:	691b      	ldr	r3, [r3, #16]
   11a60:	e7fa      	b.n	11a58 <gpio_pin_set.constprop.0.isra.0+0x1c>
   11a62:	bf00      	nop
   11a64:	0002a898 	.word	0x0002a898

00011a68 <AD5940_MCUResourceInit>:
	.frequency = 8000000,
};

/////////////////////////////////////////// setup function: MCU peripherals (GPIO pins, SPI, interrupt)
uint32_t AD5940_MCUResourceInit(void *pCfg)
{
   11a68:	b510      	push	{r4, lr}
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   11a6a:	201f      	movs	r0, #31
   11a6c:	f7ff ffd2 	bl	11a14 <z_impl_gpio_pin_configure.constprop.0>
    // set the AD5941 CS pin and the RESET pin to outputs

    // SIO_31 connected to CS pin   
    ret = gpio_pin_configure(gpio_dev, CS_PIN, GPIO_OUTPUT);
   11a70:	4c0c      	ldr	r4, [pc, #48]	; (11aa4 <AD5940_MCUResourceInit+0x3c>)
    if (ret < 0) { 	printf("error A ... \n\r") ; }
   11a72:	2800      	cmp	r0, #0
    ret = gpio_pin_configure(gpio_dev, CS_PIN, GPIO_OUTPUT);
   11a74:	6020      	str	r0, [r4, #0]
    if (ret < 0) { 	printf("error A ... \n\r") ; }
   11a76:	da02      	bge.n	11a7e <AD5940_MCUResourceInit+0x16>
   11a78:	480b      	ldr	r0, [pc, #44]	; (11aa8 <AD5940_MCUResourceInit+0x40>)
   11a7a:	f003 f89b 	bl	14bb4 <printf>
   11a7e:	201e      	movs	r0, #30
   11a80:	f7ff ffc8 	bl	11a14 <z_impl_gpio_pin_configure.constprop.0>

    // SIO_30 connected to RESET pin   
    ret = gpio_pin_configure(gpio_dev, RESET_PIN, GPIO_OUTPUT);
    if (ret < 0) { 	printf("error B ... \n\r") ; }
   11a84:	2800      	cmp	r0, #0
    ret = gpio_pin_configure(gpio_dev, RESET_PIN, GPIO_OUTPUT);
   11a86:	6020      	str	r0, [r4, #0]
    if (ret < 0) { 	printf("error B ... \n\r") ; }
   11a88:	da02      	bge.n	11a90 <AD5940_MCUResourceInit+0x28>
   11a8a:	4808      	ldr	r0, [pc, #32]	; (11aac <AD5940_MCUResourceInit+0x44>)
   11a8c:	f003 f892 	bl	14bb4 <printf>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   11a90:	4807      	ldr	r0, [pc, #28]	; (11ab0 <AD5940_MCUResourceInit+0x48>)
   11a92:	f018 f8c6 	bl	29c22 <z_device_is_ready>

    if(!device_is_ready(spi_dev)) 
   11a96:	b910      	cbnz	r0, 11a9e <AD5940_MCUResourceInit+0x36>
    {
		printf("SPI master device is not ready!\n");
   11a98:	4806      	ldr	r0, [pc, #24]	; (11ab4 <AD5940_MCUResourceInit+0x4c>)
   11a9a:	f003 f88b 	bl	14bb4 <printf>
     */
    
    // enable external interrupt on pin

    return 0;
}//end
   11a9e:	2000      	movs	r0, #0
   11aa0:	bd10      	pop	{r4, pc}
   11aa2:	bf00      	nop
   11aa4:	200024d4 	.word	0x200024d4
   11aa8:	0002bb68 	.word	0x0002bb68
   11aac:	0002bb77 	.word	0x0002bb77
   11ab0:	0002a940 	.word	0x0002a940
   11ab4:	0002bb86 	.word	0x0002bb86

00011ab8 <AD5940_ReadWriteNBytes>:

//////////////////////////////////////// Read and Write function 
void AD5940_ReadWriteNBytes(unsigned char *pSendBuffer, unsigned char *pRecvBuff, unsigned long length)
{
   11ab8:	b510      	push	{r4, lr}
   11aba:	b088      	sub	sp, #32
	const struct spi_buf tx_buf = 
    {
		.buf = pSendBuffer,
		.len = length
	};
	const struct spi_buf_set tx = 
   11abc:	2301      	movs	r3, #1
	const struct spi_buf tx_buf = 
   11abe:	e9cd 0200 	strd	r0, r2, [sp]
    {
		.buffers = &tx_buf,
		.count = 1
	};

	struct spi_buf rx_buf = 
   11ac2:	9205      	str	r2, [sp, #20]
    {
		.buf = pRecvBuff,
		.len = length,
	};
	const struct spi_buf_set rx = 
   11ac4:	aa04      	add	r2, sp, #16
	struct spi_buf rx_buf = 
   11ac6:	e9cd 3103 	strd	r3, r1, [sp, #12]
	const struct spi_buf_set rx = 
   11aca:	e9cd 2306 	strd	r2, r3, [sp, #24]
	const struct spi_buf_set tx = 
   11ace:	f8cd d008 	str.w	sp, [sp, #8]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
   11ad2:	4806      	ldr	r0, [pc, #24]	; (11aec <AD5940_ReadWriteNBytes+0x34>)
   11ad4:	4906      	ldr	r1, [pc, #24]	; (11af0 <AD5940_ReadWriteNBytes+0x38>)
   11ad6:	6883      	ldr	r3, [r0, #8]
   11ad8:	aa02      	add	r2, sp, #8
   11ada:	681c      	ldr	r4, [r3, #0]
   11adc:	ab06      	add	r3, sp, #24
   11ade:	47a0      	blx	r4
		.count = 1
	};

	// Start transaction
	int error = spi_transceive(spi_dev, &spi_cfg, &tx, &rx);
	if(error != 0)
   11ae0:	b110      	cbz	r0, 11ae8 <AD5940_ReadWriteNBytes+0x30>
    {
		printf("SPI transceive error \n");
   11ae2:	4804      	ldr	r0, [pc, #16]	; (11af4 <AD5940_ReadWriteNBytes+0x3c>)
   11ae4:	f003 f866 	bl	14bb4 <printf>
	}

 }//end 
   11ae8:	b008      	add	sp, #32
   11aea:	bd10      	pop	{r4, pc}
   11aec:	0002a940 	.word	0x0002a940
   11af0:	0002b03c 	.word	0x0002b03c
   11af4:	0002bba7 	.word	0x0002bba7

00011af8 <main>:
// 1000 msec = 1 sec (used to control the LED blinking frequency)
#define SLEEP_TIME_MS   1000

////////////////////////////////////////////////// MAIN ////////////////////////////////////// 
void main(void)
{
   11af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11afc:	b08c      	sub	sp, #48	; 0x30
   11afe:	4c51      	ldr	r4, [pc, #324]	; (11c44 <main+0x14c>)
   11b00:	4620      	mov	r0, r4
   11b02:	f018 f88e 	bl	29c22 <z_device_is_ready>
    // define return variable 
	int ret;

    // check if led device is ready 
	if (!device_is_ready(led.port)) { return; }
   11b06:	2800      	cmp	r0, #0
   11b08:	f000 8098 	beq.w	11c3c <main+0x144>
	struct gpio_driver_data *data =
   11b0c:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
   11b0e:	68a6      	ldr	r6, [r4, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   11b10:	6813      	ldr	r3, [r2, #0]
   11b12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   11b16:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   11b18:	210d      	movs	r1, #13
   11b1a:	6833      	ldr	r3, [r6, #0]
   11b1c:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   11b20:	4620      	mov	r0, r4
   11b22:	4798      	blx	r3

    // set the led to active-high output 
	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
	if (ret < 0) { return; }
   11b24:	2800      	cmp	r0, #0
   11b26:	f2c0 8089 	blt.w	11c3c <main+0x144>
   11b2a:	2505      	movs	r5, #5
	return api->port_toggle_bits(port, pins);
   11b2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   11b30:	6973      	ldr	r3, [r6, #20]
   11b32:	4620      	mov	r0, r4
   11b34:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
   11b36:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11b3a:	2100      	movs	r1, #0
   11b3c:	f010 f8f6 	bl	21d2c <z_impl_k_sleep>

    // toggle the led 5 times before starting the program 
	int led_counter = 0;	
    while (led_counter < 5) 
   11b40:	3d01      	subs	r5, #1
   11b42:	d1f3      	bne.n	11b2c <main+0x34>
		k_msleep(SLEEP_TIME_MS);
		led_counter = led_counter + 1;
	}//end while

    // setup the MCU resources for connecting to AD5940 (initializae the MCU - defined in BL654Port.c) 
    AD5940_MCUResourceInit(0);
   11b44:	4628      	mov	r0, r5
   11b46:	f7ff ff8f 	bl	11a68 <AD5940_MCUResourceInit>
	// ADC measurement of AD5940/41
    ADCBaseCfg_Type adc_base;
    ADCFilterCfg_Type adc_filter;
  
    // Use hardware reset (RESET pin is set and reset)
    AD5940_HWReset();
   11b4a:	f013 febe 	bl	258ca <AD5940_HWReset>

    // initialize the AD5941 device by writing to its registers
    AD5940_Initialize();
   11b4e:	f7ff fd71 	bl	11634 <AD5940_Initialize>
  pgacal.AdcClkFreq = 16e6;
   11b52:	4a3d      	ldr	r2, [pc, #244]	; (11c48 <main+0x150>)
   11b54:	9204      	str	r2, [sp, #16]
  pgacal.SysClkFreq = 16e6;
   11b56:	9203      	str	r2, [sp, #12]
  pgacal.TimeOut10us = 1000;
   11b58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11b5c:	920b      	str	r2, [sp, #44]	; 0x2c
  pgacal.VRef1p11 = 1.11f;
   11b5e:	4a3b      	ldr	r2, [pc, #236]	; (11c4c <main+0x154>)
   11b60:	9206      	str	r2, [sp, #24]
  pgacal.ADCSinc3Osr = ADCSINC3OSR_4;
   11b62:	2301      	movs	r3, #1
  pgacal.VRef1p82 = 1.82f;
   11b64:	4a3a      	ldr	r2, [pc, #232]	; (11c50 <main+0x158>)
   11b66:	9205      	str	r2, [sp, #20]
  pgacal.ADCSinc3Osr = ADCSINC3OSR_4;
   11b68:	2003      	movs	r0, #3
   11b6a:	e9cd 3007 	strd	r3, r0, [sp, #28]
  pgacal.PGACalType = PGACALTYPE_OFFSETGAIN;
   11b6e:	2202      	movs	r2, #2
  err = AD5940_ADCPGACal(&pgacal);
   11b70:	a803      	add	r0, sp, #12
  pgacal.ADCPga = ADCPGA_GAIN_SEL;
   11b72:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
  err = AD5940_ADCPGACal(&pgacal);
   11b76:	f7ff fe0f 	bl	11798 <AD5940_ADCPGACal>
  if(err != AD5940ERR_OK)
   11b7a:	2800      	cmp	r0, #0
   11b7c:	d05c      	beq.n	11c38 <main+0x140>
    printf("AD5940 PGA calibration failed.\n\r");
   11b7e:	4835      	ldr	r0, [pc, #212]	; (11c54 <main+0x15c>)
        if(AD5940_INTCTestFlag(AFEINTC_1,AFEINTSRC_SINC2RDY))  
        {
            static uint32_t count;
            AD5940_INTCClrFlag(AFEINTSRC_SINC2RDY);
            rd = AD5940_ReadAfeResult(AFERESULT_SINC2);
            count ++;
   11b80:	4e35      	ldr	r6, [pc, #212]	; (11c58 <main+0x160>)
            // ADC Sample rate is 800kSPS. SINC3 OSR is 4, SINC2 OSR is 1333.
            // So the final output data rate is 800 kSPS/4/1333 = 150.0375 Hz
            if(count == 150) // Print the data @0.5Hz
            {
                count = 0;
                float diff_volt = AD5940_ADCCode2Volt(rd, ADCPGA_GAIN_SEL, 1.82);
   11b82:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 11c50 <main+0x158>

				// process the measured differential voltage 
                int diff_volt_int = (int) diff_volt;		// integer part 
                int diff_volt_frac = (int) ((diff_volt - diff_volt_int) * 10000);
   11b86:	4f35      	ldr	r7, [pc, #212]	; (11c5c <main+0x164>)
    printf("AD5940 PGA calibration Success.\n\r");
   11b88:	f003 f814 	bl	14bb4 <printf>
    AD5940_AFEPwrBW(AFEPWR_LP, AFEBW_250KHZ);
   11b8c:	2103      	movs	r1, #3
   11b8e:	2000      	movs	r0, #0
   11b90:	f013 fcdd 	bl	2554e <AD5940_AFEPwrBW>
    AD5940_AFECtrlS(AFECTRL_DACREFPWR|AFECTRL_HSDACPWR, bTRUE); 
   11b94:	2101      	movs	r1, #1
   11b96:	4832      	ldr	r0, [pc, #200]	; (11c60 <main+0x168>)
    adc_base.ADCPga = ADCPGA_GAIN_SEL;
   11b98:	2401      	movs	r4, #1
    AD5940_AFECtrlS(AFECTRL_DACREFPWR|AFECTRL_HSDACPWR, bTRUE); 
   11b9a:	f013 fcac 	bl	254f6 <AD5940_AFECtrlS>
    adc_base.ADCMuxN = ADCMUXN_VSET1P1;    			// negative input set to 1.1 V
   11b9e:	2212      	movs	r2, #18
   11ba0:	2308      	movs	r3, #8
    AD5940_ADCBaseCfgS(&adc_base);
   11ba2:	4668      	mov	r0, sp
    adc_base.ADCMuxN = ADCMUXN_VSET1P1;    			// negative input set to 1.1 V
   11ba4:	e9cd 2300 	strd	r2, r3, [sp]
    adc_base.ADCPga = ADCPGA_GAIN_SEL;
   11ba8:	9402      	str	r4, [sp, #8]
    AD5940_ADCBaseCfgS(&adc_base);
   11baa:	f013 fe02 	bl	257b2 <AD5940_ADCBaseCfgS>
    adc_filter.ADCAvgNum = ADCAVGNUM_2;         /* Don't care about it. Average function is only used for DFT */
   11bae:	2300      	movs	r3, #0
   11bb0:	210b      	movs	r1, #11
    AD5940_ADCFilterCfgS(&adc_filter);
   11bb2:	a803      	add	r0, sp, #12
    adc_filter.ADCAvgNum = ADCAVGNUM_2;         /* Don't care about it. Average function is only used for DFT */
   11bb4:	e9cd 1304 	strd	r1, r3, [sp, #16]
    adc_filter.ADCSinc3Osr = ADCSINC3OSR_4;
   11bb8:	9403      	str	r4, [sp, #12]
    adc_filter.ADCRate = ADCRATE_800KHZ;        /* If ADC clock is 32MHz, then set it to ADCRATE_1P6MHZ. Default is 16MHz, use ADCRATE_800KHZ. */
   11bba:	9406      	str	r4, [sp, #24]
    adc_filter.BpNotch = bTRUE;                 /* SINC2+Notch is one block, when bypass notch filter, we can get fresh data from SINC2 filter. */
   11bbc:	f8ad 401c 	strh.w	r4, [sp, #28]
    adc_filter.Sinc2NotchEnable = bTRUE;        /* Enable the SINC2+Notch block. You can also use function AD5940_AFECtrlS */ 
   11bc0:	f88d 401e 	strb.w	r4, [sp, #30]
    AD5940_ADCFilterCfgS(&adc_filter);
   11bc4:	f013 fe00 	bl	257c8 <AD5940_ADCFilterCfgS>
    AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_ALLINT, bTRUE);
   11bc8:	4622      	mov	r2, r4
   11bca:	f04f 31ff 	mov.w	r1, #4294967295
   11bce:	4620      	mov	r0, r4
   11bd0:	f013 fe4d 	bl	2586e <AD5940_INTCCfg>
    AD5940_ADCPowerCtrlS(bTRUE);
   11bd4:	4620      	mov	r0, r4
   11bd6:	f013 fe24 	bl	25822 <AD5940_ADCPowerCtrlS>
    AD5940_ADCConvtCtrlS(bTRUE);
   11bda:	4620      	mov	r0, r4
   11bdc:	f013 fe34 	bl	25848 <AD5940_ADCConvtCtrlS>
        if(AD5940_INTCTestFlag(AFEINTC_1,AFEINTSRC_SINC2RDY))  
   11be0:	2104      	movs	r1, #4
   11be2:	2001      	movs	r0, #1
   11be4:	f013 fe60 	bl	258a8 <AD5940_INTCTestFlag>
   11be8:	2800      	cmp	r0, #0
   11bea:	d0f9      	beq.n	11be0 <main+0xe8>
            AD5940_INTCClrFlag(AFEINTSRC_SINC2RDY);
   11bec:	2004      	movs	r0, #4
   11bee:	f013 fe56 	bl	2589e <AD5940_INTCClrFlag>
            rd = AD5940_ReadAfeResult(AFERESULT_SINC2);
   11bf2:	2001      	movs	r0, #1
   11bf4:	f013 fdbd 	bl	25772 <AD5940_ReadAfeResult>
            count ++;
   11bf8:	6833      	ldr	r3, [r6, #0]
   11bfa:	3301      	adds	r3, #1
            if(count == 150) // Print the data @0.5Hz
   11bfc:	2b96      	cmp	r3, #150	; 0x96
            count ++;
   11bfe:	6033      	str	r3, [r6, #0]
            if(count == 150) // Print the data @0.5Hz
   11c00:	d1ee      	bne.n	11be0 <main+0xe8>
                count = 0;
   11c02:	2300      	movs	r3, #0
                float diff_volt = AD5940_ADCCode2Volt(rd, ADCPGA_GAIN_SEL, 1.82);
   11c04:	4642      	mov	r2, r8
   11c06:	2101      	movs	r1, #1
                count = 0;
   11c08:	6033      	str	r3, [r6, #0]
                float diff_volt = AD5940_ADCCode2Volt(rd, ADCPGA_GAIN_SEL, 1.82);
   11c0a:	f7ff fc75 	bl	114f8 <AD5940_ADCCode2Volt>
   11c0e:	4605      	mov	r5, r0
                int diff_volt_int = (int) diff_volt;		// integer part 
   11c10:	f7ee fcd4 	bl	5bc <__aeabi_f2iz>
   11c14:	4604      	mov	r4, r0
                int diff_volt_frac = (int) ((diff_volt - diff_volt_int) * 10000);
   11c16:	f7ee fb2d 	bl	274 <__aeabi_i2f>
   11c1a:	4601      	mov	r1, r0
   11c1c:	4628      	mov	r0, r5
   11c1e:	f7ee fa73 	bl	108 <__aeabi_fsub>
   11c22:	4639      	mov	r1, r7
   11c24:	f7ee fb7a 	bl	31c <__aeabi_fmul>
   11c28:	f7ee fcc8 	bl	5bc <__aeabi_f2iz>
				// print to serial terminal 
				// printf ("Int = %d, Decimal = %d \n\r", diff_volt_int, diff_volt_dec_int);
                printf("Differential Voltage: %d.%04d V\n\r", diff_volt_int, diff_volt_frac);
   11c2c:	4621      	mov	r1, r4
                int diff_volt_frac = (int) ((diff_volt - diff_volt_int) * 10000);
   11c2e:	4602      	mov	r2, r0
                printf("Differential Voltage: %d.%04d V\n\r", diff_volt_int, diff_volt_frac);
   11c30:	480c      	ldr	r0, [pc, #48]	; (11c64 <main+0x16c>)
   11c32:	f002 ffbf 	bl	14bb4 <printf>
   11c36:	e7d3      	b.n	11be0 <main+0xe8>
    printf("AD5940 PGA calibration Success.\n\r");
   11c38:	480b      	ldr	r0, [pc, #44]	; (11c68 <main+0x170>)
   11c3a:	e7a1      	b.n	11b80 <main+0x88>

        }//end if

    }//end while

   11c3c:	b00c      	add	sp, #48	; 0x30
   11c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11c42:	bf00      	nop
   11c44:	0002a898 	.word	0x0002a898
   11c48:	4b742400 	.word	0x4b742400
   11c4c:	3f8e147b 	.word	0x3f8e147b
   11c50:	3fe8f5c3 	.word	0x3fe8f5c3
   11c54:	0002bbbe 	.word	0x0002bbbe
   11c58:	200024d8 	.word	0x200024d8
   11c5c:	461c4000 	.word	0x461c4000
   11c60:	00100040 	.word	0x00100040
   11c64:	0002bc01 	.word	0x0002bc01
   11c68:	0002bbdf 	.word	0x0002bbdf

00011c6c <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   11c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c70:	b08d      	sub	sp, #52	; 0x34
   11c72:	461f      	mov	r7, r3
   11c74:	9203      	str	r2, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   11c76:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   11c7a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   11c7e:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   11c80:	1c53      	adds	r3, r2, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   11c82:	0782      	lsls	r2, r0, #30
   11c84:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   11c88:	9305      	str	r3, [sp, #20]
{
   11c8a:	4605      	mov	r5, r0
   11c8c:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
   11c8e:	f040 8222 	bne.w	120d6 <cbvprintf_package+0x46a>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   11c92:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   11c94:	2800      	cmp	r0, #0
   11c96:	f040 8221 	bne.w	120dc <cbvprintf_package+0x470>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   11c9a:	f001 0607 	and.w	r6, r1, #7
   11c9e:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   11ca0:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   11ca4:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
   11ca8:	f04f 0804 	mov.w	r8, #4
	s = fmt--;
   11cac:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   11cae:	f8cd a010 	str.w	sl, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   11cb2:	4652      	mov	r2, sl
	bool parsing = false;
   11cb4:	46d1      	mov	r9, sl
	size = sizeof(char *);
   11cb6:	4641      	mov	r1, r8

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
   11cb8:	b105      	cbz	r5, 11cbc <cbvprintf_package+0x50>
				*(const char **)buf = s;
   11cba:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   11cbc:	9805      	ldr	r0, [sp, #20]
   11cbe:	2800      	cmp	r0, #0
   11cc0:	dc07      	bgt.n	11cd2 <cbvprintf_package+0x66>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   11cc2:	48c6      	ldr	r0, [pc, #792]	; (11fdc <cbvprintf_package+0x370>)
   11cc4:	4287      	cmp	r7, r0
   11cc6:	f0c0 8143 	bcc.w	11f50 <cbvprintf_package+0x2e4>
   11cca:	48c5      	ldr	r0, [pc, #788]	; (11fe0 <cbvprintf_package+0x374>)
   11ccc:	4287      	cmp	r7, r0
   11cce:	f080 813f 	bcs.w	11f50 <cbvprintf_package+0x2e4>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
   11cd2:	9803      	ldr	r0, [sp, #12]
   11cd4:	f010 0e02 	ands.w	lr, r0, #2
   11cd8:	f000 8153 	beq.w	11f82 <cbvprintf_package+0x316>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   11cdc:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   11ce0:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   11ce2:	f1be 0f00 	cmp.w	lr, #0
   11ce6:	f000 8139 	beq.w	11f5c <cbvprintf_package+0x2f0>
   11cea:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   11cee:	f0c0 8135 	bcc.w	11f5c <cbvprintf_package+0x2f0>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
   11cf2:	f06f 0015 	mvn.w	r0, #21
   11cf6:	e0fd      	b.n	11ef4 <cbvprintf_package+0x288>
			switch (*fmt) {
   11cf8:	282b      	cmp	r0, #43	; 0x2b
   11cfa:	d833      	bhi.n	11d64 <cbvprintf_package+0xf8>
   11cfc:	281f      	cmp	r0, #31
   11cfe:	d811      	bhi.n	11d24 <cbvprintf_package+0xb8>
				parsing = false;
   11d00:	f04f 0900 	mov.w	r9, #0
			if (*++fmt == '\0') {
   11d04:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   11d08:	2800      	cmp	r0, #0
   11d0a:	f000 817e 	beq.w	1200a <cbvprintf_package+0x39e>
			if (!parsing) {
   11d0e:	f1b9 0f00 	cmp.w	r9, #0
   11d12:	d1f1      	bne.n	11cf8 <cbvprintf_package+0x8c>
				if (*fmt == '%') {
   11d14:	2825      	cmp	r0, #37	; 0x25
   11d16:	d1f5      	bne.n	11d04 <cbvprintf_package+0x98>
					parsing = true;
   11d18:	f04f 0901 	mov.w	r9, #1
				align = VA_STACK_ALIGN(ptrdiff_t);
   11d1c:	f04f 0804 	mov.w	r8, #4
				buf += size;
   11d20:	4641      	mov	r1, r8
   11d22:	e7ef      	b.n	11d04 <cbvprintf_package+0x98>
			switch (*fmt) {
   11d24:	3820      	subs	r0, #32
   11d26:	280b      	cmp	r0, #11
   11d28:	d8ea      	bhi.n	11d00 <cbvprintf_package+0x94>
   11d2a:	f20f 0c08 	addw	ip, pc, #8
   11d2e:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
   11d32:	bf00      	nop
   11d34:	00011d05 	.word	0x00011d05
   11d38:	00011d01 	.word	0x00011d01
   11d3c:	00011d01 	.word	0x00011d01
   11d40:	00011d05 	.word	0x00011d05
   11d44:	00011d01 	.word	0x00011d01
   11d48:	00011d01 	.word	0x00011d01
   11d4c:	00011d01 	.word	0x00011d01
   11d50:	00011d01 	.word	0x00011d01
   11d54:	00011d01 	.word	0x00011d01
   11d58:	00011d01 	.word	0x00011d01
   11d5c:	00011f17 	.word	0x00011f17
   11d60:	00011d05 	.word	0x00011d05
   11d64:	382d      	subs	r0, #45	; 0x2d
   11d66:	fa5f fc80 	uxtb.w	ip, r0
   11d6a:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
   11d6e:	d8c7      	bhi.n	11d00 <cbvprintf_package+0x94>
   11d70:	284d      	cmp	r0, #77	; 0x4d
   11d72:	d8c5      	bhi.n	11d00 <cbvprintf_package+0x94>
   11d74:	f20f 0c04 	addw	ip, pc, #4
   11d78:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
   11d7c:	00011d05 	.word	0x00011d05
   11d80:	00011d05 	.word	0x00011d05
   11d84:	00011d01 	.word	0x00011d01
   11d88:	00011d05 	.word	0x00011d05
   11d8c:	00011d05 	.word	0x00011d05
   11d90:	00011d05 	.word	0x00011d05
   11d94:	00011d05 	.word	0x00011d05
   11d98:	00011d05 	.word	0x00011d05
   11d9c:	00011d05 	.word	0x00011d05
   11da0:	00011d05 	.word	0x00011d05
   11da4:	00011d05 	.word	0x00011d05
   11da8:	00011d05 	.word	0x00011d05
   11dac:	00011d05 	.word	0x00011d05
   11db0:	00011d01 	.word	0x00011d01
   11db4:	00011d01 	.word	0x00011d01
   11db8:	00011d01 	.word	0x00011d01
   11dbc:	00011d01 	.word	0x00011d01
   11dc0:	00011d01 	.word	0x00011d01
   11dc4:	00011d01 	.word	0x00011d01
   11dc8:	00011d01 	.word	0x00011d01
   11dcc:	00011ed1 	.word	0x00011ed1
   11dd0:	00011d01 	.word	0x00011d01
   11dd4:	00011d01 	.word	0x00011d01
   11dd8:	00011d01 	.word	0x00011d01
   11ddc:	00011ed1 	.word	0x00011ed1
   11de0:	00011ed1 	.word	0x00011ed1
   11de4:	00011ed1 	.word	0x00011ed1
   11de8:	00011d01 	.word	0x00011d01
   11dec:	00011d01 	.word	0x00011d01
   11df0:	00011d01 	.word	0x00011d01
   11df4:	00011d01 	.word	0x00011d01
   11df8:	00011d05 	.word	0x00011d05
   11dfc:	00011d01 	.word	0x00011d01
   11e00:	00011d01 	.word	0x00011d01
   11e04:	00011d01 	.word	0x00011d01
   11e08:	00011d01 	.word	0x00011d01
   11e0c:	00011d01 	.word	0x00011d01
   11e10:	00011d01 	.word	0x00011d01
   11e14:	00011d01 	.word	0x00011d01
   11e18:	00011d01 	.word	0x00011d01
   11e1c:	00011d01 	.word	0x00011d01
   11e20:	00011d01 	.word	0x00011d01
   11e24:	00011d01 	.word	0x00011d01
   11e28:	00011eb5 	.word	0x00011eb5
   11e2c:	00011d01 	.word	0x00011d01
   11e30:	00011d01 	.word	0x00011d01
   11e34:	00011d01 	.word	0x00011d01
   11e38:	00011d01 	.word	0x00011d01
   11e3c:	00011d01 	.word	0x00011d01
   11e40:	00011d01 	.word	0x00011d01
   11e44:	00011d01 	.word	0x00011d01
   11e48:	00011d01 	.word	0x00011d01
   11e4c:	00011ed1 	.word	0x00011ed1
   11e50:	00011d01 	.word	0x00011d01
   11e54:	00011eb5 	.word	0x00011eb5
   11e58:	00011eb5 	.word	0x00011eb5
   11e5c:	00011ed1 	.word	0x00011ed1
   11e60:	00011ed1 	.word	0x00011ed1
   11e64:	00011ed1 	.word	0x00011ed1
   11e68:	00011d05 	.word	0x00011d05
   11e6c:	00011eb5 	.word	0x00011eb5
   11e70:	00011f05 	.word	0x00011f05
   11e74:	00011d01 	.word	0x00011d01
   11e78:	00011d05 	.word	0x00011d05
   11e7c:	00011d01 	.word	0x00011d01
   11e80:	00011f0b 	.word	0x00011f0b
   11e84:	00011eb5 	.word	0x00011eb5
   11e88:	00011f0b 	.word	0x00011f0b
   11e8c:	00011d01 	.word	0x00011d01
   11e90:	00011d01 	.word	0x00011d01
   11e94:	00011f13 	.word	0x00011f13
   11e98:	00011d1d 	.word	0x00011d1d
   11e9c:	00011eb5 	.word	0x00011eb5
   11ea0:	00011d01 	.word	0x00011d01
   11ea4:	00011d01 	.word	0x00011d01
   11ea8:	00011eb5 	.word	0x00011eb5
   11eac:	00011d01 	.word	0x00011d01
   11eb0:	00011d1d 	.word	0x00011d1d
				if (fmt[-1] == 'l') {
   11eb4:	f813 0c01 	ldrb.w	r0, [r3, #-1]
   11eb8:	286c      	cmp	r0, #108	; 0x6c
   11eba:	d143      	bne.n	11f44 <cbvprintf_package+0x2d8>
					if (fmt[-2] == 'l') {
   11ebc:	f813 1c02 	ldrb.w	r1, [r3, #-2]
   11ec0:	2000      	movs	r0, #0
   11ec2:	296c      	cmp	r1, #108	; 0x6c
				parsing = false;
   11ec4:	4681      	mov	r9, r0
					if (fmt[-2] == 'l') {
   11ec6:	d040      	beq.n	11f4a <cbvprintf_package+0x2de>
				align = VA_STACK_ALIGN(void *);
   11ec8:	f04f 0804 	mov.w	r8, #4
						size = sizeof(long long);
   11ecc:	4641      	mov	r1, r8
   11ece:	e023      	b.n	11f18 <cbvprintf_package+0x2ac>
					v.ld = va_arg(ap, long double);
   11ed0:	9801      	ldr	r0, [sp, #4]
   11ed2:	f100 0b07 	add.w	fp, r0, #7
   11ed6:	f02b 0007 	bic.w	r0, fp, #7
   11eda:	e8f0 8902 	ldrd	r8, r9, [r0], #8
				buf = (void *) ROUND_UP(buf, align);
   11ede:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
   11ee0:	9001      	str	r0, [sp, #4]
				buf = (void *) ROUND_UP(buf, align);
   11ee2:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   11ee6:	b155      	cbz	r5, 11efe <cbvprintf_package+0x292>
					if (BUF_OFFSET + size > len) {
   11ee8:	eb0e 0004 	add.w	r0, lr, r4
   11eec:	42b0      	cmp	r0, r6
   11eee:	d904      	bls.n	11efa <cbvprintf_package+0x28e>
						return -ENOSPC;
   11ef0:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   11ef4:	b00d      	add	sp, #52	; 0x34
   11ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						*(long double *)buf = v.ld;
   11efa:	e9c4 8900 	strd	r8, r9, [r4]
				buf += size;
   11efe:	3408      	adds	r4, #8
				parsing = false;
   11f00:	f04f 0900 	mov.w	r9, #0
				buf += size;
   11f04:	f04f 0808 	mov.w	r8, #8
   11f08:	e70a      	b.n	11d20 <cbvprintf_package+0xb4>
			switch (*fmt) {
   11f0a:	2000      	movs	r0, #0
				parsing = false;
   11f0c:	f04f 0900 	mov.w	r9, #0
   11f10:	e7da      	b.n	11ec8 <cbvprintf_package+0x25c>
				is_str_arg = true;
   11f12:	4648      	mov	r0, r9
   11f14:	e7fa      	b.n	11f0c <cbvprintf_package+0x2a0>
			switch (*fmt) {
   11f16:	2000      	movs	r0, #0
		buf = (void *) ROUND_UP(buf, align);
   11f18:	3c01      	subs	r4, #1
   11f1a:	4444      	add	r4, r8
   11f1c:	f1c8 0c00 	rsb	ip, r8, #0
   11f20:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   11f24:	b125      	cbz	r5, 11f30 <cbvprintf_package+0x2c4>
   11f26:	eba1 0c05 	sub.w	ip, r1, r5
   11f2a:	44a4      	add	ip, r4
   11f2c:	45b4      	cmp	ip, r6
   11f2e:	d8df      	bhi.n	11ef0 <cbvprintf_package+0x284>
		if (is_str_arg) {
   11f30:	2800      	cmp	r0, #0
   11f32:	d045      	beq.n	11fc0 <cbvprintf_package+0x354>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   11f34:	9805      	ldr	r0, [sp, #20]
			s = va_arg(ap, char *);
   11f36:	f8dd b004 	ldr.w	fp, [sp, #4]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   11f3a:	3801      	subs	r0, #1
			s = va_arg(ap, char *);
   11f3c:	f85b 7b04 	ldr.w	r7, [fp], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   11f40:	9005      	str	r0, [sp, #20]
			s = va_arg(ap, char *);
   11f42:	e6b9      	b.n	11cb8 <cbvprintf_package+0x4c>
   11f44:	2000      	movs	r0, #0
				parsing = false;
   11f46:	4681      	mov	r9, r0
   11f48:	e7e6      	b.n	11f18 <cbvprintf_package+0x2ac>
						align = VA_STACK_ALIGN(long long);
   11f4a:	f04f 0808 	mov.w	r8, #8
   11f4e:	e7bd      	b.n	11ecc <cbvprintf_package+0x260>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
   11f50:	9803      	ldr	r0, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   11f52:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
   11f56:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
   11f5a:	e6c1      	b.n	11ce0 <cbvprintf_package+0x74>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   11f5c:	2a0f      	cmp	r2, #15
   11f5e:	f63f aec8 	bhi.w	11cf2 <cbvprintf_package+0x86>
				if (buf0 != NULL) {
   11f62:	b1d5      	cbz	r5, 11f9a <cbvprintf_package+0x32e>
					str_ptr_pos[s_idx] = s_ptr_idx;
   11f64:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
   11f68:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
   11f6c:	4496      	add	lr, r2
   11f6e:	f1bc 0f00 	cmp.w	ip, #0
   11f72:	d00c      	beq.n	11f8e <cbvprintf_package+0x322>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   11f74:	f060 007f 	orn	r0, r0, #127	; 0x7f
   11f78:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
   11f7c:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
   11f80:	3201      	adds	r2, #1
			buf += sizeof(char *);
   11f82:	3404      	adds	r4, #4
			is_str_arg = false;
   11f84:	f8cd b004 	str.w	fp, [sp, #4]
					if (BUF_OFFSET + size > len) {
   11f88:	f1c5 0e08 	rsb	lr, r5, #8
   11f8c:	e6ba      	b.n	11d04 <cbvprintf_package+0x98>
					str_ptr_pos[s_idx] = s_ptr_idx;
   11f8e:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
   11f92:	9804      	ldr	r0, [sp, #16]
   11f94:	3001      	adds	r0, #1
   11f96:	9004      	str	r0, [sp, #16]
   11f98:	e7f2      	b.n	11f80 <cbvprintf_package+0x314>
				} else if (is_ro || rws_pos_en) {
   11f9a:	f1bc 0f00 	cmp.w	ip, #0
   11f9e:	d101      	bne.n	11fa4 <cbvprintf_package+0x338>
   11fa0:	9802      	ldr	r0, [sp, #8]
   11fa2:	b108      	cbz	r0, 11fa8 <cbvprintf_package+0x33c>
					len += 1;
   11fa4:	3601      	adds	r6, #1
   11fa6:	e7eb      	b.n	11f80 <cbvprintf_package+0x314>
					len += strlen(s) + 1 + 1;
   11fa8:	4638      	mov	r0, r7
   11faa:	e9cd 1206 	strd	r1, r2, [sp, #24]
   11fae:	9301      	str	r3, [sp, #4]
   11fb0:	f014 fe5c 	bl	26c6c <strlen>
   11fb4:	3602      	adds	r6, #2
   11fb6:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   11fba:	9b01      	ldr	r3, [sp, #4]
   11fbc:	4406      	add	r6, r0
   11fbe:	e7df      	b.n	11f80 <cbvprintf_package+0x314>
		} else if (size == sizeof(int)) {
   11fc0:	2904      	cmp	r1, #4
   11fc2:	d10f      	bne.n	11fe4 <cbvprintf_package+0x378>
			int v = va_arg(ap, int);
   11fc4:	9801      	ldr	r0, [sp, #4]
   11fc6:	3004      	adds	r0, #4
			if (buf0 != NULL) {
   11fc8:	b12d      	cbz	r5, 11fd6 <cbvprintf_package+0x36a>
			int v = va_arg(ap, int);
   11fca:	f8dd c004 	ldr.w	ip, [sp, #4]
   11fce:	f8dc c000 	ldr.w	ip, [ip]
   11fd2:	f8c4 c000 	str.w	ip, [r4]
			buf += sizeof(int);
   11fd6:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
   11fd8:	9001      	str	r0, [sp, #4]
   11fda:	e693      	b.n	11d04 <cbvprintf_package+0x98>
   11fdc:	0002a798 	.word	0x0002a798
   11fe0:	0002e38c 	.word	0x0002e38c
		} else if (size == sizeof(long long)) {
   11fe4:	2908      	cmp	r1, #8
   11fe6:	f47f ae84 	bne.w	11cf2 <cbvprintf_package+0x86>
			long long v = va_arg(ap, long long);
   11fea:	9801      	ldr	r0, [sp, #4]
   11fec:	f100 0b07 	add.w	fp, r0, #7
   11ff0:	f02b 0007 	bic.w	r0, fp, #7
   11ff4:	f100 0c08 	add.w	ip, r0, #8
   11ff8:	f8cd c004 	str.w	ip, [sp, #4]
			if (buf0 != NULL) {
   11ffc:	b11d      	cbz	r5, 12006 <cbvprintf_package+0x39a>
			long long v = va_arg(ap, long long);
   11ffe:	e9d0 bc00 	ldrd	fp, ip, [r0]
   12002:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
   12006:	3408      	adds	r4, #8
   12008:	e67c      	b.n	11d04 <cbvprintf_package+0x98>
	if (BUF_OFFSET / sizeof(int) > 255) {
   1200a:	1b61      	subs	r1, r4, r5
   1200c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   12010:	f4bf ae6f 	bcs.w	11cf2 <cbvprintf_package+0x86>
	if (buf0 == NULL) {
   12014:	b91d      	cbnz	r5, 1201e <cbvprintf_package+0x3b2>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   12016:	f1a6 0408 	sub.w	r4, r6, #8
   1201a:	1860      	adds	r0, r4, r1
   1201c:	e76a      	b.n	11ef4 <cbvprintf_package+0x288>
	if (rws_pos_en) {
   1201e:	9b02      	ldr	r3, [sp, #8]
	*(char **)buf0 = NULL;
   12020:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   12022:	0889      	lsrs	r1, r1, #2
   12024:	7029      	strb	r1, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   12026:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (rws_pos_en) {
   1202a:	b1a3      	cbz	r3, 12056 <cbvprintf_package+0x3ea>
		pkg_hdr->desc.str_cnt = 0;
   1202c:	7068      	strb	r0, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   1202e:	70e9      	strb	r1, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   12030:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
   12034:	f1ba 0f00 	cmp.w	sl, #0
   12038:	d006      	beq.n	12048 <cbvprintf_package+0x3dc>
   1203a:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
   1203c:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
   12040:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
   12044:	4562      	cmp	r2, ip
   12046:	d10a      	bne.n	1205e <cbvprintf_package+0x3f2>
   12048:	f10d 0820 	add.w	r8, sp, #32
   1204c:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
   12050:	f1c5 0b01 	rsb	fp, r5, #1
   12054:	e039      	b.n	120ca <cbvprintf_package+0x45e>
		pkg_hdr->desc.rw_str_cnt = 0;
   12056:	9b02      	ldr	r3, [sp, #8]
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   12058:	7069      	strb	r1, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   1205a:	70eb      	strb	r3, [r5, #3]
   1205c:	e7e8      	b.n	12030 <cbvprintf_package+0x3c4>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   1205e:	f810 1b01 	ldrb.w	r1, [r0], #1
   12062:	060b      	lsls	r3, r1, #24
   12064:	d508      	bpl.n	12078 <cbvprintf_package+0x40c>
			if (BUF_OFFSET + 1 > len) {
   12066:	eb04 080e 	add.w	r8, r4, lr
   1206a:	45b0      	cmp	r8, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   1206c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   12070:	f63f af3e 	bhi.w	11ef0 <cbvprintf_package+0x284>
			*buf++ = pos;
   12074:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
   12078:	f10c 0c01 	add.w	ip, ip, #1
   1207c:	e7e2      	b.n	12044 <cbvprintf_package+0x3d8>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   1207e:	f1ba 0f00 	cmp.w	sl, #0
   12082:	d003      	beq.n	1208c <cbvprintf_package+0x420>
   12084:	f998 2000 	ldrsb.w	r2, [r8]
   12088:	2a00      	cmp	r2, #0
   1208a:	db1c      	blt.n	120c6 <cbvprintf_package+0x45a>
		if (rws_pos_en) {
   1208c:	9b02      	ldr	r3, [sp, #8]
   1208e:	bb03      	cbnz	r3, 120d2 <cbvprintf_package+0x466>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   12090:	f898 2000 	ldrb.w	r2, [r8]
   12094:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   12098:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   1209c:	4638      	mov	r0, r7
   1209e:	f014 fde5 	bl	26c6c <strlen>
   120a2:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
   120a4:	eb04 010b 	add.w	r1, r4, fp
   120a8:	4411      	add	r1, r2
   120aa:	42b1      	cmp	r1, r6
   120ac:	f63f af20 	bhi.w	11ef0 <cbvprintf_package+0x284>
		*buf++ = str_ptr_pos[i];
   120b0:	f898 1000 	ldrb.w	r1, [r8]
   120b4:	f804 1b01 	strb.w	r1, [r4], #1
		memcpy(buf, s, size);
   120b8:	4639      	mov	r1, r7
   120ba:	4620      	mov	r0, r4
   120bc:	9201      	str	r2, [sp, #4]
   120be:	f014 fe2b 	bl	26d18 <memcpy>
		buf += size;
   120c2:	9a01      	ldr	r2, [sp, #4]
   120c4:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   120c6:	f108 0801 	add.w	r8, r8, #1
   120ca:	45c1      	cmp	r9, r8
   120cc:	d1d7      	bne.n	1207e <cbvprintf_package+0x412>
	return BUF_OFFSET;
   120ce:	1b60      	subs	r0, r4, r5
   120d0:	e710      	b.n	11ef4 <cbvprintf_package+0x288>
			size = 0;
   120d2:	2200      	movs	r2, #0
   120d4:	e7e6      	b.n	120a4 <cbvprintf_package+0x438>
		return -EFAULT;
   120d6:	f06f 000d 	mvn.w	r0, #13
   120da:	e70b      	b.n	11ef4 <cbvprintf_package+0x288>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   120dc:	2907      	cmp	r1, #7
   120de:	f63f ade1 	bhi.w	11ca4 <cbvprintf_package+0x38>
   120e2:	e705      	b.n	11ef0 <cbvprintf_package+0x284>

000120e4 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   120e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120e8:	b093      	sub	sp, #76	; 0x4c
   120ea:	4604      	mov	r4, r0
   120ec:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
   120f0:	9201      	str	r2, [sp, #4]
   120f2:	461f      	mov	r7, r3
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   120f4:	468b      	mov	fp, r1
   120f6:	b949      	cbnz	r1, 1210c <cbprintf_package_convert+0x28>
	buf += ros_nbr;
   120f8:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   120fa:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
   120fc:	7880      	ldrb	r0, [r0, #2]
   120fe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   12102:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
   12104:	45b3      	cmp	fp, r6
   12106:	d318      	bcc.n	1213a <cbprintf_package_convert+0x56>
	return (size_t)(uintptr_t)(buf - start);
   12108:	eba0 0b04 	sub.w	fp, r0, r4

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   1210c:	78a5      	ldrb	r5, [r4, #2]
   1210e:	9503      	str	r5, [sp, #12]
	ro_cpy = ros_nbr &&
   12110:	b1e5      	cbz	r5, 1214c <cbprintf_package_convert+0x68>
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
   12112:	f00a 0301 	and.w	r3, sl, #1

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   12116:	78e2      	ldrb	r2, [r4, #3]
   12118:	9202      	str	r2, [sp, #8]
	rw_cpy = rws_nbr > 0 &&
   1211a:	b112      	cbz	r2, 12122 <cbprintf_package_convert+0x3e>

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
   1211c:	f01a 0f02 	tst.w	sl, #2
   12120:	d116      	bne.n	12150 <cbprintf_package_convert+0x6c>
   12122:	b9ab      	cbnz	r3, 12150 <cbprintf_package_convert+0x6c>
		if (cb) {
   12124:	9b01      	ldr	r3, [sp, #4]
   12126:	b11b      	cbz	r3, 12130 <cbprintf_package_convert+0x4c>
			cb(in_packaged, in_len, ctx);
   12128:	463a      	mov	r2, r7
   1212a:	4659      	mov	r1, fp
   1212c:	4620      	mov	r0, r4
   1212e:	4798      	blx	r3
		}

		return in_len;
   12130:	465e      	mov	r6, fp

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   12132:	4630      	mov	r0, r6
   12134:	b013      	add	sp, #76	; 0x4c
   12136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   1213a:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
   1213c:	4628      	mov	r0, r5
   1213e:	f014 fd95 	bl	26c6c <strlen>
   12142:	3001      	adds	r0, #1
   12144:	4428      	add	r0, r5
	for (int i = 0; i < s_nbr; i++) {
   12146:	f10b 0b01 	add.w	fp, fp, #1
   1214a:	e7db      	b.n	12104 <cbprintf_package_convert+0x20>
	ro_cpy = ros_nbr &&
   1214c:	462b      	mov	r3, r5
   1214e:	e7e2      	b.n	12116 <cbprintf_package_convert+0x32>
	args_size = in_desc->len * sizeof(int);
   12150:	f894 9000 	ldrb.w	r9, [r4]
   12154:	ea4f 0289 	mov.w	r2, r9, lsl #2
   12158:	9204      	str	r2, [sp, #16]
	if (cb == NULL) {
   1215a:	9a01      	ldr	r2, [sp, #4]
	uint8_t *str_pos = &buf[args_size];
   1215c:	eb04 0989 	add.w	r9, r4, r9, lsl #2
	if (cb == NULL) {
   12160:	2a00      	cmp	r2, #0
   12162:	d15a      	bne.n	1221a <cbprintf_package_convert+0x136>
		out_len = (int)in_len;
   12164:	465e      	mov	r6, fp
		if (ro_cpy) {
   12166:	b393      	cbz	r3, 121ce <cbprintf_package_convert+0xea>
   12168:	444d      	add	r5, r9
	size_t strl_cnt = 0;
   1216a:	4617      	mov	r7, r2
			for (int i = 0; i < ros_nbr; i++) {
   1216c:	45a9      	cmp	r9, r5
   1216e:	d11c      	bne.n	121aa <cbprintf_package_convert+0xc6>
		bool drop_ro_str_pos = !(flags &
   12170:	f8dd 8008 	ldr.w	r8, [sp, #8]
   12174:	f8df c234 	ldr.w	ip, [pc, #564]	; 123ac <cbprintf_package_convert+0x2c8>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
   12178:	498d      	ldr	r1, [pc, #564]	; (123b0 <cbprintf_package_convert+0x2cc>)
		bool drop_ro_str_pos = !(flags &
   1217a:	f00a 0b05 	and.w	fp, sl, #5
		for (int i = 0; i < rws_nbr; i++) {
   1217e:	464d      	mov	r5, r9
   12180:	44c8      	add	r8, r9
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
   12182:	f00a 0202 	and.w	r2, sl, #2
		for (int i = 0; i < rws_nbr; i++) {
   12186:	45a8      	cmp	r8, r5
   12188:	d0d3      	beq.n	12132 <cbprintf_package_convert+0x4e>
			const char *str = *(const char **)&buf32[*str_pos];
   1218a:	f815 0b01 	ldrb.w	r0, [r5], #1
   1218e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   12192:	4560      	cmp	r0, ip
   12194:	d324      	bcc.n	121e0 <cbprintf_package_convert+0xfc>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
   12196:	4288      	cmp	r0, r1
   12198:	d222      	bcs.n	121e0 <cbprintf_package_convert+0xfc>
   1219a:	f01a 0f01 	tst.w	sl, #1
   1219e:	d139      	bne.n	12214 <cbprintf_package_convert+0x130>
			if (is_ro && drop_ro_str_pos) {
   121a0:	f1bb 0f00 	cmp.w	fp, #0
   121a4:	d1ef      	bne.n	12186 <cbprintf_package_convert+0xa2>
				out_len--;
   121a6:	3e01      	subs	r6, #1
		for (int i = 0; i < rws_nbr; i++) {
   121a8:	e7ed      	b.n	12186 <cbprintf_package_convert+0xa2>
				const char *str = *(const char **)&buf32[*str_pos];
   121aa:	f819 3b01 	ldrb.w	r3, [r9], #1
		return 1 + strlen(str);
   121ae:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   121b2:	f014 fd5b 	bl	26c6c <strlen>
				if (strl && strl_cnt < strl_len) {
   121b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
		return 1 + strlen(str);
   121b8:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   121ba:	b133      	cbz	r3, 121ca <cbprintf_package_convert+0xe6>
   121bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   121be:	429f      	cmp	r7, r3
					strl[strl_cnt++] = (uint16_t)len;
   121c0:	bf3e      	ittt	cc
   121c2:	9b1d      	ldrcc	r3, [sp, #116]	; 0x74
   121c4:	f823 0017 	strhcc.w	r0, [r3, r7, lsl #1]
   121c8:	3701      	addcc	r7, #1
				out_len += len;
   121ca:	4406      	add	r6, r0
			for (int i = 0; i < ros_nbr; i++) {
   121cc:	e7ce      	b.n	1216c <cbprintf_package_convert+0x88>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
   121ce:	b12d      	cbz	r5, 121dc <cbprintf_package_convert+0xf8>
   121d0:	f01a 0704 	ands.w	r7, sl, #4
   121d4:	d0cc      	beq.n	12170 <cbprintf_package_convert+0x8c>
				str_pos += ros_nbr;
   121d6:	44a9      	add	r9, r5
	size_t strl_cnt = 0;
   121d8:	461f      	mov	r7, r3
   121da:	e7c9      	b.n	12170 <cbprintf_package_convert+0x8c>
   121dc:	462f      	mov	r7, r5
   121de:	e7c7      	b.n	12170 <cbprintf_package_convert+0x8c>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
   121e0:	2a00      	cmp	r2, #0
   121e2:	d0d0      	beq.n	12186 <cbprintf_package_convert+0xa2>
   121e4:	f04f 0900 	mov.w	r9, #0
		return 1 + strlen(str);
   121e8:	9201      	str	r2, [sp, #4]
   121ea:	f014 fd3f 	bl	26c6c <strlen>
				if (strl && strl_cnt < strl_len) {
   121ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   121f0:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 123ac <cbprintf_package_convert+0x2c8>
   121f4:	9a01      	ldr	r2, [sp, #4]
   121f6:	496e      	ldr	r1, [pc, #440]	; (123b0 <cbprintf_package_convert+0x2cc>)
		return 1 + strlen(str);
   121f8:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   121fa:	b133      	cbz	r3, 1220a <cbprintf_package_convert+0x126>
   121fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   121fe:	429f      	cmp	r7, r3
					strl[strl_cnt++] = (uint16_t)len;
   12200:	bf3e      	ittt	cc
   12202:	9b1d      	ldrcc	r3, [sp, #116]	; 0x74
   12204:	f823 0017 	strhcc.w	r0, [r3, r7, lsl #1]
   12208:	3701      	addcc	r7, #1
				out_len += len;
   1220a:	4406      	add	r6, r0
			if (is_ro && drop_ro_str_pos) {
   1220c:	f1b9 0f00 	cmp.w	r9, #0
   12210:	d0b9      	beq.n	12186 <cbprintf_package_convert+0xa2>
   12212:	e7c5      	b.n	121a0 <cbprintf_package_convert+0xbc>
   12214:	f04f 0901 	mov.w	r9, #1
   12218:	e7e6      	b.n	121e8 <cbprintf_package_convert+0x104>
	if (ro_cpy) {
   1221a:	2b00      	cmp	r3, #0
   1221c:	f040 80b9 	bne.w	12392 <cbprintf_package_convert+0x2ae>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
   12220:	b125      	cbz	r5, 1222c <cbprintf_package_convert+0x148>
   12222:	f01a 0f04 	tst.w	sl, #4
   12226:	f040 80bc 	bne.w	123a2 <cbprintf_package_convert+0x2be>
		keep_cnt = 0;
   1222a:	461d      	mov	r5, r3
   1222c:	46a8      	mov	r8, r5
	str_pos += ros_nbr;
   1222e:	9b03      	ldr	r3, [sp, #12]
   12230:	4499      	add	r9, r3
	for (int i = 0; i < rws_nbr; i++) {
   12232:	9b02      	ldr	r3, [sp, #8]
   12234:	eb03 0c09 	add.w	ip, r3, r9
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
   12238:	f00a 0304 	and.w	r3, sl, #4
   1223c:	464a      	mov	r2, r9
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
   1223e:	f00a 0001 	and.w	r0, sl, #1
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
   12242:	f00a 0e02 	and.w	lr, sl, #2
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
   12246:	9305      	str	r3, [sp, #20]
	for (int i = 0; i < rws_nbr; i++) {
   12248:	4594      	cmp	ip, r2
   1224a:	d14f      	bne.n	122ec <cbprintf_package_convert+0x208>
   1224c:	9b02      	ldr	r3, [sp, #8]
   1224e:	444b      	add	r3, r9
   12250:	9306      	str	r3, [sp, #24]
	out_desc.len = in_desc->len;
   12252:	7823      	ldrb	r3, [r4, #0]
   12254:	9305      	str	r3, [sp, #20]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   12256:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
   12258:	f01a 0f02 	tst.w	sl, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   1225c:	eb03 0205 	add.w	r2, r3, r5
   12260:	b2d2      	uxtb	r2, r2
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
   12262:	bf0c      	ite	eq
   12264:	46c4      	moveq	ip, r8
   12266:	f04f 0c00 	movne.w	ip, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
   1226a:	2800      	cmp	r0, #0
   1226c:	d160      	bne.n	12330 <cbprintf_package_convert+0x24c>
   1226e:	f01a 0f04 	tst.w	sl, #4
   12272:	bf14      	ite	ne
   12274:	4641      	movne	r1, r8
   12276:	2100      	moveq	r1, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   12278:	f894 a002 	ldrb.w	sl, [r4, #2]
   1227c:	78e6      	ldrb	r6, [r4, #3]
   1227e:	9307      	str	r3, [sp, #28]
	*in_desc = out_desc;
   12280:	7062      	strb	r2, [r4, #1]
   12282:	70a1      	strb	r1, [r4, #2]
	rv = cb(in_packaged, args_size, ctx);
   12284:	9b01      	ldr	r3, [sp, #4]
   12286:	9904      	ldr	r1, [sp, #16]
	*in_desc = out_desc;
   12288:	f884 c003 	strb.w	ip, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   1228c:	463a      	mov	r2, r7
   1228e:	4620      	mov	r0, r4
   12290:	4798      	blx	r3
	if (rv < 0) {
   12292:	f1b0 0900 	subs.w	r9, r0, #0
   12296:	db78      	blt.n	1238a <cbprintf_package_convert+0x2a6>
	*in_desc = in_desc_backup;
   12298:	9b05      	ldr	r3, [sp, #20]
   1229a:	7023      	strb	r3, [r4, #0]
   1229c:	9b07      	ldr	r3, [sp, #28]
   1229e:	7063      	strb	r3, [r4, #1]
   122a0:	70e6      	strb	r6, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   122a2:	9b01      	ldr	r3, [sp, #4]
	*in_desc = in_desc_backup;
   122a4:	f884 a002 	strb.w	sl, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   122a8:	463a      	mov	r2, r7
   122aa:	4641      	mov	r1, r8
   122ac:	a80e      	add	r0, sp, #56	; 0x38
   122ae:	4798      	blx	r3
	if (rv < 0) {
   122b0:	1e06      	subs	r6, r0, #0
   122b2:	f6ff af3e 	blt.w	12132 <cbprintf_package_convert+0x4e>
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
   122b6:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   122ba:	4419      	add	r1, r3
   122bc:	9b04      	ldr	r3, [sp, #16]
	rv = cb(str_pos, strs_len, ctx);
   122be:	9806      	ldr	r0, [sp, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
   122c0:	4419      	add	r1, r3
	rv = cb(str_pos, strs_len, ctx);
   122c2:	463a      	mov	r2, r7
   122c4:	9b01      	ldr	r3, [sp, #4]
   122c6:	ebab 0101 	sub.w	r1, fp, r1
   122ca:	4798      	blx	r3
	if (rv < 0) {
   122cc:	2800      	cmp	r0, #0
   122ce:	db5e      	blt.n	1238e <cbprintf_package_convert+0x2aa>
	out_len += rv;
   122d0:	444e      	add	r6, r9
	out_len += rv;
   122d2:	4406      	add	r6, r0
	for (int i = 0; i < scpy_cnt; i++) {
   122d4:	f04f 0900 	mov.w	r9, #0
		uint8_t loc = cpy_str_pos[i];
   122d8:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
	for (int i = 0; i < scpy_cnt; i++) {
   122dc:	454d      	cmp	r5, r9
   122de:	dc29      	bgt.n	12334 <cbprintf_package_convert+0x250>
	(void)cb(NULL, 0, ctx);
   122e0:	2100      	movs	r1, #0
   122e2:	9b01      	ldr	r3, [sp, #4]
   122e4:	463a      	mov	r2, r7
   122e6:	4608      	mov	r0, r1
   122e8:	4798      	blx	r3
	return out_len;
   122ea:	e722      	b.n	12132 <cbprintf_package_convert+0x4e>
		const char *str = *(const char **)&buf32[*str_pos];
   122ec:	f812 3b01 	ldrb.w	r3, [r2], #1
   122f0:	4e2e      	ldr	r6, [pc, #184]	; (123ac <cbprintf_package_convert+0x2c8>)
   122f2:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
   122f6:	42b1      	cmp	r1, r6
   122f8:	d302      	bcc.n	12300 <cbprintf_package_convert+0x21c>
   122fa:	4e2d      	ldr	r6, [pc, #180]	; (123b0 <cbprintf_package_convert+0x2cc>)
   122fc:	42b1      	cmp	r1, r6
   122fe:	d30b      	bcc.n	12318 <cbprintf_package_convert+0x234>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
   12300:	f1be 0f00 	cmp.w	lr, #0
   12304:	d109      	bne.n	1231a <cbprintf_package_convert+0x236>
				keep_str_pos[keep_cnt++] = *str_pos;
   12306:	ae12      	add	r6, sp, #72	; 0x48
   12308:	f108 0101 	add.w	r1, r8, #1
   1230c:	44b0      	add	r8, r6
   1230e:	f808 3c10 	strb.w	r3, [r8, #-16]
   12312:	fa5f f881 	uxtb.w	r8, r1
	for (int i = 0; i < rws_nbr; i++) {
   12316:	e797      	b.n	12248 <cbprintf_package_convert+0x164>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
   12318:	b130      	cbz	r0, 12328 <cbprintf_package_convert+0x244>
				cpy_str_pos[scpy_cnt++] = *str_pos;
   1231a:	ae12      	add	r6, sp, #72	; 0x48
   1231c:	1c69      	adds	r1, r5, #1
   1231e:	4435      	add	r5, r6
   12320:	f805 3c20 	strb.w	r3, [r5, #-32]
   12324:	b2cd      	uxtb	r5, r1
   12326:	e78f      	b.n	12248 <cbprintf_package_convert+0x164>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
   12328:	9905      	ldr	r1, [sp, #20]
   1232a:	2900      	cmp	r1, #0
   1232c:	d08c      	beq.n	12248 <cbprintf_package_convert+0x164>
   1232e:	e7ea      	b.n	12306 <cbprintf_package_convert+0x222>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
   12330:	2100      	movs	r1, #0
   12332:	e7a1      	b.n	12278 <cbprintf_package_convert+0x194>
		uint8_t loc = cpy_str_pos[i];
   12334:	f819 300b 	ldrb.w	r3, [r9, fp]
   12338:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		const char *str = *(const char **)&buf32[loc];
   1233c:	f854 a023 	ldr.w	sl, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   12340:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   12342:	b1fb      	cbz	r3, 12384 <cbprintf_package_convert+0x2a0>
   12344:	f833 8019 	ldrh.w	r8, [r3, r9, lsl #1]
		rv = cb(&loc, 1, ctx);
   12348:	9b01      	ldr	r3, [sp, #4]
   1234a:	463a      	mov	r2, r7
   1234c:	2101      	movs	r1, #1
   1234e:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   12352:	4798      	blx	r3
		if (rv < 0) {
   12354:	2800      	cmp	r0, #0
   12356:	db1a      	blt.n	1238e <cbprintf_package_convert+0x2aa>
		out_len += rv;
   12358:	4406      	add	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   1235a:	f1b8 0f00 	cmp.w	r8, #0
   1235e:	d106      	bne.n	1236e <cbprintf_package_convert+0x28a>
   12360:	4650      	mov	r0, sl
   12362:	f014 fc83 	bl	26c6c <strlen>
   12366:	f100 0801 	add.w	r8, r0, #1
   1236a:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   1236e:	9b01      	ldr	r3, [sp, #4]
   12370:	463a      	mov	r2, r7
   12372:	4641      	mov	r1, r8
   12374:	4650      	mov	r0, sl
   12376:	4798      	blx	r3
		if (rv < 0) {
   12378:	2800      	cmp	r0, #0
   1237a:	db08      	blt.n	1238e <cbprintf_package_convert+0x2aa>
		out_len += rv;
   1237c:	4406      	add	r6, r0
	for (int i = 0; i < scpy_cnt; i++) {
   1237e:	f109 0901 	add.w	r9, r9, #1
   12382:	e7ab      	b.n	122dc <cbprintf_package_convert+0x1f8>
		uint16_t str_len = strl ? strl[i] : 0;
   12384:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   12388:	e7de      	b.n	12348 <cbprintf_package_convert+0x264>
   1238a:	464e      	mov	r6, r9
   1238c:	e6d1      	b.n	12132 <cbprintf_package_convert+0x4e>
   1238e:	4606      	mov	r6, r0
   12390:	e6cf      	b.n	12132 <cbprintf_package_convert+0x4e>
		dst = cpy_str_pos;
   12392:	a80a      	add	r0, sp, #40	; 0x28
		keep_cnt = 0;
   12394:	f04f 0800 	mov.w	r8, #0
		memcpy(dst, str_pos, ros_nbr);
   12398:	9a03      	ldr	r2, [sp, #12]
   1239a:	4649      	mov	r1, r9
   1239c:	f014 fcbc 	bl	26d18 <memcpy>
   123a0:	e745      	b.n	1222e <cbprintf_package_convert+0x14a>
   123a2:	46a8      	mov	r8, r5
		dst = keep_str_pos;
   123a4:	a80e      	add	r0, sp, #56	; 0x38
		scpy_cnt = 0;
   123a6:	461d      	mov	r5, r3
   123a8:	e7f6      	b.n	12398 <cbprintf_package_convert+0x2b4>
   123aa:	bf00      	nop
   123ac:	0002a798 	.word	0x0002a798
   123b0:	0002e38c 	.word	0x0002e38c

000123b4 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   123b4:	4b01      	ldr	r3, [pc, #4]	; (123bc <__printk_hook_install+0x8>)
   123b6:	6018      	str	r0, [r3, #0]
}
   123b8:	4770      	bx	lr
   123ba:	bf00      	nop
   123bc:	20000538 	.word	0x20000538

000123c0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   123c0:	b530      	push	{r4, r5, lr}
   123c2:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   123c4:	2500      	movs	r5, #0
   123c6:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   123ca:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   123cc:	9500      	str	r5, [sp, #0]
   123ce:	a903      	add	r1, sp, #12
   123d0:	4805      	ldr	r0, [pc, #20]	; (123e8 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   123d2:	9505      	str	r5, [sp, #20]
   123d4:	f000 f8ea 	bl	125ac <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   123d8:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   123dc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   123de:	bfb8      	it	lt
   123e0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   123e2:	b007      	add	sp, #28
   123e4:	bd30      	pop	{r4, r5, pc}
   123e6:	bf00      	nop
   123e8:	00025aaf 	.word	0x00025aaf

000123ec <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   123ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   123f0:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   123f4:	f019 0808 	ands.w	r8, r9, #8
{
   123f8:	4604      	mov	r4, r0
   123fa:	4693      	mov	fp, r2
	if (processing) {
   123fc:	d00d      	beq.n	1241a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   123fe:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   12400:	bf0c      	ite	eq
   12402:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   12406:	f049 0920 	orrne.w	r9, r9, #32
   1240a:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1240e:	f38b 8811 	msr	BASEPRI, fp
   12412:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   12416:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1241a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   1241e:	2902      	cmp	r1, #2
   12420:	d107      	bne.n	12432 <process_event+0x46>
			evt = process_recheck(mgr);
   12422:	4620      	mov	r0, r4
   12424:	f013 fb72 	bl	25b0c <process_recheck>
		if (evt == EVT_NOP) {
   12428:	2800      	cmp	r0, #0
   1242a:	d0f0      	beq.n	1240e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   1242c:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1242e:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
   12430:	d14e      	bne.n	124d0 <process_event+0xe4>
			res = mgr->last_res;
   12432:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12434:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   12436:	2f00      	cmp	r7, #0
   12438:	da15      	bge.n	12466 <process_event+0x7a>
		*clients = mgr->clients;
   1243a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1243c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   12440:	e9c4 8800 	strd	r8, r8, [r4]
   12444:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12448:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   1244a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1244c:	8b21      	ldrh	r1, [r4, #24]
   1244e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12452:	45ca      	cmp	sl, r9
   12454:	d002      	beq.n	1245c <process_event+0x70>
		if (do_monitors
   12456:	68a3      	ldr	r3, [r4, #8]
   12458:	2b00      	cmp	r3, #0
   1245a:	d15a      	bne.n	12512 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
   1245c:	b90d      	cbnz	r5, 12462 <process_event+0x76>
		    || (transit != NULL)) {
   1245e:	2e00      	cmp	r6, #0
   12460:	d071      	beq.n	12546 <process_event+0x15a>
   12462:	2300      	movs	r3, #0
   12464:	e056      	b.n	12514 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12466:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1246a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1246c:	2a01      	cmp	r2, #1
   1246e:	d81e      	bhi.n	124ae <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12470:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   12474:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   12476:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12478:	b289      	uxth	r1, r1
   1247a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   1247e:	d10a      	bne.n	12496 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12480:	b13d      	cbz	r5, 12492 <process_event+0xa6>
   12482:	8b63      	ldrh	r3, [r4, #26]
   12484:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   12486:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
   12488:	3301      	adds	r3, #1
   1248a:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1248c:	2a00      	cmp	r2, #0
   1248e:	d1fa      	bne.n	12486 <process_event+0x9a>
   12490:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12492:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   12496:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   12498:	4620      	mov	r0, r4
   1249a:	f013 fb37 	bl	25b0c <process_recheck>
   1249e:	4606      	mov	r6, r0
   124a0:	2800      	cmp	r0, #0
   124a2:	d0d3      	beq.n	1244c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   124a4:	8b23      	ldrh	r3, [r4, #24]
   124a6:	f043 0320 	orr.w	r3, r3, #32
   124aa:	8323      	strh	r3, [r4, #24]
   124ac:	e7cd      	b.n	1244a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   124ae:	2b04      	cmp	r3, #4
   124b0:	d10c      	bne.n	124cc <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   124b2:	f021 0107 	bic.w	r1, r1, #7
   124b6:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   124b8:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   124ba:	4620      	mov	r0, r4
   124bc:	f013 fb26 	bl	25b0c <process_recheck>
   124c0:	4605      	mov	r5, r0
   124c2:	2800      	cmp	r0, #0
   124c4:	d0c1      	beq.n	1244a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   124c6:	f041 0120 	orr.w	r1, r1, #32
   124ca:	8321      	strh	r1, [r4, #24]
   124cc:	2500      	movs	r5, #0
   124ce:	e7bc      	b.n	1244a <process_event+0x5e>
		} else if (evt == EVT_START) {
   124d0:	2803      	cmp	r0, #3
   124d2:	d109      	bne.n	124e8 <process_event+0xfc>
			transit = mgr->transitions->start;
   124d4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   124d6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   124da:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   124dc:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   124e0:	8323      	strh	r3, [r4, #24]
}
   124e2:	2500      	movs	r5, #0
		res = 0;
   124e4:	462f      	mov	r7, r5
   124e6:	e7b1      	b.n	1244c <process_event+0x60>
		} else if (evt == EVT_STOP) {
   124e8:	2804      	cmp	r0, #4
   124ea:	d106      	bne.n	124fa <process_event+0x10e>
			transit = mgr->transitions->stop;
   124ec:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   124ee:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   124f2:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   124f4:	f043 0304 	orr.w	r3, r3, #4
   124f8:	e7f2      	b.n	124e0 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
   124fa:	2805      	cmp	r0, #5
   124fc:	d106      	bne.n	1250c <process_event+0x120>
			transit = mgr->transitions->reset;
   124fe:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12500:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   12504:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12506:	f043 0305 	orr.w	r3, r3, #5
   1250a:	e7e9      	b.n	124e0 <process_event+0xf4>
   1250c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   1250e:	462e      	mov	r6, r5
   12510:	e7e8      	b.n	124e4 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
   12512:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   12514:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   12518:	8321      	strh	r1, [r4, #24]
   1251a:	f38b 8811 	msr	BASEPRI, fp
   1251e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   12522:	b9fb      	cbnz	r3, 12564 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
   12524:	bb85      	cbnz	r5, 12588 <process_event+0x19c>
			if (transit != NULL) {
   12526:	b116      	cbz	r6, 1252e <process_event+0x142>
				transit(mgr, transition_complete);
   12528:	491f      	ldr	r1, [pc, #124]	; (125a8 <process_event+0x1bc>)
   1252a:	4620      	mov	r0, r4
   1252c:	47b0      	blx	r6
	__asm__ volatile(
   1252e:	f04f 0340 	mov.w	r3, #64	; 0x40
   12532:	f3ef 8b11 	mrs	fp, BASEPRI
   12536:	f383 8812 	msr	BASEPRI_MAX, r3
   1253a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   1253e:	8b23      	ldrh	r3, [r4, #24]
   12540:	f023 0308 	bic.w	r3, r3, #8
   12544:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   12546:	8b23      	ldrh	r3, [r4, #24]
   12548:	06da      	lsls	r2, r3, #27
   1254a:	d525      	bpl.n	12598 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1254c:	f023 0310 	bic.w	r3, r3, #16
   12550:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   12552:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   12554:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   12558:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   1255c:	2900      	cmp	r1, #0
   1255e:	f47f af5e 	bne.w	1241e <process_event+0x32>
out:
   12562:	e754      	b.n	1240e <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   12564:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12566:	2900      	cmp	r1, #0
   12568:	d0dc      	beq.n	12524 <process_event+0x138>
	return node->next;
   1256a:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   1256e:	f8d1 b004 	ldr.w	fp, [r1, #4]
   12572:	463b      	mov	r3, r7
   12574:	4652      	mov	r2, sl
   12576:	4620      	mov	r0, r4
   12578:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1257a:	f1b9 0f00 	cmp.w	r9, #0
   1257e:	d0d1      	beq.n	12524 <process_event+0x138>
   12580:	4649      	mov	r1, r9
   12582:	f8d9 9000 	ldr.w	r9, [r9]
   12586:	e7f2      	b.n	1256e <process_event+0x182>
   12588:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   1258a:	463b      	mov	r3, r7
   1258c:	4652      	mov	r2, sl
   1258e:	4620      	mov	r0, r4
   12590:	682d      	ldr	r5, [r5, #0]
   12592:	f013 fad7 	bl	25b44 <notify_one>
   12596:	e7c5      	b.n	12524 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   12598:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1259c:	bf1e      	ittt	ne
   1259e:	f023 0320 	bicne.w	r3, r3, #32
   125a2:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   125a4:	2102      	movne	r1, #2
   125a6:	e7d5      	b.n	12554 <process_event+0x168>
   125a8:	00025b71 	.word	0x00025b71

000125ac <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   125ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125b0:	b091      	sub	sp, #68	; 0x44
   125b2:	468b      	mov	fp, r1
   125b4:	9002      	str	r0, [sp, #8]
   125b6:	4692      	mov	sl, r2
   125b8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   125ba:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   125bc:	f89a 0000 	ldrb.w	r0, [sl]
   125c0:	b908      	cbnz	r0, 125c6 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   125c2:	4628      	mov	r0, r5
   125c4:	e363      	b.n	12c8e <z_cbvprintf_impl+0x6e2>
		if (*fp != '%') {
   125c6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   125c8:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
   125cc:	d007      	beq.n	125de <z_cbvprintf_impl+0x32>
			OUTC('%');
   125ce:	9b02      	ldr	r3, [sp, #8]
   125d0:	4659      	mov	r1, fp
   125d2:	4798      	blx	r3
   125d4:	2800      	cmp	r0, #0
   125d6:	f2c0 835a 	blt.w	12c8e <z_cbvprintf_impl+0x6e2>
   125da:	3501      	adds	r5, #1
			break;
   125dc:	e212      	b.n	12a04 <z_cbvprintf_impl+0x458>
		} state = {
   125de:	2218      	movs	r2, #24
   125e0:	2100      	movs	r1, #0
   125e2:	a80a      	add	r0, sp, #40	; 0x28
   125e4:	f014 fba3 	bl	26d2e <memset>
	if (*sp == '%') {
   125e8:	f89a 3001 	ldrb.w	r3, [sl, #1]
   125ec:	2b25      	cmp	r3, #37	; 0x25
   125ee:	d078      	beq.n	126e2 <z_cbvprintf_impl+0x136>
   125f0:	2200      	movs	r2, #0
   125f2:	4610      	mov	r0, r2
   125f4:	4696      	mov	lr, r2
   125f6:	4694      	mov	ip, r2
   125f8:	4616      	mov	r6, r2
   125fa:	4639      	mov	r1, r7
		switch (*sp) {
   125fc:	f817 3b01 	ldrb.w	r3, [r7], #1
   12600:	2b2b      	cmp	r3, #43	; 0x2b
   12602:	f000 809d 	beq.w	12740 <z_cbvprintf_impl+0x194>
   12606:	f200 8094 	bhi.w	12732 <z_cbvprintf_impl+0x186>
   1260a:	2b20      	cmp	r3, #32
   1260c:	f000 809b 	beq.w	12746 <z_cbvprintf_impl+0x19a>
   12610:	2b23      	cmp	r3, #35	; 0x23
   12612:	f000 809b 	beq.w	1274c <z_cbvprintf_impl+0x1a0>
   12616:	b12e      	cbz	r6, 12624 <z_cbvprintf_impl+0x78>
   12618:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   1261c:	f046 0604 	orr.w	r6, r6, #4
   12620:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   12624:	f1bc 0f00 	cmp.w	ip, #0
   12628:	d005      	beq.n	12636 <z_cbvprintf_impl+0x8a>
   1262a:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   1262e:	f046 0608 	orr.w	r6, r6, #8
   12632:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   12636:	f1be 0f00 	cmp.w	lr, #0
   1263a:	d005      	beq.n	12648 <z_cbvprintf_impl+0x9c>
   1263c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   12640:	f046 0610 	orr.w	r6, r6, #16
   12644:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   12648:	b128      	cbz	r0, 12656 <z_cbvprintf_impl+0xaa>
   1264a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1264e:	f040 0020 	orr.w	r0, r0, #32
   12652:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   12656:	b12a      	cbz	r2, 12664 <z_cbvprintf_impl+0xb8>
   12658:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   1265c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   12660:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   12664:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12668:	f002 0044 	and.w	r0, r2, #68	; 0x44
   1266c:	2844      	cmp	r0, #68	; 0x44
   1266e:	d103      	bne.n	12678 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   12670:	f36f 1286 	bfc	r2, #6, #1
   12674:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   12678:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   1267c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   1267e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   12682:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   12686:	d17b      	bne.n	12780 <z_cbvprintf_impl+0x1d4>
		conv->width_star = true;
   12688:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1268c:	f042 0201 	orr.w	r2, r2, #1
			++sp;
   12690:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   12692:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   12696:	781a      	ldrb	r2, [r3, #0]
   12698:	2a2e      	cmp	r2, #46	; 0x2e
   1269a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1269e:	bf0c      	ite	eq
   126a0:	2101      	moveq	r1, #1
   126a2:	2100      	movne	r1, #0
   126a4:	f361 0241 	bfi	r2, r1, #1, #1
   126a8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   126ac:	d174      	bne.n	12798 <z_cbvprintf_impl+0x1ec>
	if (*sp == '*') {
   126ae:	785a      	ldrb	r2, [r3, #1]
   126b0:	2a2a      	cmp	r2, #42	; 0x2a
   126b2:	d06a      	beq.n	1278a <z_cbvprintf_impl+0x1de>
	++sp;
   126b4:	3301      	adds	r3, #1
	size_t val = 0;
   126b6:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   126b8:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   126ba:	4618      	mov	r0, r3
   126bc:	f810 2b01 	ldrb.w	r2, [r0], #1
   126c0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   126c4:	2f09      	cmp	r7, #9
   126c6:	f240 808e 	bls.w	127e6 <z_cbvprintf_impl+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   126ca:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   126ce:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   126d0:	f3c2 0040 	ubfx	r0, r2, #1, #1
   126d4:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   126d8:	f361 0241 	bfi	r2, r1, #1, #1
   126dc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   126e0:	e05a      	b.n	12798 <z_cbvprintf_impl+0x1ec>
		conv->specifier = *sp++;
   126e2:	f10a 0702 	add.w	r7, sl, #2
   126e6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   126ea:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   126ee:	07d9      	lsls	r1, r3, #31
   126f0:	f140 8149 	bpl.w	12986 <z_cbvprintf_impl+0x3da>
			width = va_arg(ap, int);
   126f4:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   126f8:	f1b9 0f00 	cmp.w	r9, #0
   126fc:	da07      	bge.n	1270e <z_cbvprintf_impl+0x162>
				conv->flag_dash = true;
   126fe:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12702:	f042 0204 	orr.w	r2, r2, #4
   12706:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
   1270a:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   1270e:	075a      	lsls	r2, r3, #29
   12710:	f140 8142 	bpl.w	12998 <z_cbvprintf_impl+0x3ec>
			int arg = va_arg(ap, int);
   12714:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   12718:	f1b8 0f00 	cmp.w	r8, #0
   1271c:	f280 8141 	bge.w	129a2 <z_cbvprintf_impl+0x3f6>
				conv->prec_present = false;
   12720:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12724:	f36f 0341 	bfc	r3, #1, #1
   12728:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   1272c:	f04f 38ff 	mov.w	r8, #4294967295
   12730:	e137      	b.n	129a2 <z_cbvprintf_impl+0x3f6>
		switch (*sp) {
   12732:	2b2d      	cmp	r3, #45	; 0x2d
   12734:	d00c      	beq.n	12750 <z_cbvprintf_impl+0x1a4>
   12736:	2b30      	cmp	r3, #48	; 0x30
   12738:	f47f af6d 	bne.w	12616 <z_cbvprintf_impl+0x6a>
			conv->flag_zero = true;
   1273c:	2201      	movs	r2, #1
	} while (loop);
   1273e:	e75c      	b.n	125fa <z_cbvprintf_impl+0x4e>
			conv->flag_plus = true;
   12740:	f04f 0c01 	mov.w	ip, #1
   12744:	e759      	b.n	125fa <z_cbvprintf_impl+0x4e>
			conv->flag_space = true;
   12746:	f04f 0e01 	mov.w	lr, #1
   1274a:	e756      	b.n	125fa <z_cbvprintf_impl+0x4e>
			conv->flag_hash = true;
   1274c:	2001      	movs	r0, #1
   1274e:	e754      	b.n	125fa <z_cbvprintf_impl+0x4e>
		switch (*sp) {
   12750:	2601      	movs	r6, #1
   12752:	e752      	b.n	125fa <z_cbvprintf_impl+0x4e>
		val = 10U * val + *sp++ - '0';
   12754:	fb0c 0202 	mla	r2, ip, r2, r0
   12758:	3a30      	subs	r2, #48	; 0x30
   1275a:	4633      	mov	r3, r6
   1275c:	461e      	mov	r6, r3
   1275e:	f816 0b01 	ldrb.w	r0, [r6], #1
   12762:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   12766:	2f09      	cmp	r7, #9
   12768:	d9f4      	bls.n	12754 <z_cbvprintf_impl+0x1a8>
	if (sp != wp) {
   1276a:	4299      	cmp	r1, r3
   1276c:	d093      	beq.n	12696 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   1276e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   12772:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   12774:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   12776:	f362 0141 	bfi	r1, r2, #1, #1
   1277a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   1277e:	e78a      	b.n	12696 <z_cbvprintf_impl+0xea>
   12780:	460b      	mov	r3, r1
	size_t val = 0;
   12782:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12784:	f04f 0c0a 	mov.w	ip, #10
   12788:	e7e8      	b.n	1275c <z_cbvprintf_impl+0x1b0>
		conv->prec_star = true;
   1278a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1278e:	f042 0204 	orr.w	r2, r2, #4
   12792:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   12796:	3302      	adds	r3, #2
	switch (*sp) {
   12798:	461f      	mov	r7, r3
   1279a:	f817 2b01 	ldrb.w	r2, [r7], #1
   1279e:	2a6c      	cmp	r2, #108	; 0x6c
   127a0:	d041      	beq.n	12826 <z_cbvprintf_impl+0x27a>
   127a2:	d825      	bhi.n	127f0 <z_cbvprintf_impl+0x244>
   127a4:	2a68      	cmp	r2, #104	; 0x68
   127a6:	d02b      	beq.n	12800 <z_cbvprintf_impl+0x254>
   127a8:	2a6a      	cmp	r2, #106	; 0x6a
   127aa:	d046      	beq.n	1283a <z_cbvprintf_impl+0x28e>
   127ac:	2a4c      	cmp	r2, #76	; 0x4c
   127ae:	d04c      	beq.n	1284a <z_cbvprintf_impl+0x29e>
   127b0:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   127b2:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   127b6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
   127ba:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   127be:	2a78      	cmp	r2, #120	; 0x78
   127c0:	f200 80d9 	bhi.w	12976 <z_cbvprintf_impl+0x3ca>
   127c4:	2a57      	cmp	r2, #87	; 0x57
   127c6:	d84d      	bhi.n	12864 <z_cbvprintf_impl+0x2b8>
   127c8:	2a41      	cmp	r2, #65	; 0x41
   127ca:	d003      	beq.n	127d4 <z_cbvprintf_impl+0x228>
   127cc:	3a45      	subs	r2, #69	; 0x45
   127ce:	2a02      	cmp	r2, #2
   127d0:	f200 80d1 	bhi.w	12976 <z_cbvprintf_impl+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   127d4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   127d8:	2204      	movs	r2, #4
   127da:	f362 0302 	bfi	r3, r2, #0, #3
   127de:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   127e2:	2301      	movs	r3, #1
			break;
   127e4:	e09e      	b.n	12924 <z_cbvprintf_impl+0x378>
		val = 10U * val + *sp++ - '0';
   127e6:	fb06 2101 	mla	r1, r6, r1, r2
   127ea:	3930      	subs	r1, #48	; 0x30
   127ec:	4603      	mov	r3, r0
   127ee:	e764      	b.n	126ba <z_cbvprintf_impl+0x10e>
	switch (*sp) {
   127f0:	2a74      	cmp	r2, #116	; 0x74
   127f2:	d026      	beq.n	12842 <z_cbvprintf_impl+0x296>
   127f4:	2a7a      	cmp	r2, #122	; 0x7a
   127f6:	d1db      	bne.n	127b0 <z_cbvprintf_impl+0x204>
		conv->length_mod = LENGTH_Z;
   127f8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   127fc:	2206      	movs	r2, #6
   127fe:	e00d      	b.n	1281c <z_cbvprintf_impl+0x270>
		if (*++sp == 'h') {
   12800:	785a      	ldrb	r2, [r3, #1]
   12802:	2a68      	cmp	r2, #104	; 0x68
   12804:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12808:	d106      	bne.n	12818 <z_cbvprintf_impl+0x26c>
			conv->length_mod = LENGTH_HH;
   1280a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1280c:	f361 02c6 	bfi	r2, r1, #3, #4
   12810:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   12814:	1c9f      	adds	r7, r3, #2
   12816:	e7cc      	b.n	127b2 <z_cbvprintf_impl+0x206>
			conv->length_mod = LENGTH_H;
   12818:	4613      	mov	r3, r2
   1281a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   1281c:	f362 03c6 	bfi	r3, r2, #3, #4
   12820:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   12824:	e7c5      	b.n	127b2 <z_cbvprintf_impl+0x206>
		if (*++sp == 'l') {
   12826:	785a      	ldrb	r2, [r3, #1]
   12828:	2a6c      	cmp	r2, #108	; 0x6c
   1282a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1282e:	d101      	bne.n	12834 <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_LL;
   12830:	2104      	movs	r1, #4
   12832:	e7eb      	b.n	1280c <z_cbvprintf_impl+0x260>
			conv->length_mod = LENGTH_L;
   12834:	4613      	mov	r3, r2
   12836:	2203      	movs	r2, #3
   12838:	e7f0      	b.n	1281c <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_J;
   1283a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1283e:	2205      	movs	r2, #5
   12840:	e7ec      	b.n	1281c <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_T;
   12842:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12846:	2207      	movs	r2, #7
   12848:	e7e8      	b.n	1281c <z_cbvprintf_impl+0x270>
		conv->unsupported = true;
   1284a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1284e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   12852:	f023 0302 	bic.w	r3, r3, #2
   12856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1285a:	f043 0302 	orr.w	r3, r3, #2
   1285e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   12862:	e7a6      	b.n	127b2 <z_cbvprintf_impl+0x206>
	switch (conv->specifier) {
   12864:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   12868:	2920      	cmp	r1, #32
   1286a:	f200 8084 	bhi.w	12976 <z_cbvprintf_impl+0x3ca>
   1286e:	a001      	add	r0, pc, #4	; (adr r0, 12874 <z_cbvprintf_impl+0x2c8>)
   12870:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   12874:	00012939 	.word	0x00012939
   12878:	00012977 	.word	0x00012977
   1287c:	00012977 	.word	0x00012977
   12880:	00012977 	.word	0x00012977
   12884:	00012977 	.word	0x00012977
   12888:	00012977 	.word	0x00012977
   1288c:	00012977 	.word	0x00012977
   12890:	00012977 	.word	0x00012977
   12894:	00012977 	.word	0x00012977
   12898:	000127d5 	.word	0x000127d5
   1289c:	00012977 	.word	0x00012977
   128a0:	00012939 	.word	0x00012939
   128a4:	000128f9 	.word	0x000128f9
   128a8:	000127d5 	.word	0x000127d5
   128ac:	000127d5 	.word	0x000127d5
   128b0:	000127d5 	.word	0x000127d5
   128b4:	00012977 	.word	0x00012977
   128b8:	000128f9 	.word	0x000128f9
   128bc:	00012977 	.word	0x00012977
   128c0:	00012977 	.word	0x00012977
   128c4:	00012977 	.word	0x00012977
   128c8:	00012977 	.word	0x00012977
   128cc:	00012941 	.word	0x00012941
   128d0:	00012939 	.word	0x00012939
   128d4:	0001295d 	.word	0x0001295d
   128d8:	00012977 	.word	0x00012977
   128dc:	00012977 	.word	0x00012977
   128e0:	0001295d 	.word	0x0001295d
   128e4:	00012977 	.word	0x00012977
   128e8:	00012939 	.word	0x00012939
   128ec:	00012977 	.word	0x00012977
   128f0:	00012977 	.word	0x00012977
   128f4:	00012939 	.word	0x00012939
		conv->specifier_cat = SPECIFIER_SINT;
   128f8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   128fc:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   128fe:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   12902:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12906:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   12908:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   1290c:	bf02      	ittt	eq
   1290e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   12912:	f041 0101 	orreq.w	r1, r1, #1
   12916:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   1291a:	2a63      	cmp	r2, #99	; 0x63
   1291c:	d131      	bne.n	12982 <z_cbvprintf_impl+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1291e:	3b00      	subs	r3, #0
   12920:	bf18      	it	ne
   12922:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   12924:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12928:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1292c:	430b      	orrs	r3, r1
   1292e:	f363 0241 	bfi	r2, r3, #1, #1
   12932:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   12936:	e6d8      	b.n	126ea <z_cbvprintf_impl+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   12938:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   1293c:	2002      	movs	r0, #2
   1293e:	e7de      	b.n	128fe <z_cbvprintf_impl+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   12940:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   12944:	f003 0378 	and.w	r3, r3, #120	; 0x78
   12948:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   1294c:	2103      	movs	r1, #3
   1294e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12952:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   12954:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   12958:	4143      	adcs	r3, r0
   1295a:	e7e3      	b.n	12924 <z_cbvprintf_impl+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   1295c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   12960:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   12962:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   12966:	f361 0202 	bfi	r2, r1, #0, #3
   1296a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   1296e:	bf14      	ite	ne
   12970:	2301      	movne	r3, #1
   12972:	2300      	moveq	r3, #0
   12974:	e7d6      	b.n	12924 <z_cbvprintf_impl+0x378>
		conv->invalid = true;
   12976:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1297a:	f043 0301 	orr.w	r3, r3, #1
   1297e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   12982:	2300      	movs	r3, #0
   12984:	e7ce      	b.n	12924 <z_cbvprintf_impl+0x378>
		} else if (conv->width_present) {
   12986:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   1298a:	2a00      	cmp	r2, #0
			width = conv->width_value;
   1298c:	bfb4      	ite	lt
   1298e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   12992:	f04f 39ff 	movge.w	r9, #4294967295
   12996:	e6ba      	b.n	1270e <z_cbvprintf_impl+0x162>
		} else if (conv->prec_present) {
   12998:	079b      	lsls	r3, r3, #30
   1299a:	f57f aec7 	bpl.w	1272c <z_cbvprintf_impl+0x180>
			precision = conv->prec_value;
   1299e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   129a2:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   129a6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   129a8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   129ac:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   129b0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   129b4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   129b6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   129ba:	d135      	bne.n	12a28 <z_cbvprintf_impl+0x47c>
			switch (length_mod) {
   129bc:	1ecb      	subs	r3, r1, #3
   129be:	2b04      	cmp	r3, #4
   129c0:	d822      	bhi.n	12a08 <z_cbvprintf_impl+0x45c>
   129c2:	e8df f003 	tbb	[pc, r3]
   129c6:	0903      	.short	0x0903
   129c8:	2109      	.short	0x2109
   129ca:	21          	.byte	0x21
   129cb:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   129cc:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   129d0:	17da      	asrs	r2, r3, #31
   129d2:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
   129d6:	e006      	b.n	129e6 <z_cbvprintf_impl+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
   129d8:	3407      	adds	r4, #7
   129da:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   129de:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   129e2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   129e6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   129ea:	f013 0603 	ands.w	r6, r3, #3
   129ee:	d059      	beq.n	12aa4 <z_cbvprintf_impl+0x4f8>
			OUTS(sp, fp);
   129f0:	9802      	ldr	r0, [sp, #8]
   129f2:	463b      	mov	r3, r7
   129f4:	4652      	mov	r2, sl
   129f6:	4659      	mov	r1, fp
   129f8:	f013 fb49 	bl	2608e <outs>
   129fc:	2800      	cmp	r0, #0
   129fe:	f2c0 8146 	blt.w	12c8e <z_cbvprintf_impl+0x6e2>
   12a02:	4405      	add	r5, r0
			continue;
   12a04:	46ba      	mov	sl, r7
   12a06:	e5d9      	b.n	125bc <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12a08:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   12a0c:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12a0e:	ea4f 72e3 	mov.w	r2, r3, asr #31
   12a12:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   12a16:	d102      	bne.n	12a1e <z_cbvprintf_impl+0x472>
				value->sint = (signed char)value->sint;
   12a18:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
   12a1c:	e7d8      	b.n	129d0 <z_cbvprintf_impl+0x424>
			} else if (length_mod == LENGTH_H) {
   12a1e:	2902      	cmp	r1, #2
   12a20:	d1e1      	bne.n	129e6 <z_cbvprintf_impl+0x43a>
				value->sint = (short)value->sint;
   12a22:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   12a26:	e7d3      	b.n	129d0 <z_cbvprintf_impl+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   12a28:	2b02      	cmp	r3, #2
   12a2a:	d129      	bne.n	12a80 <z_cbvprintf_impl+0x4d4>
			switch (length_mod) {
   12a2c:	1ecb      	subs	r3, r1, #3
   12a2e:	2b04      	cmp	r3, #4
   12a30:	d813      	bhi.n	12a5a <z_cbvprintf_impl+0x4ae>
   12a32:	e8df f003 	tbb	[pc, r3]
   12a36:	0a03      	.short	0x0a03
   12a38:	120a      	.short	0x120a
   12a3a:	12          	.byte	0x12
   12a3b:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   12a3c:	6822      	ldr	r2, [r4, #0]
   12a3e:	920a      	str	r2, [sp, #40]	; 0x28
   12a40:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
   12a42:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   12a44:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   12a46:	4604      	mov	r4, r0
   12a48:	e7cd      	b.n	129e6 <z_cbvprintf_impl+0x43a>
					(uint_value_type)va_arg(ap,
   12a4a:	1de0      	adds	r0, r4, #7
   12a4c:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
   12a50:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   12a54:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   12a58:	e7f5      	b.n	12a46 <z_cbvprintf_impl+0x49a>
					(uint_value_type)va_arg(ap, size_t);
   12a5a:	f854 3b04 	ldr.w	r3, [r4], #4
   12a5e:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   12a60:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   12a62:	f04f 0300 	mov.w	r3, #0
   12a66:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   12a68:	d105      	bne.n	12a76 <z_cbvprintf_impl+0x4ca>
				value->uint = (unsigned char)value->uint;
   12a6a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   12a6e:	930a      	str	r3, [sp, #40]	; 0x28
   12a70:	2300      	movs	r3, #0
   12a72:	930b      	str	r3, [sp, #44]	; 0x2c
   12a74:	e7b7      	b.n	129e6 <z_cbvprintf_impl+0x43a>
			} else if (length_mod == LENGTH_H) {
   12a76:	2902      	cmp	r1, #2
   12a78:	d1b5      	bne.n	129e6 <z_cbvprintf_impl+0x43a>
				value->uint = (unsigned short)value->uint;
   12a7a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   12a7e:	e7f6      	b.n	12a6e <z_cbvprintf_impl+0x4c2>
		} else if (specifier_cat == SPECIFIER_FP) {
   12a80:	2b04      	cmp	r3, #4
   12a82:	d109      	bne.n	12a98 <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
   12a84:	1de3      	adds	r3, r4, #7
   12a86:	f023 0307 	bic.w	r3, r3, #7
   12a8a:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   12a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   12a92:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   12a96:	e7a6      	b.n	129e6 <z_cbvprintf_impl+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
   12a98:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   12a9a:	bf04      	itt	eq
   12a9c:	f854 3b04 	ldreq.w	r3, [r4], #4
   12aa0:	930a      	streq	r3, [sp, #40]	; 0x28
   12aa2:	e7a0      	b.n	129e6 <z_cbvprintf_impl+0x43a>
		switch (conv->specifier) {
   12aa4:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   12aa8:	2878      	cmp	r0, #120	; 0x78
   12aaa:	d8ab      	bhi.n	12a04 <z_cbvprintf_impl+0x458>
   12aac:	2862      	cmp	r0, #98	; 0x62
   12aae:	d822      	bhi.n	12af6 <z_cbvprintf_impl+0x54a>
   12ab0:	2825      	cmp	r0, #37	; 0x25
   12ab2:	f43f ad8c 	beq.w	125ce <z_cbvprintf_impl+0x22>
   12ab6:	2858      	cmp	r0, #88	; 0x58
   12ab8:	d1a4      	bne.n	12a04 <z_cbvprintf_impl+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
   12aba:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   12abe:	9300      	str	r3, [sp, #0]
   12ac0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   12ac4:	ab04      	add	r3, sp, #16
   12ac6:	aa0c      	add	r2, sp, #48	; 0x30
   12ac8:	f013 fa9b 	bl	26002 <encode_uint>
   12acc:	4682      	mov	sl, r0
			if (precision >= 0) {
   12ace:	f1b8 0f00 	cmp.w	r8, #0
   12ad2:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   12ad6:	db0c      	blt.n	12af2 <z_cbvprintf_impl+0x546>
				conv->flag_zero = false;
   12ad8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   12adc:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   12ae0:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   12ae4:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   12ae6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   12aea:	d902      	bls.n	12af2 <z_cbvprintf_impl+0x546>
					conv->pad0_value = precision - (int)len;
   12aec:	eba8 0303 	sub.w	r3, r8, r3
   12af0:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   12af2:	4680      	mov	r8, r0
   12af4:	e03e      	b.n	12b74 <z_cbvprintf_impl+0x5c8>
		switch (conv->specifier) {
   12af6:	3863      	subs	r0, #99	; 0x63
   12af8:	2815      	cmp	r0, #21
   12afa:	d883      	bhi.n	12a04 <z_cbvprintf_impl+0x458>
   12afc:	a201      	add	r2, pc, #4	; (adr r2, 12b04 <z_cbvprintf_impl+0x558>)
   12afe:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   12b02:	bf00      	nop
   12b04:	00012b85 	.word	0x00012b85
   12b08:	00012be9 	.word	0x00012be9
   12b0c:	00012a05 	.word	0x00012a05
   12b10:	00012a05 	.word	0x00012a05
   12b14:	00012a05 	.word	0x00012a05
   12b18:	00012a05 	.word	0x00012a05
   12b1c:	00012be9 	.word	0x00012be9
   12b20:	00012a05 	.word	0x00012a05
   12b24:	00012a05 	.word	0x00012a05
   12b28:	00012a05 	.word	0x00012a05
   12b2c:	00012a05 	.word	0x00012a05
   12b30:	00012c43 	.word	0x00012c43
   12b34:	00012c11 	.word	0x00012c11
   12b38:	00012c15 	.word	0x00012c15
   12b3c:	00012a05 	.word	0x00012a05
   12b40:	00012a05 	.word	0x00012a05
   12b44:	00012b5d 	.word	0x00012b5d
   12b48:	00012a05 	.word	0x00012a05
   12b4c:	00012c11 	.word	0x00012c11
   12b50:	00012a05 	.word	0x00012a05
   12b54:	00012a05 	.word	0x00012a05
   12b58:	00012c11 	.word	0x00012c11
			if (precision >= 0) {
   12b5c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   12b60:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   12b64:	db0a      	blt.n	12b7c <z_cbvprintf_impl+0x5d0>
				len = strnlen(bps, precision);
   12b66:	4641      	mov	r1, r8
   12b68:	4650      	mov	r0, sl
   12b6a:	f014 f886 	bl	26c7a <strnlen>
			bpe = bps + len;
   12b6e:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   12b72:	2600      	movs	r6, #0
		if (bps == NULL) {
   12b74:	f1ba 0f00 	cmp.w	sl, #0
   12b78:	d10c      	bne.n	12b94 <z_cbvprintf_impl+0x5e8>
   12b7a:	e743      	b.n	12a04 <z_cbvprintf_impl+0x458>
				len = strlen(bps);
   12b7c:	4650      	mov	r0, sl
   12b7e:	f014 f875 	bl	26c6c <strlen>
   12b82:	e7f4      	b.n	12b6e <z_cbvprintf_impl+0x5c2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12b86:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   12b8a:	2600      	movs	r6, #0
			bps = buf;
   12b8c:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
   12b90:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
   12b94:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   12b98:	b106      	cbz	r6, 12b9c <z_cbvprintf_impl+0x5f0>
			nj_len += 1U;
   12b9a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   12b9c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   12ba0:	06d0      	lsls	r0, r2, #27
   12ba2:	d568      	bpl.n	12c76 <z_cbvprintf_impl+0x6ca>
			nj_len += 2U;
   12ba4:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   12ba6:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   12ba8:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   12baa:	bf48      	it	mi
   12bac:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   12bae:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   12bb0:	bf48      	it	mi
   12bb2:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   12bb4:	f1b9 0f00 	cmp.w	r9, #0
   12bb8:	dd76      	ble.n	12ca8 <z_cbvprintf_impl+0x6fc>
			if (!conv->flag_dash) {
   12bba:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   12bbe:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   12bc2:	f3c2 0380 	ubfx	r3, r2, #2, #1
   12bc6:	9303      	str	r3, [sp, #12]
   12bc8:	0753      	lsls	r3, r2, #29
   12bca:	d46d      	bmi.n	12ca8 <z_cbvprintf_impl+0x6fc>
				if (conv->flag_zero) {
   12bcc:	0650      	lsls	r0, r2, #25
   12bce:	d561      	bpl.n	12c94 <z_cbvprintf_impl+0x6e8>
					if (sign != 0) {
   12bd0:	b146      	cbz	r6, 12be4 <z_cbvprintf_impl+0x638>
						OUTC(sign);
   12bd2:	9b02      	ldr	r3, [sp, #8]
   12bd4:	4659      	mov	r1, fp
   12bd6:	4630      	mov	r0, r6
   12bd8:	4798      	blx	r3
   12bda:	2800      	cmp	r0, #0
   12bdc:	db57      	blt.n	12c8e <z_cbvprintf_impl+0x6e2>
						sign = 0;
   12bde:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   12be0:	3501      	adds	r5, #1
						sign = 0;
   12be2:	461e      	mov	r6, r3
					pad = '0';
   12be4:	2330      	movs	r3, #48	; 0x30
   12be6:	e056      	b.n	12c96 <z_cbvprintf_impl+0x6ea>
			if (conv->flag_plus) {
   12be8:	071e      	lsls	r6, r3, #28
   12bea:	d40f      	bmi.n	12c0c <z_cbvprintf_impl+0x660>
				sign = ' ';
   12bec:	f013 0610 	ands.w	r6, r3, #16
   12bf0:	bf18      	it	ne
   12bf2:	2620      	movne	r6, #32
			sint = value->sint;
   12bf4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   12bf8:	2b00      	cmp	r3, #0
   12bfa:	f6bf af5e 	bge.w	12aba <z_cbvprintf_impl+0x50e>
				value->uint = (uint_value_type)-sint;
   12bfe:	4252      	negs	r2, r2
   12c00:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12c04:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   12c08:	262d      	movs	r6, #45	; 0x2d
   12c0a:	e756      	b.n	12aba <z_cbvprintf_impl+0x50e>
				sign = '+';
   12c0c:	262b      	movs	r6, #43	; 0x2b
   12c0e:	e7f1      	b.n	12bf4 <z_cbvprintf_impl+0x648>
		switch (conv->specifier) {
   12c10:	2600      	movs	r6, #0
   12c12:	e752      	b.n	12aba <z_cbvprintf_impl+0x50e>
			if (value->ptr != NULL) {
   12c14:	980a      	ldr	r0, [sp, #40]	; 0x28
   12c16:	b340      	cbz	r0, 12c6a <z_cbvprintf_impl+0x6be>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12c18:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   12c1c:	9300      	str	r3, [sp, #0]
   12c1e:	aa0c      	add	r2, sp, #48	; 0x30
   12c20:	ab04      	add	r3, sp, #16
   12c22:	2100      	movs	r1, #0
   12c24:	f013 f9ed 	bl	26002 <encode_uint>
				conv->altform_0c = true;
   12c28:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   12c2c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   12c30:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   12c34:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12c38:	4682      	mov	sl, r0
				conv->altform_0c = true;
   12c3a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   12c3e:	2600      	movs	r6, #0
				goto prec_int_pad0;
   12c40:	e745      	b.n	12ace <z_cbvprintf_impl+0x522>
				store_count(conv, value->ptr, count);
   12c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   12c44:	2907      	cmp	r1, #7
   12c46:	f63f aedd 	bhi.w	12a04 <z_cbvprintf_impl+0x458>
   12c4a:	e8df f001 	tbb	[pc, r1]
   12c4e:	040c      	.short	0x040c
   12c50:	08080c06 	.word	0x08080c06
   12c54:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   12c56:	701d      	strb	r5, [r3, #0]
		break;
   12c58:	e6d4      	b.n	12a04 <z_cbvprintf_impl+0x458>
		*(short *)dp = (short)count;
   12c5a:	801d      	strh	r5, [r3, #0]
		break;
   12c5c:	e6d2      	b.n	12a04 <z_cbvprintf_impl+0x458>
		*(intmax_t *)dp = (intmax_t)count;
   12c5e:	17ea      	asrs	r2, r5, #31
   12c60:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   12c64:	e6ce      	b.n	12a04 <z_cbvprintf_impl+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   12c66:	601d      	str	r5, [r3, #0]
		break;
   12c68:	e6cc      	b.n	12a04 <z_cbvprintf_impl+0x458>
			bps = "(nil)";
   12c6a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 12d34 <z_cbvprintf_impl+0x788>
   12c6e:	4606      	mov	r6, r0
			bpe = bps + 5;
   12c70:	f10a 0805 	add.w	r8, sl, #5
   12c74:	e78e      	b.n	12b94 <z_cbvprintf_impl+0x5e8>
		} else if (conv->altform_0) {
   12c76:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   12c78:	bf48      	it	mi
   12c7a:	3301      	addmi	r3, #1
   12c7c:	e793      	b.n	12ba6 <z_cbvprintf_impl+0x5fa>
					OUTC(pad);
   12c7e:	4618      	mov	r0, r3
   12c80:	9303      	str	r3, [sp, #12]
   12c82:	4659      	mov	r1, fp
   12c84:	9b02      	ldr	r3, [sp, #8]
   12c86:	4798      	blx	r3
   12c88:	2800      	cmp	r0, #0
   12c8a:	9b03      	ldr	r3, [sp, #12]
   12c8c:	da04      	bge.n	12c98 <z_cbvprintf_impl+0x6ec>
#undef OUTS
#undef OUTC
}
   12c8e:	b011      	add	sp, #68	; 0x44
   12c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   12c94:	2320      	movs	r3, #32
   12c96:	444d      	add	r5, r9
   12c98:	464a      	mov	r2, r9
				while (width-- > 0) {
   12c9a:	2a00      	cmp	r2, #0
   12c9c:	eba5 0109 	sub.w	r1, r5, r9
   12ca0:	f109 39ff 	add.w	r9, r9, #4294967295
   12ca4:	dceb      	bgt.n	12c7e <z_cbvprintf_impl+0x6d2>
   12ca6:	460d      	mov	r5, r1
		if (sign != 0) {
   12ca8:	b136      	cbz	r6, 12cb8 <z_cbvprintf_impl+0x70c>
			OUTC(sign);
   12caa:	9b02      	ldr	r3, [sp, #8]
   12cac:	4659      	mov	r1, fp
   12cae:	4630      	mov	r0, r6
   12cb0:	4798      	blx	r3
   12cb2:	2800      	cmp	r0, #0
   12cb4:	dbeb      	blt.n	12c8e <z_cbvprintf_impl+0x6e2>
   12cb6:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   12cb8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12cbc:	06d9      	lsls	r1, r3, #27
   12cbe:	d401      	bmi.n	12cc4 <z_cbvprintf_impl+0x718>
   12cc0:	071a      	lsls	r2, r3, #28
   12cc2:	d506      	bpl.n	12cd2 <z_cbvprintf_impl+0x726>
				OUTC('0');
   12cc4:	9b02      	ldr	r3, [sp, #8]
   12cc6:	4659      	mov	r1, fp
   12cc8:	2030      	movs	r0, #48	; 0x30
   12cca:	4798      	blx	r3
   12ccc:	2800      	cmp	r0, #0
   12cce:	dbde      	blt.n	12c8e <z_cbvprintf_impl+0x6e2>
   12cd0:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   12cd2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12cd6:	06db      	lsls	r3, r3, #27
   12cd8:	d507      	bpl.n	12cea <z_cbvprintf_impl+0x73e>
				OUTC(conv->specifier);
   12cda:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   12cde:	9b02      	ldr	r3, [sp, #8]
   12ce0:	4659      	mov	r1, fp
   12ce2:	4798      	blx	r3
   12ce4:	2800      	cmp	r0, #0
   12ce6:	dbd2      	blt.n	12c8e <z_cbvprintf_impl+0x6e2>
   12ce8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   12cea:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   12cec:	442e      	add	r6, r5
   12cee:	1b73      	subs	r3, r6, r5
   12cf0:	2b00      	cmp	r3, #0
   12cf2:	dc16      	bgt.n	12d22 <z_cbvprintf_impl+0x776>
			OUTS(bps, bpe);
   12cf4:	9802      	ldr	r0, [sp, #8]
   12cf6:	4643      	mov	r3, r8
   12cf8:	4652      	mov	r2, sl
   12cfa:	4659      	mov	r1, fp
   12cfc:	f013 f9c7 	bl	2608e <outs>
   12d00:	2800      	cmp	r0, #0
   12d02:	dbc4      	blt.n	12c8e <z_cbvprintf_impl+0x6e2>
   12d04:	4405      	add	r5, r0
		while (width > 0) {
   12d06:	44a9      	add	r9, r5
   12d08:	eba9 0305 	sub.w	r3, r9, r5
   12d0c:	2b00      	cmp	r3, #0
   12d0e:	f77f ae79 	ble.w	12a04 <z_cbvprintf_impl+0x458>
			OUTC(' ');
   12d12:	9b02      	ldr	r3, [sp, #8]
   12d14:	4659      	mov	r1, fp
   12d16:	2020      	movs	r0, #32
   12d18:	4798      	blx	r3
   12d1a:	2800      	cmp	r0, #0
   12d1c:	dbb7      	blt.n	12c8e <z_cbvprintf_impl+0x6e2>
   12d1e:	3501      	adds	r5, #1
			--width;
   12d20:	e7f2      	b.n	12d08 <z_cbvprintf_impl+0x75c>
				OUTC('0');
   12d22:	9b02      	ldr	r3, [sp, #8]
   12d24:	4659      	mov	r1, fp
   12d26:	2030      	movs	r0, #48	; 0x30
   12d28:	4798      	blx	r3
   12d2a:	2800      	cmp	r0, #0
   12d2c:	dbaf      	blt.n	12c8e <z_cbvprintf_impl+0x6e2>
   12d2e:	3501      	adds	r5, #1
   12d30:	e7dd      	b.n	12cee <z_cbvprintf_impl+0x742>
   12d32:	bf00      	nop
   12d34:	0002bc23 	.word	0x0002bc23

00012d38 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   12d38:	b508      	push	{r3, lr}
   12d3a:	f04f 0240 	mov.w	r2, #64	; 0x40
   12d3e:	f3ef 8311 	mrs	r3, BASEPRI
   12d42:	f382 8812 	msr	BASEPRI_MAX, r2
   12d46:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   12d4a:	f001 ff5f 	bl	14c0c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   12d4e:	4803      	ldr	r0, [pc, #12]	; (12d5c <sys_reboot+0x24>)
   12d50:	f012 fec2 	bl	25ad8 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   12d54:	f001 f95a 	bl	1400c <arch_cpu_idle>
   12d58:	e7fc      	b.n	12d54 <sys_reboot+0x1c>
   12d5a:	bf00      	nop
   12d5c:	0002bc29 	.word	0x0002bc29

00012d60 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   12d60:	f00d b830 	b.w	1fdc4 <SystemInit>

00012d64 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
   12d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   12d68:	f8df 8058 	ldr.w	r8, [pc, #88]	; 12dc4 <activate_foreach_backend+0x60>
{
   12d6c:	4604      	mov	r4, r0
	while (mask_cpy) {
   12d6e:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
   12d70:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
   12d74:	b914      	cbnz	r4, 12d7c <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
   12d76:	4638      	mov	r0, r7
   12d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   12d7c:	fa94 f5a4 	rbit	r5, r4
   12d80:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   12d84:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   12d88:	012e      	lsls	r6, r5, #4
   12d8a:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   12d8e:	ea6f 0a03 	mvn.w	sl, r3
   12d92:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   12d96:	7b2b      	ldrb	r3, [r5, #12]
   12d98:	2b00      	cmp	r3, #0
   12d9a:	d0eb      	beq.n	12d74 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   12d9c:	f858 3006 	ldr.w	r3, [r8, r6]
   12da0:	691b      	ldr	r3, [r3, #16]
   12da2:	b94b      	cbnz	r3, 12db8 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   12da4:	4446      	add	r6, r8
			log_backend_enable(backend,
   12da6:	2204      	movs	r2, #4
   12da8:	6873      	ldr	r3, [r6, #4]
   12daa:	4628      	mov	r0, r5
   12dac:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   12dae:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   12db2:	f000 fa43 	bl	1323c <log_backend_enable>
   12db6:	e7dd      	b.n	12d74 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   12db8:	4628      	mov	r0, r5
   12dba:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   12dbc:	2800      	cmp	r0, #0
   12dbe:	d1d9      	bne.n	12d74 <activate_foreach_backend+0x10>
   12dc0:	e7f0      	b.n	12da4 <activate_foreach_backend+0x40>
   12dc2:	bf00      	nop
   12dc4:	0002acf8 	.word	0x0002acf8

00012dc8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   12dc8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   12dca:	4910      	ldr	r1, [pc, #64]	; (12e0c <enable_logger+0x44>)
   12dcc:	4810      	ldr	r0, [pc, #64]	; (12e10 <enable_logger+0x48>)
{
   12dce:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   12dd0:	2200      	movs	r2, #0
   12dd2:	f017 fb66 	bl	2a4a2 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12dd6:	4d0f      	ldr	r5, [pc, #60]	; (12e14 <enable_logger+0x4c>)
   12dd8:	490f      	ldr	r1, [pc, #60]	; (12e18 <enable_logger+0x50>)
   12dda:	2200      	movs	r2, #0
   12ddc:	2300      	movs	r3, #0
   12dde:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12de2:	2400      	movs	r4, #0
   12de4:	230e      	movs	r3, #14
   12de6:	e9cd 3403 	strd	r3, r4, [sp, #12]
   12dea:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12dee:	4b0b      	ldr	r3, [pc, #44]	; (12e1c <enable_logger+0x54>)
   12df0:	9400      	str	r4, [sp, #0]
   12df2:	f44f 7240 	mov.w	r2, #768	; 0x300
   12df6:	4628      	mov	r0, r5
   12df8:	f00e f904 	bl	21004 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   12dfc:	4908      	ldr	r1, [pc, #32]	; (12e20 <enable_logger+0x58>)
   12dfe:	4628      	mov	r0, r5
   12e00:	f016 ffcd 	bl	29d9e <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   12e04:	4620      	mov	r0, r4
   12e06:	b009      	add	sp, #36	; 0x24
   12e08:	bd30      	pop	{r4, r5, pc}
   12e0a:	bf00      	nop
   12e0c:	00012e25 	.word	0x00012e25
   12e10:	20001c60 	.word	0x20001c60
   12e14:	20001c98 	.word	0x20001c98
   12e18:	200047c8 	.word	0x200047c8
   12e1c:	000130d5 	.word	0x000130d5
   12e20:	0002bc52 	.word	0x0002bc52

00012e24 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   12e24:	4801      	ldr	r0, [pc, #4]	; (12e2c <log_process_thread_timer_expiry_fn+0x8>)
   12e26:	f00e ba79 	b.w	2131c <z_impl_k_sem_give>
   12e2a:	bf00      	nop
   12e2c:	20000a08 	.word	0x20000a08

00012e30 <z_log_init>:
{
   12e30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12e34:	4b25      	ldr	r3, [pc, #148]	; (12ecc <z_log_init+0x9c>)
   12e36:	f3bf 8f5b 	dmb	ish
   12e3a:	4681      	mov	r9, r0
   12e3c:	4688      	mov	r8, r1
   12e3e:	e853 4f00 	ldrex	r4, [r3]
   12e42:	1c62      	adds	r2, r4, #1
   12e44:	e843 2100 	strex	r1, r2, [r3]
   12e48:	2900      	cmp	r1, #0
   12e4a:	d1f8      	bne.n	12e3e <z_log_init+0xe>
   12e4c:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   12e50:	b11c      	cbz	r4, 12e5a <z_log_init+0x2a>
		return 0;
   12e52:	2400      	movs	r4, #0
}
   12e54:	4620      	mov	r0, r4
   12e56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   12e5a:	4d1d      	ldr	r5, [pc, #116]	; (12ed0 <z_log_init+0xa0>)
   12e5c:	4e1d      	ldr	r6, [pc, #116]	; (12ed4 <z_log_init+0xa4>)
   12e5e:	1b76      	subs	r6, r6, r5
   12e60:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   12e62:	4627      	mov	r7, r4
				mask |= BIT(i);
   12e64:	f04f 0a01 	mov.w	sl, #1
	for (i = 0; i < log_backend_count_get(); i++) {
   12e68:	42b7      	cmp	r7, r6
   12e6a:	db11      	blt.n	12e90 <z_log_init+0x60>
	if (blocking) {
   12e6c:	f1b9 0f00 	cmp.w	r9, #0
   12e70:	d0f0      	beq.n	12e54 <z_log_init+0x24>
		while (mask) {
   12e72:	2c00      	cmp	r4, #0
   12e74:	d0ed      	beq.n	12e52 <z_log_init+0x22>
			mask = activate_foreach_backend(mask);
   12e76:	4620      	mov	r0, r4
   12e78:	f7ff ff74 	bl	12d64 <activate_foreach_backend>
   12e7c:	4604      	mov	r4, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   12e7e:	f1b8 0f00 	cmp.w	r8, #0
   12e82:	d0f6      	beq.n	12e72 <z_log_init+0x42>
	return z_impl_k_sleep(timeout);
   12e84:	2100      	movs	r1, #0
   12e86:	f44f 70a4 	mov.w	r0, #328	; 0x148
   12e8a:	f00e ff4f 	bl	21d2c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   12e8e:	e7f0      	b.n	12e72 <z_log_init+0x42>
		if (backend->autostart) {
   12e90:	7b2b      	ldrb	r3, [r5, #12]
   12e92:	b17b      	cbz	r3, 12eb4 <z_log_init+0x84>
	if (backend->api->init) {
   12e94:	f8d5 b000 	ldr.w	fp, [r5]
   12e98:	f8db 300c 	ldr.w	r3, [fp, #12]
   12e9c:	b10b      	cbz	r3, 12ea2 <z_log_init+0x72>
		backend->api->init(backend);
   12e9e:	4628      	mov	r0, r5
   12ea0:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   12ea2:	f8db 3010 	ldr.w	r3, [fp, #16]
   12ea6:	b943      	cbnz	r3, 12eba <z_log_init+0x8a>
				log_backend_enable(backend,
   12ea8:	686b      	ldr	r3, [r5, #4]
   12eaa:	2204      	movs	r2, #4
   12eac:	6819      	ldr	r1, [r3, #0]
   12eae:	4628      	mov	r0, r5
   12eb0:	f000 f9c4 	bl	1323c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   12eb4:	3701      	adds	r7, #1
   12eb6:	3510      	adds	r5, #16
   12eb8:	e7d6      	b.n	12e68 <z_log_init+0x38>
		return backend->api->is_ready(backend);
   12eba:	4628      	mov	r0, r5
   12ebc:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   12ebe:	2800      	cmp	r0, #0
   12ec0:	d0f2      	beq.n	12ea8 <z_log_init+0x78>
				mask |= BIT(i);
   12ec2:	fa0a f307 	lsl.w	r3, sl, r7
   12ec6:	431c      	orrs	r4, r3
   12ec8:	e7f4      	b.n	12eb4 <z_log_init+0x84>
   12eca:	bf00      	nop
   12ecc:	200024e4 	.word	0x200024e4
   12ed0:	0002acf8 	.word	0x0002acf8
   12ed4:	0002ad18 	.word	0x0002ad18

00012ed8 <log_format_func_t_get>:
}
   12ed8:	4b01      	ldr	r3, [pc, #4]	; (12ee0 <log_format_func_t_get+0x8>)
   12eda:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   12ede:	4770      	bx	lr
   12ee0:	0002b048 	.word	0x0002b048

00012ee4 <z_log_notify_backend_enabled>:
{
   12ee4:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   12ee6:	4c04      	ldr	r4, [pc, #16]	; (12ef8 <z_log_notify_backend_enabled+0x14>)
   12ee8:	7823      	ldrb	r3, [r4, #0]
   12eea:	b913      	cbnz	r3, 12ef2 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
   12eec:	4803      	ldr	r0, [pc, #12]	; (12efc <z_log_notify_backend_enabled+0x18>)
   12eee:	f00e fa15 	bl	2131c <z_impl_k_sem_give>
	backend_attached = true;
   12ef2:	2301      	movs	r3, #1
   12ef4:	7023      	strb	r3, [r4, #0]
}
   12ef6:	bd10      	pop	{r4, pc}
   12ef8:	20003ab1 	.word	0x20003ab1
   12efc:	20000a08 	.word	0x20000a08

00012f00 <z_log_dropped>:
   12f00:	4b0c      	ldr	r3, [pc, #48]	; (12f34 <z_log_dropped+0x34>)
   12f02:	f3bf 8f5b 	dmb	ish
   12f06:	e853 2f00 	ldrex	r2, [r3]
   12f0a:	3201      	adds	r2, #1
   12f0c:	e843 2100 	strex	r1, r2, [r3]
   12f10:	2900      	cmp	r1, #0
   12f12:	d1f8      	bne.n	12f06 <z_log_dropped+0x6>
   12f14:	f3bf 8f5b 	dmb	ish
	if (buffered) {
   12f18:	b158      	cbz	r0, 12f32 <z_log_dropped+0x32>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12f1a:	f3bf 8f5b 	dmb	ish
   12f1e:	4b06      	ldr	r3, [pc, #24]	; (12f38 <z_log_dropped+0x38>)
   12f20:	e853 2f00 	ldrex	r2, [r3]
   12f24:	3a01      	subs	r2, #1
   12f26:	e843 2100 	strex	r1, r2, [r3]
   12f2a:	2900      	cmp	r1, #0
   12f2c:	d1f8      	bne.n	12f20 <z_log_dropped+0x20>
   12f2e:	f3bf 8f5b 	dmb	ish
}
   12f32:	4770      	bx	lr
   12f34:	200024e0 	.word	0x200024e0
   12f38:	200024dc 	.word	0x200024dc

00012f3c <z_log_dropped_read_and_clear>:
}
   12f3c:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12f3e:	4b06      	ldr	r3, [pc, #24]	; (12f58 <z_log_dropped_read_and_clear+0x1c>)
   12f40:	f3bf 8f5b 	dmb	ish
   12f44:	4602      	mov	r2, r0
   12f46:	e853 0f00 	ldrex	r0, [r3]
   12f4a:	e843 2100 	strex	r1, r2, [r3]
   12f4e:	2900      	cmp	r1, #0
   12f50:	d1f9      	bne.n	12f46 <z_log_dropped_read_and_clear+0xa>
   12f52:	f3bf 8f5b 	dmb	ish
   12f56:	4770      	bx	lr
   12f58:	200024e0 	.word	0x200024e0

00012f5c <dropped_notify>:
{
   12f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   12f5e:	f7ff ffed 	bl	12f3c <z_log_dropped_read_and_clear>
	return __log_backends_end - __log_backends_start;
   12f62:	4c0a      	ldr	r4, [pc, #40]	; (12f8c <dropped_notify+0x30>)
   12f64:	4d0a      	ldr	r5, [pc, #40]	; (12f90 <dropped_notify+0x34>)
   12f66:	1b2d      	subs	r5, r5, r4
   12f68:	4607      	mov	r7, r0
   12f6a:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   12f6c:	2600      	movs	r6, #0
   12f6e:	42ae      	cmp	r6, r5
   12f70:	db00      	blt.n	12f74 <dropped_notify+0x18>
}
   12f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   12f74:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   12f76:	795b      	ldrb	r3, [r3, #5]
   12f78:	b12b      	cbz	r3, 12f86 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
   12f7a:	6823      	ldr	r3, [r4, #0]
   12f7c:	685b      	ldr	r3, [r3, #4]
   12f7e:	b113      	cbz	r3, 12f86 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
   12f80:	4639      	mov	r1, r7
   12f82:	4620      	mov	r0, r4
   12f84:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   12f86:	3601      	adds	r6, #1
   12f88:	3410      	adds	r4, #16
   12f8a:	e7f0      	b.n	12f6e <dropped_notify+0x12>
   12f8c:	0002acf8 	.word	0x0002acf8
   12f90:	0002ad18 	.word	0x0002ad18

00012f94 <z_log_msg_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   12f94:	4901      	ldr	r1, [pc, #4]	; (12f9c <z_log_msg_init+0x8>)
   12f96:	4802      	ldr	r0, [pc, #8]	; (12fa0 <z_log_msg_init+0xc>)
   12f98:	f013 b951 	b.w	2623e <mpsc_pbuf_init>
   12f9c:	0002b054 	.word	0x0002b054
   12fa0:	200024e8 	.word	0x200024e8

00012fa4 <log_core_init>:
	panic_mode = false;
   12fa4:	4a08      	ldr	r2, [pc, #32]	; (12fc8 <log_core_init+0x24>)
{
   12fa6:	b508      	push	{r3, lr}
	panic_mode = false;
   12fa8:	2300      	movs	r3, #0
   12faa:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   12fac:	4a07      	ldr	r2, [pc, #28]	; (12fcc <log_core_init+0x28>)
   12fae:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
   12fb0:	4b07      	ldr	r3, [pc, #28]	; (12fd0 <log_core_init+0x2c>)
   12fb2:	4a08      	ldr	r2, [pc, #32]	; (12fd4 <log_core_init+0x30>)
   12fb4:	601a      	str	r2, [r3, #0]
		log_output_timestamp_freq_set(freq);
   12fb6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   12fba:	f000 fbc1 	bl	13740 <log_output_timestamp_freq_set>
}
   12fbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   12fc2:	f7ff bfe7 	b.w	12f94 <z_log_msg_init>
   12fc6:	bf00      	nop
   12fc8:	20003ab2 	.word	0x20003ab2
   12fcc:	200024e0 	.word	0x200024e0
   12fd0:	2000053c 	.word	0x2000053c
   12fd4:	000264f1 	.word	0x000264f1

00012fd8 <z_log_msg_alloc>:
{
   12fd8:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(&log_buffer, wlen,
   12fda:	2200      	movs	r2, #0
   12fdc:	4801      	ldr	r0, [pc, #4]	; (12fe4 <z_log_msg_alloc+0xc>)
   12fde:	2300      	movs	r3, #0
   12fe0:	f013 b94e 	b.w	26280 <mpsc_pbuf_alloc>
   12fe4:	200024e8 	.word	0x200024e8

00012fe8 <z_log_msg_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   12fe8:	4801      	ldr	r0, [pc, #4]	; (12ff0 <z_log_msg_claim+0x8>)
   12fea:	f013 b9e2 	b.w	263b2 <mpsc_pbuf_claim>
   12fee:	bf00      	nop
   12ff0:	200024e8 	.word	0x200024e8

00012ff4 <z_log_msg_free>:
{
   12ff4:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
   12ff6:	4801      	ldr	r0, [pc, #4]	; (12ffc <z_log_msg_free+0x8>)
   12ff8:	f013 ba27 	b.w	2644a <mpsc_pbuf_free>
   12ffc:	200024e8 	.word	0x200024e8

00013000 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
   13000:	4801      	ldr	r0, [pc, #4]	; (13008 <z_log_msg_pending+0x8>)
   13002:	f013 ba56 	b.w	264b2 <mpsc_pbuf_is_pending>
   13006:	bf00      	nop
   13008:	200024e8 	.word	0x200024e8

0001300c <z_impl_log_process>:
{
   1300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!backend_attached) {
   1300e:	4b19      	ldr	r3, [pc, #100]	; (13074 <z_impl_log_process+0x68>)
   13010:	7818      	ldrb	r0, [r3, #0]
   13012:	b370      	cbz	r0, 13072 <z_impl_log_process+0x66>
	msg = z_log_msg_claim();
   13014:	f7ff ffe8 	bl	12fe8 <z_log_msg_claim>
	if (msg) {
   13018:	4605      	mov	r5, r0
   1301a:	b1a8      	cbz	r0, 13048 <z_impl_log_process+0x3c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1301c:	f3bf 8f5b 	dmb	ish
   13020:	4b15      	ldr	r3, [pc, #84]	; (13078 <z_impl_log_process+0x6c>)
   13022:	e853 2f00 	ldrex	r2, [r3]
   13026:	3a01      	subs	r2, #1
   13028:	e843 2100 	strex	r1, r2, [r3]
   1302c:	2900      	cmp	r1, #0
   1302e:	d1f8      	bne.n	13022 <z_impl_log_process+0x16>
   13030:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
   13034:	4c11      	ldr	r4, [pc, #68]	; (1307c <z_impl_log_process+0x70>)
   13036:	4e12      	ldr	r6, [pc, #72]	; (13080 <z_impl_log_process+0x74>)
   13038:	1b36      	subs	r6, r6, r4
   1303a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   1303c:	2700      	movs	r7, #0
   1303e:	42b7      	cmp	r7, r6
   13040:	db0c      	blt.n	1305c <z_impl_log_process+0x50>
		z_log_msg_free(msg);
   13042:	4628      	mov	r0, r5
   13044:	f7ff ffd6 	bl	12ff4 <z_log_msg_free>
	return dropped_cnt > 0;
   13048:	4b0e      	ldr	r3, [pc, #56]	; (13084 <z_impl_log_process+0x78>)
	if (z_log_dropped_pending()) {
   1304a:	681b      	ldr	r3, [r3, #0]
   1304c:	2b00      	cmp	r3, #0
   1304e:	dd01      	ble.n	13054 <z_impl_log_process+0x48>
		dropped_notify();
   13050:	f7ff ff84 	bl	12f5c <dropped_notify>
}
   13054:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return z_log_msg_pending();
   13058:	f7ff bfd2 	b.w	13000 <z_log_msg_pending>
	return backend->cb->active;
   1305c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   1305e:	795b      	ldrb	r3, [r3, #5]
   13060:	b123      	cbz	r3, 1306c <z_impl_log_process+0x60>
	backend->api->process(backend, msg);
   13062:	6823      	ldr	r3, [r4, #0]
   13064:	4629      	mov	r1, r5
   13066:	681b      	ldr	r3, [r3, #0]
   13068:	4620      	mov	r0, r4
   1306a:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   1306c:	3701      	adds	r7, #1
   1306e:	3410      	adds	r4, #16
   13070:	e7e5      	b.n	1303e <z_impl_log_process+0x32>
}
   13072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13074:	20003ab1 	.word	0x20003ab1
   13078:	200024dc 	.word	0x200024dc
   1307c:	0002acf8 	.word	0x0002acf8
   13080:	0002ad18 	.word	0x0002ad18
   13084:	200024e0 	.word	0x200024e0

00013088 <z_impl_log_panic>:
{
   13088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   1308a:	4f0f      	ldr	r7, [pc, #60]	; (130c8 <z_impl_log_panic+0x40>)
   1308c:	783d      	ldrb	r5, [r7, #0]
   1308e:	b97d      	cbnz	r5, 130b0 <z_impl_log_panic+0x28>
	return __log_backends_end - __log_backends_start;
   13090:	4c0e      	ldr	r4, [pc, #56]	; (130cc <z_impl_log_panic+0x44>)
   13092:	4e0f      	ldr	r6, [pc, #60]	; (130d0 <z_impl_log_panic+0x48>)
	(void)z_log_init(true, false);
   13094:	4629      	mov	r1, r5
   13096:	2001      	movs	r0, #1
   13098:	f7ff feca 	bl	12e30 <z_log_init>
   1309c:	1b36      	subs	r6, r6, r4
   1309e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   130a0:	42b5      	cmp	r5, r6
   130a2:	db06      	blt.n	130b2 <z_impl_log_panic+0x2a>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   130a4:	f7ff ffb2 	bl	1300c <z_impl_log_process>
		while (log_process() == true) {
   130a8:	2800      	cmp	r0, #0
   130aa:	d1fb      	bne.n	130a4 <z_impl_log_panic+0x1c>
	panic_mode = true;
   130ac:	2301      	movs	r3, #1
   130ae:	703b      	strb	r3, [r7, #0]
}
   130b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   130b2:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   130b4:	795b      	ldrb	r3, [r3, #5]
   130b6:	b11b      	cbz	r3, 130c0 <z_impl_log_panic+0x38>
	backend->api->panic(backend);
   130b8:	6823      	ldr	r3, [r4, #0]
   130ba:	4620      	mov	r0, r4
   130bc:	689b      	ldr	r3, [r3, #8]
   130be:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   130c0:	3501      	adds	r5, #1
   130c2:	3410      	adds	r4, #16
   130c4:	e7ec      	b.n	130a0 <z_impl_log_panic+0x18>
   130c6:	bf00      	nop
   130c8:	20003ab2 	.word	0x20003ab2
   130cc:	0002acf8 	.word	0x0002acf8
   130d0:	0002ad18 	.word	0x0002ad18

000130d4 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
   130d4:	2100      	movs	r1, #0
{
   130d6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t activate_mask = z_log_init(false, false);
   130da:	4608      	mov	r0, r1
   130dc:	f7ff fea8 	bl	12e30 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   130e0:	4604      	mov	r4, r0
   130e2:	b380      	cbz	r0, 13146 <log_process_thread_func+0x72>
   130e4:	f240 6867 	movw	r8, #1639	; 0x667
   130e8:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   130ec:	f00e fe52 	bl	21d94 <z_impl_z_current_get>
	proc_tid = process_tid;
   130f0:	4b1d      	ldr	r3, [pc, #116]	; (13168 <log_process_thread_func+0x94>)
   130f2:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   130f4:	b130      	cbz	r0, 13104 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   130f6:	4b1d      	ldr	r3, [pc, #116]	; (1316c <log_process_thread_func+0x98>)
	    process_tid &&
   130f8:	681b      	ldr	r3, [r3, #0]
   130fa:	2b09      	cmp	r3, #9
   130fc:	dd02      	ble.n	13104 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
   130fe:	481c      	ldr	r0, [pc, #112]	; (13170 <log_process_thread_func+0x9c>)
   13100:	f00e f90c 	bl	2131c <z_impl_k_sem_give>
	return __log_backends_end - __log_backends_start;
   13104:	4e1b      	ldr	r6, [pc, #108]	; (13174 <log_process_thread_func+0xa0>)
   13106:	4b1c      	ldr	r3, [pc, #112]	; (13178 <log_process_thread_func+0xa4>)
	return z_impl_k_sem_take(sem, timeout);
   13108:	f8df b064 	ldr.w	fp, [pc, #100]	; 13170 <log_process_thread_func+0x9c>
   1310c:	1af6      	subs	r6, r6, r3
   1310e:	1136      	asrs	r6, r6, #4
   13110:	2700      	movs	r7, #0
		if (activate_mask) {
   13112:	b144      	cbz	r4, 13126 <log_process_thread_func+0x52>
			activate_mask = activate_foreach_backend(activate_mask);
   13114:	4620      	mov	r0, r4
   13116:	f7ff fe25 	bl	12d64 <activate_foreach_backend>
			if (!activate_mask) {
   1311a:	4604      	mov	r4, r0
   1311c:	b918      	cbnz	r0, 13126 <log_process_thread_func+0x52>
				timeout = K_FOREVER;
   1311e:	f04f 38ff 	mov.w	r8, #4294967295
   13122:	f04f 39ff 	mov.w	r9, #4294967295
   13126:	f7ff ff71 	bl	1300c <z_impl_log_process>
		if (log_process() == false) {
   1312a:	4605      	mov	r5, r0
   1312c:	b948      	cbnz	r0, 13142 <log_process_thread_func+0x6e>
			if (processed_any) {
   1312e:	b11f      	cbz	r7, 13138 <log_process_thread_func+0x64>
   13130:	4f11      	ldr	r7, [pc, #68]	; (13178 <log_process_thread_func+0xa4>)
	for (int i = 0; i < log_backend_count_get(); i++) {
   13132:	4682      	mov	sl, r0
   13134:	45b2      	cmp	sl, r6
   13136:	db0b      	blt.n	13150 <log_process_thread_func+0x7c>
   13138:	4642      	mov	r2, r8
   1313a:	464b      	mov	r3, r9
   1313c:	4658      	mov	r0, fp
   1313e:	f00e f913 	bl	21368 <z_impl_k_sem_take>
   13142:	462f      	mov	r7, r5
   13144:	e7e5      	b.n	13112 <log_process_thread_func+0x3e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13146:	f04f 38ff 	mov.w	r8, #4294967295
   1314a:	f04f 39ff 	mov.w	r9, #4294967295
   1314e:	e7cd      	b.n	130ec <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   13150:	683b      	ldr	r3, [r7, #0]
   13152:	699b      	ldr	r3, [r3, #24]
   13154:	b11b      	cbz	r3, 1315e <log_process_thread_func+0x8a>
		backend->api->notify(backend, event, arg);
   13156:	2200      	movs	r2, #0
   13158:	4611      	mov	r1, r2
   1315a:	4638      	mov	r0, r7
   1315c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   1315e:	f10a 0a01 	add.w	sl, sl, #1
   13162:	3710      	adds	r7, #16
   13164:	e7e6      	b.n	13134 <log_process_thread_func+0x60>
   13166:	bf00      	nop
   13168:	20002528 	.word	0x20002528
   1316c:	200024dc 	.word	0x200024dc
   13170:	20000a08 	.word	0x20000a08
   13174:	0002ad18 	.word	0x0002ad18
   13178:	0002acf8 	.word	0x0002acf8

0001317c <z_log_msg_commit>:
	msg->hdr.timestamp = timestamp_func();
   1317c:	4b21      	ldr	r3, [pc, #132]	; (13204 <z_log_msg_commit+0x88>)
{
   1317e:	b513      	push	{r0, r1, r4, lr}
	msg->hdr.timestamp = timestamp_func();
   13180:	681b      	ldr	r3, [r3, #0]
{
   13182:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   13184:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, &m->buf);
   13186:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   13188:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, &m->buf);
   1318a:	481f      	ldr	r0, [pc, #124]	; (13208 <z_log_msg_commit+0x8c>)
   1318c:	f013 f8f1 	bl	26372 <mpsc_pbuf_commit>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   13190:	f3bf 8f5b 	dmb	ish
   13194:	4b1d      	ldr	r3, [pc, #116]	; (1320c <z_log_msg_commit+0x90>)
   13196:	e853 2f00 	ldrex	r2, [r3]
   1319a:	1c51      	adds	r1, r2, #1
   1319c:	e843 1000 	strex	r0, r1, [r3]
   131a0:	2800      	cmp	r0, #0
   131a2:	d1f8      	bne.n	13196 <z_log_msg_commit+0x1a>
   131a4:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   131a8:	4b19      	ldr	r3, [pc, #100]	; (13210 <z_log_msg_commit+0x94>)
   131aa:	781b      	ldrb	r3, [r3, #0]
   131ac:	b17b      	cbz	r3, 131ce <z_log_msg_commit+0x52>
   131ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   131b2:	f3ef 8411 	mrs	r4, BASEPRI
   131b6:	f383 8812 	msr	BASEPRI_MAX, r3
   131ba:	f3bf 8f6f 	isb	sy
   131be:	f7ff ff25 	bl	1300c <z_impl_log_process>
	__asm__ volatile(
   131c2:	f384 8811 	msr	BASEPRI, r4
   131c6:	f3bf 8f6f 	isb	sy
}
   131ca:	b002      	add	sp, #8
   131cc:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   131ce:	4b11      	ldr	r3, [pc, #68]	; (13214 <z_log_msg_commit+0x98>)
   131d0:	681b      	ldr	r3, [r3, #0]
   131d2:	2b00      	cmp	r3, #0
   131d4:	d0f9      	beq.n	131ca <z_log_msg_commit+0x4e>
		if (cnt == 0) {
   131d6:	b952      	cbnz	r2, 131ee <z_log_msg_commit+0x72>
	z_impl_k_timer_start(timer, duration, period);
   131d8:	2200      	movs	r2, #0
   131da:	2300      	movs	r3, #0
   131dc:	e9cd 2300 	strd	r2, r3, [sp]
   131e0:	480d      	ldr	r0, [pc, #52]	; (13218 <z_log_msg_commit+0x9c>)
   131e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   131e6:	2300      	movs	r3, #0
   131e8:	f00f f80a 	bl	22200 <z_impl_k_timer_start>
   131ec:	e7ed      	b.n	131ca <z_log_msg_commit+0x4e>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   131ee:	2a0a      	cmp	r2, #10
   131f0:	d1eb      	bne.n	131ca <z_log_msg_commit+0x4e>
	z_impl_k_timer_stop(timer);
   131f2:	4809      	ldr	r0, [pc, #36]	; (13218 <z_log_msg_commit+0x9c>)
   131f4:	f017 f961 	bl	2a4ba <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   131f8:	4808      	ldr	r0, [pc, #32]	; (1321c <z_log_msg_commit+0xa0>)
}
   131fa:	b002      	add	sp, #8
   131fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13200:	f00e b88c 	b.w	2131c <z_impl_k_sem_give>
   13204:	2000053c 	.word	0x2000053c
   13208:	200024e8 	.word	0x200024e8
   1320c:	200024dc 	.word	0x200024dc
   13210:	20003ab2 	.word	0x20003ab2
   13214:	20002528 	.word	0x20002528
   13218:	20001c60 	.word	0x20001c60
   1321c:	20000a08 	.word	0x20000a08

00013220 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   13220:	4a04      	ldr	r2, [pc, #16]	; (13234 <log_source_name_get+0x14>)
   13222:	4b05      	ldr	r3, [pc, #20]	; (13238 <log_source_name_get+0x18>)
   13224:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   13226:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   1322a:	bf34      	ite	cc
   1322c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   13230:	2000      	movcs	r0, #0
}
   13232:	4770      	bx	lr
   13234:	0002abc8 	.word	0x0002abc8
   13238:	0002acf8 	.word	0x0002acf8

0001323c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   1323c:	4a05      	ldr	r2, [pc, #20]	; (13254 <log_backend_enable+0x18>)
	backend->cb->id = id;
   1323e:	6843      	ldr	r3, [r0, #4]
   13240:	1a80      	subs	r0, r0, r2
   13242:	1100      	asrs	r0, r0, #4
   13244:	3001      	adds	r0, #1
	backend->cb->active = true;
   13246:	2201      	movs	r2, #1

	log_backend_id_set(backend, id);
   13248:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
   1324a:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   1324c:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   1324e:	f7ff be49 	b.w	12ee4 <z_log_notify_backend_enabled>
   13252:	bf00      	nop
   13254:	0002acf8 	.word	0x0002acf8

00013258 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   13258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   1325c:	f3c1 45cb 	ubfx	r5, r1, #19, #12
   13260:	f3c1 2649 	ubfx	r6, r1, #9, #10
   13264:	b08d      	sub	sp, #52	; 0x34
   13266:	4681      	mov	r9, r0
   13268:	460c      	mov	r4, r1
   1326a:	4690      	mov	r8, r2
   1326c:	469a      	mov	sl, r3
   1326e:	3517      	adds	r5, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   13270:	2e00      	cmp	r6, #0
   13272:	d03b      	beq.n	132ec <z_impl_z_log_msg_static_create+0x94>
	return cbprintf_package_convert(in_packaged, in_len,
   13274:	2302      	movs	r3, #2
   13276:	a809      	add	r0, sp, #36	; 0x24
   13278:	f04f 0b04 	mov.w	fp, #4
   1327c:	af07      	add	r7, sp, #28
	struct z_cbprintf_buf_desc buf_desc = {
   1327e:	2200      	movs	r2, #0
		uint32_t flags = CBPRINTF_PACKAGE_COPY_RW_STR;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   13280:	4631      	mov	r1, r6
	return cbprintf_package_convert(in_packaged, in_len,
   13282:	9300      	str	r3, [sp, #0]
   13284:	f8cd b008 	str.w	fp, [sp, #8]
   13288:	4603      	mov	r3, r0
   1328a:	9701      	str	r7, [sp, #4]
   1328c:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
   1328e:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
   13292:	920b      	str	r2, [sp, #44]	; 0x2c
	return cbprintf_package_convert(in_packaged, in_len,
   13294:	9605      	str	r6, [sp, #20]
   13296:	f7fe ff25 	bl	120e4 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   1329a:	f3c0 0309 	ubfx	r3, r0, #0, #10
   1329e:	1958      	adds	r0, r3, r5
   132a0:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   132a4:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
   132a6:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   132a8:	f363 2452 	bfi	r4, r3, #9, #10
   132ac:	9304      	str	r3, [sp, #16]
   132ae:	f7ff fe93 	bl	12fd8 <z_log_msg_alloc>
		if (msg) {
   132b2:	4605      	mov	r5, r0
   132b4:	b178      	cbz	r0, 132d6 <z_impl_z_log_msg_static_create+0x7e>
	struct z_cbprintf_buf_desc buf_desc = {
   132b6:	9b04      	ldr	r3, [sp, #16]
   132b8:	930a      	str	r3, [sp, #40]	; 0x28
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
   132ba:	3010      	adds	r0, #16
   132bc:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
   132be:	2302      	movs	r3, #2
	struct z_cbprintf_buf_desc buf_desc = {
   132c0:	9009      	str	r0, [sp, #36]	; 0x24
   132c2:	920b      	str	r2, [sp, #44]	; 0x2c
	return cbprintf_package_convert(in_packaged, in_len,
   132c4:	9300      	str	r3, [sp, #0]
   132c6:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   132ca:	4a0c      	ldr	r2, [pc, #48]	; (132fc <z_impl_z_log_msg_static_create+0xa4>)
   132cc:	9905      	ldr	r1, [sp, #20]
   132ce:	ab09      	add	r3, sp, #36	; 0x24
   132d0:	4640      	mov	r0, r8
   132d2:	f7fe ff07 	bl	120e4 <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   132d6:	f366 2452 	bfi	r4, r6, #9, #10
   132da:	4653      	mov	r3, sl
   132dc:	4622      	mov	r2, r4
   132de:	4649      	mov	r1, r9
   132e0:	4628      	mov	r0, r5
}
   132e2:	b00d      	add	sp, #52	; 0x34
   132e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
   132e8:	f013 b92e 	b.w	26548 <z_log_msg_finalize>
   132ec:	f025 0007 	bic.w	r0, r5, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   132f0:	0880      	lsrs	r0, r0, #2
   132f2:	f7ff fe71 	bl	12fd8 <z_log_msg_alloc>
   132f6:	4605      	mov	r5, r0
   132f8:	e7ed      	b.n	132d6 <z_impl_z_log_msg_static_create+0x7e>
   132fa:	bf00      	nop
   132fc:	0002651b 	.word	0x0002651b

00013300 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   13300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13304:	b087      	sub	sp, #28
   13306:	e9dd 5711 	ldrd	r5, r7, [sp, #68]	; 0x44
   1330a:	469a      	mov	sl, r3
   1330c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1330e:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
   13312:	9303      	str	r3, [sp, #12]
   13314:	4604      	mov	r4, r0
   13316:	4689      	mov	r9, r1
   13318:	4690      	mov	r8, r2
	int plen;

	if (fmt) {
   1331a:	b3cf      	cbz	r7, 13390 <z_impl_z_log_msg_runtime_vcreate+0x90>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   1331c:	f8cd b000 	str.w	fp, [sp]
   13320:	463b      	mov	r3, r7
   13322:	462a      	mov	r2, r5
   13324:	2110      	movs	r1, #16
   13326:	2000      	movs	r0, #0
		va_copy(ap2, ap);
   13328:	f8cd b014 	str.w	fp, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   1332c:	f7fe fc9e 	bl	11c6c <cbvprintf_package>
   13330:	4606      	mov	r6, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   13332:	9a03      	ldr	r2, [sp, #12]
   13334:	f008 0307 	and.w	r3, r8, #7
   13338:	f004 0807 	and.w	r8, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1333c:	f102 0017 	add.w	r0, r2, #23
	struct log_msg_desc desc =
   13340:	4c14      	ldr	r4, [pc, #80]	; (13394 <z_impl_z_log_msg_runtime_vcreate+0x94>)
   13342:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   13346:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1334a:	4430      	add	r0, r6
	struct log_msg_desc desc =
   1334c:	4b12      	ldr	r3, [pc, #72]	; (13398 <z_impl_z_log_msg_runtime_vcreate+0x98>)
   1334e:	ea04 2446 	and.w	r4, r4, r6, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   13352:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   13356:	ea48 0804 	orr.w	r8, r8, r4
   1335a:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   1335e:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   13360:	ea48 0803 	orr.w	r8, r8, r3
		msg = z_log_msg_alloc(msg_wlen);
   13364:	f7ff fe38 	bl	12fd8 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   13368:	4604      	mov	r4, r0
   1336a:	b140      	cbz	r0, 1337e <z_impl_z_log_msg_runtime_vcreate+0x7e>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   1336c:	b13f      	cbz	r7, 1337e <z_impl_z_log_msg_runtime_vcreate+0x7e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   1336e:	f8cd b000 	str.w	fp, [sp]
   13372:	463b      	mov	r3, r7
   13374:	462a      	mov	r2, r5
   13376:	4631      	mov	r1, r6
   13378:	3010      	adds	r0, #16
   1337a:	f7fe fc77 	bl	11c6c <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   1337e:	4653      	mov	r3, sl
   13380:	4642      	mov	r2, r8
   13382:	4649      	mov	r1, r9
   13384:	4620      	mov	r0, r4
	}
}
   13386:	b007      	add	sp, #28
   13388:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   1338c:	f013 b8dc 	b.w	26548 <z_log_msg_finalize>
		plen = 0;
   13390:	463e      	mov	r6, r7
   13392:	e7ce      	b.n	13332 <z_impl_z_log_msg_runtime_vcreate+0x32>
   13394:	0007fe00 	.word	0x0007fe00
   13398:	7ff80000 	.word	0x7ff80000

0001339c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   1339c:	b40e      	push	{r1, r2, r3}
   1339e:	b503      	push	{r0, r1, lr}
   133a0:	ab03      	add	r3, sp, #12
   133a2:	4601      	mov	r1, r0
   133a4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   133a8:	4804      	ldr	r0, [pc, #16]	; (133bc <print_formatted+0x20>)
	va_start(args, fmt);
   133aa:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   133ac:	f013 f8f4 	bl	26598 <cbvprintf>
	va_end(args);

	return length;
}
   133b0:	b002      	add	sp, #8
   133b2:	f85d eb04 	ldr.w	lr, [sp], #4
   133b6:	b003      	add	sp, #12
   133b8:	4770      	bx	lr
   133ba:	bf00      	nop
   133bc:	000265c1 	.word	0x000265c1

000133c0 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   133c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133c4:	b089      	sub	sp, #36	; 0x24
   133c6:	469a      	mov	sl, r3
   133c8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   133cc:	9304      	str	r3, [sp, #16]
   133ce:	e9dd 8313 	ldrd	r8, r3, [sp, #76]	; 0x4c
   133d2:	9306      	str	r3, [sp, #24]
   133d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   133d6:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
   133d8:	9b04      	ldr	r3, [sp, #16]
{
   133da:	9e16      	ldr	r6, [sp, #88]	; 0x58
   133dc:	4604      	mov	r4, r0
   133de:	460f      	mov	r7, r1
   133e0:	4693      	mov	fp, r2
	if (!raw_string) {
   133e2:	2b00      	cmp	r3, #0
   133e4:	f000 8112 	beq.w	1360c <log_output_process+0x24c>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   133e8:	f006 0308 	and.w	r3, r6, #8
   133ec:	9307      	str	r3, [sp, #28]
	const char *tag = z_log_get_tag();
   133ee:	f013 f892 	bl	26516 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   133f2:	f006 0502 	and.w	r5, r6, #2
	if (tag) {
   133f6:	4602      	mov	r2, r0
   133f8:	2800      	cmp	r0, #0
   133fa:	f000 80b1 	beq.w	13560 <log_output_process+0x1a0>
		length += print_formatted(output, "%s ", tag);
   133fe:	4989      	ldr	r1, [pc, #548]	; (13624 <log_output_process+0x264>)
   13400:	4620      	mov	r0, r4
   13402:	f7ff ffcb 	bl	1339c <print_formatted>
   13406:	4681      	mov	r9, r0
	if (stamp) {
   13408:	b14d      	cbz	r5, 1341e <log_output_process+0x5e>
	if (!format) {
   1340a:	f016 0f44 	tst.w	r6, #68	; 0x44
   1340e:	f040 80a9 	bne.w	13564 <log_output_process+0x1a4>
		length = print_formatted(output, "[%08lu] ", timestamp);
   13412:	4985      	ldr	r1, [pc, #532]	; (13628 <log_output_process+0x268>)
   13414:	463a      	mov	r2, r7
   13416:	4620      	mov	r0, r4
   13418:	f7ff ffc0 	bl	1339c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   1341c:	4481      	add	r9, r0
	if (color) {
   1341e:	f006 0301 	and.w	r3, r6, #1
   13422:	b15b      	cbz	r3, 1343c <log_output_process+0x7c>
		const char *log_color = start && (colors[level] != NULL) ?
   13424:	4b81      	ldr	r3, [pc, #516]	; (1362c <log_output_process+0x26c>)
   13426:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
   13428:	4981      	ldr	r1, [pc, #516]	; (13630 <log_output_process+0x270>)
		const char *log_color = start && (colors[level] != NULL) ?
   1342a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
   1342e:	4b81      	ldr	r3, [pc, #516]	; (13634 <log_output_process+0x274>)
   13430:	4620      	mov	r0, r4
   13432:	2a00      	cmp	r2, #0
   13434:	bf08      	it	eq
   13436:	461a      	moveq	r2, r3
   13438:	f7ff ffb0 	bl	1339c <print_formatted>
	if (level_on) {
   1343c:	f006 0308 	and.w	r3, r6, #8
   13440:	2b00      	cmp	r3, #0
   13442:	f000 80bb 	beq.w	135bc <log_output_process+0x1fc>
		total += print_formatted(output, "<%s> ", severity[level]);
   13446:	4b7c      	ldr	r3, [pc, #496]	; (13638 <log_output_process+0x278>)
   13448:	9a04      	ldr	r2, [sp, #16]
   1344a:	497c      	ldr	r1, [pc, #496]	; (1363c <log_output_process+0x27c>)
   1344c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13450:	4620      	mov	r0, r4
   13452:	f7ff ffa3 	bl	1339c <print_formatted>
   13456:	4605      	mov	r5, r0
	if (domain) {
   13458:	f1bb 0f00 	cmp.w	fp, #0
   1345c:	d005      	beq.n	1346a <log_output_process+0xaa>
		total += print_formatted(output, "%s/", domain);
   1345e:	4978      	ldr	r1, [pc, #480]	; (13640 <log_output_process+0x280>)
   13460:	465a      	mov	r2, fp
   13462:	4620      	mov	r0, r4
   13464:	f7ff ff9a 	bl	1339c <print_formatted>
   13468:	4405      	add	r5, r0
	if (source) {
   1346a:	f1ba 0f00 	cmp.w	sl, #0
   1346e:	d005      	beq.n	1347c <log_output_process+0xbc>
		total += print_formatted(output,
   13470:	4974      	ldr	r1, [pc, #464]	; (13644 <log_output_process+0x284>)
   13472:	4652      	mov	r2, sl
   13474:	4620      	mov	r0, r4
   13476:	f7ff ff91 	bl	1339c <print_formatted>
   1347a:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   1347c:	444d      	add	r5, r9
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
	} else {
		prefix_offset = 0;
	}

	if (package) {
   1347e:	f1b8 0f00 	cmp.w	r8, #0
   13482:	f000 80cb 	beq.w	1361c <log_output_process+0x25c>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
   13486:	4870      	ldr	r0, [pc, #448]	; (13648 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   13488:	4970      	ldr	r1, [pc, #448]	; (1364c <log_output_process+0x28c>)
   1348a:	4643      	mov	r3, r8
   1348c:	4622      	mov	r2, r4
   1348e:	f012 fa41 	bl	25914 <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   13492:	9b05      	ldr	r3, [sp, #20]
   13494:	2b00      	cmp	r3, #0
   13496:	d04b      	beq.n	13530 <log_output_process+0x170>
		print_formatted(output, " ");
   13498:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 13650 <log_output_process+0x290>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   1349c:	9f05      	ldr	r7, [sp, #20]
   1349e:	2f10      	cmp	r7, #16
   134a0:	bf28      	it	cs
   134a2:	2710      	movcs	r7, #16
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   134a4:	06f3      	lsls	r3, r6, #27
   134a6:	d406      	bmi.n	134b6 <log_output_process+0xf6>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   134a8:	06b0      	lsls	r0, r6, #26
		print_formatted(ctx, "\n");
   134aa:	bf4c      	ite	mi
   134ac:	4969      	ldrmi	r1, [pc, #420]	; (13654 <log_output_process+0x294>)
		print_formatted(ctx, "\r\n");
   134ae:	496a      	ldrpl	r1, [pc, #424]	; (13658 <log_output_process+0x298>)
   134b0:	4620      	mov	r0, r4
   134b2:	f7ff ff73 	bl	1339c <print_formatted>
		prefix_offset = 0;
   134b6:	f04f 0a00 	mov.w	sl, #0
	for (int i = 0; i < prefix_offset; i++) {
   134ba:	4555      	cmp	r5, sl
   134bc:	f300 8084 	bgt.w	135c8 <log_output_process+0x208>
			print_formatted(output, "   ");
   134c0:	f8df a198 	ldr.w	sl, [pc, #408]	; 1365c <log_output_process+0x29c>
			print_formatted(output, "%02x ", data[i]);
   134c4:	f8df b198 	ldr.w	fp, [pc, #408]	; 13660 <log_output_process+0x2a0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   134c8:	f04f 0900 	mov.w	r9, #0
		if (i < length) {
   134cc:	45b9      	cmp	r9, r7
   134ce:	f080 808b 	bcs.w	135e8 <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
   134d2:	9b06      	ldr	r3, [sp, #24]
   134d4:	4659      	mov	r1, fp
   134d6:	f813 2009 	ldrb.w	r2, [r3, r9]
   134da:	4620      	mov	r0, r4
   134dc:	f7ff ff5e 	bl	1339c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   134e0:	f109 0901 	add.w	r9, r9, #1
   134e4:	f1b9 0f10 	cmp.w	r9, #16
   134e8:	d175      	bne.n	135d6 <log_output_process+0x216>
	print_formatted(output, "|");
   134ea:	495e      	ldr	r1, [pc, #376]	; (13664 <log_output_process+0x2a4>)
			print_formatted(output, "%c",
   134ec:	f8df a178 	ldr.w	sl, [pc, #376]	; 13668 <log_output_process+0x2a8>
	print_formatted(output, "|");
   134f0:	4620      	mov	r0, r4
   134f2:	f7ff ff53 	bl	1339c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   134f6:	f04f 0b00 	mov.w	fp, #0
		if (i < length) {
   134fa:	455f      	cmp	r7, fp
   134fc:	f240 8081 	bls.w	13602 <log_output_process+0x242>
			char c = (char)data[i];
   13500:	9b06      	ldr	r3, [sp, #24]
   13502:	f813 200b 	ldrb.w	r2, [r3, fp]
	return (int)((((unsigned)c) >= ' ') &&
   13506:	f1a2 0320 	sub.w	r3, r2, #32
   1350a:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
   1350c:	bf28      	it	cs
   1350e:	222e      	movcs	r2, #46	; 0x2e
   13510:	4651      	mov	r1, sl
   13512:	4620      	mov	r0, r4
   13514:	f7ff ff42 	bl	1339c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13518:	f10b 0b01 	add.w	fp, fp, #1
   1351c:	f1bb 0f10 	cmp.w	fp, #16
   13520:	d167      	bne.n	135f2 <log_output_process+0x232>
		data += length;
   13522:	9b06      	ldr	r3, [sp, #24]
   13524:	443b      	add	r3, r7
   13526:	9306      	str	r3, [sp, #24]
	} while (len);
   13528:	9b05      	ldr	r3, [sp, #20]
   1352a:	1bdb      	subs	r3, r3, r7
   1352c:	9305      	str	r3, [sp, #20]
   1352e:	d1b5      	bne.n	1349c <log_output_process+0xdc>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   13530:	9b04      	ldr	r3, [sp, #16]
   13532:	b17b      	cbz	r3, 13554 <log_output_process+0x194>
	if (color) {
   13534:	07f1      	lsls	r1, r6, #31
   13536:	d504      	bpl.n	13542 <log_output_process+0x182>
		print_formatted(output, "%s", log_color);
   13538:	4a3e      	ldr	r2, [pc, #248]	; (13634 <log_output_process+0x274>)
   1353a:	493d      	ldr	r1, [pc, #244]	; (13630 <log_output_process+0x270>)
   1353c:	4620      	mov	r0, r4
   1353e:	f7ff ff2d 	bl	1339c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   13542:	06f2      	lsls	r2, r6, #27
   13544:	d406      	bmi.n	13554 <log_output_process+0x194>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   13546:	06b3      	lsls	r3, r6, #26
		print_formatted(ctx, "\n");
   13548:	bf4c      	ite	mi
   1354a:	4942      	ldrmi	r1, [pc, #264]	; (13654 <log_output_process+0x294>)
		print_formatted(ctx, "\r\n");
   1354c:	4942      	ldrpl	r1, [pc, #264]	; (13658 <log_output_process+0x298>)
   1354e:	4620      	mov	r0, r4
   13550:	f7ff ff24 	bl	1339c <print_formatted>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   13554:	4620      	mov	r0, r4
}
   13556:	b009      	add	sp, #36	; 0x24
   13558:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   1355c:	f013 b823 	b.w	265a6 <log_output_flush>
	uint32_t length = 0U;
   13560:	4681      	mov	r9, r0
   13562:	e751      	b.n	13408 <log_output_process+0x48>
	} else if (freq != 0U) {
   13564:	4b41      	ldr	r3, [pc, #260]	; (1366c <log_output_process+0x2ac>)
   13566:	6818      	ldr	r0, [r3, #0]
   13568:	2800      	cmp	r0, #0
   1356a:	f43f af57 	beq.w	1341c <log_output_process+0x5c>
		timestamp /= timestamp_div;
   1356e:	4b40      	ldr	r3, [pc, #256]	; (13670 <log_output_process+0x2b0>)
		ms = (remainder * 1000U) / freq;
   13570:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
   13574:	6819      	ldr	r1, [r3, #0]
   13576:	fbb7 f7f1 	udiv	r7, r7, r1
		total_seconds = timestamp / freq;
   1357a:	f44f 6561 	mov.w	r5, #3600	; 0xe10
   1357e:	fbb7 f1f0 	udiv	r1, r7, r0
		remainder = timestamp % freq;
   13582:	fb00 7711 	mls	r7, r0, r1, r7
		ms = (remainder * 1000U) / freq;
   13586:	fb0e f707 	mul.w	r7, lr, r7
   1358a:	fbb1 f2f5 	udiv	r2, r1, r5
   1358e:	fb05 1512 	mls	r5, r5, r2, r1
		mins = seconds / 60U;
   13592:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13594:	fbb7 fcf0 	udiv	ip, r7, r0
		mins = seconds / 60U;
   13598:	fbb5 f3f1 	udiv	r3, r5, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1359c:	fb00 771c 	mls	r7, r0, ip, r7
				length = print_formatted(output,
   135a0:	fb01 5113 	mls	r1, r1, r3, r5
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   135a4:	fb0e f707 	mul.w	r7, lr, r7
				length = print_formatted(output,
   135a8:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   135aa:	fbb7 f7f0 	udiv	r7, r7, r0
				length = print_formatted(output,
   135ae:	4931      	ldr	r1, [pc, #196]	; (13674 <log_output_process+0x2b4>)
   135b0:	e9cd c701 	strd	ip, r7, [sp, #4]
   135b4:	4620      	mov	r0, r4
   135b6:	f7ff fef1 	bl	1339c <print_formatted>
   135ba:	e72f      	b.n	1341c <log_output_process+0x5c>
	int total = 0;
   135bc:	f006 0508 	and.w	r5, r6, #8
   135c0:	e74a      	b.n	13458 <log_output_process+0x98>
		prefix_offset = 0;
   135c2:	9d04      	ldr	r5, [sp, #16]
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
   135c4:	482c      	ldr	r0, [pc, #176]	; (13678 <log_output_process+0x2b8>)
   135c6:	e75f      	b.n	13488 <log_output_process+0xc8>
		print_formatted(output, " ");
   135c8:	4641      	mov	r1, r8
   135ca:	4620      	mov	r0, r4
   135cc:	f7ff fee6 	bl	1339c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   135d0:	f10a 0a01 	add.w	sl, sl, #1
   135d4:	e771      	b.n	134ba <log_output_process+0xfa>
		if (i > 0 && !(i % 8)) {
   135d6:	f019 0f07 	tst.w	r9, #7
   135da:	f47f af77 	bne.w	134cc <log_output_process+0x10c>
			print_formatted(output, " ");
   135de:	4641      	mov	r1, r8
   135e0:	4620      	mov	r0, r4
   135e2:	f7ff fedb 	bl	1339c <print_formatted>
   135e6:	e771      	b.n	134cc <log_output_process+0x10c>
			print_formatted(output, "   ");
   135e8:	4651      	mov	r1, sl
   135ea:	4620      	mov	r0, r4
   135ec:	f7ff fed6 	bl	1339c <print_formatted>
   135f0:	e776      	b.n	134e0 <log_output_process+0x120>
		if (i > 0 && !(i % 8)) {
   135f2:	f01b 0f07 	tst.w	fp, #7
   135f6:	d180      	bne.n	134fa <log_output_process+0x13a>
			print_formatted(output, " ");
   135f8:	4641      	mov	r1, r8
   135fa:	4620      	mov	r0, r4
   135fc:	f7ff fece 	bl	1339c <print_formatted>
   13600:	e77b      	b.n	134fa <log_output_process+0x13a>
			print_formatted(output, " ");
   13602:	4641      	mov	r1, r8
   13604:	4620      	mov	r0, r4
   13606:	f7ff fec9 	bl	1339c <print_formatted>
   1360a:	e785      	b.n	13518 <log_output_process+0x158>
	if (package) {
   1360c:	f1b8 0f00 	cmp.w	r8, #0
   13610:	d1d7      	bne.n	135c2 <log_output_process+0x202>
	if (data_len) {
   13612:	9b05      	ldr	r3, [sp, #20]
   13614:	2b00      	cmp	r3, #0
   13616:	d09d      	beq.n	13554 <log_output_process+0x194>
		prefix_offset = 0;
   13618:	9d04      	ldr	r5, [sp, #16]
   1361a:	e73d      	b.n	13498 <log_output_process+0xd8>
	if (data_len) {
   1361c:	9b05      	ldr	r3, [sp, #20]
   1361e:	2b00      	cmp	r3, #0
   13620:	d088      	beq.n	13534 <log_output_process+0x174>
   13622:	e739      	b.n	13498 <log_output_process+0xd8>
   13624:	0002bc63 	.word	0x0002bc63
   13628:	0002bc67 	.word	0x0002bc67
   1362c:	0002b068 	.word	0x0002b068
   13630:	0002cabb 	.word	0x0002cabb
   13634:	0002bc5e 	.word	0x0002bc5e
   13638:	0002b07c 	.word	0x0002b07c
   1363c:	0002bc8c 	.word	0x0002bc8c
   13640:	0002bc92 	.word	0x0002bc92
   13644:	0002bc96 	.word	0x0002bc96
   13648:	000265c1 	.word	0x000265c1
   1364c:	00026599 	.word	0x00026599
   13650:	0002bca6 	.word	0x0002bca6
   13654:	0002bc9c 	.word	0x0002bc9c
   13658:	0002bc9b 	.word	0x0002bc9b
   1365c:	0002bca4 	.word	0x0002bca4
   13660:	0002bc9e 	.word	0x0002bc9e
   13664:	0002bca8 	.word	0x0002bca8
   13668:	0002bcaa 	.word	0x0002bcaa
   1366c:	2000252c 	.word	0x2000252c
   13670:	20002530 	.word	0x20002530
   13674:	0002bc70 	.word	0x0002bc70
   13678:	000265f7 	.word	0x000265f7

0001367c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   1367c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   13680:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.level;
   13682:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   13684:	688e      	ldr	r6, [r1, #8]
   13686:	b086      	sub	sp, #24
   13688:	4605      	mov	r5, r0
   1368a:	460c      	mov	r4, r1
   1368c:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
   1368e:	f3c7 1782 	ubfx	r7, r7, #6, #3
	log_timestamp_t timestamp = log_msg_get_timestamp(msg);
	uint8_t level = log_msg_get_level(msg);
	void *source = (void *)log_msg_get_source(msg);
	uint8_t domain_id = log_msg_get_domain(msg);
	int16_t source_id = source ?
   13692:	b15b      	cbz	r3, 136ac <log_output_msg_process+0x30>
   13694:	4913      	ldr	r1, [pc, #76]	; (136e4 <log_output_msg_process+0x68>)
   13696:	1a5b      	subs	r3, r3, r1
   13698:	f343 01cf 	sbfx	r1, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   1369c:	2900      	cmp	r1, #0
   1369e:	db1f      	blt.n	136e0 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   136a0:	7820      	ldrb	r0, [r4, #0]
   136a2:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   136a6:	f7ff fdbb 	bl	13220 <log_source_name_get>
   136aa:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   136ac:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
   136ae:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   136b0:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   136b4:	9700      	str	r7, [sp, #0]
   136b6:	f3c2 2249 	ubfx	r2, r2, #9, #10
   136ba:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   136bc:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
   136c0:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   136c4:	bf08      	it	eq
   136c6:	2100      	moveq	r1, #0
   136c8:	e9cd 0803 	strd	r0, r8, [sp, #12]
   136cc:	e9cd 1401 	strd	r1, r4, [sp, #4]
   136d0:	2200      	movs	r2, #0
   136d2:	4631      	mov	r1, r6
   136d4:	4628      	mov	r0, r5
   136d6:	f7ff fe73 	bl	133c0 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   136da:	b006      	add	sp, #24
   136dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   136e0:	2300      	movs	r3, #0
   136e2:	e7e3      	b.n	136ac <log_output_msg_process+0x30>
   136e4:	0002abc8 	.word	0x0002abc8

000136e8 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   136e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   136ea:	f242 730f 	movw	r3, #9999	; 0x270f
   136ee:	428b      	cmp	r3, r1
   136f0:	bf28      	it	cs
   136f2:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   136f4:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   136f6:	4a0f      	ldr	r2, [pc, #60]	; (13734 <log_output_dropped_process+0x4c>)
{
   136f8:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   136fa:	2105      	movs	r1, #5
   136fc:	4668      	mov	r0, sp
   136fe:	f012 f9f8 	bl	25af2 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   13702:	6863      	ldr	r3, [r4, #4]
   13704:	490c      	ldr	r1, [pc, #48]	; (13738 <log_output_dropped_process+0x50>)
   13706:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13708:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1370a:	220b      	movs	r2, #11
   1370c:	4628      	mov	r0, r5
   1370e:	f012 ff36 	bl	2657e <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   13712:	6863      	ldr	r3, [r4, #4]
   13714:	4632      	mov	r2, r6
   13716:	4669      	mov	r1, sp
   13718:	4628      	mov	r0, r5
   1371a:	685b      	ldr	r3, [r3, #4]
   1371c:	f012 ff2f 	bl	2657e <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   13720:	6863      	ldr	r3, [r4, #4]
   13722:	4906      	ldr	r1, [pc, #24]	; (1373c <log_output_dropped_process+0x54>)
   13724:	685b      	ldr	r3, [r3, #4]
   13726:	221b      	movs	r2, #27
   13728:	4628      	mov	r0, r5
   1372a:	f012 ff28 	bl	2657e <buffer_write>
		     output->control_block->ctx);
}
   1372e:	b002      	add	sp, #8
   13730:	bd70      	pop	{r4, r5, r6, pc}
   13732:	bf00      	nop
   13734:	0002e202 	.word	0x0002e202
   13738:	0002bce9 	.word	0x0002bce9
   1373c:	0002bccd 	.word	0x0002bccd

00013740 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   13740:	4a08      	ldr	r2, [pc, #32]	; (13764 <log_output_timestamp_freq_set+0x24>)
{
   13742:	b510      	push	{r4, lr}
	timestamp_div = 1U;
   13744:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   13746:	4c08      	ldr	r4, [pc, #32]	; (13768 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   13748:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   1374a:	2100      	movs	r1, #0
   1374c:	42a0      	cmp	r0, r4
   1374e:	d804      	bhi.n	1375a <log_output_timestamp_freq_set+0x1a>
   13750:	b101      	cbz	r1, 13754 <log_output_timestamp_freq_set+0x14>
   13752:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   13754:	4b05      	ldr	r3, [pc, #20]	; (1376c <log_output_timestamp_freq_set+0x2c>)
   13756:	6018      	str	r0, [r3, #0]
}
   13758:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   1375a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1375c:	005b      	lsls	r3, r3, #1
   1375e:	2101      	movs	r1, #1
   13760:	e7f4      	b.n	1374c <log_output_timestamp_freq_set+0xc>
   13762:	bf00      	nop
   13764:	20002530 	.word	0x20002530
   13768:	000f4240 	.word	0x000f4240
   1376c:	2000252c 	.word	0x2000252c

00013770 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   13770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
   13772:	4f07      	ldr	r7, [pc, #28]	; (13790 <char_out+0x20>)
{
   13774:	460d      	mov	r5, r1
   13776:	4604      	mov	r4, r0
   13778:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   1377a:	42b4      	cmp	r4, r6
   1377c:	d101      	bne.n	13782 <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
   1377e:	4628      	mov	r0, r5
   13780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   13782:	6838      	ldr	r0, [r7, #0]
   13784:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   13788:	6883      	ldr	r3, [r0, #8]
   1378a:	685b      	ldr	r3, [r3, #4]
   1378c:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   1378e:	e7f4      	b.n	1377a <char_out+0xa>
   13790:	2000254c 	.word	0x2000254c

00013794 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   13794:	4b01      	ldr	r3, [pc, #4]	; (1379c <format_set+0x8>)
	return 0;
}
   13796:	2000      	movs	r0, #0
	log_format_current = log_type;
   13798:	6019      	str	r1, [r3, #0]
}
   1379a:	4770      	bx	lr
   1379c:	2000253c 	.word	0x2000253c

000137a0 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   137a0:	4b01      	ldr	r3, [pc, #4]	; (137a8 <log_backend_uart_init+0x8>)
   137a2:	4a02      	ldr	r2, [pc, #8]	; (137ac <log_backend_uart_init+0xc>)
   137a4:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
   137a6:	4770      	bx	lr
   137a8:	2000254c 	.word	0x2000254c
   137ac:	0002a910 	.word	0x0002a910

000137b0 <panic>:

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
   137b0:	4b02      	ldr	r3, [pc, #8]	; (137bc <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   137b2:	4803      	ldr	r0, [pc, #12]	; (137c0 <panic+0x10>)
   137b4:	2201      	movs	r2, #1
   137b6:	701a      	strb	r2, [r3, #0]
   137b8:	f012 bef5 	b.w	265a6 <log_output_flush>
   137bc:	20003ab3 	.word	0x20003ab3
   137c0:	0002b0ac 	.word	0x0002b0ac

000137c4 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   137c4:	4801      	ldr	r0, [pc, #4]	; (137cc <dropped+0x8>)
   137c6:	f7ff bf8f 	b.w	136e8 <log_output_dropped_process>
   137ca:	bf00      	nop
   137cc:	0002b0ac 	.word	0x0002b0ac

000137d0 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   137d0:	4b06      	ldr	r3, [pc, #24]	; (137ec <process+0x1c>)
{
   137d2:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   137d4:	6818      	ldr	r0, [r3, #0]
{
   137d6:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   137d8:	f7ff fb7e 	bl	12ed8 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   137dc:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   137de:	4603      	mov	r3, r0
}
   137e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
   137e4:	4802      	ldr	r0, [pc, #8]	; (137f0 <process+0x20>)
   137e6:	220f      	movs	r2, #15
   137e8:	4718      	bx	r3
   137ea:	bf00      	nop
   137ec:	2000253c 	.word	0x2000253c
   137f0:	0002b0ac 	.word	0x0002b0ac

000137f4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   137f4:	4b01      	ldr	r3, [pc, #4]	; (137fc <log_backend_rtt_init+0x8>)
   137f6:	2201      	movs	r2, #1
   137f8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   137fa:	4770      	bx	lr
   137fc:	20003ac5 	.word	0x20003ac5

00013800 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   13800:	4b01      	ldr	r3, [pc, #4]	; (13808 <format_set+0x8>)
	return 0;
}
   13802:	2000      	movs	r0, #0
	log_format_current = log_type;
   13804:	6019      	str	r1, [r3, #0]
}
   13806:	4770      	bx	lr
   13808:	20002558 	.word	0x20002558

0001380c <panic>:
	panic_mode = true;
   1380c:	4b02      	ldr	r3, [pc, #8]	; (13818 <panic+0xc>)
	log_output_flush(output);
   1380e:	4803      	ldr	r0, [pc, #12]	; (1381c <panic+0x10>)
   13810:	2201      	movs	r2, #1
   13812:	701a      	strb	r2, [r3, #0]
   13814:	f012 bec7 	b.w	265a6 <log_output_flush>
   13818:	20003ac6 	.word	0x20003ac6
   1381c:	0002b0d8 	.word	0x0002b0d8

00013820 <dropped>:
	log_output_dropped_process(output, cnt);
   13820:	4801      	ldr	r0, [pc, #4]	; (13828 <dropped+0x8>)
   13822:	f7ff bf61 	b.w	136e8 <log_output_dropped_process>
   13826:	bf00      	nop
   13828:	0002b0d8 	.word	0x0002b0d8

0001382c <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1382c:	4b06      	ldr	r3, [pc, #24]	; (13848 <process+0x1c>)
{
   1382e:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13830:	6818      	ldr	r0, [r3, #0]
{
   13832:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13834:	f7ff fb50 	bl	12ed8 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
   13838:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1383a:	4603      	mov	r3, r0
}
   1383c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
   13840:	4802      	ldr	r0, [pc, #8]	; (1384c <process+0x20>)
   13842:	220f      	movs	r2, #15
   13844:	4718      	bx	r3
   13846:	bf00      	nop
   13848:	20002558 	.word	0x20002558
   1384c:	0002b0d8 	.word	0x0002b0d8

00013850 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   13850:	4b05      	ldr	r3, [pc, #20]	; (13868 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
   13852:	781b      	ldrb	r3, [r3, #0]
   13854:	b11b      	cbz	r3, 1385e <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   13856:	f241 3088 	movw	r0, #5000	; 0x1388
   1385a:	f016 bdf3 	b.w	2a444 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   1385e:	20a4      	movs	r0, #164	; 0xa4
   13860:	2100      	movs	r1, #0
   13862:	f00e ba63 	b.w	21d2c <z_impl_k_sleep>
   13866:	bf00      	nop
   13868:	20003ac6 	.word	0x20003ac6

0001386c <data_out_block_mode>:
{
   1386c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   13870:	f8df 907c 	ldr.w	r9, [pc, #124]	; 138f0 <data_out_block_mode+0x84>
   13874:	4d1f      	ldr	r5, [pc, #124]	; (138f4 <data_out_block_mode+0x88>)
{
   13876:	4680      	mov	r8, r0
   13878:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   1387a:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
   1387c:	f899 6000 	ldrb.w	r6, [r9]
   13880:	b996      	cbnz	r6, 138a8 <data_out_block_mode+0x3c>
			RTT_LOCK();
   13882:	f00d f9b1 	bl	20be8 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   13886:	4630      	mov	r0, r6
   13888:	463a      	mov	r2, r7
   1388a:	4641      	mov	r1, r8
   1388c:	f00d f926 	bl	20adc <SEGGER_RTT_WriteSkipNoLock>
   13890:	4606      	mov	r6, r0
			RTT_UNLOCK();
   13892:	f00d f9b3 	bl	20bfc <zephyr_rtt_mutex_unlock>
		if (ret) {
   13896:	b1fe      	cbz	r6, 138d8 <data_out_block_mode+0x6c>
	host_present = true;
   13898:	2301      	movs	r3, #1
   1389a:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
   1389c:	f899 3000 	ldrb.w	r3, [r9]
   138a0:	b96b      	cbnz	r3, 138be <data_out_block_mode+0x52>
}
   138a2:	4638      	mov	r0, r7
   138a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   138a8:	463a      	mov	r2, r7
   138aa:	4641      	mov	r1, r8
   138ac:	2000      	movs	r0, #0
   138ae:	f00d f915 	bl	20adc <SEGGER_RTT_WriteSkipNoLock>
   138b2:	4606      	mov	r6, r0
   138b4:	e7ef      	b.n	13896 <data_out_block_mode+0x2a>
	if (retry_cnt == 0) {
   138b6:	b95c      	cbnz	r4, 138d0 <data_out_block_mode+0x64>
		host_present = false;
   138b8:	702c      	strb	r4, [r5, #0]
   138ba:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   138be:	2000      	movs	r0, #0
   138c0:	f00d f988 	bl	20bd4 <SEGGER_RTT_HasDataUp>
   138c4:	2800      	cmp	r0, #0
   138c6:	d0ec      	beq.n	138a2 <data_out_block_mode+0x36>
   138c8:	782b      	ldrb	r3, [r5, #0]
   138ca:	2b00      	cmp	r3, #0
   138cc:	d1f3      	bne.n	138b6 <data_out_block_mode+0x4a>
   138ce:	e7e8      	b.n	138a2 <data_out_block_mode+0x36>
			on_failed_write(retry_cnt--);
   138d0:	3c01      	subs	r4, #1
   138d2:	f7ff ffbd 	bl	13850 <on_failed_write.part.0>
   138d6:	e7f2      	b.n	138be <data_out_block_mode+0x52>
		} else if (host_present) {
   138d8:	782b      	ldrb	r3, [r5, #0]
   138da:	b113      	cbz	r3, 138e2 <data_out_block_mode+0x76>
	if (retry_cnt == 0) {
   138dc:	3c01      	subs	r4, #1
   138de:	d104      	bne.n	138ea <data_out_block_mode+0x7e>
		host_present = false;
   138e0:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   138e2:	782b      	ldrb	r3, [r5, #0]
   138e4:	2b00      	cmp	r3, #0
   138e6:	d1c9      	bne.n	1387c <data_out_block_mode+0x10>
   138e8:	e7db      	b.n	138a2 <data_out_block_mode+0x36>
   138ea:	f7ff ffb1 	bl	13850 <on_failed_write.part.0>
   138ee:	e7f8      	b.n	138e2 <data_out_block_mode+0x76>
   138f0:	20003ac6 	.word	0x20003ac6
   138f4:	20003ac5 	.word	0x20003ac5

000138f8 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
   138f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
   138fa:	2407      	movs	r4, #7
   138fc:	9402      	str	r4, [sp, #8]
   138fe:	4c04      	ldr	r4, [pc, #16]	; (13910 <read_pnp_id+0x18>)
   13900:	9401      	str	r4, [sp, #4]
   13902:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   13906:	9400      	str	r4, [sp, #0]
   13908:	f014 fdae 	bl	28468 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
   1390c:	b004      	add	sp, #16
   1390e:	bd10      	pop	{r4, pc}
   13910:	200008f0 	.word	0x200008f0

00013914 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   13914:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   13916:	4c08      	ldr	r4, [pc, #32]	; (13938 <read_blvl+0x24>)
{
   13918:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   1391a:	7824      	ldrb	r4, [r4, #0]
   1391c:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   13920:	2401      	movs	r4, #1
   13922:	9402      	str	r4, [sp, #8]
   13924:	f10d 0417 	add.w	r4, sp, #23
   13928:	9401      	str	r4, [sp, #4]
   1392a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   1392e:	9400      	str	r4, [sp, #0]
   13930:	f014 fd9a 	bl	28468 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   13934:	b006      	add	sp, #24
   13936:	bd10      	pop	{r4, pc}
   13938:	200008f7 	.word	0x200008f7

0001393c <blvl_ccc_cfg_changed>:
{
   1393c:	b580      	push	{r7, lr}
	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
   1393e:	4a0c      	ldr	r2, [pc, #48]	; (13970 <blvl_ccc_cfg_changed+0x34>)
   13940:	4b0c      	ldr	r3, [pc, #48]	; (13974 <blvl_ccc_cfg_changed+0x38>)
{
   13942:	af00      	add	r7, sp, #0
	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
   13944:	b088      	sub	sp, #32
   13946:	2901      	cmp	r1, #1
   13948:	bf18      	it	ne
   1394a:	4613      	movne	r3, r2
   1394c:	466a      	mov	r2, sp
   1394e:	490a      	ldr	r1, [pc, #40]	; (13978 <blvl_ccc_cfg_changed+0x3c>)
   13950:	e9c2 1305 	strd	r1, r3, [r2, #20]
   13954:	2302      	movs	r3, #2
   13956:	7713      	strb	r3, [r2, #28]
   13958:	4b08      	ldr	r3, [pc, #32]	; (1397c <blvl_ccc_cfg_changed+0x40>)
   1395a:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   1395e:	4808      	ldr	r0, [pc, #32]	; (13980 <blvl_ccc_cfg_changed+0x44>)
   13960:	2300      	movs	r3, #0
   13962:	f44f 51d6 	mov.w	r1, #6848	; 0x1ac0
   13966:	f7ff fc77 	bl	13258 <z_impl_z_log_msg_static_create>
}
   1396a:	46bd      	mov	sp, r7
   1396c:	bd80      	pop	{r7, pc}
   1396e:	bf00      	nop
   13970:	0002bd49 	.word	0x0002bd49
   13974:	0002bd41 	.word	0x0002bd41
   13978:	0002bd52 	.word	0x0002bd52
   1397c:	01000003 	.word	0x01000003
   13980:	0002abc8 	.word	0x0002abc8

00013984 <hrs_init>:

static int hrs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	hrs_blsc = 0x01;
   13984:	4b02      	ldr	r3, [pc, #8]	; (13990 <hrs_init+0xc>)
   13986:	2201      	movs	r2, #1
   13988:	701a      	strb	r2, [r3, #0]

	return 0;
}
   1398a:	2000      	movs	r0, #0
   1398c:	4770      	bx	lr
   1398e:	bf00      	nop
   13990:	20003ac7 	.word	0x20003ac7

00013994 <read_blsc>:
{
   13994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
   13996:	2401      	movs	r4, #1
   13998:	9402      	str	r4, [sp, #8]
   1399a:	4c04      	ldr	r4, [pc, #16]	; (139ac <read_blsc+0x18>)
   1399c:	9401      	str	r4, [sp, #4]
   1399e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   139a2:	9400      	str	r4, [sp, #0]
   139a4:	f014 fd60 	bl	28468 <bt_gatt_attr_read>
}
   139a8:	b004      	add	sp, #16
   139aa:	bd10      	pop	{r4, pc}
   139ac:	20003ac7 	.word	0x20003ac7

000139b0 <hrmc_ccc_cfg_changed>:
{
   139b0:	b580      	push	{r7, lr}
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
   139b2:	4a0c      	ldr	r2, [pc, #48]	; (139e4 <hrmc_ccc_cfg_changed+0x34>)
   139b4:	4b0c      	ldr	r3, [pc, #48]	; (139e8 <hrmc_ccc_cfg_changed+0x38>)
{
   139b6:	af00      	add	r7, sp, #0
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
   139b8:	b088      	sub	sp, #32
   139ba:	2901      	cmp	r1, #1
   139bc:	bf18      	it	ne
   139be:	4613      	movne	r3, r2
   139c0:	466a      	mov	r2, sp
   139c2:	490a      	ldr	r1, [pc, #40]	; (139ec <hrmc_ccc_cfg_changed+0x3c>)
   139c4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   139c8:	2302      	movs	r3, #2
   139ca:	7713      	strb	r3, [r2, #28]
   139cc:	4b08      	ldr	r3, [pc, #32]	; (139f0 <hrmc_ccc_cfg_changed+0x40>)
   139ce:	f842 3f10 	str.w	r3, [r2, #16]!
   139d2:	4808      	ldr	r0, [pc, #32]	; (139f4 <hrmc_ccc_cfg_changed+0x44>)
   139d4:	2300      	movs	r3, #0
   139d6:	f44f 51d6 	mov.w	r1, #6848	; 0x1ac0
   139da:	f7ff fc3d 	bl	13258 <z_impl_z_log_msg_static_create>
}
   139de:	46bd      	mov	sp, r7
   139e0:	bd80      	pop	{r7, pc}
   139e2:	bf00      	nop
   139e4:	0002bd49 	.word	0x0002bd49
   139e8:	0002bd41 	.word	0x0002bd41
   139ec:	0002bd6b 	.word	0x0002bd6b
   139f0:	01000003 	.word	0x01000003
   139f4:	0002ac70 	.word	0x0002ac70

000139f8 <set_alert_level>:

static struct alerting_device devices[CONFIG_BT_MAX_CONN];
static enum bt_ias_alert_lvl curr_lvl;

static void set_alert_level(void)
{
   139f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	enum bt_ias_alert_lvl alert_level;

	alert_level = devices[0].alert_level;
   139fa:	4b12      	ldr	r3, [pc, #72]	; (13a44 <set_alert_level+0x4c>)
		if (alert_level < devices[i].alert_level) {
			alert_level = devices[i].alert_level;
		}
	}

	if (curr_lvl == alert_level) {
   139fc:	4f12      	ldr	r7, [pc, #72]	; (13a48 <set_alert_level+0x50>)
	alert_level = devices[0].alert_level;
   139fe:	781c      	ldrb	r4, [r3, #0]
	if (curr_lvl == alert_level) {
   13a00:	783b      	ldrb	r3, [r7, #0]
   13a02:	42a3      	cmp	r3, r4
   13a04:	d00b      	beq.n	13a1e <set_alert_level+0x26>
		return;
	}

	if (alert_level == BT_IAS_ALERT_LVL_HIGH_ALERT) {
   13a06:	2c02      	cmp	r4, #2
   13a08:	4e10      	ldr	r6, [pc, #64]	; (13a4c <set_alert_level+0x54>)
   13a0a:	d109      	bne.n	13a20 <set_alert_level+0x28>
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   13a0c:	4d10      	ldr	r5, [pc, #64]	; (13a50 <set_alert_level+0x58>)
   13a0e:	e003      	b.n	13a18 <set_alert_level+0x20>
			if (cb->high_alert) {
   13a10:	68ab      	ldr	r3, [r5, #8]
   13a12:	b103      	cbz	r3, 13a16 <set_alert_level+0x1e>
				cb->high_alert();
   13a14:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   13a16:	350c      	adds	r5, #12
   13a18:	42b5      	cmp	r5, r6
   13a1a:	d3f9      	bcc.n	13a10 <set_alert_level+0x18>
				cb->no_alert();
			}
		}
		LOG_DBG("No alert");
	}
	curr_lvl = alert_level;
   13a1c:	703c      	strb	r4, [r7, #0]
}
   13a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (alert_level == BT_IAS_ALERT_LVL_MILD_ALERT) {
   13a20:	2c01      	cmp	r4, #1
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   13a22:	4d0b      	ldr	r5, [pc, #44]	; (13a50 <set_alert_level+0x58>)
	} else if (alert_level == BT_IAS_ALERT_LVL_MILD_ALERT) {
   13a24:	d00a      	beq.n	13a3c <set_alert_level+0x44>
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   13a26:	42b5      	cmp	r5, r6
   13a28:	d2f8      	bcs.n	13a1c <set_alert_level+0x24>
			if (cb->no_alert) {
   13a2a:	682b      	ldr	r3, [r5, #0]
   13a2c:	b103      	cbz	r3, 13a30 <set_alert_level+0x38>
				cb->no_alert();
   13a2e:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   13a30:	350c      	adds	r5, #12
   13a32:	e7f8      	b.n	13a26 <set_alert_level+0x2e>
			if (cb->mild_alert) {
   13a34:	686b      	ldr	r3, [r5, #4]
   13a36:	b103      	cbz	r3, 13a3a <set_alert_level+0x42>
				cb->mild_alert();
   13a38:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   13a3a:	350c      	adds	r5, #12
   13a3c:	42b5      	cmp	r5, r6
   13a3e:	d3f9      	bcc.n	13a34 <set_alert_level+0x3c>
   13a40:	e7ec      	b.n	13a1c <set_alert_level+0x24>
   13a42:	bf00      	nop
   13a44:	20003ac9 	.word	0x20003ac9
   13a48:	20003ac8 	.word	0x20003ac8
   13a4c:	0002abc8 	.word	0x0002abc8
   13a50:	0002abc8 	.word	0x0002abc8

00013a54 <disconnected>:

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
   13a54:	b508      	push	{r3, lr}
	devices[bt_conn_index(conn)].alert_level = BT_IAS_ALERT_LVL_NO_ALERT;
   13a56:	f004 f815 	bl	17a84 <bt_conn_index>
   13a5a:	4b03      	ldr	r3, [pc, #12]	; (13a68 <disconnected+0x14>)
   13a5c:	2200      	movs	r2, #0
   13a5e:	541a      	strb	r2, [r3, r0]
	set_alert_level();
}
   13a60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	set_alert_level();
   13a64:	f7ff bfc8 	b.w	139f8 <set_alert_level>
   13a68:	20003ac9 	.word	0x20003ac9

00013a6c <bt_ias_write_alert_lvl>:
	return 0;
}

static ssize_t bt_ias_write_alert_lvl(struct bt_conn *conn, const struct bt_gatt_attr *attr,
				      const void *buf, uint16_t len, uint16_t offset, uint8_t flags)
{
   13a6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   13a6e:	461c      	mov	r4, r3
   13a70:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   13a74:	4606      	mov	r6, r0
   13a76:	4611      	mov	r1, r2
	struct net_buf_simple data;
	enum bt_ias_alert_lvl alert_val;

	if (offset > 0) {
   13a78:	b9ab      	cbnz	r3, 13aa6 <bt_ias_write_alert_lvl+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (len != BT_IAS_ALERT_LVL_LEN) {
   13a7a:	2c01      	cmp	r4, #1
   13a7c:	d116      	bne.n	13aac <bt_ias_write_alert_lvl+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	net_buf_simple_init_with_data(&data, (void *)buf, len);
   13a7e:	4622      	mov	r2, r4
   13a80:	a801      	add	r0, sp, #4
   13a82:	f015 faa1 	bl	28fc8 <net_buf_simple_init_with_data>
	alert_val = net_buf_simple_pull_u8(&data);
   13a86:	a801      	add	r0, sp, #4
   13a88:	f015 fb53 	bl	29132 <net_buf_simple_pull_u8>
   13a8c:	4605      	mov	r5, r0
	devices[bt_conn_index(conn)].alert_level = alert_val;
   13a8e:	4630      	mov	r0, r6
   13a90:	f003 fff8 	bl	17a84 <bt_conn_index>
   13a94:	4b08      	ldr	r3, [pc, #32]	; (13ab8 <bt_ias_write_alert_lvl+0x4c>)

	if (alert_val < BT_IAS_ALERT_LVL_NO_ALERT || alert_val > BT_IAS_ALERT_LVL_HIGH_ALERT) {
   13a96:	2d02      	cmp	r5, #2
	devices[bt_conn_index(conn)].alert_level = alert_val;
   13a98:	541d      	strb	r5, [r3, r0]
	if (alert_val < BT_IAS_ALERT_LVL_NO_ALERT || alert_val > BT_IAS_ALERT_LVL_HIGH_ALERT) {
   13a9a:	d80a      	bhi.n	13ab2 <bt_ias_write_alert_lvl+0x46>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
	}
	set_alert_level();
   13a9c:	f7ff ffac 	bl	139f8 <set_alert_level>

	return len;
   13aa0:	4620      	mov	r0, r4
}
   13aa2:	b004      	add	sp, #16
   13aa4:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   13aa6:	f06f 0006 	mvn.w	r0, #6
   13aaa:	e7fa      	b.n	13aa2 <bt_ias_write_alert_lvl+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   13aac:	f06f 000c 	mvn.w	r0, #12
   13ab0:	e7f7      	b.n	13aa2 <bt_ias_write_alert_lvl+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   13ab2:	f06f 0012 	mvn.w	r0, #18
   13ab6:	e7f4      	b.n	13aa2 <bt_ias_write_alert_lvl+0x36>
   13ab8:	20003ac9 	.word	0x20003ac9

00013abc <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   13abc:	4b10      	ldr	r3, [pc, #64]	; (13b00 <settings_save_one+0x44>)
{
   13abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   13ac2:	681c      	ldr	r4, [r3, #0]
{
   13ac4:	4605      	mov	r5, r0
   13ac6:	460e      	mov	r6, r1
   13ac8:	4617      	mov	r7, r2
	if (!cs) {
   13aca:	b1ac      	cbz	r4, 13af8 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   13acc:	f04f 32ff 	mov.w	r2, #4294967295
   13ad0:	f04f 33ff 	mov.w	r3, #4294967295
   13ad4:	480b      	ldr	r0, [pc, #44]	; (13b04 <settings_save_one+0x48>)
   13ad6:	f00d fb39 	bl	2114c <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   13ada:	6863      	ldr	r3, [r4, #4]
   13adc:	4632      	mov	r2, r6
   13ade:	f8d3 8008 	ldr.w	r8, [r3, #8]
   13ae2:	4629      	mov	r1, r5
   13ae4:	463b      	mov	r3, r7
   13ae6:	4620      	mov	r0, r4
   13ae8:	47c0      	blx	r8
   13aea:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   13aec:	4805      	ldr	r0, [pc, #20]	; (13b04 <settings_save_one+0x48>)
   13aee:	f00d fba5 	bl	2123c <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   13af2:	4620      	mov	r0, r4
   13af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   13af8:	f06f 0401 	mvn.w	r4, #1
   13afc:	e7f9      	b.n	13af2 <settings_save_one+0x36>
   13afe:	bf00      	nop
   13b00:	20002570 	.word	0x20002570
   13b04:	200009e0 	.word	0x200009e0

00013b08 <settings_load_subtree_direct>:
{
   13b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   13b0a:	e9cd 0101 	strd	r0, r1, [sp, #4]
   13b0e:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   13b10:	f04f 33ff 	mov.w	r3, #4294967295
   13b14:	480a      	ldr	r0, [pc, #40]	; (13b40 <settings_load_subtree_direct+0x38>)
   13b16:	f04f 32ff 	mov.w	r2, #4294967295
   13b1a:	f00d fb17 	bl	2114c <z_impl_k_mutex_lock>
	return list->head;
   13b1e:	4b09      	ldr	r3, [pc, #36]	; (13b44 <settings_load_subtree_direct+0x3c>)
   13b20:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   13b22:	b134      	cbz	r4, 13b32 <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
   13b24:	6863      	ldr	r3, [r4, #4]
   13b26:	4620      	mov	r0, r4
   13b28:	681b      	ldr	r3, [r3, #0]
   13b2a:	a901      	add	r1, sp, #4
   13b2c:	4798      	blx	r3
	return node->next;
   13b2e:	6824      	ldr	r4, [r4, #0]
   13b30:	e7f7      	b.n	13b22 <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
   13b32:	4803      	ldr	r0, [pc, #12]	; (13b40 <settings_load_subtree_direct+0x38>)
   13b34:	f00d fb82 	bl	2123c <z_impl_k_mutex_unlock>
}
   13b38:	2000      	movs	r0, #0
   13b3a:	b004      	add	sp, #16
   13b3c:	bd10      	pop	{r4, pc}
   13b3e:	bf00      	nop
   13b40:	200009e0 	.word	0x200009e0
   13b44:	20002568 	.word	0x20002568

00013b48 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   13b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13b4c:	4605      	mov	r5, r0
	__asm__ volatile(
   13b4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13b52:	f3ef 8611 	mrs	r6, BASEPRI
   13b56:	f383 8812 	msr	BASEPRI_MAX, r3
   13b5a:	f3bf 8f6f 	isb	sy
	return list->head;
   13b5e:	4b0e      	ldr	r3, [pc, #56]	; (13b98 <pm_state_notify+0x50>)
   13b60:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13b62:	b19c      	cbz	r4, 13b8c <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   13b64:	4f0d      	ldr	r7, [pc, #52]	; (13b9c <pm_state_notify+0x54>)
   13b66:	f8df 8038 	ldr.w	r8, [pc, #56]	; 13ba0 <pm_state_notify+0x58>
   13b6a:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   13b6e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   13b72:	2d00      	cmp	r5, #0
   13b74:	bf08      	it	eq
   13b76:	4613      	moveq	r3, r2
		if (callback) {
   13b78:	b12b      	cbz	r3, 13b86 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   13b7a:	f898 2014 	ldrb.w	r2, [r8, #20]
   13b7e:	fb09 f202 	mul.w	r2, r9, r2
   13b82:	5cb8      	ldrb	r0, [r7, r2]
   13b84:	4798      	blx	r3
	return node->next;
   13b86:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13b88:	2c00      	cmp	r4, #0
   13b8a:	d1f0      	bne.n	13b6e <pm_state_notify+0x26>
	__asm__ volatile(
   13b8c:	f386 8811 	msr	BASEPRI, r6
   13b90:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   13b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13b98:	20002574 	.word	0x20002574
   13b9c:	20002588 	.word	0x20002588
   13ba0:	20002f8c 	.word	0x20002f8c

00013ba4 <pm_system_resume>:

void pm_system_resume(void)
{
   13ba4:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = CURRENT_CPU;
   13ba6:	4b1a      	ldr	r3, [pc, #104]	; (13c10 <pm_system_resume+0x6c>)
   13ba8:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13baa:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   13bae:	f004 031f 	and.w	r3, r4, #31
   13bb2:	2201      	movs	r2, #1
   13bb4:	409a      	lsls	r2, r3
   13bb6:	4b17      	ldr	r3, [pc, #92]	; (13c14 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13bb8:	0961      	lsrs	r1, r4, #5
   13bba:	43d0      	mvns	r0, r2
   13bbc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13bc0:	e853 1f00 	ldrex	r1, [r3]
   13bc4:	ea01 0500 	and.w	r5, r1, r0
   13bc8:	e843 5c00 	strex	ip, r5, [r3]
   13bcc:	f1bc 0f00 	cmp.w	ip, #0
   13bd0:	d1f6      	bne.n	13bc0 <pm_system_resume+0x1c>
   13bd2:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   13bd6:	4211      	tst	r1, r2
   13bd8:	d013      	beq.n	13c02 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
   13bda:	4b0f      	ldr	r3, [pc, #60]	; (13c18 <pm_system_resume+0x74>)
   13bdc:	4d0f      	ldr	r5, [pc, #60]	; (13c1c <pm_system_resume+0x78>)
   13bde:	b18b      	cbz	r3, 13c04 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
   13be0:	230c      	movs	r3, #12
   13be2:	4363      	muls	r3, r4
   13be4:	18ea      	adds	r2, r5, r3
   13be6:	5ce8      	ldrb	r0, [r5, r3]
   13be8:	7851      	ldrb	r1, [r2, #1]
   13bea:	f013 f8ba 	bl	26d62 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   13bee:	2000      	movs	r0, #0
   13bf0:	f7ff ffaa 	bl	13b48 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   13bf4:	230c      	movs	r3, #12
   13bf6:	435c      	muls	r4, r3
   13bf8:	192a      	adds	r2, r5, r4
   13bfa:	2300      	movs	r3, #0
   13bfc:	512b      	str	r3, [r5, r4]
   13bfe:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   13c02:	bd38      	pop	{r3, r4, r5, pc}
   13c04:	f383 8811 	msr	BASEPRI, r3
   13c08:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   13c0c:	e7ef      	b.n	13bee <pm_system_resume+0x4a>
   13c0e:	bf00      	nop
   13c10:	20002f8c 	.word	0x20002f8c
   13c14:	20002594 	.word	0x20002594
   13c18:	00026d63 	.word	0x00026d63
   13c1c:	20002588 	.word	0x20002588

00013c20 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   13c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   13c24:	4b33      	ldr	r3, [pc, #204]	; (13cf4 <pm_system_suspend+0xd4>)
{
   13c26:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   13c28:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   13c2a:	f04f 0340 	mov.w	r3, #64	; 0x40
   13c2e:	f3ef 8811 	mrs	r8, BASEPRI
   13c32:	f383 8812 	msr	BASEPRI_MAX, r3
   13c36:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   13c3a:	240c      	movs	r4, #12
   13c3c:	4b2e      	ldr	r3, [pc, #184]	; (13cf8 <pm_system_suspend+0xd8>)
   13c3e:	4e2f      	ldr	r6, [pc, #188]	; (13cfc <pm_system_suspend+0xdc>)
   13c40:	436c      	muls	r4, r5
   13c42:	191a      	adds	r2, r3, r4
   13c44:	5d19      	ldrb	r1, [r3, r4]
   13c46:	2900      	cmp	r1, #0
   13c48:	d049      	beq.n	13cde <pm_system_suspend+0xbe>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   13c4a:	ca07      	ldmia	r2, {r0, r1, r2}
   13c4c:	eb06 0c04 	add.w	ip, r6, r4
   13c50:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   13c54:	2200      	movs	r2, #0
   13c56:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   13c58:	f388 8811 	msr	BASEPRI, r8
   13c5c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   13c60:	230c      	movs	r3, #12
   13c62:	436b      	muls	r3, r5
   13c64:	18f2      	adds	r2, r6, r3
   13c66:	5cf0      	ldrb	r0, [r6, r3]
   13c68:	b3b8      	cbz	r0, 13cda <pm_system_suspend+0xba>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   13c6a:	1c7b      	adds	r3, r7, #1
   13c6c:	d00f      	beq.n	13c8e <pm_system_suspend+0x6e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   13c6e:	f8d2 c008 	ldr.w	ip, [r2, #8]
   13c72:	4823      	ldr	r0, [pc, #140]	; (13d00 <pm_system_suspend+0xe0>)
   13c74:	4a23      	ldr	r2, [pc, #140]	; (13d04 <pm_system_suspend+0xe4>)
   13c76:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   13c7a:	2100      	movs	r1, #0
   13c7c:	2300      	movs	r3, #0
   13c7e:	fbec 0104 	umlal	r0, r1, ip, r4
   13c82:	f7ec fcc1 	bl	608 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   13c86:	2101      	movs	r1, #1
   13c88:	1a38      	subs	r0, r7, r0
   13c8a:	f016 fbbb 	bl	2a404 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   13c8e:	f00d fdcd 	bl	2182c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   13c92:	2001      	movs	r0, #1
   13c94:	f7ff ff58 	bl	13b48 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13c98:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   13c9c:	f005 021f 	and.w	r2, r5, #31
   13ca0:	2101      	movs	r1, #1
   13ca2:	4091      	lsls	r1, r2
   13ca4:	4a18      	ldr	r2, [pc, #96]	; (13d08 <pm_system_suspend+0xe8>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13ca6:	096b      	lsrs	r3, r5, #5
   13ca8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   13cac:	e853 2f00 	ldrex	r2, [r3]
   13cb0:	430a      	orrs	r2, r1
   13cb2:	e843 2000 	strex	r0, r2, [r3]
   13cb6:	2800      	cmp	r0, #0
   13cb8:	d1f8      	bne.n	13cac <pm_system_suspend+0x8c>
   13cba:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   13cbe:	4b13      	ldr	r3, [pc, #76]	; (13d0c <pm_system_suspend+0xec>)
   13cc0:	b133      	cbz	r3, 13cd0 <pm_system_suspend+0xb0>
		pm_state_set(info->state, info->substate_id);
   13cc2:	200c      	movs	r0, #12
   13cc4:	4368      	muls	r0, r5
   13cc6:	1833      	adds	r3, r6, r0
   13cc8:	5c30      	ldrb	r0, [r6, r0]
   13cca:	7859      	ldrb	r1, [r3, #1]
   13ccc:	f013 f83d 	bl	26d4a <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   13cd0:	f7ff ff68 	bl	13ba4 <pm_system_resume>
	k_sched_unlock();
   13cd4:	f00d ff7a 	bl	21bcc <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   13cd8:	2001      	movs	r0, #1
}
   13cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   13cde:	4601      	mov	r1, r0
   13ce0:	4628      	mov	r0, r5
   13ce2:	f000 f815 	bl	13d10 <pm_policy_next_state>
		if (info != NULL) {
   13ce6:	2800      	cmp	r0, #0
   13ce8:	d0b6      	beq.n	13c58 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   13cea:	c807      	ldmia	r0, {r0, r1, r2}
   13cec:	4434      	add	r4, r6
   13cee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   13cf2:	e7b1      	b.n	13c58 <pm_system_suspend+0x38>
   13cf4:	20002f8c 	.word	0x20002f8c
   13cf8:	2000257c 	.word	0x2000257c
   13cfc:	20002588 	.word	0x20002588
   13d00:	000f423f 	.word	0x000f423f
   13d04:	000f4240 	.word	0x000f4240
   13d08:	20002594 	.word	0x20002594
   13d0c:	00026d4b 	.word	0x00026d4b

00013d10 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   13d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d14:	b085      	sub	sp, #20
   13d16:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   13d18:	a903      	add	r1, sp, #12
   13d1a:	f000 f841 	bl	13da0 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
		const struct pm_state_info *state = &cpu_states[i];
   13d1e:	9b03      	ldr	r3, [sp, #12]
   13d20:	9301      	str	r3, [sp, #4]

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   13d22:	4b1c      	ldr	r3, [pc, #112]	; (13d94 <pm_policy_next_state+0x84>)
   13d24:	f8df 8070 	ldr.w	r8, [pc, #112]	; 13d98 <pm_policy_next_state+0x88>
   13d28:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   13d2c:	1e44      	subs	r4, r0, #1
   13d2e:	b224      	sxth	r4, r4
   13d30:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   13d34:	f04f 0b00 	mov.w	fp, #0
   13d38:	1c63      	adds	r3, r4, #1
   13d3a:	d104      	bne.n	13d46 <pm_policy_next_state+0x36>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   13d3c:	2500      	movs	r5, #0
}
   13d3e:	4628      	mov	r0, r5
   13d40:	b005      	add	sp, #20
   13d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   13d46:	9b01      	ldr	r3, [sp, #4]
   13d48:	4a14      	ldr	r2, [pc, #80]	; (13d9c <pm_policy_next_state+0x8c>)
   13d4a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   13d4e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   13d52:	46c4      	mov	ip, r8
   13d54:	6868      	ldr	r0, [r5, #4]
   13d56:	4659      	mov	r1, fp
   13d58:	fbe0 c107 	umlal	ip, r1, r0, r7
   13d5c:	2300      	movs	r3, #0
   13d5e:	4660      	mov	r0, ip
   13d60:	f7ec fc52 	bl	608 <__aeabi_uldivmod>
   13d64:	4681      	mov	r9, r0
   13d66:	68a8      	ldr	r0, [r5, #8]
   13d68:	4a0c      	ldr	r2, [pc, #48]	; (13d9c <pm_policy_next_state+0x8c>)
   13d6a:	46c4      	mov	ip, r8
   13d6c:	4659      	mov	r1, fp
   13d6e:	fbe0 c107 	umlal	ip, r1, r0, r7
   13d72:	2300      	movs	r3, #0
   13d74:	4660      	mov	r0, ip
   13d76:	f7ec fc47 	bl	608 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   13d7a:	f1ba 3fff 	cmp.w	sl, #4294967295
   13d7e:	d001      	beq.n	13d84 <pm_policy_next_state+0x74>
   13d80:	4582      	cmp	sl, r0
   13d82:	d904      	bls.n	13d8e <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   13d84:	1c72      	adds	r2, r6, #1
   13d86:	d0da      	beq.n	13d3e <pm_policy_next_state+0x2e>
		    (ticks >= (min_residency + exit_latency))) {
   13d88:	4448      	add	r0, r9
		if ((ticks == K_TICKS_FOREVER) ||
   13d8a:	42b0      	cmp	r0, r6
   13d8c:	d9d7      	bls.n	13d3e <pm_policy_next_state+0x2e>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   13d8e:	3c01      	subs	r4, #1
   13d90:	b224      	sxth	r4, r4
   13d92:	e7d1      	b.n	13d38 <pm_policy_next_state+0x28>
   13d94:	200005b0 	.word	0x200005b0
   13d98:	000f423f 	.word	0x000f423f
   13d9c:	000f4240 	.word	0x000f4240

00013da0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   13da0:	b908      	cbnz	r0, 13da6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   13da2:	4b02      	ldr	r3, [pc, #8]	; (13dac <pm_state_cpu_get_all+0xc>)
   13da4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   13da6:	2000      	movs	r0, #0
   13da8:	4770      	bx	lr
   13daa:	bf00      	nop
   13dac:	0002b2a0 	.word	0x0002b2a0

00013db0 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   13db0:	4904      	ldr	r1, [pc, #16]	; (13dc4 <sub_bytes+0x14>)
   13db2:	1e43      	subs	r3, r0, #1
   13db4:	300f      	adds	r0, #15
   13db6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   13dba:	5c8a      	ldrb	r2, [r1, r2]
   13dbc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   13dbe:	4283      	cmp	r3, r0
   13dc0:	d1f9      	bne.n	13db6 <sub_bytes+0x6>
	}
}
   13dc2:	4770      	bx	lr
   13dc4:	0002bd92 	.word	0x0002bd92

00013dc8 <tc_aes128_set_encrypt_key>:
{
   13dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   13dca:	4e26      	ldr	r6, [pc, #152]	; (13e64 <tc_aes128_set_encrypt_key+0x9c>)
{
   13dcc:	4607      	mov	r7, r0
   13dce:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   13dd0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   13dd2:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   13dd4:	ad01      	add	r5, sp, #4
   13dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13dd8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   13dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13ddc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   13de0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   13de4:	4638      	mov	r0, r7
   13de6:	2f00      	cmp	r7, #0
   13de8:	d038      	beq.n	13e5c <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   13dea:	2c00      	cmp	r4, #0
   13dec:	d038      	beq.n	13e60 <tc_aes128_set_encrypt_key+0x98>
   13dee:	1f38      	subs	r0, r7, #4
   13df0:	4621      	mov	r1, r4
   13df2:	4602      	mov	r2, r0
   13df4:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   13df6:	784b      	ldrb	r3, [r1, #1]
   13df8:	780d      	ldrb	r5, [r1, #0]
   13dfa:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   13dfc:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   13e00:	78cd      	ldrb	r5, [r1, #3]
   13e02:	432b      	orrs	r3, r5
   13e04:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   13e06:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   13e08:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   13e0c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   13e0e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   13e12:	d1f0      	bne.n	13df6 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   13e14:	4c14      	ldr	r4, [pc, #80]	; (13e68 <tc_aes128_set_encrypt_key+0xa0>)
   13e16:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   13e18:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   13e1a:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   13e1c:	d116      	bne.n	13e4c <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   13e1e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   13e22:	5ca5      	ldrb	r5, [r4, r2]
   13e24:	0e1a      	lsrs	r2, r3, #24
   13e26:	5ca2      	ldrb	r2, [r4, r2]
   13e28:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   13e2c:	f3c3 2507 	ubfx	r5, r3, #8, #8
   13e30:	b2db      	uxtb	r3, r3
   13e32:	5d65      	ldrb	r5, [r4, r5]
   13e34:	5ce3      	ldrb	r3, [r4, r3]
   13e36:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   13e3a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   13e3e:	ad0c      	add	r5, sp, #48	; 0x30
   13e40:	f021 0303 	bic.w	r3, r1, #3
   13e44:	442b      	add	r3, r5
   13e46:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   13e4a:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   13e4c:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   13e50:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   13e52:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   13e54:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   13e56:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   13e58:	d1de      	bne.n	13e18 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   13e5a:	2001      	movs	r0, #1
}
   13e5c:	b00d      	add	sp, #52	; 0x34
   13e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   13e60:	4620      	mov	r0, r4
   13e62:	e7fb      	b.n	13e5c <tc_aes128_set_encrypt_key+0x94>
   13e64:	0002af60 	.word	0x0002af60
   13e68:	0002bd92 	.word	0x0002bd92

00013e6c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   13e6c:	4801      	ldr	r0, [pc, #4]	; (13e74 <nrf_cc3xx_platform_abort_init+0x8>)
   13e6e:	f00e be7d 	b.w	22b6c <nrf_cc3xx_platform_set_abort>
   13e72:	bf00      	nop
   13e74:	0002b2a0 	.word	0x0002b2a0

00013e78 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13e78:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   13e7a:	4604      	mov	r4, r0
   13e7c:	b918      	cbnz	r0, 13e86 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   13e7e:	4b0d      	ldr	r3, [pc, #52]	; (13eb4 <mutex_free_platform+0x3c>)
   13e80:	480d      	ldr	r0, [pc, #52]	; (13eb8 <mutex_free_platform+0x40>)
   13e82:	685b      	ldr	r3, [r3, #4]
   13e84:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   13e86:	6861      	ldr	r1, [r4, #4]
   13e88:	2908      	cmp	r1, #8
   13e8a:	d00d      	beq.n	13ea8 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   13e8c:	f031 0304 	bics.w	r3, r1, #4
   13e90:	d00a      	beq.n	13ea8 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   13e92:	f011 0102 	ands.w	r1, r1, #2
   13e96:	d008      	beq.n	13eaa <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   13e98:	4808      	ldr	r0, [pc, #32]	; (13ebc <mutex_free_platform+0x44>)
   13e9a:	4621      	mov	r1, r4
   13e9c:	f015 ff50 	bl	29d40 <k_mem_slab_free>
        mutex->mutex = NULL;
   13ea0:	2300      	movs	r3, #0
   13ea2:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   13ea4:	2300      	movs	r3, #0
   13ea6:	6063      	str	r3, [r4, #4]
}
   13ea8:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   13eaa:	6820      	ldr	r0, [r4, #0]
   13eac:	2214      	movs	r2, #20
   13eae:	f012 ff3e 	bl	26d2e <memset>
   13eb2:	e7f7      	b.n	13ea4 <mutex_free_platform+0x2c>
   13eb4:	2000079c 	.word	0x2000079c
   13eb8:	0002be92 	.word	0x0002be92
   13ebc:	20002598 	.word	0x20002598

00013ec0 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13ec0:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   13ec2:	b308      	cbz	r0, 13f08 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   13ec4:	6843      	ldr	r3, [r0, #4]
   13ec6:	2b04      	cmp	r3, #4
   13ec8:	d110      	bne.n	13eec <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13eca:	2201      	movs	r2, #1
   13ecc:	6803      	ldr	r3, [r0, #0]
   13ece:	f3bf 8f5b 	dmb	ish
   13ed2:	e853 1f00 	ldrex	r1, [r3]
   13ed6:	2900      	cmp	r1, #0
   13ed8:	d103      	bne.n	13ee2 <mutex_lock_platform+0x22>
   13eda:	e843 2000 	strex	r0, r2, [r3]
   13ede:	2800      	cmp	r0, #0
   13ee0:	d1f7      	bne.n	13ed2 <mutex_lock_platform+0x12>
   13ee2:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13ee6:	d10b      	bne.n	13f00 <mutex_lock_platform+0x40>
   13ee8:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   13eea:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   13eec:	b153      	cbz	r3, 13f04 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   13eee:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   13ef0:	f04f 32ff 	mov.w	r2, #4294967295
   13ef4:	f04f 33ff 	mov.w	r3, #4294967295
   13ef8:	f00d f928 	bl	2114c <z_impl_k_mutex_lock>
        if (ret == 0) {
   13efc:	2800      	cmp	r0, #0
   13efe:	d0f3      	beq.n	13ee8 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13f00:	4803      	ldr	r0, [pc, #12]	; (13f10 <mutex_lock_platform+0x50>)
   13f02:	e7f2      	b.n	13eea <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   13f04:	4803      	ldr	r0, [pc, #12]	; (13f14 <mutex_lock_platform+0x54>)
   13f06:	e7f0      	b.n	13eea <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   13f08:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   13f0c:	e7ed      	b.n	13eea <mutex_lock_platform+0x2a>
   13f0e:	bf00      	nop
   13f10:	ffff8fe9 	.word	0xffff8fe9
   13f14:	ffff8fea 	.word	0xffff8fea

00013f18 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13f18:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   13f1a:	b1d0      	cbz	r0, 13f52 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   13f1c:	6843      	ldr	r3, [r0, #4]
   13f1e:	2b04      	cmp	r3, #4
   13f20:	d111      	bne.n	13f46 <mutex_unlock_platform+0x2e>
   13f22:	2200      	movs	r2, #0
   13f24:	6803      	ldr	r3, [r0, #0]
   13f26:	f3bf 8f5b 	dmb	ish
   13f2a:	e853 1f00 	ldrex	r1, [r3]
   13f2e:	2901      	cmp	r1, #1
   13f30:	d103      	bne.n	13f3a <mutex_unlock_platform+0x22>
   13f32:	e843 2000 	strex	r0, r2, [r3]
   13f36:	2800      	cmp	r0, #0
   13f38:	d1f7      	bne.n	13f2a <mutex_unlock_platform+0x12>
   13f3a:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13f3e:	4807      	ldr	r0, [pc, #28]	; (13f5c <mutex_unlock_platform+0x44>)
   13f40:	bf08      	it	eq
   13f42:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   13f44:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   13f46:	b13b      	cbz	r3, 13f58 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   13f48:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   13f4a:	f00d f977 	bl	2123c <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   13f4e:	2000      	movs	r0, #0
   13f50:	e7f8      	b.n	13f44 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   13f52:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   13f56:	e7f5      	b.n	13f44 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   13f58:	4801      	ldr	r0, [pc, #4]	; (13f60 <mutex_unlock_platform+0x48>)
   13f5a:	e7f3      	b.n	13f44 <mutex_unlock_platform+0x2c>
   13f5c:	ffff8fe9 	.word	0xffff8fe9
   13f60:	ffff8fea 	.word	0xffff8fea

00013f64 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13f64:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   13f66:	4604      	mov	r4, r0
   13f68:	b918      	cbnz	r0, 13f72 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   13f6a:	4b16      	ldr	r3, [pc, #88]	; (13fc4 <mutex_init_platform+0x60>)
   13f6c:	4816      	ldr	r0, [pc, #88]	; (13fc8 <mutex_init_platform+0x64>)
   13f6e:	685b      	ldr	r3, [r3, #4]
   13f70:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   13f72:	6863      	ldr	r3, [r4, #4]
   13f74:	2b04      	cmp	r3, #4
   13f76:	d023      	beq.n	13fc0 <mutex_init_platform+0x5c>
   13f78:	2b08      	cmp	r3, #8
   13f7a:	d021      	beq.n	13fc0 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   13f7c:	b9cb      	cbnz	r3, 13fb2 <mutex_init_platform+0x4e>
   13f7e:	6823      	ldr	r3, [r4, #0]
   13f80:	b9bb      	cbnz	r3, 13fb2 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   13f82:	4812      	ldr	r0, [pc, #72]	; (13fcc <mutex_init_platform+0x68>)
   13f84:	f04f 32ff 	mov.w	r2, #4294967295
   13f88:	f04f 33ff 	mov.w	r3, #4294967295
   13f8c:	4621      	mov	r1, r4
   13f8e:	f00c ffdb 	bl	20f48 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   13f92:	b908      	cbnz	r0, 13f98 <mutex_init_platform+0x34>
   13f94:	6823      	ldr	r3, [r4, #0]
   13f96:	b91b      	cbnz	r3, 13fa0 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   13f98:	4b0a      	ldr	r3, [pc, #40]	; (13fc4 <mutex_init_platform+0x60>)
   13f9a:	480d      	ldr	r0, [pc, #52]	; (13fd0 <mutex_init_platform+0x6c>)
   13f9c:	685b      	ldr	r3, [r3, #4]
   13f9e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   13fa0:	6820      	ldr	r0, [r4, #0]
   13fa2:	2214      	movs	r2, #20
   13fa4:	2100      	movs	r1, #0
   13fa6:	f012 fec2 	bl	26d2e <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   13faa:	6863      	ldr	r3, [r4, #4]
   13fac:	f043 0302 	orr.w	r3, r3, #2
   13fb0:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   13fb2:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   13fb4:	f015 ff09 	bl	29dca <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   13fb8:	6863      	ldr	r3, [r4, #4]
   13fba:	f043 0301 	orr.w	r3, r3, #1
   13fbe:	6063      	str	r3, [r4, #4]
}
   13fc0:	bd10      	pop	{r4, pc}
   13fc2:	bf00      	nop
   13fc4:	2000079c 	.word	0x2000079c
   13fc8:	0002be92 	.word	0x0002be92
   13fcc:	20002598 	.word	0x20002598
   13fd0:	0002beb8 	.word	0x0002beb8

00013fd4 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   13fd4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   13fd6:	4906      	ldr	r1, [pc, #24]	; (13ff0 <nrf_cc3xx_platform_mutex_init+0x1c>)
   13fd8:	4806      	ldr	r0, [pc, #24]	; (13ff4 <nrf_cc3xx_platform_mutex_init+0x20>)
   13fda:	2340      	movs	r3, #64	; 0x40
   13fdc:	2214      	movs	r2, #20
   13fde:	f015 fe94 	bl	29d0a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   13fe2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   13fe6:	4904      	ldr	r1, [pc, #16]	; (13ff8 <nrf_cc3xx_platform_mutex_init+0x24>)
   13fe8:	4804      	ldr	r0, [pc, #16]	; (13ffc <nrf_cc3xx_platform_mutex_init+0x28>)
   13fea:	f00e be73 	b.w	22cd4 <nrf_cc3xx_platform_set_mutexes>
   13fee:	bf00      	nop
   13ff0:	200025b4 	.word	0x200025b4
   13ff4:	20002598 	.word	0x20002598
   13ff8:	0002b2b8 	.word	0x0002b2b8
   13ffc:	0002b2a8 	.word	0x0002b2a8

00014000 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   14000:	4901      	ldr	r1, [pc, #4]	; (14008 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   14002:	2210      	movs	r2, #16
	str	r2, [r1]
   14004:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   14006:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   14008:	e000ed10 	.word	0xe000ed10

0001400c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1400c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1400e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   14010:	f380 8811 	msr	BASEPRI, r0
	isb
   14014:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   14018:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   1401c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1401e:	b662      	cpsie	i
	isb
   14020:	f3bf 8f6f 	isb	sy

	bx	lr
   14024:	4770      	bx	lr
   14026:	bf00      	nop

00014028 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   14028:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1402a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1402c:	f381 8811 	msr	BASEPRI, r1

	wfe
   14030:	bf20      	wfe

	msr	BASEPRI, r0
   14032:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   14036:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   14038:	4770      	bx	lr
   1403a:	bf00      	nop

0001403c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1403c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14040:	4681      	mov	r9, r0
   14042:	af00      	add	r7, sp, #0

	if (esf != NULL) {
   14044:	460c      	mov	r4, r1
   14046:	2900      	cmp	r1, #0
   14048:	d04c      	beq.n	140e4 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1404a:	466e      	mov	r6, sp
   1404c:	b08a      	sub	sp, #40	; 0x28
   1404e:	e9d1 1200 	ldrd	r1, r2, [r1]
   14052:	68a3      	ldr	r3, [r4, #8]
   14054:	466d      	mov	r5, sp
   14056:	4827      	ldr	r0, [pc, #156]	; (140f4 <z_arm_fatal_error+0xb8>)
   14058:	46a8      	mov	r8, r5
   1405a:	f04f 0a05 	mov.w	sl, #5
   1405e:	e9c5 0105 	strd	r0, r1, [r5, #20]
   14062:	e9c5 2307 	strd	r2, r3, [r5, #28]
   14066:	f848 af10 	str.w	sl, [r8, #16]!
   1406a:	4823      	ldr	r0, [pc, #140]	; (140f8 <z_arm_fatal_error+0xbc>)
   1406c:	4642      	mov	r2, r8
   1406e:	2300      	movs	r3, #0
   14070:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   14074:	f7ff f8f0 	bl	13258 <z_impl_z_log_msg_static_create>
   14078:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1407a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   1407e:	6963      	ldr	r3, [r4, #20]
   14080:	46ad      	mov	sp, r5
   14082:	481e      	ldr	r0, [pc, #120]	; (140fc <z_arm_fatal_error+0xc0>)
   14084:	f8c5 a010 	str.w	sl, [r5, #16]
   14088:	e9c5 0105 	strd	r0, r1, [r5, #20]
   1408c:	e9c5 2307 	strd	r2, r3, [r5, #28]
   14090:	4819      	ldr	r0, [pc, #100]	; (140f8 <z_arm_fatal_error+0xbc>)
   14092:	2300      	movs	r3, #0
   14094:	4642      	mov	r2, r8
   14096:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1409a:	f7ff f8dd 	bl	13258 <z_impl_z_log_msg_static_create>
   1409e:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   140a0:	b088      	sub	sp, #32
   140a2:	69e3      	ldr	r3, [r4, #28]
   140a4:	466d      	mov	r5, sp
   140a6:	4a16      	ldr	r2, [pc, #88]	; (14100 <z_arm_fatal_error+0xc4>)
   140a8:	46a8      	mov	r8, r5
   140aa:	f04f 0a03 	mov.w	sl, #3
   140ae:	e9c5 2305 	strd	r2, r3, [r5, #20]
   140b2:	f848 af10 	str.w	sl, [r8, #16]!
   140b6:	4810      	ldr	r0, [pc, #64]	; (140f8 <z_arm_fatal_error+0xbc>)
   140b8:	2300      	movs	r3, #0
   140ba:	4642      	mov	r2, r8
   140bc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   140c0:	f7ff f8ca 	bl	13258 <z_impl_z_log_msg_static_create>
   140c4:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   140c6:	69a3      	ldr	r3, [r4, #24]
   140c8:	46ad      	mov	sp, r5
   140ca:	4a0e      	ldr	r2, [pc, #56]	; (14104 <z_arm_fatal_error+0xc8>)
   140cc:	f8c5 a010 	str.w	sl, [r5, #16]
   140d0:	e9c5 2305 	strd	r2, r3, [r5, #20]
   140d4:	4808      	ldr	r0, [pc, #32]	; (140f8 <z_arm_fatal_error+0xbc>)
   140d6:	2300      	movs	r3, #0
   140d8:	4642      	mov	r2, r8
   140da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   140de:	f7ff f8bb 	bl	13258 <z_impl_z_log_msg_static_create>
   140e2:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   140e4:	4621      	mov	r1, r4
   140e6:	4648      	mov	r0, r9
   140e8:	f00c fdb4 	bl	20c54 <z_fatal_error>
}
   140ec:	46bd      	mov	sp, r7
   140ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   140f2:	bf00      	nop
   140f4:	0002bee5 	.word	0x0002bee5
   140f8:	0002aca8 	.word	0x0002aca8
   140fc:	0002bf14 	.word	0x0002bf14
   14100:	0002bf43 	.word	0x0002bf43
   14104:	0002bf52 	.word	0x0002bf52

00014108 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   14108:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1410a:	2b00      	cmp	r3, #0
   1410c:	db08      	blt.n	14120 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1410e:	2201      	movs	r2, #1
   14110:	f000 001f 	and.w	r0, r0, #31
   14114:	fa02 f000 	lsl.w	r0, r2, r0
   14118:	095b      	lsrs	r3, r3, #5
   1411a:	4a02      	ldr	r2, [pc, #8]	; (14124 <arch_irq_enable+0x1c>)
   1411c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   14120:	4770      	bx	lr
   14122:	bf00      	nop
   14124:	e000e100 	.word	0xe000e100

00014128 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   14128:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1412a:	2b00      	cmp	r3, #0
   1412c:	db0d      	blt.n	1414a <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1412e:	2201      	movs	r2, #1
   14130:	095b      	lsrs	r3, r3, #5
   14132:	f000 001f 	and.w	r0, r0, #31
   14136:	fa02 f000 	lsl.w	r0, r2, r0
   1413a:	3320      	adds	r3, #32
   1413c:	4a03      	ldr	r2, [pc, #12]	; (1414c <arch_irq_disable+0x24>)
   1413e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   14142:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14146:	f3bf 8f6f 	isb	sy
}
   1414a:	4770      	bx	lr
   1414c:	e000e100 	.word	0xe000e100

00014150 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   14150:	4b05      	ldr	r3, [pc, #20]	; (14168 <arch_irq_is_enabled+0x18>)
   14152:	0942      	lsrs	r2, r0, #5
   14154:	f000 001f 	and.w	r0, r0, #31
   14158:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1415c:	2301      	movs	r3, #1
   1415e:	fa03 f000 	lsl.w	r0, r3, r0
}
   14162:	4010      	ands	r0, r2
   14164:	4770      	bx	lr
   14166:	bf00      	nop
   14168:	e000e100 	.word	0xe000e100

0001416c <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   1416c:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1416e:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   14170:	bf54      	ite	pl
   14172:	1c8b      	addpl	r3, r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   14174:	2300      	movmi	r3, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   14176:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14178:	bfac      	ite	ge
   1417a:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1417e:	4a07      	ldrlt	r2, [pc, #28]	; (1419c <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14180:	ea4f 1343 	mov.w	r3, r3, lsl #5
   14184:	bfac      	ite	ge
   14186:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1418a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1418e:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14190:	bfb4      	ite	lt
   14192:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14194:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   14198:	4770      	bx	lr
   1419a:	bf00      	nop
   1419c:	e000ed14 	.word	0xe000ed14

000141a0 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   141a0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   141a2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   141a4:	4b04      	ldr	r3, [pc, #16]	; (141b8 <_arch_isr_direct_pm+0x18>)
   141a6:	699a      	ldr	r2, [r3, #24]
   141a8:	b11a      	cbz	r2, 141b2 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   141aa:	2200      	movs	r2, #0
   141ac:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   141ae:	f015 fdfd 	bl	29dac <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   141b2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   141b4:	bd08      	pop	{r3, pc}
   141b6:	bf00      	nop
   141b8:	20002f8c 	.word	0x20002f8c

000141bc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   141bc:	bf30      	wfi
    b z_SysNmiOnReset
   141be:	f7ff bffd 	b.w	141bc <z_SysNmiOnReset>
   141c2:	bf00      	nop

000141c4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   141c4:	4a0b      	ldr	r2, [pc, #44]	; (141f4 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   141c6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   141c8:	4b0b      	ldr	r3, [pc, #44]	; (141f8 <z_arm_prep_c+0x34>)
   141ca:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   141ce:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   141d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   141d4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   141d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   141dc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   141e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   141e4:	f00c fdce 	bl	20d84 <z_bss_zero>
	z_data_copy();
   141e8:	f00d fe4c 	bl	21e84 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   141ec:	f000 fb80 	bl	148f0 <z_arm_interrupt_init>
	z_cstart();
   141f0:	f00c fe08 	bl	20e04 <z_cstart>
   141f4:	00000000 	.word	0x00000000
   141f8:	e000ed00 	.word	0xe000ed00

000141fc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   141fc:	4a09      	ldr	r2, [pc, #36]	; (14224 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   141fe:	490a      	ldr	r1, [pc, #40]	; (14228 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   14200:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   14202:	6809      	ldr	r1, [r1, #0]
   14204:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14206:	4909      	ldr	r1, [pc, #36]	; (1422c <arch_swap+0x30>)
	_current->arch.basepri = key;
   14208:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1420a:	684b      	ldr	r3, [r1, #4]
   1420c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14210:	604b      	str	r3, [r1, #4]
   14212:	2300      	movs	r3, #0
   14214:	f383 8811 	msr	BASEPRI, r3
   14218:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1421c:	6893      	ldr	r3, [r2, #8]
}
   1421e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   14220:	4770      	bx	lr
   14222:	bf00      	nop
   14224:	20002f8c 	.word	0x20002f8c
   14228:	0002b8b4 	.word	0x0002b8b4
   1422c:	e000ed00 	.word	0xe000ed00

00014230 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   14230:	490f      	ldr	r1, [pc, #60]	; (14270 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   14232:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   14234:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   14238:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1423a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1423e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14242:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   14244:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   14248:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1424c:	4f09      	ldr	r7, [pc, #36]	; (14274 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1424e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   14252:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   14254:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   14256:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   14258:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1425a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1425c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1425e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   14262:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   14266:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1426a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1426e:	4770      	bx	lr
    ldr r1, =_kernel
   14270:	20002f8c 	.word	0x20002f8c
    ldr v4, =_SCS_ICSR
   14274:	e000ed04 	.word	0xe000ed04

00014278 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   14278:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1427c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1427e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   14282:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   14286:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   14288:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1428c:	2902      	cmp	r1, #2
    beq _oops
   1428e:	d0ff      	beq.n	14290 <_oops>

00014290 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   14290:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   14292:	f012 fc44 	bl	26b1e <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   14296:	bd01      	pop	{r0, pc}

00014298 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   14298:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1429c:	9b00      	ldr	r3, [sp, #0]
   1429e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   142a2:	490a      	ldr	r1, [pc, #40]	; (142cc <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   142a4:	9b01      	ldr	r3, [sp, #4]
   142a6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   142aa:	9b02      	ldr	r3, [sp, #8]
   142ac:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   142b0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   142b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   142b8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   142bc:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   142c0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   142c2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   142c4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   142c6:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   142c8:	4770      	bx	lr
   142ca:	bf00      	nop
   142cc:	00025c63 	.word	0x00025c63

000142d0 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   142d0:	4b07      	ldr	r3, [pc, #28]	; (142f0 <arch_switch_to_main_thread+0x20>)
   142d2:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   142d4:	4610      	mov	r0, r2
   142d6:	f381 8809 	msr	PSP, r1
   142da:	2100      	movs	r1, #0
   142dc:	b663      	cpsie	if
   142de:	f381 8811 	msr	BASEPRI, r1
   142e2:	f3bf 8f6f 	isb	sy
   142e6:	2200      	movs	r2, #0
   142e8:	2300      	movs	r3, #0
   142ea:	f011 fcba 	bl	25c62 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   142ee:	bf00      	nop
   142f0:	20002f8c 	.word	0x20002f8c

000142f4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   142f4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   142f6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   142f8:	4a0b      	ldr	r2, [pc, #44]	; (14328 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   142fa:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   142fc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   142fe:	bf1e      	ittt	ne
	movne	r1, #0
   14300:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   14302:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   14304:	f015 fd52 	blne	29dac <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   14308:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1430a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1430e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   14312:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   14316:	4905      	ldr	r1, [pc, #20]	; (1432c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   14318:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1431a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1431c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1431e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   14322:	4903      	ldr	r1, [pc, #12]	; (14330 <_isr_wrapper+0x3c>)
	bx r1
   14324:	4708      	bx	r1
   14326:	0000      	.short	0x0000
	ldr r2, =_kernel
   14328:	20002f8c 	.word	0x20002f8c
	ldr r1, =_sw_isr_table
   1432c:	0002a988 	.word	0x0002a988
	ldr r1, =z_arm_int_exit
   14330:	00014335 	.word	0x00014335

00014334 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   14334:	4b04      	ldr	r3, [pc, #16]	; (14348 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   14336:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   14338:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1433a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1433c:	d003      	beq.n	14346 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1433e:	4903      	ldr	r1, [pc, #12]	; (1434c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14344:	600a      	str	r2, [r1, #0]

00014346 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   14346:	4770      	bx	lr
	ldr r3, =_kernel
   14348:	20002f8c 	.word	0x20002f8c
	ldr r1, =_SCS_ICSR
   1434c:	e000ed04 	.word	0xe000ed04

00014350 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   14350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14354:	b086      	sub	sp, #24
   14356:	4606      	mov	r6, r0
   14358:	af00      	add	r7, sp, #0
   1435a:	460d      	mov	r5, r1
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   1435c:	4b41      	ldr	r3, [pc, #260]	; (14464 <mem_manage_fault.constprop.0+0x114>)
   1435e:	4842      	ldr	r0, [pc, #264]	; (14468 <mem_manage_fault.constprop.0+0x118>)
   14360:	617b      	str	r3, [r7, #20]
   14362:	2402      	movs	r4, #2
   14364:	f107 0210 	add.w	r2, r7, #16
   14368:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1436c:	613c      	str	r4, [r7, #16]
   1436e:	f012 fbe5 	bl	26b3c <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14372:	4b3e      	ldr	r3, [pc, #248]	; (1446c <mem_manage_fault.constprop.0+0x11c>)
   14374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14376:	06db      	lsls	r3, r3, #27
   14378:	d509      	bpl.n	1438e <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1437a:	4b3d      	ldr	r3, [pc, #244]	; (14470 <mem_manage_fault.constprop.0+0x120>)
   1437c:	483a      	ldr	r0, [pc, #232]	; (14468 <mem_manage_fault.constprop.0+0x118>)
   1437e:	f107 0210 	add.w	r2, r7, #16
   14382:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14386:	e9c7 4304 	strd	r4, r3, [r7, #16]
   1438a:	f012 fbd7 	bl	26b3c <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1438e:	4b37      	ldr	r3, [pc, #220]	; (1446c <mem_manage_fault.constprop.0+0x11c>)
   14390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14392:	0718      	lsls	r0, r3, #28
   14394:	d50a      	bpl.n	143ac <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   14396:	4b37      	ldr	r3, [pc, #220]	; (14474 <mem_manage_fault.constprop.0+0x124>)
   14398:	617b      	str	r3, [r7, #20]
   1439a:	4833      	ldr	r0, [pc, #204]	; (14468 <mem_manage_fault.constprop.0+0x118>)
   1439c:	2302      	movs	r3, #2
   1439e:	f107 0210 	add.w	r2, r7, #16
   143a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   143a6:	613b      	str	r3, [r7, #16]
   143a8:	f012 fbc8 	bl	26b3c <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   143ac:	4c2f      	ldr	r4, [pc, #188]	; (1446c <mem_manage_fault.constprop.0+0x11c>)
   143ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   143b0:	0799      	lsls	r1, r3, #30
   143b2:	d522      	bpl.n	143fa <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
   143b4:	46e8      	mov	r8, sp
   143b6:	4b30      	ldr	r3, [pc, #192]	; (14478 <mem_manage_fault.constprop.0+0x128>)
   143b8:	617b      	str	r3, [r7, #20]
   143ba:	f107 0210 	add.w	r2, r7, #16
   143be:	2302      	movs	r3, #2
   143c0:	4829      	ldr	r0, [pc, #164]	; (14468 <mem_manage_fault.constprop.0+0x118>)
   143c2:	613b      	str	r3, [r7, #16]
   143c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   143c8:	f012 fbb8 	bl	26b3c <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   143cc:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   143ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   143d0:	0612      	lsls	r2, r2, #24
   143d2:	d512      	bpl.n	143fa <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   143d4:	b088      	sub	sp, #32
   143d6:	466a      	mov	r2, sp
   143d8:	4928      	ldr	r1, [pc, #160]	; (1447c <mem_manage_fault.constprop.0+0x12c>)
   143da:	4823      	ldr	r0, [pc, #140]	; (14468 <mem_manage_fault.constprop.0+0x118>)
   143dc:	e9c2 1305 	strd	r1, r3, [r2, #20]
   143e0:	2303      	movs	r3, #3
   143e2:	f842 3f10 	str.w	r3, [r2, #16]!
   143e6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   143ea:	f012 fba7 	bl	26b3c <z_log_msg_static_create.constprop.0>
   143ee:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   143f0:	b11e      	cbz	r6, 143fa <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   143f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   143f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   143f8:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   143fa:	4b1c      	ldr	r3, [pc, #112]	; (1446c <mem_manage_fault.constprop.0+0x11c>)
   143fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   143fe:	07dc      	lsls	r4, r3, #31
   14400:	d50a      	bpl.n	14418 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
   14402:	4b1f      	ldr	r3, [pc, #124]	; (14480 <mem_manage_fault.constprop.0+0x130>)
   14404:	617b      	str	r3, [r7, #20]
   14406:	4818      	ldr	r0, [pc, #96]	; (14468 <mem_manage_fault.constprop.0+0x118>)
   14408:	2302      	movs	r3, #2
   1440a:	f107 0210 	add.w	r2, r7, #16
   1440e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14412:	613b      	str	r3, [r7, #16]
   14414:	f012 fb92 	bl	26b3c <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14418:	4b14      	ldr	r3, [pc, #80]	; (1446c <mem_manage_fault.constprop.0+0x11c>)
   1441a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1441c:	0698      	lsls	r0, r3, #26
   1441e:	d50a      	bpl.n	14436 <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
   14420:	4b18      	ldr	r3, [pc, #96]	; (14484 <mem_manage_fault.constprop.0+0x134>)
   14422:	617b      	str	r3, [r7, #20]
   14424:	4810      	ldr	r0, [pc, #64]	; (14468 <mem_manage_fault.constprop.0+0x118>)
   14426:	2302      	movs	r3, #2
   14428:	f107 0210 	add.w	r2, r7, #16
   1442c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14430:	613b      	str	r3, [r7, #16]
   14432:	f012 fb83 	bl	26b3c <z_log_msg_static_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   14436:	4b0d      	ldr	r3, [pc, #52]	; (1446c <mem_manage_fault.constprop.0+0x11c>)
   14438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1443a:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1443c:	bf58      	it	pl
   1443e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14442:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   14444:	bf42      	ittt	mi
   14446:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   14448:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   1444c:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1444e:	4a07      	ldr	r2, [pc, #28]	; (1446c <mem_manage_fault.constprop.0+0x11c>)
   14450:	6a93      	ldr	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   14452:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14454:	f043 03ff 	orr.w	r3, r3, #255	; 0xff

	return reason;
}
   14458:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1445a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1445c:	7028      	strb	r0, [r5, #0]
}
   1445e:	46bd      	mov	sp, r7
   14460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14464:	0002bf80 	.word	0x0002bf80
   14468:	0002aca8 	.word	0x0002aca8
   1446c:	e000ed00 	.word	0xe000ed00
   14470:	0002bf96 	.word	0x0002bf96
   14474:	0002bfc9 	.word	0x0002bfc9
   14478:	0002bfdc 	.word	0x0002bfdc
   1447c:	0002bff4 	.word	0x0002bff4
   14480:	0002c00a 	.word	0x0002c00a
   14484:	0002c029 	.word	0x0002c029

00014488 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1448c:	b086      	sub	sp, #24
   1448e:	4606      	mov	r6, r0
   14490:	af00      	add	r7, sp, #0
   14492:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   14494:	4b3e      	ldr	r3, [pc, #248]	; (14590 <bus_fault.constprop.0+0x108>)
   14496:	483f      	ldr	r0, [pc, #252]	; (14594 <bus_fault.constprop.0+0x10c>)
   14498:	617b      	str	r3, [r7, #20]
   1449a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1449e:	2402      	movs	r4, #2
   144a0:	f107 0210 	add.w	r2, r7, #16
   144a4:	613c      	str	r4, [r7, #16]
   144a6:	f012 fb49 	bl	26b3c <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   144aa:	4b3b      	ldr	r3, [pc, #236]	; (14598 <bus_fault.constprop.0+0x110>)
   144ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   144ae:	04d9      	lsls	r1, r3, #19
   144b0:	d509      	bpl.n	144c6 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
   144b2:	4b3a      	ldr	r3, [pc, #232]	; (1459c <bus_fault.constprop.0+0x114>)
   144b4:	4837      	ldr	r0, [pc, #220]	; (14594 <bus_fault.constprop.0+0x10c>)
   144b6:	f107 0210 	add.w	r2, r7, #16
   144ba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   144be:	e9c7 4304 	strd	r4, r3, [r7, #16]
   144c2:	f012 fb3b 	bl	26b3c <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   144c6:	4b34      	ldr	r3, [pc, #208]	; (14598 <bus_fault.constprop.0+0x110>)
   144c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   144ca:	051a      	lsls	r2, r3, #20
   144cc:	d50a      	bpl.n	144e4 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   144ce:	4b34      	ldr	r3, [pc, #208]	; (145a0 <bus_fault.constprop.0+0x118>)
   144d0:	617b      	str	r3, [r7, #20]
   144d2:	4830      	ldr	r0, [pc, #192]	; (14594 <bus_fault.constprop.0+0x10c>)
   144d4:	2302      	movs	r3, #2
   144d6:	f107 0210 	add.w	r2, r7, #16
   144da:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   144de:	613b      	str	r3, [r7, #16]
   144e0:	f012 fb2c 	bl	26b3c <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   144e4:	4c2c      	ldr	r4, [pc, #176]	; (14598 <bus_fault.constprop.0+0x110>)
   144e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   144e8:	059b      	lsls	r3, r3, #22
   144ea:	d522      	bpl.n	14532 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
   144ec:	46e8      	mov	r8, sp
   144ee:	4b2d      	ldr	r3, [pc, #180]	; (145a4 <bus_fault.constprop.0+0x11c>)
   144f0:	4828      	ldr	r0, [pc, #160]	; (14594 <bus_fault.constprop.0+0x10c>)
   144f2:	617b      	str	r3, [r7, #20]
   144f4:	f107 0210 	add.w	r2, r7, #16
   144f8:	2302      	movs	r3, #2
   144fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   144fe:	613b      	str	r3, [r7, #16]
   14500:	f012 fb1c 	bl	26b3c <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   14504:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   14506:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   14508:	0410      	lsls	r0, r2, #16
   1450a:	d512      	bpl.n	14532 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1450c:	b088      	sub	sp, #32
   1450e:	466a      	mov	r2, sp
   14510:	4925      	ldr	r1, [pc, #148]	; (145a8 <bus_fault.constprop.0+0x120>)
   14512:	4820      	ldr	r0, [pc, #128]	; (14594 <bus_fault.constprop.0+0x10c>)
   14514:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14518:	2303      	movs	r3, #3
   1451a:	f842 3f10 	str.w	r3, [r2, #16]!
   1451e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14522:	f012 fb0b 	bl	26b3c <z_log_msg_static_create.constprop.0>
   14526:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   14528:	b11e      	cbz	r6, 14532 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1452a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1452c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   14530:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   14532:	4b19      	ldr	r3, [pc, #100]	; (14598 <bus_fault.constprop.0+0x110>)
   14534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14536:	0559      	lsls	r1, r3, #21
   14538:	d50a      	bpl.n	14550 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
   1453a:	4b1c      	ldr	r3, [pc, #112]	; (145ac <bus_fault.constprop.0+0x124>)
   1453c:	617b      	str	r3, [r7, #20]
   1453e:	4815      	ldr	r0, [pc, #84]	; (14594 <bus_fault.constprop.0+0x10c>)
   14540:	2302      	movs	r3, #2
   14542:	f107 0210 	add.w	r2, r7, #16
   14546:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1454a:	613b      	str	r3, [r7, #16]
   1454c:	f012 faf6 	bl	26b3c <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   14550:	4b11      	ldr	r3, [pc, #68]	; (14598 <bus_fault.constprop.0+0x110>)
   14552:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14554:	05d2      	lsls	r2, r2, #23
   14556:	d515      	bpl.n	14584 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
   14558:	4b15      	ldr	r3, [pc, #84]	; (145b0 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1455a:	617b      	str	r3, [r7, #20]
   1455c:	480d      	ldr	r0, [pc, #52]	; (14594 <bus_fault.constprop.0+0x10c>)
   1455e:	2302      	movs	r3, #2
   14560:	f107 0210 	add.w	r2, r7, #16
   14564:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14568:	613b      	str	r3, [r7, #16]
   1456a:	f012 fae7 	bl	26b3c <z_log_msg_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1456e:	4a0a      	ldr	r2, [pc, #40]	; (14598 <bus_fault.constprop.0+0x110>)
   14570:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   14572:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14574:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
   14578:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1457a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1457c:	7028      	strb	r0, [r5, #0]
}
   1457e:	46bd      	mov	sp, r7
   14580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   14584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14586:	049b      	lsls	r3, r3, #18
   14588:	d5f1      	bpl.n	1456e <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1458a:	4b0a      	ldr	r3, [pc, #40]	; (145b4 <bus_fault.constprop.0+0x12c>)
   1458c:	e7e5      	b.n	1455a <bus_fault.constprop.0+0xd2>
   1458e:	bf00      	nop
   14590:	0002c058 	.word	0x0002c058
   14594:	0002aca8 	.word	0x0002aca8
   14598:	e000ed00 	.word	0xe000ed00
   1459c:	0002c06e 	.word	0x0002c06e
   145a0:	0002bfc9 	.word	0x0002bfc9
   145a4:	0002c07f 	.word	0x0002c07f
   145a8:	0002c098 	.word	0x0002c098
   145ac:	0002c0ad 	.word	0x0002c0ad
   145b0:	0002c0c8 	.word	0x0002c0c8
   145b4:	0002c029 	.word	0x0002c029

000145b8 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   145b8:	b510      	push	{r4, lr}
   145ba:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   145bc:	4b33      	ldr	r3, [pc, #204]	; (1468c <usage_fault.constprop.0+0xd4>)
   145be:	4834      	ldr	r0, [pc, #208]	; (14690 <usage_fault.constprop.0+0xd8>)
   145c0:	9305      	str	r3, [sp, #20]
   145c2:	2402      	movs	r4, #2
   145c4:	aa04      	add	r2, sp, #16
   145c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   145ca:	9404      	str	r4, [sp, #16]
   145cc:	f012 fab6 	bl	26b3c <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   145d0:	4b30      	ldr	r3, [pc, #192]	; (14694 <usage_fault.constprop.0+0xdc>)
   145d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   145d4:	019b      	lsls	r3, r3, #6
   145d6:	d508      	bpl.n	145ea <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
   145d8:	4b2f      	ldr	r3, [pc, #188]	; (14698 <usage_fault.constprop.0+0xe0>)
   145da:	482d      	ldr	r0, [pc, #180]	; (14690 <usage_fault.constprop.0+0xd8>)
   145dc:	aa04      	add	r2, sp, #16
   145de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   145e2:	e9cd 4304 	strd	r4, r3, [sp, #16]
   145e6:	f012 faa9 	bl	26b3c <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   145ea:	4b2a      	ldr	r3, [pc, #168]	; (14694 <usage_fault.constprop.0+0xdc>)
   145ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   145ee:	01dc      	lsls	r4, r3, #7
   145f0:	d509      	bpl.n	14606 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
   145f2:	4b2a      	ldr	r3, [pc, #168]	; (1469c <usage_fault.constprop.0+0xe4>)
   145f4:	9305      	str	r3, [sp, #20]
   145f6:	4826      	ldr	r0, [pc, #152]	; (14690 <usage_fault.constprop.0+0xd8>)
   145f8:	2302      	movs	r3, #2
   145fa:	aa04      	add	r2, sp, #16
   145fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14600:	9304      	str	r3, [sp, #16]
   14602:	f012 fa9b 	bl	26b3c <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   14606:	4b23      	ldr	r3, [pc, #140]	; (14694 <usage_fault.constprop.0+0xdc>)
   14608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1460a:	0318      	lsls	r0, r3, #12
   1460c:	d509      	bpl.n	14622 <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
   1460e:	4b24      	ldr	r3, [pc, #144]	; (146a0 <usage_fault.constprop.0+0xe8>)
   14610:	9305      	str	r3, [sp, #20]
   14612:	481f      	ldr	r0, [pc, #124]	; (14690 <usage_fault.constprop.0+0xd8>)
   14614:	2302      	movs	r3, #2
   14616:	aa04      	add	r2, sp, #16
   14618:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1461c:	9304      	str	r3, [sp, #16]
   1461e:	f012 fa8d 	bl	26b3c <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   14622:	4b1c      	ldr	r3, [pc, #112]	; (14694 <usage_fault.constprop.0+0xdc>)
   14624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14626:	0359      	lsls	r1, r3, #13
   14628:	d509      	bpl.n	1463e <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1462a:	4b1e      	ldr	r3, [pc, #120]	; (146a4 <usage_fault.constprop.0+0xec>)
   1462c:	9305      	str	r3, [sp, #20]
   1462e:	4818      	ldr	r0, [pc, #96]	; (14690 <usage_fault.constprop.0+0xd8>)
   14630:	2302      	movs	r3, #2
   14632:	aa04      	add	r2, sp, #16
   14634:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14638:	9304      	str	r3, [sp, #16]
   1463a:	f012 fa7f 	bl	26b3c <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1463e:	4b15      	ldr	r3, [pc, #84]	; (14694 <usage_fault.constprop.0+0xdc>)
   14640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14642:	039a      	lsls	r2, r3, #14
   14644:	d509      	bpl.n	1465a <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   14646:	4b18      	ldr	r3, [pc, #96]	; (146a8 <usage_fault.constprop.0+0xf0>)
   14648:	9305      	str	r3, [sp, #20]
   1464a:	4811      	ldr	r0, [pc, #68]	; (14690 <usage_fault.constprop.0+0xd8>)
   1464c:	2302      	movs	r3, #2
   1464e:	aa04      	add	r2, sp, #16
   14650:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14654:	9304      	str	r3, [sp, #16]
   14656:	f012 fa71 	bl	26b3c <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1465a:	4b0e      	ldr	r3, [pc, #56]	; (14694 <usage_fault.constprop.0+0xdc>)
   1465c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1465e:	03db      	lsls	r3, r3, #15
   14660:	d509      	bpl.n	14676 <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   14662:	4b12      	ldr	r3, [pc, #72]	; (146ac <usage_fault.constprop.0+0xf4>)
   14664:	9305      	str	r3, [sp, #20]
   14666:	480a      	ldr	r0, [pc, #40]	; (14690 <usage_fault.constprop.0+0xd8>)
   14668:	2302      	movs	r3, #2
   1466a:	aa04      	add	r2, sp, #16
   1466c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14670:	9304      	str	r3, [sp, #16]
   14672:	f012 fa63 	bl	26b3c <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   14676:	4a07      	ldr	r2, [pc, #28]	; (14694 <usage_fault.constprop.0+0xdc>)
   14678:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1467a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1467e:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
   14682:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   14684:	6293      	str	r3, [r2, #40]	; 0x28
}
   14686:	b006      	add	sp, #24
   14688:	bd10      	pop	{r4, pc}
   1468a:	bf00      	nop
   1468c:	0002c0e0 	.word	0x0002c0e0
   14690:	0002aca8 	.word	0x0002aca8
   14694:	e000ed00 	.word	0xe000ed00
   14698:	0002c0f8 	.word	0x0002c0f8
   1469c:	0002c10b 	.word	0x0002c10b
   146a0:	0002c125 	.word	0x0002c125
   146a4:	0002c143 	.word	0x0002c143
   146a8:	0002c168 	.word	0x0002c168
   146ac:	0002c182 	.word	0x0002c182

000146b0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   146b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   146b4:	4b78      	ldr	r3, [pc, #480]	; (14898 <z_arm_fault+0x1e8>)
{
   146b6:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   146b8:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   146bc:	af00      	add	r7, sp, #0
   146be:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   146c0:	f3c8 0408 	ubfx	r4, r8, #0, #9
   146c4:	2500      	movs	r5, #0
   146c6:	f385 8811 	msr	BASEPRI, r5
   146ca:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   146ce:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   146d2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   146d6:	d10e      	bne.n	146f6 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   146d8:	f002 030c 	and.w	r3, r2, #12
   146dc:	2b08      	cmp	r3, #8
   146de:	d10c      	bne.n	146fa <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   146e0:	4b6e      	ldr	r3, [pc, #440]	; (1489c <z_arm_fault+0x1ec>)
   146e2:	61fb      	str	r3, [r7, #28]
   146e4:	486e      	ldr	r0, [pc, #440]	; (148a0 <z_arm_fault+0x1f0>)
   146e6:	2302      	movs	r3, #2
   146e8:	f107 0218 	add.w	r2, r7, #24
   146ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   146f0:	61bb      	str	r3, [r7, #24]
   146f2:	f012 fa23 	bl	26b3c <z_log_msg_static_create.constprop.0>
		return NULL;
   146f6:	462e      	mov	r6, r5
   146f8:	e003      	b.n	14702 <z_arm_fault+0x52>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   146fa:	0712      	lsls	r2, r2, #28
   146fc:	d401      	bmi.n	14702 <z_arm_fault+0x52>
			ptr_esf = (z_arch_esf_t *)msp;
   146fe:	4606      	mov	r6, r0
			*nested_exc = true;
   14700:	2501      	movs	r5, #1
	*recoverable = false;
   14702:	2300      	movs	r3, #0
   14704:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   14706:	1ee3      	subs	r3, r4, #3
   14708:	2b09      	cmp	r3, #9
   1470a:	f200 80a4 	bhi.w	14856 <z_arm_fault+0x1a6>
   1470e:	e8df f003 	tbb	[pc, r3]
   14712:	9705      	.short	0x9705
   14714:	a2a2949a 	.word	0xa2a2949a
   14718:	9da2a2a2 	.word	0x9da2a2a2
	PR_FAULT_INFO("***** HARD FAULT *****");
   1471c:	46e9      	mov	r9, sp
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1471e:	f8df 8178 	ldr.w	r8, [pc, #376]	; 14898 <z_arm_fault+0x1e8>
	PR_FAULT_INFO("***** HARD FAULT *****");
   14722:	4b60      	ldr	r3, [pc, #384]	; (148a4 <z_arm_fault+0x1f4>)
   14724:	485e      	ldr	r0, [pc, #376]	; (148a0 <z_arm_fault+0x1f0>)
   14726:	61fb      	str	r3, [r7, #28]
   14728:	f04f 0a02 	mov.w	sl, #2
   1472c:	f107 0218 	add.w	r2, r7, #24
   14730:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14734:	f8c7 a018 	str.w	sl, [r7, #24]
   14738:	f012 fa00 	bl	26b3c <z_log_msg_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1473c:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
   14740:	f04f 0b00 	mov.w	fp, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14744:	ea14 040a 	ands.w	r4, r4, sl
	*recoverable = false;
   14748:	f887 b007 	strb.w	fp, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1474c:	d00b      	beq.n	14766 <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
   1474e:	4b56      	ldr	r3, [pc, #344]	; (148a8 <z_arm_fault+0x1f8>)
   14750:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
   14754:	4852      	ldr	r0, [pc, #328]	; (148a0 <z_arm_fault+0x1f0>)
   14756:	f107 0218 	add.w	r2, r7, #24
   1475a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1475e:	f012 f9ed 	bl	26b3c <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   14762:	2400      	movs	r4, #0
}
   14764:	e00d      	b.n	14782 <z_arm_fault+0xd2>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   14766:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
   1476a:	2b00      	cmp	r3, #0
   1476c:	da25      	bge.n	147ba <z_arm_fault+0x10a>
		PR_EXC("  Debug event");
   1476e:	4b4f      	ldr	r3, [pc, #316]	; (148ac <z_arm_fault+0x1fc>)
   14770:	484b      	ldr	r0, [pc, #300]	; (148a0 <z_arm_fault+0x1f0>)
   14772:	f107 0218 	add.w	r2, r7, #24
   14776:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1477a:	e9c7 a306 	strd	sl, r3, [r7, #24]
   1477e:	f012 f9dd 	bl	26b3c <z_log_msg_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   14782:	79fb      	ldrb	r3, [r7, #7]
   14784:	b9ab      	cbnz	r3, 147b2 <z_arm_fault+0x102>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   14786:	2220      	movs	r2, #32
   14788:	4631      	mov	r1, r6
   1478a:	f107 0008 	add.w	r0, r7, #8
   1478e:	f012 fac3 	bl	26d18 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   14792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14794:	2d00      	cmp	r5, #0
   14796:	d079      	beq.n	1488c <z_arm_fault+0x1dc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   14798:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1479c:	b922      	cbnz	r2, 147a8 <z_arm_fault+0xf8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1479e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   147a2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   147a6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   147a8:	f107 0108 	add.w	r1, r7, #8
   147ac:	4620      	mov	r0, r4
   147ae:	f7ff fc45 	bl	1403c <z_arm_fatal_error>
}
   147b2:	372c      	adds	r7, #44	; 0x2c
   147b4:	46bd      	mov	sp, r7
   147b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   147ba:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
   147be:	005b      	lsls	r3, r3, #1
   147c0:	d5df      	bpl.n	14782 <z_arm_fault+0xd2>
		PR_EXC("  Fault escalation (see below)");
   147c2:	4b3b      	ldr	r3, [pc, #236]	; (148b0 <z_arm_fault+0x200>)
   147c4:	4836      	ldr	r0, [pc, #216]	; (148a0 <z_arm_fault+0x1f0>)
   147c6:	f107 0218 	add.w	r2, r7, #24
   147ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   147ce:	e9c7 a306 	strd	sl, r3, [r7, #24]
   147d2:	f012 f9b3 	bl	26b3c <z_log_msg_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
   147d6:	69b3      	ldr	r3, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   147d8:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   147dc:	f64d 7302 	movw	r3, #57090	; 0xdf02
   147e0:	429a      	cmp	r2, r3
   147e2:	d009      	beq.n	147f8 <z_arm_fault+0x148>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   147e4:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   147e8:	b2db      	uxtb	r3, r3
   147ea:	b1b3      	cbz	r3, 1481a <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
   147ec:	1df9      	adds	r1, r7, #7
   147ee:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   147f0:	f7ff fdae 	bl	14350 <mem_manage_fault.constprop.0>
   147f4:	4604      	mov	r4, r0
		break;
   147f6:	e7c4      	b.n	14782 <z_arm_fault+0xd2>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   147f8:	b088      	sub	sp, #32
   147fa:	6833      	ldr	r3, [r6, #0]
   147fc:	466a      	mov	r2, sp
   147fe:	492d      	ldr	r1, [pc, #180]	; (148b4 <z_arm_fault+0x204>)
   14800:	4827      	ldr	r0, [pc, #156]	; (148a0 <z_arm_fault+0x1f0>)
   14802:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14806:	2303      	movs	r3, #3
   14808:	f842 3f10 	str.w	r3, [r2, #16]!
   1480c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14810:	f012 f994 	bl	26b3c <z_log_msg_static_create.constprop.0>
   14814:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
   14816:	6834      	ldr	r4, [r6, #0]
   14818:	e7b3      	b.n	14782 <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   1481a:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   1481e:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   14822:	d004      	beq.n	1482e <z_arm_fault+0x17e>
			reason = bus_fault(esf, 1, recoverable);
   14824:	1df9      	adds	r1, r7, #7
   14826:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   14828:	f7ff fe2e 	bl	14488 <bus_fault.constprop.0>
   1482c:	e7e2      	b.n	147f4 <z_arm_fault+0x144>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   1482e:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   14832:	0c1b      	lsrs	r3, r3, #16
   14834:	041b      	lsls	r3, r3, #16
   14836:	2b00      	cmp	r3, #0
   14838:	d0a3      	beq.n	14782 <z_arm_fault+0xd2>
		reason = usage_fault(esf);
   1483a:	f7ff febd 	bl	145b8 <usage_fault.constprop.0>
   1483e:	e7d9      	b.n	147f4 <z_arm_fault+0x144>
		reason = mem_manage_fault(esf, 0, recoverable);
   14840:	1df9      	adds	r1, r7, #7
   14842:	2000      	movs	r0, #0
   14844:	e7d4      	b.n	147f0 <z_arm_fault+0x140>
		reason = bus_fault(esf, 0, recoverable);
   14846:	1df9      	adds	r1, r7, #7
   14848:	2000      	movs	r0, #0
   1484a:	e7ed      	b.n	14828 <z_arm_fault+0x178>
	PR_FAULT_INFO(
   1484c:	4b1a      	ldr	r3, [pc, #104]	; (148b8 <z_arm_fault+0x208>)
   1484e:	61fb      	str	r3, [r7, #28]
   14850:	2302      	movs	r3, #2
   14852:	61bb      	str	r3, [r7, #24]
   14854:	e77e      	b.n	14754 <z_arm_fault+0xa4>
	PR_FAULT_INFO("***** %s %d) *****",
   14856:	4a19      	ldr	r2, [pc, #100]	; (148bc <z_arm_fault+0x20c>)
   14858:	4b19      	ldr	r3, [pc, #100]	; (148c0 <z_arm_fault+0x210>)
   1485a:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   1485e:	46e8      	mov	r8, sp
   14860:	b08a      	sub	sp, #40	; 0x28
   14862:	bf18      	it	ne
   14864:	4613      	movne	r3, r2
   14866:	466a      	mov	r2, sp
   14868:	4916      	ldr	r1, [pc, #88]	; (148c4 <z_arm_fault+0x214>)
   1486a:	480d      	ldr	r0, [pc, #52]	; (148a0 <z_arm_fault+0x1f0>)
   1486c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14870:	2302      	movs	r3, #2
   14872:	f882 3020 	strb.w	r3, [r2, #32]
   14876:	3c10      	subs	r4, #16
   14878:	4b13      	ldr	r3, [pc, #76]	; (148c8 <z_arm_fault+0x218>)
   1487a:	61d4      	str	r4, [r2, #28]
   1487c:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   14880:	f842 3f10 	str.w	r3, [r2, #16]!
   14884:	f012 f95a 	bl	26b3c <z_log_msg_static_create.constprop.0>
   14888:	46c5      	mov	sp, r8
   1488a:	e76a      	b.n	14762 <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1488c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   14890:	f023 0301 	bic.w	r3, r3, #1
   14894:	e787      	b.n	147a6 <z_arm_fault+0xf6>
   14896:	bf00      	nop
   14898:	e000ed00 	.word	0xe000ed00
   1489c:	0002c1db 	.word	0x0002c1db
   148a0:	0002aca8 	.word	0x0002aca8
   148a4:	0002c206 	.word	0x0002c206
   148a8:	0002c21d 	.word	0x0002c21d
   148ac:	0002c23e 	.word	0x0002c23e
   148b0:	0002c24c 	.word	0x0002c24c
   148b4:	0002c26b 	.word	0x0002c26b
   148b8:	0002c287 	.word	0x0002c287
   148bc:	0002c1c2 	.word	0x0002c1c2
   148c0:	0002c1ad 	.word	0x0002c1ad
   148c4:	0002c2ab 	.word	0x0002c2ab
   148c8:	01000004 	.word	0x01000004

000148cc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   148cc:	4a02      	ldr	r2, [pc, #8]	; (148d8 <z_arm_fault_init+0xc>)
   148ce:	6953      	ldr	r3, [r2, #20]
   148d0:	f043 0310 	orr.w	r3, r3, #16
   148d4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   148d6:	4770      	bx	lr
   148d8:	e000ed00 	.word	0xe000ed00

000148dc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   148dc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   148e0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   148e4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   148e6:	4672      	mov	r2, lr
	bl z_arm_fault
   148e8:	f7ff fee2 	bl	146b0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   148ec:	bd01      	pop	{r0, pc}
   148ee:	bf00      	nop

000148f0 <z_arm_interrupt_init>:
   148f0:	4804      	ldr	r0, [pc, #16]	; (14904 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   148f2:	2300      	movs	r3, #0
   148f4:	2140      	movs	r1, #64	; 0x40
   148f6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   148f8:	3301      	adds	r3, #1
   148fa:	2b30      	cmp	r3, #48	; 0x30
   148fc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   14900:	d1f9      	bne.n	148f6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   14902:	4770      	bx	lr
   14904:	e000e100 	.word	0xe000e100

00014908 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   14908:	2000      	movs	r0, #0
    msr CONTROL, r0
   1490a:	f380 8814 	msr	CONTROL, r0
    isb
   1490e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   14912:	f7fe fa25 	bl	12d60 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   14916:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   14918:	490d      	ldr	r1, [pc, #52]	; (14950 <__start+0x48>)
    str r0, [r1]
   1491a:	6008      	str	r0, [r1, #0]
    dsb
   1491c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   14920:	480c      	ldr	r0, [pc, #48]	; (14954 <__start+0x4c>)
    msr msp, r0
   14922:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   14926:	f000 f82b 	bl	14980 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1492a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   1492c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   14930:	4809      	ldr	r0, [pc, #36]	; (14958 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   14932:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   14936:	1840      	adds	r0, r0, r1
    msr PSP, r0
   14938:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1493c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   14940:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   14942:	4308      	orrs	r0, r1
    msr CONTROL, r0
   14944:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   14948:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1494c:	f7ff fc3a 	bl	141c4 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   14950:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   14954:	20006050 	.word	0x20006050
    ldr r0, =z_interrupt_stacks
   14958:	20006190 	.word	0x20006190

0001495c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   1495c:	4907      	ldr	r1, [pc, #28]	; (1497c <z_arm_clear_arm_mpu_config+0x20>)
   1495e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   14962:	2300      	movs	r3, #0
	int num_regions =
   14964:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   14968:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   1496a:	4293      	cmp	r3, r2
   1496c:	d100      	bne.n	14970 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   1496e:	4770      	bx	lr
  MPU->RNR = rnr;
   14970:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   14974:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   14978:	3301      	adds	r3, #1
   1497a:	e7f6      	b.n	1496a <z_arm_clear_arm_mpu_config+0xe>
   1497c:	e000ed00 	.word	0xe000ed00

00014980 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   14980:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   14982:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   14984:	2300      	movs	r3, #0
   14986:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1498a:	f7ff ffe7 	bl	1495c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1498e:	4b14      	ldr	r3, [pc, #80]	; (149e0 <z_arm_init_arch_hw_at_boot+0x60>)
   14990:	f04f 32ff 	mov.w	r2, #4294967295
   14994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   14998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   1499c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   149a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   149a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   149a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   149ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   149b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   149b4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   149b8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   149bc:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   149c0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   149c4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   149c8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   149cc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   149d0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   149d4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   149d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   149da:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   149de:	bd08      	pop	{r3, pc}
   149e0:	e000e100 	.word	0xe000e100

000149e4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   149e4:	4b08      	ldr	r3, [pc, #32]	; (14a08 <z_impl_k_thread_abort+0x24>)
   149e6:	689b      	ldr	r3, [r3, #8]
   149e8:	4283      	cmp	r3, r0
   149ea:	d10b      	bne.n	14a04 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   149ec:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   149f0:	b143      	cbz	r3, 14a04 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   149f2:	4b06      	ldr	r3, [pc, #24]	; (14a0c <z_impl_k_thread_abort+0x28>)
   149f4:	685a      	ldr	r2, [r3, #4]
   149f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   149fa:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   149fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   149fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   14a02:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   14a04:	f00d b9cc 	b.w	21da0 <z_thread_abort>
   14a08:	20002f8c 	.word	0x20002f8c
   14a0c:	e000ed00 	.word	0xe000ed00

00014a10 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14a10:	4b02      	ldr	r3, [pc, #8]	; (14a1c <z_arm_configure_static_mpu_regions+0xc>)
   14a12:	4a03      	ldr	r2, [pc, #12]	; (14a20 <z_arm_configure_static_mpu_regions+0x10>)
   14a14:	4803      	ldr	r0, [pc, #12]	; (14a24 <z_arm_configure_static_mpu_regions+0x14>)
   14a16:	2101      	movs	r1, #1
   14a18:	f000 b880 	b.w	14b1c <arm_core_mpu_configure_static_mpu_regions>
   14a1c:	20040000 	.word	0x20040000
   14a20:	20000000 	.word	0x20000000
   14a24:	0002b2cc 	.word	0x0002b2cc

00014a28 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   14a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   14a2a:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 14ae0 <mpu_configure_regions+0xb8>
   14a2e:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   14a30:	2500      	movs	r5, #0
   14a32:	428d      	cmp	r5, r1
   14a34:	da1a      	bge.n	14a6c <mpu_configure_regions+0x44>
		if (regions[i].size == 0U) {
   14a36:	6844      	ldr	r4, [r0, #4]
   14a38:	2c00      	cmp	r4, #0
   14a3a:	d04d      	beq.n	14ad8 <mpu_configure_regions+0xb0>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   14a3c:	b1fb      	cbz	r3, 14a7e <mpu_configure_regions+0x56>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   14a3e:	f104 3eff 	add.w	lr, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   14a42:	ea14 0f0e 	tst.w	r4, lr
   14a46:	d014      	beq.n	14a72 <mpu_configure_regions+0x4a>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   14a48:	466c      	mov	r4, sp
   14a4a:	b088      	sub	sp, #32
   14a4c:	466a      	mov	r2, sp
   14a4e:	4b25      	ldr	r3, [pc, #148]	; (14ae4 <mpu_configure_regions+0xbc>)
   14a50:	e9c2 3505 	strd	r3, r5, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14a54:	2303      	movs	r3, #3
   14a56:	f842 3f10 	str.w	r3, [r2, #16]!
   14a5a:	4823      	ldr	r0, [pc, #140]	; (14ae8 <mpu_configure_regions+0xc0>)
   14a5c:	2300      	movs	r3, #0
   14a5e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14a62:	f7fe fbf9 	bl	13258 <z_impl_z_log_msg_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   14a66:	f06f 0215 	mvn.w	r2, #21
   14a6a:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   14a6c:	4610      	mov	r0, r2
   14a6e:	46bd      	mov	sp, r7
   14a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   14a72:	2c1f      	cmp	r4, #31
   14a74:	d9e8      	bls.n	14a48 <mpu_configure_regions+0x20>
		((part->start & (part->size - 1U)) == 0U);
   14a76:	6806      	ldr	r6, [r0, #0]
		&&
   14a78:	ea1e 0f06 	tst.w	lr, r6
   14a7c:	d1e4      	bne.n	14a48 <mpu_configure_regions+0x20>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   14a7e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   14a80:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   14a82:	f8d0 e008 	ldr.w	lr, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   14a86:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
   14a88:	d914      	bls.n	14ab4 <mpu_configure_regions+0x8c>
	if (size > (1UL << 31)) {
   14a8a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   14a8e:	d813      	bhi.n	14ab8 <mpu_configure_regions+0x90>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   14a90:	3c01      	subs	r4, #1
   14a92:	fab4 f484 	clz	r4, r4
   14a96:	f1c4 041f 	rsb	r4, r4, #31
   14a9a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   14a9c:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   14a9e:	ea4e 0404 	orr.w	r4, lr, r4
   14aa2:	d90b      	bls.n	14abc <mpu_configure_regions+0x94>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14aa4:	466c      	mov	r4, sp
   14aa6:	b088      	sub	sp, #32
   14aa8:	466b      	mov	r3, sp
   14aaa:	4910      	ldr	r1, [pc, #64]	; (14aec <mpu_configure_regions+0xc4>)
   14aac:	e9c3 1205 	strd	r1, r2, [r3, #20]
   14ab0:	461a      	mov	r2, r3
   14ab2:	e7cf      	b.n	14a54 <mpu_configure_regions+0x2c>
		return REGION_32B;
   14ab4:	2408      	movs	r4, #8
   14ab6:	e7f1      	b.n	14a9c <mpu_configure_regions+0x74>
		return REGION_4G;
   14ab8:	243e      	movs	r4, #62	; 0x3e
   14aba:	e7ef      	b.n	14a9c <mpu_configure_regions+0x74>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14abc:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
   14ac0:	4316      	orrs	r6, r2
   14ac2:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14ac6:	f044 0401 	orr.w	r4, r4, #1
   14aca:	f8cc 2098 	str.w	r2, [ip, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14ace:	f8cc 609c 	str.w	r6, [ip, #156]	; 0x9c
		reg_index++;
   14ad2:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14ad4:	f8cc 40a0 	str.w	r4, [ip, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   14ad8:	3501      	adds	r5, #1
   14ada:	300c      	adds	r0, #12
   14adc:	e7a9      	b.n	14a32 <mpu_configure_regions+0xa>
   14ade:	bf00      	nop
   14ae0:	e000ed00 	.word	0xe000ed00
   14ae4:	0002c2c2 	.word	0x0002c2c2
   14ae8:	0002ac98 	.word	0x0002ac98
   14aec:	0002c2e5 	.word	0x0002c2e5

00014af0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   14af0:	4b04      	ldr	r3, [pc, #16]	; (14b04 <arm_core_mpu_enable+0x14>)
   14af2:	2205      	movs	r2, #5
   14af4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   14af8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14afc:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   14b00:	4770      	bx	lr
   14b02:	bf00      	nop
   14b04:	e000ed00 	.word	0xe000ed00

00014b08 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   14b08:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   14b0c:	4b02      	ldr	r3, [pc, #8]	; (14b18 <arm_core_mpu_disable+0x10>)
   14b0e:	2200      	movs	r2, #0
   14b10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   14b14:	4770      	bx	lr
   14b16:	bf00      	nop
   14b18:	e000ed00 	.word	0xe000ed00

00014b1c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   14b1c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   14b1e:	4c03      	ldr	r4, [pc, #12]	; (14b2c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   14b20:	2301      	movs	r3, #1
   14b22:	7822      	ldrb	r2, [r4, #0]
   14b24:	f7ff ff80 	bl	14a28 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   14b28:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   14b2a:	bd10      	pop	{r4, pc}
   14b2c:	20003aca 	.word	0x20003aca

00014b30 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   14b30:	4914      	ldr	r1, [pc, #80]	; (14b84 <z_arm_mpu_init+0x54>)
   14b32:	6808      	ldr	r0, [r1, #0]
   14b34:	2808      	cmp	r0, #8
{
   14b36:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   14b38:	d821      	bhi.n	14b7e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   14b3a:	f7ff ffe5 	bl	14b08 <arm_core_mpu_disable>
   14b3e:	4c12      	ldr	r4, [pc, #72]	; (14b88 <z_arm_mpu_init+0x58>)
   14b40:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14b42:	2200      	movs	r2, #0
   14b44:	4290      	cmp	r0, r2
   14b46:	f101 010c 	add.w	r1, r1, #12
   14b4a:	d105      	bne.n	14b58 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   14b4c:	4b0f      	ldr	r3, [pc, #60]	; (14b8c <z_arm_mpu_init+0x5c>)
   14b4e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   14b50:	f7ff ffce 	bl	14af0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   14b54:	2000      	movs	r0, #0
}
   14b56:	bd10      	pop	{r4, pc}
   14b58:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14b5c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   14b60:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   14b64:	4313      	orrs	r3, r2
   14b66:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14b6a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14b6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
   14b72:	f043 0301 	orr.w	r3, r3, #1
   14b76:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14b7a:	3201      	adds	r2, #1
   14b7c:	e7e2      	b.n	14b44 <z_arm_mpu_init+0x14>
		return -1;
   14b7e:	f04f 30ff 	mov.w	r0, #4294967295
   14b82:	e7e8      	b.n	14b56 <z_arm_mpu_init+0x26>
   14b84:	0002b2d8 	.word	0x0002b2d8
   14b88:	e000ed00 	.word	0xe000ed00
   14b8c:	20003aca 	.word	0x20003aca

00014b90 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   14b90:	4b01      	ldr	r3, [pc, #4]	; (14b98 <__stdout_hook_install+0x8>)
   14b92:	6018      	str	r0, [r3, #0]
}
   14b94:	4770      	bx	lr
   14b96:	bf00      	nop
   14b98:	200005d4 	.word	0x200005d4

00014b9c <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
   14b9c:	3902      	subs	r1, #2
   14b9e:	2901      	cmp	r1, #1
   14ba0:	d802      	bhi.n	14ba8 <z_impl_zephyr_fputc+0xc>
   14ba2:	4b03      	ldr	r3, [pc, #12]	; (14bb0 <z_impl_zephyr_fputc+0x14>)
   14ba4:	681b      	ldr	r3, [r3, #0]
   14ba6:	4718      	bx	r3
}
   14ba8:	f04f 30ff 	mov.w	r0, #4294967295
   14bac:	4770      	bx	lr
   14bae:	bf00      	nop
   14bb0:	200005d4 	.word	0x200005d4

00014bb4 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
   14bb4:	b40f      	push	{r0, r1, r2, r3}
   14bb6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   14bb8:	ab06      	add	r3, sp, #24
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   14bba:	2100      	movs	r1, #0
   14bbc:	f853 2b04 	ldr.w	r2, [r3], #4
   14bc0:	4805      	ldr	r0, [pc, #20]	; (14bd8 <printf+0x24>)
   14bc2:	9100      	str	r1, [sp, #0]
   14bc4:	2102      	movs	r1, #2
	va_list vargs;
	int     r;

	va_start(vargs, format);
   14bc6:	9303      	str	r3, [sp, #12]
   14bc8:	f7fd fcf0 	bl	125ac <z_cbvprintf_impl>
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
	va_end(vargs);

	return r;
}
   14bcc:	b005      	add	sp, #20
   14bce:	f85d eb04 	ldr.w	lr, [sp], #4
   14bd2:	b004      	add	sp, #16
   14bd4:	4770      	bx	lr
   14bd6:	bf00      	nop
   14bd8:	00026d47 	.word	0x00026d47

00014bdc <nordicsemi_nrf52_init>:
	__asm__ volatile(
   14bdc:	f04f 0340 	mov.w	r3, #64	; 0x40
   14be0:	f3ef 8211 	mrs	r2, BASEPRI
   14be4:	f383 8812 	msr	BASEPRI_MAX, r3
   14be8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   14bec:	4906      	ldr	r1, [pc, #24]	; (14c08 <nordicsemi_nrf52_init+0x2c>)
   14bee:	2301      	movs	r3, #1
   14bf0:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   14bf4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   14bf8:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   14bfc:	f382 8811 	msr	BASEPRI, r2
   14c00:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   14c04:	2000      	movs	r0, #0
   14c06:	4770      	bx	lr
   14c08:	4001e000 	.word	0x4001e000

00014c0c <sys_arch_reboot>:
    *p_gpregret = val;
   14c0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14c10:	b2c0      	uxtb	r0, r0
   14c12:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   14c16:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14c1a:	4905      	ldr	r1, [pc, #20]	; (14c30 <sys_arch_reboot+0x24>)
   14c1c:	4b05      	ldr	r3, [pc, #20]	; (14c34 <sys_arch_reboot+0x28>)
   14c1e:	68ca      	ldr	r2, [r1, #12]
   14c20:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   14c24:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14c26:	60cb      	str	r3, [r1, #12]
   14c28:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14c2c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14c2e:	e7fd      	b.n	14c2c <sys_arch_reboot+0x20>
   14c30:	e000ed00 	.word	0xe000ed00
   14c34:	05fa0004 	.word	0x05fa0004

00014c38 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   14c38:	b120      	cbz	r0, 14c44 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   14c3a:	4b03      	ldr	r3, [pc, #12]	; (14c48 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   14c3c:	0180      	lsls	r0, r0, #6
   14c3e:	f043 0301 	orr.w	r3, r3, #1
   14c42:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   14c44:	4770      	bx	lr
   14c46:	bf00      	nop
   14c48:	0002b020 	.word	0x0002b020

00014c4c <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   14c4c:	4b0e      	ldr	r3, [pc, #56]	; (14c88 <bt_hex_real+0x3c>)
   14c4e:	2940      	cmp	r1, #64	; 0x40
{
   14c50:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   14c52:	bf28      	it	cs
   14c54:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   14c56:	4c0d      	ldr	r4, [pc, #52]	; (14c8c <bt_hex_real+0x40>)
   14c58:	1846      	adds	r6, r0, r1
   14c5a:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   14c5c:	42b0      	cmp	r0, r6
   14c5e:	f103 0302 	add.w	r3, r3, #2
   14c62:	d104      	bne.n	14c6e <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   14c64:	2300      	movs	r3, #0
   14c66:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   14c6a:	4807      	ldr	r0, [pc, #28]	; (14c88 <bt_hex_real+0x3c>)
   14c6c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   14c6e:	7802      	ldrb	r2, [r0, #0]
   14c70:	0912      	lsrs	r2, r2, #4
   14c72:	5ca2      	ldrb	r2, [r4, r2]
   14c74:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   14c78:	f810 2b01 	ldrb.w	r2, [r0], #1
   14c7c:	f002 020f 	and.w	r2, r2, #15
   14c80:	5ca2      	ldrb	r2, [r4, r2]
   14c82:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   14c86:	e7e9      	b.n	14c5c <bt_hex_real+0x10>
   14c88:	20003ae9 	.word	0x20003ae9
   14c8c:	0002c363 	.word	0x0002c363

00014c90 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   14c90:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   14c92:	7803      	ldrb	r3, [r0, #0]
   14c94:	b08b      	sub	sp, #44	; 0x2c
   14c96:	4604      	mov	r4, r0
   14c98:	ad07      	add	r5, sp, #28
   14c9a:	2b03      	cmp	r3, #3
   14c9c:	d821      	bhi.n	14ce2 <bt_addr_le_str_real+0x52>
   14c9e:	e8df f003 	tbb	[pc, r3]
   14ca2:	1a02      	.short	0x1a02
   14ca4:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   14ca6:	4912      	ldr	r1, [pc, #72]	; (14cf0 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   14ca8:	4628      	mov	r0, r5
   14caa:	f011 ffc3 	bl	26c34 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   14cae:	7863      	ldrb	r3, [r4, #1]
   14cb0:	9304      	str	r3, [sp, #16]
   14cb2:	78a3      	ldrb	r3, [r4, #2]
   14cb4:	9303      	str	r3, [sp, #12]
   14cb6:	78e3      	ldrb	r3, [r4, #3]
   14cb8:	9302      	str	r3, [sp, #8]
   14cba:	7923      	ldrb	r3, [r4, #4]
   14cbc:	9301      	str	r3, [sp, #4]
   14cbe:	7963      	ldrb	r3, [r4, #5]
   14cc0:	9300      	str	r3, [sp, #0]
   14cc2:	4a0c      	ldr	r2, [pc, #48]	; (14cf4 <bt_addr_le_str_real+0x64>)
   14cc4:	79a3      	ldrb	r3, [r4, #6]
   14cc6:	9505      	str	r5, [sp, #20]
   14cc8:	211e      	movs	r1, #30
   14cca:	480b      	ldr	r0, [pc, #44]	; (14cf8 <bt_addr_le_str_real+0x68>)
   14ccc:	f010 ff11 	bl	25af2 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   14cd0:	4809      	ldr	r0, [pc, #36]	; (14cf8 <bt_addr_le_str_real+0x68>)
   14cd2:	b00b      	add	sp, #44	; 0x2c
   14cd4:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   14cd6:	4909      	ldr	r1, [pc, #36]	; (14cfc <bt_addr_le_str_real+0x6c>)
   14cd8:	e7e6      	b.n	14ca8 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   14cda:	4909      	ldr	r1, [pc, #36]	; (14d00 <bt_addr_le_str_real+0x70>)
   14cdc:	e7e4      	b.n	14ca8 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   14cde:	4909      	ldr	r1, [pc, #36]	; (14d04 <bt_addr_le_str_real+0x74>)
   14ce0:	e7e2      	b.n	14ca8 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   14ce2:	4a09      	ldr	r2, [pc, #36]	; (14d08 <bt_addr_le_str_real+0x78>)
   14ce4:	210a      	movs	r1, #10
   14ce6:	4628      	mov	r0, r5
   14ce8:	f010 ff03 	bl	25af2 <snprintk>
		break;
   14cec:	e7df      	b.n	14cae <bt_addr_le_str_real+0x1e>
   14cee:	bf00      	nop
   14cf0:	0002c31e 	.word	0x0002c31e
   14cf4:	0002c340 	.word	0x0002c340
   14cf8:	20003acb 	.word	0x20003acb
   14cfc:	0002c325 	.word	0x0002c325
   14d00:	0002c32c 	.word	0x0002c32c
   14d04:	0002c336 	.word	0x0002c336
   14d08:	0002dab8 	.word	0x0002dab8

00014d0c <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   14d0c:	b5b0      	push	{r4, r5, r7, lr}
   14d0e:	b086      	sub	sp, #24
	int err;
	BT_INFO("Saving ID");
   14d10:	466d      	mov	r5, sp
{
   14d12:	af00      	add	r7, sp, #0
	BT_INFO("Saving ID");
   14d14:	4b1d      	ldr	r3, [pc, #116]	; (14d8c <save_id+0x80>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   14d16:	4c1e      	ldr	r4, [pc, #120]	; (14d90 <save_id+0x84>)
	BT_INFO("Saving ID");
   14d18:	481e      	ldr	r0, [pc, #120]	; (14d94 <save_id+0x88>)
   14d1a:	617b      	str	r3, [r7, #20]
   14d1c:	f107 0210 	add.w	r2, r7, #16
   14d20:	2302      	movs	r3, #2
   14d22:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   14d26:	613b      	str	r3, [r7, #16]
   14d28:	f012 f868 	bl	26dfc <z_log_msg_static_create.constprop.0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   14d2c:	79e2      	ldrb	r2, [r4, #7]
   14d2e:	481a      	ldr	r0, [pc, #104]	; (14d98 <save_id+0x8c>)
   14d30:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   14d34:	4621      	mov	r1, r4
   14d36:	f7fe fec1 	bl	13abc <settings_save_one>
	if (err) {
   14d3a:	b168      	cbz	r0, 14d58 <save_id+0x4c>
		BT_ERR("Failed to save ID (err %d)", err);
   14d3c:	b088      	sub	sp, #32
   14d3e:	466a      	mov	r2, sp
   14d40:	4b16      	ldr	r3, [pc, #88]	; (14d9c <save_id+0x90>)
   14d42:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14d46:	2303      	movs	r3, #3
   14d48:	f842 3f10 	str.w	r3, [r2, #16]!
   14d4c:	4811      	ldr	r0, [pc, #68]	; (14d94 <save_id+0x88>)
   14d4e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14d52:	f012 f853 	bl	26dfc <z_log_msg_static_create.constprop.0>
   14d56:	46ad      	mov	sp, r5
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
   14d58:	79e2      	ldrb	r2, [r4, #7]
   14d5a:	4911      	ldr	r1, [pc, #68]	; (14da0 <save_id+0x94>)
   14d5c:	4811      	ldr	r0, [pc, #68]	; (14da4 <save_id+0x98>)
   14d5e:	0112      	lsls	r2, r2, #4
   14d60:	f7fe feac 	bl	13abc <settings_save_one>
	if (err) {
   14d64:	b170      	cbz	r0, 14d84 <save_id+0x78>
		BT_ERR("Failed to save IRK (err %d)", err);
   14d66:	466c      	mov	r4, sp
   14d68:	b088      	sub	sp, #32
   14d6a:	466a      	mov	r2, sp
   14d6c:	4b0e      	ldr	r3, [pc, #56]	; (14da8 <save_id+0x9c>)
   14d6e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14d72:	2303      	movs	r3, #3
   14d74:	f842 3f10 	str.w	r3, [r2, #16]!
   14d78:	4806      	ldr	r0, [pc, #24]	; (14d94 <save_id+0x88>)
   14d7a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14d7e:	f012 f83d 	bl	26dfc <z_log_msg_static_create.constprop.0>
   14d82:	46a5      	mov	sp, r4
	}
#endif
}
   14d84:	3718      	adds	r7, #24
   14d86:	46bd      	mov	sp, r7
   14d88:	bdb0      	pop	{r4, r5, r7, pc}
   14d8a:	bf00      	nop
   14d8c:	0002c37b 	.word	0x0002c37b
   14d90:	20000350 	.word	0x20000350
   14d94:	0002ac38 	.word	0x0002ac38
   14d98:	0002c385 	.word	0x0002c385
   14d9c:	0002c38b 	.word	0x0002c38b
   14da0:	200004b0 	.word	0x200004b0
   14da4:	0002c3a6 	.word	0x0002c3a6
   14da8:	0002c3ad 	.word	0x0002c3ad

00014dac <set.part.0>:
static int set(const char *name, size_t len_rd, settings_read_cb read_cb,
   14dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14db0:	b089      	sub	sp, #36	; 0x24
   14db2:	4605      	mov	r5, r0
   14db4:	af00      	add	r7, sp, #0
   14db6:	460e      	mov	r6, r1
   14db8:	4690      	mov	r8, r2
	if (!name) {
   14dba:	b968      	cbnz	r0, 14dd8 <set.part.0+0x2c>
		BT_ERR("Insufficient number of arguments");
   14dbc:	4b48      	ldr	r3, [pc, #288]	; (14ee0 <set.part.0+0x134>)
   14dbe:	61fb      	str	r3, [r7, #28]
   14dc0:	4848      	ldr	r0, [pc, #288]	; (14ee4 <set.part.0+0x138>)
   14dc2:	2302      	movs	r3, #2
   14dc4:	f107 0218 	add.w	r2, r7, #24
   14dc8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14dcc:	61bb      	str	r3, [r7, #24]
   14dce:	f012 f815 	bl	26dfc <z_log_msg_static_create.constprop.0>
	return -ENOENT;
   14dd2:	f06f 0401 	mvn.w	r4, #1
   14dd6:	e01e      	b.n	14e16 <set.part.0+0x6a>
	len = settings_name_next(name, &next);
   14dd8:	1d39      	adds	r1, r7, #4
   14dda:	f011 fc5c 	bl	26696 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   14dde:	4942      	ldr	r1, [pc, #264]	; (14ee8 <set.part.0+0x13c>)
   14de0:	4602      	mov	r2, r0
	len = settings_name_next(name, &next);
   14de2:	4681      	mov	r9, r0
	if (!strncmp(name, "id", len)) {
   14de4:	4628      	mov	r0, r5
   14de6:	f011 ff5d 	bl	26ca4 <strncmp>
   14dea:	4604      	mov	r4, r0
   14dec:	2800      	cmp	r0, #0
   14dee:	d135      	bne.n	14e5c <set.part.0+0xb0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14df0:	f3bf 8f5b 	dmb	ish
   14df4:	4d3d      	ldr	r5, [pc, #244]	; (14eec <set.part.0+0x140>)
   14df6:	682b      	ldr	r3, [r5, #0]
   14df8:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   14dfc:	071b      	lsls	r3, r3, #28
   14dfe:	d50f      	bpl.n	14e20 <set.part.0+0x74>
			BT_WARN("Ignoring identities stored in flash");
   14e00:	4b3b      	ldr	r3, [pc, #236]	; (14ef0 <set.part.0+0x144>)
   14e02:	61fb      	str	r3, [r7, #28]
   14e04:	4837      	ldr	r0, [pc, #220]	; (14ee4 <set.part.0+0x138>)
   14e06:	2302      	movs	r3, #2
   14e08:	f107 0218 	add.w	r2, r7, #24
   14e0c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14e10:	61bb      	str	r3, [r7, #24]
   14e12:	f011 fff3 	bl	26dfc <z_log_msg_static_create.constprop.0>
}
   14e16:	4620      	mov	r0, r4
   14e18:	3724      	adds	r7, #36	; 0x24
   14e1a:	46bd      	mov	sp, r7
   14e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   14e20:	3dcc      	subs	r5, #204	; 0xcc
   14e22:	2207      	movs	r2, #7
   14e24:	4629      	mov	r1, r5
   14e26:	4640      	mov	r0, r8
   14e28:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   14e2a:	2806      	cmp	r0, #6
   14e2c:	d811      	bhi.n	14e52 <set.part.0+0xa6>
				BT_ERR("Invalid length ID address in storage");
   14e2e:	4b31      	ldr	r3, [pc, #196]	; (14ef4 <set.part.0+0x148>)
   14e30:	482c      	ldr	r0, [pc, #176]	; (14ee4 <set.part.0+0x138>)
   14e32:	61fb      	str	r3, [r7, #28]
   14e34:	f107 0218 	add.w	r2, r7, #24
   14e38:	2302      	movs	r3, #2
   14e3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14e3e:	61bb      	str	r3, [r7, #24]
   14e40:	f011 ffdc 	bl	26dfc <z_log_msg_static_create.constprop.0>
			(void)memset(bt_dev.id_addr, 0,
   14e44:	2207      	movs	r2, #7
   14e46:	4621      	mov	r1, r4
   14e48:	4628      	mov	r0, r5
   14e4a:	f011 ff70 	bl	26d2e <memset>
			bt_dev.id_count = 0U;
   14e4e:	71ec      	strb	r4, [r5, #7]
   14e50:	e7e1      	b.n	14e16 <set.part.0+0x6a>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   14e52:	2307      	movs	r3, #7
   14e54:	fbb0 f0f3 	udiv	r0, r0, r3
   14e58:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   14e5a:	e7dc      	b.n	14e16 <set.part.0+0x6a>
	if (!strncmp(name, "name", len)) {
   14e5c:	4926      	ldr	r1, [pc, #152]	; (14ef8 <set.part.0+0x14c>)
   14e5e:	464a      	mov	r2, r9
   14e60:	4628      	mov	r0, r5
   14e62:	f011 ff1f 	bl	26ca4 <strncmp>
   14e66:	4604      	mov	r4, r0
   14e68:	b9d0      	cbnz	r0, 14ea0 <set.part.0+0xf4>
		len = read_cb(cb_arg, &bt_dev.name, sizeof(bt_dev.name) - 1);
   14e6a:	4924      	ldr	r1, [pc, #144]	; (14efc <set.part.0+0x150>)
   14e6c:	2241      	movs	r2, #65	; 0x41
   14e6e:	4640      	mov	r0, r8
   14e70:	47b0      	blx	r6
		if (len < 0) {
   14e72:	2800      	cmp	r0, #0
   14e74:	da0f      	bge.n	14e96 <set.part.0+0xea>
			BT_ERR("Failed to read device name from storage"
   14e76:	466d      	mov	r5, sp
   14e78:	b088      	sub	sp, #32
   14e7a:	466a      	mov	r2, sp
   14e7c:	4b20      	ldr	r3, [pc, #128]	; (14f00 <set.part.0+0x154>)
   14e7e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14e82:	2303      	movs	r3, #3
   14e84:	f842 3f10 	str.w	r3, [r2, #16]!
   14e88:	4816      	ldr	r0, [pc, #88]	; (14ee4 <set.part.0+0x138>)
   14e8a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14e8e:	f011 ffb5 	bl	26dfc <z_log_msg_static_create.constprop.0>
   14e92:	46ad      	mov	sp, r5
   14e94:	e7bf      	b.n	14e16 <set.part.0+0x6a>
			bt_dev.name[len] = '\0';
   14e96:	4b1b      	ldr	r3, [pc, #108]	; (14f04 <set.part.0+0x158>)
   14e98:	4418      	add	r0, r3
   14e9a:	f880 41a2 	strb.w	r4, [r0, #418]	; 0x1a2
			BT_DBG("Name set to %s", bt_dev.name);
   14e9e:	e7ba      	b.n	14e16 <set.part.0+0x6a>
	if (!strncmp(name, "irk", len)) {
   14ea0:	4919      	ldr	r1, [pc, #100]	; (14f08 <set.part.0+0x15c>)
   14ea2:	464a      	mov	r2, r9
   14ea4:	4628      	mov	r0, r5
   14ea6:	f011 fefd 	bl	26ca4 <strncmp>
   14eaa:	4604      	mov	r4, r0
   14eac:	2800      	cmp	r0, #0
   14eae:	d190      	bne.n	14dd2 <set.part.0+0x26>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
   14eb0:	4916      	ldr	r1, [pc, #88]	; (14f0c <set.part.0+0x160>)
   14eb2:	2210      	movs	r2, #16
   14eb4:	4640      	mov	r0, r8
   14eb6:	47b0      	blx	r6
		if (len < sizeof(bt_dev.irk[0])) {
   14eb8:	280f      	cmp	r0, #15
   14eba:	d8ac      	bhi.n	14e16 <set.part.0+0x6a>
				BT_ERR("Invalid length IRK in storage");
   14ebc:	4b14      	ldr	r3, [pc, #80]	; (14f10 <set.part.0+0x164>)
   14ebe:	61fb      	str	r3, [r7, #28]
   14ec0:	f107 0218 	add.w	r2, r7, #24
   14ec4:	2302      	movs	r3, #2
   14ec6:	4807      	ldr	r0, [pc, #28]	; (14ee4 <set.part.0+0x138>)
   14ec8:	61bb      	str	r3, [r7, #24]
   14eca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14ece:	f011 ff95 	bl	26dfc <z_log_msg_static_create.constprop.0>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
   14ed2:	2210      	movs	r2, #16
   14ed4:	4621      	mov	r1, r4
   14ed6:	480d      	ldr	r0, [pc, #52]	; (14f0c <set.part.0+0x160>)
   14ed8:	f011 ff29 	bl	26d2e <memset>
   14edc:	e79b      	b.n	14e16 <set.part.0+0x6a>
   14ede:	bf00      	nop
   14ee0:	0002c3c9 	.word	0x0002c3c9
   14ee4:	0002ac38 	.word	0x0002ac38
   14ee8:	0002c333 	.word	0x0002c333
   14eec:	2000041c 	.word	0x2000041c
   14ef0:	0002c3ea 	.word	0x0002c3ea
   14ef4:	0002c40e 	.word	0x0002c40e
   14ef8:	0002cc56 	.word	0x0002cc56
   14efc:	200004f2 	.word	0x200004f2
   14f00:	0002c433 	.word	0x0002c433
   14f04:	20000350 	.word	0x20000350
   14f08:	0002c3a9 	.word	0x0002c3a9
   14f0c:	200004b0 	.word	0x200004b0
   14f10:	0002c465 	.word	0x0002c465

00014f14 <set>:
{
   14f14:	b410      	push	{r4}
   14f16:	4611      	mov	r1, r2
   14f18:	461a      	mov	r2, r3
   14f1a:	4b07      	ldr	r3, [pc, #28]	; (14f38 <set+0x24>)
   14f1c:	f3bf 8f5b 	dmb	ish
   14f20:	681c      	ldr	r4, [r3, #0]
   14f22:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14f26:	f014 0401 	ands.w	r4, r4, #1
   14f2a:	d002      	beq.n	14f32 <set+0x1e>
}
   14f2c:	bc10      	pop	{r4}
   14f2e:	f7ff bf3d 	b.w	14dac <set.part.0>
   14f32:	4620      	mov	r0, r4
   14f34:	bc10      	pop	{r4}
   14f36:	4770      	bx	lr
   14f38:	2000041c 	.word	0x2000041c

00014f3c <bt_settings_encode_key>:
{
   14f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14f40:	b088      	sub	sp, #32
		snprintk(path, path_size,
   14f42:	799c      	ldrb	r4, [r3, #6]
{
   14f44:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   14f48:	795d      	ldrb	r5, [r3, #5]
   14f4a:	791e      	ldrb	r6, [r3, #4]
   14f4c:	78df      	ldrb	r7, [r3, #3]
   14f4e:	f893 c002 	ldrb.w	ip, [r3, #2]
   14f52:	f893 e001 	ldrb.w	lr, [r3, #1]
   14f56:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   14f58:	f1b8 0f00 	cmp.w	r8, #0
   14f5c:	d00e      	beq.n	14f7c <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   14f5e:	e9cd 3806 	strd	r3, r8, [sp, #24]
   14f62:	e9cd ce04 	strd	ip, lr, [sp, #16]
   14f66:	4613      	mov	r3, r2
   14f68:	e9cd 6702 	strd	r6, r7, [sp, #8]
   14f6c:	e9cd 4500 	strd	r4, r5, [sp]
   14f70:	4a08      	ldr	r2, [pc, #32]	; (14f94 <bt_settings_encode_key+0x58>)
   14f72:	f010 fdbe 	bl	25af2 <snprintk>
}
   14f76:	b008      	add	sp, #32
   14f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   14f7c:	e9cd e305 	strd	lr, r3, [sp, #20]
   14f80:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   14f84:	4613      	mov	r3, r2
   14f86:	e9cd 5601 	strd	r5, r6, [sp, #4]
   14f8a:	4a03      	ldr	r2, [pc, #12]	; (14f98 <bt_settings_encode_key+0x5c>)
   14f8c:	9400      	str	r4, [sp, #0]
   14f8e:	f010 fdb0 	bl	25af2 <snprintk>
}
   14f92:	e7f0      	b.n	14f76 <bt_settings_encode_key+0x3a>
   14f94:	0002c483 	.word	0x0002c483
   14f98:	0002c4a7 	.word	0x0002c4a7

00014f9c <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   14f9c:	4801      	ldr	r0, [pc, #4]	; (14fa4 <bt_settings_save_id+0x8>)
   14f9e:	f00c bb4b 	b.w	21638 <k_work_submit>
   14fa2:	bf00      	nop
   14fa4:	200005d8 	.word	0x200005d8

00014fa8 <commit.part.0>:
}

static int commit(void)
   14fa8:	b530      	push	{r4, r5, lr}
		 */
		return 0;
	}

#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
   14faa:	4d1f      	ldr	r5, [pc, #124]	; (15028 <commit.part.0+0x80>)
   14fac:	f895 31a2 	ldrb.w	r3, [r5, #418]	; 0x1a2
static int commit(void)
   14fb0:	b087      	sub	sp, #28
	if (bt_dev.name[0] == '\0') {
   14fb2:	b913      	cbnz	r3, 14fba <commit.part.0+0x12>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
   14fb4:	481d      	ldr	r0, [pc, #116]	; (1502c <commit.part.0+0x84>)
   14fb6:	f001 fbbf 	bl	16738 <bt_set_name>
	}
#endif
	if (!bt_dev.id_count) {
   14fba:	79eb      	ldrb	r3, [r5, #7]
   14fbc:	b9bb      	cbnz	r3, 14fee <commit.part.0+0x46>
		err = bt_setup_public_id_addr();
   14fbe:	f001 ffd5 	bl	16f6c <bt_setup_public_id_addr>
		if (err) {
   14fc2:	4604      	mov	r4, r0
   14fc4:	b160      	cbz	r0, 14fe0 <commit.part.0+0x38>
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			BT_ERR("Unable to setup an identity address");
   14fc6:	4b1a      	ldr	r3, [pc, #104]	; (15030 <commit.part.0+0x88>)
   14fc8:	9305      	str	r3, [sp, #20]
   14fca:	481a      	ldr	r0, [pc, #104]	; (15034 <commit.part.0+0x8c>)
   14fcc:	2302      	movs	r3, #2
   14fce:	aa04      	add	r2, sp, #16
   14fd0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14fd4:	9304      	str	r3, [sp, #16]
   14fd6:	f011 ff11 	bl	26dfc <z_log_msg_static_create.constprop.0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   14fda:	4620      	mov	r0, r4
   14fdc:	b007      	add	sp, #28
   14fde:	bd30      	pop	{r4, r5, pc}
	if (!bt_dev.id_count) {
   14fe0:	79eb      	ldrb	r3, [r5, #7]
   14fe2:	b923      	cbnz	r3, 14fee <commit.part.0+0x46>
		err = bt_setup_random_id_addr();
   14fe4:	f002 f85e 	bl	170a4 <bt_setup_random_id_addr>
		if (err) {
   14fe8:	4604      	mov	r4, r0
   14fea:	2800      	cmp	r0, #0
   14fec:	d1eb      	bne.n	14fc6 <commit.part.0+0x1e>
   14fee:	f3bf 8f5b 	dmb	ish
   14ff2:	4d11      	ldr	r5, [pc, #68]	; (15038 <commit.part.0+0x90>)
   14ff4:	682b      	ldr	r3, [r5, #0]
   14ff6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14ffa:	075b      	lsls	r3, r3, #29
   14ffc:	d401      	bmi.n	15002 <commit.part.0+0x5a>
		bt_finalize_init();
   14ffe:	f001 fae9 	bl	165d4 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15002:	f3bf 8f5b 	dmb	ish
   15006:	e855 4f00 	ldrex	r4, [r5]
   1500a:	f424 3380 	bic.w	r3, r4, #65536	; 0x10000
   1500e:	e845 3200 	strex	r2, r3, [r5]
   15012:	2a00      	cmp	r2, #0
   15014:	d1f7      	bne.n	15006 <commit.part.0+0x5e>
   15016:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   1501a:	f414 3480 	ands.w	r4, r4, #65536	; 0x10000
   1501e:	d0dc      	beq.n	14fda <commit.part.0+0x32>
		bt_settings_save_id();
   15020:	f7ff ffbc 	bl	14f9c <bt_settings_save_id>
	return 0;
   15024:	2400      	movs	r4, #0
   15026:	e7d8      	b.n	14fda <commit.part.0+0x32>
   15028:	20000350 	.word	0x20000350
   1502c:	0002c4c8 	.word	0x0002c4c8
   15030:	0002c4eb 	.word	0x0002c4eb
   15034:	0002ac38 	.word	0x0002ac38
   15038:	2000041c 	.word	0x2000041c

0001503c <commit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1503c:	4b05      	ldr	r3, [pc, #20]	; (15054 <commit+0x18>)
   1503e:	f3bf 8f5b 	dmb	ish
   15042:	6818      	ldr	r0, [r3, #0]
   15044:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15048:	f010 0001 	ands.w	r0, r0, #1
   1504c:	d001      	beq.n	15052 <commit+0x16>
   1504e:	f7ff bfab 	b.w	14fa8 <commit.part.0>
}
   15052:	4770      	bx	lr
   15054:	2000041c 	.word	0x2000041c

00015058 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   15058:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   1505a:	4d0a      	ldr	r5, [pc, #40]	; (15084 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   1505c:	4b0a      	ldr	r3, [pc, #40]	; (15088 <long_wq_init+0x30>)
{
   1505e:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15060:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   15062:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15064:	9302      	str	r3, [sp, #8]
   15066:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   15068:	f015 f841 	bl	2a0ee <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   1506c:	ab02      	add	r3, sp, #8
   1506e:	9300      	str	r3, [sp, #0]
   15070:	4628      	mov	r0, r5
   15072:	4906      	ldr	r1, [pc, #24]	; (1508c <long_wq_init+0x34>)
   15074:	230a      	movs	r3, #10
   15076:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   1507a:	f00c fae3 	bl	21644 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   1507e:	4620      	mov	r0, r4
   15080:	b005      	add	sp, #20
   15082:	bd30      	pop	{r4, r5, pc}
   15084:	20001d18 	.word	0x20001d18
   15088:	0002c51e 	.word	0x0002c51e
   1508c:	20004ac8 	.word	0x20004ac8

00015090 <bt_long_wq_schedule>:
{
   15090:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   15092:	4801      	ldr	r0, [pc, #4]	; (15098 <bt_long_wq_schedule+0x8>)
   15094:	f00c bb0e 	b.w	216b4 <k_work_schedule_for_queue>
   15098:	20001d18 	.word	0x20001d18

0001509c <bt_long_wq_reschedule>:
{
   1509c:	4601      	mov	r1, r0
	return k_work_reschedule_for_queue(&bt_long_wq, dwork, timeout);
   1509e:	4801      	ldr	r0, [pc, #4]	; (150a4 <bt_long_wq_reschedule+0x8>)
   150a0:	f00c bb38 	b.w	21714 <k_work_reschedule_for_queue>
   150a4:	20001d18 	.word	0x20001d18

000150a8 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   150a8:	b430      	push	{r4, r5}
   150aa:	4603      	mov	r3, r0
   150ac:	4608      	mov	r0, r1
	switch (src->type) {
   150ae:	781a      	ldrb	r2, [r3, #0]
   150b0:	2a01      	cmp	r2, #1
   150b2:	d013      	beq.n	150dc <uuid_to_uuid128+0x34>
   150b4:	2a02      	cmp	r2, #2
   150b6:	d026      	beq.n	15106 <uuid_to_uuid128+0x5e>
   150b8:	b972      	cbnz	r2, 150d8 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   150ba:	4a15      	ldr	r2, [pc, #84]	; (15110 <uuid_to_uuid128+0x68>)
   150bc:	f102 0410 	add.w	r4, r2, #16
   150c0:	f852 5b04 	ldr.w	r5, [r2], #4
   150c4:	f841 5b04 	str.w	r5, [r1], #4
   150c8:	42a2      	cmp	r2, r4
   150ca:	d1f9      	bne.n	150c0 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
   150cc:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
   150ce:	7812      	ldrb	r2, [r2, #0]
   150d0:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
   150d2:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   150d4:	0a1b      	lsrs	r3, r3, #8
   150d6:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   150d8:	bc30      	pop	{r4, r5}
   150da:	4770      	bx	lr
		*dst = uuid128_base;
   150dc:	4a0c      	ldr	r2, [pc, #48]	; (15110 <uuid_to_uuid128+0x68>)
   150de:	f102 0410 	add.w	r4, r2, #16
   150e2:	f852 5b04 	ldr.w	r5, [r2], #4
   150e6:	f841 5b04 	str.w	r5, [r1], #4
   150ea:	42a2      	cmp	r2, r4
   150ec:	d1f9      	bne.n	150e2 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
   150ee:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
   150f0:	7812      	ldrb	r2, [r2, #0]
   150f2:	700a      	strb	r2, [r1, #0]
   150f4:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   150f8:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
   150fa:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   150fc:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   150fe:	0a1b      	lsrs	r3, r3, #8
   15100:	7382      	strb	r2, [r0, #14]
   15102:	7403      	strb	r3, [r0, #16]
}
   15104:	e7e8      	b.n	150d8 <uuid_to_uuid128+0x30>
}
   15106:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   15108:	2211      	movs	r2, #17
   1510a:	4619      	mov	r1, r3
   1510c:	f011 be04 	b.w	26d18 <memcpy>
   15110:	0002c527 	.word	0x0002c527

00015114 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   15114:	b538      	push	{r3, r4, r5, lr}
   15116:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   15118:	4805      	ldr	r0, [pc, #20]	; (15130 <bt_buf_get_rx+0x1c>)
   1511a:	f013 ff36 	bl	28f8a <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   1511e:	4604      	mov	r4, r0
   15120:	b120      	cbz	r0, 1512c <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   15122:	2100      	movs	r1, #0
   15124:	3008      	adds	r0, #8
   15126:	f013 ff55 	bl	28fd4 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1512a:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   1512c:	4620      	mov	r0, r4
   1512e:	bd38      	pop	{r3, r4, r5, pc}
   15130:	20000b18 	.word	0x20000b18

00015134 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   15134:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   15136:	490b      	ldr	r1, [pc, #44]	; (15164 <bt_buf_get_cmd_complete+0x30>)
{
   15138:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   1513a:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
   1513e:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   15140:	b920      	cbnz	r0, 1514c <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   15142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15146:	2001      	movs	r0, #1
   15148:	f7ff bfe4 	b.w	15114 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   1514c:	f013 ff9c 	bl	29088 <net_buf_ref>
   15150:	2301      	movs	r3, #1
		buf->len = 0U;
   15152:	2100      	movs	r1, #0
   15154:	7503      	strb	r3, [r0, #20]
   15156:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   15158:	4604      	mov	r4, r0
   1515a:	3008      	adds	r0, #8
   1515c:	f013 ff3a 	bl	28fd4 <net_buf_simple_reserve>
}
   15160:	4620      	mov	r0, r4
   15162:	bd10      	pop	{r4, pc}
   15164:	20000350 	.word	0x20000350

00015168 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   15168:	b570      	push	{r4, r5, r6, lr}
   1516a:	4604      	mov	r4, r0
	switch (evt) {
   1516c:	2c0f      	cmp	r4, #15
{
   1516e:	460d      	mov	r5, r1
   15170:	4610      	mov	r0, r2
   15172:	4619      	mov	r1, r3
	switch (evt) {
   15174:	d805      	bhi.n	15182 <bt_buf_get_evt+0x1a>
   15176:	2c0d      	cmp	r4, #13
   15178:	d912      	bls.n	151a0 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   1517a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   1517e:	f7ff bfd9 	b.w	15134 <bt_buf_get_cmd_complete>
	switch (evt) {
   15182:	2c13      	cmp	r4, #19
   15184:	d10c      	bne.n	151a0 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   15186:	480b      	ldr	r0, [pc, #44]	; (151b4 <bt_buf_get_evt+0x4c>)
   15188:	f013 feff 	bl	28f8a <net_buf_alloc_fixed>
			if (buf) {
   1518c:	4604      	mov	r4, r0
   1518e:	b128      	cbz	r0, 1519c <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   15190:	2100      	movs	r1, #0
   15192:	3008      	adds	r0, #8
   15194:	f013 ff1e 	bl	28fd4 <net_buf_simple_reserve>
   15198:	2301      	movs	r3, #1
   1519a:	7523      	strb	r3, [r4, #20]
}
   1519c:	4620      	mov	r0, r4
   1519e:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   151a0:	4602      	mov	r2, r0
   151a2:	460b      	mov	r3, r1
		if (discardable) {
   151a4:	b10d      	cbz	r5, 151aa <bt_buf_get_evt+0x42>
   151a6:	4804      	ldr	r0, [pc, #16]	; (151b8 <bt_buf_get_evt+0x50>)
   151a8:	e7ee      	b.n	15188 <bt_buf_get_evt+0x20>
}
   151aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   151ae:	2001      	movs	r0, #1
   151b0:	f7ff bfb0 	b.w	15114 <bt_buf_get_rx>
   151b4:	20000b44 	.word	0x20000b44
   151b8:	20000a94 	.word	0x20000a94

000151bc <ver_str>:
{
   151bc:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   151be:	4d0b      	ldr	r5, [pc, #44]	; (151ec <ver_str+0x30>)
{
   151c0:	4606      	mov	r6, r0
	const char * const str[] = {
   151c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   151c4:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   151c6:	ac01      	add	r4, sp, #4
   151c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   151ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   151cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   151ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   151d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
   151d2:	2e0c      	cmp	r6, #12
	const char * const str[] = {
   151d4:	682b      	ldr	r3, [r5, #0]
   151d6:	6023      	str	r3, [r4, #0]
		return str[ver];
   151d8:	bf9b      	ittet	ls
   151da:	ab0e      	addls	r3, sp, #56	; 0x38
   151dc:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
   151e0:	4803      	ldrhi	r0, [pc, #12]	; (151f0 <ver_str+0x34>)
		return str[ver];
   151e2:	f856 0c34 	ldrls.w	r0, [r6, #-52]
}
   151e6:	b00e      	add	sp, #56	; 0x38
   151e8:	bd70      	pop	{r4, r5, r6, pc}
   151ea:	bf00      	nop
   151ec:	0002af8c 	.word	0x0002af8c
   151f0:	0002c62e 	.word	0x0002c62e

000151f4 <unpair>:
{
   151f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   151f6:	4606      	mov	r6, r0
   151f8:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
   151fa:	f002 fd61 	bl	17cc0 <bt_conn_lookup_addr_le>
	if (conn) {
   151fe:	4604      	mov	r4, r0
   15200:	b9f8      	cbnz	r0, 15242 <unpair+0x4e>
			keys = bt_keys_find_addr(id, addr);
   15202:	4639      	mov	r1, r7
   15204:	4630      	mov	r0, r6
   15206:	f007 fcc9 	bl	1cb9c <bt_keys_find_addr>
		if (keys) {
   1520a:	4605      	mov	r5, r0
   1520c:	b110      	cbz	r0, 15214 <unpair+0x20>
			bt_keys_clear(keys);
   1520e:	4628      	mov	r0, r5
   15210:	f007 fcd4 	bl	1cbbc <bt_keys_clear>
	bt_gatt_clear(id, addr);
   15214:	4639      	mov	r1, r7
   15216:	4630      	mov	r0, r6
   15218:	f005 fc84 	bl	1ab24 <bt_gatt_clear>
	return list->head;
   1521c:	4b14      	ldr	r3, [pc, #80]	; (15270 <unpair+0x7c>)
   1521e:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   15220:	b323      	cbz	r3, 1526c <unpair+0x78>
	return node->next;
   15222:	f853 490c 	ldr.w	r4, [r3], #-12
   15226:	b104      	cbz	r4, 1522a <unpair+0x36>
   15228:	3c0c      	subs	r4, #12
		if (listener->bond_deleted) {
   1522a:	689b      	ldr	r3, [r3, #8]
   1522c:	b113      	cbz	r3, 15234 <unpair+0x40>
			listener->bond_deleted(id, addr);
   1522e:	4639      	mov	r1, r7
   15230:	4630      	mov	r0, r6
   15232:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   15234:	b1d4      	cbz	r4, 1526c <unpair+0x78>
   15236:	68e2      	ldr	r2, [r4, #12]
   15238:	b102      	cbz	r2, 1523c <unpair+0x48>
   1523a:	3a0c      	subs	r2, #12
	struct bt_keys *keys = NULL;
   1523c:	4623      	mov	r3, r4
   1523e:	4614      	mov	r4, r2
   15240:	e7f3      	b.n	1522a <unpair+0x36>
		if (conn->type == BT_CONN_TYPE_LE) {
   15242:	7883      	ldrb	r3, [r0, #2]
   15244:	2b01      	cmp	r3, #1
   15246:	f04f 0300 	mov.w	r3, #0
			keys = conn->le.keys;
   1524a:	bf04      	itt	eq
   1524c:	f8d0 50b4 	ldreq.w	r5, [r0, #180]	; 0xb4
			conn->le.keys = NULL;
   15250:	f8c0 30b4 	streq.w	r3, [r0, #180]	; 0xb4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   15254:	f04f 0113 	mov.w	r1, #19
	struct bt_keys *keys = NULL;
   15258:	bf18      	it	ne
   1525a:	461d      	movne	r5, r3
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   1525c:	f012 f8c2 	bl	273e4 <bt_conn_disconnect>
		bt_conn_unref(conn);
   15260:	4620      	mov	r0, r4
   15262:	f012 f87a 	bl	2735a <bt_conn_unref>
		if (!keys) {
   15266:	2d00      	cmp	r5, #0
   15268:	d1d1      	bne.n	1520e <unpair+0x1a>
   1526a:	e7ca      	b.n	15202 <unpair+0xe>
}
   1526c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1526e:	bf00      	nop
   15270:	20002ae0 	.word	0x20002ae0

00015274 <hci_disconn_complete_prio>:
{
   15274:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   15276:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   15278:	781a      	ldrb	r2, [r3, #0]
   1527a:	b972      	cbnz	r2, 1529a <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1527c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   15280:	4620      	mov	r0, r4
   15282:	f002 fb09 	bl	17898 <bt_conn_lookup_handle>
	if (!conn) {
   15286:	4605      	mov	r5, r0
   15288:	b940      	cbnz	r0, 1529c <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1528a:	4b08      	ldr	r3, [pc, #32]	; (152ac <hci_disconn_complete_prio+0x38>)
   1528c:	881a      	ldrh	r2, [r3, #0]
   1528e:	b922      	cbnz	r2, 1529a <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   15290:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   15294:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   15298:	8018      	strh	r0, [r3, #0]
}
   1529a:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1529c:	2101      	movs	r1, #1
   1529e:	f002 fb03 	bl	178a8 <bt_conn_set_state>
	bt_conn_unref(conn);
   152a2:	4628      	mov	r0, r5
}
   152a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   152a8:	f012 b857 	b.w	2735a <bt_conn_unref>
   152ac:	20003a94 	.word	0x20003a94

000152b0 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   152b0:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   152b2:	4c0d      	ldr	r4, [pc, #52]	; (152e8 <find_pending_connect.part.0+0x38>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   152b4:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   152b6:	2205      	movs	r2, #5
   152b8:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   152bc:	f002 fd4c 	bl	17d58 <bt_conn_lookup_state_le>
		if (!conn) {
   152c0:	b978      	cbnz	r0, 152e2 <find_pending_connect.part.0+0x32>
						       BT_ADDR_LE_NONE,
   152c2:	4b0a      	ldr	r3, [pc, #40]	; (152ec <find_pending_connect.part.0+0x3c>)
   152c4:	6b58      	ldr	r0, [r3, #52]	; 0x34
   152c6:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   152c8:	9000      	str	r0, [sp, #0]
   152ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   152ce:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   152d2:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   152d6:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   152da:	2204      	movs	r2, #4
   152dc:	4669      	mov	r1, sp
   152de:	f002 fd3b 	bl	17d58 <bt_conn_lookup_state_le>
}
   152e2:	b002      	add	sp, #8
   152e4:	bd10      	pop	{r4, pc}
   152e6:	bf00      	nop
   152e8:	20000350 	.word	0x20000350
   152ec:	0002af8c 	.word	0x0002af8c

000152f0 <bt_init.part.0>:
static int bt_init(void)
   152f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			BT_INFO("No ID address. App must call settings_load()");
   152f2:	4b07      	ldr	r3, [pc, #28]	; (15310 <bt_init.part.0+0x20>)
   152f4:	9305      	str	r3, [sp, #20]
   152f6:	4807      	ldr	r0, [pc, #28]	; (15314 <bt_init.part.0+0x24>)
   152f8:	2302      	movs	r3, #2
   152fa:	aa04      	add	r2, sp, #16
   152fc:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   15300:	9304      	str	r3, [sp, #16]
   15302:	f011 fe3b 	bl	26f7c <z_log_msg_static_create.constprop.0>
}
   15306:	2000      	movs	r0, #0
   15308:	b007      	add	sp, #28
   1530a:	f85d fb04 	ldr.w	pc, [sp], #4
   1530e:	bf00      	nop
   15310:	0002c636 	.word	0x0002c636
   15314:	0002ac10 	.word	0x0002ac10

00015318 <hci_data_buf_overflow>:
{
   15318:	b580      	push	{r7, lr}
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   1531a:	6883      	ldr	r3, [r0, #8]
{
   1531c:	af00      	add	r7, sp, #0
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   1531e:	b088      	sub	sp, #32
   15320:	781b      	ldrb	r3, [r3, #0]
   15322:	466a      	mov	r2, sp
   15324:	4906      	ldr	r1, [pc, #24]	; (15340 <hci_data_buf_overflow+0x28>)
   15326:	4807      	ldr	r0, [pc, #28]	; (15344 <hci_data_buf_overflow+0x2c>)
   15328:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1532c:	2303      	movs	r3, #3
   1532e:	f842 3f10 	str.w	r3, [r2, #16]!
   15332:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15336:	f011 fe21 	bl	26f7c <z_log_msg_static_create.constprop.0>
}
   1533a:	46bd      	mov	sp, r7
   1533c:	bd80      	pop	{r7, pc}
   1533e:	bf00      	nop
   15340:	0002c663 	.word	0x0002c663
   15344:	0002ac10 	.word	0x0002ac10

00015348 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   15348:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   1534a:	4b06      	ldr	r3, [pc, #24]	; (15364 <le_conn_param_neg_reply.part.0+0x1c>)
   1534c:	9305      	str	r3, [sp, #20]
   1534e:	4806      	ldr	r0, [pc, #24]	; (15368 <le_conn_param_neg_reply.part.0+0x20>)
   15350:	2302      	movs	r3, #2
   15352:	aa04      	add	r2, sp, #16
   15354:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15358:	9304      	str	r3, [sp, #16]
   1535a:	f011 fe0f 	bl	26f7c <z_log_msg_static_create.constprop.0>
}
   1535e:	b007      	add	sp, #28
   15360:	f85d fb04 	ldr.w	pc, [sp], #4
   15364:	0002c68b 	.word	0x0002c68b
   15368:	0002ac10 	.word	0x0002ac10

0001536c <le_conn_update_complete>:
{
   1536c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1536e:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   15370:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   15372:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   15376:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   15378:	4630      	mov	r0, r6
   1537a:	f002 fa8d 	bl	17898 <bt_conn_lookup_handle>
	if (!conn) {
   1537e:	4604      	mov	r4, r0
   15380:	b988      	cbnz	r0, 153a6 <le_conn_update_complete+0x3a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15382:	466c      	mov	r4, sp
   15384:	b088      	sub	sp, #32
   15386:	466a      	mov	r2, sp
   15388:	4b22      	ldr	r3, [pc, #136]	; (15414 <le_conn_update_complete+0xa8>)
   1538a:	4823      	ldr	r0, [pc, #140]	; (15418 <le_conn_update_complete+0xac>)
   1538c:	e9c2 3605 	strd	r3, r6, [r2, #20]
   15390:	2303      	movs	r3, #3
   15392:	f842 3f10 	str.w	r3, [r2, #16]!
   15396:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1539a:	f011 fdef 	bl	26f7c <z_log_msg_static_create.constprop.0>
   1539e:	46a5      	mov	sp, r4
}
   153a0:	370c      	adds	r7, #12
   153a2:	46bd      	mov	sp, r7
   153a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!evt->status) {
   153a6:	782b      	ldrb	r3, [r5, #0]
   153a8:	b9bb      	cbnz	r3, 153da <le_conn_update_complete+0x6e>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   153aa:	792a      	ldrb	r2, [r5, #4]
   153ac:	78eb      	ldrb	r3, [r5, #3]
   153ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   153b2:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   153b6:	79aa      	ldrb	r2, [r5, #6]
   153b8:	796b      	ldrb	r3, [r5, #5]
   153ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   153be:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   153c2:	79eb      	ldrb	r3, [r5, #7]
   153c4:	7a2a      	ldrb	r2, [r5, #8]
   153c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   153ca:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   153ce:	f002 fb7b 	bl	17ac8 <notify_le_param_updated>
	bt_conn_unref(conn);
   153d2:	4620      	mov	r0, r4
   153d4:	f011 ffc1 	bl	2735a <bt_conn_unref>
   153d8:	e7e2      	b.n	153a0 <le_conn_update_complete+0x34>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   153da:	2b1a      	cmp	r3, #26
   153dc:	d1f9      	bne.n	153d2 <le_conn_update_complete+0x66>
   153de:	78c3      	ldrb	r3, [r0, #3]
   153e0:	2b01      	cmp	r3, #1
   153e2:	d1f6      	bne.n	153d2 <le_conn_update_complete+0x66>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   153e4:	f44f 7100 	mov.w	r1, #512	; 0x200
   153e8:	3004      	adds	r0, #4
   153ea:	f011 fdb3 	bl	26f54 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   153ee:	0583      	lsls	r3, r0, #22
   153f0:	d4ef      	bmi.n	153d2 <le_conn_update_complete+0x66>
		param.interval_min = conn->le.interval_min;
   153f2:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   153f6:	803b      	strh	r3, [r7, #0]
		param.interval_max = conn->le.interval_max;
   153f8:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   153fc:	807b      	strh	r3, [r7, #2]
		param.latency = conn->le.pending_latency;
   153fe:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   15402:	80bb      	strh	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   15404:	4639      	mov	r1, r7
		param.timeout = conn->le.pending_timeout;
   15406:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   1540a:	80fb      	strh	r3, [r7, #6]
		bt_l2cap_update_conn_param(conn, &param);
   1540c:	4620      	mov	r0, r4
   1540e:	f002 febd 	bl	1818c <bt_l2cap_update_conn_param>
   15412:	e7de      	b.n	153d2 <le_conn_update_complete+0x66>
   15414:	0002c6a5 	.word	0x0002c6a5
   15418:	0002ac10 	.word	0x0002ac10

0001541c <rx_queue_put>:
{
   1541c:	b598      	push	{r3, r4, r7, lr}
   1541e:	4601      	mov	r1, r0
   15420:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   15422:	480d      	ldr	r0, [pc, #52]	; (15458 <rx_queue_put+0x3c>)
   15424:	f013 fdda 	bl	28fdc <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   15428:	490c      	ldr	r1, [pc, #48]	; (1545c <rx_queue_put+0x40>)
   1542a:	480d      	ldr	r0, [pc, #52]	; (15460 <rx_queue_put+0x44>)
   1542c:	f014 fe4e 	bl	2a0cc <k_work_submit_to_queue>
	if (err < 0) {
   15430:	2800      	cmp	r0, #0
   15432:	da0e      	bge.n	15452 <rx_queue_put+0x36>
		BT_ERR("Could not submit rx_work: %d", err);
   15434:	466c      	mov	r4, sp
   15436:	b088      	sub	sp, #32
   15438:	466a      	mov	r2, sp
   1543a:	4b0a      	ldr	r3, [pc, #40]	; (15464 <rx_queue_put+0x48>)
   1543c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15440:	2303      	movs	r3, #3
   15442:	f842 3f10 	str.w	r3, [r2, #16]!
   15446:	4808      	ldr	r0, [pc, #32]	; (15468 <rx_queue_put+0x4c>)
   15448:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1544c:	f011 fd96 	bl	26f7c <z_log_msg_static_create.constprop.0>
   15450:	46a5      	mov	sp, r4
}
   15452:	46bd      	mov	sp, r7
   15454:	bd98      	pop	{r3, r4, r7, pc}
   15456:	bf00      	nop
   15458:	2000048c 	.word	0x2000048c
   1545c:	200005e8 	.word	0x200005e8
   15460:	20001db8 	.word	0x20001db8
   15464:	0002c6c9 	.word	0x0002c6c9
   15468:	0002ac10 	.word	0x0002ac10

0001546c <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   1546c:	b5b0      	push	{r4, r5, r7, lr}
   1546e:	460b      	mov	r3, r1
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   15470:	898d      	ldrh	r5, [r1, #12]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   15472:	af00      	add	r7, sp, #0
   15474:	4604      	mov	r4, r0
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   15476:	4629      	mov	r1, r5
   15478:	6898      	ldr	r0, [r3, #8]
   1547a:	f7ff fbe7 	bl	14c4c <bt_hex_real>
   1547e:	b08a      	sub	sp, #40	; 0x28
   15480:	466a      	mov	r2, sp
   15482:	4b09      	ldr	r3, [pc, #36]	; (154a8 <handle_event.part.0+0x3c>)
   15484:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15488:	2304      	movs	r3, #4
   1548a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   1548e:	4b07      	ldr	r3, [pc, #28]	; (154ac <handle_event.part.0+0x40>)
   15490:	e9c2 5007 	strd	r5, r0, [r2, #28]
   15494:	f44f 512a 	mov.w	r1, #10880	; 0x2a80
   15498:	f842 3f10 	str.w	r3, [r2, #16]!
   1549c:	4804      	ldr	r0, [pc, #16]	; (154b0 <handle_event.part.0+0x44>)
   1549e:	f011 fd6d 	bl	26f7c <z_log_msg_static_create.constprop.0>
}
   154a2:	46bd      	mov	sp, r7
   154a4:	bdb0      	pop	{r4, r5, r7, pc}
   154a6:	bf00      	nop
   154a8:	0002c6e6 	.word	0x0002c6e6
   154ac:	01000005 	.word	0x01000005
   154b0:	0002ac10 	.word	0x0002ac10

000154b4 <hci_hardware_error>:
{
   154b4:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   154b6:	2101      	movs	r1, #1
   154b8:	af00      	add	r7, sp, #0
   154ba:	3008      	adds	r0, #8
   154bc:	f013 fe31 	bl	29122 <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   154c0:	b088      	sub	sp, #32
   154c2:	7803      	ldrb	r3, [r0, #0]
   154c4:	466a      	mov	r2, sp
   154c6:	4906      	ldr	r1, [pc, #24]	; (154e0 <hci_hardware_error+0x2c>)
   154c8:	4806      	ldr	r0, [pc, #24]	; (154e4 <hci_hardware_error+0x30>)
   154ca:	e9c2 1305 	strd	r1, r3, [r2, #20]
   154ce:	2303      	movs	r3, #3
   154d0:	f842 3f10 	str.w	r3, [r2, #16]!
   154d4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   154d8:	f011 fd50 	bl	26f7c <z_log_msg_static_create.constprop.0>
}
   154dc:	46bd      	mov	sp, r7
   154de:	bd80      	pop	{r7, pc}
   154e0:	0002c708 	.word	0x0002c708
   154e4:	0002ac10 	.word	0x0002ac10

000154e8 <le_data_len_change>:
{
   154e8:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   154ea:	6883      	ldr	r3, [r0, #8]
   154ec:	881c      	ldrh	r4, [r3, #0]
{
   154ee:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   154f0:	4620      	mov	r0, r4
   154f2:	f002 f9d1 	bl	17898 <bt_conn_lookup_handle>
	if (!conn) {
   154f6:	b980      	cbnz	r0, 1551a <le_data_len_change+0x32>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   154f8:	466d      	mov	r5, sp
   154fa:	b088      	sub	sp, #32
   154fc:	466a      	mov	r2, sp
   154fe:	4b08      	ldr	r3, [pc, #32]	; (15520 <le_data_len_change+0x38>)
   15500:	4808      	ldr	r0, [pc, #32]	; (15524 <le_data_len_change+0x3c>)
   15502:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15506:	2303      	movs	r3, #3
   15508:	f842 3f10 	str.w	r3, [r2, #16]!
   1550c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15510:	f011 fd34 	bl	26f7c <z_log_msg_static_create.constprop.0>
   15514:	46ad      	mov	sp, r5
}
   15516:	46bd      	mov	sp, r7
   15518:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   1551a:	f011 ff1e 	bl	2735a <bt_conn_unref>
   1551e:	e7fa      	b.n	15516 <le_data_len_change+0x2e>
   15520:	0002c6a5 	.word	0x0002c6a5
   15524:	0002ac10 	.word	0x0002ac10

00015528 <le_phy_update_complete>:
{
   15528:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1552a:	6883      	ldr	r3, [r0, #8]
   1552c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
{
   15530:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   15532:	4620      	mov	r0, r4
   15534:	f002 f9b0 	bl	17898 <bt_conn_lookup_handle>
	if (!conn) {
   15538:	b980      	cbnz	r0, 1555c <le_phy_update_complete+0x34>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1553a:	466d      	mov	r5, sp
   1553c:	b088      	sub	sp, #32
   1553e:	466a      	mov	r2, sp
   15540:	4b08      	ldr	r3, [pc, #32]	; (15564 <le_phy_update_complete+0x3c>)
   15542:	4809      	ldr	r0, [pc, #36]	; (15568 <le_phy_update_complete+0x40>)
   15544:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15548:	2303      	movs	r3, #3
   1554a:	f842 3f10 	str.w	r3, [r2, #16]!
   1554e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15552:	f011 fd13 	bl	26f7c <z_log_msg_static_create.constprop.0>
   15556:	46ad      	mov	sp, r5
}
   15558:	46bd      	mov	sp, r7
   1555a:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   1555c:	f011 fefd 	bl	2735a <bt_conn_unref>
   15560:	e7fa      	b.n	15558 <le_phy_update_complete+0x30>
   15562:	bf00      	nop
   15564:	0002c6a5 	.word	0x0002c6a5
   15568:	0002ac10 	.word	0x0002ac10

0001556c <hci_disconn_complete>:
{
   1556c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   15570:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   15572:	782e      	ldrb	r6, [r5, #0]
{
   15574:	af00      	add	r7, sp, #0
	if (evt->status) {
   15576:	b9ae      	cbnz	r6, 155a4 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15578:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1557c:	4640      	mov	r0, r8
   1557e:	f002 f98b 	bl	17898 <bt_conn_lookup_handle>
	if (!conn) {
   15582:	4604      	mov	r4, r0
   15584:	b988      	cbnz	r0, 155aa <hci_disconn_complete+0x3e>
		BT_ERR("Unable to look up conn with handle %u", handle);
   15586:	466c      	mov	r4, sp
   15588:	b088      	sub	sp, #32
   1558a:	466a      	mov	r2, sp
   1558c:	4b0b      	ldr	r3, [pc, #44]	; (155bc <hci_disconn_complete+0x50>)
   1558e:	480c      	ldr	r0, [pc, #48]	; (155c0 <hci_disconn_complete+0x54>)
   15590:	e9c2 3805 	strd	r3, r8, [r2, #20]
   15594:	2303      	movs	r3, #3
   15596:	f842 3f10 	str.w	r3, [r2, #16]!
   1559a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1559e:	f011 fced 	bl	26f7c <z_log_msg_static_create.constprop.0>
   155a2:	46a5      	mov	sp, r4
}
   155a4:	46bd      	mov	sp, r7
   155a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   155aa:	78eb      	ldrb	r3, [r5, #3]
   155ac:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   155ae:	4631      	mov	r1, r6
   155b0:	f002 f97a 	bl	178a8 <bt_conn_set_state>
		bt_conn_unref(conn);
   155b4:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   155b6:	f011 fed0 	bl	2735a <bt_conn_unref>
   155ba:	e7f3      	b.n	155a4 <hci_disconn_complete+0x38>
   155bc:	0002c72a 	.word	0x0002c72a
   155c0:	0002ac10 	.word	0x0002ac10

000155c4 <handle_event>:
{
   155c4:	b598      	push	{r3, r4, r7, lr}
   155c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   155ca:	af00      	add	r7, sp, #0
		if (handler->event != event) {
   155cc:	7814      	ldrb	r4, [r2, #0]
   155ce:	4284      	cmp	r4, r0
   155d0:	d005      	beq.n	155de <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   155d2:	3208      	adds	r2, #8
   155d4:	429a      	cmp	r2, r3
   155d6:	d1f9      	bne.n	155cc <handle_event+0x8>
	if (err == -EOPNOTSUPP) {
   155d8:	f7ff ff48 	bl	1546c <handle_event.part.0>
}
   155dc:	e013      	b.n	15606 <handle_event+0x42>
		if (buf->len < handler->min_len) {
   155de:	898b      	ldrh	r3, [r1, #12]
   155e0:	7854      	ldrb	r4, [r2, #1]
   155e2:	429c      	cmp	r4, r3
   155e4:	d911      	bls.n	1560a <handle_event+0x46>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   155e6:	466c      	mov	r4, sp
   155e8:	b088      	sub	sp, #32
   155ea:	466a      	mov	r2, sp
   155ec:	4909      	ldr	r1, [pc, #36]	; (15614 <handle_event+0x50>)
   155ee:	61d0      	str	r0, [r2, #28]
   155f0:	e9c2 1305 	strd	r1, r3, [r2, #20]
   155f4:	2304      	movs	r3, #4
   155f6:	f842 3f10 	str.w	r3, [r2, #16]!
   155fa:	4807      	ldr	r0, [pc, #28]	; (15618 <handle_event+0x54>)
   155fc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15600:	f011 fcbc 	bl	26f7c <z_log_msg_static_create.constprop.0>
   15604:	46a5      	mov	sp, r4
}
   15606:	46bd      	mov	sp, r7
   15608:	bd98      	pop	{r3, r4, r7, pc}
		handler->handler(buf);
   1560a:	6853      	ldr	r3, [r2, #4]
   1560c:	4608      	mov	r0, r1
   1560e:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   15610:	e7f9      	b.n	15606 <handle_event+0x42>
   15612:	bf00      	nop
   15614:	0002c750 	.word	0x0002c750
   15618:	0002ac10 	.word	0x0002ac10

0001561c <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   1561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1561e:	4855      	ldr	r0, [pc, #340]	; (15774 <rx_work_handler+0x158>)
{
   15620:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   15622:	f013 fcf9 	bl	29018 <net_buf_slist_get>
	if (!buf) {
   15626:	4604      	mov	r4, r0
   15628:	2800      	cmp	r0, #0
   1562a:	d06a      	beq.n	15702 <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1562c:	7d03      	ldrb	r3, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
   1562e:	2b01      	cmp	r3, #1
   15630:	d069      	beq.n	15706 <rx_work_handler+0xea>
   15632:	2b03      	cmp	r3, #3
   15634:	f040 8099 	bne.w	1576a <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15638:	8983      	ldrh	r3, [r0, #12]
   1563a:	2b03      	cmp	r3, #3
   1563c:	d80c      	bhi.n	15658 <rx_work_handler+0x3c>
   1563e:	4a4e      	ldr	r2, [pc, #312]	; (15778 <rx_work_handler+0x15c>)
   15640:	494e      	ldr	r1, [pc, #312]	; (1577c <rx_work_handler+0x160>)
   15642:	484f      	ldr	r0, [pc, #316]	; (15780 <rx_work_handler+0x164>)
   15644:	f240 13eb 	movw	r3, #491	; 0x1eb
   15648:	f010 fd37 	bl	260ba <assert_print>
   1564c:	4040      	eors	r0, r0
   1564e:	f380 8811 	msr	BASEPRI, r0
   15652:	f04f 0003 	mov.w	r0, #3
   15656:	df02      	svc	2
   15658:	2104      	movs	r1, #4
   1565a:	f104 0008 	add.w	r0, r4, #8
   1565e:	f013 fd60 	bl	29122 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   15662:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
   15664:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   15666:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   15668:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   1566a:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   1566e:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   15670:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   15672:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   15674:	d010      	beq.n	15698 <rx_work_handler+0x7c>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   15676:	466d      	mov	r5, sp
   15678:	b088      	sub	sp, #32
   1567a:	466a      	mov	r2, sp
   1567c:	4841      	ldr	r0, [pc, #260]	; (15784 <rx_work_handler+0x168>)
   1567e:	61d3      	str	r3, [r2, #28]
   15680:	2304      	movs	r3, #4
   15682:	e9c2 0105 	strd	r0, r1, [r2, #20]
   15686:	f842 3f10 	str.w	r3, [r2, #16]!
   1568a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1568e:	483e      	ldr	r0, [pc, #248]	; (15788 <rx_work_handler+0x16c>)
   15690:	f011 fc74 	bl	26f7c <z_log_msg_static_create.constprop.0>
   15694:	46ad      	mov	sp, r5
   15696:	e064      	b.n	15762 <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   15698:	f002 f8fe 	bl	17898 <bt_conn_lookup_handle>
	if (!conn) {
   1569c:	4605      	mov	r5, r0
   1569e:	b960      	cbnz	r0, 156ba <rx_work_handler+0x9e>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   156a0:	466d      	mov	r5, sp
   156a2:	b088      	sub	sp, #32
   156a4:	8ae3      	ldrh	r3, [r4, #22]
   156a6:	466a      	mov	r2, sp
   156a8:	4938      	ldr	r1, [pc, #224]	; (1578c <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
   156aa:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   156ae:	2303      	movs	r3, #3
   156b0:	f842 3f10 	str.w	r3, [r2, #16]!
   156b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   156b8:	e7e9      	b.n	1568e <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   156ba:	f002 f9e3 	bl	17a84 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   156be:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   156c0:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   156c2:	4621      	mov	r1, r4
   156c4:	4628      	mov	r0, r5
   156c6:	f001 ffe3 	bl	17690 <bt_conn_recv>
	bt_conn_unref(conn);
   156ca:	4628      	mov	r0, r5
   156cc:	f011 fe45 	bl	2735a <bt_conn_unref>
	return list->head;
   156d0:	4b2f      	ldr	r3, [pc, #188]	; (15790 <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   156d2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   156d6:	b1a3      	cbz	r3, 15702 <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   156d8:	492e      	ldr	r1, [pc, #184]	; (15794 <rx_work_handler+0x178>)
   156da:	482f      	ldr	r0, [pc, #188]	; (15798 <rx_work_handler+0x17c>)
   156dc:	f014 fcf6 	bl	2a0cc <k_work_submit_to_queue>
#endif
		if (err < 0) {
   156e0:	2800      	cmp	r0, #0
   156e2:	da0e      	bge.n	15702 <rx_work_handler+0xe6>
			BT_ERR("Could not submit rx_work: %d", err);
   156e4:	466c      	mov	r4, sp
   156e6:	b088      	sub	sp, #32
   156e8:	466a      	mov	r2, sp
   156ea:	4b2c      	ldr	r3, [pc, #176]	; (1579c <rx_work_handler+0x180>)
   156ec:	e9c2 3005 	strd	r3, r0, [r2, #20]
   156f0:	2303      	movs	r3, #3
   156f2:	f842 3f10 	str.w	r3, [r2, #16]!
   156f6:	4824      	ldr	r0, [pc, #144]	; (15788 <rx_work_handler+0x16c>)
   156f8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   156fc:	f011 fc3e 	bl	26f7c <z_log_msg_static_create.constprop.0>
   15700:	46a5      	mov	sp, r4
		}
	}
}
   15702:	46bd      	mov	sp, r7
   15704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15706:	8983      	ldrh	r3, [r0, #12]
   15708:	2b01      	cmp	r3, #1
   1570a:	d80c      	bhi.n	15726 <rx_work_handler+0x10a>
   1570c:	4a1a      	ldr	r2, [pc, #104]	; (15778 <rx_work_handler+0x15c>)
   1570e:	491b      	ldr	r1, [pc, #108]	; (1577c <rx_work_handler+0x160>)
   15710:	481b      	ldr	r0, [pc, #108]	; (15780 <rx_work_handler+0x164>)
   15712:	f640 1359 	movw	r3, #2393	; 0x959
   15716:	f010 fcd0 	bl	260ba <assert_print>
   1571a:	4040      	eors	r0, r0
   1571c:	f380 8811 	msr	BASEPRI, r0
   15720:	f04f 0003 	mov.w	r0, #3
   15724:	df02      	svc	2
   15726:	2102      	movs	r1, #2
   15728:	f104 0008 	add.w	r0, r4, #8
   1572c:	f013 fcf9 	bl	29122 <net_buf_simple_pull_mem>
   15730:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   15732:	7800      	ldrb	r0, [r0, #0]
   15734:	f011 fbe0 	bl	26ef8 <bt_hci_evt_get_flags>
   15738:	0783      	lsls	r3, r0, #30
   1573a:	d40c      	bmi.n	15756 <rx_work_handler+0x13a>
   1573c:	4a0e      	ldr	r2, [pc, #56]	; (15778 <rx_work_handler+0x15c>)
   1573e:	4918      	ldr	r1, [pc, #96]	; (157a0 <rx_work_handler+0x184>)
   15740:	480f      	ldr	r0, [pc, #60]	; (15780 <rx_work_handler+0x164>)
   15742:	f640 135d 	movw	r3, #2397	; 0x95d
   15746:	f010 fcb8 	bl	260ba <assert_print>
   1574a:	4040      	eors	r0, r0
   1574c:	f380 8811 	msr	BASEPRI, r0
   15750:	f04f 0003 	mov.w	r0, #3
   15754:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   15756:	4a13      	ldr	r2, [pc, #76]	; (157a4 <rx_work_handler+0x188>)
   15758:	7828      	ldrb	r0, [r5, #0]
   1575a:	2306      	movs	r3, #6
   1575c:	4621      	mov	r1, r4
   1575e:	f7ff ff31 	bl	155c4 <handle_event>
		net_buf_unref(buf);
   15762:	4620      	mov	r0, r4
   15764:	f007 fc60 	bl	1d028 <net_buf_unref>
		break;
   15768:	e7b2      	b.n	156d0 <rx_work_handler+0xb4>
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1576a:	466d      	mov	r5, sp
   1576c:	b088      	sub	sp, #32
   1576e:	466a      	mov	r2, sp
   15770:	490d      	ldr	r1, [pc, #52]	; (157a8 <rx_work_handler+0x18c>)
   15772:	e79a      	b.n	156aa <rx_work_handler+0x8e>
   15774:	2000048c 	.word	0x2000048c
   15778:	0002c772 	.word	0x0002c772
   1577c:	0002c7a6 	.word	0x0002c7a6
   15780:	0002c7bf 	.word	0x0002c7bf
   15784:	0002c7dc 	.word	0x0002c7dc
   15788:	0002ac10 	.word	0x0002ac10
   1578c:	0002c800 	.word	0x0002c800
   15790:	20000350 	.word	0x20000350
   15794:	200005e8 	.word	0x200005e8
   15798:	20001db8 	.word	0x20001db8
   1579c:	0002c6c9 	.word	0x0002c6c9
   157a0:	0002c822 	.word	0x0002c822
   157a4:	0002b398 	.word	0x0002b398
   157a8:	0002c850 	.word	0x0002c850

000157ac <hci_le_meta_event>:
{
   157ac:	b510      	push	{r4, lr}
   157ae:	2101      	movs	r1, #1
   157b0:	4604      	mov	r4, r0
   157b2:	3008      	adds	r0, #8
   157b4:	f013 fcb5 	bl	29122 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   157b8:	4621      	mov	r1, r4
   157ba:	4a03      	ldr	r2, [pc, #12]	; (157c8 <hci_le_meta_event+0x1c>)
   157bc:	7800      	ldrb	r0, [r0, #0]
}
   157be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   157c2:	230a      	movs	r3, #10
   157c4:	f7ff befe 	b.w	155c4 <handle_event>
   157c8:	0002b328 	.word	0x0002b328

000157cc <le_remote_feat_complete>:
{
   157cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   157ce:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   157d0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   157d4:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   157d6:	4630      	mov	r0, r6
   157d8:	f002 f85e 	bl	17898 <bt_conn_lookup_handle>
	if (!conn) {
   157dc:	4604      	mov	r4, r0
   157de:	b980      	cbnz	r0, 15802 <le_remote_feat_complete+0x36>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   157e0:	466c      	mov	r4, sp
   157e2:	b088      	sub	sp, #32
   157e4:	466a      	mov	r2, sp
   157e6:	4b0f      	ldr	r3, [pc, #60]	; (15824 <le_remote_feat_complete+0x58>)
   157e8:	480f      	ldr	r0, [pc, #60]	; (15828 <le_remote_feat_complete+0x5c>)
   157ea:	e9c2 3605 	strd	r3, r6, [r2, #20]
   157ee:	2303      	movs	r3, #3
   157f0:	f842 3f10 	str.w	r3, [r2, #16]!
   157f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   157f8:	f011 fbc0 	bl	26f7c <z_log_msg_static_create.constprop.0>
   157fc:	46a5      	mov	sp, r4
}
   157fe:	46bd      	mov	sp, r7
   15800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   15802:	782b      	ldrb	r3, [r5, #0]
   15804:	b923      	cbnz	r3, 15810 <le_remote_feat_complete+0x44>
		memcpy(conn->le.features, evt->features,
   15806:	2208      	movs	r2, #8
   15808:	1ce9      	adds	r1, r5, #3
   1580a:	30ac      	adds	r0, #172	; 0xac
   1580c:	f011 fa84 	bl	26d18 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15810:	f44f 6100 	mov.w	r1, #2048	; 0x800
   15814:	1d20      	adds	r0, r4, #4
   15816:	f011 fb9d 	bl	26f54 <atomic_or>
	bt_conn_unref(conn);
   1581a:	4620      	mov	r0, r4
   1581c:	f011 fd9d 	bl	2735a <bt_conn_unref>
   15820:	e7ed      	b.n	157fe <le_remote_feat_complete+0x32>
   15822:	bf00      	nop
   15824:	0002c6a5 	.word	0x0002c6a5
   15828:	0002ac10 	.word	0x0002ac10

0001582c <hci_cmd_done>:
{
   1582c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15830:	4606      	mov	r6, r0
   15832:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   15834:	7990      	ldrb	r0, [r2, #6]
   15836:	4d43      	ldr	r5, [pc, #268]	; (15944 <hci_cmd_done+0x118>)
{
   15838:	4688      	mov	r8, r1
   1583a:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1583c:	f007 fb30 	bl	1cea0 <net_buf_pool_get>
   15840:	4285      	cmp	r5, r0
   15842:	d018      	beq.n	15876 <hci_cmd_done+0x4a>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   15844:	79a4      	ldrb	r4, [r4, #6]
   15846:	4620      	mov	r0, r4
   15848:	f007 fb2a 	bl	1cea0 <net_buf_pool_get>
   1584c:	46e8      	mov	r8, sp
   1584e:	b08a      	sub	sp, #40	; 0x28
   15850:	466a      	mov	r2, sp
   15852:	4b3d      	ldr	r3, [pc, #244]	; (15948 <hci_cmd_done+0x11c>)
   15854:	6255      	str	r5, [r2, #36]	; 0x24
   15856:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1585a:	2306      	movs	r3, #6
   1585c:	e9c2 4007 	strd	r4, r0, [r2, #28]
   15860:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   15864:	f842 3f10 	str.w	r3, [r2, #16]!
   15868:	4838      	ldr	r0, [pc, #224]	; (1594c <hci_cmd_done+0x120>)
   1586a:	f011 fb87 	bl	26f7c <z_log_msg_static_create.constprop.0>
   1586e:	46c5      	mov	sp, r8
}
   15870:	46bd      	mov	sp, r7
   15872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   15876:	4620      	mov	r0, r4
   15878:	f007 fb1a 	bl	1ceb0 <net_buf_id>
   1587c:	4d34      	ldr	r5, [pc, #208]	; (15950 <hci_cmd_done+0x124>)
   1587e:	f04f 090c 	mov.w	r9, #12
   15882:	fb09 5000 	mla	r0, r9, r0, r5
   15886:	8843      	ldrh	r3, [r0, #2]
   15888:	42b3      	cmp	r3, r6
   1588a:	d016      	beq.n	158ba <hci_cmd_done+0x8e>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   1588c:	4620      	mov	r0, r4
   1588e:	f007 fb0f 	bl	1ceb0 <net_buf_id>
   15892:	fb09 5500 	mla	r5, r9, r0, r5
   15896:	466c      	mov	r4, sp
   15898:	b088      	sub	sp, #32
   1589a:	886b      	ldrh	r3, [r5, #2]
   1589c:	466a      	mov	r2, sp
   1589e:	492d      	ldr	r1, [pc, #180]	; (15954 <hci_cmd_done+0x128>)
   158a0:	61d3      	str	r3, [r2, #28]
   158a2:	2304      	movs	r3, #4
   158a4:	e9c2 1605 	strd	r1, r6, [r2, #20]
   158a8:	4828      	ldr	r0, [pc, #160]	; (1594c <hci_cmd_done+0x120>)
   158aa:	f842 3f10 	str.w	r3, [r2, #16]!
   158ae:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   158b2:	f011 fb63 	bl	26f7c <z_log_msg_static_create.constprop.0>
   158b6:	46a5      	mov	sp, r4
		return;
   158b8:	e7da      	b.n	15870 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   158ba:	4e27      	ldr	r6, [pc, #156]	; (15958 <hci_cmd_done+0x12c>)
   158bc:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   158c0:	b120      	cbz	r0, 158cc <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   158c2:	f007 fbb1 	bl	1d028 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   158c6:	2300      	movs	r3, #0
   158c8:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   158cc:	4620      	mov	r0, r4
   158ce:	f007 faef 	bl	1ceb0 <net_buf_id>
   158d2:	260c      	movs	r6, #12
   158d4:	fb06 5000 	mla	r0, r6, r0, r5
   158d8:	6843      	ldr	r3, [r0, #4]
   158da:	b1ab      	cbz	r3, 15908 <hci_cmd_done+0xdc>
   158dc:	f1b8 0f00 	cmp.w	r8, #0
   158e0:	d112      	bne.n	15908 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   158e2:	4620      	mov	r0, r4
   158e4:	f007 fae4 	bl	1ceb0 <net_buf_id>
   158e8:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   158ec:	2101      	movs	r1, #1
   158ee:	6842      	ldr	r2, [r0, #4]
   158f0:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   158f4:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   158f6:	f003 061f 	and.w	r6, r3, #31
   158fa:	40b1      	lsls	r1, r6
	if (val) {
   158fc:	095b      	lsrs	r3, r3, #5
   158fe:	b1da      	cbz	r2, 15938 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15900:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   15904:	f011 fb26 	bl	26f54 <atomic_or>
	if (cmd(buf)->sync) {
   15908:	4620      	mov	r0, r4
   1590a:	f007 fad1 	bl	1ceb0 <net_buf_id>
   1590e:	260c      	movs	r6, #12
   15910:	fb06 5000 	mla	r0, r6, r0, r5
   15914:	6883      	ldr	r3, [r0, #8]
   15916:	2b00      	cmp	r3, #0
   15918:	d0aa      	beq.n	15870 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   1591a:	4620      	mov	r0, r4
   1591c:	f007 fac8 	bl	1ceb0 <net_buf_id>
   15920:	4370      	muls	r0, r6
   15922:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   15926:	4620      	mov	r0, r4
   15928:	f007 fac2 	bl	1ceb0 <net_buf_id>
   1592c:	fb06 5500 	mla	r5, r6, r0, r5
   15930:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   15932:	f00b fcf3 	bl	2131c <z_impl_k_sem_give>
}
   15936:	e79b      	b.n	15870 <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15938:	43c9      	mvns	r1, r1
   1593a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1593e:	f011 fb20 	bl	26f82 <atomic_and.isra.0>
   15942:	e7e1      	b.n	15908 <hci_cmd_done+0xdc>
   15944:	20000aec 	.word	0x20000aec
   15948:	0002c864 	.word	0x0002c864
   1594c:	0002ac10 	.word	0x0002ac10
   15950:	20002ab4 	.word	0x20002ab4
   15954:	0002c899 	.word	0x0002c899
   15958:	20000350 	.word	0x20000350

0001595c <hci_cmd_status>:
{
   1595c:	b538      	push	{r3, r4, r5, lr}
   1595e:	2104      	movs	r1, #4
   15960:	4604      	mov	r4, r0
   15962:	3008      	adds	r0, #8
   15964:	f013 fbdd 	bl	29122 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   15968:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1596a:	7801      	ldrb	r1, [r0, #0]
   1596c:	8840      	ldrh	r0, [r0, #2]
   1596e:	4622      	mov	r2, r4
   15970:	f7ff ff5c 	bl	1582c <hci_cmd_done>
	if (ncmd) {
   15974:	b125      	cbz	r5, 15980 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   15976:	4803      	ldr	r0, [pc, #12]	; (15984 <hci_cmd_status+0x28>)
}
   15978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1597c:	f00b bcce 	b.w	2131c <z_impl_k_sem_give>
   15980:	bd38      	pop	{r3, r4, r5, pc}
   15982:	bf00      	nop
   15984:	20000470 	.word	0x20000470

00015988 <hci_cmd_complete>:
{
   15988:	b538      	push	{r3, r4, r5, lr}
   1598a:	2103      	movs	r1, #3
   1598c:	4604      	mov	r4, r0
   1598e:	3008      	adds	r0, #8
   15990:	f013 fbc7 	bl	29122 <net_buf_simple_pull_mem>
	status = buf->data[0];
   15994:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   15996:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   15998:	7819      	ldrb	r1, [r3, #0]
   1599a:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1599e:	4622      	mov	r2, r4
   159a0:	f7ff ff44 	bl	1582c <hci_cmd_done>
	if (ncmd) {
   159a4:	b125      	cbz	r5, 159b0 <hci_cmd_complete+0x28>
   159a6:	4803      	ldr	r0, [pc, #12]	; (159b4 <hci_cmd_complete+0x2c>)
}
   159a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   159ac:	f00b bcb6 	b.w	2131c <z_impl_k_sem_give>
   159b0:	bd38      	pop	{r3, r4, r5, pc}
   159b2:	bf00      	nop
   159b4:	20000470 	.word	0x20000470

000159b8 <hci_num_completed_packets>:
{
   159b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159bc:	b087      	sub	sp, #28
	for (i = 0; i < evt->num_handles; i++) {
   159be:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   159c0:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
   159c4:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 15ac0 <hci_num_completed_packets+0x108>
{
   159c8:	af00      	add	r7, sp, #0
			tx->pending_no_cb = 0U;
   159ca:	46a9      	mov	r9, r5
	for (i = 0; i < evt->num_handles; i++) {
   159cc:	f898 3000 	ldrb.w	r3, [r8]
   159d0:	429d      	cmp	r5, r3
   159d2:	db03      	blt.n	159dc <hci_num_completed_packets+0x24>
}
   159d4:	371c      	adds	r7, #28
   159d6:	46bd      	mov	sp, r7
   159d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   159dc:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   159e0:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   159e4:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   159e8:	4658      	mov	r0, fp
   159ea:	f001 ff55 	bl	17898 <bt_conn_lookup_handle>
		if (!conn) {
   159ee:	4604      	mov	r4, r0
   159f0:	b1d8      	cbz	r0, 15a2a <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   159f2:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   159f6:	2e00      	cmp	r6, #0
   159f8:	d040      	beq.n	15a7c <hci_num_completed_packets+0xc4>
	__asm__ volatile(
   159fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   159fe:	f3ef 8211 	mrs	r2, BASEPRI
   15a02:	f383 8812 	msr	BASEPRI_MAX, r3
   15a06:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   15a0a:	69e3      	ldr	r3, [r4, #28]
   15a0c:	b1f3      	cbz	r3, 15a4c <hci_num_completed_packets+0x94>
				conn->pending_no_cb--;
   15a0e:	3b01      	subs	r3, #1
   15a10:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   15a12:	f382 8811 	msr	BASEPRI, r2
   15a16:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   15a1a:	4620      	mov	r0, r4
   15a1c:	f001 fe00 	bl	17620 <bt_conn_get_pkts>
   15a20:	3e01      	subs	r6, #1
   15a22:	f00b fc7b 	bl	2131c <z_impl_k_sem_give>
   15a26:	b2b6      	uxth	r6, r6
   15a28:	e7e5      	b.n	159f6 <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
   15a2a:	466c      	mov	r4, sp
   15a2c:	b088      	sub	sp, #32
   15a2e:	466a      	mov	r2, sp
   15a30:	4b24      	ldr	r3, [pc, #144]	; (15ac4 <hci_num_completed_packets+0x10c>)
   15a32:	4825      	ldr	r0, [pc, #148]	; (15ac8 <hci_num_completed_packets+0x110>)
   15a34:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   15a38:	2303      	movs	r3, #3
   15a3a:	f842 3f10 	str.w	r3, [r2, #16]!
   15a3e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15a42:	f011 fa9b 	bl	26f7c <z_log_msg_static_create.constprop.0>
   15a46:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   15a48:	3501      	adds	r5, #1
   15a4a:	e7bf      	b.n	159cc <hci_num_completed_packets+0x14>
   15a4c:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   15a4e:	b12b      	cbz	r3, 15a5c <hci_num_completed_packets+0xa4>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15a50:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   15a52:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   15a54:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15a56:	428b      	cmp	r3, r1
	list->tail = node;
   15a58:	bf08      	it	eq
   15a5a:	61a0      	streq	r0, [r4, #24]
   15a5c:	f382 8811 	msr	BASEPRI, r2
   15a60:	f3bf 8f6f 	isb	sy
			if (!node) {
   15a64:	b973      	cbnz	r3, 15a84 <hci_num_completed_packets+0xcc>
				BT_ERR("packets count mismatch");
   15a66:	2302      	movs	r3, #2
   15a68:	4817      	ldr	r0, [pc, #92]	; (15ac8 <hci_num_completed_packets+0x110>)
   15a6a:	f8c7 a014 	str.w	sl, [r7, #20]
   15a6e:	f107 0210 	add.w	r2, r7, #16
   15a72:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15a76:	613b      	str	r3, [r7, #16]
   15a78:	f011 fa80 	bl	26f7c <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   15a7c:	4620      	mov	r0, r4
   15a7e:	f011 fc6c 	bl	2735a <bt_conn_unref>
   15a82:	e7e1      	b.n	15a48 <hci_num_completed_packets+0x90>
	__asm__ volatile(
   15a84:	f04f 0240 	mov.w	r2, #64	; 0x40
   15a88:	f3ef 8111 	mrs	r1, BASEPRI
   15a8c:	f382 8812 	msr	BASEPRI_MAX, r2
   15a90:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   15a94:	68da      	ldr	r2, [r3, #12]
   15a96:	61e2      	str	r2, [r4, #28]
	return list->tail;
   15a98:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   15a9a:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   15a9e:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
   15aa2:	b94a      	cbnz	r2, 15ab8 <hci_num_completed_packets+0x100>
	list->head = node;
   15aa4:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   15aa8:	f381 8811 	msr	BASEPRI, r1
   15aac:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   15ab0:	4658      	mov	r0, fp
   15ab2:	f00b fdc1 	bl	21638 <k_work_submit>
   15ab6:	e7b0      	b.n	15a1a <hci_num_completed_packets+0x62>
	parent->next = child;
   15ab8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   15aba:	6263      	str	r3, [r4, #36]	; 0x24
}
   15abc:	e7f4      	b.n	15aa8 <hci_num_completed_packets+0xf0>
   15abe:	bf00      	nop
   15ac0:	0002c8e8 	.word	0x0002c8e8
   15ac4:	0002c8cc 	.word	0x0002c8cc
   15ac8:	0002ac10 	.word	0x0002ac10

00015acc <bt_hci_cmd_state_set_init>:
{
   15acc:	b510      	push	{r4, lr}
	state->bit = bit;
   15ace:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   15ad2:	f89d 3008 	ldrb.w	r3, [sp, #8]
   15ad6:	720b      	strb	r3, [r1, #8]
{
   15ad8:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   15ada:	f007 f9e9 	bl	1ceb0 <net_buf_id>
   15ade:	4b03      	ldr	r3, [pc, #12]	; (15aec <bt_hci_cmd_state_set_init+0x20>)
   15ae0:	220c      	movs	r2, #12
   15ae2:	fb02 3300 	mla	r3, r2, r0, r3
   15ae6:	605c      	str	r4, [r3, #4]
}
   15ae8:	bd10      	pop	{r4, pc}
   15aea:	bf00      	nop
   15aec:	20002ab4 	.word	0x20002ab4

00015af0 <bt_hci_cmd_create>:
{
   15af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   15af4:	f04f 32ff 	mov.w	r2, #4294967295
   15af8:	f04f 33ff 	mov.w	r3, #4294967295
   15afc:	4606      	mov	r6, r0
   15afe:	4817      	ldr	r0, [pc, #92]	; (15b5c <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   15b00:	4d17      	ldr	r5, [pc, #92]	; (15b60 <bt_hci_cmd_create+0x70>)
{
   15b02:	460f      	mov	r7, r1
   15b04:	f013 fa41 	bl	28f8a <net_buf_alloc_fixed>
   15b08:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   15b0a:	f100 0a08 	add.w	sl, r0, #8
   15b0e:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15b10:	f04f 0800 	mov.w	r8, #0
   15b14:	4650      	mov	r0, sl
   15b16:	f013 fa5d 	bl	28fd4 <net_buf_simple_reserve>
   15b1a:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   15b1e:	4620      	mov	r0, r4
   15b20:	f007 f9c6 	bl	1ceb0 <net_buf_id>
   15b24:	f04f 090c 	mov.w	r9, #12
   15b28:	fb09 5000 	mla	r0, r9, r0, r5
   15b2c:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   15b2e:	4620      	mov	r0, r4
   15b30:	f007 f9be 	bl	1ceb0 <net_buf_id>
   15b34:	fb09 5000 	mla	r0, r9, r0, r5
   15b38:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   15b3c:	4620      	mov	r0, r4
   15b3e:	f007 f9b7 	bl	1ceb0 <net_buf_id>
   15b42:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   15b46:	2103      	movs	r1, #3
   15b48:	f8c5 8004 	str.w	r8, [r5, #4]
   15b4c:	4650      	mov	r0, sl
   15b4e:	f013 fac1 	bl	290d4 <net_buf_simple_add>
	hdr->param_len = param_len;
   15b52:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   15b54:	8006      	strh	r6, [r0, #0]
}
   15b56:	4620      	mov	r0, r4
   15b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15b5c:	20000aec 	.word	0x20000aec
   15b60:	20002ab4 	.word	0x20002ab4

00015b64 <bt_hci_cmd_send_sync>:
{
   15b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15b68:	b087      	sub	sp, #28
   15b6a:	4680      	mov	r8, r0
   15b6c:	af00      	add	r7, sp, #0
   15b6e:	4615      	mov	r5, r2
	if (!buf) {
   15b70:	460c      	mov	r4, r1
   15b72:	b921      	cbnz	r1, 15b7e <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   15b74:	f7ff ffbc 	bl	15af0 <bt_hci_cmd_create>
		if (!buf) {
   15b78:	4604      	mov	r4, r0
   15b7a:	2800      	cmp	r0, #0
   15b7c:	d05b      	beq.n	15c36 <bt_hci_cmd_send_sync+0xd2>
	return z_impl_k_sem_init(sem, initial_count, limit);
   15b7e:	2201      	movs	r2, #1
   15b80:	2100      	movs	r1, #0
   15b82:	4638      	mov	r0, r7
   15b84:	f014 f9f5 	bl	29f72 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   15b88:	4620      	mov	r0, r4
   15b8a:	f007 f991 	bl	1ceb0 <net_buf_id>
   15b8e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 15c3c <bt_hci_cmd_send_sync+0xd8>
   15b92:	230c      	movs	r3, #12
   15b94:	fb03 9000 	mla	r0, r3, r0, r9
   15b98:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   15b9a:	4620      	mov	r0, r4
   15b9c:	f013 fa74 	bl	29088 <net_buf_ref>
   15ba0:	4601      	mov	r1, r0
   15ba2:	4827      	ldr	r0, [pc, #156]	; (15c40 <bt_hci_cmd_send_sync+0xdc>)
   15ba4:	f013 fa63 	bl	2906e <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   15ba8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   15bac:	2300      	movs	r3, #0
   15bae:	4638      	mov	r0, r7
   15bb0:	f00b fbda 	bl	21368 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   15bb4:	4606      	mov	r6, r0
   15bb6:	b180      	cbz	r0, 15bda <bt_hci_cmd_send_sync+0x76>
   15bb8:	4a22      	ldr	r2, [pc, #136]	; (15c44 <bt_hci_cmd_send_sync+0xe0>)
   15bba:	4923      	ldr	r1, [pc, #140]	; (15c48 <bt_hci_cmd_send_sync+0xe4>)
   15bbc:	4823      	ldr	r0, [pc, #140]	; (15c4c <bt_hci_cmd_send_sync+0xe8>)
   15bbe:	f240 1347 	movw	r3, #327	; 0x147
   15bc2:	f010 fa7a 	bl	260ba <assert_print>
   15bc6:	4822      	ldr	r0, [pc, #136]	; (15c50 <bt_hci_cmd_send_sync+0xec>)
   15bc8:	4631      	mov	r1, r6
   15bca:	f010 fa76 	bl	260ba <assert_print>
   15bce:	4040      	eors	r0, r0
   15bd0:	f380 8811 	msr	BASEPRI, r0
   15bd4:	f04f 0003 	mov.w	r0, #3
   15bd8:	df02      	svc	2
	status = cmd(buf)->status;
   15bda:	4620      	mov	r0, r4
   15bdc:	f007 f968 	bl	1ceb0 <net_buf_id>
   15be0:	230c      	movs	r3, #12
   15be2:	4358      	muls	r0, r3
   15be4:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
   15be8:	b1e6      	cbz	r6, 15c24 <bt_hci_cmd_send_sync+0xc0>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   15bea:	466d      	mov	r5, sp
   15bec:	b088      	sub	sp, #32
   15bee:	466a      	mov	r2, sp
   15bf0:	4b18      	ldr	r3, [pc, #96]	; (15c54 <bt_hci_cmd_send_sync+0xf0>)
   15bf2:	61d6      	str	r6, [r2, #28]
   15bf4:	e9c2 3805 	strd	r3, r8, [r2, #20]
   15bf8:	2304      	movs	r3, #4
   15bfa:	f842 3f10 	str.w	r3, [r2, #16]!
   15bfe:	4816      	ldr	r0, [pc, #88]	; (15c58 <bt_hci_cmd_send_sync+0xf4>)
   15c00:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   15c04:	f011 f9ba 	bl	26f7c <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   15c08:	4620      	mov	r0, r4
   15c0a:	46ad      	mov	sp, r5
   15c0c:	f007 fa0c 	bl	1d028 <net_buf_unref>
			return -EIO;
   15c10:	2e09      	cmp	r6, #9
   15c12:	bf0c      	ite	eq
   15c14:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   15c18:	f06f 0004 	mvnne.w	r0, #4
}
   15c1c:	371c      	adds	r7, #28
   15c1e:	46bd      	mov	sp, r7
   15c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   15c24:	b115      	cbz	r5, 15c2c <bt_hci_cmd_send_sync+0xc8>
		*rsp = buf;
   15c26:	602c      	str	r4, [r5, #0]
	return 0;
   15c28:	4630      	mov	r0, r6
   15c2a:	e7f7      	b.n	15c1c <bt_hci_cmd_send_sync+0xb8>
		net_buf_unref(buf);
   15c2c:	4620      	mov	r0, r4
   15c2e:	f007 f9fb 	bl	1d028 <net_buf_unref>
	return 0;
   15c32:	4628      	mov	r0, r5
   15c34:	e7f2      	b.n	15c1c <bt_hci_cmd_send_sync+0xb8>
			return -ENOBUFS;
   15c36:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15c3a:	e7ef      	b.n	15c1c <bt_hci_cmd_send_sync+0xb8>
   15c3c:	20002ab4 	.word	0x20002ab4
   15c40:	20000494 	.word	0x20000494
   15c44:	0002c772 	.word	0x0002c772
   15c48:	0002c8ff 	.word	0x0002c8ff
   15c4c:	0002c7bf 	.word	0x0002c7bf
   15c50:	0002c908 	.word	0x0002c908
   15c54:	0002c928 	.word	0x0002c928
   15c58:	0002ac10 	.word	0x0002ac10

00015c5c <hci_le_read_max_data_len>:
{
   15c5c:	b570      	push	{r4, r5, r6, lr}
   15c5e:	b088      	sub	sp, #32
   15c60:	4606      	mov	r6, r0
   15c62:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   15c64:	aa01      	add	r2, sp, #4
   15c66:	2100      	movs	r1, #0
   15c68:	f242 002f 	movw	r0, #8239	; 0x202f
   15c6c:	f7ff ff7a 	bl	15b64 <bt_hci_cmd_send_sync>
	if (err) {
   15c70:	4604      	mov	r4, r0
   15c72:	b160      	cbz	r0, 15c8e <hci_le_read_max_data_len+0x32>
		BT_ERR("Failed to read DLE max data len");
   15c74:	4b0b      	ldr	r3, [pc, #44]	; (15ca4 <hci_le_read_max_data_len+0x48>)
   15c76:	9307      	str	r3, [sp, #28]
   15c78:	480b      	ldr	r0, [pc, #44]	; (15ca8 <hci_le_read_max_data_len+0x4c>)
   15c7a:	2302      	movs	r3, #2
   15c7c:	aa06      	add	r2, sp, #24
   15c7e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15c82:	9306      	str	r3, [sp, #24]
   15c84:	f011 f97a 	bl	26f7c <z_log_msg_static_create.constprop.0>
}
   15c88:	4620      	mov	r0, r4
   15c8a:	b008      	add	sp, #32
   15c8c:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   15c8e:	9801      	ldr	r0, [sp, #4]
   15c90:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   15c92:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   15c96:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   15c98:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   15c9c:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   15c9e:	f007 f9c3 	bl	1d028 <net_buf_unref>
	return 0;
   15ca2:	e7f1      	b.n	15c88 <hci_le_read_max_data_len+0x2c>
   15ca4:	0002c944 	.word	0x0002c944
   15ca8:	0002ac10 	.word	0x0002ac10

00015cac <bt_hci_le_rand>:
{
   15cac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   15cae:	4b14      	ldr	r3, [pc, #80]	; (15d00 <bt_hci_le_rand+0x54>)
   15cb0:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   15cb4:	2b00      	cmp	r3, #0
{
   15cb6:	4605      	mov	r5, r0
   15cb8:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   15cba:	da1d      	bge.n	15cf8 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   15cbc:	b914      	cbnz	r4, 15cc4 <bt_hci_le_rand+0x18>
	return 0;
   15cbe:	4620      	mov	r0, r4
}
   15cc0:	b002      	add	sp, #8
   15cc2:	bd70      	pop	{r4, r5, r6, pc}
		count = MIN(len, sizeof(rp->rand));
   15cc4:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   15cc6:	aa01      	add	r2, sp, #4
   15cc8:	f04f 0100 	mov.w	r1, #0
   15ccc:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   15cd0:	4626      	mov	r6, r4
   15cd2:	bf28      	it	cs
   15cd4:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   15cd6:	f7ff ff45 	bl	15b64 <bt_hci_cmd_send_sync>
		if (err) {
   15cda:	2800      	cmp	r0, #0
   15cdc:	d1f0      	bne.n	15cc0 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   15cde:	9b01      	ldr	r3, [sp, #4]
		memcpy(buffer, rp->rand, count);
   15ce0:	6899      	ldr	r1, [r3, #8]
   15ce2:	4632      	mov	r2, r6
   15ce4:	3101      	adds	r1, #1
   15ce6:	4628      	mov	r0, r5
   15ce8:	f011 f816 	bl	26d18 <memcpy>
		net_buf_unref(rsp);
   15cec:	9801      	ldr	r0, [sp, #4]
   15cee:	f007 f99b 	bl	1d028 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   15cf2:	4435      	add	r5, r6
		len -= count;
   15cf4:	1ba4      	subs	r4, r4, r6
   15cf6:	e7e1      	b.n	15cbc <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   15cf8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15cfc:	e7e0      	b.n	15cc0 <bt_hci_le_rand+0x14>
   15cfe:	bf00      	nop
   15d00:	20000350 	.word	0x20000350

00015d04 <bt_hci_le_enh_conn_complete>:
{
   15d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d08:	b08f      	sub	sp, #60	; 0x3c
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15d0a:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
   15d0e:	4abf      	ldr	r2, [pc, #764]	; (1600c <bt_hci_le_enh_conn_complete+0x308>)
	handle |= ~BT_ACL_HANDLE_MASK;
   15d10:	ea6f 5309 	mvn.w	r3, r9, lsl #20
		if (disconnected_handles[i] == handle) {
   15d14:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   15d16:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   15d1a:	b29b      	uxth	r3, r3
   15d1c:	4299      	cmp	r1, r3
{
   15d1e:	4605      	mov	r5, r0
   15d20:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   15d24:	bf08      	it	eq
   15d26:	8016      	strheq	r6, [r2, #0]
{
   15d28:	af02      	add	r7, sp, #8
			return true;
   15d2a:	bf08      	it	eq
   15d2c:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   15d2e:	f001 f81f 	bl	16d70 <bt_id_pending_keys_update>
	if (evt->status) {
   15d32:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15d34:	fa1f f889 	uxth.w	r8, r9
	if (evt->status) {
   15d38:	b3a4      	cbz	r4, 15da4 <bt_hci_le_enh_conn_complete+0xa0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15d3a:	2c3c      	cmp	r4, #60	; 0x3c
   15d3c:	d122      	bne.n	15d84 <bt_hci_le_enh_conn_complete+0x80>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   15d3e:	f001 fa53 	bl	171e8 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15d42:	f06f 0140 	mvn.w	r1, #64	; 0x40
   15d46:	3010      	adds	r0, #16
   15d48:	f011 f91b 	bl	26f82 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   15d4c:	2000      	movs	r0, #0
   15d4e:	f7ff faaf 	bl	152b0 <find_pending_connect.part.0>
		if (!conn) {
   15d52:	4605      	mov	r5, r0
   15d54:	b970      	cbnz	r0, 15d74 <bt_hci_le_enh_conn_complete+0x70>
			BT_ERR("No pending peripheral connection");
   15d56:	4bae      	ldr	r3, [pc, #696]	; (16010 <bt_hci_le_enh_conn_complete+0x30c>)
   15d58:	62fb      	str	r3, [r7, #44]	; 0x2c
   15d5a:	48ae      	ldr	r0, [pc, #696]	; (16014 <bt_hci_le_enh_conn_complete+0x310>)
   15d5c:	2302      	movs	r3, #2
   15d5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
   15d62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15d66:	62bb      	str	r3, [r7, #40]	; 0x28
   15d68:	f011 f908 	bl	26f7c <z_log_msg_static_create.constprop.0>
}
   15d6c:	3734      	adds	r7, #52	; 0x34
   15d6e:	46bd      	mov	sp, r7
   15d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   15d74:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15d76:	2100      	movs	r1, #0
   15d78:	f001 fd96 	bl	178a8 <bt_conn_set_state>
		bt_conn_unref(conn);
   15d7c:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   15d7e:	f011 faec 	bl	2735a <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15d82:	e7f3      	b.n	15d6c <bt_hci_le_enh_conn_complete+0x68>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   15d84:	466d      	mov	r5, sp
   15d86:	b088      	sub	sp, #32
   15d88:	aa02      	add	r2, sp, #8
   15d8a:	4ba3      	ldr	r3, [pc, #652]	; (16018 <bt_hci_le_enh_conn_complete+0x314>)
   15d8c:	48a1      	ldr	r0, [pc, #644]	; (16014 <bt_hci_le_enh_conn_complete+0x310>)
   15d8e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15d92:	2303      	movs	r3, #3
   15d94:	f842 3f10 	str.w	r3, [r2, #16]!
   15d98:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15d9c:	f011 f8ee 	bl	26f7c <z_log_msg_static_create.constprop.0>
   15da0:	46ad      	mov	sp, r5
		return;
   15da2:	e7e3      	b.n	15d6c <bt_hci_le_enh_conn_complete+0x68>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   15da4:	792b      	ldrb	r3, [r5, #4]
   15da6:	3b02      	subs	r3, #2
   15da8:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   15daa:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   15dae:	d840      	bhi.n	15e32 <bt_hci_le_enh_conn_complete+0x12e>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   15db0:	4651      	mov	r1, sl
   15db2:	f107 0018 	add.w	r0, r7, #24
   15db6:	f011 f8ca 	bl	26f4e <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   15dba:	7e3b      	ldrb	r3, [r7, #24]
	memcpy(dst, src, sizeof(*dst));
   15dbc:	2206      	movs	r2, #6
   15dbe:	3b02      	subs	r3, #2
   15dc0:	f105 0111 	add.w	r1, r5, #17
   15dc4:	f107 0011 	add.w	r0, r7, #17
   15dc8:	763b      	strb	r3, [r7, #24]
   15dca:	f010 ffa5 	bl	26d18 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   15dce:	2301      	movs	r3, #1
   15dd0:	743b      	strb	r3, [r7, #16]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   15dd2:	78eb      	ldrb	r3, [r5, #3]
   15dd4:	2b01      	cmp	r3, #1
   15dd6:	d113      	bne.n	15e00 <bt_hci_le_enh_conn_complete+0xfc>
   15dd8:	f107 0018 	add.w	r0, r7, #24
   15ddc:	f7ff fa68 	bl	152b0 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15de0:	78eb      	ldrb	r3, [r5, #3]
   15de2:	2b01      	cmp	r3, #1
   15de4:	4604      	mov	r4, r0
   15de6:	d10a      	bne.n	15dfe <bt_hci_le_enh_conn_complete+0xfa>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   15de8:	f001 f9fe 	bl	171e8 <bt_le_adv_lookup_legacy>
   15dec:	f06f 0140 	mvn.w	r1, #64	; 0x40
   15df0:	4683      	mov	fp, r0
   15df2:	3010      	adds	r0, #16
   15df4:	f011 f8c5 	bl	26f82 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   15df8:	4658      	mov	r0, fp
   15dfa:	f011 fa72 	bl	272e2 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   15dfe:	bb6c      	cbnz	r4, 15e5c <bt_hci_le_enh_conn_complete+0x158>
		BT_ERR("No pending conn for peer %s",
   15e00:	4650      	mov	r0, sl
   15e02:	f7fe ff45 	bl	14c90 <bt_addr_le_str_real>
   15e06:	466c      	mov	r4, sp
   15e08:	b088      	sub	sp, #32
   15e0a:	aa02      	add	r2, sp, #8
   15e0c:	4b83      	ldr	r3, [pc, #524]	; (1601c <bt_hci_le_enh_conn_complete+0x318>)
   15e0e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15e12:	2302      	movs	r3, #2
   15e14:	7713      	strb	r3, [r2, #28]
   15e16:	4b82      	ldr	r3, [pc, #520]	; (16020 <bt_hci_le_enh_conn_complete+0x31c>)
   15e18:	f842 3f10 	str.w	r3, [r2, #16]!
   15e1c:	487d      	ldr	r0, [pc, #500]	; (16014 <bt_hci_le_enh_conn_complete+0x310>)
   15e1e:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   15e22:	f011 f8ab 	bl	26f7c <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   15e26:	211f      	movs	r1, #31
   15e28:	46a5      	mov	sp, r4
   15e2a:	4640      	mov	r0, r8
   15e2c:	f011 f8c5 	bl	26fba <bt_hci_disconnect>
		return;
   15e30:	e79c      	b.n	15d6c <bt_hci_le_enh_conn_complete+0x68>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   15e32:	78eb      	ldrb	r3, [r5, #3]
   15e34:	2b01      	cmp	r3, #1
   15e36:	bf04      	itt	eq
   15e38:	4b7a      	ldreq	r3, [pc, #488]	; (16024 <bt_hci_le_enh_conn_complete+0x320>)
   15e3a:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   15e3e:	4651      	mov	r1, sl
   15e40:	4620      	mov	r0, r4
   15e42:	f011 f9f7 	bl	27234 <bt_lookup_id_addr>
   15e46:	4601      	mov	r1, r0
   15e48:	f107 0018 	add.w	r0, r7, #24
   15e4c:	f011 f87f 	bl	26f4e <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   15e50:	4651      	mov	r1, sl
   15e52:	f107 0010 	add.w	r0, r7, #16
   15e56:	f011 f87a 	bl	26f4e <bt_addr_le_copy>
   15e5a:	e7ba      	b.n	15dd2 <bt_hci_le_enh_conn_complete+0xce>
	conn->handle = handle;
   15e5c:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   15e5e:	f107 0118 	add.w	r1, r7, #24
	conn->handle = handle;
   15e62:	f820 9b88 	strh.w	r9, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   15e66:	f011 f872 	bl	26f4e <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   15e6a:	7e2a      	ldrb	r2, [r5, #24]
   15e6c:	7deb      	ldrb	r3, [r5, #23]
   15e6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15e72:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   15e76:	7eaa      	ldrb	r2, [r5, #26]
   15e78:	7e6b      	ldrb	r3, [r5, #25]
   15e7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15e7e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   15e82:	7eeb      	ldrb	r3, [r5, #27]
   15e84:	7f2a      	ldrb	r2, [r5, #28]
   15e86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15e8a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   15e8e:	f895 9003 	ldrb.w	r9, [r5, #3]
   15e92:	f884 9003 	strb.w	r9, [r4, #3]
	conn->err = 0U;
   15e96:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15e98:	f1b9 0f01 	cmp.w	r9, #1
	conn->err = 0U;
   15e9c:	7323      	strb	r3, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15e9e:	d12f      	bne.n	15f00 <bt_hci_le_enh_conn_complete+0x1fc>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   15ea0:	f107 0110 	add.w	r1, r7, #16
   15ea4:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   15ea8:	f011 f851 	bl	26f4e <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   15eac:	f001 f99c 	bl	171e8 <bt_le_adv_lookup_legacy>
   15eb0:	f3bf 8f5b 	dmb	ish
   15eb4:	6902      	ldr	r2, [r0, #16]
   15eb6:	f8df 816c 	ldr.w	r8, [pc, #364]	; 16024 <bt_hci_le_enh_conn_complete+0x320>
   15eba:	f3bf 8f5b 	dmb	ish
			if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   15ebe:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   15ec2:	f3c2 3300 	ubfx	r3, r2, #12, #1
   15ec6:	f040 80b5 	bne.w	16034 <bt_hci_le_enh_conn_complete+0x330>
				if (bt_addr_cmp(&evt->local_rpa,
   15eca:	350b      	adds	r5, #11
				conn->le.resp_addr.type = BT_ADDR_LE_RANDOM;
   15ecc:	f884 9096 	strb.w	r9, [r4, #150]	; 0x96
	return memcmp(a, b, sizeof(*a));
   15ed0:	2206      	movs	r2, #6
   15ed2:	f107 0108 	add.w	r1, r7, #8
   15ed6:	4628      	mov	r0, r5
						BT_ADDR_ANY) != 0) {
   15ed8:	60bb      	str	r3, [r7, #8]
   15eda:	81bb      	strh	r3, [r7, #12]
   15edc:	f010 fef3 	bl	26cc6 <memcmp>
   15ee0:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   15ee2:	2206      	movs	r2, #6
					bt_addr_copy(&conn->le.resp_addr.a,
   15ee4:	f104 0097 	add.w	r0, r4, #151	; 0x97
				if (bt_addr_cmp(&evt->local_rpa,
   15ee8:	2b00      	cmp	r3, #0
   15eea:	f000 808c 	beq.w	16006 <bt_hci_le_enh_conn_complete+0x302>
   15eee:	4629      	mov	r1, r5
   15ef0:	f010 ff12 	bl	26d18 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   15ef4:	f8d8 30dc 	ldr.w	r3, [r8, #220]	; 0xdc
   15ef8:	065d      	lsls	r5, r3, #25
   15efa:	d501      	bpl.n	15f00 <bt_hci_le_enh_conn_complete+0x1fc>
			bt_le_adv_resume();
   15efc:	f001 f978 	bl	171f0 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   15f00:	2107      	movs	r1, #7
   15f02:	4620      	mov	r0, r4
   15f04:	f001 fcd0 	bl	178a8 <bt_conn_set_state>
	if (is_disconnected) {
   15f08:	b11e      	cbz	r6, 15f12 <bt_hci_le_enh_conn_complete+0x20e>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   15f0a:	2101      	movs	r1, #1
   15f0c:	4620      	mov	r0, r4
   15f0e:	f001 fccb 	bl	178a8 <bt_conn_set_state>
	bt_conn_connected(conn);
   15f12:	4620      	mov	r0, r4
   15f14:	f011 fa5d 	bl	273d2 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   15f18:	7b63      	ldrb	r3, [r4, #13]
   15f1a:	2b07      	cmp	r3, #7
   15f1c:	d171      	bne.n	16002 <bt_hci_le_enh_conn_complete+0x2fe>
   15f1e:	f3bf 8f5b 	dmb	ish
   15f22:	6863      	ldr	r3, [r4, #4]
   15f24:	4d3f      	ldr	r5, [pc, #252]	; (16024 <bt_hci_le_enh_conn_complete+0x320>)
   15f26:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   15f2a:	f413 6f00 	tst.w	r3, #2048	; 0x800
   15f2e:	d129      	bne.n	15f84 <bt_hci_le_enh_conn_complete+0x280>
   15f30:	78e3      	ldrb	r3, [r4, #3]
   15f32:	b11b      	cbz	r3, 15f3c <bt_hci_le_enh_conn_complete+0x238>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   15f34:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   15f38:	0718      	lsls	r0, r3, #28
   15f3a:	d523      	bpl.n	15f84 <bt_hci_le_enh_conn_complete+0x280>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   15f3c:	2102      	movs	r1, #2
   15f3e:	f242 0016 	movw	r0, #8214	; 0x2016
   15f42:	f7ff fdd5 	bl	15af0 <bt_hci_cmd_create>
	if (!buf) {
   15f46:	4606      	mov	r6, r0
   15f48:	2800      	cmp	r0, #0
   15f4a:	d07c      	beq.n	16046 <bt_hci_le_enh_conn_complete+0x342>
   15f4c:	2102      	movs	r1, #2
   15f4e:	3008      	adds	r0, #8
   15f50:	f013 f8c0 	bl	290d4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   15f54:	8823      	ldrh	r3, [r4, #0]
   15f56:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   15f58:	2200      	movs	r2, #0
   15f5a:	4631      	mov	r1, r6
   15f5c:	f242 0016 	movw	r0, #8214	; 0x2016
   15f60:	f7ff fe00 	bl	15b64 <bt_hci_cmd_send_sync>
		if (err) {
   15f64:	b170      	cbz	r0, 15f84 <bt_hci_le_enh_conn_complete+0x280>
			BT_ERR("Failed read remote features (%d)", err);
   15f66:	466e      	mov	r6, sp
   15f68:	b088      	sub	sp, #32
   15f6a:	aa02      	add	r2, sp, #8
   15f6c:	4b2e      	ldr	r3, [pc, #184]	; (16028 <bt_hci_le_enh_conn_complete+0x324>)
   15f6e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15f72:	2303      	movs	r3, #3
   15f74:	f842 3f10 	str.w	r3, [r2, #16]!
   15f78:	4826      	ldr	r0, [pc, #152]	; (16014 <bt_hci_le_enh_conn_complete+0x310>)
   15f7a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15f7e:	f010 fffd 	bl	26f7c <z_log_msg_static_create.constprop.0>
   15f82:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   15f84:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   15f88:	07d9      	lsls	r1, r3, #31
   15f8a:	d516      	bpl.n	15fba <bt_hci_le_enh_conn_complete+0x2b6>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   15f8c:	2100      	movs	r1, #0
   15f8e:	2302      	movs	r3, #2
   15f90:	9100      	str	r1, [sp, #0]
   15f92:	461a      	mov	r2, r3
   15f94:	4620      	mov	r0, r4
   15f96:	f011 f849 	bl	2702c <bt_le_set_phy>
		if (err) {
   15f9a:	b170      	cbz	r0, 15fba <bt_hci_le_enh_conn_complete+0x2b6>
			BT_ERR("Failed LE Set PHY (%d)", err);
   15f9c:	466e      	mov	r6, sp
   15f9e:	b088      	sub	sp, #32
   15fa0:	aa02      	add	r2, sp, #8
   15fa2:	4b22      	ldr	r3, [pc, #136]	; (1602c <bt_hci_le_enh_conn_complete+0x328>)
   15fa4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15fa8:	2303      	movs	r3, #3
   15faa:	f842 3f10 	str.w	r3, [r2, #16]!
   15fae:	4819      	ldr	r0, [pc, #100]	; (16014 <bt_hci_le_enh_conn_complete+0x310>)
   15fb0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15fb4:	f010 ffe2 	bl	26f7c <z_log_msg_static_create.constprop.0>
   15fb8:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   15fba:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   15fbe:	069a      	lsls	r2, r3, #26
   15fc0:	d51f      	bpl.n	16002 <bt_hci_le_enh_conn_complete+0x2fe>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   15fc2:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
   15fc6:	689b      	ldr	r3, [r3, #8]
   15fc8:	079b      	lsls	r3, r3, #30
   15fca:	d51a      	bpl.n	16002 <bt_hci_le_enh_conn_complete+0x2fe>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   15fcc:	f107 0108 	add.w	r1, r7, #8
   15fd0:	1db8      	adds	r0, r7, #6
   15fd2:	f7ff fe43 	bl	15c5c <hci_le_read_max_data_len>
			if (!err) {
   15fd6:	b9a0      	cbnz	r0, 16002 <bt_hci_le_enh_conn_complete+0x2fe>
				err = bt_le_set_data_len(conn,
   15fd8:	893a      	ldrh	r2, [r7, #8]
   15fda:	88f9      	ldrh	r1, [r7, #6]
   15fdc:	4620      	mov	r0, r4
   15fde:	f011 f807 	bl	26ff0 <bt_le_set_data_len>
				if (err) {
   15fe2:	b170      	cbz	r0, 16002 <bt_hci_le_enh_conn_complete+0x2fe>
					BT_ERR("Failed to set data len (%d)", err);
   15fe4:	466d      	mov	r5, sp
   15fe6:	b088      	sub	sp, #32
   15fe8:	aa02      	add	r2, sp, #8
   15fea:	4b11      	ldr	r3, [pc, #68]	; (16030 <bt_hci_le_enh_conn_complete+0x32c>)
   15fec:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15ff0:	2303      	movs	r3, #3
   15ff2:	f842 3f10 	str.w	r3, [r2, #16]!
   15ff6:	4807      	ldr	r0, [pc, #28]	; (16014 <bt_hci_le_enh_conn_complete+0x310>)
   15ff8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15ffc:	f010 ffbe 	bl	26f7c <z_log_msg_static_create.constprop.0>
   16000:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   16002:	4620      	mov	r0, r4
   16004:	e6bb      	b.n	15d7e <bt_hci_le_enh_conn_complete+0x7a>
   16006:	f108 0161 	add.w	r1, r8, #97	; 0x61
   1600a:	e771      	b.n	15ef0 <bt_hci_le_enh_conn_complete+0x1ec>
   1600c:	20003a94 	.word	0x20003a94
   16010:	0002c964 	.word	0x0002c964
   16014:	0002ac10 	.word	0x0002ac10
   16018:	0002c985 	.word	0x0002c985
   1601c:	0002c99e 	.word	0x0002c99e
   16020:	01000003 	.word	0x01000003
   16024:	20000350 	.word	0x20000350
   16028:	0002c9ba 	.word	0x0002c9ba
   1602c:	0002c9db 	.word	0x0002c9db
   16030:	0002c9f2 	.word	0x0002c9f2
						&bt_dev.id_addr[conn->id]);
   16034:	7a21      	ldrb	r1, [r4, #8]
   16036:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   1603a:	4441      	add	r1, r8
   1603c:	f104 0096 	add.w	r0, r4, #150	; 0x96
   16040:	f010 ff85 	bl	26f4e <bt_addr_le_copy>
   16044:	e756      	b.n	15ef4 <bt_hci_le_enh_conn_complete+0x1f0>
		return -ENOBUFS;
   16046:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1604a:	e78c      	b.n	15f66 <bt_hci_le_enh_conn_complete+0x262>

0001604c <le_legacy_conn_complete>:
{
   1604c:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1604e:	6881      	ldr	r1, [r0, #8]
{
   16050:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   16052:	780b      	ldrb	r3, [r1, #0]
   16054:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   16058:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1605c:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   16060:	78cb      	ldrb	r3, [r1, #3]
   16062:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   16066:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1606a:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1606e:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   16072:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   16076:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1607a:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1607e:	7c4b      	ldrb	r3, [r1, #17]
   16080:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   16084:	a803      	add	r0, sp, #12
   16086:	3104      	adds	r1, #4
   16088:	f010 ff61 	bl	26f4e <bt_addr_le_copy>
   1608c:	490a      	ldr	r1, [pc, #40]	; (160b8 <le_legacy_conn_complete+0x6c>)
   1608e:	2206      	movs	r2, #6
   16090:	f10d 0013 	add.w	r0, sp, #19
   16094:	f010 fe40 	bl	26d18 <memcpy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   16098:	2300      	movs	r3, #0
   1609a:	2206      	movs	r2, #6
   1609c:	4669      	mov	r1, sp
   1609e:	f10d 0019 	add.w	r0, sp, #25
   160a2:	9300      	str	r3, [sp, #0]
   160a4:	f8ad 3004 	strh.w	r3, [sp, #4]
   160a8:	f010 fe36 	bl	26d18 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   160ac:	a802      	add	r0, sp, #8
   160ae:	f7ff fe29 	bl	15d04 <bt_hci_le_enh_conn_complete>
}
   160b2:	b00b      	add	sp, #44	; 0x2c
   160b4:	f85d fb04 	ldr.w	pc, [sp], #4
   160b8:	200003b1 	.word	0x200003b1

000160bc <bt_unpair>:
{
   160bc:	b530      	push	{r4, r5, lr}
   160be:	b085      	sub	sp, #20
   160c0:	460d      	mov	r5, r1
   160c2:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
   160c6:	b9d0      	cbnz	r0, 160fe <bt_unpair+0x42>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   160c8:	b949      	cbnz	r1, 160de <bt_unpair+0x22>
		bt_foreach_bond(id, unpair_remote, &id);
   160ca:	490e      	ldr	r1, [pc, #56]	; (16104 <bt_unpair+0x48>)
   160cc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   160d0:	f10d 0207 	add.w	r2, sp, #7
   160d4:	f006 fce6 	bl	1caa4 <bt_foreach_bond>
		return 0;
   160d8:	2000      	movs	r0, #0
}
   160da:	b005      	add	sp, #20
   160dc:	bd30      	pop	{r4, r5, pc}
	    (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   160de:	9002      	str	r0, [sp, #8]
	return memcmp(a, b, sizeof(*a));
   160e0:	2207      	movs	r2, #7
   160e2:	f8cd 000b 	str.w	r0, [sp, #11]
   160e6:	a902      	add	r1, sp, #8
   160e8:	4628      	mov	r0, r5
   160ea:	f010 fdec 	bl	26cc6 <memcmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   160ee:	2800      	cmp	r0, #0
   160f0:	d0eb      	beq.n	160ca <bt_unpair+0xe>
	unpair(id, addr);
   160f2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   160f6:	4629      	mov	r1, r5
   160f8:	f7ff f87c 	bl	151f4 <unpair>
	return 0;
   160fc:	e7ec      	b.n	160d8 <bt_unpair+0x1c>
		return -EINVAL;
   160fe:	f06f 0015 	mvn.w	r0, #21
   16102:	e7ea      	b.n	160da <bt_unpair+0x1e>
   16104:	00026f73 	.word	0x00026f73

00016108 <bt_security_err_get>:
	switch (hci_err) {
   16108:	2829      	cmp	r0, #41	; 0x29
   1610a:	bf9a      	itte	ls
   1610c:	4b01      	ldrls	r3, [pc, #4]	; (16114 <bt_security_err_get+0xc>)
   1610e:	5c18      	ldrbls	r0, [r3, r0]
{
   16110:	2009      	movhi	r0, #9
}
   16112:	4770      	bx	lr
   16114:	0002cc5b 	.word	0x0002cc5b

00016118 <hci_encrypt_key_refresh_complete>:
{
   16118:	b5f0      	push	{r4, r5, r6, r7, lr}
   1611a:	b087      	sub	sp, #28
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   1611c:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   1611e:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   16122:	781d      	ldrb	r5, [r3, #0]
{
   16124:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   16126:	4630      	mov	r0, r6
   16128:	f001 fbb6 	bl	17898 <bt_conn_lookup_handle>
	if (!conn) {
   1612c:	4604      	mov	r4, r0
   1612e:	b988      	cbnz	r0, 16154 <hci_encrypt_key_refresh_complete+0x3c>
		BT_ERR("Unable to look up conn with handle %u", handle);
   16130:	466c      	mov	r4, sp
   16132:	b088      	sub	sp, #32
   16134:	466a      	mov	r2, sp
   16136:	4b20      	ldr	r3, [pc, #128]	; (161b8 <hci_encrypt_key_refresh_complete+0xa0>)
   16138:	4820      	ldr	r0, [pc, #128]	; (161bc <hci_encrypt_key_refresh_complete+0xa4>)
   1613a:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1613e:	2303      	movs	r3, #3
   16140:	f842 3f10 	str.w	r3, [r2, #16]!
   16144:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16148:	f010 ff18 	bl	26f7c <z_log_msg_static_create.constprop.0>
   1614c:	46a5      	mov	sp, r4
}
   1614e:	371c      	adds	r7, #28
   16150:	46bd      	mov	sp, r7
   16152:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   16154:	b15d      	cbz	r5, 1616e <hci_encrypt_key_refresh_complete+0x56>
		bt_conn_security_changed(conn, status,
   16156:	4628      	mov	r0, r5
   16158:	f7ff ffd6 	bl	16108 <bt_security_err_get>
   1615c:	4629      	mov	r1, r5
   1615e:	4602      	mov	r2, r0
   16160:	4620      	mov	r0, r4
   16162:	f001 fd5d 	bl	17c20 <bt_conn_security_changed>
	bt_conn_unref(conn);
   16166:	4620      	mov	r0, r4
   16168:	f011 f8f7 	bl	2735a <bt_conn_unref>
   1616c:	e7ef      	b.n	1614e <hci_encrypt_key_refresh_complete+0x36>
	if (conn->type == BT_CONN_TYPE_LE) {
   1616e:	7883      	ldrb	r3, [r0, #2]
   16170:	2b01      	cmp	r3, #1
   16172:	d107      	bne.n	16184 <hci_encrypt_key_refresh_complete+0x6c>
		bt_smp_update_keys(conn);
   16174:	f006 fba8 	bl	1c8c8 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   16178:	4620      	mov	r0, r4
   1617a:	f010 fecf 	bl	26f1c <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   1617e:	2800      	cmp	r0, #0
   16180:	bf08      	it	eq
   16182:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   16184:	4628      	mov	r0, r5
   16186:	f7ff ffbf 	bl	16108 <bt_security_err_get>
   1618a:	4629      	mov	r1, r5
   1618c:	4602      	mov	r2, r0
   1618e:	4620      	mov	r0, r4
   16190:	f001 fd46 	bl	17c20 <bt_conn_security_changed>
	if (status) {
   16194:	2d00      	cmp	r5, #0
   16196:	d0e6      	beq.n	16166 <hci_encrypt_key_refresh_complete+0x4e>
		BT_ERR("Failed to set required security level");
   16198:	4b09      	ldr	r3, [pc, #36]	; (161c0 <hci_encrypt_key_refresh_complete+0xa8>)
   1619a:	617b      	str	r3, [r7, #20]
   1619c:	4807      	ldr	r0, [pc, #28]	; (161bc <hci_encrypt_key_refresh_complete+0xa4>)
   1619e:	2302      	movs	r3, #2
   161a0:	f107 0210 	add.w	r2, r7, #16
   161a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   161a8:	613b      	str	r3, [r7, #16]
   161aa:	f010 fee7 	bl	26f7c <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   161ae:	4629      	mov	r1, r5
   161b0:	4620      	mov	r0, r4
   161b2:	f011 f917 	bl	273e4 <bt_conn_disconnect>
   161b6:	e7d6      	b.n	16166 <hci_encrypt_key_refresh_complete+0x4e>
   161b8:	0002c72a 	.word	0x0002c72a
   161bc:	0002ac10 	.word	0x0002ac10
   161c0:	0002ca0e 	.word	0x0002ca0e

000161c4 <hci_encrypt_change>:
{
   161c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   161c8:	b086      	sub	sp, #24
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   161ca:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   161cc:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	uint8_t status = evt->status;
   161d0:	7835      	ldrb	r5, [r6, #0]
{
   161d2:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   161d4:	4640      	mov	r0, r8
   161d6:	f001 fb5f 	bl	17898 <bt_conn_lookup_handle>
	if (!conn) {
   161da:	4604      	mov	r4, r0
   161dc:	b990      	cbnz	r0, 16204 <hci_encrypt_change+0x40>
		BT_ERR("Unable to look up conn with handle %u", handle);
   161de:	466c      	mov	r4, sp
   161e0:	b088      	sub	sp, #32
   161e2:	466a      	mov	r2, sp
   161e4:	4b22      	ldr	r3, [pc, #136]	; (16270 <hci_encrypt_change+0xac>)
   161e6:	4823      	ldr	r0, [pc, #140]	; (16274 <hci_encrypt_change+0xb0>)
   161e8:	e9c2 3805 	strd	r3, r8, [r2, #20]
   161ec:	2303      	movs	r3, #3
   161ee:	f842 3f10 	str.w	r3, [r2, #16]!
   161f2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   161f6:	f010 fec1 	bl	26f7c <z_log_msg_static_create.constprop.0>
   161fa:	46a5      	mov	sp, r4
}
   161fc:	3718      	adds	r7, #24
   161fe:	46bd      	mov	sp, r7
   16200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (status) {
   16204:	b15d      	cbz	r5, 1621e <hci_encrypt_change+0x5a>
		bt_conn_security_changed(conn, status,
   16206:	4628      	mov	r0, r5
   16208:	f7ff ff7e 	bl	16108 <bt_security_err_get>
   1620c:	4629      	mov	r1, r5
   1620e:	4602      	mov	r2, r0
   16210:	4620      	mov	r0, r4
   16212:	f001 fd05 	bl	17c20 <bt_conn_security_changed>
	bt_conn_unref(conn);
   16216:	4620      	mov	r0, r4
   16218:	f011 f89f 	bl	2735a <bt_conn_unref>
   1621c:	e7ee      	b.n	161fc <hci_encrypt_change+0x38>
	if (conn->type == BT_CONN_TYPE_LE) {
   1621e:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   16220:	78f3      	ldrb	r3, [r6, #3]
   16222:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   16224:	2a01      	cmp	r2, #1
   16226:	d108      	bne.n	1623a <hci_encrypt_change+0x76>
		if (conn->encrypt) {
   16228:	b10b      	cbz	r3, 1622e <hci_encrypt_change+0x6a>
			bt_smp_update_keys(conn);
   1622a:	f006 fb4d 	bl	1c8c8 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   1622e:	4620      	mov	r0, r4
   16230:	f010 fe74 	bl	26f1c <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   16234:	2800      	cmp	r0, #0
   16236:	bf08      	it	eq
   16238:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1623a:	4628      	mov	r0, r5
   1623c:	f7ff ff64 	bl	16108 <bt_security_err_get>
   16240:	4629      	mov	r1, r5
   16242:	4602      	mov	r2, r0
   16244:	4620      	mov	r0, r4
   16246:	f001 fceb 	bl	17c20 <bt_conn_security_changed>
	if (status) {
   1624a:	2d00      	cmp	r5, #0
   1624c:	d0e3      	beq.n	16216 <hci_encrypt_change+0x52>
		BT_ERR("Failed to set required security level");
   1624e:	4b0a      	ldr	r3, [pc, #40]	; (16278 <hci_encrypt_change+0xb4>)
   16250:	617b      	str	r3, [r7, #20]
   16252:	4808      	ldr	r0, [pc, #32]	; (16274 <hci_encrypt_change+0xb0>)
   16254:	2302      	movs	r3, #2
   16256:	f107 0210 	add.w	r2, r7, #16
   1625a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1625e:	613b      	str	r3, [r7, #16]
   16260:	f010 fe8c 	bl	26f7c <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   16264:	4629      	mov	r1, r5
   16266:	4620      	mov	r0, r4
   16268:	f011 f8bc 	bl	273e4 <bt_conn_disconnect>
   1626c:	e7d3      	b.n	16216 <hci_encrypt_change+0x52>
   1626e:	bf00      	nop
   16270:	0002c72a 	.word	0x0002c72a
   16274:	0002ac10 	.word	0x0002ac10
   16278:	0002ca0e 	.word	0x0002ca0e

0001627c <bt_send>:
	return bt_dev.drv->send(buf);
   1627c:	4b02      	ldr	r3, [pc, #8]	; (16288 <bt_send+0xc>)
   1627e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   16282:	695b      	ldr	r3, [r3, #20]
   16284:	4718      	bx	r3
   16286:	bf00      	nop
   16288:	20000350 	.word	0x20000350

0001628c <bt_hci_cmd_send>:
{
   1628c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1628e:	4605      	mov	r5, r0
   16290:	af00      	add	r7, sp, #0
	if (!buf) {
   16292:	460c      	mov	r4, r1
   16294:	b919      	cbnz	r1, 1629e <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   16296:	f7ff fc2b 	bl	15af0 <bt_hci_cmd_create>
		if (!buf) {
   1629a:	4604      	mov	r4, r0
   1629c:	b318      	cbz	r0, 162e6 <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1629e:	f640 4335 	movw	r3, #3125	; 0xc35
   162a2:	429d      	cmp	r5, r3
   162a4:	d119      	bne.n	162da <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
   162a6:	4620      	mov	r0, r4
   162a8:	f7ff ffe8 	bl	1627c <bt_send>
		if (err) {
   162ac:	4605      	mov	r5, r0
   162ae:	b188      	cbz	r0, 162d4 <bt_hci_cmd_send+0x48>
			BT_ERR("Unable to send to driver (err %d)", err);
   162b0:	466e      	mov	r6, sp
   162b2:	b088      	sub	sp, #32
   162b4:	466a      	mov	r2, sp
   162b6:	4b0d      	ldr	r3, [pc, #52]	; (162ec <bt_hci_cmd_send+0x60>)
   162b8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   162bc:	2303      	movs	r3, #3
   162be:	480c      	ldr	r0, [pc, #48]	; (162f0 <bt_hci_cmd_send+0x64>)
   162c0:	f842 3f10 	str.w	r3, [r2, #16]!
   162c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   162c8:	f010 fe58 	bl	26f7c <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   162cc:	4620      	mov	r0, r4
   162ce:	46b5      	mov	sp, r6
   162d0:	f006 feaa 	bl	1d028 <net_buf_unref>
}
   162d4:	4628      	mov	r0, r5
   162d6:	46bd      	mov	sp, r7
   162d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   162da:	4806      	ldr	r0, [pc, #24]	; (162f4 <bt_hci_cmd_send+0x68>)
   162dc:	4621      	mov	r1, r4
   162de:	f012 fec6 	bl	2906e <net_buf_put>
	return 0;
   162e2:	2500      	movs	r5, #0
   162e4:	e7f6      	b.n	162d4 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
   162e6:	f06f 0568 	mvn.w	r5, #104	; 0x68
   162ea:	e7f3      	b.n	162d4 <bt_hci_cmd_send+0x48>
   162ec:	0002ca34 	.word	0x0002ca34
   162f0:	0002ac10 	.word	0x0002ac10
   162f4:	20000494 	.word	0x20000494

000162f8 <le_ltk_request>:
{
   162f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   162fc:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   162fe:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   16300:	8826      	ldrh	r6, [r4, #0]
   16302:	fa1f f886 	uxth.w	r8, r6
{
   16306:	af02      	add	r7, sp, #8
	conn = bt_conn_lookup_handle(handle);
   16308:	4640      	mov	r0, r8
   1630a:	f001 fac5 	bl	17898 <bt_conn_lookup_handle>
	if (!conn) {
   1630e:	4605      	mov	r5, r0
   16310:	b990      	cbnz	r0, 16338 <le_ltk_request+0x40>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16312:	466c      	mov	r4, sp
   16314:	b088      	sub	sp, #32
   16316:	aa02      	add	r2, sp, #8
   16318:	4b28      	ldr	r3, [pc, #160]	; (163bc <le_ltk_request+0xc4>)
   1631a:	4829      	ldr	r0, [pc, #164]	; (163c0 <le_ltk_request+0xc8>)
   1631c:	e9c2 3805 	strd	r3, r8, [r2, #20]
   16320:	2303      	movs	r3, #3
   16322:	f842 3f10 	str.w	r3, [r2, #16]!
   16326:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1632a:	f010 fe27 	bl	26f7c <z_log_msg_static_create.constprop.0>
   1632e:	46a5      	mov	sp, r4
}
   16330:	3728      	adds	r7, #40	; 0x28
   16332:	46bd      	mov	sp, r7
   16334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   16338:	f8d4 2002 	ldr.w	r2, [r4, #2]
   1633c:	f8d4 3006 	ldr.w	r3, [r4, #6]
   16340:	9701      	str	r7, [sp, #4]
   16342:	8961      	ldrh	r1, [r4, #10]
   16344:	9100      	str	r1, [sp, #0]
   16346:	f012 fc78 	bl	28c3a <bt_smp_request_ltk>
   1634a:	b328      	cbz	r0, 16398 <le_ltk_request+0xa0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   1634c:	2112      	movs	r1, #18
   1634e:	f242 001a 	movw	r0, #8218	; 0x201a
   16352:	f7ff fbcd 	bl	15af0 <bt_hci_cmd_create>
	if (!buf) {
   16356:	4604      	mov	r4, r0
   16358:	b970      	cbnz	r0, 16378 <le_ltk_request+0x80>
		BT_ERR("Out of command buffers");
   1635a:	4b1a      	ldr	r3, [pc, #104]	; (163c4 <le_ltk_request+0xcc>)
   1635c:	627b      	str	r3, [r7, #36]	; 0x24
   1635e:	4818      	ldr	r0, [pc, #96]	; (163c0 <le_ltk_request+0xc8>)
   16360:	2302      	movs	r3, #2
   16362:	f107 0220 	add.w	r2, r7, #32
   16366:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1636a:	623b      	str	r3, [r7, #32]
   1636c:	f010 fe06 	bl	26f7c <z_log_msg_static_create.constprop.0>
	bt_conn_unref(conn);
   16370:	4628      	mov	r0, r5
   16372:	f010 fff2 	bl	2735a <bt_conn_unref>
   16376:	e7db      	b.n	16330 <le_ltk_request+0x38>
   16378:	2112      	movs	r1, #18
   1637a:	3008      	adds	r0, #8
   1637c:	f012 feaa 	bl	290d4 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   16380:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   16382:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   16386:	2210      	movs	r2, #16
   16388:	f010 fcc6 	bl	26d18 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   1638c:	4621      	mov	r1, r4
   1638e:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   16392:	f7ff ff7b 	bl	1628c <bt_hci_cmd_send>
   16396:	e7eb      	b.n	16370 <le_ltk_request+0x78>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   16398:	2102      	movs	r1, #2
   1639a:	f242 001b 	movw	r0, #8219	; 0x201b
   1639e:	f7ff fba7 	bl	15af0 <bt_hci_cmd_create>
	if (!buf) {
   163a2:	4604      	mov	r4, r0
   163a4:	2800      	cmp	r0, #0
   163a6:	d0d8      	beq.n	1635a <le_ltk_request+0x62>
   163a8:	2102      	movs	r1, #2
   163aa:	3008      	adds	r0, #8
   163ac:	f012 fe92 	bl	290d4 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   163b0:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   163b2:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   163b4:	f242 001b 	movw	r0, #8219	; 0x201b
   163b8:	e7eb      	b.n	16392 <le_ltk_request+0x9a>
   163ba:	bf00      	nop
   163bc:	0002c6a5 	.word	0x0002c6a5
   163c0:	0002ac10 	.word	0x0002ac10
   163c4:	0002ca56 	.word	0x0002ca56

000163c8 <le_conn_param_req>:
{
   163c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   163cc:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   163ce:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   163d0:	78d9      	ldrb	r1, [r3, #3]
   163d2:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   163d4:	f8b3 8000 	ldrh.w	r8, [r3]
{
   163d8:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   163da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   163de:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   163e0:	7959      	ldrb	r1, [r3, #5]
   163e2:	791a      	ldrb	r2, [r3, #4]
   163e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   163e8:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   163ea:	799a      	ldrb	r2, [r3, #6]
   163ec:	79d9      	ldrb	r1, [r3, #7]
   163ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   163f2:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   163f4:	7a1a      	ldrb	r2, [r3, #8]
   163f6:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   163f8:	fa1f f488 	uxth.w	r4, r8
	param.timeout = sys_le16_to_cpu(evt->timeout);
   163fc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   16400:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16402:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   16404:	f001 fa48 	bl	17898 <bt_conn_lookup_handle>
	if (!conn) {
   16408:	4606      	mov	r6, r0
   1640a:	b9b0      	cbnz	r0, 1643a <le_conn_param_req+0x72>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1640c:	466d      	mov	r5, sp
   1640e:	b088      	sub	sp, #32
   16410:	466a      	mov	r2, sp
   16412:	4b20      	ldr	r3, [pc, #128]	; (16494 <le_conn_param_req+0xcc>)
   16414:	4820      	ldr	r0, [pc, #128]	; (16498 <le_conn_param_req+0xd0>)
   16416:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1641a:	2303      	movs	r3, #3
   1641c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16420:	f842 3f10 	str.w	r3, [r2, #16]!
   16424:	f010 fdaa 	bl	26f7c <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   16428:	2102      	movs	r1, #2
   1642a:	46ad      	mov	sp, r5
   1642c:	4620      	mov	r0, r4
   1642e:	f010 fe48 	bl	270c2 <le_conn_param_neg_reply>
}
   16432:	3708      	adds	r7, #8
   16434:	46bd      	mov	sp, r7
   16436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
   1643a:	4639      	mov	r1, r7
   1643c:	f001 fb88 	bl	17b50 <le_param_req>
   16440:	b938      	cbnz	r0, 16452 <le_conn_param_req+0x8a>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   16442:	211e      	movs	r1, #30
   16444:	4620      	mov	r0, r4
   16446:	f010 fe3c 	bl	270c2 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1644a:	4630      	mov	r0, r6
   1644c:	f010 ff85 	bl	2735a <bt_conn_unref>
   16450:	e7ef      	b.n	16432 <le_conn_param_req+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   16452:	210e      	movs	r1, #14
   16454:	f242 0020 	movw	r0, #8224	; 0x2020
   16458:	f7ff fb4a 	bl	15af0 <bt_hci_cmd_create>
	if (!buf) {
   1645c:	4605      	mov	r5, r0
   1645e:	2800      	cmp	r0, #0
   16460:	d0f3      	beq.n	1644a <le_conn_param_req+0x82>
   16462:	210e      	movs	r1, #14
   16464:	3008      	adds	r0, #8
   16466:	f012 fe35 	bl	290d4 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   1646a:	220e      	movs	r2, #14
   1646c:	4604      	mov	r4, r0
   1646e:	2100      	movs	r1, #0
   16470:	f010 fc5d 	bl	26d2e <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   16474:	883b      	ldrh	r3, [r7, #0]
   16476:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   16478:	887b      	ldrh	r3, [r7, #2]
   1647a:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1647c:	88bb      	ldrh	r3, [r7, #4]
   1647e:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   16480:	88fb      	ldrh	r3, [r7, #6]
	cp->handle = sys_cpu_to_le16(handle);
   16482:	f8a4 8000 	strh.w	r8, [r4]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   16486:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   16488:	4629      	mov	r1, r5
   1648a:	f242 0020 	movw	r0, #8224	; 0x2020
   1648e:	f7ff fefd 	bl	1628c <bt_hci_cmd_send>
   16492:	e7da      	b.n	1644a <le_conn_param_req+0x82>
   16494:	0002c6a5 	.word	0x0002c6a5
   16498:	0002ac10 	.word	0x0002ac10

0001649c <hci_event_prio>:
{
   1649c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   164a0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   164a2:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   164a6:	4630      	mov	r0, r6
   164a8:	f012 fe53 	bl	29152 <net_buf_simple_headroom>
	state->len = buf->len;
   164ac:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   164b0:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   164b4:	4605      	mov	r5, r0
   164b6:	d80c      	bhi.n	164d2 <hci_event_prio+0x36>
   164b8:	4a1c      	ldr	r2, [pc, #112]	; (1652c <hci_event_prio+0x90>)
   164ba:	491d      	ldr	r1, [pc, #116]	; (16530 <hci_event_prio+0x94>)
   164bc:	481d      	ldr	r0, [pc, #116]	; (16534 <hci_event_prio+0x98>)
   164be:	f640 536f 	movw	r3, #3439	; 0xd6f
   164c2:	f00f fdfa 	bl	260ba <assert_print>
   164c6:	4040      	eors	r0, r0
   164c8:	f380 8811 	msr	BASEPRI, r0
   164cc:	f04f 0003 	mov.w	r0, #3
   164d0:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   164d2:	4630      	mov	r0, r6
   164d4:	2102      	movs	r1, #2
   164d6:	f012 fe24 	bl	29122 <net_buf_simple_pull_mem>
   164da:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   164dc:	7800      	ldrb	r0, [r0, #0]
   164de:	f010 fd0b 	bl	26ef8 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   164e2:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   164e4:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   164e6:	d40c      	bmi.n	16502 <hci_event_prio+0x66>
   164e8:	4a10      	ldr	r2, [pc, #64]	; (1652c <hci_event_prio+0x90>)
   164ea:	4913      	ldr	r1, [pc, #76]	; (16538 <hci_event_prio+0x9c>)
   164ec:	4811      	ldr	r0, [pc, #68]	; (16534 <hci_event_prio+0x98>)
   164ee:	f640 5373 	movw	r3, #3443	; 0xd73
   164f2:	f00f fde2 	bl	260ba <assert_print>
   164f6:	4040      	eors	r0, r0
   164f8:	f380 8811 	msr	BASEPRI, r0
   164fc:	f04f 0003 	mov.w	r0, #3
   16500:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   16502:	2305      	movs	r3, #5
   16504:	4a0d      	ldr	r2, [pc, #52]	; (1653c <hci_event_prio+0xa0>)
   16506:	7838      	ldrb	r0, [r7, #0]
   16508:	4621      	mov	r1, r4
   1650a:	f7ff f85b 	bl	155c4 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1650e:	07b3      	lsls	r3, r6, #30
   16510:	d507      	bpl.n	16522 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   16512:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   16514:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   16518:	fa10 f585 	uxtah	r5, r0, r5
   1651c:	60a5      	str	r5, [r4, #8]
}
   1651e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   16522:	4620      	mov	r0, r4
}
   16524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   16528:	f006 bd7e 	b.w	1d028 <net_buf_unref>
   1652c:	0002c772 	.word	0x0002c772
   16530:	0002c7a6 	.word	0x0002c7a6
   16534:	0002c7bf 	.word	0x0002c7bf
   16538:	0002ca6d 	.word	0x0002ca6d
   1653c:	0002b3d8 	.word	0x0002b3d8

00016540 <bt_recv>:
{
   16540:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16542:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   16544:	2b01      	cmp	r3, #1
{
   16546:	af00      	add	r7, sp, #0
   16548:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   1654a:	d006      	beq.n	1655a <bt_recv+0x1a>
   1654c:	2b03      	cmp	r3, #3
   1654e:	d113      	bne.n	16578 <bt_recv+0x38>
			rx_queue_put(buf);
   16550:	f7fe ff64 	bl	1541c <rx_queue_put>
		return 0;
   16554:	2000      	movs	r0, #0
}
   16556:	46bd      	mov	sp, r7
   16558:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1655a:	6883      	ldr	r3, [r0, #8]
   1655c:	7818      	ldrb	r0, [r3, #0]
   1655e:	f010 fccb 	bl	26ef8 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16562:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16564:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16566:	d502      	bpl.n	1656e <bt_recv+0x2e>
			hci_event_prio(buf);
   16568:	4628      	mov	r0, r5
   1656a:	f7ff ff97 	bl	1649c <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1656e:	f014 0002 	ands.w	r0, r4, #2
   16572:	d0f0      	beq.n	16556 <bt_recv+0x16>
			rx_queue_put(buf);
   16574:	4628      	mov	r0, r5
   16576:	e7eb      	b.n	16550 <bt_recv+0x10>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   16578:	466c      	mov	r4, sp
   1657a:	b088      	sub	sp, #32
   1657c:	466a      	mov	r2, sp
   1657e:	4909      	ldr	r1, [pc, #36]	; (165a4 <bt_recv+0x64>)
   16580:	4809      	ldr	r0, [pc, #36]	; (165a8 <bt_recv+0x68>)
	switch (bt_buf_get_type(buf)) {
   16582:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   16586:	2303      	movs	r3, #3
   16588:	f842 3f10 	str.w	r3, [r2, #16]!
   1658c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16590:	f010 fcf4 	bl	26f7c <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   16594:	4628      	mov	r0, r5
   16596:	46a5      	mov	sp, r4
   16598:	f006 fd46 	bl	1d028 <net_buf_unref>
		return -EINVAL;
   1659c:	f06f 0015 	mvn.w	r0, #21
   165a0:	e7d9      	b.n	16556 <bt_recv+0x16>
   165a2:	bf00      	nop
   165a4:	0002ca86 	.word	0x0002ca86
   165a8:	0002ac10 	.word	0x0002ac10

000165ac <bt_hci_driver_register>:
	if (bt_dev.drv) {
   165ac:	4a08      	ldr	r2, [pc, #32]	; (165d0 <bt_hci_driver_register+0x24>)
{
   165ae:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   165b0:	f8d2 015c 	ldr.w	r0, [r2, #348]	; 0x15c
   165b4:	b930      	cbnz	r0, 165c4 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   165b6:	68d9      	ldr	r1, [r3, #12]
   165b8:	b139      	cbz	r1, 165ca <bt_hci_driver_register+0x1e>
   165ba:	6959      	ldr	r1, [r3, #20]
   165bc:	b129      	cbz	r1, 165ca <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   165be:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
	return 0;
   165c2:	4770      	bx	lr
		return -EALREADY;
   165c4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   165c8:	4770      	bx	lr
		return -EINVAL;
   165ca:	f06f 0015 	mvn.w	r0, #21
}
   165ce:	4770      	bx	lr
   165d0:	20000350 	.word	0x20000350

000165d4 <bt_finalize_init>:
{
   165d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   165d8:	4c3f      	ldr	r4, [pc, #252]	; (166d8 <bt_finalize_init+0x104>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   165da:	4d40      	ldr	r5, [pc, #256]	; (166dc <bt_finalize_init+0x108>)
{
   165dc:	af00      	add	r7, sp, #0
   165de:	2104      	movs	r1, #4
   165e0:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
   165e4:	f010 fcb6 	bl	26f54 <atomic_or>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   165e8:	79e2      	ldrb	r2, [r4, #7]
   165ea:	4b3d      	ldr	r3, [pc, #244]	; (166e0 <bt_finalize_init+0x10c>)
   165ec:	4620      	mov	r0, r4
   165ee:	2a01      	cmp	r2, #1
   165f0:	bf98      	it	ls
   165f2:	461d      	movls	r5, r3
   165f4:	466e      	mov	r6, sp
   165f6:	f7fe fb4b 	bl	14c90 <bt_addr_le_str_real>
   165fa:	b08a      	sub	sp, #40	; 0x28
   165fc:	466a      	mov	r2, sp
   165fe:	4b39      	ldr	r3, [pc, #228]	; (166e4 <bt_finalize_init+0x110>)
   16600:	61d0      	str	r0, [r2, #28]
   16602:	e9c2 3505 	strd	r3, r5, [r2, #20]
   16606:	f240 3302 	movw	r3, #770	; 0x302
   1660a:	8413      	strh	r3, [r2, #32]
   1660c:	4b36      	ldr	r3, [pc, #216]	; (166e8 <bt_finalize_init+0x114>)
   1660e:	f842 3f10 	str.w	r3, [r2, #16]!
   16612:	4836      	ldr	r0, [pc, #216]	; (166ec <bt_finalize_init+0x118>)
		BT_INFO("Identity[%d]: %s",
   16614:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 166f0 <bt_finalize_init+0x11c>
   16618:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 166f4 <bt_finalize_init+0x120>
   1661c:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 166ec <bt_finalize_init+0x118>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   16620:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   16624:	f010 fcaa 	bl	26f7c <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   16628:	2501      	movs	r5, #1
   1662a:	46b5      	mov	sp, r6
   1662c:	4626      	mov	r6, r4
   1662e:	79e3      	ldrb	r3, [r4, #7]
   16630:	429d      	cmp	r5, r3
   16632:	f106 0607 	add.w	r6, r6, #7
   16636:	db39      	blt.n	166ac <bt_finalize_init+0xd8>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   16638:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
   1663c:	4628      	mov	r0, r5
   1663e:	f7fe fdbd 	bl	151bc <ver_str>
   16642:	466e      	mov	r6, sp
   16644:	b08c      	sub	sp, #48	; 0x30
   16646:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
   1664a:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
   1664e:	466a      	mov	r2, sp
   16650:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 166f8 <bt_finalize_init+0x124>
   16654:	6253      	str	r3, [r2, #36]	; 0x24
   16656:	e9c2 5107 	strd	r5, r1, [r2, #28]
   1665a:	4b28      	ldr	r3, [pc, #160]	; (166fc <bt_finalize_init+0x128>)
   1665c:	2502      	movs	r5, #2
   1665e:	e9c2 c005 	strd	ip, r0, [r2, #20]
   16662:	f882 5028 	strb.w	r5, [r2, #40]	; 0x28
   16666:	f44f 514b 	mov.w	r1, #12992	; 0x32c0
   1666a:	f842 3f10 	str.w	r3, [r2, #16]!
   1666e:	481f      	ldr	r0, [pc, #124]	; (166ec <bt_finalize_init+0x118>)
   16670:	f010 fc84 	bl	26f7c <z_log_msg_static_create.constprop.0>
   16674:	46b5      	mov	sp, r6
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   16676:	f894 6069 	ldrb.w	r6, [r4, #105]	; 0x69
   1667a:	4630      	mov	r0, r6
   1667c:	f7fe fd9e 	bl	151bc <ver_str>
   16680:	b08a      	sub	sp, #40	; 0x28
   16682:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   16686:	466a      	mov	r2, sp
   16688:	491d      	ldr	r1, [pc, #116]	; (16700 <bt_finalize_init+0x12c>)
   1668a:	f882 5024 	strb.w	r5, [r2, #36]	; 0x24
   1668e:	e9c2 6307 	strd	r6, r3, [r2, #28]
   16692:	4b1c      	ldr	r3, [pc, #112]	; (16704 <bt_finalize_init+0x130>)
   16694:	e9c2 1005 	strd	r1, r0, [r2, #20]
   16698:	f842 3f10 	str.w	r3, [r2, #16]!
   1669c:	4813      	ldr	r0, [pc, #76]	; (166ec <bt_finalize_init+0x118>)
   1669e:	f44f 512b 	mov.w	r1, #10944	; 0x2ac0
   166a2:	f010 fc6b 	bl	26f7c <z_log_msg_static_create.constprop.0>
}
   166a6:	46bd      	mov	sp, r7
   166a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		BT_INFO("Identity[%d]: %s",
   166ac:	4630      	mov	r0, r6
   166ae:	f7fe faef 	bl	14c90 <bt_addr_le_str_real>
   166b2:	46eb      	mov	fp, sp
   166b4:	b08a      	sub	sp, #40	; 0x28
   166b6:	466a      	mov	r2, sp
   166b8:	2303      	movs	r3, #3
   166ba:	e9c2 8505 	strd	r8, r5, [r2, #20]
   166be:	61d0      	str	r0, [r2, #28]
   166c0:	f882 3020 	strb.w	r3, [r2, #32]
   166c4:	f44f 510b 	mov.w	r1, #8896	; 0x22c0
   166c8:	f842 9f10 	str.w	r9, [r2, #16]!
   166cc:	4650      	mov	r0, sl
   166ce:	f010 fc55 	bl	26f7c <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   166d2:	3501      	adds	r5, #1
   166d4:	46dd      	mov	sp, fp
   166d6:	e7aa      	b.n	1662e <bt_finalize_init+0x5a>
   166d8:	20000350 	.word	0x20000350
   166dc:	0002ca9a 	.word	0x0002ca9a
   166e0:	0002bc9d 	.word	0x0002bc9d
   166e4:	0002ca9e 	.word	0x0002ca9e
   166e8:	02000004 	.word	0x02000004
   166ec:	0002ac10 	.word	0x0002ac10
   166f0:	0002caad 	.word	0x0002caad
   166f4:	01000004 	.word	0x01000004
   166f8:	0002cabe 	.word	0x0002cabe
   166fc:	01000006 	.word	0x01000006
   16700:	0002cafc 	.word	0x0002cafc
   16704:	01000005 	.word	0x01000005

00016708 <init_work>:
{
   16708:	b510      	push	{r4, lr}
	err = bt_init();
   1670a:	f7fa fbc9 	bl	10ea0 <bt_init>
	if (ready_cb) {
   1670e:	4b03      	ldr	r3, [pc, #12]	; (1671c <init_work+0x14>)
   16710:	681b      	ldr	r3, [r3, #0]
   16712:	b113      	cbz	r3, 1671a <init_work+0x12>
}
   16714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   16718:	4718      	bx	r3
}
   1671a:	bd10      	pop	{r4, pc}
   1671c:	20002acc 	.word	0x20002acc

00016720 <bt_is_ready>:
   16720:	4b04      	ldr	r3, [pc, #16]	; (16734 <bt_is_ready+0x14>)
   16722:	f3bf 8f5b 	dmb	ish
   16726:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
   1672a:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   1672e:	f3c0 0080 	ubfx	r0, r0, #2, #1
   16732:	4770      	bx	lr
   16734:	20000350 	.word	0x20000350

00016738 <bt_set_name>:
#else
BUILD_ASSERT(DEVICE_NAME_LEN < 248);
#endif

int bt_set_name(const char *name)
{
   16738:	b570      	push	{r4, r5, r6, lr}
   1673a:	b086      	sub	sp, #24
   1673c:	4604      	mov	r4, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
   1673e:	f010 fa95 	bl	26c6c <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   16742:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
   16744:	4605      	mov	r5, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   16746:	d826      	bhi.n	16796 <bt_set_name+0x5e>
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
   16748:	4e14      	ldr	r6, [pc, #80]	; (1679c <bt_set_name+0x64>)
   1674a:	4621      	mov	r1, r4
   1674c:	f506 70d1 	add.w	r0, r6, #418	; 0x1a2
   16750:	f010 fa9c 	bl	26c8c <strcmp>
   16754:	b910      	cbnz	r0, 1675c <bt_set_name+0x24>
		return 0;
   16756:	2000      	movs	r0, #0

	return 0;
#else
	return -ENOMEM;
#endif
}
   16758:	b006      	add	sp, #24
   1675a:	bd70      	pop	{r4, r5, r6, pc}
	strncpy(bt_dev.name, name, len);
   1675c:	4621      	mov	r1, r4
   1675e:	462a      	mov	r2, r5
   16760:	f506 70d1 	add.w	r0, r6, #418	; 0x1a2
   16764:	f010 fa70 	bl	26c48 <strncpy>
	bt_dev.name[len] = '\0';
   16768:	1973      	adds	r3, r6, r5
   1676a:	2400      	movs	r4, #0
		err = settings_save_one("bt/name", bt_dev.name, len);
   1676c:	480c      	ldr	r0, [pc, #48]	; (167a0 <bt_set_name+0x68>)
	bt_dev.name[len] = '\0';
   1676e:	f883 41a2 	strb.w	r4, [r3, #418]	; 0x1a2
		err = settings_save_one("bt/name", bt_dev.name, len);
   16772:	462a      	mov	r2, r5
   16774:	f506 71d1 	add.w	r1, r6, #418	; 0x1a2
   16778:	f7fd f9a0 	bl	13abc <settings_save_one>
		if (err) {
   1677c:	2800      	cmp	r0, #0
   1677e:	d0ea      	beq.n	16756 <bt_set_name+0x1e>
			BT_WARN("Unable to store name");
   16780:	4b08      	ldr	r3, [pc, #32]	; (167a4 <bt_set_name+0x6c>)
   16782:	9305      	str	r3, [sp, #20]
   16784:	4808      	ldr	r0, [pc, #32]	; (167a8 <bt_set_name+0x70>)
   16786:	2302      	movs	r3, #2
   16788:	aa04      	add	r2, sp, #16
   1678a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1678e:	9304      	str	r3, [sp, #16]
   16790:	f010 fbf4 	bl	26f7c <z_log_msg_static_create.constprop.0>
   16794:	e7df      	b.n	16756 <bt_set_name+0x1e>
		return -ENOMEM;
   16796:	f06f 000b 	mvn.w	r0, #11
   1679a:	e7dd      	b.n	16758 <bt_set_name+0x20>
   1679c:	20000350 	.word	0x20000350
   167a0:	0002cc3e 	.word	0x0002cc3e
   167a4:	0002cc46 	.word	0x0002cc46
   167a8:	0002ac10 	.word	0x0002ac10

000167ac <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   167ac:	4800      	ldr	r0, [pc, #0]	; (167b0 <bt_get_name+0x4>)
   167ae:	4770      	bx	lr
   167b0:	200004f2 	.word	0x200004f2

000167b4 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   167b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   167b6:	4f0b      	ldr	r7, [pc, #44]	; (167e4 <id_find+0x30>)
{
   167b8:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   167ba:	2500      	movs	r5, #0
   167bc:	79fb      	ldrb	r3, [r7, #7]
   167be:	b2ec      	uxtb	r4, r5
   167c0:	42a3      	cmp	r3, r4
   167c2:	d802      	bhi.n	167ca <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   167c4:	f06f 0401 	mvn.w	r4, #1
   167c8:	e009      	b.n	167de <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   167ca:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   167ce:	2207      	movs	r2, #7
   167d0:	4439      	add	r1, r7
   167d2:	4630      	mov	r0, r6
   167d4:	f010 fa77 	bl	26cc6 <memcmp>
   167d8:	3501      	adds	r5, #1
   167da:	2800      	cmp	r0, #0
   167dc:	d1ee      	bne.n	167bc <id_find+0x8>
}
   167de:	4620      	mov	r0, r4
   167e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   167e2:	bf00      	nop
   167e4:	20000350 	.word	0x20000350

000167e8 <hci_id_add>:
{
   167e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   167ec:	4688      	mov	r8, r1
   167ee:	4617      	mov	r7, r2
	if (id >= CONFIG_BT_ID_MAX) {
   167f0:	4605      	mov	r5, r0
   167f2:	bb08      	cbnz	r0, 16838 <hci_id_add+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   167f4:	2127      	movs	r1, #39	; 0x27
   167f6:	f242 0027 	movw	r0, #8231	; 0x2027
   167fa:	f7ff f979 	bl	15af0 <bt_hci_cmd_create>
	if (!buf) {
   167fe:	4604      	mov	r4, r0
   16800:	b1f0      	cbz	r0, 16840 <hci_id_add+0x58>
	return net_buf_simple_add(&buf->b, len);
   16802:	2127      	movs	r1, #39	; 0x27
   16804:	3008      	adds	r0, #8
   16806:	f012 fc65 	bl	290d4 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1680a:	4641      	mov	r1, r8
   1680c:	4606      	mov	r6, r0
   1680e:	f010 fc7f 	bl	27110 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   16812:	4639      	mov	r1, r7
   16814:	2210      	movs	r2, #16
   16816:	1df0      	adds	r0, r6, #7
   16818:	f010 fa7e 	bl	26d18 <memcpy>
	(void)memcpy(cp->local_irk, &bt_dev.irk[id], 16);
   1681c:	490a      	ldr	r1, [pc, #40]	; (16848 <hci_id_add+0x60>)
   1681e:	2210      	movs	r2, #16
   16820:	f106 0017 	add.w	r0, r6, #23
   16824:	f010 fa78 	bl	26d18 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   16828:	462a      	mov	r2, r5
   1682a:	4621      	mov	r1, r4
   1682c:	f242 0027 	movw	r0, #8231	; 0x2027
}
   16830:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   16834:	f7ff b996 	b.w	15b64 <bt_hci_cmd_send_sync>
		return -EINVAL;
   16838:	f06f 0015 	mvn.w	r0, #21
}
   1683c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   16840:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16844:	e7fa      	b.n	1683c <hci_id_add+0x54>
   16846:	bf00      	nop
   16848:	200004b0 	.word	0x200004b0

0001684c <bt_id_add.part.0>:
void bt_id_add(struct bt_keys *keys)
   1684c:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   1684e:	2100      	movs	r1, #0
void bt_id_add(struct bt_keys *keys)
   16850:	b087      	sub	sp, #28
   16852:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   16854:	2206      	movs	r2, #6
   16856:	4608      	mov	r0, r1
   16858:	f001 fa7e 	bl	17d58 <bt_conn_lookup_state_le>
	if (conn) {
   1685c:	4606      	mov	r6, r0
   1685e:	b170      	cbz	r0, 1687e <bt_id_add.part.0+0x32>
   16860:	4848      	ldr	r0, [pc, #288]	; (16984 <bt_id_add.part.0+0x138>)
   16862:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   16866:	f010 fcaf 	bl	271c8 <atomic_or.isra.0>
	keys->state |= flag;
   1686a:	7a23      	ldrb	r3, [r4, #8]
		bt_conn_unref(conn);
   1686c:	4630      	mov	r0, r6
	keys->state |= flag;
   1686e:	f043 0301 	orr.w	r3, r3, #1
   16872:	7223      	strb	r3, [r4, #8]
}
   16874:	b007      	add	sp, #28
   16876:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   1687a:	f010 bd6e 	b.w	2735a <bt_conn_unref>
	if (bt_dev.le.rl_entries) {
   1687e:	4d42      	ldr	r5, [pc, #264]	; (16988 <bt_id_add.part.0+0x13c>)
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   16880:	4601      	mov	r1, r0
   16882:	4842      	ldr	r0, [pc, #264]	; (1698c <bt_id_add.part.0+0x140>)
   16884:	f000 fcaa 	bl	171dc <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   16888:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   1688c:	b173      	cbz	r3, 168ac <bt_id_add.part.0+0x60>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1688e:	4630      	mov	r0, r6
   16890:	f010 fc82 	bl	27198 <addr_res_enable>
		if (err) {
   16894:	b150      	cbz	r0, 168ac <bt_id_add.part.0+0x60>
			BT_WARN("Failed to disable address resolution");
   16896:	4b3e      	ldr	r3, [pc, #248]	; (16990 <bt_id_add.part.0+0x144>)
		BT_WARN("Set privacy mode command is not supported");
   16898:	9305      	str	r3, [sp, #20]
   1689a:	2302      	movs	r3, #2
   1689c:	9304      	str	r3, [sp, #16]
   1689e:	aa04      	add	r2, sp, #16
   168a0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   168a4:	483b      	ldr	r0, [pc, #236]	; (16994 <bt_id_add.part.0+0x148>)
   168a6:	f010 fc74 	bl	27192 <z_log_msg_static_create.constprop.0>
	if (err) {
   168aa:	e026      	b.n	168fa <bt_id_add.part.0+0xae>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   168ac:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   168b0:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   168b4:	429a      	cmp	r2, r3
   168b6:	d12a      	bne.n	1690e <bt_id_add.part.0+0xc2>
		BT_WARN("Resolving list size exceeded. Switching to host.");
   168b8:	4b37      	ldr	r3, [pc, #220]	; (16998 <bt_id_add.part.0+0x14c>)
   168ba:	4836      	ldr	r0, [pc, #216]	; (16994 <bt_id_add.part.0+0x148>)
   168bc:	9305      	str	r3, [sp, #20]
   168be:	aa04      	add	r2, sp, #16
   168c0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   168c4:	2602      	movs	r6, #2
   168c6:	9604      	str	r6, [sp, #16]
   168c8:	f010 fc63 	bl	27192 <z_log_msg_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   168cc:	2200      	movs	r2, #0
   168ce:	4611      	mov	r1, r2
   168d0:	f242 0029 	movw	r0, #8233	; 0x2029
   168d4:	f7ff f946 	bl	15b64 <bt_hci_cmd_send_sync>
		if (err) {
   168d8:	b130      	cbz	r0, 168e8 <bt_id_add.part.0+0x9c>
			BT_ERR("Failed to clear resolution list");
   168da:	4b30      	ldr	r3, [pc, #192]	; (1699c <bt_id_add.part.0+0x150>)
   168dc:	e9cd 6304 	strd	r6, r3, [sp, #16]
		BT_ERR("Failed to set privacy mode");
   168e0:	aa04      	add	r2, sp, #16
   168e2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   168e6:	e7dd      	b.n	168a4 <bt_id_add.part.0+0x58>
		bt_dev.le.rl_entries++;
   168e8:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   168ec:	3301      	adds	r3, #1
   168ee:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   168f2:	7a23      	ldrb	r3, [r4, #8]
   168f4:	f043 0304 	orr.w	r3, r3, #4
   168f8:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   168fa:	2001      	movs	r0, #1
   168fc:	f010 fc4c 	bl	27198 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   16900:	4827      	ldr	r0, [pc, #156]	; (169a0 <bt_id_add.part.0+0x154>)
   16902:	2100      	movs	r1, #0
}
   16904:	b007      	add	sp, #28
   16906:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1690a:	f000 bc67 	b.w	171dc <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1690e:	4622      	mov	r2, r4
   16910:	1c67      	adds	r7, r4, #1
   16912:	f812 0b2a 	ldrb.w	r0, [r2], #42
   16916:	4639      	mov	r1, r7
   16918:	f7ff ff66 	bl	167e8 <hci_id_add>
	if (err) {
   1691c:	4606      	mov	r6, r0
   1691e:	b120      	cbz	r0, 1692a <bt_id_add.part.0+0xde>
		BT_ERR("Failed to add IRK to controller");
   16920:	4b20      	ldr	r3, [pc, #128]	; (169a4 <bt_id_add.part.0+0x158>)
		BT_ERR("Failed to set privacy mode");
   16922:	9305      	str	r3, [sp, #20]
   16924:	2302      	movs	r3, #2
   16926:	9304      	str	r3, [sp, #16]
   16928:	e7da      	b.n	168e0 <bt_id_add.part.0+0x94>
	bt_dev.le.rl_entries++;
   1692a:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   1692e:	3301      	adds	r3, #1
   16930:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   16934:	7a23      	ldrb	r3, [r4, #8]
   16936:	f043 0304 	orr.w	r3, r3, #4
   1693a:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   1693c:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   16940:	075b      	lsls	r3, r3, #29
   16942:	d401      	bmi.n	16948 <bt_id_add.part.0+0xfc>
		BT_WARN("Set privacy mode command is not supported");
   16944:	4b18      	ldr	r3, [pc, #96]	; (169a8 <bt_id_add.part.0+0x15c>)
   16946:	e7a7      	b.n	16898 <bt_id_add.part.0+0x4c>
	bt_addr_le_copy(&cp.id_addr, addr);
   16948:	4639      	mov	r1, r7
   1694a:	4668      	mov	r0, sp
   1694c:	f010 fbe0 	bl	27110 <bt_addr_le_copy>
	cp.mode = mode;
   16950:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   16952:	2108      	movs	r1, #8
   16954:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   16958:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1695c:	f7ff f8c8 	bl	15af0 <bt_hci_cmd_create>
	if (!buf) {
   16960:	4604      	mov	r4, r0
   16962:	b908      	cbnz	r0, 16968 <bt_id_add.part.0+0x11c>
		BT_ERR("Failed to set privacy mode");
   16964:	4b11      	ldr	r3, [pc, #68]	; (169ac <bt_id_add.part.0+0x160>)
   16966:	e7dc      	b.n	16922 <bt_id_add.part.0+0xd6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16968:	2208      	movs	r2, #8
   1696a:	4669      	mov	r1, sp
   1696c:	4410      	add	r0, r2
   1696e:	f012 fbb7 	bl	290e0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   16972:	4632      	mov	r2, r6
   16974:	4621      	mov	r1, r4
   16976:	f242 004e 	movw	r0, #8270	; 0x204e
   1697a:	f7ff f8f3 	bl	15b64 <bt_hci_cmd_send_sync>
	if (err) {
   1697e:	2800      	cmp	r0, #0
   16980:	d0bb      	beq.n	168fa <bt_id_add.part.0+0xae>
   16982:	e7ef      	b.n	16964 <bt_id_add.part.0+0x118>
   16984:	2000041c 	.word	0x2000041c
   16988:	20000350 	.word	0x20000350
   1698c:	000271e1 	.word	0x000271e1
   16990:	0002cc85 	.word	0x0002cc85
   16994:	0002ac18 	.word	0x0002ac18
   16998:	0002ccaa 	.word	0x0002ccaa
   1699c:	0002ccdb 	.word	0x0002ccdb
   169a0:	00027153 	.word	0x00027153
   169a4:	0002ccfb 	.word	0x0002ccfb
   169a8:	0002cd1b 	.word	0x0002cd1b
   169ac:	0002cd45 	.word	0x0002cd45

000169b0 <set_random_address>:
{
   169b0:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   169b2:	4914      	ldr	r1, [pc, #80]	; (16a04 <set_random_address+0x54>)
   169b4:	2206      	movs	r2, #6
   169b6:	4605      	mov	r5, r0
   169b8:	f010 f985 	bl	26cc6 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   169bc:	4604      	mov	r4, r0
   169be:	b1e0      	cbz	r0, 169fa <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   169c0:	2106      	movs	r1, #6
   169c2:	f242 0005 	movw	r0, #8197	; 0x2005
   169c6:	f7ff f893 	bl	15af0 <bt_hci_cmd_create>
	if (!buf) {
   169ca:	4604      	mov	r4, r0
   169cc:	b1b8      	cbz	r0, 169fe <set_random_address+0x4e>
   169ce:	2206      	movs	r2, #6
   169d0:	4629      	mov	r1, r5
   169d2:	3008      	adds	r0, #8
   169d4:	f012 fb84 	bl	290e0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   169d8:	4621      	mov	r1, r4
   169da:	2200      	movs	r2, #0
   169dc:	f242 0005 	movw	r0, #8197	; 0x2005
   169e0:	f7ff f8c0 	bl	15b64 <bt_hci_cmd_send_sync>
	if (err) {
   169e4:	4604      	mov	r4, r0
   169e6:	b940      	cbnz	r0, 169fa <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   169e8:	2206      	movs	r2, #6
   169ea:	4806      	ldr	r0, [pc, #24]	; (16a04 <set_random_address+0x54>)
   169ec:	4629      	mov	r1, r5
   169ee:	f010 f993 	bl	26d18 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   169f2:	4b05      	ldr	r3, [pc, #20]	; (16a08 <set_random_address+0x58>)
   169f4:	2201      	movs	r2, #1
   169f6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   169fa:	4620      	mov	r0, r4
   169fc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   169fe:	f06f 0468 	mvn.w	r4, #104	; 0x68
   16a02:	e7fa      	b.n	169fa <set_random_address+0x4a>
   16a04:	200003b1 	.word	0x200003b1
   16a08:	20000350 	.word	0x20000350

00016a0c <bt_id_del.part.0>:
void bt_id_del(struct bt_keys *keys)
   16a0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   16a10:	2100      	movs	r1, #0
void bt_id_del(struct bt_keys *keys)
   16a12:	b087      	sub	sp, #28
   16a14:	4604      	mov	r4, r0
   16a16:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   16a18:	2206      	movs	r2, #6
   16a1a:	4608      	mov	r0, r1
   16a1c:	f001 f99c 	bl	17d58 <bt_conn_lookup_state_le>
	if (conn) {
   16a20:	4605      	mov	r5, r0
   16a22:	b178      	cbz	r0, 16a44 <bt_id_del.part.0+0x38>
   16a24:	483a      	ldr	r0, [pc, #232]	; (16b10 <bt_id_del.part.0+0x104>)
   16a26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   16a2a:	f010 fbcd 	bl	271c8 <atomic_or.isra.0>
	keys->state |= flag;
   16a2e:	7a23      	ldrb	r3, [r4, #8]
   16a30:	f043 0302 	orr.w	r3, r3, #2
   16a34:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   16a36:	4628      	mov	r0, r5
   16a38:	f010 fc8f 	bl	2735a <bt_conn_unref>
}
   16a3c:	371c      	adds	r7, #28
   16a3e:	46bd      	mov	sp, r7
   16a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   16a44:	4601      	mov	r1, r0
   16a46:	4833      	ldr	r0, [pc, #204]	; (16b14 <bt_id_del.part.0+0x108>)
   16a48:	f000 fbc8 	bl	171dc <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   16a4c:	4628      	mov	r0, r5
   16a4e:	f010 fba3 	bl	27198 <addr_res_enable>
	if (err) {
   16a52:	4d31      	ldr	r5, [pc, #196]	; (16b18 <bt_id_del.part.0+0x10c>)
   16a54:	4606      	mov	r6, r0
   16a56:	b1d0      	cbz	r0, 16a8e <bt_id_del.part.0+0x82>
		BT_ERR("Disabling address resolution failed (err %d)", err);
   16a58:	466c      	mov	r4, sp
   16a5a:	b088      	sub	sp, #32
   16a5c:	466b      	mov	r3, sp
   16a5e:	4a2f      	ldr	r2, [pc, #188]	; (16b1c <bt_id_del.part.0+0x110>)
   16a60:	e9c3 2005 	strd	r2, r0, [r3, #20]
   16a64:	461a      	mov	r2, r3
   16a66:	2303      	movs	r3, #3
   16a68:	f842 3f10 	str.w	r3, [r2, #16]!
   16a6c:	482c      	ldr	r0, [pc, #176]	; (16b20 <bt_id_del.part.0+0x114>)
   16a6e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16a72:	f010 fb8e 	bl	27192 <z_log_msg_static_create.constprop.0>
   16a76:	46a5      	mov	sp, r4
	if (bt_dev.le.rl_entries) {
   16a78:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   16a7c:	b113      	cbz	r3, 16a84 <bt_id_del.part.0+0x78>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   16a7e:	2001      	movs	r0, #1
   16a80:	f010 fb8a 	bl	27198 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   16a84:	4827      	ldr	r0, [pc, #156]	; (16b24 <bt_id_del.part.0+0x118>)
   16a86:	2100      	movs	r1, #0
   16a88:	f000 fba8 	bl	171dc <bt_le_ext_adv_foreach>
   16a8c:	e7d6      	b.n	16a3c <bt_id_del.part.0+0x30>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   16a8e:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   16a92:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   16a96:	429a      	cmp	r2, r3
   16a98:	d20c      	bcs.n	16ab4 <bt_id_del.part.0+0xa8>
		bt_dev.le.rl_entries--;
   16a9a:	3b01      	subs	r3, #1
   16a9c:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   16aa0:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   16aa2:	4921      	ldr	r1, [pc, #132]	; (16b28 <bt_id_del.part.0+0x11c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   16aa4:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   16aa8:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   16aaa:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   16aac:	2002      	movs	r0, #2
   16aae:	f006 f80f 	bl	1cad0 <bt_keys_foreach>
		goto done;
   16ab2:	e7e1      	b.n	16a78 <bt_id_del.part.0+0x6c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   16ab4:	2107      	movs	r1, #7
   16ab6:	f242 0028 	movw	r0, #8232	; 0x2028
   16aba:	f7ff f819 	bl	15af0 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   16abe:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
   16ac2:	4680      	mov	r8, r0
   16ac4:	b958      	cbnz	r0, 16ade <bt_id_del.part.0+0xd2>
		BT_ERR("Failed to remove IRK from controller");
   16ac6:	4b19      	ldr	r3, [pc, #100]	; (16b2c <bt_id_del.part.0+0x120>)
   16ac8:	617b      	str	r3, [r7, #20]
   16aca:	4815      	ldr	r0, [pc, #84]	; (16b20 <bt_id_del.part.0+0x114>)
   16acc:	2302      	movs	r3, #2
   16ace:	f107 0210 	add.w	r2, r7, #16
   16ad2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16ad6:	613b      	str	r3, [r7, #16]
   16ad8:	f010 fb5b 	bl	27192 <z_log_msg_static_create.constprop.0>
		goto done;
   16adc:	e7cc      	b.n	16a78 <bt_id_del.part.0+0x6c>
	return net_buf_simple_add(&buf->b, len);
   16ade:	2107      	movs	r1, #7
   16ae0:	3008      	adds	r0, #8
   16ae2:	f012 faf7 	bl	290d4 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   16ae6:	4649      	mov	r1, r9
   16ae8:	f010 fb12 	bl	27110 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   16aec:	4632      	mov	r2, r6
   16aee:	4641      	mov	r1, r8
   16af0:	f242 0028 	movw	r0, #8232	; 0x2028
   16af4:	f7ff f836 	bl	15b64 <bt_hci_cmd_send_sync>
	if (err) {
   16af8:	2800      	cmp	r0, #0
   16afa:	d1e4      	bne.n	16ac6 <bt_id_del.part.0+0xba>
	bt_dev.le.rl_entries--;
   16afc:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   16b00:	3b01      	subs	r3, #1
   16b02:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   16b06:	7a23      	ldrb	r3, [r4, #8]
   16b08:	f023 0304 	bic.w	r3, r3, #4
   16b0c:	7223      	strb	r3, [r4, #8]
   16b0e:	e7b3      	b.n	16a78 <bt_id_del.part.0+0x6c>
   16b10:	2000041c 	.word	0x2000041c
   16b14:	000271e1 	.word	0x000271e1
   16b18:	20000350 	.word	0x20000350
   16b1c:	0002cd60 	.word	0x0002cd60
   16b20:	0002ac18 	.word	0x0002ac18
   16b24:	00027153 	.word	0x00027153
   16b28:	0002717d 	.word	0x0002717d
   16b2c:	0002cd8d 	.word	0x0002cd8d

00016b30 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   16b30:	b5f0      	push	{r4, r5, r6, r7, lr}
   16b32:	4604      	mov	r4, r0
   16b34:	b087      	sub	sp, #28
   16b36:	4615      	mov	r5, r2
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   16b38:	460e      	mov	r6, r1
   16b3a:	b389      	cbz	r1, 16ba0 <id_create+0x70>
   16b3c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   16b3e:	2207      	movs	r2, #7
   16b40:	4669      	mov	r1, sp
   16b42:	4630      	mov	r0, r6
   16b44:	9300      	str	r3, [sp, #0]
   16b46:	f8cd 3003 	str.w	r3, [sp, #3]
   16b4a:	f010 f8bc 	bl	26cc6 <memcmp>
   16b4e:	b338      	cbz	r0, 16ba0 <id_create+0x70>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   16b50:	4826      	ldr	r0, [pc, #152]	; (16bec <id_create+0xbc>)
   16b52:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   16b56:	4631      	mov	r1, r6
   16b58:	4418      	add	r0, r3
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   16b5a:	f010 fad9 	bl	27110 <bt_addr_le_copy>
#if defined(CONFIG_BT_PRIVACY)
	{
		uint8_t zero_irk[16] = { 0 };

		if (irk && memcmp(irk, zero_irk, 16)) {
			memcpy(&bt_dev.irk[id], irk, 16);
   16b5e:	4823      	ldr	r0, [pc, #140]	; (16bec <id_create+0xbc>)
		uint8_t zero_irk[16] = { 0 };
   16b60:	2300      	movs	r3, #0
			memcpy(&bt_dev.irk[id], irk, 16);
   16b62:	3416      	adds	r4, #22
		uint8_t zero_irk[16] = { 0 };
   16b64:	e9cd 3302 	strd	r3, r3, [sp, #8]
   16b68:	e9cd 3304 	strd	r3, r3, [sp, #16]
			memcpy(&bt_dev.irk[id], irk, 16);
   16b6c:	eb00 1404 	add.w	r4, r0, r4, lsl #4
		if (irk && memcmp(irk, zero_irk, 16)) {
   16b70:	b36d      	cbz	r5, 16bce <id_create+0x9e>
   16b72:	2210      	movs	r2, #16
   16b74:	a902      	add	r1, sp, #8
   16b76:	4628      	mov	r0, r5
   16b78:	f010 f8a5 	bl	26cc6 <memcmp>
   16b7c:	b338      	cbz	r0, 16bce <id_create+0x9e>
			memcpy(&bt_dev.irk[id], irk, 16);
   16b7e:	2210      	movs	r2, #16
   16b80:	4629      	mov	r1, r5
   16b82:	4620      	mov	r0, r4
			if (err) {
				return err;
			}

			if (irk) {
				memcpy(irk, &bt_dev.irk[id], 16);
   16b84:	f010 f8c8 	bl	26d18 <memcpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16b88:	4819      	ldr	r0, [pc, #100]	; (16bf0 <id_create+0xc0>)
   16b8a:	f010 fac4 	bl	27116 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   16b8e:	0742      	lsls	r2, r0, #29
   16b90:	f3c0 0380 	ubfx	r3, r0, #2, #1
   16b94:	d527      	bpl.n	16be6 <id_create+0xb6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   16b96:	f7fe fa01 	bl	14f9c <bt_settings_save_id>
	}

	return 0;
   16b9a:	2000      	movs	r0, #0
}
   16b9c:	b007      	add	sp, #28
   16b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = bt_addr_le_create_static(&new_addr);
   16ba0:	a802      	add	r0, sp, #8
   16ba2:	f010 f99b 	bl	26edc <bt_addr_le_create_static>
			if (err) {
   16ba6:	2800      	cmp	r0, #0
   16ba8:	d1f8      	bne.n	16b9c <id_create+0x6c>
		} while (id_find(&new_addr) >= 0);
   16baa:	a802      	add	r0, sp, #8
   16bac:	f7ff fe02 	bl	167b4 <id_find>
   16bb0:	2800      	cmp	r0, #0
   16bb2:	daf5      	bge.n	16ba0 <id_create+0x70>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   16bb4:	480d      	ldr	r0, [pc, #52]	; (16bec <id_create+0xbc>)
   16bb6:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   16bba:	4407      	add	r7, r0
   16bbc:	a902      	add	r1, sp, #8
   16bbe:	4638      	mov	r0, r7
   16bc0:	f010 faa6 	bl	27110 <bt_addr_le_copy>
		if (addr) {
   16bc4:	2e00      	cmp	r6, #0
   16bc6:	d0ca      	beq.n	16b5e <id_create+0x2e>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   16bc8:	4639      	mov	r1, r7
   16bca:	4630      	mov	r0, r6
   16bcc:	e7c5      	b.n	16b5a <id_create+0x2a>
			err = bt_rand(&bt_dev.irk[id], 16);
   16bce:	2110      	movs	r1, #16
   16bd0:	4620      	mov	r0, r4
   16bd2:	f008 fd9f 	bl	1f714 <bt_rand>
			if (err) {
   16bd6:	2800      	cmp	r0, #0
   16bd8:	d1e0      	bne.n	16b9c <id_create+0x6c>
			if (irk) {
   16bda:	2d00      	cmp	r5, #0
   16bdc:	d0d4      	beq.n	16b88 <id_create+0x58>
				memcpy(irk, &bt_dev.irk[id], 16);
   16bde:	2210      	movs	r2, #16
   16be0:	4621      	mov	r1, r4
   16be2:	4628      	mov	r0, r5
   16be4:	e7ce      	b.n	16b84 <id_create+0x54>
	return 0;
   16be6:	4618      	mov	r0, r3
   16be8:	e7d8      	b.n	16b9c <id_create+0x6c>
   16bea:	bf00      	nop
   16bec:	20000350 	.word	0x20000350
   16bf0:	2000041c 	.word	0x2000041c

00016bf4 <le_rpa_invalidate>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16bf4:	4b08      	ldr	r3, [pc, #32]	; (16c18 <le_rpa_invalidate+0x24>)
   16bf6:	f3bf 8f5b 	dmb	ish
   16bfa:	e853 2f00 	ldrex	r2, [r3]
   16bfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   16c02:	e843 2100 	strex	r1, r2, [r3]
   16c06:	2900      	cmp	r1, #0
   16c08:	d1f7      	bne.n	16bfa <le_rpa_invalidate+0x6>
   16c0a:	f3bf 8f5b 	dmb	ish
		bt_le_ext_adv_foreach(adv_rpa_invalidate, NULL);
   16c0e:	4803      	ldr	r0, [pc, #12]	; (16c1c <le_rpa_invalidate+0x28>)
   16c10:	2100      	movs	r1, #0
   16c12:	f000 bae3 	b.w	171dc <bt_le_ext_adv_foreach>
   16c16:	bf00      	nop
   16c18:	2000041c 	.word	0x2000041c
   16c1c:	0002720b 	.word	0x0002720b

00016c20 <bt_id_set_private_addr>:
{
   16c20:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16c22:	4603      	mov	r3, r0
   16c24:	481a      	ldr	r0, [pc, #104]	; (16c90 <bt_id_set_private_addr+0x70>)
   16c26:	f010 fa76 	bl	27116 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
   16c2a:	0482      	lsls	r2, r0, #18
   16c2c:	d42d      	bmi.n	16c8a <bt_id_set_private_addr+0x6a>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
   16c2e:	4d19      	ldr	r5, [pc, #100]	; (16c94 <bt_id_set_private_addr+0x74>)
   16c30:	f103 0016 	add.w	r0, r3, #22
   16c34:	4669      	mov	r1, sp
   16c36:	eb05 1000 	add.w	r0, r5, r0, lsl #4
   16c3a:	f010 f8c8 	bl	26dce <bt_rpa_create>
	if (!err) {
   16c3e:	4604      	mov	r4, r0
   16c40:	b950      	cbnz	r0, 16c58 <bt_id_set_private_addr+0x38>
		err = set_random_address(&rpa);
   16c42:	4668      	mov	r0, sp
   16c44:	f7ff feb4 	bl	169b0 <set_random_address>
		if (!err) {
   16c48:	4604      	mov	r4, r0
   16c4a:	b928      	cbnz	r0, 16c58 <bt_id_set_private_addr+0x38>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16c4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   16c50:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   16c54:	f010 fab8 	bl	271c8 <atomic_or.isra.0>
	(void)k_work_schedule(&bt_dev.rpa_update, K_SECONDS(bt_dev.rpa_timeout));
   16c58:	f8b5 51a0 	ldrh.w	r5, [r5, #416]	; 0x1a0
   16c5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16c60:	435d      	muls	r5, r3
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   16c62:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   16c66:	f240 30e7 	movw	r0, #999	; 0x3e7
   16c6a:	2100      	movs	r1, #0
   16c6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16c70:	2300      	movs	r3, #0
   16c72:	fbe5 0106 	umlal	r0, r1, r5, r6
   16c76:	f7e9 fcc7 	bl	608 <__aeabi_uldivmod>
   16c7a:	4602      	mov	r2, r0
   16c7c:	460b      	mov	r3, r1
   16c7e:	4806      	ldr	r0, [pc, #24]	; (16c98 <bt_id_set_private_addr+0x78>)
   16c80:	f00a fd42 	bl	21708 <k_work_schedule>
}
   16c84:	4620      	mov	r0, r4
   16c86:	b002      	add	sp, #8
   16c88:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   16c8a:	2400      	movs	r4, #0
   16c8c:	e7fa      	b.n	16c84 <bt_id_set_private_addr+0x64>
   16c8e:	bf00      	nop
   16c90:	2000041c 	.word	0x2000041c
   16c94:	20000350 	.word	0x20000350
   16c98:	200004c0 	.word	0x200004c0

00016c9c <le_update_private_addr>:
{
   16c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16c9e:	af00      	add	r7, sp, #0
		le_rpa_invalidate();
   16ca0:	f7ff ffa8 	bl	16bf4 <le_rpa_invalidate>
		adv = bt_le_adv_lookup_legacy();
   16ca4:	f000 faa0 	bl	171e8 <bt_le_adv_lookup_legacy>
		if (adv &&
   16ca8:	4604      	mov	r4, r0
   16caa:	b9b0      	cbnz	r0, 16cda <le_update_private_addr+0x3e>
	uint8_t id = BT_ID_DEFAULT;
   16cac:	2600      	movs	r6, #0
	bool adv_enabled = false;
   16cae:	4635      	mov	r5, r6
	err = bt_id_set_private_addr(id);
   16cb0:	4630      	mov	r0, r6
   16cb2:	f7ff ffb5 	bl	16c20 <bt_id_set_private_addr>
	if (err) {
   16cb6:	b328      	cbz	r0, 16d04 <le_update_private_addr+0x68>
		BT_WARN("Failed to update RPA address (%d)", err);
   16cb8:	466c      	mov	r4, sp
   16cba:	b088      	sub	sp, #32
   16cbc:	466a      	mov	r2, sp
   16cbe:	4b16      	ldr	r3, [pc, #88]	; (16d18 <le_update_private_addr+0x7c>)
   16cc0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16cc4:	2303      	movs	r3, #3
   16cc6:	f842 3f10 	str.w	r3, [r2, #16]!
   16cca:	4814      	ldr	r0, [pc, #80]	; (16d1c <le_update_private_addr+0x80>)
   16ccc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16cd0:	f010 fa5f 	bl	27192 <z_log_msg_static_create.constprop.0>
   16cd4:	46a5      	mov	sp, r4
}
   16cd6:	46bd      	mov	sp, r7
   16cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   16cda:	f100 0210 	add.w	r2, r0, #16
   16cde:	2106      	movs	r1, #6
   16ce0:	4610      	mov	r0, r2
   16ce2:	f010 fa1e 	bl	27122 <atomic_test_bit>
		if (adv &&
   16ce6:	4605      	mov	r5, r0
   16ce8:	2800      	cmp	r0, #0
   16cea:	d0df      	beq.n	16cac <le_update_private_addr+0x10>
		    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   16cec:	210c      	movs	r1, #12
   16cee:	4610      	mov	r0, r2
   16cf0:	f010 fa17 	bl	27122 <atomic_test_bit>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   16cf4:	4601      	mov	r1, r0
   16cf6:	2800      	cmp	r0, #0
   16cf8:	d1d8      	bne.n	16cac <le_update_private_addr+0x10>
			bt_le_adv_set_enable_legacy(adv, false);
   16cfa:	4620      	mov	r0, r4
			id = adv->id;
   16cfc:	7826      	ldrb	r6, [r4, #0]
			bt_le_adv_set_enable_legacy(adv, false);
   16cfe:	f010 fac9 	bl	27294 <bt_le_adv_set_enable_legacy>
   16d02:	e7d5      	b.n	16cb0 <le_update_private_addr+0x14>
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
   16d04:	2c00      	cmp	r4, #0
   16d06:	d0e6      	beq.n	16cd6 <le_update_private_addr+0x3a>
	    adv && adv_enabled) {
   16d08:	2d00      	cmp	r5, #0
   16d0a:	d0e4      	beq.n	16cd6 <le_update_private_addr+0x3a>
		bt_le_adv_set_enable_legacy(adv, true);
   16d0c:	2101      	movs	r1, #1
   16d0e:	4620      	mov	r0, r4
   16d10:	f010 fac0 	bl	27294 <bt_le_adv_set_enable_legacy>
   16d14:	e7df      	b.n	16cd6 <le_update_private_addr+0x3a>
   16d16:	bf00      	nop
   16d18:	0002cdb2 	.word	0x0002cdb2
   16d1c:	0002ac18 	.word	0x0002ac18

00016d20 <rpa_timeout>:
{
   16d20:	b507      	push	{r0, r1, r2, lr}
	bool adv_enabled = false;
   16d22:	2300      	movs	r3, #0
		bt_le_ext_adv_foreach(adv_is_private_enabled, &adv_enabled);
   16d24:	4810      	ldr	r0, [pc, #64]	; (16d68 <rpa_timeout+0x48>)
	bool adv_enabled = false;
   16d26:	f88d 3007 	strb.w	r3, [sp, #7]
		bt_le_ext_adv_foreach(adv_is_private_enabled, &adv_enabled);
   16d2a:	f10d 0107 	add.w	r1, sp, #7
   16d2e:	f000 fa55 	bl	171dc <bt_le_ext_adv_foreach>
	if (!(adv_enabled ||
   16d32:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16d36:	b99b      	cbnz	r3, 16d60 <rpa_timeout+0x40>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16d38:	480c      	ldr	r0, [pc, #48]	; (16d6c <rpa_timeout+0x4c>)
   16d3a:	f010 f9ec 	bl	27116 <atomic_get>
   16d3e:	04c1      	lsls	r1, r0, #19
   16d40:	d40e      	bmi.n	16d60 <rpa_timeout+0x40>
   16d42:	480a      	ldr	r0, [pc, #40]	; (16d6c <rpa_timeout+0x4c>)
   16d44:	f010 f9e7 	bl	27116 <atomic_get>
   16d48:	0642      	lsls	r2, r0, #25
   16d4a:	d404      	bmi.n	16d56 <rpa_timeout+0x36>
		le_rpa_invalidate();
   16d4c:	f7ff ff52 	bl	16bf4 <le_rpa_invalidate>
}
   16d50:	b003      	add	sp, #12
   16d52:	f85d fb04 	ldr.w	pc, [sp], #4
   16d56:	4805      	ldr	r0, [pc, #20]	; (16d6c <rpa_timeout+0x4c>)
   16d58:	f010 f9dd 	bl	27116 <atomic_get>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   16d5c:	05c3      	lsls	r3, r0, #23
   16d5e:	d5f5      	bpl.n	16d4c <rpa_timeout+0x2c>
	le_update_private_addr();
   16d60:	f7ff ff9c 	bl	16c9c <le_update_private_addr>
   16d64:	e7f4      	b.n	16d50 <rpa_timeout+0x30>
   16d66:	bf00      	nop
   16d68:	00027131 	.word	0x00027131
   16d6c:	2000041c 	.word	0x2000041c

00016d70 <bt_id_pending_keys_update>:
   16d70:	4b0a      	ldr	r3, [pc, #40]	; (16d9c <bt_id_pending_keys_update+0x2c>)
   16d72:	f3bf 8f5b 	dmb	ish
   16d76:	e853 2f00 	ldrex	r2, [r3]
   16d7a:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   16d7e:	e843 1000 	strex	r0, r1, [r3]
   16d82:	2800      	cmp	r0, #0
   16d84:	d1f7      	bne.n	16d76 <bt_id_pending_keys_update+0x6>
   16d86:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   16d8a:	0413      	lsls	r3, r2, #16
   16d8c:	d504      	bpl.n	16d98 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   16d8e:	4904      	ldr	r1, [pc, #16]	; (16da0 <bt_id_pending_keys_update+0x30>)
   16d90:	2200      	movs	r2, #0
   16d92:	2002      	movs	r0, #2
   16d94:	f005 be9c 	b.w	1cad0 <bt_keys_foreach>
}
   16d98:	4770      	bx	lr
   16d9a:	bf00      	nop
   16d9c:	2000041c 	.word	0x2000041c
   16da0:	0002724b 	.word	0x0002724b

00016da4 <bt_id_add>:
{
   16da4:	b410      	push	{r4}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   16da6:	490a      	ldr	r1, [pc, #40]	; (16dd0 <bt_id_add+0x2c>)
   16da8:	f891 4118 	ldrb.w	r4, [r1, #280]	; 0x118
   16dac:	f891 2119 	ldrb.w	r2, [r1, #281]	; 0x119
{
   16db0:	4603      	mov	r3, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   16db2:	b10c      	cbz	r4, 16db8 <bt_id_add+0x14>
   16db4:	4294      	cmp	r4, r2
   16db6:	d208      	bcs.n	16dca <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
   16db8:	3201      	adds	r2, #1
   16dba:	f881 2119 	strb.w	r2, [r1, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   16dbe:	7a1a      	ldrb	r2, [r3, #8]
}
   16dc0:	bc10      	pop	{r4}
		keys->state |= BT_KEYS_ID_ADDED;
   16dc2:	f042 0204 	orr.w	r2, r2, #4
   16dc6:	721a      	strb	r2, [r3, #8]
}
   16dc8:	4770      	bx	lr
   16dca:	bc10      	pop	{r4}
   16dcc:	f7ff bd3e 	b.w	1684c <bt_id_add.part.0>
   16dd0:	20000350 	.word	0x20000350

00016dd4 <bt_id_del>:
{
   16dd4:	b410      	push	{r4}
	if (!bt_dev.le.rl_size ||
   16dd6:	4c0b      	ldr	r4, [pc, #44]	; (16e04 <bt_id_del+0x30>)
   16dd8:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   16ddc:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
{
   16de0:	4603      	mov	r3, r0
	if (!bt_dev.le.rl_size ||
   16de2:	b111      	cbz	r1, 16dea <bt_id_del+0x16>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   16de4:	3101      	adds	r1, #1
	if (!bt_dev.le.rl_size ||
   16de6:	428a      	cmp	r2, r1
   16de8:	dd08      	ble.n	16dfc <bt_id_del+0x28>
		bt_dev.le.rl_entries--;
   16dea:	3a01      	subs	r2, #1
   16dec:	f884 2119 	strb.w	r2, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   16df0:	7a1a      	ldrb	r2, [r3, #8]
}
   16df2:	bc10      	pop	{r4}
		keys->state &= ~BT_KEYS_ID_ADDED;
   16df4:	f022 0204 	bic.w	r2, r2, #4
   16df8:	721a      	strb	r2, [r3, #8]
}
   16dfa:	4770      	bx	lr
   16dfc:	bc10      	pop	{r4}
   16dfe:	f7ff be05 	b.w	16a0c <bt_id_del.part.0>
   16e02:	bf00      	nop
   16e04:	20000350 	.word	0x20000350

00016e08 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   16e08:	b5f0      	push	{r4, r5, r6, r7, lr}
   16e0a:	460e      	mov	r6, r1
   16e0c:	b089      	sub	sp, #36	; 0x24
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   16e0e:	4605      	mov	r5, r0
   16e10:	b930      	cbnz	r0, 16e20 <bt_id_create+0x18>

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   16e12:	4f2d      	ldr	r7, [pc, #180]	; (16ec8 <bt_id_create+0xc0>)
   16e14:	79fb      	ldrb	r3, [r7, #7]
   16e16:	2b01      	cmp	r3, #1
   16e18:	d12a      	bne.n	16e70 <bt_id_create+0x68>
		return -ENOMEM;
   16e1a:	f06f 000b 	mvn.w	r0, #11
   16e1e:	e025      	b.n	16e6c <bt_id_create+0x64>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   16e20:	2300      	movs	r3, #0
   16e22:	2207      	movs	r2, #7
   16e24:	4669      	mov	r1, sp
   16e26:	9300      	str	r3, [sp, #0]
   16e28:	f8cd 3003 	str.w	r3, [sp, #3]
   16e2c:	f00f ff4b 	bl	26cc6 <memcmp>
   16e30:	2800      	cmp	r0, #0
   16e32:	d0ee      	beq.n	16e12 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   16e34:	782b      	ldrb	r3, [r5, #0]
   16e36:	2b01      	cmp	r3, #1
   16e38:	d104      	bne.n	16e44 <bt_id_create+0x3c>
   16e3a:	79ab      	ldrb	r3, [r5, #6]
   16e3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16e40:	2bc0      	cmp	r3, #192	; 0xc0
   16e42:	d00c      	beq.n	16e5e <bt_id_create+0x56>
			BT_ERR("Only static random identity address supported");
   16e44:	4b21      	ldr	r3, [pc, #132]	; (16ecc <bt_id_create+0xc4>)
   16e46:	9307      	str	r3, [sp, #28]
   16e48:	4821      	ldr	r0, [pc, #132]	; (16ed0 <bt_id_create+0xc8>)
   16e4a:	2302      	movs	r3, #2
   16e4c:	aa06      	add	r2, sp, #24
   16e4e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16e52:	9306      	str	r3, [sp, #24]
   16e54:	f010 f99d 	bl	27192 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   16e58:	f06f 0015 	mvn.w	r0, #21
   16e5c:	e006      	b.n	16e6c <bt_id_create+0x64>
		if (id_find(addr) >= 0) {
   16e5e:	4628      	mov	r0, r5
   16e60:	f7ff fca8 	bl	167b4 <id_find>
   16e64:	2800      	cmp	r0, #0
   16e66:	dbd4      	blt.n	16e12 <bt_id_create+0xa>
			return -EALREADY;
   16e68:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   16e6c:	b009      	add	sp, #36	; 0x24
   16e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16e70:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
   16e74:	f010 f94f 	bl	27116 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   16e78:	f010 0001 	ands.w	r0, r0, #1
   16e7c:	d118      	bne.n	16eb0 <bt_id_create+0xa8>
		uint8_t zero_irk[16] = { 0 };
   16e7e:	e9cd 0002 	strd	r0, r0, [sp, #8]
   16e82:	e9cd 0004 	strd	r0, r0, [sp, #16]
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   16e86:	2d00      	cmp	r5, #0
   16e88:	d0e6      	beq.n	16e58 <bt_id_create+0x50>
   16e8a:	9000      	str	r0, [sp, #0]
   16e8c:	2207      	movs	r2, #7
   16e8e:	f8cd 0003 	str.w	r0, [sp, #3]
   16e92:	4669      	mov	r1, sp
   16e94:	4628      	mov	r0, r5
   16e96:	f00f ff16 	bl	26cc6 <memcmp>
   16e9a:	2800      	cmp	r0, #0
   16e9c:	d0dc      	beq.n	16e58 <bt_id_create+0x50>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   16e9e:	2e00      	cmp	r6, #0
   16ea0:	d0da      	beq.n	16e58 <bt_id_create+0x50>
		    !(irk && memcmp(irk, zero_irk, 16))) {
   16ea2:	2210      	movs	r2, #16
   16ea4:	a902      	add	r1, sp, #8
   16ea6:	4630      	mov	r0, r6
   16ea8:	f00f ff0d 	bl	26cc6 <memcmp>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   16eac:	2800      	cmp	r0, #0
   16eae:	d0d3      	beq.n	16e58 <bt_id_create+0x50>
	new_id = bt_dev.id_count++;
   16eb0:	79fc      	ldrb	r4, [r7, #7]
	err = id_create(new_id, addr, irk);
   16eb2:	4632      	mov	r2, r6
	new_id = bt_dev.id_count++;
   16eb4:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   16eb6:	4629      	mov	r1, r5
   16eb8:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   16eba:	71fb      	strb	r3, [r7, #7]
	err = id_create(new_id, addr, irk);
   16ebc:	f7ff fe38 	bl	16b30 <id_create>
	new_id = bt_dev.id_count++;
   16ec0:	2800      	cmp	r0, #0
   16ec2:	bf08      	it	eq
   16ec4:	4620      	moveq	r0, r4
   16ec6:	e7d1      	b.n	16e6c <bt_id_create+0x64>
   16ec8:	20000350 	.word	0x20000350
   16ecc:	0002cdd4 	.word	0x0002cdd4
   16ed0:	0002ac18 	.word	0x0002ac18

00016ed4 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   16ed4:	b570      	push	{r4, r5, r6, lr}
   16ed6:	b08a      	sub	sp, #40	; 0x28
   16ed8:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   16eda:	aa01      	add	r2, sp, #4
   16edc:	2100      	movs	r1, #0
   16ede:	f241 0009 	movw	r0, #4105	; 0x1009
   16ee2:	f7fe fe3f 	bl	15b64 <bt_hci_cmd_send_sync>
	if (err) {
   16ee6:	4604      	mov	r4, r0
   16ee8:	b160      	cbz	r0, 16f04 <bt_id_read_public_addr+0x30>
		BT_WARN("Failed to read public address");
   16eea:	4b1e      	ldr	r3, [pc, #120]	; (16f64 <bt_id_read_public_addr+0x90>)
   16eec:	9309      	str	r3, [sp, #36]	; 0x24
   16eee:	481e      	ldr	r0, [pc, #120]	; (16f68 <bt_id_read_public_addr+0x94>)
   16ef0:	2302      	movs	r3, #2
   16ef2:	aa08      	add	r2, sp, #32
   16ef4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16ef8:	9308      	str	r3, [sp, #32]
   16efa:	f010 f94a 	bl	27192 <z_log_msg_static_create.constprop.0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   16efe:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   16f00:	b00a      	add	sp, #40	; 0x28
   16f02:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   16f04:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   16f06:	9002      	str	r0, [sp, #8]
   16f08:	689d      	ldr	r5, [r3, #8]
   16f0a:	f8ad 000c 	strh.w	r0, [sp, #12]
   16f0e:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   16f10:	2206      	movs	r2, #6
   16f12:	a902      	add	r1, sp, #8
   16f14:	4628      	mov	r0, r5
   16f16:	f00f fed6 	bl	26cc6 <memcmp>
   16f1a:	b918      	cbnz	r0, 16f24 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   16f1c:	9801      	ldr	r0, [sp, #4]
   16f1e:	f006 f883 	bl	1d028 <net_buf_unref>
   16f22:	e7ec      	b.n	16efe <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   16f24:	23ff      	movs	r3, #255	; 0xff
   16f26:	2206      	movs	r2, #6
   16f28:	a904      	add	r1, sp, #16
   16f2a:	4628      	mov	r0, r5
   16f2c:	f88d 3010 	strb.w	r3, [sp, #16]
   16f30:	f88d 3011 	strb.w	r3, [sp, #17]
   16f34:	f88d 3012 	strb.w	r3, [sp, #18]
   16f38:	f88d 3013 	strb.w	r3, [sp, #19]
   16f3c:	f88d 3014 	strb.w	r3, [sp, #20]
   16f40:	f88d 3015 	strb.w	r3, [sp, #21]
   16f44:	f00f febf 	bl	26cc6 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   16f48:	2800      	cmp	r0, #0
   16f4a:	d0e7      	beq.n	16f1c <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   16f4c:	2206      	movs	r2, #6
   16f4e:	4629      	mov	r1, r5
   16f50:	1c70      	adds	r0, r6, #1
   16f52:	f00f fee1 	bl	26d18 <memcpy>
	net_buf_unref(rsp);
   16f56:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   16f58:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   16f5a:	f006 f865 	bl	1d028 <net_buf_unref>
	return 1U;
   16f5e:	2001      	movs	r0, #1
   16f60:	e7ce      	b.n	16f00 <bt_id_read_public_addr+0x2c>
   16f62:	bf00      	nop
   16f64:	0002ce02 	.word	0x0002ce02
   16f68:	0002ac18 	.word	0x0002ac18

00016f6c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   16f6c:	b510      	push	{r4, lr}
   16f6e:	b08e      	sub	sp, #56	; 0x38
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   16f70:	a802      	add	r0, sp, #8
   16f72:	f7ff ffaf 	bl	16ed4 <bt_id_read_public_addr>
   16f76:	4c1e      	ldr	r4, [pc, #120]	; (16ff0 <bt_setup_public_id_addr+0x84>)
   16f78:	71e0      	strb	r0, [r4, #7]

	if (!bt_dev.id_count) {
   16f7a:	b348      	cbz	r0, 16fd0 <bt_setup_public_id_addr+0x64>
	memset(ir, 0, 16);
   16f7c:	2210      	movs	r2, #16
   16f7e:	2100      	movs	r1, #0
   16f80:	eb0d 0002 	add.w	r0, sp, r2
   16f84:	f00f fed3 	bl	26d2e <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
   16f88:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   16f8c:	079b      	lsls	r3, r3, #30
   16f8e:	d510      	bpl.n	16fb2 <bt_setup_public_id_addr+0x46>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
   16f90:	aa01      	add	r2, sp, #4
   16f92:	2100      	movs	r1, #0
   16f94:	f64f 400a 	movw	r0, #64522	; 0xfc0a
   16f98:	f7fe fde4 	bl	15b64 <bt_hci_cmd_send_sync>
	if (err) {
   16f9c:	b1d0      	cbz	r0, 16fd4 <bt_setup_public_id_addr+0x68>
		BT_WARN("Failed to read identity root");
   16f9e:	4b15      	ldr	r3, [pc, #84]	; (16ff4 <bt_setup_public_id_addr+0x88>)
   16fa0:	930d      	str	r3, [sp, #52]	; 0x34
   16fa2:	4815      	ldr	r0, [pc, #84]	; (16ff8 <bt_setup_public_id_addr+0x8c>)
   16fa4:	2302      	movs	r3, #2
   16fa6:	aa0c      	add	r2, sp, #48	; 0x30
   16fa8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16fac:	930c      	str	r3, [sp, #48]	; 0x30
   16fae:	f010 f8f0 	bl	27192 <z_log_msg_static_create.constprop.0>
	uint8_t ir_irk[16];
	uint8_t ir[16];

	bt_read_identity_root(ir);

	if (!bt_smp_irk_get(ir, ir_irk)) {
   16fb2:	a908      	add	r1, sp, #32
   16fb4:	a804      	add	r0, sp, #16
   16fb6:	f011 fedf 	bl	28d78 <bt_smp_irk_get>
   16fba:	b1b8      	cbz	r0, 16fec <bt_setup_public_id_addr+0x80>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16fbc:	480f      	ldr	r0, [pc, #60]	; (16ffc <bt_setup_public_id_addr+0x90>)
   16fbe:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   16fc2:	f010 f901 	bl	271c8 <atomic_or.isra.0>
	uint8_t *irk = NULL;
   16fc6:	2200      	movs	r2, #0
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   16fc8:	a902      	add	r1, sp, #8
   16fca:	2000      	movs	r0, #0
   16fcc:	f7ff fdb0 	bl	16b30 <id_create>
}
   16fd0:	b00e      	add	sp, #56	; 0x38
   16fd2:	bd10      	pop	{r4, pc}
	rp = (void *)rsp->data;
   16fd4:	9b01      	ldr	r3, [sp, #4]
	memcpy(ir, rp->ir, 16);
   16fd6:	6899      	ldr	r1, [r3, #8]
   16fd8:	2210      	movs	r2, #16
   16fda:	3101      	adds	r1, #1
   16fdc:	eb0d 0002 	add.w	r0, sp, r2
   16fe0:	f00f fe9a 	bl	26d18 <memcpy>
	net_buf_unref(rsp);
   16fe4:	9801      	ldr	r0, [sp, #4]
   16fe6:	f006 f81f 	bl	1d028 <net_buf_unref>
   16fea:	e7e2      	b.n	16fb2 <bt_setup_public_id_addr+0x46>
		irk = ir_irk;
   16fec:	aa08      	add	r2, sp, #32
   16fee:	e7eb      	b.n	16fc8 <bt_setup_public_id_addr+0x5c>
   16ff0:	20000350 	.word	0x20000350
   16ff4:	0002ce20 	.word	0x0002ce20
   16ff8:	0002ac18 	.word	0x0002ac18
   16ffc:	2000041c 	.word	0x2000041c

00017000 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   17000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   17004:	4b22      	ldr	r3, [pc, #136]	; (17090 <bt_read_static_addr+0x90>)
   17006:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   1700a:	f014 0401 	ands.w	r4, r4, #1
{
   1700e:	b088      	sub	sp, #32
   17010:	4607      	mov	r7, r0
   17012:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   17014:	d10a      	bne.n	1702c <bt_read_static_addr+0x2c>
		BT_WARN("Read Static Addresses command not available");
   17016:	4b1f      	ldr	r3, [pc, #124]	; (17094 <bt_read_static_addr+0x94>)
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   17018:	9307      	str	r3, [sp, #28]
   1701a:	481f      	ldr	r0, [pc, #124]	; (17098 <bt_read_static_addr+0x98>)
   1701c:	2302      	movs	r3, #2
   1701e:	aa06      	add	r2, sp, #24
   17020:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17024:	9306      	str	r3, [sp, #24]
   17026:	f010 f8b4 	bl	27192 <z_log_msg_static_create.constprop.0>
   1702a:	e012      	b.n	17052 <bt_read_static_addr+0x52>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1702c:	aa01      	add	r2, sp, #4
   1702e:	2100      	movs	r1, #0
   17030:	f64f 4009 	movw	r0, #64521	; 0xfc09
   17034:	f7fe fd96 	bl	15b64 <bt_hci_cmd_send_sync>
	if (err) {
   17038:	4605      	mov	r5, r0
   1703a:	b170      	cbz	r0, 1705a <bt_read_static_addr+0x5a>
		BT_WARN("Failed to read static addresses");
   1703c:	4b17      	ldr	r3, [pc, #92]	; (1709c <bt_read_static_addr+0x9c>)
   1703e:	9307      	str	r3, [sp, #28]
   17040:	4815      	ldr	r0, [pc, #84]	; (17098 <bt_read_static_addr+0x98>)
   17042:	2302      	movs	r3, #2
   17044:	aa06      	add	r2, sp, #24
   17046:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return 0;
   1704a:	2400      	movs	r4, #0
		BT_WARN("Failed to read static addresses");
   1704c:	9306      	str	r3, [sp, #24]
   1704e:	f010 f8a0 	bl	27192 <z_log_msg_static_create.constprop.0>
	}

	return cnt;
}
   17052:	4620      	mov	r0, r4
   17054:	b008      	add	sp, #32
   17056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
   1705a:	9b01      	ldr	r3, [sp, #4]
   1705c:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   1705e:	785c      	ldrb	r4, [r3, #1]
   17060:	42b4      	cmp	r4, r6
   17062:	bf28      	it	cs
   17064:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   17066:	f04f 0816 	mov.w	r8, #22
   1706a:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   1706c:	42ac      	cmp	r4, r5
   1706e:	dc06      	bgt.n	1707e <bt_read_static_addr+0x7e>
	net_buf_unref(rsp);
   17070:	9801      	ldr	r0, [sp, #4]
   17072:	f005 ffd9 	bl	1d028 <net_buf_unref>
	if (!cnt) {
   17076:	2c00      	cmp	r4, #0
   17078:	d1eb      	bne.n	17052 <bt_read_static_addr+0x52>
		BT_WARN("No static addresses stored in controller");
   1707a:	4b09      	ldr	r3, [pc, #36]	; (170a0 <bt_read_static_addr+0xa0>)
   1707c:	e7cc      	b.n	17018 <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1707e:	fb08 7005 	mla	r0, r8, r5, r7
   17082:	2216      	movs	r2, #22
   17084:	4631      	mov	r1, r6
   17086:	f00f fe47 	bl	26d18 <memcpy>
	for (i = 0; i < cnt; i++) {
   1708a:	3501      	adds	r5, #1
   1708c:	e7ee      	b.n	1706c <bt_read_static_addr+0x6c>
   1708e:	bf00      	nop
   17090:	20000350 	.word	0x20000350
   17094:	0002ce3d 	.word	0x0002ce3d
   17098:	0002ac18 	.word	0x0002ac18
   1709c:	0002ce69 	.word	0x0002ce69
   170a0:	0002ce89 	.word	0x0002ce89

000170a4 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   170a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   170a8:	4d22      	ldr	r5, [pc, #136]	; (17134 <bt_setup_random_id_addr+0x90>)
   170aa:	79ec      	ldrb	r4, [r5, #7]
{
   170ac:	b08c      	sub	sp, #48	; 0x30
	if (!bt_dev.id_count) {
   170ae:	bbac      	cbnz	r4, 1711c <bt_setup_random_id_addr+0x78>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   170b0:	2101      	movs	r1, #1
   170b2:	a806      	add	r0, sp, #24
   170b4:	f7ff ffa4 	bl	17000 <bt_read_static_addr>
   170b8:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   170ba:	b378      	cbz	r0, 1711c <bt_setup_random_id_addr+0x78>
   170bc:	f04f 0816 	mov.w	r8, #22
   170c0:	f105 09cc 	add.w	r9, r5, #204	; 0xcc
   170c4:	b2e6      	uxtb	r6, r4
				bt_addr_le_t addr;
				uint8_t *irk = NULL;
#if defined(CONFIG_BT_PRIVACY)
				uint8_t ir_irk[16];

				if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
   170c6:	fb08 fa06 	mul.w	sl, r8, r6
   170ca:	f10a 0006 	add.w	r0, sl, #6
   170ce:	ab06      	add	r3, sp, #24
   170d0:	a902      	add	r1, sp, #8
   170d2:	4418      	add	r0, r3
   170d4:	f011 fe50 	bl	28d78 <bt_smp_irk_get>
   170d8:	b1f0      	cbz	r0, 17118 <bt_setup_random_id_addr+0x74>
   170da:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   170de:	4648      	mov	r0, r9
   170e0:	f010 f872 	bl	271c8 <atomic_or.isra.0>
				uint8_t *irk = NULL;
   170e4:	2700      	movs	r7, #0
   170e6:	ab06      	add	r3, sp, #24
   170e8:	eb03 010a 	add.w	r1, r3, sl
   170ec:	2206      	movs	r2, #6
   170ee:	f10d 0001 	add.w	r0, sp, #1
   170f2:	f00f fe11 	bl	26d18 <memcpy>
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
				addr.type = BT_ADDR_LE_RANDOM;
   170f6:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
   170f8:	463a      	mov	r2, r7
   170fa:	4669      	mov	r1, sp
   170fc:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   170fe:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   17102:	f7ff fd15 	bl	16b30 <id_create>
				if (err) {
   17106:	b920      	cbnz	r0, 17112 <bt_setup_random_id_addr+0x6e>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   17108:	79ea      	ldrb	r2, [r5, #7]
   1710a:	3401      	adds	r4, #1
   1710c:	b2e3      	uxtb	r3, r4
   1710e:	429a      	cmp	r2, r3
   17110:	d8d8      	bhi.n	170c4 <bt_setup_random_id_addr+0x20>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   17112:	b00c      	add	sp, #48	; 0x30
   17114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					irk = ir_irk;
   17118:	af02      	add	r7, sp, #8
   1711a:	e7e4      	b.n	170e6 <bt_setup_random_id_addr+0x42>
   1711c:	4806      	ldr	r0, [pc, #24]	; (17138 <bt_setup_random_id_addr+0x94>)
   1711e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   17122:	f010 f851 	bl	271c8 <atomic_or.isra.0>
	return bt_id_create(NULL, NULL);
   17126:	2100      	movs	r1, #0
   17128:	4608      	mov	r0, r1
}
   1712a:	b00c      	add	sp, #48	; 0x30
   1712c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_id_create(NULL, NULL);
   17130:	f7ff be6a 	b.w	16e08 <bt_id_create>
   17134:	20000350 	.word	0x20000350
   17138:	2000041c 	.word	0x2000041c

0001713c <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   1713c:	b508      	push	{r3, lr}
			return err;
		}
	}

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
   1713e:	4903      	ldr	r1, [pc, #12]	; (1714c <bt_id_init+0x10>)
   17140:	4803      	ldr	r0, [pc, #12]	; (17150 <bt_id_init+0x14>)
   17142:	f012 ffda 	bl	2a0fa <k_work_init_delayable>
#endif

	return 0;
}
   17146:	2000      	movs	r0, #0
   17148:	bd08      	pop	{r3, pc}
   1714a:	bf00      	nop
   1714c:	00016d21 	.word	0x00016d21
   17150:	200004c0 	.word	0x200004c0

00017154 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   17154:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   17156:	4606      	mov	r6, r0
   17158:	4b1e      	ldr	r3, [pc, #120]	; (171d4 <le_adv_start_add_conn+0x80>)
   1715a:	f816 2b09 	ldrb.w	r2, [r6], #9
   1715e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   17162:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   17164:	2300      	movs	r3, #0
{
   17166:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
   17168:	2207      	movs	r2, #7
   1716a:	460f      	mov	r7, r1
   1716c:	4630      	mov	r0, r6
   1716e:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   17170:	9300      	str	r3, [sp, #0]
   17172:	f8cd 3003 	str.w	r3, [sp, #3]
   17176:	f00f fda6 	bl	26cc6 <memcmp>
   1717a:	782a      	ldrb	r2, [r5, #0]
   1717c:	4604      	mov	r4, r0
   1717e:	b9a8      	cbnz	r0, 171ac <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   17180:	4b15      	ldr	r3, [pc, #84]	; (171d8 <le_adv_start_add_conn+0x84>)
   17182:	6818      	ldr	r0, [r3, #0]
   17184:	8899      	ldrh	r1, [r3, #4]
   17186:	9002      	str	r0, [sp, #8]
   17188:	799b      	ldrb	r3, [r3, #6]
   1718a:	f8ad 100c 	strh.w	r1, [sp, #12]
   1718e:	4610      	mov	r0, r2
   17190:	a902      	add	r1, sp, #8
   17192:	f88d 300e 	strb.w	r3, [sp, #14]
   17196:	f000 fd77 	bl	17c88 <bt_conn_add_le>
		if (!conn) {
   1719a:	4605      	mov	r5, r0
   1719c:	b1b8      	cbz	r0, 171ce <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   1719e:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   171a0:	f000 fb82 	bl	178a8 <bt_conn_set_state>
	*out_conn = conn;
   171a4:	603d      	str	r5, [r7, #0]
	return 0;
}
   171a6:	4620      	mov	r0, r4
   171a8:	b005      	add	sp, #20
   171aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   171ac:	4631      	mov	r1, r6
   171ae:	4610      	mov	r0, r2
   171b0:	f000 fda4 	bl	17cfc <bt_conn_exists_le>
   171b4:	4604      	mov	r4, r0
   171b6:	b938      	cbnz	r0, 171c8 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   171b8:	7828      	ldrb	r0, [r5, #0]
   171ba:	4631      	mov	r1, r6
   171bc:	f000 fd64 	bl	17c88 <bt_conn_add_le>
	if (!conn) {
   171c0:	4605      	mov	r5, r0
   171c2:	b120      	cbz	r0, 171ce <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   171c4:	2105      	movs	r1, #5
   171c6:	e7eb      	b.n	171a0 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   171c8:	f06f 0415 	mvn.w	r4, #21
   171cc:	e7eb      	b.n	171a6 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   171ce:	f06f 040b 	mvn.w	r4, #11
   171d2:	e7e8      	b.n	171a6 <le_adv_start_add_conn+0x52>
   171d4:	20000350 	.word	0x20000350
   171d8:	0002afdc 	.word	0x0002afdc

000171dc <bt_le_ext_adv_foreach>:
{
   171dc:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   171de:	4801      	ldr	r0, [pc, #4]	; (171e4 <bt_le_ext_adv_foreach+0x8>)
   171e0:	4718      	bx	r3
   171e2:	bf00      	nop
   171e4:	20000368 	.word	0x20000368

000171e8 <bt_le_adv_lookup_legacy>:
}
   171e8:	4800      	ldr	r0, [pc, #0]	; (171ec <bt_le_adv_lookup_legacy+0x4>)
   171ea:	4770      	bx	lr
   171ec:	20000368 	.word	0x20000368

000171f0 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   171f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   171f2:	4822      	ldr	r0, [pc, #136]	; (1727c <bt_le_adv_resume+0x8c>)
   171f4:	4c21      	ldr	r4, [pc, #132]	; (1727c <bt_le_adv_resume+0x8c>)
   171f6:	f010 f838 	bl	2726a <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   171fa:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   171fe:	d03a      	beq.n	17276 <bt_le_adv_resume+0x86>
   17200:	4620      	mov	r0, r4
   17202:	f010 f832 	bl	2726a <atomic_get>
   17206:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   17208:	f3c0 1580 	ubfx	r5, r0, #6, #1
   1720c:	d433      	bmi.n	17276 <bt_le_adv_resume+0x86>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1720e:	4620      	mov	r0, r4
   17210:	f010 f82b 	bl	2726a <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   17214:	0582      	lsls	r2, r0, #22
   17216:	d52e      	bpl.n	17276 <bt_le_adv_resume+0x86>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   17218:	a901      	add	r1, sp, #4
   1721a:	f1a4 0010 	sub.w	r0, r4, #16
   1721e:	f7ff ff99 	bl	17154 <le_adv_start_add_conn>
	if (err) {
   17222:	bb40      	cbnz	r0, 17276 <bt_le_adv_resume+0x86>
   17224:	4620      	mov	r0, r4
   17226:	f010 f820 	bl	2726a <atomic_get>
		return;
	}

	BT_DBG("Resuming connectable advertising");

	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1722a:	04c3      	lsls	r3, r0, #19
   1722c:	d403      	bmi.n	17236 <bt_le_adv_resume+0x46>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
   1722e:	f1a4 0010 	sub.w	r0, r4, #16
   17232:	f010 f807 	bl	27244 <bt_id_set_adv_private_addr>
	return bt_le_adv_set_enable_legacy(adv, enable);
   17236:	4812      	ldr	r0, [pc, #72]	; (17280 <bt_le_adv_resume+0x90>)
   17238:	2101      	movs	r1, #1
   1723a:	f010 f82b 	bl	27294 <bt_le_adv_set_enable_legacy>
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
   1723e:	b150      	cbz	r0, 17256 <bt_le_adv_resume+0x66>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17240:	9801      	ldr	r0, [sp, #4]
   17242:	2100      	movs	r1, #0
   17244:	f000 fb30 	bl	178a8 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17248:	480c      	ldr	r0, [pc, #48]	; (1727c <bt_le_adv_resume+0x8c>)
   1724a:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1724e:	f010 f812 	bl	27276 <atomic_and>
	return (old & mask) != 0;
   17252:	f3c0 3540 	ubfx	r5, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   17256:	9801      	ldr	r0, [sp, #4]
   17258:	f010 f87f 	bl	2735a <bt_conn_unref>
	if (persist_paused) {
   1725c:	b15d      	cbz	r5, 17276 <bt_le_adv_resume+0x86>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1725e:	f3bf 8f5b 	dmb	ish
   17262:	e854 3f00 	ldrex	r3, [r4]
   17266:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1726a:	e844 3200 	strex	r2, r3, [r4]
   1726e:	2a00      	cmp	r2, #0
   17270:	d1f7      	bne.n	17262 <bt_le_adv_resume+0x72>
   17272:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   17276:	b003      	add	sp, #12
   17278:	bd30      	pop	{r4, r5, pc}
   1727a:	bf00      	nop
   1727c:	20000378 	.word	0x20000378
   17280:	20000368 	.word	0x20000368

00017284 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   17284:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   17286:	4904      	ldr	r1, [pc, #16]	; (17298 <bt_pub_key_is_debug+0x14>)
   17288:	2240      	movs	r2, #64	; 0x40
   1728a:	f00f fd1c 	bl	26cc6 <memcmp>
}
   1728e:	fab0 f080 	clz	r0, r0
   17292:	0940      	lsrs	r0, r0, #5
   17294:	bd08      	pop	{r3, pc}
   17296:	bf00      	nop
   17298:	0002cf4d 	.word	0x0002cf4d

0001729c <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   1729c:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1729e:	4b43      	ldr	r3, [pc, #268]	; (173ac <bt_pub_key_gen+0x110>)
   172a0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   172a4:	f003 0306 	and.w	r3, r3, #6
   172a8:	2b06      	cmp	r3, #6
{
   172aa:	b087      	sub	sp, #28
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   172ac:	d00f      	beq.n	172ce <bt_pub_key_gen+0x32>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   172ae:	4b40      	ldr	r3, [pc, #256]	; (173b0 <bt_pub_key_gen+0x114>)
   172b0:	9305      	str	r3, [sp, #20]
   172b2:	2302      	movs	r3, #2
   172b4:	9304      	str	r3, [sp, #16]
   172b6:	483f      	ldr	r0, [pc, #252]	; (173b4 <bt_pub_key_gen+0x118>)
   172b8:	2300      	movs	r3, #0
   172ba:	aa04      	add	r2, sp, #16
   172bc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -ENOTSUP;
   172c0:	f06f 0585 	mvn.w	r5, #133	; 0x85
   172c4:	f7fb ffc8 	bl	13258 <z_impl_z_log_msg_static_create>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   172c8:	4628      	mov	r0, r5
   172ca:	b007      	add	sp, #28
   172cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   172ce:	2800      	cmp	r0, #0
   172d0:	d069      	beq.n	173a6 <bt_pub_key_gen+0x10a>
	return list->head;
   172d2:	4e39      	ldr	r6, [pc, #228]	; (173b8 <bt_pub_key_gen+0x11c>)
   172d4:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   172d6:	b1a2      	cbz	r2, 17302 <bt_pub_key_gen+0x66>
   172d8:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   172da:	4298      	cmp	r0, r3
   172dc:	d10d      	bne.n	172fa <bt_pub_key_gen+0x5e>
			BT_WARN("Callback already registered");
   172de:	4b37      	ldr	r3, [pc, #220]	; (173bc <bt_pub_key_gen+0x120>)
   172e0:	9305      	str	r3, [sp, #20]
   172e2:	2302      	movs	r3, #2
   172e4:	9304      	str	r3, [sp, #16]
   172e6:	4833      	ldr	r0, [pc, #204]	; (173b4 <bt_pub_key_gen+0x118>)
   172e8:	2300      	movs	r3, #0
   172ea:	aa04      	add	r2, sp, #16
   172ec:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   172f0:	f7fb ffb2 	bl	13258 <z_impl_z_log_msg_static_create>
			return -EALREADY;
   172f4:	f06f 0577 	mvn.w	r5, #119	; 0x77
   172f8:	e7e6      	b.n	172c8 <bt_pub_key_gen+0x2c>
	return node->next;
   172fa:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   172fc:	b10b      	cbz	r3, 17302 <bt_pub_key_gen+0x66>
   172fe:	3b04      	subs	r3, #4
   17300:	e7eb      	b.n	172da <bt_pub_key_gen+0x3e>
	parent->next = child;
   17302:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   17304:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   17306:	1d03      	adds	r3, r0, #4
	list->head = node;
   17308:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1730a:	b902      	cbnz	r2, 1730e <bt_pub_key_gen+0x72>
	list->tail = node;
   1730c:	6073      	str	r3, [r6, #4]
   1730e:	4c2c      	ldr	r4, [pc, #176]	; (173c0 <bt_pub_key_gen+0x124>)
   17310:	f3bf 8f5b 	dmb	ish
   17314:	e854 7f00 	ldrex	r7, [r4]
   17318:	f047 0320 	orr.w	r3, r7, #32
   1731c:	e844 3200 	strex	r2, r3, [r4]
   17320:	2a00      	cmp	r2, #0
   17322:	d1f7      	bne.n	17314 <bt_pub_key_gen+0x78>
   17324:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   17328:	f017 0720 	ands.w	r7, r7, #32
   1732c:	d001      	beq.n	17332 <bt_pub_key_gen+0x96>
		return 0;
   1732e:	2500      	movs	r5, #0
   17330:	e7ca      	b.n	172c8 <bt_pub_key_gen+0x2c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17332:	f3bf 8f5b 	dmb	ish
   17336:	e854 3f00 	ldrex	r3, [r4]
   1733a:	f023 0310 	bic.w	r3, r3, #16
   1733e:	e844 3200 	strex	r2, r3, [r4]
   17342:	2a00      	cmp	r2, #0
   17344:	d1f7      	bne.n	17336 <bt_pub_key_gen+0x9a>
   17346:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   1734a:	463a      	mov	r2, r7
   1734c:	4639      	mov	r1, r7
   1734e:	f242 0025 	movw	r0, #8229	; 0x2025
   17352:	f7fe fc07 	bl	15b64 <bt_hci_cmd_send_sync>
	if (err) {
   17356:	4605      	mov	r5, r0
   17358:	2800      	cmp	r0, #0
   1735a:	d0e8      	beq.n	1732e <bt_pub_key_gen+0x92>
		BT_ERR("Sending LE P256 Public Key command failed");
   1735c:	4b19      	ldr	r3, [pc, #100]	; (173c4 <bt_pub_key_gen+0x128>)
   1735e:	9305      	str	r3, [sp, #20]
   17360:	2302      	movs	r3, #2
   17362:	9304      	str	r3, [sp, #16]
   17364:	4813      	ldr	r0, [pc, #76]	; (173b4 <bt_pub_key_gen+0x118>)
   17366:	463b      	mov	r3, r7
   17368:	aa04      	add	r2, sp, #16
   1736a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1736e:	f7fb ff73 	bl	13258 <z_impl_z_log_msg_static_create>
   17372:	f3bf 8f5b 	dmb	ish
   17376:	e854 3f00 	ldrex	r3, [r4]
   1737a:	f023 0320 	bic.w	r3, r3, #32
   1737e:	e844 3200 	strex	r2, r3, [r4]
   17382:	2a00      	cmp	r2, #0
   17384:	d1f7      	bne.n	17376 <bt_pub_key_gen+0xda>
   17386:	f3bf 8f5b 	dmb	ish
	return list->head;
   1738a:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1738c:	b13c      	cbz	r4, 1739e <bt_pub_key_gen+0x102>
			if (cb->func) {
   1738e:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17392:	3c04      	subs	r4, #4
			if (cb->func) {
   17394:	b10b      	cbz	r3, 1739a <bt_pub_key_gen+0xfe>
				cb->func(NULL);
   17396:	2000      	movs	r0, #0
   17398:	4798      	blx	r3
	return node->next;
   1739a:	6864      	ldr	r4, [r4, #4]
   1739c:	e7f6      	b.n	1738c <bt_pub_key_gen+0xf0>
	list->head = NULL;
   1739e:	2300      	movs	r3, #0
	list->tail = NULL;
   173a0:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   173a4:	e790      	b.n	172c8 <bt_pub_key_gen+0x2c>
		return -EINVAL;
   173a6:	f06f 0515 	mvn.w	r5, #21
   173aa:	e78d      	b.n	172c8 <bt_pub_key_gen+0x2c>
   173ac:	20000350 	.word	0x20000350
   173b0:	0002cebf 	.word	0x0002cebf
   173b4:	0002abf8 	.word	0x0002abf8
   173b8:	20002ad4 	.word	0x20002ad4
   173bc:	0002cede 	.word	0x0002cede
   173c0:	2000041c 	.word	0x2000041c
   173c4:	0002cefa 	.word	0x0002cefa

000173c8 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   173c8:	4b05      	ldr	r3, [pc, #20]	; (173e0 <bt_pub_key_get+0x18>)
   173ca:	f3bf 8f5b 	dmb	ish
   173ce:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   173d0:	4804      	ldr	r0, [pc, #16]	; (173e4 <bt_pub_key_get+0x1c>)
   173d2:	f3bf 8f5b 	dmb	ish
		return pub_key;
   173d6:	f013 0f10 	tst.w	r3, #16
}
   173da:	bf08      	it	eq
   173dc:	2000      	moveq	r0, #0
   173de:	4770      	bx	lr
   173e0:	2000041c 	.word	0x2000041c
   173e4:	20003b6a 	.word	0x20003b6a

000173e8 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   173e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;

	if (dh_key_cb == cb) {
   173ec:	4d28      	ldr	r5, [pc, #160]	; (17490 <bt_dh_key_gen+0xa8>)
   173ee:	682b      	ldr	r3, [r5, #0]
   173f0:	428b      	cmp	r3, r1
{
   173f2:	af00      	add	r7, sp, #0
   173f4:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   173f6:	d045      	beq.n	17484 <bt_dh_key_gen+0x9c>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   173f8:	b12b      	cbz	r3, 17406 <bt_dh_key_gen+0x1e>
		return -EBUSY;
   173fa:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   173fe:	4620      	mov	r0, r4
   17400:	46bd      	mov	sp, r7
   17402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17406:	4b23      	ldr	r3, [pc, #140]	; (17494 <bt_dh_key_gen+0xac>)
   17408:	f3bf 8f5b 	dmb	ish
   1740c:	681a      	ldr	r2, [r3, #0]
   1740e:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   17412:	f3c2 1840 	ubfx	r8, r2, #5, #1
   17416:	0692      	lsls	r2, r2, #26
   17418:	d4ef      	bmi.n	173fa <bt_dh_key_gen+0x12>
   1741a:	f3bf 8f5b 	dmb	ish
   1741e:	681b      	ldr	r3, [r3, #0]
   17420:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   17424:	06db      	lsls	r3, r3, #27
   17426:	d530      	bpl.n	1748a <bt_dh_key_gen+0xa2>
	dh_key_cb = cb;
   17428:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   1742a:	f242 0026 	movw	r0, #8230	; 0x2026
   1742e:	2140      	movs	r1, #64	; 0x40
   17430:	f7fe fb5e 	bl	15af0 <bt_hci_cmd_create>
	if (!buf) {
   17434:	4604      	mov	r4, r0
   17436:	b310      	cbz	r0, 1747e <bt_dh_key_gen+0x96>
   17438:	2140      	movs	r1, #64	; 0x40
   1743a:	3008      	adds	r0, #8
   1743c:	f011 fe4a 	bl	290d4 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   17440:	2240      	movs	r2, #64	; 0x40
   17442:	4631      	mov	r1, r6
   17444:	f00f fc68 	bl	26d18 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   17448:	4621      	mov	r1, r4
   1744a:	4642      	mov	r2, r8
   1744c:	f242 0026 	movw	r0, #8230	; 0x2026
   17450:	f7fe fb88 	bl	15b64 <bt_hci_cmd_send_sync>
	if (err) {
   17454:	4604      	mov	r4, r0
   17456:	2800      	cmp	r0, #0
   17458:	d0d1      	beq.n	173fe <bt_dh_key_gen+0x16>
		dh_key_cb = NULL;
   1745a:	2300      	movs	r3, #0
   1745c:	602b      	str	r3, [r5, #0]
		BT_WARN("Failed to generate DHKey (err %d)", err);
   1745e:	466d      	mov	r5, sp
   17460:	b088      	sub	sp, #32
   17462:	466a      	mov	r2, sp
   17464:	490c      	ldr	r1, [pc, #48]	; (17498 <bt_dh_key_gen+0xb0>)
   17466:	e9c2 1405 	strd	r1, r4, [r2, #20]
   1746a:	2103      	movs	r1, #3
   1746c:	f842 1f10 	str.w	r1, [r2, #16]!
   17470:	480a      	ldr	r0, [pc, #40]	; (1749c <bt_dh_key_gen+0xb4>)
   17472:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17476:	f7fb feef 	bl	13258 <z_impl_z_log_msg_static_create>
   1747a:	46ad      	mov	sp, r5
		return err;
   1747c:	e7bf      	b.n	173fe <bt_dh_key_gen+0x16>
		return -ENOBUFS;
   1747e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   17482:	e7ea      	b.n	1745a <bt_dh_key_gen+0x72>
		return -EALREADY;
   17484:	f06f 0477 	mvn.w	r4, #119	; 0x77
   17488:	e7b9      	b.n	173fe <bt_dh_key_gen+0x16>
		return -EADDRNOTAVAIL;
   1748a:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   1748e:	e7b6      	b.n	173fe <bt_dh_key_gen+0x16>
   17490:	20002ad0 	.word	0x20002ad0
   17494:	2000041c 	.word	0x2000041c
   17498:	0002cf24 	.word	0x0002cf24
   1749c:	0002abf8 	.word	0x0002abf8

000174a0 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   174a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   174a2:	4c1b      	ldr	r4, [pc, #108]	; (17510 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   174a4:	6886      	ldr	r6, [r0, #8]
   174a6:	f3bf 8f5b 	dmb	ish
   174aa:	e854 3f00 	ldrex	r3, [r4]
   174ae:	f023 0320 	bic.w	r3, r3, #32
   174b2:	e844 3200 	strex	r2, r3, [r4]
   174b6:	2a00      	cmp	r2, #0
   174b8:	d1f7      	bne.n	174aa <bt_hci_evt_le_pkey_complete+0xa>
   174ba:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   174be:	7833      	ldrb	r3, [r6, #0]
   174c0:	b983      	cbnz	r3, 174e4 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   174c2:	4814      	ldr	r0, [pc, #80]	; (17514 <bt_hci_evt_le_pkey_complete+0x74>)
   174c4:	2240      	movs	r2, #64	; 0x40
   174c6:	1c71      	adds	r1, r6, #1
   174c8:	f00f fc26 	bl	26d18 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   174cc:	f3bf 8f5b 	dmb	ish
   174d0:	e854 3f00 	ldrex	r3, [r4]
   174d4:	f043 0310 	orr.w	r3, r3, #16
   174d8:	e844 3200 	strex	r2, r3, [r4]
   174dc:	2a00      	cmp	r2, #0
   174de:	d1f7      	bne.n	174d0 <bt_hci_evt_le_pkey_complete+0x30>
   174e0:	f3bf 8f5b 	dmb	ish
	return list->head;
   174e4:	4d0c      	ldr	r5, [pc, #48]	; (17518 <bt_hci_evt_le_pkey_complete+0x78>)
   174e6:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   174e8:	b16c      	cbz	r4, 17506 <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   174ea:	4f0a      	ldr	r7, [pc, #40]	; (17514 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   174ec:	3c04      	subs	r4, #4
		if (cb->func) {
   174ee:	6823      	ldr	r3, [r4, #0]
   174f0:	b12b      	cbz	r3, 174fe <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   174f2:	7832      	ldrb	r2, [r6, #0]
   174f4:	2a00      	cmp	r2, #0
   174f6:	bf0c      	ite	eq
   174f8:	4638      	moveq	r0, r7
   174fa:	2000      	movne	r0, #0
   174fc:	4798      	blx	r3
	return node->next;
   174fe:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17500:	b10c      	cbz	r4, 17506 <bt_hci_evt_le_pkey_complete+0x66>
   17502:	3c04      	subs	r4, #4
   17504:	e7f3      	b.n	174ee <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   17506:	2300      	movs	r3, #0
	list->tail = NULL;
   17508:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   1750c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1750e:	bf00      	nop
   17510:	2000041c 	.word	0x2000041c
   17514:	20003b6a 	.word	0x20003b6a
   17518:	20002ad4 	.word	0x20002ad4

0001751c <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   1751c:	4905      	ldr	r1, [pc, #20]	; (17534 <bt_hci_evt_le_dhkey_complete+0x18>)
   1751e:	680b      	ldr	r3, [r1, #0]
   17520:	b133      	cbz	r3, 17530 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   17522:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   17524:	2000      	movs	r0, #0
   17526:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   17528:	7811      	ldrb	r1, [r2, #0]
   1752a:	b901      	cbnz	r1, 1752e <bt_hci_evt_le_dhkey_complete+0x12>
   1752c:	1c50      	adds	r0, r2, #1
   1752e:	4718      	bx	r3
	}
}
   17530:	4770      	bx	lr
   17532:	bf00      	nop
   17534:	20002ad0 	.word	0x20002ad0

00017538 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   17538:	4b0b      	ldr	r3, [pc, #44]	; (17568 <notify_connected+0x30>)
{
   1753a:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   1753c:	681d      	ldr	r5, [r3, #0]
{
   1753e:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   17540:	b925      	cbnz	r5, 1754c <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17542:	4d0a      	ldr	r5, [pc, #40]	; (1756c <notify_connected+0x34>)
   17544:	4e0a      	ldr	r6, [pc, #40]	; (17570 <notify_connected+0x38>)
   17546:	42b5      	cmp	r5, r6
   17548:	d307      	bcc.n	1755a <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   1754a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   1754c:	682b      	ldr	r3, [r5, #0]
   1754e:	b113      	cbz	r3, 17556 <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   17550:	7b21      	ldrb	r1, [r4, #12]
   17552:	4620      	mov	r0, r4
   17554:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17556:	69ad      	ldr	r5, [r5, #24]
   17558:	e7f2      	b.n	17540 <notify_connected+0x8>
		if (cb->connected) {
   1755a:	682b      	ldr	r3, [r5, #0]
   1755c:	b113      	cbz	r3, 17564 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   1755e:	7b21      	ldrb	r1, [r4, #12]
   17560:	4620      	mov	r0, r4
   17562:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17564:	351c      	adds	r5, #28
   17566:	e7ee      	b.n	17546 <notify_connected+0xe>
   17568:	20002ae8 	.word	0x20002ae8
   1756c:	0002ab7c 	.word	0x0002ab7c
   17570:	0002ab98 	.word	0x0002ab98

00017574 <bt_conn_create_pdu_timeout.part.0>:
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
   17574:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_WARN("Unable to allocate buffer within timeout");
   17576:	4b07      	ldr	r3, [pc, #28]	; (17594 <bt_conn_create_pdu_timeout.part.0+0x20>)
   17578:	9305      	str	r3, [sp, #20]
   1757a:	4807      	ldr	r0, [pc, #28]	; (17598 <bt_conn_create_pdu_timeout.part.0+0x24>)
   1757c:	2302      	movs	r3, #2
   1757e:	aa04      	add	r2, sp, #16
   17580:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17584:	9304      	str	r3, [sp, #16]
   17586:	f00f febe 	bl	27306 <z_log_msg_static_create.constprop.0>
}
   1758a:	2000      	movs	r0, #0
   1758c:	b007      	add	sp, #28
   1758e:	f85d fb04 	ldr.w	pc, [sp], #4
   17592:	bf00      	nop
   17594:	0002cf8d 	.word	0x0002cf8d
   17598:	0002abe8 	.word	0x0002abe8

0001759c <tx_notify>:
{
   1759c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   175a0:	f8df 804c 	ldr.w	r8, [pc, #76]	; 175f0 <tx_notify+0x54>
{
   175a4:	4604      	mov	r4, r0
	tx->cb = NULL;
   175a6:	2700      	movs	r7, #0
	__asm__ volatile(
   175a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   175ac:	f3ef 8211 	mrs	r2, BASEPRI
   175b0:	f383 8812 	msr	BASEPRI_MAX, r3
   175b4:	f3bf 8f6f 	isb	sy
	return list->head;
   175b8:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   175ba:	b129      	cbz	r1, 175c8 <tx_notify+0x2c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   175bc:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   175be:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   175c0:	6223      	str	r3, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   175c2:	4281      	cmp	r1, r0
	list->tail = node;
   175c4:	bf08      	it	eq
   175c6:	6263      	streq	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   175c8:	f382 8811 	msr	BASEPRI, r2
   175cc:	f3bf 8f6f 	isb	sy
		if (!tx) {
   175d0:	b161      	cbz	r1, 175ec <tx_notify+0x50>
		user_data = tx->user_data;
   175d2:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   175d6:	60cf      	str	r7, [r1, #12]
	tx->user_data = NULL;
   175d8:	e9c1 7701 	strd	r7, r7, [r1, #4]
	k_fifo_put(&free_tx, tx);
   175dc:	4640      	mov	r0, r8
   175de:	f012 fc77 	bl	29ed0 <k_queue_append>
		cb(conn, user_data, 0);
   175e2:	2200      	movs	r2, #0
   175e4:	4631      	mov	r1, r6
   175e6:	4620      	mov	r0, r4
   175e8:	47a8      	blx	r5
	while (1) {
   175ea:	e7dd      	b.n	175a8 <tx_notify+0xc>
}
   175ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   175f0:	20000a50 	.word	0x20000a50

000175f4 <conn_tx_destroy>:
{
   175f4:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
   175f6:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   175fa:	2200      	movs	r2, #0
	tx->user_data = NULL;
   175fc:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
   17600:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
   17602:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   17604:	4805      	ldr	r0, [pc, #20]	; (1761c <conn_tx_destroy+0x28>)
   17606:	f012 fc63 	bl	29ed0 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   1760a:	4631      	mov	r1, r6
   1760c:	4620      	mov	r0, r4
   1760e:	462b      	mov	r3, r5
   17610:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   17614:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   17618:	4718      	bx	r3
   1761a:	bf00      	nop
   1761c:	20000a50 	.word	0x20000a50

00017620 <bt_conn_get_pkts>:
}
   17620:	4800      	ldr	r0, [pc, #0]	; (17624 <bt_conn_get_pkts+0x4>)
   17622:	4770      	bx	lr
   17624:	20000450 	.word	0x20000450

00017628 <bt_conn_new>:
{
   17628:	b538      	push	{r3, r4, r5, lr}
   1762a:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1762c:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1762e:	2501      	movs	r5, #1
   17630:	428b      	cmp	r3, r1
   17632:	d102      	bne.n	1763a <bt_conn_new+0x12>
		return NULL;
   17634:	2400      	movs	r4, #0
}
   17636:	4620      	mov	r0, r4
   17638:	bd38      	pop	{r3, r4, r5, pc}
   1763a:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1763e:	f3bf 8f5b 	dmb	ish
   17642:	e852 0f00 	ldrex	r0, [r2]
   17646:	2800      	cmp	r0, #0
   17648:	d104      	bne.n	17654 <bt_conn_new+0x2c>
   1764a:	e842 5c00 	strex	ip, r5, [r2]
   1764e:	f1bc 0f00 	cmp.w	ip, #0
   17652:	d1f6      	bne.n	17642 <bt_conn_new+0x1a>
   17654:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   17658:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1765c:	d002      	beq.n	17664 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   1765e:	3301      	adds	r3, #1
   17660:	4604      	mov	r4, r0
   17662:	e7e5      	b.n	17630 <bt_conn_new+0x8>
	if (!conn) {
   17664:	2c00      	cmp	r4, #0
   17666:	d0e6      	beq.n	17636 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   17668:	22b8      	movs	r2, #184	; 0xb8
   1766a:	2100      	movs	r1, #0
   1766c:	4620      	mov	r0, r4
   1766e:	f00f fb5e 	bl	26d2e <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   17672:	f104 0058 	add.w	r0, r4, #88	; 0x58
   17676:	4904      	ldr	r1, [pc, #16]	; (17688 <bt_conn_new+0x60>)
   17678:	f012 fd3f 	bl	2a0fa <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1767c:	4903      	ldr	r1, [pc, #12]	; (1768c <bt_conn_new+0x64>)
   1767e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   17682:	f012 fcf6 	bl	2a072 <k_work_init>
	return conn;
   17686:	e7d6      	b.n	17636 <bt_conn_new+0xe>
   17688:	00017e09 	.word	0x00017e09
   1768c:	0002730d 	.word	0x0002730d

00017690 <bt_conn_recv>:
{
   17690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17694:	b086      	sub	sp, #24
   17696:	4616      	mov	r6, r2
   17698:	af00      	add	r7, sp, #0
   1769a:	4604      	mov	r4, r0
   1769c:	460d      	mov	r5, r1
	tx_notify(conn);
   1769e:	f7ff ff7d 	bl	1759c <tx_notify>
	switch (flags) {
   176a2:	2e01      	cmp	r6, #1
   176a4:	d030      	beq.n	17708 <bt_conn_recv+0x78>
   176a6:	2e02      	cmp	r6, #2
   176a8:	d16a      	bne.n	17780 <bt_conn_recv+0xf0>
		if (conn->rx) {
   176aa:	6923      	ldr	r3, [r4, #16]
   176ac:	b163      	cbz	r3, 176c8 <bt_conn_recv+0x38>
			BT_ERR("Unexpected first L2CAP frame");
   176ae:	4b40      	ldr	r3, [pc, #256]	; (177b0 <bt_conn_recv+0x120>)
   176b0:	4840      	ldr	r0, [pc, #256]	; (177b4 <bt_conn_recv+0x124>)
   176b2:	f107 0210 	add.w	r2, r7, #16
   176b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   176ba:	e9c7 6304 	strd	r6, r3, [r7, #16]
   176be:	f00f fe22 	bl	27306 <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   176c2:	4620      	mov	r0, r4
   176c4:	f00f fe25 	bl	27312 <bt_conn_reset_rx_state>
		conn->rx = buf;
   176c8:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   176ca:	6921      	ldr	r1, [r4, #16]
   176cc:	8988      	ldrh	r0, [r1, #12]
   176ce:	2801      	cmp	r0, #1
   176d0:	d930      	bls.n	17734 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   176d2:	688b      	ldr	r3, [r1, #8]
   176d4:	881b      	ldrh	r3, [r3, #0]
   176d6:	3304      	adds	r3, #4
   176d8:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   176da:	4298      	cmp	r0, r3
   176dc:	d32a      	bcc.n	17734 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   176de:	d95f      	bls.n	177a0 <bt_conn_recv+0x110>
		BT_ERR("ACL len mismatch (%u > %u)",
   176e0:	466d      	mov	r5, sp
   176e2:	b088      	sub	sp, #32
   176e4:	466a      	mov	r2, sp
   176e6:	4934      	ldr	r1, [pc, #208]	; (177b8 <bt_conn_recv+0x128>)
   176e8:	61d3      	str	r3, [r2, #28]
   176ea:	2304      	movs	r3, #4
   176ec:	e9c2 1005 	strd	r1, r0, [r2, #20]
   176f0:	f842 3f10 	str.w	r3, [r2, #16]!
   176f4:	482f      	ldr	r0, [pc, #188]	; (177b4 <bt_conn_recv+0x124>)
   176f6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   176fa:	f00f fe04 	bl	27306 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   176fe:	4620      	mov	r0, r4
   17700:	46ad      	mov	sp, r5
   17702:	f00f fe06 	bl	27312 <bt_conn_reset_rx_state>
		return;
   17706:	e015      	b.n	17734 <bt_conn_recv+0xa4>
		if (!conn->rx) {
   17708:	6920      	ldr	r0, [r4, #16]
   1770a:	b970      	cbnz	r0, 1772a <bt_conn_recv+0x9a>
			BT_ERR("Unexpected L2CAP continuation");
   1770c:	4b2b      	ldr	r3, [pc, #172]	; (177bc <bt_conn_recv+0x12c>)
   1770e:	617b      	str	r3, [r7, #20]
   17710:	4828      	ldr	r0, [pc, #160]	; (177b4 <bt_conn_recv+0x124>)
   17712:	2302      	movs	r3, #2
   17714:	f107 0210 	add.w	r2, r7, #16
   17718:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1771c:	613b      	str	r3, [r7, #16]
   1771e:	f00f fdf2 	bl	27306 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   17722:	4620      	mov	r0, r4
   17724:	f00f fdf5 	bl	27312 <bt_conn_reset_rx_state>
   17728:	e001      	b.n	1772e <bt_conn_recv+0x9e>
		if (!buf->len) {
   1772a:	89ae      	ldrh	r6, [r5, #12]
   1772c:	b936      	cbnz	r6, 1773c <bt_conn_recv+0xac>
		net_buf_unref(buf);
   1772e:	4628      	mov	r0, r5
   17730:	f005 fc7a 	bl	1d028 <net_buf_unref>
}
   17734:	3718      	adds	r7, #24
   17736:	46bd      	mov	sp, r7
   17738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1773c:	3008      	adds	r0, #8
   1773e:	f011 fd0c 	bl	2915a <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   17742:	4286      	cmp	r6, r0
   17744:	d912      	bls.n	1776c <bt_conn_recv+0xdc>
			BT_ERR("Not enough buffer space for L2CAP data");
   17746:	4b1e      	ldr	r3, [pc, #120]	; (177c0 <bt_conn_recv+0x130>)
   17748:	481a      	ldr	r0, [pc, #104]	; (177b4 <bt_conn_recv+0x124>)
   1774a:	617b      	str	r3, [r7, #20]
   1774c:	f107 0210 	add.w	r2, r7, #16
   17750:	2302      	movs	r3, #2
   17752:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17756:	613b      	str	r3, [r7, #16]
   17758:	f00f fdd5 	bl	27306 <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   1775c:	2200      	movs	r2, #0
   1775e:	6921      	ldr	r1, [r4, #16]
   17760:	4620      	mov	r0, r4
   17762:	f000 fcd5 	bl	18110 <bt_l2cap_recv>
			conn->rx = NULL;
   17766:	2300      	movs	r3, #0
   17768:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   1776a:	e7e0      	b.n	1772e <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1776c:	6920      	ldr	r0, [r4, #16]
   1776e:	89aa      	ldrh	r2, [r5, #12]
   17770:	68a9      	ldr	r1, [r5, #8]
   17772:	3008      	adds	r0, #8
   17774:	f011 fcb4 	bl	290e0 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   17778:	4628      	mov	r0, r5
   1777a:	f005 fc55 	bl	1d028 <net_buf_unref>
		break;
   1777e:	e7a4      	b.n	176ca <bt_conn_recv+0x3a>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   17780:	46e8      	mov	r8, sp
   17782:	b088      	sub	sp, #32
   17784:	466a      	mov	r2, sp
   17786:	4b0f      	ldr	r3, [pc, #60]	; (177c4 <bt_conn_recv+0x134>)
   17788:	480a      	ldr	r0, [pc, #40]	; (177b4 <bt_conn_recv+0x124>)
	switch (flags) {
   1778a:	e9c2 3605 	strd	r3, r6, [r2, #20]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   1778e:	2303      	movs	r3, #3
   17790:	f842 3f10 	str.w	r3, [r2, #16]!
   17794:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17798:	f00f fdb5 	bl	27306 <z_log_msg_static_create.constprop.0>
   1779c:	46c5      	mov	sp, r8
   1779e:	e7c0      	b.n	17722 <bt_conn_recv+0x92>
	conn->rx = NULL;
   177a0:	2300      	movs	r3, #0
   177a2:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   177a4:	2201      	movs	r2, #1
   177a6:	4620      	mov	r0, r4
   177a8:	f000 fcb2 	bl	18110 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   177ac:	e7c2      	b.n	17734 <bt_conn_recv+0xa4>
   177ae:	bf00      	nop
   177b0:	0002cfb6 	.word	0x0002cfb6
   177b4:	0002abe8 	.word	0x0002abe8
   177b8:	0002d036 	.word	0x0002d036
   177bc:	0002cfd3 	.word	0x0002cfd3
   177c0:	0002cff1 	.word	0x0002cff1
   177c4:	0002d018 	.word	0x0002d018

000177c8 <bt_conn_send_cb>:
{
   177c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   177cc:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   177ce:	7b43      	ldrb	r3, [r0, #13]
   177d0:	2b07      	cmp	r3, #7
{
   177d2:	b086      	sub	sp, #24
   177d4:	4605      	mov	r5, r0
   177d6:	460e      	mov	r6, r1
   177d8:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   177da:	d00c      	beq.n	177f6 <bt_conn_send_cb+0x2e>
		BT_ERR("not connected!");
   177dc:	4b28      	ldr	r3, [pc, #160]	; (17880 <bt_conn_send_cb+0xb8>)
   177de:	9305      	str	r3, [sp, #20]
   177e0:	4828      	ldr	r0, [pc, #160]	; (17884 <bt_conn_send_cb+0xbc>)
   177e2:	2302      	movs	r3, #2
   177e4:	aa04      	add	r2, sp, #16
   177e6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   177ea:	9304      	str	r3, [sp, #16]
   177ec:	f00f fd8b 	bl	27306 <z_log_msg_static_create.constprop.0>
			return -ENOTCONN;
   177f0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   177f4:	e01d      	b.n	17832 <bt_conn_send_cb+0x6a>
	if (cb) {
   177f6:	2a00      	cmp	r2, #0
   177f8:	d040      	beq.n	1787c <bt_conn_send_cb+0xb4>
	return z_impl_z_current_get();
   177fa:	f00a facb 	bl	21d94 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   177fe:	4b22      	ldr	r3, [pc, #136]	; (17888 <bt_conn_send_cb+0xc0>)
   17800:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   17802:	4822      	ldr	r0, [pc, #136]	; (1788c <bt_conn_send_cb+0xc4>)
   17804:	bf07      	ittee	eq
   17806:	2200      	moveq	r2, #0
   17808:	2300      	moveq	r3, #0
   1780a:	f04f 32ff 	movne.w	r2, #4294967295
   1780e:	f04f 33ff 	movne.w	r3, #4294967295
   17812:	f009 fd4f 	bl	212b4 <z_impl_k_queue_get>
   17816:	4604      	mov	r4, r0
		if (!tx) {
   17818:	b970      	cbnz	r0, 17838 <bt_conn_send_cb+0x70>
			BT_ERR("Unable to allocate TX context");
   1781a:	4b1d      	ldr	r3, [pc, #116]	; (17890 <bt_conn_send_cb+0xc8>)
   1781c:	4819      	ldr	r0, [pc, #100]	; (17884 <bt_conn_send_cb+0xbc>)
   1781e:	9305      	str	r3, [sp, #20]
   17820:	aa04      	add	r2, sp, #16
   17822:	2302      	movs	r3, #2
   17824:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17828:	9304      	str	r3, [sp, #16]
   1782a:	f00f fd6c 	bl	27306 <z_log_msg_static_create.constprop.0>
			return -ENOBUFS;
   1782e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   17832:	b006      	add	sp, #24
   17834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   17838:	7b6b      	ldrb	r3, [r5, #13]
   1783a:	2b07      	cmp	r3, #7
   1783c:	d012      	beq.n	17864 <bt_conn_send_cb+0x9c>
			BT_WARN("Disconnected while allocating context");
   1783e:	4b15      	ldr	r3, [pc, #84]	; (17894 <bt_conn_send_cb+0xcc>)
   17840:	9305      	str	r3, [sp, #20]
   17842:	4810      	ldr	r0, [pc, #64]	; (17884 <bt_conn_send_cb+0xbc>)
   17844:	2302      	movs	r3, #2
   17846:	aa04      	add	r2, sp, #16
   17848:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1784c:	9304      	str	r3, [sp, #16]
   1784e:	f00f fd5a 	bl	27306 <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   17852:	2300      	movs	r3, #0
	tx->user_data = NULL;
   17854:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   17858:	480c      	ldr	r0, [pc, #48]	; (1788c <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   1785a:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   1785c:	4621      	mov	r1, r4
   1785e:	f012 fb37 	bl	29ed0 <k_queue_append>
   17862:	e7c5      	b.n	177f0 <bt_conn_send_cb+0x28>
		tx->pending_no_cb = 0U;
   17864:	2300      	movs	r3, #0
		tx->user_data = user_data;
   17866:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   1786a:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1786c:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   1786e:	f105 0038 	add.w	r0, r5, #56	; 0x38
   17872:	4631      	mov	r1, r6
   17874:	f011 fbfb 	bl	2906e <net_buf_put>
	return 0;
   17878:	2000      	movs	r0, #0
   1787a:	e7da      	b.n	17832 <bt_conn_send_cb+0x6a>
		tx_data(buf)->tx = NULL;
   1787c:	614a      	str	r2, [r1, #20]
   1787e:	e7f6      	b.n	1786e <bt_conn_send_cb+0xa6>
   17880:	0002d051 	.word	0x0002d051
   17884:	0002abe8 	.word	0x0002abe8
   17888:	20002410 	.word	0x20002410
   1788c:	20000a50 	.word	0x20000a50
   17890:	0002d060 	.word	0x0002d060
   17894:	0002d07e 	.word	0x0002d07e

00017898 <bt_conn_lookup_handle>:
{
   17898:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1789a:	2101      	movs	r1, #1
   1789c:	4801      	ldr	r0, [pc, #4]	; (178a4 <bt_conn_lookup_handle+0xc>)
   1789e:	f00f bd76 	b.w	2738e <conn_lookup_handle>
   178a2:	bf00      	nop
   178a4:	20001e58 	.word	0x20001e58

000178a8 <bt_conn_set_state>:
{
   178a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
   178aa:	7b46      	ldrb	r6, [r0, #13]
   178ac:	428e      	cmp	r6, r1
{
   178ae:	af00      	add	r7, sp, #0
   178b0:	4604      	mov	r4, r0
   178b2:	460d      	mov	r5, r1
	if (conn->state == state) {
   178b4:	d117      	bne.n	178e6 <bt_conn_set_state+0x3e>
	switch (state) {
   178b6:	2e08      	cmp	r6, #8
   178b8:	bf96      	itet	ls
   178ba:	4b69      	ldrls	r3, [pc, #420]	; (17a60 <bt_conn_set_state+0x1b8>)
	if (conn->state == state) {
   178bc:	4b69      	ldrhi	r3, [pc, #420]	; (17a64 <bt_conn_set_state+0x1bc>)
   178be:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   178c2:	466c      	mov	r4, sp
   178c4:	b088      	sub	sp, #32
   178c6:	466a      	mov	r2, sp
   178c8:	4967      	ldr	r1, [pc, #412]	; (17a68 <bt_conn_set_state+0x1c0>)
   178ca:	e9c2 1305 	strd	r1, r3, [r2, #20]
   178ce:	2302      	movs	r3, #2
   178d0:	7713      	strb	r3, [r2, #28]
   178d2:	4b66      	ldr	r3, [pc, #408]	; (17a6c <bt_conn_set_state+0x1c4>)
   178d4:	f842 3f10 	str.w	r3, [r2, #16]!
   178d8:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
		BT_WARN("no valid (%u) state was set", state);
   178dc:	4864      	ldr	r0, [pc, #400]	; (17a70 <bt_conn_set_state+0x1c8>)
   178de:	f00f fd12 	bl	27306 <z_log_msg_static_create.constprop.0>
   178e2:	46a5      	mov	sp, r4
   178e4:	e040      	b.n	17968 <bt_conn_set_state+0xc0>
	conn->state = state;
   178e6:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   178e8:	b926      	cbnz	r6, 178f4 <bt_conn_set_state+0x4c>
		if (conn->type != BT_CONN_TYPE_ISO) {
   178ea:	7883      	ldrb	r3, [r0, #2]
   178ec:	2b08      	cmp	r3, #8
   178ee:	d001      	beq.n	178f4 <bt_conn_set_state+0x4c>
			bt_conn_ref(conn);
   178f0:	f00f fd18 	bl	27324 <bt_conn_ref>
	switch (conn->state) {
   178f4:	7b63      	ldrb	r3, [r4, #13]
   178f6:	2b08      	cmp	r3, #8
   178f8:	f200 80ad 	bhi.w	17a56 <bt_conn_set_state+0x1ae>
   178fc:	e8df f003 	tbb	[pc, r3]
   17900:	34340536 	.word	0x34340536
   17904:	1c343434 	.word	0x1c343434
   17908:	34          	.byte	0x34
   17909:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   1790a:	4d5a      	ldr	r5, [pc, #360]	; (17a74 <bt_conn_set_state+0x1cc>)
		tx->pending_no_cb = 0U;
   1790c:	2600      	movs	r6, #0
	__asm__ volatile(
   1790e:	f04f 0340 	mov.w	r3, #64	; 0x40
   17912:	f3ef 8211 	mrs	r2, BASEPRI
   17916:	f383 8812 	msr	BASEPRI_MAX, r3
   1791a:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   1791e:	69e3      	ldr	r3, [r4, #28]
   17920:	2b00      	cmp	r3, #0
   17922:	d077      	beq.n	17a14 <bt_conn_set_state+0x16c>
			conn->pending_no_cb--;
   17924:	3b01      	subs	r3, #1
   17926:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   17928:	f382 8811 	msr	BASEPRI, r2
   1792c:	f3bf 8f6f 	isb	sy
   17930:	4628      	mov	r0, r5
   17932:	f009 fcf3 	bl	2131c <z_impl_k_sem_give>
}
   17936:	e7ea      	b.n	1790e <bt_conn_set_state+0x66>
		if (conn->type == BT_CONN_TYPE_SCO) {
   17938:	78a3      	ldrb	r3, [r4, #2]
   1793a:	2b04      	cmp	r3, #4
   1793c:	d014      	beq.n	17968 <bt_conn_set_state+0xc0>
	z_impl_k_queue_init(queue);
   1793e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   17942:	f012 fab9 	bl	29eb8 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   17946:	484c      	ldr	r0, [pc, #304]	; (17a78 <bt_conn_set_state+0x1d0>)
   17948:	2100      	movs	r1, #0
   1794a:	f00a fd07 	bl	2235c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1794e:	2300      	movs	r3, #0
	list->tail = NULL;
   17950:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17954:	78e3      	ldrb	r3, [r4, #3]
   17956:	2b01      	cmp	r3, #1
   17958:	d106      	bne.n	17968 <bt_conn_set_state+0xc0>
			k_work_schedule(&conn->deferred_work,
   1795a:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1795e:	2300      	movs	r3, #0
   17960:	f104 0058 	add.w	r0, r4, #88	; 0x58
   17964:	f009 fed0 	bl	21708 <k_work_schedule>
}
   17968:	46bd      	mov	sp, r7
   1796a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   1796c:	78a3      	ldrb	r3, [r4, #2]
   1796e:	2b04      	cmp	r3, #4
   17970:	d103      	bne.n	1797a <bt_conn_set_state+0xd2>
			bt_conn_unref(conn);
   17972:	4620      	mov	r0, r4
   17974:	f00f fcf1 	bl	2735a <bt_conn_unref>
			break;
   17978:	e7f6      	b.n	17968 <bt_conn_set_state+0xc0>
		switch (old_state) {
   1797a:	2e08      	cmp	r6, #8
   1797c:	d8f4      	bhi.n	17968 <bt_conn_set_state+0xc0>
   1797e:	a301      	add	r3, pc, #4	; (adr r3, 17984 <bt_conn_set_state+0xdc>)
   17980:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   17984:	000179fd 	.word	0x000179fd
   17988:	000179a9 	.word	0x000179a9
   1798c:	000179ef 	.word	0x000179ef
   17990:	00017973 	.word	0x00017973
   17994:	00017973 	.word	0x00017973
   17998:	000179ef 	.word	0x000179ef
   1799c:	000179ef 	.word	0x000179ef
   179a0:	000179fd 	.word	0x000179fd
   179a4:	000179fd 	.word	0x000179fd
			tx_notify(conn);
   179a8:	4620      	mov	r0, r4
   179aa:	f7ff fdf7 	bl	1759c <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   179ae:	78a3      	ldrb	r3, [r4, #2]
   179b0:	2b01      	cmp	r3, #1
   179b2:	d10a      	bne.n	179ca <bt_conn_set_state+0x122>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   179b4:	f104 0558 	add.w	r5, r4, #88	; 0x58
   179b8:	4628      	mov	r0, r5
   179ba:	f012 fbaa 	bl	2a112 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   179be:	f010 0f0c 	tst.w	r0, #12
   179c2:	d002      	beq.n	179ca <bt_conn_set_state+0x122>
				k_work_cancel_delayable(&conn->deferred_work);
   179c4:	4628      	mov	r0, r5
   179c6:	f012 fba6 	bl	2a116 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   179ca:	f3bf 8f5b 	dmb	ish
   179ce:	3404      	adds	r4, #4
   179d0:	e854 3f00 	ldrex	r3, [r4]
   179d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   179d8:	e844 3200 	strex	r2, r3, [r4]
   179dc:	2a00      	cmp	r2, #0
   179de:	d1f7      	bne.n	179d0 <bt_conn_set_state+0x128>
   179e0:	f3bf 8f5b 	dmb	ish
   179e4:	2100      	movs	r1, #0
   179e6:	4824      	ldr	r0, [pc, #144]	; (17a78 <bt_conn_set_state+0x1d0>)
   179e8:	f00a fcb8 	bl	2235c <z_impl_k_poll_signal_raise>
   179ec:	e7bc      	b.n	17968 <bt_conn_set_state+0xc0>
			if (conn->err) {
   179ee:	7b23      	ldrb	r3, [r4, #12]
   179f0:	2b00      	cmp	r3, #0
   179f2:	d0be      	beq.n	17972 <bt_conn_set_state+0xca>
				notify_connected(conn);
   179f4:	4620      	mov	r0, r4
   179f6:	f7ff fd9f 	bl	17538 <notify_connected>
   179fa:	e7ba      	b.n	17972 <bt_conn_set_state+0xca>
			BT_WARN("Invalid (%u) old state", state);
   179fc:	466c      	mov	r4, sp
   179fe:	b088      	sub	sp, #32
   17a00:	466a      	mov	r2, sp
   17a02:	4b1e      	ldr	r3, [pc, #120]	; (17a7c <bt_conn_set_state+0x1d4>)
		BT_WARN("no valid (%u) state was set", state);
   17a04:	e9c2 3505 	strd	r3, r5, [r2, #20]
   17a08:	2303      	movs	r3, #3
   17a0a:	f842 3f10 	str.w	r3, [r2, #16]!
   17a0e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17a12:	e763      	b.n	178dc <bt_conn_set_state+0x34>
	return list->head;
   17a14:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   17a16:	b129      	cbz	r1, 17a24 <bt_conn_set_state+0x17c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17a18:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   17a1a:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   17a1c:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17a1e:	4281      	cmp	r1, r0
	list->tail = node;
   17a20:	bf08      	it	eq
   17a22:	61a3      	streq	r3, [r4, #24]
   17a24:	f382 8811 	msr	BASEPRI, r2
   17a28:	f3bf 8f6f 	isb	sy
		if (!node) {
   17a2c:	2900      	cmp	r1, #0
   17a2e:	d09b      	beq.n	17968 <bt_conn_set_state+0xc0>
	__asm__ volatile(
   17a30:	f04f 0240 	mov.w	r2, #64	; 0x40
   17a34:	f3ef 8311 	mrs	r3, BASEPRI
   17a38:	f382 8812 	msr	BASEPRI_MAX, r2
   17a3c:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   17a40:	68ca      	ldr	r2, [r1, #12]
   17a42:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   17a44:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   17a46:	f383 8811 	msr	BASEPRI, r3
   17a4a:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   17a4e:	4620      	mov	r0, r4
   17a50:	f7ff fdd0 	bl	175f4 <conn_tx_destroy>
   17a54:	e76c      	b.n	17930 <bt_conn_set_state+0x88>
		BT_WARN("no valid (%u) state was set", state);
   17a56:	466c      	mov	r4, sp
   17a58:	b088      	sub	sp, #32
   17a5a:	466a      	mov	r2, sp
   17a5c:	4b08      	ldr	r3, [pc, #32]	; (17a80 <bt_conn_set_state+0x1d8>)
   17a5e:	e7d1      	b.n	17a04 <bt_conn_set_state+0x15c>
   17a60:	0002b410 	.word	0x0002b410
   17a64:	0002d0a4 	.word	0x0002d0a4
   17a68:	0002d0ae 	.word	0x0002d0ae
   17a6c:	01000003 	.word	0x01000003
   17a70:	0002abe8 	.word	0x0002abe8
   17a74:	20000450 	.word	0x20000450
   17a78:	200005f8 	.word	0x200005f8
   17a7c:	0002d0bf 	.word	0x0002d0bf
   17a80:	0002d0d6 	.word	0x0002d0d6

00017a84 <bt_conn_index>:
		index = conn - acl_conns;
   17a84:	4b03      	ldr	r3, [pc, #12]	; (17a94 <bt_conn_index+0x10>)
   17a86:	1ac0      	subs	r0, r0, r3
   17a88:	4b03      	ldr	r3, [pc, #12]	; (17a98 <bt_conn_index+0x14>)
   17a8a:	1180      	asrs	r0, r0, #6
   17a8c:	4358      	muls	r0, r3
}
   17a8e:	b2c0      	uxtb	r0, r0
   17a90:	4770      	bx	lr
   17a92:	bf00      	nop
   17a94:	20001e58 	.word	0x20001e58
   17a98:	aaaaaaab 	.word	0xaaaaaaab

00017a9c <bt_conn_create_pdu_timeout>:
{
   17a9c:	b538      	push	{r3, r4, r5, lr}
   17a9e:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   17aa0:	4908      	ldr	r1, [pc, #32]	; (17ac4 <bt_conn_create_pdu_timeout+0x28>)
   17aa2:	2800      	cmp	r0, #0
   17aa4:	bf08      	it	eq
   17aa6:	4608      	moveq	r0, r1
   17aa8:	f011 fa6f 	bl	28f8a <net_buf_alloc_fixed>
	if (!buf) {
   17aac:	4604      	mov	r4, r0
   17aae:	b918      	cbnz	r0, 17ab8 <bt_conn_create_pdu_timeout+0x1c>
}
   17ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17ab4:	f7ff bd5e 	b.w	17574 <bt_conn_create_pdu_timeout.part.0>
	net_buf_simple_reserve(&buf->b, reserve);
   17ab8:	1d29      	adds	r1, r5, #4
   17aba:	3008      	adds	r0, #8
   17abc:	f011 fa8a 	bl	28fd4 <net_buf_simple_reserve>
   17ac0:	4620      	mov	r0, r4
   17ac2:	bd38      	pop	{r3, r4, r5, pc}
   17ac4:	20000a68 	.word	0x20000a68

00017ac8 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   17ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17aca:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17acc:	f3bf 8f5b 	dmb	ish
   17ad0:	6863      	ldr	r3, [r4, #4]
   17ad2:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   17ad6:	05db      	lsls	r3, r3, #23
   17ad8:	f100 0004 	add.w	r0, r0, #4
   17adc:	d511      	bpl.n	17b02 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   17ade:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   17ae2:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   17ae6:	429a      	cmp	r2, r3
   17ae8:	d80b      	bhi.n	17b02 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   17aea:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
   17aee:	429a      	cmp	r2, r3
   17af0:	d307      	bcc.n	17b02 <notify_le_param_updated+0x3a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   17af2:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
   17af6:	429a      	cmp	r2, r3
   17af8:	d103      	bne.n	17b02 <notify_le_param_updated+0x3a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17afa:	f46f 7180 	mvn.w	r1, #256	; 0x100
   17afe:	f00f fbf3 	bl	272e8 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   17b02:	4b10      	ldr	r3, [pc, #64]	; (17b44 <notify_le_param_updated+0x7c>)
   17b04:	681d      	ldr	r5, [r3, #0]
   17b06:	b925      	cbnz	r5, 17b12 <notify_le_param_updated+0x4a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17b08:	4d0f      	ldr	r5, [pc, #60]	; (17b48 <notify_le_param_updated+0x80>)
   17b0a:	4f10      	ldr	r7, [pc, #64]	; (17b4c <notify_le_param_updated+0x84>)
   17b0c:	42bd      	cmp	r5, r7
   17b0e:	d30c      	bcc.n	17b2a <notify_le_param_updated+0x62>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   17b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   17b12:	68ee      	ldr	r6, [r5, #12]
   17b14:	b13e      	cbz	r6, 17b26 <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
   17b16:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   17b1a:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   17b1e:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   17b22:	4620      	mov	r0, r4
   17b24:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   17b26:	69ad      	ldr	r5, [r5, #24]
   17b28:	e7ed      	b.n	17b06 <notify_le_param_updated+0x3e>
		if (cb->le_param_updated) {
   17b2a:	68ee      	ldr	r6, [r5, #12]
   17b2c:	b13e      	cbz	r6, 17b3e <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   17b2e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   17b32:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   17b36:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   17b3a:	4620      	mov	r0, r4
   17b3c:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17b3e:	351c      	adds	r5, #28
   17b40:	e7e4      	b.n	17b0c <notify_le_param_updated+0x44>
   17b42:	bf00      	nop
   17b44:	20002ae8 	.word	0x20002ae8
   17b48:	0002ab7c 	.word	0x0002ab7c
   17b4c:	0002ab98 	.word	0x0002ab98

00017b50 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   17b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17b54:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   17b56:	4608      	mov	r0, r1
{
   17b58:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   17b5a:	f00f fa91 	bl	27080 <bt_le_conn_params_valid>
   17b5e:	4605      	mov	r5, r0
   17b60:	b918      	cbnz	r0, 17b6a <le_param_req+0x1a>
		return false;
   17b62:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   17b64:	4628      	mov	r0, r5
   17b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   17b6a:	4b13      	ldr	r3, [pc, #76]	; (17bb8 <le_param_req+0x68>)
   17b6c:	681e      	ldr	r6, [r3, #0]
   17b6e:	b946      	cbnz	r6, 17b82 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17b70:	4e12      	ldr	r6, [pc, #72]	; (17bbc <le_param_req+0x6c>)
   17b72:	f8df 804c 	ldr.w	r8, [pc, #76]	; 17bc0 <le_param_req+0x70>
   17b76:	4546      	cmp	r6, r8
   17b78:	d2f4      	bcs.n	17b64 <le_param_req+0x14>
		if (!cb->le_param_req) {
   17b7a:	68b3      	ldr	r3, [r6, #8]
   17b7c:	b983      	cbnz	r3, 17ba0 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17b7e:	361c      	adds	r6, #28
   17b80:	e7f9      	b.n	17b76 <le_param_req+0x26>
		if (!cb->le_param_req) {
   17b82:	68b3      	ldr	r3, [r6, #8]
   17b84:	b90b      	cbnz	r3, 17b8a <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   17b86:	69b6      	ldr	r6, [r6, #24]
   17b88:	e7f1      	b.n	17b6e <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   17b8a:	4621      	mov	r1, r4
   17b8c:	4638      	mov	r0, r7
   17b8e:	4798      	blx	r3
   17b90:	2800      	cmp	r0, #0
   17b92:	d0e6      	beq.n	17b62 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   17b94:	4620      	mov	r0, r4
   17b96:	f00f fa73 	bl	27080 <bt_le_conn_params_valid>
   17b9a:	2800      	cmp	r0, #0
   17b9c:	d1f3      	bne.n	17b86 <le_param_req+0x36>
   17b9e:	e7e0      	b.n	17b62 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   17ba0:	4621      	mov	r1, r4
   17ba2:	4638      	mov	r0, r7
   17ba4:	4798      	blx	r3
   17ba6:	2800      	cmp	r0, #0
   17ba8:	d0db      	beq.n	17b62 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   17baa:	4620      	mov	r0, r4
   17bac:	f00f fa68 	bl	27080 <bt_le_conn_params_valid>
   17bb0:	2800      	cmp	r0, #0
   17bb2:	d1e4      	bne.n	17b7e <le_param_req+0x2e>
   17bb4:	e7d5      	b.n	17b62 <le_param_req+0x12>
   17bb6:	bf00      	nop
   17bb8:	20002ae8 	.word	0x20002ae8
   17bbc:	0002ab7c 	.word	0x0002ab7c
   17bc0:	0002ab98 	.word	0x0002ab98

00017bc4 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   17bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   17bc8:	78c3      	ldrb	r3, [r0, #3]
{
   17bca:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   17bcc:	b973      	cbnz	r3, 17bec <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   17bce:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   17bd2:	4b10      	ldr	r3, [pc, #64]	; (17c14 <bt_conn_identity_resolved+0x50>)
   17bd4:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   17bd6:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   17bda:	b955      	cbnz	r5, 17bf2 <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17bdc:	4d0e      	ldr	r5, [pc, #56]	; (17c18 <bt_conn_identity_resolved+0x54>)
   17bde:	4f0f      	ldr	r7, [pc, #60]	; (17c1c <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   17be0:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17be4:	42bd      	cmp	r5, r7
   17be6:	d30c      	bcc.n	17c02 <bt_conn_identity_resolved+0x3e>
		}
	}
}
   17be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   17bec:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   17bf0:	e7ef      	b.n	17bd2 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   17bf2:	692b      	ldr	r3, [r5, #16]
   17bf4:	b11b      	cbz	r3, 17bfe <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   17bf6:	463a      	mov	r2, r7
   17bf8:	4631      	mov	r1, r6
   17bfa:	4620      	mov	r0, r4
   17bfc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17bfe:	69ad      	ldr	r5, [r5, #24]
   17c00:	e7eb      	b.n	17bda <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   17c02:	692b      	ldr	r3, [r5, #16]
   17c04:	b11b      	cbz	r3, 17c0e <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   17c06:	4642      	mov	r2, r8
   17c08:	4631      	mov	r1, r6
   17c0a:	4620      	mov	r0, r4
   17c0c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17c0e:	351c      	adds	r5, #28
   17c10:	e7e8      	b.n	17be4 <bt_conn_identity_resolved+0x20>
   17c12:	bf00      	nop
   17c14:	20002ae8 	.word	0x20002ae8
   17c18:	0002ab7c 	.word	0x0002ab7c
   17c1c:	0002ab98 	.word	0x0002ab98

00017c20 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   17c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   17c22:	7a43      	ldrb	r3, [r0, #9]
   17c24:	7283      	strb	r3, [r0, #10]
{
   17c26:	4604      	mov	r4, r0
   17c28:	4615      	mov	r5, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   17c2a:	f00f fcbf 	bl	275ac <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   17c2e:	4b13      	ldr	r3, [pc, #76]	; (17c7c <bt_conn_security_changed+0x5c>)
   17c30:	681e      	ldr	r6, [r3, #0]
   17c32:	b98e      	cbnz	r6, 17c58 <bt_conn_security_changed+0x38>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17c34:	4e12      	ldr	r6, [pc, #72]	; (17c80 <bt_conn_security_changed+0x60>)
   17c36:	4f13      	ldr	r7, [pc, #76]	; (17c84 <bt_conn_security_changed+0x64>)
   17c38:	42be      	cmp	r6, r7
   17c3a:	d315      	bcc.n	17c68 <bt_conn_security_changed+0x48>
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
	if (!err && conn->sec_level >= BT_SECURITY_L2) {
   17c3c:	b9e5      	cbnz	r5, 17c78 <bt_conn_security_changed+0x58>
   17c3e:	7a63      	ldrb	r3, [r4, #9]
   17c40:	2b01      	cmp	r3, #1
   17c42:	d919      	bls.n	17c78 <bt_conn_security_changed+0x58>
		if (conn->type == BT_CONN_TYPE_LE) {
   17c44:	78a3      	ldrb	r3, [r4, #2]
   17c46:	2b01      	cmp	r3, #1
   17c48:	d116      	bne.n	17c78 <bt_conn_security_changed+0x58>
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
   17c4a:	7a20      	ldrb	r0, [r4, #8]
   17c4c:	f104 0188 	add.w	r1, r4, #136	; 0x88
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   17c50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
   17c54:	f005 b910 	b.w	1ce78 <bt_keys_update_usage>
		if (cb->security_changed) {
   17c58:	6973      	ldr	r3, [r6, #20]
   17c5a:	b11b      	cbz	r3, 17c64 <bt_conn_security_changed+0x44>
			cb->security_changed(conn, conn->sec_level, err);
   17c5c:	7a61      	ldrb	r1, [r4, #9]
   17c5e:	462a      	mov	r2, r5
   17c60:	4620      	mov	r0, r4
   17c62:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17c64:	69b6      	ldr	r6, [r6, #24]
   17c66:	e7e4      	b.n	17c32 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   17c68:	6973      	ldr	r3, [r6, #20]
   17c6a:	b11b      	cbz	r3, 17c74 <bt_conn_security_changed+0x54>
			cb->security_changed(conn, conn->sec_level, err);
   17c6c:	7a61      	ldrb	r1, [r4, #9]
   17c6e:	462a      	mov	r2, r5
   17c70:	4620      	mov	r0, r4
   17c72:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17c74:	361c      	adds	r6, #28
   17c76:	e7df      	b.n	17c38 <bt_conn_security_changed+0x18>
}
   17c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17c7a:	bf00      	nop
   17c7c:	20002ae8 	.word	0x20002ae8
   17c80:	0002ab7c 	.word	0x0002ab7c
   17c84:	0002ab98 	.word	0x0002ab98

00017c88 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   17c88:	b570      	push	{r4, r5, r6, lr}
   17c8a:	4606      	mov	r6, r0
   17c8c:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   17c8e:	480a      	ldr	r0, [pc, #40]	; (17cb8 <bt_conn_add_le+0x30>)
   17c90:	2101      	movs	r1, #1
   17c92:	f7ff fcc9 	bl	17628 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   17c96:	4604      	mov	r4, r0
   17c98:	b160      	cbz	r0, 17cb4 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   17c9a:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   17c9c:	2207      	movs	r2, #7
   17c9e:	4629      	mov	r1, r5
   17ca0:	3088      	adds	r0, #136	; 0x88
   17ca2:	f00f f839 	bl	26d18 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   17ca6:	2301      	movs	r3, #1
   17ca8:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   17caa:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   17cac:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   17cae:	4b03      	ldr	r3, [pc, #12]	; (17cbc <bt_conn_add_le+0x34>)
   17cb0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   17cb4:	4620      	mov	r0, r4
   17cb6:	bd70      	pop	{r4, r5, r6, pc}
   17cb8:	20001e58 	.word	0x20001e58
   17cbc:	00280018 	.word	0x00280018

00017cc0 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   17cc0:	b570      	push	{r4, r5, r6, lr}
   17cc2:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17cc4:	480c      	ldr	r0, [pc, #48]	; (17cf8 <bt_conn_lookup_addr_le+0x38>)
{
   17cc6:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17cc8:	f00f fb2c 	bl	27324 <bt_conn_ref>

		if (!conn) {
   17ccc:	4604      	mov	r4, r0
   17cce:	b128      	cbz	r0, 17cdc <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   17cd0:	7883      	ldrb	r3, [r0, #2]
   17cd2:	2b01      	cmp	r3, #1
   17cd4:	d004      	beq.n	17ce0 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   17cd6:	f00f fb40 	bl	2735a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   17cda:	2400      	movs	r4, #0
}
   17cdc:	4620      	mov	r0, r4
   17cde:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   17ce0:	4629      	mov	r1, r5
   17ce2:	4632      	mov	r2, r6
   17ce4:	f00f fbd4 	bl	27490 <bt_conn_is_peer_addr_le>
   17ce8:	4605      	mov	r5, r0
   17cea:	2800      	cmp	r0, #0
   17cec:	d1f6      	bne.n	17cdc <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   17cee:	4620      	mov	r0, r4
   17cf0:	f00f fb33 	bl	2735a <bt_conn_unref>
	return NULL;
   17cf4:	462c      	mov	r4, r5
			continue;
   17cf6:	e7f1      	b.n	17cdc <bt_conn_lookup_addr_le+0x1c>
   17cf8:	20001e58 	.word	0x20001e58

00017cfc <bt_conn_exists_le>:
{
   17cfc:	b5b0      	push	{r4, r5, r7, lr}
   17cfe:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   17d00:	f7ff ffde 	bl	17cc0 <bt_conn_lookup_addr_le>
	if (conn) {
   17d04:	4604      	mov	r4, r0
   17d06:	b1d8      	cbz	r0, 17d40 <bt_conn_exists_le+0x44>
		BT_WARN("Found valid connection in %s state",
   17d08:	7b43      	ldrb	r3, [r0, #13]
	switch (state) {
   17d0a:	2b08      	cmp	r3, #8
   17d0c:	bf96      	itet	ls
   17d0e:	4a0d      	ldrls	r2, [pc, #52]	; (17d44 <bt_conn_exists_le+0x48>)
		BT_WARN("Found valid connection in %s state",
   17d10:	4b0d      	ldrhi	r3, [pc, #52]	; (17d48 <bt_conn_exists_le+0x4c>)
   17d12:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   17d16:	466d      	mov	r5, sp
   17d18:	b088      	sub	sp, #32
   17d1a:	466a      	mov	r2, sp
   17d1c:	490b      	ldr	r1, [pc, #44]	; (17d4c <bt_conn_exists_le+0x50>)
   17d1e:	480c      	ldr	r0, [pc, #48]	; (17d50 <bt_conn_exists_le+0x54>)
   17d20:	e9c2 1305 	strd	r1, r3, [r2, #20]
   17d24:	2302      	movs	r3, #2
   17d26:	7713      	strb	r3, [r2, #28]
   17d28:	4b0a      	ldr	r3, [pc, #40]	; (17d54 <bt_conn_exists_le+0x58>)
   17d2a:	f842 3f10 	str.w	r3, [r2, #16]!
   17d2e:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   17d32:	f00f fae8 	bl	27306 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   17d36:	4620      	mov	r0, r4
   17d38:	46ad      	mov	sp, r5
   17d3a:	f00f fb0e 	bl	2735a <bt_conn_unref>
		return true;
   17d3e:	2001      	movs	r0, #1
}
   17d40:	46bd      	mov	sp, r7
   17d42:	bdb0      	pop	{r4, r5, r7, pc}
   17d44:	0002b410 	.word	0x0002b410
   17d48:	0002d0a4 	.word	0x0002d0a4
   17d4c:	0002d0f2 	.word	0x0002d0f2
   17d50:	0002abe8 	.word	0x0002abe8
   17d54:	01000003 	.word	0x01000003

00017d58 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   17d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17d5a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17d5c:	480e      	ldr	r0, [pc, #56]	; (17d98 <bt_conn_lookup_state_le+0x40>)
{
   17d5e:	460e      	mov	r6, r1
   17d60:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17d62:	f00f fadf 	bl	27324 <bt_conn_ref>

		if (!conn) {
   17d66:	4604      	mov	r4, r0
   17d68:	b1a0      	cbz	r0, 17d94 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   17d6a:	7883      	ldrb	r3, [r0, #2]
   17d6c:	2b01      	cmp	r3, #1
   17d6e:	d003      	beq.n	17d78 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   17d70:	f00f faf3 	bl	2735a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   17d74:	2400      	movs	r4, #0
			continue;
   17d76:	e00d      	b.n	17d94 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   17d78:	b136      	cbz	r6, 17d88 <bt_conn_lookup_state_le+0x30>
   17d7a:	4632      	mov	r2, r6
   17d7c:	4629      	mov	r1, r5
   17d7e:	f00f fb87 	bl	27490 <bt_conn_is_peer_addr_le>
   17d82:	b908      	cbnz	r0, 17d88 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   17d84:	4620      	mov	r0, r4
   17d86:	e7f3      	b.n	17d70 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   17d88:	7b63      	ldrb	r3, [r4, #13]
   17d8a:	42bb      	cmp	r3, r7
   17d8c:	d1fa      	bne.n	17d84 <bt_conn_lookup_state_le+0x2c>
   17d8e:	7a23      	ldrb	r3, [r4, #8]
   17d90:	42ab      	cmp	r3, r5
   17d92:	d1f7      	bne.n	17d84 <bt_conn_lookup_state_le+0x2c>
}
   17d94:	4620      	mov	r0, r4
   17d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17d98:	20001e58 	.word	0x20001e58

00017d9c <send_conn_le_param_update>:
{
   17d9c:	b538      	push	{r3, r4, r5, lr}
   17d9e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   17da0:	4608      	mov	r0, r1
{
   17da2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   17da4:	f00f f96c 	bl	27080 <bt_le_conn_params_valid>
   17da8:	b348      	cbz	r0, 17dfe <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   17daa:	4b16      	ldr	r3, [pc, #88]	; (17e04 <send_conn_le_param_update+0x68>)
   17dac:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   17db0:	0799      	lsls	r1, r3, #30
   17db2:	d407      	bmi.n	17dc4 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   17db4:	78e3      	ldrb	r3, [r4, #3]
   17db6:	b183      	cbz	r3, 17dda <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   17db8:	4629      	mov	r1, r5
   17dba:	4620      	mov	r0, r4
}
   17dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   17dc0:	f000 b9e4 	b.w	1818c <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   17dc4:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   17dc8:	079a      	lsls	r2, r3, #30
   17dca:	d5f3      	bpl.n	17db4 <send_conn_le_param_update+0x18>
   17dcc:	f3bf 8f5b 	dmb	ish
   17dd0:	6863      	ldr	r3, [r4, #4]
   17dd2:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   17dd6:	059b      	lsls	r3, r3, #22
   17dd8:	d4ec      	bmi.n	17db4 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   17dda:	4629      	mov	r1, r5
   17ddc:	4620      	mov	r0, r4
   17dde:	f00f fb77 	bl	274d0 <bt_conn_le_conn_update>
		if (rc == 0) {
   17de2:	b958      	cbnz	r0, 17dfc <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   17de4:	882b      	ldrh	r3, [r5, #0]
   17de6:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   17dea:	886b      	ldrh	r3, [r5, #2]
   17dec:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   17df0:	88ab      	ldrh	r3, [r5, #4]
   17df2:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   17df6:	88eb      	ldrh	r3, [r5, #6]
   17df8:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   17dfc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   17dfe:	f06f 0015 	mvn.w	r0, #21
   17e02:	e7fb      	b.n	17dfc <send_conn_le_param_update+0x60>
   17e04:	20000350 	.word	0x20000350

00017e08 <deferred_work>:
{
   17e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   17e0a:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   17e0e:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   17e10:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   17e14:	b9fb      	cbnz	r3, 17e56 <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   17e16:	4628      	mov	r0, r5
   17e18:	f00f fbb7 	bl	2758a <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   17e1c:	4b28      	ldr	r3, [pc, #160]	; (17ec0 <deferred_work+0xb8>)
   17e1e:	681e      	ldr	r6, [r3, #0]
   17e20:	b94e      	cbnz	r6, 17e36 <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17e22:	4e28      	ldr	r6, [pc, #160]	; (17ec4 <deferred_work+0xbc>)
   17e24:	4f28      	ldr	r7, [pc, #160]	; (17ec8 <deferred_work+0xc0>)
   17e26:	42be      	cmp	r6, r7
   17e28:	d30d      	bcc.n	17e46 <deferred_work+0x3e>
		bt_conn_unref(conn);
   17e2a:	4628      	mov	r0, r5
}
   17e2c:	b003      	add	sp, #12
   17e2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   17e32:	f00f ba92 	b.w	2735a <bt_conn_unref>
		if (cb->disconnected) {
   17e36:	6873      	ldr	r3, [r6, #4]
   17e38:	b11b      	cbz	r3, 17e42 <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   17e3a:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   17e3e:	4628      	mov	r0, r5
   17e40:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17e42:	69b6      	ldr	r6, [r6, #24]
   17e44:	e7ec      	b.n	17e20 <deferred_work+0x18>
		if (cb->disconnected) {
   17e46:	6873      	ldr	r3, [r6, #4]
   17e48:	b11b      	cbz	r3, 17e52 <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   17e4a:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   17e4e:	4628      	mov	r0, r5
   17e50:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17e52:	361c      	adds	r6, #28
   17e54:	e7e7      	b.n	17e26 <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   17e56:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   17e5a:	2b01      	cmp	r3, #1
   17e5c:	d128      	bne.n	17eb0 <deferred_work+0xa8>
	if (atomic_test_and_clear_bit(conn->flags,
   17e5e:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17e62:	f46f 7180 	mvn.w	r1, #256	; 0x100
   17e66:	4630      	mov	r0, r6
   17e68:	f00f fa3e 	bl	272e8 <atomic_and>
   17e6c:	05c3      	lsls	r3, r0, #23
   17e6e:	d521      	bpl.n	17eb4 <deferred_work+0xac>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   17e70:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   17e74:	f8ad 3000 	strh.w	r3, [sp]
   17e78:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   17e7c:	f8ad 3002 	strh.w	r3, [sp, #2]
   17e80:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   17e84:	f8ad 3004 	strh.w	r3, [sp, #4]
   17e88:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   17e8c:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   17e90:	4669      	mov	r1, sp
   17e92:	4628      	mov	r0, r5
   17e94:	f7ff ff82 	bl	17d9c <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17e98:	f3bf 8f5b 	dmb	ish
   17e9c:	e856 3f00 	ldrex	r3, [r6]
   17ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17ea4:	e846 3200 	strex	r2, r3, [r6]
   17ea8:	2a00      	cmp	r2, #0
   17eaa:	d1f7      	bne.n	17e9c <deferred_work+0x94>
   17eac:	f3bf 8f5b 	dmb	ish
}
   17eb0:	b003      	add	sp, #12
   17eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   17eb4:	4a05      	ldr	r2, [pc, #20]	; (17ecc <deferred_work+0xc4>)
   17eb6:	6810      	ldr	r0, [r2, #0]
   17eb8:	6851      	ldr	r1, [r2, #4]
   17eba:	466b      	mov	r3, sp
   17ebc:	c303      	stmia	r3!, {r0, r1}
   17ebe:	e7e7      	b.n	17e90 <deferred_work+0x88>
   17ec0:	20002ae8 	.word	0x20002ae8
   17ec4:	0002ab7c 	.word	0x0002ab7c
   17ec8:	0002ab98 	.word	0x0002ab98
   17ecc:	0002afd4 	.word	0x0002afd4

00017ed0 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   17ed0:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   17ed2:	490b      	ldr	r1, [pc, #44]	; (17f00 <bt_conn_init+0x30>)
   17ed4:	480b      	ldr	r0, [pc, #44]	; (17f04 <bt_conn_init+0x34>)
   17ed6:	f011 fffb 	bl	29ed0 <k_queue_append>
   17eda:	490b      	ldr	r1, [pc, #44]	; (17f08 <bt_conn_init+0x38>)
   17edc:	4809      	ldr	r0, [pc, #36]	; (17f04 <bt_conn_init+0x34>)
   17ede:	f011 fff7 	bl	29ed0 <k_queue_append>
   17ee2:	490a      	ldr	r1, [pc, #40]	; (17f0c <bt_conn_init+0x3c>)
   17ee4:	4807      	ldr	r0, [pc, #28]	; (17f04 <bt_conn_init+0x34>)
   17ee6:	f011 fff3 	bl	29ed0 <k_queue_append>
	}

	bt_att_init();
   17eea:	f001 fa1f 	bl	1932c <bt_att_init>

	err = bt_smp_init();
   17eee:	f004 fd7b 	bl	1c9e8 <bt_smp_init>
	if (err) {
   17ef2:	4604      	mov	r4, r0
   17ef4:	b908      	cbnz	r0, 17efa <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   17ef6:	f00f fb9e 	bl	27636 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   17efa:	4620      	mov	r0, r4
   17efc:	bd10      	pop	{r4, pc}
   17efe:	bf00      	nop
   17f00:	20002aec 	.word	0x20002aec
   17f04:	20000a50 	.word	0x20000a50
   17f08:	20002afc 	.word	0x20002afc
   17f0c:	20002b0c 	.word	0x20002b0c

00017f10 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   17f10:	b580      	push	{r7, lr}
   17f12:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   17f14:	b088      	sub	sp, #32
   17f16:	466a      	mov	r2, sp
   17f18:	4b06      	ldr	r3, [pc, #24]	; (17f34 <l2cap_create_le_sig_pdu.part.0+0x24>)
   17f1a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17f1e:	2303      	movs	r3, #3
   17f20:	f842 3f10 	str.w	r3, [r2, #16]!
   17f24:	4804      	ldr	r0, [pc, #16]	; (17f38 <l2cap_create_le_sig_pdu.part.0+0x28>)
   17f26:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17f2a:	f00f fafa 	bl	27522 <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   17f2e:	2000      	movs	r0, #0
   17f30:	46bd      	mov	sp, r7
   17f32:	bd80      	pop	{r7, pc}
   17f34:	0002d18e 	.word	0x0002d18e
   17f38:	0002ac28 	.word	0x0002ac28

00017f3c <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   17f3c:	b580      	push	{r7, lr}
   17f3e:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   17f40:	b088      	sub	sp, #32
   17f42:	466a      	mov	r2, sp
   17f44:	4b07      	ldr	r3, [pc, #28]	; (17f64 <l2cap_accept.part.0+0x28>)
   17f46:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17f4a:	2303      	movs	r3, #3
   17f4c:	f842 3f10 	str.w	r3, [r2, #16]!
   17f50:	4805      	ldr	r0, [pc, #20]	; (17f68 <l2cap_accept.part.0+0x2c>)
   17f52:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17f56:	f00f fae4 	bl	27522 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   17f5a:	f06f 000b 	mvn.w	r0, #11
   17f5e:	46bd      	mov	sp, r7
   17f60:	bd80      	pop	{r7, pc}
   17f62:	bf00      	nop
   17f64:	0002d1b6 	.word	0x0002d1b6
   17f68:	0002ac28 	.word	0x0002ac28

00017f6c <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   17f6c:	4b04      	ldr	r3, [pc, #16]	; (17f80 <l2cap_accept+0x14>)
   17f6e:	681a      	ldr	r2, [r3, #0]
   17f70:	b10a      	cbz	r2, 17f76 <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   17f72:	f7ff bfe3 	b.w	17f3c <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   17f76:	4803      	ldr	r0, [pc, #12]	; (17f84 <l2cap_accept+0x18>)
   17f78:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;
   17f7a:	600b      	str	r3, [r1, #0]
}
   17f7c:	4610      	mov	r0, r2
   17f7e:	4770      	bx	lr
   17f80:	20002b1c 	.word	0x20002b1c
   17f84:	0002b454 	.word	0x0002b454

00017f88 <bt_l2cap_connected>:
{
   17f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17f8a:	4d24      	ldr	r5, [pc, #144]	; (1801c <bt_l2cap_connected+0x94>)
   17f8c:	4f24      	ldr	r7, [pc, #144]	; (18020 <bt_l2cap_connected+0x98>)
{
   17f8e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17f90:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17f92:	42bd      	cmp	r5, r7
   17f94:	d301      	bcc.n	17f9a <bt_l2cap_connected+0x12>
}
   17f96:	b003      	add	sp, #12
   17f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   17f9a:	686b      	ldr	r3, [r5, #4]
   17f9c:	a901      	add	r1, sp, #4
   17f9e:	4620      	mov	r0, r4
   17fa0:	4798      	blx	r3
   17fa2:	2800      	cmp	r0, #0
   17fa4:	db34      	blt.n	18010 <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   17fa6:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   17fa8:	882a      	ldrh	r2, [r5, #0]
   17faa:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   17fac:	849a      	strh	r2, [r3, #36]	; 0x24
   17fae:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   17fb2:	68a8      	ldr	r0, [r5, #8]
   17fb4:	f3bf 8f5b 	dmb	ish
   17fb8:	e852 1f00 	ldrex	r1, [r2]
   17fbc:	e842 6c00 	strex	ip, r6, [r2]
   17fc0:	f1bc 0f00 	cmp.w	ip, #0
   17fc4:	d1f8      	bne.n	17fb8 <bt_l2cap_connected+0x30>
   17fc6:	f3bf 8f5b 	dmb	ish
	return list->tail;
   17fca:	6d61      	ldr	r1, [r4, #84]	; 0x54
	parent->next = child;
   17fcc:	609e      	str	r6, [r3, #8]
	sys_slist_append(&conn->channels, &chan->node);
   17fce:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   17fd2:	b9f9      	cbnz	r1, 18014 <bt_l2cap_connected+0x8c>
	list->head = node;
   17fd4:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->destroy = destroy;
   17fd8:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   17fda:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   17fdc:	601c      	str	r4, [r3, #0]
		if (chan->ops->connected) {
   17fde:	6843      	ldr	r3, [r0, #4]
   17fe0:	681b      	ldr	r3, [r3, #0]
   17fe2:	b103      	cbz	r3, 17fe6 <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
   17fe4:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17fe6:	9b01      	ldr	r3, [sp, #4]
   17fe8:	f3bf 8f5b 	dmb	ish
   17fec:	3310      	adds	r3, #16
   17fee:	e853 2f00 	ldrex	r2, [r3]
   17ff2:	f042 0201 	orr.w	r2, r2, #1
   17ff6:	e843 2100 	strex	r1, r2, [r3]
   17ffa:	2900      	cmp	r1, #0
   17ffc:	d1f7      	bne.n	17fee <bt_l2cap_connected+0x66>
   17ffe:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   18002:	9801      	ldr	r0, [sp, #4]
   18004:	6843      	ldr	r3, [r0, #4]
   18006:	699b      	ldr	r3, [r3, #24]
   18008:	b113      	cbz	r3, 18010 <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
   1800a:	f100 0110 	add.w	r1, r0, #16
   1800e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18010:	350c      	adds	r5, #12
   18012:	e7be      	b.n	17f92 <bt_l2cap_connected+0xa>
	parent->next = child;
   18014:	600a      	str	r2, [r1, #0]
	list->tail = node;
   18016:	6562      	str	r2, [r4, #84]	; 0x54
}
   18018:	e7de      	b.n	17fd8 <bt_l2cap_connected+0x50>
   1801a:	bf00      	nop
   1801c:	0002ab58 	.word	0x0002ab58
   18020:	0002ab7c 	.word	0x0002ab7c

00018024 <l2cap_recv>:
{
   18024:	b5f0      	push	{r4, r5, r6, r7, lr}
   18026:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   18028:	898b      	ldrh	r3, [r1, #12]
   1802a:	2b03      	cmp	r3, #3
{
   1802c:	af02      	add	r7, sp, #8
   1802e:	4606      	mov	r6, r0
   18030:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   18032:	d80b      	bhi.n	1804c <l2cap_recv+0x28>
		BT_ERR("Too small L2CAP signaling PDU");
   18034:	4b30      	ldr	r3, [pc, #192]	; (180f8 <l2cap_recv+0xd4>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   18036:	617b      	str	r3, [r7, #20]
   18038:	4830      	ldr	r0, [pc, #192]	; (180fc <l2cap_recv+0xd8>)
   1803a:	2302      	movs	r3, #2
   1803c:	f107 0210 	add.w	r2, r7, #16
   18040:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18044:	613b      	str	r3, [r7, #16]
   18046:	f00f fa6c 	bl	27522 <z_log_msg_static_create.constprop.0>
		return 0;
   1804a:	e019      	b.n	18080 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1804c:	2104      	movs	r1, #4
   1804e:	f105 0008 	add.w	r0, r5, #8
   18052:	f011 f866 	bl	29122 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   18056:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   18058:	8841      	ldrh	r1, [r0, #2]
	if (buf->len != len) {
   1805a:	4299      	cmp	r1, r3
   1805c:	4604      	mov	r4, r0
   1805e:	d013      	beq.n	18088 <l2cap_recv+0x64>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   18060:	466c      	mov	r4, sp
   18062:	b088      	sub	sp, #32
   18064:	aa02      	add	r2, sp, #8
   18066:	4826      	ldr	r0, [pc, #152]	; (18100 <l2cap_recv+0xdc>)
   18068:	61d1      	str	r1, [r2, #28]
   1806a:	e9c2 0305 	strd	r0, r3, [r2, #20]
   1806e:	2304      	movs	r3, #4
   18070:	f842 3f10 	str.w	r3, [r2, #16]!
   18074:	4821      	ldr	r0, [pc, #132]	; (180fc <l2cap_recv+0xd8>)
   18076:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1807a:	f00f fa52 	bl	27522 <z_log_msg_static_create.constprop.0>
   1807e:	46a5      	mov	sp, r4
}
   18080:	2000      	movs	r0, #0
   18082:	371c      	adds	r7, #28
   18084:	46bd      	mov	sp, r7
   18086:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   18088:	7843      	ldrb	r3, [r0, #1]
   1808a:	b90b      	cbnz	r3, 18090 <l2cap_recv+0x6c>
		BT_ERR("Invalid ident value in L2CAP PDU");
   1808c:	4b1d      	ldr	r3, [pc, #116]	; (18104 <l2cap_recv+0xe0>)
   1808e:	e7d2      	b.n	18036 <l2cap_recv+0x12>
	switch (hdr->code) {
   18090:	7803      	ldrb	r3, [r0, #0]
   18092:	2b01      	cmp	r3, #1
   18094:	d0f4      	beq.n	18080 <l2cap_recv+0x5c>
   18096:	2b13      	cmp	r3, #19
   18098:	d103      	bne.n	180a2 <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   1809a:	2901      	cmp	r1, #1
   1809c:	d8f0      	bhi.n	18080 <l2cap_recv+0x5c>
		BT_ERR("Too small LE conn param rsp");
   1809e:	4b1a      	ldr	r3, [pc, #104]	; (18108 <l2cap_recv+0xe4>)
   180a0:	e7c9      	b.n	18036 <l2cap_recv+0x12>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   180a2:	466d      	mov	r5, sp
   180a4:	b088      	sub	sp, #32
   180a6:	aa02      	add	r2, sp, #8
   180a8:	4918      	ldr	r1, [pc, #96]	; (1810c <l2cap_recv+0xe8>)
   180aa:	4814      	ldr	r0, [pc, #80]	; (180fc <l2cap_recv+0xd8>)
	switch (hdr->code) {
   180ac:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   180b0:	2303      	movs	r3, #3
   180b2:	f842 3f10 	str.w	r3, [r2, #16]!
   180b6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   180ba:	f00f fa32 	bl	27522 <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   180be:	2202      	movs	r2, #2
   180c0:	7861      	ldrb	r1, [r4, #1]
   180c2:	46ad      	mov	sp, r5
   180c4:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   180c6:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   180c8:	f00f fa2e 	bl	27528 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   180cc:	4604      	mov	r4, r0
   180ce:	2800      	cmp	r0, #0
   180d0:	d0d6      	beq.n	18080 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   180d2:	2102      	movs	r1, #2
   180d4:	3008      	adds	r0, #8
   180d6:	f010 fffd 	bl	290d4 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   180da:	2300      	movs	r3, #0
   180dc:	7003      	strb	r3, [r0, #0]
   180de:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   180e0:	4622      	mov	r2, r4
   180e2:	9300      	str	r3, [sp, #0]
   180e4:	2105      	movs	r1, #5
   180e6:	4628      	mov	r0, r5
   180e8:	f00f fa78 	bl	275dc <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   180ec:	2800      	cmp	r0, #0
   180ee:	d0c7      	beq.n	18080 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   180f0:	4620      	mov	r0, r4
   180f2:	f004 ff99 	bl	1d028 <net_buf_unref>
   180f6:	e7c3      	b.n	18080 <l2cap_recv+0x5c>
   180f8:	0002d1dd 	.word	0x0002d1dd
   180fc:	0002ac28 	.word	0x0002ac28
   18100:	0002d1fb 	.word	0x0002d1fb
   18104:	0002d21c 	.word	0x0002d21c
   18108:	0002d23d 	.word	0x0002d23d
   1810c:	0002d259 	.word	0x0002d259

00018110 <bt_l2cap_recv>:
{
   18110:	b5b0      	push	{r4, r5, r7, lr}
   18112:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   18114:	898b      	ldrh	r3, [r1, #12]
   18116:	2b03      	cmp	r3, #3
{
   18118:	af00      	add	r7, sp, #0
   1811a:	4605      	mov	r5, r0
   1811c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1811e:	d810      	bhi.n	18142 <bt_l2cap_recv+0x32>
		BT_ERR("Too small L2CAP PDU received");
   18120:	4b17      	ldr	r3, [pc, #92]	; (18180 <bt_l2cap_recv+0x70>)
   18122:	617b      	str	r3, [r7, #20]
   18124:	4817      	ldr	r0, [pc, #92]	; (18184 <bt_l2cap_recv+0x74>)
   18126:	2302      	movs	r3, #2
   18128:	f107 0210 	add.w	r2, r7, #16
   1812c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18130:	613b      	str	r3, [r7, #16]
   18132:	f00f f9f6 	bl	27522 <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   18136:	4620      	mov	r0, r4
   18138:	f004 ff76 	bl	1d028 <net_buf_unref>
}
   1813c:	3718      	adds	r7, #24
   1813e:	46bd      	mov	sp, r7
   18140:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   18142:	2104      	movs	r1, #4
   18144:	f104 0008 	add.w	r0, r4, #8
   18148:	f010 ffeb 	bl	29122 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1814c:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1814e:	4628      	mov	r0, r5
   18150:	f00f fa67 	bl	27622 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18154:	b978      	cbnz	r0, 18176 <bt_l2cap_recv+0x66>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   18156:	466d      	mov	r5, sp
   18158:	b088      	sub	sp, #32
   1815a:	466a      	mov	r2, sp
   1815c:	4b0a      	ldr	r3, [pc, #40]	; (18188 <bt_l2cap_recv+0x78>)
   1815e:	4809      	ldr	r0, [pc, #36]	; (18184 <bt_l2cap_recv+0x74>)
   18160:	e9c2 3105 	strd	r3, r1, [r2, #20]
   18164:	2303      	movs	r3, #3
   18166:	f842 3f10 	str.w	r3, [r2, #16]!
   1816a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1816e:	f00f f9d8 	bl	27522 <z_log_msg_static_create.constprop.0>
   18172:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   18174:	e7df      	b.n	18136 <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   18176:	6843      	ldr	r3, [r0, #4]
   18178:	4621      	mov	r1, r4
   1817a:	691b      	ldr	r3, [r3, #16]
   1817c:	4798      	blx	r3
   1817e:	e7da      	b.n	18136 <bt_l2cap_recv+0x26>
   18180:	0002d277 	.word	0x0002d277
   18184:	0002ac28 	.word	0x0002ac28
   18188:	0002d294 	.word	0x0002d294

0001818c <bt_l2cap_update_conn_param>:
{
   1818c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1818e:	460d      	mov	r5, r1
	ident++;
   18190:	4916      	ldr	r1, [pc, #88]	; (181ec <bt_l2cap_update_conn_param+0x60>)
   18192:	780b      	ldrb	r3, [r1, #0]
   18194:	3301      	adds	r3, #1
	if (!ident) {
   18196:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   1819a:	bf08      	it	eq
   1819c:	2301      	moveq	r3, #1
   1819e:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   181a0:	7809      	ldrb	r1, [r1, #0]
{
   181a2:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   181a4:	2208      	movs	r2, #8
   181a6:	2012      	movs	r0, #18
   181a8:	f00f f9be 	bl	27528 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   181ac:	4604      	mov	r4, r0
   181ae:	b1d0      	cbz	r0, 181e6 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   181b0:	2108      	movs	r1, #8
   181b2:	4408      	add	r0, r1
   181b4:	f010 ff8e 	bl	290d4 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   181b8:	882b      	ldrh	r3, [r5, #0]
   181ba:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   181bc:	886b      	ldrh	r3, [r5, #2]
   181be:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   181c0:	88ab      	ldrh	r3, [r5, #4]
   181c2:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   181c4:	88eb      	ldrh	r3, [r5, #6]
   181c6:	80c3      	strh	r3, [r0, #6]
   181c8:	2300      	movs	r3, #0
   181ca:	9300      	str	r3, [sp, #0]
   181cc:	4622      	mov	r2, r4
   181ce:	2105      	movs	r1, #5
   181d0:	4630      	mov	r0, r6
   181d2:	f00f fa03 	bl	275dc <bt_l2cap_send_cb>
	if (err) {
   181d6:	4605      	mov	r5, r0
   181d8:	b110      	cbz	r0, 181e0 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   181da:	4620      	mov	r0, r4
   181dc:	f004 ff24 	bl	1d028 <net_buf_unref>
}
   181e0:	4628      	mov	r0, r5
   181e2:	b002      	add	sp, #8
   181e4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   181e6:	f06f 050b 	mvn.w	r5, #11
   181ea:	e7f9      	b.n	181e0 <bt_l2cap_update_conn_param+0x54>
   181ec:	20003baa 	.word	0x20003baa

000181f0 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   181f0:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   181f2:	3804      	subs	r0, #4
   181f4:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   181f6:	a901      	add	r1, sp, #4
   181f8:	4802      	ldr	r0, [pc, #8]	; (18204 <bt_att_released+0x14>)
   181fa:	f011 fda1 	bl	29d40 <k_mem_slab_free>
}
   181fe:	b003      	add	sp, #12
   18200:	f85d fb04 	ldr.w	pc, [sp], #4
   18204:	20000944 	.word	0x20000944

00018208 <tx_meta_data_free>:
{
   18208:	b510      	push	{r4, lr}
	(void)memset(data, 0, sizeof(*data));
   1820a:	2100      	movs	r1, #0
{
   1820c:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   1820e:	2214      	movs	r2, #20
   18210:	f00e fd8d 	bl	26d2e <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   18214:	4621      	mov	r1, r4
   18216:	4802      	ldr	r0, [pc, #8]	; (18220 <tx_meta_data_free+0x18>)
}
   18218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   1821c:	f011 be58 	b.w	29ed0 <k_queue_append>
   18220:	20000a38 	.word	0x20000a38

00018224 <find_type_cb>:
{
   18224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18228:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   1822a:	f8d2 a000 	ldr.w	sl, [r2]
{
   1822e:	af02      	add	r7, sp, #8
   18230:	4606      	mov	r6, r0
   18232:	4688      	mov	r8, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18234:	2500      	movs	r5, #0
   18236:	f642 0301 	movw	r3, #10241	; 0x2801
   1823a:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1823c:	f8da 9004 	ldr.w	r9, [sl, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18240:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   18244:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   18248:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1824a:	85fb      	strh	r3, [r7, #46]	; 0x2e
   1824c:	f00e fdfd 	bl	26e4a <bt_uuid_cmp>
   18250:	2800      	cmp	r0, #0
   18252:	d071      	beq.n	18338 <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   18254:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18258:	6830      	ldr	r0, [r6, #0]
   1825a:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1825e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   18262:	85fb      	strh	r3, [r7, #46]	; 0x2e
   18264:	f00e fdf1 	bl	26e4a <bt_uuid_cmp>
   18268:	b140      	cbz	r0, 1827c <find_type_cb+0x58>
		if (data->group &&
   1826a:	68a3      	ldr	r3, [r4, #8]
   1826c:	b123      	cbz	r3, 18278 <find_type_cb+0x54>
   1826e:	885a      	ldrh	r2, [r3, #2]
   18270:	4542      	cmp	r2, r8
   18272:	d201      	bcs.n	18278 <find_type_cb+0x54>
			data->group->end_handle = sys_cpu_to_le16(handle);
   18274:	f8a3 8002 	strh.w	r8, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   18278:	2001      	movs	r0, #1
   1827a:	e009      	b.n	18290 <find_type_cb+0x6c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1827c:	6861      	ldr	r1, [r4, #4]
   1827e:	4608      	mov	r0, r1
   18280:	f00f f9e4 	bl	2764c <net_buf_frags_len>
   18284:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   18288:	1a1b      	subs	r3, r3, r0
   1828a:	2b03      	cmp	r3, #3
   1828c:	d804      	bhi.n	18298 <find_type_cb+0x74>
		return BT_GATT_ITER_STOP;
   1828e:	2000      	movs	r0, #0
}
   18290:	3744      	adds	r7, #68	; 0x44
   18292:	46bd      	mov	sp, r7
   18294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   18298:	4608      	mov	r0, r1
   1829a:	f010 fef9 	bl	29090 <net_buf_frag_last>
   1829e:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   182a0:	6860      	ldr	r0, [r4, #4]
   182a2:	f00f f9d3 	bl	2764c <net_buf_frags_len>
   182a6:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   182aa:	f105 0308 	add.w	r3, r5, #8
   182ae:	ebab 0b00 	sub.w	fp, fp, r0
   182b2:	4618      	mov	r0, r3
   182b4:	607b      	str	r3, [r7, #4]
   182b6:	f010 ff50 	bl	2915a <net_buf_simple_tailroom>
   182ba:	4558      	cmp	r0, fp
   182bc:	687b      	ldr	r3, [r7, #4]
   182be:	d93e      	bls.n	1833e <find_type_cb+0x11a>
   182c0:	6860      	ldr	r0, [r4, #4]
   182c2:	f00f f9c3 	bl	2764c <net_buf_frags_len>
   182c6:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   182ca:	1a18      	subs	r0, r3, r0
	if (!len) {
   182cc:	b970      	cbnz	r0, 182ec <find_type_cb+0xc8>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   182ce:	6863      	ldr	r3, [r4, #4]
   182d0:	7998      	ldrb	r0, [r3, #6]
   182d2:	f004 fde5 	bl	1cea0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   182d6:	2200      	movs	r2, #0
   182d8:	2300      	movs	r3, #0
   182da:	f010 fe56 	bl	28f8a <net_buf_alloc_fixed>
		if (!frag) {
   182de:	4605      	mov	r5, r0
   182e0:	2800      	cmp	r0, #0
   182e2:	d0d4      	beq.n	1828e <find_type_cb+0x6a>
		net_buf_frag_add(data->buf, frag);
   182e4:	4601      	mov	r1, r0
   182e6:	6860      	ldr	r0, [r4, #4]
   182e8:	f010 fee3 	bl	290b2 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   182ec:	2300      	movs	r3, #0
   182ee:	9300      	str	r3, [sp, #0]
   182f0:	f8d6 a004 	ldr.w	sl, [r6, #4]
   182f4:	4631      	mov	r1, r6
   182f6:	2310      	movs	r3, #16
   182f8:	f107 0208 	add.w	r2, r7, #8
   182fc:	4648      	mov	r0, r9
   182fe:	47d0      	blx	sl
	if (read < 0) {
   18300:	1e06      	subs	r6, r0, #0
   18302:	db19      	blt.n	18338 <find_type_cb+0x114>
	if (read != data->value_len) {
   18304:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   18306:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   18308:	4296      	cmp	r6, r2
   1830a:	d040      	beq.n	1838e <find_type_cb+0x16a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1830c:	4601      	mov	r1, r0
   1830e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   18312:	f00e fdc8 	bl	26ea6 <bt_uuid_create>
   18316:	b9b0      	cbnz	r0, 18346 <find_type_cb+0x122>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   18318:	466d      	mov	r5, sp
   1831a:	b088      	sub	sp, #32
   1831c:	7c23      	ldrb	r3, [r4, #16]
   1831e:	aa02      	add	r2, sp, #8
   18320:	491e      	ldr	r1, [pc, #120]	; (1839c <find_type_cb+0x178>)
   18322:	e9c2 1305 	strd	r1, r3, [r2, #20]
			BT_WARN("Unable to create UUID: size %d", read);
   18326:	2303      	movs	r3, #3
   18328:	f842 3f10 	str.w	r3, [r2, #16]!
   1832c:	481c      	ldr	r0, [pc, #112]	; (183a0 <find_type_cb+0x17c>)
   1832e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18332:	f00f fab9 	bl	278a8 <z_log_msg_static_create.constprop.0>
   18336:	46ad      	mov	sp, r5
	data->group = NULL;
   18338:	2300      	movs	r3, #0
   1833a:	60a3      	str	r3, [r4, #8]
   1833c:	e79c      	b.n	18278 <find_type_cb+0x54>
	return net_buf_simple_tailroom(&buf->b);
   1833e:	4618      	mov	r0, r3
   18340:	f010 ff0b 	bl	2915a <net_buf_simple_tailroom>
   18344:	e7c2      	b.n	182cc <find_type_cb+0xa8>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   18346:	b2f2      	uxtb	r2, r6
   18348:	f107 0108 	add.w	r1, r7, #8
   1834c:	f107 0018 	add.w	r0, r7, #24
   18350:	f00e fda9 	bl	26ea6 <bt_uuid_create>
   18354:	b930      	cbnz	r0, 18364 <find_type_cb+0x140>
			BT_WARN("Unable to create UUID: size %d", read);
   18356:	466d      	mov	r5, sp
   18358:	b088      	sub	sp, #32
   1835a:	aa02      	add	r2, sp, #8
   1835c:	4b11      	ldr	r3, [pc, #68]	; (183a4 <find_type_cb+0x180>)
   1835e:	e9c2 3605 	strd	r3, r6, [r2, #20]
   18362:	e7e0      	b.n	18326 <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   18364:	f107 0118 	add.w	r1, r7, #24
   18368:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1836c:	f00e fd6d 	bl	26e4a <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   18370:	2800      	cmp	r0, #0
   18372:	d1e1      	bne.n	18338 <find_type_cb+0x114>
	data->err = 0x00;
   18374:	2300      	movs	r3, #0
   18376:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   18378:	2104      	movs	r1, #4
   1837a:	f105 0008 	add.w	r0, r5, #8
   1837e:	f010 fea9 	bl	290d4 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   18382:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   18384:	f8a0 8000 	strh.w	r8, [r0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18388:	f8a0 8002 	strh.w	r8, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1838c:	e774      	b.n	18278 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   1838e:	4632      	mov	r2, r6
   18390:	f107 0108 	add.w	r1, r7, #8
   18394:	f00e fc97 	bl	26cc6 <memcmp>
   18398:	e7ea      	b.n	18370 <find_type_cb+0x14c>
   1839a:	bf00      	nop
   1839c:	0002d2d0 	.word	0x0002d2d0
   183a0:	0002abd8 	.word	0x0002abd8
   183a4:	0002d2ef 	.word	0x0002d2ef

000183a8 <att_get>:
{
   183a8:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   183aa:	7b43      	ldrb	r3, [r0, #13]
   183ac:	2b07      	cmp	r3, #7
{
   183ae:	b086      	sub	sp, #24
	if (conn->state != BT_CONN_CONNECTED) {
   183b0:	d00d      	beq.n	183ce <att_get+0x26>
		BT_WARN("Not connected");
   183b2:	4b10      	ldr	r3, [pc, #64]	; (183f4 <att_get+0x4c>)
   183b4:	9305      	str	r3, [sp, #20]
   183b6:	4810      	ldr	r0, [pc, #64]	; (183f8 <att_get+0x50>)
   183b8:	2302      	movs	r3, #2
   183ba:	aa04      	add	r2, sp, #16
   183bc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return NULL;
   183c0:	2400      	movs	r4, #0
		BT_WARN("Not connected");
   183c2:	9304      	str	r3, [sp, #16]
   183c4:	f00f fa70 	bl	278a8 <z_log_msg_static_create.constprop.0>
}
   183c8:	4620      	mov	r0, r4
   183ca:	b006      	add	sp, #24
   183cc:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   183ce:	2104      	movs	r1, #4
   183d0:	f00f f927 	bl	27622 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   183d4:	4604      	mov	r4, r0
   183d6:	b950      	cbnz	r0, 183ee <att_get+0x46>
		BT_ERR("Unable to find ATT channel");
   183d8:	4b08      	ldr	r3, [pc, #32]	; (183fc <att_get+0x54>)
   183da:	9305      	str	r3, [sp, #20]
   183dc:	4806      	ldr	r0, [pc, #24]	; (183f8 <att_get+0x50>)
   183de:	2302      	movs	r3, #2
   183e0:	aa04      	add	r2, sp, #16
   183e2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   183e6:	9304      	str	r3, [sp, #16]
   183e8:	f00f fa5e 	bl	278a8 <z_log_msg_static_create.constprop.0>
		return NULL;
   183ec:	e7ec      	b.n	183c8 <att_get+0x20>
	return att_chan->att;
   183ee:	f850 4c04 	ldr.w	r4, [r0, #-4]
   183f2:	e7e9      	b.n	183c8 <att_get+0x20>
   183f4:	0002d30e 	.word	0x0002d30e
   183f8:	0002abd8 	.word	0x0002abd8
   183fc:	0002d31c 	.word	0x0002d31c

00018400 <bt_att_connected>:
{
   18400:	b510      	push	{r4, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   18402:	1f02      	subs	r2, r0, #4
{
   18404:	4604      	mov	r4, r0
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   18406:	308c      	adds	r0, #140	; 0x8c
   18408:	f3bf 8f5b 	dmb	ish
   1840c:	e850 3f00 	ldrex	r3, [r0]
   18410:	f043 0304 	orr.w	r3, r3, #4
   18414:	e840 3100 	strex	r1, r3, [r0]
   18418:	2900      	cmp	r1, #0
   1841a:	d1f7      	bne.n	1840c <bt_att_connected+0xc>
   1841c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   18420:	2103      	movs	r1, #3
   18422:	f00f f970 	bl	27706 <atomic_test_bit>
   18426:	b910      	cbnz	r0, 1842e <bt_att_connected+0x2e>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   18428:	2317      	movs	r3, #23
   1842a:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1842c:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1842e:	4610      	mov	r0, r2
   18430:	f00f f9c7 	bl	277c2 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   18434:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   18438:	4903      	ldr	r1, [pc, #12]	; (18448 <bt_att_connected+0x48>)
   1843a:	f011 fe5e 	bl	2a0fa <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1843e:	6820      	ldr	r0, [r4, #0]
}
   18440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   18444:	f002 baaa 	b.w	1a99c <bt_gatt_connected>
   18448:	00019539 	.word	0x00019539

0001844c <chan_send>:
{
   1844c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	hdr = (void *)buf->data;
   18450:	688b      	ldr	r3, [r1, #8]
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   18452:	f8d1 9014 	ldr.w	r9, [r1, #20]
{
   18456:	b089      	sub	sp, #36	; 0x24
   18458:	4606      	mov	r6, r0
   1845a:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1845c:	3090      	adds	r0, #144	; 0x90
   1845e:	2102      	movs	r1, #2
   18460:	f00f f951 	bl	27706 <atomic_test_bit>
   18464:	2800      	cmp	r0, #0
   18466:	d043      	beq.n	184f0 <chan_send+0xa4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   18468:	781b      	ldrb	r3, [r3, #0]
   1846a:	2bd2      	cmp	r3, #210	; 0xd2
   1846c:	d11a      	bne.n	184a4 <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   1846e:	6833      	ldr	r3, [r6, #0]
   18470:	4621      	mov	r1, r4
   18472:	6818      	ldr	r0, [r3, #0]
   18474:	f003 fc5c 	bl	1bd30 <bt_smp_sign>
		if (err) {
   18478:	4605      	mov	r5, r0
   1847a:	b198      	cbz	r0, 184a4 <chan_send+0x58>
			BT_ERR("Error signing data");
   1847c:	4b1e      	ldr	r3, [pc, #120]	; (184f8 <chan_send+0xac>)
   1847e:	481f      	ldr	r0, [pc, #124]	; (184fc <chan_send+0xb0>)
   18480:	9307      	str	r3, [sp, #28]
   18482:	aa06      	add	r2, sp, #24
   18484:	2302      	movs	r3, #2
   18486:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1848a:	9306      	str	r3, [sp, #24]
   1848c:	f00f fa0c 	bl	278a8 <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   18490:	6960      	ldr	r0, [r4, #20]
   18492:	f7ff feb9 	bl	18208 <tx_meta_data_free>
			net_buf_unref(buf);
   18496:	4620      	mov	r0, r4
   18498:	f004 fdc6 	bl	1d028 <net_buf_unref>
}
   1849c:	4628      	mov	r0, r5
   1849e:	b009      	add	sp, #36	; 0x24
   184a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   184a4:	f104 0008 	add.w	r0, r4, #8
   184a8:	f010 fe53 	bl	29152 <net_buf_simple_headroom>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   184ac:	6833      	ldr	r3, [r6, #0]
	state->len = buf->len;
   184ae:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   184b2:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   184b4:	68a3      	ldr	r3, [r4, #8]
	data->att_chan = chan;
   184b6:	f8c9 6000 	str.w	r6, [r9]
	state->offset = net_buf_simple_headroom(buf);
   184ba:	4607      	mov	r7, r0
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   184bc:	7818      	ldrb	r0, [r3, #0]
   184be:	f00f f8dd 	bl	2767c <att_op_get_type>
	switch (op_type) {
   184c2:	2805      	cmp	r0, #5
   184c4:	bf96      	itet	ls
   184c6:	4b0e      	ldrls	r3, [pc, #56]	; (18500 <chan_send+0xb4>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   184c8:	4b0e      	ldrhi	r3, [pc, #56]	; (18504 <chan_send+0xb8>)
   184ca:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   184ce:	f8cd 9000 	str.w	r9, [sp]
   184d2:	4628      	mov	r0, r5
   184d4:	4622      	mov	r2, r4
   184d6:	2104      	movs	r1, #4
   184d8:	f00f f880 	bl	275dc <bt_l2cap_send_cb>
	if (err) {
   184dc:	4605      	mov	r5, r0
   184de:	2800      	cmp	r0, #0
   184e0:	d0dc      	beq.n	1849c <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   184e2:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   184e4:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   184e8:	fa10 f787 	uxtah	r7, r0, r7
   184ec:	60a7      	str	r7, [r4, #8]
}
   184ee:	e7d5      	b.n	1849c <chan_send+0x50>
		return -EINVAL;
   184f0:	f06f 0515 	mvn.w	r5, #21
   184f4:	e7d2      	b.n	1849c <chan_send+0x50>
   184f6:	bf00      	nop
   184f8:	0002d337 	.word	0x0002d337
   184fc:	0002abd8 	.word	0x0002abd8
   18500:	0002b478 	.word	0x0002b478
   18504:	00027ca9 	.word	0x00027ca9

00018508 <read_group_cb>:
{
   18508:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1850c:	4605      	mov	r5, r0
   1850e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18510:	f04f 0800 	mov.w	r8, #0
   18514:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18518:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1851a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1851c:	f88d 8008 	strb.w	r8, [sp, #8]
   18520:	a902      	add	r1, sp, #8
{
   18522:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18524:	f8ad 300a 	strh.w	r3, [sp, #10]
   18528:	f00e fc8f 	bl	26e4a <bt_uuid_cmp>
   1852c:	b1a0      	cbz	r0, 18558 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1852e:	f642 0301 	movw	r3, #10241	; 0x2801
   18532:	6828      	ldr	r0, [r5, #0]
   18534:	f88d 800c 	strb.w	r8, [sp, #12]
   18538:	a903      	add	r1, sp, #12
   1853a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1853e:	f00e fc84 	bl	26e4a <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18542:	b148      	cbz	r0, 18558 <read_group_cb+0x50>
		if (data->group &&
   18544:	6923      	ldr	r3, [r4, #16]
   18546:	b11b      	cbz	r3, 18550 <read_group_cb+0x48>
   18548:	885a      	ldrh	r2, [r3, #2]
   1854a:	42b2      	cmp	r2, r6
   1854c:	d200      	bcs.n	18550 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1854e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   18550:	2001      	movs	r0, #1
}
   18552:	b004      	add	sp, #16
   18554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   18558:	6861      	ldr	r1, [r4, #4]
   1855a:	6828      	ldr	r0, [r5, #0]
   1855c:	f00e fc75 	bl	26e4a <bt_uuid_cmp>
   18560:	b110      	cbz	r0, 18568 <read_group_cb+0x60>
		data->group = NULL;
   18562:	2300      	movs	r3, #0
   18564:	6123      	str	r3, [r4, #16]
   18566:	e7f3      	b.n	18550 <read_group_cb+0x48>
	if (data->rsp->len &&
   18568:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1856a:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   1856c:	781a      	ldrb	r2, [r3, #0]
   1856e:	b132      	cbz	r2, 1857e <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   18570:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   18572:	8981      	ldrh	r1, [r0, #12]
   18574:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   18576:	4293      	cmp	r3, r2
   18578:	da01      	bge.n	1857e <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   1857a:	2000      	movs	r0, #0
   1857c:	e7e9      	b.n	18552 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1857e:	2104      	movs	r1, #4
   18580:	3008      	adds	r0, #8
   18582:	f010 fda7 	bl	290d4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18586:	4b09      	ldr	r3, [pc, #36]	; (185ac <read_group_cb+0xa4>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   18588:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1858a:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1858c:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1858e:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18590:	4629      	mov	r1, r5
   18592:	9300      	str	r3, [sp, #0]
   18594:	9401      	str	r4, [sp, #4]
   18596:	2300      	movs	r3, #0
   18598:	4638      	mov	r0, r7
   1859a:	f00f f9f6 	bl	2798a <att_chan_read>
	if (read < 0) {
   1859e:	2800      	cmp	r0, #0
   185a0:	dbeb      	blt.n	1857a <read_group_cb+0x72>
	if (!data->group) {
   185a2:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   185a4:	3800      	subs	r0, #0
   185a6:	bf18      	it	ne
   185a8:	2001      	movne	r0, #1
   185aa:	e7d2      	b.n	18552 <read_group_cb+0x4a>
   185ac:	00027823 	.word	0x00027823

000185b0 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   185b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   185b4:	b082      	sub	sp, #8
   185b6:	af00      	add	r7, sp, #0
   185b8:	4680      	mov	r8, r0
   185ba:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   185bc:	483a      	ldr	r0, [pc, #232]	; (186a8 <bt_att_accept+0xf8>)
   185be:	2200      	movs	r2, #0
   185c0:	2300      	movs	r3, #0
   185c2:	4639      	mov	r1, r7
   185c4:	f008 fcc0 	bl	20f48 <k_mem_slab_alloc>
   185c8:	4605      	mov	r5, r0
   185ca:	b188      	cbz	r0, 185f0 <bt_att_accept+0x40>
		BT_ERR("No available ATT context for conn %p", conn);
   185cc:	466c      	mov	r4, sp
   185ce:	b088      	sub	sp, #32
   185d0:	466a      	mov	r2, sp
   185d2:	4b36      	ldr	r3, [pc, #216]	; (186ac <bt_att_accept+0xfc>)
   185d4:	e9c2 3805 	strd	r3, r8, [r2, #20]
   185d8:	2303      	movs	r3, #3
   185da:	f842 3f10 	str.w	r3, [r2, #16]!
   185de:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		BT_WARN("No available ATT channel for conn %p", att->conn);
   185e2:	4833      	ldr	r0, [pc, #204]	; (186b0 <bt_att_accept+0x100>)
   185e4:	f00f f960 	bl	278a8 <z_log_msg_static_create.constprop.0>
   185e8:	46a5      	mov	sp, r4
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   185ea:	f06f 050b 	mvn.w	r5, #11
   185ee:	e055      	b.n	1869c <bt_att_accept+0xec>
	return z_impl_z_current_get();
   185f0:	f009 fbd0 	bl	21d94 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   185f4:	4b2f      	ldr	r3, [pc, #188]	; (186b4 <bt_att_accept+0x104>)
	(void)memset(att, 0, sizeof(*att));
   185f6:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   185f8:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   185fa:	2234      	movs	r2, #52	; 0x34
   185fc:	6838      	ldr	r0, [r7, #0]
   185fe:	f00e fb96 	bl	26d2e <memset>
	att->conn = conn;
   18602:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   18604:	482c      	ldr	r0, [pc, #176]	; (186b8 <bt_att_accept+0x108>)
	list->tail = NULL;
   18606:	60a5      	str	r5, [r4, #8]
	list->head = NULL;
   18608:	e9c4 8500 	strd	r8, r5, [r4]
	list->tail = NULL;
   1860c:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
   18610:	2200      	movs	r2, #0
   18612:	2300      	movs	r3, #0
   18614:	1d39      	adds	r1, r7, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   18616:	607d      	str	r5, [r7, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   18618:	f008 fc96 	bl	20f48 <k_mem_slab_alloc>
   1861c:	4605      	mov	r5, r0
   1861e:	b160      	cbz	r0, 1863a <bt_att_accept+0x8a>
		BT_WARN("No available ATT channel for conn %p", att->conn);
   18620:	6823      	ldr	r3, [r4, #0]
   18622:	466c      	mov	r4, sp
   18624:	b088      	sub	sp, #32
   18626:	466a      	mov	r2, sp
   18628:	4924      	ldr	r1, [pc, #144]	; (186bc <bt_att_accept+0x10c>)
   1862a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1862e:	2303      	movs	r3, #3
   18630:	f842 3f10 	str.w	r3, [r2, #16]!
   18634:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18638:	e7d3      	b.n	185e2 <bt_att_accept+0x32>
	(void)memset(chan, 0, sizeof(*chan));
   1863a:	4601      	mov	r1, r0
   1863c:	22e8      	movs	r2, #232	; 0xe8
   1863e:	6878      	ldr	r0, [r7, #4]
   18640:	f00e fb75 	bl	26d2e <memset>
	chan->chan.chan.ops = &ops;
   18644:	6878      	ldr	r0, [r7, #4]
   18646:	4b1e      	ldr	r3, [pc, #120]	; (186c0 <bt_att_accept+0x110>)
   18648:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   1864a:	3098      	adds	r0, #152	; 0x98
   1864c:	f011 fc34 	bl	29eb8 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18650:	687b      	ldr	r3, [r7, #4]
   18652:	f3bf 8f5b 	dmb	ish
   18656:	3390      	adds	r3, #144	; 0x90
   18658:	e853 2f00 	ldrex	r2, [r3]
   1865c:	e843 5100 	strex	r1, r5, [r3]
   18660:	2900      	cmp	r1, #0
   18662:	d1f9      	bne.n	18658 <bt_att_accept+0xa8>
   18664:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   18668:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   1866c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	chan->att = att;
   1866e:	f8c8 4000 	str.w	r4, [r8]
	if (sys_slist_is_empty(&att->chans)) {
   18672:	b92b      	cbnz	r3, 18680 <bt_att_accept+0xd0>
   18674:	f104 000c 	add.w	r0, r4, #12
   18678:	f011 fc1e 	bl	29eb8 <z_impl_k_queue_init>
   1867c:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	parent->next = child;
   18680:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   18682:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
Z_GENLIST_PREPEND(slist, snode)
   18686:	6b22      	ldr	r2, [r4, #48]	; 0x30
	sys_slist_prepend(&att->chans, &chan->node);
   18688:	f108 03e0 	add.w	r3, r8, #224	; 0xe0
	list->head = node;
   1868c:	62e3      	str	r3, [r4, #44]	; 0x2c
Z_GENLIST_PREPEND(slist, snode)
   1868e:	b902      	cbnz	r2, 18692 <bt_att_accept+0xe2>
	list->tail = node;
   18690:	6323      	str	r3, [r4, #48]	; 0x30
	return chan;
   18692:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   18694:	2b00      	cmp	r3, #0
   18696:	d0a8      	beq.n	185ea <bt_att_accept+0x3a>
	}

	*ch = &chan->chan.chan;
   18698:	3304      	adds	r3, #4
   1869a:	6033      	str	r3, [r6, #0]

	return 0;
}
   1869c:	4628      	mov	r0, r5
   1869e:	3708      	adds	r7, #8
   186a0:	46bd      	mov	sp, r7
   186a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   186a6:	bf00      	nop
   186a8:	20000928 	.word	0x20000928
   186ac:	0002d34a 	.word	0x0002d34a
   186b0:	0002abd8 	.word	0x0002abd8
   186b4:	20002ba8 	.word	0x20002ba8
   186b8:	20000944 	.word	0x20000944
   186bc:	0002d36f 	.word	0x0002d36f
   186c0:	20000608 	.word	0x20000608

000186c4 <read_type_cb>:
{
   186c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   186c8:	f8d2 8000 	ldr.w	r8, [r2]
{
   186cc:	4606      	mov	r6, r0
   186ce:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   186d0:	6800      	ldr	r0, [r0, #0]
   186d2:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   186d4:	f8d8 5004 	ldr.w	r5, [r8, #4]
{
   186d8:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   186da:	f00e fbb6 	bl	26e4a <bt_uuid_cmp>
   186de:	4607      	mov	r7, r0
   186e0:	2800      	cmp	r0, #0
   186e2:	d13e      	bne.n	18762 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   186e4:	4628      	mov	r0, r5
   186e6:	2295      	movs	r2, #149	; 0x95
   186e8:	4631      	mov	r1, r6
   186ea:	f00f ff2d 	bl	28548 <bt_gatt_check_perm>
   186ee:	4605      	mov	r5, r0
   186f0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   186f2:	b148      	cbz	r0, 18708 <read_type_cb+0x44>
		if (data->rsp->len) {
   186f4:	68e3      	ldr	r3, [r4, #12]
   186f6:	781b      	ldrb	r3, [r3, #0]
   186f8:	b923      	cbnz	r3, 18704 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   186fa:	2500      	movs	r5, #0
}
   186fc:	4628      	mov	r0, r5
   186fe:	b003      	add	sp, #12
   18700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   18704:	7527      	strb	r7, [r4, #20]
   18706:	e7f8      	b.n	186fa <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   18708:	68a0      	ldr	r0, [r4, #8]
   1870a:	f010 fcc1 	bl	29090 <net_buf_frag_last>
   1870e:	2102      	movs	r1, #2
   18710:	3008      	adds	r0, #8
   18712:	f010 fcdf 	bl	290d4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   18716:	4b14      	ldr	r3, [pc, #80]	; (18768 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   18718:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1871a:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   1871c:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   18720:	4631      	mov	r1, r6
   18722:	9300      	str	r3, [sp, #0]
   18724:	9401      	str	r4, [sp, #4]
   18726:	462b      	mov	r3, r5
   18728:	4640      	mov	r0, r8
   1872a:	f00f f92e 	bl	2798a <att_chan_read>
	if (read < 0) {
   1872e:	2800      	cmp	r0, #0
   18730:	da07      	bge.n	18742 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   18732:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   18736:	bf26      	itte	cs
   18738:	4240      	negcs	r0, r0
   1873a:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1873c:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1873e:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   18740:	e7dc      	b.n	186fc <read_type_cb+0x38>
	if (!data->item) {
   18742:	6923      	ldr	r3, [r4, #16]
   18744:	2b00      	cmp	r3, #0
   18746:	d0d8      	beq.n	186fa <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   18748:	68a0      	ldr	r0, [r4, #8]
   1874a:	f00e ff7f 	bl	2764c <net_buf_frags_len>
   1874e:	f8b8 502a 	ldrh.w	r5, [r8, #42]	; 0x2a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   18752:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   18754:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   18756:	7818      	ldrb	r0, [r3, #0]
   18758:	4285      	cmp	r5, r0
   1875a:	bf94      	ite	ls
   1875c:	2500      	movls	r5, #0
   1875e:	2501      	movhi	r5, #1
   18760:	e7cc      	b.n	186fc <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   18762:	2501      	movs	r5, #1
   18764:	e7ca      	b.n	186fc <read_type_cb+0x38>
   18766:	bf00      	nop
   18768:	0002765d 	.word	0x0002765d

0001876c <prep_write_cb>:
{
   1876c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18770:	4614      	mov	r4, r2
   18772:	4606      	mov	r6, r0
   18774:	460f      	mov	r7, r1
	data->err = bt_gatt_check_perm(data->conn, attr,
   18776:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1877a:	4601      	mov	r1, r0
   1877c:	6820      	ldr	r0, [r4, #0]
   1877e:	f00f fee3 	bl	28548 <bt_gatt_check_perm>
   18782:	4605      	mov	r5, r0
   18784:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   18786:	2800      	cmp	r0, #0
   18788:	d12e      	bne.n	187e8 <prep_write_cb+0x7c>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
   1878a:	8a73      	ldrh	r3, [r6, #18]
   1878c:	065b      	lsls	r3, r3, #25
   1878e:	d516      	bpl.n	187be <prep_write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
   18790:	2301      	movs	r3, #1
   18792:	9301      	str	r3, [sp, #4]
   18794:	89e3      	ldrh	r3, [r4, #14]
   18796:	9300      	str	r3, [sp, #0]
   18798:	f8d6 8008 	ldr.w	r8, [r6, #8]
   1879c:	89a3      	ldrh	r3, [r4, #12]
   1879e:	68a2      	ldr	r2, [r4, #8]
   187a0:	6820      	ldr	r0, [r4, #0]
   187a2:	4631      	mov	r1, r6
   187a4:	47c0      	blx	r8
	if (write != 0) {
   187a6:	b150      	cbz	r0, 187be <prep_write_cb+0x52>
	if (err < 0 && err >= -0xff) {
   187a8:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   187ac:	bf26      	itte	cs
   187ae:	4243      	negcs	r3, r0
   187b0:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   187b2:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
   187b4:	7423      	strb	r3, [r4, #16]
}
   187b6:	4628      	mov	r0, r5
   187b8:	b002      	add	sp, #8
   187ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
   187be:	480b      	ldr	r0, [pc, #44]	; (187ec <prep_write_cb+0x80>)
   187c0:	2200      	movs	r2, #0
   187c2:	2300      	movs	r3, #0
   187c4:	f010 fbe1 	bl	28f8a <net_buf_alloc_fixed>
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
   187c8:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
   187ca:	b908      	cbnz	r0, 187d0 <prep_write_cb+0x64>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
   187cc:	2309      	movs	r3, #9
   187ce:	e7f1      	b.n	187b4 <prep_write_cb+0x48>
	attr_data->offset = data->offset;
   187d0:	89e3      	ldrh	r3, [r4, #14]
   187d2:	82c3      	strh	r3, [r0, #22]
	attr_data->handle = handle;
   187d4:	8287      	strh	r7, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   187d6:	89a2      	ldrh	r2, [r4, #12]
   187d8:	68a1      	ldr	r1, [r4, #8]
   187da:	3008      	adds	r0, #8
   187dc:	f010 fc80 	bl	290e0 <net_buf_simple_add_mem>
	data->err = 0U;
   187e0:	2300      	movs	r3, #0
   187e2:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
   187e4:	2501      	movs	r5, #1
   187e6:	e7e6      	b.n	187b6 <prep_write_cb+0x4a>
		return BT_GATT_ITER_STOP;
   187e8:	2500      	movs	r5, #0
   187ea:	e7e4      	b.n	187b6 <prep_write_cb+0x4a>
   187ec:	20000b70 	.word	0x20000b70

000187f0 <bt_att_chan_create_pdu>:
{
   187f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   187f4:	b087      	sub	sp, #28
   187f6:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   187f8:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   187fa:	1c53      	adds	r3, r2, #1
   187fc:	428b      	cmp	r3, r1
{
   187fe:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   18800:	d915      	bls.n	1882e <bt_att_chan_create_pdu+0x3e>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   18802:	466c      	mov	r4, sp
   18804:	b088      	sub	sp, #32
   18806:	466a      	mov	r2, sp
   18808:	482b      	ldr	r0, [pc, #172]	; (188b8 <bt_att_chan_create_pdu+0xc8>)
   1880a:	61d3      	str	r3, [r2, #28]
   1880c:	2304      	movs	r3, #4
   1880e:	e9c2 0105 	strd	r0, r1, [r2, #20]
   18812:	f842 3f10 	str.w	r3, [r2, #16]!
   18816:	4829      	ldr	r0, [pc, #164]	; (188bc <bt_att_chan_create_pdu+0xcc>)
   18818:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1881c:	f00f f844 	bl	278a8 <z_log_msg_static_create.constprop.0>
   18820:	46a5      	mov	sp, r4
		return NULL;
   18822:	2400      	movs	r4, #0
}
   18824:	4620      	mov	r0, r4
   18826:	371c      	adds	r7, #28
   18828:	46bd      	mov	sp, r7
   1882a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   1882e:	4628      	mov	r0, r5
   18830:	f00e ff24 	bl	2767c <att_op_get_type>
   18834:	2802      	cmp	r0, #2
   18836:	d001      	beq.n	1883c <bt_att_chan_create_pdu+0x4c>
   18838:	2804      	cmp	r0, #4
   1883a:	d11b      	bne.n	18874 <bt_att_chan_create_pdu+0x84>
   1883c:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   18840:	f04f 0900 	mov.w	r9, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   18844:	2100      	movs	r1, #0
   18846:	4642      	mov	r2, r8
   18848:	464b      	mov	r3, r9
   1884a:	4608      	mov	r0, r1
   1884c:	f00e fec3 	bl	275d6 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   18850:	4604      	mov	r4, r0
   18852:	b9a0      	cbnz	r0, 1887e <bt_att_chan_create_pdu+0x8e>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   18854:	466e      	mov	r6, sp
   18856:	b088      	sub	sp, #32
   18858:	466a      	mov	r2, sp
   1885a:	4b19      	ldr	r3, [pc, #100]	; (188c0 <bt_att_chan_create_pdu+0xd0>)
   1885c:	4817      	ldr	r0, [pc, #92]	; (188bc <bt_att_chan_create_pdu+0xcc>)
   1885e:	e9c2 3505 	strd	r3, r5, [r2, #20]
   18862:	2303      	movs	r3, #3
   18864:	f842 3f10 	str.w	r3, [r2, #16]!
   18868:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1886c:	f00f f81c 	bl	278a8 <z_log_msg_static_create.constprop.0>
   18870:	46b5      	mov	sp, r6
		return NULL;
   18872:	e7d7      	b.n	18824 <bt_att_chan_create_pdu+0x34>
		timeout = K_FOREVER;
   18874:	f04f 38ff 	mov.w	r8, #4294967295
   18878:	f04f 39ff 	mov.w	r9, #4294967295
   1887c:	e7e2      	b.n	18844 <bt_att_chan_create_pdu+0x54>
	return z_impl_k_queue_get(queue, timeout);
   1887e:	4811      	ldr	r0, [pc, #68]	; (188c4 <bt_att_chan_create_pdu+0xd4>)
   18880:	4642      	mov	r2, r8
   18882:	464b      	mov	r3, r9
   18884:	f008 fd16 	bl	212b4 <z_impl_k_queue_get>
	if (!data) {
   18888:	b970      	cbnz	r0, 188a8 <bt_att_chan_create_pdu+0xb8>
		BT_WARN("Unable to allocate ATT TX meta");
   1888a:	4b0f      	ldr	r3, [pc, #60]	; (188c8 <bt_att_chan_create_pdu+0xd8>)
   1888c:	617b      	str	r3, [r7, #20]
   1888e:	480b      	ldr	r0, [pc, #44]	; (188bc <bt_att_chan_create_pdu+0xcc>)
   18890:	2302      	movs	r3, #2
   18892:	f107 0210 	add.w	r2, r7, #16
   18896:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1889a:	613b      	str	r3, [r7, #16]
   1889c:	f00f f804 	bl	278a8 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   188a0:	4620      	mov	r0, r4
   188a2:	f004 fbc1 	bl	1d028 <net_buf_unref>
		return NULL;
   188a6:	e7bc      	b.n	18822 <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   188a8:	6160      	str	r0, [r4, #20]
	return net_buf_simple_add(&buf->b, len);
   188aa:	2101      	movs	r1, #1
   188ac:	f104 0008 	add.w	r0, r4, #8
   188b0:	f010 fc10 	bl	290d4 <net_buf_simple_add>
	hdr->code = op;
   188b4:	7005      	strb	r5, [r0, #0]
	return buf;
   188b6:	e7b5      	b.n	18824 <bt_att_chan_create_pdu+0x34>
   188b8:	0002d394 	.word	0x0002d394
   188bc:	0002abd8 	.word	0x0002abd8
   188c0:	0002d18e 	.word	0x0002d18e
   188c4:	20000a38 	.word	0x20000a38
   188c8:	0002d3b9 	.word	0x0002d3b9

000188cc <bt_att_recv>:
{
   188cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   188d0:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   188d2:	898b      	ldrh	r3, [r1, #12]
{
   188d4:	af00      	add	r7, sp, #0
   188d6:	4682      	mov	sl, r0
   188d8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   188da:	b97b      	cbnz	r3, 188fc <bt_att_recv+0x30>
		BT_ERR("Too small ATT PDU received");
   188dc:	4b46      	ldr	r3, [pc, #280]	; (189f8 <bt_att_recv+0x12c>)
   188de:	617b      	str	r3, [r7, #20]
   188e0:	2302      	movs	r3, #2
   188e2:	613b      	str	r3, [r7, #16]
   188e4:	f107 0210 	add.w	r2, r7, #16
   188e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			BT_WARN("Ignoring unexpected indication");
   188ec:	4843      	ldr	r0, [pc, #268]	; (189fc <bt_att_recv+0x130>)
   188ee:	f00e ffdb 	bl	278a8 <z_log_msg_static_create.constprop.0>
}
   188f2:	2000      	movs	r0, #0
   188f4:	3718      	adds	r7, #24
   188f6:	46bd      	mov	sp, r7
   188f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   188fc:	2101      	movs	r1, #1
   188fe:	f104 0008 	add.w	r0, r4, #8
   18902:	f010 fc0e 	bl	29122 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   18906:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   1890a:	4605      	mov	r5, r0
   1890c:	2b00      	cmp	r3, #0
   1890e:	d0f0      	beq.n	188f2 <bt_att_recv+0x26>
		if (hdr->code == handlers[i].op) {
   18910:	7801      	ldrb	r1, [r0, #0]
   18912:	4e3b      	ldr	r6, [pc, #236]	; (18a00 <bt_att_recv+0x134>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   18914:	f1aa 0804 	sub.w	r8, sl, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   18918:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   1891a:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   1891e:	428a      	cmp	r2, r1
   18920:	d116      	bne.n	18950 <bt_att_recv+0x84>
		if (handler->type == ATT_REQUEST &&
   18922:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   18926:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   1892a:	789b      	ldrb	r3, [r3, #2]
   1892c:	2b01      	cmp	r3, #1
   1892e:	d131      	bne.n	18994 <bt_att_recv+0xc8>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   18930:	2100      	movs	r1, #0
   18932:	f10a 008c 	add.w	r0, sl, #140	; 0x8c
   18936:	f00f f813 	bl	27960 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1893a:	2800      	cmp	r0, #0
   1893c:	d034      	beq.n	189a8 <bt_att_recv+0xdc>
			BT_WARN("Ignoring unexpected request");
   1893e:	4b31      	ldr	r3, [pc, #196]	; (18a04 <bt_att_recv+0x138>)
			BT_WARN("Ignoring unexpected indication");
   18940:	617b      	str	r3, [r7, #20]
   18942:	2302      	movs	r3, #2
   18944:	613b      	str	r3, [r7, #16]
   18946:	f107 0210 	add.w	r2, r7, #16
   1894a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1894e:	e7cd      	b.n	188ec <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   18950:	3301      	adds	r3, #1
   18952:	2b0f      	cmp	r3, #15
   18954:	d1e1      	bne.n	1891a <bt_att_recv+0x4e>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   18956:	466c      	mov	r4, sp
   18958:	b088      	sub	sp, #32
   1895a:	466a      	mov	r2, sp
   1895c:	4b2a      	ldr	r3, [pc, #168]	; (18a08 <bt_att_recv+0x13c>)
   1895e:	4827      	ldr	r0, [pc, #156]	; (189fc <bt_att_recv+0x130>)
   18960:	e9c2 3105 	strd	r3, r1, [r2, #20]
   18964:	2303      	movs	r3, #3
   18966:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1896a:	f842 3f10 	str.w	r3, [r2, #16]!
   1896e:	f00e ff9b 	bl	278a8 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   18972:	7829      	ldrb	r1, [r5, #0]
   18974:	46a5      	mov	sp, r4
   18976:	4608      	mov	r0, r1
   18978:	f00e fe80 	bl	2767c <att_op_get_type>
   1897c:	2800      	cmp	r0, #0
   1897e:	d0b8      	beq.n	188f2 <bt_att_recv+0x26>
   18980:	2805      	cmp	r0, #5
   18982:	d0b6      	beq.n	188f2 <bt_att_recv+0x26>
	if (!req) {
   18984:	2900      	cmp	r1, #0
   18986:	d0b4      	beq.n	188f2 <bt_att_recv+0x26>
   18988:	2306      	movs	r3, #6
   1898a:	2200      	movs	r2, #0
   1898c:	4640      	mov	r0, r8
   1898e:	f00f f9f5 	bl	27d7c <send_err_rsp.part.0>
   18992:	e7ae      	b.n	188f2 <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   18994:	2b05      	cmp	r3, #5
   18996:	d107      	bne.n	189a8 <bt_att_recv+0xdc>
			   atomic_test_and_set_bit(att_chan->flags,
   18998:	2101      	movs	r1, #1
   1899a:	f10a 008c 	add.w	r0, sl, #140	; 0x8c
   1899e:	f00e ffdf 	bl	27960 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   189a2:	b108      	cbz	r0, 189a8 <bt_att_recv+0xdc>
			BT_WARN("Ignoring unexpected indication");
   189a4:	4b19      	ldr	r3, [pc, #100]	; (18a0c <bt_att_recv+0x140>)
   189a6:	e7cb      	b.n	18940 <bt_att_recv+0x74>
	if (buf->len < handler->expect_len) {
   189a8:	eb06 0309 	add.w	r3, r6, r9
   189ac:	89a1      	ldrh	r1, [r4, #12]
   189ae:	785a      	ldrb	r2, [r3, #1]
   189b0:	428a      	cmp	r2, r1
   189b2:	d91b      	bls.n	189ec <bt_att_recv+0x120>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   189b4:	46ea      	mov	sl, sp
   189b6:	b088      	sub	sp, #32
   189b8:	782b      	ldrb	r3, [r5, #0]
   189ba:	466a      	mov	r2, sp
   189bc:	4814      	ldr	r0, [pc, #80]	; (18a10 <bt_att_recv+0x144>)
   189be:	61d3      	str	r3, [r2, #28]
   189c0:	2404      	movs	r4, #4
   189c2:	e9c2 0105 	strd	r0, r1, [r2, #20]
   189c6:	f842 4f10 	str.w	r4, [r2, #16]!
   189ca:	480c      	ldr	r0, [pc, #48]	; (189fc <bt_att_recv+0x130>)
   189cc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   189d0:	f00e ff6a 	bl	278a8 <z_log_msg_static_create.constprop.0>
		err = BT_ATT_ERR_INVALID_PDU;
   189d4:	4623      	mov	r3, r4
   189d6:	46d5      	mov	sp, sl
	if (handler->type == ATT_REQUEST && err) {
   189d8:	444e      	add	r6, r9
   189da:	78b2      	ldrb	r2, [r6, #2]
   189dc:	2a01      	cmp	r2, #1
   189de:	d188      	bne.n	188f2 <bt_att_recv+0x26>
   189e0:	2b00      	cmp	r3, #0
   189e2:	d086      	beq.n	188f2 <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   189e4:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   189e6:	2900      	cmp	r1, #0
   189e8:	d083      	beq.n	188f2 <bt_att_recv+0x26>
   189ea:	e7ce      	b.n	1898a <bt_att_recv+0xbe>
		err = handler->func(att_chan, buf);
   189ec:	685b      	ldr	r3, [r3, #4]
   189ee:	4621      	mov	r1, r4
   189f0:	4640      	mov	r0, r8
   189f2:	4798      	blx	r3
   189f4:	4603      	mov	r3, r0
   189f6:	e7ef      	b.n	189d8 <bt_att_recv+0x10c>
   189f8:	0002d3d8 	.word	0x0002d3d8
   189fc:	0002abd8 	.word	0x0002abd8
   18a00:	0002b490 	.word	0x0002b490
   18a04:	0002d3f3 	.word	0x0002d3f3
   18a08:	0002d44d 	.word	0x0002d44d
   18a0c:	0002d40f 	.word	0x0002d40f
   18a10:	0002d42e 	.word	0x0002d42e

00018a14 <att_write_rsp>:
{
   18a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18a18:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   18a1a:	6803      	ldr	r3, [r0, #0]
   18a1c:	460e      	mov	r6, r1
   18a1e:	3900      	subs	r1, #0
{
   18a20:	b086      	sub	sp, #24
   18a22:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   18a24:	bf18      	it	ne
   18a26:	2101      	movne	r1, #1
   18a28:	6818      	ldr	r0, [r3, #0]
{
   18a2a:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   18a2c:	f00f fe43 	bl	286b6 <bt_gatt_change_aware>
   18a30:	b958      	cbnz	r0, 18a4a <att_write_rsp+0x36>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   18a32:	2105      	movs	r1, #5
   18a34:	f104 0090 	add.w	r0, r4, #144	; 0x90
   18a38:	f00e ff92 	bl	27960 <atomic_test_and_set_bit>
   18a3c:	2800      	cmp	r0, #0
   18a3e:	d052      	beq.n	18ae6 <att_write_rsp+0xd2>
			return 0;
   18a40:	2500      	movs	r5, #0
}
   18a42:	4628      	mov	r0, r5
   18a44:	b006      	add	sp, #24
   18a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   18a4a:	2f00      	cmp	r7, #0
   18a4c:	d04d      	beq.n	18aea <att_write_rsp+0xd6>
	(void)memset(&data, 0, sizeof(data));
   18a4e:	2218      	movs	r2, #24
   18a50:	2100      	movs	r1, #0
   18a52:	4668      	mov	r0, sp
   18a54:	f00e f96b 	bl	26d2e <memset>
	if (rsp) {
   18a58:	f1b8 0f00 	cmp.w	r8, #0
   18a5c:	d132      	bne.n	18ac4 <att_write_rsp+0xb0>
	data.conn = chan->att->conn;
   18a5e:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   18a60:	4a23      	ldr	r2, [pc, #140]	; (18af0 <att_write_rsp+0xdc>)
	data.conn = chan->att->conn;
   18a62:	681b      	ldr	r3, [r3, #0]
   18a64:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   18a66:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   18a6a:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   18a6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18a70:	9303      	str	r3, [sp, #12]
	data.len = len;
   18a72:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   18a76:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   18a7a:	2301      	movs	r3, #1
   18a7c:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   18a80:	4639      	mov	r1, r7
   18a82:	466b      	mov	r3, sp
   18a84:	4638      	mov	r0, r7
	data.req = req;
   18a86:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   18a8a:	f00e fe45 	bl	27718 <bt_gatt_foreach_attr>
	if (data.err) {
   18a8e:	f89d 5014 	ldrb.w	r5, [sp, #20]
   18a92:	b30d      	cbz	r5, 18ad8 <att_write_rsp+0xc4>
		if (rsp) {
   18a94:	f1b8 0f00 	cmp.w	r8, #0
   18a98:	d00f      	beq.n	18aba <att_write_rsp+0xa6>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18a9a:	9b01      	ldr	r3, [sp, #4]
   18a9c:	6958      	ldr	r0, [r3, #20]
   18a9e:	f7ff fbb3 	bl	18208 <tx_meta_data_free>
			net_buf_unref(data.buf);
   18aa2:	9801      	ldr	r0, [sp, #4]
   18aa4:	f004 fac0 	bl	1d028 <net_buf_unref>
	if (!req) {
   18aa8:	2e00      	cmp	r6, #0
   18aaa:	d0c9      	beq.n	18a40 <att_write_rsp+0x2c>
   18aac:	f89d 3014 	ldrb.w	r3, [sp, #20]
   18ab0:	463a      	mov	r2, r7
   18ab2:	4631      	mov	r1, r6
   18ab4:	4620      	mov	r0, r4
   18ab6:	f00f f961 	bl	27d7c <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   18aba:	2e18      	cmp	r6, #24
   18abc:	d1c0      	bne.n	18a40 <att_write_rsp+0x2c>
   18abe:	f89d 5014 	ldrb.w	r5, [sp, #20]
   18ac2:	e7be      	b.n	18a42 <att_write_rsp+0x2e>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   18ac4:	2200      	movs	r2, #0
   18ac6:	4641      	mov	r1, r8
   18ac8:	4620      	mov	r0, r4
   18aca:	f7ff fe91 	bl	187f0 <bt_att_chan_create_pdu>
   18ace:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   18ad0:	2800      	cmp	r0, #0
   18ad2:	d1c4      	bne.n	18a5e <att_write_rsp+0x4a>
			return BT_ATT_ERR_UNLIKELY;
   18ad4:	250e      	movs	r5, #14
   18ad6:	e7b4      	b.n	18a42 <att_write_rsp+0x2e>
	if (data.buf) {
   18ad8:	9901      	ldr	r1, [sp, #4]
   18ada:	2900      	cmp	r1, #0
   18adc:	d0b0      	beq.n	18a40 <att_write_rsp+0x2c>
		bt_att_chan_send_rsp(chan, data.buf);
   18ade:	4620      	mov	r0, r4
   18ae0:	f00e ff18 	bl	27914 <bt_att_chan_send_rsp>
   18ae4:	e7ad      	b.n	18a42 <att_write_rsp+0x2e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18ae6:	2512      	movs	r5, #18
   18ae8:	e7ab      	b.n	18a42 <att_write_rsp+0x2e>
		return BT_ATT_ERR_INVALID_HANDLE;
   18aea:	2501      	movs	r5, #1
   18aec:	e7a9      	b.n	18a42 <att_write_rsp+0x2e>
   18aee:	bf00      	nop
   18af0:	00027843 	.word	0x00027843

00018af4 <att_signed_write_cmd>:
{
   18af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   18af8:	6847      	ldr	r7, [r0, #4]
{
   18afa:	b08b      	sub	sp, #44	; 0x2c
   18afc:	4606      	mov	r6, r0
   18afe:	460d      	mov	r5, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   18b00:	3090      	adds	r0, #144	; 0x90
   18b02:	2103      	movs	r1, #3
   18b04:	f00e fdff 	bl	27706 <atomic_test_bit>
   18b08:	b9c0      	cbnz	r0, 18b3c <att_signed_write_cmd+0x48>
	handle = sys_le16_to_cpu(req->handle);
   18b0a:	46a9      	mov	r9, r5
	return net_buf_simple_push(&buf->b, len);
   18b0c:	2101      	movs	r1, #1
   18b0e:	f859 3f08 	ldr.w	r3, [r9, #8]!
   18b12:	4648      	mov	r0, r9
   18b14:	f8b3 8000 	ldrh.w	r8, [r3]
   18b18:	f010 faf3 	bl	29102 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
   18b1c:	4638      	mov	r0, r7
   18b1e:	4629      	mov	r1, r5
   18b20:	f003 f87e 	bl	1bc20 <bt_smp_sign_verify>
	if (err) {
   18b24:	4607      	mov	r7, r0
   18b26:	b158      	cbz	r0, 18b40 <att_signed_write_cmd+0x4c>
		BT_ERR("Error verifying data");
   18b28:	4b11      	ldr	r3, [pc, #68]	; (18b70 <att_signed_write_cmd+0x7c>)
   18b2a:	9309      	str	r3, [sp, #36]	; 0x24
   18b2c:	4811      	ldr	r0, [pc, #68]	; (18b74 <att_signed_write_cmd+0x80>)
   18b2e:	2302      	movs	r3, #2
   18b30:	aa08      	add	r2, sp, #32
   18b32:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18b36:	9308      	str	r3, [sp, #32]
   18b38:	f00e feb6 	bl	278a8 <z_log_msg_static_create.constprop.0>
		return 0;
   18b3c:	2000      	movs	r0, #0
   18b3e:	e014      	b.n	18b6a <att_signed_write_cmd+0x76>
	return net_buf_simple_pull(&buf->b, len);
   18b40:	2101      	movs	r1, #1
   18b42:	4648      	mov	r0, r9
   18b44:	f010 fae5 	bl	29112 <net_buf_simple_pull>
   18b48:	2102      	movs	r1, #2
   18b4a:	4648      	mov	r0, r9
   18b4c:	f010 fae1 	bl	29112 <net_buf_simple_pull>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data,
   18b50:	89ab      	ldrh	r3, [r5, #12]
   18b52:	3b0c      	subs	r3, #12
   18b54:	b29b      	uxth	r3, r3
   18b56:	9302      	str	r3, [sp, #8]
   18b58:	68ab      	ldr	r3, [r5, #8]
   18b5a:	463a      	mov	r2, r7
   18b5c:	e9cd 7300 	strd	r7, r3, [sp]
   18b60:	4639      	mov	r1, r7
   18b62:	4643      	mov	r3, r8
   18b64:	4630      	mov	r0, r6
   18b66:	f7ff ff55 	bl	18a14 <att_write_rsp>
}
   18b6a:	b00b      	add	sp, #44	; 0x2c
   18b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18b70:	0002d467 	.word	0x0002d467
   18b74:	0002abd8 	.word	0x0002abd8

00018b78 <bt_att_create_pdu>:
{
   18b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18b7a:	af00      	add	r7, sp, #0
   18b7c:	460e      	mov	r6, r1
   18b7e:	4615      	mov	r5, r2
	att = att_get(conn);
   18b80:	f7ff fc12 	bl	183a8 <att_get>
	if (!att) {
   18b84:	b1f8      	cbz	r0, 18bc6 <bt_att_create_pdu+0x4e>
	return list->head;
   18b86:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   18b88:	1c69      	adds	r1, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18b8a:	b138      	cbz	r0, 18b9c <bt_att_create_pdu+0x24>
	return node->next;
   18b8c:	f850 39e0 	ldr.w	r3, [r0], #-224
   18b90:	b103      	cbz	r3, 18b94 <bt_att_create_pdu+0x1c>
   18b92:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   18b94:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   18b96:	4291      	cmp	r1, r2
   18b98:	d911      	bls.n	18bbe <bt_att_create_pdu+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18b9a:	b9b3      	cbnz	r3, 18bca <bt_att_create_pdu+0x52>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   18b9c:	466c      	mov	r4, sp
   18b9e:	b088      	sub	sp, #32
   18ba0:	466a      	mov	r2, sp
   18ba2:	4b0d      	ldr	r3, [pc, #52]	; (18bd8 <bt_att_create_pdu+0x60>)
   18ba4:	480d      	ldr	r0, [pc, #52]	; (18bdc <bt_att_create_pdu+0x64>)
   18ba6:	e9c2 3105 	strd	r3, r1, [r2, #20]
   18baa:	2303      	movs	r3, #3
   18bac:	f842 3f10 	str.w	r3, [r2, #16]!
   18bb0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18bb4:	f00e fe78 	bl	278a8 <z_log_msg_static_create.constprop.0>
	return NULL;
   18bb8:	2000      	movs	r0, #0
   18bba:	46a5      	mov	sp, r4
   18bbc:	e003      	b.n	18bc6 <bt_att_create_pdu+0x4e>
		return bt_att_chan_create_pdu(chan, op, len);
   18bbe:	462a      	mov	r2, r5
   18bc0:	4631      	mov	r1, r6
   18bc2:	f7ff fe15 	bl	187f0 <bt_att_chan_create_pdu>
}
   18bc6:	46bd      	mov	sp, r7
   18bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18bca:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18bce:	b104      	cbz	r4, 18bd2 <bt_att_create_pdu+0x5a>
   18bd0:	3ce0      	subs	r4, #224	; 0xe0
{
   18bd2:	4618      	mov	r0, r3
   18bd4:	4623      	mov	r3, r4
   18bd6:	e7dd      	b.n	18b94 <bt_att_create_pdu+0x1c>
   18bd8:	0002d47c 	.word	0x0002d47c
   18bdc:	0002abd8 	.word	0x0002abd8

00018be0 <att_exec_write_req>:
{
   18be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return att_exec_write_rsp(chan, req->flags);
   18be4:	688b      	ldr	r3, [r1, #8]
	buf->len  = 0U;
   18be6:	4f4b      	ldr	r7, [pc, #300]	; (18d14 <att_exec_write_req+0x134>)
   18be8:	781b      	ldrb	r3, [r3, #0]
{
   18bea:	b089      	sub	sp, #36	; 0x24
   18bec:	4605      	mov	r5, r0
	return att_exec_write_rsp(chan, req->flags);
   18bee:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = chan->chan.chan.conn;
   18bf0:	6843      	ldr	r3, [r0, #4]
   18bf2:	9306      	str	r3, [sp, #24]
	uint8_t err = 0U;
   18bf4:	2400      	movs	r4, #0
	while (!sys_slist_is_empty(&chan->att->prep_queue)) {
   18bf6:	6828      	ldr	r0, [r5, #0]
   18bf8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   18bfa:	b98b      	cbnz	r3, 18c20 <att_exec_write_req+0x40>
	if (err) {
   18bfc:	2c00      	cmp	r4, #0
   18bfe:	f040 8085 	bne.w	18d0c <att_exec_write_req+0x12c>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
   18c02:	2119      	movs	r1, #25
   18c04:	9806      	ldr	r0, [sp, #24]
   18c06:	4622      	mov	r2, r4
   18c08:	f7ff ffb6 	bl	18b78 <bt_att_create_pdu>
	if (!buf) {
   18c0c:	4601      	mov	r1, r0
   18c0e:	2800      	cmp	r0, #0
   18c10:	d06f      	beq.n	18cf2 <att_exec_write_req+0x112>
	bt_att_chan_send_rsp(chan, buf);
   18c12:	4628      	mov	r0, r5
   18c14:	f00e fe7e 	bl	27914 <bt_att_chan_send_rsp>
}
   18c18:	4620      	mov	r0, r4
   18c1a:	b009      	add	sp, #36	; 0x24
   18c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf = net_buf_slist_get(&chan->att->prep_queue);
   18c20:	3024      	adds	r0, #36	; 0x24
   18c22:	f010 f9f9 	bl	29018 <net_buf_slist_get>
   18c26:	f04f 0300 	mov.w	r3, #0
		handle = data->handle;
   18c2a:	f8b0 a014 	ldrh.w	sl, [r0, #20]
		net_buf_simple_add_mem(&reassembled_data, buf->data, buf->len);
   18c2e:	8982      	ldrh	r2, [r0, #12]
   18c30:	6881      	ldr	r1, [r0, #8]
   18c32:	80bb      	strh	r3, [r7, #4]
		buf = net_buf_slist_get(&chan->att->prep_queue);
   18c34:	4606      	mov	r6, r0
	buf->data = buf->__buf;
   18c36:	68bb      	ldr	r3, [r7, #8]
		net_buf_simple_add_mem(&reassembled_data, buf->data, buf->len);
   18c38:	4836      	ldr	r0, [pc, #216]	; (18d14 <att_exec_write_req+0x134>)
   18c3a:	603b      	str	r3, [r7, #0]
   18c3c:	f010 fa50 	bl	290e0 <net_buf_simple_add_mem>
					    &chan->att->prep_queue,
   18c40:	f8d5 8000 	ldr.w	r8, [r5]
	return list->head;
   18c44:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, entry, next, node) {
   18c48:	2c00      	cmp	r4, #0
   18c4a:	d054      	beq.n	18cf6 <att_exec_write_req+0x116>
		err = exec_write_reassemble(handle, data->offset,
   18c4c:	8af3      	ldrh	r3, [r6, #22]
	return node->next;
   18c4e:	f8d4 9000 	ldr.w	r9, [r4]
   18c52:	9307      	str	r3, [sp, #28]
   18c54:	f04f 0b00 	mov.w	fp, #0
		if (tmp_data->handle == handle) {
   18c58:	8aa2      	ldrh	r2, [r4, #20]
   18c5a:	4552      	cmp	r2, sl
   18c5c:	d12f      	bne.n	18cbe <att_exec_write_req+0xde>
			if (tmp_data->offset == 0) {
   18c5e:	8ae2      	ldrh	r2, [r4, #22]
   18c60:	2a00      	cmp	r2, #0
   18c62:	d048      	beq.n	18cf6 <att_exec_write_req+0x116>
			if (tmp_data->offset != buf->len + offset) {
   18c64:	88b9      	ldrh	r1, [r7, #4]
   18c66:	9b07      	ldr	r3, [sp, #28]
   18c68:	1858      	adds	r0, r3, r1
   18c6a:	4282      	cmp	r2, r0
   18c6c:	d148      	bne.n	18d00 <att_exec_write_req+0x120>
			if (buf->len + entry->len > buf->size) {
   18c6e:	89a2      	ldrh	r2, [r4, #12]
   18c70:	88f8      	ldrh	r0, [r7, #6]
   18c72:	4411      	add	r1, r2
   18c74:	4281      	cmp	r1, r0
   18c76:	dc4b      	bgt.n	18d10 <att_exec_write_req+0x130>
			net_buf_simple_add_mem(buf, entry->data, entry->len);
   18c78:	68a1      	ldr	r1, [r4, #8]
   18c7a:	4638      	mov	r0, r7
   18c7c:	f010 fa30 	bl	290e0 <net_buf_simple_add_mem>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   18c80:	6822      	ldr	r2, [r4, #0]
   18c82:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
   18c86:	f1bb 0f00 	cmp.w	fp, #0
   18c8a:	d111      	bne.n	18cb0 <att_exec_write_req+0xd0>
   18c8c:	428c      	cmp	r4, r1
	list->head = node;
   18c8e:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
Z_GENLIST_REMOVE(slist, snode)
   18c92:	d101      	bne.n	18c98 <att_exec_write_req+0xb8>
	list->tail = node;
   18c94:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
	parent->next = child;
   18c98:	2300      	movs	r3, #0
   18c9a:	6023      	str	r3, [r4, #0]
			net_buf_unref(entry);
   18c9c:	4620      	mov	r0, r4
   18c9e:	f004 f9c3 	bl	1d028 <net_buf_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, entry, next, node) {
   18ca2:	f1b9 0f00 	cmp.w	r9, #0
   18ca6:	d026      	beq.n	18cf6 <att_exec_write_req+0x116>
	return node->next;
   18ca8:	464c      	mov	r4, r9
   18caa:	f8d9 9000 	ldr.w	r9, [r9]
   18cae:	e7d3      	b.n	18c58 <att_exec_write_req+0x78>
Z_GENLIST_REMOVE(slist, snode)
   18cb0:	428c      	cmp	r4, r1
	parent->next = child;
   18cb2:	f8cb 2000 	str.w	r2, [fp]
	list->tail = node;
   18cb6:	bf08      	it	eq
   18cb8:	f8c8 b028 	streq.w	fp, [r8, #40]	; 0x28
}
   18cbc:	e7ec      	b.n	18c98 <att_exec_write_req+0xb8>
			prev = &entry->node;
   18cbe:	46a3      	mov	fp, r4
   18cc0:	e7ef      	b.n	18ca2 <att_exec_write_req+0xc2>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
   18cc2:	88bb      	ldrh	r3, [r7, #4]
   18cc4:	9302      	str	r3, [sp, #8]
   18cc6:	683b      	ldr	r3, [r7, #0]
   18cc8:	9301      	str	r3, [sp, #4]
   18cca:	8af3      	ldrh	r3, [r6, #22]
   18ccc:	9300      	str	r3, [sp, #0]
   18cce:	2200      	movs	r2, #0
   18cd0:	4653      	mov	r3, sl
   18cd2:	2118      	movs	r1, #24
   18cd4:	4628      	mov	r0, r5
   18cd6:	f7ff fe9d 	bl	18a14 <att_write_rsp>
			if (err) {
   18cda:	4604      	mov	r4, r0
   18cdc:	b128      	cbz	r0, 18cea <att_exec_write_req+0x10a>
	if (!req) {
   18cde:	4603      	mov	r3, r0
   18ce0:	8ab2      	ldrh	r2, [r6, #20]
   18ce2:	2118      	movs	r1, #24
   18ce4:	4628      	mov	r0, r5
   18ce6:	f00f f849 	bl	27d7c <send_err_rsp.part.0>
		net_buf_unref(buf);
   18cea:	4630      	mov	r0, r6
   18cec:	f004 f99c 	bl	1d028 <net_buf_unref>
   18cf0:	e781      	b.n	18bf6 <att_exec_write_req+0x16>
		return BT_ATT_ERR_UNLIKELY;
   18cf2:	240e      	movs	r4, #14
   18cf4:	e790      	b.n	18c18 <att_exec_write_req+0x38>
		if (!err && flags == BT_ATT_FLAG_EXEC) {
   18cf6:	9b05      	ldr	r3, [sp, #20]
   18cf8:	2b01      	cmp	r3, #1
   18cfa:	d0e2      	beq.n	18cc2 <att_exec_write_req+0xe2>
		err = exec_write_reassemble(handle, data->offset,
   18cfc:	2400      	movs	r4, #0
   18cfe:	e7f4      	b.n	18cea <att_exec_write_req+0x10a>
				return BT_ATT_ERR_INVALID_OFFSET;
   18d00:	2307      	movs	r3, #7
	if (!req) {
   18d02:	4652      	mov	r2, sl
   18d04:	2118      	movs	r1, #24
   18d06:	4628      	mov	r0, r5
   18d08:	f00f f838 	bl	27d7c <send_err_rsp.part.0>
			return 0;
   18d0c:	2400      	movs	r4, #0
	return att_exec_write_rsp(chan, req->flags);
   18d0e:	e783      	b.n	18c18 <att_exec_write_req+0x38>
				return BT_ATT_ERR_INVALID_ATTRIBUTE_LEN;
   18d10:	230d      	movs	r3, #13
   18d12:	e7f6      	b.n	18d02 <att_exec_write_req+0x122>
   18d14:	2000062c 	.word	0x2000062c

00018d18 <att_prepare_write_req>:
{
   18d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d1c:	460c      	mov	r4, r1
   18d1e:	b087      	sub	sp, #28
   18d20:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   18d22:	2104      	movs	r1, #4
   18d24:	f104 0008 	add.w	r0, r4, #8
   18d28:	f010 f9fb 	bl	29122 <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
   18d2c:	f8d5 b004 	ldr.w	fp, [r5, #4]
	handle = sys_le16_to_cpu(req->handle);
   18d30:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
   18d34:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
   18d38:	f8d4 8008 	ldr.w	r8, [r4, #8]
   18d3c:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
   18d3e:	2101      	movs	r1, #1
   18d40:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
   18d42:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
   18d46:	f00f fcb6 	bl	286b6 <bt_gatt_change_aware>
   18d4a:	b960      	cbnz	r0, 18d66 <att_prepare_write_req+0x4e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   18d4c:	2105      	movs	r1, #5
   18d4e:	f105 0090 	add.w	r0, r5, #144	; 0x90
   18d52:	f00e fe05 	bl	27960 <atomic_test_and_set_bit>
			return 0;
   18d56:	2800      	cmp	r0, #0
   18d58:	bf0c      	ite	eq
   18d5a:	2412      	moveq	r4, #18
   18d5c:	2400      	movne	r4, #0
}
   18d5e:	4620      	mov	r0, r4
   18d60:	b007      	add	sp, #28
   18d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!handle) {
   18d66:	2e00      	cmp	r6, #0
   18d68:	d045      	beq.n	18df6 <att_prepare_write_req+0xde>
	(void)memset(&data, 0, sizeof(data));
   18d6a:	2214      	movs	r2, #20
   18d6c:	2100      	movs	r1, #0
   18d6e:	a801      	add	r0, sp, #4
   18d70:	f00d ffdd 	bl	26d2e <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   18d74:	2301      	movs	r3, #1
   18d76:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   18d7a:	4a21      	ldr	r2, [pc, #132]	; (18e00 <att_prepare_write_req+0xe8>)
	data.conn = conn;
   18d7c:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
   18d80:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   18d82:	ab01      	add	r3, sp, #4
   18d84:	4631      	mov	r1, r6
   18d86:	4630      	mov	r0, r6
	data.offset = offset;
   18d88:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
   18d8c:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
   18d90:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   18d94:	f00e fcc0 	bl	27718 <bt_gatt_foreach_attr>
	if (data.err) {
   18d98:	f89d 4014 	ldrb.w	r4, [sp, #20]
   18d9c:	b13c      	cbz	r4, 18dae <att_prepare_write_req+0x96>
	if (!req) {
   18d9e:	4623      	mov	r3, r4
   18da0:	4632      	mov	r2, r6
   18da2:	2116      	movs	r1, #22
   18da4:	4628      	mov	r0, r5
   18da6:	f00e ffe9 	bl	27d7c <send_err_rsp.part.0>
		return 0;
   18daa:	2400      	movs	r4, #0
   18dac:	e7d7      	b.n	18d5e <att_prepare_write_req+0x46>
	net_buf_slist_put(&chan->att->prep_queue, data.buf);
   18dae:	6828      	ldr	r0, [r5, #0]
   18db0:	9902      	ldr	r1, [sp, #8]
   18db2:	3024      	adds	r0, #36	; 0x24
   18db4:	f010 f912 	bl	28fdc <net_buf_slist_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
   18db8:	4622      	mov	r2, r4
   18dba:	2117      	movs	r1, #23
   18dbc:	4658      	mov	r0, fp
   18dbe:	f7ff fedb 	bl	18b78 <bt_att_create_pdu>
   18dc2:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18dc4:	b1c8      	cbz	r0, 18dfa <att_prepare_write_req+0xe2>
	return net_buf_simple_add(&buf->b, len);
   18dc6:	2104      	movs	r1, #4
   18dc8:	3008      	adds	r0, #8
   18dca:	f010 f983 	bl	290d4 <net_buf_simple_add>
   18dce:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
   18dd0:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
   18dd4:	f8a0 9002 	strh.w	r9, [r0, #2]
   18dd8:	9802      	ldr	r0, [sp, #8]
   18dda:	4639      	mov	r1, r7
   18ddc:	3008      	adds	r0, #8
   18dde:	f010 f979 	bl	290d4 <net_buf_simple_add>
	memcpy(rsp->value, value, len);
   18de2:	4641      	mov	r1, r8
   18de4:	463a      	mov	r2, r7
   18de6:	1d30      	adds	r0, r6, #4
   18de8:	f00d ff96 	bl	26d18 <memcpy>
	bt_att_chan_send_rsp(chan, data.buf);
   18dec:	9902      	ldr	r1, [sp, #8]
   18dee:	4628      	mov	r0, r5
   18df0:	f00e fd90 	bl	27914 <bt_att_chan_send_rsp>
	return 0;
   18df4:	e7b3      	b.n	18d5e <att_prepare_write_req+0x46>
		return BT_ATT_ERR_INVALID_HANDLE;
   18df6:	2401      	movs	r4, #1
   18df8:	e7b1      	b.n	18d5e <att_prepare_write_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   18dfa:	240e      	movs	r4, #14
   18dfc:	e7af      	b.n	18d5e <att_prepare_write_req+0x46>
   18dfe:	bf00      	nop
   18e00:	0001876d 	.word	0x0001876d

00018e04 <att_read_group_req>:
{
   18e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   18e08:	898c      	ldrh	r4, [r1, #12]
   18e0a:	3c04      	subs	r4, #4
   18e0c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   18e0e:	2c02      	cmp	r4, #2
{
   18e10:	4605      	mov	r5, r0
   18e12:	b08c      	sub	sp, #48	; 0x30
   18e14:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   18e16:	d001      	beq.n	18e1c <att_read_group_req+0x18>
   18e18:	2c10      	cmp	r4, #16
   18e1a:	d172      	bne.n	18f02 <att_read_group_req+0xfe>
	return net_buf_simple_pull_mem(&buf->b, len);
   18e1c:	2104      	movs	r1, #4
   18e1e:	3008      	adds	r0, #8
   18e20:	f010 f97f 	bl	29122 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18e24:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   18e28:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   18e2a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18e2c:	1d01      	adds	r1, r0, #4
   18e2e:	4622      	mov	r2, r4
   18e30:	4640      	mov	r0, r8
   18e32:	f00e f838 	bl	26ea6 <bt_uuid_create>
   18e36:	2800      	cmp	r0, #0
   18e38:	d065      	beq.n	18f06 <att_read_group_req+0x102>
	if (!start || !end) {
   18e3a:	2e00      	cmp	r6, #0
   18e3c:	d03e      	beq.n	18ebc <att_read_group_req+0xb8>
   18e3e:	2400      	movs	r4, #0
   18e40:	2f00      	cmp	r7, #0
   18e42:	d03a      	beq.n	18eba <att_read_group_req+0xb6>
	if (start > end) {
   18e44:	42b7      	cmp	r7, r6
   18e46:	d339      	bcc.n	18ebc <att_read_group_req+0xb8>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   18e48:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18e4c:	a901      	add	r1, sp, #4
   18e4e:	4640      	mov	r0, r8
   18e50:	f88d 4004 	strb.w	r4, [sp, #4]
   18e54:	f8ad 3006 	strh.w	r3, [sp, #6]
   18e58:	f00d fff7 	bl	26e4a <bt_uuid_cmp>
   18e5c:	2800      	cmp	r0, #0
   18e5e:	d138      	bne.n	18ed2 <att_read_group_req+0xce>
	struct bt_conn *conn = chan->chan.chan.conn;
   18e60:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   18e62:	2214      	movs	r2, #20
   18e64:	2100      	movs	r1, #0
   18e66:	a807      	add	r0, sp, #28
   18e68:	f00d ff61 	bl	26d2e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   18e6c:	2201      	movs	r2, #1
   18e6e:	2111      	movs	r1, #17
   18e70:	4620      	mov	r0, r4
   18e72:	f7ff fe81 	bl	18b78 <bt_att_create_pdu>
   18e76:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   18e78:	2800      	cmp	r0, #0
   18e7a:	d044      	beq.n	18f06 <att_read_group_req+0x102>
	return net_buf_simple_add(&buf->b, len);
   18e7c:	2101      	movs	r1, #1
   18e7e:	3008      	adds	r0, #8
	data.uuid = uuid;
   18e80:	e9cd 5807 	strd	r5, r8, [sp, #28]
   18e84:	f010 f926 	bl	290d4 <net_buf_simple_add>
	data.rsp->len = 0U;
   18e88:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   18e8c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   18e8e:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   18e90:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   18e94:	4a1d      	ldr	r2, [pc, #116]	; (18f0c <att_read_group_req+0x108>)
	data.group = NULL;
   18e96:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   18e9a:	4639      	mov	r1, r7
   18e9c:	4630      	mov	r0, r6
   18e9e:	f00e fc3b 	bl	27718 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   18ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18ea4:	781c      	ldrb	r4, [r3, #0]
   18ea6:	bb3c      	cbnz	r4, 18ef8 <att_read_group_req+0xf4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18eaa:	6958      	ldr	r0, [r3, #20]
   18eac:	f7ff f9ac 	bl	18208 <tx_meta_data_free>
		net_buf_unref(data.buf);
   18eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
   18eb2:	f004 f8b9 	bl	1d028 <net_buf_unref>
	if (!req) {
   18eb6:	230a      	movs	r3, #10
   18eb8:	e018      	b.n	18eec <att_read_group_req+0xe8>
			*err = 0U;
   18eba:	463e      	mov	r6, r7
	if (!req) {
   18ebc:	2301      	movs	r3, #1
   18ebe:	4632      	mov	r2, r6
   18ec0:	2110      	movs	r1, #16
   18ec2:	4628      	mov	r0, r5
   18ec4:	f00e ff5a 	bl	27d7c <send_err_rsp.part.0>
		return 0;
   18ec8:	2400      	movs	r4, #0
}
   18eca:	4620      	mov	r0, r4
   18ecc:	b00c      	add	sp, #48	; 0x30
   18ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   18ed2:	f642 0301 	movw	r3, #10241	; 0x2801
   18ed6:	a907      	add	r1, sp, #28
   18ed8:	4640      	mov	r0, r8
   18eda:	f88d 401c 	strb.w	r4, [sp, #28]
   18ede:	f8ad 301e 	strh.w	r3, [sp, #30]
   18ee2:	f00d ffb2 	bl	26e4a <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   18ee6:	2800      	cmp	r0, #0
   18ee8:	d0ba      	beq.n	18e60 <att_read_group_req+0x5c>
	if (!req) {
   18eea:	2310      	movs	r3, #16
   18eec:	4632      	mov	r2, r6
   18eee:	2110      	movs	r1, #16
   18ef0:	4628      	mov	r0, r5
   18ef2:	f00e ff43 	bl	27d7c <send_err_rsp.part.0>
		return 0;
   18ef6:	e7e8      	b.n	18eca <att_read_group_req+0xc6>
	bt_att_chan_send_rsp(chan, data.buf);
   18ef8:	9909      	ldr	r1, [sp, #36]	; 0x24
   18efa:	4628      	mov	r0, r5
   18efc:	f00e fd0a 	bl	27914 <bt_att_chan_send_rsp>
	return 0;
   18f00:	e7e2      	b.n	18ec8 <att_read_group_req+0xc4>
		return BT_ATT_ERR_INVALID_PDU;
   18f02:	2404      	movs	r4, #4
   18f04:	e7e1      	b.n	18eca <att_read_group_req+0xc6>
		return BT_ATT_ERR_UNLIKELY;
   18f06:	240e      	movs	r4, #14
   18f08:	e7df      	b.n	18eca <att_read_group_req+0xc6>
   18f0a:	bf00      	nop
   18f0c:	00018509 	.word	0x00018509

00018f10 <att_read_mult_vl_req>:
{
   18f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   18f14:	6846      	ldr	r6, [r0, #4]
{
   18f16:	b085      	sub	sp, #20
   18f18:	4604      	mov	r4, r0
   18f1a:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   18f1c:	4630      	mov	r0, r6
   18f1e:	2101      	movs	r1, #1
   18f20:	f00f fbc9 	bl	286b6 <bt_gatt_change_aware>
   18f24:	b958      	cbnz	r0, 18f3e <att_read_mult_vl_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   18f26:	2105      	movs	r1, #5
   18f28:	f104 0090 	add.w	r0, r4, #144	; 0x90
   18f2c:	f00e fd18 	bl	27960 <atomic_test_and_set_bit>
			return 0;
   18f30:	2800      	cmp	r0, #0
   18f32:	bf0c      	ite	eq
   18f34:	2012      	moveq	r0, #18
   18f36:	2000      	movne	r0, #0
}
   18f38:	b005      	add	sp, #20
   18f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   18f3e:	2210      	movs	r2, #16
   18f40:	2100      	movs	r1, #0
   18f42:	4668      	mov	r0, sp
   18f44:	f00d fef3 	bl	26d2e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   18f48:	2200      	movs	r2, #0
   18f4a:	2121      	movs	r1, #33	; 0x21
   18f4c:	4630      	mov	r0, r6
   18f4e:	f7ff fe13 	bl	18b78 <bt_att_create_pdu>
   18f52:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18f54:	b368      	cbz	r0, 18fb2 <att_read_mult_vl_req+0xa2>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   18f56:	f8df 9060 	ldr.w	r9, [pc, #96]	; 18fb8 <att_read_mult_vl_req+0xa8>
	data.chan = chan;
   18f5a:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   18f5c:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18f60:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   18f64:	89ab      	ldrh	r3, [r5, #12]
   18f66:	2b01      	cmp	r3, #1
   18f68:	d804      	bhi.n	18f74 <att_read_mult_vl_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf);
   18f6a:	9902      	ldr	r1, [sp, #8]
   18f6c:	4620      	mov	r0, r4
   18f6e:	f00e fcd1 	bl	27914 <bt_att_chan_send_rsp>
   18f72:	e01c      	b.n	18fae <att_read_mult_vl_req+0x9e>
   18f74:	4638      	mov	r0, r7
   18f76:	f010 f8e4 	bl	29142 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   18f7a:	466b      	mov	r3, sp
   18f7c:	464a      	mov	r2, r9
   18f7e:	4601      	mov	r1, r0
   18f80:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18f82:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   18f86:	f00e fbc7 	bl	27718 <bt_gatt_foreach_attr>
		if (data.err) {
   18f8a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18f8e:	2b00      	cmp	r3, #0
   18f90:	d0e8      	beq.n	18f64 <att_read_mult_vl_req+0x54>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18f92:	9b02      	ldr	r3, [sp, #8]
   18f94:	6958      	ldr	r0, [r3, #20]
   18f96:	f7ff f937 	bl	18208 <tx_meta_data_free>
			net_buf_unref(data.buf);
   18f9a:	9802      	ldr	r0, [sp, #8]
   18f9c:	f004 f844 	bl	1d028 <net_buf_unref>
	if (!req) {
   18fa0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18fa4:	4632      	mov	r2, r6
   18fa6:	2120      	movs	r1, #32
   18fa8:	4620      	mov	r0, r4
   18faa:	f00e fee7 	bl	27d7c <send_err_rsp.part.0>
	return 0;
   18fae:	2000      	movs	r0, #0
   18fb0:	e7c2      	b.n	18f38 <att_read_mult_vl_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
   18fb2:	200e      	movs	r0, #14
   18fb4:	e7c0      	b.n	18f38 <att_read_mult_vl_req+0x28>
   18fb6:	bf00      	nop
   18fb8:	00027af5 	.word	0x00027af5

00018fbc <att_read_mult_req>:
{
   18fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   18fc0:	6846      	ldr	r6, [r0, #4]
{
   18fc2:	b085      	sub	sp, #20
   18fc4:	4604      	mov	r4, r0
   18fc6:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   18fc8:	4630      	mov	r0, r6
   18fca:	2101      	movs	r1, #1
   18fcc:	f00f fb73 	bl	286b6 <bt_gatt_change_aware>
   18fd0:	b958      	cbnz	r0, 18fea <att_read_mult_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   18fd2:	2105      	movs	r1, #5
   18fd4:	f104 0090 	add.w	r0, r4, #144	; 0x90
   18fd8:	f00e fcc2 	bl	27960 <atomic_test_and_set_bit>
			return 0;
   18fdc:	2800      	cmp	r0, #0
   18fde:	bf0c      	ite	eq
   18fe0:	2012      	moveq	r0, #18
   18fe2:	2000      	movne	r0, #0
}
   18fe4:	b005      	add	sp, #20
   18fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   18fea:	2210      	movs	r2, #16
   18fec:	2100      	movs	r1, #0
   18fee:	4668      	mov	r0, sp
   18ff0:	f00d fe9d 	bl	26d2e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   18ff4:	2200      	movs	r2, #0
   18ff6:	210f      	movs	r1, #15
   18ff8:	4630      	mov	r0, r6
   18ffa:	f7ff fdbd 	bl	18b78 <bt_att_create_pdu>
   18ffe:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19000:	b368      	cbz	r0, 1905e <att_read_mult_req+0xa2>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19002:	f8df 9060 	ldr.w	r9, [pc, #96]	; 19064 <att_read_mult_req+0xa8>
	data.chan = chan;
   19006:	9400      	str	r4, [sp, #0]
   19008:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1900c:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   19010:	89ab      	ldrh	r3, [r5, #12]
   19012:	2b01      	cmp	r3, #1
   19014:	d804      	bhi.n	19020 <att_read_mult_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf);
   19016:	9902      	ldr	r1, [sp, #8]
   19018:	4620      	mov	r0, r4
   1901a:	f00e fc7b 	bl	27914 <bt_att_chan_send_rsp>
   1901e:	e01c      	b.n	1905a <att_read_mult_req+0x9e>
   19020:	4638      	mov	r0, r7
   19022:	f010 f88e 	bl	29142 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19026:	466b      	mov	r3, sp
   19028:	464a      	mov	r2, r9
   1902a:	4601      	mov	r1, r0
   1902c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1902e:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19032:	f00e fb71 	bl	27718 <bt_gatt_foreach_attr>
		if (data.err) {
   19036:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1903a:	2b00      	cmp	r3, #0
   1903c:	d0e8      	beq.n	19010 <att_read_mult_req+0x54>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1903e:	9b02      	ldr	r3, [sp, #8]
   19040:	6958      	ldr	r0, [r3, #20]
   19042:	f7ff f8e1 	bl	18208 <tx_meta_data_free>
			net_buf_unref(data.buf);
   19046:	9802      	ldr	r0, [sp, #8]
   19048:	f003 ffee 	bl	1d028 <net_buf_unref>
	if (!req) {
   1904c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19050:	4632      	mov	r2, r6
   19052:	210e      	movs	r1, #14
   19054:	4620      	mov	r0, r4
   19056:	f00e fe91 	bl	27d7c <send_err_rsp.part.0>
	return 0;
   1905a:	2000      	movs	r0, #0
   1905c:	e7c2      	b.n	18fe4 <att_read_mult_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1905e:	200e      	movs	r0, #14
   19060:	e7c0      	b.n	18fe4 <att_read_mult_req+0x28>
   19062:	bf00      	nop
   19064:	00027aa1 	.word	0x00027aa1

00019068 <att_read_rsp>:
{
   19068:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1906c:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   19070:	4604      	mov	r4, r0
   19072:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   19074:	4640      	mov	r0, r8
   19076:	2101      	movs	r1, #1
{
   19078:	4615      	mov	r5, r2
   1907a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1907c:	f00f fb1b 	bl	286b6 <bt_gatt_change_aware>
   19080:	b960      	cbnz	r0, 1909c <att_read_rsp+0x34>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   19082:	2105      	movs	r1, #5
   19084:	f104 0090 	add.w	r0, r4, #144	; 0x90
   19088:	f00e fc6a 	bl	27960 <atomic_test_and_set_bit>
			return 0;
   1908c:	2800      	cmp	r0, #0
   1908e:	bf0c      	ite	eq
   19090:	2512      	moveq	r5, #18
   19092:	2500      	movne	r5, #0
}
   19094:	4628      	mov	r0, r5
   19096:	b004      	add	sp, #16
   19098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1909c:	b38e      	cbz	r6, 19102 <att_read_rsp+0x9a>
	(void)memset(&data, 0, sizeof(data));
   1909e:	2210      	movs	r2, #16
   190a0:	2100      	movs	r1, #0
   190a2:	4668      	mov	r0, sp
   190a4:	f00d fe43 	bl	26d2e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   190a8:	2200      	movs	r2, #0
   190aa:	4629      	mov	r1, r5
   190ac:	4640      	mov	r0, r8
   190ae:	f7ff fd63 	bl	18b78 <bt_att_create_pdu>
   190b2:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   190b4:	b338      	cbz	r0, 19106 <att_read_rsp+0x9e>
	data.offset = offset;
   190b6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   190ba:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   190be:	2301      	movs	r3, #1
   190c0:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   190c4:	4a11      	ldr	r2, [pc, #68]	; (1910c <att_read_rsp+0xa4>)
	data.chan = chan;
   190c6:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   190c8:	466b      	mov	r3, sp
   190ca:	4631      	mov	r1, r6
   190cc:	4630      	mov	r0, r6
   190ce:	f00e fb23 	bl	27718 <bt_gatt_foreach_attr>
	if (data.err) {
   190d2:	f89d 500c 	ldrb.w	r5, [sp, #12]
   190d6:	b17d      	cbz	r5, 190f8 <att_read_rsp+0x90>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   190d8:	9b02      	ldr	r3, [sp, #8]
   190da:	6958      	ldr	r0, [r3, #20]
   190dc:	f7ff f894 	bl	18208 <tx_meta_data_free>
		net_buf_unref(data.buf);
   190e0:	9802      	ldr	r0, [sp, #8]
   190e2:	f003 ffa1 	bl	1d028 <net_buf_unref>
	if (!req) {
   190e6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   190ea:	4632      	mov	r2, r6
   190ec:	4639      	mov	r1, r7
   190ee:	4620      	mov	r0, r4
   190f0:	f00e fe44 	bl	27d7c <send_err_rsp.part.0>
		return 0;
   190f4:	2500      	movs	r5, #0
   190f6:	e7cd      	b.n	19094 <att_read_rsp+0x2c>
	bt_att_chan_send_rsp(chan, data.buf);
   190f8:	9902      	ldr	r1, [sp, #8]
   190fa:	4620      	mov	r0, r4
   190fc:	f00e fc0a 	bl	27914 <bt_att_chan_send_rsp>
	return 0;
   19100:	e7c8      	b.n	19094 <att_read_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   19102:	2501      	movs	r5, #1
   19104:	e7c6      	b.n	19094 <att_read_rsp+0x2c>
		return BT_ATT_ERR_UNLIKELY;
   19106:	250e      	movs	r5, #14
   19108:	e7c4      	b.n	19094 <att_read_rsp+0x2c>
   1910a:	bf00      	nop
   1910c:	00027aa1 	.word	0x00027aa1

00019110 <att_read_type_req>:
{
   19110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   19114:	898c      	ldrh	r4, [r1, #12]
   19116:	3c04      	subs	r4, #4
   19118:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1911a:	2c02      	cmp	r4, #2
{
   1911c:	4605      	mov	r5, r0
   1911e:	b08c      	sub	sp, #48	; 0x30
   19120:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   19122:	d001      	beq.n	19128 <att_read_type_req+0x18>
   19124:	2c10      	cmp	r4, #16
   19126:	d153      	bne.n	191d0 <att_read_type_req+0xc0>
	return net_buf_simple_pull_mem(&buf->b, len);
   19128:	2104      	movs	r1, #4
   1912a:	3008      	adds	r0, #8
   1912c:	f00f fff9 	bl	29122 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19130:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   19134:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   19136:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19138:	1d01      	adds	r1, r0, #4
   1913a:	4622      	mov	r2, r4
   1913c:	4640      	mov	r0, r8
   1913e:	f00d feb2 	bl	26ea6 <bt_uuid_create>
   19142:	b188      	cbz	r0, 19168 <att_read_type_req+0x58>
	if (!start || !end) {
   19144:	b19e      	cbz	r6, 1916e <att_read_type_req+0x5e>
   19146:	b18f      	cbz	r7, 1916c <att_read_type_req+0x5c>
	if (start > end) {
   19148:	42b7      	cmp	r7, r6
   1914a:	d310      	bcc.n	1916e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1914c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1914e:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   19150:	2100      	movs	r1, #0
   19152:	eb0d 0002 	add.w	r0, sp, r2
   19156:	f00d fdea 	bl	26d2e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1915a:	2201      	movs	r2, #1
   1915c:	2109      	movs	r1, #9
   1915e:	4620      	mov	r0, r4
   19160:	f7ff fd0a 	bl	18b78 <bt_att_create_pdu>
   19164:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   19166:	b968      	cbnz	r0, 19184 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   19168:	240e      	movs	r4, #14
   1916a:	e007      	b.n	1917c <att_read_type_req+0x6c>
			*err = 0U;
   1916c:	463e      	mov	r6, r7
	if (!req) {
   1916e:	2301      	movs	r3, #1
   19170:	4632      	mov	r2, r6
   19172:	2108      	movs	r1, #8
   19174:	4628      	mov	r0, r5
   19176:	f00e fe01 	bl	27d7c <send_err_rsp.part.0>
		return 0;
   1917a:	2400      	movs	r4, #0
}
   1917c:	4620      	mov	r0, r4
   1917e:	b00c      	add	sp, #48	; 0x30
   19180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   19184:	2101      	movs	r1, #1
   19186:	3008      	adds	r0, #8
	data.uuid = uuid;
   19188:	e9cd 5806 	strd	r5, r8, [sp, #24]
   1918c:	f00f ffa2 	bl	290d4 <net_buf_simple_add>
	data.rsp->len = 0U;
   19190:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19194:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   19196:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   19198:	4a0e      	ldr	r2, [pc, #56]	; (191d4 <att_read_type_req+0xc4>)
	data.rsp->len = 0U;
   1919a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1919e:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   191a0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   191a4:	4630      	mov	r0, r6
   191a6:	ab06      	add	r3, sp, #24
   191a8:	f00e fab6 	bl	27718 <bt_gatt_foreach_attr>
	if (data.err) {
   191ac:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   191b0:	b14c      	cbz	r4, 191c6 <att_read_type_req+0xb6>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   191b2:	9b08      	ldr	r3, [sp, #32]
   191b4:	6958      	ldr	r0, [r3, #20]
   191b6:	f7ff f827 	bl	18208 <tx_meta_data_free>
		net_buf_unref(data.buf);
   191ba:	9808      	ldr	r0, [sp, #32]
   191bc:	f003 ff34 	bl	1d028 <net_buf_unref>
	if (!req) {
   191c0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   191c4:	e7d4      	b.n	19170 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   191c6:	9908      	ldr	r1, [sp, #32]
   191c8:	4628      	mov	r0, r5
   191ca:	f00e fba3 	bl	27914 <bt_att_chan_send_rsp>
	return 0;
   191ce:	e7d5      	b.n	1917c <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   191d0:	2404      	movs	r4, #4
   191d2:	e7d3      	b.n	1917c <att_read_type_req+0x6c>
   191d4:	000186c5 	.word	0x000186c5

000191d8 <att_find_type_req>:
{
   191d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   191dc:	4688      	mov	r8, r1
   191de:	b086      	sub	sp, #24
   191e0:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   191e2:	2106      	movs	r1, #6
   191e4:	f108 0008 	add.w	r0, r8, #8
   191e8:	f00f ff9b 	bl	29122 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   191ec:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   191ee:	b317      	cbz	r7, 19236 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   191f0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   191f4:	f1b9 0f00 	cmp.w	r9, #0
   191f8:	d01c      	beq.n	19234 <att_find_type_req+0x5c>
	if (start > end) {
   191fa:	454f      	cmp	r7, r9
   191fc:	d81b      	bhi.n	19236 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   191fe:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   19200:	f8ad 3002 	strh.w	r3, [sp, #2]
   19204:	2400      	movs	r4, #0
   19206:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1920a:	a901      	add	r1, sp, #4
   1920c:	4668      	mov	r0, sp
	value = buf->data;
   1920e:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   19212:	f88d 4000 	strb.w	r4, [sp]
   19216:	f88d 4004 	strb.w	r4, [sp, #4]
   1921a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1921e:	f00d fe14 	bl	26e4a <bt_uuid_cmp>
   19222:	4606      	mov	r6, r0
   19224:	b190      	cbz	r0, 1924c <att_find_type_req+0x74>
	if (!req) {
   19226:	230a      	movs	r3, #10
   19228:	463a      	mov	r2, r7
   1922a:	2106      	movs	r1, #6
   1922c:	4628      	mov	r0, r5
   1922e:	f00e fda5 	bl	27d7c <send_err_rsp.part.0>
		return 0;
   19232:	e007      	b.n	19244 <att_find_type_req+0x6c>
			*err = 0U;
   19234:	464f      	mov	r7, r9
	if (!req) {
   19236:	2301      	movs	r3, #1
   19238:	463a      	mov	r2, r7
   1923a:	2106      	movs	r1, #6
   1923c:	4628      	mov	r0, r5
   1923e:	f00e fd9d 	bl	27d7c <send_err_rsp.part.0>
		return 0;
   19242:	2400      	movs	r4, #0
}
   19244:	4620      	mov	r0, r4
   19246:	b006      	add	sp, #24
   19248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1924c:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   19250:	f8d5 8004 	ldr.w	r8, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   19254:	4601      	mov	r1, r0
   19256:	2214      	movs	r2, #20
   19258:	a801      	add	r0, sp, #4
   1925a:	f00d fd68 	bl	26d2e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1925e:	4632      	mov	r2, r6
   19260:	2107      	movs	r1, #7
   19262:	4640      	mov	r0, r8
   19264:	f7ff fc88 	bl	18b78 <bt_att_create_pdu>
   19268:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1926a:	b1f8      	cbz	r0, 192ac <att_find_type_req+0xd4>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1926c:	230a      	movs	r3, #10
   1926e:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19272:	4a0f      	ldr	r2, [pc, #60]	; (192b0 <att_find_type_req+0xd8>)
	data.value_len = value_len;
   19274:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19278:	ab01      	add	r3, sp, #4
   1927a:	4649      	mov	r1, r9
   1927c:	4638      	mov	r0, r7
	data.value = value;
   1927e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   19282:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19284:	f00e fa48 	bl	27718 <bt_gatt_foreach_attr>
	if (data.err) {
   19288:	f89d 4015 	ldrb.w	r4, [sp, #21]
   1928c:	b14c      	cbz	r4, 192a2 <att_find_type_req+0xca>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1928e:	9b02      	ldr	r3, [sp, #8]
   19290:	6958      	ldr	r0, [r3, #20]
   19292:	f7fe ffb9 	bl	18208 <tx_meta_data_free>
		net_buf_unref(data.buf);
   19296:	9802      	ldr	r0, [sp, #8]
   19298:	f003 fec6 	bl	1d028 <net_buf_unref>
	if (!req) {
   1929c:	f89d 3015 	ldrb.w	r3, [sp, #21]
   192a0:	e7ca      	b.n	19238 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   192a2:	9902      	ldr	r1, [sp, #8]
   192a4:	4628      	mov	r0, r5
   192a6:	f00e fb35 	bl	27914 <bt_att_chan_send_rsp>
	return 0;
   192aa:	e7cb      	b.n	19244 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   192ac:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   192ae:	e7c9      	b.n	19244 <att_find_type_req+0x6c>
   192b0:	00018225 	.word	0x00018225

000192b4 <att_find_info_req>:
{
   192b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   192b6:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   192b8:	881e      	ldrh	r6, [r3, #0]
{
   192ba:	b085      	sub	sp, #20
   192bc:	4605      	mov	r5, r0
	if (!start || !end) {
   192be:	b19e      	cbz	r6, 192e8 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   192c0:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   192c2:	b184      	cbz	r4, 192e6 <att_find_info_req+0x32>
	if (start > end) {
   192c4:	42a6      	cmp	r6, r4
   192c6:	d80f      	bhi.n	192e8 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   192c8:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   192ca:	2210      	movs	r2, #16
   192cc:	2100      	movs	r1, #0
   192ce:	4668      	mov	r0, sp
   192d0:	f00d fd2d 	bl	26d2e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   192d4:	2200      	movs	r2, #0
   192d6:	2105      	movs	r1, #5
   192d8:	4638      	mov	r0, r7
   192da:	f7ff fc4d 	bl	18b78 <bt_att_create_pdu>
   192de:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   192e0:	b958      	cbnz	r0, 192fa <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   192e2:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   192e4:	e007      	b.n	192f6 <att_find_info_req+0x42>
			*err = 0U;
   192e6:	4626      	mov	r6, r4
	if (!req) {
   192e8:	2301      	movs	r3, #1
   192ea:	4632      	mov	r2, r6
   192ec:	2104      	movs	r1, #4
   192ee:	4628      	mov	r0, r5
   192f0:	f00e fd44 	bl	27d7c <send_err_rsp.part.0>
	return 0;
   192f4:	2000      	movs	r0, #0
}
   192f6:	b005      	add	sp, #20
   192f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   192fa:	4621      	mov	r1, r4
   192fc:	4a0a      	ldr	r2, [pc, #40]	; (19328 <att_find_info_req+0x74>)
	data.chan = chan;
   192fe:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   19300:	466b      	mov	r3, sp
   19302:	4630      	mov	r0, r6
   19304:	f00e fa08 	bl	27718 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   19308:	9c02      	ldr	r4, [sp, #8]
   1930a:	b944      	cbnz	r4, 1931e <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1930c:	9b01      	ldr	r3, [sp, #4]
   1930e:	6958      	ldr	r0, [r3, #20]
   19310:	f7fe ff7a 	bl	18208 <tx_meta_data_free>
		net_buf_unref(data.buf);
   19314:	9801      	ldr	r0, [sp, #4]
   19316:	f003 fe87 	bl	1d028 <net_buf_unref>
	if (!req) {
   1931a:	230a      	movs	r3, #10
   1931c:	e7e5      	b.n	192ea <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1931e:	9901      	ldr	r1, [sp, #4]
   19320:	4628      	mov	r0, r5
   19322:	f00e faf7 	bl	27914 <bt_att_chan_send_rsp>
   19326:	e7e5      	b.n	192f4 <att_find_info_req+0x40>
   19328:	0002772f 	.word	0x0002772f

0001932c <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1932c:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1932e:	4d0a      	ldr	r5, [pc, #40]	; (19358 <bt_att_init+0x2c>)
   19330:	4c0a      	ldr	r4, [pc, #40]	; (1935c <bt_att_init+0x30>)
   19332:	4629      	mov	r1, r5
   19334:	4620      	mov	r0, r4
   19336:	f010 fdcb 	bl	29ed0 <k_queue_append>
   1933a:	f105 0114 	add.w	r1, r5, #20
   1933e:	4620      	mov	r0, r4
   19340:	f010 fdc6 	bl	29ed0 <k_queue_append>
   19344:	f105 0128 	add.w	r1, r5, #40	; 0x28
   19348:	4620      	mov	r0, r4
   1934a:	f010 fdc1 	bl	29ed0 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1934e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   19352:	f000 bde3 	b.w	19f1c <bt_gatt_init>
   19356:	bf00      	nop
   19358:	20002bc8 	.word	0x20002bc8
   1935c:	20000a38 	.word	0x20000a38

00019360 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   19360:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   19362:	2300      	movs	r3, #0
{
   19364:	4605      	mov	r5, r0
   19366:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   19368:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1936a:	f008 fd13 	bl	21d94 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1936e:	4b0b      	ldr	r3, [pc, #44]	; (1939c <bt_att_req_alloc+0x3c>)
   19370:	681b      	ldr	r3, [r3, #0]
   19372:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   19374:	bf04      	itt	eq
   19376:	2500      	moveq	r5, #0
   19378:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1937a:	a901      	add	r1, sp, #4
   1937c:	4808      	ldr	r0, [pc, #32]	; (193a0 <bt_att_req_alloc+0x40>)
   1937e:	462a      	mov	r2, r5
   19380:	4623      	mov	r3, r4
   19382:	f007 fde1 	bl	20f48 <k_mem_slab_alloc>
   19386:	4601      	mov	r1, r0
   19388:	b930      	cbnz	r0, 19398 <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1938a:	9801      	ldr	r0, [sp, #4]
   1938c:	221c      	movs	r2, #28
   1938e:	f00d fcce 	bl	26d2e <memset>

	return req;
   19392:	9801      	ldr	r0, [sp, #4]
}
   19394:	b003      	add	sp, #12
   19396:	bd30      	pop	{r4, r5, pc}
		return NULL;
   19398:	2000      	movs	r0, #0
   1939a:	e7fb      	b.n	19394 <bt_att_req_alloc+0x34>
   1939c:	20002ba8 	.word	0x20002ba8
   193a0:	20000960 	.word	0x20000960

000193a4 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   193a4:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("req %p", req);

	if (req->buf) {
   193a6:	6883      	ldr	r3, [r0, #8]
{
   193a8:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   193aa:	b14b      	cbz	r3, 193c0 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   193ac:	6958      	ldr	r0, [r3, #20]
   193ae:	f7fe ff2b 	bl	18208 <tx_meta_data_free>
		net_buf_unref(req->buf);
   193b2:	9b01      	ldr	r3, [sp, #4]
   193b4:	6898      	ldr	r0, [r3, #8]
   193b6:	f003 fe37 	bl	1d028 <net_buf_unref>
		req->buf = NULL;
   193ba:	9b01      	ldr	r3, [sp, #4]
   193bc:	2200      	movs	r2, #0
   193be:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   193c0:	4803      	ldr	r0, [pc, #12]	; (193d0 <bt_att_req_free+0x2c>)
   193c2:	a901      	add	r1, sp, #4
   193c4:	f010 fcbc 	bl	29d40 <k_mem_slab_free>
}
   193c8:	b003      	add	sp, #12
   193ca:	f85d fb04 	ldr.w	pc, [sp], #4
   193ce:	bf00      	nop
   193d0:	20000960 	.word	0x20000960

000193d4 <att_handle_rsp>:
{
   193d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193d8:	4604      	mov	r4, r0
   193da:	b089      	sub	sp, #36	; 0x24
	k_work_cancel_delayable(&chan->timeout_work);
   193dc:	30b0      	adds	r0, #176	; 0xb0
{
   193de:	4689      	mov	r9, r1
   193e0:	4692      	mov	sl, r2
   193e2:	4698      	mov	r8, r3
	k_work_cancel_delayable(&chan->timeout_work);
   193e4:	f010 fe97 	bl	2a116 <k_work_cancel_delayable>
	if (!chan->req) {
   193e8:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
   193ec:	b9d5      	cbnz	r5, 19424 <att_handle_rsp+0x50>
		BT_WARN("No pending ATT request");
   193ee:	4b17      	ldr	r3, [pc, #92]	; (1944c <att_handle_rsp+0x78>)
   193f0:	9307      	str	r3, [sp, #28]
   193f2:	4817      	ldr	r0, [pc, #92]	; (19450 <att_handle_rsp+0x7c>)
   193f4:	2302      	movs	r3, #2
   193f6:	aa06      	add	r2, sp, #24
   193f8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
	bt_att_func_t func = NULL;
   193fc:	462e      	mov	r6, r5
		BT_WARN("No pending ATT request");
   193fe:	9306      	str	r3, [sp, #24]
   19400:	f00e fa52 	bl	278a8 <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   19404:	6820      	ldr	r0, [r4, #0]
   19406:	f00e fbe3 	bl	27bd0 <att_req_send_process>
	if (func) {
   1940a:	b13e      	cbz	r6, 1941c <att_handle_rsp+0x48>
		func(chan->att->conn, err, pdu, len, params);
   1940c:	6820      	ldr	r0, [r4, #0]
   1940e:	f8cd b000 	str.w	fp, [sp]
   19412:	6800      	ldr	r0, [r0, #0]
   19414:	4653      	mov	r3, sl
   19416:	464a      	mov	r2, r9
   19418:	4641      	mov	r1, r8
   1941a:	47b0      	blx	r6
}
   1941c:	2000      	movs	r0, #0
   1941e:	b009      	add	sp, #36	; 0x24
   19420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   19424:	4b0b      	ldr	r3, [pc, #44]	; (19454 <att_handle_rsp+0x80>)
   19426:	429d      	cmp	r5, r3
   19428:	f04f 0700 	mov.w	r7, #0
   1942c:	d103      	bne.n	19436 <att_handle_rsp+0x62>
		chan->req = NULL;
   1942e:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
	bt_att_func_t func = NULL;
   19432:	463e      	mov	r6, r7
		goto process;
   19434:	e7e6      	b.n	19404 <att_handle_rsp+0x30>
	func = chan->req->func;
   19436:	686e      	ldr	r6, [r5, #4]
	chan->req->func = NULL;
   19438:	606f      	str	r7, [r5, #4]
	bt_att_req_free(chan->req);
   1943a:	4628      	mov	r0, r5
	params = chan->req->user_data;
   1943c:	f8d5 b018 	ldr.w	fp, [r5, #24]
	bt_att_req_free(chan->req);
   19440:	f7ff ffb0 	bl	193a4 <bt_att_req_free>
	chan->req = NULL;
   19444:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
   19448:	e7dc      	b.n	19404 <att_handle_rsp+0x30>
   1944a:	bf00      	nop
   1944c:	0002d497 	.word	0x0002d497
   19450:	0002abd8 	.word	0x0002abd8
   19454:	20002bac 	.word	0x20002bac

00019458 <bt_att_disconnected>:
{
   19458:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   1945c:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   19460:	4604      	mov	r4, r0
	if (!att_chan->att) {
   19462:	2e00      	cmp	r6, #0
   19464:	d063      	beq.n	1952e <bt_att_disconnected+0xd6>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   19466:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
   1946a:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   1946e:	f00e fa5f 	bl	27930 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   19472:	1f27      	subs	r7, r4, #4
   19474:	f104 0894 	add.w	r8, r4, #148	; 0x94
   19478:	2200      	movs	r2, #0
   1947a:	2300      	movs	r3, #0
   1947c:	4640      	mov	r0, r8
   1947e:	f00f fd89 	bl	28f94 <net_buf_get>
   19482:	4605      	mov	r5, r0
   19484:	bb58      	cbnz	r0, 194de <bt_att_disconnected+0x86>
	if (chan->req) {
   19486:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1948a:	b12b      	cbz	r3, 19498 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1948c:	4602      	mov	r2, r0
   1948e:	4601      	mov	r1, r0
   19490:	230e      	movs	r3, #14
   19492:	4638      	mov	r0, r7
   19494:	f7ff ff9e 	bl	193d4 <att_handle_rsp>
	chan->att = NULL;
   19498:	2300      	movs	r3, #0
   1949a:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   1949e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   194a0:	2b00      	cmp	r3, #0
   194a2:	d144      	bne.n	1952e <bt_att_disconnected+0xd6>
	att_reset(att);
   194a4:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_slist_get(&att->prep_queue))) {
   194a6:	9803      	ldr	r0, [sp, #12]
   194a8:	3024      	adds	r0, #36	; 0x24
   194aa:	f00f fdb5 	bl	29018 <net_buf_slist_get>
   194ae:	4605      	mov	r5, r0
   194b0:	b9e0      	cbnz	r0, 194ec <bt_att_disconnected+0x94>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   194b2:	9803      	ldr	r0, [sp, #12]
   194b4:	2200      	movs	r2, #0
   194b6:	2300      	movs	r3, #0
   194b8:	300c      	adds	r0, #12
   194ba:	f00f fd6b 	bl	28f94 <net_buf_get>
   194be:	4605      	mov	r5, r0
   194c0:	b9d8      	cbnz	r0, 194fa <bt_att_disconnected+0xa2>
	while (!sys_slist_is_empty(&att->reqs)) {
   194c2:	9803      	ldr	r0, [sp, #12]
	return list->head;
   194c4:	6845      	ldr	r5, [r0, #4]
   194c6:	b9fd      	cbnz	r5, 19508 <bt_att_disconnected+0xb0>
	att->conn = NULL;
   194c8:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   194ca:	a903      	add	r1, sp, #12
   194cc:	4819      	ldr	r0, [pc, #100]	; (19534 <bt_att_disconnected+0xdc>)
   194ce:	f010 fc37 	bl	29d40 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   194d2:	6820      	ldr	r0, [r4, #0]
}
   194d4:	b004      	add	sp, #16
   194d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   194da:	f001 bb71 	b.w	1abc0 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   194de:	6968      	ldr	r0, [r5, #20]
   194e0:	f7fe fe92 	bl	18208 <tx_meta_data_free>
		net_buf_unref(buf);
   194e4:	4628      	mov	r0, r5
   194e6:	f003 fd9f 	bl	1d028 <net_buf_unref>
   194ea:	e7c5      	b.n	19478 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   194ec:	6968      	ldr	r0, [r5, #20]
   194ee:	f7fe fe8b 	bl	18208 <tx_meta_data_free>
		net_buf_unref(buf);
   194f2:	4628      	mov	r0, r5
   194f4:	f003 fd98 	bl	1d028 <net_buf_unref>
   194f8:	e7d5      	b.n	194a6 <bt_att_disconnected+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   194fa:	6968      	ldr	r0, [r5, #20]
   194fc:	f7fe fe84 	bl	18208 <tx_meta_data_free>
		net_buf_unref(buf);
   19500:	4628      	mov	r0, r5
   19502:	f003 fd91 	bl	1d028 <net_buf_unref>
   19506:	e7d4      	b.n	194b2 <bt_att_disconnected+0x5a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19508:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   1950a:	686e      	ldr	r6, [r5, #4]
	return node->next;
   1950c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1950e:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19510:	4295      	cmp	r5, r2
	list->tail = node;
   19512:	bf08      	it	eq
   19514:	6083      	streq	r3, [r0, #8]
   19516:	b136      	cbz	r6, 19526 <bt_att_disconnected+0xce>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   19518:	69ab      	ldr	r3, [r5, #24]
   1951a:	9300      	str	r3, [sp, #0]
   1951c:	2300      	movs	r3, #0
   1951e:	6800      	ldr	r0, [r0, #0]
   19520:	461a      	mov	r2, r3
   19522:	210e      	movs	r1, #14
   19524:	47b0      	blx	r6
		bt_att_req_free(req);
   19526:	4628      	mov	r0, r5
   19528:	f7ff ff3c 	bl	193a4 <bt_att_req_free>
   1952c:	e7c9      	b.n	194c2 <bt_att_disconnected+0x6a>
}
   1952e:	b004      	add	sp, #16
   19530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19534:	20000928 	.word	0x20000928

00019538 <att_timeout>:
{
   19538:	b510      	push	{r4, lr}
   1953a:	4604      	mov	r4, r0
   1953c:	b086      	sub	sp, #24
	BT_ERR("ATT Timeout");
   1953e:	4b08      	ldr	r3, [pc, #32]	; (19560 <att_timeout+0x28>)
   19540:	9305      	str	r3, [sp, #20]
   19542:	4808      	ldr	r0, [pc, #32]	; (19564 <att_timeout+0x2c>)
   19544:	2302      	movs	r3, #2
   19546:	aa04      	add	r2, sp, #16
   19548:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1954c:	9304      	str	r3, [sp, #16]
   1954e:	f00e f9ab 	bl	278a8 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   19552:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
}
   19556:	b006      	add	sp, #24
   19558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1955c:	f7ff bf7c 	b.w	19458 <bt_att_disconnected>
   19560:	0002d4ae 	.word	0x0002d4ae
   19564:	0002abd8 	.word	0x0002abd8

00019568 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   19568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1956a:	4d0f      	ldr	r5, [pc, #60]	; (195a8 <find_cf_cfg+0x40>)
   1956c:	4604      	mov	r4, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1956e:	2700      	movs	r7, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   19570:	462e      	mov	r6, r5

		if (!conn) {
   19572:	1c68      	adds	r0, r5, #1
   19574:	b964      	cbnz	r4, 19590 <find_cf_cfg+0x28>
	return memcmp(a, b, sizeof(*a));
   19576:	2207      	movs	r2, #7
   19578:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1957a:	9400      	str	r4, [sp, #0]
   1957c:	f8cd 4003 	str.w	r4, [sp, #3]
   19580:	f00d fba1 	bl	26cc6 <memcmp>
   19584:	b958      	cbnz	r0, 1959e <find_cf_cfg+0x36>
			return cfg;
		}
	}

	return NULL;
}
   19586:	4630      	mov	r0, r6
   19588:	b003      	add	sp, #12
   1958a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1958c:	2701      	movs	r7, #1
   1958e:	e7ef      	b.n	19570 <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19590:	4602      	mov	r2, r0
   19592:	7829      	ldrb	r1, [r5, #0]
   19594:	4620      	mov	r0, r4
   19596:	f00d ff7b 	bl	27490 <bt_conn_is_peer_addr_le>
   1959a:	2800      	cmp	r0, #0
   1959c:	d1f3      	bne.n	19586 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1959e:	3510      	adds	r5, #16
   195a0:	2f00      	cmp	r7, #0
   195a2:	d0f3      	beq.n	1958c <find_cf_cfg+0x24>
	return NULL;
   195a4:	2600      	movs	r6, #0
   195a6:	e7ee      	b.n	19586 <find_cf_cfg+0x1e>
   195a8:	20002c0c 	.word	0x20002c0c

000195ac <ccc_set_direct.part.0>:
	return ccc_set(name, len_rd, read_cb, cb_arg);
}

SETTINGS_STATIC_HANDLER_DEFINE(bt_ccc, "bt/ccc", NULL, ccc_set_cb, NULL, NULL);

static int ccc_set_direct(const char *key, size_t len, settings_read_cb read_cb,
   195ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

		BT_DBG("key: %s", (const char *)param);

		/* Only "bt/ccc" settings should ever come here */
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
			BT_ERR("Invalid key");
   195ae:	4b07      	ldr	r3, [pc, #28]	; (195cc <ccc_set_direct.part.0+0x20>)
   195b0:	9305      	str	r3, [sp, #20]
   195b2:	4807      	ldr	r0, [pc, #28]	; (195d0 <ccc_set_direct.part.0+0x24>)
   195b4:	2302      	movs	r3, #2
   195b6:	aa04      	add	r2, sp, #16
   195b8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   195bc:	9304      	str	r3, [sp, #16]
   195be:	f00e fe0c 	bl	281da <z_log_msg_static_create.constprop.0>
		}

		return ccc_set(name, len, read_cb, cb_arg);
	}
	return 0;
}
   195c2:	f06f 0015 	mvn.w	r0, #21
   195c6:	b007      	add	sp, #28
   195c8:	f85d fb04 	ldr.w	pc, [sp], #4
   195cc:	0002d4c1 	.word	0x0002d4c1
   195d0:	0002ac08 	.word	0x0002ac08

000195d4 <db_hash_commit>:

	return 0;
}

static int db_hash_commit(void)
{
   195d4:	b5b0      	push	{r4, r5, r7, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   195d6:	2108      	movs	r1, #8
   195d8:	af00      	add	r7, sp, #0
   195da:	480f      	ldr	r0, [pc, #60]	; (19618 <db_hash_commit+0x44>)
   195dc:	f00e fddf 	bl	2819e <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	if (IS_ENABLED(CONFIG_BT_LONG_WQ)) {
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   195e0:	480e      	ldr	r0, [pc, #56]	; (1961c <db_hash_commit+0x48>)
   195e2:	2200      	movs	r2, #0
   195e4:	2300      	movs	r3, #0
   195e6:	f7fb fd59 	bl	1509c <bt_long_wq_reschedule>
	/* Settings commit uses non-zero value to indicate failure. */
	if (err > 0) {
		err = 0;
	}

	if (err) {
   195ea:	1e04      	subs	r4, r0, #0
   195ec:	da11      	bge.n	19612 <db_hash_commit+0x3e>
		BT_ERR("Unable to reschedule database hash process (err %d)", err);
   195ee:	466d      	mov	r5, sp
   195f0:	b088      	sub	sp, #32
   195f2:	466a      	mov	r2, sp
   195f4:	4b0a      	ldr	r3, [pc, #40]	; (19620 <db_hash_commit+0x4c>)
   195f6:	480b      	ldr	r0, [pc, #44]	; (19624 <db_hash_commit+0x50>)
   195f8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   195fc:	2303      	movs	r3, #3
   195fe:	f842 3f10 	str.w	r3, [r2, #16]!
   19602:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19606:	f00e fde8 	bl	281da <z_log_msg_static_create.constprop.0>
   1960a:	46ad      	mov	sp, r5
	}

	return err;
}
   1960c:	4620      	mov	r0, r4
   1960e:	46bd      	mov	sp, r7
   19610:	bdb0      	pop	{r4, r5, r7, pc}
	if (err) {
   19612:	2400      	movs	r4, #0
	return err;
   19614:	e7fa      	b.n	1960c <db_hash_commit+0x38>
   19616:	bf00      	nop
   19618:	20002018 	.word	0x20002018
   1961c:	20001f38 	.word	0x20001f38
   19620:	0002d4cd 	.word	0x0002d4cd
   19624:	0002ac08 	.word	0x0002ac08

00019628 <sc_store>:
{
   19628:	b5b0      	push	{r4, r5, r7, lr}
	if (cfg->id) {
   1962a:	4605      	mov	r5, r0
{
   1962c:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   1962e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   19632:	af02      	add	r7, sp, #8
   19634:	4604      	mov	r4, r0
	if (cfg->id) {
   19636:	b31a      	cbz	r2, 19680 <sc_store+0x58>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   19638:	2104      	movs	r1, #4
   1963a:	4638      	mov	r0, r7
   1963c:	f00c f997 	bl	2596e <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   19640:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   19642:	4a10      	ldr	r2, [pc, #64]	; (19684 <sc_store+0x5c>)
   19644:	2124      	movs	r1, #36	; 0x24
   19646:	1d38      	adds	r0, r7, #4
   19648:	462b      	mov	r3, r5
   1964a:	f7fb fc77 	bl	14f3c <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1964e:	2204      	movs	r2, #4
   19650:	f104 0108 	add.w	r1, r4, #8
   19654:	18b8      	adds	r0, r7, r2
   19656:	f7fa fa31 	bl	13abc <settings_save_one>
	if (err) {
   1965a:	b170      	cbz	r0, 1967a <sc_store+0x52>
		BT_ERR("failed to store SC (err %d)", err);
   1965c:	466c      	mov	r4, sp
   1965e:	b088      	sub	sp, #32
   19660:	aa02      	add	r2, sp, #8
   19662:	4b09      	ldr	r3, [pc, #36]	; (19688 <sc_store+0x60>)
   19664:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19668:	2303      	movs	r3, #3
   1966a:	f842 3f10 	str.w	r3, [r2, #16]!
   1966e:	4807      	ldr	r0, [pc, #28]	; (1968c <sc_store+0x64>)
   19670:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19674:	f00e fdb1 	bl	281da <z_log_msg_static_create.constprop.0>
   19678:	46a5      	mov	sp, r4
}
   1967a:	3728      	adds	r7, #40	; 0x28
   1967c:	46bd      	mov	sp, r7
   1967e:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   19680:	9200      	str	r2, [sp, #0]
   19682:	e7de      	b.n	19642 <sc_store+0x1a>
   19684:	0002d7f6 	.word	0x0002d7f6
   19688:	0002d501 	.word	0x0002d501
   1968c:	0002ac08 	.word	0x0002ac08

00019690 <cf_write>:
{
   19690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19694:	b086      	sub	sp, #24
   19696:	4698      	mov	r8, r3
   19698:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	if (offset > sizeof(cfg->data)) {
   1969c:	2b01      	cmp	r3, #1
{
   1969e:	4606      	mov	r6, r0
   196a0:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   196a2:	d83e      	bhi.n	19722 <cf_write+0x92>
	if (offset + len > sizeof(cfg->data)) {
   196a4:	4443      	add	r3, r8
   196a6:	2b01      	cmp	r3, #1
   196a8:	4645      	mov	r5, r8
   196aa:	dc3d      	bgt.n	19728 <cf_write+0x98>
	cfg = find_cf_cfg(conn);
   196ac:	f7ff ff5c 	bl	19568 <find_cf_cfg>
	if (!cfg) {
   196b0:	4604      	mov	r4, r0
   196b2:	b918      	cbnz	r0, 196bc <cf_write+0x2c>
		cfg = find_cf_cfg(NULL);
   196b4:	f7ff ff58 	bl	19568 <find_cf_cfg>
	if (!cfg) {
   196b8:	4604      	mov	r4, r0
   196ba:	b180      	cbz	r0, 196de <cf_write+0x4e>
{
   196bc:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   196be:	f1b8 0f00 	cmp.w	r8, #0
   196c2:	d11c      	bne.n	196fe <cf_write+0x6e>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   196c4:	f106 0188 	add.w	r1, r6, #136	; 0x88
   196c8:	1c60      	adds	r0, r4, #1
   196ca:	f00e fcda 	bl	28082 <bt_addr_le_copy>
	cfg->id = conn->id;
   196ce:	4620      	mov	r0, r4
   196d0:	7a33      	ldrb	r3, [r6, #8]
   196d2:	f800 3b0c 	strb.w	r3, [r0], #12
   196d6:	2101      	movs	r1, #1
   196d8:	f00e fd61 	bl	2819e <atomic_or>
}
   196dc:	e00b      	b.n	196f6 <cf_write+0x66>
		BT_WARN("No space to store Client Supported Features");
   196de:	4b15      	ldr	r3, [pc, #84]	; (19734 <cf_write+0xa4>)
   196e0:	9305      	str	r3, [sp, #20]
   196e2:	4815      	ldr	r0, [pc, #84]	; (19738 <cf_write+0xa8>)
   196e4:	2302      	movs	r3, #2
   196e6:	aa04      	add	r2, sp, #16
   196e8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   196ec:	f06f 0510 	mvn.w	r5, #16
		BT_WARN("No space to store Client Supported Features");
   196f0:	9304      	str	r3, [sp, #16]
   196f2:	f00e fd72 	bl	281da <z_log_msg_static_create.constprop.0>
}
   196f6:	4628      	mov	r0, r5
   196f8:	b006      	add	sp, #24
   196fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   196fe:	7a20      	ldrb	r0, [r4, #8]
   19700:	fa20 f301 	lsr.w	r3, r0, r1
   19704:	07da      	lsls	r2, r3, #31
   19706:	d503      	bpl.n	19710 <cf_write+0x80>
		    !(value[i / 8] & BIT(i % 8))) {
   19708:	783b      	ldrb	r3, [r7, #0]
   1970a:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1970c:	07db      	lsls	r3, r3, #31
   1970e:	d50e      	bpl.n	1972e <cf_write+0x9e>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   19710:	3101      	adds	r1, #1
   19712:	2903      	cmp	r1, #3
   19714:	d1d3      	bne.n	196be <cf_write+0x2e>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   19716:	783b      	ldrb	r3, [r7, #0]
   19718:	f003 0307 	and.w	r3, r3, #7
   1971c:	4318      	orrs	r0, r3
   1971e:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   19720:	e7d0      	b.n	196c4 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19722:	f06f 0506 	mvn.w	r5, #6
   19726:	e7e6      	b.n	196f6 <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19728:	f06f 050c 	mvn.w	r5, #12
   1972c:	e7e3      	b.n	196f6 <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1972e:	f06f 0512 	mvn.w	r5, #18
   19732:	e7e0      	b.n	196f6 <cf_write+0x66>
   19734:	0002d51d 	.word	0x0002d51d
   19738:	0002ac08 	.word	0x0002ac08

0001973c <db_hash_store>:
{
   1973c:	b598      	push	{r3, r4, r7, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1973e:	490c      	ldr	r1, [pc, #48]	; (19770 <db_hash_store+0x34>)
   19740:	480c      	ldr	r0, [pc, #48]	; (19774 <db_hash_store+0x38>)
{
   19742:	af00      	add	r7, sp, #0
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   19744:	2210      	movs	r2, #16
   19746:	f7fa f9b9 	bl	13abc <settings_save_one>
	if (err) {
   1974a:	b170      	cbz	r0, 1976a <db_hash_store+0x2e>
		BT_ERR("Failed to save Database Hash (err %d)", err);
   1974c:	466c      	mov	r4, sp
   1974e:	b088      	sub	sp, #32
   19750:	466a      	mov	r2, sp
   19752:	4b09      	ldr	r3, [pc, #36]	; (19778 <db_hash_store+0x3c>)
   19754:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19758:	2303      	movs	r3, #3
   1975a:	f842 3f10 	str.w	r3, [r2, #16]!
   1975e:	4807      	ldr	r0, [pc, #28]	; (1977c <db_hash_store+0x40>)
   19760:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19764:	f00e fd39 	bl	281da <z_log_msg_static_create.constprop.0>
   19768:	46a5      	mov	sp, r4
}
   1976a:	46bd      	mov	sp, r7
   1976c:	bd98      	pop	{r3, r4, r7, pc}
   1976e:	bf00      	nop
   19770:	20001f18 	.word	0x20001f18
   19774:	0002d549 	.word	0x0002d549
   19778:	0002d551 	.word	0x0002d551
   1977c:	0002ac08 	.word	0x0002ac08

00019780 <db_hash_set>:
{
   19780:	b5b0      	push	{r4, r5, r7, lr}
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   19782:	490e      	ldr	r1, [pc, #56]	; (197bc <db_hash_set+0x3c>)
{
   19784:	4614      	mov	r4, r2
   19786:	af00      	add	r7, sp, #0
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   19788:	2210      	movs	r2, #16
   1978a:	4618      	mov	r0, r3
   1978c:	47a0      	blx	r4
	if (len < 0) {
   1978e:	1e04      	subs	r4, r0, #0
   19790:	da11      	bge.n	197b6 <db_hash_set+0x36>
		BT_ERR("Failed to decode value (err %zd)", len);
   19792:	466d      	mov	r5, sp
   19794:	b088      	sub	sp, #32
   19796:	466a      	mov	r2, sp
   19798:	4b09      	ldr	r3, [pc, #36]	; (197c0 <db_hash_set+0x40>)
   1979a:	480a      	ldr	r0, [pc, #40]	; (197c4 <db_hash_set+0x44>)
   1979c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   197a0:	2303      	movs	r3, #3
   197a2:	f842 3f10 	str.w	r3, [r2, #16]!
   197a6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   197aa:	f00e fd16 	bl	281da <z_log_msg_static_create.constprop.0>
   197ae:	46ad      	mov	sp, r5
}
   197b0:	4620      	mov	r0, r4
   197b2:	46bd      	mov	sp, r7
   197b4:	bdb0      	pop	{r4, r5, r7, pc}
	return 0;
   197b6:	2400      	movs	r4, #0
   197b8:	e7fa      	b.n	197b0 <db_hash_set+0x30>
   197ba:	bf00      	nop
   197bc:	20001f28 	.word	0x20001f28
   197c0:	0002d577 	.word	0x0002d577
   197c4:	0002ac08 	.word	0x0002ac08

000197c8 <sc_commit>:
{
   197c8:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   197ca:	4809      	ldr	r0, [pc, #36]	; (197f0 <sc_commit+0x28>)
   197cc:	f06f 0102 	mvn.w	r1, #2
   197d0:	f00e fcf4 	bl	281bc <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   197d4:	4806      	ldr	r0, [pc, #24]	; (197f0 <sc_commit+0x28>)
   197d6:	f00e fcdc 	bl	28192 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   197da:	07c3      	lsls	r3, r0, #31
   197dc:	d505      	bpl.n	197ea <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   197de:	4805      	ldr	r0, [pc, #20]	; (197f4 <sc_commit+0x2c>)
   197e0:	f44f 72a4 	mov.w	r2, #328	; 0x148
   197e4:	2300      	movs	r3, #0
   197e6:	f007 ffc3 	bl	21770 <k_work_reschedule>
}
   197ea:	2000      	movs	r0, #0
   197ec:	bd08      	pop	{r3, pc}
   197ee:	bf00      	nop
   197f0:	20002018 	.word	0x20002018
   197f4:	20001fe8 	.word	0x20001fe8

000197f8 <find_cf_cfg_by_addr>:
{
   197f8:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   197fa:	4c0e      	ldr	r4, [pc, #56]	; (19834 <find_cf_cfg_by_addr+0x3c>)
   197fc:	7823      	ldrb	r3, [r4, #0]
   197fe:	4283      	cmp	r3, r0
{
   19800:	4606      	mov	r6, r0
   19802:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   19804:	d00a      	beq.n	1981c <find_cf_cfg_by_addr+0x24>
   19806:	7c23      	ldrb	r3, [r4, #16]
   19808:	42b3      	cmp	r3, r6
   1980a:	d111      	bne.n	19830 <find_cf_cfg_by_addr+0x38>
   1980c:	490a      	ldr	r1, [pc, #40]	; (19838 <find_cf_cfg_by_addr+0x40>)
   1980e:	2207      	movs	r2, #7
   19810:	4628      	mov	r0, r5
   19812:	f00d fa58 	bl	26cc6 <memcmp>
   19816:	b958      	cbnz	r0, 19830 <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   19818:	2001      	movs	r0, #1
   1981a:	e006      	b.n	1982a <find_cf_cfg_by_addr+0x32>
   1981c:	2207      	movs	r2, #7
   1981e:	1c61      	adds	r1, r4, #1
   19820:	4628      	mov	r0, r5
   19822:	f00d fa50 	bl	26cc6 <memcmp>
			if (id == cf_cfg[i].id &&
   19826:	2800      	cmp	r0, #0
   19828:	d1ed      	bne.n	19806 <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
   1982a:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   1982e:	e000      	b.n	19832 <find_cf_cfg_by_addr+0x3a>
	return NULL;
   19830:	2000      	movs	r0, #0
}
   19832:	bd70      	pop	{r4, r5, r6, pc}
   19834:	20002c0c 	.word	0x20002c0c
   19838:	20002c1d 	.word	0x20002c1d

0001983c <cf_set>:
{
   1983c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19840:	b08b      	sub	sp, #44	; 0x2c
   19842:	4689      	mov	r9, r1
   19844:	af00      	add	r7, sp, #0
   19846:	4616      	mov	r6, r2
   19848:	4698      	mov	r8, r3
	if (!name) {
   1984a:	4605      	mov	r5, r0
   1984c:	b988      	cbnz	r0, 19872 <cf_set+0x36>
		BT_ERR("Insufficient number of arguments");
   1984e:	4b40      	ldr	r3, [pc, #256]	; (19950 <cf_set+0x114>)
   19850:	627b      	str	r3, [r7, #36]	; 0x24
   19852:	4840      	ldr	r0, [pc, #256]	; (19954 <cf_set+0x118>)
   19854:	2302      	movs	r3, #2
   19856:	f107 0220 	add.w	r2, r7, #32
   1985a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1985e:	623b      	str	r3, [r7, #32]
   19860:	f00e fcbb 	bl	281da <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   19864:	f06f 0415 	mvn.w	r4, #21
}
   19868:	4620      	mov	r0, r4
   1986a:	372c      	adds	r7, #44	; 0x2c
   1986c:	46bd      	mov	sp, r7
   1986e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   19872:	f107 0108 	add.w	r1, r7, #8
   19876:	f00d fac4 	bl	26e02 <bt_settings_decode_key>
	if (err) {
   1987a:	4604      	mov	r4, r0
   1987c:	b188      	cbz	r0, 198a2 <cf_set+0x66>
		BT_ERR("Unable to decode address %s", name);
   1987e:	466c      	mov	r4, sp
   19880:	b088      	sub	sp, #32
   19882:	466a      	mov	r2, sp
   19884:	4b34      	ldr	r3, [pc, #208]	; (19958 <cf_set+0x11c>)
   19886:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1988a:	2302      	movs	r3, #2
   1988c:	7713      	strb	r3, [r2, #28]
   1988e:	4b33      	ldr	r3, [pc, #204]	; (1995c <cf_set+0x120>)
   19890:	f842 3f10 	str.w	r3, [r2, #16]!
   19894:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   19898:	482e      	ldr	r0, [pc, #184]	; (19954 <cf_set+0x118>)
   1989a:	f00e fc9e 	bl	281da <z_log_msg_static_create.constprop.0>
   1989e:	46a5      	mov	sp, r4
   198a0:	e7e0      	b.n	19864 <cf_set+0x28>
	settings_name_next(name, &next);
   198a2:	1d39      	adds	r1, r7, #4
   198a4:	4628      	mov	r0, r5
   198a6:	f00c fef6 	bl	26696 <settings_name_next>
	if (!next) {
   198aa:	6878      	ldr	r0, [r7, #4]
   198ac:	b180      	cbz	r0, 198d0 <cf_set+0x94>
		unsigned long next_id = strtoul(next, NULL, 10);
   198ae:	220a      	movs	r2, #10
   198b0:	4621      	mov	r1, r4
   198b2:	f00d f946 	bl	26b42 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   198b6:	b158      	cbz	r0, 198d0 <cf_set+0x94>
			BT_ERR("Invalid local identity %lu", next_id);
   198b8:	466c      	mov	r4, sp
   198ba:	b088      	sub	sp, #32
   198bc:	466a      	mov	r2, sp
   198be:	4b28      	ldr	r3, [pc, #160]	; (19960 <cf_set+0x124>)
   198c0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   198c4:	2303      	movs	r3, #3
   198c6:	f842 3f10 	str.w	r3, [r2, #16]!
   198ca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   198ce:	e7e3      	b.n	19898 <cf_set+0x5c>
	cfg = find_cf_cfg_by_addr(id, &addr);
   198d0:	f107 0108 	add.w	r1, r7, #8
   198d4:	2000      	movs	r0, #0
   198d6:	f7ff ff8f 	bl	197f8 <find_cf_cfg_by_addr>
	if (!cfg) {
   198da:	4605      	mov	r5, r0
   198dc:	b9c0      	cbnz	r0, 19910 <cf_set+0xd4>
		cfg = find_cf_cfg(NULL);
   198de:	f7ff fe43 	bl	19568 <find_cf_cfg>
		if (!cfg) {
   198e2:	4605      	mov	r5, r0
   198e4:	b968      	cbnz	r0, 19902 <cf_set+0xc6>
			BT_ERR("Unable to restore CF: no cfg left");
   198e6:	4b1f      	ldr	r3, [pc, #124]	; (19964 <cf_set+0x128>)
   198e8:	627b      	str	r3, [r7, #36]	; 0x24
   198ea:	481a      	ldr	r0, [pc, #104]	; (19954 <cf_set+0x118>)
   198ec:	2302      	movs	r3, #2
   198ee:	f107 0220 	add.w	r2, r7, #32
   198f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   198f6:	623b      	str	r3, [r7, #32]
			return -ENOMEM;
   198f8:	f06f 040b 	mvn.w	r4, #11
			BT_ERR("Unable to restore CF: no cfg left");
   198fc:	f00e fc6d 	bl	281da <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   19900:	e7b2      	b.n	19868 <cf_set+0x2c>
		cfg->id = id;
   19902:	2300      	movs	r3, #0
   19904:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   19908:	f107 0108 	add.w	r1, r7, #8
   1990c:	f00e fbb9 	bl	28082 <bt_addr_le_copy>
	if (len_rd) {
   19910:	f1b9 0f00 	cmp.w	r9, #0
   19914:	d017      	beq.n	19946 <cf_set+0x10a>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   19916:	f105 0108 	add.w	r1, r5, #8
   1991a:	2201      	movs	r2, #1
   1991c:	4640      	mov	r0, r8
   1991e:	47b0      	blx	r6
		if (len < 0) {
   19920:	1e05      	subs	r5, r0, #0
   19922:	daa1      	bge.n	19868 <cf_set+0x2c>
			BT_ERR("Failed to decode value (err %zd)", len);
   19924:	466c      	mov	r4, sp
   19926:	b088      	sub	sp, #32
   19928:	466a      	mov	r2, sp
   1992a:	4b0f      	ldr	r3, [pc, #60]	; (19968 <cf_set+0x12c>)
   1992c:	4809      	ldr	r0, [pc, #36]	; (19954 <cf_set+0x118>)
   1992e:	e9c2 3505 	strd	r3, r5, [r2, #20]
   19932:	2303      	movs	r3, #3
   19934:	f842 3f10 	str.w	r3, [r2, #16]!
   19938:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1993c:	f00e fc4d 	bl	281da <z_log_msg_static_create.constprop.0>
   19940:	46a5      	mov	sp, r4
			return len;
   19942:	462c      	mov	r4, r5
   19944:	e790      	b.n	19868 <cf_set+0x2c>
		clear_cf_cfg(cfg);
   19946:	4628      	mov	r0, r5
   19948:	f00e fc4a 	bl	281e0 <clear_cf_cfg>
   1994c:	e78c      	b.n	19868 <cf_set+0x2c>
   1994e:	bf00      	nop
   19950:	0002c3c9 	.word	0x0002c3c9
   19954:	0002ac08 	.word	0x0002ac08
   19958:	0002d598 	.word	0x0002d598
   1995c:	01000003 	.word	0x01000003
   19960:	0002d5b4 	.word	0x0002d5b4
   19964:	0002d5cf 	.word	0x0002d5cf
   19968:	0002d577 	.word	0x0002d577

0001996c <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   1996c:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1996e:	6881      	ldr	r1, [r0, #8]
{
   19970:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19972:	4a07      	ldr	r2, [pc, #28]	; (19990 <remove_peer_from_attr+0x24>)
   19974:	4291      	cmp	r1, r2
   19976:	d109      	bne.n	1998c <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   19978:	791a      	ldrb	r2, [r3, #4]
   1997a:	6819      	ldr	r1, [r3, #0]
   1997c:	68c0      	ldr	r0, [r0, #12]
   1997e:	f00e fcf7 	bl	28370 <ccc_find_cfg>
	if (cfg) {
   19982:	b118      	cbz	r0, 1998c <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   19984:	220a      	movs	r2, #10
   19986:	2100      	movs	r1, #0
   19988:	f00d f9d1 	bl	26d2e <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   1998c:	2001      	movs	r0, #1
   1998e:	bd08      	pop	{r3, pc}
   19990:	00019a59 	.word	0x00019a59

00019994 <ccc_save>:
{
   19994:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   19996:	4b0c      	ldr	r3, [pc, #48]	; (199c8 <ccc_save+0x34>)
{
   19998:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1999a:	6882      	ldr	r2, [r0, #8]
   1999c:	429a      	cmp	r2, r3
{
   1999e:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   199a0:	d10f      	bne.n	199c2 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   199a2:	7922      	ldrb	r2, [r4, #4]
   199a4:	6821      	ldr	r1, [r4, #0]
   199a6:	68c0      	ldr	r0, [r0, #12]
   199a8:	f00e fce2 	bl	28370 <ccc_find_cfg>
	if (!cfg) {
   199ac:	b148      	cbz	r0, 199c2 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   199ae:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   199b2:	8901      	ldrh	r1, [r0, #8]
   199b4:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   199b8:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   199ba:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   199bc:	8151      	strh	r1, [r2, #10]
	save->count++;
   199be:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   199c2:	2001      	movs	r0, #1
   199c4:	bd38      	pop	{r3, r4, r5, pc}
   199c6:	bf00      	nop
   199c8:	00019a59 	.word	0x00019a59

000199cc <ccc_load>:
{
   199cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   199ce:	4b21      	ldr	r3, [pc, #132]	; (19a54 <ccc_load+0x88>)
{
   199d0:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   199d2:	6882      	ldr	r2, [r0, #8]
   199d4:	429a      	cmp	r2, r3
   199d6:	d002      	beq.n	199de <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   199d8:	2001      	movs	r0, #1
}
   199da:	b002      	add	sp, #8
   199dc:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   199de:	68a3      	ldr	r3, [r4, #8]
   199e0:	68c6      	ldr	r6, [r0, #12]
   199e2:	b94b      	cbnz	r3, 199f8 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   199e4:	7922      	ldrb	r2, [r4, #4]
   199e6:	6821      	ldr	r1, [r4, #0]
   199e8:	4630      	mov	r0, r6
   199ea:	f00e fcc1 	bl	28370 <ccc_find_cfg>
	if (!cfg) {
   199ee:	2800      	cmp	r0, #0
   199f0:	d0f2      	beq.n	199d8 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   199f2:	f00e fb49 	bl	28088 <clear_ccc_cfg>
   199f6:	e7ef      	b.n	199d8 <ccc_load+0xc>
	} else if (!load->count) {
   199f8:	68e0      	ldr	r0, [r4, #12]
   199fa:	2800      	cmp	r0, #0
   199fc:	d0ed      	beq.n	199da <ccc_load+0xe>
	if (load->entry->handle != handle) {
   199fe:	881b      	ldrh	r3, [r3, #0]
   19a00:	4299      	cmp	r1, r3
   19a02:	d00a      	beq.n	19a1a <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   19a04:	d9e8      	bls.n	199d8 <ccc_load+0xc>
	load->count--;
   19a06:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   19a08:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   19a0a:	3801      	subs	r0, #1
	load->entry++;
   19a0c:	3304      	adds	r3, #4
	load->count--;
   19a0e:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   19a10:	3800      	subs	r0, #0
	load->entry++;
   19a12:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   19a14:	bf18      	it	ne
   19a16:	2001      	movne	r0, #1
   19a18:	e7df      	b.n	199da <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   19a1a:	7922      	ldrb	r2, [r4, #4]
   19a1c:	6821      	ldr	r1, [r4, #0]
   19a1e:	4630      	mov	r0, r6
   19a20:	f00e fca6 	bl	28370 <ccc_find_cfg>
	if (!cfg) {
   19a24:	4605      	mov	r5, r0
   19a26:	b980      	cbnz	r0, 19a4a <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   19a28:	9000      	str	r0, [sp, #0]
   19a2a:	4602      	mov	r2, r0
   19a2c:	f8cd 0003 	str.w	r0, [sp, #3]
   19a30:	4669      	mov	r1, sp
   19a32:	4630      	mov	r0, r6
   19a34:	f00e fc9c 	bl	28370 <ccc_find_cfg>
		if (!cfg) {
   19a38:	4605      	mov	r5, r0
   19a3a:	2800      	cmp	r0, #0
   19a3c:	d0e3      	beq.n	19a06 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   19a3e:	6821      	ldr	r1, [r4, #0]
   19a40:	3001      	adds	r0, #1
   19a42:	f00e fb1e 	bl	28082 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   19a46:	7923      	ldrb	r3, [r4, #4]
   19a48:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   19a4a:	68a3      	ldr	r3, [r4, #8]
   19a4c:	885b      	ldrh	r3, [r3, #2]
   19a4e:	812b      	strh	r3, [r5, #8]
   19a50:	e7d9      	b.n	19a06 <ccc_load+0x3a>
   19a52:	bf00      	nop
   19a54:	00019a59 	.word	0x00019a59

00019a58 <bt_gatt_attr_write_ccc>:
{
   19a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19a5c:	b086      	sub	sp, #24
   19a5e:	4698      	mov	r8, r3
   19a60:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
   19a64:	f8d1 a00c 	ldr.w	sl, [r1, #12]
{
   19a68:	4606      	mov	r6, r0
   19a6a:	4689      	mov	r9, r1
	if (offset) {
   19a6c:	2b00      	cmp	r3, #0
   19a6e:	d16b      	bne.n	19b48 <bt_gatt_attr_write_ccc+0xf0>
	if (!len || len > sizeof(uint16_t)) {
   19a70:	f108 33ff 	add.w	r3, r8, #4294967295
   19a74:	2b01      	cmp	r3, #1
   19a76:	d86a      	bhi.n	19b4e <bt_gatt_attr_write_ccc+0xf6>
		value = *(uint8_t *)buf;
   19a78:	7817      	ldrb	r7, [r2, #0]
	if (len < sizeof(uint16_t)) {
   19a7a:	f1b8 0f01 	cmp.w	r8, #1
	cfg = find_ccc_cfg(conn, ccc);
   19a7e:	4651      	mov	r1, sl
   19a80:	bf14      	ite	ne
   19a82:	8817      	ldrhne	r7, [r2, #0]
		value = *(uint8_t *)buf;
   19a84:	b2bf      	uxtheq	r7, r7
	cfg = find_ccc_cfg(conn, ccc);
   19a86:	f00e fc82 	bl	2838e <find_ccc_cfg>
	if (!cfg) {
   19a8a:	4605      	mov	r5, r0
   19a8c:	b9e8      	cbnz	r0, 19aca <bt_gatt_attr_write_ccc+0x72>
		if (!value) {
   19a8e:	b91f      	cbnz	r7, 19a98 <bt_gatt_attr_write_ccc+0x40>
			return len;
   19a90:	4640      	mov	r0, r8
}
   19a92:	b006      	add	sp, #24
   19a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   19a98:	4651      	mov	r1, sl
   19a9a:	f00e fc78 	bl	2838e <find_ccc_cfg>
		if (!cfg) {
   19a9e:	4605      	mov	r5, r0
   19aa0:	b960      	cbnz	r0, 19abc <bt_gatt_attr_write_ccc+0x64>
			BT_WARN("No space to store CCC cfg");
   19aa2:	4b2c      	ldr	r3, [pc, #176]	; (19b54 <bt_gatt_attr_write_ccc+0xfc>)
   19aa4:	482c      	ldr	r0, [pc, #176]	; (19b58 <bt_gatt_attr_write_ccc+0x100>)
   19aa6:	9305      	str	r3, [sp, #20]
   19aa8:	aa04      	add	r2, sp, #16
   19aaa:	2302      	movs	r3, #2
   19aac:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19ab0:	9304      	str	r3, [sp, #16]
   19ab2:	f00e fb92 	bl	281da <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   19ab6:	f06f 0010 	mvn.w	r0, #16
   19aba:	e7ea      	b.n	19a92 <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19abc:	f106 0188 	add.w	r1, r6, #136	; 0x88
   19ac0:	3001      	adds	r0, #1
   19ac2:	f00e fade 	bl	28082 <bt_addr_le_copy>
		cfg->id = conn->id;
   19ac6:	7a33      	ldrb	r3, [r6, #8]
   19ac8:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   19aca:	f8da 3010 	ldr.w	r3, [sl, #16]
   19ace:	bb7b      	cbnz	r3, 19b30 <bt_gatt_attr_write_ccc+0xd8>
	if (cfg->value != ccc->value) {
   19ad0:	f8ba 300a 	ldrh.w	r3, [sl, #10]
	value_changed = cfg->value != value;
   19ad4:	892c      	ldrh	r4, [r5, #8]
	cfg->value = value;
   19ad6:	812f      	strh	r7, [r5, #8]
	if (cfg->value != ccc->value) {
   19ad8:	42bb      	cmp	r3, r7
   19ada:	d003      	beq.n	19ae4 <bt_gatt_attr_write_ccc+0x8c>
		gatt_ccc_changed(attr, ccc);
   19adc:	4651      	mov	r1, sl
   19ade:	4648      	mov	r0, r9
   19ae0:	f00e faac 	bl	2803c <gatt_ccc_changed>
	if (value_changed) {
   19ae4:	42bc      	cmp	r4, r7
   19ae6:	d01d      	beq.n	19b24 <bt_gatt_attr_write_ccc+0xcc>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   19ae8:	4630      	mov	r0, r6
   19aea:	f7fd ffcb 	bl	17a84 <bt_conn_index>
   19aee:	4c1b      	ldr	r4, [pc, #108]	; (19b5c <bt_gatt_attr_write_ccc+0x104>)
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   19af0:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   19af4:	429e      	cmp	r6, r3
   19af6:	d015      	beq.n	19b24 <bt_gatt_attr_write_ccc+0xcc>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19af8:	7a30      	ldrb	r0, [r6, #8]
   19afa:	f106 0188 	add.w	r1, r6, #136	; 0x88
   19afe:	f00d fafe 	bl	270fe <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   19b02:	b178      	cbz	r0, 19b24 <bt_gatt_attr_write_ccc+0xcc>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   19b04:	4630      	mov	r0, r6
   19b06:	f7fd ffbd 	bl	17a84 <bt_conn_index>
   19b0a:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   19b0c:	4630      	mov	r0, r6
   19b0e:	f00d fc09 	bl	27324 <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   19b12:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   19b16:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   19b1a:	2300      	movs	r3, #0
   19b1c:	f104 0008 	add.w	r0, r4, #8
   19b20:	f007 fe26 	bl	21770 <k_work_reschedule>
	if (!value) {
   19b24:	2f00      	cmp	r7, #0
   19b26:	d1b3      	bne.n	19a90 <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
   19b28:	4628      	mov	r0, r5
   19b2a:	f00e faad 	bl	28088 <clear_ccc_cfg>
   19b2e:	e7af      	b.n	19a90 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   19b30:	463a      	mov	r2, r7
   19b32:	4649      	mov	r1, r9
   19b34:	4630      	mov	r0, r6
   19b36:	4798      	blx	r3
		if (write < 0) {
   19b38:	2800      	cmp	r0, #0
   19b3a:	dbaa      	blt.n	19a92 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   19b3c:	1e44      	subs	r4, r0, #1
   19b3e:	2c01      	cmp	r4, #1
   19b40:	d9c6      	bls.n	19ad0 <bt_gatt_attr_write_ccc+0x78>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   19b42:	f06f 000d 	mvn.w	r0, #13
   19b46:	e7a4      	b.n	19a92 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19b48:	f06f 0006 	mvn.w	r0, #6
   19b4c:	e7a1      	b.n	19a92 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19b4e:	f06f 000c 	mvn.w	r0, #12
   19b52:	e79e      	b.n	19a92 <bt_gatt_attr_write_ccc+0x3a>
   19b54:	0002d5f1 	.word	0x0002d5f1
   19b58:	0002ac08 	.word	0x0002ac08
   19b5c:	20001f90 	.word	0x20001f90

00019b60 <find_sc_cfg>:
{
   19b60:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   19b62:	4c0e      	ldr	r4, [pc, #56]	; (19b9c <find_sc_cfg+0x3c>)
   19b64:	7823      	ldrb	r3, [r4, #0]
   19b66:	4283      	cmp	r3, r0
{
   19b68:	4605      	mov	r5, r0
   19b6a:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   19b6c:	d00a      	beq.n	19b84 <find_sc_cfg+0x24>
   19b6e:	7b23      	ldrb	r3, [r4, #12]
   19b70:	42ab      	cmp	r3, r5
   19b72:	d111      	bne.n	19b98 <find_sc_cfg+0x38>
   19b74:	480a      	ldr	r0, [pc, #40]	; (19ba0 <find_sc_cfg+0x40>)
   19b76:	2207      	movs	r2, #7
   19b78:	4631      	mov	r1, r6
   19b7a:	f00d f8a4 	bl	26cc6 <memcmp>
   19b7e:	b958      	cbnz	r0, 19b98 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19b80:	2001      	movs	r0, #1
   19b82:	e005      	b.n	19b90 <find_sc_cfg+0x30>
   19b84:	2207      	movs	r2, #7
   19b86:	1c60      	adds	r0, r4, #1
   19b88:	f00d f89d 	bl	26cc6 <memcmp>
		if (id == sc_cfg[i].id &&
   19b8c:	2800      	cmp	r0, #0
   19b8e:	d1ee      	bne.n	19b6e <find_sc_cfg+0xe>
			return &sc_cfg[i];
   19b90:	230c      	movs	r3, #12
   19b92:	fb03 4000 	mla	r0, r3, r0, r4
   19b96:	e000      	b.n	19b9a <find_sc_cfg+0x3a>
	return NULL;
   19b98:	2000      	movs	r0, #0
}
   19b9a:	bd70      	pop	{r4, r5, r6, pc}
   19b9c:	20003a98 	.word	0x20003a98
   19ba0:	20003aa5 	.word	0x20003aa5

00019ba4 <sc_save>:
{
   19ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19ba8:	b088      	sub	sp, #32
   19baa:	4680      	mov	r8, r0
   19bac:	460f      	mov	r7, r1
   19bae:	4616      	mov	r6, r2
   19bb0:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   19bb2:	f7ff ffd5 	bl	19b60 <find_sc_cfg>
	if (!cfg) {
   19bb6:	4604      	mov	r4, r0
   19bb8:	b9c8      	cbnz	r0, 19bee <sc_save+0x4a>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   19bba:	4669      	mov	r1, sp
   19bbc:	9000      	str	r0, [sp, #0]
   19bbe:	f8cd 0003 	str.w	r0, [sp, #3]
   19bc2:	f7ff ffcd 	bl	19b60 <find_sc_cfg>
		if (!cfg) {
   19bc6:	4604      	mov	r4, r0
   19bc8:	b960      	cbnz	r0, 19be4 <sc_save+0x40>
			BT_ERR("unable to save SC: no cfg left");
   19bca:	4b17      	ldr	r3, [pc, #92]	; (19c28 <sc_save+0x84>)
   19bcc:	9307      	str	r3, [sp, #28]
   19bce:	4817      	ldr	r0, [pc, #92]	; (19c2c <sc_save+0x88>)
   19bd0:	2302      	movs	r3, #2
   19bd2:	aa06      	add	r2, sp, #24
   19bd4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19bd8:	9306      	str	r3, [sp, #24]
   19bda:	f00e fafe 	bl	281da <z_log_msg_static_create.constprop.0>
}
   19bde:	b008      	add	sp, #32
   19be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   19be4:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   19be8:	4639      	mov	r1, r7
   19bea:	f00e fa4a 	bl	28082 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   19bee:	8922      	ldrh	r2, [r4, #8]
   19bf0:	8963      	ldrh	r3, [r4, #10]
   19bf2:	b97a      	cbnz	r2, 19c14 <sc_save+0x70>
   19bf4:	b983      	cbnz	r3, 19c18 <sc_save+0x74>
		cfg->data.start = start;
   19bf6:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   19bf8:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   19bfa:	4621      	mov	r1, r4
   19bfc:	f811 0b01 	ldrb.w	r0, [r1], #1
   19c00:	f00d fa7d 	bl	270fe <bt_addr_le_is_bonded>
   19c04:	2800      	cmp	r0, #0
   19c06:	d0ea      	beq.n	19bde <sc_save+0x3a>
		sc_store(cfg);
   19c08:	4620      	mov	r0, r4
}
   19c0a:	b008      	add	sp, #32
   19c0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   19c10:	f7ff bd0a 	b.w	19628 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   19c14:	4296      	cmp	r6, r2
   19c16:	d302      	bcc.n	19c1e <sc_save+0x7a>
   19c18:	429d      	cmp	r5, r3
   19c1a:	d8ed      	bhi.n	19bf8 <sc_save+0x54>
   19c1c:	e7df      	b.n	19bde <sc_save+0x3a>
	if (*end < new_end) {
   19c1e:	429d      	cmp	r5, r3
		*start = new_start;
   19c20:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   19c22:	d9ea      	bls.n	19bfa <sc_save+0x56>
   19c24:	e7e8      	b.n	19bf8 <sc_save+0x54>
   19c26:	bf00      	nop
   19c28:	0002d60b 	.word	0x0002d60b
   19c2c:	0002ac08 	.word	0x0002ac08

00019c30 <bt_gatt_clear_sc>:
{
   19c30:	b5b0      	push	{r4, r5, r7, lr}
   19c32:	b08c      	sub	sp, #48	; 0x30
   19c34:	af02      	add	r7, sp, #8
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   19c36:	f7ff ff93 	bl	19b60 <find_sc_cfg>
	if (!cfg) {
   19c3a:	4604      	mov	r4, r0
   19c3c:	b330      	cbz	r0, 19c8c <bt_gatt_clear_sc+0x5c>
		if (cfg->id) {
   19c3e:	4605      	mov	r5, r0
   19c40:	f815 2b01 	ldrb.w	r2, [r5], #1
   19c44:	b332      	cbz	r2, 19c94 <bt_gatt_clear_sc+0x64>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   19c46:	2104      	movs	r1, #4
   19c48:	4638      	mov	r0, r7
   19c4a:	f00b fe90 	bl	2596e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   19c4e:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   19c50:	1d38      	adds	r0, r7, #4
   19c52:	4a11      	ldr	r2, [pc, #68]	; (19c98 <bt_gatt_clear_sc+0x68>)
   19c54:	462b      	mov	r3, r5
   19c56:	2124      	movs	r1, #36	; 0x24
   19c58:	f7fb f970 	bl	14f3c <bt_settings_encode_key>
		err = settings_delete(key);
   19c5c:	1d38      	adds	r0, r7, #4
   19c5e:	f00c fcf3 	bl	26648 <settings_delete>
		if (err) {
   19c62:	b170      	cbz	r0, 19c82 <bt_gatt_clear_sc+0x52>
			BT_ERR("failed to delete SC (err %d)", err);
   19c64:	466d      	mov	r5, sp
   19c66:	b088      	sub	sp, #32
   19c68:	aa02      	add	r2, sp, #8
   19c6a:	4b0c      	ldr	r3, [pc, #48]	; (19c9c <bt_gatt_clear_sc+0x6c>)
   19c6c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19c70:	2303      	movs	r3, #3
   19c72:	f842 3f10 	str.w	r3, [r2, #16]!
   19c76:	480a      	ldr	r0, [pc, #40]	; (19ca0 <bt_gatt_clear_sc+0x70>)
   19c78:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19c7c:	f00e faad 	bl	281da <z_log_msg_static_create.constprop.0>
   19c80:	46ad      	mov	sp, r5
	memset(cfg, 0, sizeof(*cfg));
   19c82:	220c      	movs	r2, #12
   19c84:	2100      	movs	r1, #0
   19c86:	4620      	mov	r0, r4
   19c88:	f00d f851 	bl	26d2e <memset>
}
   19c8c:	2000      	movs	r0, #0
   19c8e:	3728      	adds	r7, #40	; 0x28
   19c90:	46bd      	mov	sp, r7
   19c92:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   19c94:	9200      	str	r2, [sp, #0]
   19c96:	e7db      	b.n	19c50 <bt_gatt_clear_sc+0x20>
   19c98:	0002d7f6 	.word	0x0002d7f6
   19c9c:	0002d62a 	.word	0x0002d62a
   19ca0:	0002ac08 	.word	0x0002ac08

00019ca4 <sc_clear>:
{
   19ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19ca6:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   19caa:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19cac:	4631      	mov	r1, r6
   19cae:	7a00      	ldrb	r0, [r0, #8]
{
   19cb0:	af00      	add	r7, sp, #0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19cb2:	f00d fa24 	bl	270fe <bt_addr_le_is_bonded>
   19cb6:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   19cb8:	4631      	mov	r1, r6
   19cba:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19cbc:	b19d      	cbz	r5, 19ce6 <sc_clear+0x42>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   19cbe:	f7ff ffb7 	bl	19c30 <bt_gatt_clear_sc>
		if (err) {
   19cc2:	b170      	cbz	r0, 19ce2 <sc_clear+0x3e>
			BT_ERR("Failed to clear SC %d", err);
   19cc4:	466c      	mov	r4, sp
   19cc6:	b088      	sub	sp, #32
   19cc8:	466a      	mov	r2, sp
   19cca:	4b0b      	ldr	r3, [pc, #44]	; (19cf8 <sc_clear+0x54>)
   19ccc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19cd0:	2303      	movs	r3, #3
   19cd2:	f842 3f10 	str.w	r3, [r2, #16]!
   19cd6:	4809      	ldr	r0, [pc, #36]	; (19cfc <sc_clear+0x58>)
   19cd8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19cdc:	f00e fa7d 	bl	281da <z_log_msg_static_create.constprop.0>
   19ce0:	46a5      	mov	sp, r4
}
   19ce2:	46bd      	mov	sp, r7
   19ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   19ce6:	f7ff ff3b 	bl	19b60 <find_sc_cfg>
		if (cfg) {
   19cea:	2800      	cmp	r0, #0
   19cec:	d0f9      	beq.n	19ce2 <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   19cee:	220c      	movs	r2, #12
   19cf0:	4629      	mov	r1, r5
   19cf2:	f00d f81c 	bl	26d2e <memset>
}
   19cf6:	e7f4      	b.n	19ce2 <sc_clear+0x3e>
   19cf8:	0002d647 	.word	0x0002d647
   19cfc:	0002ac08 	.word	0x0002ac08

00019d00 <disconnected_cb>:
{
   19d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   19d04:	4b1f      	ldr	r3, [pc, #124]	; (19d84 <disconnected_cb+0x84>)
{
   19d06:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19d08:	6882      	ldr	r2, [r0, #8]
   19d0a:	429a      	cmp	r2, r3
{
   19d0c:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   19d0e:	d102      	bne.n	19d16 <disconnected_cb+0x16>
	ccc = attr->user_data;
   19d10:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   19d12:	8963      	ldrh	r3, [r4, #10]
   19d14:	b9c3      	cbnz	r3, 19d48 <disconnected_cb+0x48>
}
   19d16:	2001      	movs	r0, #1
   19d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19d1c:	f105 0888 	add.w	r8, r5, #136	; 0x88
   19d20:	7a28      	ldrb	r0, [r5, #8]
   19d22:	4641      	mov	r1, r8
   19d24:	f00d f9eb 	bl	270fe <bt_addr_le_is_bonded>
   19d28:	b948      	cbnz	r0, 19d3e <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
   19d2a:	4b17      	ldr	r3, [pc, #92]	; (19d88 <disconnected_cb+0x88>)
   19d2c:	429c      	cmp	r4, r3
   19d2e:	d102      	bne.n	19d36 <disconnected_cb+0x36>
					sc_clear(conn);
   19d30:	4628      	mov	r0, r5
   19d32:	f7ff ffb7 	bl	19ca4 <sc_clear>
				clear_ccc_cfg(cfg);
   19d36:	4620      	mov	r0, r4
   19d38:	f00e f9a6 	bl	28088 <clear_ccc_cfg>
	if (!value_used) {
   19d3c:	e019      	b.n	19d72 <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19d3e:	4641      	mov	r1, r8
   19d40:	4638      	mov	r0, r7
   19d42:	f00e f99e 	bl	28082 <bt_addr_le_copy>
	if (!value_used) {
   19d46:	e014      	b.n	19d72 <disconnected_cb+0x72>
		if (!cfg->value) {
   19d48:	8923      	ldrh	r3, [r4, #8]
   19d4a:	b193      	cbz	r3, 19d72 <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19d4c:	4627      	mov	r7, r4
   19d4e:	4628      	mov	r0, r5
   19d50:	f817 1b01 	ldrb.w	r1, [r7], #1
   19d54:	463a      	mov	r2, r7
   19d56:	f00d fb9b 	bl	27490 <bt_conn_is_peer_addr_le>
   19d5a:	2800      	cmp	r0, #0
   19d5c:	d1de      	bne.n	19d1c <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   19d5e:	7820      	ldrb	r0, [r4, #0]
   19d60:	4639      	mov	r1, r7
   19d62:	f7fd ffad 	bl	17cc0 <bt_conn_lookup_addr_le>
			if (tmp) {
   19d66:	b120      	cbz	r0, 19d72 <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
   19d68:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
   19d6a:	f00d faf6 	bl	2735a <bt_conn_unref>
	if (!value_used) {
   19d6e:	2d07      	cmp	r5, #7
   19d70:	d0d1      	beq.n	19d16 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   19d72:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   19d74:	2100      	movs	r1, #0
   19d76:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   19d78:	2b00      	cmp	r3, #0
   19d7a:	d0cc      	beq.n	19d16 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   19d7c:	4630      	mov	r0, r6
   19d7e:	4798      	blx	r3
   19d80:	e7c9      	b.n	19d16 <disconnected_cb+0x16>
   19d82:	bf00      	nop
   19d84:	00019a59 	.word	0x00019a59
   19d88:	20000668 	.word	0x20000668

00019d8c <sc_set>:
{
   19d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19d90:	b08d      	sub	sp, #52	; 0x34
   19d92:	460e      	mov	r6, r1
   19d94:	af00      	add	r7, sp, #0
   19d96:	4690      	mov	r8, r2
   19d98:	4699      	mov	r9, r3
	if (!name) {
   19d9a:	4605      	mov	r5, r0
   19d9c:	b988      	cbnz	r0, 19dc2 <sc_set+0x36>
		BT_ERR("Insufficient number of arguments");
   19d9e:	4b44      	ldr	r3, [pc, #272]	; (19eb0 <sc_set+0x124>)
   19da0:	62fb      	str	r3, [r7, #44]	; 0x2c
   19da2:	4844      	ldr	r0, [pc, #272]	; (19eb4 <sc_set+0x128>)
   19da4:	2302      	movs	r3, #2
   19da6:	f107 0228 	add.w	r2, r7, #40	; 0x28
   19daa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19dae:	62bb      	str	r3, [r7, #40]	; 0x28
   19db0:	f00e fa13 	bl	281da <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   19db4:	f06f 0415 	mvn.w	r4, #21
}
   19db8:	4620      	mov	r0, r4
   19dba:	3734      	adds	r7, #52	; 0x34
   19dbc:	46bd      	mov	sp, r7
   19dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   19dc2:	f107 0108 	add.w	r1, r7, #8
   19dc6:	f00d f81c 	bl	26e02 <bt_settings_decode_key>
	if (err) {
   19dca:	4604      	mov	r4, r0
   19dcc:	b188      	cbz	r0, 19df2 <sc_set+0x66>
		BT_ERR("Unable to decode address %s", name);
   19dce:	466c      	mov	r4, sp
   19dd0:	b088      	sub	sp, #32
   19dd2:	466a      	mov	r2, sp
   19dd4:	4b38      	ldr	r3, [pc, #224]	; (19eb8 <sc_set+0x12c>)
   19dd6:	e9c2 3505 	strd	r3, r5, [r2, #20]
   19dda:	2302      	movs	r3, #2
   19ddc:	7713      	strb	r3, [r2, #28]
   19dde:	4b37      	ldr	r3, [pc, #220]	; (19ebc <sc_set+0x130>)
   19de0:	f842 3f10 	str.w	r3, [r2, #16]!
   19de4:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   19de8:	4832      	ldr	r0, [pc, #200]	; (19eb4 <sc_set+0x128>)
   19dea:	f00e f9f6 	bl	281da <z_log_msg_static_create.constprop.0>
   19dee:	46a5      	mov	sp, r4
   19df0:	e7e0      	b.n	19db4 <sc_set+0x28>
	settings_name_next(name, &next);
   19df2:	1d39      	adds	r1, r7, #4
   19df4:	4628      	mov	r0, r5
   19df6:	f00c fc4e 	bl	26696 <settings_name_next>
	if (!next) {
   19dfa:	6878      	ldr	r0, [r7, #4]
   19dfc:	b180      	cbz	r0, 19e20 <sc_set+0x94>
		unsigned long next_id = strtoul(next, NULL, 10);
   19dfe:	220a      	movs	r2, #10
   19e00:	4621      	mov	r1, r4
   19e02:	f00c fe9e 	bl	26b42 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   19e06:	b158      	cbz	r0, 19e20 <sc_set+0x94>
			BT_ERR("Invalid local identity %lu", next_id);
   19e08:	466c      	mov	r4, sp
   19e0a:	b088      	sub	sp, #32
   19e0c:	466a      	mov	r2, sp
   19e0e:	4b2c      	ldr	r3, [pc, #176]	; (19ec0 <sc_set+0x134>)
   19e10:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19e14:	2303      	movs	r3, #3
   19e16:	f842 3f10 	str.w	r3, [r2, #16]!
   19e1a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19e1e:	e7e3      	b.n	19de8 <sc_set+0x5c>
	cfg = find_sc_cfg(id, &addr);
   19e20:	f107 0108 	add.w	r1, r7, #8
   19e24:	2000      	movs	r0, #0
   19e26:	f7ff fe9b 	bl	19b60 <find_sc_cfg>
	if (!cfg && len_rd) {
   19e2a:	4605      	mov	r5, r0
   19e2c:	2800      	cmp	r0, #0
   19e2e:	d137      	bne.n	19ea0 <sc_set+0x114>
   19e30:	2e00      	cmp	r6, #0
   19e32:	d0c1      	beq.n	19db8 <sc_set+0x2c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   19e34:	f107 0110 	add.w	r1, r7, #16
   19e38:	6138      	str	r0, [r7, #16]
   19e3a:	4606      	mov	r6, r0
   19e3c:	f8c7 0013 	str.w	r0, [r7, #19]
   19e40:	f7ff fe8e 	bl	19b60 <find_sc_cfg>
		if (!cfg) {
   19e44:	4605      	mov	r5, r0
   19e46:	b968      	cbnz	r0, 19e64 <sc_set+0xd8>
			BT_ERR("Unable to restore SC: no cfg left");
   19e48:	4b1e      	ldr	r3, [pc, #120]	; (19ec4 <sc_set+0x138>)
   19e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   19e4c:	4819      	ldr	r0, [pc, #100]	; (19eb4 <sc_set+0x128>)
   19e4e:	2302      	movs	r3, #2
   19e50:	f107 0228 	add.w	r2, r7, #40	; 0x28
   19e54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19e58:	62bb      	str	r3, [r7, #40]	; 0x28
			return -ENOMEM;
   19e5a:	f06f 040b 	mvn.w	r4, #11
			BT_ERR("Unable to restore SC: no cfg left");
   19e5e:	f00e f9bc 	bl	281da <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   19e62:	e7a9      	b.n	19db8 <sc_set+0x2c>
		cfg->id = id;
   19e64:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   19e68:	f107 0108 	add.w	r1, r7, #8
   19e6c:	f00e f909 	bl	28082 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   19e70:	f105 0108 	add.w	r1, r5, #8
   19e74:	2204      	movs	r2, #4
   19e76:	4648      	mov	r0, r9
   19e78:	47c0      	blx	r8
		if (len < 0) {
   19e7a:	1e05      	subs	r5, r0, #0
   19e7c:	da9c      	bge.n	19db8 <sc_set+0x2c>
			BT_ERR("Failed to decode value (err %zd)", len);
   19e7e:	466c      	mov	r4, sp
   19e80:	b088      	sub	sp, #32
   19e82:	466a      	mov	r2, sp
   19e84:	4b10      	ldr	r3, [pc, #64]	; (19ec8 <sc_set+0x13c>)
   19e86:	480b      	ldr	r0, [pc, #44]	; (19eb4 <sc_set+0x128>)
   19e88:	e9c2 3505 	strd	r3, r5, [r2, #20]
   19e8c:	2303      	movs	r3, #3
   19e8e:	f842 3f10 	str.w	r3, [r2, #16]!
   19e92:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19e96:	f00e f9a0 	bl	281da <z_log_msg_static_create.constprop.0>
   19e9a:	46a5      	mov	sp, r4
			return len;
   19e9c:	462c      	mov	r4, r5
   19e9e:	e78b      	b.n	19db8 <sc_set+0x2c>
	if (len_rd) {
   19ea0:	2e00      	cmp	r6, #0
   19ea2:	d1e5      	bne.n	19e70 <sc_set+0xe4>
		memset(cfg, 0, sizeof(*cfg));
   19ea4:	220c      	movs	r2, #12
   19ea6:	4631      	mov	r1, r6
   19ea8:	f00c ff41 	bl	26d2e <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   19eac:	e784      	b.n	19db8 <sc_set+0x2c>
   19eae:	bf00      	nop
   19eb0:	0002c3c9 	.word	0x0002c3c9
   19eb4:	0002ac08 	.word	0x0002ac08
   19eb8:	0002d598 	.word	0x0002d598
   19ebc:	01000003 	.word	0x01000003
   19ec0:	0002d5b4 	.word	0x0002d5b4
   19ec4:	0002d65d 	.word	0x0002d65d
   19ec8:	0002d577 	.word	0x0002d577

00019ecc <sc_indicate_rsp>:
{
   19ecc:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19ece:	f06f 0102 	mvn.w	r1, #2
   19ed2:	4604      	mov	r4, r0
   19ed4:	480f      	ldr	r0, [pc, #60]	; (19f14 <sc_indicate_rsp+0x48>)
   19ed6:	f00e f971 	bl	281bc <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19eda:	480e      	ldr	r0, [pc, #56]	; (19f14 <sc_indicate_rsp+0x48>)
   19edc:	f00e f959 	bl	28192 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   19ee0:	07c2      	lsls	r2, r0, #31
   19ee2:	d504      	bpl.n	19eee <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   19ee4:	480c      	ldr	r0, [pc, #48]	; (19f18 <sc_indicate_rsp+0x4c>)
   19ee6:	2200      	movs	r2, #0
   19ee8:	2300      	movs	r3, #0
   19eea:	f007 fc41 	bl	21770 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   19eee:	4620      	mov	r0, r4
   19ef0:	f00e f873 	bl	27fda <bt_att_fixed_chan_only>
   19ef4:	b160      	cbz	r0, 19f10 <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
   19ef6:	4620      	mov	r0, r4
   19ef8:	f7ff fb36 	bl	19568 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   19efc:	b140      	cbz	r0, 19f10 <sc_indicate_rsp+0x44>
   19efe:	7a03      	ldrb	r3, [r0, #8]
   19f00:	07db      	lsls	r3, r3, #31
   19f02:	d505      	bpl.n	19f10 <sc_indicate_rsp+0x44>
}
   19f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19f08:	2101      	movs	r1, #1
   19f0a:	300c      	adds	r0, #12
   19f0c:	f00e b947 	b.w	2819e <atomic_or>
   19f10:	bd10      	pop	{r4, pc}
   19f12:	bf00      	nop
   19f14:	20002018 	.word	0x20002018
   19f18:	20001fe8 	.word	0x20001fe8

00019f1c <bt_gatt_init>:
{
   19f1c:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19f1e:	4b24      	ldr	r3, [pc, #144]	; (19fb0 <bt_gatt_init+0x94>)
   19f20:	f3bf 8f5b 	dmb	ish
   19f24:	2201      	movs	r2, #1
   19f26:	e853 1f00 	ldrex	r1, [r3]
   19f2a:	2900      	cmp	r1, #0
   19f2c:	d103      	bne.n	19f36 <bt_gatt_init+0x1a>
   19f2e:	e843 2000 	strex	r0, r2, [r3]
   19f32:	2800      	cmp	r0, #0
   19f34:	d1f7      	bne.n	19f26 <bt_gatt_init+0xa>
   19f36:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   19f3a:	d138      	bne.n	19fae <bt_gatt_init+0x92>
   19f3c:	f3bf 8f5b 	dmb	ish
   19f40:	4b1c      	ldr	r3, [pc, #112]	; (19fb4 <bt_gatt_init+0x98>)
   19f42:	e853 1f00 	ldrex	r1, [r3]
   19f46:	2900      	cmp	r1, #0
   19f48:	d103      	bne.n	19f52 <bt_gatt_init+0x36>
   19f4a:	e843 2000 	strex	r0, r2, [r3]
   19f4e:	2800      	cmp	r0, #0
   19f50:	d1f7      	bne.n	19f42 <bt_gatt_init+0x26>
   19f52:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   19f56:	d108      	bne.n	19f6a <bt_gatt_init+0x4e>
   19f58:	4917      	ldr	r1, [pc, #92]	; (19fb8 <bt_gatt_init+0x9c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   19f5a:	4a18      	ldr	r2, [pc, #96]	; (19fbc <bt_gatt_init+0xa0>)
   19f5c:	880b      	ldrh	r3, [r1, #0]
   19f5e:	4c18      	ldr	r4, [pc, #96]	; (19fc0 <bt_gatt_init+0xa4>)
	if (!atomic_cas(&service_init, 0, 1)) {
   19f60:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   19f62:	42a2      	cmp	r2, r4
   19f64:	d31d      	bcc.n	19fa2 <bt_gatt_init+0x86>
   19f66:	b100      	cbz	r0, 19f6a <bt_gatt_init+0x4e>
   19f68:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   19f6a:	4b16      	ldr	r3, [pc, #88]	; (19fc4 <bt_gatt_init+0xa8>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   19f6c:	4916      	ldr	r1, [pc, #88]	; (19fc8 <bt_gatt_init+0xac>)
   19f6e:	4817      	ldr	r0, [pc, #92]	; (19fcc <bt_gatt_init+0xb0>)
   19f70:	2200      	movs	r2, #0
	list->tail = NULL;
   19f72:	e9c3 2200 	strd	r2, r2, [r3]
   19f76:	f010 f8c0 	bl	2a0fa <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   19f7a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   19f7e:	2300      	movs	r3, #0
   19f80:	4812      	ldr	r0, [pc, #72]	; (19fcc <bt_gatt_init+0xb0>)
   19f82:	f7fb f885 	bl	15090 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   19f86:	4912      	ldr	r1, [pc, #72]	; (19fd0 <bt_gatt_init+0xb4>)
   19f88:	4812      	ldr	r0, [pc, #72]	; (19fd4 <bt_gatt_init+0xb8>)
   19f8a:	f010 f8b6 	bl	2a0fa <k_work_init_delayable>
   19f8e:	2102      	movs	r1, #2
   19f90:	4811      	ldr	r0, [pc, #68]	; (19fd8 <bt_gatt_init+0xbc>)
   19f92:	f00e f904 	bl	2819e <atomic_or>
}
   19f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   19f9a:	4910      	ldr	r1, [pc, #64]	; (19fdc <bt_gatt_init+0xc0>)
   19f9c:	4810      	ldr	r0, [pc, #64]	; (19fe0 <bt_gatt_init+0xc4>)
   19f9e:	f010 b8ac 	b.w	2a0fa <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   19fa2:	6850      	ldr	r0, [r2, #4]
   19fa4:	4403      	add	r3, r0
   19fa6:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   19fa8:	3208      	adds	r2, #8
   19faa:	2001      	movs	r0, #1
   19fac:	e7d9      	b.n	19f62 <bt_gatt_init+0x46>
}
   19fae:	bd10      	pop	{r4, pc}
   19fb0:	20002c2c 	.word	0x20002c2c
   19fb4:	20002c48 	.word	0x20002c48
   19fb8:	20003a96 	.word	0x20003a96
   19fbc:	0002ab98 	.word	0x0002ab98
   19fc0:	0002abc8 	.word	0x0002abc8
   19fc4:	20002c04 	.word	0x20002c04
   19fc8:	0001a209 	.word	0x0001a209
   19fcc:	20001f38 	.word	0x20001f38
   19fd0:	0001a611 	.word	0x0001a611
   19fd4:	20001fe8 	.word	0x20001fe8
   19fd8:	20002018 	.word	0x20002018
   19fdc:	00028725 	.word	0x00028725
   19fe0:	20001f98 	.word	0x20001f98

00019fe4 <bt_gatt_attr_get_handle>:
{
   19fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   19fe8:	4603      	mov	r3, r0
   19fea:	b148      	cbz	r0, 1a000 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   19fec:	8a00      	ldrh	r0, [r0, #16]
   19fee:	b938      	cbnz	r0, 1a000 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19ff0:	4912      	ldr	r1, [pc, #72]	; (1a03c <bt_gatt_attr_get_handle+0x58>)
   19ff2:	f8df e04c 	ldr.w	lr, [pc, #76]	; 1a040 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   19ff6:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   19ff8:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19ffc:	4571      	cmp	r1, lr
   19ffe:	d301      	bcc.n	1a004 <bt_gatt_attr_get_handle+0x20>
}
   1a000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1a004:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1a008:	42bb      	cmp	r3, r7
   1a00a:	d304      	bcc.n	1a016 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1a00c:	fb0c 7206 	mla	r2, ip, r6, r7
   1a010:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1a012:	4293      	cmp	r3, r2
   1a014:	d90e      	bls.n	1a034 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   1a016:	19a2      	adds	r2, r4, r6
   1a018:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a01a:	3108      	adds	r1, #8
   1a01c:	4614      	mov	r4, r2
   1a01e:	e7ed      	b.n	19ffc <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1a020:	fb0c 7805 	mla	r8, ip, r5, r7
   1a024:	4543      	cmp	r3, r8
   1a026:	d007      	beq.n	1a038 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1a028:	3501      	adds	r5, #1
   1a02a:	1962      	adds	r2, r4, r5
   1a02c:	42b5      	cmp	r5, r6
   1a02e:	b292      	uxth	r2, r2
   1a030:	d1f6      	bne.n	1a020 <bt_gatt_attr_get_handle+0x3c>
   1a032:	e7f2      	b.n	1a01a <bt_gatt_attr_get_handle+0x36>
   1a034:	2500      	movs	r5, #0
   1a036:	e7f8      	b.n	1a02a <bt_gatt_attr_get_handle+0x46>
   1a038:	4610      	mov	r0, r2
   1a03a:	e7e1      	b.n	1a000 <bt_gatt_attr_get_handle+0x1c>
   1a03c:	0002ab98 	.word	0x0002ab98
   1a040:	0002abc8 	.word	0x0002abc8

0001a044 <bt_gatt_foreach_attr_type>:
{
   1a044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a048:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1a04c:	9100      	str	r1, [sp, #0]
   1a04e:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1a050:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a054:	2d00      	cmp	r5, #0
   1a056:	bf08      	it	eq
   1a058:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1a05a:	4b24      	ldr	r3, [pc, #144]	; (1a0ec <bt_gatt_foreach_attr_type+0xa8>)
   1a05c:	881b      	ldrh	r3, [r3, #0]
   1a05e:	4283      	cmp	r3, r0
{
   1a060:	4607      	mov	r7, r0
   1a062:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1a064:	d23c      	bcs.n	1a0e0 <bt_gatt_foreach_attr_type+0x9c>
}
   1a066:	b003      	add	sp, #12
   1a068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1a06c:	6873      	ldr	r3, [r6, #4]
   1a06e:	4423      	add	r3, r4
   1a070:	42bb      	cmp	r3, r7
   1a072:	d232      	bcs.n	1a0da <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   1a074:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a076:	3608      	adds	r6, #8
   1a078:	4b1d      	ldr	r3, [pc, #116]	; (1a0f0 <bt_gatt_foreach_attr_type+0xac>)
   1a07a:	429e      	cmp	r6, r3
   1a07c:	d3f6      	bcc.n	1a06c <bt_gatt_foreach_attr_type+0x28>
   1a07e:	e7f2      	b.n	1a066 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1a080:	5889      	ldr	r1, [r1, r2]
   1a082:	9301      	str	r3, [sp, #4]
   1a084:	4640      	mov	r0, r8
   1a086:	f00c fee0 	bl	26e4a <bt_uuid_cmp>
   1a08a:	9b01      	ldr	r3, [sp, #4]
   1a08c:	b190      	cbz	r0, 1a0b4 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1a08e:	3401      	adds	r4, #1
   1a090:	f10a 0a01 	add.w	sl, sl, #1
   1a094:	b2a4      	uxth	r4, r4
   1a096:	6873      	ldr	r3, [r6, #4]
   1a098:	4553      	cmp	r3, sl
   1a09a:	d9ec      	bls.n	1a076 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1a09c:	9b00      	ldr	r3, [sp, #0]
   1a09e:	429c      	cmp	r4, r3
   1a0a0:	d8e1      	bhi.n	1a066 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1a0a2:	42bc      	cmp	r4, r7
   1a0a4:	d3f3      	bcc.n	1a08e <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a0a6:	6831      	ldr	r1, [r6, #0]
   1a0a8:	fb0b f20a 	mul.w	r2, fp, sl
   1a0ac:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1a0ae:	f1b8 0f00 	cmp.w	r8, #0
   1a0b2:	d1e5      	bne.n	1a080 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   1a0b4:	f1b9 0f00 	cmp.w	r9, #0
   1a0b8:	d10b      	bne.n	1a0d2 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   1a0ba:	3d01      	subs	r5, #1
   1a0bc:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1a0be:	4618      	mov	r0, r3
   1a0c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a0c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a0c4:	4621      	mov	r1, r4
   1a0c6:	4798      	blx	r3
	if (!*num_matches) {
   1a0c8:	2d00      	cmp	r5, #0
   1a0ca:	d0cc      	beq.n	1a066 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a0cc:	2800      	cmp	r0, #0
   1a0ce:	d1de      	bne.n	1a08e <bt_gatt_foreach_attr_type+0x4a>
   1a0d0:	e7c9      	b.n	1a066 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1a0d2:	68da      	ldr	r2, [r3, #12]
   1a0d4:	4591      	cmp	r9, r2
   1a0d6:	d1da      	bne.n	1a08e <bt_gatt_foreach_attr_type+0x4a>
   1a0d8:	e7ef      	b.n	1a0ba <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1a0da:	f04f 0a00 	mov.w	sl, #0
   1a0de:	e7da      	b.n	1a096 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a0e0:	4e04      	ldr	r6, [pc, #16]	; (1a0f4 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   1a0e2:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a0e4:	f04f 0b14 	mov.w	fp, #20
   1a0e8:	e7c6      	b.n	1a078 <bt_gatt_foreach_attr_type+0x34>
   1a0ea:	bf00      	nop
   1a0ec:	20003a96 	.word	0x20003a96
   1a0f0:	0002abc8 	.word	0x0002abc8
   1a0f4:	0002ab98 	.word	0x0002ab98

0001a0f8 <db_hash_gen>:
{
   1a0f8:	b530      	push	{r4, r5, lr}
   1a0fa:	b0cf      	sub	sp, #316	; 0x13c
	uint8_t key[16] = {};
   1a0fc:	2300      	movs	r3, #0
{
   1a0fe:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1a100:	aa22      	add	r2, sp, #136	; 0x88
   1a102:	4669      	mov	r1, sp
   1a104:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   1a106:	e9cd 3300 	strd	r3, r3, [sp]
   1a10a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1a10e:	f00c fc37 	bl	26980 <tc_cmac_setup>
   1a112:	b958      	cbnz	r0, 1a12c <db_hash_gen+0x34>
		BT_ERR("Unable to setup AES CMAC");
   1a114:	4b16      	ldr	r3, [pc, #88]	; (1a170 <db_hash_gen+0x78>)
		BT_ERR("Unable to calculate hash");
   1a116:	9309      	str	r3, [sp, #36]	; 0x24
   1a118:	4816      	ldr	r0, [pc, #88]	; (1a174 <db_hash_gen+0x7c>)
   1a11a:	2302      	movs	r3, #2
   1a11c:	aa08      	add	r2, sp, #32
   1a11e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a122:	9308      	str	r3, [sp, #32]
   1a124:	f00e f859 	bl	281da <z_log_msg_static_create.constprop.0>
}
   1a128:	b04f      	add	sp, #316	; 0x13c
   1a12a:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1a12c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a130:	2001      	movs	r0, #1
   1a132:	4a11      	ldr	r2, [pc, #68]	; (1a178 <db_hash_gen+0x80>)
   1a134:	ab0a      	add	r3, sp, #40	; 0x28
   1a136:	f00e f9fc 	bl	28532 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1a13a:	4810      	ldr	r0, [pc, #64]	; (1a17c <db_hash_gen+0x84>)
   1a13c:	a90a      	add	r1, sp, #40	; 0x28
   1a13e:	f00c fcb5 	bl	26aac <tc_cmac_final>
   1a142:	b908      	cbnz	r0, 1a148 <db_hash_gen+0x50>
		BT_ERR("Unable to calculate hash");
   1a144:	4b0e      	ldr	r3, [pc, #56]	; (1a180 <db_hash_gen+0x88>)
   1a146:	e7e6      	b.n	1a116 <db_hash_gen+0x1e>
   1a148:	4b0c      	ldr	r3, [pc, #48]	; (1a17c <db_hash_gen+0x84>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1a14a:	2208      	movs	r2, #8
   1a14c:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1a150:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1a152:	780d      	ldrb	r5, [r1, #0]
   1a154:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1a158:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1a15a:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   1a15e:	d1f7      	bne.n	1a150 <db_hash_gen+0x58>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   1a160:	b10c      	cbz	r4, 1a166 <db_hash_gen+0x6e>
		db_hash_store();
   1a162:	f7ff faeb 	bl	1973c <db_hash_store>
   1a166:	2104      	movs	r1, #4
   1a168:	4806      	ldr	r0, [pc, #24]	; (1a184 <db_hash_gen+0x8c>)
   1a16a:	f00e f818 	bl	2819e <atomic_or>
   1a16e:	e7db      	b.n	1a128 <db_hash_gen+0x30>
   1a170:	0002d67f 	.word	0x0002d67f
   1a174:	0002ac08 	.word	0x0002ac08
   1a178:	000280e9 	.word	0x000280e9
   1a17c:	20001f18 	.word	0x20001f18
   1a180:	0002d698 	.word	0x0002d698
   1a184:	20002018 	.word	0x20002018

0001a188 <db_hash_read>:
{
   1a188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a18c:	491b      	ldr	r1, [pc, #108]	; (1a1fc <db_hash_read+0x74>)
{
   1a18e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1a192:	4680      	mov	r8, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a194:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1a198:	4615      	mov	r5, r2
   1a19a:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a19c:	f00f ffcf 	bl	2a13e <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a1a0:	4817      	ldr	r0, [pc, #92]	; (1a200 <db_hash_read+0x78>)
   1a1a2:	f00d fff6 	bl	28192 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1a1a6:	0741      	lsls	r1, r0, #29
   1a1a8:	d402      	bmi.n	1a1b0 <db_hash_read+0x28>
		db_hash_gen(true);
   1a1aa:	2001      	movs	r0, #1
   1a1ac:	f7ff ffa4 	bl	1a0f8 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   1a1b0:	4640      	mov	r0, r8
   1a1b2:	f7ff f9d9 	bl	19568 <find_cf_cfg>
	if (cfg &&
   1a1b6:	b168      	cbz	r0, 1a1d4 <db_hash_read+0x4c>
   1a1b8:	7a03      	ldrb	r3, [r0, #8]
   1a1ba:	07da      	lsls	r2, r3, #31
   1a1bc:	d50a      	bpl.n	1a1d4 <db_hash_read+0x4c>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1a1be:	f100 040c 	add.w	r4, r0, #12
   1a1c2:	4620      	mov	r0, r4
   1a1c4:	f00d ffe5 	bl	28192 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   1a1c8:	07c3      	lsls	r3, r0, #31
   1a1ca:	d403      	bmi.n	1a1d4 <db_hash_read+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a1cc:	2102      	movs	r1, #2
   1a1ce:	4620      	mov	r0, r4
   1a1d0:	f00d ffe5 	bl	2819e <atomic_or>
	if (offset > value_len) {
   1a1d4:	2e10      	cmp	r6, #16
   1a1d6:	d80d      	bhi.n	1a1f4 <db_hash_read+0x6c>
	len = MIN(buf_len, value_len - offset);
   1a1d8:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   1a1dc:	4909      	ldr	r1, [pc, #36]	; (1a204 <db_hash_read+0x7c>)
	len = MIN(buf_len, value_len - offset);
   1a1de:	42bc      	cmp	r4, r7
   1a1e0:	bfa8      	it	ge
   1a1e2:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1a1e4:	4622      	mov	r2, r4
   1a1e6:	4431      	add	r1, r6
   1a1e8:	4628      	mov	r0, r5
   1a1ea:	f00c fd95 	bl	26d18 <memcpy>
}
   1a1ee:	4620      	mov	r0, r4
   1a1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a1f4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1a1f8:	e7f9      	b.n	1a1ee <db_hash_read+0x66>
   1a1fa:	bf00      	nop
   1a1fc:	20001f68 	.word	0x20001f68
   1a200:	20002018 	.word	0x20002018
   1a204:	20001f18 	.word	0x20001f18

0001a208 <db_hash_process>:
{
   1a208:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a20a:	4827      	ldr	r0, [pc, #156]	; (1a2a8 <db_hash_process+0xa0>)
   1a20c:	f06f 0108 	mvn.w	r1, #8
   1a210:	f00d ffd4 	bl	281bc <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   1a214:	0700      	lsls	r0, r0, #28
   1a216:	d542      	bpl.n	1a29e <db_hash_process+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a218:	4823      	ldr	r0, [pc, #140]	; (1a2a8 <db_hash_process+0xa0>)
   1a21a:	f00d ffba 	bl	28192 <atomic_get>
   1a21e:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1a220:	0759      	lsls	r1, r3, #29
   1a222:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1a226:	d401      	bmi.n	1a22c <db_hash_process+0x24>
			db_hash_gen(false);
   1a228:	f7ff ff66 	bl	1a0f8 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   1a22c:	491f      	ldr	r1, [pc, #124]	; (1a2ac <db_hash_process+0xa4>)
   1a22e:	2210      	movs	r2, #16
   1a230:	1888      	adds	r0, r1, r2
   1a232:	f00c fd48 	bl	26cc6 <memcmp>
   1a236:	b948      	cbnz	r0, 1a24c <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   1a238:	481d      	ldr	r0, [pc, #116]	; (1a2b0 <db_hash_process+0xa8>)
   1a23a:	f00f ff6c 	bl	2a116 <k_work_cancel_delayable>
}
   1a23e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a242:	4819      	ldr	r0, [pc, #100]	; (1a2a8 <db_hash_process+0xa0>)
   1a244:	f06f 0101 	mvn.w	r1, #1
   1a248:	f00d bfb8 	b.w	281bc <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a24c:	4c19      	ldr	r4, [pc, #100]	; (1a2b4 <db_hash_process+0xac>)
   1a24e:	2101      	movs	r1, #1
   1a250:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1a254:	f00d ffa3 	bl	2819e <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1a258:	07c2      	lsls	r2, r0, #31
   1a25a:	d410      	bmi.n	1a27e <db_hash_process+0x76>
		gatt_sc.start = start;
   1a25c:	4b16      	ldr	r3, [pc, #88]	; (1a2b8 <db_hash_process+0xb0>)
   1a25e:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a260:	4811      	ldr	r0, [pc, #68]	; (1a2a8 <db_hash_process+0xa0>)
   1a262:	f00d ff96 	bl	28192 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   1a266:	0783      	lsls	r3, r0, #30
   1a268:	d405      	bmi.n	1a276 <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   1a26a:	4811      	ldr	r0, [pc, #68]	; (1a2b0 <db_hash_process+0xa8>)
   1a26c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1a270:	2300      	movs	r3, #0
   1a272:	f007 fa7d 	bl	21770 <k_work_reschedule>
}
   1a276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		db_hash_store();
   1a27a:	f7ff ba5f 	b.w	1973c <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   1a27e:	8b23      	ldrh	r3, [r4, #24]
   1a280:	8b62      	ldrh	r2, [r4, #26]
   1a282:	2b01      	cmp	r3, #1
   1a284:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a288:	d805      	bhi.n	1a296 <db_hash_process+0x8e>
   1a28a:	429a      	cmp	r2, r3
   1a28c:	d0f3      	beq.n	1a276 <db_hash_process+0x6e>
		*end = new_end;
   1a28e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a292:	8363      	strh	r3, [r4, #26]
   1a294:	e7e4      	b.n	1a260 <db_hash_process+0x58>
	if (*end < new_end) {
   1a296:	429a      	cmp	r2, r3
		*start = new_start;
   1a298:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   1a29a:	d0e1      	beq.n	1a260 <db_hash_process+0x58>
   1a29c:	e7f7      	b.n	1a28e <db_hash_process+0x86>
}
   1a29e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	db_hash_gen(true);
   1a2a2:	2001      	movs	r0, #1
   1a2a4:	f7ff bf28 	b.w	1a0f8 <db_hash_gen>
   1a2a8:	20002018 	.word	0x20002018
   1a2ac:	20001f18 	.word	0x20001f18
   1a2b0:	20001fe8 	.word	0x20001fe8
   1a2b4:	20001fc8 	.word	0x20001fc8
   1a2b8:	ffff0001 	.word	0xffff0001

0001a2bc <ccc_set_direct>:
{
   1a2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a2c0:	b0b8      	sub	sp, #224	; 0xe0
   1a2c2:	af00      	add	r7, sp, #0
   1a2c4:	4689      	mov	r9, r1
   1a2c6:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1a2c8:	4942      	ldr	r1, [pc, #264]	; (1a3d4 <ccc_set_direct+0x118>)
   1a2ca:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
   1a2ce:	463a      	mov	r2, r7
{
   1a2d0:	4698      	mov	r8, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1a2d2:	f00c f9bd 	bl	26650 <settings_name_steq>
   1a2d6:	b938      	cbnz	r0, 1a2e8 <ccc_set_direct+0x2c>
   1a2d8:	f7ff f968 	bl	195ac <ccc_set_direct.part.0>
   1a2dc:	4605      	mov	r5, r0
}
   1a2de:	4628      	mov	r0, r5
   1a2e0:	37e0      	adds	r7, #224	; 0xe0
   1a2e2:	46bd      	mov	sp, r7
   1a2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   1a2e8:	683c      	ldr	r4, [r7, #0]
		settings_name_next(name, &next);
   1a2ea:	1d39      	adds	r1, r7, #4
   1a2ec:	4620      	mov	r0, r4
   1a2ee:	f00c f9d2 	bl	26696 <settings_name_next>
		if (!name) {
   1a2f2:	b974      	cbnz	r4, 1a312 <ccc_set_direct+0x56>
			BT_ERR("Insufficient number of arguments");
   1a2f4:	4b38      	ldr	r3, [pc, #224]	; (1a3d8 <ccc_set_direct+0x11c>)
   1a2f6:	637b      	str	r3, [r7, #52]	; 0x34
   1a2f8:	4838      	ldr	r0, [pc, #224]	; (1a3dc <ccc_set_direct+0x120>)
   1a2fa:	2302      	movs	r3, #2
   1a2fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1a300:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a304:	633b      	str	r3, [r7, #48]	; 0x30
   1a306:	f00d ff68 	bl	281da <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1a30a:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   1a30e:	4625      	mov	r5, r4
   1a310:	e7e5      	b.n	1a2de <ccc_set_direct+0x22>
		} else if (!next) {
   1a312:	6878      	ldr	r0, [r7, #4]
   1a314:	b9d8      	cbnz	r0, 1a34e <ccc_set_direct+0x92>
		err = bt_settings_decode_key(name, &addr);
   1a316:	f107 0a08 	add.w	sl, r7, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   1a31a:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   1a31c:	4651      	mov	r1, sl
   1a31e:	4620      	mov	r0, r4
			load.addr_with_id.id = BT_ID_DEFAULT;
   1a320:	753b      	strb	r3, [r7, #20]
		err = bt_settings_decode_key(name, &addr);
   1a322:	f00c fd6e 	bl	26e02 <bt_settings_decode_key>
		if (err) {
   1a326:	4605      	mov	r5, r0
   1a328:	b338      	cbz	r0, 1a37a <ccc_set_direct+0xbe>
			BT_ERR("Unable to decode address %s", name);
   1a32a:	466d      	mov	r5, sp
   1a32c:	b088      	sub	sp, #32
   1a32e:	466a      	mov	r2, sp
   1a330:	4b2b      	ldr	r3, [pc, #172]	; (1a3e0 <ccc_set_direct+0x124>)
   1a332:	482a      	ldr	r0, [pc, #168]	; (1a3dc <ccc_set_direct+0x120>)
   1a334:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a338:	2302      	movs	r3, #2
   1a33a:	7713      	strb	r3, [r2, #28]
   1a33c:	4b29      	ldr	r3, [pc, #164]	; (1a3e4 <ccc_set_direct+0x128>)
   1a33e:	f842 3f10 	str.w	r3, [r2, #16]!
   1a342:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1a346:	f00d ff48 	bl	281da <z_log_msg_static_create.constprop.0>
   1a34a:	46ad      	mov	sp, r5
   1a34c:	e7dd      	b.n	1a30a <ccc_set_direct+0x4e>
			unsigned long next_id = strtoul(next, NULL, 10);
   1a34e:	220a      	movs	r2, #10
   1a350:	2100      	movs	r1, #0
   1a352:	f00c fbf6 	bl	26b42 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   1a356:	2800      	cmp	r0, #0
   1a358:	d0dd      	beq.n	1a316 <ccc_set_direct+0x5a>
				BT_ERR("Invalid local identity %lu", next_id);
   1a35a:	466c      	mov	r4, sp
   1a35c:	b088      	sub	sp, #32
   1a35e:	466a      	mov	r2, sp
   1a360:	4b21      	ldr	r3, [pc, #132]	; (1a3e8 <ccc_set_direct+0x12c>)
   1a362:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a366:	2303      	movs	r3, #3
   1a368:	f842 3f10 	str.w	r3, [r2, #16]!
   1a36c:	481b      	ldr	r0, [pc, #108]	; (1a3dc <ccc_set_direct+0x120>)
   1a36e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a372:	f00d ff32 	bl	281da <z_log_msg_static_create.constprop.0>
   1a376:	46a5      	mov	sp, r4
				return -EINVAL;
   1a378:	e7c7      	b.n	1a30a <ccc_set_direct+0x4e>
		load.addr_with_id.addr = &addr;
   1a37a:	f8c7 a010 	str.w	sl, [r7, #16]
		if (len_rd) {
   1a37e:	f1b9 0f00 	cmp.w	r9, #0
   1a382:	d024      	beq.n	1a3ce <ccc_set_direct+0x112>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   1a384:	f107 0920 	add.w	r9, r7, #32
   1a388:	22c0      	movs	r2, #192	; 0xc0
   1a38a:	4649      	mov	r1, r9
   1a38c:	4640      	mov	r0, r8
   1a38e:	47b0      	blx	r6
			if (len < 0) {
   1a390:	1e04      	subs	r4, r0, #0
   1a392:	da0f      	bge.n	1a3b4 <ccc_set_direct+0xf8>
				BT_ERR("Failed to decode value (err %zd)", len);
   1a394:	466d      	mov	r5, sp
   1a396:	b088      	sub	sp, #32
   1a398:	466a      	mov	r2, sp
   1a39a:	4b14      	ldr	r3, [pc, #80]	; (1a3ec <ccc_set_direct+0x130>)
   1a39c:	480f      	ldr	r0, [pc, #60]	; (1a3dc <ccc_set_direct+0x120>)
   1a39e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a3a2:	2303      	movs	r3, #3
   1a3a4:	f842 3f10 	str.w	r3, [r2, #16]!
   1a3a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a3ac:	f00d ff15 	bl	281da <z_log_msg_static_create.constprop.0>
   1a3b0:	46ad      	mov	sp, r5
				return len;
   1a3b2:	e7ac      	b.n	1a30e <ccc_set_direct+0x52>
			load.count = len / sizeof(*ccc_store);
   1a3b4:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   1a3b6:	f8c7 9018 	str.w	r9, [r7, #24]
			load.count = len / sizeof(*ccc_store);
   1a3ba:	61fc      	str	r4, [r7, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   1a3bc:	4a0c      	ldr	r2, [pc, #48]	; (1a3f0 <ccc_set_direct+0x134>)
   1a3be:	f107 0310 	add.w	r3, r7, #16
   1a3c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a3c6:	2001      	movs	r0, #1
   1a3c8:	f00e f8b3 	bl	28532 <bt_gatt_foreach_attr>
	return 0;
   1a3cc:	e787      	b.n	1a2de <ccc_set_direct+0x22>
			load.count = 0;
   1a3ce:	e9c7 0006 	strd	r0, r0, [r7, #24]
   1a3d2:	e7f3      	b.n	1a3bc <ccc_set_direct+0x100>
   1a3d4:	0002d6b1 	.word	0x0002d6b1
   1a3d8:	0002c3c9 	.word	0x0002c3c9
   1a3dc:	0002ac08 	.word	0x0002ac08
   1a3e0:	0002d598 	.word	0x0002d598
   1a3e4:	01000003 	.word	0x01000003
   1a3e8:	0002d5b4 	.word	0x0002d5b4
   1a3ec:	0002d577 	.word	0x0002d577
   1a3f0:	000199cd 	.word	0x000199cd

0001a3f4 <bt_gatt_attr_next>:
{
   1a3f4:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1a3f6:	2300      	movs	r3, #0
   1a3f8:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1a3fa:	f7ff fdf3 	bl	19fe4 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1a3fe:	1c41      	adds	r1, r0, #1
   1a400:	b289      	uxth	r1, r1
   1a402:	4608      	mov	r0, r1
   1a404:	4a03      	ldr	r2, [pc, #12]	; (1a414 <bt_gatt_attr_next+0x20>)
   1a406:	ab01      	add	r3, sp, #4
   1a408:	f00e f893 	bl	28532 <bt_gatt_foreach_attr>
}
   1a40c:	9801      	ldr	r0, [sp, #4]
   1a40e:	b003      	add	sp, #12
   1a410:	f85d fb04 	ldr.w	pc, [sp], #4
   1a414:	00028037 	.word	0x00028037

0001a418 <gatt_indicate>:
{
   1a418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a41c:	4615      	mov	r5, r2
   1a41e:	b086      	sub	sp, #24
   1a420:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a422:	2294      	movs	r2, #148	; 0x94
   1a424:	6869      	ldr	r1, [r5, #4]
{
   1a426:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a428:	f00e f88e 	bl	28548 <bt_gatt_check_perm>
   1a42c:	4680      	mov	r8, r0
   1a42e:	b178      	cbz	r0, 1a450 <gatt_indicate+0x38>
		BT_WARN("Link is not encrypted");
   1a430:	4b36      	ldr	r3, [pc, #216]	; (1a50c <gatt_indicate+0xf4>)
   1a432:	9305      	str	r3, [sp, #20]
   1a434:	4836      	ldr	r0, [pc, #216]	; (1a510 <gatt_indicate+0xf8>)
   1a436:	2302      	movs	r3, #2
   1a438:	aa04      	add	r2, sp, #16
   1a43a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -EPERM;
   1a43e:	f04f 35ff 	mov.w	r5, #4294967295
		BT_WARN("Link is not encrypted");
   1a442:	9304      	str	r3, [sp, #16]
   1a444:	f00d fec9 	bl	281da <z_log_msg_static_create.constprop.0>
}
   1a448:	4628      	mov	r0, r5
   1a44a:	b006      	add	sp, #24
   1a44c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1a450:	6869      	ldr	r1, [r5, #4]
   1a452:	2202      	movs	r2, #2
   1a454:	4630      	mov	r0, r6
   1a456:	f00e f8aa 	bl	285ae <bt_gatt_is_subscribed>
   1a45a:	b960      	cbnz	r0, 1a476 <gatt_indicate+0x5e>
			BT_WARN("Device is not subscribed to characteristic");
   1a45c:	4b2d      	ldr	r3, [pc, #180]	; (1a514 <gatt_indicate+0xfc>)
   1a45e:	9305      	str	r3, [sp, #20]
   1a460:	482b      	ldr	r0, [pc, #172]	; (1a510 <gatt_indicate+0xf8>)
   1a462:	2302      	movs	r3, #2
   1a464:	aa04      	add	r2, sp, #16
   1a466:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a46a:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   1a46c:	f06f 0515 	mvn.w	r5, #21
			BT_WARN("Device is not subscribed to characteristic");
   1a470:	f00d feb3 	bl	281da <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1a474:	e7e8      	b.n	1a448 <gatt_indicate+0x30>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1a476:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1a47a:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1a47c:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1a47e:	f7fe ff6f 	bl	19360 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1a482:	3702      	adds	r7, #2
	if (!req) {
   1a484:	4604      	mov	r4, r0
   1a486:	b910      	cbnz	r0, 1a48e <gatt_indicate+0x76>
		return -ENOMEM;
   1a488:	f06f 050b 	mvn.w	r5, #11
   1a48c:	e7dc      	b.n	1a448 <gatt_indicate+0x30>
	req->func = func;
   1a48e:	4b22      	ldr	r3, [pc, #136]	; (1a518 <gatt_indicate+0x100>)
	req->len = len;
   1a490:	6147      	str	r7, [r0, #20]
	req->att_op = op;
   1a492:	211d      	movs	r1, #29
   1a494:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1a496:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   1a49a:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1a49c:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1a49e:	463a      	mov	r2, r7
   1a4a0:	4630      	mov	r0, r6
   1a4a2:	f7fe fb69 	bl	18b78 <bt_att_create_pdu>
	if (!buf) {
   1a4a6:	4607      	mov	r7, r0
   1a4a8:	b968      	cbnz	r0, 1a4c6 <gatt_indicate+0xae>
		BT_WARN("No buffer available to send indication");
   1a4aa:	4b1c      	ldr	r3, [pc, #112]	; (1a51c <gatt_indicate+0x104>)
   1a4ac:	9305      	str	r3, [sp, #20]
   1a4ae:	4818      	ldr	r0, [pc, #96]	; (1a510 <gatt_indicate+0xf8>)
   1a4b0:	2302      	movs	r3, #2
   1a4b2:	aa04      	add	r2, sp, #16
   1a4b4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a4b8:	9304      	str	r3, [sp, #16]
   1a4ba:	f00d fe8e 	bl	281da <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   1a4be:	4620      	mov	r0, r4
   1a4c0:	f7fe ff70 	bl	193a4 <bt_att_req_free>
   1a4c4:	e7e0      	b.n	1a488 <gatt_indicate+0x70>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1a4c6:	2301      	movs	r3, #1
   1a4c8:	4642      	mov	r2, r8
   1a4ca:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1a4cc:	f107 0a08 	add.w	sl, r7, #8
   1a4d0:	f00d fdaa 	bl	28028 <bt_att_set_tx_meta_data>
   1a4d4:	2102      	movs	r1, #2
   1a4d6:	4650      	mov	r0, sl
   1a4d8:	f00e fdfc 	bl	290d4 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1a4dc:	4680      	mov	r8, r0
   1a4de:	8aa9      	ldrh	r1, [r5, #20]
   1a4e0:	f828 9b02 	strh.w	r9, [r8], #2
   1a4e4:	4650      	mov	r0, sl
   1a4e6:	f00e fdf5 	bl	290d4 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1a4ea:	8aaa      	ldrh	r2, [r5, #20]
   1a4ec:	6929      	ldr	r1, [r5, #16]
   1a4ee:	4640      	mov	r0, r8
   1a4f0:	f00c fc12 	bl	26d18 <memcpy>
	req->buf = buf;
   1a4f4:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   1a4f6:	4621      	mov	r1, r4
   1a4f8:	4630      	mov	r0, r6
   1a4fa:	f00d fd59 	bl	27fb0 <bt_att_req_send>
	if (err) {
   1a4fe:	4605      	mov	r5, r0
   1a500:	2800      	cmp	r0, #0
   1a502:	d0a1      	beq.n	1a448 <gatt_indicate+0x30>
		bt_att_req_free(req);
   1a504:	4620      	mov	r0, r4
   1a506:	f7fe ff4d 	bl	193a4 <bt_att_req_free>
   1a50a:	e79d      	b.n	1a448 <gatt_indicate+0x30>
   1a50c:	0002d6b8 	.word	0x0002d6b8
   1a510:	0002ac08 	.word	0x0002ac08
   1a514:	0002d6ce 	.word	0x0002d6ce
   1a518:	00028051 	.word	0x00028051
   1a51c:	0002d6f9 	.word	0x0002d6f9

0001a520 <bt_gatt_indicate>:
{
   1a520:	b530      	push	{r4, r5, lr}
   1a522:	4604      	mov	r4, r0
   1a524:	b08b      	sub	sp, #44	; 0x2c
   1a526:	4837      	ldr	r0, [pc, #220]	; (1a604 <bt_gatt_indicate+0xe4>)
   1a528:	f00d fe33 	bl	28192 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a52c:	0742      	lsls	r2, r0, #29
{
   1a52e:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a530:	d561      	bpl.n	1a5f6 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1a532:	b114      	cbz	r4, 1a53a <bt_gatt_indicate+0x1a>
   1a534:	7b63      	ldrb	r3, [r4, #13]
   1a536:	2b07      	cmp	r3, #7
   1a538:	d160      	bne.n	1a5fc <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   1a53a:	6868      	ldr	r0, [r5, #4]
   1a53c:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1a53e:	f7ff fd51 	bl	19fe4 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1a542:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1a544:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1a548:	b33a      	cbz	r2, 1a59a <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a54a:	a905      	add	r1, sp, #20
   1a54c:	9102      	str	r1, [sp, #8]
   1a54e:	492e      	ldr	r1, [pc, #184]	; (1a608 <bt_gatt_indicate+0xe8>)
   1a550:	9101      	str	r1, [sp, #4]
   1a552:	2101      	movs	r1, #1
	found->attr = NULL;
   1a554:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a556:	9100      	str	r1, [sp, #0]
   1a558:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1a55c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a55e:	f7ff fd71 	bl	1a044 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1a562:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1a564:	b91b      	cbnz	r3, 1a56e <bt_gatt_indicate+0x4e>
			return -ENOENT;
   1a566:	f06f 0001 	mvn.w	r0, #1
}
   1a56a:	b00b      	add	sp, #44	; 0x2c
   1a56c:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1a56e:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1a570:	9b05      	ldr	r3, [sp, #20]
   1a572:	6818      	ldr	r0, [r3, #0]
   1a574:	2300      	movs	r3, #0
   1a576:	f88d 3010 	strb.w	r3, [sp, #16]
   1a57a:	a904      	add	r1, sp, #16
   1a57c:	f642 0303 	movw	r3, #10243	; 0x2803
   1a580:	f8ad 3012 	strh.w	r3, [sp, #18]
   1a584:	f00c fc61 	bl	26e4a <bt_uuid_cmp>
   1a588:	b970      	cbnz	r0, 1a5a8 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1a58a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1a58c:	68c3      	ldr	r3, [r0, #12]
   1a58e:	799b      	ldrb	r3, [r3, #6]
   1a590:	069b      	lsls	r3, r3, #26
   1a592:	d405      	bmi.n	1a5a0 <bt_gatt_indicate+0x80>
			return -EINVAL;
   1a594:	f06f 0015 	mvn.w	r0, #21
   1a598:	e7e7      	b.n	1a56a <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   1a59a:	2800      	cmp	r0, #0
   1a59c:	d1e8      	bne.n	1a570 <bt_gatt_indicate+0x50>
   1a59e:	e7e2      	b.n	1a566 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1a5a0:	f00d ff79 	bl	28496 <bt_gatt_attr_value_handle>
   1a5a4:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1a5a8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1a5ac:	b13c      	cbz	r4, 1a5be <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   1a5ae:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1a5b0:	4601      	mov	r1, r0
		params->_ref = 1;
   1a5b2:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   1a5b4:	462a      	mov	r2, r5
   1a5b6:	4620      	mov	r0, r4
   1a5b8:	f7ff ff2e 	bl	1a418 <gatt_indicate>
   1a5bc:	e7d5      	b.n	1a56a <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   1a5be:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1a5c2:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1a5c4:	2302      	movs	r3, #2
   1a5c6:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a5ca:	f642 1302 	movw	r3, #10498	; 0x2902
   1a5ce:	f8ad 3012 	strh.w	r3, [sp, #18]
   1a5d2:	ab05      	add	r3, sp, #20
   1a5d4:	9302      	str	r3, [sp, #8]
   1a5d6:	4b0d      	ldr	r3, [pc, #52]	; (1a60c <bt_gatt_indicate+0xec>)
   1a5d8:	9301      	str	r3, [sp, #4]
   1a5da:	2301      	movs	r3, #1
   1a5dc:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   1a5de:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a5e0:	4623      	mov	r3, r4
   1a5e2:	aa04      	add	r2, sp, #16
   1a5e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1a5e8:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a5ea:	f88d 4010 	strb.w	r4, [sp, #16]
   1a5ee:	f7ff fd29 	bl	1a044 <bt_gatt_foreach_attr_type>
	return data.err;
   1a5f2:	9807      	ldr	r0, [sp, #28]
   1a5f4:	e7b9      	b.n	1a56a <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   1a5f6:	f06f 000a 	mvn.w	r0, #10
   1a5fa:	e7b6      	b.n	1a56a <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   1a5fc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1a600:	e7b3      	b.n	1a56a <bt_gatt_indicate+0x4a>
   1a602:	bf00      	nop
   1a604:	2000041c 	.word	0x2000041c
   1a608:	00028077 	.word	0x00028077
   1a60c:	0001a985 	.word	0x0001a985

0001a610 <sc_process>:
{
   1a610:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1a612:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   1a616:	f8ad 3004 	strh.w	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1a61a:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   1a61e:	4604      	mov	r4, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1a620:	f830 3c06 	ldrh.w	r3, [r0, #-6]
   1a624:	f8ad 3006 	strh.w	r3, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1a628:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a62c:	f06f 0101 	mvn.w	r1, #1
   1a630:	4628      	mov	r0, r5
   1a632:	f00d fdc3 	bl	281bc <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1a636:	4b0d      	ldr	r3, [pc, #52]	; (1a66c <sc_process+0x5c>)
   1a638:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1a63c:	4b0c      	ldr	r3, [pc, #48]	; (1a670 <sc_process+0x60>)
   1a63e:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1a642:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   1a644:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1a646:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1a64a:	2304      	movs	r3, #4
	sc->start = 0U;
   1a64c:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1a650:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1a654:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1a658:	4631      	mov	r1, r6
   1a65a:	f7ff ff61 	bl	1a520 <bt_gatt_indicate>
   1a65e:	b918      	cbnz	r0, 1a668 <sc_process+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a660:	2102      	movs	r1, #2
   1a662:	4628      	mov	r0, r5
   1a664:	f00d fd9b 	bl	2819e <atomic_or>
}
   1a668:	b002      	add	sp, #8
   1a66a:	bd70      	pop	{r4, r5, r6, pc}
   1a66c:	0002b540 	.word	0x0002b540
   1a670:	00019ecd 	.word	0x00019ecd

0001a674 <update_ccc>:
{
   1a674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a678:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = data->conn;
   1a67a:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a67c:	4b3c      	ldr	r3, [pc, #240]	; (1a770 <update_ccc+0xfc>)
{
   1a67e:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a680:	6882      	ldr	r2, [r0, #8]
   1a682:	429a      	cmp	r2, r3
{
   1a684:	af00      	add	r7, sp, #0
   1a686:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a688:	d122      	bne.n	1a6d0 <update_ccc+0x5c>
	ccc = attr->user_data;
   1a68a:	f8d0 800c 	ldr.w	r8, [r0, #12]
		if (!cfg->value ||
   1a68e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1a692:	b1eb      	cbz	r3, 1a6d0 <update_ccc+0x5c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a694:	4642      	mov	r2, r8
   1a696:	4620      	mov	r0, r4
   1a698:	f812 1b01 	ldrb.w	r1, [r2], #1
   1a69c:	f00c fef8 	bl	27490 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1a6a0:	b1b0      	cbz	r0, 1a6d0 <update_ccc+0x5c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1a6a2:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1a6a6:	4629      	mov	r1, r5
   1a6a8:	4620      	mov	r0, r4
   1a6aa:	f00d ff4d 	bl	28548 <bt_gatt_check_perm>
		if (err) {
   1a6ae:	b328      	cbz	r0, 1a6fc <update_ccc+0x88>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1a6b0:	2803      	cmp	r0, #3
   1a6b2:	d112      	bne.n	1a6da <update_ccc+0x66>
				BT_WARN("CCC %p not writable", attr);
   1a6b4:	466c      	mov	r4, sp
   1a6b6:	b088      	sub	sp, #32
   1a6b8:	466a      	mov	r2, sp
   1a6ba:	4b2e      	ldr	r3, [pc, #184]	; (1a774 <update_ccc+0x100>)
   1a6bc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a6c0:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1a6c4:	f842 0f10 	str.w	r0, [r2, #16]!
   1a6c8:	482b      	ldr	r0, [pc, #172]	; (1a778 <update_ccc+0x104>)
   1a6ca:	f00d fd86 	bl	281da <z_log_msg_static_create.constprop.0>
   1a6ce:	46a5      	mov	sp, r4
}
   1a6d0:	2001      	movs	r0, #1
   1a6d2:	3724      	adds	r7, #36	; 0x24
   1a6d4:	46bd      	mov	sp, r7
   1a6d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				sec = BT_SECURITY_L3;
   1a6da:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1a6dc:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   1a6de:	bf14      	ite	ne
   1a6e0:	f04f 0902 	movne.w	r9, #2
   1a6e4:	f04f 0903 	moveq.w	r9, #3
			    bt_conn_get_security(conn) < sec) {
   1a6e8:	f00c fed0 	bl	2748c <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1a6ec:	4581      	cmp	r9, r0
   1a6ee:	d905      	bls.n	1a6fc <update_ccc+0x88>
				if (data->sec < sec) {
   1a6f0:	7933      	ldrb	r3, [r6, #4]
   1a6f2:	454b      	cmp	r3, r9
   1a6f4:	d2ec      	bcs.n	1a6d0 <update_ccc+0x5c>
					data->sec = sec;
   1a6f6:	f886 9004 	strb.w	r9, [r6, #4]
   1a6fa:	e7e9      	b.n	1a6d0 <update_ccc+0x5c>
		gatt_ccc_changed(attr, ccc);
   1a6fc:	4641      	mov	r1, r8
   1a6fe:	4628      	mov	r0, r5
   1a700:	f00d fc9c 	bl	2803c <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1a704:	4b1d      	ldr	r3, [pc, #116]	; (1a77c <update_ccc+0x108>)
   1a706:	4598      	cmp	r8, r3
   1a708:	d1e2      	bne.n	1a6d0 <update_ccc+0x5c>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1a70a:	7a20      	ldrb	r0, [r4, #8]
   1a70c:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1a710:	f7ff fa26 	bl	19b60 <find_sc_cfg>
	if (!cfg) {
   1a714:	2800      	cmp	r0, #0
   1a716:	d0db      	beq.n	1a6d0 <update_ccc+0x5c>
	if (!(cfg->data.start || cfg->data.end)) {
   1a718:	8902      	ldrh	r2, [r0, #8]
   1a71a:	8943      	ldrh	r3, [r0, #10]
   1a71c:	ea52 0103 	orrs.w	r1, r2, r3
   1a720:	d0d6      	beq.n	1a6d0 <update_ccc+0x5c>
	index = bt_conn_index(conn);
   1a722:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1a724:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1a726:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   1a728:	f7fd f9ac 	bl	17a84 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1a72c:	4914      	ldr	r1, [pc, #80]	; (1a780 <update_ccc+0x10c>)
   1a72e:	4a15      	ldr	r2, [pc, #84]	; (1a784 <update_ccc+0x110>)
   1a730:	2318      	movs	r3, #24
   1a732:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a736:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1a738:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1a73a:	4a13      	ldr	r2, [pc, #76]	; (1a788 <update_ccc+0x114>)
   1a73c:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1a73e:	1d3a      	adds	r2, r7, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a740:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1a744:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1a746:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a748:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1a74c:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a74e:	4620      	mov	r0, r4
   1a750:	f7ff fee6 	bl	1a520 <bt_gatt_indicate>
   1a754:	2800      	cmp	r0, #0
   1a756:	d0bb      	beq.n	1a6d0 <update_ccc+0x5c>
		BT_ERR("SC restore indication failed");
   1a758:	4b0c      	ldr	r3, [pc, #48]	; (1a78c <update_ccc+0x118>)
   1a75a:	61fb      	str	r3, [r7, #28]
   1a75c:	4806      	ldr	r0, [pc, #24]	; (1a778 <update_ccc+0x104>)
   1a75e:	2302      	movs	r3, #2
   1a760:	f107 0218 	add.w	r2, r7, #24
   1a764:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a768:	61bb      	str	r3, [r7, #24]
   1a76a:	f00d fd36 	bl	281da <z_log_msg_static_create.constprop.0>
   1a76e:	e7af      	b.n	1a6d0 <update_ccc+0x5c>
   1a770:	00019a59 	.word	0x00019a59
   1a774:	0002d720 	.word	0x0002d720
   1a778:	0002ac08 	.word	0x0002ac08
   1a77c:	20000668 	.word	0x20000668
   1a780:	20002c30 	.word	0x20002c30
   1a784:	0002b540 	.word	0x0002b540
   1a788:	00028421 	.word	0x00028421
   1a78c:	0002d734 	.word	0x0002d734

0001a790 <gatt_notify>:
{
   1a790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a794:	4614      	mov	r4, r2
   1a796:	b087      	sub	sp, #28
   1a798:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a79a:	2294      	movs	r2, #148	; 0x94
   1a79c:	6861      	ldr	r1, [r4, #4]
{
   1a79e:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a7a0:	f00d fed2 	bl	28548 <bt_gatt_check_perm>
   1a7a4:	b170      	cbz	r0, 1a7c4 <gatt_notify+0x34>
		BT_WARN("Link is not encrypted");
   1a7a6:	4b2b      	ldr	r3, [pc, #172]	; (1a854 <gatt_notify+0xc4>)
   1a7a8:	482b      	ldr	r0, [pc, #172]	; (1a858 <gatt_notify+0xc8>)
   1a7aa:	9305      	str	r3, [sp, #20]
   1a7ac:	aa04      	add	r2, sp, #16
   1a7ae:	2302      	movs	r3, #2
   1a7b0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a7b4:	9304      	str	r3, [sp, #16]
   1a7b6:	f00d fd10 	bl	281da <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1a7ba:	f04f 30ff 	mov.w	r0, #4294967295
}
   1a7be:	b007      	add	sp, #28
   1a7c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1a7c4:	6861      	ldr	r1, [r4, #4]
   1a7c6:	2201      	movs	r2, #1
   1a7c8:	4630      	mov	r0, r6
   1a7ca:	f00d fef0 	bl	285ae <bt_gatt_is_subscribed>
   1a7ce:	b960      	cbnz	r0, 1a7ea <gatt_notify+0x5a>
			BT_WARN("Device is not subscribed to characteristic");
   1a7d0:	4b22      	ldr	r3, [pc, #136]	; (1a85c <gatt_notify+0xcc>)
   1a7d2:	4821      	ldr	r0, [pc, #132]	; (1a858 <gatt_notify+0xc8>)
   1a7d4:	9305      	str	r3, [sp, #20]
   1a7d6:	aa04      	add	r2, sp, #16
   1a7d8:	2302      	movs	r3, #2
   1a7da:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a7de:	9304      	str	r3, [sp, #16]
   1a7e0:	f00d fcfb 	bl	281da <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1a7e4:	f06f 0015 	mvn.w	r0, #21
   1a7e8:	e7e9      	b.n	1a7be <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   1a7ea:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1a7ec:	211b      	movs	r1, #27
   1a7ee:	3202      	adds	r2, #2
   1a7f0:	4630      	mov	r0, r6
   1a7f2:	f7fe f9c1 	bl	18b78 <bt_att_create_pdu>
	if (!buf) {
   1a7f6:	4605      	mov	r5, r0
   1a7f8:	b960      	cbnz	r0, 1a814 <gatt_notify+0x84>
		BT_WARN("No buffer available to send notification");
   1a7fa:	4b19      	ldr	r3, [pc, #100]	; (1a860 <gatt_notify+0xd0>)
   1a7fc:	4816      	ldr	r0, [pc, #88]	; (1a858 <gatt_notify+0xc8>)
   1a7fe:	9305      	str	r3, [sp, #20]
   1a800:	aa04      	add	r2, sp, #16
   1a802:	2302      	movs	r3, #2
   1a804:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a808:	9304      	str	r3, [sp, #16]
   1a80a:	f00d fce6 	bl	281da <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   1a80e:	f06f 000b 	mvn.w	r0, #11
   1a812:	e7d4      	b.n	1a7be <gatt_notify+0x2e>
   1a814:	f100 0908 	add.w	r9, r0, #8
   1a818:	2102      	movs	r1, #2
   1a81a:	4648      	mov	r0, r9
   1a81c:	f00e fc5a 	bl	290d4 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1a820:	4607      	mov	r7, r0
   1a822:	89a1      	ldrh	r1, [r4, #12]
   1a824:	f827 8b02 	strh.w	r8, [r7], #2
   1a828:	4648      	mov	r0, r9
   1a82a:	f00e fc53 	bl	290d4 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1a82e:	89a2      	ldrh	r2, [r4, #12]
   1a830:	68a1      	ldr	r1, [r4, #8]
   1a832:	4638      	mov	r0, r7
   1a834:	f00c fa70 	bl	26d18 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1a838:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1a83c:	4628      	mov	r0, r5
   1a83e:	2301      	movs	r3, #1
   1a840:	f00d fbf2 	bl	28028 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1a844:	4629      	mov	r1, r5
   1a846:	4630      	mov	r0, r6
}
   1a848:	b007      	add	sp, #28
   1a84a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1a84e:	f00d bb6c 	b.w	27f2a <bt_att_send>
   1a852:	bf00      	nop
   1a854:	0002d6b8 	.word	0x0002d6b8
   1a858:	0002ac08 	.word	0x0002ac08
   1a85c:	0002d6ce 	.word	0x0002d6ce
   1a860:	0002d751 	.word	0x0002d751

0001a864 <notify_cb.part.0>:
static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
   1a864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1a868:	4b42      	ldr	r3, [pc, #264]	; (1a974 <notify_cb.part.0+0x110>)
	ccc = attr->user_data;
   1a86a:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1a86e:	4598      	cmp	r8, r3
static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
   1a870:	b087      	sub	sp, #28
   1a872:	4607      	mov	r7, r0
   1a874:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1a876:	d11e      	bne.n	1a8b6 <notify_cb.part.0+0x52>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a878:	2600      	movs	r6, #0
   1a87a:	4d3f      	ldr	r5, [pc, #252]	; (1a978 <notify_cb.part.0+0x114>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a87c:	46b1      	mov	r9, r6
   1a87e:	2207      	movs	r2, #7
   1a880:	4669      	mov	r1, sp
   1a882:	4628      	mov	r0, r5
   1a884:	f8cd 9000 	str.w	r9, [sp]
   1a888:	f8cd 9003 	str.w	r9, [sp, #3]
   1a88c:	f00c fa1b 	bl	26cc6 <memcmp>
   1a890:	b178      	cbz	r0, 1a8b2 <notify_cb.part.0+0x4e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1a892:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1a896:	2207      	movs	r2, #7
   1a898:	4629      	mov	r1, r5
   1a89a:	f7fd fa5d 	bl	17d58 <bt_conn_lookup_state_le>
			if (!conn) {
   1a89e:	b9e8      	cbnz	r0, 1a8dc <notify_cb.part.0+0x78>
				sc = (struct sc_data *)data->ind_params->data;
   1a8a0:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   1a8a2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1a8a6:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1a8a8:	4629      	mov	r1, r5
   1a8aa:	8853      	ldrh	r3, [r2, #2]
   1a8ac:	8812      	ldrh	r2, [r2, #0]
   1a8ae:	f7ff f979 	bl	19ba4 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a8b2:	350c      	adds	r5, #12
   1a8b4:	b186      	cbz	r6, 1a8d8 <notify_cb.part.0+0x74>
		if (cfg->value != data->type) {
   1a8b6:	f8b8 2008 	ldrh.w	r2, [r8, #8]
   1a8ba:	89a3      	ldrh	r3, [r4, #12]
   1a8bc:	429a      	cmp	r2, r3
   1a8be:	d106      	bne.n	1a8ce <notify_cb.part.0+0x6a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1a8c0:	4641      	mov	r1, r8
   1a8c2:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a8c6:	f7fd f9fb 	bl	17cc0 <bt_conn_lookup_addr_le>
		if (!conn) {
   1a8ca:	4606      	mov	r6, r0
   1a8cc:	b948      	cbnz	r0, 1a8e2 <notify_cb.part.0+0x7e>
	return BT_GATT_ITER_CONTINUE;
   1a8ce:	2701      	movs	r7, #1
}
   1a8d0:	4638      	mov	r0, r7
   1a8d2:	b007      	add	sp, #28
   1a8d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a8d8:	2601      	movs	r6, #1
   1a8da:	e7d0      	b.n	1a87e <notify_cb.part.0+0x1a>
			bt_conn_unref(conn);
   1a8dc:	f00c fd3d 	bl	2735a <bt_conn_unref>
   1a8e0:	e7e7      	b.n	1a8b2 <notify_cb.part.0+0x4e>
		if (conn->state != BT_CONN_CONNECTED) {
   1a8e2:	7b43      	ldrb	r3, [r0, #13]
   1a8e4:	2b07      	cmp	r3, #7
   1a8e6:	d002      	beq.n	1a8ee <notify_cb.part.0+0x8a>
			bt_conn_unref(conn);
   1a8e8:	f00c fd37 	bl	2735a <bt_conn_unref>
			continue;
   1a8ec:	e7ef      	b.n	1a8ce <notify_cb.part.0+0x6a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1a8ee:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1a8f2:	b123      	cbz	r3, 1a8fe <notify_cb.part.0+0x9a>
   1a8f4:	4639      	mov	r1, r7
   1a8f6:	4798      	blx	r3
   1a8f8:	b908      	cbnz	r0, 1a8fe <notify_cb.part.0+0x9a>
			bt_conn_unref(conn);
   1a8fa:	4630      	mov	r0, r6
   1a8fc:	e7f4      	b.n	1a8e8 <notify_cb.part.0+0x84>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a8fe:	4639      	mov	r1, r7
   1a900:	2294      	movs	r2, #148	; 0x94
   1a902:	4630      	mov	r0, r6
   1a904:	f00d fe20 	bl	28548 <bt_gatt_check_perm>
   1a908:	4607      	mov	r7, r0
   1a90a:	b150      	cbz	r0, 1a922 <notify_cb.part.0+0xbe>
			BT_WARN("Link is not encrypted");
   1a90c:	4b1b      	ldr	r3, [pc, #108]	; (1a97c <notify_cb.part.0+0x118>)
   1a90e:	9305      	str	r3, [sp, #20]
   1a910:	481b      	ldr	r0, [pc, #108]	; (1a980 <notify_cb.part.0+0x11c>)
   1a912:	2302      	movs	r3, #2
   1a914:	aa04      	add	r2, sp, #16
   1a916:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a91a:	9304      	str	r3, [sp, #16]
   1a91c:	f00d fc5d 	bl	281da <z_log_msg_static_create.constprop.0>
   1a920:	e7eb      	b.n	1a8fa <notify_cb.part.0+0x96>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1a922:	89a3      	ldrh	r3, [r4, #12]
   1a924:	2b02      	cmp	r3, #2
   1a926:	d116      	bne.n	1a956 <notify_cb.part.0+0xf2>
   1a928:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1a92c:	079a      	lsls	r2, r3, #30
   1a92e:	d51f      	bpl.n	1a970 <notify_cb.part.0+0x10c>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1a930:	6922      	ldr	r2, [r4, #16]
   1a932:	88a1      	ldrh	r1, [r4, #4]
   1a934:	4630      	mov	r0, r6
   1a936:	f7ff fd6f 	bl	1a418 <gatt_indicate>
			if (err == 0) {
   1a93a:	4605      	mov	r5, r0
   1a93c:	b918      	cbnz	r0, 1a946 <notify_cb.part.0+0xe2>
				data->ind_params->_ref++;
   1a93e:	6922      	ldr	r2, [r4, #16]
   1a940:	7d93      	ldrb	r3, [r2, #22]
   1a942:	3301      	adds	r3, #1
   1a944:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1a946:	4630      	mov	r0, r6
   1a948:	f00c fd07 	bl	2735a <bt_conn_unref>
		if (err < 0) {
   1a94c:	2d00      	cmp	r5, #0
   1a94e:	dbbf      	blt.n	1a8d0 <notify_cb.part.0+0x6c>
		data->err = 0;
   1a950:	2300      	movs	r3, #0
   1a952:	60a3      	str	r3, [r4, #8]
   1a954:	e7bb      	b.n	1a8ce <notify_cb.part.0+0x6a>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1a956:	2b01      	cmp	r3, #1
   1a958:	d10a      	bne.n	1a970 <notify_cb.part.0+0x10c>
   1a95a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1a95e:	07db      	lsls	r3, r3, #31
   1a960:	d506      	bpl.n	1a970 <notify_cb.part.0+0x10c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1a962:	6922      	ldr	r2, [r4, #16]
   1a964:	88a1      	ldrh	r1, [r4, #4]
   1a966:	4630      	mov	r0, r6
   1a968:	f7ff ff12 	bl	1a790 <gatt_notify>
   1a96c:	4605      	mov	r5, r0
   1a96e:	e7ea      	b.n	1a946 <notify_cb.part.0+0xe2>
			err = 0;
   1a970:	463d      	mov	r5, r7
   1a972:	e7e8      	b.n	1a946 <notify_cb.part.0+0xe2>
   1a974:	20000668 	.word	0x20000668
   1a978:	20003a99 	.word	0x20003a99
   1a97c:	0002d6b8 	.word	0x0002d6b8
   1a980:	0002ac08 	.word	0x0002ac08

0001a984 <notify_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a984:	4b04      	ldr	r3, [pc, #16]	; (1a998 <notify_cb+0x14>)
{
   1a986:	4611      	mov	r1, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a988:	6882      	ldr	r2, [r0, #8]
   1a98a:	429a      	cmp	r2, r3
   1a98c:	d101      	bne.n	1a992 <notify_cb+0xe>
   1a98e:	f7ff bf69 	b.w	1a864 <notify_cb.part.0>
}
   1a992:	2001      	movs	r0, #1
   1a994:	4770      	bx	lr
   1a996:	bf00      	nop
   1a998:	00019a59 	.word	0x00019a59

0001a99c <bt_gatt_connected>:
{
   1a99c:	b5b0      	push	{r4, r5, r7, lr}
   1a99e:	b08e      	sub	sp, #56	; 0x38
   1a9a0:	af02      	add	r7, sp, #8
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a9a2:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   1a9a6:	4604      	mov	r4, r0
	data.conn = conn;
   1a9a8:	6078      	str	r0, [r7, #4]
	data.sec = BT_SECURITY_L1;
   1a9aa:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a9ac:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1a9ae:	723b      	strb	r3, [r7, #8]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a9b0:	4629      	mov	r1, r5
   1a9b2:	f00c fba4 	bl	270fe <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1a9b6:	b198      	cbz	r0, 1a9e0 <bt_gatt_connected+0x44>
		if (conn->id) {
   1a9b8:	7a22      	ldrb	r2, [r4, #8]
   1a9ba:	b3a2      	cbz	r2, 1aa26 <bt_gatt_connected+0x8a>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1a9bc:	2104      	movs	r1, #4
   1a9be:	4638      	mov	r0, r7
   1a9c0:	f00a ffd5 	bl	2596e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1a9c4:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1a9c6:	4a19      	ldr	r2, [pc, #100]	; (1aa2c <bt_gatt_connected+0x90>)
   1a9c8:	2124      	movs	r1, #36	; 0x24
   1a9ca:	f107 000c 	add.w	r0, r7, #12
   1a9ce:	462b      	mov	r3, r5
   1a9d0:	f7fa fab4 	bl	14f3c <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1a9d4:	f107 020c 	add.w	r2, r7, #12
   1a9d8:	4915      	ldr	r1, [pc, #84]	; (1aa30 <bt_gatt_connected+0x94>)
   1a9da:	4610      	mov	r0, r2
   1a9dc:	f7f9 f894 	bl	13b08 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1a9e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a9e4:	4a13      	ldr	r2, [pc, #76]	; (1aa34 <bt_gatt_connected+0x98>)
   1a9e6:	1d3b      	adds	r3, r7, #4
   1a9e8:	2001      	movs	r0, #1
   1a9ea:	f00d fda2 	bl	28532 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1a9ee:	4620      	mov	r0, r4
   1a9f0:	f00c fd4c 	bl	2748c <bt_conn_get_security>
   1a9f4:	7a39      	ldrb	r1, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1a9f6:	4288      	cmp	r0, r1
   1a9f8:	d212      	bcs.n	1aa20 <bt_gatt_connected+0x84>
		int err = bt_conn_set_security(conn, data.sec);
   1a9fa:	4620      	mov	r0, r4
   1a9fc:	f00c fd16 	bl	2742c <bt_conn_set_security>
		if (err) {
   1aa00:	b170      	cbz	r0, 1aa20 <bt_gatt_connected+0x84>
			BT_WARN("Failed to set security for bonded peer (%d)",
   1aa02:	466c      	mov	r4, sp
   1aa04:	b088      	sub	sp, #32
   1aa06:	aa02      	add	r2, sp, #8
   1aa08:	4b0b      	ldr	r3, [pc, #44]	; (1aa38 <bt_gatt_connected+0x9c>)
   1aa0a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1aa0e:	2303      	movs	r3, #3
   1aa10:	f842 3f10 	str.w	r3, [r2, #16]!
   1aa14:	4809      	ldr	r0, [pc, #36]	; (1aa3c <bt_gatt_connected+0xa0>)
   1aa16:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1aa1a:	f00d fbde 	bl	281da <z_log_msg_static_create.constprop.0>
   1aa1e:	46a5      	mov	sp, r4
}
   1aa20:	3730      	adds	r7, #48	; 0x30
   1aa22:	46bd      	mov	sp, r7
   1aa24:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1aa26:	9200      	str	r2, [sp, #0]
   1aa28:	e7cd      	b.n	1a9c6 <bt_gatt_connected+0x2a>
   1aa2a:	bf00      	nop
   1aa2c:	0002d6b4 	.word	0x0002d6b4
   1aa30:	0001a2bd 	.word	0x0001a2bd
   1aa34:	0001a675 	.word	0x0001a675
   1aa38:	0002d77a 	.word	0x0002d77a
   1aa3c:	0002ac08 	.word	0x0002ac08

0001aa40 <bt_gatt_att_max_mtu_changed>:
{
   1aa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1aa42:	4b08      	ldr	r3, [pc, #32]	; (1aa64 <bt_gatt_att_max_mtu_changed+0x24>)
   1aa44:	681c      	ldr	r4, [r3, #0]
   1aa46:	4605      	mov	r5, r0
   1aa48:	460e      	mov	r6, r1
   1aa4a:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1aa4c:	b14c      	cbz	r4, 1aa62 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1aa4e:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1aa52:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1aa54:	b11b      	cbz	r3, 1aa5e <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1aa56:	463a      	mov	r2, r7
   1aa58:	4631      	mov	r1, r6
   1aa5a:	4628      	mov	r0, r5
   1aa5c:	4798      	blx	r3
	return node->next;
   1aa5e:	6864      	ldr	r4, [r4, #4]
   1aa60:	e7f4      	b.n	1aa4c <bt_gatt_att_max_mtu_changed+0xc>
}
   1aa62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aa64:	20002c04 	.word	0x20002c04

0001aa68 <bt_gatt_encrypt_change>:
{
   1aa68:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1aa6a:	4a06      	ldr	r2, [pc, #24]	; (1aa84 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   1aa6c:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1aa6e:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1aa70:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1aa72:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1aa76:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1aa7a:	f00d fd5a 	bl	28532 <bt_gatt_foreach_attr>
}
   1aa7e:	b003      	add	sp, #12
   1aa80:	f85d fb04 	ldr.w	pc, [sp], #4
   1aa84:	0001a675 	.word	0x0001a675

0001aa88 <bt_gatt_store_ccc>:
{
   1aa88:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa8a:	b0c1      	sub	sp, #260	; 0x104
   1aa8c:	af02      	add	r7, sp, #8
	save.count = 0;
   1aa8e:	2300      	movs	r3, #0
{
   1aa90:	4604      	mov	r4, r0
   1aa92:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1aa94:	62f9      	str	r1, [r7, #44]	; 0x2c
	save.addr_with_id.id = id;
   1aa96:	f887 0030 	strb.w	r0, [r7, #48]	; 0x30
	save.count = 0;
   1aa9a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1aa9e:	4a1d      	ldr	r2, [pc, #116]	; (1ab14 <bt_gatt_store_ccc+0x8c>)
   1aaa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1aaa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1aaa8:	2001      	movs	r0, #1
   1aaaa:	f00d fd42 	bl	28532 <bt_gatt_foreach_attr>
	if (id) {
   1aaae:	b364      	cbz	r4, 1ab0a <bt_gatt_store_ccc+0x82>
		u8_to_dec(id_str, sizeof(id_str), id);
   1aab0:	1d3e      	adds	r6, r7, #4
   1aab2:	4622      	mov	r2, r4
   1aab4:	2104      	movs	r1, #4
   1aab6:	4630      	mov	r0, r6
   1aab8:	f00a ff59 	bl	2596e <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1aabc:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1aabe:	4a16      	ldr	r2, [pc, #88]	; (1ab18 <bt_gatt_store_ccc+0x90>)
   1aac0:	462b      	mov	r3, r5
   1aac2:	2124      	movs	r1, #36	; 0x24
   1aac4:	f107 0008 	add.w	r0, r7, #8
   1aac8:	f7fa fa38 	bl	14f3c <bt_settings_encode_key>
	if (save.count) {
   1aacc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1aad0:	b1ea      	cbz	r2, 1ab0e <bt_gatt_store_ccc+0x86>
		len = save.count * sizeof(*save.store);
   1aad2:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1aad4:	f107 0134 	add.w	r1, r7, #52	; 0x34
	err = settings_save_one(key, str, len);
   1aad8:	f107 0008 	add.w	r0, r7, #8
   1aadc:	f7f8 ffee 	bl	13abc <settings_save_one>
	if (err) {
   1aae0:	4604      	mov	r4, r0
   1aae2:	b170      	cbz	r0, 1ab02 <bt_gatt_store_ccc+0x7a>
		BT_ERR("Failed to store CCCs (err %d)", err);
   1aae4:	466d      	mov	r5, sp
   1aae6:	b088      	sub	sp, #32
   1aae8:	aa02      	add	r2, sp, #8
   1aaea:	4b0c      	ldr	r3, [pc, #48]	; (1ab1c <bt_gatt_store_ccc+0x94>)
   1aaec:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1aaf0:	2303      	movs	r3, #3
   1aaf2:	f842 3f10 	str.w	r3, [r2, #16]!
   1aaf6:	480a      	ldr	r0, [pc, #40]	; (1ab20 <bt_gatt_store_ccc+0x98>)
   1aaf8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1aafc:	f00d fb6d 	bl	281da <z_log_msg_static_create.constprop.0>
   1ab00:	46ad      	mov	sp, r5
}
   1ab02:	4620      	mov	r0, r4
   1ab04:	37fc      	adds	r7, #252	; 0xfc
   1ab06:	46bd      	mov	sp, r7
   1ab08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1ab0a:	9400      	str	r4, [sp, #0]
   1ab0c:	e7d7      	b.n	1aabe <bt_gatt_store_ccc+0x36>
		str = NULL;
   1ab0e:	4611      	mov	r1, r2
   1ab10:	e7e2      	b.n	1aad8 <bt_gatt_store_ccc+0x50>
   1ab12:	bf00      	nop
   1ab14:	00019995 	.word	0x00019995
   1ab18:	0002d6b4 	.word	0x0002d6b4
   1ab1c:	0002d7a6 	.word	0x0002d7a6
   1ab20:	0002ac08 	.word	0x0002ac08

0001ab24 <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
   1ab24:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ab26:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   1ab28:	ae03      	add	r6, sp, #12
{
   1ab2a:	4604      	mov	r4, r0
   1ab2c:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
   1ab2e:	9103      	str	r1, [sp, #12]
   1ab30:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   1ab34:	4a1f      	ldr	r2, [pc, #124]	; (1abb4 <bt_gatt_clear+0x90>)
   1ab36:	4633      	mov	r3, r6
   1ab38:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ab3c:	2001      	movs	r0, #1
   1ab3e:	f00d fcf8 	bl	28532 <bt_gatt_foreach_attr>
		if (id) {
   1ab42:	b394      	cbz	r4, 1abaa <bt_gatt_clear+0x86>
			u8_to_dec(id_str, sizeof(id_str), id);
   1ab44:	af02      	add	r7, sp, #8
   1ab46:	4622      	mov	r2, r4
   1ab48:	2104      	movs	r1, #4
   1ab4a:	4638      	mov	r0, r7
   1ab4c:	f00a ff0f 	bl	2596e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1ab50:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1ab52:	4a19      	ldr	r2, [pc, #100]	; (1abb8 <bt_gatt_clear+0x94>)
   1ab54:	462b      	mov	r3, r5
   1ab56:	2124      	movs	r1, #36	; 0x24
   1ab58:	a805      	add	r0, sp, #20
   1ab5a:	f7fa f9ef 	bl	14f3c <bt_settings_encode_key>
		return settings_delete(key);
   1ab5e:	a805      	add	r0, sp, #20
   1ab60:	f00b fd72 	bl	26648 <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
   1ab64:	2800      	cmp	r0, #0
   1ab66:	db1e      	blt.n	1aba6 <bt_gatt_clear+0x82>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
   1ab68:	4629      	mov	r1, r5
   1ab6a:	4620      	mov	r0, r4
   1ab6c:	f7ff f860 	bl	19c30 <bt_gatt_clear_sc>
		if (err < 0) {
   1ab70:	2800      	cmp	r0, #0
   1ab72:	db18      	blt.n	1aba6 <bt_gatt_clear+0x82>
	cfg = find_cf_cfg_by_addr(id, addr);
   1ab74:	4629      	mov	r1, r5
   1ab76:	4620      	mov	r0, r4
   1ab78:	f7fe fe3e 	bl	197f8 <find_cf_cfg_by_addr>
	if (cfg) {
   1ab7c:	b108      	cbz	r0, 1ab82 <bt_gatt_clear+0x5e>
		clear_cf_cfg(cfg);
   1ab7e:	f00d fb2f 	bl	281e0 <clear_cf_cfg>
		if (id) {
   1ab82:	b1a4      	cbz	r4, 1abae <bt_gatt_clear+0x8a>
			u8_to_dec(id_str, sizeof(id_str), id);
   1ab84:	4622      	mov	r2, r4
   1ab86:	2104      	movs	r1, #4
   1ab88:	4630      	mov	r0, r6
   1ab8a:	f00a fef0 	bl	2596e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1ab8e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
   1ab90:	4a0a      	ldr	r2, [pc, #40]	; (1abbc <bt_gatt_clear+0x98>)
   1ab92:	462b      	mov	r3, r5
   1ab94:	2124      	movs	r1, #36	; 0x24
   1ab96:	a805      	add	r0, sp, #20
   1ab98:	f7fa f9d0 	bl	14f3c <bt_settings_encode_key>
		return settings_delete(key);
   1ab9c:	a805      	add	r0, sp, #20
   1ab9e:	f00b fd53 	bl	26648 <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
   1aba2:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
}
   1aba6:	b00f      	add	sp, #60	; 0x3c
   1aba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1abaa:	9400      	str	r4, [sp, #0]
   1abac:	e7d1      	b.n	1ab52 <bt_gatt_clear+0x2e>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1abae:	9400      	str	r4, [sp, #0]
   1abb0:	e7ee      	b.n	1ab90 <bt_gatt_clear+0x6c>
   1abb2:	bf00      	nop
   1abb4:	0001996d 	.word	0x0001996d
   1abb8:	0002d6b4 	.word	0x0002d6b4
   1abbc:	0002d7f0 	.word	0x0002d7f0

0001abc0 <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1abc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1abc4:	b08c      	sub	sp, #48	; 0x30
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1abc6:	4603      	mov	r3, r0
   1abc8:	4a41      	ldr	r2, [pc, #260]	; (1acd0 <bt_gatt_disconnected+0x110>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1abca:	4e42      	ldr	r6, [pc, #264]	; (1acd4 <bt_gatt_disconnected+0x114>)
{
   1abcc:	4604      	mov	r4, r0
   1abce:	af02      	add	r7, sp, #8
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1abd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1abd4:	2001      	movs	r0, #1
   1abd6:	f00d fcac 	bl	28532 <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   1abda:	4620      	mov	r0, r4
   1abdc:	f7fc ff52 	bl	17a84 <bt_conn_index>
   1abe0:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1abe2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   1abe6:	b120      	cbz	r0, 1abf2 <bt_gatt_disconnected+0x32>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   1abe8:	f00c fbb7 	bl	2735a <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   1abec:	2300      	movs	r3, #0
   1abee:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1abf2:	4839      	ldr	r0, [pc, #228]	; (1acd8 <bt_gatt_disconnected+0x118>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1abf4:	f104 0588 	add.w	r5, r4, #136	; 0x88
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1abf8:	f00f fa8d 	bl	2a116 <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1abfc:	7a20      	ldrb	r0, [r4, #8]
   1abfe:	4629      	mov	r1, r5
   1ac00:	f00c fa7d 	bl	270fe <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1ac04:	2800      	cmp	r0, #0
   1ac06:	d039      	beq.n	1ac7c <bt_gatt_disconnected+0xbc>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1ac08:	4629      	mov	r1, r5
   1ac0a:	7a20      	ldrb	r0, [r4, #8]
   1ac0c:	f7ff ff3c 	bl	1aa88 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   1ac10:	4620      	mov	r0, r4
   1ac12:	f7fe fca9 	bl	19568 <find_cf_cfg>
	if (!cfg) {
   1ac16:	4606      	mov	r6, r0
   1ac18:	2800      	cmp	r0, #0
   1ac1a:	d04f      	beq.n	1acbc <bt_gatt_disconnected+0xfc>
		if (conn->id) {
   1ac1c:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   1ac1e:	3608      	adds	r6, #8
		if (conn->id) {
   1ac20:	2a00      	cmp	r2, #0
   1ac22:	d04d      	beq.n	1acc0 <bt_gatt_disconnected+0x100>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1ac24:	2104      	movs	r1, #4
   1ac26:	4638      	mov	r0, r7
   1ac28:	f00a fea1 	bl	2596e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1ac2c:	462b      	mov	r3, r5
   1ac2e:	4a2b      	ldr	r2, [pc, #172]	; (1acdc <bt_gatt_disconnected+0x11c>)
   1ac30:	9700      	str	r7, [sp, #0]
   1ac32:	2124      	movs	r1, #36	; 0x24
   1ac34:	1d38      	adds	r0, r7, #4
   1ac36:	f7fa f981 	bl	14f3c <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   1ac3a:	7a23      	ldrb	r3, [r4, #8]
   1ac3c:	f04f 0801 	mov.w	r8, #1
   1ac40:	b93b      	cbnz	r3, 1ac52 <bt_gatt_disconnected+0x92>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1ac42:	2300      	movs	r3, #0
   1ac44:	9300      	str	r3, [sp, #0]
   1ac46:	4a25      	ldr	r2, [pc, #148]	; (1acdc <bt_gatt_disconnected+0x11c>)
   1ac48:	462b      	mov	r3, r5
   1ac4a:	2124      	movs	r1, #36	; 0x24
   1ac4c:	1d38      	adds	r0, r7, #4
   1ac4e:	f7fa f975 	bl	14f3c <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1ac52:	4642      	mov	r2, r8
   1ac54:	4631      	mov	r1, r6
   1ac56:	1d38      	adds	r0, r7, #4
   1ac58:	f7f8 ff30 	bl	13abc <settings_save_one>
	if (err) {
   1ac5c:	b170      	cbz	r0, 1ac7c <bt_gatt_disconnected+0xbc>
		BT_ERR("Failed to store Client Features (err %d)", err);
   1ac5e:	466e      	mov	r6, sp
   1ac60:	b088      	sub	sp, #32
   1ac62:	aa02      	add	r2, sp, #8
   1ac64:	4b1e      	ldr	r3, [pc, #120]	; (1ace0 <bt_gatt_disconnected+0x120>)
   1ac66:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ac6a:	2303      	movs	r3, #3
   1ac6c:	f842 3f10 	str.w	r3, [r2, #16]!
   1ac70:	481c      	ldr	r0, [pc, #112]	; (1ace4 <bt_gatt_disconnected+0x124>)
   1ac72:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ac76:	f00d fab0 	bl	281da <z_log_msg_static_create.constprop.0>
   1ac7a:	46b5      	mov	sp, r6
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ac7c:	7a20      	ldrb	r0, [r4, #8]
   1ac7e:	4629      	mov	r1, r5
   1ac80:	f00c fa3d 	bl	270fe <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1ac84:	b148      	cbz	r0, 1ac9a <bt_gatt_disconnected+0xda>
		struct addr_with_id addr_with_id = {
   1ac86:	7a23      	ldrb	r3, [r4, #8]
   1ac88:	723b      	strb	r3, [r7, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1ac8a:	4a17      	ldr	r2, [pc, #92]	; (1ace8 <bt_gatt_disconnected+0x128>)
		struct addr_with_id addr_with_id = {
   1ac8c:	607d      	str	r5, [r7, #4]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1ac8e:	1d3b      	adds	r3, r7, #4
   1ac90:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ac94:	2001      	movs	r0, #1
   1ac96:	f00d fc4c 	bl	28532 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1ac9a:	4620      	mov	r0, r4
   1ac9c:	f7fe fc64 	bl	19568 <find_cf_cfg>
	if (!cfg) {
   1aca0:	4606      	mov	r6, r0
   1aca2:	b138      	cbz	r0, 1acb4 <bt_gatt_disconnected+0xf4>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1aca4:	7a20      	ldrb	r0, [r4, #8]
   1aca6:	4629      	mov	r1, r5
   1aca8:	f00c fa29 	bl	270fe <bt_addr_le_is_bonded>
   1acac:	b958      	cbnz	r0, 1acc6 <bt_gatt_disconnected+0x106>
		clear_cf_cfg(cfg);
   1acae:	4630      	mov	r0, r6
   1acb0:	f00d fa96 	bl	281e0 <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1acb4:	3728      	adds	r7, #40	; 0x28
   1acb6:	46bd      	mov	sp, r7
   1acb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
   1acbc:	4680      	mov	r8, r0
   1acbe:	e7c0      	b.n	1ac42 <bt_gatt_disconnected+0x82>
   1acc0:	f04f 0801 	mov.w	r8, #1
   1acc4:	e7bd      	b.n	1ac42 <bt_gatt_disconnected+0x82>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1acc6:	4629      	mov	r1, r5
   1acc8:	1c70      	adds	r0, r6, #1
   1acca:	f00d f9da 	bl	28082 <bt_addr_le_copy>
}
   1acce:	e7f1      	b.n	1acb4 <bt_gatt_disconnected+0xf4>
   1acd0:	00019d01 	.word	0x00019d01
   1acd4:	20001f90 	.word	0x20001f90
   1acd8:	20001f98 	.word	0x20001f98
   1acdc:	0002d7f0 	.word	0x0002d7f0
   1ace0:	0002d7c4 	.word	0x0002d7c4
   1ace4:	0002ac08 	.word	0x0002ac08
   1ace8:	0001996d 	.word	0x0001996d

0001acec <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   1acec:	4601      	mov	r1, r0
   1acee:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1acf0:	4803      	ldr	r0, [pc, #12]	; (1ad00 <smp_find+0x14>)
   1acf2:	f00d fd49 	bl	28788 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1acf6:	2800      	cmp	r0, #0
}
   1acf8:	4802      	ldr	r0, [pc, #8]	; (1ad04 <smp_find+0x18>)
   1acfa:	bf08      	it	eq
   1acfc:	2000      	moveq	r0, #0
   1acfe:	bd08      	pop	{r3, pc}
   1ad00:	20002024 	.word	0x20002024
   1ad04:	20002020 	.word	0x20002020

0001ad08 <latch_auth_cb>:
{
   1ad08:	b510      	push	{r4, lr}
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1ad0a:	4a0c      	ldr	r2, [pc, #48]	; (1ad3c <latch_auth_cb+0x34>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ad0c:	6811      	ldr	r1, [r2, #0]
   1ad0e:	4a0c      	ldr	r2, [pc, #48]	; (1ad40 <latch_auth_cb+0x38>)
   1ad10:	f3bf 8f5b 	dmb	ish
   1ad14:	f500 73d4 	add.w	r3, r0, #424	; 0x1a8
   1ad18:	e853 4f00 	ldrex	r4, [r3]
   1ad1c:	4294      	cmp	r4, r2
   1ad1e:	d104      	bne.n	1ad2a <latch_auth_cb+0x22>
   1ad20:	e843 1c00 	strex	ip, r1, [r3]
   1ad24:	f1bc 0f00 	cmp.w	ip, #0
   1ad28:	d1f6      	bne.n	1ad18 <latch_auth_cb+0x10>
   1ad2a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ad2e:	f3bf 8f5b 	dmb	ish
   1ad32:	f8d0 01a8 	ldr.w	r0, [r0, #424]	; 0x1a8
   1ad36:	f3bf 8f5b 	dmb	ish
}
   1ad3a:	bd10      	pop	{r4, pc}
   1ad3c:	20002adc 	.word	0x20002adc
   1ad40:	20002020 	.word	0x20002020

0001ad44 <get_io_capa>:
{
   1ad44:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ad46:	f7ff ffdf 	bl	1ad08 <latch_auth_cb>
	if (!smp_auth_cb) {
   1ad4a:	b1b8      	cbz	r0, 1ad7c <get_io_capa+0x38>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1ad4c:	6803      	ldr	r3, [r0, #0]
   1ad4e:	b143      	cbz	r3, 1ad62 <get_io_capa+0x1e>
   1ad50:	6842      	ldr	r2, [r0, #4]
   1ad52:	b132      	cbz	r2, 1ad62 <get_io_capa+0x1e>
   1ad54:	6882      	ldr	r2, [r0, #8]
   1ad56:	b912      	cbnz	r2, 1ad5e <get_io_capa+0x1a>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1ad58:	4a0b      	ldr	r2, [pc, #44]	; (1ad88 <get_io_capa+0x44>)
   1ad5a:	7812      	ldrb	r2, [r2, #0]
   1ad5c:	b93a      	cbnz	r2, 1ad6e <get_io_capa+0x2a>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1ad5e:	2004      	movs	r0, #4
   1ad60:	e00b      	b.n	1ad7a <get_io_capa+0x36>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1ad62:	4a09      	ldr	r2, [pc, #36]	; (1ad88 <get_io_capa+0x44>)
   1ad64:	7812      	ldrb	r2, [r2, #0]
   1ad66:	b112      	cbz	r2, 1ad6e <get_io_capa+0x2a>
   1ad68:	b10b      	cbz	r3, 1ad6e <get_io_capa+0x2a>
   1ad6a:	6882      	ldr	r2, [r0, #8]
   1ad6c:	b942      	cbnz	r2, 1ad80 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_entry) {
   1ad6e:	6842      	ldr	r2, [r0, #4]
   1ad70:	b942      	cbnz	r2, 1ad84 <get_io_capa+0x40>
		return BT_SMP_IO_DISPLAY_ONLY;
   1ad72:	2b00      	cmp	r3, #0
   1ad74:	bf0c      	ite	eq
   1ad76:	2003      	moveq	r0, #3
   1ad78:	2000      	movne	r0, #0
}
   1ad7a:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1ad7c:	2003      	movs	r0, #3
   1ad7e:	e7fc      	b.n	1ad7a <get_io_capa+0x36>
		return BT_SMP_IO_DISPLAY_YESNO;
   1ad80:	2001      	movs	r0, #1
   1ad82:	e7fa      	b.n	1ad7a <get_io_capa+0x36>
			return BT_SMP_IO_KEYBOARD_ONLY;
   1ad84:	2002      	movs	r0, #2
   1ad86:	e7f8      	b.n	1ad7a <get_io_capa+0x36>
   1ad88:	20003bac 	.word	0x20003bac

0001ad8c <get_auth>:
	if (sc_supported) {
   1ad8c:	4b0c      	ldr	r3, [pc, #48]	; (1adc0 <get_auth+0x34>)
   1ad8e:	781b      	ldrb	r3, [r3, #0]
{
   1ad90:	b510      	push	{r4, lr}
	if (sc_supported) {
   1ad92:	b17b      	cbz	r3, 1adb4 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   1ad94:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1ad98:	f7ff ffd4 	bl	1ad44 <get_io_capa>
	if (bondable) {
   1ad9c:	4b09      	ldr	r3, [pc, #36]	; (1adc4 <get_auth+0x38>)
   1ad9e:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1ada0:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   1ada2:	bf0c      	ite	eq
   1ada4:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1ada8:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1adac:	b12b      	cbz	r3, 1adba <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1adae:	f044 0001 	orr.w	r0, r4, #1
}
   1adb2:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1adb4:	f001 0407 	and.w	r4, r1, #7
   1adb8:	e7ee      	b.n	1ad98 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1adba:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1adbe:	e7f8      	b.n	1adb2 <get_auth+0x26>
   1adc0:	20003bac 	.word	0x20003bac
   1adc4:	200008f8 	.word	0x200008f8

0001adc8 <bt_smp_pkey_ready.part.0>:
	}

	return 0;
}

static void bt_smp_pkey_ready(const uint8_t *pkey)
   1adc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("");

	sc_public_key = pkey;

	if (!pkey) {
		BT_WARN("Public key not available");
   1adca:	4b06      	ldr	r3, [pc, #24]	; (1ade4 <bt_smp_pkey_ready.part.0+0x1c>)
   1adcc:	9305      	str	r3, [sp, #20]
   1adce:	4806      	ldr	r0, [pc, #24]	; (1ade8 <bt_smp_pkey_ready.part.0+0x20>)
   1add0:	2302      	movs	r3, #2
   1add2:	aa04      	add	r2, sp, #16
   1add4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1add8:	9304      	str	r3, [sp, #16]
   1adda:	f00d fdba 	bl	28952 <z_log_msg_static_create.constprop.0>
		if (err) {
			smp_error(smp, err);
		}
#endif /* CONFIG_BT_PERIPHERAL */
	}
}
   1adde:	b007      	add	sp, #28
   1ade0:	f85d fb04 	ldr.w	pc, [sp], #4
   1ade4:	0002d801 	.word	0x0002d801
   1ade8:	0002ac40 	.word	0x0002ac40

0001adec <smp_sign_buf>:
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const uint8_t *key, uint8_t *msg, uint16_t len)
{
   1adec:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
   1adee:	1d14      	adds	r4, r2, #4
{
   1adf0:	b091      	sub	sp, #68	; 0x44
   1adf2:	460d      	mov	r5, r1
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
   1adf4:	588b      	ldr	r3, [r1, r2]
   1adf6:	9301      	str	r3, [sp, #4]
{
   1adf8:	4606      	mov	r6, r0
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
   1adfa:	188f      	adds	r7, r1, r2
	sys_mem_swap(m, len + sizeof(cnt));
   1adfc:	4628      	mov	r0, r5
   1adfe:	4621      	mov	r1, r4
   1ae00:	f00d fcb3 	bl	2876a <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
   1ae04:	4631      	mov	r1, r6
   1ae06:	2210      	movs	r2, #16
   1ae08:	a802      	add	r0, sp, #8
   1ae0a:	f00d fca4 	bl	28756 <sys_memcpy_swap>

	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
   1ae0e:	ab06      	add	r3, sp, #24
   1ae10:	4622      	mov	r2, r4
   1ae12:	4629      	mov	r1, r5
   1ae14:	a802      	add	r0, sp, #8
   1ae16:	f00d fce1 	bl	287dc <bt_smp_aes_cmac>
	if (err) {
   1ae1a:	4606      	mov	r6, r0
   1ae1c:	b160      	cbz	r0, 1ae38 <smp_sign_buf+0x4c>
		BT_ERR("Data signing failed");
   1ae1e:	4b10      	ldr	r3, [pc, #64]	; (1ae60 <smp_sign_buf+0x74>)
   1ae20:	930f      	str	r3, [sp, #60]	; 0x3c
   1ae22:	4810      	ldr	r0, [pc, #64]	; (1ae64 <smp_sign_buf+0x78>)
   1ae24:	2302      	movs	r3, #2
   1ae26:	aa0e      	add	r2, sp, #56	; 0x38
   1ae28:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ae2c:	930e      	str	r3, [sp, #56]	; 0x38
   1ae2e:	f00d fd90 	bl	28952 <z_log_msg_static_create.constprop.0>
	memcpy(sig, tmp + 4, 12);

	BT_DBG("sig %s", bt_hex(sig, 12));

	return 0;
}
   1ae32:	4630      	mov	r0, r6
   1ae34:	b011      	add	sp, #68	; 0x44
   1ae36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_mem_swap(tmp, sizeof(tmp));
   1ae38:	a806      	add	r0, sp, #24
   1ae3a:	2110      	movs	r1, #16
   1ae3c:	f00d fc95 	bl	2876a <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
   1ae40:	2204      	movs	r2, #4
   1ae42:	eb0d 0102 	add.w	r1, sp, r2
   1ae46:	a807      	add	r0, sp, #28
   1ae48:	f00b ff66 	bl	26d18 <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
   1ae4c:	4621      	mov	r1, r4
   1ae4e:	4628      	mov	r0, r5
   1ae50:	f00d fc8b 	bl	2876a <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
   1ae54:	220c      	movs	r2, #12
   1ae56:	a907      	add	r1, sp, #28
   1ae58:	4638      	mov	r0, r7
   1ae5a:	f00b ff5d 	bl	26d18 <memcpy>
	return 0;
   1ae5e:	e7e8      	b.n	1ae32 <smp_sign_buf+0x46>
   1ae60:	0002d81a 	.word	0x0002d81a
   1ae64:	0002ac40 	.word	0x0002ac40

0001ae68 <bt_smp_accept.part.0>:
	} else {
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1ae68:	b580      	push	{r7, lr}
   1ae6a:	af00      	add	r7, sp, #0
		*chan = &smp->chan.chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   1ae6c:	b088      	sub	sp, #32
   1ae6e:	466a      	mov	r2, sp
   1ae70:	4b07      	ldr	r3, [pc, #28]	; (1ae90 <bt_smp_accept.part.0+0x28>)
   1ae72:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ae76:	2303      	movs	r3, #3
   1ae78:	f842 3f10 	str.w	r3, [r2, #16]!
   1ae7c:	4805      	ldr	r0, [pc, #20]	; (1ae94 <bt_smp_accept.part.0+0x2c>)
   1ae7e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ae82:	f00d fd66 	bl	28952 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   1ae86:	f06f 000b 	mvn.w	r0, #11
   1ae8a:	46bd      	mov	sp, r7
   1ae8c:	bd80      	pop	{r7, pc}
   1ae8e:	bf00      	nop
   1ae90:	0002d82e 	.word	0x0002d82e
   1ae94:	0002ac40 	.word	0x0002ac40

0001ae98 <bt_smp_accept>:
		if (smp->chan.chan.conn) {
   1ae98:	4b06      	ldr	r3, [pc, #24]	; (1aeb4 <bt_smp_accept+0x1c>)
   1ae9a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   1ae9e:	b10a      	cbz	r2, 1aea4 <bt_smp_accept+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1aea0:	f7ff bfe2 	b.w	1ae68 <bt_smp_accept.part.0>
		smp->chan.chan.ops = &ops;
   1aea4:	4804      	ldr	r0, [pc, #16]	; (1aeb8 <bt_smp_accept+0x20>)
   1aea6:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
		*chan = &smp->chan.chan;
   1aeaa:	33ec      	adds	r3, #236	; 0xec
   1aeac:	600b      	str	r3, [r1, #0]
}
   1aeae:	4610      	mov	r0, r2
   1aeb0:	4770      	bx	lr
   1aeb2:	bf00      	nop
   1aeb4:	20002020 	.word	0x20002020
   1aeb8:	0002b6bc 	.word	0x0002b6bc

0001aebc <smp_chan_get.part.0>:
static struct bt_smp *smp_chan_get(struct bt_conn *conn)
   1aebc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_ERR("Unable to find SMP channel");
   1aebe:	4b07      	ldr	r3, [pc, #28]	; (1aedc <smp_chan_get.part.0+0x20>)
   1aec0:	9305      	str	r3, [sp, #20]
   1aec2:	4807      	ldr	r0, [pc, #28]	; (1aee0 <smp_chan_get.part.0+0x24>)
   1aec4:	2302      	movs	r3, #2
   1aec6:	aa04      	add	r2, sp, #16
   1aec8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1aecc:	9304      	str	r3, [sp, #16]
   1aece:	f00d fd40 	bl	28952 <z_log_msg_static_create.constprop.0>
}
   1aed2:	2000      	movs	r0, #0
   1aed4:	b007      	add	sp, #28
   1aed6:	f85d fb04 	ldr.w	pc, [sp], #4
   1aeda:	bf00      	nop
   1aedc:	0002d853 	.word	0x0002d853
   1aee0:	0002ac40 	.word	0x0002ac40

0001aee4 <smp_init>:
{
   1aee4:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1aee6:	22ec      	movs	r2, #236	; 0xec
{
   1aee8:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1aeea:	2100      	movs	r1, #0
   1aeec:	f00b ff1f 	bl	26d2e <memset>
	if (bt_rand(smp->prnd, 16)) {
   1aef0:	2110      	movs	r1, #16
   1aef2:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1aef6:	f004 fc0d 	bl	1f714 <bt_rand>
   1aefa:	4604      	mov	r4, r0
   1aefc:	b948      	cbnz	r0, 1af12 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1aefe:	2105      	movs	r1, #5
   1af00:	4628      	mov	r0, r5
   1af02:	f00d fd34 	bl	2896e <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1af06:	f7fc fa5f 	bl	173c8 <bt_pub_key_get>
   1af0a:	4b03      	ldr	r3, [pc, #12]	; (1af18 <smp_init+0x34>)
   1af0c:	6018      	str	r0, [r3, #0]
}
   1af0e:	4620      	mov	r0, r4
   1af10:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1af12:	2408      	movs	r4, #8
   1af14:	e7fb      	b.n	1af0e <smp_init+0x2a>
   1af16:	bf00      	nop
   1af18:	20002c4c 	.word	0x20002c4c

0001af1c <smp_dhkey_generate>:
{
   1af1c:	b530      	push	{r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1af1e:	1d05      	adds	r5, r0, #4
{
   1af20:	b087      	sub	sp, #28
   1af22:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1af24:	2108      	movs	r1, #8
   1af26:	4628      	mov	r0, r5
   1af28:	f00d fd21 	bl	2896e <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1af2c:	490b      	ldr	r1, [pc, #44]	; (1af5c <smp_dhkey_generate+0x40>)
   1af2e:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1af32:	f7fc fa59 	bl	173e8 <bt_dh_key_gen>
	if (err) {
   1af36:	b170      	cbz	r0, 1af56 <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1af38:	2108      	movs	r1, #8
   1af3a:	4628      	mov	r0, r5
   1af3c:	f00d fcdd 	bl	288fa <atomic_clear_bit>
		BT_ERR("Failed to generate DHKey");
   1af40:	4b07      	ldr	r3, [pc, #28]	; (1af60 <smp_dhkey_generate+0x44>)
   1af42:	4808      	ldr	r0, [pc, #32]	; (1af64 <smp_dhkey_generate+0x48>)
   1af44:	9305      	str	r3, [sp, #20]
   1af46:	aa04      	add	r2, sp, #16
   1af48:	2302      	movs	r3, #2
   1af4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1af4e:	9304      	str	r3, [sp, #16]
   1af50:	f00d fcff 	bl	28952 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1af54:	2008      	movs	r0, #8
}
   1af56:	b007      	add	sp, #28
   1af58:	bd30      	pop	{r4, r5, pc}
   1af5a:	bf00      	nop
   1af5c:	00028e2b 	.word	0x00028e2b
   1af60:	0002d86e 	.word	0x0002d86e
   1af64:	0002ac40 	.word	0x0002ac40

0001af68 <smp_ident_info>:
{
   1af68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1af6a:	4604      	mov	r4, r0
   1af6c:	af00      	add	r7, sp, #0
   1af6e:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1af70:	3004      	adds	r0, #4
   1af72:	210d      	movs	r1, #13
   1af74:	f00d fc08 	bl	28788 <atomic_test_bit>
   1af78:	b330      	cbz	r0, 1afc8 <smp_ident_info+0x60>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1af7a:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1af7c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1af80:	f103 0588 	add.w	r5, r3, #136	; 0x88
   1af84:	7a19      	ldrb	r1, [r3, #8]
   1af86:	462a      	mov	r2, r5
   1af88:	2002      	movs	r0, #2
   1af8a:	f00d ffe9 	bl	28f60 <bt_keys_get_type>
		if (!keys) {
   1af8e:	b9b0      	cbnz	r0, 1afbe <smp_ident_info+0x56>
			BT_ERR("Unable to get keys for %s",
   1af90:	4628      	mov	r0, r5
   1af92:	f7f9 fe7d 	bl	14c90 <bt_addr_le_str_real>
   1af96:	466c      	mov	r4, sp
   1af98:	b088      	sub	sp, #32
   1af9a:	466a      	mov	r2, sp
   1af9c:	4b0d      	ldr	r3, [pc, #52]	; (1afd4 <smp_ident_info+0x6c>)
   1af9e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1afa2:	2302      	movs	r3, #2
   1afa4:	7713      	strb	r3, [r2, #28]
   1afa6:	4b0c      	ldr	r3, [pc, #48]	; (1afd8 <smp_ident_info+0x70>)
   1afa8:	480c      	ldr	r0, [pc, #48]	; (1afdc <smp_ident_info+0x74>)
   1afaa:	f842 3f10 	str.w	r3, [r2, #16]!
   1afae:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1afb2:	f00d fcce 	bl	28952 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1afb6:	2008      	movs	r0, #8
   1afb8:	46a5      	mov	sp, r4
}
   1afba:	46bd      	mov	sp, r7
   1afbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->irk.val, req->irk, 16);
   1afbe:	2210      	movs	r2, #16
   1afc0:	4631      	mov	r1, r6
   1afc2:	302a      	adds	r0, #42	; 0x2a
   1afc4:	f00b fea8 	bl	26d18 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1afc8:	4620      	mov	r0, r4
   1afca:	2109      	movs	r1, #9
   1afcc:	f00d fccf 	bl	2896e <atomic_set_bit>
	return 0;
   1afd0:	2000      	movs	r0, #0
   1afd2:	e7f2      	b.n	1afba <smp_ident_info+0x52>
   1afd4:	0002d887 	.word	0x0002d887
   1afd8:	01000003 	.word	0x01000003
   1afdc:	0002ac40 	.word	0x0002ac40

0001afe0 <smp_encrypt_info>:
{
   1afe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1afe2:	4604      	mov	r4, r0
   1afe4:	af00      	add	r7, sp, #0
   1afe6:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1afe8:	3004      	adds	r0, #4
   1afea:	210d      	movs	r1, #13
   1afec:	f00d fbcc 	bl	28788 <atomic_test_bit>
   1aff0:	b330      	cbz	r0, 1b040 <smp_encrypt_info+0x60>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1aff2:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1aff4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1aff8:	f103 0588 	add.w	r5, r3, #136	; 0x88
   1affc:	7a19      	ldrb	r1, [r3, #8]
   1affe:	462a      	mov	r2, r5
   1b000:	2004      	movs	r0, #4
   1b002:	f00d ffad 	bl	28f60 <bt_keys_get_type>
		if (!keys) {
   1b006:	b9b0      	cbnz	r0, 1b036 <smp_encrypt_info+0x56>
			BT_ERR("Unable to get keys for %s",
   1b008:	4628      	mov	r0, r5
   1b00a:	f7f9 fe41 	bl	14c90 <bt_addr_le_str_real>
   1b00e:	466c      	mov	r4, sp
   1b010:	b088      	sub	sp, #32
   1b012:	466a      	mov	r2, sp
   1b014:	4b0d      	ldr	r3, [pc, #52]	; (1b04c <smp_encrypt_info+0x6c>)
   1b016:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b01a:	2302      	movs	r3, #2
   1b01c:	7713      	strb	r3, [r2, #28]
   1b01e:	4b0c      	ldr	r3, [pc, #48]	; (1b050 <smp_encrypt_info+0x70>)
   1b020:	480c      	ldr	r0, [pc, #48]	; (1b054 <smp_encrypt_info+0x74>)
   1b022:	f842 3f10 	str.w	r3, [r2, #16]!
   1b026:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1b02a:	f00d fc92 	bl	28952 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1b02e:	2008      	movs	r0, #8
   1b030:	46a5      	mov	sp, r4
}
   1b032:	46bd      	mov	sp, r7
   1b034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   1b036:	2210      	movs	r2, #16
   1b038:	4631      	mov	r1, r6
   1b03a:	301a      	adds	r0, #26
   1b03c:	f00b fe6c 	bl	26d18 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1b040:	4620      	mov	r0, r4
   1b042:	2107      	movs	r1, #7
   1b044:	f00d fc93 	bl	2896e <atomic_set_bit>
	return 0;
   1b048:	2000      	movs	r0, #0
   1b04a:	e7f2      	b.n	1b032 <smp_encrypt_info+0x52>
   1b04c:	0002d887 	.word	0x0002d887
   1b050:	01000003 	.word	0x01000003
   1b054:	0002ac40 	.word	0x0002ac40

0001b058 <smp_pairing_req>:
{
   1b058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b05c:	460d      	mov	r5, r1
   1b05e:	b087      	sub	sp, #28
   1b060:	af00      	add	r7, sp, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   1b062:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   1b066:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b068:	f7ff fe4e 	bl	1ad08 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   1b06c:	68ad      	ldr	r5, [r5, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1b06e:	78eb      	ldrb	r3, [r5, #3]
   1b070:	3b07      	subs	r3, #7
   1b072:	2b09      	cmp	r3, #9
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b074:	4681      	mov	r9, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1b076:	d905      	bls.n	1b084 <smp_pairing_req+0x2c>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1b078:	2506      	movs	r5, #6
}
   1b07a:	4628      	mov	r0, r5
   1b07c:	371c      	adds	r7, #28
   1b07e:	46bd      	mov	sp, r7
   1b080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   1b084:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
   1b088:	b15b      	cbz	r3, 1b0a2 <smp_pairing_req+0x4a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1b08a:	1d26      	adds	r6, r4, #4
   1b08c:	210f      	movs	r1, #15
   1b08e:	4630      	mov	r0, r6
   1b090:	f00d fb7a 	bl	28788 <atomic_test_bit>
   1b094:	b988      	cbnz	r0, 1b0ba <smp_pairing_req+0x62>
		int ret = smp_init(smp);
   1b096:	4620      	mov	r0, r4
   1b098:	f7ff ff24 	bl	1aee4 <smp_init>
		if (ret) {
   1b09c:	b168      	cbz	r0, 1b0ba <smp_pairing_req+0x62>
			return ret;
   1b09e:	b2c5      	uxtb	r5, r0
   1b0a0:	e7eb      	b.n	1b07a <smp_pairing_req+0x22>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1b0a2:	f898 0008 	ldrb.w	r0, [r8, #8]
   1b0a6:	f108 0188 	add.w	r1, r8, #136	; 0x88
   1b0aa:	f001 fcb3 	bl	1ca14 <bt_keys_get_addr>
   1b0ae:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
		if (!conn->le.keys) {
   1b0b2:	2800      	cmp	r0, #0
   1b0b4:	d1e9      	bne.n	1b08a <smp_pairing_req+0x32>
	switch (sec) {
   1b0b6:	2508      	movs	r5, #8
   1b0b8:	e7df      	b.n	1b07a <smp_pairing_req+0x22>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1b0ba:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   1b0bc:	2206      	movs	r2, #6
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1b0be:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1b0c0:	4629      	mov	r1, r5
   1b0c2:	f104 000a 	add.w	r0, r4, #10
   1b0c6:	f00b fe27 	bl	26d18 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1b0ca:	2302      	movs	r3, #2
   1b0cc:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1b0ce:	78a9      	ldrb	r1, [r5, #2]
   1b0d0:	4620      	mov	r0, r4
   1b0d2:	f7ff fe5b 	bl	1ad8c <get_auth>
   1b0d6:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   1b0d8:	4620      	mov	r0, r4
   1b0da:	f7ff fe33 	bl	1ad44 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1b0de:	4ba9      	ldr	r3, [pc, #676]	; (1b384 <smp_pairing_req+0x32c>)
	rsp->io_capability = get_io_capa(smp);
   1b0e0:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1b0e2:	781b      	ldrb	r3, [r3, #0]
   1b0e4:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1b0e6:	2310      	movs	r3, #16
   1b0e8:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1b0ea:	792b      	ldrb	r3, [r5, #4]
   1b0ec:	f003 0307 	and.w	r3, r3, #7
   1b0f0:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1b0f2:	796b      	ldrb	r3, [r5, #5]
   1b0f4:	f003 0307 	and.w	r3, r3, #7
   1b0f8:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1b0fa:	7ce3      	ldrb	r3, [r4, #19]
   1b0fc:	0718      	lsls	r0, r3, #28
   1b0fe:	d50e      	bpl.n	1b11e <smp_pairing_req+0xc6>
   1b100:	78ab      	ldrb	r3, [r5, #2]
   1b102:	0719      	lsls	r1, r3, #28
   1b104:	d50b      	bpl.n	1b11e <smp_pairing_req+0xc6>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1b106:	2105      	movs	r1, #5
   1b108:	4630      	mov	r0, r6
   1b10a:	f00d fc30 	bl	2896e <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1b10e:	7d63      	ldrb	r3, [r4, #21]
   1b110:	f003 0306 	and.w	r3, r3, #6
   1b114:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1b116:	7da3      	ldrb	r3, [r4, #22]
   1b118:	f003 0306 	and.w	r3, r3, #6
   1b11c:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1b11e:	7ce3      	ldrb	r3, [r4, #19]
   1b120:	069a      	lsls	r2, r3, #26
   1b122:	d506      	bpl.n	1b132 <smp_pairing_req+0xda>
   1b124:	78ab      	ldrb	r3, [r5, #2]
   1b126:	069b      	lsls	r3, r3, #26
   1b128:	d503      	bpl.n	1b132 <smp_pairing_req+0xda>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1b12a:	2114      	movs	r1, #20
   1b12c:	4630      	mov	r0, r6
   1b12e:	f00d fc1e 	bl	2896e <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1b132:	7da3      	ldrb	r3, [r4, #22]
   1b134:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1b138:	7d63      	ldrb	r3, [r4, #21]
   1b13a:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1b13e:	7ce3      	ldrb	r3, [r4, #19]
   1b140:	07d8      	lsls	r0, r3, #31
   1b142:	d506      	bpl.n	1b152 <smp_pairing_req+0xfa>
   1b144:	78ab      	ldrb	r3, [r5, #2]
   1b146:	07d9      	lsls	r1, r3, #31
   1b148:	d503      	bpl.n	1b152 <smp_pairing_req+0xfa>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1b14a:	210d      	movs	r1, #13
   1b14c:	4630      	mov	r0, r6
   1b14e:	f00d fc0e 	bl	2896e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1b152:	2103      	movs	r1, #3
   1b154:	4630      	mov	r0, r6
   1b156:	f00d fc0a 	bl	2896e <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b15a:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1b15c:	782d      	ldrb	r5, [r5, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b15e:	f00d fb13 	bl	28788 <atomic_test_bit>
   1b162:	bb30      	cbnz	r0, 1b1b2 <smp_pairing_req+0x15a>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1b164:	2d04      	cmp	r5, #4
   1b166:	d843      	bhi.n	1b1f0 <smp_pairing_req+0x198>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1b168:	7ca2      	ldrb	r2, [r4, #18]
   1b16a:	7ae3      	ldrb	r3, [r4, #11]
   1b16c:	4013      	ands	r3, r2
   1b16e:	07da      	lsls	r2, r3, #31
   1b170:	d43c      	bmi.n	1b1ec <smp_pairing_req+0x194>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1b172:	7b21      	ldrb	r1, [r4, #12]
   1b174:	7ce0      	ldrb	r0, [r4, #19]
   1b176:	4301      	orrs	r1, r0
   1b178:	f011 0104 	ands.w	r1, r1, #4
   1b17c:	d010      	beq.n	1b1a0 <smp_pairing_req+0x148>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1b17e:	4620      	mov	r0, r4
   1b180:	f7ff fde0 	bl	1ad44 <get_io_capa>
   1b184:	4b80      	ldr	r3, [pc, #512]	; (1b388 <smp_pairing_req+0x330>)
   1b186:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1b18a:	441d      	add	r5, r3
   1b18c:	5c29      	ldrb	r1, [r5, r0]
	if (method == PASSKEY_ROLE) {
   1b18e:	2904      	cmp	r1, #4
   1b190:	d106      	bne.n	1b1a0 <smp_pairing_req+0x148>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1b192:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1b196:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   1b198:	2b00      	cmp	r3, #0
   1b19a:	bf0c      	ite	eq
   1b19c:	2102      	moveq	r1, #2
   1b19e:	2101      	movne	r1, #1
	smp->method = get_pair_method(smp, req->io_capability);
   1b1a0:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1b1a2:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
   1b1a6:	4620      	mov	r0, r4
   1b1a8:	f00d faf7 	bl	2879a <update_keys_check>
   1b1ac:	bb10      	cbnz	r0, 1b1f4 <smp_pairing_req+0x19c>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1b1ae:	2503      	movs	r5, #3
   1b1b0:	e763      	b.n	1b07a <smp_pairing_req+0x22>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1b1b2:	7b20      	ldrb	r0, [r4, #12]
   1b1b4:	7ce2      	ldrb	r2, [r4, #19]
   1b1b6:	ea00 0302 	and.w	r3, r0, r2
   1b1ba:	071b      	lsls	r3, r3, #28
   1b1bc:	d506      	bpl.n	1b1cc <smp_pairing_req+0x174>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1b1be:	7ae3      	ldrb	r3, [r4, #11]
   1b1c0:	f894 c012 	ldrb.w	ip, [r4, #18]
   1b1c4:	ea43 030c 	orr.w	r3, r3, ip
   1b1c8:	07db      	lsls	r3, r3, #31
   1b1ca:	d4e9      	bmi.n	1b1a0 <smp_pairing_req+0x148>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1b1cc:	2d04      	cmp	r5, #4
   1b1ce:	d80f      	bhi.n	1b1f0 <smp_pairing_req+0x198>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1b1d0:	ea40 0102 	orr.w	r1, r0, r2
   1b1d4:	f011 0104 	ands.w	r1, r1, #4
   1b1d8:	d0e2      	beq.n	1b1a0 <smp_pairing_req+0x148>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1b1da:	4620      	mov	r0, r4
   1b1dc:	f7ff fdb2 	bl	1ad44 <get_io_capa>
   1b1e0:	4b6a      	ldr	r3, [pc, #424]	; (1b38c <smp_pairing_req+0x334>)
   1b1e2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1b1e6:	441d      	add	r5, r3
   1b1e8:	5c29      	ldrb	r1, [r5, r0]
   1b1ea:	e7d9      	b.n	1b1a0 <smp_pairing_req+0x148>
		return LEGACY_OOB;
   1b1ec:	2106      	movs	r1, #6
   1b1ee:	e7d7      	b.n	1b1a0 <smp_pairing_req+0x148>
		return JUST_WORKS;
   1b1f0:	2100      	movs	r1, #0
   1b1f2:	e7d5      	b.n	1b1a0 <smp_pairing_req+0x148>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1b1f4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1b1f8:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1b1fa:	2b03      	cmp	r3, #3
   1b1fc:	d03e      	beq.n	1b27c <smp_pairing_req+0x224>
   1b1fe:	d82c      	bhi.n	1b25a <smp_pairing_req+0x202>
   1b200:	3b01      	subs	r3, #1
   1b202:	2b01      	cmp	r3, #1
   1b204:	f63f af57 	bhi.w	1b0b6 <smp_pairing_req+0x5e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b208:	2105      	movs	r1, #5
   1b20a:	4630      	mov	r0, r6
   1b20c:	f00d fabc 	bl	28788 <atomic_test_bit>
   1b210:	2800      	cmp	r0, #0
   1b212:	f040 80c5 	bne.w	1b3a0 <smp_pairing_req+0x348>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b216:	4620      	mov	r0, r4
   1b218:	f7ff fd76 	bl	1ad08 <latch_auth_cb>
   1b21c:	4680      	mov	r8, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b21e:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1b220:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b224:	f7ff fd70 	bl	1ad08 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1b228:	f109 0188 	add.w	r1, r9, #136	; 0x88
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b22c:	4605      	mov	r5, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1b22e:	f899 0008 	ldrb.w	r0, [r9, #8]
   1b232:	f001 fcb3 	bl	1cb9c <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1b236:	7a23      	ldrb	r3, [r4, #8]
   1b238:	b320      	cbz	r0, 1b284 <smp_pairing_req+0x22c>
   1b23a:	7b42      	ldrb	r2, [r0, #13]
   1b23c:	07d2      	lsls	r2, r2, #31
   1b23e:	d521      	bpl.n	1b284 <smp_pairing_req+0x22c>
   1b240:	bb03      	cbnz	r3, 1b284 <smp_pairing_req+0x22c>
		BT_ERR("JustWorks failed, authenticated keys present");
   1b242:	4b53      	ldr	r3, [pc, #332]	; (1b390 <smp_pairing_req+0x338>)
   1b244:	617b      	str	r3, [r7, #20]
   1b246:	4853      	ldr	r0, [pc, #332]	; (1b394 <smp_pairing_req+0x33c>)
   1b248:	2302      	movs	r3, #2
   1b24a:	f107 0210 	add.w	r2, r7, #16
   1b24e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b252:	613b      	str	r3, [r7, #16]
   1b254:	f00d fb7d 	bl	28952 <z_log_msg_static_create.constprop.0>
	if (ret) {
   1b258:	e72d      	b.n	1b0b6 <smp_pairing_req+0x5e>
	switch (sec) {
   1b25a:	2b04      	cmp	r3, #4
   1b25c:	f47f af2b 	bne.w	1b0b6 <smp_pairing_req+0x5e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1b260:	7d23      	ldrb	r3, [r4, #20]
   1b262:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1b264:	4293      	cmp	r3, r2
   1b266:	bf28      	it	cs
   1b268:	4613      	movcs	r3, r2
   1b26a:	2b10      	cmp	r3, #16
   1b26c:	f47f af04 	bne.w	1b078 <smp_pairing_req+0x20>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b270:	2105      	movs	r1, #5
   1b272:	4630      	mov	r0, r6
   1b274:	f00d fa88 	bl	28788 <atomic_test_bit>
   1b278:	2800      	cmp	r0, #0
   1b27a:	d098      	beq.n	1b1ae <smp_pairing_req+0x156>
		if (smp->method == JUST_WORKS) {
   1b27c:	7a23      	ldrb	r3, [r4, #8]
   1b27e:	2b00      	cmp	r3, #0
   1b280:	d1c2      	bne.n	1b208 <smp_pairing_req+0x1b0>
   1b282:	e794      	b.n	1b1ae <smp_pairing_req+0x156>
	switch (smp->method) {
   1b284:	2b06      	cmp	r3, #6
   1b286:	d85f      	bhi.n	1b348 <smp_pairing_req+0x2f0>
   1b288:	e8df f003 	tbb	[pc, r3]
   1b28c:	5e2f5617 	.word	0x5e2f5617
   1b290:	5e5e      	.short	0x5e5e
   1b292:	04          	.byte	0x04
   1b293:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1b294:	2d00      	cmp	r5, #0
   1b296:	d067      	beq.n	1b368 <smp_pairing_req+0x310>
   1b298:	68eb      	ldr	r3, [r5, #12]
   1b29a:	2b00      	cmp	r3, #0
   1b29c:	d064      	beq.n	1b368 <smp_pairing_req+0x310>
			struct bt_conn_oob_info info = {
   1b29e:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b2a0:	210a      	movs	r1, #10
   1b2a2:	4630      	mov	r0, r6
			struct bt_conn_oob_info info = {
   1b2a4:	803b      	strh	r3, [r7, #0]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b2a6:	f00d fb62 	bl	2896e <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1b2aa:	68eb      	ldr	r3, [r5, #12]
   1b2ac:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1b2b0:	4639      	mov	r1, r7
   1b2b2:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1b2b4:	7a23      	ldrb	r3, [r4, #8]
   1b2b6:	2b00      	cmp	r3, #0
   1b2b8:	d158      	bne.n	1b36c <smp_pairing_req+0x314>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1b2ba:	210f      	movs	r1, #15
   1b2bc:	4630      	mov	r0, r6
   1b2be:	f00d fa63 	bl	28788 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1b2c2:	4605      	mov	r5, r0
   1b2c4:	2800      	cmp	r0, #0
   1b2c6:	d151      	bne.n	1b36c <smp_pairing_req+0x314>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1b2c8:	f1b8 0f00 	cmp.w	r8, #0
   1b2cc:	d04e      	beq.n	1b36c <smp_pairing_req+0x314>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1b2ce:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1b2d2:	2b00      	cmp	r3, #0
   1b2d4:	d04a      	beq.n	1b36c <smp_pairing_req+0x314>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b2d6:	4630      	mov	r0, r6
   1b2d8:	210a      	movs	r1, #10
   1b2da:	f00d fb48 	bl	2896e <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   1b2de:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1b2e2:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1b2e6:	4798      	blx	r3
		return 0;
   1b2e8:	e6c7      	b.n	1b07a <smp_pairing_req+0x22>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1b2ea:	2104      	movs	r1, #4
   1b2ec:	4638      	mov	r0, r7
   1b2ee:	f004 fa11 	bl	1f714 <bt_rand>
   1b2f2:	2800      	cmp	r0, #0
   1b2f4:	f47f aedf 	bne.w	1b0b6 <smp_pairing_req+0x5e>
			passkey %= 1000000;
   1b2f8:	683b      	ldr	r3, [r7, #0]
   1b2fa:	4a27      	ldr	r2, [pc, #156]	; (1b398 <smp_pairing_req+0x340>)
   1b2fc:	fbb3 f1f2 	udiv	r1, r3, r2
   1b300:	fb02 3311 	mls	r3, r2, r1, r3
   1b304:	603b      	str	r3, [r7, #0]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1b306:	b14d      	cbz	r5, 1b31c <smp_pairing_req+0x2c4>
   1b308:	682b      	ldr	r3, [r5, #0]
   1b30a:	b13b      	cbz	r3, 1b31c <smp_pairing_req+0x2c4>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1b30c:	210b      	movs	r1, #11
   1b30e:	4630      	mov	r0, r6
   1b310:	f00d fb2d 	bl	2896e <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   1b314:	682b      	ldr	r3, [r5, #0]
   1b316:	6839      	ldr	r1, [r7, #0]
   1b318:	4648      	mov	r0, r9
   1b31a:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1b31c:	683b      	ldr	r3, [r7, #0]
	dst[0] = val;
   1b31e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1b322:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1b326:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1b328:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1b32c:	0a1b      	lsrs	r3, r3, #8
   1b32e:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1b332:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1b336:	e7bd      	b.n	1b2b4 <smp_pairing_req+0x25c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b338:	4630      	mov	r0, r6
   1b33a:	210a      	movs	r1, #10
   1b33c:	f00d fb17 	bl	2896e <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1b340:	686b      	ldr	r3, [r5, #4]
   1b342:	4648      	mov	r0, r9
   1b344:	4798      	blx	r3
	if (ret) {
   1b346:	e7b5      	b.n	1b2b4 <smp_pairing_req+0x25c>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b348:	466c      	mov	r4, sp
   1b34a:	b088      	sub	sp, #32
   1b34c:	466a      	mov	r2, sp
   1b34e:	4913      	ldr	r1, [pc, #76]	; (1b39c <smp_pairing_req+0x344>)
   1b350:	4810      	ldr	r0, [pc, #64]	; (1b394 <smp_pairing_req+0x33c>)
	switch (smp->method) {
   1b352:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b356:	2303      	movs	r3, #3
   1b358:	f842 3f10 	str.w	r3, [r2, #16]!
   1b35c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b360:	f00d faf7 	bl	28952 <z_log_msg_static_create.constprop.0>
   1b364:	46a5      	mov	sp, r4
	if (ret) {
   1b366:	e6a6      	b.n	1b0b6 <smp_pairing_req+0x5e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1b368:	2502      	movs	r5, #2
   1b36a:	e686      	b.n	1b07a <smp_pairing_req+0x22>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1b36c:	2103      	movs	r1, #3
   1b36e:	4620      	mov	r0, r4
   1b370:	f00d fafd 	bl	2896e <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1b374:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1b376:	f00d fafa 	bl	2896e <atomic_set_bit>
	return send_pairing_rsp(smp);
   1b37a:	f00d fb2b 	bl	289d4 <send_pairing_rsp>
   1b37e:	4605      	mov	r5, r0
   1b380:	e67b      	b.n	1b07a <smp_pairing_req+0x22>
   1b382:	bf00      	nop
   1b384:	20003bab 	.word	0x20003bab
   1b388:	0002dc22 	.word	0x0002dc22
   1b38c:	0002dc3b 	.word	0x0002dc3b
   1b390:	0002d8a1 	.word	0x0002d8a1
   1b394:	0002ac40 	.word	0x0002ac40
   1b398:	000f4240 	.word	0x000f4240
   1b39c:	0002d8ce 	.word	0x0002d8ce
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1b3a0:	7a25      	ldrb	r5, [r4, #8]
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1b3a2:	b995      	cbnz	r5, 1b3ca <smp_pairing_req+0x372>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1b3a4:	210f      	movs	r1, #15
   1b3a6:	4630      	mov	r0, r6
   1b3a8:	f00d f9ee 	bl	28788 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1b3ac:	b968      	cbnz	r0, 1b3ca <smp_pairing_req+0x372>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1b3ae:	f1b9 0f00 	cmp.w	r9, #0
   1b3b2:	d00a      	beq.n	1b3ca <smp_pairing_req+0x372>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1b3b4:	f8d9 3014 	ldr.w	r3, [r9, #20]
   1b3b8:	b13b      	cbz	r3, 1b3ca <smp_pairing_req+0x372>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b3ba:	4630      	mov	r0, r6
   1b3bc:	210a      	movs	r1, #10
   1b3be:	f00d fad6 	bl	2896e <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1b3c2:	f8d9 3014 	ldr.w	r3, [r9, #20]
   1b3c6:	4640      	mov	r0, r8
   1b3c8:	e78d      	b.n	1b2e6 <smp_pairing_req+0x28e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1b3ca:	210c      	movs	r1, #12
   1b3cc:	4620      	mov	r0, r4
   1b3ce:	e7d2      	b.n	1b376 <smp_pairing_req+0x31e>

0001b3d0 <compute_and_check_and_send_periph_dhcheck>:
{
   1b3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3d4:	b0a3      	sub	sp, #140	; 0x8c
   1b3d6:	4604      	mov	r4, r0
   1b3d8:	af04      	add	r7, sp, #16
	(void)memset(r, 0, sizeof(r));
   1b3da:	2210      	movs	r2, #16
   1b3dc:	2100      	movs	r1, #0
   1b3de:	4638      	mov	r0, r7
   1b3e0:	f00b fca5 	bl	26d2e <memset>
	switch (smp->method) {
   1b3e4:	7a23      	ldrb	r3, [r4, #8]
   1b3e6:	2b05      	cmp	r3, #5
   1b3e8:	f200 80a0 	bhi.w	1b52c <compute_and_check_and_send_periph_dhcheck+0x15c>
   1b3ec:	e8df f003 	tbb	[pc, r3]
   1b3f0:	09030309 	.word	0x09030309
   1b3f4:	979e      	.short	0x979e
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1b3f6:	2204      	movs	r2, #4
   1b3f8:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1b3fc:	4638      	mov	r0, r7
   1b3fe:	f00b fc8b 	bl	26d18 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   1b402:	4b79      	ldr	r3, [pc, #484]	; (1b5e8 <compute_and_check_and_send_periph_dhcheck+0x218>)
		   &smp->chan.chan.conn->le.init_addr,
   1b404:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	uint8_t m[53] = { 0x00, /* counter */
   1b408:	f107 0240 	add.w	r2, r7, #64	; 0x40
   1b40c:	f103 0c30 	add.w	ip, r3, #48	; 0x30
   1b410:	4691      	mov	r9, r2
   1b412:	6818      	ldr	r0, [r3, #0]
   1b414:	6859      	ldr	r1, [r3, #4]
   1b416:	4615      	mov	r5, r2
   1b418:	c503      	stmia	r5!, {r0, r1}
   1b41a:	3308      	adds	r3, #8
   1b41c:	4563      	cmp	r3, ip
   1b41e:	462a      	mov	r2, r5
   1b420:	d1f7      	bne.n	1b412 <compute_and_check_and_send_periph_dhcheck+0x42>
   1b422:	6818      	ldr	r0, [r3, #0]
   1b424:	791b      	ldrb	r3, [r3, #4]
   1b426:	6028      	str	r0, [r5, #0]
	sys_memcpy_swap(ws, w, 32);
   1b428:	f107 0820 	add.w	r8, r7, #32
	uint8_t m[53] = { 0x00, /* counter */
   1b42c:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   1b42e:	2220      	movs	r2, #32
   1b430:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1b434:	4640      	mov	r0, r8
   1b436:	f00d f98e 	bl	28756 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1b43a:	486c      	ldr	r0, [pc, #432]	; (1b5ec <compute_and_check_and_send_periph_dhcheck+0x21c>)
   1b43c:	f107 0310 	add.w	r3, r7, #16
   1b440:	2220      	movs	r2, #32
   1b442:	4641      	mov	r1, r8
   1b444:	f00d f9ca 	bl	287dc <bt_smp_aes_cmac>
	if (err) {
   1b448:	2800      	cmp	r0, #0
   1b44a:	f040 80ca 	bne.w	1b5e2 <compute_and_check_and_send_periph_dhcheck+0x212>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1b44e:	f104 0a37 	add.w	sl, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   1b452:	2210      	movs	r2, #16
   1b454:	4651      	mov	r1, sl
   1b456:	f107 0045 	add.w	r0, r7, #69	; 0x45
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1b45a:	f104 0b27 	add.w	fp, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   1b45e:	f00d f97a 	bl	28756 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1b462:	2210      	movs	r2, #16
   1b464:	4659      	mov	r1, fp
   1b466:	f107 0055 	add.w	r0, r7, #85	; 0x55
   1b46a:	f00d f974 	bl	28756 <sys_memcpy_swap>
	m[37] = a1->type;
   1b46e:	f896 308f 	ldrb.w	r3, [r6, #143]	; 0x8f
   1b472:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1b476:	2206      	movs	r2, #6
   1b478:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1b47c:	f107 0066 	add.w	r0, r7, #102	; 0x66
   1b480:	f00d f969 	bl	28756 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1b484:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
	m[44] = a2->type;
   1b488:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
   1b48c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1b490:	2206      	movs	r2, #6
   1b492:	f106 0197 	add.w	r1, r6, #151	; 0x97
   1b496:	f107 006d 	add.w	r0, r7, #109	; 0x6d
   1b49a:	f00d f95c 	bl	28756 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   1b49e:	462b      	mov	r3, r5
   1b4a0:	2235      	movs	r2, #53	; 0x35
   1b4a2:	4649      	mov	r1, r9
   1b4a4:	f107 0010 	add.w	r0, r7, #16
   1b4a8:	f00d f998 	bl	287dc <bt_smp_aes_cmac>
	if (err) {
   1b4ac:	2800      	cmp	r0, #0
   1b4ae:	f040 8098 	bne.w	1b5e2 <compute_and_check_and_send_periph_dhcheck+0x212>
	sys_mem_swap(mackey, 16);
   1b4b2:	2110      	movs	r1, #16
   1b4b4:	4628      	mov	r0, r5
   1b4b6:	f00d f958 	bl	2876a <sys_mem_swap>
		   smp->tk)) {
   1b4ba:	f104 0647 	add.w	r6, r4, #71	; 0x47
	m[0] = 0x01;
   1b4be:	2301      	movs	r3, #1
   1b4c0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1b4c4:	2235      	movs	r2, #53	; 0x35
   1b4c6:	4633      	mov	r3, r6
   1b4c8:	4649      	mov	r1, r9
   1b4ca:	f107 0010 	add.w	r0, r7, #16
   1b4ce:	f00d f985 	bl	287dc <bt_smp_aes_cmac>
	if (err) {
   1b4d2:	2800      	cmp	r0, #0
   1b4d4:	f040 8085 	bne.w	1b5e2 <compute_and_check_and_send_periph_dhcheck+0x212>
	sys_mem_swap(ltk, 16);
   1b4d8:	2110      	movs	r1, #16
   1b4da:	4630      	mov	r0, r6
   1b4dc:	f00d f945 	bl	2876a <sys_mem_swap>
		   &smp->chan.chan.conn->le.resp_addr,
   1b4e0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1b4e4:	f8cd 800c 	str.w	r8, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1b4e8:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   1b4ec:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1b4ee:	9301      	str	r3, [sp, #4]
   1b4f0:	f104 0311 	add.w	r3, r4, #17
   1b4f4:	9202      	str	r2, [sp, #8]
   1b4f6:	9300      	str	r3, [sp, #0]
   1b4f8:	4652      	mov	r2, sl
   1b4fa:	463b      	mov	r3, r7
   1b4fc:	4659      	mov	r1, fp
   1b4fe:	4628      	mov	r0, r5
   1b500:	f00d f9ae 	bl	28860 <smp_f6>
   1b504:	b318      	cbz	r0, 1b54e <compute_and_check_and_send_periph_dhcheck+0x17e>
		BT_ERR("Calculate local DHKey check failed");
   1b506:	4b3a      	ldr	r3, [pc, #232]	; (1b5f0 <compute_and_check_and_send_periph_dhcheck+0x220>)
		BT_ERR("Calculate LTK failed");
   1b508:	657b      	str	r3, [r7, #84]	; 0x54
   1b50a:	483a      	ldr	r0, [pc, #232]	; (1b5f4 <compute_and_check_and_send_periph_dhcheck+0x224>)
   1b50c:	2302      	movs	r3, #2
   1b50e:	f107 0250 	add.w	r2, r7, #80	; 0x50
   1b512:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b516:	653b      	str	r3, [r7, #80]	; 0x50
   1b518:	f00d fa1b 	bl	28952 <z_log_msg_static_create.constprop.0>
   1b51c:	e015      	b.n	1b54a <compute_and_check_and_send_periph_dhcheck+0x17a>
		if (smp->oobd_remote) {
   1b51e:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1b522:	2900      	cmp	r1, #0
   1b524:	f43f af6d 	beq.w	1b402 <compute_and_check_and_send_periph_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1b528:	2210      	movs	r2, #16
   1b52a:	e767      	b.n	1b3fc <compute_and_check_and_send_periph_dhcheck+0x2c>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b52c:	466c      	mov	r4, sp
   1b52e:	b088      	sub	sp, #32
   1b530:	aa04      	add	r2, sp, #16
   1b532:	4931      	ldr	r1, [pc, #196]	; (1b5f8 <compute_and_check_and_send_periph_dhcheck+0x228>)
   1b534:	482f      	ldr	r0, [pc, #188]	; (1b5f4 <compute_and_check_and_send_periph_dhcheck+0x224>)
	switch (smp->method) {
   1b536:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b53a:	2303      	movs	r3, #3
   1b53c:	f842 3f10 	str.w	r3, [r2, #16]!
   1b540:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b544:	f00d fa05 	bl	28952 <z_log_msg_static_create.constprop.0>
   1b548:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1b54a:	2008      	movs	r0, #8
   1b54c:	e043      	b.n	1b5d6 <compute_and_check_and_send_periph_dhcheck+0x206>
	if (smp->method == LE_SC_OOB) {
   1b54e:	7a23      	ldrb	r3, [r4, #8]
   1b550:	2b05      	cmp	r3, #5
   1b552:	d106      	bne.n	1b562 <compute_and_check_and_send_periph_dhcheck+0x192>
		if (smp->oobd_local) {
   1b554:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1b558:	2210      	movs	r2, #16
   1b55a:	4638      	mov	r0, r7
		if (smp->oobd_local) {
   1b55c:	b1b9      	cbz	r1, 1b58e <compute_and_check_and_send_periph_dhcheck+0x1be>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1b55e:	f00b fbdb 	bl	26d18 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   1b562:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   1b566:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   1b56a:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1b56c:	f107 0610 	add.w	r6, r7, #16
   1b570:	9301      	str	r3, [sp, #4]
   1b572:	f104 030a 	add.w	r3, r4, #10
   1b576:	9202      	str	r2, [sp, #8]
   1b578:	9300      	str	r3, [sp, #0]
   1b57a:	9603      	str	r6, [sp, #12]
   1b57c:	463b      	mov	r3, r7
   1b57e:	465a      	mov	r2, fp
   1b580:	4651      	mov	r1, sl
   1b582:	4628      	mov	r0, r5
   1b584:	f00d f96c 	bl	28860 <smp_f6>
   1b588:	b120      	cbz	r0, 1b594 <compute_and_check_and_send_periph_dhcheck+0x1c4>
		BT_ERR("Calculate remote DHKey check failed");
   1b58a:	4b1c      	ldr	r3, [pc, #112]	; (1b5fc <compute_and_check_and_send_periph_dhcheck+0x22c>)
   1b58c:	e7bc      	b.n	1b508 <compute_and_check_and_send_periph_dhcheck+0x138>
			memset(r, 0, sizeof(r));
   1b58e:	f00b fbce 	bl	26d2e <memset>
   1b592:	e7e6      	b.n	1b562 <compute_and_check_and_send_periph_dhcheck+0x192>
	if (memcmp(smp->e, re, 16)) {
   1b594:	2210      	movs	r2, #16
   1b596:	4631      	mov	r1, r6
   1b598:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1b59c:	f00b fb93 	bl	26cc6 <memcmp>
   1b5a0:	4605      	mov	r5, r0
   1b5a2:	b9e0      	cbnz	r0, 1b5de <compute_and_check_and_send_periph_dhcheck+0x20e>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1b5a4:	210d      	movs	r1, #13
   1b5a6:	4620      	mov	r0, r4
   1b5a8:	f00d f9f5 	bl	28996 <smp_create_pdu.constprop.0>
	if (!buf) {
   1b5ac:	4606      	mov	r6, r0
   1b5ae:	2800      	cmp	r0, #0
   1b5b0:	d0cb      	beq.n	1b54a <compute_and_check_and_send_periph_dhcheck+0x17a>
   1b5b2:	2110      	movs	r1, #16
   1b5b4:	3008      	adds	r0, #8
   1b5b6:	f00d fd8d 	bl	290d4 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1b5ba:	2210      	movs	r2, #16
   1b5bc:	4641      	mov	r1, r8
   1b5be:	f00b fbab 	bl	26d18 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1b5c2:	462a      	mov	r2, r5
   1b5c4:	4631      	mov	r1, r6
   1b5c6:	4620      	mov	r0, r4
   1b5c8:	f00d f9a6 	bl	28918 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1b5cc:	1d20      	adds	r0, r4, #4
   1b5ce:	2101      	movs	r1, #1
   1b5d0:	f00d f9cd 	bl	2896e <atomic_set_bit>
	return 0;
   1b5d4:	4628      	mov	r0, r5
}
   1b5d6:	377c      	adds	r7, #124	; 0x7c
   1b5d8:	46bd      	mov	sp, r7
   1b5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1b5de:	200b      	movs	r0, #11
   1b5e0:	e7f9      	b.n	1b5d6 <compute_and_check_and_send_periph_dhcheck+0x206>
		BT_ERR("Calculate LTK failed");
   1b5e2:	4b07      	ldr	r3, [pc, #28]	; (1b600 <compute_and_check_and_send_periph_dhcheck+0x230>)
   1b5e4:	e790      	b.n	1b508 <compute_and_check_and_send_periph_dhcheck+0x138>
   1b5e6:	bf00      	nop
   1b5e8:	0002afe3 	.word	0x0002afe3
   1b5ec:	0002dc54 	.word	0x0002dc54
   1b5f0:	0002d8ea 	.word	0x0002d8ea
   1b5f4:	0002ac40 	.word	0x0002ac40
   1b5f8:	0002d8ce 	.word	0x0002d8ce
   1b5fc:	0002d90d 	.word	0x0002d90d
   1b600:	0002d931 	.word	0x0002d931

0001b604 <smp_send_pairing_confirm>:
{
   1b604:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b606:	b083      	sub	sp, #12
	switch (smp->method) {
   1b608:	7a04      	ldrb	r4, [r0, #8]
   1b60a:	2c02      	cmp	r4, #2
{
   1b60c:	af02      	add	r7, sp, #8
   1b60e:	4605      	mov	r5, r0
	switch (smp->method) {
   1b610:	d823      	bhi.n	1b65a <smp_send_pairing_confirm+0x56>
   1b612:	b144      	cbz	r4, 1b626 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1b614:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1b618:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1b61c:	40dc      	lsrs	r4, r3
   1b61e:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1b622:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1b626:	2103      	movs	r1, #3
   1b628:	4628      	mov	r0, r5
   1b62a:	f00d f9b4 	bl	28996 <smp_create_pdu.constprop.0>
	if (!buf) {
   1b62e:	4606      	mov	r6, r0
   1b630:	b320      	cbz	r0, 1b67c <smp_send_pairing_confirm+0x78>
   1b632:	2110      	movs	r1, #16
   1b634:	3008      	adds	r0, #8
   1b636:	f00d fd4d 	bl	290d4 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1b63a:	9000      	str	r0, [sp, #0]
   1b63c:	4818      	ldr	r0, [pc, #96]	; (1b6a0 <smp_send_pairing_confirm+0x9c>)
   1b63e:	4623      	mov	r3, r4
   1b640:	6800      	ldr	r0, [r0, #0]
   1b642:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1b646:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1b64a:	f00d f8e3 	bl	28814 <smp_f4>
   1b64e:	4604      	mov	r4, r0
   1b650:	b1c0      	cbz	r0, 1b684 <smp_send_pairing_confirm+0x80>
		net_buf_unref(buf);
   1b652:	4630      	mov	r0, r6
   1b654:	f001 fce8 	bl	1d028 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1b658:	e010      	b.n	1b67c <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
   1b65a:	2c03      	cmp	r4, #3
   1b65c:	d010      	beq.n	1b680 <smp_send_pairing_confirm+0x7c>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b65e:	466d      	mov	r5, sp
   1b660:	b088      	sub	sp, #32
   1b662:	aa02      	add	r2, sp, #8
   1b664:	4b0f      	ldr	r3, [pc, #60]	; (1b6a4 <smp_send_pairing_confirm+0xa0>)
   1b666:	4810      	ldr	r0, [pc, #64]	; (1b6a8 <smp_send_pairing_confirm+0xa4>)
	switch (smp->method) {
   1b668:	e9c2 3405 	strd	r3, r4, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b66c:	2303      	movs	r3, #3
   1b66e:	f842 3f10 	str.w	r3, [r2, #16]!
   1b672:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b676:	f00d f96c 	bl	28952 <z_log_msg_static_create.constprop.0>
   1b67a:	46ad      	mov	sp, r5
		return BT_SMP_ERR_UNSPECIFIED;
   1b67c:	2008      	movs	r0, #8
   1b67e:	e00b      	b.n	1b698 <smp_send_pairing_confirm+0x94>
	switch (smp->method) {
   1b680:	2400      	movs	r4, #0
   1b682:	e7d0      	b.n	1b626 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   1b684:	4602      	mov	r2, r0
   1b686:	4631      	mov	r1, r6
   1b688:	4628      	mov	r0, r5
   1b68a:	f00d f945 	bl	28918 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1b68e:	1d28      	adds	r0, r5, #4
   1b690:	4621      	mov	r1, r4
   1b692:	f00d f932 	bl	288fa <atomic_clear_bit>
	return 0;
   1b696:	4620      	mov	r0, r4
}
   1b698:	3704      	adds	r7, #4
   1b69a:	46bd      	mov	sp, r7
   1b69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b69e:	bf00      	nop
   1b6a0:	20002c4c 	.word	0x20002c4c
   1b6a4:	0002d8ce 	.word	0x0002d8ce
   1b6a8:	0002ac40 	.word	0x0002ac40

0001b6ac <smp_public_key_periph>:
{
   1b6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b6b0:	b086      	sub	sp, #24
   1b6b2:	af00      	add	r7, sp, #0
   1b6b4:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b6b6:	f7ff fb27 	bl	1ad08 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1b6ba:	1d26      	adds	r6, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b6bc:	4680      	mov	r8, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1b6be:	210e      	movs	r1, #14
   1b6c0:	4630      	mov	r0, r6
   1b6c2:	f00d f861 	bl	28788 <atomic_test_bit>
   1b6c6:	b9a0      	cbnz	r0, 1b6f2 <smp_public_key_periph+0x46>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1b6c8:	4b52      	ldr	r3, [pc, #328]	; (1b814 <smp_public_key_periph+0x168>)
   1b6ca:	2220      	movs	r2, #32
   1b6cc:	6819      	ldr	r1, [r3, #0]
   1b6ce:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1b6d2:	f00b faf8 	bl	26cc6 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1b6d6:	b960      	cbnz	r0, 1b6f2 <smp_public_key_periph+0x46>
		BT_WARN("Remote public key rejected");
   1b6d8:	4b4f      	ldr	r3, [pc, #316]	; (1b818 <smp_public_key_periph+0x16c>)
   1b6da:	617b      	str	r3, [r7, #20]
   1b6dc:	484f      	ldr	r0, [pc, #316]	; (1b81c <smp_public_key_periph+0x170>)
   1b6de:	2302      	movs	r3, #2
   1b6e0:	f107 0210 	add.w	r2, r7, #16
   1b6e4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b6e8:	613b      	str	r3, [r7, #16]
   1b6ea:	f00d f932 	bl	28952 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1b6ee:	2008      	movs	r0, #8
   1b6f0:	e02f      	b.n	1b752 <smp_public_key_periph+0xa6>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1b6f2:	210c      	movs	r1, #12
   1b6f4:	4620      	mov	r0, r4
   1b6f6:	f00d f94e 	bl	28996 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1b6fa:	4605      	mov	r5, r0
   1b6fc:	2800      	cmp	r0, #0
   1b6fe:	d0f6      	beq.n	1b6ee <smp_public_key_periph+0x42>
   1b700:	2140      	movs	r1, #64	; 0x40
   1b702:	3008      	adds	r0, #8
   1b704:	f00d fce6 	bl	290d4 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1b708:	f8df a108 	ldr.w	sl, [pc, #264]	; 1b814 <smp_public_key_periph+0x168>
   1b70c:	2220      	movs	r2, #32
   1b70e:	f8da 1000 	ldr.w	r1, [sl]
   1b712:	4681      	mov	r9, r0
   1b714:	f00b fb00 	bl	26d18 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   1b718:	f8da 1000 	ldr.w	r1, [sl]
   1b71c:	2220      	movs	r2, #32
   1b71e:	4411      	add	r1, r2
   1b720:	eb09 0002 	add.w	r0, r9, r2
   1b724:	f00b faf8 	bl	26d18 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1b728:	2200      	movs	r2, #0
   1b72a:	4629      	mov	r1, r5
   1b72c:	4620      	mov	r0, r4
   1b72e:	f00d f8f3 	bl	28918 <smp_send.constprop.0>
	switch (smp->method) {
   1b732:	7a23      	ldrb	r3, [r4, #8]
   1b734:	2b05      	cmp	r3, #5
   1b736:	d85b      	bhi.n	1b7f0 <smp_public_key_periph+0x144>
   1b738:	e8df f003 	tbb	[pc, r3]
   1b73c:	030f3b03 	.word	0x030f3b03
   1b740:	575a      	.short	0x575a
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1b742:	2104      	movs	r1, #4
   1b744:	4620      	mov	r0, r4
   1b746:	f00d f912 	bl	2896e <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1b74a:	f7ff ff5b 	bl	1b604 <smp_send_pairing_confirm>
		if (err) {
   1b74e:	2800      	cmp	r0, #0
   1b750:	d03f      	beq.n	1b7d2 <smp_public_key_periph+0x126>
}
   1b752:	3718      	adds	r7, #24
   1b754:	46bd      	mov	sp, r7
   1b756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b75a:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1b75c:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b760:	f7ff fad2 	bl	1ad08 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1b764:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b766:	4605      	mov	r5, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1b768:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1b76c:	f003 ffd2 	bl	1f714 <bt_rand>
   1b770:	2800      	cmp	r0, #0
   1b772:	d1bc      	bne.n	1b6ee <smp_public_key_periph+0x42>
		smp->passkey %= 1000000;
   1b774:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1b778:	4a29      	ldr	r2, [pc, #164]	; (1b820 <smp_public_key_periph+0x174>)
   1b77a:	fbb3 f1f2 	udiv	r1, r3, r2
   1b77e:	fb02 3311 	mls	r3, r2, r1, r3
   1b782:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   1b786:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1b78a:	b155      	cbz	r5, 1b7a2 <smp_public_key_periph+0xf6>
   1b78c:	682b      	ldr	r3, [r5, #0]
   1b78e:	b143      	cbz	r3, 1b7a2 <smp_public_key_periph+0xf6>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1b790:	210b      	movs	r1, #11
   1b792:	4630      	mov	r0, r6
   1b794:	f00d f8eb 	bl	2896e <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   1b798:	682b      	ldr	r3, [r5, #0]
   1b79a:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1b79e:	4640      	mov	r0, r8
   1b7a0:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1b7a2:	2103      	movs	r1, #3
   1b7a4:	4620      	mov	r0, r4
   1b7a6:	f00d f8e2 	bl	2896e <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1b7aa:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1b7ac:	f00d f8df 	bl	2896e <atomic_set_bit>
		break;
   1b7b0:	e00f      	b.n	1b7d2 <smp_public_key_periph+0x126>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1b7b2:	4620      	mov	r0, r4
   1b7b4:	2103      	movs	r1, #3
   1b7b6:	f00d f8da 	bl	2896e <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1b7ba:	210e      	movs	r1, #14
   1b7bc:	f00d f8d7 	bl	2896e <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b7c0:	4630      	mov	r0, r6
   1b7c2:	210a      	movs	r1, #10
   1b7c4:	f00d f8d3 	bl	2896e <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   1b7c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1b7cc:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1b7d0:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1b7d2:	4630      	mov	r0, r6
   1b7d4:	2107      	movs	r1, #7
   1b7d6:	f00d f8ca 	bl	2896e <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1b7da:	2008      	movs	r0, #8
   1b7dc:	f7ff fa86 	bl	1acec <smp_find>
   1b7e0:	b9b0      	cbnz	r0, 1b810 <smp_public_key_periph+0x164>
		return smp_dhkey_generate(smp);
   1b7e2:	4620      	mov	r0, r4
   1b7e4:	f7ff fb9a 	bl	1af1c <smp_dhkey_generate>
   1b7e8:	e7b3      	b.n	1b752 <smp_public_key_periph+0xa6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1b7ea:	2104      	movs	r1, #4
   1b7ec:	4620      	mov	r0, r4
   1b7ee:	e7dd      	b.n	1b7ac <smp_public_key_periph+0x100>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b7f0:	466c      	mov	r4, sp
   1b7f2:	b088      	sub	sp, #32
   1b7f4:	466a      	mov	r2, sp
   1b7f6:	490b      	ldr	r1, [pc, #44]	; (1b824 <smp_public_key_periph+0x178>)
   1b7f8:	4808      	ldr	r0, [pc, #32]	; (1b81c <smp_public_key_periph+0x170>)
	switch (smp->method) {
   1b7fa:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b7fe:	2303      	movs	r3, #3
   1b800:	f842 3f10 	str.w	r3, [r2, #16]!
   1b804:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b808:	f00d f8a3 	bl	28952 <z_log_msg_static_create.constprop.0>
   1b80c:	46a5      	mov	sp, r4
   1b80e:	e76e      	b.n	1b6ee <smp_public_key_periph+0x42>
	return 0;
   1b810:	2000      	movs	r0, #0
   1b812:	e79e      	b.n	1b752 <smp_public_key_periph+0xa6>
   1b814:	20002c4c 	.word	0x20002c4c
   1b818:	0002d946 	.word	0x0002d946
   1b81c:	0002ac40 	.word	0x0002ac40
   1b820:	000f4240 	.word	0x000f4240
   1b824:	0002d8ce 	.word	0x0002d8ce

0001b828 <smp_public_key>:
{
   1b828:	b570      	push	{r4, r5, r6, lr}
   1b82a:	460d      	mov	r5, r1
   1b82c:	b086      	sub	sp, #24
   1b82e:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b830:	f7ff fa6a 	bl	1ad08 <latch_auth_cb>
	struct bt_smp_public_key *req = (void *)buf->data;
   1b834:	68ae      	ldr	r6, [r5, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1b836:	f104 0557 	add.w	r5, r4, #87	; 0x57
   1b83a:	2220      	movs	r2, #32
   1b83c:	4631      	mov	r1, r6
   1b83e:	4628      	mov	r0, r5
   1b840:	f00b fa6a 	bl	26d18 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   1b844:	2220      	movs	r2, #32
   1b846:	18b1      	adds	r1, r6, r2
   1b848:	f104 0077 	add.w	r0, r4, #119	; 0x77
   1b84c:	f00b fa64 	bl	26d18 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1b850:	4628      	mov	r0, r5
   1b852:	f7fb fd17 	bl	17284 <bt_pub_key_is_debug>
   1b856:	b940      	cbnz	r0, 1b86a <smp_public_key+0x42>
	if (!sc_public_key) {
   1b858:	4b1b      	ldr	r3, [pc, #108]	; (1b8c8 <smp_public_key+0xa0>)
   1b85a:	681d      	ldr	r5, [r3, #0]
   1b85c:	bb75      	cbnz	r5, 1b8bc <smp_public_key+0x94>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1b85e:	1d20      	adds	r0, r4, #4
   1b860:	2106      	movs	r1, #6
   1b862:	f00d f884 	bl	2896e <atomic_set_bit>
		return 0;
   1b866:	4628      	mov	r0, r5
   1b868:	e026      	b.n	1b8b8 <smp_public_key+0x90>
		BT_INFO("Remote is using Debug Public key");
   1b86a:	4b18      	ldr	r3, [pc, #96]	; (1b8cc <smp_public_key+0xa4>)
   1b86c:	4818      	ldr	r0, [pc, #96]	; (1b8d0 <smp_public_key+0xa8>)
   1b86e:	9305      	str	r3, [sp, #20]
   1b870:	aa04      	add	r2, sp, #16
   1b872:	2302      	movs	r3, #2
   1b874:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1b878:	9304      	str	r3, [sp, #16]
   1b87a:	f00d f86a 	bl	28952 <z_log_msg_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1b87e:	210e      	movs	r1, #14
   1b880:	1d20      	adds	r0, r4, #4
   1b882:	f00d f874 	bl	2896e <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1b886:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   1b88a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1b88e:	b933      	cbnz	r3, 1b89e <smp_public_key+0x76>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1b890:	7a28      	ldrb	r0, [r5, #8]
   1b892:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1b896:	f001 f8bd 	bl	1ca14 <bt_keys_get_addr>
   1b89a:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   1b89e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1b8a2:	2b00      	cmp	r3, #0
   1b8a4:	d0d8      	beq.n	1b858 <smp_public_key+0x30>
   1b8a6:	89da      	ldrh	r2, [r3, #14]
   1b8a8:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1b8ac:	2a00      	cmp	r2, #0
   1b8ae:	d0d3      	beq.n	1b858 <smp_public_key+0x30>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1b8b0:	7b5b      	ldrb	r3, [r3, #13]
   1b8b2:	079b      	lsls	r3, r3, #30
   1b8b4:	d4d0      	bmi.n	1b858 <smp_public_key+0x30>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1b8b6:	2003      	movs	r0, #3
}
   1b8b8:	b006      	add	sp, #24
   1b8ba:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_periph(smp);
   1b8bc:	4620      	mov	r0, r4
}
   1b8be:	b006      	add	sp, #24
   1b8c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_periph(smp);
   1b8c4:	f7ff bef2 	b.w	1b6ac <smp_public_key_periph>
   1b8c8:	20002c4c 	.word	0x20002c4c
   1b8cc:	0002d961 	.word	0x0002d961
   1b8d0:	0002ac40 	.word	0x0002ac40

0001b8d4 <bt_smp_connected>:
{
   1b8d4:	b538      	push	{r3, r4, r5, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1b8d6:	490b      	ldr	r1, [pc, #44]	; (1b904 <bt_smp_connected+0x30>)
{
   1b8d8:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   1b8da:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1b8de:	308c      	adds	r0, #140	; 0x8c
   1b8e0:	f00e fc0b 	bl	2a0fa <k_work_init_delayable>
	smp_reset(smp);
   1b8e4:	4628      	mov	r0, r5
   1b8e6:	f00d f8ea 	bl	28abe <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b8ea:	f3bf 8f5b 	dmb	ish
   1b8ee:	4b06      	ldr	r3, [pc, #24]	; (1b908 <bt_smp_connected+0x34>)
   1b8f0:	34bc      	adds	r4, #188	; 0xbc
   1b8f2:	e854 2f00 	ldrex	r2, [r4]
   1b8f6:	e844 3100 	strex	r1, r3, [r4]
   1b8fa:	2900      	cmp	r1, #0
   1b8fc:	d1f9      	bne.n	1b8f2 <bt_smp_connected+0x1e>
   1b8fe:	f3bf 8f5b 	dmb	ish
}
   1b902:	bd38      	pop	{r3, r4, r5, pc}
   1b904:	0001c88d 	.word	0x0001c88d
   1b908:	20002020 	.word	0x20002020

0001b90c <smp_pairing_confirm>:
{
   1b90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1b90e:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1b910:	1d05      	adds	r5, r0, #4
{
   1b912:	af00      	add	r7, sp, #0
   1b914:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1b916:	210b      	movs	r1, #11
   1b918:	4628      	mov	r0, r5
   1b91a:	f00c ffee 	bl	288fa <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1b91e:	4631      	mov	r1, r6
   1b920:	2210      	movs	r2, #16
   1b922:	f104 0017 	add.w	r0, r4, #23
   1b926:	f00b f9f7 	bl	26d18 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b92a:	2105      	movs	r1, #5
   1b92c:	4628      	mov	r0, r5
   1b92e:	f00c ff2b 	bl	28788 <atomic_test_bit>
   1b932:	b920      	cbnz	r0, 1b93e <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
   1b934:	4620      	mov	r0, r4
   1b936:	f00d f940 	bl	28bba <legacy_pairing_confirm>
}
   1b93a:	46bd      	mov	sp, r7
   1b93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
   1b93e:	7a23      	ldrb	r3, [r4, #8]
   1b940:	2b01      	cmp	r3, #1
   1b942:	d008      	beq.n	1b956 <smp_pairing_confirm+0x4a>
   1b944:	2b02      	cmp	r3, #2
   1b946:	d112      	bne.n	1b96e <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1b948:	2104      	movs	r1, #4
   1b94a:	4620      	mov	r0, r4
   1b94c:	f00d f80f 	bl	2896e <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   1b950:	f7ff fe58 	bl	1b604 <smp_send_pairing_confirm>
   1b954:	e7f1      	b.n	1b93a <smp_pairing_confirm+0x2e>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1b956:	210a      	movs	r1, #10
   1b958:	4628      	mov	r0, r5
   1b95a:	f00c ff15 	bl	28788 <atomic_test_bit>
   1b95e:	2800      	cmp	r0, #0
   1b960:	d0f2      	beq.n	1b948 <smp_pairing_confirm+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1b962:	4628      	mov	r0, r5
   1b964:	2100      	movs	r1, #0
   1b966:	f00d f802 	bl	2896e <atomic_set_bit>
			return 0;
   1b96a:	2000      	movs	r0, #0
   1b96c:	e7e5      	b.n	1b93a <smp_pairing_confirm+0x2e>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b96e:	466c      	mov	r4, sp
   1b970:	b088      	sub	sp, #32
   1b972:	466a      	mov	r2, sp
   1b974:	4906      	ldr	r1, [pc, #24]	; (1b990 <smp_pairing_confirm+0x84>)
   1b976:	4807      	ldr	r0, [pc, #28]	; (1b994 <smp_pairing_confirm+0x88>)
	switch (smp->method) {
   1b978:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b97c:	2303      	movs	r3, #3
   1b97e:	f842 3f10 	str.w	r3, [r2, #16]!
   1b982:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b986:	f00c ffe4 	bl	28952 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1b98a:	2008      	movs	r0, #8
   1b98c:	46a5      	mov	sp, r4
   1b98e:	e7d4      	b.n	1b93a <smp_pairing_confirm+0x2e>
   1b990:	0002d8ce 	.word	0x0002d8ce
   1b994:	0002ac40 	.word	0x0002ac40

0001b998 <smp_pairing_random>:
{
   1b998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b99c:	b09f      	sub	sp, #124	; 0x7c
   1b99e:	af04      	add	r7, sp, #16
   1b9a0:	4604      	mov	r4, r0
   1b9a2:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b9a4:	f7ff f9b0 	bl	1ad08 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1b9a8:	f104 0937 	add.w	r9, r4, #55	; 0x37
   1b9ac:	68a9      	ldr	r1, [r5, #8]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b9ae:	4680      	mov	r8, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1b9b0:	2210      	movs	r2, #16
   1b9b2:	4648      	mov	r0, r9
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b9b4:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1b9b6:	f00b f9af 	bl	26d18 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b9ba:	2105      	movs	r1, #5
   1b9bc:	4630      	mov	r0, r6
   1b9be:	f00c fee3 	bl	28788 <atomic_test_bit>
   1b9c2:	2800      	cmp	r0, #0
   1b9c4:	d14a      	bne.n	1ba5c <smp_pairing_random+0xc4>
	struct bt_conn *conn = smp->chan.chan.conn;
   1b9c6:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1b9ca:	f104 0847 	add.w	r8, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1b9ce:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1b9d2:	f107 0508 	add.w	r5, r7, #8
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1b9d6:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1b9d8:	9201      	str	r2, [sp, #4]
   1b9da:	9300      	str	r3, [sp, #0]
   1b9dc:	9502      	str	r5, [sp, #8]
   1b9de:	f104 0310 	add.w	r3, r4, #16
   1b9e2:	f104 0209 	add.w	r2, r4, #9
   1b9e6:	4649      	mov	r1, r9
   1b9e8:	4640      	mov	r0, r8
   1b9ea:	f00d f88b 	bl	28b04 <smp_c1>
	if (err) {
   1b9ee:	bb28      	cbnz	r0, 1ba3c <smp_pairing_random+0xa4>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1b9f0:	2210      	movs	r2, #16
   1b9f2:	4629      	mov	r1, r5
   1b9f4:	f104 0017 	add.w	r0, r4, #23
   1b9f8:	f00b f965 	bl	26cc6 <memcmp>
   1b9fc:	2800      	cmp	r0, #0
   1b9fe:	f040 8097 	bne.w	1bb30 <smp_pairing_random+0x198>
	memcpy(out, r2, 8);
   1ba02:	2208      	movs	r2, #8
   1ba04:	4649      	mov	r1, r9
   1ba06:	4628      	mov	r0, r5
   1ba08:	f00b f986 	bl	26d18 <memcpy>
	memcpy(out + 8, r1, 8);
   1ba0c:	2208      	movs	r2, #8
   1ba0e:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1ba12:	f107 0010 	add.w	r0, r7, #16
   1ba16:	f00b f97f 	bl	26d18 <memcpy>
	return bt_encrypt_le(k, out, out);
   1ba1a:	462a      	mov	r2, r5
   1ba1c:	4629      	mov	r1, r5
   1ba1e:	4640      	mov	r0, r8
   1ba20:	f00d ff36 	bl	29890 <bt_encrypt_le>
		if (err) {
   1ba24:	b160      	cbz	r0, 1ba40 <smp_pairing_random+0xa8>
			BT_ERR("Calculate STK failed");
   1ba26:	4b77      	ldr	r3, [pc, #476]	; (1bc04 <smp_pairing_random+0x26c>)
		BT_ERR("Calculate confirm failed");
   1ba28:	62fb      	str	r3, [r7, #44]	; 0x2c
   1ba2a:	4877      	ldr	r0, [pc, #476]	; (1bc08 <smp_pairing_random+0x270>)
   1ba2c:	2302      	movs	r3, #2
   1ba2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1ba32:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ba36:	62bb      	str	r3, [r7, #40]	; 0x28
   1ba38:	f00c ff8b 	bl	28952 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1ba3c:	2508      	movs	r5, #8
   1ba3e:	e078      	b.n	1bb32 <smp_pairing_random+0x19a>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   1ba40:	4629      	mov	r1, r5
   1ba42:	2210      	movs	r2, #16
   1ba44:	4640      	mov	r0, r8
   1ba46:	f00b f967 	bl	26d18 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1ba4a:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1ba4c:	4630      	mov	r0, r6
   1ba4e:	f00c ff8e 	bl	2896e <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1ba52:	4620      	mov	r0, r4
   1ba54:	f00c ffd7 	bl	28a06 <smp_send_pairing_random>
   1ba58:	4605      	mov	r5, r0
   1ba5a:	e06a      	b.n	1bb32 <smp_pairing_random+0x19a>
	switch (smp->method) {
   1ba5c:	7a23      	ldrb	r3, [r4, #8]
   1ba5e:	2b05      	cmp	r3, #5
   1ba60:	f200 80ab 	bhi.w	1bbba <smp_pairing_random+0x222>
   1ba64:	e8df f003 	tbb	[pc, r3]
   1ba68:	03474741 	.word	0x03474741
   1ba6c:	8ca9      	.short	0x8ca9
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1ba6e:	4b67      	ldr	r3, [pc, #412]	; (1bc0c <smp_pairing_random+0x274>)
   1ba70:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   1ba72:	2220      	movs	r2, #32
   1ba74:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1ba78:	f107 0018 	add.w	r0, r7, #24
   1ba7c:	f00c fe6b 	bl	28756 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1ba80:	2220      	movs	r2, #32
   1ba82:	4629      	mov	r1, r5
   1ba84:	f107 0038 	add.w	r0, r7, #56	; 0x38
   1ba88:	f00c fe65 	bl	28756 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1ba8c:	2210      	movs	r2, #16
   1ba8e:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1ba92:	f107 0058 	add.w	r0, r7, #88	; 0x58
   1ba96:	f00c fe5e 	bl	28756 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1ba9a:	2210      	movs	r2, #16
   1ba9c:	4649      	mov	r1, r9
   1ba9e:	f107 0008 	add.w	r0, r7, #8
   1baa2:	f00c fe58 	bl	28756 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1baa6:	f107 0308 	add.w	r3, r7, #8
   1baaa:	2250      	movs	r2, #80	; 0x50
   1baac:	f107 0118 	add.w	r1, r7, #24
   1bab0:	4618      	mov	r0, r3
   1bab2:	f00c fe93 	bl	287dc <bt_smp_aes_cmac>
	if (err) {
   1bab6:	2800      	cmp	r0, #0
   1bab8:	d1c0      	bne.n	1ba3c <smp_pairing_random+0xa4>
	memcpy(passkey, xs + 12, 4);
   1baba:	2204      	movs	r2, #4
   1babc:	f107 0114 	add.w	r1, r7, #20
   1bac0:	18b8      	adds	r0, r7, r2
   1bac2:	f00b f929 	bl	26d18 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1bac6:	687b      	ldr	r3, [r7, #4]
   1bac8:	4a51      	ldr	r2, [pc, #324]	; (1bc10 <smp_pairing_random+0x278>)
   1baca:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bacc:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1bace:	fbb3 f1f2 	udiv	r1, r3, r2
   1bad2:	fb02 3311 	mls	r3, r2, r1, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bad6:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1bad8:	607b      	str	r3, [r7, #4]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bada:	f00c ff48 	bl	2896e <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1bade:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1bae2:	6879      	ldr	r1, [r7, #4]
   1bae4:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1bae8:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1baea:	210d      	movs	r1, #13
   1baec:	4620      	mov	r0, r4
   1baee:	f00c ff3e 	bl	2896e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1baf2:	2110      	movs	r1, #16
   1baf4:	e7aa      	b.n	1ba4c <smp_pairing_random+0xb4>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1baf6:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1bafa:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1bafe:	4943      	ldr	r1, [pc, #268]	; (1bc0c <smp_pairing_random+0x274>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1bb00:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1bb02:	f107 0508 	add.w	r5, r7, #8
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1bb06:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1bb0a:	9500      	str	r5, [sp, #0]
   1bb0c:	6809      	ldr	r1, [r1, #0]
   1bb0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1bb12:	464a      	mov	r2, r9
   1bb14:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1bb18:	f00c fe7c 	bl	28814 <smp_f4>
   1bb1c:	b108      	cbz	r0, 1bb22 <smp_pairing_random+0x18a>
		BT_ERR("Calculate confirm failed");
   1bb1e:	4b3d      	ldr	r3, [pc, #244]	; (1bc14 <smp_pairing_random+0x27c>)
   1bb20:	e782      	b.n	1ba28 <smp_pairing_random+0x90>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1bb22:	2210      	movs	r2, #16
   1bb24:	4629      	mov	r1, r5
   1bb26:	f104 0017 	add.w	r0, r4, #23
   1bb2a:	f00b f8cc 	bl	26cc6 <memcmp>
   1bb2e:	b128      	cbz	r0, 1bb3c <smp_pairing_random+0x1a4>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1bb30:	2504      	movs	r5, #4
}
   1bb32:	4628      	mov	r0, r5
   1bb34:	376c      	adds	r7, #108	; 0x6c
   1bb36:	46bd      	mov	sp, r7
   1bb38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		atomic_set_bit(smp->allowed_cmds,
   1bb3c:	2103      	movs	r1, #3
   1bb3e:	4620      	mov	r0, r4
   1bb40:	f00c ff15 	bl	2896e <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1bb44:	f00c ff5f 	bl	28a06 <smp_send_pairing_random>
		if (err) {
   1bb48:	4605      	mov	r5, r0
   1bb4a:	2800      	cmp	r0, #0
   1bb4c:	d1f1      	bne.n	1bb32 <smp_pairing_random+0x19a>
		smp->passkey_round++;
   1bb4e:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1bb52:	3301      	adds	r3, #1
   1bb54:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1bb56:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1bb58:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1bb5c:	d108      	bne.n	1bb70 <smp_pairing_random+0x1d8>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1bb5e:	4620      	mov	r0, r4
   1bb60:	210d      	movs	r1, #13
   1bb62:	f00c ff04 	bl	2896e <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1bb66:	2110      	movs	r1, #16
   1bb68:	4630      	mov	r0, r6
   1bb6a:	f00c ff00 	bl	2896e <atomic_set_bit>
			return 0;
   1bb6e:	e7e0      	b.n	1bb32 <smp_pairing_random+0x19a>
		if (bt_rand(smp->prnd, 16)) {
   1bb70:	2110      	movs	r1, #16
   1bb72:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1bb76:	f003 fdcd 	bl	1f714 <bt_rand>
   1bb7a:	2800      	cmp	r0, #0
   1bb7c:	d0d9      	beq.n	1bb32 <smp_pairing_random+0x19a>
   1bb7e:	e75d      	b.n	1ba3c <smp_pairing_random+0xa4>
		if (bt_rand(smp->prnd, 16)) {
   1bb80:	2110      	movs	r1, #16
   1bb82:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1bb86:	f003 fdc5 	bl	1f714 <bt_rand>
   1bb8a:	2800      	cmp	r0, #0
   1bb8c:	f47f af56 	bne.w	1ba3c <smp_pairing_random+0xa4>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1bb90:	f1b8 0f00 	cmp.w	r8, #0
   1bb94:	d021      	beq.n	1bbda <smp_pairing_random+0x242>
   1bb96:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1bb9a:	b1f3      	cbz	r3, 1bbda <smp_pairing_random+0x242>
			struct bt_conn_oob_info info = {
   1bb9c:	4b1e      	ldr	r3, [pc, #120]	; (1bc18 <smp_pairing_random+0x280>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1bb9e:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   1bba0:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
   1bba4:	833b      	strh	r3, [r7, #24]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1bba6:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1bba8:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1bbaa:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1bbae:	d416      	bmi.n	1bbde <smp_pairing_random+0x246>
				     BT_CONN_OOB_BOTH_PEERS :
   1bbb0:	2b00      	cmp	r3, #0
   1bbb2:	bf0c      	ite	eq
   1bbb4:	2003      	moveq	r0, #3
   1bbb6:	2001      	movne	r0, #1
   1bbb8:	e014      	b.n	1bbe4 <smp_pairing_random+0x24c>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1bbba:	466c      	mov	r4, sp
   1bbbc:	b088      	sub	sp, #32
   1bbbe:	aa04      	add	r2, sp, #16
   1bbc0:	4916      	ldr	r1, [pc, #88]	; (1bc1c <smp_pairing_random+0x284>)
   1bbc2:	4811      	ldr	r0, [pc, #68]	; (1bc08 <smp_pairing_random+0x270>)
	switch (smp->method) {
   1bbc4:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1bbc8:	2303      	movs	r3, #3
   1bbca:	f842 3f10 	str.w	r3, [r2, #16]!
   1bbce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bbd2:	f00c febe 	bl	28952 <z_log_msg_static_create.constprop.0>
   1bbd6:	46a5      	mov	sp, r4
   1bbd8:	e730      	b.n	1ba3c <smp_pairing_random+0xa4>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1bbda:	2502      	movs	r5, #2
   1bbdc:	e7a9      	b.n	1bb32 <smp_pairing_random+0x19a>
				     BT_CONN_OOB_BOTH_PEERS :
   1bbde:	2b00      	cmp	r3, #0
   1bbe0:	bf18      	it	ne
   1bbe2:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
   1bbe4:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
   1bbe6:	7678      	strb	r0, [r7, #25]
			smp->oobd_remote = NULL;
   1bbe8:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1bbec:	4630      	mov	r0, r6
   1bbee:	210c      	movs	r1, #12
   1bbf0:	f00c febd 	bl	2896e <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1bbf4:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1bbf8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1bbfc:	f107 0118 	add.w	r1, r7, #24
   1bc00:	4798      	blx	r3
			return 0;
   1bc02:	e796      	b.n	1bb32 <smp_pairing_random+0x19a>
   1bc04:	0002d982 	.word	0x0002d982
   1bc08:	0002ac40 	.word	0x0002ac40
   1bc0c:	20002c4c 	.word	0x20002c4c
   1bc10:	000f4240 	.word	0x000f4240
   1bc14:	0002d997 	.word	0x0002d997
   1bc18:	0002afe3 	.word	0x0002afe3
   1bc1c:	0002d8ce 	.word	0x0002d8ce

0001bc20 <bt_smp_sign_verify>:
{
   1bc20:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bc22:	b085      	sub	sp, #20
	return buf->data + buf->len;
   1bc24:	898b      	ldrh	r3, [r1, #12]
   1bc26:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1bc28:	6889      	ldr	r1, [r1, #8]
{
   1bc2a:	4605      	mov	r5, r0
   1bc2c:	af00      	add	r7, sp, #0
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1bc2e:	3b0c      	subs	r3, #12
   1bc30:	4419      	add	r1, r3
   1bc32:	220c      	movs	r2, #12
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   1bc34:	f105 0688 	add.w	r6, r5, #136	; 0x88
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1bc38:	1d38      	adds	r0, r7, #4
   1bc3a:	f00b f86d 	bl	26d18 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   1bc3e:	7a29      	ldrb	r1, [r5, #8]
   1bc40:	4632      	mov	r2, r6
   1bc42:	2010      	movs	r0, #16
   1bc44:	f000 ff5c 	bl	1cb00 <bt_keys_find>
	if (!keys) {
   1bc48:	4605      	mov	r5, r0
   1bc4a:	b9c0      	cbnz	r0, 1bc7e <bt_smp_sign_verify+0x5e>
		BT_ERR("Unable to find Remote CSRK for %s",
   1bc4c:	4630      	mov	r0, r6
   1bc4e:	f7f9 f81f 	bl	14c90 <bt_addr_le_str_real>
   1bc52:	466c      	mov	r4, sp
   1bc54:	b088      	sub	sp, #32
   1bc56:	466a      	mov	r2, sp
   1bc58:	4b30      	ldr	r3, [pc, #192]	; (1bd1c <bt_smp_sign_verify+0xfc>)
   1bc5a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1bc5e:	2302      	movs	r3, #2
   1bc60:	7713      	strb	r3, [r2, #28]
   1bc62:	4b2f      	ldr	r3, [pc, #188]	; (1bd20 <bt_smp_sign_verify+0x100>)
   1bc64:	482f      	ldr	r0, [pc, #188]	; (1bd24 <bt_smp_sign_verify+0x104>)
   1bc66:	f842 3f10 	str.w	r3, [r2, #16]!
   1bc6a:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1bc6e:	f00c fe70 	bl	28952 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
   1bc72:	f06f 0001 	mvn.w	r0, #1
   1bc76:	46a5      	mov	sp, r4
}
   1bc78:	3714      	adds	r7, #20
   1bc7a:	46bd      	mov	sp, r7
   1bc7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
   1bc7e:	6e43      	ldr	r3, [r0, #100]	; 0x64
   1bc80:	603b      	str	r3, [r7, #0]
   1bc82:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
   1bc84:	68a0      	ldr	r0, [r4, #8]
   1bc86:	3b0c      	subs	r3, #12
   1bc88:	2204      	movs	r2, #4
   1bc8a:	4639      	mov	r1, r7
   1bc8c:	4418      	add	r0, r3
   1bc8e:	f00b f843 	bl	26d18 <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
   1bc92:	89a2      	ldrh	r2, [r4, #12]
   1bc94:	68a1      	ldr	r1, [r4, #8]
   1bc96:	3a0c      	subs	r2, #12
   1bc98:	b292      	uxth	r2, r2
   1bc9a:	f105 0054 	add.w	r0, r5, #84	; 0x54
   1bc9e:	f7ff f8a5 	bl	1adec <smp_sign_buf>
	if (err) {
   1bca2:	b1b0      	cbz	r0, 1bcd2 <bt_smp_sign_verify+0xb2>
		BT_ERR("Unable to create signature for %s",
   1bca4:	4630      	mov	r0, r6
   1bca6:	f7f8 fff3 	bl	14c90 <bt_addr_le_str_real>
   1bcaa:	466c      	mov	r4, sp
   1bcac:	b088      	sub	sp, #32
   1bcae:	466a      	mov	r2, sp
   1bcb0:	4b1d      	ldr	r3, [pc, #116]	; (1bd28 <bt_smp_sign_verify+0x108>)
   1bcb2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1bcb6:	2302      	movs	r3, #2
   1bcb8:	7713      	strb	r3, [r2, #28]
   1bcba:	4b19      	ldr	r3, [pc, #100]	; (1bd20 <bt_smp_sign_verify+0x100>)
   1bcbc:	4819      	ldr	r0, [pc, #100]	; (1bd24 <bt_smp_sign_verify+0x104>)
   1bcbe:	f842 3f10 	str.w	r3, [r2, #16]!
   1bcc2:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1bcc6:	f00c fe44 	bl	28952 <z_log_msg_static_create.constprop.0>
		return -EIO;
   1bcca:	f06f 0004 	mvn.w	r0, #4
   1bcce:	46a5      	mov	sp, r4
   1bcd0:	e7d2      	b.n	1bc78 <bt_smp_sign_verify+0x58>
   1bcd2:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
   1bcd4:	68a1      	ldr	r1, [r4, #8]
   1bcd6:	3b0c      	subs	r3, #12
   1bcd8:	220c      	movs	r2, #12
   1bcda:	4419      	add	r1, r3
   1bcdc:	1d38      	adds	r0, r7, #4
   1bcde:	f00a fff2 	bl	26cc6 <memcmp>
   1bce2:	b1b0      	cbz	r0, 1bd12 <bt_smp_sign_verify+0xf2>
		BT_ERR("Unable to verify signature for %s",
   1bce4:	4630      	mov	r0, r6
   1bce6:	f7f8 ffd3 	bl	14c90 <bt_addr_le_str_real>
   1bcea:	466c      	mov	r4, sp
   1bcec:	b088      	sub	sp, #32
   1bcee:	466a      	mov	r2, sp
   1bcf0:	4b0e      	ldr	r3, [pc, #56]	; (1bd2c <bt_smp_sign_verify+0x10c>)
   1bcf2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1bcf6:	2302      	movs	r3, #2
   1bcf8:	7713      	strb	r3, [r2, #28]
   1bcfa:	4b09      	ldr	r3, [pc, #36]	; (1bd20 <bt_smp_sign_verify+0x100>)
   1bcfc:	4809      	ldr	r0, [pc, #36]	; (1bd24 <bt_smp_sign_verify+0x104>)
   1bcfe:	f842 3f10 	str.w	r3, [r2, #16]!
   1bd02:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1bd06:	f00c fe24 	bl	28952 <z_log_msg_static_create.constprop.0>
		return -EBADMSG;
   1bd0a:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   1bd0e:	46a5      	mov	sp, r4
   1bd10:	e7b2      	b.n	1bc78 <bt_smp_sign_verify+0x58>
	keys->remote_csrk.cnt++;
   1bd12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1bd14:	3301      	adds	r3, #1
   1bd16:	666b      	str	r3, [r5, #100]	; 0x64
	return 0;
   1bd18:	e7ae      	b.n	1bc78 <bt_smp_sign_verify+0x58>
   1bd1a:	bf00      	nop
   1bd1c:	0002d9b0 	.word	0x0002d9b0
   1bd20:	01000003 	.word	0x01000003
   1bd24:	0002ac40 	.word	0x0002ac40
   1bd28:	0002d9d2 	.word	0x0002d9d2
   1bd2c:	0002d9f4 	.word	0x0002d9f4

0001bd30 <bt_smp_sign>:
{
   1bd30:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bd32:	b083      	sub	sp, #12
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   1bd34:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1bd38:	af00      	add	r7, sp, #0
   1bd3a:	460d      	mov	r5, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   1bd3c:	4632      	mov	r2, r6
   1bd3e:	7a01      	ldrb	r1, [r0, #8]
   1bd40:	2008      	movs	r0, #8
   1bd42:	f000 fedd 	bl	1cb00 <bt_keys_find>
	if (!keys) {
   1bd46:	4604      	mov	r4, r0
   1bd48:	b9c0      	cbnz	r0, 1bd7c <bt_smp_sign+0x4c>
		BT_ERR("Unable to find local CSRK for %s",
   1bd4a:	4630      	mov	r0, r6
   1bd4c:	f7f8 ffa0 	bl	14c90 <bt_addr_le_str_real>
   1bd50:	466c      	mov	r4, sp
   1bd52:	b088      	sub	sp, #32
   1bd54:	466a      	mov	r2, sp
   1bd56:	4b23      	ldr	r3, [pc, #140]	; (1bde4 <bt_smp_sign+0xb4>)
   1bd58:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1bd5c:	2302      	movs	r3, #2
   1bd5e:	7713      	strb	r3, [r2, #28]
   1bd60:	4b21      	ldr	r3, [pc, #132]	; (1bde8 <bt_smp_sign+0xb8>)
   1bd62:	4822      	ldr	r0, [pc, #136]	; (1bdec <bt_smp_sign+0xbc>)
   1bd64:	f842 3f10 	str.w	r3, [r2, #16]!
   1bd68:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1bd6c:	f00c fdf1 	bl	28952 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
   1bd70:	f06f 0001 	mvn.w	r0, #1
   1bd74:	46a5      	mov	sp, r4
}
   1bd76:	370c      	adds	r7, #12
   1bd78:	46bd      	mov	sp, r7
   1bd7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1bd7c:	210c      	movs	r1, #12
   1bd7e:	f105 0008 	add.w	r0, r5, #8
   1bd82:	f00d f9a7 	bl	290d4 <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
   1bd86:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1bd88:	607b      	str	r3, [r7, #4]
	return buf->data + buf->len;
   1bd8a:	89ab      	ldrh	r3, [r5, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
   1bd8c:	68a8      	ldr	r0, [r5, #8]
   1bd8e:	2204      	movs	r2, #4
   1bd90:	3b0c      	subs	r3, #12
   1bd92:	18b9      	adds	r1, r7, r2
   1bd94:	4418      	add	r0, r3
   1bd96:	f00a ffbf 	bl	26d18 <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
   1bd9a:	89aa      	ldrh	r2, [r5, #12]
   1bd9c:	68a9      	ldr	r1, [r5, #8]
   1bd9e:	3a0c      	subs	r2, #12
   1bda0:	b292      	uxth	r2, r2
   1bda2:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1bda6:	f7ff f821 	bl	1adec <smp_sign_buf>
	if (err) {
   1bdaa:	b1b0      	cbz	r0, 1bdda <bt_smp_sign+0xaa>
		BT_ERR("Unable to create signature for %s",
   1bdac:	4630      	mov	r0, r6
   1bdae:	f7f8 ff6f 	bl	14c90 <bt_addr_le_str_real>
   1bdb2:	466c      	mov	r4, sp
   1bdb4:	b088      	sub	sp, #32
   1bdb6:	466a      	mov	r2, sp
   1bdb8:	4b0d      	ldr	r3, [pc, #52]	; (1bdf0 <bt_smp_sign+0xc0>)
   1bdba:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1bdbe:	2302      	movs	r3, #2
   1bdc0:	7713      	strb	r3, [r2, #28]
   1bdc2:	4b09      	ldr	r3, [pc, #36]	; (1bde8 <bt_smp_sign+0xb8>)
   1bdc4:	4809      	ldr	r0, [pc, #36]	; (1bdec <bt_smp_sign+0xbc>)
   1bdc6:	f842 3f10 	str.w	r3, [r2, #16]!
   1bdca:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1bdce:	f00c fdc0 	bl	28952 <z_log_msg_static_create.constprop.0>
		return -EIO;
   1bdd2:	f06f 0004 	mvn.w	r0, #4
   1bdd6:	46a5      	mov	sp, r4
   1bdd8:	e7cd      	b.n	1bd76 <bt_smp_sign+0x46>
	keys->local_csrk.cnt++;
   1bdda:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1bddc:	3301      	adds	r3, #1
   1bdde:	6523      	str	r3, [r4, #80]	; 0x50
	return 0;
   1bde0:	e7c9      	b.n	1bd76 <bt_smp_sign+0x46>
   1bde2:	bf00      	nop
   1bde4:	0002da16 	.word	0x0002da16
   1bde8:	01000003 	.word	0x01000003
   1bdec:	0002ac40 	.word	0x0002ac40
   1bdf0:	0002d9d2 	.word	0x0002d9d2

0001bdf4 <bt_smp_start_security>:
{
   1bdf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1bdf8:	f890 8003 	ldrb.w	r8, [r0, #3]
   1bdfc:	f1b8 0f01 	cmp.w	r8, #1
{
   1be00:	4605      	mov	r5, r0
	switch (conn->role) {
   1be02:	d005      	beq.n	1be10 <bt_smp_start_security+0x1c>
		return -EINVAL;
   1be04:	f06f 0415 	mvn.w	r4, #21
}
   1be08:	4620      	mov	r0, r4
   1be0a:	b003      	add	sp, #12
   1be0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1be10:	f00c fda2 	bl	28958 <smp_chan_get>
	if (!smp) {
   1be14:	4606      	mov	r6, r0
   1be16:	2800      	cmp	r0, #0
   1be18:	f000 80b1 	beq.w	1bf7e <bt_smp_start_security+0x18a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1be1c:	1d07      	adds	r7, r0, #4
   1be1e:	2104      	movs	r1, #4
   1be20:	4638      	mov	r0, r7
   1be22:	f00c fcb1 	bl	28788 <atomic_test_bit>
   1be26:	2800      	cmp	r0, #0
   1be28:	f040 80ac 	bne.w	1bf84 <bt_smp_start_security+0x190>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1be2c:	2103      	movs	r1, #3
   1be2e:	4638      	mov	r0, r7
   1be30:	f00c fcaa 	bl	28788 <atomic_test_bit>
   1be34:	b110      	cbz	r0, 1be3c <bt_smp_start_security+0x48>
		return -EBUSY;
   1be36:	f06f 040f 	mvn.w	r4, #15
   1be3a:	e7e5      	b.n	1be08 <bt_smp_start_security+0x14>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1be3c:	4641      	mov	r1, r8
   1be3e:	4638      	mov	r0, r7
   1be40:	f00c fca2 	bl	28788 <atomic_test_bit>
   1be44:	2800      	cmp	r0, #0
   1be46:	d1f6      	bne.n	1be36 <bt_smp_start_security+0x42>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1be48:	4630      	mov	r0, r6
   1be4a:	f7fe ff5d 	bl	1ad08 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1be4e:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
   1be52:	7a9b      	ldrb	r3, [r3, #10]
   1be54:	2b03      	cmp	r3, #3
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1be56:	4604      	mov	r4, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1be58:	d042      	beq.n	1bee0 <bt_smp_start_security+0xec>
   1be5a:	d832      	bhi.n	1bec2 <bt_smp_start_security+0xce>
   1be5c:	3b01      	subs	r3, #1
   1be5e:	2b01      	cmp	r3, #1
   1be60:	d94a      	bls.n	1bef8 <bt_smp_start_security+0x104>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1be62:	210a      	movs	r1, #10
   1be64:	1d28      	adds	r0, r5, #4
   1be66:	f00c fc8f 	bl	28788 <atomic_test_bit>
   1be6a:	2800      	cmp	r0, #0
   1be6c:	d1ca      	bne.n	1be04 <bt_smp_start_security+0x10>
	if (!conn->le.keys) {
   1be6e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1be72:	b983      	cbnz	r3, 1be96 <bt_smp_start_security+0xa2>
						     conn->id, &conn->le.dst);
   1be74:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1be78:	7a29      	ldrb	r1, [r5, #8]
   1be7a:	4622      	mov	r2, r4
   1be7c:	2020      	movs	r0, #32
   1be7e:	f000 fe3f 	bl	1cb00 <bt_keys_find>
   1be82:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   1be86:	b930      	cbnz	r0, 1be96 <bt_smp_start_security+0xa2>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1be88:	7a29      	ldrb	r1, [r5, #8]
   1be8a:	4622      	mov	r2, r4
   1be8c:	2004      	movs	r0, #4
   1be8e:	f000 fe37 	bl	1cb00 <bt_keys_find>
   1be92:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   1be96:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1be9a:	2b00      	cmp	r3, #0
   1be9c:	d0b2      	beq.n	1be04 <bt_smp_start_security+0x10>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   1be9e:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   1bea0:	f012 0f24 	tst.w	r2, #36	; 0x24
   1bea4:	d0ae      	beq.n	1be04 <bt_smp_start_security+0x10>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   1bea6:	7aa9      	ldrb	r1, [r5, #10]
   1bea8:	2902      	cmp	r1, #2
   1beaa:	d925      	bls.n	1bef8 <bt_smp_start_security+0x104>
   1beac:	7b58      	ldrb	r0, [r3, #13]
   1beae:	07c0      	lsls	r0, r0, #31
   1beb0:	d5a8      	bpl.n	1be04 <bt_smp_start_security+0x10>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   1beb2:	2903      	cmp	r1, #3
   1beb4:	d020      	beq.n	1bef8 <bt_smp_start_security+0x104>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   1beb6:	0692      	lsls	r2, r2, #26
   1beb8:	d5a4      	bpl.n	1be04 <bt_smp_start_security+0x10>
   1beba:	7b1b      	ldrb	r3, [r3, #12]
   1bebc:	2b10      	cmp	r3, #16
   1bebe:	d1a1      	bne.n	1be04 <bt_smp_start_security+0x10>
   1bec0:	e01a      	b.n	1bef8 <bt_smp_start_security+0x104>
	switch (smp->chan.chan.conn->required_sec_level) {
   1bec2:	2b04      	cmp	r3, #4
   1bec4:	d1cd      	bne.n	1be62 <bt_smp_start_security+0x6e>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1bec6:	4630      	mov	r0, r6
   1bec8:	f7fe ff3c 	bl	1ad44 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1becc:	2803      	cmp	r0, #3
   1bece:	d102      	bne.n	1bed6 <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1bed0:	b1fc      	cbz	r4, 1bf12 <bt_smp_start_security+0x11e>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1bed2:	68e4      	ldr	r4, [r4, #12]
   1bed4:	b10c      	cbz	r4, 1beda <bt_smp_start_security+0xe6>
   1bed6:	4b2d      	ldr	r3, [pc, #180]	; (1bf8c <bt_smp_start_security+0x198>)
   1bed8:	781c      	ldrb	r4, [r3, #0]
   1beda:	f004 0401 	and.w	r4, r4, #1
   1bede:	e009      	b.n	1bef4 <bt_smp_start_security+0x100>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1bee0:	4630      	mov	r0, r6
   1bee2:	f7fe ff2f 	bl	1ad44 <get_io_capa>
   1bee6:	2803      	cmp	r0, #3
   1bee8:	d111      	bne.n	1bf0e <bt_smp_start_security+0x11a>
   1beea:	b11c      	cbz	r4, 1bef4 <bt_smp_start_security+0x100>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1beec:	68e4      	ldr	r4, [r4, #12]
   1beee:	3c00      	subs	r4, #0
   1bef0:	bf18      	it	ne
   1bef2:	2401      	movne	r4, #1
	if (!(sec_level_reachable(smp) || smp_keys_check(conn))) {
   1bef4:	2c00      	cmp	r4, #0
   1bef6:	d0b4      	beq.n	1be62 <bt_smp_start_security+0x6e>
	if (!conn->le.keys) {
   1bef8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1befc:	b15b      	cbz	r3, 1bf16 <bt_smp_start_security+0x122>
	if (smp_init(smp) != 0) {
   1befe:	4630      	mov	r0, r6
   1bf00:	f7fe fff0 	bl	1aee4 <smp_init>
   1bf04:	4604      	mov	r4, r0
   1bf06:	b190      	cbz	r0, 1bf2e <bt_smp_start_security+0x13a>
		return -ENOBUFS;
   1bf08:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1bf0c:	e77c      	b.n	1be08 <bt_smp_start_security+0x14>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1bf0e:	4644      	mov	r4, r8
   1bf10:	e7f0      	b.n	1bef4 <bt_smp_start_security+0x100>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1bf12:	2400      	movs	r4, #0
   1bf14:	e7e1      	b.n	1beda <bt_smp_start_security+0xe6>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1bf16:	7a28      	ldrb	r0, [r5, #8]
   1bf18:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1bf1c:	f000 fd7a 	bl	1ca14 <bt_keys_get_addr>
   1bf20:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   1bf24:	2800      	cmp	r0, #0
   1bf26:	d1ea      	bne.n	1befe <bt_smp_start_security+0x10a>
			return -ENOMEM;
   1bf28:	f06f 040b 	mvn.w	r4, #11
   1bf2c:	e76c      	b.n	1be08 <bt_smp_start_security+0x14>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1bf2e:	210b      	movs	r1, #11
   1bf30:	4630      	mov	r0, r6
   1bf32:	f00c fd30 	bl	28996 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1bf36:	4680      	mov	r8, r0
   1bf38:	2800      	cmp	r0, #0
   1bf3a:	d0e5      	beq.n	1bf08 <bt_smp_start_security+0x114>
	return net_buf_simple_add(&buf->b, len);
   1bf3c:	2101      	movs	r1, #1
   1bf3e:	3008      	adds	r0, #8
   1bf40:	f00d f8c8 	bl	290d4 <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1bf44:	2109      	movs	r1, #9
   1bf46:	4681      	mov	r9, r0
   1bf48:	4630      	mov	r0, r6
   1bf4a:	f7fe ff1f 	bl	1ad8c <get_auth>
   1bf4e:	4623      	mov	r3, r4
   1bf50:	f889 0000 	strb.w	r0, [r9]
   1bf54:	4642      	mov	r2, r8
   1bf56:	9400      	str	r4, [sp, #0]
   1bf58:	2106      	movs	r1, #6
   1bf5a:	4628      	mov	r0, r5
   1bf5c:	f00b fb3e 	bl	275dc <bt_l2cap_send_cb>
	if (err) {
   1bf60:	4604      	mov	r4, r0
   1bf62:	b118      	cbz	r0, 1bf6c <bt_smp_start_security+0x178>
		net_buf_unref(req_buf);
   1bf64:	4640      	mov	r0, r8
   1bf66:	f001 f85f 	bl	1d028 <net_buf_unref>
		return err;
   1bf6a:	e74d      	b.n	1be08 <bt_smp_start_security+0x14>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1bf6c:	4638      	mov	r0, r7
   1bf6e:	210f      	movs	r1, #15
   1bf70:	f00c fcfd 	bl	2896e <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1bf74:	2101      	movs	r1, #1
   1bf76:	4630      	mov	r0, r6
   1bf78:	f00c fcf9 	bl	2896e <atomic_set_bit>
	return 0;
   1bf7c:	e744      	b.n	1be08 <bt_smp_start_security+0x14>
		return -ENOTCONN;
   1bf7e:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1bf82:	e741      	b.n	1be08 <bt_smp_start_security+0x14>
		return -EIO;
   1bf84:	f06f 0404 	mvn.w	r4, #4
   1bf88:	e73e      	b.n	1be08 <bt_smp_start_security+0x14>
   1bf8a:	bf00      	nop
   1bf8c:	20003bac 	.word	0x20003bac

0001bf90 <smp_pairing_complete>:
{
   1bf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1bf92:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
{
   1bf96:	4606      	mov	r6, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1bf98:	1d05      	adds	r5, r0, #4
	if (!status) {
   1bf9a:	b9f1      	cbnz	r1, 1bfda <smp_pairing_complete+0x4a>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1bf9c:	210d      	movs	r1, #13
   1bf9e:	4628      	mov	r0, r5
   1bfa0:	f00c fbf2 	bl	28788 <atomic_test_bit>
		if (bond_flag) {
   1bfa4:	4607      	mov	r7, r0
   1bfa6:	b118      	cbz	r0, 1bfb0 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   1bfa8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1bfac:	f000 ff2c 	bl	1ce08 <bt_keys_store>
	return list->head;
   1bfb0:	4b31      	ldr	r3, [pc, #196]	; (1c078 <smp_pairing_complete+0xe8>)
   1bfb2:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1bfb4:	2b00      	cmp	r3, #0
   1bfb6:	d051      	beq.n	1c05c <smp_pairing_complete+0xcc>
	return node->next;
   1bfb8:	f853 590c 	ldr.w	r5, [r3], #-12
   1bfbc:	b105      	cbz	r5, 1bfc0 <smp_pairing_complete+0x30>
   1bfbe:	3d0c      	subs	r5, #12
			if (listener->pairing_complete) {
   1bfc0:	681b      	ldr	r3, [r3, #0]
   1bfc2:	b113      	cbz	r3, 1bfca <smp_pairing_complete+0x3a>
				listener->pairing_complete(conn, bond_flag);
   1bfc4:	4639      	mov	r1, r7
   1bfc6:	4620      	mov	r0, r4
   1bfc8:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1bfca:	2d00      	cmp	r5, #0
   1bfcc:	d046      	beq.n	1c05c <smp_pairing_complete+0xcc>
   1bfce:	68ea      	ldr	r2, [r5, #12]
   1bfd0:	b102      	cbz	r2, 1bfd4 <smp_pairing_complete+0x44>
   1bfd2:	3a0c      	subs	r2, #12
{
   1bfd4:	462b      	mov	r3, r5
   1bfd6:	4615      	mov	r5, r2
   1bfd8:	e7f2      	b.n	1bfc0 <smp_pairing_complete+0x30>
	switch (smp_err) {
   1bfda:	3901      	subs	r1, #1
   1bfdc:	b2c9      	uxtb	r1, r1
   1bfde:	290e      	cmp	r1, #14
   1bfe0:	bf9c      	itt	ls
   1bfe2:	4b26      	ldrls	r3, [pc, #152]	; (1c07c <smp_pairing_complete+0xec>)
   1bfe4:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   1bfe6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   1bfea:	bf88      	it	hi
   1bfec:	2709      	movhi	r7, #9
		if (conn->le.keys &&
   1bfee:	b143      	cbz	r3, 1c002 <smp_pairing_complete+0x72>
   1bff0:	7b1b      	ldrb	r3, [r3, #12]
   1bff2:	bb63      	cbnz	r3, 1c04e <smp_pairing_complete+0xbe>
			bt_keys_clear(conn->le.keys);
   1bff4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1bff8:	f000 fde0 	bl	1cbbc <bt_keys_clear>
			conn->le.keys = NULL;
   1bffc:	2300      	movs	r3, #0
   1bffe:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1c002:	2102      	movs	r1, #2
   1c004:	4628      	mov	r0, r5
   1c006:	f00c fbbf 	bl	28788 <atomic_test_bit>
   1c00a:	b940      	cbnz	r0, 1c01e <smp_pairing_complete+0x8e>
	switch (err) {
   1c00c:	2f07      	cmp	r7, #7
   1c00e:	bf96      	itet	ls
   1c010:	4b1b      	ldrls	r3, [pc, #108]	; (1c080 <smp_pairing_complete+0xf0>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1c012:	211f      	movhi	r1, #31
   1c014:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
   1c016:	463a      	mov	r2, r7
   1c018:	4620      	mov	r0, r4
   1c01a:	f7fb fe01 	bl	17c20 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c01e:	2103      	movs	r1, #3
   1c020:	4628      	mov	r0, r5
   1c022:	f00c fbb1 	bl	28788 <atomic_test_bit>
   1c026:	b1c8      	cbz	r0, 1c05c <smp_pairing_complete+0xcc>
	return list->head;
   1c028:	4b13      	ldr	r3, [pc, #76]	; (1c078 <smp_pairing_complete+0xe8>)
   1c02a:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1c02c:	b1b3      	cbz	r3, 1c05c <smp_pairing_complete+0xcc>
	return node->next;
   1c02e:	f853 590c 	ldr.w	r5, [r3], #-12
   1c032:	b105      	cbz	r5, 1c036 <smp_pairing_complete+0xa6>
   1c034:	3d0c      	subs	r5, #12
				if (listener->pairing_failed) {
   1c036:	685b      	ldr	r3, [r3, #4]
   1c038:	b113      	cbz	r3, 1c040 <smp_pairing_complete+0xb0>
					listener->pairing_failed(conn, security_err);
   1c03a:	4639      	mov	r1, r7
   1c03c:	4620      	mov	r0, r4
   1c03e:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1c040:	b165      	cbz	r5, 1c05c <smp_pairing_complete+0xcc>
   1c042:	68ea      	ldr	r2, [r5, #12]
   1c044:	b102      	cbz	r2, 1c048 <smp_pairing_complete+0xb8>
   1c046:	3a0c      	subs	r2, #12
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1c048:	462b      	mov	r3, r5
   1c04a:	4615      	mov	r5, r2
   1c04c:	e7f3      	b.n	1c036 <smp_pairing_complete+0xa6>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1c04e:	2102      	movs	r1, #2
   1c050:	4628      	mov	r0, r5
   1c052:	f00c fb99 	bl	28788 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1c056:	2800      	cmp	r0, #0
   1c058:	d1cc      	bne.n	1bff4 <smp_pairing_complete+0x64>
   1c05a:	e7d2      	b.n	1c002 <smp_pairing_complete+0x72>
	smp_reset(smp);
   1c05c:	4630      	mov	r0, r6
   1c05e:	f00c fd2e 	bl	28abe <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1c062:	7a62      	ldrb	r2, [r4, #9]
   1c064:	7aa3      	ldrb	r3, [r4, #10]
   1c066:	429a      	cmp	r2, r3
   1c068:	d004      	beq.n	1c074 <smp_pairing_complete+0xe4>
		bt_smp_start_security(conn);
   1c06a:	4620      	mov	r0, r4
}
   1c06c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1c070:	f7ff bec0 	b.w	1bdf4 <bt_smp_start_security>
}
   1c074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c076:	bf00      	nop
   1c078:	20002ae0 	.word	0x20002ae0
   1c07c:	0002dc02 	.word	0x0002dc02
   1c080:	0002dc1a 	.word	0x0002dc1a

0001c084 <bt_smp_recv>:
{
   1c084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c088:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   1c08a:	898b      	ldrh	r3, [r1, #12]
{
   1c08c:	af00      	add	r7, sp, #0
   1c08e:	4680      	mov	r8, r0
   1c090:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1c092:	b97b      	cbnz	r3, 1c0b4 <bt_smp_recv+0x30>
		BT_ERR("Too small SMP PDU received");
   1c094:	4b44      	ldr	r3, [pc, #272]	; (1c1a8 <bt_smp_recv+0x124>)
   1c096:	617b      	str	r3, [r7, #20]
   1c098:	4844      	ldr	r0, [pc, #272]	; (1c1ac <bt_smp_recv+0x128>)
   1c09a:	2302      	movs	r3, #2
   1c09c:	f107 0210 	add.w	r2, r7, #16
   1c0a0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c0a4:	613b      	str	r3, [r7, #16]
   1c0a6:	f00c fc54 	bl	28952 <z_log_msg_static_create.constprop.0>
}
   1c0aa:	2000      	movs	r0, #0
   1c0ac:	3718      	adds	r7, #24
   1c0ae:	46bd      	mov	sp, r7
   1c0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1c0b4:	2101      	movs	r1, #1
   1c0b6:	f105 0008 	add.w	r0, r5, #8
   1c0ba:	f00d f832 	bl	29122 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1c0be:	2104      	movs	r1, #4
   1c0c0:	4606      	mov	r6, r0
   1c0c2:	f1a8 00e8 	sub.w	r0, r8, #232	; 0xe8
   1c0c6:	f00c fb5f 	bl	28788 <atomic_test_bit>
   1c0ca:	f1a8 04ec 	sub.w	r4, r8, #236	; 0xec
   1c0ce:	7831      	ldrb	r1, [r6, #0]
   1c0d0:	b178      	cbz	r0, 1c0f2 <bt_smp_recv+0x6e>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1c0d2:	466c      	mov	r4, sp
   1c0d4:	b088      	sub	sp, #32
   1c0d6:	466a      	mov	r2, sp
   1c0d8:	4b35      	ldr	r3, [pc, #212]	; (1c1b0 <bt_smp_recv+0x12c>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1c0da:	4834      	ldr	r0, [pc, #208]	; (1c1ac <bt_smp_recv+0x128>)
   1c0dc:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1c0e0:	2303      	movs	r3, #3
   1c0e2:	f842 3f10 	str.w	r3, [r2, #16]!
   1c0e6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c0ea:	f00c fc32 	bl	28952 <z_log_msg_static_create.constprop.0>
   1c0ee:	46a5      	mov	sp, r4
		return 0;
   1c0f0:	e7db      	b.n	1c0aa <bt_smp_recv+0x26>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1c0f2:	290e      	cmp	r1, #14
   1c0f4:	d904      	bls.n	1c100 <bt_smp_recv+0x7c>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1c0f6:	466c      	mov	r4, sp
   1c0f8:	b088      	sub	sp, #32
   1c0fa:	466a      	mov	r2, sp
   1c0fc:	4b2d      	ldr	r3, [pc, #180]	; (1c1b4 <bt_smp_recv+0x130>)
   1c0fe:	e7ec      	b.n	1c0da <bt_smp_recv+0x56>
	if (!handlers[hdr->code].func) {
   1c100:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1c1b8 <bt_smp_recv+0x134>
   1c104:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   1c108:	b99b      	cbnz	r3, 1c132 <bt_smp_recv+0xae>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1c10a:	466d      	mov	r5, sp
   1c10c:	b088      	sub	sp, #32
   1c10e:	466a      	mov	r2, sp
   1c110:	4b2a      	ldr	r3, [pc, #168]	; (1c1bc <bt_smp_recv+0x138>)
   1c112:	4826      	ldr	r0, [pc, #152]	; (1c1ac <bt_smp_recv+0x128>)
   1c114:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1c118:	2303      	movs	r3, #3
   1c11a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c11e:	f842 3f10 	str.w	r3, [r2, #16]!
   1c122:	f00c fc16 	bl	28952 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1c126:	2107      	movs	r1, #7
   1c128:	46ad      	mov	sp, r5
		smp_error(smp, err);
   1c12a:	4620      	mov	r0, r4
   1c12c:	f00c fe45 	bl	28dba <smp_error>
   1c130:	e7bb      	b.n	1c0aa <bt_smp_recv+0x26>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1c132:	4620      	mov	r0, r4
   1c134:	f00c fcab 	bl	28a8e <atomic_test_and_clear_bit>
   1c138:	7833      	ldrb	r3, [r6, #0]
   1c13a:	b998      	cbnz	r0, 1c164 <bt_smp_recv+0xe0>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1c13c:	466d      	mov	r5, sp
   1c13e:	b088      	sub	sp, #32
   1c140:	466a      	mov	r2, sp
   1c142:	491f      	ldr	r1, [pc, #124]	; (1c1c0 <bt_smp_recv+0x13c>)
   1c144:	4819      	ldr	r0, [pc, #100]	; (1c1ac <bt_smp_recv+0x128>)
   1c146:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1c14a:	2303      	movs	r3, #3
   1c14c:	f842 3f10 	str.w	r3, [r2, #16]!
   1c150:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c154:	f00c fbfd 	bl	28952 <z_log_msg_static_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1c158:	7833      	ldrb	r3, [r6, #0]
   1c15a:	2b05      	cmp	r3, #5
   1c15c:	46ad      	mov	sp, r5
   1c15e:	d0a4      	beq.n	1c0aa <bt_smp_recv+0x26>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1c160:	2108      	movs	r1, #8
   1c162:	e7e2      	b.n	1c12a <bt_smp_recv+0xa6>
	if (buf->len != handlers[hdr->code].expect_len) {
   1c164:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1c168:	89a9      	ldrh	r1, [r5, #12]
   1c16a:	7912      	ldrb	r2, [r2, #4]
   1c16c:	428a      	cmp	r2, r1
   1c16e:	d011      	beq.n	1c194 <bt_smp_recv+0x110>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1c170:	466d      	mov	r5, sp
   1c172:	b088      	sub	sp, #32
   1c174:	466a      	mov	r2, sp
   1c176:	4813      	ldr	r0, [pc, #76]	; (1c1c4 <bt_smp_recv+0x140>)
   1c178:	61d3      	str	r3, [r2, #28]
   1c17a:	2304      	movs	r3, #4
   1c17c:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1c180:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c184:	f842 3f10 	str.w	r3, [r2, #16]!
   1c188:	4808      	ldr	r0, [pc, #32]	; (1c1ac <bt_smp_recv+0x128>)
   1c18a:	f00c fbe2 	bl	28952 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1c18e:	210a      	movs	r1, #10
   1c190:	46ad      	mov	sp, r5
   1c192:	e7ca      	b.n	1c12a <bt_smp_recv+0xa6>
	err = handlers[hdr->code].func(smp, buf);
   1c194:	4629      	mov	r1, r5
   1c196:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
   1c19a:	4620      	mov	r0, r4
   1c19c:	4798      	blx	r3
	if (err) {
   1c19e:	4601      	mov	r1, r0
   1c1a0:	2800      	cmp	r0, #0
   1c1a2:	d082      	beq.n	1c0aa <bt_smp_recv+0x26>
   1c1a4:	e7c1      	b.n	1c12a <bt_smp_recv+0xa6>
   1c1a6:	bf00      	nop
   1c1a8:	0002da37 	.word	0x0002da37
   1c1ac:	0002ac40 	.word	0x0002ac40
   1c1b0:	0002da52 	.word	0x0002da52
   1c1b4:	0002da83 	.word	0x0002da83
   1c1b8:	0002b644 	.word	0x0002b644
   1c1bc:	0002daa5 	.word	0x0002daa5
   1c1c0:	0002dabf 	.word	0x0002dabf
   1c1c4:	0002d42e 	.word	0x0002d42e

0001c1c8 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1c1c8:	4b0e      	ldr	r3, [pc, #56]	; (1c204 <bt_smp_pkey_ready+0x3c>)
{
   1c1ca:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1c1cc:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1c1ce:	b918      	cbnz	r0, 1c1d8 <bt_smp_pkey_ready+0x10>
}
   1c1d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c1d4:	f7fe bdf8 	b.w	1adc8 <bt_smp_pkey_ready.part.0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c1d8:	4c0b      	ldr	r4, [pc, #44]	; (1c208 <bt_smp_pkey_ready+0x40>)
	z_impl_k_sem_give(sem);
   1c1da:	480c      	ldr	r0, [pc, #48]	; (1c20c <bt_smp_pkey_ready+0x44>)
   1c1dc:	f005 f89e 	bl	2131c <z_impl_k_sem_give>
   1c1e0:	f3bf 8f5b 	dmb	ish
   1c1e4:	6863      	ldr	r3, [r4, #4]
   1c1e6:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1c1ea:	065b      	lsls	r3, r3, #25
   1c1ec:	d509      	bpl.n	1c202 <bt_smp_pkey_ready+0x3a>
		err = smp_public_key_periph(smp);
   1c1ee:	4620      	mov	r0, r4
   1c1f0:	f7ff fa5c 	bl	1b6ac <smp_public_key_periph>
		if (err) {
   1c1f4:	4601      	mov	r1, r0
   1c1f6:	b120      	cbz	r0, 1c202 <bt_smp_pkey_ready+0x3a>
			smp_error(smp, err);
   1c1f8:	4620      	mov	r0, r4
}
   1c1fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   1c1fe:	f00c bddc 	b.w	28dba <smp_error>
}
   1c202:	bd10      	pop	{r4, pc}
   1c204:	20002c4c 	.word	0x20002c4c
   1c208:	20002020 	.word	0x20002020
   1c20c:	20000a20 	.word	0x20000a20

0001c210 <smp_signing_info>:
{
   1c210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c214:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1c216:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
{
   1c21a:	af00      	add	r7, sp, #0
   1c21c:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c21e:	210d      	movs	r1, #13
   1c220:	3004      	adds	r0, #4
   1c222:	f00c fab1 	bl	28788 <atomic_test_bit>
   1c226:	b330      	cbz	r0, 1c276 <smp_signing_info+0x66>
					&conn->le.dst);
   1c228:	f106 0588 	add.w	r5, r6, #136	; 0x88
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   1c22c:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
   1c22e:	f8d3 8008 	ldr.w	r8, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   1c232:	462a      	mov	r2, r5
   1c234:	2010      	movs	r0, #16
   1c236:	f00c fe93 	bl	28f60 <bt_keys_get_type>
		if (!keys) {
   1c23a:	b9b8      	cbnz	r0, 1c26c <smp_signing_info+0x5c>
			BT_ERR("Unable to get keys for %s",
   1c23c:	4628      	mov	r0, r5
   1c23e:	f7f8 fd27 	bl	14c90 <bt_addr_le_str_real>
   1c242:	466c      	mov	r4, sp
   1c244:	b088      	sub	sp, #32
   1c246:	466a      	mov	r2, sp
   1c248:	4b12      	ldr	r3, [pc, #72]	; (1c294 <smp_signing_info+0x84>)
   1c24a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c24e:	2302      	movs	r3, #2
   1c250:	7713      	strb	r3, [r2, #28]
   1c252:	4b11      	ldr	r3, [pc, #68]	; (1c298 <smp_signing_info+0x88>)
   1c254:	4811      	ldr	r0, [pc, #68]	; (1c29c <smp_signing_info+0x8c>)
   1c256:	f842 3f10 	str.w	r3, [r2, #16]!
   1c25a:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1c25e:	f00c fb78 	bl	28952 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1c262:	2008      	movs	r0, #8
   1c264:	46a5      	mov	sp, r4
}
   1c266:	46bd      	mov	sp, r7
   1c268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->remote_csrk.val, req->csrk,
   1c26c:	2210      	movs	r2, #16
   1c26e:	4641      	mov	r1, r8
   1c270:	3054      	adds	r0, #84	; 0x54
   1c272:	f00a fd51 	bl	26d18 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
   1c276:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1c27a:	f023 0304 	bic.w	r3, r3, #4
   1c27e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (!smp->local_dist && !smp->remote_dist) {
   1c282:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1c286:	b91d      	cbnz	r5, 1c290 <smp_signing_info+0x80>
		smp_pairing_complete(smp, 0);
   1c288:	4629      	mov	r1, r5
   1c28a:	4620      	mov	r0, r4
   1c28c:	f7ff fe80 	bl	1bf90 <smp_pairing_complete>
	return 0;
   1c290:	2000      	movs	r0, #0
   1c292:	e7e8      	b.n	1c266 <smp_signing_info+0x56>
   1c294:	0002d887 	.word	0x0002d887
   1c298:	01000003 	.word	0x01000003
   1c29c:	0002ac40 	.word	0x0002ac40

0001c2a0 <smp_ident_addr_info>:
{
   1c2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1c2a4:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1c2a6:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1c2aa:	7833      	ldrb	r3, [r6, #0]
{
   1c2ac:	af00      	add	r7, sp, #0
   1c2ae:	4604      	mov	r4, r0
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1c2b0:	f105 0988 	add.w	r9, r5, #136	; 0x88
   1c2b4:	b39b      	cbz	r3, 1c31e <smp_ident_addr_info+0x7e>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1c2b6:	79b3      	ldrb	r3, [r6, #6]
   1c2b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c2bc:	2bc0      	cmp	r3, #192	; 0xc0
   1c2be:	d02e      	beq.n	1c31e <smp_ident_addr_info+0x7e>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1c2c0:	4630      	mov	r0, r6
   1c2c2:	f7f8 fce5 	bl	14c90 <bt_addr_le_str_real>
   1c2c6:	466e      	mov	r6, sp
   1c2c8:	b088      	sub	sp, #32
   1c2ca:	466c      	mov	r4, sp
   1c2cc:	4b52      	ldr	r3, [pc, #328]	; (1c418 <smp_ident_addr_info+0x178>)
   1c2ce:	f8df 814c 	ldr.w	r8, [pc, #332]	; 1c41c <smp_ident_addr_info+0x17c>
   1c2d2:	4625      	mov	r5, r4
   1c2d4:	f04f 0a02 	mov.w	sl, #2
   1c2d8:	e9c4 3005 	strd	r3, r0, [r4, #20]
   1c2dc:	f884 a01c 	strb.w	sl, [r4, #28]
   1c2e0:	f845 8f10 	str.w	r8, [r5, #16]!
   1c2e4:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1c2e8:	462a      	mov	r2, r5
   1c2ea:	484d      	ldr	r0, [pc, #308]	; (1c420 <smp_ident_addr_info+0x180>)
   1c2ec:	f00c fb31 	bl	28952 <z_log_msg_static_create.constprop.0>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1c2f0:	4648      	mov	r0, r9
   1c2f2:	46b5      	mov	sp, r6
   1c2f4:	f7f8 fccc 	bl	14c90 <bt_addr_le_str_real>
   1c2f8:	46a5      	mov	sp, r4
   1c2fa:	4b4a      	ldr	r3, [pc, #296]	; (1c424 <smp_ident_addr_info+0x184>)
   1c2fc:	f884 a01c 	strb.w	sl, [r4, #28]
   1c300:	e9c4 3005 	strd	r3, r0, [r4, #20]
   1c304:	f8c4 8010 	str.w	r8, [r4, #16]
   1c308:	4845      	ldr	r0, [pc, #276]	; (1c420 <smp_ident_addr_info+0x180>)
   1c30a:	462a      	mov	r2, r5
   1c30c:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1c310:	f00c fb1f 	bl	28952 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   1c314:	200a      	movs	r0, #10
   1c316:	46b5      	mov	sp, r6
}
   1c318:	46bd      	mov	sp, r7
   1c31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return memcmp(a, b, sizeof(*a));
   1c31e:	2207      	movs	r2, #7
   1c320:	4631      	mov	r1, r6
   1c322:	4648      	mov	r0, r9
   1c324:	f00a fccf 	bl	26cc6 <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   1c328:	b168      	cbz	r0, 1c346 <smp_ident_addr_info+0xa6>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1c32a:	7a28      	ldrb	r0, [r5, #8]
   1c32c:	4631      	mov	r1, r6
   1c32e:	f000 fc35 	bl	1cb9c <bt_keys_find_addr>
		if (keys) {
   1c332:	4680      	mov	r8, r0
   1c334:	b138      	cbz	r0, 1c346 <smp_ident_addr_info+0xa6>
			if (!update_keys_check(smp, keys)) {
   1c336:	4601      	mov	r1, r0
   1c338:	4620      	mov	r0, r4
   1c33a:	f00c fa2e 	bl	2879a <update_keys_check>
   1c33e:	b318      	cbz	r0, 1c388 <smp_ident_addr_info+0xe8>
			bt_keys_clear(keys);
   1c340:	4640      	mov	r0, r8
   1c342:	f000 fc3b 	bl	1cbbc <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c346:	210d      	movs	r1, #13
   1c348:	1d20      	adds	r0, r4, #4
   1c34a:	f00c fa1d 	bl	28788 <atomic_test_bit>
   1c34e:	2800      	cmp	r0, #0
   1c350:	d049      	beq.n	1c3e6 <smp_ident_addr_info+0x146>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1c352:	7a29      	ldrb	r1, [r5, #8]
   1c354:	464a      	mov	r2, r9
   1c356:	2002      	movs	r0, #2
   1c358:	f00c fe02 	bl	28f60 <bt_keys_get_type>
		if (!keys) {
   1c35c:	4680      	mov	r8, r0
   1c35e:	b9a8      	cbnz	r0, 1c38c <smp_ident_addr_info+0xec>
			BT_ERR("Unable to get keys for %s",
   1c360:	4648      	mov	r0, r9
   1c362:	f7f8 fc95 	bl	14c90 <bt_addr_le_str_real>
   1c366:	466c      	mov	r4, sp
   1c368:	b088      	sub	sp, #32
   1c36a:	466a      	mov	r2, sp
   1c36c:	4b2e      	ldr	r3, [pc, #184]	; (1c428 <smp_ident_addr_info+0x188>)
   1c36e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c372:	2302      	movs	r3, #2
   1c374:	7713      	strb	r3, [r2, #28]
   1c376:	4b29      	ldr	r3, [pc, #164]	; (1c41c <smp_ident_addr_info+0x17c>)
   1c378:	f842 3f10 	str.w	r3, [r2, #16]!
   1c37c:	4828      	ldr	r0, [pc, #160]	; (1c420 <smp_ident_addr_info+0x180>)
   1c37e:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1c382:	f00c fae6 	bl	28952 <z_log_msg_static_create.constprop.0>
   1c386:	46a5      	mov	sp, r4
				return BT_SMP_ERR_UNSPECIFIED;
   1c388:	2008      	movs	r0, #8
   1c38a:	e7c5      	b.n	1c318 <smp_ident_addr_info+0x78>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1c38c:	78eb      	ldrb	r3, [r5, #3]
   1c38e:	2b00      	cmp	r3, #0
   1c390:	d13e      	bne.n	1c410 <smp_ident_addr_info+0x170>
			dst = &conn->le.resp_addr;
   1c392:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1c396:	780b      	ldrb	r3, [r1, #0]
   1c398:	2b01      	cmp	r3, #1
   1c39a:	d121      	bne.n	1c3e0 <smp_ident_addr_info+0x140>
		if (bt_addr_le_is_rpa(dst)) {
   1c39c:	798b      	ldrb	r3, [r1, #6]
   1c39e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c3a2:	2b40      	cmp	r3, #64	; 0x40
   1c3a4:	d11c      	bne.n	1c3e0 <smp_ident_addr_info+0x140>
	memcpy(dst, src, sizeof(*dst));
   1c3a6:	2206      	movs	r2, #6
   1c3a8:	3101      	adds	r1, #1
   1c3aa:	f108 003a 	add.w	r0, r8, #58	; 0x3a
   1c3ae:	f00a fcb3 	bl	26d18 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1c3b2:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   1c3b6:	b19b      	cbz	r3, 1c3e0 <smp_ident_addr_info+0x140>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1c3b8:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   1c3bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c3c0:	2bc0      	cmp	r3, #192	; 0xc0
   1c3c2:	d00d      	beq.n	1c3e0 <smp_ident_addr_info+0x140>
	memcpy(dst, src, sizeof(*dst));
   1c3c4:	2207      	movs	r2, #7
   1c3c6:	4631      	mov	r1, r6
   1c3c8:	f108 0001 	add.w	r0, r8, #1
   1c3cc:	f00a fca4 	bl	26d18 <memcpy>
   1c3d0:	2207      	movs	r2, #7
   1c3d2:	4631      	mov	r1, r6
   1c3d4:	4648      	mov	r0, r9
   1c3d6:	f00a fc9f 	bl	26d18 <memcpy>
				bt_conn_identity_resolved(conn);
   1c3da:	4628      	mov	r0, r5
   1c3dc:	f7fb fbf2 	bl	17bc4 <bt_conn_identity_resolved>
		bt_id_add(keys);
   1c3e0:	4640      	mov	r0, r8
   1c3e2:	f7fa fcdf 	bl	16da4 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1c3e6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1c3ea:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1c3ee:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1c3f0:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1c3f4:	d503      	bpl.n	1c3fe <smp_ident_addr_info+0x15e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1c3f6:	210a      	movs	r1, #10
   1c3f8:	4620      	mov	r0, r4
   1c3fa:	f00c fab8 	bl	2896e <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1c3fe:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1c402:	b91d      	cbnz	r5, 1c40c <smp_ident_addr_info+0x16c>
		smp_pairing_complete(smp, 0);
   1c404:	4629      	mov	r1, r5
   1c406:	4620      	mov	r0, r4
   1c408:	f7ff fdc2 	bl	1bf90 <smp_pairing_complete>
	return 0;
   1c40c:	2000      	movs	r0, #0
   1c40e:	e783      	b.n	1c318 <smp_ident_addr_info+0x78>
			dst = &conn->le.init_addr;
   1c410:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   1c414:	e7bf      	b.n	1c396 <smp_ident_addr_info+0xf6>
   1c416:	bf00      	nop
   1c418:	0002dada 	.word	0x0002dada
   1c41c:	01000003 	.word	0x01000003
   1c420:	0002ac40 	.word	0x0002ac40
   1c424:	0002d9ca 	.word	0x0002d9ca
   1c428:	0002d887 	.word	0x0002d887

0001c42c <smp_central_ident>:
{
   1c42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c430:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1c432:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   1c436:	af00      	add	r7, sp, #0
   1c438:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c43a:	210d      	movs	r1, #13
   1c43c:	3004      	adds	r0, #4
   1c43e:	f00c f9a3 	bl	28788 <atomic_test_bit>
   1c442:	b360      	cbz	r0, 1c49e <smp_central_ident+0x72>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1c444:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1c448:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1c44a:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1c44c:	4642      	mov	r2, r8
   1c44e:	2004      	movs	r0, #4
   1c450:	f00c fd86 	bl	28f60 <bt_keys_get_type>
		if (!keys) {
   1c454:	4605      	mov	r5, r0
   1c456:	b9b8      	cbnz	r0, 1c488 <smp_central_ident+0x5c>
			BT_ERR("Unable to get keys for %s",
   1c458:	4640      	mov	r0, r8
   1c45a:	f7f8 fc19 	bl	14c90 <bt_addr_le_str_real>
   1c45e:	466c      	mov	r4, sp
   1c460:	b088      	sub	sp, #32
   1c462:	466a      	mov	r2, sp
   1c464:	4b1a      	ldr	r3, [pc, #104]	; (1c4d0 <smp_central_ident+0xa4>)
   1c466:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c46a:	2302      	movs	r3, #2
   1c46c:	7713      	strb	r3, [r2, #28]
   1c46e:	4b19      	ldr	r3, [pc, #100]	; (1c4d4 <smp_central_ident+0xa8>)
   1c470:	4819      	ldr	r0, [pc, #100]	; (1c4d8 <smp_central_ident+0xac>)
   1c472:	f842 3f10 	str.w	r3, [r2, #16]!
   1c476:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1c47a:	f00c fa6a 	bl	28952 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1c47e:	2008      	movs	r0, #8
   1c480:	46a5      	mov	sp, r4
}
   1c482:	46bd      	mov	sp, r7
   1c484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1c488:	2202      	movs	r2, #2
   1c48a:	4631      	mov	r1, r6
   1c48c:	3018      	adds	r0, #24
   1c48e:	f00a fc43 	bl	26d18 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1c492:	2208      	movs	r2, #8
   1c494:	1cb1      	adds	r1, r6, #2
   1c496:	f105 0010 	add.w	r0, r5, #16
   1c49a:	f00a fc3d 	bl	26d18 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1c49e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1c4a2:	f023 0201 	bic.w	r2, r3, #1
   1c4a6:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1c4aa:	079a      	lsls	r2, r3, #30
   1c4ac:	d50c      	bpl.n	1c4c8 <smp_central_ident+0x9c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1c4ae:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1c4b0:	4620      	mov	r0, r4
   1c4b2:	f00c fa5c 	bl	2896e <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1c4b6:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1c4ba:	b91d      	cbnz	r5, 1c4c4 <smp_central_ident+0x98>
		smp_pairing_complete(smp, 0);
   1c4bc:	4629      	mov	r1, r5
   1c4be:	4620      	mov	r0, r4
   1c4c0:	f7ff fd66 	bl	1bf90 <smp_pairing_complete>
	return 0;
   1c4c4:	2000      	movs	r0, #0
   1c4c6:	e7dc      	b.n	1c482 <smp_central_ident+0x56>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1c4c8:	075b      	lsls	r3, r3, #29
   1c4ca:	d5f4      	bpl.n	1c4b6 <smp_central_ident+0x8a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1c4cc:	210a      	movs	r1, #10
   1c4ce:	e7ef      	b.n	1c4b0 <smp_central_ident+0x84>
   1c4d0:	0002d887 	.word	0x0002d887
   1c4d4:	01000003 	.word	0x01000003
   1c4d8:	0002ac40 	.word	0x0002ac40

0001c4dc <smp_pairing_failed>:
{
   1c4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c4e0:	460e      	mov	r6, r1
   1c4e2:	af00      	add	r7, sp, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   1c4e4:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   1c4e8:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c4ea:	f7fe fc0d 	bl	1ad08 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1c4ee:	68b6      	ldr	r6, [r6, #8]
	BT_ERR("reason 0x%x", req->reason);
   1c4f0:	46e9      	mov	r9, sp
   1c4f2:	b088      	sub	sp, #32
   1c4f4:	7833      	ldrb	r3, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c4f6:	4605      	mov	r5, r0
	BT_ERR("reason 0x%x", req->reason);
   1c4f8:	466a      	mov	r2, sp
   1c4fa:	4914      	ldr	r1, [pc, #80]	; (1c54c <smp_pairing_failed+0x70>)
   1c4fc:	4814      	ldr	r0, [pc, #80]	; (1c550 <smp_pairing_failed+0x74>)
   1c4fe:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1c502:	2303      	movs	r3, #3
   1c504:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c508:	f842 3f10 	str.w	r3, [r2, #16]!
   1c50c:	f00c fa21 	bl	28952 <z_log_msg_static_create.constprop.0>
   1c510:	46cd      	mov	sp, r9
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1c512:	f104 0904 	add.w	r9, r4, #4
   1c516:	210a      	movs	r1, #10
   1c518:	4648      	mov	r0, r9
   1c51a:	f00c fab8 	bl	28a8e <atomic_test_and_clear_bit>
   1c51e:	b140      	cbz	r0, 1c532 <smp_pairing_failed+0x56>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1c520:	b975      	cbnz	r5, 1c540 <smp_pairing_failed+0x64>
	smp_pairing_complete(smp, req->reason);
   1c522:	4620      	mov	r0, r4
   1c524:	7831      	ldrb	r1, [r6, #0]
   1c526:	f7ff fd33 	bl	1bf90 <smp_pairing_complete>
}
   1c52a:	2000      	movs	r0, #0
   1c52c:	46bd      	mov	sp, r7
   1c52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1c532:	210b      	movs	r1, #11
   1c534:	4648      	mov	r0, r9
   1c536:	f00c faaa 	bl	28a8e <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1c53a:	2800      	cmp	r0, #0
   1c53c:	d1f0      	bne.n	1c520 <smp_pairing_failed+0x44>
   1c53e:	e7f0      	b.n	1c522 <smp_pairing_failed+0x46>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1c540:	692b      	ldr	r3, [r5, #16]
   1c542:	2b00      	cmp	r3, #0
   1c544:	d0ed      	beq.n	1c522 <smp_pairing_failed+0x46>
			smp_auth_cb->cancel(conn);
   1c546:	4640      	mov	r0, r8
   1c548:	4798      	blx	r3
   1c54a:	e7ea      	b.n	1c522 <smp_pairing_failed+0x46>
   1c54c:	0002daee 	.word	0x0002daee
   1c550:	0002ac40 	.word	0x0002ac40

0001c554 <bt_smp_encrypt_change>:
{
   1c554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
   1c558:	4604      	mov	r4, r0
{
   1c55a:	b091      	sub	sp, #68	; 0x44
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1c55c:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1c560:	4605      	mov	r5, r0
   1c562:	af00      	add	r7, sp, #0
   1c564:	4688      	mov	r8, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1c566:	4630      	mov	r0, r6
   1c568:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1c56a:	f854 99ec 	ldr.w	r9, [r4], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1c56e:	f00c fa8e 	bl	28a8e <atomic_test_and_clear_bit>
   1c572:	b328      	cbz	r0, 1c5c0 <bt_smp_encrypt_change+0x6c>
	if (hci_status) {
   1c574:	f1b8 0f00 	cmp.w	r8, #0
   1c578:	d017      	beq.n	1c5aa <bt_smp_encrypt_change+0x56>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c57a:	2103      	movs	r1, #3
   1c57c:	4630      	mov	r0, r6
   1c57e:	f00c f903 	bl	28788 <atomic_test_bit>
   1c582:	b1e8      	cbz	r0, 1c5c0 <bt_smp_encrypt_change+0x6c>
			uint8_t smp_err = smp_err_get(
   1c584:	4640      	mov	r0, r8
   1c586:	f7f9 fdbf 	bl	16108 <bt_security_err_get>
	switch (auth_err) {
   1c58a:	3801      	subs	r0, #1
   1c58c:	b2c0      	uxtb	r0, r0
   1c58e:	2808      	cmp	r0, #8
   1c590:	bf9a      	itte	ls
   1c592:	4bb0      	ldrls	r3, [pc, #704]	; (1c854 <bt_smp_encrypt_change+0x300>)
   1c594:	5c1d      	ldrbls	r5, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1c596:	2500      	movhi	r5, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1c598:	2102      	movs	r1, #2
   1c59a:	4630      	mov	r0, r6
   1c59c:	f00c f9e7 	bl	2896e <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1c5a0:	4629      	mov	r1, r5
		smp_pairing_complete(smp, 0);
   1c5a2:	4620      	mov	r0, r4
   1c5a4:	f7ff fcf4 	bl	1bf90 <smp_pairing_complete>
   1c5a8:	e00a      	b.n	1c5c0 <bt_smp_encrypt_change+0x6c>
	if (!conn->encrypt) {
   1c5aa:	f899 300b 	ldrb.w	r3, [r9, #11]
   1c5ae:	b13b      	cbz	r3, 1c5c0 <bt_smp_encrypt_change+0x6c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c5b0:	2103      	movs	r1, #3
   1c5b2:	4630      	mov	r0, r6
   1c5b4:	f00c f8e8 	bl	28788 <atomic_test_bit>
   1c5b8:	b930      	cbnz	r0, 1c5c8 <bt_smp_encrypt_change+0x74>
		smp_reset(smp);
   1c5ba:	4620      	mov	r0, r4
   1c5bc:	f00c fa7f 	bl	28abe <smp_reset>
}
   1c5c0:	3744      	adds	r7, #68	; 0x44
   1c5c2:	46bd      	mov	sp, r7
   1c5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c5c8:	2105      	movs	r1, #5
   1c5ca:	4630      	mov	r0, r6
   1c5cc:	f00c f8dc 	bl	28788 <atomic_test_bit>
   1c5d0:	b1b8      	cbz	r0, 1c602 <bt_smp_encrypt_change+0xae>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1c5d2:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1c5d6:	071b      	lsls	r3, r3, #28
   1c5d8:	d507      	bpl.n	1c5ea <bt_smp_encrypt_change+0x96>
   1c5da:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   1c5de:	0718      	lsls	r0, r3, #28
   1c5e0:	d503      	bpl.n	1c5ea <bt_smp_encrypt_change+0x96>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1c5e2:	2111      	movs	r1, #17
   1c5e4:	4630      	mov	r0, r6
   1c5e6:	f00c f9c2 	bl	2896e <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1c5ea:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1c5ee:	f023 0308 	bic.w	r3, r3, #8
   1c5f2:	f805 3c04 	strb.w	r3, [r5, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1c5f6:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   1c5fa:	f023 0308 	bic.w	r3, r3, #8
   1c5fe:	f805 3c03 	strb.w	r3, [r5, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1c602:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   1c606:	07d9      	lsls	r1, r3, #31
   1c608:	d524      	bpl.n	1c654 <bt_smp_encrypt_change+0x100>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1c60a:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1c60c:	4620      	mov	r0, r4
   1c60e:	f00c f9ae 	bl	2896e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1c612:	2102      	movs	r1, #2
   1c614:	4630      	mov	r0, r6
   1c616:	f00c f9aa 	bl	2896e <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1c61a:	f8d5 b000 	ldr.w	fp, [r5]
	struct bt_keys *keys = conn->le.keys;
   1c61e:	f8db a0b4 	ldr.w	sl, [fp, #180]	; 0xb4
	if (!keys) {
   1c622:	f1ba 0f00 	cmp.w	sl, #0
   1c626:	d11d      	bne.n	1c664 <bt_smp_encrypt_change+0x110>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1c628:	f10b 0088 	add.w	r0, fp, #136	; 0x88
   1c62c:	f7f8 fb30 	bl	14c90 <bt_addr_le_str_real>
   1c630:	466c      	mov	r4, sp
   1c632:	b088      	sub	sp, #32
   1c634:	466a      	mov	r2, sp
   1c636:	4b88      	ldr	r3, [pc, #544]	; (1c858 <bt_smp_encrypt_change+0x304>)
   1c638:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c63c:	2302      	movs	r3, #2
   1c63e:	7713      	strb	r3, [r2, #28]
   1c640:	4b86      	ldr	r3, [pc, #536]	; (1c85c <bt_smp_encrypt_change+0x308>)
   1c642:	f842 3f10 	str.w	r3, [r2, #16]!
   1c646:	4886      	ldr	r0, [pc, #536]	; (1c860 <bt_smp_encrypt_change+0x30c>)
   1c648:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1c64c:	f00c f981 	bl	28952 <z_log_msg_static_create.constprop.0>
   1c650:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1c652:	e7b5      	b.n	1c5c0 <bt_smp_encrypt_change+0x6c>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1c654:	079a      	lsls	r2, r3, #30
   1c656:	d501      	bpl.n	1c65c <bt_smp_encrypt_change+0x108>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1c658:	2108      	movs	r1, #8
   1c65a:	e7d7      	b.n	1c60c <bt_smp_encrypt_change+0xb8>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1c65c:	0758      	lsls	r0, r3, #29
   1c65e:	d5d8      	bpl.n	1c612 <bt_smp_encrypt_change+0xbe>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1c660:	210a      	movs	r1, #10
   1c662:	e7d3      	b.n	1c60c <bt_smp_encrypt_change+0xb8>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c664:	2105      	movs	r1, #5
   1c666:	f00c f88f 	bl	28788 <atomic_test_bit>
   1c66a:	b9c0      	cbnz	r0, 1c69e <bt_smp_encrypt_change+0x14a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1c66c:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1c670:	07d9      	lsls	r1, r3, #31
   1c672:	d514      	bpl.n	1c69e <bt_smp_encrypt_change+0x14a>
	struct bt_keys *keys = conn->le.keys;
   1c674:	682b      	ldr	r3, [r5, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1c676:	211a      	movs	r1, #26
   1c678:	f107 0020 	add.w	r0, r7, #32
	struct bt_keys *keys = conn->le.keys;
   1c67c:	f8d3 80b4 	ldr.w	r8, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1c680:	f003 f848 	bl	1f714 <bt_rand>
   1c684:	6078      	str	r0, [r7, #4]
   1c686:	b310      	cbz	r0, 1c6ce <bt_smp_encrypt_change+0x17a>
			BT_ERR("Unable to get random bytes");
   1c688:	4b76      	ldr	r3, [pc, #472]	; (1c864 <bt_smp_encrypt_change+0x310>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1c68a:	61fb      	str	r3, [r7, #28]
   1c68c:	4874      	ldr	r0, [pc, #464]	; (1c860 <bt_smp_encrypt_change+0x30c>)
   1c68e:	2302      	movs	r3, #2
   1c690:	f107 0218 	add.w	r2, r7, #24
   1c694:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c698:	61bb      	str	r3, [r7, #24]
   1c69a:	f00c f95a 	bl	28952 <z_log_msg_static_create.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
   1c69e:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1c6a2:	079a      	lsls	r2, r3, #30
   1c6a4:	f140 80a2 	bpl.w	1c7ec <bt_smp_encrypt_change+0x298>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
   1c6a8:	2108      	movs	r1, #8
   1c6aa:	4620      	mov	r0, r4
   1c6ac:	f00c f973 	bl	28996 <smp_create_pdu.constprop.0>
		if (!buf) {
   1c6b0:	4680      	mov	r8, r0
   1c6b2:	2800      	cmp	r0, #0
   1c6b4:	d16e      	bne.n	1c794 <bt_smp_encrypt_change+0x240>
			BT_ERR("Unable to allocate Ident Info buffer");
   1c6b6:	4b6c      	ldr	r3, [pc, #432]	; (1c868 <bt_smp_encrypt_change+0x314>)
			BT_ERR("Unable to allocate Signing Info buffer");
   1c6b8:	637b      	str	r3, [r7, #52]	; 0x34
   1c6ba:	4869      	ldr	r0, [pc, #420]	; (1c860 <bt_smp_encrypt_change+0x30c>)
   1c6bc:	2302      	movs	r3, #2
   1c6be:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1c6c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c6c6:	633b      	str	r3, [r7, #48]	; 0x30
   1c6c8:	f00c f943 	bl	28952 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1c6cc:	e778      	b.n	1c5c0 <bt_smp_encrypt_change+0x6c>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1c6ce:	2106      	movs	r1, #6
   1c6d0:	4620      	mov	r0, r4
   1c6d2:	f00c f960 	bl	28996 <smp_create_pdu.constprop.0>
		if (!buf) {
   1c6d6:	4681      	mov	r9, r0
   1c6d8:	b908      	cbnz	r0, 1c6de <bt_smp_encrypt_change+0x18a>
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1c6da:	4b64      	ldr	r3, [pc, #400]	; (1c86c <bt_smp_encrypt_change+0x318>)
   1c6dc:	e7d5      	b.n	1c68a <bt_smp_encrypt_change+0x136>
	return net_buf_simple_add(&buf->b, len);
   1c6de:	2110      	movs	r1, #16
   1c6e0:	3008      	adds	r0, #8
   1c6e2:	f00c fcf7 	bl	290d4 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   1c6e6:	f898 200c 	ldrb.w	r2, [r8, #12]
   1c6ea:	6038      	str	r0, [r7, #0]
   1c6ec:	f107 0120 	add.w	r1, r7, #32
   1c6f0:	f00a fb12 	bl	26d18 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1c6f4:	f898 000c 	ldrb.w	r0, [r8, #12]
   1c6f8:	683b      	ldr	r3, [r7, #0]
   1c6fa:	280f      	cmp	r0, #15
   1c6fc:	d805      	bhi.n	1c70a <bt_smp_encrypt_change+0x1b6>
			(void)memset(info->ltk + keys->enc_size, 0,
   1c6fe:	f1c0 0210 	rsb	r2, r0, #16
   1c702:	6879      	ldr	r1, [r7, #4]
   1c704:	4418      	add	r0, r3
   1c706:	f00a fb12 	bl	26d2e <memset>
		smp_send(smp, buf, NULL, NULL);
   1c70a:	4649      	mov	r1, r9
   1c70c:	2200      	movs	r2, #0
   1c70e:	4620      	mov	r0, r4
   1c710:	f00c f902 	bl	28918 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1c714:	2107      	movs	r1, #7
   1c716:	4620      	mov	r0, r4
   1c718:	f00c f93d 	bl	28996 <smp_create_pdu.constprop.0>
		if (!buf) {
   1c71c:	4681      	mov	r9, r0
   1c71e:	b908      	cbnz	r0, 1c724 <bt_smp_encrypt_change+0x1d0>
			BT_ERR("Unable to allocate Central Ident buffer");
   1c720:	4b53      	ldr	r3, [pc, #332]	; (1c870 <bt_smp_encrypt_change+0x31c>)
   1c722:	e7b2      	b.n	1c68a <bt_smp_encrypt_change+0x136>
   1c724:	210a      	movs	r1, #10
   1c726:	3008      	adds	r0, #8
   1c728:	f00c fcd4 	bl	290d4 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1c72c:	2208      	movs	r2, #8
   1c72e:	4603      	mov	r3, r0
   1c730:	f107 0130 	add.w	r1, r7, #48	; 0x30
   1c734:	3002      	adds	r0, #2
   1c736:	607b      	str	r3, [r7, #4]
   1c738:	f00a faee 	bl	26d18 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1c73c:	687b      	ldr	r3, [r7, #4]
   1c73e:	2202      	movs	r2, #2
   1c740:	f107 0138 	add.w	r1, r7, #56	; 0x38
   1c744:	4618      	mov	r0, r3
   1c746:	f00a fae7 	bl	26d18 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1c74a:	4649      	mov	r1, r9
   1c74c:	4620      	mov	r0, r4
   1c74e:	4a49      	ldr	r2, [pc, #292]	; (1c874 <bt_smp_encrypt_change+0x320>)
   1c750:	f00c f8e2 	bl	28918 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c754:	210d      	movs	r1, #13
   1c756:	4630      	mov	r0, r6
   1c758:	f00c f816 	bl	28788 <atomic_test_bit>
   1c75c:	2800      	cmp	r0, #0
   1c75e:	d09e      	beq.n	1c69e <bt_smp_encrypt_change+0x14a>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1c760:	4640      	mov	r0, r8
   1c762:	2101      	movs	r1, #1
   1c764:	f00c fc0c 	bl	28f80 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   1c768:	f107 0120 	add.w	r1, r7, #32
   1c76c:	2210      	movs	r2, #16
   1c76e:	f108 0072 	add.w	r0, r8, #114	; 0x72
   1c772:	f00a fad1 	bl	26d18 <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   1c776:	f107 0130 	add.w	r1, r7, #48	; 0x30
   1c77a:	2208      	movs	r2, #8
   1c77c:	f108 0068 	add.w	r0, r8, #104	; 0x68
   1c780:	f00a faca 	bl	26d18 <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   1c784:	2202      	movs	r2, #2
   1c786:	f107 0138 	add.w	r1, r7, #56	; 0x38
   1c78a:	f108 0070 	add.w	r0, r8, #112	; 0x70
   1c78e:	f00a fac3 	bl	26d18 <memcpy>
   1c792:	e784      	b.n	1c69e <bt_smp_encrypt_change+0x14a>
   1c794:	2110      	movs	r1, #16
   1c796:	3008      	adds	r0, #8
   1c798:	f00c fc9c 	bl	290d4 <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
   1c79c:	f89b 1008 	ldrb.w	r1, [fp, #8]
   1c7a0:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 1c878 <bt_smp_encrypt_change+0x324>
   1c7a4:	3116      	adds	r1, #22
   1c7a6:	2210      	movs	r2, #16
   1c7a8:	eb09 1101 	add.w	r1, r9, r1, lsl #4
   1c7ac:	f00a fab4 	bl	26d18 <memcpy>
		smp_send(smp, buf, NULL, NULL);
   1c7b0:	4641      	mov	r1, r8
   1c7b2:	2200      	movs	r2, #0
   1c7b4:	4620      	mov	r0, r4
   1c7b6:	f00c f8af 	bl	28918 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
   1c7ba:	2109      	movs	r1, #9
   1c7bc:	4620      	mov	r0, r4
   1c7be:	f00c f8ea 	bl	28996 <smp_create_pdu.constprop.0>
		if (!buf) {
   1c7c2:	4680      	mov	r8, r0
   1c7c4:	b908      	cbnz	r0, 1c7ca <bt_smp_encrypt_change+0x276>
			BT_ERR("Unable to allocate Ident Addr Info buffer");
   1c7c6:	4b2d      	ldr	r3, [pc, #180]	; (1c87c <bt_smp_encrypt_change+0x328>)
   1c7c8:	e776      	b.n	1c6b8 <bt_smp_encrypt_change+0x164>
   1c7ca:	2107      	movs	r1, #7
   1c7cc:	3008      	adds	r0, #8
   1c7ce:	f00c fc81 	bl	290d4 <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
   1c7d2:	f89b 1008 	ldrb.w	r1, [fp, #8]
   1c7d6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1c7da:	2207      	movs	r2, #7
   1c7dc:	4449      	add	r1, r9
   1c7de:	f00a fa9b 	bl	26d18 <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
   1c7e2:	4a27      	ldr	r2, [pc, #156]	; (1c880 <bt_smp_encrypt_change+0x32c>)
   1c7e4:	4641      	mov	r1, r8
   1c7e6:	4620      	mov	r0, r4
   1c7e8:	f00c f896 	bl	28918 <smp_send.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
   1c7ec:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1c7f0:	075b      	lsls	r3, r3, #29
   1c7f2:	d529      	bpl.n	1c848 <bt_smp_encrypt_change+0x2f4>
		buf = smp_create_pdu(smp, BT_SMP_CMD_SIGNING_INFO,
   1c7f4:	210a      	movs	r1, #10
   1c7f6:	4620      	mov	r0, r4
   1c7f8:	f00c f8cd 	bl	28996 <smp_create_pdu.constprop.0>
		if (!buf) {
   1c7fc:	4680      	mov	r8, r0
   1c7fe:	b908      	cbnz	r0, 1c804 <bt_smp_encrypt_change+0x2b0>
			BT_ERR("Unable to allocate Signing Info buffer");
   1c800:	4b20      	ldr	r3, [pc, #128]	; (1c884 <bt_smp_encrypt_change+0x330>)
   1c802:	e759      	b.n	1c6b8 <bt_smp_encrypt_change+0x164>
   1c804:	2110      	movs	r1, #16
   1c806:	3008      	adds	r0, #8
   1c808:	f00c fc64 	bl	290d4 <net_buf_simple_add>
		if (bt_rand(info->csrk, sizeof(info->csrk))) {
   1c80c:	2110      	movs	r1, #16
   1c80e:	4683      	mov	fp, r0
   1c810:	f002 ff80 	bl	1f714 <bt_rand>
   1c814:	4681      	mov	r9, r0
   1c816:	2800      	cmp	r0, #0
   1c818:	f47f aed2 	bne.w	1c5c0 <bt_smp_encrypt_change+0x6c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c81c:	210d      	movs	r1, #13
   1c81e:	4630      	mov	r0, r6
   1c820:	f00b ffb2 	bl	28788 <atomic_test_bit>
   1c824:	b158      	cbz	r0, 1c83e <bt_smp_encrypt_change+0x2ea>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
   1c826:	2108      	movs	r1, #8
   1c828:	4650      	mov	r0, sl
   1c82a:	f00c fba9 	bl	28f80 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
   1c82e:	2210      	movs	r2, #16
   1c830:	4659      	mov	r1, fp
   1c832:	f10a 0040 	add.w	r0, sl, #64	; 0x40
   1c836:	f00a fa6f 	bl	26d18 <memcpy>
			keys->local_csrk.cnt = 0U;
   1c83a:	f8ca 9050 	str.w	r9, [sl, #80]	; 0x50
		smp_send(smp, buf, smp_sign_info_sent, NULL);
   1c83e:	4a12      	ldr	r2, [pc, #72]	; (1c888 <bt_smp_encrypt_change+0x334>)
   1c840:	4641      	mov	r1, r8
   1c842:	4620      	mov	r0, r4
   1c844:	f00c f868 	bl	28918 <smp_send.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   1c848:	f835 1c04 	ldrh.w	r1, [r5, #-4]
   1c84c:	2900      	cmp	r1, #0
   1c84e:	f47f aeb7 	bne.w	1c5c0 <bt_smp_encrypt_change+0x6c>
   1c852:	e6a6      	b.n	1c5a2 <bt_smp_encrypt_change+0x4e>
   1c854:	0002dc11 	.word	0x0002dc11
   1c858:	0002dafa 	.word	0x0002dafa
   1c85c:	01000003 	.word	0x01000003
   1c860:	0002ac40 	.word	0x0002ac40
   1c864:	0002db0f 	.word	0x0002db0f
   1c868:	0002db79 	.word	0x0002db79
   1c86c:	0002db2a 	.word	0x0002db2a
   1c870:	0002db51 	.word	0x0002db51
   1c874:	00028eef 	.word	0x00028eef
   1c878:	20000350 	.word	0x20000350
   1c87c:	0002db9e 	.word	0x0002db9e
   1c880:	00028ee5 	.word	0x00028ee5
   1c884:	0002dbc8 	.word	0x0002dbc8
   1c888:	00028edb 	.word	0x00028edb

0001c88c <smp_timeout>:
{
   1c88c:	b510      	push	{r4, lr}
   1c88e:	4604      	mov	r4, r0
   1c890:	b086      	sub	sp, #24
	BT_ERR("SMP Timeout");
   1c892:	4b0b      	ldr	r3, [pc, #44]	; (1c8c0 <smp_timeout+0x34>)
   1c894:	9305      	str	r3, [sp, #20]
   1c896:	aa04      	add	r2, sp, #16
   1c898:	2302      	movs	r3, #2
   1c89a:	480a      	ldr	r0, [pc, #40]	; (1c8c4 <smp_timeout+0x38>)
   1c89c:	9304      	str	r3, [sp, #16]
   1c89e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c8a2:	f00c f856 	bl	28952 <z_log_msg_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1c8a6:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
   1c8aa:	2108      	movs	r1, #8
   1c8ac:	f7ff fb70 	bl	1bf90 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1c8b0:	2104      	movs	r1, #4
   1c8b2:	f5a4 70ba 	sub.w	r0, r4, #372	; 0x174
}
   1c8b6:	b006      	add	sp, #24
   1c8b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1c8bc:	f00c b857 	b.w	2896e <atomic_set_bit>
   1c8c0:	0002dbef 	.word	0x0002dbef
   1c8c4:	0002ac40 	.word	0x0002ac40

0001c8c8 <bt_smp_update_keys>:
{
   1c8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c8cc:	af00      	add	r7, sp, #0
   1c8ce:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1c8d0:	f00c f842 	bl	28958 <smp_chan_get>
	if (!smp) {
   1c8d4:	4605      	mov	r5, r0
   1c8d6:	b358      	cbz	r0, 1c930 <bt_smp_update_keys+0x68>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c8d8:	1d06      	adds	r6, r0, #4
   1c8da:	2103      	movs	r1, #3
   1c8dc:	4630      	mov	r0, r6
   1c8de:	f00b ff53 	bl	28788 <atomic_test_bit>
   1c8e2:	b328      	cbz	r0, 1c930 <bt_smp_update_keys+0x68>
	if (conn->le.keys) {
   1c8e4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1c8e8:	b108      	cbz	r0, 1c8ee <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1c8ea:	f000 f967 	bl	1cbbc <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1c8ee:	f104 0888 	add.w	r8, r4, #136	; 0x88
   1c8f2:	7a20      	ldrb	r0, [r4, #8]
   1c8f4:	4641      	mov	r1, r8
   1c8f6:	f000 f88d 	bl	1ca14 <bt_keys_get_addr>
   1c8fa:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   1c8fe:	b9d0      	cbnz	r0, 1c936 <bt_smp_update_keys+0x6e>
		BT_ERR("Unable to get keys for %s",
   1c900:	4640      	mov	r0, r8
   1c902:	f7f8 f9c5 	bl	14c90 <bt_addr_le_str_real>
   1c906:	466c      	mov	r4, sp
   1c908:	b088      	sub	sp, #32
   1c90a:	466a      	mov	r2, sp
   1c90c:	4b33      	ldr	r3, [pc, #204]	; (1c9dc <bt_smp_update_keys+0x114>)
   1c90e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c912:	2302      	movs	r3, #2
   1c914:	7713      	strb	r3, [r2, #28]
   1c916:	4b32      	ldr	r3, [pc, #200]	; (1c9e0 <bt_smp_update_keys+0x118>)
   1c918:	4832      	ldr	r0, [pc, #200]	; (1c9e4 <bt_smp_update_keys+0x11c>)
   1c91a:	f842 3f10 	str.w	r3, [r2, #16]!
   1c91e:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1c922:	f00c f816 	bl	28952 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1c926:	2108      	movs	r1, #8
   1c928:	46a5      	mov	sp, r4
   1c92a:	4628      	mov	r0, r5
   1c92c:	f00c fa45 	bl	28dba <smp_error>
}
   1c930:	46bd      	mov	sp, r7
   1c932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1c936:	210e      	movs	r1, #14
   1c938:	4630      	mov	r0, r6
   1c93a:	f00b ff25 	bl	28788 <atomic_test_bit>
   1c93e:	b128      	cbz	r0, 1c94c <bt_smp_update_keys+0x84>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1c940:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1c944:	7b53      	ldrb	r3, [r2, #13]
   1c946:	f043 0302 	orr.w	r3, r3, #2
   1c94a:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1c94c:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1c94e:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   1c952:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1c954:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1c956:	d836      	bhi.n	1c9c6 <bt_smp_update_keys+0xfe>
   1c958:	b3c2      	cbz	r2, 1c9cc <bt_smp_update_keys+0x104>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1c95a:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1c95e:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1c960:	7d2b      	ldrb	r3, [r5, #20]
   1c962:	7b6a      	ldrb	r2, [r5, #13]
   1c964:	4293      	cmp	r3, r2
   1c966:	bf28      	it	cs
   1c968:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1c96a:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c96c:	4630      	mov	r0, r6
   1c96e:	2105      	movs	r1, #5
   1c970:	f00b ff0a 	bl	28788 <atomic_test_bit>
   1c974:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   1c978:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c97a:	b350      	cbz	r0, 1c9d2 <bt_smp_update_keys+0x10a>
		conn->le.keys->flags |= BT_KEYS_SC;
   1c97c:	f042 0210 	orr.w	r2, r2, #16
   1c980:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c982:	210d      	movs	r1, #13
   1c984:	4630      	mov	r0, r6
   1c986:	f00b feff 	bl	28788 <atomic_test_bit>
   1c98a:	2800      	cmp	r0, #0
   1c98c:	d0d0      	beq.n	1c930 <bt_smp_update_keys+0x68>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1c98e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1c992:	2120      	movs	r1, #32
   1c994:	f00c faf4 	bl	28f80 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1c998:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1c99c:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1c9a0:	2210      	movs	r2, #16
   1c9a2:	301a      	adds	r0, #26
   1c9a4:	f00a f9b8 	bl	26d18 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1c9a8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1c9ac:	2208      	movs	r2, #8
   1c9ae:	2100      	movs	r1, #0
   1c9b0:	3010      	adds	r0, #16
   1c9b2:	f00a f9bc 	bl	26d2e <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1c9b6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1c9ba:	2202      	movs	r2, #2
   1c9bc:	2100      	movs	r1, #0
   1c9be:	3018      	adds	r0, #24
   1c9c0:	f00a f9b5 	bl	26d2e <memset>
   1c9c4:	e7b4      	b.n	1c930 <bt_smp_update_keys+0x68>
	switch (smp->method) {
   1c9c6:	3a05      	subs	r2, #5
   1c9c8:	2a01      	cmp	r2, #1
   1c9ca:	d9c6      	bls.n	1c95a <bt_smp_update_keys+0x92>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1c9cc:	f023 0301 	bic.w	r3, r3, #1
   1c9d0:	e7c5      	b.n	1c95e <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1c9d2:	f022 0210 	bic.w	r2, r2, #16
   1c9d6:	735a      	strb	r2, [r3, #13]
   1c9d8:	e7aa      	b.n	1c930 <bt_smp_update_keys+0x68>
   1c9da:	bf00      	nop
   1c9dc:	0002d887 	.word	0x0002d887
   1c9e0:	01000003 	.word	0x01000003
   1c9e4:	0002ac40 	.word	0x0002ac40

0001c9e8 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1c9e8:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1c9ea:	4b07      	ldr	r3, [pc, #28]	; (1ca08 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1c9ec:	4807      	ldr	r0, [pc, #28]	; (1ca0c <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1c9ee:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1c9f2:	f003 0306 	and.w	r3, r3, #6
   1c9f6:	1f9a      	subs	r2, r3, #6
   1c9f8:	4253      	negs	r3, r2
   1c9fa:	4153      	adcs	r3, r2
   1c9fc:	4a04      	ldr	r2, [pc, #16]	; (1ca10 <bt_smp_init+0x28>)
   1c9fe:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1ca00:	f7fa fc4c 	bl	1729c <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1ca04:	2000      	movs	r0, #0
   1ca06:	bd08      	pop	{r3, pc}
   1ca08:	20000350 	.word	0x20000350
   1ca0c:	20000680 	.word	0x20000680
   1ca10:	20003bac 	.word	0x20003bac

0001ca14 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1ca14:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1ca16:	4c1f      	ldr	r4, [pc, #124]	; (1ca94 <bt_keys_get_addr+0x80>)
   1ca18:	7823      	ldrb	r3, [r4, #0]
   1ca1a:	4283      	cmp	r3, r0
{
   1ca1c:	b085      	sub	sp, #20
   1ca1e:	4606      	mov	r6, r0
   1ca20:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1ca22:	d01e      	beq.n	1ca62 <bt_keys_get_addr+0x4e>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1ca24:	2500      	movs	r5, #0
	return memcmp(a, b, sizeof(*a));
   1ca26:	481c      	ldr	r0, [pc, #112]	; (1ca98 <bt_keys_get_addr+0x84>)
   1ca28:	9502      	str	r5, [sp, #8]
   1ca2a:	2207      	movs	r2, #7
   1ca2c:	a902      	add	r1, sp, #8
   1ca2e:	f8cd 500b 	str.w	r5, [sp, #11]
   1ca32:	f00a f948 	bl	26cc6 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1ca36:	b1e0      	cbz	r0, 1ca72 <bt_keys_get_addr+0x5e>
	memcpy(dst, src, sizeof(*dst));
   1ca38:	2207      	movs	r2, #7
   1ca3a:	4917      	ldr	r1, [pc, #92]	; (1ca98 <bt_keys_get_addr+0x84>)
   1ca3c:	4668      	mov	r0, sp
   1ca3e:	f00a f96b 	bl	26d18 <memcpy>
			return NULL;
		}

		/* Use a copy as bt_unpair will clear the oldest key. */
		bt_addr_le_copy(&oldest_addr, &oldest->addr);
		bt_unpair(oldest->id, &oldest_addr);
   1ca42:	4669      	mov	r1, sp
   1ca44:	7820      	ldrb	r0, [r4, #0]
   1ca46:	f7f9 fb39 	bl	160bc <bt_unpair>
	return memcmp(a, b, sizeof(*a));
   1ca4a:	4813      	ldr	r0, [pc, #76]	; (1ca98 <bt_keys_get_addr+0x84>)
		if (!bt_addr_le_cmp(&oldest->addr, BT_ADDR_LE_ANY)) {
   1ca4c:	9502      	str	r5, [sp, #8]
   1ca4e:	2207      	movs	r2, #7
   1ca50:	a902      	add	r1, sp, #8
   1ca52:	f8cd 500b 	str.w	r5, [sp, #11]
   1ca56:	f00a f936 	bl	26cc6 <memcmp>
   1ca5a:	b150      	cbz	r0, 1ca72 <bt_keys_get_addr+0x5e>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1ca5c:	4628      	mov	r0, r5
}
   1ca5e:	b005      	add	sp, #20
   1ca60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ca62:	2207      	movs	r2, #7
   1ca64:	1c60      	adds	r0, r4, #1
   1ca66:	f00a f92e 	bl	26cc6 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1ca6a:	2800      	cmp	r0, #0
   1ca6c:	d1da      	bne.n	1ca24 <bt_keys_get_addr+0x10>
		keys = &key_pool[i];
   1ca6e:	4620      	mov	r0, r4
   1ca70:	e7f5      	b.n	1ca5e <bt_keys_get_addr+0x4a>
	memcpy(dst, src, sizeof(*dst));
   1ca72:	2207      	movs	r2, #7
   1ca74:	4808      	ldr	r0, [pc, #32]	; (1ca98 <bt_keys_get_addr+0x84>)
		keys->id = id;
   1ca76:	7026      	strb	r6, [r4, #0]
   1ca78:	4639      	mov	r1, r7
   1ca7a:	f00a f94d 	bl	26d18 <memcpy>
		keys->aging_counter = ++aging_counter_val;
   1ca7e:	4a07      	ldr	r2, [pc, #28]	; (1ca9c <bt_keys_get_addr+0x88>)
		return keys;
   1ca80:	4804      	ldr	r0, [pc, #16]	; (1ca94 <bt_keys_get_addr+0x80>)
		keys->aging_counter = ++aging_counter_val;
   1ca82:	6813      	ldr	r3, [r2, #0]
   1ca84:	3301      	adds	r3, #1
   1ca86:	6013      	str	r3, [r2, #0]
   1ca88:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		last_keys_updated = keys;
   1ca8c:	4b04      	ldr	r3, [pc, #16]	; (1caa0 <bt_keys_get_addr+0x8c>)
   1ca8e:	601c      	str	r4, [r3, #0]
		return keys;
   1ca90:	e7e5      	b.n	1ca5e <bt_keys_get_addr+0x4a>
   1ca92:	bf00      	nop
   1ca94:	20002c54 	.word	0x20002c54
   1ca98:	20002c55 	.word	0x20002c55
   1ca9c:	20002c50 	.word	0x20002c50
   1caa0:	20002cdc 	.word	0x20002cdc

0001caa4 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
   1caa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1caa6:	460c      	mov	r4, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
   1caa8:	4908      	ldr	r1, [pc, #32]	; (1cacc <bt_foreach_bond+0x28>)
   1caaa:	89cb      	ldrh	r3, [r1, #14]
{
   1caac:	4615      	mov	r5, r2
		if (keys->keys && keys->id == id) {
   1caae:	b153      	cbz	r3, 1cac6 <bt_foreach_bond+0x22>
   1cab0:	780b      	ldrb	r3, [r1, #0]
   1cab2:	4283      	cmp	r3, r0
   1cab4:	d107      	bne.n	1cac6 <bt_foreach_bond+0x22>
   1cab6:	3101      	adds	r1, #1
   1cab8:	2207      	movs	r2, #7
   1caba:	4668      	mov	r0, sp
   1cabc:	f00a f92c 	bl	26d18 <memcpy>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
   1cac0:	4629      	mov	r1, r5
   1cac2:	4668      	mov	r0, sp
   1cac4:	47a0      	blx	r4
		}
	}
}
   1cac6:	b003      	add	sp, #12
   1cac8:	bd30      	pop	{r4, r5, pc}
   1caca:	bf00      	nop
   1cacc:	20002c54 	.word	0x20002c54

0001cad0 <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   1cad0:	460b      	mov	r3, r1
   1cad2:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   1cad4:	4a04      	ldr	r2, [pc, #16]	; (1cae8 <bt_keys_foreach+0x18>)
{
   1cad6:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   1cad8:	89d4      	ldrh	r4, [r2, #14]
   1cada:	4204      	tst	r4, r0
   1cadc:	d002      	beq.n	1cae4 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1cade:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   1cae0:	4610      	mov	r0, r2
   1cae2:	4718      	bx	r3
}
   1cae4:	bc10      	pop	{r4}
   1cae6:	4770      	bx	lr
   1cae8:	20002c54 	.word	0x20002c54

0001caec <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   1caec:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   1caee:	4903      	ldr	r1, [pc, #12]	; (1cafc <keys_commit+0x10>)
   1caf0:	2200      	movs	r2, #0
   1caf2:	2002      	movs	r0, #2
   1caf4:	f7ff ffec 	bl	1cad0 <bt_keys_foreach>
	}

	return 0;
}
   1caf8:	2000      	movs	r0, #0
   1cafa:	bd08      	pop	{r3, pc}
   1cafc:	00028f5d 	.word	0x00028f5d

0001cb00 <bt_keys_find>:
{
   1cb00:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1cb02:	4c09      	ldr	r4, [pc, #36]	; (1cb28 <bt_keys_find+0x28>)
{
   1cb04:	460b      	mov	r3, r1
   1cb06:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1cb08:	89e2      	ldrh	r2, [r4, #14]
   1cb0a:	4202      	tst	r2, r0
   1cb0c:	d007      	beq.n	1cb1e <bt_keys_find+0x1e>
   1cb0e:	7822      	ldrb	r2, [r4, #0]
   1cb10:	429a      	cmp	r2, r3
   1cb12:	d104      	bne.n	1cb1e <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   1cb14:	2207      	movs	r2, #7
   1cb16:	1c60      	adds	r0, r4, #1
   1cb18:	f00a f8d5 	bl	26cc6 <memcmp>
   1cb1c:	b108      	cbz	r0, 1cb22 <bt_keys_find+0x22>
	return NULL;
   1cb1e:	2000      	movs	r0, #0
}
   1cb20:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1cb22:	4620      	mov	r0, r4
   1cb24:	e7fc      	b.n	1cb20 <bt_keys_find+0x20>
   1cb26:	bf00      	nop
   1cb28:	20002c54 	.word	0x20002c54

0001cb2c <bt_keys_find_irk>:
{
   1cb2c:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1cb2e:	780b      	ldrb	r3, [r1, #0]
   1cb30:	2b01      	cmp	r3, #1
   1cb32:	4606      	mov	r6, r0
   1cb34:	460d      	mov	r5, r1
   1cb36:	d001      	beq.n	1cb3c <bt_keys_find_irk+0x10>
		return NULL;
   1cb38:	2000      	movs	r0, #0
}
   1cb3a:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1cb3c:	798b      	ldrb	r3, [r1, #6]
   1cb3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1cb42:	2b40      	cmp	r3, #64	; 0x40
   1cb44:	d1f8      	bne.n	1cb38 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1cb46:	4c12      	ldr	r4, [pc, #72]	; (1cb90 <bt_keys_find_irk+0x64>)
   1cb48:	89e3      	ldrh	r3, [r4, #14]
   1cb4a:	079b      	lsls	r3, r3, #30
   1cb4c:	d5f4      	bpl.n	1cb38 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   1cb4e:	7823      	ldrb	r3, [r4, #0]
   1cb50:	42b3      	cmp	r3, r6
   1cb52:	d10b      	bne.n	1cb6c <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
   1cb54:	2206      	movs	r2, #6
   1cb56:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   1cb5a:	1c68      	adds	r0, r5, #1
   1cb5c:	f00a f8b3 	bl	26cc6 <memcmp>
   1cb60:	b908      	cbnz	r0, 1cb66 <bt_keys_find_irk+0x3a>
			return &key_pool[i];
   1cb62:	4620      	mov	r0, r4
   1cb64:	e7e9      	b.n	1cb3a <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1cb66:	89e3      	ldrh	r3, [r4, #14]
   1cb68:	079a      	lsls	r2, r3, #30
   1cb6a:	d5e5      	bpl.n	1cb38 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1cb6c:	7823      	ldrb	r3, [r4, #0]
   1cb6e:	42b3      	cmp	r3, r6
   1cb70:	d1e2      	bne.n	1cb38 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1cb72:	3501      	adds	r5, #1
   1cb74:	4807      	ldr	r0, [pc, #28]	; (1cb94 <bt_keys_find_irk+0x68>)
   1cb76:	4629      	mov	r1, r5
   1cb78:	f00a f916 	bl	26da8 <bt_rpa_irk_matches>
   1cb7c:	2800      	cmp	r0, #0
   1cb7e:	d0db      	beq.n	1cb38 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   1cb80:	4805      	ldr	r0, [pc, #20]	; (1cb98 <bt_keys_find_irk+0x6c>)
   1cb82:	2206      	movs	r2, #6
   1cb84:	4629      	mov	r1, r5
   1cb86:	f00a f8c7 	bl	26d18 <memcpy>
			return &key_pool[i];
   1cb8a:	4801      	ldr	r0, [pc, #4]	; (1cb90 <bt_keys_find_irk+0x64>)
}
   1cb8c:	e7d5      	b.n	1cb3a <bt_keys_find_irk+0xe>
   1cb8e:	bf00      	nop
   1cb90:	20002c54 	.word	0x20002c54
   1cb94:	20002c7e 	.word	0x20002c7e
   1cb98:	20002c8e 	.word	0x20002c8e

0001cb9c <bt_keys_find_addr>:
{
   1cb9c:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   1cb9e:	4c06      	ldr	r4, [pc, #24]	; (1cbb8 <bt_keys_find_addr+0x1c>)
   1cba0:	7823      	ldrb	r3, [r4, #0]
   1cba2:	4283      	cmp	r3, r0
   1cba4:	d104      	bne.n	1cbb0 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   1cba6:	2207      	movs	r2, #7
   1cba8:	1c60      	adds	r0, r4, #1
   1cbaa:	f00a f88c 	bl	26cc6 <memcmp>
   1cbae:	b108      	cbz	r0, 1cbb4 <bt_keys_find_addr+0x18>
	return NULL;
   1cbb0:	2000      	movs	r0, #0
}
   1cbb2:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1cbb4:	4620      	mov	r0, r4
   1cbb6:	e7fc      	b.n	1cbb2 <bt_keys_find_addr+0x16>
   1cbb8:	20002c54 	.word	0x20002c54

0001cbbc <bt_keys_clear>:
{
   1cbbc:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   1cbbe:	7a03      	ldrb	r3, [r0, #8]
   1cbc0:	075b      	lsls	r3, r3, #29
{
   1cbc2:	b08c      	sub	sp, #48	; 0x30
   1cbc4:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1cbc6:	d501      	bpl.n	1cbcc <bt_keys_clear+0x10>
		bt_id_del(keys);
   1cbc8:	f7fa f904 	bl	16dd4 <bt_id_del>
		if (keys->id) {
   1cbcc:	4625      	mov	r5, r4
   1cbce:	f815 2b01 	ldrb.w	r2, [r5], #1
   1cbd2:	b1b2      	cbz	r2, 1cc02 <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   1cbd4:	ae02      	add	r6, sp, #8
   1cbd6:	2104      	movs	r1, #4
   1cbd8:	4630      	mov	r0, r6
   1cbda:	f008 fec8 	bl	2596e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1cbde:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1cbe0:	4a09      	ldr	r2, [pc, #36]	; (1cc08 <bt_keys_clear+0x4c>)
   1cbe2:	462b      	mov	r3, r5
   1cbe4:	2124      	movs	r1, #36	; 0x24
   1cbe6:	a803      	add	r0, sp, #12
   1cbe8:	f7f8 f9a8 	bl	14f3c <bt_settings_encode_key>
		settings_delete(key);
   1cbec:	a803      	add	r0, sp, #12
   1cbee:	f009 fd2b 	bl	26648 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1cbf2:	2288      	movs	r2, #136	; 0x88
   1cbf4:	2100      	movs	r1, #0
   1cbf6:	4620      	mov	r0, r4
}
   1cbf8:	b00c      	add	sp, #48	; 0x30
   1cbfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1cbfe:	f00a b896 	b.w	26d2e <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1cc02:	9200      	str	r2, [sp, #0]
   1cc04:	e7ec      	b.n	1cbe0 <bt_keys_clear+0x24>
   1cc06:	bf00      	nop
   1cc08:	0002dd25 	.word	0x0002dd25

0001cc0c <keys_set>:
{
   1cc0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cc10:	b0a4      	sub	sp, #144	; 0x90
   1cc12:	4614      	mov	r4, r2
   1cc14:	af00      	add	r7, sp, #0
	if (!name) {
   1cc16:	4606      	mov	r6, r0
   1cc18:	b990      	cbnz	r0, 1cc40 <keys_set+0x34>
		BT_ERR("Insufficient number of arguments");
   1cc1a:	4b70      	ldr	r3, [pc, #448]	; (1cddc <keys_set+0x1d0>)
   1cc1c:	627b      	str	r3, [r7, #36]	; 0x24
   1cc1e:	2302      	movs	r3, #2
   1cc20:	623b      	str	r3, [r7, #32]
   1cc22:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cc26:	4603      	mov	r3, r0
   1cc28:	f107 0220 	add.w	r2, r7, #32
   1cc2c:	486c      	ldr	r0, [pc, #432]	; (1cde0 <keys_set+0x1d4>)
   1cc2e:	f7f6 fb13 	bl	13258 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1cc32:	f06f 0515 	mvn.w	r5, #21
}
   1cc36:	4628      	mov	r0, r5
   1cc38:	3790      	adds	r7, #144	; 0x90
   1cc3a:	46bd      	mov	sp, r7
   1cc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1cc40:	227c      	movs	r2, #124	; 0x7c
   1cc42:	f107 0110 	add.w	r1, r7, #16
   1cc46:	4618      	mov	r0, r3
   1cc48:	47a0      	blx	r4
	if (len < 0) {
   1cc4a:	1e04      	subs	r4, r0, #0
   1cc4c:	da10      	bge.n	1cc70 <keys_set+0x64>
		BT_ERR("Failed to read value (err %zd)", len);
   1cc4e:	466d      	mov	r5, sp
   1cc50:	b088      	sub	sp, #32
   1cc52:	466a      	mov	r2, sp
   1cc54:	4b63      	ldr	r3, [pc, #396]	; (1cde4 <keys_set+0x1d8>)
   1cc56:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1cc5a:	2303      	movs	r3, #3
   1cc5c:	f842 3f10 	str.w	r3, [r2, #16]!
   1cc60:	485f      	ldr	r0, [pc, #380]	; (1cde0 <keys_set+0x1d4>)
   1cc62:	2300      	movs	r3, #0
   1cc64:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1cc68:	f7f6 faf6 	bl	13258 <z_impl_z_log_msg_static_create>
   1cc6c:	46ad      	mov	sp, r5
   1cc6e:	e7e0      	b.n	1cc32 <keys_set+0x26>
	err = bt_settings_decode_key(name, &addr);
   1cc70:	f107 0108 	add.w	r1, r7, #8
   1cc74:	4630      	mov	r0, r6
   1cc76:	f00a f8c4 	bl	26e02 <bt_settings_decode_key>
	if (err) {
   1cc7a:	4605      	mov	r5, r0
   1cc7c:	b190      	cbz	r0, 1cca4 <keys_set+0x98>
		BT_ERR("Unable to decode address %s", name);
   1cc7e:	466c      	mov	r4, sp
   1cc80:	b088      	sub	sp, #32
   1cc82:	466a      	mov	r2, sp
   1cc84:	4b58      	ldr	r3, [pc, #352]	; (1cde8 <keys_set+0x1dc>)
   1cc86:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1cc8a:	2302      	movs	r3, #2
   1cc8c:	7713      	strb	r3, [r2, #28]
   1cc8e:	4b57      	ldr	r3, [pc, #348]	; (1cdec <keys_set+0x1e0>)
   1cc90:	f842 3f10 	str.w	r3, [r2, #16]!
   1cc94:	2300      	movs	r3, #0
   1cc96:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1cc9a:	4851      	ldr	r0, [pc, #324]	; (1cde0 <keys_set+0x1d4>)
   1cc9c:	f7f6 fadc 	bl	13258 <z_impl_z_log_msg_static_create>
   1cca0:	46a5      	mov	sp, r4
			return -EINVAL;
   1cca2:	e7c6      	b.n	1cc32 <keys_set+0x26>
	settings_name_next(name, &next);
   1cca4:	1d39      	adds	r1, r7, #4
   1cca6:	4630      	mov	r0, r6
   1cca8:	f009 fcf5 	bl	26696 <settings_name_next>
	if (!next) {
   1ccac:	6878      	ldr	r0, [r7, #4]
   1ccae:	b188      	cbz	r0, 1ccd4 <keys_set+0xc8>
		unsigned long next_id = strtoul(next, NULL, 10);
   1ccb0:	220a      	movs	r2, #10
   1ccb2:	4629      	mov	r1, r5
   1ccb4:	f009 ff45 	bl	26b42 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1ccb8:	b160      	cbz	r0, 1ccd4 <keys_set+0xc8>
			BT_ERR("Invalid local identity %lu", next_id);
   1ccba:	466c      	mov	r4, sp
   1ccbc:	b088      	sub	sp, #32
   1ccbe:	466a      	mov	r2, sp
   1ccc0:	4b4b      	ldr	r3, [pc, #300]	; (1cdf0 <keys_set+0x1e4>)
   1ccc2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ccc6:	2303      	movs	r3, #3
   1ccc8:	f842 3f10 	str.w	r3, [r2, #16]!
   1cccc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ccd0:	462b      	mov	r3, r5
   1ccd2:	e7e2      	b.n	1cc9a <keys_set+0x8e>
	if (!len) {
   1ccd4:	bb1c      	cbnz	r4, 1cd1e <keys_set+0x112>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1ccd6:	f107 0208 	add.w	r2, r7, #8
   1ccda:	4621      	mov	r1, r4
   1ccdc:	203f      	movs	r0, #63	; 0x3f
   1ccde:	f7ff ff0f 	bl	1cb00 <bt_keys_find>
		if (keys) {
   1cce2:	b128      	cbz	r0, 1ccf0 <keys_set+0xe4>
			(void)memset(keys, 0, sizeof(*keys));
   1cce4:	2288      	movs	r2, #136	; 0x88
   1cce6:	4621      	mov	r1, r4
   1cce8:	f00a f821 	bl	26d2e <memset>
		return 0;
   1ccec:	4625      	mov	r5, r4
   1ccee:	e7a2      	b.n	1cc36 <keys_set+0x2a>
			BT_WARN("Unable to find deleted keys for %s",
   1ccf0:	f107 0008 	add.w	r0, r7, #8
   1ccf4:	f7f7 ffcc 	bl	14c90 <bt_addr_le_str_real>
   1ccf8:	466d      	mov	r5, sp
   1ccfa:	b088      	sub	sp, #32
   1ccfc:	466a      	mov	r2, sp
   1ccfe:	4b3d      	ldr	r3, [pc, #244]	; (1cdf4 <keys_set+0x1e8>)
   1cd00:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1cd04:	2302      	movs	r3, #2
   1cd06:	7713      	strb	r3, [r2, #28]
   1cd08:	4b38      	ldr	r3, [pc, #224]	; (1cdec <keys_set+0x1e0>)
   1cd0a:	f842 3f10 	str.w	r3, [r2, #16]!
   1cd0e:	4834      	ldr	r0, [pc, #208]	; (1cde0 <keys_set+0x1d4>)
   1cd10:	4623      	mov	r3, r4
   1cd12:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   1cd16:	f7f6 fa9f 	bl	13258 <z_impl_z_log_msg_static_create>
   1cd1a:	46ad      	mov	sp, r5
   1cd1c:	e7e6      	b.n	1ccec <keys_set+0xe0>
	keys = bt_keys_get_addr(id, &addr);
   1cd1e:	f107 0108 	add.w	r1, r7, #8
   1cd22:	2000      	movs	r0, #0
   1cd24:	f7ff fe76 	bl	1ca14 <bt_keys_get_addr>
	if (!keys) {
   1cd28:	4606      	mov	r6, r0
   1cd2a:	b9c0      	cbnz	r0, 1cd5e <keys_set+0x152>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1cd2c:	f107 0008 	add.w	r0, r7, #8
   1cd30:	f7f7 ffae 	bl	14c90 <bt_addr_le_str_real>
   1cd34:	466c      	mov	r4, sp
   1cd36:	b088      	sub	sp, #32
   1cd38:	466a      	mov	r2, sp
   1cd3a:	4b2f      	ldr	r3, [pc, #188]	; (1cdf8 <keys_set+0x1ec>)
   1cd3c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1cd40:	2302      	movs	r3, #2
   1cd42:	7713      	strb	r3, [r2, #28]
   1cd44:	4b29      	ldr	r3, [pc, #164]	; (1cdec <keys_set+0x1e0>)
   1cd46:	f842 3f10 	str.w	r3, [r2, #16]!
   1cd4a:	4825      	ldr	r0, [pc, #148]	; (1cde0 <keys_set+0x1d4>)
   1cd4c:	4633      	mov	r3, r6
   1cd4e:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1cd52:	f7f6 fa81 	bl	13258 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   1cd56:	f06f 050b 	mvn.w	r5, #11
   1cd5a:	46a5      	mov	sp, r4
   1cd5c:	e76b      	b.n	1cc36 <keys_set+0x2a>
	if (len != BT_KEYS_STORAGE_LEN) {
   1cd5e:	2c7c      	cmp	r4, #124	; 0x7c
   1cd60:	d017      	beq.n	1cd92 <keys_set+0x186>
		if (IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST) &&
   1cd62:	2c78      	cmp	r4, #120	; 0x78
   1cd64:	d124      	bne.n	1cdb0 <keys_set+0x1a4>
			BT_WARN("Keys for %s have no aging counter",
   1cd66:	f107 0008 	add.w	r0, r7, #8
   1cd6a:	f7f7 ff91 	bl	14c90 <bt_addr_le_str_real>
   1cd6e:	46e8      	mov	r8, sp
   1cd70:	b088      	sub	sp, #32
   1cd72:	466a      	mov	r2, sp
   1cd74:	4b21      	ldr	r3, [pc, #132]	; (1cdfc <keys_set+0x1f0>)
   1cd76:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1cd7a:	2302      	movs	r3, #2
   1cd7c:	7713      	strb	r3, [r2, #28]
   1cd7e:	4b1b      	ldr	r3, [pc, #108]	; (1cdec <keys_set+0x1e0>)
   1cd80:	f842 3f10 	str.w	r3, [r2, #16]!
   1cd84:	4816      	ldr	r0, [pc, #88]	; (1cde0 <keys_set+0x1d4>)
   1cd86:	2300      	movs	r3, #0
   1cd88:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   1cd8c:	f7f6 fa64 	bl	13258 <z_impl_z_log_msg_static_create>
   1cd90:	46c5      	mov	sp, r8
		memcpy(keys->storage_start, val, len);
   1cd92:	4622      	mov	r2, r4
   1cd94:	f107 0110 	add.w	r1, r7, #16
   1cd98:	f106 000c 	add.w	r0, r6, #12
   1cd9c:	f009 ffbc 	bl	26d18 <memcpy>
	if (aging_counter_val < keys->aging_counter) {
   1cda0:	4b17      	ldr	r3, [pc, #92]	; (1ce00 <keys_set+0x1f4>)
   1cda2:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
   1cda6:	6819      	ldr	r1, [r3, #0]
   1cda8:	428a      	cmp	r2, r1
		aging_counter_val = keys->aging_counter;
   1cdaa:	bf88      	it	hi
   1cdac:	601a      	strhi	r2, [r3, #0]
   1cdae:	e742      	b.n	1cc36 <keys_set+0x2a>
			BT_ERR("Invalid key length %zd != %zu", len,
   1cdb0:	466d      	mov	r5, sp
   1cdb2:	b088      	sub	sp, #32
   1cdb4:	466a      	mov	r2, sp
   1cdb6:	4b13      	ldr	r3, [pc, #76]	; (1ce04 <keys_set+0x1f8>)
   1cdb8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1cdbc:	237c      	movs	r3, #124	; 0x7c
   1cdbe:	61d3      	str	r3, [r2, #28]
   1cdc0:	2304      	movs	r3, #4
   1cdc2:	f842 3f10 	str.w	r3, [r2, #16]!
   1cdc6:	4806      	ldr	r0, [pc, #24]	; (1cde0 <keys_set+0x1d4>)
   1cdc8:	2300      	movs	r3, #0
   1cdca:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1cdce:	f7f6 fa43 	bl	13258 <z_impl_z_log_msg_static_create>
			bt_keys_clear(keys);
   1cdd2:	4630      	mov	r0, r6
   1cdd4:	46ad      	mov	sp, r5
   1cdd6:	f7ff fef1 	bl	1cbbc <bt_keys_clear>
			return -EINVAL;
   1cdda:	e72a      	b.n	1cc32 <keys_set+0x26>
   1cddc:	0002c3c9 	.word	0x0002c3c9
   1cde0:	0002ac20 	.word	0x0002ac20
   1cde4:	0002dc64 	.word	0x0002dc64
   1cde8:	0002d598 	.word	0x0002d598
   1cdec:	01000003 	.word	0x01000003
   1cdf0:	0002d5b4 	.word	0x0002d5b4
   1cdf4:	0002dc83 	.word	0x0002dc83
   1cdf8:	0002dca6 	.word	0x0002dca6
   1cdfc:	0002dcc5 	.word	0x0002dcc5
   1ce00:	20002c50 	.word	0x20002c50
   1ce04:	0002dce7 	.word	0x0002dce7

0001ce08 <bt_keys_store>:
{
   1ce08:	b5b0      	push	{r4, r5, r7, lr}
	if (keys->id) {
   1ce0a:	4605      	mov	r5, r0
{
   1ce0c:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   1ce0e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1ce12:	af02      	add	r7, sp, #8
   1ce14:	4604      	mov	r4, r0
	if (keys->id) {
   1ce16:	b332      	cbz	r2, 1ce66 <bt_keys_store+0x5e>
		u8_to_dec(id, sizeof(id), keys->id);
   1ce18:	2104      	movs	r1, #4
   1ce1a:	4638      	mov	r0, r7
   1ce1c:	f008 fda7 	bl	2596e <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1ce20:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1ce22:	4a12      	ldr	r2, [pc, #72]	; (1ce6c <bt_keys_store+0x64>)
   1ce24:	462b      	mov	r3, r5
   1ce26:	2124      	movs	r1, #36	; 0x24
   1ce28:	1d38      	adds	r0, r7, #4
   1ce2a:	f7f8 f887 	bl	14f3c <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1ce2e:	f104 010c 	add.w	r1, r4, #12
   1ce32:	227c      	movs	r2, #124	; 0x7c
   1ce34:	1d38      	adds	r0, r7, #4
   1ce36:	f7f6 fe41 	bl	13abc <settings_save_one>
	if (err) {
   1ce3a:	4604      	mov	r4, r0
   1ce3c:	b178      	cbz	r0, 1ce5e <bt_keys_store+0x56>
		BT_ERR("Failed to save keys (err %d)", err);
   1ce3e:	466d      	mov	r5, sp
   1ce40:	b088      	sub	sp, #32
   1ce42:	aa02      	add	r2, sp, #8
   1ce44:	4b0a      	ldr	r3, [pc, #40]	; (1ce70 <bt_keys_store+0x68>)
   1ce46:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ce4a:	2303      	movs	r3, #3
   1ce4c:	f842 3f10 	str.w	r3, [r2, #16]!
   1ce50:	4808      	ldr	r0, [pc, #32]	; (1ce74 <bt_keys_store+0x6c>)
   1ce52:	2300      	movs	r3, #0
   1ce54:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ce58:	f7f6 f9fe 	bl	13258 <z_impl_z_log_msg_static_create>
   1ce5c:	46ad      	mov	sp, r5
}
   1ce5e:	4620      	mov	r0, r4
   1ce60:	3728      	adds	r7, #40	; 0x28
   1ce62:	46bd      	mov	sp, r7
   1ce64:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1ce66:	9200      	str	r2, [sp, #0]
   1ce68:	e7db      	b.n	1ce22 <bt_keys_store+0x1a>
   1ce6a:	bf00      	nop
   1ce6c:	0002dd25 	.word	0x0002dd25
   1ce70:	0002dd05 	.word	0x0002dd05
   1ce74:	0002ac20 	.word	0x0002ac20

0001ce78 <bt_keys_update_usage>:

#endif /* CONFIG_BT_SETTINGS */

#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
void bt_keys_update_usage(uint8_t id, const bt_addr_le_t *addr)
{
   1ce78:	b508      	push	{r3, lr}
	struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1ce7a:	f7ff fe8f 	bl	1cb9c <bt_keys_find_addr>

	if (!keys) {
   1ce7e:	b150      	cbz	r0, 1ce96 <bt_keys_update_usage+0x1e>
		return;
	}

	if (last_keys_updated == keys) {
   1ce80:	4a05      	ldr	r2, [pc, #20]	; (1ce98 <bt_keys_update_usage+0x20>)
   1ce82:	6813      	ldr	r3, [r2, #0]
   1ce84:	4283      	cmp	r3, r0
   1ce86:	d006      	beq.n	1ce96 <bt_keys_update_usage+0x1e>
		return;
	}

	keys->aging_counter = ++aging_counter_val;
   1ce88:	4904      	ldr	r1, [pc, #16]	; (1ce9c <bt_keys_update_usage+0x24>)
	last_keys_updated = keys;
   1ce8a:	6010      	str	r0, [r2, #0]
	keys->aging_counter = ++aging_counter_val;
   1ce8c:	680b      	ldr	r3, [r1, #0]
   1ce8e:	3301      	adds	r3, #1
   1ce90:	600b      	str	r3, [r1, #0]
   1ce92:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	       keys->aging_counter);

	if (IS_ENABLED(CONFIG_BT_KEYS_SAVE_AGING_COUNTER_ON_PAIRING)) {
		bt_keys_store(keys);
	}
}
   1ce96:	bd08      	pop	{r3, pc}
   1ce98:	20002cdc 	.word	0x20002cdc
   1ce9c:	20002c50 	.word	0x20002c50

0001cea0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1cea0:	4b02      	ldr	r3, [pc, #8]	; (1ceac <net_buf_pool_get+0xc>)
   1cea2:	222c      	movs	r2, #44	; 0x2c
   1cea4:	fb02 3000 	mla	r0, r2, r0, r3
   1cea8:	4770      	bx	lr
   1ceaa:	bf00      	nop
   1ceac:	20000a68 	.word	0x20000a68

0001ceb0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ceb0:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1ceb2:	4b06      	ldr	r3, [pc, #24]	; (1cecc <net_buf_id+0x1c>)
   1ceb4:	212c      	movs	r1, #44	; 0x2c
   1ceb6:	fb01 3302 	mla	r3, r1, r2, r3
   1ceba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1cebc:	7f1b      	ldrb	r3, [r3, #28]
   1cebe:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1cec0:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1cec2:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1cec6:	fbb0 f0f3 	udiv	r0, r0, r3
   1ceca:	4770      	bx	lr
   1cecc:	20000a68 	.word	0x20000a68

0001ced0 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1ced0:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ced2:	4b0a      	ldr	r3, [pc, #40]	; (1cefc <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ced4:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ced6:	242c      	movs	r4, #44	; 0x2c
   1ced8:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1cedc:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1cede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cee0:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1cee2:	6823      	ldr	r3, [r4, #0]
   1cee4:	429a      	cmp	r2, r3
   1cee6:	bf94      	ite	ls
   1cee8:	600a      	strls	r2, [r1, #0]
   1ceea:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1ceec:	f7ff ffe0 	bl	1ceb0 <net_buf_id>
   1cef0:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1cef4:	fb02 3000 	mla	r0, r2, r0, r3
   1cef8:	bd10      	pop	{r4, pc}
   1cefa:	bf00      	nop
   1cefc:	20000a68 	.word	0x20000a68

0001cf00 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1cf00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf04:	4605      	mov	r5, r0
   1cf06:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1cf08:	4610      	mov	r0, r2
   1cf0a:	4619      	mov	r1, r3
{
   1cf0c:	4691      	mov	r9, r2
   1cf0e:	4698      	mov	r8, r3
   1cf10:	4617      	mov	r7, r2
   1cf12:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1cf14:	f00d fa9a 	bl	2a44c <sys_clock_timeout_end_calc>
   1cf18:	4682      	mov	sl, r0
   1cf1a:	468b      	mov	fp, r1
	__asm__ volatile(
   1cf1c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cf20:	f3ef 8111 	mrs	r1, BASEPRI
   1cf24:	f383 8812 	msr	BASEPRI_MAX, r3
   1cf28:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1cf2c:	8b6b      	ldrh	r3, [r5, #26]
   1cf2e:	2b00      	cmp	r3, #0
   1cf30:	d05a      	beq.n	1cfe8 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1cf32:	8b2a      	ldrh	r2, [r5, #24]
   1cf34:	429a      	cmp	r2, r3
   1cf36:	d93e      	bls.n	1cfb6 <net_buf_alloc_len+0xb6>
   1cf38:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1cf3a:	2200      	movs	r2, #0
   1cf3c:	2300      	movs	r3, #0
   1cf3e:	4628      	mov	r0, r5
   1cf40:	f004 f9b8 	bl	212b4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1cf44:	9900      	ldr	r1, [sp, #0]
   1cf46:	4604      	mov	r4, r0
   1cf48:	2800      	cmp	r0, #0
   1cf4a:	d034      	beq.n	1cfb6 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   1cf4c:	f381 8811 	msr	BASEPRI, r1
   1cf50:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1cf54:	9b01      	ldr	r3, [sp, #4]
   1cf56:	2b00      	cmp	r3, #0
   1cf58:	d056      	beq.n	1d008 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1cf5a:	ea58 0309 	orrs.w	r3, r8, r9
   1cf5e:	d00f      	beq.n	1cf80 <net_buf_alloc_len+0x80>
   1cf60:	f1b8 3fff 	cmp.w	r8, #4294967295
   1cf64:	bf08      	it	eq
   1cf66:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1cf6a:	d009      	beq.n	1cf80 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1cf6c:	f005 f8c4 	bl	220f8 <sys_clock_tick_get>
   1cf70:	ebba 0700 	subs.w	r7, sl, r0
   1cf74:	eb6b 0601 	sbc.w	r6, fp, r1
   1cf78:	2e00      	cmp	r6, #0
   1cf7a:	bfbc      	itt	lt
   1cf7c:	2700      	movlt	r7, #0
   1cf7e:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cf80:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1cf82:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1d020 <net_buf_alloc_len+0x120>
   1cf86:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1cf8a:	fb09 8303 	mla	r3, r9, r3, r8
   1cf8e:	463a      	mov	r2, r7
   1cf90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cf92:	681b      	ldr	r3, [r3, #0]
   1cf94:	a901      	add	r1, sp, #4
   1cf96:	681d      	ldr	r5, [r3, #0]
   1cf98:	4620      	mov	r0, r4
   1cf9a:	4633      	mov	r3, r6
   1cf9c:	47a8      	blx	r5
   1cf9e:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1cfa0:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1cfa2:	2800      	cmp	r0, #0
   1cfa4:	d131      	bne.n	1d00a <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   1cfa6:	79a0      	ldrb	r0, [r4, #6]
   1cfa8:	4621      	mov	r1, r4
   1cfaa:	fb00 8009 	mla	r0, r0, r9, r8
   1cfae:	f00c ff9a 	bl	29ee6 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1cfb2:	462c      	mov	r4, r5
}
   1cfb4:	e024      	b.n	1d000 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   1cfb6:	8b68      	ldrh	r0, [r5, #26]
   1cfb8:	1e43      	subs	r3, r0, #1
   1cfba:	836b      	strh	r3, [r5, #26]
   1cfbc:	f381 8811 	msr	BASEPRI, r1
   1cfc0:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1cfc4:	7f2a      	ldrb	r2, [r5, #28]
   1cfc6:	f102 0417 	add.w	r4, r2, #23
   1cfca:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1cfce:	8b2c      	ldrh	r4, [r5, #24]
   1cfd0:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1cfd2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1cfd4:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1cfd8:	4811      	ldr	r0, [pc, #68]	; (1d020 <net_buf_alloc_len+0x120>)
   1cfda:	4b12      	ldr	r3, [pc, #72]	; (1d024 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   1cfdc:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   1cfde:	1a2d      	subs	r5, r5, r0
   1cfe0:	10ad      	asrs	r5, r5, #2
   1cfe2:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1cfe4:	71a5      	strb	r5, [r4, #6]
		goto success;
   1cfe6:	e7b5      	b.n	1cf54 <net_buf_alloc_len+0x54>
   1cfe8:	f381 8811 	msr	BASEPRI, r1
   1cfec:	f3bf 8f6f 	isb	sy
   1cff0:	464a      	mov	r2, r9
   1cff2:	4643      	mov	r3, r8
   1cff4:	4628      	mov	r0, r5
   1cff6:	f004 f95d 	bl	212b4 <z_impl_k_queue_get>
	if (!buf) {
   1cffa:	4604      	mov	r4, r0
   1cffc:	2800      	cmp	r0, #0
   1cffe:	d1a9      	bne.n	1cf54 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1d000:	4620      	mov	r0, r4
   1d002:	b003      	add	sp, #12
   1d004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1d008:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1d00a:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1d00c:	2201      	movs	r2, #1
	buf->frags = NULL;
   1d00e:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1d010:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1d012:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1d014:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1d016:	6923      	ldr	r3, [r4, #16]
   1d018:	81e2      	strh	r2, [r4, #14]
   1d01a:	60a3      	str	r3, [r4, #8]
	return buf;
   1d01c:	e7f0      	b.n	1d000 <net_buf_alloc_len+0x100>
   1d01e:	bf00      	nop
   1d020:	20000a68 	.word	0x20000a68
   1d024:	ba2e8ba3 	.word	0xba2e8ba3

0001d028 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1d028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d02c:	4d16      	ldr	r5, [pc, #88]	; (1d088 <net_buf_unref+0x60>)
   1d02e:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1d030:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1d032:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   1d034:	b90c      	cbnz	r4, 1d03a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1d036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1d03a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1d03c:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1d040:	3b01      	subs	r3, #1
   1d042:	b2db      	uxtb	r3, r3
   1d044:	7123      	strb	r3, [r4, #4]
   1d046:	2b00      	cmp	r3, #0
   1d048:	d1f5      	bne.n	1d036 <net_buf_unref+0xe>
		if (buf->__buf) {
   1d04a:	6921      	ldr	r1, [r4, #16]
   1d04c:	b159      	cbz	r1, 1d066 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1d04e:	7963      	ldrb	r3, [r4, #5]
   1d050:	079b      	lsls	r3, r3, #30
   1d052:	d407      	bmi.n	1d064 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d054:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1d056:	fb07 5303 	mla	r3, r7, r3, r5
   1d05a:	4620      	mov	r0, r4
   1d05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d05e:	681b      	ldr	r3, [r3, #0]
   1d060:	689b      	ldr	r3, [r3, #8]
   1d062:	4798      	blx	r3
			buf->__buf = NULL;
   1d064:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1d066:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1d068:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1d06a:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1d06e:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1d070:	6a1b      	ldr	r3, [r3, #32]
   1d072:	b11b      	cbz	r3, 1d07c <net_buf_unref+0x54>
			pool->destroy(buf);
   1d074:	4620      	mov	r0, r4
   1d076:	4798      	blx	r3
{
   1d078:	4644      	mov	r4, r8
   1d07a:	e7db      	b.n	1d034 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1d07c:	4621      	mov	r1, r4
   1d07e:	fb00 5007 	mla	r0, r0, r7, r5
   1d082:	f00c ff30 	bl	29ee6 <k_queue_prepend>
}
   1d086:	e7f7      	b.n	1d078 <net_buf_unref+0x50>
   1d088:	20000a68 	.word	0x20000a68

0001d08c <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1d08c:	b508      	push	{r3, lr}
	entropy_driver = DEVICE_DT_GET(DT_CHOSEN(zephyr_entropy));
   1d08e:	4b05      	ldr	r3, [pc, #20]	; (1d0a4 <xoshiro128_initialize+0x18>)
   1d090:	4805      	ldr	r0, [pc, #20]	; (1d0a8 <xoshiro128_initialize+0x1c>)
   1d092:	6018      	str	r0, [r3, #0]
   1d094:	f00c fdc5 	bl	29c22 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
   1d098:	2800      	cmp	r0, #0
	}
	return 0;
}
   1d09a:	bf0c      	ite	eq
   1d09c:	f06f 0012 	mvneq.w	r0, #18
   1d0a0:	2000      	movne	r0, #0
   1d0a2:	bd08      	pop	{r3, pc}
   1d0a4:	20002ce0 	.word	0x20002ce0
   1d0a8:	0002a8f8 	.word	0x0002a8f8

0001d0ac <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1d0ac:	4b08      	ldr	r3, [pc, #32]	; (1d0d0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1d0ae:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1d0b0:	1ac3      	subs	r3, r0, r3
{
   1d0b2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d0b4:	4907      	ldr	r1, [pc, #28]	; (1d0d4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1d0b6:	109b      	asrs	r3, r3, #2
{
   1d0b8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d0ba:	4359      	muls	r1, r3
   1d0bc:	4806      	ldr	r0, [pc, #24]	; (1d0d8 <onoff_stop+0x2c>)
   1d0be:	2240      	movs	r2, #64	; 0x40
   1d0c0:	f00c f86f 	bl	291a2 <stop>
	notify(mgr, res);
   1d0c4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d0c6:	4601      	mov	r1, r0
	notify(mgr, res);
   1d0c8:	4620      	mov	r0, r4
}
   1d0ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1d0ce:	4718      	bx	r3
   1d0d0:	20002cf4 	.word	0x20002cf4
   1d0d4:	b6db6db7 	.word	0xb6db6db7
   1d0d8:	0002a880 	.word	0x0002a880

0001d0dc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1d0dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1d0de:	4c0c      	ldr	r4, [pc, #48]	; (1d110 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d0e0:	4a0c      	ldr	r2, [pc, #48]	; (1d114 <onoff_start+0x38>)
   1d0e2:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   1d0e4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d0e6:	9300      	str	r3, [sp, #0]
{
   1d0e8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d0ea:	460b      	mov	r3, r1
   1d0ec:	490a      	ldr	r1, [pc, #40]	; (1d118 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   1d0ee:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d0f0:	4361      	muls	r1, r4
{
   1d0f2:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d0f4:	4809      	ldr	r0, [pc, #36]	; (1d11c <onoff_start+0x40>)
   1d0f6:	f00c f881 	bl	291fc <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1d0fa:	1e01      	subs	r1, r0, #0
   1d0fc:	da05      	bge.n	1d10a <onoff_start+0x2e>
		notify(mgr, err);
   1d0fe:	4630      	mov	r0, r6
   1d100:	462b      	mov	r3, r5
	}
}
   1d102:	b002      	add	sp, #8
   1d104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1d108:	4718      	bx	r3
}
   1d10a:	b002      	add	sp, #8
   1d10c:	bd70      	pop	{r4, r5, r6, pc}
   1d10e:	bf00      	nop
   1d110:	20002cf4 	.word	0x20002cf4
   1d114:	0002926b 	.word	0x0002926b
   1d118:	b6db6db7 	.word	0xb6db6db7
   1d11c:	0002a880 	.word	0x0002a880

0001d120 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d120:	2200      	movs	r2, #0
{
   1d122:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d124:	2101      	movs	r1, #1
{
   1d126:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d128:	4610      	mov	r0, r2
   1d12a:	f7f7 f81f 	bl	1416c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1d12e:	480f      	ldr	r0, [pc, #60]	; (1d16c <clk_init+0x4c>)
   1d130:	f002 fd10 	bl	1fb54 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1d134:	4b0e      	ldr	r3, [pc, #56]	; (1d170 <clk_init+0x50>)
   1d136:	4298      	cmp	r0, r3
   1d138:	d115      	bne.n	1d166 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1d13a:	f00c fc30 	bl	2999e <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1d13e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d140:	490c      	ldr	r1, [pc, #48]	; (1d174 <clk_init+0x54>)
   1d142:	4630      	mov	r0, r6
   1d144:	f008 fd31 	bl	25baa <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1d148:	2800      	cmp	r0, #0
   1d14a:	db0b      	blt.n	1d164 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
   1d14c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d14e:	4909      	ldr	r1, [pc, #36]	; (1d174 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d150:	2501      	movs	r5, #1
   1d152:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d154:	f104 001c 	add.w	r0, r4, #28
   1d158:	f008 fd27 	bl	25baa <onoff_manager_init>
		if (err < 0) {
   1d15c:	2800      	cmp	r0, #0
   1d15e:	db01      	blt.n	1d164 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d160:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   1d162:	2000      	movs	r0, #0
}
   1d164:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1d166:	f06f 0004 	mvn.w	r0, #4
   1d16a:	e7fb      	b.n	1d164 <clk_init+0x44>
   1d16c:	0001d1ad 	.word	0x0001d1ad
   1d170:	0bad0000 	.word	0x0bad0000
   1d174:	0002b720 	.word	0x0002b720

0001d178 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1d178:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1d17a:	230c      	movs	r3, #12
   1d17c:	4809      	ldr	r0, [pc, #36]	; (1d1a4 <clkstarted_handle.constprop.0+0x2c>)
   1d17e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1d180:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1d182:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1d184:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   1d188:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1d18a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   1d18c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1d18e:	4418      	add	r0, r3
   1d190:	f00b fff4 	bl	2917c <set_on_state>
	if (callback) {
   1d194:	b12d      	cbz	r5, 1d1a2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1d196:	4632      	mov	r2, r6
   1d198:	462b      	mov	r3, r5
   1d19a:	4803      	ldr	r0, [pc, #12]	; (1d1a8 <clkstarted_handle.constprop.0+0x30>)
}
   1d19c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1d1a0:	4718      	bx	r3
}
   1d1a2:	bd70      	pop	{r4, r5, r6, pc}
   1d1a4:	20002cf4 	.word	0x20002cf4
   1d1a8:	0002a880 	.word	0x0002a880

0001d1ac <clock_event_handler>:
	switch (event) {
   1d1ac:	b110      	cbz	r0, 1d1b4 <clock_event_handler+0x8>
   1d1ae:	2801      	cmp	r0, #1
   1d1b0:	d004      	beq.n	1d1bc <clock_event_handler+0x10>
   1d1b2:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1d1b4:	4b03      	ldr	r3, [pc, #12]	; (1d1c4 <clock_event_handler+0x18>)
   1d1b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d1b8:	075b      	lsls	r3, r3, #29
   1d1ba:	d101      	bne.n	1d1c0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1d1bc:	f7ff bfdc 	b.w	1d178 <clkstarted_handle.constprop.0>
}
   1d1c0:	4770      	bx	lr
   1d1c2:	bf00      	nop
   1d1c4:	20002cf4 	.word	0x20002cf4

0001d1c8 <generic_hfclk_start>:
{
   1d1c8:	b508      	push	{r3, lr}
	__asm__ volatile(
   1d1ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d1ce:	f3ef 8111 	mrs	r1, BASEPRI
   1d1d2:	f383 8812 	msr	BASEPRI_MAX, r3
   1d1d6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1d1da:	4a12      	ldr	r2, [pc, #72]	; (1d224 <generic_hfclk_start+0x5c>)
   1d1dc:	6813      	ldr	r3, [r2, #0]
   1d1de:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1d1e2:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1d1e6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1d1e8:	d00c      	beq.n	1d204 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1d1ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1d1ee:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1d1f2:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1d1f6:	f013 0301 	ands.w	r3, r3, #1
   1d1fa:	d003      	beq.n	1d204 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1d1fc:	480a      	ldr	r0, [pc, #40]	; (1d228 <generic_hfclk_start+0x60>)
   1d1fe:	f00b ffbd 	bl	2917c <set_on_state>
			already_started = true;
   1d202:	2301      	movs	r3, #1
	__asm__ volatile(
   1d204:	f381 8811 	msr	BASEPRI, r1
   1d208:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1d20c:	b123      	cbz	r3, 1d218 <generic_hfclk_start+0x50>
}
   1d20e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1d212:	2000      	movs	r0, #0
   1d214:	f7ff bfb0 	b.w	1d178 <clkstarted_handle.constprop.0>
}
   1d218:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1d21c:	2001      	movs	r0, #1
   1d21e:	f002 bc89 	b.w	1fb34 <nrfx_clock_start>
   1d222:	bf00      	nop
   1d224:	20002d44 	.word	0x20002d44
   1d228:	20002d34 	.word	0x20002d34

0001d22c <api_blocking_start>:
{
   1d22c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d22e:	2200      	movs	r2, #0
   1d230:	2301      	movs	r3, #1
   1d232:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1d236:	ab04      	add	r3, sp, #16
   1d238:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d23c:	4a09      	ldr	r2, [pc, #36]	; (1d264 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d23e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d242:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d244:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d248:	f00c f808 	bl	2925c <api_start>
	if (err < 0) {
   1d24c:	2800      	cmp	r0, #0
   1d24e:	db05      	blt.n	1d25c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1d250:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1d254:	2300      	movs	r3, #0
   1d256:	4668      	mov	r0, sp
   1d258:	f004 f886 	bl	21368 <z_impl_k_sem_take>
}
   1d25c:	b007      	add	sp, #28
   1d25e:	f85d fb04 	ldr.w	pc, [sp], #4
   1d262:	bf00      	nop
   1d264:	00029289 	.word	0x00029289

0001d268 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d268:	4b09      	ldr	r3, [pc, #36]	; (1d290 <generic_hfclk_stop+0x28>)
   1d26a:	f3bf 8f5b 	dmb	ish
   1d26e:	e853 2f00 	ldrex	r2, [r3]
   1d272:	f022 0102 	bic.w	r1, r2, #2
   1d276:	e843 1000 	strex	r0, r1, [r3]
   1d27a:	2800      	cmp	r0, #0
   1d27c:	d1f7      	bne.n	1d26e <generic_hfclk_stop+0x6>
   1d27e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1d282:	07d3      	lsls	r3, r2, #31
   1d284:	d402      	bmi.n	1d28c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1d286:	2001      	movs	r0, #1
   1d288:	f00c bb84 	b.w	29994 <nrfx_clock_stop>
}
   1d28c:	4770      	bx	lr
   1d28e:	bf00      	nop
   1d290:	20002d44 	.word	0x20002d44

0001d294 <z_nrf_clock_control_lf_on>:
{
   1d294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d296:	4928      	ldr	r1, [pc, #160]	; (1d338 <z_nrf_clock_control_lf_on+0xa4>)
   1d298:	f3bf 8f5b 	dmb	ish
   1d29c:	4606      	mov	r6, r0
   1d29e:	2201      	movs	r2, #1
   1d2a0:	e851 3f00 	ldrex	r3, [r1]
   1d2a4:	e841 2000 	strex	r0, r2, [r1]
   1d2a8:	2800      	cmp	r0, #0
   1d2aa:	d1f9      	bne.n	1d2a0 <z_nrf_clock_control_lf_on+0xc>
   1d2ac:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1d2b0:	b933      	cbnz	r3, 1d2c0 <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1d2b2:	4922      	ldr	r1, [pc, #136]	; (1d33c <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
   1d2b4:	4822      	ldr	r0, [pc, #136]	; (1d340 <z_nrf_clock_control_lf_on+0xac>)
   1d2b6:	604b      	str	r3, [r1, #4]
   1d2b8:	60cb      	str	r3, [r1, #12]
   1d2ba:	608a      	str	r2, [r1, #8]
   1d2bc:	f008 fc88 	bl	25bd0 <onoff_request>
	switch (start_mode) {
   1d2c0:	1e73      	subs	r3, r6, #1
   1d2c2:	2b01      	cmp	r3, #1
   1d2c4:	d820      	bhi.n	1d308 <z_nrf_clock_control_lf_on+0x74>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d2c6:	f00c fd64 	bl	29d92 <k_is_in_isr>
   1d2ca:	4604      	mov	r4, r0
   1d2cc:	b910      	cbnz	r0, 1d2d4 <z_nrf_clock_control_lf_on+0x40>
	return !z_sys_post_kernel;
   1d2ce:	4b1d      	ldr	r3, [pc, #116]	; (1d344 <z_nrf_clock_control_lf_on+0xb0>)
	int key = isr_mode ? irq_lock() : 0;
   1d2d0:	781b      	ldrb	r3, [r3, #0]
   1d2d2:	bb53      	cbnz	r3, 1d32a <z_nrf_clock_control_lf_on+0x96>
	__asm__ volatile(
   1d2d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d2d8:	f3ef 8511 	mrs	r5, BASEPRI
   1d2dc:	f383 8812 	msr	BASEPRI_MAX, r3
   1d2e0:	f3bf 8f6f 	isb	sy
   1d2e4:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1d2e6:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   1d2ea:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1d2ee:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
   1d2f2:	03d2      	lsls	r2, r2, #15
   1d2f4:	d509      	bpl.n	1d30a <z_nrf_clock_control_lf_on+0x76>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1d2f6:	079b      	lsls	r3, r3, #30
   1d2f8:	d001      	beq.n	1d2fe <z_nrf_clock_control_lf_on+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1d2fa:	2e01      	cmp	r6, #1
   1d2fc:	d105      	bne.n	1d30a <z_nrf_clock_control_lf_on+0x76>
	if (isr_mode) {
   1d2fe:	b174      	cbz	r4, 1d31e <z_nrf_clock_control_lf_on+0x8a>
	__asm__ volatile(
   1d300:	f385 8811 	msr	BASEPRI, r5
   1d304:	f3bf 8f6f 	isb	sy
}
   1d308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1d30a:	b11c      	cbz	r4, 1d314 <z_nrf_clock_control_lf_on+0x80>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1d30c:	4628      	mov	r0, r5
   1d30e:	f7f6 fe8b 	bl	14028 <arch_cpu_atomic_idle>
}
   1d312:	e7ea      	b.n	1d2ea <z_nrf_clock_control_lf_on+0x56>
	return z_impl_k_sleep(timeout);
   1d314:	2100      	movs	r1, #0
   1d316:	2021      	movs	r0, #33	; 0x21
   1d318:	f004 fd08 	bl	21d2c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d31c:	e7e5      	b.n	1d2ea <z_nrf_clock_control_lf_on+0x56>
    p_reg->INTENSET = mask;
   1d31e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d322:	2202      	movs	r2, #2
   1d324:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d328:	e7ee      	b.n	1d308 <z_nrf_clock_control_lf_on+0x74>
    p_reg->INTENCLR = mask;
   1d32a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d32e:	2202      	movs	r2, #2
   1d330:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1d334:	4605      	mov	r5, r0
}
   1d336:	e7d6      	b.n	1d2e6 <z_nrf_clock_control_lf_on+0x52>
   1d338:	20002d48 	.word	0x20002d48
   1d33c:	20002ce4 	.word	0x20002ce4
   1d340:	20002d10 	.word	0x20002d10
   1d344:	200047c3 	.word	0x200047c3

0001d348 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   1d348:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   1d34a:	4c04      	ldr	r4, [pc, #16]	; (1d35c <rtt_console_init+0x14>)
   1d34c:	4620      	mov	r0, r4
   1d34e:	f7f5 f831 	bl	123b4 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   1d352:	4620      	mov	r0, r4
   1d354:	f7f7 fc1c 	bl	14b90 <__stdout_hook_install>

	return 0;
}
   1d358:	2000      	movs	r0, #0
   1d35a:	bd10      	pop	{r4, pc}
   1d35c:	0001d361 	.word	0x0001d361

0001d360 <rtt_console_out>:
{
   1d360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d362:	4e13      	ldr	r6, [pc, #76]	; (1d3b0 <rtt_console_out+0x50>)
	char c = (char)character;
   1d364:	f88d 0007 	strb.w	r0, [sp, #7]
{
   1d368:	4604      	mov	r4, r0
	char c = (char)character;
   1d36a:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
   1d36c:	f003 fc3c 	bl	20be8 <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   1d370:	2201      	movs	r2, #1
   1d372:	f10d 0107 	add.w	r1, sp, #7
   1d376:	2000      	movs	r0, #0
   1d378:	f003 fbfc 	bl	20b74 <SEGGER_RTT_WriteNoLock>
   1d37c:	4607      	mov	r7, r0
		SEGGER_RTT_UNLOCK();
   1d37e:	f003 fc3d 	bl	20bfc <zephyr_rtt_mutex_unlock>
		if (cnt) {
   1d382:	b127      	cbz	r7, 1d38e <rtt_console_out+0x2e>
			host_present = true;
   1d384:	2301      	movs	r3, #1
   1d386:	7033      	strb	r3, [r6, #0]
}
   1d388:	4620      	mov	r0, r4
   1d38a:	b003      	add	sp, #12
   1d38c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
   1d38e:	7833      	ldrb	r3, [r6, #0]
   1d390:	2b00      	cmp	r3, #0
   1d392:	d0f9      	beq.n	1d388 <rtt_console_out+0x28>
			if (max_cnt) {
   1d394:	3d01      	subs	r5, #1
   1d396:	d008      	beq.n	1d3aa <rtt_console_out+0x4a>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   1d398:	f00c fcfb 	bl	29d92 <k_is_in_isr>
   1d39c:	2800      	cmp	r0, #0
   1d39e:	d1e5      	bne.n	1d36c <rtt_console_out+0xc>
   1d3a0:	2100      	movs	r1, #0
   1d3a2:	2042      	movs	r0, #66	; 0x42
   1d3a4:	f004 fcc2 	bl	21d2c <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
   1d3a8:	e7e0      	b.n	1d36c <rtt_console_out+0xc>
				host_present = false;
   1d3aa:	7035      	strb	r5, [r6, #0]
   1d3ac:	e7ec      	b.n	1d388 <rtt_console_out+0x28>
   1d3ae:	bf00      	nop
   1d3b0:	20003bad 	.word	0x20003bad

0001d3b4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1d3b4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   1d3b6:	4b08      	ldr	r3, [pc, #32]	; (1d3d8 <uart_console_init+0x24>)
   1d3b8:	4808      	ldr	r0, [pc, #32]	; (1d3dc <uart_console_init+0x28>)
   1d3ba:	6018      	str	r0, [r3, #0]
   1d3bc:	f00c fc31 	bl	29c22 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   1d3c0:	b138      	cbz	r0, 1d3d2 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   1d3c2:	4807      	ldr	r0, [pc, #28]	; (1d3e0 <uart_console_init+0x2c>)
   1d3c4:	f7f7 fbe4 	bl	14b90 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1d3c8:	4805      	ldr	r0, [pc, #20]	; (1d3e0 <uart_console_init+0x2c>)
   1d3ca:	f7f4 fff3 	bl	123b4 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1d3ce:	2000      	movs	r0, #0
}
   1d3d0:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1d3d2:	f06f 0012 	mvn.w	r0, #18
   1d3d6:	e7fb      	b.n	1d3d0 <uart_console_init+0x1c>
   1d3d8:	20002d4c 	.word	0x20002d4c
   1d3dc:	0002a910 	.word	0x0002a910
   1d3e0:	0001d3e5 	.word	0x0001d3e5

0001d3e4 <console_out>:
	if ('\n' == c) {
   1d3e4:	280a      	cmp	r0, #10
{
   1d3e6:	b538      	push	{r3, r4, r5, lr}
   1d3e8:	4d07      	ldr	r5, [pc, #28]	; (1d408 <console_out+0x24>)
   1d3ea:	4604      	mov	r4, r0
	if ('\n' == c) {
   1d3ec:	d104      	bne.n	1d3f8 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   1d3ee:	6828      	ldr	r0, [r5, #0]
   1d3f0:	6883      	ldr	r3, [r0, #8]
   1d3f2:	210d      	movs	r1, #13
   1d3f4:	685b      	ldr	r3, [r3, #4]
   1d3f6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   1d3f8:	6828      	ldr	r0, [r5, #0]
   1d3fa:	6883      	ldr	r3, [r0, #8]
   1d3fc:	b2e1      	uxtb	r1, r4
   1d3fe:	685b      	ldr	r3, [r3, #4]
   1d400:	4798      	blx	r3
}
   1d402:	4620      	mov	r0, r4
   1d404:	bd38      	pop	{r3, r4, r5, pc}
   1d406:	bf00      	nop
   1d408:	20002d4c 	.word	0x20002d4c

0001d40c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1d40c:	b530      	push	{r4, r5, lr}
	return port->config;
   1d40e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d410:	7b04      	ldrb	r4, [r0, #12]
   1d412:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1d416:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d41a:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   1d41e:	b085      	sub	sp, #20
   1d420:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   1d424:	d105      	bne.n	1d432 <gpio_nrfx_pin_interrupt_configure+0x26>
		nrfx_gpiote_trigger_disable(abs_pin);
   1d426:	4628      	mov	r0, r5
   1d428:	f003 f83c 	bl	204a4 <nrfx_gpiote_trigger_disable>
		return -EINVAL;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   1d42c:	2000      	movs	r0, #0
}
   1d42e:	b005      	add	sp, #20
   1d430:	bd30      	pop	{r4, r5, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
   1d432:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d436:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1d43a:	d134      	bne.n	1d4a6 <gpio_nrfx_pin_interrupt_configure+0x9a>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1d43c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1d440:	bf0c      	ite	eq
   1d442:	2304      	moveq	r3, #4
   1d444:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d446:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1d44a:	6883      	ldr	r3, [r0, #8]
   1d44c:	fa23 f101 	lsr.w	r1, r3, r1
   1d450:	07c9      	lsls	r1, r1, #31
   1d452:	d41a      	bmi.n	1d48a <gpio_nrfx_pin_interrupt_configure+0x7e>
   1d454:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1d458:	d117      	bne.n	1d48a <gpio_nrfx_pin_interrupt_configure+0x7e>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1d45a:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   1d45c:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1d45e:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   1d462:	4a1c      	ldr	r2, [pc, #112]	; (1d4d4 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d464:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   1d468:	bf18      	it	ne
   1d46a:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d46e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1d472:	07db      	lsls	r3, r3, #31
   1d474:	d409      	bmi.n	1d48a <gpio_nrfx_pin_interrupt_configure+0x7e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1d476:	f10d 0407 	add.w	r4, sp, #7
   1d47a:	4621      	mov	r1, r4
   1d47c:	4628      	mov	r0, r5
   1d47e:	f002 ff75 	bl	2036c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1d482:	4b15      	ldr	r3, [pc, #84]	; (1d4d8 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   1d484:	4298      	cmp	r0, r3
   1d486:	d019      	beq.n	1d4bc <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
   1d488:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d48a:	2300      	movs	r3, #0
   1d48c:	4619      	mov	r1, r3
   1d48e:	aa02      	add	r2, sp, #8
   1d490:	4628      	mov	r0, r5
   1d492:	f002 fe45 	bl	20120 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1d496:	4b11      	ldr	r3, [pc, #68]	; (1d4dc <gpio_nrfx_pin_interrupt_configure+0xd0>)
   1d498:	4298      	cmp	r0, r3
   1d49a:	d118      	bne.n	1d4ce <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1d49c:	2101      	movs	r1, #1
   1d49e:	4628      	mov	r0, r5
   1d4a0:	f002 ffb8 	bl	20414 <nrfx_gpiote_trigger_enable>
   1d4a4:	e7c2      	b.n	1d42c <gpio_nrfx_pin_interrupt_configure+0x20>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1d4a6:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1d4aa:	d005      	beq.n	1d4b8 <gpio_nrfx_pin_interrupt_configure+0xac>
   1d4ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1d4b0:	bf0c      	ite	eq
   1d4b2:	2302      	moveq	r3, #2
   1d4b4:	2301      	movne	r3, #1
   1d4b6:	e7c6      	b.n	1d446 <gpio_nrfx_pin_interrupt_configure+0x3a>
   1d4b8:	2303      	movs	r3, #3
   1d4ba:	e7c4      	b.n	1d446 <gpio_nrfx_pin_interrupt_configure+0x3a>
			err = nrfx_gpiote_channel_alloc(&ch);
   1d4bc:	4620      	mov	r0, r4
   1d4be:	f002 ffa3 	bl	20408 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1d4c2:	4b06      	ldr	r3, [pc, #24]	; (1d4dc <gpio_nrfx_pin_interrupt_configure+0xd0>)
   1d4c4:	4298      	cmp	r0, r3
   1d4c6:	d0df      	beq.n	1d488 <gpio_nrfx_pin_interrupt_configure+0x7c>
				return -ENOMEM;
   1d4c8:	f06f 000b 	mvn.w	r0, #11
   1d4cc:	e7af      	b.n	1d42e <gpio_nrfx_pin_interrupt_configure+0x22>
		return -EINVAL;
   1d4ce:	f06f 0015 	mvn.w	r0, #21
   1d4d2:	e7ac      	b.n	1d42e <gpio_nrfx_pin_interrupt_configure+0x22>
   1d4d4:	50000300 	.word	0x50000300
   1d4d8:	0bad0004 	.word	0x0bad0004
   1d4dc:	0bad0000 	.word	0x0bad0000

0001d4e0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1d4e0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1d4e2:	f002 ff81 	bl	203e8 <nrfx_gpiote_is_init>
   1d4e6:	4604      	mov	r4, r0
   1d4e8:	b968      	cbnz	r0, 1d506 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1d4ea:	f002 ff55 	bl	20398 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1d4ee:	4b08      	ldr	r3, [pc, #32]	; (1d510 <gpio_nrfx_init+0x30>)
   1d4f0:	4298      	cmp	r0, r3
   1d4f2:	d10a      	bne.n	1d50a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1d4f4:	4807      	ldr	r0, [pc, #28]	; (1d514 <gpio_nrfx_init+0x34>)
   1d4f6:	4621      	mov	r1, r4
   1d4f8:	f002 ff32 	bl	20360 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1d4fc:	4622      	mov	r2, r4
   1d4fe:	2105      	movs	r1, #5
   1d500:	2006      	movs	r0, #6
   1d502:	f7f6 fe33 	bl	1416c <z_arm_irq_priority_set>
		return 0;
   1d506:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1d508:	bd10      	pop	{r4, pc}
		return -EIO;
   1d50a:	f06f 0004 	mvn.w	r0, #4
   1d50e:	e7fb      	b.n	1d508 <gpio_nrfx_init+0x28>
   1d510:	0bad0000 	.word	0x0bad0000
   1d514:	0001d519 	.word	0x0001d519

0001d518 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1d518:	0942      	lsrs	r2, r0, #5
{
   1d51a:	b570      	push	{r4, r5, r6, lr}
   1d51c:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1d51e:	d002      	beq.n	1d526 <nrfx_gpio_handler+0xe>
   1d520:	2a01      	cmp	r2, #1
   1d522:	d015      	beq.n	1d550 <nrfx_gpio_handler+0x38>
}
   1d524:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1d526:	4e0b      	ldr	r6, [pc, #44]	; (1d554 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1d528:	6932      	ldr	r2, [r6, #16]
   1d52a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d52c:	2900      	cmp	r1, #0
   1d52e:	d0f9      	beq.n	1d524 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   1d530:	f003 031f 	and.w	r3, r3, #31
   1d534:	2501      	movs	r5, #1
   1d536:	680c      	ldr	r4, [r1, #0]
   1d538:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   1d53a:	688a      	ldr	r2, [r1, #8]
   1d53c:	402a      	ands	r2, r5
   1d53e:	d002      	beq.n	1d546 <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1d540:	684b      	ldr	r3, [r1, #4]
   1d542:	4630      	mov	r0, r6
   1d544:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d546:	2c00      	cmp	r4, #0
   1d548:	d0ec      	beq.n	1d524 <nrfx_gpio_handler+0xc>
   1d54a:	4621      	mov	r1, r4
   1d54c:	6824      	ldr	r4, [r4, #0]
   1d54e:	e7f4      	b.n	1d53a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1d550:	4e01      	ldr	r6, [pc, #4]	; (1d558 <nrfx_gpio_handler+0x40>)
   1d552:	e7e9      	b.n	1d528 <nrfx_gpio_handler+0x10>
   1d554:	0002a898 	.word	0x0002a898
   1d558:	0002a8b0 	.word	0x0002a8b0

0001d55c <gpio_nrfx_pin_configure>:
{
   1d55c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   1d560:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d564:	f898 300c 	ldrb.w	r3, [r8, #12]
   1d568:	f001 061f 	and.w	r6, r1, #31
{
   1d56c:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d56e:	ea46 1643 	orr.w	r6, r6, r3, lsl #5
{
   1d572:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1d574:	4630      	mov	r0, r6
   1d576:	f10d 0103 	add.w	r1, sp, #3
{
   1d57a:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1d57c:	f002 fef6 	bl	2036c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1d580:	f414 3540 	ands.w	r5, r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1d584:	4681      	mov	r9, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1d586:	d10b      	bne.n	1d5a0 <gpio_nrfx_pin_configure+0x44>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1d588:	4630      	mov	r0, r6
   1d58a:	f002 ffb3 	bl	204f4 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1d58e:	4b43      	ldr	r3, [pc, #268]	; (1d69c <gpio_nrfx_pin_configure+0x140>)
   1d590:	4599      	cmp	r9, r3
   1d592:	d103      	bne.n	1d59c <gpio_nrfx_pin_configure+0x40>
			err = nrfx_gpiote_channel_free(ch);
   1d594:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1d598:	f002 ff30 	bl	203fc <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d59c:	2000      	movs	r0, #0
   1d59e:	e057      	b.n	1d650 <gpio_nrfx_pin_configure+0xf4>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d5a0:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d5a2:	4619      	mov	r1, r3
   1d5a4:	aa02      	add	r2, sp, #8
   1d5a6:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d5a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d5ac:	f002 fdb8 	bl	20120 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1d5b0:	4b3a      	ldr	r3, [pc, #232]	; (1d69c <gpio_nrfx_pin_configure+0x140>)
   1d5b2:	4298      	cmp	r0, r3
   1d5b4:	d002      	beq.n	1d5bc <gpio_nrfx_pin_configure+0x60>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1d5b6:	f06f 0015 	mvn.w	r0, #21
   1d5ba:	e049      	b.n	1d650 <gpio_nrfx_pin_configure+0xf4>
	if (free_ch) {
   1d5bc:	4581      	cmp	r9, r0
   1d5be:	d103      	bne.n	1d5c8 <gpio_nrfx_pin_configure+0x6c>
		err = nrfx_gpiote_channel_free(ch);
   1d5c0:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1d5c4:	f002 ff1a 	bl	203fc <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1d5c8:	03a5      	lsls	r5, r4, #14
   1d5ca:	d554      	bpl.n	1d676 <gpio_nrfx_pin_configure+0x11a>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1d5cc:	f240 3306 	movw	r3, #774	; 0x306
   1d5d0:	4023      	ands	r3, r4
   1d5d2:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1d5d6:	d03e      	beq.n	1d656 <gpio_nrfx_pin_configure+0xfa>
   1d5d8:	d80c      	bhi.n	1d5f4 <gpio_nrfx_pin_configure+0x98>
   1d5da:	2b06      	cmp	r3, #6
   1d5dc:	d015      	beq.n	1d60a <gpio_nrfx_pin_configure+0xae>
   1d5de:	d804      	bhi.n	1d5ea <gpio_nrfx_pin_configure+0x8e>
   1d5e0:	b19b      	cbz	r3, 1d60a <gpio_nrfx_pin_configure+0xae>
   1d5e2:	2b02      	cmp	r3, #2
   1d5e4:	d1e7      	bne.n	1d5b6 <gpio_nrfx_pin_configure+0x5a>
   1d5e6:	2304      	movs	r3, #4
   1d5e8:	e00f      	b.n	1d60a <gpio_nrfx_pin_configure+0xae>
   1d5ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1d5ee:	d1e2      	bne.n	1d5b6 <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_H0S1;
   1d5f0:	2301      	movs	r3, #1
   1d5f2:	e00a      	b.n	1d60a <gpio_nrfx_pin_configure+0xae>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1d5f4:	f240 2202 	movw	r2, #514	; 0x202
   1d5f8:	4293      	cmp	r3, r2
   1d5fa:	d02e      	beq.n	1d65a <gpio_nrfx_pin_configure+0xfe>
   1d5fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1d600:	d02d      	beq.n	1d65e <gpio_nrfx_pin_configure+0x102>
   1d602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1d606:	d1d6      	bne.n	1d5b6 <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_S0H1;
   1d608:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   1d60a:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1d60e:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1d612:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1d616:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1d618:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   1d61c:	bf54      	ite	pl
   1d61e:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1d622:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1d624:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1d626:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1d62a:	d51a      	bpl.n	1d662 <gpio_nrfx_pin_configure+0x106>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1d62c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d630:	2101      	movs	r1, #1
   1d632:	fa01 f707 	lsl.w	r7, r1, r7
    p_reg->OUTSET = set_mask;
   1d636:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1d63a:	2200      	movs	r2, #0
   1d63c:	a901      	add	r1, sp, #4
   1d63e:	4630      	mov	r0, r6
   1d640:	f002 fe1c 	bl	2027c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d644:	4b15      	ldr	r3, [pc, #84]	; (1d69c <gpio_nrfx_pin_configure+0x140>)
   1d646:	4298      	cmp	r0, r3
   1d648:	bf14      	ite	ne
   1d64a:	f06f 0015 	mvnne.w	r0, #21
   1d64e:	2000      	moveq	r0, #0
}
   1d650:	b005      	add	sp, #20
   1d652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*drive = NRF_GPIO_PIN_H0D1;
   1d656:	2307      	movs	r3, #7
   1d658:	e7d7      	b.n	1d60a <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_D0H1;
   1d65a:	2305      	movs	r3, #5
   1d65c:	e7d5      	b.n	1d60a <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_H0H1;
   1d65e:	2303      	movs	r3, #3
   1d660:	e7d3      	b.n	1d60a <gpio_nrfx_pin_configure+0xae>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1d662:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1d664:	bf41      	itttt	mi
   1d666:	f8d8 3004 	ldrmi.w	r3, [r8, #4]
   1d66a:	2101      	movmi	r1, #1
   1d66c:	fa01 f707 	lslmi.w	r7, r1, r7
    p_reg->OUTCLR = clr_mask;
   1d670:	f8c3 750c 	strmi.w	r7, [r3, #1292]	; 0x50c
}
   1d674:	e7e1      	b.n	1d63a <gpio_nrfx_pin_configure+0xde>
	if (flags & GPIO_PULL_UP) {
   1d676:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d678:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1d67c:	bf54      	ite	pl
   1d67e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   1d682:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d684:	461a      	mov	r2, r3
   1d686:	a901      	add	r1, sp, #4
   1d688:	4630      	mov	r0, r6
	nrfx_gpiote_input_config_t input_config = {
   1d68a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d68e:	f002 fd47 	bl	20120 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d692:	4b02      	ldr	r3, [pc, #8]	; (1d69c <gpio_nrfx_pin_configure+0x140>)
   1d694:	4298      	cmp	r0, r3
   1d696:	d081      	beq.n	1d59c <gpio_nrfx_pin_configure+0x40>
   1d698:	e78d      	b.n	1d5b6 <gpio_nrfx_pin_configure+0x5a>
   1d69a:	bf00      	nop
   1d69c:	0bad0000 	.word	0x0bad0000

0001d6a0 <spi_nrfx_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int spi_nrfx_init(const struct device *dev)
{
   1d6a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d6a4:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
   1d6a6:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1d6a8:	6905      	ldr	r5, [r0, #16]
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1d6aa:	6a26      	ldr	r6, [r4, #32]
{
   1d6ac:	af00      	add	r7, sp, #0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1d6ae:	1d3a      	adds	r2, r7, #4
   1d6b0:	2100      	movs	r1, #0
   1d6b2:	4630      	mov	r0, r6
   1d6b4:	f00c f81e 	bl	296f4 <pinctrl_lookup_state>
	if (ret < 0) {
   1d6b8:	2800      	cmp	r0, #0
   1d6ba:	db32      	blt.n	1d722 <spi_nrfx_init+0x82>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1d6bc:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1d6be:	6832      	ldr	r2, [r6, #0]
   1d6c0:	7919      	ldrb	r1, [r3, #4]
   1d6c2:	6818      	ldr	r0, [r3, #0]
   1d6c4:	f00c f833 	bl	2972e <pinctrl_configure_pins>
	if (err < 0) {
   1d6c8:	2800      	cmp	r0, #0
   1d6ca:	db2a      	blt.n	1d722 <spi_nrfx_init+0x82>
		return err;
	}
#endif

	dev_config->irq_connect();
   1d6cc:	69e3      	ldr	r3, [r4, #28]
   1d6ce:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1d6d0:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1d6d2:	2601      	movs	r6, #1
   1d6d4:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   1d6d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1d6dc:	429c      	cmp	r4, r3
   1d6de:	d304      	bcc.n	1d6ea <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1d6e0:	4628      	mov	r0, r5
   1d6e2:	f00b fe79 	bl	293d8 <spi_context_unlock_unconditionally>

	return 0;
   1d6e6:	2000      	movs	r0, #0
   1d6e8:	e01b      	b.n	1d722 <spi_nrfx_init+0x82>
		if (!device_is_ready(cs_gpio->port)) {
   1d6ea:	6820      	ldr	r0, [r4, #0]
   1d6ec:	f00c fa99 	bl	29c22 <z_device_is_ready>
   1d6f0:	b9d8      	cbnz	r0, 1d72a <spi_nrfx_init+0x8a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1d6f2:	6823      	ldr	r3, [r4, #0]
   1d6f4:	6819      	ldr	r1, [r3, #0]
   1d6f6:	7923      	ldrb	r3, [r4, #4]
   1d6f8:	466c      	mov	r4, sp
   1d6fa:	b08a      	sub	sp, #40	; 0x28
   1d6fc:	466a      	mov	r2, sp
   1d6fe:	481c      	ldr	r0, [pc, #112]	; (1d770 <spi_nrfx_init+0xd0>)
   1d700:	61d3      	str	r3, [r2, #28]
   1d702:	2302      	movs	r3, #2
   1d704:	f882 3020 	strb.w	r3, [r2, #32]
   1d708:	4b1a      	ldr	r3, [pc, #104]	; (1d774 <spi_nrfx_init+0xd4>)
   1d70a:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1d70e:	481a      	ldr	r0, [pc, #104]	; (1d778 <spi_nrfx_init+0xd8>)
   1d710:	f842 3f10 	str.w	r3, [r2, #16]!
   1d714:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   1d718:	f00b fe25 	bl	29366 <z_log_msg_static_create.constprop.0>
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
   1d71c:	f06f 0012 	mvn.w	r0, #18
   1d720:	46a5      	mov	sp, r4
}
   1d722:	370c      	adds	r7, #12
   1d724:	46bd      	mov	sp, r7
   1d726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return gpio_pin_configure(spec->port,
   1d72a:	6820      	ldr	r0, [r4, #0]
   1d72c:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   1d72e:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
   1d730:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
   1d734:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1d738:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1d73c:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   1d73e:	bf54      	ite	pl
   1d740:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1d744:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1d748:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1d74c:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1d750:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1d752:	bf4c      	ite	mi
   1d754:	ea4c 0308 	orrmi.w	r3, ip, r8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1d758:	ea2c 0308 	bicpl.w	r3, ip, r8
   1d75c:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
   1d760:	f8d9 3000 	ldr.w	r3, [r9]
   1d764:	4798      	blx	r3
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
   1d766:	2800      	cmp	r0, #0
   1d768:	dbdb      	blt.n	1d722 <spi_nrfx_init+0x82>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1d76a:	3408      	adds	r4, #8
   1d76c:	e7b2      	b.n	1d6d4 <spi_nrfx_init+0x34>
   1d76e:	bf00      	nop
   1d770:	0002dd7f 	.word	0x0002dd7f
   1d774:	01000004 	.word	0x01000004
   1d778:	0002ace8 	.word	0x0002ace8

0001d77c <transfer_next_chunk>:
{
   1d77c:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1d77e:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1d780:	6daa      	ldr	r2, [r5, #88]	; 0x58
		return ctx->rx_len;
   1d782:	6e2b      	ldr	r3, [r5, #96]	; 0x60
{
   1d784:	b085      	sub	sp, #20
	if (!ctx->tx_len) {
   1d786:	b982      	cbnz	r2, 1d7aa <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
   1d788:	bb73      	cbnz	r3, 1d7e8 <transfer_next_chunk+0x6c>
	int error = 0;
   1d78a:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   1d78c:	2200      	movs	r2, #0
   1d78e:	4611      	mov	r1, r2
   1d790:	4628      	mov	r0, r5
   1d792:	f00b fdff 	bl	29394 <_spi_context_cs_control>
	ctx->sync_status = status;
   1d796:	642c      	str	r4, [r5, #64]	; 0x40
	z_impl_k_sem_give(sem);
   1d798:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1d79c:	f003 fdbe 	bl	2131c <z_impl_k_sem_give>
	dev_data->busy = false;
   1d7a0:	2300      	movs	r3, #0
   1d7a2:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
}
   1d7a6:	b005      	add	sp, #20
   1d7a8:	bd30      	pop	{r4, r5, pc}
	} else if (!ctx->rx_len) {
   1d7aa:	4611      	mov	r1, r2
   1d7ac:	b113      	cbz	r3, 1d7b4 <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1d7ae:	429a      	cmp	r2, r3
   1d7b0:	bf28      	it	cs
   1d7b2:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
   1d7b4:	6d6c      	ldr	r4, [r5, #84]	; 0x54
	const struct spi_nrfx_config *dev_config = dev->config;
   1d7b6:	6840      	ldr	r0, [r0, #4]
		xfer.p_tx_buffer = ctx->tx_buf;
   1d7b8:	9400      	str	r4, [sp, #0]
		dev_data->chunk_len = chunk_len;
   1d7ba:	66a9      	str	r1, [r5, #104]	; 0x68
	return !!(ctx->tx_buf && ctx->tx_len);
   1d7bc:	b1b4      	cbz	r4, 1d7ec <transfer_next_chunk+0x70>
   1d7be:	2a00      	cmp	r2, #0
   1d7c0:	bf18      	it	ne
   1d7c2:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1d7c4:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1d7c6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1d7c8:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1d7ca:	b18a      	cbz	r2, 1d7f0 <transfer_next_chunk+0x74>
   1d7cc:	2b00      	cmp	r3, #0
   1d7ce:	bf18      	it	ne
   1d7d0:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
   1d7d2:	2200      	movs	r2, #0
   1d7d4:	4669      	mov	r1, sp
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1d7d6:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
   1d7d8:	f003 f8b2 	bl	20940 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   1d7dc:	4b05      	ldr	r3, [pc, #20]	; (1d7f4 <transfer_next_chunk+0x78>)
   1d7de:	4298      	cmp	r0, r3
   1d7e0:	d0e1      	beq.n	1d7a6 <transfer_next_chunk+0x2a>
		error = -EIO;
   1d7e2:	f06f 0404 	mvn.w	r4, #4
   1d7e6:	e7d1      	b.n	1d78c <transfer_next_chunk+0x10>
   1d7e8:	4619      	mov	r1, r3
   1d7ea:	e7e3      	b.n	1d7b4 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1d7ec:	4622      	mov	r2, r4
   1d7ee:	e7e9      	b.n	1d7c4 <transfer_next_chunk+0x48>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1d7f0:	4613      	mov	r3, r2
   1d7f2:	e7ee      	b.n	1d7d2 <transfer_next_chunk+0x56>
   1d7f4:	0bad0000 	.word	0x0bad0000

0001d7f8 <event_handler>:
{
   1d7f8:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1d7fa:	7803      	ldrb	r3, [r0, #0]
{
   1d7fc:	b086      	sub	sp, #24
   1d7fe:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1d800:	2b00      	cmp	r3, #0
   1d802:	d154      	bne.n	1d8ae <event_handler+0xb6>
	if (!ctx->tx_len) {
   1d804:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   1d806:	b163      	cbz	r3, 1d822 <event_handler+0x2a>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1d808:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	if (len > ctx->tx_len) {
   1d80a:	429a      	cmp	r2, r3
   1d80c:	d91e      	bls.n	1d84c <event_handler+0x54>
		LOG_ERR("Update exceeds current buffer");
   1d80e:	4b29      	ldr	r3, [pc, #164]	; (1d8b4 <event_handler+0xbc>)
   1d810:	9305      	str	r3, [sp, #20]
   1d812:	4829      	ldr	r0, [pc, #164]	; (1d8b8 <event_handler+0xc0>)
   1d814:	2302      	movs	r3, #2
   1d816:	aa04      	add	r2, sp, #16
   1d818:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d81c:	9304      	str	r3, [sp, #16]
   1d81e:	f00b fda2 	bl	29366 <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
   1d822:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1d824:	b163      	cbz	r3, 1d840 <event_handler+0x48>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1d826:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	if (len > ctx->rx_len) {
   1d828:	429a      	cmp	r2, r3
   1d82a:	d927      	bls.n	1d87c <event_handler+0x84>
		LOG_ERR("Update exceeds current buffer");
   1d82c:	4b21      	ldr	r3, [pc, #132]	; (1d8b4 <event_handler+0xbc>)
   1d82e:	9305      	str	r3, [sp, #20]
   1d830:	4821      	ldr	r0, [pc, #132]	; (1d8b8 <event_handler+0xc0>)
   1d832:	2302      	movs	r3, #2
   1d834:	aa04      	add	r2, sp, #16
   1d836:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d83a:	9304      	str	r3, [sp, #16]
   1d83c:	f00b fd93 	bl	29366 <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   1d840:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   1d842:	b006      	add	sp, #24
   1d844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1d848:	f7ff bf98 	b.w	1d77c <transfer_next_chunk>
	ctx->tx_len -= len;
   1d84c:	1a9b      	subs	r3, r3, r2
   1d84e:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   1d850:	b973      	cbnz	r3, 1d870 <event_handler+0x78>
		++ctx->current_tx;
   1d852:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   1d854:	3308      	adds	r3, #8
   1d856:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   1d858:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   1d85a:	3b01      	subs	r3, #1
   1d85c:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1d85e:	f101 0258 	add.w	r2, r1, #88	; 0x58
   1d862:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1d866:	3148      	adds	r1, #72	; 0x48
   1d868:	f00b fd6c 	bl	29344 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1d86c:	6560      	str	r0, [r4, #84]	; 0x54
   1d86e:	e7d8      	b.n	1d822 <event_handler+0x2a>
	} else if (ctx->tx_buf) {
   1d870:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1d872:	2b00      	cmp	r3, #0
   1d874:	d0d5      	beq.n	1d822 <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
   1d876:	4413      	add	r3, r2
   1d878:	654b      	str	r3, [r1, #84]	; 0x54
   1d87a:	e7d2      	b.n	1d822 <event_handler+0x2a>
	ctx->rx_len -= len;
   1d87c:	1a9b      	subs	r3, r3, r2
   1d87e:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1d880:	b97b      	cbnz	r3, 1d8a2 <event_handler+0xaa>
		++ctx->current_rx;
   1d882:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1d884:	3308      	adds	r3, #8
   1d886:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1d888:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1d88a:	3b01      	subs	r3, #1
   1d88c:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1d88e:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1d892:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1d896:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1d89a:	f00b fd53 	bl	29344 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   1d89e:	65e0      	str	r0, [r4, #92]	; 0x5c
   1d8a0:	e7ce      	b.n	1d840 <event_handler+0x48>
	} else if (ctx->rx_buf) {
   1d8a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1d8a4:	2b00      	cmp	r3, #0
   1d8a6:	d0cb      	beq.n	1d840 <event_handler+0x48>
		ctx->rx_buf += dfs * len;
   1d8a8:	4413      	add	r3, r2
   1d8aa:	65e3      	str	r3, [r4, #92]	; 0x5c
   1d8ac:	e7c8      	b.n	1d840 <event_handler+0x48>
}
   1d8ae:	b006      	add	sp, #24
   1d8b0:	bd10      	pop	{r4, pc}
   1d8b2:	bf00      	nop
   1d8b4:	0002dda3 	.word	0x0002dda3
   1d8b8:	0002ace8 	.word	0x0002ace8

0001d8bc <spi_nrfx_transceive>:
{
   1d8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8c0:	b08b      	sub	sp, #44	; 0x2c
   1d8c2:	469a      	mov	sl, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1d8c4:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1d8c6:	6904      	ldr	r4, [r0, #16]
{
   1d8c8:	af00      	add	r7, sp, #0
   1d8ca:	049b      	lsls	r3, r3, #18
   1d8cc:	4680      	mov	r8, r0
   1d8ce:	460e      	mov	r6, r1
   1d8d0:	60fa      	str	r2, [r7, #12]
   1d8d2:	d434      	bmi.n	1d93e <spi_nrfx_transceive+0x82>
	return z_impl_k_sem_take(sem, timeout);
   1d8d4:	f04f 32ff 	mov.w	r2, #4294967295
   1d8d8:	f04f 33ff 	mov.w	r3, #4294967295
   1d8dc:	f104 0010 	add.w	r0, r4, #16
   1d8e0:	f003 fd42 	bl	21368 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1d8e4:	6066      	str	r6, [r4, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1d8e6:	f8d8 9010 	ldr.w	r9, [r8, #16]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1d8ea:	f899 306d 	ldrb.w	r3, [r9, #109]	; 0x6d
   1d8ee:	607b      	str	r3, [r7, #4]
   1d8f0:	b123      	cbz	r3, 1d8fc <spi_nrfx_transceive+0x40>
   1d8f2:	f8d9 3000 	ldr.w	r3, [r9]
   1d8f6:	429e      	cmp	r6, r3
   1d8f8:	f000 80cc 	beq.w	1da94 <spi_nrfx_transceive+0x1d8>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1d8fc:	f8b6 c004 	ldrh.w	ip, [r6, #4]
   1d900:	f41c 6f00 	tst.w	ip, #2048	; 0x800
   1d904:	d022      	beq.n	1d94c <spi_nrfx_transceive+0x90>
		LOG_ERR("Half-duplex not supported");
   1d906:	4b99      	ldr	r3, [pc, #612]	; (1db6c <spi_nrfx_transceive+0x2b0>)
   1d908:	627b      	str	r3, [r7, #36]	; 0x24
   1d90a:	4899      	ldr	r0, [pc, #612]	; (1db70 <spi_nrfx_transceive+0x2b4>)
   1d90c:	2302      	movs	r3, #2
   1d90e:	f107 0220 	add.w	r2, r7, #32
   1d912:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
   1d916:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
   1d91a:	623b      	str	r3, [r7, #32]
   1d91c:	f00b fd23 	bl	29366 <z_log_msg_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1d920:	6823      	ldr	r3, [r4, #0]
   1d922:	889b      	ldrh	r3, [r3, #4]
   1d924:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   1d928:	d104      	bne.n	1d934 <spi_nrfx_transceive+0x78>
		ctx->owner = NULL;
   1d92a:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1d92c:	f104 0010 	add.w	r0, r4, #16
   1d930:	f003 fcf4 	bl	2131c <z_impl_k_sem_give>
}
   1d934:	4628      	mov	r0, r5
   1d936:	372c      	adds	r7, #44	; 0x2c
   1d938:	46bd      	mov	sp, r7
   1d93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1d93e:	69a3      	ldr	r3, [r4, #24]
   1d940:	2b00      	cmp	r3, #0
   1d942:	d1c7      	bne.n	1d8d4 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1d944:	6863      	ldr	r3, [r4, #4]
   1d946:	4299      	cmp	r1, r3
   1d948:	d1c4      	bne.n	1d8d4 <spi_nrfx_transceive+0x18>
   1d94a:	e7cc      	b.n	1d8e6 <spi_nrfx_transceive+0x2a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1d94c:	f01c 0f01 	tst.w	ip, #1
   1d950:	d015      	beq.n	1d97e <spi_nrfx_transceive+0xc2>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1d952:	466d      	mov	r5, sp
   1d954:	b088      	sub	sp, #32
   1d956:	f8d8 3000 	ldr.w	r3, [r8]
   1d95a:	466a      	mov	r2, sp
   1d95c:	4985      	ldr	r1, [pc, #532]	; (1db74 <spi_nrfx_transceive+0x2b8>)
   1d95e:	4884      	ldr	r0, [pc, #528]	; (1db70 <spi_nrfx_transceive+0x2b4>)
   1d960:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1d964:	2302      	movs	r3, #2
   1d966:	7713      	strb	r3, [r2, #28]
   1d968:	4b83      	ldr	r3, [pc, #524]	; (1db78 <spi_nrfx_transceive+0x2bc>)
   1d96a:	f842 3f10 	str.w	r3, [r2, #16]!
   1d96e:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1d972:	f00b fcf8 	bl	29366 <z_log_msg_static_create.constprop.0>
   1d976:	46ad      	mov	sp, r5
		return -EINVAL;
   1d978:	f06f 0515 	mvn.w	r5, #21
   1d97c:	e7d0      	b.n	1d920 <spi_nrfx_transceive+0x64>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1d97e:	f01c 0f08 	tst.w	ip, #8
   1d982:	d00b      	beq.n	1d99c <spi_nrfx_transceive+0xe0>
		LOG_ERR("Loopback mode is not supported");
   1d984:	4b7d      	ldr	r3, [pc, #500]	; (1db7c <spi_nrfx_transceive+0x2c0>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1d986:	627b      	str	r3, [r7, #36]	; 0x24
   1d988:	4879      	ldr	r0, [pc, #484]	; (1db70 <spi_nrfx_transceive+0x2b4>)
   1d98a:	2302      	movs	r3, #2
   1d98c:	f107 0220 	add.w	r2, r7, #32
   1d990:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d994:	623b      	str	r3, [r7, #32]
   1d996:	f00b fce6 	bl	29366 <z_log_msg_static_create.constprop.0>
   1d99a:	e7ed      	b.n	1d978 <spi_nrfx_transceive+0xbc>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1d99c:	f3cc 1345 	ubfx	r3, ip, #5, #6
   1d9a0:	2b08      	cmp	r3, #8
   1d9a2:	d001      	beq.n	1d9a8 <spi_nrfx_transceive+0xec>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1d9a4:	4b76      	ldr	r3, [pc, #472]	; (1db80 <spi_nrfx_transceive+0x2c4>)
   1d9a6:	e7ee      	b.n	1d986 <spi_nrfx_transceive+0xca>
	if (spi_cfg->frequency < 125000) {
   1d9a8:	6835      	ldr	r5, [r6, #0]
   1d9aa:	4b76      	ldr	r3, [pc, #472]	; (1db84 <spi_nrfx_transceive+0x2c8>)
   1d9ac:	429d      	cmp	r5, r3
   1d9ae:	d801      	bhi.n	1d9b4 <spi_nrfx_transceive+0xf8>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1d9b0:	4b75      	ldr	r3, [pc, #468]	; (1db88 <spi_nrfx_transceive+0x2cc>)
   1d9b2:	e7e8      	b.n	1d986 <spi_nrfx_transceive+0xca>
	const struct spi_nrfx_config *dev_config = dev->config;
   1d9b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d9b8:	60bb      	str	r3, [r7, #8]
	config = dev_config->def_config;
   1d9ba:	f103 0b08 	add.w	fp, r3, #8
   1d9be:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
   1d9c2:	f107 0e10 	add.w	lr, r7, #16
   1d9c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1d9ca:	f8db 3000 	ldr.w	r3, [fp]
   1d9ce:	f8ce 3000 	str.w	r3, [lr]
	if (frequency < 250000) {
   1d9d2:	4b6e      	ldr	r3, [pc, #440]	; (1db8c <spi_nrfx_transceive+0x2d0>)
   1d9d4:	429d      	cmp	r5, r3
   1d9d6:	d945      	bls.n	1da64 <spi_nrfx_transceive+0x1a8>
	} else if (frequency < 500000) {
   1d9d8:	4b6d      	ldr	r3, [pc, #436]	; (1db90 <spi_nrfx_transceive+0x2d4>)
   1d9da:	429d      	cmp	r5, r3
   1d9dc:	d945      	bls.n	1da6a <spi_nrfx_transceive+0x1ae>
	} else if (frequency < 1000000) {
   1d9de:	4b6d      	ldr	r3, [pc, #436]	; (1db94 <spi_nrfx_transceive+0x2d8>)
   1d9e0:	429d      	cmp	r5, r3
   1d9e2:	d945      	bls.n	1da70 <spi_nrfx_transceive+0x1b4>
	} else if (frequency < 2000000) {
   1d9e4:	4b6c      	ldr	r3, [pc, #432]	; (1db98 <spi_nrfx_transceive+0x2dc>)
   1d9e6:	429d      	cmp	r5, r3
   1d9e8:	d945      	bls.n	1da76 <spi_nrfx_transceive+0x1ba>
	} else if (frequency < 4000000) {
   1d9ea:	4b6c      	ldr	r3, [pc, #432]	; (1db9c <spi_nrfx_transceive+0x2e0>)
   1d9ec:	429d      	cmp	r5, r3
   1d9ee:	d945      	bls.n	1da7c <spi_nrfx_transceive+0x1c0>
		return NRF_SPI_FREQ_8M;
   1d9f0:	4b6b      	ldr	r3, [pc, #428]	; (1dba0 <spi_nrfx_transceive+0x2e4>)
   1d9f2:	429d      	cmp	r5, r3
   1d9f4:	bf34      	ite	cc
   1d9f6:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
   1d9fa:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1d9fe:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
   1da02:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1da04:	f00c 0304 	and.w	r3, ip, #4
   1da08:	d03b      	beq.n	1da82 <spi_nrfx_transceive+0x1c6>
			return NRF_SPI_MODE_2;
   1da0a:	2b00      	cmp	r3, #0
   1da0c:	bf14      	ite	ne
   1da0e:	2303      	movne	r3, #3
   1da10:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
   1da12:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
   1da14:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
   1da16:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
   1da1a:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
   1da1e:	b12b      	cbz	r3, 1da2c <spi_nrfx_transceive+0x170>
		nrfx_spi_uninit(&dev_config->spi);
   1da20:	68b8      	ldr	r0, [r7, #8]
   1da22:	f002 ff55 	bl	208d0 <nrfx_spi_uninit>
		dev_data->initialized = false;
   1da26:	2300      	movs	r3, #0
   1da28:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
	result = nrfx_spi_init(&dev_config->spi, &config,
   1da2c:	464b      	mov	r3, r9
   1da2e:	4a5d      	ldr	r2, [pc, #372]	; (1dba4 <spi_nrfx_transceive+0x2e8>)
   1da30:	68b8      	ldr	r0, [r7, #8]
   1da32:	f107 0110 	add.w	r1, r7, #16
   1da36:	f002 fe9f 	bl	20778 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
   1da3a:	4b5b      	ldr	r3, [pc, #364]	; (1dba8 <spi_nrfx_transceive+0x2ec>)
   1da3c:	4298      	cmp	r0, r3
   1da3e:	d024      	beq.n	1da8a <spi_nrfx_transceive+0x1ce>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1da40:	466d      	mov	r5, sp
   1da42:	b088      	sub	sp, #32
   1da44:	466a      	mov	r2, sp
   1da46:	4b59      	ldr	r3, [pc, #356]	; (1dbac <spi_nrfx_transceive+0x2f0>)
   1da48:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1da4c:	2303      	movs	r3, #3
   1da4e:	f842 3f10 	str.w	r3, [r2, #16]!
   1da52:	4847      	ldr	r0, [pc, #284]	; (1db70 <spi_nrfx_transceive+0x2b4>)
   1da54:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1da58:	f00b fc85 	bl	29366 <z_log_msg_static_create.constprop.0>
   1da5c:	46ad      	mov	sp, r5
		return -EIO;
   1da5e:	f06f 0504 	mvn.w	r5, #4
   1da62:	e75d      	b.n	1d920 <spi_nrfx_transceive+0x64>
		return NRF_SPI_FREQ_125K;
   1da64:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   1da68:	e7c9      	b.n	1d9fe <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_250K;
   1da6a:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   1da6e:	e7c6      	b.n	1d9fe <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_500K;
   1da70:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   1da74:	e7c3      	b.n	1d9fe <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_1M;
   1da76:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1da7a:	e7c0      	b.n	1d9fe <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_2M;
   1da7c:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   1da80:	e7bd      	b.n	1d9fe <spi_nrfx_transceive+0x142>
			return NRF_SPI_MODE_0;
   1da82:	3b00      	subs	r3, #0
   1da84:	bf18      	it	ne
   1da86:	2301      	movne	r3, #1
   1da88:	e7c3      	b.n	1da12 <spi_nrfx_transceive+0x156>
	dev_data->initialized = true;
   1da8a:	2301      	movs	r3, #1
   1da8c:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
	ctx->config = spi_cfg;
   1da90:	f8c9 6000 	str.w	r6, [r9]
		dev_data->busy = true;
   1da94:	2301      	movs	r3, #1
   1da96:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1da9a:	68fb      	ldr	r3, [r7, #12]
   1da9c:	2b00      	cmp	r3, #0
   1da9e:	d154      	bne.n	1db4a <spi_nrfx_transceive+0x28e>
   1daa0:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1daa2:	461a      	mov	r2, r3
   1daa4:	64a2      	str	r2, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1daa6:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1daaa:	f104 0258 	add.w	r2, r4, #88	; 0x58
   1daae:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1dab2:	f00b fc47 	bl	29344 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   1dab6:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1dab8:	f1ba 0f00 	cmp.w	sl, #0
   1dabc:	d14c      	bne.n	1db58 <spi_nrfx_transceive+0x29c>
   1dabe:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1dac2:	4653      	mov	r3, sl
   1dac4:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1dac6:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1daca:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1dace:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1dad2:	f00b fc37 	bl	29344 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   1dad6:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   1dad8:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   1dada:	65e0      	str	r0, [r4, #92]	; 0x5c
	_spi_context_cs_control(ctx, on, false);
   1dadc:	2101      	movs	r1, #1
   1dade:	4620      	mov	r0, r4
	ctx->sync_status = 0;
   1dae0:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   1dae2:	f00b fc57 	bl	29394 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1dae6:	4640      	mov	r0, r8
   1dae8:	f7ff fe48 	bl	1d77c <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1daec:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1daee:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   1daf0:	46a0      	mov	r8, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1daf2:	429d      	cmp	r5, r3
   1daf4:	bf38      	it	cc
   1daf6:	461d      	movcc	r5, r3
   1daf8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   1dafc:	435d      	muls	r5, r3
			     ctx->config->frequency;
   1dafe:	f858 3b28 	ldr.w	r3, [r8], #40
   1db02:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1db06:	681b      	ldr	r3, [r3, #0]
   1db08:	fbb5 f5f3 	udiv	r5, r5, r3
   1db0c:	4631      	mov	r1, r6
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1db0e:	35c8      	adds	r5, #200	; 0xc8
   1db10:	f240 30e7 	movw	r0, #999	; 0x3e7
   1db14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1db18:	2300      	movs	r3, #0
   1db1a:	fbe5 010c 	umlal	r0, r1, r5, ip
   1db1e:	f7e2 fd73 	bl	608 <__aeabi_uldivmod>
   1db22:	4602      	mov	r2, r0
   1db24:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1db26:	4640      	mov	r0, r8
   1db28:	f003 fc1e 	bl	21368 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1db2c:	b1e0      	cbz	r0, 1db68 <spi_nrfx_transceive+0x2ac>
		LOG_ERR("Timeout waiting for transfer complete");
   1db2e:	4b20      	ldr	r3, [pc, #128]	; (1dbb0 <spi_nrfx_transceive+0x2f4>)
   1db30:	627b      	str	r3, [r7, #36]	; 0x24
   1db32:	480f      	ldr	r0, [pc, #60]	; (1db70 <spi_nrfx_transceive+0x2b4>)
   1db34:	2302      	movs	r3, #2
   1db36:	f107 0220 	add.w	r2, r7, #32
   1db3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1db3e:	623b      	str	r3, [r7, #32]
		return -ETIMEDOUT;
   1db40:	f06f 0573 	mvn.w	r5, #115	; 0x73
		LOG_ERR("Timeout waiting for transfer complete");
   1db44:	f00b fc0f 	bl	29366 <z_log_msg_static_create.constprop.0>
		return -ETIMEDOUT;
   1db48:	e6ea      	b.n	1d920 <spi_nrfx_transceive+0x64>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1db4a:	68fb      	ldr	r3, [r7, #12]
   1db4c:	681a      	ldr	r2, [r3, #0]
   1db4e:	6462      	str	r2, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1db50:	2a00      	cmp	r2, #0
   1db52:	d0a7      	beq.n	1daa4 <spi_nrfx_transceive+0x1e8>
   1db54:	685a      	ldr	r2, [r3, #4]
   1db56:	e7a5      	b.n	1daa4 <spi_nrfx_transceive+0x1e8>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1db58:	f8da 3000 	ldr.w	r3, [sl]
   1db5c:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1db5e:	2b00      	cmp	r3, #0
   1db60:	d0b0      	beq.n	1dac4 <spi_nrfx_transceive+0x208>
   1db62:	f8da 3004 	ldr.w	r3, [sl, #4]
   1db66:	e7ad      	b.n	1dac4 <spi_nrfx_transceive+0x208>
	status = ctx->sync_status;
   1db68:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   1db6a:	e6d9      	b.n	1d920 <spi_nrfx_transceive+0x64>
   1db6c:	0002ddc1 	.word	0x0002ddc1
   1db70:	0002ace8 	.word	0x0002ace8
   1db74:	0002dddb 	.word	0x0002dddb
   1db78:	01000003 	.word	0x01000003
   1db7c:	0002ddfd 	.word	0x0002ddfd
   1db80:	0002de1c 	.word	0x0002de1c
   1db84:	0001e847 	.word	0x0001e847
   1db88:	0002de4b 	.word	0x0002de4b
   1db8c:	0003d08f 	.word	0x0003d08f
   1db90:	0007a11f 	.word	0x0007a11f
   1db94:	000f423f 	.word	0x000f423f
   1db98:	001e847f 	.word	0x001e847f
   1db9c:	003d08ff 	.word	0x003d08ff
   1dba0:	007a1200 	.word	0x007a1200
   1dba4:	0001d7f9 	.word	0x0001d7f9
   1dba8:	0bad0000 	.word	0x0bad0000
   1dbac:	0002de7c 	.word	0x0002de7c
   1dbb0:	0002dea3 	.word	0x0002dea3

0001dbb4 <flash_nor_get_parameters>:
flash_nor_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nor_parameters;
}
   1dbb4:	4800      	ldr	r0, [pc, #0]	; (1dbb8 <flash_nor_get_parameters+0x4>)
   1dbb6:	4770      	bx	lr
   1dbb8:	0002b7c4 	.word	0x0002b7c4

0001dbbc <spi_nor_erase>:
	return cfg->flash_size;
   1dbbc:	6843      	ldr	r3, [r0, #4]
{
   1dbbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((addr < 0) || ((size + addr) > flash_size)) {
   1dbc2:	1e0f      	subs	r7, r1, #0
	return cfg->flash_size;
   1dbc4:	f8d3 a010 	ldr.w	sl, [r3, #16]
{
   1dbc8:	4605      	mov	r5, r0
   1dbca:	4616      	mov	r6, r2
	if ((addr < 0) || ((size + addr) > flash_size)) {
   1dbcc:	db6d      	blt.n	1dcaa <spi_nor_erase+0xee>
   1dbce:	18bb      	adds	r3, r7, r2
   1dbd0:	4553      	cmp	r3, sl
   1dbd2:	d86a      	bhi.n	1dcaa <spi_nor_erase+0xee>
	if ((size % SPI_NOR_SECTOR_SIZE) != 0) {
   1dbd4:	ea47 0902 	orr.w	r9, r7, r2
   1dbd8:	f3c9 090b 	ubfx	r9, r9, #0, #12
   1dbdc:	f1b9 0f00 	cmp.w	r9, #0
   1dbe0:	d166      	bne.n	1dcb0 <spi_nor_erase+0xf4>
	acquire_device(dev);
   1dbe2:	6900      	ldr	r0, [r0, #16]
   1dbe4:	f00b fc22 	bl	2942c <acquire_device.isra.0>
	ret = spi_nor_write_protection_set(dev, false);
   1dbe8:	4649      	mov	r1, r9
   1dbea:	4628      	mov	r0, r5
   1dbec:	f00b fc6b 	bl	294c6 <spi_nor_write_protection_set>
				    && SPI_NOR_IS_ALIGNED(addr, etp->exp)
   1dbf0:	f04f 3bff 	mov.w	fp, #4294967295
	ret = spi_nor_write_protection_set(dev, false);
   1dbf4:	4604      	mov	r4, r0
	while ((size > 0) && (ret == 0)) {
   1dbf6:	2e00      	cmp	r6, #0
   1dbf8:	d13e      	bne.n	1dc78 <spi_nor_erase+0xbc>
	int ret2 = spi_nor_write_protection_set(dev, true);
   1dbfa:	2101      	movs	r1, #1
   1dbfc:	4628      	mov	r0, r5
   1dbfe:	f00b fc62 	bl	294c6 <spi_nor_write_protection_set>
		ret = ret2;
   1dc02:	2c00      	cmp	r4, #0
   1dc04:	bf08      	it	eq
   1dc06:	4604      	moveq	r4, r0
	release_device(dev);
   1dc08:	6928      	ldr	r0, [r5, #16]
   1dc0a:	f00b fc0d 	bl	29428 <release_device.isra.0>
}
   1dc0e:	4620      	mov	r0, r4
   1dc10:	b003      	add	sp, #12
   1dc12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc16:	4b28      	ldr	r3, [pc, #160]	; (1dcb8 <spi_nor_erase+0xfc>)
		if (size == flash_size) {
   1dc18:	4622      	mov	r2, r4
			const struct jesd216_erase_type *bet = NULL;
   1dc1a:	46a0      	mov	r8, r4
				    && SPI_NOR_IS_ALIGNED(size, etp->exp)
   1dc1c:	ea47 0006 	orr.w	r0, r7, r6
				if ((etp->exp != 0)
   1dc20:	7859      	ldrb	r1, [r3, #1]
   1dc22:	b161      	cbz	r1, 1dc3e <spi_nor_erase+0x82>
				    && SPI_NOR_IS_ALIGNED(addr, etp->exp)
   1dc24:	fa0b fc01 	lsl.w	ip, fp, r1
				    && SPI_NOR_IS_ALIGNED(size, etp->exp)
   1dc28:	ea30 0c0c 	bics.w	ip, r0, ip
   1dc2c:	d107      	bne.n	1dc3e <spi_nor_erase+0x82>
				    && ((bet == NULL)
   1dc2e:	f1b8 0f00 	cmp.w	r8, #0
   1dc32:	d01c      	beq.n	1dc6e <spi_nor_erase+0xb2>
					|| (etp->exp > bet->exp))) {
   1dc34:	f898 c001 	ldrb.w	ip, [r8, #1]
   1dc38:	458c      	cmp	ip, r1
   1dc3a:	bf38      	it	cc
   1dc3c:	4698      	movcc	r8, r3
			for (uint8_t ei = 0; ei < JESD216_NUM_ERASE_TYPES; ++ei) {
   1dc3e:	3201      	adds	r2, #1
   1dc40:	2a04      	cmp	r2, #4
   1dc42:	f103 0302 	add.w	r3, r3, #2
   1dc46:	d1eb      	bne.n	1dc20 <spi_nor_erase+0x64>
			if (bet != NULL) {
   1dc48:	f1b8 0f00 	cmp.w	r8, #0
   1dc4c:	d011      	beq.n	1dc72 <spi_nor_erase+0xb6>
				spi_nor_cmd_addr_write(dev, bet->cmd, addr, NULL, 0);
   1dc4e:	463b      	mov	r3, r7
   1dc50:	f898 1000 	ldrb.w	r1, [r8]
   1dc54:	2281      	movs	r2, #129	; 0x81
   1dc56:	e9cd 9900 	strd	r9, r9, [sp]
   1dc5a:	4628      	mov	r0, r5
   1dc5c:	f00b fbec 	bl	29438 <spi_nor_access>
				addr += BIT(bet->exp);
   1dc60:	f898 2001 	ldrb.w	r2, [r8, #1]
   1dc64:	2301      	movs	r3, #1
   1dc66:	4093      	lsls	r3, r2
   1dc68:	441f      	add	r7, r3
				size -= BIT(bet->exp);
   1dc6a:	1af6      	subs	r6, r6, r3
   1dc6c:	e019      	b.n	1dca2 <spi_nor_erase+0xe6>
   1dc6e:	4698      	mov	r8, r3
   1dc70:	e7e5      	b.n	1dc3e <spi_nor_erase+0x82>
				ret = -EINVAL;
   1dc72:	f06f 0415 	mvn.w	r4, #21
   1dc76:	e014      	b.n	1dca2 <spi_nor_erase+0xe6>
	while ((size > 0) && (ret == 0)) {
   1dc78:	2c00      	cmp	r4, #0
   1dc7a:	d1be      	bne.n	1dbfa <spi_nor_erase+0x3e>
		spi_nor_cmd_write(dev, SPI_NOR_CMD_WREN);
   1dc7c:	e9cd 4400 	strd	r4, r4, [sp]
   1dc80:	4623      	mov	r3, r4
   1dc82:	2280      	movs	r2, #128	; 0x80
   1dc84:	2106      	movs	r1, #6
   1dc86:	4628      	mov	r0, r5
   1dc88:	f00b fbd6 	bl	29438 <spi_nor_access>
		if (size == flash_size) {
   1dc8c:	45b2      	cmp	sl, r6
   1dc8e:	d1c2      	bne.n	1dc16 <spi_nor_erase+0x5a>
			spi_nor_cmd_write(dev, SPI_NOR_CMD_CE);
   1dc90:	e9cd 4400 	strd	r4, r4, [sp]
   1dc94:	4623      	mov	r3, r4
   1dc96:	2280      	movs	r2, #128	; 0x80
   1dc98:	21c7      	movs	r1, #199	; 0xc7
   1dc9a:	4628      	mov	r0, r5
   1dc9c:	f00b fbcc 	bl	29438 <spi_nor_access>
			size -= flash_size;
   1dca0:	4626      	mov	r6, r4
		spi_nor_wait_until_ready(dev);
   1dca2:	4628      	mov	r0, r5
   1dca4:	f00b fc3f 	bl	29526 <spi_nor_wait_until_ready.isra.0>
   1dca8:	e7a5      	b.n	1dbf6 <spi_nor_erase+0x3a>
		return -ENODEV;
   1dcaa:	f06f 0412 	mvn.w	r4, #18
   1dcae:	e7ae      	b.n	1dc0e <spi_nor_erase+0x52>
		return -EINVAL;
   1dcb0:	f06f 0415 	mvn.w	r4, #21
   1dcb4:	e7ab      	b.n	1dc0e <spi_nor_erase+0x52>
   1dcb6:	bf00      	nop
   1dcb8:	0002df85 	.word	0x0002df85

0001dcbc <spi_nor_init>:
{
   1dcbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dcc0:	b085      	sub	sp, #20
   1dcc2:	4606      	mov	r6, r0
   1dcc4:	af02      	add	r7, sp, #8
		k_sem_init(&driver_data->sem, 1, K_SEM_MAX_LIMIT);
   1dcc6:	6900      	ldr	r0, [r0, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1dcc8:	f04f 32ff 	mov.w	r2, #4294967295
   1dccc:	2101      	movs	r1, #1
   1dcce:	f00c f950 	bl	29f72 <z_impl_k_sem_init>
	const struct spi_nor_config *cfg = dev->config;
   1dcd2:	f8d6 9004 	ldr.w	r9, [r6, #4]
	if (!device_is_ready(spec->bus)) {
   1dcd6:	f8d9 0000 	ldr.w	r0, [r9]
   1dcda:	f00b ffa2 	bl	29c22 <z_device_is_ready>
   1dcde:	b910      	cbnz	r0, 1dce6 <spi_nor_init+0x2a>
			return -ENODEV;
   1dce0:	f06f 0812 	mvn.w	r8, #18
	return spi_nor_configure(dev);
   1dce4:	e057      	b.n	1dd96 <spi_nor_init+0xda>
	if (spec->config.cs &&
   1dce6:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1dcea:	bb1b      	cbnz	r3, 1dd34 <spi_nor_init+0x78>
	acquire_device(dev);
   1dcec:	6930      	ldr	r0, [r6, #16]
   1dcee:	f00b fb9d 	bl	2942c <acquire_device.isra.0>
	int ret = spi_nor_cmd_read(dev, SPI_NOR_CMD_RDID, id, SPI_NOR_MAX_ID_LEN);
   1dcf2:	2503      	movs	r5, #3
   1dcf4:	2300      	movs	r3, #0
   1dcf6:	f107 0804 	add.w	r8, r7, #4
   1dcfa:	9501      	str	r5, [sp, #4]
   1dcfc:	f8cd 8000 	str.w	r8, [sp]
   1dd00:	461a      	mov	r2, r3
   1dd02:	219f      	movs	r1, #159	; 0x9f
   1dd04:	4630      	mov	r0, r6
   1dd06:	f00b fb97 	bl	29438 <spi_nor_access>
   1dd0a:	4604      	mov	r4, r0
	release_device(dev);
   1dd0c:	6930      	ldr	r0, [r6, #16]
   1dd0e:	f00b fb8b 	bl	29428 <release_device.isra.0>
	if (rc != 0) {
   1dd12:	b1ac      	cbz	r4, 1dd40 <spi_nor_init+0x84>
		LOG_ERR("JEDEC ID read failed: %d", rc);
   1dd14:	466e      	mov	r6, sp
   1dd16:	b088      	sub	sp, #32
   1dd18:	aa02      	add	r2, sp, #8
   1dd1a:	4b60      	ldr	r3, [pc, #384]	; (1de9c <spi_nor_init+0x1e0>)
   1dd1c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1dd20:	f842 5f10 	str.w	r5, [r2, #16]!
   1dd24:	485e      	ldr	r0, [pc, #376]	; (1dea0 <spi_nor_init+0x1e4>)
   1dd26:	2300      	movs	r3, #0
   1dd28:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1dd2c:	f7f5 fa94 	bl	13258 <z_impl_z_log_msg_static_create>
   1dd30:	46b5      	mov	sp, r6
		return -ENODEV;
   1dd32:	e7d5      	b.n	1dce0 <spi_nor_init+0x24>
	    !device_is_ready(spec->config.cs->gpio.port)) {
   1dd34:	6818      	ldr	r0, [r3, #0]
   1dd36:	f00b ff74 	bl	29c22 <z_device_is_ready>
	if (spec->config.cs &&
   1dd3a:	2800      	cmp	r0, #0
   1dd3c:	d1d6      	bne.n	1dcec <spi_nor_init+0x30>
   1dd3e:	e7cf      	b.n	1dce0 <spi_nor_init+0x24>
	if (memcmp(jedec_id, cfg->jedec_id, sizeof(jedec_id)) != 0) {
   1dd40:	4640      	mov	r0, r8
   1dd42:	462a      	mov	r2, r5
   1dd44:	f109 011c 	add.w	r1, r9, #28
   1dd48:	f008 ffbd 	bl	26cc6 <memcmp>
   1dd4c:	4680      	mov	r8, r0
   1dd4e:	b338      	cbz	r0, 1dda0 <spi_nor_init+0xe4>
		LOG_ERR("Device id %02x %02x %02x does not match config %02x %02x %02x",
   1dd50:	466d      	mov	r5, sp
   1dd52:	b08c      	sub	sp, #48	; 0x30
   1dd54:	f897 e004 	ldrb.w	lr, [r7, #4]
   1dd58:	f897 c005 	ldrb.w	ip, [r7, #5]
   1dd5c:	79be      	ldrb	r6, [r7, #6]
   1dd5e:	f899 001c 	ldrb.w	r0, [r9, #28]
   1dd62:	f899 101d 	ldrb.w	r1, [r9, #29]
   1dd66:	f899 301e 	ldrb.w	r3, [r9, #30]
   1dd6a:	aa02      	add	r2, sp, #8
   1dd6c:	f8df 8134 	ldr.w	r8, [pc, #308]	; 1dea4 <spi_nor_init+0x1e8>
   1dd70:	62d3      	str	r3, [r2, #44]	; 0x2c
   1dd72:	2308      	movs	r3, #8
   1dd74:	e9c2 8e05 	strd	r8, lr, [r2, #20]
   1dd78:	e9c2 c607 	strd	ip, r6, [r2, #28]
   1dd7c:	e9c2 0109 	strd	r0, r1, [r2, #36]	; 0x24
   1dd80:	f842 3f10 	str.w	r3, [r2, #16]!
   1dd84:	4846      	ldr	r0, [pc, #280]	; (1dea0 <spi_nor_init+0x1e4>)
   1dd86:	4623      	mov	r3, r4
   1dd88:	f244 0140 	movw	r1, #16448	; 0x4040
   1dd8c:	f7f5 fa64 	bl	13258 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1dd90:	f06f 0815 	mvn.w	r8, #21
   1dd94:	46ad      	mov	sp, r5
}
   1dd96:	4640      	mov	r0, r8
   1dd98:	370c      	adds	r7, #12
   1dd9a:	46bd      	mov	sp, r7
   1dd9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->has_lock != 0) {
   1dda0:	f899 3020 	ldrb.w	r3, [r9, #32]
   1dda4:	2b00      	cmp	r3, #0
   1dda6:	d040      	beq.n	1de2a <spi_nor_init+0x16e>
		acquire_device(dev);
   1dda8:	6930      	ldr	r0, [r6, #16]
   1ddaa:	f00b fb3f 	bl	2942c <acquire_device.isra.0>
	int ret = spi_nor_cmd_read(dev, SPI_NOR_CMD_RDSR, &reg, sizeof(reg));
   1ddae:	1cfd      	adds	r5, r7, #3
   1ddb0:	2301      	movs	r3, #1
   1ddb2:	9301      	str	r3, [sp, #4]
   1ddb4:	9500      	str	r5, [sp, #0]
   1ddb6:	4643      	mov	r3, r8
   1ddb8:	4642      	mov	r2, r8
   1ddba:	2105      	movs	r1, #5
   1ddbc:	4630      	mov	r0, r6
   1ddbe:	f00b fb3b 	bl	29438 <spi_nor_access>
	if (ret == 0) {
   1ddc2:	1e04      	subs	r4, r0, #0
   1ddc4:	d167      	bne.n	1de96 <spi_nor_init+0x1da>
		ret = reg;
   1ddc6:	78fc      	ldrb	r4, [r7, #3]
		if (rc > 0) {
   1ddc8:	b364      	cbz	r4, 1de24 <spi_nor_init+0x168>
			rc = spi_nor_wrsr(dev, rc & ~cfg->has_lock);
   1ddca:	f899 3020 	ldrb.w	r3, [r9, #32]
   1ddce:	ea24 0403 	bic.w	r4, r4, r3
	int ret = spi_nor_cmd_write(dev, SPI_NOR_CMD_WREN);
   1ddd2:	2300      	movs	r3, #0
   1ddd4:	70fc      	strb	r4, [r7, #3]
   1ddd6:	2280      	movs	r2, #128	; 0x80
   1ddd8:	e9cd 3300 	strd	r3, r3, [sp]
   1dddc:	2106      	movs	r1, #6
   1ddde:	4630      	mov	r0, r6
   1dde0:	f00b fb2a 	bl	29438 <spi_nor_access>
	if (ret == 0) {
   1dde4:	4604      	mov	r4, r0
   1dde6:	b960      	cbnz	r0, 1de02 <spi_nor_init+0x146>
		ret = spi_nor_access(dev, SPI_NOR_CMD_WRSR, NOR_ACCESS_WRITE, 0, &sr,
   1dde8:	2101      	movs	r1, #1
   1ddea:	4603      	mov	r3, r0
   1ddec:	e9cd 5100 	strd	r5, r1, [sp]
   1ddf0:	2280      	movs	r2, #128	; 0x80
   1ddf2:	4630      	mov	r0, r6
   1ddf4:	f00b fb20 	bl	29438 <spi_nor_access>
   1ddf8:	4604      	mov	r4, r0
		spi_nor_wait_until_ready(dev);
   1ddfa:	4630      	mov	r0, r6
   1ddfc:	f00b fb93 	bl	29526 <spi_nor_wait_until_ready.isra.0>
		if (rc != 0) {
   1de00:	b184      	cbz	r4, 1de24 <spi_nor_init+0x168>
			LOG_ERR("BP clear failed: %d\n", rc);
   1de02:	466d      	mov	r5, sp
   1de04:	b088      	sub	sp, #32
   1de06:	aa02      	add	r2, sp, #8
   1de08:	4b27      	ldr	r3, [pc, #156]	; (1dea8 <spi_nor_init+0x1ec>)
			LOG_ERR("Unable to enter 4-byte mode: %d\n", rc);
   1de0a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1de0e:	2303      	movs	r3, #3
   1de10:	f842 3f10 	str.w	r3, [r2, #16]!
   1de14:	4822      	ldr	r0, [pc, #136]	; (1dea0 <spi_nor_init+0x1e4>)
   1de16:	2300      	movs	r3, #0
   1de18:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1de1c:	f7f5 fa1c 	bl	13258 <z_impl_z_log_msg_static_create>
   1de20:	46ad      	mov	sp, r5
   1de22:	e75d      	b.n	1dce0 <spi_nor_init+0x24>
		release_device(dev);
   1de24:	6930      	ldr	r0, [r6, #16]
   1de26:	f00b faff 	bl	29428 <release_device.isra.0>
	if (cfg->enter_4byte_addr != 0) {
   1de2a:	f899 401f 	ldrb.w	r4, [r9, #31]
   1de2e:	1e63      	subs	r3, r4, #1
   1de30:	b2db      	uxtb	r3, r3
   1de32:	2bfd      	cmp	r3, #253	; 0xfd
   1de34:	d8af      	bhi.n	1dd96 <spi_nor_init+0xda>
	if ((enter_4byte_addr & 0x03) == 0) {
   1de36:	07a2      	lsls	r2, r4, #30
   1de38:	d02a      	beq.n	1de90 <spi_nor_init+0x1d4>
	acquire_device(dev);
   1de3a:	6930      	ldr	r0, [r6, #16]
   1de3c:	f00b faf6 	bl	2942c <acquire_device.isra.0>
	if ((enter_4byte_addr & 0x02) != 0) {
   1de40:	07a3      	lsls	r3, r4, #30
   1de42:	d413      	bmi.n	1de6c <spi_nor_init+0x1b0>
		ret = spi_nor_cmd_write(dev, SPI_NOR_CMD_4BA);
   1de44:	2300      	movs	r3, #0
   1de46:	e9cd 3300 	strd	r3, r3, [sp]
   1de4a:	2280      	movs	r2, #128	; 0x80
   1de4c:	21b7      	movs	r1, #183	; 0xb7
   1de4e:	4630      	mov	r0, r6
   1de50:	f00b faf2 	bl	29438 <spi_nor_access>
	if (ret == 0) {
   1de54:	4604      	mov	r4, r0
   1de56:	b1a8      	cbz	r0, 1de84 <spi_nor_init+0x1c8>
	release_device(dev);
   1de58:	6930      	ldr	r0, [r6, #16]
   1de5a:	f00b fae5 	bl	29428 <release_device.isra.0>
		if (rc != 0) {
   1de5e:	2c00      	cmp	r4, #0
   1de60:	d099      	beq.n	1dd96 <spi_nor_init+0xda>
			LOG_ERR("Unable to enter 4-byte mode: %d\n", rc);
   1de62:	466d      	mov	r5, sp
   1de64:	b088      	sub	sp, #32
   1de66:	aa02      	add	r2, sp, #8
   1de68:	4b10      	ldr	r3, [pc, #64]	; (1deac <spi_nor_init+0x1f0>)
   1de6a:	e7ce      	b.n	1de0a <spi_nor_init+0x14e>
		ret = spi_nor_cmd_write(dev, SPI_NOR_CMD_WREN);
   1de6c:	2300      	movs	r3, #0
   1de6e:	e9cd 3300 	strd	r3, r3, [sp]
   1de72:	2280      	movs	r2, #128	; 0x80
   1de74:	2106      	movs	r1, #6
   1de76:	4630      	mov	r0, r6
   1de78:	f00b fade 	bl	29438 <spi_nor_access>
	if (ret == 0) {
   1de7c:	4604      	mov	r4, r0
   1de7e:	2800      	cmp	r0, #0
   1de80:	d0e0      	beq.n	1de44 <spi_nor_init+0x188>
   1de82:	e7e9      	b.n	1de58 <spi_nor_init+0x19c>
		data->flag_access_32bit = true;
   1de84:	6932      	ldr	r2, [r6, #16]
   1de86:	7f13      	ldrb	r3, [r2, #28]
   1de88:	f043 0301 	orr.w	r3, r3, #1
   1de8c:	7713      	strb	r3, [r2, #28]
   1de8e:	e7e3      	b.n	1de58 <spi_nor_init+0x19c>
		return -ENOTSUP;
   1de90:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1de94:	e7e5      	b.n	1de62 <spi_nor_init+0x1a6>
		if (rc > 0) {
   1de96:	dc98      	bgt.n	1ddca <spi_nor_init+0x10e>
   1de98:	e7b3      	b.n	1de02 <spi_nor_init+0x146>
   1de9a:	bf00      	nop
   1de9c:	0002dee3 	.word	0x0002dee3
   1dea0:	0002ace0 	.word	0x0002ace0
   1dea4:	0002defc 	.word	0x0002defc
   1dea8:	0002df3a 	.word	0x0002df3a
   1deac:	0002df4f 	.word	0x0002df4f

0001deb0 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1deb0:	4b02      	ldr	r3, [pc, #8]	; (1debc <flash_nrf_pages_layout+0xc>)
   1deb2:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1deb4:	2301      	movs	r3, #1
   1deb6:	6013      	str	r3, [r2, #0]
}
   1deb8:	4770      	bx	lr
   1deba:	bf00      	nop
   1debc:	20002d88 	.word	0x20002d88

0001dec0 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1dec0:	4800      	ldr	r0, [pc, #0]	; (1dec4 <flash_nrf_get_parameters+0x4>)
   1dec2:	4770      	bx	lr
   1dec4:	0002b818 	.word	0x0002b818

0001dec8 <flash_nrf_read.part.0>:
static int flash_nrf_read(const struct device *dev, off_t addr,
   1dec8:	b580      	push	{r7, lr}
   1deca:	af00      	add	r7, sp, #0
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1decc:	b088      	sub	sp, #32
   1dece:	466a      	mov	r2, sp
   1ded0:	4b08      	ldr	r3, [pc, #32]	; (1def4 <flash_nrf_read.part.0+0x2c>)
   1ded2:	61d1      	str	r1, [r2, #28]
   1ded4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ded8:	2304      	movs	r3, #4
   1deda:	f842 3f10 	str.w	r3, [r2, #16]!
   1dede:	4806      	ldr	r0, [pc, #24]	; (1def8 <flash_nrf_read.part.0+0x30>)
   1dee0:	2300      	movs	r3, #0
   1dee2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1dee6:	f7f5 f9b7 	bl	13258 <z_impl_z_log_msg_static_create>
}
   1deea:	f06f 0015 	mvn.w	r0, #21
   1deee:	46bd      	mov	sp, r7
   1def0:	bd80      	pop	{r7, pc}
   1def2:	bf00      	nop
   1def4:	0002df8d 	.word	0x0002df8d
   1def8:	0002ac58 	.word	0x0002ac58

0001defc <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1defc:	b510      	push	{r4, lr}
   1defe:	2201      	movs	r2, #1
   1df00:	4611      	mov	r1, r2
   1df02:	4807      	ldr	r0, [pc, #28]	; (1df20 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1df04:	4c07      	ldr	r4, [pc, #28]	; (1df24 <nrf_flash_init+0x28>)
   1df06:	f00c f834 	bl	29f72 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1df0a:	f001 fe6b 	bl	1fbe4 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1df0e:	f00b fdd3 	bl	29ab8 <nrfx_nvmc_flash_page_count_get>
   1df12:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1df14:	f00b fdcc 	bl	29ab0 <nrfx_nvmc_flash_page_size_get>
   1df18:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1df1a:	2000      	movs	r0, #0
   1df1c:	bd10      	pop	{r4, pc}
   1df1e:	bf00      	nop
   1df20:	20002d90 	.word	0x20002d90
   1df24:	20002d88 	.word	0x20002d88

0001df28 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   1df28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1df2c:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   1df30:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   1df34:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1df38:	f023 031f 	bic.w	r3, r3, #31
   1df3c:	430b      	orrs	r3, r1
    pofcon |=
   1df3e:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   1df42:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   1df46:	4b02      	ldr	r3, [pc, #8]	; (1df50 <restore_pofwarn.part.0+0x28>)
   1df48:	2200      	movs	r2, #0
   1df4a:	701a      	strb	r2, [r3, #0]
	}
}
   1df4c:	4770      	bx	lr
   1df4e:	bf00      	nop
   1df50:	20003bae 	.word	0x20003bae

0001df54 <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1df54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1df58:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1df5c:	2b08      	cmp	r3, #8
   1df5e:	d122      	bne.n	1dfa6 <suspend_pofwarn+0x52>
    uint32_t pofcon = p_reg->POFCON;
   1df60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1df64:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   1df68:	f011 0001 	ands.w	r0, r1, #1
   1df6c:	d01c      	beq.n	1dfa8 <suspend_pofwarn+0x54>
    uint32_t pofcon = p_reg->POFCON;
   1df6e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   1df72:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1df76:	f020 001f 	bic.w	r0, r0, #31
    pofcon |=
   1df7a:	4308      	orrs	r0, r1
    p_reg->POFCON = pofcon;
   1df7c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1df80:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   1df84:	b158      	cbz	r0, 1df9e <suspend_pofwarn+0x4a>
    uint32_t pofcon = p_reg->POFCON;
   1df86:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1df8a:	f023 031f 	bic.w	r3, r3, #31
   1df8e:	430b      	orrs	r3, r1
    pofcon |=
   1df90:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   1df94:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   1df98:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1df9c:	4770      	bx	lr
		pofcon_enabled = enabled;
   1df9e:	4b03      	ldr	r3, [pc, #12]	; (1dfac <suspend_pofwarn+0x58>)
   1dfa0:	2201      	movs	r2, #1
   1dfa2:	701a      	strb	r2, [r3, #0]
   1dfa4:	4770      	bx	lr
		return 0;
   1dfa6:	2000      	movs	r0, #0
}
   1dfa8:	4770      	bx	lr
   1dfaa:	bf00      	nop
   1dfac:	20003bae 	.word	0x20003bae

0001dfb0 <erase_op>:
{
   1dfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dfb2:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1dfb4:	f00b fd7c 	bl	29ab0 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   1dfb8:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1dfba:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   1dfbc:	b10b      	cbz	r3, 1dfc2 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   1dfbe:	f00b fcf3 	bl	299a8 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   1dfc2:	4f13      	ldr	r7, [pc, #76]	; (1e010 <erase_op+0x60>)
{
   1dfc4:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   1dfc6:	f7ff ffc5 	bl	1df54 <suspend_pofwarn>
   1dfca:	b9e8      	cbnz	r0, 1e008 <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1dfcc:	6860      	ldr	r0, [r4, #4]
   1dfce:	f002 fb97 	bl	20700 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   1dfd2:	68a3      	ldr	r3, [r4, #8]
   1dfd4:	1b5b      	subs	r3, r3, r5
   1dfd6:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   1dfd8:	6863      	ldr	r3, [r4, #4]
   1dfda:	442b      	add	r3, r5
   1dfdc:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   1dfde:	783b      	ldrb	r3, [r7, #0]
   1dfe0:	b10b      	cbz	r3, 1dfe6 <erase_op+0x36>
   1dfe2:	f7ff ffa1 	bl	1df28 <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   1dfe6:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1dfe8:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   1dfea:	b93b      	cbnz	r3, 1dffc <erase_op+0x4c>
	} while (e_ctx->len > 0);
   1dfec:	68a3      	ldr	r3, [r4, #8]
   1dfee:	2b00      	cmp	r3, #0
   1dff0:	d1e9      	bne.n	1dfc6 <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   1dff2:	68a0      	ldr	r0, [r4, #8]
   1dff4:	3800      	subs	r0, #0
   1dff6:	bf18      	it	ne
   1dff8:	2001      	movne	r0, #1
}
   1dffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   1dffc:	4630      	mov	r0, r6
   1dffe:	f001 fe95 	bl	1fd2c <nrf_flash_sync_check_time_limit>
   1e002:	2800      	cmp	r0, #0
   1e004:	d0f2      	beq.n	1dfec <erase_op+0x3c>
   1e006:	e7f4      	b.n	1dff2 <erase_op+0x42>
			return -ECANCELED;
   1e008:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1e00c:	e7f5      	b.n	1dffa <erase_op+0x4a>
   1e00e:	bf00      	nop
   1e010:	20003bae 	.word	0x20003bae

0001e014 <write_op>:
{
   1e014:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   1e016:	7b03      	ldrb	r3, [r0, #12]
{
   1e018:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1e01a:	b10b      	cbz	r3, 1e020 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1e01c:	f00b fcc4 	bl	299a8 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   1e020:	4e19      	ldr	r6, [pc, #100]	; (1e088 <write_op+0x74>)
{
   1e022:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1e024:	68a3      	ldr	r3, [r4, #8]
   1e026:	2b03      	cmp	r3, #3
   1e028:	d806      	bhi.n	1e038 <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1e02a:	4a18      	ldr	r2, [pc, #96]	; (1e08c <write_op+0x78>)
   1e02c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1e030:	07db      	lsls	r3, r3, #31
   1e032:	d5fb      	bpl.n	1e02c <write_op+0x18>
	return FLASH_OP_DONE;
   1e034:	2000      	movs	r0, #0
}
   1e036:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   1e038:	f7ff ff8c 	bl	1df54 <suspend_pofwarn>
   1e03c:	bb08      	cbnz	r0, 1e082 <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1e03e:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1e040:	6860      	ldr	r0, [r4, #4]
   1e042:	6819      	ldr	r1, [r3, #0]
   1e044:	f002 fb7c 	bl	20740 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   1e048:	7833      	ldrb	r3, [r6, #0]
   1e04a:	b10b      	cbz	r3, 1e050 <write_op+0x3c>
   1e04c:	f7ff ff6c 	bl	1df28 <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   1e050:	6863      	ldr	r3, [r4, #4]
   1e052:	3304      	adds	r3, #4
   1e054:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1e056:	6823      	ldr	r3, [r4, #0]
   1e058:	3304      	adds	r3, #4
   1e05a:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1e05c:	68a3      	ldr	r3, [r4, #8]
   1e05e:	3b04      	subs	r3, #4
   1e060:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1e062:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1e064:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1e066:	2b00      	cmp	r3, #0
   1e068:	d0dc      	beq.n	1e024 <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   1e06a:	4628      	mov	r0, r5
   1e06c:	f001 fe5e 	bl	1fd2c <nrf_flash_sync_check_time_limit>
   1e070:	2800      	cmp	r0, #0
   1e072:	d0d7      	beq.n	1e024 <write_op+0x10>
   1e074:	4a05      	ldr	r2, [pc, #20]	; (1e08c <write_op+0x78>)
   1e076:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1e07a:	07d9      	lsls	r1, r3, #31
   1e07c:	d5fb      	bpl.n	1e076 <write_op+0x62>
				return FLASH_OP_ONGOING;
   1e07e:	2001      	movs	r0, #1
   1e080:	e7d9      	b.n	1e036 <write_op+0x22>
			return -ECANCELED;
   1e082:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1e086:	e7d6      	b.n	1e036 <write_op+0x22>
   1e088:	20003bae 	.word	0x20003bae
   1e08c:	4001e000 	.word	0x4001e000

0001e090 <flash_nrf_erase>:
{
   1e090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e094:	b086      	sub	sp, #24
   1e096:	af00      	add	r7, sp, #0
   1e098:	460e      	mov	r6, r1
   1e09a:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e09c:	f00b fd08 	bl	29ab0 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1e0a0:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e0a2:	4680      	mov	r8, r0
	if (is_regular_addr_valid(addr, size)) {
   1e0a4:	4630      	mov	r0, r6
   1e0a6:	f00b fab2 	bl	2960e <is_regular_addr_valid>
   1e0aa:	4603      	mov	r3, r0
   1e0ac:	b3c8      	cbz	r0, 1e122 <flash_nrf_erase+0x92>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1e0ae:	fbb6 f3f8 	udiv	r3, r6, r8
   1e0b2:	fb08 6313 	mls	r3, r8, r3, r6
   1e0b6:	b923      	cbnz	r3, 1e0c2 <flash_nrf_erase+0x32>
   1e0b8:	fbb5 f4f8 	udiv	r4, r5, r8
   1e0bc:	fb08 5414 	mls	r4, r8, r4, r5
   1e0c0:	b1bc      	cbz	r4, 1e0f2 <flash_nrf_erase+0x62>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1e0c2:	466c      	mov	r4, sp
   1e0c4:	b088      	sub	sp, #32
   1e0c6:	466a      	mov	r2, sp
   1e0c8:	4b27      	ldr	r3, [pc, #156]	; (1e168 <flash_nrf_erase+0xd8>)
   1e0ca:	61d5      	str	r5, [r2, #28]
   1e0cc:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1e0d0:	2304      	movs	r3, #4
   1e0d2:	f842 3f10 	str.w	r3, [r2, #16]!
   1e0d6:	2300      	movs	r3, #0
   1e0d8:	4824      	ldr	r0, [pc, #144]	; (1e16c <flash_nrf_erase+0xdc>)
   1e0da:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e0de:	f7f5 f8bb 	bl	13258 <z_impl_z_log_msg_static_create>
   1e0e2:	46a5      	mov	sp, r4
		return -EINVAL;
   1e0e4:	f06f 0415 	mvn.w	r4, #21
}
   1e0e8:	4620      	mov	r0, r4
   1e0ea:	3718      	adds	r7, #24
   1e0ec:	46bd      	mov	sp, r7
   1e0ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!n_pages) {
   1e0f2:	4545      	cmp	r5, r8
   1e0f4:	d3f8      	bcc.n	1e0e8 <flash_nrf_erase+0x58>
	return z_impl_k_sem_take(sem, timeout);
   1e0f6:	f04f 33ff 	mov.w	r3, #4294967295
   1e0fa:	f04f 32ff 	mov.w	r2, #4294967295
   1e0fe:	481c      	ldr	r0, [pc, #112]	; (1e170 <flash_nrf_erase+0xe0>)
   1e100:	f003 f932 	bl	21368 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e104:	f00b fc4e 	bl	299a4 <nrf_flash_sync_is_required>
   1e108:	f107 0308 	add.w	r3, r7, #8
   1e10c:	4601      	mov	r1, r0
   1e10e:	b998      	cbnz	r0, 1e138 <flash_nrf_erase+0xa8>
	struct flash_context context = {
   1e110:	2210      	movs	r2, #16
   1e112:	4618      	mov	r0, r3
   1e114:	f008 fe0b 	bl	26d2e <memset>
   1e118:	e9c7 6503 	strd	r6, r5, [r7, #12]
	return	erase_op(&context);
   1e11c:	f7ff ff48 	bl	1dfb0 <erase_op>
   1e120:	e01c      	b.n	1e15c <flash_nrf_erase+0xcc>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e122:	466c      	mov	r4, sp
   1e124:	b088      	sub	sp, #32
   1e126:	466a      	mov	r2, sp
   1e128:	4912      	ldr	r1, [pc, #72]	; (1e174 <flash_nrf_erase+0xe4>)
   1e12a:	61d5      	str	r5, [r2, #28]
   1e12c:	e9c2 1605 	strd	r1, r6, [r2, #20]
   1e130:	2104      	movs	r1, #4
   1e132:	f842 1f10 	str.w	r1, [r2, #16]!
	compiler_barrier();
   1e136:	e7cf      	b.n	1e0d8 <flash_nrf_erase+0x48>
	struct flash_context context = {
   1e138:	2210      	movs	r2, #16
   1e13a:	4621      	mov	r1, r4
   1e13c:	4618      	mov	r0, r3
   1e13e:	f008 fdf6 	bl	26d2e <memset>
   1e142:	2201      	movs	r2, #1
   1e144:	753a      	strb	r2, [r7, #20]
	struct flash_op_desc flash_op_desc = {
   1e146:	4a0c      	ldr	r2, [pc, #48]	; (1e178 <flash_nrf_erase+0xe8>)
   1e148:	e9c7 2000 	strd	r2, r0, [r7]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e14c:	480b      	ldr	r0, [pc, #44]	; (1e17c <flash_nrf_erase+0xec>)
	struct flash_context context = {
   1e14e:	e9c7 6503 	strd	r6, r5, [r7, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e152:	f001 fd4f 	bl	1fbf4 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1e156:	4638      	mov	r0, r7
   1e158:	f001 fd52 	bl	1fc00 <nrf_flash_sync_exe>
	return	erase_op(&context);
   1e15c:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e15e:	4804      	ldr	r0, [pc, #16]	; (1e170 <flash_nrf_erase+0xe0>)
   1e160:	f003 f8dc 	bl	2131c <z_impl_k_sem_give>
}
   1e164:	e7c0      	b.n	1e0e8 <flash_nrf_erase+0x58>
   1e166:	bf00      	nop
   1e168:	0002dfaa 	.word	0x0002dfaa
   1e16c:	0002ac58 	.word	0x0002ac58
   1e170:	20002d90 	.word	0x20002d90
   1e174:	0002df8d 	.word	0x0002df8d
   1e178:	0001dfb1 	.word	0x0001dfb1
   1e17c:	00015e64 	.word	0x00015e64

0001e180 <flash_nrf_write>:
{
   1e180:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e182:	460d      	mov	r5, r1
   1e184:	b087      	sub	sp, #28
	if (is_regular_addr_valid(addr, len)) {
   1e186:	4619      	mov	r1, r3
{
   1e188:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   1e18a:	4628      	mov	r0, r5
{
   1e18c:	461c      	mov	r4, r3
   1e18e:	4616      	mov	r6, r2
	if (is_regular_addr_valid(addr, len)) {
   1e190:	f00b fa3d 	bl	2960e <is_regular_addr_valid>
   1e194:	4603      	mov	r3, r0
   1e196:	b9a8      	cbnz	r0, 1e1c4 <flash_nrf_write+0x44>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e198:	466e      	mov	r6, sp
   1e19a:	b088      	sub	sp, #32
   1e19c:	466a      	mov	r2, sp
   1e19e:	4925      	ldr	r1, [pc, #148]	; (1e234 <flash_nrf_write+0xb4>)
   1e1a0:	61d4      	str	r4, [r2, #28]
   1e1a2:	e9c2 1505 	strd	r1, r5, [r2, #20]
   1e1a6:	2104      	movs	r1, #4
   1e1a8:	f842 1f10 	str.w	r1, [r2, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
   1e1ac:	4822      	ldr	r0, [pc, #136]	; (1e238 <flash_nrf_write+0xb8>)
   1e1ae:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e1b2:	f7f5 f851 	bl	13258 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1e1b6:	f06f 0415 	mvn.w	r4, #21
   1e1ba:	46b5      	mov	sp, r6
}
   1e1bc:	4620      	mov	r0, r4
   1e1be:	371c      	adds	r7, #28
   1e1c0:	46bd      	mov	sp, r7
   1e1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1e1c4:	ea44 0305 	orr.w	r3, r4, r5
   1e1c8:	079b      	lsls	r3, r3, #30
   1e1ca:	d00b      	beq.n	1e1e4 <flash_nrf_write+0x64>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1e1cc:	466e      	mov	r6, sp
   1e1ce:	b088      	sub	sp, #32
   1e1d0:	466a      	mov	r2, sp
   1e1d2:	4b1a      	ldr	r3, [pc, #104]	; (1e23c <flash_nrf_write+0xbc>)
   1e1d4:	61d4      	str	r4, [r2, #28]
   1e1d6:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1e1da:	2304      	movs	r3, #4
   1e1dc:	f842 3f10 	str.w	r3, [r2, #16]!
   1e1e0:	2300      	movs	r3, #0
   1e1e2:	e7e3      	b.n	1e1ac <flash_nrf_write+0x2c>
	if (!len) {
   1e1e4:	2c00      	cmp	r4, #0
   1e1e6:	d0e9      	beq.n	1e1bc <flash_nrf_write+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   1e1e8:	f04f 33ff 	mov.w	r3, #4294967295
   1e1ec:	f04f 32ff 	mov.w	r2, #4294967295
   1e1f0:	4813      	ldr	r0, [pc, #76]	; (1e240 <flash_nrf_write+0xc0>)
   1e1f2:	f003 f8b9 	bl	21368 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e1f6:	f00b fbd5 	bl	299a4 <nrf_flash_sync_is_required>
   1e1fa:	4603      	mov	r3, r0
	struct flash_context context = {
   1e1fc:	e9c7 6502 	strd	r6, r5, [r7, #8]
   1e200:	f107 0008 	add.w	r0, r7, #8
   1e204:	613c      	str	r4, [r7, #16]
	if (nrf_flash_sync_is_required()) {
   1e206:	b183      	cbz	r3, 1e22a <flash_nrf_write+0xaa>
	struct flash_context context = {
   1e208:	2301      	movs	r3, #1
   1e20a:	753b      	strb	r3, [r7, #20]
	struct flash_op_desc flash_op_desc = {
   1e20c:	4b0d      	ldr	r3, [pc, #52]	; (1e244 <flash_nrf_write+0xc4>)
   1e20e:	e9c7 3000 	strd	r3, r0, [r7]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1e212:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1e216:	f001 fced 	bl	1fbf4 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1e21a:	4638      	mov	r0, r7
   1e21c:	f001 fcf0 	bl	1fc00 <nrf_flash_sync_exe>
	return write_op(&context);
   1e220:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e222:	4807      	ldr	r0, [pc, #28]	; (1e240 <flash_nrf_write+0xc0>)
   1e224:	f003 f87a 	bl	2131c <z_impl_k_sem_give>
}
   1e228:	e7c8      	b.n	1e1bc <flash_nrf_write+0x3c>
	struct flash_context context = {
   1e22a:	753b      	strb	r3, [r7, #20]
	return write_op(&context);
   1e22c:	f7ff fef2 	bl	1e014 <write_op>
   1e230:	e7f6      	b.n	1e220 <flash_nrf_write+0xa0>
   1e232:	bf00      	nop
   1e234:	0002df8d 	.word	0x0002df8d
   1e238:	0002ac58 	.word	0x0002ac58
   1e23c:	0002dfc9 	.word	0x0002dfc9
   1e240:	20002d90 	.word	0x20002d90
   1e244:	0001e015 	.word	0x0001e015

0001e248 <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e248:	4b07      	ldr	r3, [pc, #28]	; (1e268 <uart_nrfx_poll_in+0x20>)
   1e24a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   1e24e:	b142      	cbz	r2, 1e262 <uart_nrfx_poll_in+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e250:	2000      	movs	r0, #0
   1e252:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1e256:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
   1e25a:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1e25e:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
   1e260:	4770      	bx	lr
		return -1;
   1e262:	f04f 30ff 	mov.w	r0, #4294967295
}
   1e266:	4770      	bx	lr
   1e268:	40002000 	.word	0x40002000

0001e26c <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1e26c:	4b02      	ldr	r3, [pc, #8]	; (1e278 <uart_nrfx_err_check+0xc>)
   1e26e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1e272:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   1e276:	4770      	bx	lr
   1e278:	40002000 	.word	0x40002000

0001e27c <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
   1e27c:	b530      	push	{r4, r5, lr}
	struct uart_nrfx_data *data = dev->data;
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1e27e:	794b      	ldrb	r3, [r1, #5]
   1e280:	2b01      	cmp	r3, #1
   1e282:	d022      	beq.n	1e2ca <uart_nrfx_configure+0x4e>
   1e284:	2b03      	cmp	r3, #3
   1e286:	d11d      	bne.n	1e2c4 <uart_nrfx_configure+0x48>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
   1e288:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1e28a:	798b      	ldrb	r3, [r1, #6]
   1e28c:	2b03      	cmp	r3, #3
   1e28e:	d119      	bne.n	1e2c4 <uart_nrfx_configure+0x48>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1e290:	79cb      	ldrb	r3, [r1, #7]
   1e292:	b9bb      	cbnz	r3, 1e2c4 <uart_nrfx_configure+0x48>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1e294:	790a      	ldrb	r2, [r1, #4]
   1e296:	b112      	cbz	r2, 1e29e <uart_nrfx_configure+0x22>
   1e298:	2a02      	cmp	r2, #2
   1e29a:	d113      	bne.n	1e2c4 <uart_nrfx_configure+0x48>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
   1e29c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1e29e:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   1e2a0:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1e2a4:	d061      	beq.n	1e36a <uart_nrfx_configure+0xee>
   1e2a6:	d82d      	bhi.n	1e304 <uart_nrfx_configure+0x88>
   1e2a8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1e2ac:	d05f      	beq.n	1e36e <uart_nrfx_configure+0xf2>
   1e2ae:	d816      	bhi.n	1e2de <uart_nrfx_configure+0x62>
   1e2b0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1e2b4:	d05d      	beq.n	1e372 <uart_nrfx_configure+0xf6>
   1e2b6:	d80a      	bhi.n	1e2ce <uart_nrfx_configure+0x52>
   1e2b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1e2bc:	d05c      	beq.n	1e378 <uart_nrfx_configure+0xfc>
   1e2be:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1e2c2:	d05c      	beq.n	1e37e <uart_nrfx_configure+0x102>
   1e2c4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e2c8:	e04e      	b.n	1e368 <uart_nrfx_configure+0xec>
	switch (cfg->stop_bits) {
   1e2ca:	2500      	movs	r5, #0
   1e2cc:	e7dd      	b.n	1e28a <uart_nrfx_configure+0xe>
	switch (baudrate) {
   1e2ce:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1e2d2:	d057      	beq.n	1e384 <uart_nrfx_configure+0x108>
   1e2d4:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1e2d8:	d1f4      	bne.n	1e2c4 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   1e2da:	4b34      	ldr	r3, [pc, #208]	; (1e3ac <uart_nrfx_configure+0x130>)
   1e2dc:	e039      	b.n	1e352 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1e2de:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1e2e2:	d052      	beq.n	1e38a <uart_nrfx_configure+0x10e>
   1e2e4:	d807      	bhi.n	1e2f6 <uart_nrfx_configure+0x7a>
   1e2e6:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1e2ea:	d050      	beq.n	1e38e <uart_nrfx_configure+0x112>
   1e2ec:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1e2f0:	d1e8      	bne.n	1e2c4 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   1e2f2:	4b2f      	ldr	r3, [pc, #188]	; (1e3b0 <uart_nrfx_configure+0x134>)
   1e2f4:	e02d      	b.n	1e352 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1e2f6:	f647 2412 	movw	r4, #31250	; 0x7a12
   1e2fa:	42a3      	cmp	r3, r4
   1e2fc:	d1e2      	bne.n	1e2c4 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   1e2fe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1e302:	e026      	b.n	1e352 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1e304:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1e308:	d044      	beq.n	1e394 <uart_nrfx_configure+0x118>
   1e30a:	d811      	bhi.n	1e330 <uart_nrfx_configure+0xb4>
   1e30c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1e310:	d042      	beq.n	1e398 <uart_nrfx_configure+0x11c>
   1e312:	d808      	bhi.n	1e326 <uart_nrfx_configure+0xaa>
   1e314:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1e318:	42a3      	cmp	r3, r4
   1e31a:	d03f      	beq.n	1e39c <uart_nrfx_configure+0x120>
   1e31c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1e320:	d1d0      	bne.n	1e2c4 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   1e322:	4b24      	ldr	r3, [pc, #144]	; (1e3b4 <uart_nrfx_configure+0x138>)
   1e324:	e015      	b.n	1e352 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1e326:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1e32a:	d1cb      	bne.n	1e2c4 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   1e32c:	4b22      	ldr	r3, [pc, #136]	; (1e3b8 <uart_nrfx_configure+0x13c>)
   1e32e:	e010      	b.n	1e352 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1e330:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1e334:	d035      	beq.n	1e3a2 <uart_nrfx_configure+0x126>
   1e336:	d807      	bhi.n	1e348 <uart_nrfx_configure+0xcc>
   1e338:	4c20      	ldr	r4, [pc, #128]	; (1e3bc <uart_nrfx_configure+0x140>)
   1e33a:	42a3      	cmp	r3, r4
   1e33c:	d033      	beq.n	1e3a6 <uart_nrfx_configure+0x12a>
   1e33e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1e342:	d1bf      	bne.n	1e2c4 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   1e344:	4b1e      	ldr	r3, [pc, #120]	; (1e3c0 <uart_nrfx_configure+0x144>)
   1e346:	e004      	b.n	1e352 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1e348:	4c1e      	ldr	r4, [pc, #120]	; (1e3c4 <uart_nrfx_configure+0x148>)
   1e34a:	42a3      	cmp	r3, r4
   1e34c:	d1ba      	bne.n	1e2c4 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   1e34e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uart_nrfx_data *data = dev->data;
   1e352:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1e354:	481c      	ldr	r0, [pc, #112]	; (1e3c8 <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
   1e356:	432a      	orrs	r2, r5
    p_reg->BAUDRATE = baudrate;
   1e358:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1e35c:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	data->uart_config = *cfg;
   1e360:	c903      	ldmia	r1, {r0, r1}
   1e362:	e884 0003 	stmia.w	r4, {r0, r1}

	return 0;
   1e366:	2000      	movs	r0, #0
}
   1e368:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   1e36a:	4b18      	ldr	r3, [pc, #96]	; (1e3cc <uart_nrfx_configure+0x150>)
   1e36c:	e7f1      	b.n	1e352 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   1e36e:	4b18      	ldr	r3, [pc, #96]	; (1e3d0 <uart_nrfx_configure+0x154>)
   1e370:	e7ef      	b.n	1e352 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   1e372:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1e376:	e7ec      	b.n	1e352 <uart_nrfx_configure+0xd6>
		nrf_baudrate = 0x00014000;
   1e378:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1e37c:	e7e9      	b.n	1e352 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1e37e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1e382:	e7e6      	b.n	1e352 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   1e384:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1e388:	e7e3      	b.n	1e352 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   1e38a:	4b12      	ldr	r3, [pc, #72]	; (1e3d4 <uart_nrfx_configure+0x158>)
   1e38c:	e7e1      	b.n	1e352 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   1e38e:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   1e392:	e7de      	b.n	1e352 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   1e394:	4b10      	ldr	r3, [pc, #64]	; (1e3d8 <uart_nrfx_configure+0x15c>)
   1e396:	e7dc      	b.n	1e352 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   1e398:	4b10      	ldr	r3, [pc, #64]	; (1e3dc <uart_nrfx_configure+0x160>)
   1e39a:	e7da      	b.n	1e352 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   1e39c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1e3a0:	e7d7      	b.n	1e352 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   1e3a2:	4b0f      	ldr	r3, [pc, #60]	; (1e3e0 <uart_nrfx_configure+0x164>)
   1e3a4:	e7d5      	b.n	1e352 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   1e3a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1e3aa:	e7d2      	b.n	1e352 <uart_nrfx_configure+0xd6>
   1e3ac:	0013b000 	.word	0x0013b000
   1e3b0:	004ea000 	.word	0x004ea000
   1e3b4:	00ebf000 	.word	0x00ebf000
   1e3b8:	01d7e000 	.word	0x01d7e000
   1e3bc:	0003d090 	.word	0x0003d090
   1e3c0:	075f7000 	.word	0x075f7000
   1e3c4:	000f4240 	.word	0x000f4240
   1e3c8:	40002000 	.word	0x40002000
   1e3cc:	009d5000 	.word	0x009d5000
   1e3d0:	00275000 	.word	0x00275000
   1e3d4:	0075f000 	.word	0x0075f000
   1e3d8:	03afb000 	.word	0x03afb000
   1e3dc:	013a9000 	.word	0x013a9000
   1e3e0:	0ebed000 	.word	0x0ebed000

0001e3e4 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
   1e3e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct uart_nrfx_data *data = dev->data;
	int err;
#ifdef CONFIG_PINCTRL
	const struct uart_nrfx_config *config = dev->config;
   1e3e6:	6843      	ldr	r3, [r0, #4]
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
   1e3e8:	4c12      	ldr	r4, [pc, #72]	; (1e434 <uart_nrfx_init+0x50>)
#endif /* CONFIG_PINCTRL */

	nrf_uart_disable(uart0_addr);

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
   1e3ea:	681e      	ldr	r6, [r3, #0]
	struct uart_nrfx_data *data = dev->data;
   1e3ec:	6907      	ldr	r7, [r0, #16]
   1e3ee:	2100      	movs	r1, #0
{
   1e3f0:	4605      	mov	r5, r0
   1e3f2:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	ret = pinctrl_lookup_state(config, id, &state);
   1e3f6:	aa01      	add	r2, sp, #4
   1e3f8:	4630      	mov	r0, r6
   1e3fa:	f00b f97b 	bl	296f4 <pinctrl_lookup_state>
	if (ret < 0) {
   1e3fe:	2800      	cmp	r0, #0
   1e400:	db15      	blt.n	1e42e <uart_nrfx_init+0x4a>
	return pinctrl_apply_state_direct(config, state);
   1e402:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1e404:	6832      	ldr	r2, [r6, #0]
   1e406:	7919      	ldrb	r1, [r3, #4]
   1e408:	6818      	ldr	r0, [r3, #0]
   1e40a:	f00b f990 	bl	2972e <pinctrl_configure_pins>
	if (err < 0) {
   1e40e:	2800      	cmp	r0, #0
   1e410:	db0d      	blt.n	1e42e <uart_nrfx_init+0x4a>
#else
	uart_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &data->uart_config);
   1e412:	4639      	mov	r1, r7
   1e414:	4628      	mov	r0, r5
   1e416:	f7ff ff31 	bl	1e27c <uart_nrfx_configure>
	if (err) {
   1e41a:	b940      	cbnz	r0, 1e42e <uart_nrfx_init+0x4a>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   1e41c:	2304      	movs	r3, #4
   1e41e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e422:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
   1e426:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e42a:	2301      	movs	r3, #1
   1e42c:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
   1e42e:	b003      	add	sp, #12
   1e430:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e432:	bf00      	nop
   1e434:	40002000 	.word	0x40002000

0001e438 <uart_nrfx_poll_out>:
{
   1e438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e43a:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   1e43c:	f00b fca9 	bl	29d92 <k_is_in_isr>
   1e440:	4d1a      	ldr	r5, [pc, #104]	; (1e4ac <uart_nrfx_poll_out+0x74>)
   1e442:	bb78      	cbnz	r0, 1e4a4 <uart_nrfx_poll_out+0x6c>
   1e444:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e446:	2701      	movs	r7, #1
   1e448:	f3bf 8f5b 	dmb	ish
   1e44c:	e855 3f00 	ldrex	r3, [r5]
   1e450:	2b00      	cmp	r3, #0
   1e452:	d103      	bne.n	1e45c <uart_nrfx_poll_out+0x24>
   1e454:	e845 7200 	strex	r2, r7, [r5]
   1e458:	2a00      	cmp	r2, #0
   1e45a:	d1f7      	bne.n	1e44c <uart_nrfx_poll_out+0x14>
   1e45c:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   1e460:	d007      	beq.n	1e472 <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
   1e462:	2021      	movs	r0, #33	; 0x21
   1e464:	2100      	movs	r1, #0
			if (--safety_cnt == 0) {
   1e466:	3c01      	subs	r4, #1
   1e468:	f003 fc60 	bl	21d2c <z_impl_k_sleep>
   1e46c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1e470:	d1ea      	bne.n	1e448 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e472:	4c0f      	ldr	r4, [pc, #60]	; (1e4b0 <uart_nrfx_poll_out+0x78>)
   1e474:	2300      	movs	r3, #0
   1e476:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   1e47a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e47e:	2301      	movs	r3, #1
   1e480:	60a3      	str	r3, [r4, #8]
    p_reg->TXD = txd;
   1e482:	f8c4 651c 	str.w	r6, [r4, #1308]	; 0x51c
   1e486:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e48a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   1e48e:	b923      	cbnz	r3, 1e49a <uart_nrfx_poll_out+0x62>
   1e490:	2001      	movs	r0, #1
   1e492:	f00b faaf 	bl	299f4 <nrfx_busy_wait>
   1e496:	3e01      	subs	r6, #1
   1e498:	d1f7      	bne.n	1e48a <uart_nrfx_poll_out+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e49a:	2301      	movs	r3, #1
   1e49c:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   1e49e:	2300      	movs	r3, #0
   1e4a0:	602b      	str	r3, [r5, #0]
}
   1e4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
   1e4a4:	2301      	movs	r3, #1
   1e4a6:	602b      	str	r3, [r5, #0]
   1e4a8:	e7e3      	b.n	1e472 <uart_nrfx_poll_out+0x3a>
   1e4aa:	bf00      	nop
   1e4ac:	20002da8 	.word	0x20002da8
   1e4b0:	40002000 	.word	0x40002000

0001e4b4 <random_byte_get>:
	__asm__ volatile(
   1e4b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e4b8:	f3ef 8211 	mrs	r2, BASEPRI
   1e4bc:	f383 8812 	msr	BASEPRI_MAX, r3
   1e4c0:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e4c4:	4b09      	ldr	r3, [pc, #36]	; (1e4ec <random_byte_get+0x38>)
   1e4c6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1e4ca:	b161      	cbz	r1, 1e4e6 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e4cc:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1e4ce:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e4d2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1e4d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1e4da:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1e4dc:	f382 8811 	msr	BASEPRI, r2
   1e4e0:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1e4e4:	4770      	bx	lr
	int retval = -EAGAIN;
   1e4e6:	f06f 000a 	mvn.w	r0, #10
   1e4ea:	e7f7      	b.n	1e4dc <random_byte_get+0x28>
   1e4ec:	4000d000 	.word	0x4000d000

0001e4f0 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1e4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e4f2:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1e4f4:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1e4f6:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1e4f8:	f04f 0040 	mov.w	r0, #64	; 0x40
   1e4fc:	f3ef 8e11 	mrs	lr, BASEPRI
   1e500:	f380 8812 	msr	BASEPRI_MAX, r0
   1e504:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1e508:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1e50a:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1e50e:	1ba4      	subs	r4, r4, r6
   1e510:	403c      	ands	r4, r7
	if (available < len) {
   1e512:	42a2      	cmp	r2, r4
		len = available;
   1e514:	bf88      	it	hi
   1e516:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1e518:	18b0      	adds	r0, r6, r2
   1e51a:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   1e51c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1e51e:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   1e520:	f38e 8811 	msr	BASEPRI, lr
   1e524:	f3bf 8f6f 	isb	sy
   1e528:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   1e52a:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   1e52c:	4290      	cmp	r0, r2
   1e52e:	d119      	bne.n	1e564 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1e530:	4566      	cmp	r6, ip
   1e532:	d10d      	bne.n	1e550 <rng_pool_get+0x60>
	__asm__ volatile(
   1e534:	f04f 0540 	mov.w	r5, #64	; 0x40
   1e538:	f3ef 8011 	mrs	r0, BASEPRI
   1e53c:	f385 8812 	msr	BASEPRI_MAX, r5
   1e540:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1e544:	781d      	ldrb	r5, [r3, #0]
   1e546:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1e548:	f380 8811 	msr	BASEPRI, r0
   1e54c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1e550:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1e552:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1e554:	b290      	uxth	r0, r2
	available = available - len;
   1e556:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   1e558:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e55a:	bf22      	ittt	cs
   1e55c:	4b06      	ldrcs	r3, [pc, #24]	; (1e578 <rng_pool_get+0x88>)
   1e55e:	2201      	movcs	r2, #1
   1e560:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1e562:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1e564:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   1e568:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1e56a:	f89e e005 	ldrb.w	lr, [lr, #5]
   1e56e:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   1e572:	403d      	ands	r5, r7
   1e574:	e7da      	b.n	1e52c <rng_pool_get+0x3c>
   1e576:	bf00      	nop
   1e578:	4000d000 	.word	0x4000d000

0001e57c <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e57c:	43db      	mvns	r3, r3
{
   1e57e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e582:	f013 0501 	ands.w	r5, r3, #1
{
   1e586:	460e      	mov	r6, r1
   1e588:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e58a:	d004      	beq.n	1e596 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1e58c:	4821      	ldr	r0, [pc, #132]	; (1e614 <entropy_nrf5_get_entropy_isr+0x98>)
   1e58e:	f7ff ffaf 	bl	1e4f0 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1e592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1e596:	b3a2      	cbz	r2, 1e602 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1e598:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e59c:	f3ef 8811 	mrs	r8, BASEPRI
   1e5a0:	f383 8812 	msr	BASEPRI_MAX, r3
   1e5a4:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1e5a8:	200d      	movs	r0, #13
   1e5aa:	f7f5 fdd1 	bl	14150 <arch_irq_is_enabled>
   1e5ae:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1e5b0:	200d      	movs	r0, #13
   1e5b2:	f7f5 fdb9 	bl	14128 <arch_irq_disable>
	__asm__ volatile(
   1e5b6:	f388 8811 	msr	BASEPRI, r8
   1e5ba:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e5be:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1e618 <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e5c2:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1e61c <entropy_nrf5_get_entropy_isr+0xa0>
   1e5c6:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1e5ca:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1e5ce:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e5d2:	2301      	movs	r3, #1
   1e5d4:	f8c8 3000 	str.w	r3, [r8]
   1e5d8:	4625      	mov	r5, r4
   1e5da:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e5de:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1e5e2:	b183      	cbz	r3, 1e606 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1e5e4:	f7ff ff66 	bl	1e4b4 <random_byte_get>
			if (byte < 0) {
   1e5e8:	1e03      	subs	r3, r0, #0
   1e5ea:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1e5ee:	dbf6      	blt.n	1e5de <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1e5f0:	3d01      	subs	r5, #1
   1e5f2:	b2ad      	uxth	r5, r5
   1e5f4:	5573      	strb	r3, [r6, r5]
		} while (len);
   1e5f6:	2d00      	cmp	r5, #0
   1e5f8:	d1f1      	bne.n	1e5de <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1e5fa:	b117      	cbz	r7, 1e602 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1e5fc:	200d      	movs	r0, #13
   1e5fe:	f7f5 fd83 	bl	14108 <arch_irq_enable>
	return cnt;
   1e602:	4620      	mov	r0, r4
   1e604:	e7c5      	b.n	1e592 <entropy_nrf5_get_entropy_isr+0x16>
   1e606:	f3bf 8f4f 	dsb	sy
				__WFE();
   1e60a:	bf20      	wfe
				__SEV();
   1e60c:	bf40      	sev
				__WFE();
   1e60e:	bf20      	wfe
   1e610:	e7e5      	b.n	1e5de <entropy_nrf5_get_entropy_isr+0x62>
   1e612:	bf00      	nop
   1e614:	20002ddc 	.word	0x20002ddc
   1e618:	4000d000 	.word	0x4000d000
   1e61c:	e000e100 	.word	0xe000e100

0001e620 <entropy_nrf5_get_entropy>:
{
   1e620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1e624:	4f13      	ldr	r7, [pc, #76]	; (1e674 <entropy_nrf5_get_entropy+0x54>)
   1e626:	460d      	mov	r5, r1
   1e628:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1e62a:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1e62e:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1e632:	b914      	cbnz	r4, 1e63a <entropy_nrf5_get_entropy+0x1a>
}
   1e634:	4620      	mov	r0, r4
   1e636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e63a:	f04f 33ff 	mov.w	r3, #4294967295
   1e63e:	f04f 32ff 	mov.w	r2, #4294967295
   1e642:	4638      	mov	r0, r7
   1e644:	f002 fe90 	bl	21368 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1e648:	4622      	mov	r2, r4
   1e64a:	4629      	mov	r1, r5
   1e64c:	4640      	mov	r0, r8
   1e64e:	f7ff ff4f 	bl	1e4f0 <rng_pool_get>
   1e652:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1e654:	4638      	mov	r0, r7
   1e656:	f002 fe61 	bl	2131c <z_impl_k_sem_give>
		if (bytes == 0U) {
   1e65a:	b93e      	cbnz	r6, 1e66c <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1e65c:	f04f 32ff 	mov.w	r2, #4294967295
   1e660:	f04f 33ff 	mov.w	r3, #4294967295
   1e664:	4648      	mov	r0, r9
   1e666:	f002 fe7f 	bl	21368 <z_impl_k_sem_take>
			continue;
   1e66a:	e7e2      	b.n	1e632 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1e66c:	1ba4      	subs	r4, r4, r6
   1e66e:	b2a4      	uxth	r4, r4
		buf += bytes;
   1e670:	4435      	add	r5, r6
   1e672:	e7de      	b.n	1e632 <entropy_nrf5_get_entropy+0x12>
   1e674:	20002dac 	.word	0x20002dac

0001e678 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1e678:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e67a:	4c19      	ldr	r4, [pc, #100]	; (1e6e0 <entropy_nrf5_init+0x68>)
   1e67c:	2201      	movs	r2, #1
   1e67e:	4611      	mov	r1, r2
   1e680:	4620      	mov	r0, r4
   1e682:	f00b fc76 	bl	29f72 <z_impl_k_sem_init>
   1e686:	2201      	movs	r2, #1
   1e688:	2100      	movs	r1, #0
   1e68a:	f104 0018 	add.w	r0, r4, #24
   1e68e:	f00b fc70 	bl	29f72 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1e692:	f240 4307 	movw	r3, #1031	; 0x407
   1e696:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1e69a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1e69e:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1e6a0:	230c      	movs	r3, #12
   1e6a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1e6a6:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1e6a8:	4b0e      	ldr	r3, [pc, #56]	; (1e6e4 <entropy_nrf5_init+0x6c>)
   1e6aa:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1e6ae:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1e6b2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1e6b6:	f022 0201 	bic.w	r2, r2, #1
   1e6ba:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1e6be:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e6c0:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1e6c4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1e6c8:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1e6cc:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e6ce:	6019      	str	r1, [r3, #0]
   1e6d0:	200d      	movs	r0, #13
   1e6d2:	f7f5 fd4b 	bl	1416c <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1e6d6:	200d      	movs	r0, #13
   1e6d8:	f7f5 fd16 	bl	14108 <arch_irq_enable>

	return 0;
}
   1e6dc:	4628      	mov	r0, r5
   1e6de:	bd38      	pop	{r3, r4, r5, pc}
   1e6e0:	20002dac 	.word	0x20002dac
   1e6e4:	4000d000 	.word	0x4000d000

0001e6e8 <isr>:
{
   1e6e8:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1e6ea:	f7ff fee3 	bl	1e4b4 <random_byte_get>
	if (byte < 0) {
   1e6ee:	2800      	cmp	r0, #0
   1e6f0:	db20      	blt.n	1e734 <isr+0x4c>
	uint8_t last  = rngp->last;
   1e6f2:	4b17      	ldr	r3, [pc, #92]	; (1e750 <isr+0x68>)
   1e6f4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1e6f8:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1e6fc:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1e700:	1a51      	subs	r1, r2, r1
   1e702:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1e706:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1e708:	d10d      	bne.n	1e726 <isr+0x3e>
	uint8_t last  = rngp->last;
   1e70a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1e70e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1e712:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1e716:	1a51      	subs	r1, r2, r1
   1e718:	ea34 0101 	bics.w	r1, r4, r1
   1e71c:	d10b      	bne.n	1e736 <isr+0x4e>
   1e71e:	4b0d      	ldr	r3, [pc, #52]	; (1e754 <isr+0x6c>)
   1e720:	2201      	movs	r2, #1
   1e722:	605a      	str	r2, [r3, #4]
}
   1e724:	e00e      	b.n	1e744 <isr+0x5c>
	rngp->buffer[last] = byte;
   1e726:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1e728:	3201      	adds	r2, #1
   1e72a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1e72c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1e730:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1e734:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1e736:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1e738:	3201      	adds	r2, #1
   1e73a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1e73c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1e740:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1e744:	4804      	ldr	r0, [pc, #16]	; (1e758 <isr+0x70>)
}
   1e746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e74a:	f002 bde7 	b.w	2131c <z_impl_k_sem_give>
   1e74e:	bf00      	nop
   1e750:	20002dac 	.word	0x20002dac
   1e754:	4000d000 	.word	0x4000d000
   1e758:	20002dc4 	.word	0x20002dc4

0001e75c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   1e75c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1e75e:	2301      	movs	r3, #1
   1e760:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e762:	4a11      	ldr	r2, [pc, #68]	; (1e7a8 <compare_int_lock+0x4c>)
   1e764:	f3bf 8f5b 	dmb	ish
   1e768:	43dc      	mvns	r4, r3
   1e76a:	e852 1f00 	ldrex	r1, [r2]
   1e76e:	ea01 0c04 	and.w	ip, r1, r4
   1e772:	e842 ce00 	strex	lr, ip, [r2]
   1e776:	f1be 0f00 	cmp.w	lr, #0
   1e77a:	d1f6      	bne.n	1e76a <compare_int_lock+0xe>
   1e77c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e780:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e784:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1e788:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1e78c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1e790:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1e794:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1e798:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1e79c:	420b      	tst	r3, r1
}
   1e79e:	bf14      	ite	ne
   1e7a0:	2001      	movne	r0, #1
   1e7a2:	2000      	moveq	r0, #0
   1e7a4:	bd10      	pop	{r4, pc}
   1e7a6:	bf00      	nop
   1e7a8:	20002e04 	.word	0x20002e04

0001e7ac <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e7ac:	4919      	ldr	r1, [pc, #100]	; (1e814 <sys_clock_timeout_handler+0x68>)
{
   1e7ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e7b0:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1e7b2:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e7b6:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1e7b8:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1e7bc:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e7c0:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1e7c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1e7c6:	d222      	bcs.n	1e80e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1e7c8:	4b13      	ldr	r3, [pc, #76]	; (1e818 <sys_clock_timeout_handler+0x6c>)
   1e7ca:	681b      	ldr	r3, [r3, #0]
   1e7cc:	0a1a      	lsrs	r2, r3, #8
   1e7ce:	061b      	lsls	r3, r3, #24
   1e7d0:	195e      	adds	r6, r3, r5
   1e7d2:	4b12      	ldr	r3, [pc, #72]	; (1e81c <sys_clock_timeout_handler+0x70>)
   1e7d4:	f142 0700 	adc.w	r7, r2, #0
   1e7d8:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   1e7dc:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1e7de:	f003 fc2f 	bl	22040 <sys_clock_announce>
    return p_reg->CC[ch];
   1e7e2:	00a3      	lsls	r3, r4, #2
   1e7e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e7e8:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1e7ec:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1e7f0:	42aa      	cmp	r2, r5
   1e7f2:	d10b      	bne.n	1e80c <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   1e7f4:	b91e      	cbnz	r6, 1e7fe <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   1e7f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1e7fa:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1e7fe:	4b08      	ldr	r3, [pc, #32]	; (1e820 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e800:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1e804:	fa00 f404 	lsl.w	r4, r0, r4
   1e808:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1e80c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   1e80e:	2600      	movs	r6, #0
   1e810:	e7e5      	b.n	1e7de <sys_clock_timeout_handler+0x32>
   1e812:	bf00      	nop
   1e814:	200021e8 	.word	0x200021e8
   1e818:	20002e08 	.word	0x20002e08
   1e81c:	200021d0 	.word	0x200021d0
   1e820:	40011000 	.word	0x40011000

0001e824 <compare_int_unlock>:
	if (key) {
   1e824:	b319      	cbz	r1, 1e86e <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e826:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   1e82a:	2301      	movs	r3, #1
   1e82c:	4a10      	ldr	r2, [pc, #64]	; (1e870 <compare_int_unlock+0x4c>)
   1e82e:	4083      	lsls	r3, r0
   1e830:	e852 1f00 	ldrex	r1, [r2]
   1e834:	4319      	orrs	r1, r3
   1e836:	e842 1c00 	strex	ip, r1, [r2]
   1e83a:	f1bc 0f00 	cmp.w	ip, #0
   1e83e:	d1f7      	bne.n	1e830 <compare_int_unlock+0xc>
   1e840:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1e844:	4a0b      	ldr	r2, [pc, #44]	; (1e874 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e846:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e84a:	4083      	lsls	r3, r0
   1e84c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e850:	4b09      	ldr	r3, [pc, #36]	; (1e878 <compare_int_unlock+0x54>)
   1e852:	f3bf 8f5b 	dmb	ish
   1e856:	681b      	ldr	r3, [r3, #0]
   1e858:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1e85c:	fa23 f000 	lsr.w	r0, r3, r0
   1e860:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e862:	bf42      	ittt	mi
   1e864:	4b05      	ldrmi	r3, [pc, #20]	; (1e87c <compare_int_unlock+0x58>)
   1e866:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1e86a:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1e86e:	4770      	bx	lr
   1e870:	20002e04 	.word	0x20002e04
   1e874:	40011000 	.word	0x40011000
   1e878:	20002e00 	.word	0x20002e00
   1e87c:	e000e100 	.word	0xe000e100

0001e880 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1e880:	4b0d      	ldr	r3, [pc, #52]	; (1e8b8 <z_nrf_rtc_timer_read+0x38>)
   1e882:	6818      	ldr	r0, [r3, #0]
   1e884:	0a01      	lsrs	r1, r0, #8
   1e886:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1e888:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1e88c:	4b0b      	ldr	r3, [pc, #44]	; (1e8bc <z_nrf_rtc_timer_read+0x3c>)
   1e88e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1e892:	1818      	adds	r0, r3, r0
   1e894:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1e898:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e89c:	d20a      	bcs.n	1e8b4 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1e89e:	4b08      	ldr	r3, [pc, #32]	; (1e8c0 <z_nrf_rtc_timer_read+0x40>)
   1e8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e8a4:	4290      	cmp	r0, r2
   1e8a6:	eb71 0303 	sbcs.w	r3, r1, r3
   1e8aa:	d203      	bcs.n	1e8b4 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1e8ac:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1e8b0:	f141 0100 	adc.w	r1, r1, #0
}
   1e8b4:	4770      	bx	lr
   1e8b6:	bf00      	nop
   1e8b8:	20002e08 	.word	0x20002e08
   1e8bc:	40011000 	.word	0x40011000
   1e8c0:	200021d0 	.word	0x200021d0

0001e8c4 <compare_set>:
{
   1e8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e8c8:	b085      	sub	sp, #20
   1e8ca:	4616      	mov	r6, r2
   1e8cc:	4698      	mov	r8, r3
   1e8ce:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   1e8d0:	f7ff ff44 	bl	1e75c <compare_int_lock>
   1e8d4:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1e8d6:	f7ff ffd3 	bl	1e880 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1e8da:	42b0      	cmp	r0, r6
   1e8dc:	eb71 0308 	sbcs.w	r3, r1, r8
   1e8e0:	d278      	bcs.n	1e9d4 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   1e8e2:	4b46      	ldr	r3, [pc, #280]	; (1e9fc <compare_set+0x138>)
   1e8e4:	1a30      	subs	r0, r6, r0
   1e8e6:	eb68 0101 	sbc.w	r1, r8, r1
   1e8ea:	4298      	cmp	r0, r3
   1e8ec:	f171 0300 	sbcs.w	r3, r1, #0
   1e8f0:	f080 8081 	bcs.w	1e9f6 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   1e8f4:	4b42      	ldr	r3, [pc, #264]	; (1ea00 <compare_set+0x13c>)
   1e8f6:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1e8fa:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   1e8fe:	45d8      	cmp	r8, fp
   1e900:	bf08      	it	eq
   1e902:	4556      	cmpeq	r6, sl
   1e904:	d051      	beq.n	1e9aa <compare_set+0xe6>
   1e906:	ea4f 0985 	mov.w	r9, r5, lsl #2
   1e90a:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1e90e:	f105 0750 	add.w	r7, r5, #80	; 0x50
   1e912:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   1e916:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e918:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1e91c:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e920:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   1e922:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   1e926:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e92a:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   1e92c:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1e930:	4b34      	ldr	r3, [pc, #208]	; (1ea04 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e932:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1e936:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   1e938:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1e93c:	1a40      	subs	r0, r0, r1
   1e93e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1e942:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1e946:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1e948:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1e94c:	d107      	bne.n	1e95e <compare_set+0x9a>
   1e94e:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1e952:	2013      	movs	r0, #19
   1e954:	f00b fd76 	bl	2a444 <z_impl_k_busy_wait>
   1e958:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   1e95c:	4b29      	ldr	r3, [pc, #164]	; (1ea04 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1e95e:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   1e962:	eba4 000c 	sub.w	r0, r4, ip
   1e966:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   1e96a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e96e:	bf88      	it	hi
   1e970:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e972:	2000      	movs	r0, #0
   1e974:	6038      	str	r0, [r7, #0]
   1e976:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   1e978:	9801      	ldr	r0, [sp, #4]
   1e97a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1e97e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1e982:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1e986:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1e98a:	4281      	cmp	r1, r0
   1e98c:	d006      	beq.n	1e99c <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   1e98e:	1a20      	subs	r0, r4, r0
   1e990:	3802      	subs	r0, #2
   1e992:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1e996:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e99a:	d819      	bhi.n	1e9d0 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   1e99c:	1aa4      	subs	r4, r4, r2
   1e99e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1e9a2:	eb14 0a06 	adds.w	sl, r4, r6
   1e9a6:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   1e9aa:	4915      	ldr	r1, [pc, #84]	; (1ea00 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   1e9ac:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1e9ae:	012b      	lsls	r3, r5, #4
   1e9b0:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   1e9b4:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   1e9b8:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1e9ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1e9bc:	6053      	str	r3, [r2, #4]
	return ret;
   1e9be:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   1e9c0:	4628      	mov	r0, r5
   1e9c2:	9900      	ldr	r1, [sp, #0]
   1e9c4:	f7ff ff2e 	bl	1e824 <compare_int_unlock>
}
   1e9c8:	4620      	mov	r0, r4
   1e9ca:	b005      	add	sp, #20
   1e9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9d0:	4620      	mov	r0, r4
   1e9d2:	e7b1      	b.n	1e938 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   1e9d4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e9d6:	4a0c      	ldr	r2, [pc, #48]	; (1ea08 <compare_set+0x144>)
   1e9d8:	f3bf 8f5b 	dmb	ish
   1e9dc:	40ab      	lsls	r3, r5
   1e9de:	e852 1f00 	ldrex	r1, [r2]
   1e9e2:	4319      	orrs	r1, r3
   1e9e4:	e842 1000 	strex	r0, r1, [r2]
   1e9e8:	2800      	cmp	r0, #0
   1e9ea:	d1f8      	bne.n	1e9de <compare_set+0x11a>
   1e9ec:	f3bf 8f5b 	dmb	ish
   1e9f0:	46b2      	mov	sl, r6
   1e9f2:	46c3      	mov	fp, r8
   1e9f4:	e7d9      	b.n	1e9aa <compare_set+0xe6>
			return -EINVAL;
   1e9f6:	f06f 0415 	mvn.w	r4, #21
   1e9fa:	e7e1      	b.n	1e9c0 <compare_set+0xfc>
   1e9fc:	01000001 	.word	0x01000001
   1ea00:	200021d8 	.word	0x200021d8
   1ea04:	40011000 	.word	0x40011000
   1ea08:	20002e00 	.word	0x20002e00

0001ea0c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1ea0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1ea0e:	4b19      	ldr	r3, [pc, #100]	; (1ea74 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   1ea10:	4d19      	ldr	r5, [pc, #100]	; (1ea78 <sys_clock_driver_init+0x6c>)
   1ea12:	2400      	movs	r4, #0
   1ea14:	f04f 30ff 	mov.w	r0, #4294967295
   1ea18:	f04f 31ff 	mov.w	r1, #4294967295
   1ea1c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1ea20:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1ea24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1ea28:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ea2c:	4b13      	ldr	r3, [pc, #76]	; (1ea7c <sys_clock_driver_init+0x70>)
   1ea2e:	2602      	movs	r6, #2
   1ea30:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1ea34:	2101      	movs	r1, #1
   1ea36:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1ea3a:	2011      	movs	r0, #17
   1ea3c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1ea40:	4622      	mov	r2, r4
   1ea42:	f7f5 fb93 	bl	1416c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1ea46:	2011      	movs	r0, #17
   1ea48:	f7f5 fb5e 	bl	14108 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1ea4c:	4a0c      	ldr	r2, [pc, #48]	; (1ea80 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1ea4e:	2301      	movs	r3, #1
   1ea50:	60ab      	str	r3, [r5, #8]
   1ea52:	602b      	str	r3, [r5, #0]
   1ea54:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1ea56:	4b0b      	ldr	r3, [pc, #44]	; (1ea84 <sys_clock_driver_init+0x78>)
   1ea58:	4a0b      	ldr	r2, [pc, #44]	; (1ea88 <sys_clock_driver_init+0x7c>)
   1ea5a:	9300      	str	r3, [sp, #0]
   1ea5c:	9401      	str	r4, [sp, #4]
   1ea5e:	2300      	movs	r3, #0
   1ea60:	4620      	mov	r0, r4
   1ea62:	f7ff ff2f 	bl	1e8c4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1ea66:	4630      	mov	r0, r6
   1ea68:	f7fe fc14 	bl	1d294 <z_nrf_clock_control_lf_on>

	return 0;
}
   1ea6c:	4620      	mov	r0, r4
   1ea6e:	b002      	add	sp, #8
   1ea70:	bd70      	pop	{r4, r5, r6, pc}
   1ea72:	bf00      	nop
   1ea74:	200021d8 	.word	0x200021d8
   1ea78:	40011000 	.word	0x40011000
   1ea7c:	e000e100 	.word	0xe000e100
   1ea80:	20002e04 	.word	0x20002e04
   1ea84:	0001e7ad 	.word	0x0001e7ad
   1ea88:	007fffff 	.word	0x007fffff

0001ea8c <rtc_nrf_isr>:
{
   1ea8c:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    return p_reg->INTENSET & mask;
   1ea90:	4c2c      	ldr	r4, [pc, #176]	; (1eb44 <rtc_nrf_isr+0xb8>)
   1ea92:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1ea96:	0799      	lsls	r1, r3, #30
   1ea98:	d50b      	bpl.n	1eab2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ea9a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1ea9e:	b143      	cbz	r3, 1eab2 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   1eaa0:	4a29      	ldr	r2, [pc, #164]	; (1eb48 <rtc_nrf_isr+0xbc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1eaa2:	2300      	movs	r3, #0
   1eaa4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1eaa8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1eaac:	6813      	ldr	r3, [r2, #0]
   1eaae:	3301      	adds	r3, #1
   1eab0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1eab2:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1eab6:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   1eab8:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1eabc:	03d2      	lsls	r2, r2, #15
   1eabe:	d52d      	bpl.n	1eb1c <rtc_nrf_isr+0x90>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1eac0:	f3bf 8f5b 	dmb	ish
   1eac4:	4a21      	ldr	r2, [pc, #132]	; (1eb4c <rtc_nrf_isr+0xc0>)
   1eac6:	e852 1f00 	ldrex	r1, [r2]
   1eaca:	f021 0001 	bic.w	r0, r1, #1
   1eace:	e842 0500 	strex	r5, r0, [r2]
   1ead2:	2d00      	cmp	r5, #0
   1ead4:	d1f7      	bne.n	1eac6 <rtc_nrf_isr+0x3a>
   1ead6:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1eada:	b911      	cbnz	r1, 1eae2 <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1eadc:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
		if (result) {
   1eae0:	b1e2      	cbz	r2, 1eb1c <rtc_nrf_isr+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1eae2:	2500      	movs	r5, #0
   1eae4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1eae8:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1eaec:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   1eaf0:	f7ff fec6 	bl	1e880 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1eaf4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1eaf8:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1eafa:	4b15      	ldr	r3, [pc, #84]	; (1eb50 <rtc_nrf_isr+0xc4>)
   1eafc:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1eb00:	42b0      	cmp	r0, r6
   1eb02:	41b9      	sbcs	r1, r7
   1eb04:	d20f      	bcs.n	1eb26 <rtc_nrf_isr+0x9a>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1eb06:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1eb08:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1eb0c:	b141      	cbz	r1, 1eb20 <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
   1eb0e:	f8cd 8000 	str.w	r8, [sp]
   1eb12:	4632      	mov	r2, r6
   1eb14:	463b      	mov	r3, r7
   1eb16:	2000      	movs	r0, #0
   1eb18:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1eb1a:	e001      	b.n	1eb20 <rtc_nrf_isr+0x94>
   1eb1c:	f383 8810 	msr	PRIMASK, r3
}
   1eb20:	b002      	add	sp, #8
   1eb22:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1eb26:	f04f 3aff 	mov.w	sl, #4294967295
   1eb2a:	f04f 3bff 	mov.w	fp, #4294967295
			user_context = cc_data[chan].user_context;
   1eb2e:	e9d3 1800 	ldrd	r1, r8, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1eb32:	e9c3 ab02 	strd	sl, fp, [r3, #8]
			cc_data[chan].callback = NULL;
   1eb36:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1eb38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1eb3c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   1eb40:	e7e2      	b.n	1eb08 <rtc_nrf_isr+0x7c>
   1eb42:	bf00      	nop
   1eb44:	40011000 	.word	0x40011000
   1eb48:	20002e08 	.word	0x20002e08
   1eb4c:	20002e00 	.word	0x20002e00
   1eb50:	200021d8 	.word	0x200021d8

0001eb54 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1eb54:	1c43      	adds	r3, r0, #1
{
   1eb56:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1eb58:	d021      	beq.n	1eb9e <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1eb5a:	2801      	cmp	r0, #1
   1eb5c:	dd21      	ble.n	1eba2 <sys_clock_set_timeout+0x4e>
   1eb5e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1eb62:	da20      	bge.n	1eba6 <sys_clock_set_timeout+0x52>
   1eb64:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1eb66:	f7ff fe8b 	bl	1e880 <z_nrf_rtc_timer_read>
   1eb6a:	4b10      	ldr	r3, [pc, #64]	; (1ebac <sys_clock_set_timeout+0x58>)
   1eb6c:	e9d3 1300 	ldrd	r1, r3, [r3]
   1eb70:	1a40      	subs	r0, r0, r1
		ticks = 0;
   1eb72:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1eb76:	bf28      	it	cs
   1eb78:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1eb7a:	3001      	adds	r0, #1
   1eb7c:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   1eb7e:	480c      	ldr	r0, [pc, #48]	; (1ebb0 <sys_clock_set_timeout+0x5c>)
   1eb80:	4282      	cmp	r2, r0
   1eb82:	bf28      	it	cs
   1eb84:	4602      	movcs	r2, r0
   1eb86:	1852      	adds	r2, r2, r1
   1eb88:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1eb8c:	4909      	ldr	r1, [pc, #36]	; (1ebb4 <sys_clock_set_timeout+0x60>)
   1eb8e:	9001      	str	r0, [sp, #4]
   1eb90:	9100      	str	r1, [sp, #0]
   1eb92:	f143 0300 	adc.w	r3, r3, #0
   1eb96:	f7ff fe95 	bl	1e8c4 <compare_set>
}
   1eb9a:	b002      	add	sp, #8
   1eb9c:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1eb9e:	4804      	ldr	r0, [pc, #16]	; (1ebb0 <sys_clock_set_timeout+0x5c>)
   1eba0:	e7e0      	b.n	1eb64 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1eba2:	2400      	movs	r4, #0
   1eba4:	e7df      	b.n	1eb66 <sys_clock_set_timeout+0x12>
   1eba6:	4c02      	ldr	r4, [pc, #8]	; (1ebb0 <sys_clock_set_timeout+0x5c>)
   1eba8:	e7dd      	b.n	1eb66 <sys_clock_set_timeout+0x12>
   1ebaa:	bf00      	nop
   1ebac:	200021e8 	.word	0x200021e8
   1ebb0:	007fffff 	.word	0x007fffff
   1ebb4:	0001e7ad 	.word	0x0001e7ad

0001ebb8 <sys_clock_elapsed>:
{
   1ebb8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1ebba:	f7ff fe61 	bl	1e880 <z_nrf_rtc_timer_read>
   1ebbe:	4b02      	ldr	r3, [pc, #8]	; (1ebc8 <sys_clock_elapsed+0x10>)
   1ebc0:	681b      	ldr	r3, [r3, #0]
}
   1ebc2:	1ac0      	subs	r0, r0, r3
   1ebc4:	bd08      	pop	{r3, pc}
   1ebc6:	bf00      	nop
   1ebc8:	200021e8 	.word	0x200021e8

0001ebcc <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
   1ebcc:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   1ebd0:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1ebd2:	2801      	cmp	r0, #1
   1ebd4:	4b04      	ldr	r3, [pc, #16]	; (1ebe8 <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1ebd6:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   1ebda:	bf18      	it	ne
   1ebdc:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1ebe0:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   1ebe2:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
   1ebe6:	4770      	bx	lr
   1ebe8:	50000300 	.word	0x50000300

0001ebec <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
   1ebec:	b530      	push	{r4, r5, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   1ebee:	f400 5480 	and.w	r4, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ebf2:	2c00      	cmp	r4, #0
   1ebf4:	bf08      	it	eq
   1ebf6:	4615      	moveq	r5, r2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1ebf8:	ea4f 2303 	mov.w	r3, r3, lsl #8
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
   1ebfc:	f3c0 1281 	ubfx	r2, r0, #6, #2
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ec00:	bf1c      	itt	ne
   1ec02:	2501      	movne	r5, #1
   1ec04:	2100      	movne	r1, #0
    *p_pin = pin_number & 0x1F;
   1ec06:	f000 041f 	and.w	r4, r0, #31
        case 1: return NRF_P1;
   1ec0a:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1ec0e:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
        case 1: return NRF_P1;
   1ec12:	4806      	ldr	r0, [pc, #24]	; (1ec2c <nrf_pin_configure+0x40>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1ec14:	ea42 0201 	orr.w	r2, r2, r1
        case 1: return NRF_P1;
   1ec18:	bf08      	it	eq
   1ec1a:	f04f 40a0 	moveq.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1ec1e:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1ec22:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   1ec26:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
		     NRF_GPIO_PIN_NOSENSE);
}
   1ec2a:	bd30      	pop	{r4, r5, pc}
   1ec2c:	50000300 	.word	0x50000300

0001ec30 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
   1ec30:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   1ec34:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1ec36:	2801      	cmp	r0, #1
   1ec38:	4b04      	ldr	r3, [pc, #16]	; (1ec4c <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ec3a:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   1ec3e:	bf18      	it	ne
   1ec40:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ec44:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   1ec46:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   1ec4a:	4770      	bx	lr
   1ec4c:	50000300 	.word	0x50000300

0001ec50 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1ec50:	4602      	mov	r2, r0
   1ec52:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1ec54:	4801      	ldr	r0, [pc, #4]	; (1ec5c <multithreading_lock_acquire+0xc>)
   1ec56:	f002 ba79 	b.w	2114c <z_impl_k_mutex_lock>
   1ec5a:	bf00      	nop
   1ec5c:	20000990 	.word	0x20000990

0001ec60 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1ec60:	4801      	ldr	r0, [pc, #4]	; (1ec68 <multithreading_lock_release+0x8>)
   1ec62:	f002 baeb 	b.w	2123c <z_impl_k_mutex_unlock>
   1ec66:	bf00      	nop
   1ec68:	20000990 	.word	0x20000990

0001ec6c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1ec6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   1ec6e:	f7f4 fa0b 	bl	13088 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1ec72:	4b07      	ldr	r3, [pc, #28]	; (1ec90 <k_sys_fatal_error_handler+0x24>)
   1ec74:	9305      	str	r3, [sp, #20]
   1ec76:	2302      	movs	r3, #2
   1ec78:	9304      	str	r3, [sp, #16]
   1ec7a:	4806      	ldr	r0, [pc, #24]	; (1ec94 <k_sys_fatal_error_handler+0x28>)
   1ec7c:	2300      	movs	r3, #0
   1ec7e:	aa04      	add	r2, sp, #16
   1ec80:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ec84:	f7f4 fae8 	bl	13258 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   1ec88:	2000      	movs	r0, #0
   1ec8a:	f7f5 ffbf 	bl	14c0c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1ec8e:	bf00      	nop
   1ec90:	0002e048 	.word	0x0002e048
   1ec94:	0002ac50 	.word	0x0002ac50

0001ec98 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1ec98:	b598      	push	{r3, r4, r7, lr}
   1ec9a:	af00      	add	r7, sp, #0
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   1ec9c:	466c      	mov	r4, sp
   1ec9e:	b08a      	sub	sp, #40	; 0x28
   1eca0:	466a      	mov	r2, sp
   1eca2:	4b0c      	ldr	r3, [pc, #48]	; (1ecd4 <sdc_assertion_handler+0x3c>)
   1eca4:	61d1      	str	r1, [r2, #28]
   1eca6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ecaa:	2302      	movs	r3, #2
   1ecac:	f882 3020 	strb.w	r3, [r2, #32]
   1ecb0:	4b09      	ldr	r3, [pc, #36]	; (1ecd8 <sdc_assertion_handler+0x40>)
   1ecb2:	f842 3f10 	str.w	r3, [r2, #16]!
   1ecb6:	4809      	ldr	r0, [pc, #36]	; (1ecdc <sdc_assertion_handler+0x44>)
   1ecb8:	2300      	movs	r3, #0
   1ecba:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   1ecbe:	f7f4 facb 	bl	13258 <z_impl_z_log_msg_static_create>
   1ecc2:	46a5      	mov	sp, r4
	k_oops();
   1ecc4:	4040      	eors	r0, r0
   1ecc6:	f380 8811 	msr	BASEPRI, r0
   1ecca:	f04f 0003 	mov.w	r0, #3
   1ecce:	df02      	svc	2
}
   1ecd0:	46bd      	mov	sp, r7
   1ecd2:	bd98      	pop	{r3, r4, r7, pc}
   1ecd4:	0002e065 	.word	0x0002e065
   1ecd8:	01000004 	.word	0x01000004
   1ecdc:	0002acc0 	.word	0x0002acc0

0001ece0 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1ece0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1ece2:	4804      	ldr	r0, [pc, #16]	; (1ecf4 <hci_driver_init+0x14>)
   1ece4:	f7f7 fc62 	bl	165ac <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1ece8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   1ecec:	4802      	ldr	r0, [pc, #8]	; (1ecf8 <hci_driver_init+0x18>)
   1ecee:	f7e5 be5b 	b.w	49a8 <sdc_init>
   1ecf2:	bf00      	nop
   1ecf4:	0002b874 	.word	0x0002b874
   1ecf8:	0001ec99 	.word	0x0001ec99

0001ecfc <rand_prio_low_vector_get>:
{
   1ecfc:	b538      	push	{r3, r4, r5, lr}
   1ecfe:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1ed00:	4807      	ldr	r0, [pc, #28]	; (1ed20 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1ed02:	6883      	ldr	r3, [r0, #8]
   1ed04:	685d      	ldr	r5, [r3, #4]
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1ed06:	460a      	mov	r2, r1
   1ed08:	b135      	cbz	r5, 1ed18 <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1ed0a:	2300      	movs	r3, #0
   1ed0c:	4621      	mov	r1, r4
   1ed0e:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1ed10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1ed14:	b2c0      	uxtb	r0, r0
   1ed16:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1ed18:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ed1c:	e7f8      	b.n	1ed10 <rand_prio_low_vector_get+0x14>
   1ed1e:	bf00      	nop
   1ed20:	0002a8c8 	.word	0x0002a8c8

0001ed24 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1ed24:	4901      	ldr	r1, [pc, #4]	; (1ed2c <receive_signal_raise+0x8>)
   1ed26:	4802      	ldr	r0, [pc, #8]	; (1ed30 <receive_signal_raise+0xc>)
   1ed28:	f00b b9d0 	b.w	2a0cc <k_work_submit_to_queue>
   1ed2c:	20002e0c 	.word	0x20002e0c
   1ed30:	20002270 	.word	0x20002270

0001ed34 <rand_prio_low_vector_get_blocking>:
{
   1ed34:	b410      	push	{r4}
   1ed36:	4603      	mov	r3, r0
   1ed38:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   1ed3a:	4803      	ldr	r0, [pc, #12]	; (1ed48 <rand_prio_low_vector_get_blocking+0x14>)
   1ed3c:	6881      	ldr	r1, [r0, #8]
   1ed3e:	680c      	ldr	r4, [r1, #0]
   1ed40:	4619      	mov	r1, r3
   1ed42:	4623      	mov	r3, r4
}
   1ed44:	bc10      	pop	{r4}
   1ed46:	4718      	bx	r3
   1ed48:	0002a8c8 	.word	0x0002a8c8

0001ed4c <event_packet_process.constprop.0>:
static void event_packet_process(uint8_t *hci_buf)
   1ed4c:	b570      	push	{r4, r5, r6, lr}
	switch (hdr->evt) {
   1ed4e:	4e1a      	ldr	r6, [pc, #104]	; (1edb8 <event_packet_process.constprop.0+0x6c>)
   1ed50:	7830      	ldrb	r0, [r6, #0]
   1ed52:	283e      	cmp	r0, #62	; 0x3e
static void event_packet_process(uint8_t *hci_buf)
   1ed54:	b086      	sub	sp, #24
	switch (hdr->evt) {
   1ed56:	d019      	beq.n	1ed8c <event_packet_process.constprop.0+0x40>
   1ed58:	28ff      	cmp	r0, #255	; 0xff
   1ed5a:	d01e      	beq.n	1ed9a <event_packet_process.constprop.0+0x4e>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1ed5c:	f04f 32ff 	mov.w	r2, #4294967295
   1ed60:	f04f 33ff 	mov.w	r3, #4294967295
		switch (subevent) {
   1ed64:	2400      	movs	r4, #0
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1ed66:	4621      	mov	r1, r4
   1ed68:	f7f6 f9fe 	bl	15168 <bt_buf_get_evt>
	if (!evt_buf) {
   1ed6c:	4605      	mov	r5, r0
   1ed6e:	b9b8      	cbnz	r0, 1eda0 <event_packet_process.constprop.0+0x54>
		if (discardable) {
   1ed70:	b954      	cbnz	r4, 1ed88 <event_packet_process.constprop.0+0x3c>
		BT_ERR("No event buffer available");
   1ed72:	4b12      	ldr	r3, [pc, #72]	; (1edbc <event_packet_process.constprop.0+0x70>)
   1ed74:	9305      	str	r3, [sp, #20]
   1ed76:	2302      	movs	r3, #2
   1ed78:	9304      	str	r3, [sp, #16]
   1ed7a:	4811      	ldr	r0, [pc, #68]	; (1edc0 <event_packet_process.constprop.0+0x74>)
   1ed7c:	4623      	mov	r3, r4
   1ed7e:	aa04      	add	r2, sp, #16
   1ed80:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ed84:	f7f4 fa68 	bl	13258 <z_impl_z_log_msg_static_create>
}
   1ed88:	b006      	add	sp, #24
   1ed8a:	bd70      	pop	{r4, r5, r6, pc}
		switch (me->subevent) {
   1ed8c:	78b3      	ldrb	r3, [r6, #2]
   1ed8e:	2b02      	cmp	r3, #2
		switch (subevent) {
   1ed90:	d1e4      	bne.n	1ed5c <event_packet_process.constprop.0+0x10>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1ed92:	2200      	movs	r2, #0
   1ed94:	2300      	movs	r3, #0
		switch (subevent) {
   1ed96:	2401      	movs	r4, #1
   1ed98:	e7e5      	b.n	1ed66 <event_packet_process.constprop.0+0x1a>
   1ed9a:	78b3      	ldrb	r3, [r6, #2]
   1ed9c:	2b80      	cmp	r3, #128	; 0x80
   1ed9e:	e7f7      	b.n	1ed90 <event_packet_process.constprop.0+0x44>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1eda0:	7872      	ldrb	r2, [r6, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1eda2:	4905      	ldr	r1, [pc, #20]	; (1edb8 <event_packet_process.constprop.0+0x6c>)
   1eda4:	3202      	adds	r2, #2
   1eda6:	3008      	adds	r0, #8
   1eda8:	f00a f99a 	bl	290e0 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1edac:	4628      	mov	r0, r5
}
   1edae:	b006      	add	sp, #24
   1edb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_recv(evt_buf);
   1edb4:	f7f7 bbc4 	b.w	16540 <bt_recv>
   1edb8:	20003baf 	.word	0x20003baf
   1edbc:	0002e08a 	.word	0x0002e08a
   1edc0:	0002acc0 	.word	0x0002acc0

0001edc4 <hci_driver_open>:
{
   1edc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1edc8:	b08c      	sub	sp, #48	; 0x30
   1edca:	af00      	add	r7, sp, #0
		hci_ecdh_init();
   1edcc:	f000 fdb4 	bl	1f938 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   1edd0:	1d38      	adds	r0, r7, #4
   1edd2:	f7e5 fd4d 	bl	4870 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1edd6:	466c      	mov	r4, sp
   1edd8:	b088      	sub	sp, #32
   1edda:	466a      	mov	r2, sp
   1eddc:	4b61      	ldr	r3, [pc, #388]	; (1ef64 <hci_driver_open+0x1a0>)
   1edde:	6153      	str	r3, [r2, #20]
   1ede0:	4b61      	ldr	r3, [pc, #388]	; (1ef68 <hci_driver_open+0x1a4>)
   1ede2:	6193      	str	r3, [r2, #24]
   1ede4:	f04f 0802 	mov.w	r8, #2
   1ede8:	4b60      	ldr	r3, [pc, #384]	; (1ef6c <hci_driver_open+0x1a8>)
   1edea:	f882 801c 	strb.w	r8, [r2, #28]
   1edee:	f842 3f10 	str.w	r3, [r2, #16]!
   1edf2:	495f      	ldr	r1, [pc, #380]	; (1ef70 <hci_driver_open+0x1ac>)
   1edf4:	485f      	ldr	r0, [pc, #380]	; (1ef74 <hci_driver_open+0x1b0>)
   1edf6:	1d3b      	adds	r3, r7, #4
   1edf8:	f7f4 fa2e 	bl	13258 <z_impl_z_log_msg_static_create>
   1edfc:	46a5      	mov	sp, r4
			err = sdc_support_adv();
   1edfe:	f7e5 fe51 	bl	4aa4 <sdc_support_adv>
			if (err) {
   1ee02:	b128      	cbz	r0, 1ee10 <hci_driver_open+0x4c>
				return -ENOTSUP;
   1ee04:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1ee08:	3730      	adds	r7, #48	; 0x30
   1ee0a:	46bd      	mov	sp, r7
   1ee0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = sdc_support_peripheral();
   1ee10:	f7e5 fe7a 	bl	4b08 <sdc_support_peripheral>
		if (err) {
   1ee14:	2800      	cmp	r0, #0
   1ee16:	d1f5      	bne.n	1ee04 <hci_driver_open+0x40>
			err = sdc_support_dle_peripheral();
   1ee18:	f7e5 fe54 	bl	4ac4 <sdc_support_dle_peripheral>
			if (err) {
   1ee1c:	2800      	cmp	r0, #0
   1ee1e:	d1f1      	bne.n	1ee04 <hci_driver_open+0x40>
		err = sdc_support_le_2m_phy();
   1ee20:	f7e5 fe60 	bl	4ae4 <sdc_support_le_2m_phy>
		if (err) {
   1ee24:	2800      	cmp	r0, #0
   1ee26:	d1ed      	bne.n	1ee04 <hci_driver_open+0x40>
			err = sdc_support_phy_update_peripheral();
   1ee28:	f7e5 fe7e 	bl	4b28 <sdc_support_phy_update_peripheral>
			if (err) {
   1ee2c:	4605      	mov	r5, r0
   1ee2e:	2800      	cmp	r0, #0
   1ee30:	d1e8      	bne.n	1ee04 <hci_driver_open+0x40>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ee32:	f107 0418 	add.w	r4, r7, #24
   1ee36:	4622      	mov	r2, r4
   1ee38:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   1ee3a:	7638      	strb	r0, [r7, #24]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ee3c:	f7e5 fd26 	bl	488c <sdc_cfg_set>
	if (required_memory < 0) {
   1ee40:	2800      	cmp	r0, #0
   1ee42:	dbe1      	blt.n	1ee08 <hci_driver_open+0x44>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1ee44:	2601      	movs	r6, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ee46:	4622      	mov	r2, r4
   1ee48:	4641      	mov	r1, r8
   1ee4a:	4628      	mov	r0, r5
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1ee4c:	763e      	strb	r6, [r7, #24]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ee4e:	f7e5 fd1d 	bl	488c <sdc_cfg_set>
	if (required_memory < 0) {
   1ee52:	2800      	cmp	r0, #0
   1ee54:	dbd8      	blt.n	1ee08 <hci_driver_open+0x44>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1ee56:	4b48      	ldr	r3, [pc, #288]	; (1ef78 <hci_driver_open+0x1b4>)
   1ee58:	61bb      	str	r3, [r7, #24]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ee5a:	4622      	mov	r2, r4
   1ee5c:	2103      	movs	r1, #3
   1ee5e:	4628      	mov	r0, r5
   1ee60:	f7e5 fd14 	bl	488c <sdc_cfg_set>
	if (required_memory < 0) {
   1ee64:	2800      	cmp	r0, #0
   1ee66:	dbcf      	blt.n	1ee08 <hci_driver_open+0x44>
	cfg.event_length.event_length_us =
   1ee68:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ee6c:	4622      	mov	r2, r4
   1ee6e:	2104      	movs	r1, #4
   1ee70:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   1ee72:	61bb      	str	r3, [r7, #24]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ee74:	f7e5 fd0a 	bl	488c <sdc_cfg_set>
	if (required_memory < 0) {
   1ee78:	2800      	cmp	r0, #0
   1ee7a:	dbc5      	blt.n	1ee08 <hci_driver_open+0x44>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ee7c:	4622      	mov	r2, r4
   1ee7e:	2105      	movs	r1, #5
   1ee80:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1ee82:	763e      	strb	r6, [r7, #24]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ee84:	f7e5 fd02 	bl	488c <sdc_cfg_set>
	if (required_memory < 0) {
   1ee88:	2800      	cmp	r0, #0
   1ee8a:	dbbd      	blt.n	1ee08 <hci_driver_open+0x44>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1ee8c:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ee8e:	4622      	mov	r2, r4
   1ee90:	2107      	movs	r1, #7
   1ee92:	2000      	movs	r0, #0
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1ee94:	833b      	strh	r3, [r7, #24]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ee96:	f7e5 fcf9 	bl	488c <sdc_cfg_set>
		if (required_memory < 0) {
   1ee9a:	2800      	cmp	r0, #0
   1ee9c:	dbb4      	blt.n	1ee08 <hci_driver_open+0x44>
	if (required_memory > sizeof(sdc_mempool)) {
   1ee9e:	f240 7314 	movw	r3, #1812	; 0x714
   1eea2:	4298      	cmp	r0, r3
   1eea4:	dd19      	ble.n	1eeda <hci_driver_open+0x116>
		BT_ERR("Allocated memory too low: %u < %u",
   1eea6:	466c      	mov	r4, sp
   1eea8:	b088      	sub	sp, #32
   1eeaa:	466a      	mov	r2, sp
   1eeac:	4933      	ldr	r1, [pc, #204]	; (1ef7c <hci_driver_open+0x1b8>)
   1eeae:	61d0      	str	r0, [r2, #28]
   1eeb0:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1eeb4:	2304      	movs	r3, #4
   1eeb6:	f842 3f10 	str.w	r3, [r2, #16]!
   1eeba:	482e      	ldr	r0, [pc, #184]	; (1ef74 <hci_driver_open+0x1b0>)
   1eebc:	2300      	movs	r3, #0
   1eebe:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1eec2:	f7f4 f9c9 	bl	13258 <z_impl_z_log_msg_static_create>
   1eec6:	46a5      	mov	sp, r4
		k_panic();
   1eec8:	4040      	eors	r0, r0
   1eeca:	f380 8811 	msr	BASEPRI, r0
   1eece:	f04f 0004 	mov.w	r0, #4
   1eed2:	df02      	svc	2
		return -ENOMEM;
   1eed4:	f06f 000b 	mvn.w	r0, #11
   1eed8:	e796      	b.n	1ee08 <hci_driver_open+0x44>
   1eeda:	4829      	ldr	r0, [pc, #164]	; (1ef80 <hci_driver_open+0x1bc>)
   1eedc:	f00a fea1 	bl	29c22 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   1eee0:	4603      	mov	r3, r0
   1eee2:	b968      	cbnz	r0, 1ef00 <hci_driver_open+0x13c>
		BT_ERR("Entropy source device not ready");
   1eee4:	4a27      	ldr	r2, [pc, #156]	; (1ef84 <hci_driver_open+0x1c0>)
   1eee6:	62fa      	str	r2, [r7, #44]	; 0x2c
   1eee8:	2202      	movs	r2, #2
   1eeea:	62ba      	str	r2, [r7, #40]	; 0x28
   1eeec:	4821      	ldr	r0, [pc, #132]	; (1ef74 <hci_driver_open+0x1b0>)
   1eeee:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1eef2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1eef6:	f7f4 f9af 	bl	13258 <z_impl_z_log_msg_static_create>
		return -ENODEV;
   1eefa:	f06f 0012 	mvn.w	r0, #18
   1eefe:	e783      	b.n	1ee08 <hci_driver_open+0x44>
	sdc_rand_source_t rand_functions = {
   1ef00:	4b21      	ldr	r3, [pc, #132]	; (1ef88 <hci_driver_open+0x1c4>)
   1ef02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1ef06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1ef0a:	4620      	mov	r0, r4
   1ef0c:	f7e5 fe5e 	bl	4bcc <sdc_rand_source_register>
	if (err) {
   1ef10:	b190      	cbz	r0, 1ef38 <hci_driver_open+0x174>
		BT_ERR("Failed to register rand source (%d)", err);
   1ef12:	466c      	mov	r4, sp
   1ef14:	b088      	sub	sp, #32
   1ef16:	466a      	mov	r2, sp
   1ef18:	4b1c      	ldr	r3, [pc, #112]	; (1ef8c <hci_driver_open+0x1c8>)
   1ef1a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ef1e:	2303      	movs	r3, #3
   1ef20:	f842 3f10 	str.w	r3, [r2, #16]!
   1ef24:	4813      	ldr	r0, [pc, #76]	; (1ef74 <hci_driver_open+0x1b0>)
   1ef26:	2300      	movs	r3, #0
   1ef28:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ef2c:	f7f4 f994 	bl	13258 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1ef30:	f06f 0015 	mvn.w	r0, #21
   1ef34:	46a5      	mov	sp, r4
   1ef36:	e767      	b.n	1ee08 <hci_driver_open+0x44>
	k_work_init(&receive_work, receive_work_handler);
   1ef38:	4915      	ldr	r1, [pc, #84]	; (1ef90 <hci_driver_open+0x1cc>)
   1ef3a:	4816      	ldr	r0, [pc, #88]	; (1ef94 <hci_driver_open+0x1d0>)
   1ef3c:	f00b f899 	bl	2a072 <k_work_init>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1ef40:	f04f 30ff 	mov.w	r0, #4294967295
   1ef44:	f04f 31ff 	mov.w	r1, #4294967295
   1ef48:	f7ff fe82 	bl	1ec50 <multithreading_lock_acquire>
	if (!err) {
   1ef4c:	4604      	mov	r4, r0
   1ef4e:	b930      	cbnz	r0, 1ef5e <hci_driver_open+0x19a>
		err = sdc_enable(hci_driver_receive_process, sdc_mempool);
   1ef50:	4911      	ldr	r1, [pc, #68]	; (1ef98 <hci_driver_open+0x1d4>)
   1ef52:	4812      	ldr	r0, [pc, #72]	; (1ef9c <hci_driver_open+0x1d8>)
   1ef54:	f7e5 fd00 	bl	4958 <sdc_enable>
   1ef58:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1ef5a:	f7ff fe81 	bl	1ec60 <multithreading_lock_release>
	if (err < 0) {
   1ef5e:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1ef62:	e751      	b.n	1ee08 <hci_driver_open+0x44>
   1ef64:	0002cabb 	.word	0x0002cabb
   1ef68:	0002e0a4 	.word	0x0002e0a4
   1ef6c:	01000003 	.word	0x01000003
   1ef70:	00a01ac0 	.word	0x00a01ac0
   1ef74:	0002acc0 	.word	0x0002acc0
   1ef78:	02031b1b 	.word	0x02031b1b
   1ef7c:	0002e0cb 	.word	0x0002e0cb
   1ef80:	0002a8c8 	.word	0x0002a8c8
   1ef84:	0002e0ed 	.word	0x0002e0ed
   1ef88:	0002afc8 	.word	0x0002afc8
   1ef8c:	0002e10d 	.word	0x0002e10d
   1ef90:	0002988d 	.word	0x0002988d
   1ef94:	20002e0c 	.word	0x20002e0c
   1ef98:	20003bf8 	.word	0x20003bf8
   1ef9c:	0001f001 	.word	0x0001f001

0001efa0 <data_packet_process.part.0>:
static void data_packet_process(uint8_t *hci_buf)
   1efa0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_ERR("No data buffer available");
   1efa2:	4b07      	ldr	r3, [pc, #28]	; (1efc0 <data_packet_process.part.0+0x20>)
   1efa4:	9305      	str	r3, [sp, #20]
   1efa6:	2302      	movs	r3, #2
   1efa8:	9304      	str	r3, [sp, #16]
   1efaa:	4806      	ldr	r0, [pc, #24]	; (1efc4 <data_packet_process.part.0+0x24>)
   1efac:	2300      	movs	r3, #0
   1efae:	aa04      	add	r2, sp, #16
   1efb0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1efb4:	f7f4 f950 	bl	13258 <z_impl_z_log_msg_static_create>
}
   1efb8:	b007      	add	sp, #28
   1efba:	f85d fb04 	ldr.w	pc, [sp], #4
   1efbe:	bf00      	nop
   1efc0:	0002e131 	.word	0x0002e131
   1efc4:	0002acc0 	.word	0x0002acc0

0001efc8 <data_packet_process.constprop.0>:
static void data_packet_process(uint8_t *hci_buf)
   1efc8:	b510      	push	{r4, lr}
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1efca:	f04f 32ff 	mov.w	r2, #4294967295
   1efce:	f04f 33ff 	mov.w	r3, #4294967295
   1efd2:	2003      	movs	r0, #3
   1efd4:	f7f6 f89e 	bl	15114 <bt_buf_get_rx>
	if (!data_buf) {
   1efd8:	4604      	mov	r4, r0
   1efda:	b918      	cbnz	r0, 1efe4 <data_packet_process.constprop.0+0x1c>
}
   1efdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1efe0:	f7ff bfde 	b.w	1efa0 <data_packet_process.part.0>
	len = sys_le16_to_cpu(hdr->len);
   1efe4:	4905      	ldr	r1, [pc, #20]	; (1effc <data_packet_process.constprop.0+0x34>)
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1efe6:	884a      	ldrh	r2, [r1, #2]
   1efe8:	3008      	adds	r0, #8
   1efea:	3204      	adds	r2, #4
   1efec:	f00a f878 	bl	290e0 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1eff0:	4620      	mov	r0, r4
}
   1eff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_recv(data_buf);
   1eff6:	f7f7 baa3 	b.w	16540 <bt_recv>
   1effa:	bf00      	nop
   1effc:	20003baf 	.word	0x20003baf

0001f000 <hci_driver_receive_process>:
{
   1f000:	b573      	push	{r0, r1, r4, r5, r6, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f002:	f04f 30ff 	mov.w	r0, #4294967295
   1f006:	f04f 31ff 	mov.w	r1, #4294967295
   1f00a:	f7ff fe21 	bl	1ec50 <multithreading_lock_acquire>
	if (!errcode) {
   1f00e:	b1c0      	cbz	r0, 1f042 <hci_driver_receive_process+0x42>
		return false;
   1f010:	2600      	movs	r6, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f012:	f04f 30ff 	mov.w	r0, #4294967295
   1f016:	f04f 31ff 	mov.w	r1, #4294967295
   1f01a:	f7ff fe19 	bl	1ec50 <multithreading_lock_acquire>
	if (!errcode) {
   1f01e:	b1e0      	cbz	r0, 1f05a <hci_driver_receive_process+0x5a>
		return false;
   1f020:	2500      	movs	r5, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f022:	f04f 30ff 	mov.w	r0, #4294967295
   1f026:	f04f 31ff 	mov.w	r1, #4294967295
   1f02a:	f7ff fe11 	bl	1ec50 <multithreading_lock_acquire>
	if (!errcode) {
   1f02e:	b300      	cbz	r0, 1f072 <hci_driver_receive_process+0x72>
		return false;
   1f030:	2300      	movs	r3, #0
	if (received_evt || received_data || received_msg) {
   1f032:	b90e      	cbnz	r6, 1f038 <hci_driver_receive_process+0x38>
   1f034:	b905      	cbnz	r5, 1f038 <hci_driver_receive_process+0x38>
   1f036:	b39b      	cbz	r3, 1f0a0 <hci_driver_receive_process+0xa0>
}
   1f038:	b002      	add	sp, #8
   1f03a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		receive_signal_raise();
   1f03e:	f7ff be71 	b.w	1ed24 <receive_signal_raise>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1f042:	4818      	ldr	r0, [pc, #96]	; (1f0a4 <hci_driver_receive_process+0xa4>)
   1f044:	f000 fb3e 	bl	1f6c4 <hci_internal_evt_get>
   1f048:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f04a:	f7ff fe09 	bl	1ec60 <multithreading_lock_release>
	if (errcode) {
   1f04e:	2c00      	cmp	r4, #0
   1f050:	d1de      	bne.n	1f010 <hci_driver_receive_process+0x10>
	event_packet_process(p_hci_buffer);
   1f052:	f7ff fe7b 	bl	1ed4c <event_packet_process.constprop.0>
	return true;
   1f056:	2601      	movs	r6, #1
   1f058:	e7db      	b.n	1f012 <hci_driver_receive_process+0x12>
		errcode = sdc_hci_data_get(p_hci_buffer);
   1f05a:	4812      	ldr	r0, [pc, #72]	; (1f0a4 <hci_driver_receive_process+0xa4>)
   1f05c:	f7ee fb21 	bl	d6a2 <sdc_hci_data_get>
   1f060:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f062:	f7ff fdfd 	bl	1ec60 <multithreading_lock_release>
	if (errcode) {
   1f066:	2c00      	cmp	r4, #0
   1f068:	d1da      	bne.n	1f020 <hci_driver_receive_process+0x20>
	data_packet_process(p_hci_buffer);
   1f06a:	f7ff ffad 	bl	1efc8 <data_packet_process.constprop.0>
	return true;
   1f06e:	2501      	movs	r5, #1
   1f070:	e7d7      	b.n	1f022 <hci_driver_receive_process+0x22>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1f072:	480c      	ldr	r0, [pc, #48]	; (1f0a4 <hci_driver_receive_process+0xa4>)
   1f074:	f10d 0107 	add.w	r1, sp, #7
   1f078:	f000 fb36 	bl	1f6e8 <hci_internal_msg_get>
   1f07c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f07e:	f7ff fdef 	bl	1ec60 <multithreading_lock_release>
	if (errcode) {
   1f082:	2c00      	cmp	r4, #0
   1f084:	d1d4      	bne.n	1f030 <hci_driver_receive_process+0x30>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1f086:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f08a:	2b04      	cmp	r3, #4
   1f08c:	d103      	bne.n	1f096 <hci_driver_receive_process+0x96>
		event_packet_process(p_hci_buffer);
   1f08e:	f7ff fe5d 	bl	1ed4c <event_packet_process.constprop.0>
	return true;
   1f092:	2301      	movs	r3, #1
   1f094:	e7cd      	b.n	1f032 <hci_driver_receive_process+0x32>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1f096:	2b02      	cmp	r3, #2
   1f098:	d1ca      	bne.n	1f030 <hci_driver_receive_process+0x30>
		data_packet_process(p_hci_buffer);
   1f09a:	f7ff ff95 	bl	1efc8 <data_packet_process.constprop.0>
   1f09e:	e7f8      	b.n	1f092 <hci_driver_receive_process+0x92>
}
   1f0a0:	b002      	add	sp, #8
   1f0a2:	bd70      	pop	{r4, r5, r6, pc}
   1f0a4:	20003baf 	.word	0x20003baf

0001f0a8 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1f0a8:	b538      	push	{r3, r4, r5, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1f0aa:	4c8a      	ldr	r4, [pc, #552]	; (1f2d4 <hci_internal_cmd_put+0x22c>)
   1f0ac:	7823      	ldrb	r3, [r4, #0]
   1f0ae:	2b00      	cmp	r3, #0
   1f0b0:	f040 8302 	bne.w	1f6b8 <hci_internal_cmd_put+0x610>
	return ((uint16_t)src[1] << 8) | src[0];
   1f0b4:	8805      	ldrh	r5, [r0, #0]
	switch (BT_OGF(opcode)) {
   1f0b6:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1f0ba:	b22b      	sxth	r3, r5
   1f0bc:	ea4f 2295 	mov.w	r2, r5, lsr #10
   1f0c0:	d20d      	bcs.n	1f0de <hci_internal_cmd_put+0x36>
   1f0c2:	b17a      	cbz	r2, 1f0e4 <hci_internal_cmd_put+0x3c>
   1f0c4:	3a01      	subs	r2, #1
   1f0c6:	2a07      	cmp	r2, #7
   1f0c8:	d80c      	bhi.n	1f0e4 <hci_internal_cmd_put+0x3c>
   1f0ca:	e8df f012 	tbh	[pc, r2, lsl #1]
   1f0ce:	000d      	.short	0x000d
   1f0d0:	0029000b 	.word	0x0029000b
   1f0d4:	000b005d 	.word	0x000b005d
   1f0d8:	000b000b 	.word	0x000b000b
   1f0dc:	0107      	.short	0x0107
   1f0de:	2a3f      	cmp	r2, #63	; 0x3f
   1f0e0:	f000 825e 	beq.w	1f5a0 <hci_internal_cmd_put+0x4f8>
	switch (opcode)	{
   1f0e4:	2001      	movs	r0, #1
   1f0e6:	e00e      	b.n	1f106 <hci_internal_cmd_put+0x5e>
	switch (opcode)	{
   1f0e8:	f240 4206 	movw	r2, #1030	; 0x406
   1f0ec:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f0ee:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1f0f2:	d006      	beq.n	1f102 <hci_internal_cmd_put+0x5a>
   1f0f4:	f240 421d 	movw	r2, #1053	; 0x41d
   1f0f8:	4293      	cmp	r3, r2
   1f0fa:	d1f3      	bne.n	1f0e4 <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1f0fc:	f7ee fc12 	bl	d924 <sdc_hci_cmd_lc_read_remote_version_information>
   1f100:	e001      	b.n	1f106 <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1f102:	f7ee fc0d 	bl	d920 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1f106:	230f      	movs	r3, #15
   1f108:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1f10a:	2304      	movs	r3, #4
   1f10c:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1f10e:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1f110:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1f112:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1f114:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1f118:	2301      	movs	r3, #1
   1f11a:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1f11c:	2000      	movs	r0, #0
}
   1f11e:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   1f120:	f640 4263 	movw	r2, #3171	; 0xc63
   1f124:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f126:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1f12a:	d025      	beq.n	1f178 <hci_internal_cmd_put+0xd0>
   1f12c:	dc0f      	bgt.n	1f14e <hci_internal_cmd_put+0xa6>
   1f12e:	f640 4203 	movw	r2, #3075	; 0xc03
   1f132:	4293      	cmp	r3, r2
   1f134:	d018      	beq.n	1f168 <hci_internal_cmd_put+0xc0>
   1f136:	f640 422d 	movw	r2, #3117	; 0xc2d
   1f13a:	4293      	cmp	r3, r2
   1f13c:	d017      	beq.n	1f16e <hci_internal_cmd_put+0xc6>
   1f13e:	f640 4201 	movw	r2, #3073	; 0xc01
   1f142:	4293      	cmp	r3, r2
   1f144:	d1ce      	bne.n	1f0e4 <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1f146:	f7ee fadd 	bl	d704 <sdc_hci_cmd_cb_set_event_mask>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1f14a:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1f14c:	e0be      	b.n	1f2cc <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1f14e:	f640 427b 	movw	r2, #3195	; 0xc7b
   1f152:	4293      	cmp	r3, r2
   1f154:	d013      	beq.n	1f17e <hci_internal_cmd_put+0xd6>
   1f156:	f640 427c 	movw	r2, #3196	; 0xc7c
   1f15a:	4293      	cmp	r3, r2
   1f15c:	d1c2      	bne.n	1f0e4 <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1f15e:	495e      	ldr	r1, [pc, #376]	; (1f2d8 <hci_internal_cmd_put+0x230>)
   1f160:	f7ee fada 	bl	d718 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1f164:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1f166:	e0b1      	b.n	1f2cc <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_reset();
   1f168:	f7e5 fe1e 	bl	4da8 <sdc_hci_cmd_cb_reset>
   1f16c:	e7ed      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1f16e:	495a      	ldr	r1, [pc, #360]	; (1f2d8 <hci_internal_cmd_put+0x230>)
   1f170:	f7ee fac6 	bl	d700 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1f174:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1f176:	e0a9      	b.n	1f2cc <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1f178:	f7ee fac9 	bl	d70e <sdc_hci_cmd_cb_set_event_mask_page_2>
   1f17c:	e7e5      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1f17e:	4956      	ldr	r1, [pc, #344]	; (1f2d8 <hci_internal_cmd_put+0x230>)
   1f180:	f7ee fabc 	bl	d6fc <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1f184:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1f186:	e0a1      	b.n	1f2cc <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1f188:	f5a5 5380 	sub.w	r3, r5, #4096	; 0x1000
   1f18c:	3b01      	subs	r3, #1
   1f18e:	2b08      	cmp	r3, #8
   1f190:	d8a8      	bhi.n	1f0e4 <hci_internal_cmd_put+0x3c>
   1f192:	a201      	add	r2, pc, #4	; (adr r2, 1f198 <hci_internal_cmd_put+0xf0>)
   1f194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f198:	0001f1bd 	.word	0x0001f1bd
   1f19c:	0001f1c7 	.word	0x0001f1c7
   1f1a0:	0001f2ad 	.word	0x0001f2ad
   1f1a4:	0001f0e5 	.word	0x0001f0e5
   1f1a8:	0001f0e5 	.word	0x0001f0e5
   1f1ac:	0001f0e5 	.word	0x0001f0e5
   1f1b0:	0001f0e5 	.word	0x0001f0e5
   1f1b4:	0001f0e5 	.word	0x0001f0e5
   1f1b8:	0001f2c5 	.word	0x0001f2c5
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1f1bc:	4846      	ldr	r0, [pc, #280]	; (1f2d8 <hci_internal_cmd_put+0x230>)
   1f1be:	f7ee fb64 	bl	d88a <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1f1c2:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1f1c4:	e082      	b.n	1f2cc <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1f1c6:	4844      	ldr	r0, [pc, #272]	; (1f2d8 <hci_internal_cmd_put+0x230>)
   1f1c8:	222f      	movs	r2, #47	; 0x2f
   1f1ca:	2100      	movs	r1, #0
   1f1cc:	f007 fdaf 	bl	26d2e <memset>
	cmds->hci_disconnect = 1;
   1f1d0:	79e3      	ldrb	r3, [r4, #7]
   1f1d2:	f043 0320 	orr.w	r3, r3, #32
   1f1d6:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1f1d8:	7a63      	ldrb	r3, [r4, #9]
   1f1da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1f1de:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1f1e0:	7b23      	ldrb	r3, [r4, #12]
   1f1e2:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1f1e6:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1f1e8:	7c63      	ldrb	r3, [r4, #17]
   1f1ea:	f043 0304 	orr.w	r3, r3, #4
   1f1ee:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1f1f0:	7d63      	ldrb	r3, [r4, #21]
   1f1f2:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1f1f6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1f1fa:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1f1fc:	7da3      	ldrb	r3, [r4, #22]
   1f1fe:	f043 0302 	orr.w	r3, r3, #2
   1f202:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1f204:	7f63      	ldrb	r3, [r4, #29]
   1f206:	f043 0304 	orr.w	r3, r3, #4
   1f20a:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1f20c:	f894 3020 	ldrb.w	r3, [r4, #32]
   1f210:	f063 0308 	orn	r3, r3, #8
   1f214:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1f218:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1f21c:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1f220:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1f224:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1f228:	f063 030c 	orn	r3, r3, #12
   1f22c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   1f230:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1f234:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   1f238:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   1f23c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1f240:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1f244:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1f248:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1f24c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1f250:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1f254:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1f258:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1f25c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1f260:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   1f264:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   1f268:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   1f26c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1f270:	f063 0301 	orn	r3, r3, #1
   1f274:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1f278:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1f27c:	f043 0301 	orr.w	r3, r3, #1
   1f280:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1f284:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1f288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1f28c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   1f290:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1f294:	f043 0304 	orr.w	r3, r3, #4
   1f298:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->hci_le_generate_dhkey_v2 = 1;
   1f29c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1f2a0:	f043 0304 	orr.w	r3, r3, #4
   1f2a4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		return 0;
   1f2a8:	2344      	movs	r3, #68	; 0x44
   1f2aa:	e0f6      	b.n	1f49a <hci_internal_cmd_put+0x3f2>
	memset(features, 0, sizeof(*features));
   1f2ac:	480a      	ldr	r0, [pc, #40]	; (1f2d8 <hci_internal_cmd_put+0x230>)
   1f2ae:	2208      	movs	r2, #8
   1f2b0:	2100      	movs	r1, #0
   1f2b2:	f007 fd3c 	bl	26d2e <memset>
	features->bdedr_not_supported = 1;
   1f2b6:	7ae3      	ldrb	r3, [r4, #11]
   1f2b8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1f2bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   1f2c0:	72e3      	strb	r3, [r4, #11]
   1f2c2:	e0e9      	b.n	1f498 <hci_internal_cmd_put+0x3f0>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1f2c4:	4804      	ldr	r0, [pc, #16]	; (1f2d8 <hci_internal_cmd_put+0x230>)
   1f2c6:	f7ee fade 	bl	d886 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1f2ca:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   1f2cc:	2801      	cmp	r0, #1
   1f2ce:	f040 80e5 	bne.w	1f49c <hci_internal_cmd_put+0x3f4>
   1f2d2:	e718      	b.n	1f106 <hci_internal_cmd_put+0x5e>
   1f2d4:	2000430c 	.word	0x2000430c
   1f2d8:	20004313 	.word	0x20004313
	switch (opcode)	{
   1f2dc:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   1f2e0:	3b01      	subs	r3, #1
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f2e2:	3003      	adds	r0, #3
	switch (opcode)	{
   1f2e4:	2b5d      	cmp	r3, #93	; 0x5d
   1f2e6:	f63f aefd 	bhi.w	1f0e4 <hci_internal_cmd_put+0x3c>
   1f2ea:	a201      	add	r2, pc, #4	; (adr r2, 1f2f0 <hci_internal_cmd_put+0x248>)
   1f2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f2f0:	0001f469 	.word	0x0001f469
   1f2f4:	0001f46f 	.word	0x0001f46f
   1f2f8:	0001f477 	.word	0x0001f477
   1f2fc:	0001f0e5 	.word	0x0001f0e5
   1f300:	0001f4ad 	.word	0x0001f4ad
   1f304:	0001f4b3 	.word	0x0001f4b3
   1f308:	0001f4b9 	.word	0x0001f4b9
   1f30c:	0001f4c3 	.word	0x0001f4c3
   1f310:	0001f4c9 	.word	0x0001f4c9
   1f314:	0001f4cf 	.word	0x0001f4cf
   1f318:	0001f0e5 	.word	0x0001f0e5
   1f31c:	0001f0e5 	.word	0x0001f0e5
   1f320:	0001f0e5 	.word	0x0001f0e5
   1f324:	0001f0e5 	.word	0x0001f0e5
   1f328:	0001f4d5 	.word	0x0001f4d5
   1f32c:	0001f4dd 	.word	0x0001f4dd
   1f330:	0001f4e3 	.word	0x0001f4e3
   1f334:	0001f4e9 	.word	0x0001f4e9
   1f338:	0001f0e5 	.word	0x0001f0e5
   1f33c:	0001f0e5 	.word	0x0001f0e5
   1f340:	0001f4ef 	.word	0x0001f4ef
   1f344:	0001f4f9 	.word	0x0001f4f9
   1f348:	0001f4ff 	.word	0x0001f4ff
   1f34c:	0001f509 	.word	0x0001f509
   1f350:	0001f0e5 	.word	0x0001f0e5
   1f354:	0001f511 	.word	0x0001f511
   1f358:	0001f519 	.word	0x0001f519
   1f35c:	0001f521 	.word	0x0001f521
   1f360:	0001f0e5 	.word	0x0001f0e5
   1f364:	0001f0e5 	.word	0x0001f0e5
   1f368:	0001f0e5 	.word	0x0001f0e5
   1f36c:	0001f0e5 	.word	0x0001f0e5
   1f370:	0001f0e5 	.word	0x0001f0e5
   1f374:	0001f529 	.word	0x0001f529
   1f378:	0001f531 	.word	0x0001f531
   1f37c:	0001f539 	.word	0x0001f539
   1f380:	0001f53f 	.word	0x0001f53f
   1f384:	0001f545 	.word	0x0001f545
   1f388:	0001f551 	.word	0x0001f551
   1f38c:	0001f557 	.word	0x0001f557
   1f390:	0001f55d 	.word	0x0001f55d
   1f394:	0001f563 	.word	0x0001f563
   1f398:	0001f0e5 	.word	0x0001f0e5
   1f39c:	0001f0e5 	.word	0x0001f0e5
   1f3a0:	0001f56b 	.word	0x0001f56b
   1f3a4:	0001f571 	.word	0x0001f571
   1f3a8:	0001f577 	.word	0x0001f577
   1f3ac:	0001f57f 	.word	0x0001f57f
   1f3b0:	0001f587 	.word	0x0001f587
   1f3b4:	0001f58d 	.word	0x0001f58d
   1f3b8:	0001f0e5 	.word	0x0001f0e5
   1f3bc:	0001f0e5 	.word	0x0001f0e5
   1f3c0:	0001f0e5 	.word	0x0001f0e5
   1f3c4:	0001f0e5 	.word	0x0001f0e5
   1f3c8:	0001f0e5 	.word	0x0001f0e5
   1f3cc:	0001f0e5 	.word	0x0001f0e5
   1f3d0:	0001f0e5 	.word	0x0001f0e5
   1f3d4:	0001f0e5 	.word	0x0001f0e5
   1f3d8:	0001f0e5 	.word	0x0001f0e5
   1f3dc:	0001f0e5 	.word	0x0001f0e5
   1f3e0:	0001f0e5 	.word	0x0001f0e5
   1f3e4:	0001f0e5 	.word	0x0001f0e5
   1f3e8:	0001f0e5 	.word	0x0001f0e5
   1f3ec:	0001f0e5 	.word	0x0001f0e5
   1f3f0:	0001f0e5 	.word	0x0001f0e5
   1f3f4:	0001f0e5 	.word	0x0001f0e5
   1f3f8:	0001f0e5 	.word	0x0001f0e5
   1f3fc:	0001f0e5 	.word	0x0001f0e5
   1f400:	0001f0e5 	.word	0x0001f0e5
   1f404:	0001f0e5 	.word	0x0001f0e5
   1f408:	0001f0e5 	.word	0x0001f0e5
   1f40c:	0001f0e5 	.word	0x0001f0e5
   1f410:	0001f0e5 	.word	0x0001f0e5
   1f414:	0001f0e5 	.word	0x0001f0e5
   1f418:	0001f593 	.word	0x0001f593
   1f41c:	0001f0e5 	.word	0x0001f0e5
   1f420:	0001f0e5 	.word	0x0001f0e5
   1f424:	0001f59b 	.word	0x0001f59b
   1f428:	0001f0e5 	.word	0x0001f0e5
   1f42c:	0001f0e5 	.word	0x0001f0e5
   1f430:	0001f0e5 	.word	0x0001f0e5
   1f434:	0001f0e5 	.word	0x0001f0e5
   1f438:	0001f0e5 	.word	0x0001f0e5
   1f43c:	0001f0e5 	.word	0x0001f0e5
   1f440:	0001f0e5 	.word	0x0001f0e5
   1f444:	0001f0e5 	.word	0x0001f0e5
   1f448:	0001f0e5 	.word	0x0001f0e5
   1f44c:	0001f0e5 	.word	0x0001f0e5
   1f450:	0001f0e5 	.word	0x0001f0e5
   1f454:	0001f0e5 	.word	0x0001f0e5
   1f458:	0001f0e5 	.word	0x0001f0e5
   1f45c:	0001f0e5 	.word	0x0001f0e5
   1f460:	0001f0e5 	.word	0x0001f0e5
   1f464:	0001f54b 	.word	0x0001f54b
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1f468:	f7ee fa49 	bl	d8fe <sdc_hci_cmd_le_set_event_mask>
   1f46c:	e66d      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1f46e:	4894      	ldr	r0, [pc, #592]	; (1f6c0 <hci_internal_cmd_put+0x618>)
   1f470:	f7ee fa23 	bl	d8ba <sdc_hci_cmd_le_read_buffer_size>
   1f474:	e67e      	b.n	1f174 <hci_internal_cmd_put+0xcc>
	memset(features, 0, sizeof(*features));
   1f476:	4892      	ldr	r0, [pc, #584]	; (1f6c0 <hci_internal_cmd_put+0x618>)
   1f478:	2205      	movs	r2, #5
   1f47a:	2100      	movs	r1, #0
   1f47c:	f007 fc57 	bl	26d2e <memset>
	features->le_encryption = 1;
   1f480:	79e3      	ldrb	r3, [r4, #7]
   1f482:	f023 037d 	bic.w	r3, r3, #125	; 0x7d
   1f486:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
   1f48a:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   1f48c:	7a23      	ldrb	r3, [r4, #8]
   1f48e:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1f492:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1f496:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1f498:	230c      	movs	r3, #12
		return 0;
   1f49a:	2000      	movs	r0, #0
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1f49c:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   1f49e:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1f4a0:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1f4a2:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1f4a4:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1f4a6:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1f4a8:	71a0      	strb	r0, [r4, #6]
}
   1f4aa:	e635      	b.n	1f118 <hci_internal_cmd_put+0x70>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1f4ac:	f7ee fa30 	bl	d910 <sdc_hci_cmd_le_set_random_address>
   1f4b0:	e64b      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1f4b2:	f7ee fa1e 	bl	d8f2 <sdc_hci_cmd_le_set_adv_params>
   1f4b6:	e648      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1f4b8:	4881      	ldr	r0, [pc, #516]	; (1f6c0 <hci_internal_cmd_put+0x618>)
   1f4ba:	f7ee f9fc 	bl	d8b6 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   1f4be:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1f4c0:	e704      	b.n	1f2cc <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1f4c2:	f7ee fa12 	bl	d8ea <sdc_hci_cmd_le_set_adv_data>
   1f4c6:	e640      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1f4c8:	f7ee fa26 	bl	d918 <sdc_hci_cmd_le_set_scan_response_data>
   1f4cc:	e63d      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1f4ce:	f7ee fa0e 	bl	d8ee <sdc_hci_cmd_le_set_adv_enable>
   1f4d2:	e63a      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1f4d4:	487a      	ldr	r0, [pc, #488]	; (1f6c0 <hci_internal_cmd_put+0x618>)
   1f4d6:	f7ee f9f4 	bl	d8c2 <sdc_hci_cmd_le_read_filter_accept_list_size>
   1f4da:	e7f0      	b.n	1f4be <hci_internal_cmd_put+0x416>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1f4dc:	f7ee f9db 	bl	d896 <sdc_hci_cmd_le_clear_filter_accept_list>
   1f4e0:	e633      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1f4e2:	f7ee f9d4 	bl	d88e <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   1f4e6:	e630      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1f4e8:	f7ee f9f9 	bl	d8de <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1f4ec:	e62d      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1f4ee:	4974      	ldr	r1, [pc, #464]	; (1f6c0 <hci_internal_cmd_put+0x618>)
   1f4f0:	f7ee f9e5 	bl	d8be <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1f4f4:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1f4f6:	e6e9      	b.n	1f2cc <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1f4f8:	f7ee f9e9 	bl	d8ce <sdc_hci_cmd_le_read_remote_features>
   1f4fc:	e603      	b.n	1f106 <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1f4fe:	4970      	ldr	r1, [pc, #448]	; (1f6c0 <hci_internal_cmd_put+0x618>)
   1f500:	f7ee f9cd 	bl	d89e <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1f504:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1f506:	e6e1      	b.n	1f2cc <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1f508:	486d      	ldr	r0, [pc, #436]	; (1f6c0 <hci_internal_cmd_put+0x618>)
   1f50a:	f7ee f9d2 	bl	d8b2 <sdc_hci_cmd_le_rand>
   1f50e:	e658      	b.n	1f1c2 <hci_internal_cmd_put+0x11a>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1f510:	496b      	ldr	r1, [pc, #428]	; (1f6c0 <hci_internal_cmd_put+0x618>)
   1f512:	f7ee f9ca 	bl	d8aa <sdc_hci_cmd_le_long_term_key_request_reply>
   1f516:	e625      	b.n	1f164 <hci_internal_cmd_put+0xbc>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1f518:	4969      	ldr	r1, [pc, #420]	; (1f6c0 <hci_internal_cmd_put+0x618>)
   1f51a:	f7ee f9c2 	bl	d8a2 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1f51e:	e621      	b.n	1f164 <hci_internal_cmd_put+0xbc>
	*buf = states1;
   1f520:	238f      	movs	r3, #143	; 0x8f
   1f522:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1f524:	23c0      	movs	r3, #192	; 0xc0
   1f526:	e6cb      	b.n	1f2c0 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1f528:	4965      	ldr	r1, [pc, #404]	; (1f6c0 <hci_internal_cmd_put+0x618>)
   1f52a:	f7ee f9e4 	bl	d8f6 <sdc_hci_cmd_le_set_data_length>
   1f52e:	e619      	b.n	1f164 <hci_internal_cmd_put+0xbc>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1f530:	4863      	ldr	r0, [pc, #396]	; (1f6c0 <hci_internal_cmd_put+0x618>)
   1f532:	f7ee f9d0 	bl	d8d6 <sdc_hci_cmd_le_read_suggested_default_data_length>
   1f536:	e625      	b.n	1f184 <hci_internal_cmd_put+0xdc>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1f538:	f7ee f9f0 	bl	d91c <sdc_hci_cmd_le_write_suggested_default_data_length>
   1f53c:	e605      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return hci_cmd_le_read_local_p256_public_key();
   1f53e:	f000 fa25 	bl	1f98c <hci_cmd_le_read_local_p256_public_key>
   1f542:	e5e0      	b.n	1f106 <hci_internal_cmd_put+0x5e>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   1f544:	f00a f9e3 	bl	2990e <hci_cmd_le_generate_dhkey>
   1f548:	e5dd      	b.n	1f106 <hci_internal_cmd_put+0x5e>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   1f54a:	f00a f9e3 	bl	29914 <hci_cmd_le_generate_dhkey_v2>
   1f54e:	e5fc      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   1f550:	f7ee f99f 	bl	d892 <sdc_hci_cmd_le_add_device_to_resolving_list>
   1f554:	e5f9      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   1f556:	f7ee f9c4 	bl	d8e2 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   1f55a:	e5f6      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_clear_resolving_list();
   1f55c:	f7ee f99d 	bl	d89a <sdc_hci_cmd_le_clear_resolving_list>
   1f560:	e5f3      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1f562:	4857      	ldr	r0, [pc, #348]	; (1f6c0 <hci_internal_cmd_put+0x618>)
   1f564:	f7ee f9b5 	bl	d8d2 <sdc_hci_cmd_le_read_resolving_list_size>
   1f568:	e7a9      	b.n	1f4be <hci_internal_cmd_put+0x416>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   1f56a:	f7ee f9bc 	bl	d8e6 <sdc_hci_cmd_le_set_address_resolution_enable>
   1f56e:	e5ec      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   1f570:	f7ee f9d0 	bl	d914 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   1f574:	e5e9      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1f576:	4852      	ldr	r0, [pc, #328]	; (1f6c0 <hci_internal_cmd_put+0x618>)
   1f578:	f7ee f9a5 	bl	d8c6 <sdc_hci_cmd_le_read_max_data_length>
   1f57c:	e621      	b.n	1f1c2 <hci_internal_cmd_put+0x11a>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1f57e:	4950      	ldr	r1, [pc, #320]	; (1f6c0 <hci_internal_cmd_put+0x618>)
   1f580:	f7ee f9a3 	bl	d8ca <sdc_hci_cmd_le_read_phy>
   1f584:	e5fe      	b.n	1f184 <hci_internal_cmd_put+0xdc>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1f586:	f7ee f9b8 	bl	d8fa <sdc_hci_cmd_le_set_default_phy>
   1f58a:	e5de      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1f58c:	f7ee f9bc 	bl	d908 <sdc_hci_cmd_le_set_phy>
   1f590:	e5b9      	b.n	1f106 <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1f592:	484b      	ldr	r0, [pc, #300]	; (1f6c0 <hci_internal_cmd_put+0x618>)
   1f594:	f7ee f9a1 	bl	d8da <sdc_hci_cmd_le_read_transmit_power>
   1f598:	e5e4      	b.n	1f164 <hci_internal_cmd_put+0xbc>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   1f59a:	f7ee f9b7 	bl	d90c <sdc_hci_cmd_le_set_privacy_mode>
   1f59e:	e5d4      	b.n	1f14a <hci_internal_cmd_put+0xa2>
	switch (opcode)	{
   1f5a0:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   1f5a4:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f5a6:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1f5aa:	d821      	bhi.n	1f5f0 <hci_internal_cmd_put+0x548>
   1f5ac:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1f5b0:	f43f ad98 	beq.w	1f0e4 <hci_internal_cmd_put+0x3c>
   1f5b4:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   1f5b8:	3b01      	subs	r3, #1
   1f5ba:	2b09      	cmp	r3, #9
   1f5bc:	f63f ad92 	bhi.w	1f0e4 <hci_internal_cmd_put+0x3c>
   1f5c0:	a201      	add	r2, pc, #4	; (adr r2, 1f5c8 <hci_internal_cmd_put+0x520>)
   1f5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f5c6:	bf00      	nop
   1f5c8:	0001f635 	.word	0x0001f635
   1f5cc:	0001f63f 	.word	0x0001f63f
   1f5d0:	0001f0e5 	.word	0x0001f0e5
   1f5d4:	0001f0e5 	.word	0x0001f0e5
   1f5d8:	0001f0e5 	.word	0x0001f0e5
   1f5dc:	0001f677 	.word	0x0001f677
   1f5e0:	0001f0e5 	.word	0x0001f0e5
   1f5e4:	0001f0e5 	.word	0x0001f0e5
   1f5e8:	0001f663 	.word	0x0001f663
   1f5ec:	0001f66d 	.word	0x0001f66d
   1f5f0:	f505 7340 	add.w	r3, r5, #768	; 0x300
   1f5f4:	b29b      	uxth	r3, r3
   1f5f6:	2b09      	cmp	r3, #9
   1f5f8:	f63f ad74 	bhi.w	1f0e4 <hci_internal_cmd_put+0x3c>
   1f5fc:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1f600:	2b09      	cmp	r3, #9
   1f602:	f63f ad6f 	bhi.w	1f0e4 <hci_internal_cmd_put+0x3c>
   1f606:	a201      	add	r2, pc, #4	; (adr r2, 1f60c <hci_internal_cmd_put+0x564>)
   1f608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f60c:	0001f67d 	.word	0x0001f67d
   1f610:	0001f695 	.word	0x0001f695
   1f614:	0001f69b 	.word	0x0001f69b
   1f618:	0001f6a1 	.word	0x0001f6a1
   1f61c:	0001f6a7 	.word	0x0001f6a7
   1f620:	0001f6ad 	.word	0x0001f6ad
   1f624:	0001f0e5 	.word	0x0001f0e5
   1f628:	0001f0e5 	.word	0x0001f0e5
   1f62c:	0001f0e5 	.word	0x0001f0e5
   1f630:	0001f6b3 	.word	0x0001f6b3
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1f634:	4822      	ldr	r0, [pc, #136]	; (1f6c0 <hci_internal_cmd_put+0x618>)
   1f636:	f7e5 fbcb 	bl	4dd0 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1f63a:	2310      	movs	r3, #16
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1f63c:	e646      	b.n	1f2cc <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1f63e:	4820      	ldr	r0, [pc, #128]	; (1f6c0 <hci_internal_cmd_put+0x618>)
   1f640:	2202      	movs	r2, #2
   1f642:	2100      	movs	r1, #0
   1f644:	f007 fb73 	bl	26d2e <memset>
	cmds->read_version_info = 1;
   1f648:	79e3      	ldrb	r3, [r4, #7]
   1f64a:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1f64e:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1f652:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1f654:	7a23      	ldrb	r3, [r4, #8]
   1f656:	f023 0307 	bic.w	r3, r3, #7
   1f65a:	f043 0307 	orr.w	r3, r3, #7
   1f65e:	7223      	strb	r3, [r4, #8]
}
   1f660:	e622      	b.n	1f2a8 <hci_internal_cmd_put+0x200>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1f662:	4817      	ldr	r0, [pc, #92]	; (1f6c0 <hci_internal_cmd_put+0x618>)
   1f664:	f7ee f8be 	bl	d7e4 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1f668:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1f66a:	e62f      	b.n	1f2cc <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1f66c:	4814      	ldr	r0, [pc, #80]	; (1f6c0 <hci_internal_cmd_put+0x618>)
   1f66e:	f7ee f86c 	bl	d74a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   1f672:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1f674:	e62a      	b.n	1f2cc <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1f676:	f7ee f904 	bl	d882 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1f67a:	e566      	b.n	1f14a <hci_internal_cmd_put+0xa2>
	memset(cmds, 0, sizeof(*cmds));
   1f67c:	4810      	ldr	r0, [pc, #64]	; (1f6c0 <hci_internal_cmd_put+0x618>)
   1f67e:	2202      	movs	r2, #2
   1f680:	2100      	movs	r1, #0
   1f682:	f007 fb54 	bl	26d2e <memset>
	cmds->read_supported_vs_commands = 1;
   1f686:	79e3      	ldrb	r3, [r4, #7]
   1f688:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1f68c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1f690:	71e3      	strb	r3, [r4, #7]
}
   1f692:	e609      	b.n	1f2a8 <hci_internal_cmd_put+0x200>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1f694:	f7ee f84e 	bl	d734 <sdc_hci_cmd_vs_llpm_mode_set>
   1f698:	e557      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1f69a:	f7ee f847 	bl	d72c <sdc_hci_cmd_vs_conn_update>
   1f69e:	e554      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1f6a0:	f7ee f83c 	bl	d71c <sdc_hci_cmd_vs_conn_event_extend>
   1f6a4:	e551      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1f6a6:	f7ee f84b 	bl	d740 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1f6aa:	e54e      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1f6ac:	f7ee f840 	bl	d730 <sdc_hci_cmd_vs_event_length_set>
   1f6b0:	e54b      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1f6b2:	f7ee f841 	bl	d738 <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   1f6b6:	e548      	b.n	1f14a <hci_internal_cmd_put+0xa2>
		return -NRF_EPERM;
   1f6b8:	f04f 30ff 	mov.w	r0, #4294967295
   1f6bc:	e52f      	b.n	1f11e <hci_internal_cmd_put+0x76>
   1f6be:	bf00      	nop
   1f6c0:	20004313 	.word	0x20004313

0001f6c4 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1f6c4:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1f6c6:	4c07      	ldr	r4, [pc, #28]	; (1f6e4 <hci_internal_evt_get+0x20>)
   1f6c8:	7823      	ldrb	r3, [r4, #0]
   1f6ca:	b91b      	cbnz	r3, 1f6d4 <hci_internal_evt_get+0x10>

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1f6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   1f6d0:	f7ed bfff 	b.w	d6d2 <sdc_hci_evt_get>
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1f6d4:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   1f6d6:	1c61      	adds	r1, r4, #1
   1f6d8:	3202      	adds	r2, #2
   1f6da:	f007 fb1d 	bl	26d18 <memcpy>
		cmd_complete_or_status.occurred = false;
   1f6de:	2000      	movs	r0, #0
   1f6e0:	7020      	strb	r0, [r4, #0]
}
   1f6e2:	bd10      	pop	{r4, pc}
   1f6e4:	2000430c 	.word	0x2000430c

0001f6e8 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1f6e8:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   1f6ea:	4c09      	ldr	r4, [pc, #36]	; (1f710 <hci_internal_msg_get+0x28>)
   1f6ec:	7823      	ldrb	r3, [r4, #0]
{
   1f6ee:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   1f6f0:	b91b      	cbnz	r3, 1f6fa <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   1f6f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   1f6f6:	f7ed bff9 	b.w	d6ec <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1f6fa:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   1f6fc:	1c61      	adds	r1, r4, #1
   1f6fe:	3202      	adds	r2, #2
   1f700:	f007 fb0a 	bl	26d18 <memcpy>
		cmd_complete_or_status.occurred = false;
   1f704:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1f706:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   1f708:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1f70a:	702b      	strb	r3, [r5, #0]
}
   1f70c:	bd38      	pop	{r3, r4, r5, pc}
   1f70e:	bf00      	nop
   1f710:	2000430c 	.word	0x2000430c

0001f714 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1f714:	b570      	push	{r4, r5, r6, lr}
   1f716:	4605      	mov	r5, r0
   1f718:	460e      	mov	r6, r1
   1f71a:	4c08      	ldr	r4, [pc, #32]	; (1f73c <bt_rand+0x28>)
   1f71c:	4620      	mov	r0, r4
   1f71e:	f00a fa80 	bl	29c22 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1f722:	b138      	cbz	r0, 1f734 <bt_rand+0x20>
   1f724:	68a3      	ldr	r3, [r4, #8]
   1f726:	b2b2      	uxth	r2, r6
   1f728:	4629      	mov	r1, r5
   1f72a:	4620      	mov	r0, r4
   1f72c:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   1f72e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f732:	4718      	bx	r3
   1f734:	f06f 0012 	mvn.w	r0, #18
   1f738:	bd70      	pop	{r4, r5, r6, pc}
   1f73a:	bf00      	nop
   1f73c:	0002a8c8 	.word	0x0002a8c8

0001f740 <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1f740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1f742:	4b24      	ldr	r3, [pc, #144]	; (1f7d4 <ecdh_p256_common_secret+0x94>)
   1f744:	4924      	ldr	r1, [pc, #144]	; (1f7d8 <ecdh_p256_common_secret+0x98>)
   1f746:	f103 0220 	add.w	r2, r3, #32
   1f74a:	2800      	cmp	r0, #0
   1f74c:	bf08      	it	eq
   1f74e:	4619      	moveq	r1, r3
{
   1f750:	af00      	add	r7, sp, #0
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1f752:	4610      	mov	r0, r2
   1f754:	f002 fe6a 	bl	2242c <ocrypto_ecdh_p256_common_secret>
	if (err) {
   1f758:	4604      	mov	r4, r0
   1f75a:	b180      	cbz	r0, 1f77e <ecdh_p256_common_secret+0x3e>
		BT_ERR("public key is not valid (err %d)", err);
   1f75c:	466d      	mov	r5, sp
   1f75e:	b088      	sub	sp, #32
   1f760:	466a      	mov	r2, sp
   1f762:	4b1e      	ldr	r3, [pc, #120]	; (1f7dc <ecdh_p256_common_secret+0x9c>)
   1f764:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f768:	2303      	movs	r3, #3
   1f76a:	f842 3f10 	str.w	r3, [r2, #16]!
   1f76e:	481c      	ldr	r0, [pc, #112]	; (1f7e0 <ecdh_p256_common_secret+0xa0>)
   1f770:	2300      	movs	r3, #0
   1f772:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f776:	f7f3 fd6f 	bl	13258 <z_impl_z_log_msg_static_create>
		return BT_HCI_ERR_INVALID_PARAM;
   1f77a:	2412      	movs	r4, #18
   1f77c:	46ad      	mov	sp, r5
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1f77e:	f04f 32ff 	mov.w	r2, #4294967295
   1f782:	f04f 33ff 	mov.w	r3, #4294967295
   1f786:	2001      	movs	r0, #1
   1f788:	f7f5 fcc4 	bl	15114 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1f78c:	f100 0608 	add.w	r6, r0, #8
   1f790:	2102      	movs	r1, #2
   1f792:	4605      	mov	r5, r0
   1f794:	4630      	mov	r0, r6
   1f796:	f009 fc9d 	bl	290d4 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1f79a:	233e      	movs	r3, #62	; 0x3e
   1f79c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1f79e:	2322      	movs	r3, #34	; 0x22
   1f7a0:	7043      	strb	r3, [r0, #1]
   1f7a2:	2101      	movs	r1, #1
   1f7a4:	4630      	mov	r0, r6
   1f7a6:	f009 fc95 	bl	290d4 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1f7aa:	2309      	movs	r3, #9
   1f7ac:	7003      	strb	r3, [r0, #0]
   1f7ae:	2121      	movs	r1, #33	; 0x21
   1f7b0:	4630      	mov	r0, r6
   1f7b2:	f009 fc8f 	bl	290d4 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1f7b6:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   1f7ba:	b134      	cbz	r4, 1f7ca <ecdh_p256_common_secret+0x8a>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   1f7bc:	2220      	movs	r2, #32
   1f7be:	21ff      	movs	r1, #255	; 0xff
   1f7c0:	f007 fab5 	bl	26d2e <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   1f7c4:	4628      	mov	r0, r5
   1f7c6:	46bd      	mov	sp, r7
   1f7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   1f7ca:	4906      	ldr	r1, [pc, #24]	; (1f7e4 <ecdh_p256_common_secret+0xa4>)
   1f7cc:	f00a f895 	bl	298fa <sys_memcpy_swap.constprop.0>
   1f7d0:	e7f8      	b.n	1f7c4 <ecdh_p256_common_secret+0x84>
   1f7d2:	bf00      	nop
   1f7d4:	20004353 	.word	0x20004353
   1f7d8:	0002e1d1 	.word	0x0002e1d1
   1f7dc:	0002e18b 	.word	0x0002e18b
   1f7e0:	0002ac00 	.word	0x0002ac00
   1f7e4:	20004373 	.word	0x20004373

0001f7e8 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   1f7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f7ea:	4e3d      	ldr	r6, [pc, #244]	; (1f8e0 <ecdh_cmd_process+0xf8>)
   1f7ec:	f3bf 8f5b 	dmb	ish
   1f7f0:	6833      	ldr	r3, [r6, #0]
   1f7f2:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   1f7f6:	2b02      	cmp	r3, #2
{
   1f7f8:	b087      	sub	sp, #28
	switch (atomic_get(&cmd)) {
   1f7fa:	d05a      	beq.n	1f8b2 <ecdh_cmd_process+0xca>
   1f7fc:	2b04      	cmp	r3, #4
   1f7fe:	d05d      	beq.n	1f8bc <ecdh_cmd_process+0xd4>
   1f800:	2b01      	cmp	r3, #1
   1f802:	d15d      	bne.n	1f8c0 <ecdh_cmd_process+0xd8>
		err = bt_rand(ecdh.private_key_be, 32);
   1f804:	4c37      	ldr	r4, [pc, #220]	; (1f8e4 <ecdh_cmd_process+0xfc>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1f806:	4f38      	ldr	r7, [pc, #224]	; (1f8e8 <ecdh_cmd_process+0x100>)
		err = bt_rand(ecdh.private_key_be, 32);
   1f808:	2120      	movs	r1, #32
   1f80a:	4620      	mov	r0, r4
   1f80c:	f7ff ff82 	bl	1f714 <bt_rand>
		if (err) {
   1f810:	2800      	cmp	r0, #0
   1f812:	d143      	bne.n	1f89c <ecdh_cmd_process+0xb4>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1f814:	2220      	movs	r2, #32
   1f816:	4639      	mov	r1, r7
   1f818:	4620      	mov	r0, r4
   1f81a:	f007 fa54 	bl	26cc6 <memcmp>
   1f81e:	2800      	cmp	r0, #0
   1f820:	d0f2      	beq.n	1f808 <ecdh_cmd_process+0x20>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   1f822:	4832      	ldr	r0, [pc, #200]	; (1f8ec <ecdh_cmd_process+0x104>)
   1f824:	4621      	mov	r1, r4
   1f826:	f002 fded 	bl	22404 <ocrypto_ecdh_p256_public_key>
	} while (err);
   1f82a:	4605      	mov	r5, r0
   1f82c:	2800      	cmp	r0, #0
   1f82e:	d1eb      	bne.n	1f808 <ecdh_cmd_process+0x20>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1f830:	f04f 32ff 	mov.w	r2, #4294967295
   1f834:	f04f 33ff 	mov.w	r3, #4294967295
   1f838:	2001      	movs	r0, #1
   1f83a:	f7f5 fc6b 	bl	15114 <bt_buf_get_rx>
   1f83e:	f100 0708 	add.w	r7, r0, #8
   1f842:	2102      	movs	r1, #2
   1f844:	4604      	mov	r4, r0
   1f846:	4638      	mov	r0, r7
   1f848:	f009 fc44 	bl	290d4 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1f84c:	233e      	movs	r3, #62	; 0x3e
   1f84e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1f850:	2342      	movs	r3, #66	; 0x42
   1f852:	7043      	strb	r3, [r0, #1]
   1f854:	2101      	movs	r1, #1
   1f856:	4638      	mov	r0, r7
   1f858:	f009 fc3c 	bl	290d4 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1f85c:	2308      	movs	r3, #8
   1f85e:	7003      	strb	r3, [r0, #0]
   1f860:	2141      	movs	r1, #65	; 0x41
   1f862:	4638      	mov	r0, r7
   1f864:	f009 fc36 	bl	290d4 <net_buf_simple_add>
   1f868:	4607      	mov	r7, r0
	evt->status = status;
   1f86a:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   1f86e:	b1bd      	cbz	r5, 1f8a0 <ecdh_cmd_process+0xb8>
		(void)memset(evt->key, 0, sizeof(evt->key));
   1f870:	2240      	movs	r2, #64	; 0x40
   1f872:	2100      	movs	r1, #0
   1f874:	f007 fa5b 	bl	26d2e <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f878:	f3bf 8f5b 	dmb	ish
   1f87c:	2300      	movs	r3, #0
   1f87e:	e856 2f00 	ldrex	r2, [r6]
   1f882:	e846 3100 	strex	r1, r3, [r6]
   1f886:	2900      	cmp	r1, #0
   1f888:	d1f9      	bne.n	1f87e <ecdh_cmd_process+0x96>
   1f88a:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   1f88e:	b324      	cbz	r4, 1f8da <ecdh_cmd_process+0xf2>
		bt_recv(buf);
   1f890:	4620      	mov	r0, r4
	}
}
   1f892:	b007      	add	sp, #28
   1f894:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_recv(buf);
   1f898:	f7f6 be52 	b.w	16540 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   1f89c:	251f      	movs	r5, #31
   1f89e:	e7c7      	b.n	1f830 <ecdh_cmd_process+0x48>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1f8a0:	4912      	ldr	r1, [pc, #72]	; (1f8ec <ecdh_cmd_process+0x104>)
   1f8a2:	f00a f82a 	bl	298fa <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   1f8a6:	3120      	adds	r1, #32
   1f8a8:	f107 0021 	add.w	r0, r7, #33	; 0x21
   1f8ac:	f00a f825 	bl	298fa <sys_memcpy_swap.constprop.0>
		break;
   1f8b0:	e7e2      	b.n	1f878 <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(false);
   1f8b2:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   1f8b4:	f7ff ff44 	bl	1f740 <ecdh_p256_common_secret>
   1f8b8:	4604      	mov	r4, r0
		break;
   1f8ba:	e7dd      	b.n	1f878 <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(true);
   1f8bc:	2001      	movs	r0, #1
   1f8be:	e7f9      	b.n	1f8b4 <ecdh_cmd_process+0xcc>
		BT_WARN("Unknown command");
   1f8c0:	4b0b      	ldr	r3, [pc, #44]	; (1f8f0 <ecdh_cmd_process+0x108>)
   1f8c2:	9305      	str	r3, [sp, #20]
   1f8c4:	2302      	movs	r3, #2
   1f8c6:	9304      	str	r3, [sp, #16]
   1f8c8:	480a      	ldr	r0, [pc, #40]	; (1f8f4 <ecdh_cmd_process+0x10c>)
   1f8ca:	2300      	movs	r3, #0
   1f8cc:	aa04      	add	r2, sp, #16
   1f8ce:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1f8d2:	f7f3 fcc1 	bl	13258 <z_impl_z_log_msg_static_create>
		buf = NULL;
   1f8d6:	2400      	movs	r4, #0
		break;
   1f8d8:	e7ce      	b.n	1f878 <ecdh_cmd_process+0x90>
}
   1f8da:	b007      	add	sp, #28
   1f8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f8de:	bf00      	nop
   1f8e0:	20002e1c 	.word	0x20002e1c
   1f8e4:	20004353 	.word	0x20004353
   1f8e8:	0002e1d1 	.word	0x0002e1d1
   1f8ec:	20004373 	.word	0x20004373
   1f8f0:	0002e1ac 	.word	0x0002e1ac
   1f8f4:	0002ac00 	.word	0x0002ac00

0001f8f8 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   1f8f8:	b510      	push	{r4, lr}
   1f8fa:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   1f8fc:	2210      	movs	r2, #16
   1f8fe:	2100      	movs	r1, #0
   1f900:	a801      	add	r0, sp, #4
   1f902:	f007 fa14 	bl	26d2e <memset>
   1f906:	4c0b      	ldr	r4, [pc, #44]	; (1f934 <ecdh_thread+0x3c>)
   1f908:	9405      	str	r4, [sp, #20]
   1f90a:	2301      	movs	r3, #1
   1f90c:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   1f910:	f04f 32ff 	mov.w	r2, #4294967295
   1f914:	f04f 33ff 	mov.w	r3, #4294967295
   1f918:	2101      	movs	r1, #1
   1f91a:	a801      	add	r0, sp, #4
   1f91c:	f002 fcc2 	bl	222a4 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   1f920:	4620      	mov	r0, r4
   1f922:	f00a ff29 	bl	2a778 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   1f926:	9b04      	ldr	r3, [sp, #16]
   1f928:	f36f 3352 	bfc	r3, #13, #6
   1f92c:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   1f92e:	f7ff ff5b 	bl	1f7e8 <ecdh_cmd_process>
	while (true) {
   1f932:	e7ed      	b.n	1f910 <ecdh_thread+0x18>
   1f934:	20002e20 	.word	0x20002e20

0001f938 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   1f938:	b510      	push	{r4, lr}
   1f93a:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   1f93c:	480e      	ldr	r0, [pc, #56]	; (1f978 <hci_ecdh_init+0x40>)
   1f93e:	f00a ff16 	bl	2a76e <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1f942:	4c0e      	ldr	r4, [pc, #56]	; (1f97c <hci_ecdh_init+0x44>)
   1f944:	490e      	ldr	r1, [pc, #56]	; (1f980 <hci_ecdh_init+0x48>)
   1f946:	2200      	movs	r2, #0
   1f948:	2300      	movs	r3, #0
   1f94a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1f94e:	2300      	movs	r3, #0
   1f950:	220a      	movs	r2, #10
   1f952:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1f956:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1f95a:	9300      	str	r3, [sp, #0]
   1f95c:	f44f 7262 	mov.w	r2, #904	; 0x388
   1f960:	4b08      	ldr	r3, [pc, #32]	; (1f984 <hci_ecdh_init+0x4c>)
   1f962:	4620      	mov	r0, r4
   1f964:	f001 fb4e 	bl	21004 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1f968:	4907      	ldr	r1, [pc, #28]	; (1f988 <hci_ecdh_init+0x50>)
   1f96a:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   1f96c:	b008      	add	sp, #32
   1f96e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f972:	f00a ba14 	b.w	29d9e <z_impl_k_thread_name_set>
   1f976:	bf00      	nop
   1f978:	20002e20 	.word	0x20002e20
   1f97c:	200021f0 	.word	0x200021f0
   1f980:	200050c8 	.word	0x200050c8
   1f984:	0001f8f9 	.word	0x0001f8f9
   1f988:	0002e1bc 	.word	0x0002e1bc

0001f98c <hci_cmd_le_read_local_p256_public_key>:

uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   1f98c:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1f98e:	4b0b      	ldr	r3, [pc, #44]	; (1f9bc <hci_cmd_le_read_local_p256_public_key+0x30>)
   1f990:	f3bf 8f5b 	dmb	ish
   1f994:	2201      	movs	r2, #1
   1f996:	e853 1f00 	ldrex	r1, [r3]
   1f99a:	2900      	cmp	r1, #0
   1f99c:	d103      	bne.n	1f9a6 <hci_cmd_le_read_local_p256_public_key+0x1a>
   1f99e:	e843 2000 	strex	r0, r2, [r3]
   1f9a2:	2800      	cmp	r0, #0
   1f9a4:	d1f7      	bne.n	1f996 <hci_cmd_le_read_local_p256_public_key+0xa>
   1f9a6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   1f9aa:	d105      	bne.n	1f9b8 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   1f9ac:	4804      	ldr	r0, [pc, #16]	; (1f9c0 <hci_cmd_le_read_local_p256_public_key+0x34>)
   1f9ae:	2100      	movs	r1, #0
   1f9b0:	f002 fcd4 	bl	2235c <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   1f9b4:	2000      	movs	r0, #0
}
   1f9b6:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1f9b8:	200c      	movs	r0, #12
   1f9ba:	e7fc      	b.n	1f9b6 <hci_cmd_le_read_local_p256_public_key+0x2a>
   1f9bc:	20002e1c 	.word	0x20002e1c
   1f9c0:	20002e20 	.word	0x20002e20

0001f9c4 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   1f9c4:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1f9c6:	2900      	cmp	r1, #0
   1f9c8:	4b11      	ldr	r3, [pc, #68]	; (1fa10 <cmd_le_generate_dhkey+0x4c>)
   1f9ca:	f3bf 8f5b 	dmb	ish
{
   1f9ce:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1f9d0:	bf14      	ite	ne
   1f9d2:	2204      	movne	r2, #4
   1f9d4:	2202      	moveq	r2, #2
   1f9d6:	e853 1f00 	ldrex	r1, [r3]
   1f9da:	2900      	cmp	r1, #0
   1f9dc:	d103      	bne.n	1f9e6 <cmd_le_generate_dhkey+0x22>
   1f9de:	e843 2000 	strex	r0, r2, [r3]
   1f9e2:	2800      	cmp	r0, #0
   1f9e4:	d1f7      	bne.n	1f9d6 <cmd_le_generate_dhkey+0x12>
   1f9e6:	f3bf 8f5b 	dmb	ish
   1f9ea:	d10e      	bne.n	1fa0a <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   1f9ec:	4621      	mov	r1, r4
   1f9ee:	4809      	ldr	r0, [pc, #36]	; (1fa14 <cmd_le_generate_dhkey+0x50>)
   1f9f0:	f009 ff83 	bl	298fa <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   1f9f4:	4808      	ldr	r0, [pc, #32]	; (1fa18 <cmd_le_generate_dhkey+0x54>)
   1f9f6:	f104 0120 	add.w	r1, r4, #32
   1f9fa:	f009 ff7e 	bl	298fa <sys_memcpy_swap.constprop.0>
   1f9fe:	4807      	ldr	r0, [pc, #28]	; (1fa1c <cmd_le_generate_dhkey+0x58>)
   1fa00:	2100      	movs	r1, #0
   1fa02:	f002 fcab 	bl	2235c <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   1fa06:	2000      	movs	r0, #0
}
   1fa08:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1fa0a:	200c      	movs	r0, #12
   1fa0c:	e7fc      	b.n	1fa08 <cmd_le_generate_dhkey+0x44>
   1fa0e:	bf00      	nop
   1fa10:	20002e1c 	.word	0x20002e1c
   1fa14:	20004373 	.word	0x20004373
   1fa18:	20004393 	.word	0x20004393
   1fa1c:	20002e20 	.word	0x20002e20

0001fa20 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   1fa20:	4901      	ldr	r1, [pc, #4]	; (1fa28 <mpsl_low_prio_irq_handler+0x8>)
   1fa22:	4802      	ldr	r0, [pc, #8]	; (1fa2c <mpsl_low_prio_irq_handler+0xc>)
   1fa24:	f00a bb52 	b.w	2a0cc <k_work_submit_to_queue>
   1fa28:	20002e30 	.word	0x20002e30
   1fa2c:	20002270 	.word	0x20002270

0001fa30 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1fa30:	b513      	push	{r0, r1, r4, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1fa32:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   1fa36:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   1fa3a:	2300      	movs	r3, #0
   1fa3c:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1fa40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1fa44:	f8ad 3000 	strh.w	r3, [sp]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1fa48:	4a10      	ldr	r2, [pc, #64]	; (1fa8c <mpsl_lib_init+0x5c>)
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   1fa4a:	2302      	movs	r3, #2
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1fa4c:	2119      	movs	r1, #25
   1fa4e:	4668      	mov	r0, sp
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   1fa50:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1fa54:	f7e4 fd46 	bl	44e4 <mpsl_init>
	if (err) {
   1fa58:	4604      	mov	r4, r0
   1fa5a:	b9a0      	cbnz	r0, 1fa86 <mpsl_lib_init+0x56>
		return err;
	}

#if MPSL_TIMESLOT_SESSION_COUNT > 0
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   1fa5c:	480c      	ldr	r0, [pc, #48]	; (1fa90 <mpsl_lib_init+0x60>)
   1fa5e:	2101      	movs	r1, #1
   1fa60:	f7ed f8a8 	bl	cbb4 <mpsl_timeslot_session_count_set>
			MPSL_TIMESLOT_SESSION_COUNT);
	if (err) {
   1fa64:	4604      	mov	r4, r0
   1fa66:	b970      	cbnz	r0, 1fa86 <mpsl_lib_init+0x56>
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1fa68:	4601      	mov	r1, r0
   1fa6a:	2201      	movs	r2, #1
   1fa6c:	2008      	movs	r0, #8
   1fa6e:	f7f4 fb7d 	bl	1416c <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1fa72:	2201      	movs	r2, #1
   1fa74:	4621      	mov	r1, r4
   1fa76:	200b      	movs	r0, #11
   1fa78:	f7f4 fb78 	bl	1416c <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1fa7c:	2201      	movs	r2, #1
   1fa7e:	4621      	mov	r1, r4
   1fa80:	4610      	mov	r0, r2
   1fa82:	f7f4 fb73 	bl	1416c <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);

	return 0;
}
   1fa86:	4620      	mov	r0, r4
   1fa88:	b002      	add	sp, #8
   1fa8a:	bd10      	pop	{r4, pc}
   1fa8c:	0001fa95 	.word	0x0001fa95
   1fa90:	20002e40 	.word	0x20002e40

0001fa94 <m_assert_handler>:
{
   1fa94:	b598      	push	{r3, r4, r7, lr}
   1fa96:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   1fa98:	466c      	mov	r4, sp
   1fa9a:	b08a      	sub	sp, #40	; 0x28
   1fa9c:	466a      	mov	r2, sp
   1fa9e:	4b0c      	ldr	r3, [pc, #48]	; (1fad0 <m_assert_handler+0x3c>)
   1faa0:	61d1      	str	r1, [r2, #28]
   1faa2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1faa6:	2302      	movs	r3, #2
   1faa8:	f882 3020 	strb.w	r3, [r2, #32]
   1faac:	4b09      	ldr	r3, [pc, #36]	; (1fad4 <m_assert_handler+0x40>)
   1faae:	f842 3f10 	str.w	r3, [r2, #16]!
   1fab2:	4809      	ldr	r0, [pc, #36]	; (1fad8 <m_assert_handler+0x44>)
   1fab4:	2300      	movs	r3, #0
   1fab6:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   1faba:	f7f3 fbcd 	bl	13258 <z_impl_z_log_msg_static_create>
   1fabe:	46a5      	mov	sp, r4
	k_oops();
   1fac0:	4040      	eors	r0, r0
   1fac2:	f380 8811 	msr	BASEPRI, r0
   1fac6:	f04f 0003 	mov.w	r0, #3
   1faca:	df02      	svc	2
}
   1facc:	46bd      	mov	sp, r7
   1face:	bd98      	pop	{r3, r4, r7, pc}
   1fad0:	0002e1f1 	.word	0x0002e1f1
   1fad4:	01000004 	.word	0x01000004
   1fad8:	0002ac90 	.word	0x0002ac90

0001fadc <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   1fadc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   1fade:	4d0d      	ldr	r5, [pc, #52]	; (1fb14 <mpsl_low_prio_init+0x38>)
   1fae0:	490d      	ldr	r1, [pc, #52]	; (1fb18 <mpsl_low_prio_init+0x3c>)
   1fae2:	2400      	movs	r4, #0
   1fae4:	9400      	str	r4, [sp, #0]
   1fae6:	f06f 0309 	mvn.w	r3, #9
   1faea:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1faee:	4628      	mov	r0, r5
   1faf0:	f001 fda8 	bl	21644 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1faf4:	4909      	ldr	r1, [pc, #36]	; (1fb1c <mpsl_low_prio_init+0x40>)
   1faf6:	4628      	mov	r0, r5
   1faf8:	f00a f951 	bl	29d9e <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   1fafc:	4908      	ldr	r1, [pc, #32]	; (1fb20 <mpsl_low_prio_init+0x44>)
   1fafe:	4809      	ldr	r0, [pc, #36]	; (1fb24 <mpsl_low_prio_init+0x48>)
   1fb00:	f00a fab7 	bl	2a072 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1fb04:	4622      	mov	r2, r4
   1fb06:	2104      	movs	r1, #4
   1fb08:	2019      	movs	r0, #25
   1fb0a:	f7f4 fb2f 	bl	1416c <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1fb0e:	4620      	mov	r0, r4
   1fb10:	b003      	add	sp, #12
   1fb12:	bd30      	pop	{r4, r5, pc}
   1fb14:	20002270 	.word	0x20002270
   1fb18:	20005450 	.word	0x20005450
   1fb1c:	0002e205 	.word	0x0002e205
   1fb20:	00029943 	.word	0x00029943
   1fb24:	20002e30 	.word	0x20002e30

0001fb28 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1fb28:	4b01      	ldr	r3, [pc, #4]	; (1fb30 <mpsl_hfclk_callback+0x8>)
   1fb2a:	2000      	movs	r0, #0
   1fb2c:	681b      	ldr	r3, [r3, #0]
   1fb2e:	4718      	bx	r3
   1fb30:	20002e70 	.word	0x20002e70

0001fb34 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   1fb34:	b120      	cbz	r0, 1fb40 <nrfx_clock_start+0xc>
   1fb36:	2801      	cmp	r0, #1
   1fb38:	d106      	bne.n	1fb48 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1fb3a:	4804      	ldr	r0, [pc, #16]	; (1fb4c <nrfx_clock_start+0x18>)
   1fb3c:	f7e4 bb48 	b.w	41d0 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1fb40:	4b03      	ldr	r3, [pc, #12]	; (1fb50 <nrfx_clock_start+0x1c>)
   1fb42:	2001      	movs	r0, #1
   1fb44:	681b      	ldr	r3, [r3, #0]
   1fb46:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1fb48:	4770      	bx	lr
   1fb4a:	bf00      	nop
   1fb4c:	0001fb29 	.word	0x0001fb29
   1fb50:	20002e70 	.word	0x20002e70

0001fb54 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1fb54:	4b01      	ldr	r3, [pc, #4]	; (1fb5c <nrfx_clock_init+0x8>)
   1fb56:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1fb58:	4801      	ldr	r0, [pc, #4]	; (1fb60 <nrfx_clock_init+0xc>)
   1fb5a:	4770      	bx	lr
   1fb5c:	20002e70 	.word	0x20002e70
   1fb60:	0bad0000 	.word	0x0bad0000

0001fb64 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   1fb64:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fb66:	4d1d      	ldr	r5, [pc, #116]	; (1fbdc <timeslot_callback+0x78>)
   1fb68:	f3bf 8f5b 	dmb	ish
   1fb6c:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   1fb6e:	f3bf 8f5b 	dmb	ish
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);

	if (atomic_get(&_context.timeout_occured)) {
   1fb72:	bb84      	cbnz	r4, 1fbd6 <timeslot_callback+0x72>
		return NULL;
	}

	switch (signal) {
   1fb74:	2906      	cmp	r1, #6
   1fb76:	d804      	bhi.n	1fb82 <timeslot_callback+0x1e>
   1fb78:	2904      	cmp	r1, #4
   1fb7a:	d822      	bhi.n	1fbc2 <timeslot_callback+0x5e>
   1fb7c:	b139      	cbz	r1, 1fb8e <timeslot_callback+0x2a>
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
}
   1fb7e:	4620      	mov	r0, r4
   1fb80:	bd38      	pop	{r3, r4, r5, pc}
	switch (signal) {
   1fb82:	2907      	cmp	r1, #7
   1fb84:	d1fb      	bne.n	1fb7e <timeslot_callback+0x1a>
	z_impl_k_sem_give(sem);
   1fb86:	4628      	mov	r0, r5
   1fb88:	f001 fbc8 	bl	2131c <z_impl_k_sem_give>
}
   1fb8c:	e7f7      	b.n	1fb7e <timeslot_callback+0x1a>
		rc = _context.op_desc->handler(_context.op_desc->context);
   1fb8e:	6a2b      	ldr	r3, [r5, #32]
   1fb90:	e9d3 2000 	ldrd	r2, r0, [r3]
   1fb94:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   1fb96:	2801      	cmp	r0, #1
   1fb98:	d005      	beq.n	1fba6 <timeslot_callback+0x42>
			_context.return_param.callback_action =
   1fb9a:	462c      	mov	r4, r5
   1fb9c:	2302      	movs	r3, #2
   1fb9e:	f804 3f34 	strb.w	r3, [r4, #52]!
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   1fba2:	63e8      	str	r0, [r5, #60]	; 0x3c
			_context.return_param.callback_action =
   1fba4:	e7eb      	b.n	1fb7e <timeslot_callback+0x1a>
			_context.timeslot_request.params.earliest.timeout_us =
   1fba6:	f247 5330 	movw	r3, #30000	; 0x7530
   1fbaa:	632b      	str	r3, [r5, #48]	; 0x30
			_context.return_param.callback_action =
   1fbac:	2303      	movs	r3, #3
   1fbae:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
			_context.return_param.params.request.p_next =
   1fbb2:	f105 0324 	add.w	r3, r5, #36	; 0x24
			_context.timeslot_request.params.earliest.priority =
   1fbb6:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
			_context.return_param.params.request.p_next =
   1fbba:	63ab      	str	r3, [r5, #56]	; 0x38
   1fbbc:	f105 0434 	add.w	r4, r5, #52	; 0x34
   1fbc0:	e7dd      	b.n	1fb7e <timeslot_callback+0x1a>
	_context.timeslot_request.params.earliest.timeout_us =
   1fbc2:	4b07      	ldr	r3, [pc, #28]	; (1fbe0 <timeslot_callback+0x7c>)
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1fbc4:	7e28      	ldrb	r0, [r5, #24]
	_context.timeslot_request.params.earliest.priority =
   1fbc6:	f885 4029 	strb.w	r4, [r5, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1fbca:	f105 0124 	add.w	r1, r5, #36	; 0x24
	_context.timeslot_request.params.earliest.timeout_us =
   1fbce:	632b      	str	r3, [r5, #48]	; 0x30
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1fbd0:	f7ec ff94 	bl	cafc <mpsl_timeslot_request>
}
   1fbd4:	e7d3      	b.n	1fb7e <timeslot_callback+0x1a>
		return NULL;
   1fbd6:	2400      	movs	r4, #0
   1fbd8:	e7d1      	b.n	1fb7e <timeslot_callback+0x1a>
   1fbda:	bf00      	nop
   1fbdc:	20002e74 	.word	0x20002e74
   1fbe0:	0f423fff 	.word	0x0f423fff

0001fbe4 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   1fbe4:	4802      	ldr	r0, [pc, #8]	; (1fbf0 <nrf_flash_sync_init+0xc>)
   1fbe6:	2201      	movs	r2, #1
   1fbe8:	2100      	movs	r1, #0
   1fbea:	f00a b9c2 	b.w	29f72 <z_impl_k_sem_init>
   1fbee:	bf00      	nop
   1fbf0:	20002e74 	.word	0x20002e74

0001fbf4 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   1fbf4:	4b01      	ldr	r3, [pc, #4]	; (1fbfc <nrf_flash_sync_set_context+0x8>)
   1fbf6:	61d8      	str	r0, [r3, #28]
}
   1fbf8:	4770      	bx	lr
   1fbfa:	bf00      	nop
   1fbfc:	20002e74 	.word	0x20002e74

0001fc00 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   1fc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
	__ASSERT_NO_MSG(errcode == 0);
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   1fc04:	4c43      	ldr	r4, [pc, #268]	; (1fd14 <nrf_flash_sync_exe+0x114>)
{
   1fc06:	b086      	sub	sp, #24
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1fc08:	f04f 31ff 	mov.w	r1, #4294967295
{
   1fc0c:	af00      	add	r7, sp, #0
   1fc0e:	4680      	mov	r8, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1fc10:	f04f 30ff 	mov.w	r0, #4294967295
   1fc14:	f7ff f81c 	bl	1ec50 <multithreading_lock_acquire>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   1fc18:	f104 0118 	add.w	r1, r4, #24
   1fc1c:	483e      	ldr	r0, [pc, #248]	; (1fd18 <nrf_flash_sync_exe+0x118>)
   1fc1e:	f7e1 f8f1 	bl	e04 <mpsl_timeslot_session_open>
   1fc22:	4605      	mov	r5, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   1fc24:	f7ff f81c 	bl	1ec60 <multithreading_lock_release>

	if (ret < 0) {
   1fc28:	2d00      	cmp	r5, #0
   1fc2a:	da15      	bge.n	1fc58 <nrf_flash_sync_exe+0x58>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   1fc2c:	466c      	mov	r4, sp
   1fc2e:	b088      	sub	sp, #32
   1fc30:	466a      	mov	r2, sp
   1fc32:	4b3a      	ldr	r3, [pc, #232]	; (1fd1c <nrf_flash_sync_exe+0x11c>)
   1fc34:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1fc38:	2303      	movs	r3, #3
   1fc3a:	f842 3f10 	str.w	r3, [r2, #16]!
   1fc3e:	4838      	ldr	r0, [pc, #224]	; (1fd20 <nrf_flash_sync_exe+0x120>)
   1fc40:	2300      	movs	r3, #0
   1fc42:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fc46:	f7f3 fb07 	bl	13258 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   1fc4a:	f06f 000b 	mvn.w	r0, #11
   1fc4e:	46a5      	mov	sp, r4
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   1fc50:	3718      	adds	r7, #24
   1fc52:	46bd      	mov	sp, r7
   1fc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   1fc58:	f240 1301 	movw	r3, #257	; 0x101
   1fc5c:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1fc5e:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   1fc60:	f8c4 8020 	str.w	r8, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1fc64:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   1fc66:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;
   1fc68:	f247 5330 	movw	r3, #30000	; 0x7530
   1fc6c:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1fc6e:	2600      	movs	r6, #0
	_context.status = -ETIMEDOUT;
   1fc70:	f06f 0373 	mvn.w	r3, #115	; 0x73
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1fc74:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	_context.status = -ETIMEDOUT;
   1fc78:	63e3      	str	r3, [r4, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1fc7a:	f104 0540 	add.w	r5, r4, #64	; 0x40
   1fc7e:	f3bf 8f5b 	dmb	ish
   1fc82:	e855 3f00 	ldrex	r3, [r5]
   1fc86:	e845 6200 	strex	r2, r6, [r5]
   1fc8a:	2a00      	cmp	r2, #0
   1fc8c:	d1f9      	bne.n	1fc82 <nrf_flash_sync_exe+0x82>
   1fc8e:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1fc92:	f04f 31ff 	mov.w	r1, #4294967295
   1fc96:	f04f 30ff 	mov.w	r0, #4294967295
   1fc9a:	f7fe ffd9 	bl	1ec50 <multithreading_lock_acquire>
	ret = mpsl_timeslot_request(_context.session_id, req);
   1fc9e:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1fca2:	7e20      	ldrb	r0, [r4, #24]
   1fca4:	f7ec ff2a 	bl	cafc <mpsl_timeslot_request>
	MULTITHREADING_LOCK_RELEASE();
   1fca8:	f7fe ffda 	bl	1ec60 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   1fcac:	4a1d      	ldr	r2, [pc, #116]	; (1fd24 <nrf_flash_sync_exe+0x124>)
   1fcae:	2300      	movs	r3, #0
   1fcb0:	4620      	mov	r0, r4
   1fcb2:	f001 fb59 	bl	21368 <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   1fcb6:	42b0      	cmp	r0, r6
   1fcb8:	da16      	bge.n	1fce8 <nrf_flash_sync_exe+0xe8>
		LOG_ERR("timeout");
   1fcba:	4b1b      	ldr	r3, [pc, #108]	; (1fd28 <nrf_flash_sync_exe+0x128>)
   1fcbc:	617b      	str	r3, [r7, #20]
   1fcbe:	2302      	movs	r3, #2
   1fcc0:	613b      	str	r3, [r7, #16]
   1fcc2:	4817      	ldr	r0, [pc, #92]	; (1fd20 <nrf_flash_sync_exe+0x120>)
   1fcc4:	4633      	mov	r3, r6
   1fcc6:	f107 0210 	add.w	r2, r7, #16
   1fcca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1fcce:	f7f3 fac3 	bl	13258 <z_impl_z_log_msg_static_create>
   1fcd2:	f3bf 8f5b 	dmb	ish
   1fcd6:	2301      	movs	r3, #1
   1fcd8:	e855 2f00 	ldrex	r2, [r5]
   1fcdc:	e845 3100 	strex	r1, r3, [r5]
   1fce0:	2900      	cmp	r1, #0
   1fce2:	d1f9      	bne.n	1fcd8 <nrf_flash_sync_exe+0xd8>
   1fce4:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1fce8:	f04f 31ff 	mov.w	r1, #4294967295
   1fcec:	f04f 30ff 	mov.w	r0, #4294967295
   1fcf0:	f7fe ffae 	bl	1ec50 <multithreading_lock_acquire>
	mpsl_timeslot_session_close(_context.session_id);
   1fcf4:	7e20      	ldrb	r0, [r4, #24]
   1fcf6:	f7ec ff3c 	bl	cb72 <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   1fcfa:	f7fe ffb1 	bl	1ec60 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fcfe:	f3bf 8f5b 	dmb	ish
   1fd02:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1fd04:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   1fd08:	b113      	cbz	r3, 1fd10 <nrf_flash_sync_exe+0x110>
	z_impl_k_sem_reset(sem);
   1fd0a:	4802      	ldr	r0, [pc, #8]	; (1fd14 <nrf_flash_sync_exe+0x114>)
   1fd0c:	f001 fb54 	bl	213b8 <z_impl_k_sem_reset>
	return _context.status;
   1fd10:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1fd12:	e79d      	b.n	1fc50 <nrf_flash_sync_exe+0x50>
   1fd14:	20002e74 	.word	0x20002e74
   1fd18:	0001fb65 	.word	0x0001fb65
   1fd1c:	0002e219 	.word	0x0002e219
   1fd20:	0002ac60 	.word	0x0002ac60
   1fd24:	000b7b44 	.word	0x000b7b44
   1fd28:	0002cfae 	.word	0x0002cfae

0001fd2c <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fd2c:	4b07      	ldr	r3, [pc, #28]	; (1fd4c <nrf_flash_sync_check_time_limit+0x20>)
   1fd2e:	2201      	movs	r2, #1
   1fd30:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   1fd32:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   1fd36:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   1fd3a:	4418      	add	r0, r3
   1fd3c:	4b04      	ldr	r3, [pc, #16]	; (1fd50 <nrf_flash_sync_check_time_limit+0x24>)
   1fd3e:	69db      	ldr	r3, [r3, #28]
}
   1fd40:	4298      	cmp	r0, r3
   1fd42:	bf34      	ite	cc
   1fd44:	2000      	movcc	r0, #0
   1fd46:	2001      	movcs	r0, #1
   1fd48:	4770      	bx	lr
   1fd4a:	bf00      	nop
   1fd4c:	40008000 	.word	0x40008000
   1fd50:	20002e74 	.word	0x20002e74

0001fd54 <temp_nrf5_mpsl_channel_get>:
	int32_t uval;
	uint32_t uval_abs;
	uint32_t val1_abs;
	uint32_t val2_abs;

	if (chan != SENSOR_CHAN_DIE_TEMP) {
   1fd54:	290c      	cmp	r1, #12
{
   1fd56:	b510      	push	{r4, lr}
	struct temp_nrf5_mpsl_data *data = dev->data;
   1fd58:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
   1fd5a:	d113      	bne.n	1fd84 <temp_nrf5_mpsl_channel_get+0x30>
		return -ENOTSUP;
	}

	uval = data->sample;
   1fd5c:	6818      	ldr	r0, [r3, #0]
	uval_abs = (uval < 0) ? (-uval) : uval;

	val1_abs = uval_abs / TEMP_NRF5_MPSL_INC_PER_DEGREE_C;
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
   1fd5e:	4c0b      	ldr	r4, [pc, #44]	; (1fd8c <temp_nrf5_mpsl_channel_get+0x38>)
	uval_abs = (uval < 0) ? (-uval) : uval;
   1fd60:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
   1fd64:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
	val1_abs = uval_abs / TEMP_NRF5_MPSL_INC_PER_DEGREE_C;
   1fd68:	0899      	lsrs	r1, r3, #2
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
   1fd6a:	f003 0303 	and.w	r3, r3, #3
		   TEMP_NRF5_MPSL_MILLIDEGREE_C_PER_INC;

	if (uval < 0) {
   1fd6e:	2800      	cmp	r0, #0
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
   1fd70:	fb04 f303 	mul.w	r3, r4, r3
		val->val1 = -(int32_t)val1_abs;
   1fd74:	bfbd      	ittte	lt
   1fd76:	4249      	neglt	r1, r1
		val->val2 = -(int32_t)val2_abs;
   1fd78:	425b      	neglt	r3, r3
		val->val1 = -(int32_t)val1_abs;
   1fd7a:	6011      	strlt	r1, [r2, #0]
	} else {
		val->val1 = (int32_t)val1_abs;
   1fd7c:	6011      	strge	r1, [r2, #0]
		val->val2 = (int32_t)val2_abs;
   1fd7e:	6053      	str	r3, [r2, #4]
	}

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
   1fd80:	2000      	movs	r0, #0
}
   1fd82:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   1fd84:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1fd88:	e7fb      	b.n	1fd82 <temp_nrf5_mpsl_channel_get+0x2e>
   1fd8a:	bf00      	nop
   1fd8c:	0003d090 	.word	0x0003d090

0001fd90 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1fd90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1fd94:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1fd98:	2a08      	cmp	r2, #8
   1fd9a:	d106      	bne.n	1fdaa <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1fd9c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   1fda0:	2b05      	cmp	r3, #5
   1fda2:	d802      	bhi.n	1fdaa <nrf52_errata_103+0x1a>
   1fda4:	4a02      	ldr	r2, [pc, #8]	; (1fdb0 <nrf52_errata_103+0x20>)
   1fda6:	5cd0      	ldrb	r0, [r2, r3]
   1fda8:	4770      	bx	lr
        return false;
   1fdaa:	2000      	movs	r0, #0
}
   1fdac:	4770      	bx	lr
   1fdae:	bf00      	nop
   1fdb0:	0002e272 	.word	0x0002e272

0001fdb4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1fdb4:	4a02      	ldr	r2, [pc, #8]	; (1fdc0 <nvmc_wait+0xc>)
   1fdb6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1fdba:	2b00      	cmp	r3, #0
   1fdbc:	d0fb      	beq.n	1fdb6 <nvmc_wait+0x2>
}
   1fdbe:	4770      	bx	lr
   1fdc0:	4001e000 	.word	0x4001e000

0001fdc4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1fdc4:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1fdc6:	f009 fe0b 	bl	299e0 <nrf52_errata_136>
   1fdca:	b140      	cbz	r0, 1fdde <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1fdcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1fdd0:	2200      	movs	r2, #0
   1fdd2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1fdd6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1fdda:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1fdde:	f009 fdff 	bl	299e0 <nrf52_errata_136>
   1fde2:	2800      	cmp	r0, #0
   1fde4:	d046      	beq.n	1fe74 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1fde6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1fdea:	4b60      	ldr	r3, [pc, #384]	; (1ff6c <SystemInit+0x1a8>)
   1fdec:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1fdf0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1fdf4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1fdf8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1fdfc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1fe00:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1fe04:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1fe08:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1fe0c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1fe10:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1fe14:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1fe18:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1fe1c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1fe20:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1fe24:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1fe28:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1fe2c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1fe30:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1fe34:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1fe38:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1fe3c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1fe40:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1fe44:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1fe48:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1fe4c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1fe50:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1fe54:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1fe58:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1fe5c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1fe60:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1fe64:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1fe68:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1fe6c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1fe70:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1fe74:	f7ff ff8c 	bl	1fd90 <nrf52_errata_103>
   1fe78:	b118      	cbz	r0, 1fe82 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1fe7a:	4b3d      	ldr	r3, [pc, #244]	; (1ff70 <SystemInit+0x1ac>)
   1fe7c:	4a3d      	ldr	r2, [pc, #244]	; (1ff74 <SystemInit+0x1b0>)
   1fe7e:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1fe82:	f7ff ff85 	bl	1fd90 <nrf52_errata_103>
   1fe86:	b118      	cbz	r0, 1fe90 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1fe88:	4b3b      	ldr	r3, [pc, #236]	; (1ff78 <SystemInit+0x1b4>)
   1fe8a:	22fb      	movs	r2, #251	; 0xfb
   1fe8c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1fe90:	f7ff ff7e 	bl	1fd90 <nrf52_errata_103>
   1fe94:	b170      	cbz	r0, 1feb4 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1fe96:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1fe9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1fe9e:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   1fea2:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1fea6:	f022 020f 	bic.w	r2, r2, #15
   1feaa:	f003 030f 	and.w	r3, r3, #15
   1feae:	4313      	orrs	r3, r2
   1feb0:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1feb4:	f7ff ff6c 	bl	1fd90 <nrf52_errata_103>
   1feb8:	b120      	cbz	r0, 1fec4 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1feba:	4b30      	ldr	r3, [pc, #192]	; (1ff7c <SystemInit+0x1b8>)
   1febc:	f44f 7200 	mov.w	r2, #512	; 0x200
   1fec0:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1fec4:	f009 fd8c 	bl	299e0 <nrf52_errata_136>
   1fec8:	b148      	cbz	r0, 1fede <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1feca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1fece:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1fed2:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1fed4:	bf44      	itt	mi
   1fed6:	f06f 0201 	mvnmi.w	r2, #1
   1feda:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1fede:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1fee2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1fee6:	2a08      	cmp	r2, #8
   1fee8:	d10e      	bne.n	1ff08 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1feea:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1feee:	2b05      	cmp	r3, #5
   1fef0:	d802      	bhi.n	1fef8 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1fef2:	4a23      	ldr	r2, [pc, #140]	; (1ff80 <SystemInit+0x1bc>)
   1fef4:	5cd3      	ldrb	r3, [r2, r3]
   1fef6:	b13b      	cbz	r3, 1ff08 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1fef8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1fefc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1ff00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ff04:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1ff08:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1ff0c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1ff10:	2a00      	cmp	r2, #0
   1ff12:	db03      	blt.n	1ff1c <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1ff14:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1ff18:	2b00      	cmp	r3, #0
   1ff1a:	da22      	bge.n	1ff62 <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1ff1c:	4919      	ldr	r1, [pc, #100]	; (1ff84 <SystemInit+0x1c0>)
   1ff1e:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1ff20:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1ff24:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1ff28:	2412      	movs	r4, #18
    nvmc_wait();
   1ff2a:	f7ff ff43 	bl	1fdb4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1ff2e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1ff32:	f7ff ff3f 	bl	1fdb4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1ff36:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1ff3a:	f7ff ff3b 	bl	1fdb4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1ff3e:	2300      	movs	r3, #0
   1ff40:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1ff44:	f7ff ff36 	bl	1fdb4 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1ff48:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1ff4c:	490e      	ldr	r1, [pc, #56]	; (1ff88 <SystemInit+0x1c4>)
   1ff4e:	4b0f      	ldr	r3, [pc, #60]	; (1ff8c <SystemInit+0x1c8>)
   1ff50:	68ca      	ldr	r2, [r1, #12]
   1ff52:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1ff56:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1ff58:	60cb      	str	r3, [r1, #12]
   1ff5a:	f3bf 8f4f 	dsb	sy
    __NOP();
   1ff5e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1ff60:	e7fd      	b.n	1ff5e <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1ff62:	4b0b      	ldr	r3, [pc, #44]	; (1ff90 <SystemInit+0x1cc>)
   1ff64:	4a0b      	ldr	r2, [pc, #44]	; (1ff94 <SystemInit+0x1d0>)
   1ff66:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1ff68:	bd10      	pop	{r4, pc}
   1ff6a:	bf00      	nop
   1ff6c:	4000c000 	.word	0x4000c000
   1ff70:	40005000 	.word	0x40005000
   1ff74:	00038148 	.word	0x00038148
   1ff78:	4000f000 	.word	0x4000f000
   1ff7c:	40029000 	.word	0x40029000
   1ff80:	0002e26c 	.word	0x0002e26c
   1ff84:	4001e000 	.word	0x4001e000
   1ff88:	e000ed00 	.word	0xe000ed00
   1ff8c:	05fa0004 	.word	0x05fa0004
   1ff90:	2000070c 	.word	0x2000070c
   1ff94:	03d09000 	.word	0x03d09000

0001ff98 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1ff98:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1ff9a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1ff9c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1ff9e:	fab2 f382 	clz	r3, r2
   1ffa2:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   1ffa6:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   1ffa8:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   1ffaa:	d014      	beq.n	1ffd6 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ffac:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1ffb0:	fa05 f303 	lsl.w	r3, r5, r3
   1ffb4:	ea22 0303 	bic.w	r3, r2, r3
   1ffb8:	e850 6f00 	ldrex	r6, [r0]
   1ffbc:	4296      	cmp	r6, r2
   1ffbe:	d104      	bne.n	1ffca <nrfx_flag32_alloc+0x32>
   1ffc0:	e840 3c00 	strex	ip, r3, [r0]
   1ffc4:	f1bc 0f00 	cmp.w	ip, #0
   1ffc8:	d1f6      	bne.n	1ffb8 <nrfx_flag32_alloc+0x20>
   1ffca:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1ffce:	d1e5      	bne.n	1ff9c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   1ffd0:	4802      	ldr	r0, [pc, #8]	; (1ffdc <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   1ffd2:	700c      	strb	r4, [r1, #0]
}
   1ffd4:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   1ffd6:	4802      	ldr	r0, [pc, #8]	; (1ffe0 <nrfx_flag32_alloc+0x48>)
   1ffd8:	e7fc      	b.n	1ffd4 <nrfx_flag32_alloc+0x3c>
   1ffda:	bf00      	nop
   1ffdc:	0bad0000 	.word	0x0bad0000
   1ffe0:	0bad0002 	.word	0x0bad0002

0001ffe4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1ffe4:	6803      	ldr	r3, [r0, #0]
   1ffe6:	40cb      	lsrs	r3, r1
   1ffe8:	07db      	lsls	r3, r3, #31
{
   1ffea:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   1ffec:	d415      	bmi.n	2001a <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1ffee:	2301      	movs	r3, #1
   1fff0:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   1fff4:	6803      	ldr	r3, [r0, #0]
   1fff6:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1fffa:	ea41 0203 	orr.w	r2, r1, r3
   1fffe:	e850 4f00 	ldrex	r4, [r0]
   20002:	429c      	cmp	r4, r3
   20004:	d104      	bne.n	20010 <nrfx_flag32_free+0x2c>
   20006:	e840 2c00 	strex	ip, r2, [r0]
   2000a:	f1bc 0f00 	cmp.w	ip, #0
   2000e:	d1f6      	bne.n	1fffe <nrfx_flag32_free+0x1a>
   20010:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   20014:	d1ee      	bne.n	1fff4 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   20016:	4802      	ldr	r0, [pc, #8]	; (20020 <nrfx_flag32_free+0x3c>)
}
   20018:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2001a:	4802      	ldr	r0, [pc, #8]	; (20024 <nrfx_flag32_free+0x40>)
   2001c:	e7fc      	b.n	20018 <nrfx_flag32_free+0x34>
   2001e:	bf00      	nop
   20020:	0bad0000 	.word	0x0bad0000
   20024:	0bad0004 	.word	0x0bad0004

00020028 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   20028:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   2002a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   2002e:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   20030:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   20032:	6002      	str	r2, [r0, #0]
}
   20034:	4802      	ldr	r0, [pc, #8]	; (20040 <nrf_gpio_pin_port_decode+0x18>)
   20036:	bf18      	it	ne
   20038:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   2003c:	4770      	bx	lr
   2003e:	bf00      	nop
   20040:	50000300 	.word	0x50000300

00020044 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   20044:	4b03      	ldr	r3, [pc, #12]	; (20054 <pin_in_use_by_te+0x10>)
   20046:	3008      	adds	r0, #8
   20048:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2004c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   20050:	4770      	bx	lr
   20052:	bf00      	nop
   20054:	20000710 	.word	0x20000710

00020058 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   20058:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2005a:	f100 0308 	add.w	r3, r0, #8
   2005e:	4c0c      	ldr	r4, [pc, #48]	; (20090 <call_handler+0x38>)
   20060:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   20064:	05da      	lsls	r2, r3, #23
{
   20066:	4605      	mov	r5, r0
   20068:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2006a:	d507      	bpl.n	2007c <call_handler+0x24>
   2006c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   20070:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   20074:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   20078:	6852      	ldr	r2, [r2, #4]
   2007a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   2007c:	68a3      	ldr	r3, [r4, #8]
   2007e:	b12b      	cbz	r3, 2008c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   20080:	68e2      	ldr	r2, [r4, #12]
   20082:	4631      	mov	r1, r6
   20084:	4628      	mov	r0, r5
    }
}
   20086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2008a:	4718      	bx	r3
}
   2008c:	bd70      	pop	{r4, r5, r6, pc}
   2008e:	bf00      	nop
   20090:	20000710 	.word	0x20000710

00020094 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   20094:	4a12      	ldr	r2, [pc, #72]	; (200e0 <release_handler+0x4c>)
   20096:	3008      	adds	r0, #8
{
   20098:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2009a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   2009e:	05d9      	lsls	r1, r3, #23
   200a0:	d51b      	bpl.n	200da <release_handler+0x46>
   200a2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   200a6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   200aa:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   200ae:	f102 0410 	add.w	r4, r2, #16
   200b2:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   200b4:	f834 3b02 	ldrh.w	r3, [r4], #2
   200b8:	f413 7f80 	tst.w	r3, #256	; 0x100
   200bc:	d003      	beq.n	200c6 <release_handler+0x32>
   200be:	f3c3 2343 	ubfx	r3, r3, #9, #4
   200c2:	4299      	cmp	r1, r3
   200c4:	d009      	beq.n	200da <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   200c6:	3001      	adds	r0, #1
   200c8:	2830      	cmp	r0, #48	; 0x30
   200ca:	d1f3      	bne.n	200b4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   200cc:	2300      	movs	r3, #0
   200ce:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   200d2:	4804      	ldr	r0, [pc, #16]	; (200e4 <release_handler+0x50>)
}
   200d4:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   200d6:	f7ff bf85 	b.w	1ffe4 <nrfx_flag32_free>
}
   200da:	bc10      	pop	{r4}
   200dc:	4770      	bx	lr
   200de:	bf00      	nop
   200e0:	20000710 	.word	0x20000710
   200e4:	20000784 	.word	0x20000784

000200e8 <pin_handler_trigger_uninit>:
{
   200e8:	b538      	push	{r3, r4, r5, lr}
   200ea:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   200ec:	f7ff ffaa 	bl	20044 <pin_in_use_by_te>
   200f0:	4c09      	ldr	r4, [pc, #36]	; (20118 <pin_handler_trigger_uninit+0x30>)
   200f2:	f102 0508 	add.w	r5, r2, #8
   200f6:	b140      	cbz	r0, 2010a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   200f8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   200fc:	4907      	ldr	r1, [pc, #28]	; (2011c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   200fe:	0b5b      	lsrs	r3, r3, #13
   20100:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   20104:	2000      	movs	r0, #0
   20106:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   2010a:	4610      	mov	r0, r2
   2010c:	f7ff ffc2 	bl	20094 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   20110:	2300      	movs	r3, #0
   20112:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   20116:	bd38      	pop	{r3, r4, r5, pc}
   20118:	20000710 	.word	0x20000710
   2011c:	40006000 	.word	0x40006000

00020120 <nrfx_gpiote_input_configure>:
{
   20120:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   20124:	4604      	mov	r4, r0
   20126:	4617      	mov	r7, r2
   20128:	461d      	mov	r5, r3
    if (p_input_config)
   2012a:	b321      	cbz	r1, 20176 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2012c:	4e4e      	ldr	r6, [pc, #312]	; (20268 <nrfx_gpiote_input_configure+0x148>)
   2012e:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   20132:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   20136:	079b      	lsls	r3, r3, #30
   20138:	d506      	bpl.n	20148 <nrfx_gpiote_input_configure+0x28>
   2013a:	f7ff ff83 	bl	20044 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   2013e:	b118      	cbz	r0, 20148 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   20140:	484a      	ldr	r0, [pc, #296]	; (2026c <nrfx_gpiote_input_configure+0x14c>)
}
   20142:	b004      	add	sp, #16
   20144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   20148:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2014a:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   2014e:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   20152:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   20156:	f10d 020f 	add.w	r2, sp, #15
   2015a:	460b      	mov	r3, r1
   2015c:	4620      	mov	r0, r4
   2015e:	f10d 010e 	add.w	r1, sp, #14
   20162:	f009 fc49 	bl	299f8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   20166:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   2016a:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2016e:	f043 0301 	orr.w	r3, r3, #1
   20172:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   20176:	b197      	cbz	r7, 2019e <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20178:	4b3b      	ldr	r3, [pc, #236]	; (20268 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   2017a:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   2017c:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2017e:	f104 0008 	add.w	r0, r4, #8
   20182:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   20186:	078f      	lsls	r7, r1, #30
   20188:	d50c      	bpl.n	201a4 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   2018a:	2a00      	cmp	r2, #0
   2018c:	d1d8      	bne.n	20140 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   2018e:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   20192:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   20196:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   2019a:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   2019e:	bbcd      	cbnz	r5, 20214 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   201a0:	4833      	ldr	r0, [pc, #204]	; (20270 <nrfx_gpiote_input_configure+0x150>)
   201a2:	e7ce      	b.n	20142 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   201a4:	f021 0120 	bic.w	r1, r1, #32
   201a8:	04c9      	lsls	r1, r1, #19
   201aa:	0cc9      	lsrs	r1, r1, #19
   201ac:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   201b0:	2a00      	cmp	r2, #0
   201b2:	d0ec      	beq.n	2018e <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   201b4:	2e03      	cmp	r6, #3
   201b6:	d8c3      	bhi.n	20140 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   201b8:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   201ba:	b92e      	cbnz	r6, 201c8 <nrfx_gpiote_input_configure+0xa8>
   201bc:	4a2d      	ldr	r2, [pc, #180]	; (20274 <nrfx_gpiote_input_configure+0x154>)
   201be:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   201c2:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   201c6:	e7e2      	b.n	2018e <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   201c8:	00ba      	lsls	r2, r7, #2
   201ca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   201ce:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   201d2:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   201d6:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   201da:	f02c 0c03 	bic.w	ip, ip, #3
   201de:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   201e2:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   201e6:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   201ea:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   201ee:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   201f2:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   201f6:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   201fa:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   201fe:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   20202:	ea4c 0c0e 	orr.w	ip, ip, lr
   20206:	f041 0120 	orr.w	r1, r1, #32
   2020a:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   2020e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   20212:	e7bc      	b.n	2018e <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   20214:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   20218:	4620      	mov	r0, r4
   2021a:	f7ff ff3b 	bl	20094 <release_handler>
    if (!handler)
   2021e:	2e00      	cmp	r6, #0
   20220:	d0be      	beq.n	201a0 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   20222:	4d11      	ldr	r5, [pc, #68]	; (20268 <nrfx_gpiote_input_configure+0x148>)
   20224:	682b      	ldr	r3, [r5, #0]
   20226:	429e      	cmp	r6, r3
   20228:	d104      	bne.n	20234 <nrfx_gpiote_input_configure+0x114>
   2022a:	686b      	ldr	r3, [r5, #4]
   2022c:	429f      	cmp	r7, r3
   2022e:	d101      	bne.n	20234 <nrfx_gpiote_input_configure+0x114>
   20230:	2200      	movs	r2, #0
   20232:	e00a      	b.n	2024a <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   20234:	4810      	ldr	r0, [pc, #64]	; (20278 <nrfx_gpiote_input_configure+0x158>)
   20236:	f10d 010f 	add.w	r1, sp, #15
   2023a:	f7ff fead 	bl	1ff98 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   2023e:	4b0c      	ldr	r3, [pc, #48]	; (20270 <nrfx_gpiote_input_configure+0x150>)
   20240:	4298      	cmp	r0, r3
   20242:	f47f af7e 	bne.w	20142 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   20246:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   2024a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   2024e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   20252:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   20254:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   20256:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   2025a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   2025e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   20262:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   20266:	e79b      	b.n	201a0 <nrfx_gpiote_input_configure+0x80>
   20268:	20000710 	.word	0x20000710
   2026c:	0bad0004 	.word	0x0bad0004
   20270:	0bad0000 	.word	0x0bad0000
   20274:	40006000 	.word	0x40006000
   20278:	20000784 	.word	0x20000784

0002027c <nrfx_gpiote_output_configure>:
{
   2027c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2027e:	4604      	mov	r4, r0
   20280:	b085      	sub	sp, #20
   20282:	4615      	mov	r5, r2
    if (p_config)
   20284:	b319      	cbz	r1, 202ce <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20286:	4e33      	ldr	r6, [pc, #204]	; (20354 <nrfx_gpiote_output_configure+0xd8>)
   20288:	f100 0708 	add.w	r7, r0, #8
   2028c:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   20290:	0793      	lsls	r3, r2, #30
   20292:	d403      	bmi.n	2029c <nrfx_gpiote_output_configure+0x20>
   20294:	f7ff fed6 	bl	20044 <pin_in_use_by_te>
   20298:	2800      	cmp	r0, #0
   2029a:	d158      	bne.n	2034e <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   2029c:	f012 0f1c 	tst.w	r2, #28
   202a0:	d002      	beq.n	202a8 <nrfx_gpiote_output_configure+0x2c>
   202a2:	784b      	ldrb	r3, [r1, #1]
   202a4:	2b01      	cmp	r3, #1
   202a6:	d052      	beq.n	2034e <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   202a8:	2301      	movs	r3, #1
   202aa:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   202ae:	2300      	movs	r3, #0
   202b0:	e9cd 1300 	strd	r1, r3, [sp]
   202b4:	1c4a      	adds	r2, r1, #1
   202b6:	1c8b      	adds	r3, r1, #2
   202b8:	4620      	mov	r0, r4
   202ba:	f10d 010f 	add.w	r1, sp, #15
   202be:	f009 fb9b 	bl	299f8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   202c2:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   202c6:	f043 0303 	orr.w	r3, r3, #3
   202ca:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   202ce:	b915      	cbnz	r5, 202d6 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   202d0:	4821      	ldr	r0, [pc, #132]	; (20358 <nrfx_gpiote_output_configure+0xdc>)
}
   202d2:	b005      	add	sp, #20
   202d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   202d6:	4e1f      	ldr	r6, [pc, #124]	; (20354 <nrfx_gpiote_output_configure+0xd8>)
   202d8:	f104 0708 	add.w	r7, r4, #8
   202dc:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   202e0:	0783      	lsls	r3, r0, #30
   202e2:	d534      	bpl.n	2034e <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   202e4:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   202e8:	4661      	mov	r1, ip
   202ea:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   202ec:	f020 0020 	bic.w	r0, r0, #32
   202f0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   202f4:	04c0      	lsls	r0, r0, #19
   202f6:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   202fa:	0cc0      	lsrs	r0, r0, #19
   202fc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   20300:	2300      	movs	r3, #0
   20302:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   20306:	786a      	ldrb	r2, [r5, #1]
   20308:	2a00      	cmp	r2, #0
   2030a:	d0e1      	beq.n	202d0 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   2030c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   20310:	78ad      	ldrb	r5, [r5, #2]
   20312:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   20316:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2031a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2031e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   20322:	0223      	lsls	r3, r4, #8
   20324:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   20328:	0412      	lsls	r2, r2, #16
   2032a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2032e:	ea43 030e 	orr.w	r3, r3, lr
   20332:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   20334:	052a      	lsls	r2, r5, #20
   20336:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2033a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2033e:	4313      	orrs	r3, r2
   20340:	f040 0020 	orr.w	r0, r0, #32
   20344:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   20348:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   2034c:	e7c0      	b.n	202d0 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   2034e:	4803      	ldr	r0, [pc, #12]	; (2035c <nrfx_gpiote_output_configure+0xe0>)
   20350:	e7bf      	b.n	202d2 <nrfx_gpiote_output_configure+0x56>
   20352:	bf00      	nop
   20354:	20000710 	.word	0x20000710
   20358:	0bad0000 	.word	0x0bad0000
   2035c:	0bad0004 	.word	0x0bad0004

00020360 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   20360:	4b01      	ldr	r3, [pc, #4]	; (20368 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   20362:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   20366:	4770      	bx	lr
   20368:	20000710 	.word	0x20000710

0002036c <nrfx_gpiote_channel_get>:
{
   2036c:	b508      	push	{r3, lr}
   2036e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   20370:	f7ff fe68 	bl	20044 <pin_in_use_by_te>
   20374:	b138      	cbz	r0, 20386 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20376:	4b05      	ldr	r3, [pc, #20]	; (2038c <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   20378:	4805      	ldr	r0, [pc, #20]	; (20390 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2037a:	3208      	adds	r2, #8
   2037c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   20380:	0b5b      	lsrs	r3, r3, #13
   20382:	700b      	strb	r3, [r1, #0]
}
   20384:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   20386:	4803      	ldr	r0, [pc, #12]	; (20394 <nrfx_gpiote_channel_get+0x28>)
   20388:	e7fc      	b.n	20384 <nrfx_gpiote_channel_get+0x18>
   2038a:	bf00      	nop
   2038c:	20000710 	.word	0x20000710
   20390:	0bad0000 	.word	0x0bad0000
   20394:	0bad0004 	.word	0x0bad0004

00020398 <nrfx_gpiote_init>:
{
   20398:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2039a:	4c0f      	ldr	r4, [pc, #60]	; (203d8 <nrfx_gpiote_init+0x40>)
   2039c:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   203a0:	b9bd      	cbnz	r5, 203d2 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   203a2:	2260      	movs	r2, #96	; 0x60
   203a4:	4629      	mov	r1, r5
   203a6:	f104 0010 	add.w	r0, r4, #16
   203aa:	f006 fcc0 	bl	26d2e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   203ae:	2006      	movs	r0, #6
   203b0:	f7f3 feaa 	bl	14108 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   203b4:	4b09      	ldr	r3, [pc, #36]	; (203dc <nrfx_gpiote_init+0x44>)
    return err_code;
   203b6:	480a      	ldr	r0, [pc, #40]	; (203e0 <nrfx_gpiote_init+0x48>)
   203b8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   203bc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   203c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   203c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   203c8:	2301      	movs	r3, #1
   203ca:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   203ce:	6763      	str	r3, [r4, #116]	; 0x74
}
   203d0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   203d2:	4804      	ldr	r0, [pc, #16]	; (203e4 <nrfx_gpiote_init+0x4c>)
   203d4:	e7fc      	b.n	203d0 <nrfx_gpiote_init+0x38>
   203d6:	bf00      	nop
   203d8:	20000710 	.word	0x20000710
   203dc:	40006000 	.word	0x40006000
   203e0:	0bad0000 	.word	0x0bad0000
   203e4:	0bad0005 	.word	0x0bad0005

000203e8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   203e8:	4b03      	ldr	r3, [pc, #12]	; (203f8 <nrfx_gpiote_is_init+0x10>)
   203ea:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   203ee:	3800      	subs	r0, #0
   203f0:	bf18      	it	ne
   203f2:	2001      	movne	r0, #1
   203f4:	4770      	bx	lr
   203f6:	bf00      	nop
   203f8:	20000710 	.word	0x20000710

000203fc <nrfx_gpiote_channel_free>:
{
   203fc:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   203fe:	4801      	ldr	r0, [pc, #4]	; (20404 <nrfx_gpiote_channel_free+0x8>)
   20400:	f7ff bdf0 	b.w	1ffe4 <nrfx_flag32_free>
   20404:	20000780 	.word	0x20000780

00020408 <nrfx_gpiote_channel_alloc>:
{
   20408:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   2040a:	4801      	ldr	r0, [pc, #4]	; (20410 <nrfx_gpiote_channel_alloc+0x8>)
   2040c:	f7ff bdc4 	b.w	1ff98 <nrfx_flag32_alloc>
   20410:	20000780 	.word	0x20000780

00020414 <nrfx_gpiote_trigger_enable>:
{
   20414:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20416:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20418:	f7ff fe14 	bl	20044 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2041c:	f104 0208 	add.w	r2, r4, #8
   20420:	4b1e      	ldr	r3, [pc, #120]	; (2049c <nrfx_gpiote_trigger_enable+0x88>)
   20422:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20426:	b1e8      	cbz	r0, 20464 <nrfx_gpiote_trigger_enable+0x50>
   20428:	f013 0502 	ands.w	r5, r3, #2
   2042c:	d11a      	bne.n	20464 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2042e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   20430:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   20432:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   20436:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   2043a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2043e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20442:	6005      	str	r5, [r0, #0]
   20444:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   20446:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   2044a:	f040 0001 	orr.w	r0, r0, #1
   2044e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   20452:	b129      	cbz	r1, 20460 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   20454:	2201      	movs	r2, #1
   20456:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   2045a:	4a11      	ldr	r2, [pc, #68]	; (204a0 <nrfx_gpiote_trigger_enable+0x8c>)
   2045c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   20460:	b003      	add	sp, #12
   20462:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20464:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   20468:	2b04      	cmp	r3, #4
   2046a:	d012      	beq.n	20492 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   2046c:	2b05      	cmp	r3, #5
   2046e:	d012      	beq.n	20496 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20470:	a801      	add	r0, sp, #4
   20472:	9401      	str	r4, [sp, #4]
   20474:	f7ff fdd8 	bl	20028 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   20478:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   2047a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2047e:	40d9      	lsrs	r1, r3
   20480:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   20484:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   20486:	4620      	mov	r0, r4
}
   20488:	b003      	add	sp, #12
   2048a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   2048e:	f009 bafa 	b.w	29a86 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   20492:	2103      	movs	r1, #3
   20494:	e7f7      	b.n	20486 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   20496:	2102      	movs	r1, #2
   20498:	e7f5      	b.n	20486 <nrfx_gpiote_trigger_enable+0x72>
   2049a:	bf00      	nop
   2049c:	20000710 	.word	0x20000710
   204a0:	40006000 	.word	0x40006000

000204a4 <nrfx_gpiote_trigger_disable>:
{
   204a4:	b508      	push	{r3, lr}
   204a6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   204a8:	f7ff fdcc 	bl	20044 <pin_in_use_by_te>
   204ac:	b1c0      	cbz	r0, 204e0 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   204ae:	f102 0108 	add.w	r1, r2, #8
   204b2:	4b0e      	ldr	r3, [pc, #56]	; (204ec <nrfx_gpiote_trigger_disable+0x48>)
   204b4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   204b8:	0799      	lsls	r1, r3, #30
   204ba:	d411      	bmi.n	204e0 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   204bc:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   204be:	2201      	movs	r2, #1
   204c0:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   204c2:	009b      	lsls	r3, r3, #2
   204c4:	490a      	ldr	r1, [pc, #40]	; (204f0 <nrfx_gpiote_trigger_disable+0x4c>)
   204c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   204ca:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   204ce:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   204d2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   204d6:	f022 0203 	bic.w	r2, r2, #3
   204da:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   204de:	bd08      	pop	{r3, pc}
   204e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   204e4:	2100      	movs	r1, #0
   204e6:	4610      	mov	r0, r2
   204e8:	f009 bacd 	b.w	29a86 <nrf_gpio_cfg_sense_set>
   204ec:	20000710 	.word	0x20000710
   204f0:	40006000 	.word	0x40006000

000204f4 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   204f4:	4b0e      	ldr	r3, [pc, #56]	; (20530 <nrfx_gpiote_pin_uninit+0x3c>)
   204f6:	f100 0208 	add.w	r2, r0, #8
{
   204fa:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   204fc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   20500:	07db      	lsls	r3, r3, #31
{
   20502:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   20504:	d511      	bpl.n	2052a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   20506:	f7ff ffcd 	bl	204a4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   2050a:	4620      	mov	r0, r4
   2050c:	f7ff fdec 	bl	200e8 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20510:	a801      	add	r0, sp, #4
   20512:	9401      	str	r4, [sp, #4]
   20514:	f7ff fd88 	bl	20028 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   20518:	9b01      	ldr	r3, [sp, #4]
   2051a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2051e:	2202      	movs	r2, #2
   20520:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   20524:	4803      	ldr	r0, [pc, #12]	; (20534 <nrfx_gpiote_pin_uninit+0x40>)
}
   20526:	b002      	add	sp, #8
   20528:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2052a:	4803      	ldr	r0, [pc, #12]	; (20538 <nrfx_gpiote_pin_uninit+0x44>)
   2052c:	e7fb      	b.n	20526 <nrfx_gpiote_pin_uninit+0x32>
   2052e:	bf00      	nop
   20530:	20000710 	.word	0x20000710
   20534:	0bad0000 	.word	0x0bad0000
   20538:	0bad0004 	.word	0x0bad0004

0002053c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   2053c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20540:	4b64      	ldr	r3, [pc, #400]	; (206d4 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   20542:	4865      	ldr	r0, [pc, #404]	; (206d8 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20544:	4965      	ldr	r1, [pc, #404]	; (206dc <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   20546:	2600      	movs	r6, #0
{
   20548:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   2054a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2054c:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2054e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   20550:	b135      	cbz	r5, 20560 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   20552:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   20556:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20558:	bf1e      	ittt	ne
   2055a:	601c      	strne	r4, [r3, #0]
   2055c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   2055e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20560:	3304      	adds	r3, #4
   20562:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   20564:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20568:	d1f1      	bne.n	2054e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2056a:	f8df 816c 	ldr.w	r8, [pc, #364]	; 206d8 <nrfx_gpiote_irq_handler+0x19c>
   2056e:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   20572:	2b00      	cmp	r3, #0
   20574:	f000 8091 	beq.w	2069a <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   20578:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   2057c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   20580:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   20582:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   20586:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   2058a:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   2058c:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   20590:	2700      	movs	r7, #0
            while (latch[i])
   20592:	f10d 0910 	add.w	r9, sp, #16
   20596:	017b      	lsls	r3, r7, #5
   20598:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   2059a:	f04f 0a01 	mov.w	sl, #1
   2059e:	e049      	b.n	20634 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   205a0:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   205a2:	4a4f      	ldr	r2, [pc, #316]	; (206e0 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   205a4:	fa94 f4a4 	rbit	r4, r4
   205a8:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   205ac:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   205ae:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   205b2:	08e0      	lsrs	r0, r4, #3
   205b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   205b8:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   205ba:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   205be:	fa0a fc02 	lsl.w	ip, sl, r2
   205c2:	f819 2000 	ldrb.w	r2, [r9, r0]
   205c6:	ea22 020c 	bic.w	r2, r2, ip
   205ca:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   205ce:	a803      	add	r0, sp, #12
   205d0:	f3c3 0582 	ubfx	r5, r3, #2, #3
   205d4:	0899      	lsrs	r1, r3, #2
   205d6:	f7ff fd27 	bl	20028 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   205da:	9a03      	ldr	r2, [sp, #12]
   205dc:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   205e0:	074b      	lsls	r3, r1, #29
   205e2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   205e6:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   205e8:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   205ec:	d529      	bpl.n	20642 <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   205ee:	4620      	mov	r0, r4
   205f0:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   205f2:	b2d5      	uxtb	r5, r2
   205f4:	f7ff fd30 	bl	20058 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   205f8:	a803      	add	r0, sp, #12
   205fa:	9403      	str	r4, [sp, #12]
   205fc:	f7ff fd14 	bl	20028 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   20600:	9b03      	ldr	r3, [sp, #12]
   20602:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20606:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   2060a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   2060e:	429d      	cmp	r5, r3
   20610:	d107      	bne.n	20622 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   20612:	2100      	movs	r1, #0
   20614:	4620      	mov	r0, r4
   20616:	f009 fa36 	bl	29a86 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   2061a:	4629      	mov	r1, r5
   2061c:	4620      	mov	r0, r4
   2061e:	f009 fa32 	bl	29a86 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20622:	a803      	add	r0, sp, #12
   20624:	9403      	str	r4, [sp, #12]
   20626:	f7ff fcff 	bl	20028 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   2062a:	9b03      	ldr	r3, [sp, #12]
   2062c:	fa0a f303 	lsl.w	r3, sl, r3
   20630:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   20634:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   20638:	2c00      	cmp	r4, #0
   2063a:	d1b1      	bne.n	205a0 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   2063c:	b9cf      	cbnz	r7, 20672 <nrfx_gpiote_irq_handler+0x136>
   2063e:	2701      	movs	r7, #1
   20640:	e7a9      	b.n	20596 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   20642:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   20644:	bf0c      	ite	eq
   20646:	2103      	moveq	r1, #3
   20648:	2102      	movne	r1, #2
   2064a:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2064c:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   2064e:	f009 fa1a 	bl	29a86 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   20652:	2d03      	cmp	r5, #3
   20654:	d004      	beq.n	20660 <nrfx_gpiote_irq_handler+0x124>
   20656:	9a01      	ldr	r2, [sp, #4]
   20658:	2a02      	cmp	r2, #2
   2065a:	d106      	bne.n	2066a <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   2065c:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   2065e:	d1e0      	bne.n	20622 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   20660:	4659      	mov	r1, fp
   20662:	4620      	mov	r0, r4
   20664:	f7ff fcf8 	bl	20058 <call_handler>
   20668:	e7db      	b.n	20622 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   2066a:	2a03      	cmp	r2, #3
   2066c:	d1d9      	bne.n	20622 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   2066e:	2d02      	cmp	r5, #2
   20670:	e7f5      	b.n	2065e <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20672:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   20676:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   2067a:	491a      	ldr	r1, [pc, #104]	; (206e4 <nrfx_gpiote_irq_handler+0x1a8>)
   2067c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   20680:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   20684:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   20686:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   2068a:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   2068e:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   20690:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   20694:	4313      	orrs	r3, r2
   20696:	f47f af7b 	bne.w	20590 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   2069a:	2401      	movs	r4, #1
    while (mask)
   2069c:	b916      	cbnz	r6, 206a4 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   2069e:	b007      	add	sp, #28
   206a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   206a4:	fa96 f3a6 	rbit	r3, r6
   206a8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   206ac:	fa04 f203 	lsl.w	r2, r4, r3
   206b0:	009b      	lsls	r3, r3, #2
   206b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   206b6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   206ba:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   206be:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   206c2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   206c6:	f3c0 2005 	ubfx	r0, r0, #8, #6
   206ca:	f3c1 4101 	ubfx	r1, r1, #16, #2
   206ce:	f7ff fcc3 	bl	20058 <call_handler>
   206d2:	e7e3      	b.n	2069c <nrfx_gpiote_irq_handler+0x160>
   206d4:	40006100 	.word	0x40006100
   206d8:	40006000 	.word	0x40006000
   206dc:	40006120 	.word	0x40006120
   206e0:	20000710 	.word	0x20000710
   206e4:	50000300 	.word	0x50000300

000206e8 <nvmc_word_write>:
   206e8:	4a04      	ldr	r2, [pc, #16]	; (206fc <nvmc_word_write+0x14>)
   206ea:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   206ee:	07db      	lsls	r3, r3, #31
   206f0:	d5fb      	bpl.n	206ea <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   206f2:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   206f4:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   206f8:	4770      	bx	lr
   206fa:	bf00      	nop
   206fc:	4001e000 	.word	0x4001e000

00020700 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   20700:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20704:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   20706:	fbb0 f3f2 	udiv	r3, r0, r2
   2070a:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   2070e:	b973      	cbnz	r3, 2072e <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   20710:	4b08      	ldr	r3, [pc, #32]	; (20734 <nrfx_nvmc_page_erase+0x34>)
   20712:	2202      	movs	r2, #2
   20714:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   20718:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2071c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   20720:	07d2      	lsls	r2, r2, #31
   20722:	d5fb      	bpl.n	2071c <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   20724:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   20726:	4804      	ldr	r0, [pc, #16]	; (20738 <nrfx_nvmc_page_erase+0x38>)
   20728:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   2072c:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   2072e:	4803      	ldr	r0, [pc, #12]	; (2073c <nrfx_nvmc_page_erase+0x3c>)
}
   20730:	4770      	bx	lr
   20732:	bf00      	nop
   20734:	4001e000 	.word	0x4001e000
   20738:	0bad0000 	.word	0x0bad0000
   2073c:	0bad000a 	.word	0x0bad000a

00020740 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   20740:	b510      	push	{r4, lr}
   20742:	4c05      	ldr	r4, [pc, #20]	; (20758 <nrfx_nvmc_word_write+0x18>)
   20744:	2301      	movs	r3, #1
   20746:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   2074a:	f7ff ffcd 	bl	206e8 <nvmc_word_write>
   2074e:	2300      	movs	r3, #0
   20750:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   20754:	bd10      	pop	{r4, pc}
   20756:	bf00      	nop
   20758:	4001e000 	.word	0x4001e000

0002075c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   2075c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   2075e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   20762:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   20764:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   20766:	6002      	str	r2, [r0, #0]
}
   20768:	4802      	ldr	r0, [pc, #8]	; (20774 <nrf_gpio_pin_port_decode+0x18>)
   2076a:	bf18      	it	ne
   2076c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   20770:	4770      	bx	lr
   20772:	bf00      	nop
   20774:	50000300 	.word	0x50000300

00020778 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   20778:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   2077c:	7907      	ldrb	r7, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2077e:	4c51      	ldr	r4, [pc, #324]	; (208c4 <nrfx_spi_init+0x14c>)
   20780:	f04f 0c28 	mov.w	ip, #40	; 0x28
   20784:	fb0c fc07 	mul.w	ip, ip, r7
{
   20788:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2078a:	eb04 000c 	add.w	r0, r4, ip
   2078e:	7f05      	ldrb	r5, [r0, #28]
   20790:	2d00      	cmp	r5, #0
   20792:	f040 8095 	bne.w	208c0 <nrfx_spi_init+0x148>
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   20796:	6835      	ldr	r5, [r6, #0]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   20798:	6043      	str	r3, [r0, #4]
    p_cb->handler = handler;
   2079a:	f844 200c 	str.w	r2, [r4, ip]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   2079e:	7bcb      	ldrb	r3, [r1, #15]
   207a0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
   207a4:	78ca      	ldrb	r2, [r1, #3]
   207a6:	7782      	strb	r2, [r0, #30]
    p_cb->orc = p_config->orc;
   207a8:	794a      	ldrb	r2, [r1, #5]
   207aa:	77c2      	strb	r2, [r0, #31]
    if (!p_config->skip_gpio_cfg)
   207ac:	2b00      	cmp	r3, #0
   207ae:	d140      	bne.n	20832 <nrfx_spi_init+0xba>
    if (value == 0)
   207b0:	7b0b      	ldrb	r3, [r1, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
   207b2:	7808      	ldrb	r0, [r1, #0]
   207b4:	2b01      	cmp	r3, #1
   207b6:	d87a      	bhi.n	208ae <nrfx_spi_init+0x136>
        nrf_gpio_pin_clear(pin_number);
   207b8:	f009 f99d 	bl	29af6 <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   207bc:	780b      	ldrb	r3, [r1, #0]
   207be:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   207c0:	a801      	add	r0, sp, #4
   207c2:	f7ff ffcb 	bl	2075c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   207c6:	9b01      	ldr	r3, [sp, #4]
   207c8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   207cc:	2201      	movs	r2, #1
   207ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   207d2:	7848      	ldrb	r0, [r1, #1]
   207d4:	28ff      	cmp	r0, #255	; 0xff
   207d6:	d00c      	beq.n	207f2 <nrfx_spi_init+0x7a>
        nrf_gpio_pin_clear(pin_number);
   207d8:	f009 f98d 	bl	29af6 <nrf_gpio_pin_clear>
            nrf_gpio_cfg_output(p_config->mosi_pin);
   207dc:	784b      	ldrb	r3, [r1, #1]
   207de:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   207e0:	a801      	add	r0, sp, #4
   207e2:	f7ff ffbb 	bl	2075c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   207e6:	9b01      	ldr	r3, [sp, #4]
   207e8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   207ec:	2203      	movs	r2, #3
   207ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   207f2:	788b      	ldrb	r3, [r1, #2]
   207f4:	2bff      	cmp	r3, #255	; 0xff
   207f6:	d00c      	beq.n	20812 <nrfx_spi_init+0x9a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   207f8:	a801      	add	r0, sp, #4
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
   207fa:	f891 800e 	ldrb.w	r8, [r1, #14]
   207fe:	9301      	str	r3, [sp, #4]
   20800:	f7ff ffac 	bl	2075c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   20804:	9b01      	ldr	r3, [sp, #4]
   20806:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2080a:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   2080e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   20812:	78c8      	ldrb	r0, [r1, #3]
   20814:	28ff      	cmp	r0, #255	; 0xff
   20816:	d00c      	beq.n	20832 <nrfx_spi_init+0xba>
        nrf_gpio_pin_set(pin_number);
   20818:	f009 f960 	bl	29adc <nrf_gpio_pin_set>
            nrf_gpio_cfg_output(p_config->ss_pin);
   2081c:	78cb      	ldrb	r3, [r1, #3]
   2081e:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20820:	a801      	add	r0, sp, #4
   20822:	f7ff ff9b 	bl	2075c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   20826:	9b01      	ldr	r3, [sp, #4]
   20828:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2082c:	2203      	movs	r2, #3
   2082e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   20832:	7c0b      	ldrb	r3, [r1, #16]
   20834:	b993      	cbnz	r3, 2085c <nrfx_spi_init+0xe4>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   20836:	784b      	ldrb	r3, [r1, #1]
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   20838:	7808      	ldrb	r0, [r1, #0]
                            : NRF_SPI_PIN_NOT_CONNECTED;
   2083a:	2bff      	cmp	r3, #255	; 0xff
   2083c:	bf18      	it	ne
   2083e:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   20840:	788b      	ldrb	r3, [r1, #2]
                                        uint32_t       sck_pin,
                                        uint32_t       mosi_pin,
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
   20842:	f8c5 0508 	str.w	r0, [r5, #1288]	; 0x508
                            : NRF_SPI_PIN_NOT_CONNECTED;
   20846:	bf08      	it	eq
   20848:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPI_PIN_NOT_CONNECTED;
   2084c:	2bff      	cmp	r3, #255	; 0xff
   2084e:	bf08      	it	eq
   20850:	f04f 33ff 	moveq.w	r3, #4294967295
#else
    p_reg->PSELSCK  = sck_pin;
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
   20854:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
#else
    p_reg->PSELMOSI = mosi_pin;
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
   20858:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   2085c:	688b      	ldr	r3, [r1, #8]
   2085e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   20862:	7b4b      	ldrb	r3, [r1, #13]

    configure_pins(p_spi, p_config);

    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   20864:	7b0a      	ldrb	r2, [r1, #12]
   20866:	3b00      	subs	r3, #0
   20868:	bf18      	it	ne
   2086a:	2301      	movne	r3, #1
    switch (spi_mode)
   2086c:	2a02      	cmp	r2, #2
   2086e:	d021      	beq.n	208b4 <nrfx_spi_init+0x13c>
   20870:	2a03      	cmp	r2, #3
   20872:	d022      	beq.n	208ba <nrfx_spi_init+0x142>
   20874:	2a01      	cmp	r2, #1
   20876:	d101      	bne.n	2087c <nrfx_spi_init+0x104>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   20878:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   2087c:	f8c5 3554 	str.w	r3, [r5, #1364]	; 0x554
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   20880:	2301      	movs	r3, #1
   20882:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   20886:	2328      	movs	r3, #40	; 0x28
   20888:	437b      	muls	r3, r7
   2088a:	58e3      	ldr	r3, [r4, r3]
   2088c:	b123      	cbz	r3, 20898 <nrfx_spi_init+0x120>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   2088e:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   20890:	f340 3007 	sbfx	r0, r0, #12, #8
   20894:	f7f3 fc38 	bl	14108 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   20898:	2328      	movs	r3, #40	; 0x28
   2089a:	fb03 4407 	mla	r4, r3, r7, r4
   2089e:	2300      	movs	r3, #0
   208a0:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   208a2:	4809      	ldr	r0, [pc, #36]	; (208c8 <nrfx_spi_init+0x150>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   208a4:	2301      	movs	r3, #1
   208a6:	7723      	strb	r3, [r4, #28]
}
   208a8:	b002      	add	sp, #8
   208aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_set(pin_number);
   208ae:	f009 f915 	bl	29adc <nrf_gpio_pin_set>
   208b2:	e783      	b.n	207bc <nrfx_spi_init+0x44>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   208b4:	f043 0304 	orr.w	r3, r3, #4
        break;
   208b8:	e7e0      	b.n	2087c <nrfx_spi_init+0x104>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   208ba:	f043 0306 	orr.w	r3, r3, #6
        break;
   208be:	e7dd      	b.n	2087c <nrfx_spi_init+0x104>
        return err_code;
   208c0:	4802      	ldr	r0, [pc, #8]	; (208cc <nrfx_spi_init+0x154>)
   208c2:	e7f1      	b.n	208a8 <nrfx_spi_init+0x130>
   208c4:	20002ebc 	.word	0x20002ebc
   208c8:	0bad0000 	.word	0x0bad0000
   208cc:	0bad0005 	.word	0x0bad0005

000208d0 <nrfx_spi_uninit>:

void nrfx_spi_uninit(nrfx_spi_t const * p_instance)
{
   208d0:	b570      	push	{r4, r5, r6, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   208d2:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPI_Type * p_spi = p_instance->p_reg;

    if (p_cb->handler)
   208d4:	4c19      	ldr	r4, [pc, #100]	; (2093c <nrfx_spi_uninit+0x6c>)
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   208d6:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
   208d8:	2328      	movs	r3, #40	; 0x28
   208da:	4373      	muls	r3, r6
   208dc:	58e3      	ldr	r3, [r4, r3]
   208de:	b133      	cbz	r3, 208ee <nrfx_spi_uninit+0x1e>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   208e0:	f345 3007 	sbfx	r0, r5, #12, #8
   208e4:	f7f3 fc20 	bl	14128 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   208e8:	2304      	movs	r3, #4
   208ea:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
   208ee:	2300      	movs	r3, #0
   208f0:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        nrf_spi_int_disable(p_spi, NRF_SPI_ALL_INTS_MASK);
    }

    nrf_spi_disable(p_spi);

    if (!p_cb->skip_gpio_cfg)
   208f4:	2328      	movs	r3, #40	; 0x28
   208f6:	fb03 4306 	mla	r3, r3, r6, r4
   208fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   208fe:	b9bb      	cbnz	r3, 20930 <nrfx_spi_uninit+0x60>
    return p_reg->PSEL.SCK;
   20900:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    {
        nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));
   20904:	f009 f8dc 	bl	29ac0 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MISO;
   20908:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510

        uint32_t miso_pin = nrf_spi_miso_pin_get(p_spi);
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
   2090c:	1c42      	adds	r2, r0, #1
   2090e:	d001      	beq.n	20914 <nrfx_spi_uninit+0x44>
        {
            nrf_gpio_cfg_default(miso_pin);
   20910:	f009 f8d6 	bl	29ac0 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MOSI;
   20914:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
        }

        uint32_t mosi_pin = nrf_spi_mosi_pin_get(p_spi);
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
   20918:	1c43      	adds	r3, r0, #1
   2091a:	d001      	beq.n	20920 <nrfx_spi_uninit+0x50>
        {
            nrf_gpio_cfg_default(mosi_pin);
   2091c:	f009 f8d0 	bl	29ac0 <nrf_gpio_cfg_default>
        }

        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   20920:	2328      	movs	r3, #40	; 0x28
   20922:	fb03 4306 	mla	r3, r3, r6, r4
   20926:	7f98      	ldrb	r0, [r3, #30]
   20928:	28ff      	cmp	r0, #255	; 0xff
   2092a:	d001      	beq.n	20930 <nrfx_spi_uninit+0x60>
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
   2092c:	f009 f8c8 	bl	29ac0 <nrf_gpio_cfg_default>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   20930:	2328      	movs	r3, #40	; 0x28
   20932:	fb03 4406 	mla	r4, r3, r6, r4
   20936:	2300      	movs	r3, #0
   20938:	7723      	strb	r3, [r4, #28]
}
   2093a:	bd70      	pop	{r4, r5, r6, pc}
   2093c:	20002ebc 	.word	0x20002ebc

00020940 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   20940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   20944:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   20946:	4c39      	ldr	r4, [pc, #228]	; (20a2c <nrfx_spi_xfer+0xec>)
   20948:	2328      	movs	r3, #40	; 0x28
   2094a:	437b      	muls	r3, r7
{
   2094c:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
   2094e:	18e2      	adds	r2, r4, r3
{
   20950:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
   20952:	7f51      	ldrb	r1, [r2, #29]
{
   20954:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
   20956:	2900      	cmp	r1, #0
   20958:	d165      	bne.n	20a26 <nrfx_spi_xfer+0xe6>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   2095a:	58e3      	ldr	r3, [r4, r3]
   2095c:	b10b      	cbz	r3, 20962 <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
   2095e:	2301      	movs	r3, #1
   20960:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   20962:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   20966:	2528      	movs	r5, #40	; 0x28
   20968:	fb05 4507 	mla	r5, r5, r7, r4
   2096c:	f105 0c0c 	add.w	ip, r5, #12
   20970:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   20974:	7fa8      	ldrb	r0, [r5, #30]
    p_cb->abort = false;
   20976:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   20978:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
   2097a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   2097e:	d001      	beq.n	20984 <nrfx_spi_xfer+0x44>
        nrf_gpio_pin_clear(pin_number);
   20980:	f009 f8b9 	bl	29af6 <nrf_gpio_pin_clear>
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
   20984:	2328      	movs	r3, #40	; 0x28
   20986:	f1b8 0f00 	cmp.w	r8, #0
   2098a:	d006      	beq.n	2099a <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
   2098c:	fb03 4407 	mla	r4, r3, r7, r4
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   20990:	4827      	ldr	r0, [pc, #156]	; (20a30 <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
   20992:	2300      	movs	r3, #0
   20994:	7763      	strb	r3, [r4, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   20996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   2099a:	f8d9 5000 	ldr.w	r5, [r9]
    p_cb->bytes_transferred = 0;
   2099e:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->INTENCLR = mask;
   209a2:	2204      	movs	r2, #4
   209a4:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
   209a8:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   209ac:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
   209b0:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   209b4:	6872      	ldr	r2, [r6, #4]
    nrf_spi_txd_set(p_spi,
   209b6:	b192      	cbz	r2, 209de <nrfx_spi_xfer+0x9e>
   209b8:	6833      	ldr	r3, [r6, #0]
   209ba:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   209bc:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   209c0:	2a01      	cmp	r2, #1
   209c2:	d90e      	bls.n	209e2 <nrfx_spi_xfer+0xa2>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   209c4:	6833      	ldr	r3, [r6, #0]
   209c6:	785b      	ldrb	r3, [r3, #1]
   209c8:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_cb->handler)
   209cc:	2328      	movs	r3, #40	; 0x28
   209ce:	437b      	muls	r3, r7
   209d0:	58e6      	ldr	r6, [r4, r3]
   209d2:	b176      	cbz	r6, 209f2 <nrfx_spi_xfer+0xb2>
    p_reg->INTENSET = mask;
   209d4:	2304      	movs	r3, #4
   209d6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   209da:	4816      	ldr	r0, [pc, #88]	; (20a34 <nrfx_spi_xfer+0xf4>)
   209dc:	e7db      	b.n	20996 <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
   209de:	7fdb      	ldrb	r3, [r3, #31]
   209e0:	e7ec      	b.n	209bc <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
   209e2:	68f3      	ldr	r3, [r6, #12]
   209e4:	2b01      	cmp	r3, #1
   209e6:	d9f1      	bls.n	209cc <nrfx_spi_xfer+0x8c>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   209e8:	2328      	movs	r3, #40	; 0x28
   209ea:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->TXD = data;
   209ee:	7fdb      	ldrb	r3, [r3, #31]
   209f0:	e7ea      	b.n	209c8 <nrfx_spi_xfer+0x88>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   209f2:	eb07 0187 	add.w	r1, r7, r7, lsl #2
   209f6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   209fa:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   209fe:	2b00      	cmp	r3, #0
   20a00:	d0fb      	beq.n	209fa <nrfx_spi_xfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20a02:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   20a06:	4628      	mov	r0, r5
   20a08:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   20a0c:	f009 f880 	bl	29b10 <transfer_byte>
   20a10:	2800      	cmp	r0, #0
   20a12:	d1f2      	bne.n	209fa <nrfx_spi_xfer+0xba>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   20a14:	2328      	movs	r3, #40	; 0x28
   20a16:	fb03 4407 	mla	r4, r3, r7, r4
   20a1a:	7fa0      	ldrb	r0, [r4, #30]
   20a1c:	28ff      	cmp	r0, #255	; 0xff
   20a1e:	d0dc      	beq.n	209da <nrfx_spi_xfer+0x9a>
        nrf_gpio_pin_set(pin_number);
   20a20:	f009 f85c 	bl	29adc <nrf_gpio_pin_set>
   20a24:	e7d9      	b.n	209da <nrfx_spi_xfer+0x9a>
        return err_code;
   20a26:	4804      	ldr	r0, [pc, #16]	; (20a38 <nrfx_spi_xfer+0xf8>)
   20a28:	e7b5      	b.n	20996 <nrfx_spi_xfer+0x56>
   20a2a:	bf00      	nop
   20a2c:	20002ebc 	.word	0x20002ebc
   20a30:	0bad0003 	.word	0x0bad0003
   20a34:	0bad0000 	.word	0x0bad0000
   20a38:	0bad000b 	.word	0x0bad000b

00020a3c <nrfx_spi_1_irq_handler>:
   20a3c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   20a40:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
   20a42:	b510      	push	{r4, lr}
    if (!transfer_byte(p_spi, p_cb))
   20a44:	490b      	ldr	r1, [pc, #44]	; (20a74 <nrfx_spi_1_irq_handler+0x38>)
   20a46:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   20a4a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   20a4e:	f009 f85f 	bl	29b10 <transfer_byte>
   20a52:	b968      	cbnz	r0, 20a70 <nrfx_spi_1_irq_handler+0x34>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   20a54:	7f88      	ldrb	r0, [r1, #30]
   20a56:	28ff      	cmp	r0, #255	; 0xff
   20a58:	d001      	beq.n	20a5e <nrfx_spi_1_irq_handler+0x22>
   20a5a:	f009 f83f 	bl	29adc <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
   20a5e:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   20a60:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
   20a62:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
}
   20a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   20a68:	e9d1 3100 	ldrd	r3, r1, [r1]
   20a6c:	4802      	ldr	r0, [pc, #8]	; (20a78 <nrfx_spi_1_irq_handler+0x3c>)
   20a6e:	4718      	bx	r3
}
   20a70:	bd10      	pop	{r4, pc}
   20a72:	bf00      	nop
   20a74:	20002ebc 	.word	0x20002ebc
   20a78:	20002ec4 	.word	0x20002ec4

00020a7c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   20a7c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   20a7e:	4c11      	ldr	r4, [pc, #68]	; (20ac4 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   20a80:	4a11      	ldr	r2, [pc, #68]	; (20ac8 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   20a82:	4912      	ldr	r1, [pc, #72]	; (20acc <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   20a84:	2303      	movs	r3, #3
   20a86:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   20a88:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   20a8a:	4b11      	ldr	r3, [pc, #68]	; (20ad0 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   20a8c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   20a8e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   20a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
   20a94:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   20a96:	2300      	movs	r3, #0
   20a98:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   20a9a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   20a9c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   20a9e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   20aa0:	4a0c      	ldr	r2, [pc, #48]	; (20ad4 <_DoInit+0x58>)
   20aa2:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   20aa4:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   20aa6:	2210      	movs	r2, #16
   20aa8:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   20aaa:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   20aac:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   20aae:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   20ab0:	f006 f8c0 	bl	26c34 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   20ab4:	4908      	ldr	r1, [pc, #32]	; (20ad8 <_DoInit+0x5c>)
   20ab6:	4620      	mov	r0, r4
   20ab8:	f006 f8bc 	bl	26c34 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   20abc:	2320      	movs	r3, #32
   20abe:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   20ac0:	bd10      	pop	{r4, pc}
   20ac2:	bf00      	nop
   20ac4:	20002ee4 	.word	0x20002ee4
   20ac8:	0002e278 	.word	0x0002e278
   20acc:	0002e281 	.word	0x0002e281
   20ad0:	200043c3 	.word	0x200043c3
   20ad4:	200043b3 	.word	0x200043b3
   20ad8:	0002e285 	.word	0x0002e285

00020adc <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20adc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   20ae0:	4f23      	ldr	r7, [pc, #140]	; (20b70 <SEGGER_RTT_WriteSkipNoLock+0x94>)
   20ae2:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20ae6:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   20ae8:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20aec:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   20aee:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   20af0:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   20af2:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20af4:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   20af6:	d834      	bhi.n	20b62 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   20af8:	f8d2 a020 	ldr.w	sl, [r2, #32]
   20afc:	ebaa 0905 	sub.w	r9, sl, r5
   20b00:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   20b04:	4294      	cmp	r4, r2
   20b06:	d811      	bhi.n	20b2c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20b08:	f04f 0918 	mov.w	r9, #24
   20b0c:	fb06 9309 	mla	r3, r6, r9, r9
   20b10:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   20b12:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20b14:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   20b16:	4641      	mov	r1, r8
   20b18:	4428      	add	r0, r5
   20b1a:	f006 f8fd 	bl	26d18 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   20b1e:	fb09 7606 	mla	r6, r9, r6, r7
   20b22:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   20b24:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   20b26:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   20b28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   20b2c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   20b2e:	429c      	cmp	r4, r3
   20b30:	d81b      	bhi.n	20b6a <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20b32:	fb00 bb0b 	mla	fp, r0, fp, fp
   20b36:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   20b38:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20b3a:	f8db 0004 	ldr.w	r0, [fp, #4]
   20b3e:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   20b40:	4428      	add	r0, r5
   20b42:	f006 f8e9 	bl	26d18 <memcpy>
      if (NumBytes) {
   20b46:	ebb4 040a 	subs.w	r4, r4, sl
   20b4a:	d006      	beq.n	20b5a <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   20b4c:	f8db 0004 	ldr.w	r0, [fp, #4]
   20b50:	4622      	mov	r2, r4
   20b52:	eb08 0109 	add.w	r1, r8, r9
   20b56:	f006 f8df 	bl	26d18 <memcpy>
      pRing->WrOff = NumBytes;
   20b5a:	2018      	movs	r0, #24
   20b5c:	fb00 7606 	mla	r6, r0, r6, r7
   20b60:	e7e0      	b.n	20b24 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   20b62:	3b01      	subs	r3, #1
   20b64:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   20b66:	42a3      	cmp	r3, r4
   20b68:	d2ce      	bcs.n	20b08 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   20b6a:	2000      	movs	r0, #0
   20b6c:	e7dc      	b.n	20b28 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   20b6e:	bf00      	nop
   20b70:	20002ee4 	.word	0x20002ee4

00020b74 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20b74:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   20b76:	4b16      	ldr	r3, [pc, #88]	; (20bd0 <SEGGER_RTT_WriteNoLock+0x5c>)
   20b78:	2418      	movs	r4, #24
   20b7a:	fb00 4504 	mla	r5, r0, r4, r4
   20b7e:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   20b80:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20b84:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   20b86:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   20b88:	2c01      	cmp	r4, #1
   20b8a:	d00e      	beq.n	20baa <SEGGER_RTT_WriteNoLock+0x36>
   20b8c:	2c02      	cmp	r4, #2
   20b8e:	d018      	beq.n	20bc2 <SEGGER_RTT_WriteNoLock+0x4e>
   20b90:	b9e4      	cbnz	r4, 20bcc <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   20b92:	4628      	mov	r0, r5
   20b94:	f008 ffef 	bl	29b76 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   20b98:	4286      	cmp	r6, r0
   20b9a:	d804      	bhi.n	20ba6 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   20b9c:	4632      	mov	r2, r6
   20b9e:	4628      	mov	r0, r5
   20ba0:	f008 fff2 	bl	29b88 <_WriteNoCheck>
   20ba4:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   20ba6:	4620      	mov	r0, r4
   20ba8:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
   20baa:	4628      	mov	r0, r5
   20bac:	f008 ffe3 	bl	29b76 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   20bb0:	4286      	cmp	r6, r0
   20bb2:	4634      	mov	r4, r6
   20bb4:	bf28      	it	cs
   20bb6:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   20bb8:	4622      	mov	r2, r4
   20bba:	4628      	mov	r0, r5
   20bbc:	f008 ffe4 	bl	29b88 <_WriteNoCheck>
    break;
   20bc0:	e7f1      	b.n	20ba6 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   20bc2:	4628      	mov	r0, r5
}
   20bc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   20bc8:	f008 bffa 	b.w	29bc0 <_WriteBlocking>
  switch (pRing->Flags) {
   20bcc:	2400      	movs	r4, #0
  return Status;
   20bce:	e7ea      	b.n	20ba6 <SEGGER_RTT_WriteNoLock+0x32>
   20bd0:	20002ee4 	.word	0x20002ee4

00020bd4 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   20bd4:	4b03      	ldr	r3, [pc, #12]	; (20be4 <SEGGER_RTT_HasDataUp+0x10>)
   20bd6:	2218      	movs	r2, #24
   20bd8:	fb02 3300 	mla	r3, r2, r0, r3
   20bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   20bde:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   20be0:	1a80      	subs	r0, r0, r2
   20be2:	4770      	bx	lr
   20be4:	20002ee4 	.word	0x20002ee4

00020be8 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   20be8:	4803      	ldr	r0, [pc, #12]	; (20bf8 <zephyr_rtt_mutex_lock+0x10>)
   20bea:	f04f 32ff 	mov.w	r2, #4294967295
   20bee:	f04f 33ff 	mov.w	r3, #4294967295
   20bf2:	f000 baab 	b.w	2114c <z_impl_k_mutex_lock>
   20bf6:	bf00      	nop
   20bf8:	200009cc 	.word	0x200009cc

00020bfc <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   20bfc:	4801      	ldr	r0, [pc, #4]	; (20c04 <zephyr_rtt_mutex_unlock+0x8>)
   20bfe:	f000 bb1d 	b.w	2123c <z_impl_k_mutex_unlock>
   20c02:	bf00      	nop
   20c04:	200009cc 	.word	0x200009cc

00020c08 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20c08:	4b0e      	ldr	r3, [pc, #56]	; (20c44 <z_sys_init_run_level+0x3c>)
{
   20c0a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20c0c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   20c10:	3001      	adds	r0, #1
   20c12:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   20c16:	42a6      	cmp	r6, r4
   20c18:	d800      	bhi.n	20c1c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   20c1a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   20c1c:	e9d4 3500 	ldrd	r3, r5, [r4]
   20c20:	4628      	mov	r0, r5
   20c22:	4798      	blx	r3
		if (dev != NULL) {
   20c24:	b165      	cbz	r5, 20c40 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   20c26:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   20c28:	b130      	cbz	r0, 20c38 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   20c2a:	2800      	cmp	r0, #0
   20c2c:	bfb8      	it	lt
   20c2e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   20c30:	28ff      	cmp	r0, #255	; 0xff
   20c32:	bfa8      	it	ge
   20c34:	20ff      	movge	r0, #255	; 0xff
   20c36:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   20c38:	785a      	ldrb	r2, [r3, #1]
   20c3a:	f042 0201 	orr.w	r2, r2, #1
   20c3e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20c40:	3408      	adds	r4, #8
   20c42:	e7e8      	b.n	20c16 <z_sys_init_run_level+0xe>
   20c44:	0002b8a0 	.word	0x0002b8a0

00020c48 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   20c48:	4b01      	ldr	r3, [pc, #4]	; (20c50 <z_impl_z_errno+0x8>)
   20c4a:	6898      	ldr	r0, [r3, #8]
}
   20c4c:	3064      	adds	r0, #100	; 0x64
   20c4e:	4770      	bx	lr
   20c50:	20002f8c 	.word	0x20002f8c

00020c54 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   20c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20c58:	b086      	sub	sp, #24
   20c5a:	4605      	mov	r5, r0
   20c5c:	af00      	add	r7, sp, #0
   20c5e:	460e      	mov	r6, r1
	__asm__ volatile(
   20c60:	f04f 0340 	mov.w	r3, #64	; 0x40
   20c64:	f3ef 8811 	mrs	r8, BASEPRI
   20c68:	f383 8812 	msr	BASEPRI_MAX, r3
   20c6c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   20c70:	f001 f890 	bl	21d94 <z_impl_z_current_get>
   20c74:	2d04      	cmp	r5, #4
   20c76:	bf96      	itet	ls
   20c78:	4b2c      	ldrls	r3, [pc, #176]	; (20d2c <z_fatal_error+0xd8>)
   20c7a:	4b2d      	ldrhi	r3, [pc, #180]	; (20d30 <z_fatal_error+0xdc>)
   20c7c:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   20c80:	46e9      	mov	r9, sp
   20c82:	b08a      	sub	sp, #40	; 0x28
   20c84:	4604      	mov	r4, r0
   20c86:	466a      	mov	r2, sp
   20c88:	492a      	ldr	r1, [pc, #168]	; (20d34 <z_fatal_error+0xe0>)
   20c8a:	61d3      	str	r3, [r2, #28]
   20c8c:	2303      	movs	r3, #3
   20c8e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   20c92:	f04f 0a00 	mov.w	sl, #0
   20c96:	4b28      	ldr	r3, [pc, #160]	; (20d38 <z_fatal_error+0xe4>)
   20c98:	f8c2 a020 	str.w	sl, [r2, #32]
   20c9c:	e9c2 1505 	strd	r1, r5, [r2, #20]
   20ca0:	f842 3f10 	str.w	r3, [r2, #16]!
   20ca4:	4825      	ldr	r0, [pc, #148]	; (20d3c <z_fatal_error+0xe8>)
   20ca6:	4653      	mov	r3, sl
   20ca8:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
   20cac:	f7f2 fad4 	bl	13258 <z_impl_z_log_msg_static_create>
   20cb0:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   20cb2:	b17e      	cbz	r6, 20cd4 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   20cb4:	69f3      	ldr	r3, [r6, #28]
   20cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   20cba:	b15b      	cbz	r3, 20cd4 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
   20cbc:	4b20      	ldr	r3, [pc, #128]	; (20d40 <z_fatal_error+0xec>)
   20cbe:	617b      	str	r3, [r7, #20]
   20cc0:	2302      	movs	r3, #2
   20cc2:	613b      	str	r3, [r7, #16]
   20cc4:	481d      	ldr	r0, [pc, #116]	; (20d3c <z_fatal_error+0xe8>)
   20cc6:	4653      	mov	r3, sl
   20cc8:	f107 0210 	add.w	r2, r7, #16
   20ccc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20cd0:	f7f2 fac2 	bl	13258 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   20cd4:	b12c      	cbz	r4, 20ce2 <z_fatal_error+0x8e>
   20cd6:	4620      	mov	r0, r4
   20cd8:	f009 f864 	bl	29da4 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   20cdc:	b108      	cbz	r0, 20ce2 <z_fatal_error+0x8e>
   20cde:	7803      	ldrb	r3, [r0, #0]
   20ce0:	b903      	cbnz	r3, 20ce4 <z_fatal_error+0x90>
		thread_name = "unknown";
   20ce2:	4818      	ldr	r0, [pc, #96]	; (20d44 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   20ce4:	46e9      	mov	r9, sp
   20ce6:	b08a      	sub	sp, #40	; 0x28
   20ce8:	466a      	mov	r2, sp
   20cea:	4b17      	ldr	r3, [pc, #92]	; (20d48 <z_fatal_error+0xf4>)
   20cec:	61d0      	str	r0, [r2, #28]
   20cee:	e9c2 3405 	strd	r3, r4, [r2, #20]
   20cf2:	2303      	movs	r3, #3
   20cf4:	f882 3020 	strb.w	r3, [r2, #32]
   20cf8:	4b14      	ldr	r3, [pc, #80]	; (20d4c <z_fatal_error+0xf8>)
   20cfa:	f842 3f10 	str.w	r3, [r2, #16]!
   20cfe:	2300      	movs	r3, #0
   20d00:	480e      	ldr	r0, [pc, #56]	; (20d3c <z_fatal_error+0xe8>)
   20d02:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   20d06:	f7f2 faa7 	bl	13258 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   20d0a:	4631      	mov	r1, r6
   20d0c:	46cd      	mov	sp, r9
   20d0e:	4628      	mov	r0, r5
   20d10:	f7fd ffac 	bl	1ec6c <k_sys_fatal_error_handler>
	__asm__ volatile(
   20d14:	f388 8811 	msr	BASEPRI, r8
   20d18:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   20d1c:	4620      	mov	r0, r4
   20d1e:	f7f3 fe61 	bl	149e4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   20d22:	3718      	adds	r7, #24
   20d24:	46bd      	mov	sp, r7
   20d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20d2a:	bf00      	nop
   20d2c:	0002b8b8 	.word	0x0002b8b8
   20d30:	0002e28c 	.word	0x0002e28c
   20d34:	0002e29a 	.word	0x0002e29a
   20d38:	01000005 	.word	0x01000005
   20d3c:	0002aca8 	.word	0x0002aca8
   20d40:	0002e2c2 	.word	0x0002e2c2
   20d44:	0002c62e 	.word	0x0002c62e
   20d48:	0002e2e3 	.word	0x0002e2e3
   20d4c:	01000004 	.word	0x01000004

00020d50 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   20d50:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   20d52:	4b0a      	ldr	r3, [pc, #40]	; (20d7c <bg_thread_main+0x2c>)
   20d54:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   20d56:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   20d58:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   20d5a:	f7ff ff55 	bl	20c08 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   20d5e:	f001 fb45 	bl	223ec <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   20d62:	2003      	movs	r0, #3
   20d64:	f7ff ff50 	bl	20c08 <z_sys_init_run_level>

	z_init_static_threads();
   20d68:	f000 f978 	bl	2105c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   20d6c:	f7f0 fec4 	bl	11af8 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   20d70:	4a03      	ldr	r2, [pc, #12]	; (20d80 <bg_thread_main+0x30>)
   20d72:	7b13      	ldrb	r3, [r2, #12]
   20d74:	f023 0301 	bic.w	r3, r3, #1
   20d78:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   20d7a:	bd08      	pop	{r3, pc}
   20d7c:	200047c3 	.word	0x200047c3
   20d80:	20002390 	.word	0x20002390

00020d84 <z_bss_zero>:
{
   20d84:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   20d86:	4803      	ldr	r0, [pc, #12]	; (20d94 <z_bss_zero+0x10>)
   20d88:	4a03      	ldr	r2, [pc, #12]	; (20d98 <z_bss_zero+0x14>)
   20d8a:	2100      	movs	r1, #0
   20d8c:	1a12      	subs	r2, r2, r0
   20d8e:	f008 ff52 	bl	29c36 <z_early_memset>
}
   20d92:	bd08      	pop	{r3, pc}
   20d94:	20000ba0 	.word	0x20000ba0
   20d98:	200047c4 	.word	0x200047c4

00020d9c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   20d9c:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   20d9e:	2300      	movs	r3, #0
{
   20da0:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   20da2:	2201      	movs	r2, #1
   20da4:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   20da8:	4e11      	ldr	r6, [pc, #68]	; (20df0 <z_init_cpu+0x54>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   20daa:	4d12      	ldr	r5, [pc, #72]	; (20df4 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   20dac:	9301      	str	r3, [sp, #4]
   20dae:	220f      	movs	r2, #15
   20db0:	e9cd 3202 	strd	r3, r2, [sp, #8]
   20db4:	4910      	ldr	r1, [pc, #64]	; (20df8 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   20db6:	2318      	movs	r3, #24
   20db8:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   20dbc:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
	z_setup_new_thread(thread, stack,
   20dc0:	f44f 72a0 	mov.w	r2, #320	; 0x140
{
   20dc4:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   20dc6:	fb02 1100 	mla	r1, r2, r0, r1
   20dca:	4b0c      	ldr	r3, [pc, #48]	; (20dfc <z_init_cpu+0x60>)
   20dcc:	9500      	str	r5, [sp, #0]
   20dce:	4630      	mov	r0, r6
   20dd0:	f000 f8e8 	bl	20fa4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20dd4:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   20dd6:	480a      	ldr	r0, [pc, #40]	; (20e00 <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
   20dd8:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   20dda:	3401      	adds	r4, #1
   20ddc:	f023 0304 	bic.w	r3, r3, #4
   20de0:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
   20de4:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   20de6:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   20de8:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   20dea:	b006      	add	sp, #24
   20dec:	bd70      	pop	{r4, r5, r6, pc}
   20dee:	bf00      	nop
   20df0:	20002310 	.word	0x20002310
   20df4:	20002f8c 	.word	0x20002f8c
   20df8:	20006050 	.word	0x20006050
   20dfc:	00021115 	.word	0x00021115
   20e00:	20006190 	.word	0x20006190

00020e04 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   20e04:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   20e06:	4b2f      	ldr	r3, [pc, #188]	; (20ec4 <z_cstart+0xc0>)
   20e08:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   20e0a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   20e0e:	4d2e      	ldr	r5, [pc, #184]	; (20ec8 <z_cstart+0xc4>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   20e10:	4e2e      	ldr	r6, [pc, #184]	; (20ecc <z_cstart+0xc8>)
   20e12:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20e14:	4f2e      	ldr	r7, [pc, #184]	; (20ed0 <z_cstart+0xcc>)
   20e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   20e1a:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   20e1c:	23e0      	movs	r3, #224	; 0xe0
   20e1e:	2400      	movs	r4, #0
   20e20:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   20e24:	2320      	movs	r3, #32
   20e26:	77eb      	strb	r3, [r5, #31]
   20e28:	762c      	strb	r4, [r5, #24]
   20e2a:	766c      	strb	r4, [r5, #25]
   20e2c:	76ac      	strb	r4, [r5, #26]
   20e2e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   20e32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   20e34:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   20e38:	626b      	str	r3, [r5, #36]	; 0x24
   20e3a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   20e3e:	f7f3 fd45 	bl	148cc <z_arm_fault_init>
	z_arm_cpu_idle_init();
   20e42:	f7f3 f8dd 	bl	14000 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   20e46:	f04f 33ff 	mov.w	r3, #4294967295
   20e4a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   20e4c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   20e4e:	f7f3 fe6f 	bl	14b30 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   20e52:	f7f3 fddd 	bl	14a10 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   20e56:	f7f2 f8a5 	bl	12fa4 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   20e5a:	f240 1301 	movw	r3, #257	; 0x101
   20e5e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   20e62:	ab06      	add	r3, sp, #24
   20e64:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   20e66:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   20e6a:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   20e6c:	f008 fed8 	bl	29c20 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   20e70:	4620      	mov	r0, r4
   20e72:	f7ff fec9 	bl	20c08 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   20e76:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   20e78:	4d16      	ldr	r5, [pc, #88]	; (20ed4 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   20e7a:	f7ff fec5 	bl	20c08 <z_sys_init_run_level>
	z_sched_init();
   20e7e:	f000 fec1 	bl	21c04 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20e82:	4b15      	ldr	r3, [pc, #84]	; (20ed8 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
   20e84:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20e86:	9305      	str	r3, [sp, #20]
   20e88:	2301      	movs	r3, #1
   20e8a:	4914      	ldr	r1, [pc, #80]	; (20edc <z_cstart+0xd8>)
   20e8c:	9400      	str	r4, [sp, #0]
   20e8e:	e9cd 4303 	strd	r4, r3, [sp, #12]
   20e92:	f44f 6200 	mov.w	r2, #2048	; 0x800
   20e96:	463b      	mov	r3, r7
   20e98:	e9cd 4401 	strd	r4, r4, [sp, #4]
   20e9c:	4628      	mov	r0, r5
   20e9e:	f000 f881 	bl	20fa4 <z_setup_new_thread>
   20ea2:	7b6a      	ldrb	r2, [r5, #13]
   20ea4:	4606      	mov	r6, r0
   20ea6:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   20eaa:	4628      	mov	r0, r5
   20eac:	736a      	strb	r2, [r5, #13]
   20eae:	f009 f9cd 	bl	2a24c <z_ready_thread>
	z_init_cpu(0);
   20eb2:	4620      	mov	r0, r4
   20eb4:	f7ff ff72 	bl	20d9c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   20eb8:	463a      	mov	r2, r7
   20eba:	4631      	mov	r1, r6
   20ebc:	4628      	mov	r0, r5
   20ebe:	f7f3 fa07 	bl	142d0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   20ec2:	bf00      	nop
   20ec4:	20006990 	.word	0x20006990
   20ec8:	e000ed00 	.word	0xe000ed00
   20ecc:	20002f8c 	.word	0x20002f8c
   20ed0:	00020d51 	.word	0x00020d51
   20ed4:	20002390 	.word	0x20002390
   20ed8:	0002e345 	.word	0x0002e345
   20edc:	20005850 	.word	0x20005850

00020ee0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   20ee0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   20ee2:	4c06      	ldr	r4, [pc, #24]	; (20efc <statics_init+0x1c>)
   20ee4:	4d06      	ldr	r5, [pc, #24]	; (20f00 <statics_init+0x20>)
   20ee6:	42ac      	cmp	r4, r5
   20ee8:	d301      	bcc.n	20eee <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   20eea:	2000      	movs	r0, #0
   20eec:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   20eee:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   20ef2:	4620      	mov	r0, r4
   20ef4:	f008 fea3 	bl	29c3e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   20ef8:	3414      	adds	r4, #20
   20efa:	e7f4      	b.n	20ee6 <statics_init+0x6>
   20efc:	2000097c 	.word	0x2000097c
   20f00:	2000097c 	.word	0x2000097c

00020f04 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   20f04:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20f06:	4b0e      	ldr	r3, [pc, #56]	; (20f40 <init_mem_slab_module+0x3c>)
   20f08:	4c0e      	ldr	r4, [pc, #56]	; (20f44 <init_mem_slab_module+0x40>)
   20f0a:	42a3      	cmp	r3, r4
   20f0c:	d301      	bcc.n	20f12 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   20f0e:	2000      	movs	r0, #0
	return rc;
}
   20f10:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   20f12:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   20f16:	ea41 0200 	orr.w	r2, r1, r0
   20f1a:	f012 0203 	ands.w	r2, r2, #3
   20f1e:	d10b      	bne.n	20f38 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   20f20:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   20f22:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   20f24:	42aa      	cmp	r2, r5
   20f26:	d101      	bne.n	20f2c <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20f28:	331c      	adds	r3, #28
   20f2a:	e7ee      	b.n	20f0a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   20f2c:	695e      	ldr	r6, [r3, #20]
   20f2e:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   20f30:	3201      	adds	r2, #1
		slab->free_list = p;
   20f32:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   20f34:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   20f36:	e7f5      	b.n	20f24 <init_mem_slab_module+0x20>
	return rc;
   20f38:	f06f 0015 	mvn.w	r0, #21
   20f3c:	e7e8      	b.n	20f10 <init_mem_slab_module+0xc>
   20f3e:	bf00      	nop
   20f40:	20000928 	.word	0x20000928
   20f44:	2000097c 	.word	0x2000097c

00020f48 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   20f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20f4a:	460c      	mov	r4, r1
	__asm__ volatile(
   20f4c:	f04f 0540 	mov.w	r5, #64	; 0x40
   20f50:	f3ef 8111 	mrs	r1, BASEPRI
   20f54:	f385 8812 	msr	BASEPRI_MAX, r5
   20f58:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   20f5c:	6945      	ldr	r5, [r0, #20]
   20f5e:	b15d      	cbz	r5, 20f78 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   20f60:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   20f62:	682b      	ldr	r3, [r5, #0]
   20f64:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   20f66:	6983      	ldr	r3, [r0, #24]
   20f68:	3301      	adds	r3, #1
   20f6a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   20f6c:	2000      	movs	r0, #0
	__asm__ volatile(
   20f6e:	f381 8811 	msr	BASEPRI, r1
   20f72:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   20f76:	e011      	b.n	20f9c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   20f78:	ea52 0c03 	orrs.w	ip, r2, r3
   20f7c:	d103      	bne.n	20f86 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   20f7e:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   20f80:	f06f 000b 	mvn.w	r0, #11
   20f84:	e7f3      	b.n	20f6e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   20f86:	e9cd 2300 	strd	r2, r3, [sp]
   20f8a:	4602      	mov	r2, r0
   20f8c:	3008      	adds	r0, #8
   20f8e:	f000 fd8f 	bl	21ab0 <z_pend_curr>
		if (result == 0) {
   20f92:	b918      	cbnz	r0, 20f9c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   20f94:	4b02      	ldr	r3, [pc, #8]	; (20fa0 <k_mem_slab_alloc+0x58>)
   20f96:	689b      	ldr	r3, [r3, #8]
   20f98:	695b      	ldr	r3, [r3, #20]
   20f9a:	6023      	str	r3, [r4, #0]
}
   20f9c:	b003      	add	sp, #12
   20f9e:	bd30      	pop	{r4, r5, pc}
   20fa0:	20002f8c 	.word	0x20002f8c

00020fa4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   20fa4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   20fa8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   20faa:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   20fac:	2604      	movs	r6, #4
   20fae:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   20fb0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   20fb2:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   20fb4:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   20fb8:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   20fba:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20fbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   20fc0:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   20fc2:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   20fc6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   20fca:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   20fce:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   20fd0:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   20fd2:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20fd4:	9202      	str	r2, [sp, #8]
   20fd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   20fd8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   20fda:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20fde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20fe0:	9200      	str	r2, [sp, #0]
   20fe2:	4642      	mov	r2, r8
{
   20fe4:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20fe6:	f7f3 f957 	bl	14298 <arch_new_thread>
	if (!_current) {
   20fea:	4b05      	ldr	r3, [pc, #20]	; (21000 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   20fec:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   20fee:	689b      	ldr	r3, [r3, #8]
   20ff0:	b103      	cbz	r3, 20ff4 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   20ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   20ff4:	6763      	str	r3, [r4, #116]	; 0x74
}
   20ff6:	4640      	mov	r0, r8
   20ff8:	b004      	add	sp, #16
   20ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20ffe:	bf00      	nop
   21000:	20002f8c 	.word	0x20002f8c

00021004 <z_impl_k_thread_create>:
{
   21004:	b5f0      	push	{r4, r5, r6, r7, lr}
   21006:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21008:	2700      	movs	r7, #0
   2100a:	9705      	str	r7, [sp, #20]
   2100c:	9f10      	ldr	r7, [sp, #64]	; 0x40
   2100e:	9704      	str	r7, [sp, #16]
   21010:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   21012:	9703      	str	r7, [sp, #12]
   21014:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   21016:	9702      	str	r7, [sp, #8]
{
   21018:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2101c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2101e:	9701      	str	r7, [sp, #4]
   21020:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   21022:	9700      	str	r7, [sp, #0]
{
   21024:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21026:	f7ff ffbd 	bl	20fa4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2102a:	f1b5 3fff 	cmp.w	r5, #4294967295
   2102e:	bf08      	it	eq
   21030:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   21034:	d005      	beq.n	21042 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21036:	ea55 0306 	orrs.w	r3, r5, r6
   2103a:	d105      	bne.n	21048 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   2103c:	4620      	mov	r0, r4
   2103e:	f000 fcdb 	bl	219f8 <z_sched_start>
}
   21042:	4620      	mov	r0, r4
   21044:	b007      	add	sp, #28
   21046:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21048:	4903      	ldr	r1, [pc, #12]	; (21058 <z_impl_k_thread_create+0x54>)
   2104a:	4632      	mov	r2, r6
   2104c:	462b      	mov	r3, r5
   2104e:	f104 0018 	add.w	r0, r4, #24
   21052:	f000 ff7b 	bl	21f4c <z_add_timeout>
   21056:	e7f4      	b.n	21042 <z_impl_k_thread_create+0x3e>
   21058:	0002a26d 	.word	0x0002a26d

0002105c <z_init_static_threads>:
{
   2105c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21060:	4c29      	ldr	r4, [pc, #164]	; (21108 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   21062:	4d2a      	ldr	r5, [pc, #168]	; (2110c <z_init_static_threads+0xb0>)
{
   21064:	b087      	sub	sp, #28
   21066:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   21068:	42ae      	cmp	r6, r5
   2106a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   2106e:	d30f      	bcc.n	21090 <z_init_static_threads+0x34>
	k_sched_lock();
   21070:	f000 fbdc 	bl	2182c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   21074:	4c24      	ldr	r4, [pc, #144]	; (21108 <z_init_static_threads+0xac>)
   21076:	f8df 9098 	ldr.w	r9, [pc, #152]	; 21110 <z_init_static_threads+0xb4>
   2107a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2107e:	f240 37e7 	movw	r7, #999	; 0x3e7
   21082:	42ac      	cmp	r4, r5
   21084:	d320      	bcc.n	210c8 <z_init_static_threads+0x6c>
}
   21086:	b007      	add	sp, #28
   21088:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   2108c:	f000 bd9e 	b.w	21bcc <k_sched_unlock>
		z_setup_new_thread(
   21090:	f854 3c04 	ldr.w	r3, [r4, #-4]
   21094:	9305      	str	r3, [sp, #20]
   21096:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2109a:	9304      	str	r3, [sp, #16]
   2109c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   210a0:	9303      	str	r3, [sp, #12]
   210a2:	f854 3c18 	ldr.w	r3, [r4, #-24]
   210a6:	9302      	str	r3, [sp, #8]
   210a8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   210ac:	9301      	str	r3, [sp, #4]
   210ae:	f854 3c20 	ldr.w	r3, [r4, #-32]
   210b2:	9300      	str	r3, [sp, #0]
   210b4:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   210b8:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   210bc:	f7ff ff72 	bl	20fa4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   210c0:	f854 3c30 	ldr.w	r3, [r4, #-48]
   210c4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   210c6:	e7ce      	b.n	21066 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   210c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   210ca:	1c5a      	adds	r2, r3, #1
   210cc:	d00d      	beq.n	210ea <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   210ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   210d2:	2100      	movs	r1, #0
   210d4:	4638      	mov	r0, r7
   210d6:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   210da:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   210de:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   210e2:	d104      	bne.n	210ee <z_init_static_threads+0x92>
	z_sched_start(thread);
   210e4:	4640      	mov	r0, r8
   210e6:	f000 fc87 	bl	219f8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   210ea:	3430      	adds	r4, #48	; 0x30
   210ec:	e7c9      	b.n	21082 <z_init_static_threads+0x26>
   210ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   210f2:	2300      	movs	r3, #0
   210f4:	f7df fa88 	bl	608 <__aeabi_uldivmod>
   210f8:	4602      	mov	r2, r0
   210fa:	460b      	mov	r3, r1
   210fc:	f108 0018 	add.w	r0, r8, #24
   21100:	4649      	mov	r1, r9
   21102:	f000 ff23 	bl	21f4c <z_add_timeout>
   21106:	e7f0      	b.n	210ea <z_init_static_threads+0x8e>
   21108:	20000928 	.word	0x20000928
   2110c:	20000928 	.word	0x20000928
   21110:	0002a26d 	.word	0x0002a26d

00021114 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   21114:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   21116:	4c0b      	ldr	r4, [pc, #44]	; (21144 <idle+0x30>)
	return !z_sys_post_kernel;
   21118:	4d0b      	ldr	r5, [pc, #44]	; (21148 <idle+0x34>)
	__asm__ volatile(
   2111a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2111e:	f3ef 8311 	mrs	r3, BASEPRI
   21122:	f382 8812 	msr	BASEPRI_MAX, r2
   21126:	f3bf 8f6f 	isb	sy
   2112a:	f009 f95b 	bl	2a3e4 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2112e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   21130:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   21132:	b913      	cbnz	r3, 2113a <idle+0x26>
	arch_cpu_idle();
   21134:	f7f2 ff6a 	bl	1400c <arch_cpu_idle>
}
   21138:	e7ef      	b.n	2111a <idle+0x6>
   2113a:	f7f2 fd71 	bl	13c20 <pm_system_suspend>
   2113e:	2800      	cmp	r0, #0
   21140:	d1eb      	bne.n	2111a <idle+0x6>
   21142:	e7f7      	b.n	21134 <idle+0x20>
   21144:	20002f8c 	.word	0x20002f8c
   21148:	200047c3 	.word	0x200047c3

0002114c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2114c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21150:	4604      	mov	r4, r0
   21152:	4617      	mov	r7, r2
   21154:	461e      	mov	r6, r3
   21156:	f04f 0340 	mov.w	r3, #64	; 0x40
   2115a:	f3ef 8811 	mrs	r8, BASEPRI
   2115e:	f383 8812 	msr	BASEPRI_MAX, r3
   21162:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   21166:	68c3      	ldr	r3, [r0, #12]
   21168:	4a32      	ldr	r2, [pc, #200]	; (21234 <z_impl_k_mutex_lock+0xe8>)
   2116a:	b16b      	cbz	r3, 21188 <z_impl_k_mutex_lock+0x3c>
   2116c:	6880      	ldr	r0, [r0, #8]
   2116e:	6891      	ldr	r1, [r2, #8]
   21170:	4288      	cmp	r0, r1
   21172:	d019      	beq.n	211a8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   21174:	ea57 0306 	orrs.w	r3, r7, r6
   21178:	d118      	bne.n	211ac <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   2117a:	f388 8811 	msr	BASEPRI, r8
   2117e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   21182:	f06f 000f 	mvn.w	r0, #15
   21186:	e00c      	b.n	211a2 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   21188:	6891      	ldr	r1, [r2, #8]
   2118a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2118e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   21190:	3301      	adds	r3, #1
   21192:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   21194:	6893      	ldr	r3, [r2, #8]
   21196:	60a3      	str	r3, [r4, #8]
   21198:	f388 8811 	msr	BASEPRI, r8
   2119c:	f3bf 8f6f 	isb	sy
		return 0;
   211a0:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   211a2:	b002      	add	sp, #8
   211a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   211a8:	6921      	ldr	r1, [r4, #16]
   211aa:	e7f0      	b.n	2118e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   211ac:	f991 100e 	ldrsb.w	r1, [r1, #14]
   211b0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   211b4:	4299      	cmp	r1, r3
   211b6:	bfa8      	it	ge
   211b8:	4619      	movge	r1, r3
   211ba:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   211be:	4291      	cmp	r1, r2
   211c0:	bfb8      	it	lt
   211c2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   211c4:	428b      	cmp	r3, r1
   211c6:	dd2e      	ble.n	21226 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   211c8:	f008 fdf7 	bl	29dba <adjust_owner_prio.isra.0>
   211cc:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   211ce:	e9cd 7600 	strd	r7, r6, [sp]
   211d2:	4819      	ldr	r0, [pc, #100]	; (21238 <z_impl_k_mutex_lock+0xec>)
   211d4:	4622      	mov	r2, r4
   211d6:	4641      	mov	r1, r8
   211d8:	f000 fc6a 	bl	21ab0 <z_pend_curr>
	if (got_mutex == 0) {
   211dc:	2800      	cmp	r0, #0
   211de:	d0e0      	beq.n	211a2 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   211e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   211e4:	f3ef 8611 	mrs	r6, BASEPRI
   211e8:	f383 8812 	msr	BASEPRI_MAX, r3
   211ec:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   211f0:	6823      	ldr	r3, [r4, #0]
   211f2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   211f4:	429c      	cmp	r4, r3
   211f6:	d00a      	beq.n	2120e <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   211f8:	b14b      	cbz	r3, 2120e <z_impl_k_mutex_lock+0xc2>
   211fa:	f993 300e 	ldrsb.w	r3, [r3, #14]
   211fe:	4299      	cmp	r1, r3
   21200:	bfa8      	it	ge
   21202:	4619      	movge	r1, r3
   21204:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   21208:	4299      	cmp	r1, r3
   2120a:	bfb8      	it	lt
   2120c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2120e:	68a0      	ldr	r0, [r4, #8]
   21210:	f008 fdd3 	bl	29dba <adjust_owner_prio.isra.0>
   21214:	b900      	cbnz	r0, 21218 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   21216:	b145      	cbz	r5, 2122a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   21218:	4807      	ldr	r0, [pc, #28]	; (21238 <z_impl_k_mutex_lock+0xec>)
   2121a:	4631      	mov	r1, r6
   2121c:	f000 faf4 	bl	21808 <z_reschedule>
	return -EAGAIN;
   21220:	f06f 000a 	mvn.w	r0, #10
   21224:	e7bd      	b.n	211a2 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   21226:	2500      	movs	r5, #0
   21228:	e7d1      	b.n	211ce <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   2122a:	f386 8811 	msr	BASEPRI, r6
   2122e:	f3bf 8f6f 	isb	sy
   21232:	e7f5      	b.n	21220 <z_impl_k_mutex_lock+0xd4>
   21234:	20002f8c 	.word	0x20002f8c
   21238:	200047c4 	.word	0x200047c4

0002123c <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   2123c:	6883      	ldr	r3, [r0, #8]
{
   2123e:	b570      	push	{r4, r5, r6, lr}
   21240:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   21242:	b36b      	cbz	r3, 212a0 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   21244:	4a19      	ldr	r2, [pc, #100]	; (212ac <z_impl_k_mutex_unlock+0x70>)
   21246:	6892      	ldr	r2, [r2, #8]
   21248:	4293      	cmp	r3, r2
   2124a:	d12c      	bne.n	212a6 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   2124c:	68c3      	ldr	r3, [r0, #12]
   2124e:	2b01      	cmp	r3, #1
   21250:	d903      	bls.n	2125a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   21252:	3b01      	subs	r3, #1
   21254:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   21256:	2000      	movs	r0, #0
}
   21258:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   2125a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2125e:	f3ef 8511 	mrs	r5, BASEPRI
   21262:	f383 8812 	msr	BASEPRI_MAX, r3
   21266:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2126a:	6901      	ldr	r1, [r0, #16]
   2126c:	6880      	ldr	r0, [r0, #8]
   2126e:	f008 fda4 	bl	29dba <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   21272:	4620      	mov	r0, r4
   21274:	f009 f85b 	bl	2a32e <z_unpend_first_thread>
	mutex->owner = new_owner;
   21278:	2600      	movs	r6, #0
   2127a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2127c:	b150      	cbz	r0, 21294 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   2127e:	f990 200e 	ldrsb.w	r2, [r0, #14]
   21282:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   21284:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   21286:	f008 ffe1 	bl	2a24c <z_ready_thread>
		z_reschedule(&lock, key);
   2128a:	4809      	ldr	r0, [pc, #36]	; (212b0 <z_impl_k_mutex_unlock+0x74>)
   2128c:	4629      	mov	r1, r5
   2128e:	f000 fabb 	bl	21808 <z_reschedule>
   21292:	e7e0      	b.n	21256 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   21294:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   21296:	f385 8811 	msr	BASEPRI, r5
   2129a:	f3bf 8f6f 	isb	sy
   2129e:	e7da      	b.n	21256 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   212a0:	f06f 0015 	mvn.w	r0, #21
   212a4:	e7d8      	b.n	21258 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   212a6:	f04f 30ff 	mov.w	r0, #4294967295
   212aa:	e7d5      	b.n	21258 <z_impl_k_mutex_unlock+0x1c>
   212ac:	20002f8c 	.word	0x20002f8c
   212b0:	200047c4 	.word	0x200047c4

000212b4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   212b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   212b6:	4611      	mov	r1, r2
	__asm__ volatile(
   212b8:	f04f 0240 	mov.w	r2, #64	; 0x40
   212bc:	f3ef 8511 	mrs	r5, BASEPRI
   212c0:	f382 8812 	msr	BASEPRI_MAX, r2
   212c4:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   212c8:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   212ca:	b19c      	cbz	r4, 212f4 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   212cc:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   212ce:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   212d0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   212d4:	4294      	cmp	r4, r2
	list->head = node;
   212d6:	6003      	str	r3, [r0, #0]
	list->tail = node;
   212d8:	bf08      	it	eq
   212da:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   212dc:	2101      	movs	r1, #1
   212de:	4620      	mov	r0, r4
   212e0:	f008 fdde 	bl	29ea0 <z_queue_node_peek>
   212e4:	4604      	mov	r4, r0
	__asm__ volatile(
   212e6:	f385 8811 	msr	BASEPRI, r5
   212ea:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   212ee:	4620      	mov	r0, r4
   212f0:	b003      	add	sp, #12
   212f2:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   212f4:	ea51 0203 	orrs.w	r2, r1, r3
   212f8:	d0f5      	beq.n	212e6 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   212fa:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   212fe:	e9cd 1300 	strd	r1, r3, [sp]
   21302:	4610      	mov	r0, r2
   21304:	4629      	mov	r1, r5
   21306:	f000 fbd3 	bl	21ab0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   2130a:	2800      	cmp	r0, #0
   2130c:	d1ef      	bne.n	212ee <z_impl_k_queue_get+0x3a>
   2130e:	4b02      	ldr	r3, [pc, #8]	; (21318 <z_impl_k_queue_get+0x64>)
   21310:	689b      	ldr	r3, [r3, #8]
   21312:	695c      	ldr	r4, [r3, #20]
   21314:	e7eb      	b.n	212ee <z_impl_k_queue_get+0x3a>
   21316:	bf00      	nop
   21318:	20002f8c 	.word	0x20002f8c

0002131c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2131c:	b538      	push	{r3, r4, r5, lr}
   2131e:	4604      	mov	r4, r0
	__asm__ volatile(
   21320:	f04f 0340 	mov.w	r3, #64	; 0x40
   21324:	f3ef 8511 	mrs	r5, BASEPRI
   21328:	f383 8812 	msr	BASEPRI_MAX, r3
   2132c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   21330:	f008 fffd 	bl	2a32e <z_unpend_first_thread>

	if (thread != NULL) {
   21334:	b148      	cbz	r0, 2134a <z_impl_k_sem_give+0x2e>
   21336:	2200      	movs	r2, #0
   21338:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2133a:	f008 ff87 	bl	2a24c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   2133e:	4629      	mov	r1, r5
   21340:	4808      	ldr	r0, [pc, #32]	; (21364 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   21342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   21346:	f000 ba5f 	b.w	21808 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2134a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2134e:	429a      	cmp	r2, r3
   21350:	bf18      	it	ne
   21352:	3301      	addne	r3, #1
   21354:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21356:	2102      	movs	r1, #2
   21358:	f104 0010 	add.w	r0, r4, #16
   2135c:	f009 f9f9 	bl	2a752 <z_handle_obj_poll_events>
}
   21360:	e7ed      	b.n	2133e <z_impl_k_sem_give+0x22>
   21362:	bf00      	nop
   21364:	200047c4 	.word	0x200047c4

00021368 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   21368:	b513      	push	{r0, r1, r4, lr}
   2136a:	f04f 0440 	mov.w	r4, #64	; 0x40
   2136e:	f3ef 8111 	mrs	r1, BASEPRI
   21372:	f384 8812 	msr	BASEPRI_MAX, r4
   21376:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   2137a:	6884      	ldr	r4, [r0, #8]
   2137c:	b144      	cbz	r4, 21390 <z_impl_k_sem_take+0x28>
		sem->count--;
   2137e:	3c01      	subs	r4, #1
   21380:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   21382:	f381 8811 	msr	BASEPRI, r1
   21386:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   2138a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   2138c:	b002      	add	sp, #8
   2138e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21390:	ea52 0403 	orrs.w	r4, r2, r3
   21394:	d106      	bne.n	213a4 <z_impl_k_sem_take+0x3c>
   21396:	f381 8811 	msr	BASEPRI, r1
   2139a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   2139e:	f06f 000f 	mvn.w	r0, #15
   213a2:	e7f3      	b.n	2138c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   213a4:	e9cd 2300 	strd	r2, r3, [sp]
   213a8:	4602      	mov	r2, r0
   213aa:	4802      	ldr	r0, [pc, #8]	; (213b4 <z_impl_k_sem_take+0x4c>)
   213ac:	f000 fb80 	bl	21ab0 <z_pend_curr>
	return ret;
   213b0:	e7ec      	b.n	2138c <z_impl_k_sem_take+0x24>
   213b2:	bf00      	nop
   213b4:	200047c4 	.word	0x200047c4

000213b8 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   213b8:	b570      	push	{r4, r5, r6, lr}
   213ba:	4604      	mov	r4, r0
	__asm__ volatile(
   213bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   213c0:	f3ef 8511 	mrs	r5, BASEPRI
   213c4:	f383 8812 	msr	BASEPRI_MAX, r3
   213c8:	f3bf 8f6f 	isb	sy
   213cc:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   213d0:	4620      	mov	r0, r4
   213d2:	f008 ffac 	bl	2a32e <z_unpend_first_thread>
		if (thread == NULL) {
   213d6:	b118      	cbz	r0, 213e0 <z_impl_k_sem_reset+0x28>
   213d8:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   213da:	f008 ff37 	bl	2a24c <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   213de:	e7f7      	b.n	213d0 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   213e0:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   213e2:	2102      	movs	r1, #2
   213e4:	f104 0010 	add.w	r0, r4, #16
   213e8:	f009 f9b3 	bl	2a752 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   213ec:	4629      	mov	r1, r5
   213ee:	4802      	ldr	r0, [pc, #8]	; (213f8 <z_impl_k_sem_reset+0x40>)
}
   213f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   213f4:	f000 ba08 	b.w	21808 <z_reschedule>
   213f8:	200047c4 	.word	0x200047c4

000213fc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   213fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   213fe:	4b09      	ldr	r3, [pc, #36]	; (21424 <k_sys_work_q_init+0x28>)
   21400:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   21402:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   21404:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   21406:	9300      	str	r3, [sp, #0]
   21408:	4907      	ldr	r1, [pc, #28]	; (21428 <k_sys_work_q_init+0x2c>)
   2140a:	4808      	ldr	r0, [pc, #32]	; (2142c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   2140c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   21410:	f04f 33ff 	mov.w	r3, #4294967295
   21414:	f44f 6200 	mov.w	r2, #2048	; 0x800
   21418:	f000 f914 	bl	21644 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   2141c:	4620      	mov	r0, r4
   2141e:	b004      	add	sp, #16
   21420:	bd10      	pop	{r4, pc}
   21422:	bf00      	nop
   21424:	0002e34d 	.word	0x0002e34d
   21428:	20006990 	.word	0x20006990
   2142c:	20002410 	.word	0x20002410

00021430 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   21430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   21434:	4e47      	ldr	r6, [pc, #284]	; (21554 <work_queue_main+0x124>)
   21436:	b085      	sub	sp, #20
   21438:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   2143a:	f04f 38ff 	mov.w	r8, #4294967295
   2143e:	f04f 39ff 	mov.w	r9, #4294967295
   21442:	f04f 0340 	mov.w	r3, #64	; 0x40
   21446:	f3ef 8711 	mrs	r7, BASEPRI
   2144a:	f383 8812 	msr	BASEPRI_MAX, r3
   2144e:	f3bf 8f6f 	isb	sy
   21452:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   21456:	b98d      	cbnz	r5, 2147c <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   21458:	2102      	movs	r1, #2
   2145a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2145e:	f008 fd98 	bl	29f92 <flag_test_and_clear>
   21462:	2800      	cmp	r0, #0
   21464:	d135      	bne.n	214d2 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   21466:	2300      	movs	r3, #0
   21468:	e9cd 8900 	strd	r8, r9, [sp]
   2146c:	9302      	str	r3, [sp, #8]
   2146e:	f104 0288 	add.w	r2, r4, #136	; 0x88
   21472:	4639      	mov	r1, r7
   21474:	4838      	ldr	r0, [pc, #224]	; (21558 <work_queue_main+0x128>)
   21476:	f000 fcf3 	bl	21e60 <z_sched_wait>
			continue;
   2147a:	e7e2      	b.n	21442 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2147c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   21480:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   21482:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21486:	4295      	cmp	r5, r2
   21488:	d101      	bne.n	2148e <work_queue_main+0x5e>
	list->tail = node;
   2148a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   2148e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   21492:	f043 0302 	orr.w	r3, r3, #2
   21496:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   2149a:	68eb      	ldr	r3, [r5, #12]
   2149c:	f023 0304 	bic.w	r3, r3, #4
   214a0:	f043 0301 	orr.w	r3, r3, #1
   214a4:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   214a6:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   214a8:	f387 8811 	msr	BASEPRI, r7
   214ac:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   214b0:	4628      	mov	r0, r5
   214b2:	4798      	blx	r3
	__asm__ volatile(
   214b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   214b8:	f3ef 8b11 	mrs	fp, BASEPRI
   214bc:	f383 8812 	msr	BASEPRI_MAX, r3
   214c0:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   214c4:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   214c6:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   214c8:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   214cc:	d40b      	bmi.n	214e6 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   214ce:	60ea      	str	r2, [r5, #12]
   214d0:	e00e      	b.n	214f0 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   214d2:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   214d6:	2200      	movs	r2, #0
   214d8:	2101      	movs	r1, #1
   214da:	4628      	mov	r0, r5
   214dc:	f008 ff4f 	bl	2a37e <z_sched_wake>
   214e0:	2800      	cmp	r0, #0
   214e2:	d1f8      	bne.n	214d6 <work_queue_main+0xa6>
   214e4:	e7bf      	b.n	21466 <work_queue_main+0x36>
	return list->head;
   214e6:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   214e8:	f023 0303 	bic.w	r3, r3, #3
   214ec:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   214ee:	b970      	cbnz	r0, 2150e <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   214f0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   214f4:	f023 0302 	bic.w	r3, r3, #2
   214f8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   214fc:	f38b 8811 	msr	BASEPRI, fp
   21500:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   21504:	05d8      	lsls	r0, r3, #23
   21506:	d49c      	bmi.n	21442 <work_queue_main+0x12>
	z_impl_k_yield();
   21508:	f000 fb88 	bl	21c1c <z_impl_k_yield>
}
   2150c:	e799      	b.n	21442 <work_queue_main+0x12>
	return node->next;
   2150e:	2700      	movs	r7, #0
   21510:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   21514:	463b      	mov	r3, r7
		if (wc->work == work) {
   21516:	6842      	ldr	r2, [r0, #4]
   21518:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   2151a:	4601      	mov	r1, r0
		if (wc->work == work) {
   2151c:	d10c      	bne.n	21538 <work_queue_main+0x108>
	return node->next;
   2151e:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   21520:	b997      	cbnz	r7, 21548 <work_queue_main+0x118>
   21522:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   21524:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   21526:	4282      	cmp	r2, r0
   21528:	d100      	bne.n	2152c <work_queue_main+0xfc>
	list->tail = node;
   2152a:	6071      	str	r1, [r6, #4]
	parent->next = child;
   2152c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   21530:	f7ff fef4 	bl	2131c <z_impl_k_sem_give>
}
   21534:	4639      	mov	r1, r7
   21536:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   21538:	f1ba 0f00 	cmp.w	sl, #0
   2153c:	d0d8      	beq.n	214f0 <work_queue_main+0xc0>
	return node->next;
   2153e:	4650      	mov	r0, sl
   21540:	460f      	mov	r7, r1
   21542:	f8da a000 	ldr.w	sl, [sl]
   21546:	e7e6      	b.n	21516 <work_queue_main+0xe6>
	return list->tail;
   21548:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   2154a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   2154c:	4290      	cmp	r0, r2
	list->tail = node;
   2154e:	bf08      	it	eq
   21550:	6077      	streq	r7, [r6, #4]
}
   21552:	e7eb      	b.n	2152c <work_queue_main+0xfc>
   21554:	20002fb4 	.word	0x20002fb4
   21558:	200047c4 	.word	0x200047c4

0002155c <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   2155c:	68c3      	ldr	r3, [r0, #12]
{
   2155e:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   21560:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   21564:	079b      	lsls	r3, r3, #30
{
   21566:	4605      	mov	r5, r0
   21568:	460c      	mov	r4, r1
	if (ret) {
   2156a:	d50d      	bpl.n	21588 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2156c:	2201      	movs	r2, #1
   2156e:	2100      	movs	r1, #0
   21570:	f104 0008 	add.w	r0, r4, #8
   21574:	f008 fcfd 	bl	29f72 <z_impl_k_sem_init>
	parent->next = child;
   21578:	2300      	movs	r3, #0
   2157a:	6023      	str	r3, [r4, #0]
	return list->tail;
   2157c:	4b05      	ldr	r3, [pc, #20]	; (21594 <cancel_sync_locked+0x38>)
	canceler->work = work;
   2157e:	6065      	str	r5, [r4, #4]
   21580:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   21582:	b91a      	cbnz	r2, 2158c <cancel_sync_locked+0x30>
	list->head = node;
   21584:	e9c3 4400 	strd	r4, r4, [r3]
}
   21588:	4630      	mov	r0, r6
   2158a:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   2158c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2158e:	605c      	str	r4, [r3, #4]
}
   21590:	e7fa      	b.n	21588 <cancel_sync_locked+0x2c>
   21592:	bf00      	nop
   21594:	20002fb4 	.word	0x20002fb4

00021598 <submit_to_queue_locked>:
{
   21598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   2159a:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2159c:	079a      	lsls	r2, r3, #30
{
   2159e:	4604      	mov	r4, r0
   215a0:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   215a2:	f3c3 0540 	ubfx	r5, r3, #1, #1
   215a6:	d41f      	bmi.n	215e8 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   215a8:	075f      	lsls	r7, r3, #29
   215aa:	d41f      	bmi.n	215ec <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   215ac:	680a      	ldr	r2, [r1, #0]
   215ae:	b90a      	cbnz	r2, 215b4 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   215b0:	6882      	ldr	r2, [r0, #8]
   215b2:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   215b4:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   215b6:	bf44      	itt	mi
   215b8:	68a3      	ldrmi	r3, [r4, #8]
   215ba:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   215bc:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   215be:	bf4c      	ite	mi
   215c0:	2502      	movmi	r5, #2
		ret = 1;
   215c2:	2501      	movpl	r5, #1
	if (queue == NULL) {
   215c4:	b37f      	cbz	r7, 21626 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   215c6:	4b1b      	ldr	r3, [pc, #108]	; (21634 <submit_to_queue_locked+0x9c>)
   215c8:	689b      	ldr	r3, [r3, #8]
   215ca:	42bb      	cmp	r3, r7
   215cc:	d111      	bne.n	215f2 <submit_to_queue_locked+0x5a>
   215ce:	f008 fbe0 	bl	29d92 <k_is_in_isr>
   215d2:	f080 0001 	eor.w	r0, r0, #1
   215d6:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   215d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   215dc:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   215de:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   215e2:	d523      	bpl.n	2162c <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   215e4:	b13a      	cbz	r2, 215f6 <submit_to_queue_locked+0x5e>
   215e6:	b940      	cbnz	r0, 215fa <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   215e8:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   215ec:	2300      	movs	r3, #0
   215ee:	6033      	str	r3, [r6, #0]
	return ret;
   215f0:	e013      	b.n	2161a <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   215f2:	2000      	movs	r0, #0
   215f4:	e7f0      	b.n	215d8 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   215f6:	071b      	lsls	r3, r3, #28
   215f8:	d4f6      	bmi.n	215e8 <submit_to_queue_locked+0x50>
	parent->next = child;
   215fa:	2300      	movs	r3, #0
   215fc:	6023      	str	r3, [r4, #0]
	return list->tail;
   215fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   21602:	b963      	cbnz	r3, 2161e <submit_to_queue_locked+0x86>
	list->head = node;
   21604:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   21608:	4638      	mov	r0, r7
   2160a:	f008 fcdb 	bl	29fc4 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   2160e:	68e3      	ldr	r3, [r4, #12]
   21610:	f043 0304 	orr.w	r3, r3, #4
   21614:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   21616:	6833      	ldr	r3, [r6, #0]
   21618:	60a3      	str	r3, [r4, #8]
}
   2161a:	4628      	mov	r0, r5
   2161c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   2161e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21620:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   21624:	e7f0      	b.n	21608 <submit_to_queue_locked+0x70>
		return -EINVAL;
   21626:	f06f 0515 	mvn.w	r5, #21
   2162a:	e7df      	b.n	215ec <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   2162c:	f06f 0512 	mvn.w	r5, #18
   21630:	e7dc      	b.n	215ec <submit_to_queue_locked+0x54>
   21632:	bf00      	nop
   21634:	20002f8c 	.word	0x20002f8c

00021638 <k_work_submit>:
{
   21638:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   2163a:	4801      	ldr	r0, [pc, #4]	; (21640 <k_work_submit+0x8>)
   2163c:	f008 bd46 	b.w	2a0cc <k_work_submit_to_queue>
   21640:	20002410 	.word	0x20002410

00021644 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   21644:	b5f0      	push	{r4, r5, r6, r7, lr}
   21646:	b089      	sub	sp, #36	; 0x24
   21648:	4604      	mov	r4, r0
	list->head = NULL;
   2164a:	2000      	movs	r0, #0
	list->tail = NULL;
   2164c:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   21650:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   21652:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   21656:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   2165a:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2165e:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   21662:	b31d      	cbz	r5, 216ac <k_work_queue_start+0x68>
   21664:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   21666:	2800      	cmp	r0, #0
   21668:	f240 1001 	movw	r0, #257	; 0x101
   2166c:	bf08      	it	eq
   2166e:	2001      	moveq	r0, #1
	*flagp = flags;
   21670:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   21674:	2000      	movs	r0, #0
   21676:	f04f 36ff 	mov.w	r6, #4294967295
   2167a:	f04f 37ff 	mov.w	r7, #4294967295
   2167e:	e9cd 3003 	strd	r3, r0, [sp, #12]
   21682:	e9cd 0001 	strd	r0, r0, [sp, #4]
   21686:	e9cd 6706 	strd	r6, r7, [sp, #24]
   2168a:	4b09      	ldr	r3, [pc, #36]	; (216b0 <k_work_queue_start+0x6c>)
   2168c:	9400      	str	r4, [sp, #0]
   2168e:	4620      	mov	r0, r4
   21690:	f7ff fcb8 	bl	21004 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   21694:	b125      	cbz	r5, 216a0 <k_work_queue_start+0x5c>
   21696:	6829      	ldr	r1, [r5, #0]
   21698:	b111      	cbz	r1, 216a0 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   2169a:	4620      	mov	r0, r4
   2169c:	f008 fb7f 	bl	29d9e <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   216a0:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   216a2:	b009      	add	sp, #36	; 0x24
   216a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   216a8:	f008 bb7e 	b.w	29da8 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   216ac:	2001      	movs	r0, #1
   216ae:	e7df      	b.n	21670 <k_work_queue_start+0x2c>
   216b0:	00021431 	.word	0x00021431

000216b4 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   216b4:	b513      	push	{r0, r1, r4, lr}
   216b6:	9001      	str	r0, [sp, #4]
   216b8:	4608      	mov	r0, r1
	__asm__ volatile(
   216ba:	f04f 0140 	mov.w	r1, #64	; 0x40
   216be:	f3ef 8411 	mrs	r4, BASEPRI
   216c2:	f381 8812 	msr	BASEPRI_MAX, r1
   216c6:	f3bf 8f6f 	isb	sy
	return *flagp;
   216ca:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   216cc:	f011 0f0e 	tst.w	r1, #14
   216d0:	d116      	bne.n	21700 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   216d2:	ea53 0c02 	orrs.w	ip, r3, r2
   216d6:	d108      	bne.n	216ea <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   216d8:	a901      	add	r1, sp, #4
   216da:	f7ff ff5d 	bl	21598 <submit_to_queue_locked>
	__asm__ volatile(
   216de:	f384 8811 	msr	BASEPRI, r4
   216e2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   216e6:	b002      	add	sp, #8
   216e8:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   216ea:	f041 0108 	orr.w	r1, r1, #8
   216ee:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   216f0:	9901      	ldr	r1, [sp, #4]
   216f2:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   216f4:	3010      	adds	r0, #16
   216f6:	4903      	ldr	r1, [pc, #12]	; (21704 <k_work_schedule_for_queue+0x50>)
   216f8:	f000 fc28 	bl	21f4c <z_add_timeout>
	return ret;
   216fc:	2001      	movs	r0, #1
   216fe:	e7ee      	b.n	216de <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   21700:	2000      	movs	r0, #0
   21702:	e7ec      	b.n	216de <k_work_schedule_for_queue+0x2a>
   21704:	0002a035 	.word	0x0002a035

00021708 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   21708:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   2170a:	4801      	ldr	r0, [pc, #4]	; (21710 <k_work_schedule+0x8>)
   2170c:	f7ff bfd2 	b.w	216b4 <k_work_schedule_for_queue>
   21710:	20002410 	.word	0x20002410

00021714 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   21714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21716:	460c      	mov	r4, r1
   21718:	9001      	str	r0, [sp, #4]
   2171a:	4616      	mov	r6, r2
   2171c:	461d      	mov	r5, r3
	__asm__ volatile(
   2171e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21722:	f3ef 8711 	mrs	r7, BASEPRI
   21726:	f383 8812 	msr	BASEPRI_MAX, r3
   2172a:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   2172e:	4608      	mov	r0, r1
   21730:	f008 fc3a 	bl	29fa8 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21734:	ea55 0306 	orrs.w	r3, r5, r6
   21738:	d109      	bne.n	2174e <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   2173a:	a901      	add	r1, sp, #4
   2173c:	4620      	mov	r0, r4
   2173e:	f7ff ff2b 	bl	21598 <submit_to_queue_locked>
	__asm__ volatile(
   21742:	f387 8811 	msr	BASEPRI, r7
   21746:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2174a:	b003      	add	sp, #12
   2174c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   2174e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   21750:	4906      	ldr	r1, [pc, #24]	; (2176c <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   21752:	f043 0308 	orr.w	r3, r3, #8
   21756:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   21758:	9b01      	ldr	r3, [sp, #4]
   2175a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2175c:	f104 0010 	add.w	r0, r4, #16
   21760:	4632      	mov	r2, r6
   21762:	462b      	mov	r3, r5
   21764:	f000 fbf2 	bl	21f4c <z_add_timeout>
	return ret;
   21768:	2001      	movs	r0, #1
   2176a:	e7ea      	b.n	21742 <k_work_reschedule_for_queue+0x2e>
   2176c:	0002a035 	.word	0x0002a035

00021770 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   21770:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   21772:	4801      	ldr	r0, [pc, #4]	; (21778 <k_work_reschedule+0x8>)
   21774:	f7ff bfce 	b.w	21714 <k_work_reschedule_for_queue>
   21778:	20002410 	.word	0x20002410

0002177c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   2177c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   2177e:	4d07      	ldr	r5, [pc, #28]	; (2179c <z_reset_time_slice+0x20>)
   21780:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   21782:	b154      	cbz	r4, 2179a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   21784:	f7fd fa18 	bl	1ebb8 <sys_clock_elapsed>
   21788:	4b05      	ldr	r3, [pc, #20]	; (217a0 <z_reset_time_slice+0x24>)
   2178a:	4404      	add	r4, r0
   2178c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   2178e:	6828      	ldr	r0, [r5, #0]
   21790:	2100      	movs	r1, #0
	}
}
   21792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   21796:	f008 be35 	b.w	2a404 <z_set_timeout_expiry>
}
   2179a:	bd38      	pop	{r3, r4, r5, pc}
   2179c:	20002fc4 	.word	0x20002fc4
   217a0:	20002f8c 	.word	0x20002f8c

000217a4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   217a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   217a6:	4604      	mov	r4, r0
   217a8:	460d      	mov	r5, r1
	__asm__ volatile(
   217aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   217ae:	f3ef 8711 	mrs	r7, BASEPRI
   217b2:	f383 8812 	msr	BASEPRI_MAX, r3
   217b6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   217ba:	4e10      	ldr	r6, [pc, #64]	; (217fc <k_sched_time_slice_set+0x58>)
   217bc:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   217be:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   217c2:	f240 30e7 	movw	r0, #999	; 0x3e7
   217c6:	6131      	str	r1, [r6, #16]
   217c8:	2300      	movs	r3, #0
   217ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   217ce:	fbe4 010c 	umlal	r0, r1, r4, ip
   217d2:	f7de ff19 	bl	608 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   217d6:	2c00      	cmp	r4, #0
   217d8:	4b09      	ldr	r3, [pc, #36]	; (21800 <k_sched_time_slice_set+0x5c>)
   217da:	dc0a      	bgt.n	217f2 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   217dc:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   217de:	4b09      	ldr	r3, [pc, #36]	; (21804 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   217e0:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   217e2:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   217e4:	f7ff ffca 	bl	2177c <z_reset_time_slice>
	__asm__ volatile(
   217e8:	f387 8811 	msr	BASEPRI, r7
   217ec:	f3bf 8f6f 	isb	sy
	}
}
   217f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   217f2:	2802      	cmp	r0, #2
   217f4:	bfb8      	it	lt
   217f6:	2002      	movlt	r0, #2
   217f8:	e7f0      	b.n	217dc <k_sched_time_slice_set+0x38>
   217fa:	bf00      	nop
   217fc:	20002f8c 	.word	0x20002f8c
   21800:	20002fc4 	.word	0x20002fc4
   21804:	20002fc0 	.word	0x20002fc0

00021808 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   21808:	b949      	cbnz	r1, 2181e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2180a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   2180e:	b930      	cbnz	r0, 2181e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   21810:	4b05      	ldr	r3, [pc, #20]	; (21828 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   21812:	69da      	ldr	r2, [r3, #28]
   21814:	689b      	ldr	r3, [r3, #8]
   21816:	429a      	cmp	r2, r3
   21818:	d001      	beq.n	2181e <z_reschedule+0x16>
	ret = arch_swap(key);
   2181a:	f7f2 bcef 	b.w	141fc <arch_swap>
   2181e:	f381 8811 	msr	BASEPRI, r1
   21822:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   21826:	4770      	bx	lr
   21828:	20002f8c 	.word	0x20002f8c

0002182c <k_sched_lock>:
	__asm__ volatile(
   2182c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21830:	f3ef 8111 	mrs	r1, BASEPRI
   21834:	f383 8812 	msr	BASEPRI_MAX, r3
   21838:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   2183c:	4b04      	ldr	r3, [pc, #16]	; (21850 <k_sched_lock+0x24>)
   2183e:	689a      	ldr	r2, [r3, #8]
   21840:	7bd3      	ldrb	r3, [r2, #15]
   21842:	3b01      	subs	r3, #1
   21844:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   21846:	f381 8811 	msr	BASEPRI, r1
   2184a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   2184e:	4770      	bx	lr
   21850:	20002f8c 	.word	0x20002f8c

00021854 <update_cache>:
{
   21854:	b538      	push	{r3, r4, r5, lr}
   21856:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   21858:	480c      	ldr	r0, [pc, #48]	; (2188c <update_cache+0x38>)
   2185a:	4d0d      	ldr	r5, [pc, #52]	; (21890 <update_cache+0x3c>)
   2185c:	f008 fcf0 	bl	2a240 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   21860:	4604      	mov	r4, r0
   21862:	b900      	cbnz	r0, 21866 <update_cache+0x12>
   21864:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   21866:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   21868:	b94a      	cbnz	r2, 2187e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   2186a:	7b5a      	ldrb	r2, [r3, #13]
   2186c:	06d2      	lsls	r2, r2, #27
   2186e:	d106      	bne.n	2187e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   21870:	69a2      	ldr	r2, [r4, #24]
   21872:	b922      	cbnz	r2, 2187e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   21874:	89da      	ldrh	r2, [r3, #14]
   21876:	2a7f      	cmp	r2, #127	; 0x7f
   21878:	d901      	bls.n	2187e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   2187a:	61eb      	str	r3, [r5, #28]
}
   2187c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   2187e:	429c      	cmp	r4, r3
   21880:	d002      	beq.n	21888 <update_cache+0x34>
			z_reset_time_slice(thread);
   21882:	4620      	mov	r0, r4
   21884:	f7ff ff7a 	bl	2177c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   21888:	61ec      	str	r4, [r5, #28]
}
   2188a:	e7f7      	b.n	2187c <update_cache+0x28>
   2188c:	20002fac 	.word	0x20002fac
   21890:	20002f8c 	.word	0x20002f8c

00021894 <move_thread_to_end_of_prio_q>:
{
   21894:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   21896:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2189a:	7b43      	ldrb	r3, [r0, #13]
   2189c:	2a00      	cmp	r2, #0
{
   2189e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   218a0:	da04      	bge.n	218ac <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   218a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   218a6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   218a8:	f008 fc75 	bl	2a196 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   218ac:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   218ae:	4a15      	ldr	r2, [pc, #84]	; (21904 <move_thread_to_end_of_prio_q+0x70>)
   218b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   218b4:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   218b6:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   218ba:	f102 0520 	add.w	r5, r2, #32
   218be:	42ab      	cmp	r3, r5
   218c0:	d01b      	beq.n	218fa <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   218c2:	b1d3      	cbz	r3, 218fa <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   218c4:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   218c8:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   218cc:	4286      	cmp	r6, r0
   218ce:	d00f      	beq.n	218f0 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   218d0:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   218d2:	2800      	cmp	r0, #0
   218d4:	dd0c      	ble.n	218f0 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   218d6:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   218d8:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   218dc:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   218de:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   218e0:	6890      	ldr	r0, [r2, #8]
   218e2:	1a43      	subs	r3, r0, r1
   218e4:	4258      	negs	r0, r3
}
   218e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   218ea:	4158      	adcs	r0, r3
   218ec:	f7ff bfb2 	b.w	21854 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   218f0:	42a3      	cmp	r3, r4
   218f2:	d002      	beq.n	218fa <move_thread_to_end_of_prio_q+0x66>
   218f4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   218f6:	2b00      	cmp	r3, #0
   218f8:	d1e6      	bne.n	218c8 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   218fa:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   218fe:	6021      	str	r1, [r4, #0]
	list->tail = node;
   21900:	6251      	str	r1, [r2, #36]	; 0x24
}
   21902:	e7ed      	b.n	218e0 <move_thread_to_end_of_prio_q+0x4c>
   21904:	20002f8c 	.word	0x20002f8c

00021908 <z_time_slice>:
{
   21908:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2190a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2190e:	f3ef 8511 	mrs	r5, BASEPRI
   21912:	f383 8812 	msr	BASEPRI_MAX, r3
   21916:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   2191a:	4b17      	ldr	r3, [pc, #92]	; (21978 <z_time_slice+0x70>)
   2191c:	4a17      	ldr	r2, [pc, #92]	; (2197c <z_time_slice+0x74>)
   2191e:	689c      	ldr	r4, [r3, #8]
   21920:	6811      	ldr	r1, [r2, #0]
   21922:	428c      	cmp	r4, r1
   21924:	d107      	bne.n	21936 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   21926:	4620      	mov	r0, r4
   21928:	f7ff ff28 	bl	2177c <z_reset_time_slice>
	__asm__ volatile(
   2192c:	f385 8811 	msr	BASEPRI, r5
   21930:	f3bf 8f6f 	isb	sy
}
   21934:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   21936:	2100      	movs	r1, #0
   21938:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   2193a:	4a11      	ldr	r2, [pc, #68]	; (21980 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   2193c:	6812      	ldr	r2, [r2, #0]
   2193e:	b1c2      	cbz	r2, 21972 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   21940:	89e2      	ldrh	r2, [r4, #14]
   21942:	2a7f      	cmp	r2, #127	; 0x7f
   21944:	d815      	bhi.n	21972 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   21946:	7b62      	ldrb	r2, [r4, #13]
   21948:	06d2      	lsls	r2, r2, #27
   2194a:	d112      	bne.n	21972 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2194c:	4a0d      	ldr	r2, [pc, #52]	; (21984 <z_time_slice+0x7c>)
   2194e:	f994 100e 	ldrsb.w	r1, [r4, #14]
   21952:	6812      	ldr	r2, [r2, #0]
   21954:	4291      	cmp	r1, r2
   21956:	db0c      	blt.n	21972 <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
   21958:	4a0b      	ldr	r2, [pc, #44]	; (21988 <z_time_slice+0x80>)
   2195a:	4294      	cmp	r4, r2
   2195c:	d009      	beq.n	21972 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   2195e:	691a      	ldr	r2, [r3, #16]
   21960:	4282      	cmp	r2, r0
   21962:	dc03      	bgt.n	2196c <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   21964:	4620      	mov	r0, r4
   21966:	f7ff ff95 	bl	21894 <move_thread_to_end_of_prio_q>
   2196a:	e7dc      	b.n	21926 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   2196c:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   2196e:	611a      	str	r2, [r3, #16]
   21970:	e7dc      	b.n	2192c <z_time_slice+0x24>
   21972:	2200      	movs	r2, #0
   21974:	e7fb      	b.n	2196e <z_time_slice+0x66>
   21976:	bf00      	nop
   21978:	20002f8c 	.word	0x20002f8c
   2197c:	20002fbc 	.word	0x20002fbc
   21980:	20002fc4 	.word	0x20002fc4
   21984:	20002fc0 	.word	0x20002fc0
   21988:	20002310 	.word	0x20002310

0002198c <ready_thread>:
{
   2198c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2198e:	f990 200d 	ldrsb.w	r2, [r0, #13]
   21992:	7b43      	ldrb	r3, [r0, #13]
   21994:	2a00      	cmp	r2, #0
   21996:	db2a      	blt.n	219ee <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21998:	06da      	lsls	r2, r3, #27
   2199a:	d128      	bne.n	219ee <ready_thread+0x62>
   2199c:	6982      	ldr	r2, [r0, #24]
   2199e:	bb32      	cbnz	r2, 219ee <ready_thread+0x62>
	return list->head == list;
   219a0:	4a14      	ldr	r2, [pc, #80]	; (219f4 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   219a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   219a6:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   219a8:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   219ac:	f102 0520 	add.w	r5, r2, #32
   219b0:	42ab      	cmp	r3, r5
   219b2:	d017      	beq.n	219e4 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   219b4:	b1b3      	cbz	r3, 219e4 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   219b6:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   219ba:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   219be:	428e      	cmp	r6, r1
   219c0:	d00b      	beq.n	219da <ready_thread+0x4e>
		return b2 - b1;
   219c2:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   219c4:	2900      	cmp	r1, #0
   219c6:	dd08      	ble.n	219da <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   219c8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   219ca:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   219ce:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   219d0:	6058      	str	r0, [r3, #4]
}
   219d2:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   219d4:	2000      	movs	r0, #0
   219d6:	f7ff bf3d 	b.w	21854 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   219da:	42a3      	cmp	r3, r4
   219dc:	d002      	beq.n	219e4 <ready_thread+0x58>
   219de:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   219e0:	2b00      	cmp	r3, #0
   219e2:	d1ea      	bne.n	219ba <ready_thread+0x2e>
	node->prev = tail;
   219e4:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   219e8:	6020      	str	r0, [r4, #0]
	list->tail = node;
   219ea:	6250      	str	r0, [r2, #36]	; 0x24
}
   219ec:	e7f1      	b.n	219d2 <ready_thread+0x46>
}
   219ee:	bc70      	pop	{r4, r5, r6}
   219f0:	4770      	bx	lr
   219f2:	bf00      	nop
   219f4:	20002f8c 	.word	0x20002f8c

000219f8 <z_sched_start>:
{
   219f8:	b510      	push	{r4, lr}
	__asm__ volatile(
   219fa:	f04f 0240 	mov.w	r2, #64	; 0x40
   219fe:	f3ef 8411 	mrs	r4, BASEPRI
   21a02:	f382 8812 	msr	BASEPRI_MAX, r2
   21a06:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   21a0a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   21a0c:	0751      	lsls	r1, r2, #29
   21a0e:	d404      	bmi.n	21a1a <z_sched_start+0x22>
	__asm__ volatile(
   21a10:	f384 8811 	msr	BASEPRI, r4
   21a14:	f3bf 8f6f 	isb	sy
}
   21a18:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21a1a:	f022 0204 	bic.w	r2, r2, #4
   21a1e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   21a20:	f7ff ffb4 	bl	2198c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   21a24:	4621      	mov	r1, r4
   21a26:	4802      	ldr	r0, [pc, #8]	; (21a30 <z_sched_start+0x38>)
}
   21a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   21a2c:	f7ff beec 	b.w	21808 <z_reschedule>
   21a30:	200047c4 	.word	0x200047c4

00021a34 <unready_thread>:
{
   21a34:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   21a36:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   21a3a:	7b43      	ldrb	r3, [r0, #13]
   21a3c:	2a00      	cmp	r2, #0
{
   21a3e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   21a40:	da04      	bge.n	21a4c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21a46:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   21a48:	f008 fba5 	bl	2a196 <sys_dlist_remove>
	update_cache(thread == _current);
   21a4c:	4b04      	ldr	r3, [pc, #16]	; (21a60 <unready_thread+0x2c>)
   21a4e:	6898      	ldr	r0, [r3, #8]
   21a50:	1a43      	subs	r3, r0, r1
   21a52:	4258      	negs	r0, r3
   21a54:	4158      	adcs	r0, r3
}
   21a56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   21a5a:	f7ff befb 	b.w	21854 <update_cache>
   21a5e:	bf00      	nop
   21a60:	20002f8c 	.word	0x20002f8c

00021a64 <pend>:
{
   21a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21a68:	4606      	mov	r6, r0
   21a6a:	4615      	mov	r5, r2
   21a6c:	461c      	mov	r4, r3
	__asm__ volatile(
   21a6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21a72:	f3ef 8711 	mrs	r7, BASEPRI
   21a76:	f383 8812 	msr	BASEPRI_MAX, r3
   21a7a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   21a7e:	f008 fc17 	bl	2a2b0 <add_to_waitq_locked>
	__asm__ volatile(
   21a82:	f387 8811 	msr	BASEPRI, r7
   21a86:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21a8a:	f1b4 3fff 	cmp.w	r4, #4294967295
   21a8e:	bf08      	it	eq
   21a90:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   21a94:	d008      	beq.n	21aa8 <pend+0x44>
   21a96:	462a      	mov	r2, r5
   21a98:	4623      	mov	r3, r4
   21a9a:	f106 0018 	add.w	r0, r6, #24
   21a9e:	4903      	ldr	r1, [pc, #12]	; (21aac <pend+0x48>)
}
   21aa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21aa4:	f000 ba52 	b.w	21f4c <z_add_timeout>
   21aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21aac:	0002a26d 	.word	0x0002a26d

00021ab0 <z_pend_curr>:
{
   21ab0:	b510      	push	{r4, lr}
	pending_current = _current;
   21ab2:	4b07      	ldr	r3, [pc, #28]	; (21ad0 <z_pend_curr+0x20>)
   21ab4:	6898      	ldr	r0, [r3, #8]
   21ab6:	4b07      	ldr	r3, [pc, #28]	; (21ad4 <z_pend_curr+0x24>)
{
   21ab8:	460c      	mov	r4, r1
	pending_current = _current;
   21aba:	6018      	str	r0, [r3, #0]
{
   21abc:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   21abe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21ac2:	f7ff ffcf 	bl	21a64 <pend>
   21ac6:	4620      	mov	r0, r4
}
   21ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21acc:	f7f2 bb96 	b.w	141fc <arch_swap>
   21ad0:	20002f8c 	.word	0x20002f8c
   21ad4:	20002fbc 	.word	0x20002fbc

00021ad8 <z_set_prio>:
{
   21ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21ada:	4604      	mov	r4, r0
	__asm__ volatile(
   21adc:	f04f 0340 	mov.w	r3, #64	; 0x40
   21ae0:	f3ef 8611 	mrs	r6, BASEPRI
   21ae4:	f383 8812 	msr	BASEPRI_MAX, r3
   21ae8:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   21aec:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21aee:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   21af0:	b249      	sxtb	r1, r1
   21af2:	d133      	bne.n	21b5c <z_set_prio+0x84>
		if (need_sched) {
   21af4:	6982      	ldr	r2, [r0, #24]
   21af6:	bb8a      	cbnz	r2, 21b5c <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21afc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   21afe:	f008 fb4a 	bl	2a196 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   21b02:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   21b04:	4a17      	ldr	r2, [pc, #92]	; (21b64 <z_set_prio+0x8c>)
				thread->base.prio = prio;
   21b06:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   21b08:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21b0c:	7343      	strb	r3, [r0, #13]
   21b0e:	4610      	mov	r0, r2
   21b10:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21b14:	4283      	cmp	r3, r0
   21b16:	d01b      	beq.n	21b50 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21b18:	b1d3      	cbz	r3, 21b50 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   21b1a:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   21b1c:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   21b20:	42a9      	cmp	r1, r5
   21b22:	d010      	beq.n	21b46 <z_set_prio+0x6e>
		return b2 - b1;
   21b24:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   21b26:	2d00      	cmp	r5, #0
   21b28:	dd0d      	ble.n	21b46 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   21b2a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21b2c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   21b30:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21b32:	605c      	str	r4, [r3, #4]
			update_cache(1);
   21b34:	2001      	movs	r0, #1
   21b36:	f7ff fe8d 	bl	21854 <update_cache>
   21b3a:	2001      	movs	r0, #1
	__asm__ volatile(
   21b3c:	f386 8811 	msr	BASEPRI, r6
   21b40:	f3bf 8f6f 	isb	sy
}
   21b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   21b46:	42bb      	cmp	r3, r7
   21b48:	d002      	beq.n	21b50 <z_set_prio+0x78>
   21b4a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21b4c:	2b00      	cmp	r3, #0
   21b4e:	d1e5      	bne.n	21b1c <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   21b50:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   21b52:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   21b56:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21b58:	6254      	str	r4, [r2, #36]	; 0x24
}
   21b5a:	e7eb      	b.n	21b34 <z_set_prio+0x5c>
			thread->base.prio = prio;
   21b5c:	73a1      	strb	r1, [r4, #14]
   21b5e:	2000      	movs	r0, #0
   21b60:	e7ec      	b.n	21b3c <z_set_prio+0x64>
   21b62:	bf00      	nop
   21b64:	20002f8c 	.word	0x20002f8c

00021b68 <z_impl_k_thread_suspend>:
{
   21b68:	b570      	push	{r4, r5, r6, lr}
   21b6a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   21b6c:	3018      	adds	r0, #24
   21b6e:	f008 fc23 	bl	2a3b8 <z_abort_timeout>
	__asm__ volatile(
   21b72:	f04f 0340 	mov.w	r3, #64	; 0x40
   21b76:	f3ef 8611 	mrs	r6, BASEPRI
   21b7a:	f383 8812 	msr	BASEPRI_MAX, r3
   21b7e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   21b82:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   21b86:	7b63      	ldrb	r3, [r4, #13]
   21b88:	2a00      	cmp	r2, #0
   21b8a:	da05      	bge.n	21b98 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21b90:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   21b92:	4620      	mov	r0, r4
   21b94:	f008 faff 	bl	2a196 <sys_dlist_remove>
		update_cache(thread == _current);
   21b98:	4d0b      	ldr	r5, [pc, #44]	; (21bc8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   21b9a:	7b63      	ldrb	r3, [r4, #13]
   21b9c:	68a8      	ldr	r0, [r5, #8]
   21b9e:	f043 0310 	orr.w	r3, r3, #16
   21ba2:	7363      	strb	r3, [r4, #13]
   21ba4:	1b03      	subs	r3, r0, r4
   21ba6:	4258      	negs	r0, r3
   21ba8:	4158      	adcs	r0, r3
   21baa:	f7ff fe53 	bl	21854 <update_cache>
	__asm__ volatile(
   21bae:	f386 8811 	msr	BASEPRI, r6
   21bb2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   21bb6:	68ab      	ldr	r3, [r5, #8]
   21bb8:	42a3      	cmp	r3, r4
   21bba:	d103      	bne.n	21bc4 <z_impl_k_thread_suspend+0x5c>
}
   21bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   21bc0:	f008 bb34 	b.w	2a22c <z_reschedule_unlocked>
}
   21bc4:	bd70      	pop	{r4, r5, r6, pc}
   21bc6:	bf00      	nop
   21bc8:	20002f8c 	.word	0x20002f8c

00021bcc <k_sched_unlock>:
{
   21bcc:	b510      	push	{r4, lr}
	__asm__ volatile(
   21bce:	f04f 0340 	mov.w	r3, #64	; 0x40
   21bd2:	f3ef 8411 	mrs	r4, BASEPRI
   21bd6:	f383 8812 	msr	BASEPRI_MAX, r3
   21bda:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   21bde:	4b08      	ldr	r3, [pc, #32]	; (21c00 <k_sched_unlock+0x34>)
   21be0:	689a      	ldr	r2, [r3, #8]
   21be2:	7bd3      	ldrb	r3, [r2, #15]
   21be4:	3301      	adds	r3, #1
   21be6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   21be8:	2000      	movs	r0, #0
   21bea:	f7ff fe33 	bl	21854 <update_cache>
	__asm__ volatile(
   21bee:	f384 8811 	msr	BASEPRI, r4
   21bf2:	f3bf 8f6f 	isb	sy
}
   21bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   21bfa:	f008 bb17 	b.w	2a22c <z_reschedule_unlocked>
   21bfe:	bf00      	nop
   21c00:	20002f8c 	.word	0x20002f8c

00021c04 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   21c04:	4b04      	ldr	r3, [pc, #16]	; (21c18 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   21c06:	2100      	movs	r1, #0
   21c08:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   21c0c:	e9c3 2208 	strd	r2, r2, [r3, #32]
   21c10:	4608      	mov	r0, r1
   21c12:	f7ff bdc7 	b.w	217a4 <k_sched_time_slice_set>
   21c16:	bf00      	nop
   21c18:	20002f8c 	.word	0x20002f8c

00021c1c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   21c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   21c1e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21c22:	f3ef 8511 	mrs	r5, BASEPRI
   21c26:	f383 8812 	msr	BASEPRI_MAX, r3
   21c2a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   21c2e:	491a      	ldr	r1, [pc, #104]	; (21c98 <z_impl_k_yield+0x7c>)
   21c30:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21c32:	7b43      	ldrb	r3, [r0, #13]
   21c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21c38:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   21c3a:	f008 faac 	bl	2a196 <sys_dlist_remove>
	}
	queue_thread(_current);
   21c3e:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   21c40:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   21c42:	4608      	mov	r0, r1
   21c44:	f062 027f 	orn	r2, r2, #127	; 0x7f
   21c48:	735a      	strb	r2, [r3, #13]
   21c4a:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21c4e:	4282      	cmp	r2, r0
   21c50:	d01c      	beq.n	21c8c <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21c52:	b1da      	cbz	r2, 21c8c <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   21c54:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   21c56:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   21c5a:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   21c5e:	42a6      	cmp	r6, r4
   21c60:	d00f      	beq.n	21c82 <z_impl_k_yield+0x66>
		return b2 - b1;
   21c62:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   21c64:	2c00      	cmp	r4, #0
   21c66:	dd0c      	ble.n	21c82 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   21c68:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   21c6a:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   21c6e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   21c70:	6053      	str	r3, [r2, #4]
	update_cache(1);
   21c72:	2001      	movs	r0, #1
   21c74:	f7ff fdee 	bl	21854 <update_cache>
   21c78:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   21c7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   21c7e:	f7f2 babd 	b.w	141fc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   21c82:	42ba      	cmp	r2, r7
   21c84:	d002      	beq.n	21c8c <z_impl_k_yield+0x70>
   21c86:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21c88:	2a00      	cmp	r2, #0
   21c8a:	d1e6      	bne.n	21c5a <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   21c8c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   21c8e:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   21c92:	6013      	str	r3, [r2, #0]
	list->tail = node;
   21c94:	624b      	str	r3, [r1, #36]	; 0x24
}
   21c96:	e7ec      	b.n	21c72 <z_impl_k_yield+0x56>
   21c98:	20002f8c 	.word	0x20002f8c

00021c9c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   21c9c:	ea50 0301 	orrs.w	r3, r0, r1
{
   21ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21ca4:	4605      	mov	r5, r0
   21ca6:	460e      	mov	r6, r1
	if (ticks == 0) {
   21ca8:	d103      	bne.n	21cb2 <z_tick_sleep+0x16>
	z_impl_k_yield();
   21caa:	f7ff ffb7 	bl	21c1c <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   21cae:	2000      	movs	r0, #0
   21cb0:	e033      	b.n	21d1a <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   21cb2:	f06f 0401 	mvn.w	r4, #1
   21cb6:	1a24      	subs	r4, r4, r0
   21cb8:	f04f 33ff 	mov.w	r3, #4294967295
   21cbc:	eb63 0301 	sbc.w	r3, r3, r1
   21cc0:	2c01      	cmp	r4, #1
   21cc2:	f173 0300 	sbcs.w	r3, r3, #0
   21cc6:	da02      	bge.n	21cce <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   21cc8:	f008 fbb6 	bl	2a438 <sys_clock_tick_get_32>
   21ccc:	1944      	adds	r4, r0, r5
   21cce:	f04f 0340 	mov.w	r3, #64	; 0x40
   21cd2:	f3ef 8811 	mrs	r8, BASEPRI
   21cd6:	f383 8812 	msr	BASEPRI_MAX, r3
   21cda:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   21cde:	4f10      	ldr	r7, [pc, #64]	; (21d20 <z_tick_sleep+0x84>)
   21ce0:	4b10      	ldr	r3, [pc, #64]	; (21d24 <z_tick_sleep+0x88>)
   21ce2:	68b8      	ldr	r0, [r7, #8]
   21ce4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   21ce6:	f7ff fea5 	bl	21a34 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   21cea:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21cec:	490e      	ldr	r1, [pc, #56]	; (21d28 <z_tick_sleep+0x8c>)
   21cee:	462a      	mov	r2, r5
   21cf0:	4633      	mov	r3, r6
   21cf2:	3018      	adds	r0, #24
   21cf4:	f000 f92a 	bl	21f4c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   21cf8:	68ba      	ldr	r2, [r7, #8]
   21cfa:	7b53      	ldrb	r3, [r2, #13]
   21cfc:	f043 0310 	orr.w	r3, r3, #16
   21d00:	7353      	strb	r3, [r2, #13]
   21d02:	4640      	mov	r0, r8
   21d04:	f7f2 fa7a 	bl	141fc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   21d08:	f008 fb96 	bl	2a438 <sys_clock_tick_get_32>
   21d0c:	1a20      	subs	r0, r4, r0
   21d0e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   21d12:	2801      	cmp	r0, #1
   21d14:	f173 0300 	sbcs.w	r3, r3, #0
   21d18:	dbc9      	blt.n	21cae <z_tick_sleep+0x12>
}
   21d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21d1e:	bf00      	nop
   21d20:	20002f8c 	.word	0x20002f8c
   21d24:	20002fbc 	.word	0x20002fbc
   21d28:	0002a26d 	.word	0x0002a26d

00021d2c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21d2c:	f1b1 3fff 	cmp.w	r1, #4294967295
   21d30:	bf08      	it	eq
   21d32:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   21d36:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21d38:	d106      	bne.n	21d48 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   21d3a:	4b08      	ldr	r3, [pc, #32]	; (21d5c <z_impl_k_sleep+0x30>)
   21d3c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   21d3e:	f7ff ff13 	bl	21b68 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   21d42:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   21d46:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   21d48:	f7ff ffa8 	bl	21c9c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   21d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   21d50:	fb80 0303 	smull	r0, r3, r0, r3
   21d54:	0bc0      	lsrs	r0, r0, #15
   21d56:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   21d5a:	e7f4      	b.n	21d46 <z_impl_k_sleep+0x1a>
   21d5c:	20002f8c 	.word	0x20002f8c

00021d60 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
   21d60:	b538      	push	{r3, r4, r5, lr}
   21d62:	4604      	mov	r4, r0
   21d64:	4809      	ldr	r0, [pc, #36]	; (21d8c <z_impl_k_usleep+0x2c>)
   21d66:	4a0a      	ldr	r2, [pc, #40]	; (21d90 <z_impl_k_usleep+0x30>)
   21d68:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   21d6c:	2100      	movs	r1, #0
   21d6e:	2300      	movs	r3, #0
   21d70:	fbc4 0105 	smlal	r0, r1, r4, r5
   21d74:	f7de fc48 	bl	608 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
   21d78:	17c1      	asrs	r1, r0, #31
   21d7a:	f7ff ff8f 	bl	21c9c <z_tick_sleep>
   21d7e:	4b04      	ldr	r3, [pc, #16]	; (21d90 <z_impl_k_usleep+0x30>)
   21d80:	fb80 3003 	smull	r3, r0, r0, r3
   21d84:	0bdb      	lsrs	r3, r3, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
   21d86:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
   21d8a:	bd38      	pop	{r3, r4, r5, pc}
   21d8c:	000f423f 	.word	0x000f423f
   21d90:	000f4240 	.word	0x000f4240

00021d94 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   21d94:	4b01      	ldr	r3, [pc, #4]	; (21d9c <z_impl_z_current_get+0x8>)
   21d96:	6898      	ldr	r0, [r3, #8]
   21d98:	4770      	bx	lr
   21d9a:	bf00      	nop
   21d9c:	20002f8c 	.word	0x20002f8c

00021da0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   21da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21da4:	4604      	mov	r4, r0
   21da6:	f04f 0340 	mov.w	r3, #64	; 0x40
   21daa:	f3ef 8611 	mrs	r6, BASEPRI
   21dae:	f383 8812 	msr	BASEPRI_MAX, r3
   21db2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   21db6:	7b03      	ldrb	r3, [r0, #12]
   21db8:	07d9      	lsls	r1, r3, #31
   21dba:	d50b      	bpl.n	21dd4 <z_thread_abort+0x34>
	__asm__ volatile(
   21dbc:	f386 8811 	msr	BASEPRI, r6
   21dc0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   21dc4:	4040      	eors	r0, r0
   21dc6:	f380 8811 	msr	BASEPRI, r0
   21dca:	f04f 0004 	mov.w	r0, #4
   21dce:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   21dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   21dd4:	7b43      	ldrb	r3, [r0, #13]
   21dd6:	071a      	lsls	r2, r3, #28
   21dd8:	d504      	bpl.n	21de4 <z_thread_abort+0x44>
   21dda:	f386 8811 	msr	BASEPRI, r6
   21dde:	f3bf 8f6f 	isb	sy
   21de2:	e7f5      	b.n	21dd0 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   21de4:	f023 0220 	bic.w	r2, r3, #32
   21de8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   21dec:	09d2      	lsrs	r2, r2, #7
   21dee:	d120      	bne.n	21e32 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   21df0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   21df2:	68a3      	ldr	r3, [r4, #8]
   21df4:	b113      	cbz	r3, 21dfc <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   21df6:	4620      	mov	r0, r4
   21df8:	f008 f9d5 	bl	2a1a6 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   21dfc:	f104 0018 	add.w	r0, r4, #24
   21e00:	f008 fada 	bl	2a3b8 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   21e04:	f104 0758 	add.w	r7, r4, #88	; 0x58
   21e08:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   21e0c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21e0e:	42bd      	cmp	r5, r7
   21e10:	d000      	beq.n	21e14 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   21e12:	b9b5      	cbnz	r5, 21e42 <z_thread_abort+0xa2>
		update_cache(1);
   21e14:	2001      	movs	r0, #1
   21e16:	f7ff fd1d 	bl	21854 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   21e1a:	4b10      	ldr	r3, [pc, #64]	; (21e5c <z_thread_abort+0xbc>)
   21e1c:	689b      	ldr	r3, [r3, #8]
   21e1e:	42a3      	cmp	r3, r4
   21e20:	d1db      	bne.n	21dda <z_thread_abort+0x3a>
   21e22:	f3ef 8305 	mrs	r3, IPSR
   21e26:	2b00      	cmp	r3, #0
   21e28:	d1d7      	bne.n	21dda <z_thread_abort+0x3a>
   21e2a:	4630      	mov	r0, r6
   21e2c:	f7f2 f9e6 	bl	141fc <arch_swap>
	return ret;
   21e30:	e7d3      	b.n	21dda <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21e32:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   21e36:	f043 0308 	orr.w	r3, r3, #8
   21e3a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   21e3c:	f008 f9ab 	bl	2a196 <sys_dlist_remove>
}
   21e40:	e7d7      	b.n	21df2 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   21e42:	4628      	mov	r0, r5
   21e44:	f008 f9af 	bl	2a1a6 <unpend_thread_no_timeout>
   21e48:	f105 0018 	add.w	r0, r5, #24
   21e4c:	f008 fab4 	bl	2a3b8 <z_abort_timeout>
   21e50:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   21e54:	4628      	mov	r0, r5
   21e56:	f7ff fd99 	bl	2198c <ready_thread>
   21e5a:	e7d7      	b.n	21e0c <z_thread_abort+0x6c>
   21e5c:	20002f8c 	.word	0x20002f8c

00021e60 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   21e60:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   21e62:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   21e66:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   21e68:	e9cd 6700 	strd	r6, r7, [sp]
   21e6c:	f7ff fe20 	bl	21ab0 <z_pend_curr>

	if (data != NULL) {
   21e70:	b11c      	cbz	r4, 21e7a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   21e72:	4b03      	ldr	r3, [pc, #12]	; (21e80 <z_sched_wait+0x20>)
   21e74:	689b      	ldr	r3, [r3, #8]
   21e76:	695b      	ldr	r3, [r3, #20]
   21e78:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   21e7a:	b002      	add	sp, #8
   21e7c:	bdd0      	pop	{r4, r6, r7, pc}
   21e7e:	bf00      	nop
   21e80:	20002f8c 	.word	0x20002f8c

00021e84 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   21e84:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   21e86:	4806      	ldr	r0, [pc, #24]	; (21ea0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   21e88:	4a06      	ldr	r2, [pc, #24]	; (21ea4 <z_data_copy+0x20>)
   21e8a:	4907      	ldr	r1, [pc, #28]	; (21ea8 <z_data_copy+0x24>)
   21e8c:	1a12      	subs	r2, r2, r0
   21e8e:	f007 fed4 	bl	29c3a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   21e92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   21e96:	4a05      	ldr	r2, [pc, #20]	; (21eac <z_data_copy+0x28>)
   21e98:	4905      	ldr	r1, [pc, #20]	; (21eb0 <z_data_copy+0x2c>)
   21e9a:	4806      	ldr	r0, [pc, #24]	; (21eb4 <z_data_copy+0x30>)
   21e9c:	f007 becd 	b.w	29c3a <z_early_memcpy>
   21ea0:	20000000 	.word	0x20000000
   21ea4:	20000b9c 	.word	0x20000b9c
   21ea8:	0002e38c 	.word	0x0002e38c
   21eac:	00000000 	.word	0x00000000
   21eb0:	0002e38c 	.word	0x0002e38c
   21eb4:	20000000 	.word	0x20000000

00021eb8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   21eb8:	4b03      	ldr	r3, [pc, #12]	; (21ec8 <elapsed+0x10>)
   21eba:	681b      	ldr	r3, [r3, #0]
   21ebc:	b90b      	cbnz	r3, 21ec2 <elapsed+0xa>
   21ebe:	f7fc be7b 	b.w	1ebb8 <sys_clock_elapsed>
}
   21ec2:	2000      	movs	r0, #0
   21ec4:	4770      	bx	lr
   21ec6:	bf00      	nop
   21ec8:	20002fc8 	.word	0x20002fc8

00021ecc <next_timeout>:
	return list->head == list;
   21ecc:	4b10      	ldr	r3, [pc, #64]	; (21f10 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   21ece:	b510      	push	{r4, lr}
   21ed0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21ed2:	429c      	cmp	r4, r3
   21ed4:	bf08      	it	eq
   21ed6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   21ed8:	f7ff ffee 	bl	21eb8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   21edc:	b1a4      	cbz	r4, 21f08 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   21ede:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   21ee2:	1a1b      	subs	r3, r3, r0
   21ee4:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   21ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   21eec:	f170 0200 	sbcs.w	r2, r0, #0
   21ef0:	da0a      	bge.n	21f08 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   21ef2:	2800      	cmp	r0, #0
   21ef4:	bfac      	ite	ge
   21ef6:	4618      	movge	r0, r3
   21ef8:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   21efa:	4b06      	ldr	r3, [pc, #24]	; (21f14 <next_timeout+0x48>)
   21efc:	691b      	ldr	r3, [r3, #16]
   21efe:	b113      	cbz	r3, 21f06 <next_timeout+0x3a>
   21f00:	4298      	cmp	r0, r3
   21f02:	bfa8      	it	ge
   21f04:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   21f06:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   21f08:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   21f0c:	e7f5      	b.n	21efa <next_timeout+0x2e>
   21f0e:	bf00      	nop
   21f10:	2000078c 	.word	0x2000078c
   21f14:	20002f8c 	.word	0x20002f8c

00021f18 <remove_timeout>:
{
   21f18:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   21f1a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   21f1c:	b168      	cbz	r0, 21f3a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   21f1e:	4a0a      	ldr	r2, [pc, #40]	; (21f48 <remove_timeout+0x30>)
   21f20:	6852      	ldr	r2, [r2, #4]
   21f22:	4290      	cmp	r0, r2
   21f24:	d009      	beq.n	21f3a <remove_timeout+0x22>
	if (next(t) != NULL) {
   21f26:	b143      	cbz	r3, 21f3a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   21f28:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   21f2c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   21f30:	1912      	adds	r2, r2, r4
   21f32:	eb41 0105 	adc.w	r1, r1, r5
   21f36:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   21f3a:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   21f3c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21f3e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21f40:	2300      	movs	r3, #0
	node->prev = NULL;
   21f42:	e9c0 3300 	strd	r3, r3, [r0]
}
   21f46:	bd30      	pop	{r4, r5, pc}
   21f48:	2000078c 	.word	0x2000078c

00021f4c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
   21f50:	bf08      	it	eq
   21f52:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   21f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21f58:	4604      	mov	r4, r0
   21f5a:	461f      	mov	r7, r3
   21f5c:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21f5e:	d067      	beq.n	22030 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   21f60:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   21f62:	f04f 0340 	mov.w	r3, #64	; 0x40
   21f66:	f3ef 8611 	mrs	r6, BASEPRI
   21f6a:	f383 8812 	msr	BASEPRI_MAX, r3
   21f6e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   21f72:	f06f 0201 	mvn.w	r2, #1
   21f76:	1b53      	subs	r3, r2, r5
   21f78:	f04f 3cff 	mov.w	ip, #4294967295
   21f7c:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   21f80:	2b00      	cmp	r3, #0
   21f82:	db1b      	blt.n	21fbc <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   21f84:	4b2b      	ldr	r3, [pc, #172]	; (22034 <z_add_timeout+0xe8>)
   21f86:	e9d3 1300 	ldrd	r1, r3, [r3]
   21f8a:	1a52      	subs	r2, r2, r1
   21f8c:	eb6c 0303 	sbc.w	r3, ip, r3
   21f90:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   21f92:	eb63 0307 	sbc.w	r3, r3, r7
   21f96:	2d01      	cmp	r5, #1
   21f98:	f173 0200 	sbcs.w	r2, r3, #0
   21f9c:	bfbc      	itt	lt
   21f9e:	2501      	movlt	r5, #1
   21fa0:	2300      	movlt	r3, #0
   21fa2:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   21fa6:	4824      	ldr	r0, [pc, #144]	; (22038 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   21fa8:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21fac:	4283      	cmp	r3, r0
   21fae:	d118      	bne.n	21fe2 <z_add_timeout+0x96>
	node->prev = tail;
   21fb0:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   21fb4:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   21fb8:	6044      	str	r4, [r0, #4]
}
   21fba:	e026      	b.n	2200a <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   21fbc:	f7ff ff7c 	bl	21eb8 <elapsed>
   21fc0:	3501      	adds	r5, #1
   21fc2:	f147 0700 	adc.w	r7, r7, #0
   21fc6:	182d      	adds	r5, r5, r0
   21fc8:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   21fcc:	e9c4 5704 	strd	r5, r7, [r4, #16]
   21fd0:	e7e9      	b.n	21fa6 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   21fd2:	1a52      	subs	r2, r2, r1
   21fd4:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   21fd8:	459c      	cmp	ip, r3
   21fda:	e9c4 2504 	strd	r2, r5, [r4, #16]
   21fde:	d0e7      	beq.n	21fb0 <z_add_timeout+0x64>
   21fe0:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   21fe2:	2b00      	cmp	r3, #0
   21fe4:	d0e4      	beq.n	21fb0 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   21fe6:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   21fea:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   21fee:	428a      	cmp	r2, r1
   21ff0:	eb75 0e07 	sbcs.w	lr, r5, r7
   21ff4:	daed      	bge.n	21fd2 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   21ff6:	1a8a      	subs	r2, r1, r2
   21ff8:	eb67 0505 	sbc.w	r5, r7, r5
   21ffc:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   22000:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22002:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   22006:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22008:	605c      	str	r4, [r3, #4]
	return list->head == list;
   2200a:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2200c:	4283      	cmp	r3, r0
   2200e:	d00b      	beq.n	22028 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   22010:	429c      	cmp	r4, r3
   22012:	d109      	bne.n	22028 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   22014:	f7ff ff5a 	bl	21ecc <next_timeout>

			if (next_time == 0 ||
   22018:	b118      	cbz	r0, 22022 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   2201a:	4b08      	ldr	r3, [pc, #32]	; (2203c <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   2201c:	691b      	ldr	r3, [r3, #16]
   2201e:	4283      	cmp	r3, r0
   22020:	d002      	beq.n	22028 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   22022:	2100      	movs	r1, #0
   22024:	f7fc fd96 	bl	1eb54 <sys_clock_set_timeout>
	__asm__ volatile(
   22028:	f386 8811 	msr	BASEPRI, r6
   2202c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   22030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22032:	bf00      	nop
   22034:	200024b0 	.word	0x200024b0
   22038:	2000078c 	.word	0x2000078c
   2203c:	20002f8c 	.word	0x20002f8c

00022040 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   22040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22044:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   22046:	f7ff fc5f 	bl	21908 <z_time_slice>
	__asm__ volatile(
   2204a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2204e:	f3ef 8511 	mrs	r5, BASEPRI
   22052:	f383 8812 	msr	BASEPRI_MAX, r3
   22056:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   2205a:	4f24      	ldr	r7, [pc, #144]	; (220ec <sys_clock_announce+0xac>)
	return list->head == list;
   2205c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 220f0 <sys_clock_announce+0xb0>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   22060:	4e24      	ldr	r6, [pc, #144]	; (220f4 <sys_clock_announce+0xb4>)
	announce_remaining = ticks;
   22062:	603c      	str	r4, [r7, #0]
   22064:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   22068:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2206a:	4540      	cmp	r0, r8
		curr_tick += dt;
   2206c:	e9d6 2e00 	ldrd	r2, lr, [r6]
   22070:	ea4f 71e3 	mov.w	r1, r3, asr #31
   22074:	d00b      	beq.n	2208e <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   22076:	b150      	cbz	r0, 2208e <sys_clock_announce+0x4e>
   22078:	e9d0 4c04 	ldrd	r4, ip, [r0, #16]
   2207c:	42a3      	cmp	r3, r4
   2207e:	eb71 090c 	sbcs.w	r9, r1, ip
   22082:	da16      	bge.n	220b2 <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   22084:	1ae4      	subs	r4, r4, r3
   22086:	eb6c 0c01 	sbc.w	ip, ip, r1
   2208a:	e9c0 4c04 	strd	r4, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   2208e:	189b      	adds	r3, r3, r2
   22090:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
   22094:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   22096:	e9c6 3100 	strd	r3, r1, [r6]
	announce_remaining = 0;
   2209a:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   2209c:	f7ff ff16 	bl	21ecc <next_timeout>
   220a0:	4621      	mov	r1, r4
   220a2:	f7fc fd57 	bl	1eb54 <sys_clock_set_timeout>
	__asm__ volatile(
   220a6:	f385 8811 	msr	BASEPRI, r5
   220aa:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   220ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   220b2:	18a2      	adds	r2, r4, r2
   220b4:	eb4e 71e4 	adc.w	r1, lr, r4, asr #31
   220b8:	e9c6 2100 	strd	r2, r1, [r6]
		t->dticks = 0;
   220bc:	2300      	movs	r3, #0
   220be:	2200      	movs	r2, #0
   220c0:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   220c4:	f7ff ff28 	bl	21f18 <remove_timeout>
   220c8:	f385 8811 	msr	BASEPRI, r5
   220cc:	f3bf 8f6f 	isb	sy
		t->fn(t);
   220d0:	6883      	ldr	r3, [r0, #8]
   220d2:	4798      	blx	r3
	__asm__ volatile(
   220d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   220d8:	f3ef 8511 	mrs	r5, BASEPRI
   220dc:	f383 8812 	msr	BASEPRI_MAX, r3
   220e0:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   220e4:	683b      	ldr	r3, [r7, #0]
   220e6:	1b1b      	subs	r3, r3, r4
   220e8:	603b      	str	r3, [r7, #0]
   220ea:	e7bb      	b.n	22064 <sys_clock_announce+0x24>
   220ec:	20002fc8 	.word	0x20002fc8
   220f0:	2000078c 	.word	0x2000078c
   220f4:	200024b0 	.word	0x200024b0

000220f8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   220f8:	b510      	push	{r4, lr}
   220fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   220fe:	f3ef 8411 	mrs	r4, BASEPRI
   22102:	f383 8812 	msr	BASEPRI_MAX, r3
   22106:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   2210a:	f7ff fed5 	bl	21eb8 <elapsed>
   2210e:	4b06      	ldr	r3, [pc, #24]	; (22128 <sys_clock_tick_get+0x30>)
   22110:	4601      	mov	r1, r0
   22112:	e9d3 0300 	ldrd	r0, r3, [r3]
   22116:	1808      	adds	r0, r1, r0
   22118:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
	__asm__ volatile(
   2211c:	f384 8811 	msr	BASEPRI, r4
   22120:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   22124:	bd10      	pop	{r4, pc}
   22126:	bf00      	nop
   22128:	200024b0 	.word	0x200024b0

0002212c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   2212c:	b570      	push	{r4, r5, r6, lr}
   2212e:	4604      	mov	r4, r0
	__asm__ volatile(
   22130:	f04f 0340 	mov.w	r3, #64	; 0x40
   22134:	f3ef 8511 	mrs	r5, BASEPRI
   22138:	f383 8812 	msr	BASEPRI_MAX, r3
   2213c:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   22140:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   22144:	3301      	adds	r3, #1
   22146:	f142 0200 	adc.w	r2, r2, #0
   2214a:	2b02      	cmp	r3, #2
   2214c:	f172 0300 	sbcs.w	r3, r2, #0
   22150:	d322      	bcc.n	22198 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   22152:	f008 f975 	bl	2a440 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   22156:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   2215a:	3001      	adds	r0, #1
   2215c:	f141 0100 	adc.w	r1, r1, #0
   22160:	18c0      	adds	r0, r0, r3
   22162:	eb41 0102 	adc.w	r1, r1, r2
   22166:	2801      	cmp	r0, #1
   22168:	f171 0300 	sbcs.w	r3, r1, #0
   2216c:	db32      	blt.n	221d4 <z_timer_expiration_handler+0xa8>
   2216e:	f008 f967 	bl	2a440 <z_impl_k_uptime_ticks>
   22172:	3001      	adds	r0, #1
   22174:	f141 0300 	adc.w	r3, r1, #0
   22178:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   2217c:	1880      	adds	r0, r0, r2
   2217e:	f06f 0201 	mvn.w	r2, #1
   22182:	eb43 0301 	adc.w	r3, r3, r1
   22186:	1a12      	subs	r2, r2, r0
   22188:	f04f 31ff 	mov.w	r1, #4294967295
   2218c:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22190:	491a      	ldr	r1, [pc, #104]	; (221fc <z_timer_expiration_handler+0xd0>)
   22192:	4620      	mov	r0, r4
   22194:	f7ff feda 	bl	21f4c <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   22198:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2219a:	3301      	adds	r3, #1
   2219c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2219e:	6a23      	ldr	r3, [r4, #32]
   221a0:	b173      	cbz	r3, 221c0 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   221a2:	f385 8811 	msr	BASEPRI, r5
   221a6:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   221aa:	6a23      	ldr	r3, [r4, #32]
   221ac:	4620      	mov	r0, r4
   221ae:	4798      	blx	r3
	__asm__ volatile(
   221b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   221b4:	f3ef 8511 	mrs	r5, BASEPRI
   221b8:	f383 8812 	msr	BASEPRI_MAX, r3
   221bc:	f3bf 8f6f 	isb	sy
	return list->head == list;
   221c0:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   221c4:	42a6      	cmp	r6, r4
   221c6:	d000      	beq.n	221ca <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   221c8:	b94e      	cbnz	r6, 221de <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   221ca:	f385 8811 	msr	BASEPRI, r5
   221ce:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   221d2:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   221d4:	f06f 0201 	mvn.w	r2, #1
   221d8:	f04f 33ff 	mov.w	r3, #4294967295
   221dc:	e7d8      	b.n	22190 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   221de:	4630      	mov	r0, r6
   221e0:	f007 fff4 	bl	2a1cc <z_unpend_thread_no_timeout>
   221e4:	2300      	movs	r3, #0
   221e6:	67f3      	str	r3, [r6, #124]	; 0x7c
   221e8:	f385 8811 	msr	BASEPRI, r5
   221ec:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   221f0:	4630      	mov	r0, r6
}
   221f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   221f6:	f008 b829 	b.w	2a24c <z_ready_thread>
   221fa:	bf00      	nop
   221fc:	0002212d 	.word	0x0002212d

00022200 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   22200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22204:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   22206:	f1b3 3fff 	cmp.w	r3, #4294967295
   2220a:	bf08      	it	eq
   2220c:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
   22210:	4606      	mov	r6, r0
   22212:	461c      	mov	r4, r3
   22214:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
   22218:	4689      	mov	r9, r1
   2221a:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2221c:	d03e      	beq.n	2229c <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   2221e:	f1b0 3fff 	cmp.w	r0, #4294967295
   22222:	bf08      	it	eq
   22224:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   22228:	4615      	mov	r5, r2
   2222a:	4607      	mov	r7, r0
   2222c:	d014      	beq.n	22258 <z_impl_k_timer_start+0x58>
   2222e:	ea50 0302 	orrs.w	r3, r0, r2
   22232:	d011      	beq.n	22258 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   22234:	f06f 0301 	mvn.w	r3, #1
   22238:	1a9b      	subs	r3, r3, r2
   2223a:	f04f 33ff 	mov.w	r3, #4294967295
   2223e:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   22242:	2b00      	cmp	r3, #0
   22244:	da08      	bge.n	22258 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   22246:	2a02      	cmp	r2, #2
   22248:	f170 0300 	sbcs.w	r3, r0, #0
   2224c:	bfbc      	itt	lt
   2224e:	2502      	movlt	r5, #2
   22250:	2700      	movlt	r7, #0
   22252:	3d01      	subs	r5, #1
   22254:	f147 37ff 	adc.w	r7, r7, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   22258:	f06f 0301 	mvn.w	r3, #1
   2225c:	1a5b      	subs	r3, r3, r1
   2225e:	f04f 33ff 	mov.w	r3, #4294967295
   22262:	eb63 0304 	sbc.w	r3, r3, r4
   22266:	2b00      	cmp	r3, #0
   22268:	da09      	bge.n	2227e <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2226a:	2901      	cmp	r1, #1
   2226c:	f174 0300 	sbcs.w	r3, r4, #0
   22270:	bfbc      	itt	lt
   22272:	2101      	movlt	r1, #1
   22274:	2400      	movlt	r4, #0
   22276:	f111 39ff 	adds.w	r9, r1, #4294967295
   2227a:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   2227e:	4630      	mov	r0, r6
   22280:	f008 f89a 	bl	2a3b8 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   22284:	2300      	movs	r3, #0
   22286:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
   22288:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2228c:	464a      	mov	r2, r9
   2228e:	4643      	mov	r3, r8
   22290:	4630      	mov	r0, r6
   22292:	4903      	ldr	r1, [pc, #12]	; (222a0 <z_impl_k_timer_start+0xa0>)
		     duration);
}
   22294:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22298:	f7ff be58 	b.w	21f4c <z_add_timeout>
}
   2229c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   222a0:	0002212d 	.word	0x0002212d

000222a4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   222a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   222a8:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   222aa:	4b29      	ldr	r3, [pc, #164]	; (22350 <z_impl_k_poll+0xac>)
   222ac:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   222ae:	2301      	movs	r3, #1
   222b0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   222b4:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   222b8:	ea52 0305 	orrs.w	r3, r2, r5
{
   222bc:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   222be:	bf0c      	ite	eq
   222c0:	2301      	moveq	r3, #1
   222c2:	2300      	movne	r3, #0
   222c4:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   222c8:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   222ca:	f008 f942 	bl	2a552 <register_events>
   222ce:	4681      	mov	r9, r0
	__asm__ volatile(
   222d0:	f04f 0340 	mov.w	r3, #64	; 0x40
   222d4:	f3ef 8a11 	mrs	sl, BASEPRI
   222d8:	f383 8812 	msr	BASEPRI_MAX, r3
   222dc:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   222e0:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   222e4:	b964      	cbnz	r4, 22300 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   222e6:	4601      	mov	r1, r0
   222e8:	4652      	mov	r2, sl
   222ea:	4640      	mov	r0, r8
   222ec:	f008 fa02 	bl	2a6f4 <clear_event_registrations>
	__asm__ volatile(
   222f0:	f38a 8811 	msr	BASEPRI, sl
   222f4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   222f8:	4620      	mov	r0, r4
   222fa:	b002      	add	sp, #8
   222fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   22300:	2300      	movs	r3, #0
   22302:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22306:	ea56 0305 	orrs.w	r3, r6, r5
   2230a:	d106      	bne.n	2231a <z_impl_k_poll+0x76>
   2230c:	f38a 8811 	msr	BASEPRI, sl
   22310:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   22314:	f06f 040a 	mvn.w	r4, #10
   22318:	e7ee      	b.n	222f8 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2231a:	e9cd 6500 	strd	r6, r5, [sp]
   2231e:	4a0d      	ldr	r2, [pc, #52]	; (22354 <z_impl_k_poll+0xb0>)
   22320:	480d      	ldr	r0, [pc, #52]	; (22358 <z_impl_k_poll+0xb4>)
   22322:	4651      	mov	r1, sl
   22324:	f7ff fbc4 	bl	21ab0 <z_pend_curr>
   22328:	4604      	mov	r4, r0
	__asm__ volatile(
   2232a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2232e:	f3ef 8511 	mrs	r5, BASEPRI
   22332:	f383 8812 	msr	BASEPRI_MAX, r3
   22336:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   2233a:	462a      	mov	r2, r5
   2233c:	4649      	mov	r1, r9
   2233e:	4640      	mov	r0, r8
   22340:	f008 f9d8 	bl	2a6f4 <clear_event_registrations>
	__asm__ volatile(
   22344:	f385 8811 	msr	BASEPRI, r5
   22348:	f3bf 8f6f 	isb	sy
	return swap_rc;
   2234c:	e7d4      	b.n	222f8 <z_impl_k_poll+0x54>
   2234e:	bf00      	nop
   22350:	20002f8c 	.word	0x20002f8c
   22354:	20000794 	.word	0x20000794
   22358:	200047c4 	.word	0x200047c4

0002235c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   2235c:	b538      	push	{r3, r4, r5, lr}
   2235e:	4603      	mov	r3, r0
	__asm__ volatile(
   22360:	f04f 0240 	mov.w	r2, #64	; 0x40
   22364:	f3ef 8511 	mrs	r5, BASEPRI
   22368:	f382 8812 	msr	BASEPRI_MAX, r2
   2236c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   22370:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   22372:	2101      	movs	r1, #1
   22374:	6081      	str	r1, [r0, #8]
	return list->head == list;
   22376:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   22378:	4283      	cmp	r3, r0
   2237a:	d106      	bne.n	2238a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   2237c:	f385 8811 	msr	BASEPRI, r5
   22380:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   22384:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   22386:	4620      	mov	r0, r4
   22388:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   2238a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2238e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22390:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22392:	2300      	movs	r3, #0
	node->prev = NULL;
   22394:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   22398:	f008 f952 	bl	2a640 <signal_poll_event>
	z_reschedule(&lock, key);
   2239c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2239e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   223a0:	4801      	ldr	r0, [pc, #4]	; (223a8 <z_impl_k_poll_signal_raise+0x4c>)
   223a2:	f7ff fa31 	bl	21808 <z_reschedule>
	return rc;
   223a6:	e7ee      	b.n	22386 <z_impl_k_poll_signal_raise+0x2a>
   223a8:	200047c4 	.word	0x200047c4

000223ac <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   223ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   223ae:	4606      	mov	r6, r0
   223b0:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   223b2:	f007 fcee 	bl	29d92 <k_is_in_isr>
   223b6:	b978      	cbnz	r0, 223d8 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   223b8:	4b0b      	ldr	r3, [pc, #44]	; (223e8 <z_thread_aligned_alloc+0x3c>)
   223ba:	689b      	ldr	r3, [r3, #8]
   223bc:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   223be:	b17c      	cbz	r4, 223e0 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   223c0:	1d2a      	adds	r2, r5, #4
   223c2:	d209      	bcs.n	223d8 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   223c4:	2000      	movs	r0, #0
   223c6:	2100      	movs	r1, #0
   223c8:	e9cd 0100 	strd	r0, r1, [sp]
   223cc:	f046 0104 	orr.w	r1, r6, #4
   223d0:	4620      	mov	r0, r4
   223d2:	f007 fc3c 	bl	29c4e <k_heap_aligned_alloc>
	if (mem == NULL) {
   223d6:	b908      	cbnz	r0, 223dc <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   223d8:	2400      	movs	r4, #0
	}

	return ret;
   223da:	e001      	b.n	223e0 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   223dc:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   223de:	1d04      	adds	r4, r0, #4
}
   223e0:	4620      	mov	r0, r4
   223e2:	b002      	add	sp, #8
   223e4:	bd70      	pop	{r4, r5, r6, pc}
   223e6:	bf00      	nop
   223e8:	20002f8c 	.word	0x20002f8c

000223ec <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   223ec:	4a02      	ldr	r2, [pc, #8]	; (223f8 <boot_banner+0xc>)
   223ee:	4903      	ldr	r1, [pc, #12]	; (223fc <boot_banner+0x10>)
   223f0:	4803      	ldr	r0, [pc, #12]	; (22400 <boot_banner+0x14>)
   223f2:	f003 bb71 	b.w	25ad8 <printk>
   223f6:	bf00      	nop
   223f8:	0002bc9d 	.word	0x0002bc9d
   223fc:	0002e356 	.word	0x0002e356
   22400:	0002e365 	.word	0x0002e365

00022404 <ocrypto_ecdh_p256_public_key>:
   22404:	b530      	push	{r4, r5, lr}
   22406:	b099      	sub	sp, #100	; 0x64
   22408:	4605      	mov	r5, r0
   2240a:	4668      	mov	r0, sp
   2240c:	f000 f828 	bl	22460 <ocrypto_sc_p256_from32bytes>
   22410:	4669      	mov	r1, sp
   22412:	4604      	mov	r4, r0
   22414:	a808      	add	r0, sp, #32
   22416:	f000 fa53 	bl	228c0 <ocrypto_curve_p256_scalarmult_base>
   2241a:	a908      	add	r1, sp, #32
   2241c:	4304      	orrs	r4, r0
   2241e:	4628      	mov	r0, r5
   22420:	f000 f98a 	bl	22738 <ocrypto_curve_p256_to64bytes>
   22424:	4620      	mov	r0, r4
   22426:	b019      	add	sp, #100	; 0x64
   22428:	bd30      	pop	{r4, r5, pc}
   2242a:	bf00      	nop

0002242c <ocrypto_ecdh_p256_common_secret>:
   2242c:	b570      	push	{r4, r5, r6, lr}
   2242e:	b098      	sub	sp, #96	; 0x60
   22430:	4605      	mov	r5, r0
   22432:	4668      	mov	r0, sp
   22434:	4616      	mov	r6, r2
   22436:	f000 f813 	bl	22460 <ocrypto_sc_p256_from32bytes>
   2243a:	4631      	mov	r1, r6
   2243c:	4604      	mov	r4, r0
   2243e:	a808      	add	r0, sp, #32
   22440:	f000 f946 	bl	226d0 <ocrypto_curve_p256_from64bytes>
   22444:	a908      	add	r1, sp, #32
   22446:	466a      	mov	r2, sp
   22448:	4304      	orrs	r4, r0
   2244a:	4608      	mov	r0, r1
   2244c:	f000 f982 	bl	22754 <ocrypto_curve_p256_scalarmult>
   22450:	a908      	add	r1, sp, #32
   22452:	4304      	orrs	r4, r0
   22454:	4628      	mov	r0, r5
   22456:	f000 f96d 	bl	22734 <ocrypto_curve_p256_to32bytes>
   2245a:	4620      	mov	r0, r4
   2245c:	b018      	add	sp, #96	; 0x60
   2245e:	bd70      	pop	{r4, r5, r6, pc}

00022460 <ocrypto_sc_p256_from32bytes>:
   22460:	b570      	push	{r4, r5, r6, lr}
   22462:	680b      	ldr	r3, [r1, #0]
   22464:	4e12      	ldr	r6, [pc, #72]	; (224b0 <ocrypto_sc_p256_from32bytes+0x50>)
   22466:	ba1b      	rev	r3, r3
   22468:	61c3      	str	r3, [r0, #28]
   2246a:	684b      	ldr	r3, [r1, #4]
   2246c:	ba1b      	rev	r3, r3
   2246e:	6183      	str	r3, [r0, #24]
   22470:	688b      	ldr	r3, [r1, #8]
   22472:	ba1b      	rev	r3, r3
   22474:	6143      	str	r3, [r0, #20]
   22476:	68cb      	ldr	r3, [r1, #12]
   22478:	ba1b      	rev	r3, r3
   2247a:	6103      	str	r3, [r0, #16]
   2247c:	690b      	ldr	r3, [r1, #16]
   2247e:	ba1b      	rev	r3, r3
   22480:	60c3      	str	r3, [r0, #12]
   22482:	694b      	ldr	r3, [r1, #20]
   22484:	ba1b      	rev	r3, r3
   22486:	6083      	str	r3, [r0, #8]
   22488:	698b      	ldr	r3, [r1, #24]
   2248a:	ba1b      	rev	r3, r3
   2248c:	6043      	str	r3, [r0, #4]
   2248e:	69cb      	ldr	r3, [r1, #28]
   22490:	ba1b      	rev	r3, r3
   22492:	4632      	mov	r2, r6
   22494:	6003      	str	r3, [r0, #0]
   22496:	4601      	mov	r1, r0
   22498:	4604      	mov	r4, r0
   2249a:	f7de f8ef 	bl	67c <ocrypto_bigint_sub256>
   2249e:	4631      	mov	r1, r6
   224a0:	4605      	mov	r5, r0
   224a2:	4602      	mov	r2, r0
   224a4:	4620      	mov	r0, r4
   224a6:	f7de f909 	bl	6bc <ocrypto_bigint_cadd256>
   224aa:	1e68      	subs	r0, r5, #1
   224ac:	bd70      	pop	{r4, r5, r6, pc}
   224ae:	bf00      	nop
   224b0:	0002b8cc 	.word	0x0002b8cc

000224b4 <p256_zdblu>:
   224b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   224b8:	b088      	sub	sp, #32
   224ba:	460c      	mov	r4, r1
   224bc:	4606      	mov	r6, r0
   224be:	f102 0120 	add.w	r1, r2, #32
   224c2:	4668      	mov	r0, sp
   224c4:	f106 0720 	add.w	r7, r6, #32
   224c8:	4690      	mov	r8, r2
   224ca:	f7de fbe1 	bl	c90 <ocrypto_mod_p256_sqr>
   224ce:	466a      	mov	r2, sp
   224d0:	4669      	mov	r1, sp
   224d2:	4668      	mov	r0, sp
   224d4:	f7de faee 	bl	ab4 <ocrypto_mod_p256_add>
   224d8:	4669      	mov	r1, sp
   224da:	4638      	mov	r0, r7
   224dc:	f7de fbd8 	bl	c90 <ocrypto_mod_p256_sqr>
   224e0:	463a      	mov	r2, r7
   224e2:	4639      	mov	r1, r7
   224e4:	4638      	mov	r0, r7
   224e6:	f104 0520 	add.w	r5, r4, #32
   224ea:	f7de fae3 	bl	ab4 <ocrypto_mod_p256_add>
   224ee:	466a      	mov	r2, sp
   224f0:	4669      	mov	r1, sp
   224f2:	4668      	mov	r0, sp
   224f4:	f7de fade 	bl	ab4 <ocrypto_mod_p256_add>
   224f8:	4641      	mov	r1, r8
   224fa:	4628      	mov	r0, r5
   224fc:	f7de fbc8 	bl	c90 <ocrypto_mod_p256_sqr>
   22500:	466a      	mov	r2, sp
   22502:	4641      	mov	r1, r8
   22504:	4630      	mov	r0, r6
   22506:	f7de fbab 	bl	c60 <ocrypto_mod_p256_mul>
   2250a:	462a      	mov	r2, r5
   2250c:	4629      	mov	r1, r5
   2250e:	4668      	mov	r0, sp
   22510:	f7de fad0 	bl	ab4 <ocrypto_mod_p256_add>
   22514:	462a      	mov	r2, r5
   22516:	4669      	mov	r1, sp
   22518:	4668      	mov	r0, sp
   2251a:	f7de facb 	bl	ab4 <ocrypto_mod_p256_add>
   2251e:	4a12      	ldr	r2, [pc, #72]	; (22568 <p256_zdblu+0xb4>)
   22520:	4669      	mov	r1, sp
   22522:	4668      	mov	r0, sp
   22524:	f7de fac6 	bl	ab4 <ocrypto_mod_p256_add>
   22528:	4669      	mov	r1, sp
   2252a:	4620      	mov	r0, r4
   2252c:	f7de fbb0 	bl	c90 <ocrypto_mod_p256_sqr>
   22530:	4632      	mov	r2, r6
   22532:	4621      	mov	r1, r4
   22534:	4620      	mov	r0, r4
   22536:	f7de fafb 	bl	b30 <ocrypto_mod_p256_sub>
   2253a:	4632      	mov	r2, r6
   2253c:	4621      	mov	r1, r4
   2253e:	4620      	mov	r0, r4
   22540:	f7de faf6 	bl	b30 <ocrypto_mod_p256_sub>
   22544:	4622      	mov	r2, r4
   22546:	4631      	mov	r1, r6
   22548:	4628      	mov	r0, r5
   2254a:	f7de faf1 	bl	b30 <ocrypto_mod_p256_sub>
   2254e:	466a      	mov	r2, sp
   22550:	4629      	mov	r1, r5
   22552:	4628      	mov	r0, r5
   22554:	f7de fb84 	bl	c60 <ocrypto_mod_p256_mul>
   22558:	463a      	mov	r2, r7
   2255a:	4629      	mov	r1, r5
   2255c:	4628      	mov	r0, r5
   2255e:	f7de fae7 	bl	b30 <ocrypto_mod_p256_sub>
   22562:	b008      	add	sp, #32
   22564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22568:	0002b96c 	.word	0x0002b96c

0002256c <p256_zaddc>:
   2256c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2256e:	b099      	sub	sp, #100	; 0x64
   22570:	4604      	mov	r4, r0
   22572:	460d      	mov	r5, r1
   22574:	460a      	mov	r2, r1
   22576:	4601      	mov	r1, r0
   22578:	4668      	mov	r0, sp
   2257a:	f7de fad9 	bl	b30 <ocrypto_mod_p256_sub>
   2257e:	4669      	mov	r1, sp
   22580:	4668      	mov	r0, sp
   22582:	f7de fb85 	bl	c90 <ocrypto_mod_p256_sqr>
   22586:	466a      	mov	r2, sp
   22588:	4621      	mov	r1, r4
   2258a:	a808      	add	r0, sp, #32
   2258c:	f105 0620 	add.w	r6, r5, #32
   22590:	f104 0720 	add.w	r7, r4, #32
   22594:	f7de fb64 	bl	c60 <ocrypto_mod_p256_mul>
   22598:	466a      	mov	r2, sp
   2259a:	4629      	mov	r1, r5
   2259c:	4668      	mov	r0, sp
   2259e:	f7de fb5f 	bl	c60 <ocrypto_mod_p256_mul>
   225a2:	4632      	mov	r2, r6
   225a4:	4639      	mov	r1, r7
   225a6:	a810      	add	r0, sp, #64	; 0x40
   225a8:	f7de fa84 	bl	ab4 <ocrypto_mod_p256_add>
   225ac:	4632      	mov	r2, r6
   225ae:	4639      	mov	r1, r7
   225b0:	4630      	mov	r0, r6
   225b2:	f7de fabd 	bl	b30 <ocrypto_mod_p256_sub>
   225b6:	4631      	mov	r1, r6
   225b8:	4628      	mov	r0, r5
   225ba:	f7de fb69 	bl	c90 <ocrypto_mod_p256_sqr>
   225be:	466a      	mov	r2, sp
   225c0:	a908      	add	r1, sp, #32
   225c2:	4620      	mov	r0, r4
   225c4:	f7de fa76 	bl	ab4 <ocrypto_mod_p256_add>
   225c8:	4622      	mov	r2, r4
   225ca:	4629      	mov	r1, r5
   225cc:	4628      	mov	r0, r5
   225ce:	f7de faaf 	bl	b30 <ocrypto_mod_p256_sub>
   225d2:	466a      	mov	r2, sp
   225d4:	a908      	add	r1, sp, #32
   225d6:	4668      	mov	r0, sp
   225d8:	f7de faaa 	bl	b30 <ocrypto_mod_p256_sub>
   225dc:	466a      	mov	r2, sp
   225de:	4639      	mov	r1, r7
   225e0:	4638      	mov	r0, r7
   225e2:	f7de fb3d 	bl	c60 <ocrypto_mod_p256_mul>
   225e6:	462a      	mov	r2, r5
   225e8:	a908      	add	r1, sp, #32
   225ea:	4668      	mov	r0, sp
   225ec:	f7de faa0 	bl	b30 <ocrypto_mod_p256_sub>
   225f0:	466a      	mov	r2, sp
   225f2:	4631      	mov	r1, r6
   225f4:	4630      	mov	r0, r6
   225f6:	f7de fb33 	bl	c60 <ocrypto_mod_p256_mul>
   225fa:	463a      	mov	r2, r7
   225fc:	4631      	mov	r1, r6
   225fe:	4630      	mov	r0, r6
   22600:	f7de fa96 	bl	b30 <ocrypto_mod_p256_sub>
   22604:	a910      	add	r1, sp, #64	; 0x40
   22606:	4668      	mov	r0, sp
   22608:	f7de fb42 	bl	c90 <ocrypto_mod_p256_sqr>
   2260c:	4622      	mov	r2, r4
   2260e:	4669      	mov	r1, sp
   22610:	4620      	mov	r0, r4
   22612:	f7de fa8d 	bl	b30 <ocrypto_mod_p256_sub>
   22616:	a908      	add	r1, sp, #32
   22618:	4622      	mov	r2, r4
   2261a:	4608      	mov	r0, r1
   2261c:	f7de fa88 	bl	b30 <ocrypto_mod_p256_sub>
   22620:	a910      	add	r1, sp, #64	; 0x40
   22622:	aa08      	add	r2, sp, #32
   22624:	4608      	mov	r0, r1
   22626:	f7de fb1b 	bl	c60 <ocrypto_mod_p256_mul>
   2262a:	463a      	mov	r2, r7
   2262c:	a910      	add	r1, sp, #64	; 0x40
   2262e:	4638      	mov	r0, r7
   22630:	f7de fa7e 	bl	b30 <ocrypto_mod_p256_sub>
   22634:	b019      	add	sp, #100	; 0x64
   22636:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022638 <p256_zaddu>:
   22638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2263c:	b088      	sub	sp, #32
   2263e:	460c      	mov	r4, r1
   22640:	4605      	mov	r5, r0
   22642:	4690      	mov	r8, r2
   22644:	460a      	mov	r2, r1
   22646:	4601      	mov	r1, r0
   22648:	4668      	mov	r0, sp
   2264a:	f7de fa71 	bl	b30 <ocrypto_mod_p256_sub>
   2264e:	4669      	mov	r1, sp
   22650:	4668      	mov	r0, sp
   22652:	f7de fb1d 	bl	c90 <ocrypto_mod_p256_sqr>
   22656:	466a      	mov	r2, sp
   22658:	4629      	mov	r1, r5
   2265a:	4628      	mov	r0, r5
   2265c:	f104 0620 	add.w	r6, r4, #32
   22660:	f7de fafe 	bl	c60 <ocrypto_mod_p256_mul>
   22664:	f105 0720 	add.w	r7, r5, #32
   22668:	466a      	mov	r2, sp
   2266a:	4621      	mov	r1, r4
   2266c:	4668      	mov	r0, sp
   2266e:	f7de faf7 	bl	c60 <ocrypto_mod_p256_mul>
   22672:	4632      	mov	r2, r6
   22674:	4639      	mov	r1, r7
   22676:	4630      	mov	r0, r6
   22678:	f7de fa5a 	bl	b30 <ocrypto_mod_p256_sub>
   2267c:	4631      	mov	r1, r6
   2267e:	4620      	mov	r0, r4
   22680:	f7de fb06 	bl	c90 <ocrypto_mod_p256_sqr>
   22684:	462a      	mov	r2, r5
   22686:	4621      	mov	r1, r4
   22688:	4620      	mov	r0, r4
   2268a:	f7de fa51 	bl	b30 <ocrypto_mod_p256_sub>
   2268e:	466a      	mov	r2, sp
   22690:	4621      	mov	r1, r4
   22692:	4620      	mov	r0, r4
   22694:	f7de fa4c 	bl	b30 <ocrypto_mod_p256_sub>
   22698:	466a      	mov	r2, sp
   2269a:	4629      	mov	r1, r5
   2269c:	4640      	mov	r0, r8
   2269e:	f7de fa47 	bl	b30 <ocrypto_mod_p256_sub>
   226a2:	4642      	mov	r2, r8
   226a4:	4639      	mov	r1, r7
   226a6:	4638      	mov	r0, r7
   226a8:	f7de fada 	bl	c60 <ocrypto_mod_p256_mul>
   226ac:	4622      	mov	r2, r4
   226ae:	4629      	mov	r1, r5
   226b0:	4668      	mov	r0, sp
   226b2:	f7de fa3d 	bl	b30 <ocrypto_mod_p256_sub>
   226b6:	466a      	mov	r2, sp
   226b8:	4631      	mov	r1, r6
   226ba:	4630      	mov	r0, r6
   226bc:	f7de fad0 	bl	c60 <ocrypto_mod_p256_mul>
   226c0:	463a      	mov	r2, r7
   226c2:	4631      	mov	r1, r6
   226c4:	4630      	mov	r0, r6
   226c6:	f7de fa33 	bl	b30 <ocrypto_mod_p256_sub>
   226ca:	b008      	add	sp, #32
   226cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000226d0 <ocrypto_curve_p256_from64bytes>:
   226d0:	b570      	push	{r4, r5, r6, lr}
   226d2:	f100 0620 	add.w	r6, r0, #32
   226d6:	b090      	sub	sp, #64	; 0x40
   226d8:	460d      	mov	r5, r1
   226da:	4604      	mov	r4, r0
   226dc:	f000 f914 	bl	22908 <ocrypto_mod_p256_from_bytes>
   226e0:	f105 0120 	add.w	r1, r5, #32
   226e4:	4630      	mov	r0, r6
   226e6:	f000 f90f 	bl	22908 <ocrypto_mod_p256_from_bytes>
   226ea:	4621      	mov	r1, r4
   226ec:	a808      	add	r0, sp, #32
   226ee:	f7de facf 	bl	c90 <ocrypto_mod_p256_sqr>
   226f2:	a908      	add	r1, sp, #32
   226f4:	4608      	mov	r0, r1
   226f6:	4a0d      	ldr	r2, [pc, #52]	; (2272c <ocrypto_curve_p256_from64bytes+0x5c>)
   226f8:	f7de f9dc 	bl	ab4 <ocrypto_mod_p256_add>
   226fc:	a908      	add	r1, sp, #32
   226fe:	4622      	mov	r2, r4
   22700:	4608      	mov	r0, r1
   22702:	f7de faad 	bl	c60 <ocrypto_mod_p256_mul>
   22706:	a908      	add	r1, sp, #32
   22708:	4a09      	ldr	r2, [pc, #36]	; (22730 <ocrypto_curve_p256_from64bytes+0x60>)
   2270a:	4608      	mov	r0, r1
   2270c:	f7de f9d2 	bl	ab4 <ocrypto_mod_p256_add>
   22710:	4631      	mov	r1, r6
   22712:	4668      	mov	r0, sp
   22714:	f7de fabc 	bl	c90 <ocrypto_mod_p256_sqr>
   22718:	2220      	movs	r2, #32
   2271a:	4669      	mov	r1, sp
   2271c:	eb0d 0002 	add.w	r0, sp, r2
   22720:	f7de f99a 	bl	a58 <ocrypto_constant_time_equal>
   22724:	3801      	subs	r0, #1
   22726:	b010      	add	sp, #64	; 0x40
   22728:	bd70      	pop	{r4, r5, r6, pc}
   2272a:	bf00      	nop
   2272c:	0002b96c 	.word	0x0002b96c
   22730:	0002b98c 	.word	0x0002b98c

00022734 <ocrypto_curve_p256_to32bytes>:
   22734:	f000 b902 	b.w	2293c <ocrypto_mod_p256_to_bytes>

00022738 <ocrypto_curve_p256_to64bytes>:
   22738:	b538      	push	{r3, r4, r5, lr}
   2273a:	4604      	mov	r4, r0
   2273c:	460d      	mov	r5, r1
   2273e:	f000 f8fd 	bl	2293c <ocrypto_mod_p256_to_bytes>
   22742:	f105 0120 	add.w	r1, r5, #32
   22746:	f104 0020 	add.w	r0, r4, #32
   2274a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2274e:	f000 b8f5 	b.w	2293c <ocrypto_mod_p256_to_bytes>
   22752:	bf00      	nop

00022754 <ocrypto_curve_p256_scalarmult>:
   22754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22758:	4613      	mov	r3, r2
   2275a:	b0b8      	sub	sp, #224	; 0xe0
   2275c:	4a54      	ldr	r2, [pc, #336]	; (228b0 <ocrypto_curve_p256_scalarmult+0x15c>)
   2275e:	4689      	mov	r9, r1
   22760:	4680      	mov	r8, r0
   22762:	4619      	mov	r1, r3
   22764:	a810      	add	r0, sp, #64	; 0x40
   22766:	f7dd ff89 	bl	67c <ocrypto_bigint_sub256>
   2276a:	4952      	ldr	r1, [pc, #328]	; (228b4 <ocrypto_curve_p256_scalarmult+0x160>)
   2276c:	4602      	mov	r2, r0
   2276e:	a810      	add	r0, sp, #64	; 0x40
   22770:	f7dd ffa4 	bl	6bc <ocrypto_bigint_cadd256>
   22774:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   22776:	494e      	ldr	r1, [pc, #312]	; (228b0 <ocrypto_curve_p256_scalarmult+0x15c>)
   22778:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   2277c:	4607      	mov	r7, r0
   2277e:	f1c6 0201 	rsb	r2, r6, #1
   22782:	a810      	add	r0, sp, #64	; 0x40
   22784:	f7dd ff9a 	bl	6bc <ocrypto_bigint_cadd256>
   22788:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2278a:	464a      	mov	r2, r9
   2278c:	ea6f 0a03 	mvn.w	sl, r3
   22790:	a928      	add	r1, sp, #160	; 0xa0
   22792:	a818      	add	r0, sp, #96	; 0x60
   22794:	f7ff fe8e 	bl	224b4 <p256_zdblu>
   22798:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   2279c:	a920      	add	r1, sp, #128	; 0x80
   2279e:	f1ca 0201 	rsb	r2, sl, #1
   227a2:	4608      	mov	r0, r1
   227a4:	f000 f892 	bl	228cc <ocrypto_mod_p256_cneg>
   227a8:	f1c7 0701 	rsb	r7, r7, #1
   227ac:	24fe      	movs	r4, #254	; 0xfe
   227ae:	466a      	mov	r2, sp
   227b0:	a918      	add	r1, sp, #96	; 0x60
   227b2:	a828      	add	r0, sp, #160	; 0xa0
   227b4:	f7ff ff40 	bl	22638 <p256_zaddu>
   227b8:	1162      	asrs	r2, r4, #5
   227ba:	ab38      	add	r3, sp, #224	; 0xe0
   227bc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   227c0:	f004 011f 	and.w	r1, r4, #31
   227c4:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   227c8:	40cb      	lsrs	r3, r1
   227ca:	4655      	mov	r5, sl
   227cc:	f003 0a01 	and.w	sl, r3, #1
   227d0:	ea8a 0505 	eor.w	r5, sl, r5
   227d4:	462a      	mov	r2, r5
   227d6:	a928      	add	r1, sp, #160	; 0xa0
   227d8:	a818      	add	r0, sp, #96	; 0x60
   227da:	f7dd ffcb 	bl	774 <ocrypto_bigint_cswap256>
   227de:	462a      	mov	r2, r5
   227e0:	a930      	add	r1, sp, #192	; 0xc0
   227e2:	a820      	add	r0, sp, #128	; 0x80
   227e4:	f7dd ffc6 	bl	774 <ocrypto_bigint_cswap256>
   227e8:	3c01      	subs	r4, #1
   227ea:	a928      	add	r1, sp, #160	; 0xa0
   227ec:	a818      	add	r0, sp, #96	; 0x60
   227ee:	f7ff febd 	bl	2256c <p256_zaddc>
   227f2:	1c63      	adds	r3, r4, #1
   227f4:	d1db      	bne.n	227ae <ocrypto_curve_p256_scalarmult+0x5a>
   227f6:	f1ca 0201 	rsb	r2, sl, #1
   227fa:	a920      	add	r1, sp, #128	; 0x80
   227fc:	a808      	add	r0, sp, #32
   227fe:	f000 f865 	bl	228cc <ocrypto_mod_p256_cneg>
   22802:	ea86 060a 	eor.w	r6, r6, sl
   22806:	466a      	mov	r2, sp
   22808:	a918      	add	r1, sp, #96	; 0x60
   2280a:	a828      	add	r0, sp, #160	; 0xa0
   2280c:	f7ff ff14 	bl	22638 <p256_zaddu>
   22810:	a928      	add	r1, sp, #160	; 0xa0
   22812:	4632      	mov	r2, r6
   22814:	a818      	add	r0, sp, #96	; 0x60
   22816:	f7dd ffad 	bl	774 <ocrypto_bigint_cswap256>
   2281a:	4632      	mov	r2, r6
   2281c:	a930      	add	r1, sp, #192	; 0xc0
   2281e:	a820      	add	r0, sp, #128	; 0x80
   22820:	f7dd ffa8 	bl	774 <ocrypto_bigint_cswap256>
   22824:	a908      	add	r1, sp, #32
   22826:	466a      	mov	r2, sp
   22828:	4608      	mov	r0, r1
   2282a:	f7de fa19 	bl	c60 <ocrypto_mod_p256_mul>
   2282e:	a908      	add	r1, sp, #32
   22830:	4608      	mov	r0, r1
   22832:	f000 f89d 	bl	22970 <ocrypto_mod_p256_inv>
   22836:	a908      	add	r1, sp, #32
   22838:	f108 0420 	add.w	r4, r8, #32
   2283c:	f109 0220 	add.w	r2, r9, #32
   22840:	4608      	mov	r0, r1
   22842:	f7de fa0d 	bl	c60 <ocrypto_mod_p256_mul>
   22846:	a920      	add	r1, sp, #128	; 0x80
   22848:	aa08      	add	r2, sp, #32
   2284a:	4620      	mov	r0, r4
   2284c:	f7de fa08 	bl	c60 <ocrypto_mod_p256_mul>
   22850:	aa08      	add	r2, sp, #32
   22852:	a918      	add	r1, sp, #96	; 0x60
   22854:	4668      	mov	r0, sp
   22856:	f7de fa03 	bl	c60 <ocrypto_mod_p256_mul>
   2285a:	4669      	mov	r1, sp
   2285c:	4668      	mov	r0, sp
   2285e:	f7de fa17 	bl	c90 <ocrypto_mod_p256_sqr>
   22862:	aa18      	add	r2, sp, #96	; 0x60
   22864:	4669      	mov	r1, sp
   22866:	a808      	add	r0, sp, #32
   22868:	f7de f9fa 	bl	c60 <ocrypto_mod_p256_mul>
   2286c:	4621      	mov	r1, r4
   2286e:	4668      	mov	r0, sp
   22870:	f7de fa0e 	bl	c90 <ocrypto_mod_p256_sqr>
   22874:	aa08      	add	r2, sp, #32
   22876:	4669      	mov	r1, sp
   22878:	4610      	mov	r0, r2
   2287a:	f7de f959 	bl	b30 <ocrypto_mod_p256_sub>
   2287e:	4a0e      	ldr	r2, [pc, #56]	; (228b8 <ocrypto_curve_p256_scalarmult+0x164>)
   22880:	a908      	add	r1, sp, #32
   22882:	4668      	mov	r0, sp
   22884:	f7de f954 	bl	b30 <ocrypto_mod_p256_sub>
   22888:	4620      	mov	r0, r4
   2288a:	2120      	movs	r1, #32
   2288c:	f7de f8f8 	bl	a80 <ocrypto_constant_time_is_zero>
   22890:	a908      	add	r1, sp, #32
   22892:	4243      	negs	r3, r0
   22894:	4602      	mov	r2, r0
   22896:	4668      	mov	r0, sp
   22898:	431f      	orrs	r7, r3
   2289a:	f7dd ff6b 	bl	774 <ocrypto_bigint_cswap256>
   2289e:	4640      	mov	r0, r8
   228a0:	4a06      	ldr	r2, [pc, #24]	; (228bc <ocrypto_curve_p256_scalarmult+0x168>)
   228a2:	4669      	mov	r1, sp
   228a4:	f7de f9dc 	bl	c60 <ocrypto_mod_p256_mul>
   228a8:	4638      	mov	r0, r7
   228aa:	b038      	add	sp, #224	; 0xe0
   228ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   228b0:	0002b9ac 	.word	0x0002b9ac
   228b4:	0002b92c 	.word	0x0002b92c
   228b8:	0002b98c 	.word	0x0002b98c
   228bc:	0002b94c 	.word	0x0002b94c

000228c0 <ocrypto_curve_p256_scalarmult_base>:
   228c0:	460a      	mov	r2, r1
   228c2:	4901      	ldr	r1, [pc, #4]	; (228c8 <ocrypto_curve_p256_scalarmult_base+0x8>)
   228c4:	f7ff bf46 	b.w	22754 <ocrypto_curve_p256_scalarmult>
   228c8:	0002b8ec 	.word	0x0002b8ec

000228cc <ocrypto_mod_p256_cneg>:
   228cc:	b570      	push	{r4, r5, r6, lr}
   228ce:	b088      	sub	sp, #32
   228d0:	4604      	mov	r4, r0
   228d2:	460d      	mov	r5, r1
   228d4:	4616      	mov	r6, r2
   228d6:	2100      	movs	r1, #0
   228d8:	2220      	movs	r2, #32
   228da:	4668      	mov	r0, sp
   228dc:	f004 fa27 	bl	26d2e <memset>
   228e0:	2300      	movs	r3, #0
   228e2:	4629      	mov	r1, r5
   228e4:	2220      	movs	r2, #32
   228e6:	4620      	mov	r0, r4
   228e8:	9300      	str	r3, [sp, #0]
   228ea:	f004 fa15 	bl	26d18 <memcpy>
   228ee:	462a      	mov	r2, r5
   228f0:	4669      	mov	r1, sp
   228f2:	4668      	mov	r0, sp
   228f4:	f7de f91c 	bl	b30 <ocrypto_mod_p256_sub>
   228f8:	4632      	mov	r2, r6
   228fa:	4669      	mov	r1, sp
   228fc:	4620      	mov	r0, r4
   228fe:	f7dd ff39 	bl	774 <ocrypto_bigint_cswap256>
   22902:	b008      	add	sp, #32
   22904:	bd70      	pop	{r4, r5, r6, pc}
   22906:	bf00      	nop

00022908 <ocrypto_mod_p256_from_bytes>:
   22908:	680b      	ldr	r3, [r1, #0]
   2290a:	ba1b      	rev	r3, r3
   2290c:	61c3      	str	r3, [r0, #28]
   2290e:	684b      	ldr	r3, [r1, #4]
   22910:	ba1b      	rev	r3, r3
   22912:	6183      	str	r3, [r0, #24]
   22914:	688b      	ldr	r3, [r1, #8]
   22916:	ba1b      	rev	r3, r3
   22918:	6143      	str	r3, [r0, #20]
   2291a:	68cb      	ldr	r3, [r1, #12]
   2291c:	ba1b      	rev	r3, r3
   2291e:	6103      	str	r3, [r0, #16]
   22920:	690b      	ldr	r3, [r1, #16]
   22922:	ba1b      	rev	r3, r3
   22924:	60c3      	str	r3, [r0, #12]
   22926:	694b      	ldr	r3, [r1, #20]
   22928:	ba1b      	rev	r3, r3
   2292a:	6083      	str	r3, [r0, #8]
   2292c:	698b      	ldr	r3, [r1, #24]
   2292e:	ba1b      	rev	r3, r3
   22930:	6043      	str	r3, [r0, #4]
   22932:	69cb      	ldr	r3, [r1, #28]
   22934:	ba1b      	rev	r3, r3
   22936:	6003      	str	r3, [r0, #0]
   22938:	4770      	bx	lr
   2293a:	bf00      	nop

0002293c <ocrypto_mod_p256_to_bytes>:
   2293c:	69cb      	ldr	r3, [r1, #28]
   2293e:	ba1b      	rev	r3, r3
   22940:	6003      	str	r3, [r0, #0]
   22942:	698b      	ldr	r3, [r1, #24]
   22944:	ba1b      	rev	r3, r3
   22946:	6043      	str	r3, [r0, #4]
   22948:	694b      	ldr	r3, [r1, #20]
   2294a:	ba1b      	rev	r3, r3
   2294c:	6083      	str	r3, [r0, #8]
   2294e:	690b      	ldr	r3, [r1, #16]
   22950:	ba1b      	rev	r3, r3
   22952:	60c3      	str	r3, [r0, #12]
   22954:	68cb      	ldr	r3, [r1, #12]
   22956:	ba1b      	rev	r3, r3
   22958:	6103      	str	r3, [r0, #16]
   2295a:	688b      	ldr	r3, [r1, #8]
   2295c:	ba1b      	rev	r3, r3
   2295e:	6143      	str	r3, [r0, #20]
   22960:	684b      	ldr	r3, [r1, #4]
   22962:	ba1b      	rev	r3, r3
   22964:	6183      	str	r3, [r0, #24]
   22966:	680b      	ldr	r3, [r1, #0]
   22968:	ba1b      	rev	r3, r3
   2296a:	61c3      	str	r3, [r0, #28]
   2296c:	4770      	bx	lr
   2296e:	bf00      	nop

00022970 <ocrypto_mod_p256_inv>:
   22970:	b570      	push	{r4, r5, r6, lr}
   22972:	b098      	sub	sp, #96	; 0x60
   22974:	460d      	mov	r5, r1
   22976:	4606      	mov	r6, r0
   22978:	a810      	add	r0, sp, #64	; 0x40
   2297a:	f7de f989 	bl	c90 <ocrypto_mod_p256_sqr>
   2297e:	462a      	mov	r2, r5
   22980:	a910      	add	r1, sp, #64	; 0x40
   22982:	4668      	mov	r0, sp
   22984:	f7de f96c 	bl	c60 <ocrypto_mod_p256_mul>
   22988:	4669      	mov	r1, sp
   2298a:	a810      	add	r0, sp, #64	; 0x40
   2298c:	f7de f980 	bl	c90 <ocrypto_mod_p256_sqr>
   22990:	a910      	add	r1, sp, #64	; 0x40
   22992:	4608      	mov	r0, r1
   22994:	f7de f97c 	bl	c90 <ocrypto_mod_p256_sqr>
   22998:	466a      	mov	r2, sp
   2299a:	a910      	add	r1, sp, #64	; 0x40
   2299c:	a808      	add	r0, sp, #32
   2299e:	f7de f95f 	bl	c60 <ocrypto_mod_p256_mul>
   229a2:	a908      	add	r1, sp, #32
   229a4:	a810      	add	r0, sp, #64	; 0x40
   229a6:	f7de f973 	bl	c90 <ocrypto_mod_p256_sqr>
   229aa:	a910      	add	r1, sp, #64	; 0x40
   229ac:	4608      	mov	r0, r1
   229ae:	f7de f96f 	bl	c90 <ocrypto_mod_p256_sqr>
   229b2:	a910      	add	r1, sp, #64	; 0x40
   229b4:	4608      	mov	r0, r1
   229b6:	f7de f96b 	bl	c90 <ocrypto_mod_p256_sqr>
   229ba:	a910      	add	r1, sp, #64	; 0x40
   229bc:	4608      	mov	r0, r1
   229be:	f7de f967 	bl	c90 <ocrypto_mod_p256_sqr>
   229c2:	a910      	add	r1, sp, #64	; 0x40
   229c4:	aa08      	add	r2, sp, #32
   229c6:	4608      	mov	r0, r1
   229c8:	f7de f94a 	bl	c60 <ocrypto_mod_p256_mul>
   229cc:	a910      	add	r1, sp, #64	; 0x40
   229ce:	4608      	mov	r0, r1
   229d0:	f7de f95e 	bl	c90 <ocrypto_mod_p256_sqr>
   229d4:	a910      	add	r1, sp, #64	; 0x40
   229d6:	4608      	mov	r0, r1
   229d8:	f7de f95a 	bl	c90 <ocrypto_mod_p256_sqr>
   229dc:	a910      	add	r1, sp, #64	; 0x40
   229de:	466a      	mov	r2, sp
   229e0:	a808      	add	r0, sp, #32
   229e2:	f7de f93d 	bl	c60 <ocrypto_mod_p256_mul>
   229e6:	2405      	movs	r4, #5
   229e8:	a908      	add	r1, sp, #32
   229ea:	a810      	add	r0, sp, #64	; 0x40
   229ec:	f7de f950 	bl	c90 <ocrypto_mod_p256_sqr>
   229f0:	a910      	add	r1, sp, #64	; 0x40
   229f2:	4608      	mov	r0, r1
   229f4:	f7de f94c 	bl	c90 <ocrypto_mod_p256_sqr>
   229f8:	3c01      	subs	r4, #1
   229fa:	a910      	add	r1, sp, #64	; 0x40
   229fc:	d1f5      	bne.n	229ea <ocrypto_mod_p256_inv+0x7a>
   229fe:	aa08      	add	r2, sp, #32
   22a00:	4608      	mov	r0, r1
   22a02:	f7de f92d 	bl	c60 <ocrypto_mod_p256_mul>
   22a06:	2405      	movs	r4, #5
   22a08:	a910      	add	r1, sp, #64	; 0x40
   22a0a:	4608      	mov	r0, r1
   22a0c:	f7de f940 	bl	c90 <ocrypto_mod_p256_sqr>
   22a10:	a910      	add	r1, sp, #64	; 0x40
   22a12:	4608      	mov	r0, r1
   22a14:	f7de f93c 	bl	c90 <ocrypto_mod_p256_sqr>
   22a18:	3c01      	subs	r4, #1
   22a1a:	d1f5      	bne.n	22a08 <ocrypto_mod_p256_inv+0x98>
   22a1c:	a910      	add	r1, sp, #64	; 0x40
   22a1e:	aa08      	add	r2, sp, #32
   22a20:	4608      	mov	r0, r1
   22a22:	f7de f91d 	bl	c60 <ocrypto_mod_p256_mul>
   22a26:	a910      	add	r1, sp, #64	; 0x40
   22a28:	a808      	add	r0, sp, #32
   22a2a:	f7de f931 	bl	c90 <ocrypto_mod_p256_sqr>
   22a2e:	a908      	add	r1, sp, #32
   22a30:	4608      	mov	r0, r1
   22a32:	f7de f92d 	bl	c90 <ocrypto_mod_p256_sqr>
   22a36:	a908      	add	r1, sp, #32
   22a38:	466a      	mov	r2, sp
   22a3a:	4668      	mov	r0, sp
   22a3c:	f7de f910 	bl	c60 <ocrypto_mod_p256_mul>
   22a40:	2410      	movs	r4, #16
   22a42:	4669      	mov	r1, sp
   22a44:	a810      	add	r0, sp, #64	; 0x40
   22a46:	f7de f923 	bl	c90 <ocrypto_mod_p256_sqr>
   22a4a:	a910      	add	r1, sp, #64	; 0x40
   22a4c:	4608      	mov	r0, r1
   22a4e:	f7de f91f 	bl	c90 <ocrypto_mod_p256_sqr>
   22a52:	3c01      	subs	r4, #1
   22a54:	a910      	add	r1, sp, #64	; 0x40
   22a56:	d1f5      	bne.n	22a44 <ocrypto_mod_p256_inv+0xd4>
   22a58:	462a      	mov	r2, r5
   22a5a:	4608      	mov	r0, r1
   22a5c:	f7de f900 	bl	c60 <ocrypto_mod_p256_mul>
   22a60:	2440      	movs	r4, #64	; 0x40
   22a62:	a910      	add	r1, sp, #64	; 0x40
   22a64:	4608      	mov	r0, r1
   22a66:	f7de f913 	bl	c90 <ocrypto_mod_p256_sqr>
   22a6a:	a910      	add	r1, sp, #64	; 0x40
   22a6c:	4608      	mov	r0, r1
   22a6e:	f7de f90f 	bl	c90 <ocrypto_mod_p256_sqr>
   22a72:	3c01      	subs	r4, #1
   22a74:	d1f5      	bne.n	22a62 <ocrypto_mod_p256_inv+0xf2>
   22a76:	a910      	add	r1, sp, #64	; 0x40
   22a78:	466a      	mov	r2, sp
   22a7a:	4608      	mov	r0, r1
   22a7c:	f7de f8f0 	bl	c60 <ocrypto_mod_p256_mul>
   22a80:	2410      	movs	r4, #16
   22a82:	a910      	add	r1, sp, #64	; 0x40
   22a84:	4608      	mov	r0, r1
   22a86:	f7de f903 	bl	c90 <ocrypto_mod_p256_sqr>
   22a8a:	a910      	add	r1, sp, #64	; 0x40
   22a8c:	4608      	mov	r0, r1
   22a8e:	f7de f8ff 	bl	c90 <ocrypto_mod_p256_sqr>
   22a92:	3c01      	subs	r4, #1
   22a94:	d1f5      	bne.n	22a82 <ocrypto_mod_p256_inv+0x112>
   22a96:	a910      	add	r1, sp, #64	; 0x40
   22a98:	466a      	mov	r2, sp
   22a9a:	4608      	mov	r0, r1
   22a9c:	f7de f8e0 	bl	c60 <ocrypto_mod_p256_mul>
   22aa0:	2410      	movs	r4, #16
   22aa2:	a910      	add	r1, sp, #64	; 0x40
   22aa4:	4608      	mov	r0, r1
   22aa6:	f7de f8f3 	bl	c90 <ocrypto_mod_p256_sqr>
   22aaa:	a910      	add	r1, sp, #64	; 0x40
   22aac:	4608      	mov	r0, r1
   22aae:	f7de f8ef 	bl	c90 <ocrypto_mod_p256_sqr>
   22ab2:	3c01      	subs	r4, #1
   22ab4:	d1f5      	bne.n	22aa2 <ocrypto_mod_p256_inv+0x132>
   22ab6:	a910      	add	r1, sp, #64	; 0x40
   22ab8:	aa08      	add	r2, sp, #32
   22aba:	4608      	mov	r0, r1
   22abc:	f7de f8d0 	bl	c60 <ocrypto_mod_p256_mul>
   22ac0:	462a      	mov	r2, r5
   22ac2:	a910      	add	r1, sp, #64	; 0x40
   22ac4:	4630      	mov	r0, r6
   22ac6:	f7de f8cb 	bl	c60 <ocrypto_mod_p256_mul>
   22aca:	b018      	add	sp, #96	; 0x60
   22acc:	bd70      	pop	{r4, r5, r6, pc}
   22ace:	bf00      	nop

00022ad0 <nrf_cc3xx_platform_init>:
   22ad0:	b510      	push	{r4, lr}
   22ad2:	4c0c      	ldr	r4, [pc, #48]	; (22b04 <nrf_cc3xx_platform_init+0x34>)
   22ad4:	6823      	ldr	r3, [r4, #0]
   22ad6:	b113      	cbz	r3, 22ade <nrf_cc3xx_platform_init+0xe>
   22ad8:	4b0b      	ldr	r3, [pc, #44]	; (22b08 <nrf_cc3xx_platform_init+0x38>)
   22ada:	681b      	ldr	r3, [r3, #0]
   22adc:	b92b      	cbnz	r3, 22aea <nrf_cc3xx_platform_init+0x1a>
   22ade:	f000 fe7d 	bl	237dc <CC_LibInit>
   22ae2:	b930      	cbnz	r0, 22af2 <nrf_cc3xx_platform_init+0x22>
   22ae4:	4b08      	ldr	r3, [pc, #32]	; (22b08 <nrf_cc3xx_platform_init+0x38>)
   22ae6:	2201      	movs	r2, #1
   22ae8:	601a      	str	r2, [r3, #0]
   22aea:	2301      	movs	r3, #1
   22aec:	6023      	str	r3, [r4, #0]
   22aee:	2000      	movs	r0, #0
   22af0:	bd10      	pop	{r4, pc}
   22af2:	3801      	subs	r0, #1
   22af4:	2806      	cmp	r0, #6
   22af6:	d901      	bls.n	22afc <nrf_cc3xx_platform_init+0x2c>
   22af8:	4804      	ldr	r0, [pc, #16]	; (22b0c <nrf_cc3xx_platform_init+0x3c>)
   22afa:	bd10      	pop	{r4, pc}
   22afc:	4b04      	ldr	r3, [pc, #16]	; (22b10 <nrf_cc3xx_platform_init+0x40>)
   22afe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   22b02:	bd10      	pop	{r4, pc}
   22b04:	20002fcc 	.word	0x20002fcc
   22b08:	20002fd0 	.word	0x20002fd0
   22b0c:	ffff8ffe 	.word	0xffff8ffe
   22b10:	0002b9cc 	.word	0x0002b9cc

00022b14 <nrf_cc3xx_platform_abort>:
   22b14:	f3bf 8f4f 	dsb	sy
   22b18:	4905      	ldr	r1, [pc, #20]	; (22b30 <nrf_cc3xx_platform_abort+0x1c>)
   22b1a:	4b06      	ldr	r3, [pc, #24]	; (22b34 <nrf_cc3xx_platform_abort+0x20>)
   22b1c:	68ca      	ldr	r2, [r1, #12]
   22b1e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   22b22:	4313      	orrs	r3, r2
   22b24:	60cb      	str	r3, [r1, #12]
   22b26:	f3bf 8f4f 	dsb	sy
   22b2a:	bf00      	nop
   22b2c:	e7fd      	b.n	22b2a <nrf_cc3xx_platform_abort+0x16>
   22b2e:	bf00      	nop
   22b30:	e000ed00 	.word	0xe000ed00
   22b34:	05fa0004 	.word	0x05fa0004

00022b38 <CC_PalAbort>:
   22b38:	b410      	push	{r4}
   22b3a:	4b09      	ldr	r3, [pc, #36]	; (22b60 <CC_PalAbort+0x28>)
   22b3c:	4909      	ldr	r1, [pc, #36]	; (22b64 <CC_PalAbort+0x2c>)
   22b3e:	4c0a      	ldr	r4, [pc, #40]	; (22b68 <CC_PalAbort+0x30>)
   22b40:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   22b44:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   22b48:	6849      	ldr	r1, [r1, #4]
   22b4a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   22b4e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   22b52:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   22b56:	2300      	movs	r3, #0
   22b58:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   22b5c:	bc10      	pop	{r4}
   22b5e:	4708      	bx	r1
   22b60:	5002b000 	.word	0x5002b000
   22b64:	2000079c 	.word	0x2000079c
   22b68:	5002a000 	.word	0x5002a000

00022b6c <nrf_cc3xx_platform_set_abort>:
   22b6c:	e9d0 1200 	ldrd	r1, r2, [r0]
   22b70:	4b01      	ldr	r3, [pc, #4]	; (22b78 <nrf_cc3xx_platform_set_abort+0xc>)
   22b72:	e9c3 1200 	strd	r1, r2, [r3]
   22b76:	4770      	bx	lr
   22b78:	2000079c 	.word	0x2000079c

00022b7c <nrf_cc3xx_platform_ctr_drbg_init>:
   22b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22b80:	4c14      	ldr	r4, [pc, #80]	; (22bd4 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   22b82:	4e15      	ldr	r6, [pc, #84]	; (22bd8 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   22b84:	2800      	cmp	r0, #0
   22b86:	bf18      	it	ne
   22b88:	4604      	movne	r4, r0
   22b8a:	b083      	sub	sp, #12
   22b8c:	6823      	ldr	r3, [r4, #0]
   22b8e:	42b3      	cmp	r3, r6
   22b90:	d01c      	beq.n	22bcc <nrf_cc3xx_platform_ctr_drbg_init+0x50>
   22b92:	460d      	mov	r5, r1
   22b94:	4620      	mov	r0, r4
   22b96:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   22b9a:	f104 0904 	add.w	r9, r4, #4
   22b9e:	4617      	mov	r7, r2
   22ba0:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   22ba4:	f000 f8d0 	bl	22d48 <mbedtls_platform_zeroize>
   22ba8:	4648      	mov	r0, r9
   22baa:	f000 fd05 	bl	235b8 <cc_mbedtls_entropy_init>
   22bae:	4640      	mov	r0, r8
   22bb0:	f000 fb32 	bl	23218 <cc_mbedtls_ctr_drbg_init>
   22bb4:	4909      	ldr	r1, [pc, #36]	; (22bdc <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   22bb6:	9700      	str	r7, [sp, #0]
   22bb8:	462b      	mov	r3, r5
   22bba:	464a      	mov	r2, r9
   22bbc:	4640      	mov	r0, r8
   22bbe:	f000 fb41 	bl	23244 <cc_mbedtls_ctr_drbg_seed>
   22bc2:	b900      	cbnz	r0, 22bc6 <nrf_cc3xx_platform_ctr_drbg_init+0x4a>
   22bc4:	6026      	str	r6, [r4, #0]
   22bc6:	b003      	add	sp, #12
   22bc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22bcc:	2000      	movs	r0, #0
   22bce:	b003      	add	sp, #12
   22bd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22bd4:	20002fd4 	.word	0x20002fd4
   22bd8:	5ac9bca5 	.word	0x5ac9bca5
   22bdc:	00023639 	.word	0x00023639

00022be0 <nrf_cc3xx_platform_ctr_drbg_get>:
   22be0:	b570      	push	{r4, r5, r6, lr}
   22be2:	4d0d      	ldr	r5, [pc, #52]	; (22c18 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   22be4:	2800      	cmp	r0, #0
   22be6:	bf18      	it	ne
   22be8:	4605      	movne	r5, r0
   22bea:	461e      	mov	r6, r3
   22bec:	6828      	ldr	r0, [r5, #0]
   22bee:	4b0b      	ldr	r3, [pc, #44]	; (22c1c <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   22bf0:	4298      	cmp	r0, r3
   22bf2:	b082      	sub	sp, #8
   22bf4:	d10d      	bne.n	22c12 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   22bf6:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   22bfa:	2500      	movs	r5, #0
   22bfc:	9500      	str	r5, [sp, #0]
   22bfe:	462b      	mov	r3, r5
   22c00:	4614      	mov	r4, r2
   22c02:	f000 fb6d 	bl	232e0 <cc_mbedtls_ctr_drbg_random_with_add>
   22c06:	2800      	cmp	r0, #0
   22c08:	bf18      	it	ne
   22c0a:	462c      	movne	r4, r5
   22c0c:	6034      	str	r4, [r6, #0]
   22c0e:	b002      	add	sp, #8
   22c10:	bd70      	pop	{r4, r5, r6, pc}
   22c12:	4803      	ldr	r0, [pc, #12]	; (22c20 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   22c14:	e7fb      	b.n	22c0e <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   22c16:	bf00      	nop
   22c18:	20002fd4 	.word	0x20002fd4
   22c1c:	5ac9bca5 	.word	0x5ac9bca5
   22c20:	ffff8fe8 	.word	0xffff8fe8

00022c24 <mutex_free>:
   22c24:	b510      	push	{r4, lr}
   22c26:	4604      	mov	r4, r0
   22c28:	b130      	cbz	r0, 22c38 <mutex_free+0x14>
   22c2a:	6863      	ldr	r3, [r4, #4]
   22c2c:	06db      	lsls	r3, r3, #27
   22c2e:	d502      	bpl.n	22c36 <mutex_free+0x12>
   22c30:	2300      	movs	r3, #0
   22c32:	6023      	str	r3, [r4, #0]
   22c34:	6063      	str	r3, [r4, #4]
   22c36:	bd10      	pop	{r4, pc}
   22c38:	4b02      	ldr	r3, [pc, #8]	; (22c44 <mutex_free+0x20>)
   22c3a:	4803      	ldr	r0, [pc, #12]	; (22c48 <mutex_free+0x24>)
   22c3c:	685b      	ldr	r3, [r3, #4]
   22c3e:	4798      	blx	r3
   22c40:	e7f3      	b.n	22c2a <mutex_free+0x6>
   22c42:	bf00      	nop
   22c44:	2000079c 	.word	0x2000079c
   22c48:	0002b9e8 	.word	0x0002b9e8

00022c4c <mutex_lock>:
   22c4c:	b1b0      	cbz	r0, 22c7c <mutex_lock+0x30>
   22c4e:	6843      	ldr	r3, [r0, #4]
   22c50:	b193      	cbz	r3, 22c78 <mutex_lock+0x2c>
   22c52:	06db      	lsls	r3, r3, #27
   22c54:	d50e      	bpl.n	22c74 <mutex_lock+0x28>
   22c56:	2301      	movs	r3, #1
   22c58:	e850 2f00 	ldrex	r2, [r0]
   22c5c:	4619      	mov	r1, r3
   22c5e:	e840 1c00 	strex	ip, r1, [r0]
   22c62:	f09c 0f00 	teq	ip, #0
   22c66:	d1f7      	bne.n	22c58 <mutex_lock+0xc>
   22c68:	2a01      	cmp	r2, #1
   22c6a:	d0f5      	beq.n	22c58 <mutex_lock+0xc>
   22c6c:	f3bf 8f5f 	dmb	sy
   22c70:	2000      	movs	r0, #0
   22c72:	4770      	bx	lr
   22c74:	4803      	ldr	r0, [pc, #12]	; (22c84 <mutex_lock+0x38>)
   22c76:	4770      	bx	lr
   22c78:	4803      	ldr	r0, [pc, #12]	; (22c88 <mutex_lock+0x3c>)
   22c7a:	4770      	bx	lr
   22c7c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   22c80:	4770      	bx	lr
   22c82:	bf00      	nop
   22c84:	ffff8fe9 	.word	0xffff8fe9
   22c88:	ffff8fea 	.word	0xffff8fea

00022c8c <mutex_unlock>:
   22c8c:	b168      	cbz	r0, 22caa <mutex_unlock+0x1e>
   22c8e:	6843      	ldr	r3, [r0, #4]
   22c90:	b13b      	cbz	r3, 22ca2 <mutex_unlock+0x16>
   22c92:	06db      	lsls	r3, r3, #27
   22c94:	d507      	bpl.n	22ca6 <mutex_unlock+0x1a>
   22c96:	f3bf 8f5f 	dmb	sy
   22c9a:	2300      	movs	r3, #0
   22c9c:	6003      	str	r3, [r0, #0]
   22c9e:	4618      	mov	r0, r3
   22ca0:	4770      	bx	lr
   22ca2:	4803      	ldr	r0, [pc, #12]	; (22cb0 <mutex_unlock+0x24>)
   22ca4:	4770      	bx	lr
   22ca6:	4803      	ldr	r0, [pc, #12]	; (22cb4 <mutex_unlock+0x28>)
   22ca8:	4770      	bx	lr
   22caa:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   22cae:	4770      	bx	lr
   22cb0:	ffff8fea 	.word	0xffff8fea
   22cb4:	ffff8fe9 	.word	0xffff8fe9

00022cb8 <mutex_init>:
   22cb8:	b510      	push	{r4, lr}
   22cba:	4604      	mov	r4, r0
   22cbc:	b120      	cbz	r0, 22cc8 <mutex_init+0x10>
   22cbe:	2200      	movs	r2, #0
   22cc0:	2311      	movs	r3, #17
   22cc2:	6022      	str	r2, [r4, #0]
   22cc4:	6063      	str	r3, [r4, #4]
   22cc6:	bd10      	pop	{r4, pc}
   22cc8:	4801      	ldr	r0, [pc, #4]	; (22cd0 <mutex_init+0x18>)
   22cca:	f7ff ff35 	bl	22b38 <CC_PalAbort>
   22cce:	e7f6      	b.n	22cbe <mutex_init+0x6>
   22cd0:	0002ba10 	.word	0x0002ba10

00022cd4 <nrf_cc3xx_platform_set_mutexes>:
   22cd4:	b570      	push	{r4, r5, r6, lr}
   22cd6:	e9d0 2300 	ldrd	r2, r3, [r0]
   22cda:	4c13      	ldr	r4, [pc, #76]	; (22d28 <nrf_cc3xx_platform_set_mutexes+0x54>)
   22cdc:	4d13      	ldr	r5, [pc, #76]	; (22d2c <nrf_cc3xx_platform_set_mutexes+0x58>)
   22cde:	6063      	str	r3, [r4, #4]
   22ce0:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   22ce4:	e9c4 3002 	strd	r3, r0, [r4, #8]
   22ce8:	6022      	str	r2, [r4, #0]
   22cea:	4b11      	ldr	r3, [pc, #68]	; (22d30 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   22cec:	6808      	ldr	r0, [r1, #0]
   22cee:	6018      	str	r0, [r3, #0]
   22cf0:	6848      	ldr	r0, [r1, #4]
   22cf2:	6058      	str	r0, [r3, #4]
   22cf4:	6888      	ldr	r0, [r1, #8]
   22cf6:	6098      	str	r0, [r3, #8]
   22cf8:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   22cfc:	60d8      	str	r0, [r3, #12]
   22cfe:	6119      	str	r1, [r3, #16]
   22d00:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   22d04:	06db      	lsls	r3, r3, #27
   22d06:	d50d      	bpl.n	22d24 <nrf_cc3xx_platform_set_mutexes+0x50>
   22d08:	2300      	movs	r3, #0
   22d0a:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
   22d0e:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
   22d12:	f505 708a 	add.w	r0, r5, #276	; 0x114
   22d16:	4790      	blx	r2
   22d18:	6823      	ldr	r3, [r4, #0]
   22d1a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   22d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   22d22:	4718      	bx	r3
   22d24:	bd70      	pop	{r4, r5, r6, pc}
   22d26:	bf00      	nop
   22d28:	200007ac 	.word	0x200007ac
   22d2c:	20002fd4 	.word	0x20002fd4
   22d30:	200007bc 	.word	0x200007bc

00022d34 <mbedtls_zeroize_internal>:
   22d34:	b138      	cbz	r0, 22d46 <mbedtls_zeroize_internal+0x12>
   22d36:	b131      	cbz	r1, 22d46 <mbedtls_zeroize_internal+0x12>
   22d38:	4401      	add	r1, r0
   22d3a:	2200      	movs	r2, #0
   22d3c:	4603      	mov	r3, r0
   22d3e:	3001      	adds	r0, #1
   22d40:	4281      	cmp	r1, r0
   22d42:	701a      	strb	r2, [r3, #0]
   22d44:	d1fa      	bne.n	22d3c <mbedtls_zeroize_internal+0x8>
   22d46:	4770      	bx	lr

00022d48 <mbedtls_platform_zeroize>:
   22d48:	b138      	cbz	r0, 22d5a <mbedtls_platform_zeroize+0x12>
   22d4a:	b131      	cbz	r1, 22d5a <mbedtls_platform_zeroize+0x12>
   22d4c:	4401      	add	r1, r0
   22d4e:	2200      	movs	r2, #0
   22d50:	4603      	mov	r3, r0
   22d52:	3001      	adds	r0, #1
   22d54:	4288      	cmp	r0, r1
   22d56:	701a      	strb	r2, [r3, #0]
   22d58:	d1fa      	bne.n	22d50 <mbedtls_platform_zeroize+0x8>
   22d5a:	4770      	bx	lr

00022d5c <block_cipher_df>:
   22d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22d60:	b0b7      	sub	sp, #220	; 0xdc
   22d62:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   22d66:	9005      	str	r0, [sp, #20]
   22d68:	f200 8147 	bhi.w	22ffa <block_cipher_df+0x29e>
   22d6c:	4614      	mov	r4, r2
   22d6e:	460d      	mov	r5, r1
   22d70:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   22d74:	2100      	movs	r1, #0
   22d76:	48a2      	ldr	r0, [pc, #648]	; (23000 <block_cipher_df+0x2a4>)
   22d78:	f003 ffd9 	bl	26d2e <memset>
   22d7c:	a819      	add	r0, sp, #100	; 0x64
   22d7e:	f001 f9cb 	bl	24118 <cc_mbedtls_aes_init>
   22d82:	489f      	ldr	r0, [pc, #636]	; (23000 <block_cipher_df+0x2a4>)
   22d84:	2300      	movs	r3, #0
   22d86:	8203      	strh	r3, [r0, #16]
   22d88:	ba63      	rev16	r3, r4
   22d8a:	8243      	strh	r3, [r0, #18]
   22d8c:	2320      	movs	r3, #32
   22d8e:	4629      	mov	r1, r5
   22d90:	75c3      	strb	r3, [r0, #23]
   22d92:	4605      	mov	r5, r0
   22d94:	4622      	mov	r2, r4
   22d96:	3018      	adds	r0, #24
   22d98:	f003 ffbe 	bl	26d18 <memcpy>
   22d9c:	462b      	mov	r3, r5
   22d9e:	4423      	add	r3, r4
   22da0:	2280      	movs	r2, #128	; 0x80
   22da2:	761a      	strb	r2, [r3, #24]
   22da4:	4b97      	ldr	r3, [pc, #604]	; (23004 <block_cipher_df+0x2a8>)
   22da6:	930d      	str	r3, [sp, #52]	; 0x34
   22da8:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   22dac:	930e      	str	r3, [sp, #56]	; 0x38
   22dae:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   22db2:	930f      	str	r3, [sp, #60]	; 0x3c
   22db4:	a90d      	add	r1, sp, #52	; 0x34
   22db6:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   22dba:	a819      	add	r0, sp, #100	; 0x64
   22dbc:	9310      	str	r3, [sp, #64]	; 0x40
   22dbe:	f001 f9c1 	bl	24144 <cc_mbedtls_aes_setkey_enc>
   22dc2:	4605      	mov	r5, r0
   22dc4:	2800      	cmp	r0, #0
   22dc6:	f040 80f4 	bne.w	22fb2 <block_cipher_df+0x256>
   22dca:	f104 0319 	add.w	r3, r4, #25
   22dce:	9306      	str	r3, [sp, #24]
   22dd0:	f10d 0820 	add.w	r8, sp, #32
   22dd4:	ab11      	add	r3, sp, #68	; 0x44
   22dd6:	9304      	str	r3, [sp, #16]
   22dd8:	9307      	str	r3, [sp, #28]
   22dda:	46c1      	mov	r9, r8
   22ddc:	2210      	movs	r2, #16
   22dde:	2100      	movs	r1, #0
   22de0:	4648      	mov	r0, r9
   22de2:	f003 ffa4 	bl	26d2e <memset>
   22de6:	f8df a220 	ldr.w	sl, [pc, #544]	; 23008 <block_cipher_df+0x2ac>
   22dea:	9b06      	ldr	r3, [sp, #24]
   22dec:	9300      	str	r3, [sp, #0]
   22dee:	f8cd 900c 	str.w	r9, [sp, #12]
   22df2:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
   22df6:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
   22dfa:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
   22dfe:	f89d 5020 	ldrb.w	r5, [sp, #32]
   22e02:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   22e06:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
   22e0a:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
   22e0e:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
   22e12:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   22e16:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
   22e1a:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
   22e1e:	406a      	eors	r2, r5
   22e20:	ea8e 0e00 	eor.w	lr, lr, r0
   22e24:	9d00      	ldr	r5, [sp, #0]
   22e26:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   22e2a:	9202      	str	r2, [sp, #8]
   22e2c:	ea8c 0c03 	eor.w	ip, ip, r3
   22e30:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
   22e34:	f81a 2c0f 	ldrb.w	r2, [sl, #-15]
   22e38:	2d10      	cmp	r5, #16
   22e3a:	ea80 0003 	eor.w	r0, r0, r3
   22e3e:	462b      	mov	r3, r5
   22e40:	bf8c      	ite	hi
   22e42:	3b10      	subhi	r3, #16
   22e44:	1b6b      	subls	r3, r5, r5
   22e46:	9300      	str	r3, [sp, #0]
   22e48:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
   22e4c:	f81a 3c03 	ldrb.w	r3, [sl, #-3]
   22e50:	f81a 9c0e 	ldrb.w	r9, [sl, #-14]
   22e54:	f81a 8c0a 	ldrb.w	r8, [sl, #-10]
   22e58:	4061      	eors	r1, r4
   22e5a:	405f      	eors	r7, r3
   22e5c:	2400      	movs	r4, #0
   22e5e:	406a      	eors	r2, r5
   22e60:	ea8b 0b06 	eor.w	fp, fp, r6
   22e64:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   22e68:	f81a 6c02 	ldrb.w	r6, [sl, #-2]
   22e6c:	f81a 3c0b 	ldrb.w	r3, [sl, #-11]
   22e70:	9601      	str	r6, [sp, #4]
   22e72:	4626      	mov	r6, r4
   22e74:	406b      	eors	r3, r5
   22e76:	f36b 0607 	bfi	r6, fp, #0, #8
   22e7a:	4625      	mov	r5, r4
   22e7c:	f367 260f 	bfi	r6, r7, #8, #8
   22e80:	462f      	mov	r7, r5
   22e82:	f361 0707 	bfi	r7, r1, #0, #8
   22e86:	9902      	ldr	r1, [sp, #8]
   22e88:	f361 0507 	bfi	r5, r1, #0, #8
   22e8c:	f362 250f 	bfi	r5, r2, #8, #8
   22e90:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   22e94:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
   22e98:	f363 270f 	bfi	r7, r3, #8, #8
   22e9c:	ea82 0909 	eor.w	r9, r2, r9
   22ea0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   22ea4:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   22ea8:	ea83 0808 	eor.w	r8, r3, r8
   22eac:	404a      	eors	r2, r1
   22eae:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   22eb2:	f81a 1c09 	ldrb.w	r1, [sl, #-9]
   22eb6:	f36e 0407 	bfi	r4, lr, #0, #8
   22eba:	404b      	eors	r3, r1
   22ebc:	f368 4717 	bfi	r7, r8, #16, #8
   22ec0:	f36c 240f 	bfi	r4, ip, #8, #8
   22ec4:	f363 671f 	bfi	r7, r3, #24, #8
   22ec8:	9b03      	ldr	r3, [sp, #12]
   22eca:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
   22ece:	f8dd e004 	ldr.w	lr, [sp, #4]
   22ed2:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
   22ed6:	ea8c 0c0e 	eor.w	ip, ip, lr
   22eda:	f36c 4617 	bfi	r6, ip, #16, #8
   22ede:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
   22ee2:	f81a ec05 	ldrb.w	lr, [sl, #-5]
   22ee6:	ea8c 0c08 	eor.w	ip, ip, r8
   22eea:	f36c 661f 	bfi	r6, ip, #24, #8
   22eee:	f369 4517 	bfi	r5, r9, #16, #8
   22ef2:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
   22ef6:	960b      	str	r6, [sp, #44]	; 0x2c
   22ef8:	f362 651f 	bfi	r5, r2, #24, #8
   22efc:	f360 4417 	bfi	r4, r0, #16, #8
   22f00:	9508      	str	r5, [sp, #32]
   22f02:	ea8c 050e 	eor.w	r5, ip, lr
   22f06:	f365 641f 	bfi	r4, r5, #24, #8
   22f0a:	461a      	mov	r2, r3
   22f0c:	2101      	movs	r1, #1
   22f0e:	a819      	add	r0, sp, #100	; 0x64
   22f10:	f10a 0a10 	add.w	sl, sl, #16
   22f14:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
   22f18:	f001 f92e 	bl	24178 <cc_mbedtls_aes_crypt_ecb>
   22f1c:	2800      	cmp	r0, #0
   22f1e:	d168      	bne.n	22ff2 <block_cipher_df+0x296>
   22f20:	9b00      	ldr	r3, [sp, #0]
   22f22:	2b00      	cmp	r3, #0
   22f24:	f47f af65 	bne.w	22df2 <block_cipher_df+0x96>
   22f28:	9c07      	ldr	r4, [sp, #28]
   22f2a:	f8dd 900c 	ldr.w	r9, [sp, #12]
   22f2e:	4620      	mov	r0, r4
   22f30:	2210      	movs	r2, #16
   22f32:	3410      	adds	r4, #16
   22f34:	4649      	mov	r1, r9
   22f36:	9407      	str	r4, [sp, #28]
   22f38:	f003 feee 	bl	26d18 <memcpy>
   22f3c:	4a30      	ldr	r2, [pc, #192]	; (23000 <block_cipher_df+0x2a4>)
   22f3e:	78d3      	ldrb	r3, [r2, #3]
   22f40:	3301      	adds	r3, #1
   22f42:	70d3      	strb	r3, [r2, #3]
   22f44:	ab19      	add	r3, sp, #100	; 0x64
   22f46:	429c      	cmp	r4, r3
   22f48:	f47f af48 	bne.w	22ddc <block_cipher_df+0x80>
   22f4c:	9904      	ldr	r1, [sp, #16]
   22f4e:	2280      	movs	r2, #128	; 0x80
   22f50:	4618      	mov	r0, r3
   22f52:	f001 f8f7 	bl	24144 <cc_mbedtls_aes_setkey_enc>
   22f56:	46c8      	mov	r8, r9
   22f58:	4605      	mov	r5, r0
   22f5a:	bb70      	cbnz	r0, 22fba <block_cipher_df+0x25e>
   22f5c:	9c05      	ldr	r4, [sp, #20]
   22f5e:	f104 0620 	add.w	r6, r4, #32
   22f62:	ab15      	add	r3, sp, #84	; 0x54
   22f64:	461a      	mov	r2, r3
   22f66:	2101      	movs	r1, #1
   22f68:	a819      	add	r0, sp, #100	; 0x64
   22f6a:	f001 f905 	bl	24178 <cc_mbedtls_aes_crypt_ecb>
   22f6e:	2210      	movs	r2, #16
   22f70:	4605      	mov	r5, r0
   22f72:	bb10      	cbnz	r0, 22fba <block_cipher_df+0x25e>
   22f74:	4620      	mov	r0, r4
   22f76:	a915      	add	r1, sp, #84	; 0x54
   22f78:	3410      	adds	r4, #16
   22f7a:	f003 fecd 	bl	26d18 <memcpy>
   22f7e:	42b4      	cmp	r4, r6
   22f80:	d1ef      	bne.n	22f62 <block_cipher_df+0x206>
   22f82:	a819      	add	r0, sp, #100	; 0x64
   22f84:	f001 f8d8 	bl	24138 <cc_mbedtls_aes_free>
   22f88:	481d      	ldr	r0, [pc, #116]	; (23000 <block_cipher_df+0x2a4>)
   22f8a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   22f8e:	f7ff fedb 	bl	22d48 <mbedtls_platform_zeroize>
   22f92:	9804      	ldr	r0, [sp, #16]
   22f94:	2120      	movs	r1, #32
   22f96:	f7ff fed7 	bl	22d48 <mbedtls_platform_zeroize>
   22f9a:	a80d      	add	r0, sp, #52	; 0x34
   22f9c:	2110      	movs	r1, #16
   22f9e:	f7ff fed3 	bl	22d48 <mbedtls_platform_zeroize>
   22fa2:	4640      	mov	r0, r8
   22fa4:	2110      	movs	r1, #16
   22fa6:	f7ff fecf 	bl	22d48 <mbedtls_platform_zeroize>
   22faa:	4628      	mov	r0, r5
   22fac:	b037      	add	sp, #220	; 0xdc
   22fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22fb2:	ab11      	add	r3, sp, #68	; 0x44
   22fb4:	9304      	str	r3, [sp, #16]
   22fb6:	f10d 0820 	add.w	r8, sp, #32
   22fba:	a819      	add	r0, sp, #100	; 0x64
   22fbc:	f001 f8bc 	bl	24138 <cc_mbedtls_aes_free>
   22fc0:	480f      	ldr	r0, [pc, #60]	; (23000 <block_cipher_df+0x2a4>)
   22fc2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   22fc6:	f7ff febf 	bl	22d48 <mbedtls_platform_zeroize>
   22fca:	9804      	ldr	r0, [sp, #16]
   22fcc:	2120      	movs	r1, #32
   22fce:	f7ff febb 	bl	22d48 <mbedtls_platform_zeroize>
   22fd2:	a80d      	add	r0, sp, #52	; 0x34
   22fd4:	2110      	movs	r1, #16
   22fd6:	f7ff feb7 	bl	22d48 <mbedtls_platform_zeroize>
   22fda:	4640      	mov	r0, r8
   22fdc:	2110      	movs	r1, #16
   22fde:	f7ff feb3 	bl	22d48 <mbedtls_platform_zeroize>
   22fe2:	9805      	ldr	r0, [sp, #20]
   22fe4:	2120      	movs	r1, #32
   22fe6:	f7ff feaf 	bl	22d48 <mbedtls_platform_zeroize>
   22fea:	4628      	mov	r0, r5
   22fec:	b037      	add	sp, #220	; 0xdc
   22fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ff2:	f8dd 800c 	ldr.w	r8, [sp, #12]
   22ff6:	4605      	mov	r5, r0
   22ff8:	e7df      	b.n	22fba <block_cipher_df+0x25e>
   22ffa:	f06f 0537 	mvn.w	r5, #55	; 0x37
   22ffe:	e7f4      	b.n	22fea <block_cipher_df+0x28e>
   23000:	200031a4 	.word	0x200031a4
   23004:	03020100 	.word	0x03020100
   23008:	200031b4 	.word	0x200031b4

0002300c <ctr_drbg_update_internal>:
   2300c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23010:	b088      	sub	sp, #32
   23012:	4604      	mov	r4, r0
   23014:	460d      	mov	r5, r1
   23016:	2220      	movs	r2, #32
   23018:	2100      	movs	r1, #0
   2301a:	4668      	mov	r0, sp
   2301c:	f003 fe87 	bl	26d2e <memset>
   23020:	f104 0620 	add.w	r6, r4, #32
   23024:	466f      	mov	r7, sp
   23026:	7be2      	ldrb	r2, [r4, #15]
   23028:	3201      	adds	r2, #1
   2302a:	b2d2      	uxtb	r2, r2
   2302c:	73e2      	strb	r2, [r4, #15]
   2302e:	2a00      	cmp	r2, #0
   23030:	d14d      	bne.n	230ce <ctr_drbg_update_internal+0xc2>
   23032:	7ba2      	ldrb	r2, [r4, #14]
   23034:	3201      	adds	r2, #1
   23036:	b2d2      	uxtb	r2, r2
   23038:	73a2      	strb	r2, [r4, #14]
   2303a:	2a00      	cmp	r2, #0
   2303c:	d147      	bne.n	230ce <ctr_drbg_update_internal+0xc2>
   2303e:	7b63      	ldrb	r3, [r4, #13]
   23040:	3301      	adds	r3, #1
   23042:	b2db      	uxtb	r3, r3
   23044:	7363      	strb	r3, [r4, #13]
   23046:	2b00      	cmp	r3, #0
   23048:	d141      	bne.n	230ce <ctr_drbg_update_internal+0xc2>
   2304a:	7b23      	ldrb	r3, [r4, #12]
   2304c:	3301      	adds	r3, #1
   2304e:	b2db      	uxtb	r3, r3
   23050:	7323      	strb	r3, [r4, #12]
   23052:	2b00      	cmp	r3, #0
   23054:	d13b      	bne.n	230ce <ctr_drbg_update_internal+0xc2>
   23056:	7ae3      	ldrb	r3, [r4, #11]
   23058:	3301      	adds	r3, #1
   2305a:	b2db      	uxtb	r3, r3
   2305c:	72e3      	strb	r3, [r4, #11]
   2305e:	2b00      	cmp	r3, #0
   23060:	d135      	bne.n	230ce <ctr_drbg_update_internal+0xc2>
   23062:	7aa3      	ldrb	r3, [r4, #10]
   23064:	3301      	adds	r3, #1
   23066:	b2db      	uxtb	r3, r3
   23068:	72a3      	strb	r3, [r4, #10]
   2306a:	2b00      	cmp	r3, #0
   2306c:	d12f      	bne.n	230ce <ctr_drbg_update_internal+0xc2>
   2306e:	7a63      	ldrb	r3, [r4, #9]
   23070:	3301      	adds	r3, #1
   23072:	b2db      	uxtb	r3, r3
   23074:	7263      	strb	r3, [r4, #9]
   23076:	bb53      	cbnz	r3, 230ce <ctr_drbg_update_internal+0xc2>
   23078:	7a23      	ldrb	r3, [r4, #8]
   2307a:	3301      	adds	r3, #1
   2307c:	b2db      	uxtb	r3, r3
   2307e:	7223      	strb	r3, [r4, #8]
   23080:	bb2b      	cbnz	r3, 230ce <ctr_drbg_update_internal+0xc2>
   23082:	79e3      	ldrb	r3, [r4, #7]
   23084:	3301      	adds	r3, #1
   23086:	b2db      	uxtb	r3, r3
   23088:	71e3      	strb	r3, [r4, #7]
   2308a:	bb03      	cbnz	r3, 230ce <ctr_drbg_update_internal+0xc2>
   2308c:	79a3      	ldrb	r3, [r4, #6]
   2308e:	3301      	adds	r3, #1
   23090:	b2db      	uxtb	r3, r3
   23092:	71a3      	strb	r3, [r4, #6]
   23094:	b9db      	cbnz	r3, 230ce <ctr_drbg_update_internal+0xc2>
   23096:	7963      	ldrb	r3, [r4, #5]
   23098:	3301      	adds	r3, #1
   2309a:	b2db      	uxtb	r3, r3
   2309c:	7163      	strb	r3, [r4, #5]
   2309e:	b9b3      	cbnz	r3, 230ce <ctr_drbg_update_internal+0xc2>
   230a0:	7923      	ldrb	r3, [r4, #4]
   230a2:	3301      	adds	r3, #1
   230a4:	b2db      	uxtb	r3, r3
   230a6:	7123      	strb	r3, [r4, #4]
   230a8:	b98b      	cbnz	r3, 230ce <ctr_drbg_update_internal+0xc2>
   230aa:	78e3      	ldrb	r3, [r4, #3]
   230ac:	3301      	adds	r3, #1
   230ae:	b2db      	uxtb	r3, r3
   230b0:	70e3      	strb	r3, [r4, #3]
   230b2:	b963      	cbnz	r3, 230ce <ctr_drbg_update_internal+0xc2>
   230b4:	78a3      	ldrb	r3, [r4, #2]
   230b6:	3301      	adds	r3, #1
   230b8:	b2db      	uxtb	r3, r3
   230ba:	70a3      	strb	r3, [r4, #2]
   230bc:	b93b      	cbnz	r3, 230ce <ctr_drbg_update_internal+0xc2>
   230be:	7863      	ldrb	r3, [r4, #1]
   230c0:	3301      	adds	r3, #1
   230c2:	b2db      	uxtb	r3, r3
   230c4:	7063      	strb	r3, [r4, #1]
   230c6:	b913      	cbnz	r3, 230ce <ctr_drbg_update_internal+0xc2>
   230c8:	7823      	ldrb	r3, [r4, #0]
   230ca:	3301      	adds	r3, #1
   230cc:	7023      	strb	r3, [r4, #0]
   230ce:	463b      	mov	r3, r7
   230d0:	4622      	mov	r2, r4
   230d2:	2101      	movs	r1, #1
   230d4:	4630      	mov	r0, r6
   230d6:	f001 f84f 	bl	24178 <cc_mbedtls_aes_crypt_ecb>
   230da:	4680      	mov	r8, r0
   230dc:	bb50      	cbnz	r0, 23134 <ctr_drbg_update_internal+0x128>
   230de:	3710      	adds	r7, #16
   230e0:	ab08      	add	r3, sp, #32
   230e2:	429f      	cmp	r7, r3
   230e4:	d19f      	bne.n	23026 <ctr_drbg_update_internal+0x1a>
   230e6:	9a00      	ldr	r2, [sp, #0]
   230e8:	682b      	ldr	r3, [r5, #0]
   230ea:	9906      	ldr	r1, [sp, #24]
   230ec:	4053      	eors	r3, r2
   230ee:	9300      	str	r3, [sp, #0]
   230f0:	9a01      	ldr	r2, [sp, #4]
   230f2:	686b      	ldr	r3, [r5, #4]
   230f4:	4053      	eors	r3, r2
   230f6:	9301      	str	r3, [sp, #4]
   230f8:	9a02      	ldr	r2, [sp, #8]
   230fa:	68ab      	ldr	r3, [r5, #8]
   230fc:	4053      	eors	r3, r2
   230fe:	9302      	str	r3, [sp, #8]
   23100:	9a03      	ldr	r2, [sp, #12]
   23102:	68eb      	ldr	r3, [r5, #12]
   23104:	4053      	eors	r3, r2
   23106:	9303      	str	r3, [sp, #12]
   23108:	9a04      	ldr	r2, [sp, #16]
   2310a:	692b      	ldr	r3, [r5, #16]
   2310c:	4053      	eors	r3, r2
   2310e:	9304      	str	r3, [sp, #16]
   23110:	9a05      	ldr	r2, [sp, #20]
   23112:	696b      	ldr	r3, [r5, #20]
   23114:	4053      	eors	r3, r2
   23116:	69aa      	ldr	r2, [r5, #24]
   23118:	9305      	str	r3, [sp, #20]
   2311a:	404a      	eors	r2, r1
   2311c:	69eb      	ldr	r3, [r5, #28]
   2311e:	9206      	str	r2, [sp, #24]
   23120:	9a07      	ldr	r2, [sp, #28]
   23122:	4630      	mov	r0, r6
   23124:	4053      	eors	r3, r2
   23126:	4669      	mov	r1, sp
   23128:	2280      	movs	r2, #128	; 0x80
   2312a:	9307      	str	r3, [sp, #28]
   2312c:	f001 f80a 	bl	24144 <cc_mbedtls_aes_setkey_enc>
   23130:	4680      	mov	r8, r0
   23132:	b138      	cbz	r0, 23144 <ctr_drbg_update_internal+0x138>
   23134:	4668      	mov	r0, sp
   23136:	2120      	movs	r1, #32
   23138:	f7ff fe06 	bl	22d48 <mbedtls_platform_zeroize>
   2313c:	4640      	mov	r0, r8
   2313e:	b008      	add	sp, #32
   23140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23144:	2210      	movs	r2, #16
   23146:	eb0d 0102 	add.w	r1, sp, r2
   2314a:	4620      	mov	r0, r4
   2314c:	f003 fde4 	bl	26d18 <memcpy>
   23150:	e7f0      	b.n	23134 <ctr_drbg_update_internal+0x128>
   23152:	bf00      	nop

00023154 <mbedtls_ctr_drbg_reseed_internal>:
   23154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23158:	4604      	mov	r4, r0
   2315a:	6980      	ldr	r0, [r0, #24]
   2315c:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   23160:	d852      	bhi.n	23208 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   23162:	461d      	mov	r5, r3
   23164:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   23168:	42ab      	cmp	r3, r5
   2316a:	d34d      	bcc.n	23208 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   2316c:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   23170:	1a18      	subs	r0, r3, r0
   23172:	4290      	cmp	r0, r2
   23174:	4616      	mov	r6, r2
   23176:	d347      	bcc.n	23208 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   23178:	f8df 9098 	ldr.w	r9, [pc, #152]	; 23214 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   2317c:	f44f 72c0 	mov.w	r2, #384	; 0x180
   23180:	460f      	mov	r7, r1
   23182:	4648      	mov	r0, r9
   23184:	2100      	movs	r1, #0
   23186:	f003 fdd2 	bl	26d2e <memset>
   2318a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   2318e:	69a2      	ldr	r2, [r4, #24]
   23190:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   23194:	4649      	mov	r1, r9
   23196:	4798      	blx	r3
   23198:	2800      	cmp	r0, #0
   2319a:	d138      	bne.n	2320e <mbedtls_ctr_drbg_reseed_internal+0xba>
   2319c:	f8d4 8018 	ldr.w	r8, [r4, #24]
   231a0:	b13d      	cbz	r5, 231b2 <mbedtls_ctr_drbg_reseed_internal+0x5e>
   231a2:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   231a6:	462a      	mov	r2, r5
   231a8:	eb09 0108 	add.w	r1, r9, r8
   231ac:	4798      	blx	r3
   231ae:	bb70      	cbnz	r0, 2320e <mbedtls_ctr_drbg_reseed_internal+0xba>
   231b0:	44a8      	add	r8, r5
   231b2:	b107      	cbz	r7, 231b6 <mbedtls_ctr_drbg_reseed_internal+0x62>
   231b4:	b9c6      	cbnz	r6, 231e8 <mbedtls_ctr_drbg_reseed_internal+0x94>
   231b6:	4917      	ldr	r1, [pc, #92]	; (23214 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   231b8:	4642      	mov	r2, r8
   231ba:	4608      	mov	r0, r1
   231bc:	f7ff fdce 	bl	22d5c <block_cipher_df>
   231c0:	4605      	mov	r5, r0
   231c2:	b138      	cbz	r0, 231d4 <mbedtls_ctr_drbg_reseed_internal+0x80>
   231c4:	4813      	ldr	r0, [pc, #76]	; (23214 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   231c6:	f44f 71c0 	mov.w	r1, #384	; 0x180
   231ca:	f7ff fdbd 	bl	22d48 <mbedtls_platform_zeroize>
   231ce:	4628      	mov	r0, r5
   231d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   231d4:	490f      	ldr	r1, [pc, #60]	; (23214 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   231d6:	4620      	mov	r0, r4
   231d8:	f7ff ff18 	bl	2300c <ctr_drbg_update_internal>
   231dc:	4605      	mov	r5, r0
   231de:	2800      	cmp	r0, #0
   231e0:	d1f0      	bne.n	231c4 <mbedtls_ctr_drbg_reseed_internal+0x70>
   231e2:	2301      	movs	r3, #1
   231e4:	6123      	str	r3, [r4, #16]
   231e6:	e7ed      	b.n	231c4 <mbedtls_ctr_drbg_reseed_internal+0x70>
   231e8:	eb09 0008 	add.w	r0, r9, r8
   231ec:	4639      	mov	r1, r7
   231ee:	4632      	mov	r2, r6
   231f0:	f003 fd92 	bl	26d18 <memcpy>
   231f4:	4907      	ldr	r1, [pc, #28]	; (23214 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   231f6:	44b0      	add	r8, r6
   231f8:	4642      	mov	r2, r8
   231fa:	4608      	mov	r0, r1
   231fc:	f7ff fdae 	bl	22d5c <block_cipher_df>
   23200:	4605      	mov	r5, r0
   23202:	2800      	cmp	r0, #0
   23204:	d1de      	bne.n	231c4 <mbedtls_ctr_drbg_reseed_internal+0x70>
   23206:	e7e5      	b.n	231d4 <mbedtls_ctr_drbg_reseed_internal+0x80>
   23208:	f06f 0537 	mvn.w	r5, #55	; 0x37
   2320c:	e7df      	b.n	231ce <mbedtls_ctr_drbg_reseed_internal+0x7a>
   2320e:	f06f 0533 	mvn.w	r5, #51	; 0x33
   23212:	e7dc      	b.n	231ce <mbedtls_ctr_drbg_reseed_internal+0x7a>
   23214:	20003344 	.word	0x20003344

00023218 <cc_mbedtls_ctr_drbg_init>:
   23218:	b510      	push	{r4, lr}
   2321a:	22a4      	movs	r2, #164	; 0xa4
   2321c:	4604      	mov	r4, r0
   2321e:	2100      	movs	r1, #0
   23220:	f003 fd85 	bl	26d2e <memset>
   23224:	4b06      	ldr	r3, [pc, #24]	; (23240 <cc_mbedtls_ctr_drbg_init+0x28>)
   23226:	f04f 31ff 	mov.w	r1, #4294967295
   2322a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   2322e:	6121      	str	r1, [r4, #16]
   23230:	61e2      	str	r2, [r4, #28]
   23232:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   23236:	681b      	ldr	r3, [r3, #0]
   23238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2323c:	4718      	bx	r3
   2323e:	bf00      	nop
   23240:	20000800 	.word	0x20000800

00023244 <cc_mbedtls_ctr_drbg_seed>:
   23244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23248:	b085      	sub	sp, #20
   2324a:	4605      	mov	r5, r0
   2324c:	460f      	mov	r7, r1
   2324e:	4616      	mov	r6, r2
   23250:	2100      	movs	r1, #0
   23252:	2210      	movs	r2, #16
   23254:	4668      	mov	r0, sp
   23256:	4699      	mov	r9, r3
   23258:	f003 fd69 	bl	26d2e <memset>
   2325c:	4b1e      	ldr	r3, [pc, #120]	; (232d8 <cc_mbedtls_ctr_drbg_seed+0x94>)
   2325e:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   23262:	681b      	ldr	r3, [r3, #0]
   23264:	4640      	mov	r0, r8
   23266:	4798      	blx	r3
   23268:	b120      	cbz	r0, 23274 <cc_mbedtls_ctr_drbg_seed+0x30>
   2326a:	4604      	mov	r4, r0
   2326c:	4620      	mov	r0, r4
   2326e:	b005      	add	sp, #20
   23270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23274:	f105 0420 	add.w	r4, r5, #32
   23278:	4620      	mov	r0, r4
   2327a:	f000 ff4d 	bl	24118 <cc_mbedtls_aes_init>
   2327e:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   23282:	69ae      	ldr	r6, [r5, #24]
   23284:	692b      	ldr	r3, [r5, #16]
   23286:	b9ee      	cbnz	r6, 232c4 <cc_mbedtls_ctr_drbg_seed+0x80>
   23288:	2220      	movs	r2, #32
   2328a:	2b00      	cmp	r3, #0
   2328c:	61aa      	str	r2, [r5, #24]
   2328e:	db20      	blt.n	232d2 <cc_mbedtls_ctr_drbg_seed+0x8e>
   23290:	461e      	mov	r6, r3
   23292:	4620      	mov	r0, r4
   23294:	4669      	mov	r1, sp
   23296:	2280      	movs	r2, #128	; 0x80
   23298:	f000 ff54 	bl	24144 <cc_mbedtls_aes_setkey_enc>
   2329c:	4604      	mov	r4, r0
   2329e:	b930      	cbnz	r0, 232ae <cc_mbedtls_ctr_drbg_seed+0x6a>
   232a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   232a2:	4633      	mov	r3, r6
   232a4:	4649      	mov	r1, r9
   232a6:	4628      	mov	r0, r5
   232a8:	f7ff ff54 	bl	23154 <mbedtls_ctr_drbg_reseed_internal>
   232ac:	4604      	mov	r4, r0
   232ae:	4b0b      	ldr	r3, [pc, #44]	; (232dc <cc_mbedtls_ctr_drbg_seed+0x98>)
   232b0:	4640      	mov	r0, r8
   232b2:	681b      	ldr	r3, [r3, #0]
   232b4:	4798      	blx	r3
   232b6:	2800      	cmp	r0, #0
   232b8:	bf18      	it	ne
   232ba:	4604      	movne	r4, r0
   232bc:	4620      	mov	r0, r4
   232be:	b005      	add	sp, #20
   232c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   232c4:	2b00      	cmp	r3, #0
   232c6:	dae3      	bge.n	23290 <cc_mbedtls_ctr_drbg_seed+0x4c>
   232c8:	2e17      	cmp	r6, #23
   232ca:	d802      	bhi.n	232d2 <cc_mbedtls_ctr_drbg_seed+0x8e>
   232cc:	3601      	adds	r6, #1
   232ce:	0876      	lsrs	r6, r6, #1
   232d0:	e7df      	b.n	23292 <cc_mbedtls_ctr_drbg_seed+0x4e>
   232d2:	2600      	movs	r6, #0
   232d4:	e7dd      	b.n	23292 <cc_mbedtls_ctr_drbg_seed+0x4e>
   232d6:	bf00      	nop
   232d8:	20000804 	.word	0x20000804
   232dc:	20000808 	.word	0x20000808

000232e0 <cc_mbedtls_ctr_drbg_random_with_add>:
   232e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   232e4:	b08d      	sub	sp, #52	; 0x34
   232e6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   232ea:	9f16      	ldr	r7, [sp, #88]	; 0x58
   232ec:	f200 80e3 	bhi.w	234b6 <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   232f0:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   232f4:	f200 80dc 	bhi.w	234b0 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   232f8:	4604      	mov	r4, r0
   232fa:	4615      	mov	r5, r2
   232fc:	460e      	mov	r6, r1
   232fe:	2220      	movs	r2, #32
   23300:	2100      	movs	r1, #0
   23302:	a804      	add	r0, sp, #16
   23304:	4698      	mov	r8, r3
   23306:	f003 fd12 	bl	26d2e <memset>
   2330a:	4b6c      	ldr	r3, [pc, #432]	; (234bc <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   2330c:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   23310:	681b      	ldr	r3, [r3, #0]
   23312:	4648      	mov	r0, r9
   23314:	4798      	blx	r3
   23316:	4683      	mov	fp, r0
   23318:	2800      	cmp	r0, #0
   2331a:	f040 8092 	bne.w	23442 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   2331e:	6922      	ldr	r2, [r4, #16]
   23320:	69e3      	ldr	r3, [r4, #28]
   23322:	429a      	cmp	r2, r3
   23324:	f300 8091 	bgt.w	2344a <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   23328:	6963      	ldr	r3, [r4, #20]
   2332a:	2b00      	cmp	r3, #0
   2332c:	f040 808d 	bne.w	2344a <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   23330:	2f00      	cmp	r7, #0
   23332:	f040 80a9 	bne.w	23488 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   23336:	f8df a188 	ldr.w	sl, [pc, #392]	; 234c0 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   2333a:	466f      	mov	r7, sp
   2333c:	2d00      	cmp	r5, #0
   2333e:	f000 8098 	beq.w	23472 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   23342:	f104 0820 	add.w	r8, r4, #32
   23346:	466f      	mov	r7, sp
   23348:	e00e      	b.n	23368 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   2334a:	2d10      	cmp	r5, #16
   2334c:	46ab      	mov	fp, r5
   2334e:	bf28      	it	cs
   23350:	f04f 0b10 	movcs.w	fp, #16
   23354:	4630      	mov	r0, r6
   23356:	465a      	mov	r2, fp
   23358:	4639      	mov	r1, r7
   2335a:	f003 fcdd 	bl	26d18 <memcpy>
   2335e:	ebb5 050b 	subs.w	r5, r5, fp
   23362:	445e      	add	r6, fp
   23364:	f000 8085 	beq.w	23472 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   23368:	7be3      	ldrb	r3, [r4, #15]
   2336a:	3301      	adds	r3, #1
   2336c:	b2db      	uxtb	r3, r3
   2336e:	73e3      	strb	r3, [r4, #15]
   23370:	2b00      	cmp	r3, #0
   23372:	d14d      	bne.n	23410 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23374:	7ba3      	ldrb	r3, [r4, #14]
   23376:	3301      	adds	r3, #1
   23378:	b2db      	uxtb	r3, r3
   2337a:	73a3      	strb	r3, [r4, #14]
   2337c:	2b00      	cmp	r3, #0
   2337e:	d147      	bne.n	23410 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23380:	7b63      	ldrb	r3, [r4, #13]
   23382:	3301      	adds	r3, #1
   23384:	b2db      	uxtb	r3, r3
   23386:	7363      	strb	r3, [r4, #13]
   23388:	2b00      	cmp	r3, #0
   2338a:	d141      	bne.n	23410 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2338c:	7b23      	ldrb	r3, [r4, #12]
   2338e:	3301      	adds	r3, #1
   23390:	b2db      	uxtb	r3, r3
   23392:	7323      	strb	r3, [r4, #12]
   23394:	2b00      	cmp	r3, #0
   23396:	d13b      	bne.n	23410 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23398:	7ae3      	ldrb	r3, [r4, #11]
   2339a:	3301      	adds	r3, #1
   2339c:	b2db      	uxtb	r3, r3
   2339e:	72e3      	strb	r3, [r4, #11]
   233a0:	2b00      	cmp	r3, #0
   233a2:	d135      	bne.n	23410 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   233a4:	7aa3      	ldrb	r3, [r4, #10]
   233a6:	3301      	adds	r3, #1
   233a8:	b2db      	uxtb	r3, r3
   233aa:	72a3      	strb	r3, [r4, #10]
   233ac:	2b00      	cmp	r3, #0
   233ae:	d12f      	bne.n	23410 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   233b0:	7a63      	ldrb	r3, [r4, #9]
   233b2:	3301      	adds	r3, #1
   233b4:	b2db      	uxtb	r3, r3
   233b6:	7263      	strb	r3, [r4, #9]
   233b8:	bb53      	cbnz	r3, 23410 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   233ba:	7a23      	ldrb	r3, [r4, #8]
   233bc:	3301      	adds	r3, #1
   233be:	b2db      	uxtb	r3, r3
   233c0:	7223      	strb	r3, [r4, #8]
   233c2:	bb2b      	cbnz	r3, 23410 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   233c4:	79e3      	ldrb	r3, [r4, #7]
   233c6:	3301      	adds	r3, #1
   233c8:	b2db      	uxtb	r3, r3
   233ca:	71e3      	strb	r3, [r4, #7]
   233cc:	bb03      	cbnz	r3, 23410 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   233ce:	79a3      	ldrb	r3, [r4, #6]
   233d0:	3301      	adds	r3, #1
   233d2:	b2db      	uxtb	r3, r3
   233d4:	71a3      	strb	r3, [r4, #6]
   233d6:	b9db      	cbnz	r3, 23410 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   233d8:	7963      	ldrb	r3, [r4, #5]
   233da:	3301      	adds	r3, #1
   233dc:	b2db      	uxtb	r3, r3
   233de:	7163      	strb	r3, [r4, #5]
   233e0:	b9b3      	cbnz	r3, 23410 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   233e2:	7923      	ldrb	r3, [r4, #4]
   233e4:	3301      	adds	r3, #1
   233e6:	b2db      	uxtb	r3, r3
   233e8:	7123      	strb	r3, [r4, #4]
   233ea:	b98b      	cbnz	r3, 23410 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   233ec:	78e3      	ldrb	r3, [r4, #3]
   233ee:	3301      	adds	r3, #1
   233f0:	b2db      	uxtb	r3, r3
   233f2:	70e3      	strb	r3, [r4, #3]
   233f4:	b963      	cbnz	r3, 23410 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   233f6:	78a3      	ldrb	r3, [r4, #2]
   233f8:	3301      	adds	r3, #1
   233fa:	b2db      	uxtb	r3, r3
   233fc:	70a3      	strb	r3, [r4, #2]
   233fe:	b93b      	cbnz	r3, 23410 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23400:	7863      	ldrb	r3, [r4, #1]
   23402:	3301      	adds	r3, #1
   23404:	b2db      	uxtb	r3, r3
   23406:	7063      	strb	r3, [r4, #1]
   23408:	b913      	cbnz	r3, 23410 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2340a:	7823      	ldrb	r3, [r4, #0]
   2340c:	3301      	adds	r3, #1
   2340e:	7023      	strb	r3, [r4, #0]
   23410:	463b      	mov	r3, r7
   23412:	4622      	mov	r2, r4
   23414:	2101      	movs	r1, #1
   23416:	4640      	mov	r0, r8
   23418:	f000 feae 	bl	24178 <cc_mbedtls_aes_crypt_ecb>
   2341c:	4683      	mov	fp, r0
   2341e:	2800      	cmp	r0, #0
   23420:	d093      	beq.n	2334a <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   23422:	f8da 3000 	ldr.w	r3, [sl]
   23426:	4648      	mov	r0, r9
   23428:	4798      	blx	r3
   2342a:	2120      	movs	r1, #32
   2342c:	4603      	mov	r3, r0
   2342e:	a804      	add	r0, sp, #16
   23430:	2b00      	cmp	r3, #0
   23432:	bf18      	it	ne
   23434:	469b      	movne	fp, r3
   23436:	f7ff fc87 	bl	22d48 <mbedtls_platform_zeroize>
   2343a:	2110      	movs	r1, #16
   2343c:	4638      	mov	r0, r7
   2343e:	f7ff fc83 	bl	22d48 <mbedtls_platform_zeroize>
   23442:	4658      	mov	r0, fp
   23444:	b00d      	add	sp, #52	; 0x34
   23446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2344a:	463a      	mov	r2, r7
   2344c:	4641      	mov	r1, r8
   2344e:	2300      	movs	r3, #0
   23450:	4620      	mov	r0, r4
   23452:	f7ff fe7f 	bl	23154 <mbedtls_ctr_drbg_reseed_internal>
   23456:	f8df a068 	ldr.w	sl, [pc, #104]	; 234c0 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   2345a:	2800      	cmp	r0, #0
   2345c:	f43f af6d 	beq.w	2333a <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   23460:	f8da 3000 	ldr.w	r3, [sl]
   23464:	4648      	mov	r0, r9
   23466:	4798      	blx	r3
   23468:	4683      	mov	fp, r0
   2346a:	2800      	cmp	r0, #0
   2346c:	f43f af65 	beq.w	2333a <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   23470:	e7e7      	b.n	23442 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   23472:	a904      	add	r1, sp, #16
   23474:	4620      	mov	r0, r4
   23476:	f7ff fdc9 	bl	2300c <ctr_drbg_update_internal>
   2347a:	4683      	mov	fp, r0
   2347c:	2800      	cmp	r0, #0
   2347e:	d1d0      	bne.n	23422 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   23480:	6923      	ldr	r3, [r4, #16]
   23482:	3301      	adds	r3, #1
   23484:	6123      	str	r3, [r4, #16]
   23486:	e7cc      	b.n	23422 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   23488:	463a      	mov	r2, r7
   2348a:	4641      	mov	r1, r8
   2348c:	a804      	add	r0, sp, #16
   2348e:	f7ff fc65 	bl	22d5c <block_cipher_df>
   23492:	4683      	mov	fp, r0
   23494:	b118      	cbz	r0, 2349e <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   23496:	f8df a028 	ldr.w	sl, [pc, #40]	; 234c0 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   2349a:	466f      	mov	r7, sp
   2349c:	e7c1      	b.n	23422 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   2349e:	a904      	add	r1, sp, #16
   234a0:	4620      	mov	r0, r4
   234a2:	f7ff fdb3 	bl	2300c <ctr_drbg_update_internal>
   234a6:	4683      	mov	fp, r0
   234a8:	2800      	cmp	r0, #0
   234aa:	f43f af44 	beq.w	23336 <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   234ae:	e7f2      	b.n	23496 <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   234b0:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   234b4:	e7c5      	b.n	23442 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   234b6:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   234ba:	e7c2      	b.n	23442 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   234bc:	20000804 	.word	0x20000804
   234c0:	20000808 	.word	0x20000808

000234c4 <entropy_update>:
   234c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   234c8:	2b20      	cmp	r3, #32
   234ca:	b08b      	sub	sp, #44	; 0x2c
   234cc:	461d      	mov	r5, r3
   234ce:	4606      	mov	r6, r0
   234d0:	4688      	mov	r8, r1
   234d2:	4691      	mov	r9, r2
   234d4:	d826      	bhi.n	23524 <entropy_update+0x60>
   234d6:	b2db      	uxtb	r3, r3
   234d8:	af02      	add	r7, sp, #8
   234da:	f88d 8004 	strb.w	r8, [sp, #4]
   234de:	46b0      	mov	r8, r6
   234e0:	f88d 3005 	strb.w	r3, [sp, #5]
   234e4:	f858 1b04 	ldr.w	r1, [r8], #4
   234e8:	b921      	cbnz	r1, 234f4 <entropy_update+0x30>
   234ea:	4640      	mov	r0, r8
   234ec:	f000 fe88 	bl	24200 <cc_mbedtls_sha256_starts>
   234f0:	4604      	mov	r4, r0
   234f2:	b940      	cbnz	r0, 23506 <entropy_update+0x42>
   234f4:	2301      	movs	r3, #1
   234f6:	6033      	str	r3, [r6, #0]
   234f8:	2202      	movs	r2, #2
   234fa:	a901      	add	r1, sp, #4
   234fc:	4640      	mov	r0, r8
   234fe:	f000 fe93 	bl	24228 <cc_mbedtls_sha256_update>
   23502:	4604      	mov	r4, r0
   23504:	b138      	cbz	r0, 23516 <entropy_update+0x52>
   23506:	4638      	mov	r0, r7
   23508:	2120      	movs	r1, #32
   2350a:	f7ff fc1d 	bl	22d48 <mbedtls_platform_zeroize>
   2350e:	4620      	mov	r0, r4
   23510:	b00b      	add	sp, #44	; 0x2c
   23512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23516:	462a      	mov	r2, r5
   23518:	4649      	mov	r1, r9
   2351a:	4640      	mov	r0, r8
   2351c:	f000 fe84 	bl	24228 <cc_mbedtls_sha256_update>
   23520:	4604      	mov	r4, r0
   23522:	e7f0      	b.n	23506 <entropy_update+0x42>
   23524:	af02      	add	r7, sp, #8
   23526:	4619      	mov	r1, r3
   23528:	4610      	mov	r0, r2
   2352a:	2300      	movs	r3, #0
   2352c:	463a      	mov	r2, r7
   2352e:	f001 f803 	bl	24538 <cc_mbedtls_sha256>
   23532:	4604      	mov	r4, r0
   23534:	2800      	cmp	r0, #0
   23536:	d1e6      	bne.n	23506 <entropy_update+0x42>
   23538:	2320      	movs	r3, #32
   2353a:	46b9      	mov	r9, r7
   2353c:	461d      	mov	r5, r3
   2353e:	e7cc      	b.n	234da <entropy_update+0x16>

00023540 <entropy_gather_internal.part.0>:
   23540:	b5f0      	push	{r4, r5, r6, r7, lr}
   23542:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   23546:	b0a7      	sub	sp, #156	; 0x9c
   23548:	2b00      	cmp	r3, #0
   2354a:	bfd8      	it	le
   2354c:	ae02      	addle	r6, sp, #8
   2354e:	dd2c      	ble.n	235aa <entropy_gather_internal.part.0+0x6a>
   23550:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   23554:	4605      	mov	r5, r0
   23556:	2300      	movs	r3, #0
   23558:	ae02      	add	r6, sp, #8
   2355a:	9301      	str	r3, [sp, #4]
   2355c:	f1a4 0701 	sub.w	r7, r4, #1
   23560:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   23564:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   23568:	ab01      	add	r3, sp, #4
   2356a:	2290      	movs	r2, #144	; 0x90
   2356c:	4631      	mov	r1, r6
   2356e:	47a0      	blx	r4
   23570:	fab7 f787 	clz	r7, r7
   23574:	097f      	lsrs	r7, r7, #5
   23576:	4604      	mov	r4, r0
   23578:	b910      	cbnz	r0, 23580 <entropy_gather_internal.part.0+0x40>
   2357a:	9b01      	ldr	r3, [sp, #4]
   2357c:	b93b      	cbnz	r3, 2358e <entropy_gather_internal.part.0+0x4e>
   2357e:	b1a7      	cbz	r7, 235aa <entropy_gather_internal.part.0+0x6a>
   23580:	4630      	mov	r0, r6
   23582:	2190      	movs	r1, #144	; 0x90
   23584:	f7ff fbe0 	bl	22d48 <mbedtls_platform_zeroize>
   23588:	4620      	mov	r0, r4
   2358a:	b027      	add	sp, #156	; 0x9c
   2358c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2358e:	4601      	mov	r1, r0
   23590:	4632      	mov	r2, r6
   23592:	4628      	mov	r0, r5
   23594:	f7ff ff96 	bl	234c4 <entropy_update>
   23598:	b950      	cbnz	r0, 235b0 <entropy_gather_internal.part.0+0x70>
   2359a:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   2359e:	9a01      	ldr	r2, [sp, #4]
   235a0:	4413      	add	r3, r2
   235a2:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   235a6:	2f00      	cmp	r7, #0
   235a8:	d1ea      	bne.n	23580 <entropy_gather_internal.part.0+0x40>
   235aa:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   235ae:	e7e7      	b.n	23580 <entropy_gather_internal.part.0+0x40>
   235b0:	4604      	mov	r4, r0
   235b2:	4620      	mov	r0, r4
   235b4:	b027      	add	sp, #156	; 0x9c
   235b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000235b8 <cc_mbedtls_entropy_init>:
   235b8:	b570      	push	{r4, r5, r6, lr}
   235ba:	2500      	movs	r5, #0
   235bc:	4604      	mov	r4, r0
   235be:	2214      	movs	r2, #20
   235c0:	4629      	mov	r1, r5
   235c2:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   235c6:	30fc      	adds	r0, #252	; 0xfc
   235c8:	f003 fbb1 	bl	26d2e <memset>
   235cc:	4b16      	ldr	r3, [pc, #88]	; (23628 <cc_mbedtls_entropy_init+0x70>)
   235ce:	f504 7688 	add.w	r6, r4, #272	; 0x110
   235d2:	681b      	ldr	r3, [r3, #0]
   235d4:	4630      	mov	r0, r6
   235d6:	4798      	blx	r3
   235d8:	4620      	mov	r0, r4
   235da:	f840 5b04 	str.w	r5, [r0], #4
   235de:	f000 fdf5 	bl	241cc <cc_mbedtls_sha256_init>
   235e2:	4b12      	ldr	r3, [pc, #72]	; (2362c <cc_mbedtls_entropy_init+0x74>)
   235e4:	4630      	mov	r0, r6
   235e6:	681b      	ldr	r3, [r3, #0]
   235e8:	4798      	blx	r3
   235ea:	b9d8      	cbnz	r0, 23624 <cc_mbedtls_entropy_init+0x6c>
   235ec:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   235f0:	42ab      	cmp	r3, r5
   235f2:	dc11      	bgt.n	23618 <cc_mbedtls_entropy_init+0x60>
   235f4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   235f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   235fc:	2120      	movs	r1, #32
   235fe:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   23602:	2101      	movs	r1, #1
   23604:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   23608:	3301      	adds	r3, #1
   2360a:	4909      	ldr	r1, [pc, #36]	; (23630 <cc_mbedtls_entropy_init+0x78>)
   2360c:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   23610:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   23614:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   23618:	4b06      	ldr	r3, [pc, #24]	; (23634 <cc_mbedtls_entropy_init+0x7c>)
   2361a:	4630      	mov	r0, r6
   2361c:	681b      	ldr	r3, [r3, #0]
   2361e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23622:	4718      	bx	r3
   23624:	bd70      	pop	{r4, r5, r6, pc}
   23626:	bf00      	nop
   23628:	20000800 	.word	0x20000800
   2362c:	20000804 	.word	0x20000804
   23630:	0002401d 	.word	0x0002401d
   23634:	20000808 	.word	0x20000808

00023638 <cc_mbedtls_entropy_func>:
   23638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2363c:	2a20      	cmp	r2, #32
   2363e:	b088      	sub	sp, #32
   23640:	d876      	bhi.n	23730 <cc_mbedtls_entropy_func+0xf8>
   23642:	4b3d      	ldr	r3, [pc, #244]	; (23738 <cc_mbedtls_entropy_func+0x100>)
   23644:	f500 7988 	add.w	r9, r0, #272	; 0x110
   23648:	681b      	ldr	r3, [r3, #0]
   2364a:	4604      	mov	r4, r0
   2364c:	4648      	mov	r0, r9
   2364e:	4617      	mov	r7, r2
   23650:	4688      	mov	r8, r1
   23652:	4798      	blx	r3
   23654:	4605      	mov	r5, r0
   23656:	bba0      	cbnz	r0, 236c2 <cc_mbedtls_entropy_func+0x8a>
   23658:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   2365c:	f240 1601 	movw	r6, #257	; 0x101
   23660:	e001      	b.n	23666 <cc_mbedtls_entropy_func+0x2e>
   23662:	3e01      	subs	r6, #1
   23664:	d060      	beq.n	23728 <cc_mbedtls_entropy_func+0xf0>
   23666:	4620      	mov	r0, r4
   23668:	b37b      	cbz	r3, 236ca <cc_mbedtls_entropy_func+0x92>
   2366a:	f7ff ff69 	bl	23540 <entropy_gather_internal.part.0>
   2366e:	4605      	mov	r5, r0
   23670:	bb68      	cbnz	r0, 236ce <cc_mbedtls_entropy_func+0x96>
   23672:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   23676:	2b00      	cmp	r3, #0
   23678:	ddf3      	ble.n	23662 <cc_mbedtls_entropy_func+0x2a>
   2367a:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   2367e:	4290      	cmp	r0, r2
   23680:	d3ef      	bcc.n	23662 <cc_mbedtls_entropy_func+0x2a>
   23682:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23686:	2a01      	cmp	r2, #1
   23688:	d1eb      	bne.n	23662 <cc_mbedtls_entropy_func+0x2a>
   2368a:	281f      	cmp	r0, #31
   2368c:	d9e9      	bls.n	23662 <cc_mbedtls_entropy_func+0x2a>
   2368e:	466e      	mov	r6, sp
   23690:	4629      	mov	r1, r5
   23692:	2220      	movs	r2, #32
   23694:	4630      	mov	r0, r6
   23696:	f104 0a04 	add.w	sl, r4, #4
   2369a:	f003 fb48 	bl	26d2e <memset>
   2369e:	4631      	mov	r1, r6
   236a0:	4650      	mov	r0, sl
   236a2:	f000 fdeb 	bl	2427c <cc_mbedtls_sha256_finish>
   236a6:	4605      	mov	r5, r0
   236a8:	b198      	cbz	r0, 236d2 <cc_mbedtls_entropy_func+0x9a>
   236aa:	2120      	movs	r1, #32
   236ac:	4630      	mov	r0, r6
   236ae:	f7ff fb4b 	bl	22d48 <mbedtls_platform_zeroize>
   236b2:	4b22      	ldr	r3, [pc, #136]	; (2373c <cc_mbedtls_entropy_func+0x104>)
   236b4:	4648      	mov	r0, r9
   236b6:	681b      	ldr	r3, [r3, #0]
   236b8:	4798      	blx	r3
   236ba:	2800      	cmp	r0, #0
   236bc:	bf18      	it	ne
   236be:	f06f 051d 	mvnne.w	r5, #29
   236c2:	4628      	mov	r0, r5
   236c4:	b008      	add	sp, #32
   236c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   236ca:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   236ce:	466e      	mov	r6, sp
   236d0:	e7eb      	b.n	236aa <cc_mbedtls_entropy_func+0x72>
   236d2:	4650      	mov	r0, sl
   236d4:	f000 fd8e 	bl	241f4 <cc_mbedtls_sha256_free>
   236d8:	4650      	mov	r0, sl
   236da:	f000 fd77 	bl	241cc <cc_mbedtls_sha256_init>
   236de:	4629      	mov	r1, r5
   236e0:	4650      	mov	r0, sl
   236e2:	f000 fd8d 	bl	24200 <cc_mbedtls_sha256_starts>
   236e6:	4605      	mov	r5, r0
   236e8:	2800      	cmp	r0, #0
   236ea:	d1de      	bne.n	236aa <cc_mbedtls_entropy_func+0x72>
   236ec:	4650      	mov	r0, sl
   236ee:	2220      	movs	r2, #32
   236f0:	4631      	mov	r1, r6
   236f2:	f000 fd99 	bl	24228 <cc_mbedtls_sha256_update>
   236f6:	4605      	mov	r5, r0
   236f8:	2800      	cmp	r0, #0
   236fa:	d1d6      	bne.n	236aa <cc_mbedtls_entropy_func+0x72>
   236fc:	4603      	mov	r3, r0
   236fe:	4632      	mov	r2, r6
   23700:	2120      	movs	r1, #32
   23702:	4630      	mov	r0, r6
   23704:	f000 ff18 	bl	24538 <cc_mbedtls_sha256>
   23708:	4605      	mov	r5, r0
   2370a:	2800      	cmp	r0, #0
   2370c:	d1cd      	bne.n	236aa <cc_mbedtls_entropy_func+0x72>
   2370e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   23712:	2b00      	cmp	r3, #0
   23714:	bfc4      	itt	gt
   23716:	2300      	movgt	r3, #0
   23718:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   2371c:	463a      	mov	r2, r7
   2371e:	4640      	mov	r0, r8
   23720:	4631      	mov	r1, r6
   23722:	f003 faf9 	bl	26d18 <memcpy>
   23726:	e7c0      	b.n	236aa <cc_mbedtls_entropy_func+0x72>
   23728:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   2372c:	466e      	mov	r6, sp
   2372e:	e7bc      	b.n	236aa <cc_mbedtls_entropy_func+0x72>
   23730:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   23734:	e7c5      	b.n	236c2 <cc_mbedtls_entropy_func+0x8a>
   23736:	bf00      	nop
   23738:	20000804 	.word	0x20000804
   2373c:	20000808 	.word	0x20000808

00023740 <RndStartupTest.constprop.0>:
   23740:	b530      	push	{r4, r5, lr}
   23742:	b08d      	sub	sp, #52	; 0x34
   23744:	2100      	movs	r1, #0
   23746:	2228      	movs	r2, #40	; 0x28
   23748:	a802      	add	r0, sp, #8
   2374a:	9101      	str	r1, [sp, #4]
   2374c:	f003 faef 	bl	26d2e <memset>
   23750:	a802      	add	r0, sp, #8
   23752:	f000 ff19 	bl	24588 <RNG_PLAT_SetUserRngParameters>
   23756:	4604      	mov	r4, r0
   23758:	b110      	cbz	r0, 23760 <RndStartupTest.constprop.0+0x20>
   2375a:	4620      	mov	r0, r4
   2375c:	b00d      	add	sp, #52	; 0x34
   2375e:	bd30      	pop	{r4, r5, pc}
   23760:	4d18      	ldr	r5, [pc, #96]	; (237c4 <RndStartupTest.constprop.0+0x84>)
   23762:	f04f 31ff 	mov.w	r1, #4294967295
   23766:	6828      	ldr	r0, [r5, #0]
   23768:	f000 f946 	bl	239f8 <CC_PalMutexLock>
   2376c:	4604      	mov	r4, r0
   2376e:	b9c0      	cbnz	r0, 237a2 <RndStartupTest.constprop.0+0x62>
   23770:	2000      	movs	r0, #0
   23772:	f000 f971 	bl	23a58 <CC_PalPowerSaveModeSelect>
   23776:	bb00      	cbnz	r0, 237ba <RndStartupTest.constprop.0+0x7a>
   23778:	4a13      	ldr	r2, [pc, #76]	; (237c8 <RndStartupTest.constprop.0+0x88>)
   2377a:	a902      	add	r1, sp, #8
   2377c:	a801      	add	r0, sp, #4
   2377e:	f000 fc3f 	bl	24000 <LLF_RND_RunTrngStartupTest>
   23782:	4604      	mov	r4, r0
   23784:	2001      	movs	r0, #1
   23786:	f000 f967 	bl	23a58 <CC_PalPowerSaveModeSelect>
   2378a:	b990      	cbnz	r0, 237b2 <RndStartupTest.constprop.0+0x72>
   2378c:	6828      	ldr	r0, [r5, #0]
   2378e:	f000 f93b 	bl	23a08 <CC_PalMutexUnlock>
   23792:	2800      	cmp	r0, #0
   23794:	d0e1      	beq.n	2375a <RndStartupTest.constprop.0+0x1a>
   23796:	480d      	ldr	r0, [pc, #52]	; (237cc <RndStartupTest.constprop.0+0x8c>)
   23798:	f7ff f9ce 	bl	22b38 <CC_PalAbort>
   2379c:	4620      	mov	r0, r4
   2379e:	b00d      	add	sp, #52	; 0x34
   237a0:	bd30      	pop	{r4, r5, pc}
   237a2:	480b      	ldr	r0, [pc, #44]	; (237d0 <RndStartupTest.constprop.0+0x90>)
   237a4:	f7ff f9c8 	bl	22b38 <CC_PalAbort>
   237a8:	2c01      	cmp	r4, #1
   237aa:	bf08      	it	eq
   237ac:	2405      	moveq	r4, #5
   237ae:	d0ed      	beq.n	2378c <RndStartupTest.constprop.0+0x4c>
   237b0:	e7de      	b.n	23770 <RndStartupTest.constprop.0+0x30>
   237b2:	4808      	ldr	r0, [pc, #32]	; (237d4 <RndStartupTest.constprop.0+0x94>)
   237b4:	f7ff f9c0 	bl	22b38 <CC_PalAbort>
   237b8:	e7e8      	b.n	2378c <RndStartupTest.constprop.0+0x4c>
   237ba:	4807      	ldr	r0, [pc, #28]	; (237d8 <RndStartupTest.constprop.0+0x98>)
   237bc:	f7ff f9bc 	bl	22b38 <CC_PalAbort>
   237c0:	e7da      	b.n	23778 <RndStartupTest.constprop.0+0x38>
   237c2:	bf00      	nop
   237c4:	200007fc 	.word	0x200007fc
   237c8:	20003530 	.word	0x20003530
   237cc:	0002ba8c 	.word	0x0002ba8c
   237d0:	0002ba34 	.word	0x0002ba34
   237d4:	0002ba6c 	.word	0x0002ba6c
   237d8:	0002ba4c 	.word	0x0002ba4c

000237dc <CC_LibInit>:
   237dc:	b530      	push	{r4, r5, lr}
   237de:	b083      	sub	sp, #12
   237e0:	f000 f85c 	bl	2389c <CC_HalInit>
   237e4:	b128      	cbz	r0, 237f2 <CC_LibInit+0x16>
   237e6:	f000 f8ab 	bl	23940 <CC_PalTerminate>
   237ea:	2403      	movs	r4, #3
   237ec:	4620      	mov	r0, r4
   237ee:	b003      	add	sp, #12
   237f0:	bd30      	pop	{r4, r5, pc}
   237f2:	f000 f877 	bl	238e4 <CC_PalInit>
   237f6:	b9d8      	cbnz	r0, 23830 <CC_LibInit+0x54>
   237f8:	f000 f92e 	bl	23a58 <CC_PalPowerSaveModeSelect>
   237fc:	b9e0      	cbnz	r0, 23838 <CC_LibInit+0x5c>
   237fe:	4c22      	ldr	r4, [pc, #136]	; (23888 <CC_LibInit+0xac>)
   23800:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   23804:	0e1b      	lsrs	r3, r3, #24
   23806:	2bf0      	cmp	r3, #240	; 0xf0
   23808:	d10a      	bne.n	23820 <CC_LibInit+0x44>
   2380a:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   2380e:	4b1f      	ldr	r3, [pc, #124]	; (2388c <CC_LibInit+0xb0>)
   23810:	429a      	cmp	r2, r3
   23812:	d031      	beq.n	23878 <CC_LibInit+0x9c>
   23814:	f000 f844 	bl	238a0 <CC_HalTerminate>
   23818:	2407      	movs	r4, #7
   2381a:	f000 f891 	bl	23940 <CC_PalTerminate>
   2381e:	e7e5      	b.n	237ec <CC_LibInit+0x10>
   23820:	f000 f83e 	bl	238a0 <CC_HalTerminate>
   23824:	f000 f88c 	bl	23940 <CC_PalTerminate>
   23828:	2406      	movs	r4, #6
   2382a:	4620      	mov	r0, r4
   2382c:	b003      	add	sp, #12
   2382e:	bd30      	pop	{r4, r5, pc}
   23830:	2404      	movs	r4, #4
   23832:	4620      	mov	r0, r4
   23834:	b003      	add	sp, #12
   23836:	bd30      	pop	{r4, r5, pc}
   23838:	f000 f832 	bl	238a0 <CC_HalTerminate>
   2383c:	f000 f880 	bl	23940 <CC_PalTerminate>
   23840:	f7ff ff7e 	bl	23740 <RndStartupTest.constprop.0>
   23844:	4604      	mov	r4, r0
   23846:	b998      	cbnz	r0, 23870 <CC_LibInit+0x94>
   23848:	4d11      	ldr	r5, [pc, #68]	; (23890 <CC_LibInit+0xb4>)
   2384a:	682b      	ldr	r3, [r5, #0]
   2384c:	2b00      	cmp	r3, #0
   2384e:	d1cd      	bne.n	237ec <CC_LibInit+0x10>
   23850:	4602      	mov	r2, r0
   23852:	4601      	mov	r1, r0
   23854:	f7ff f992 	bl	22b7c <nrf_cc3xx_platform_ctr_drbg_init>
   23858:	b950      	cbnz	r0, 23870 <CC_LibInit+0x94>
   2385a:	490e      	ldr	r1, [pc, #56]	; (23894 <CC_LibInit+0xb8>)
   2385c:	ab01      	add	r3, sp, #4
   2385e:	2268      	movs	r2, #104	; 0x68
   23860:	f7ff f9be 	bl	22be0 <nrf_cc3xx_platform_ctr_drbg_get>
   23864:	b920      	cbnz	r0, 23870 <CC_LibInit+0x94>
   23866:	4b0c      	ldr	r3, [pc, #48]	; (23898 <CC_LibInit+0xbc>)
   23868:	602b      	str	r3, [r5, #0]
   2386a:	4620      	mov	r0, r4
   2386c:	b003      	add	sp, #12
   2386e:	bd30      	pop	{r4, r5, pc}
   23870:	2405      	movs	r4, #5
   23872:	4620      	mov	r0, r4
   23874:	b003      	add	sp, #12
   23876:	bd30      	pop	{r4, r5, pc}
   23878:	2001      	movs	r0, #1
   2387a:	f000 f8ed 	bl	23a58 <CC_PalPowerSaveModeSelect>
   2387e:	2800      	cmp	r0, #0
   23880:	d1da      	bne.n	23838 <CC_LibInit+0x5c>
   23882:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   23886:	e7db      	b.n	23840 <CC_LibInit+0x64>
   23888:	5002b000 	.word	0x5002b000
   2388c:	20e00000 	.word	0x20e00000
   23890:	2000352c 	.word	0x2000352c
   23894:	200034c4 	.word	0x200034c4
   23898:	5a5aea5a 	.word	0x5a5aea5a

0002389c <CC_HalInit>:
   2389c:	2000      	movs	r0, #0
   2389e:	4770      	bx	lr

000238a0 <CC_HalTerminate>:
   238a0:	2000      	movs	r0, #0
   238a2:	4770      	bx	lr

000238a4 <CC_HalClearInterruptBit>:
   238a4:	0543      	lsls	r3, r0, #21
   238a6:	d504      	bpl.n	238b2 <CC_HalClearInterruptBit+0xe>
   238a8:	4b04      	ldr	r3, [pc, #16]	; (238bc <CC_HalClearInterruptBit+0x18>)
   238aa:	f04f 32ff 	mov.w	r2, #4294967295
   238ae:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   238b2:	4b02      	ldr	r3, [pc, #8]	; (238bc <CC_HalClearInterruptBit+0x18>)
   238b4:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   238b8:	4770      	bx	lr
   238ba:	bf00      	nop
   238bc:	5002b000 	.word	0x5002b000

000238c0 <CC_HalMaskInterrupt>:
   238c0:	4b01      	ldr	r3, [pc, #4]	; (238c8 <CC_HalMaskInterrupt+0x8>)
   238c2:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   238c6:	4770      	bx	lr
   238c8:	5002b000 	.word	0x5002b000

000238cc <CC_HalWaitInterrupt>:
   238cc:	b108      	cbz	r0, 238d2 <CC_HalWaitInterrupt+0x6>
   238ce:	f000 b86b 	b.w	239a8 <CC_PalWaitInterrupt>
   238d2:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   238d6:	4770      	bx	lr

000238d8 <CC_HalWaitInterruptRND>:
   238d8:	b108      	cbz	r0, 238de <CC_HalWaitInterruptRND+0x6>
   238da:	f000 b84f 	b.w	2397c <CC_PalWaitInterruptRND>
   238de:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   238e2:	4770      	bx	lr

000238e4 <CC_PalInit>:
   238e4:	b510      	push	{r4, lr}
   238e6:	4811      	ldr	r0, [pc, #68]	; (2392c <CC_PalInit+0x48>)
   238e8:	f000 f872 	bl	239d0 <CC_PalMutexCreate>
   238ec:	b100      	cbz	r0, 238f0 <CC_PalInit+0xc>
   238ee:	bd10      	pop	{r4, pc}
   238f0:	480f      	ldr	r0, [pc, #60]	; (23930 <CC_PalInit+0x4c>)
   238f2:	f000 f86d 	bl	239d0 <CC_PalMutexCreate>
   238f6:	2800      	cmp	r0, #0
   238f8:	d1f9      	bne.n	238ee <CC_PalInit+0xa>
   238fa:	4c0e      	ldr	r4, [pc, #56]	; (23934 <CC_PalInit+0x50>)
   238fc:	4620      	mov	r0, r4
   238fe:	f000 f867 	bl	239d0 <CC_PalMutexCreate>
   23902:	2800      	cmp	r0, #0
   23904:	d1f3      	bne.n	238ee <CC_PalInit+0xa>
   23906:	4b0c      	ldr	r3, [pc, #48]	; (23938 <CC_PalInit+0x54>)
   23908:	480c      	ldr	r0, [pc, #48]	; (2393c <CC_PalInit+0x58>)
   2390a:	601c      	str	r4, [r3, #0]
   2390c:	f000 f860 	bl	239d0 <CC_PalMutexCreate>
   23910:	4601      	mov	r1, r0
   23912:	2800      	cmp	r0, #0
   23914:	d1eb      	bne.n	238ee <CC_PalInit+0xa>
   23916:	f000 f82d 	bl	23974 <CC_PalDmaInit>
   2391a:	4604      	mov	r4, r0
   2391c:	b108      	cbz	r0, 23922 <CC_PalInit+0x3e>
   2391e:	4620      	mov	r0, r4
   23920:	bd10      	pop	{r4, pc}
   23922:	f000 f87b 	bl	23a1c <CC_PalPowerSaveModeInit>
   23926:	4620      	mov	r0, r4
   23928:	e7fa      	b.n	23920 <CC_PalInit+0x3c>
   2392a:	bf00      	nop
   2392c:	200007f8 	.word	0x200007f8
   23930:	200007ec 	.word	0x200007ec
   23934:	200007f4 	.word	0x200007f4
   23938:	200007fc 	.word	0x200007fc
   2393c:	200007f0 	.word	0x200007f0

00023940 <CC_PalTerminate>:
   23940:	b508      	push	{r3, lr}
   23942:	4808      	ldr	r0, [pc, #32]	; (23964 <CC_PalTerminate+0x24>)
   23944:	f000 f84e 	bl	239e4 <CC_PalMutexDestroy>
   23948:	4807      	ldr	r0, [pc, #28]	; (23968 <CC_PalTerminate+0x28>)
   2394a:	f000 f84b 	bl	239e4 <CC_PalMutexDestroy>
   2394e:	4807      	ldr	r0, [pc, #28]	; (2396c <CC_PalTerminate+0x2c>)
   23950:	f000 f848 	bl	239e4 <CC_PalMutexDestroy>
   23954:	4806      	ldr	r0, [pc, #24]	; (23970 <CC_PalTerminate+0x30>)
   23956:	f000 f845 	bl	239e4 <CC_PalMutexDestroy>
   2395a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2395e:	f000 b80b 	b.w	23978 <CC_PalDmaTerminate>
   23962:	bf00      	nop
   23964:	200007f8 	.word	0x200007f8
   23968:	200007ec 	.word	0x200007ec
   2396c:	200007f4 	.word	0x200007f4
   23970:	200007f0 	.word	0x200007f0

00023974 <CC_PalDmaInit>:
   23974:	2000      	movs	r0, #0
   23976:	4770      	bx	lr

00023978 <CC_PalDmaTerminate>:
   23978:	4770      	bx	lr
   2397a:	bf00      	nop

0002397c <CC_PalWaitInterruptRND>:
   2397c:	b410      	push	{r4}
   2397e:	4c09      	ldr	r4, [pc, #36]	; (239a4 <CC_PalWaitInterruptRND+0x28>)
   23980:	4602      	mov	r2, r0
   23982:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   23986:	4213      	tst	r3, r2
   23988:	d0fb      	beq.n	23982 <CC_PalWaitInterruptRND+0x6>
   2398a:	b121      	cbz	r1, 23996 <CC_PalWaitInterruptRND+0x1a>
   2398c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   23990:	600b      	str	r3, [r1, #0]
   23992:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   23996:	4b03      	ldr	r3, [pc, #12]	; (239a4 <CC_PalWaitInterruptRND+0x28>)
   23998:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   2399c:	2000      	movs	r0, #0
   2399e:	bc10      	pop	{r4}
   239a0:	4770      	bx	lr
   239a2:	bf00      	nop
   239a4:	5002b000 	.word	0x5002b000

000239a8 <CC_PalWaitInterrupt>:
   239a8:	4a04      	ldr	r2, [pc, #16]	; (239bc <CC_PalWaitInterrupt+0x14>)
   239aa:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   239ae:	4218      	tst	r0, r3
   239b0:	d0fb      	beq.n	239aa <CC_PalWaitInterrupt+0x2>
   239b2:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   239b6:	2000      	movs	r0, #0
   239b8:	4770      	bx	lr
   239ba:	bf00      	nop
   239bc:	5002b000 	.word	0x5002b000

000239c0 <CC_PalMemCopyPlat>:
   239c0:	f003 b992 	b.w	26ce8 <memmove>

000239c4 <CC_PalMemSetPlat>:
   239c4:	f003 b9b3 	b.w	26d2e <memset>

000239c8 <CC_PalMemSetZeroPlat>:
   239c8:	460a      	mov	r2, r1
   239ca:	2100      	movs	r1, #0
   239cc:	f003 b9af 	b.w	26d2e <memset>

000239d0 <CC_PalMutexCreate>:
   239d0:	b508      	push	{r3, lr}
   239d2:	4b03      	ldr	r3, [pc, #12]	; (239e0 <CC_PalMutexCreate+0x10>)
   239d4:	6802      	ldr	r2, [r0, #0]
   239d6:	681b      	ldr	r3, [r3, #0]
   239d8:	6810      	ldr	r0, [r2, #0]
   239da:	4798      	blx	r3
   239dc:	2000      	movs	r0, #0
   239de:	bd08      	pop	{r3, pc}
   239e0:	200007ac 	.word	0x200007ac

000239e4 <CC_PalMutexDestroy>:
   239e4:	b508      	push	{r3, lr}
   239e6:	4b03      	ldr	r3, [pc, #12]	; (239f4 <CC_PalMutexDestroy+0x10>)
   239e8:	6802      	ldr	r2, [r0, #0]
   239ea:	685b      	ldr	r3, [r3, #4]
   239ec:	6810      	ldr	r0, [r2, #0]
   239ee:	4798      	blx	r3
   239f0:	2000      	movs	r0, #0
   239f2:	bd08      	pop	{r3, pc}
   239f4:	200007ac 	.word	0x200007ac

000239f8 <CC_PalMutexLock>:
   239f8:	4b02      	ldr	r3, [pc, #8]	; (23a04 <CC_PalMutexLock+0xc>)
   239fa:	6802      	ldr	r2, [r0, #0]
   239fc:	689b      	ldr	r3, [r3, #8]
   239fe:	6810      	ldr	r0, [r2, #0]
   23a00:	4718      	bx	r3
   23a02:	bf00      	nop
   23a04:	200007ac 	.word	0x200007ac

00023a08 <CC_PalMutexUnlock>:
   23a08:	b508      	push	{r3, lr}
   23a0a:	4b03      	ldr	r3, [pc, #12]	; (23a18 <CC_PalMutexUnlock+0x10>)
   23a0c:	6802      	ldr	r2, [r0, #0]
   23a0e:	68db      	ldr	r3, [r3, #12]
   23a10:	6810      	ldr	r0, [r2, #0]
   23a12:	4798      	blx	r3
   23a14:	2000      	movs	r0, #0
   23a16:	bd08      	pop	{r3, pc}
   23a18:	200007ac 	.word	0x200007ac

00023a1c <CC_PalPowerSaveModeInit>:
   23a1c:	b570      	push	{r4, r5, r6, lr}
   23a1e:	4c09      	ldr	r4, [pc, #36]	; (23a44 <CC_PalPowerSaveModeInit+0x28>)
   23a20:	4d09      	ldr	r5, [pc, #36]	; (23a48 <CC_PalPowerSaveModeInit+0x2c>)
   23a22:	6920      	ldr	r0, [r4, #16]
   23a24:	68ab      	ldr	r3, [r5, #8]
   23a26:	4798      	blx	r3
   23a28:	b118      	cbz	r0, 23a32 <CC_PalPowerSaveModeInit+0x16>
   23a2a:	4b08      	ldr	r3, [pc, #32]	; (23a4c <CC_PalPowerSaveModeInit+0x30>)
   23a2c:	4808      	ldr	r0, [pc, #32]	; (23a50 <CC_PalPowerSaveModeInit+0x34>)
   23a2e:	685b      	ldr	r3, [r3, #4]
   23a30:	4798      	blx	r3
   23a32:	4a08      	ldr	r2, [pc, #32]	; (23a54 <CC_PalPowerSaveModeInit+0x38>)
   23a34:	68eb      	ldr	r3, [r5, #12]
   23a36:	6920      	ldr	r0, [r4, #16]
   23a38:	2100      	movs	r1, #0
   23a3a:	6011      	str	r1, [r2, #0]
   23a3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23a40:	4718      	bx	r3
   23a42:	bf00      	nop
   23a44:	200007bc 	.word	0x200007bc
   23a48:	200007ac 	.word	0x200007ac
   23a4c:	2000079c 	.word	0x2000079c
   23a50:	0002baa4 	.word	0x0002baa4
   23a54:	20003750 	.word	0x20003750

00023a58 <CC_PalPowerSaveModeSelect>:
   23a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23a5a:	4d1a      	ldr	r5, [pc, #104]	; (23ac4 <CC_PalPowerSaveModeSelect+0x6c>)
   23a5c:	4e1a      	ldr	r6, [pc, #104]	; (23ac8 <CC_PalPowerSaveModeSelect+0x70>)
   23a5e:	4604      	mov	r4, r0
   23a60:	68b2      	ldr	r2, [r6, #8]
   23a62:	6928      	ldr	r0, [r5, #16]
   23a64:	4790      	blx	r2
   23a66:	b9e8      	cbnz	r0, 23aa4 <CC_PalPowerSaveModeSelect+0x4c>
   23a68:	4f18      	ldr	r7, [pc, #96]	; (23acc <CC_PalPowerSaveModeSelect+0x74>)
   23a6a:	683b      	ldr	r3, [r7, #0]
   23a6c:	b14c      	cbz	r4, 23a82 <CC_PalPowerSaveModeSelect+0x2a>
   23a6e:	b1a3      	cbz	r3, 23a9a <CC_PalPowerSaveModeSelect+0x42>
   23a70:	2b01      	cmp	r3, #1
   23a72:	d019      	beq.n	23aa8 <CC_PalPowerSaveModeSelect+0x50>
   23a74:	3b01      	subs	r3, #1
   23a76:	603b      	str	r3, [r7, #0]
   23a78:	6928      	ldr	r0, [r5, #16]
   23a7a:	68f3      	ldr	r3, [r6, #12]
   23a7c:	4798      	blx	r3
   23a7e:	2000      	movs	r0, #0
   23a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23a82:	b943      	cbnz	r3, 23a96 <CC_PalPowerSaveModeSelect+0x3e>
   23a84:	4a12      	ldr	r2, [pc, #72]	; (23ad0 <CC_PalPowerSaveModeSelect+0x78>)
   23a86:	2101      	movs	r1, #1
   23a88:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   23a8c:	4911      	ldr	r1, [pc, #68]	; (23ad4 <CC_PalPowerSaveModeSelect+0x7c>)
   23a8e:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   23a92:	2a00      	cmp	r2, #0
   23a94:	d1fb      	bne.n	23a8e <CC_PalPowerSaveModeSelect+0x36>
   23a96:	3301      	adds	r3, #1
   23a98:	603b      	str	r3, [r7, #0]
   23a9a:	68f3      	ldr	r3, [r6, #12]
   23a9c:	6928      	ldr	r0, [r5, #16]
   23a9e:	4798      	blx	r3
   23aa0:	2000      	movs	r0, #0
   23aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23aa4:	480c      	ldr	r0, [pc, #48]	; (23ad8 <CC_PalPowerSaveModeSelect+0x80>)
   23aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23aa8:	4a0a      	ldr	r2, [pc, #40]	; (23ad4 <CC_PalPowerSaveModeSelect+0x7c>)
   23aaa:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   23aae:	2b00      	cmp	r3, #0
   23ab0:	d1fb      	bne.n	23aaa <CC_PalPowerSaveModeSelect+0x52>
   23ab2:	4a07      	ldr	r2, [pc, #28]	; (23ad0 <CC_PalPowerSaveModeSelect+0x78>)
   23ab4:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   23ab8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   23abc:	f7ff ff00 	bl	238c0 <CC_HalMaskInterrupt>
   23ac0:	683b      	ldr	r3, [r7, #0]
   23ac2:	e7d7      	b.n	23a74 <CC_PalPowerSaveModeSelect+0x1c>
   23ac4:	200007bc 	.word	0x200007bc
   23ac8:	200007ac 	.word	0x200007ac
   23acc:	20003750 	.word	0x20003750
   23ad0:	5002a000 	.word	0x5002a000
   23ad4:	5002b000 	.word	0x5002b000
   23ad8:	ffff8fe9 	.word	0xffff8fe9

00023adc <mutex_init>:
   23adc:	4b01      	ldr	r3, [pc, #4]	; (23ae4 <mutex_init+0x8>)
   23ade:	681b      	ldr	r3, [r3, #0]
   23ae0:	4718      	bx	r3
   23ae2:	bf00      	nop
   23ae4:	200007ac 	.word	0x200007ac

00023ae8 <mutex_lock>:
   23ae8:	4b01      	ldr	r3, [pc, #4]	; (23af0 <mutex_lock+0x8>)
   23aea:	689b      	ldr	r3, [r3, #8]
   23aec:	4718      	bx	r3
   23aee:	bf00      	nop
   23af0:	200007ac 	.word	0x200007ac

00023af4 <mutex_unlock>:
   23af4:	4b01      	ldr	r3, [pc, #4]	; (23afc <mutex_unlock+0x8>)
   23af6:	68db      	ldr	r3, [r3, #12]
   23af8:	4718      	bx	r3
   23afa:	bf00      	nop
   23afc:	200007ac 	.word	0x200007ac

00023b00 <startTrngHW>:
   23b00:	2800      	cmp	r0, #0
   23b02:	f000 8084 	beq.w	23c0e <startTrngHW+0x10e>
   23b06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23b0a:	460c      	mov	r4, r1
   23b0c:	b083      	sub	sp, #12
   23b0e:	2900      	cmp	r1, #0
   23b10:	d078      	beq.n	23c04 <startTrngHW+0x104>
   23b12:	461d      	mov	r5, r3
   23b14:	2b00      	cmp	r3, #0
   23b16:	d075      	beq.n	23c04 <startTrngHW+0x104>
   23b18:	4607      	mov	r7, r0
   23b1a:	b11a      	cbz	r2, 23b24 <startTrngHW+0x24>
   23b1c:	2201      	movs	r2, #1
   23b1e:	2300      	movs	r3, #0
   23b20:	602a      	str	r2, [r5, #0]
   23b22:	6003      	str	r3, [r0, #0]
   23b24:	682b      	ldr	r3, [r5, #0]
   23b26:	2b00      	cmp	r3, #0
   23b28:	d067      	beq.n	23bfa <startTrngHW+0xfa>
   23b2a:	4629      	mov	r1, r5
   23b2c:	4620      	mov	r0, r4
   23b2e:	f000 fde9 	bl	24704 <LLF_RND_GetFastestRosc>
   23b32:	4603      	mov	r3, r0
   23b34:	2800      	cmp	r0, #0
   23b36:	d161      	bne.n	23bfc <startTrngHW+0xfc>
   23b38:	6828      	ldr	r0, [r5, #0]
   23b3a:	4621      	mov	r1, r4
   23b3c:	f000 fdc4 	bl	246c8 <LLF_RND_GetRoscSampleCnt>
   23b40:	4603      	mov	r3, r0
   23b42:	2800      	cmp	r0, #0
   23b44:	d15a      	bne.n	23bfc <startTrngHW+0xfc>
   23b46:	682a      	ldr	r2, [r5, #0]
   23b48:	2a08      	cmp	r2, #8
   23b4a:	d072      	beq.n	23c32 <startTrngHW+0x132>
   23b4c:	2a04      	cmp	r2, #4
   23b4e:	d073      	beq.n	23c38 <startTrngHW+0x138>
   23b50:	f1a2 0802 	sub.w	r8, r2, #2
   23b54:	fab8 f888 	clz	r8, r8
   23b58:	ea4f 1858 	mov.w	r8, r8, lsr #5
   23b5c:	4e38      	ldr	r6, [pc, #224]	; (23c40 <startTrngHW+0x140>)
   23b5e:	2001      	movs	r0, #1
   23b60:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   23b64:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   23b68:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   23b6c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   23b6e:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   23b72:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   23b76:	428a      	cmp	r2, r1
   23b78:	d1f6      	bne.n	23b68 <startTrngHW+0x68>
   23b7a:	f04f 0900 	mov.w	r9, #0
   23b7e:	9301      	str	r3, [sp, #4]
   23b80:	f04f 30ff 	mov.w	r0, #4294967295
   23b84:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   23b88:	f7ff fe8c 	bl	238a4 <CC_HalClearInterruptBit>
   23b8c:	f06f 021b 	mvn.w	r2, #27
   23b90:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   23b94:	4648      	mov	r0, r9
   23b96:	f7ff fe93 	bl	238c0 <CC_HalMaskInterrupt>
   23b9a:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   23b9e:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   23ba2:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   23ba6:	f7ff fe8b 	bl	238c0 <CC_HalMaskInterrupt>
   23baa:	220a      	movs	r2, #10
   23bac:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   23bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23bb2:	2b01      	cmp	r3, #1
   23bb4:	9b01      	ldr	r3, [sp, #4]
   23bb6:	d02d      	beq.n	23c14 <startTrngHW+0x114>
   23bb8:	6922      	ldr	r2, [r4, #16]
   23bba:	4922      	ldr	r1, [pc, #136]	; (23c44 <startTrngHW+0x144>)
   23bbc:	fba1 1202 	umull	r1, r2, r1, r2
   23bc0:	0912      	lsrs	r2, r2, #4
   23bc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   23bc4:	fb01 f202 	mul.w	r2, r1, r2
   23bc8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   23bcc:	491c      	ldr	r1, [pc, #112]	; (23c40 <startTrngHW+0x140>)
   23bce:	03d2      	lsls	r2, r2, #15
   23bd0:	0992      	lsrs	r2, r2, #6
   23bd2:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   23bd6:	2201      	movs	r2, #1
   23bd8:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   23bdc:	683a      	ldr	r2, [r7, #0]
   23bde:	6829      	ldr	r1, [r5, #0]
   23be0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   23be4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   23be8:	603a      	str	r2, [r7, #0]
   23bea:	6829      	ldr	r1, [r5, #0]
   23bec:	4618      	mov	r0, r3
   23bee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   23bf2:	603a      	str	r2, [r7, #0]
   23bf4:	b003      	add	sp, #12
   23bf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23bfa:	4b13      	ldr	r3, [pc, #76]	; (23c48 <startTrngHW+0x148>)
   23bfc:	4618      	mov	r0, r3
   23bfe:	b003      	add	sp, #12
   23c00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23c04:	4b11      	ldr	r3, [pc, #68]	; (23c4c <startTrngHW+0x14c>)
   23c06:	4618      	mov	r0, r3
   23c08:	b003      	add	sp, #12
   23c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23c0e:	4b0f      	ldr	r3, [pc, #60]	; (23c4c <startTrngHW+0x14c>)
   23c10:	4618      	mov	r0, r3
   23c12:	4770      	bx	lr
   23c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   23c18:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   23c1c:	3101      	adds	r1, #1
   23c1e:	d006      	beq.n	23c2e <startTrngHW+0x12e>
   23c20:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   23c24:	4907      	ldr	r1, [pc, #28]	; (23c44 <startTrngHW+0x144>)
   23c26:	fba1 1202 	umull	r1, r2, r1, r2
   23c2a:	0912      	lsrs	r2, r2, #4
   23c2c:	e7c9      	b.n	23bc2 <startTrngHW+0xc2>
   23c2e:	2216      	movs	r2, #22
   23c30:	e7c7      	b.n	23bc2 <startTrngHW+0xc2>
   23c32:	f04f 0803 	mov.w	r8, #3
   23c36:	e791      	b.n	23b5c <startTrngHW+0x5c>
   23c38:	f04f 0802 	mov.w	r8, #2
   23c3c:	e78e      	b.n	23b5c <startTrngHW+0x5c>
   23c3e:	bf00      	nop
   23c40:	5002b000 	.word	0x5002b000
   23c44:	aaaaaaab 	.word	0xaaaaaaab
   23c48:	00f10c31 	.word	0x00f10c31
   23c4c:	00f10c35 	.word	0x00f10c35

00023c50 <LLF_RND_RepetitionCounterTest.part.0>:
   23c50:	b570      	push	{r4, r5, r6, lr}
   23c52:	00c9      	lsls	r1, r1, #3
   23c54:	2400      	movs	r4, #0
   23c56:	1e4e      	subs	r6, r1, #1
   23c58:	f04f 0c01 	mov.w	ip, #1
   23c5c:	4625      	mov	r5, r4
   23c5e:	46a6      	mov	lr, r4
   23c60:	e008      	b.n	23c74 <LLF_RND_RepetitionCounterTest.part.0+0x24>
   23c62:	459e      	cmp	lr, r3
   23c64:	d015      	beq.n	23c92 <LLF_RND_RepetitionCounterTest.part.0+0x42>
   23c66:	2501      	movs	r5, #1
   23c68:	45b4      	cmp	ip, r6
   23c6a:	d817      	bhi.n	23c9c <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   23c6c:	3401      	adds	r4, #1
   23c6e:	f10c 0c01 	add.w	ip, ip, #1
   23c72:	469e      	mov	lr, r3
   23c74:	0963      	lsrs	r3, r4, #5
   23c76:	f004 011f 	and.w	r1, r4, #31
   23c7a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   23c7e:	291f      	cmp	r1, #31
   23c80:	fa23 f301 	lsr.w	r3, r3, r1
   23c84:	bf18      	it	ne
   23c86:	f003 0301 	andne.w	r3, r3, #1
   23c8a:	2c00      	cmp	r4, #0
   23c8c:	d1e9      	bne.n	23c62 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   23c8e:	2501      	movs	r5, #1
   23c90:	e7ec      	b.n	23c6c <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   23c92:	3501      	adds	r5, #1
   23c94:	4295      	cmp	r5, r2
   23c96:	d1e7      	bne.n	23c68 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   23c98:	4801      	ldr	r0, [pc, #4]	; (23ca0 <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   23c9a:	bd70      	pop	{r4, r5, r6, pc}
   23c9c:	2000      	movs	r0, #0
   23c9e:	bd70      	pop	{r4, r5, r6, pc}
   23ca0:	00f10c36 	.word	0x00f10c36

00023ca4 <LLF_RND_AdaptiveProportionTest>:
   23ca4:	2800      	cmp	r0, #0
   23ca6:	d03f      	beq.n	23d28 <LLF_RND_AdaptiveProportionTest+0x84>
   23ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23cac:	1e4c      	subs	r4, r1, #1
   23cae:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   23cb2:	d228      	bcs.n	23d06 <LLF_RND_AdaptiveProportionTest+0x62>
   23cb4:	b33b      	cbz	r3, 23d06 <LLF_RND_AdaptiveProportionTest+0x62>
   23cb6:	b332      	cbz	r2, 23d06 <LLF_RND_AdaptiveProportionTest+0x62>
   23cb8:	f04f 0e00 	mov.w	lr, #0
   23cbc:	00cf      	lsls	r7, r1, #3
   23cbe:	4676      	mov	r6, lr
   23cc0:	4675      	mov	r5, lr
   23cc2:	4674      	mov	r4, lr
   23cc4:	f103 38ff 	add.w	r8, r3, #4294967295
   23cc8:	0961      	lsrs	r1, r4, #5
   23cca:	f004 0c1f 	and.w	ip, r4, #31
   23cce:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   23cd2:	f1bc 0f1f 	cmp.w	ip, #31
   23cd6:	fa21 f10c 	lsr.w	r1, r1, ip
   23cda:	bf18      	it	ne
   23cdc:	f001 0101 	andne.w	r1, r1, #1
   23ce0:	b1a4      	cbz	r4, 23d0c <LLF_RND_AdaptiveProportionTest+0x68>
   23ce2:	42ab      	cmp	r3, r5
   23ce4:	d018      	beq.n	23d18 <LLF_RND_AdaptiveProportionTest+0x74>
   23ce6:	428e      	cmp	r6, r1
   23ce8:	bf08      	it	eq
   23cea:	f10e 0e01 	addeq.w	lr, lr, #1
   23cee:	45a8      	cmp	r8, r5
   23cf0:	d015      	beq.n	23d1e <LLF_RND_AdaptiveProportionTest+0x7a>
   23cf2:	3501      	adds	r5, #1
   23cf4:	4631      	mov	r1, r6
   23cf6:	3401      	adds	r4, #1
   23cf8:	42bc      	cmp	r4, r7
   23cfa:	d001      	beq.n	23d00 <LLF_RND_AdaptiveProportionTest+0x5c>
   23cfc:	460e      	mov	r6, r1
   23cfe:	e7e3      	b.n	23cc8 <LLF_RND_AdaptiveProportionTest+0x24>
   23d00:	2000      	movs	r0, #0
   23d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23d06:	4809      	ldr	r0, [pc, #36]	; (23d2c <LLF_RND_AdaptiveProportionTest+0x88>)
   23d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23d0c:	f04f 0e01 	mov.w	lr, #1
   23d10:	4674      	mov	r4, lr
   23d12:	4675      	mov	r5, lr
   23d14:	460e      	mov	r6, r1
   23d16:	e7d7      	b.n	23cc8 <LLF_RND_AdaptiveProportionTest+0x24>
   23d18:	2501      	movs	r5, #1
   23d1a:	46ae      	mov	lr, r5
   23d1c:	e7eb      	b.n	23cf6 <LLF_RND_AdaptiveProportionTest+0x52>
   23d1e:	4572      	cmp	r2, lr
   23d20:	d3f1      	bcc.n	23d06 <LLF_RND_AdaptiveProportionTest+0x62>
   23d22:	4631      	mov	r1, r6
   23d24:	461d      	mov	r5, r3
   23d26:	e7e6      	b.n	23cf6 <LLF_RND_AdaptiveProportionTest+0x52>
   23d28:	4800      	ldr	r0, [pc, #0]	; (23d2c <LLF_RND_AdaptiveProportionTest+0x88>)
   23d2a:	4770      	bx	lr
   23d2c:	00f10c37 	.word	0x00f10c37

00023d30 <getTrngSource>:
   23d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23d34:	b091      	sub	sp, #68	; 0x44
   23d36:	460d      	mov	r5, r1
   23d38:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   23d3c:	4681      	mov	r9, r0
   23d3e:	2900      	cmp	r1, #0
   23d40:	d14c      	bne.n	23ddc <getTrngSource+0xac>
   23d42:	6928      	ldr	r0, [r5, #16]
   23d44:	9006      	str	r0, [sp, #24]
   23d46:	981a      	ldr	r0, [sp, #104]	; 0x68
   23d48:	601c      	str	r4, [r3, #0]
   23d4a:	2300      	movs	r3, #0
   23d4c:	6003      	str	r3, [r0, #0]
   23d4e:	2a00      	cmp	r2, #0
   23d50:	f000 8124 	beq.w	23f9c <getTrngSource+0x26c>
   23d54:	4b9d      	ldr	r3, [pc, #628]	; (23fcc <getTrngSource+0x29c>)
   23d56:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   23d58:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   23d5c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   23d60:	429a      	cmp	r2, r3
   23d62:	d147      	bne.n	23df4 <getTrngSource+0xc4>
   23d64:	290a      	cmp	r1, #10
   23d66:	d145      	bne.n	23df4 <getTrngSource+0xc4>
   23d68:	f899 3003 	ldrb.w	r3, [r9, #3]
   23d6c:	9308      	str	r3, [sp, #32]
   23d6e:	f104 0308 	add.w	r3, r4, #8
   23d72:	9a06      	ldr	r2, [sp, #24]
   23d74:	9307      	str	r3, [sp, #28]
   23d76:	4b96      	ldr	r3, [pc, #600]	; (23fd0 <getTrngSource+0x2a0>)
   23d78:	4c94      	ldr	r4, [pc, #592]	; (23fcc <getTrngSource+0x29c>)
   23d7a:	fba3 1302 	umull	r1, r3, r3, r2
   23d7e:	089b      	lsrs	r3, r3, #2
   23d80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   23d84:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   23d88:	9303      	str	r3, [sp, #12]
   23d8a:	2304      	movs	r3, #4
   23d8c:	9305      	str	r3, [sp, #20]
   23d8e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   23d90:	9e06      	ldr	r6, [sp, #24]
   23d92:	601e      	str	r6, [r3, #0]
   23d94:	2e00      	cmp	r6, #0
   23d96:	d033      	beq.n	23e00 <getTrngSource+0xd0>
   23d98:	f8dd 801c 	ldr.w	r8, [sp, #28]
   23d9c:	2700      	movs	r7, #0
   23d9e:	f04f 0a01 	mov.w	sl, #1
   23da2:	f000 fcbf 	bl	24724 <LLF_RND_TurnOffTrng>
   23da6:	2300      	movs	r3, #0
   23da8:	9309      	str	r3, [sp, #36]	; 0x24
   23daa:	f1b9 0f00 	cmp.w	r9, #0
   23dae:	f000 80df 	beq.w	23f70 <getTrngSource+0x240>
   23db2:	2d00      	cmp	r5, #0
   23db4:	f000 80dc 	beq.w	23f70 <getTrngSource+0x240>
   23db8:	9b08      	ldr	r3, [sp, #32]
   23dba:	b1eb      	cbz	r3, 23df8 <getTrngSource+0xc8>
   23dbc:	a908      	add	r1, sp, #32
   23dbe:	4628      	mov	r0, r5
   23dc0:	f000 fca0 	bl	24704 <LLF_RND_GetFastestRosc>
   23dc4:	2800      	cmp	r0, #0
   23dc6:	d03e      	beq.n	23e46 <getTrngSource+0x116>
   23dc8:	4b82      	ldr	r3, [pc, #520]	; (23fd4 <getTrngSource+0x2a4>)
   23dca:	4298      	cmp	r0, r3
   23dcc:	d118      	bne.n	23e00 <getTrngSource+0xd0>
   23dce:	9003      	str	r0, [sp, #12]
   23dd0:	f000 fca8 	bl	24724 <LLF_RND_TurnOffTrng>
   23dd4:	9803      	ldr	r0, [sp, #12]
   23dd6:	b011      	add	sp, #68	; 0x44
   23dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ddc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   23de0:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   23de4:	3601      	adds	r6, #1
   23de6:	bf14      	ite	ne
   23de8:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   23dec:	f44f 7004 	moveq.w	r0, #528	; 0x210
   23df0:	9006      	str	r0, [sp, #24]
   23df2:	e7a8      	b.n	23d46 <getTrngSource+0x16>
   23df4:	4878      	ldr	r0, [pc, #480]	; (23fd8 <getTrngSource+0x2a8>)
   23df6:	e7ea      	b.n	23dce <getTrngSource+0x9e>
   23df8:	4878      	ldr	r0, [pc, #480]	; (23fdc <getTrngSource+0x2ac>)
   23dfa:	4b76      	ldr	r3, [pc, #472]	; (23fd4 <getTrngSource+0x2a4>)
   23dfc:	4298      	cmp	r0, r3
   23dfe:	d0e6      	beq.n	23dce <getTrngSource+0x9e>
   23e00:	9b08      	ldr	r3, [sp, #32]
   23e02:	2b08      	cmp	r3, #8
   23e04:	f000 80c8 	beq.w	23f98 <getTrngSource+0x268>
   23e08:	005b      	lsls	r3, r3, #1
   23e0a:	2200      	movs	r2, #0
   23e0c:	9308      	str	r3, [sp, #32]
   23e0e:	9200      	str	r2, [sp, #0]
   23e10:	ab08      	add	r3, sp, #32
   23e12:	4629      	mov	r1, r5
   23e14:	4648      	mov	r0, r9
   23e16:	f7ff fe73 	bl	23b00 <startTrngHW>
   23e1a:	4b70      	ldr	r3, [pc, #448]	; (23fdc <getTrngSource+0x2ac>)
   23e1c:	4298      	cmp	r0, r3
   23e1e:	f000 80b7 	beq.w	23f90 <getTrngSource+0x260>
   23e22:	2800      	cmp	r0, #0
   23e24:	d1d3      	bne.n	23dce <getTrngSource+0x9e>
   23e26:	f8d9 2000 	ldr.w	r2, [r9]
   23e2a:	0a13      	lsrs	r3, r2, #8
   23e2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   23e30:	4313      	orrs	r3, r2
   23e32:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   23e36:	f8c9 3000 	str.w	r3, [r9]
   23e3a:	9b05      	ldr	r3, [sp, #20]
   23e3c:	3b01      	subs	r3, #1
   23e3e:	9305      	str	r3, [sp, #20]
   23e40:	d1a5      	bne.n	23d8e <getTrngSource+0x5e>
   23e42:	2000      	movs	r0, #0
   23e44:	e7c3      	b.n	23dce <getTrngSource+0x9e>
   23e46:	9808      	ldr	r0, [sp, #32]
   23e48:	4629      	mov	r1, r5
   23e4a:	f000 fc3d 	bl	246c8 <LLF_RND_GetRoscSampleCnt>
   23e4e:	2800      	cmp	r0, #0
   23e50:	d1ba      	bne.n	23dc8 <getTrngSource+0x98>
   23e52:	9b08      	ldr	r3, [sp, #32]
   23e54:	2b08      	cmp	r3, #8
   23e56:	f000 8095 	beq.w	23f84 <getTrngSource+0x254>
   23e5a:	2b04      	cmp	r3, #4
   23e5c:	f000 8095 	beq.w	23f8a <getTrngSource+0x25a>
   23e60:	f1a3 0302 	sub.w	r3, r3, #2
   23e64:	fab3 f383 	clz	r3, r3
   23e68:	095b      	lsrs	r3, r3, #5
   23e6a:	9304      	str	r3, [sp, #16]
   23e6c:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   23e70:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   23e74:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   23e78:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   23e7a:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   23e7e:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   23e82:	4293      	cmp	r3, r2
   23e84:	d1f6      	bne.n	23e74 <getTrngSource+0x144>
   23e86:	f04f 0b00 	mov.w	fp, #0
   23e8a:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   23e8e:	f04f 30ff 	mov.w	r0, #4294967295
   23e92:	f7ff fd07 	bl	238a4 <CC_HalClearInterruptBit>
   23e96:	f06f 031b 	mvn.w	r3, #27
   23e9a:	4658      	mov	r0, fp
   23e9c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   23ea0:	f7ff fd0e 	bl	238c0 <CC_HalMaskInterrupt>
   23ea4:	9b04      	ldr	r3, [sp, #16]
   23ea6:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   23eaa:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   23eae:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   23eb2:	f7ff fd05 	bl	238c0 <CC_HalMaskInterrupt>
   23eb6:	230a      	movs	r3, #10
   23eb8:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   23ebc:	692b      	ldr	r3, [r5, #16]
   23ebe:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   23ec2:	fbab 2303 	umull	r2, r3, fp, r3
   23ec6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   23ec8:	091b      	lsrs	r3, r3, #4
   23eca:	fb02 f303 	mul.w	r3, r2, r3
   23ece:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   23ed2:	03db      	lsls	r3, r3, #15
   23ed4:	099b      	lsrs	r3, r3, #6
   23ed6:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   23eda:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   23ede:	9908      	ldr	r1, [sp, #32]
   23ee0:	f8d9 2000 	ldr.w	r2, [r9]
   23ee4:	020b      	lsls	r3, r1, #8
   23ee6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   23eea:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   23eee:	4313      	orrs	r3, r2
   23ef0:	f8c9 3000 	str.w	r3, [r9]
   23ef4:	a809      	add	r0, sp, #36	; 0x24
   23ef6:	f000 fbd7 	bl	246a8 <LLF_RND_WaitRngInterrupt>
   23efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23efc:	f003 031a 	and.w	r3, r3, #26
   23f00:	4303      	orrs	r3, r0
   23f02:	f47f af7d 	bne.w	23e00 <getTrngSource+0xd0>
   23f06:	fbab 3b06 	umull	r3, fp, fp, r6
   23f0a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   23f0e:	930a      	str	r3, [sp, #40]	; 0x28
   23f10:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   23f14:	930b      	str	r3, [sp, #44]	; 0x2c
   23f16:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   23f1a:	930c      	str	r3, [sp, #48]	; 0x30
   23f1c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   23f20:	930d      	str	r3, [sp, #52]	; 0x34
   23f22:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23f26:	930e      	str	r3, [sp, #56]	; 0x38
   23f28:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   23f2c:	930f      	str	r3, [sp, #60]	; 0x3c
   23f2e:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   23f32:	d101      	bne.n	23f38 <getTrngSource+0x208>
   23f34:	9b03      	ldr	r3, [sp, #12]
   23f36:	b9eb      	cbnz	r3, 23f74 <getTrngSource+0x244>
   23f38:	4640      	mov	r0, r8
   23f3a:	2218      	movs	r2, #24
   23f3c:	a90a      	add	r1, sp, #40	; 0x28
   23f3e:	3e18      	subs	r6, #24
   23f40:	f108 0818 	add.w	r8, r8, #24
   23f44:	f7ff fd3c 	bl	239c0 <CC_PalMemCopyPlat>
   23f48:	3701      	adds	r7, #1
   23f4a:	2e00      	cmp	r6, #0
   23f4c:	f47f af29 	bne.w	23da2 <getTrngSource+0x72>
   23f50:	9b06      	ldr	r3, [sp, #24]
   23f52:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   23f56:	d836      	bhi.n	23fc6 <getTrngSource+0x296>
   23f58:	9e07      	ldr	r6, [sp, #28]
   23f5a:	696a      	ldr	r2, [r5, #20]
   23f5c:	4619      	mov	r1, r3
   23f5e:	4630      	mov	r0, r6
   23f60:	461f      	mov	r7, r3
   23f62:	f7ff fe75 	bl	23c50 <LLF_RND_RepetitionCounterTest.part.0>
   23f66:	b320      	cbz	r0, 23fb2 <getTrngSource+0x282>
   23f68:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   23f6a:	2300      	movs	r3, #0
   23f6c:	6013      	str	r3, [r2, #0]
   23f6e:	e72b      	b.n	23dc8 <getTrngSource+0x98>
   23f70:	481b      	ldr	r0, [pc, #108]	; (23fe0 <getTrngSource+0x2b0>)
   23f72:	e729      	b.n	23dc8 <getTrngSource+0x98>
   23f74:	4640      	mov	r0, r8
   23f76:	461a      	mov	r2, r3
   23f78:	a90a      	add	r1, sp, #40	; 0x28
   23f7a:	1af6      	subs	r6, r6, r3
   23f7c:	4498      	add	r8, r3
   23f7e:	f7ff fd1f 	bl	239c0 <CC_PalMemCopyPlat>
   23f82:	e7e1      	b.n	23f48 <getTrngSource+0x218>
   23f84:	2303      	movs	r3, #3
   23f86:	9304      	str	r3, [sp, #16]
   23f88:	e770      	b.n	23e6c <getTrngSource+0x13c>
   23f8a:	2302      	movs	r3, #2
   23f8c:	9304      	str	r3, [sp, #16]
   23f8e:	e76d      	b.n	23e6c <getTrngSource+0x13c>
   23f90:	6a2b      	ldr	r3, [r5, #32]
   23f92:	2b00      	cmp	r3, #0
   23f94:	f43f af1b 	beq.w	23dce <getTrngSource+0x9e>
   23f98:	4812      	ldr	r0, [pc, #72]	; (23fe4 <getTrngSource+0x2b4>)
   23f9a:	e718      	b.n	23dce <getTrngSource+0x9e>
   23f9c:	9100      	str	r1, [sp, #0]
   23f9e:	ab08      	add	r3, sp, #32
   23fa0:	2201      	movs	r2, #1
   23fa2:	4629      	mov	r1, r5
   23fa4:	4648      	mov	r0, r9
   23fa6:	f7ff fdab 	bl	23b00 <startTrngHW>
   23faa:	2800      	cmp	r0, #0
   23fac:	f43f aedf 	beq.w	23d6e <getTrngSource+0x3e>
   23fb0:	e70d      	b.n	23dce <getTrngSource+0x9e>
   23fb2:	69aa      	ldr	r2, [r5, #24]
   23fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   23fb8:	4639      	mov	r1, r7
   23fba:	4630      	mov	r0, r6
   23fbc:	f7ff fe72 	bl	23ca4 <LLF_RND_AdaptiveProportionTest>
   23fc0:	2800      	cmp	r0, #0
   23fc2:	d1d1      	bne.n	23f68 <getTrngSource+0x238>
   23fc4:	e73d      	b.n	23e42 <getTrngSource+0x112>
   23fc6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   23fc8:	601e      	str	r6, [r3, #0]
   23fca:	e719      	b.n	23e00 <getTrngSource+0xd0>
   23fcc:	5002b000 	.word	0x5002b000
   23fd0:	aaaaaaab 	.word	0xaaaaaaab
   23fd4:	00f10c02 	.word	0x00f10c02
   23fd8:	00f10c30 	.word	0x00f10c30
   23fdc:	00f10c31 	.word	0x00f10c31
   23fe0:	00f10c35 	.word	0x00f10c35
   23fe4:	00f10c32 	.word	0x00f10c32

00023fe8 <LLF_RND_GetTrngSource>:
   23fe8:	b410      	push	{r4}
   23fea:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   23fee:	9401      	str	r4, [sp, #4]
   23ff0:	9c03      	ldr	r4, [sp, #12]
   23ff2:	9402      	str	r4, [sp, #8]
   23ff4:	2400      	movs	r4, #0
   23ff6:	9403      	str	r4, [sp, #12]
   23ff8:	bc10      	pop	{r4}
   23ffa:	f7ff be99 	b.w	23d30 <getTrngSource>
   23ffe:	bf00      	nop

00024000 <LLF_RND_RunTrngStartupTest>:
   24000:	b510      	push	{r4, lr}
   24002:	b086      	sub	sp, #24
   24004:	ab05      	add	r3, sp, #20
   24006:	2401      	movs	r4, #1
   24008:	e9cd 2401 	strd	r2, r4, [sp, #4]
   2400c:	9300      	str	r3, [sp, #0]
   2400e:	2200      	movs	r2, #0
   24010:	ab04      	add	r3, sp, #16
   24012:	f7ff fe8d 	bl	23d30 <getTrngSource>
   24016:	b006      	add	sp, #24
   24018:	bd10      	pop	{r4, pc}
   2401a:	bf00      	nop

0002401c <mbedtls_hardware_poll>:
   2401c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2401e:	b089      	sub	sp, #36	; 0x24
   24020:	9205      	str	r2, [sp, #20]
   24022:	2900      	cmp	r1, #0
   24024:	d064      	beq.n	240f0 <mbedtls_hardware_poll+0xd4>
   24026:	461c      	mov	r4, r3
   24028:	2b00      	cmp	r3, #0
   2402a:	d061      	beq.n	240f0 <mbedtls_hardware_poll+0xd4>
   2402c:	4615      	mov	r5, r2
   2402e:	2a00      	cmp	r2, #0
   24030:	d05e      	beq.n	240f0 <mbedtls_hardware_poll+0xd4>
   24032:	4f31      	ldr	r7, [pc, #196]	; (240f8 <mbedtls_hardware_poll+0xdc>)
   24034:	460e      	mov	r6, r1
   24036:	6838      	ldr	r0, [r7, #0]
   24038:	f04f 31ff 	mov.w	r1, #4294967295
   2403c:	f7ff fcdc 	bl	239f8 <CC_PalMutexLock>
   24040:	2800      	cmp	r0, #0
   24042:	d14b      	bne.n	240dc <mbedtls_hardware_poll+0xc0>
   24044:	2000      	movs	r0, #0
   24046:	f7ff fd07 	bl	23a58 <CC_PalPowerSaveModeSelect>
   2404a:	2800      	cmp	r0, #0
   2404c:	d142      	bne.n	240d4 <mbedtls_hardware_poll+0xb8>
   2404e:	482b      	ldr	r0, [pc, #172]	; (240fc <mbedtls_hardware_poll+0xe0>)
   24050:	f000 fa9a 	bl	24588 <RNG_PLAT_SetUserRngParameters>
   24054:	b1d8      	cbz	r0, 2408e <mbedtls_hardware_poll+0x72>
   24056:	2001      	movs	r0, #1
   24058:	f04f 36ff 	mov.w	r6, #4294967295
   2405c:	f7ff fcfc 	bl	23a58 <CC_PalPowerSaveModeSelect>
   24060:	2800      	cmp	r0, #0
   24062:	d133      	bne.n	240cc <mbedtls_hardware_poll+0xb0>
   24064:	4826      	ldr	r0, [pc, #152]	; (24100 <mbedtls_hardware_poll+0xe4>)
   24066:	f44f 7108 	mov.w	r1, #544	; 0x220
   2406a:	f7fe fe63 	bl	22d34 <mbedtls_zeroize_internal>
   2406e:	4825      	ldr	r0, [pc, #148]	; (24104 <mbedtls_hardware_poll+0xe8>)
   24070:	2104      	movs	r1, #4
   24072:	f7fe fe5f 	bl	22d34 <mbedtls_zeroize_internal>
   24076:	4821      	ldr	r0, [pc, #132]	; (240fc <mbedtls_hardware_poll+0xe0>)
   24078:	2128      	movs	r1, #40	; 0x28
   2407a:	f7fe fe5b 	bl	22d34 <mbedtls_zeroize_internal>
   2407e:	6838      	ldr	r0, [r7, #0]
   24080:	f7ff fcc2 	bl	23a08 <CC_PalMutexUnlock>
   24084:	2800      	cmp	r0, #0
   24086:	d12d      	bne.n	240e4 <mbedtls_hardware_poll+0xc8>
   24088:	4630      	mov	r0, r6
   2408a:	b009      	add	sp, #36	; 0x24
   2408c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2408e:	4b1c      	ldr	r3, [pc, #112]	; (24100 <mbedtls_hardware_poll+0xe4>)
   24090:	9302      	str	r3, [sp, #8]
   24092:	ab07      	add	r3, sp, #28
   24094:	9003      	str	r0, [sp, #12]
   24096:	4602      	mov	r2, r0
   24098:	9300      	str	r3, [sp, #0]
   2409a:	4918      	ldr	r1, [pc, #96]	; (240fc <mbedtls_hardware_poll+0xe0>)
   2409c:	4819      	ldr	r0, [pc, #100]	; (24104 <mbedtls_hardware_poll+0xe8>)
   2409e:	9401      	str	r4, [sp, #4]
   240a0:	ab05      	add	r3, sp, #20
   240a2:	f7ff ffa1 	bl	23fe8 <LLF_RND_GetTrngSource>
   240a6:	4603      	mov	r3, r0
   240a8:	2800      	cmp	r0, #0
   240aa:	d1d4      	bne.n	24056 <mbedtls_hardware_poll+0x3a>
   240ac:	6822      	ldr	r2, [r4, #0]
   240ae:	42aa      	cmp	r2, r5
   240b0:	d3d1      	bcc.n	24056 <mbedtls_hardware_poll+0x3a>
   240b2:	9907      	ldr	r1, [sp, #28]
   240b4:	4630      	mov	r0, r6
   240b6:	3108      	adds	r1, #8
   240b8:	462a      	mov	r2, r5
   240ba:	461e      	mov	r6, r3
   240bc:	f7ff fc80 	bl	239c0 <CC_PalMemCopyPlat>
   240c0:	6025      	str	r5, [r4, #0]
   240c2:	2001      	movs	r0, #1
   240c4:	f7ff fcc8 	bl	23a58 <CC_PalPowerSaveModeSelect>
   240c8:	2800      	cmp	r0, #0
   240ca:	d0cb      	beq.n	24064 <mbedtls_hardware_poll+0x48>
   240cc:	480e      	ldr	r0, [pc, #56]	; (24108 <mbedtls_hardware_poll+0xec>)
   240ce:	f7fe fd33 	bl	22b38 <CC_PalAbort>
   240d2:	e7c7      	b.n	24064 <mbedtls_hardware_poll+0x48>
   240d4:	480d      	ldr	r0, [pc, #52]	; (2410c <mbedtls_hardware_poll+0xf0>)
   240d6:	f7fe fd2f 	bl	22b38 <CC_PalAbort>
   240da:	e7b8      	b.n	2404e <mbedtls_hardware_poll+0x32>
   240dc:	480c      	ldr	r0, [pc, #48]	; (24110 <mbedtls_hardware_poll+0xf4>)
   240de:	f7fe fd2b 	bl	22b38 <CC_PalAbort>
   240e2:	e7af      	b.n	24044 <mbedtls_hardware_poll+0x28>
   240e4:	480b      	ldr	r0, [pc, #44]	; (24114 <mbedtls_hardware_poll+0xf8>)
   240e6:	f7fe fd27 	bl	22b38 <CC_PalAbort>
   240ea:	4630      	mov	r0, r6
   240ec:	b009      	add	sp, #36	; 0x24
   240ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   240f0:	f04f 36ff 	mov.w	r6, #4294967295
   240f4:	e7c8      	b.n	24088 <mbedtls_hardware_poll+0x6c>
   240f6:	bf00      	nop
   240f8:	200007fc 	.word	0x200007fc
   240fc:	20003978 	.word	0x20003978
   24100:	20003758 	.word	0x20003758
   24104:	20003754 	.word	0x20003754
   24108:	0002ba6c 	.word	0x0002ba6c
   2410c:	0002ba4c 	.word	0x0002ba4c
   24110:	0002ba34 	.word	0x0002ba34
   24114:	0002bac4 	.word	0x0002bac4

00024118 <cc_mbedtls_aes_init>:
   24118:	b510      	push	{r4, lr}
   2411a:	4604      	mov	r4, r0
   2411c:	b130      	cbz	r0, 2412c <cc_mbedtls_aes_init+0x14>
   2411e:	2200      	movs	r2, #0
   24120:	2301      	movs	r3, #1
   24122:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   24126:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   2412a:	bd10      	pop	{r4, pc}
   2412c:	4801      	ldr	r0, [pc, #4]	; (24134 <cc_mbedtls_aes_init+0x1c>)
   2412e:	f7fe fd03 	bl	22b38 <CC_PalAbort>
   24132:	e7f4      	b.n	2411e <cc_mbedtls_aes_init+0x6>
   24134:	0002badc 	.word	0x0002badc

00024138 <cc_mbedtls_aes_free>:
   24138:	b118      	cbz	r0, 24142 <cc_mbedtls_aes_free+0xa>
   2413a:	2274      	movs	r2, #116	; 0x74
   2413c:	2100      	movs	r1, #0
   2413e:	f7ff bc41 	b.w	239c4 <CC_PalMemSetPlat>
   24142:	4770      	bx	lr

00024144 <cc_mbedtls_aes_setkey_enc>:
   24144:	b190      	cbz	r0, 2416c <cc_mbedtls_aes_setkey_enc+0x28>
   24146:	b1a1      	cbz	r1, 24172 <cc_mbedtls_aes_setkey_enc+0x2e>
   24148:	b510      	push	{r4, lr}
   2414a:	2a80      	cmp	r2, #128	; 0x80
   2414c:	f04f 0400 	mov.w	r4, #0
   24150:	6384      	str	r4, [r0, #56]	; 0x38
   24152:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   24156:	d106      	bne.n	24166 <cc_mbedtls_aes_setkey_enc+0x22>
   24158:	2210      	movs	r2, #16
   2415a:	6304      	str	r4, [r0, #48]	; 0x30
   2415c:	4410      	add	r0, r2
   2415e:	f7ff fc2f 	bl	239c0 <CC_PalMemCopyPlat>
   24162:	4620      	mov	r0, r4
   24164:	bd10      	pop	{r4, pc}
   24166:	f06f 001f 	mvn.w	r0, #31
   2416a:	bd10      	pop	{r4, pc}
   2416c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   24170:	4770      	bx	lr
   24172:	f06f 001f 	mvn.w	r0, #31
   24176:	4770      	bx	lr

00024178 <cc_mbedtls_aes_crypt_ecb>:
   24178:	b328      	cbz	r0, 241c6 <cc_mbedtls_aes_crypt_ecb+0x4e>
   2417a:	b322      	cbz	r2, 241c6 <cc_mbedtls_aes_crypt_ecb+0x4e>
   2417c:	b31b      	cbz	r3, 241c6 <cc_mbedtls_aes_crypt_ecb+0x4e>
   2417e:	2901      	cmp	r1, #1
   24180:	d821      	bhi.n	241c6 <cc_mbedtls_aes_crypt_ecb+0x4e>
   24182:	b570      	push	{r4, r5, r6, lr}
   24184:	4604      	mov	r4, r0
   24186:	6b81      	ldr	r1, [r0, #56]	; 0x38
   24188:	b086      	sub	sp, #24
   2418a:	d017      	beq.n	241bc <cc_mbedtls_aes_crypt_ecb+0x44>
   2418c:	2901      	cmp	r1, #1
   2418e:	d117      	bne.n	241c0 <cc_mbedtls_aes_crypt_ecb+0x48>
   24190:	2510      	movs	r5, #16
   24192:	2100      	movs	r1, #0
   24194:	eb0d 0605 	add.w	r6, sp, r5
   24198:	6361      	str	r1, [r4, #52]	; 0x34
   2419a:	4610      	mov	r0, r2
   2419c:	9500      	str	r5, [sp, #0]
   2419e:	9601      	str	r6, [sp, #4]
   241a0:	aa02      	add	r2, sp, #8
   241a2:	4629      	mov	r1, r5
   241a4:	f000 faca 	bl	2473c <SetDataBuffersInfo>
   241a8:	b950      	cbnz	r0, 241c0 <cc_mbedtls_aes_crypt_ecb+0x48>
   241aa:	462b      	mov	r3, r5
   241ac:	4632      	mov	r2, r6
   241ae:	a902      	add	r1, sp, #8
   241b0:	4620      	mov	r0, r4
   241b2:	f000 fd4b 	bl	24c4c <ProcessAesDrv>
   241b6:	b918      	cbnz	r0, 241c0 <cc_mbedtls_aes_crypt_ecb+0x48>
   241b8:	b006      	add	sp, #24
   241ba:	bd70      	pop	{r4, r5, r6, pc}
   241bc:	2900      	cmp	r1, #0
   241be:	d0e7      	beq.n	24190 <cc_mbedtls_aes_crypt_ecb+0x18>
   241c0:	f06f 0021 	mvn.w	r0, #33	; 0x21
   241c4:	e7f8      	b.n	241b8 <cc_mbedtls_aes_crypt_ecb+0x40>
   241c6:	f06f 0021 	mvn.w	r0, #33	; 0x21
   241ca:	4770      	bx	lr

000241cc <cc_mbedtls_sha256_init>:
   241cc:	b510      	push	{r4, lr}
   241ce:	4604      	mov	r4, r0
   241d0:	b128      	cbz	r0, 241de <cc_mbedtls_sha256_init+0x12>
   241d2:	4620      	mov	r0, r4
   241d4:	21f4      	movs	r1, #244	; 0xf4
   241d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   241da:	f7ff bbf5 	b.w	239c8 <CC_PalMemSetZeroPlat>
   241de:	4804      	ldr	r0, [pc, #16]	; (241f0 <cc_mbedtls_sha256_init+0x24>)
   241e0:	f7fe fcaa 	bl	22b38 <CC_PalAbort>
   241e4:	4620      	mov	r0, r4
   241e6:	21f4      	movs	r1, #244	; 0xf4
   241e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   241ec:	f7ff bbec 	b.w	239c8 <CC_PalMemSetZeroPlat>
   241f0:	0002baf0 	.word	0x0002baf0

000241f4 <cc_mbedtls_sha256_free>:
   241f4:	b110      	cbz	r0, 241fc <cc_mbedtls_sha256_free+0x8>
   241f6:	21f4      	movs	r1, #244	; 0xf4
   241f8:	f7fe bd9c 	b.w	22d34 <mbedtls_zeroize_internal>
   241fc:	4770      	bx	lr
   241fe:	bf00      	nop

00024200 <cc_mbedtls_sha256_starts>:
   24200:	b508      	push	{r3, lr}
   24202:	b161      	cbz	r1, 2421e <cc_mbedtls_sha256_starts+0x1e>
   24204:	2901      	cmp	r1, #1
   24206:	d107      	bne.n	24218 <cc_mbedtls_sha256_starts+0x18>
   24208:	2102      	movs	r1, #2
   2420a:	f000 f85b 	bl	242c4 <mbedtls_sha_starts_internal>
   2420e:	2800      	cmp	r0, #0
   24210:	bf18      	it	ne
   24212:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   24216:	bd08      	pop	{r3, pc}
   24218:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2421c:	bd08      	pop	{r3, pc}
   2421e:	2101      	movs	r1, #1
   24220:	f000 f850 	bl	242c4 <mbedtls_sha_starts_internal>
   24224:	e7f3      	b.n	2420e <cc_mbedtls_sha256_starts+0xe>
   24226:	bf00      	nop

00024228 <cc_mbedtls_sha256_update>:
   24228:	b530      	push	{r4, r5, lr}
   2422a:	4605      	mov	r5, r0
   2422c:	1888      	adds	r0, r1, r2
   2422e:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   24232:	b0a1      	sub	sp, #132	; 0x84
   24234:	460b      	mov	r3, r1
   24236:	4614      	mov	r4, r2
   24238:	d801      	bhi.n	2423e <cc_mbedtls_sha256_update+0x16>
   2423a:	2a80      	cmp	r2, #128	; 0x80
   2423c:	d90c      	bls.n	24258 <cc_mbedtls_sha256_update+0x30>
   2423e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   24242:	d917      	bls.n	24274 <cc_mbedtls_sha256_update+0x4c>
   24244:	4622      	mov	r2, r4
   24246:	4619      	mov	r1, r3
   24248:	4628      	mov	r0, r5
   2424a:	f000 f87d 	bl	24348 <mbedtls_sha_update_internal>
   2424e:	4604      	mov	r4, r0
   24250:	b984      	cbnz	r4, 24274 <cc_mbedtls_sha256_update+0x4c>
   24252:	4620      	mov	r0, r4
   24254:	b021      	add	sp, #132	; 0x84
   24256:	bd30      	pop	{r4, r5, pc}
   24258:	4668      	mov	r0, sp
   2425a:	f7ff fbb1 	bl	239c0 <CC_PalMemCopyPlat>
   2425e:	4622      	mov	r2, r4
   24260:	4669      	mov	r1, sp
   24262:	4628      	mov	r0, r5
   24264:	f000 f870 	bl	24348 <mbedtls_sha_update_internal>
   24268:	2180      	movs	r1, #128	; 0x80
   2426a:	4604      	mov	r4, r0
   2426c:	4668      	mov	r0, sp
   2426e:	f7ff fbab 	bl	239c8 <CC_PalMemSetZeroPlat>
   24272:	e7ed      	b.n	24250 <cc_mbedtls_sha256_update+0x28>
   24274:	f06f 0436 	mvn.w	r4, #54	; 0x36
   24278:	e7eb      	b.n	24252 <cc_mbedtls_sha256_update+0x2a>
   2427a:	bf00      	nop

0002427c <cc_mbedtls_sha256_finish>:
   2427c:	b570      	push	{r4, r5, r6, lr}
   2427e:	b1e8      	cbz	r0, 242bc <cc_mbedtls_sha256_finish+0x40>
   24280:	460e      	mov	r6, r1
   24282:	b1d9      	cbz	r1, 242bc <cc_mbedtls_sha256_finish+0x40>
   24284:	4604      	mov	r4, r0
   24286:	f000 f831 	bl	242ec <mbedtls_sha_finish_internal>
   2428a:	4605      	mov	r5, r0
   2428c:	b9b0      	cbnz	r0, 242bc <cc_mbedtls_sha256_finish+0x40>
   2428e:	6823      	ldr	r3, [r4, #0]
   24290:	2b01      	cmp	r3, #1
   24292:	d00b      	beq.n	242ac <cc_mbedtls_sha256_finish+0x30>
   24294:	2b02      	cmp	r3, #2
   24296:	d001      	beq.n	2429c <cc_mbedtls_sha256_finish+0x20>
   24298:	4628      	mov	r0, r5
   2429a:	bd70      	pop	{r4, r5, r6, pc}
   2429c:	221c      	movs	r2, #28
   2429e:	f104 0108 	add.w	r1, r4, #8
   242a2:	4630      	mov	r0, r6
   242a4:	f7ff fb8c 	bl	239c0 <CC_PalMemCopyPlat>
   242a8:	4628      	mov	r0, r5
   242aa:	bd70      	pop	{r4, r5, r6, pc}
   242ac:	2220      	movs	r2, #32
   242ae:	f104 0108 	add.w	r1, r4, #8
   242b2:	4630      	mov	r0, r6
   242b4:	f7ff fb84 	bl	239c0 <CC_PalMemCopyPlat>
   242b8:	4628      	mov	r0, r5
   242ba:	bd70      	pop	{r4, r5, r6, pc}
   242bc:	f06f 0536 	mvn.w	r5, #54	; 0x36
   242c0:	e7ea      	b.n	24298 <cc_mbedtls_sha256_finish+0x1c>
   242c2:	bf00      	nop

000242c4 <mbedtls_sha_starts_internal>:
   242c4:	b178      	cbz	r0, 242e6 <mbedtls_sha_starts_internal+0x22>
   242c6:	b538      	push	{r3, r4, r5, lr}
   242c8:	4604      	mov	r4, r0
   242ca:	460d      	mov	r5, r1
   242cc:	21f0      	movs	r1, #240	; 0xf0
   242ce:	f7ff fb7b 	bl	239c8 <CC_PalMemSetZeroPlat>
   242d2:	2340      	movs	r3, #64	; 0x40
   242d4:	6025      	str	r5, [r4, #0]
   242d6:	65e3      	str	r3, [r4, #92]	; 0x5c
   242d8:	4620      	mov	r0, r4
   242da:	f000 fa63 	bl	247a4 <InitHashDrv>
   242de:	3800      	subs	r0, #0
   242e0:	bf18      	it	ne
   242e2:	2001      	movne	r0, #1
   242e4:	bd38      	pop	{r3, r4, r5, pc}
   242e6:	2001      	movs	r0, #1
   242e8:	4770      	bx	lr
   242ea:	bf00      	nop

000242ec <mbedtls_sha_finish_internal>:
   242ec:	b570      	push	{r4, r5, r6, lr}
   242ee:	6e05      	ldr	r5, [r0, #96]	; 0x60
   242f0:	b0a4      	sub	sp, #144	; 0x90
   242f2:	4604      	mov	r4, r0
   242f4:	ae04      	add	r6, sp, #16
   242f6:	b9e5      	cbnz	r5, 24332 <mbedtls_sha_finish_internal+0x46>
   242f8:	2201      	movs	r2, #1
   242fa:	2300      	movs	r3, #0
   242fc:	6062      	str	r2, [r4, #4]
   242fe:	4630      	mov	r0, r6
   24300:	e9cd 3300 	strd	r3, r3, [sp]
   24304:	aa02      	add	r2, sp, #8
   24306:	4629      	mov	r1, r5
   24308:	f000 fa18 	bl	2473c <SetDataBuffersInfo>
   2430c:	b110      	cbz	r0, 24314 <mbedtls_sha_finish_internal+0x28>
   2430e:	2001      	movs	r0, #1
   24310:	b024      	add	sp, #144	; 0x90
   24312:	bd70      	pop	{r4, r5, r6, pc}
   24314:	462a      	mov	r2, r5
   24316:	a902      	add	r1, sp, #8
   24318:	4620      	mov	r0, r4
   2431a:	f000 fa6d 	bl	247f8 <ProcessHashDrv>
   2431e:	2800      	cmp	r0, #0
   24320:	d1f5      	bne.n	2430e <mbedtls_sha_finish_internal+0x22>
   24322:	4620      	mov	r0, r4
   24324:	f000 fb7e 	bl	24a24 <FinishHashDrv>
   24328:	2800      	cmp	r0, #0
   2432a:	d1f0      	bne.n	2430e <mbedtls_sha_finish_internal+0x22>
   2432c:	6620      	str	r0, [r4, #96]	; 0x60
   2432e:	b024      	add	sp, #144	; 0x90
   24330:	bd70      	pop	{r4, r5, r6, pc}
   24332:	2d80      	cmp	r5, #128	; 0x80
   24334:	462a      	mov	r2, r5
   24336:	f100 0164 	add.w	r1, r0, #100	; 0x64
   2433a:	bf28      	it	cs
   2433c:	2280      	movcs	r2, #128	; 0x80
   2433e:	4630      	mov	r0, r6
   24340:	f7ff fb3e 	bl	239c0 <CC_PalMemCopyPlat>
   24344:	6e25      	ldr	r5, [r4, #96]	; 0x60
   24346:	e7d7      	b.n	242f8 <mbedtls_sha_finish_internal+0xc>

00024348 <mbedtls_sha_update_internal>:
   24348:	2800      	cmp	r0, #0
   2434a:	f000 80cd 	beq.w	244e8 <mbedtls_sha_update_internal+0x1a0>
   2434e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24352:	4615      	mov	r5, r2
   24354:	b0a5      	sub	sp, #148	; 0x94
   24356:	2a00      	cmp	r2, #0
   24358:	f000 80b4 	beq.w	244c4 <mbedtls_sha_update_internal+0x17c>
   2435c:	460f      	mov	r7, r1
   2435e:	2900      	cmp	r1, #0
   24360:	f000 80ac 	beq.w	244bc <mbedtls_sha_update_internal+0x174>
   24364:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   24368:	4606      	mov	r6, r0
   2436a:	6e00      	ldr	r0, [r0, #96]	; 0x60
   2436c:	d37d      	bcc.n	2446a <mbedtls_sha_update_internal+0x122>
   2436e:	f64f 78ff 	movw	r8, #65535	; 0xffff
   24372:	f106 0964 	add.w	r9, r6, #100	; 0x64
   24376:	e014      	b.n	243a2 <mbedtls_sha_update_internal+0x5a>
   24378:	4283      	cmp	r3, r0
   2437a:	46ba      	mov	sl, r7
   2437c:	f64f 74ff 	movw	r4, #65535	; 0xffff
   24380:	d029      	beq.n	243d6 <mbedtls_sha_update_internal+0x8e>
   24382:	fbb4 fbf3 	udiv	fp, r4, r3
   24386:	fb03 fb0b 	mul.w	fp, r3, fp
   2438a:	f1bb 0f00 	cmp.w	fp, #0
   2438e:	d144      	bne.n	2441a <mbedtls_sha_update_internal+0xd2>
   24390:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   24394:	4447      	add	r7, r8
   24396:	3dff      	subs	r5, #255	; 0xff
   24398:	2c00      	cmp	r4, #0
   2439a:	d159      	bne.n	24450 <mbedtls_sha_update_internal+0x108>
   2439c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   243a0:	d363      	bcc.n	2446a <mbedtls_sha_update_internal+0x122>
   243a2:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   243a4:	1a1c      	subs	r4, r3, r0
   243a6:	fbb4 f2f3 	udiv	r2, r4, r3
   243aa:	fb03 4412 	mls	r4, r3, r2, r4
   243ae:	2c00      	cmp	r4, #0
   243b0:	d0e2      	beq.n	24378 <mbedtls_sha_update_internal+0x30>
   243b2:	4544      	cmp	r4, r8
   243b4:	bf28      	it	cs
   243b6:	4644      	movcs	r4, r8
   243b8:	4622      	mov	r2, r4
   243ba:	4448      	add	r0, r9
   243bc:	4639      	mov	r1, r7
   243be:	f7ff faff 	bl	239c0 <CC_PalMemCopyPlat>
   243c2:	6e30      	ldr	r0, [r6, #96]	; 0x60
   243c4:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   243c6:	4420      	add	r0, r4
   243c8:	4283      	cmp	r3, r0
   243ca:	eb07 0a04 	add.w	sl, r7, r4
   243ce:	6630      	str	r0, [r6, #96]	; 0x60
   243d0:	eba8 0404 	sub.w	r4, r8, r4
   243d4:	d1d5      	bne.n	24382 <mbedtls_sha_update_internal+0x3a>
   243d6:	2b80      	cmp	r3, #128	; 0x80
   243d8:	bf28      	it	cs
   243da:	2380      	movcs	r3, #128	; 0x80
   243dc:	461a      	mov	r2, r3
   243de:	4649      	mov	r1, r9
   243e0:	a804      	add	r0, sp, #16
   243e2:	f7ff faed 	bl	239c0 <CC_PalMemCopyPlat>
   243e6:	2300      	movs	r3, #0
   243e8:	e9cd 3300 	strd	r3, r3, [sp]
   243ec:	aa02      	add	r2, sp, #8
   243ee:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   243f0:	a804      	add	r0, sp, #16
   243f2:	f000 f9a3 	bl	2473c <SetDataBuffersInfo>
   243f6:	2800      	cmp	r0, #0
   243f8:	d160      	bne.n	244bc <mbedtls_sha_update_internal+0x174>
   243fa:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   243fc:	a902      	add	r1, sp, #8
   243fe:	4630      	mov	r0, r6
   24400:	f000 f9fa 	bl	247f8 <ProcessHashDrv>
   24404:	2800      	cmp	r0, #0
   24406:	d159      	bne.n	244bc <mbedtls_sha_update_internal+0x174>
   24408:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   2440a:	fbb4 fbf3 	udiv	fp, r4, r3
   2440e:	fb03 fb0b 	mul.w	fp, r3, fp
   24412:	6630      	str	r0, [r6, #96]	; 0x60
   24414:	f1bb 0f00 	cmp.w	fp, #0
   24418:	d0ba      	beq.n	24390 <mbedtls_sha_update_internal+0x48>
   2441a:	2300      	movs	r3, #0
   2441c:	e9cd 3300 	strd	r3, r3, [sp]
   24420:	aa02      	add	r2, sp, #8
   24422:	4659      	mov	r1, fp
   24424:	4650      	mov	r0, sl
   24426:	f000 f989 	bl	2473c <SetDataBuffersInfo>
   2442a:	2800      	cmp	r0, #0
   2442c:	d146      	bne.n	244bc <mbedtls_sha_update_internal+0x174>
   2442e:	a902      	add	r1, sp, #8
   24430:	465a      	mov	r2, fp
   24432:	4630      	mov	r0, r6
   24434:	f000 f9e0 	bl	247f8 <ProcessHashDrv>
   24438:	2800      	cmp	r0, #0
   2443a:	d13f      	bne.n	244bc <mbedtls_sha_update_internal+0x174>
   2443c:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   24440:	eba4 040b 	sub.w	r4, r4, fp
   24444:	6e30      	ldr	r0, [r6, #96]	; 0x60
   24446:	44da      	add	sl, fp
   24448:	4447      	add	r7, r8
   2444a:	3dff      	subs	r5, #255	; 0xff
   2444c:	2c00      	cmp	r4, #0
   2444e:	d0a5      	beq.n	2439c <mbedtls_sha_update_internal+0x54>
   24450:	3019      	adds	r0, #25
   24452:	4651      	mov	r1, sl
   24454:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   24458:	4622      	mov	r2, r4
   2445a:	f7ff fab1 	bl	239c0 <CC_PalMemCopyPlat>
   2445e:	6e30      	ldr	r0, [r6, #96]	; 0x60
   24460:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   24464:	4420      	add	r0, r4
   24466:	6630      	str	r0, [r6, #96]	; 0x60
   24468:	d29b      	bcs.n	243a2 <mbedtls_sha_update_internal+0x5a>
   2446a:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   2446c:	1a14      	subs	r4, r2, r0
   2446e:	fbb4 f3f2 	udiv	r3, r4, r2
   24472:	fb02 4413 	mls	r4, r2, r3, r4
   24476:	42ac      	cmp	r4, r5
   24478:	bf28      	it	cs
   2447a:	462c      	movcs	r4, r5
   2447c:	bb34      	cbnz	r4, 244cc <mbedtls_sha_update_internal+0x184>
   2447e:	4290      	cmp	r0, r2
   24480:	d034      	beq.n	244ec <mbedtls_sha_update_internal+0x1a4>
   24482:	fbb5 f4f2 	udiv	r4, r5, r2
   24486:	fb02 f404 	mul.w	r4, r2, r4
   2448a:	b96c      	cbnz	r4, 244a8 <mbedtls_sha_update_internal+0x160>
   2448c:	b1d5      	cbz	r5, 244c4 <mbedtls_sha_update_internal+0x17c>
   2448e:	6e33      	ldr	r3, [r6, #96]	; 0x60
   24490:	3319      	adds	r3, #25
   24492:	eb06 0083 	add.w	r0, r6, r3, lsl #2
   24496:	462a      	mov	r2, r5
   24498:	4639      	mov	r1, r7
   2449a:	f7ff fa91 	bl	239c0 <CC_PalMemCopyPlat>
   2449e:	6e33      	ldr	r3, [r6, #96]	; 0x60
   244a0:	442b      	add	r3, r5
   244a2:	2000      	movs	r0, #0
   244a4:	6633      	str	r3, [r6, #96]	; 0x60
   244a6:	e00a      	b.n	244be <mbedtls_sha_update_internal+0x176>
   244a8:	2300      	movs	r3, #0
   244aa:	e9cd 3300 	strd	r3, r3, [sp]
   244ae:	aa02      	add	r2, sp, #8
   244b0:	4621      	mov	r1, r4
   244b2:	4638      	mov	r0, r7
   244b4:	f000 f942 	bl	2473c <SetDataBuffersInfo>
   244b8:	2800      	cmp	r0, #0
   244ba:	d033      	beq.n	24524 <mbedtls_sha_update_internal+0x1dc>
   244bc:	2001      	movs	r0, #1
   244be:	b025      	add	sp, #148	; 0x94
   244c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   244c4:	4628      	mov	r0, r5
   244c6:	b025      	add	sp, #148	; 0x94
   244c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   244cc:	f106 0364 	add.w	r3, r6, #100	; 0x64
   244d0:	4639      	mov	r1, r7
   244d2:	4622      	mov	r2, r4
   244d4:	4418      	add	r0, r3
   244d6:	f7ff fa73 	bl	239c0 <CC_PalMemCopyPlat>
   244da:	6e30      	ldr	r0, [r6, #96]	; 0x60
   244dc:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   244de:	4420      	add	r0, r4
   244e0:	1b2d      	subs	r5, r5, r4
   244e2:	4427      	add	r7, r4
   244e4:	6630      	str	r0, [r6, #96]	; 0x60
   244e6:	e7ca      	b.n	2447e <mbedtls_sha_update_internal+0x136>
   244e8:	2001      	movs	r0, #1
   244ea:	4770      	bx	lr
   244ec:	2a80      	cmp	r2, #128	; 0x80
   244ee:	bf28      	it	cs
   244f0:	2280      	movcs	r2, #128	; 0x80
   244f2:	f106 0164 	add.w	r1, r6, #100	; 0x64
   244f6:	a804      	add	r0, sp, #16
   244f8:	f7ff fa62 	bl	239c0 <CC_PalMemCopyPlat>
   244fc:	2300      	movs	r3, #0
   244fe:	e9cd 3300 	strd	r3, r3, [sp]
   24502:	a804      	add	r0, sp, #16
   24504:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   24506:	aa02      	add	r2, sp, #8
   24508:	f000 f918 	bl	2473c <SetDataBuffersInfo>
   2450c:	2800      	cmp	r0, #0
   2450e:	d1d5      	bne.n	244bc <mbedtls_sha_update_internal+0x174>
   24510:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   24512:	a902      	add	r1, sp, #8
   24514:	4630      	mov	r0, r6
   24516:	f000 f96f 	bl	247f8 <ProcessHashDrv>
   2451a:	2800      	cmp	r0, #0
   2451c:	d1ce      	bne.n	244bc <mbedtls_sha_update_internal+0x174>
   2451e:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   24520:	6630      	str	r0, [r6, #96]	; 0x60
   24522:	e7ae      	b.n	24482 <mbedtls_sha_update_internal+0x13a>
   24524:	a902      	add	r1, sp, #8
   24526:	4622      	mov	r2, r4
   24528:	4630      	mov	r0, r6
   2452a:	f000 f965 	bl	247f8 <ProcessHashDrv>
   2452e:	2800      	cmp	r0, #0
   24530:	d1c4      	bne.n	244bc <mbedtls_sha_update_internal+0x174>
   24532:	4427      	add	r7, r4
   24534:	1b2d      	subs	r5, r5, r4
   24536:	e7a9      	b.n	2448c <mbedtls_sha_update_internal+0x144>

00024538 <cc_mbedtls_sha256>:
   24538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2453a:	461c      	mov	r4, r3
   2453c:	4605      	mov	r5, r0
   2453e:	4811      	ldr	r0, [pc, #68]	; (24584 <cc_mbedtls_sha256+0x4c>)
   24540:	460e      	mov	r6, r1
   24542:	4617      	mov	r7, r2
   24544:	f7ff fe42 	bl	241cc <cc_mbedtls_sha256_init>
   24548:	4621      	mov	r1, r4
   2454a:	480e      	ldr	r0, [pc, #56]	; (24584 <cc_mbedtls_sha256+0x4c>)
   2454c:	f7ff fe58 	bl	24200 <cc_mbedtls_sha256_starts>
   24550:	4604      	mov	r4, r0
   24552:	b120      	cbz	r0, 2455e <cc_mbedtls_sha256+0x26>
   24554:	480b      	ldr	r0, [pc, #44]	; (24584 <cc_mbedtls_sha256+0x4c>)
   24556:	f7ff fe4d 	bl	241f4 <cc_mbedtls_sha256_free>
   2455a:	4620      	mov	r0, r4
   2455c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2455e:	4809      	ldr	r0, [pc, #36]	; (24584 <cc_mbedtls_sha256+0x4c>)
   24560:	4632      	mov	r2, r6
   24562:	4629      	mov	r1, r5
   24564:	f7ff fe60 	bl	24228 <cc_mbedtls_sha256_update>
   24568:	4604      	mov	r4, r0
   2456a:	2800      	cmp	r0, #0
   2456c:	d1f2      	bne.n	24554 <cc_mbedtls_sha256+0x1c>
   2456e:	4639      	mov	r1, r7
   24570:	4804      	ldr	r0, [pc, #16]	; (24584 <cc_mbedtls_sha256+0x4c>)
   24572:	f7ff fe83 	bl	2427c <cc_mbedtls_sha256_finish>
   24576:	4604      	mov	r4, r0
   24578:	4802      	ldr	r0, [pc, #8]	; (24584 <cc_mbedtls_sha256+0x4c>)
   2457a:	f7ff fe3b 	bl	241f4 <cc_mbedtls_sha256_free>
   2457e:	4620      	mov	r0, r4
   24580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24582:	bf00      	nop
   24584:	200039a0 	.word	0x200039a0

00024588 <RNG_PLAT_SetUserRngParameters>:
   24588:	b530      	push	{r4, r5, lr}
   2458a:	b083      	sub	sp, #12
   2458c:	231c      	movs	r3, #28
   2458e:	a901      	add	r1, sp, #4
   24590:	4604      	mov	r4, r0
   24592:	9301      	str	r3, [sp, #4]
   24594:	f000 f834 	bl	24600 <CC_PalTrngParamGet>
   24598:	4605      	mov	r5, r0
   2459a:	b938      	cbnz	r0, 245ac <RNG_PLAT_SetUserRngParameters+0x24>
   2459c:	9b01      	ldr	r3, [sp, #4]
   2459e:	2b1c      	cmp	r3, #28
   245a0:	d007      	beq.n	245b2 <RNG_PLAT_SetUserRngParameters+0x2a>
   245a2:	4d15      	ldr	r5, [pc, #84]	; (245f8 <RNG_PLAT_SetUserRngParameters+0x70>)
   245a4:	211c      	movs	r1, #28
   245a6:	4620      	mov	r0, r4
   245a8:	f7ff fa0e 	bl	239c8 <CC_PalMemSetZeroPlat>
   245ac:	4628      	mov	r0, r5
   245ae:	b003      	add	sp, #12
   245b0:	bd30      	pop	{r4, r5, pc}
   245b2:	e9d4 3200 	ldrd	r3, r2, [r4]
   245b6:	2101      	movs	r1, #1
   245b8:	3b00      	subs	r3, #0
   245ba:	61e1      	str	r1, [r4, #28]
   245bc:	bf18      	it	ne
   245be:	2301      	movne	r3, #1
   245c0:	b10a      	cbz	r2, 245c6 <RNG_PLAT_SetUserRngParameters+0x3e>
   245c2:	f043 0302 	orr.w	r3, r3, #2
   245c6:	68a2      	ldr	r2, [r4, #8]
   245c8:	b932      	cbnz	r2, 245d8 <RNG_PLAT_SetUserRngParameters+0x50>
   245ca:	68e2      	ldr	r2, [r4, #12]
   245cc:	b942      	cbnz	r2, 245e0 <RNG_PLAT_SetUserRngParameters+0x58>
   245ce:	e9c4 3208 	strd	r3, r2, [r4, #32]
   245d2:	b97b      	cbnz	r3, 245f4 <RNG_PLAT_SetUserRngParameters+0x6c>
   245d4:	4d09      	ldr	r5, [pc, #36]	; (245fc <RNG_PLAT_SetUserRngParameters+0x74>)
   245d6:	e7e5      	b.n	245a4 <RNG_PLAT_SetUserRngParameters+0x1c>
   245d8:	68e2      	ldr	r2, [r4, #12]
   245da:	f043 0304 	orr.w	r3, r3, #4
   245de:	b13a      	cbz	r2, 245f0 <RNG_PLAT_SetUserRngParameters+0x68>
   245e0:	f043 0308 	orr.w	r3, r3, #8
   245e4:	2200      	movs	r2, #0
   245e6:	4628      	mov	r0, r5
   245e8:	e9c4 3208 	strd	r3, r2, [r4, #32]
   245ec:	b003      	add	sp, #12
   245ee:	bd30      	pop	{r4, r5, pc}
   245f0:	e9c4 3208 	strd	r3, r2, [r4, #32]
   245f4:	4615      	mov	r5, r2
   245f6:	e7d9      	b.n	245ac <RNG_PLAT_SetUserRngParameters+0x24>
   245f8:	00f00c37 	.word	0x00f00c37
   245fc:	00f00c0e 	.word	0x00f00c0e

00024600 <CC_PalTrngParamGet>:
   24600:	b118      	cbz	r0, 2460a <CC_PalTrngParamGet+0xa>
   24602:	b111      	cbz	r1, 2460a <CC_PalTrngParamGet+0xa>
   24604:	680b      	ldr	r3, [r1, #0]
   24606:	2b1c      	cmp	r3, #28
   24608:	d001      	beq.n	2460e <CC_PalTrngParamGet+0xe>
   2460a:	2001      	movs	r0, #1
   2460c:	4770      	bx	lr
   2460e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24612:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   24616:	3201      	adds	r2, #1
   24618:	bf14      	ite	ne
   2461a:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   2461e:	f241 225c 	movweq	r2, #4700	; 0x125c
   24622:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24626:	6002      	str	r2, [r0, #0]
   24628:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   2462c:	3201      	adds	r2, #1
   2462e:	bf14      	ite	ne
   24630:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   24634:	f641 1264 	movweq	r2, #6500	; 0x1964
   24638:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2463c:	6042      	str	r2, [r0, #4]
   2463e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   24642:	3201      	adds	r2, #1
   24644:	bf14      	ite	ne
   24646:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   2464a:	f640 62d8 	movweq	r2, #3800	; 0xed8
   2464e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24652:	6082      	str	r2, [r0, #8]
   24654:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   24658:	3201      	adds	r2, #1
   2465a:	bf14      	ite	ne
   2465c:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   24660:	f241 3288 	movweq	r2, #5000	; 0x1388
   24664:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24668:	60c2      	str	r2, [r0, #12]
   2466a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   2466e:	3201      	adds	r2, #1
   24670:	bf14      	ite	ne
   24672:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   24676:	2290      	moveq	r2, #144	; 0x90
   24678:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2467c:	6102      	str	r2, [r0, #16]
   2467e:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   24682:	3201      	adds	r2, #1
   24684:	bf14      	ite	ne
   24686:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   2468a:	2251      	moveq	r2, #81	; 0x51
   2468c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24690:	6142      	str	r2, [r0, #20]
   24692:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   24696:	3201      	adds	r2, #1
   24698:	bf14      	ite	ne
   2469a:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   2469e:	f240 3337 	movweq	r3, #823	; 0x337
   246a2:	6183      	str	r3, [r0, #24]
   246a4:	2000      	movs	r0, #0
   246a6:	4770      	bx	lr

000246a8 <LLF_RND_WaitRngInterrupt>:
   246a8:	b508      	push	{r3, lr}
   246aa:	4601      	mov	r1, r0
   246ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
   246b0:	f7ff f912 	bl	238d8 <CC_HalWaitInterruptRND>
   246b4:	4b03      	ldr	r3, [pc, #12]	; (246c4 <LLF_RND_WaitRngInterrupt+0x1c>)
   246b6:	2200      	movs	r2, #0
   246b8:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   246bc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   246c0:	bd08      	pop	{r3, pc}
   246c2:	bf00      	nop
   246c4:	5002b000 	.word	0x5002b000

000246c8 <LLF_RND_GetRoscSampleCnt>:
   246c8:	3801      	subs	r0, #1
   246ca:	2807      	cmp	r0, #7
   246cc:	d805      	bhi.n	246da <LLF_RND_GetRoscSampleCnt+0x12>
   246ce:	e8df f000 	tbb	[pc, r0]
   246d2:	0e12      	.short	0x0e12
   246d4:	04040a04 	.word	0x04040a04
   246d8:	0604      	.short	0x0604
   246da:	4809      	ldr	r0, [pc, #36]	; (24700 <LLF_RND_GetRoscSampleCnt+0x38>)
   246dc:	4770      	bx	lr
   246de:	68cb      	ldr	r3, [r1, #12]
   246e0:	624b      	str	r3, [r1, #36]	; 0x24
   246e2:	2000      	movs	r0, #0
   246e4:	4770      	bx	lr
   246e6:	688b      	ldr	r3, [r1, #8]
   246e8:	624b      	str	r3, [r1, #36]	; 0x24
   246ea:	2000      	movs	r0, #0
   246ec:	4770      	bx	lr
   246ee:	684b      	ldr	r3, [r1, #4]
   246f0:	624b      	str	r3, [r1, #36]	; 0x24
   246f2:	2000      	movs	r0, #0
   246f4:	4770      	bx	lr
   246f6:	680b      	ldr	r3, [r1, #0]
   246f8:	624b      	str	r3, [r1, #36]	; 0x24
   246fa:	2000      	movs	r0, #0
   246fc:	4770      	bx	lr
   246fe:	bf00      	nop
   24700:	00f10c31 	.word	0x00f10c31

00024704 <LLF_RND_GetFastestRosc>:
   24704:	680b      	ldr	r3, [r1, #0]
   24706:	e002      	b.n	2470e <LLF_RND_GetFastestRosc+0xa>
   24708:	2b08      	cmp	r3, #8
   2470a:	600b      	str	r3, [r1, #0]
   2470c:	d806      	bhi.n	2471c <LLF_RND_GetFastestRosc+0x18>
   2470e:	6a02      	ldr	r2, [r0, #32]
   24710:	4213      	tst	r3, r2
   24712:	ea4f 0343 	mov.w	r3, r3, lsl #1
   24716:	d0f7      	beq.n	24708 <LLF_RND_GetFastestRosc+0x4>
   24718:	2000      	movs	r0, #0
   2471a:	4770      	bx	lr
   2471c:	4800      	ldr	r0, [pc, #0]	; (24720 <LLF_RND_GetFastestRosc+0x1c>)
   2471e:	4770      	bx	lr
   24720:	00f10c31 	.word	0x00f10c31

00024724 <LLF_RND_TurnOffTrng>:
   24724:	4b04      	ldr	r3, [pc, #16]	; (24738 <LLF_RND_TurnOffTrng+0x14>)
   24726:	2200      	movs	r2, #0
   24728:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   2472c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   24730:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   24734:	f7ff b8b6 	b.w	238a4 <CC_HalClearInterruptBit>
   24738:	5002b000 	.word	0x5002b000

0002473c <SetDataBuffersInfo>:
   2473c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2473e:	b083      	sub	sp, #12
   24740:	461d      	mov	r5, r3
   24742:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   24746:	f04f 0300 	mov.w	r3, #0
   2474a:	f88d 3007 	strb.w	r3, [sp, #7]
   2474e:	d324      	bcc.n	2479a <SetDataBuffersInfo+0x5e>
   24750:	468c      	mov	ip, r1
   24752:	4484      	add	ip, r0
   24754:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   24758:	4604      	mov	r4, r0
   2475a:	d81e      	bhi.n	2479a <SetDataBuffersInfo+0x5e>
   2475c:	4617      	mov	r7, r2
   2475e:	f10d 0307 	add.w	r3, sp, #7
   24762:	2201      	movs	r2, #1
   24764:	f000 fe68 	bl	25438 <CC_PalDataBufferAttrGet>
   24768:	4606      	mov	r6, r0
   2476a:	b9b0      	cbnz	r0, 2479a <SetDataBuffersInfo+0x5e>
   2476c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2476e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24772:	603c      	str	r4, [r7, #0]
   24774:	713b      	strb	r3, [r7, #4]
   24776:	b192      	cbz	r2, 2479e <SetDataBuffersInfo+0x62>
   24778:	b14d      	cbz	r5, 2478e <SetDataBuffersInfo+0x52>
   2477a:	4602      	mov	r2, r0
   2477c:	9908      	ldr	r1, [sp, #32]
   2477e:	f10d 0307 	add.w	r3, sp, #7
   24782:	4628      	mov	r0, r5
   24784:	f000 fe58 	bl	25438 <CC_PalDataBufferAttrGet>
   24788:	b938      	cbnz	r0, 2479a <SetDataBuffersInfo+0x5e>
   2478a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2478e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24790:	4630      	mov	r0, r6
   24792:	6015      	str	r5, [r2, #0]
   24794:	7113      	strb	r3, [r2, #4]
   24796:	b003      	add	sp, #12
   24798:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2479a:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   2479e:	4630      	mov	r0, r6
   247a0:	b003      	add	sp, #12
   247a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000247a4 <InitHashDrv>:
   247a4:	b1e8      	cbz	r0, 247e2 <InitHashDrv+0x3e>
   247a6:	b510      	push	{r4, lr}
   247a8:	6804      	ldr	r4, [r0, #0]
   247aa:	2c01      	cmp	r4, #1
   247ac:	d004      	beq.n	247b8 <InitHashDrv+0x14>
   247ae:	2c02      	cmp	r4, #2
   247b0:	d010      	beq.n	247d4 <InitHashDrv+0x30>
   247b2:	b144      	cbz	r4, 247c6 <InitHashDrv+0x22>
   247b4:	480c      	ldr	r0, [pc, #48]	; (247e8 <InitHashDrv+0x44>)
   247b6:	bd10      	pop	{r4, pc}
   247b8:	490c      	ldr	r1, [pc, #48]	; (247ec <InitHashDrv+0x48>)
   247ba:	2220      	movs	r2, #32
   247bc:	3008      	adds	r0, #8
   247be:	f7ff f8ff 	bl	239c0 <CC_PalMemCopyPlat>
   247c2:	2000      	movs	r0, #0
   247c4:	bd10      	pop	{r4, pc}
   247c6:	490a      	ldr	r1, [pc, #40]	; (247f0 <InitHashDrv+0x4c>)
   247c8:	2214      	movs	r2, #20
   247ca:	3008      	adds	r0, #8
   247cc:	f7ff f8f8 	bl	239c0 <CC_PalMemCopyPlat>
   247d0:	4620      	mov	r0, r4
   247d2:	bd10      	pop	{r4, pc}
   247d4:	4907      	ldr	r1, [pc, #28]	; (247f4 <InitHashDrv+0x50>)
   247d6:	2220      	movs	r2, #32
   247d8:	3008      	adds	r0, #8
   247da:	f7ff f8f1 	bl	239c0 <CC_PalMemCopyPlat>
   247de:	2000      	movs	r0, #0
   247e0:	bd10      	pop	{r4, pc}
   247e2:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   247e6:	4770      	bx	lr
   247e8:	00f30001 	.word	0x00f30001
   247ec:	0002bb34 	.word	0x0002bb34
   247f0:	0002bb00 	.word	0x0002bb00
   247f4:	0002bb14 	.word	0x0002bb14

000247f8 <ProcessHashDrv>:
   247f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   247fc:	2900      	cmp	r1, #0
   247fe:	f000 80f9 	beq.w	249f4 <ProcessHashDrv+0x1fc>
   24802:	4604      	mov	r4, r0
   24804:	2800      	cmp	r0, #0
   24806:	f000 80f9 	beq.w	249fc <ProcessHashDrv+0x204>
   2480a:	6803      	ldr	r3, [r0, #0]
   2480c:	4690      	mov	r8, r2
   2480e:	460f      	mov	r7, r1
   24810:	2b00      	cmp	r3, #0
   24812:	f000 80c3 	beq.w	2499c <ProcessHashDrv+0x1a4>
   24816:	3b01      	subs	r3, #1
   24818:	2b01      	cmp	r3, #1
   2481a:	f200 80d7 	bhi.w	249cc <ProcessHashDrv+0x1d4>
   2481e:	4879      	ldr	r0, [pc, #484]	; (24a04 <ProcessHashDrv+0x20c>)
   24820:	f04f 31ff 	mov.w	r1, #4294967295
   24824:	f04f 0902 	mov.w	r9, #2
   24828:	f7ff f8e6 	bl	239f8 <CC_PalMutexLock>
   2482c:	2800      	cmp	r0, #0
   2482e:	f040 80bf 	bne.w	249b0 <ProcessHashDrv+0x1b8>
   24832:	2000      	movs	r0, #0
   24834:	f7ff f910 	bl	23a58 <CC_PalPowerSaveModeSelect>
   24838:	4606      	mov	r6, r0
   2483a:	2800      	cmp	r0, #0
   2483c:	f040 80c2 	bne.w	249c4 <ProcessHashDrv+0x1cc>
   24840:	4a71      	ldr	r2, [pc, #452]	; (24a08 <ProcessHashDrv+0x210>)
   24842:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   24846:	2b00      	cmp	r3, #0
   24848:	d1fb      	bne.n	24842 <ProcessHashDrv+0x4a>
   2484a:	4d6f      	ldr	r5, [pc, #444]	; (24a08 <ProcessHashDrv+0x210>)
   2484c:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   24850:	2b00      	cmp	r3, #0
   24852:	d1fb      	bne.n	2484c <ProcessHashDrv+0x54>
   24854:	f04f 30ff 	mov.w	r0, #4294967295
   24858:	f7ff f824 	bl	238a4 <CC_HalClearInterruptBit>
   2485c:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   24860:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   24864:	f7ff f82c 	bl	238c0 <CC_HalMaskInterrupt>
   24868:	2301      	movs	r3, #1
   2486a:	2207      	movs	r2, #7
   2486c:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   24870:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   24874:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   24878:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2487a:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   2487e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   24880:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   24884:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   24888:	6823      	ldr	r3, [r4, #0]
   2488a:	b15b      	cbz	r3, 248a4 <ProcessHashDrv+0xac>
   2488c:	3b01      	subs	r3, #1
   2488e:	2b01      	cmp	r3, #1
   24890:	d818      	bhi.n	248c4 <ProcessHashDrv+0xcc>
   24892:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24894:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   24898:	6a23      	ldr	r3, [r4, #32]
   2489a:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   2489e:	69e3      	ldr	r3, [r4, #28]
   248a0:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   248a4:	4b58      	ldr	r3, [pc, #352]	; (24a08 <ProcessHashDrv+0x210>)
   248a6:	69a2      	ldr	r2, [r4, #24]
   248a8:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   248ac:	6962      	ldr	r2, [r4, #20]
   248ae:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   248b2:	6922      	ldr	r2, [r4, #16]
   248b4:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   248b8:	68e2      	ldr	r2, [r4, #12]
   248ba:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   248be:	68a2      	ldr	r2, [r4, #8]
   248c0:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   248c4:	4a50      	ldr	r2, [pc, #320]	; (24a08 <ProcessHashDrv+0x210>)
   248c6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   248ca:	2b00      	cmp	r3, #0
   248cc:	d1fb      	bne.n	248c6 <ProcessHashDrv+0xce>
   248ce:	f1b8 0f00 	cmp.w	r8, #0
   248d2:	d05f      	beq.n	24994 <ProcessHashDrv+0x19c>
   248d4:	6863      	ldr	r3, [r4, #4]
   248d6:	2b01      	cmp	r3, #1
   248d8:	bf08      	it	eq
   248da:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   248de:	4b4a      	ldr	r3, [pc, #296]	; (24a08 <ProcessHashDrv+0x210>)
   248e0:	683a      	ldr	r2, [r7, #0]
   248e2:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   248e6:	2040      	movs	r0, #64	; 0x40
   248e8:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   248ec:	f7fe ffee 	bl	238cc <CC_HalWaitInterrupt>
   248f0:	4606      	mov	r6, r0
   248f2:	4a45      	ldr	r2, [pc, #276]	; (24a08 <ProcessHashDrv+0x210>)
   248f4:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   248f8:	2b00      	cmp	r3, #0
   248fa:	d1fb      	bne.n	248f4 <ProcessHashDrv+0xfc>
   248fc:	4a42      	ldr	r2, [pc, #264]	; (24a08 <ProcessHashDrv+0x210>)
   248fe:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   24902:	2b00      	cmp	r3, #0
   24904:	d1fb      	bne.n	248fe <ProcessHashDrv+0x106>
   24906:	6823      	ldr	r3, [r4, #0]
   24908:	b15b      	cbz	r3, 24922 <ProcessHashDrv+0x12a>
   2490a:	3b01      	subs	r3, #1
   2490c:	2b01      	cmp	r3, #1
   2490e:	d818      	bhi.n	24942 <ProcessHashDrv+0x14a>
   24910:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   24914:	6263      	str	r3, [r4, #36]	; 0x24
   24916:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   2491a:	6223      	str	r3, [r4, #32]
   2491c:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   24920:	61e3      	str	r3, [r4, #28]
   24922:	4b39      	ldr	r3, [pc, #228]	; (24a08 <ProcessHashDrv+0x210>)
   24924:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   24928:	61a2      	str	r2, [r4, #24]
   2492a:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   2492e:	6162      	str	r2, [r4, #20]
   24930:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   24934:	6122      	str	r2, [r4, #16]
   24936:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   2493a:	60e2      	str	r2, [r4, #12]
   2493c:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   24940:	60a3      	str	r3, [r4, #8]
   24942:	4a31      	ldr	r2, [pc, #196]	; (24a08 <ProcessHashDrv+0x210>)
   24944:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   24948:	64a1      	str	r1, [r4, #72]	; 0x48
   2494a:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   2494e:	64e1      	str	r1, [r4, #76]	; 0x4c
   24950:	2300      	movs	r3, #0
   24952:	2101      	movs	r1, #1
   24954:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   24958:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   2495c:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   24960:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   24964:	2b00      	cmp	r3, #0
   24966:	d1fb      	bne.n	24960 <ProcessHashDrv+0x168>
   24968:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   2496c:	2e00      	cmp	r6, #0
   2496e:	d13b      	bne.n	249e8 <ProcessHashDrv+0x1f0>
   24970:	4b25      	ldr	r3, [pc, #148]	; (24a08 <ProcessHashDrv+0x210>)
   24972:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   24976:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   2497a:	f7fe ffa1 	bl	238c0 <CC_HalMaskInterrupt>
   2497e:	2001      	movs	r0, #1
   24980:	f7ff f86a 	bl	23a58 <CC_PalPowerSaveModeSelect>
   24984:	bb60      	cbnz	r0, 249e0 <ProcessHashDrv+0x1e8>
   24986:	481f      	ldr	r0, [pc, #124]	; (24a04 <ProcessHashDrv+0x20c>)
   24988:	f7ff f83e 	bl	23a08 <CC_PalMutexUnlock>
   2498c:	bb10      	cbnz	r0, 249d4 <ProcessHashDrv+0x1dc>
   2498e:	4630      	mov	r0, r6
   24990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24994:	2304      	movs	r3, #4
   24996:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   2499a:	e7aa      	b.n	248f2 <ProcessHashDrv+0xfa>
   2499c:	4819      	ldr	r0, [pc, #100]	; (24a04 <ProcessHashDrv+0x20c>)
   2499e:	f04f 31ff 	mov.w	r1, #4294967295
   249a2:	f04f 0901 	mov.w	r9, #1
   249a6:	f7ff f827 	bl	239f8 <CC_PalMutexLock>
   249aa:	2800      	cmp	r0, #0
   249ac:	f43f af41 	beq.w	24832 <ProcessHashDrv+0x3a>
   249b0:	4816      	ldr	r0, [pc, #88]	; (24a0c <ProcessHashDrv+0x214>)
   249b2:	f7fe f8c1 	bl	22b38 <CC_PalAbort>
   249b6:	2000      	movs	r0, #0
   249b8:	f7ff f84e 	bl	23a58 <CC_PalPowerSaveModeSelect>
   249bc:	4606      	mov	r6, r0
   249be:	2800      	cmp	r0, #0
   249c0:	f43f af3e 	beq.w	24840 <ProcessHashDrv+0x48>
   249c4:	4812      	ldr	r0, [pc, #72]	; (24a10 <ProcessHashDrv+0x218>)
   249c6:	f7fe f8b7 	bl	22b38 <CC_PalAbort>
   249ca:	e739      	b.n	24840 <ProcessHashDrv+0x48>
   249cc:	4e11      	ldr	r6, [pc, #68]	; (24a14 <ProcessHashDrv+0x21c>)
   249ce:	4630      	mov	r0, r6
   249d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   249d4:	4810      	ldr	r0, [pc, #64]	; (24a18 <ProcessHashDrv+0x220>)
   249d6:	f7fe f8af 	bl	22b38 <CC_PalAbort>
   249da:	4630      	mov	r0, r6
   249dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   249e0:	480e      	ldr	r0, [pc, #56]	; (24a1c <ProcessHashDrv+0x224>)
   249e2:	f7fe f8a9 	bl	22b38 <CC_PalAbort>
   249e6:	e7ce      	b.n	24986 <ProcessHashDrv+0x18e>
   249e8:	2110      	movs	r1, #16
   249ea:	f104 0008 	add.w	r0, r4, #8
   249ee:	f7fe ffeb 	bl	239c8 <CC_PalMemSetZeroPlat>
   249f2:	e7bd      	b.n	24970 <ProcessHashDrv+0x178>
   249f4:	4e0a      	ldr	r6, [pc, #40]	; (24a20 <ProcessHashDrv+0x228>)
   249f6:	4630      	mov	r0, r6
   249f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   249fc:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   24a00:	e7c5      	b.n	2498e <ProcessHashDrv+0x196>
   24a02:	bf00      	nop
   24a04:	200007f8 	.word	0x200007f8
   24a08:	5002b000 	.word	0x5002b000
   24a0c:	0002ba34 	.word	0x0002ba34
   24a10:	0002ba4c 	.word	0x0002ba4c
   24a14:	00f30001 	.word	0x00f30001
   24a18:	0002ba8c 	.word	0x0002ba8c
   24a1c:	0002ba6c 	.word	0x0002ba6c
   24a20:	00f30003 	.word	0x00f30003

00024a24 <FinishHashDrv>:
   24a24:	b398      	cbz	r0, 24a8e <FinishHashDrv+0x6a>
   24a26:	b470      	push	{r4, r5, r6}
   24a28:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   24a2c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   24a30:	ba26      	rev	r6, r4
   24a32:	ba0d      	rev	r5, r1
   24a34:	ba14      	rev	r4, r2
   24a36:	ba19      	rev	r1, r3
   24a38:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   24a3c:	ba12      	rev	r2, r2
   24a3e:	e9c0 4104 	strd	r4, r1, [r0, #16]
   24a42:	6182      	str	r2, [r0, #24]
   24a44:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   24a48:	e9c0 6502 	strd	r6, r5, [r0, #8]
   24a4c:	ba1b      	rev	r3, r3
   24a4e:	ba25      	rev	r5, r4
   24a50:	e9c0 3507 	strd	r3, r5, [r0, #28]
   24a54:	ba14      	rev	r4, r2
   24a56:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   24a5a:	6a81      	ldr	r1, [r0, #40]	; 0x28
   24a5c:	ba12      	rev	r2, r2
   24a5e:	ba09      	rev	r1, r1
   24a60:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   24a64:	62c2      	str	r2, [r0, #44]	; 0x2c
   24a66:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   24a6a:	ba1b      	rev	r3, r3
   24a6c:	ba25      	rev	r5, r4
   24a6e:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   24a72:	ba14      	rev	r4, r2
   24a74:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   24a78:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   24a7a:	ba12      	rev	r2, r2
   24a7c:	ba09      	rev	r1, r1
   24a7e:	ba1b      	rev	r3, r3
   24a80:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   24a84:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   24a88:	2000      	movs	r0, #0
   24a8a:	bc70      	pop	{r4, r5, r6}
   24a8c:	4770      	bx	lr
   24a8e:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   24a92:	4770      	bx	lr

00024a94 <LoadAesKey>:
   24a94:	2800      	cmp	r0, #0
   24a96:	d046      	beq.n	24b26 <LoadAesKey+0x92>
   24a98:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   24a9c:	2b00      	cmp	r3, #0
   24a9e:	d033      	beq.n	24b08 <LoadAesKey+0x74>
   24aa0:	2b03      	cmp	r3, #3
   24aa2:	b510      	push	{r4, lr}
   24aa4:	d013      	beq.n	24ace <LoadAesKey+0x3a>
   24aa6:	4821      	ldr	r0, [pc, #132]	; (24b2c <LoadAesKey+0x98>)
   24aa8:	4c21      	ldr	r4, [pc, #132]	; (24b30 <LoadAesKey+0x9c>)
   24aaa:	6822      	ldr	r2, [r4, #0]
   24aac:	4b21      	ldr	r3, [pc, #132]	; (24b34 <LoadAesKey+0xa0>)
   24aae:	6812      	ldr	r2, [r2, #0]
   24ab0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   24ab4:	6822      	ldr	r2, [r4, #0]
   24ab6:	6852      	ldr	r2, [r2, #4]
   24ab8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   24abc:	6822      	ldr	r2, [r4, #0]
   24abe:	6892      	ldr	r2, [r2, #8]
   24ac0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   24ac4:	6822      	ldr	r2, [r4, #0]
   24ac6:	68d2      	ldr	r2, [r2, #12]
   24ac8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   24acc:	bd10      	pop	{r4, pc}
   24ace:	6b01      	ldr	r1, [r0, #48]	; 0x30
   24ad0:	6c00      	ldr	r0, [r0, #64]	; 0x40
   24ad2:	4c17      	ldr	r4, [pc, #92]	; (24b30 <LoadAesKey+0x9c>)
   24ad4:	f000 fbac 	bl	25230 <kmu_validate_kdr_slot_and_size>
   24ad8:	2800      	cmp	r0, #0
   24ada:	d1e6      	bne.n	24aaa <LoadAesKey+0x16>
   24adc:	6822      	ldr	r2, [r4, #0]
   24ade:	4b15      	ldr	r3, [pc, #84]	; (24b34 <LoadAesKey+0xa0>)
   24ae0:	6812      	ldr	r2, [r2, #0]
   24ae2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   24ae6:	6822      	ldr	r2, [r4, #0]
   24ae8:	6852      	ldr	r2, [r2, #4]
   24aea:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   24aee:	6822      	ldr	r2, [r4, #0]
   24af0:	6892      	ldr	r2, [r2, #8]
   24af2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   24af6:	6822      	ldr	r2, [r4, #0]
   24af8:	68d2      	ldr	r2, [r2, #12]
   24afa:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   24afe:	f000 fba3 	bl	25248 <kmu_use_kdr_key>
   24b02:	2800      	cmp	r0, #0
   24b04:	d1d1      	bne.n	24aaa <LoadAesKey+0x16>
   24b06:	bd10      	pop	{r4, pc}
   24b08:	4a0a      	ldr	r2, [pc, #40]	; (24b34 <LoadAesKey+0xa0>)
   24b0a:	6901      	ldr	r1, [r0, #16]
   24b0c:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   24b10:	6941      	ldr	r1, [r0, #20]
   24b12:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   24b16:	6981      	ldr	r1, [r0, #24]
   24b18:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   24b1c:	69c1      	ldr	r1, [r0, #28]
   24b1e:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   24b22:	4618      	mov	r0, r3
   24b24:	4770      	bx	lr
   24b26:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   24b2a:	4770      	bx	lr
   24b2c:	00f10009 	.word	0x00f10009
   24b30:	200007e8 	.word	0x200007e8
   24b34:	5002b000 	.word	0x5002b000

00024b38 <InitAes.part.0>:
   24b38:	4a37      	ldr	r2, [pc, #220]	; (24c18 <InitAes.part.0+0xe0>)
   24b3a:	b538      	push	{r3, r4, r5, lr}
   24b3c:	4604      	mov	r4, r0
   24b3e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   24b42:	2b00      	cmp	r3, #0
   24b44:	d1fb      	bne.n	24b3e <InitAes.part.0+0x6>
   24b46:	4a34      	ldr	r2, [pc, #208]	; (24c18 <InitAes.part.0+0xe0>)
   24b48:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   24b4c:	2b00      	cmp	r3, #0
   24b4e:	d1fb      	bne.n	24b48 <InitAes.part.0+0x10>
   24b50:	4a31      	ldr	r2, [pc, #196]	; (24c18 <InitAes.part.0+0xe0>)
   24b52:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   24b56:	2b00      	cmp	r3, #0
   24b58:	d1fb      	bne.n	24b52 <InitAes.part.0+0x1a>
   24b5a:	4a2f      	ldr	r2, [pc, #188]	; (24c18 <InitAes.part.0+0xe0>)
   24b5c:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   24b60:	2b00      	cmp	r3, #0
   24b62:	d1fb      	bne.n	24b5c <InitAes.part.0+0x24>
   24b64:	4a2c      	ldr	r2, [pc, #176]	; (24c18 <InitAes.part.0+0xe0>)
   24b66:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   24b6a:	2b00      	cmp	r3, #0
   24b6c:	d1fb      	bne.n	24b66 <InitAes.part.0+0x2e>
   24b6e:	4d2a      	ldr	r5, [pc, #168]	; (24c18 <InitAes.part.0+0xe0>)
   24b70:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   24b74:	2b00      	cmp	r3, #0
   24b76:	d1fb      	bne.n	24b70 <InitAes.part.0+0x38>
   24b78:	f04f 30ff 	mov.w	r0, #4294967295
   24b7c:	f7fe fe92 	bl	238a4 <CC_HalClearInterruptBit>
   24b80:	6b63      	ldr	r3, [r4, #52]	; 0x34
   24b82:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   24b86:	f023 0304 	bic.w	r3, r3, #4
   24b8a:	2b03      	cmp	r3, #3
   24b8c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   24b8e:	d039      	beq.n	24c04 <InitAes.part.0+0xcc>
   24b90:	2b01      	cmp	r3, #1
   24b92:	bf0c      	ite	eq
   24b94:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   24b98:	f020 0020 	bicne.w	r0, r0, #32
   24b9c:	f7fe fe90 	bl	238c0 <CC_HalMaskInterrupt>
   24ba0:	4a1d      	ldr	r2, [pc, #116]	; (24c18 <InitAes.part.0+0xe0>)
   24ba2:	2301      	movs	r3, #1
   24ba4:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   24ba8:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   24bac:	2b00      	cmp	r3, #0
   24bae:	d1fb      	bne.n	24ba8 <InitAes.part.0+0x70>
   24bb0:	4a19      	ldr	r2, [pc, #100]	; (24c18 <InitAes.part.0+0xe0>)
   24bb2:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   24bb6:	2b00      	cmp	r3, #0
   24bb8:	d1fb      	bne.n	24bb2 <InitAes.part.0+0x7a>
   24bba:	4917      	ldr	r1, [pc, #92]	; (24c18 <InitAes.part.0+0xe0>)
   24bbc:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   24bc0:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   24bc4:	2b00      	cmp	r3, #0
   24bc6:	d1fb      	bne.n	24bc0 <InitAes.part.0+0x88>
   24bc8:	4a13      	ldr	r2, [pc, #76]	; (24c18 <InitAes.part.0+0xe0>)
   24bca:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   24bce:	2b00      	cmp	r3, #0
   24bd0:	d1fb      	bne.n	24bca <InitAes.part.0+0x92>
   24bd2:	6b62      	ldr	r2, [r4, #52]	; 0x34
   24bd4:	f022 0104 	bic.w	r1, r2, #4
   24bd8:	2903      	cmp	r1, #3
   24bda:	bf18      	it	ne
   24bdc:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   24bde:	490e      	ldr	r1, [pc, #56]	; (24c18 <InitAes.part.0+0xe0>)
   24be0:	ea4f 0282 	mov.w	r2, r2, lsl #2
   24be4:	bf18      	it	ne
   24be6:	f003 0301 	andne.w	r3, r3, #1
   24bea:	f002 021c 	and.w	r2, r2, #28
   24bee:	4313      	orrs	r3, r2
   24bf0:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   24bf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   24bf6:	2b07      	cmp	r3, #7
   24bf8:	bf04      	itt	eq
   24bfa:	2301      	moveq	r3, #1
   24bfc:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   24c00:	2000      	movs	r0, #0
   24c02:	bd38      	pop	{r3, r4, r5, pc}
   24c04:	2b01      	cmp	r3, #1
   24c06:	bf0c      	ite	eq
   24c08:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   24c0c:	f020 0010 	bicne.w	r0, r0, #16
   24c10:	f7fe fe56 	bl	238c0 <CC_HalMaskInterrupt>
   24c14:	e7c4      	b.n	24ba0 <InitAes.part.0+0x68>
   24c16:	bf00      	nop
   24c18:	5002b000 	.word	0x5002b000

00024c1c <write_invalid_key>:
   24c1c:	4a09      	ldr	r2, [pc, #36]	; (24c44 <write_invalid_key+0x28>)
   24c1e:	4b0a      	ldr	r3, [pc, #40]	; (24c48 <write_invalid_key+0x2c>)
   24c20:	6811      	ldr	r1, [r2, #0]
   24c22:	6809      	ldr	r1, [r1, #0]
   24c24:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   24c28:	6811      	ldr	r1, [r2, #0]
   24c2a:	6849      	ldr	r1, [r1, #4]
   24c2c:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   24c30:	6811      	ldr	r1, [r2, #0]
   24c32:	6889      	ldr	r1, [r1, #8]
   24c34:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   24c38:	6812      	ldr	r2, [r2, #0]
   24c3a:	68d2      	ldr	r2, [r2, #12]
   24c3c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   24c40:	4770      	bx	lr
   24c42:	bf00      	nop
   24c44:	200007e8 	.word	0x200007e8
   24c48:	5002b000 	.word	0x5002b000

00024c4c <ProcessAesDrv>:
   24c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24c50:	b085      	sub	sp, #20
   24c52:	2900      	cmp	r1, #0
   24c54:	f000 80a3 	beq.w	24d9e <ProcessAesDrv+0x152>
   24c58:	4690      	mov	r8, r2
   24c5a:	2a00      	cmp	r2, #0
   24c5c:	f000 809f 	beq.w	24d9e <ProcessAesDrv+0x152>
   24c60:	4605      	mov	r5, r0
   24c62:	2800      	cmp	r0, #0
   24c64:	f000 813c 	beq.w	24ee0 <ProcessAesDrv+0x294>
   24c68:	4699      	mov	r9, r3
   24c6a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   24c6c:	460e      	mov	r6, r1
   24c6e:	2b00      	cmp	r3, #0
   24c70:	d151      	bne.n	24d16 <ProcessAesDrv+0xca>
   24c72:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   24c76:	d253      	bcs.n	24d20 <ProcessAesDrv+0xd4>
   24c78:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   24c7c:	2b04      	cmp	r3, #4
   24c7e:	f000 8112 	beq.w	24ea6 <ProcessAesDrv+0x25a>
   24c82:	2700      	movs	r7, #0
   24c84:	48a6      	ldr	r0, [pc, #664]	; (24f20 <ProcessAesDrv+0x2d4>)
   24c86:	f04f 31ff 	mov.w	r1, #4294967295
   24c8a:	f7fe feb5 	bl	239f8 <CC_PalMutexLock>
   24c8e:	2800      	cmp	r0, #0
   24c90:	f040 80e8 	bne.w	24e64 <ProcessAesDrv+0x218>
   24c94:	2000      	movs	r0, #0
   24c96:	f7fe fedf 	bl	23a58 <CC_PalPowerSaveModeSelect>
   24c9a:	2800      	cmp	r0, #0
   24c9c:	f040 80eb 	bne.w	24e76 <ProcessAesDrv+0x22a>
   24ca0:	48a0      	ldr	r0, [pc, #640]	; (24f24 <ProcessAesDrv+0x2d8>)
   24ca2:	2301      	movs	r3, #1
   24ca4:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   24ca8:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   24cac:	2c00      	cmp	r4, #0
   24cae:	d1fb      	bne.n	24ca8 <ProcessAesDrv+0x5c>
   24cb0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   24cb2:	2b03      	cmp	r3, #3
   24cb4:	dc39      	bgt.n	24d2a <ProcessAesDrv+0xde>
   24cb6:	2b00      	cmp	r3, #0
   24cb8:	da3a      	bge.n	24d30 <ProcessAesDrv+0xe4>
   24cba:	4c9b      	ldr	r4, [pc, #620]	; (24f28 <ProcessAesDrv+0x2dc>)
   24cbc:	4a99      	ldr	r2, [pc, #612]	; (24f24 <ProcessAesDrv+0x2d8>)
   24cbe:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   24cc2:	2b00      	cmp	r3, #0
   24cc4:	d1fb      	bne.n	24cbe <ProcessAesDrv+0x72>
   24cc6:	2f00      	cmp	r7, #0
   24cc8:	f040 80e4 	bne.w	24e94 <ProcessAesDrv+0x248>
   24ccc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   24cce:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   24cd0:	f023 0304 	bic.w	r3, r3, #4
   24cd4:	2b03      	cmp	r3, #3
   24cd6:	4b93      	ldr	r3, [pc, #588]	; (24f24 <ProcessAesDrv+0x2d8>)
   24cd8:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   24cdc:	d056      	beq.n	24d8c <ProcessAesDrv+0x140>
   24cde:	2a01      	cmp	r2, #1
   24ce0:	bf0c      	ite	eq
   24ce2:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   24ce6:	f040 0020 	orrne.w	r0, r0, #32
   24cea:	f7fe fde9 	bl	238c0 <CC_HalMaskInterrupt>
   24cee:	4b8d      	ldr	r3, [pc, #564]	; (24f24 <ProcessAesDrv+0x2d8>)
   24cf0:	2200      	movs	r2, #0
   24cf2:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   24cf6:	2001      	movs	r0, #1
   24cf8:	f7fe feae 	bl	23a58 <CC_PalPowerSaveModeSelect>
   24cfc:	2800      	cmp	r0, #0
   24cfe:	f040 80c5 	bne.w	24e8c <ProcessAesDrv+0x240>
   24d02:	4887      	ldr	r0, [pc, #540]	; (24f20 <ProcessAesDrv+0x2d4>)
   24d04:	f7fe fe80 	bl	23a08 <CC_PalMutexUnlock>
   24d08:	2800      	cmp	r0, #0
   24d0a:	f040 80b8 	bne.w	24e7e <ProcessAesDrv+0x232>
   24d0e:	4620      	mov	r0, r4
   24d10:	b005      	add	sp, #20
   24d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d16:	2b01      	cmp	r3, #1
   24d18:	d1ae      	bne.n	24c78 <ProcessAesDrv+0x2c>
   24d1a:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   24d1e:	d3ab      	bcc.n	24c78 <ProcessAesDrv+0x2c>
   24d20:	4c82      	ldr	r4, [pc, #520]	; (24f2c <ProcessAesDrv+0x2e0>)
   24d22:	4620      	mov	r0, r4
   24d24:	b005      	add	sp, #20
   24d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d2a:	3b06      	subs	r3, #6
   24d2c:	2b01      	cmp	r3, #1
   24d2e:	d8c4      	bhi.n	24cba <ProcessAesDrv+0x6e>
   24d30:	6bab      	ldr	r3, [r5, #56]	; 0x38
   24d32:	2b01      	cmp	r3, #1
   24d34:	f200 80d2 	bhi.w	24edc <ProcessAesDrv+0x290>
   24d38:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   24d3a:	2b01      	cmp	r3, #1
   24d3c:	d834      	bhi.n	24da8 <ProcessAesDrv+0x15c>
   24d3e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   24d40:	2b01      	cmp	r3, #1
   24d42:	f200 8122 	bhi.w	24f8a <ProcessAesDrv+0x33e>
   24d46:	4628      	mov	r0, r5
   24d48:	f7ff fef6 	bl	24b38 <InitAes.part.0>
   24d4c:	4604      	mov	r4, r0
   24d4e:	2800      	cmp	r0, #0
   24d50:	d1b4      	bne.n	24cbc <ProcessAesDrv+0x70>
   24d52:	4628      	mov	r0, r5
   24d54:	f7ff fe9e 	bl	24a94 <LoadAesKey>
   24d58:	4604      	mov	r4, r0
   24d5a:	2800      	cmp	r0, #0
   24d5c:	d1ae      	bne.n	24cbc <ProcessAesDrv+0x70>
   24d5e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   24d60:	2b07      	cmp	r3, #7
   24d62:	d8aa      	bhi.n	24cba <ProcessAesDrv+0x6e>
   24d64:	a201      	add	r2, pc, #4	; (adr r2, 24d6c <ProcessAesDrv+0x120>)
   24d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   24d6a:	bf00      	nop
   24d6c:	00024dc9 	.word	0x00024dc9
   24d70:	00024dad 	.word	0x00024dad
   24d74:	00024f51 	.word	0x00024f51
   24d78:	00024dad 	.word	0x00024dad
   24d7c:	00024cbb 	.word	0x00024cbb
   24d80:	00024cbb 	.word	0x00024cbb
   24d84:	00024f51 	.word	0x00024f51
   24d88:	00024dad 	.word	0x00024dad
   24d8c:	2a01      	cmp	r2, #1
   24d8e:	bf0c      	ite	eq
   24d90:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   24d94:	f040 0010 	orrne.w	r0, r0, #16
   24d98:	f7fe fd92 	bl	238c0 <CC_HalMaskInterrupt>
   24d9c:	e7a7      	b.n	24cee <ProcessAesDrv+0xa2>
   24d9e:	4c64      	ldr	r4, [pc, #400]	; (24f30 <ProcessAesDrv+0x2e4>)
   24da0:	4620      	mov	r0, r4
   24da2:	b005      	add	sp, #20
   24da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24da8:	4c62      	ldr	r4, [pc, #392]	; (24f34 <ProcessAesDrv+0x2e8>)
   24daa:	e787      	b.n	24cbc <ProcessAesDrv+0x70>
   24dac:	4b5d      	ldr	r3, [pc, #372]	; (24f24 <ProcessAesDrv+0x2d8>)
   24dae:	682a      	ldr	r2, [r5, #0]
   24db0:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   24db4:	686a      	ldr	r2, [r5, #4]
   24db6:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   24dba:	68aa      	ldr	r2, [r5, #8]
   24dbc:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   24dc0:	68ea      	ldr	r2, [r5, #12]
   24dc2:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   24dc6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   24dc8:	6832      	ldr	r2, [r6, #0]
   24dca:	f023 0304 	bic.w	r3, r3, #4
   24dce:	2b03      	cmp	r3, #3
   24dd0:	d00d      	beq.n	24dee <ProcessAesDrv+0x1a2>
   24dd2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   24dd4:	f8d8 1000 	ldr.w	r1, [r8]
   24dd8:	2b01      	cmp	r3, #1
   24dda:	4b52      	ldr	r3, [pc, #328]	; (24f24 <ProcessAesDrv+0x2d8>)
   24ddc:	bf0b      	itete	eq
   24dde:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   24de2:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   24de6:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   24dea:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   24dee:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   24df0:	2b01      	cmp	r3, #1
   24df2:	4b4c      	ldr	r3, [pc, #304]	; (24f24 <ProcessAesDrv+0x2d8>)
   24df4:	bf0b      	itete	eq
   24df6:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   24dfa:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   24dfe:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   24e02:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   24e06:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   24e08:	f023 0304 	bic.w	r3, r3, #4
   24e0c:	2b03      	cmp	r3, #3
   24e0e:	d06a      	beq.n	24ee6 <ProcessAesDrv+0x29a>
   24e10:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   24e12:	2b01      	cmp	r3, #1
   24e14:	bf0c      	ite	eq
   24e16:	2080      	moveq	r0, #128	; 0x80
   24e18:	2020      	movne	r0, #32
   24e1a:	f7fe fd57 	bl	238cc <CC_HalWaitInterrupt>
   24e1e:	4604      	mov	r4, r0
   24e20:	2800      	cmp	r0, #0
   24e22:	f47f af4b 	bne.w	24cbc <ProcessAesDrv+0x70>
   24e26:	4b3f      	ldr	r3, [pc, #252]	; (24f24 <ProcessAesDrv+0x2d8>)
   24e28:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   24e2c:	2c00      	cmp	r4, #0
   24e2e:	d1fb      	bne.n	24e28 <ProcessAesDrv+0x1dc>
   24e30:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   24e32:	3b01      	subs	r3, #1
   24e34:	2b06      	cmp	r3, #6
   24e36:	d812      	bhi.n	24e5e <ProcessAesDrv+0x212>
   24e38:	e8df f003 	tbb	[pc, r3]
   24e3c:	11049904 	.word	0x11049904
   24e40:	9911      	.short	0x9911
   24e42:	04          	.byte	0x04
   24e43:	00          	.byte	0x00
   24e44:	4b37      	ldr	r3, [pc, #220]	; (24f24 <ProcessAesDrv+0x2d8>)
   24e46:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   24e4a:	602a      	str	r2, [r5, #0]
   24e4c:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   24e50:	606a      	str	r2, [r5, #4]
   24e52:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   24e56:	60aa      	str	r2, [r5, #8]
   24e58:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   24e5c:	60eb      	str	r3, [r5, #12]
   24e5e:	2301      	movs	r3, #1
   24e60:	65ab      	str	r3, [r5, #88]	; 0x58
   24e62:	e72b      	b.n	24cbc <ProcessAesDrv+0x70>
   24e64:	4834      	ldr	r0, [pc, #208]	; (24f38 <ProcessAesDrv+0x2ec>)
   24e66:	f7fd fe67 	bl	22b38 <CC_PalAbort>
   24e6a:	2000      	movs	r0, #0
   24e6c:	f7fe fdf4 	bl	23a58 <CC_PalPowerSaveModeSelect>
   24e70:	2800      	cmp	r0, #0
   24e72:	f43f af15 	beq.w	24ca0 <ProcessAesDrv+0x54>
   24e76:	4831      	ldr	r0, [pc, #196]	; (24f3c <ProcessAesDrv+0x2f0>)
   24e78:	f7fd fe5e 	bl	22b38 <CC_PalAbort>
   24e7c:	e710      	b.n	24ca0 <ProcessAesDrv+0x54>
   24e7e:	4830      	ldr	r0, [pc, #192]	; (24f40 <ProcessAesDrv+0x2f4>)
   24e80:	f7fd fe5a 	bl	22b38 <CC_PalAbort>
   24e84:	4620      	mov	r0, r4
   24e86:	b005      	add	sp, #20
   24e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e8c:	482d      	ldr	r0, [pc, #180]	; (24f44 <ProcessAesDrv+0x2f8>)
   24e8e:	f7fd fe53 	bl	22b38 <CC_PalAbort>
   24e92:	e736      	b.n	24d02 <ProcessAesDrv+0xb6>
   24e94:	2304      	movs	r3, #4
   24e96:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   24e9a:	2120      	movs	r1, #32
   24e9c:	f105 0010 	add.w	r0, r5, #16
   24ea0:	f7fe fd92 	bl	239c8 <CC_PalMemSetZeroPlat>
   24ea4:	e712      	b.n	24ccc <ProcessAesDrv+0x80>
   24ea6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   24ea8:	6c28      	ldr	r0, [r5, #64]	; 0x40
   24eaa:	f000 f9b5 	bl	25218 <kmu_validate_slot_and_size>
   24eae:	b998      	cbnz	r0, 24ed8 <ProcessAesDrv+0x28c>
   24eb0:	4f25      	ldr	r7, [pc, #148]	; (24f48 <ProcessAesDrv+0x2fc>)
   24eb2:	4c1c      	ldr	r4, [pc, #112]	; (24f24 <ProcessAesDrv+0x2d8>)
   24eb4:	683b      	ldr	r3, [r7, #0]
   24eb6:	681b      	ldr	r3, [r3, #0]
   24eb8:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   24ebc:	683b      	ldr	r3, [r7, #0]
   24ebe:	685b      	ldr	r3, [r3, #4]
   24ec0:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   24ec4:	683b      	ldr	r3, [r7, #0]
   24ec6:	689b      	ldr	r3, [r3, #8]
   24ec8:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   24ecc:	683b      	ldr	r3, [r7, #0]
   24ece:	68db      	ldr	r3, [r3, #12]
   24ed0:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   24ed4:	6b29      	ldr	r1, [r5, #48]	; 0x30
   24ed6:	b161      	cbz	r1, 24ef2 <ProcessAesDrv+0x2a6>
   24ed8:	2701      	movs	r7, #1
   24eda:	e6d3      	b.n	24c84 <ProcessAesDrv+0x38>
   24edc:	4c1b      	ldr	r4, [pc, #108]	; (24f4c <ProcessAesDrv+0x300>)
   24ede:	e6ed      	b.n	24cbc <ProcessAesDrv+0x70>
   24ee0:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   24ee4:	e713      	b.n	24d0e <ProcessAesDrv+0xc2>
   24ee6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   24ee8:	2b01      	cmp	r3, #1
   24eea:	bf0c      	ite	eq
   24eec:	2040      	moveq	r0, #64	; 0x40
   24eee:	2010      	movne	r0, #16
   24ef0:	e793      	b.n	24e1a <ProcessAesDrv+0x1ce>
   24ef2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   24ef4:	9301      	str	r3, [sp, #4]
   24ef6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   24ef8:	9300      	str	r3, [sp, #0]
   24efa:	f105 0a10 	add.w	sl, r5, #16
   24efe:	f04f 0b10 	mov.w	fp, #16
   24f02:	f8cd a008 	str.w	sl, [sp, #8]
   24f06:	f8cd b00c 	str.w	fp, [sp, #12]
   24f0a:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   24f0e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   24f10:	f000 f9a4 	bl	2525c <kmu_derive_cmac>
   24f14:	2800      	cmp	r0, #0
   24f16:	d13a      	bne.n	24f8e <ProcessAesDrv+0x342>
   24f18:	2300      	movs	r3, #0
   24f1a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   24f1e:	e7db      	b.n	24ed8 <ProcessAesDrv+0x28c>
   24f20:	200007f8 	.word	0x200007f8
   24f24:	5002b000 	.word	0x5002b000
   24f28:	00f10001 	.word	0x00f10001
   24f2c:	00f10005 	.word	0x00f10005
   24f30:	00f1000b 	.word	0x00f1000b
   24f34:	00f10003 	.word	0x00f10003
   24f38:	0002ba34 	.word	0x0002ba34
   24f3c:	0002ba4c 	.word	0x0002ba4c
   24f40:	0002ba8c 	.word	0x0002ba8c
   24f44:	0002ba6c 	.word	0x0002ba6c
   24f48:	200007e8 	.word	0x200007e8
   24f4c:	00f10002 	.word	0x00f10002
   24f50:	4b19      	ldr	r3, [pc, #100]	; (24fb8 <ProcessAesDrv+0x36c>)
   24f52:	682a      	ldr	r2, [r5, #0]
   24f54:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   24f58:	686a      	ldr	r2, [r5, #4]
   24f5a:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   24f5e:	68aa      	ldr	r2, [r5, #8]
   24f60:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   24f64:	68ea      	ldr	r2, [r5, #12]
   24f66:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   24f6a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   24f6c:	e72c      	b.n	24dc8 <ProcessAesDrv+0x17c>
   24f6e:	4b12      	ldr	r3, [pc, #72]	; (24fb8 <ProcessAesDrv+0x36c>)
   24f70:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   24f74:	602a      	str	r2, [r5, #0]
   24f76:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   24f7a:	606a      	str	r2, [r5, #4]
   24f7c:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   24f80:	60aa      	str	r2, [r5, #8]
   24f82:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   24f86:	60eb      	str	r3, [r5, #12]
   24f88:	e769      	b.n	24e5e <ProcessAesDrv+0x212>
   24f8a:	4c0c      	ldr	r4, [pc, #48]	; (24fbc <ProcessAesDrv+0x370>)
   24f8c:	e696      	b.n	24cbc <ProcessAesDrv+0x70>
   24f8e:	683b      	ldr	r3, [r7, #0]
   24f90:	681b      	ldr	r3, [r3, #0]
   24f92:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   24f96:	683b      	ldr	r3, [r7, #0]
   24f98:	685b      	ldr	r3, [r3, #4]
   24f9a:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   24f9e:	683b      	ldr	r3, [r7, #0]
   24fa0:	689b      	ldr	r3, [r3, #8]
   24fa2:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   24fa6:	683b      	ldr	r3, [r7, #0]
   24fa8:	68db      	ldr	r3, [r3, #12]
   24faa:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   24fae:	4659      	mov	r1, fp
   24fb0:	4650      	mov	r0, sl
   24fb2:	f7fe fd09 	bl	239c8 <CC_PalMemSetZeroPlat>
   24fb6:	e7af      	b.n	24f18 <ProcessAesDrv+0x2cc>
   24fb8:	5002b000 	.word	0x5002b000
   24fbc:	00f10004 	.word	0x00f10004

00024fc0 <FinishAesDrv>:
   24fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24fc4:	b301      	cbz	r1, 25008 <FinishAesDrv+0x48>
   24fc6:	b1fa      	cbz	r2, 25008 <FinishAesDrv+0x48>
   24fc8:	4604      	mov	r4, r0
   24fca:	2800      	cmp	r0, #0
   24fcc:	d07c      	beq.n	250c8 <FinishAesDrv+0x108>
   24fce:	461d      	mov	r5, r3
   24fd0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   24fd2:	2b07      	cmp	r3, #7
   24fd4:	460e      	mov	r6, r1
   24fd6:	d01b      	beq.n	25010 <FinishAesDrv+0x50>
   24fd8:	b95d      	cbnz	r5, 24ff2 <FinishAesDrv+0x32>
   24fda:	2b03      	cmp	r3, #3
   24fdc:	d110      	bne.n	25000 <FinishAesDrv+0x40>
   24fde:	6d83      	ldr	r3, [r0, #88]	; 0x58
   24fe0:	b973      	cbnz	r3, 25000 <FinishAesDrv+0x40>
   24fe2:	f100 0364 	add.w	r3, r0, #100	; 0x64
   24fe6:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   24fea:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   24fee:	600b      	str	r3, [r1, #0]
   24ff0:	2510      	movs	r5, #16
   24ff2:	462b      	mov	r3, r5
   24ff4:	4631      	mov	r1, r6
   24ff6:	4620      	mov	r0, r4
   24ff8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   24ffc:	f7ff be26 	b.w	24c4c <ProcessAesDrv>
   25000:	462f      	mov	r7, r5
   25002:	4638      	mov	r0, r7
   25004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25008:	4f77      	ldr	r7, [pc, #476]	; (251e8 <FinishAesDrv+0x228>)
   2500a:	4638      	mov	r0, r7
   2500c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25010:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   25012:	2b00      	cmp	r3, #0
   25014:	d15b      	bne.n	250ce <FinishAesDrv+0x10e>
   25016:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   2501a:	d25d      	bcs.n	250d8 <FinishAesDrv+0x118>
   2501c:	b915      	cbnz	r5, 25024 <FinishAesDrv+0x64>
   2501e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   25020:	2b00      	cmp	r3, #0
   25022:	d159      	bne.n	250d8 <FinishAesDrv+0x118>
   25024:	4871      	ldr	r0, [pc, #452]	; (251ec <FinishAesDrv+0x22c>)
   25026:	f04f 31ff 	mov.w	r1, #4294967295
   2502a:	f7fe fce5 	bl	239f8 <CC_PalMutexLock>
   2502e:	2800      	cmp	r0, #0
   25030:	f040 80b8 	bne.w	251a4 <FinishAesDrv+0x1e4>
   25034:	2000      	movs	r0, #0
   25036:	f7fe fd0f 	bl	23a58 <CC_PalPowerSaveModeSelect>
   2503a:	2800      	cmp	r0, #0
   2503c:	f040 80ae 	bne.w	2519c <FinishAesDrv+0x1dc>
   25040:	4a6b      	ldr	r2, [pc, #428]	; (251f0 <FinishAesDrv+0x230>)
   25042:	2301      	movs	r3, #1
   25044:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   25048:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2504c:	2b00      	cmp	r3, #0
   2504e:	d1fb      	bne.n	25048 <FinishAesDrv+0x88>
   25050:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25052:	2b03      	cmp	r3, #3
   25054:	dd20      	ble.n	25098 <FinishAesDrv+0xd8>
   25056:	3b06      	subs	r3, #6
   25058:	2b01      	cmp	r3, #1
   2505a:	d81f      	bhi.n	2509c <FinishAesDrv+0xdc>
   2505c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2505e:	2b01      	cmp	r3, #1
   25060:	d83c      	bhi.n	250dc <FinishAesDrv+0x11c>
   25062:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   25064:	2b01      	cmp	r3, #1
   25066:	f200 80a5 	bhi.w	251b4 <FinishAesDrv+0x1f4>
   2506a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   2506c:	2b01      	cmp	r3, #1
   2506e:	f200 80a3 	bhi.w	251b8 <FinishAesDrv+0x1f8>
   25072:	4620      	mov	r0, r4
   25074:	f7ff fd60 	bl	24b38 <InitAes.part.0>
   25078:	4607      	mov	r7, r0
   2507a:	b980      	cbnz	r0, 2509e <FinishAesDrv+0xde>
   2507c:	4620      	mov	r0, r4
   2507e:	f7ff fd09 	bl	24a94 <LoadAesKey>
   25082:	4607      	mov	r7, r0
   25084:	b958      	cbnz	r0, 2509e <FinishAesDrv+0xde>
   25086:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25088:	2b07      	cmp	r3, #7
   2508a:	d807      	bhi.n	2509c <FinishAesDrv+0xdc>
   2508c:	e8df f003 	tbb	[pc, r3]
   25090:	285c2835 	.word	0x285c2835
   25094:	285c0606 	.word	0x285c0606
   25098:	2b00      	cmp	r3, #0
   2509a:	dadf      	bge.n	2505c <FinishAesDrv+0x9c>
   2509c:	4f55      	ldr	r7, [pc, #340]	; (251f4 <FinishAesDrv+0x234>)
   2509e:	4a54      	ldr	r2, [pc, #336]	; (251f0 <FinishAesDrv+0x230>)
   250a0:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   250a4:	2b00      	cmp	r3, #0
   250a6:	d1fb      	bne.n	250a0 <FinishAesDrv+0xe0>
   250a8:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   250ac:	2001      	movs	r0, #1
   250ae:	f7fe fcd3 	bl	23a58 <CC_PalPowerSaveModeSelect>
   250b2:	2800      	cmp	r0, #0
   250b4:	d17a      	bne.n	251ac <FinishAesDrv+0x1ec>
   250b6:	484d      	ldr	r0, [pc, #308]	; (251ec <FinishAesDrv+0x22c>)
   250b8:	f7fe fca6 	bl	23a08 <CC_PalMutexUnlock>
   250bc:	2800      	cmp	r0, #0
   250be:	d0a0      	beq.n	25002 <FinishAesDrv+0x42>
   250c0:	484d      	ldr	r0, [pc, #308]	; (251f8 <FinishAesDrv+0x238>)
   250c2:	f7fd fd39 	bl	22b38 <CC_PalAbort>
   250c6:	e79c      	b.n	25002 <FinishAesDrv+0x42>
   250c8:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   250cc:	e799      	b.n	25002 <FinishAesDrv+0x42>
   250ce:	2b01      	cmp	r3, #1
   250d0:	d1a4      	bne.n	2501c <FinishAesDrv+0x5c>
   250d2:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   250d6:	d3a1      	bcc.n	2501c <FinishAesDrv+0x5c>
   250d8:	4f48      	ldr	r7, [pc, #288]	; (251fc <FinishAesDrv+0x23c>)
   250da:	e792      	b.n	25002 <FinishAesDrv+0x42>
   250dc:	4f48      	ldr	r7, [pc, #288]	; (25200 <FinishAesDrv+0x240>)
   250de:	e7de      	b.n	2509e <FinishAesDrv+0xde>
   250e0:	4b43      	ldr	r3, [pc, #268]	; (251f0 <FinishAesDrv+0x230>)
   250e2:	6822      	ldr	r2, [r4, #0]
   250e4:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   250e8:	6862      	ldr	r2, [r4, #4]
   250ea:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   250ee:	68a2      	ldr	r2, [r4, #8]
   250f0:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   250f4:	68e2      	ldr	r2, [r4, #12]
   250f6:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   250fa:	4b3d      	ldr	r3, [pc, #244]	; (251f0 <FinishAesDrv+0x230>)
   250fc:	2201      	movs	r2, #1
   250fe:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   25102:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   25106:	2d00      	cmp	r5, #0
   25108:	d158      	bne.n	251bc <FinishAesDrv+0x1fc>
   2510a:	6da1      	ldr	r1, [r4, #88]	; 0x58
   2510c:	b909      	cbnz	r1, 25112 <FinishAesDrv+0x152>
   2510e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   25112:	4b37      	ldr	r3, [pc, #220]	; (251f0 <FinishAesDrv+0x230>)
   25114:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   25118:	2f00      	cmp	r7, #0
   2511a:	d1fb      	bne.n	25114 <FinishAesDrv+0x154>
   2511c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2511e:	3b01      	subs	r3, #1
   25120:	2b06      	cmp	r3, #6
   25122:	d8bc      	bhi.n	2509e <FinishAesDrv+0xde>
   25124:	a201      	add	r2, pc, #4	; (adr r2, 2512c <FinishAesDrv+0x16c>)
   25126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2512a:	bf00      	nop
   2512c:	00025165 	.word	0x00025165
   25130:	00025181 	.word	0x00025181
   25134:	00025165 	.word	0x00025165
   25138:	0002509f 	.word	0x0002509f
   2513c:	0002509f 	.word	0x0002509f
   25140:	00025181 	.word	0x00025181
   25144:	00025165 	.word	0x00025165
   25148:	4b29      	ldr	r3, [pc, #164]	; (251f0 <FinishAesDrv+0x230>)
   2514a:	6822      	ldr	r2, [r4, #0]
   2514c:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   25150:	6862      	ldr	r2, [r4, #4]
   25152:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   25156:	68a2      	ldr	r2, [r4, #8]
   25158:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   2515c:	68e2      	ldr	r2, [r4, #12]
   2515e:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   25162:	e7ca      	b.n	250fa <FinishAesDrv+0x13a>
   25164:	4b22      	ldr	r3, [pc, #136]	; (251f0 <FinishAesDrv+0x230>)
   25166:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   2516a:	6022      	str	r2, [r4, #0]
   2516c:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   25170:	6062      	str	r2, [r4, #4]
   25172:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   25176:	60a2      	str	r2, [r4, #8]
   25178:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   2517c:	60e3      	str	r3, [r4, #12]
   2517e:	e78e      	b.n	2509e <FinishAesDrv+0xde>
   25180:	4b1b      	ldr	r3, [pc, #108]	; (251f0 <FinishAesDrv+0x230>)
   25182:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   25186:	6022      	str	r2, [r4, #0]
   25188:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   2518c:	6062      	str	r2, [r4, #4]
   2518e:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   25192:	60a2      	str	r2, [r4, #8]
   25194:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   25198:	60e3      	str	r3, [r4, #12]
   2519a:	e780      	b.n	2509e <FinishAesDrv+0xde>
   2519c:	4819      	ldr	r0, [pc, #100]	; (25204 <FinishAesDrv+0x244>)
   2519e:	f7fd fccb 	bl	22b38 <CC_PalAbort>
   251a2:	e74d      	b.n	25040 <FinishAesDrv+0x80>
   251a4:	4818      	ldr	r0, [pc, #96]	; (25208 <FinishAesDrv+0x248>)
   251a6:	f7fd fcc7 	bl	22b38 <CC_PalAbort>
   251aa:	e743      	b.n	25034 <FinishAesDrv+0x74>
   251ac:	4817      	ldr	r0, [pc, #92]	; (2520c <FinishAesDrv+0x24c>)
   251ae:	f7fd fcc3 	bl	22b38 <CC_PalAbort>
   251b2:	e780      	b.n	250b6 <FinishAesDrv+0xf6>
   251b4:	4f16      	ldr	r7, [pc, #88]	; (25210 <FinishAesDrv+0x250>)
   251b6:	e772      	b.n	2509e <FinishAesDrv+0xde>
   251b8:	4f16      	ldr	r7, [pc, #88]	; (25214 <FinishAesDrv+0x254>)
   251ba:	e770      	b.n	2509e <FinishAesDrv+0xde>
   251bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   251be:	6832      	ldr	r2, [r6, #0]
   251c0:	2901      	cmp	r1, #1
   251c2:	d00a      	beq.n	251da <FinishAesDrv+0x21a>
   251c4:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   251c8:	2010      	movs	r0, #16
   251ca:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   251ce:	f7fe fb7d 	bl	238cc <CC_HalWaitInterrupt>
   251d2:	4607      	mov	r7, r0
   251d4:	2800      	cmp	r0, #0
   251d6:	d09c      	beq.n	25112 <FinishAesDrv+0x152>
   251d8:	e761      	b.n	2509e <FinishAesDrv+0xde>
   251da:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   251de:	2040      	movs	r0, #64	; 0x40
   251e0:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   251e4:	e7f3      	b.n	251ce <FinishAesDrv+0x20e>
   251e6:	bf00      	nop
   251e8:	00f1000b 	.word	0x00f1000b
   251ec:	200007f8 	.word	0x200007f8
   251f0:	5002b000 	.word	0x5002b000
   251f4:	00f10001 	.word	0x00f10001
   251f8:	0002ba8c 	.word	0x0002ba8c
   251fc:	00f10005 	.word	0x00f10005
   25200:	00f10002 	.word	0x00f10002
   25204:	0002ba4c 	.word	0x0002ba4c
   25208:	0002ba34 	.word	0x0002ba34
   2520c:	0002ba6c 	.word	0x0002ba6c
   25210:	00f10003 	.word	0x00f10003
   25214:	00f10004 	.word	0x00f10004

00025218 <kmu_validate_slot_and_size>:
   25218:	b921      	cbnz	r1, 25224 <kmu_validate_slot_and_size+0xc>
   2521a:	4b03      	ldr	r3, [pc, #12]	; (25228 <kmu_validate_slot_and_size+0x10>)
   2521c:	2800      	cmp	r0, #0
   2521e:	bf18      	it	ne
   25220:	4618      	movne	r0, r3
   25222:	4770      	bx	lr
   25224:	4801      	ldr	r0, [pc, #4]	; (2522c <kmu_validate_slot_and_size+0x14>)
   25226:	4770      	bx	lr
   25228:	00f70001 	.word	0x00f70001
   2522c:	00f70003 	.word	0x00f70003

00025230 <kmu_validate_kdr_slot_and_size>:
   25230:	b921      	cbnz	r1, 2523c <kmu_validate_kdr_slot_and_size+0xc>
   25232:	4b03      	ldr	r3, [pc, #12]	; (25240 <kmu_validate_kdr_slot_and_size+0x10>)
   25234:	2800      	cmp	r0, #0
   25236:	bf18      	it	ne
   25238:	4618      	movne	r0, r3
   2523a:	4770      	bx	lr
   2523c:	4801      	ldr	r0, [pc, #4]	; (25244 <kmu_validate_kdr_slot_and_size+0x14>)
   2523e:	4770      	bx	lr
   25240:	00f70001 	.word	0x00f70001
   25244:	00f70003 	.word	0x00f70003

00025248 <kmu_use_kdr_key>:
   25248:	4b03      	ldr	r3, [pc, #12]	; (25258 <kmu_use_kdr_key+0x10>)
   2524a:	2000      	movs	r0, #0
   2524c:	2201      	movs	r2, #1
   2524e:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   25252:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   25256:	4770      	bx	lr
   25258:	5002b000 	.word	0x5002b000

0002525c <kmu_derive_cmac>:
   2525c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25260:	b0cc      	sub	sp, #304	; 0x130
   25262:	2400      	movs	r4, #0
   25264:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   25266:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   2526a:	4682      	mov	sl, r0
   2526c:	4689      	mov	r9, r1
   2526e:	4616      	mov	r6, r2
   25270:	4621      	mov	r1, r4
   25272:	2274      	movs	r2, #116	; 0x74
   25274:	a80e      	add	r0, sp, #56	; 0x38
   25276:	461f      	mov	r7, r3
   25278:	f001 fd59 	bl	26d2e <memset>
   2527c:	2280      	movs	r2, #128	; 0x80
   2527e:	4621      	mov	r1, r4
   25280:	a82c      	add	r0, sp, #176	; 0xb0
   25282:	942b      	str	r4, [sp, #172]	; 0xac
   25284:	f001 fd53 	bl	26d2e <memset>
   25288:	2384      	movs	r3, #132	; 0x84
   2528a:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2528e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   25292:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   25296:	9305      	str	r3, [sp, #20]
   25298:	d863      	bhi.n	25362 <kmu_derive_cmac+0x106>
   2529a:	f7ff fcbf 	bl	24c1c <write_invalid_key>
   2529e:	ab05      	add	r3, sp, #20
   252a0:	4630      	mov	r0, r6
   252a2:	ae2b      	add	r6, sp, #172	; 0xac
   252a4:	9301      	str	r3, [sp, #4]
   252a6:	9502      	str	r5, [sp, #8]
   252a8:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   252ac:	4639      	mov	r1, r7
   252ae:	9600      	str	r6, [sp, #0]
   252b0:	f000 f862 	bl	25378 <UtilCmacBuildDataForDerivation>
   252b4:	2800      	cmp	r0, #0
   252b6:	d14f      	bne.n	25358 <kmu_derive_cmac+0xfc>
   252b8:	2303      	movs	r3, #3
   252ba:	f88d 3013 	strb.w	r3, [sp, #19]
   252be:	f89d 3013 	ldrb.w	r3, [sp, #19]
   252c2:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   252c6:	2307      	movs	r3, #7
   252c8:	2200      	movs	r2, #0
   252ca:	901c      	str	r0, [sp, #112]	; 0x70
   252cc:	2110      	movs	r1, #16
   252ce:	a80e      	add	r0, sp, #56	; 0x38
   252d0:	931b      	str	r3, [sp, #108]	; 0x6c
   252d2:	2401      	movs	r4, #1
   252d4:	2301      	movs	r3, #1
   252d6:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   252da:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   252de:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   252e2:	9426      	str	r4, [sp, #152]	; 0x98
   252e4:	f10d 0920 	add.w	r9, sp, #32
   252e8:	f7fe fb6e 	bl	239c8 <CC_PalMemSetZeroPlat>
   252ec:	2210      	movs	r2, #16
   252ee:	9200      	str	r2, [sp, #0]
   252f0:	9905      	ldr	r1, [sp, #20]
   252f2:	f8cd 9004 	str.w	r9, [sp, #4]
   252f6:	ab0a      	add	r3, sp, #40	; 0x28
   252f8:	4630      	mov	r0, r6
   252fa:	aa06      	add	r2, sp, #24
   252fc:	f7ff fa1e 	bl	2473c <SetDataBuffersInfo>
   25300:	4607      	mov	r7, r0
   25302:	b170      	cbz	r0, 25322 <kmu_derive_cmac+0xc6>
   25304:	e01d      	b.n	25342 <kmu_derive_cmac+0xe6>
   25306:	a90e      	add	r1, sp, #56	; 0x38
   25308:	eb08 0007 	add.w	r0, r8, r7
   2530c:	f7fe fb58 	bl	239c0 <CC_PalMemCopyPlat>
   25310:	2110      	movs	r1, #16
   25312:	a80e      	add	r0, sp, #56	; 0x38
   25314:	f7fe fb58 	bl	239c8 <CC_PalMemSetZeroPlat>
   25318:	3401      	adds	r4, #1
   2531a:	1bad      	subs	r5, r5, r6
   2531c:	4437      	add	r7, r6
   2531e:	b2e4      	uxtb	r4, r4
   25320:	d024      	beq.n	2536c <kmu_derive_cmac+0x110>
   25322:	2d10      	cmp	r5, #16
   25324:	464a      	mov	r2, r9
   25326:	9b05      	ldr	r3, [sp, #20]
   25328:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   2532c:	a906      	add	r1, sp, #24
   2532e:	a80e      	add	r0, sp, #56	; 0x38
   25330:	462e      	mov	r6, r5
   25332:	bf28      	it	cs
   25334:	2610      	movcs	r6, #16
   25336:	f7ff fe43 	bl	24fc0 <FinishAesDrv>
   2533a:	4632      	mov	r2, r6
   2533c:	2800      	cmp	r0, #0
   2533e:	d0e2      	beq.n	25306 <kmu_derive_cmac+0xaa>
   25340:	4607      	mov	r7, r0
   25342:	a80e      	add	r0, sp, #56	; 0x38
   25344:	2274      	movs	r2, #116	; 0x74
   25346:	2100      	movs	r1, #0
   25348:	f7fe fb3c 	bl	239c4 <CC_PalMemSetPlat>
   2534c:	f7ff fc66 	bl	24c1c <write_invalid_key>
   25350:	4638      	mov	r0, r7
   25352:	b04c      	add	sp, #304	; 0x130
   25354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25358:	4f05      	ldr	r7, [pc, #20]	; (25370 <kmu_derive_cmac+0x114>)
   2535a:	4638      	mov	r0, r7
   2535c:	b04c      	add	sp, #304	; 0x130
   2535e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25362:	4f04      	ldr	r7, [pc, #16]	; (25374 <kmu_derive_cmac+0x118>)
   25364:	4638      	mov	r0, r7
   25366:	b04c      	add	sp, #304	; 0x130
   25368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2536c:	462f      	mov	r7, r5
   2536e:	e7e8      	b.n	25342 <kmu_derive_cmac+0xe6>
   25370:	00f1000e 	.word	0x00f1000e
   25374:	00f1000f 	.word	0x00f1000f

00025378 <UtilCmacBuildDataForDerivation>:
   25378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2537c:	b082      	sub	sp, #8
   2537e:	461e      	mov	r6, r3
   25380:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   25382:	2300      	movs	r3, #0
   25384:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   25388:	9301      	str	r3, [sp, #4]
   2538a:	d83e      	bhi.n	2540a <UtilCmacBuildDataForDerivation+0x92>
   2538c:	00e4      	lsls	r4, r4, #3
   2538e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   25392:	4617      	mov	r7, r2
   25394:	f101 32ff 	add.w	r2, r1, #4294967295
   25398:	bf34      	ite	cc
   2539a:	2303      	movcc	r3, #3
   2539c:	2304      	movcs	r3, #4
   2539e:	2a3f      	cmp	r2, #63	; 0x3f
   253a0:	460d      	mov	r5, r1
   253a2:	9300      	str	r3, [sp, #0]
   253a4:	d831      	bhi.n	2540a <UtilCmacBuildDataForDerivation+0x92>
   253a6:	b380      	cbz	r0, 2540a <UtilCmacBuildDataForDerivation+0x92>
   253a8:	b116      	cbz	r6, 253b0 <UtilCmacBuildDataForDerivation+0x38>
   253aa:	b377      	cbz	r7, 2540a <UtilCmacBuildDataForDerivation+0x92>
   253ac:	2e40      	cmp	r6, #64	; 0x40
   253ae:	d82c      	bhi.n	2540a <UtilCmacBuildDataForDerivation+0x92>
   253b0:	9a08      	ldr	r2, [sp, #32]
   253b2:	b352      	cbz	r2, 2540a <UtilCmacBuildDataForDerivation+0x92>
   253b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   253b6:	6811      	ldr	r1, [r2, #0]
   253b8:	b339      	cbz	r1, 2540a <UtilCmacBuildDataForDerivation+0x92>
   253ba:	19aa      	adds	r2, r5, r6
   253bc:	4413      	add	r3, r2
   253be:	4299      	cmp	r1, r3
   253c0:	d323      	bcc.n	2540a <UtilCmacBuildDataForDerivation+0x92>
   253c2:	9b08      	ldr	r3, [sp, #32]
   253c4:	4601      	mov	r1, r0
   253c6:	462a      	mov	r2, r5
   253c8:	1c58      	adds	r0, r3, #1
   253ca:	f7fe faf9 	bl	239c0 <CC_PalMemCopyPlat>
   253ce:	9b08      	ldr	r3, [sp, #32]
   253d0:	f105 0802 	add.w	r8, r5, #2
   253d4:	441d      	add	r5, r3
   253d6:	2300      	movs	r3, #0
   253d8:	706b      	strb	r3, [r5, #1]
   253da:	bb0e      	cbnz	r6, 25420 <UtilCmacBuildDataForDerivation+0xa8>
   253dc:	9b08      	ldr	r3, [sp, #32]
   253de:	9400      	str	r4, [sp, #0]
   253e0:	2cff      	cmp	r4, #255	; 0xff
   253e2:	eb03 0008 	add.w	r0, r3, r8
   253e6:	d914      	bls.n	25412 <UtilCmacBuildDataForDerivation+0x9a>
   253e8:	0223      	lsls	r3, r4, #8
   253ea:	b29b      	uxth	r3, r3
   253ec:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   253f0:	2202      	movs	r2, #2
   253f2:	a901      	add	r1, sp, #4
   253f4:	9401      	str	r4, [sp, #4]
   253f6:	f7fe fae3 	bl	239c0 <CC_PalMemCopyPlat>
   253fa:	f108 0302 	add.w	r3, r8, #2
   253fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25400:	2000      	movs	r0, #0
   25402:	6013      	str	r3, [r2, #0]
   25404:	b002      	add	sp, #8
   25406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2540a:	480a      	ldr	r0, [pc, #40]	; (25434 <UtilCmacBuildDataForDerivation+0xbc>)
   2540c:	b002      	add	sp, #8
   2540e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25412:	2201      	movs	r2, #1
   25414:	4669      	mov	r1, sp
   25416:	f7fe fad3 	bl	239c0 <CC_PalMemCopyPlat>
   2541a:	f108 0301 	add.w	r3, r8, #1
   2541e:	e7ee      	b.n	253fe <UtilCmacBuildDataForDerivation+0x86>
   25420:	9b08      	ldr	r3, [sp, #32]
   25422:	4632      	mov	r2, r6
   25424:	eb03 0008 	add.w	r0, r3, r8
   25428:	4639      	mov	r1, r7
   2542a:	f7fe fac9 	bl	239c0 <CC_PalMemCopyPlat>
   2542e:	44b0      	add	r8, r6
   25430:	e7d4      	b.n	253dc <UtilCmacBuildDataForDerivation+0x64>
   25432:	bf00      	nop
   25434:	80000006 	.word	0x80000006

00025438 <CC_PalDataBufferAttrGet>:
   25438:	2000      	movs	r0, #0
   2543a:	7018      	strb	r0, [r3, #0]
   2543c:	4770      	bx	lr
   2543e:	bf00      	nop

00025440 <AD5940_ReadWrite16B>:
{
   25440:	b507      	push	{r0, r1, r2, lr}
   SendBuffer[0] = data>>8;
   25442:	0a03      	lsrs	r3, r0, #8
   SendBuffer[1] = data&0xff;
   25444:	f88d 0001 	strb.w	r0, [sp, #1]
   AD5940_ReadWriteNBytes(SendBuffer,RecvBuffer,2);
   25448:	2202      	movs	r2, #2
   2544a:	4668      	mov	r0, sp
   2544c:	a901      	add	r1, sp, #4
   SendBuffer[0] = data>>8;
   2544e:	f88d 3000 	strb.w	r3, [sp]
   AD5940_ReadWriteNBytes(SendBuffer,RecvBuffer,2);
   25452:	f7ec fb31 	bl	11ab8 <AD5940_ReadWriteNBytes>
   return (((uint16_t)RecvBuffer[0])<<8)|RecvBuffer[1];
   25456:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   2545a:	ba40      	rev16	r0, r0
}
   2545c:	b280      	uxth	r0, r0
   2545e:	b003      	add	sp, #12
   25460:	f85d fb04 	ldr.w	pc, [sp], #4

00025464 <AD5940_ReadWrite32B>:
{
   25464:	b507      	push	{r0, r1, r2, lr}
   SendBuffer[0] = (data>>24)&0xff;
   25466:	0e03      	lsrs	r3, r0, #24
   25468:	f88d 3000 	strb.w	r3, [sp]
   AD5940_ReadWriteNBytes(SendBuffer,RecvBuffer,4);
   2546c:	2204      	movs	r2, #4
   SendBuffer[1] = (data>>16)&0xff;
   2546e:	0c03      	lsrs	r3, r0, #16
   25470:	f88d 3001 	strb.w	r3, [sp, #1]
   SendBuffer[3] = (data    )&0xff;
   25474:	f88d 0003 	strb.w	r0, [sp, #3]
   SendBuffer[2] = (data>> 8)&0xff;
   25478:	0a03      	lsrs	r3, r0, #8
   AD5940_ReadWriteNBytes(SendBuffer,RecvBuffer,4);
   2547a:	eb0d 0102 	add.w	r1, sp, r2
   2547e:	4668      	mov	r0, sp
   SendBuffer[2] = (data>> 8)&0xff;
   25480:	f88d 3002 	strb.w	r3, [sp, #2]
   AD5940_ReadWriteNBytes(SendBuffer,RecvBuffer,4);
   25484:	f7ec fb18 	bl	11ab8 <AD5940_ReadWriteNBytes>
}
   25488:	9801      	ldr	r0, [sp, #4]
   2548a:	ba00      	rev	r0, r0
   2548c:	b003      	add	sp, #12
   2548e:	f85d fb04 	ldr.w	pc, [sp], #4

00025492 <AD5940_ReadWrite8B.isra.0>:
static unsigned char AD5940_ReadWrite8B(unsigned char data)
   25492:	b507      	push	{r0, r1, r2, lr}
   AD5940_ReadWriteNBytes(tx,rx,1);
   25494:	2201      	movs	r2, #1
   tx[0] = data;
   25496:	f88d 0000 	strb.w	r0, [sp]
   AD5940_ReadWriteNBytes(tx,rx,1);
   2549a:	a901      	add	r1, sp, #4
   2549c:	4668      	mov	r0, sp
   2549e:	f7ec fb0b 	bl	11ab8 <AD5940_ReadWriteNBytes>
}
   254a2:	b003      	add	sp, #12
   254a4:	f85d fb04 	ldr.w	pc, [sp], #4

000254a8 <AD5940_SPIReadReg>:
{  
   254a8:	b510      	push	{r4, lr}
   254aa:	4604      	mov	r4, r0
  AD5940_CsClr();
   254ac:	f000 fa22 	bl	258f4 <AD5940_CsClr>
  AD5940_ReadWrite8B(SPICMD_SETADDR);
   254b0:	2020      	movs	r0, #32
   254b2:	f7ff ffee 	bl	25492 <AD5940_ReadWrite8B.isra.0>
  AD5940_ReadWrite16B(RegAddr);
   254b6:	4620      	mov	r0, r4
   254b8:	f7ff ffc2 	bl	25440 <AD5940_ReadWrite16B>
  AD5940_CsSet();
   254bc:	f000 fa1e 	bl	258fc <AD5940_CsSet>
  AD5940_CsClr();
   254c0:	f000 fa18 	bl	258f4 <AD5940_CsClr>
  AD5940_ReadWrite8B(SPICMD_READREG);
   254c4:	206d      	movs	r0, #109	; 0x6d
   254c6:	f7ff ffe4 	bl	25492 <AD5940_ReadWrite8B.isra.0>
  if((RegAddr>=0x1000)&&(RegAddr<=0x3014))
   254ca:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
  AD5940_ReadWrite8B(0);  //Dummy read
   254ce:	2000      	movs	r0, #0
   254d0:	f7ff ffdf 	bl	25492 <AD5940_ReadWrite8B.isra.0>
  if((RegAddr>=0x1000)&&(RegAddr<=0x3014))
   254d4:	b2a4      	uxth	r4, r4
   254d6:	f242 0314 	movw	r3, #8212	; 0x2014
   254da:	429c      	cmp	r4, r3
    Data = AD5940_ReadWrite32B(0);
   254dc:	f04f 0000 	mov.w	r0, #0
  if((RegAddr>=0x1000)&&(RegAddr<=0x3014))
   254e0:	d806      	bhi.n	254f0 <AD5940_SPIReadReg+0x48>
    Data = AD5940_ReadWrite32B(0);
   254e2:	f7ff ffbf 	bl	25464 <AD5940_ReadWrite32B>
    Data = AD5940_ReadWrite16B(0);
   254e6:	4604      	mov	r4, r0
  AD5940_CsSet();
   254e8:	f000 fa08 	bl	258fc <AD5940_CsSet>
}
   254ec:	4620      	mov	r0, r4
   254ee:	bd10      	pop	{r4, pc}
    Data = AD5940_ReadWrite16B(0);
   254f0:	f7ff ffa6 	bl	25440 <AD5940_ReadWrite16B>
   254f4:	e7f7      	b.n	254e6 <AD5940_SPIReadReg+0x3e>

000254f6 <AD5940_AFECtrlS>:
{
   254f6:	b538      	push	{r3, r4, r5, lr}
   254f8:	4604      	mov	r4, r0
   254fa:	460d      	mov	r5, r1
  tempreg = AD5940_ReadReg(REG_AFE_AFECON);
   254fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   25500:	f7ec f876 	bl	115f0 <AD5940_ReadReg>
  if (State == bTRUE) {
   25504:	2d01      	cmp	r5, #1
    if (AfeCtrlSet & AFECTRL_HPREFPWR) {
   25506:	f004 0320 	and.w	r3, r4, #32
  if (State == bTRUE) {
   2550a:	d112      	bne.n	25532 <AD5940_AFECtrlS+0x3c>
    if (AfeCtrlSet & AFECTRL_HPREFPWR) {
   2550c:	b11b      	cbz	r3, 25516 <AD5940_AFECtrlS+0x20>
        tempreg &= ~BITM_AFE_AFECON_HPREFDIS;
   2550e:	f020 0020 	bic.w	r0, r0, #32
        AfeCtrlSet &= ~AFECTRL_HPREFPWR;
   25512:	f024 0420 	bic.w	r4, r4, #32
    if(AfeCtrlSet & AFECTRL_ALDOLIMIT)
   25516:	0322      	lsls	r2, r4, #12
      tempreg &= ~BITM_AFE_AFECON_ALDOILIMITEN;
   25518:	bf44      	itt	mi
   2551a:	f420 2000 	bicmi.w	r0, r0, #524288	; 0x80000
      AfeCtrlSet &= ~AFECTRL_ALDOLIMIT;
   2551e:	f424 2400 	bicmi.w	r4, r4, #524288	; 0x80000
    tempreg |= AfeCtrlSet;
   25522:	ea44 0100 	orr.w	r1, r4, r0
}
   25526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  AD5940_WriteReg(REG_AFE_AFECON, tempreg);
   2552a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   2552e:	f7ec b80f 	b.w	11550 <AD5940_WriteReg>
    if(AfeCtrlSet & AFECTRL_HPREFPWR)
   25532:	b11b      	cbz	r3, 2553c <AD5940_AFECtrlS+0x46>
        tempreg |= BITM_AFE_AFECON_HPREFDIS;
   25534:	f040 0020 	orr.w	r0, r0, #32
        AfeCtrlSet &= ~AFECTRL_HPREFPWR;
   25538:	f024 0420 	bic.w	r4, r4, #32
    if(AfeCtrlSet & AFECTRL_ALDOLIMIT)
   2553c:	0323      	lsls	r3, r4, #12
      tempreg |= BITM_AFE_AFECON_ALDOILIMITEN;
   2553e:	bf44      	itt	mi
   25540:	f440 2000 	orrmi.w	r0, r0, #524288	; 0x80000
      AfeCtrlSet &= ~AFECTRL_ALDOLIMIT;
   25544:	f424 2400 	bicmi.w	r4, r4, #524288	; 0x80000
    tempreg &= ~AfeCtrlSet;
   25548:	ea20 0104 	bic.w	r1, r0, r4
   2554c:	e7eb      	b.n	25526 <AD5940_AFECtrlS+0x30>

0002554e <AD5940_AFEPwrBW>:
  AD5940_WriteReg(REG_AFE_PMBW, tempreg);
   2554e:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
   25552:	f242 20f0 	movw	r0, #8944	; 0x22f0
   25556:	f7eb bffb 	b.w	11550 <AD5940_WriteReg>

0002555a <AD5940_REFCfgS>:
{
   2555a:	b510      	push	{r4, lr}
   2555c:	4604      	mov	r4, r0
  tempreg = AD5940_ReadReg(REG_AFE_AFECON);
   2555e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   25562:	f7ec f845 	bl	115f0 <AD5940_ReadReg>
  if(pBufCfg->HpBandgapEn == bFALSE)
   25566:	7823      	ldrb	r3, [r4, #0]
  tempreg &= ~BITM_AFE_AFECON_HPREFDIS;
   25568:	f020 0120 	bic.w	r1, r0, #32
  if(pBufCfg->HpBandgapEn == bFALSE)
   2556c:	b90b      	cbnz	r3, 25572 <AD5940_REFCfgS+0x18>
    tempreg |= BITM_AFE_AFECON_HPREFDIS;
   2556e:	f041 0120 	orr.w	r1, r1, #32
  AD5940_WriteReg(REG_AFE_AFECON, tempreg);
   25572:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   25576:	f7eb ffeb 	bl	11550 <AD5940_WriteReg>
  tempreg = AD5940_ReadReg(REG_AFE_BUFSENCON);
   2557a:	f44f 5006 	mov.w	r0, #8576	; 0x2180
   2557e:	f7ec f837 	bl	115f0 <AD5940_ReadReg>
  if(pBufCfg->Hp1V8BuffEn == bTRUE)
   25582:	7863      	ldrb	r3, [r4, #1]
   25584:	2b01      	cmp	r3, #1
  if(pBufCfg->Hp1V1BuffEn == bTRUE)
   25586:	78a3      	ldrb	r3, [r4, #2]
  tempreg = AD5940_ReadReg(REG_AFE_BUFSENCON);
   25588:	4601      	mov	r1, r0
    tempreg |= BITM_AFE_BUFSENCON_V1P8HPADCEN;
   2558a:	bf08      	it	eq
   2558c:	f040 0101 	orreq.w	r1, r0, #1
  if(pBufCfg->Hp1V1BuffEn == bTRUE)
   25590:	2b01      	cmp	r3, #1
  if(pBufCfg->Lp1V8BuffEn == bTRUE)
   25592:	78e3      	ldrb	r3, [r4, #3]
    tempreg |= BITM_AFE_BUFSENCON_V1P1HPADCEN;
   25594:	bf08      	it	eq
   25596:	f041 0110 	orreq.w	r1, r1, #16
  if(pBufCfg->Lp1V8BuffEn == bTRUE)
   2559a:	2b01      	cmp	r3, #1
  if(pBufCfg->Lp1V1BuffEn == bTRUE)
   2559c:	7923      	ldrb	r3, [r4, #4]
    tempreg |= BITM_AFE_BUFSENCON_V1P8LPADCEN;
   2559e:	bf08      	it	eq
   255a0:	f041 0104 	orreq.w	r1, r1, #4
  if(pBufCfg->Lp1V1BuffEn == bTRUE)
   255a4:	2b01      	cmp	r3, #1
  if(pBufCfg->Hp1V8ThemBuff == bTRUE)
   255a6:	7a63      	ldrb	r3, [r4, #9]
    tempreg |= BITM_AFE_BUFSENCON_V1P1LPADCEN;
   255a8:	bf08      	it	eq
   255aa:	f041 0120 	orreq.w	r1, r1, #32
  if(pBufCfg->Hp1V8ThemBuff == bTRUE)
   255ae:	2b01      	cmp	r3, #1
  if(pBufCfg->Hp1V8Ilimit == bTRUE)
   255b0:	7aa3      	ldrb	r3, [r4, #10]
    tempreg |= BITM_AFE_BUFSENCON_V1P8THERMSTEN;
   255b2:	bf08      	it	eq
   255b4:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
  if(pBufCfg->Hp1V8Ilimit == bTRUE)
   255b8:	2b01      	cmp	r3, #1
  if(pBufCfg->Disc1V8Cap == bTRUE)
   255ba:	7ae3      	ldrb	r3, [r4, #11]
    tempreg |= BITM_AFE_BUFSENCON_V1P8HPADCILIMITEN;
   255bc:	bf08      	it	eq
   255be:	f041 0102 	orreq.w	r1, r1, #2
  if(pBufCfg->Disc1V8Cap == bTRUE)
   255c2:	2b01      	cmp	r3, #1
  if(pBufCfg->Disc1V1Cap == bTRUE)
   255c4:	7b23      	ldrb	r3, [r4, #12]
    tempreg |= BITM_AFE_BUFSENCON_V1P8HPADCCHGDIS;
   255c6:	bf08      	it	eq
   255c8:	f041 0108 	orreq.w	r1, r1, #8
  if(pBufCfg->Disc1V1Cap == bTRUE)
   255cc:	2b01      	cmp	r3, #1
    tempreg |= BITM_AFE_BUFSENCON_V1P1LPADCCHGDIS;
   255ce:	bf08      	it	eq
   255d0:	f041 0140 	orreq.w	r1, r1, #64	; 0x40
  AD5940_WriteReg(REG_AFE_BUFSENCON, tempreg);
   255d4:	f44f 5006 	mov.w	r0, #8576	; 0x2180
   255d8:	f7eb ffba 	bl	11550 <AD5940_WriteReg>
  if(pBufCfg->LpRefBufEn == bFALSE)
   255dc:	79a3      	ldrb	r3, [r4, #6]
    tempreg |= BITM_AFE_LPREFBUFCON_LPBUF2P5DIS;
   255de:	2b00      	cmp	r3, #0
  if(pBufCfg->LpBandgapEn == bFALSE)
   255e0:	7963      	ldrb	r3, [r4, #5]
    tempreg |= BITM_AFE_LPREFBUFCON_LPBUF2P5DIS;
   255e2:	bf14      	ite	ne
   255e4:	2100      	movne	r1, #0
   255e6:	2102      	moveq	r1, #2
  if(pBufCfg->LpBandgapEn == bFALSE)
   255e8:	b90b      	cbnz	r3, 255ee <AD5940_REFCfgS+0x94>
    tempreg |= BITM_AFE_LPREFBUFCON_LPREFDIS;
   255ea:	f041 0101 	orr.w	r1, r1, #1
  if(pBufCfg->LpRefBoostEn == bTRUE)
   255ee:	79e3      	ldrb	r3, [r4, #7]
   255f0:	2b01      	cmp	r3, #1
}
   255f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tempreg |= BITM_AFE_LPREFBUFCON_BOOSTCURRENT;
   255f6:	bf08      	it	eq
   255f8:	f041 0104 	orreq.w	r1, r1, #4
  AD5940_WriteReg(REG_AFE_LPREFBUFCON, tempreg);
   255fc:	f242 0050 	movw	r0, #8272	; 0x2050
   25600:	f7eb bfa6 	b.w	11550 <AD5940_WriteReg>

00025604 <__AD5940_ReferenceON>:
{
   25604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ref_cfg.Hp1V1BuffEn = bTRUE;
   25606:	2301      	movs	r3, #1
   25608:	f88d 3002 	strb.w	r3, [sp, #2]
  ref_cfg.Hp1V8BuffEn = bTRUE;
   2560c:	f88d 3001 	strb.w	r3, [sp, #1]
  ref_cfg.HpBandgapEn = bTRUE;
   25610:	f88d 3000 	strb.w	r3, [sp]
  ref_cfg.HSDACRefEn = bTRUE;
   25614:	f88d 3008 	strb.w	r3, [sp, #8]
  ref_cfg.LpBandgapEn = bTRUE;
   25618:	f88d 3005 	strb.w	r3, [sp, #5]
  ref_cfg.LpRefBufEn = bTRUE;
   2561c:	f88d 3006 	strb.w	r3, [sp, #6]
  AD5940_REFCfgS(&ref_cfg);
   25620:	4668      	mov	r0, sp
  ref_cfg.Disc1V1Cap = bFALSE;
   25622:	2300      	movs	r3, #0
   25624:	f88d 300c 	strb.w	r3, [sp, #12]
  ref_cfg.Disc1V8Cap = bFALSE;
   25628:	f88d 300b 	strb.w	r3, [sp, #11]
  ref_cfg.Hp1V8Ilimit = bFALSE;
   2562c:	f88d 300a 	strb.w	r3, [sp, #10]
  ref_cfg.Hp1V8ThemBuff = bFALSE;
   25630:	f88d 3009 	strb.w	r3, [sp, #9]
  ref_cfg.Lp1V1BuffEn = bFALSE;
   25634:	f88d 3004 	strb.w	r3, [sp, #4]
  ref_cfg.Lp1V8BuffEn = bFALSE;
   25638:	f88d 3003 	strb.w	r3, [sp, #3]
  ref_cfg.LpRefBoostEn = bFALSE;
   2563c:	f88d 3007 	strb.w	r3, [sp, #7]
  AD5940_REFCfgS(&ref_cfg);
   25640:	f7ff ff8b 	bl	2555a <AD5940_REFCfgS>
}
   25644:	b005      	add	sp, #20
   25646:	f85d fb04 	ldr.w	pc, [sp], #4

0002564a <AD5940_SWMatrixCfgS>:
{
   2564a:	b510      	push	{r4, lr}
   2564c:	4604      	mov	r4, r0
  AD5940_WriteReg(REG_AFE_DSWFULLCON, pSwMatrix->Dswitch);
   2564e:	6801      	ldr	r1, [r0, #0]
   25650:	f242 1050 	movw	r0, #8528	; 0x2150
   25654:	f7eb ff7c 	bl	11550 <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_PSWFULLCON, pSwMatrix->Pswitch);
   25658:	6861      	ldr	r1, [r4, #4]
   2565a:	f242 1058 	movw	r0, #8536	; 0x2158
   2565e:	f7eb ff77 	bl	11550 <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_NSWFULLCON, pSwMatrix->Nswitch);
   25662:	68a1      	ldr	r1, [r4, #8]
   25664:	f242 1054 	movw	r0, #8532	; 0x2154
   25668:	f7eb ff72 	bl	11550 <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_TSWFULLCON, pSwMatrix->Tswitch);
   2566c:	68e1      	ldr	r1, [r4, #12]
   2566e:	f242 105c 	movw	r0, #8540	; 0x215c
   25672:	f7eb ff6d 	bl	11550 <AD5940_WriteReg>
}
   25676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WriteReg(REG_AFE_SWCON, BITM_AFE_SWCON_SWSOURCESEL); /* Update switch configuration */
   2567a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   2567e:	f242 000c 	movw	r0, #8204	; 0x200c
   25682:	f7eb bf65 	b.w	11550 <AD5940_WriteReg>

00025686 <AD5940_HSDacCfgS>:
  if(pHsDacCfg->ExcitBufGain == EXCITBUFGAIN_0P25)
   25686:	6803      	ldr	r3, [r0, #0]
    tempreg |= BITM_AFE_HSDACCON_INAMPGNMDE; /* Enable attenuator */
   25688:	2b01      	cmp	r3, #1
  if(pHsDacCfg->HsDacGain == HSDACGAIN_0P2)
   2568a:	6843      	ldr	r3, [r0, #4]
    tempreg |= BITM_AFE_HSDACCON_INAMPGNMDE; /* Enable attenuator */
   2568c:	bf0c      	ite	eq
   2568e:	f44f 5180 	moveq.w	r1, #4096	; 0x1000
   25692:	2100      	movne	r1, #0
  if(pHsDacCfg->HsDacGain == HSDACGAIN_0P2)
   25694:	2b01      	cmp	r3, #1
  tempreg |= (pHsDacCfg->HsDacUpdateRate&0xff)<<BITP_AFE_HSDACCON_RATE;
   25696:	6883      	ldr	r3, [r0, #8]
   25698:	ea4f 0343 	mov.w	r3, r3, lsl #1
    tempreg |= BITM_AFE_HSDACCON_ATTENEN; /* Enable attenuator */
   2569c:	bf08      	it	eq
   2569e:	f041 0101 	orreq.w	r1, r1, #1
  tempreg |= (pHsDacCfg->HsDacUpdateRate&0xff)<<BITP_AFE_HSDACCON_RATE;
   256a2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
  AD5940_WriteReg(REG_AFE_HSDACCON, tempreg);
   256a6:	4319      	orrs	r1, r3
   256a8:	f242 0010 	movw	r0, #8208	; 0x2010
   256ac:	f7eb bf50 	b.w	11550 <AD5940_WriteReg>

000256b0 <AD5940_WGCfgS>:
  if(pWGInit->WgType == WGTYPE_SIN)
   256b0:	6803      	ldr	r3, [r0, #0]
   256b2:	2b02      	cmp	r3, #2
{
   256b4:	b510      	push	{r4, lr}
   256b6:	4604      	mov	r4, r0
  if(pWGInit->WgType == WGTYPE_SIN)
   256b8:	d126      	bne.n	25708 <AD5940_WGCfgS+0x58>
    AD5940_WriteReg(REG_AFE_WGFCW, pWGInit->SinCfg.SinFreqWord);
   256ba:	6a01      	ldr	r1, [r0, #32]
   256bc:	f242 0030 	movw	r0, #8240	; 0x2030
   256c0:	f7eb ff46 	bl	11550 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGAMPLITUDE, pWGInit->SinCfg.SinAmplitudeWord);
   256c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   256c6:	f242 003c 	movw	r0, #8252	; 0x203c
   256ca:	f7eb ff41 	bl	11550 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGOFFSET, pWGInit->SinCfg.SinOffsetWord);
   256ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   256d0:	f242 0038 	movw	r0, #8248	; 0x2038
   256d4:	f7eb ff3c 	bl	11550 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGPHASE, pWGInit->SinCfg.SinPhaseWord);
   256d8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   256da:	f242 0034 	movw	r0, #8244	; 0x2034
    AD5940_WriteReg(REG_AFE_HSDACDAT, pWGInit->WgCode);
   256de:	f7eb ff37 	bl	11550 <AD5940_WriteReg>
  if(pWGInit->GainCalEn == bTRUE)
   256e2:	7923      	ldrb	r3, [r4, #4]
  if(pWGInit->OffsetCalEn == bTRUE)
   256e4:	7962      	ldrb	r2, [r4, #5]
  tempreg |= (pWGInit->WgType) << BITP_AFE_WGCON_TYPESEL;
   256e6:	6821      	ldr	r1, [r4, #0]
    tempreg |= BITM_AFE_WGCON_DACGAINCAL;
   256e8:	2b01      	cmp	r3, #1
   256ea:	bf0c      	ite	eq
   256ec:	2320      	moveq	r3, #32
   256ee:	2300      	movne	r3, #0
  if(pWGInit->OffsetCalEn == bTRUE)
   256f0:	2a01      	cmp	r2, #1
    tempreg |= BITM_AFE_WGCON_DACOFFSETCAL;
   256f2:	bf08      	it	eq
   256f4:	f043 0310 	orreq.w	r3, r3, #16
}
   256f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WriteReg(REG_AFE_WGCON, tempreg);
   256fc:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
   25700:	f242 0014 	movw	r0, #8212	; 0x2014
   25704:	f7eb bf24 	b.w	11550 <AD5940_WriteReg>
  else if(pWGInit->WgType == WGTYPE_TRAPZ)
   25708:	2b03      	cmp	r3, #3
   2570a:	d11c      	bne.n	25746 <AD5940_WGCfgS+0x96>
    AD5940_WriteReg(REG_AFE_WGDCLEVEL1, pWGInit->TrapzCfg.WGTrapzDCLevel1);
   2570c:	6881      	ldr	r1, [r0, #8]
   2570e:	f242 0018 	movw	r0, #8216	; 0x2018
   25712:	f7eb ff1d 	bl	11550 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGDCLEVEL2, pWGInit->TrapzCfg.WGTrapzDCLevel2);
   25716:	68e1      	ldr	r1, [r4, #12]
   25718:	f242 001c 	movw	r0, #8220	; 0x201c
   2571c:	f7eb ff18 	bl	11550 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGDELAY1, pWGInit->TrapzCfg.WGTrapzDelay1);
   25720:	6921      	ldr	r1, [r4, #16]
   25722:	f242 0020 	movw	r0, #8224	; 0x2020
   25726:	f7eb ff13 	bl	11550 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGDELAY2, pWGInit->TrapzCfg.WGTrapzDelay2);
   2572a:	6961      	ldr	r1, [r4, #20]
   2572c:	f242 0028 	movw	r0, #8232	; 0x2028
   25730:	f7eb ff0e 	bl	11550 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGSLOPE1, pWGInit->TrapzCfg.WGTrapzSlope1);
   25734:	69a1      	ldr	r1, [r4, #24]
   25736:	f242 0024 	movw	r0, #8228	; 0x2024
   2573a:	f7eb ff09 	bl	11550 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGSLOPE2, pWGInit->TrapzCfg.WGTrapzSlope2);
   2573e:	69e1      	ldr	r1, [r4, #28]
   25740:	f242 002c 	movw	r0, #8236	; 0x202c
   25744:	e7cb      	b.n	256de <AD5940_WGCfgS+0x2e>
    AD5940_WriteReg(REG_AFE_HSDACDAT, pWGInit->WgCode);
   25746:	6b01      	ldr	r1, [r0, #48]	; 0x30
   25748:	f242 0048 	movw	r0, #8264	; 0x2048
   2574c:	e7c7      	b.n	256de <AD5940_WGCfgS+0x2e>

0002574e <AD5940_HSLoopCfgS>:
{
   2574e:	b510      	push	{r4, lr}
   25750:	4604      	mov	r4, r0
  AD5940_HSDacCfgS(&pHsLoopCfg->HsDacCfg);
   25752:	3010      	adds	r0, #16
   25754:	f7ff ff97 	bl	25686 <AD5940_HSDacCfgS>
  AD5940_HSTIACfgS(&pHsLoopCfg->HsTiaCfg);
   25758:	f104 0050 	add.w	r0, r4, #80	; 0x50
   2575c:	f7eb ff9e 	bl	1169c <AD5940_HSTIACfgS>
  AD5940_SWMatrixCfgS(&pHsLoopCfg->SWMatCfg);
   25760:	4620      	mov	r0, r4
   25762:	f7ff ff72 	bl	2564a <AD5940_SWMatrixCfgS>
  AD5940_WGCfgS(&pHsLoopCfg->WgCfg);
   25766:	f104 001c 	add.w	r0, r4, #28
}
   2576a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WGCfgS(&pHsLoopCfg->WgCfg);
   2576e:	f7ff bf9f 	b.w	256b0 <AD5940_WGCfgS>

00025772 <AD5940_ReadAfeResult>:
  switch (AfeResultSel)
   25772:	2806      	cmp	r0, #6
   25774:	d81b      	bhi.n	257ae <AD5940_ReadAfeResult+0x3c>
   25776:	e8df f000 	tbb	[pc, r0]
   2577a:	0804      	.short	0x0804
   2577c:	14110e0b 	.word	0x14110e0b
   25780:	17          	.byte	0x17
   25781:	00          	.byte	0x00
      rd = AD5940_ReadReg(REG_AFE_ADCDAT);
   25782:	f242 0074 	movw	r0, #8308	; 0x2074
      rd = AD5940_ReadReg(REG_AFE_STATSVAR);
   25786:	f7eb bf33 	b.w	115f0 <AD5940_ReadReg>
      rd = AD5940_ReadReg(REG_AFE_SINC2DAT);
   2578a:	f44f 5002 	mov.w	r0, #8320	; 0x2080
   2578e:	e7fa      	b.n	25786 <AD5940_ReadAfeResult+0x14>
      rd = AD5940_ReadReg(REG_AFE_TEMPSENSDAT);
   25790:	f242 0084 	movw	r0, #8324	; 0x2084
   25794:	e7f7      	b.n	25786 <AD5940_ReadAfeResult+0x14>
      rd = AD5940_ReadReg(REG_AFE_DFTREAL);
   25796:	f242 0078 	movw	r0, #8312	; 0x2078
   2579a:	e7f4      	b.n	25786 <AD5940_ReadAfeResult+0x14>
      rd = AD5940_ReadReg(REG_AFE_DFTIMAG);
   2579c:	f242 007c 	movw	r0, #8316	; 0x207c
   257a0:	e7f1      	b.n	25786 <AD5940_ReadAfeResult+0x14>
      rd = AD5940_ReadReg(REG_AFE_STATSMEAN);
   257a2:	f242 10c8 	movw	r0, #8648	; 0x21c8
   257a6:	e7ee      	b.n	25786 <AD5940_ReadAfeResult+0x14>
      rd = AD5940_ReadReg(REG_AFE_STATSVAR);
   257a8:	f44f 5007 	mov.w	r0, #8640	; 0x21c0
   257ac:	e7eb      	b.n	25786 <AD5940_ReadAfeResult+0x14>
}
   257ae:	2000      	movs	r0, #0
   257b0:	4770      	bx	lr

000257b2 <AD5940_ADCBaseCfgS>:
  tempreg |= (uint32_t)(pADCInit->ADCMuxN)<<BITP_AFE_ADCCON_MUXSELN;
   257b2:	e9d0 1200 	ldrd	r1, r2, [r0]
  tempreg |= (uint32_t)(pADCInit->ADCPga)<<BITP_AFE_ADCCON_GNPGA;
   257b6:	6883      	ldr	r3, [r0, #8]
   257b8:	041b      	lsls	r3, r3, #16
   257ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  AD5940_WriteReg(REG_AFE_ADCCON, tempreg);
   257be:	4319      	orrs	r1, r3
   257c0:	f242 10a8 	movw	r0, #8616	; 0x21a8
   257c4:	f7eb bec4 	b.w	11550 <AD5940_WriteReg>

000257c8 <AD5940_ADCFilterCfgS>:
{
   257c8:	b510      	push	{r4, lr}
   257ca:	4604      	mov	r4, r0
  tempreg = AD5940_ReadReg(REG_AFE_ADCFILTERCON);
   257cc:	f242 0044 	movw	r0, #8260	; 0x2044
   257d0:	f7eb ff0e 	bl	115f0 <AD5940_ReadReg>
  if(pFiltCfg->BpNotch == bTRUE)
   257d4:	7c23      	ldrb	r3, [r4, #16]
  tempreg |= pFiltCfg->ADCRate;
   257d6:	68e1      	ldr	r1, [r4, #12]
  if(pFiltCfg->BpNotch == bTRUE)
   257d8:	2b01      	cmp	r3, #1
  tempreg &= BITM_AFE_ADCFILTERCON_AVRGEN; /* Keep this bit setting. */
   257da:	f000 0080 	and.w	r0, r0, #128	; 0x80
  if(pFiltCfg->BpSinc3 == bTRUE)
   257de:	7c63      	ldrb	r3, [r4, #17]
  tempreg |= pFiltCfg->ADCRate;
   257e0:	ea40 0001 	orr.w	r0, r0, r1
    tempreg |= BITM_AFE_ADCFILTERCON_LPFBYPEN;
   257e4:	bf08      	it	eq
   257e6:	f040 0010 	orreq.w	r0, r0, #16
  if(pFiltCfg->BpSinc3 == bTRUE)
   257ea:	2b01      	cmp	r3, #1
  tempreg |= (uint32_t)(pFiltCfg->ADCSinc3Osr)<<BITP_AFE_ADCFILTERCON_SINC3OSR;
   257ec:	e9d4 1300 	ldrd	r1, r3, [r4]
   257f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  tempreg |= (uint32_t)(pFiltCfg->ADCAvgNum)<<BITP_AFE_ADCFILTERCON_AVRGNUM;
   257f4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   257f8:	68a3      	ldr	r3, [r4, #8]
    tempreg |= BITM_AFE_ADCFILTERCON_SINC3BYP;
   257fa:	bf08      	it	eq
   257fc:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
  tempreg |= (uint32_t)(pFiltCfg->ADCAvgNum)<<BITP_AFE_ADCFILTERCON_AVRGNUM;
   25800:	ea41 3183 	orr.w	r1, r1, r3, lsl #14
  AD5940_WriteReg(REG_AFE_ADCFILTERCON, tempreg);
   25804:	4301      	orrs	r1, r0
   25806:	f242 0044 	movw	r0, #8260	; 0x2044
   2580a:	f7eb fea1 	bl	11550 <AD5940_WriteReg>
  if(pFiltCfg->Sinc2NotchEnable)
   2580e:	7ca3      	ldrb	r3, [r4, #18]
   25810:	b133      	cbz	r3, 25820 <AD5940_ADCFilterCfgS+0x58>
}
   25812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    AD5940_AFECtrlS(AFECTRL_SINC2NOTCH,bTRUE);
   25816:	2101      	movs	r1, #1
   25818:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   2581c:	f7ff be6b 	b.w	254f6 <AD5940_AFECtrlS>
}
   25820:	bd10      	pop	{r4, pc}

00025822 <AD5940_ADCPowerCtrlS>:
{
   25822:	b510      	push	{r4, lr}
   25824:	4604      	mov	r4, r0
  tempreg = AD5940_ReadReg(REG_AFE_AFECON);
   25826:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   2582a:	f7eb fee1 	bl	115f0 <AD5940_ReadReg>
  if(State == bTRUE)
   2582e:	2c01      	cmp	r4, #1
  tempreg = AD5940_ReadReg(REG_AFE_AFECON);
   25830:	4601      	mov	r1, r0
}
   25832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tempreg |= BITM_AFE_AFECON_ADCEN;
   25836:	bf0c      	ite	eq
   25838:	f040 0180 	orreq.w	r1, r0, #128	; 0x80
    tempreg &= ~BITM_AFE_AFECON_ADCEN;
   2583c:	f021 0180 	bicne.w	r1, r1, #128	; 0x80
  AD5940_WriteReg(REG_AFE_AFECON,tempreg);
   25840:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   25844:	f7eb be84 	b.w	11550 <AD5940_WriteReg>

00025848 <AD5940_ADCConvtCtrlS>:
{
   25848:	b510      	push	{r4, lr}
   2584a:	4604      	mov	r4, r0
  tempreg = AD5940_ReadReg(REG_AFE_AFECON);
   2584c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   25850:	f7eb fece 	bl	115f0 <AD5940_ReadReg>
  if(State == bTRUE)
   25854:	2c01      	cmp	r4, #1
  tempreg = AD5940_ReadReg(REG_AFE_AFECON);
   25856:	4601      	mov	r1, r0
}
   25858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tempreg |= BITM_AFE_AFECON_ADCCONVEN;
   2585c:	bf0c      	ite	eq
   2585e:	f440 7180 	orreq.w	r1, r0, #256	; 0x100
    tempreg &= ~BITM_AFE_AFECON_ADCCONVEN;
   25862:	f421 7180 	bicne.w	r1, r1, #256	; 0x100
  AD5940_WriteReg(REG_AFE_AFECON,tempreg);
   25866:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   2586a:	f7eb be71 	b.w	11550 <AD5940_WriteReg>

0002586e <AD5940_INTCCfg>:
{
   2586e:	b570      	push	{r4, r5, r6, lr}
  tempreg = AD5940_ReadReg(regaddr);
   25870:	f243 030c 	movw	r3, #12300	; 0x300c
   25874:	f243 0408 	movw	r4, #12296	; 0x3008
   25878:	2801      	cmp	r0, #1
   2587a:	bf08      	it	eq
   2587c:	461c      	moveq	r4, r3
   2587e:	4620      	mov	r0, r4
{
   25880:	460d      	mov	r5, r1
   25882:	4616      	mov	r6, r2
  tempreg = AD5940_ReadReg(regaddr);
   25884:	f7eb feb4 	bl	115f0 <AD5940_ReadReg>
  if(State == bTRUE)
   25888:	2e01      	cmp	r6, #1
    tempreg |= AFEIntSrc;    /* Enable this interrupt */
   2588a:	bf0c      	ite	eq
   2588c:	ea40 0105 	orreq.w	r1, r0, r5
    tempreg &= ~(AFEIntSrc); /* Disable this interrupt  */
   25890:	ea20 0105 	bicne.w	r1, r0, r5
  AD5940_WriteReg(regaddr,tempreg);
   25894:	4620      	mov	r0, r4
}
   25896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  AD5940_WriteReg(regaddr,tempreg);
   2589a:	f7eb be59 	b.w	11550 <AD5940_WriteReg>

0002589e <AD5940_INTCClrFlag>:
{
   2589e:	4601      	mov	r1, r0
  AD5940_WriteReg(REG_INTC_INTCCLR,AfeIntSrcSel);
   258a0:	f243 0004 	movw	r0, #12292	; 0x3004
   258a4:	f7eb be54 	b.w	11550 <AD5940_WriteReg>

000258a8 <AD5940_INTCTestFlag>:
  tempreg = AD5940_ReadReg(regaddr);
   258a8:	f243 0210 	movw	r2, #12304	; 0x3010
   258ac:	f243 0314 	movw	r3, #12308	; 0x3014
{
   258b0:	b510      	push	{r4, lr}
  tempreg = AD5940_ReadReg(regaddr);
   258b2:	2800      	cmp	r0, #0
   258b4:	bf0c      	ite	eq
   258b6:	4610      	moveq	r0, r2
   258b8:	4618      	movne	r0, r3
{
   258ba:	460c      	mov	r4, r1
  tempreg = AD5940_ReadReg(regaddr);
   258bc:	f7eb fe98 	bl	115f0 <AD5940_ReadReg>
  if(tempreg & AfeIntSrcSel)
   258c0:	4220      	tst	r0, r4
}
   258c2:	bf14      	ite	ne
   258c4:	2001      	movne	r0, #1
   258c6:	2000      	moveq	r0, #0
   258c8:	bd10      	pop	{r4, pc}

000258ca <AD5940_HWReset>:
{
   258ca:	b508      	push	{r3, lr}
  AD5940_RstClr();
   258cc:	f000 f81a 	bl	25904 <AD5940_RstClr>
  AD5940_Delay10us(200); /* Delay some time */
   258d0:	20c8      	movs	r0, #200	; 0xc8
   258d2:	f000 f808 	bl	258e6 <AD5940_Delay10us>
  AD5940_RstSet();
   258d6:	f000 f819 	bl	2590c <AD5940_RstSet>
}
   258da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  AD5940_Delay10us(500); /* AD5940 need some time to exit reset status. 200us looks good. */
   258de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   258e2:	f000 b800 	b.w	258e6 <AD5940_Delay10us>

000258e6 <AD5940_Delay10us>:
    uint32_t time_total_us = time * 10 ; 
   258e6:	2801      	cmp	r0, #1
   258e8:	bf38      	it	cc
   258ea:	2001      	movcc	r0, #1
	return z_impl_k_usleep(us);
   258ec:	230a      	movs	r3, #10
   258ee:	4358      	muls	r0, r3
   258f0:	f7fc ba36 	b.w	21d60 <z_impl_k_usleep>

000258f4 <AD5940_CsClr>:
    gpio_pin_set(gpio_dev, CS_PIN, 0);
   258f4:	2100      	movs	r1, #0
   258f6:	201f      	movs	r0, #31
   258f8:	f7ec b8a0 	b.w	11a3c <gpio_pin_set.constprop.0.isra.0>

000258fc <AD5940_CsSet>:
    gpio_pin_set(gpio_dev, CS_PIN, 1);
   258fc:	2101      	movs	r1, #1
   258fe:	201f      	movs	r0, #31
   25900:	f7ec b89c 	b.w	11a3c <gpio_pin_set.constprop.0.isra.0>

00025904 <AD5940_RstClr>:
    gpio_pin_set(gpio_dev, RESET_PIN, 0);
   25904:	2100      	movs	r1, #0
   25906:	201e      	movs	r0, #30
   25908:	f7ec b898 	b.w	11a3c <gpio_pin_set.constprop.0.isra.0>

0002590c <AD5940_RstSet>:
    gpio_pin_set(gpio_dev, RESET_PIN, 1);
   2590c:	2101      	movs	r1, #1
   2590e:	201e      	movs	r0, #30
   25910:	f7ec b894 	b.w	11a3c <gpio_pin_set.constprop.0.isra.0>

00025914 <cbpprintf_external>:
{
   25914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25918:	4607      	mov	r7, r0
   2591a:	460e      	mov	r6, r1
   2591c:	4690      	mov	r8, r2
	if (buf == NULL) {
   2591e:	461d      	mov	r5, r3
   25920:	b30b      	cbz	r3, 25966 <cbpprintf_external+0x52>
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
   25922:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   25924:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = hdr->hdr.desc.str_cnt;
   25926:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
   2592a:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
   2592c:	441c      	add	r4, r3
   2592e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   25932:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
   25934:	f04f 0900 	mov.w	r9, #0
   25938:	45d1      	cmp	r9, sl
   2593a:	d308      	bcc.n	2594e <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
   2593c:	686a      	ldr	r2, [r5, #4]
   2593e:	f105 0308 	add.w	r3, r5, #8
   25942:	4641      	mov	r1, r8
   25944:	4638      	mov	r0, r7
   25946:	46b4      	mov	ip, r6
}
   25948:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   2594c:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   2594e:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   25952:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   25956:	4620      	mov	r0, r4
   25958:	f001 f988 	bl	26c6c <strlen>
   2595c:	3001      	adds	r0, #1
   2595e:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   25960:	f109 0901 	add.w	r9, r9, #1
   25964:	e7e8      	b.n	25938 <cbpprintf_external+0x24>
}
   25966:	f06f 0015 	mvn.w	r0, #21
   2596a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002596e <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   2596e:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   25970:	2364      	movs	r3, #100	; 0x64
{
   25972:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   25974:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   25976:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   25978:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   2597c:	b111      	cbz	r1, 25984 <u8_to_dec+0x16>
   2597e:	3d01      	subs	r5, #1
   25980:	d101      	bne.n	25986 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   25982:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   25984:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   25986:	429a      	cmp	r2, r3
		digit = value / divisor;
   25988:	fbb2 f7f3 	udiv	r7, r2, r3
   2598c:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   2598e:	d202      	bcs.n	25996 <u8_to_dec+0x28>
   25990:	2b01      	cmp	r3, #1
   25992:	d000      	beq.n	25996 <u8_to_dec+0x28>
   25994:	b130      	cbz	r0, 259a4 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   25996:	3630      	adds	r6, #48	; 0x30
			buflen--;
   25998:	3901      	subs	r1, #1
			num_digits++;
   2599a:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   2599c:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   259a0:	b2c9      	uxtb	r1, r1
			num_digits++;
   259a2:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   259a4:	fb03 2217 	mls	r2, r3, r7, r2
   259a8:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   259aa:	fbb3 f3fc 	udiv	r3, r3, ip
   259ae:	e7e5      	b.n	2597c <u8_to_dec+0xe>

000259b0 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   259b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   259b4:	b2db      	uxtb	r3, r3
   259b6:	2b09      	cmp	r3, #9
   259b8:	d802      	bhi.n	259c0 <char2hex+0x10>
		*x = c - '0';
   259ba:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   259bc:	2000      	movs	r0, #0
   259be:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   259c0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   259c4:	2b05      	cmp	r3, #5
   259c6:	d802      	bhi.n	259ce <char2hex+0x1e>
		*x = c - 'a' + 10;
   259c8:	3857      	subs	r0, #87	; 0x57
   259ca:	7008      	strb	r0, [r1, #0]
   259cc:	e7f6      	b.n	259bc <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   259ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   259d2:	2b05      	cmp	r3, #5
   259d4:	d801      	bhi.n	259da <char2hex+0x2a>
		*x = c - 'A' + 10;
   259d6:	3837      	subs	r0, #55	; 0x37
   259d8:	e7f7      	b.n	259ca <char2hex+0x1a>
		return -EINVAL;
   259da:	f06f 0015 	mvn.w	r0, #21
}
   259de:	4770      	bx	lr

000259e0 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   259e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   259e2:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   259e4:	f001 0001 	and.w	r0, r1, #1
   259e8:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   259ec:	429d      	cmp	r5, r3
   259ee:	ea4f 0651 	mov.w	r6, r1, lsr #1
   259f2:	d903      	bls.n	259fc <hex2bin+0x1c>
		return 0;
   259f4:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   259f6:	4628      	mov	r0, r5
   259f8:	b003      	add	sp, #12
   259fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   259fc:	b158      	cbz	r0, 25a16 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   259fe:	7820      	ldrb	r0, [r4, #0]
   25a00:	f10d 0107 	add.w	r1, sp, #7
   25a04:	f7ff ffd4 	bl	259b0 <char2hex>
   25a08:	2800      	cmp	r0, #0
   25a0a:	dbf3      	blt.n	259f4 <hex2bin+0x14>
		buf[0] = dec;
   25a0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25a10:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   25a14:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   25a16:	3401      	adds	r4, #1
   25a18:	4416      	add	r6, r2
   25a1a:	42b2      	cmp	r2, r6
   25a1c:	d0eb      	beq.n	259f6 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   25a1e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   25a22:	f10d 0107 	add.w	r1, sp, #7
   25a26:	f7ff ffc3 	bl	259b0 <char2hex>
   25a2a:	2800      	cmp	r0, #0
   25a2c:	dbe2      	blt.n	259f4 <hex2bin+0x14>
		buf[i] = dec << 4;
   25a2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25a32:	011b      	lsls	r3, r3, #4
   25a34:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   25a36:	f814 0b02 	ldrb.w	r0, [r4], #2
   25a3a:	f7ff ffb9 	bl	259b0 <char2hex>
   25a3e:	2800      	cmp	r0, #0
   25a40:	dbd8      	blt.n	259f4 <hex2bin+0x14>
		buf[i] += dec;
   25a42:	7813      	ldrb	r3, [r2, #0]
   25a44:	f89d 1007 	ldrb.w	r1, [sp, #7]
   25a48:	440b      	add	r3, r1
   25a4a:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   25a4e:	e7e4      	b.n	25a1a <hex2bin+0x3a>

00025a50 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   25a50:	4603      	mov	r3, r0
   25a52:	b140      	cbz	r0, 25a66 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   25a54:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   25a56:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   25a5a:	2a02      	cmp	r2, #2
   25a5c:	d006      	beq.n	25a6c <sys_notify_validate+0x1c>
   25a5e:	2a03      	cmp	r2, #3
   25a60:	d004      	beq.n	25a6c <sys_notify_validate+0x1c>
   25a62:	2a01      	cmp	r2, #1
   25a64:	d005      	beq.n	25a72 <sys_notify_validate+0x22>
		return -EINVAL;
   25a66:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   25a6a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   25a6c:	681a      	ldr	r2, [r3, #0]
   25a6e:	2a00      	cmp	r2, #0
   25a70:	d0f9      	beq.n	25a66 <sys_notify_validate+0x16>
		notify->result = 0;
   25a72:	2000      	movs	r0, #0
   25a74:	6098      	str	r0, [r3, #8]
   25a76:	4770      	bx	lr

00025a78 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   25a78:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   25a7a:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   25a7e:	2a02      	cmp	r2, #2
{
   25a80:	b510      	push	{r4, lr}
   25a82:	4603      	mov	r3, r0
	notify->result = res;
   25a84:	6081      	str	r1, [r0, #8]
	switch (method) {
   25a86:	d00a      	beq.n	25a9e <sys_notify_finalize+0x26>
   25a88:	2a03      	cmp	r2, #3
   25a8a:	d10b      	bne.n	25aa4 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   25a8c:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   25a8e:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   25a90:	2200      	movs	r2, #0
   25a92:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   25a94:	b108      	cbz	r0, 25a9a <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   25a96:	f7fc fc61 	bl	2235c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   25a9a:	4620      	mov	r0, r4
   25a9c:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   25a9e:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   25aa0:	2400      	movs	r4, #0
		break;
   25aa2:	e7f5      	b.n	25a90 <sys_notify_finalize+0x18>
	switch (method) {
   25aa4:	2400      	movs	r4, #0
   25aa6:	4620      	mov	r0, r4
   25aa8:	e7f2      	b.n	25a90 <sys_notify_finalize+0x18>

00025aaa <arch_printk_char_out>:
}
   25aaa:	2000      	movs	r0, #0
   25aac:	4770      	bx	lr

00025aae <str_out>:
{
   25aae:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   25ab0:	688a      	ldr	r2, [r1, #8]
   25ab2:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   25ab4:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   25ab6:	b114      	cbz	r4, 25abe <str_out+0x10>
   25ab8:	684b      	ldr	r3, [r1, #4]
   25aba:	4293      	cmp	r3, r2
   25abc:	dc01      	bgt.n	25ac2 <str_out+0x14>
		ctx->count++;
   25abe:	608d      	str	r5, [r1, #8]
}
   25ac0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   25ac2:	3b01      	subs	r3, #1
   25ac4:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   25ac6:	bf08      	it	eq
   25ac8:	2200      	moveq	r2, #0
   25aca:	608d      	str	r5, [r1, #8]
   25acc:	bf0c      	ite	eq
   25ace:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   25ad0:	54a0      	strbne	r0, [r4, r2]
   25ad2:	e7f5      	b.n	25ac0 <str_out+0x12>

00025ad4 <vprintk>:
		z_log_vprintk(fmt, ap);
   25ad4:	f000 bd0e 	b.w	264f4 <z_log_vprintk>

00025ad8 <printk>:
{
   25ad8:	b40f      	push	{r0, r1, r2, r3}
   25ada:	b507      	push	{r0, r1, r2, lr}
   25adc:	a904      	add	r1, sp, #16
   25ade:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   25ae2:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   25ae4:	f000 fd06 	bl	264f4 <z_log_vprintk>
}
   25ae8:	b003      	add	sp, #12
   25aea:	f85d eb04 	ldr.w	lr, [sp], #4
   25aee:	b004      	add	sp, #16
   25af0:	4770      	bx	lr

00025af2 <snprintk>:
{
   25af2:	b40c      	push	{r2, r3}
   25af4:	b507      	push	{r0, r1, r2, lr}
   25af6:	ab04      	add	r3, sp, #16
   25af8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   25afc:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   25afe:	f7ec fc5f 	bl	123c0 <vsnprintk>
}
   25b02:	b003      	add	sp, #12
   25b04:	f85d eb04 	ldr.w	lr, [sp], #4
   25b08:	b002      	add	sp, #8
   25b0a:	4770      	bx	lr

00025b0c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   25b0c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   25b0e:	f013 0307 	ands.w	r3, r3, #7
   25b12:	d105      	bne.n	25b20 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   25b14:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   25b16:	2b00      	cmp	r3, #0
   25b18:	bf0c      	ite	eq
   25b1a:	2000      	moveq	r0, #0
   25b1c:	2003      	movne	r0, #3
   25b1e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   25b20:	2b02      	cmp	r3, #2
   25b22:	d105      	bne.n	25b30 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   25b24:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   25b26:	2b00      	cmp	r3, #0
   25b28:	bf14      	ite	ne
   25b2a:	2000      	movne	r0, #0
   25b2c:	2004      	moveq	r0, #4
   25b2e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   25b30:	2b01      	cmp	r3, #1
   25b32:	d105      	bne.n	25b40 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   25b34:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   25b36:	2b00      	cmp	r3, #0
   25b38:	bf0c      	ite	eq
   25b3a:	2000      	moveq	r0, #0
   25b3c:	2005      	movne	r0, #5
   25b3e:	4770      	bx	lr
	int evt = EVT_NOP;
   25b40:	2000      	movs	r0, #0
}
   25b42:	4770      	bx	lr

00025b44 <notify_one>:
{
   25b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25b48:	460d      	mov	r5, r1
   25b4a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   25b4c:	4619      	mov	r1, r3
   25b4e:	1d28      	adds	r0, r5, #4
{
   25b50:	4690      	mov	r8, r2
   25b52:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   25b54:	f7ff ff90 	bl	25a78 <sys_notify_finalize>
	if (cb) {
   25b58:	4604      	mov	r4, r0
   25b5a:	b138      	cbz	r0, 25b6c <notify_one+0x28>
		cb(mgr, cli, state, res);
   25b5c:	4633      	mov	r3, r6
   25b5e:	4642      	mov	r2, r8
   25b60:	4629      	mov	r1, r5
   25b62:	4638      	mov	r0, r7
   25b64:	46a4      	mov	ip, r4
}
   25b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   25b6a:	4760      	bx	ip
}
   25b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025b70 <transition_complete>:
{
   25b70:	b410      	push	{r4}
	__asm__ volatile(
   25b72:	f04f 0440 	mov.w	r4, #64	; 0x40
   25b76:	f3ef 8211 	mrs	r2, BASEPRI
   25b7a:	f384 8812 	msr	BASEPRI_MAX, r4
   25b7e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   25b82:	6141      	str	r1, [r0, #20]
}
   25b84:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   25b86:	2101      	movs	r1, #1
   25b88:	f7ec bc30 	b.w	123ec <process_event>

00025b8c <validate_args>:
{
   25b8c:	b510      	push	{r4, lr}
   25b8e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   25b90:	b140      	cbz	r0, 25ba4 <validate_args+0x18>
   25b92:	b139      	cbz	r1, 25ba4 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   25b94:	1d08      	adds	r0, r1, #4
   25b96:	f7ff ff5b 	bl	25a50 <sys_notify_validate>
	if ((rv == 0)
   25b9a:	b928      	cbnz	r0, 25ba8 <validate_args+0x1c>
	    && ((cli->notify.flags
   25b9c:	68a3      	ldr	r3, [r4, #8]
   25b9e:	f033 0303 	bics.w	r3, r3, #3
   25ba2:	d001      	beq.n	25ba8 <validate_args+0x1c>
		rv = -EINVAL;
   25ba4:	f06f 0015 	mvn.w	r0, #21
}
   25ba8:	bd10      	pop	{r4, pc}

00025baa <onoff_manager_init>:
{
   25baa:	b538      	push	{r3, r4, r5, lr}
   25bac:	460c      	mov	r4, r1
	if ((mgr == NULL)
   25bae:	4605      	mov	r5, r0
   25bb0:	b158      	cbz	r0, 25bca <onoff_manager_init+0x20>
	    || (transitions == NULL)
   25bb2:	b151      	cbz	r1, 25bca <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   25bb4:	680b      	ldr	r3, [r1, #0]
   25bb6:	b143      	cbz	r3, 25bca <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   25bb8:	684b      	ldr	r3, [r1, #4]
   25bba:	b133      	cbz	r3, 25bca <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   25bbc:	221c      	movs	r2, #28
   25bbe:	2100      	movs	r1, #0
   25bc0:	f001 f8b5 	bl	26d2e <memset>
   25bc4:	612c      	str	r4, [r5, #16]
	return 0;
   25bc6:	2000      	movs	r0, #0
}
   25bc8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   25bca:	f06f 0015 	mvn.w	r0, #21
   25bce:	e7fb      	b.n	25bc8 <onoff_manager_init+0x1e>

00025bd0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   25bd0:	b570      	push	{r4, r5, r6, lr}
   25bd2:	4604      	mov	r4, r0
   25bd4:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   25bd6:	f7ff ffd9 	bl	25b8c <validate_args>

	if (rv < 0) {
   25bda:	1e05      	subs	r5, r0, #0
   25bdc:	db31      	blt.n	25c42 <onoff_request+0x72>
   25bde:	f04f 0340 	mov.w	r3, #64	; 0x40
   25be2:	f3ef 8111 	mrs	r1, BASEPRI
   25be6:	f383 8812 	msr	BASEPRI_MAX, r3
   25bea:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   25bee:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   25bf0:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   25bf2:	f64f 75ff 	movw	r5, #65535	; 0xffff
   25bf6:	42ab      	cmp	r3, r5
   25bf8:	f000 0207 	and.w	r2, r0, #7
   25bfc:	d02e      	beq.n	25c5c <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   25bfe:	2a02      	cmp	r2, #2
   25c00:	d10e      	bne.n	25c20 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   25c02:	3301      	adds	r3, #1
   25c04:	8363      	strh	r3, [r4, #26]
	rv = state;
   25c06:	4615      	mov	r5, r2
		notify = true;
   25c08:	2301      	movs	r3, #1
	__asm__ volatile(
   25c0a:	f381 8811 	msr	BASEPRI, r1
   25c0e:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   25c12:	b1b3      	cbz	r3, 25c42 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   25c14:	2300      	movs	r3, #0
   25c16:	4631      	mov	r1, r6
   25c18:	4620      	mov	r0, r4
   25c1a:	f7ff ff93 	bl	25b44 <notify_one>
   25c1e:	e010      	b.n	25c42 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   25c20:	0783      	lsls	r3, r0, #30
   25c22:	d001      	beq.n	25c28 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   25c24:	2a06      	cmp	r2, #6
   25c26:	d10e      	bne.n	25c46 <onoff_request+0x76>
	parent->next = child;
   25c28:	2300      	movs	r3, #0
   25c2a:	6033      	str	r3, [r6, #0]
	return list->tail;
   25c2c:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   25c2e:	b993      	cbnz	r3, 25c56 <onoff_request+0x86>
	list->head = node;
   25c30:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   25c34:	4615      	mov	r5, r2
   25c36:	b962      	cbnz	r2, 25c52 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   25c38:	460a      	mov	r2, r1
   25c3a:	4620      	mov	r0, r4
   25c3c:	2102      	movs	r1, #2
   25c3e:	f7ec fbd5 	bl	123ec <process_event>
		}
	}

	return rv;
}
   25c42:	4628      	mov	r0, r5
   25c44:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   25c46:	2a05      	cmp	r2, #5
   25c48:	bf0c      	ite	eq
   25c4a:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   25c4e:	f06f 0504 	mvnne.w	r5, #4
   25c52:	2300      	movs	r3, #0
   25c54:	e7d9      	b.n	25c0a <onoff_request+0x3a>
	parent->next = child;
   25c56:	601e      	str	r6, [r3, #0]
	list->tail = node;
   25c58:	6066      	str	r6, [r4, #4]
}
   25c5a:	e7eb      	b.n	25c34 <onoff_request+0x64>
		rv = -EAGAIN;
   25c5c:	f06f 050a 	mvn.w	r5, #10
   25c60:	e7f7      	b.n	25c52 <onoff_request+0x82>

00025c62 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   25c62:	4604      	mov	r4, r0
   25c64:	b508      	push	{r3, lr}
   25c66:	4608      	mov	r0, r1
   25c68:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   25c6a:	461a      	mov	r2, r3
   25c6c:	47a0      	blx	r4
	return z_impl_z_current_get();
   25c6e:	f7fc f891 	bl	21d94 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   25c72:	f7ee feb7 	bl	149e4 <z_impl_k_thread_abort>

00025c76 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   25c76:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   25c7a:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   25c7c:	0840      	lsrs	r0, r0, #1
   25c7e:	4770      	bx	lr

00025c80 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   25c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25c82:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   25c84:	f7ff fff7 	bl	25c76 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   25c88:	fab0 f080 	clz	r0, r0
   25c8c:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   25c90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   25c94:	00ca      	lsls	r2, r1, #3
   25c96:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   25c9a:	1d17      	adds	r7, r2, #4
{
   25c9c:	460c      	mov	r4, r1
   25c9e:	3206      	adds	r2, #6
   25ca0:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   25ca2:	b956      	cbnz	r6, 25cba <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   25ca4:	2101      	movs	r1, #1
   25ca6:	fa01 f000 	lsl.w	r0, r1, r0
   25caa:	68d9      	ldr	r1, [r3, #12]
   25cac:	4301      	orrs	r1, r0
   25cae:	60d9      	str	r1, [r3, #12]
		b->next = c;
   25cb0:	f8cc 4010 	str.w	r4, [ip, #16]
   25cb4:	53dd      	strh	r5, [r3, r7]
   25cb6:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   25cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   25cba:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   25cbc:	3104      	adds	r1, #4
   25cbe:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   25cc0:	53d8      	strh	r0, [r3, r7]
   25cc2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   25cc6:	529e      	strh	r6, [r3, r2]
   25cc8:	80c5      	strh	r5, [r0, #6]
   25cca:	525d      	strh	r5, [r3, r1]
   25ccc:	e7f4      	b.n	25cb8 <free_list_add+0x38>

00025cce <free_list_remove_bidx>:
{
   25cce:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   25cd0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   25cd4:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   25cd6:	4299      	cmp	r1, r3
   25cd8:	f102 0104 	add.w	r1, r2, #4
   25cdc:	d10a      	bne.n	25cf4 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   25cde:	2301      	movs	r3, #1
   25ce0:	fa03 f202 	lsl.w	r2, r3, r2
   25ce4:	68c3      	ldr	r3, [r0, #12]
   25ce6:	ea23 0302 	bic.w	r3, r3, r2
   25cea:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   25cec:	2300      	movs	r3, #0
   25cee:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   25cf2:	bd10      	pop	{r4, pc}
   25cf4:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   25cf6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   25cfa:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   25cfe:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   25d02:	80cb      	strh	r3, [r1, #6]
   25d04:	8082      	strh	r2, [r0, #4]
}
   25d06:	e7f4      	b.n	25cf2 <free_list_remove_bidx+0x24>

00025d08 <free_list_remove>:
{
   25d08:	b508      	push	{r3, lr}
   25d0a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   25d0c:	f7ff ffb3 	bl	25c76 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   25d10:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   25d14:	f1c2 021f 	rsb	r2, r2, #31
   25d18:	4618      	mov	r0, r3
}
   25d1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   25d1e:	f7ff bfd6 	b.w	25cce <free_list_remove_bidx>

00025d22 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   25d22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25d26:	fab1 f581 	clz	r5, r1
   25d2a:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   25d2e:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   25d32:	4603      	mov	r3, r0
	if (b->next) {
   25d34:	693a      	ldr	r2, [r7, #16]
{
   25d36:	460e      	mov	r6, r1
	if (b->next) {
   25d38:	b1c2      	cbz	r2, 25d6c <alloc_chunk+0x4a>
   25d3a:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   25d3e:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   25d40:	4618      	mov	r0, r3
   25d42:	4621      	mov	r1, r4
   25d44:	f7ff ff97 	bl	25c76 <chunk_size>
   25d48:	42b0      	cmp	r0, r6
   25d4a:	d306      	bcc.n	25d5a <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   25d4c:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   25d4e:	4618      	mov	r0, r3
   25d50:	f7ff ffbd 	bl	25cce <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   25d54:	4620      	mov	r0, r4
   25d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   25d5a:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   25d5e:	f1b8 0801 	subs.w	r8, r8, #1
   25d62:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   25d64:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   25d66:	d001      	beq.n	25d6c <alloc_chunk+0x4a>
   25d68:	4282      	cmp	r2, r0
   25d6a:	d1e8      	bne.n	25d3e <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   25d6c:	f1c5 0220 	rsb	r2, r5, #32
   25d70:	f04f 34ff 	mov.w	r4, #4294967295
   25d74:	4094      	lsls	r4, r2
   25d76:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   25d78:	4014      	ands	r4, r2
   25d7a:	d0eb      	beq.n	25d54 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   25d7c:	fa94 f2a4 	rbit	r2, r4
   25d80:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   25d84:	1d11      	adds	r1, r2, #4
   25d86:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   25d8a:	4621      	mov	r1, r4
   25d8c:	e7df      	b.n	25d4e <alloc_chunk+0x2c>

00025d8e <merge_chunks>:
{
   25d8e:	b538      	push	{r3, r4, r5, lr}
   25d90:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   25d92:	f7ff ff70 	bl	25c76 <chunk_size>
{
   25d96:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   25d98:	4604      	mov	r4, r0
   25d9a:	4611      	mov	r1, r2
   25d9c:	4618      	mov	r0, r3
   25d9e:	f7ff ff6a 	bl	25c76 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   25da2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   25da6:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25da8:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   25daa:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   25dac:	4618      	mov	r0, r3
   25dae:	f7ff ff62 	bl	25c76 <chunk_size>
	void *cmem = &buf[c];
   25db2:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   25db4:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   25db8:	bd38      	pop	{r3, r4, r5, pc}

00025dba <split_chunks>:
{
   25dba:	b538      	push	{r3, r4, r5, lr}
   25dbc:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   25dbe:	f7ff ff5a 	bl	25c76 <chunk_size>
{
   25dc2:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   25dc4:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   25dc6:	1a51      	subs	r1, r2, r1
   25dc8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   25dcc:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25dce:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   25dd0:	8060      	strh	r0, [r4, #2]
   25dd2:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25dd6:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   25dd8:	8044      	strh	r4, [r0, #2]
   25dda:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   25dde:	4618      	mov	r0, r3
   25de0:	4611      	mov	r1, r2
   25de2:	f7ff ff48 	bl	25c76 <chunk_size>
	void *cmem = &buf[c];
   25de6:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   25de8:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   25dec:	bd38      	pop	{r3, r4, r5, pc}

00025dee <free_chunk>:
{
   25dee:	b538      	push	{r3, r4, r5, lr}
   25df0:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   25df2:	f7ff ff40 	bl	25c76 <chunk_size>
   25df6:	460c      	mov	r4, r1
   25df8:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   25dfa:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   25dfe:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   25e00:	07da      	lsls	r2, r3, #31
   25e02:	d40a      	bmi.n	25e1a <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   25e04:	4628      	mov	r0, r5
   25e06:	f7ff ff7f 	bl	25d08 <free_list_remove>
	return c + chunk_size(h, c);
   25e0a:	4621      	mov	r1, r4
   25e0c:	4628      	mov	r0, r5
   25e0e:	f7ff ff32 	bl	25c76 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   25e12:	1822      	adds	r2, r4, r0
   25e14:	4628      	mov	r0, r5
   25e16:	f7ff ffba 	bl	25d8e <merge_chunks>
		return ((uint16_t *)cmem)[f];
   25e1a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   25e1e:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   25e20:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   25e24:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   25e26:	07db      	lsls	r3, r3, #31
   25e28:	d40c      	bmi.n	25e44 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   25e2a:	4628      	mov	r0, r5
   25e2c:	f7ff ff6c 	bl	25d08 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   25e30:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   25e34:	4622      	mov	r2, r4
   25e36:	1a61      	subs	r1, r4, r1
   25e38:	4628      	mov	r0, r5
   25e3a:	f7ff ffa8 	bl	25d8e <merge_chunks>
   25e3e:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   25e42:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   25e44:	4621      	mov	r1, r4
   25e46:	4628      	mov	r0, r5
}
   25e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   25e4c:	f7ff bf18 	b.w	25c80 <free_list_add>

00025e50 <sys_heap_free>:
	if (mem == NULL) {
   25e50:	b161      	cbz	r1, 25e6c <sys_heap_free+0x1c>
   25e52:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   25e54:	3904      	subs	r1, #4
   25e56:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   25e58:	f021 0307 	bic.w	r3, r1, #7
   25e5c:	4403      	add	r3, r0
	free_chunk(h, c);
   25e5e:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   25e60:	885a      	ldrh	r2, [r3, #2]
   25e62:	f022 0201 	bic.w	r2, r2, #1
   25e66:	805a      	strh	r2, [r3, #2]
   25e68:	f7ff bfc1 	b.w	25dee <free_chunk>
}
   25e6c:	4770      	bx	lr

00025e6e <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   25e6e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   25e70:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   25e72:	b909      	cbnz	r1, 25e78 <sys_heap_alloc+0xa>
		return NULL;
   25e74:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   25e76:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   25e78:	68ab      	ldr	r3, [r5, #8]
   25e7a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   25e7e:	d9f9      	bls.n	25e74 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25e80:	310b      	adds	r1, #11
   25e82:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   25e84:	4621      	mov	r1, r4
   25e86:	4628      	mov	r0, r5
   25e88:	f7ff ff4b 	bl	25d22 <alloc_chunk>
	if (c == 0U) {
   25e8c:	4606      	mov	r6, r0
   25e8e:	2800      	cmp	r0, #0
   25e90:	d0f0      	beq.n	25e74 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   25e92:	4601      	mov	r1, r0
   25e94:	4628      	mov	r0, r5
   25e96:	f7ff feee 	bl	25c76 <chunk_size>
   25e9a:	42a0      	cmp	r0, r4
   25e9c:	d907      	bls.n	25eae <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   25e9e:	1932      	adds	r2, r6, r4
   25ea0:	4628      	mov	r0, r5
   25ea2:	f7ff ff8a 	bl	25dba <split_chunks>
		free_list_add(h, c + chunk_sz);
   25ea6:	4611      	mov	r1, r2
   25ea8:	4628      	mov	r0, r5
   25eaa:	f7ff fee9 	bl	25c80 <free_list_add>
	void *cmem = &buf[c];
   25eae:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   25eb2:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25eb4:	8853      	ldrh	r3, [r2, #2]
   25eb6:	f043 0301 	orr.w	r3, r3, #1
   25eba:	8053      	strh	r3, [r2, #2]
   25ebc:	3004      	adds	r0, #4
	return mem;
   25ebe:	e7da      	b.n	25e76 <sys_heap_alloc+0x8>

00025ec0 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   25ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25ec4:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   25ec6:	424a      	negs	r2, r1
   25ec8:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   25ecc:	ea31 0202 	bics.w	r2, r1, r2
{
   25ed0:	4603      	mov	r3, r0
	if (align != rew) {
   25ed2:	d00a      	beq.n	25eea <sys_heap_aligned_alloc+0x2a>
		return false;
   25ed4:	2f04      	cmp	r7, #4
   25ed6:	463a      	mov	r2, r7
   25ed8:	46b9      	mov	r9, r7
   25eda:	bf28      	it	cs
   25edc:	2204      	movcs	r2, #4
		align -= rew;
   25ede:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   25ee0:	b974      	cbnz	r4, 25f00 <sys_heap_aligned_alloc+0x40>
		return NULL;
   25ee2:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   25ee4:	4628      	mov	r0, r5
   25ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   25eea:	2904      	cmp	r1, #4
   25eec:	d804      	bhi.n	25ef8 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   25eee:	4621      	mov	r1, r4
}
   25ef0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   25ef4:	f7ff bfbb 	b.w	25e6e <sys_heap_alloc>
		rew = 0;
   25ef8:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   25efc:	2204      	movs	r2, #4
   25efe:	e7ef      	b.n	25ee0 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   25f00:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   25f02:	68b3      	ldr	r3, [r6, #8]
   25f04:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   25f08:	d9eb      	bls.n	25ee2 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25f0a:	f104 010b 	add.w	r1, r4, #11
   25f0e:	4439      	add	r1, r7
   25f10:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   25f12:	08c9      	lsrs	r1, r1, #3
   25f14:	4630      	mov	r0, r6
   25f16:	f7ff ff04 	bl	25d22 <alloc_chunk>
	if (c0 == 0) {
   25f1a:	4680      	mov	r8, r0
   25f1c:	2800      	cmp	r0, #0
   25f1e:	d0e0      	beq.n	25ee2 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   25f20:	f109 0504 	add.w	r5, r9, #4
   25f24:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   25f28:	1e7b      	subs	r3, r7, #1
   25f2a:	4435      	add	r5, r6
   25f2c:	441d      	add	r5, r3
   25f2e:	427f      	negs	r7, r7
   25f30:	403d      	ands	r5, r7
   25f32:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   25f36:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   25f38:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   25f3a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   25f3c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   25f3e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   25f42:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   25f44:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   25f48:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   25f4c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   25f50:	d208      	bcs.n	25f64 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   25f52:	4601      	mov	r1, r0
   25f54:	463a      	mov	r2, r7
   25f56:	4630      	mov	r0, r6
   25f58:	f7ff ff2f 	bl	25dba <split_chunks>
		free_list_add(h, c0);
   25f5c:	4641      	mov	r1, r8
   25f5e:	4630      	mov	r0, r6
   25f60:	f7ff fe8e 	bl	25c80 <free_list_add>
	return c + chunk_size(h, c);
   25f64:	4639      	mov	r1, r7
   25f66:	4630      	mov	r0, r6
   25f68:	f7ff fe85 	bl	25c76 <chunk_size>
   25f6c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   25f6e:	4284      	cmp	r4, r0
   25f70:	d207      	bcs.n	25f82 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   25f72:	4630      	mov	r0, r6
   25f74:	4622      	mov	r2, r4
   25f76:	f7ff ff20 	bl	25dba <split_chunks>
		free_list_add(h, c_end);
   25f7a:	4621      	mov	r1, r4
   25f7c:	4630      	mov	r0, r6
   25f7e:	f7ff fe7f 	bl	25c80 <free_list_add>
	void *cmem = &buf[c];
   25f82:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25f86:	8873      	ldrh	r3, [r6, #2]
   25f88:	f043 0301 	orr.w	r3, r3, #1
   25f8c:	8073      	strh	r3, [r6, #2]
   25f8e:	e7a9      	b.n	25ee4 <sys_heap_aligned_alloc+0x24>

00025f90 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   25f90:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   25f92:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   25f94:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   25f96:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   25f9a:	f021 0107 	bic.w	r1, r1, #7
{
   25f9e:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   25fa0:	1acd      	subs	r5, r1, r3
   25fa2:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   25fa4:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   25fa6:	fab2 f082 	clz	r0, r2
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   25faa:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   25fae:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25fb0:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   25fb2:	2600      	movs	r6, #0
   25fb4:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   25fb6:	f1c0 0020 	rsb	r0, r0, #32
   25fba:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   25fbe:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   25fc0:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   25fc2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   25fc6:	4284      	cmp	r4, r0
   25fc8:	d118      	bne.n	25ffc <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25fca:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25fcc:	f040 0001 	orr.w	r0, r0, #1
   25fd0:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   25fd2:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   25fd6:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25fd8:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   25fda:	801e      	strh	r6, [r3, #0]
   25fdc:	8067      	strh	r7, [r4, #2]
   25fde:	195c      	adds	r4, r3, r5
   25fe0:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   25fe4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   25fe8:	8066      	strh	r6, [r4, #2]
   25fea:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25fec:	8850      	ldrh	r0, [r2, #2]
   25fee:	f040 0001 	orr.w	r0, r0, #1
   25ff2:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   25ff4:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   25ff6:	4618      	mov	r0, r3
   25ff8:	f7ff be42 	b.w	25c80 <free_list_add>
		h->buckets[i].next = 0;
   25ffc:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   26000:	e7e1      	b.n	25fc6 <sys_heap_init+0x36>

00026002 <encode_uint>:
{
   26002:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26006:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   26008:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   2600a:	2b6f      	cmp	r3, #111	; 0x6f
{
   2600c:	4680      	mov	r8, r0
   2600e:	460f      	mov	r7, r1
   26010:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   26012:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   26016:	d029      	beq.n	2606c <encode_uint+0x6a>
   26018:	d824      	bhi.n	26064 <encode_uint+0x62>
		return 16;
   2601a:	2b58      	cmp	r3, #88	; 0x58
   2601c:	bf14      	ite	ne
   2601e:	260a      	movne	r6, #10
   26020:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   26022:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   26026:	4632      	mov	r2, r6
   26028:	2300      	movs	r3, #0
   2602a:	4640      	mov	r0, r8
   2602c:	4639      	mov	r1, r7
   2602e:	f7da faeb 	bl	608 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26032:	2a09      	cmp	r2, #9
   26034:	b2d4      	uxtb	r4, r2
   26036:	d81e      	bhi.n	26076 <encode_uint+0x74>
   26038:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   2603a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2603c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   2603e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26042:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   26046:	d301      	bcc.n	2604c <encode_uint+0x4a>
   26048:	45d1      	cmp	r9, sl
   2604a:	d811      	bhi.n	26070 <encode_uint+0x6e>
	if (conv->flag_hash) {
   2604c:	782b      	ldrb	r3, [r5, #0]
   2604e:	069b      	lsls	r3, r3, #26
   26050:	d505      	bpl.n	2605e <encode_uint+0x5c>
		if (radix == 8) {
   26052:	2e08      	cmp	r6, #8
   26054:	d115      	bne.n	26082 <encode_uint+0x80>
			conv->altform_0 = true;
   26056:	78ab      	ldrb	r3, [r5, #2]
   26058:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   2605c:	70ab      	strb	r3, [r5, #2]
}
   2605e:	4648      	mov	r0, r9
   26060:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   26064:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   26068:	2b70      	cmp	r3, #112	; 0x70
   2606a:	e7d7      	b.n	2601c <encode_uint+0x1a>
	switch (specifier) {
   2606c:	2608      	movs	r6, #8
   2606e:	e7d8      	b.n	26022 <encode_uint+0x20>
		value /= radix;
   26070:	4680      	mov	r8, r0
   26072:	460f      	mov	r7, r1
   26074:	e7d7      	b.n	26026 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26076:	f1bb 0f19 	cmp.w	fp, #25
   2607a:	bf94      	ite	ls
   2607c:	3437      	addls	r4, #55	; 0x37
   2607e:	3457      	addhi	r4, #87	; 0x57
   26080:	e7db      	b.n	2603a <encode_uint+0x38>
		} else if (radix == 16) {
   26082:	2e10      	cmp	r6, #16
   26084:	d1eb      	bne.n	2605e <encode_uint+0x5c>
			conv->altform_0c = true;
   26086:	78ab      	ldrb	r3, [r5, #2]
   26088:	f043 0310 	orr.w	r3, r3, #16
   2608c:	e7e6      	b.n	2605c <encode_uint+0x5a>

0002608e <outs>:
{
   2608e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26092:	4607      	mov	r7, r0
   26094:	4688      	mov	r8, r1
   26096:	4615      	mov	r5, r2
   26098:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2609a:	4614      	mov	r4, r2
   2609c:	42b4      	cmp	r4, r6
   2609e:	eba4 0005 	sub.w	r0, r4, r5
   260a2:	d302      	bcc.n	260aa <outs+0x1c>
   260a4:	b93e      	cbnz	r6, 260b6 <outs+0x28>
   260a6:	7823      	ldrb	r3, [r4, #0]
   260a8:	b12b      	cbz	r3, 260b6 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   260aa:	f814 0b01 	ldrb.w	r0, [r4], #1
   260ae:	4641      	mov	r1, r8
   260b0:	47b8      	blx	r7
		if (rc < 0) {
   260b2:	2800      	cmp	r0, #0
   260b4:	daf2      	bge.n	2609c <outs+0xe>
}
   260b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000260ba <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   260ba:	b40f      	push	{r0, r1, r2, r3}
   260bc:	b507      	push	{r0, r1, r2, lr}
   260be:	a904      	add	r1, sp, #16
   260c0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   260c4:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   260c6:	f7ff fd05 	bl	25ad4 <vprintk>

	va_end(ap);
}
   260ca:	b003      	add	sp, #12
   260cc:	f85d eb04 	ldr.w	lr, [sp], #4
   260d0:	b004      	add	sp, #16
   260d2:	4770      	bx	lr

000260d4 <free_space>:
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   260d4:	4602      	mov	r2, r0
   260d6:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   260d8:	68c0      	ldr	r0, [r0, #12]
   260da:	6814      	ldr	r4, [r2, #0]
   260dc:	42a0      	cmp	r0, r4
   260de:	d904      	bls.n	260ea <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   260e0:	3801      	subs	r0, #1
   260e2:	1b00      	subs	r0, r0, r4
   260e4:	6008      	str	r0, [r1, #0]

		return false;
   260e6:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   260e8:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   260ea:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
   260ec:	b918      	cbnz	r0, 260f6 <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   260ee:	3b01      	subs	r3, #1
   260f0:	1b1b      	subs	r3, r3, r4
   260f2:	600b      	str	r3, [r1, #0]
		return false;
   260f4:	e7f8      	b.n	260e8 <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
   260f6:	1b1b      	subs	r3, r3, r4
   260f8:	600b      	str	r3, [r1, #0]
	return true;
   260fa:	2001      	movs	r0, #1
   260fc:	e7f4      	b.n	260e8 <free_space+0x14>

000260fe <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   260fe:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   26100:	a901      	add	r1, sp, #4
{
   26102:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   26104:	f7ff ffe6 	bl	260d4 <free_space>
   26108:	b120      	cbz	r0, 26114 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   2610a:	9b01      	ldr	r3, [sp, #4]
   2610c:	68e2      	ldr	r2, [r4, #12]
   2610e:	3b01      	subs	r3, #1
   26110:	4413      	add	r3, r2
   26112:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   26114:	9801      	ldr	r0, [sp, #4]
   26116:	6a23      	ldr	r3, [r4, #32]
   26118:	43c0      	mvns	r0, r0
}
   2611a:	4418      	add	r0, r3
   2611c:	b002      	add	sp, #8
   2611e:	bd10      	pop	{r4, pc}

00026120 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   26120:	b510      	push	{r4, lr}
   26122:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   26124:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   26126:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   26128:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2612a:	07d2      	lsls	r2, r2, #31
   2612c:	d502      	bpl.n	26134 <idx_inc+0x14>
		return i & (buffer->size - 1);
   2612e:	3b01      	subs	r3, #1
   26130:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   26132:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   26134:	4298      	cmp	r0, r3
   26136:	bf28      	it	cs
   26138:	1ac0      	subcs	r0, r0, r3
   2613a:	e7fa      	b.n	26132 <idx_inc+0x12>

0002613c <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   2613c:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2613e:	69c2      	ldr	r2, [r0, #28]
{
   26140:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
   26142:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   26144:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   26146:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2614a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2614e:	462a      	mov	r2, r5
   26150:	6801      	ldr	r1, [r0, #0]
{
   26152:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   26154:	f7ff ffe4 	bl	26120 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   26158:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2615a:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2615c:	462a      	mov	r2, r5
   2615e:	4620      	mov	r0, r4
   26160:	f7ff ffde 	bl	26120 <idx_inc>
   26164:	6060      	str	r0, [r4, #4]
}
   26166:	bd38      	pop	{r3, r4, r5, pc}

00026168 <max_utilization_update>:
{
   26168:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2616a:	6903      	ldr	r3, [r0, #16]
   2616c:	075b      	lsls	r3, r3, #29
{
   2616e:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   26170:	d506      	bpl.n	26180 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   26172:	6a45      	ldr	r5, [r0, #36]	; 0x24
   26174:	f7ff ffc3 	bl	260fe <get_usage>
   26178:	4285      	cmp	r5, r0
   2617a:	d902      	bls.n	26182 <max_utilization_update+0x1a>
   2617c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2617e:	6260      	str	r0, [r4, #36]	; 0x24
}
   26180:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   26182:	4620      	mov	r0, r4
   26184:	f7ff ffbb 	bl	260fe <get_usage>
   26188:	e7f9      	b.n	2617e <max_utilization_update+0x16>

0002618a <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   2618a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2618e:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   26192:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
   26196:	461f      	mov	r7, r3
	*user_packet = false;
   26198:	2300      	movs	r3, #0
   2619a:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
   2619c:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   261a0:	f003 0303 	and.w	r3, r3, #3
   261a4:	2b02      	cmp	r3, #2
{
   261a6:	4604      	mov	r4, r0
   261a8:	468b      	mov	fp, r1
   261aa:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   261ac:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   261b0:	d103      	bne.n	261ba <drop_item_locked+0x30>
		return item->skip.len;
   261b2:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   261b6:	08ad      	lsrs	r5, r5, #2
   261b8:	d12e      	bne.n	26218 <drop_item_locked+0x8e>
   261ba:	69a3      	ldr	r3, [r4, #24]
   261bc:	4630      	mov	r0, r6
   261be:	4798      	blx	r3
   261c0:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   261c2:	f1b8 0f00 	cmp.w	r8, #0
   261c6:	d036      	beq.n	26236 <drop_item_locked+0xac>
		if (item->hdr.busy) {
   261c8:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   261cc:	079b      	lsls	r3, r3, #30
   261ce:	d52f      	bpl.n	26230 <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   261d0:	f10b 0101 	add.w	r1, fp, #1
   261d4:	4620      	mov	r0, r4
   261d6:	f7ff ffb1 	bl	2613c <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   261da:	6861      	ldr	r1, [r4, #4]
   261dc:	462a      	mov	r2, r5
   261de:	4620      	mov	r0, r4
   261e0:	f7ff ff9e 	bl	26120 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   261e4:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   261e6:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   261e8:	462a      	mov	r2, r5
   261ea:	4620      	mov	r0, r4
   261ec:	f7ff ff98 	bl	26120 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   261f0:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   261f2:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   261f4:	68e1      	ldr	r1, [r4, #12]
   261f6:	4620      	mov	r0, r4
   261f8:	f7ff ff92 	bl	26120 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   261fc:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   261fe:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
   26202:	f002 0203 	and.w	r2, r2, #3
   26206:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   26208:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2620c:	d10c      	bne.n	26228 <drop_item_locked+0x9e>
		return item->skip.len;
   2620e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   26212:	089b      	lsrs	r3, r3, #2
   26214:	d008      	beq.n	26228 <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
   26216:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   26218:	68e1      	ldr	r1, [r4, #12]
   2621a:	462a      	mov	r2, r5
   2621c:	4620      	mov	r0, r4
   2621e:	f7ff ff7f 	bl	26120 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   26222:	e9c4 0002 	strd	r0, r0, [r4, #8]
   26226:	e007      	b.n	26238 <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
   26228:	69a3      	ldr	r3, [r4, #24]
   2622a:	4630      	mov	r0, r6
   2622c:	4798      	blx	r3
   2622e:	4405      	add	r5, r0
			*user_packet = true;
   26230:	2301      	movs	r3, #1
   26232:	703b      	strb	r3, [r7, #0]
   26234:	e7f0      	b.n	26218 <drop_item_locked+0x8e>
		item = NULL;
   26236:	4646      	mov	r6, r8
	}

	return item;
}
   26238:	4630      	mov	r0, r6
   2623a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002623e <mpsc_pbuf_init>:
{
   2623e:	b538      	push	{r3, r4, r5, lr}
   26240:	460d      	mov	r5, r1
   26242:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   26244:	221c      	movs	r2, #28
   26246:	2100      	movs	r1, #0
   26248:	f000 fd71 	bl	26d2e <memset>
	buffer->get_wlen = cfg->get_wlen;
   2624c:	68eb      	ldr	r3, [r5, #12]
   2624e:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   26250:	68ab      	ldr	r3, [r5, #8]
	buffer->size = cfg->size;
   26252:	686a      	ldr	r2, [r5, #4]
	buffer->notify_drop = cfg->notify_drop;
   26254:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   26256:	682b      	ldr	r3, [r5, #0]
   26258:	61e3      	str	r3, [r4, #28]
	buffer->max_usage = 0;
   2625a:	2300      	movs	r3, #0
   2625c:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->size = cfg->size;
   2625e:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
   26260:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   26262:	b122      	cbz	r2, 2626e <mpsc_pbuf_init+0x30>
   26264:	1e51      	subs	r1, r2, #1
   26266:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   26268:	bf08      	it	eq
   2626a:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
   2626e:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   26270:	2201      	movs	r2, #1
   26272:	f104 0028 	add.w	r0, r4, #40	; 0x28
   26276:	2100      	movs	r1, #0
}
   26278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2627c:	f003 be79 	b.w	29f72 <z_impl_k_sem_init>

00026280 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   26280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26284:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   26286:	6a03      	ldr	r3, [r0, #32]
   26288:	3b01      	subs	r3, #1
   2628a:	428b      	cmp	r3, r1
{
   2628c:	b085      	sub	sp, #20
   2628e:	4604      	mov	r4, r0
   26290:	460f      	mov	r7, r1
   26292:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
   26294:	d367      	bcc.n	26366 <mpsc_pbuf_alloc+0xe6>
	union mpsc_pbuf_generic *dropped_item = NULL;
   26296:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
   26298:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
   2629a:	f100 0b28 	add.w	fp, r0, #40	; 0x28
	__asm__ volatile(
   2629e:	f04f 0340 	mov.w	r3, #64	; 0x40
   262a2:	f3ef 8611 	mrs	r6, BASEPRI
   262a6:	f383 8812 	msr	BASEPRI_MAX, r3
   262aa:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
   262ae:	a903      	add	r1, sp, #12
   262b0:	4620      	mov	r0, r4
   262b2:	f7ff ff0f 	bl	260d4 <free_space>
		if (free_wlen >= wlen) {
   262b6:	9903      	ldr	r1, [sp, #12]
   262b8:	42b9      	cmp	r1, r7
   262ba:	d324      	bcc.n	26306 <mpsc_pbuf_alloc+0x86>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   262bc:	6821      	ldr	r1, [r4, #0]
			item =
   262be:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   262c0:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
   262c4:	f022 0203 	bic.w	r2, r2, #3
   262c8:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   262cc:	4620      	mov	r0, r4
   262ce:	463a      	mov	r2, r7
			item =
   262d0:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
   262d4:	f7ff ff24 	bl	26120 <idx_inc>
		cont = false;
   262d8:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
   262da:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   262dc:	f386 8811 	msr	BASEPRI, r6
   262e0:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   262e4:	2b00      	cmp	r3, #0
   262e6:	d040      	beq.n	2636a <mpsc_pbuf_alloc+0xea>
   262e8:	2d00      	cmp	r5, #0
   262ea:	d0d8      	beq.n	2629e <mpsc_pbuf_alloc+0x1e>
   262ec:	f89d 300b 	ldrb.w	r3, [sp, #11]
   262f0:	2b00      	cmp	r3, #0
   262f2:	d0d4      	beq.n	2629e <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   262f4:	6963      	ldr	r3, [r4, #20]
   262f6:	b123      	cbz	r3, 26302 <mpsc_pbuf_alloc+0x82>
				buffer->notify_drop(buffer, dropped_item);
   262f8:	4629      	mov	r1, r5
   262fa:	4620      	mov	r0, r4
   262fc:	4798      	blx	r3
			}
			dropped_item = NULL;
   262fe:	2500      	movs	r5, #0
   26300:	e7cd      	b.n	2629e <mpsc_pbuf_alloc+0x1e>
   26302:	461d      	mov	r5, r3
   26304:	e7cb      	b.n	2629e <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
   26306:	b128      	cbz	r0, 26314 <mpsc_pbuf_alloc+0x94>
   26308:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
   2630a:	4620      	mov	r0, r4
   2630c:	f7ff ff16 	bl	2613c <add_skip_item>
			cont = true;
   26310:	9b01      	ldr	r3, [sp, #4]
   26312:	e7e3      	b.n	262dc <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   26314:	ea58 0309 	orrs.w	r3, r8, r9
   26318:	d017      	beq.n	2634a <mpsc_pbuf_alloc+0xca>
			   !k_is_in_isr()) {
   2631a:	f003 fd3a 	bl	29d92 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   2631e:	b9a0      	cbnz	r0, 2634a <mpsc_pbuf_alloc+0xca>
   26320:	f386 8811 	msr	BASEPRI, r6
   26324:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   26328:	4642      	mov	r2, r8
   2632a:	464b      	mov	r3, r9
   2632c:	4658      	mov	r0, fp
   2632e:	f7fb f81b 	bl	21368 <z_impl_k_sem_take>
	__asm__ volatile(
   26332:	f04f 0340 	mov.w	r3, #64	; 0x40
   26336:	f3ef 8611 	mrs	r6, BASEPRI
   2633a:	f383 8812 	msr	BASEPRI_MAX, r3
   2633e:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   26342:	fab0 f380 	clz	r3, r0
   26346:	095b      	lsrs	r3, r3, #5
   26348:	e7c8      	b.n	262dc <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   2634a:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   2634c:	9903      	ldr	r1, [sp, #12]
   2634e:	f10d 030b 	add.w	r3, sp, #11
   26352:	f3c2 0240 	ubfx	r2, r2, #1, #1
   26356:	4620      	mov	r0, r4
   26358:	f7ff ff17 	bl	2618a <drop_item_locked>
			cont = dropped_item != NULL;
   2635c:	1e03      	subs	r3, r0, #0
   2635e:	4605      	mov	r5, r0
   26360:	bf18      	it	ne
   26362:	2301      	movne	r3, #1
   26364:	e7ba      	b.n	262dc <mpsc_pbuf_alloc+0x5c>
		return NULL;
   26366:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   2636a:	4650      	mov	r0, sl
   2636c:	b005      	add	sp, #20
   2636e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00026372 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   26372:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   26374:	6983      	ldr	r3, [r0, #24]
{
   26376:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   26378:	4608      	mov	r0, r1
{
   2637a:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   2637c:	4798      	blx	r3
   2637e:	4602      	mov	r2, r0
   26380:	f04f 0340 	mov.w	r3, #64	; 0x40
   26384:	f3ef 8611 	mrs	r6, BASEPRI
   26388:	f383 8812 	msr	BASEPRI_MAX, r3
   2638c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   26390:	782b      	ldrb	r3, [r5, #0]
   26392:	f043 0301 	orr.w	r3, r3, #1
   26396:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   26398:	6861      	ldr	r1, [r4, #4]
   2639a:	4620      	mov	r0, r4
   2639c:	f7ff fec0 	bl	26120 <idx_inc>
   263a0:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   263a2:	4620      	mov	r0, r4
   263a4:	f7ff fee0 	bl	26168 <max_utilization_update>
	__asm__ volatile(
   263a8:	f386 8811 	msr	BASEPRI, r6
   263ac:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   263b0:	bd70      	pop	{r4, r5, r6, pc}

000263b2 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   263b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   263b6:	4604      	mov	r4, r0
	__asm__ volatile(
   263b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   263bc:	f3ef 8611 	mrs	r6, BASEPRI
   263c0:	f383 8812 	msr	BASEPRI_MAX, r3
   263c4:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   263c8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
   263cc:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   263ce:	bf88      	it	hi
   263d0:	6a23      	ldrhi	r3, [r4, #32]
   263d2:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
   263d4:	b1f3      	cbz	r3, 26414 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
   263d6:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
   263d8:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
   263dc:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
   263e0:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
   263e4:	d016      	beq.n	26414 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
   263e6:	2b02      	cmp	r3, #2
   263e8:	d103      	bne.n	263f2 <mpsc_pbuf_claim+0x40>
		return item->skip.len;
   263ea:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   263ee:	08ad      	lsrs	r5, r5, #2
   263f0:	d115      	bne.n	2641e <mpsc_pbuf_claim+0x6c>
   263f2:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
   263f4:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
   263f6:	d50f      	bpl.n	26418 <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
   263f8:	f042 0202 	orr.w	r2, r2, #2
   263fc:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   26400:	4640      	mov	r0, r8
   26402:	4798      	blx	r3
   26404:	4639      	mov	r1, r7
   26406:	4602      	mov	r2, r0
   26408:	4620      	mov	r0, r4
   2640a:	f7ff fe89 	bl	26120 <idx_inc>
		cont = false;
   2640e:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
   26410:	60a0      	str	r0, [r4, #8]
   26412:	e011      	b.n	26438 <mpsc_pbuf_claim+0x86>
			item = NULL;
   26414:	4698      	mov	r8, r3
   26416:	e00f      	b.n	26438 <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
   26418:	4640      	mov	r0, r8
   2641a:	4798      	blx	r3
   2641c:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   2641e:	68a1      	ldr	r1, [r4, #8]
   26420:	462a      	mov	r2, r5
   26422:	4620      	mov	r0, r4
   26424:	f7ff fe7c 	bl	26120 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   26428:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   2642a:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   2642c:	462a      	mov	r2, r5
   2642e:	4620      	mov	r0, r4
   26430:	f7ff fe76 	bl	26120 <idx_inc>
				cont = true;
   26434:	2301      	movs	r3, #1
				buffer->rd_idx =
   26436:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   26438:	f386 8811 	msr	BASEPRI, r6
   2643c:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   26440:	2b00      	cmp	r3, #0
   26442:	d1b9      	bne.n	263b8 <mpsc_pbuf_claim+0x6>

	return item;
}
   26444:	4640      	mov	r0, r8
   26446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002644a <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   2644a:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   2644c:	6983      	ldr	r3, [r0, #24]
{
   2644e:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   26450:	4608      	mov	r0, r1
{
   26452:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   26454:	4798      	blx	r3
   26456:	4602      	mov	r2, r0
	__asm__ volatile(
   26458:	f04f 0340 	mov.w	r3, #64	; 0x40
   2645c:	f3ef 8611 	mrs	r6, BASEPRI
   26460:	f383 8812 	msr	BASEPRI_MAX, r3
   26464:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   26468:	782b      	ldrb	r3, [r5, #0]
   2646a:	f36f 0300 	bfc	r3, #0, #1
   2646e:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   26470:	6923      	ldr	r3, [r4, #16]
   26472:	079b      	lsls	r3, r3, #30
   26474:	d505      	bpl.n	26482 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   26476:	68e1      	ldr	r1, [r4, #12]
   26478:	69e3      	ldr	r3, [r4, #28]
   2647a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   2647e:	429d      	cmp	r5, r3
   26480:	d112      	bne.n	264a8 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   26482:	782b      	ldrb	r3, [r5, #0]
   26484:	f36f 0341 	bfc	r3, #1, #1
   26488:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   2648a:	68e1      	ldr	r1, [r4, #12]
   2648c:	4620      	mov	r0, r4
   2648e:	f7ff fe47 	bl	26120 <idx_inc>
   26492:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   26494:	f386 8811 	msr	BASEPRI, r6
   26498:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   2649c:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   264a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   264a4:	f7fa bf3a 	b.w	2131c <z_impl_k_sem_give>
		witem->skip.len = wlen;
   264a8:	682b      	ldr	r3, [r5, #0]
   264aa:	f360 039f 	bfi	r3, r0, #2, #30
   264ae:	602b      	str	r3, [r5, #0]
   264b0:	e7f0      	b.n	26494 <mpsc_pbuf_free+0x4a>

000264b2 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   264b2:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   264b6:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   264b8:	bf8a      	itet	hi
   264ba:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   264bc:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   264be:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   264c0:	1e18      	subs	r0, r3, #0
   264c2:	bf18      	it	ne
   264c4:	2001      	movne	r0, #1
   264c6:	4770      	bx	lr

000264c8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   264c8:	4770      	bx	lr

000264ca <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   264ca:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   264cc:	075b      	lsls	r3, r3, #29
   264ce:	d40b      	bmi.n	264e8 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   264d0:	6803      	ldr	r3, [r0, #0]
   264d2:	8840      	ldrh	r0, [r0, #2]
   264d4:	f3c3 2349 	ubfx	r3, r3, #9, #10
   264d8:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   264dc:	4418      	add	r0, r3
   264de:	3017      	adds	r0, #23
   264e0:	f020 0007 	bic.w	r0, r0, #7
   264e4:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   264e6:	4770      	bx	lr
	return 0;
   264e8:	2000      	movs	r0, #0
}
   264ea:	4770      	bx	lr

000264ec <dummy_timestamp>:
}
   264ec:	2000      	movs	r0, #0
   264ee:	4770      	bx	lr

000264f0 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   264f0:	f003 b8fc 	b.w	296ec <sys_clock_cycle_get_32>

000264f4 <z_log_vprintk>:
{
   264f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   264f6:	2300      	movs	r3, #0
   264f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   264fc:	e9cd 3300 	strd	r3, r3, [sp]
   26500:	461a      	mov	r2, r3
   26502:	4619      	mov	r1, r3
   26504:	4618      	mov	r0, r3
   26506:	f7ec fefb 	bl	13300 <z_impl_z_log_msg_runtime_vcreate>
}
   2650a:	b005      	add	sp, #20
   2650c:	f85d fb04 	ldr.w	pc, [sp], #4

00026510 <notify_drop>:
	z_log_dropped(true);
   26510:	2001      	movs	r0, #1
   26512:	f7ec bcf5 	b.w	12f00 <z_log_dropped>

00026516 <z_log_get_tag>:
}
   26516:	2000      	movs	r0, #0
   26518:	4770      	bx	lr

0002651a <z_cbprintf_cpy>:
{
   2651a:	b570      	push	{r4, r5, r6, lr}
   2651c:	4603      	mov	r3, r0
   2651e:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   26520:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
   26524:	1a12      	subs	r2, r2, r0
   26526:	428a      	cmp	r2, r1
{
   26528:	460c      	mov	r4, r1
	if ((desc->size - desc->off) < len) {
   2652a:	d30a      	bcc.n	26542 <z_cbprintf_cpy+0x28>
	memcpy(&((uint8_t *)desc->buf)[desc->off], (void *)buf, len);
   2652c:	682e      	ldr	r6, [r5, #0]
   2652e:	460a      	mov	r2, r1
   26530:	4430      	add	r0, r6
   26532:	4619      	mov	r1, r3
   26534:	f000 fbf0 	bl	26d18 <memcpy>
	desc->off += len;
   26538:	68ab      	ldr	r3, [r5, #8]
   2653a:	4423      	add	r3, r4
   2653c:	60ab      	str	r3, [r5, #8]
	return len;
   2653e:	4620      	mov	r0, r4
}
   26540:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   26542:	f06f 001b 	mvn.w	r0, #27
   26546:	e7fb      	b.n	26540 <z_cbprintf_cpy+0x26>

00026548 <z_log_msg_finalize>:
{
   26548:	b570      	push	{r4, r5, r6, lr}
   2654a:	460e      	mov	r6, r1
   2654c:	4615      	mov	r5, r2
   2654e:	4619      	mov	r1, r3
	if (!msg) {
   26550:	4604      	mov	r4, r0
   26552:	b918      	cbnz	r0, 2655c <z_log_msg_finalize+0x14>
}
   26554:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   26558:	f7ec bcd2 	b.w	12f00 <z_log_dropped>
	if (data) {
   2655c:	b143      	cbz	r3, 26570 <z_log_msg_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
   2655e:	f100 0310 	add.w	r3, r0, #16
   26562:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
   26566:	4418      	add	r0, r3
   26568:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   2656c:	f000 fbd4 	bl	26d18 <memcpy>
	msg->hdr.source = source;
   26570:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   26574:	4620      	mov	r0, r4
}
   26576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   2657a:	f7ec bdff 	b.w	1317c <z_log_msg_commit>

0002657e <buffer_write>:
{
   2657e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26580:	4606      	mov	r6, r0
   26582:	460d      	mov	r5, r1
   26584:	4614      	mov	r4, r2
   26586:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   26588:	4621      	mov	r1, r4
   2658a:	4628      	mov	r0, r5
   2658c:	463a      	mov	r2, r7
   2658e:	47b0      	blx	r6
	} while (len != 0);
   26590:	1a24      	subs	r4, r4, r0
		buf += processed;
   26592:	4405      	add	r5, r0
	} while (len != 0);
   26594:	d1f8      	bne.n	26588 <buffer_write+0xa>
}
   26596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026598 <cbvprintf>:
{
   26598:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   2659a:	2400      	movs	r4, #0
   2659c:	9400      	str	r4, [sp, #0]
   2659e:	f7ec f805 	bl	125ac <z_cbvprintf_impl>
}
   265a2:	b002      	add	sp, #8
   265a4:	bd10      	pop	{r4, pc}

000265a6 <log_output_flush>:
		     output->control_block->offset,
   265a6:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   265a8:	6881      	ldr	r1, [r0, #8]
{
   265aa:	b510      	push	{r4, lr}
   265ac:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   265ae:	e9d2 2300 	ldrd	r2, r3, [r2]
   265b2:	6800      	ldr	r0, [r0, #0]
   265b4:	f7ff ffe3 	bl	2657e <buffer_write>
	output->control_block->offset = 0;
   265b8:	6863      	ldr	r3, [r4, #4]
   265ba:	2200      	movs	r2, #0
   265bc:	601a      	str	r2, [r3, #0]
}
   265be:	bd10      	pop	{r4, pc}

000265c0 <out_func>:
{
   265c0:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   265c2:	684b      	ldr	r3, [r1, #4]
   265c4:	681a      	ldr	r2, [r3, #0]
   265c6:	68cb      	ldr	r3, [r1, #12]
   265c8:	429a      	cmp	r2, r3
{
   265ca:	4605      	mov	r5, r0
   265cc:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   265ce:	d102      	bne.n	265d6 <out_func+0x16>
		log_output_flush(out_ctx);
   265d0:	4608      	mov	r0, r1
   265d2:	f7ff ffe8 	bl	265a6 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   265d6:	6863      	ldr	r3, [r4, #4]
   265d8:	f3bf 8f5b 	dmb	ish
   265dc:	e853 2f00 	ldrex	r2, [r3]
   265e0:	1c51      	adds	r1, r2, #1
   265e2:	e843 1000 	strex	r0, r1, [r3]
   265e6:	2800      	cmp	r0, #0
   265e8:	d1f8      	bne.n	265dc <out_func+0x1c>
   265ea:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   265ee:	68a3      	ldr	r3, [r4, #8]
   265f0:	549d      	strb	r5, [r3, r2]
}
   265f2:	2000      	movs	r0, #0
   265f4:	bd38      	pop	{r3, r4, r5, pc}

000265f6 <cr_out_func>:
{
   265f6:	b538      	push	{r3, r4, r5, lr}
   265f8:	4605      	mov	r5, r0
   265fa:	460c      	mov	r4, r1
	out_func(c, ctx);
   265fc:	f7ff ffe0 	bl	265c0 <out_func>
	if (c == '\n') {
   26600:	2d0a      	cmp	r5, #10
   26602:	d103      	bne.n	2660c <cr_out_func+0x16>
		out_func((int)'\r', ctx);
   26604:	4621      	mov	r1, r4
   26606:	200d      	movs	r0, #13
   26608:	f7ff ffda 	bl	265c0 <out_func>
}
   2660c:	2000      	movs	r0, #0
   2660e:	bd38      	pop	{r3, r4, r5, pc}

00026610 <read_str>:
{
   26610:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   26614:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   26618:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   2661a:	4640      	mov	r0, r8
{
   2661c:	461f      	mov	r7, r3
   2661e:	460c      	mov	r4, r1
   26620:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   26622:	f000 fb23 	bl	26c6c <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   26626:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2662a:	9300      	str	r3, [sp, #0]
   2662c:	b280      	uxth	r0, r0
   2662e:	e9cd 8001 	strd	r8, r0, [sp, #4]
   26632:	463b      	mov	r3, r7
   26634:	4632      	mov	r2, r6
   26636:	4621      	mov	r1, r4
   26638:	4628      	mov	r0, r5
   2663a:	f001 ff15 	bl	28468 <bt_gatt_attr_read>
}
   2663e:	b004      	add	sp, #16
   26640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026644 <bas_init>:
static int bas_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return 0;
}
   26644:	2000      	movs	r0, #0
   26646:	4770      	bx	lr

00026648 <settings_delete>:

int settings_delete(const char *name)
{
	return settings_save_one(name, NULL, 0);
   26648:	2200      	movs	r2, #0
   2664a:	4611      	mov	r1, r2
   2664c:	f7ed ba36 	b.w	13abc <settings_save_one>

00026650 <settings_name_steq>:
	return rc;
}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

int settings_name_steq(const char *name, const char *key, const char **next)
{
   26650:	4603      	mov	r3, r0
   26652:	b530      	push	{r4, r5, lr}
   26654:	4608      	mov	r0, r1
	if (next) {
   26656:	b10a      	cbz	r2, 2665c <settings_name_steq+0xc>
		*next = NULL;
   26658:	2100      	movs	r1, #0
   2665a:	6011      	str	r1, [r2, #0]
	}

	if ((!name) || (!key)) {
   2665c:	b163      	cbz	r3, 26678 <settings_name_steq+0x28>
   2665e:	b190      	cbz	r0, 26686 <settings_name_steq+0x36>
   26660:	1e41      	subs	r1, r0, #1
   26662:	4618      	mov	r0, r3
	/* name might come from flash directly, in flash the name would end
	 * with '=' or '\0' depending how storage is done. Flash reading is
	 * limited to what can be read
	 */

	while ((*key != '\0') && (*key == *name) &&
   26664:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   26668:	4604      	mov	r4, r0
   2666a:	f810 3b01 	ldrb.w	r3, [r0], #1
   2666e:	b15d      	cbz	r5, 26688 <settings_name_steq+0x38>
   26670:	429d      	cmp	r5, r3
   26672:	d101      	bne.n	26678 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   26674:	2d3d      	cmp	r5, #61	; 0x3d
   26676:	d1f5      	bne.n	26664 <settings_name_steq+0x14>

	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
		return 1;
	}

	return 0;
   26678:	2000      	movs	r0, #0
   2667a:	e004      	b.n	26686 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   2667c:	2b3d      	cmp	r3, #61	; 0x3d
   2667e:	d008      	beq.n	26692 <settings_name_steq+0x42>
   26680:	fab3 f083 	clz	r0, r3
   26684:	0940      	lsrs	r0, r0, #5
}
   26686:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   26688:	2b2f      	cmp	r3, #47	; 0x2f
   2668a:	d1f7      	bne.n	2667c <settings_name_steq+0x2c>
		if (next) {
   2668c:	b10a      	cbz	r2, 26692 <settings_name_steq+0x42>
			*next = name + 1;
   2668e:	3401      	adds	r4, #1
   26690:	6014      	str	r4, [r2, #0]
		return 1;
   26692:	2001      	movs	r0, #1
   26694:	e7f7      	b.n	26686 <settings_name_steq+0x36>

00026696 <settings_name_next>:

int settings_name_next(const char *name, const char **next)
{
   26696:	b530      	push	{r4, r5, lr}
   26698:	4603      	mov	r3, r0
	int rc = 0;

	if (next) {
   2669a:	b109      	cbz	r1, 266a0 <settings_name_next+0xa>
		*next = NULL;
   2669c:	2200      	movs	r2, #0
   2669e:	600a      	str	r2, [r1, #0]
	}

	if (!name) {
   266a0:	b16b      	cbz	r3, 266be <settings_name_next+0x28>
   266a2:	461a      	mov	r2, r3
   266a4:	4614      	mov	r4, r2
   266a6:	1ad0      	subs	r0, r2, r3

	/* name might come from flash directly, in flash the name would end
	 * with '=' or '\0' depending how storage is done. Flash reading is
	 * limited to what can be read
	 */
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   266a8:	f812 5b01 	ldrb.w	r5, [r2], #1
   266ac:	b135      	cbz	r5, 266bc <settings_name_next+0x26>
   266ae:	2d3d      	cmp	r5, #61	; 0x3d
   266b0:	d004      	beq.n	266bc <settings_name_next+0x26>
   266b2:	2d2f      	cmp	r5, #47	; 0x2f
   266b4:	d1f6      	bne.n	266a4 <settings_name_next+0xe>
		rc++;
		name++;
	}

	if (*name == SETTINGS_NAME_SEPARATOR) {
		if (next) {
   266b6:	b109      	cbz	r1, 266bc <settings_name_next+0x26>
			*next = name + 1;
   266b8:	3401      	adds	r4, #1
   266ba:	600c      	str	r4, [r1, #0]
		}
		return rc;
	}

	return rc;
}
   266bc:	bd30      	pop	{r4, r5, pc}
		return 0;
   266be:	4618      	mov	r0, r3
   266c0:	e7fc      	b.n	266bc <settings_name_next+0x26>

000266c2 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   266c2:	b538      	push	{r3, r4, r5, lr}
   266c4:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   266c6:	42ab      	cmp	r3, r5
{
   266c8:	4611      	mov	r1, r2
   266ca:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   266cc:	d804      	bhi.n	266d8 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   266ce:	461a      	mov	r2, r3
   266d0:	f000 fb22 	bl	26d18 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   266d4:	4620      	mov	r0, r4
   266d6:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   266d8:	2400      	movs	r4, #0
   266da:	e7fb      	b.n	266d4 <_copy+0x12>

000266dc <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   266dc:	f000 bb27 	b.w	26d2e <memset>

000266e0 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   266e0:	09c3      	lsrs	r3, r0, #7
   266e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   266e6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   266ea:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   266ee:	b2c0      	uxtb	r0, r0
   266f0:	4770      	bx	lr

000266f2 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   266f2:	78cb      	ldrb	r3, [r1, #3]
   266f4:	7802      	ldrb	r2, [r0, #0]
   266f6:	4053      	eors	r3, r2
   266f8:	7003      	strb	r3, [r0, #0]
   266fa:	884b      	ldrh	r3, [r1, #2]
   266fc:	7842      	ldrb	r2, [r0, #1]
   266fe:	4053      	eors	r3, r2
   26700:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   26702:	680a      	ldr	r2, [r1, #0]
   26704:	7883      	ldrb	r3, [r0, #2]
   26706:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2670a:	7083      	strb	r3, [r0, #2]
   2670c:	680a      	ldr	r2, [r1, #0]
   2670e:	78c3      	ldrb	r3, [r0, #3]
   26710:	4053      	eors	r3, r2
   26712:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   26714:	79cb      	ldrb	r3, [r1, #7]
   26716:	7902      	ldrb	r2, [r0, #4]
   26718:	4053      	eors	r3, r2
   2671a:	7103      	strb	r3, [r0, #4]
   2671c:	88cb      	ldrh	r3, [r1, #6]
   2671e:	7942      	ldrb	r2, [r0, #5]
   26720:	4053      	eors	r3, r2
   26722:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   26724:	684a      	ldr	r2, [r1, #4]
   26726:	7983      	ldrb	r3, [r0, #6]
   26728:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2672c:	7183      	strb	r3, [r0, #6]
   2672e:	684a      	ldr	r2, [r1, #4]
   26730:	79c3      	ldrb	r3, [r0, #7]
   26732:	4053      	eors	r3, r2
   26734:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   26736:	7acb      	ldrb	r3, [r1, #11]
   26738:	7a02      	ldrb	r2, [r0, #8]
   2673a:	4053      	eors	r3, r2
   2673c:	7203      	strb	r3, [r0, #8]
   2673e:	7a42      	ldrb	r2, [r0, #9]
   26740:	894b      	ldrh	r3, [r1, #10]
   26742:	4053      	eors	r3, r2
   26744:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   26746:	688a      	ldr	r2, [r1, #8]
   26748:	7a83      	ldrb	r3, [r0, #10]
   2674a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2674e:	7283      	strb	r3, [r0, #10]
   26750:	688a      	ldr	r2, [r1, #8]
   26752:	7ac3      	ldrb	r3, [r0, #11]
   26754:	4053      	eors	r3, r2
   26756:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   26758:	7bcb      	ldrb	r3, [r1, #15]
   2675a:	7b02      	ldrb	r2, [r0, #12]
   2675c:	4053      	eors	r3, r2
   2675e:	7303      	strb	r3, [r0, #12]
   26760:	89cb      	ldrh	r3, [r1, #14]
   26762:	7b42      	ldrb	r2, [r0, #13]
   26764:	4053      	eors	r3, r2
   26766:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   26768:	68ca      	ldr	r2, [r1, #12]
   2676a:	7b83      	ldrb	r3, [r0, #14]
   2676c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   26770:	7383      	strb	r3, [r0, #14]
   26772:	68ca      	ldr	r2, [r1, #12]
   26774:	7bc3      	ldrb	r3, [r0, #15]
   26776:	4053      	eors	r3, r2
   26778:	73c3      	strb	r3, [r0, #15]
}
   2677a:	4770      	bx	lr

0002677c <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2677c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2677e:	7802      	ldrb	r2, [r0, #0]
   26780:	f88d 2000 	strb.w	r2, [sp]
   26784:	7942      	ldrb	r2, [r0, #5]
   26786:	f88d 2001 	strb.w	r2, [sp, #1]
   2678a:	7a82      	ldrb	r2, [r0, #10]
   2678c:	f88d 2002 	strb.w	r2, [sp, #2]
   26790:	7bc2      	ldrb	r2, [r0, #15]
   26792:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   26796:	7902      	ldrb	r2, [r0, #4]
   26798:	f88d 2004 	strb.w	r2, [sp, #4]
   2679c:	7a42      	ldrb	r2, [r0, #9]
   2679e:	f88d 2005 	strb.w	r2, [sp, #5]
   267a2:	7b82      	ldrb	r2, [r0, #14]
   267a4:	f88d 2006 	strb.w	r2, [sp, #6]
   267a8:	78c2      	ldrb	r2, [r0, #3]
   267aa:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   267ae:	7a02      	ldrb	r2, [r0, #8]
   267b0:	f88d 2008 	strb.w	r2, [sp, #8]
   267b4:	7b42      	ldrb	r2, [r0, #13]
   267b6:	f88d 2009 	strb.w	r2, [sp, #9]
   267ba:	7882      	ldrb	r2, [r0, #2]
   267bc:	f88d 200a 	strb.w	r2, [sp, #10]
   267c0:	79c2      	ldrb	r2, [r0, #7]
   267c2:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   267c6:	7b02      	ldrb	r2, [r0, #12]
   267c8:	f88d 200c 	strb.w	r2, [sp, #12]
   267cc:	7842      	ldrb	r2, [r0, #1]
   267ce:	7ac3      	ldrb	r3, [r0, #11]
   267d0:	f88d 200d 	strb.w	r2, [sp, #13]
   267d4:	7982      	ldrb	r2, [r0, #6]
   267d6:	f88d 200e 	strb.w	r2, [sp, #14]
   267da:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   267de:	2310      	movs	r3, #16
   267e0:	466a      	mov	r2, sp
   267e2:	4619      	mov	r1, r3
   267e4:	f7ff ff6d 	bl	266c2 <_copy>
}
   267e8:	b005      	add	sp, #20
   267ea:	f85d fb04 	ldr.w	pc, [sp], #4

000267ee <mult_row_column>:
{
   267ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   267f0:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   267f2:	7808      	ldrb	r0, [r1, #0]
{
   267f4:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   267f6:	f7ff ff73 	bl	266e0 <_double_byte>
   267fa:	4605      	mov	r5, r0
   267fc:	7860      	ldrb	r0, [r4, #1]
   267fe:	f7ff ff6f 	bl	266e0 <_double_byte>
   26802:	78a2      	ldrb	r2, [r4, #2]
   26804:	7863      	ldrb	r3, [r4, #1]
   26806:	4053      	eors	r3, r2
   26808:	78e2      	ldrb	r2, [r4, #3]
   2680a:	4053      	eors	r3, r2
   2680c:	405d      	eors	r5, r3
   2680e:	4045      	eors	r5, r0
   26810:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   26812:	7860      	ldrb	r0, [r4, #1]
   26814:	7827      	ldrb	r7, [r4, #0]
   26816:	f7ff ff63 	bl	266e0 <_double_byte>
   2681a:	4605      	mov	r5, r0
   2681c:	78a0      	ldrb	r0, [r4, #2]
   2681e:	f7ff ff5f 	bl	266e0 <_double_byte>
   26822:	78a3      	ldrb	r3, [r4, #2]
   26824:	405f      	eors	r7, r3
   26826:	78e3      	ldrb	r3, [r4, #3]
   26828:	405f      	eors	r7, r3
   2682a:	407d      	eors	r5, r7
   2682c:	4045      	eors	r5, r0
   2682e:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   26830:	78a0      	ldrb	r0, [r4, #2]
   26832:	7865      	ldrb	r5, [r4, #1]
   26834:	7827      	ldrb	r7, [r4, #0]
   26836:	f7ff ff53 	bl	266e0 <_double_byte>
   2683a:	406f      	eors	r7, r5
   2683c:	4605      	mov	r5, r0
   2683e:	78e0      	ldrb	r0, [r4, #3]
   26840:	f7ff ff4e 	bl	266e0 <_double_byte>
   26844:	78e3      	ldrb	r3, [r4, #3]
   26846:	405f      	eors	r7, r3
   26848:	407d      	eors	r5, r7
   2684a:	4045      	eors	r5, r0
   2684c:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2684e:	7820      	ldrb	r0, [r4, #0]
   26850:	f7ff ff46 	bl	266e0 <_double_byte>
   26854:	7863      	ldrb	r3, [r4, #1]
   26856:	7825      	ldrb	r5, [r4, #0]
   26858:	405d      	eors	r5, r3
   2685a:	78a3      	ldrb	r3, [r4, #2]
   2685c:	405d      	eors	r5, r3
   2685e:	4045      	eors	r5, r0
   26860:	78e0      	ldrb	r0, [r4, #3]
   26862:	f7ff ff3d 	bl	266e0 <_double_byte>
   26866:	b2ed      	uxtb	r5, r5
   26868:	4045      	eors	r5, r0
   2686a:	70f5      	strb	r5, [r6, #3]
}
   2686c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002686e <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   2686e:	b570      	push	{r4, r5, r6, lr}
   26870:	4614      	mov	r4, r2
   26872:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   26874:	4605      	mov	r5, r0
   26876:	2800      	cmp	r0, #0
   26878:	d049      	beq.n	2690e <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2687a:	2900      	cmp	r1, #0
   2687c:	d049      	beq.n	26912 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2687e:	2a00      	cmp	r2, #0
   26880:	d049      	beq.n	26916 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   26882:	2310      	movs	r3, #16
   26884:	460a      	mov	r2, r1
   26886:	4668      	mov	r0, sp
   26888:	4619      	mov	r1, r3
   2688a:	f7ff ff1a 	bl	266c2 <_copy>
	add_round_key(state, s->words);
   2688e:	4621      	mov	r1, r4
   26890:	4668      	mov	r0, sp
   26892:	f7ff ff2e 	bl	266f2 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   26896:	3410      	adds	r4, #16
   26898:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   2689c:	4668      	mov	r0, sp
   2689e:	f7ed fa87 	bl	13db0 <sub_bytes>
		shift_rows(state);
   268a2:	4668      	mov	r0, sp
   268a4:	f7ff ff6a 	bl	2677c <shift_rows>
	mult_row_column(t, s);
   268a8:	4669      	mov	r1, sp
   268aa:	a804      	add	r0, sp, #16
   268ac:	f7ff ff9f 	bl	267ee <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   268b0:	a901      	add	r1, sp, #4
   268b2:	a805      	add	r0, sp, #20
   268b4:	f7ff ff9b 	bl	267ee <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   268b8:	a902      	add	r1, sp, #8
   268ba:	a806      	add	r0, sp, #24
   268bc:	f7ff ff97 	bl	267ee <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   268c0:	a903      	add	r1, sp, #12
   268c2:	a807      	add	r0, sp, #28
   268c4:	f7ff ff93 	bl	267ee <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   268c8:	2310      	movs	r3, #16
   268ca:	4619      	mov	r1, r3
   268cc:	eb0d 0203 	add.w	r2, sp, r3
   268d0:	4668      	mov	r0, sp
   268d2:	f7ff fef6 	bl	266c2 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   268d6:	4621      	mov	r1, r4
   268d8:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   268da:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   268dc:	f7ff ff09 	bl	266f2 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   268e0:	42a6      	cmp	r6, r4
   268e2:	d1db      	bne.n	2689c <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   268e4:	f7ed fa64 	bl	13db0 <sub_bytes>
	shift_rows(state);
   268e8:	4668      	mov	r0, sp
   268ea:	f7ff ff47 	bl	2677c <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   268ee:	4631      	mov	r1, r6
   268f0:	4668      	mov	r0, sp
   268f2:	f7ff fefe 	bl	266f2 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   268f6:	2310      	movs	r3, #16
   268f8:	4619      	mov	r1, r3
   268fa:	466a      	mov	r2, sp
   268fc:	4628      	mov	r0, r5
   268fe:	f7ff fee0 	bl	266c2 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   26902:	4668      	mov	r0, sp
   26904:	2210      	movs	r2, #16
   26906:	2100      	movs	r1, #0
   26908:	f7ff fee8 	bl	266dc <_set>

	return TC_CRYPTO_SUCCESS;
   2690c:	2001      	movs	r0, #1
}
   2690e:	b008      	add	sp, #32
   26910:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   26912:	4608      	mov	r0, r1
   26914:	e7fb      	b.n	2690e <tc_aes_encrypt+0xa0>
   26916:	4610      	mov	r0, r2
   26918:	e7f9      	b.n	2690e <tc_aes_encrypt+0xa0>

0002691a <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2691a:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2691c:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2691e:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   26920:	f912 3b10 	ldrsb.w	r3, [r2], #16
   26924:	2b00      	cmp	r3, #0
   26926:	bfb4      	ite	lt
   26928:	2387      	movlt	r3, #135	; 0x87
   2692a:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2692c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   26930:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   26934:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   26936:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2693a:	d002      	beq.n	26942 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2693c:	7813      	ldrb	r3, [r2, #0]
   2693e:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   26940:	e7f4      	b.n	2692c <gf_double+0x12>
	}
}
   26942:	bd10      	pop	{r4, pc}

00026944 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   26944:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   26946:	b120      	cbz	r0, 26952 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   26948:	2258      	movs	r2, #88	; 0x58
   2694a:	2100      	movs	r1, #0
   2694c:	f7ff fec6 	bl	266dc <_set>
   26950:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   26952:	bd08      	pop	{r3, pc}

00026954 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   26954:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   26956:	4604      	mov	r4, r0
   26958:	b188      	cbz	r0, 2697e <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2695a:	2210      	movs	r2, #16
   2695c:	2100      	movs	r1, #0
   2695e:	f7ff febd 	bl	266dc <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   26962:	2210      	movs	r2, #16
   26964:	f104 0030 	add.w	r0, r4, #48	; 0x30
   26968:	2100      	movs	r1, #0
   2696a:	f7ff feb7 	bl	266dc <_set>
	s->leftover_offset = 0;
   2696e:	2300      	movs	r3, #0
   26970:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   26972:	2200      	movs	r2, #0
   26974:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   26978:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   2697c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2697e:	bd10      	pop	{r4, pc}

00026980 <tc_cmac_setup>:
{
   26980:	b570      	push	{r4, r5, r6, lr}
   26982:	460d      	mov	r5, r1
   26984:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   26986:	4604      	mov	r4, r0
   26988:	b310      	cbz	r0, 269d0 <tc_cmac_setup+0x50>
   2698a:	b311      	cbz	r1, 269d2 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2698c:	2258      	movs	r2, #88	; 0x58
   2698e:	2100      	movs	r1, #0
   26990:	f7ff fea4 	bl	266dc <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   26994:	4629      	mov	r1, r5
	s->sched = sched;
   26996:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   26998:	4630      	mov	r0, r6
   2699a:	f7ed fa15 	bl	13dc8 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2699e:	2210      	movs	r2, #16
   269a0:	2100      	movs	r1, #0
   269a2:	4620      	mov	r0, r4
   269a4:	f7ff fe9a 	bl	266dc <_set>
	gf_double (s->K1, s->iv);
   269a8:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   269ac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   269ae:	4621      	mov	r1, r4
   269b0:	4620      	mov	r0, r4
   269b2:	f7ff ff5c 	bl	2686e <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   269b6:	4621      	mov	r1, r4
   269b8:	4628      	mov	r0, r5
   269ba:	f7ff ffae 	bl	2691a <gf_double>
	gf_double (s->K2, s->K1);
   269be:	4629      	mov	r1, r5
   269c0:	f104 0020 	add.w	r0, r4, #32
   269c4:	f7ff ffa9 	bl	2691a <gf_double>
	tc_cmac_init(s);
   269c8:	4620      	mov	r0, r4
   269ca:	f7ff ffc3 	bl	26954 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   269ce:	2001      	movs	r0, #1
}
   269d0:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   269d2:	4608      	mov	r0, r1
   269d4:	e7fc      	b.n	269d0 <tc_cmac_setup+0x50>

000269d6 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   269d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   269da:	460d      	mov	r5, r1
   269dc:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   269de:	4604      	mov	r4, r0
   269e0:	2800      	cmp	r0, #0
   269e2:	d061      	beq.n	26aa8 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   269e4:	b912      	cbnz	r2, 269ec <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   269e6:	2001      	movs	r0, #1
}
   269e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   269ec:	2900      	cmp	r1, #0
   269ee:	d05b      	beq.n	26aa8 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   269f0:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   269f4:	ea53 0102 	orrs.w	r1, r3, r2
   269f8:	d056      	beq.n	26aa8 <tc_cmac_update+0xd2>
	s->countdown--;
   269fa:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   269fc:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   26a00:	f142 32ff 	adc.w	r2, r2, #4294967295
   26a04:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   26a08:	f1b8 0f00 	cmp.w	r8, #0
   26a0c:	d02a      	beq.n	26a64 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   26a0e:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   26a12:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   26a16:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   26a18:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   26a1a:	d208      	bcs.n	26a2e <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   26a1c:	462a      	mov	r2, r5
   26a1e:	4633      	mov	r3, r6
   26a20:	4631      	mov	r1, r6
   26a22:	f7ff fe4e 	bl	266c2 <_copy>
			s->leftover_offset += data_length;
   26a26:	6c62      	ldr	r2, [r4, #68]	; 0x44
   26a28:	4432      	add	r2, r6
   26a2a:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   26a2c:	e7db      	b.n	269e6 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   26a2e:	463b      	mov	r3, r7
   26a30:	462a      	mov	r2, r5
   26a32:	4639      	mov	r1, r7
   26a34:	f7ff fe45 	bl	266c2 <_copy>
		data_length -= remaining_space;
   26a38:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   26a3a:	2300      	movs	r3, #0
   26a3c:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   26a3e:	4446      	add	r6, r8
		data += remaining_space;
   26a40:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26a42:	1e63      	subs	r3, r4, #1
   26a44:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   26a48:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26a4c:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26a50:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   26a52:	ea82 0200 	eor.w	r2, r2, r0
   26a56:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26a58:	d1f6      	bne.n	26a48 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   26a5a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26a5c:	4621      	mov	r1, r4
   26a5e:	4620      	mov	r0, r4
   26a60:	f7ff ff05 	bl	2686e <tc_aes_encrypt>
   26a64:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   26a68:	2e10      	cmp	r6, #16
   26a6a:	d80a      	bhi.n	26a82 <tc_cmac_update+0xac>
	if (data_length > 0) {
   26a6c:	2e00      	cmp	r6, #0
   26a6e:	d0ba      	beq.n	269e6 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   26a70:	4633      	mov	r3, r6
   26a72:	462a      	mov	r2, r5
   26a74:	4631      	mov	r1, r6
   26a76:	f104 0030 	add.w	r0, r4, #48	; 0x30
   26a7a:	f7ff fe22 	bl	266c2 <_copy>
		s->leftover_offset = data_length;
   26a7e:	6466      	str	r6, [r4, #68]	; 0x44
   26a80:	e7b1      	b.n	269e6 <tc_cmac_update+0x10>
   26a82:	1e63      	subs	r3, r4, #1
   26a84:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   26a86:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26a8a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26a8e:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   26a90:	ea82 0200 	eor.w	r2, r2, r0
   26a94:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26a96:	d1f6      	bne.n	26a86 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   26a98:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26a9a:	4621      	mov	r1, r4
   26a9c:	4620      	mov	r0, r4
   26a9e:	f7ff fee6 	bl	2686e <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   26aa2:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   26aa4:	3e10      	subs	r6, #16
   26aa6:	e7df      	b.n	26a68 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   26aa8:	2000      	movs	r0, #0
   26aaa:	e79d      	b.n	269e8 <tc_cmac_update+0x12>

00026aac <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   26aac:	b570      	push	{r4, r5, r6, lr}
   26aae:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   26ab0:	4605      	mov	r5, r0
   26ab2:	b1e8      	cbz	r0, 26af0 <tc_cmac_final+0x44>
   26ab4:	b369      	cbz	r1, 26b12 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   26ab6:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   26ab8:	2a10      	cmp	r2, #16
   26aba:	d11a      	bne.n	26af2 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   26abc:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26abe:	1e63      	subs	r3, r4, #1
   26ac0:	3901      	subs	r1, #1
   26ac2:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   26ac6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26aca:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   26ace:	4072      	eors	r2, r6
   26ad0:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26ad4:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   26ad6:	ea82 0206 	eor.w	r2, r2, r6
   26ada:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26adc:	d1f3      	bne.n	26ac6 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   26ade:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26ae0:	4621      	mov	r1, r4
   26ae2:	4628      	mov	r0, r5
   26ae4:	f7ff fec3 	bl	2686e <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   26ae8:	4620      	mov	r0, r4
   26aea:	f7ff ff2b 	bl	26944 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   26aee:	2001      	movs	r0, #1
}
   26af0:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   26af2:	f102 0030 	add.w	r0, r2, #48	; 0x30
   26af6:	2100      	movs	r1, #0
   26af8:	f1c2 0210 	rsb	r2, r2, #16
   26afc:	4420      	add	r0, r4
   26afe:	f7ff fded 	bl	266dc <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   26b02:	6c63      	ldr	r3, [r4, #68]	; 0x44
   26b04:	4423      	add	r3, r4
   26b06:	2280      	movs	r2, #128	; 0x80
   26b08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   26b0c:	f104 0120 	add.w	r1, r4, #32
   26b10:	e7d5      	b.n	26abe <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   26b12:	4608      	mov	r0, r1
   26b14:	e7ec      	b.n	26af0 <tc_cmac_final+0x44>

00026b16 <abort_function>:
{
   26b16:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   26b18:	2000      	movs	r0, #0
   26b1a:	f7ec f90d 	bl	12d38 <sys_reboot>

00026b1e <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   26b1e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   26b20:	6800      	ldr	r0, [r0, #0]
   26b22:	f7ed ba8b 	b.w	1403c <z_arm_fatal_error>

00026b26 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   26b26:	2100      	movs	r1, #0
   26b28:	2001      	movs	r0, #1
   26b2a:	f7ed ba87 	b.w	1403c <z_arm_fatal_error>

00026b2e <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   26b2e:	b508      	push	{r3, lr}
	handler();
   26b30:	f7ed fb44 	bl	141bc <z_SysNmiOnReset>
	z_arm_int_exit();
}
   26b34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   26b38:	f7ed bbfc 	b.w	14334 <z_arm_exc_exit>

00026b3c <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   26b3c:	2300      	movs	r3, #0
   26b3e:	f7ec bb8b 	b.w	13258 <z_impl_z_log_msg_static_create>

00026b42 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   26b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26b46:	4607      	mov	r7, r0
   26b48:	4688      	mov	r8, r1
	register const char *s = nptr;
   26b4a:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   26b4c:	4621      	mov	r1, r4
   26b4e:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   26b52:	2b20      	cmp	r3, #32
   26b54:	d0fa      	beq.n	26b4c <strtoul+0xa>
   26b56:	f1a3 0009 	sub.w	r0, r3, #9
   26b5a:	2804      	cmp	r0, #4
   26b5c:	d9f6      	bls.n	26b4c <strtoul+0xa>
	} while (isspace((unsigned char)c));
	if (c == '-') {
   26b5e:	2b2d      	cmp	r3, #45	; 0x2d
   26b60:	d12f      	bne.n	26bc2 <strtoul+0x80>
		neg = 1;
		c = *s++;
   26b62:	784b      	ldrb	r3, [r1, #1]
   26b64:	1c8c      	adds	r4, r1, #2
		neg = 1;
   26b66:	f04f 0c01 	mov.w	ip, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   26b6a:	2a00      	cmp	r2, #0
   26b6c:	d05e      	beq.n	26c2c <strtoul+0xea>
   26b6e:	2a10      	cmp	r2, #16
   26b70:	d109      	bne.n	26b86 <strtoul+0x44>
   26b72:	2b30      	cmp	r3, #48	; 0x30
   26b74:	d107      	bne.n	26b86 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   26b76:	7823      	ldrb	r3, [r4, #0]
   26b78:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   26b7c:	2b58      	cmp	r3, #88	; 0x58
   26b7e:	d150      	bne.n	26c22 <strtoul+0xe0>
		c = s[1];
   26b80:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   26b82:	2210      	movs	r2, #16
		s += 2;
   26b84:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   26b86:	f04f 31ff 	mov.w	r1, #4294967295
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   26b8a:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   26b8c:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   26b90:	fb02 fe01 	mul.w	lr, r2, r1
   26b94:	ea6f 0e0e 	mvn.w	lr, lr
	for (acc = 0, any = 0;; c = *s++) {
   26b98:	4630      	mov	r0, r6
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   26b9a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit((unsigned char)c)) {
   26b9e:	2d09      	cmp	r5, #9
   26ba0:	d816      	bhi.n	26bd0 <strtoul+0x8e>
			c -= '0';
   26ba2:	462b      	mov	r3, r5
		} else if (isalpha((unsigned char)c)) {
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   26ba4:	429a      	cmp	r2, r3
   26ba6:	dd23      	ble.n	26bf0 <strtoul+0xae>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   26ba8:	2e00      	cmp	r6, #0
   26baa:	db1e      	blt.n	26bea <strtoul+0xa8>
   26bac:	4288      	cmp	r0, r1
   26bae:	d81c      	bhi.n	26bea <strtoul+0xa8>
   26bb0:	d101      	bne.n	26bb6 <strtoul+0x74>
   26bb2:	4573      	cmp	r3, lr
   26bb4:	dc19      	bgt.n	26bea <strtoul+0xa8>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   26bb6:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   26bba:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   26bbc:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c)) {
   26bc0:	e7eb      	b.n	26b9a <strtoul+0x58>
	} else if (c == '+') {
   26bc2:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   26bc4:	bf04      	itt	eq
   26bc6:	784b      	ldrbeq	r3, [r1, #1]
   26bc8:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   26bca:	f04f 0c00 	mov.w	ip, #0
   26bce:	e7cc      	b.n	26b6a <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   26bd0:	f043 0520 	orr.w	r5, r3, #32
   26bd4:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha((unsigned char)c)) {
   26bd6:	2d19      	cmp	r5, #25
   26bd8:	d80a      	bhi.n	26bf0 <strtoul+0xae>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   26bda:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
   26bde:	2d1a      	cmp	r5, #26
   26be0:	bf34      	ite	cc
   26be2:	2537      	movcc	r5, #55	; 0x37
   26be4:	2557      	movcs	r5, #87	; 0x57
   26be6:	1b5b      	subs	r3, r3, r5
   26be8:	e7dc      	b.n	26ba4 <strtoul+0x62>
			any = -1;
   26bea:	f04f 36ff 	mov.w	r6, #4294967295
   26bee:	e7e5      	b.n	26bbc <strtoul+0x7a>
		}
	}
	if (any < 0) {
   26bf0:	2e00      	cmp	r6, #0
   26bf2:	da0a      	bge.n	26c0a <strtoul+0xc8>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   26bf4:	f7fa f828 	bl	20c48 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   26bf8:	2322      	movs	r3, #34	; 0x22
   26bfa:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   26bfc:	f04f 30ff 	mov.w	r0, #4294967295
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   26c00:	f1b8 0f00 	cmp.w	r8, #0
   26c04:	d109      	bne.n	26c1a <strtoul+0xd8>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   26c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   26c0a:	f1bc 0f00 	cmp.w	ip, #0
   26c0e:	d000      	beq.n	26c12 <strtoul+0xd0>
		acc = -acc;
   26c10:	4240      	negs	r0, r0
	if (endptr != NULL) {
   26c12:	f1b8 0f00 	cmp.w	r8, #0
   26c16:	d0f6      	beq.n	26c06 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   26c18:	b106      	cbz	r6, 26c1c <strtoul+0xda>
   26c1a:	1e67      	subs	r7, r4, #1
   26c1c:	f8c8 7000 	str.w	r7, [r8]
	return acc;
   26c20:	e7f1      	b.n	26c06 <strtoul+0xc4>
	if (base == 0) {
   26c22:	2330      	movs	r3, #48	; 0x30
   26c24:	2a00      	cmp	r2, #0
   26c26:	d1ae      	bne.n	26b86 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   26c28:	2208      	movs	r2, #8
   26c2a:	e7ac      	b.n	26b86 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   26c2c:	2b30      	cmp	r3, #48	; 0x30
   26c2e:	d0a2      	beq.n	26b76 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   26c30:	220a      	movs	r2, #10
   26c32:	e7a8      	b.n	26b86 <strtoul+0x44>

00026c34 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   26c34:	3901      	subs	r1, #1
   26c36:	4603      	mov	r3, r0
   26c38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   26c3c:	b90a      	cbnz	r2, 26c42 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   26c3e:	701a      	strb	r2, [r3, #0]

	return dest;
}
   26c40:	4770      	bx	lr
		*d = *s;
   26c42:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   26c46:	e7f7      	b.n	26c38 <strcpy+0x4>

00026c48 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
   26c48:	b570      	push	{r4, r5, r6, lr}
   26c4a:	4605      	mov	r5, r0
   26c4c:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   26c4e:	b142      	cbz	r2, 26c62 <strncpy+0x1a>
   26c50:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   26c54:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   26c56:	b92c      	cbnz	r4, 26c64 <strncpy+0x1c>
   26c58:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   26c5a:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   26c5e:	429a      	cmp	r2, r3
   26c60:	d1fb      	bne.n	26c5a <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   26c62:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   26c64:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   26c68:	4632      	mov	r2, r6
   26c6a:	e7ef      	b.n	26c4c <strncpy+0x4>

00026c6c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   26c6c:	4603      	mov	r3, r0
	size_t n = 0;
   26c6e:	2000      	movs	r0, #0

	while (*s != '\0') {
   26c70:	5c1a      	ldrb	r2, [r3, r0]
   26c72:	b902      	cbnz	r2, 26c76 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   26c74:	4770      	bx	lr
		n++;
   26c76:	3001      	adds	r0, #1
   26c78:	e7fa      	b.n	26c70 <strlen+0x4>

00026c7a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   26c7a:	4603      	mov	r3, r0
	size_t n = 0;
   26c7c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   26c7e:	5c1a      	ldrb	r2, [r3, r0]
   26c80:	b10a      	cbz	r2, 26c86 <strnlen+0xc>
   26c82:	4288      	cmp	r0, r1
   26c84:	d100      	bne.n	26c88 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   26c86:	4770      	bx	lr
		n++;
   26c88:	3001      	adds	r0, #1
   26c8a:	e7f8      	b.n	26c7e <strnlen+0x4>

00026c8c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   26c8c:	1e43      	subs	r3, r0, #1
   26c8e:	3901      	subs	r1, #1
   26c90:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26c94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   26c98:	4282      	cmp	r2, r0
   26c9a:	d101      	bne.n	26ca0 <strcmp+0x14>
   26c9c:	2a00      	cmp	r2, #0
   26c9e:	d1f7      	bne.n	26c90 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   26ca0:	1a10      	subs	r0, r2, r0
   26ca2:	4770      	bx	lr

00026ca4 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   26ca4:	b510      	push	{r4, lr}
   26ca6:	3901      	subs	r1, #1
   26ca8:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   26caa:	4282      	cmp	r2, r0
   26cac:	d009      	beq.n	26cc2 <strncmp+0x1e>
   26cae:	7803      	ldrb	r3, [r0, #0]
   26cb0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   26cb4:	42a3      	cmp	r3, r4
   26cb6:	d100      	bne.n	26cba <strncmp+0x16>
   26cb8:	b90b      	cbnz	r3, 26cbe <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   26cba:	1b18      	subs	r0, r3, r4
   26cbc:	e002      	b.n	26cc4 <strncmp+0x20>
		s1++;
   26cbe:	3001      	adds	r0, #1
		n--;
   26cc0:	e7f3      	b.n	26caa <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   26cc2:	2000      	movs	r0, #0
}
   26cc4:	bd10      	pop	{r4, pc}

00026cc6 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   26cc6:	b510      	push	{r4, lr}
   26cc8:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   26cca:	b15a      	cbz	r2, 26ce4 <memcmp+0x1e>
   26ccc:	3901      	subs	r1, #1
   26cce:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   26cd0:	f813 0b01 	ldrb.w	r0, [r3], #1
   26cd4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   26cd8:	42a3      	cmp	r3, r4
   26cda:	d001      	beq.n	26ce0 <memcmp+0x1a>
   26cdc:	4290      	cmp	r0, r2
   26cde:	d0f7      	beq.n	26cd0 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   26ce0:	1a80      	subs	r0, r0, r2
}
   26ce2:	bd10      	pop	{r4, pc}
		return 0;
   26ce4:	4610      	mov	r0, r2
   26ce6:	e7fc      	b.n	26ce2 <memcmp+0x1c>

00026ce8 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   26ce8:	1a43      	subs	r3, r0, r1
   26cea:	4293      	cmp	r3, r2
{
   26cec:	b510      	push	{r4, lr}
   26cee:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   26cf2:	d308      	bcc.n	26d06 <memmove+0x1e>
   26cf4:	3901      	subs	r1, #1
	char *dest = d;
   26cf6:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   26cf8:	429a      	cmp	r2, r3
   26cfa:	d007      	beq.n	26d0c <memmove+0x24>
			*dest = *src;
   26cfc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   26d00:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   26d04:	e7f8      	b.n	26cf8 <memmove+0x10>
   26d06:	440a      	add	r2, r1
		while (n > 0) {
   26d08:	428a      	cmp	r2, r1
   26d0a:	d100      	bne.n	26d0e <memmove+0x26>
		}
	}

	return d;
}
   26d0c:	bd10      	pop	{r4, pc}
			dest[n] = src[n];
   26d0e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   26d12:	f803 4d01 	strb.w	r4, [r3, #-1]!
   26d16:	e7f7      	b.n	26d08 <memmove+0x20>

00026d18 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   26d18:	b510      	push	{r4, lr}
   26d1a:	1e43      	subs	r3, r0, #1
   26d1c:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   26d1e:	4291      	cmp	r1, r2
   26d20:	d100      	bne.n	26d24 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   26d22:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   26d24:	f811 4b01 	ldrb.w	r4, [r1], #1
   26d28:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   26d2c:	e7f7      	b.n	26d1e <memcpy+0x6>

00026d2e <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   26d2e:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   26d30:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   26d32:	4603      	mov	r3, r0
	while (n > 0) {
   26d34:	4293      	cmp	r3, r2
   26d36:	d100      	bne.n	26d3a <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   26d38:	4770      	bx	lr
		*(d_byte++) = c_byte;
   26d3a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   26d3e:	e7f9      	b.n	26d34 <memset+0x6>

00026d40 <_stdout_hook_default>:
}
   26d40:	f04f 30ff 	mov.w	r0, #4294967295
   26d44:	4770      	bx	lr

00026d46 <fputc>:
		union { uintptr_t x; FILE * val; } parm1 = { .val = stream };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   26d46:	f7ed bf29 	b.w	14b9c <z_impl_zephyr_fputc>

00026d4a <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   26d4a:	2806      	cmp	r0, #6
   26d4c:	d108      	bne.n	26d60 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   26d4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26d52:	2201      	movs	r2, #1
   26d54:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   26d58:	f3bf 8f4f 	dsb	sy
        __WFE();
   26d5c:	bf20      	wfe
    while (true)
   26d5e:	e7fd      	b.n	26d5c <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   26d60:	4770      	bx	lr

00026d62 <pm_state_exit_post_ops>:
   26d62:	2300      	movs	r3, #0
   26d64:	f383 8811 	msr	BASEPRI, r3
   26d68:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   26d6c:	4770      	bx	lr

00026d6e <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   26d6e:	b530      	push	{r4, r5, lr}
   26d70:	b085      	sub	sp, #20
   26d72:	4604      	mov	r4, r0
   26d74:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   26d76:	4668      	mov	r0, sp
   26d78:	2203      	movs	r2, #3
   26d7a:	f7ff ffcd 	bl	26d18 <memcpy>
	(void)memset(res + 3, 0, 13);
   26d7e:	220d      	movs	r2, #13
   26d80:	2100      	movs	r1, #0
   26d82:	f10d 0003 	add.w	r0, sp, #3
   26d86:	f7ff ffd2 	bl	26d2e <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   26d8a:	4620      	mov	r0, r4
   26d8c:	466a      	mov	r2, sp
   26d8e:	4669      	mov	r1, sp
   26d90:	f002 fd7e 	bl	29890 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   26d94:	4604      	mov	r4, r0
   26d96:	b920      	cbnz	r0, 26da2 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   26d98:	2203      	movs	r2, #3
   26d9a:	4669      	mov	r1, sp
   26d9c:	4628      	mov	r0, r5
   26d9e:	f7ff ffbb 	bl	26d18 <memcpy>

	return 0;
}
   26da2:	4620      	mov	r0, r4
   26da4:	b005      	add	sp, #20
   26da6:	bd30      	pop	{r4, r5, pc}

00026da8 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   26da8:	b513      	push	{r0, r1, r4, lr}
   26daa:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   26dac:	aa01      	add	r2, sp, #4
   26dae:	3103      	adds	r1, #3
   26db0:	f7ff ffdd 	bl	26d6e <ah>
	if (err) {
   26db4:	b948      	cbnz	r0, 26dca <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   26db6:	2203      	movs	r2, #3
   26db8:	a901      	add	r1, sp, #4
   26dba:	4620      	mov	r0, r4
   26dbc:	f7ff ff83 	bl	26cc6 <memcmp>
   26dc0:	fab0 f080 	clz	r0, r0
   26dc4:	0940      	lsrs	r0, r0, #5
}
   26dc6:	b002      	add	sp, #8
   26dc8:	bd10      	pop	{r4, pc}
		return false;
   26dca:	2000      	movs	r0, #0
   26dcc:	e7fb      	b.n	26dc6 <bt_rpa_irk_matches+0x1e>

00026dce <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   26dce:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   26dd0:	1cce      	adds	r6, r1, #3
{
   26dd2:	4605      	mov	r5, r0
   26dd4:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   26dd6:	4630      	mov	r0, r6
   26dd8:	2103      	movs	r1, #3
   26dda:	f7f8 fc9b 	bl	1f714 <bt_rand>
	if (err) {
   26dde:	b960      	cbnz	r0, 26dfa <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   26de0:	7963      	ldrb	r3, [r4, #5]
   26de2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   26de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26dea:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   26dec:	4622      	mov	r2, r4
   26dee:	4631      	mov	r1, r6
   26df0:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   26df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   26df6:	f7ff bfba 	b.w	26d6e <ah>
}
   26dfa:	bd70      	pop	{r4, r5, r6, pc}

00026dfc <z_log_msg_static_create.constprop.0>:
   26dfc:	2300      	movs	r3, #0
   26dfe:	f7ec ba2b 	b.w	13258 <z_impl_z_log_msg_static_create>

00026e02 <bt_settings_decode_key>:
{
   26e02:	b570      	push	{r4, r5, r6, lr}
   26e04:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   26e06:	2100      	movs	r1, #0
{
   26e08:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   26e0a:	f7ff fc44 	bl	26696 <settings_name_next>
   26e0e:	280d      	cmp	r0, #13
   26e10:	d118      	bne.n	26e44 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   26e12:	7b23      	ldrb	r3, [r4, #12]
   26e14:	2b30      	cmp	r3, #48	; 0x30
   26e16:	d111      	bne.n	26e3c <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   26e18:	2300      	movs	r3, #0
   26e1a:	702b      	strb	r3, [r5, #0]
   26e1c:	f104 060c 	add.w	r6, r4, #12
   26e20:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   26e22:	462a      	mov	r2, r5
   26e24:	4620      	mov	r0, r4
   26e26:	2301      	movs	r3, #1
   26e28:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   26e2a:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   26e2c:	f7fe fdd8 	bl	259e0 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   26e30:	42b4      	cmp	r4, r6
   26e32:	f105 35ff 	add.w	r5, r5, #4294967295
   26e36:	d1f4      	bne.n	26e22 <bt_settings_decode_key+0x20>
	return 0;
   26e38:	2000      	movs	r0, #0
}
   26e3a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   26e3c:	2b31      	cmp	r3, #49	; 0x31
   26e3e:	d101      	bne.n	26e44 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   26e40:	2301      	movs	r3, #1
   26e42:	e7ea      	b.n	26e1a <bt_settings_decode_key+0x18>
		return -EINVAL;
   26e44:	f06f 0015 	mvn.w	r0, #21
   26e48:	e7f7      	b.n	26e3a <bt_settings_decode_key+0x38>

00026e4a <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   26e4a:	b510      	push	{r4, lr}
   26e4c:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   26e4e:	7801      	ldrb	r1, [r0, #0]
   26e50:	7822      	ldrb	r2, [r4, #0]
   26e52:	428a      	cmp	r2, r1
{
   26e54:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   26e56:	d00f      	beq.n	26e78 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   26e58:	4669      	mov	r1, sp
   26e5a:	f7ee f925 	bl	150a8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   26e5e:	a905      	add	r1, sp, #20
   26e60:	4620      	mov	r0, r4
   26e62:	f7ee f921 	bl	150a8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   26e66:	2210      	movs	r2, #16
   26e68:	f10d 0115 	add.w	r1, sp, #21
   26e6c:	f10d 0001 	add.w	r0, sp, #1
   26e70:	f7ff ff29 	bl	26cc6 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   26e74:	b00a      	add	sp, #40	; 0x28
   26e76:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   26e78:	2a01      	cmp	r2, #1
   26e7a:	d006      	beq.n	26e8a <bt_uuid_cmp+0x40>
   26e7c:	2a02      	cmp	r2, #2
   26e7e:	d007      	beq.n	26e90 <bt_uuid_cmp+0x46>
   26e80:	b972      	cbnz	r2, 26ea0 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   26e82:	8840      	ldrh	r0, [r0, #2]
   26e84:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   26e86:	1ac0      	subs	r0, r0, r3
   26e88:	e7f4      	b.n	26e74 <bt_uuid_cmp+0x2a>
   26e8a:	6840      	ldr	r0, [r0, #4]
   26e8c:	6863      	ldr	r3, [r4, #4]
   26e8e:	e7fa      	b.n	26e86 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   26e90:	2210      	movs	r2, #16
   26e92:	1c61      	adds	r1, r4, #1
   26e94:	3001      	adds	r0, #1
}
   26e96:	b00a      	add	sp, #40	; 0x28
   26e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   26e9c:	f7ff bf13 	b.w	26cc6 <memcmp>
	switch (u1->type) {
   26ea0:	f06f 0015 	mvn.w	r0, #21
   26ea4:	e7e6      	b.n	26e74 <bt_uuid_cmp+0x2a>

00026ea6 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   26ea6:	2a04      	cmp	r2, #4
{
   26ea8:	b510      	push	{r4, lr}
	switch (data_len) {
   26eaa:	d00a      	beq.n	26ec2 <bt_uuid_create+0x1c>
   26eac:	2a10      	cmp	r2, #16
   26eae:	d00d      	beq.n	26ecc <bt_uuid_create+0x26>
   26eb0:	2a02      	cmp	r2, #2
   26eb2:	f04f 0300 	mov.w	r3, #0
   26eb6:	d10f      	bne.n	26ed8 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   26eb8:	7003      	strb	r3, [r0, #0]
   26eba:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   26ebc:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   26ebe:	2001      	movs	r0, #1
}
   26ec0:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   26ec2:	2301      	movs	r3, #1
   26ec4:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   26ec6:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   26ec8:	6042      	str	r2, [r0, #4]
		break;
   26eca:	e7f8      	b.n	26ebe <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   26ecc:	2302      	movs	r3, #2
   26ece:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   26ed2:	f7ff ff21 	bl	26d18 <memcpy>
		break;
   26ed6:	e7f2      	b.n	26ebe <bt_uuid_create+0x18>
	switch (data_len) {
   26ed8:	4618      	mov	r0, r3
   26eda:	e7f1      	b.n	26ec0 <bt_uuid_create+0x1a>

00026edc <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   26edc:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   26ede:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   26ee0:	2106      	movs	r1, #6
{
   26ee2:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   26ee4:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   26ee8:	f7f8 fc14 	bl	1f714 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   26eec:	b918      	cbnz	r0, 26ef6 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   26eee:	79a3      	ldrb	r3, [r4, #6]
   26ef0:	f063 033f 	orn	r3, r3, #63	; 0x3f
   26ef4:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   26ef6:	bd10      	pop	{r4, pc}

00026ef8 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   26ef8:	280f      	cmp	r0, #15
   26efa:	d806      	bhi.n	26f0a <bt_hci_evt_get_flags+0x12>
   26efc:	280d      	cmp	r0, #13
   26efe:	d80b      	bhi.n	26f18 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   26f00:	2805      	cmp	r0, #5
   26f02:	bf14      	ite	ne
   26f04:	2002      	movne	r0, #2
   26f06:	2003      	moveq	r0, #3
   26f08:	4770      	bx	lr
	switch (evt) {
   26f0a:	2813      	cmp	r0, #19
   26f0c:	d004      	beq.n	26f18 <bt_hci_evt_get_flags+0x20>
   26f0e:	281a      	cmp	r0, #26
   26f10:	bf14      	ite	ne
   26f12:	2002      	movne	r0, #2
   26f14:	2001      	moveq	r0, #1
   26f16:	4770      	bx	lr
   26f18:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   26f1a:	4770      	bx	lr

00026f1c <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   26f1c:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   26f20:	b193      	cbz	r3, 26f48 <update_sec_level+0x2c>
   26f22:	7b5a      	ldrb	r2, [r3, #13]
   26f24:	07d1      	lsls	r1, r2, #31
   26f26:	d50f      	bpl.n	26f48 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   26f28:	06d2      	lsls	r2, r2, #27
   26f2a:	d50b      	bpl.n	26f44 <update_sec_level+0x28>
   26f2c:	7b1b      	ldrb	r3, [r3, #12]
   26f2e:	2b10      	cmp	r3, #16
   26f30:	d108      	bne.n	26f44 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   26f32:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   26f34:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   26f36:	7a82      	ldrb	r2, [r0, #10]
   26f38:	7a40      	ldrb	r0, [r0, #9]
}
   26f3a:	4282      	cmp	r2, r0
   26f3c:	bf8c      	ite	hi
   26f3e:	2000      	movhi	r0, #0
   26f40:	2001      	movls	r0, #1
   26f42:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   26f44:	2303      	movs	r3, #3
   26f46:	e7f5      	b.n	26f34 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   26f48:	2302      	movs	r3, #2
   26f4a:	e7f3      	b.n	26f34 <update_sec_level+0x18>

00026f4c <hci_vendor_event>:
}
   26f4c:	4770      	bx	lr

00026f4e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   26f4e:	2207      	movs	r2, #7
   26f50:	f7ff bee2 	b.w	26d18 <memcpy>

00026f54 <atomic_or>:
{
   26f54:	4603      	mov	r3, r0
}
   26f56:	f3bf 8f5b 	dmb	ish
   26f5a:	e853 0f00 	ldrex	r0, [r3]
   26f5e:	ea40 0201 	orr.w	r2, r0, r1
   26f62:	e843 2c00 	strex	ip, r2, [r3]
   26f66:	f1bc 0f00 	cmp.w	ip, #0
   26f6a:	d1f6      	bne.n	26f5a <atomic_or+0x6>
   26f6c:	f3bf 8f5b 	dmb	ish
   26f70:	4770      	bx	lr

00026f72 <unpair_remote>:
{
   26f72:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   26f74:	4601      	mov	r1, r0
   26f76:	7818      	ldrb	r0, [r3, #0]
   26f78:	f7ee b93c 	b.w	151f4 <unpair>

00026f7c <z_log_msg_static_create.constprop.0>:
   26f7c:	2300      	movs	r3, #0
   26f7e:	f7ec b96b 	b.w	13258 <z_impl_z_log_msg_static_create>

00026f82 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26f82:	f3bf 8f5b 	dmb	ish
   26f86:	e850 3f00 	ldrex	r3, [r0]
   26f8a:	400b      	ands	r3, r1
   26f8c:	e840 3200 	strex	r2, r3, [r0]
   26f90:	2a00      	cmp	r2, #0
   26f92:	d1f8      	bne.n	26f86 <atomic_and.isra.0+0x4>
   26f94:	f3bf 8f5b 	dmb	ish
}
   26f98:	4770      	bx	lr

00026f9a <sys_put_le64>:
	dst[1] = val >> 8;
   26f9a:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   26f9e:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   26fa0:	0e00      	lsrs	r0, r0, #24
   26fa2:	7053      	strb	r3, [r2, #1]
   26fa4:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   26fa6:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   26fa8:	f3c1 2007 	ubfx	r0, r1, #8, #8
   26fac:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   26fae:	7093      	strb	r3, [r2, #2]
   26fb0:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   26fb2:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   26fb4:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   26fb6:	71d1      	strb	r1, [r2, #7]
}
   26fb8:	4770      	bx	lr

00026fba <bt_hci_disconnect>:
{
   26fba:	b570      	push	{r4, r5, r6, lr}
   26fbc:	4606      	mov	r6, r0
   26fbe:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   26fc0:	f240 4006 	movw	r0, #1030	; 0x406
   26fc4:	2103      	movs	r1, #3
   26fc6:	f7ee fd93 	bl	15af0 <bt_hci_cmd_create>
	if (!buf) {
   26fca:	4604      	mov	r4, r0
   26fcc:	b168      	cbz	r0, 26fea <bt_hci_disconnect+0x30>
   26fce:	2103      	movs	r1, #3
   26fd0:	3008      	adds	r0, #8
   26fd2:	f002 f87f 	bl	290d4 <net_buf_simple_add>
	disconn->reason = reason;
   26fd6:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   26fd8:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   26fda:	4621      	mov	r1, r4
   26fdc:	2200      	movs	r2, #0
}
   26fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   26fe2:	f240 4006 	movw	r0, #1030	; 0x406
   26fe6:	f7ee bdbd 	b.w	15b64 <bt_hci_cmd_send_sync>
}
   26fea:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26fee:	bd70      	pop	{r4, r5, r6, pc}

00026ff0 <bt_le_set_data_len>:
{
   26ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26ff2:	4607      	mov	r7, r0
   26ff4:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   26ff6:	f242 0022 	movw	r0, #8226	; 0x2022
   26ffa:	2106      	movs	r1, #6
{
   26ffc:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   26ffe:	f7ee fd77 	bl	15af0 <bt_hci_cmd_create>
	if (!buf) {
   27002:	4604      	mov	r4, r0
   27004:	b178      	cbz	r0, 27026 <bt_le_set_data_len+0x36>
   27006:	2106      	movs	r1, #6
   27008:	3008      	adds	r0, #8
   2700a:	f002 f863 	bl	290d4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2700e:	883b      	ldrh	r3, [r7, #0]
   27010:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   27012:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   27014:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   27016:	4621      	mov	r1, r4
   27018:	2200      	movs	r2, #0
}
   2701a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2701e:	f242 0022 	movw	r0, #8226	; 0x2022
   27022:	f7ee bd9f 	b.w	15b64 <bt_hci_cmd_send_sync>
}
   27026:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2702a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002702c <bt_le_set_phy>:
{
   2702c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27030:	4680      	mov	r8, r0
   27032:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   27034:	f242 0032 	movw	r0, #8242	; 0x2032
   27038:	2107      	movs	r1, #7
{
   2703a:	f89d 9020 	ldrb.w	r9, [sp, #32]
   2703e:	4616      	mov	r6, r2
   27040:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   27042:	f7ee fd55 	bl	15af0 <bt_hci_cmd_create>
	if (!buf) {
   27046:	4604      	mov	r4, r0
   27048:	b198      	cbz	r0, 27072 <bt_le_set_phy+0x46>
   2704a:	2107      	movs	r1, #7
   2704c:	3008      	adds	r0, #8
   2704e:	f002 f841 	bl	290d4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   27052:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   27056:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   27058:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2705a:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2705c:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   2705e:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   27062:	4621      	mov	r1, r4
   27064:	2200      	movs	r2, #0
}
   27066:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2706a:	f242 0032 	movw	r0, #8242	; 0x2032
   2706e:	f7ee bd79 	b.w	15b64 <bt_hci_cmd_send_sync>
}
   27072:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002707a <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2707a:	6880      	ldr	r0, [r0, #8]
   2707c:	f7ee be42 	b.w	15d04 <bt_hci_le_enh_conn_complete>

00027080 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   27080:	8803      	ldrh	r3, [r0, #0]
   27082:	8842      	ldrh	r2, [r0, #2]
   27084:	4293      	cmp	r3, r2
{
   27086:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   27088:	d819      	bhi.n	270be <bt_le_conn_params_valid+0x3e>
   2708a:	2b05      	cmp	r3, #5
   2708c:	d917      	bls.n	270be <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2708e:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   27092:	d814      	bhi.n	270be <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   27094:	8883      	ldrh	r3, [r0, #4]
   27096:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2709a:	d210      	bcs.n	270be <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2709c:	88c0      	ldrh	r0, [r0, #6]
   2709e:	f1a0 010a 	sub.w	r1, r0, #10
   270a2:	b289      	uxth	r1, r1
   270a4:	f640 4476 	movw	r4, #3190	; 0xc76
   270a8:	42a1      	cmp	r1, r4
   270aa:	d808      	bhi.n	270be <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   270ac:	3301      	adds	r3, #1
   270ae:	b29b      	uxth	r3, r3
   270b0:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   270b2:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   270b6:	bf34      	ite	cc
   270b8:	2001      	movcc	r0, #1
   270ba:	2000      	movcs	r0, #0
}
   270bc:	bd10      	pop	{r4, pc}
		return false;
   270be:	2000      	movs	r0, #0
   270c0:	e7fc      	b.n	270bc <bt_le_conn_params_valid+0x3c>

000270c2 <le_conn_param_neg_reply>:
{
   270c2:	b570      	push	{r4, r5, r6, lr}
   270c4:	4606      	mov	r6, r0
   270c6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   270c8:	f242 0021 	movw	r0, #8225	; 0x2021
   270cc:	2103      	movs	r1, #3
   270ce:	f7ee fd0f 	bl	15af0 <bt_hci_cmd_create>
	if (!buf) {
   270d2:	4604      	mov	r4, r0
   270d4:	b918      	cbnz	r0, 270de <le_conn_param_neg_reply+0x1c>
}
   270d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   270da:	f7ee b935 	b.w	15348 <le_conn_param_neg_reply.part.0>
   270de:	2103      	movs	r1, #3
   270e0:	3008      	adds	r0, #8
   270e2:	f001 fff7 	bl	290d4 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   270e6:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   270e8:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   270ea:	4621      	mov	r1, r4
   270ec:	f242 0021 	movw	r0, #8225	; 0x2021
}
   270f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   270f4:	f7ef b8ca 	b.w	1628c <bt_hci_cmd_send>

000270f8 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   270f8:	f240 3041 	movw	r0, #833	; 0x341
   270fc:	4770      	bx	lr

000270fe <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   270fe:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   27100:	f7f5 fd4c 	bl	1cb9c <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   27104:	b118      	cbz	r0, 2710e <bt_addr_le_is_bonded+0x10>
   27106:	89c0      	ldrh	r0, [r0, #14]
   27108:	3800      	subs	r0, #0
   2710a:	bf18      	it	ne
   2710c:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   2710e:	bd08      	pop	{r3, pc}

00027110 <bt_addr_le_copy>:
   27110:	2207      	movs	r2, #7
   27112:	f7ff be01 	b.w	26d18 <memcpy>

00027116 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27116:	f3bf 8f5b 	dmb	ish
   2711a:	6800      	ldr	r0, [r0, #0]
   2711c:	f3bf 8f5b 	dmb	ish
}
   27120:	4770      	bx	lr

00027122 <atomic_test_bit>:
{
   27122:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   27124:	f7ff fff7 	bl	27116 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   27128:	4108      	asrs	r0, r1
}
   2712a:	f000 0001 	and.w	r0, r0, #1
   2712e:	bd08      	pop	{r3, pc}

00027130 <adv_is_private_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   27130:	f100 0210 	add.w	r2, r0, #16
{
   27134:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   27136:	4610      	mov	r0, r2
{
   27138:	460c      	mov	r4, r1
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2713a:	2106      	movs	r1, #6
   2713c:	f7ff fff1 	bl	27122 <atomic_test_bit>
   27140:	b130      	cbz	r0, 27150 <adv_is_private_enabled+0x20>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   27142:	210c      	movs	r1, #12
   27144:	4610      	mov	r0, r2
   27146:	f7ff ffec 	bl	27122 <atomic_test_bit>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2714a:	b908      	cbnz	r0, 27150 <adv_is_private_enabled+0x20>
		*adv_enabled = true;
   2714c:	2301      	movs	r3, #1
   2714e:	7023      	strb	r3, [r4, #0]
}
   27150:	bd10      	pop	{r4, pc}

00027152 <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27152:	f100 0310 	add.w	r3, r0, #16
   27156:	f3bf 8f5b 	dmb	ish
   2715a:	e853 2f00 	ldrex	r2, [r3]
   2715e:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   27162:	e843 1c00 	strex	ip, r1, [r3]
   27166:	f1bc 0f00 	cmp.w	ip, #0
   2716a:	d1f6      	bne.n	2715a <adv_unpause_enabled+0x8>
   2716c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   27170:	0453      	lsls	r3, r2, #17
   27172:	d502      	bpl.n	2717a <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   27174:	2101      	movs	r1, #1
   27176:	f000 b8b2 	b.w	272de <bt_le_adv_set_enable>
}
   2717a:	4770      	bx	lr

0002717c <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2717c:	7a03      	ldrb	r3, [r0, #8]
   2717e:	075b      	lsls	r3, r3, #29
{
   27180:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   27182:	d505      	bpl.n	27190 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   27184:	4601      	mov	r1, r0
   27186:	322a      	adds	r2, #42	; 0x2a
   27188:	f811 0b01 	ldrb.w	r0, [r1], #1
   2718c:	f7ef bb2c 	b.w	167e8 <hci_id_add>
}
   27190:	4770      	bx	lr

00027192 <z_log_msg_static_create.constprop.0>:
   27192:	2300      	movs	r3, #0
   27194:	f7ec b860 	b.w	13258 <z_impl_z_log_msg_static_create>

00027198 <addr_res_enable>:
{
   27198:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2719a:	2101      	movs	r1, #1
{
   2719c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2719e:	f242 002d 	movw	r0, #8237	; 0x202d
   271a2:	f7ee fca5 	bl	15af0 <bt_hci_cmd_create>
	if (!buf) {
   271a6:	4604      	mov	r4, r0
   271a8:	b158      	cbz	r0, 271c2 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   271aa:	4629      	mov	r1, r5
   271ac:	3008      	adds	r0, #8
   271ae:	f001 ffa0 	bl	290f2 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   271b2:	4621      	mov	r1, r4
   271b4:	2200      	movs	r2, #0
}
   271b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   271ba:	f242 002d 	movw	r0, #8237	; 0x202d
   271be:	f7ee bcd1 	b.w	15b64 <bt_hci_cmd_send_sync>
}
   271c2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   271c6:	bd38      	pop	{r3, r4, r5, pc}

000271c8 <atomic_or.isra.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   271c8:	f3bf 8f5b 	dmb	ish
   271cc:	e850 3f00 	ldrex	r3, [r0]
   271d0:	430b      	orrs	r3, r1
   271d2:	e840 3200 	strex	r2, r3, [r0]
   271d6:	2a00      	cmp	r2, #0
   271d8:	d1f8      	bne.n	271cc <atomic_or.isra.0+0x4>
   271da:	f3bf 8f5b 	dmb	ish
}
   271de:	4770      	bx	lr

000271e0 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   271e0:	f100 0210 	add.w	r2, r0, #16
{
   271e4:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   271e6:	2106      	movs	r1, #6
{
   271e8:	4604      	mov	r4, r0
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   271ea:	4610      	mov	r0, r2
   271ec:	f7ff ff99 	bl	27122 <atomic_test_bit>
   271f0:	b150      	cbz	r0, 27208 <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   271f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   271f6:	4610      	mov	r0, r2
   271f8:	f7ff ffe6 	bl	271c8 <atomic_or.isra.0>
		bt_le_adv_set_enable(adv, false);
   271fc:	4620      	mov	r0, r4
   271fe:	2100      	movs	r1, #0
}
   27200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_set_enable(adv, false);
   27204:	f000 b86b 	b.w	272de <bt_le_adv_set_enable>
}
   27208:	bd10      	pop	{r4, pc}

0002720a <adv_rpa_invalidate>:
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED)) {
   2720a:	f100 0210 	add.w	r2, r0, #16
{
   2720e:	b508      	push	{r3, lr}
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED)) {
   27210:	2105      	movs	r1, #5
   27212:	4610      	mov	r0, r2
   27214:	f7ff ff85 	bl	27122 <atomic_test_bit>
   27218:	b958      	cbnz	r0, 27232 <adv_rpa_invalidate+0x28>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2721a:	f3bf 8f5b 	dmb	ish
   2721e:	e852 3f00 	ldrex	r3, [r2]
   27222:	f023 0310 	bic.w	r3, r3, #16
   27226:	e842 3100 	strex	r1, r3, [r2]
   2722a:	2900      	cmp	r1, #0
   2722c:	d1f7      	bne.n	2721e <adv_rpa_invalidate+0x14>
   2722e:	f3bf 8f5b 	dmb	ish
}
   27232:	bd08      	pop	{r3, pc}

00027234 <bt_lookup_id_addr>:
{
   27234:	b510      	push	{r4, lr}
   27236:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   27238:	f7f5 fc78 	bl	1cb2c <bt_keys_find_irk>
		if (keys) {
   2723c:	b100      	cbz	r0, 27240 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   2723e:	1c44      	adds	r4, r0, #1
}
   27240:	4620      	mov	r0, r4
   27242:	bd10      	pop	{r4, pc}

00027244 <bt_id_set_adv_private_addr>:
		return bt_id_set_private_addr(adv->id);
   27244:	7800      	ldrb	r0, [r0, #0]
   27246:	f7ef bceb 	b.w	16c20 <bt_id_set_private_addr>

0002724a <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2724a:	7a03      	ldrb	r3, [r0, #8]
   2724c:	07d9      	lsls	r1, r3, #31
   2724e:	d504      	bpl.n	2725a <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   27250:	f023 0301 	bic.w	r3, r3, #1
   27254:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   27256:	f7ef bda5 	b.w	16da4 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2725a:	0799      	lsls	r1, r3, #30
   2725c:	d504      	bpl.n	27268 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2725e:	f023 0302 	bic.w	r3, r3, #2
   27262:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   27264:	f7ef bdb6 	b.w	16dd4 <bt_id_del>
}
   27268:	4770      	bx	lr

0002726a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2726a:	f3bf 8f5b 	dmb	ish
   2726e:	6800      	ldr	r0, [r0, #0]
   27270:	f3bf 8f5b 	dmb	ish
}
   27274:	4770      	bx	lr

00027276 <atomic_and>:
{
   27276:	4603      	mov	r3, r0
}
   27278:	f3bf 8f5b 	dmb	ish
   2727c:	e853 0f00 	ldrex	r0, [r3]
   27280:	ea00 0201 	and.w	r2, r0, r1
   27284:	e843 2c00 	strex	ip, r2, [r3]
   27288:	f1bc 0f00 	cmp.w	ip, #0
   2728c:	d1f6      	bne.n	2727c <atomic_and+0x6>
   2728e:	f3bf 8f5b 	dmb	ish
   27292:	4770      	bx	lr

00027294 <bt_le_adv_set_enable_legacy>:
{
   27294:	b570      	push	{r4, r5, r6, lr}
   27296:	4606      	mov	r6, r0
   27298:	b086      	sub	sp, #24
   2729a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2729c:	f242 000a 	movw	r0, #8202	; 0x200a
   272a0:	2101      	movs	r1, #1
   272a2:	f7ee fc25 	bl	15af0 <bt_hci_cmd_create>
	if (!buf) {
   272a6:	4604      	mov	r4, r0
   272a8:	b1b0      	cbz	r0, 272d8 <bt_le_adv_set_enable_legacy+0x44>
   272aa:	3008      	adds	r0, #8
	if (enable) {
   272ac:	b195      	cbz	r5, 272d4 <bt_le_adv_set_enable_legacy+0x40>
   272ae:	2101      	movs	r1, #1
   272b0:	f001 ff1f 	bl	290f2 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   272b4:	f106 0210 	add.w	r2, r6, #16
   272b8:	a903      	add	r1, sp, #12
   272ba:	4620      	mov	r0, r4
   272bc:	9500      	str	r5, [sp, #0]
   272be:	2306      	movs	r3, #6
   272c0:	f7ee fc04 	bl	15acc <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   272c4:	2200      	movs	r2, #0
   272c6:	4621      	mov	r1, r4
   272c8:	f242 000a 	movw	r0, #8202	; 0x200a
   272cc:	f7ee fc4a 	bl	15b64 <bt_hci_cmd_send_sync>
}
   272d0:	b006      	add	sp, #24
   272d2:	bd70      	pop	{r4, r5, r6, pc}
   272d4:	4629      	mov	r1, r5
   272d6:	e7eb      	b.n	272b0 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   272d8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   272dc:	e7f8      	b.n	272d0 <bt_le_adv_set_enable_legacy+0x3c>

000272de <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   272de:	f7ff bfd9 	b.w	27294 <bt_le_adv_set_enable_legacy>

000272e2 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   272e2:	3018      	adds	r0, #24
   272e4:	f002 bf17 	b.w	2a116 <k_work_cancel_delayable>

000272e8 <atomic_and>:
{
   272e8:	4603      	mov	r3, r0
}
   272ea:	f3bf 8f5b 	dmb	ish
   272ee:	e853 0f00 	ldrex	r0, [r3]
   272f2:	ea00 0201 	and.w	r2, r0, r1
   272f6:	e843 2c00 	strex	ip, r2, [r3]
   272fa:	f1bc 0f00 	cmp.w	ip, #0
   272fe:	d1f6      	bne.n	272ee <atomic_and+0x6>
   27300:	f3bf 8f5b 	dmb	ish
   27304:	4770      	bx	lr

00027306 <z_log_msg_static_create.constprop.0>:
   27306:	2300      	movs	r3, #0
   27308:	f7eb bfa6 	b.w	13258 <z_impl_z_log_msg_static_create>

0002730c <tx_complete_work>:
	tx_notify(conn);
   2730c:	3828      	subs	r0, #40	; 0x28
   2730e:	f7f0 b945 	b.w	1759c <tx_notify>

00027312 <bt_conn_reset_rx_state>:
{
   27312:	b510      	push	{r4, lr}
   27314:	4604      	mov	r4, r0
	if (!conn->rx) {
   27316:	6900      	ldr	r0, [r0, #16]
   27318:	b118      	cbz	r0, 27322 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2731a:	f7f5 fe85 	bl	1d028 <net_buf_unref>
	conn->rx = NULL;
   2731e:	2300      	movs	r3, #0
   27320:	6123      	str	r3, [r4, #16]
}
   27322:	bd10      	pop	{r4, pc}

00027324 <bt_conn_ref>:
{
   27324:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   27326:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2732a:	f3bf 8f5b 	dmb	ish
   2732e:	6813      	ldr	r3, [r2, #0]
   27330:	f3bf 8f5b 	dmb	ish
		if (!old) {
   27334:	b17b      	cbz	r3, 27356 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   27336:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2733a:	1c59      	adds	r1, r3, #1
   2733c:	e852 4f00 	ldrex	r4, [r2]
   27340:	429c      	cmp	r4, r3
   27342:	d104      	bne.n	2734e <bt_conn_ref+0x2a>
   27344:	e842 1c00 	strex	ip, r1, [r2]
   27348:	f1bc 0f00 	cmp.w	ip, #0
   2734c:	d1f6      	bne.n	2733c <bt_conn_ref+0x18>
   2734e:	f3bf 8f5b 	dmb	ish
   27352:	d1ea      	bne.n	2732a <bt_conn_ref+0x6>
}
   27354:	bd10      	pop	{r4, pc}
			return NULL;
   27356:	4618      	mov	r0, r3
   27358:	e7fc      	b.n	27354 <bt_conn_ref+0x30>

0002735a <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   2735a:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2735e:	f3bf 8f5b 	dmb	ish
   27362:	e853 2f00 	ldrex	r2, [r3]
   27366:	3a01      	subs	r2, #1
   27368:	e843 2100 	strex	r1, r2, [r3]
   2736c:	2900      	cmp	r1, #0
   2736e:	d1f8      	bne.n	27362 <bt_conn_unref+0x8>
   27370:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   27374:	7883      	ldrb	r3, [r0, #2]
   27376:	2b01      	cmp	r3, #1
   27378:	d108      	bne.n	2738c <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2737a:	f3bf 8f5b 	dmb	ish
   2737e:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   27382:	f3bf 8f5b 	dmb	ish
   27386:	b90b      	cbnz	r3, 2738c <bt_conn_unref+0x32>
		bt_le_adv_resume();
   27388:	f7ef bf32 	b.w	171f0 <bt_le_adv_resume>
}
   2738c:	4770      	bx	lr

0002738e <conn_lookup_handle>:
{
   2738e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27392:	4607      	mov	r7, r0
   27394:	460e      	mov	r6, r1
   27396:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   27398:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2739a:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   2739e:	42b4      	cmp	r4, r6
   273a0:	d103      	bne.n	273aa <conn_lookup_handle+0x1c>
	return NULL;
   273a2:	2300      	movs	r3, #0
}
   273a4:	4618      	mov	r0, r3
   273a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   273aa:	fb09 7004 	mla	r0, r9, r4, r7
   273ae:	f7ff ffb9 	bl	27324 <bt_conn_ref>
   273b2:	4603      	mov	r3, r0
		if (!conn) {
   273b4:	b158      	cbz	r0, 273ce <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   273b6:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   273b8:	2d01      	cmp	r5, #1
   273ba:	d002      	beq.n	273c2 <conn_lookup_handle+0x34>
   273bc:	3d07      	subs	r5, #7
   273be:	2d01      	cmp	r5, #1
   273c0:	d803      	bhi.n	273ca <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   273c2:	881a      	ldrh	r2, [r3, #0]
   273c4:	4542      	cmp	r2, r8
   273c6:	d0ed      	beq.n	273a4 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   273c8:	4618      	mov	r0, r3
   273ca:	f7ff ffc6 	bl	2735a <bt_conn_unref>
	for (i = 0; i < size; i++) {
   273ce:	3401      	adds	r4, #1
   273d0:	e7e5      	b.n	2739e <conn_lookup_handle+0x10>

000273d2 <bt_conn_connected>:
{
   273d2:	b510      	push	{r4, lr}
   273d4:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   273d6:	f7f0 fdd7 	bl	17f88 <bt_l2cap_connected>
	notify_connected(conn);
   273da:	4620      	mov	r0, r4
}
   273dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   273e0:	f7f0 b8aa 	b.w	17538 <notify_connected>

000273e4 <bt_conn_disconnect>:
{
   273e4:	b538      	push	{r3, r4, r5, lr}
	switch (conn->state) {
   273e6:	7b43      	ldrb	r3, [r0, #13]
   273e8:	3b02      	subs	r3, #2
{
   273ea:	4604      	mov	r4, r0
	switch (conn->state) {
   273ec:	2b06      	cmp	r3, #6
   273ee:	d805      	bhi.n	273fc <bt_conn_disconnect+0x18>
   273f0:	e8df f003 	tbb	[pc, r3]
   273f4:	04040408 	.word	0x04040408
   273f8:	0e0c      	.short	0x0e0c
   273fa:	0c          	.byte	0x0c
   273fb:	00          	.byte	0x00
   273fc:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   27400:	4628      	mov	r0, r5
   27402:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   27404:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   27406:	2100      	movs	r1, #0
   27408:	f7f0 fa4e 	bl	178a8 <bt_conn_set_state>
		return 0;
   2740c:	2500      	movs	r5, #0
   2740e:	e7f7      	b.n	27400 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   27410:	8800      	ldrh	r0, [r0, #0]
   27412:	f7ff fdd2 	bl	26fba <bt_hci_disconnect>
	if (err) {
   27416:	4605      	mov	r5, r0
   27418:	2800      	cmp	r0, #0
   2741a:	d1f1      	bne.n	27400 <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   2741c:	7b63      	ldrb	r3, [r4, #13]
   2741e:	2b07      	cmp	r3, #7
   27420:	d1ee      	bne.n	27400 <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   27422:	2108      	movs	r1, #8
   27424:	4620      	mov	r0, r4
   27426:	f7f0 fa3f 	bl	178a8 <bt_conn_set_state>
   2742a:	e7e9      	b.n	27400 <bt_conn_disconnect+0x1c>

0002742c <bt_conn_set_security>:
{
   2742c:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2742e:	7b43      	ldrb	r3, [r0, #13]
   27430:	2b07      	cmp	r3, #7
{
   27432:	4604      	mov	r4, r0
   27434:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   27436:	d124      	bne.n	27482 <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   27438:	7a43      	ldrb	r3, [r0, #9]
   2743a:	428b      	cmp	r3, r1
   2743c:	d224      	bcs.n	27488 <bt_conn_set_security+0x5c>
   2743e:	7a83      	ldrb	r3, [r0, #10]
   27440:	428b      	cmp	r3, r1
   27442:	d221      	bcs.n	27488 <bt_conn_set_security+0x5c>
	if (val) {
   27444:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   27446:	f100 0004 	add.w	r0, r0, #4
   2744a:	d515      	bpl.n	27478 <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2744c:	f3bf 8f5b 	dmb	ish
   27450:	e850 3f00 	ldrex	r3, [r0]
   27454:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   27458:	e840 3200 	strex	r2, r3, [r0]
   2745c:	2a00      	cmp	r2, #0
   2745e:	d1f7      	bne.n	27450 <bt_conn_set_security+0x24>
   27460:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   27464:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   27468:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   2746a:	4620      	mov	r0, r4
   2746c:	f7f4 fcc2 	bl	1bdf4 <bt_smp_start_security>
	if (err) {
   27470:	b108      	cbz	r0, 27476 <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   27472:	7a63      	ldrb	r3, [r4, #9]
   27474:	72a3      	strb	r3, [r4, #10]
}
   27476:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27478:	f46f 6180 	mvn.w	r1, #1024	; 0x400
   2747c:	f7ff ff34 	bl	272e8 <atomic_and>
   27480:	e7f0      	b.n	27464 <bt_conn_set_security+0x38>
		return -ENOTCONN;
   27482:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   27486:	e7f6      	b.n	27476 <bt_conn_set_security+0x4a>
		return 0;
   27488:	2000      	movs	r0, #0
   2748a:	e7f4      	b.n	27476 <bt_conn_set_security+0x4a>

0002748c <bt_conn_get_security>:
}
   2748c:	7a40      	ldrb	r0, [r0, #9]
   2748e:	4770      	bx	lr

00027490 <bt_conn_is_peer_addr_le>:
{
   27490:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   27492:	7a03      	ldrb	r3, [r0, #8]
   27494:	428b      	cmp	r3, r1
{
   27496:	4604      	mov	r4, r0
   27498:	4615      	mov	r5, r2
	if (id != conn->id) {
   2749a:	d115      	bne.n	274c8 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2749c:	f100 0188 	add.w	r1, r0, #136	; 0x88
   274a0:	2207      	movs	r2, #7
   274a2:	4628      	mov	r0, r5
   274a4:	f7ff fc0f 	bl	26cc6 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   274a8:	b180      	cbz	r0, 274cc <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   274aa:	78e3      	ldrb	r3, [r4, #3]
   274ac:	2207      	movs	r2, #7
   274ae:	b943      	cbnz	r3, 274c2 <bt_conn_is_peer_addr_le+0x32>
   274b0:	f104 0196 	add.w	r1, r4, #150	; 0x96
   274b4:	4628      	mov	r0, r5
   274b6:	f7ff fc06 	bl	26cc6 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   274ba:	fab0 f080 	clz	r0, r0
   274be:	0940      	lsrs	r0, r0, #5
}
   274c0:	bd38      	pop	{r3, r4, r5, pc}
   274c2:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   274c6:	e7f5      	b.n	274b4 <bt_conn_is_peer_addr_le+0x24>
		return false;
   274c8:	2000      	movs	r0, #0
   274ca:	e7f9      	b.n	274c0 <bt_conn_is_peer_addr_le+0x30>
		return true;
   274cc:	2001      	movs	r0, #1
   274ce:	e7f7      	b.n	274c0 <bt_conn_is_peer_addr_le+0x30>

000274d0 <bt_conn_le_conn_update>:
{
   274d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   274d2:	4607      	mov	r7, r0
   274d4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   274d6:	f242 0013 	movw	r0, #8211	; 0x2013
   274da:	210e      	movs	r1, #14
   274dc:	f7ee fb08 	bl	15af0 <bt_hci_cmd_create>
	if (!buf) {
   274e0:	4606      	mov	r6, r0
   274e2:	b1d0      	cbz	r0, 2751a <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   274e4:	210e      	movs	r1, #14
   274e6:	3008      	adds	r0, #8
   274e8:	f001 fdf4 	bl	290d4 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   274ec:	220e      	movs	r2, #14
   274ee:	4604      	mov	r4, r0
   274f0:	2100      	movs	r1, #0
   274f2:	f7ff fc1c 	bl	26d2e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   274f6:	883b      	ldrh	r3, [r7, #0]
   274f8:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   274fa:	882b      	ldrh	r3, [r5, #0]
   274fc:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   274fe:	886b      	ldrh	r3, [r5, #2]
   27500:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   27502:	88ab      	ldrh	r3, [r5, #4]
   27504:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   27506:	88eb      	ldrh	r3, [r5, #6]
   27508:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2750a:	4631      	mov	r1, r6
   2750c:	2200      	movs	r2, #0
}
   2750e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   27512:	f242 0013 	movw	r0, #8211	; 0x2013
   27516:	f7ee bb25 	b.w	15b64 <bt_hci_cmd_send_sync>
}
   2751a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2751e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027520 <l2cap_connected>:
}
   27520:	4770      	bx	lr

00027522 <z_log_msg_static_create.constprop.0>:
   27522:	2300      	movs	r3, #0
   27524:	f7eb be98 	b.w	13258 <z_impl_z_log_msg_static_create>

00027528 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   27528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2752a:	4605      	mov	r5, r0
   2752c:	460f      	mov	r7, r1
   2752e:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   27530:	2300      	movs	r3, #0
   27532:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   27536:	2104      	movs	r1, #4
   27538:	2000      	movs	r0, #0
   2753a:	f7f0 faaf 	bl	17a9c <bt_conn_create_pdu_timeout>
	if (!buf) {
   2753e:	4604      	mov	r4, r0
   27540:	b920      	cbnz	r0, 2754c <l2cap_create_le_sig_pdu.constprop.0+0x24>
   27542:	4628      	mov	r0, r5
}
   27544:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   27548:	f7f0 bce2 	b.w	17f10 <l2cap_create_le_sig_pdu.part.0>
   2754c:	2104      	movs	r1, #4
   2754e:	3008      	adds	r0, #8
   27550:	f001 fdc0 	bl	290d4 <net_buf_simple_add>
	hdr->code = code;
   27554:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   27556:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   27558:	8046      	strh	r6, [r0, #2]
}
   2755a:	4620      	mov	r0, r4
   2755c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002755e <l2cap_disconnected>:
   2755e:	4770      	bx	lr

00027560 <bt_l2cap_chan_del>:
{
   27560:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   27562:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   27566:	4604      	mov	r4, r0
	if (!chan->conn) {
   27568:	b123      	cbz	r3, 27574 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2756a:	686b      	ldr	r3, [r5, #4]
   2756c:	b103      	cbz	r3, 27570 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2756e:	4798      	blx	r3
	chan->conn = NULL;
   27570:	2300      	movs	r3, #0
   27572:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   27574:	68e3      	ldr	r3, [r4, #12]
   27576:	b10b      	cbz	r3, 2757c <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   27578:	4620      	mov	r0, r4
   2757a:	4798      	blx	r3
	if (ops->released) {
   2757c:	69eb      	ldr	r3, [r5, #28]
   2757e:	b11b      	cbz	r3, 27588 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   27580:	4620      	mov	r0, r4
}
   27582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   27586:	4718      	bx	r3
}
   27588:	bd70      	pop	{r4, r5, r6, pc}

0002758a <bt_l2cap_disconnected>:
	return list->head;
   2758a:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   2758c:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2758e:	b160      	cbz	r0, 275aa <bt_l2cap_disconnected+0x20>
	return node->next;
   27590:	f850 4908 	ldr.w	r4, [r0], #-8
   27594:	b104      	cbz	r4, 27598 <bt_l2cap_disconnected+0xe>
   27596:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   27598:	f7ff ffe2 	bl	27560 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2759c:	b12c      	cbz	r4, 275aa <bt_l2cap_disconnected+0x20>
   2759e:	68a3      	ldr	r3, [r4, #8]
   275a0:	b103      	cbz	r3, 275a4 <bt_l2cap_disconnected+0x1a>
   275a2:	3b08      	subs	r3, #8
{
   275a4:	4620      	mov	r0, r4
   275a6:	461c      	mov	r4, r3
   275a8:	e7f6      	b.n	27598 <bt_l2cap_disconnected+0xe>
}
   275aa:	bd10      	pop	{r4, pc}

000275ac <bt_l2cap_security_changed>:
	return list->head;
   275ac:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   275ae:	b538      	push	{r3, r4, r5, lr}
   275b0:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   275b2:	b178      	cbz	r0, 275d4 <bt_l2cap_security_changed+0x28>
	return node->next;
   275b4:	f850 4908 	ldr.w	r4, [r0], #-8
   275b8:	b104      	cbz	r4, 275bc <bt_l2cap_security_changed+0x10>
   275ba:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   275bc:	6843      	ldr	r3, [r0, #4]
   275be:	689b      	ldr	r3, [r3, #8]
   275c0:	b10b      	cbz	r3, 275c6 <bt_l2cap_security_changed+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   275c2:	4629      	mov	r1, r5
   275c4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   275c6:	b12c      	cbz	r4, 275d4 <bt_l2cap_security_changed+0x28>
   275c8:	68a3      	ldr	r3, [r4, #8]
   275ca:	b103      	cbz	r3, 275ce <bt_l2cap_security_changed+0x22>
   275cc:	3b08      	subs	r3, #8
{
   275ce:	4620      	mov	r0, r4
   275d0:	461c      	mov	r4, r3
   275d2:	e7f3      	b.n	275bc <bt_l2cap_security_changed+0x10>
}
   275d4:	bd38      	pop	{r3, r4, r5, pc}

000275d6 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   275d6:	3104      	adds	r1, #4
   275d8:	f7f0 ba60 	b.w	17a9c <bt_conn_create_pdu_timeout>

000275dc <bt_l2cap_send_cb>:
{
   275dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   275e0:	4614      	mov	r4, r2
   275e2:	4605      	mov	r5, r0
   275e4:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   275e6:	f102 0008 	add.w	r0, r2, #8
   275ea:	2104      	movs	r1, #4
   275ec:	461e      	mov	r6, r3
   275ee:	f8dd 8018 	ldr.w	r8, [sp, #24]
   275f2:	f001 fd86 	bl	29102 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   275f6:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   275f8:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   275fa:	3a04      	subs	r2, #4
   275fc:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   275fe:	4643      	mov	r3, r8
   27600:	4632      	mov	r2, r6
   27602:	4621      	mov	r1, r4
   27604:	4628      	mov	r0, r5
}
   27606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2760a:	f7f0 b8dd 	b.w	177c8 <bt_conn_send_cb>

0002760e <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2760e:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27610:	b130      	cbz	r0, 27620 <bt_l2cap_le_lookup_tx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   27612:	8b83      	ldrh	r3, [r0, #28]
   27614:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27616:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2761a:	d001      	beq.n	27620 <bt_l2cap_le_lookup_tx_cid+0x12>
	return node->next;
   2761c:	6880      	ldr	r0, [r0, #8]
   2761e:	e7f7      	b.n	27610 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   27620:	4770      	bx	lr

00027622 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   27622:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27624:	b130      	cbz	r0, 27634 <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   27626:	8983      	ldrh	r3, [r0, #12]
   27628:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2762a:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2762e:	d001      	beq.n	27634 <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   27630:	6880      	ldr	r0, [r0, #8]
   27632:	e7f7      	b.n	27624 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   27634:	4770      	bx	lr

00027636 <bt_l2cap_init>:
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
	for (size_t i = 0; i < ARRAY_SIZE(l2cap_tx_meta_data); i++) {
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   27636:	4770      	bx	lr

00027638 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   27638:	4603      	mov	r3, r0
	return list->head;
   2763a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2763c:	b128      	cbz	r0, 2764a <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2763e:	6859      	ldr	r1, [r3, #4]
	return node->next;
   27640:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   27642:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27644:	4288      	cmp	r0, r1
	list->tail = node;
   27646:	bf08      	it	eq
   27648:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2764a:	4770      	bx	lr

0002764c <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2764c:	4603      	mov	r3, r0
	size_t bytes = 0;
   2764e:	2000      	movs	r0, #0

	while (buf) {
   27650:	b903      	cbnz	r3, 27654 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   27652:	4770      	bx	lr
		bytes += buf->len;
   27654:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   27656:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   27658:	4410      	add	r0, r2
		buf = buf->frags;
   2765a:	e7f9      	b.n	27650 <net_buf_frags_len+0x4>

0002765c <attr_read_type_cb>:
{
   2765c:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2765e:	68d4      	ldr	r4, [r2, #12]
   27660:	7823      	ldrb	r3, [r4, #0]
   27662:	3102      	adds	r1, #2
   27664:	b913      	cbnz	r3, 2766c <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   27666:	7021      	strb	r1, [r4, #0]
	return true;
   27668:	2001      	movs	r0, #1
   2766a:	e006      	b.n	2767a <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2766c:	428b      	cmp	r3, r1
   2766e:	d0fb      	beq.n	27668 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   27670:	8983      	ldrh	r3, [r0, #12]
   27672:	3b02      	subs	r3, #2
   27674:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   27676:	2000      	movs	r0, #0
   27678:	6110      	str	r0, [r2, #16]
}
   2767a:	bd10      	pop	{r4, pc}

0002767c <att_op_get_type>:
	switch (op) {
   2767c:	2852      	cmp	r0, #82	; 0x52
   2767e:	d830      	bhi.n	276e2 <att_op_get_type+0x66>
   27680:	b388      	cbz	r0, 276e6 <att_op_get_type+0x6a>
   27682:	1e43      	subs	r3, r0, #1
   27684:	2b51      	cmp	r3, #81	; 0x51
   27686:	d82e      	bhi.n	276e6 <att_op_get_type+0x6a>
   27688:	e8df f003 	tbb	[pc, r3]
   2768c:	39333933 	.word	0x39333933
   27690:	39333933 	.word	0x39333933
   27694:	39333933 	.word	0x39333933
   27698:	39333933 	.word	0x39333933
   2769c:	2d333933 	.word	0x2d333933
   276a0:	3933392d 	.word	0x3933392d
   276a4:	2d352d33 	.word	0x2d352d33
   276a8:	392d2937 	.word	0x392d2937
   276ac:	2d352d33 	.word	0x2d352d33
   276b0:	2d2d2d2d 	.word	0x2d2d2d2d
   276b4:	2d2d2d2d 	.word	0x2d2d2d2d
   276b8:	2d2d2d2d 	.word	0x2d2d2d2d
   276bc:	2d2d2d2d 	.word	0x2d2d2d2d
   276c0:	2d2d2d2d 	.word	0x2d2d2d2d
   276c4:	2d2d2d2d 	.word	0x2d2d2d2d
   276c8:	2d2d2d2d 	.word	0x2d2d2d2d
   276cc:	2d2d2d2d 	.word	0x2d2d2d2d
   276d0:	2d2d2d2d 	.word	0x2d2d2d2d
   276d4:	2d2d2d2d 	.word	0x2d2d2d2d
   276d8:	2d2d2d2d 	.word	0x2d2d2d2d
   276dc:	3b2d      	.short	0x3b2d
   276de:	2004      	movs	r0, #4
   276e0:	4770      	bx	lr
   276e2:	28d2      	cmp	r0, #210	; 0xd2
   276e4:	d00d      	beq.n	27702 <att_op_get_type+0x86>
		return ATT_COMMAND;
   276e6:	f010 0f40 	tst.w	r0, #64	; 0x40
   276ea:	bf0c      	ite	eq
   276ec:	2006      	moveq	r0, #6
   276ee:	2000      	movne	r0, #0
   276f0:	4770      	bx	lr
		return ATT_RESPONSE;
   276f2:	2002      	movs	r0, #2
   276f4:	4770      	bx	lr
		return ATT_NOTIFICATION;
   276f6:	2003      	movs	r0, #3
   276f8:	4770      	bx	lr
		return ATT_INDICATION;
   276fa:	2005      	movs	r0, #5
   276fc:	4770      	bx	lr
		return ATT_REQUEST;
   276fe:	2001      	movs	r0, #1
   27700:	4770      	bx	lr
		return ATT_COMMAND;
   27702:	2000      	movs	r0, #0
}
   27704:	4770      	bx	lr

00027706 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27706:	f3bf 8f5b 	dmb	ish
   2770a:	6800      	ldr	r0, [r0, #0]
   2770c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   27710:	4108      	asrs	r0, r1
}
   27712:	f000 0001 	and.w	r0, r0, #1
   27716:	4770      	bx	lr

00027718 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   27718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2771a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2771e:	2300      	movs	r3, #0
   27720:	9300      	str	r3, [sp, #0]
   27722:	461a      	mov	r2, r3
   27724:	f7f2 fc8e 	bl	1a044 <bt_gatt_foreach_attr_type>
				  user_data);
}
   27728:	b005      	add	sp, #20
   2772a:	f85d fb04 	ldr.w	pc, [sp], #4

0002772e <find_info_cb>:
{
   2772e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   27730:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   27732:	6817      	ldr	r7, [r2, #0]
{
   27734:	4605      	mov	r5, r0
   27736:	460e      	mov	r6, r1
   27738:	4614      	mov	r4, r2
	if (!data->rsp) {
   2773a:	b963      	cbnz	r3, 27756 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2773c:	6850      	ldr	r0, [r2, #4]
   2773e:	2101      	movs	r1, #1
   27740:	3008      	adds	r0, #8
   27742:	f001 fcc7 	bl	290d4 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   27746:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   27748:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2774a:	781b      	ldrb	r3, [r3, #0]
   2774c:	2b00      	cmp	r3, #0
   2774e:	bf0c      	ite	eq
   27750:	2301      	moveq	r3, #1
   27752:	2302      	movne	r3, #2
   27754:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   27756:	68a3      	ldr	r3, [r4, #8]
   27758:	781b      	ldrb	r3, [r3, #0]
   2775a:	2b01      	cmp	r3, #1
   2775c:	d003      	beq.n	27766 <find_info_cb+0x38>
   2775e:	2b02      	cmp	r3, #2
   27760:	d018      	beq.n	27794 <find_info_cb+0x66>
			return BT_GATT_ITER_STOP;
   27762:	2000      	movs	r0, #0
   27764:	e015      	b.n	27792 <find_info_cb+0x64>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   27766:	682b      	ldr	r3, [r5, #0]
   27768:	781b      	ldrb	r3, [r3, #0]
   2776a:	2b00      	cmp	r3, #0
   2776c:	d1f9      	bne.n	27762 <find_info_cb+0x34>
   2776e:	6860      	ldr	r0, [r4, #4]
   27770:	2104      	movs	r1, #4
   27772:	3008      	adds	r0, #8
   27774:	f001 fcae 	bl	290d4 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   27778:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2777a:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2777c:	885b      	ldrh	r3, [r3, #2]
   2777e:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   27780:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   27782:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   27784:	899b      	ldrh	r3, [r3, #12]
   27786:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   27788:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2778a:	2804      	cmp	r0, #4
   2778c:	bf94      	ite	ls
   2778e:	2000      	movls	r0, #0
   27790:	2001      	movhi	r0, #1
}
   27792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   27794:	682b      	ldr	r3, [r5, #0]
   27796:	781b      	ldrb	r3, [r3, #0]
   27798:	2b02      	cmp	r3, #2
   2779a:	d1e2      	bne.n	27762 <find_info_cb+0x34>
   2779c:	6860      	ldr	r0, [r4, #4]
   2779e:	2112      	movs	r1, #18
   277a0:	3008      	adds	r0, #8
   277a2:	f001 fc97 	bl	290d4 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   277a6:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   277a8:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   277aa:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   277ac:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   277b0:	3101      	adds	r1, #1
   277b2:	f7ff fab1 	bl	26d18 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   277b6:	6863      	ldr	r3, [r4, #4]
   277b8:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   277ba:	899b      	ldrh	r3, [r3, #12]
   277bc:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   277be:	2812      	cmp	r0, #18
   277c0:	e7e4      	b.n	2778c <find_info_cb+0x5e>

000277c2 <att_chan_mtu_updated>:
{
   277c2:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   277c4:	6806      	ldr	r6, [r0, #0]
	return list->head;
   277c6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   277c8:	b1c3      	cbz	r3, 277fc <att_chan_mtu_updated+0x3a>
   277ca:	461a      	mov	r2, r3
	return node->next;
   277cc:	f852 49e0 	ldr.w	r4, [r2], #-224
   277d0:	b104      	cbz	r4, 277d4 <att_chan_mtu_updated+0x12>
   277d2:	3ce0      	subs	r4, #224	; 0xe0
{
   277d4:	2300      	movs	r3, #0
   277d6:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   277d8:	4290      	cmp	r0, r2
   277da:	d007      	beq.n	277ec <att_chan_mtu_updated+0x2a>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   277dc:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   277de:	8b52      	ldrh	r2, [r2, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   277e0:	42a9      	cmp	r1, r5
   277e2:	bf38      	it	cc
   277e4:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   277e6:	4293      	cmp	r3, r2
   277e8:	bf38      	it	cc
   277ea:	4613      	movcc	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   277ec:	b13c      	cbz	r4, 277fe <att_chan_mtu_updated+0x3c>
   277ee:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
   277f2:	b105      	cbz	r5, 277f6 <att_chan_mtu_updated+0x34>
   277f4:	3de0      	subs	r5, #224	; 0xe0
{
   277f6:	4622      	mov	r2, r4
   277f8:	462c      	mov	r4, r5
   277fa:	e7ed      	b.n	277d8 <att_chan_mtu_updated+0x16>
   277fc:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   277fe:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   27800:	8b42      	ldrh	r2, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   27802:	428c      	cmp	r4, r1
   27804:	d801      	bhi.n	2780a <att_chan_mtu_updated+0x48>
   27806:	429a      	cmp	r2, r3
   27808:	d909      	bls.n	2781e <att_chan_mtu_updated+0x5c>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2780a:	429a      	cmp	r2, r3
   2780c:	bf38      	it	cc
   2780e:	461a      	movcc	r2, r3
   27810:	42a1      	cmp	r1, r4
   27812:	6830      	ldr	r0, [r6, #0]
   27814:	bf38      	it	cc
   27816:	4621      	movcc	r1, r4
}
   27818:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2781a:	f7f3 b911 	b.w	1aa40 <bt_gatt_att_max_mtu_changed>
}
   2781e:	bc70      	pop	{r4, r5, r6}
   27820:	4770      	bx	lr

00027822 <attr_read_group_cb>:
	if (!data->rsp->len) {
   27822:	68d0      	ldr	r0, [r2, #12]
   27824:	7803      	ldrb	r3, [r0, #0]
   27826:	3104      	adds	r1, #4
   27828:	b913      	cbnz	r3, 27830 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2782a:	7001      	strb	r1, [r0, #0]
	return true;
   2782c:	2001      	movs	r0, #1
}
   2782e:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   27830:	428b      	cmp	r3, r1
   27832:	d0fb      	beq.n	2782c <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   27834:	6891      	ldr	r1, [r2, #8]
   27836:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   27838:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2783a:	3b04      	subs	r3, #4
   2783c:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2783e:	6110      	str	r0, [r2, #16]
		return false;
   27840:	4770      	bx	lr

00027842 <write_cb>:
{
   27842:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27844:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   27846:	4601      	mov	r1, r0
{
   27848:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2784a:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2784e:	6820      	ldr	r0, [r4, #0]
   27850:	f000 fe7a 	bl	28548 <bt_gatt_check_perm>
   27854:	4605      	mov	r5, r0
   27856:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   27858:	bb20      	cbnz	r0, 278a4 <write_cb+0x62>
	if (!data->req) {
   2785a:	7a23      	ldrb	r3, [r4, #8]
   2785c:	b1ab      	cbz	r3, 2788a <write_cb+0x48>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   2785e:	2b18      	cmp	r3, #24
   27860:	bf14      	ite	ne
   27862:	2300      	movne	r3, #0
   27864:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   27866:	9301      	str	r3, [sp, #4]
   27868:	8a63      	ldrh	r3, [r4, #18]
   2786a:	9300      	str	r3, [sp, #0]
   2786c:	68b7      	ldr	r7, [r6, #8]
   2786e:	8a23      	ldrh	r3, [r4, #16]
   27870:	68e2      	ldr	r2, [r4, #12]
   27872:	6820      	ldr	r0, [r4, #0]
   27874:	4631      	mov	r1, r6
   27876:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   27878:	1e03      	subs	r3, r0, #0
   2787a:	db08      	blt.n	2788e <write_cb+0x4c>
   2787c:	8a22      	ldrh	r2, [r4, #16]
   2787e:	4293      	cmp	r3, r2
   27880:	d10e      	bne.n	278a0 <write_cb+0x5e>
	data->err = 0U;
   27882:	2300      	movs	r3, #0
   27884:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   27886:	2501      	movs	r5, #1
   27888:	e007      	b.n	2789a <write_cb+0x58>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2788a:	2302      	movs	r3, #2
   2788c:	e7eb      	b.n	27866 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   2788e:	f113 0fff 	cmn.w	r3, #255	; 0xff
   27892:	d305      	bcc.n	278a0 <write_cb+0x5e>
		return -err;
   27894:	425b      	negs	r3, r3
   27896:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   27898:	7523      	strb	r3, [r4, #20]
}
   2789a:	4628      	mov	r0, r5
   2789c:	b003      	add	sp, #12
   2789e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   278a0:	230e      	movs	r3, #14
   278a2:	e7f9      	b.n	27898 <write_cb+0x56>
		return BT_GATT_ITER_STOP;
   278a4:	2500      	movs	r5, #0
   278a6:	e7f8      	b.n	2789a <write_cb+0x58>

000278a8 <z_log_msg_static_create.constprop.0>:
   278a8:	2300      	movs	r3, #0
   278aa:	f7eb bcd5 	b.w	13258 <z_impl_z_log_msg_static_create>

000278ae <chan_req_send>:
{
   278ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   278b0:	688e      	ldr	r6, [r1, #8]
{
   278b2:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   278b4:	4630      	mov	r0, r6
   278b6:	f7ff fec9 	bl	2764c <net_buf_frags_len>
   278ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   278bc:	4283      	cmp	r3, r0
{
   278be:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   278c0:	d30c      	bcc.n	278dc <chan_req_send+0x2e>
	req->buf = NULL;
   278c2:	2700      	movs	r7, #0
	chan->req = req;
   278c4:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
	return chan_send(chan, buf);
   278c8:	4620      	mov	r0, r4
	req->buf = NULL;
   278ca:	608f      	str	r7, [r1, #8]
	return chan_send(chan, buf);
   278cc:	4631      	mov	r1, r6
   278ce:	f7f0 fdbd 	bl	1844c <chan_send>
	if (err) {
   278d2:	b110      	cbz	r0, 278da <chan_req_send+0x2c>
		req->buf = buf;
   278d4:	60ae      	str	r6, [r5, #8]
		chan->req = NULL;
   278d6:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
}
   278da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   278dc:	f06f 0079 	mvn.w	r0, #121	; 0x79
   278e0:	e7fb      	b.n	278da <chan_req_send+0x2c>

000278e2 <process_queue>:
{
   278e2:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   278e4:	2200      	movs	r2, #0
{
   278e6:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   278e8:	2300      	movs	r3, #0
   278ea:	4608      	mov	r0, r1
{
   278ec:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   278ee:	f001 fb51 	bl	28f94 <net_buf_get>
	if (buf) {
   278f2:	4605      	mov	r5, r0
   278f4:	b158      	cbz	r0, 2790e <process_queue+0x2c>
	return chan_send(chan, buf);
   278f6:	4601      	mov	r1, r0
   278f8:	4620      	mov	r0, r4
   278fa:	f7f0 fda7 	bl	1844c <chan_send>
		if (err) {
   278fe:	4604      	mov	r4, r0
   27900:	b118      	cbz	r0, 2790a <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   27902:	4629      	mov	r1, r5
   27904:	4630      	mov	r0, r6
   27906:	f002 faee 	bl	29ee6 <k_queue_prepend>
}
   2790a:	4620      	mov	r0, r4
   2790c:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2790e:	f06f 0401 	mvn.w	r4, #1
   27912:	e7fa      	b.n	2790a <process_queue+0x28>

00027914 <bt_att_chan_send_rsp>:
{
   27914:	b538      	push	{r3, r4, r5, lr}
   27916:	4604      	mov	r4, r0
   27918:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2791a:	f7f0 fd97 	bl	1844c <chan_send>
	if (err) {
   2791e:	b130      	cbz	r0, 2792e <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   27920:	4629      	mov	r1, r5
   27922:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   27926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2792a:	f001 bba0 	b.w	2906e <net_buf_put>
}
   2792e:	bd38      	pop	{r3, r4, r5, pc}

00027930 <sys_slist_find_and_remove.isra.0>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27930:	b510      	push	{r4, lr}
	return list->head;
   27932:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27934:	2200      	movs	r2, #0
   27936:	b153      	cbz	r3, 2794e <sys_slist_find_and_remove.isra.0+0x1e>
   27938:	428b      	cmp	r3, r1
   2793a:	d10e      	bne.n	2795a <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   2793c:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   2793e:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   27940:	b932      	cbnz	r2, 27950 <sys_slist_find_and_remove.isra.0+0x20>
   27942:	42a1      	cmp	r1, r4
	list->head = node;
   27944:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   27946:	d100      	bne.n	2794a <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   27948:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2794a:	2300      	movs	r3, #0
   2794c:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2794e:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   27950:	42a1      	cmp	r1, r4
	parent->next = child;
   27952:	6013      	str	r3, [r2, #0]
	list->tail = node;
   27954:	bf08      	it	eq
   27956:	6042      	streq	r2, [r0, #4]
}
   27958:	e7f7      	b.n	2794a <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2795a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2795c:	681b      	ldr	r3, [r3, #0]
   2795e:	e7ea      	b.n	27936 <sys_slist_find_and_remove.isra.0+0x6>

00027960 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   27960:	2301      	movs	r3, #1
   27962:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27966:	f3bf 8f5b 	dmb	ish
   2796a:	e850 3f00 	ldrex	r3, [r0]
   2796e:	ea43 0201 	orr.w	r2, r3, r1
   27972:	e840 2c00 	strex	ip, r2, [r0]
   27976:	f1bc 0f00 	cmp.w	ip, #0
   2797a:	d1f6      	bne.n	2796a <atomic_test_and_set_bit+0xa>
   2797c:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   27980:	4219      	tst	r1, r3
}
   27982:	bf14      	ite	ne
   27984:	2001      	movne	r0, #1
   27986:	2000      	moveq	r0, #0
   27988:	4770      	bx	lr

0002798a <att_chan_read>:
{
   2798a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2798e:	4680      	mov	r8, r0
   27990:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   27992:	4610      	mov	r0, r2
{
   27994:	4699      	mov	r9, r3
   27996:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   27998:	f7ff fe58 	bl	2764c <net_buf_frags_len>
   2799c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   279a0:	4283      	cmp	r3, r0
{
   279a2:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   279a4:	d97a      	bls.n	27a9c <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   279a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   279aa:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   279ac:	4630      	mov	r0, r6
   279ae:	f001 fb6f 	bl	29090 <net_buf_frag_last>
	size_t len, total = 0;
   279b2:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   279b6:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   279b8:	4630      	mov	r0, r6
   279ba:	f7ff fe47 	bl	2764c <net_buf_frags_len>
   279be:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   279c2:	f105 0708 	add.w	r7, r5, #8
   279c6:	1a24      	subs	r4, r4, r0
   279c8:	4638      	mov	r0, r7
   279ca:	f001 fbc6 	bl	2915a <net_buf_simple_tailroom>
   279ce:	4284      	cmp	r4, r0
   279d0:	d211      	bcs.n	279f6 <att_chan_read+0x6c>
   279d2:	4630      	mov	r0, r6
   279d4:	f7ff fe3a 	bl	2764c <net_buf_frags_len>
   279d8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   279dc:	1a24      	subs	r4, r4, r0
		if (!len) {
   279de:	bb34      	cbnz	r4, 27a2e <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   279e0:	79b0      	ldrb	r0, [r6, #6]
   279e2:	f7f5 fa5d 	bl	1cea0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   279e6:	2200      	movs	r2, #0
   279e8:	2300      	movs	r3, #0
   279ea:	f001 face 	bl	28f8a <net_buf_alloc_fixed>
			if (!frag) {
   279ee:	4605      	mov	r5, r0
   279f0:	b930      	cbnz	r0, 27a00 <att_chan_read+0x76>
	return total;
   279f2:	4657      	mov	r7, sl
   279f4:	e02c      	b.n	27a50 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   279f6:	4638      	mov	r0, r7
   279f8:	f001 fbaf 	bl	2915a <net_buf_simple_tailroom>
   279fc:	4604      	mov	r4, r0
   279fe:	e7ee      	b.n	279de <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   27a00:	4601      	mov	r1, r0
   27a02:	4630      	mov	r0, r6
   27a04:	f001 fb55 	bl	290b2 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   27a08:	4630      	mov	r0, r6
   27a0a:	f7ff fe1f 	bl	2764c <net_buf_frags_len>
   27a0e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   27a12:	f105 0708 	add.w	r7, r5, #8
   27a16:	1a24      	subs	r4, r4, r0
   27a18:	4638      	mov	r0, r7
   27a1a:	f001 fb9e 	bl	2915a <net_buf_simple_tailroom>
   27a1e:	4284      	cmp	r4, r0
   27a20:	d21a      	bcs.n	27a58 <att_chan_read+0xce>
   27a22:	4630      	mov	r0, r6
   27a24:	f7ff fe12 	bl	2764c <net_buf_frags_len>
   27a28:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   27a2c:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   27a2e:	68a9      	ldr	r1, [r5, #8]
   27a30:	89aa      	ldrh	r2, [r5, #12]
   27a32:	f8db 7004 	ldr.w	r7, [fp, #4]
   27a36:	9803      	ldr	r0, [sp, #12]
   27a38:	f8cd 9000 	str.w	r9, [sp]
   27a3c:	440a      	add	r2, r1
   27a3e:	b2a3      	uxth	r3, r4
   27a40:	4659      	mov	r1, fp
   27a42:	47b8      	blx	r7
		if (read < 0) {
   27a44:	1e07      	subs	r7, r0, #0
   27a46:	da0c      	bge.n	27a62 <att_chan_read+0xd8>
				return total;
   27a48:	f1ba 0f00 	cmp.w	sl, #0
   27a4c:	bf18      	it	ne
   27a4e:	4657      	movne	r7, sl
}
   27a50:	4638      	mov	r0, r7
   27a52:	b005      	add	sp, #20
   27a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27a58:	4638      	mov	r0, r7
   27a5a:	f001 fb7e 	bl	2915a <net_buf_simple_tailroom>
   27a5e:	4604      	mov	r4, r0
   27a60:	e7e5      	b.n	27a2e <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   27a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27a64:	b993      	cbnz	r3, 27a8c <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   27a66:	4639      	mov	r1, r7
   27a68:	f105 0008 	add.w	r0, r5, #8
   27a6c:	f001 fb32 	bl	290d4 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27a70:	4630      	mov	r0, r6
   27a72:	f7ff fdeb 	bl	2764c <net_buf_frags_len>
   27a76:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   27a7a:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27a7c:	4283      	cmp	r3, r0
		total += read;
   27a7e:	44ba      	add	sl, r7
		offset += read;
   27a80:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27a84:	d9b5      	bls.n	279f2 <att_chan_read+0x68>
   27a86:	42a7      	cmp	r7, r4
   27a88:	d096      	beq.n	279b8 <att_chan_read+0x2e>
   27a8a:	e7b2      	b.n	279f2 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   27a8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   27a8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27a90:	4639      	mov	r1, r7
   27a92:	4628      	mov	r0, r5
   27a94:	4798      	blx	r3
   27a96:	2800      	cmp	r0, #0
   27a98:	d1e5      	bne.n	27a66 <att_chan_read+0xdc>
   27a9a:	e7aa      	b.n	279f2 <att_chan_read+0x68>
		return 0;
   27a9c:	2700      	movs	r7, #0
   27a9e:	e7d7      	b.n	27a50 <att_chan_read+0xc6>

00027aa0 <read_cb>:
{
   27aa0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   27aa4:	f8d2 8000 	ldr.w	r8, [r2]
{
   27aa8:	4606      	mov	r6, r0
	data->err = 0x00;
   27aaa:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   27aac:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   27ab0:	7317      	strb	r7, [r2, #12]
{
   27ab2:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   27ab4:	4631      	mov	r1, r6
   27ab6:	2295      	movs	r2, #149	; 0x95
   27ab8:	f000 fd46 	bl	28548 <bt_gatt_check_perm>
   27abc:	4604      	mov	r4, r0
   27abe:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   27ac0:	b9a0      	cbnz	r0, 27aec <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   27ac2:	e9cd 0000 	strd	r0, r0, [sp]
   27ac6:	88ab      	ldrh	r3, [r5, #4]
   27ac8:	68aa      	ldr	r2, [r5, #8]
   27aca:	4631      	mov	r1, r6
   27acc:	4640      	mov	r0, r8
   27ace:	f7ff ff5c 	bl	2798a <att_chan_read>
	if (ret < 0) {
   27ad2:	1e03      	subs	r3, r0, #0
   27ad4:	da0c      	bge.n	27af0 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   27ad6:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   27ada:	bf26      	itte	cs
   27adc:	425b      	negcs	r3, r3
   27ade:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   27ae0:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   27ae2:	732b      	strb	r3, [r5, #12]
}
   27ae4:	4620      	mov	r0, r4
   27ae6:	b002      	add	sp, #8
   27ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   27aec:	463c      	mov	r4, r7
   27aee:	e7f9      	b.n	27ae4 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   27af0:	2401      	movs	r4, #1
   27af2:	e7f7      	b.n	27ae4 <read_cb+0x44>

00027af4 <read_vl_cb>:
{
   27af4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   27af8:	f8d2 8000 	ldr.w	r8, [r2]
{
   27afc:	4606      	mov	r6, r0
	data->err = 0x00;
   27afe:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   27b00:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   27b04:	7317      	strb	r7, [r2, #12]
{
   27b06:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   27b08:	4631      	mov	r1, r6
   27b0a:	2295      	movs	r2, #149	; 0x95
   27b0c:	f000 fd1c 	bl	28548 <bt_gatt_check_perm>
   27b10:	4604      	mov	r4, r0
   27b12:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   27b14:	bb18      	cbnz	r0, 27b5e <read_vl_cb+0x6a>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   27b16:	68a8      	ldr	r0, [r5, #8]
   27b18:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   27b1c:	8982      	ldrh	r2, [r0, #12]
   27b1e:	1a9b      	subs	r3, r3, r2
   27b20:	2b01      	cmp	r3, #1
   27b22:	dd15      	ble.n	27b50 <read_vl_cb+0x5c>
   27b24:	2102      	movs	r1, #2
   27b26:	3008      	adds	r0, #8
   27b28:	f001 fad4 	bl	290d4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   27b2c:	88ab      	ldrh	r3, [r5, #4]
   27b2e:	68aa      	ldr	r2, [r5, #8]
   27b30:	e9cd 4400 	strd	r4, r4, [sp]
   27b34:	4607      	mov	r7, r0
   27b36:	4631      	mov	r1, r6
   27b38:	4640      	mov	r0, r8
   27b3a:	f7ff ff26 	bl	2798a <att_chan_read>
	if (read < 0) {
   27b3e:	1e03      	subs	r3, r0, #0
   27b40:	da0a      	bge.n	27b58 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   27b42:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   27b46:	bf26      	itte	cs
   27b48:	425b      	negcs	r3, r3
   27b4a:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   27b4c:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   27b4e:	732b      	strb	r3, [r5, #12]
}
   27b50:	4620      	mov	r0, r4
   27b52:	b002      	add	sp, #8
   27b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   27b58:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   27b5a:	2401      	movs	r4, #1
   27b5c:	e7f8      	b.n	27b50 <read_vl_cb+0x5c>
		return BT_GATT_ITER_STOP;
   27b5e:	463c      	mov	r4, r7
   27b60:	e7f6      	b.n	27b50 <read_vl_cb+0x5c>

00027b62 <bt_att_sent>:
{
   27b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27b64:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   27b66:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27b68:	f100 038c 	add.w	r3, r0, #140	; 0x8c
	struct bt_att *att = chan->att;
   27b6c:	f850 4c04 	ldr.w	r4, [r0, #-4]
   27b70:	f3bf 8f5b 	dmb	ish
   27b74:	e853 2f00 	ldrex	r2, [r3]
   27b78:	f022 0210 	bic.w	r2, r2, #16
   27b7c:	e843 2100 	strex	r1, r2, [r3]
   27b80:	2900      	cmp	r1, #0
   27b82:	d1f7      	bne.n	27b74 <bt_att_sent+0x12>
   27b84:	f3bf 8f5b 	dmb	ish
	if (!att) {
   27b88:	b30c      	cbz	r4, 27bce <bt_att_sent+0x6c>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   27b8a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   27b8e:	b98b      	cbnz	r3, 27bb4 <bt_att_sent+0x52>
   27b90:	6863      	ldr	r3, [r4, #4]
   27b92:	b17b      	cbz	r3, 27bb4 <bt_att_sent+0x52>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   27b94:	1d20      	adds	r0, r4, #4
   27b96:	f7ff fd4f 	bl	27638 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   27b9a:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   27b9c:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   27b9e:	4638      	mov	r0, r7
   27ba0:	f7ff fe85 	bl	278ae <chan_req_send>
   27ba4:	2800      	cmp	r0, #0
   27ba6:	da12      	bge.n	27bce <bt_att_sent+0x6c>
	parent->next = child;
   27ba8:	6863      	ldr	r3, [r4, #4]
   27baa:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   27bac:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   27bae:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   27bb0:	b903      	cbnz	r3, 27bb4 <bt_att_sent+0x52>
	list->tail = node;
   27bb2:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   27bb4:	f105 0194 	add.w	r1, r5, #148	; 0x94
   27bb8:	4638      	mov	r0, r7
   27bba:	f7ff fe92 	bl	278e2 <process_queue>
	if (!err) {
   27bbe:	b130      	cbz	r0, 27bce <bt_att_sent+0x6c>
	(void)process_queue(chan, &att->tx_queue);
   27bc0:	f104 010c 	add.w	r1, r4, #12
   27bc4:	4638      	mov	r0, r7
}
   27bc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   27bca:	f7ff be8a 	b.w	278e2 <process_queue>
}
   27bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027bd0 <att_req_send_process>:
{
   27bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   27bd4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   27bd6:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27bd8:	2c00      	cmp	r4, #0
   27bda:	d03b      	beq.n	27c54 <att_req_send_process+0x84>
	return node->next;
   27bdc:	f854 59e0 	ldr.w	r5, [r4], #-224
   27be0:	b105      	cbz	r5, 27be4 <att_req_send_process+0x14>
   27be2:	3de0      	subs	r5, #224	; 0xe0
{
   27be4:	2300      	movs	r3, #0
   27be6:	461e      	mov	r6, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   27be8:	f108 0704 	add.w	r7, r8, #4
		if (chan->req) {
   27bec:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   27bf0:	b9e2      	cbnz	r2, 27c2c <att_req_send_process+0x5c>
		if (!req && prev &&
   27bf2:	b16e      	cbz	r6, 27c10 <att_req_send_process+0x40>
	sys_snode_t *node = sys_slist_get(reqs);
   27bf4:	4638      	mov	r0, r7
   27bf6:	f7ff fd1f 	bl	27638 <sys_slist_get>
	if (node) {
   27bfa:	4606      	mov	r6, r0
   27bfc:	b9c0      	cbnz	r0, 27c30 <att_req_send_process+0x60>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27bfe:	b34d      	cbz	r5, 27c54 <att_req_send_process+0x84>
   27c00:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
   27c04:	b102      	cbz	r2, 27c08 <att_req_send_process+0x38>
   27c06:	3ae0      	subs	r2, #224	; 0xe0
{
   27c08:	4623      	mov	r3, r4
   27c0a:	462c      	mov	r4, r5
   27c0c:	4615      	mov	r5, r2
   27c0e:	e7ed      	b.n	27bec <att_req_send_process+0x1c>
		if (!req && prev &&
   27c10:	2b00      	cmp	r3, #0
   27c12:	d0ef      	beq.n	27bf4 <att_req_send_process+0x24>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   27c14:	2103      	movs	r1, #3
   27c16:	f104 0090 	add.w	r0, r4, #144	; 0x90
   27c1a:	f7ff fd74 	bl	27706 <atomic_test_bit>
   27c1e:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   27c20:	f103 0090 	add.w	r0, r3, #144	; 0x90
   27c24:	f7ff fd6f 	bl	27706 <atomic_test_bit>
		if (!req && prev &&
   27c28:	4282      	cmp	r2, r0
   27c2a:	d1e3      	bne.n	27bf4 <att_req_send_process+0x24>
   27c2c:	461c      	mov	r4, r3
   27c2e:	e7e6      	b.n	27bfe <att_req_send_process+0x2e>
	return chan_req_send(chan, req);
   27c30:	4601      	mov	r1, r0
   27c32:	4620      	mov	r0, r4
   27c34:	f7ff fe3b 	bl	278ae <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   27c38:	2800      	cmp	r0, #0
   27c3a:	da0b      	bge.n	27c54 <att_req_send_process+0x84>
	parent->next = child;
   27c3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   27c40:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   27c42:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   27c46:	f8c8 6004 	str.w	r6, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   27c4a:	2b00      	cmp	r3, #0
   27c4c:	d1d7      	bne.n	27bfe <att_req_send_process+0x2e>
	list->tail = node;
   27c4e:	f8c8 6008 	str.w	r6, [r8, #8]
}
   27c52:	e7d4      	b.n	27bfe <att_req_send_process+0x2e>
}
   27c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027c58 <bt_att_status>:
{
   27c58:	b538      	push	{r3, r4, r5, lr}
   27c5a:	4605      	mov	r5, r0
   27c5c:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   27c5e:	2100      	movs	r1, #0
   27c60:	f7ff fd51 	bl	27706 <atomic_test_bit>
   27c64:	b1c0      	cbz	r0, 27c98 <bt_att_status+0x40>
	if (!chan->att) {
   27c66:	f855 0c04 	ldr.w	r0, [r5, #-4]
   27c6a:	b1a8      	cbz	r0, 27c98 <bt_att_status+0x40>
	if (chan->req) {
   27c6c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   27c70:	b993      	cbnz	r3, 27c98 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   27c72:	3004      	adds	r0, #4
   27c74:	f7ff fce0 	bl	27638 <sys_slist_get>
	if (!node) {
   27c78:	4604      	mov	r4, r0
   27c7a:	b168      	cbz	r0, 27c98 <bt_att_status+0x40>
	return chan_req_send(chan, req);
   27c7c:	4601      	mov	r1, r0
   27c7e:	1f28      	subs	r0, r5, #4
   27c80:	f7ff fe15 	bl	278ae <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   27c84:	2800      	cmp	r0, #0
   27c86:	da07      	bge.n	27c98 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   27c88:	f855 3c04 	ldr.w	r3, [r5, #-4]
	parent->next = child;
   27c8c:	685a      	ldr	r2, [r3, #4]
   27c8e:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   27c90:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   27c92:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   27c94:	b902      	cbnz	r2, 27c98 <bt_att_status+0x40>
	list->tail = node;
   27c96:	609c      	str	r4, [r3, #8]
}
   27c98:	bd38      	pop	{r3, r4, r5, pc}

00027c9a <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   27c9a:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   27c9c:	6883      	ldr	r3, [r0, #8]
   27c9e:	695b      	ldr	r3, [r3, #20]
   27ca0:	b10b      	cbz	r3, 27ca6 <att_sent+0xc>
		chan->ops->sent(chan);
   27ca2:	3004      	adds	r0, #4
   27ca4:	4718      	bx	r3
}
   27ca6:	4770      	bx	lr

00027ca8 <att_unknown>:
{
   27ca8:	b510      	push	{r4, lr}
   27caa:	460c      	mov	r4, r1
	if (!err) {
   27cac:	b90a      	cbnz	r2, 27cb2 <att_unknown+0xa>
		att_sent(conn, user_data);
   27cae:	f7ff fff4 	bl	27c9a <att_sent>
	tx_meta_data_free(user_data);
   27cb2:	4620      	mov	r0, r4
}
   27cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   27cb8:	f7f0 baa6 	b.w	18208 <tx_meta_data_free>

00027cbc <att_tx_complete>:
{
   27cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27cc0:	4606      	mov	r6, r0
   27cc2:	460d      	mov	r5, r1
	if (!err) {
   27cc4:	4614      	mov	r4, r2
   27cc6:	b90a      	cbnz	r2, 27ccc <att_tx_complete+0x10>
		att_sent(conn, user_data);
   27cc8:	f7ff ffe7 	bl	27c9a <att_sent>
	tx_meta_data_free(data);
   27ccc:	4628      	mov	r0, r5
	bt_gatt_complete_func_t func = data->func;
   27cce:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   27cd0:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   27cd4:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   27cd8:	f7f0 fa96 	bl	18208 <tx_meta_data_free>
	if (!err && func) {
   27cdc:	b904      	cbnz	r4, 27ce0 <att_tx_complete+0x24>
   27cde:	b92f      	cbnz	r7, 27cec <att_tx_complete+0x30>
}
   27ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   27ce4:	4649      	mov	r1, r9
   27ce6:	4630      	mov	r0, r6
   27ce8:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   27cea:	3401      	adds	r4, #1
   27cec:	b2a3      	uxth	r3, r4
   27cee:	4598      	cmp	r8, r3
   27cf0:	d8f8      	bhi.n	27ce4 <att_tx_complete+0x28>
   27cf2:	e7f5      	b.n	27ce0 <att_tx_complete+0x24>

00027cf4 <att_req_sent>:
{
   27cf4:	b510      	push	{r4, lr}
   27cf6:	460c      	mov	r4, r1
	if (!err) {
   27cf8:	b90a      	cbnz	r2, 27cfe <att_req_sent+0xa>
		att_sent(conn, user_data);
   27cfa:	f7ff ffce 	bl	27c9a <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   27cfe:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   27d00:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   27d04:	b12b      	cbz	r3, 27d12 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   27d06:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   27d0a:	2300      	movs	r3, #0
   27d0c:	30b0      	adds	r0, #176	; 0xb0
   27d0e:	f7f9 fd2f 	bl	21770 <k_work_reschedule>
	tx_meta_data_free(user_data);
   27d12:	4620      	mov	r0, r4
}
   27d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   27d18:	f7f0 ba76 	b.w	18208 <tx_meta_data_free>

00027d1c <att_cfm_sent>:
{
   27d1c:	b510      	push	{r4, lr}
   27d1e:	460c      	mov	r4, r1
	if (!err) {
   27d20:	b90a      	cbnz	r2, 27d26 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   27d22:	f7ff ffba 	bl	27c9a <att_sent>
   27d26:	6823      	ldr	r3, [r4, #0]
   27d28:	f3bf 8f5b 	dmb	ish
   27d2c:	3390      	adds	r3, #144	; 0x90
   27d2e:	e853 2f00 	ldrex	r2, [r3]
   27d32:	f022 0202 	bic.w	r2, r2, #2
   27d36:	e843 2100 	strex	r1, r2, [r3]
   27d3a:	2900      	cmp	r1, #0
   27d3c:	d1f7      	bne.n	27d2e <att_cfm_sent+0x12>
   27d3e:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   27d42:	4620      	mov	r0, r4
}
   27d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   27d48:	f7f0 ba5e 	b.w	18208 <tx_meta_data_free>

00027d4c <att_rsp_sent>:
{
   27d4c:	b510      	push	{r4, lr}
   27d4e:	460c      	mov	r4, r1
	if (!err) {
   27d50:	b90a      	cbnz	r2, 27d56 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   27d52:	f7ff ffa2 	bl	27c9a <att_sent>
   27d56:	6823      	ldr	r3, [r4, #0]
   27d58:	f3bf 8f5b 	dmb	ish
   27d5c:	3390      	adds	r3, #144	; 0x90
   27d5e:	e853 2f00 	ldrex	r2, [r3]
   27d62:	f022 0201 	bic.w	r2, r2, #1
   27d66:	e843 2100 	strex	r1, r2, [r3]
   27d6a:	2900      	cmp	r1, #0
   27d6c:	d1f7      	bne.n	27d5e <att_rsp_sent+0x12>
   27d6e:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   27d72:	4620      	mov	r0, r4
}
   27d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   27d78:	f7f0 ba46 	b.w	18208 <tx_meta_data_free>

00027d7c <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   27d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27d80:	4688      	mov	r8, r1
   27d82:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   27d84:	2101      	movs	r1, #1
   27d86:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   27d88:	4605      	mov	r5, r0
   27d8a:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   27d8c:	f7f0 fd30 	bl	187f0 <bt_att_chan_create_pdu>
	if (!buf) {
   27d90:	4604      	mov	r4, r0
   27d92:	b170      	cbz	r0, 27db2 <send_err_rsp.part.0+0x36>
   27d94:	2104      	movs	r1, #4
   27d96:	3008      	adds	r0, #8
   27d98:	f001 f99c 	bl	290d4 <net_buf_simple_add>
	rsp->request = req;
   27d9c:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   27da0:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   27da2:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf);
   27da6:	4621      	mov	r1, r4
   27da8:	4628      	mov	r0, r5
}
   27daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   27dae:	f7ff bdb1 	b.w	27914 <bt_att_chan_send_rsp>
}
   27db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027db6 <att_write_cmd>:
{
   27db6:	b530      	push	{r4, r5, lr}
   27db8:	460c      	mov	r4, r1
   27dba:	b085      	sub	sp, #20
   27dbc:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   27dbe:	f101 0008 	add.w	r0, r1, #8
   27dc2:	f001 f9be 	bl	29142 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   27dc6:	89a2      	ldrh	r2, [r4, #12]
   27dc8:	9202      	str	r2, [sp, #8]
   27dca:	68a2      	ldr	r2, [r4, #8]
   27dcc:	9201      	str	r2, [sp, #4]
   27dce:	2200      	movs	r2, #0
   27dd0:	4603      	mov	r3, r0
   27dd2:	9200      	str	r2, [sp, #0]
   27dd4:	4611      	mov	r1, r2
   27dd6:	4628      	mov	r0, r5
   27dd8:	f7f0 fe1c 	bl	18a14 <att_write_rsp>
}
   27ddc:	b005      	add	sp, #20
   27dde:	bd30      	pop	{r4, r5, pc}

00027de0 <att_write_req>:
{
   27de0:	b530      	push	{r4, r5, lr}
   27de2:	460c      	mov	r4, r1
   27de4:	b085      	sub	sp, #20
   27de6:	4605      	mov	r5, r0
   27de8:	f101 0008 	add.w	r0, r1, #8
   27dec:	f001 f9a9 	bl	29142 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   27df0:	89a2      	ldrh	r2, [r4, #12]
   27df2:	9202      	str	r2, [sp, #8]
   27df4:	68a2      	ldr	r2, [r4, #8]
   27df6:	9201      	str	r2, [sp, #4]
   27df8:	2200      	movs	r2, #0
   27dfa:	4603      	mov	r3, r0
   27dfc:	9200      	str	r2, [sp, #0]
   27dfe:	2112      	movs	r1, #18
   27e00:	2213      	movs	r2, #19
   27e02:	4628      	mov	r0, r5
   27e04:	f7f0 fe06 	bl	18a14 <att_write_rsp>
}
   27e08:	b005      	add	sp, #20
   27e0a:	bd30      	pop	{r4, r5, pc}

00027e0c <att_read_blob_req>:
{
   27e0c:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   27e0e:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   27e10:	8813      	ldrh	r3, [r2, #0]
   27e12:	8852      	ldrh	r2, [r2, #2]
   27e14:	9200      	str	r2, [sp, #0]
   27e16:	210c      	movs	r1, #12
   27e18:	220d      	movs	r2, #13
   27e1a:	f7f1 f925 	bl	19068 <att_read_rsp>
}
   27e1e:	b003      	add	sp, #12
   27e20:	f85d fb04 	ldr.w	pc, [sp], #4

00027e24 <att_read_req>:
{
   27e24:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   27e26:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   27e28:	2200      	movs	r2, #0
   27e2a:	881b      	ldrh	r3, [r3, #0]
   27e2c:	9200      	str	r2, [sp, #0]
   27e2e:	210a      	movs	r1, #10
   27e30:	220b      	movs	r2, #11
   27e32:	f7f1 f919 	bl	19068 <att_read_rsp>
}
   27e36:	b003      	add	sp, #12
   27e38:	f85d fb04 	ldr.w	pc, [sp], #4

00027e3c <att_mtu_req>:
{
   27e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27e3e:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   27e40:	f850 2b90 	ldr.w	r2, [r0], #144
{
   27e44:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   27e46:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   27e48:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   27e4a:	f7ff fc5c 	bl	27706 <atomic_test_bit>
   27e4e:	4604      	mov	r4, r0
   27e50:	b9f0      	cbnz	r0, 27e90 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   27e52:	689b      	ldr	r3, [r3, #8]
   27e54:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   27e56:	2e16      	cmp	r6, #22
   27e58:	d91c      	bls.n	27e94 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   27e5a:	4638      	mov	r0, r7
   27e5c:	2202      	movs	r2, #2
   27e5e:	f7f0 fe8b 	bl	18b78 <bt_att_create_pdu>
	if (!pdu) {
   27e62:	4607      	mov	r7, r0
   27e64:	b1c0      	cbz	r0, 27e98 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   27e66:	2102      	movs	r1, #2
   27e68:	3008      	adds	r0, #8
   27e6a:	f001 f933 	bl	290d4 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   27e6e:	2341      	movs	r3, #65	; 0x41
   27e70:	7003      	strb	r3, [r0, #0]
   27e72:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   27e74:	4639      	mov	r1, r7
   27e76:	4628      	mov	r0, r5
   27e78:	f7ff fd4c 	bl	27914 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   27e7c:	2e41      	cmp	r6, #65	; 0x41
   27e7e:	bf28      	it	cs
   27e80:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   27e82:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   27e84:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   27e86:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   27e88:	f7ff fc9b 	bl	277c2 <att_chan_mtu_updated>
	return 0;
   27e8c:	4620      	mov	r0, r4
}
   27e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   27e90:	2006      	movs	r0, #6
   27e92:	e7fc      	b.n	27e8e <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   27e94:	2004      	movs	r0, #4
   27e96:	e7fa      	b.n	27e8e <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   27e98:	200e      	movs	r0, #14
   27e9a:	e7f8      	b.n	27e8e <att_mtu_req+0x52>

00027e9c <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   27e9c:	898a      	ldrh	r2, [r1, #12]
   27e9e:	6889      	ldr	r1, [r1, #8]
   27ea0:	2300      	movs	r3, #0
   27ea2:	f7f1 ba97 	b.w	193d4 <att_handle_rsp>

00027ea6 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   27ea6:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   27eaa:	b570      	push	{r4, r5, r6, lr}
   27eac:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   27eae:	1f06      	subs	r6, r0, #4
	if (!att_chan->att) {
   27eb0:	2b00      	cmp	r3, #0
   27eb2:	d039      	beq.n	27f28 <bt_att_encrypt_change+0x82>
	if (hci_status) {
   27eb4:	b171      	cbz	r1, 27ed4 <bt_att_encrypt_change+0x2e>
		if (att_chan->req && att_chan->req->retrying) {
   27eb6:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
   27eba:	2b00      	cmp	r3, #0
   27ebc:	d034      	beq.n	27f28 <bt_att_encrypt_change+0x82>
   27ebe:	7c1b      	ldrb	r3, [r3, #16]
   27ec0:	07da      	lsls	r2, r3, #31
   27ec2:	d531      	bpl.n	27f28 <bt_att_encrypt_change+0x82>
		return BT_ATT_ERR_AUTHENTICATION;
   27ec4:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   27ec6:	2200      	movs	r2, #0
   27ec8:	4630      	mov	r0, r6
   27eca:	4611      	mov	r1, r2
}
   27ecc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   27ed0:	f7f1 ba80 	b.w	193d4 <att_handle_rsp>
	struct bt_conn *conn = le_chan->chan.conn;
   27ed4:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   27ed6:	4628      	mov	r0, r5
   27ed8:	f7f2 fdc6 	bl	1aa68 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   27edc:	7a6b      	ldrb	r3, [r5, #9]
   27ede:	2b01      	cmp	r3, #1
   27ee0:	d022      	beq.n	27f28 <bt_att_encrypt_change+0x82>
	if (!(att_chan->req && att_chan->req->retrying)) {
   27ee2:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
   27ee6:	b1fd      	cbz	r5, 27f28 <bt_att_encrypt_change+0x82>
   27ee8:	7c2b      	ldrb	r3, [r5, #16]
   27eea:	07db      	lsls	r3, r3, #31
   27eec:	d51c      	bpl.n	27f28 <bt_att_encrypt_change+0x82>
	if (!req->encode) {
   27eee:	68eb      	ldr	r3, [r5, #12]
   27ef0:	2b00      	cmp	r3, #0
   27ef2:	d0e7      	beq.n	27ec4 <bt_att_encrypt_change+0x1e>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   27ef4:	696a      	ldr	r2, [r5, #20]
   27ef6:	7c69      	ldrb	r1, [r5, #17]
   27ef8:	4630      	mov	r0, r6
   27efa:	f7f0 fc79 	bl	187f0 <bt_att_chan_create_pdu>
	if (!buf) {
   27efe:	4604      	mov	r4, r0
   27f00:	b150      	cbz	r0, 27f18 <bt_att_encrypt_change+0x72>
	if (req->encode(buf, req->len, req->user_data)) {
   27f02:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   27f06:	68eb      	ldr	r3, [r5, #12]
   27f08:	4798      	blx	r3
   27f0a:	b138      	cbz	r0, 27f1c <bt_att_encrypt_change+0x76>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   27f0c:	6960      	ldr	r0, [r4, #20]
   27f0e:	f7f0 f97b 	bl	18208 <tx_meta_data_free>
		net_buf_unref(buf);
   27f12:	4620      	mov	r0, r4
   27f14:	f7f5 f888 	bl	1d028 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   27f18:	230e      	movs	r3, #14
   27f1a:	e7d4      	b.n	27ec6 <bt_att_encrypt_change+0x20>
	if (chan_send(att_chan, buf)) {
   27f1c:	4621      	mov	r1, r4
   27f1e:	4630      	mov	r0, r6
   27f20:	f7f0 fa94 	bl	1844c <chan_send>
   27f24:	2800      	cmp	r0, #0
   27f26:	d1f1      	bne.n	27f0c <bt_att_encrypt_change+0x66>
}
   27f28:	bd70      	pop	{r4, r5, r6, pc}

00027f2a <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   27f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27f2c:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   27f2e:	f7f0 fa3b 	bl	183a8 <att_get>
	if (!att) {
   27f32:	4604      	mov	r4, r0
   27f34:	b940      	cbnz	r0, 27f48 <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   27f36:	6968      	ldr	r0, [r5, #20]
   27f38:	f7f0 f966 	bl	18208 <tx_meta_data_free>
		net_buf_unref(buf);
   27f3c:	4628      	mov	r0, r5
   27f3e:	f7f5 f873 	bl	1d028 <net_buf_unref>
		return -ENOTCONN;
   27f42:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   27f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   27f48:	f100 060c 	add.w	r6, r0, #12
   27f4c:	4629      	mov	r1, r5
   27f4e:	4630      	mov	r0, r6
   27f50:	f001 f88d 	bl	2906e <net_buf_put>
	return list->head;
   27f54:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27f56:	4625      	mov	r5, r4
   27f58:	b11c      	cbz	r4, 27f62 <bt_att_send+0x38>
	return node->next;
   27f5a:	f855 49e0 	ldr.w	r4, [r5], #-224
   27f5e:	b104      	cbz	r4, 27f62 <bt_att_send+0x38>
   27f60:	3ce0      	subs	r4, #224	; 0xe0
   27f62:	2300      	movs	r3, #0
   27f64:	461f      	mov	r7, r3
   27f66:	b13d      	cbz	r5, 27f78 <bt_att_send+0x4e>
		if (err == -ENOENT && prev &&
   27f68:	1c9a      	adds	r2, r3, #2
   27f6a:	d007      	beq.n	27f7c <bt_att_send+0x52>
		err = process_queue(chan, &att->tx_queue);
   27f6c:	4631      	mov	r1, r6
   27f6e:	4628      	mov	r0, r5
   27f70:	f7ff fcb7 	bl	278e2 <process_queue>
		if (!err) {
   27f74:	4603      	mov	r3, r0
   27f76:	b980      	cbnz	r0, 27f9a <bt_att_send+0x70>
	return 0;
   27f78:	2000      	movs	r0, #0
   27f7a:	e7e4      	b.n	27f46 <bt_att_send+0x1c>
		if (err == -ENOENT && prev &&
   27f7c:	2f00      	cmp	r7, #0
   27f7e:	d0f5      	beq.n	27f6c <bt_att_send+0x42>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   27f80:	2103      	movs	r1, #3
   27f82:	f105 0090 	add.w	r0, r5, #144	; 0x90
   27f86:	f7ff fbbe 	bl	27706 <atomic_test_bit>
   27f8a:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   27f8c:	f107 0090 	add.w	r0, r7, #144	; 0x90
   27f90:	f7ff fbb9 	bl	27706 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   27f94:	4282      	cmp	r2, r0
   27f96:	d1e9      	bne.n	27f6c <bt_att_send+0x42>
   27f98:	463d      	mov	r5, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27f9a:	b13c      	cbz	r4, 27fac <bt_att_send+0x82>
   27f9c:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   27fa0:	b102      	cbz	r2, 27fa4 <bt_att_send+0x7a>
   27fa2:	3ae0      	subs	r2, #224	; 0xe0
   27fa4:	462f      	mov	r7, r5
   27fa6:	4625      	mov	r5, r4
   27fa8:	4614      	mov	r4, r2
   27faa:	e7dc      	b.n	27f66 <bt_att_send+0x3c>
   27fac:	4622      	mov	r2, r4
   27fae:	e7f9      	b.n	27fa4 <bt_att_send+0x7a>

00027fb0 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   27fb0:	b510      	push	{r4, lr}
   27fb2:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   27fb4:	f7f0 f9f8 	bl	183a8 <att_get>
	if (!att) {
   27fb8:	b160      	cbz	r0, 27fd4 <bt_att_req_send+0x24>
	parent->next = child;
   27fba:	2300      	movs	r3, #0
   27fbc:	6023      	str	r3, [r4, #0]
	return list->tail;
   27fbe:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   27fc0:	b92b      	cbnz	r3, 27fce <bt_att_req_send+0x1e>
	list->head = node;
   27fc2:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   27fc6:	f7ff fe03 	bl	27bd0 <att_req_send_process>

	return 0;
   27fca:	2000      	movs	r0, #0
}
   27fcc:	bd10      	pop	{r4, pc}
	parent->next = child;
   27fce:	601c      	str	r4, [r3, #0]
	list->tail = node;
   27fd0:	6084      	str	r4, [r0, #8]
}
   27fd2:	e7f8      	b.n	27fc6 <bt_att_req_send+0x16>
		return -ENOTCONN;
   27fd4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   27fd8:	e7f8      	b.n	27fcc <bt_att_req_send+0x1c>

00027fda <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   27fda:	2001      	movs	r0, #1
   27fdc:	4770      	bx	lr

00027fde <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   27fde:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   27fe0:	f7f0 f9e2 	bl	183a8 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   27fe4:	b198      	cbz	r0, 2800e <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   27fe6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   27fe8:	b18b      	cbz	r3, 2800e <bt_att_clear_out_of_sync_sent+0x30>
   27fea:	f3bf 8f5b 	dmb	ish
   27fee:	3be0      	subs	r3, #224	; 0xe0
   27ff0:	f103 0290 	add.w	r2, r3, #144	; 0x90
   27ff4:	e852 1f00 	ldrex	r1, [r2]
   27ff8:	f021 0120 	bic.w	r1, r1, #32
   27ffc:	e842 1000 	strex	r0, r1, [r2]
   28000:	2800      	cmp	r0, #0
   28002:	d1f7      	bne.n	27ff4 <bt_att_clear_out_of_sync_sent+0x16>
   28004:	f3bf 8f5b 	dmb	ish
	return node->next;
   28008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   2800c:	e7ec      	b.n	27fe8 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   2800e:	bd08      	pop	{r3, pc}

00028010 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   28010:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   28012:	2104      	movs	r1, #4
   28014:	f7ff fb05 	bl	27622 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   28018:	b128      	cbz	r0, 28026 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2801a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2801e:	2105      	movs	r1, #5
   28020:	308c      	adds	r0, #140	; 0x8c
   28022:	f7ff bb70 	b.w	27706 <atomic_test_bit>
}
   28026:	bd08      	pop	{r3, pc}

00028028 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   28028:	6940      	ldr	r0, [r0, #20]

	data->func = func;
	data->user_data = user_data;
   2802a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   2802e:	2201      	movs	r2, #1
   28030:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   28032:	7403      	strb	r3, [r0, #16]
}
   28034:	4770      	bx	lr

00028036 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   28036:	6010      	str	r0, [r2, #0]
}
   28038:	2000      	movs	r0, #0
   2803a:	4770      	bx	lr

0002803c <gatt_ccc_changed>:
{
   2803c:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2803e:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   28040:	895a      	ldrh	r2, [r3, #10]
   28042:	428a      	cmp	r2, r1
   28044:	d003      	beq.n	2804e <gatt_ccc_changed+0x12>
		ccc->value = value;
   28046:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   28048:	68db      	ldr	r3, [r3, #12]
   2804a:	b103      	cbz	r3, 2804e <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   2804c:	4718      	bx	r3
}
   2804e:	4770      	bx	lr

00028050 <gatt_indicate_rsp>:
{
   28050:	b510      	push	{r4, lr}
   28052:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   28054:	68a3      	ldr	r3, [r4, #8]
{
   28056:	460a      	mov	r2, r1
	if (params->func) {
   28058:	b10b      	cbz	r3, 2805e <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2805a:	4621      	mov	r1, r4
   2805c:	4798      	blx	r3
	params->_ref--;
   2805e:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   28060:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   28062:	3b01      	subs	r3, #1
   28064:	b2db      	uxtb	r3, r3
   28066:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   28068:	b122      	cbz	r2, 28074 <gatt_indicate_rsp+0x24>
   2806a:	b91b      	cbnz	r3, 28074 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2806c:	4620      	mov	r0, r4
}
   2806e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   28072:	4710      	bx	r2
}
   28074:	bd10      	pop	{r4, pc}

00028076 <match_uuid>:
	data->attr = attr;
   28076:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   28078:	8091      	strh	r1, [r2, #4]
}
   2807a:	2000      	movs	r0, #0
   2807c:	4770      	bx	lr

0002807e <ccc_set_cb>:
}
   2807e:	2000      	movs	r0, #0
   28080:	4770      	bx	lr

00028082 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   28082:	2207      	movs	r2, #7
   28084:	f7fe be48 	b.w	26d18 <memcpy>

00028088 <clear_ccc_cfg>:
{
   28088:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2808a:	2500      	movs	r5, #0
{
   2808c:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2808e:	4669      	mov	r1, sp
   28090:	3001      	adds	r0, #1
   28092:	9500      	str	r5, [sp, #0]
   28094:	f8cd 5003 	str.w	r5, [sp, #3]
   28098:	f7ff fff3 	bl	28082 <bt_addr_le_copy>
	cfg->id = 0U;
   2809c:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   2809e:	8125      	strh	r5, [r4, #8]
}
   280a0:	b003      	add	sp, #12
   280a2:	bd30      	pop	{r4, r5, pc}

000280a4 <write_name>:
{
   280a4:	b570      	push	{r4, r5, r6, lr}
   280a6:	b092      	sub	sp, #72	; 0x48
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   280a8:	2100      	movs	r1, #0
{
   280aa:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   280ae:	9101      	str	r1, [sp, #4]
{
   280b0:	4616      	mov	r6, r2
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   280b2:	a802      	add	r0, sp, #8
   280b4:	223d      	movs	r2, #61	; 0x3d
{
   280b6:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   280b8:	f7fe fe39 	bl	26d2e <memset>
	if (offset >= sizeof(value)) {
   280bc:	2d40      	cmp	r5, #64	; 0x40
   280be:	d80d      	bhi.n	280dc <write_name+0x38>
	if (offset + len >= sizeof(value)) {
   280c0:	4425      	add	r5, r4
   280c2:	2d40      	cmp	r5, #64	; 0x40
   280c4:	dc0d      	bgt.n	280e2 <write_name+0x3e>
	memcpy(value, buf, len);
   280c6:	4622      	mov	r2, r4
   280c8:	4631      	mov	r1, r6
   280ca:	a801      	add	r0, sp, #4
   280cc:	f7fe fe24 	bl	26d18 <memcpy>
	bt_set_name(value);
   280d0:	a801      	add	r0, sp, #4
   280d2:	f7ee fb31 	bl	16738 <bt_set_name>
}
   280d6:	4620      	mov	r0, r4
   280d8:	b012      	add	sp, #72	; 0x48
   280da:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   280dc:	f06f 0406 	mvn.w	r4, #6
   280e0:	e7f9      	b.n	280d6 <write_name+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   280e2:	f06f 040c 	mvn.w	r4, #12
   280e6:	e7f6      	b.n	280d6 <write_name+0x32>

000280e8 <gen_hash_m>:
{
   280e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   280ea:	6807      	ldr	r7, [r0, #0]
   280ec:	783d      	ldrb	r5, [r7, #0]
{
   280ee:	b089      	sub	sp, #36	; 0x24
   280f0:	4606      	mov	r6, r0
   280f2:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   280f4:	b10d      	cbz	r5, 280fa <gen_hash_m+0x12>
	switch (u16->val) {
   280f6:	2501      	movs	r5, #1
   280f8:	e014      	b.n	28124 <gen_hash_m+0x3c>
   280fa:	887b      	ldrh	r3, [r7, #2]
   280fc:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   28100:	d004      	beq.n	2810c <gen_hash_m+0x24>
   28102:	d812      	bhi.n	2812a <gen_hash_m+0x42>
   28104:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   28108:	2b03      	cmp	r3, #3
   2810a:	d8f4      	bhi.n	280f6 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2810c:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28110:	2202      	movs	r2, #2
   28112:	f10d 010a 	add.w	r1, sp, #10
   28116:	4620      	mov	r0, r4
   28118:	f7fe fc5d 	bl	269d6 <tc_cmac_update>
   2811c:	b9e0      	cbnz	r0, 28158 <gen_hash_m+0x70>
			state->err = -EINVAL;
   2811e:	f06f 0315 	mvn.w	r3, #21
   28122:	65a3      	str	r3, [r4, #88]	; 0x58
}
   28124:	4628      	mov	r0, r5
   28126:	b009      	add	sp, #36	; 0x24
   28128:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2812a:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2812e:	33ff      	adds	r3, #255	; 0xff
   28130:	b29b      	uxth	r3, r3
   28132:	2b04      	cmp	r3, #4
   28134:	d8df      	bhi.n	280f6 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   28136:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2813a:	2202      	movs	r2, #2
   2813c:	f10d 010a 	add.w	r1, sp, #10
   28140:	4620      	mov	r0, r4
   28142:	f7fe fc48 	bl	269d6 <tc_cmac_update>
   28146:	2800      	cmp	r0, #0
   28148:	d0e9      	beq.n	2811e <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   2814a:	887b      	ldrh	r3, [r7, #2]
   2814c:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28150:	2202      	movs	r2, #2
   28152:	f10d 010a 	add.w	r1, sp, #10
   28156:	e016      	b.n	28186 <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   28158:	887b      	ldrh	r3, [r7, #2]
   2815a:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2815e:	2202      	movs	r2, #2
   28160:	f10d 010a 	add.w	r1, sp, #10
   28164:	4620      	mov	r0, r4
   28166:	f7fe fc36 	bl	269d6 <tc_cmac_update>
   2816a:	2800      	cmp	r0, #0
   2816c:	d0d7      	beq.n	2811e <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2816e:	2000      	movs	r0, #0
   28170:	aa03      	add	r2, sp, #12
   28172:	6877      	ldr	r7, [r6, #4]
   28174:	9000      	str	r0, [sp, #0]
   28176:	2313      	movs	r3, #19
   28178:	4631      	mov	r1, r6
   2817a:	47b8      	blx	r7
		if (len < 0) {
   2817c:	1e02      	subs	r2, r0, #0
   2817e:	da01      	bge.n	28184 <gen_hash_m+0x9c>
			state->err = len;
   28180:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   28182:	e7cf      	b.n	28124 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   28184:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28186:	4620      	mov	r0, r4
   28188:	f7fe fc25 	bl	269d6 <tc_cmac_update>
   2818c:	2800      	cmp	r0, #0
   2818e:	d1b2      	bne.n	280f6 <gen_hash_m+0xe>
   28190:	e7c5      	b.n	2811e <gen_hash_m+0x36>

00028192 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28192:	f3bf 8f5b 	dmb	ish
   28196:	6800      	ldr	r0, [r0, #0]
   28198:	f3bf 8f5b 	dmb	ish
}
   2819c:	4770      	bx	lr

0002819e <atomic_or>:
{
   2819e:	4603      	mov	r3, r0
}
   281a0:	f3bf 8f5b 	dmb	ish
   281a4:	e853 0f00 	ldrex	r0, [r3]
   281a8:	ea40 0201 	orr.w	r2, r0, r1
   281ac:	e843 2c00 	strex	ip, r2, [r3]
   281b0:	f1bc 0f00 	cmp.w	ip, #0
   281b4:	d1f6      	bne.n	281a4 <atomic_or+0x6>
   281b6:	f3bf 8f5b 	dmb	ish
   281ba:	4770      	bx	lr

000281bc <atomic_and>:
{
   281bc:	4603      	mov	r3, r0
}
   281be:	f3bf 8f5b 	dmb	ish
   281c2:	e853 0f00 	ldrex	r0, [r3]
   281c6:	ea00 0201 	and.w	r2, r0, r1
   281ca:	e843 2c00 	strex	ip, r2, [r3]
   281ce:	f1bc 0f00 	cmp.w	ip, #0
   281d2:	d1f6      	bne.n	281c2 <atomic_and+0x6>
   281d4:	f3bf 8f5b 	dmb	ish
   281d8:	4770      	bx	lr

000281da <z_log_msg_static_create.constprop.0>:
   281da:	2300      	movs	r3, #0
   281dc:	f7eb b83c 	b.w	13258 <z_impl_z_log_msg_static_create>

000281e0 <clear_cf_cfg>:
{
   281e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   281e2:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   281e4:	2500      	movs	r5, #0
   281e6:	4669      	mov	r1, sp
   281e8:	3001      	adds	r0, #1
   281ea:	9500      	str	r5, [sp, #0]
   281ec:	f8cd 5003 	str.w	r5, [sp, #3]
   281f0:	f7ff ff47 	bl	28082 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   281f4:	f104 0008 	add.w	r0, r4, #8
   281f8:	2201      	movs	r2, #1
   281fa:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   281fc:	340c      	adds	r4, #12
   281fe:	f7fe fd96 	bl	26d2e <memset>
   28202:	f3bf 8f5b 	dmb	ish
   28206:	e854 3f00 	ldrex	r3, [r4]
   2820a:	e844 5200 	strex	r2, r5, [r4]
   2820e:	2a00      	cmp	r2, #0
   28210:	d1f9      	bne.n	28206 <clear_cf_cfg+0x26>
   28212:	f3bf 8f5b 	dmb	ish
}
   28216:	b003      	add	sp, #12
   28218:	bd30      	pop	{r4, r5, pc}

0002821a <read_ppcp>:
{
   2821a:	b513      	push	{r0, r1, r4, lr}
   2821c:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   2821e:	2218      	movs	r2, #24
{
   28220:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   28224:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   28228:	2228      	movs	r2, #40	; 0x28
   2822a:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2822e:	2200      	movs	r2, #0
   28230:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   28234:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   28236:	f04f 022a 	mov.w	r2, #42	; 0x2a
   2823a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2823e:	d80b      	bhi.n	28258 <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   28240:	f1c1 0408 	rsb	r4, r1, #8
   28244:	429c      	cmp	r4, r3
   28246:	bfa8      	it	ge
   28248:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2824a:	4622      	mov	r2, r4
   2824c:	4469      	add	r1, sp
   2824e:	f7fe fd63 	bl	26d18 <memcpy>
}
   28252:	4620      	mov	r0, r4
   28254:	b002      	add	sp, #8
   28256:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28258:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2825c:	e7f9      	b.n	28252 <read_ppcp+0x38>

0002825e <read_appearance>:
{
   2825e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28260:	4615      	mov	r5, r2
   28262:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   28266:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   28268:	f7fe ff46 	bl	270f8 <bt_get_appearance>
	if (offset > value_len) {
   2826c:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2826e:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   28272:	d80e      	bhi.n	28292 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   28274:	f1c6 0402 	rsb	r4, r6, #2
   28278:	42bc      	cmp	r4, r7
   2827a:	bfa8      	it	ge
   2827c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2827e:	f10d 0306 	add.w	r3, sp, #6
   28282:	4622      	mov	r2, r4
   28284:	1999      	adds	r1, r3, r6
   28286:	4628      	mov	r0, r5
   28288:	f7fe fd46 	bl	26d18 <memcpy>
}
   2828c:	4620      	mov	r0, r4
   2828e:	b003      	add	sp, #12
   28290:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28292:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   28296:	e7f9      	b.n	2828c <read_appearance+0x2e>

00028298 <read_name>:
{
   28298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2829c:	4698      	mov	r8, r3
   2829e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   282a2:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   282a4:	f7ee fa82 	bl	167ac <bt_get_name>
   282a8:	4607      	mov	r7, r0
				 strlen(name));
   282aa:	f7fe fcdf 	bl	26c6c <strlen>
	if (offset > value_len) {
   282ae:	b283      	uxth	r3, r0
   282b0:	42b3      	cmp	r3, r6
   282b2:	d30c      	bcc.n	282ce <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   282b4:	1b9c      	subs	r4, r3, r6
   282b6:	4544      	cmp	r4, r8
   282b8:	bfa8      	it	ge
   282ba:	4644      	movge	r4, r8
   282bc:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   282be:	4622      	mov	r2, r4
   282c0:	19b9      	adds	r1, r7, r6
   282c2:	4628      	mov	r0, r5
   282c4:	f7fe fd28 	bl	26d18 <memcpy>
}
   282c8:	4620      	mov	r0, r4
   282ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   282ce:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   282d2:	e7f9      	b.n	282c8 <read_name+0x30>

000282d4 <cf_read>:
{
   282d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   282d6:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   282d8:	2300      	movs	r3, #0
{
   282da:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   282de:	f88d 3004 	strb.w	r3, [sp, #4]
{
   282e2:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   282e4:	f7f1 f940 	bl	19568 <find_cf_cfg>
	if (cfg) {
   282e8:	b128      	cbz	r0, 282f6 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   282ea:	f100 0108 	add.w	r1, r0, #8
   282ee:	2201      	movs	r2, #1
   282f0:	a801      	add	r0, sp, #4
   282f2:	f7fe fd11 	bl	26d18 <memcpy>
	if (offset > value_len) {
   282f6:	2e01      	cmp	r6, #1
   282f8:	d80d      	bhi.n	28316 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   282fa:	f1c6 0401 	rsb	r4, r6, #1
   282fe:	42bc      	cmp	r4, r7
   28300:	bfa8      	it	ge
   28302:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   28304:	ab01      	add	r3, sp, #4
   28306:	4622      	mov	r2, r4
   28308:	1999      	adds	r1, r3, r6
   2830a:	4628      	mov	r0, r5
   2830c:	f7fe fd04 	bl	26d18 <memcpy>
}
   28310:	4620      	mov	r0, r4
   28312:	b003      	add	sp, #12
   28314:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28316:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2831a:	e7f9      	b.n	28310 <cf_read+0x3c>

0002831c <bt_gatt_attr_read_service>:
{
   2831c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   2831e:	68c9      	ldr	r1, [r1, #12]
{
   28320:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   28324:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   28326:	780b      	ldrb	r3, [r1, #0]
{
   28328:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   2832a:	b993      	cbnz	r3, 28352 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2832c:	884b      	ldrh	r3, [r1, #2]
   2832e:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   28332:	2d02      	cmp	r5, #2
   28334:	d819      	bhi.n	2836a <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   28336:	f1c5 0202 	rsb	r2, r5, #2
   2833a:	4294      	cmp	r4, r2
   2833c:	bfa8      	it	ge
   2833e:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   28340:	f10d 0306 	add.w	r3, sp, #6
   28344:	4622      	mov	r2, r4
   28346:	1959      	adds	r1, r3, r5
   28348:	f7fe fce6 	bl	26d18 <memcpy>
}
   2834c:	4620      	mov	r0, r4
   2834e:	b003      	add	sp, #12
   28350:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   28352:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   28354:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   28358:	d807      	bhi.n	2836a <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   2835a:	f1c5 0210 	rsb	r2, r5, #16
   2835e:	4294      	cmp	r4, r2
   28360:	bfa8      	it	ge
   28362:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   28364:	4622      	mov	r2, r4
   28366:	4429      	add	r1, r5
   28368:	e7ee      	b.n	28348 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2836a:	f06f 0406 	mvn.w	r4, #6
   2836e:	e7ed      	b.n	2834c <bt_gatt_attr_read_service+0x30>

00028370 <ccc_find_cfg>:
{
   28370:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   28372:	7803      	ldrb	r3, [r0, #0]
   28374:	4293      	cmp	r3, r2
{
   28376:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   28378:	d001      	beq.n	2837e <ccc_find_cfg+0xe>
	return NULL;
   2837a:	2000      	movs	r0, #0
}
   2837c:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   2837e:	2207      	movs	r2, #7
   28380:	3001      	adds	r0, #1
   28382:	f7fe fca0 	bl	26cc6 <memcmp>
		if (id == ccc->cfg[i].id &&
   28386:	2800      	cmp	r0, #0
   28388:	d1f7      	bne.n	2837a <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   2838a:	4620      	mov	r0, r4
   2838c:	e7f6      	b.n	2837c <ccc_find_cfg+0xc>

0002838e <find_ccc_cfg>:
{
   2838e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28390:	460c      	mov	r4, r1
						    &cfg->peer)) {
   28392:	1c4d      	adds	r5, r1, #1
		if (conn) {
   28394:	b148      	cbz	r0, 283aa <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   28396:	7809      	ldrb	r1, [r1, #0]
   28398:	462a      	mov	r2, r5
   2839a:	f7ff f879 	bl	27490 <bt_conn_is_peer_addr_le>
	return NULL;
   2839e:	2800      	cmp	r0, #0
   283a0:	bf08      	it	eq
   283a2:	2400      	moveq	r4, #0
}
   283a4:	4620      	mov	r0, r4
   283a6:	b003      	add	sp, #12
   283a8:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   283aa:	9000      	str	r0, [sp, #0]
   283ac:	2207      	movs	r2, #7
   283ae:	f8cd 0003 	str.w	r0, [sp, #3]
   283b2:	4669      	mov	r1, sp
   283b4:	4628      	mov	r0, r5
   283b6:	f7fe fc86 	bl	26cc6 <memcmp>
	return NULL;
   283ba:	2800      	cmp	r0, #0
   283bc:	bf18      	it	ne
   283be:	2400      	movne	r4, #0
   283c0:	e7f0      	b.n	283a4 <find_ccc_cfg+0x16>

000283c2 <bt_gatt_attr_read_ccc>:
{
   283c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   283c4:	68c9      	ldr	r1, [r1, #12]
{
   283c6:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   283ca:	4615      	mov	r5, r2
   283cc:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   283ce:	f7ff ffde 	bl	2838e <find_ccc_cfg>
	if (cfg) {
   283d2:	b100      	cbz	r0, 283d6 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   283d4:	8900      	ldrh	r0, [r0, #8]
   283d6:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   283da:	2e02      	cmp	r6, #2
   283dc:	d80e      	bhi.n	283fc <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   283de:	f1c6 0402 	rsb	r4, r6, #2
   283e2:	42bc      	cmp	r4, r7
   283e4:	bfa8      	it	ge
   283e6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   283e8:	f10d 0306 	add.w	r3, sp, #6
   283ec:	4622      	mov	r2, r4
   283ee:	1999      	adds	r1, r3, r6
   283f0:	4628      	mov	r0, r5
   283f2:	f7fe fc91 	bl	26d18 <memcpy>
}
   283f6:	4620      	mov	r0, r4
   283f8:	b003      	add	sp, #12
   283fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   283fc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   28400:	e7f9      	b.n	283f6 <bt_gatt_attr_read_ccc+0x34>

00028402 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   28402:	2a02      	cmp	r2, #2
{
   28404:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   28406:	d108      	bne.n	2841a <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   28408:	2300      	movs	r3, #0
   2840a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2840e:	461a      	mov	r2, r3
   28410:	7a00      	ldrb	r0, [r0, #8]
   28412:	f7f1 fbc7 	bl	19ba4 <sc_save>
}
   28416:	2002      	movs	r0, #2
   28418:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2841a:	f7f1 fc43 	bl	19ca4 <sc_clear>
   2841e:	e7fa      	b.n	28416 <sc_ccc_cfg_write+0x14>

00028420 <sc_restore_rsp>:
{
   28420:	b538      	push	{r3, r4, r5, lr}
   28422:	4604      	mov	r4, r0
   28424:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   28426:	f7ff fdd8 	bl	27fda <bt_att_fixed_chan_only>
   2842a:	b150      	cbz	r0, 28442 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   2842c:	4620      	mov	r0, r4
   2842e:	f7f1 f89b 	bl	19568 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   28432:	b130      	cbz	r0, 28442 <sc_restore_rsp+0x22>
   28434:	7a03      	ldrb	r3, [r0, #8]
   28436:	07db      	lsls	r3, r3, #31
   28438:	d503      	bpl.n	28442 <sc_restore_rsp+0x22>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2843a:	2101      	movs	r1, #1
   2843c:	300c      	adds	r0, #12
   2843e:	f7ff feae 	bl	2819e <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   28442:	b985      	cbnz	r5, 28466 <sc_restore_rsp+0x46>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   28444:	7a20      	ldrb	r0, [r4, #8]
   28446:	f104 0188 	add.w	r1, r4, #136	; 0x88
   2844a:	f7f1 fb89 	bl	19b60 <find_sc_cfg>
		if (sc_cfg) {
   2844e:	4604      	mov	r4, r0
   28450:	b148      	cbz	r0, 28466 <sc_restore_rsp+0x46>
	memset(&cfg->data, 0, sizeof(cfg->data));
   28452:	4629      	mov	r1, r5
   28454:	2204      	movs	r2, #4
   28456:	3008      	adds	r0, #8
   28458:	f7fe fc69 	bl	26d2e <memset>
		sc_store(cfg);
   2845c:	4620      	mov	r0, r4
}
   2845e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   28462:	f7f1 b8e1 	b.w	19628 <sc_store>
}
   28466:	bd38      	pop	{r3, r4, r5, pc}

00028468 <bt_gatt_attr_read>:
{
   28468:	b538      	push	{r3, r4, r5, lr}
   2846a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2846e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   28472:	42a9      	cmp	r1, r5
{
   28474:	4610      	mov	r0, r2
	if (offset > value_len) {
   28476:	d80b      	bhi.n	28490 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   28478:	1a6d      	subs	r5, r5, r1
   2847a:	429d      	cmp	r5, r3
   2847c:	bfa8      	it	ge
   2847e:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   28480:	9b05      	ldr	r3, [sp, #20]
   28482:	b2ad      	uxth	r5, r5
   28484:	462a      	mov	r2, r5
   28486:	4419      	add	r1, r3
   28488:	f7fe fc46 	bl	26d18 <memcpy>
}
   2848c:	4628      	mov	r0, r5
   2848e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28490:	f06f 0506 	mvn.w	r5, #6
   28494:	e7fa      	b.n	2848c <bt_gatt_attr_read+0x24>

00028496 <bt_gatt_attr_value_handle>:
{
   28496:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   28498:	4604      	mov	r4, r0
   2849a:	b910      	cbnz	r0, 284a2 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2849c:	2000      	movs	r0, #0
}
   2849e:	b002      	add	sp, #8
   284a0:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   284a2:	2300      	movs	r3, #0
   284a4:	f88d 3004 	strb.w	r3, [sp, #4]
   284a8:	6800      	ldr	r0, [r0, #0]
   284aa:	f642 0303 	movw	r3, #10243	; 0x2803
   284ae:	a901      	add	r1, sp, #4
   284b0:	f8ad 3006 	strh.w	r3, [sp, #6]
   284b4:	f7fe fcc9 	bl	26e4a <bt_uuid_cmp>
   284b8:	2800      	cmp	r0, #0
   284ba:	d1ef      	bne.n	2849c <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   284bc:	68e3      	ldr	r3, [r4, #12]
   284be:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   284c0:	2800      	cmp	r0, #0
   284c2:	d1ec      	bne.n	2849e <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   284c4:	4620      	mov	r0, r4
   284c6:	f7f1 fd8d 	bl	19fe4 <bt_gatt_attr_get_handle>
   284ca:	3001      	adds	r0, #1
   284cc:	b280      	uxth	r0, r0
	return handle;
   284ce:	e7e6      	b.n	2849e <bt_gatt_attr_value_handle+0x8>

000284d0 <bt_gatt_attr_read_chrc>:
{
   284d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   284d2:	68cf      	ldr	r7, [r1, #12]
{
   284d4:	b087      	sub	sp, #28
   284d6:	4608      	mov	r0, r1
   284d8:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   284da:	79bb      	ldrb	r3, [r7, #6]
   284dc:	f88d 3004 	strb.w	r3, [sp, #4]
{
   284e0:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   284e4:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   284e6:	f7ff ffd6 	bl	28496 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   284ea:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   284ec:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   284f0:	780b      	ldrb	r3, [r1, #0]
   284f2:	b99b      	cbnz	r3, 2851c <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   284f4:	884b      	ldrh	r3, [r1, #2]
   284f6:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   284fa:	2105      	movs	r1, #5
	if (offset > value_len) {
   284fc:	42b1      	cmp	r1, r6
   284fe:	d315      	bcc.n	2852c <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   28500:	1b89      	subs	r1, r1, r6
   28502:	42a1      	cmp	r1, r4
   28504:	bfa8      	it	ge
   28506:	4621      	movge	r1, r4
   28508:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   2850a:	ab01      	add	r3, sp, #4
   2850c:	4622      	mov	r2, r4
   2850e:	1999      	adds	r1, r3, r6
   28510:	4628      	mov	r0, r5
   28512:	f7fe fc01 	bl	26d18 <memcpy>
}
   28516:	4620      	mov	r0, r4
   28518:	b007      	add	sp, #28
   2851a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2851c:	3101      	adds	r1, #1
   2851e:	2210      	movs	r2, #16
   28520:	f10d 0007 	add.w	r0, sp, #7
   28524:	f7fe fbf8 	bl	26d18 <memcpy>
		value_len += 16U;
   28528:	2113      	movs	r1, #19
   2852a:	e7e7      	b.n	284fc <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2852c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   28530:	e7f1      	b.n	28516 <bt_gatt_attr_read_chrc+0x46>

00028532 <bt_gatt_foreach_attr>:
{
   28532:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   28534:	e9cd 2301 	strd	r2, r3, [sp, #4]
   28538:	2300      	movs	r3, #0
   2853a:	9300      	str	r3, [sp, #0]
   2853c:	461a      	mov	r2, r3
   2853e:	f7f1 fd81 	bl	1a044 <bt_gatt_foreach_attr_type>
}
   28542:	b005      	add	sp, #20
   28544:	f85d fb04 	ldr.w	pc, [sp], #4

00028548 <bt_gatt_check_perm>:
{
   28548:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2854a:	07d3      	lsls	r3, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2854c:	8a4c      	ldrh	r4, [r1, #18]
{
   2854e:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   28550:	d504      	bpl.n	2855c <bt_gatt_check_perm+0x14>
   28552:	f014 0f95 	tst.w	r4, #149	; 0x95
   28556:	d026      	beq.n	285a6 <bt_gatt_check_perm+0x5e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   28558:	684b      	ldr	r3, [r1, #4]
   2855a:	b323      	cbz	r3, 285a6 <bt_gatt_check_perm+0x5e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2855c:	0790      	lsls	r0, r2, #30
   2855e:	d504      	bpl.n	2856a <bt_gatt_check_perm+0x22>
   28560:	f414 7f95 	tst.w	r4, #298	; 0x12a
   28564:	d021      	beq.n	285aa <bt_gatt_check_perm+0x62>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   28566:	688b      	ldr	r3, [r1, #8]
   28568:	b1fb      	cbz	r3, 285aa <bt_gatt_check_perm+0x62>
	mask &= attr->perm;
   2856a:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2856c:	f414 7fc0 	tst.w	r4, #384	; 0x180
   28570:	d007      	beq.n	28582 <bt_gatt_check_perm+0x3a>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   28572:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   28576:	b90b      	cbnz	r3, 2857c <bt_gatt_check_perm+0x34>
			return BT_ATT_ERR_AUTHENTICATION;
   28578:	2005      	movs	r0, #5
}
   2857a:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2857c:	7b5b      	ldrb	r3, [r3, #13]
   2857e:	06db      	lsls	r3, r3, #27
   28580:	d5fa      	bpl.n	28578 <bt_gatt_check_perm+0x30>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   28582:	f014 0f30 	tst.w	r4, #48	; 0x30
   28586:	d108      	bne.n	2859a <bt_gatt_check_perm+0x52>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   28588:	f014 000c 	ands.w	r0, r4, #12
   2858c:	d0f5      	beq.n	2857a <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   2858e:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   28590:	2b00      	cmp	r3, #0
   28592:	bf14      	ite	ne
   28594:	2000      	movne	r0, #0
   28596:	200f      	moveq	r0, #15
   28598:	e7ef      	b.n	2857a <bt_gatt_check_perm+0x32>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2859a:	4628      	mov	r0, r5
   2859c:	f7fe ff76 	bl	2748c <bt_conn_get_security>
   285a0:	2802      	cmp	r0, #2
   285a2:	d8f1      	bhi.n	28588 <bt_gatt_check_perm+0x40>
   285a4:	e7e8      	b.n	28578 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   285a6:	2002      	movs	r0, #2
   285a8:	e7e7      	b.n	2857a <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   285aa:	2003      	movs	r0, #3
   285ac:	e7e5      	b.n	2857a <bt_gatt_check_perm+0x32>

000285ae <bt_gatt_is_subscribed>:
{
   285ae:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   285b2:	7b43      	ldrb	r3, [r0, #13]
   285b4:	2b07      	cmp	r3, #7
{
   285b6:	4606      	mov	r6, r0
   285b8:	460c      	mov	r4, r1
   285ba:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   285bc:	d003      	beq.n	285c6 <bt_gatt_is_subscribed+0x18>
		return false;
   285be:	2000      	movs	r0, #0
}
   285c0:	b004      	add	sp, #16
   285c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   285c6:	2300      	movs	r3, #0
   285c8:	f88d 300c 	strb.w	r3, [sp, #12]
   285cc:	6820      	ldr	r0, [r4, #0]
   285ce:	f642 0303 	movw	r3, #10243	; 0x2803
   285d2:	a903      	add	r1, sp, #12
   285d4:	f8ad 300e 	strh.w	r3, [sp, #14]
   285d8:	f7fe fc37 	bl	26e4a <bt_uuid_cmp>
   285dc:	b940      	cbnz	r0, 285f0 <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   285de:	68e3      	ldr	r3, [r4, #12]
   285e0:	7999      	ldrb	r1, [r3, #6]
   285e2:	f011 0030 	ands.w	r0, r1, #48	; 0x30
   285e6:	d0eb      	beq.n	285c0 <bt_gatt_is_subscribed+0x12>
		attr = bt_gatt_attr_next(attr);
   285e8:	4620      	mov	r0, r4
   285ea:	f7f1 ff03 	bl	1a3f4 <bt_gatt_attr_next>
   285ee:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   285f0:	2300      	movs	r3, #0
   285f2:	6820      	ldr	r0, [r4, #0]
   285f4:	f88d 300c 	strb.w	r3, [sp, #12]
   285f8:	a903      	add	r1, sp, #12
   285fa:	f642 1302 	movw	r3, #10498	; 0x2902
   285fe:	f8ad 300e 	strh.w	r3, [sp, #14]
   28602:	f7fe fc22 	bl	26e4a <bt_uuid_cmp>
   28606:	b118      	cbz	r0, 28610 <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   28608:	4620      	mov	r0, r4
   2860a:	f7f1 fef3 	bl	1a3f4 <bt_gatt_attr_next>
   2860e:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   28610:	2500      	movs	r5, #0
   28612:	f642 1802 	movw	r8, #10498	; 0x2902
   28616:	6820      	ldr	r0, [r4, #0]
   28618:	f88d 5000 	strb.w	r5, [sp]
   2861c:	4669      	mov	r1, sp
   2861e:	f8ad 8002 	strh.w	r8, [sp, #2]
   28622:	f7fe fc12 	bl	26e4a <bt_uuid_cmp>
   28626:	b9d8      	cbnz	r0, 28660 <bt_gatt_is_subscribed+0xb2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   28628:	6820      	ldr	r0, [r4, #0]
   2862a:	2500      	movs	r5, #0
   2862c:	f642 1302 	movw	r3, #10498	; 0x2902
   28630:	a903      	add	r1, sp, #12
   28632:	f88d 500c 	strb.w	r5, [sp, #12]
   28636:	f8ad 300e 	strh.w	r3, [sp, #14]
   2863a:	f7fe fc06 	bl	26e4a <bt_uuid_cmp>
   2863e:	2800      	cmp	r0, #0
   28640:	d1bd      	bne.n	285be <bt_gatt_is_subscribed+0x10>
	ccc = attr->user_data;
   28642:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   28644:	4622      	mov	r2, r4
   28646:	4630      	mov	r0, r6
   28648:	f812 1b01 	ldrb.w	r1, [r2], #1
   2864c:	f7fe ff20 	bl	27490 <bt_conn_is_peer_addr_le>
   28650:	2800      	cmp	r0, #0
   28652:	d0b4      	beq.n	285be <bt_gatt_is_subscribed+0x10>
   28654:	8923      	ldrh	r3, [r4, #8]
   28656:	421f      	tst	r7, r3
   28658:	bf14      	ite	ne
   2865a:	2001      	movne	r0, #1
   2865c:	2000      	moveq	r0, #0
   2865e:	e7af      	b.n	285c0 <bt_gatt_is_subscribed+0x12>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   28660:	6820      	ldr	r0, [r4, #0]
   28662:	f88d 5004 	strb.w	r5, [sp, #4]
   28666:	f642 0303 	movw	r3, #10243	; 0x2803
   2866a:	a901      	add	r1, sp, #4
   2866c:	f8ad 3006 	strh.w	r3, [sp, #6]
   28670:	f7fe fbeb 	bl	26e4a <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   28674:	2800      	cmp	r0, #0
   28676:	d0d7      	beq.n	28628 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   28678:	6820      	ldr	r0, [r4, #0]
   2867a:	f88d 5008 	strb.w	r5, [sp, #8]
   2867e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   28682:	a902      	add	r1, sp, #8
   28684:	f8ad 300a 	strh.w	r3, [sp, #10]
   28688:	f7fe fbdf 	bl	26e4a <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2868c:	2800      	cmp	r0, #0
   2868e:	d0cb      	beq.n	28628 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   28690:	6820      	ldr	r0, [r4, #0]
   28692:	f88d 500c 	strb.w	r5, [sp, #12]
   28696:	f642 0301 	movw	r3, #10241	; 0x2801
   2869a:	a903      	add	r1, sp, #12
   2869c:	f8ad 300e 	strh.w	r3, [sp, #14]
   286a0:	f7fe fbd3 	bl	26e4a <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   286a4:	2800      	cmp	r0, #0
   286a6:	d0bf      	beq.n	28628 <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   286a8:	4620      	mov	r0, r4
   286aa:	f7f1 fea3 	bl	1a3f4 <bt_gatt_attr_next>
		if (!attr) {
   286ae:	4604      	mov	r4, r0
   286b0:	2800      	cmp	r0, #0
   286b2:	d1b0      	bne.n	28616 <bt_gatt_is_subscribed+0x68>
   286b4:	e783      	b.n	285be <bt_gatt_is_subscribed+0x10>

000286b6 <bt_gatt_change_aware>:
{
   286b6:	b570      	push	{r4, r5, r6, lr}
   286b8:	4606      	mov	r6, r0
   286ba:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   286bc:	f7f0 ff54 	bl	19568 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   286c0:	b910      	cbnz	r0, 286c8 <bt_gatt_change_aware+0x12>
		return true;
   286c2:	2401      	movs	r4, #1
}
   286c4:	4620      	mov	r0, r4
   286c6:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   286c8:	7a03      	ldrb	r3, [r0, #8]
   286ca:	07da      	lsls	r2, r3, #31
   286cc:	d5f9      	bpl.n	286c2 <bt_gatt_change_aware+0xc>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   286ce:	f100 050c 	add.w	r5, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   286d2:	4628      	mov	r0, r5
   286d4:	f7ff fd5d 	bl	28192 <atomic_get>
   286d8:	07c3      	lsls	r3, r0, #31
   286da:	d4f2      	bmi.n	286c2 <bt_gatt_change_aware+0xc>
	if (!req) {
   286dc:	b90c      	cbnz	r4, 286e2 <bt_gatt_change_aware+0x2c>
		return false;
   286de:	2400      	movs	r4, #0
   286e0:	e7f0      	b.n	286c4 <bt_gatt_change_aware+0xe>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   286e2:	f06f 0102 	mvn.w	r1, #2
   286e6:	4628      	mov	r0, r5
   286e8:	f7ff fd68 	bl	281bc <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   286ec:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   286f0:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   286f2:	d006      	beq.n	28702 <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   286f4:	f7ff fc73 	bl	27fde <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   286f8:	2101      	movs	r1, #1
   286fa:	4628      	mov	r0, r5
   286fc:	f7ff fd4f 	bl	2819e <atomic_or>
}
   28700:	e7e0      	b.n	286c4 <bt_gatt_change_aware+0xe>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   28702:	f7ff fc6a 	bl	27fda <bt_att_fixed_chan_only>
   28706:	2800      	cmp	r0, #0
   28708:	d0e9      	beq.n	286de <bt_gatt_change_aware+0x28>
   2870a:	4630      	mov	r0, r6
   2870c:	f7ff fc80 	bl	28010 <bt_att_out_of_sync_sent_on_fixed>
   28710:	4604      	mov	r4, r0
   28712:	2800      	cmp	r0, #0
   28714:	d0e3      	beq.n	286de <bt_gatt_change_aware+0x28>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28716:	f06f 0102 	mvn.w	r1, #2
   2871a:	4628      	mov	r0, r5
   2871c:	f7ff fd4e 	bl	281bc <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   28720:	4630      	mov	r0, r6
   28722:	e7e7      	b.n	286f4 <bt_gatt_change_aware+0x3e>

00028724 <ccc_delayed_store>:
{
   28724:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   28726:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2872a:	4605      	mov	r5, r0
		if (!conn) {
   2872c:	b194      	cbz	r4, 28754 <ccc_delayed_store+0x30>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2872e:	f104 0688 	add.w	r6, r4, #136	; 0x88
   28732:	7a20      	ldrb	r0, [r4, #8]
   28734:	4631      	mov	r1, r6
   28736:	f7fe fce2 	bl	270fe <bt_addr_le_is_bonded>
   2873a:	b158      	cbz	r0, 28754 <ccc_delayed_store+0x30>
			ccc_store->conn_list[i] = NULL;
   2873c:	2300      	movs	r3, #0
   2873e:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   28742:	7a20      	ldrb	r0, [r4, #8]
   28744:	4631      	mov	r1, r6
   28746:	f7f2 f99f 	bl	1aa88 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   2874a:	4620      	mov	r0, r4
}
   2874c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   28750:	f7fe be03 	b.w	2735a <bt_conn_unref>
}
   28754:	bd70      	pop	{r4, r5, r6, pc}

00028756 <sys_memcpy_swap>:
	psrc += length - 1;
   28756:	1e53      	subs	r3, r2, #1
   28758:	4419      	add	r1, r3
	for (; length > 0; length--) {
   2875a:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   2875c:	f811 3901 	ldrb.w	r3, [r1], #-1
   28760:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   28764:	4290      	cmp	r0, r2
   28766:	d1f9      	bne.n	2875c <sys_memcpy_swap+0x6>
}
   28768:	4770      	bx	lr

0002876a <sys_mem_swap>:
{
   2876a:	b510      	push	{r4, lr}
   2876c:	1843      	adds	r3, r0, r1
   2876e:	eb00 0151 	add.w	r1, r0, r1, lsr #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   28772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		uint8_t tmp = ((uint8_t *)buf)[i];
   28776:	7802      	ldrb	r2, [r0, #0]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   28778:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < (length/2); i++) {
   2877c:	4288      	cmp	r0, r1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2877e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   28780:	d1f7      	bne.n	28772 <sys_mem_swap+0x8>
	}
}
   28782:	bd10      	pop	{r4, pc}

00028784 <smp_pairing_rsp>:
}
   28784:	2007      	movs	r0, #7
   28786:	4770      	bx	lr

00028788 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28788:	f3bf 8f5b 	dmb	ish
   2878c:	6800      	ldr	r0, [r0, #0]
   2878e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   28792:	4108      	asrs	r0, r1
}
   28794:	f000 0001 	and.w	r0, r0, #1
   28798:	4770      	bx	lr

0002879a <update_keys_check>:
{
   2879a:	b510      	push	{r4, lr}
   2879c:	4603      	mov	r3, r0
	if (!keys ||
   2879e:	b1d9      	cbz	r1, 287d8 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   287a0:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   287a2:	f010 0f24 	tst.w	r0, #36	; 0x24
   287a6:	d017      	beq.n	287d8 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   287a8:	7d1a      	ldrb	r2, [r3, #20]
   287aa:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   287ac:	7b09      	ldrb	r1, [r1, #12]
   287ae:	42a2      	cmp	r2, r4
   287b0:	bf28      	it	cs
   287b2:	4622      	movcs	r2, r4
   287b4:	4291      	cmp	r1, r2
   287b6:	d901      	bls.n	287bc <update_keys_check+0x22>
		return false;
   287b8:	2000      	movs	r0, #0
}
   287ba:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   287bc:	0682      	lsls	r2, r0, #26
   287be:	d404      	bmi.n	287ca <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   287c0:	7a18      	ldrb	r0, [r3, #8]
   287c2:	3800      	subs	r0, #0
   287c4:	bf18      	it	ne
   287c6:	2001      	movne	r0, #1
   287c8:	e7f7      	b.n	287ba <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   287ca:	2105      	movs	r1, #5
   287cc:	1d18      	adds	r0, r3, #4
   287ce:	f7ff ffdb 	bl	28788 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   287d2:	2800      	cmp	r0, #0
   287d4:	d1f4      	bne.n	287c0 <update_keys_check+0x26>
   287d6:	e7ef      	b.n	287b8 <update_keys_check+0x1e>
		return true;
   287d8:	2001      	movs	r0, #1
   287da:	e7ee      	b.n	287ba <update_keys_check+0x20>

000287dc <bt_smp_aes_cmac>:
{
   287dc:	b570      	push	{r4, r5, r6, lr}
   287de:	b0c2      	sub	sp, #264	; 0x108
   287e0:	460d      	mov	r5, r1
   287e2:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   287e4:	4601      	mov	r1, r0
   287e6:	aa16      	add	r2, sp, #88	; 0x58
   287e8:	4668      	mov	r0, sp
{
   287ea:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   287ec:	f7fe f8c8 	bl	26980 <tc_cmac_setup>
   287f0:	b150      	cbz	r0, 28808 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   287f2:	4632      	mov	r2, r6
   287f4:	4629      	mov	r1, r5
   287f6:	4668      	mov	r0, sp
   287f8:	f7fe f8ed 	bl	269d6 <tc_cmac_update>
   287fc:	b120      	cbz	r0, 28808 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   287fe:	4669      	mov	r1, sp
   28800:	4620      	mov	r0, r4
   28802:	f7fe f953 	bl	26aac <tc_cmac_final>
   28806:	b918      	cbnz	r0, 28810 <bt_smp_aes_cmac+0x34>
		return -EIO;
   28808:	f06f 0004 	mvn.w	r0, #4
}
   2880c:	b042      	add	sp, #264	; 0x108
   2880e:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   28810:	2000      	movs	r0, #0
   28812:	e7fb      	b.n	2880c <bt_smp_aes_cmac+0x30>

00028814 <smp_f4>:
{
   28814:	b5f0      	push	{r4, r5, r6, r7, lr}
   28816:	b097      	sub	sp, #92	; 0x5c
   28818:	4614      	mov	r4, r2
   2881a:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   2881c:	2220      	movs	r2, #32
   2881e:	4601      	mov	r1, r0
   28820:	a805      	add	r0, sp, #20
{
   28822:	461d      	mov	r5, r3
   28824:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   28826:	f7ff ff96 	bl	28756 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2882a:	2220      	movs	r2, #32
   2882c:	4631      	mov	r1, r6
   2882e:	a80d      	add	r0, sp, #52	; 0x34
   28830:	f7ff ff91 	bl	28756 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   28834:	4621      	mov	r1, r4
   28836:	2210      	movs	r2, #16
   28838:	a801      	add	r0, sp, #4
	m[64] = z;
   2883a:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2883e:	f7ff ff8a 	bl	28756 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   28842:	463b      	mov	r3, r7
   28844:	2241      	movs	r2, #65	; 0x41
   28846:	a905      	add	r1, sp, #20
   28848:	a801      	add	r0, sp, #4
   2884a:	f7ff ffc7 	bl	287dc <bt_smp_aes_cmac>
	if (err) {
   2884e:	4604      	mov	r4, r0
   28850:	b918      	cbnz	r0, 2885a <smp_f4+0x46>
	sys_mem_swap(res, 16);
   28852:	2110      	movs	r1, #16
   28854:	4638      	mov	r0, r7
   28856:	f7ff ff88 	bl	2876a <sys_mem_swap>
}
   2885a:	4620      	mov	r0, r4
   2885c:	b017      	add	sp, #92	; 0x5c
   2885e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028860 <smp_f6>:
{
   28860:	b5f0      	push	{r4, r5, r6, r7, lr}
   28862:	b097      	sub	sp, #92	; 0x5c
   28864:	4605      	mov	r5, r0
   28866:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   28868:	a805      	add	r0, sp, #20
   2886a:	2210      	movs	r2, #16
{
   2886c:	461c      	mov	r4, r3
   2886e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   28870:	f7ff ff71 	bl	28756 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   28874:	2210      	movs	r2, #16
   28876:	4631      	mov	r1, r6
   28878:	a809      	add	r0, sp, #36	; 0x24
   2887a:	f7ff ff6c 	bl	28756 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2887e:	4621      	mov	r1, r4
   28880:	2210      	movs	r2, #16
   28882:	a80d      	add	r0, sp, #52	; 0x34
   28884:	f7ff ff67 	bl	28756 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   28888:	991c      	ldr	r1, [sp, #112]	; 0x70
   2888a:	2203      	movs	r2, #3
   2888c:	a811      	add	r0, sp, #68	; 0x44
   2888e:	f7ff ff62 	bl	28756 <sys_memcpy_swap>
	m[51] = a1->type;
   28892:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   28894:	f814 3b01 	ldrb.w	r3, [r4], #1
   28898:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2889c:	4621      	mov	r1, r4
   2889e:	2206      	movs	r2, #6
   288a0:	a812      	add	r0, sp, #72	; 0x48
   288a2:	f7fe fa39 	bl	26d18 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   288a6:	4621      	mov	r1, r4
   288a8:	2206      	movs	r2, #6
   288aa:	a812      	add	r0, sp, #72	; 0x48
   288ac:	f7ff ff53 	bl	28756 <sys_memcpy_swap>
	m[58] = a2->type;
   288b0:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   288b2:	f814 3b01 	ldrb.w	r3, [r4], #1
   288b6:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   288ba:	4621      	mov	r1, r4
   288bc:	2206      	movs	r2, #6
   288be:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   288c2:	f7fe fa29 	bl	26d18 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   288c6:	4621      	mov	r1, r4
   288c8:	2206      	movs	r2, #6
   288ca:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   288ce:	f7ff ff42 	bl	28756 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   288d2:	2210      	movs	r2, #16
   288d4:	4629      	mov	r1, r5
   288d6:	a801      	add	r0, sp, #4
   288d8:	f7ff ff3d 	bl	28756 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   288dc:	463b      	mov	r3, r7
   288de:	2241      	movs	r2, #65	; 0x41
   288e0:	a905      	add	r1, sp, #20
   288e2:	a801      	add	r0, sp, #4
   288e4:	f7ff ff7a 	bl	287dc <bt_smp_aes_cmac>
	if (err) {
   288e8:	4604      	mov	r4, r0
   288ea:	b918      	cbnz	r0, 288f4 <smp_f6+0x94>
	sys_mem_swap(check, 16);
   288ec:	2110      	movs	r1, #16
   288ee:	4638      	mov	r0, r7
   288f0:	f7ff ff3b 	bl	2876a <sys_mem_swap>
}
   288f4:	4620      	mov	r0, r4
   288f6:	b017      	add	sp, #92	; 0x5c
   288f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000288fa <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   288fa:	2301      	movs	r3, #1
   288fc:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   288fe:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28900:	f3bf 8f5b 	dmb	ish
   28904:	e850 2f00 	ldrex	r2, [r0]
   28908:	401a      	ands	r2, r3
   2890a:	e840 2100 	strex	r1, r2, [r0]
   2890e:	2900      	cmp	r1, #0
   28910:	d1f8      	bne.n	28904 <atomic_clear_bit+0xa>
   28912:	f3bf 8f5b 	dmb	ish
}
   28916:	4770      	bx	lr

00028918 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   28918:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2891a:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2891c:	2200      	movs	r2, #0
   2891e:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   28920:	4604      	mov	r4, r0
   28922:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   28924:	460a      	mov	r2, r1
   28926:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2892a:	2106      	movs	r1, #6
   2892c:	f7fe fe56 	bl	275dc <bt_l2cap_send_cb>
   28930:	b128      	cbz	r0, 2893e <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   28932:	4628      	mov	r0, r5
}
   28934:	b003      	add	sp, #12
   28936:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2893a:	f7f4 bb75 	b.w	1d028 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2893e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   28942:	2300      	movs	r3, #0
   28944:	f504 70bc 	add.w	r0, r4, #376	; 0x178
}
   28948:	b003      	add	sp, #12
   2894a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2894e:	f7f8 bf0f 	b.w	21770 <k_work_reschedule>

00028952 <z_log_msg_static_create.constprop.0>:
   28952:	2300      	movs	r3, #0
   28954:	f7ea bc80 	b.w	13258 <z_impl_z_log_msg_static_create>

00028958 <smp_chan_get>:
{
   28958:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   2895a:	2106      	movs	r1, #6
   2895c:	f7fe fe61 	bl	27622 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   28960:	b918      	cbnz	r0, 2896a <smp_chan_get+0x12>
}
   28962:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   28966:	f7f2 baa9 	b.w	1aebc <smp_chan_get.part.0>
   2896a:	38ec      	subs	r0, #236	; 0xec
   2896c:	bd08      	pop	{r3, pc}

0002896e <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2896e:	2301      	movs	r3, #1
   28970:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28972:	f3bf 8f5b 	dmb	ish
   28976:	e850 2f00 	ldrex	r2, [r0]
   2897a:	431a      	orrs	r2, r3
   2897c:	e840 2100 	strex	r1, r2, [r0]
   28980:	2900      	cmp	r1, #0
   28982:	d1f8      	bne.n	28976 <atomic_set_bit+0x8>
   28984:	f3bf 8f5b 	dmb	ish
}
   28988:	4770      	bx	lr

0002898a <smp_keypress_notif>:
{
   2898a:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2898c:	210e      	movs	r1, #14
   2898e:	f7ff ffee 	bl	2896e <atomic_set_bit>
}
   28992:	2000      	movs	r0, #0
   28994:	bd08      	pop	{r3, pc}

00028996 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   28996:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   28998:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2899a:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2899c:	4628      	mov	r0, r5
   2899e:	2104      	movs	r1, #4
   289a0:	f7ff fef2 	bl	28788 <atomic_test_bit>
   289a4:	b970      	cbnz	r0, 289c4 <smp_create_pdu.constprop.0+0x2e>
		timeout = SMP_TIMEOUT;
   289a6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   289aa:	2100      	movs	r1, #0
		timeout = K_NO_WAIT;
   289ac:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   289ae:	4608      	mov	r0, r1
   289b0:	f7fe fe11 	bl	275d6 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   289b4:	4604      	mov	r4, r0
   289b6:	b938      	cbnz	r0, 289c8 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   289b8:	2104      	movs	r1, #4
   289ba:	4628      	mov	r0, r5
   289bc:	f7ff ffd7 	bl	2896e <atomic_set_bit>
}
   289c0:	4620      	mov	r0, r4
   289c2:	bd70      	pop	{r4, r5, r6, pc}
		timeout = K_NO_WAIT;
   289c4:	2200      	movs	r2, #0
   289c6:	e7f0      	b.n	289aa <smp_create_pdu.constprop.0+0x14>
   289c8:	2101      	movs	r1, #1
   289ca:	3008      	adds	r0, #8
   289cc:	f000 fb82 	bl	290d4 <net_buf_simple_add>
	hdr->code = op;
   289d0:	7006      	strb	r6, [r0, #0]
	return buf;
   289d2:	e7f5      	b.n	289c0 <smp_create_pdu.constprop.0+0x2a>

000289d4 <send_pairing_rsp>:
{
   289d4:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   289d6:	2102      	movs	r1, #2
{
   289d8:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   289da:	f7ff ffdc 	bl	28996 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   289de:	4604      	mov	r4, r0
   289e0:	b178      	cbz	r0, 28a02 <send_pairing_rsp+0x2e>
   289e2:	2106      	movs	r1, #6
   289e4:	3008      	adds	r0, #8
   289e6:	f000 fb75 	bl	290d4 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   289ea:	2206      	movs	r2, #6
   289ec:	f105 0111 	add.w	r1, r5, #17
   289f0:	f7fe f992 	bl	26d18 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   289f4:	4628      	mov	r0, r5
   289f6:	2200      	movs	r2, #0
   289f8:	4621      	mov	r1, r4
   289fa:	f7ff ff8d 	bl	28918 <smp_send.constprop.0>
	return 0;
   289fe:	2000      	movs	r0, #0
}
   28a00:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   28a02:	2008      	movs	r0, #8
   28a04:	e7fc      	b.n	28a00 <send_pairing_rsp+0x2c>

00028a06 <smp_send_pairing_random>:
{
   28a06:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   28a08:	2104      	movs	r1, #4
{
   28a0a:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   28a0c:	f7ff ffc3 	bl	28996 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   28a10:	4604      	mov	r4, r0
   28a12:	b178      	cbz	r0, 28a34 <smp_send_pairing_random+0x2e>
   28a14:	2110      	movs	r1, #16
   28a16:	3008      	adds	r0, #8
   28a18:	f000 fb5c 	bl	290d4 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   28a1c:	2210      	movs	r2, #16
   28a1e:	f105 0127 	add.w	r1, r5, #39	; 0x27
   28a22:	f7fe f979 	bl	26d18 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   28a26:	4628      	mov	r0, r5
   28a28:	2200      	movs	r2, #0
   28a2a:	4621      	mov	r1, r4
   28a2c:	f7ff ff74 	bl	28918 <smp_send.constprop.0>
	return 0;
   28a30:	2000      	movs	r0, #0
}
   28a32:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   28a34:	2008      	movs	r0, #8
   28a36:	e7fc      	b.n	28a32 <smp_send_pairing_random+0x2c>

00028a38 <smp_dhkey_check>:
{
   28a38:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   28a3a:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   28a3e:	78db      	ldrb	r3, [r3, #3]
   28a40:	2b01      	cmp	r3, #1
{
   28a42:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   28a44:	d114      	bne.n	28a70 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   28a46:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   28a48:	1d05      	adds	r5, r0, #4
   28a4a:	2110      	movs	r1, #16
   28a4c:	4628      	mov	r0, r5
   28a4e:	f7ff ff54 	bl	288fa <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   28a52:	4631      	mov	r1, r6
   28a54:	2210      	movs	r2, #16
   28a56:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   28a5a:	f7fe f95d 	bl	26d18 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   28a5e:	2107      	movs	r1, #7
   28a60:	4628      	mov	r0, r5
   28a62:	f7ff fe91 	bl	28788 <atomic_test_bit>
   28a66:	b128      	cbz	r0, 28a74 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   28a68:	2109      	movs	r1, #9
   28a6a:	4628      	mov	r0, r5
   28a6c:	f7ff ff7f 	bl	2896e <atomic_set_bit>
}
   28a70:	2000      	movs	r0, #0
   28a72:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   28a74:	210a      	movs	r1, #10
   28a76:	4628      	mov	r0, r5
   28a78:	f7ff fe86 	bl	28788 <atomic_test_bit>
   28a7c:	2800      	cmp	r0, #0
   28a7e:	d1f3      	bne.n	28a68 <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
   28a80:	4620      	mov	r0, r4
}
   28a82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   28a86:	f7f2 bca3 	b.w	1b3d0 <compute_and_check_and_send_periph_dhcheck>

00028a8a <smp_security_request>:
   28a8a:	2007      	movs	r0, #7
   28a8c:	4770      	bx	lr

00028a8e <atomic_test_and_clear_bit>:
{
   28a8e:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   28a90:	2301      	movs	r3, #1
   28a92:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28a96:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28a98:	f3bf 8f5b 	dmb	ish
   28a9c:	e850 3f00 	ldrex	r3, [r0]
   28aa0:	ea03 0c02 	and.w	ip, r3, r2
   28aa4:	e840 ce00 	strex	lr, ip, [r0]
   28aa8:	f1be 0f00 	cmp.w	lr, #0
   28aac:	d1f6      	bne.n	28a9c <atomic_test_and_clear_bit+0xe>
   28aae:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   28ab2:	420b      	tst	r3, r1
}
   28ab4:	bf14      	ite	ne
   28ab6:	2001      	movne	r0, #1
   28ab8:	2000      	moveq	r0, #0
   28aba:	f85d fb04 	ldr.w	pc, [sp], #4

00028abe <smp_reset>:
{
   28abe:	b538      	push	{r3, r4, r5, lr}
   28ac0:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   28ac2:	1d03      	adds	r3, r0, #4
   28ac4:	2500      	movs	r5, #0
   28ac6:	f3bf 8f5b 	dmb	ish
   28aca:	e853 2f00 	ldrex	r2, [r3]
   28ace:	e843 5100 	strex	r1, r5, [r3]
   28ad2:	2900      	cmp	r1, #0
   28ad4:	d1f9      	bne.n	28aca <smp_reset+0xc>
   28ad6:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   28ada:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   28ade:	f001 fb1a 	bl	2a116 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   28ae2:	7225      	strb	r5, [r4, #8]
   28ae4:	f3bf 8f5b 	dmb	ish
   28ae8:	e854 3f00 	ldrex	r3, [r4]
   28aec:	e844 5200 	strex	r2, r5, [r4]
   28af0:	2a00      	cmp	r2, #0
   28af2:	d1f9      	bne.n	28ae8 <smp_reset+0x2a>
   28af4:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   28af8:	4620      	mov	r0, r4
   28afa:	2101      	movs	r1, #1
}
   28afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   28b00:	f7ff bf35 	b.w	2896e <atomic_set_bit>

00028b04 <smp_c1>:
{
   28b04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28b08:	b089      	sub	sp, #36	; 0x24
   28b0a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   28b0e:	4699      	mov	r9, r3
	p1[0] = ia->type;
   28b10:	783b      	ldrb	r3, [r7, #0]
{
   28b12:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   28b14:	f88d 3000 	strb.w	r3, [sp]
{
   28b18:	460c      	mov	r4, r1
	p1[1] = ra->type;
   28b1a:	f898 3000 	ldrb.w	r3, [r8]
   28b1e:	f88d 3001 	strb.w	r3, [sp, #1]
{
   28b22:	4611      	mov	r1, r2
   28b24:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   28b26:	2207      	movs	r2, #7
   28b28:	f10d 0002 	add.w	r0, sp, #2
   28b2c:	f7fe f8f4 	bl	26d18 <memcpy>
	memcpy(p1 + 9, pres, 7);
   28b30:	2207      	movs	r2, #7
   28b32:	4649      	mov	r1, r9
   28b34:	f10d 0009 	add.w	r0, sp, #9
   28b38:	f7fe f8ee 	bl	26d18 <memcpy>
	while (len--) {
   28b3c:	f104 0010 	add.w	r0, r4, #16
   28b40:	4629      	mov	r1, r5
   28b42:	466a      	mov	r2, sp
   28b44:	42a0      	cmp	r0, r4
   28b46:	d127      	bne.n	28b98 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   28b48:	462a      	mov	r2, r5
   28b4a:	4629      	mov	r1, r5
   28b4c:	4630      	mov	r0, r6
   28b4e:	f000 fe9f 	bl	29890 <bt_encrypt_le>
	if (err) {
   28b52:	4604      	mov	r4, r0
   28b54:	b9e0      	cbnz	r0, 28b90 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   28b56:	2206      	movs	r2, #6
   28b58:	f108 0101 	add.w	r1, r8, #1
   28b5c:	a804      	add	r0, sp, #16
   28b5e:	f7fe f8db 	bl	26d18 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   28b62:	2206      	movs	r2, #6
   28b64:	1c79      	adds	r1, r7, #1
   28b66:	f10d 0016 	add.w	r0, sp, #22
   28b6a:	f7fe f8d5 	bl	26d18 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   28b6e:	2204      	movs	r2, #4
   28b70:	4621      	mov	r1, r4
   28b72:	a807      	add	r0, sp, #28
   28b74:	f7fe f8db 	bl	26d2e <memset>
	while (len--) {
   28b78:	f105 0010 	add.w	r0, r5, #16
   28b7c:	462a      	mov	r2, r5
   28b7e:	ab04      	add	r3, sp, #16
   28b80:	4282      	cmp	r2, r0
   28b82:	d112      	bne.n	28baa <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   28b84:	462a      	mov	r2, r5
   28b86:	4629      	mov	r1, r5
   28b88:	4630      	mov	r0, r6
   28b8a:	f000 fe81 	bl	29890 <bt_encrypt_le>
   28b8e:	4604      	mov	r4, r0
}
   28b90:	4620      	mov	r0, r4
   28b92:	b009      	add	sp, #36	; 0x24
   28b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   28b98:	f814 3b01 	ldrb.w	r3, [r4], #1
   28b9c:	f812 cb01 	ldrb.w	ip, [r2], #1
   28ba0:	ea83 030c 	eor.w	r3, r3, ip
   28ba4:	f801 3b01 	strb.w	r3, [r1], #1
   28ba8:	e7cc      	b.n	28b44 <smp_c1+0x40>
   28baa:	f812 1b01 	ldrb.w	r1, [r2], #1
   28bae:	f813 4b01 	ldrb.w	r4, [r3], #1
   28bb2:	4061      	eors	r1, r4
   28bb4:	f802 1c01 	strb.w	r1, [r2, #-1]
   28bb8:	e7e2      	b.n	28b80 <smp_c1+0x7c>

00028bba <legacy_pairing_confirm>:
{
   28bba:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   28bbc:	1d07      	adds	r7, r0, #4
{
   28bbe:	b085      	sub	sp, #20
   28bc0:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   28bc2:	210a      	movs	r1, #10
   28bc4:	4638      	mov	r0, r7
   28bc6:	f7ff fddf 	bl	28788 <atomic_test_bit>
   28bca:	bb88      	cbnz	r0, 28c30 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   28bcc:	2104      	movs	r1, #4
   28bce:	4628      	mov	r0, r5
   28bd0:	f7ff fecd 	bl	2896e <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   28bd4:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   28bd6:	f8d5 40ec 	ldr.w	r4, [r5, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   28bda:	f7ff fedc 	bl	28996 <smp_create_pdu.constprop.0>
	if (!buf) {
   28bde:	4606      	mov	r6, r0
   28be0:	b1c0      	cbz	r0, 28c14 <legacy_pairing_confirm+0x5a>
   28be2:	2110      	movs	r1, #16
   28be4:	3008      	adds	r0, #8
   28be6:	f000 fa75 	bl	290d4 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   28bea:	f104 0396 	add.w	r3, r4, #150	; 0x96
   28bee:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   28bf0:	9002      	str	r0, [sp, #8]
   28bf2:	9301      	str	r3, [sp, #4]
   28bf4:	9400      	str	r4, [sp, #0]
   28bf6:	f105 0310 	add.w	r3, r5, #16
   28bfa:	f105 0209 	add.w	r2, r5, #9
   28bfe:	f105 0127 	add.w	r1, r5, #39	; 0x27
   28c02:	f105 0047 	add.w	r0, r5, #71	; 0x47
   28c06:	f7ff ff7d 	bl	28b04 <smp_c1>
   28c0a:	4604      	mov	r4, r0
   28c0c:	b120      	cbz	r0, 28c18 <legacy_pairing_confirm+0x5e>
		net_buf_unref(buf);
   28c0e:	4630      	mov	r0, r6
   28c10:	f7f4 fa0a 	bl	1d028 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   28c14:	2008      	movs	r0, #8
   28c16:	e009      	b.n	28c2c <legacy_pairing_confirm+0x72>
	smp_send(smp, buf, NULL, NULL);
   28c18:	4602      	mov	r2, r0
   28c1a:	4631      	mov	r1, r6
   28c1c:	4628      	mov	r0, r5
   28c1e:	f7ff fe7b 	bl	28918 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   28c22:	4621      	mov	r1, r4
   28c24:	4638      	mov	r0, r7
   28c26:	f7ff fe68 	bl	288fa <atomic_clear_bit>
	return 0;
   28c2a:	2000      	movs	r0, #0
}
   28c2c:	b005      	add	sp, #20
   28c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   28c30:	2100      	movs	r1, #0
   28c32:	4638      	mov	r0, r7
   28c34:	f7ff fe9b 	bl	2896e <atomic_set_bit>
   28c38:	e7f7      	b.n	28c2a <legacy_pairing_confirm+0x70>

00028c3a <bt_smp_request_ltk>:
{
   28c3a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   28c3e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   28c42:	e9cd 2300 	strd	r2, r3, [sp]
   28c46:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   28c48:	f7ff fe86 	bl	28958 <smp_chan_get>
	if (!smp) {
   28c4c:	4605      	mov	r5, r0
   28c4e:	2800      	cmp	r0, #0
   28c50:	f000 8090 	beq.w	28d74 <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   28c54:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   28c58:	1d07      	adds	r7, r0, #4
	if (ediv == 0U && rand == 0U &&
   28c5a:	f1b9 0f00 	cmp.w	r9, #0
   28c5e:	d12a      	bne.n	28cb6 <bt_smp_request_ltk+0x7c>
   28c60:	e9dd 2300 	ldrd	r2, r3, [sp]
   28c64:	4313      	orrs	r3, r2
   28c66:	d126      	bne.n	28cb6 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   28c68:	2103      	movs	r1, #3
   28c6a:	4638      	mov	r0, r7
   28c6c:	f7ff fd8c 	bl	28788 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   28c70:	b308      	cbz	r0, 28cb6 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   28c72:	2101      	movs	r1, #1
   28c74:	4638      	mov	r0, r7
   28c76:	f7ff fd87 	bl	28788 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   28c7a:	4606      	mov	r6, r0
   28c7c:	b1d8      	cbz	r0, 28cb6 <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   28c7e:	7d2c      	ldrb	r4, [r5, #20]
   28c80:	7b6b      	ldrb	r3, [r5, #13]
   28c82:	429c      	cmp	r4, r3
   28c84:	bf28      	it	cs
   28c86:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   28c88:	4622      	mov	r2, r4
   28c8a:	f105 0147 	add.w	r1, r5, #71	; 0x47
   28c8e:	4640      	mov	r0, r8
   28c90:	f7fe f842 	bl	26d18 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   28c94:	2c0f      	cmp	r4, #15
   28c96:	d806      	bhi.n	28ca6 <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   28c98:	f1c4 0210 	rsb	r2, r4, #16
   28c9c:	4649      	mov	r1, r9
   28c9e:	eb08 0004 	add.w	r0, r8, r4
   28ca2:	f7fe f844 	bl	26d2e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   28ca6:	2101      	movs	r1, #1
   28ca8:	4638      	mov	r0, r7
   28caa:	f7ff fe60 	bl	2896e <atomic_set_bit>
}
   28cae:	4630      	mov	r0, r6
   28cb0:	b003      	add	sp, #12
   28cb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   28cb6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   28cba:	b983      	cbnz	r3, 28cde <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   28cbc:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   28cc0:	7a21      	ldrb	r1, [r4, #8]
   28cc2:	4632      	mov	r2, r6
   28cc4:	2020      	movs	r0, #32
   28cc6:	f7f3 ff1b 	bl	1cb00 <bt_keys_find>
   28cca:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   28cce:	b930      	cbnz	r0, 28cde <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   28cd0:	7a21      	ldrb	r1, [r4, #8]
   28cd2:	4632      	mov	r2, r6
   28cd4:	2001      	movs	r0, #1
   28cd6:	f7f3 ff13 	bl	1cb00 <bt_keys_find>
   28cda:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   28cde:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   28ce2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   28ce6:	b9ee      	cbnz	r6, 28d24 <bt_smp_request_ltk+0xea>
   28ce8:	e9dd 2300 	ldrd	r2, r3, [sp]
   28cec:	4313      	orrs	r3, r2
   28cee:	d119      	bne.n	28d24 <bt_smp_request_ltk+0xea>
   28cf0:	b388      	cbz	r0, 28d56 <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   28cf2:	89c3      	ldrh	r3, [r0, #14]
   28cf4:	069a      	lsls	r2, r3, #26
   28cf6:	d516      	bpl.n	28d26 <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   28cf8:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   28cfa:	f100 011a 	add.w	r1, r0, #26
   28cfe:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   28d00:	4640      	mov	r0, r8
   28d02:	f7fe f809 	bl	26d18 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   28d06:	2c0f      	cmp	r4, #15
   28d08:	d806      	bhi.n	28d18 <bt_smp_request_ltk+0xde>
			(void)memset(ltk + enc_size, 0,
   28d0a:	f1c4 0210 	rsb	r2, r4, #16
   28d0e:	4631      	mov	r1, r6
   28d10:	eb08 0004 	add.w	r0, r8, r4
   28d14:	f7fe f80b 	bl	26d2e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   28d18:	2101      	movs	r1, #1
   28d1a:	4638      	mov	r0, r7
   28d1c:	f7ff fe27 	bl	2896e <atomic_set_bit>
		return true;
   28d20:	2601      	movs	r6, #1
   28d22:	e7c4      	b.n	28cae <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   28d24:	b1b8      	cbz	r0, 28d56 <bt_smp_request_ltk+0x11c>
   28d26:	89c3      	ldrh	r3, [r0, #14]
   28d28:	07db      	lsls	r3, r3, #31
   28d2a:	d514      	bpl.n	28d56 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   28d2c:	2208      	movs	r2, #8
   28d2e:	4669      	mov	r1, sp
   28d30:	3068      	adds	r0, #104	; 0x68
   28d32:	f7fd ffc8 	bl	26cc6 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   28d36:	b970      	cbnz	r0, 28d56 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   28d38:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   28d3c:	2202      	movs	r2, #2
   28d3e:	a90a      	add	r1, sp, #40	; 0x28
   28d40:	3070      	adds	r0, #112	; 0x70
   28d42:	f7fd ffc0 	bl	26cc6 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   28d46:	4606      	mov	r6, r0
   28d48:	b928      	cbnz	r0, 28d56 <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   28d4a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   28d4e:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   28d50:	3172      	adds	r1, #114	; 0x72
   28d52:	4622      	mov	r2, r4
   28d54:	e7d4      	b.n	28d00 <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   28d56:	210f      	movs	r1, #15
   28d58:	4638      	mov	r0, r7
   28d5a:	f7ff fd15 	bl	28788 <atomic_test_bit>
   28d5e:	b120      	cbz	r0, 28d6a <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   28d60:	2202      	movs	r2, #2
   28d62:	2106      	movs	r1, #6
   28d64:	4620      	mov	r0, r4
   28d66:	f7ee ff5b 	bl	17c20 <bt_conn_security_changed>
	smp_reset(smp);
   28d6a:	4628      	mov	r0, r5
   28d6c:	f7ff fea7 	bl	28abe <smp_reset>
	return false;
   28d70:	2600      	movs	r6, #0
   28d72:	e79c      	b.n	28cae <bt_smp_request_ltk+0x74>
		return false;
   28d74:	4606      	mov	r6, r0
   28d76:	e79a      	b.n	28cae <bt_smp_request_ltk+0x74>

00028d78 <bt_smp_irk_get>:
{
   28d78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   28d7a:	2500      	movs	r5, #0
{
   28d7c:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   28d7e:	2210      	movs	r2, #16
   28d80:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   28d82:	e9cd 5500 	strd	r5, r5, [sp]
   28d86:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   28d8a:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   28d8c:	f7fd ff9b 	bl	26cc6 <memcmp>
   28d90:	b180      	cbz	r0, 28db4 <bt_smp_irk_get+0x3c>
	dst[0] = val;
   28d92:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   28d94:	220c      	movs	r2, #12
   28d96:	4629      	mov	r1, r5
   28d98:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   28d9a:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   28d9c:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   28d9e:	70e5      	strb	r5, [r4, #3]
   28da0:	1d20      	adds	r0, r4, #4
   28da2:	f7fd ffc4 	bl	26d2e <memset>
	err = bt_encrypt_le(key, res, res);
   28da6:	4622      	mov	r2, r4
   28da8:	4621      	mov	r1, r4
   28daa:	4630      	mov	r0, r6
   28dac:	f000 fd70 	bl	29890 <bt_encrypt_le>
}
   28db0:	b004      	add	sp, #16
   28db2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   28db4:	f06f 0015 	mvn.w	r0, #21
   28db8:	e7fa      	b.n	28db0 <bt_smp_irk_get+0x38>

00028dba <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   28dba:	1d03      	adds	r3, r0, #4
{
   28dbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   28dbe:	4605      	mov	r5, r0
   28dc0:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   28dc2:	4618      	mov	r0, r3
   28dc4:	2103      	movs	r1, #3
   28dc6:	f7ff fcdf 	bl	28788 <atomic_test_bit>
   28dca:	b1f0      	cbz	r0, 28e0a <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   28dcc:	4631      	mov	r1, r6
   28dce:	4628      	mov	r0, r5
   28dd0:	f7f3 f8de 	bl	1bf90 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   28dd4:	2105      	movs	r1, #5
   28dd6:	4628      	mov	r0, r5
   28dd8:	f7ff fddd 	bl	28996 <smp_create_pdu.constprop.0>
	if (!buf) {
   28ddc:	4604      	mov	r4, r0
   28dde:	b308      	cbz	r0, 28e24 <smp_error+0x6a>
   28de0:	2101      	movs	r1, #1
   28de2:	3008      	adds	r0, #8
   28de4:	f000 f976 	bl	290d4 <net_buf_simple_add>
	rsp->reason = reason;
   28de8:	7006      	strb	r6, [r0, #0]
   28dea:	2600      	movs	r6, #0
   28dec:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
   28df0:	9600      	str	r6, [sp, #0]
   28df2:	4633      	mov	r3, r6
   28df4:	4622      	mov	r2, r4
   28df6:	2106      	movs	r1, #6
   28df8:	f7fe fbf0 	bl	275dc <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   28dfc:	b118      	cbz	r0, 28e06 <smp_error+0x4c>
		net_buf_unref(buf);
   28dfe:	4620      	mov	r0, r4
   28e00:	f7f4 f912 	bl	1d028 <net_buf_unref>
	return 0;
   28e04:	4630      	mov	r0, r6
}
   28e06:	b002      	add	sp, #8
   28e08:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   28e0a:	2101      	movs	r1, #1
   28e0c:	4618      	mov	r0, r3
   28e0e:	f7ff fcbb 	bl	28788 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   28e12:	2800      	cmp	r0, #0
   28e14:	d1da      	bne.n	28dcc <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   28e16:	210f      	movs	r1, #15
   28e18:	4618      	mov	r0, r3
   28e1a:	f7ff fcb5 	bl	28788 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   28e1e:	2800      	cmp	r0, #0
   28e20:	d1d4      	bne.n	28dcc <smp_error+0x12>
   28e22:	e7d7      	b.n	28dd4 <smp_error+0x1a>
		return -ENOBUFS;
   28e24:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28e28:	e7ed      	b.n	28e06 <smp_error+0x4c>

00028e2a <bt_smp_dhkey_ready>:
{
   28e2a:	b570      	push	{r4, r5, r6, lr}
   28e2c:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   28e2e:	2008      	movs	r0, #8
   28e30:	f7f1 ff5c 	bl	1acec <smp_find>
	if (smp) {
   28e34:	4604      	mov	r4, r0
   28e36:	b1b8      	cbz	r0, 28e68 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   28e38:	1d05      	adds	r5, r0, #4
   28e3a:	2108      	movs	r1, #8
   28e3c:	4628      	mov	r0, r5
   28e3e:	f7ff fd5c 	bl	288fa <atomic_clear_bit>
	if (!dhkey) {
   28e42:	b38e      	cbz	r6, 28ea8 <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   28e44:	2107      	movs	r1, #7
   28e46:	f7ff fd58 	bl	288fa <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   28e4a:	4631      	mov	r1, r6
   28e4c:	2220      	movs	r2, #32
   28e4e:	f104 0097 	add.w	r0, r4, #151	; 0x97
   28e52:	f7fd ff61 	bl	26d18 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   28e56:	210a      	movs	r1, #10
   28e58:	4628      	mov	r0, r5
   28e5a:	f7ff fc95 	bl	28788 <atomic_test_bit>
   28e5e:	b168      	cbz	r0, 28e7c <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   28e60:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   28e62:	4628      	mov	r0, r5
   28e64:	f7ff fd83 	bl	2896e <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   28e68:	2007      	movs	r0, #7
   28e6a:	f7f1 ff3f 	bl	1acec <smp_find>
		if (smp) {
   28e6e:	4604      	mov	r4, r0
   28e70:	b118      	cbz	r0, 28e7a <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   28e72:	f7f2 f853 	bl	1af1c <smp_dhkey_generate>
			if (err) {
   28e76:	4601      	mov	r1, r0
   28e78:	b990      	cbnz	r0, 28ea0 <bt_smp_dhkey_ready+0x76>
}
   28e7a:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   28e7c:	2110      	movs	r1, #16
   28e7e:	4628      	mov	r0, r5
   28e80:	f7ff fc82 	bl	28788 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   28e84:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   28e86:	2800      	cmp	r0, #0
   28e88:	d1eb      	bne.n	28e62 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   28e8a:	4628      	mov	r0, r5
   28e8c:	f7ff fc7c 	bl	28788 <atomic_test_bit>
   28e90:	2800      	cmp	r0, #0
   28e92:	d0e9      	beq.n	28e68 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   28e94:	4620      	mov	r0, r4
   28e96:	f7f2 fa9b 	bl	1b3d0 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   28e9a:	4601      	mov	r1, r0
   28e9c:	2800      	cmp	r0, #0
   28e9e:	d0e3      	beq.n	28e68 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   28ea0:	4620      	mov	r0, r4
   28ea2:	f7ff ff8a 	bl	28dba <smp_error>
   28ea6:	e7df      	b.n	28e68 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   28ea8:	210b      	movs	r1, #11
   28eaa:	e7f9      	b.n	28ea0 <bt_smp_dhkey_ready+0x76>

00028eac <smp_check_complete>:
{
   28eac:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   28eae:	7883      	ldrb	r3, [r0, #2]
   28eb0:	2b01      	cmp	r3, #1
{
   28eb2:	460c      	mov	r4, r1
	if (conn->type == BT_CONN_TYPE_LE) {
   28eb4:	d110      	bne.n	28ed8 <smp_check_complete+0x2c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   28eb6:	2106      	movs	r1, #6
   28eb8:	f7fe fba9 	bl	2760e <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   28ebc:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   28ec0:	ea23 0104 	bic.w	r1, r3, r4
   28ec4:	f800 1c04 	strb.w	r1, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   28ec8:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   28ecc:	b921      	cbnz	r1, 28ed8 <smp_check_complete+0x2c>
}
   28ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   28ed2:	38ec      	subs	r0, #236	; 0xec
   28ed4:	f7f3 b85c 	b.w	1bf90 <smp_pairing_complete>
}
   28ed8:	bd10      	pop	{r4, pc}

00028eda <smp_sign_info_sent>:
	if (!err) {
   28eda:	b912      	cbnz	r2, 28ee2 <smp_sign_info_sent+0x8>
		smp_check_complete(conn, BT_SMP_DIST_SIGN);
   28edc:	2104      	movs	r1, #4
   28ede:	f7ff bfe5 	b.w	28eac <smp_check_complete>
}
   28ee2:	4770      	bx	lr

00028ee4 <smp_id_sent>:
	if (!err) {
   28ee4:	b912      	cbnz	r2, 28eec <smp_id_sent+0x8>
		smp_check_complete(conn, BT_SMP_DIST_ID_KEY);
   28ee6:	2102      	movs	r1, #2
   28ee8:	f7ff bfe0 	b.w	28eac <smp_check_complete>
}
   28eec:	4770      	bx	lr

00028eee <smp_ident_sent>:
	if (!err) {
   28eee:	b912      	cbnz	r2, 28ef6 <smp_ident_sent+0x8>
		smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
   28ef0:	2101      	movs	r1, #1
   28ef2:	f7ff bfdb 	b.w	28eac <smp_check_complete>
}
   28ef6:	4770      	bx	lr

00028ef8 <bt_smp_disconnected>:
{
   28ef8:	b570      	push	{r4, r5, r6, lr}
   28efa:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   28efc:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   28f00:	f850 3b8c 	ldr.w	r3, [r0], #140
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   28f04:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   28f06:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   28f0a:	f001 f904 	bl	2a116 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   28f0e:	2103      	movs	r1, #3
   28f10:	4620      	mov	r0, r4
   28f12:	f7ff fc39 	bl	28788 <atomic_test_bit>
   28f16:	b1a0      	cbz	r0, 28f42 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   28f18:	2108      	movs	r1, #8
   28f1a:	4630      	mov	r0, r6
   28f1c:	f7f3 f838 	bl	1bf90 <smp_pairing_complete>
	if (keys) {
   28f20:	b13d      	cbz	r5, 28f32 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   28f22:	89eb      	ldrh	r3, [r5, #14]
   28f24:	b113      	cbz	r3, 28f2c <bt_smp_disconnected+0x34>
   28f26:	7b6b      	ldrb	r3, [r5, #13]
   28f28:	079b      	lsls	r3, r3, #30
   28f2a:	d502      	bpl.n	28f32 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   28f2c:	4628      	mov	r0, r5
   28f2e:	f7f3 fe45 	bl	1cbbc <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   28f32:	4630      	mov	r0, r6
   28f34:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
}
   28f38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   28f3c:	2100      	movs	r1, #0
   28f3e:	f7fd bef6 	b.w	26d2e <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   28f42:	2101      	movs	r1, #1
   28f44:	4620      	mov	r0, r4
   28f46:	f7ff fc1f 	bl	28788 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   28f4a:	2800      	cmp	r0, #0
   28f4c:	d1e4      	bne.n	28f18 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   28f4e:	210f      	movs	r1, #15
   28f50:	4620      	mov	r0, r4
   28f52:	f7ff fc19 	bl	28788 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   28f56:	2800      	cmp	r0, #0
   28f58:	d1de      	bne.n	28f18 <bt_smp_disconnected+0x20>
   28f5a:	e7e1      	b.n	28f20 <bt_smp_disconnected+0x28>

00028f5c <id_add>:
	bt_id_add(keys);
   28f5c:	f7ed bf22 	b.w	16da4 <bt_id_add>

00028f60 <bt_keys_get_type>:
{
   28f60:	b570      	push	{r4, r5, r6, lr}
   28f62:	4604      	mov	r4, r0
   28f64:	460d      	mov	r5, r1
   28f66:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   28f68:	f7f3 fdca 	bl	1cb00 <bt_keys_find>
	if (keys) {
   28f6c:	b938      	cbnz	r0, 28f7e <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   28f6e:	4631      	mov	r1, r6
   28f70:	4628      	mov	r0, r5
   28f72:	f7f3 fd4f 	bl	1ca14 <bt_keys_get_addr>
	if (!keys) {
   28f76:	b110      	cbz	r0, 28f7e <bt_keys_get_type+0x1e>
	keys->keys |= type;
   28f78:	89c3      	ldrh	r3, [r0, #14]
   28f7a:	431c      	orrs	r4, r3
   28f7c:	81c4      	strh	r4, [r0, #14]
}
   28f7e:	bd70      	pop	{r4, r5, r6, pc}

00028f80 <bt_keys_add_type>:
	keys->keys |= type;
   28f80:	89c3      	ldrh	r3, [r0, #14]
   28f82:	4319      	orrs	r1, r3
   28f84:	81c1      	strh	r1, [r0, #14]
}
   28f86:	4770      	bx	lr

00028f88 <fixed_data_unref>:
}
   28f88:	4770      	bx	lr

00028f8a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   28f8a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   28f8c:	6849      	ldr	r1, [r1, #4]
   28f8e:	6809      	ldr	r1, [r1, #0]
   28f90:	f7f3 bfb6 	b.w	1cf00 <net_buf_alloc_len>

00028f94 <net_buf_get>:
{
   28f94:	b570      	push	{r4, r5, r6, lr}
   28f96:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   28f98:	f7f8 f98c 	bl	212b4 <z_impl_k_queue_get>
	if (!buf) {
   28f9c:	4605      	mov	r5, r0
   28f9e:	b128      	cbz	r0, 28fac <net_buf_get+0x18>
   28fa0:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   28fa2:	7963      	ldrb	r3, [r4, #5]
   28fa4:	f013 0301 	ands.w	r3, r3, #1
   28fa8:	d102      	bne.n	28fb0 <net_buf_get+0x1c>
	frag->frags = NULL;
   28faa:	6023      	str	r3, [r4, #0]
}
   28fac:	4628      	mov	r0, r5
   28fae:	bd70      	pop	{r4, r5, r6, pc}
   28fb0:	2300      	movs	r3, #0
   28fb2:	2200      	movs	r2, #0
   28fb4:	4630      	mov	r0, r6
   28fb6:	f7f8 f97d 	bl	212b4 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   28fba:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   28fbc:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   28fbe:	f023 0301 	bic.w	r3, r3, #1
   28fc2:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   28fc4:	4604      	mov	r4, r0
   28fc6:	e7ec      	b.n	28fa2 <net_buf_get+0xe>

00028fc8 <net_buf_simple_init_with_data>:
	buf->size  = size;
   28fc8:	b292      	uxth	r2, r2
	buf->__buf = data;
   28fca:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   28fcc:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   28fce:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   28fd0:	8082      	strh	r2, [r0, #4]
}
   28fd2:	4770      	bx	lr

00028fd4 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   28fd4:	6883      	ldr	r3, [r0, #8]
   28fd6:	440b      	add	r3, r1
   28fd8:	6003      	str	r3, [r0, #0]
}
   28fda:	4770      	bx	lr

00028fdc <net_buf_slist_put>:
{
   28fdc:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   28fde:	460b      	mov	r3, r1
   28fe0:	681c      	ldr	r4, [r3, #0]
   28fe2:	b98c      	cbnz	r4, 29008 <net_buf_slist_put+0x2c>
	__asm__ volatile(
   28fe4:	f04f 0240 	mov.w	r2, #64	; 0x40
   28fe8:	f3ef 8411 	mrs	r4, BASEPRI
   28fec:	f382 8812 	msr	BASEPRI_MAX, r2
   28ff0:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(slist, snode)
   28ff4:	b119      	cbz	r1, 28ffe <net_buf_slist_put+0x22>
	return list->tail;
   28ff6:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   28ff8:	b962      	cbnz	r2, 29014 <net_buf_slist_put+0x38>
	list->head = node;
   28ffa:	6001      	str	r1, [r0, #0]
	list->tail = node;
   28ffc:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   28ffe:	f384 8811 	msr	BASEPRI, r4
   29002:	f3bf 8f6f 	isb	sy
}
   29006:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   29008:	795a      	ldrb	r2, [r3, #5]
   2900a:	f042 0201 	orr.w	r2, r2, #1
   2900e:	715a      	strb	r2, [r3, #5]
   29010:	4623      	mov	r3, r4
   29012:	e7e5      	b.n	28fe0 <net_buf_slist_put+0x4>
	parent->next = child;
   29014:	6011      	str	r1, [r2, #0]
}
   29016:	e7f1      	b.n	28ffc <net_buf_slist_put+0x20>

00029018 <net_buf_slist_get>:
{
   29018:	b5f0      	push	{r4, r5, r6, r7, lr}
   2901a:	4603      	mov	r3, r0
	__asm__ volatile(
   2901c:	f04f 0240 	mov.w	r2, #64	; 0x40
   29020:	f3ef 8611 	mrs	r6, BASEPRI
   29024:	f382 8812 	msr	BASEPRI_MAX, r2
   29028:	f3bf 8f6f 	isb	sy
	return list->head;
   2902c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2902e:	b158      	cbz	r0, 29048 <net_buf_slist_get+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29030:	6859      	ldr	r1, [r3, #4]
	return node->next;
   29032:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   29034:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29036:	4288      	cmp	r0, r1
	list->tail = node;
   29038:	bf08      	it	eq
   2903a:	605a      	streq	r2, [r3, #4]
   2903c:	4602      	mov	r2, r0
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2903e:	7951      	ldrb	r1, [r2, #5]
   29040:	f011 0401 	ands.w	r4, r1, #1
   29044:	d105      	bne.n	29052 <net_buf_slist_get+0x3a>
		frag->frags = NULL;
   29046:	6014      	str	r4, [r2, #0]
	__asm__ volatile(
   29048:	f386 8811 	msr	BASEPRI, r6
   2904c:	f3bf 8f6f 	isb	sy
}
   29050:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return list->head;
   29052:	681c      	ldr	r4, [r3, #0]
Z_GENLIST_GET(slist, snode)
   29054:	b12c      	cbz	r4, 29062 <net_buf_slist_get+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29056:	685f      	ldr	r7, [r3, #4]
	return node->next;
   29058:	6825      	ldr	r5, [r4, #0]
	list->head = node;
   2905a:	601d      	str	r5, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2905c:	42bc      	cmp	r4, r7
	list->tail = node;
   2905e:	bf08      	it	eq
   29060:	605d      	streq	r5, [r3, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   29062:	f021 0101 	bic.w	r1, r1, #1
			frag->frags = (void *)sys_slist_get(list);
   29066:	6014      	str	r4, [r2, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   29068:	7151      	strb	r1, [r2, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2906a:	4622      	mov	r2, r4
   2906c:	e7e7      	b.n	2903e <net_buf_slist_get+0x26>

0002906e <net_buf_put>:
{
   2906e:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   29070:	460a      	mov	r2, r1
   29072:	6814      	ldr	r4, [r2, #0]
   29074:	b914      	cbnz	r4, 2907c <net_buf_put+0xe>
}
   29076:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   29078:	f000 bf3f 	b.w	29efa <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   2907c:	7953      	ldrb	r3, [r2, #5]
   2907e:	f043 0301 	orr.w	r3, r3, #1
   29082:	7153      	strb	r3, [r2, #5]
   29084:	4622      	mov	r2, r4
   29086:	e7f4      	b.n	29072 <net_buf_put+0x4>

00029088 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   29088:	7902      	ldrb	r2, [r0, #4]
   2908a:	3201      	adds	r2, #1
   2908c:	7102      	strb	r2, [r0, #4]
	return buf;
}
   2908e:	4770      	bx	lr

00029090 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   29090:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   29092:	4618      	mov	r0, r3
   29094:	681b      	ldr	r3, [r3, #0]
   29096:	2b00      	cmp	r3, #0
   29098:	d1fb      	bne.n	29092 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2909a:	4770      	bx	lr

0002909c <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2909c:	6802      	ldr	r2, [r0, #0]
{
   2909e:	b510      	push	{r4, lr}
	if (parent->frags) {
   290a0:	b12a      	cbz	r2, 290ae <net_buf_frag_insert+0x12>
   290a2:	460b      	mov	r3, r1
	while (buf->frags) {
   290a4:	461c      	mov	r4, r3
   290a6:	681b      	ldr	r3, [r3, #0]
   290a8:	2b00      	cmp	r3, #0
   290aa:	d1fb      	bne.n	290a4 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   290ac:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   290ae:	6001      	str	r1, [r0, #0]
}
   290b0:	bd10      	pop	{r4, pc}

000290b2 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   290b2:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   290b4:	4604      	mov	r4, r0
   290b6:	b920      	cbnz	r0, 290c2 <net_buf_frag_add+0x10>
	buf->ref++;
   290b8:	790b      	ldrb	r3, [r1, #4]
   290ba:	3301      	adds	r3, #1
   290bc:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   290be:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   290c0:	bd10      	pop	{r4, pc}
   290c2:	4603      	mov	r3, r0
	while (buf->frags) {
   290c4:	4618      	mov	r0, r3
   290c6:	681b      	ldr	r3, [r3, #0]
   290c8:	2b00      	cmp	r3, #0
   290ca:	d1fb      	bne.n	290c4 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   290cc:	f7ff ffe6 	bl	2909c <net_buf_frag_insert>
   290d0:	4620      	mov	r0, r4
   290d2:	e7f5      	b.n	290c0 <net_buf_frag_add+0xe>

000290d4 <net_buf_simple_add>:
	return buf->data + buf->len;
   290d4:	8883      	ldrh	r3, [r0, #4]
   290d6:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   290d8:	4419      	add	r1, r3
   290da:	8081      	strh	r1, [r0, #4]
	return tail;
}
   290dc:	18d0      	adds	r0, r2, r3
   290de:	4770      	bx	lr

000290e0 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   290e0:	b430      	push	{r4, r5}
   290e2:	8884      	ldrh	r4, [r0, #4]
   290e4:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   290e6:	18a3      	adds	r3, r4, r2
   290e8:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   290ea:	1928      	adds	r0, r5, r4
}
   290ec:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   290ee:	f7fd be13 	b.w	26d18 <memcpy>

000290f2 <net_buf_simple_add_u8>:
   290f2:	8883      	ldrh	r3, [r0, #4]
   290f4:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   290f6:	b510      	push	{r4, lr}
	buf->len += len;
   290f8:	1c5c      	adds	r4, r3, #1
   290fa:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   290fc:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   290fe:	18d0      	adds	r0, r2, r3
   29100:	bd10      	pop	{r4, pc}

00029102 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   29102:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   29104:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   29106:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   29108:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2910a:	4411      	add	r1, r2
	buf->data -= len;
   2910c:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2910e:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   29110:	4770      	bx	lr

00029112 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   29112:	8882      	ldrh	r2, [r0, #4]
   29114:	1a52      	subs	r2, r2, r1
{
   29116:	4603      	mov	r3, r0
	buf->len -= len;
   29118:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2911a:	6800      	ldr	r0, [r0, #0]
   2911c:	4408      	add	r0, r1
   2911e:	6018      	str	r0, [r3, #0]
}
   29120:	4770      	bx	lr

00029122 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   29122:	4603      	mov	r3, r0
	void *data = buf->data;
   29124:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   29126:	889a      	ldrh	r2, [r3, #4]
   29128:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2912a:	4401      	add	r1, r0
	buf->len -= len;
   2912c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2912e:	6019      	str	r1, [r3, #0]

	return data;
}
   29130:	4770      	bx	lr

00029132 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   29132:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   29134:	6803      	ldr	r3, [r0, #0]
   29136:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   29138:	2101      	movs	r1, #1
   2913a:	f7ff ffea 	bl	29112 <net_buf_simple_pull>

	return val;
}
   2913e:	4620      	mov	r0, r4
   29140:	bd10      	pop	{r4, pc}

00029142 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   29142:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   29144:	6803      	ldr	r3, [r0, #0]
   29146:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   29148:	2102      	movs	r1, #2
   2914a:	f7ff ffe2 	bl	29112 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2914e:	4620      	mov	r0, r4
   29150:	bd10      	pop	{r4, pc}

00029152 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   29152:	6802      	ldr	r2, [r0, #0]
   29154:	6880      	ldr	r0, [r0, #8]
}
   29156:	1a10      	subs	r0, r2, r0
   29158:	4770      	bx	lr

0002915a <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2915a:	8883      	ldrh	r3, [r0, #4]
   2915c:	88c2      	ldrh	r2, [r0, #6]
   2915e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   29160:	6803      	ldr	r3, [r0, #0]
   29162:	6880      	ldr	r0, [r0, #8]
   29164:	1a18      	subs	r0, r3, r0
}
   29166:	1a10      	subs	r0, r2, r0
   29168:	4770      	bx	lr

0002916a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2916a:	6903      	ldr	r3, [r0, #16]
   2916c:	b2c9      	uxtb	r1, r1
   2916e:	220c      	movs	r2, #12
   29170:	fb01 3302 	mla	r3, r1, r2, r3
   29174:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   29176:	f000 0007 	and.w	r0, r0, #7
   2917a:	4770      	bx	lr

0002917c <set_on_state>:
	__asm__ volatile(
   2917c:	f04f 0340 	mov.w	r3, #64	; 0x40
   29180:	f3ef 8211 	mrs	r2, BASEPRI
   29184:	f383 8812 	msr	BASEPRI_MAX, r3
   29188:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2918c:	6803      	ldr	r3, [r0, #0]
   2918e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   29192:	f043 0302 	orr.w	r3, r3, #2
   29196:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   29198:	f382 8811 	msr	BASEPRI, r2
   2919c:	f3bf 8f6f 	isb	sy
}
   291a0:	4770      	bx	lr

000291a2 <stop>:
{
   291a2:	4603      	mov	r3, r0
   291a4:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   291a6:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   291a8:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   291aa:	f04f 0440 	mov.w	r4, #64	; 0x40
   291ae:	f3ef 8611 	mrs	r6, BASEPRI
   291b2:	f384 8812 	msr	BASEPRI_MAX, r4
   291b6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   291ba:	250c      	movs	r5, #12
   291bc:	fb05 0401 	mla	r4, r5, r1, r0
   291c0:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   291c2:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   291c6:	d001      	beq.n	291cc <stop+0x2a>
   291c8:	42a2      	cmp	r2, r4
   291ca:	d111      	bne.n	291f0 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   291cc:	fb05 0001 	mla	r0, r5, r1, r0
   291d0:	2201      	movs	r2, #1
   291d2:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   291d4:	2000      	movs	r0, #0
	__asm__ volatile(
   291d6:	f386 8811 	msr	BASEPRI, r6
   291da:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   291de:	b930      	cbnz	r0, 291ee <stop+0x4c>
	get_sub_config(dev, type)->stop();
   291e0:	685b      	ldr	r3, [r3, #4]
   291e2:	220c      	movs	r2, #12
   291e4:	fb02 3101 	mla	r1, r2, r1, r3
   291e8:	684b      	ldr	r3, [r1, #4]
   291ea:	4798      	blx	r3
	return 0;
   291ec:	2000      	movs	r0, #0
}
   291ee:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   291f0:	f04f 30ff 	mov.w	r0, #4294967295
   291f4:	e7ef      	b.n	291d6 <stop+0x34>

000291f6 <api_stop>:
	return stop(dev, subsys, CTX_API);
   291f6:	2280      	movs	r2, #128	; 0x80
   291f8:	f7ff bfd3 	b.w	291a2 <stop>

000291fc <async_start>:
{
   291fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   291fe:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   29200:	6904      	ldr	r4, [r0, #16]
{
   29202:	4605      	mov	r5, r0
   29204:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   29206:	f04f 0040 	mov.w	r0, #64	; 0x40
   2920a:	f3ef 8c11 	mrs	ip, BASEPRI
   2920e:	f380 8812 	msr	BASEPRI_MAX, r0
   29212:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   29216:	260c      	movs	r6, #12
   29218:	fb06 4601 	mla	r6, r6, r1, r4
   2921c:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2921e:	f000 0e07 	and.w	lr, r0, #7
   29222:	f1be 0f01 	cmp.w	lr, #1
   29226:	d110      	bne.n	2924a <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   29228:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   2922a:	2600      	movs	r6, #0
	__asm__ volatile(
   2922c:	f38c 8811 	msr	BASEPRI, ip
   29230:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   29234:	b93e      	cbnz	r6, 29246 <async_start+0x4a>
	subdata->cb = cb;
   29236:	200c      	movs	r0, #12
   29238:	4341      	muls	r1, r0
   2923a:	440c      	add	r4, r1
	subdata->user_data = user_data;
   2923c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   29240:	686b      	ldr	r3, [r5, #4]
   29242:	585b      	ldr	r3, [r3, r1]
   29244:	4798      	blx	r3
}
   29246:	4630      	mov	r0, r6
   29248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2924a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   2924e:	4287      	cmp	r7, r0
   29250:	bf14      	ite	ne
   29252:	f04f 36ff 	movne.w	r6, #4294967295
   29256:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   2925a:	e7e7      	b.n	2922c <async_start+0x30>

0002925c <api_start>:
{
   2925c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2925e:	2480      	movs	r4, #128	; 0x80
   29260:	9400      	str	r4, [sp, #0]
   29262:	f7ff ffcb 	bl	291fc <async_start>
}
   29266:	b002      	add	sp, #8
   29268:	bd10      	pop	{r4, pc}

0002926a <onoff_started_callback>:
	return &data->mgr[type];
   2926a:	6900      	ldr	r0, [r0, #16]
{
   2926c:	b410      	push	{r4}
	return &data->mgr[type];
   2926e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   29270:	241c      	movs	r4, #28
   29272:	fb03 0004 	mla	r0, r3, r4, r0
   29276:	2100      	movs	r1, #0
}
   29278:	bc10      	pop	{r4}
	notify(mgr, 0);
   2927a:	4710      	bx	r2

0002927c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2927c:	2000      	movs	r0, #0
   2927e:	f7f6 bc59 	b.w	1fb34 <nrfx_clock_start>

00029282 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   29282:	2000      	movs	r0, #0
   29284:	f000 bb86 	b.w	29994 <nrfx_clock_stop>

00029288 <blocking_start_callback>:
{
   29288:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2928a:	f7f8 b847 	b.w	2131c <z_impl_k_sem_give>

0002928e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2928e:	6843      	ldr	r3, [r0, #4]
   29290:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   29292:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   29296:	600b      	str	r3, [r1, #0]
}
   29298:	2000      	movs	r0, #0
   2929a:	4770      	bx	lr

0002929c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2929c:	6843      	ldr	r3, [r0, #4]
   2929e:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   292a0:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   292a4:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   292a8:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   292ac:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   292b0:	2000      	movs	r0, #0
   292b2:	4770      	bx	lr

000292b4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   292b4:	6843      	ldr	r3, [r0, #4]
   292b6:	685b      	ldr	r3, [r3, #4]
}
   292b8:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   292ba:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   292be:	4770      	bx	lr

000292c0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   292c0:	6843      	ldr	r3, [r0, #4]
   292c2:	685b      	ldr	r3, [r3, #4]
}
   292c4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   292c6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   292ca:	4770      	bx	lr

000292cc <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   292cc:	6843      	ldr	r3, [r0, #4]
   292ce:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   292d0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   292d4:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   292d8:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   292da:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   292de:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   292e2:	2000      	movs	r0, #0
   292e4:	4770      	bx	lr

000292e6 <gpio_nrfx_manage_callback>:
	return port->data;
   292e6:	6903      	ldr	r3, [r0, #16]
	return list->head;
   292e8:	6858      	ldr	r0, [r3, #4]
{
   292ea:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   292ec:	b158      	cbz	r0, 29306 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   292ee:	2400      	movs	r4, #0
   292f0:	4281      	cmp	r1, r0
   292f2:	d112      	bne.n	2931a <gpio_nrfx_manage_callback+0x34>
	return node->next;
   292f4:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   292f6:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   292f8:	b954      	cbnz	r4, 29310 <gpio_nrfx_manage_callback+0x2a>
   292fa:	428d      	cmp	r5, r1
	list->head = node;
   292fc:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   292fe:	d100      	bne.n	29302 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   29300:	6098      	str	r0, [r3, #8]
	parent->next = child;
   29302:	2000      	movs	r0, #0
   29304:	6008      	str	r0, [r1, #0]
	if (set) {
   29306:	b96a      	cbnz	r2, 29324 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   29308:	2000      	movs	r0, #0
}
   2930a:	bd30      	pop	{r4, r5, pc}
   2930c:	4628      	mov	r0, r5
   2930e:	e7ef      	b.n	292f0 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   29310:	428d      	cmp	r5, r1
	parent->next = child;
   29312:	6020      	str	r0, [r4, #0]
	list->tail = node;
   29314:	bf08      	it	eq
   29316:	609c      	streq	r4, [r3, #8]
}
   29318:	e7f3      	b.n	29302 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   2931a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2931c:	4604      	mov	r4, r0
   2931e:	2d00      	cmp	r5, #0
   29320:	d1f4      	bne.n	2930c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   29322:	b13a      	cbz	r2, 29334 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   29324:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   29326:	685a      	ldr	r2, [r3, #4]
   29328:	600a      	str	r2, [r1, #0]
	list->head = node;
   2932a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2932c:	2800      	cmp	r0, #0
   2932e:	d1eb      	bne.n	29308 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   29330:	6099      	str	r1, [r3, #8]
}
   29332:	e7ea      	b.n	2930a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   29334:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   29338:	e7e7      	b.n	2930a <gpio_nrfx_manage_callback+0x24>

0002933a <irq_connect1>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEFINE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEFINE(1);
   2933a:	2200      	movs	r2, #0
   2933c:	2101      	movs	r1, #1
   2933e:	2004      	movs	r0, #4
   29340:	f7ea bf14 	b.w	1416c <z_arm_irq_priority_set>

00029344 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   29344:	b530      	push	{r4, r5, lr}
   29346:	4604      	mov	r4, r0
	while (*count) {
   29348:	6808      	ldr	r0, [r1, #0]
   2934a:	b908      	cbnz	r0, 29350 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
   2934c:	6010      	str	r0, [r2, #0]
	return NULL;
   2934e:	e004      	b.n	2935a <spi_context_get_next_buf.constprop.0+0x16>
		if (((*current)->len / dfs) != 0) {
   29350:	6823      	ldr	r3, [r4, #0]
   29352:	685d      	ldr	r5, [r3, #4]
   29354:	b115      	cbz	r5, 2935c <spi_context_get_next_buf.constprop.0+0x18>
			return (*current)->buf;
   29356:	6818      	ldr	r0, [r3, #0]
			*buf_len = (*current)->len / dfs;
   29358:	6015      	str	r5, [r2, #0]
}
   2935a:	bd30      	pop	{r4, r5, pc}
		++(*current);
   2935c:	3308      	adds	r3, #8
		--(*count);
   2935e:	3801      	subs	r0, #1
		++(*current);
   29360:	6023      	str	r3, [r4, #0]
		--(*count);
   29362:	6008      	str	r0, [r1, #0]
   29364:	e7f0      	b.n	29348 <spi_context_get_next_buf.constprop.0+0x4>

00029366 <z_log_msg_static_create.constprop.0>:
   29366:	2300      	movs	r3, #0
   29368:	f7e9 bf76 	b.w	13258 <z_impl_z_log_msg_static_create>

0002936c <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   2936c:	4603      	mov	r3, r0
   2936e:	460a      	mov	r2, r1
{
	return gpio_pin_set(spec->port, spec->pin, value);
   29370:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   29372:	7919      	ldrb	r1, [r3, #4]
   29374:	2301      	movs	r3, #1
   29376:	fa03 f101 	lsl.w	r1, r3, r1
   2937a:	6903      	ldr	r3, [r0, #16]
   2937c:	681b      	ldr	r3, [r3, #0]
   2937e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   29380:	bf18      	it	ne
   29382:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   29386:	b112      	cbz	r2, 2938e <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   29388:	6883      	ldr	r3, [r0, #8]
   2938a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2938c:	4718      	bx	r3
   2938e:	6883      	ldr	r3, [r0, #8]
   29390:	691b      	ldr	r3, [r3, #16]
   29392:	e7fb      	b.n	2938c <gpio_pin_set_dt.isra.0+0x20>

00029394 <_spi_context_cs_control>:
{
   29394:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   29396:	6803      	ldr	r3, [r0, #0]
{
   29398:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2939a:	b1e3      	cbz	r3, 293d6 <_spi_context_cs_control+0x42>
   2939c:	6898      	ldr	r0, [r3, #8]
   2939e:	b1d0      	cbz	r0, 293d6 <_spi_context_cs_control+0x42>
   293a0:	6805      	ldr	r5, [r0, #0]
   293a2:	b1c5      	cbz	r5, 293d6 <_spi_context_cs_control+0x42>
		if (on) {
   293a4:	b149      	cbz	r1, 293ba <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   293a6:	2101      	movs	r1, #1
   293a8:	f7ff ffe0 	bl	2936c <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   293ac:	6823      	ldr	r3, [r4, #0]
   293ae:	689b      	ldr	r3, [r3, #8]
   293b0:	6898      	ldr	r0, [r3, #8]
}
   293b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   293b6:	f001 b845 	b.w	2a444 <z_impl_k_busy_wait>
			if (!force_off &&
   293ba:	b912      	cbnz	r2, 293c2 <_spi_context_cs_control+0x2e>
   293bc:	889b      	ldrh	r3, [r3, #4]
   293be:	04db      	lsls	r3, r3, #19
   293c0:	d409      	bmi.n	293d6 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   293c2:	6880      	ldr	r0, [r0, #8]
   293c4:	f001 f83e 	bl	2a444 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   293c8:	6823      	ldr	r3, [r4, #0]
   293ca:	2100      	movs	r1, #0
   293cc:	6898      	ldr	r0, [r3, #8]
}
   293ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   293d2:	f7ff bfcb 	b.w	2936c <gpio_pin_set_dt.isra.0>
}
   293d6:	bd38      	pop	{r3, r4, r5, pc}

000293d8 <spi_context_unlock_unconditionally>:
{
   293d8:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   293da:	2201      	movs	r2, #1
   293dc:	2100      	movs	r1, #0
{
   293de:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   293e0:	f7ff ffd8 	bl	29394 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   293e4:	69a3      	ldr	r3, [r4, #24]
   293e6:	b933      	cbnz	r3, 293f6 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   293e8:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   293ea:	f104 0010 	add.w	r0, r4, #16
}
   293ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   293f2:	f7f7 bf93 	b.w	2131c <z_impl_k_sem_give>
   293f6:	bd10      	pop	{r4, pc}

000293f8 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = dev->data;
   293f8:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   293fa:	6803      	ldr	r3, [r0, #0]
   293fc:	428b      	cmp	r3, r1
{
   293fe:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   29400:	d106      	bne.n	29410 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   29402:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   29406:	b934      	cbnz	r4, 29416 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   29408:	f7ff ffe6 	bl	293d8 <spi_context_unlock_unconditionally>
	return 0;
   2940c:	4620      	mov	r0, r4
}
   2940e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   29410:	f06f 0015 	mvn.w	r0, #21
   29414:	e7fb      	b.n	2940e <spi_nrfx_release+0x16>
		return -EBUSY;
   29416:	f06f 000f 	mvn.w	r0, #15
   2941a:	e7f8      	b.n	2940e <spi_nrfx_release+0x16>

0002941c <spi_nor_pages_layout>:
	*layout = &cfg->layout;
   2941c:	6843      	ldr	r3, [r0, #4]
   2941e:	3314      	adds	r3, #20
   29420:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   29422:	2301      	movs	r3, #1
   29424:	6013      	str	r3, [r2, #0]
}
   29426:	4770      	bx	lr

00029428 <release_device.isra.0>:
   29428:	f7f7 bf78 	b.w	2131c <z_impl_k_sem_give>

0002942c <acquire_device.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   2942c:	f04f 32ff 	mov.w	r2, #4294967295
   29430:	f04f 33ff 	mov.w	r3, #4294967295
   29434:	f7f7 bf98 	b.w	21368 <z_impl_k_sem_take>

00029438 <spi_nor_access>:
{
   29438:	b5f0      	push	{r4, r5, r6, r7, lr}
   2943a:	b08b      	sub	sp, #44	; 0x2c
	const struct spi_nor_config *const driver_cfg = dev->config;
   2943c:	6844      	ldr	r4, [r0, #4]
	struct spi_nor_data *const driver_data = dev->data;
   2943e:	6907      	ldr	r7, [r0, #16]
{
   29440:	9e11      	ldr	r6, [sp, #68]	; 0x44
	struct spi_buf spi_buf[2] = {
   29442:	f8cd d018 	str.w	sp, [sp, #24]
	uint8_t buf[5] = { 0 };
   29446:	2000      	movs	r0, #0
   29448:	9000      	str	r0, [sp, #0]
   2944a:	f88d 0004 	strb.w	r0, [sp, #4]
	struct spi_buf spi_buf[2] = {
   2944e:	2001      	movs	r0, #1
   29450:	9007      	str	r0, [sp, #28]
   29452:	9810      	ldr	r0, [sp, #64]	; 0x40
	buf[0] = opcode;
   29454:	f88d 1000 	strb.w	r1, [sp]
	if (is_addressed) {
   29458:	07d1      	lsls	r1, r2, #31
	struct spi_buf spi_buf[2] = {
   2945a:	e9cd 0608 	strd	r0, r6, [sp, #32]
	bool is_write = (access & NOR_ACCESS_WRITE) != 0U;
   2945e:	f002 0580 	and.w	r5, r2, #128	; 0x80
	if (is_addressed) {
   29462:	d50d      	bpl.n	29480 <spi_nor_access+0x48>
				      && driver_data->flag_access_32bit));
   29464:	7f3a      	ldrb	r2, [r7, #28]
		union {
   29466:	ba1b      	rev	r3, r3
		} addr32 = {
   29468:	9304      	str	r3, [sp, #16]
		if (use_32bit) {
   2946a:	07d3      	lsls	r3, r2, #31
   2946c:	d51d      	bpl.n	294aa <spi_nor_access+0x72>
			memcpy(&buf[1], &addr32.u8[0], 4);
   2946e:	2204      	movs	r2, #4
   29470:	a904      	add	r1, sp, #16
   29472:	f10d 0001 	add.w	r0, sp, #1
   29476:	f7fd fc4f 	bl	26d18 <memcpy>
			spi_buf[0].len += 4;
   2947a:	9b07      	ldr	r3, [sp, #28]
   2947c:	3304      	adds	r3, #4
			spi_buf[0].len += 3;
   2947e:	9307      	str	r3, [sp, #28]
		.count = (length != 0) ? 2 : 1,
   29480:	2e00      	cmp	r6, #0
	const struct spi_buf_set tx_set = {
   29482:	ab06      	add	r3, sp, #24
		.count = (length != 0) ? 2 : 1,
   29484:	bf14      	ite	ne
   29486:	2202      	movne	r2, #2
   29488:	2201      	moveq	r2, #1
 * @return a value from spi_write().
 */
static inline int spi_write_dt(const struct spi_dt_spec *spec,
			       const struct spi_buf_set *tx_bufs)
{
	return spi_write(spec->bus, &spec->config, tx_bufs);
   2948a:	4621      	mov	r1, r4
	const struct spi_buf_set rx_set = {
   2948c:	e9cd 2303 	strd	r2, r3, [sp, #12]
	const struct spi_buf_set tx_set = {
   29490:	9302      	str	r3, [sp, #8]
	const struct spi_buf_set rx_set = {
   29492:	2302      	movs	r3, #2
   29494:	f851 0b04 	ldr.w	r0, [r1], #4
   29498:	9305      	str	r3, [sp, #20]
	if (is_write) {
   2949a:	b185      	cbz	r5, 294be <spi_nor_access+0x86>
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   2949c:	6883      	ldr	r3, [r0, #8]
   2949e:	681c      	ldr	r4, [r3, #0]
   294a0:	2300      	movs	r3, #0
   294a2:	aa02      	add	r2, sp, #8
   294a4:	47a0      	blx	r4
}
   294a6:	b00b      	add	sp, #44	; 0x2c
   294a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			memcpy(&buf[1], &addr32.u8[1], 3);
   294aa:	2203      	movs	r2, #3
   294ac:	f10d 0111 	add.w	r1, sp, #17
   294b0:	f10d 0001 	add.w	r0, sp, #1
   294b4:	f7fd fc30 	bl	26d18 <memcpy>
			spi_buf[0].len += 3;
   294b8:	9b07      	ldr	r3, [sp, #28]
   294ba:	3303      	adds	r3, #3
   294bc:	e7df      	b.n	2947e <spi_nor_access+0x46>
   294be:	6883      	ldr	r3, [r0, #8]
   294c0:	681c      	ldr	r4, [r3, #0]
   294c2:	ab04      	add	r3, sp, #16
   294c4:	e7ed      	b.n	294a2 <spi_nor_access+0x6a>

000294c6 <spi_nor_write_protection_set>:
{
   294c6:	b507      	push	{r0, r1, r2, lr}
	ret = spi_nor_cmd_write(dev, (write_protect) ?
   294c8:	2900      	cmp	r1, #0
   294ca:	f04f 0300 	mov.w	r3, #0
   294ce:	e9cd 3300 	strd	r3, r3, [sp]
   294d2:	f04f 0280 	mov.w	r2, #128	; 0x80
   294d6:	bf14      	ite	ne
   294d8:	2104      	movne	r1, #4
   294da:	2106      	moveq	r1, #6
   294dc:	f7ff ffac 	bl	29438 <spi_nor_access>
}
   294e0:	b003      	add	sp, #12
   294e2:	f85d fb04 	ldr.w	pc, [sp], #4

000294e6 <spi_nor_read>:
{
   294e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   294e8:	461e      	mov	r6, r3
	return cfg->flash_size;
   294ea:	6843      	ldr	r3, [r0, #4]
	if ((addr < 0) || ((addr + size) > flash_size)) {
   294ec:	1e0d      	subs	r5, r1, #0
	return cfg->flash_size;
   294ee:	691b      	ldr	r3, [r3, #16]
{
   294f0:	4604      	mov	r4, r0
   294f2:	4617      	mov	r7, r2
	if ((addr < 0) || ((addr + size) > flash_size)) {
   294f4:	db14      	blt.n	29520 <spi_nor_read+0x3a>
   294f6:	19aa      	adds	r2, r5, r6
   294f8:	429a      	cmp	r2, r3
   294fa:	d811      	bhi.n	29520 <spi_nor_read+0x3a>
	acquire_device(dev);
   294fc:	6900      	ldr	r0, [r0, #16]
   294fe:	f7ff ff95 	bl	2942c <acquire_device.isra.0>
	ret = spi_nor_cmd_addr_read(dev, SPI_NOR_CMD_READ, addr, dest, size);
   29502:	462b      	mov	r3, r5
   29504:	e9cd 7600 	strd	r7, r6, [sp]
   29508:	2201      	movs	r2, #1
   2950a:	2103      	movs	r1, #3
   2950c:	4620      	mov	r0, r4
   2950e:	f7ff ff93 	bl	29438 <spi_nor_access>
   29512:	4605      	mov	r5, r0
	release_device(dev);
   29514:	6920      	ldr	r0, [r4, #16]
   29516:	f7ff ff87 	bl	29428 <release_device.isra.0>
}
   2951a:	4628      	mov	r0, r5
   2951c:	b003      	add	sp, #12
   2951e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   29520:	f06f 0515 	mvn.w	r5, #21
   29524:	e7f9      	b.n	2951a <spi_nor_read+0x34>

00029526 <spi_nor_wait_until_ready.isra.0>:
static int spi_nor_wait_until_ready(const struct device *dev)
   29526:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   29528:	4604      	mov	r4, r0
		ret = spi_nor_cmd_read(dev, SPI_NOR_CMD_RDSR, &reg, sizeof(reg));
   2952a:	2501      	movs	r5, #1
   2952c:	f10d 060f 	add.w	r6, sp, #15
   29530:	2300      	movs	r3, #0
   29532:	e9cd 6500 	strd	r6, r5, [sp]
   29536:	461a      	mov	r2, r3
   29538:	2105      	movs	r1, #5
   2953a:	4620      	mov	r0, r4
   2953c:	f7ff ff7c 	bl	29438 <spi_nor_access>
	} while (!ret && (reg & SPI_NOR_WIP_BIT));
   29540:	b918      	cbnz	r0, 2954a <spi_nor_wait_until_ready.isra.0+0x24>
   29542:	f89d 300f 	ldrb.w	r3, [sp, #15]
   29546:	07db      	lsls	r3, r3, #31
   29548:	d4f2      	bmi.n	29530 <spi_nor_wait_until_ready.isra.0+0xa>
}
   2954a:	b004      	add	sp, #16
   2954c:	bd70      	pop	{r4, r5, r6, pc}

0002954e <spi_nor_write>:
{
   2954e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   29552:	4698      	mov	r8, r3
	return cfg->flash_size;
   29554:	6843      	ldr	r3, [r0, #4]
	if ((addr < 0) || ((size + addr) > flash_size)) {
   29556:	1e0c      	subs	r4, r1, #0
	return cfg->flash_size;
   29558:	691b      	ldr	r3, [r3, #16]
{
   2955a:	4606      	mov	r6, r0
   2955c:	4691      	mov	r9, r2
	if ((addr < 0) || ((size + addr) > flash_size)) {
   2955e:	db53      	blt.n	29608 <spi_nor_write+0xba>
   29560:	eb04 0208 	add.w	r2, r4, r8
   29564:	429a      	cmp	r2, r3
   29566:	d84f      	bhi.n	29608 <spi_nor_write+0xba>
	acquire_device(dev);
   29568:	6900      	ldr	r0, [r0, #16]
   2956a:	f7ff ff5f 	bl	2942c <acquire_device.isra.0>
	ret = spi_nor_write_protection_set(dev, false);
   2956e:	2100      	movs	r1, #0
   29570:	4630      	mov	r0, r6
   29572:	f7ff ffa8 	bl	294c6 <spi_nor_write_protection_set>
	if (ret == 0) {
   29576:	4605      	mov	r5, r0
   29578:	b918      	cbnz	r0, 29582 <spi_nor_write+0x34>
			spi_nor_cmd_write(dev, SPI_NOR_CMD_WREN);
   2957a:	4682      	mov	sl, r0
		while (size > 0) {
   2957c:	f1b8 0f00 	cmp.w	r8, #0
   29580:	d10d      	bne.n	2959e <spi_nor_write+0x50>
	int ret2 = spi_nor_write_protection_set(dev, true);
   29582:	2101      	movs	r1, #1
   29584:	4630      	mov	r0, r6
   29586:	f7ff ff9e 	bl	294c6 <spi_nor_write_protection_set>
		ret = ret2;
   2958a:	2d00      	cmp	r5, #0
   2958c:	bf08      	it	eq
   2958e:	4605      	moveq	r5, r0
	release_device(dev);
   29590:	6930      	ldr	r0, [r6, #16]
   29592:	f7ff ff49 	bl	29428 <release_device.isra.0>
}
   29596:	4628      	mov	r0, r5
   29598:	b002      	add	sp, #8
   2959a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (to_write >= page_size) {
   2959e:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   295a2:	4647      	mov	r7, r8
   295a4:	bf28      	it	cs
   295a6:	f44f 7780 	movcs.w	r7, #256	; 0x100
			if (((addr + to_write - 1U) / page_size)
   295aa:	19e3      	adds	r3, r4, r7
			!= (addr / page_size)) {
   295ac:	2c00      	cmp	r4, #0
			if (((addr + to_write - 1U) / page_size)
   295ae:	f103 33ff 	add.w	r3, r3, #4294967295
			!= (addr / page_size)) {
   295b2:	4622      	mov	r2, r4
			if (((addr + to_write - 1U) / page_size)
   295b4:	ea4f 2313 	mov.w	r3, r3, lsr #8
			!= (addr / page_size)) {
   295b8:	bfb8      	it	lt
   295ba:	f104 02ff 	addlt.w	r2, r4, #255	; 0xff
			if (((addr + to_write - 1U) / page_size)
   295be:	ebb3 2f22 	cmp.w	r3, r2, asr #8
   295c2:	d006      	beq.n	295d2 <spi_nor_write+0x84>
				to_write = page_size - (addr % page_size);
   295c4:	4263      	negs	r3, r4
   295c6:	b2db      	uxtb	r3, r3
   295c8:	b2e7      	uxtb	r7, r4
   295ca:	bf58      	it	pl
   295cc:	425f      	negpl	r7, r3
   295ce:	f5c7 7780 	rsb	r7, r7, #256	; 0x100
			spi_nor_cmd_write(dev, SPI_NOR_CMD_WREN);
   295d2:	2300      	movs	r3, #0
   295d4:	2280      	movs	r2, #128	; 0x80
   295d6:	2106      	movs	r1, #6
   295d8:	e9cd aa00 	strd	sl, sl, [sp]
   295dc:	4630      	mov	r0, r6
   295de:	f7ff ff2b 	bl	29438 <spi_nor_access>
			ret = spi_nor_cmd_addr_write(dev, SPI_NOR_CMD_PP, addr,
   295e2:	e9cd 9700 	strd	r9, r7, [sp]
   295e6:	4623      	mov	r3, r4
   295e8:	2281      	movs	r2, #129	; 0x81
   295ea:	2102      	movs	r1, #2
   295ec:	4630      	mov	r0, r6
   295ee:	f7ff ff23 	bl	29438 <spi_nor_access>
			if (ret != 0) {
   295f2:	b938      	cbnz	r0, 29604 <spi_nor_write+0xb6>
			spi_nor_wait_until_ready(dev);
   295f4:	4630      	mov	r0, r6
			size -= to_write;
   295f6:	eba8 0807 	sub.w	r8, r8, r7
			src = (const uint8_t *)src + to_write;
   295fa:	44b9      	add	r9, r7
			addr += to_write;
   295fc:	443c      	add	r4, r7
			spi_nor_wait_until_ready(dev);
   295fe:	f7ff ff92 	bl	29526 <spi_nor_wait_until_ready.isra.0>
   29602:	e7bb      	b.n	2957c <spi_nor_write+0x2e>
   29604:	4605      	mov	r5, r0
   29606:	e7bc      	b.n	29582 <spi_nor_write+0x34>
		return -EINVAL;
   29608:	f06f 0515 	mvn.w	r5, #21
   2960c:	e7c3      	b.n	29596 <spi_nor_write+0x48>

0002960e <is_regular_addr_valid>:
{
   2960e:	b538      	push	{r3, r4, r5, lr}
   29610:	4605      	mov	r5, r0
   29612:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   29614:	f000 fa46 	bl	29aa4 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   29618:	2d00      	cmp	r5, #0
   2961a:	db07      	blt.n	2962c <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2961c:	42a8      	cmp	r0, r5
   2961e:	d905      	bls.n	2962c <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   29620:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   29622:	4284      	cmp	r4, r0
   29624:	bf8c      	ite	hi
   29626:	2000      	movhi	r0, #0
   29628:	2001      	movls	r0, #1
}
   2962a:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2962c:	2000      	movs	r0, #0
   2962e:	e7fc      	b.n	2962a <is_regular_addr_valid+0x1c>

00029630 <flash_nrf_read>:
{
   29630:	b570      	push	{r4, r5, r6, lr}
   29632:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   29634:	4628      	mov	r0, r5
   29636:	4619      	mov	r1, r3
{
   29638:	4616      	mov	r6, r2
   2963a:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   2963c:	f7ff ffe7 	bl	2960e <is_regular_addr_valid>
   29640:	b928      	cbnz	r0, 2964e <flash_nrf_read+0x1e>
   29642:	4621      	mov	r1, r4
   29644:	4628      	mov	r0, r5
}
   29646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2964a:	f7f4 bc3d 	b.w	1dec8 <flash_nrf_read.part.0>
	if (!len) {
   2964e:	b124      	cbz	r4, 2965a <flash_nrf_read+0x2a>
	memcpy(data, (void *)addr, len);
   29650:	4622      	mov	r2, r4
   29652:	4629      	mov	r1, r5
   29654:	4630      	mov	r0, r6
   29656:	f7fd fb5f 	bl	26d18 <memcpy>
}
   2965a:	2000      	movs	r0, #0
   2965c:	bd70      	pop	{r4, r5, r6, pc}

0002965e <uart_nrfx_config_get>:
	*cfg = data->uart_config;
   2965e:	6902      	ldr	r2, [r0, #16]
{
   29660:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   29662:	e892 0003 	ldmia.w	r2, {r0, r1}
   29666:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2966a:	2000      	movs	r0, #0
   2966c:	4770      	bx	lr

0002966e <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2966e:	2000      	movs	r0, #0
   29670:	4770      	bx	lr

00029672 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   29672:	b538      	push	{r3, r4, r5, lr}
   29674:	460c      	mov	r4, r1
   29676:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   29678:	f7ed f852 	bl	16720 <bt_is_ready>
   2967c:	b128      	cbz	r0, 2968a <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2967e:	4629      	mov	r1, r5
   29680:	4620      	mov	r0, r4
}
   29682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   29686:	f7ec bb11 	b.w	15cac <bt_hci_le_rand>
}
   2968a:	f06f 000a 	mvn.w	r0, #10
   2968e:	bd38      	pop	{r3, r4, r5, pc}

00029690 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   29690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29692:	460f      	mov	r7, r1
   29694:	4616      	mov	r6, r2

	return err;
#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   29696:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   2969a:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   2969c:	42a6      	cmp	r6, r4
   2969e:	d803      	bhi.n	296a8 <entropy_cc3xx_rng_get_entropy+0x18>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   296a0:	d116      	bne.n	296d0 <entropy_cc3xx_rng_get_entropy+0x40>
		err = 0;
   296a2:	2000      	movs	r0, #0
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   296a4:	b003      	add	sp, #12
   296a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   296a8:	1b33      	subs	r3, r6, r4
   296aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   296ae:	bf38      	it	cc
   296b0:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   296b2:	462a      	mov	r2, r5
   296b4:	ab01      	add	r3, sp, #4
   296b6:	1939      	adds	r1, r7, r4
   296b8:	2000      	movs	r0, #0
   296ba:	f7f9 fa91 	bl	22be0 <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   296be:	b920      	cbnz	r0, 296ca <entropy_cc3xx_rng_get_entropy+0x3a>
		if (olen != chunk_size) {
   296c0:	9b01      	ldr	r3, [sp, #4]
   296c2:	42ab      	cmp	r3, r5
   296c4:	d101      	bne.n	296ca <entropy_cc3xx_rng_get_entropy+0x3a>
		offset += chunk_size;
   296c6:	442c      	add	r4, r5
   296c8:	e7e8      	b.n	2969c <entropy_cc3xx_rng_get_entropy+0xc>
			return -EINVAL;
   296ca:	f06f 0015 	mvn.w	r0, #21
   296ce:	e7e9      	b.n	296a4 <entropy_cc3xx_rng_get_entropy+0x14>
	int err = EINVAL;
   296d0:	2016      	movs	r0, #22
   296d2:	e7e7      	b.n	296a4 <entropy_cc3xx_rng_get_entropy+0x14>

000296d4 <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   296d4:	2200      	movs	r2, #0
{
   296d6:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   296d8:	4611      	mov	r1, r2
   296da:	4610      	mov	r0, r2
   296dc:	f7f9 fa4e 	bl	22b7c <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   296e0:	2800      	cmp	r0, #0
	}
#endif

	return 0;
}
   296e2:	bf18      	it	ne
   296e4:	f06f 0015 	mvnne.w	r0, #21
   296e8:	bd08      	pop	{r3, pc}

000296ea <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   296ea:	4770      	bx	lr

000296ec <sys_clock_cycle_get_32>:
{
   296ec:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   296ee:	f7f5 f8c7 	bl	1e880 <z_nrf_rtc_timer_read>
}
   296f2:	bd08      	pop	{r3, pc}

000296f4 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   296f4:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   296f6:	6843      	ldr	r3, [r0, #4]
   296f8:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   296fa:	7a03      	ldrb	r3, [r0, #8]
   296fc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   29700:	3b01      	subs	r3, #1
   29702:	00db      	lsls	r3, r3, #3
   29704:	6845      	ldr	r5, [r0, #4]
   29706:	6814      	ldr	r4, [r2, #0]
   29708:	441d      	add	r5, r3
   2970a:	42ac      	cmp	r4, r5
   2970c:	d902      	bls.n	29714 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   2970e:	f06f 0001 	mvn.w	r0, #1
}
   29712:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   29714:	7965      	ldrb	r5, [r4, #5]
   29716:	428d      	cmp	r5, r1
   29718:	d002      	beq.n	29720 <pinctrl_lookup_state+0x2c>
		(*state)++;
   2971a:	3408      	adds	r4, #8
   2971c:	6014      	str	r4, [r2, #0]
   2971e:	e7f1      	b.n	29704 <pinctrl_lookup_state+0x10>
			return 0;
   29720:	2000      	movs	r0, #0
   29722:	e7f6      	b.n	29712 <pinctrl_lookup_state+0x1e>

00029724 <nrf_gpio_pin_write>:
    if (value == 0)
   29724:	b909      	cbnz	r1, 2972a <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   29726:	f7f5 ba51 	b.w	1ebcc <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   2972a:	f7f5 ba81 	b.w	1ec30 <nrf_gpio_pin_set>

0002972e <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2972e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29732:	4616      	mov	r6, r2
   29734:	4605      	mov	r5, r0
   29736:	eb00 0781 	add.w	r7, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2973a:	42af      	cmp	r7, r5
   2973c:	d102      	bne.n	29744 <pinctrl_configure_pins+0x16>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   2973e:	2000      	movs	r0, #0
}
   29740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   29744:	682c      	ldr	r4, [r5, #0]
		switch (NRF_GET_FUN(pins[i])) {
   29746:	0c23      	lsrs	r3, r4, #16
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   29748:	f3c4 2803 	ubfx	r8, r4, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
   2974c:	2b19      	cmp	r3, #25
   2974e:	d862      	bhi.n	29816 <pinctrl_configure_pins+0xe8>
   29750:	e8df f003 	tbb	[pc, r3]
   29754:	4121190d 	.word	0x4121190d
   29758:	61413726 	.word	0x61413726
   2975c:	61616161 	.word	0x61616161
   29760:	61616161 	.word	0x61616161
   29764:	61616161 	.word	0x61616161
   29768:	52466161 	.word	0x52466161
   2976c:	5c57      	.short	0x5c57
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   2976e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   29772:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   29776:	6828      	ldr	r0, [r5, #0]
   29778:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2977c:	f7f5 fa58 	bl	1ec30 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   29780:	4643      	mov	r3, r8
   29782:	2201      	movs	r2, #1
   29784:	e005      	b.n	29792 <pinctrl_configure_pins+0x64>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   29786:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2978a:	f8c6 4514 	str.w	r4, [r6, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2978e:	4643      	mov	r3, r8
   29790:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   29792:	4611      	mov	r1, r2
   29794:	e010      	b.n	297b8 <pinctrl_configure_pins+0x8a>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   29796:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2979a:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
   2979e:	e7ea      	b.n	29776 <pinctrl_configure_pins+0x48>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   297a0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   297a4:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   297a8:	6828      	ldr	r0, [r5, #0]
        nrf_gpio_pin_clear(pin_number);
   297aa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   297ae:	f7f5 fa0d 	bl	1ebcc <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   297b2:	4643      	mov	r3, r8
   297b4:	2200      	movs	r2, #0
   297b6:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   297b8:	6828      	ldr	r0, [r5, #0]
   297ba:	f7f5 fa17 	bl	1ebec <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   297be:	3504      	adds	r5, #4
   297c0:	e7bb      	b.n	2973a <pinctrl_configure_pins+0xc>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   297c2:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   297c6:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   297ca:	6828      	ldr	r0, [r5, #0]
   297cc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   297d0:	f7f5 f9fc 	bl	1ebcc <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   297d4:	e7d4      	b.n	29780 <pinctrl_configure_pins+0x52>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   297d6:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   297da:	f8c6 4510 	str.w	r4, [r6, #1296]	; 0x510
   297de:	e7d6      	b.n	2978e <pinctrl_configure_pins+0x60>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   297e0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   297e4:	f8c6 4560 	str.w	r4, [r6, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   297e8:	6828      	ldr	r0, [r5, #0]
   297ea:	f3c0 3140 	ubfx	r1, r0, #13, #1
   297ee:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   297f2:	f7ff ff97 	bl	29724 <nrf_gpio_pin_write>
   297f6:	e7c3      	b.n	29780 <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   297f8:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   297fc:	f8c6 4564 	str.w	r4, [r6, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   29800:	e7f2      	b.n	297e8 <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   29802:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   29806:	f8c6 4568 	str.w	r4, [r6, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   2980a:	e7ed      	b.n	297e8 <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   2980c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   29810:	f8c6 456c 	str.w	r4, [r6, #1388]	; 0x56c
   29814:	e7e8      	b.n	297e8 <pinctrl_configure_pins+0xba>
		switch (NRF_GET_FUN(pins[i])) {
   29816:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2981a:	e791      	b.n	29740 <pinctrl_configure_pins+0x12>

0002981c <rand_prio_high_vector_get>:
   2981c:	f7f5 ba6e 	b.w	1ecfc <rand_prio_low_vector_get>

00029820 <hci_driver_send>:
{
   29820:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   29822:	8983      	ldrh	r3, [r0, #12]
{
   29824:	4605      	mov	r5, r0
	if (!buf->len) {
   29826:	b373      	cbz	r3, 29886 <hci_driver_send+0x66>
   29828:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   2982a:	b1a3      	cbz	r3, 29856 <hci_driver_send+0x36>
   2982c:	2b02      	cmp	r3, #2
   2982e:	d12a      	bne.n	29886 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   29830:	f04f 30ff 	mov.w	r0, #4294967295
   29834:	f04f 31ff 	mov.w	r1, #4294967295
   29838:	f7f5 fa0a 	bl	1ec50 <multithreading_lock_acquire>
	if (!errcode) {
   2983c:	4604      	mov	r4, r0
   2983e:	b940      	cbnz	r0, 29852 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   29840:	68a8      	ldr	r0, [r5, #8]
   29842:	f7e3 ff3b 	bl	d6bc <sdc_hci_data_put>
   29846:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   29848:	f7f5 fa0a 	bl	1ec60 <multithreading_lock_release>
		if (errcode) {
   2984c:	b1b4      	cbz	r4, 2987c <hci_driver_send+0x5c>
			receive_signal_raise();
   2984e:	f7f5 fa69 	bl	1ed24 <receive_signal_raise>
}
   29852:	4620      	mov	r0, r4
   29854:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   29856:	f04f 30ff 	mov.w	r0, #4294967295
   2985a:	f04f 31ff 	mov.w	r1, #4294967295
   2985e:	f7f5 f9f7 	bl	1ec50 <multithreading_lock_acquire>
	if (!errcode) {
   29862:	4604      	mov	r4, r0
   29864:	2800      	cmp	r0, #0
   29866:	d1f4      	bne.n	29852 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   29868:	68a8      	ldr	r0, [r5, #8]
   2986a:	f7f5 fc1d 	bl	1f0a8 <hci_internal_cmd_put>
   2986e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   29870:	f7f5 f9f6 	bl	1ec60 <multithreading_lock_release>
	if (errcode) {
   29874:	2c00      	cmp	r4, #0
   29876:	d1ec      	bne.n	29852 <hci_driver_send+0x32>
	receive_signal_raise();
   29878:	f7f5 fa54 	bl	1ed24 <receive_signal_raise>
		net_buf_unref(buf);
   2987c:	4628      	mov	r0, r5
   2987e:	f7f3 fbd3 	bl	1d028 <net_buf_unref>
   29882:	2400      	movs	r4, #0
   29884:	e7e5      	b.n	29852 <hci_driver_send+0x32>
	switch (type) {
   29886:	f06f 0415 	mvn.w	r4, #21
   2988a:	e7e2      	b.n	29852 <hci_driver_send+0x32>

0002988c <receive_work_handler>:
	hci_driver_receive_process();
   2988c:	f7f5 bbb8 	b.w	1f000 <hci_driver_receive_process>

00029890 <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   29890:	b5f0      	push	{r4, r5, r6, r7, lr}
   29892:	b08d      	sub	sp, #52	; 0x34
   29894:	4615      	mov	r5, r2
   29896:	466a      	mov	r2, sp
   29898:	f100 0310 	add.w	r3, r0, #16
   2989c:	4616      	mov	r6, r2
		*pdst++ = *psrc--;
   2989e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   298a2:	f802 4b01 	strb.w	r4, [r2], #1
	for (; length > 0; length--) {
   298a6:	4298      	cmp	r0, r3
   298a8:	d1f9      	bne.n	2989e <bt_encrypt_le+0xe>
   298aa:	aa04      	add	r2, sp, #16
   298ac:	f101 0310 	add.w	r3, r1, #16
   298b0:	4617      	mov	r7, r2
		*pdst++ = *psrc--;
   298b2:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   298b6:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   298ba:	428b      	cmp	r3, r1
   298bc:	d1f9      	bne.n	298b2 <bt_encrypt_le+0x22>
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   298be:	f04f 30ff 	mov.w	r0, #4294967295
   298c2:	f04f 31ff 	mov.w	r1, #4294967295
   298c6:	f7f5 f9c3 	bl	1ec50 <multithreading_lock_acquire>

	if (!errcode) {
   298ca:	4604      	mov	r4, r0
   298cc:	b990      	cbnz	r0, 298f4 <bt_encrypt_le+0x64>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   298ce:	aa08      	add	r2, sp, #32
   298d0:	4639      	mov	r1, r7
   298d2:	4630      	mov	r0, r6
   298d4:	f7e3 fc66 	bl	d1a4 <sdc_soc_ecb_block_encrypt>
   298d8:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   298da:	f7f5 f9c1 	bl	1ec60 <multithreading_lock_release>
	}

	if (!errcode) {
   298de:	b94c      	cbnz	r4, 298f4 <bt_encrypt_le+0x64>
   298e0:	1e6b      	subs	r3, r5, #1
	psrc += length - 1;
   298e2:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   298e6:	350f      	adds	r5, #15
		*pdst++ = *psrc--;
   298e8:	f812 1901 	ldrb.w	r1, [r2], #-1
   298ec:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   298f0:	429d      	cmp	r5, r3
   298f2:	d1f9      	bne.n	298e8 <bt_encrypt_le+0x58>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   298f4:	4620      	mov	r0, r4
   298f6:	b00d      	add	sp, #52	; 0x34
   298f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000298fa <sys_memcpy_swap.constprop.0>:
   298fa:	f101 0320 	add.w	r3, r1, #32
   298fe:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   29900:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   29904:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   29908:	428b      	cmp	r3, r1
   2990a:	d1f9      	bne.n	29900 <sys_memcpy_swap.constprop.0+0x6>
}
   2990c:	4770      	bx	lr

0002990e <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   2990e:	2100      	movs	r1, #0
   29910:	f7f6 b858 	b.w	1f9c4 <cmd_le_generate_dhkey>

00029914 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   29914:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   29918:	2901      	cmp	r1, #1
   2991a:	d801      	bhi.n	29920 <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   2991c:	f7f6 b852 	b.w	1f9c4 <cmd_le_generate_dhkey>
}
   29920:	2012      	movs	r0, #18
   29922:	4770      	bx	lr

00029924 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   29924:	4668      	mov	r0, sp
   29926:	f020 0107 	bic.w	r1, r0, #7
   2992a:	468d      	mov	sp, r1
   2992c:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2992e:	f7d9 fde5 	bl	34fc <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   29932:	f7ea fc35 	bl	141a0 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   29936:	f7ea fcfd 	bl	14334 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2993a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2993e:	4685      	mov	sp, r0
   29940:	4770      	bx	lr

00029942 <mpsl_low_prio_work_handler>:
{
   29942:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   29944:	f04f 31ff 	mov.w	r1, #4294967295
   29948:	f04f 30ff 	mov.w	r0, #4294967295
   2994c:	f7f5 f980 	bl	1ec50 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   29950:	f7e3 fa4d 	bl	cdee <mpsl_low_priority_process>
}
   29954:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   29958:	f7f5 b982 	b.w	1ec60 <multithreading_lock_release>

0002995c <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2995c:	4668      	mov	r0, sp
   2995e:	f020 0107 	bic.w	r1, r0, #7
   29962:	468d      	mov	sp, r1
   29964:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   29966:	f7d9 fd3f 	bl	33e8 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2996a:	f7ea fc19 	bl	141a0 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2996e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   29972:	4685      	mov	sp, r0
   29974:	4770      	bx	lr

00029976 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   29976:	4668      	mov	r0, sp
   29978:	f020 0107 	bic.w	r1, r0, #7
   2997c:	468d      	mov	sp, r1
   2997e:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   29980:	f7d7 faa2 	bl	ec8 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   29984:	f7ea fc0c 	bl	141a0 <_arch_isr_direct_pm>
   29988:	f7ea fcd4 	bl	14334 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2998c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   29990:	4685      	mov	sp, r0
   29992:	4770      	bx	lr

00029994 <nrfx_clock_stop>:
	switch (domain) {
   29994:	2801      	cmp	r0, #1
   29996:	d101      	bne.n	2999c <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   29998:	f7da bc0c 	b.w	41b4 <mpsl_clock_hfclk_release>
}
   2999c:	4770      	bx	lr

0002999e <nrfx_clock_enable>:
}
   2999e:	4770      	bx	lr

000299a0 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   299a0:	f7da ba1c 	b.w	3ddc <MPSL_IRQ_CLOCK_Handler>

000299a4 <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   299a4:	f7da bdd6 	b.w	4554 <mpsl_is_initialized>

000299a8 <nrf_flash_sync_get_timestamp_begin>:
}
   299a8:	4770      	bx	lr

000299aa <temp_nrf5_mpsl_init>:
	(void)dev;

	LOG_DBG("");

	return 0;
}
   299aa:	2000      	movs	r0, #0
   299ac:	4770      	bx	lr

000299ae <temp_nrf5_mpsl_sample_fetch>:
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   299ae:	2939      	cmp	r1, #57	; 0x39
{
   299b0:	b510      	push	{r4, lr}
	struct temp_nrf5_mpsl_data *data = dev->data;
   299b2:	6904      	ldr	r4, [r0, #16]
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   299b4:	d001      	beq.n	299ba <temp_nrf5_mpsl_sample_fetch+0xc>
   299b6:	290c      	cmp	r1, #12
   299b8:	d104      	bne.n	299c4 <temp_nrf5_mpsl_sample_fetch+0x16>
	data->sample = mpsl_temperature_get();
   299ba:	f7da fde3 	bl	4584 <mpsl_temperature_get>
   299be:	6020      	str	r0, [r4, #0]
	return 0;
   299c0:	2000      	movs	r0, #0
}
   299c2:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   299c4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   299c8:	e7fb      	b.n	299c2 <temp_nrf5_mpsl_sample_fetch+0x14>

000299ca <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   299ca:	f7f9 b881 	b.w	22ad0 <nrf_cc3xx_platform_init>

000299ce <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   299ce:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   299d0:	f7ea fa4c 	bl	13e6c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   299d4:	f7ea fafe 	bl	13fd4 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   299d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   299dc:	f7f9 b878 	b.w	22ad0 <nrf_cc3xx_platform_init>

000299e0 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   299e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   299e4:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   299e8:	f1a0 0308 	sub.w	r3, r0, #8
   299ec:	4258      	negs	r0, r3
   299ee:	4158      	adcs	r0, r3
   299f0:	4770      	bx	lr

000299f2 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   299f2:	4700      	bx	r0

000299f4 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   299f4:	f000 bd26 	b.w	2a444 <z_impl_k_busy_wait>

000299f8 <nrf_gpio_reconfigure>:
{
   299f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   299fa:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   299fc:	a801      	add	r0, sp, #4
{
   299fe:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   29a02:	4617      	mov	r7, r2
   29a04:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29a06:	f7f6 fb0f 	bl	20028 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   29a0a:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   29a0c:	2f00      	cmp	r7, #0
   29a0e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   29a12:	bf14      	ite	ne
   29a14:	2302      	movne	r3, #2
   29a16:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   29a18:	2900      	cmp	r1, #0
   29a1a:	bf18      	it	ne
   29a1c:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   29a20:	2d00      	cmp	r5, #0
   29a22:	bf14      	ite	ne
   29a24:	f04f 0c0c 	movne.w	ip, #12
   29a28:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   29a2c:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   29a2e:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   29a32:	bf14      	ite	ne
   29a34:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   29a38:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   29a3c:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   29a3e:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   29a42:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   29a46:	bf14      	ite	ne
   29a48:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   29a4c:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   29a50:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   29a54:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   29a58:	b101      	cbz	r1, 29a5c <nrf_gpio_reconfigure+0x64>
   29a5a:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   29a5c:	b10f      	cbz	r7, 29a62 <nrf_gpio_reconfigure+0x6a>
   29a5e:	783f      	ldrb	r7, [r7, #0]
   29a60:	007f      	lsls	r7, r7, #1
   29a62:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   29a64:	b10d      	cbz	r5, 29a6a <nrf_gpio_reconfigure+0x72>
   29a66:	782d      	ldrb	r5, [r5, #0]
   29a68:	00ad      	lsls	r5, r5, #2
   29a6a:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   29a6c:	b10c      	cbz	r4, 29a72 <nrf_gpio_reconfigure+0x7a>
   29a6e:	7822      	ldrb	r2, [r4, #0]
   29a70:	0214      	lsls	r4, r2, #8
   29a72:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   29a74:	b10e      	cbz	r6, 29a7a <nrf_gpio_reconfigure+0x82>
   29a76:	7836      	ldrb	r6, [r6, #0]
   29a78:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   29a7a:	432c      	orrs	r4, r5
   29a7c:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   29a7e:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   29a82:	b003      	add	sp, #12
   29a84:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029a86 <nrf_gpio_cfg_sense_set>:
{
   29a86:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   29a88:	f10d 030f 	add.w	r3, sp, #15
   29a8c:	9301      	str	r3, [sp, #4]
   29a8e:	2300      	movs	r3, #0
{
   29a90:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   29a94:	9300      	str	r3, [sp, #0]
   29a96:	461a      	mov	r2, r3
   29a98:	4619      	mov	r1, r3
   29a9a:	f7ff ffad 	bl	299f8 <nrf_gpio_reconfigure>
}
   29a9e:	b005      	add	sp, #20
   29aa0:	f85d fb04 	ldr.w	pc, [sp], #4

00029aa4 <nrfx_nvmc_flash_size_get>:
   29aa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29aa8:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   29aaa:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   29aac:	4350      	muls	r0, r2
   29aae:	4770      	bx	lr

00029ab0 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   29ab0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29ab4:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   29ab6:	4770      	bx	lr

00029ab8 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   29ab8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29abc:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   29abe:	4770      	bx	lr

00029ac0 <nrf_gpio_cfg_default>:
{
   29ac0:	b507      	push	{r0, r1, r2, lr}
   29ac2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29ac4:	a801      	add	r0, sp, #4
   29ac6:	f7f6 fe49 	bl	2075c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   29aca:	9b01      	ldr	r3, [sp, #4]
   29acc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   29ad0:	2202      	movs	r2, #2
   29ad2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   29ad6:	b003      	add	sp, #12
   29ad8:	f85d fb04 	ldr.w	pc, [sp], #4

00029adc <nrf_gpio_pin_set>:
{
   29adc:	b507      	push	{r0, r1, r2, lr}
   29ade:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29ae0:	a801      	add	r0, sp, #4
   29ae2:	f7f6 fe3b 	bl	2075c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   29ae6:	9a01      	ldr	r2, [sp, #4]
   29ae8:	2301      	movs	r3, #1
   29aea:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   29aec:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   29af0:	b003      	add	sp, #12
   29af2:	f85d fb04 	ldr.w	pc, [sp], #4

00029af6 <nrf_gpio_pin_clear>:
{
   29af6:	b507      	push	{r0, r1, r2, lr}
   29af8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29afa:	a801      	add	r0, sp, #4
   29afc:	f7f6 fe2e 	bl	2075c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   29b00:	9a01      	ldr	r2, [sp, #4]
   29b02:	2301      	movs	r3, #1
   29b04:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   29b06:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   29b0a:	b003      	add	sp, #12
   29b0c:	f85d fb04 	ldr.w	pc, [sp], #4

00029b10 <transfer_byte>:
{
   29b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   29b12:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   29b16:	698a      	ldr	r2, [r1, #24]
   29b18:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   29b1a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   29b1e:	6a0b      	ldr	r3, [r1, #32]
   29b20:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   29b22:	bf3e      	ittt	cc
   29b24:	694a      	ldrcc	r2, [r1, #20]
   29b26:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   29b2a:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   29b2c:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   29b2e:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   29b32:	1c53      	adds	r3, r2, #1
   29b34:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   29b36:	3202      	adds	r2, #2
    if (p_cb->abort)
   29b38:	b13c      	cbz	r4, 29b4a <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   29b3a:	690c      	ldr	r4, [r1, #16]
   29b3c:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   29b3e:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   29b40:	bf38      	it	cc
   29b42:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   29b44:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   29b46:	bf88      	it	hi
   29b48:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   29b4a:	690d      	ldr	r5, [r1, #16]
   29b4c:	4295      	cmp	r5, r2
   29b4e:	d905      	bls.n	29b5c <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   29b50:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   29b52:	5c9b      	ldrb	r3, [r3, r2]
   29b54:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   29b58:	2001      	movs	r0, #1
   29b5a:	e00a      	b.n	29b72 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   29b5c:	698c      	ldr	r4, [r1, #24]
   29b5e:	4294      	cmp	r4, r2
   29b60:	d901      	bls.n	29b66 <transfer_byte+0x56>
   29b62:	7fcb      	ldrb	r3, [r1, #31]
   29b64:	e7f6      	b.n	29b54 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   29b66:	42ab      	cmp	r3, r5
   29b68:	d3f6      	bcc.n	29b58 <transfer_byte+0x48>
   29b6a:	42a3      	cmp	r3, r4
   29b6c:	bf2c      	ite	cs
   29b6e:	2000      	movcs	r0, #0
   29b70:	2001      	movcc	r0, #1
}
   29b72:	b003      	add	sp, #12
   29b74:	bd30      	pop	{r4, r5, pc}

00029b76 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   29b76:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   29b78:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   29b7a:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   29b7c:	bf9c      	itt	ls
   29b7e:	6880      	ldrls	r0, [r0, #8]
   29b80:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   29b82:	3b01      	subs	r3, #1
   29b84:	1a98      	subs	r0, r3, r2
}
   29b86:	4770      	bx	lr

00029b88 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   29b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   29b8c:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   29b90:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   29b92:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   29b96:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   29b98:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   29b9a:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   29b9c:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   29b9e:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   29ba0:	d904      	bls.n	29bac <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   29ba2:	f7fd f8b9 	bl	26d18 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   29ba6:	60ec      	str	r4, [r5, #12]
}
   29ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   29bac:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   29bae:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   29bb2:	f7fd f8b1 	bl	26d18 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   29bb6:	6868      	ldr	r0, [r5, #4]
   29bb8:	4622      	mov	r2, r4
   29bba:	eb07 0108 	add.w	r1, r7, r8
   29bbe:	e7f0      	b.n	29ba2 <_WriteNoCheck+0x1a>

00029bc0 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   29bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   29bc4:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   29bc6:	4606      	mov	r6, r0
   29bc8:	4689      	mov	r9, r1
   29bca:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   29bcc:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   29bd0:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   29bd2:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   29bd4:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   29bd6:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   29bd8:	bf28      	it	cs
   29bda:	18e4      	addcs	r4, r4, r3
   29bdc:	3c01      	subs	r4, #1
   29bde:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   29be0:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   29be2:	42bc      	cmp	r4, r7
   29be4:	bf28      	it	cs
   29be6:	463c      	movcs	r4, r7
   29be8:	4294      	cmp	r4, r2
   29bea:	bf28      	it	cs
   29bec:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   29bee:	4649      	mov	r1, r9
   29bf0:	4428      	add	r0, r5
   29bf2:	4622      	mov	r2, r4
   29bf4:	f7fd f890 	bl	26d18 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   29bf8:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   29bfa:	4425      	add	r5, r4
      WrOff = 0u;
   29bfc:	42ab      	cmp	r3, r5
   29bfe:	bf08      	it	eq
   29c00:	2500      	moveq	r5, #0
  } while (NumBytes);
   29c02:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   29c04:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   29c06:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   29c08:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   29c0a:	d1e1      	bne.n	29bd0 <_WriteBlocking+0x10>
}
   29c0c:	4640      	mov	r0, r8
   29c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00029c12 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   29c12:	f7f6 bf33 	b.w	20a7c <_DoInit>

00029c16 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   29c16:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   29c18:	f7ff fffb 	bl	29c12 <SEGGER_RTT_Init>

	return 0;
}
   29c1c:	2000      	movs	r0, #0
   29c1e:	bd08      	pop	{r3, pc}

00029c20 <z_device_state_init>:
}
   29c20:	4770      	bx	lr

00029c22 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   29c22:	b138      	cbz	r0, 29c34 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   29c24:	68c3      	ldr	r3, [r0, #12]
   29c26:	8818      	ldrh	r0, [r3, #0]
   29c28:	f3c0 0008 	ubfx	r0, r0, #0, #9
   29c2c:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   29c30:	4258      	negs	r0, r3
   29c32:	4158      	adcs	r0, r3
}
   29c34:	4770      	bx	lr

00029c36 <z_early_memset>:
	(void) memset(dst, c, n);
   29c36:	f7fd b87a 	b.w	26d2e <memset>

00029c3a <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   29c3a:	f7fd b86d 	b.w	26d18 <memcpy>

00029c3e <k_heap_init>:
{
   29c3e:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   29c40:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   29c44:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   29c48:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   29c4a:	f7fc b9a1 	b.w	25f90 <sys_heap_init>

00029c4e <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   29c4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29c52:	b085      	sub	sp, #20
   29c54:	4606      	mov	r6, r0
   29c56:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   29c58:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   29c5c:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   29c5e:	f000 fbf5 	bl	2a44c <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   29c62:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   29c66:	4605      	mov	r5, r0
   29c68:	460f      	mov	r7, r1
	__asm__ volatile(
   29c6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   29c6e:	f3ef 8411 	mrs	r4, BASEPRI
   29c72:	f383 8812 	msr	BASEPRI_MAX, r3
   29c76:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   29c7a:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   29c7e:	464a      	mov	r2, r9
   29c80:	4641      	mov	r1, r8
   29c82:	4630      	mov	r0, r6
   29c84:	f7fc f91c 	bl	25ec0 <sys_heap_aligned_alloc>
   29c88:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   29c8a:	f7f8 fa35 	bl	220f8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   29c8e:	9b03      	ldr	r3, [sp, #12]
   29c90:	b13b      	cbz	r3, 29ca2 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   29c92:	f384 8811 	msr	BASEPRI, r4
   29c96:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   29c9a:	4618      	mov	r0, r3
   29c9c:	b005      	add	sp, #20
   29c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   29ca2:	1a28      	subs	r0, r5, r0
   29ca4:	eb67 0101 	sbc.w	r1, r7, r1
   29ca8:	2801      	cmp	r0, #1
   29caa:	f171 0200 	sbcs.w	r2, r1, #0
   29cae:	dbf0      	blt.n	29c92 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   29cb0:	e9cd 0100 	strd	r0, r1, [sp]
   29cb4:	465a      	mov	r2, fp
   29cb6:	4621      	mov	r1, r4
   29cb8:	4650      	mov	r0, sl
   29cba:	f7f7 fef9 	bl	21ab0 <z_pend_curr>
	__asm__ volatile(
   29cbe:	f04f 0340 	mov.w	r3, #64	; 0x40
   29cc2:	f3ef 8411 	mrs	r4, BASEPRI
   29cc6:	f383 8812 	msr	BASEPRI_MAX, r3
   29cca:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   29cce:	e7d6      	b.n	29c7e <k_heap_aligned_alloc+0x30>

00029cd0 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   29cd0:	b538      	push	{r3, r4, r5, lr}
   29cd2:	4604      	mov	r4, r0
   29cd4:	f04f 0340 	mov.w	r3, #64	; 0x40
   29cd8:	f3ef 8511 	mrs	r5, BASEPRI
   29cdc:	f383 8812 	msr	BASEPRI_MAX, r3
   29ce0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   29ce4:	f7fc f8b4 	bl	25e50 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   29ce8:	f104 000c 	add.w	r0, r4, #12
   29cec:	f000 fb37 	bl	2a35e <z_unpend_all>
   29cf0:	b130      	cbz	r0, 29d00 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   29cf2:	4629      	mov	r1, r5
   29cf4:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   29cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   29cfc:	f7f7 bd84 	b.w	21808 <z_reschedule>
	__asm__ volatile(
   29d00:	f385 8811 	msr	BASEPRI, r5
   29d04:	f3bf 8f6f 	isb	sy
}
   29d08:	bd38      	pop	{r3, r4, r5, pc}

00029d0a <k_mem_slab_init>:
{
   29d0a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   29d0c:	2400      	movs	r4, #0
   29d0e:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   29d10:	ea41 0402 	orr.w	r4, r1, r2
   29d14:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   29d18:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   29d1c:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   29d1e:	d10c      	bne.n	29d3a <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   29d20:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   29d22:	42a3      	cmp	r3, r4
   29d24:	d103      	bne.n	29d2e <k_mem_slab_init+0x24>
   29d26:	e9c0 0000 	strd	r0, r0, [r0]
}
   29d2a:	2000      	movs	r0, #0
}
   29d2c:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   29d2e:	6945      	ldr	r5, [r0, #20]
   29d30:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   29d32:	3401      	adds	r4, #1
		slab->free_list = p;
   29d34:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   29d36:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   29d38:	e7f3      	b.n	29d22 <k_mem_slab_init+0x18>
		return -EINVAL;
   29d3a:	f06f 0015 	mvn.w	r0, #21
	return rc;
   29d3e:	e7f5      	b.n	29d2c <k_mem_slab_init+0x22>

00029d40 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   29d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29d42:	4604      	mov	r4, r0
   29d44:	460d      	mov	r5, r1
	__asm__ volatile(
   29d46:	f04f 0340 	mov.w	r3, #64	; 0x40
   29d4a:	f3ef 8611 	mrs	r6, BASEPRI
   29d4e:	f383 8812 	msr	BASEPRI_MAX, r3
   29d52:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   29d56:	6947      	ldr	r7, [r0, #20]
   29d58:	b977      	cbnz	r7, 29d78 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   29d5a:	f000 fae8 	bl	2a32e <z_unpend_first_thread>

		if (pending_thread != NULL) {
   29d5e:	b158      	cbz	r0, 29d78 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   29d60:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   29d62:	6142      	str	r2, [r0, #20]
   29d64:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   29d66:	f000 fa71 	bl	2a24c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   29d6a:	4631      	mov	r1, r6
   29d6c:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   29d70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   29d74:	f7f7 bd48 	b.w	21808 <z_reschedule>
	**(char ***) mem = slab->free_list;
   29d78:	682b      	ldr	r3, [r5, #0]
   29d7a:	6962      	ldr	r2, [r4, #20]
   29d7c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   29d7e:	682b      	ldr	r3, [r5, #0]
   29d80:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   29d82:	69a3      	ldr	r3, [r4, #24]
   29d84:	3b01      	subs	r3, #1
   29d86:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   29d88:	f386 8811 	msr	BASEPRI, r6
   29d8c:	f3bf 8f6f 	isb	sy
}
   29d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029d92 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   29d92:	f3ef 8005 	mrs	r0, IPSR
}
   29d96:	3800      	subs	r0, #0
   29d98:	bf18      	it	ne
   29d9a:	2001      	movne	r0, #1
   29d9c:	4770      	bx	lr

00029d9e <z_impl_k_thread_name_set>:
}
   29d9e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   29da2:	4770      	bx	lr

00029da4 <k_thread_name_get>:
}
   29da4:	2000      	movs	r0, #0
   29da6:	4770      	bx	lr

00029da8 <z_impl_k_thread_start>:
	z_sched_start(thread);
   29da8:	f7f7 be26 	b.w	219f8 <z_sched_start>

00029dac <z_pm_save_idle_exit>:
{
   29dac:	b508      	push	{r3, lr}
	pm_system_resume();
   29dae:	f7e9 fef9 	bl	13ba4 <pm_system_resume>
}
   29db2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   29db6:	f7ff bc98 	b.w	296ea <sys_clock_idle_exit>

00029dba <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   29dba:	f990 300e 	ldrsb.w	r3, [r0, #14]
   29dbe:	428b      	cmp	r3, r1
   29dc0:	d001      	beq.n	29dc6 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   29dc2:	f7f7 be89 	b.w	21ad8 <z_set_prio>
}
   29dc6:	2000      	movs	r0, #0
   29dc8:	4770      	bx	lr

00029dca <z_impl_k_mutex_init>:
{
   29dca:	4603      	mov	r3, r0
	mutex->owner = NULL;
   29dcc:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   29dce:	e9c3 0002 	strd	r0, r0, [r3, #8]
   29dd2:	e9c3 3300 	strd	r3, r3, [r3]
}
   29dd6:	4770      	bx	lr

00029dd8 <queue_insert>:
{
   29dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29ddc:	4699      	mov	r9, r3
   29dde:	4604      	mov	r4, r0
   29de0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   29de4:	460d      	mov	r5, r1
   29de6:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   29de8:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   29dec:	f04f 0240 	mov.w	r2, #64	; 0x40
   29df0:	f3ef 8711 	mrs	r7, BASEPRI
   29df4:	f382 8812 	msr	BASEPRI_MAX, r2
   29df8:	f3bf 8f6f 	isb	sy
	if (is_append) {
   29dfc:	b103      	cbz	r3, 29e00 <queue_insert+0x28>
	return list->tail;
   29dfe:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   29e00:	4630      	mov	r0, r6
   29e02:	f000 fa94 	bl	2a32e <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   29e06:	b158      	cbz	r0, 29e20 <queue_insert+0x48>
   29e08:	2400      	movs	r4, #0
   29e0a:	67c4      	str	r4, [r0, #124]	; 0x7c
   29e0c:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   29e10:	f000 fa1c 	bl	2a24c <z_ready_thread>
	z_reschedule(&queue->lock, key);
   29e14:	4630      	mov	r0, r6
   29e16:	4639      	mov	r1, r7
   29e18:	f7f7 fcf6 	bl	21808 <z_reschedule>
	return 0;
   29e1c:	2000      	movs	r0, #0
   29e1e:	e00c      	b.n	29e3a <queue_insert+0x62>
	if (alloc) {
   29e20:	f1b9 0f00 	cmp.w	r9, #0
   29e24:	d01b      	beq.n	29e5e <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   29e26:	2108      	movs	r1, #8
   29e28:	f7f8 fac0 	bl	223ac <z_thread_aligned_alloc>
		if (anode == NULL) {
   29e2c:	b938      	cbnz	r0, 29e3e <queue_insert+0x66>
	__asm__ volatile(
   29e2e:	f387 8811 	msr	BASEPRI, r7
   29e32:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   29e36:	f06f 000b 	mvn.w	r0, #11
}
   29e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   29e3e:	2301      	movs	r3, #1
		anode->data = data;
   29e40:	f8c0 8004 	str.w	r8, [r0, #4]
   29e44:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   29e46:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   29e48:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   29e4c:	b95d      	cbnz	r5, 29e66 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   29e4e:	6823      	ldr	r3, [r4, #0]
   29e50:	4313      	orrs	r3, r2
   29e52:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   29e54:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   29e56:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   29e58:	b973      	cbnz	r3, 29e78 <queue_insert+0xa0>
	list->tail = node;
   29e5a:	6060      	str	r0, [r4, #4]
}
   29e5c:	e00c      	b.n	29e78 <queue_insert+0xa0>
	node->next_and_flags = flags;
   29e5e:	f8c8 9000 	str.w	r9, [r8]
}
   29e62:	4640      	mov	r0, r8
   29e64:	e7ef      	b.n	29e46 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   29e66:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   29e68:	f033 0303 	bics.w	r3, r3, #3
   29e6c:	d110      	bne.n	29e90 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   29e6e:	6002      	str	r2, [r0, #0]
	return list->tail;
   29e70:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   29e72:	b93a      	cbnz	r2, 29e84 <queue_insert+0xac>
	list->head = node;
   29e74:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   29e78:	2104      	movs	r1, #4
   29e7a:	f104 0010 	add.w	r0, r4, #16
   29e7e:	f000 fc68 	bl	2a752 <z_handle_obj_poll_events>
   29e82:	e7c7      	b.n	29e14 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   29e84:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   29e86:	f003 0303 	and.w	r3, r3, #3
   29e8a:	4303      	orrs	r3, r0
   29e8c:	6013      	str	r3, [r2, #0]
   29e8e:	e7e4      	b.n	29e5a <queue_insert+0x82>
   29e90:	4313      	orrs	r3, r2
   29e92:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   29e94:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   29e96:	f003 0303 	and.w	r3, r3, #3
   29e9a:	4303      	orrs	r3, r0
   29e9c:	602b      	str	r3, [r5, #0]
}
   29e9e:	e7eb      	b.n	29e78 <queue_insert+0xa0>

00029ea0 <z_queue_node_peek>:
{
   29ea0:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   29ea2:	4604      	mov	r4, r0
   29ea4:	b130      	cbz	r0, 29eb4 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   29ea6:	6802      	ldr	r2, [r0, #0]
   29ea8:	0793      	lsls	r3, r2, #30
   29eaa:	d003      	beq.n	29eb4 <z_queue_node_peek+0x14>
		ret = anode->data;
   29eac:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   29eae:	b109      	cbz	r1, 29eb4 <z_queue_node_peek+0x14>
			k_free(anode);
   29eb0:	f000 fc65 	bl	2a77e <k_free>
}
   29eb4:	4620      	mov	r0, r4
   29eb6:	bd10      	pop	{r4, pc}

00029eb8 <z_impl_k_queue_init>:
	list->head = NULL;
   29eb8:	2300      	movs	r3, #0
	list->tail = NULL;
   29eba:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   29ebe:	f100 0308 	add.w	r3, r0, #8
   29ec2:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   29ec6:	f100 0310 	add.w	r3, r0, #16
   29eca:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   29ece:	4770      	bx	lr

00029ed0 <k_queue_append>:
{
   29ed0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   29ed2:	2301      	movs	r3, #1
   29ed4:	9300      	str	r3, [sp, #0]
   29ed6:	2300      	movs	r3, #0
{
   29ed8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   29eda:	4619      	mov	r1, r3
   29edc:	f7ff ff7c 	bl	29dd8 <queue_insert>
}
   29ee0:	b003      	add	sp, #12
   29ee2:	f85d fb04 	ldr.w	pc, [sp], #4

00029ee6 <k_queue_prepend>:
{
   29ee6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   29ee8:	2300      	movs	r3, #0
{
   29eea:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   29eec:	9300      	str	r3, [sp, #0]
   29eee:	4619      	mov	r1, r3
   29ef0:	f7ff ff72 	bl	29dd8 <queue_insert>
}
   29ef4:	b003      	add	sp, #12
   29ef6:	f85d fb04 	ldr.w	pc, [sp], #4

00029efa <k_queue_append_list>:
{
   29efa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29efe:	4605      	mov	r5, r0
   29f00:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   29f02:	460c      	mov	r4, r1
   29f04:	b391      	cbz	r1, 29f6c <k_queue_append_list+0x72>
   29f06:	b38a      	cbz	r2, 29f6c <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   29f08:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   29f0c:	f04f 0340 	mov.w	r3, #64	; 0x40
   29f10:	f3ef 8811 	mrs	r8, BASEPRI
   29f14:	f383 8812 	msr	BASEPRI_MAX, r3
   29f18:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   29f1c:	4638      	mov	r0, r7
   29f1e:	f000 fa06 	bl	2a32e <z_unpend_first_thread>
   29f22:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   29f26:	b920      	cbnz	r0, 29f32 <k_queue_append_list+0x38>
	return list->tail;
   29f28:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   29f2a:	b9ca      	cbnz	r2, 29f60 <k_queue_append_list+0x66>
	list->head = node;
   29f2c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   29f2e:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   29f30:	e00a      	b.n	29f48 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   29f32:	6144      	str	r4, [r0, #20]
   29f34:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   29f38:	f000 f988 	bl	2a24c <z_ready_thread>
		head = *(void **)head;
   29f3c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   29f3e:	4638      	mov	r0, r7
   29f40:	f000 f9f5 	bl	2a32e <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   29f44:	2c00      	cmp	r4, #0
   29f46:	d1ee      	bne.n	29f26 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   29f48:	2104      	movs	r1, #4
   29f4a:	f105 0010 	add.w	r0, r5, #16
   29f4e:	f000 fc00 	bl	2a752 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   29f52:	4638      	mov	r0, r7
   29f54:	4641      	mov	r1, r8
   29f56:	f7f7 fc57 	bl	21808 <z_reschedule>
	return 0;
   29f5a:	2000      	movs	r0, #0
}
   29f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   29f60:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   29f62:	f003 0303 	and.w	r3, r3, #3
   29f66:	431c      	orrs	r4, r3
   29f68:	6014      	str	r4, [r2, #0]
}
   29f6a:	e7e0      	b.n	29f2e <k_queue_append_list+0x34>
		return -EINVAL;
   29f6c:	f06f 0015 	mvn.w	r0, #21
   29f70:	e7f4      	b.n	29f5c <k_queue_append_list+0x62>

00029f72 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   29f72:	b15a      	cbz	r2, 29f8c <z_impl_k_sem_init+0x1a>
   29f74:	428a      	cmp	r2, r1
   29f76:	d309      	bcc.n	29f8c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   29f78:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   29f7c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   29f80:	e9c0 0000 	strd	r0, r0, [r0]
   29f84:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   29f88:	2000      	movs	r0, #0
   29f8a:	4770      	bx	lr
		return -EINVAL;
   29f8c:	f06f 0015 	mvn.w	r0, #21
}
   29f90:	4770      	bx	lr

00029f92 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   29f92:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   29f94:	2301      	movs	r3, #1
   29f96:	408b      	lsls	r3, r1
   29f98:	ea22 0303 	bic.w	r3, r2, r3
   29f9c:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   29f9e:	fa22 f001 	lsr.w	r0, r2, r1
}
   29fa2:	f000 0001 	and.w	r0, r0, #1
   29fa6:	4770      	bx	lr

00029fa8 <unschedule_locked>:
{
   29fa8:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   29faa:	2103      	movs	r1, #3
{
   29fac:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   29fae:	300c      	adds	r0, #12
   29fb0:	f7ff ffef 	bl	29f92 <flag_test_and_clear>
   29fb4:	4604      	mov	r4, r0
   29fb6:	b118      	cbz	r0, 29fc0 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   29fb8:	f105 0010 	add.w	r0, r5, #16
   29fbc:	f000 f9fc 	bl	2a3b8 <z_abort_timeout>
}
   29fc0:	4620      	mov	r0, r4
   29fc2:	bd38      	pop	{r3, r4, r5, pc}

00029fc4 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   29fc4:	b120      	cbz	r0, 29fd0 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   29fc6:	2200      	movs	r2, #0
   29fc8:	4611      	mov	r1, r2
   29fca:	3088      	adds	r0, #136	; 0x88
   29fcc:	f000 b9d7 	b.w	2a37e <z_sched_wake>
}
   29fd0:	4770      	bx	lr

00029fd2 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   29fd2:	68c3      	ldr	r3, [r0, #12]
{
   29fd4:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29fd6:	f3c3 0540 	ubfx	r5, r3, #1, #1
   29fda:	079b      	lsls	r3, r3, #30
{
   29fdc:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29fde:	d416      	bmi.n	2a00e <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   29fe0:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   29fe2:	2102      	movs	r1, #2
   29fe4:	300c      	adds	r0, #12
   29fe6:	f7ff ffd4 	bl	29f92 <flag_test_and_clear>
   29fea:	b180      	cbz	r0, 2a00e <cancel_async_locked+0x3c>
	return list->head;
   29fec:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29ff0:	b16a      	cbz	r2, 2a00e <cancel_async_locked+0x3c>
   29ff2:	4294      	cmp	r4, r2
   29ff4:	d11b      	bne.n	2a02e <cancel_async_locked+0x5c>
	return node->next;
   29ff6:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   29ff8:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   29ffc:	b98d      	cbnz	r5, 2a022 <cancel_async_locked+0x50>
   29ffe:	428c      	cmp	r4, r1
	list->head = node;
   2a000:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2a004:	d101      	bne.n	2a00a <cancel_async_locked+0x38>
	list->tail = node;
   2a006:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   2a00a:	2300      	movs	r3, #0
   2a00c:	6023      	str	r3, [r4, #0]
	return *flagp;
   2a00e:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2a010:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2a014:	bf1e      	ittt	ne
   2a016:	f043 0302 	orrne.w	r3, r3, #2
   2a01a:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2a01c:	f003 000f 	andne.w	r0, r3, #15
}
   2a020:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   2a022:	428c      	cmp	r4, r1
	parent->next = child;
   2a024:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2a026:	bf08      	it	eq
   2a028:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   2a02c:	e7ed      	b.n	2a00a <cancel_async_locked+0x38>
	return node->next;
   2a02e:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a030:	6812      	ldr	r2, [r2, #0]
   2a032:	e7dd      	b.n	29ff0 <cancel_async_locked+0x1e>

0002a034 <work_timeout>:
{
   2a034:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2a036:	4604      	mov	r4, r0
   2a038:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a03c:	f3ef 8511 	mrs	r5, BASEPRI
   2a040:	f383 8812 	msr	BASEPRI_MAX, r3
   2a044:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2a048:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2a04a:	f1a0 0610 	sub.w	r6, r0, #16
   2a04e:	2103      	movs	r1, #3
   2a050:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   2a052:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2a054:	f7ff ff9d 	bl	29f92 <flag_test_and_clear>
   2a058:	b128      	cbz	r0, 2a066 <work_timeout+0x32>
		queue = dw->queue;
   2a05a:	69a3      	ldr	r3, [r4, #24]
   2a05c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2a05e:	a901      	add	r1, sp, #4
   2a060:	4630      	mov	r0, r6
   2a062:	f7f7 fa99 	bl	21598 <submit_to_queue_locked>
	__asm__ volatile(
   2a066:	f385 8811 	msr	BASEPRI, r5
   2a06a:	f3bf 8f6f 	isb	sy
}
   2a06e:	b002      	add	sp, #8
   2a070:	bd70      	pop	{r4, r5, r6, pc}

0002a072 <k_work_init>:
{
   2a072:	b538      	push	{r3, r4, r5, lr}
   2a074:	4604      	mov	r4, r0
   2a076:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2a078:	2210      	movs	r2, #16
   2a07a:	2100      	movs	r1, #0
   2a07c:	f7fc fe57 	bl	26d2e <memset>
   2a080:	6065      	str	r5, [r4, #4]
}
   2a082:	bd38      	pop	{r3, r4, r5, pc}

0002a084 <k_work_busy_get>:
	__asm__ volatile(
   2a084:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a088:	f3ef 8311 	mrs	r3, BASEPRI
   2a08c:	f382 8812 	msr	BASEPRI_MAX, r2
   2a090:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   2a094:	68c0      	ldr	r0, [r0, #12]
   2a096:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   2a09a:	f383 8811 	msr	BASEPRI, r3
   2a09e:	f3bf 8f6f 	isb	sy
}
   2a0a2:	4770      	bx	lr

0002a0a4 <z_work_submit_to_queue>:
{
   2a0a4:	b513      	push	{r0, r1, r4, lr}
   2a0a6:	9001      	str	r0, [sp, #4]
   2a0a8:	4608      	mov	r0, r1
	__asm__ volatile(
   2a0aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a0ae:	f3ef 8411 	mrs	r4, BASEPRI
   2a0b2:	f383 8812 	msr	BASEPRI_MAX, r3
   2a0b6:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2a0ba:	a901      	add	r1, sp, #4
   2a0bc:	f7f7 fa6c 	bl	21598 <submit_to_queue_locked>
	__asm__ volatile(
   2a0c0:	f384 8811 	msr	BASEPRI, r4
   2a0c4:	f3bf 8f6f 	isb	sy
}
   2a0c8:	b002      	add	sp, #8
   2a0ca:	bd10      	pop	{r4, pc}

0002a0cc <k_work_submit_to_queue>:
{
   2a0cc:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2a0ce:	f7ff ffe9 	bl	2a0a4 <z_work_submit_to_queue>
	if (ret > 0) {
   2a0d2:	1e04      	subs	r4, r0, #0
   2a0d4:	dd09      	ble.n	2a0ea <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2a0d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a0da:	f3ef 8011 	mrs	r0, BASEPRI
   2a0de:	f383 8812 	msr	BASEPRI_MAX, r3
   2a0e2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2a0e6:	f000 f895 	bl	2a214 <z_reschedule_irqlock>
}
   2a0ea:	4620      	mov	r0, r4
   2a0ec:	bd10      	pop	{r4, pc}

0002a0ee <k_work_queue_init>:
{
   2a0ee:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   2a0f0:	22a0      	movs	r2, #160	; 0xa0
   2a0f2:	2100      	movs	r1, #0
   2a0f4:	f7fc fe1b 	bl	26d2e <memset>
}
   2a0f8:	bd08      	pop	{r3, pc}

0002a0fa <k_work_init_delayable>:
{
   2a0fa:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   2a0fc:	2230      	movs	r2, #48	; 0x30
{
   2a0fe:	4604      	mov	r4, r0
   2a100:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2a102:	2100      	movs	r1, #0
   2a104:	f7fc fe13 	bl	26d2e <memset>
   2a108:	f44f 7380 	mov.w	r3, #256	; 0x100
   2a10c:	6065      	str	r5, [r4, #4]
   2a10e:	60e3      	str	r3, [r4, #12]
}
   2a110:	bd38      	pop	{r3, r4, r5, pc}

0002a112 <k_work_delayable_busy_get>:
   2a112:	f7ff bfb7 	b.w	2a084 <k_work_busy_get>

0002a116 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2a116:	b538      	push	{r3, r4, r5, lr}
   2a118:	4604      	mov	r4, r0
   2a11a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a11e:	f3ef 8511 	mrs	r5, BASEPRI
   2a122:	f383 8812 	msr	BASEPRI_MAX, r3
   2a126:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2a12a:	f7ff ff3d 	bl	29fa8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2a12e:	4620      	mov	r0, r4
   2a130:	f7ff ff4f 	bl	29fd2 <cancel_async_locked>
	__asm__ volatile(
   2a134:	f385 8811 	msr	BASEPRI, r5
   2a138:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2a13c:	bd38      	pop	{r3, r4, r5, pc}

0002a13e <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2a13e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a140:	4604      	mov	r4, r0
   2a142:	460d      	mov	r5, r1
	__asm__ volatile(
   2a144:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a148:	f3ef 8711 	mrs	r7, BASEPRI
   2a14c:	f383 8812 	msr	BASEPRI_MAX, r3
   2a150:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   2a154:	68c3      	ldr	r3, [r0, #12]
   2a156:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2a15a:	2b00      	cmp	r3, #0
   2a15c:	bf14      	ite	ne
   2a15e:	2601      	movne	r6, #1
   2a160:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   2a162:	d009      	beq.n	2a178 <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   2a164:	f7ff ff20 	bl	29fa8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2a168:	4620      	mov	r0, r4
   2a16a:	f7ff ff32 	bl	29fd2 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2a16e:	4629      	mov	r1, r5
   2a170:	4620      	mov	r0, r4
   2a172:	f7f7 f9f3 	bl	2155c <cancel_sync_locked>
   2a176:	4603      	mov	r3, r0
	__asm__ volatile(
   2a178:	f387 8811 	msr	BASEPRI, r7
   2a17c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2a180:	b13b      	cbz	r3, 2a192 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   2a182:	f04f 32ff 	mov.w	r2, #4294967295
   2a186:	f04f 33ff 	mov.w	r3, #4294967295
   2a18a:	f105 0008 	add.w	r0, r5, #8
   2a18e:	f7f7 f8eb 	bl	21368 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2a192:	4630      	mov	r0, r6
   2a194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a196 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2a196:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2a19a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2a19c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2a19e:	2300      	movs	r3, #0
	node->prev = NULL;
   2a1a0:	e9c0 3300 	strd	r3, r3, [r0]
}
   2a1a4:	4770      	bx	lr

0002a1a6 <unpend_thread_no_timeout>:
{
   2a1a6:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   2a1a8:	f7ff fff5 	bl	2a196 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2a1ac:	7b43      	ldrb	r3, [r0, #13]
   2a1ae:	f023 0302 	bic.w	r3, r3, #2
   2a1b2:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   2a1b4:	2300      	movs	r3, #0
   2a1b6:	6083      	str	r3, [r0, #8]
}
   2a1b8:	bd08      	pop	{r3, pc}

0002a1ba <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2a1ba:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2a1be:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2a1c2:	4283      	cmp	r3, r0
		return b2 - b1;
   2a1c4:	bf14      	ite	ne
   2a1c6:	1ac0      	subne	r0, r0, r3
	return 0;
   2a1c8:	2000      	moveq	r0, #0
}
   2a1ca:	4770      	bx	lr

0002a1cc <z_unpend_thread_no_timeout>:
{
   2a1cc:	b508      	push	{r3, lr}
	__asm__ volatile(
   2a1ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a1d2:	f3ef 8111 	mrs	r1, BASEPRI
   2a1d6:	f383 8812 	msr	BASEPRI_MAX, r3
   2a1da:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2a1de:	f7ff ffe2 	bl	2a1a6 <unpend_thread_no_timeout>
	__asm__ volatile(
   2a1e2:	f381 8811 	msr	BASEPRI, r1
   2a1e6:	f3bf 8f6f 	isb	sy
}
   2a1ea:	bd08      	pop	{r3, pc}

0002a1ec <z_unpend_thread>:
{
   2a1ec:	b510      	push	{r4, lr}
	__asm__ volatile(
   2a1ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a1f2:	f3ef 8411 	mrs	r4, BASEPRI
   2a1f6:	f383 8812 	msr	BASEPRI_MAX, r3
   2a1fa:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2a1fe:	f7ff ffd2 	bl	2a1a6 <unpend_thread_no_timeout>
	__asm__ volatile(
   2a202:	f384 8811 	msr	BASEPRI, r4
   2a206:	f3bf 8f6f 	isb	sy
}
   2a20a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a20e:	3018      	adds	r0, #24
   2a210:	f000 b8d2 	b.w	2a3b8 <z_abort_timeout>

0002a214 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2a214:	4603      	mov	r3, r0
   2a216:	b920      	cbnz	r0, 2a222 <z_reschedule_irqlock+0xe>
   2a218:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2a21c:	b90a      	cbnz	r2, 2a222 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2a21e:	f7e9 bfed 	b.w	141fc <arch_swap>
   2a222:	f383 8811 	msr	BASEPRI, r3
   2a226:	f3bf 8f6f 	isb	sy
}
   2a22a:	4770      	bx	lr

0002a22c <z_reschedule_unlocked>:
	__asm__ volatile(
   2a22c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a230:	f3ef 8011 	mrs	r0, BASEPRI
   2a234:	f383 8812 	msr	BASEPRI_MAX, r3
   2a238:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2a23c:	f7ff bfea 	b.w	2a214 <z_reschedule_irqlock>

0002a240 <z_priq_dumb_best>:
{
   2a240:	4603      	mov	r3, r0
	return list->head == list;
   2a242:	6800      	ldr	r0, [r0, #0]
}
   2a244:	4283      	cmp	r3, r0
   2a246:	bf08      	it	eq
   2a248:	2000      	moveq	r0, #0
   2a24a:	4770      	bx	lr

0002a24c <z_ready_thread>:
{
   2a24c:	b510      	push	{r4, lr}
   2a24e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a252:	f3ef 8411 	mrs	r4, BASEPRI
   2a256:	f383 8812 	msr	BASEPRI_MAX, r3
   2a25a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2a25e:	f7f7 fb95 	bl	2198c <ready_thread>
	__asm__ volatile(
   2a262:	f384 8811 	msr	BASEPRI, r4
   2a266:	f3bf 8f6f 	isb	sy
}
   2a26a:	bd10      	pop	{r4, pc}

0002a26c <z_thread_timeout>:
{
   2a26c:	b510      	push	{r4, lr}
   2a26e:	4601      	mov	r1, r0
	__asm__ volatile(
   2a270:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a274:	f3ef 8411 	mrs	r4, BASEPRI
   2a278:	f383 8812 	msr	BASEPRI_MAX, r3
   2a27c:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2a280:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   2a284:	f013 0f28 	tst.w	r3, #40	; 0x28
   2a288:	d10d      	bne.n	2a2a6 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   2a28a:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2a28e:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   2a290:	b10b      	cbz	r3, 2a296 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   2a292:	f7ff ff88 	bl	2a1a6 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2a296:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   2a29a:	f023 0314 	bic.w	r3, r3, #20
   2a29e:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   2a2a2:	f7f7 fb73 	bl	2198c <ready_thread>
	__asm__ volatile(
   2a2a6:	f384 8811 	msr	BASEPRI, r4
   2a2aa:	f3bf 8f6f 	isb	sy
}
   2a2ae:	bd10      	pop	{r4, pc}

0002a2b0 <add_to_waitq_locked>:
{
   2a2b0:	b538      	push	{r3, r4, r5, lr}
   2a2b2:	4604      	mov	r4, r0
   2a2b4:	460d      	mov	r5, r1
	unready_thread(thread);
   2a2b6:	f7f7 fbbd 	bl	21a34 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2a2ba:	7b63      	ldrb	r3, [r4, #13]
   2a2bc:	f043 0302 	orr.w	r3, r3, #2
   2a2c0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2a2c2:	b195      	cbz	r5, 2a2ea <add_to_waitq_locked+0x3a>
   2a2c4:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2a2c6:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a2c8:	429d      	cmp	r5, r3
   2a2ca:	d015      	beq.n	2a2f8 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2a2cc:	b1a3      	cbz	r3, 2a2f8 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   2a2ce:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2a2d2:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   2a2d6:	4291      	cmp	r1, r2
   2a2d8:	d008      	beq.n	2a2ec <add_to_waitq_locked+0x3c>
		return b2 - b1;
   2a2da:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2a2dc:	2a00      	cmp	r2, #0
   2a2de:	dd05      	ble.n	2a2ec <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   2a2e0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2a2e2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2a2e6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2a2e8:	605c      	str	r4, [r3, #4]
}
   2a2ea:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2a2ec:	686a      	ldr	r2, [r5, #4]
   2a2ee:	4293      	cmp	r3, r2
   2a2f0:	d002      	beq.n	2a2f8 <add_to_waitq_locked+0x48>
   2a2f2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2a2f4:	2b00      	cmp	r3, #0
   2a2f6:	d1ec      	bne.n	2a2d2 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   2a2f8:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2a2fa:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2a2fe:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2a300:	606c      	str	r4, [r5, #4]
}
   2a302:	e7f2      	b.n	2a2ea <add_to_waitq_locked+0x3a>

0002a304 <z_unpend1_no_timeout>:
{
   2a304:	b510      	push	{r4, lr}
	__asm__ volatile(
   2a306:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a30a:	f3ef 8411 	mrs	r4, BASEPRI
   2a30e:	f383 8812 	msr	BASEPRI_MAX, r3
   2a312:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2a316:	f7ff ff93 	bl	2a240 <z_priq_dumb_best>
		if (thread != NULL) {
   2a31a:	4601      	mov	r1, r0
   2a31c:	b108      	cbz	r0, 2a322 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   2a31e:	f7ff ff42 	bl	2a1a6 <unpend_thread_no_timeout>
	__asm__ volatile(
   2a322:	f384 8811 	msr	BASEPRI, r4
   2a326:	f3bf 8f6f 	isb	sy
}
   2a32a:	4608      	mov	r0, r1
   2a32c:	bd10      	pop	{r4, pc}

0002a32e <z_unpend_first_thread>:
{
   2a32e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2a330:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a334:	f3ef 8511 	mrs	r5, BASEPRI
   2a338:	f383 8812 	msr	BASEPRI_MAX, r3
   2a33c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2a340:	f7ff ff7e 	bl	2a240 <z_priq_dumb_best>
		if (thread != NULL) {
   2a344:	4604      	mov	r4, r0
   2a346:	b120      	cbz	r0, 2a352 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   2a348:	f7ff ff2d 	bl	2a1a6 <unpend_thread_no_timeout>
   2a34c:	3018      	adds	r0, #24
   2a34e:	f000 f833 	bl	2a3b8 <z_abort_timeout>
	__asm__ volatile(
   2a352:	f385 8811 	msr	BASEPRI, r5
   2a356:	f3bf 8f6f 	isb	sy
}
   2a35a:	4620      	mov	r0, r4
   2a35c:	bd38      	pop	{r3, r4, r5, pc}

0002a35e <z_unpend_all>:
{
   2a35e:	b538      	push	{r3, r4, r5, lr}
   2a360:	4605      	mov	r5, r0
	int need_sched = 0;
   2a362:	2000      	movs	r0, #0
	return list->head == list;
   2a364:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a366:	42a5      	cmp	r5, r4
   2a368:	d000      	beq.n	2a36c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2a36a:	b904      	cbnz	r4, 2a36e <z_unpend_all+0x10>
}
   2a36c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2a36e:	4620      	mov	r0, r4
   2a370:	f7ff ff3c 	bl	2a1ec <z_unpend_thread>
		z_ready_thread(thread);
   2a374:	4620      	mov	r0, r4
   2a376:	f7ff ff69 	bl	2a24c <z_ready_thread>
		need_sched = 1;
   2a37a:	2001      	movs	r0, #1
   2a37c:	e7f2      	b.n	2a364 <z_unpend_all+0x6>

0002a37e <z_sched_wake>:
{
   2a37e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2a380:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a384:	f3ef 8511 	mrs	r5, BASEPRI
   2a388:	f383 8812 	msr	BASEPRI_MAX, r3
   2a38c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2a390:	f7ff ff56 	bl	2a240 <z_priq_dumb_best>
		if (thread != NULL) {
   2a394:	4604      	mov	r4, r0
   2a396:	b150      	cbz	r0, 2a3ae <z_sched_wake+0x30>
   2a398:	67c1      	str	r1, [r0, #124]	; 0x7c
   2a39a:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   2a39c:	f7ff ff03 	bl	2a1a6 <unpend_thread_no_timeout>
   2a3a0:	3018      	adds	r0, #24
   2a3a2:	f000 f809 	bl	2a3b8 <z_abort_timeout>
			ready_thread(thread);
   2a3a6:	4620      	mov	r0, r4
   2a3a8:	f7f7 faf0 	bl	2198c <ready_thread>
			ret = true;
   2a3ac:	2001      	movs	r0, #1
	__asm__ volatile(
   2a3ae:	f385 8811 	msr	BASEPRI, r5
   2a3b2:	f3bf 8f6f 	isb	sy
}
   2a3b6:	bd38      	pop	{r3, r4, r5, pc}

0002a3b8 <z_abort_timeout>:
{
   2a3b8:	b510      	push	{r4, lr}
	__asm__ volatile(
   2a3ba:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a3be:	f3ef 8411 	mrs	r4, BASEPRI
   2a3c2:	f382 8812 	msr	BASEPRI_MAX, r2
   2a3c6:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2a3ca:	6803      	ldr	r3, [r0, #0]
   2a3cc:	b13b      	cbz	r3, 2a3de <z_abort_timeout+0x26>
			remove_timeout(to);
   2a3ce:	f7f7 fda3 	bl	21f18 <remove_timeout>
			ret = 0;
   2a3d2:	2000      	movs	r0, #0
	__asm__ volatile(
   2a3d4:	f384 8811 	msr	BASEPRI, r4
   2a3d8:	f3bf 8f6f 	isb	sy
}
   2a3dc:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2a3de:	f06f 0015 	mvn.w	r0, #21
   2a3e2:	e7f7      	b.n	2a3d4 <z_abort_timeout+0x1c>

0002a3e4 <z_get_next_timeout_expiry>:
{
   2a3e4:	b510      	push	{r4, lr}
	__asm__ volatile(
   2a3e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a3ea:	f3ef 8411 	mrs	r4, BASEPRI
   2a3ee:	f383 8812 	msr	BASEPRI_MAX, r3
   2a3f2:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2a3f6:	f7f7 fd69 	bl	21ecc <next_timeout>
	__asm__ volatile(
   2a3fa:	f384 8811 	msr	BASEPRI, r4
   2a3fe:	f3bf 8f6f 	isb	sy
}
   2a402:	bd10      	pop	{r4, pc}

0002a404 <z_set_timeout_expiry>:
{
   2a404:	b570      	push	{r4, r5, r6, lr}
   2a406:	4604      	mov	r4, r0
   2a408:	460d      	mov	r5, r1
	__asm__ volatile(
   2a40a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a40e:	f3ef 8611 	mrs	r6, BASEPRI
   2a412:	f383 8812 	msr	BASEPRI_MAX, r3
   2a416:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2a41a:	f7f7 fd57 	bl	21ecc <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2a41e:	2801      	cmp	r0, #1
   2a420:	dd05      	ble.n	2a42e <z_set_timeout_expiry+0x2a>
   2a422:	42a0      	cmp	r0, r4
   2a424:	db03      	blt.n	2a42e <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2a426:	4629      	mov	r1, r5
   2a428:	4620      	mov	r0, r4
   2a42a:	f7f4 fb93 	bl	1eb54 <sys_clock_set_timeout>
	__asm__ volatile(
   2a42e:	f386 8811 	msr	BASEPRI, r6
   2a432:	f3bf 8f6f 	isb	sy
}
   2a436:	bd70      	pop	{r4, r5, r6, pc}

0002a438 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2a438:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2a43a:	f7f7 fe5d 	bl	220f8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2a43e:	bd08      	pop	{r3, pc}

0002a440 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2a440:	f7f7 be5a 	b.w	220f8 <sys_clock_tick_get>

0002a444 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2a444:	b108      	cbz	r0, 2a44a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2a446:	f7ea bbf7 	b.w	14c38 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2a44a:	4770      	bx	lr

0002a44c <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2a44c:	f1b1 3fff 	cmp.w	r1, #4294967295
   2a450:	bf08      	it	eq
   2a452:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2a456:	b538      	push	{r3, r4, r5, lr}
   2a458:	4605      	mov	r5, r0
   2a45a:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2a45c:	d01d      	beq.n	2a49a <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2a45e:	ea51 0300 	orrs.w	r3, r1, r0
   2a462:	d103      	bne.n	2a46c <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2a464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2a468:	f7f7 be46 	b.w	220f8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2a46c:	f06f 0301 	mvn.w	r3, #1
   2a470:	1a18      	subs	r0, r3, r0
   2a472:	f04f 33ff 	mov.w	r3, #4294967295
   2a476:	eb63 0101 	sbc.w	r1, r3, r1
   2a47a:	2900      	cmp	r1, #0
   2a47c:	da0c      	bge.n	2a498 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   2a47e:	f7f7 fe3b 	bl	220f8 <sys_clock_tick_get>
   2a482:	2d01      	cmp	r5, #1
   2a484:	4622      	mov	r2, r4
   2a486:	f174 0400 	sbcs.w	r4, r4, #0
   2a48a:	462b      	mov	r3, r5
   2a48c:	bfbc      	itt	lt
   2a48e:	2301      	movlt	r3, #1
   2a490:	2200      	movlt	r2, #0
   2a492:	1818      	adds	r0, r3, r0
   2a494:	eb41 0102 	adc.w	r1, r1, r2
}
   2a498:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2a49a:	f04f 30ff 	mov.w	r0, #4294967295
   2a49e:	4601      	mov	r1, r0
   2a4a0:	e7fa      	b.n	2a498 <sys_clock_timeout_end_calc+0x4c>

0002a4a2 <k_timer_init>:
	timer->status = 0U;
   2a4a2:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2a4a4:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2a4a8:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2a4ac:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2a4b0:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2a4b4:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2a4b6:	6343      	str	r3, [r0, #52]	; 0x34
}
   2a4b8:	4770      	bx	lr

0002a4ba <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2a4ba:	b510      	push	{r4, lr}
   2a4bc:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2a4be:	f7ff ff7b 	bl	2a3b8 <z_abort_timeout>

	if (inactive) {
   2a4c2:	b9b0      	cbnz	r0, 2a4f2 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2a4c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a4c6:	b10b      	cbz	r3, 2a4cc <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2a4c8:	4620      	mov	r0, r4
   2a4ca:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2a4cc:	f104 0018 	add.w	r0, r4, #24
   2a4d0:	f7ff ff18 	bl	2a304 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2a4d4:	b168      	cbz	r0, 2a4f2 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2a4d6:	f7ff feb9 	bl	2a24c <z_ready_thread>
	__asm__ volatile(
   2a4da:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a4de:	f3ef 8011 	mrs	r0, BASEPRI
   2a4e2:	f383 8812 	msr	BASEPRI_MAX, r3
   2a4e6:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2a4ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2a4ee:	f7ff be91 	b.w	2a214 <z_reschedule_irqlock>
   2a4f2:	bd10      	pop	{r4, pc}

0002a4f4 <add_event>:
{
   2a4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a4f6:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2a4f8:	e9d0 1300 	ldrd	r1, r3, [r0]
   2a4fc:	4288      	cmp	r0, r1
   2a4fe:	4604      	mov	r4, r0
   2a500:	d00d      	beq.n	2a51e <add_event+0x2a>
	if ((pending == NULL) ||
   2a502:	b163      	cbz	r3, 2a51e <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2a504:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2a506:	b100      	cbz	r0, 2a50a <add_event+0x16>
   2a508:	3860      	subs	r0, #96	; 0x60
   2a50a:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2a50e:	4639      	mov	r1, r7
   2a510:	f7ff fe53 	bl	2a1ba <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2a514:	2800      	cmp	r0, #0
   2a516:	dc02      	bgt.n	2a51e <add_event+0x2a>
	return list->head == list;
   2a518:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a51a:	42b4      	cmp	r4, r6
   2a51c:	d109      	bne.n	2a532 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   2a51e:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2a520:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2a524:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2a526:	6065      	str	r5, [r4, #4]
}
   2a528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2a52a:	6863      	ldr	r3, [r4, #4]
   2a52c:	42b3      	cmp	r3, r6
   2a52e:	d0f6      	beq.n	2a51e <add_event+0x2a>
   2a530:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2a532:	2e00      	cmp	r6, #0
   2a534:	d0f3      	beq.n	2a51e <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   2a536:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2a538:	b101      	cbz	r1, 2a53c <add_event+0x48>
   2a53a:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2a53c:	4638      	mov	r0, r7
   2a53e:	f7ff fe3c 	bl	2a1ba <z_sched_prio_cmp>
   2a542:	2800      	cmp	r0, #0
   2a544:	ddf1      	ble.n	2a52a <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   2a546:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2a548:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2a54c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2a54e:	6075      	str	r5, [r6, #4]
			return;
   2a550:	e7ea      	b.n	2a528 <add_event+0x34>

0002a552 <register_events>:
{
   2a552:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2a556:	2500      	movs	r5, #0
{
   2a558:	468b      	mov	fp, r1
   2a55a:	4614      	mov	r4, r2
   2a55c:	461f      	mov	r7, r3
   2a55e:	4682      	mov	sl, r0
	int events_registered = 0;
   2a560:	462e      	mov	r6, r5
	event->poller = NULL;
   2a562:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2a564:	455d      	cmp	r5, fp
   2a566:	db02      	blt.n	2a56e <register_events+0x1c>
}
   2a568:	4630      	mov	r0, r6
   2a56a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a56e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a572:	f3ef 8911 	mrs	r9, BASEPRI
   2a576:	f383 8812 	msr	BASEPRI_MAX, r3
   2a57a:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2a57e:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2a582:	f003 031f 	and.w	r3, r3, #31
   2a586:	3b01      	subs	r3, #1
   2a588:	2b07      	cmp	r3, #7
   2a58a:	d80f      	bhi.n	2a5ac <register_events+0x5a>
   2a58c:	e8df f003 	tbb	[pc, r3]
   2a590:	0a0e041e 	.word	0x0a0e041e
   2a594:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   2a598:	f8da 3010 	ldr.w	r3, [sl, #16]
   2a59c:	689b      	ldr	r3, [r3, #8]
   2a59e:	b12b      	cbz	r3, 2a5ac <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2a5a0:	2302      	movs	r3, #2
   2a5a2:	e020      	b.n	2a5e6 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2a5a4:	f8da 3010 	ldr.w	r3, [sl, #16]
   2a5a8:	681b      	ldr	r3, [r3, #0]
   2a5aa:	bb8b      	cbnz	r3, 2a610 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2a5ac:	bb47      	cbnz	r7, 2a600 <register_events+0xae>
   2a5ae:	7823      	ldrb	r3, [r4, #0]
   2a5b0:	b333      	cbz	r3, 2a600 <register_events+0xae>
	switch (event->type) {
   2a5b2:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2a5b6:	f003 031f 	and.w	r3, r3, #31
   2a5ba:	3b01      	subs	r3, #1
   2a5bc:	2b07      	cmp	r3, #7
   2a5be:	d830      	bhi.n	2a622 <register_events+0xd0>
   2a5c0:	e8df f003 	tbb	[pc, r3]
   2a5c4:	282f2833 	.word	0x282f2833
   2a5c8:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   2a5cc:	f8da 3010 	ldr.w	r3, [sl, #16]
   2a5d0:	689b      	ldr	r3, [r3, #8]
   2a5d2:	2b00      	cmp	r3, #0
   2a5d4:	d0ea      	beq.n	2a5ac <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2a5d6:	2301      	movs	r3, #1
   2a5d8:	e005      	b.n	2a5e6 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2a5da:	f8da 3010 	ldr.w	r3, [sl, #16]
   2a5de:	6a1b      	ldr	r3, [r3, #32]
   2a5e0:	2b00      	cmp	r3, #0
   2a5e2:	d0e3      	beq.n	2a5ac <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2a5e4:	2310      	movs	r3, #16
	event->state |= state;
   2a5e6:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2a5ea:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2a5ee:	f3c2 3145 	ubfx	r1, r2, #13, #6
   2a5f2:	430b      	orrs	r3, r1
   2a5f4:	f363 3252 	bfi	r2, r3, #13, #6
   2a5f8:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   2a5fc:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2a600:	f389 8811 	msr	BASEPRI, r9
   2a604:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2a608:	3501      	adds	r5, #1
   2a60a:	f10a 0a14 	add.w	sl, sl, #20
   2a60e:	e7a9      	b.n	2a564 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2a610:	2304      	movs	r3, #4
   2a612:	e7e8      	b.n	2a5e6 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2a614:	f8da 0010 	ldr.w	r0, [sl, #16]
   2a618:	4622      	mov	r2, r4
   2a61a:	4651      	mov	r1, sl
   2a61c:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2a61e:	f7ff ff69 	bl	2a4f4 <add_event>
	event->poller = poller;
   2a622:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2a626:	3601      	adds	r6, #1
   2a628:	e7ea      	b.n	2a600 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2a62a:	f8da 0010 	ldr.w	r0, [sl, #16]
   2a62e:	4622      	mov	r2, r4
   2a630:	4651      	mov	r1, sl
   2a632:	e7f4      	b.n	2a61e <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2a634:	f8da 0010 	ldr.w	r0, [sl, #16]
   2a638:	4622      	mov	r2, r4
   2a63a:	4651      	mov	r1, sl
   2a63c:	3024      	adds	r0, #36	; 0x24
   2a63e:	e7ee      	b.n	2a61e <register_events+0xcc>

0002a640 <signal_poll_event>:
{
   2a640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2a644:	6884      	ldr	r4, [r0, #8]
{
   2a646:	4605      	mov	r5, r0
   2a648:	460e      	mov	r6, r1
	if (poller != NULL) {
   2a64a:	b144      	cbz	r4, 2a65e <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2a64c:	7863      	ldrb	r3, [r4, #1]
   2a64e:	2b01      	cmp	r3, #1
   2a650:	d136      	bne.n	2a6c0 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   2a652:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2a656:	f013 0302 	ands.w	r3, r3, #2
   2a65a:	d10a      	bne.n	2a672 <signal_poll_event+0x32>
		poller->is_polling = false;
   2a65c:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2a65e:	68eb      	ldr	r3, [r5, #12]
   2a660:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2a664:	430e      	orrs	r6, r1
	event->poller = NULL;
   2a666:	2000      	movs	r0, #0
	event->state |= state;
   2a668:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   2a66c:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2a66e:	60eb      	str	r3, [r5, #12]
	return retcode;
   2a670:	e00b      	b.n	2a68a <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   2a672:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2a676:	f1b3 3fff 	cmp.w	r3, #4294967295
   2a67a:	bf08      	it	eq
   2a67c:	f112 0f02 	cmneq.w	r2, #2
   2a680:	d105      	bne.n	2a68e <signal_poll_event+0x4e>
		poller->is_polling = false;
   2a682:	2300      	movs	r3, #0
   2a684:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2a686:	f06f 000a 	mvn.w	r0, #10
}
   2a68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2a68e:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2a692:	4640      	mov	r0, r8
   2a694:	f7ff fdaa 	bl	2a1ec <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2a698:	2e08      	cmp	r6, #8
   2a69a:	bf0c      	ite	eq
   2a69c:	f06f 0303 	mvneq.w	r3, #3
   2a6a0:	2300      	movne	r3, #0
   2a6a2:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2a6a4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2a6a8:	06db      	lsls	r3, r3, #27
   2a6aa:	d102      	bne.n	2a6b2 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   2a6ac:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2a6b0:	b10f      	cbz	r7, 2a6b6 <signal_poll_event+0x76>
		poller->is_polling = false;
   2a6b2:	2300      	movs	r3, #0
   2a6b4:	e7d2      	b.n	2a65c <signal_poll_event+0x1c>
	z_ready_thread(thread);
   2a6b6:	4640      	mov	r0, r8
   2a6b8:	f7ff fdc8 	bl	2a24c <z_ready_thread>
		poller->is_polling = false;
   2a6bc:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2a6be:	e7ce      	b.n	2a65e <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2a6c0:	2b02      	cmp	r3, #2
   2a6c2:	d1f6      	bne.n	2a6b2 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2a6c4:	7823      	ldrb	r3, [r4, #0]
   2a6c6:	2b00      	cmp	r3, #0
   2a6c8:	d0c9      	beq.n	2a65e <signal_poll_event+0x1e>
   2a6ca:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2a6ce:	2f00      	cmp	r7, #0
   2a6d0:	d0f4      	beq.n	2a6bc <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2a6d2:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2a6d6:	f1a4 0914 	sub.w	r9, r4, #20
   2a6da:	f104 0014 	add.w	r0, r4, #20
   2a6de:	f7ff fe6b 	bl	2a3b8 <z_abort_timeout>
		twork->poll_result = 0;
   2a6e2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2a6e6:	4649      	mov	r1, r9
   2a6e8:	4638      	mov	r0, r7
   2a6ea:	f7ff fcdb 	bl	2a0a4 <z_work_submit_to_queue>
		poller->is_polling = false;
   2a6ee:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2a6f2:	e7b4      	b.n	2a65e <signal_poll_event+0x1e>

0002a6f4 <clear_event_registrations>:
	while (num_events--) {
   2a6f4:	2314      	movs	r3, #20
{
   2a6f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a6f8:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   2a6fc:	2400      	movs	r4, #0
   2a6fe:	2601      	movs	r6, #1
	while (num_events--) {
   2a700:	b901      	cbnz	r1, 2a704 <clear_event_registrations+0x10>
}
   2a702:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   2a704:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   2a708:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   2a70c:	f003 031f 	and.w	r3, r3, #31
   2a710:	2b08      	cmp	r3, #8
   2a712:	f1a0 0714 	sub.w	r7, r0, #20
   2a716:	d80d      	bhi.n	2a734 <clear_event_registrations+0x40>
   2a718:	fa06 f303 	lsl.w	r3, r6, r3
   2a71c:	f413 7f8b 	tst.w	r3, #278	; 0x116
   2a720:	d008      	beq.n	2a734 <clear_event_registrations+0x40>
	return node->next != NULL;
   2a722:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2a726:	b12b      	cbz	r3, 2a734 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   2a728:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   2a72c:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2a72e:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2a730:	e940 4405 	strd	r4, r4, [r0, #-20]
   2a734:	f382 8811 	msr	BASEPRI, r2
   2a738:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2a73c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a740:	f3ef 8211 	mrs	r2, BASEPRI
   2a744:	f383 8812 	msr	BASEPRI_MAX, r3
   2a748:	f3bf 8f6f 	isb	sy
   2a74c:	3901      	subs	r1, #1
   2a74e:	4638      	mov	r0, r7
   2a750:	e7d6      	b.n	2a700 <clear_event_registrations+0xc>

0002a752 <z_handle_obj_poll_events>:
{
   2a752:	4603      	mov	r3, r0
	return list->head == list;
   2a754:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2a756:	4283      	cmp	r3, r0
   2a758:	d008      	beq.n	2a76c <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2a75a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2a75e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2a760:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2a762:	2300      	movs	r3, #0
	node->prev = NULL;
   2a764:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2a768:	f7ff bf6a 	b.w	2a640 <signal_poll_event>
}
   2a76c:	4770      	bx	lr

0002a76e <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2a76e:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2a770:	e9c0 0000 	strd	r0, r0, [r0]
   2a774:	6083      	str	r3, [r0, #8]
}
   2a776:	4770      	bx	lr

0002a778 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   2a778:	2300      	movs	r3, #0
   2a77a:	6083      	str	r3, [r0, #8]
}
   2a77c:	4770      	bx	lr

0002a77e <k_free>:
	if (ptr != NULL) {
   2a77e:	b120      	cbz	r0, 2a78a <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2a780:	1f01      	subs	r1, r0, #4
   2a782:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2a786:	f7ff baa3 	b.w	29cd0 <k_heap_free>
}
   2a78a:	4770      	bx	lr

0002a78c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2a78c:	4770      	bx	lr
