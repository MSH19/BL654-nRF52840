
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   0:	d0 90 00 20 51 6d 01 00 c3 a4 02 00 25 6d 01 00     ... Qm......%m..
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
  10:	25 6d 01 00 25 6d 01 00 25 6d 01 00 00 00 00 00     %m..%m..%m......
	...
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
		LOG_ERR("Configuration error - sector count");
  2c:	b5 66 01 00 25 6d 01 00 00 00 00 00 6d 66 01 00     .f..%m......mf..
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
  3c:	25 6d 01 00                                         %m..

00000040 <_irq_vector_table>:
  40:	31 67 01 00 95 cf 02 00 31 67 01 00 31 67 01 00     1g......1g..1g..
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
  50:	31 67 01 00 31 67 01 00 31 67 01 00 31 67 01 00     1g..1g..1g..1g..
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
  60:	43 cf 02 00 31 67 01 00 31 67 01 00 7b cf 02 00     C...1g..1g..{...
	if (!fs->sector_size || fs->sector_size % info.size) {
  70:	31 67 01 00 31 67 01 00 31 67 01 00 31 67 01 00     1g..1g..1g..1g..
	if (fs->sector_count < 2) {
  80:	31 67 01 00 31 67 01 00 31 67 01 00 31 67 01 00     1g..1g..1g..1g..
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
  90:	31 67 01 00 31 67 01 00 31 67 01 00 31 67 01 00     1g..1g..1g..1g..
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
  a0:	31 67 01 00 31 67 01 00 31 67 01 00 31 67 01 00     1g..1g..1g..1g..
	for (i = 0; i < fs->sector_count; i++) {
  b0:	31 67 01 00 31 67 01 00 31 67 01 00 31 67 01 00     1g..1g..1g..1g..
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
  c0:	31 67 01 00 31 67 01 00 31 67 01 00 31 67 01 00     1g..1g..1g..1g..
			nvs_sector_advance(fs, &addr);
  d0:	31 67 01 00 31 67 01 00 31 67 01 00 31 67 01 00     1g..1g..1g..1g..
	rc = nvs_recover_last_ate(fs, &addr);
  e0:	31 67 01 00 31 67 01 00 31 67 01 00 31 67 01 00     1g..1g..1g..1g..
	fs->data_wra = addr & ADDR_SECT_MASK;
  f0:	31 67 01 00 31 67 01 00 31 67 01 00 31 67 01 00     1g..1g..1g..1g..

Disassembly of section text:

00000100 <memchr>:
	while (fs->ate_wra >= fs->data_wra) {
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
		if (rc) {
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
		if (data8[i] != value) {
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	nvs_sector_advance(fs, &addr);
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
	addr = fs->ate_wra & ADDR_SECT_MASK;
     12a:	f022 0407 	bic.w	r4, r2, #7
	nvs_sector_advance(fs, &addr);
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
	if (rc < 0) {
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
		       (uint16_t)(fs->sector_size - ate_size);
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
		addr = (i << ADDR_SECT_SHIFT) +
     152:	b98e      	cbnz	r6, 178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
		if (rc) {
     160:	b132      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
			nvs_sector_advance(fs, &addr);
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
			closed_sectors++;
     16c:	b113      	cbz	r3, 174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
			closed_sectors++;
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
			if (!rc) {
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
	for (i = 0; i < fs->sector_count; i++) {
     186:	d107      	bne.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
				rc = -ESPIPE;
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
		addr = fs->ate_wra + ate_size;
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
		LOG_INF("No GC Done marker found: restarting gc");
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
		if (rc) {
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
		fs->ate_wra &= ADDR_SECT_MASK;
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
     1d2:	f000 80e2 	beq.w	39a <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x16>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
		rc = nvs_gc(fs);
     1e2:	dd0c      	ble.n	1fe <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xa>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
     1ea:	ea81 0303 	eor.w	r3, r1, r3
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
			if (rc) {
     1fa:	ea81 0303 	eor.w	r3, r1, r3
			if (nvs_ate_valid(fs, &gc_done_ate) &&
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
			    (gc_done_ate.id == 0xffff) &&
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x28>
     216:	4240      	negs	r0, r0
			addr += ate_size;
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x3c>
		if (rc < 0) {
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
		fs->data_wra += fs->flash_parameters->write_block_size;
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x2>
     238:	f1a4 0401 	sub.w	r4, r4, #1
	while (fs->ate_wra > fs->data_wra) {
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6a>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
     25a:	4159      	adcs	r1, r3
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
     25c:	e00e      	b.n	27c <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x88>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
		if (rc) {
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
     272:	fa43 f305 	asr.w	r3, r3, r5
		      (fs->sector_size - 2 * ate_size))) {
     276:	18c0      	adds	r0, r0, r3
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
		rc = nvs_add_gc_done_ate(fs);
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x9e>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xdc>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xc4>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
		rc = -EDEADLK;
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
	if (rc) {
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
	fs->ready = true;
     2b4:	f080 809a 	bcs.w	3ec <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x4>
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
	LOG_INF("alloc wra: %d, %x",
     2e2:	d2e9      	bcs.n	2b8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xc4>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1a>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x16>
	LOG_INF("data wra: %d, %x",
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x30>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
			LOG_INF("GC Done marker found");
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
			nvs_sector_advance(fs, &addr);
     340:	3c1f      	subs	r4, #31
			addr = fs->ate_wra & ADDR_SECT_MASK;
     342:	da1c      	bge.n	37e <CONFIG_BT_DEVICE_APPEARANCE+0x3d>
     344:	340c      	adds	r4, #12
			nvs_sector_advance(fs, &addr);
     346:	dc0e      	bgt.n	366 <CONFIG_BT_DEVICE_APPEARANCE+0x25>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
			rc = nvs_flash_erase_sector(fs, addr);
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
			goto end;
     358:	ea40 0003 	orr.w	r0, r0, r3
		if (nvs_ate_valid(fs, &last_ate)) {
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
			fs->data_wra = addr & ADDR_SECT_MASK;
     36a:	f1c4 0220 	rsb	r2, r4, #32
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
			fs->data_wra = addr & ADDR_SECT_MASK;
     376:	ea40 0003 	orr.w	r0, r0, r3
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
     386:	f094 0f00 	teq	r4, #0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
		fs->ate_wra -= ate_size;
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x44>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x12>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x3a>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x58>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xf0>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xf0>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xf0>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x9e>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x9e>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <CONFIG_BT_HCI_TX_STACK_SIZE+0xf4>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__aeabi_dmul+0xb4>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__aeabi_dmul+0x80>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <CONFIG_BT_COMPANY_ID+0x5>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <CONFIG_BT_HCI_TX_STACK_SIZE+0x150>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <CONFIG_BT_HCI_TX_STACK_SIZE+0x7c>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <CONFIG_BT_HCI_TX_STACK_SIZE+0x4c>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <CONFIG_BT_HCI_TX_STACK_SIZE+0xda>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <CONFIG_BT_HCI_TX_STACK_SIZE+0xbe>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <CONFIG_BT_HCI_TX_STACK_SIZE+0x13a>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <CONFIG_BT_HCI_TX_STACK_SIZE+0x14c>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <CONFIG_BT_RX_STACK_SIZE+0x42>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <CONFIG_BT_RX_STACK_SIZE+0x18>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <CONFIG_BT_COMPANY_ID+0x5>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <CONFIG_BT_COMPANY_ID+0x5>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <CONFIG_BT_COMPANY_ID+0x5>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <CONFIG_BT_RX_STACK_SIZE+0x70>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <CONFIG_BT_HCI_TX_STACK_SIZE+0x14c>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <CONFIG_BT_RX_STACK_SIZE+0x84>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <CONFIG_BT_HCI_TX_STACK_SIZE+0x110>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <CONFIG_BT_HCI_TX_STACK_SIZE+0x14c>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <CONFIG_BT_HCI_TX_STACK_SIZE+0x110>
     93a:	e712      	b.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>

0000093c <__gedf2>:
     93c:	f04f 3cff 	mov.w	ip, #4294967295
     940:	e006      	b.n	950 <__cmpdf2+0x4>
     942:	bf00      	nop

00000944 <__ledf2>:
     944:	f04f 0c01 	mov.w	ip, #1
     948:	e002      	b.n	950 <__cmpdf2+0x4>
     94a:	bf00      	nop

0000094c <__cmpdf2>:
     94c:	f04f 0c01 	mov.w	ip, #1
     950:	f84d cd04 	str.w	ip, [sp, #-4]!
     954:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     958:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     95c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     960:	bf18      	it	ne
     962:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     966:	d01b      	beq.n	9a0 <__cmpdf2+0x54>
     968:	b001      	add	sp, #4
     96a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     96e:	bf0c      	ite	eq
     970:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     974:	ea91 0f03 	teqne	r1, r3
     978:	bf02      	ittt	eq
     97a:	ea90 0f02 	teqeq	r0, r2
     97e:	2000      	moveq	r0, #0
     980:	4770      	bxeq	lr
     982:	f110 0f00 	cmn.w	r0, #0
     986:	ea91 0f03 	teq	r1, r3
     98a:	bf58      	it	pl
     98c:	4299      	cmppl	r1, r3
     98e:	bf08      	it	eq
     990:	4290      	cmpeq	r0, r2
     992:	bf2c      	ite	cs
     994:	17d8      	asrcs	r0, r3, #31
     996:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     99a:	f040 0001 	orr.w	r0, r0, #1
     99e:	4770      	bx	lr
     9a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     9a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9a8:	d102      	bne.n	9b0 <__cmpdf2+0x64>
     9aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     9ae:	d107      	bne.n	9c0 <__cmpdf2+0x74>
     9b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     9b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9b8:	d1d6      	bne.n	968 <__cmpdf2+0x1c>
     9ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     9be:	d0d3      	beq.n	968 <__cmpdf2+0x1c>
     9c0:	f85d 0b04 	ldr.w	r0, [sp], #4
     9c4:	4770      	bx	lr
     9c6:	bf00      	nop

000009c8 <__aeabi_cdrcmple>:
     9c8:	4684      	mov	ip, r0
     9ca:	4610      	mov	r0, r2
     9cc:	4662      	mov	r2, ip
     9ce:	468c      	mov	ip, r1
     9d0:	4619      	mov	r1, r3
     9d2:	4663      	mov	r3, ip
     9d4:	e000      	b.n	9d8 <__aeabi_cdcmpeq>
     9d6:	bf00      	nop

000009d8 <__aeabi_cdcmpeq>:
     9d8:	b501      	push	{r0, lr}
     9da:	f7ff ffb7 	bl	94c <__cmpdf2>
     9de:	2800      	cmp	r0, #0
     9e0:	bf48      	it	mi
     9e2:	f110 0f00 	cmnmi.w	r0, #0
     9e6:	bd01      	pop	{r0, pc}

000009e8 <__aeabi_dcmpeq>:
     9e8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9ec:	f7ff fff4 	bl	9d8 <__aeabi_cdcmpeq>
     9f0:	bf0c      	ite	eq
     9f2:	2001      	moveq	r0, #1
     9f4:	2000      	movne	r0, #0
     9f6:	f85d fb08 	ldr.w	pc, [sp], #8
     9fa:	bf00      	nop

000009fc <__aeabi_dcmplt>:
     9fc:	f84d ed08 	str.w	lr, [sp, #-8]!
     a00:	f7ff ffea 	bl	9d8 <__aeabi_cdcmpeq>
     a04:	bf34      	ite	cc
     a06:	2001      	movcc	r0, #1
     a08:	2000      	movcs	r0, #0
     a0a:	f85d fb08 	ldr.w	pc, [sp], #8
     a0e:	bf00      	nop

00000a10 <__aeabi_dcmple>:
     a10:	f84d ed08 	str.w	lr, [sp, #-8]!
     a14:	f7ff ffe0 	bl	9d8 <__aeabi_cdcmpeq>
     a18:	bf94      	ite	ls
     a1a:	2001      	movls	r0, #1
     a1c:	2000      	movhi	r0, #0
     a1e:	f85d fb08 	ldr.w	pc, [sp], #8
     a22:	bf00      	nop

00000a24 <__aeabi_dcmpge>:
     a24:	f84d ed08 	str.w	lr, [sp, #-8]!
     a28:	f7ff ffce 	bl	9c8 <__aeabi_cdrcmple>
     a2c:	bf94      	ite	ls
     a2e:	2001      	movls	r0, #1
     a30:	2000      	movhi	r0, #0
     a32:	f85d fb08 	ldr.w	pc, [sp], #8
     a36:	bf00      	nop

00000a38 <__aeabi_dcmpgt>:
     a38:	f84d ed08 	str.w	lr, [sp, #-8]!
     a3c:	f7ff ffc4 	bl	9c8 <__aeabi_cdrcmple>
     a40:	bf34      	ite	cc
     a42:	2001      	movcc	r0, #1
     a44:	2000      	movcs	r0, #0
     a46:	f85d fb08 	ldr.w	pc, [sp], #8
     a4a:	bf00      	nop

00000a4c <__aeabi_d2iz>:
     a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a54:	d215      	bcs.n	a82 <__data_size+0x28>
     a56:	d511      	bpl.n	a7c <__data_size+0x22>
     a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a60:	d912      	bls.n	a88 <__data_size+0x2e>
     a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a72:	fa23 f002 	lsr.w	r0, r3, r2
     a76:	bf18      	it	ne
     a78:	4240      	negne	r0, r0
     a7a:	4770      	bx	lr
     a7c:	f04f 0000 	mov.w	r0, #0
     a80:	4770      	bx	lr
     a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a86:	d105      	bne.n	a94 <__data_size+0x3a>
     a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     a8c:	bf08      	it	eq
     a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     a92:	4770      	bx	lr
     a94:	f04f 0000 	mov.w	r0, #0
     a98:	4770      	bx	lr
     a9a:	bf00      	nop

00000a9c <__aeabi_d2f>:
     a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     aa4:	bf24      	itt	cs
     aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     aae:	d90d      	bls.n	acc <__aeabi_d2f+0x30>
     ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     ac4:	bf08      	it	eq
     ac6:	f020 0001 	biceq.w	r0, r0, #1
     aca:	4770      	bx	lr
     acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     ad0:	d121      	bne.n	b16 <__aeabi_d2f+0x7a>
     ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     ad6:	bfbc      	itt	lt
     ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     adc:	4770      	bxlt	lr
     ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     ae6:	f1c2 0218 	rsb	r2, r2, #24
     aea:	f1c2 0c20 	rsb	ip, r2, #32
     aee:	fa10 f30c 	lsls.w	r3, r0, ip
     af2:	fa20 f002 	lsr.w	r0, r0, r2
     af6:	bf18      	it	ne
     af8:	f040 0001 	orrne.w	r0, r0, #1
     afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     b04:	fa03 fc0c 	lsl.w	ip, r3, ip
     b08:	ea40 000c 	orr.w	r0, r0, ip
     b0c:	fa23 f302 	lsr.w	r3, r3, r2
     b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
     b14:	e7cc      	b.n	ab0 <__aeabi_d2f+0x14>
     b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
     b1a:	d107      	bne.n	b2c <__aeabi_d2f+0x90>
     b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     b20:	bf1e      	ittt	ne
     b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     b2a:	4770      	bxne	lr
     b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b38:	4770      	bx	lr
     b3a:	bf00      	nop

00000b3c <__aeabi_frsub>:
     b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     b40:	e002      	b.n	b48 <__addsf3>
     b42:	bf00      	nop

00000b44 <__aeabi_fsub>:
     b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000b48 <__addsf3>:
     b48:	0042      	lsls	r2, r0, #1
     b4a:	bf1f      	itttt	ne
     b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     b50:	ea92 0f03 	teqne	r2, r3
     b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     b5c:	d06a      	beq.n	c34 <__addsf3+0xec>
     b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
     b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     b66:	bfc1      	itttt	gt
     b68:	18d2      	addgt	r2, r2, r3
     b6a:	4041      	eorgt	r1, r0
     b6c:	4048      	eorgt	r0, r1
     b6e:	4041      	eorgt	r1, r0
     b70:	bfb8      	it	lt
     b72:	425b      	neglt	r3, r3
     b74:	2b19      	cmp	r3, #25
     b76:	bf88      	it	hi
     b78:	4770      	bxhi	lr
     b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b86:	bf18      	it	ne
     b88:	4240      	negne	r0, r0
     b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     b96:	bf18      	it	ne
     b98:	4249      	negne	r1, r1
     b9a:	ea92 0f03 	teq	r2, r3
     b9e:	d03f      	beq.n	c20 <__addsf3+0xd8>
     ba0:	f1a2 0201 	sub.w	r2, r2, #1
     ba4:	fa41 fc03 	asr.w	ip, r1, r3
     ba8:	eb10 000c 	adds.w	r0, r0, ip
     bac:	f1c3 0320 	rsb	r3, r3, #32
     bb0:	fa01 f103 	lsl.w	r1, r1, r3
     bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     bb8:	d502      	bpl.n	bc0 <__addsf3+0x78>
     bba:	4249      	negs	r1, r1
     bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     bc4:	d313      	bcc.n	bee <__addsf3+0xa6>
     bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     bca:	d306      	bcc.n	bda <__addsf3+0x92>
     bcc:	0840      	lsrs	r0, r0, #1
     bce:	ea4f 0131 	mov.w	r1, r1, rrx
     bd2:	f102 0201 	add.w	r2, r2, #1
     bd6:	2afe      	cmp	r2, #254	; 0xfe
     bd8:	d251      	bcs.n	c7e <__addsf3+0x136>
     bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     be2:	bf08      	it	eq
     be4:	f020 0001 	biceq.w	r0, r0, #1
     be8:	ea40 0003 	orr.w	r0, r0, r3
     bec:	4770      	bx	lr
     bee:	0049      	lsls	r1, r1, #1
     bf0:	eb40 0000 	adc.w	r0, r0, r0
     bf4:	3a01      	subs	r2, #1
     bf6:	bf28      	it	cs
     bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     bfc:	d2ed      	bcs.n	bda <__addsf3+0x92>
     bfe:	fab0 fc80 	clz	ip, r0
     c02:	f1ac 0c08 	sub.w	ip, ip, #8
     c06:	ebb2 020c 	subs.w	r2, r2, ip
     c0a:	fa00 f00c 	lsl.w	r0, r0, ip
     c0e:	bfaa      	itet	ge
     c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     c14:	4252      	neglt	r2, r2
     c16:	4318      	orrge	r0, r3
     c18:	bfbc      	itt	lt
     c1a:	40d0      	lsrlt	r0, r2
     c1c:	4318      	orrlt	r0, r3
     c1e:	4770      	bx	lr
     c20:	f092 0f00 	teq	r2, #0
     c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     c28:	bf06      	itte	eq
     c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     c2e:	3201      	addeq	r2, #1
     c30:	3b01      	subne	r3, #1
     c32:	e7b5      	b.n	ba0 <__addsf3+0x58>
     c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
     c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     c3c:	bf18      	it	ne
     c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     c42:	d021      	beq.n	c88 <__addsf3+0x140>
     c44:	ea92 0f03 	teq	r2, r3
     c48:	d004      	beq.n	c54 <__addsf3+0x10c>
     c4a:	f092 0f00 	teq	r2, #0
     c4e:	bf08      	it	eq
     c50:	4608      	moveq	r0, r1
     c52:	4770      	bx	lr
     c54:	ea90 0f01 	teq	r0, r1
     c58:	bf1c      	itt	ne
     c5a:	2000      	movne	r0, #0
     c5c:	4770      	bxne	lr
     c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     c62:	d104      	bne.n	c6e <__addsf3+0x126>
     c64:	0040      	lsls	r0, r0, #1
     c66:	bf28      	it	cs
     c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     c6c:	4770      	bx	lr
     c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     c72:	bf3c      	itt	cc
     c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     c78:	4770      	bxcc	lr
     c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c86:	4770      	bx	lr
     c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
     c8c:	bf16      	itet	ne
     c8e:	4608      	movne	r0, r1
     c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     c94:	4601      	movne	r1, r0
     c96:	0242      	lsls	r2, r0, #9
     c98:	bf06      	itte	eq
     c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     c9e:	ea90 0f01 	teqeq	r0, r1
     ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     ca6:	4770      	bx	lr

00000ca8 <__aeabi_ui2f>:
     ca8:	f04f 0300 	mov.w	r3, #0
     cac:	e004      	b.n	cb8 <__aeabi_i2f+0x8>
     cae:	bf00      	nop

00000cb0 <__aeabi_i2f>:
     cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     cb4:	bf48      	it	mi
     cb6:	4240      	negmi	r0, r0
     cb8:	ea5f 0c00 	movs.w	ip, r0
     cbc:	bf08      	it	eq
     cbe:	4770      	bxeq	lr
     cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     cc4:	4601      	mov	r1, r0
     cc6:	f04f 0000 	mov.w	r0, #0
     cca:	e01c      	b.n	d06 <__aeabi_l2f+0x2a>

00000ccc <__aeabi_ul2f>:
     ccc:	ea50 0201 	orrs.w	r2, r0, r1
     cd0:	bf08      	it	eq
     cd2:	4770      	bxeq	lr
     cd4:	f04f 0300 	mov.w	r3, #0
     cd8:	e00a      	b.n	cf0 <__aeabi_l2f+0x14>
     cda:	bf00      	nop

00000cdc <__aeabi_l2f>:
     cdc:	ea50 0201 	orrs.w	r2, r0, r1
     ce0:	bf08      	it	eq
     ce2:	4770      	bxeq	lr
     ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     ce8:	d502      	bpl.n	cf0 <__aeabi_l2f+0x14>
     cea:	4240      	negs	r0, r0
     cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     cf0:	ea5f 0c01 	movs.w	ip, r1
     cf4:	bf02      	ittt	eq
     cf6:	4684      	moveq	ip, r0
     cf8:	4601      	moveq	r1, r0
     cfa:	2000      	moveq	r0, #0
     cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     d00:	bf08      	it	eq
     d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     d0a:	fabc f28c 	clz	r2, ip
     d0e:	3a08      	subs	r2, #8
     d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     d14:	db10      	blt.n	d38 <__aeabi_l2f+0x5c>
     d16:	fa01 fc02 	lsl.w	ip, r1, r2
     d1a:	4463      	add	r3, ip
     d1c:	fa00 fc02 	lsl.w	ip, r0, r2
     d20:	f1c2 0220 	rsb	r2, r2, #32
     d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     d28:	fa20 f202 	lsr.w	r2, r0, r2
     d2c:	eb43 0002 	adc.w	r0, r3, r2
     d30:	bf08      	it	eq
     d32:	f020 0001 	biceq.w	r0, r0, #1
     d36:	4770      	bx	lr
     d38:	f102 0220 	add.w	r2, r2, #32
     d3c:	fa01 fc02 	lsl.w	ip, r1, r2
     d40:	f1c2 0220 	rsb	r2, r2, #32
     d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     d48:	fa21 f202 	lsr.w	r2, r1, r2
     d4c:	eb43 0002 	adc.w	r0, r3, r2
     d50:	bf08      	it	eq
     d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     d56:	4770      	bx	lr

00000d58 <__aeabi_fmul>:
     d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
     d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     d60:	bf1e      	ittt	ne
     d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     d66:	ea92 0f0c 	teqne	r2, ip
     d6a:	ea93 0f0c 	teqne	r3, ip
     d6e:	d06f      	beq.n	e50 <__aeabi_fmul+0xf8>
     d70:	441a      	add	r2, r3
     d72:	ea80 0c01 	eor.w	ip, r0, r1
     d76:	0240      	lsls	r0, r0, #9
     d78:	bf18      	it	ne
     d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     d7e:	d01e      	beq.n	dbe <__aeabi_fmul+0x66>
     d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     d8c:	fba0 3101 	umull	r3, r1, r0, r1
     d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     d94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     d98:	bf3e      	ittt	cc
     d9a:	0049      	lslcc	r1, r1, #1
     d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     da0:	005b      	lslcc	r3, r3, #1
     da2:	ea40 0001 	orr.w	r0, r0, r1
     da6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     daa:	2afd      	cmp	r2, #253	; 0xfd
     dac:	d81d      	bhi.n	dea <__aeabi_fmul+0x92>
     dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     db6:	bf08      	it	eq
     db8:	f020 0001 	biceq.w	r0, r0, #1
     dbc:	4770      	bx	lr
     dbe:	f090 0f00 	teq	r0, #0
     dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     dc6:	bf08      	it	eq
     dc8:	0249      	lsleq	r1, r1, #9
     dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     dd2:	3a7f      	subs	r2, #127	; 0x7f
     dd4:	bfc2      	ittt	gt
     dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     dde:	4770      	bxgt	lr
     de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     de4:	f04f 0300 	mov.w	r3, #0
     de8:	3a01      	subs	r2, #1
     dea:	dc5d      	bgt.n	ea8 <__aeabi_fmul+0x150>
     dec:	f112 0f19 	cmn.w	r2, #25
     df0:	bfdc      	itt	le
     df2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     df6:	4770      	bxle	lr
     df8:	f1c2 0200 	rsb	r2, r2, #0
     dfc:	0041      	lsls	r1, r0, #1
     dfe:	fa21 f102 	lsr.w	r1, r1, r2
     e02:	f1c2 0220 	rsb	r2, r2, #32
     e06:	fa00 fc02 	lsl.w	ip, r0, r2
     e0a:	ea5f 0031 	movs.w	r0, r1, rrx
     e0e:	f140 0000 	adc.w	r0, r0, #0
     e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     e16:	bf08      	it	eq
     e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     e1c:	4770      	bx	lr
     e1e:	f092 0f00 	teq	r2, #0
     e22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     e26:	bf02      	ittt	eq
     e28:	0040      	lsleq	r0, r0, #1
     e2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     e2e:	3a01      	subeq	r2, #1
     e30:	d0f9      	beq.n	e26 <__aeabi_fmul+0xce>
     e32:	ea40 000c 	orr.w	r0, r0, ip
     e36:	f093 0f00 	teq	r3, #0
     e3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     e3e:	bf02      	ittt	eq
     e40:	0049      	lsleq	r1, r1, #1
     e42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     e46:	3b01      	subeq	r3, #1
     e48:	d0f9      	beq.n	e3e <__aeabi_fmul+0xe6>
     e4a:	ea41 010c 	orr.w	r1, r1, ip
     e4e:	e78f      	b.n	d70 <__aeabi_fmul+0x18>
     e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     e54:	ea92 0f0c 	teq	r2, ip
     e58:	bf18      	it	ne
     e5a:	ea93 0f0c 	teqne	r3, ip
     e5e:	d00a      	beq.n	e76 <__aeabi_fmul+0x11e>
     e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     e64:	bf18      	it	ne
     e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     e6a:	d1d8      	bne.n	e1e <__aeabi_fmul+0xc6>
     e6c:	ea80 0001 	eor.w	r0, r0, r1
     e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     e74:	4770      	bx	lr
     e76:	f090 0f00 	teq	r0, #0
     e7a:	bf17      	itett	ne
     e7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     e80:	4608      	moveq	r0, r1
     e82:	f091 0f00 	teqne	r1, #0
     e86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     e8a:	d014      	beq.n	eb6 <__aeabi_fmul+0x15e>
     e8c:	ea92 0f0c 	teq	r2, ip
     e90:	d101      	bne.n	e96 <__aeabi_fmul+0x13e>
     e92:	0242      	lsls	r2, r0, #9
     e94:	d10f      	bne.n	eb6 <__aeabi_fmul+0x15e>
     e96:	ea93 0f0c 	teq	r3, ip
     e9a:	d103      	bne.n	ea4 <__aeabi_fmul+0x14c>
     e9c:	024b      	lsls	r3, r1, #9
     e9e:	bf18      	it	ne
     ea0:	4608      	movne	r0, r1
     ea2:	d108      	bne.n	eb6 <__aeabi_fmul+0x15e>
     ea4:	ea80 0001 	eor.w	r0, r0, r1
     ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     eb4:	4770      	bx	lr
     eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     eba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     ebe:	4770      	bx	lr

00000ec0 <__aeabi_fdiv>:
     ec0:	f04f 0cff 	mov.w	ip, #255	; 0xff
     ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     ec8:	bf1e      	ittt	ne
     eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     ece:	ea92 0f0c 	teqne	r2, ip
     ed2:	ea93 0f0c 	teqne	r3, ip
     ed6:	d069      	beq.n	fac <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0xc>
     ed8:	eba2 0203 	sub.w	r2, r2, r3
     edc:	ea80 0c01 	eor.w	ip, r0, r1
     ee0:	0249      	lsls	r1, r1, #9
     ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
     ee6:	d037      	beq.n	f58 <__aeabi_fdiv+0x98>
     ee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     ef8:	428b      	cmp	r3, r1
     efa:	bf38      	it	cc
     efc:	005b      	lslcc	r3, r3, #1
     efe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     f02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     f06:	428b      	cmp	r3, r1
     f08:	bf24      	itt	cs
     f0a:	1a5b      	subcs	r3, r3, r1
     f0c:	ea40 000c 	orrcs.w	r0, r0, ip
     f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     f14:	bf24      	itt	cs
     f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     f22:	bf24      	itt	cs
     f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     f30:	bf24      	itt	cs
     f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     f3a:	011b      	lsls	r3, r3, #4
     f3c:	bf18      	it	ne
     f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     f42:	d1e0      	bne.n	f06 <__aeabi_fdiv+0x46>
     f44:	2afd      	cmp	r2, #253	; 0xfd
     f46:	f63f af50 	bhi.w	dea <__aeabi_fmul+0x92>
     f4a:	428b      	cmp	r3, r1
     f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     f50:	bf08      	it	eq
     f52:	f020 0001 	biceq.w	r0, r0, #1
     f56:	4770      	bx	lr
     f58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     f60:	327f      	adds	r2, #127	; 0x7f
     f62:	bfc2      	ittt	gt
     f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     f6c:	4770      	bxgt	lr
     f6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     f72:	f04f 0300 	mov.w	r3, #0
     f76:	3a01      	subs	r2, #1
     f78:	e737      	b.n	dea <__aeabi_fmul+0x92>
     f7a:	f092 0f00 	teq	r2, #0
     f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     f82:	bf02      	ittt	eq
     f84:	0040      	lsleq	r0, r0, #1
     f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     f8a:	3a01      	subeq	r2, #1
     f8c:	d0f9      	beq.n	f82 <__aeabi_fdiv+0xc2>
     f8e:	ea40 000c 	orr.w	r0, r0, ip
     f92:	f093 0f00 	teq	r3, #0
     f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     f9a:	bf02      	ittt	eq
     f9c:	0049      	lsleq	r1, r1, #1
     f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     fa2:	3b01      	subeq	r3, #1
     fa4:	d0f9      	beq.n	f9a <__aeabi_fdiv+0xda>
     fa6:	ea41 010c 	orr.w	r1, r1, ip
     faa:	e795      	b.n	ed8 <__aeabi_fdiv+0x18>
     fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     fb0:	ea92 0f0c 	teq	r2, ip
     fb4:	d108      	bne.n	fc8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x28>
     fb6:	0242      	lsls	r2, r0, #9
     fb8:	f47f af7d 	bne.w	eb6 <__aeabi_fmul+0x15e>
     fbc:	ea93 0f0c 	teq	r3, ip
     fc0:	f47f af70 	bne.w	ea4 <__aeabi_fmul+0x14c>
     fc4:	4608      	mov	r0, r1
     fc6:	e776      	b.n	eb6 <__aeabi_fmul+0x15e>
     fc8:	ea93 0f0c 	teq	r3, ip
     fcc:	d104      	bne.n	fd8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x38>
     fce:	024b      	lsls	r3, r1, #9
     fd0:	f43f af4c 	beq.w	e6c <__aeabi_fmul+0x114>
     fd4:	4608      	mov	r0, r1
     fd6:	e76e      	b.n	eb6 <__aeabi_fmul+0x15e>
     fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     fdc:	bf18      	it	ne
     fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     fe2:	d1ca      	bne.n	f7a <__aeabi_fdiv+0xba>
     fe4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     fe8:	f47f af5c 	bne.w	ea4 <__aeabi_fmul+0x14c>
     fec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     ff0:	f47f af3c 	bne.w	e6c <__aeabi_fmul+0x114>
     ff4:	e75f      	b.n	eb6 <__aeabi_fmul+0x15e>
     ff6:	bf00      	nop

00000ff8 <__gesf2>:
     ff8:	f04f 3cff 	mov.w	ip, #4294967295
     ffc:	e006      	b.n	100c <__cmpsf2+0x4>
     ffe:	bf00      	nop

00001000 <__lesf2>:
    1000:	f04f 0c01 	mov.w	ip, #1
    1004:	e002      	b.n	100c <__cmpsf2+0x4>
    1006:	bf00      	nop

00001008 <__cmpsf2>:
    1008:	f04f 0c01 	mov.w	ip, #1
    100c:	f84d cd04 	str.w	ip, [sp, #-4]!
    1010:	ea4f 0240 	mov.w	r2, r0, lsl #1
    1014:	ea4f 0341 	mov.w	r3, r1, lsl #1
    1018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    101c:	bf18      	it	ne
    101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    1022:	d011      	beq.n	1048 <__cmpsf2+0x40>
    1024:	b001      	add	sp, #4
    1026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    102a:	bf18      	it	ne
    102c:	ea90 0f01 	teqne	r0, r1
    1030:	bf58      	it	pl
    1032:	ebb2 0003 	subspl.w	r0, r2, r3
    1036:	bf88      	it	hi
    1038:	17c8      	asrhi	r0, r1, #31
    103a:	bf38      	it	cc
    103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    1040:	bf18      	it	ne
    1042:	f040 0001 	orrne.w	r0, r0, #1
    1046:	4770      	bx	lr
    1048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    104c:	d102      	bne.n	1054 <__cmpsf2+0x4c>
    104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    1052:	d105      	bne.n	1060 <__cmpsf2+0x58>
    1054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    1058:	d1e4      	bne.n	1024 <__cmpsf2+0x1c>
    105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    105e:	d0e1      	beq.n	1024 <__cmpsf2+0x1c>
    1060:	f85d 0b04 	ldr.w	r0, [sp], #4
    1064:	4770      	bx	lr
    1066:	bf00      	nop

00001068 <__aeabi_cfrcmple>:
    1068:	4684      	mov	ip, r0
    106a:	4608      	mov	r0, r1
    106c:	4661      	mov	r1, ip
    106e:	e7ff      	b.n	1070 <__aeabi_cfcmpeq>

00001070 <__aeabi_cfcmpeq>:
    1070:	b50f      	push	{r0, r1, r2, r3, lr}
    1072:	f7ff ffc9 	bl	1008 <__cmpsf2>
    1076:	2800      	cmp	r0, #0
    1078:	bf48      	it	mi
    107a:	f110 0f00 	cmnmi.w	r0, #0
    107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00001080 <__aeabi_fcmpeq>:
    1080:	f84d ed08 	str.w	lr, [sp, #-8]!
    1084:	f7ff fff4 	bl	1070 <__aeabi_cfcmpeq>
    1088:	bf0c      	ite	eq
    108a:	2001      	moveq	r0, #1
    108c:	2000      	movne	r0, #0
    108e:	f85d fb08 	ldr.w	pc, [sp], #8
    1092:	bf00      	nop

00001094 <__aeabi_fcmplt>:
    1094:	f84d ed08 	str.w	lr, [sp, #-8]!
    1098:	f7ff ffea 	bl	1070 <__aeabi_cfcmpeq>
    109c:	bf34      	ite	cc
    109e:	2001      	movcc	r0, #1
    10a0:	2000      	movcs	r0, #0
    10a2:	f85d fb08 	ldr.w	pc, [sp], #8
    10a6:	bf00      	nop

000010a8 <__aeabi_fcmple>:
    10a8:	f84d ed08 	str.w	lr, [sp, #-8]!
    10ac:	f7ff ffe0 	bl	1070 <__aeabi_cfcmpeq>
    10b0:	bf94      	ite	ls
    10b2:	2001      	movls	r0, #1
    10b4:	2000      	movhi	r0, #0
    10b6:	f85d fb08 	ldr.w	pc, [sp], #8
    10ba:	bf00      	nop

000010bc <__aeabi_fcmpge>:
    10bc:	f84d ed08 	str.w	lr, [sp, #-8]!
    10c0:	f7ff ffd2 	bl	1068 <__aeabi_cfrcmple>
    10c4:	bf94      	ite	ls
    10c6:	2001      	movls	r0, #1
    10c8:	2000      	movhi	r0, #0
    10ca:	f85d fb08 	ldr.w	pc, [sp], #8
    10ce:	bf00      	nop

000010d0 <__aeabi_fcmpgt>:
    10d0:	f84d ed08 	str.w	lr, [sp, #-8]!
    10d4:	f7ff ffc8 	bl	1068 <__aeabi_cfrcmple>
    10d8:	bf34      	ite	cc
    10da:	2001      	movcc	r0, #1
    10dc:	2000      	movcs	r0, #0
    10de:	f85d fb08 	ldr.w	pc, [sp], #8
    10e2:	bf00      	nop

000010e4 <__aeabi_f2iz>:
    10e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
    10e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    10ec:	d30f      	bcc.n	110e <__aeabi_f2iz+0x2a>
    10ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
    10f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    10f6:	d90d      	bls.n	1114 <__aeabi_f2iz+0x30>
    10f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
    10fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1100:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    1104:	fa23 f002 	lsr.w	r0, r3, r2
    1108:	bf18      	it	ne
    110a:	4240      	negne	r0, r0
    110c:	4770      	bx	lr
    110e:	f04f 0000 	mov.w	r0, #0
    1112:	4770      	bx	lr
    1114:	f112 0f61 	cmn.w	r2, #97	; 0x61
    1118:	d101      	bne.n	111e <__aeabi_f2iz+0x3a>
    111a:	0242      	lsls	r2, r0, #9
    111c:	d105      	bne.n	112a <__aeabi_f2iz+0x46>
    111e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    1122:	bf08      	it	eq
    1124:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    1128:	4770      	bx	lr
    112a:	f04f 0000 	mov.w	r0, #0
    112e:	4770      	bx	lr

00001130 <__aeabi_f2uiz>:
    1130:	0042      	lsls	r2, r0, #1
    1132:	d20e      	bcs.n	1152 <__aeabi_f2uiz+0x22>
    1134:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    1138:	d30b      	bcc.n	1152 <__aeabi_f2uiz+0x22>
    113a:	f04f 039e 	mov.w	r3, #158	; 0x9e
    113e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    1142:	d409      	bmi.n	1158 <__aeabi_f2uiz+0x28>
    1144:	ea4f 2300 	mov.w	r3, r0, lsl #8
    1148:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    114c:	fa23 f002 	lsr.w	r0, r3, r2
    1150:	4770      	bx	lr
    1152:	f04f 0000 	mov.w	r0, #0
    1156:	4770      	bx	lr
    1158:	f112 0f61 	cmn.w	r2, #97	; 0x61
    115c:	d101      	bne.n	1162 <__aeabi_f2uiz+0x32>
    115e:	0242      	lsls	r2, r0, #9
    1160:	d102      	bne.n	1168 <__aeabi_f2uiz+0x38>
    1162:	f04f 30ff 	mov.w	r0, #4294967295
    1166:	4770      	bx	lr
    1168:	f04f 0000 	mov.w	r0, #0
    116c:	4770      	bx	lr
    116e:	bf00      	nop

00001170 <__aeabi_uldivmod>:
    1170:	b953      	cbnz	r3, 1188 <__aeabi_uldivmod+0x18>
    1172:	b94a      	cbnz	r2, 1188 <__aeabi_uldivmod+0x18>
    1174:	2900      	cmp	r1, #0
    1176:	bf08      	it	eq
    1178:	2800      	cmpeq	r0, #0
    117a:	bf1c      	itt	ne
    117c:	f04f 31ff 	movne.w	r1, #4294967295
    1180:	f04f 30ff 	movne.w	r0, #4294967295
    1184:	f000 b80c 	b.w	11a0 <__aeabi_idiv0>
    1188:	f1ad 0c08 	sub.w	ip, sp, #8
    118c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1190:	f00b ff48 	bl	d024 <__udivmoddi4>
    1194:	f8dd e004 	ldr.w	lr, [sp, #4]
    1198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    119c:	b004      	add	sp, #16
    119e:	4770      	bx	lr

000011a0 <__aeabi_idiv0>:
    11a0:	4770      	bx	lr
    11a2:	bf00      	nop

000011a4 <ocrypto_bigint_add256>:
    11a4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    11a8:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    11ac:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    11b0:	185b      	adds	r3, r3, r1
    11b2:	eb54 040c 	adcs.w	r4, r4, ip
    11b6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    11ba:	414d      	adcs	r5, r1
    11bc:	eb56 060c 	adcs.w	r6, r6, ip
    11c0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    11c4:	414f      	adcs	r7, r1
    11c6:	eb58 080c 	adcs.w	r8, r8, ip
    11ca:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    11ce:	eb59 0901 	adcs.w	r9, r9, r1
    11d2:	eb5a 0a0c 	adcs.w	sl, sl, ip
    11d6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    11da:	4180      	sbcs	r0, r0
    11dc:	3001      	adds	r0, #1
    11de:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    11e2:	4770      	bx	lr

000011e4 <ocrypto_bigint_sub256>:
    11e4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    11e8:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    11ec:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    11f0:	1a5b      	subs	r3, r3, r1
    11f2:	eb74 040c 	sbcs.w	r4, r4, ip
    11f6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    11fa:	418d      	sbcs	r5, r1
    11fc:	eb76 060c 	sbcs.w	r6, r6, ip
    1200:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1204:	418f      	sbcs	r7, r1
    1206:	eb78 080c 	sbcs.w	r8, r8, ip
    120a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    120e:	eb79 0901 	sbcs.w	r9, r9, r1
    1212:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    1216:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    121a:	4180      	sbcs	r0, r0
    121c:	4240      	negs	r0, r0
    121e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1222:	4770      	bx	lr

00001224 <ocrypto_bigint_cadd256>:
    1224:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1228:	4252      	negs	r2, r2
    122a:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    122e:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    1232:	4017      	ands	r7, r2
    1234:	19db      	adds	r3, r3, r7
    1236:	ea18 0802 	ands.w	r8, r8, r2
    123a:	eb54 0408 	adcs.w	r4, r4, r8
    123e:	ea19 0902 	ands.w	r9, r9, r2
    1242:	eb55 0509 	adcs.w	r5, r5, r9
    1246:	ea1a 0a02 	ands.w	sl, sl, r2
    124a:	eb56 060a 	adcs.w	r6, r6, sl
    124e:	c078      	stmia	r0!, {r3, r4, r5, r6}
    1250:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    1254:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    1258:	4017      	ands	r7, r2
    125a:	417b      	adcs	r3, r7
    125c:	ea18 0802 	ands.w	r8, r8, r2
    1260:	eb54 0408 	adcs.w	r4, r4, r8
    1264:	ea19 0902 	ands.w	r9, r9, r2
    1268:	eb55 0509 	adcs.w	r5, r5, r9
    126c:	ea1a 0a02 	ands.w	sl, sl, r2
    1270:	eb56 060a 	adcs.w	r6, r6, sl
    1274:	c078      	stmia	r0!, {r3, r4, r5, r6}
    1276:	4180      	sbcs	r0, r0
    1278:	3001      	adds	r0, #1
    127a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    127e:	4770      	bx	lr

00001280 <ocrypto_bigint_csub256>:
    1280:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1284:	4252      	negs	r2, r2
    1286:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    128a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    128e:	4017      	ands	r7, r2
    1290:	1bdb      	subs	r3, r3, r7
    1292:	ea18 0802 	ands.w	r8, r8, r2
    1296:	eb74 0408 	sbcs.w	r4, r4, r8
    129a:	ea19 0902 	ands.w	r9, r9, r2
    129e:	eb75 0509 	sbcs.w	r5, r5, r9
    12a2:	ea1a 0a02 	ands.w	sl, sl, r2
    12a6:	eb76 060a 	sbcs.w	r6, r6, sl
    12aa:	c078      	stmia	r0!, {r3, r4, r5, r6}
    12ac:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    12b0:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    12b4:	4017      	ands	r7, r2
    12b6:	41bb      	sbcs	r3, r7
    12b8:	ea18 0802 	ands.w	r8, r8, r2
    12bc:	eb74 0408 	sbcs.w	r4, r4, r8
    12c0:	ea19 0902 	ands.w	r9, r9, r2
    12c4:	eb75 0509 	sbcs.w	r5, r5, r9
    12c8:	ea1a 0a02 	ands.w	sl, sl, r2
    12cc:	eb76 060a 	sbcs.w	r6, r6, sl
    12d0:	c078      	stmia	r0!, {r3, r4, r5, r6}
    12d2:	4180      	sbcs	r0, r0
    12d4:	4240      	negs	r0, r0
    12d6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    12da:	4770      	bx	lr

000012dc <ocrypto_bigint_cswap256>:
    12dc:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    12e0:	4252      	negs	r2, r2
    12e2:	f04f 0804 	mov.w	r8, #4

000012e6 <cswap256_loop>:
    12e6:	e890 0030 	ldmia.w	r0, {r4, r5}
    12ea:	e891 00c0 	ldmia.w	r1, {r6, r7}
    12ee:	1ba3      	subs	r3, r4, r6
    12f0:	4013      	ands	r3, r2
    12f2:	1ae4      	subs	r4, r4, r3
    12f4:	18f6      	adds	r6, r6, r3
    12f6:	1beb      	subs	r3, r5, r7
    12f8:	4013      	ands	r3, r2
    12fa:	1aed      	subs	r5, r5, r3
    12fc:	18ff      	adds	r7, r7, r3
    12fe:	c030      	stmia	r0!, {r4, r5}
    1300:	c1c0      	stmia	r1!, {r6, r7}
    1302:	f1b8 0801 	subs.w	r8, r8, #1
    1306:	d1ee      	bne.n	12e6 <cswap256_loop>
    1308:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
    130c:	4770      	bx	lr
    130e:	bf00      	nop

00001310 <ocrypto_mul256_noframe>:
    1310:	b500      	push	{lr}
    1312:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
    1316:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
    131a:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
    131e:	b402      	push	{r1}
    1320:	fba7 5102 	umull	r5, r1, r7, r2
    1324:	950a      	str	r5, [sp, #40]	; 0x28
    1326:	fba8 0b02 	umull	r0, fp, r8, r2
    132a:	fbe7 1063 	umaal	r1, r0, r7, r3
    132e:	fbe9 b062 	umaal	fp, r0, r9, r2
    1332:	910b      	str	r1, [sp, #44]	; 0x2c
    1334:	fba8 5103 	umull	r5, r1, r8, r3
    1338:	fbea 0162 	umaal	r0, r1, sl, r2
    133c:	fbe7 b564 	umaal	fp, r5, r7, r4
    1340:	fbe7 0566 	umaal	r0, r5, r7, r6
    1344:	fbe8 1566 	umaal	r1, r5, r8, r6
    1348:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    134c:	fba9 b603 	umull	fp, r6, r9, r3
    1350:	fbea 1663 	umaal	r1, r6, sl, r3
    1354:	fbec 5663 	umaal	r5, r6, ip, r3
    1358:	fbe8 0b64 	umaal	r0, fp, r8, r4
    135c:	fbe9 1b64 	umaal	r1, fp, r9, r4
    1360:	fbea 5b64 	umaal	r5, fp, sl, r4
    1364:	fbec 6b64 	umaal	r6, fp, ip, r4
    1368:	900d      	str	r0, [sp, #52]	; 0x34
    136a:	fbac 3002 	umull	r3, r0, ip, r2
    136e:	9c05      	ldr	r4, [sp, #20]
    1370:	fbee 5062 	umaal	r5, r0, lr, r2
    1374:	fbe9 6064 	umaal	r6, r0, r9, r4
    1378:	fbea b064 	umaal	fp, r0, sl, r4
    137c:	fbe7 3164 	umaal	r3, r1, r7, r4
    1380:	fbe8 5164 	umaal	r5, r1, r8, r4
    1384:	9c06      	ldr	r4, [sp, #24]
    1386:	fbe8 6164 	umaal	r6, r1, r8, r4
    138a:	fbe9 b164 	umaal	fp, r1, r9, r4
    138e:	fbea 0164 	umaal	r0, r1, sl, r4
    1392:	930e      	str	r3, [sp, #56]	; 0x38
    1394:	fba7 3204 	umull	r3, r2, r7, r4
    1398:	9c07      	ldr	r4, [sp, #28]
    139a:	fbe7 6264 	umaal	r6, r2, r7, r4
    139e:	fbe8 b264 	umaal	fp, r2, r8, r4
    13a2:	fbe9 0264 	umaal	r0, r2, r9, r4
    13a6:	fbea 1264 	umaal	r1, r2, sl, r4
    13aa:	9c04      	ldr	r4, [sp, #16]
    13ac:	fbe9 5364 	umaal	r5, r3, r9, r4
    13b0:	fbea 6364 	umaal	r6, r3, sl, r4
    13b4:	9c08      	ldr	r4, [sp, #32]
    13b6:	fbe7 b364 	umaal	fp, r3, r7, r4
    13ba:	fbe8 0364 	umaal	r0, r3, r8, r4
    13be:	fbe9 1364 	umaal	r1, r3, r9, r4
    13c2:	fbea 2364 	umaal	r2, r3, sl, r4
    13c6:	950f      	str	r5, [sp, #60]	; 0x3c
    13c8:	f85d 9b04 	ldr.w	r9, [sp], #4
    13cc:	e899 0600 	ldmia.w	r9, {r9, sl}
    13d0:	f8dd 8000 	ldr.w	r8, [sp]
    13d4:	fba9 5408 	umull	r5, r4, r9, r8
    13d8:	fbea b468 	umaal	fp, r4, sl, r8
    13dc:	f8dd 8010 	ldr.w	r8, [sp, #16]
    13e0:	fbec 0468 	umaal	r0, r4, ip, r8
    13e4:	fbee 1468 	umaal	r1, r4, lr, r8
    13e8:	fbe9 2468 	umaal	r2, r4, r9, r8
    13ec:	fbea 3468 	umaal	r3, r4, sl, r8
    13f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
    13f4:	fbee 6568 	umaal	r6, r5, lr, r8
    13f8:	fbe9 b568 	umaal	fp, r5, r9, r8
    13fc:	fbea 0568 	umaal	r0, r5, sl, r8
    1400:	f8dd 8014 	ldr.w	r8, [sp, #20]
    1404:	fbec 1568 	umaal	r1, r5, ip, r8
    1408:	fbee 2568 	umaal	r2, r5, lr, r8
    140c:	fbe9 3568 	umaal	r3, r5, r9, r8
    1410:	fbea 4568 	umaal	r4, r5, sl, r8
    1414:	960f      	str	r6, [sp, #60]	; 0x3c
    1416:	f8dd 8008 	ldr.w	r8, [sp, #8]
    141a:	fbae 7608 	umull	r7, r6, lr, r8
    141e:	fbe9 0668 	umaal	r0, r6, r9, r8
    1422:	fbea 1668 	umaal	r1, r6, sl, r8
    1426:	f8dd 8018 	ldr.w	r8, [sp, #24]
    142a:	fbec 2668 	umaal	r2, r6, ip, r8
    142e:	fbee 3668 	umaal	r3, r6, lr, r8
    1432:	fbe9 4668 	umaal	r4, r6, r9, r8
    1436:	fbea 5668 	umaal	r5, r6, sl, r8
    143a:	f8dd 800c 	ldr.w	r8, [sp, #12]
    143e:	fbec b768 	umaal	fp, r7, ip, r8
    1442:	fbee 0768 	umaal	r0, r7, lr, r8
    1446:	fbe9 1768 	umaal	r1, r7, r9, r8
    144a:	fbea 2768 	umaal	r2, r7, sl, r8
    144e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    1452:	fbec 3768 	umaal	r3, r7, ip, r8
    1456:	fbee 4768 	umaal	r4, r7, lr, r8
    145a:	fbe9 5768 	umaal	r5, r7, r9, r8
    145e:	fbea 6768 	umaal	r6, r7, sl, r8
    1462:	b008      	add	sp, #32
    1464:	bd00      	pop	{pc}
    1466:	bf00      	nop

00001468 <ocrypto_bigint_mul256>:
    1468:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    146c:	b087      	sub	sp, #28
    146e:	f7ff ff4f 	bl	1310 <ocrypto_mul256_noframe>
    1472:	f8dd 801c 	ldr.w	r8, [sp, #28]
    1476:	f108 0820 	add.w	r8, r8, #32
    147a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    147e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    1480:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
    1484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001488 <ocrypto_sqr256_noframe>:
    1488:	b500      	push	{lr}
    148a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
    148e:	fba3 5203 	umull	r5, r2, r3, r3
    1492:	9501      	str	r5, [sp, #4]
    1494:	fba3 0104 	umull	r0, r1, r3, r4
    1498:	fbe3 2064 	umaal	r2, r0, r3, r4
    149c:	fbe3 1067 	umaal	r1, r0, r3, r7
    14a0:	9202      	str	r2, [sp, #8]
    14a2:	fba3 5207 	umull	r5, r2, r3, r7
    14a6:	fbe3 0268 	umaal	r0, r2, r3, r8
    14aa:	fbe4 1564 	umaal	r1, r5, r4, r4
    14ae:	fbe3 0568 	umaal	r0, r5, r3, r8
    14b2:	fbe3 2569 	umaal	r2, r5, r3, r9
    14b6:	9103      	str	r1, [sp, #12]
    14b8:	fba4 b607 	umull	fp, r6, r4, r7
    14bc:	fbe3 2669 	umaal	r2, r6, r3, r9
    14c0:	fbe3 566a 	umaal	r5, r6, r3, sl
    14c4:	fbe4 0b67 	umaal	r0, fp, r4, r7
    14c8:	fbe4 2b68 	umaal	r2, fp, r4, r8
    14cc:	fbe3 5b6a 	umaal	r5, fp, r3, sl
    14d0:	fbe3 6b6c 	umaal	r6, fp, r3, ip
    14d4:	9004      	str	r0, [sp, #16]
    14d6:	fba4 1008 	umull	r1, r0, r4, r8
    14da:	fbe4 5069 	umaal	r5, r0, r4, r9
    14de:	fbe3 606c 	umaal	r6, r0, r3, ip
    14e2:	fbe3 b06e 	umaal	fp, r0, r3, lr
    14e6:	fbe7 2167 	umaal	r2, r1, r7, r7
    14ea:	fbe4 5169 	umaal	r5, r1, r4, r9
    14ee:	fbe4 616a 	umaal	r6, r1, r4, sl
    14f2:	fbe3 b16e 	umaal	fp, r1, r3, lr
    14f6:	fbe4 016e 	umaal	r0, r1, r4, lr
    14fa:	9205      	str	r2, [sp, #20]
    14fc:	fba7 3208 	umull	r3, r2, r7, r8
    1500:	fbe4 626a 	umaal	r6, r2, r4, sl
    1504:	fbe4 b26c 	umaal	fp, r2, r4, ip
    1508:	fbe4 026e 	umaal	r0, r2, r4, lr
    150c:	fbe7 126e 	umaal	r1, r2, r7, lr
    1510:	fbe7 5368 	umaal	r5, r3, r7, r8
    1514:	fbe7 6369 	umaal	r6, r3, r7, r9
    1518:	fbe4 b36c 	umaal	fp, r3, r4, ip
    151c:	fbe7 036c 	umaal	r0, r3, r7, ip
    1520:	fbe7 136e 	umaal	r1, r3, r7, lr
    1524:	fbe8 236e 	umaal	r2, r3, r8, lr
    1528:	9506      	str	r5, [sp, #24]
    152a:	fba7 5409 	umull	r5, r4, r7, r9
    152e:	fbe7 b46a 	umaal	fp, r4, r7, sl
    1532:	fbe7 046c 	umaal	r0, r4, r7, ip
    1536:	fbe8 146c 	umaal	r1, r4, r8, ip
    153a:	fbe8 246e 	umaal	r2, r4, r8, lr
    153e:	fbe9 346e 	umaal	r3, r4, r9, lr
    1542:	fbe8 6568 	umaal	r6, r5, r8, r8
    1546:	fbe7 b56a 	umaal	fp, r5, r7, sl
    154a:	fbe8 056a 	umaal	r0, r5, r8, sl
    154e:	fbe8 156c 	umaal	r1, r5, r8, ip
    1552:	fbe9 256c 	umaal	r2, r5, r9, ip
    1556:	fbe9 356e 	umaal	r3, r5, r9, lr
    155a:	fbea 456e 	umaal	r4, r5, sl, lr
    155e:	9607      	str	r6, [sp, #28]
    1560:	fba8 7609 	umull	r7, r6, r8, r9
    1564:	fbe8 066a 	umaal	r0, r6, r8, sl
    1568:	fbe9 166a 	umaal	r1, r6, r9, sl
    156c:	fbe9 266c 	umaal	r2, r6, r9, ip
    1570:	fbea 366c 	umaal	r3, r6, sl, ip
    1574:	fbea 466e 	umaal	r4, r6, sl, lr
    1578:	fbec 566e 	umaal	r5, r6, ip, lr
    157c:	fbe8 b769 	umaal	fp, r7, r8, r9
    1580:	fbe9 0769 	umaal	r0, r7, r9, r9
    1584:	fbe9 176a 	umaal	r1, r7, r9, sl
    1588:	fbea 276a 	umaal	r2, r7, sl, sl
    158c:	fbea 376c 	umaal	r3, r7, sl, ip
    1590:	fbec 476c 	umaal	r4, r7, ip, ip
    1594:	fbec 576e 	umaal	r5, r7, ip, lr
    1598:	fbee 676e 	umaal	r6, r7, lr, lr
    159c:	bd00      	pop	{pc}
    159e:	bf00      	nop

000015a0 <ocrypto_bigint_sqr256>:
    15a0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15a4:	b087      	sub	sp, #28
    15a6:	f7ff ff6f 	bl	1488 <ocrypto_sqr256_noframe>
    15aa:	f8dd 801c 	ldr.w	r8, [sp, #28]
    15ae:	f108 0820 	add.w	r8, r8, #32
    15b2:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    15b6:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    15b8:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
    15bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000015c0 <ocrypto_constant_time_equal>:
    15c0:	b430      	push	{r4, r5}
    15c2:	f04f 0300 	mov.w	r3, #0

000015c6 <constant_time_equal_loop>:
    15c6:	f810 4b01 	ldrb.w	r4, [r0], #1
    15ca:	f811 5b01 	ldrb.w	r5, [r1], #1
    15ce:	3a01      	subs	r2, #1
    15d0:	ea84 0405 	eor.w	r4, r4, r5
    15d4:	ea43 0304 	orr.w	r3, r3, r4
    15d8:	d1f5      	bne.n	15c6 <constant_time_equal_loop>
    15da:	f1a3 0301 	sub.w	r3, r3, #1
    15de:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    15e2:	bc30      	pop	{r4, r5}
    15e4:	4770      	bx	lr
    15e6:	bf00      	nop

000015e8 <ocrypto_constant_time_is_zero>:
    15e8:	f04f 0300 	mov.w	r3, #0

000015ec <constant_time_is_zero_loop>:
    15ec:	f810 2b01 	ldrb.w	r2, [r0], #1
    15f0:	3901      	subs	r1, #1
    15f2:	ea43 0302 	orr.w	r3, r3, r2
    15f6:	d1f9      	bne.n	15ec <constant_time_is_zero_loop>
    15f8:	f1a3 0301 	sub.w	r3, r3, #1
    15fc:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    1600:	4770      	bx	lr
    1602:	bf00      	nop

00001604 <ocrypto_constant_time_xor>:
    1604:	b430      	push	{r4, r5}

00001606 <constant_time_xor_loop>:
    1606:	f811 4b01 	ldrb.w	r4, [r1], #1
    160a:	f812 5b01 	ldrb.w	r5, [r2], #1
    160e:	406c      	eors	r4, r5
    1610:	f800 4b01 	strb.w	r4, [r0], #1
    1614:	3b01      	subs	r3, #1
    1616:	d1f6      	bne.n	1606 <constant_time_xor_loop>
    1618:	bc30      	pop	{r4, r5}
    161a:	4770      	bx	lr

0000161c <ocrypto_mod_p256_add>:
    161c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1620:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    1624:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1628:	185b      	adds	r3, r3, r1
    162a:	eb54 040c 	adcs.w	r4, r4, ip
    162e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1632:	414d      	adcs	r5, r1
    1634:	eb56 060c 	adcs.w	r6, r6, ip
    1638:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    163c:	414f      	adcs	r7, r1
    163e:	eb58 080c 	adcs.w	r8, r8, ip
    1642:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1646:	eb59 0901 	adcs.w	r9, r9, r1
    164a:	eb5a 0a0c 	adcs.w	sl, sl, ip
    164e:	4189      	sbcs	r1, r1
    1650:	f1b3 33ff 	subs.w	r3, r3, #4294967295
    1654:	f174 34ff 	sbcs.w	r4, r4, #4294967295
    1658:	f175 35ff 	sbcs.w	r5, r5, #4294967295
    165c:	f176 0600 	sbcs.w	r6, r6, #0
    1660:	f177 0700 	sbcs.w	r7, r7, #0
    1664:	f178 0800 	sbcs.w	r8, r8, #0
    1668:	f179 0901 	sbcs.w	r9, r9, #1
    166c:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
    1670:	f151 0100 	adcs.w	r1, r1, #0
    1674:	185b      	adds	r3, r3, r1
    1676:	414c      	adcs	r4, r1
    1678:	414d      	adcs	r5, r1
    167a:	f156 0600 	adcs.w	r6, r6, #0
    167e:	f157 0700 	adcs.w	r7, r7, #0
    1682:	f158 0800 	adcs.w	r8, r8, #0
    1686:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    168a:	eb5a 0a01 	adcs.w	sl, sl, r1
    168e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    1692:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1696:	4770      	bx	lr

00001698 <ocrypto_mod_p256_sub>:
    1698:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    169c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    16a0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    16a4:	1a5b      	subs	r3, r3, r1
    16a6:	eb74 040c 	sbcs.w	r4, r4, ip
    16aa:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    16ae:	418d      	sbcs	r5, r1
    16b0:	eb76 060c 	sbcs.w	r6, r6, ip
    16b4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    16b8:	418f      	sbcs	r7, r1
    16ba:	eb78 080c 	sbcs.w	r8, r8, ip
    16be:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    16c2:	eb79 0901 	sbcs.w	r9, r9, r1
    16c6:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    16ca:	4189      	sbcs	r1, r1
    16cc:	185b      	adds	r3, r3, r1
    16ce:	414c      	adcs	r4, r1
    16d0:	414d      	adcs	r5, r1
    16d2:	f156 0600 	adcs.w	r6, r6, #0
    16d6:	f157 0700 	adcs.w	r7, r7, #0
    16da:	f158 0800 	adcs.w	r8, r8, #0
    16de:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    16e2:	eb5a 0a01 	adcs.w	sl, sl, r1
    16e6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    16ea:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    16ee:	4770      	bx	lr

000016f0 <mul_reduce>:
    16f0:	eb18 0804 	adds.w	r8, r8, r4
    16f4:	eb59 0905 	adcs.w	r9, r9, r5
    16f8:	eb5a 0a06 	adcs.w	sl, sl, r6
    16fc:	eb5b 0b07 	adcs.w	fp, fp, r7
    1700:	f05f 0c00 	movs.w	ip, #0
    1704:	f14c 0c00 	adc.w	ip, ip, #0
    1708:	eb18 0805 	adds.w	r8, r8, r5
    170c:	eb59 0906 	adcs.w	r9, r9, r6
    1710:	eb5a 0a07 	adcs.w	sl, sl, r7
    1714:	eb5b 0b07 	adcs.w	fp, fp, r7
    1718:	eb50 000c 	adcs.w	r0, r0, ip
    171c:	f05f 0c00 	movs.w	ip, #0
    1720:	eb51 010c 	adcs.w	r1, r1, ip
    1724:	eb52 020c 	adcs.w	r2, r2, ip
    1728:	4163      	adcs	r3, r4
    172a:	f14c 0c00 	adc.w	ip, ip, #0
    172e:	ebb8 0807 	subs.w	r8, r8, r7
    1732:	f179 0900 	sbcs.w	r9, r9, #0
    1736:	f17a 0a00 	sbcs.w	sl, sl, #0
    173a:	eb7b 0b04 	sbcs.w	fp, fp, r4
    173e:	41a8      	sbcs	r0, r5
    1740:	41b1      	sbcs	r1, r6
    1742:	41a2      	sbcs	r2, r4
    1744:	41b3      	sbcs	r3, r6
    1746:	f16c 0c00 	sbc.w	ip, ip, #0
    174a:	ebbb 0b05 	subs.w	fp, fp, r5
    174e:	41b0      	sbcs	r0, r6
    1750:	41b9      	sbcs	r1, r7
    1752:	41aa      	sbcs	r2, r5
    1754:	41bb      	sbcs	r3, r7
    1756:	f16c 0c00 	sbc.w	ip, ip, #0
    175a:	ea6f 74ec 	mvn.w	r4, ip, asr #31
    175e:	ebb8 0804 	subs.w	r8, r8, r4
    1762:	eb79 0904 	sbcs.w	r9, r9, r4
    1766:	eb7a 0a04 	sbcs.w	sl, sl, r4
    176a:	f17b 0b00 	sbcs.w	fp, fp, #0
    176e:	f170 0000 	sbcs.w	r0, r0, #0
    1772:	f171 0100 	sbcs.w	r1, r1, #0
    1776:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
    177a:	41a3      	sbcs	r3, r4
    177c:	f16c 0c00 	sbc.w	ip, ip, #0
    1780:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
    1784:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
    1788:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
    178c:	f15b 0b00 	adcs.w	fp, fp, #0
    1790:	f150 0400 	adcs.w	r4, r0, #0
    1794:	f151 0500 	adcs.w	r5, r1, #0
    1798:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
    179c:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
    17a0:	f14c 0c00 	adc.w	ip, ip, #0
    17a4:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
    17a8:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
    17ac:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
    17b0:	f15b 0300 	adcs.w	r3, fp, #0
    17b4:	f154 0400 	adcs.w	r4, r4, #0
    17b8:	f155 0500 	adcs.w	r5, r5, #0
    17bc:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
    17c0:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
    17c4:	4770      	bx	lr
    17c6:	bf00      	nop

000017c8 <ocrypto_mod_p256_mul>:
    17c8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17cc:	b087      	sub	sp, #28
    17ce:	f7ff fd9f 	bl	1310 <ocrypto_mul256_noframe>
    17d2:	f8dd 8010 	ldr.w	r8, [sp, #16]
    17d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
    17da:	f8dd a018 	ldr.w	sl, [sp, #24]
    17de:	f7ff ff87 	bl	16f0 <mul_reduce>
    17e2:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    17e6:	f7ff ff83 	bl	16f0 <mul_reduce>
    17ea:	b003      	add	sp, #12
    17ec:	f85d 8b04 	ldr.w	r8, [sp], #4
    17f0:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    17f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000017f8 <ocrypto_mod_p256_sqr>:
    17f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17fc:	b087      	sub	sp, #28
    17fe:	f7ff fe43 	bl	1488 <ocrypto_sqr256_noframe>
    1802:	f8dd 8010 	ldr.w	r8, [sp, #16]
    1806:	f8dd 9014 	ldr.w	r9, [sp, #20]
    180a:	f8dd a018 	ldr.w	sl, [sp, #24]
    180e:	f7ff ff6f 	bl	16f0 <mul_reduce>
    1812:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    1816:	f7ff ff6b 	bl	16f0 <mul_reduce>
    181a:	b003      	add	sp, #12
    181c:	f85d 8b04 	ldr.w	r8, [sp], #4
    1820:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    1824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001828 <__aeabi_dcmpun>:
    1828:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    182c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1830:	d102      	bne.n	1838 <__aeabi_dcmpun+0x10>
    1832:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    1836:	d10a      	bne.n	184e <__aeabi_dcmpun+0x26>
    1838:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    183c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1840:	d102      	bne.n	1848 <__aeabi_dcmpun+0x20>
    1842:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    1846:	d102      	bne.n	184e <__aeabi_dcmpun+0x26>
    1848:	f04f 0000 	mov.w	r0, #0
    184c:	4770      	bx	lr
    184e:	f04f 0001 	mov.w	r0, #1
    1852:	4770      	bx	lr

00001854 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    1854:	4801      	ldr	r0, [pc, #4]	; (185c <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    1856:	7800      	ldrb	r0, [r0, #0]
    1858:	4770      	bx	lr
    185a:	0000      	.short	0x0000
    185c:	20000028 	.word	0x20000028

00001860 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    1860:	b570      	push	{r4, r5, r6, lr}
    1862:	f00c f8cd 	bl	da00 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    1866:	4c13      	ldr	r4, [pc, #76]	; (18b4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>)
    1868:	f06f 0527 	mvn.w	r5, #39	; 0x27
    186c:	b928      	cbnz	r0, 187a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x1a>
    186e:	f00c f8fd 	bl	da6c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    1872:	b910      	cbnz	r0, 187a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x1a>
    1874:	f00c f904 	bl	da80 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    1878:	b120      	cbz	r0, 1884 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    187a:	480f      	ldr	r0, [pc, #60]	; (18b8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x58>)
    187c:	6060      	str	r0, [r4, #4]
    187e:	7065      	strb	r5, [r4, #1]
    1880:	2008      	movs	r0, #8
    1882:	e010      	b.n	18a6 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    1884:	f00c f891 	bl	d9aa <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    1888:	b940      	cbnz	r0, 189c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
    188a:	f00c f898 	bl	d9be <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    188e:	b928      	cbnz	r0, 189c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
    1890:	f00c f8ac 	bl	d9ec <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    1894:	b910      	cbnz	r0, 189c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
    1896:	f00c f8bd 	bl	da14 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    189a:	b130      	cbz	r0, 18aa <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x4a>
    189c:	4806      	ldr	r0, [pc, #24]	; (18b8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x58>)
    189e:	3031      	adds	r0, #49	; 0x31
    18a0:	6060      	str	r0, [r4, #4]
    18a2:	7065      	strb	r5, [r4, #1]
    18a4:	2004      	movs	r0, #4
    18a6:	70a0      	strb	r0, [r4, #2]
    18a8:	bd70      	pop	{r4, r5, r6, pc}
    18aa:	21e8      	movs	r1, #232	; 0xe8
    18ac:	2074      	movs	r0, #116	; 0x74
    18ae:	f003 fbbf 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18b2:	0000      	.short	0x0000
    18b4:	20000028 	.word	0x20000028
    18b8:	000119d4 	.word	0x000119d4

000018bc <mpsl_tx_power_radio_supported_power_adjust>:
    18bc:	4907      	ldr	r1, [pc, #28]	; (18dc <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    18be:	f991 2002 	ldrsb.w	r2, [r1, #2]
    18c2:	4290      	cmp	r0, r2
    18c4:	da03      	bge.n	18ce <mpsl_tx_power_radio_supported_power_adjust+0x12>
    18c6:	f991 2001 	ldrsb.w	r2, [r1, #1]
    18ca:	4290      	cmp	r0, r2
    18cc:	dc01      	bgt.n	18d2 <mpsl_tx_power_radio_supported_power_adjust+0x16>
    18ce:	4610      	mov	r0, r2
    18d0:	4770      	bx	lr
    18d2:	6849      	ldr	r1, [r1, #4]
    18d4:	1a80      	subs	r0, r0, r2
    18d6:	5608      	ldrsb	r0, [r1, r0]
    18d8:	4770      	bx	lr
    18da:	0000      	.short	0x0000
    18dc:	20000028 	.word	0x20000028

000018e0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    18e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    18e4:	461c      	mov	r4, r3
    18e6:	4690      	mov	r8, r2
    18e8:	460d      	mov	r5, r1
    18ea:	4606      	mov	r6, r0
    18ec:	f06f 0715 	mvn.w	r7, #21
    18f0:	2804      	cmp	r0, #4
    18f2:	d804      	bhi.n	18fe <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    18f4:	b11c      	cbz	r4, 18fe <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    18f6:	f00b fcfa 	bl	d2ee <strlen+0x10>
    18fa:	42a8      	cmp	r0, r5
    18fc:	d802      	bhi.n	1904 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    18fe:	4638      	mov	r0, r7
    1900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1904:	4805      	ldr	r0, [pc, #20]	; (191c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    1906:	4642      	mov	r2, r8
    1908:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    190c:	b118      	cbz	r0, 1916 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    190e:	5740      	ldrsb	r0, [r0, r5]
    1910:	4282      	cmp	r2, r0
    1912:	dd00      	ble.n	1916 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    1914:	4602      	mov	r2, r0
    1916:	7022      	strb	r2, [r4, #0]
    1918:	2000      	movs	r0, #0
    191a:	e7f1      	b.n	1900 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    191c:	20000eb0 	.word	0x20000eb0
    1920:	2800      	cmp	r0, #0
    1922:	d019      	beq.n	1958 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x78>
    1924:	7803      	ldrb	r3, [r0, #0]
    1926:	4913      	ldr	r1, [pc, #76]	; (1974 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x94>)
    1928:	4a13      	ldr	r2, [pc, #76]	; (1978 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x98>)
    192a:	b113      	cbz	r3, 1932 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x52>
    192c:	2b01      	cmp	r3, #1
    192e:	d00e      	beq.n	194e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x6e>
    1930:	e011      	b.n	1956 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    1932:	7903      	ldrb	r3, [r0, #4]
    1934:	2b01      	cmp	r3, #1
    1936:	d000      	beq.n	193a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x5a>
    1938:	b96b      	cbnz	r3, 1956 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    193a:	7943      	ldrb	r3, [r0, #5]
    193c:	b10b      	cbz	r3, 1942 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x62>
    193e:	2b01      	cmp	r3, #1
    1940:	d109      	bne.n	1956 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    1942:	6883      	ldr	r3, [r0, #8]
    1944:	3b64      	subs	r3, #100	; 0x64
    1946:	428b      	cmp	r3, r1
    1948:	d205      	bcs.n	1956 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    194a:	68c0      	ldr	r0, [r0, #12]
    194c:	e00e      	b.n	196c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
    194e:	7903      	ldrb	r3, [r0, #4]
    1950:	2b01      	cmp	r3, #1
    1952:	d002      	beq.n	195a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x7a>
    1954:	b10b      	cbz	r3, 195a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x7a>
    1956:	2000      	movs	r0, #0
    1958:	4770      	bx	lr
    195a:	7943      	ldrb	r3, [r0, #5]
    195c:	b10b      	cbz	r3, 1962 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x82>
    195e:	2b01      	cmp	r3, #1
    1960:	d1f9      	bne.n	1956 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    1962:	68c3      	ldr	r3, [r0, #12]
    1964:	3b64      	subs	r3, #100	; 0x64
    1966:	428b      	cmp	r3, r1
    1968:	d2f5      	bcs.n	1956 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    196a:	6880      	ldr	r0, [r0, #8]
    196c:	4290      	cmp	r0, r2
    196e:	d8f2      	bhi.n	1956 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    1970:	2001      	movs	r0, #1
    1972:	4770      	bx	lr
    1974:	0001863d 	.word	0x0001863d
    1978:	0f423fff 	.word	0x0f423fff
    197c:	b510      	push	{r4, lr}
    197e:	4c05      	ldr	r4, [pc, #20]	; (1994 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xb4>)
    1980:	6820      	ldr	r0, [r4, #0]
    1982:	b110      	cbz	r0, 198a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xaa>
    1984:	4780      	blx	r0
    1986:	2000      	movs	r0, #0
    1988:	6020      	str	r0, [r4, #0]
    198a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    198e:	f002 b8bd 	b.w	3b0c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    1992:	0000      	.short	0x0000
    1994:	20000030 	.word	0x20000030

00001998 <mpsl_timeslot_session_open>:
    1998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    199c:	460e      	mov	r6, r1
    199e:	0005      	movs	r5, r0
    19a0:	d004      	beq.n	19ac <mpsl_timeslot_session_open+0x14>
    19a2:	f000 f847 	bl	1a34 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    19a6:	4607      	mov	r7, r0
    19a8:	2400      	movs	r4, #0
    19aa:	e00b      	b.n	19c4 <mpsl_timeslot_session_open+0x2c>
    19ac:	f06f 0015 	mvn.w	r0, #21
    19b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    19b4:	4620      	mov	r0, r4
    19b6:	f000 f843 	bl	1a40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    19ba:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    19be:	b130      	cbz	r0, 19ce <mpsl_timeslot_session_open+0x36>
    19c0:	1c64      	adds	r4, r4, #1
    19c2:	b2e4      	uxtb	r4, r4
    19c4:	42bc      	cmp	r4, r7
    19c6:	d3f5      	bcc.n	19b4 <mpsl_timeslot_session_open+0x1c>
    19c8:	f06f 000b 	mvn.w	r0, #11
    19cc:	e7f0      	b.n	19b0 <mpsl_timeslot_session_open+0x18>
    19ce:	4627      	mov	r7, r4
    19d0:	2cff      	cmp	r4, #255	; 0xff
    19d2:	d0f9      	beq.n	19c8 <mpsl_timeslot_session_open+0x30>
    19d4:	4620      	mov	r0, r4
    19d6:	f000 f833 	bl	1a40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    19da:	4604      	mov	r4, r0
    19dc:	f00b fe53 	bl	d686 <strlen+0x3a8>
    19e0:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
    19e4:	4621      	mov	r1, r4
    19e6:	4808      	ldr	r0, [pc, #32]	; (1a08 <mpsl_timeslot_session_open+0x70>)
    19e8:	f002 f868 	bl	3abc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    19ec:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    19f0:	2820      	cmp	r0, #32
    19f2:	d006      	beq.n	1a02 <mpsl_timeslot_session_open+0x6a>
    19f4:	2001      	movs	r0, #1
    19f6:	6225      	str	r5, [r4, #32]
    19f8:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    19fc:	7037      	strb	r7, [r6, #0]
    19fe:	2000      	movs	r0, #0
    1a00:	e7d6      	b.n	19b0 <mpsl_timeslot_session_open+0x18>
    1a02:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1a06:	e7d3      	b.n	19b0 <mpsl_timeslot_session_open+0x18>
    1a08:	0000d3b1 	.word	0x0000d3b1

00001a0c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
    1a0c:	b510      	push	{r4, lr}
    1a0e:	0782      	lsls	r2, r0, #30
    1a10:	d002      	beq.n	1a18 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
    1a12:	f06f 000d 	mvn.w	r0, #13
    1a16:	bd10      	pop	{r4, pc}
    1a18:	4a05      	ldr	r2, [pc, #20]	; (1a30 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
    1a1a:	7011      	strb	r1, [r2, #0]
    1a1c:	6050      	str	r0, [r2, #4]
    1a1e:	b128      	cbz	r0, 1a2c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
    1a20:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1a24:	010a      	lsls	r2, r1, #4
    1a26:	2100      	movs	r1, #0
    1a28:	f00c f8ae 	bl	db88 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1a2c:	2000      	movs	r0, #0
    1a2e:	bd10      	pop	{r4, pc}
    1a30:	20000034 	.word	0x20000034

00001a34 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    1a34:	4801      	ldr	r0, [pc, #4]	; (1a3c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    1a36:	7800      	ldrb	r0, [r0, #0]
    1a38:	4770      	bx	lr
    1a3a:	0000      	.short	0x0000
    1a3c:	20000034 	.word	0x20000034

00001a40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    1a40:	4905      	ldr	r1, [pc, #20]	; (1a58 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    1a42:	780a      	ldrb	r2, [r1, #0]
    1a44:	4290      	cmp	r0, r2
    1a46:	d301      	bcc.n	1a4c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    1a48:	2000      	movs	r0, #0
    1a4a:	4770      	bx	lr
    1a4c:	6849      	ldr	r1, [r1, #4]
    1a4e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1a52:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    1a56:	4770      	bx	lr
    1a58:	20000034 	.word	0x20000034

00001a5c <MPSL_IRQ_RADIO_Handler>:
    1a5c:	490e      	ldr	r1, [pc, #56]	; (1a98 <MPSL_IRQ_RADIO_Handler+0x3c>)
    1a5e:	b510      	push	{r4, lr}
    1a60:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
    1a64:	2820      	cmp	r0, #32
    1a66:	d012      	beq.n	1a8e <MPSL_IRQ_RADIO_Handler+0x32>
    1a68:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
    1a6c:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
    1a70:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1a74:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    1a78:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
    1a7c:	6840      	ldr	r0, [r0, #4]
    1a7e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1a82:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    1a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a8a:	2104      	movs	r1, #4
    1a8c:	4710      	bx	r2
    1a8e:	f640 0187 	movw	r1, #2183	; 0x887
    1a92:	2070      	movs	r0, #112	; 0x70
    1a94:	f003 facc 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a98:	200012c4 	.word	0x200012c4
    1a9c:	b570      	push	{r4, r5, r6, lr}
    1a9e:	4605      	mov	r5, r0
    1aa0:	2a20      	cmp	r2, #32
    1aa2:	d028      	beq.n	1af6 <MPSL_IRQ_RADIO_Handler+0x9a>
    1aa4:	4819      	ldr	r0, [pc, #100]	; (1b0c <MPSL_IRQ_RADIO_Handler+0xb0>)
    1aa6:	4c1a      	ldr	r4, [pc, #104]	; (1b10 <MPSL_IRQ_RADIO_Handler+0xb4>)
    1aa8:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    1aac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1ab0:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    1ab4:	4423      	add	r3, r4
    1ab6:	2920      	cmp	r1, #32
    1ab8:	d022      	beq.n	1b00 <MPSL_IRQ_RADIO_Handler+0xa4>
    1aba:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    1abe:	7840      	ldrb	r0, [r0, #1]
    1ac0:	784c      	ldrb	r4, [r1, #1]
    1ac2:	7048      	strb	r0, [r1, #1]
    1ac4:	4620      	mov	r0, r4
    1ac6:	4601      	mov	r1, r0
    1ac8:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    1acc:	4291      	cmp	r1, r2
    1ace:	7005      	strb	r5, [r0, #0]
    1ad0:	7840      	ldrb	r0, [r0, #1]
    1ad2:	d1f8      	bne.n	1ac6 <MPSL_IRQ_RADIO_Handler+0x6a>
    1ad4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    1ad8:	2a20      	cmp	r2, #32
    1ada:	bf1a      	itte	ne
    1adc:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    1ae0:	7054      	strbne	r4, [r2, #1]
    1ae2:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    1ae6:	2220      	movs	r2, #32
    1ae8:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    1aec:	f88c 2001 	strb.w	r2, [ip, #1]
    1af0:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    1af4:	bd70      	pop	{r4, r5, r6, pc}
    1af6:	f240 2192 	movw	r1, #658	; 0x292
    1afa:	2070      	movs	r0, #112	; 0x70
    1afc:	f003 fa98 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b00:	f893 4020 	ldrb.w	r4, [r3, #32]
    1b04:	7840      	ldrb	r0, [r0, #1]
    1b06:	f883 0020 	strb.w	r0, [r3, #32]
    1b0a:	e7db      	b.n	1ac4 <MPSL_IRQ_RADIO_Handler+0x68>
    1b0c:	20001244 	.word	0x20001244
    1b10:	200012c4 	.word	0x200012c4
    1b14:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b18:	b085      	sub	sp, #20
    1b1a:	4615      	mov	r5, r2
    1b1c:	460c      	mov	r4, r1
    1b1e:	f002 f9e3 	bl	3ee8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1b22:	4428      	add	r0, r5
    1b24:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1b28:	9102      	str	r1, [sp, #8]
    1b2a:	6820      	ldr	r0, [r4, #0]
    1b2c:	1a40      	subs	r0, r0, r1
    1b2e:	0200      	lsls	r0, r0, #8
    1b30:	17c1      	asrs	r1, r0, #31
    1b32:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1b36:	1200      	asrs	r0, r0, #8
    1b38:	2800      	cmp	r0, #0
    1b3a:	f300 80f0 	bgt.w	1d1e <MPSL_IRQ_RADIO_Handler+0x2c2>
    1b3e:	f8dd 8020 	ldr.w	r8, [sp, #32]
    1b42:	48ca      	ldr	r0, [pc, #808]	; (1e6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x120>)
    1b44:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    1b48:	4408      	add	r0, r1
    1b4a:	9003      	str	r0, [sp, #12]
    1b4c:	f890 5020 	ldrb.w	r5, [r0, #32]
    1b50:	2020      	movs	r0, #32
    1b52:	4ec7      	ldr	r6, [pc, #796]	; (1e70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x124>)
    1b54:	46ea      	mov	sl, sp
    1b56:	f10d 0904 	add.w	r9, sp, #4
    1b5a:	f88d 0000 	strb.w	r0, [sp]
    1b5e:	2d20      	cmp	r5, #32
    1b60:	bf1c      	itt	ne
    1b62:	48c4      	ldrne	r0, [pc, #784]	; (1e74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x128>)
    1b64:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1b68:	d039      	beq.n	1bde <MPSL_IRQ_RADIO_Handler+0x182>
    1b6a:	bf00      	nop
    1b6c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1b70:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1b74:	f100 0108 	add.w	r1, r0, #8
    1b78:	68c0      	ldr	r0, [r0, #12]
    1b7a:	6827      	ldr	r7, [r4, #0]
    1b7c:	1a38      	subs	r0, r7, r0
    1b7e:	0200      	lsls	r0, r0, #8
    1b80:	17c2      	asrs	r2, r0, #31
    1b82:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1b86:	1200      	asrs	r0, r0, #8
    1b88:	d429      	bmi.n	1bde <MPSL_IRQ_RADIO_Handler+0x182>
    1b8a:	89e0      	ldrh	r0, [r4, #14]
    1b8c:	b300      	cbz	r0, 1bd0 <MPSL_IRQ_RADIO_Handler+0x174>
    1b8e:	89c8      	ldrh	r0, [r1, #14]
    1b90:	b9f0      	cbnz	r0, 1bd0 <MPSL_IRQ_RADIO_Handler+0x174>
    1b92:	6808      	ldr	r0, [r1, #0]
    1b94:	9004      	str	r0, [sp, #16]
    1b96:	f003 f8a1 	bl	4cdc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1b9a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1b9e:	bf08      	it	eq
    1ba0:	200d      	moveq	r0, #13
    1ba2:	d00b      	beq.n	1bbc <MPSL_IRQ_RADIO_Handler+0x160>
    1ba4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1ba8:	3856      	subs	r0, #86	; 0x56
    1baa:	bf08      	it	eq
    1bac:	201c      	moveq	r0, #28
    1bae:	d005      	beq.n	1bbc <MPSL_IRQ_RADIO_Handler+0x160>
    1bb0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1bb4:	389f      	subs	r0, #159	; 0x9f
    1bb6:	bf14      	ite	ne
    1bb8:	2000      	movne	r0, #0
    1bba:	2032      	moveq	r0, #50	; 0x32
    1bbc:	1c41      	adds	r1, r0, #1
    1bbe:	9804      	ldr	r0, [sp, #16]
    1bc0:	1a38      	subs	r0, r7, r0
    1bc2:	0200      	lsls	r0, r0, #8
    1bc4:	17c2      	asrs	r2, r0, #31
    1bc6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1bca:	1200      	asrs	r0, r0, #8
    1bcc:	4288      	cmp	r0, r1
    1bce:	db06      	blt.n	1bde <MPSL_IRQ_RADIO_Handler+0x182>
    1bd0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1bd4:	f88a 5000 	strb.w	r5, [sl]
    1bd8:	7845      	ldrb	r5, [r0, #1]
    1bda:	2d20      	cmp	r5, #32
    1bdc:	d1c6      	bne.n	1b6c <MPSL_IRQ_RADIO_Handler+0x110>
    1bde:	f89a 0000 	ldrb.w	r0, [sl]
    1be2:	f889 0000 	strb.w	r0, [r9]
    1be6:	2d20      	cmp	r5, #32
    1be8:	bf1c      	itt	ne
    1bea:	48a2      	ldrne	r0, [pc, #648]	; (1e74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x128>)
    1bec:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1bf0:	f000 8138 	beq.w	1e64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    1bf4:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1bf8:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    1bfc:	6860      	ldr	r0, [r4, #4]
    1bfe:	f8d7 8008 	ldr.w	r8, [r7, #8]
    1c02:	f107 0108 	add.w	r1, r7, #8
    1c06:	eba8 0000 	sub.w	r0, r8, r0
    1c0a:	0200      	lsls	r0, r0, #8
    1c0c:	17c2      	asrs	r2, r0, #31
    1c0e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1c12:	1200      	asrs	r0, r0, #8
    1c14:	d427      	bmi.n	1c66 <MPSL_IRQ_RADIO_Handler+0x20a>
    1c16:	89c8      	ldrh	r0, [r1, #14]
    1c18:	2800      	cmp	r0, #0
    1c1a:	f000 8123 	beq.w	1e64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    1c1e:	89e0      	ldrh	r0, [r4, #14]
    1c20:	2800      	cmp	r0, #0
    1c22:	f040 811f 	bne.w	1e64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    1c26:	f8d4 a000 	ldr.w	sl, [r4]
    1c2a:	f003 f857 	bl	4cdc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1c2e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1c32:	bf08      	it	eq
    1c34:	200d      	moveq	r0, #13
    1c36:	d00b      	beq.n	1c50 <MPSL_IRQ_RADIO_Handler+0x1f4>
    1c38:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1c3c:	3856      	subs	r0, #86	; 0x56
    1c3e:	bf08      	it	eq
    1c40:	201c      	moveq	r0, #28
    1c42:	d005      	beq.n	1c50 <MPSL_IRQ_RADIO_Handler+0x1f4>
    1c44:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1c48:	389f      	subs	r0, #159	; 0x9f
    1c4a:	bf14      	ite	ne
    1c4c:	2000      	movne	r0, #0
    1c4e:	2032      	moveq	r0, #50	; 0x32
    1c50:	1c41      	adds	r1, r0, #1
    1c52:	eba8 000a 	sub.w	r0, r8, sl
    1c56:	0200      	lsls	r0, r0, #8
    1c58:	17c2      	asrs	r2, r0, #31
    1c5a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1c5e:	1200      	asrs	r0, r0, #8
    1c60:	4288      	cmp	r0, r1
    1c62:	f280 80ff 	bge.w	1e64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    1c66:	f889 5000 	strb.w	r5, [r9]
    1c6a:	7e39      	ldrb	r1, [r7, #24]
    1c6c:	7c20      	ldrb	r0, [r4, #16]
    1c6e:	4281      	cmp	r1, r0
    1c70:	d906      	bls.n	1c80 <MPSL_IRQ_RADIO_Handler+0x224>
    1c72:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1c76:	7845      	ldrb	r5, [r0, #1]
    1c78:	2d20      	cmp	r5, #32
    1c7a:	d1bb      	bne.n	1bf4 <MPSL_IRQ_RADIO_Handler+0x198>
    1c7c:	f000 b8f2 	b.w	1e64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    1c80:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1c84:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1c88:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1c8c:	8ac1      	ldrh	r1, [r0, #22]
    1c8e:	68c5      	ldr	r5, [r0, #12]
    1c90:	bbe1      	cbnz	r1, 1d0c <MPSL_IRQ_RADIO_Handler+0x2b0>
    1c92:	89e1      	ldrh	r1, [r4, #14]
    1c94:	b3d1      	cbz	r1, 1d0c <MPSL_IRQ_RADIO_Handler+0x2b0>
    1c96:	6887      	ldr	r7, [r0, #8]
    1c98:	f003 f820 	bl	4cdc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1c9c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1ca0:	bf08      	it	eq
    1ca2:	200d      	moveq	r0, #13
    1ca4:	d00b      	beq.n	1cbe <MPSL_IRQ_RADIO_Handler+0x262>
    1ca6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1caa:	3856      	subs	r0, #86	; 0x56
    1cac:	bf08      	it	eq
    1cae:	201c      	moveq	r0, #28
    1cb0:	d005      	beq.n	1cbe <MPSL_IRQ_RADIO_Handler+0x262>
    1cb2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1cb6:	389f      	subs	r0, #159	; 0x9f
    1cb8:	bf14      	ite	ne
    1cba:	2000      	movne	r0, #0
    1cbc:	2032      	moveq	r0, #50	; 0x32
    1cbe:	1c41      	adds	r1, r0, #1
    1cc0:	1be8      	subs	r0, r5, r7
    1cc2:	0200      	lsls	r0, r0, #8
    1cc4:	17c2      	asrs	r2, r0, #31
    1cc6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1cca:	1200      	asrs	r0, r0, #8
    1ccc:	4288      	cmp	r0, r1
    1cce:	da1d      	bge.n	1d0c <MPSL_IRQ_RADIO_Handler+0x2b0>
    1cd0:	f003 f804 	bl	4cdc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1cd4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1cd8:	bf08      	it	eq
    1cda:	200d      	moveq	r0, #13
    1cdc:	d00b      	beq.n	1cf6 <MPSL_IRQ_RADIO_Handler+0x29a>
    1cde:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1ce2:	3856      	subs	r0, #86	; 0x56
    1ce4:	bf08      	it	eq
    1ce6:	201c      	moveq	r0, #28
    1ce8:	d005      	beq.n	1cf6 <MPSL_IRQ_RADIO_Handler+0x29a>
    1cea:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1cee:	389f      	subs	r0, #159	; 0x9f
    1cf0:	bf14      	ite	ne
    1cf2:	2000      	movne	r0, #0
    1cf4:	2032      	moveq	r0, #50	; 0x32
    1cf6:	f89d 1004 	ldrb.w	r1, [sp, #4]
    1cfa:	1c40      	adds	r0, r0, #1
    1cfc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1d00:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    1d04:	6889      	ldr	r1, [r1, #8]
    1d06:	4408      	add	r0, r1
    1d08:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    1d0c:	9802      	ldr	r0, [sp, #8]
    1d0e:	1a28      	subs	r0, r5, r0
    1d10:	0200      	lsls	r0, r0, #8
    1d12:	17c1      	asrs	r1, r0, #31
    1d14:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1d18:	1200      	asrs	r0, r0, #8
    1d1a:	2800      	cmp	r0, #0
    1d1c:	dd03      	ble.n	1d26 <MPSL_IRQ_RADIO_Handler+0x2ca>
    1d1e:	b009      	add	sp, #36	; 0x24
    1d20:	2000      	movs	r0, #0
    1d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d26:	e9d4 1000 	ldrd	r1, r0, [r4]
    1d2a:	1a40      	subs	r0, r0, r1
    1d2c:	4428      	add	r0, r5
    1d2e:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
    1d32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d36:	e9c4 1000 	strd	r1, r0, [r4]
    1d3a:	9808      	ldr	r0, [sp, #32]
    1d3c:	9004      	str	r0, [sp, #16]
    1d3e:	9803      	ldr	r0, [sp, #12]
    1d40:	46ea      	mov	sl, sp
    1d42:	f10d 0804 	add.w	r8, sp, #4
    1d46:	f890 5020 	ldrb.w	r5, [r0, #32]
    1d4a:	2020      	movs	r0, #32
    1d4c:	f88d 0000 	strb.w	r0, [sp]
    1d50:	2d20      	cmp	r5, #32
    1d52:	d03c      	beq.n	1dce <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x82>
    1d54:	4847      	ldr	r0, [pc, #284]	; (1e74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x128>)
    1d56:	9904      	ldr	r1, [sp, #16]
    1d58:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    1d5c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1d60:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1d64:	f100 0108 	add.w	r1, r0, #8
    1d68:	68c0      	ldr	r0, [r0, #12]
    1d6a:	6827      	ldr	r7, [r4, #0]
    1d6c:	1a38      	subs	r0, r7, r0
    1d6e:	0200      	lsls	r0, r0, #8
    1d70:	17c2      	asrs	r2, r0, #31
    1d72:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1d76:	1200      	asrs	r0, r0, #8
    1d78:	d429      	bmi.n	1dce <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x82>
    1d7a:	89e0      	ldrh	r0, [r4, #14]
    1d7c:	b300      	cbz	r0, 1dc0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x74>
    1d7e:	89c8      	ldrh	r0, [r1, #14]
    1d80:	b9f0      	cbnz	r0, 1dc0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x74>
    1d82:	f8d1 9000 	ldr.w	r9, [r1]
    1d86:	f002 ffa9 	bl	4cdc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1d8a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1d8e:	bf08      	it	eq
    1d90:	200d      	moveq	r0, #13
    1d92:	d00b      	beq.n	1dac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x60>
    1d94:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1d98:	3856      	subs	r0, #86	; 0x56
    1d9a:	bf08      	it	eq
    1d9c:	201c      	moveq	r0, #28
    1d9e:	d005      	beq.n	1dac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x60>
    1da0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1da4:	389f      	subs	r0, #159	; 0x9f
    1da6:	bf14      	ite	ne
    1da8:	2000      	movne	r0, #0
    1daa:	2032      	moveq	r0, #50	; 0x32
    1dac:	1c41      	adds	r1, r0, #1
    1dae:	eba7 0009 	sub.w	r0, r7, r9
    1db2:	0200      	lsls	r0, r0, #8
    1db4:	17c2      	asrs	r2, r0, #31
    1db6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1dba:	1200      	asrs	r0, r0, #8
    1dbc:	4288      	cmp	r0, r1
    1dbe:	db06      	blt.n	1dce <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x82>
    1dc0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1dc4:	f88a 5000 	strb.w	r5, [sl]
    1dc8:	7845      	ldrb	r5, [r0, #1]
    1dca:	2d20      	cmp	r5, #32
    1dcc:	d1c6      	bne.n	1d5c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10>
    1dce:	f89a 0000 	ldrb.w	r0, [sl]
    1dd2:	f888 0000 	strb.w	r0, [r8]
    1dd6:	9804      	ldr	r0, [sp, #16]
    1dd8:	2d20      	cmp	r5, #32
    1dda:	bf1c      	itt	ne
    1ddc:	4925      	ldrne	r1, [pc, #148]	; (1e74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x128>)
    1dde:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    1de2:	d03f      	beq.n	1e64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    1de4:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1de8:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    1dec:	6861      	ldr	r1, [r4, #4]
    1dee:	f8d7 9008 	ldr.w	r9, [r7, #8]
    1df2:	f107 0008 	add.w	r0, r7, #8
    1df6:	eba9 0101 	sub.w	r1, r9, r1
    1dfa:	0209      	lsls	r1, r1, #8
    1dfc:	17ca      	asrs	r2, r1, #31
    1dfe:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1e02:	1209      	asrs	r1, r1, #8
    1e04:	d422      	bmi.n	1e4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x100>
    1e06:	89c0      	ldrh	r0, [r0, #14]
    1e08:	b360      	cbz	r0, 1e64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    1e0a:	89e0      	ldrh	r0, [r4, #14]
    1e0c:	bb50      	cbnz	r0, 1e64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    1e0e:	f8d4 a000 	ldr.w	sl, [r4]
    1e12:	f002 ff63 	bl	4cdc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1e16:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1e1a:	bf08      	it	eq
    1e1c:	200d      	moveq	r0, #13
    1e1e:	d00b      	beq.n	1e38 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xec>
    1e20:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1e24:	3856      	subs	r0, #86	; 0x56
    1e26:	bf08      	it	eq
    1e28:	201c      	moveq	r0, #28
    1e2a:	d005      	beq.n	1e38 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xec>
    1e2c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1e30:	389f      	subs	r0, #159	; 0x9f
    1e32:	bf14      	ite	ne
    1e34:	2000      	movne	r0, #0
    1e36:	2032      	moveq	r0, #50	; 0x32
    1e38:	1c41      	adds	r1, r0, #1
    1e3a:	eba9 000a 	sub.w	r0, r9, sl
    1e3e:	0200      	lsls	r0, r0, #8
    1e40:	17c2      	asrs	r2, r0, #31
    1e42:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1e46:	1200      	asrs	r0, r0, #8
    1e48:	4288      	cmp	r0, r1
    1e4a:	da0b      	bge.n	1e64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    1e4c:	f888 5000 	strb.w	r5, [r8]
    1e50:	7e38      	ldrb	r0, [r7, #24]
    1e52:	7c21      	ldrb	r1, [r4, #16]
    1e54:	4288      	cmp	r0, r1
    1e56:	f67f af13 	bls.w	1c80 <MPSL_IRQ_RADIO_Handler+0x224>
    1e5a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1e5e:	7845      	ldrb	r5, [r0, #1]
    1e60:	2d20      	cmp	r5, #32
    1e62:	d1bf      	bne.n	1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1e64:	b009      	add	sp, #36	; 0x24
    1e66:	2001      	movs	r0, #1
    1e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e6c:	200012c4 	.word	0x200012c4
    1e70:	20000ec4 	.word	0x20000ec4
    1e74:	20001244 	.word	0x20001244
    1e78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e7c:	460f      	mov	r7, r1
    1e7e:	4606      	mov	r6, r0
    1e80:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    1e84:	494b      	ldr	r1, [pc, #300]	; (1fb4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x268>)
    1e86:	4699      	mov	r9, r3
    1e88:	4408      	add	r0, r1
    1e8a:	4692      	mov	sl, r2
    1e8c:	f890 4020 	ldrb.w	r4, [r0, #32]
    1e90:	2020      	movs	r0, #32
    1e92:	7010      	strb	r0, [r2, #0]
    1e94:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    1e98:	2c20      	cmp	r4, #32
    1e9a:	bf1c      	itt	ne
    1e9c:	4846      	ldrne	r0, [pc, #280]	; (1fb8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26c>)
    1e9e:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    1ea2:	d038      	beq.n	1f16 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ca>
    1ea4:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1ea8:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    1eac:	f100 0108 	add.w	r1, r0, #8
    1eb0:	68c0      	ldr	r0, [r0, #12]
    1eb2:	6835      	ldr	r5, [r6, #0]
    1eb4:	1a28      	subs	r0, r5, r0
    1eb6:	0200      	lsls	r0, r0, #8
    1eb8:	17c2      	asrs	r2, r0, #31
    1eba:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1ebe:	1200      	asrs	r0, r0, #8
    1ec0:	d429      	bmi.n	1f16 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ca>
    1ec2:	89f0      	ldrh	r0, [r6, #14]
    1ec4:	b300      	cbz	r0, 1f08 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1bc>
    1ec6:	89c8      	ldrh	r0, [r1, #14]
    1ec8:	b9f0      	cbnz	r0, 1f08 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1bc>
    1eca:	6808      	ldr	r0, [r1, #0]
    1ecc:	9000      	str	r0, [sp, #0]
    1ece:	f002 ff05 	bl	4cdc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1ed2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1ed6:	bf08      	it	eq
    1ed8:	200d      	moveq	r0, #13
    1eda:	d00b      	beq.n	1ef4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a8>
    1edc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1ee0:	3856      	subs	r0, #86	; 0x56
    1ee2:	bf08      	it	eq
    1ee4:	201c      	moveq	r0, #28
    1ee6:	d005      	beq.n	1ef4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a8>
    1ee8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1eec:	389f      	subs	r0, #159	; 0x9f
    1eee:	bf14      	ite	ne
    1ef0:	2000      	movne	r0, #0
    1ef2:	2032      	moveq	r0, #50	; 0x32
    1ef4:	1c41      	adds	r1, r0, #1
    1ef6:	9800      	ldr	r0, [sp, #0]
    1ef8:	1a28      	subs	r0, r5, r0
    1efa:	0200      	lsls	r0, r0, #8
    1efc:	17c2      	asrs	r2, r0, #31
    1efe:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1f02:	1200      	asrs	r0, r0, #8
    1f04:	4288      	cmp	r0, r1
    1f06:	db06      	blt.n	1f16 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ca>
    1f08:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    1f0c:	f88a 4000 	strb.w	r4, [sl]
    1f10:	7844      	ldrb	r4, [r0, #1]
    1f12:	2c20      	cmp	r4, #32
    1f14:	d1c6      	bne.n	1ea4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x158>
    1f16:	f89a 0000 	ldrb.w	r0, [sl]
    1f1a:	f889 0000 	strb.w	r0, [r9]
    1f1e:	2c20      	cmp	r4, #32
    1f20:	bf1c      	itt	ne
    1f22:	4825      	ldrne	r0, [pc, #148]	; (1fb8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26c>)
    1f24:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    1f28:	d040      	beq.n	1fac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x260>
    1f2a:	bf00      	nop
    1f2c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1f30:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    1f34:	6870      	ldr	r0, [r6, #4]
    1f36:	68bd      	ldr	r5, [r7, #8]
    1f38:	f107 0108 	add.w	r1, r7, #8
    1f3c:	1a28      	subs	r0, r5, r0
    1f3e:	0200      	lsls	r0, r0, #8
    1f40:	17c2      	asrs	r2, r0, #31
    1f42:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1f46:	1200      	asrs	r0, r0, #8
    1f48:	d422      	bmi.n	1f90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x244>
    1f4a:	89c8      	ldrh	r0, [r1, #14]
    1f4c:	b370      	cbz	r0, 1fac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x260>
    1f4e:	89f0      	ldrh	r0, [r6, #14]
    1f50:	bb60      	cbnz	r0, 1fac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x260>
    1f52:	f8d6 b000 	ldr.w	fp, [r6]
    1f56:	f002 fec1 	bl	4cdc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1f5a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1f5e:	bf08      	it	eq
    1f60:	200d      	moveq	r0, #13
    1f62:	d00b      	beq.n	1f7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x230>
    1f64:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1f68:	3856      	subs	r0, #86	; 0x56
    1f6a:	bf08      	it	eq
    1f6c:	201c      	moveq	r0, #28
    1f6e:	d005      	beq.n	1f7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x230>
    1f70:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1f74:	389f      	subs	r0, #159	; 0x9f
    1f76:	bf14      	ite	ne
    1f78:	2000      	movne	r0, #0
    1f7a:	2032      	moveq	r0, #50	; 0x32
    1f7c:	1c41      	adds	r1, r0, #1
    1f7e:	eba5 000b 	sub.w	r0, r5, fp
    1f82:	0200      	lsls	r0, r0, #8
    1f84:	17c2      	asrs	r2, r0, #31
    1f86:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1f8a:	1200      	asrs	r0, r0, #8
    1f8c:	4288      	cmp	r0, r1
    1f8e:	da0d      	bge.n	1fac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x260>
    1f90:	f889 4000 	strb.w	r4, [r9]
    1f94:	7e38      	ldrb	r0, [r7, #24]
    1f96:	7c31      	ldrb	r1, [r6, #16]
    1f98:	4288      	cmp	r0, r1
    1f9a:	d802      	bhi.n	1fa2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x256>
    1f9c:	2000      	movs	r0, #0
    1f9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fa2:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    1fa6:	7844      	ldrb	r4, [r0, #1]
    1fa8:	2c20      	cmp	r4, #32
    1faa:	d1bf      	bne.n	1f2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e0>
    1fac:	2001      	movs	r0, #1
    1fae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fb2:	0000      	.short	0x0000
    1fb4:	200012c4 	.word	0x200012c4
    1fb8:	20001244 	.word	0x20001244
    1fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1fc0:	b082      	sub	sp, #8
    1fc2:	4605      	mov	r5, r0
    1fc4:	4614      	mov	r4, r2
    1fc6:	4688      	mov	r8, r1
    1fc8:	89d0      	ldrh	r0, [r2, #14]
    1fca:	aa01      	add	r2, sp, #4
    1fcc:	4669      	mov	r1, sp
    1fce:	f001 ffa7 	bl	3f20 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1fd2:	f002 fcb5 	bl	4940 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    1fd6:	f001 ff87 	bl	3ee8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1fda:	4607      	mov	r7, r0
    1fdc:	4820      	ldr	r0, [pc, #128]	; (2060 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x60>)
    1fde:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    1fe2:	2920      	cmp	r1, #32
    1fe4:	d004      	beq.n	1ff0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a4>
    1fe6:	68c0      	ldr	r0, [r0, #12]
    1fe8:	1d40      	adds	r0, r0, #5
    1fea:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1fee:	e024      	b.n	203a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3a>
    1ff0:	89e0      	ldrh	r0, [r4, #14]
    1ff2:	f105 0609 	add.w	r6, r5, #9
    1ff6:	b1b0      	cbz	r0, 2026 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x26>
    1ff8:	f002 ffa2 	bl	4f40 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1ffc:	b998      	cbnz	r0, 2026 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x26>
    1ffe:	f002 fe6d 	bl	4cdc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2002:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    2006:	bf08      	it	eq
    2008:	200d      	moveq	r0, #13
    200a:	d00b      	beq.n	2024 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x24>
    200c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    2010:	3856      	subs	r0, #86	; 0x56
    2012:	bf08      	it	eq
    2014:	201c      	moveq	r0, #28
    2016:	d005      	beq.n	2024 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x24>
    2018:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    201c:	389f      	subs	r0, #159	; 0x9f
    201e:	bf14      	ite	ne
    2020:	2000      	movne	r0, #0
    2022:	2032      	moveq	r0, #50	; 0x32
    2024:	4406      	add	r6, r0
    2026:	f1b8 0f00 	cmp.w	r8, #0
    202a:	d104      	bne.n	2036 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x36>
    202c:	9800      	ldr	r0, [sp, #0]
    202e:	4287      	cmp	r7, r0
    2030:	bf84      	itt	hi
    2032:	1a38      	subhi	r0, r7, r0
    2034:	4406      	addhi	r6, r0
    2036:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    203a:	e9d4 2000 	ldrd	r2, r0, [r4]
    203e:	1a80      	subs	r0, r0, r2
    2040:	4408      	add	r0, r1
    2042:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2046:	e9c4 1000 	strd	r1, r0, [r4]
    204a:	42a9      	cmp	r1, r5
    204c:	bf24      	itt	cs
    204e:	b002      	addcs	sp, #8
    2050:	e8bd 81f0 	ldmiacs.w	sp!, {r4, r5, r6, r7, r8, pc}
    2054:	68a0      	ldr	r0, [r4, #8]
    2056:	1c40      	adds	r0, r0, #1
    2058:	60a0      	str	r0, [r4, #8]
    205a:	b002      	add	sp, #8
    205c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2060:	200012c4 	.word	0x200012c4
    2064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2068:	b097      	sub	sp, #92	; 0x5c
    206a:	4617      	mov	r7, r2
    206c:	468b      	mov	fp, r1
    206e:	4605      	mov	r5, r0
    2070:	f002 f9e8 	bl	4444 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    2074:	4604      	mov	r4, r0
    2076:	f002 fc63 	bl	4940 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    207a:	4606      	mov	r6, r0
    207c:	f1bb 0f01 	cmp.w	fp, #1
    2080:	bf18      	it	ne
    2082:	f1bb 0f02 	cmpne.w	fp, #2
    2086:	d005      	beq.n	2094 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x94>
    2088:	f640 115d 	movw	r1, #2397	; 0x95d
    208c:	f04f 0070 	mov.w	r0, #112	; 0x70
    2090:	f002 ffce 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2094:	49f8      	ldr	r1, [pc, #992]	; (2478 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x478>)
    2096:	2001      	movs	r0, #1
    2098:	6008      	str	r0, [r1, #0]
    209a:	49f8      	ldr	r1, [pc, #992]	; (247c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x47c>)
    209c:	6889      	ldr	r1, [r1, #8]
    209e:	6008      	str	r0, [r1, #0]
    20a0:	2000      	movs	r0, #0
    20a2:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    20a6:	900c      	str	r0, [sp, #48]	; 0x30
    20a8:	1e40      	subs	r0, r0, #1
    20aa:	900d      	str	r0, [sp, #52]	; 0x34
    20ac:	49f4      	ldr	r1, [pc, #976]	; (2480 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x480>)
    20ae:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
    20b2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    20b6:	f100 0108 	add.w	r1, r0, #8
    20ba:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    20be:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    20c2:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    20c6:	6980      	ldr	r0, [r0, #24]
    20c8:	9012      	str	r0, [sp, #72]	; 0x48
    20ca:	a80e      	add	r0, sp, #56	; 0x38
    20cc:	f000 fbc4 	bl	2858 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x858>
    20d0:	9007      	str	r0, [sp, #28]
    20d2:	48ec      	ldr	r0, [pc, #944]	; (2484 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x484>)
    20d4:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    20d8:	8b80      	ldrh	r0, [r0, #28]
    20da:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    20de:	f1b8 0f00 	cmp.w	r8, #0
    20e2:	bf04      	itt	eq
    20e4:	2000      	moveq	r0, #0
    20e6:	9006      	streq	r0, [sp, #24]
    20e8:	d00b      	beq.n	2102 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x102>
    20ea:	2001      	movs	r0, #1
    20ec:	9006      	str	r0, [sp, #24]
    20ee:	48e5      	ldr	r0, [pc, #916]	; (2484 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x484>)
    20f0:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    20f4:	b928      	cbnz	r0, 2102 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x102>
    20f6:	f002 ff23 	bl	4f40 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    20fa:	2800      	cmp	r0, #0
    20fc:	bf08      	it	eq
    20fe:	2701      	moveq	r7, #1
    2100:	d000      	beq.n	2104 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x104>
    2102:	2700      	movs	r7, #0
    2104:	f002 fdea 	bl	4cdc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2108:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    210c:	bf08      	it	eq
    210e:	200d      	moveq	r0, #13
    2110:	d00b      	beq.n	212a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x12a>
    2112:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    2116:	3856      	subs	r0, #86	; 0x56
    2118:	bf08      	it	eq
    211a:	201c      	moveq	r0, #28
    211c:	d005      	beq.n	212a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x12a>
    211e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2122:	389f      	subs	r0, #159	; 0x9f
    2124:	bf14      	ite	ne
    2126:	2000      	movne	r0, #0
    2128:	2032      	moveq	r0, #50	; 0x32
    212a:	f04f 0900 	mov.w	r9, #0
    212e:	46ca      	mov	sl, r9
    2130:	900b      	str	r0, [sp, #44]	; 0x2c
    2132:	4546      	cmp	r6, r8
    2134:	d938      	bls.n	21a8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1a8>
    2136:	9907      	ldr	r1, [sp, #28]
    2138:	f8df 934c 	ldr.w	r9, [pc, #844]	; 2488 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x488>
    213c:	ea6f 0c06 	mvn.w	ip, r6
    2140:	466b      	mov	r3, sp
    2142:	aa16      	add	r2, sp, #88	; 0x58
    2144:	eb01 000c 	add.w	r0, r1, ip
    2148:	4549      	cmp	r1, r9
    214a:	d904      	bls.n	2156 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x156>
    214c:	f240 516f 	movw	r1, #1391	; 0x56f
    2150:	2070      	movs	r0, #112	; 0x70
    2152:	f002 ff6d 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2156:	49cd      	ldr	r1, [pc, #820]	; (248c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x48c>)
    2158:	458c      	cmp	ip, r1
    215a:	dd04      	ble.n	2166 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x166>
    215c:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    2160:	2070      	movs	r0, #112	; 0x70
    2162:	f002 ff65 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2166:	49ca      	ldr	r1, [pc, #808]	; (2490 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x490>)
    2168:	458c      	cmp	ip, r1
    216a:	da04      	bge.n	2176 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x176>
    216c:	f240 5171 	movw	r1, #1393	; 0x571
    2170:	2070      	movs	r0, #112	; 0x70
    2172:	f002 ff5d 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2176:	49c7      	ldr	r1, [pc, #796]	; (2494 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x494>)
    2178:	4281      	cmp	r1, r0
    217a:	bfdc      	itt	le
    217c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2180:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2184:	dd05      	ble.n	2192 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x192>
    2186:	2800      	cmp	r0, #0
    2188:	bfbc      	itt	lt
    218a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    218e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2192:	4619      	mov	r1, r3
    2194:	f001 fec4 	bl	3f20 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2198:	9800      	ldr	r0, [sp, #0]
    219a:	990e      	ldr	r1, [sp, #56]	; 0x38
    219c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    21a0:	9000      	str	r0, [sp, #0]
    21a2:	1a08      	subs	r0, r1, r0
    21a4:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    21a8:	2f00      	cmp	r7, #0
    21aa:	bf18      	it	ne
    21ac:	f8dd a02c 	ldrne.w	sl, [sp, #44]	; 0x2c
    21b0:	d105      	bne.n	21be <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1be>
    21b2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    21b6:	2800      	cmp	r0, #0
    21b8:	bf18      	it	ne
    21ba:	f04f 0a02 	movne.w	sl, #2
    21be:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    21c2:	d008      	beq.n	21d6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1d6>
    21c4:	980e      	ldr	r0, [sp, #56]	; 0x38
    21c6:	1b00      	subs	r0, r0, r4
    21c8:	0200      	lsls	r0, r0, #8
    21ca:	17c1      	asrs	r1, r0, #31
    21cc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    21d0:	1200      	asrs	r0, r0, #8
    21d2:	2801      	cmp	r0, #1
    21d4:	da01      	bge.n	21da <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1da>
    21d6:	2003      	movs	r0, #3
    21d8:	e00d      	b.n	21f6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1f6>
    21da:	b157      	cbz	r7, 21f2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1f2>
    21dc:	48a9      	ldr	r0, [pc, #676]	; (2484 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x484>)
    21de:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
    21e2:	b130      	cbz	r0, 21f2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1f2>
    21e4:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    21e8:	f110 0a00 	adds.w	sl, r0, #0
    21ec:	bf18      	it	ne
    21ee:	f04f 0a02 	movne.w	sl, #2
    21f2:	4625      	mov	r5, r4
    21f4:	2000      	movs	r0, #0
    21f6:	4482      	add	sl, r0
    21f8:	980e      	ldr	r0, [sp, #56]	; 0x38
    21fa:	eba0 0009 	sub.w	r0, r0, r9
    21fe:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    2202:	1e50      	subs	r0, r2, #1
    2204:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2208:	1b41      	subs	r1, r0, r5
    220a:	0209      	lsls	r1, r1, #8
    220c:	17cb      	asrs	r3, r1, #31
    220e:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    2212:	1209      	asrs	r1, r1, #8
    2214:	4551      	cmp	r1, sl
    2216:	db04      	blt.n	2222 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x222>
    2218:	f1b9 0f00 	cmp.w	r9, #0
    221c:	bf18      	it	ne
    221e:	920e      	strne	r2, [sp, #56]	; 0x38
    2220:	e02d      	b.n	227e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x27e>
    2222:	f1b9 0f00 	cmp.w	r9, #0
    2226:	d005      	beq.n	2234 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x234>
    2228:	f89d 004d 	ldrb.w	r0, [sp, #77]	; 0x4d
    222c:	b920      	cbnz	r0, 2238 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x238>
    222e:	f002 fb7d 	bl	492c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    2232:	b108      	cbz	r0, 2238 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x238>
    2234:	b9af      	cbnz	r7, 2262 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x262>
    2236:	e00c      	b.n	2252 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x252>
    2238:	b92f      	cbnz	r7, 2246 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x246>
    223a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    223e:	2800      	cmp	r0, #0
    2240:	bf18      	it	ne
    2242:	f1aa 0a02 	subne.w	sl, sl, #2
    2246:	f04f 0900 	mov.w	r9, #0
    224a:	f88d 904c 	strb.w	r9, [sp, #76]	; 0x4c
    224e:	464e      	mov	r6, r9
    2250:	e007      	b.n	2262 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x262>
    2252:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    2256:	b120      	cbz	r0, 2262 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x262>
    2258:	2000      	movs	r0, #0
    225a:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    225e:	f1aa 0a02 	sub.w	sl, sl, #2
    2262:	980e      	ldr	r0, [sp, #56]	; 0x38
    2264:	eba0 0009 	sub.w	r0, r0, r9
    2268:	1e40      	subs	r0, r0, #1
    226a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    226e:	1b41      	subs	r1, r0, r5
    2270:	0209      	lsls	r1, r1, #8
    2272:	17ca      	asrs	r2, r1, #31
    2274:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    2278:	1209      	asrs	r1, r1, #8
    227a:	4551      	cmp	r1, sl
    227c:	db7e      	blt.n	237c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x37c>
    227e:	9714      	str	r7, [sp, #80]	; 0x50
    2280:	4605      	mov	r5, r0
    2282:	f04f 0900 	mov.w	r9, #0
    2286:	9f06      	ldr	r7, [sp, #24]
    2288:	f001 ffb4 	bl	41f4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    228c:	1a28      	subs	r0, r5, r0
    228e:	0200      	lsls	r0, r0, #8
    2290:	17c1      	asrs	r1, r0, #31
    2292:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2296:	ea4f 2a20 	mov.w	sl, r0, asr #8
    229a:	f002 fd1f 	bl	4cdc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    229e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    22a2:	bf08      	it	eq
    22a4:	200d      	moveq	r0, #13
    22a6:	d00b      	beq.n	22c0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2c0>
    22a8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    22ac:	3856      	subs	r0, #86	; 0x56
    22ae:	bf08      	it	eq
    22b0:	201c      	moveq	r0, #28
    22b2:	d005      	beq.n	22c0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2c0>
    22b4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    22b8:	389f      	subs	r0, #159	; 0x9f
    22ba:	bf14      	ite	ne
    22bc:	2000      	movne	r0, #0
    22be:	2032      	moveq	r0, #50	; 0x32
    22c0:	300b      	adds	r0, #11
    22c2:	4582      	cmp	sl, r0
    22c4:	da20      	bge.n	2308 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x308>
    22c6:	f1bb 0f01 	cmp.w	fp, #1
    22ca:	d002      	beq.n	22d2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2d2>
    22cc:	9814      	ldr	r0, [sp, #80]	; 0x50
    22ce:	b140      	cbz	r0, 22e2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2e2>
    22d0:	e012      	b.n	22f8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2f8>
    22d2:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    22d6:	d11c      	bne.n	2312 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x312>
    22d8:	f640 01de 	movw	r1, #2270	; 0x8de
    22dc:	2070      	movs	r0, #112	; 0x70
    22de:	f002 fea7 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22e2:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    22e6:	d007      	beq.n	22f8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2f8>
    22e8:	1b60      	subs	r0, r4, r5
    22ea:	0200      	lsls	r0, r0, #8
    22ec:	17c1      	asrs	r1, r0, #31
    22ee:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    22f2:	1200      	asrs	r0, r0, #8
    22f4:	2804      	cmp	r0, #4
    22f6:	dd04      	ble.n	2302 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x302>
    22f8:	462c      	mov	r4, r5
    22fa:	4620      	mov	r0, r4
    22fc:	f001 ffa0 	bl	4240 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2300:	e007      	b.n	2312 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x312>
    2302:	2800      	cmp	r0, #0
    2304:	dc63      	bgt.n	23ce <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3ce>
    2306:	e004      	b.n	2312 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x312>
    2308:	462c      	mov	r4, r5
    230a:	4620      	mov	r0, r4
    230c:	f001 ff98 	bl	4240 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2310:	46b9      	mov	r9, r7
    2312:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    2316:	d055      	beq.n	23c4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3c4>
    2318:	980e      	ldr	r0, [sp, #56]	; 0x38
    231a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    231c:	1b00      	subs	r0, r0, r4
    231e:	1b12      	subs	r2, r2, r4
    2320:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2324:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2328:	2801      	cmp	r0, #1
    232a:	d350      	bcc.n	23ce <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3ce>
    232c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2330:	bf98      	it	ls
    2332:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    2336:	d84a      	bhi.n	23ce <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3ce>
    2338:	4620      	mov	r0, r4
    233a:	f00b fa51 	bl	d7e0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    233e:	9907      	ldr	r1, [sp, #28]
    2340:	4a52      	ldr	r2, [pc, #328]	; (248c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x48c>)
    2342:	1a0d      	subs	r5, r1, r0
    2344:	f04f 0a00 	mov.w	sl, #0
    2348:	1aaa      	subs	r2, r5, r2
    234a:	f17a 0200 	sbcs.w	r2, sl, #0
    234e:	d318      	bcc.n	2382 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x382>
    2350:	4b4e      	ldr	r3, [pc, #312]	; (248c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x48c>)
    2352:	1a42      	subs	r2, r0, r1
    2354:	1ad3      	subs	r3, r2, r3
    2356:	f17a 0300 	sbcs.w	r3, sl, #0
    235a:	d312      	bcc.n	2382 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x382>
    235c:	4b4a      	ldr	r3, [pc, #296]	; (2488 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x488>)
    235e:	42ab      	cmp	r3, r5
    2360:	bf3e      	ittt	cc
    2362:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    2366:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    236a:	1845      	addcc	r5, r0, r1
    236c:	d309      	bcc.n	2382 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x382>
    236e:	4293      	cmp	r3, r2
    2370:	d231      	bcs.n	23d6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3d6>
    2372:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    2376:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    237a:	e000      	b.n	237e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x37e>
    237c:	e027      	b.n	23ce <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3ce>
    237e:	4408      	add	r0, r1
    2380:	4245      	negs	r5, r0
    2382:	4f40      	ldr	r7, [pc, #256]	; (2484 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x484>)
    2384:	7fb8      	ldrb	r0, [r7, #30]
    2386:	b358      	cbz	r0, 23e0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3e0>
    2388:	f1bb 0f01 	cmp.w	fp, #1
    238c:	d005      	beq.n	239a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x39a>
    238e:	2002      	movs	r0, #2
    2390:	f002 f992 	bl	46b8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2394:	2001      	movs	r0, #1
    2396:	f002 f98f 	bl	46b8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    239a:	45b0      	cmp	r8, r6
    239c:	d22c      	bcs.n	23f8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3f8>
    239e:	eba5 0106 	sub.w	r1, r5, r6
    23a2:	f04f 0002 	mov.w	r0, #2
    23a6:	f002 f8d1 	bl	454c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    23aa:	b390      	cbz	r0, 2412 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x412>
    23ac:	f1b8 0f00 	cmp.w	r8, #0
    23b0:	bf1c      	itt	ne
    23b2:	eba5 0108 	subne.w	r1, r5, r8
    23b6:	2001      	movne	r0, #1
    23b8:	d034      	beq.n	2424 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x424>
    23ba:	bf00      	nop
    23bc:	f002 f8c6 	bl	454c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    23c0:	b338      	cbz	r0, 2412 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x412>
    23c2:	e02f      	b.n	2424 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x424>
    23c4:	f640 11f1 	movw	r1, #2545	; 0x9f1
    23c8:	2070      	movs	r0, #112	; 0x70
    23ca:	f002 fe31 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23ce:	b017      	add	sp, #92	; 0x5c
    23d0:	2000      	movs	r0, #0
    23d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23d6:	f640 21c2 	movw	r1, #2754	; 0xac2
    23da:	2070      	movs	r0, #112	; 0x70
    23dc:	f002 fe28 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23e0:	45b0      	cmp	r8, r6
    23e2:	bf34      	ite	cc
    23e4:	4630      	movcc	r0, r6
    23e6:	4640      	movcs	r0, r8
    23e8:	301e      	adds	r0, #30
    23ea:	42a8      	cmp	r0, r5
    23ec:	dbcc      	blt.n	2388 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x388>
    23ee:	f640 2105 	movw	r1, #2565	; 0xa05
    23f2:	2070      	movs	r0, #112	; 0x70
    23f4:	f002 fe1c 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23f8:	d90c      	bls.n	2414 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x414>
    23fa:	eba5 0108 	sub.w	r1, r5, r8
    23fe:	2001      	movs	r0, #1
    2400:	f002 f8a4 	bl	454c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2404:	b128      	cbz	r0, 2412 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x412>
    2406:	2e00      	cmp	r6, #0
    2408:	bf1c      	itt	ne
    240a:	1ba9      	subne	r1, r5, r6
    240c:	2002      	movne	r0, #2
    240e:	d009      	beq.n	2424 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x424>
    2410:	e7d4      	b.n	23bc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3bc>
    2412:	e030      	b.n	2476 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x476>
    2414:	ea56 0008 	orrs.w	r0, r6, r8
    2418:	d004      	beq.n	2424 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x424>
    241a:	f640 1141 	movw	r1, #2369	; 0x941
    241e:	2070      	movs	r0, #112	; 0x70
    2420:	f002 fe06 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2424:	4629      	mov	r1, r5
    2426:	2000      	movs	r0, #0
    2428:	f002 f890 	bl	454c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    242c:	b318      	cbz	r0, 2476 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x476>
    242e:	9806      	ldr	r0, [sp, #24]
    2430:	2601      	movs	r6, #1
    2432:	2800      	cmp	r0, #0
    2434:	bf04      	itt	eq
    2436:	f897 002b 	ldrbeq.w	r0, [r7, #43]	; 0x2b
    243a:	2800      	cmpeq	r0, #0
    243c:	d002      	beq.n	2444 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x444>
    243e:	f1b9 0f00 	cmp.w	r9, #0
    2442:	d033      	beq.n	24ac <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4ac>
    2444:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    2448:	b118      	cbz	r0, 2452 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x452>
    244a:	f002 fc4d 	bl	4ce8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    244e:	f887 a02a 	strb.w	sl, [r7, #42]	; 0x2a
    2452:	f1b9 0f00 	cmp.w	r9, #0
    2456:	d02c      	beq.n	24b2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4b2>
    2458:	980b      	ldr	r0, [sp, #44]	; 0x2c
    245a:	1a20      	subs	r0, r4, r0
    245c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2460:	2005      	movs	r0, #5
    2462:	f002 f873 	bl	454c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2466:	b3e0      	cbz	r0, 24e2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4e2>
    2468:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    246c:	2800      	cmp	r0, #0
    246e:	bf08      	it	eq
    2470:	f887 602b 	strbeq.w	r6, [r7, #43]	; 0x2b
    2474:	e025      	b.n	24c2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4c2>
    2476:	e00f      	b.n	2498 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x498>
    2478:	40000508 	.word	0x40000508
    247c:	2000003c 	.word	0x2000003c
    2480:	20000ec4 	.word	0x20000ec4
    2484:	200012c4 	.word	0x200012c4
    2488:	1e847fff 	.word	0x1e847fff
    248c:	0f424000 	.word	0x0f424000
    2490:	f0bdc000 	.word	0xf0bdc000
    2494:	1e848000 	.word	0x1e848000
    2498:	2002      	movs	r0, #2
    249a:	f002 f90d 	bl	46b8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    249e:	2001      	movs	r0, #1
    24a0:	f002 f90a 	bl	46b8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    24a4:	b017      	add	sp, #92	; 0x5c
    24a6:	2000      	movs	r0, #0
    24a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24ac:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    24b0:	b190      	cbz	r0, 24d8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4d8>
    24b2:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    24b6:	b120      	cbz	r0, 24c2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4c2>
    24b8:	2005      	movs	r0, #5
    24ba:	f002 f8fd 	bl	46b8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    24be:	f887 a02b 	strb.w	sl, [r7, #43]	; 0x2b
    24c2:	eba5 0008 	sub.w	r0, r5, r8
    24c6:	f1a0 0119 	sub.w	r1, r0, #25
    24ca:	2900      	cmp	r1, #0
    24cc:	dc0f      	bgt.n	24ee <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4ee>
    24ce:	f640 212e 	movw	r1, #2606	; 0xa2e
    24d2:	2070      	movs	r0, #112	; 0x70
    24d4:	f002 fdac 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24d8:	f002 fc22 	bl	4d20 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    24dc:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
    24e0:	e7b7      	b.n	2452 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x452>
    24e2:	e7ff      	b.n	24e4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4e4>
    24e4:	f240 21f2 	movw	r1, #754	; 0x2f2
    24e8:	2070      	movs	r0, #112	; 0x70
    24ea:	f002 fda1 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24ee:	2003      	movs	r0, #3
    24f0:	f002 f82c 	bl	454c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    24f4:	b1c0      	cbz	r0, 2528 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x528>
    24f6:	480f      	ldr	r0, [pc, #60]	; (2534 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x534>)
    24f8:	6880      	ldr	r0, [r0, #8]
    24fa:	f8c0 a000 	str.w	sl, [r0]
    24fe:	480e      	ldr	r0, [pc, #56]	; (2538 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x538>)
    2500:	f8c0 a000 	str.w	sl, [r0]
    2504:	ac0c      	add	r4, sp, #48	; 0x30
    2506:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    250a:	6038      	str	r0, [r7, #0]
    250c:	6079      	str	r1, [r7, #4]
    250e:	60ba      	str	r2, [r7, #8]
    2510:	60fb      	str	r3, [r7, #12]
    2512:	ac10      	add	r4, sp, #64	; 0x40
    2514:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    2518:	6138      	str	r0, [r7, #16]
    251a:	6179      	str	r1, [r7, #20]
    251c:	61ba      	str	r2, [r7, #24]
    251e:	61fb      	str	r3, [r7, #28]
    2520:	b017      	add	sp, #92	; 0x5c
    2522:	2001      	movs	r0, #1
    2524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2528:	f640 2136 	movw	r1, #2614	; 0xa36
    252c:	2070      	movs	r0, #112	; 0x70
    252e:	f002 fd7f 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2532:	0000      	.short	0x0000
    2534:	2000003c 	.word	0x2000003c
    2538:	40000508 	.word	0x40000508
    253c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2540:	4606      	mov	r6, r0
    2542:	7808      	ldrb	r0, [r1, #0]
    2544:	7490      	strb	r0, [r2, #18]
    2546:	7ac8      	ldrb	r0, [r1, #11]
    2548:	7450      	strb	r0, [r2, #17]
    254a:	7a88      	ldrb	r0, [r1, #10]
    254c:	7410      	strb	r0, [r2, #16]
    254e:	8908      	ldrh	r0, [r1, #8]
    2550:	81d0      	strh	r0, [r2, #14]
    2552:	f8df 8198 	ldr.w	r8, [pc, #408]	; 26ec <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6ec>
    2556:	6870      	ldr	r0, [r6, #4]
    2558:	469a      	mov	sl, r3
    255a:	fba0 7908 	umull	r7, r9, r0, r8
    255e:	4614      	mov	r4, r2
    2560:	460d      	mov	r5, r1
    2562:	6830      	ldr	r0, [r6, #0]
    2564:	f00b f93c 	bl	d7e0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2568:	19c1      	adds	r1, r0, r7
    256a:	7828      	ldrb	r0, [r5, #0]
    256c:	ea4f 0c68 	mov.w	ip, r8, asr #1
    2570:	f149 0200 	adc.w	r2, r9, #0
    2574:	f1a8 0e01 	sub.w	lr, r8, #1
    2578:	f1cc 0b00 	rsb	fp, ip, #0
    257c:	b168      	cbz	r0, 259a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x59a>
    257e:	89e0      	ldrh	r0, [r4, #14]
    2580:	7c67      	ldrb	r7, [r4, #17]
    2582:	43c0      	mvns	r0, r0
    2584:	f8d5 9004 	ldr.w	r9, [r5, #4]
    2588:	f104 020c 	add.w	r2, r4, #12
    258c:	4560      	cmp	r0, ip
    258e:	dd5f      	ble.n	2650 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x650>
    2590:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    2594:	2070      	movs	r0, #112	; 0x70
    2596:	f002 fd4b 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    259a:	f8df 9154 	ldr.w	r9, [pc, #340]	; 26f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6f0>
    259e:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    25a2:	eb11 0a09 	adds.w	sl, r1, r9
    25a6:	f142 0900 	adc.w	r9, r2, #0
    25aa:	ebb0 0a0a 	subs.w	sl, r0, sl
    25ae:	eb73 0909 	sbcs.w	r9, r3, r9
    25b2:	d245      	bcs.n	2640 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x640>
    25b4:	1a41      	subs	r1, r0, r1
    25b6:	eb73 0102 	sbcs.w	r1, r3, r2
    25ba:	d341      	bcc.n	2640 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x640>
    25bc:	1bc7      	subs	r7, r0, r7
    25be:	6870      	ldr	r0, [r6, #4]
    25c0:	60a0      	str	r0, [r4, #8]
    25c2:	4547      	cmp	r7, r8
    25c4:	d305      	bcc.n	25d2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5d2>
    25c6:	1c40      	adds	r0, r0, #1
    25c8:	f1a7 57f4 	sub.w	r7, r7, #511705088	; 0x1e800000
    25cc:	f5a7 2790 	sub.w	r7, r7, #294912	; 0x48000
    25d0:	60a0      	str	r0, [r4, #8]
    25d2:	89e0      	ldrh	r0, [r4, #14]
    25d4:	686d      	ldr	r5, [r5, #4]
    25d6:	43c1      	mvns	r1, r0
    25d8:	7c66      	ldrb	r6, [r4, #17]
    25da:	1878      	adds	r0, r7, r1
    25dc:	f104 020c 	add.w	r2, r4, #12
    25e0:	4577      	cmp	r7, lr
    25e2:	d904      	bls.n	25ee <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5ee>
    25e4:	f240 516f 	movw	r1, #1391	; 0x56f
    25e8:	2070      	movs	r0, #112	; 0x70
    25ea:	f002 fd21 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25ee:	4561      	cmp	r1, ip
    25f0:	dcce      	bgt.n	2590 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x590>
    25f2:	4559      	cmp	r1, fp
    25f4:	db2f      	blt.n	2656 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x656>
    25f6:	4580      	cmp	r8, r0
    25f8:	bfdc      	itt	le
    25fa:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    25fe:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2602:	dd05      	ble.n	2610 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x610>
    2604:	2800      	cmp	r0, #0
    2606:	bfbc      	itt	lt
    2608:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    260c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2610:	4621      	mov	r1, r4
    2612:	f001 fc85 	bl	3f20 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2616:	6820      	ldr	r0, [r4, #0]
    2618:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    261c:	1978      	adds	r0, r7, r5
    261e:	1c40      	adds	r0, r0, #1
    2620:	6021      	str	r1, [r4, #0]
    2622:	2e00      	cmp	r6, #0
    2624:	bf08      	it	eq
    2626:	307a      	addeq	r0, #122	; 0x7a
    2628:	d003      	beq.n	2632 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x632>
    262a:	2e01      	cmp	r6, #1
    262c:	bf08      	it	eq
    262e:	3048      	addeq	r0, #72	; 0x48
    2630:	d134      	bne.n	269c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x69c>
    2632:	f001 fc59 	bl	3ee8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2636:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    263a:	6060      	str	r0, [r4, #4]
    263c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2640:	6830      	ldr	r0, [r6, #0]
    2642:	1e40      	subs	r0, r0, #1
    2644:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2648:	6020      	str	r0, [r4, #0]
    264a:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    264e:	e7f4      	b.n	263a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x63a>
    2650:	4601      	mov	r1, r0
    2652:	4558      	cmp	r0, fp
    2654:	da04      	bge.n	2660 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x660>
    2656:	f240 5171 	movw	r1, #1393	; 0x571
    265a:	2070      	movs	r0, #112	; 0x70
    265c:	f002 fce8 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2660:	4580      	cmp	r8, r0
    2662:	bfdc      	itt	le
    2664:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    2668:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    266c:	dd05      	ble.n	267a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x67a>
    266e:	2800      	cmp	r0, #0
    2670:	bfbc      	itt	lt
    2672:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    2676:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    267a:	4621      	mov	r1, r4
    267c:	f001 fc50 	bl	3f20 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2680:	6820      	ldr	r0, [r4, #0]
    2682:	2f00      	cmp	r7, #0
    2684:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2688:	f109 0001 	add.w	r0, r9, #1
    268c:	6021      	str	r1, [r4, #0]
    268e:	bf08      	it	eq
    2690:	307a      	addeq	r0, #122	; 0x7a
    2692:	d008      	beq.n	26a6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6a6>
    2694:	2f01      	cmp	r7, #1
    2696:	bf08      	it	eq
    2698:	3048      	addeq	r0, #72	; 0x48
    269a:	d004      	beq.n	26a6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6a6>
    269c:	f240 6124 	movw	r1, #1572	; 0x624
    26a0:	2070      	movs	r0, #112	; 0x70
    26a2:	f002 fcc5 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26a6:	f001 fc1f 	bl	3ee8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    26aa:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    26ae:	6061      	str	r1, [r4, #4]
    26b0:	6870      	ldr	r0, [r6, #4]
    26b2:	60a0      	str	r0, [r4, #8]
    26b4:	2100      	movs	r1, #0
    26b6:	4622      	mov	r2, r4
    26b8:	6830      	ldr	r0, [r6, #0]
    26ba:	f7ff fc7f 	bl	1fbc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x270>
    26be:	6832      	ldr	r2, [r6, #0]
    26c0:	4653      	mov	r3, sl
    26c2:	4621      	mov	r1, r4
    26c4:	6928      	ldr	r0, [r5, #16]
    26c6:	f7ff fa25 	bl	1b14 <MPSL_IRQ_RADIO_Handler+0xb8>
    26ca:	2800      	cmp	r0, #0
    26cc:	bf18      	it	ne
    26ce:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    26d2:	e9d4 2100 	ldrd	r2, r1, [r4]
    26d6:	6830      	ldr	r0, [r6, #0]
    26d8:	1a89      	subs	r1, r1, r2
    26da:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    26de:	4408      	add	r0, r1
    26e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    26e4:	e9c4 2000 	strd	r2, r0, [r4]
    26e8:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    26ec:	1e848000 	.word	0x1e848000
    26f0:	0f424000 	.word	0x0f424000
    26f4:	b570      	push	{r4, r5, r6, lr}
    26f6:	4d1e      	ldr	r5, [pc, #120]	; (2770 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x770>)
    26f8:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    26fc:	2820      	cmp	r0, #32
    26fe:	bf18      	it	ne
    2700:	bd70      	popne	{r4, r5, r6, pc}
    2702:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    2706:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    270a:	4428      	add	r0, r5
    270c:	f890 4020 	ldrb.w	r4, [r0, #32]
    2710:	2c20      	cmp	r4, #32
    2712:	d027      	beq.n	2764 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x764>
    2714:	4b17      	ldr	r3, [pc, #92]	; (2774 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x774>)
    2716:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    271a:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    271e:	7849      	ldrb	r1, [r1, #1]
    2720:	f880 1020 	strb.w	r1, [r0, #32]
    2724:	20ff      	movs	r0, #255	; 0xff
    2726:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    272a:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
    272e:	4621      	mov	r1, r4
    2730:	2002      	movs	r0, #2
    2732:	f000 f8cb 	bl	28cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8cc>
    2736:	2000      	movs	r0, #0
    2738:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    273c:	77a8      	strb	r0, [r5, #30]
    273e:	490e      	ldr	r1, [pc, #56]	; (2778 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x778>)
    2740:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    2744:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2748:	7e00      	ldrb	r0, [r0, #24]
    274a:	2800      	cmp	r0, #0
    274c:	bf08      	it	eq
    274e:	f002 fdc9 	bleq	52e4 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    2752:	2000      	movs	r0, #0
    2754:	4909      	ldr	r1, [pc, #36]	; (277c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x77c>)
    2756:	6849      	ldr	r1, [r1, #4]
    2758:	2900      	cmp	r1, #0
    275a:	bf08      	it	eq
    275c:	bd70      	popeq	{r4, r5, r6, pc}
    275e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2762:	4708      	bx	r1
    2764:	f44f 714b 	mov.w	r1, #812	; 0x32c
    2768:	2070      	movs	r0, #112	; 0x70
    276a:	f002 fc61 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    276e:	0000      	.short	0x0000
    2770:	200012c4 	.word	0x200012c4
    2774:	20001244 	.word	0x20001244
    2778:	20000ec4 	.word	0x20000ec4
    277c:	2000003c 	.word	0x2000003c
    2780:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2784:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 2848 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x848>
    2788:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    278c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    2790:	4440      	add	r0, r8
    2792:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    2796:	2c20      	cmp	r4, #32
    2798:	bf08      	it	eq
    279a:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    279e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 284c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x84c>
    27a2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 2850 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x850>
    27a6:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    27aa:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    27ae:	2607      	movs	r6, #7
    27b0:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    27b4:	2801      	cmp	r0, #1
    27b6:	d00e      	beq.n	27d6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7d6>
    27b8:	2804      	cmp	r0, #4
    27ba:	bf08      	it	eq
    27bc:	2602      	moveq	r6, #2
    27be:	d00a      	beq.n	27d6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7d6>
    27c0:	2805      	cmp	r0, #5
    27c2:	bf0c      	ite	eq
    27c4:	2603      	moveq	r6, #3
    27c6:	2806      	cmpne	r0, #6
    27c8:	d005      	beq.n	27d6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7d6>
    27ca:	f640 01a8 	movw	r1, #2216	; 0x8a8
    27ce:	f04f 0070 	mov.w	r0, #112	; 0x70
    27d2:	f002 fc2d 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27d6:	f1bb 0f00 	cmp.w	fp, #0
    27da:	bf18      	it	ne
    27dc:	f3af 8000 	nopne.w
    27e0:	f3ef 8010 	mrs	r0, PRIMASK
    27e4:	b672      	cpsid	i
    27e6:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    27ea:	784a      	ldrb	r2, [r1, #1]
    27ec:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    27f0:	4441      	add	r1, r8
    27f2:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    27f6:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    27fa:	42a2      	cmp	r2, r4
    27fc:	bf04      	itt	eq
    27fe:	2220      	moveq	r2, #32
    2800:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    2804:	b1c0      	cbz	r0, 2838 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x838>
    2806:	462a      	mov	r2, r5
    2808:	4621      	mov	r1, r4
    280a:	2001      	movs	r0, #1
    280c:	f000 f85e 	bl	28cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8cc>
    2810:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    2814:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    2818:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    281c:	6840      	ldr	r0, [r0, #4]
    281e:	4631      	mov	r1, r6
    2820:	4790      	blx	r2
    2822:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    2826:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    282a:	4440      	add	r0, r8
    282c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    2830:	2c20      	cmp	r4, #32
    2832:	d1ba      	bne.n	27aa <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7aa>
    2834:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2838:	4806      	ldr	r0, [pc, #24]	; (2854 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x854>)
    283a:	2800      	cmp	r0, #0
    283c:	bf18      	it	ne
    283e:	f3af 8000 	nopne.w
    2842:	b662      	cpsie	i
    2844:	e7df      	b.n	2806 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x806>
    2846:	0000      	.short	0x0000
    2848:	200012c4 	.word	0x200012c4
    284c:	00000000 	.word	0x00000000
    2850:	20001244 	.word	0x20001244
    2854:	00000000 	.word	0x00000000
    2858:	b510      	push	{r4, lr}
    285a:	4604      	mov	r4, r0
    285c:	6800      	ldr	r0, [r0, #0]
    285e:	f00a ffbf 	bl	d7e0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2862:	4602      	mov	r2, r0
    2864:	89e0      	ldrh	r0, [r4, #14]
    2866:	7b21      	ldrb	r1, [r4, #12]
    2868:	4b14      	ldr	r3, [pc, #80]	; (28bc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8bc>)
    286a:	4408      	add	r0, r1
    286c:	1c41      	adds	r1, r0, #1
    286e:	1850      	adds	r0, r2, r1
    2870:	429a      	cmp	r2, r3
    2872:	d904      	bls.n	287e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x87e>
    2874:	f240 516f 	movw	r1, #1391	; 0x56f
    2878:	2070      	movs	r0, #112	; 0x70
    287a:	f002 fbd9 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    287e:	4a10      	ldr	r2, [pc, #64]	; (28c0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8c0>)
    2880:	4291      	cmp	r1, r2
    2882:	dd04      	ble.n	288e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x88e>
    2884:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    2888:	2070      	movs	r0, #112	; 0x70
    288a:	f002 fbd1 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    288e:	4a0d      	ldr	r2, [pc, #52]	; (28c4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8c4>)
    2890:	4291      	cmp	r1, r2
    2892:	da04      	bge.n	289e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x89e>
    2894:	f240 5171 	movw	r1, #1393	; 0x571
    2898:	2070      	movs	r0, #112	; 0x70
    289a:	f002 fbc9 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    289e:	490a      	ldr	r1, [pc, #40]	; (28c8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8c8>)
    28a0:	4281      	cmp	r1, r0
    28a2:	bfde      	ittt	le
    28a4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    28a8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    28ac:	bd10      	pople	{r4, pc}
    28ae:	2800      	cmp	r0, #0
    28b0:	bfbc      	itt	lt
    28b2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    28b6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    28ba:	bd10      	pop	{r4, pc}
    28bc:	1e847fff 	.word	0x1e847fff
    28c0:	0f424000 	.word	0x0f424000
    28c4:	f0bdc000 	.word	0xf0bdc000
    28c8:	1e848000 	.word	0x1e848000
    28cc:	f8df c058 	ldr.w	ip, [pc, #88]	; 2928 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x928>
    28d0:	b510      	push	{r4, lr}
    28d2:	2300      	movs	r3, #0
    28d4:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    28d8:	2807      	cmp	r0, #7
    28da:	d21f      	bcs.n	291c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x91c>
    28dc:	e8df f000 	tbb	[pc, r0]
    28e0:	05050505 	.word	0x05050505
    28e4:	00040404 	.word	0x00040404
    28e8:	2301      	movs	r3, #1
    28ea:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    28ee:	2b00      	cmp	r3, #0
    28f0:	bf08      	it	eq
    28f2:	bd10      	popeq	{r4, pc}
    28f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    28f8:	480c      	ldr	r0, [pc, #48]	; (292c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x92c>)
    28fa:	4402      	add	r2, r0
    28fc:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    2900:	2820      	cmp	r0, #32
    2902:	bf0e      	itee	eq
    2904:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    2908:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    290c:	7041      	strbne	r1, [r0, #1]
    290e:	2020      	movs	r0, #32
    2910:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    2914:	7058      	strb	r0, [r3, #1]
    2916:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    291a:	bd10      	pop	{r4, pc}
    291c:	f44f 711a 	mov.w	r1, #616	; 0x268
    2920:	2070      	movs	r0, #112	; 0x70
    2922:	f002 fb85 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2926:	0000      	.short	0x0000
    2928:	20001244 	.word	0x20001244
    292c:	200012c4 	.word	0x200012c4
    2930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2934:	4617      	mov	r7, r2
    2936:	f8df a158 	ldr.w	sl, [pc, #344]	; 2a90 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa90>
    293a:	eb02 0047 	add.w	r0, r2, r7, lsl #1
    293e:	4450      	add	r0, sl
    2940:	4688      	mov	r8, r1
    2942:	f890 4020 	ldrb.w	r4, [r0, #32]
    2946:	2901      	cmp	r1, #1
    2948:	4625      	mov	r5, r4
    294a:	bf18      	it	ne
    294c:	f1b8 0f02 	cmpne.w	r8, #2
    2950:	d005      	beq.n	295e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x95e>
    2952:	f640 216c 	movw	r1, #2668	; 0xa6c
    2956:	f04f 0070 	mov.w	r0, #112	; 0x70
    295a:	f002 fb69 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    295e:	f04f 0b00 	mov.w	fp, #0
    2962:	2d20      	cmp	r5, #32
    2964:	d044      	beq.n	29f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9f0>
    2966:	f89a 001e 	ldrb.w	r0, [sl, #30]
    296a:	2600      	movs	r6, #0
    296c:	2800      	cmp	r0, #0
    296e:	bf08      	it	eq
    2970:	2602      	moveq	r6, #2
    2972:	f001 fc3f 	bl	41f4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2976:	4b47      	ldr	r3, [pc, #284]	; (2a94 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa94>)
    2978:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    297c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2980:	688a      	ldr	r2, [r1, #8]
    2982:	68c9      	ldr	r1, [r1, #12]
    2984:	1a12      	subs	r2, r2, r0
    2986:	1a09      	subs	r1, r1, r0
    2988:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    298c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2990:	4296      	cmp	r6, r2
    2992:	bf99      	ittee	ls
    2994:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    2998:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    299c:	4a3e      	ldrhi	r2, [pc, #248]	; (2a98 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa98>)
    299e:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    29a2:	d923      	bls.n	29ec <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9ec>
    29a4:	4622      	mov	r2, r4
    29a6:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    29aa:	784c      	ldrb	r4, [r1, #1]
    29ac:	2c20      	cmp	r4, #32
    29ae:	d015      	beq.n	29dc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9dc>
    29b0:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    29b4:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    29b8:	f8dc 1008 	ldr.w	r1, [ip, #8]
    29bc:	f8dc c00c 	ldr.w	ip, [ip, #12]
    29c0:	1a09      	subs	r1, r1, r0
    29c2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    29c6:	ebac 0c00 	sub.w	ip, ip, r0
    29ca:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    29ce:	428e      	cmp	r6, r1
    29d0:	bf9c      	itt	ls
    29d2:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    29d6:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    29da:	d8e3      	bhi.n	29a4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9a4>
    29dc:	2a20      	cmp	r2, #32
    29de:	d005      	beq.n	29ec <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9ec>
    29e0:	463b      	mov	r3, r7
    29e2:	2120      	movs	r1, #32
    29e4:	2004      	movs	r0, #4
    29e6:	f7ff f859 	bl	1a9c <MPSL_IRQ_RADIO_Handler+0x40>
    29ea:	4604      	mov	r4, r0
    29ec:	42ac      	cmp	r4, r5
    29ee:	d10f      	bne.n	2a10 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa10>
    29f0:	f89a 002e 	ldrb.w	r0, [sl, #46]	; 0x2e
    29f4:	2820      	cmp	r0, #32
    29f6:	d00f      	beq.n	2a18 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa18>
    29f8:	9900      	ldr	r1, [sp, #0]
    29fa:	f8da 0008 	ldr.w	r0, [sl, #8]
    29fe:	1c89      	adds	r1, r1, #2
    2a00:	1a08      	subs	r0, r1, r0
    2a02:	0200      	lsls	r0, r0, #8
    2a04:	17c1      	asrs	r1, r0, #31
    2a06:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2a0a:	1200      	asrs	r0, r0, #8
    2a0c:	2800      	cmp	r0, #0
    2a0e:	dd03      	ble.n	2a18 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa18>
    2a10:	b003      	add	sp, #12
    2a12:	2000      	movs	r0, #0
    2a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a18:	2d20      	cmp	r5, #32
    2a1a:	d016      	beq.n	2a4a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa4a>
    2a1c:	462a      	mov	r2, r5
    2a1e:	4641      	mov	r1, r8
    2a20:	9800      	ldr	r0, [sp, #0]
    2a22:	f7ff fb1f 	bl	2064 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x64>
    2a26:	2800      	cmp	r0, #0
    2a28:	bf1f      	itttt	ne
    2a2a:	f88a 502e 	strbne.w	r5, [sl, #46]	; 0x2e
    2a2e:	2002      	movne	r0, #2
    2a30:	b003      	addne	sp, #12
    2a32:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a36:	463b      	mov	r3, r7
    2a38:	462a      	mov	r2, r5
    2a3a:	2120      	movs	r1, #32
    2a3c:	2004      	movs	r0, #4
    2a3e:	f7ff f82d 	bl	1a9c <MPSL_IRQ_RADIO_Handler+0x40>
    2a42:	b003      	add	sp, #12
    2a44:	2000      	movs	r0, #0
    2a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a4a:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
    2a4e:	b118      	cbz	r0, 2a58 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa58>
    2a50:	f002 f94a 	bl	4ce8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    2a54:	f88a b02a 	strb.w	fp, [sl, #42]	; 0x2a
    2a58:	f89a 002b 	ldrb.w	r0, [sl, #43]	; 0x2b
    2a5c:	b120      	cbz	r0, 2a68 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa68>
    2a5e:	2005      	movs	r0, #5
    2a60:	f001 fe2a 	bl	46b8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2a64:	f88a b02b 	strb.w	fp, [sl, #43]	; 0x2b
    2a68:	2004      	movs	r0, #4
    2a6a:	f001 fe25 	bl	46b8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2a6e:	f001 fe93 	bl	4798 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2a72:	2020      	movs	r0, #32
    2a74:	f88a 002e 	strb.w	r0, [sl, #46]	; 0x2e
    2a78:	4808      	ldr	r0, [pc, #32]	; (2a9c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa9c>)
    2a7a:	6880      	ldr	r0, [r0, #8]
    2a7c:	f8c0 b000 	str.w	fp, [r0]
    2a80:	4807      	ldr	r0, [pc, #28]	; (2aa0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xaa0>)
    2a82:	f8c0 b000 	str.w	fp, [r0]
    2a86:	b003      	add	sp, #12
    2a88:	2001      	movs	r0, #1
    2a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a8e:	0000      	.short	0x0000
    2a90:	200012c4 	.word	0x200012c4
    2a94:	20000ec4 	.word	0x20000ec4
    2a98:	20001244 	.word	0x20001244
    2a9c:	2000003c 	.word	0x2000003c
    2aa0:	40000508 	.word	0x40000508

00002aa4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    2aa4:	4906      	ldr	r1, [pc, #24]	; (2ac0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    2aa6:	b510      	push	{r4, lr}
    2aa8:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    2aac:	2a20      	cmp	r2, #32
    2aae:	bf1c      	itt	ne
    2ab0:	7788      	strbne	r0, [r1, #30]
    2ab2:	bd10      	popne	{r4, pc}
    2ab4:	f240 317a 	movw	r1, #890	; 0x37a
    2ab8:	2070      	movs	r0, #112	; 0x70
    2aba:	f002 fab9 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2abe:	0000      	.short	0x0000
    2ac0:	200012c4 	.word	0x200012c4

00002ac4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    2ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ac8:	4e69      	ldr	r6, [pc, #420]	; (2c70 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    2aca:	4607      	mov	r7, r0
    2acc:	b08d      	sub	sp, #52	; 0x34
    2ace:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    2ad2:	4688      	mov	r8, r1
    2ad4:	2820      	cmp	r0, #32
    2ad6:	d055      	beq.n	2b84 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    2ad8:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    2adc:	f106 0408 	add.w	r4, r6, #8
    2ae0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2ae4:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    2ae8:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    2aec:	2020      	movs	r0, #32
    2aee:	f88d 0020 	strb.w	r0, [sp, #32]
    2af2:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    2af6:	aa0a      	add	r2, sp, #40	; 0x28
    2af8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2afc:	4430      	add	r0, r6
    2afe:	a909      	add	r1, sp, #36	; 0x24
    2b00:	f890 5020 	ldrb.w	r5, [r0, #32]
    2b04:	68f0      	ldr	r0, [r6, #12]
    2b06:	9002      	str	r0, [sp, #8]
    2b08:	6830      	ldr	r0, [r6, #0]
    2b0a:	4438      	add	r0, r7
    2b0c:	f001 fa08 	bl	3f20 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2b10:	f8da 000c 	ldr.w	r0, [sl, #12]
    2b14:	9909      	ldr	r1, [sp, #36]	; 0x24
    2b16:	2f65      	cmp	r7, #101	; 0x65
    2b18:	4408      	add	r0, r1
    2b1a:	d338      	bcc.n	2b8e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    2b1c:	4a55      	ldr	r2, [pc, #340]	; (2c74 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    2b1e:	2100      	movs	r1, #0
    2b20:	1bd2      	subs	r2, r2, r7
    2b22:	eb71 0201 	sbcs.w	r2, r1, r1
    2b26:	d332      	bcc.n	2b8e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    2b28:	6822      	ldr	r2, [r4, #0]
    2b2a:	1a82      	subs	r2, r0, r2
    2b2c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2b30:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    2b34:	d82b      	bhi.n	2b8e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    2b36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2b3a:	6060      	str	r0, [r4, #4]
    2b3c:	4630      	mov	r0, r6
    2b3e:	f884 8010 	strb.w	r8, [r4, #16]
    2b42:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    2b46:	f10d 0a20 	add.w	sl, sp, #32
    2b4a:	2d20      	cmp	r5, #32
    2b4c:	bf1c      	itt	ne
    2b4e:	494a      	ldrne	r1, [pc, #296]	; (2c78 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    2b50:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    2b54:	d050      	beq.n	2bf8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    2b56:	bf00      	nop
    2b58:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    2b5c:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    2b60:	6861      	ldr	r1, [r4, #4]
    2b62:	f8d8 6008 	ldr.w	r6, [r8, #8]
    2b66:	f108 0008 	add.w	r0, r8, #8
    2b6a:	1a71      	subs	r1, r6, r1
    2b6c:	0209      	lsls	r1, r1, #8
    2b6e:	17ca      	asrs	r2, r1, #31
    2b70:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    2b74:	1209      	asrs	r1, r1, #8
    2b76:	d42d      	bmi.n	2bd4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    2b78:	89c0      	ldrh	r0, [r0, #14]
    2b7a:	2800      	cmp	r0, #0
    2b7c:	d03c      	beq.n	2bf8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    2b7e:	89e0      	ldrh	r0, [r4, #14]
    2b80:	b148      	cbz	r0, 2b96 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    2b82:	e039      	b.n	2bf8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    2b84:	f44f 6133 	mov.w	r1, #2864	; 0xb30
    2b88:	2070      	movs	r0, #112	; 0x70
    2b8a:	f002 fa51 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b8e:	b00d      	add	sp, #52	; 0x34
    2b90:	2001      	movs	r0, #1
    2b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b96:	6820      	ldr	r0, [r4, #0]
    2b98:	900c      	str	r0, [sp, #48]	; 0x30
    2b9a:	f002 f89f 	bl	4cdc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2b9e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    2ba2:	bf08      	it	eq
    2ba4:	200d      	moveq	r0, #13
    2ba6:	d00b      	beq.n	2bc0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    2ba8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    2bac:	3856      	subs	r0, #86	; 0x56
    2bae:	bf08      	it	eq
    2bb0:	201c      	moveq	r0, #28
    2bb2:	d005      	beq.n	2bc0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    2bb4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2bb8:	389f      	subs	r0, #159	; 0x9f
    2bba:	bf14      	ite	ne
    2bbc:	2000      	movne	r0, #0
    2bbe:	2032      	moveq	r0, #50	; 0x32
    2bc0:	1c41      	adds	r1, r0, #1
    2bc2:	980c      	ldr	r0, [sp, #48]	; 0x30
    2bc4:	1a30      	subs	r0, r6, r0
    2bc6:	0200      	lsls	r0, r0, #8
    2bc8:	17c2      	asrs	r2, r0, #31
    2bca:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    2bce:	1200      	asrs	r0, r0, #8
    2bd0:	4288      	cmp	r0, r1
    2bd2:	da11      	bge.n	2bf8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    2bd4:	f88a 5000 	strb.w	r5, [sl]
    2bd8:	f898 1018 	ldrb.w	r1, [r8, #24]
    2bdc:	7c20      	ldrb	r0, [r4, #16]
    2bde:	4281      	cmp	r1, r0
    2be0:	d805      	bhi.n	2bee <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    2be2:	9802      	ldr	r0, [sp, #8]
    2be4:	6060      	str	r0, [r4, #4]
    2be6:	b00d      	add	sp, #52	; 0x34
    2be8:	2002      	movs	r0, #2
    2bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bee:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    2bf2:	7845      	ldrb	r5, [r0, #1]
    2bf4:	2d20      	cmp	r5, #32
    2bf6:	d1af      	bne.n	2b58 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    2bf8:	2005      	movs	r0, #5
    2bfa:	f001 fd5d 	bl	46b8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2bfe:	4c1c      	ldr	r4, [pc, #112]	; (2c70 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    2c00:	f04f 30ff 	mov.w	r0, #4294967295
    2c04:	6060      	str	r0, [r4, #4]
    2c06:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    2c0a:	f89d 2020 	ldrb.w	r2, [sp, #32]
    2c0e:	2120      	movs	r1, #32
    2c10:	2a20      	cmp	r2, #32
    2c12:	d003      	beq.n	2c1c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    2c14:	2005      	movs	r0, #5
    2c16:	f7fe ff41 	bl	1a9c <MPSL_IRQ_RADIO_Handler+0x40>
    2c1a:	e004      	b.n	2c26 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    2c1c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    2c20:	4420      	add	r0, r4
    2c22:	f890 0020 	ldrb.w	r0, [r0, #32]
    2c26:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    2c2a:	4913      	ldr	r1, [pc, #76]	; (2c78 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    2c2c:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    2c30:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    2c34:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    2c38:	7048      	strb	r0, [r1, #1]
    2c3a:	6820      	ldr	r0, [r4, #0]
    2c3c:	4438      	add	r0, r7
    2c3e:	6020      	str	r0, [r4, #0]
    2c40:	20ff      	movs	r0, #255	; 0xff
    2c42:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2c46:	7e60      	ldrb	r0, [r4, #25]
    2c48:	2801      	cmp	r0, #1
    2c4a:	d105      	bne.n	2c58 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    2c4c:	68e0      	ldr	r0, [r4, #12]
    2c4e:	1e40      	subs	r0, r0, #1
    2c50:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c54:	f001 fb94 	bl	4380 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    2c58:	f89d 0020 	ldrb.w	r0, [sp, #32]
    2c5c:	2820      	cmp	r0, #32
    2c5e:	d003      	beq.n	2c68 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    2c60:	4806      	ldr	r0, [pc, #24]	; (2c7c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    2c62:	7840      	ldrb	r0, [r0, #1]
    2c64:	f002 fab8 	bl	51d8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2c68:	b00d      	add	sp, #52	; 0x34
    2c6a:	2000      	movs	r0, #0
    2c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c70:	200012c4 	.word	0x200012c4
    2c74:	0f424000 	.word	0x0f424000
    2c78:	20001244 	.word	0x20001244
    2c7c:	2000003c 	.word	0x2000003c

00002c80 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    2c80:	4806      	ldr	r0, [pc, #24]	; (2c9c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    2c82:	b510      	push	{r4, lr}
    2c84:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    2c88:	2920      	cmp	r1, #32
    2c8a:	bf1c      	itt	ne
    2c8c:	7e00      	ldrbne	r0, [r0, #24]
    2c8e:	bd10      	popne	{r4, pc}
    2c90:	f640 312a 	movw	r1, #2858	; 0xb2a
    2c94:	2070      	movs	r0, #112	; 0x70
    2c96:	f002 f9cb 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c9a:	0000      	.short	0x0000
    2c9c:	200012c4 	.word	0x200012c4

00002ca0 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    2ca0:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    2ca4:	b570      	push	{r4, r5, r6, lr}
    2ca6:	4807      	ldr	r0, [pc, #28]	; (2cc4 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    2ca8:	4a07      	ldr	r2, [pc, #28]	; (2cc8 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x28>)
    2caa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2cae:	6901      	ldr	r1, [r0, #16]
    2cb0:	3008      	adds	r0, #8
    2cb2:	fba1 4502 	umull	r4, r5, r1, r2
    2cb6:	f7ff fdcf 	bl	2858 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x858>
    2cba:	1900      	adds	r0, r0, r4
    2cbc:	f145 0100 	adc.w	r1, r5, #0
    2cc0:	bd70      	pop	{r4, r5, r6, pc}
    2cc2:	0000      	.short	0x0000
    2cc4:	20000ec4 	.word	0x20000ec4
    2cc8:	1e848000 	.word	0x1e848000

00002ccc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    2ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cce:	4d6b      	ldr	r5, [pc, #428]	; (2e7c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    2cd0:	4a6b      	ldr	r2, [pc, #428]	; (2e80 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    2cd2:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    2cd6:	2601      	movs	r6, #1
    2cd8:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    2cdc:	2808      	cmp	r0, #8
    2cde:	d27c      	bcs.n	2dda <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    2ce0:	e8df f000 	tbb	[pc, r0]
    2ce4:	a9977004 	.word	0xa9977004
    2ce8:	b3ae41c7 	.word	0xb3ae41c7
    2cec:	b919      	cbnz	r1, 2cf6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    2cee:	f002 f817 	bl	4d20 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2cf2:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2cf6:	8ae0      	ldrh	r0, [r4, #22]
    2cf8:	b110      	cbz	r0, 2d00 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    2cfa:	f002 f921 	bl	4f40 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2cfe:	b180      	cbz	r0, 2d22 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x56>
    2d00:	f7ff fcf8 	bl	26f4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6f4>
    2d04:	20ff      	movs	r0, #255	; 0xff
    2d06:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    2d0a:	6861      	ldr	r1, [r4, #4]
    2d0c:	f1b1 3fff 	cmp.w	r1, #4294967295
    2d10:	d003      	beq.n	2d1a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x4e>
    2d12:	2005      	movs	r0, #5
    2d14:	f001 fc1a 	bl	454c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2d18:	b140      	cbz	r0, 2d2c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x60>
    2d1a:	7e60      	ldrb	r0, [r4, #25]
    2d1c:	2801      	cmp	r0, #1
    2d1e:	d110      	bne.n	2d42 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    2d20:	e009      	b.n	2d36 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6a>
    2d22:	f640 0134 	movw	r1, #2100	; 0x834
    2d26:	2070      	movs	r0, #112	; 0x70
    2d28:	f002 f982 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d2c:	f640 0139 	movw	r1, #2105	; 0x839
    2d30:	2070      	movs	r0, #112	; 0x70
    2d32:	f002 f97d 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d36:	68e0      	ldr	r0, [r4, #12]
    2d38:	1e40      	subs	r0, r0, #1
    2d3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d3e:	f001 fb1f 	bl	4380 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    2d42:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2d46:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2d4a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2d4e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2d52:	6840      	ldr	r0, [r0, #4]
    2d54:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2d58:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2d5c:	b001      	add	sp, #4
    2d5e:	2101      	movs	r1, #1
    2d60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2d64:	4710      	bx	r2
    2d66:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    2d6a:	b140      	cbz	r0, 2d7e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb2>
    2d6c:	b919      	cbnz	r1, 2d76 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xaa>
    2d6e:	f001 ffd7 	bl	4d20 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2d72:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2d76:	2000      	movs	r0, #0
    2d78:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    2d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d7e:	f7ff fcb9 	bl	26f4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6f4>
    2d82:	f04f 30ff 	mov.w	r0, #4294967295
    2d86:	6060      	str	r0, [r4, #4]
    2d88:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2d8c:	f88d 0000 	strb.w	r0, [sp]
    2d90:	f89d 0000 	ldrb.w	r0, [sp]
    2d94:	b188      	cbz	r0, 2dba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xee>
    2d96:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2d9a:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2d9e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2da2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2da6:	6840      	ldr	r0, [r0, #4]
    2da8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2dac:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2db0:	b001      	add	sp, #4
    2db2:	2106      	movs	r1, #6
    2db4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2db8:	4710      	bx	r2
    2dba:	f44f 6105 	mov.w	r1, #2128	; 0x850
    2dbe:	2070      	movs	r0, #112	; 0x70
    2dc0:	f002 f936 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2dc4:	f7ff fc96 	bl	26f4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6f4>
    2dc8:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    2dcc:	f002 f8b8 	bl	4f40 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2dd0:	b120      	cbz	r0, 2ddc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x110>
    2dd2:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    2dd6:	b130      	cbz	r0, 2de6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11a>
    2dd8:	e009      	b.n	2dee <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x122>
    2dda:	e04a      	b.n	2e72 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a6>
    2ddc:	f640 015e 	movw	r1, #2142	; 0x85e
    2de0:	2070      	movs	r0, #112	; 0x70
    2de2:	f002 f925 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2de6:	f001 ff9b 	bl	4d20 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2dea:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2dee:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2df2:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2df6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2dfa:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2dfe:	6840      	ldr	r0, [r0, #4]
    2e00:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2e04:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2e08:	b001      	add	sp, #4
    2e0a:	2100      	movs	r1, #0
    2e0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2e10:	4710      	bx	r2
    2e12:	f001 fd77 	bl	4904 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    2e16:	8ae0      	ldrh	r0, [r4, #22]
    2e18:	b110      	cbz	r0, 2e20 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x154>
    2e1a:	f002 f891 	bl	4f40 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2e1e:	b128      	cbz	r0, 2e2c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x160>
    2e20:	f001 fd84 	bl	492c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    2e24:	2800      	cmp	r0, #0
    2e26:	bf18      	it	ne
    2e28:	7766      	strbne	r6, [r4, #29]
    2e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e2c:	f640 0168 	movw	r1, #2152	; 0x868
    2e30:	2070      	movs	r0, #112	; 0x70
    2e32:	f002 f8fd 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e36:	4813      	ldr	r0, [pc, #76]	; (2e84 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    2e38:	6006      	str	r6, [r0, #0]
    2e3a:	6890      	ldr	r0, [r2, #8]
    2e3c:	6006      	str	r6, [r0, #0]
    2e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e40:	7810      	ldrb	r0, [r2, #0]
    2e42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2e46:	f002 b9c7 	b.w	51d8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2e4a:	f7ff fc53 	bl	26f4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6f4>
    2e4e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2e52:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2e56:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2e5a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2e5e:	6840      	ldr	r0, [r0, #4]
    2e60:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2e64:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2e68:	b001      	add	sp, #4
    2e6a:	2105      	movs	r1, #5
    2e6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2e70:	4710      	bx	r2
    2e72:	f640 017b 	movw	r1, #2171	; 0x87b
    2e76:	2070      	movs	r0, #112	; 0x70
    2e78:	f002 f8da 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e7c:	20000ec4 	.word	0x20000ec4
    2e80:	2000003c 	.word	0x2000003c
    2e84:	40000508 	.word	0x40000508

00002e88 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    2e88:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e8c:	4682      	mov	sl, r0
    2e8e:	48f0      	ldr	r0, [pc, #960]	; (3250 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    2e90:	b095      	sub	sp, #84	; 0x54
    2e92:	6800      	ldr	r0, [r0, #0]
    2e94:	4def      	ldr	r5, [pc, #956]	; (3254 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    2e96:	05c0      	lsls	r0, r0, #23
    2e98:	0dc0      	lsrs	r0, r0, #23
    2e9a:	d00e      	beq.n	2eba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    2e9c:	3810      	subs	r0, #16
    2e9e:	b240      	sxtb	r0, r0
    2ea0:	2800      	cmp	r0, #0
    2ea2:	bfb8      	it	lt
    2ea4:	f000 000f 	andlt.w	r0, r0, #15
    2ea8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2eac:	bfac      	ite	ge
    2eae:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2eb2:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2eb6:	0940      	lsrs	r0, r0, #5
    2eb8:	d00d      	beq.n	2ed6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    2eba:	9816      	ldr	r0, [sp, #88]	; 0x58
    2ebc:	f04f 0b00 	mov.w	fp, #0
    2ec0:	7800      	ldrb	r0, [r0, #0]
    2ec2:	2800      	cmp	r0, #0
    2ec4:	bf18      	it	ne
    2ec6:	2801      	cmpne	r0, #1
    2ec8:	d018      	beq.n	2efc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2eca:	f240 7104 	movw	r1, #1796	; 0x704
    2ece:	f04f 0070 	mov.w	r0, #112	; 0x70
    2ed2:	f002 f8ad 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ed6:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    2eda:	f04f 0b01 	mov.w	fp, #1
    2ede:	2820      	cmp	r0, #32
    2ee0:	d007      	beq.n	2ef2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    2ee2:	9816      	ldr	r0, [sp, #88]	; 0x58
    2ee4:	7800      	ldrb	r0, [r0, #0]
    2ee6:	b148      	cbz	r0, 2efc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2ee8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    2eec:	2070      	movs	r0, #112	; 0x70
    2eee:	f002 f89f 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ef2:	f240 61fd 	movw	r1, #1789	; 0x6fd
    2ef6:	2070      	movs	r0, #112	; 0x70
    2ef8:	f002 f89a 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2efc:	4cd6      	ldr	r4, [pc, #856]	; (3258 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    2efe:	b124      	cbz	r4, 2f0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    2f00:	2100      	movs	r1, #0
    2f02:	f240 7007 	movw	r0, #1799	; 0x707
    2f06:	f3af 8000 	nop.w
    2f0a:	2000      	movs	r0, #0
    2f0c:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    2f10:	49d2      	ldr	r1, [pc, #840]	; (325c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    2f12:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    2f16:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2f1a:	f04f 0901 	mov.w	r9, #1
    2f1e:	9000      	str	r0, [sp, #0]
    2f20:	b124      	cbz	r4, 2f2c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    2f22:	2100      	movs	r1, #0
    2f24:	f240 7012 	movw	r0, #1810	; 0x712
    2f28:	f3af 8000 	nop.w
    2f2c:	f1b9 0f00 	cmp.w	r9, #0
    2f30:	d00a      	beq.n	2f48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    2f32:	bf00      	nop
    2f34:	f895 602c 	ldrb.w	r6, [r5, #44]	; 0x2c
    2f38:	f04f 0800 	mov.w	r8, #0
    2f3c:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    2f40:	f1bb 0f00 	cmp.w	fp, #0
    2f44:	d007      	beq.n	2f56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    2f46:	e038      	b.n	2fba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    2f48:	48c5      	ldr	r0, [pc, #788]	; (3260 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    2f4a:	2800      	cmp	r0, #0
    2f4c:	bf18      	it	ne
    2f4e:	f3af 8000 	nopne.w
    2f52:	b662      	cpsie	i
    2f54:	e7ee      	b.n	2f34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    2f56:	4637      	mov	r7, r6
    2f58:	2001      	movs	r0, #1
    2f5a:	ea20 0607 	bic.w	r6, r0, r7
    2f5e:	48c1      	ldr	r0, [pc, #772]	; (3264 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    2f60:	2240      	movs	r2, #64	; 0x40
    2f62:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2f66:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2f6a:	f00a fd93 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2f6e:	b124      	cbz	r4, 2f7a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    2f70:	2100      	movs	r1, #0
    2f72:	f240 502f 	movw	r0, #1327	; 0x52f
    2f76:	f3af 8000 	nop.w
    2f7a:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    2f7e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    2f82:	4429      	add	r1, r5
    2f84:	4428      	add	r0, r5
    2f86:	8c0a      	ldrh	r2, [r1, #32]
    2f88:	8402      	strh	r2, [r0, #32]
    2f8a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    2f8e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    2f92:	b124      	cbz	r4, 2f9e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    2f94:	2100      	movs	r1, #0
    2f96:	f240 5033 	movw	r0, #1331	; 0x533
    2f9a:	f3af 8000 	nop.w
    2f9e:	b124      	cbz	r4, 2faa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    2fa0:	2100      	movs	r1, #0
    2fa2:	f240 701c 	movw	r0, #1820	; 0x71c
    2fa6:	f3af 8000 	nop.w
    2faa:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    2fae:	f88d 0008 	strb.w	r0, [sp, #8]
    2fb2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2fb6:	2800      	cmp	r0, #0
    2fb8:	d1b2      	bne.n	2f20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    2fba:	b124      	cbz	r4, 2fc6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    2fbc:	2100      	movs	r1, #0
    2fbe:	f240 7026 	movw	r0, #1830	; 0x726
    2fc2:	f3af 8000 	nop.w
    2fc6:	a802      	add	r0, sp, #8
    2fc8:	f001 f91a 	bl	4200 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2fcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    2fd0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    2fd4:	4633      	mov	r3, r6
    2fd6:	aa09      	add	r2, sp, #36	; 0x24
    2fd8:	a80e      	add	r0, sp, #56	; 0x38
    2fda:	9916      	ldr	r1, [sp, #88]	; 0x58
    2fdc:	f7ff faae 	bl	253c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x53c>
    2fe0:	b124      	cbz	r4, 2fec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    2fe2:	2100      	movs	r1, #0
    2fe4:	f240 702d 	movw	r0, #1837	; 0x72d
    2fe8:	f3af 8000 	nop.w
    2fec:	4a9d      	ldr	r2, [pc, #628]	; (3264 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    2fee:	990e      	ldr	r1, [sp, #56]	; 0x38
    2ff0:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    2ff4:	a809      	add	r0, sp, #36	; 0x24
    2ff6:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    2ffa:	2a01      	cmp	r2, #1
    2ffc:	bf18      	it	ne
    2ffe:	2a02      	cmpne	r2, #2
    3000:	d138      	bne.n	3074 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    3002:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3006:	eba2 0201 	sub.w	r2, r2, r1
    300a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    300e:	eba3 0101 	sub.w	r1, r3, r1
    3012:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    3016:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    301a:	2a02      	cmp	r2, #2
    301c:	d364      	bcc.n	30e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    301e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    3022:	bf98      	it	ls
    3024:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    3028:	d85e      	bhi.n	30e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    302a:	f04f 0801 	mov.w	r8, #1
    302e:	ab14      	add	r3, sp, #80	; 0x50
    3030:	aa13      	add	r2, sp, #76	; 0x4c
    3032:	4631      	mov	r1, r6
    3034:	f7fe ff20 	bl	1e78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12c>
    3038:	2800      	cmp	r0, #0
    303a:	d05d      	beq.n	30f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    303c:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    3040:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    3044:	4633      	mov	r3, r6
    3046:	428a      	cmp	r2, r1
    3048:	d05a      	beq.n	3100 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    304a:	2005      	movs	r0, #5
    304c:	f7fe fd26 	bl	1a9c <MPSL_IRQ_RADIO_Handler+0x40>
    3050:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    3054:	7048      	strb	r0, [r1, #1]
    3056:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    305a:	2820      	cmp	r0, #32
    305c:	bf1c      	itt	ne
    305e:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    3062:	f880 a001 	strbne.w	sl, [r0, #1]
    3066:	d057      	beq.n	3118 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    3068:	4632      	mov	r2, r6
    306a:	4651      	mov	r1, sl
    306c:	f05f 0003 	movs.w	r0, #3
    3070:	f7ff fc2c 	bl	28cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8cc>
    3074:	b124      	cbz	r4, 3080 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    3076:	2100      	movs	r1, #0
    3078:	f240 7032 	movw	r0, #1842	; 0x732
    307c:	f3af 8000 	nop.w
    3080:	4879      	ldr	r0, [pc, #484]	; (3268 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    3082:	2800      	cmp	r0, #0
    3084:	bf18      	it	ne
    3086:	f3af 8000 	nopne.w
    308a:	f3ef 8910 	mrs	r9, PRIMASK
    308e:	b672      	cpsid	i
    3090:	b124      	cbz	r4, 309c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    3092:	2100      	movs	r1, #0
    3094:	f44f 60e7 	mov.w	r0, #1848	; 0x738
    3098:	f3af 8000 	nop.w
    309c:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    30a0:	f88d 0008 	strb.w	r0, [sp, #8]
    30a4:	f89d 0008 	ldrb.w	r0, [sp, #8]
    30a8:	2800      	cmp	r0, #0
    30aa:	f47f af39 	bne.w	2f20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    30ae:	b124      	cbz	r4, 30ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    30b0:	2100      	movs	r1, #0
    30b2:	f44f 60e8 	mov.w	r0, #1856	; 0x740
    30b6:	f3af 8000 	nop.w
    30ba:	af09      	add	r7, sp, #36	; 0x24
    30bc:	9800      	ldr	r0, [sp, #0]
    30be:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    30c2:	f100 0708 	add.w	r7, r0, #8
    30c6:	f1b8 0f00 	cmp.w	r8, #0
    30ca:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    30ce:	990d      	ldr	r1, [sp, #52]	; 0x34
    30d0:	6181      	str	r1, [r0, #24]
    30d2:	d053      	beq.n	317c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    30d4:	b124      	cbz	r4, 30e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    30d6:	2100      	movs	r1, #0
    30d8:	f240 704d 	movw	r0, #1869	; 0x74d
    30dc:	f3af 8000 	nop.w
    30e0:	f1bb 0f00 	cmp.w	fp, #0
    30e4:	d13a      	bne.n	315c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    30e6:	e01f      	b.n	3128 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    30e8:	4632      	mov	r2, r6
    30ea:	4651      	mov	r1, sl
    30ec:	2004      	movs	r0, #4
    30ee:	f7ff fbed 	bl	28cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8cc>
    30f2:	f04f 0801 	mov.w	r8, #1
    30f6:	e7bd      	b.n	3074 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    30f8:	4632      	mov	r2, r6
    30fa:	4651      	mov	r1, sl
    30fc:	2004      	movs	r0, #4
    30fe:	e7b7      	b.n	3070 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    3100:	2920      	cmp	r1, #32
    3102:	bf19      	ittee	ne
    3104:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    3108:	7840      	ldrbne	r0, [r0, #1]
    310a:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    310e:	4428      	addeq	r0, r5
    3110:	bf08      	it	eq
    3112:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    3116:	e79b      	b.n	3050 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    3118:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    311c:	4429      	add	r1, r5
    311e:	f881 a020 	strb.w	sl, [r1, #32]
    3122:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    3126:	e79f      	b.n	3068 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    3128:	9811      	ldr	r0, [sp, #68]	; 0x44
    312a:	f010 0fff 	tst.w	r0, #255	; 0xff
    312e:	d015      	beq.n	315c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    3130:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    3134:	2820      	cmp	r0, #32
    3136:	d111      	bne.n	315c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    3138:	b124      	cbz	r4, 3144 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    313a:	2100      	movs	r1, #0
    313c:	f240 7052 	movw	r0, #1874	; 0x752
    3140:	f3af 8000 	nop.w
    3144:	4632      	mov	r2, r6
    3146:	2102      	movs	r1, #2
    3148:	980e      	ldr	r0, [sp, #56]	; 0x38
    314a:	f7ff fbf1 	bl	2930 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x930>
    314e:	9010      	str	r0, [sp, #64]	; 0x40
    3150:	b920      	cbnz	r0, 315c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    3152:	9816      	ldr	r0, [sp, #88]	; 0x58
    3154:	7800      	ldrb	r0, [r0, #0]
    3156:	b1f0      	cbz	r0, 3196 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30e>
    3158:	2801      	cmp	r0, #1
    315a:	d02b      	beq.n	31b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    315c:	b124      	cbz	r4, 3168 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e0>
    315e:	2100      	movs	r1, #0
    3160:	f240 706f 	movw	r0, #1903	; 0x76f
    3164:	f3af 8000 	nop.w
    3168:	20ff      	movs	r0, #255	; 0xff
    316a:	f1bb 0f00 	cmp.w	fp, #0
    316e:	bf18      	it	ne
    3170:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    3174:	d027      	beq.n	31c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33e>
    3176:	bf00      	nop
    3178:	f04f 0801 	mov.w	r8, #1
    317c:	b124      	cbz	r4, 3188 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x300>
    317e:	2100      	movs	r1, #0
    3180:	f44f 60f0 	mov.w	r0, #1920	; 0x780
    3184:	f3af 8000 	nop.w
    3188:	9810      	ldr	r0, [sp, #64]	; 0x40
    318a:	4e38      	ldr	r6, [pc, #224]	; (326c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    318c:	2802      	cmp	r0, #2
    318e:	d023      	beq.n	31d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x350>
    3190:	2801      	cmp	r0, #1
    3192:	d029      	beq.n	31e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>
    3194:	e02d      	b.n	31f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    3196:	b124      	cbz	r4, 31a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x31a>
    3198:	2100      	movs	r1, #0
    319a:	f240 705a 	movw	r0, #1882	; 0x75a
    319e:	f3af 8000 	nop.w
    31a2:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    31a6:	4651      	mov	r1, sl
    31a8:	2004      	movs	r0, #4
    31aa:	f7ff fb8f 	bl	28cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8cc>
    31ae:	f04f 0801 	mov.w	r8, #1
    31b2:	e7e3      	b.n	317c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    31b4:	2c00      	cmp	r4, #0
    31b6:	f43f aeb3 	beq.w	2f20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    31ba:	2100      	movs	r1, #0
    31bc:	f240 7065 	movw	r0, #1893	; 0x765
    31c0:	f3af 8000 	nop.w
    31c4:	e6ac      	b.n	2f20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    31c6:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    31ca:	2101      	movs	r1, #1
    31cc:	4391      	bics	r1, r2
    31ce:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    31d2:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    31d6:	e7cf      	b.n	3178 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    31d8:	68a8      	ldr	r0, [r5, #8]
    31da:	990e      	ldr	r1, [sp, #56]	; 0x38
    31dc:	1a40      	subs	r0, r0, r1
    31de:	f00a faff 	bl	d7e0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    31e2:	6871      	ldr	r1, [r6, #4]
    31e4:	b921      	cbnz	r1, 31f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>
    31e6:	e004      	b.n	31f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    31e8:	6871      	ldr	r1, [r6, #4]
    31ea:	f04f 30ff 	mov.w	r0, #4294967295
    31ee:	b101      	cbz	r1, 31f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    31f0:	4788      	blx	r1
    31f2:	f1b9 0f00 	cmp.w	r9, #0
    31f6:	d024      	beq.n	3242 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ba>
    31f8:	b124      	cbz	r4, 3204 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>
    31fa:	2100      	movs	r1, #0
    31fc:	f44f 60f2 	mov.w	r0, #1936	; 0x790
    3200:	f3af 8000 	nop.w
    3204:	f1b8 0f00 	cmp.w	r8, #0
    3208:	d011      	beq.n	322e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a6>
    320a:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    320e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3212:	4428      	add	r0, r5
    3214:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    3218:	2820      	cmp	r0, #32
    321a:	d008      	beq.n	322e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a6>
    321c:	b124      	cbz	r4, 3228 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a0>
    321e:	2100      	movs	r1, #0
    3220:	f240 7097 	movw	r0, #1943	; 0x797
    3224:	f3af 8000 	nop.w
    3228:	7870      	ldrb	r0, [r6, #1]
    322a:	f001 ffd5 	bl	51d8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    322e:	b124      	cbz	r4, 323a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    3230:	2100      	movs	r1, #0
    3232:	f240 709c 	movw	r0, #1948	; 0x79c
    3236:	f3af 8000 	nop.w
    323a:	b017      	add	sp, #92	; 0x5c
    323c:	4640      	mov	r0, r8
    323e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3242:	4807      	ldr	r0, [pc, #28]	; (3260 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    3244:	2800      	cmp	r0, #0
    3246:	bf18      	it	ne
    3248:	f3af 8000 	nopne.w
    324c:	b662      	cpsie	i
    324e:	e7d3      	b.n	31f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x370>
    3250:	e000ed04 	.word	0xe000ed04
    3254:	200012c4 	.word	0x200012c4
    3258:	00000000 	.word	0x00000000
    325c:	20000ec4 	.word	0x20000ec4
    3260:	00000000 	.word	0x00000000
    3264:	20001244 	.word	0x20001244
    3268:	00000000 	.word	0x00000000
    326c:	2000003c 	.word	0x2000003c

00003270 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    3270:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3274:	48c9      	ldr	r0, [pc, #804]	; (359c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x32c>)
    3276:	b08a      	sub	sp, #40	; 0x28
    3278:	6800      	ldr	r0, [r0, #0]
    327a:	05c0      	lsls	r0, r0, #23
    327c:	0dc0      	lsrs	r0, r0, #23
    327e:	d011      	beq.n	32a4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    3280:	3810      	subs	r0, #16
    3282:	b240      	sxtb	r0, r0
    3284:	2800      	cmp	r0, #0
    3286:	bfb8      	it	lt
    3288:	f000 000f 	andlt.w	r0, r0, #15
    328c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3290:	bfac      	ite	ge
    3292:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    3296:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    329a:	0940      	lsrs	r0, r0, #5
    329c:	bf08      	it	eq
    329e:	f04f 0b01 	moveq.w	fp, #1
    32a2:	d001      	beq.n	32a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    32a4:	f04f 0b00 	mov.w	fp, #0
    32a8:	980a      	ldr	r0, [sp, #40]	; 0x28
    32aa:	7800      	ldrb	r0, [r0, #0]
    32ac:	2800      	cmp	r0, #0
    32ae:	bf1e      	ittt	ne
    32b0:	2000      	movne	r0, #0
    32b2:	b00b      	addne	sp, #44	; 0x2c
    32b4:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    32b8:	f04f 0a00 	mov.w	sl, #0
    32bc:	4db8      	ldr	r5, [pc, #736]	; (35a0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x330>)
    32be:	4cb9      	ldr	r4, [pc, #740]	; (35a4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x334>)
    32c0:	46d1      	mov	r9, sl
    32c2:	b125      	cbz	r5, 32ce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x5e>
    32c4:	2100      	movs	r1, #0
    32c6:	f240 50b9 	movw	r0, #1465	; 0x5b9
    32ca:	f3af 8000 	nop.w
    32ce:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    32d2:	f884 9029 	strb.w	r9, [r4, #41]	; 0x29
    32d6:	f04f 0800 	mov.w	r8, #0
    32da:	b125      	cbz	r5, 32e6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x76>
    32dc:	2100      	movs	r1, #0
    32de:	f240 50be 	movw	r0, #1470	; 0x5be
    32e2:	f3af 8000 	nop.w
    32e6:	f1bb 0f00 	cmp.w	fp, #0
    32ea:	d123      	bne.n	3334 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    32ec:	4637      	mov	r7, r6
    32ee:	2001      	movs	r0, #1
    32f0:	ea20 0607 	bic.w	r6, r0, r7
    32f4:	48ac      	ldr	r0, [pc, #688]	; (35a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x338>)
    32f6:	2240      	movs	r2, #64	; 0x40
    32f8:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    32fc:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    3300:	f00a fbc8 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3304:	b125      	cbz	r5, 3310 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa0>
    3306:	2100      	movs	r1, #0
    3308:	f240 502f 	movw	r0, #1327	; 0x52f
    330c:	f3af 8000 	nop.w
    3310:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    3314:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    3318:	4421      	add	r1, r4
    331a:	4420      	add	r0, r4
    331c:	8c0a      	ldrh	r2, [r1, #32]
    331e:	8402      	strh	r2, [r0, #32]
    3320:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    3324:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    3328:	b125      	cbz	r5, 3334 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    332a:	2100      	movs	r1, #0
    332c:	f240 5033 	movw	r0, #1331	; 0x533
    3330:	f3af 8000 	nop.w
    3334:	b125      	cbz	r5, 3340 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd0>
    3336:	2100      	movs	r1, #0
    3338:	f240 50c6 	movw	r0, #1478	; 0x5c6
    333c:	f3af 8000 	nop.w
    3340:	a808      	add	r0, sp, #32
    3342:	f000 ff5d 	bl	4200 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    3346:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    334a:	e9cd 0106 	strd	r0, r1, [sp, #24]
    334e:	4633      	mov	r3, r6
    3350:	466a      	mov	r2, sp
    3352:	a806      	add	r0, sp, #24
    3354:	990a      	ldr	r1, [sp, #40]	; 0x28
    3356:	f7ff f8f1 	bl	253c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x53c>
    335a:	b125      	cbz	r5, 3366 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xf6>
    335c:	2100      	movs	r1, #0
    335e:	f240 50cc 	movw	r0, #1484	; 0x5cc
    3362:	f3af 8000 	nop.w
    3366:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    336a:	2820      	cmp	r0, #32
    336c:	d019      	beq.n	33a2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x132>
    336e:	68e0      	ldr	r0, [r4, #12]
    3370:	9900      	ldr	r1, [sp, #0]
    3372:	1a09      	subs	r1, r1, r0
    3374:	0209      	lsls	r1, r1, #8
    3376:	17ca      	asrs	r2, r1, #31
    3378:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    337c:	1209      	asrs	r1, r1, #8
    337e:	d510      	bpl.n	33a2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x132>
    3380:	e9dd 2100 	ldrd	r2, r1, [sp]
    3384:	1a89      	subs	r1, r1, r2
    3386:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    338a:	4408      	add	r0, r1
    338c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3390:	e9cd 3000 	strd	r3, r0, [sp]
    3394:	4293      	cmp	r3, r2
    3396:	d202      	bcs.n	339e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    3398:	9802      	ldr	r0, [sp, #8]
    339a:	1c40      	adds	r0, r0, #1
    339c:	9002      	str	r0, [sp, #8]
    339e:	f04f 0801 	mov.w	r8, #1
    33a2:	b14d      	cbz	r5, 33b8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x148>
    33a4:	2100      	movs	r1, #0
    33a6:	f240 50df 	movw	r0, #1503	; 0x5df
    33aa:	f3af 8000 	nop.w
    33ae:	2100      	movs	r1, #0
    33b0:	f240 50e5 	movw	r0, #1509	; 0x5e5
    33b4:	f3af 8000 	nop.w
    33b8:	9900      	ldr	r1, [sp, #0]
    33ba:	9806      	ldr	r0, [sp, #24]
    33bc:	9a01      	ldr	r2, [sp, #4]
    33be:	1a09      	subs	r1, r1, r0
    33c0:	1a10      	subs	r0, r2, r0
    33c2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    33c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    33ca:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    33ce:	bf98      	it	ls
    33d0:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    33d4:	d803      	bhi.n	33de <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x16e>
    33d6:	f1bb 0f00 	cmp.w	fp, #0
    33da:	d10c      	bne.n	33f6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x186>
    33dc:	e003      	b.n	33e6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x176>
    33de:	f1bb 0f00 	cmp.w	fp, #0
    33e2:	d039      	beq.n	3458 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e8>
    33e4:	e0c0      	b.n	3568 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    33e6:	4633      	mov	r3, r6
    33e8:	4669      	mov	r1, sp
    33ea:	4870      	ldr	r0, [pc, #448]	; (35ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    33ec:	9a06      	ldr	r2, [sp, #24]
    33ee:	f7fe fb91 	bl	1b14 <MPSL_IRQ_RADIO_Handler+0xb8>
    33f2:	ea48 0800 	orr.w	r8, r8, r0
    33f6:	f1b8 0f00 	cmp.w	r8, #0
    33fa:	d023      	beq.n	3444 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d4>
    33fc:	9800      	ldr	r0, [sp, #0]
    33fe:	f00a f9ef 	bl	d7e0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3402:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    3406:	f89d 200c 	ldrb.w	r2, [sp, #12]
    340a:	4b69      	ldr	r3, [pc, #420]	; (35b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x340>)
    340c:	4411      	add	r1, r2
    340e:	1c49      	adds	r1, r1, #1
    3410:	1842      	adds	r2, r0, r1
    3412:	4298      	cmp	r0, r3
    3414:	d856      	bhi.n	34c4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    3416:	4865      	ldr	r0, [pc, #404]	; (35ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    3418:	4281      	cmp	r1, r0
    341a:	dc7c      	bgt.n	3516 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a6>
    341c:	4240      	negs	r0, r0
    341e:	4281      	cmp	r1, r0
    3420:	db7a      	blt.n	3518 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>
    3422:	1c58      	adds	r0, r3, #1
    3424:	4290      	cmp	r0, r2
    3426:	bfdc      	itt	le
    3428:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    342c:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    3430:	dd05      	ble.n	343e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ce>
    3432:	2a00      	cmp	r2, #0
    3434:	bfbc      	itt	lt
    3436:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    343a:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    343e:	980a      	ldr	r0, [sp, #40]	; 0x28
    3440:	e9c0 2904 	strd	r2, r9, [r0, #16]
    3444:	f04f 0a01 	mov.w	sl, #1
    3448:	2d00      	cmp	r5, #0
    344a:	d07c      	beq.n	3546 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2d6>
    344c:	2100      	movs	r1, #0
    344e:	f44f 60bf 	mov.w	r0, #1528	; 0x5f8
    3452:	f3af 8000 	nop.w
    3456:	e087      	b.n	3568 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    3458:	9807      	ldr	r0, [sp, #28]
    345a:	9002      	str	r0, [sp, #8]
    345c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    3460:	aa08      	add	r2, sp, #32
    3462:	a905      	add	r1, sp, #20
    3464:	f8dd 8018 	ldr.w	r8, [sp, #24]
    3468:	f000 fd5a 	bl	3f20 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    346c:	f001 fa68 	bl	4940 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    3470:	f000 fd3a 	bl	3ee8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    3474:	4607      	mov	r7, r0
    3476:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    347a:	2820      	cmp	r0, #32
    347c:	d027      	beq.n	34ce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    347e:	68e0      	ldr	r0, [r4, #12]
    3480:	1d40      	adds	r0, r0, #5
    3482:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3486:	bf00      	nop
    3488:	e9dd 2100 	ldrd	r2, r1, [sp]
    348c:	1a89      	subs	r1, r1, r2
    348e:	9000      	str	r0, [sp, #0]
    3490:	4408      	add	r0, r1
    3492:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3496:	9001      	str	r0, [sp, #4]
    3498:	9800      	ldr	r0, [sp, #0]
    349a:	4540      	cmp	r0, r8
    349c:	d202      	bcs.n	34a4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    349e:	9802      	ldr	r0, [sp, #8]
    34a0:	1c40      	adds	r0, r0, #1
    34a2:	9002      	str	r0, [sp, #8]
    34a4:	201f      	movs	r0, #31
    34a6:	f88d 000c 	strb.w	r0, [sp, #12]
    34aa:	9800      	ldr	r0, [sp, #0]
    34ac:	f00a f998 	bl	d7e0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    34b0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    34b4:	f89d 200c 	ldrb.w	r2, [sp, #12]
    34b8:	4b3d      	ldr	r3, [pc, #244]	; (35b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x340>)
    34ba:	4411      	add	r1, r2
    34bc:	1c49      	adds	r1, r1, #1
    34be:	1842      	adds	r2, r0, r1
    34c0:	4298      	cmp	r0, r3
    34c2:	d92a      	bls.n	351a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2aa>
    34c4:	f240 516f 	movw	r1, #1391	; 0x56f
    34c8:	2070      	movs	r0, #112	; 0x70
    34ca:	f001 fdb1 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34ce:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    34d2:	f108 0609 	add.w	r6, r8, #9
    34d6:	b1b0      	cbz	r0, 3506 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x296>
    34d8:	f001 fd32 	bl	4f40 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    34dc:	b998      	cbnz	r0, 3506 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x296>
    34de:	f001 fbfd 	bl	4cdc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    34e2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    34e6:	bf08      	it	eq
    34e8:	200d      	moveq	r0, #13
    34ea:	d00b      	beq.n	3504 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>
    34ec:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    34f0:	3856      	subs	r0, #86	; 0x56
    34f2:	bf08      	it	eq
    34f4:	201c      	moveq	r0, #28
    34f6:	d005      	beq.n	3504 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>
    34f8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    34fc:	389f      	subs	r0, #159	; 0x9f
    34fe:	bf14      	ite	ne
    3500:	4648      	movne	r0, r9
    3502:	2032      	moveq	r0, #50	; 0x32
    3504:	4406      	add	r6, r0
    3506:	9805      	ldr	r0, [sp, #20]
    3508:	4287      	cmp	r7, r0
    350a:	bf84      	itt	hi
    350c:	1a38      	subhi	r0, r7, r0
    350e:	4406      	addhi	r6, r0
    3510:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    3514:	e7b8      	b.n	3488 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x218>
    3516:	e003      	b.n	3520 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>
    3518:	e00a      	b.n	3530 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>
    351a:	4824      	ldr	r0, [pc, #144]	; (35ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    351c:	4281      	cmp	r1, r0
    351e:	dd04      	ble.n	352a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ba>
    3520:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    3524:	2070      	movs	r0, #112	; 0x70
    3526:	f001 fd83 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    352a:	4822      	ldr	r0, [pc, #136]	; (35b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x344>)
    352c:	4281      	cmp	r1, r0
    352e:	da04      	bge.n	353a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ca>
    3530:	f240 5171 	movw	r1, #1393	; 0x571
    3534:	2070      	movs	r0, #112	; 0x70
    3536:	f001 fd7b 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    353a:	481f      	ldr	r0, [pc, #124]	; (35b8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x348>)
    353c:	4290      	cmp	r0, r2
    353e:	bfd8      	it	le
    3540:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    3544:	e000      	b.n	3548 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2d8>
    3546:	e00f      	b.n	3568 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    3548:	bfd8      	it	le
    354a:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    354e:	dd05      	ble.n	355c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ec>
    3550:	2a00      	cmp	r2, #0
    3552:	bfbc      	itt	lt
    3554:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    3558:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    355c:	980a      	ldr	r0, [sp, #40]	; 0x28
    355e:	f04f 0a01 	mov.w	sl, #1
    3562:	46d0      	mov	r8, sl
    3564:	e9c0 2904 	strd	r2, r9, [r0, #16]
    3568:	ea1a 0f08 	tst.w	sl, r8
    356c:	d009      	beq.n	3582 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x312>
    356e:	980a      	ldr	r0, [sp, #40]	; 0x28
    3570:	4911      	ldr	r1, [pc, #68]	; (35b8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x348>)
    3572:	9b02      	ldr	r3, [sp, #8]
    3574:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
    3578:	fbe3 2001 	umlal	r2, r0, r3, r1
    357c:	990a      	ldr	r1, [sp, #40]	; 0x28
    357e:	e9c1 2004 	strd	r2, r0, [r1, #16]
    3582:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    3586:	f88d 0014 	strb.w	r0, [sp, #20]
    358a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    358e:	2800      	cmp	r0, #0
    3590:	f47f ae97 	bne.w	32c2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    3594:	b00b      	add	sp, #44	; 0x2c
    3596:	4650      	mov	r0, sl
    3598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    359c:	e000ed04 	.word	0xe000ed04
    35a0:	00000000 	.word	0x00000000
    35a4:	200012c4 	.word	0x200012c4
    35a8:	20001244 	.word	0x20001244
    35ac:	0f424000 	.word	0x0f424000
    35b0:	1e847fff 	.word	0x1e847fff
    35b4:	f0bdc000 	.word	0xf0bdc000
    35b8:	1e848000 	.word	0x1e848000

000035bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    35bc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    35c0:	4d94      	ldr	r5, [pc, #592]	; (3814 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    35c2:	b08c      	sub	sp, #48	; 0x30
    35c4:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    35c8:	2000      	movs	r0, #0
    35ca:	9009      	str	r0, [sp, #36]	; 0x24
    35cc:	9006      	str	r0, [sp, #24]
    35ce:	2001      	movs	r0, #1
    35d0:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    35d4:	f04f 0800 	mov.w	r8, #0
    35d8:	4607      	mov	r7, r0
    35da:	4c8f      	ldr	r4, [pc, #572]	; (3818 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    35dc:	f8cd 001c 	str.w	r0, [sp, #28]
    35e0:	f000 fe08 	bl	41f4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    35e4:	9008      	str	r0, [sp, #32]
    35e6:	b124      	cbz	r4, 35f2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x36>
    35e8:	2100      	movs	r1, #0
    35ea:	f44f 60f6 	mov.w	r0, #1968	; 0x7b0
    35ee:	f3af 8000 	nop.w
    35f2:	9807      	ldr	r0, [sp, #28]
    35f4:	2800      	cmp	r0, #0
    35f6:	d03c      	beq.n	3672 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb6>
    35f8:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    35fc:	b124      	cbz	r4, 3608 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x4c>
    35fe:	2100      	movs	r1, #0
    3600:	f240 70b5 	movw	r0, #1973	; 0x7b5
    3604:	f3af 8000 	nop.w
    3608:	f895 a02c 	ldrb.w	sl, [r5, #44]	; 0x2c
    360c:	2240      	movs	r2, #64	; 0x40
    360e:	ea27 060a 	bic.w	r6, r7, sl
    3612:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    3616:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    361a:	4683      	mov	fp, r0
    361c:	f00a fa3a 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3620:	b124      	cbz	r4, 362c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x70>
    3622:	2100      	movs	r1, #0
    3624:	f240 502f 	movw	r0, #1327	; 0x52f
    3628:	f3af 8000 	nop.w
    362c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    3630:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    3634:	4428      	add	r0, r5
    3636:	4429      	add	r1, r5
    3638:	9000      	str	r0, [sp, #0]
    363a:	8c0a      	ldrh	r2, [r1, #32]
    363c:	8402      	strh	r2, [r0, #32]
    363e:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    3642:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    3646:	b124      	cbz	r4, 3652 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    3648:	2100      	movs	r1, #0
    364a:	f240 5033 	movw	r0, #1331	; 0x533
    364e:	f3af 8000 	nop.w
    3652:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    3656:	f88d 0008 	strb.w	r0, [sp, #8]
    365a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    365e:	b178      	cbz	r0, 3680 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc4>
    3660:	2c00      	cmp	r4, #0
    3662:	bf1c      	itt	ne
    3664:	2100      	movne	r1, #0
    3666:	f240 70bb 	movwne	r0, #1979	; 0x7bb
    366a:	d0b9      	beq.n	35e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    366c:	f3af 8000 	nop.w
    3670:	e7b6      	b.n	35e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    3672:	486a      	ldr	r0, [pc, #424]	; (381c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    3674:	2800      	cmp	r0, #0
    3676:	bf18      	it	ne
    3678:	f3af 8000 	nopne.w
    367c:	b662      	cpsie	i
    367e:	e7bb      	b.n	35f8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x3c>
    3680:	b124      	cbz	r4, 368c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xd0>
    3682:	2100      	movs	r1, #0
    3684:	f240 70bf 	movw	r0, #1983	; 0x7bf
    3688:	f3af 8000 	nop.w
    368c:	980c      	ldr	r0, [sp, #48]	; 0x30
    368e:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    3692:	2803      	cmp	r0, #3
    3694:	d17d      	bne.n	3792 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d6>
    3696:	9a00      	ldr	r2, [sp, #0]
    3698:	990c      	ldr	r1, [sp, #48]	; 0x30
    369a:	f892 0020 	ldrb.w	r0, [r2, #32]
    369e:	4288      	cmp	r0, r1
    36a0:	bf14      	ite	ne
    36a2:	f04f 0a00 	movne.w	sl, #0
    36a6:	f04f 0a01 	moveq.w	sl, #1
    36aa:	f102 0c20 	add.w	ip, r2, #32
    36ae:	4683      	mov	fp, r0
    36b0:	2220      	movs	r2, #32
    36b2:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    36b6:	e003      	b.n	36c0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x104>
    36b8:	4602      	mov	r2, r0
    36ba:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    36be:	7840      	ldrb	r0, [r0, #1]
    36c0:	4288      	cmp	r0, r1
    36c2:	d002      	beq.n	36ca <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    36c4:	2820      	cmp	r0, #32
    36c6:	d00a      	beq.n	36de <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x122>
    36c8:	e7f6      	b.n	36b8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    36ca:	2820      	cmp	r0, #32
    36cc:	d007      	beq.n	36de <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x122>
    36ce:	4583      	cmp	fp, r0
    36d0:	d107      	bne.n	36e2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    36d2:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    36d6:	7840      	ldrb	r0, [r0, #1]
    36d8:	f88c 0000 	strb.w	r0, [ip]
    36dc:	e007      	b.n	36ee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    36de:	4640      	mov	r0, r8
    36e0:	e00c      	b.n	36fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    36e2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    36e6:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    36ea:	7840      	ldrb	r0, [r0, #1]
    36ec:	7048      	strb	r0, [r1, #1]
    36ee:	b124      	cbz	r4, 36fa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x13e>
    36f0:	2100      	movs	r1, #0
    36f2:	f240 409a 	movw	r0, #1178	; 0x49a
    36f6:	f3af 8000 	nop.w
    36fa:	4638      	mov	r0, r7
    36fc:	46c3      	mov	fp, r8
    36fe:	ea10 0f0a 	tst.w	r0, sl
    3702:	bf18      	it	ne
    3704:	46bb      	movne	fp, r7
    3706:	2800      	cmp	r0, #0
    3708:	d04f      	beq.n	37aa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ee>
    370a:	b124      	cbz	r4, 3716 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15a>
    370c:	2100      	movs	r1, #0
    370e:	f240 70c4 	movw	r0, #1988	; 0x7c4
    3712:	f3af 8000 	nop.w
    3716:	4632      	mov	r2, r6
    3718:	2001      	movs	r0, #1
    371a:	990c      	ldr	r1, [sp, #48]	; 0x30
    371c:	f7ff f8d6 	bl	28cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8cc>
    3720:	b124      	cbz	r4, 372c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    3722:	2100      	movs	r1, #0
    3724:	f240 70cd 	movw	r0, #1997	; 0x7cd
    3728:	f3af 8000 	nop.w
    372c:	483c      	ldr	r0, [pc, #240]	; (3820 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x264>)
    372e:	2800      	cmp	r0, #0
    3730:	bf18      	it	ne
    3732:	f3af 8000 	nopne.w
    3736:	f3ef 8010 	mrs	r0, PRIMASK
    373a:	b672      	cpsid	i
    373c:	9007      	str	r0, [sp, #28]
    373e:	b124      	cbz	r4, 374a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    3740:	2100      	movs	r1, #0
    3742:	f240 70d2 	movw	r0, #2002	; 0x7d2
    3746:	f3af 8000 	nop.w
    374a:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    374e:	f88d 0008 	strb.w	r0, [sp, #8]
    3752:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3756:	b138      	cbz	r0, 3768 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    3758:	2c00      	cmp	r4, #0
    375a:	bf1c      	itt	ne
    375c:	2100      	movne	r1, #0
    375e:	f240 70d6 	movwne	r0, #2006	; 0x7d6
    3762:	f43f af3d 	beq.w	35e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    3766:	e781      	b.n	366c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    3768:	f1bb 0f00 	cmp.w	fp, #0
    376c:	d00a      	beq.n	3784 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c8>
    376e:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    3772:	2820      	cmp	r0, #32
    3774:	d106      	bne.n	3784 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c8>
    3776:	4632      	mov	r2, r6
    3778:	2102      	movs	r1, #2
    377a:	9808      	ldr	r0, [sp, #32]
    377c:	f7ff f8d8 	bl	2930 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x930>
    3780:	9006      	str	r0, [sp, #24]
    3782:	b1f8      	cbz	r0, 37c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>
    3784:	b124      	cbz	r4, 3790 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    3786:	2100      	movs	r1, #0
    3788:	f240 70ea 	movw	r0, #2026	; 0x7ea
    378c:	f3af 8000 	nop.w
    3790:	e000      	b.n	3794 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d8>
    3792:	e00a      	b.n	37aa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ee>
    3794:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    3798:	ea27 0000 	bic.w	r0, r7, r0
    379c:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    37a0:	20ff      	movs	r0, #255	; 0xff
    37a2:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    37a6:	2001      	movs	r0, #1
    37a8:	9009      	str	r0, [sp, #36]	; 0x24
    37aa:	b124      	cbz	r4, 37b6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fa>
    37ac:	2100      	movs	r1, #0
    37ae:	f240 70f3 	movw	r0, #2035	; 0x7f3
    37b2:	f3af 8000 	nop.w
    37b6:	9806      	ldr	r0, [sp, #24]
    37b8:	4e1a      	ldr	r6, [pc, #104]	; (3824 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x268>)
    37ba:	2802      	cmp	r0, #2
    37bc:	d009      	beq.n	37d2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x216>
    37be:	2801      	cmp	r0, #1
    37c0:	d00f      	beq.n	37e2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    37c2:	e013      	b.n	37ec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    37c4:	b194      	cbz	r4, 37ec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    37c6:	2100      	movs	r1, #0
    37c8:	f240 70e5 	movw	r0, #2021	; 0x7e5
    37cc:	f3af 8000 	nop.w
    37d0:	e7ec      	b.n	37ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    37d2:	68a9      	ldr	r1, [r5, #8]
    37d4:	9808      	ldr	r0, [sp, #32]
    37d6:	1a08      	subs	r0, r1, r0
    37d8:	f00a f802 	bl	d7e0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    37dc:	6871      	ldr	r1, [r6, #4]
    37de:	b921      	cbnz	r1, 37ea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22e>
    37e0:	e004      	b.n	37ec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    37e2:	6871      	ldr	r1, [r6, #4]
    37e4:	f04f 30ff 	mov.w	r0, #4294967295
    37e8:	b101      	cbz	r1, 37ec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    37ea:	4788      	blx	r1
    37ec:	9807      	ldr	r0, [sp, #28]
    37ee:	b148      	cbz	r0, 3804 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x248>
    37f0:	b124      	cbz	r4, 37fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    37f2:	2100      	movs	r1, #0
    37f4:	f640 0007 	movw	r0, #2055	; 0x807
    37f8:	f3af 8000 	nop.w
    37fc:	9809      	ldr	r0, [sp, #36]	; 0x24
    37fe:	b00d      	add	sp, #52	; 0x34
    3800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3804:	4805      	ldr	r0, [pc, #20]	; (381c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    3806:	2800      	cmp	r0, #0
    3808:	bf18      	it	ne
    380a:	f3af 8000 	nopne.w
    380e:	b662      	cpsie	i
    3810:	e7ee      	b.n	37f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>
    3812:	0000      	.short	0x0000
    3814:	200012c4 	.word	0x200012c4
	...
    3824:	2000003c 	.word	0x2000003c

00003828 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    3828:	2820      	cmp	r0, #32
    382a:	bf24      	itt	cs
    382c:	2000      	movcs	r0, #0
    382e:	4770      	bxcs	lr
    3830:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3834:	4b03      	ldr	r3, [pc, #12]	; (3844 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    3836:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    383a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    383e:	6042      	str	r2, [r0, #4]
    3840:	2001      	movs	r0, #1
    3842:	4770      	bx	lr
    3844:	20000ec4 	.word	0x20000ec4

00003848 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    3848:	b510      	push	{r4, lr}
    384a:	2820      	cmp	r0, #32
    384c:	d211      	bcs.n	3872 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    384e:	490e      	ldr	r1, [pc, #56]	; (3888 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    3850:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    3854:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    3858:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    385c:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    3860:	b13b      	cbz	r3, 3872 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    3862:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    3866:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    386a:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    386e:	2a01      	cmp	r2, #1
    3870:	d001      	beq.n	3876 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    3872:	2000      	movs	r0, #0
    3874:	bd10      	pop	{r4, pc}
    3876:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    387a:	4601      	mov	r1, r0
    387c:	2000      	movs	r0, #0
    387e:	f7ff f825 	bl	28cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8cc>
    3882:	2001      	movs	r0, #1
    3884:	bd10      	pop	{r4, pc}
    3886:	0000      	.short	0x0000
    3888:	200012c4 	.word	0x200012c4

0000388c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    388c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3890:	4e86      	ldr	r6, [pc, #536]	; (3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>)
    3892:	4680      	mov	r8, r0
    3894:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    3898:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    389c:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    38a0:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    38a4:	2800      	cmp	r0, #0
    38a6:	d071      	beq.n	398c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    38a8:	f896 902c 	ldrb.w	r9, [r6, #44]	; 0x2c
    38ac:	4d80      	ldr	r5, [pc, #512]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
    38ae:	b125      	cbz	r5, 38ba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    38b0:	2100      	movs	r1, #0
    38b2:	f640 3076 	movw	r0, #2934	; 0xb76
    38b6:	f3af 8000 	nop.w
    38ba:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    38be:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    38c2:	2801      	cmp	r0, #1
    38c4:	d018      	beq.n	38f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    38c6:	b2c0      	uxtb	r0, r0
    38c8:	2804      	cmp	r0, #4
    38ca:	bf1c      	itt	ne
    38cc:	2805      	cmpne	r0, #5
    38ce:	2806      	cmpne	r0, #6
    38d0:	d061      	beq.n	3996 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    38d2:	b12d      	cbz	r5, 38e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    38d4:	f04f 0100 	mov.w	r1, #0
    38d8:	f640 3082 	movw	r0, #2946	; 0xb82
    38dc:	f3af 8000 	nop.w
    38e0:	f001 fcd0 	bl	5284 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    38e4:	b125      	cbz	r5, 38f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    38e6:	2100      	movs	r1, #0
    38e8:	f640 3086 	movw	r0, #2950	; 0xb86
    38ec:	f3af 8000 	nop.w
    38f0:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    38f4:	2801      	cmp	r0, #1
    38f6:	d1e6      	bne.n	38c6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    38f8:	2401      	movs	r4, #1
    38fa:	b125      	cbz	r5, 3906 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    38fc:	2100      	movs	r1, #0
    38fe:	f640 308d 	movw	r0, #2957	; 0xb8d
    3902:	f3af 8000 	nop.w
    3906:	2c00      	cmp	r4, #0
    3908:	d04b      	beq.n	39a2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    390a:	2000      	movs	r0, #0
    390c:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    3910:	b125      	cbz	r5, 391c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    3912:	2100      	movs	r1, #0
    3914:	f640 3092 	movw	r0, #2962	; 0xb92
    3918:	f3af 8000 	nop.w
    391c:	f896 b02c 	ldrb.w	fp, [r6, #44]	; 0x2c
    3920:	2001      	movs	r0, #1
    3922:	ea20 090b 	bic.w	r9, r0, fp
    3926:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    392a:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    392e:	2240      	movs	r2, #64	; 0x40
    3930:	f00a f8b0 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3934:	b125      	cbz	r5, 3940 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    3936:	2100      	movs	r1, #0
    3938:	f240 502f 	movw	r0, #1327	; 0x52f
    393c:	f3af 8000 	nop.w
    3940:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    3944:	eb00 0a06 	add.w	sl, r0, r6
    3948:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    394c:	4430      	add	r0, r6
    394e:	8c01      	ldrh	r1, [r0, #32]
    3950:	f8aa 1020 	strh.w	r1, [sl, #32]
    3954:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    3958:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    395c:	b125      	cbz	r5, 3968 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    395e:	2100      	movs	r1, #0
    3960:	f240 5033 	movw	r0, #1331	; 0x533
    3964:	f3af 8000 	nop.w
    3968:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    396c:	f88d 0000 	strb.w	r0, [sp]
    3970:	f89d 0000 	ldrb.w	r0, [sp]
    3974:	b1e0      	cbz	r0, 39b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    3976:	2d00      	cmp	r5, #0
    3978:	bf1c      	itt	ne
    397a:	2100      	movne	r1, #0
    397c:	f640 3098 	movwne	r0, #2968	; 0xb98
    3980:	d0bb      	beq.n	38fa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3982:	bf00      	nop
    3984:	f3af 8000 	nop.w
    3988:	e7b7      	b.n	38fa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    398a:	e7ff      	b.n	398c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    398c:	f640 316d 	movw	r1, #2925	; 0xb6d
    3990:	2070      	movs	r0, #112	; 0x70
    3992:	f001 fb4d 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3996:	464a      	mov	r2, r9
    3998:	4641      	mov	r1, r8
    399a:	2001      	movs	r0, #1
    399c:	f7fe ff96 	bl	28cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8cc>
    39a0:	e7a0      	b.n	38e4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    39a2:	4844      	ldr	r0, [pc, #272]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    39a4:	2800      	cmp	r0, #0
    39a6:	bf18      	it	ne
    39a8:	f3af 8000 	nopne.w
    39ac:	b662      	cpsie	i
    39ae:	e7ac      	b.n	390a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    39b0:	b125      	cbz	r5, 39bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    39b2:	2100      	movs	r1, #0
    39b4:	f640 309c 	movw	r0, #2972	; 0xb9c
    39b8:	f3af 8000 	nop.w
    39bc:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    39c0:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    39c4:	4640      	mov	r0, r8
    39c6:	461c      	mov	r4, r3
    39c8:	f04f 0b20 	mov.w	fp, #32
    39cc:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    39d0:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    39d4:	e004      	b.n	39e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    39d6:	46a3      	mov	fp, r4
    39d8:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    39dc:	f89c 4001 	ldrb.w	r4, [ip, #1]
    39e0:	4284      	cmp	r4, r0
    39e2:	d002      	beq.n	39ea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    39e4:	2c20      	cmp	r4, #32
    39e6:	d02b      	beq.n	3a40 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    39e8:	e7f5      	b.n	39d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    39ea:	2c20      	cmp	r4, #32
    39ec:	d028      	beq.n	3a40 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    39ee:	42a3      	cmp	r3, r4
    39f0:	d104      	bne.n	39fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    39f2:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    39f6:	7840      	ldrb	r0, [r0, #1]
    39f8:	7008      	strb	r0, [r1, #0]
    39fa:	e005      	b.n	3a08 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    39fc:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    3a00:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    3a04:	7840      	ldrb	r0, [r0, #1]
    3a06:	7048      	strb	r0, [r1, #1]
    3a08:	f1ba 0f00 	cmp.w	sl, #0
    3a0c:	d011      	beq.n	3a32 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    3a0e:	b125      	cbz	r5, 3a1a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    3a10:	2100      	movs	r1, #0
    3a12:	f240 4092 	movw	r0, #1170	; 0x492
    3a16:	f3af 8000 	nop.w
    3a1a:	f89a 0000 	ldrb.w	r0, [sl]
    3a1e:	42a0      	cmp	r0, r4
    3a20:	d107      	bne.n	3a32 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    3a22:	b125      	cbz	r5, 3a2e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    3a24:	2100      	movs	r1, #0
    3a26:	f240 4095 	movw	r0, #1173	; 0x495
    3a2a:	f3af 8000 	nop.w
    3a2e:	f88a b000 	strb.w	fp, [sl]
    3a32:	b15d      	cbz	r5, 3a4c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    3a34:	2100      	movs	r1, #0
    3a36:	f240 409a 	movw	r0, #1178	; 0x49a
    3a3a:	f3af 8000 	nop.w
    3a3e:	e000      	b.n	3a42 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    3a40:	b125      	cbz	r5, 3a4c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    3a42:	2100      	movs	r1, #0
    3a44:	f44f 603a 	mov.w	r0, #2976	; 0xba0
    3a48:	f3af 8000 	nop.w
    3a4c:	481a      	ldr	r0, [pc, #104]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3a4e:	2800      	cmp	r0, #0
    3a50:	bf18      	it	ne
    3a52:	f3af 8000 	nopne.w
    3a56:	f3ef 8410 	mrs	r4, PRIMASK
    3a5a:	b672      	cpsid	i
    3a5c:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    3a60:	f88d 0000 	strb.w	r0, [sp]
    3a64:	f89d 0000 	ldrb.w	r0, [sp]
    3a68:	b138      	cbz	r0, 3a7a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    3a6a:	2d00      	cmp	r5, #0
    3a6c:	bf1c      	itt	ne
    3a6e:	2100      	movne	r1, #0
    3a70:	f640 30a6 	movwne	r0, #2982	; 0xba6
    3a74:	f43f af41 	beq.w	38fa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3a78:	e784      	b.n	3984 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    3a7a:	f886 902c 	strb.w	r9, [r6, #44]	; 0x2c
    3a7e:	20ff      	movs	r0, #255	; 0xff
    3a80:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    3a84:	b154      	cbz	r4, 3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
    3a86:	2d00      	cmp	r5, #0
    3a88:	bf08      	it	eq
    3a8a:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a8e:	2100      	movs	r1, #0
    3a90:	f640 30b3 	movw	r0, #2995	; 0xbb3
    3a94:	f3af 8000 	nop.w
    3a98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a9c:	4805      	ldr	r0, [pc, #20]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    3a9e:	2800      	cmp	r0, #0
    3aa0:	bf18      	it	ne
    3aa2:	f3af 8000 	nopne.w
    3aa6:	b662      	cpsie	i
    3aa8:	e7ed      	b.n	3a86 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    3aaa:	0000      	.short	0x0000
    3aac:	200012c4 	.word	0x200012c4
	...

00003abc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    3abc:	b570      	push	{r4, r5, r6, lr}
    3abe:	460d      	mov	r5, r1
    3ac0:	4606      	mov	r6, r0
    3ac2:	f001 fa2b 	bl	4f1c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3ac6:	480f      	ldr	r0, [pc, #60]	; (3b04 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    3ac8:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
    3acc:	2400      	movs	r4, #0
    3ace:	3880      	subs	r0, #128	; 0x80
    3ad0:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    3ad4:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    3ad8:	b129      	cbz	r1, 3ae6 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    3ada:	1c61      	adds	r1, r4, #1
    3adc:	b2cc      	uxtb	r4, r1
    3ade:	2c20      	cmp	r4, #32
    3ae0:	d3f8      	bcc.n	3ad4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    3ae2:	2020      	movs	r0, #32
    3ae4:	bd70      	pop	{r4, r5, r6, pc}
    3ae6:	4808      	ldr	r0, [pc, #32]	; (3b08 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    3ae8:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    3aec:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    3af0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    3af4:	4621      	mov	r1, r4
    3af6:	6045      	str	r5, [r0, #4]
    3af8:	2001      	movs	r0, #1
    3afa:	f7fe fee7 	bl	28cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8cc>
    3afe:	4620      	mov	r0, r4
    3b00:	bd70      	pop	{r4, r5, r6, pc}
    3b02:	0000      	.short	0x0000
    3b04:	200012c4 	.word	0x200012c4
    3b08:	20000ec4 	.word	0x20000ec4

00003b0c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    3b0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b10:	f000 fb70 	bl	41f4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    3b14:	4605      	mov	r5, r0
    3b16:	f000 fe3f 	bl	4798 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    3b1a:	4c60      	ldr	r4, [pc, #384]	; (3c9c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x190>)
    3b1c:	6860      	ldr	r0, [r4, #4]
    3b1e:	f1b0 3fff 	cmp.w	r0, #4294967295
    3b22:	bf1c      	itt	ne
    3b24:	f04f 30ff 	movne.w	r0, #4294967295
    3b28:	6060      	strne	r0, [r4, #4]
    3b2a:	7fa0      	ldrb	r0, [r4, #30]
    3b2c:	4f5c      	ldr	r7, [pc, #368]	; (3ca0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>)
    3b2e:	b990      	cbnz	r0, 3b56 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4a>
    3b30:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    3b34:	1a40      	subs	r0, r0, r1
    3b36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3b3a:	f44f 710c 	mov.w	r1, #560	; 0x230
    3b3e:	f009 fe7a 	bl	d836 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    3b42:	68e1      	ldr	r1, [r4, #12]
    3b44:	4408      	add	r0, r1
    3b46:	1a28      	subs	r0, r5, r0
    3b48:	0200      	lsls	r0, r0, #8
    3b4a:	17c1      	asrs	r1, r0, #31
    3b4c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    3b50:	1200      	asrs	r0, r0, #8
    3b52:	0fc0      	lsrs	r0, r0, #31
    3b54:	d012      	beq.n	3b7c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x70>
    3b56:	7e60      	ldrb	r0, [r4, #25]
    3b58:	b320      	cbz	r0, 3ba4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    3b5a:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    3b5e:	f88d 0000 	strb.w	r0, [sp]
    3b62:	f89d 0000 	ldrb.w	r0, [sp]
    3b66:	b1e8      	cbz	r0, 3ba4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    3b68:	f000 fc72 	bl	4450 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    3b6c:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    3b70:	b1f0      	cbz	r0, 3bb0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    3b72:	f240 31d5 	movw	r1, #981	; 0x3d5
    3b76:	2070      	movs	r0, #112	; 0x70
    3b78:	f001 fa5a 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b7c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3b80:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    3b84:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3b88:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    3b8c:	6840      	ldr	r0, [r0, #4]
    3b8e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3b92:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
    3b96:	2108      	movs	r1, #8
    3b98:	4790      	blx	r2
    3b9a:	f240 31bd 	movw	r1, #957	; 0x3bd
    3b9e:	2070      	movs	r0, #112	; 0x70
    3ba0:	f001 fa46 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ba4:	1ce8      	adds	r0, r5, #3
    3ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3baa:	f000 fb49 	bl	4240 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3bae:	e7dd      	b.n	3b6c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x60>
    3bb0:	2001      	movs	r0, #1
    3bb2:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    3bb6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3bba:	2820      	cmp	r0, #32
    3bbc:	d021      	beq.n	3c02 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf6>
    3bbe:	f894 902d 	ldrb.w	r9, [r4, #45]	; 0x2d
    3bc2:	2020      	movs	r0, #32
    3bc4:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    3bc8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3bcc:	2600      	movs	r6, #0
    3bce:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    3bd2:	f884 6027 	strb.w	r6, [r4, #39]	; 0x27
    3bd6:	6026      	str	r6, [r4, #0]
    3bd8:	f000 feb8 	bl	494c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    3bdc:	7720      	strb	r0, [r4, #28]
    3bde:	f894 802c 	ldrb.w	r8, [r4, #44]	; 0x2c
    3be2:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    3be6:	eb00 0a04 	add.w	sl, r0, r4
    3bea:	f89a 0020 	ldrb.w	r0, [sl, #32]
    3bee:	2820      	cmp	r0, #32
    3bf0:	d012      	beq.n	3c18 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    3bf2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3bf6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    3bfa:	7e81      	ldrb	r1, [r0, #26]
    3bfc:	2901      	cmp	r1, #1
    3bfe:	d005      	beq.n	3c0c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x100>
    3c00:	e00a      	b.n	3c18 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    3c02:	f44f 7176 	mov.w	r1, #984	; 0x3d8
    3c06:	2070      	movs	r0, #112	; 0x70
    3c08:	f001 fa12 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c0c:	f100 0208 	add.w	r2, r0, #8
    3c10:	2101      	movs	r1, #1
    3c12:	4628      	mov	r0, r5
    3c14:	f7fe f9d2 	bl	1fbc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x270>
    3c18:	4642      	mov	r2, r8
    3c1a:	2101      	movs	r1, #1
    3c1c:	4628      	mov	r0, r5
    3c1e:	f7fe fe87 	bl	2930 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x930>
    3c22:	0007      	movs	r7, r0
    3c24:	d0f8      	beq.n	3c18 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    3c26:	481f      	ldr	r0, [pc, #124]	; (3ca4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x198>)
    3c28:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    3c2c:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    3c30:	2802      	cmp	r0, #2
    3c32:	d104      	bne.n	3c3e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x132>
    3c34:	4642      	mov	r2, r8
    3c36:	4649      	mov	r1, r9
    3c38:	2006      	movs	r0, #6
    3c3a:	f7fe fe47 	bl	28cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8cc>
    3c3e:	20ff      	movs	r0, #255	; 0xff
    3c40:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    3c44:	f89a 0021 	ldrb.w	r0, [sl, #33]	; 0x21
    3c48:	f8df 805c 	ldr.w	r8, [pc, #92]	; 3ca8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19c>
    3c4c:	2820      	cmp	r0, #32
    3c4e:	bf1c      	itt	ne
    3c50:	f898 0001 	ldrbne.w	r0, [r8, #1]
    3c54:	f001 fac0 	blne	51d8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    3c58:	7f20      	ldrb	r0, [r4, #28]
    3c5a:	b118      	cbz	r0, 3c64 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x158>
    3c5c:	f000 fe52 	bl	4904 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    3c60:	7726      	strb	r6, [r4, #28]
    3c62:	7766      	strb	r6, [r4, #29]
    3c64:	2f02      	cmp	r7, #2
    3c66:	d00f      	beq.n	3c88 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x17c>
    3c68:	2f01      	cmp	r7, #1
    3c6a:	bf18      	it	ne
    3c6c:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c70:	f04f 30ff 	mov.w	r0, #4294967295
    3c74:	f8d8 1004 	ldr.w	r1, [r8, #4]
    3c78:	2900      	cmp	r1, #0
    3c7a:	bf08      	it	eq
    3c7c:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c80:	b001      	add	sp, #4
    3c82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c86:	4708      	bx	r1
    3c88:	68a0      	ldr	r0, [r4, #8]
    3c8a:	1b40      	subs	r0, r0, r5
    3c8c:	f009 fda8 	bl	d7e0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3c90:	f8d8 1004 	ldr.w	r1, [r8, #4]
    3c94:	2900      	cmp	r1, #0
    3c96:	d1f3      	bne.n	3c80 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x174>
    3c98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c9c:	200012c4 	.word	0x200012c4
    3ca0:	20000ec4 	.word	0x20000ec4
    3ca4:	20001244 	.word	0x20001244
    3ca8:	2000003c 	.word	0x2000003c

00003cac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    3cac:	b530      	push	{r4, r5, lr}
    3cae:	4c36      	ldr	r4, [pc, #216]	; (3d88 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    3cb0:	4605      	mov	r5, r0
    3cb2:	b083      	sub	sp, #12
    3cb4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3cb8:	2820      	cmp	r0, #32
    3cba:	d008      	beq.n	3cce <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    3cbc:	6860      	ldr	r0, [r4, #4]
    3cbe:	f1b0 3fff 	cmp.w	r0, #4294967295
    3cc2:	d009      	beq.n	3cd8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    3cc4:	f640 21a1 	movw	r1, #2721	; 0xaa1
    3cc8:	2070      	movs	r0, #112	; 0x70
    3cca:	f001 f9b1 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3cce:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
    3cd2:	2070      	movs	r0, #112	; 0x70
    3cd4:	f001 f9ac 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3cd8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3cdc:	492b      	ldr	r1, [pc, #172]	; (3d8c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe0>)
    3cde:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3ce2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3ce6:	3008      	adds	r0, #8
    3ce8:	f7fe fdb6 	bl	2858 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x858>
    3cec:	4601      	mov	r1, r0
    3cee:	4a28      	ldr	r2, [pc, #160]	; (3d90 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe4>)
    3cf0:	4428      	add	r0, r5
    3cf2:	4291      	cmp	r1, r2
    3cf4:	d904      	bls.n	3d00 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x54>
    3cf6:	f240 516f 	movw	r1, #1391	; 0x56f
    3cfa:	2070      	movs	r0, #112	; 0x70
    3cfc:	f001 f998 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d00:	4924      	ldr	r1, [pc, #144]	; (3d94 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe8>)
    3d02:	428d      	cmp	r5, r1
    3d04:	dd04      	ble.n	3d10 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x64>
    3d06:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    3d0a:	2070      	movs	r0, #112	; 0x70
    3d0c:	f001 f990 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d10:	4921      	ldr	r1, [pc, #132]	; (3d98 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xec>)
    3d12:	428d      	cmp	r5, r1
    3d14:	da04      	bge.n	3d20 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x74>
    3d16:	f240 5171 	movw	r1, #1393	; 0x571
    3d1a:	2070      	movs	r0, #112	; 0x70
    3d1c:	f001 f988 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d20:	491e      	ldr	r1, [pc, #120]	; (3d9c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xf0>)
    3d22:	4281      	cmp	r1, r0
    3d24:	bfdc      	itt	le
    3d26:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    3d2a:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    3d2e:	dd05      	ble.n	3d3c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    3d30:	2800      	cmp	r0, #0
    3d32:	bfbc      	itt	lt
    3d34:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    3d38:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    3d3c:	aa01      	add	r2, sp, #4
    3d3e:	4669      	mov	r1, sp
    3d40:	f000 f8ee 	bl	3f20 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    3d44:	f89d 0004 	ldrb.w	r0, [sp, #4]
    3d48:	280f      	cmp	r0, #15
    3d4a:	bf8c      	ite	hi
    3d4c:	2001      	movhi	r0, #1
    3d4e:	2000      	movls	r0, #0
    3d50:	9900      	ldr	r1, [sp, #0]
    3d52:	4408      	add	r0, r1
    3d54:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    3d58:	6061      	str	r1, [r4, #4]
    3d5a:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    3d5e:	f88d 0000 	strb.w	r0, [sp]
    3d62:	f89d 0000 	ldrb.w	r0, [sp]
    3d66:	2800      	cmp	r0, #0
    3d68:	bf04      	itt	eq
    3d6a:	b003      	addeq	sp, #12
    3d6c:	bd30      	popeq	{r4, r5, pc}
    3d6e:	2005      	movs	r0, #5
    3d70:	f000 fbec 	bl	454c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    3d74:	2800      	cmp	r0, #0
    3d76:	bf1c      	itt	ne
    3d78:	b003      	addne	sp, #12
    3d7a:	bd30      	popne	{r4, r5, pc}
    3d7c:	f640 21a8 	movw	r1, #2728	; 0xaa8
    3d80:	2070      	movs	r0, #112	; 0x70
    3d82:	f001 f955 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d86:	0000      	.short	0x0000
    3d88:	200012c4 	.word	0x200012c4
    3d8c:	20000ec4 	.word	0x20000ec4
    3d90:	1e847fff 	.word	0x1e847fff
    3d94:	0f424000 	.word	0x0f424000
    3d98:	f0bdc000 	.word	0xf0bdc000
    3d9c:	1e848000 	.word	0x1e848000

00003da0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    3da0:	b570      	push	{r4, r5, r6, lr}
    3da2:	4c1c      	ldr	r4, [pc, #112]	; (3e14 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    3da4:	2120      	movs	r1, #32
    3da6:	f884 1020 	strb.w	r1, [r4, #32]
    3daa:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    3dae:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    3db2:	2000      	movs	r0, #0
    3db4:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    3db8:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
    3dbc:	1e42      	subs	r2, r0, #1
    3dbe:	e9c4 0200 	strd	r0, r2, [r4]
    3dc2:	77a0      	strb	r0, [r4, #30]
    3dc4:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    3dc8:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    3dcc:	7720      	strb	r0, [r4, #28]
    3dce:	7760      	strb	r0, [r4, #29]
    3dd0:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    3dd4:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    3dd8:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    3ddc:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    3de0:	2210      	movs	r2, #16
    3de2:	7088      	strb	r0, [r1, #2]
    3de4:	f801 0f04 	strb.w	r0, [r1, #4]!
    3de8:	1e52      	subs	r2, r2, #1
    3dea:	d1fa      	bne.n	3de2 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x42>
    3dec:	f000 fdb8 	bl	4960 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    3df0:	4d09      	ldr	r5, [pc, #36]	; (3e18 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    3df2:	2601      	movs	r6, #1
    3df4:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    3df8:	20ff      	movs	r0, #255	; 0xff
    3dfa:	7028      	strb	r0, [r5, #0]
    3dfc:	4807      	ldr	r0, [pc, #28]	; (3e1c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    3dfe:	f001 f9cd 	bl	519c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3e02:	7068      	strb	r0, [r5, #1]
    3e04:	f001 fa28 	bl	5258 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    3e08:	60a8      	str	r0, [r5, #8]
    3e0a:	f000 fd33 	bl	4874 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    3e0e:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    3e12:	bd70      	pop	{r4, r5, r6, pc}
    3e14:	200012c4 	.word	0x200012c4
    3e18:	2000003c 	.word	0x2000003c
    3e1c:	00002781 	.word	0x00002781

00003e20 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    3e20:	b500      	push	{lr}
    3e22:	b083      	sub	sp, #12
    3e24:	4668      	mov	r0, sp
    3e26:	f000 f9eb 	bl	4200 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    3e2a:	9800      	ldr	r0, [sp, #0]
    3e2c:	f009 fcd8 	bl	d7e0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3e30:	9a01      	ldr	r2, [sp, #4]
    3e32:	4b03      	ldr	r3, [pc, #12]	; (3e40 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    3e34:	2100      	movs	r1, #0
    3e36:	fbe2 0103 	umlal	r0, r1, r2, r3
    3e3a:	b003      	add	sp, #12
    3e3c:	bd00      	pop	{pc}
    3e3e:	0000      	.short	0x0000
    3e40:	1e848000 	.word	0x1e848000

00003e44 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    3e44:	b570      	push	{r4, r5, r6, lr}
    3e46:	4606      	mov	r6, r0
    3e48:	b082      	sub	sp, #8
    3e4a:	461d      	mov	r5, r3
    3e4c:	4610      	mov	r0, r2
    3e4e:	f009 fcc7 	bl	d7e0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3e52:	4604      	mov	r4, r0
    3e54:	4668      	mov	r0, sp
    3e56:	f000 f9d3 	bl	4200 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    3e5a:	4920      	ldr	r1, [pc, #128]	; (3edc <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x98>)
    3e5c:	9801      	ldr	r0, [sp, #4]
    3e5e:	fba0 0201 	umull	r0, r2, r0, r1
    3e62:	1a30      	subs	r0, r6, r0
    3e64:	bf44      	itt	mi
    3e66:	f5a0 00f7 	submi.w	r0, r0, #8093696	; 0x7b8000
    3e6a:	f110 50f8 	addsmi.w	r0, r0, #520093696	; 0x1f000000
    3e6e:	d504      	bpl.n	3e7a <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x36>
    3e70:	f640 31c8 	movw	r1, #3016	; 0xbc8
    3e74:	2070      	movs	r0, #112	; 0x70
    3e76:	f001 f8db 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3e7a:	4288      	cmp	r0, r1
    3e7c:	db04      	blt.n	3e88 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x44>
    3e7e:	f640 31c9 	movw	r1, #3017	; 0xbc9
    3e82:	2070      	movs	r0, #112	; 0x70
    3e84:	f001 f8d4 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3e88:	4a15      	ldr	r2, [pc, #84]	; (3ee0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>)
    3e8a:	1a21      	subs	r1, r4, r0
    3e8c:	2300      	movs	r3, #0
    3e8e:	1a8a      	subs	r2, r1, r2
    3e90:	f173 0200 	sbcs.w	r2, r3, #0
    3e94:	d318      	bcc.n	3ec8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    3e96:	f8df c048 	ldr.w	ip, [pc, #72]	; 3ee0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>
    3e9a:	1b02      	subs	r2, r0, r4
    3e9c:	ebb2 0c0c 	subs.w	ip, r2, ip
    3ea0:	f173 0300 	sbcs.w	r3, r3, #0
    3ea4:	d310      	bcc.n	3ec8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    3ea6:	4b0f      	ldr	r3, [pc, #60]	; (3ee4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0xa0>)
    3ea8:	428b      	cmp	r3, r1
    3eaa:	bf3e      	ittt	cc
    3eac:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    3eb0:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    3eb4:	1901      	addcc	r1, r0, r4
    3eb6:	d307      	bcc.n	3ec8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    3eb8:	4293      	cmp	r3, r2
    3eba:	d20a      	bcs.n	3ed2 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x8e>
    3ebc:	f5c4 2190 	rsb	r1, r4, #294912	; 0x48000
    3ec0:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    3ec4:	4408      	add	r0, r1
    3ec6:	4241      	negs	r1, r0
    3ec8:	f101 000f 	add.w	r0, r1, #15
    3ecc:	b002      	add	sp, #8
    3ece:	1a28      	subs	r0, r5, r0
    3ed0:	bd70      	pop	{r4, r5, r6, pc}
    3ed2:	f640 21c2 	movw	r1, #2754	; 0xac2
    3ed6:	2070      	movs	r0, #112	; 0x70
    3ed8:	f001 f8aa 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3edc:	1e848000 	.word	0x1e848000
    3ee0:	0f424000 	.word	0x0f424000
    3ee4:	1e847fff 	.word	0x1e847fff

00003ee8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    3ee8:	0b41      	lsrs	r1, r0, #13
    3eea:	f248 6237 	movw	r2, #34359	; 0x8637
    3eee:	4351      	muls	r1, r2
    3ef0:	0c0a      	lsrs	r2, r1, #16
    3ef2:	4b09      	ldr	r3, [pc, #36]	; (3f18 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    3ef4:	0251      	lsls	r1, r2, #9
    3ef6:	fb02 0203 	mla	r2, r2, r3, r0
    3efa:	4808      	ldr	r0, [pc, #32]	; (3f1c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    3efc:	4350      	muls	r0, r2
    3efe:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    3f02:	306e      	adds	r0, #110	; 0x6e
    3f04:	0d40      	lsrs	r0, r0, #21
    3f06:	425b      	negs	r3, r3
    3f08:	fb10 f303 	smulbb	r3, r0, r3
    3f0c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    3f10:	bf88      	it	hi
    3f12:	1c49      	addhi	r1, r1, #1
    3f14:	4408      	add	r0, r1
    3f16:	4770      	bx	lr
    3f18:	ffffc2f7 	.word	0xffffc2f7
    3f1c:	00010c6f 	.word	0x00010c6f

00003f20 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    3f20:	0b43      	lsrs	r3, r0, #13
    3f22:	f248 6c37 	movw	ip, #34359	; 0x8637
    3f26:	fb03 f30c 	mul.w	r3, r3, ip
    3f2a:	b430      	push	{r4, r5}
    3f2c:	0c1b      	lsrs	r3, r3, #16
    3f2e:	f8df c044 	ldr.w	ip, [pc, #68]	; 3f74 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    3f32:	025c      	lsls	r4, r3, #9
    3f34:	fb03 030c 	mla	r3, r3, ip, r0
    3f38:	480f      	ldr	r0, [pc, #60]	; (3f78 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    3f3a:	4358      	muls	r0, r3
    3f3c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    3f40:	eb04 000c 	add.w	r0, r4, ip
    3f44:	f643 5409 	movw	r4, #15625	; 0x3d09
    3f48:	fb1c f404 	smulbb	r4, ip, r4
    3f4c:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    3f50:	f643 5508 	movw	r5, #15624	; 0x3d08
    3f54:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    3f58:	442c      	add	r4, r5
    3f5a:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    3f5e:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    3f62:	bf84      	itt	hi
    3f64:	f04f 0c00 	movhi.w	ip, #0
    3f68:	1c40      	addhi	r0, r0, #1
    3f6a:	6008      	str	r0, [r1, #0]
    3f6c:	f882 c000 	strb.w	ip, [r2]
    3f70:	bc30      	pop	{r4, r5}
    3f72:	4770      	bx	lr
    3f74:	ffffc2f7 	.word	0xffffc2f7
    3f78:	00010c6f 	.word	0x00010c6f

00003f7c <MPSL_IRQ_RTC0_Handler>:
    3f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f80:	4d3b      	ldr	r5, [pc, #236]	; (4070 <MPSL_IRQ_RTC0_Handler+0xf4>)
    3f82:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3f86:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 4074 <MPSL_IRQ_RTC0_Handler+0xf8>
    3f8a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    3f8e:	f44f 6600 	mov.w	r6, #2048	; 0x800
    3f92:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    3f96:	f04f 0400 	mov.w	r4, #0
    3f9a:	d019      	beq.n	3fd0 <MPSL_IRQ_RTC0_Handler+0x54>
    3f9c:	4836      	ldr	r0, [pc, #216]	; (4078 <MPSL_IRQ_RTC0_Handler+0xfc>)
    3f9e:	6800      	ldr	r0, [r0, #0]
    3fa0:	b1b0      	cbz	r0, 3fd0 <MPSL_IRQ_RTC0_Handler+0x54>
    3fa2:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    3fa6:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3faa:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    3fae:	f8d8 1000 	ldr.w	r1, [r8]
    3fb2:	1a40      	subs	r0, r0, r1
    3fb4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3fb8:	2802      	cmp	r0, #2
    3fba:	d302      	bcc.n	3fc2 <MPSL_IRQ_RTC0_Handler+0x46>
    3fbc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3fc0:	d906      	bls.n	3fd0 <MPSL_IRQ_RTC0_Handler+0x54>
    3fc2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3fc6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3fca:	2004      	movs	r0, #4
    3fcc:	f7fe fe7e 	bl	2ccc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3fd0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3fd4:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3fd8:	d01a      	beq.n	4010 <MPSL_IRQ_RTC0_Handler+0x94>
    3fda:	4828      	ldr	r0, [pc, #160]	; (407c <MPSL_IRQ_RTC0_Handler+0x100>)
    3fdc:	6800      	ldr	r0, [r0, #0]
    3fde:	b1b8      	cbz	r0, 4010 <MPSL_IRQ_RTC0_Handler+0x94>
    3fe0:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    3fe4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3fe8:	4825      	ldr	r0, [pc, #148]	; (4080 <MPSL_IRQ_RTC0_Handler+0x104>)
    3fea:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3fee:	f8d8 1000 	ldr.w	r1, [r8]
    3ff2:	1a40      	subs	r0, r0, r1
    3ff4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3ff8:	2802      	cmp	r0, #2
    3ffa:	d302      	bcc.n	4002 <MPSL_IRQ_RTC0_Handler+0x86>
    3ffc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4000:	d906      	bls.n	4010 <MPSL_IRQ_RTC0_Handler+0x94>
    4002:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    4006:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    400a:	2005      	movs	r0, #5
    400c:	f7fe fe5e 	bl	2ccc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    4010:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    4014:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    4018:	d01a      	beq.n	4050 <MPSL_IRQ_RTC0_Handler+0xd4>
    401a:	481a      	ldr	r0, [pc, #104]	; (4084 <MPSL_IRQ_RTC0_Handler+0x108>)
    401c:	6800      	ldr	r0, [r0, #0]
    401e:	b1b8      	cbz	r0, 4050 <MPSL_IRQ_RTC0_Handler+0xd4>
    4020:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    4024:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    4028:	4817      	ldr	r0, [pc, #92]	; (4088 <MPSL_IRQ_RTC0_Handler+0x10c>)
    402a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    402e:	f8d8 1000 	ldr.w	r1, [r8]
    4032:	1a40      	subs	r0, r0, r1
    4034:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4038:	2802      	cmp	r0, #2
    403a:	d302      	bcc.n	4042 <MPSL_IRQ_RTC0_Handler+0xc6>
    403c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4040:	d906      	bls.n	4050 <MPSL_IRQ_RTC0_Handler+0xd4>
    4042:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    4046:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    404a:	2006      	movs	r0, #6
    404c:	f7fe fe3e 	bl	2ccc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    4050:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    4054:	2800      	cmp	r0, #0
    4056:	bf08      	it	eq
    4058:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    405c:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    4060:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    4064:	4809      	ldr	r0, [pc, #36]	; (408c <MPSL_IRQ_RTC0_Handler+0x110>)
    4066:	68c1      	ldr	r1, [r0, #12]
    4068:	1c49      	adds	r1, r1, #1
    406a:	60c1      	str	r1, [r0, #12]
    406c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4070:	4000b000 	.word	0x4000b000
    4074:	4000b504 	.word	0x4000b504
    4078:	4000b140 	.word	0x4000b140
    407c:	4000b144 	.word	0x4000b144
    4080:	4000b004 	.word	0x4000b004
    4084:	4000b148 	.word	0x4000b148
    4088:	4000b008 	.word	0x4000b008
    408c:	20000048 	.word	0x20000048

00004090 <MPSL_IRQ_TIMER0_Handler>:
    4090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4094:	4d38      	ldr	r5, [pc, #224]	; (4178 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    4096:	7828      	ldrb	r0, [r5, #0]
    4098:	2804      	cmp	r0, #4
    409a:	d068      	beq.n	416e <MPSL_IRQ_TIMER0_Handler+0xde>
    409c:	1ca8      	adds	r0, r5, #2
    409e:	2201      	movs	r2, #1
    40a0:	7801      	ldrb	r1, [r0, #0]
    40a2:	b159      	cbz	r1, 40bc <MPSL_IRQ_TIMER0_Handler+0x2c>
    40a4:	2901      	cmp	r1, #1
    40a6:	bf08      	it	eq
    40a8:	706a      	strbeq	r2, [r5, #1]
    40aa:	d002      	beq.n	40b2 <MPSL_IRQ_TIMER0_Handler+0x22>
    40ac:	7869      	ldrb	r1, [r5, #1]
    40ae:	2900      	cmp	r1, #0
    40b0:	d058      	beq.n	4164 <MPSL_IRQ_TIMER0_Handler+0xd4>
    40b2:	2102      	movs	r1, #2
    40b4:	7001      	strb	r1, [r0, #0]
    40b6:	7840      	ldrb	r0, [r0, #1]
    40b8:	f000 fafe 	bl	46b8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    40bc:	4c2f      	ldr	r4, [pc, #188]	; (417c <MPSL_IRQ_TIMER0_Handler+0xec>)
    40be:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    40c2:	f04f 0800 	mov.w	r8, #0
    40c6:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    40ca:	f44f 7780 	mov.w	r7, #256	; 0x100
    40ce:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    40d2:	d00a      	beq.n	40ea <MPSL_IRQ_TIMER0_Handler+0x5a>
    40d4:	482a      	ldr	r0, [pc, #168]	; (4180 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    40d6:	6800      	ldr	r0, [r0, #0]
    40d8:	b138      	cbz	r0, 40ea <MPSL_IRQ_TIMER0_Handler+0x5a>
    40da:	2003      	movs	r0, #3
    40dc:	f000 faec 	bl	46b8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    40e0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    40e4:	2003      	movs	r0, #3
    40e6:	f7fe fdf1 	bl	2ccc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    40ea:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    40ee:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    40f2:	d00a      	beq.n	410a <MPSL_IRQ_TIMER0_Handler+0x7a>
    40f4:	4823      	ldr	r0, [pc, #140]	; (4184 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    40f6:	6800      	ldr	r0, [r0, #0]
    40f8:	b138      	cbz	r0, 410a <MPSL_IRQ_TIMER0_Handler+0x7a>
    40fa:	2002      	movs	r0, #2
    40fc:	f000 fadc 	bl	46b8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4100:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    4104:	2002      	movs	r0, #2
    4106:	f7fe fde1 	bl	2ccc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    410a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    410e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    4112:	d00a      	beq.n	412a <MPSL_IRQ_TIMER0_Handler+0x9a>
    4114:	481c      	ldr	r0, [pc, #112]	; (4188 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    4116:	6800      	ldr	r0, [r0, #0]
    4118:	b138      	cbz	r0, 412a <MPSL_IRQ_TIMER0_Handler+0x9a>
    411a:	2001      	movs	r0, #1
    411c:	f000 facc 	bl	46b8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4120:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    4124:	2001      	movs	r0, #1
    4126:	f7fe fdd1 	bl	2ccc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    412a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    412e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    4132:	bf08      	it	eq
    4134:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    4138:	4814      	ldr	r0, [pc, #80]	; (418c <MPSL_IRQ_TIMER0_Handler+0xfc>)
    413a:	6800      	ldr	r0, [r0, #0]
    413c:	2800      	cmp	r0, #0
    413e:	bf08      	it	eq
    4140:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    4144:	2000      	movs	r0, #0
    4146:	f000 fab7 	bl	46b8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    414a:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    414e:	2004      	movs	r0, #4
    4150:	7028      	strb	r0, [r5, #0]
    4152:	f8c5 8004 	str.w	r8, [r5, #4]
    4156:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    415a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    415e:	2000      	movs	r0, #0
    4160:	f7fe bdb4 	b.w	2ccc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    4164:	f240 419f 	movw	r1, #1183	; 0x49f
    4168:	206c      	movs	r0, #108	; 0x6c
    416a:	f000 ff61 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    416e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4172:	2007      	movs	r0, #7
    4174:	f7fe bdaa 	b.w	2ccc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    4178:	20000048 	.word	0x20000048
    417c:	40008000 	.word	0x40008000
    4180:	4000814c 	.word	0x4000814c
    4184:	40008148 	.word	0x40008148
    4188:	40008144 	.word	0x40008144
    418c:	40008140 	.word	0x40008140
    4190:	2201      	movs	r2, #1
    4192:	0211      	lsls	r1, r2, #8
    4194:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4198:	2000      	movs	r0, #0
    419a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    419e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    41a2:	f3bf 8f4f 	dsb	sy
    41a6:	f3bf 8f6f 	isb	sy
    41aa:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    41ae:	490e      	ldr	r1, [pc, #56]	; (41e8 <MPSL_IRQ_TIMER0_Handler+0x158>)
    41b0:	f841 2f04 	str.w	r2, [r1, #4]!
    41b4:	1e43      	subs	r3, r0, #1
    41b6:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    41ba:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    41be:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    41c2:	4b0a      	ldr	r3, [pc, #40]	; (41ec <MPSL_IRQ_TIMER0_Handler+0x15c>)
    41c4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    41c8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    41cc:	1d1b      	adds	r3, r3, #4
    41ce:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    41d2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    41d6:	1d1b      	adds	r3, r3, #4
    41d8:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    41dc:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    41e0:	60ca      	str	r2, [r1, #12]
    41e2:	4903      	ldr	r1, [pc, #12]	; (41f0 <MPSL_IRQ_TIMER0_Handler+0x160>)
    41e4:	7048      	strb	r0, [r1, #1]
    41e6:	4770      	bx	lr
    41e8:	40008000 	.word	0x40008000
    41ec:	40008004 	.word	0x40008004
    41f0:	20000048 	.word	0x20000048

000041f4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    41f4:	4801      	ldr	r0, [pc, #4]	; (41fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    41f6:	6800      	ldr	r0, [r0, #0]
    41f8:	4770      	bx	lr
    41fa:	0000      	.short	0x0000
    41fc:	4000b504 	.word	0x4000b504

00004200 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    4200:	b430      	push	{r4, r5}
    4202:	f3ef 8c10 	mrs	ip, PRIMASK
    4206:	b672      	cpsid	i
    4208:	2500      	movs	r5, #0
    420a:	4b0b      	ldr	r3, [pc, #44]	; (4238 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    420c:	4a0b      	ldr	r2, [pc, #44]	; (423c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    420e:	bf00      	nop
    4210:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    4214:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    4218:	b12c      	cbz	r4, 4226 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    421a:	68d1      	ldr	r1, [r2, #12]
    421c:	1c49      	adds	r1, r1, #1
    421e:	60d1      	str	r1, [r2, #12]
    4220:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    4224:	e7f4      	b.n	4210 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    4226:	68d2      	ldr	r2, [r2, #12]
    4228:	f1bc 0f00 	cmp.w	ip, #0
    422c:	d100      	bne.n	4230 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    422e:	b662      	cpsie	i
    4230:	e9c0 1200 	strd	r1, r2, [r0]
    4234:	bc30      	pop	{r4, r5}
    4236:	4770      	bx	lr
    4238:	4000b000 	.word	0x4000b000
    423c:	20000048 	.word	0x20000048

00004240 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    4240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4244:	4e46      	ldr	r6, [pc, #280]	; (4360 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    4246:	4605      	mov	r5, r0
    4248:	1eb7      	subs	r7, r6, #2
    424a:	7833      	ldrb	r3, [r6, #0]
    424c:	68b9      	ldr	r1, [r7, #8]
    424e:	2b01      	cmp	r3, #1
    4250:	bf04      	itt	eq
    4252:	42a9      	cmpeq	r1, r5
    4254:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4258:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    425c:	4a41      	ldr	r2, [pc, #260]	; (4364 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    425e:	6010      	str	r0, [r2, #0]
    4260:	4a42      	ldr	r2, [pc, #264]	; (436c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    4262:	4841      	ldr	r0, [pc, #260]	; (4368 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    4264:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    4268:	f102 0c04 	add.w	ip, r2, #4
    426c:	f04f 0400 	mov.w	r4, #0
    4270:	2b00      	cmp	r3, #0
    4272:	d062      	beq.n	433a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    4274:	483e      	ldr	r0, [pc, #248]	; (4370 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    4276:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    427a:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    427e:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    4282:	bf00      	nop
    4284:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
    4288:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    428c:	f04f 0801 	mov.w	r8, #1
    4290:	2800      	cmp	r0, #0
    4292:	bf01      	itttt	eq
    4294:	f8d2 0104 	ldreq.w	r0, [r2, #260]	; 0x104
    4298:	2800      	cmpeq	r0, #0
    429a:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    429e:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    42a2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    42a6:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    42aa:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    42ae:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    42b2:	4830      	ldr	r0, [pc, #192]	; (4374 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    42b4:	f8d0 c000 	ldr.w	ip, [r0]
    42b8:	eba5 0c0c 	sub.w	ip, r5, ip
    42bc:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    42c0:	f1bc 0f02 	cmp.w	ip, #2
    42c4:	d344      	bcc.n	4350 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    42c6:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    42ca:	d841      	bhi.n	4350 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    42cc:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    42d0:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    42d4:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    42d8:	b12b      	cbz	r3, 42e6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa6>
    42da:	6802      	ldr	r2, [r0, #0]
    42dc:	1a8a      	subs	r2, r1, r2
    42de:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    42e2:	2a02      	cmp	r2, #2
    42e4:	d3f9      	bcc.n	42da <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9a>
    42e6:	f8c7 8004 	str.w	r8, [r7, #4]
    42ea:	703c      	strb	r4, [r7, #0]
    42ec:	f7ff ff50 	bl	4190 <MPSL_IRQ_TIMER0_Handler+0x100>
    42f0:	4821      	ldr	r0, [pc, #132]	; (4378 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    42f2:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    42f6:	f364 0101 	bfi	r1, r4, #0, #2
    42fa:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    42fe:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    4302:	2102      	movs	r1, #2
    4304:	f361 0201 	bfi	r2, r1, #0, #2
    4308:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    430c:	2104      	movs	r1, #4
    430e:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    4312:	f8c0 800c 	str.w	r8, [r0, #12]
    4316:	6879      	ldr	r1, [r7, #4]
    4318:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    431c:	1580      	asrs	r0, r0, #22
    431e:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    4322:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    4326:	4915      	ldr	r1, [pc, #84]	; (437c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    4328:	05c0      	lsls	r0, r0, #23
    432a:	6008      	str	r0, [r1, #0]
    432c:	2004      	movs	r0, #4
    432e:	60bd      	str	r5, [r7, #8]
    4330:	7070      	strb	r0, [r6, #1]
    4332:	f886 8000 	strb.w	r8, [r6]
    4336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    433a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    433e:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    4342:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    4346:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    434a:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    434e:	e799      	b.n	4284 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x44>
    4350:	2000      	movs	r0, #0
    4352:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    4356:	f240 2193 	movw	r1, #659	; 0x293
    435a:	206c      	movs	r0, #108	; 0x6c
    435c:	f000 fe68 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4360:	2000004a 	.word	0x2000004a
    4364:	4001f508 	.word	0x4001f508
    4368:	fffbfffd 	.word	0xfffbfffd
    436c:	4000b000 	.word	0x4000b000
    4370:	fffafffd 	.word	0xfffafffd
    4374:	4000b504 	.word	0x4000b504
    4378:	40008000 	.word	0x40008000
    437c:	4001f504 	.word	0x4001f504

00004380 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    4380:	b570      	push	{r4, r5, r6, lr}
    4382:	4c2a      	ldr	r4, [pc, #168]	; (442c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    4384:	68a1      	ldr	r1, [r4, #8]
    4386:	4281      	cmp	r1, r0
    4388:	bf14      	ite	ne
    438a:	2201      	movne	r2, #1
    438c:	2200      	moveq	r2, #0
    438e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 4430 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    4392:	f89c 5000 	ldrb.w	r5, [ip]
    4396:	2d02      	cmp	r5, #2
    4398:	d002      	beq.n	43a0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    439a:	2a00      	cmp	r2, #0
    439c:	d034      	beq.n	4408 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    439e:	e002      	b.n	43a6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    43a0:	2a00      	cmp	r2, #0
    43a2:	bf08      	it	eq
    43a4:	bd70      	popeq	{r4, r5, r6, pc}
    43a6:	7862      	ldrb	r2, [r4, #1]
    43a8:	b39a      	cbz	r2, 4412 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    43aa:	4b22      	ldr	r3, [pc, #136]	; (4434 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    43ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    43b0:	601a      	str	r2, [r3, #0]
    43b2:	4b21      	ldr	r3, [pc, #132]	; (4438 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    43b4:	1392      	asrs	r2, r2, #14
    43b6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    43ba:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    43be:	2200      	movs	r2, #0
    43c0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    43c4:	4a1d      	ldr	r2, [pc, #116]	; (443c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    43c6:	6816      	ldr	r6, [r2, #0]
    43c8:	1b86      	subs	r6, r0, r6
    43ca:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    43ce:	2e02      	cmp	r6, #2
    43d0:	d324      	bcc.n	441c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    43d2:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    43d6:	d821      	bhi.n	441c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    43d8:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    43dc:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    43e0:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    43e4:	b12d      	cbz	r5, 43f2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    43e6:	6813      	ldr	r3, [r2, #0]
    43e8:	1acb      	subs	r3, r1, r3
    43ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    43ee:	2b02      	cmp	r3, #2
    43f0:	d3f9      	bcc.n	43e6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    43f2:	4b13      	ldr	r3, [pc, #76]	; (4440 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    43f4:	2102      	movs	r1, #2
    43f6:	074a      	lsls	r2, r1, #29
    43f8:	601a      	str	r2, [r3, #0]
    43fa:	60a0      	str	r0, [r4, #8]
    43fc:	2004      	movs	r0, #4
    43fe:	f88c 0001 	strb.w	r0, [ip, #1]
    4402:	f88c 1000 	strb.w	r1, [ip]
    4406:	bd70      	pop	{r4, r5, r6, pc}
    4408:	f240 21a1 	movw	r1, #673	; 0x2a1
    440c:	206c      	movs	r0, #108	; 0x6c
    440e:	f000 fe0f 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4412:	f240 21a5 	movw	r1, #677	; 0x2a5
    4416:	206c      	movs	r0, #108	; 0x6c
    4418:	f000 fe0a 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    441c:	2000      	movs	r0, #0
    441e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    4422:	f240 21b1 	movw	r1, #689	; 0x2b1
    4426:	206c      	movs	r0, #108	; 0x6c
    4428:	f000 fe02 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    442c:	20000048 	.word	0x20000048
    4430:	2000004a 	.word	0x2000004a
    4434:	4001f508 	.word	0x4001f508
    4438:	4000b000 	.word	0x4000b000
    443c:	4000b504 	.word	0x4000b504
    4440:	4001f504 	.word	0x4001f504

00004444 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    4444:	4801      	ldr	r0, [pc, #4]	; (444c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    4446:	6880      	ldr	r0, [r0, #8]
    4448:	4770      	bx	lr
    444a:	0000      	.short	0x0000
    444c:	20000048 	.word	0x20000048

00004450 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    4450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4454:	4836      	ldr	r0, [pc, #216]	; (4530 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    4456:	4a35      	ldr	r2, [pc, #212]	; (452c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    4458:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    445c:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 4534 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    4460:	1d03      	adds	r3, r0, #4
    4462:	2100      	movs	r1, #0
    4464:	f89c 4000 	ldrb.w	r4, [ip]
    4468:	b184      	cbz	r4, 448c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    446a:	4a33      	ldr	r2, [pc, #204]	; (4538 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    446c:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    4470:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    4474:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    4478:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    447c:	2301      	movs	r3, #1
    447e:	2a00      	cmp	r2, #0
    4480:	bf04      	itt	eq
    4482:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    4486:	2800      	cmpeq	r0, #0
    4488:	d111      	bne.n	44ae <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    448a:	e00a      	b.n	44a2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    448c:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    4490:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    4494:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    4498:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    449c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    44a0:	e7ea      	b.n	4478 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    44a2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    44a6:	f44f 6000 	mov.w	r0, #2048	; 0x800
    44aa:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    44ae:	2c02      	cmp	r4, #2
    44b0:	d004      	beq.n	44bc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    44b2:	f240 21bd 	movw	r1, #701	; 0x2bd
    44b6:	206c      	movs	r0, #108	; 0x6c
    44b8:	f000 fdba 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    44bc:	4e1f      	ldr	r6, [pc, #124]	; (453c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    44be:	6830      	ldr	r0, [r6, #0]
    44c0:	4c1f      	ldr	r4, [pc, #124]	; (4540 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    44c2:	1cc0      	adds	r0, r0, #3
    44c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    44c8:	68a2      	ldr	r2, [r4, #8]
    44ca:	4d1e      	ldr	r5, [pc, #120]	; (4544 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    44cc:	4290      	cmp	r0, r2
    44ce:	d00b      	beq.n	44e8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    44d0:	6837      	ldr	r7, [r6, #0]
    44d2:	1bd7      	subs	r7, r2, r7
    44d4:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    44d8:	2f04      	cmp	r7, #4
    44da:	d305      	bcc.n	44e8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    44dc:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    44e0:	d802      	bhi.n	44e8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    44e2:	f7ff fead 	bl	4240 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    44e6:	e01b      	b.n	4520 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    44e8:	6830      	ldr	r0, [r6, #0]
    44ea:	1a10      	subs	r0, r2, r0
    44ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    44f0:	2802      	cmp	r0, #2
    44f2:	d313      	bcc.n	451c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    44f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    44f8:	d810      	bhi.n	451c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    44fa:	4a13      	ldr	r2, [pc, #76]	; (4548 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    44fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4500:	6010      	str	r0, [r2, #0]
    4502:	6063      	str	r3, [r4, #4]
    4504:	7021      	strb	r1, [r4, #0]
    4506:	606b      	str	r3, [r5, #4]
    4508:	60eb      	str	r3, [r5, #12]
    450a:	0040      	lsls	r0, r0, #1
    450c:	1f11      	subs	r1, r2, #4
    450e:	6008      	str	r0, [r1, #0]
    4510:	2004      	movs	r0, #4
    4512:	f88c 0001 	strb.w	r0, [ip, #1]
    4516:	f88c 3000 	strb.w	r3, [ip]
    451a:	e001      	b.n	4520 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    451c:	6063      	str	r3, [r4, #4]
    451e:	7021      	strb	r1, [r4, #0]
    4520:	6860      	ldr	r0, [r4, #4]
    4522:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    4526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    452a:	0000      	.short	0x0000
    452c:	fffbfffd 	.word	0xfffbfffd
    4530:	4000b000 	.word	0x4000b000
    4534:	2000004a 	.word	0x2000004a
    4538:	fffafffd 	.word	0xfffafffd
    453c:	4000b504 	.word	0x4000b504
    4540:	20000048 	.word	0x20000048
    4544:	40008000 	.word	0x40008000
    4548:	4001f508 	.word	0x4001f508

0000454c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    454c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4550:	4a54      	ldr	r2, [pc, #336]	; (46a4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    4552:	2500      	movs	r5, #0
    4554:	2401      	movs	r4, #1
    4556:	f892 c000 	ldrb.w	ip, [r2]
    455a:	7853      	ldrb	r3, [r2, #1]
    455c:	f44f 76a0 	mov.w	r6, #320	; 0x140
    4560:	2807      	cmp	r0, #7
    4562:	d27d      	bcs.n	4660 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    4564:	e8df f000 	tbb	[pc, r0]
    4568:	04040404 	.word	0x04040404
    456c:	00585858 	.word	0x00585858
    4570:	4a4d      	ldr	r2, [pc, #308]	; (46a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    4572:	6897      	ldr	r7, [r2, #8]
    4574:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    4578:	bf04      	itt	eq
    457a:	7852      	ldrbeq	r2, [r2, #1]
    457c:	2a00      	cmpeq	r2, #0
    457e:	d003      	beq.n	4588 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    4580:	f1bc 0f02 	cmp.w	ip, #2
    4584:	d005      	beq.n	4592 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    4586:	e026      	b.n	45d6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    4588:	f240 314d 	movw	r1, #845	; 0x34d
    458c:	206c      	movs	r0, #108	; 0x6c
    458e:	f000 fd4f 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4592:	1f1a      	subs	r2, r3, #4
    4594:	b2d2      	uxtb	r2, r2
    4596:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    459a:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    459e:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    45a2:	2200      	movs	r2, #0
    45a4:	f1bc 0f01 	cmp.w	ip, #1
    45a8:	d003      	beq.n	45b2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    45aa:	f1bc 0f02 	cmp.w	ip, #2
    45ae:	d008      	beq.n	45c2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    45b0:	e00e      	b.n	45d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    45b2:	2b04      	cmp	r3, #4
    45b4:	bf24      	itt	cs
    45b6:	6837      	ldrcs	r7, [r6, #0]
    45b8:	2f00      	cmpcs	r7, #0
    45ba:	bf08      	it	eq
    45bc:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    45c0:	e006      	b.n	45d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    45c2:	2b04      	cmp	r3, #4
    45c4:	bf24      	itt	cs
    45c6:	6837      	ldrcs	r7, [r6, #0]
    45c8:	2f00      	cmpcs	r7, #0
    45ca:	bf08      	it	eq
    45cc:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    45d0:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    45d4:	d1e5      	bne.n	45a2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    45d6:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 46ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    45da:	f100 0210 	add.w	r2, r0, #16
    45de:	fa04 f202 	lsl.w	r2, r4, r2
    45e2:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    45e6:	f04f 0340 	mov.w	r3, #64	; 0x40
    45ea:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    45ee:	b2db      	uxtb	r3, r3
    45f0:	4463      	add	r3, ip
    45f2:	601c      	str	r4, [r3, #0]
    45f4:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    45f8:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    45fc:	eba1 0303 	sub.w	r3, r1, r3
    4600:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    4604:	2b03      	cmp	r3, #3
    4606:	bf26      	itte	cs
    4608:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    460c:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    4610:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    4614:	d237      	bcs.n	4686 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    4616:	e03c      	b.n	4692 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    4618:	f1bc 0f00 	cmp.w	ip, #0
    461c:	d006      	beq.n	462c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    461e:	4283      	cmp	r3, r0
    4620:	d104      	bne.n	462c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    4622:	f240 316d 	movw	r1, #877	; 0x36d
    4626:	206c      	movs	r0, #108	; 0x6c
    4628:	f000 fd02 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    462c:	1f02      	subs	r2, r0, #4
    462e:	b2d3      	uxtb	r3, r2
    4630:	2b03      	cmp	r3, #3
    4632:	d304      	bcc.n	463e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    4634:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    4638:	206c      	movs	r0, #108	; 0x6c
    463a:	f000 fcf9 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    463e:	f8df c070 	ldr.w	ip, [pc, #112]	; 46b0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    4642:	f103 0210 	add.w	r2, r3, #16
    4646:	fa04 f202 	lsl.w	r2, r4, r2
    464a:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    464e:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    4652:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    4656:	f84c 5003 	str.w	r5, [ip, r3]
    465a:	4b16      	ldr	r3, [pc, #88]	; (46b4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    465c:	681b      	ldr	r3, [r3, #0]
    465e:	e000      	b.n	4662 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    4660:	e01a      	b.n	4698 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    4662:	1f00      	subs	r0, r0, #4
    4664:	1acb      	subs	r3, r1, r3
    4666:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    466a:	b2c0      	uxtb	r0, r0
    466c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    4670:	2b02      	cmp	r3, #2
    4672:	d30b      	bcc.n	468c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    4674:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    4678:	d808      	bhi.n	468c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    467a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    467e:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    4682:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    4686:	2001      	movs	r0, #1
    4688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    468c:	2100      	movs	r1, #0
    468e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    4692:	2000      	movs	r0, #0
    4694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4698:	f240 3171 	movw	r1, #881	; 0x371
    469c:	206c      	movs	r0, #108	; 0x6c
    469e:	f000 fcc7 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    46a2:	0000      	.short	0x0000
    46a4:	2000004a 	.word	0x2000004a
    46a8:	20000048 	.word	0x20000048
    46ac:	40008000 	.word	0x40008000
    46b0:	4000b000 	.word	0x4000b000
    46b4:	4000b504 	.word	0x4000b504

000046b8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    46b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    46bc:	2601      	movs	r6, #1
    46be:	2700      	movs	r7, #0
    46c0:	f44f 78a0 	mov.w	r8, #320	; 0x140
    46c4:	2807      	cmp	r0, #7
    46c6:	d251      	bcs.n	476c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    46c8:	e8df f000 	tbb	[pc, r0]
    46cc:	04040404 	.word	0x04040404
    46d0:	00191919 	.word	0x00191919
    46d4:	f100 0110 	add.w	r1, r0, #16
    46d8:	fa06 f201 	lsl.w	r2, r6, r1
    46dc:	4926      	ldr	r1, [pc, #152]	; (4778 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    46de:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    46e2:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    46e6:	2200      	movs	r2, #0
    46e8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    46ec:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    46f0:	508f      	str	r7, [r1, r2]
    46f2:	4922      	ldr	r1, [pc, #136]	; (477c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    46f4:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    46f8:	9000      	str	r0, [sp, #0]
    46fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    46fe:	4d20      	ldr	r5, [pc, #128]	; (4780 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    4700:	1f01      	subs	r1, r0, #4
    4702:	b2cc      	uxtb	r4, r1
    4704:	7829      	ldrb	r1, [r5, #0]
    4706:	b179      	cbz	r1, 4728 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    4708:	786a      	ldrb	r2, [r5, #1]
    470a:	4282      	cmp	r2, r0
    470c:	d10c      	bne.n	4728 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    470e:	4a1d      	ldr	r2, [pc, #116]	; (4784 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    4710:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    4714:	6010      	str	r0, [r2, #0]
    4716:	2901      	cmp	r1, #1
    4718:	bf08      	it	eq
    471a:	f7ff fd39 	bleq	4190 <MPSL_IRQ_TIMER0_Handler+0x100>
    471e:	702f      	strb	r7, [r5, #0]
    4720:	4919      	ldr	r1, [pc, #100]	; (4788 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    4722:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    4726:	6088      	str	r0, [r1, #8]
    4728:	4918      	ldr	r1, [pc, #96]	; (478c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    472a:	f104 0010 	add.w	r0, r4, #16
    472e:	fa06 f000 	lsl.w	r0, r6, r0
    4732:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    4736:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    473a:	00a0      	lsls	r0, r4, #2
    473c:	4408      	add	r0, r1
    473e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    4742:	4a13      	ldr	r2, [pc, #76]	; (4790 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    4744:	6812      	ldr	r2, [r2, #0]
    4746:	1a80      	subs	r0, r0, r2
    4748:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    474c:	2802      	cmp	r0, #2
    474e:	d307      	bcc.n	4760 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    4750:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    4754:	2000      	movs	r0, #0
    4756:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    475a:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    475e:	500f      	str	r7, [r1, r0]
    4760:	480c      	ldr	r0, [pc, #48]	; (4794 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    4762:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    4766:	9000      	str	r0, [sp, #0]
    4768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    476c:	f240 31f5 	movw	r1, #1013	; 0x3f5
    4770:	206c      	movs	r0, #108	; 0x6c
    4772:	f000 fc5d 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4776:	0000      	.short	0x0000
    4778:	40008000 	.word	0x40008000
    477c:	40008140 	.word	0x40008140
    4780:	2000004a 	.word	0x2000004a
    4784:	4001f508 	.word	0x4001f508
    4788:	20000048 	.word	0x20000048
    478c:	4000b000 	.word	0x4000b000
    4790:	4000b504 	.word	0x4000b504
    4794:	4000b140 	.word	0x4000b140

00004798 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    4798:	4825      	ldr	r0, [pc, #148]	; (4830 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    479a:	4a24      	ldr	r2, [pc, #144]	; (482c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    479c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    47a0:	4924      	ldr	r1, [pc, #144]	; (4834 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    47a2:	1d03      	adds	r3, r0, #4
    47a4:	f891 c000 	ldrb.w	ip, [r1]
    47a8:	2100      	movs	r1, #0
    47aa:	f1bc 0f00 	cmp.w	ip, #0
    47ae:	d010      	beq.n	47d2 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    47b0:	4a21      	ldr	r2, [pc, #132]	; (4838 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    47b2:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    47b6:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    47ba:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    47be:	bf00      	nop
    47c0:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    47c4:	2a00      	cmp	r2, #0
    47c6:	bf04      	itt	eq
    47c8:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    47cc:	2800      	cmpeq	r0, #0
    47ce:	d111      	bne.n	47f4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    47d0:	e00a      	b.n	47e8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    47d2:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    47d6:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    47da:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    47de:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    47e2:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    47e6:	e7eb      	b.n	47c0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    47e8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    47ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
    47f0:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    47f4:	4811      	ldr	r0, [pc, #68]	; (483c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    47f6:	f04f 32ff 	mov.w	r2, #4294967295
    47fa:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    47fe:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    4802:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    4806:	f100 0204 	add.w	r2, r0, #4
    480a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    480e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    4812:	f102 0204 	add.w	r2, r2, #4
    4816:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    481a:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    481e:	f102 0204 	add.w	r2, r2, #4
    4822:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    4826:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    482a:	4770      	bx	lr
    482c:	fffbfffd 	.word	0xfffbfffd
    4830:	4000b000 	.word	0x4000b000
    4834:	2000004a 	.word	0x2000004a
    4838:	fffafffd 	.word	0xfffafffd
    483c:	40008000 	.word	0x40008000

00004840 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    4840:	b510      	push	{r4, lr}
    4842:	2807      	cmp	r0, #7
    4844:	d20d      	bcs.n	4862 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    4846:	e8df f000 	tbb	[pc, r0]
    484a:	0404      	.short	0x0404
    484c:	06060404 	.word	0x06060404
    4850:	0006      	.short	0x0006
    4852:	4906      	ldr	r1, [pc, #24]	; (486c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    4854:	e002      	b.n	485c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    4856:	1f00      	subs	r0, r0, #4
    4858:	4905      	ldr	r1, [pc, #20]	; (4870 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    485a:	b2c0      	uxtb	r0, r0
    485c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    4860:	bd10      	pop	{r4, pc}
    4862:	f240 3195 	movw	r1, #917	; 0x395
    4866:	206c      	movs	r0, #108	; 0x6c
    4868:	f000 fbe2 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    486c:	40008140 	.word	0x40008140
    4870:	4000b140 	.word	0x4000b140

00004874 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    4874:	b570      	push	{r4, r5, r6, lr}
    4876:	481f      	ldr	r0, [pc, #124]	; (48f4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    4878:	2400      	movs	r4, #0
    487a:	2104      	movs	r1, #4
    487c:	7004      	strb	r4, [r0, #0]
    487e:	1e80      	subs	r0, r0, #2
    4880:	7001      	strb	r1, [r0, #0]
    4882:	0589      	lsls	r1, r1, #22
    4884:	60c4      	str	r4, [r0, #12]
    4886:	6081      	str	r1, [r0, #8]
    4888:	f7ff fc82 	bl	4190 <MPSL_IRQ_TIMER0_Handler+0x100>
    488c:	2501      	movs	r5, #1
    488e:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    4892:	02eb      	lsls	r3, r5, #11
    4894:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    4898:	f3bf 8f4f 	dsb	sy
    489c:	f3bf 8f6f 	isb	sy
    48a0:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    48a4:	4814      	ldr	r0, [pc, #80]	; (48f8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    48a6:	6045      	str	r5, [r0, #4]
    48a8:	6085      	str	r5, [r0, #8]
    48aa:	4914      	ldr	r1, [pc, #80]	; (48fc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    48ac:	680a      	ldr	r2, [r1, #0]
    48ae:	2a00      	cmp	r2, #0
    48b0:	d1fc      	bne.n	48ac <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    48b2:	1e51      	subs	r1, r2, #1
    48b4:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    48b8:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    48bc:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    48c0:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    48c4:	490e      	ldr	r1, [pc, #56]	; (4900 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    48c6:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    48ca:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    48ce:	1d09      	adds	r1, r1, #4
    48d0:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    48d4:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    48d8:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    48dc:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    48e0:	6005      	str	r5, [r0, #0]
    48e2:	f44f 7182 	mov.w	r1, #260	; 0x104
    48e6:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    48ea:	2102      	movs	r1, #2
    48ec:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    48f0:	bd70      	pop	{r4, r5, r6, pc}
    48f2:	0000      	.short	0x0000
    48f4:	2000004a 	.word	0x2000004a
    48f8:	4000b000 	.word	0x4000b000
    48fc:	4000b504 	.word	0x4000b504
    4900:	4000b004 	.word	0x4000b004

00004904 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    4904:	4808      	ldr	r0, [pc, #32]	; (4928 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    4906:	f990 0000 	ldrsb.w	r0, [r0]
    490a:	2800      	cmp	r0, #0
    490c:	bfb8      	it	lt
    490e:	4770      	bxlt	lr
    4910:	f000 011f 	and.w	r1, r0, #31
    4914:	2201      	movs	r2, #1
    4916:	fa02 f101 	lsl.w	r1, r2, r1
    491a:	0940      	lsrs	r0, r0, #5
    491c:	0080      	lsls	r0, r0, #2
    491e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    4922:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4926:	4770      	bx	lr
    4928:	20000328 	.word	0x20000328

0000492c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    492c:	4803      	ldr	r0, [pc, #12]	; (493c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    492e:	7800      	ldrb	r0, [r0, #0]
    4930:	2803      	cmp	r0, #3
    4932:	bf0c      	ite	eq
    4934:	2001      	moveq	r0, #1
    4936:	2000      	movne	r0, #0
    4938:	4770      	bx	lr
    493a:	0000      	.short	0x0000
    493c:	20000314 	.word	0x20000314

00004940 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    4940:	4801      	ldr	r0, [pc, #4]	; (4948 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    4942:	8840      	ldrh	r0, [r0, #2]
    4944:	4770      	bx	lr
    4946:	0000      	.short	0x0000
    4948:	20000314 	.word	0x20000314

0000494c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    494c:	4803      	ldr	r0, [pc, #12]	; (495c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    494e:	7800      	ldrb	r0, [r0, #0]
    4950:	2802      	cmp	r0, #2
    4952:	bf16      	itet	ne
    4954:	2803      	cmpne	r0, #3
    4956:	2001      	moveq	r0, #1
    4958:	2000      	movne	r0, #0
    495a:	4770      	bx	lr
    495c:	20000314 	.word	0x20000314

00004960 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    4960:	4802      	ldr	r0, [pc, #8]	; (496c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    4962:	2100      	movs	r1, #0
    4964:	7001      	strb	r1, [r0, #0]
    4966:	8041      	strh	r1, [r0, #2]
    4968:	4770      	bx	lr
    496a:	0000      	.short	0x0000
    496c:	20000314 	.word	0x20000314

00004970 <MPSL_IRQ_CLOCK_Handler>:
    4970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4974:	4c16      	ldr	r4, [pc, #88]	; (49d0 <MPSL_IRQ_CLOCK_Handler+0x60>)
    4976:	7a60      	ldrb	r0, [r4, #9]
    4978:	2800      	cmp	r0, #0
    497a:	d027      	beq.n	49cc <MPSL_IRQ_CLOCK_Handler+0x5c>
    497c:	f44f 7180 	mov.w	r1, #256	; 0x100
    4980:	058d      	lsls	r5, r1, #22
    4982:	4628      	mov	r0, r5
    4984:	f008 ff7b 	bl	d87e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4988:	4680      	mov	r8, r0
    498a:	f44f 7182 	mov.w	r1, #260	; 0x104
    498e:	4628      	mov	r0, r5
    4990:	f008 ff75 	bl	d87e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4994:	2600      	movs	r6, #0
    4996:	4607      	mov	r7, r0
    4998:	f1b8 0f00 	cmp.w	r8, #0
    499c:	d009      	beq.n	49b2 <MPSL_IRQ_CLOCK_Handler+0x42>
    499e:	2001      	movs	r0, #1
    49a0:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    49a4:	7920      	ldrb	r0, [r4, #4]
    49a6:	b120      	cbz	r0, 49b2 <MPSL_IRQ_CLOCK_Handler+0x42>
    49a8:	7126      	strb	r6, [r4, #4]
    49aa:	69e0      	ldr	r0, [r4, #28]
    49ac:	b108      	cbz	r0, 49b2 <MPSL_IRQ_CLOCK_Handler+0x42>
    49ae:	4780      	blx	r0
    49b0:	61e6      	str	r6, [r4, #28]
    49b2:	b137      	cbz	r7, 49c2 <MPSL_IRQ_CLOCK_Handler+0x52>
    49b4:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    49b8:	2002      	movs	r0, #2
    49ba:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    49be:	f000 fa6b 	bl	4e98 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    49c2:	4640      	mov	r0, r8
    49c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    49c8:	f000 b858 	b.w	4a7c <MPSL_IRQ_CLOCK_Handler+0x10c>
    49cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49d0:	20000058 	.word	0x20000058
    49d4:	b510      	push	{r4, lr}
    49d6:	f008 fffc 	bl	d9d2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    49da:	b930      	cbnz	r0, 49ea <MPSL_IRQ_CLOCK_Handler+0x7a>
    49dc:	f009 f81a 	bl	da14 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    49e0:	b918      	cbnz	r0, 49ea <MPSL_IRQ_CLOCK_Handler+0x7a>
    49e2:	f009 f84d 	bl	da80 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    49e6:	2800      	cmp	r0, #0
    49e8:	d002      	beq.n	49f0 <MPSL_IRQ_CLOCK_Handler+0x80>
    49ea:	4902      	ldr	r1, [pc, #8]	; (49f4 <MPSL_IRQ_CLOCK_Handler+0x84>)
    49ec:	2002      	movs	r0, #2
    49ee:	6008      	str	r0, [r1, #0]
    49f0:	bd10      	pop	{r4, pc}
    49f2:	0000      	.short	0x0000
    49f4:	40000c34 	.word	0x40000c34
    49f8:	b570      	push	{r4, r5, r6, lr}
    49fa:	f000 f991 	bl	4d20 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    49fe:	f000 fa9f 	bl	4f40 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4a02:	4c09      	ldr	r4, [pc, #36]	; (4a28 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    4a04:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4a08:	b130      	cbz	r0, 4a18 <MPSL_IRQ_CLOCK_Handler+0xa8>
    4a0a:	f7ff ffe3 	bl	49d4 <MPSL_IRQ_CLOCK_Handler+0x64>
    4a0e:	2001      	movs	r0, #1
    4a10:	6128      	str	r0, [r5, #16]
    4a12:	2004      	movs	r0, #4
    4a14:	72a0      	strb	r0, [r4, #10]
    4a16:	e004      	b.n	4a22 <MPSL_IRQ_CLOCK_Handler+0xb2>
    4a18:	2003      	movs	r0, #3
    4a1a:	72a0      	strb	r0, [r4, #10]
    4a1c:	2001      	movs	r0, #1
    4a1e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4a22:	2000      	movs	r0, #0
    4a24:	71e0      	strb	r0, [r4, #7]
    4a26:	bd70      	pop	{r4, r5, r6, pc}
    4a28:	20000058 	.word	0x20000058
    4a2c:	b570      	push	{r4, r5, r6, lr}
    4a2e:	4c12      	ldr	r4, [pc, #72]	; (4a78 <MPSL_IRQ_CLOCK_Handler+0x108>)
    4a30:	79a0      	ldrb	r0, [r4, #6]
    4a32:	b1e0      	cbz	r0, 4a6e <MPSL_IRQ_CLOCK_Handler+0xfe>
    4a34:	79e1      	ldrb	r1, [r4, #7]
    4a36:	1e40      	subs	r0, r0, #1
    4a38:	4281      	cmp	r1, r0
    4a3a:	da18      	bge.n	4a6e <MPSL_IRQ_CLOCK_Handler+0xfe>
    4a3c:	f000 fa80 	bl	4f40 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4a40:	4605      	mov	r5, r0
    4a42:	f000 fb69 	bl	5118 <mpsl_temperature_get>
    4a46:	79a1      	ldrb	r1, [r4, #6]
    4a48:	2901      	cmp	r1, #1
    4a4a:	d902      	bls.n	4a52 <MPSL_IRQ_CLOCK_Handler+0xe2>
    4a4c:	79e1      	ldrb	r1, [r4, #7]
    4a4e:	1c49      	adds	r1, r1, #1
    4a50:	71e1      	strb	r1, [r4, #7]
    4a52:	b10d      	cbz	r5, 4a58 <MPSL_IRQ_CLOCK_Handler+0xe8>
    4a54:	6961      	ldr	r1, [r4, #20]
    4a56:	e000      	b.n	4a5a <MPSL_IRQ_CLOCK_Handler+0xea>
    4a58:	6921      	ldr	r1, [r4, #16]
    4a5a:	1a41      	subs	r1, r0, r1
    4a5c:	2902      	cmp	r1, #2
    4a5e:	da02      	bge.n	4a66 <MPSL_IRQ_CLOCK_Handler+0xf6>
    4a60:	f111 0f02 	cmn.w	r1, #2
    4a64:	dc07      	bgt.n	4a76 <MPSL_IRQ_CLOCK_Handler+0x106>
    4a66:	b10d      	cbz	r5, 4a6c <MPSL_IRQ_CLOCK_Handler+0xfc>
    4a68:	6160      	str	r0, [r4, #20]
    4a6a:	e000      	b.n	4a6e <MPSL_IRQ_CLOCK_Handler+0xfe>
    4a6c:	6120      	str	r0, [r4, #16]
    4a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4a72:	f7ff bfc1 	b.w	49f8 <MPSL_IRQ_CLOCK_Handler+0x88>
    4a76:	bd70      	pop	{r4, r5, r6, pc}
    4a78:	20000058 	.word	0x20000058
    4a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a80:	4606      	mov	r6, r0
    4a82:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4a86:	f44f 7186 	mov.w	r1, #268	; 0x10c
    4a8a:	4628      	mov	r0, r5
    4a8c:	f008 fef7 	bl	d87e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4a90:	4680      	mov	r8, r0
    4a92:	f44f 7188 	mov.w	r1, #272	; 0x110
    4a96:	4628      	mov	r0, r5
    4a98:	f008 fef1 	bl	d87e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4a9c:	4c27      	ldr	r4, [pc, #156]	; (4b3c <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    4a9e:	4682      	mov	sl, r0
    4aa0:	7827      	ldrb	r7, [r4, #0]
    4aa2:	f104 0008 	add.w	r0, r4, #8
    4aa6:	f008 ff5e 	bl	d966 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4aaa:	b110      	cbz	r0, 4ab2 <MPSL_IRQ_CLOCK_Handler+0x142>
    4aac:	f240 11b9 	movw	r1, #441	; 0x1b9
    4ab0:	e016      	b.n	4ae0 <MPSL_IRQ_CLOCK_Handler+0x170>
    4ab2:	f04f 0901 	mov.w	r9, #1
    4ab6:	b146      	cbz	r6, 4aca <MPSL_IRQ_CLOCK_Handler+0x15a>
    4ab8:	7aa0      	ldrb	r0, [r4, #10]
    4aba:	2803      	cmp	r0, #3
    4abc:	d105      	bne.n	4aca <MPSL_IRQ_CLOCK_Handler+0x15a>
    4abe:	2004      	movs	r0, #4
    4ac0:	72a0      	strb	r0, [r4, #10]
    4ac2:	f7ff ff87 	bl	49d4 <MPSL_IRQ_CLOCK_Handler+0x64>
    4ac6:	f8c5 9010 	str.w	r9, [r5, #16]
    4aca:	2600      	movs	r6, #0
    4acc:	f1b8 0f00 	cmp.w	r8, #0
    4ad0:	d018      	beq.n	4b04 <MPSL_IRQ_CLOCK_Handler+0x194>
    4ad2:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    4ad6:	7aa0      	ldrb	r0, [r4, #10]
    4ad8:	2804      	cmp	r0, #4
    4ada:	d004      	beq.n	4ae6 <MPSL_IRQ_CLOCK_Handler+0x176>
    4adc:	f240 11cb 	movw	r1, #459	; 0x1cb
    4ae0:	206d      	movs	r0, #109	; 0x6d
    4ae2:	f000 faa5 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4ae6:	f008 ff74 	bl	d9d2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    4aea:	b928      	cbnz	r0, 4af8 <MPSL_IRQ_CLOCK_Handler+0x188>
    4aec:	f008 ff92 	bl	da14 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4af0:	b910      	cbnz	r0, 4af8 <MPSL_IRQ_CLOCK_Handler+0x188>
    4af2:	f008 ffc5 	bl	da80 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    4af6:	b108      	cbz	r0, 4afc <MPSL_IRQ_CLOCK_Handler+0x18c>
    4af8:	4811      	ldr	r0, [pc, #68]	; (4b40 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    4afa:	6006      	str	r6, [r0, #0]
    4afc:	2002      	movs	r0, #2
    4afe:	72a0      	strb	r0, [r4, #10]
    4b00:	f000 f8f2 	bl	4ce8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4b04:	f1ba 0f00 	cmp.w	sl, #0
    4b08:	d008      	beq.n	4b1c <MPSL_IRQ_CLOCK_Handler+0x1ac>
    4b0a:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    4b0e:	7aa0      	ldrb	r0, [r4, #10]
    4b10:	2802      	cmp	r0, #2
    4b12:	d101      	bne.n	4b18 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    4b14:	f7ff ff8a 	bl	4a2c <MPSL_IRQ_CLOCK_Handler+0xbc>
    4b18:	f8c5 9014 	str.w	r9, [r5, #20]
    4b1c:	b13f      	cbz	r7, 4b2e <MPSL_IRQ_CLOCK_Handler+0x1be>
    4b1e:	7026      	strb	r6, [r4, #0]
    4b20:	7aa0      	ldrb	r0, [r4, #10]
    4b22:	2802      	cmp	r0, #2
    4b24:	d101      	bne.n	4b2a <MPSL_IRQ_CLOCK_Handler+0x1ba>
    4b26:	f7ff ff67 	bl	49f8 <MPSL_IRQ_CLOCK_Handler+0x88>
    4b2a:	f000 f8dd 	bl	4ce8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4b2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b32:	4802      	ldr	r0, [pc, #8]	; (4b3c <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    4b34:	3008      	adds	r0, #8
    4b36:	f008 bf2d 	b.w	d994 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4b3a:	0000      	.short	0x0000
    4b3c:	20000058 	.word	0x20000058
    4b40:	40000c34 	.word	0x40000c34
    4b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b48:	4c5f      	ldr	r4, [pc, #380]	; (4cc8 <MPSL_IRQ_CLOCK_Handler+0x358>)
    4b4a:	2700      	movs	r7, #0
    4b4c:	4606      	mov	r6, r0
    4b4e:	61a7      	str	r7, [r4, #24]
    4b50:	7842      	ldrb	r2, [r0, #1]
    4b52:	7881      	ldrb	r1, [r0, #2]
    4b54:	7800      	ldrb	r0, [r0, #0]
    4b56:	72e0      	strb	r0, [r4, #11]
    4b58:	7162      	strb	r2, [r4, #5]
    4b5a:	71a1      	strb	r1, [r4, #6]
    4b5c:	71e7      	strb	r7, [r4, #7]
    4b5e:	f04f 0801 	mov.w	r8, #1
    4b62:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4b66:	2805      	cmp	r0, #5
    4b68:	d225      	bcs.n	4bb6 <MPSL_IRQ_CLOCK_Handler+0x246>
    4b6a:	e8df f000 	tbb	[pc, r0]
    4b6e:	0310      	.short	0x0310
    4b70:	00222006 	.word	0x00222006
    4b74:	f8c4 8018 	str.w	r8, [r4, #24]
    4b78:	e009      	b.n	4b8e <MPSL_IRQ_CLOCK_Handler+0x21e>
    4b7a:	f000 f8d1 	bl	4d20 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4b7e:	2101      	movs	r1, #1
    4b80:	4628      	mov	r0, r5
    4b82:	f008 fe81 	bl	d888 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4b86:	2800      	cmp	r0, #0
    4b88:	d0f9      	beq.n	4b7e <MPSL_IRQ_CLOCK_Handler+0x20e>
    4b8a:	2002      	movs	r0, #2
    4b8c:	61a0      	str	r0, [r4, #24]
    4b8e:	f008 fea7 	bl	d8e0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    4b92:	b1b0      	cbz	r0, 4bc2 <MPSL_IRQ_CLOCK_Handler+0x252>
    4b94:	f000 f9ee 	bl	4f74 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    4b98:	7e21      	ldrb	r1, [r4, #24]
    4b9a:	f001 0103 	and.w	r1, r1, #3
    4b9e:	4288      	cmp	r0, r1
    4ba0:	d10f      	bne.n	4bc2 <MPSL_IRQ_CLOCK_Handler+0x252>
    4ba2:	79b0      	ldrb	r0, [r6, #6]
    4ba4:	b150      	cbz	r0, 4bbc <MPSL_IRQ_CLOCK_Handler+0x24c>
    4ba6:	2002      	movs	r0, #2
    4ba8:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4bac:	e070      	b.n	4c90 <MPSL_IRQ_CLOCK_Handler+0x320>
    4bae:	4847      	ldr	r0, [pc, #284]	; (4ccc <MPSL_IRQ_CLOCK_Handler+0x35c>)
    4bb0:	e7ec      	b.n	4b8c <MPSL_IRQ_CLOCK_Handler+0x21c>
    4bb2:	4847      	ldr	r0, [pc, #284]	; (4cd0 <MPSL_IRQ_CLOCK_Handler+0x360>)
    4bb4:	e7ea      	b.n	4b8c <MPSL_IRQ_CLOCK_Handler+0x21c>
    4bb6:	f240 313a 	movw	r1, #826	; 0x33a
    4bba:	e04d      	b.n	4c58 <MPSL_IRQ_CLOCK_Handler+0x2e8>
    4bbc:	f000 f9ae 	bl	4f1c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4bc0:	e066      	b.n	4c90 <MPSL_IRQ_CLOCK_Handler+0x320>
    4bc2:	f8c5 800c 	str.w	r8, [r5, #12]
    4bc6:	f44f 7a82 	mov.w	sl, #260	; 0x104
    4bca:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    4bce:	69a0      	ldr	r0, [r4, #24]
    4bd0:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    4bd4:	f008 fee9 	bl	d9aa <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4bd8:	b940      	cbnz	r0, 4bec <MPSL_IRQ_CLOCK_Handler+0x27c>
    4bda:	f008 fef0 	bl	d9be <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4bde:	b928      	cbnz	r0, 4bec <MPSL_IRQ_CLOCK_Handler+0x27c>
    4be0:	f008 ff04 	bl	d9ec <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4be4:	b910      	cbnz	r0, 4bec <MPSL_IRQ_CLOCK_Handler+0x27c>
    4be6:	f008 ff15 	bl	da14 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4bea:	b138      	cbz	r0, 4bfc <MPSL_IRQ_CLOCK_Handler+0x28c>
    4bec:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    4bf0:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    4bf4:	4937      	ldr	r1, [pc, #220]	; (4cd4 <MPSL_IRQ_CLOCK_Handler+0x364>)
    4bf6:	f3c0 3042 	ubfx	r0, r0, #13, #3
    4bfa:	6008      	str	r0, [r1, #0]
    4bfc:	f008 fed5 	bl	d9aa <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4c00:	b940      	cbnz	r0, 4c14 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    4c02:	f008 fedc 	bl	d9be <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4c06:	b928      	cbnz	r0, 4c14 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    4c08:	f008 fef0 	bl	d9ec <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4c0c:	b910      	cbnz	r0, 4c14 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    4c0e:	f008 ff01 	bl	da14 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4c12:	b118      	cbz	r0, 4c1c <MPSL_IRQ_CLOCK_Handler+0x2ac>
    4c14:	492f      	ldr	r1, [pc, #188]	; (4cd4 <MPSL_IRQ_CLOCK_Handler+0x364>)
    4c16:	3110      	adds	r1, #16
    4c18:	f8c1 8000 	str.w	r8, [r1]
    4c1c:	f8c5 8008 	str.w	r8, [r5, #8]
    4c20:	2002      	movs	r0, #2
    4c22:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4c26:	79b0      	ldrb	r0, [r6, #6]
    4c28:	bb90      	cbnz	r0, 4c90 <MPSL_IRQ_CLOCK_Handler+0x320>
    4c2a:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    4c2e:	f010 0f02 	tst.w	r0, #2
    4c32:	d00f      	beq.n	4c54 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    4c34:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 4cd8 <MPSL_IRQ_CLOCK_Handler+0x368>
    4c38:	f8d9 1000 	ldr.w	r1, [r9]
    4c3c:	43c9      	mvns	r1, r1
    4c3e:	f341 1100 	sbfx	r1, r1, #4, #1
    4c42:	f101 0801 	add.w	r8, r1, #1
    4c46:	f8d9 1000 	ldr.w	r1, [r9]
    4c4a:	f041 0110 	orr.w	r1, r1, #16
    4c4e:	f8c9 1000 	str.w	r1, [r9]
    4c52:	e007      	b.n	4c64 <MPSL_IRQ_CLOCK_Handler+0x2f4>
    4c54:	f240 21fb 	movw	r1, #763	; 0x2fb
    4c58:	206d      	movs	r0, #109	; 0x6d
    4c5a:	f000 f9e9 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4c5e:	bf00      	nop
    4c60:	f000 fb10 	bl	5284 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4c64:	4651      	mov	r1, sl
    4c66:	4628      	mov	r0, r5
    4c68:	f008 fe09 	bl	d87e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4c6c:	2800      	cmp	r0, #0
    4c6e:	d0f7      	beq.n	4c60 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    4c70:	f000 f954 	bl	4f1c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4c74:	f1b8 0f00 	cmp.w	r8, #0
    4c78:	d105      	bne.n	4c86 <MPSL_IRQ_CLOCK_Handler+0x316>
    4c7a:	f8d9 1000 	ldr.w	r1, [r9]
    4c7e:	f021 0110 	bic.w	r1, r1, #16
    4c82:	f8c9 1000 	str.w	r1, [r9]
    4c86:	2002      	movs	r0, #2
    4c88:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4c8c:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    4c90:	79a0      	ldrb	r0, [r4, #6]
    4c92:	b170      	cbz	r0, 4cb2 <MPSL_IRQ_CLOCK_Handler+0x342>
    4c94:	7830      	ldrb	r0, [r6, #0]
    4c96:	b960      	cbnz	r0, 4cb2 <MPSL_IRQ_CLOCK_Handler+0x342>
    4c98:	f000 f952 	bl	4f40 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4c9c:	4606      	mov	r6, r0
    4c9e:	f000 fa3b 	bl	5118 <mpsl_temperature_get>
    4ca2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4ca6:	b116      	cbz	r6, 4cae <MPSL_IRQ_CLOCK_Handler+0x33e>
    4ca8:	e9c4 1004 	strd	r1, r0, [r4, #16]
    4cac:	e001      	b.n	4cb2 <MPSL_IRQ_CLOCK_Handler+0x342>
    4cae:	e9c4 0104 	strd	r0, r1, [r4, #16]
    4cb2:	2101      	movs	r1, #1
    4cb4:	4628      	mov	r0, r5
    4cb6:	f008 fde7 	bl	d888 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4cba:	b108      	cbz	r0, 4cc0 <MPSL_IRQ_CLOCK_Handler+0x350>
    4cbc:	f000 f93a 	bl	4f34 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    4cc0:	72a7      	strb	r7, [r4, #10]
    4cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4cc6:	0000      	.short	0x0000
    4cc8:	20000058 	.word	0x20000058
    4ccc:	00020001 	.word	0x00020001
    4cd0:	00030001 	.word	0x00030001
    4cd4:	4000053c 	.word	0x4000053c
    4cd8:	e000ed10 	.word	0xe000ed10

00004cdc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    4cdc:	4801      	ldr	r0, [pc, #4]	; (4ce4 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    4cde:	89c0      	ldrh	r0, [r0, #14]
    4ce0:	4770      	bx	lr
    4ce2:	0000      	.short	0x0000
    4ce4:	20000058 	.word	0x20000058

00004ce8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    4ce8:	b510      	push	{r4, lr}
    4cea:	f3ef 8410 	mrs	r4, PRIMASK
    4cee:	b672      	cpsid	i
    4cf0:	480a      	ldr	r0, [pc, #40]	; (4d1c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    4cf2:	7841      	ldrb	r1, [r0, #1]
    4cf4:	b129      	cbz	r1, 4d02 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    4cf6:	7841      	ldrb	r1, [r0, #1]
    4cf8:	1e49      	subs	r1, r1, #1
    4cfa:	7041      	strb	r1, [r0, #1]
    4cfc:	7841      	ldrb	r1, [r0, #1]
    4cfe:	b129      	cbz	r1, 4d0c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    4d00:	e008      	b.n	4d14 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4d02:	f44f 718e 	mov.w	r1, #284	; 0x11c
    4d06:	206d      	movs	r0, #109	; 0x6d
    4d08:	f000 f992 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4d0c:	7880      	ldrb	r0, [r0, #2]
    4d0e:	b908      	cbnz	r0, 4d14 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4d10:	f000 f924 	bl	4f5c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    4d14:	2c00      	cmp	r4, #0
    4d16:	d100      	bne.n	4d1a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    4d18:	b662      	cpsie	i
    4d1a:	bd10      	pop	{r4, pc}
    4d1c:	20000058 	.word	0x20000058

00004d20 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    4d20:	b510      	push	{r4, lr}
    4d22:	f3ef 8410 	mrs	r4, PRIMASK
    4d26:	b672      	cpsid	i
    4d28:	4806      	ldr	r0, [pc, #24]	; (4d44 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    4d2a:	7841      	ldrb	r1, [r0, #1]
    4d2c:	1c49      	adds	r1, r1, #1
    4d2e:	7041      	strb	r1, [r0, #1]
    4d30:	7840      	ldrb	r0, [r0, #1]
    4d32:	2801      	cmp	r0, #1
    4d34:	d101      	bne.n	4d3a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    4d36:	f008 fdbe 	bl	d8b6 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    4d3a:	2c00      	cmp	r4, #0
    4d3c:	d100      	bne.n	4d40 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    4d3e:	b662      	cpsie	i
    4d40:	bd10      	pop	{r4, pc}
    4d42:	0000      	.short	0x0000
    4d44:	20000058 	.word	0x20000058

00004d48 <mpsl_clock_hfclk_release>:
    4d48:	4805      	ldr	r0, [pc, #20]	; (4d60 <mpsl_clock_hfclk_release+0x18>)
    4d4a:	b510      	push	{r4, lr}
    4d4c:	78c1      	ldrb	r1, [r0, #3]
    4d4e:	b121      	cbz	r1, 4d5a <mpsl_clock_hfclk_release+0x12>
    4d50:	2100      	movs	r1, #0
    4d52:	7101      	strb	r1, [r0, #4]
    4d54:	70c1      	strb	r1, [r0, #3]
    4d56:	f7ff ffc7 	bl	4ce8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4d5a:	2000      	movs	r0, #0
    4d5c:	bd10      	pop	{r4, pc}
    4d5e:	0000      	.short	0x0000
    4d60:	20000058 	.word	0x20000058

00004d64 <mpsl_clock_hfclk_request>:
    4d64:	b570      	push	{r4, r5, r6, lr}
    4d66:	4c0c      	ldr	r4, [pc, #48]	; (4d98 <mpsl_clock_hfclk_request+0x34>)
    4d68:	78e1      	ldrb	r1, [r4, #3]
    4d6a:	b961      	cbnz	r1, 4d86 <mpsl_clock_hfclk_request+0x22>
    4d6c:	2501      	movs	r5, #1
    4d6e:	70e5      	strb	r5, [r4, #3]
    4d70:	61e0      	str	r0, [r4, #28]
    4d72:	f7ff ffd5 	bl	4d20 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4d76:	f000 f8e3 	bl	4f40 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4d7a:	b130      	cbz	r0, 4d8a <mpsl_clock_hfclk_request+0x26>
    4d7c:	69e0      	ldr	r0, [r4, #28]
    4d7e:	b110      	cbz	r0, 4d86 <mpsl_clock_hfclk_request+0x22>
    4d80:	4780      	blx	r0
    4d82:	2000      	movs	r0, #0
    4d84:	61e0      	str	r0, [r4, #28]
    4d86:	2000      	movs	r0, #0
    4d88:	bd70      	pop	{r4, r5, r6, pc}
    4d8a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4d8e:	7125      	strb	r5, [r4, #4]
    4d90:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    4d94:	e7f7      	b.n	4d86 <mpsl_clock_hfclk_request+0x22>
    4d96:	0000      	.short	0x0000
    4d98:	20000058 	.word	0x20000058

00004d9c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    4d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4da0:	0005      	movs	r5, r0
    4da2:	f06f 0015 	mvn.w	r0, #21
    4da6:	d03f      	beq.n	4e28 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4da8:	7829      	ldrb	r1, [r5, #0]
    4daa:	2904      	cmp	r1, #4
    4dac:	d83c      	bhi.n	4e28 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4dae:	2900      	cmp	r1, #0
    4db0:	7869      	ldrb	r1, [r5, #1]
    4db2:	d03b      	beq.n	4e2c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    4db4:	2900      	cmp	r1, #0
    4db6:	d137      	bne.n	4e28 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4db8:	78a9      	ldrb	r1, [r5, #2]
    4dba:	2900      	cmp	r1, #0
    4dbc:	d134      	bne.n	4e28 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4dbe:	2000      	movs	r0, #0
    4dc0:	f008 fd28 	bl	d814 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    4dc4:	2000      	movs	r0, #0
    4dc6:	f008 fd18 	bl	d7fa <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    4dca:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    4dce:	f04f 31ff 	mov.w	r1, #4294967295
    4dd2:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    4dd6:	2600      	movs	r6, #0
    4dd8:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    4ddc:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    4de0:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    4de4:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    4de8:	4c14      	ldr	r4, [pc, #80]	; (4e3c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    4dea:	7066      	strb	r6, [r4, #1]
    4dec:	88a8      	ldrh	r0, [r5, #4]
    4dee:	81a0      	strh	r0, [r4, #12]
    4df0:	f008 fd58 	bl	d8a4 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    4df4:	2701      	movs	r7, #1
    4df6:	b108      	cbz	r0, 4dfc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    4df8:	70e7      	strb	r7, [r4, #3]
    4dfa:	7067      	strb	r7, [r4, #1]
    4dfc:	2101      	movs	r1, #1
    4dfe:	4640      	mov	r0, r8
    4e00:	f008 fd42 	bl	d888 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4e04:	b108      	cbz	r0, 4e0a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    4e06:	f000 f895 	bl	4f34 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    4e0a:	f240 50f5 	movw	r0, #1525	; 0x5f5
    4e0e:	81e0      	strh	r0, [r4, #14]
    4e10:	4628      	mov	r0, r5
    4e12:	f7ff fe97 	bl	4b44 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    4e16:	7267      	strb	r7, [r4, #9]
    4e18:	2000      	movs	r0, #0
    4e1a:	f008 fcee 	bl	d7fa <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    4e1e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4e22:	4630      	mov	r0, r6
    4e24:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    4e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e2c:	2900      	cmp	r1, #0
    4e2e:	d0fb      	beq.n	4e28 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4e30:	2920      	cmp	r1, #32
    4e32:	d8f9      	bhi.n	4e28 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4e34:	78a9      	ldrb	r1, [r5, #2]
    4e36:	2921      	cmp	r1, #33	; 0x21
    4e38:	d9c1      	bls.n	4dbe <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    4e3a:	e7f5      	b.n	4e28 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4e3c:	20000058 	.word	0x20000058

00004e40 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    4e40:	4801      	ldr	r0, [pc, #4]	; (4e48 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    4e42:	8980      	ldrh	r0, [r0, #12]
    4e44:	4770      	bx	lr
    4e46:	0000      	.short	0x0000
    4e48:	20000058 	.word	0x20000058

00004e4c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    4e4c:	b510      	push	{r4, lr}
    4e4e:	480d      	ldr	r0, [pc, #52]	; (4e84 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4e50:	f008 fd89 	bl	d966 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4e54:	490b      	ldr	r1, [pc, #44]	; (4e84 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4e56:	3908      	subs	r1, #8
    4e58:	b148      	cbz	r0, 4e6e <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    4e5a:	2001      	movs	r0, #1
    4e5c:	7008      	strb	r0, [r1, #0]
    4e5e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4e62:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    4e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e6a:	f7ff bf59 	b.w	4d20 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4e6e:	7a88      	ldrb	r0, [r1, #10]
    4e70:	2802      	cmp	r0, #2
    4e72:	d101      	bne.n	4e78 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    4e74:	f7ff fdc0 	bl	49f8 <MPSL_IRQ_CLOCK_Handler+0x88>
    4e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e7c:	4801      	ldr	r0, [pc, #4]	; (4e84 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4e7e:	f008 bd89 	b.w	d994 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4e82:	0000      	.short	0x0000
    4e84:	20000060 	.word	0x20000060

00004e88 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    4e88:	4802      	ldr	r0, [pc, #8]	; (4e94 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    4e8a:	7a80      	ldrb	r0, [r0, #10]
    4e8c:	2800      	cmp	r0, #0
    4e8e:	d000      	beq.n	4e92 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    4e90:	2001      	movs	r0, #1
    4e92:	4770      	bx	lr
    4e94:	20000058 	.word	0x20000058

00004e98 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    4e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e9a:	4d1f      	ldr	r5, [pc, #124]	; (4f18 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4e9c:	7ae8      	ldrb	r0, [r5, #11]
    4e9e:	2800      	cmp	r0, #0
    4ea0:	d10f      	bne.n	4ec2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4ea2:	7e28      	ldrb	r0, [r5, #24]
    4ea4:	f000 0003 	and.w	r0, r0, #3
    4ea8:	f008 fd0a 	bl	d8c0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4eac:	2800      	cmp	r0, #0
    4eae:	d008      	beq.n	4ec2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4eb0:	f3ef 8110 	mrs	r1, PRIMASK
    4eb4:	b672      	cpsid	i
    4eb6:	f7ff ffe7 	bl	4e88 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    4eba:	b118      	cbz	r0, 4ec4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    4ebc:	2900      	cmp	r1, #0
    4ebe:	d100      	bne.n	4ec2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4ec0:	b662      	cpsie	i
    4ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ec4:	2601      	movs	r6, #1
    4ec6:	72ae      	strb	r6, [r5, #10]
    4ec8:	b901      	cbnz	r1, 4ecc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    4eca:	b662      	cpsie	i
    4ecc:	2018      	movs	r0, #24
    4ece:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4ed2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4ed6:	61a6      	str	r6, [r4, #24]
    4ed8:	f44f 7020 	mov.w	r0, #640	; 0x280
    4edc:	f8ad 0000 	strh.w	r0, [sp]
    4ee0:	f8bd 0000 	ldrh.w	r0, [sp]
    4ee4:	1e41      	subs	r1, r0, #1
    4ee6:	f8ad 1000 	strh.w	r1, [sp]
    4eea:	d2f9      	bcs.n	4ee0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    4eec:	2700      	movs	r7, #0
    4eee:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    4ef2:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    4ef6:	4808      	ldr	r0, [pc, #32]	; (4f18 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4ef8:	3008      	adds	r0, #8
    4efa:	f008 fd47 	bl	d98c <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4efe:	702f      	strb	r7, [r5, #0]
    4f00:	f7ff fd7a 	bl	49f8 <MPSL_IRQ_CLOCK_Handler+0x88>
    4f04:	6166      	str	r6, [r4, #20]
    4f06:	7968      	ldrb	r0, [r5, #5]
    4f08:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    4f0c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    4f10:	2018      	movs	r0, #24
    4f12:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    4f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f18:	20000058 	.word	0x20000058

00004f1c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    4f1c:	b510      	push	{r4, lr}
    4f1e:	4c04      	ldr	r4, [pc, #16]	; (4f30 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    4f20:	7e20      	ldrb	r0, [r4, #24]
    4f22:	f000 0003 	and.w	r0, r0, #3
    4f26:	f008 fccb 	bl	d8c0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4f2a:	2800      	cmp	r0, #0
    4f2c:	d0f8      	beq.n	4f20 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    4f2e:	bd10      	pop	{r4, pc}
    4f30:	20000058 	.word	0x20000058

00004f34 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    4f34:	4901      	ldr	r1, [pc, #4]	; (4f3c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    4f36:	2001      	movs	r0, #1
    4f38:	7008      	strb	r0, [r1, #0]
    4f3a:	4770      	bx	lr
    4f3c:	20000329 	.word	0x20000329

00004f40 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    4f40:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4f44:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4f48:	b918      	cbnz	r0, 4f52 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    4f4a:	4803      	ldr	r0, [pc, #12]	; (4f58 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    4f4c:	7800      	ldrb	r0, [r0, #0]
    4f4e:	2800      	cmp	r0, #0
    4f50:	d000      	beq.n	4f54 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    4f52:	2001      	movs	r0, #1
    4f54:	4770      	bx	lr
    4f56:	0000      	.short	0x0000
    4f58:	20000329 	.word	0x20000329

00004f5c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    4f5c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4f60:	2101      	movs	r1, #1
    4f62:	6041      	str	r1, [r0, #4]
    4f64:	2100      	movs	r1, #0
    4f66:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    4f6a:	4801      	ldr	r0, [pc, #4]	; (4f70 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    4f6c:	7001      	strb	r1, [r0, #0]
    4f6e:	4770      	bx	lr
    4f70:	20000329 	.word	0x20000329

00004f74 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    4f74:	4802      	ldr	r0, [pc, #8]	; (4f80 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    4f76:	6800      	ldr	r0, [r0, #0]
    4f78:	f000 0003 	and.w	r0, r0, #3
    4f7c:	4770      	bx	lr
    4f7e:	0000      	.short	0x0000
    4f80:	4000041c 	.word	0x4000041c
    4f84:	b510      	push	{r4, lr}
    4f86:	b131      	cbz	r1, 4f96 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    4f88:	2901      	cmp	r1, #1
    4f8a:	d007      	beq.n	4f9c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    4f8c:	f240 3102 	movw	r1, #770	; 0x302
    4f90:	a005      	add	r0, pc, #20	; (adr r0, 4fa8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    4f92:	f000 f821 	bl	4fd8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    4f96:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    4f9a:	e001      	b.n	4fa0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    4f9c:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    4fa0:	f000 0001 	and.w	r0, r0, #1
    4fa4:	bd10      	pop	{r4, pc}
    4fa6:	0000      	.short	0x0000
    4fa8:	5f66726e 	.word	0x5f66726e
    4fac:	636f6c63 	.word	0x636f6c63
    4fb0:	00682e6b 	.word	0x00682e6b
    4fb4:	f3bf 8f4f 	dsb	sy
    4fb8:	4805      	ldr	r0, [pc, #20]	; (4fd0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    4fba:	6801      	ldr	r1, [r0, #0]
    4fbc:	4a05      	ldr	r2, [pc, #20]	; (4fd4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    4fbe:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4fc2:	4311      	orrs	r1, r2
    4fc4:	6001      	str	r1, [r0, #0]
    4fc6:	f3bf 8f4f 	dsb	sy
    4fca:	bf00      	nop
    4fcc:	e7fd      	b.n	4fca <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    4fce:	0000      	.short	0x0000
    4fd0:	e000ed0c 	.word	0xe000ed0c
    4fd4:	05fa0004 	.word	0x05fa0004

00004fd8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    4fd8:	b672      	cpsid	i
    4fda:	4a03      	ldr	r2, [pc, #12]	; (4fe8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    4fdc:	6852      	ldr	r2, [r2, #4]
    4fde:	b102      	cbz	r2, 4fe2 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    4fe0:	4790      	blx	r2
    4fe2:	f7ff ffe7 	bl	4fb4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    4fe6:	0000      	.short	0x0000
    4fe8:	20000078 	.word	0x20000078
    4fec:	4806      	ldr	r0, [pc, #24]	; (5008 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    4fee:	b510      	push	{r4, lr}
    4ff0:	2100      	movs	r1, #0
    4ff2:	6001      	str	r1, [r0, #0]
    4ff4:	2101      	movs	r1, #1
    4ff6:	6001      	str	r1, [r0, #0]
    4ff8:	4608      	mov	r0, r1
    4ffa:	f008 fc88 	bl	d90e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5002:	2001      	movs	r0, #1
    5004:	f008 bc76 	b.w	d8f4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    5008:	40001ffc 	.word	0x40001ffc
    500c:	4807      	ldr	r0, [pc, #28]	; (502c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    500e:	b510      	push	{r4, lr}
    5010:	2101      	movs	r1, #1
    5012:	6041      	str	r1, [r0, #4]
    5014:	1e89      	subs	r1, r1, #2
    5016:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    501a:	200c      	movs	r0, #12
    501c:	f008 fc77 	bl	d90e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    5020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5024:	200c      	movs	r0, #12
    5026:	f008 bc65 	b.w	d8f4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    502a:	0000      	.short	0x0000
    502c:	4000c000 	.word	0x4000c000

00005030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    5030:	b50e      	push	{r1, r2, r3, lr}
    5032:	b672      	cpsid	i
    5034:	4a0f      	ldr	r2, [pc, #60]	; (5074 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    5036:	6855      	ldr	r5, [r2, #4]
    5038:	b1d5      	cbz	r5, 5070 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    503a:	2200      	movs	r2, #0
    503c:	4603      	mov	r3, r0
    503e:	466e      	mov	r6, sp
    5040:	240a      	movs	r4, #10
    5042:	e003      	b.n	504c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    5044:	fbb0 f0f4 	udiv	r0, r0, r4
    5048:	1c52      	adds	r2, r2, #1
    504a:	b2d2      	uxtb	r2, r2
    504c:	2800      	cmp	r0, #0
    504e:	d1f9      	bne.n	5044 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    5050:	54b0      	strb	r0, [r6, r2]
    5052:	e009      	b.n	5068 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    5054:	fbb3 f0f4 	udiv	r0, r3, r4
    5058:	fb04 3010 	mls	r0, r4, r0, r3
    505c:	fbb3 f3f4 	udiv	r3, r3, r4
    5060:	1e52      	subs	r2, r2, #1
    5062:	b2d2      	uxtb	r2, r2
    5064:	3030      	adds	r0, #48	; 0x30
    5066:	54b0      	strb	r0, [r6, r2]
    5068:	2a00      	cmp	r2, #0
    506a:	d1f3      	bne.n	5054 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    506c:	4630      	mov	r0, r6
    506e:	47a8      	blx	r5
    5070:	f7ff ffa0 	bl	4fb4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    5074:	20000078 	.word	0x20000078

00005078 <mpsl_init>:
    5078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    507c:	4c18      	ldr	r4, [pc, #96]	; (50e0 <mpsl_init+0x68>)
    507e:	4606      	mov	r6, r0
    5080:	4617      	mov	r7, r2
    5082:	7860      	ldrb	r0, [r4, #1]
    5084:	460d      	mov	r5, r1
    5086:	b118      	cbz	r0, 5090 <mpsl_init+0x18>
    5088:	f04f 30ff 	mov.w	r0, #4294967295
    508c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5090:	f7fc fbe6 	bl	1860 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    5094:	b906      	cbnz	r6, 5098 <mpsl_init+0x20>
    5096:	4e13      	ldr	r6, [pc, #76]	; (50e4 <mpsl_init+0x6c>)
    5098:	6067      	str	r7, [r4, #4]
    509a:	7025      	strb	r5, [r4, #0]
    509c:	f7ff ffa6 	bl	4fec <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    50a0:	f7ff ffb4 	bl	500c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    50a4:	4630      	mov	r0, r6
    50a6:	f7ff fe79 	bl	4d9c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    50aa:	0006      	movs	r6, r0
    50ac:	d1ee      	bne.n	508c <mpsl_init+0x14>
    50ae:	f7fe fe77 	bl	3da0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    50b2:	f7ff fef1 	bl	4e98 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    50b6:	f008 faed 	bl	d694 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    50ba:	4628      	mov	r0, r5
    50bc:	f008 fc1a 	bl	d8f4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    50c0:	2001      	movs	r0, #1
    50c2:	2d00      	cmp	r5, #0
    50c4:	db09      	blt.n	50da <mpsl_init+0x62>
    50c6:	f005 011f 	and.w	r1, r5, #31
    50ca:	fa00 f101 	lsl.w	r1, r0, r1
    50ce:	096a      	lsrs	r2, r5, #5
    50d0:	0092      	lsls	r2, r2, #2
    50d2:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    50d6:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    50da:	7060      	strb	r0, [r4, #1]
    50dc:	4630      	mov	r0, r6
    50de:	e7d5      	b.n	508c <mpsl_init+0x14>
    50e0:	20000078 	.word	0x20000078
    50e4:	0000d930 	.word	0x0000d930

000050e8 <mpsl_is_initialized>:
    50e8:	4801      	ldr	r0, [pc, #4]	; (50f0 <mpsl_is_initialized+0x8>)
    50ea:	7840      	ldrb	r0, [r0, #1]
    50ec:	4770      	bx	lr
    50ee:	0000      	.short	0x0000
    50f0:	20000078 	.word	0x20000078

000050f4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    50f4:	4807      	ldr	r0, [pc, #28]	; (5114 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    50f6:	f990 0000 	ldrsb.w	r0, [r0]
    50fa:	2800      	cmp	r0, #0
    50fc:	db09      	blt.n	5112 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    50fe:	f000 021f 	and.w	r2, r0, #31
    5102:	2101      	movs	r1, #1
    5104:	4091      	lsls	r1, r2
    5106:	0940      	lsrs	r0, r0, #5
    5108:	0080      	lsls	r0, r0, #2
    510a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    510e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    5112:	4770      	bx	lr
    5114:	20000078 	.word	0x20000078

00005118 <mpsl_temperature_get>:
    5118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    511c:	2601      	movs	r6, #1
    511e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    5122:	0331      	lsls	r1, r6, #12
    5124:	f04f 0800 	mov.w	r8, #0
    5128:	4640      	mov	r0, r8
    512a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    512e:	f3bf 8f4f 	dsb	sy
    5132:	f3bf 8f6f 	isb	sy
    5136:	4c16      	ldr	r4, [pc, #88]	; (5190 <mpsl_temperature_get+0x78>)
    5138:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    513c:	200c      	movs	r0, #12
    513e:	f008 fc05 	bl	d94c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    5142:	4d14      	ldr	r5, [pc, #80]	; (5194 <mpsl_temperature_get+0x7c>)
    5144:	6828      	ldr	r0, [r5, #0]
    5146:	43c0      	mvns	r0, r0
    5148:	f340 1700 	sbfx	r7, r0, #4, #1
    514c:	6828      	ldr	r0, [r5, #0]
    514e:	f040 0010 	orr.w	r0, r0, #16
    5152:	6028      	str	r0, [r5, #0]
    5154:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    5158:	6026      	str	r6, [r4, #0]
    515a:	1c7f      	adds	r7, r7, #1
    515c:	e002      	b.n	5164 <mpsl_temperature_get+0x4c>
    515e:	bf00      	nop
    5160:	f000 f890 	bl	5284 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    5164:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    5168:	2800      	cmp	r0, #0
    516a:	d0f9      	beq.n	5160 <mpsl_temperature_get+0x48>
    516c:	b91f      	cbnz	r7, 5176 <mpsl_temperature_get+0x5e>
    516e:	6828      	ldr	r0, [r5, #0]
    5170:	f020 0010 	bic.w	r0, r0, #16
    5174:	6028      	str	r0, [r5, #0]
    5176:	4808      	ldr	r0, [pc, #32]	; (5198 <mpsl_temperature_get+0x80>)
    5178:	6805      	ldr	r5, [r0, #0]
    517a:	6066      	str	r6, [r4, #4]
    517c:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    5180:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    5184:	200c      	movs	r0, #12
    5186:	f008 fbe1 	bl	d94c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    518a:	4628      	mov	r0, r5
    518c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5190:	4000c000 	.word	0x4000c000
    5194:	e000ed10 	.word	0xe000ed10
    5198:	4000c508 	.word	0x4000c508

0000519c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    519c:	b510      	push	{r4, lr}
    519e:	4602      	mov	r2, r0
    51a0:	2005      	movs	r0, #5
    51a2:	490c      	ldr	r1, [pc, #48]	; (51d4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    51a4:	e004      	b.n	51b0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    51a6:	bf00      	nop
    51a8:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    51ac:	791b      	ldrb	r3, [r3, #4]
    51ae:	b133      	cbz	r3, 51be <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    51b0:	1e40      	subs	r0, r0, #1
    51b2:	b2c0      	uxtb	r0, r0
    51b4:	d2f8      	bcs.n	51a8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    51b6:	2148      	movs	r1, #72	; 0x48
    51b8:	2069      	movs	r0, #105	; 0x69
    51ba:	f7ff ff39 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    51be:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    51c2:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    51c6:	2200      	movs	r2, #0
    51c8:	714a      	strb	r2, [r1, #5]
    51ca:	718a      	strb	r2, [r1, #6]
    51cc:	2201      	movs	r2, #1
    51ce:	710a      	strb	r2, [r1, #4]
    51d0:	bd10      	pop	{r4, pc}
    51d2:	0000      	.short	0x0000
    51d4:	200012f4 	.word	0x200012f4

000051d8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    51d8:	b510      	push	{r4, lr}
    51da:	2805      	cmp	r0, #5
    51dc:	d301      	bcc.n	51e2 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    51de:	2158      	movs	r1, #88	; 0x58
    51e0:	e006      	b.n	51f0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    51e2:	490a      	ldr	r1, [pc, #40]	; (520c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    51e4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    51e8:	7901      	ldrb	r1, [r0, #4]
    51ea:	2901      	cmp	r1, #1
    51ec:	d003      	beq.n	51f6 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    51ee:	2159      	movs	r1, #89	; 0x59
    51f0:	2069      	movs	r0, #105	; 0x69
    51f2:	f7ff ff1d 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    51f6:	7941      	ldrb	r1, [r0, #5]
    51f8:	7982      	ldrb	r2, [r0, #6]
    51fa:	1c49      	adds	r1, r1, #1
    51fc:	b2c9      	uxtb	r1, r1
    51fe:	428a      	cmp	r2, r1
    5200:	d000      	beq.n	5204 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    5202:	7141      	strb	r1, [r0, #5]
    5204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5208:	f7ff bf74 	b.w	50f4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    520c:	200012f4 	.word	0x200012f4

00005210 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    5210:	b570      	push	{r4, r5, r6, lr}
    5212:	2505      	movs	r5, #5
    5214:	4e0e      	ldr	r6, [pc, #56]	; (5250 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    5216:	4c0f      	ldr	r4, [pc, #60]	; (5254 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    5218:	e016      	b.n	5248 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    521a:	7821      	ldrb	r1, [r4, #0]
    521c:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    5220:	7902      	ldrb	r2, [r0, #4]
    5222:	2a01      	cmp	r2, #1
    5224:	d108      	bne.n	5238 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    5226:	7942      	ldrb	r2, [r0, #5]
    5228:	7983      	ldrb	r3, [r0, #6]
    522a:	429a      	cmp	r2, r3
    522c:	d004      	beq.n	5238 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    522e:	7942      	ldrb	r2, [r0, #5]
    5230:	7182      	strb	r2, [r0, #6]
    5232:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    5236:	4780      	blx	r0
    5238:	7820      	ldrb	r0, [r4, #0]
    523a:	1c40      	adds	r0, r0, #1
    523c:	b2c0      	uxtb	r0, r0
    523e:	7020      	strb	r0, [r4, #0]
    5240:	2805      	cmp	r0, #5
    5242:	d301      	bcc.n	5248 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    5244:	2000      	movs	r0, #0
    5246:	7020      	strb	r0, [r4, #0]
    5248:	1e6d      	subs	r5, r5, #1
    524a:	b2ed      	uxtb	r5, r5
    524c:	d2e5      	bcs.n	521a <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    524e:	bd70      	pop	{r4, r5, r6, pc}
    5250:	200012f4 	.word	0x200012f4
    5254:	2000032a 	.word	0x2000032a

00005258 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    5258:	b500      	push	{lr}
    525a:	f008 fba6 	bl	d9aa <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    525e:	b940      	cbnz	r0, 5272 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    5260:	f008 fbad 	bl	d9be <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    5264:	b928      	cbnz	r0, 5272 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    5266:	f008 fbc1 	bl	d9ec <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    526a:	b910      	cbnz	r0, 5272 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    526c:	f008 fbd2 	bl	da14 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    5270:	b108      	cbz	r0, 5276 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    5272:	4802      	ldr	r0, [pc, #8]	; (527c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    5274:	bd00      	pop	{pc}
    5276:	4802      	ldr	r0, [pc, #8]	; (5280 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    5278:	bd00      	pop	{pc}
    527a:	0000      	.short	0x0000
    527c:	4000050c 	.word	0x4000050c
    5280:	4001e700 	.word	0x4001e700

00005284 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    5284:	b510      	push	{r4, lr}
    5286:	f008 fbc5 	bl	da14 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    528a:	b330      	cbz	r0, 52da <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    528c:	f3ef 8010 	mrs	r0, PRIMASK
    5290:	b1c8      	cbz	r0, 52c6 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    5292:	2100      	movs	r1, #0
    5294:	b672      	cpsid	i
    5296:	4812      	ldr	r0, [pc, #72]	; (52e0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    5298:	6802      	ldr	r2, [r0, #0]
    529a:	6803      	ldr	r3, [r0, #0]
    529c:	f3c2 1200 	ubfx	r2, r2, #4, #1
    52a0:	f043 0310 	orr.w	r3, r3, #16
    52a4:	6003      	str	r3, [r0, #0]
    52a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    52aa:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    52ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    52b2:	431c      	orrs	r4, r3
    52b4:	d000      	beq.n	52b8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    52b6:	bf40      	sev
    52b8:	bf20      	wfe
    52ba:	bf00      	nop
    52bc:	bf00      	nop
    52be:	bf00      	nop
    52c0:	bf00      	nop
    52c2:	b112      	cbz	r2, 52ca <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    52c4:	e005      	b.n	52d2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    52c6:	2101      	movs	r1, #1
    52c8:	e7e4      	b.n	5294 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    52ca:	6802      	ldr	r2, [r0, #0]
    52cc:	f022 0210 	bic.w	r2, r2, #16
    52d0:	6002      	str	r2, [r0, #0]
    52d2:	2900      	cmp	r1, #0
    52d4:	d000      	beq.n	52d8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    52d6:	b662      	cpsie	i
    52d8:	bd10      	pop	{r4, pc}
    52da:	bf20      	wfe
    52dc:	bd10      	pop	{r4, pc}
    52de:	0000      	.short	0x0000
    52e0:	e000ed10 	.word	0xe000ed10

000052e4 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    52e4:	4901      	ldr	r1, [pc, #4]	; (52ec <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    52e6:	2001      	movs	r0, #1
    52e8:	7088      	strb	r0, [r1, #2]
    52ea:	4770      	bx	lr
    52ec:	20000080 	.word	0x20000080

000052f0 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    52f0:	0000dc61 0000dc99 0000dc83 0000dc71     a...........q...
    5300:	0000dc7d 0000dc6b 0000dc5f 0000dc5d     }...k..._...]...
    5310:	0000dc95 0000dc89 0000dc77 0000dc65     ........w...e...
    5320:	0000dc57 0000dc4f 0000dc53 0000dc49     W...O...S...I...

00005330 <mpsl_fem_disable>:
    5330:	4801      	ldr	r0, [pc, #4]	; (5338 <mpsl_fem_disable+0x8>)
    5332:	6800      	ldr	r0, [r0, #0]
    5334:	6800      	ldr	r0, [r0, #0]
    5336:	4700      	bx	r0
    5338:	20000094 	.word	0x20000094

0000533c <mpsl_fem_lna_configuration_clear>:
    533c:	4801      	ldr	r0, [pc, #4]	; (5344 <mpsl_fem_lna_configuration_clear+0x8>)
    533e:	6800      	ldr	r0, [r0, #0]
    5340:	6940      	ldr	r0, [r0, #20]
    5342:	4700      	bx	r0
    5344:	20000094 	.word	0x20000094

00005348 <mpsl_fem_lna_configuration_set>:
    5348:	4a01      	ldr	r2, [pc, #4]	; (5350 <mpsl_fem_lna_configuration_set+0x8>)
    534a:	6812      	ldr	r2, [r2, #0]
    534c:	68d2      	ldr	r2, [r2, #12]
    534e:	4710      	bx	r2
    5350:	20000094 	.word	0x20000094

00005354 <mpsl_fem_lna_is_configured>:
    5354:	4901      	ldr	r1, [pc, #4]	; (535c <mpsl_fem_lna_is_configured+0x8>)
    5356:	6809      	ldr	r1, [r1, #0]
    5358:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    535a:	4708      	bx	r1
    535c:	20000094 	.word	0x20000094

00005360 <mpsl_fem_pa_configuration_clear>:
    5360:	4801      	ldr	r0, [pc, #4]	; (5368 <mpsl_fem_pa_configuration_clear+0x8>)
    5362:	6800      	ldr	r0, [r0, #0]
    5364:	6900      	ldr	r0, [r0, #16]
    5366:	4700      	bx	r0
    5368:	20000094 	.word	0x20000094

0000536c <mpsl_fem_pa_configuration_set>:
    536c:	4a01      	ldr	r2, [pc, #4]	; (5374 <mpsl_fem_pa_configuration_set+0x8>)
    536e:	6812      	ldr	r2, [r2, #0]
    5370:	6892      	ldr	r2, [r2, #8]
    5372:	4710      	bx	r2
    5374:	20000094 	.word	0x20000094

00005378 <mpsl_fem_pa_gain_set>:
    5378:	4901      	ldr	r1, [pc, #4]	; (5380 <mpsl_fem_pa_gain_set+0x8>)
    537a:	6809      	ldr	r1, [r1, #0]
    537c:	6a49      	ldr	r1, [r1, #36]	; 0x24
    537e:	4708      	bx	r1
    5380:	20000094 	.word	0x20000094

00005384 <mpsl_fem_pa_is_configured>:
    5384:	4901      	ldr	r1, [pc, #4]	; (538c <mpsl_fem_pa_is_configured+0x8>)
    5386:	6809      	ldr	r1, [r1, #0]
    5388:	6a89      	ldr	r1, [r1, #40]	; 0x28
    538a:	4708      	bx	r1
    538c:	20000094 	.word	0x20000094

00005390 <mpsl_fem_tx_power_split>:
    5390:	4b01      	ldr	r3, [pc, #4]	; (5398 <mpsl_fem_tx_power_split+0x8>)
    5392:	681b      	ldr	r3, [r3, #0]
    5394:	685b      	ldr	r3, [r3, #4]
    5396:	4718      	bx	r3
    5398:	20000094 	.word	0x20000094

0000539c <mpsl_fem_device_config_254_apply_get>:
    539c:	4801      	ldr	r0, [pc, #4]	; (53a4 <mpsl_fem_device_config_254_apply_get+0x8>)
    539e:	7800      	ldrb	r0, [r0, #0]
    53a0:	4770      	bx	lr
    53a2:	0000      	.short	0x0000
    53a4:	2000032b 	.word	0x2000032b
    53a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    53aa:	4c14      	ldr	r4, [pc, #80]	; (53fc <mpsl_fem_device_config_254_apply_get+0x60>)
    53ac:	7a20      	ldrb	r0, [r4, #8]
    53ae:	f88d 0001 	strb.w	r0, [sp, #1]
    53b2:	79e0      	ldrb	r0, [r4, #7]
    53b4:	f88d 0000 	strb.w	r0, [sp]
    53b8:	79a0      	ldrb	r0, [r4, #6]
    53ba:	f8ad 0004 	strh.w	r0, [sp, #4]
    53be:	7960      	ldrb	r0, [r4, #5]
    53c0:	f8ad 0002 	strh.w	r0, [sp, #2]
    53c4:	4668      	mov	r0, sp
    53c6:	f006 f973 	bl	b6b0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    53ca:	b108      	cbz	r0, 53d0 <mpsl_fem_device_config_254_apply_get+0x34>
    53cc:	2183      	movs	r1, #131	; 0x83
    53ce:	e010      	b.n	53f2 <mpsl_fem_device_config_254_apply_get+0x56>
    53d0:	68e0      	ldr	r0, [r4, #12]
    53d2:	9002      	str	r0, [sp, #8]
    53d4:	a802      	add	r0, sp, #8
    53d6:	f006 f981 	bl	b6dc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    53da:	b108      	cbz	r0, 53e0 <mpsl_fem_device_config_254_apply_get+0x44>
    53dc:	2187      	movs	r1, #135	; 0x87
    53de:	e008      	b.n	53f2 <mpsl_fem_device_config_254_apply_get+0x56>
    53e0:	4807      	ldr	r0, [pc, #28]	; (5400 <mpsl_fem_device_config_254_apply_get+0x64>)
    53e2:	6800      	ldr	r0, [r0, #0]
    53e4:	9003      	str	r0, [sp, #12]
    53e6:	a803      	add	r0, sp, #12
    53e8:	f00b fe46 	bl	11078 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    53ec:	2800      	cmp	r0, #0
    53ee:	d003      	beq.n	53f8 <mpsl_fem_device_config_254_apply_get+0x5c>
    53f0:	218b      	movs	r1, #139	; 0x8b
    53f2:	2003      	movs	r0, #3
    53f4:	f000 f8ec 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53f8:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    53fa:	0000      	.short	0x0000
    53fc:	2000131c 	.word	0x2000131c
    5400:	000056dc 	.word	0x000056dc

00005404 <sdc_build_revision_get>:
    5404:	b510      	push	{r4, lr}
    5406:	b128      	cbz	r0, 5414 <sdc_build_revision_get+0x10>
    5408:	2214      	movs	r2, #20
    540a:	4904      	ldr	r1, [pc, #16]	; (541c <sdc_build_revision_get+0x18>)
    540c:	f008 fb42 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5410:	2000      	movs	r0, #0
    5412:	bd10      	pop	{r4, pc}
    5414:	f06f 0015 	mvn.w	r0, #21
    5418:	bd10      	pop	{r4, pc}
    541a:	0000      	.short	0x0000
    541c:	000056f8 	.word	0x000056f8

00005420 <sdc_cfg_set>:
    5420:	b570      	push	{r4, r5, r6, lr}
    5422:	0003      	movs	r3, r0
    5424:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    5428:	d103      	bne.n	5432 <sdc_cfg_set+0x12>
    542a:	4c2e      	ldr	r4, [pc, #184]	; (54e4 <sdc_cfg_set+0xc4>)
    542c:	7863      	ldrb	r3, [r4, #1]
    542e:	b10b      	cbz	r3, 5434 <sdc_cfg_set+0x14>
    5430:	1180      	asrs	r0, r0, #6
    5432:	bd70      	pop	{r4, r5, r6, pc}
    5434:	b301      	cbz	r1, 5478 <sdc_cfg_set+0x58>
    5436:	f06f 0515 	mvn.w	r5, #21
    543a:	b38a      	cbz	r2, 54a0 <sdc_cfg_set+0x80>
    543c:	4b2a      	ldr	r3, [pc, #168]	; (54e8 <sdc_cfg_set+0xc8>)
    543e:	290c      	cmp	r1, #12
    5440:	d24b      	bcs.n	54da <sdc_cfg_set+0xba>
    5442:	e8df f001 	tbb	[pc, r1]
    5446:	064a      	.short	0x064a
    5448:	1d1a0c09 	.word	0x1d1a0c09
    544c:	31202e25 	.word	0x31202e25
    5450:	3b36      	.short	0x3b36
    5452:	7810      	ldrb	r0, [r2, #0]
    5454:	7018      	strb	r0, [r3, #0]
    5456:	e035      	b.n	54c4 <sdc_cfg_set+0xa4>
    5458:	7810      	ldrb	r0, [r2, #0]
    545a:	7058      	strb	r0, [r3, #1]
    545c:	e032      	b.n	54c4 <sdc_cfg_set+0xa4>
    545e:	7890      	ldrb	r0, [r2, #2]
    5460:	b1f0      	cbz	r0, 54a0 <sdc_cfg_set+0x80>
    5462:	78d0      	ldrb	r0, [r2, #3]
    5464:	b1e0      	cbz	r0, 54a0 <sdc_cfg_set+0x80>
    5466:	7810      	ldrb	r0, [r2, #0]
    5468:	281b      	cmp	r0, #27
    546a:	d336      	bcc.n	54da <sdc_cfg_set+0xba>
    546c:	7850      	ldrb	r0, [r2, #1]
    546e:	281b      	cmp	r0, #27
    5470:	d333      	bcc.n	54da <sdc_cfg_set+0xba>
    5472:	6810      	ldr	r0, [r2, #0]
    5474:	f8c3 0005 	str.w	r0, [r3, #5]
    5478:	e024      	b.n	54c4 <sdc_cfg_set+0xa4>
    547a:	6810      	ldr	r0, [r2, #0]
    547c:	60d8      	str	r0, [r3, #12]
    547e:	e021      	b.n	54c4 <sdc_cfg_set+0xa4>
    5480:	7810      	ldrb	r0, [r2, #0]
    5482:	7098      	strb	r0, [r3, #2]
    5484:	e01e      	b.n	54c4 <sdc_cfg_set+0xa4>
    5486:	7811      	ldrb	r1, [r2, #0]
    5488:	2900      	cmp	r1, #0
    548a:	d1d2      	bne.n	5432 <sdc_cfg_set+0x12>
    548c:	70d9      	strb	r1, [r3, #3]
    548e:	e019      	b.n	54c4 <sdc_cfg_set+0xa4>
    5490:	78e0      	ldrb	r0, [r4, #3]
    5492:	b110      	cbz	r0, 549a <sdc_cfg_set+0x7a>
    5494:	7810      	ldrb	r0, [r2, #0]
    5496:	2802      	cmp	r0, #2
    5498:	d31f      	bcc.n	54da <sdc_cfg_set+0xba>
    549a:	7810      	ldrb	r0, [r2, #0]
    549c:	7418      	strb	r0, [r3, #16]
    549e:	e011      	b.n	54c4 <sdc_cfg_set+0xa4>
    54a0:	e01b      	b.n	54da <sdc_cfg_set+0xba>
    54a2:	8810      	ldrh	r0, [r2, #0]
    54a4:	8258      	strh	r0, [r3, #18]
    54a6:	e00d      	b.n	54c4 <sdc_cfg_set+0xa4>
    54a8:	7811      	ldrb	r1, [r2, #0]
    54aa:	2900      	cmp	r1, #0
    54ac:	d1c1      	bne.n	5432 <sdc_cfg_set+0x12>
    54ae:	7119      	strb	r1, [r3, #4]
    54b0:	e008      	b.n	54c4 <sdc_cfg_set+0xa4>
    54b2:	7810      	ldrb	r0, [r2, #0]
    54b4:	2802      	cmp	r0, #2
    54b6:	d310      	bcc.n	54da <sdc_cfg_set+0xba>
    54b8:	7518      	strb	r0, [r3, #20]
    54ba:	e003      	b.n	54c4 <sdc_cfg_set+0xa4>
    54bc:	7811      	ldrb	r1, [r2, #0]
    54be:	2900      	cmp	r1, #0
    54c0:	d1b7      	bne.n	5432 <sdc_cfg_set+0x12>
    54c2:	7559      	strb	r1, [r3, #21]
    54c4:	2201      	movs	r2, #1
    54c6:	4908      	ldr	r1, [pc, #32]	; (54e8 <sdc_cfg_set+0xc8>)
    54c8:	2000      	movs	r0, #0
    54ca:	f008 fbff 	bl	dccc <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    54ce:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    54d2:	db04      	blt.n	54de <sdc_cfg_set+0xbe>
    54d4:	f06f 000b 	mvn.w	r0, #11
    54d8:	bd70      	pop	{r4, r5, r6, pc}
    54da:	4628      	mov	r0, r5
    54dc:	bd70      	pop	{r4, r5, r6, pc}
    54de:	2101      	movs	r1, #1
    54e0:	70a1      	strb	r1, [r4, #2]
    54e2:	bd70      	pop	{r4, r5, r6, pc}
    54e4:	20000098 	.word	0x20000098
    54e8:	2000131c 	.word	0x2000131c

000054ec <sdc_enable>:
    54ec:	b570      	push	{r4, r5, r6, lr}
    54ee:	460c      	mov	r4, r1
    54f0:	0005      	movs	r5, r0
    54f2:	d019      	beq.n	5528 <sdc_enable+0x3c>
    54f4:	b1c4      	cbz	r4, 5528 <sdc_enable+0x3c>
    54f6:	f000 f925 	bl	5744 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    54fa:	b1c0      	cbz	r0, 552e <sdc_enable+0x42>
    54fc:	4628      	mov	r0, r5
    54fe:	f7ff fe4d 	bl	519c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5502:	4d0c      	ldr	r5, [pc, #48]	; (5534 <sdc_enable+0x48>)
    5504:	2200      	movs	r2, #0
    5506:	490c      	ldr	r1, [pc, #48]	; (5538 <sdc_enable+0x4c>)
    5508:	7028      	strb	r0, [r5, #0]
    550a:	4620      	mov	r0, r4
    550c:	f008 fbde 	bl	dccc <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    5510:	f00c f9f1 	bl	118f6 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    5514:	2100      	movs	r1, #0
    5516:	7828      	ldrb	r0, [r5, #0]
    5518:	f006 fb28 	bl	bb6c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    551c:	f7ff ff44 	bl	53a8 <mpsl_fem_device_config_254_apply_get+0xc>
    5520:	2001      	movs	r0, #1
    5522:	7068      	strb	r0, [r5, #1]
    5524:	2000      	movs	r0, #0
    5526:	bd70      	pop	{r4, r5, r6, pc}
    5528:	f06f 0015 	mvn.w	r0, #21
    552c:	bd70      	pop	{r4, r5, r6, pc}
    552e:	f04f 30ff 	mov.w	r0, #4294967295
    5532:	bd70      	pop	{r4, r5, r6, pc}
    5534:	20000098 	.word	0x20000098
    5538:	2000131c 	.word	0x2000131c

0000553c <sdc_init>:
    553c:	b530      	push	{r4, r5, lr}
    553e:	b087      	sub	sp, #28
    5540:	0005      	movs	r5, r0
    5542:	d00c      	beq.n	555e <sdc_init+0x22>
    5544:	f7ff fdd0 	bl	50e8 <mpsl_is_initialized>
    5548:	f04f 34ff 	mov.w	r4, #4294967295
    554c:	b120      	cbz	r0, 5558 <sdc_init+0x1c>
    554e:	f7ff fc77 	bl	4e40 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    5552:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    5556:	d905      	bls.n	5564 <sdc_init+0x28>
    5558:	4620      	mov	r0, r4
    555a:	b007      	add	sp, #28
    555c:	bd30      	pop	{r4, r5, pc}
    555e:	f06f 0015 	mvn.w	r0, #21
    5562:	e7fa      	b.n	555a <sdc_init+0x1e>
    5564:	4c15      	ldr	r4, [pc, #84]	; (55bc <sdc_init+0x80>)
    5566:	4816      	ldr	r0, [pc, #88]	; (55c0 <sdc_init+0x84>)
    5568:	6065      	str	r5, [r4, #4]
    556a:	f000 f9f5 	bl	5958 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    556e:	2000      	movs	r0, #0
    5570:	7060      	strb	r0, [r4, #1]
    5572:	70a0      	strb	r0, [r4, #2]
    5574:	70e0      	strb	r0, [r4, #3]
    5576:	4601      	mov	r1, r0
    5578:	2218      	movs	r2, #24
    557a:	4668      	mov	r0, sp
    557c:	f008 fb04 	bl	db88 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5580:	2218      	movs	r2, #24
    5582:	4910      	ldr	r1, [pc, #64]	; (55c4 <sdc_init+0x88>)
    5584:	4668      	mov	r0, sp
    5586:	f008 fa85 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    558a:	2218      	movs	r2, #24
    558c:	4669      	mov	r1, sp
    558e:	480e      	ldr	r0, [pc, #56]	; (55c8 <sdc_init+0x8c>)
    5590:	f008 fa80 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5594:	f3ef 8410 	mrs	r4, PRIMASK
    5598:	b672      	cpsid	i
    559a:	f06f 000c 	mvn.w	r0, #12
    559e:	f000 fd57 	bl	6050 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    55a2:	480a      	ldr	r0, [pc, #40]	; (55cc <sdc_init+0x90>)
    55a4:	f000 fe22 	bl	61ec <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    55a8:	b118      	cbz	r0, 55b2 <sdc_init+0x76>
    55aa:	219e      	movs	r1, #158	; 0x9e
    55ac:	2003      	movs	r0, #3
    55ae:	f000 f80f 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    55b2:	b904      	cbnz	r4, 55b6 <sdc_init+0x7a>
    55b4:	b662      	cpsie	i
    55b6:	2000      	movs	r0, #0
    55b8:	e7cf      	b.n	555a <sdc_init+0x1e>
    55ba:	0000      	.short	0x0000
    55bc:	20000098 	.word	0x20000098
    55c0:	000053a9 	.word	0x000053a9
    55c4:	000056e0 	.word	0x000056e0
    55c8:	2000131c 	.word	0x2000131c
    55cc:	00005771 	.word	0x00005771

000055d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    55d0:	b50e      	push	{r1, r2, r3, lr}
    55d2:	b672      	cpsid	i
    55d4:	4a15      	ldr	r2, [pc, #84]	; (562c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    55d6:	6855      	ldr	r5, [r2, #4]
    55d8:	b1dd      	cbz	r5, 5612 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    55da:	2200      	movs	r2, #0
    55dc:	4603      	mov	r3, r0
    55de:	466e      	mov	r6, sp
    55e0:	240a      	movs	r4, #10
    55e2:	e003      	b.n	55ec <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    55e4:	fbb0 f0f4 	udiv	r0, r0, r4
    55e8:	1c52      	adds	r2, r2, #1
    55ea:	b2d2      	uxtb	r2, r2
    55ec:	2800      	cmp	r0, #0
    55ee:	d1f9      	bne.n	55e4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    55f0:	54b0      	strb	r0, [r6, r2]
    55f2:	e00a      	b.n	560a <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    55f4:	b2d8      	uxtb	r0, r3
    55f6:	fbb0 f7f4 	udiv	r7, r0, r4
    55fa:	fbb3 f3f4 	udiv	r3, r3, r4
    55fe:	fb04 0017 	mls	r0, r4, r7, r0
    5602:	1e52      	subs	r2, r2, #1
    5604:	b2d2      	uxtb	r2, r2
    5606:	3030      	adds	r0, #48	; 0x30
    5608:	54b0      	strb	r0, [r6, r2]
    560a:	2a00      	cmp	r2, #0
    560c:	d1f2      	bne.n	55f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    560e:	4630      	mov	r0, r6
    5610:	47a8      	blx	r5
    5612:	f3bf 8f4f 	dsb	sy
    5616:	4806      	ldr	r0, [pc, #24]	; (5630 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    5618:	6801      	ldr	r1, [r0, #0]
    561a:	4a06      	ldr	r2, [pc, #24]	; (5634 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    561c:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    5620:	4311      	orrs	r1, r2
    5622:	6001      	str	r1, [r0, #0]
    5624:	f3bf 8f4f 	dsb	sy
    5628:	bf00      	nop
    562a:	e7fd      	b.n	5628 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    562c:	20000098 	.word	0x20000098
    5630:	e000ed0c 	.word	0xe000ed0c
    5634:	05fa0004 	.word	0x05fa0004

00005638 <sdc_support_adv>:
    5638:	4806      	ldr	r0, [pc, #24]	; (5654 <sdc_support_adv+0x1c>)
    563a:	b510      	push	{r4, lr}
    563c:	7881      	ldrb	r1, [r0, #2]
    563e:	7840      	ldrb	r0, [r0, #1]
    5640:	4301      	orrs	r1, r0
    5642:	d002      	beq.n	564a <sdc_support_adv+0x12>
    5644:	f04f 30ff 	mov.w	r0, #4294967295
    5648:	bd10      	pop	{r4, pc}
    564a:	f006 faad 	bl	bba8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    564e:	2000      	movs	r0, #0
    5650:	bd10      	pop	{r4, pc}
    5652:	0000      	.short	0x0000
    5654:	20000098 	.word	0x20000098

00005658 <sdc_support_dle_peripheral>:
    5658:	4806      	ldr	r0, [pc, #24]	; (5674 <sdc_support_dle_peripheral+0x1c>)
    565a:	b510      	push	{r4, lr}
    565c:	7881      	ldrb	r1, [r0, #2]
    565e:	7840      	ldrb	r0, [r0, #1]
    5660:	4301      	orrs	r1, r0
    5662:	d002      	beq.n	566a <sdc_support_dle_peripheral+0x12>
    5664:	f04f 30ff 	mov.w	r0, #4294967295
    5668:	bd10      	pop	{r4, pc}
    566a:	f006 f84f 	bl	b70c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
    566e:	2000      	movs	r0, #0
    5670:	bd10      	pop	{r4, pc}
    5672:	0000      	.short	0x0000
    5674:	20000098 	.word	0x20000098

00005678 <sdc_support_le_2m_phy>:
    5678:	4807      	ldr	r0, [pc, #28]	; (5698 <sdc_support_le_2m_phy+0x20>)
    567a:	b510      	push	{r4, lr}
    567c:	7881      	ldrb	r1, [r0, #2]
    567e:	7840      	ldrb	r0, [r0, #1]
    5680:	4301      	orrs	r1, r0
    5682:	d002      	beq.n	568a <sdc_support_le_2m_phy+0x12>
    5684:	f04f 30ff 	mov.w	r0, #4294967295
    5688:	bd10      	pop	{r4, pc}
    568a:	f00b fec2 	bl	11412 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    568e:	f00b fed0 	bl	11432 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    5692:	2000      	movs	r0, #0
    5694:	bd10      	pop	{r4, pc}
    5696:	0000      	.short	0x0000
    5698:	20000098 	.word	0x20000098

0000569c <sdc_support_peripheral>:
    569c:	4806      	ldr	r0, [pc, #24]	; (56b8 <sdc_support_peripheral+0x1c>)
    569e:	b510      	push	{r4, lr}
    56a0:	7881      	ldrb	r1, [r0, #2]
    56a2:	7840      	ldrb	r0, [r0, #1]
    56a4:	4301      	orrs	r1, r0
    56a6:	d002      	beq.n	56ae <sdc_support_peripheral+0x12>
    56a8:	f04f 30ff 	mov.w	r0, #4294967295
    56ac:	bd10      	pop	{r4, pc}
    56ae:	f006 fa8d 	bl	bbcc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    56b2:	2000      	movs	r0, #0
    56b4:	bd10      	pop	{r4, pc}
    56b6:	0000      	.short	0x0000
    56b8:	20000098 	.word	0x20000098

000056bc <sdc_support_phy_update_peripheral>:
    56bc:	4806      	ldr	r0, [pc, #24]	; (56d8 <sdc_support_phy_update_peripheral+0x1c>)
    56be:	b510      	push	{r4, lr}
    56c0:	7881      	ldrb	r1, [r0, #2]
    56c2:	7840      	ldrb	r0, [r0, #1]
    56c4:	4301      	orrs	r1, r0
    56c6:	d002      	beq.n	56ce <sdc_support_phy_update_peripheral+0x12>
    56c8:	f04f 30ff 	mov.w	r0, #4294967295
    56cc:	bd10      	pop	{r4, pc}
    56ce:	f00b feb0 	bl	11432 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    56d2:	2000      	movs	r0, #0
    56d4:	bd10      	pop	{r4, pc}
    56d6:	0000      	.short	0x0000
    56d8:	20000098 	.word	0x20000098
    56dc:	00000001 	.word	0x00000001
    56e0:	00010101 	.word	0x00010101
    56e4:	031b1b00 	.word	0x031b1b00
    56e8:	00000002 	.word	0x00000002
    56ec:	00001d4c 	.word	0x00001d4c
    56f0:	001f0003 	.word	0x001f0003
    56f4:	00000000 	.word	0x00000000
    56f8:	f1925c29 	.word	0xf1925c29
    56fc:	d1928136 	.word	0xd1928136
    5700:	f1f0a9b7 	.word	0xf1f0a9b7
    5704:	194ce999 	.word	0x194ce999
    5708:	4a83231f 	.word	0x4a83231f

0000570c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    570c:	4a05      	ldr	r2, [pc, #20]	; (5724 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    570e:	b510      	push	{r4, lr}
    5710:	6852      	ldr	r2, [r2, #4]
    5712:	b112      	cbz	r2, 571a <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    5714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5718:	4710      	bx	r2
    571a:	2192      	movs	r1, #146	; 0x92
    571c:	2004      	movs	r0, #4
    571e:	f7ff ff57 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5722:	0000      	.short	0x0000
    5724:	20001334 	.word	0x20001334

00005728 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    5728:	4a05      	ldr	r2, [pc, #20]	; (5740 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    572a:	b510      	push	{r4, lr}
    572c:	6892      	ldr	r2, [r2, #8]
    572e:	b112      	cbz	r2, 5736 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    5730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5734:	4710      	bx	r2
    5736:	2198      	movs	r1, #152	; 0x98
    5738:	2004      	movs	r0, #4
    573a:	f7ff ff49 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    573e:	0000      	.short	0x0000
    5740:	20001334 	.word	0x20001334

00005744 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    5744:	4805      	ldr	r0, [pc, #20]	; (575c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    5746:	6801      	ldr	r1, [r0, #0]
    5748:	b129      	cbz	r1, 5756 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    574a:	6841      	ldr	r1, [r0, #4]
    574c:	b119      	cbz	r1, 5756 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    574e:	6880      	ldr	r0, [r0, #8]
    5750:	b108      	cbz	r0, 5756 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    5752:	2001      	movs	r0, #1
    5754:	4770      	bx	lr
    5756:	2000      	movs	r0, #0
    5758:	4770      	bx	lr
    575a:	0000      	.short	0x0000
    575c:	20001334 	.word	0x20001334

00005760 <sdc_rand_source_register>:
    5760:	4902      	ldr	r1, [pc, #8]	; (576c <sdc_rand_source_register+0xc>)
    5762:	c80d      	ldmia	r0, {r0, r2, r3}
    5764:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    5768:	2000      	movs	r0, #0
    576a:	4770      	bx	lr
    576c:	20001334 	.word	0x20001334

00005770 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    5770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5772:	4c12      	ldr	r4, [pc, #72]	; (57bc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    5774:	2600      	movs	r6, #0
    5776:	6825      	ldr	r5, [r4, #0]
    5778:	e011      	b.n	579e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    577a:	9800      	ldr	r0, [sp, #0]
    577c:	2802      	cmp	r0, #2
    577e:	d002      	beq.n	5786 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    5780:	2803      	cmp	r0, #3
    5782:	d10c      	bne.n	579e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    5784:	e006      	b.n	5794 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    5786:	6820      	ldr	r0, [r4, #0]
    5788:	b110      	cbz	r0, 5790 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    578a:	2000      	movs	r0, #0
    578c:	6026      	str	r6, [r4, #0]
    578e:	e005      	b.n	579c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    5790:	2128      	movs	r1, #40	; 0x28
    5792:	e00c      	b.n	57ae <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    5794:	6820      	ldr	r0, [r4, #0]
    5796:	b168      	cbz	r0, 57b4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    5798:	2001      	movs	r0, #1
    579a:	6026      	str	r6, [r4, #0]
    579c:	47a8      	blx	r5
    579e:	4668      	mov	r0, sp
    57a0:	f000 fcf6 	bl	6190 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    57a4:	2800      	cmp	r0, #0
    57a6:	d0e8      	beq.n	577a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    57a8:	2805      	cmp	r0, #5
    57aa:	d005      	beq.n	57b8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    57ac:	2135      	movs	r1, #53	; 0x35
    57ae:	2004      	movs	r0, #4
    57b0:	f7ff ff0e 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57b4:	212d      	movs	r1, #45	; 0x2d
    57b6:	e7fa      	b.n	57ae <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    57b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    57ba:	0000      	.short	0x0000
    57bc:	200000a0 	.word	0x200000a0
    57c0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    57c2:	4c1f      	ldr	r4, [pc, #124]	; (5840 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    57c4:	4605      	mov	r5, r0
    57c6:	7820      	ldrb	r0, [r4, #0]
    57c8:	b140      	cbz	r0, 57dc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    57ca:	78a2      	ldrb	r2, [r4, #2]
    57cc:	1c61      	adds	r1, r4, #1
    57ce:	4628      	mov	r0, r5
    57d0:	1c92      	adds	r2, r2, #2
    57d2:	f008 f95f 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    57d6:	2000      	movs	r0, #0
    57d8:	7020      	strb	r0, [r4, #0]
    57da:	e021      	b.n	5820 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    57dc:	4819      	ldr	r0, [pc, #100]	; (5844 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    57de:	f002 f821 	bl	7824 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    57e2:	2800      	cmp	r0, #0
    57e4:	d01d      	beq.n	5822 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    57e6:	4c17      	ldr	r4, [pc, #92]	; (5844 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    57e8:	7820      	ldrb	r0, [r4, #0]
    57ea:	2811      	cmp	r0, #17
    57ec:	d104      	bne.n	57f8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    57ee:	210a      	movs	r1, #10
    57f0:	203e      	movs	r0, #62	; 0x3e
    57f2:	f008 faf6 	bl	dde2 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    57f6:	b118      	cbz	r0, 5800 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    57f8:	7820      	ldrb	r0, [r4, #0]
    57fa:	2808      	cmp	r0, #8
    57fc:	d005      	beq.n	580a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    57fe:	e009      	b.n	5814 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    5800:	4910      	ldr	r1, [pc, #64]	; (5844 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    5802:	4628      	mov	r0, r5
    5804:	f008 fcf6 	bl	e1f4 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    5808:	e00a      	b.n	5820 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    580a:	2105      	movs	r1, #5
    580c:	203e      	movs	r0, #62	; 0x3e
    580e:	f008 fae8 	bl	dde2 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    5812:	b138      	cbz	r0, 5824 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    5814:	490b      	ldr	r1, [pc, #44]	; (5844 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    5816:	4628      	mov	r0, r5
    5818:	f008 fb3f 	bl	de9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    581c:	2800      	cmp	r0, #0
    581e:	d000      	beq.n	5822 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    5820:	2001      	movs	r0, #1
    5822:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    5824:	88a0      	ldrh	r0, [r4, #4]
    5826:	f8ad 0000 	strh.w	r0, [sp]
    582a:	a901      	add	r1, sp, #4
    582c:	4668      	mov	r0, sp
    582e:	f008 fe14 	bl	e45a <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    5832:	2800      	cmp	r0, #0
    5834:	d0f5      	beq.n	5822 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    5836:	219c      	movs	r1, #156	; 0x9c
    5838:	2008      	movs	r0, #8
    583a:	f7ff fec9 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    583e:	0000      	.short	0x0000
    5840:	200014d2 	.word	0x200014d2
    5844:	200013d0 	.word	0x200013d0
    5848:	b570      	push	{r4, r5, r6, lr}
    584a:	780a      	ldrb	r2, [r1, #0]
    584c:	7082      	strb	r2, [r0, #2]
    584e:	b33a      	cbz	r2, 58a0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    5850:	2a01      	cmp	r2, #1
    5852:	d825      	bhi.n	58a0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    5854:	2313      	movs	r3, #19
    5856:	7003      	strb	r3, [r0, #0]
    5858:	2300      	movs	r3, #0
    585a:	e00a      	b.n	5872 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
    585c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    5860:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    5864:	78a6      	ldrb	r6, [r4, #2]
    5866:	70ee      	strb	r6, [r5, #3]
    5868:	8864      	ldrh	r4, [r4, #2]
    586a:	0a24      	lsrs	r4, r4, #8
    586c:	1c5b      	adds	r3, r3, #1
    586e:	712c      	strb	r4, [r5, #4]
    5870:	b2db      	uxtb	r3, r3
    5872:	4293      	cmp	r3, r2
    5874:	d3f2      	bcc.n	585c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    5876:	2300      	movs	r3, #0
    5878:	e00b      	b.n	5892 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
    587a:	bf00      	nop
    587c:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    5880:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    5884:	792e      	ldrb	r6, [r5, #4]
    5886:	7166      	strb	r6, [r4, #5]
    5888:	88ad      	ldrh	r5, [r5, #4]
    588a:	0a2d      	lsrs	r5, r5, #8
    588c:	1c5b      	adds	r3, r3, #1
    588e:	71a5      	strb	r5, [r4, #6]
    5890:	b2db      	uxtb	r3, r3
    5892:	4293      	cmp	r3, r2
    5894:	d3f2      	bcc.n	587c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
    5896:	2101      	movs	r1, #1
    5898:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    589c:	b2c0      	uxtb	r0, r0
    589e:	bd70      	pop	{r4, r5, r6, pc}
    58a0:	2000      	movs	r0, #0
    58a2:	bd70      	pop	{r4, r5, r6, pc}

000058a4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    58a4:	2840      	cmp	r0, #64	; 0x40
    58a6:	d203      	bcs.n	58b0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    58a8:	1e40      	subs	r0, r0, #1
    58aa:	b2c1      	uxtb	r1, r0
    58ac:	4805      	ldr	r0, [pc, #20]	; (58c4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    58ae:	e005      	b.n	58bc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    58b0:	28ff      	cmp	r0, #255	; 0xff
    58b2:	d005      	beq.n	58c0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    58b4:	3840      	subs	r0, #64	; 0x40
    58b6:	b2c1      	uxtb	r1, r0
    58b8:	4802      	ldr	r0, [pc, #8]	; (58c4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    58ba:	3008      	adds	r0, #8
    58bc:	f008 bcc4 	b.w	e248 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    58c0:	2001      	movs	r0, #1
    58c2:	4770      	bx	lr
    58c4:	200000a4 	.word	0x200000a4

000058c8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    58c8:	1e40      	subs	r0, r0, #1
    58ca:	b2c1      	uxtb	r1, r0
    58cc:	4801      	ldr	r0, [pc, #4]	; (58d4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    58ce:	f008 bcbb 	b.w	e248 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    58d2:	0000      	.short	0x0000
    58d4:	200000b4 	.word	0x200000b4

000058d8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    58d8:	4902      	ldr	r1, [pc, #8]	; (58e4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    58da:	6802      	ldr	r2, [r0, #0]
    58dc:	610a      	str	r2, [r1, #16]
    58de:	6840      	ldr	r0, [r0, #4]
    58e0:	6148      	str	r0, [r1, #20]
    58e2:	4770      	bx	lr
    58e4:	200000a4 	.word	0x200000a4

000058e8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    58e8:	4905      	ldr	r1, [pc, #20]	; (5900 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    58ea:	6802      	ldr	r2, [r0, #0]
    58ec:	600a      	str	r2, [r1, #0]
    58ee:	6840      	ldr	r0, [r0, #4]
    58f0:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    58f4:	600a      	str	r2, [r1, #0]
    58f6:	4a03      	ldr	r2, [pc, #12]	; (5904 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    58f8:	4310      	orrs	r0, r2
    58fa:	6048      	str	r0, [r1, #4]
    58fc:	4770      	bx	lr
    58fe:	0000      	.short	0x0000
    5900:	200000a4 	.word	0x200000a4
    5904:	024007f8 	.word	0x024007f8

00005908 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    5908:	4902      	ldr	r1, [pc, #8]	; (5914 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    590a:	6802      	ldr	r2, [r0, #0]
    590c:	608a      	str	r2, [r1, #8]
    590e:	6840      	ldr	r0, [r0, #4]
    5910:	60c8      	str	r0, [r1, #12]
    5912:	4770      	bx	lr
    5914:	200000a4 	.word	0x200000a4

00005918 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    5918:	4807      	ldr	r0, [pc, #28]	; (5938 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    591a:	f04f 31ff 	mov.w	r1, #4294967295
    591e:	2200      	movs	r2, #0
    5920:	6001      	str	r1, [r0, #0]
    5922:	0cc9      	lsrs	r1, r1, #19
    5924:	6041      	str	r1, [r0, #4]
    5926:	f100 0108 	add.w	r1, r0, #8
    592a:	201f      	movs	r0, #31
    592c:	600a      	str	r2, [r1, #0]
    592e:	604a      	str	r2, [r1, #4]
    5930:	3108      	adds	r1, #8
    5932:	e9c1 0200 	strd	r0, r2, [r1]
    5936:	4770      	bx	lr
    5938:	200000a4 	.word	0x200000a4

0000593c <sdc_hci_cmd_cb_reset>:
    593c:	b510      	push	{r4, lr}
    593e:	f7ff ffeb 	bl	5918 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    5942:	f00b fcdf 	bl	11304 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    5946:	4604      	mov	r4, r0
    5948:	4802      	ldr	r0, [pc, #8]	; (5954 <sdc_hci_cmd_cb_reset+0x18>)
    594a:	6800      	ldr	r0, [r0, #0]
    594c:	b100      	cbz	r0, 5950 <sdc_hci_cmd_cb_reset+0x14>
    594e:	4780      	blx	r0
    5950:	4620      	mov	r0, r4
    5952:	bd10      	pop	{r4, pc}
    5954:	200000bc 	.word	0x200000bc

00005958 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    5958:	4901      	ldr	r1, [pc, #4]	; (5960 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    595a:	6008      	str	r0, [r1, #0]
    595c:	4770      	bx	lr
    595e:	0000      	.short	0x0000
    5960:	200000bc 	.word	0x200000bc

00005964 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    5964:	2102      	movs	r1, #2
    5966:	8001      	strh	r1, [r0, #0]
    5968:	8041      	strh	r1, [r0, #2]
    596a:	2100      	movs	r1, #0
    596c:	7101      	strb	r1, [r0, #4]
    596e:	2129      	movs	r1, #41	; 0x29
    5970:	7141      	strb	r1, [r0, #5]
    5972:	f249 215c 	movw	r1, #37468	; 0x925c
    5976:	80c1      	strh	r1, [r0, #6]
    5978:	4901      	ldr	r1, [pc, #4]	; (5980 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    597a:	6081      	str	r1, [r0, #8]
    597c:	2000      	movs	r0, #0
    597e:	4770      	bx	lr
    5980:	928136f1 	.word	0x928136f1

00005984 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    5984:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    5986:	4604      	mov	r4, r0
    5988:	4669      	mov	r1, sp
    598a:	f009 f8bf 	bl	eb0c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    598e:	b170      	cbz	r0, 59ae <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    5990:	f240 215a 	movw	r1, #602	; 0x25a
    5994:	e008      	b.n	59a8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    5996:	bf00      	nop
    5998:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    599c:	4621      	mov	r1, r4
    599e:	f000 f8ab 	bl	5af8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    59a2:	b120      	cbz	r0, 59ae <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    59a4:	f240 215f 	movw	r1, #607	; 0x25f
    59a8:	2017      	movs	r0, #23
    59aa:	f7ff fe11 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59ae:	4668      	mov	r0, sp
    59b0:	f000 f852 	bl	5a58 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    59b4:	2800      	cmp	r0, #0
    59b6:	d0ef      	beq.n	5998 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    59b8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

000059bc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    59bc:	b510      	push	{r4, lr}
    59be:	2802      	cmp	r0, #2
    59c0:	d304      	bcc.n	59cc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    59c2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    59c6:	2017      	movs	r0, #23
    59c8:	f7ff fe02 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59cc:	4901      	ldr	r1, [pc, #4]	; (59d4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    59ce:	5c08      	ldrb	r0, [r1, r0]
    59d0:	bd10      	pop	{r4, pc}
    59d2:	0000      	.short	0x0000
    59d4:	20001340 	.word	0x20001340

000059d8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    59d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59da:	0005      	movs	r5, r0
    59dc:	9500      	str	r5, [sp, #0]
    59de:	d010      	beq.n	5a02 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
    59e0:	2600      	movs	r6, #0
    59e2:	7808      	ldrb	r0, [r1, #0]
    59e4:	7849      	ldrb	r1, [r1, #1]
    59e6:	4604      	mov	r4, r0
    59e8:	42a1      	cmp	r1, r4
    59ea:	d900      	bls.n	59ee <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    59ec:	460c      	mov	r4, r1
    59ee:	1cea      	adds	r2, r5, #3
    59f0:	f022 0203 	bic.w	r2, r2, #3
    59f4:	42aa      	cmp	r2, r5
    59f6:	d006      	beq.n	5a06 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    59f8:	f240 1179 	movw	r1, #377	; 0x179
    59fc:	2017      	movs	r0, #23
    59fe:	f7ff fde7 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a02:	2601      	movs	r6, #1
    5a04:	e7ed      	b.n	59e2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    5a06:	4f13      	ldr	r7, [pc, #76]	; (5a54 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    5a08:	7038      	strb	r0, [r7, #0]
    5a0a:	7079      	strb	r1, [r7, #1]
    5a0c:	4631      	mov	r1, r6
    5a0e:	4668      	mov	r0, sp
    5a10:	f000 f8ee 	bl	5bf0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    5a14:	2100      	movs	r1, #0
    5a16:	460b      	mov	r3, r1
    5a18:	9800      	ldr	r0, [sp, #0]
    5a1a:	1cc0      	adds	r0, r0, #3
    5a1c:	f020 0003 	bic.w	r0, r0, #3
    5a20:	9000      	str	r0, [sp, #0]
    5a22:	b96e      	cbnz	r6, 5a40 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    5a24:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    5a28:	60d0      	str	r0, [r2, #12]
    5a2a:	2000      	movs	r0, #0
    5a2c:	e006      	b.n	5a3c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    5a2e:	bf00      	nop
    5a30:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    5a34:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    5a38:	1c40      	adds	r0, r0, #1
    5a3a:	b2c0      	uxtb	r0, r0
    5a3c:	42a0      	cmp	r0, r4
    5a3e:	d3f7      	bcc.n	5a30 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    5a40:	9800      	ldr	r0, [sp, #0]
    5a42:	1c49      	adds	r1, r1, #1
    5a44:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5a48:	b2c9      	uxtb	r1, r1
    5a4a:	9000      	str	r0, [sp, #0]
    5a4c:	2902      	cmp	r1, #2
    5a4e:	d3e3      	bcc.n	5a18 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
    5a50:	1b40      	subs	r0, r0, r5
    5a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a54:	20001340 	.word	0x20001340

00005a58 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    5a58:	b570      	push	{r4, r5, r6, lr}
    5a5a:	4604      	mov	r4, r0
    5a5c:	f009 fa05 	bl	ee6a <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    5a60:	b108      	cbz	r0, 5a66 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    5a62:	2010      	movs	r0, #16
    5a64:	bd70      	pop	{r4, r5, r6, pc}
    5a66:	7825      	ldrb	r5, [r4, #0]
    5a68:	f000 f8fe 	bl	5c68 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    5a6c:	4602      	mov	r2, r0
    5a6e:	480c      	ldr	r0, [pc, #48]	; (5aa0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    5a70:	8861      	ldrh	r1, [r4, #2]
    5a72:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5a76:	e00e      	b.n	5a96 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    5a78:	68c3      	ldr	r3, [r0, #12]
    5a7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5a7e:	b143      	cbz	r3, 5a92 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    5a80:	1c4a      	adds	r2, r1, #1
    5a82:	8062      	strh	r2, [r4, #2]
    5a84:	80a1      	strh	r1, [r4, #4]
    5a86:	68c0      	ldr	r0, [r0, #12]
    5a88:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    5a8c:	60a0      	str	r0, [r4, #8]
    5a8e:	2000      	movs	r0, #0
    5a90:	bd70      	pop	{r4, r5, r6, pc}
    5a92:	1c49      	adds	r1, r1, #1
    5a94:	b289      	uxth	r1, r1
    5a96:	4291      	cmp	r1, r2
    5a98:	d3ee      	bcc.n	5a78 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    5a9a:	8061      	strh	r1, [r4, #2]
    5a9c:	2005      	movs	r0, #5
    5a9e:	bd70      	pop	{r4, r5, r6, pc}
    5aa0:	20001340 	.word	0x20001340

00005aa4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    5aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5aa8:	b121      	cbz	r1, 5ab4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    5aaa:	2901      	cmp	r1, #1
    5aac:	d002      	beq.n	5ab4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    5aae:	2000      	movs	r0, #0
    5ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ab4:	4c0f      	ldr	r4, [pc, #60]	; (5af4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    5ab6:	2700      	movs	r7, #0
    5ab8:	463b      	mov	r3, r7
    5aba:	f64f 76ff 	movw	r6, #65535	; 0xffff
    5abe:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    5ac2:	f814 c001 	ldrb.w	ip, [r4, r1]
    5ac6:	e00a      	b.n	5ade <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    5ac8:	19dc      	adds	r4, r3, r7
    5aca:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    5ace:	b2a4      	uxth	r4, r4
    5ad0:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    5ad4:	f1be 0f00 	cmp.w	lr, #0
    5ad8:	d004      	beq.n	5ae4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    5ada:	1c5b      	adds	r3, r3, #1
    5adc:	b29b      	uxth	r3, r3
    5ade:	459c      	cmp	ip, r3
    5ae0:	d8f2      	bhi.n	5ac8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    5ae2:	4634      	mov	r4, r6
    5ae4:	8004      	strh	r4, [r0, #0]
    5ae6:	4620      	mov	r0, r4
    5ae8:	42b4      	cmp	r4, r6
    5aea:	d0e0      	beq.n	5aae <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    5aec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5af0:	f000 b834 	b.w	5b5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    5af4:	20001340 	.word	0x20001340

00005af8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    5af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5afc:	4606      	mov	r6, r0
    5afe:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    5b02:	460c      	mov	r4, r1
    5b04:	f243 0702 	movw	r7, #12290	; 0x3002
    5b08:	38ff      	subs	r0, #255	; 0xff
    5b0a:	d020      	beq.n	5b4e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    5b0c:	2c02      	cmp	r4, #2
    5b0e:	d302      	bcc.n	5b16 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    5b10:	2007      	movs	r0, #7
    5b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b16:	4630      	mov	r0, r6
    5b18:	f000 f85a 	bl	5bd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    5b1c:	0005      	movs	r5, r0
    5b1e:	d016      	beq.n	5b4e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    5b20:	480c      	ldr	r0, [pc, #48]	; (5b54 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    5b22:	4629      	mov	r1, r5
    5b24:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    5b28:	4630      	mov	r0, r6
    5b2a:	4790      	blx	r2
    5b2c:	480a      	ldr	r0, [pc, #40]	; (5b58 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    5b2e:	2100      	movs	r1, #0
    5b30:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    5b34:	68f8      	ldr	r0, [r7, #12]
    5b36:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    5b3a:	4620      	mov	r0, r4
    5b3c:	f000 f88a 	bl	5c54 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5b40:	4602      	mov	r2, r0
    5b42:	4629      	mov	r1, r5
    5b44:	6878      	ldr	r0, [r7, #4]
    5b46:	f008 ffc0 	bl	eaca <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5b4a:	2000      	movs	r0, #0
    5b4c:	e7e1      	b.n	5b12 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    5b4e:	4638      	mov	r0, r7
    5b50:	e7df      	b.n	5b12 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    5b52:	0000      	.short	0x0000
    5b54:	00005c88 	.word	0x00005c88
    5b58:	20001340 	.word	0x20001340
    5b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b60:	4690      	mov	r8, r2
    5b62:	460d      	mov	r5, r1
    5b64:	4607      	mov	r7, r0
    5b66:	f008 ffe2 	bl	eb2e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    5b6a:	b148      	cbz	r0, 5b80 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    5b6c:	4816      	ldr	r0, [pc, #88]	; (5bc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    5b6e:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    5b72:	68f0      	ldr	r0, [r6, #12]
    5b74:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    5b78:	b128      	cbz	r0, 5b86 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    5b7a:	f44f 719d 	mov.w	r1, #314	; 0x13a
    5b7e:	e015      	b.n	5bac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    5b80:	f240 1139 	movw	r1, #313	; 0x139
    5b84:	e012      	b.n	5bac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    5b86:	6870      	ldr	r0, [r6, #4]
    5b88:	2800      	cmp	r0, #0
    5b8a:	d01a      	beq.n	5bc2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    5b8c:	4628      	mov	r0, r5
    5b8e:	f000 f861 	bl	5c54 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5b92:	4601      	mov	r1, r0
    5b94:	6870      	ldr	r0, [r6, #4]
    5b96:	f008 ff40 	bl	ea1a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5b9a:	0004      	movs	r4, r0
    5b9c:	d010      	beq.n	5bc0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    5b9e:	68f0      	ldr	r0, [r6, #12]
    5ba0:	2d02      	cmp	r5, #2
    5ba2:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    5ba6:	d304      	bcc.n	5bb2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    5ba8:	f240 1145 	movw	r1, #325	; 0x145
    5bac:	2017      	movs	r0, #23
    5bae:	f7ff fd0f 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bb2:	4806      	ldr	r0, [pc, #24]	; (5bcc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    5bb4:	4642      	mov	r2, r8
    5bb6:	4621      	mov	r1, r4
    5bb8:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    5bbc:	4638      	mov	r0, r7
    5bbe:	4798      	blx	r3
    5bc0:	4620      	mov	r0, r4
    5bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5bc6:	0000      	.short	0x0000
    5bc8:	20001340 	.word	0x20001340
    5bcc:	00005c80 	.word	0x00005c80
    5bd0:	b570      	push	{r4, r5, r6, lr}
    5bd2:	460c      	mov	r4, r1
    5bd4:	4605      	mov	r5, r0
    5bd6:	f008 ffaa 	bl	eb2e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    5bda:	2800      	cmp	r0, #0
    5bdc:	d005      	beq.n	5bea <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    5bde:	4803      	ldr	r0, [pc, #12]	; (5bec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    5be0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5be4:	68c0      	ldr	r0, [r0, #12]
    5be6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    5bea:	bd70      	pop	{r4, r5, r6, pc}
    5bec:	20001340 	.word	0x20001340
    5bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5bf4:	4e16      	ldr	r6, [pc, #88]	; (5c50 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    5bf6:	4688      	mov	r8, r1
    5bf8:	4605      	mov	r5, r0
    5bfa:	2400      	movs	r4, #0
    5bfc:	6828      	ldr	r0, [r5, #0]
    5bfe:	1cc0      	adds	r0, r0, #3
    5c00:	f020 0003 	bic.w	r0, r0, #3
    5c04:	6028      	str	r0, [r5, #0]
    5c06:	4620      	mov	r0, r4
    5c08:	f000 f824 	bl	5c54 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5c0c:	5d31      	ldrb	r1, [r6, r4]
    5c0e:	4348      	muls	r0, r1
    5c10:	f1b8 0f00 	cmp.w	r8, #0
    5c14:	d001      	beq.n	5c1a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    5c16:	2200      	movs	r2, #0
    5c18:	e000      	b.n	5c1c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    5c1a:	682a      	ldr	r2, [r5, #0]
    5c1c:	4601      	mov	r1, r0
    5c1e:	9200      	str	r2, [sp, #0]
    5c20:	b132      	cbz	r2, 5c30 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    5c22:	2700      	movs	r7, #0
    5c24:	ea4f 000d 	mov.w	r0, sp
    5c28:	f008 ff28 	bl	ea7c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5c2c:	b11f      	cbz	r7, 5c36 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    5c2e:	e006      	b.n	5c3e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    5c30:	2701      	movs	r7, #1
    5c32:	2000      	movs	r0, #0
    5c34:	e7f8      	b.n	5c28 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    5c36:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    5c3a:	9a00      	ldr	r2, [sp, #0]
    5c3c:	604a      	str	r2, [r1, #4]
    5c3e:	6829      	ldr	r1, [r5, #0]
    5c40:	1c64      	adds	r4, r4, #1
    5c42:	4408      	add	r0, r1
    5c44:	b2e4      	uxtb	r4, r4
    5c46:	6028      	str	r0, [r5, #0]
    5c48:	2c02      	cmp	r4, #2
    5c4a:	d3d7      	bcc.n	5bfc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    5c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5c50:	20001340 	.word	0x20001340
    5c54:	4903      	ldr	r1, [pc, #12]	; (5c64 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    5c56:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    5c5a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    5c5e:	1cc0      	adds	r0, r0, #3
    5c60:	4008      	ands	r0, r1
    5c62:	4770      	bx	lr
    5c64:	00005c7c 	.word	0x00005c7c
    5c68:	4903      	ldr	r1, [pc, #12]	; (5c78 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    5c6a:	7808      	ldrb	r0, [r1, #0]
    5c6c:	7849      	ldrb	r1, [r1, #1]
    5c6e:	4288      	cmp	r0, r1
    5c70:	d200      	bcs.n	5c74 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    5c72:	4608      	mov	r0, r1
    5c74:	4770      	bx	lr
    5c76:	0000      	.short	0x0000
    5c78:	20001340 	.word	0x20001340
    5c7c:	011002a0 	.word	0x011002a0
    5c80:	0000eb43 	.word	0x0000eb43
    5c84:	0000eb43 	.word	0x0000eb43
    5c88:	000109b1 	.word	0x000109b1
    5c8c:	0000fcd1 	.word	0x0000fcd1

00005c90 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    5c90:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c94:	4c27      	ldr	r4, [pc, #156]	; (5d34 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa4>)
    5c96:	4606      	mov	r6, r0
    5c98:	b081      	sub	sp, #4
    5c9a:	6820      	ldr	r0, [r4, #0]
    5c9c:	469a      	mov	sl, r3
    5c9e:	4693      	mov	fp, r2
    5ca0:	b158      	cbz	r0, 5cba <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    5ca2:	7a01      	ldrb	r1, [r0, #8]
    5ca4:	42b1      	cmp	r1, r6
    5ca6:	d903      	bls.n	5cb0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    5ca8:	6840      	ldr	r0, [r0, #4]
    5caa:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    5cae:	b140      	cbz	r0, 5cc2 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    5cb0:	f243 0002 	movw	r0, #12290	; 0x3002
    5cb4:	b005      	add	sp, #20
    5cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5cba:	21a5      	movs	r1, #165	; 0xa5
    5cbc:	2018      	movs	r0, #24
    5cbe:	f7ff fc87 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5cc2:	4619      	mov	r1, r3
    5cc4:	9802      	ldr	r0, [sp, #8]
    5cc6:	f008 ff56 	bl	eb76 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    5cca:	4680      	mov	r8, r0
    5ccc:	4658      	mov	r0, fp
    5cce:	990e      	ldr	r1, [sp, #56]	; 0x38
    5cd0:	f008 ff47 	bl	eb62 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    5cd4:	4605      	mov	r5, r0
    5cd6:	eb08 0005 	add.w	r0, r8, r5
    5cda:	1d00      	adds	r0, r0, #4
    5cdc:	b287      	uxth	r7, r0
    5cde:	6820      	ldr	r0, [r4, #0]
    5ce0:	46a1      	mov	r9, r4
    5ce2:	4639      	mov	r1, r7
    5ce4:	6800      	ldr	r0, [r0, #0]
    5ce6:	f008 fe98 	bl	ea1a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5cea:	0004      	movs	r4, r0
    5cec:	d01f      	beq.n	5d2e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9e>
    5cee:	8067      	strh	r7, [r4, #2]
    5cf0:	8025      	strh	r5, [r4, #0]
    5cf2:	4629      	mov	r1, r5
    5cf4:	1d20      	adds	r0, r4, #4
    5cf6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5cf8:	4607      	mov	r7, r0
    5cfa:	465a      	mov	r2, fp
    5cfc:	2301      	movs	r3, #1
    5cfe:	9500      	str	r5, [sp, #0]
    5d00:	f008 fdea 	bl	e8d8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    5d04:	8820      	ldrh	r0, [r4, #0]
    5d06:	4641      	mov	r1, r8
    5d08:	4438      	add	r0, r7
    5d0a:	230a      	movs	r3, #10
    5d0c:	9a02      	ldr	r2, [sp, #8]
    5d0e:	f8cd a000 	str.w	sl, [sp]
    5d12:	f008 fde1 	bl	e8d8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    5d16:	8820      	ldrh	r0, [r4, #0]
    5d18:	19c1      	adds	r1, r0, r7
    5d1a:	4638      	mov	r0, r7
    5d1c:	f008 fe0d 	bl	e93a <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    5d20:	f8d9 0000 	ldr.w	r0, [r9]
    5d24:	6840      	ldr	r0, [r0, #4]
    5d26:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    5d2a:	2000      	movs	r0, #0
    5d2c:	e7c2      	b.n	5cb4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5d2e:	2004      	movs	r0, #4
    5d30:	e7c0      	b.n	5cb4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5d32:	0000      	.short	0x0000
    5d34:	200000c0 	.word	0x200000c0

00005d38 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    5d38:	b570      	push	{r4, r5, r6, lr}
    5d3a:	4c14      	ldr	r4, [pc, #80]	; (5d8c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    5d3c:	6823      	ldr	r3, [r4, #0]
    5d3e:	b18b      	cbz	r3, 5d64 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    5d40:	7a19      	ldrb	r1, [r3, #8]
    5d42:	4281      	cmp	r1, r0
    5d44:	d912      	bls.n	5d6c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    5d46:	685a      	ldr	r2, [r3, #4]
    5d48:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    5d4c:	b171      	cbz	r1, 5d6c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    5d4e:	2500      	movs	r5, #0
    5d50:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    5d54:	884a      	ldrh	r2, [r1, #2]
    5d56:	6818      	ldr	r0, [r3, #0]
    5d58:	f008 feb7 	bl	eaca <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5d5c:	6821      	ldr	r1, [r4, #0]
    5d5e:	2000      	movs	r0, #0
    5d60:	7a0a      	ldrb	r2, [r1, #8]
    5d62:	e00c      	b.n	5d7e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    5d64:	21c8      	movs	r1, #200	; 0xc8
    5d66:	2018      	movs	r0, #24
    5d68:	f7ff fc32 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d6c:	f243 0002 	movw	r0, #12290	; 0x3002
    5d70:	bd70      	pop	{r4, r5, r6, pc}
    5d72:	684b      	ldr	r3, [r1, #4]
    5d74:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5d78:	b933      	cbnz	r3, 5d88 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    5d7a:	1c40      	adds	r0, r0, #1
    5d7c:	b2c0      	uxtb	r0, r0
    5d7e:	4282      	cmp	r2, r0
    5d80:	d8f7      	bhi.n	5d72 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    5d82:	6808      	ldr	r0, [r1, #0]
    5d84:	f008 fe96 	bl	eab4 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    5d88:	2000      	movs	r0, #0
    5d8a:	bd70      	pop	{r4, r5, r6, pc}
    5d8c:	200000c0 	.word	0x200000c0

00005d90 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    5d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d94:	460d      	mov	r5, r1
    5d96:	0004      	movs	r4, r0
    5d98:	4690      	mov	r8, r2
    5d9a:	f04f 0600 	mov.w	r6, #0
    5d9e:	d009      	beq.n	5db4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    5da0:	2700      	movs	r7, #0
    5da2:	1ce0      	adds	r0, r4, #3
    5da4:	f020 0003 	bic.w	r0, r0, #3
    5da8:	42a0      	cmp	r0, r4
    5daa:	d005      	beq.n	5db8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    5dac:	2186      	movs	r1, #134	; 0x86
    5dae:	2018      	movs	r0, #24
    5db0:	f7ff fc0e 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5db4:	2701      	movs	r7, #1
    5db6:	e7f4      	b.n	5da2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    5db8:	b1cd      	cbz	r5, 5dee <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5dba:	4611      	mov	r1, r2
    5dbc:	2000      	movs	r0, #0
    5dbe:	f008 fe5d 	bl	ea7c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5dc2:	300c      	adds	r0, #12
    5dc4:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    5dc8:	b98f      	cbnz	r7, 5dee <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5dca:	4f0a      	ldr	r7, [pc, #40]	; (5df4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    5dcc:	f104 000c 	add.w	r0, r4, #12
    5dd0:	00aa      	lsls	r2, r5, #2
    5dd2:	603c      	str	r4, [r7, #0]
    5dd4:	7225      	strb	r5, [r4, #8]
    5dd6:	6060      	str	r0, [r4, #4]
    5dd8:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5ddc:	6020      	str	r0, [r4, #0]
    5dde:	2100      	movs	r1, #0
    5de0:	6860      	ldr	r0, [r4, #4]
    5de2:	f007 fed1 	bl	db88 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5de6:	4641      	mov	r1, r8
    5de8:	6838      	ldr	r0, [r7, #0]
    5dea:	f008 fe47 	bl	ea7c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5dee:	4630      	mov	r0, r6
    5df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5df4:	200000c0 	.word	0x200000c0

00005df8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    5df8:	b570      	push	{r4, r5, r6, lr}
    5dfa:	4d08      	ldr	r5, [pc, #32]	; (5e1c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    5dfc:	6828      	ldr	r0, [r5, #0]
    5dfe:	2800      	cmp	r0, #0
    5e00:	d00a      	beq.n	5e18 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    5e02:	2400      	movs	r4, #0
    5e04:	e004      	b.n	5e10 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    5e06:	4620      	mov	r0, r4
    5e08:	f7ff ff96 	bl	5d38 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    5e0c:	1c64      	adds	r4, r4, #1
    5e0e:	b2e4      	uxtb	r4, r4
    5e10:	6828      	ldr	r0, [r5, #0]
    5e12:	7a00      	ldrb	r0, [r0, #8]
    5e14:	42a0      	cmp	r0, r4
    5e16:	d8f6      	bhi.n	5e06 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    5e18:	bd70      	pop	{r4, r5, r6, pc}
    5e1a:	0000      	.short	0x0000
    5e1c:	200000c0 	.word	0x200000c0

00005e20 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    5e20:	4909      	ldr	r1, [pc, #36]	; (5e48 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    5e22:	b510      	push	{r4, lr}
    5e24:	4602      	mov	r2, r0
    5e26:	6809      	ldr	r1, [r1, #0]
    5e28:	2000      	movs	r0, #0
    5e2a:	b149      	cbz	r1, 5e40 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    5e2c:	7a0b      	ldrb	r3, [r1, #8]
    5e2e:	4293      	cmp	r3, r2
    5e30:	d905      	bls.n	5e3e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5e32:	6849      	ldr	r1, [r1, #4]
    5e34:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5e38:	2900      	cmp	r1, #0
    5e3a:	d000      	beq.n	5e3e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5e3c:	1d08      	adds	r0, r1, #4
    5e3e:	bd10      	pop	{r4, pc}
    5e40:	21ee      	movs	r1, #238	; 0xee
    5e42:	2018      	movs	r0, #24
    5e44:	f7ff fbc4 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e48:	200000c0 	.word	0x200000c0

00005e4c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    5e4c:	490a      	ldr	r1, [pc, #40]	; (5e78 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    5e4e:	b510      	push	{r4, lr}
    5e50:	4602      	mov	r2, r0
    5e52:	6809      	ldr	r1, [r1, #0]
    5e54:	2000      	movs	r0, #0
    5e56:	b159      	cbz	r1, 5e70 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    5e58:	7a0b      	ldrb	r3, [r1, #8]
    5e5a:	4293      	cmp	r3, r2
    5e5c:	d907      	bls.n	5e6e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5e5e:	6849      	ldr	r1, [r1, #4]
    5e60:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5e64:	2900      	cmp	r1, #0
    5e66:	d002      	beq.n	5e6e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5e68:	f831 0b04 	ldrh.w	r0, [r1], #4
    5e6c:	4408      	add	r0, r1
    5e6e:	bd10      	pop	{r4, pc}
    5e70:	21fc      	movs	r1, #252	; 0xfc
    5e72:	2018      	movs	r0, #24
    5e74:	f7ff fbac 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e78:	200000c0 	.word	0x200000c0
    5e7c:	b570      	push	{r4, r5, r6, lr}
    5e7e:	4b1e      	ldr	r3, [pc, #120]	; (5ef8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    5e80:	6845      	ldr	r5, [r0, #4]
    5e82:	4604      	mov	r4, r0
    5e84:	2200      	movs	r2, #0
    5e86:	b1a1      	cbz	r1, 5eb2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    5e88:	2001      	movs	r0, #1
    5e8a:	7060      	strb	r0, [r4, #1]
    5e8c:	8858      	ldrh	r0, [r3, #2]
    5e8e:	0881      	lsrs	r1, r0, #2
    5e90:	f05f 0000 	movs.w	r0, #0
    5e94:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    5e98:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    5e9c:	831a      	strh	r2, [r3, #24]
    5e9e:	8419      	strh	r1, [r3, #32]
    5ea0:	fb00 5301 	mla	r3, r0, r1, r5
    5ea4:	6073      	str	r3, [r6, #4]
    5ea6:	1823      	adds	r3, r4, r0
    5ea8:	1c40      	adds	r0, r0, #1
    5eaa:	751a      	strb	r2, [r3, #20]
    5eac:	2804      	cmp	r0, #4
    5eae:	d3f1      	bcc.n	5e94 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    5eb0:	bd70      	pop	{r4, r5, r6, pc}
    5eb2:	7062      	strb	r2, [r4, #1]
    5eb4:	f05f 0000 	movs.w	r0, #0
    5eb8:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    5ebc:	830a      	strh	r2, [r1, #24]
    5ebe:	840a      	strh	r2, [r1, #32]
    5ec0:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    5ec4:	604a      	str	r2, [r1, #4]
    5ec6:	1821      	adds	r1, r4, r0
    5ec8:	1c40      	adds	r0, r0, #1
    5eca:	750a      	strb	r2, [r1, #20]
    5ecc:	2804      	cmp	r0, #4
    5ece:	d3f3      	bcc.n	5eb8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    5ed0:	8858      	ldrh	r0, [r3, #2]
    5ed2:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    5ed6:	d201      	bcs.n	5edc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    5ed8:	0846      	lsrs	r6, r0, #1
    5eda:	e000      	b.n	5ede <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    5edc:	26ff      	movs	r6, #255	; 0xff
    5ede:	f008 febe 	bl	ec5e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    5ee2:	6065      	str	r5, [r4, #4]
    5ee4:	8420      	strh	r0, [r4, #32]
    5ee6:	1829      	adds	r1, r5, r0
    5ee8:	60a1      	str	r1, [r4, #8]
    5eea:	8466      	strh	r6, [r4, #34]	; 0x22
    5eec:	60e5      	str	r5, [r4, #12]
    5eee:	84a0      	strh	r0, [r4, #36]	; 0x24
    5ef0:	6121      	str	r1, [r4, #16]
    5ef2:	84e6      	strh	r6, [r4, #38]	; 0x26
    5ef4:	bd70      	pop	{r4, r5, r6, pc}
    5ef6:	0000      	.short	0x0000
    5ef8:	200000c4 	.word	0x200000c4

00005efc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    5efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f00:	b170      	cbz	r0, 5f20 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    5f02:	2500      	movs	r5, #0
    5f04:	4411      	add	r1, r2
    5f06:	b2cc      	uxtb	r4, r1
    5f08:	4e25      	ldr	r6, [pc, #148]	; (5fa0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa4>)
    5f0a:	1cc1      	adds	r1, r0, #3
    5f0c:	2700      	movs	r7, #0
    5f0e:	f021 0103 	bic.w	r1, r1, #3
    5f12:	7034      	strb	r4, [r6, #0]
    5f14:	4281      	cmp	r1, r0
    5f16:	d005      	beq.n	5f24 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    5f18:	214e      	movs	r1, #78	; 0x4e
    5f1a:	2009      	movs	r0, #9
    5f1c:	f7ff fb58 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f20:	2501      	movs	r5, #1
    5f22:	e7ef      	b.n	5f04 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    5f24:	2b1f      	cmp	r3, #31
    5f26:	d804      	bhi.n	5f32 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x36>
    5f28:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5f2c:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    5f30:	e009      	b.n	5f46 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    5f32:	0059      	lsls	r1, r3, #1
    5f34:	2bff      	cmp	r3, #255	; 0xff
    5f36:	d90c      	bls.n	5f52 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x56>
    5f38:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    5f3c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    5f40:	d200      	bcs.n	5f44 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5f42:	4611      	mov	r1, r2
    5f44:	b289      	uxth	r1, r1
    5f46:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    5f4a:	1cc9      	adds	r1, r1, #3
    5f4c:	4011      	ands	r1, r2
    5f4e:	b135      	cbz	r5, 5f5e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x62>
    5f50:	e007      	b.n	5f62 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x66>
    5f52:	227c      	movs	r2, #124	; 0x7c
    5f54:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    5f58:	d3f4      	bcc.n	5f44 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5f5a:	217c      	movs	r1, #124	; 0x7c
    5f5c:	e7f2      	b.n	5f44 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5f5e:	6070      	str	r0, [r6, #4]
    5f60:	8071      	strh	r1, [r6, #2]
    5f62:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    5f66:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    5f6a:	2200      	movs	r2, #0
    5f6c:	6876      	ldr	r6, [r6, #4]
    5f6e:	f04f 0c01 	mov.w	ip, #1
    5f72:	e00d      	b.n	5f90 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x94>
    5f74:	b94d      	cbnz	r5, 5f8a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    5f76:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    5f7a:	eb00 0e03 	add.w	lr, r0, r3
    5f7e:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    5f82:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    5f86:	f8c7 e004 	str.w	lr, [r7, #4]
    5f8a:	1c52      	adds	r2, r2, #1
    5f8c:	440b      	add	r3, r1
    5f8e:	b2d2      	uxtb	r2, r2
    5f90:	42a2      	cmp	r2, r4
    5f92:	d3ef      	bcc.n	5f74 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x78>
    5f94:	1ddb      	adds	r3, r3, #7
    5f96:	f023 0007 	bic.w	r0, r3, #7
    5f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f9e:	0000      	.short	0x0000
    5fa0:	200000c4 	.word	0x200000c4

00005fa4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    5fa4:	b570      	push	{r4, r5, r6, lr}
    5fa6:	4a10      	ldr	r2, [pc, #64]	; (5fe8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    5fa8:	2000      	movs	r0, #0
    5faa:	6851      	ldr	r1, [r2, #4]
    5fac:	7812      	ldrb	r2, [r2, #0]
    5fae:	e014      	b.n	5fda <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    5fb0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    5fb4:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    5fb8:	b16b      	cbz	r3, 5fd6 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    5fba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5fbe:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    5fc2:	d00c      	beq.n	5fde <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    5fc4:	2500      	movs	r5, #0
    5fc6:	70a5      	strb	r5, [r4, #2]
    5fc8:	2101      	movs	r1, #1
    5fca:	4620      	mov	r0, r4
    5fcc:	f7ff ff56 	bl	5e7c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    5fd0:	7025      	strb	r5, [r4, #0]
    5fd2:	4620      	mov	r0, r4
    5fd4:	bd70      	pop	{r4, r5, r6, pc}
    5fd6:	1c40      	adds	r0, r0, #1
    5fd8:	b2c0      	uxtb	r0, r0
    5fda:	4290      	cmp	r0, r2
    5fdc:	d3e8      	bcc.n	5fb0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    5fde:	21a9      	movs	r1, #169	; 0xa9
    5fe0:	2009      	movs	r0, #9
    5fe2:	f7ff faf5 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5fe6:	0000      	.short	0x0000
    5fe8:	200000c4 	.word	0x200000c4

00005fec <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    5fec:	4804      	ldr	r0, [pc, #16]	; (6000 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    5fee:	b510      	push	{r4, lr}
    5ff0:	8840      	ldrh	r0, [r0, #2]
    5ff2:	0884      	lsrs	r4, r0, #2
    5ff4:	f008 fe33 	bl	ec5e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    5ff8:	4284      	cmp	r4, r0
    5ffa:	d300      	bcc.n	5ffe <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    5ffc:	4620      	mov	r0, r4
    5ffe:	bd10      	pop	{r4, pc}
    6000:	200000c4 	.word	0x200000c4
    6004:	b530      	push	{r4, r5, lr}
    6006:	490d      	ldr	r1, [pc, #52]	; (603c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    6008:	2001      	movs	r0, #1
    600a:	6048      	str	r0, [r1, #4]
    600c:	1e82      	subs	r2, r0, #2
    600e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    6012:	490b      	ldr	r1, [pc, #44]	; (6040 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    6014:	6088      	str	r0, [r1, #8]
    6016:	2300      	movs	r3, #0
    6018:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    601c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    6020:	4c08      	ldr	r4, [pc, #32]	; (6044 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    6022:	6023      	str	r3, [r4, #0]
    6024:	1d25      	adds	r5, r4, #4
    6026:	6028      	str	r0, [r5, #0]
    6028:	6088      	str	r0, [r1, #8]
    602a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    602e:	6023      	str	r3, [r4, #0]
    6030:	6028      	str	r0, [r5, #0]
    6032:	4906      	ldr	r1, [pc, #24]	; (604c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    6034:	4804      	ldr	r0, [pc, #16]	; (6048 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    6036:	6008      	str	r0, [r1, #0]
    6038:	bd30      	pop	{r4, r5, pc}
    603a:	0000      	.short	0x0000
    603c:	4000e000 	.word	0x4000e000
    6040:	4000f000 	.word	0x4000f000
    6044:	4000f500 	.word	0x4000f500
    6048:	3ff60000 	.word	0x3ff60000
    604c:	4001f508 	.word	0x4001f508

00006050 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    6050:	b510      	push	{r4, lr}
    6052:	4604      	mov	r4, r0
    6054:	f7ff ffd6 	bl	6004 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    6058:	f008 fed4 	bl	ee04 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    605c:	f000 f888 	bl	6170 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    6060:	4905      	ldr	r1, [pc, #20]	; (6078 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    6062:	4804      	ldr	r0, [pc, #16]	; (6074 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    6064:	6008      	str	r0, [r1, #0]
    6066:	4620      	mov	r0, r4
    6068:	f000 f8b8 	bl	61dc <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    606c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6070:	f000 b8d0 	b.w	6214 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    6074:	3ff60000 	.word	0x3ff60000
    6078:	4001f508 	.word	0x4001f508
    607c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6080:	4682      	mov	sl, r0
    6082:	4838      	ldr	r0, [pc, #224]	; (6164 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    6084:	f007 fc6f 	bl	d966 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    6088:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 6164 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    608c:	b128      	cbz	r0, 609a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    608e:	2601      	movs	r6, #1
    6090:	f10b 0001 	add.w	r0, fp, #1
    6094:	21ff      	movs	r1, #255	; 0xff
    6096:	7001      	strb	r1, [r0, #0]
    6098:	e000      	b.n	609c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    609a:	2600      	movs	r6, #0
    609c:	f44f 7580 	mov.w	r5, #256	; 0x100
    60a0:	4c31      	ldr	r4, [pc, #196]	; (6168 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    60a2:	f04f 0800 	mov.w	r8, #0
    60a6:	1d2f      	adds	r7, r5, #4
    60a8:	2101      	movs	r1, #1
    60aa:	6061      	str	r1, [r4, #4]
    60ac:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    60b0:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    60b4:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    60b8:	6021      	str	r1, [r4, #0]
    60ba:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 616c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    60be:	e01c      	b.n	60fa <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    60c0:	f8d9 0000 	ldr.w	r0, [r9]
    60c4:	06c0      	lsls	r0, r0, #27
    60c6:	d518      	bpl.n	60fa <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    60c8:	200e      	movs	r0, #14
    60ca:	f008 feaa 	bl	ee22 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    60ce:	f3ef 8010 	mrs	r0, PRIMASK
    60d2:	9000      	str	r0, [sp, #0]
    60d4:	b672      	cpsid	i
    60d6:	2103      	movs	r1, #3
    60d8:	4620      	mov	r0, r4
    60da:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    60de:	4629      	mov	r1, r5
    60e0:	f008 feac 	bl	ee3c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    60e4:	b930      	cbnz	r0, 60f4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    60e6:	4639      	mov	r1, r7
    60e8:	4620      	mov	r0, r4
    60ea:	f008 fea7 	bl	ee3c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    60ee:	b908      	cbnz	r0, 60f4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    60f0:	f7ff f8c8 	bl	5284 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    60f4:	9800      	ldr	r0, [sp, #0]
    60f6:	b900      	cbnz	r0, 60fa <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    60f8:	b662      	cpsie	i
    60fa:	4629      	mov	r1, r5
    60fc:	4620      	mov	r0, r4
    60fe:	f008 fe9d 	bl	ee3c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    6102:	b928      	cbnz	r0, 6110 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    6104:	4639      	mov	r1, r7
    6106:	4620      	mov	r0, r4
    6108:	f008 fe98 	bl	ee3c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    610c:	2800      	cmp	r0, #0
    610e:	d0d7      	beq.n	60c0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    6110:	4639      	mov	r1, r7
    6112:	4620      	mov	r0, r4
    6114:	f008 fe92 	bl	ee3c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    6118:	2800      	cmp	r0, #0
    611a:	d1c5      	bne.n	60a8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    611c:	bb06      	cbnz	r6, 6160 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    611e:	f89b 1001 	ldrb.w	r1, [fp, #1]
    6122:	f88d 1000 	strb.w	r1, [sp]
    6126:	9900      	ldr	r1, [sp, #0]
    6128:	9100      	str	r1, [sp, #0]
    612a:	f89d 1000 	ldrb.w	r1, [sp]
    612e:	b109      	cbz	r1, 6134 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    6130:	2501      	movs	r5, #1
    6132:	e000      	b.n	6136 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    6134:	2500      	movs	r5, #0
    6136:	f10b 0001 	add.w	r0, fp, #1
    613a:	f880 8000 	strb.w	r8, [r0]
    613e:	2003      	movs	r0, #3
    6140:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    6144:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    6148:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    614c:	200e      	movs	r0, #14
    614e:	f008 fe68 	bl	ee22 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    6152:	4804      	ldr	r0, [pc, #16]	; (6164 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    6154:	f007 fc1e 	bl	d994 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    6158:	b115      	cbz	r5, 6160 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    615a:	2011      	movs	r0, #17
    615c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6160:	2000      	movs	r0, #0
    6162:	e7fb      	b.n	615c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    6164:	2000032c 	.word	0x2000032c
    6168:	4000e000 	.word	0x4000e000
    616c:	e000ed10 	.word	0xe000ed10

00006170 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    6170:	b510      	push	{r4, lr}
    6172:	4806      	ldr	r0, [pc, #24]	; (618c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    6174:	f007 fc0a 	bl	d98c <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    6178:	b118      	cbz	r0, 6182 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    617a:	2127      	movs	r1, #39	; 0x27
    617c:	201d      	movs	r0, #29
    617e:	f7ff fa27 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6182:	4802      	ldr	r0, [pc, #8]	; (618c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    6184:	2100      	movs	r1, #0
    6186:	7041      	strb	r1, [r0, #1]
    6188:	bd10      	pop	{r4, pc}
    618a:	0000      	.short	0x0000
    618c:	2000032c 	.word	0x2000032c

00006190 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    6190:	b570      	push	{r4, r5, r6, lr}
    6192:	4911      	ldr	r1, [pc, #68]	; (61d8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    6194:	680a      	ldr	r2, [r1, #0]
    6196:	b1ea      	cbz	r2, 61d4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    6198:	2300      	movs	r3, #0
    619a:	461d      	mov	r5, r3
    619c:	2401      	movs	r4, #1
    619e:	684a      	ldr	r2, [r1, #4]
    61a0:	1c52      	adds	r2, r2, #1
    61a2:	604a      	str	r2, [r1, #4]
    61a4:	2a09      	cmp	r2, #9
    61a6:	d300      	bcc.n	61aa <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    61a8:	604d      	str	r5, [r1, #4]
    61aa:	790e      	ldrb	r6, [r1, #4]
    61ac:	fa04 f206 	lsl.w	r2, r4, r6
    61b0:	680e      	ldr	r6, [r1, #0]
    61b2:	4216      	tst	r6, r2
    61b4:	d00b      	beq.n	61ce <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    61b6:	f3ef 8310 	mrs	r3, PRIMASK
    61ba:	b672      	cpsid	i
    61bc:	680c      	ldr	r4, [r1, #0]
    61be:	4394      	bics	r4, r2
    61c0:	600c      	str	r4, [r1, #0]
    61c2:	b903      	cbnz	r3, 61c6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    61c4:	b662      	cpsie	i
    61c6:	6849      	ldr	r1, [r1, #4]
    61c8:	6001      	str	r1, [r0, #0]
    61ca:	2000      	movs	r0, #0
    61cc:	bd70      	pop	{r4, r5, r6, pc}
    61ce:	1c5b      	adds	r3, r3, #1
    61d0:	2b09      	cmp	r3, #9
    61d2:	d3e4      	bcc.n	619e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    61d4:	2005      	movs	r0, #5
    61d6:	bd70      	pop	{r4, r5, r6, pc}
    61d8:	200000cc 	.word	0x200000cc

000061dc <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    61dc:	4802      	ldr	r0, [pc, #8]	; (61e8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    61de:	2100      	movs	r1, #0
    61e0:	6001      	str	r1, [r0, #0]
    61e2:	6041      	str	r1, [r0, #4]
    61e4:	4770      	bx	lr
    61e6:	0000      	.short	0x0000
    61e8:	200000cc 	.word	0x200000cc

000061ec <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    61ec:	b510      	push	{r4, lr}
    61ee:	4c08      	ldr	r4, [pc, #32]	; (6210 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    61f0:	7861      	ldrb	r1, [r4, #1]
    61f2:	b109      	cbz	r1, 61f8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    61f4:	200f      	movs	r0, #15
    61f6:	bd10      	pop	{r4, pc}
    61f8:	f7fe ffd0 	bl	519c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    61fc:	7020      	strb	r0, [r4, #0]
    61fe:	28ff      	cmp	r0, #255	; 0xff
    6200:	d001      	beq.n	6206 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    6202:	2000      	movs	r0, #0
    6204:	bd10      	pop	{r4, pc}
    6206:	2178      	movs	r1, #120	; 0x78
    6208:	201f      	movs	r0, #31
    620a:	f7ff f9e1 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    620e:	0000      	.short	0x0000
    6210:	20000000 	.word	0x20000000

00006214 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    6214:	4901      	ldr	r1, [pc, #4]	; (621c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    6216:	2000      	movs	r0, #0
    6218:	7048      	strb	r0, [r1, #1]
    621a:	4770      	bx	lr
    621c:	20000000 	.word	0x20000000

00006220 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    6220:	4806      	ldr	r0, [pc, #24]	; (623c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    6222:	4a07      	ldr	r2, [pc, #28]	; (6240 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    6224:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    6226:	8852      	ldrh	r2, [r2, #2]
    6228:	4291      	cmp	r1, r2
    622a:	d104      	bne.n	6236 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    622c:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    6230:	b108      	cbz	r0, 6236 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    6232:	2000      	movs	r0, #0
    6234:	4770      	bx	lr
    6236:	2001      	movs	r0, #1
    6238:	4770      	bx	lr
    623a:	0000      	.short	0x0000
    623c:	200015d4 	.word	0x200015d4
    6240:	20000318 	.word	0x20000318

00006244 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    6244:	4901      	ldr	r1, [pc, #4]	; (624c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    6246:	8048      	strh	r0, [r1, #2]
    6248:	4770      	bx	lr
    624a:	0000      	.short	0x0000
    624c:	20000318 	.word	0x20000318

00006250 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    6250:	4808      	ldr	r0, [pc, #32]	; (6274 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    6252:	4a09      	ldr	r2, [pc, #36]	; (6278 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    6254:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    6256:	8852      	ldrh	r2, [r2, #2]
    6258:	4291      	cmp	r1, r2
    625a:	d109      	bne.n	6270 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    625c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6260:	8481      	strh	r1, [r0, #36]	; 0x24
    6262:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    6266:	b119      	cbz	r1, 6270 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    6268:	2100      	movs	r1, #0
    626a:	7001      	strb	r1, [r0, #0]
    626c:	2001      	movs	r0, #1
    626e:	4770      	bx	lr
    6270:	2000      	movs	r0, #0
    6272:	4770      	bx	lr
    6274:	200015d4 	.word	0x200015d4
    6278:	20000318 	.word	0x20000318

0000627c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    627c:	4807      	ldr	r0, [pc, #28]	; (629c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    627e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    6282:	2901      	cmp	r1, #1
    6284:	d007      	beq.n	6296 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    6286:	2101      	movs	r1, #1
    6288:	7001      	strb	r1, [r0, #0]
    628a:	4805      	ldr	r0, [pc, #20]	; (62a0 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    628c:	4903      	ldr	r1, [pc, #12]	; (629c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    628e:	8800      	ldrh	r0, [r0, #0]
    6290:	8488      	strh	r0, [r1, #36]	; 0x24
    6292:	2001      	movs	r0, #1
    6294:	4770      	bx	lr
    6296:	2000      	movs	r0, #0
    6298:	4770      	bx	lr
    629a:	0000      	.short	0x0000
    629c:	200015d4 	.word	0x200015d4
    62a0:	20000318 	.word	0x20000318

000062a4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    62a4:	4906      	ldr	r1, [pc, #24]	; (62c0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    62a6:	4b07      	ldr	r3, [pc, #28]	; (62c4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    62a8:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    62aa:	885b      	ldrh	r3, [r3, #2]
    62ac:	429a      	cmp	r2, r3
    62ae:	d105      	bne.n	62bc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    62b0:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    62b4:	b112      	cbz	r2, 62bc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    62b6:	6001      	str	r1, [r0, #0]
    62b8:	2001      	movs	r0, #1
    62ba:	4770      	bx	lr
    62bc:	2000      	movs	r0, #0
    62be:	4770      	bx	lr
    62c0:	200015d4 	.word	0x200015d4
    62c4:	20000318 	.word	0x20000318

000062c8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    62c8:	4909      	ldr	r1, [pc, #36]	; (62f0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    62ca:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    62cc:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    62d0:	3bff      	subs	r3, #255	; 0xff
    62d2:	d002      	beq.n	62da <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    62d4:	2100      	movs	r1, #0
    62d6:	6001      	str	r1, [r0, #0]
    62d8:	e007      	b.n	62ea <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    62da:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    62de:	4904      	ldr	r1, [pc, #16]	; (62f0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    62e0:	2a01      	cmp	r2, #1
    62e2:	d002      	beq.n	62ea <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    62e4:	6001      	str	r1, [r0, #0]
    62e6:	2001      	movs	r0, #1
    62e8:	4770      	bx	lr
    62ea:	2000      	movs	r0, #0
    62ec:	4770      	bx	lr
    62ee:	0000      	.short	0x0000
    62f0:	200015d4 	.word	0x200015d4

000062f4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    62f4:	4901      	ldr	r1, [pc, #4]	; (62fc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    62f6:	8008      	strh	r0, [r1, #0]
    62f8:	4770      	bx	lr
    62fa:	0000      	.short	0x0000
    62fc:	20000318 	.word	0x20000318

00006300 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    6300:	4905      	ldr	r1, [pc, #20]	; (6318 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    6302:	2000      	movs	r0, #0
    6304:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    6308:	f64f 70ff 	movw	r0, #65535	; 0xffff
    630c:	8488      	strh	r0, [r1, #36]	; 0x24
    630e:	4903      	ldr	r1, [pc, #12]	; (631c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    6310:	8008      	strh	r0, [r1, #0]
    6312:	8048      	strh	r0, [r1, #2]
    6314:	4770      	bx	lr
    6316:	0000      	.short	0x0000
    6318:	200015d4 	.word	0x200015d4
    631c:	20000318 	.word	0x20000318
    6320:	4905      	ldr	r1, [pc, #20]	; (6338 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    6322:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    6324:	4282      	cmp	r2, r0
    6326:	d105      	bne.n	6334 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    6328:	2000      	movs	r0, #0
    632a:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    632e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6332:	8488      	strh	r0, [r1, #36]	; 0x24
    6334:	4770      	bx	lr
    6336:	0000      	.short	0x0000
    6338:	200015d4 	.word	0x200015d4

0000633c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    633c:	4a0a      	ldr	r2, [pc, #40]	; (6368 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    633e:	b110      	cbz	r0, 6346 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    6340:	2801      	cmp	r0, #1
    6342:	d007      	beq.n	6354 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    6344:	e00e      	b.n	6364 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    6346:	7850      	ldrb	r0, [r2, #1]
    6348:	b160      	cbz	r0, 6364 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    634a:	f8d2 0002 	ldr.w	r0, [r2, #2]
    634e:	6008      	str	r0, [r1, #0]
    6350:	88d0      	ldrh	r0, [r2, #6]
    6352:	e004      	b.n	635e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    6354:	7810      	ldrb	r0, [r2, #0]
    6356:	b128      	cbz	r0, 6364 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    6358:	6890      	ldr	r0, [r2, #8]
    635a:	6008      	str	r0, [r1, #0]
    635c:	8990      	ldrh	r0, [r2, #12]
    635e:	8088      	strh	r0, [r1, #4]
    6360:	2001      	movs	r0, #1
    6362:	4770      	bx	lr
    6364:	2000      	movs	r0, #0
    6366:	4770      	bx	lr
    6368:	2000032e 	.word	0x2000032e

0000636c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    636c:	4a08      	ldr	r2, [pc, #32]	; (6390 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    636e:	2301      	movs	r3, #1
    6370:	b138      	cbz	r0, 6382 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    6372:	2801      	cmp	r0, #1
    6374:	d104      	bne.n	6380 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    6376:	7013      	strb	r3, [r2, #0]
    6378:	6808      	ldr	r0, [r1, #0]
    637a:	6090      	str	r0, [r2, #8]
    637c:	8888      	ldrh	r0, [r1, #4]
    637e:	8190      	strh	r0, [r2, #12]
    6380:	4770      	bx	lr
    6382:	7053      	strb	r3, [r2, #1]
    6384:	6808      	ldr	r0, [r1, #0]
    6386:	f8c2 0002 	str.w	r0, [r2, #2]
    638a:	8888      	ldrh	r0, [r1, #4]
    638c:	80d0      	strh	r0, [r2, #6]
    638e:	4770      	bx	lr
    6390:	2000032e 	.word	0x2000032e

00006394 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    6394:	4906      	ldr	r1, [pc, #24]	; (63b0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    6396:	b110      	cbz	r0, 639e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    6398:	2801      	cmp	r0, #1
    639a:	d002      	beq.n	63a2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    639c:	e005      	b.n	63aa <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    639e:	7848      	ldrb	r0, [r1, #1]
    63a0:	e000      	b.n	63a4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    63a2:	7808      	ldrb	r0, [r1, #0]
    63a4:	b108      	cbz	r0, 63aa <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    63a6:	2001      	movs	r0, #1
    63a8:	4770      	bx	lr
    63aa:	2000      	movs	r0, #0
    63ac:	4770      	bx	lr
    63ae:	0000      	.short	0x0000
    63b0:	2000032e 	.word	0x2000032e

000063b4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    63b4:	4901      	ldr	r1, [pc, #4]	; (63bc <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    63b6:	7708      	strb	r0, [r1, #28]
    63b8:	4770      	bx	lr
    63ba:	0000      	.short	0x0000
    63bc:	20000e8a 	.word	0x20000e8a

000063c0 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    63c0:	4801      	ldr	r0, [pc, #4]	; (63c8 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    63c2:	78c0      	ldrb	r0, [r0, #3]
    63c4:	4770      	bx	lr
    63c6:	0000      	.short	0x0000
    63c8:	200000d4 	.word	0x200000d4

000063cc <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    63cc:	4801      	ldr	r0, [pc, #4]	; (63d4 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    63ce:	7900      	ldrb	r0, [r0, #4]
    63d0:	4770      	bx	lr
    63d2:	0000      	.short	0x0000
    63d4:	200000d4 	.word	0x200000d4

000063d8 <sym_TMJZXA73A2C5DMM5JAVJMETINB7KCHBEWVPWZQI>:
    63d8:	4608      	mov	r0, r1
    63da:	2100      	movs	r1, #0
    63dc:	7041      	strb	r1, [r0, #1]
    63de:	211a      	movs	r1, #26
    63e0:	f800 1b04 	strb.w	r1, [r0], #4
    63e4:	220e      	movs	r2, #14
    63e6:	4901      	ldr	r1, [pc, #4]	; (63ec <sym_TMJZXA73A2C5DMM5JAVJMETINB7KCHBEWVPWZQI+0x14>)
    63e8:	f007 bb54 	b.w	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    63ec:	20000e98 	.word	0x20000e98

000063f0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    63f0:	b510      	push	{r4, lr}
    63f2:	4604      	mov	r4, r0
    63f4:	f000 f952 	bl	669c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    63f8:	b118      	cbz	r0, 6402 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    63fa:	21c2      	movs	r1, #194	; 0xc2
    63fc:	2027      	movs	r0, #39	; 0x27
    63fe:	f7ff f8e7 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6402:	4803      	ldr	r0, [pc, #12]	; (6410 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    6404:	2101      	movs	r1, #1
    6406:	f009 f933 	bl	f670 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    640a:	4802      	ldr	r0, [pc, #8]	; (6414 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    640c:	62c4      	str	r4, [r0, #44]	; 0x2c
    640e:	bd10      	pop	{r4, pc}
    6410:	20000e68 	.word	0x20000e68
    6414:	200000d4 	.word	0x200000d4

00006418 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    6418:	4901      	ldr	r1, [pc, #4]	; (6420 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    641a:	2001      	movs	r0, #1
    641c:	7188      	strb	r0, [r1, #6]
    641e:	4770      	bx	lr
    6420:	200000d4 	.word	0x200000d4

00006424 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    6424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6428:	4c5e      	ldr	r4, [pc, #376]	; (65a4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>)
    642a:	9d06      	ldr	r5, [sp, #24]
    642c:	7826      	ldrb	r6, [r4, #0]
    642e:	2e00      	cmp	r6, #0
    6430:	d16b      	bne.n	650a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    6432:	2a00      	cmp	r2, #0
    6434:	d069      	beq.n	650a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    6436:	2b00      	cmp	r3, #0
    6438:	d067      	beq.n	650a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    643a:	2d00      	cmp	r5, #0
    643c:	d065      	beq.n	650a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    643e:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    6442:	f104 0614 	add.w	r6, r4, #20
    6446:	2000      	movs	r0, #0
    6448:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    644c:	71a0      	strb	r0, [r4, #6]
    644e:	7160      	strb	r0, [r4, #5]
    6450:	70e0      	strb	r0, [r4, #3]
    6452:	70a0      	strb	r0, [r4, #2]
    6454:	7120      	strb	r0, [r4, #4]
    6456:	81a0      	strh	r0, [r4, #12]
    6458:	81e0      	strh	r0, [r4, #14]
    645a:	f000 f957 	bl	670c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    645e:	4606      	mov	r6, r0
    6460:	f000 f94e 	bl	6700 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6464:	4605      	mov	r5, r0
    6466:	f006 f813 	bl	c490 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    646a:	f005 fd6b 	bl	bf44 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    646e:	f995 0072 	ldrsb.w	r0, [r5, #114]	; 0x72
    6472:	f006 f891 	bl	c598 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    6476:	f105 001c 	add.w	r0, r5, #28
    647a:	f006 f963 	bl	c744 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    647e:	6968      	ldr	r0, [r5, #20]
    6480:	f006 f956 	bl	c730 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    6484:	f896 0024 	ldrb.w	r0, [r6, #36]	; 0x24
    6488:	f006 f990 	bl	c7ac <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    648c:	f104 0038 	add.w	r0, r4, #56	; 0x38
    6490:	6840      	ldr	r0, [r0, #4]
    6492:	f890 01c6 	ldrb.w	r0, [r0, #454]	; 0x1c6
    6496:	b108      	cbz	r0, 649c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    6498:	f005 ff7a 	bl	c390 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    649c:	f895 106f 	ldrb.w	r1, [r5, #111]	; 0x6f
    64a0:	2001      	movs	r0, #1
    64a2:	f005 feb9 	bl	c218 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    64a6:	2800      	cmp	r0, #0
    64a8:	d075      	beq.n	6596 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    64aa:	483f      	ldr	r0, [pc, #252]	; (65a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    64ac:	f005 ff20 	bl	c2f0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    64b0:	8828      	ldrh	r0, [r5, #0]
    64b2:	f7ff fccb 	bl	5e4c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    64b6:	6320      	str	r0, [r4, #48]	; 0x30
    64b8:	8828      	ldrh	r0, [r5, #0]
    64ba:	f7ff fcb1 	bl	5e20 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    64be:	6360      	str	r0, [r4, #52]	; 0x34
    64c0:	3678      	adds	r6, #120	; 0x78
    64c2:	483a      	ldr	r0, [pc, #232]	; (65ac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    64c4:	ce8e      	ldmia	r6!, {r1, r2, r3, r7}
    64c6:	f100 0808 	add.w	r8, r0, #8
    64ca:	e888 008e 	stmia.w	r8, {r1, r2, r3, r7}
    64ce:	f856 1b04 	ldr.w	r1, [r6], #4
    64d2:	f8c0 1021 	str.w	r1, [r0, #33]	; 0x21
    64d6:	f856 198c 	ldr.w	r1, [r6], #-140
    64da:	f8c0 1025 	str.w	r1, [r0, #37]	; 0x25
    64de:	f000 f999 	bl	6814 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x15c>
    64e2:	4601      	mov	r1, r0
    64e4:	8fa8      	ldrh	r0, [r5, #60]	; 0x3c
    64e6:	f008 fe34 	bl	f152 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    64ea:	8f29      	ldrh	r1, [r5, #56]	; 0x38
    64ec:	4281      	cmp	r1, r0
    64ee:	d200      	bcs.n	64f2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xce>
    64f0:	4608      	mov	r0, r1
    64f2:	7220      	strb	r0, [r4, #8]
    64f4:	46a0      	mov	r8, r4
    64f6:	f895 106f 	ldrb.w	r1, [r5, #111]	; 0x6f
    64fa:	f8b5 0042 	ldrh.w	r0, [r5, #66]	; 0x42
    64fe:	7d37      	ldrb	r7, [r6, #20]
    6500:	f8b5 4040 	ldrh.w	r4, [r5, #64]	; 0x40
    6504:	2908      	cmp	r1, #8
    6506:	d104      	bne.n	6512 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
    6508:	e002      	b.n	6510 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    650a:	f44f 718d 	mov.w	r1, #282	; 0x11a
    650e:	e046      	b.n	659e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17a>
    6510:	2104      	movs	r1, #4
    6512:	f008 fe1e 	bl	f152 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    6516:	b90f      	cbnz	r7, 651c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
    6518:	1d00      	adds	r0, r0, #4
    651a:	b280      	uxth	r0, r0
    651c:	4284      	cmp	r4, r0
    651e:	d200      	bcs.n	6522 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    6520:	4620      	mov	r0, r4
    6522:	b2c4      	uxtb	r4, r0
    6524:	f888 4009 	strb.w	r4, [r8, #9]
    6528:	7d31      	ldrb	r1, [r6, #20]
    652a:	2900      	cmp	r1, #0
    652c:	d002      	beq.n	6534 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    652e:	bf00      	nop
    6530:	f04f 0104 	mov.w	r1, #4
    6534:	4421      	add	r1, r4
    6536:	f888 1007 	strb.w	r1, [r8, #7]
    653a:	d014      	beq.n	6566 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x142>
    653c:	481b      	ldr	r0, [pc, #108]	; (65ac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    653e:	f04f 0701 	mov.w	r7, #1
    6542:	f100 0008 	add.w	r0, r0, #8
    6546:	7607      	strb	r7, [r0, #24]
    6548:	e9d6 121c 	ldrd	r1, r2, [r6, #112]	; 0x70
    654c:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6550:	f895 006f 	ldrb.w	r0, [r5, #111]	; 0x6f
    6554:	f008 fd03 	bl	ef5e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    6558:	4914      	ldr	r1, [pc, #80]	; (65ac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    655a:	4603      	mov	r3, r0
    655c:	4622      	mov	r2, r4
    655e:	3108      	adds	r1, #8
    6560:	4638      	mov	r0, r7
    6562:	f005 fc5b 	bl	be1c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    6566:	2001      	movs	r0, #1
    6568:	f000 fb9a 	bl	6ca0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    656c:	4810      	ldr	r0, [pc, #64]	; (65b0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    656e:	6800      	ldr	r0, [r0, #0]
    6570:	2803      	cmp	r0, #3
    6572:	d012      	beq.n	659a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    6574:	280b      	cmp	r0, #11
    6576:	d010      	beq.n	659a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    6578:	480c      	ldr	r0, [pc, #48]	; (65ac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    657a:	220e      	movs	r2, #14
    657c:	2100      	movs	r1, #0
    657e:	3052      	adds	r0, #82	; 0x52
    6580:	f007 fb02 	bl	db88 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6584:	4809      	ldr	r0, [pc, #36]	; (65ac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    6586:	88b1      	ldrh	r1, [r6, #4]
    6588:	3052      	adds	r0, #82	; 0x52
    658a:	8041      	strh	r1, [r0, #2]
    658c:	8829      	ldrh	r1, [r5, #0]
    658e:	8001      	strh	r1, [r0, #0]
    6590:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    6594:	7101      	strb	r1, [r0, #4]
    6596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    659a:	f240 11d5 	movw	r1, #469	; 0x1d5
    659e:	2027      	movs	r0, #39	; 0x27
    65a0:	f7ff f816 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65a4:	200000d4 	.word	0x200000d4
    65a8:	00006ea0 	.word	0x00006ea0
    65ac:	20000e38 	.word	0x20000e38
    65b0:	40001550 	.word	0x40001550

000065b4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    65b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    65b8:	4605      	mov	r5, r0
    65ba:	f000 f8a7 	bl	670c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    65be:	4e32      	ldr	r6, [pc, #200]	; (6688 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd4>)
    65c0:	4604      	mov	r4, r0
    65c2:	f04f 0800 	mov.w	r8, #0
    65c6:	6a70      	ldr	r0, [r6, #36]	; 0x24
    65c8:	7847      	ldrb	r7, [r0, #1]
    65ca:	b10d      	cbz	r5, 65d0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x1c>
    65cc:	2d01      	cmp	r5, #1
    65ce:	d101      	bne.n	65d4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    65d0:	f886 8001 	strb.w	r8, [r6, #1]
    65d4:	7870      	ldrb	r0, [r6, #1]
    65d6:	f04f 0901 	mov.w	r9, #1
    65da:	b150      	cbz	r0, 65f2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x3e>
    65dc:	2801      	cmp	r0, #1
    65de:	d01a      	beq.n	6616 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x62>
    65e0:	2802      	cmp	r0, #2
    65e2:	d034      	beq.n	664e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9a>
    65e4:	2803      	cmp	r0, #3
    65e6:	d048      	beq.n	667a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc6>
    65e8:	f240 411d 	movw	r1, #1053	; 0x41d
    65ec:	2027      	movs	r0, #39	; 0x27
    65ee:	f7fe ffef 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65f2:	2d01      	cmp	r5, #1
    65f4:	d032      	beq.n	665c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    65f6:	f000 f8f9 	bl	67ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    65fa:	4639      	mov	r1, r7
    65fc:	2201      	movs	r2, #1
    65fe:	6b70      	ldr	r0, [r6, #52]	; 0x34
    6600:	f008 f807 	bl	e612 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    6604:	e028      	b.n	6658 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa4>
    6606:	bf00      	nop
    6608:	f884 8008 	strb.w	r8, [r4, #8]
    660c:	e031      	b.n	6672 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    660e:	bf00      	nop
    6610:	f884 9008 	strb.w	r9, [r4, #8]
    6614:	e02d      	b.n	6672 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    6616:	2d01      	cmp	r5, #1
    6618:	d008      	beq.n	662c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>
    661a:	f000 f8e7 	bl	67ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    661e:	4639      	mov	r1, r7
    6620:	2200      	movs	r2, #0
    6622:	6b70      	ldr	r0, [r6, #52]	; 0x34
    6624:	f007 fff5 	bl	e612 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    6628:	2d02      	cmp	r5, #2
    662a:	d00b      	beq.n	6644 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    662c:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    6630:	1c40      	adds	r0, r0, #1
    6632:	f141 0100 	adc.w	r1, r1, #0
    6636:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    663a:	7a20      	ldrb	r0, [r4, #8]
    663c:	2801      	cmp	r0, #1
    663e:	d003      	beq.n	6648 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    6640:	f884 9008 	strb.w	r9, [r4, #8]
    6644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6648:	f884 8008 	strb.w	r8, [r4, #8]
    664c:	e7fa      	b.n	6644 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    664e:	2d01      	cmp	r5, #1
    6650:	d004      	beq.n	665c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    6652:	6b70      	ldr	r0, [r6, #52]	; 0x34
    6654:	f008 f9dc 	bl	ea10 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    6658:	2d02      	cmp	r5, #2
    665a:	d0f3      	beq.n	6644 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    665c:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    6660:	1c40      	adds	r0, r0, #1
    6662:	f141 0100 	adc.w	r1, r1, #0
    6666:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    666a:	7a20      	ldrb	r0, [r4, #8]
    666c:	2801      	cmp	r0, #1
    666e:	d1cf      	bne.n	6610 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x5c>
    6670:	e7ca      	b.n	6608 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x54>
    6672:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6676:	f001 b983 	b.w	7980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    667a:	2d01      	cmp	r5, #1
    667c:	d0e2      	beq.n	6644 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    667e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    6680:	f008 f9c6 	bl	ea10 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    6684:	e7f5      	b.n	6672 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    6686:	0000      	.short	0x0000
    6688:	200000d4 	.word	0x200000d4

0000668c <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    668c:	4802      	ldr	r0, [pc, #8]	; (6698 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    668e:	89c0      	ldrh	r0, [r0, #14]
    6690:	f3c0 2080 	ubfx	r0, r0, #10, #1
    6694:	4770      	bx	lr
    6696:	0000      	.short	0x0000
    6698:	200000d4 	.word	0x200000d4

0000669c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    669c:	4804      	ldr	r0, [pc, #16]	; (66b0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    669e:	7800      	ldrb	r0, [r0, #0]
    66a0:	b108      	cbz	r0, 66a6 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    66a2:	200c      	movs	r0, #12
    66a4:	4770      	bx	lr
    66a6:	4903      	ldr	r1, [pc, #12]	; (66b4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    66a8:	2000      	movs	r0, #0
    66aa:	7708      	strb	r0, [r1, #28]
    66ac:	4770      	bx	lr
    66ae:	0000      	.short	0x0000
    66b0:	200000d4 	.word	0x200000d4
    66b4:	20000e8a 	.word	0x20000e8a

000066b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    66b8:	480c      	ldr	r0, [pc, #48]	; (66ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    66ba:	b510      	push	{r4, lr}
    66bc:	7801      	ldrb	r1, [r0, #0]
    66be:	b149      	cbz	r1, 66d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    66c0:	f100 0138 	add.w	r1, r0, #56	; 0x38
    66c4:	7800      	ldrb	r0, [r0, #0]
    66c6:	2802      	cmp	r0, #2
    66c8:	d008      	beq.n	66dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    66ca:	f240 11f1 	movw	r1, #497	; 0x1f1
    66ce:	2027      	movs	r0, #39	; 0x27
    66d0:	f7fe ff7e 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    66d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    66d8:	f000 b9fe 	b.w	6ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    66dc:	6848      	ldr	r0, [r1, #4]
    66de:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
    66e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    66e6:	f005 be0b 	b.w	c300 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    66ea:	0000      	.short	0x0000
    66ec:	200000d4 	.word	0x200000d4
    66f0:	4a02      	ldr	r2, [pc, #8]	; (66fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    66f2:	8993      	ldrh	r3, [r2, #12]
    66f4:	4303      	orrs	r3, r0
    66f6:	8193      	strh	r3, [r2, #12]
    66f8:	6952      	ldr	r2, [r2, #20]
    66fa:	4710      	bx	r2
    66fc:	200000d4 	.word	0x200000d4
    6700:	4801      	ldr	r0, [pc, #4]	; (6708 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    6702:	6840      	ldr	r0, [r0, #4]
    6704:	4770      	bx	lr
    6706:	0000      	.short	0x0000
    6708:	2000010c 	.word	0x2000010c
    670c:	4801      	ldr	r0, [pc, #4]	; (6714 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    670e:	6840      	ldr	r0, [r0, #4]
    6710:	3078      	adds	r0, #120	; 0x78
    6712:	4770      	bx	lr
    6714:	2000010c 	.word	0x2000010c
    6718:	4a01      	ldr	r2, [pc, #4]	; (6720 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    671a:	2100      	movs	r1, #0
    671c:	6952      	ldr	r2, [r2, #20]
    671e:	4710      	bx	r2
    6720:	200000d4 	.word	0x200000d4
    6724:	b570      	push	{r4, r5, r6, lr}
    6726:	f7ff fff1 	bl	670c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    672a:	4604      	mov	r4, r0
    672c:	f7ff ffe8 	bl	6700 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6730:	4605      	mov	r5, r0
    6732:	4621      	mov	r1, r4
    6734:	f008 fd9e 	bl	f274 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    6738:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
    673c:	2901      	cmp	r1, #1
    673e:	d112      	bne.n	6766 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xae>
    6740:	2800      	cmp	r0, #0
    6742:	d010      	beq.n	6766 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xae>
    6744:	4808      	ldr	r0, [pc, #32]	; (6768 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>)
    6746:	882a      	ldrh	r2, [r5, #0]
    6748:	6841      	ldr	r1, [r0, #4]
    674a:	f501 7096 	add.w	r0, r1, #300	; 0x12c
    674e:	8142      	strh	r2, [r0, #10]
    6750:	7a62      	ldrb	r2, [r4, #9]
    6752:	7302      	strb	r2, [r0, #12]
    6754:	7aa2      	ldrb	r2, [r4, #10]
    6756:	7342      	strb	r2, [r0, #13]
    6758:	2218      	movs	r2, #24
    675a:	f001 f83f 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    675e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6762:	f001 b90d 	b.w	7980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6766:	bd70      	pop	{r4, r5, r6, pc}
    6768:	2000010c 	.word	0x2000010c
    676c:	b570      	push	{r4, r5, r6, lr}
    676e:	4605      	mov	r5, r0
    6770:	2901      	cmp	r1, #1
    6772:	d818      	bhi.n	67a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    6774:	4c12      	ldr	r4, [pc, #72]	; (67c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>)
    6776:	69a1      	ldr	r1, [r4, #24]
    6778:	4788      	blx	r1
    677a:	b1a0      	cbz	r0, 67a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    677c:	7960      	ldrb	r0, [r4, #5]
    677e:	b990      	cbnz	r0, 67a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    6780:	b9e5      	cbnz	r5, 67bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    6782:	f104 0010 	add.w	r0, r4, #16
    6786:	7801      	ldrb	r1, [r0, #0]
    6788:	06c8      	lsls	r0, r1, #27
    678a:	d405      	bmi.n	6798 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe0>
    678c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    678e:	7800      	ldrb	r0, [r0, #0]
    6790:	06c0      	lsls	r0, r0, #27
    6792:	d401      	bmi.n	6798 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe0>
    6794:	2001      	movs	r0, #1
    6796:	e000      	b.n	679a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    6798:	2000      	movs	r0, #0
    679a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    679c:	b92a      	cbnz	r2, 67aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    679e:	8962      	ldrh	r2, [r4, #10]
    67a0:	b11a      	cbz	r2, 67aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    67a2:	06c9      	lsls	r1, r1, #27
    67a4:	d401      	bmi.n	67aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    67a6:	2001      	movs	r0, #1
    67a8:	bd70      	pop	{r4, r5, r6, pc}
    67aa:	89a1      	ldrh	r1, [r4, #12]
    67ac:	078a      	lsls	r2, r1, #30
    67ae:	d503      	bpl.n	67b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
    67b0:	6a22      	ldr	r2, [r4, #32]
    67b2:	78d2      	ldrb	r2, [r2, #3]
    67b4:	2a02      	cmp	r2, #2
    67b6:	d001      	beq.n	67bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    67b8:	4308      	orrs	r0, r1
    67ba:	d1f4      	bne.n	67a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    67bc:	2000      	movs	r0, #0
    67be:	bd70      	pop	{r4, r5, r6, pc}
    67c0:	200000d4 	.word	0x200000d4
    67c4:	b530      	push	{r4, r5, lr}
    67c6:	4b08      	ldr	r3, [pc, #32]	; (67e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>)
    67c8:	88dd      	ldrh	r5, [r3, #6]
    67ca:	891c      	ldrh	r4, [r3, #8]
    67cc:	b12a      	cbz	r2, 67da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x122>
    67ce:	b908      	cbnz	r0, 67d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    67d0:	b905      	cbnz	r5, 67d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    67d2:	b114      	cbz	r4, 67da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x122>
    67d4:	8958      	ldrh	r0, [r3, #10]
    67d6:	1c40      	adds	r0, r0, #1
    67d8:	8158      	strh	r0, [r3, #10]
    67da:	b111      	cbz	r1, 67e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12a>
    67dc:	1c6d      	adds	r5, r5, #1
    67de:	80dd      	strh	r5, [r3, #6]
    67e0:	bd30      	pop	{r4, r5, pc}
    67e2:	1c64      	adds	r4, r4, #1
    67e4:	811c      	strh	r4, [r3, #8]
    67e6:	bd30      	pop	{r4, r5, pc}
    67e8:	20000e8a 	.word	0x20000e8a
    67ec:	b510      	push	{r4, lr}
    67ee:	4c08      	ldr	r4, [pc, #32]	; (6810 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x158>)
    67f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    67f2:	b138      	cbz	r0, 6804 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x14c>
    67f4:	8962      	ldrh	r2, [r4, #10]
    67f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    67f8:	1cd2      	adds	r2, r2, #3
    67fa:	f007 f94b 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    67fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6800:	6260      	str	r0, [r4, #36]	; 0x24
    6802:	bd10      	pop	{r4, pc}
    6804:	f240 4163 	movw	r1, #1123	; 0x463
    6808:	2027      	movs	r0, #39	; 0x27
    680a:	f7fe fee1 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    680e:	0000      	.short	0x0000
    6810:	200000d4 	.word	0x200000d4
    6814:	b510      	push	{r4, lr}
    6816:	f7ff ff73 	bl	6700 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    681a:	4604      	mov	r4, r0
    681c:	f7ff ff76 	bl	670c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6820:	4601      	mov	r1, r0
    6822:	7b42      	ldrb	r2, [r0, #13]
    6824:	4815      	ldr	r0, [pc, #84]	; (687c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c4>)
    6826:	2a24      	cmp	r2, #36	; 0x24
    6828:	d00e      	beq.n	6848 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x190>
    682a:	7b89      	ldrb	r1, [r1, #14]
    682c:	2924      	cmp	r1, #36	; 0x24
    682e:	d00b      	beq.n	6848 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x190>
    6830:	2a1f      	cmp	r2, #31
    6832:	d00d      	beq.n	6850 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    6834:	2a20      	cmp	r2, #32
    6836:	d00b      	beq.n	6850 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    6838:	2922      	cmp	r1, #34	; 0x22
    683a:	d00f      	beq.n	685c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
    683c:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    6840:	2804      	cmp	r0, #4
    6842:	d100      	bne.n	6846 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18e>
    6844:	2008      	movs	r0, #8
    6846:	bd10      	pop	{r4, pc}
    6848:	6840      	ldr	r0, [r0, #4]
    684a:	f890 1276 	ldrb.w	r1, [r0, #630]	; 0x276
    684e:	e00e      	b.n	686e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b6>
    6850:	2922      	cmp	r1, #34	; 0x22
    6852:	d003      	beq.n	685c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
    6854:	6840      	ldr	r0, [r0, #4]
    6856:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    685a:	e005      	b.n	6868 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b0>
    685c:	6841      	ldr	r1, [r0, #4]
    685e:	f891 0126 	ldrb.w	r0, [r1, #294]	; 0x126
    6862:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    6866:	4008      	ands	r0, r1
    6868:	f008 fb6f 	bl	ef4a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    686c:	4601      	mov	r1, r0
    686e:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    6872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6876:	f008 bb80 	b.w	ef7a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    687a:	0000      	.short	0x0000
    687c:	2000010c 	.word	0x2000010c
    6880:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6884:	468b      	mov	fp, r1
    6886:	4607      	mov	r7, r0
    6888:	f7ff ff40 	bl	670c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    688c:	f04f 0900 	mov.w	r9, #0
    6890:	4c61      	ldr	r4, [pc, #388]	; (6a18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>)
    6892:	4605      	mov	r5, r0
    6894:	f88d 9000 	strb.w	r9, [sp]
    6898:	f8cd 9004 	str.w	r9, [sp, #4]
    689c:	7820      	ldrb	r0, [r4, #0]
    689e:	464e      	mov	r6, r9
    68a0:	2802      	cmp	r0, #2
    68a2:	d004      	beq.n	68ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f6>
    68a4:	f240 41ea 	movw	r1, #1258	; 0x4ea
    68a8:	2027      	movs	r0, #39	; 0x27
    68aa:	f7fe fe91 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    68ae:	7ba0      	ldrb	r0, [r4, #14]
    68b0:	0640      	lsls	r0, r0, #25
    68b2:	d406      	bmi.n	68c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    68b4:	2040      	movs	r0, #64	; 0x40
    68b6:	f7ff ff2f 	bl	6718 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    68ba:	89e0      	ldrh	r0, [r4, #14]
    68bc:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    68c0:	81e0      	strh	r0, [r4, #14]
    68c2:	7d28      	ldrb	r0, [r5, #20]
    68c4:	b3df      	cbz	r7, 693e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x286>
    68c6:	b180      	cbz	r0, 68ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    68c8:	f005 fb76 	bl	bfb8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    68cc:	f005 fb50 	bl	bf70 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    68d0:	b958      	cbnz	r0, 68ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    68d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    68d4:	7841      	ldrb	r1, [r0, #1]
    68d6:	b141      	cbz	r1, 68ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    68d8:	7800      	ldrb	r0, [r0, #0]
    68da:	7a29      	ldrb	r1, [r5, #8]
    68dc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    68e0:	4288      	cmp	r0, r1
    68e2:	d102      	bne.n	68ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    68e4:	2001      	movs	r0, #1
    68e6:	70a0      	strb	r0, [r4, #2]
    68e8:	e092      	b.n	6a10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    68ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
    68ec:	7841      	ldrb	r1, [r0, #1]
    68ee:	8161      	strh	r1, [r4, #10]
    68f0:	b121      	cbz	r1, 68fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x244>
    68f2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    68f4:	f008 f859 	bl	e9aa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    68f8:	62a0      	str	r0, [r4, #40]	; 0x28
    68fa:	e000      	b.n	68fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x246>
    68fc:	62a6      	str	r6, [r4, #40]	; 0x28
    68fe:	89e0      	ldrh	r0, [r4, #14]
    6900:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    6904:	81e0      	strh	r0, [r4, #14]
    6906:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6908:	79e9      	ldrb	r1, [r5, #7]
    690a:	7800      	ldrb	r0, [r0, #0]
    690c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    6910:	4288      	cmp	r0, r1
    6912:	d007      	beq.n	6924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26c>
    6914:	a801      	add	r0, sp, #4
    6916:	f000 f975 	bl	6c04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54c>
    691a:	89e0      	ldrh	r0, [r4, #14]
    691c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    6920:	81e0      	strh	r0, [r4, #14]
    6922:	e001      	b.n	6928 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x270>
    6924:	f04f 0901 	mov.w	r9, #1
    6928:	6a60      	ldr	r0, [r4, #36]	; 0x24
    692a:	7a29      	ldrb	r1, [r5, #8]
    692c:	7800      	ldrb	r0, [r0, #0]
    692e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6932:	4288      	cmp	r0, r1
    6934:	d10e      	bne.n	6954 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29c>
    6936:	4668      	mov	r0, sp
    6938:	f000 f926 	bl	6b88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d0>
    693c:	e00a      	b.n	6954 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29c>
    693e:	e7ff      	b.n	6940 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x288>
    6940:	b108      	cbz	r0, 6946 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    6942:	f005 fb33 	bl	bfac <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    6946:	78e0      	ldrb	r0, [r4, #3]
    6948:	1c40      	adds	r0, r0, #1
    694a:	70e0      	strb	r0, [r4, #3]
    694c:	89e0      	ldrh	r0, [r4, #14]
    694e:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    6952:	81e0      	strh	r0, [r4, #14]
    6954:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 6a18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    6958:	7ce8      	ldrb	r0, [r5, #19]
    695a:	f10a 0a38 	add.w	sl, sl, #56	; 0x38
    695e:	b188      	cbz	r0, 6984 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2cc>
    6960:	f7ff fece 	bl	6700 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6964:	492d      	ldr	r1, [pc, #180]	; (6a1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>)
    6966:	760e      	strb	r6, [r1, #24]
    6968:	e9d5 231a 	ldrd	r2, r3, [r5, #104]	; 0x68
    696c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    6970:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    6974:	f008 faf3 	bl	ef5e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    6978:	4603      	mov	r3, r0
    697a:	22fb      	movs	r2, #251	; 0xfb
    697c:	4927      	ldr	r1, [pc, #156]	; (6a1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>)
    697e:	4630      	mov	r0, r6
    6980:	f005 fa4c 	bl	be1c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    6984:	f04f 0800 	mov.w	r8, #0
    6988:	f1bb 0f00 	cmp.w	fp, #0
    698c:	d104      	bne.n	6998 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>
    698e:	78e1      	ldrb	r1, [r4, #3]
    6990:	2001      	movs	r0, #1
    6992:	f7ff feeb 	bl	676c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>
    6996:	b198      	cbz	r0, 69c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x308>
    6998:	f005 feb6 	bl	c708 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    699c:	f89d 0000 	ldrb.w	r0, [sp]
    69a0:	b110      	cbz	r0, 69a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>
    69a2:	2000      	movs	r0, #0
    69a4:	f7ff fe06 	bl	65b4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    69a8:	88a8      	ldrh	r0, [r5, #4]
    69aa:	464a      	mov	r2, r9
    69ac:	4639      	mov	r1, r7
    69ae:	f7ff ff09 	bl	67c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    69b2:	b117      	cbz	r7, 69ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x302>
    69b4:	70e6      	strb	r6, [r4, #3]
    69b6:	f7ff feb5 	bl	6724 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    69ba:	f04f 0801 	mov.w	r8, #1
    69be:	e017      	b.n	69f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    69c0:	f89d 0000 	ldrb.w	r0, [sp]
    69c4:	b110      	cbz	r0, 69cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>
    69c6:	2001      	movs	r0, #1
    69c8:	f7ff fdf4 	bl	65b4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    69cc:	2000      	movs	r0, #0
    69ce:	f000 f9a3 	bl	6d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x660>
    69d2:	f89d 0000 	ldrb.w	r0, [sp]
    69d6:	b110      	cbz	r0, 69de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x326>
    69d8:	2002      	movs	r0, #2
    69da:	f7ff fdeb 	bl	65b4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    69de:	88a8      	ldrh	r0, [r5, #4]
    69e0:	464a      	mov	r2, r9
    69e2:	4639      	mov	r1, r7
    69e4:	f7ff feee 	bl	67c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    69e8:	b117      	cbz	r7, 69f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    69ea:	70e6      	strb	r6, [r4, #3]
    69ec:	f7ff fe9a 	bl	6724 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    69f0:	9801      	ldr	r0, [sp, #4]
    69f2:	b150      	cbz	r0, 6a0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
    69f4:	f007 fe65 	bl	e6c2 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    69f8:	f8da 1004 	ldr.w	r1, [sl, #4]
    69fc:	1c40      	adds	r0, r0, #1
    69fe:	7206      	strb	r6, [r0, #8]
    6a00:	220b      	movs	r2, #11
    6a02:	f000 feeb 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    6a06:	f000 ffbb 	bl	7980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6a0a:	f1b8 0f00 	cmp.w	r8, #0
    6a0e:	d001      	beq.n	6a14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35c>
    6a10:	f000 f862 	bl	6ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    6a14:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6a18:	200000d4 	.word	0x200000d4
    6a1c:	20000e40 	.word	0x20000e40
    6a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a24:	460f      	mov	r7, r1
    6a26:	4680      	mov	r8, r0
    6a28:	f7ff fe70 	bl	670c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6a2c:	4d28      	ldr	r5, [pc, #160]	; (6ad0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    6a2e:	4604      	mov	r4, r0
    6a30:	7828      	ldrb	r0, [r5, #0]
    6a32:	2801      	cmp	r0, #1
    6a34:	d004      	beq.n	6a40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
    6a36:	f240 4172 	movw	r1, #1138	; 0x472
    6a3a:	2027      	movs	r0, #39	; 0x27
    6a3c:	f7fe fdc8 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a40:	7821      	ldrb	r1, [r4, #0]
    6a42:	2000      	movs	r0, #0
    6a44:	2601      	movs	r6, #1
    6a46:	b129      	cbz	r1, 6a54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x39c>
    6a48:	7020      	strb	r0, [r4, #0]
    6a4a:	2100      	movs	r1, #0
    6a4c:	2004      	movs	r0, #4
    6a4e:	f7ff fe4f 	bl	66f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6a52:	70a6      	strb	r6, [r4, #2]
    6a54:	6a29      	ldr	r1, [r5, #32]
    6a56:	7808      	ldrb	r0, [r1, #0]
    6a58:	43c0      	mvns	r0, r0
    6a5a:	0780      	lsls	r0, r0, #30
    6a5c:	d109      	bne.n	6a72 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ba>
    6a5e:	79a0      	ldrb	r0, [r4, #6]
    6a60:	bb78      	cbnz	r0, 6ac2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40a>
    6a62:	2002      	movs	r0, #2
    6a64:	f7ff fe44 	bl	66f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6a68:	6a28      	ldr	r0, [r5, #32]
    6a6a:	7800      	ldrb	r0, [r0, #0]
    6a6c:	43c0      	mvns	r0, r0
    6a6e:	0780      	lsls	r0, r0, #30
    6a70:	d027      	beq.n	6ac2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40a>
    6a72:	6a28      	ldr	r0, [r5, #32]
    6a74:	7840      	ldrb	r0, [r0, #1]
    6a76:	b110      	cbz	r0, 6a7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c6>
    6a78:	2002      	movs	r0, #2
    6a7a:	71a0      	strb	r0, [r4, #6]
    6a7c:	e000      	b.n	6a80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c8>
    6a7e:	71a6      	strb	r6, [r4, #6]
    6a80:	7d20      	ldrb	r0, [r4, #20]
    6a82:	b190      	cbz	r0, 6aaa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f2>
    6a84:	f7ff fe3c 	bl	6700 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6a88:	4912      	ldr	r1, [pc, #72]	; (6ad4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>)
    6a8a:	7a6d      	ldrb	r5, [r5, #9]
    6a8c:	760e      	strb	r6, [r1, #24]
    6a8e:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
    6a92:	e9c1 2304 	strd	r2, r3, [r1, #16]
    6a96:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    6a9a:	f008 fa60 	bl	ef5e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    6a9e:	4603      	mov	r3, r0
    6aa0:	462a      	mov	r2, r5
    6aa2:	490c      	ldr	r1, [pc, #48]	; (6ad4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>)
    6aa4:	4630      	mov	r0, r6
    6aa6:	f005 f9b9 	bl	be1c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    6aaa:	ea37 0708 	bics.w	r7, r7, r8
    6aae:	d004      	beq.n	6aba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x402>
    6ab0:	2100      	movs	r1, #0
    6ab2:	4608      	mov	r0, r1
    6ab4:	f7ff fe5a 	bl	676c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>
    6ab8:	b128      	cbz	r0, 6ac6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40e>
    6aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6abe:	f000 b80b 	b.w	6ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    6ac2:	2003      	movs	r0, #3
    6ac4:	e7d9      	b.n	6a7a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    6ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6aca:	2000      	movs	r0, #0
    6acc:	f000 b8e8 	b.w	6ca0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    6ad0:	200000d4 	.word	0x200000d4
    6ad4:	20000e40 	.word	0x20000e40
    6ad8:	b510      	push	{r4, lr}
    6ada:	f005 fb13 	bl	c104 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6ade:	f005 fa31 	bl	bf44 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6ae2:	4c0e      	ldr	r4, [pc, #56]	; (6b1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>)
    6ae4:	89e0      	ldrh	r0, [r4, #14]
    6ae6:	f7ff fe17 	bl	6718 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6aea:	69e2      	ldr	r2, [r4, #28]
    6aec:	7961      	ldrb	r1, [r4, #5]
    6aee:	78a0      	ldrb	r0, [r4, #2]
    6af0:	4790      	blx	r2
    6af2:	480b      	ldr	r0, [pc, #44]	; (6b20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>)
    6af4:	7f00      	ldrb	r0, [r0, #28]
    6af6:	b168      	cbz	r0, 6b14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    6af8:	4909      	ldr	r1, [pc, #36]	; (6b20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>)
    6afa:	220e      	movs	r2, #14
    6afc:	f101 000e 	add.w	r0, r1, #14
    6b00:	f006 ffc8 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6b04:	4806      	ldr	r0, [pc, #24]	; (6b20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>)
    6b06:	221d      	movs	r2, #29
    6b08:	2100      	movs	r1, #0
    6b0a:	301d      	adds	r0, #29
    6b0c:	f000 fe66 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    6b10:	f000 ff36 	bl	7980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6b14:	2000      	movs	r0, #0
    6b16:	7020      	strb	r0, [r4, #0]
    6b18:	bd10      	pop	{r4, pc}
    6b1a:	0000      	.short	0x0000
    6b1c:	200000d4 	.word	0x200000d4
    6b20:	20000e8a 	.word	0x20000e8a
    6b24:	4808      	ldr	r0, [pc, #32]	; (6b48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x490>)
    6b26:	b510      	push	{r4, lr}
    6b28:	7800      	ldrb	r0, [r0, #0]
    6b2a:	2802      	cmp	r0, #2
    6b2c:	d004      	beq.n	6b38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
    6b2e:	f240 212a 	movw	r1, #554	; 0x22a
    6b32:	2027      	movs	r0, #39	; 0x27
    6b34:	f7fe fd4c 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b38:	4904      	ldr	r1, [pc, #16]	; (6b4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x494>)
    6b3a:	2001      	movs	r0, #1
    6b3c:	7308      	strb	r0, [r1, #12]
    6b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6b42:	f7ff bfc9 	b.w	6ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    6b46:	0000      	.short	0x0000
    6b48:	200000d4 	.word	0x200000d4
    6b4c:	20000e8a 	.word	0x20000e8a
    6b50:	4b0c      	ldr	r3, [pc, #48]	; (6b84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4cc>)
    6b52:	b430      	push	{r4, r5}
    6b54:	79db      	ldrb	r3, [r3, #7]
    6b56:	b93a      	cbnz	r2, 6b68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b0>
    6b58:	2bff      	cmp	r3, #255	; 0xff
    6b5a:	d105      	bne.n	6b68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b0>
    6b5c:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    6b60:	f890 406e 	ldrb.w	r4, [r0, #110]	; 0x6e
    6b64:	42a2      	cmp	r2, r4
    6b66:	d00a      	beq.n	6b7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c6>
    6b68:	b129      	cbz	r1, 6b76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    6b6a:	f890 106f 	ldrb.w	r1, [r0, #111]	; 0x6f
    6b6e:	bc30      	pop	{r4, r5}
    6b70:	4618      	mov	r0, r3
    6b72:	f005 bdf1 	b.w	c758 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    6b76:	23ff      	movs	r3, #255	; 0xff
    6b78:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
    6b7c:	e7f7      	b.n	6b6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b6>
    6b7e:	bc30      	pop	{r4, r5}
    6b80:	4770      	bx	lr
    6b82:	0000      	.short	0x0000
    6b84:	200000d4 	.word	0x200000d4
    6b88:	b570      	push	{r4, r5, r6, lr}
    6b8a:	4606      	mov	r6, r0
    6b8c:	f7ff fdbe 	bl	670c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6b90:	4a1b      	ldr	r2, [pc, #108]	; (6c00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x548>)
    6b92:	4604      	mov	r4, r0
    6b94:	2501      	movs	r5, #1
    6b96:	6a51      	ldr	r1, [r2, #36]	; 0x24
    6b98:	7808      	ldrb	r0, [r1, #0]
    6b9a:	f000 0003 	and.w	r0, r0, #3
    6b9e:	2801      	cmp	r0, #1
    6ba0:	d00c      	beq.n	6bbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    6ba2:	2802      	cmp	r0, #2
    6ba4:	d00a      	beq.n	6bbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    6ba6:	2803      	cmp	r0, #3
    6ba8:	d121      	bne.n	6bee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    6baa:	7025      	strb	r5, [r4, #0]
    6bac:	89d0      	ldrh	r0, [r2, #14]
    6bae:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    6bb2:	81d0      	strh	r0, [r2, #14]
    6bb4:	2001      	movs	r0, #1
    6bb6:	f7ff fd9b 	bl	66f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6bba:	e018      	b.n	6bee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    6bbc:	7848      	ldrb	r0, [r1, #1]
    6bbe:	b1b0      	cbz	r0, 6bee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    6bc0:	89d1      	ldrh	r1, [r2, #14]
    6bc2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    6bc6:	81d1      	strh	r1, [r2, #14]
    6bc8:	6a91      	ldr	r1, [r2, #40]	; 0x28
    6bca:	2900      	cmp	r1, #0
    6bcc:	d009      	beq.n	6be2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    6bce:	28fb      	cmp	r0, #251	; 0xfb
    6bd0:	d808      	bhi.n	6be4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52c>
    6bd2:	7990      	ldrb	r0, [r2, #6]
    6bd4:	b120      	cbz	r0, 6be0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x528>
    6bd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6bda:	2020      	movs	r0, #32
    6bdc:	f7ff bd9c 	b.w	6718 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6be0:	7035      	strb	r5, [r6, #0]
    6be2:	bd70      	pop	{r4, r5, r6, pc}
    6be4:	7950      	ldrb	r0, [r2, #5]
    6be6:	f040 0010 	orr.w	r0, r0, #16
    6bea:	7150      	strb	r0, [r2, #5]
    6bec:	bd70      	pop	{r4, r5, r6, pc}
    6bee:	7a20      	ldrb	r0, [r4, #8]
    6bf0:	2801      	cmp	r0, #1
    6bf2:	d001      	beq.n	6bf8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    6bf4:	7225      	strb	r5, [r4, #8]
    6bf6:	bd70      	pop	{r4, r5, r6, pc}
    6bf8:	2000      	movs	r0, #0
    6bfa:	7220      	strb	r0, [r4, #8]
    6bfc:	bd70      	pop	{r4, r5, r6, pc}
    6bfe:	0000      	.short	0x0000
    6c00:	200000d4 	.word	0x200000d4
    6c04:	b570      	push	{r4, r5, r6, lr}
    6c06:	4605      	mov	r5, r0
    6c08:	f7ff fd80 	bl	670c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6c0c:	4604      	mov	r4, r0
    6c0e:	7980      	ldrb	r0, [r0, #6]
    6c10:	2800      	cmp	r0, #0
    6c12:	d02d      	beq.n	6c70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b8>
    6c14:	2802      	cmp	r0, #2
    6c16:	d10c      	bne.n	6c32 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57a>
    6c18:	481b      	ldr	r0, [pc, #108]	; (6c88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d0>)
    6c1a:	4629      	mov	r1, r5
    6c1c:	6b00      	ldr	r0, [r0, #48]	; 0x30
    6c1e:	f007 fccc 	bl	e5ba <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    6c22:	b330      	cbz	r0, 6c72 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ba>
    6c24:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
    6c28:	1c40      	adds	r0, r0, #1
    6c2a:	f141 0100 	adc.w	r1, r1, #0
    6c2e:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    6c32:	2500      	movs	r5, #0
    6c34:	71a5      	strb	r5, [r4, #6]
    6c36:	78a0      	ldrb	r0, [r4, #2]
    6c38:	b120      	cbz	r0, 6c44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x58c>
    6c3a:	70a5      	strb	r5, [r4, #2]
    6c3c:	2100      	movs	r1, #0
    6c3e:	2010      	movs	r0, #16
    6c40:	f7ff fd56 	bl	66f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6c44:	7860      	ldrb	r0, [r4, #1]
    6c46:	b170      	cbz	r0, 6c66 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ae>
    6c48:	7065      	strb	r5, [r4, #1]
    6c4a:	f7ff fb01 	bl	6250 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    6c4e:	b198      	cbz	r0, 6c78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c0>
    6c50:	2100      	movs	r1, #0
    6c52:	2008      	movs	r0, #8
    6c54:	f7ff fd4c 	bl	66f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6c58:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
    6c5c:	1c40      	adds	r0, r0, #1
    6c5e:	f141 0100 	adc.w	r1, r1, #0
    6c62:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    6c66:	79e0      	ldrb	r0, [r4, #7]
    6c68:	2801      	cmp	r0, #1
    6c6a:	d00a      	beq.n	6c82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ca>
    6c6c:	2001      	movs	r0, #1
    6c6e:	71e0      	strb	r0, [r4, #7]
    6c70:	bd70      	pop	{r4, r5, r6, pc}
    6c72:	f240 31b9 	movw	r1, #953	; 0x3b9
    6c76:	e001      	b.n	6c7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c4>
    6c78:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    6c7c:	2027      	movs	r0, #39	; 0x27
    6c7e:	f7fe fca7 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c82:	71e5      	strb	r5, [r4, #7]
    6c84:	bd70      	pop	{r4, r5, r6, pc}
    6c86:	0000      	.short	0x0000
    6c88:	200000d4 	.word	0x200000d4
    6c8c:	4803      	ldr	r0, [pc, #12]	; (6c9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    6c8e:	7800      	ldrb	r0, [r0, #0]
    6c90:	2800      	cmp	r0, #0
    6c92:	d001      	beq.n	6c98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>
    6c94:	f7ff bf20 	b.w	6ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    6c98:	4770      	bx	lr
    6c9a:	0000      	.short	0x0000
    6c9c:	200000d4 	.word	0x200000d4
    6ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ca4:	4606      	mov	r6, r0
    6ca6:	f7ff fd2b 	bl	6700 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6caa:	4680      	mov	r8, r0
    6cac:	f7ff fd2e 	bl	670c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6cb0:	4c16      	ldr	r4, [pc, #88]	; (6d0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x654>)
    6cb2:	4605      	mov	r5, r0
    6cb4:	4632      	mov	r2, r6
    6cb6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6cb8:	6260      	str	r0, [r4, #36]	; 0x24
    6cba:	2101      	movs	r1, #1
    6cbc:	4640      	mov	r0, r8
    6cbe:	f7ff ff47 	bl	6b50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    6cc2:	7d28      	ldrb	r0, [r5, #20]
    6cc4:	2700      	movs	r7, #0
    6cc6:	b170      	cbz	r0, 6ce6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x62e>
    6cc8:	4811      	ldr	r0, [pc, #68]	; (6d10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>)
    6cca:	f005 fc87 	bl	c5dc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6cce:	4811      	ldr	r0, [pc, #68]	; (6d14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65c>)
    6cd0:	2101      	movs	r1, #1
    6cd2:	7601      	strb	r1, [r0, #24]
    6cd4:	e9d5 121c 	ldrd	r1, r2, [r5, #112]	; 0x70
    6cd8:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6cdc:	490c      	ldr	r1, [pc, #48]	; (6d10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>)
    6cde:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6ce0:	f005 f8ee 	bl	bec0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    6ce4:	e004      	b.n	6cf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x638>
    6ce6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6ce8:	f005 fc78 	bl	c5dc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6cec:	f005 f92a 	bl	bf44 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6cf0:	b916      	cbnz	r6, 6cf8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x640>
    6cf2:	4638      	mov	r0, r7
    6cf4:	f005 fb28 	bl	c348 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6cf8:	2100      	movs	r1, #0
    6cfa:	f898 206e 	ldrb.w	r2, [r8, #110]	; 0x6e
    6cfe:	4608      	mov	r0, r1
    6d00:	f005 fce4 	bl	c6cc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6d04:	2002      	movs	r0, #2
    6d06:	7020      	strb	r0, [r4, #0]
    6d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d0c:	200000d4 	.word	0x200000d4
    6d10:	20000d38 	.word	0x20000d38
    6d14:	20000e40 	.word	0x20000e40
    6d18:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6d1c:	4604      	mov	r4, r0
    6d1e:	f7ff fcf5 	bl	670c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6d22:	4605      	mov	r5, r0
    6d24:	f7ff fcec 	bl	6700 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6d28:	2700      	movs	r7, #0
    6d2a:	4606      	mov	r6, r0
    6d2c:	f8df 9164 	ldr.w	r9, [pc, #356]	; 6e94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7dc>
    6d30:	f88d 7000 	strb.w	r7, [sp]
    6d34:	4622      	mov	r2, r4
    6d36:	4639      	mov	r1, r7
    6d38:	f7ff ff0a 	bl	6b50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    6d3c:	79a8      	ldrb	r0, [r5, #6]
    6d3e:	f04f 0801 	mov.w	r8, #1
    6d42:	f1a9 0420 	sub.w	r4, r9, #32
    6d46:	b140      	cbz	r0, 6d5a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    6d48:	2801      	cmp	r0, #1
    6d4a:	d020      	beq.n	6d8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d6>
    6d4c:	2802      	cmp	r0, #2
    6d4e:	d02f      	beq.n	6db0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f8>
    6d50:	2803      	cmp	r0, #3
    6d52:	d03b      	beq.n	6dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x714>
    6d54:	f240 21d5 	movw	r1, #725	; 0x2d5
    6d58:	e057      	b.n	6e0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    6d5a:	7a20      	ldrb	r0, [r4, #8]
    6d5c:	2154      	movs	r1, #84	; 0x54
    6d5e:	f8ad 0004 	strh.w	r0, [sp, #4]
    6d62:	5388      	strh	r0, [r1, r6]
    6d64:	4648      	mov	r0, r9
    6d66:	f7ff fa9d 	bl	62a4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6d6a:	b130      	cbz	r0, 6d7a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c2>
    6d6c:	2080      	movs	r0, #128	; 0x80
    6d6e:	6a21      	ldr	r1, [r4, #32]
    6d70:	f7ff fcbe 	bl	66f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6d74:	f885 8001 	strb.w	r8, [r5, #1]
    6d78:	e02c      	b.n	6dd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6d7a:	466a      	mov	r2, sp
    6d7c:	a901      	add	r1, sp, #4
    6d7e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6d80:	f008 f905 	bl	ef8e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    6d84:	6220      	str	r0, [r4, #32]
    6d86:	b110      	cbz	r0, 6d8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d6>
    6d88:	f895 104b 	ldrb.w	r1, [r5, #75]	; 0x4b
    6d8c:	b111      	cbz	r1, 6d94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6dc>
    6d8e:	4842      	ldr	r0, [pc, #264]	; (6e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e0>)
    6d90:	6220      	str	r0, [r4, #32]
    6d92:	e01f      	b.n	6dd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6d94:	f89d 1000 	ldrb.w	r1, [sp]
    6d98:	b921      	cbnz	r1, 6da4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ec>
    6d9a:	8007      	strh	r7, [r0, #0]
    6d9c:	7087      	strb	r7, [r0, #2]
    6d9e:	2101      	movs	r1, #1
    6da0:	f008 fc66 	bl	f670 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6da4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6da8:	6a20      	ldr	r0, [r4, #32]
    6daa:	f008 fc15 	bl	f5d8 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    6dae:	e011      	b.n	6dd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6db0:	f8b6 0054 	ldrh.w	r0, [r6, #84]	; 0x54
    6db4:	f8ad 0004 	strh.w	r0, [sp, #4]
    6db8:	466a      	mov	r2, sp
    6dba:	a901      	add	r1, sp, #4
    6dbc:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6dbe:	f008 f8e6 	bl	ef8e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    6dc2:	6220      	str	r0, [r4, #32]
    6dc4:	b930      	cbnz	r0, 6dd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6dc6:	f240 21c6 	movw	r1, #710	; 0x2c6
    6dca:	e01e      	b.n	6e0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    6dcc:	4648      	mov	r0, r9
    6dce:	f7ff fa69 	bl	62a4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6dd2:	b1c0      	cbz	r0, 6e06 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74e>
    6dd4:	6a20      	ldr	r0, [r4, #32]
    6dd6:	2308      	movs	r3, #8
    6dd8:	7801      	ldrb	r1, [r0, #0]
    6dda:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    6dde:	7001      	strb	r1, [r0, #0]
    6de0:	79ea      	ldrb	r2, [r5, #7]
    6de2:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    6de6:	4311      	orrs	r1, r2
    6de8:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    6dec:	7001      	strb	r1, [r0, #0]
    6dee:	7a2a      	ldrb	r2, [r5, #8]
    6df0:	2304      	movs	r3, #4
    6df2:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    6df6:	4311      	orrs	r1, r2
    6df8:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    6dfc:	7001      	strb	r1, [r0, #0]
    6dfe:	43c9      	mvns	r1, r1
    6e00:	0789      	lsls	r1, r1, #30
    6e02:	d005      	beq.n	6e10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x758>
    6e04:	e007      	b.n	6e16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x75e>
    6e06:	f240 21cf 	movw	r1, #719	; 0x2cf
    6e0a:	2027      	movs	r0, #39	; 0x27
    6e0c:	f7fe fbe0 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e10:	78c0      	ldrb	r0, [r0, #3]
    6e12:	2802      	cmp	r0, #2
    6e14:	d00f      	beq.n	6e36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x77e>
    6e16:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6e18:	f007 fce9 	bl	e7ee <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    6e1c:	b108      	cbz	r0, 6e22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x76a>
    6e1e:	2101      	movs	r1, #1
    6e20:	e00a      	b.n	6e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x780>
    6e22:	6a20      	ldr	r0, [r4, #32]
    6e24:	7800      	ldrb	r0, [r0, #0]
    6e26:	43c0      	mvns	r0, r0
    6e28:	0780      	lsls	r0, r0, #30
    6e2a:	d004      	beq.n	6e36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x77e>
    6e2c:	f7ff f9f8 	bl	6220 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    6e30:	f080 0101 	eor.w	r1, r0, #1
    6e34:	e000      	b.n	6e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x780>
    6e36:	2100      	movs	r1, #0
    6e38:	6a20      	ldr	r0, [r4, #32]
    6e3a:	7802      	ldrb	r2, [r0, #0]
    6e3c:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    6e40:	7001      	strb	r1, [r0, #0]
    6e42:	7ce9      	ldrb	r1, [r5, #19]
    6e44:	b181      	cbz	r1, 6e68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b0>
    6e46:	7841      	ldrb	r1, [r0, #1]
    6e48:	b171      	cbz	r1, 6e68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b0>
    6e4a:	4814      	ldr	r0, [pc, #80]	; (6e9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e4>)
    6e4c:	f005 fbc6 	bl	c5dc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6e50:	4811      	ldr	r0, [pc, #68]	; (6e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e0>)
    6e52:	3828      	subs	r0, #40	; 0x28
    6e54:	7607      	strb	r7, [r0, #24]
    6e56:	e9d5 121a 	ldrd	r1, r2, [r5, #104]	; 0x68
    6e5a:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6e5e:	480f      	ldr	r0, [pc, #60]	; (6e9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e4>)
    6e60:	6a21      	ldr	r1, [r4, #32]
    6e62:	f005 f82d 	bl	bec0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    6e66:	e003      	b.n	6e70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b8>
    6e68:	f005 fbb8 	bl	c5dc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6e6c:	f005 f86a 	bl	bf44 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6e70:	f896 206f 	ldrb.w	r2, [r6, #111]	; 0x6f
    6e74:	2101      	movs	r1, #1
    6e76:	2000      	movs	r0, #0
    6e78:	f005 fc28 	bl	c6cc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6e7c:	f884 8004 	strb.w	r8, [r4, #4]
    6e80:	6a21      	ldr	r1, [r4, #32]
    6e82:	880a      	ldrh	r2, [r1, #0]
    6e84:	8222      	strh	r2, [r4, #16]
    6e86:	7889      	ldrb	r1, [r1, #2]
    6e88:	74a1      	strb	r1, [r4, #18]
    6e8a:	f884 8000 	strb.w	r8, [r4]
    6e8e:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    6e92:	0000      	.short	0x0000
    6e94:	200000f4 	.word	0x200000f4
    6e98:	20000e68 	.word	0x20000e68
    6e9c:	20000d38 	.word	0x20000d38
    6ea0:	00006b25 	.word	0x00006b25
    6ea4:	00006881 	.word	0x00006881
    6ea8:	00006a21 	.word	0x00006a21
    6eac:	00006c8d 	.word	0x00006c8d

00006eb0 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    6eb0:	4800      	ldr	r0, [pc, #0]	; (6eb4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    6eb2:	4770      	bx	lr
    6eb4:	200017cd 	.word	0x200017cd

00006eb8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    6eb8:	4904      	ldr	r1, [pc, #16]	; (6ecc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    6eba:	788a      	ldrb	r2, [r1, #2]
    6ebc:	4282      	cmp	r2, r0
    6ebe:	d903      	bls.n	6ec8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    6ec0:	4408      	add	r0, r1
    6ec2:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    6ec6:	4770      	bx	lr
    6ec8:	2000      	movs	r0, #0
    6eca:	4770      	bx	lr
    6ecc:	200015fa 	.word	0x200015fa

00006ed0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    6ed0:	4904      	ldr	r1, [pc, #16]	; (6ee4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    6ed2:	788a      	ldrb	r2, [r1, #2]
    6ed4:	4282      	cmp	r2, r0
    6ed6:	d903      	bls.n	6ee0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    6ed8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6edc:	3083      	adds	r0, #131	; 0x83
    6ede:	4770      	bx	lr
    6ee0:	2000      	movs	r0, #0
    6ee2:	4770      	bx	lr
    6ee4:	200015fa 	.word	0x200015fa

00006ee8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    6ee8:	4a05      	ldr	r2, [pc, #20]	; (6f00 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    6eea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6eee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6ef2:	6802      	ldr	r2, [r0, #0]
    6ef4:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    6ef8:	8880      	ldrh	r0, [r0, #4]
    6efa:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    6efe:	4770      	bx	lr
    6f00:	200015fa 	.word	0x200015fa

00006f04 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    6f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f08:	460e      	mov	r6, r1
    6f0a:	4607      	mov	r7, r0
    6f0c:	4615      	mov	r5, r2
    6f0e:	2106      	movs	r1, #6
    6f10:	4630      	mov	r0, r6
    6f12:	f008 fa3d 	bl	f390 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6f16:	4c0d      	ldr	r4, [pc, #52]	; (6f4c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    6f18:	b160      	cbz	r0, 6f34 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    6f1a:	2000      	movs	r0, #0
    6f1c:	e004      	b.n	6f28 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    6f1e:	1821      	adds	r1, r4, r0
    6f20:	1c40      	adds	r0, r0, #1
    6f22:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    6f26:	b2c0      	uxtb	r0, r0
    6f28:	78a1      	ldrb	r1, [r4, #2]
    6f2a:	4281      	cmp	r1, r0
    6f2c:	d8f7      	bhi.n	6f1e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    6f2e:	2001      	movs	r0, #1
    6f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f34:	4631      	mov	r1, r6
    6f36:	4638      	mov	r0, r7
    6f38:	f008 f838 	bl	efac <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6f3c:	2808      	cmp	r0, #8
    6f3e:	d003      	beq.n	6f48 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    6f40:	4420      	add	r0, r4
    6f42:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    6f46:	e7f2      	b.n	6f2e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    6f48:	2000      	movs	r0, #0
    6f4a:	e7f1      	b.n	6f30 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    6f4c:	200015fa 	.word	0x200015fa

00006f50 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    6f50:	4904      	ldr	r1, [pc, #16]	; (6f64 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    6f52:	788a      	ldrb	r2, [r1, #2]
    6f54:	4282      	cmp	r2, r0
    6f56:	d903      	bls.n	6f60 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    6f58:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6f5c:	1cc0      	adds	r0, r0, #3
    6f5e:	4770      	bx	lr
    6f60:	2000      	movs	r0, #0
    6f62:	4770      	bx	lr
    6f64:	200015fa 	.word	0x200015fa

00006f68 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    6f68:	b510      	push	{r4, lr}
    6f6a:	f240 12d3 	movw	r2, #467	; 0x1d3
    6f6e:	2100      	movs	r1, #0
    6f70:	4808      	ldr	r0, [pc, #32]	; (6f94 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    6f72:	f006 fe09 	bl	db88 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6f76:	2208      	movs	r2, #8
    6f78:	21ff      	movs	r1, #255	; 0xff
    6f7a:	4807      	ldr	r0, [pc, #28]	; (6f98 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6f7c:	f006 fe04 	bl	db88 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6f80:	4805      	ldr	r0, [pc, #20]	; (6f98 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6f82:	2100      	movs	r1, #0
    6f84:	1f00      	subs	r0, r0, #4
    6f86:	7001      	strb	r1, [r0, #0]
    6f88:	7041      	strb	r1, [r0, #1]
    6f8a:	f44f 7161 	mov.w	r1, #900	; 0x384
    6f8e:	8041      	strh	r1, [r0, #2]
    6f90:	bd10      	pop	{r4, pc}
    6f92:	0000      	.short	0x0000
    6f94:	200015fa 	.word	0x200015fa
    6f98:	20000320 	.word	0x20000320

00006f9c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    6f9c:	4901      	ldr	r1, [pc, #4]	; (6fa4 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    6f9e:	7008      	strb	r0, [r1, #0]
    6fa0:	4770      	bx	lr
    6fa2:	0000      	.short	0x0000
    6fa4:	2000031c 	.word	0x2000031c

00006fa8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    6fa8:	4801      	ldr	r0, [pc, #4]	; (6fb0 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    6faa:	7800      	ldrb	r0, [r0, #0]
    6fac:	4770      	bx	lr
    6fae:	0000      	.short	0x0000
    6fb0:	2000031c 	.word	0x2000031c

00006fb4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    6fb4:	4b0b      	ldr	r3, [pc, #44]	; (6fe4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    6fb6:	b510      	push	{r4, lr}
    6fb8:	789c      	ldrb	r4, [r3, #2]
    6fba:	4284      	cmp	r4, r0
    6fbc:	d90f      	bls.n	6fde <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    6fbe:	4418      	add	r0, r3
    6fc0:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    6fc4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6fc8:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    6fcc:	700b      	strb	r3, [r1, #0]
    6fce:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    6fd2:	6011      	str	r1, [r2, #0]
    6fd4:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    6fd8:	8090      	strh	r0, [r2, #4]
    6fda:	2001      	movs	r0, #1
    6fdc:	bd10      	pop	{r4, pc}
    6fde:	2000      	movs	r0, #0
    6fe0:	bd10      	pop	{r4, pc}
    6fe2:	0000      	.short	0x0000
    6fe4:	200015fa 	.word	0x200015fa

00006fe8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    6fe8:	4907      	ldr	r1, [pc, #28]	; (7008 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    6fea:	788a      	ldrb	r2, [r1, #2]
    6fec:	4282      	cmp	r2, r0
    6fee:	d909      	bls.n	7004 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    6ff0:	4408      	add	r0, r1
    6ff2:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    6ff6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    6ffa:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6ffe:	f000 0001 	and.w	r0, r0, #1
    7002:	4770      	bx	lr
    7004:	2000      	movs	r0, #0
    7006:	4770      	bx	lr
    7008:	200015fa 	.word	0x200015fa

0000700c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    700c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7010:	4698      	mov	r8, r3
    7012:	4691      	mov	r9, r2
    7014:	460c      	mov	r4, r1
    7016:	4605      	mov	r5, r0
    7018:	f000 f936 	bl	7288 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    701c:	4606      	mov	r6, r0
    701e:	2810      	cmp	r0, #16
    7020:	d006      	beq.n	7030 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    7022:	f000 f901 	bl	7228 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    7026:	2810      	cmp	r0, #16
    7028:	d002      	beq.n	7030 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    702a:	2012      	movs	r0, #18
    702c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7030:	4f18      	ldr	r7, [pc, #96]	; (7094 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    7032:	78b8      	ldrb	r0, [r7, #2]
    7034:	2808      	cmp	r0, #8
    7036:	d22a      	bcs.n	708e <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    7038:	2e10      	cmp	r6, #16
    703a:	d105      	bne.n	7048 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    703c:	2200      	movs	r2, #0
    703e:	4621      	mov	r1, r4
    7040:	4628      	mov	r0, r5
    7042:	f000 f905 	bl	7250 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    7046:	4606      	mov	r6, r0
    7048:	78bc      	ldrb	r4, [r7, #2]
    704a:	2210      	movs	r2, #16
    704c:	1c60      	adds	r0, r4, #1
    704e:	70b8      	strb	r0, [r7, #2]
    7050:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    7054:	1ce8      	adds	r0, r5, #3
    7056:	4649      	mov	r1, r9
    7058:	f008 f8ff 	bl	f25a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    705c:	f105 0083 	add.w	r0, r5, #131	; 0x83
    7060:	2210      	movs	r2, #16
    7062:	4641      	mov	r1, r8
    7064:	f008 f8f9 	bl	f25a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    7068:	2110      	movs	r1, #16
    706a:	4640      	mov	r0, r8
    706c:	f008 f990 	bl	f390 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7070:	443c      	add	r4, r7
    7072:	2110      	movs	r1, #16
    7074:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    7078:	4648      	mov	r0, r9
    707a:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    707e:	f008 f987 	bl	f390 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7082:	77e0      	strb	r0, [r4, #31]
    7084:	f804 6c29 	strb.w	r6, [r4, #-41]
    7088:	2000      	movs	r0, #0
    708a:	73e0      	strb	r0, [r4, #15]
    708c:	e7ce      	b.n	702c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    708e:	2007      	movs	r0, #7
    7090:	e7cc      	b.n	702c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    7092:	0000      	.short	0x0000
    7094:	200015fa 	.word	0x200015fa

00007098 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    7098:	4806      	ldr	r0, [pc, #24]	; (70b4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    709a:	b510      	push	{r4, lr}
    709c:	7880      	ldrb	r0, [r0, #2]
    709e:	1e40      	subs	r0, r0, #1
    70a0:	b244      	sxtb	r4, r0
    70a2:	e004      	b.n	70ae <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    70a4:	b2e0      	uxtb	r0, r4
    70a6:	f000 f94d 	bl	7344 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    70aa:	1e64      	subs	r4, r4, #1
    70ac:	b264      	sxtb	r4, r4
    70ae:	2c00      	cmp	r4, #0
    70b0:	daf8      	bge.n	70a4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    70b2:	bd10      	pop	{r4, pc}
    70b4:	200015fa 	.word	0x200015fa

000070b8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    70b8:	4801      	ldr	r0, [pc, #4]	; (70c0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    70ba:	8840      	ldrh	r0, [r0, #2]
    70bc:	4770      	bx	lr
    70be:	0000      	.short	0x0000
    70c0:	2000031c 	.word	0x2000031c

000070c4 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    70c4:	b138      	cbz	r0, 70d6 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    70c6:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    70ca:	4288      	cmp	r0, r1
    70cc:	d803      	bhi.n	70d6 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    70ce:	4903      	ldr	r1, [pc, #12]	; (70dc <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    70d0:	8048      	strh	r0, [r1, #2]
    70d2:	2001      	movs	r0, #1
    70d4:	4770      	bx	lr
    70d6:	2000      	movs	r0, #0
    70d8:	4770      	bx	lr
    70da:	0000      	.short	0x0000
    70dc:	2000031c 	.word	0x2000031c

000070e0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    70e0:	4905      	ldr	r1, [pc, #20]	; (70f8 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    70e2:	788a      	ldrb	r2, [r1, #2]
    70e4:	4282      	cmp	r2, r0
    70e6:	d903      	bls.n	70f0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    70e8:	4408      	add	r0, r1
    70ea:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    70ee:	b108      	cbz	r0, 70f4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    70f0:	2000      	movs	r0, #0
    70f2:	4770      	bx	lr
    70f4:	2001      	movs	r0, #1
    70f6:	4770      	bx	lr
    70f8:	200015fa 	.word	0x200015fa

000070fc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    70fc:	b570      	push	{r4, r5, r6, lr}
    70fe:	460d      	mov	r5, r1
    7100:	4606      	mov	r6, r0
    7102:	f000 f8c1 	bl	7288 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    7106:	4c10      	ldr	r4, [pc, #64]	; (7148 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    7108:	2810      	cmp	r0, #16
    710a:	d007      	beq.n	711c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    710c:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    7110:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    7114:	07c9      	lsls	r1, r1, #31
    7116:	d001      	beq.n	711c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    7118:	2001      	movs	r0, #1
    711a:	bd70      	pop	{r4, r5, r6, pc}
    711c:	7861      	ldrb	r1, [r4, #1]
    711e:	2908      	cmp	r1, #8
    7120:	d210      	bcs.n	7144 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    7122:	2810      	cmp	r0, #16
    7124:	d008      	beq.n	7138 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    7126:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    712a:	2101      	movs	r1, #1
    712c:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    7130:	7860      	ldrb	r0, [r4, #1]
    7132:	1c40      	adds	r0, r0, #1
    7134:	7060      	strb	r0, [r4, #1]
    7136:	e7ef      	b.n	7118 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    7138:	2201      	movs	r2, #1
    713a:	4629      	mov	r1, r5
    713c:	4630      	mov	r0, r6
    713e:	f000 f887 	bl	7250 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    7142:	e7f5      	b.n	7130 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    7144:	2000      	movs	r0, #0
    7146:	bd70      	pop	{r4, r5, r6, pc}
    7148:	200015fa 	.word	0x200015fa

0000714c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    714c:	b570      	push	{r4, r5, r6, lr}
    714e:	4d0b      	ldr	r5, [pc, #44]	; (717c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    7150:	7828      	ldrb	r0, [r5, #0]
    7152:	1e40      	subs	r0, r0, #1
    7154:	b244      	sxtb	r4, r0
    7156:	e00a      	b.n	716e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    7158:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    715c:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    7160:	07c0      	lsls	r0, r0, #31
    7162:	d002      	beq.n	716a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    7164:	b2e0      	uxtb	r0, r4
    7166:	f000 f935 	bl	73d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x250>
    716a:	1e64      	subs	r4, r4, #1
    716c:	b264      	sxtb	r4, r4
    716e:	2c00      	cmp	r4, #0
    7170:	daf2      	bge.n	7158 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    7172:	4903      	ldr	r1, [pc, #12]	; (7180 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    7174:	2000      	movs	r0, #0
    7176:	7048      	strb	r0, [r1, #1]
    7178:	bd70      	pop	{r4, r5, r6, pc}
    717a:	0000      	.short	0x0000
    717c:	200015fa 	.word	0x200015fa
    7180:	2000031c 	.word	0x2000031c

00007184 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    7184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7188:	2400      	movs	r4, #0
    718a:	4625      	mov	r5, r4
    718c:	4e18      	ldr	r6, [pc, #96]	; (71f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    718e:	e029      	b.n	71e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    7190:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    7194:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    7198:	07c0      	lsls	r0, r0, #31
    719a:	d021      	beq.n	71e0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    719c:	4628      	mov	r0, r5
    719e:	f000 f843 	bl	7228 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    71a2:	4603      	mov	r3, r0
    71a4:	f7ff fed4 	bl	6f50 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    71a8:	4601      	mov	r1, r0
    71aa:	2000      	movs	r0, #0
    71ac:	2b10      	cmp	r3, #16
    71ae:	d009      	beq.n	71c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    71b0:	18f2      	adds	r2, r6, r3
    71b2:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    71b6:	f1bc 0f01 	cmp.w	ip, #1
    71ba:	d002      	beq.n	71c2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    71bc:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    71c0:	b102      	cbz	r2, 71c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    71c2:	2001      	movs	r0, #1
    71c4:	1e40      	subs	r0, r0, #1
    71c6:	4201      	tst	r1, r0
    71c8:	d10a      	bne.n	71e0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    71ca:	480a      	ldr	r0, [pc, #40]	; (71f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    71cc:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    71d0:	5503      	strb	r3, [r0, r4]
    71d2:	4620      	mov	r0, r4
    71d4:	1c64      	adds	r4, r4, #1
    71d6:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    71da:	b2e4      	uxtb	r4, r4
    71dc:	f005 fb9e 	bl	c91c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    71e0:	1c6d      	adds	r5, r5, #1
    71e2:	b2ed      	uxtb	r5, r5
    71e4:	7830      	ldrb	r0, [r6, #0]
    71e6:	42a8      	cmp	r0, r5
    71e8:	d8d2      	bhi.n	7190 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    71ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    71ee:	0000      	.short	0x0000
    71f0:	200015fa 	.word	0x200015fa
    71f4:	20000320 	.word	0x20000320
    71f8:	4602      	mov	r2, r0
    71fa:	4809      	ldr	r0, [pc, #36]	; (7220 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    71fc:	b510      	push	{r4, lr}
    71fe:	7800      	ldrb	r0, [r0, #0]
    7200:	460b      	mov	r3, r1
    7202:	b158      	cbz	r0, 721c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    7204:	4807      	ldr	r0, [pc, #28]	; (7224 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    7206:	7881      	ldrb	r1, [r0, #2]
    7208:	b141      	cbz	r1, 721c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    720a:	b10b      	cbz	r3, 7210 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    720c:	1cc0      	adds	r0, r0, #3
    720e:	e001      	b.n	7214 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    7210:	4804      	ldr	r0, [pc, #16]	; (7224 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    7212:	3083      	adds	r0, #131	; 0x83
    7214:	f004 fd5c 	bl	bcd0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    7218:	2001      	movs	r0, #1
    721a:	bd10      	pop	{r4, pc}
    721c:	2000      	movs	r0, #0
    721e:	bd10      	pop	{r4, pc}
    7220:	2000031c 	.word	0x2000031c
    7224:	200015fa 	.word	0x200015fa
    7228:	4908      	ldr	r1, [pc, #32]	; (724c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    722a:	b510      	push	{r4, lr}
    722c:	4603      	mov	r3, r0
    722e:	2000      	movs	r0, #0
    7230:	788a      	ldrb	r2, [r1, #2]
    7232:	e006      	b.n	7242 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    7234:	180c      	adds	r4, r1, r0
    7236:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    723a:	429c      	cmp	r4, r3
    723c:	d004      	beq.n	7248 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    723e:	1c40      	adds	r0, r0, #1
    7240:	b2c0      	uxtb	r0, r0
    7242:	4282      	cmp	r2, r0
    7244:	d8f6      	bhi.n	7234 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    7246:	2010      	movs	r0, #16
    7248:	bd10      	pop	{r4, pc}
    724a:	0000      	.short	0x0000
    724c:	200015fa 	.word	0x200015fa
    7250:	b570      	push	{r4, r5, r6, lr}
    7252:	4b0c      	ldr	r3, [pc, #48]	; (7284 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    7254:	4604      	mov	r4, r0
    7256:	7818      	ldrb	r0, [r3, #0]
    7258:	1c45      	adds	r5, r0, #1
    725a:	701d      	strb	r5, [r3, #0]
    725c:	2810      	cmp	r0, #16
    725e:	d303      	bcc.n	7268 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    7260:	2146      	movs	r1, #70	; 0x46
    7262:	2028      	movs	r0, #40	; 0x28
    7264:	f7fe f9b4 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7268:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    726c:	680d      	ldr	r5, [r1, #0]
    726e:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    7272:	8889      	ldrh	r1, [r1, #4]
    7274:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    7278:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    727c:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    7280:	bd70      	pop	{r4, r5, r6, pc}
    7282:	0000      	.short	0x0000
    7284:	200015fa 	.word	0x200015fa
    7288:	b5f0      	push	{r4, r5, r6, r7, lr}
    728a:	4c1a      	ldr	r4, [pc, #104]	; (72f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    728c:	4603      	mov	r3, r0
    728e:	2000      	movs	r0, #0
    7290:	7825      	ldrb	r5, [r4, #0]
    7292:	e02a      	b.n	72ea <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    7294:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    7298:	780f      	ldrb	r7, [r1, #0]
    729a:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    729e:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    72a2:	ea87 070c 	eor.w	r7, r7, ip
    72a6:	405e      	eors	r6, r3
    72a8:	443e      	add	r6, r7
    72aa:	784f      	ldrb	r7, [r1, #1]
    72ac:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    72b0:	ea87 070c 	eor.w	r7, r7, ip
    72b4:	443e      	add	r6, r7
    72b6:	788f      	ldrb	r7, [r1, #2]
    72b8:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    72bc:	ea87 070c 	eor.w	r7, r7, ip
    72c0:	443e      	add	r6, r7
    72c2:	78cf      	ldrb	r7, [r1, #3]
    72c4:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    72c8:	ea87 070c 	eor.w	r7, r7, ip
    72cc:	443e      	add	r6, r7
    72ce:	790f      	ldrb	r7, [r1, #4]
    72d0:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    72d4:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    72d8:	ea87 070c 	eor.w	r7, r7, ip
    72dc:	443e      	add	r6, r7
    72de:	794f      	ldrb	r7, [r1, #5]
    72e0:	4057      	eors	r7, r2
    72e2:	42f7      	cmn	r7, r6
    72e4:	d004      	beq.n	72f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    72e6:	1c40      	adds	r0, r0, #1
    72e8:	b2c0      	uxtb	r0, r0
    72ea:	4285      	cmp	r5, r0
    72ec:	d8d2      	bhi.n	7294 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    72ee:	2010      	movs	r0, #16
    72f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72f2:	0000      	.short	0x0000
    72f4:	200015fa 	.word	0x200015fa
    72f8:	b570      	push	{r4, r5, r6, lr}
    72fa:	4605      	mov	r5, r0
    72fc:	f7ff ff94 	bl	7228 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    7300:	2810      	cmp	r0, #16
    7302:	d11c      	bne.n	733e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    7304:	4c0e      	ldr	r4, [pc, #56]	; (7340 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    7306:	7820      	ldrb	r0, [r4, #0]
    7308:	1e40      	subs	r0, r0, #1
    730a:	b2c0      	uxtb	r0, r0
    730c:	7020      	strb	r0, [r4, #0]
    730e:	42a8      	cmp	r0, r5
    7310:	d015      	beq.n	733e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    7312:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    7316:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    731a:	f502 7080 	add.w	r0, r2, #256	; 0x100
    731e:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    7322:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    7326:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    732a:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    732e:	7820      	ldrb	r0, [r4, #0]
    7330:	f7ff ff7a 	bl	7228 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    7334:	2810      	cmp	r0, #16
    7336:	d002      	beq.n	733e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    7338:	4420      	add	r0, r4
    733a:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    733e:	bd70      	pop	{r4, r5, r6, pc}
    7340:	200015fa 	.word	0x200015fa
    7344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7348:	4c21      	ldr	r4, [pc, #132]	; (73d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x24c>)
    734a:	4606      	mov	r6, r0
    734c:	19a7      	adds	r7, r4, r6
    734e:	78a0      	ldrb	r0, [r4, #2]
    7350:	1e40      	subs	r0, r0, #1
    7352:	b2c5      	uxtb	r5, r0
    7354:	70a5      	strb	r5, [r4, #2]
    7356:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    735a:	42ae      	cmp	r6, r5
    735c:	d02a      	beq.n	73b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x230>
    735e:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    7362:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    7366:	f10a 0103 	add.w	r1, sl, #3
    736a:	f109 0003 	add.w	r0, r9, #3
    736e:	2210      	movs	r2, #16
    7370:	f006 fb90 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7374:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    7378:	f109 0083 	add.w	r0, r9, #131	; 0x83
    737c:	2210      	movs	r2, #16
    737e:	f006 fb89 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7382:	1960      	adds	r0, r4, r5
    7384:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    7388:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    738c:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    7390:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    7394:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    7398:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    739c:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    73a0:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    73a4:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    73a8:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    73ac:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    73b0:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    73b4:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    73b8:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    73bc:	07c0      	lsls	r0, r0, #31
    73be:	d104      	bne.n	73ca <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x246>
    73c0:	4640      	mov	r0, r8
    73c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    73c6:	f7ff bf97 	b.w	72f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    73ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    73ce:	0000      	.short	0x0000
    73d0:	200015fa 	.word	0x200015fa
    73d4:	4905      	ldr	r1, [pc, #20]	; (73ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x268>)
    73d6:	784a      	ldrb	r2, [r1, #1]
    73d8:	1e52      	subs	r2, r2, #1
    73da:	704a      	strb	r2, [r1, #1]
    73dc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    73e0:	2200      	movs	r2, #0
    73e2:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    73e6:	f7ff bf87 	b.w	72f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    73ea:	0000      	.short	0x0000
    73ec:	200015fa 	.word	0x200015fa

000073f0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    73f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    73f4:	4604      	mov	r4, r0
    73f6:	f04f 0801 	mov.w	r8, #1
    73fa:	b181      	cbz	r1, 741e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    73fc:	f104 068f 	add.w	r6, r4, #143	; 0x8f
    7400:	1e75      	subs	r5, r6, #1
    7402:	f104 0078 	add.w	r0, r4, #120	; 0x78
    7406:	2901      	cmp	r1, #1
    7408:	d022      	beq.n	7450 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x60>
    740a:	2902      	cmp	r1, #2
    740c:	d045      	beq.n	749a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xaa>
    740e:	2903      	cmp	r1, #3
    7410:	d11c      	bne.n	744c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    7412:	4631      	mov	r1, r6
    7414:	4628      	mov	r0, r5
    7416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    741a:	f007 bfe9 	b.w	f3f0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    741e:	f44f 7228 	mov.w	r2, #672	; 0x2a0
    7422:	2100      	movs	r1, #0
    7424:	f006 fbb0 	bl	db88 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7428:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
    742c:	3484      	adds	r4, #132	; 0x84
    742e:	f004 fc1f 	bl	bc70 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    7432:	f644 122b 	movw	r2, #18731	; 0x492b
    7436:	4010      	ands	r0, r2
    7438:	6520      	str	r0, [r4, #80]	; 0x50
    743a:	f001 0106 	and.w	r1, r1, #6
    743e:	6561      	str	r1, [r4, #84]	; 0x54
    7440:	20fe      	movs	r0, #254	; 0xfe
    7442:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
    7446:	207f      	movs	r0, #127	; 0x7f
    7448:	f804 0c03 	strb.w	r0, [r4, #-3]
    744c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7450:	2700      	movs	r7, #0
    7452:	f8a4 71de 	strh.w	r7, [r4, #478]	; 0x1de
    7456:	f884 71d3 	strb.w	r7, [r4, #467]	; 0x1d3
    745a:	4a14      	ldr	r2, [pc, #80]	; (74ac <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>)
    745c:	6921      	ldr	r1, [r4, #16]
    745e:	440a      	add	r2, r1
    7460:	fbb2 f2f1 	udiv	r2, r2, r1
    7464:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
    7468:	f640 32b8 	movw	r2, #3000	; 0xbb8
    746c:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    7470:	8b63      	ldrh	r3, [r4, #26]
    7472:	460a      	mov	r2, r1
    7474:	f000 f81c 	bl	74b0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>
    7478:	4631      	mov	r1, r6
    747a:	4628      	mov	r0, r5
    747c:	f007 ffb8 	bl	f3f0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    7480:	f006 fae4 	bl	da4c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7484:	b118      	cbz	r0, 748e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9e>
    7486:	6960      	ldr	r0, [r4, #20]
    7488:	f000 fbae 	bl	7be8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    748c:	b110      	cbz	r0, 7494 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa4>
    748e:	f884 71c6 	strb.w	r7, [r4, #454]	; 0x1c6
    7492:	e7db      	b.n	744c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    7494:	f884 81c6 	strb.w	r8, [r4, #454]	; 0x1c6
    7498:	e7d8      	b.n	744c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    749a:	f8b4 3282 	ldrh.w	r3, [r4, #642]	; 0x282
    749e:	f8d4 227c 	ldr.w	r2, [r4, #636]	; 0x27c
    74a2:	6921      	ldr	r1, [r4, #16]
    74a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    74a8:	f000 b802 	b.w	74b0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>
    74ac:	01c9c37f 	.word	0x01c9c37f
    74b0:	b530      	push	{r4, r5, lr}
    74b2:	2400      	movs	r4, #0
    74b4:	8784      	strh	r4, [r0, #60]	; 0x3c
    74b6:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
    74ba:	4d15      	ldr	r5, [pc, #84]	; (7510 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    74bc:	434c      	muls	r4, r1
    74be:	fbb4 f4f2 	udiv	r4, r4, r2
    74c2:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
    74c6:	f242 7410 	movw	r4, #10000	; 0x2710
    74ca:	4363      	muls	r3, r4
    74cc:	fbb3 f3f2 	udiv	r3, r3, r2
    74d0:	1c5b      	adds	r3, r3, #1
    74d2:	b29b      	uxth	r3, r3
    74d4:	fb03 f402 	mul.w	r4, r3, r2
    74d8:	87c3      	strh	r3, [r0, #62]	; 0x3e
    74da:	42ac      	cmp	r4, r5
    74dc:	d901      	bls.n	74e2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    74de:	1e5b      	subs	r3, r3, #1
    74e0:	87c3      	strh	r3, [r0, #62]	; 0x3e
    74e2:	4b0c      	ldr	r3, [pc, #48]	; (7514 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x124>)
    74e4:	f240 2471 	movw	r4, #625	; 0x271
    74e8:	fbb3 f3f2 	udiv	r3, r3, r2
    74ec:	1c5b      	adds	r3, r3, #1
    74ee:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    74f2:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    74f4:	4363      	muls	r3, r4
    74f6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    74fa:	1e5b      	subs	r3, r3, #1
    74fc:	fbb3 f3f2 	udiv	r3, r3, r2
    7500:	6343      	str	r3, [r0, #52]	; 0x34
    7502:	6b03      	ldr	r3, [r0, #48]	; 0x30
    7504:	434b      	muls	r3, r1
    7506:	fbb3 f1f2 	udiv	r1, r3, r2
    750a:	6301      	str	r1, [r0, #48]	; 0x30
    750c:	bd30      	pop	{r4, r5, pc}
    750e:	0000      	.short	0x0000
    7510:	01e84800 	.word	0x01e84800
    7514:	02625a00 	.word	0x02625a00

00007518 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    7518:	b570      	push	{r4, r5, r6, lr}
    751a:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    751e:	b28b      	uxth	r3, r1
    7520:	7ac5      	ldrb	r5, [r0, #11]
    7522:	ea83 0102 	eor.w	r1, r3, r2
    7526:	2200      	movs	r2, #0
    7528:	b2cc      	uxtb	r4, r1
    752a:	0a09      	lsrs	r1, r1, #8
    752c:	fa94 f4a4 	rbit	r4, r4
    7530:	fa91 f1a1 	rbit	r1, r1
    7534:	0e24      	lsrs	r4, r4, #24
    7536:	0e09      	lsrs	r1, r1, #24
    7538:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    753c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    7540:	1c52      	adds	r2, r2, #1
    7542:	4419      	add	r1, r3
    7544:	b2d2      	uxtb	r2, r2
    7546:	b289      	uxth	r1, r1
    7548:	2a03      	cmp	r2, #3
    754a:	d3ed      	bcc.n	7528 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    754c:	4059      	eors	r1, r3
    754e:	2225      	movs	r2, #37	; 0x25
    7550:	fbb1 f3f2 	udiv	r3, r1, r2
    7554:	fb02 1213 	mls	r2, r2, r3, r1
    7558:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    755c:	f002 0607 	and.w	r6, r2, #7
    7560:	785b      	ldrb	r3, [r3, #1]
    7562:	2401      	movs	r4, #1
    7564:	fa04 f606 	lsl.w	r6, r4, r6
    7568:	4233      	tst	r3, r6
    756a:	d001      	beq.n	7570 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    756c:	4610      	mov	r0, r2
    756e:	bd70      	pop	{r4, r5, r6, pc}
    7570:	434d      	muls	r5, r1
    7572:	0c29      	lsrs	r1, r5, #16
    7574:	1c49      	adds	r1, r1, #1
    7576:	b2c9      	uxtb	r1, r1
    7578:	2200      	movs	r2, #0
    757a:	1885      	adds	r5, r0, r2
    757c:	79ab      	ldrb	r3, [r5, #6]
    757e:	428b      	cmp	r3, r1
    7580:	d312      	bcc.n	75a8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    7582:	f895 5001 	ldrb.w	r5, [r5, #1]
    7586:	2300      	movs	r3, #0
    7588:	fa04 f603 	lsl.w	r6, r4, r3
    758c:	4235      	tst	r5, r6
    758e:	d001      	beq.n	7594 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    7590:	1e49      	subs	r1, r1, #1
    7592:	b2c9      	uxtb	r1, r1
    7594:	b121      	cbz	r1, 75a0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    7596:	1c5b      	adds	r3, r3, #1
    7598:	b2db      	uxtb	r3, r3
    759a:	2b08      	cmp	r3, #8
    759c:	d3f4      	bcc.n	7588 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    759e:	e005      	b.n	75ac <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    75a0:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    75a4:	b2c0      	uxtb	r0, r0
    75a6:	bd70      	pop	{r4, r5, r6, pc}
    75a8:	1ac9      	subs	r1, r1, r3
    75aa:	b2c9      	uxtb	r1, r1
    75ac:	1c52      	adds	r2, r2, #1
    75ae:	b2d2      	uxtb	r2, r2
    75b0:	2a05      	cmp	r2, #5
    75b2:	d3e2      	bcc.n	757a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    75b4:	f240 110d 	movw	r1, #269	; 0x10d
    75b8:	2046      	movs	r0, #70	; 0x46
    75ba:	f7fe f809 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75be:	0000      	movs	r0, r0
    75c0:	b570      	push	{r4, r5, r6, lr}
    75c2:	f890 2023 	ldrb.w	r2, [r0, #35]	; 0x23
    75c6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    75ca:	2401      	movs	r4, #1
    75cc:	fb03 2101 	mla	r1, r3, r1, r2
    75d0:	2225      	movs	r2, #37	; 0x25
    75d2:	fbb1 f3f2 	udiv	r3, r1, r2
    75d6:	fb02 1113 	mls	r1, r2, r3, r1
    75da:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    75de:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    75e2:	f001 0307 	and.w	r3, r1, #7
    75e6:	7dd2      	ldrb	r2, [r2, #23]
    75e8:	fa04 f303 	lsl.w	r3, r4, r3
    75ec:	421a      	tst	r2, r3
    75ee:	d003      	beq.n	75f8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    75f0:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    75f4:	2000      	movs	r0, #0
    75f6:	bd70      	pop	{r4, r5, r6, pc}
    75f8:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
    75fc:	fbb1 f3f2 	udiv	r3, r1, r2
    7600:	fb02 1113 	mls	r1, r2, r3, r1
    7604:	1c49      	adds	r1, r1, #1
    7606:	b2c9      	uxtb	r1, r1
    7608:	2300      	movs	r3, #0
    760a:	18c5      	adds	r5, r0, r3
    760c:	7f2a      	ldrb	r2, [r5, #28]
    760e:	428a      	cmp	r2, r1
    7610:	d311      	bcc.n	7636 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    7612:	f895 5017 	ldrb.w	r5, [r5, #23]
    7616:	2200      	movs	r2, #0
    7618:	fa04 f602 	lsl.w	r6, r4, r2
    761c:	4235      	tst	r5, r6
    761e:	d001      	beq.n	7624 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    7620:	1e49      	subs	r1, r1, #1
    7622:	b2c9      	uxtb	r1, r1
    7624:	b121      	cbz	r1, 7630 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    7626:	1c52      	adds	r2, r2, #1
    7628:	b2d2      	uxtb	r2, r2
    762a:	2a08      	cmp	r2, #8
    762c:	d3f4      	bcc.n	7618 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    762e:	e004      	b.n	763a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    7630:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    7634:	e7dc      	b.n	75f0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    7636:	1a89      	subs	r1, r1, r2
    7638:	b2c9      	uxtb	r1, r1
    763a:	1c5b      	adds	r3, r3, #1
    763c:	b2db      	uxtb	r3, r3
    763e:	2b05      	cmp	r3, #5
    7640:	d3e3      	bcc.n	760a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    7642:	201f      	movs	r0, #31
    7644:	bd70      	pop	{r4, r5, r6, pc}
	...

00007648 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    7648:	7841      	ldrb	r1, [r0, #1]
    764a:	b141      	cbz	r1, 765e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    764c:	78c0      	ldrb	r0, [r0, #3]
    764e:	2826      	cmp	r0, #38	; 0x26
    7650:	d203      	bcs.n	765a <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    7652:	4a04      	ldr	r2, [pc, #16]	; (7664 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    7654:	5c10      	ldrb	r0, [r2, r0]
    7656:	4288      	cmp	r0, r1
    7658:	d101      	bne.n	765e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    765a:	2001      	movs	r0, #1
    765c:	4770      	bx	lr
    765e:	2000      	movs	r0, #0
    7660:	4770      	bx	lr
    7662:	0000      	.short	0x0000
    7664:	00011a32 	.word	0x00011a32

00007668 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    7668:	b510      	push	{r4, lr}
    766a:	2201      	movs	r2, #1
    766c:	70c1      	strb	r1, [r0, #3]
    766e:	2926      	cmp	r1, #38	; 0x26
    7670:	d202      	bcs.n	7678 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    7672:	4a06      	ldr	r2, [pc, #24]	; (768c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    7674:	5c52      	ldrb	r2, [r2, r1]
    7676:	e006      	b.n	7686 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    7678:	29ff      	cmp	r1, #255	; 0xff
    767a:	d004      	beq.n	7686 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    767c:	f240 411d 	movw	r1, #1053	; 0x41d
    7680:	202a      	movs	r0, #42	; 0x2a
    7682:	f7fd ffa5 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7686:	7042      	strb	r2, [r0, #1]
    7688:	bd10      	pop	{r4, pc}
    768a:	0000      	.short	0x0000
    768c:	00011a32 	.word	0x00011a32

00007690 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    7690:	4904      	ldr	r1, [pc, #16]	; (76a4 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    7692:	7c89      	ldrb	r1, [r1, #18]
    7694:	0749      	lsls	r1, r1, #29
    7696:	d400      	bmi.n	769a <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    7698:	b108      	cbz	r0, 769e <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    769a:	2000      	movs	r0, #0
    769c:	4770      	bx	lr
    769e:	2001      	movs	r0, #1
    76a0:	4770      	bx	lr
    76a2:	0000      	.short	0x0000
    76a4:	20001354 	.word	0x20001354

000076a8 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    76a8:	4803      	ldr	r0, [pc, #12]	; (76b8 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    76aa:	7c80      	ldrb	r0, [r0, #18]
    76ac:	0780      	lsls	r0, r0, #30
    76ae:	d401      	bmi.n	76b4 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    76b0:	2001      	movs	r0, #1
    76b2:	4770      	bx	lr
    76b4:	2000      	movs	r0, #0
    76b6:	4770      	bx	lr
    76b8:	20001354 	.word	0x20001354

000076bc <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    76bc:	4803      	ldr	r0, [pc, #12]	; (76cc <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    76be:	7c80      	ldrb	r0, [r0, #18]
    76c0:	07c0      	lsls	r0, r0, #31
    76c2:	d001      	beq.n	76c8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    76c4:	2000      	movs	r0, #0
    76c6:	4770      	bx	lr
    76c8:	2001      	movs	r0, #1
    76ca:	4770      	bx	lr
    76cc:	20001354 	.word	0x20001354

000076d0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    76d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    76d4:	4c12      	ldr	r4, [pc, #72]	; (7720 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    76d6:	4607      	mov	r7, r0
    76d8:	460e      	mov	r6, r1
    76da:	7da0      	ldrb	r0, [r4, #22]
    76dc:	b110      	cbz	r0, 76e4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    76de:	8b20      	ldrh	r0, [r4, #24]
    76e0:	2800      	cmp	r0, #0
    76e2:	d012      	beq.n	770a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    76e4:	480e      	ldr	r0, [pc, #56]	; (7720 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    76e6:	3014      	adds	r0, #20
    76e8:	4680      	mov	r8, r0
    76ea:	f008 f840 	bl	f76e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    76ee:	b9a8      	cbnz	r0, 771c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    76f0:	8aa5      	ldrh	r5, [r4, #20]
    76f2:	8aa0      	ldrh	r0, [r4, #20]
    76f4:	4632      	mov	r2, r6
    76f6:	4639      	mov	r1, r7
    76f8:	f008 f87d 	bl	f7f6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    76fc:	b138      	cbz	r0, 770e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    76fe:	7da0      	ldrb	r0, [r4, #22]
    7700:	b110      	cbz	r0, 7708 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    7702:	8b20      	ldrh	r0, [r4, #24]
    7704:	1e40      	subs	r0, r0, #1
    7706:	8320      	strh	r0, [r4, #24]
    7708:	2001      	movs	r0, #1
    770a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    770e:	4640      	mov	r0, r8
    7710:	f008 f82d 	bl	f76e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    7714:	b910      	cbnz	r0, 771c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    7716:	8aa0      	ldrh	r0, [r4, #20]
    7718:	42a8      	cmp	r0, r5
    771a:	d1ea      	bne.n	76f2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    771c:	2000      	movs	r0, #0
    771e:	e7f4      	b.n	770a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    7720:	20001354 	.word	0x20001354
    7724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    7728:	468a      	mov	sl, r1
    772a:	4699      	mov	r9, r3
    772c:	4615      	mov	r5, r2
    772e:	4604      	mov	r4, r0
    7730:	a901      	add	r1, sp, #4
    7732:	f007 fc7e 	bl	f032 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7736:	bbe0      	cbnz	r0, 77b2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe2>
    7738:	9f02      	ldr	r7, [sp, #8]
    773a:	f04f 0800 	mov.w	r8, #0
    773e:	3778      	adds	r7, #120	; 0x78
    7740:	b18d      	cbz	r5, 7766 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x96>
    7742:	4620      	mov	r0, r4
    7744:	f7fe fb82 	bl	5e4c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    7748:	0004      	movs	r4, r0
    774a:	d00f      	beq.n	776c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    774c:	4629      	mov	r1, r5
    774e:	f007 f820 	bl	e792 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    7752:	0006      	movs	r6, r0
    7754:	d003      	beq.n	775e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    7756:	481d      	ldr	r0, [pc, #116]	; (77cc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xfc>)
    7758:	8840      	ldrh	r0, [r0, #2]
    775a:	42a8      	cmp	r0, r5
    775c:	d208      	bcs.n	7770 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa0>
    775e:	2000      	movs	r0, #0
    7760:	b004      	add	sp, #16
    7762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7766:	2001      	movs	r0, #1
    7768:	7578      	strb	r0, [r7, #21]
    776a:	e029      	b.n	77c0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    776c:	216e      	movs	r1, #110	; 0x6e
    776e:	e02a      	b.n	77c6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf6>
    7770:	4620      	mov	r0, r4
    7772:	4631      	mov	r1, r6
    7774:	aa03      	add	r2, sp, #12
    7776:	f007 f805 	bl	e784 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    777a:	9803      	ldr	r0, [sp, #12]
    777c:	f8a0 8000 	strh.w	r8, [r0]
    7780:	f880 8002 	strb.w	r8, [r0, #2]
    7784:	7d79      	ldrb	r1, [r7, #21]
    7786:	b109      	cbz	r1, 778c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    7788:	f04f 0a02 	mov.w	sl, #2
    778c:	4651      	mov	r1, sl
    778e:	f007 ff6f 	bl	f670 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    7792:	4631      	mov	r1, r6
    7794:	2603      	movs	r6, #3
    7796:	4620      	mov	r0, r4
    7798:	464a      	mov	r2, r9
    779a:	462b      	mov	r3, r5
    779c:	9600      	str	r6, [sp, #0]
    779e:	f006 fee5 	bl	e56c <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    77a2:	4620      	mov	r0, r4
    77a4:	4629      	mov	r1, r5
    77a6:	f006 ffa6 	bl	e6f6 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    77aa:	b158      	cbz	r0, 77c4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf4>
    77ac:	4644      	mov	r4, r8
    77ae:	a801      	add	r0, sp, #4
    77b0:	e000      	b.n	77b4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    77b2:	e005      	b.n	77c0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    77b4:	f007 fffc 	bl	f7b0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    77b8:	9802      	ldr	r0, [sp, #8]
    77ba:	f8a0 41ca 	strh.w	r4, [r0, #458]	; 0x1ca
    77be:	757c      	strb	r4, [r7, #21]
    77c0:	2001      	movs	r0, #1
    77c2:	e7cd      	b.n	7760 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x90>
    77c4:	2184      	movs	r1, #132	; 0x84
    77c6:	202b      	movs	r0, #43	; 0x2b
    77c8:	f7fd ff02 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77cc:	20001354 	.word	0x20001354

000077d0 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    77d0:	4901      	ldr	r1, [pc, #4]	; (77d8 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    77d2:	2001      	movs	r0, #1
    77d4:	7008      	strb	r0, [r1, #0]
    77d6:	4770      	bx	lr
    77d8:	200017dd 	.word	0x200017dd

000077dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>:
    77dc:	b538      	push	{r3, r4, r5, lr}
    77de:	b198      	cbz	r0, 7808 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x2c>
    77e0:	7a03      	ldrb	r3, [r0, #8]
    77e2:	f88d 3000 	strb.w	r3, [sp]
    77e6:	9b00      	ldr	r3, [sp, #0]
    77e8:	9300      	str	r3, [sp, #0]
    77ea:	f89d 3000 	ldrb.w	r3, [sp]
    77ee:	2b00      	cmp	r3, #0
    77f0:	d114      	bne.n	781c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x40>
    77f2:	6003      	str	r3, [r0, #0]
    77f4:	6041      	str	r1, [r0, #4]
    77f6:	f3ef 8310 	mrs	r3, PRIMASK
    77fa:	b672      	cpsid	i
    77fc:	4908      	ldr	r1, [pc, #32]	; (7820 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x44>)
    77fe:	680c      	ldr	r4, [r1, #0]
    7800:	b13c      	cbz	r4, 7812 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x36>
    7802:	684c      	ldr	r4, [r1, #4]
    7804:	6020      	str	r0, [r4, #0]
    7806:	e005      	b.n	7814 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x38>
    7808:	f240 4141 	movw	r1, #1089	; 0x441
    780c:	2010      	movs	r0, #16
    780e:	f7fd fedf 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7812:	6008      	str	r0, [r1, #0]
    7814:	6048      	str	r0, [r1, #4]
    7816:	b903      	cbnz	r3, 781a <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x3e>
    7818:	b662      	cpsie	i
    781a:	7202      	strb	r2, [r0, #8]
    781c:	bd38      	pop	{r3, r4, r5, pc}
    781e:	0000      	.short	0x0000
    7820:	20000118 	.word	0x20000118

00007824 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    7824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7828:	0004      	movs	r4, r0
    782a:	d00a      	beq.n	7842 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    782c:	484d      	ldr	r0, [pc, #308]	; (7964 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x140>)
    782e:	2600      	movs	r6, #0
    7830:	7801      	ldrb	r1, [r0, #0]
    7832:	b149      	cbz	r1, 7848 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    7834:	7066      	strb	r6, [r4, #1]
    7836:	2103      	movs	r1, #3
    7838:	7021      	strb	r1, [r4, #0]
    783a:	2101      	movs	r1, #1
    783c:	7121      	strb	r1, [r4, #4]
    783e:	7006      	strb	r6, [r0, #0]
    7840:	e08d      	b.n	795e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    7842:	f240 315d 	movw	r1, #861	; 0x35d
    7846:	e050      	b.n	78ea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc6>
    7848:	f8df 811c 	ldr.w	r8, [pc, #284]	; 7968 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x144>
    784c:	f88d 6000 	strb.w	r6, [sp]
    7850:	4668      	mov	r0, sp
    7852:	f000 f8b9 	bl	79c8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c>
    7856:	f89d 1000 	ldrb.w	r1, [sp]
    785a:	2900      	cmp	r1, #0
    785c:	d1f8      	bne.n	7850 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2c>
    785e:	2800      	cmp	r0, #0
    7860:	d07e      	beq.n	7960 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13c>
    7862:	4605      	mov	r5, r0
    7864:	7a00      	ldrb	r0, [r0, #8]
    7866:	f88d 0000 	strb.w	r0, [sp]
    786a:	9800      	ldr	r0, [sp, #0]
    786c:	9000      	str	r0, [sp, #0]
    786e:	f89d 7000 	ldrb.w	r7, [sp]
    7872:	2f1f      	cmp	r7, #31
    7874:	d26e      	bcs.n	7954 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    7876:	e8df f007 	tbb	[pc, r7]
    787a:	3d6d      	.short	0x3d6d
    787c:	3d6d106d 	.word	0x3d6d106d
    7880:	3d3d4d3d 	.word	0x3d3d4d3d
    7884:	6d3d3d3d 	.word	0x6d3d3d3d
    7888:	3d3d6d10 	.word	0x3d3d6d10
    788c:	6d6d6d10 	.word	0x6d6d6d10
    7890:	103d3d6d 	.word	0x103d3d6d
    7894:	626d3d3d 	.word	0x626d3d3d
    7898:	0010      	.short	0x0010
    789a:	4834      	ldr	r0, [pc, #208]	; (796c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x148>)
    789c:	6803      	ldr	r3, [r0, #0]
    789e:	2b00      	cmp	r3, #0
    78a0:	d05c      	beq.n	795c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x138>
    78a2:	6868      	ldr	r0, [r5, #4]
    78a4:	463a      	mov	r2, r7
    78a6:	4621      	mov	r1, r4
    78a8:	4798      	blx	r3
    78aa:	7820      	ldrb	r0, [r4, #0]
    78ac:	6869      	ldr	r1, [r5, #4]
    78ae:	2811      	cmp	r0, #17
    78b0:	d002      	beq.n	78b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    78b2:	2814      	cmp	r0, #20
    78b4:	d003      	beq.n	78be <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    78b6:	e01b      	b.n	78f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    78b8:	7920      	ldrb	r0, [r4, #4]
    78ba:	b930      	cbnz	r0, 78ca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa6>
    78bc:	e018      	b.n	78f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    78be:	7920      	ldrb	r0, [r4, #4]
    78c0:	b1b0      	cbz	r0, 78f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    78c2:	4608      	mov	r0, r1
    78c4:	f008 faab 	bl	fe1e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    78c8:	b990      	cbnz	r0, 78f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    78ca:	88e4      	ldrh	r4, [r4, #6]
    78cc:	2100      	movs	r1, #0
    78ce:	4620      	mov	r0, r4
    78d0:	f007 f912 	bl	eaf8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    78d4:	b160      	cbz	r0, 78f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    78d6:	8800      	ldrh	r0, [r0, #0]
    78d8:	f007 facc 	bl	ee74 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    78dc:	2100      	movs	r1, #0
    78de:	4620      	mov	r0, r4
    78e0:	f7fe f90a 	bl	5af8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    78e4:	b120      	cbz	r0, 78f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    78e6:	f44f 71af 	mov.w	r1, #350	; 0x15e
    78ea:	2010      	movs	r0, #16
    78ec:	f7fd fe70 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78f0:	722e      	strb	r6, [r5, #8]
    78f2:	e034      	b.n	795e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    78f4:	f8d8 0000 	ldr.w	r0, [r8]
    78f8:	b358      	cbz	r0, 7952 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12e>
    78fa:	463a      	mov	r2, r7
    78fc:	4629      	mov	r1, r5
    78fe:	4620      	mov	r0, r4
    7900:	f000 f892 	bl	7a28 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8c>
    7904:	b110      	cbz	r0, 790c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe8>
    7906:	2f0b      	cmp	r7, #11
    7908:	d029      	beq.n	795e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    790a:	e7f1      	b.n	78f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    790c:	2f0b      	cmp	r7, #11
    790e:	d026      	beq.n	795e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    7910:	722e      	strb	r6, [r5, #8]
    7912:	e79b      	b.n	784c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x28>
    7914:	f8d8 0000 	ldr.w	r0, [r8]
    7918:	b180      	cbz	r0, 793c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    791a:	6868      	ldr	r0, [r5, #4]
    791c:	7066      	strb	r6, [r4, #1]
    791e:	2108      	movs	r1, #8
    7920:	7021      	strb	r1, [r4, #0]
    7922:	8801      	ldrh	r1, [r0, #0]
    7924:	80a1      	strh	r1, [r4, #4]
    7926:	f8d0 1290 	ldr.w	r1, [r0, #656]	; 0x290
    792a:	f8c4 1006 	str.w	r1, [r4, #6]
    792e:	f8d0 1294 	ldr.w	r1, [r0, #660]	; 0x294
    7932:	f8c4 100a 	str.w	r1, [r4, #10]
    7936:	f8b0 0298 	ldrh.w	r0, [r0, #664]	; 0x298
    793a:	81e0      	strh	r0, [r4, #14]
    793c:	e7d8      	b.n	78f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    793e:	480c      	ldr	r0, [pc, #48]	; (7970 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14c>)
    7940:	6803      	ldr	r3, [r0, #0]
    7942:	b11b      	cbz	r3, 794c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x128>
    7944:	2200      	movs	r2, #0
    7946:	4621      	mov	r1, r4
    7948:	4610      	mov	r0, r2
    794a:	4798      	blx	r3
    794c:	e7d0      	b.n	78f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    794e:	e007      	b.n	7960 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13c>
    7950:	e000      	b.n	7954 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    7952:	e002      	b.n	795a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x136>
    7954:	f240 412d 	movw	r1, #1069	; 0x42d
    7958:	e7c7      	b.n	78ea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc6>
    795a:	e7c9      	b.n	78f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    795c:	e7c8      	b.n	78f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    795e:	2001      	movs	r0, #1
    7960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7964:	200017dd 	.word	0x200017dd
    7968:	20000124 	.word	0x20000124
    796c:	20000120 	.word	0x20000120
    7970:	20000128 	.word	0x20000128

00007974 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    7974:	4901      	ldr	r1, [pc, #4]	; (797c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    7976:	7008      	strb	r0, [r1, #0]
    7978:	f000 b928 	b.w	7bcc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x230>
    797c:	20000114 	.word	0x20000114

00007980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    7980:	4801      	ldr	r0, [pc, #4]	; (7988 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    7982:	7800      	ldrb	r0, [r0, #0]
    7984:	f7fd bc28 	b.w	51d8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7988:	20000114 	.word	0x20000114

0000798c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    798c:	4902      	ldr	r1, [pc, #8]	; (7998 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    798e:	4801      	ldr	r0, [pc, #4]	; (7994 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    7990:	6008      	str	r0, [r1, #0]
    7992:	4770      	bx	lr
    7994:	0000fd49 	.word	0x0000fd49
    7998:	20000120 	.word	0x20000120

0000799c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    799c:	4905      	ldr	r1, [pc, #20]	; (79b4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    799e:	4804      	ldr	r0, [pc, #16]	; (79b0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    79a0:	6008      	str	r0, [r1, #0]
    79a2:	4906      	ldr	r1, [pc, #24]	; (79bc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    79a4:	4804      	ldr	r0, [pc, #16]	; (79b8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    79a6:	6008      	str	r0, [r1, #0]
    79a8:	4906      	ldr	r1, [pc, #24]	; (79c4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    79aa:	4805      	ldr	r0, [pc, #20]	; (79c0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    79ac:	6008      	str	r0, [r1, #0]
    79ae:	4770      	bx	lr
    79b0:	0000fd49 	.word	0x0000fd49
    79b4:	20000120 	.word	0x20000120
    79b8:	0000f889 	.word	0x0000f889
    79bc:	20000124 	.word	0x20000124
    79c0:	000063d9 	.word	0x000063d9
    79c4:	20000128 	.word	0x20000128
    79c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79ca:	4605      	mov	r5, r0
    79cc:	4c15      	ldr	r4, [pc, #84]	; (7a24 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x88>)
    79ce:	2000      	movs	r0, #0
    79d0:	7028      	strb	r0, [r5, #0]
    79d2:	6820      	ldr	r0, [r4, #0]
    79d4:	2800      	cmp	r0, #0
    79d6:	d023      	beq.n	7a20 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x84>
    79d8:	7a01      	ldrb	r1, [r0, #8]
    79da:	2601      	movs	r6, #1
    79dc:	f88d 1000 	strb.w	r1, [sp]
    79e0:	9900      	ldr	r1, [sp, #0]
    79e2:	9100      	str	r1, [sp, #0]
    79e4:	f89d 1000 	ldrb.w	r1, [sp]
    79e8:	2908      	cmp	r1, #8
    79ea:	d107      	bne.n	79fc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x60>
    79ec:	6840      	ldr	r0, [r0, #4]
    79ee:	8800      	ldrh	r0, [r0, #0]
    79f0:	f7fe fa16 	bl	5e20 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    79f4:	f006 fdd1 	bl	e59a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    79f8:	2800      	cmp	r0, #0
    79fa:	d011      	beq.n	7a20 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x84>
    79fc:	f3ef 8110 	mrs	r1, PRIMASK
    7a00:	6820      	ldr	r0, [r4, #0]
    7a02:	b672      	cpsid	i
    7a04:	6802      	ldr	r2, [r0, #0]
    7a06:	6022      	str	r2, [r4, #0]
    7a08:	b901      	cbnz	r1, 7a0c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x70>
    7a0a:	b662      	cpsie	i
    7a0c:	7a01      	ldrb	r1, [r0, #8]
    7a0e:	f88d 1000 	strb.w	r1, [sp]
    7a12:	9900      	ldr	r1, [sp, #0]
    7a14:	9100      	str	r1, [sp, #0]
    7a16:	f89d 1000 	ldrb.w	r1, [sp]
    7a1a:	2900      	cmp	r1, #0
    7a1c:	d100      	bne.n	7a20 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x84>
    7a1e:	702e      	strb	r6, [r5, #0]
    7a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a22:	0000      	.short	0x0000
    7a24:	20000118 	.word	0x20000118
    7a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7a2c:	b086      	sub	sp, #24
    7a2e:	000f      	movs	r7, r1
    7a30:	4604      	mov	r4, r0
    7a32:	4691      	mov	r9, r2
    7a34:	d013      	beq.n	7a5e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc2>
    7a36:	6878      	ldr	r0, [r7, #4]
    7a38:	b188      	cbz	r0, 7a5e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc2>
    7a3a:	f100 0578 	add.w	r5, r0, #120	; 0x78
    7a3e:	f500 7196 	add.w	r1, r0, #300	; 0x12c
    7a42:	8806      	ldrh	r6, [r0, #0]
    7a44:	4610      	mov	r0, r2
    7a46:	f04f 0800 	mov.w	r8, #0
    7a4a:	2a10      	cmp	r2, #16
    7a4c:	d079      	beq.n	7b42 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a6>
    7a4e:	dc09      	bgt.n	7a64 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc8>
    7a50:	f04f 0a01 	mov.w	sl, #1
    7a54:	2801      	cmp	r0, #1
    7a56:	d00a      	beq.n	7a6e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd2>
    7a58:	2a0b      	cmp	r2, #11
    7a5a:	d171      	bne.n	7b40 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    7a5c:	e01a      	b.n	7a94 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf8>
    7a5e:	f240 2182 	movw	r1, #642	; 0x282
    7a62:	e0ad      	b.n	7bc0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    7a64:	281a      	cmp	r0, #26
    7a66:	d04d      	beq.n	7b04 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x168>
    7a68:	2a1b      	cmp	r2, #27
    7a6a:	d169      	bne.n	7b40 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    7a6c:	e027      	b.n	7abe <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x122>
    7a6e:	2d00      	cmp	r5, #0
    7a70:	d00f      	beq.n	7a92 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf6>
    7a72:	f884 8001 	strb.w	r8, [r4, #1]
    7a76:	f884 a000 	strb.w	sl, [r4]
    7a7a:	f884 8004 	strb.w	r8, [r4, #4]
    7a7e:	f8a4 6005 	strh.w	r6, [r4, #5]
    7a82:	f895 0057 	ldrb.w	r0, [r5, #87]	; 0x57
    7a86:	71e0      	strb	r0, [r4, #7]
    7a88:	f835 0f58 	ldrh.w	r0, [r5, #88]!
    7a8c:	8120      	strh	r0, [r4, #8]
    7a8e:	8868      	ldrh	r0, [r5, #2]
    7a90:	8160      	strh	r0, [r4, #10]
    7a92:	e076      	b.n	7b82 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    7a94:	4630      	mov	r0, r6
    7a96:	f7fe f9d9 	bl	5e4c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    7a9a:	b168      	cbz	r0, 7ab8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>
    7a9c:	f884 8001 	strb.w	r8, [r4, #1]
    7aa0:	220d      	movs	r2, #13
    7aa2:	7022      	strb	r2, [r4, #0]
    7aa4:	80e6      	strh	r6, [r4, #6]
    7aa6:	4641      	mov	r1, r8
    7aa8:	f8a4 a008 	strh.w	sl, [r4, #8]
    7aac:	f884 a004 	strb.w	sl, [r4, #4]
    7ab0:	460a      	mov	r2, r1
    7ab2:	f006 ff45 	bl	e940 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    7ab6:	e064      	b.n	7b82 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    7ab8:	f44f 71ce 	mov.w	r1, #412	; 0x19c
    7abc:	e080      	b.n	7bc0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    7abe:	f7ff fdfd 	bl	76bc <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    7ac2:	b3e8      	cbz	r0, 7b40 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    7ac4:	f887 8008 	strb.w	r8, [r7, #8]
    7ac8:	4630      	mov	r0, r6
    7aca:	f8ad 6000 	strh.w	r6, [sp]
    7ace:	a902      	add	r1, sp, #8
    7ad0:	f007 faaf 	bl	f032 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7ad4:	b110      	cbz	r0, 7adc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x140>
    7ad6:	f44f 71b7 	mov.w	r1, #366	; 0x16e
    7ada:	e071      	b.n	7bc0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    7adc:	9803      	ldr	r0, [sp, #12]
    7ade:	f810 1f6a 	ldrb.w	r1, [r0, #106]!
    7ae2:	f88d 1002 	strb.w	r1, [sp, #2]
    7ae6:	7841      	ldrb	r1, [r0, #1]
    7ae8:	f88d 1003 	strb.w	r1, [sp, #3]
    7aec:	8840      	ldrh	r0, [r0, #2]
    7aee:	f8ad 0004 	strh.w	r0, [sp, #4]
    7af2:	2102      	movs	r1, #2
    7af4:	4668      	mov	r0, sp
    7af6:	f009 fc2c 	bl	11352 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    7afa:	2800      	cmp	r0, #0
    7afc:	d034      	beq.n	7b68 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1cc>
    7afe:	f44f 71c2 	mov.w	r1, #388	; 0x184
    7b02:	e05d      	b.n	7bc0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    7b04:	f7ff fdd0 	bl	76a8 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    7b08:	b1d0      	cbz	r0, 7b40 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    7b0a:	f887 8008 	strb.w	r8, [r7, #8]
    7b0e:	a903      	add	r1, sp, #12
    7b10:	4630      	mov	r0, r6
    7b12:	f009 fa95 	bl	11040 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    7b16:	b110      	cbz	r0, 7b1e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x182>
    7b18:	f240 118b 	movw	r1, #395	; 0x18b
    7b1c:	e050      	b.n	7bc0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    7b1e:	f8ad 6000 	strh.w	r6, [sp]
    7b22:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    7b26:	f8ad 0002 	strh.w	r0, [sp, #2]
    7b2a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7b2e:	f8ad 0004 	strh.w	r0, [sp, #4]
    7b32:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    7b36:	f8ad 0006 	strh.w	r0, [sp, #6]
    7b3a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    7b3e:	e001      	b.n	7b44 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a8>
    7b40:	e015      	b.n	7b6e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1d2>
    7b42:	e009      	b.n	7b58 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1bc>
    7b44:	f8ad 0008 	strh.w	r0, [sp, #8]
    7b48:	4668      	mov	r0, sp
    7b4a:	f009 fa9d 	bl	11088 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    7b4e:	2800      	cmp	r0, #0
    7b50:	d00a      	beq.n	7b68 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1cc>
    7b52:	f44f 71ca 	mov.w	r1, #404	; 0x194
    7b56:	e033      	b.n	7bc0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    7b58:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    7b5c:	f000 0001 	and.w	r0, r0, #1
    7b60:	f7ff fd96 	bl	7690 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    7b64:	b130      	cbz	r0, 7b74 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1d8>
    7b66:	2000      	movs	r0, #0
    7b68:	b006      	add	sp, #24
    7b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7b6e:	f1b9 0f08 	cmp.w	r9, #8
    7b72:	d008      	beq.n	7b86 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1ea>
    7b74:	4814      	ldr	r0, [pc, #80]	; (7bc8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22c>)
    7b76:	6803      	ldr	r3, [r0, #0]
    7b78:	b11b      	cbz	r3, 7b82 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    7b7a:	6878      	ldr	r0, [r7, #4]
    7b7c:	464a      	mov	r2, r9
    7b7e:	4621      	mov	r1, r4
    7b80:	4798      	blx	r3
    7b82:	2001      	movs	r0, #1
    7b84:	e7f0      	b.n	7b68 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1cc>
    7b86:	4630      	mov	r0, r6
    7b88:	f7fe f94a 	bl	5e20 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7b8c:	f006 fd05 	bl	e59a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    7b90:	b1a0      	cbz	r0, 7bbc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x220>
    7b92:	4630      	mov	r0, r6
    7b94:	f007 f96e 	bl	ee74 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    7b98:	2100      	movs	r1, #0
    7b9a:	4630      	mov	r0, r6
    7b9c:	f7fd ffac 	bl	5af8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7ba0:	2d00      	cmp	r5, #0
    7ba2:	d0ee      	beq.n	7b82 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    7ba4:	f884 8001 	strb.w	r8, [r4, #1]
    7ba8:	210a      	movs	r1, #10
    7baa:	7021      	strb	r1, [r4, #0]
    7bac:	f884 8004 	strb.w	r8, [r4, #4]
    7bb0:	f8a4 6005 	strh.w	r6, [r4, #5]
    7bb4:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    7bb8:	71e0      	strb	r0, [r4, #7]
    7bba:	e7e2      	b.n	7b82 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    7bbc:	f240 21c3 	movw	r1, #707	; 0x2c3
    7bc0:	2010      	movs	r0, #16
    7bc2:	f7fd fd05 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bc6:	0000      	.short	0x0000
    7bc8:	20000124 	.word	0x20000124
    7bcc:	4904      	ldr	r1, [pc, #16]	; (7be0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x244>)
    7bce:	2000      	movs	r0, #0
    7bd0:	6048      	str	r0, [r1, #4]
    7bd2:	6088      	str	r0, [r1, #8]
    7bd4:	4903      	ldr	r1, [pc, #12]	; (7be4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x248>)
    7bd6:	6008      	str	r0, [r1, #0]
    7bd8:	6048      	str	r0, [r1, #4]
    7bda:	8108      	strh	r0, [r1, #8]
    7bdc:	4770      	bx	lr
    7bde:	0000      	.short	0x0000
    7be0:	20000114 	.word	0x20000114
    7be4:	200017dd 	.word	0x200017dd

00007be8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    7be8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bea:	f06f 021f 	mvn.w	r2, #31
    7bee:	0c01      	lsrs	r1, r0, #16
    7bf0:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    7bf4:	251f      	movs	r5, #31
    7bf6:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    7bfa:	3854      	subs	r0, #84	; 0x54
    7bfc:	d00d      	beq.n	7c1a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7bfe:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    7c02:	3855      	subs	r0, #85	; 0x55
    7c04:	d009      	beq.n	7c1a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7c06:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    7c0a:	38aa      	subs	r0, #170	; 0xaa
    7c0c:	d005      	beq.n	7c1a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7c0e:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    7c12:	38aa      	subs	r0, #170	; 0xaa
    7c14:	d001      	beq.n	7c1a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7c16:	2001      	movs	r0, #1
    7c18:	e000      	b.n	7c1c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    7c1a:	2000      	movs	r0, #0
    7c1c:	2200      	movs	r2, #0
    7c1e:	4613      	mov	r3, r2
    7c20:	ea4f 0402 	mov.w	r4, r2
    7c24:	ea82 0701 	eor.w	r7, r2, r1
    7c28:	43ff      	mvns	r7, r7
    7c2a:	431f      	orrs	r7, r3
    7c2c:	1c7f      	adds	r7, r7, #1
    7c2e:	d00f      	beq.n	7c50 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    7c30:	f006 0701 	and.w	r7, r6, #1
    7c34:	0852      	lsrs	r2, r2, #1
    7c36:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    7c3a:	f005 0701 	and.w	r7, r5, #1
    7c3e:	085b      	lsrs	r3, r3, #1
    7c40:	0876      	lsrs	r6, r6, #1
    7c42:	086d      	lsrs	r5, r5, #1
    7c44:	1c64      	adds	r4, r4, #1
    7c46:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    7c4a:	2c16      	cmp	r4, #22
    7c4c:	d3ea      	bcc.n	7c24 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    7c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c50:	2000      	movs	r0, #0
    7c52:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007c54 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    7c54:	b510      	push	{r4, lr}
    7c56:	4804      	ldr	r0, [pc, #16]	; (7c68 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    7c58:	f007 ffe0 	bl	fc1c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb4>
    7c5c:	4802      	ldr	r0, [pc, #8]	; (7c68 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    7c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7c62:	3008      	adds	r0, #8
    7c64:	f007 bfda 	b.w	fc1c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb4>
    7c68:	2000012c 	.word	0x2000012c

00007c6c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    7c6c:	4801      	ldr	r0, [pc, #4]	; (7c74 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    7c6e:	f000 b809 	b.w	7c84 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    7c72:	0000      	.short	0x0000
    7c74:	2000012c 	.word	0x2000012c

00007c78 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    7c78:	4801      	ldr	r0, [pc, #4]	; (7c80 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    7c7a:	f000 b803 	b.w	7c84 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    7c7e:	0000      	.short	0x0000
    7c80:	20000134 	.word	0x20000134
    7c84:	b510      	push	{r4, lr}
    7c86:	e9d0 2100 	ldrd	r2, r1, [r0]
    7c8a:	4b09      	ldr	r3, [pc, #36]	; (7cb0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    7c8c:	4c09      	ldr	r4, [pc, #36]	; (7cb4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    7c8e:	4353      	muls	r3, r2
    7c90:	4354      	muls	r4, r2
    7c92:	4051      	eors	r1, r2
    7c94:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    7c98:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    7c9c:	ea4f 41f1 	mov.w	r1, r1, ror #19
    7ca0:	e9c0 2100 	strd	r2, r1, [r0]
    7ca4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    7ca8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7cac:	4618      	mov	r0, r3
    7cae:	bd10      	pop	{r4, pc}
    7cb0:	c6ef3760 	.word	0xc6ef3760
    7cb4:	9e3779bb 	.word	0x9e3779bb

00007cb8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    7cb8:	b570      	push	{r4, r5, r6, lr}
    7cba:	4604      	mov	r4, r0
    7cbc:	7c00      	ldrb	r0, [r0, #16]
    7cbe:	b300      	cbz	r0, 7d02 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    7cc0:	2802      	cmp	r0, #2
    7cc2:	d01e      	beq.n	7d02 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    7cc4:	f05f 0001 	movs.w	r0, #1
    7cc8:	f104 0149 	add.w	r1, r4, #73	; 0x49
    7ccc:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    7cd0:	460d      	mov	r5, r1
    7cd2:	b1c0      	cbz	r0, 7d06 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    7cd4:	7de0      	ldrb	r0, [r4, #23]
    7cd6:	b1f0      	cbz	r0, 7d16 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    7cd8:	f8d4 0011 	ldr.w	r0, [r4, #17]
    7cdc:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    7ce0:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    7ce4:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    7ce8:	7c20      	ldrb	r0, [r4, #16]
    7cea:	f007 ffb8 	bl	fc5e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf6>
    7cee:	7620      	strb	r0, [r4, #24]
    7cf0:	2008      	movs	r0, #8
    7cf2:	7660      	strb	r0, [r4, #25]
    7cf4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7cf8:	4629      	mov	r1, r5
    7cfa:	f007 ff9c 	bl	fc36 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xce>
    7cfe:	b9a8      	cbnz	r0, 7d2c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    7d00:	e00e      	b.n	7d20 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    7d02:	2000      	movs	r0, #0
    7d04:	e7e0      	b.n	7cc8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    7d06:	2000      	movs	r0, #0
    7d08:	f7fe fb18 	bl	633c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    7d0c:	2800      	cmp	r0, #0
    7d0e:	d1eb      	bne.n	7ce8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    7d10:	f240 418a 	movw	r1, #1162	; 0x48a
    7d14:	e001      	b.n	7d1a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    7d16:	f240 418e 	movw	r1, #1166	; 0x48e
    7d1a:	202d      	movs	r0, #45	; 0x2d
    7d1c:	f7fd fc58 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d20:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7d24:	4629      	mov	r1, r5
    7d26:	f007 ff8f 	bl	fc48 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe0>
    7d2a:	b100      	cbz	r0, 7d2e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    7d2c:	2001      	movs	r0, #1
    7d2e:	76a0      	strb	r0, [r4, #26]
    7d30:	7e20      	ldrb	r0, [r4, #24]
    7d32:	b130      	cbz	r0, 7d42 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    7d34:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    7d38:	f104 0150 	add.w	r1, r4, #80	; 0x50
    7d3c:	f007 f936 	bl	efac <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    7d40:	7660      	strb	r0, [r4, #25]
    7d42:	f7ff f9b9 	bl	70b8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    7d46:	490c      	ldr	r1, [pc, #48]	; (7d78 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    7d48:	fba0 2301 	umull	r2, r3, r0, r1
    7d4c:	f104 0040 	add.w	r0, r4, #64	; 0x40
    7d50:	f008 f91e 	bl	ff90 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe0>
    7d54:	2100      	movs	r1, #0
    7d56:	4620      	mov	r0, r4
    7d58:	f008 f8c8 	bl	feec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    7d5c:	2000      	movs	r0, #0
    7d5e:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    7d62:	78a0      	ldrb	r0, [r4, #2]
    7d64:	0740      	lsls	r0, r0, #29
    7d66:	d505      	bpl.n	7d74 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    7d68:	4620      	mov	r0, r4
    7d6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7d6e:	2100      	movs	r1, #0
    7d70:	f000 bdac 	b.w	88cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x660>
    7d74:	bd70      	pop	{r4, r5, r6, pc}
    7d76:	0000      	.short	0x0000
    7d78:	000f4240 	.word	0x000f4240

00007d7c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    7d7c:	b530      	push	{r4, r5, lr}
    7d7e:	460c      	mov	r4, r1
    7d80:	b08d      	sub	sp, #52	; 0x34
    7d82:	4605      	mov	r5, r0
    7d84:	4601      	mov	r1, r0
    7d86:	2220      	movs	r2, #32
    7d88:	a802      	add	r0, sp, #8
    7d8a:	f005 fe83 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7d8e:	a80a      	add	r0, sp, #40	; 0x28
    7d90:	f008 f964 	bl	1005c <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    7d94:	7aa0      	ldrb	r0, [r4, #10]
    7d96:	f88d 0018 	strb.w	r0, [sp, #24]
    7d9a:	7820      	ldrb	r0, [r4, #0]
    7d9c:	f88d 0008 	strb.w	r0, [sp, #8]
    7da0:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    7da4:	f8ad 0000 	strh.w	r0, [sp]
    7da8:	f89d 0000 	ldrb.w	r0, [sp]
    7dac:	f000 0101 	and.w	r1, r0, #1
    7db0:	f3c0 0240 	ubfx	r2, r0, #1, #1
    7db4:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    7db8:	f3c0 0280 	ubfx	r2, r0, #2, #1
    7dbc:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    7dc0:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    7dc4:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    7dc8:	f3c0 1200 	ubfx	r2, r0, #4, #1
    7dcc:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    7dd0:	f3c0 1240 	ubfx	r2, r0, #5, #1
    7dd4:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    7dd8:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7ddc:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    7de0:	f8ad 000a 	strh.w	r0, [sp, #10]
    7de4:	7d20      	ldrb	r0, [r4, #20]
    7de6:	2801      	cmp	r0, #1
    7de8:	d006      	beq.n	7df8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    7dea:	2802      	cmp	r0, #2
    7dec:	d004      	beq.n	7df8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    7dee:	f240 21bb 	movw	r1, #699	; 0x2bb
    7df2:	2006      	movs	r0, #6
    7df4:	f7fd fbec 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7df8:	f88d 000c 	strb.w	r0, [sp, #12]
    7dfc:	7a61      	ldrb	r1, [r4, #9]
    7dfe:	a80a      	add	r0, sp, #40	; 0x28
    7e00:	f008 f913 	bl	1002a <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    7e04:	7d20      	ldrb	r0, [r4, #20]
    7e06:	2101      	movs	r1, #1
    7e08:	2802      	cmp	r0, #2
    7e0a:	d102      	bne.n	7e12 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    7e0c:	7d60      	ldrb	r0, [r4, #21]
    7e0e:	1c40      	adds	r0, r0, #1
    7e10:	b2c1      	uxtb	r1, r0
    7e12:	7ea0      	ldrb	r0, [r4, #26]
    7e14:	1c40      	adds	r0, r0, #1
    7e16:	b2c2      	uxtb	r2, r0
    7e18:	a80a      	add	r0, sp, #40	; 0x28
    7e1a:	f008 f8cd 	bl	ffb8 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    7e1e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    7e22:	0700      	lsls	r0, r0, #28
    7e24:	d501      	bpl.n	7e2a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    7e26:	2000      	movs	r0, #0
    7e28:	e020      	b.n	7e6c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    7e2a:	a80a      	add	r0, sp, #40	; 0x28
    7e2c:	f008 f8d6 	bl	ffdc <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7e30:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    7e34:	2228      	movs	r2, #40	; 0x28
    7e36:	f000 fdef 	bl	8a18 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    7e3a:	f240 2171 	movw	r1, #625	; 0x271
    7e3e:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    7e42:	fbb0 f0f1 	udiv	r0, r0, r1
    7e46:	4348      	muls	r0, r1
    7e48:	f8d4 1002 	ldr.w	r1, [r4, #2]
    7e4c:	f240 2371 	movw	r3, #625	; 0x271
    7e50:	0a0a      	lsrs	r2, r1, #8
    7e52:	f240 2171 	movw	r1, #625	; 0x271
    7e56:	434a      	muls	r2, r1
    7e58:	f8d4 1005 	ldr.w	r1, [r4, #5]
    7e5c:	0a09      	lsrs	r1, r1, #8
    7e5e:	4359      	muls	r1, r3
    7e60:	4290      	cmp	r0, r2
    7e62:	d801      	bhi.n	7e68 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    7e64:	9204      	str	r2, [sp, #16]
    7e66:	e004      	b.n	7e72 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    7e68:	4288      	cmp	r0, r1
    7e6a:	d801      	bhi.n	7e70 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    7e6c:	9004      	str	r0, [sp, #16]
    7e6e:	e000      	b.n	7e72 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    7e70:	9104      	str	r1, [sp, #16]
    7e72:	7ca0      	ldrb	r0, [r4, #18]
    7e74:	f88d 0017 	strb.w	r0, [sp, #23]
    7e78:	7e20      	ldrb	r0, [r4, #24]
    7e7a:	2801      	cmp	r0, #1
    7e7c:	d000      	beq.n	7e80 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    7e7e:	2000      	movs	r0, #0
    7e80:	f88d 0014 	strb.w	r0, [sp, #20]
    7e84:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    7e86:	f006 fef8 	bl	ec7a <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    7e8a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    7e8c:	f006 ff99 	bl	edc2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    7e90:	2220      	movs	r2, #32
    7e92:	a902      	add	r1, sp, #8
    7e94:	4628      	mov	r0, r5
    7e96:	f005 fdfd 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7e9a:	980a      	ldr	r0, [sp, #40]	; 0x28
    7e9c:	6228      	str	r0, [r5, #32]
    7e9e:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    7ea2:	84a8      	strh	r0, [r5, #36]	; 0x24
    7ea4:	7ae0      	ldrb	r0, [r4, #11]
    7ea6:	b168      	cbz	r0, 7ec4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7ea8:	2802      	cmp	r0, #2
    7eaa:	d00b      	beq.n	7ec4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7eac:	f05f 0001 	movs.w	r0, #1
    7eb0:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    7eb4:	68e0      	ldr	r0, [r4, #12]
    7eb6:	6528      	str	r0, [r5, #80]	; 0x50
    7eb8:	8a20      	ldrh	r0, [r4, #16]
    7eba:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    7ebe:	b00d      	add	sp, #52	; 0x34
    7ec0:	2000      	movs	r0, #0
    7ec2:	bd30      	pop	{r4, r5, pc}
    7ec4:	2000      	movs	r0, #0
    7ec6:	e7f3      	b.n	7eb0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00007ec8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    7ec8:	4a0a      	ldr	r2, [pc, #40]	; (7ef4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    7eca:	b510      	push	{r4, lr}
    7ecc:	2100      	movs	r1, #0
    7ece:	7011      	strb	r1, [r2, #0]
    7ed0:	4c09      	ldr	r4, [pc, #36]	; (7ef8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    7ed2:	6060      	str	r0, [r4, #4]
    7ed4:	f000 f822 	bl	7f1c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    7ed8:	b110      	cbz	r0, 7ee0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    7eda:	f240 310a 	movw	r1, #778	; 0x30a
    7ede:	e004      	b.n	7eea <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    7ee0:	68a0      	ldr	r0, [r4, #8]
    7ee2:	2800      	cmp	r0, #0
    7ee4:	d104      	bne.n	7ef0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    7ee6:	f240 310d 	movw	r1, #781	; 0x30d
    7eea:	202d      	movs	r0, #45	; 0x2d
    7eec:	f7fd fb70 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ef0:	bd10      	pop	{r4, pc}
    7ef2:	0000      	.short	0x0000
    7ef4:	20001370 	.word	0x20001370
    7ef8:	2000013c 	.word	0x2000013c

00007efc <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    7efc:	4902      	ldr	r1, [pc, #8]	; (7f08 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    7efe:	4801      	ldr	r0, [pc, #4]	; (7f04 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    7f00:	6088      	str	r0, [r1, #8]
    7f02:	4770      	bx	lr
    7f04:	00008a00 	.word	0x00008a00
    7f08:	2000013c 	.word	0x2000013c

00007f0c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    7f0c:	4902      	ldr	r1, [pc, #8]	; (7f18 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    7f0e:	6008      	str	r0, [r1, #0]
    7f10:	6889      	ldr	r1, [r1, #8]
    7f12:	6809      	ldr	r1, [r1, #0]
    7f14:	4708      	bx	r1
    7f16:	0000      	.short	0x0000
    7f18:	2000013c 	.word	0x2000013c

00007f1c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    7f1c:	4808      	ldr	r0, [pc, #32]	; (7f40 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    7f1e:	b510      	push	{r4, lr}
    7f20:	7800      	ldrb	r0, [r0, #0]
    7f22:	b110      	cbz	r0, 7f2a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    7f24:	240c      	movs	r4, #12
    7f26:	4620      	mov	r0, r4
    7f28:	bd10      	pop	{r4, pc}
    7f2a:	2400      	movs	r4, #0
    7f2c:	2218      	movs	r2, #24
    7f2e:	4621      	mov	r1, r4
    7f30:	4803      	ldr	r0, [pc, #12]	; (7f40 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    7f32:	f005 fe29 	bl	db88 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7f36:	f004 f8bd 	bl	c0b4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7f3a:	f003 fee1 	bl	bd00 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7f3e:	e7f2      	b.n	7f26 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    7f40:	20001370 	.word	0x20001370

00007f44 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    7f44:	4904      	ldr	r1, [pc, #16]	; (7f58 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    7f46:	b510      	push	{r4, lr}
    7f48:	7809      	ldrb	r1, [r1, #0]
    7f4a:	2901      	cmp	r1, #1
    7f4c:	d101      	bne.n	7f52 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    7f4e:	f000 fb7b 	bl	8648 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7f52:	2000      	movs	r0, #0
    7f54:	bd10      	pop	{r4, pc}
    7f56:	0000      	.short	0x0000
    7f58:	20001370 	.word	0x20001370

00007f5c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    7f5c:	4902      	ldr	r1, [pc, #8]	; (7f68 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    7f5e:	4801      	ldr	r0, [pc, #4]	; (7f64 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    7f60:	6008      	str	r0, [r1, #0]
    7f62:	4770      	bx	lr
    7f64:	00008785 	.word	0x00008785
    7f68:	20000148 	.word	0x20000148
    7f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f70:	000f      	movs	r7, r1
    7f72:	4604      	mov	r4, r0
    7f74:	d023      	beq.n	7fbe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    7f76:	f104 0020 	add.w	r0, r4, #32
    7f7a:	4605      	mov	r5, r0
    7f7c:	f008 f857 	bl	1002e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7f80:	b9b0      	cbnz	r0, 7fb0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    7f82:	78a0      	ldrb	r0, [r4, #2]
    7f84:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7f88:	b350      	cbz	r0, 7fe0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    7f8a:	4628      	mov	r0, r5
    7f8c:	f008 f826 	bl	ffdc <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7f90:	4606      	mov	r6, r0
    7f92:	4628      	mov	r0, r5
    7f94:	f008 f84b 	bl	1002e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7f98:	1a30      	subs	r0, r6, r0
    7f9a:	b2c0      	uxtb	r0, r0
    7f9c:	f008 f89c 	bl	100d8 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7fa0:	4601      	mov	r1, r0
    7fa2:	4835      	ldr	r0, [pc, #212]	; (8078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>)
    7fa4:	6842      	ldr	r2, [r0, #4]
    7fa6:	4411      	add	r1, r2
    7fa8:	6041      	str	r1, [r0, #4]
    7faa:	4628      	mov	r0, r5
    7fac:	f008 f85d 	bl	1006a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7fb0:	4628      	mov	r0, r5
    7fb2:	f008 f81f 	bl	fff4 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7fb6:	4601      	mov	r1, r0
    7fb8:	4620      	mov	r0, r4
    7fba:	f007 ffd3 	bl	ff64 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb4>
    7fbe:	4d2f      	ldr	r5, [pc, #188]	; (807c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c>)
    7fc0:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    7fc4:	2100      	movs	r1, #0
    7fc6:	6868      	ldr	r0, [r5, #4]
    7fc8:	8001      	strh	r1, [r0, #0]
    7fca:	f007 ffec 	bl	ffa6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    7fce:	8860      	ldrh	r0, [r4, #2]
    7fd0:	2813      	cmp	r0, #19
    7fd2:	d013      	beq.n	7ffc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    7fd4:	dc09      	bgt.n	7fea <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    7fd6:	2810      	cmp	r0, #16
    7fd8:	d036      	beq.n	8048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>
    7fda:	2812      	cmp	r0, #18
    7fdc:	d109      	bne.n	7ff2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    7fde:	e031      	b.n	8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
    7fe0:	4620      	mov	r0, r4
    7fe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7fe6:	f000 bb2f 	b.w	8648 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7fea:	2815      	cmp	r0, #21
    7fec:	d00f      	beq.n	800e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe>
    7fee:	281d      	cmp	r0, #29
    7ff0:	d00d      	beq.n	800e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe>
    7ff2:	f240 614a 	movw	r1, #1610	; 0x64a
    7ff6:	202d      	movs	r0, #45	; 0x2d
    7ff8:	f7fd faea 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ffc:	2100      	movs	r1, #0
    7ffe:	6868      	ldr	r0, [r5, #4]
    8000:	f007 fb6e 	bl	f6e0 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    8004:	2101      	movs	r1, #1
    8006:	6868      	ldr	r0, [r5, #4]
    8008:	f007 ffcd 	bl	ffa6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    800c:	e020      	b.n	8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
    800e:	2101      	movs	r1, #1
    8010:	6868      	ldr	r0, [r5, #4]
    8012:	f007 fb65 	bl	f6e0 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    8016:	2101      	movs	r1, #1
    8018:	6868      	ldr	r0, [r5, #4]
    801a:	f007 ffc4 	bl	ffa6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    801e:	b136      	cbz	r6, 802e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
    8020:	f104 0157 	add.w	r1, r4, #87	; 0x57
    8024:	6868      	ldr	r0, [r5, #4]
    8026:	f007 fb76 	bl	f716 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    802a:	2101      	movs	r1, #1
    802c:	e006      	b.n	803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>
    802e:	f104 0150 	add.w	r1, r4, #80	; 0x50
    8032:	6868      	ldr	r0, [r5, #4]
    8034:	f007 fb6f 	bl	f716 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    8038:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    803c:	6868      	ldr	r0, [r5, #4]
    803e:	f007 fb70 	bl	f722 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    8042:	e005      	b.n	8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
    8044:	2106      	movs	r1, #6
    8046:	e000      	b.n	804a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a>
    8048:	2102      	movs	r1, #2
    804a:	6868      	ldr	r0, [r5, #4]
    804c:	f007 fb48 	bl	f6e0 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    8050:	4620      	mov	r0, r4
    8052:	f000 fcb1 	bl	89b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x74c>
    8056:	8860      	ldrh	r0, [r4, #2]
    8058:	281d      	cmp	r0, #29
    805a:	d007      	beq.n	806c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>
    805c:	2815      	cmp	r0, #21
    805e:	d005      	beq.n	806c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>
    8060:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    8064:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8066:	6868      	ldr	r0, [r5, #4]
    8068:	f007 fb2a 	bl	f6c0 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    806c:	4639      	mov	r1, r7
    806e:	4620      	mov	r0, r4
    8070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8074:	f000 b9e4 	b.w	8440 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    8078:	20001370 	.word	0x20001370
    807c:	2000013c 	.word	0x2000013c
    8080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8084:	4d2e      	ldr	r5, [pc, #184]	; (8140 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x140>)
    8086:	4607      	mov	r7, r0
    8088:	7828      	ldrb	r0, [r5, #0]
    808a:	2802      	cmp	r0, #2
    808c:	d005      	beq.n	809a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9a>
    808e:	7828      	ldrb	r0, [r5, #0]
    8090:	2803      	cmp	r0, #3
    8092:	d002      	beq.n	809a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9a>
    8094:	f640 41b9 	movw	r1, #3257	; 0xcb9
    8098:	e028      	b.n	80ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xec>
    809a:	4c2a      	ldr	r4, [pc, #168]	; (8144 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x144>)
    809c:	6820      	ldr	r0, [r4, #0]
    809e:	7b01      	ldrb	r1, [r0, #12]
    80a0:	b109      	cbz	r1, 80a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa6>
    80a2:	f007 ff6a 	bl	ff7a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xca>
    80a6:	f8d4 c004 	ldr.w	ip, [r4, #4]
    80aa:	f04f 0800 	mov.w	r8, #0
    80ae:	f89c 0000 	ldrb.w	r0, [ip]
    80b2:	f000 060f 	and.w	r6, r0, #15
    80b6:	b33f      	cbz	r7, 8108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    80b8:	6821      	ldr	r1, [r4, #0]
    80ba:	09c0      	lsrs	r0, r0, #7
    80bc:	f101 0349 	add.w	r3, r1, #73	; 0x49
    80c0:	f891 2048 	ldrb.w	r2, [r1, #72]	; 0x48
    80c4:	f10c 0109 	add.w	r1, ip, #9
    80c8:	f006 fed8 	bl	ee7c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    80cc:	b1e0      	cbz	r0, 8108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    80ce:	4641      	mov	r1, r8
    80d0:	6860      	ldr	r0, [r4, #4]
    80d2:	f007 fae5 	bl	f6a0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    80d6:	b1b8      	cbz	r0, 8108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    80d8:	782a      	ldrb	r2, [r5, #0]
    80da:	6820      	ldr	r0, [r4, #0]
    80dc:	4631      	mov	r1, r6
    80de:	2a02      	cmp	r2, #2
    80e0:	d007      	beq.n	80f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf2>
    80e2:	782a      	ldrb	r2, [r5, #0]
    80e4:	2a03      	cmp	r2, #3
    80e6:	d004      	beq.n	80f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf2>
    80e8:	f640 4192 	movw	r1, #3218	; 0xc92
    80ec:	202d      	movs	r0, #45	; 0x2d
    80ee:	f7fd fa6f 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80f2:	68a2      	ldr	r2, [r4, #8]
    80f4:	782b      	ldrb	r3, [r5, #0]
    80f6:	6952      	ldr	r2, [r2, #20]
    80f8:	f06f 0607 	mvn.w	r6, #7
    80fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    8100:	58d2      	ldr	r2, [r2, r3]
    8102:	4790      	blx	r2
    8104:	4606      	mov	r6, r0
    8106:	e000      	b.n	810a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10a>
    8108:	2601      	movs	r6, #1
    810a:	7ba8      	ldrb	r0, [r5, #14]
    810c:	b118      	cbz	r0, 8116 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x116>
    810e:	f003 ffd1 	bl	c0b4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8112:	f003 fdf5 	bl	bd00 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8116:	2e00      	cmp	r6, #0
    8118:	d00f      	beq.n	813a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13a>
    811a:	6820      	ldr	r0, [r4, #0]
    811c:	f007 fff2 	bl	10104 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    8120:	b130      	cbz	r0, 8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    8122:	f003 ffef 	bl	c104 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8126:	68a0      	ldr	r0, [r4, #8]
    8128:	6880      	ldr	r0, [r0, #8]
    812a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    812e:	4700      	bx	r0
    8130:	6820      	ldr	r0, [r4, #0]
    8132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8136:	f000 ba87 	b.w	8648 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    813a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    813e:	0000      	.short	0x0000
    8140:	20001370 	.word	0x20001370
    8144:	2000013c 	.word	0x2000013c
    8148:	b510      	push	{r4, lr}
    814a:	2903      	cmp	r1, #3
    814c:	d002      	beq.n	8154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    814e:	2905      	cmp	r1, #5
    8150:	d10a      	bne.n	8168 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x168>
    8152:	e002      	b.n	815a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15a>
    8154:	f000 fb7e 	bl	8854 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e8>
    8158:	e003      	b.n	8162 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x162>
    815a:	4904      	ldr	r1, [pc, #16]	; (816c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c>)
    815c:	6809      	ldr	r1, [r1, #0]
    815e:	b109      	cbz	r1, 8164 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x164>
    8160:	4788      	blx	r1
    8162:	b108      	cbz	r0, 8168 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x168>
    8164:	2000      	movs	r0, #0
    8166:	bd10      	pop	{r4, pc}
    8168:	2001      	movs	r0, #1
    816a:	bd10      	pop	{r4, pc}
    816c:	20000148 	.word	0x20000148
    8170:	4a09      	ldr	r2, [pc, #36]	; (8198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>)
    8172:	0003      	movs	r3, r0
    8174:	6810      	ldr	r0, [r2, #0]
    8176:	d001      	beq.n	817c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17c>
    8178:	f000 ba66 	b.w	8648 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    817c:	2900      	cmp	r1, #0
    817e:	d009      	beq.n	8194 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x194>
    8180:	6891      	ldr	r1, [r2, #8]
    8182:	4a06      	ldr	r2, [pc, #24]	; (819c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19c>)
    8184:	6909      	ldr	r1, [r1, #16]
    8186:	7812      	ldrb	r2, [r2, #0]
    8188:	f06f 030f 	mvn.w	r3, #15
    818c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    8190:	5889      	ldr	r1, [r1, r2]
    8192:	4708      	bx	r1
    8194:	4770      	bx	lr
    8196:	0000      	.short	0x0000
    8198:	2000013c 	.word	0x2000013c
    819c:	20001370 	.word	0x20001370
    81a0:	b570      	push	{r4, r5, r6, lr}
    81a2:	4604      	mov	r4, r0
    81a4:	8840      	ldrh	r0, [r0, #2]
    81a6:	2810      	cmp	r0, #16
    81a8:	d019      	beq.n	81de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1de>
    81aa:	4d10      	ldr	r5, [pc, #64]	; (81ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ec>)
    81ac:	7ba8      	ldrb	r0, [r5, #14]
    81ae:	b120      	cbz	r0, 81ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ba>
    81b0:	f003 fdc6 	bl	bd40 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    81b4:	2040      	movs	r0, #64	; 0x40
    81b6:	f003 ff8b 	bl	c0d0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    81ba:	480d      	ldr	r0, [pc, #52]	; (81f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f0>)
    81bc:	6840      	ldr	r0, [r0, #4]
    81be:	f004 fa0d 	bl	c5dc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    81c2:	78a0      	ldrb	r0, [r4, #2]
    81c4:	0740      	lsls	r0, r0, #29
    81c6:	d404      	bmi.n	81d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d2>
    81c8:	2100      	movs	r1, #0
    81ca:	7922      	ldrb	r2, [r4, #4]
    81cc:	4608      	mov	r0, r1
    81ce:	f004 fa7d 	bl	c6cc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    81d2:	2000      	movs	r0, #0
    81d4:	f004 f8b8 	bl	c348 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    81d8:	2002      	movs	r0, #2
    81da:	7028      	strb	r0, [r5, #0]
    81dc:	bd70      	pop	{r4, r5, r6, pc}
    81de:	4620      	mov	r0, r4
    81e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    81e4:	2101      	movs	r1, #1
    81e6:	f7ff bec1 	b.w	7f6c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    81ea:	0000      	.short	0x0000
    81ec:	20001370 	.word	0x20001370
    81f0:	2000013c 	.word	0x2000013c
    81f4:	b510      	push	{r4, lr}
    81f6:	4c12      	ldr	r4, [pc, #72]	; (8240 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x240>)
    81f8:	6820      	ldr	r0, [r4, #0]
    81fa:	f000 f825 	bl	8248 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x248>
    81fe:	6820      	ldr	r0, [r4, #0]
    8200:	f007 ff80 	bl	10104 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    8204:	2800      	cmp	r0, #0
    8206:	6820      	ldr	r0, [r4, #0]
    8208:	d00b      	beq.n	8222 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x222>
    820a:	490e      	ldr	r1, [pc, #56]	; (8244 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x244>)
    820c:	780a      	ldrb	r2, [r1, #0]
    820e:	2a02      	cmp	r2, #2
    8210:	d00b      	beq.n	822a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22a>
    8212:	780a      	ldrb	r2, [r1, #0]
    8214:	2a03      	cmp	r2, #3
    8216:	d008      	beq.n	822a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22a>
    8218:	f640 31c6 	movw	r1, #3014	; 0xbc6
    821c:	202d      	movs	r0, #45	; 0x2d
    821e:	f7fd f9d7 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8226:	f000 ba0f 	b.w	8648 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    822a:	68a2      	ldr	r2, [r4, #8]
    822c:	7809      	ldrb	r1, [r1, #0]
    822e:	68d2      	ldr	r2, [r2, #12]
    8230:	f06f 0307 	mvn.w	r3, #7
    8234:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    8238:	5851      	ldr	r1, [r2, r1]
    823a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    823e:	4708      	bx	r1
    8240:	2000013c 	.word	0x2000013c
    8244:	20001370 	.word	0x20001370
    8248:	b510      	push	{r4, lr}
    824a:	7b01      	ldrb	r1, [r0, #12]
    824c:	b109      	cbz	r1, 8252 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x252>
    824e:	f007 fe94 	bl	ff7a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xca>
    8252:	4805      	ldr	r0, [pc, #20]	; (8268 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x268>)
    8254:	7b80      	ldrb	r0, [r0, #14]
    8256:	2800      	cmp	r0, #0
    8258:	d005      	beq.n	8266 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x266>
    825a:	f003 ff2b 	bl	c0b4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    825e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8262:	f003 bd4d 	b.w	bd00 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8266:	bd10      	pop	{r4, pc}
    8268:	20001370 	.word	0x20001370

0000826c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    826c:	b5f0      	push	{r4, r5, r6, r7, lr}
    826e:	4d59      	ldr	r5, [pc, #356]	; (83d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>)
    8270:	4604      	mov	r4, r0
    8272:	b08b      	sub	sp, #44	; 0x2c
    8274:	7828      	ldrb	r0, [r5, #0]
    8276:	bbe8      	cbnz	r0, 82f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x88>
    8278:	7820      	ldrb	r0, [r4, #0]
    827a:	28ff      	cmp	r0, #255	; 0xff
    827c:	d03d      	beq.n	82fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    827e:	2000      	movs	r0, #0
    8280:	81a8      	strh	r0, [r5, #12]
    8282:	6068      	str	r0, [r5, #4]
    8284:	7068      	strb	r0, [r5, #1]
    8286:	70a8      	strb	r0, [r5, #2]
    8288:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
    828c:	4b52      	ldr	r3, [pc, #328]	; (83d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    828e:	af06      	add	r7, sp, #24
    8290:	4e52      	ldr	r6, [pc, #328]	; (83dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>)
    8292:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    8294:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    8298:	68b0      	ldr	r0, [r6, #8]
    829a:	6840      	ldr	r0, [r0, #4]
    829c:	9009      	str	r0, [sp, #36]	; 0x24
    829e:	a806      	add	r0, sp, #24
    82a0:	f004 f826 	bl	c2f0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    82a4:	f004 f8f4 	bl	c490 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    82a8:	f004 fb68 	bl	c97c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    82ac:	f003 ff02 	bl	c0b4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    82b0:	f003 fd26 	bl	bd00 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    82b4:	484a      	ldr	r0, [pc, #296]	; (83e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    82b6:	f004 fa3b 	bl	c730 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    82ba:	4847      	ldr	r0, [pc, #284]	; (83d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    82bc:	1f00      	subs	r0, r0, #4
    82be:	f004 fa41 	bl	c744 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    82c2:	f104 0020 	add.w	r0, r4, #32
    82c6:	4607      	mov	r7, r0
    82c8:	f007 fecf 	bl	1006a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    82cc:	4638      	mov	r0, r7
    82ce:	f007 fe91 	bl	fff4 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    82d2:	4601      	mov	r1, r0
    82d4:	4620      	mov	r0, r4
    82d6:	f007 fe45 	bl	ff64 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb4>
    82da:	f994 000e 	ldrsb.w	r0, [r4, #14]
    82de:	f004 f95b 	bl	c598 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    82e2:	7921      	ldrb	r1, [r4, #4]
    82e4:	2000      	movs	r0, #0
    82e6:	f003 ff97 	bl	c218 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    82ea:	2101      	movs	r1, #1
    82ec:	60a8      	str	r0, [r5, #8]
    82ee:	b138      	cbz	r0, 8300 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x94>
    82f0:	7ea0      	ldrb	r0, [r4, #26]
    82f2:	e000      	b.n	82f6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    82f4:	e001      	b.n	82fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    82f6:	b950      	cbnz	r0, 830e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa2>
    82f8:	e004      	b.n	8304 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x98>
    82fa:	200c      	movs	r0, #12
    82fc:	b00b      	add	sp, #44	; 0x2c
    82fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8300:	7029      	strb	r1, [r5, #0]
    8302:	e064      	b.n	83ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    8304:	7e20      	ldrb	r0, [r4, #24]
    8306:	b910      	cbnz	r0, 830e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa2>
    8308:	78a0      	ldrb	r0, [r4, #2]
    830a:	0740      	lsls	r0, r0, #29
    830c:	d522      	bpl.n	8354 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    830e:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
    8312:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    8316:	4050      	eors	r0, r2
    8318:	ea70 0101 	orns	r1, r0, r1
    831c:	d01a      	beq.n	8354 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    831e:	f7fb fd7f 	bl	3e20 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    8322:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    8326:	1a80      	subs	r0, r0, r2
    8328:	4199      	sbcs	r1, r3
    832a:	d313      	bcc.n	8354 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    832c:	f7fe fec4 	bl	70b8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    8330:	492c      	ldr	r1, [pc, #176]	; (83e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
    8332:	fba0 2301 	umull	r2, r3, r0, r1
    8336:	f104 0040 	add.w	r0, r4, #64	; 0x40
    833a:	f007 fe29 	bl	ff90 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe0>
    833e:	2101      	movs	r1, #1
    8340:	4620      	mov	r0, r4
    8342:	f007 fdd3 	bl	feec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    8346:	78a0      	ldrb	r0, [r4, #2]
    8348:	0740      	lsls	r0, r0, #29
    834a:	d503      	bpl.n	8354 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    834c:	2101      	movs	r1, #1
    834e:	4620      	mov	r0, r4
    8350:	f000 fabc 	bl	88cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x660>
    8354:	f104 0130 	add.w	r1, r4, #48	; 0x30
    8358:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    835a:	f006 fd01 	bl	ed60 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    835e:	f104 0138 	add.w	r1, r4, #56	; 0x38
    8362:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8364:	f006 fcff 	bl	ed66 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    8368:	f7fe ff0c 	bl	7184 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    836c:	6870      	ldr	r0, [r6, #4]
    836e:	1cc0      	adds	r0, r0, #3
    8370:	f006 fe0f 	bl	ef92 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    8374:	73a8      	strb	r0, [r5, #14]
    8376:	78a0      	ldrb	r0, [r4, #2]
    8378:	07c0      	lsls	r0, r0, #31
    837a:	d028      	beq.n	83ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    837c:	a903      	add	r1, sp, #12
    837e:	2000      	movs	r0, #0
    8380:	f006 fbc4 	bl	eb0c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8384:	b120      	cbz	r0, 8390 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x124>
    8386:	f640 118c 	movw	r1, #2444	; 0x98c
    838a:	202d      	movs	r0, #45	; 0x2d
    838c:	f7fd f920 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8390:	20ff      	movs	r0, #255	; 0xff
    8392:	73e8      	strb	r0, [r5, #15]
    8394:	69e6      	ldr	r6, [r4, #28]
    8396:	f106 070a 	add.w	r7, r6, #10
    839a:	e013      	b.n	83c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    839c:	9c05      	ldr	r4, [sp, #20]
    839e:	42b4      	cmp	r4, r6
    83a0:	d010      	beq.n	83c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    83a2:	7a72      	ldrb	r2, [r6, #9]
    83a4:	7a60      	ldrb	r0, [r4, #9]
    83a6:	463b      	mov	r3, r7
    83a8:	f104 010a 	add.w	r1, r4, #10
    83ac:	f006 fd66 	bl	ee7c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    83b0:	b140      	cbz	r0, 83c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    83b2:	78a0      	ldrb	r0, [r4, #2]
    83b4:	73e8      	strb	r0, [r5, #15]
    83b6:	f8d4 0003 	ldr.w	r0, [r4, #3]
    83ba:	6128      	str	r0, [r5, #16]
    83bc:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    83c0:	82a8      	strh	r0, [r5, #20]
    83c2:	e004      	b.n	83ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    83c4:	a803      	add	r0, sp, #12
    83c6:	f7fd fb47 	bl	5a58 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    83ca:	2800      	cmp	r0, #0
    83cc:	d0e6      	beq.n	839c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x130>
    83ce:	2000      	movs	r0, #0
    83d0:	e794      	b.n	82fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x90>
    83d2:	0000      	.short	0x0000
    83d4:	20001370 	.word	0x20001370
    83d8:	000089e0 	.word	0x000089e0
    83dc:	2000013c 	.word	0x2000013c
    83e0:	8e89bed6 	.word	0x8e89bed6
    83e4:	000f4240 	.word	0x000f4240
    83e8:	b510      	push	{r4, lr}
    83ea:	4604      	mov	r4, r0
    83ec:	f7ff ff3e 	bl	826c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    83f0:	2800      	cmp	r0, #0
    83f2:	d108      	bne.n	8406 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19a>
    83f4:	4804      	ldr	r0, [pc, #16]	; (8408 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>)
    83f6:	7800      	ldrb	r0, [r0, #0]
    83f8:	2801      	cmp	r0, #1
    83fa:	d003      	beq.n	8404 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x198>
    83fc:	2100      	movs	r1, #0
    83fe:	4620      	mov	r0, r4
    8400:	f7ff fdb4 	bl	7f6c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    8404:	2000      	movs	r0, #0
    8406:	bd10      	pop	{r4, pc}
    8408:	20001370 	.word	0x20001370
    840c:	480a      	ldr	r0, [pc, #40]	; (8438 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1cc>)
    840e:	b510      	push	{r4, lr}
    8410:	490a      	ldr	r1, [pc, #40]	; (843c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    8412:	6804      	ldr	r4, [r0, #0]
    8414:	7808      	ldrb	r0, [r1, #0]
    8416:	2800      	cmp	r0, #0
    8418:	d00d      	beq.n	8436 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ca>
    841a:	7808      	ldrb	r0, [r1, #0]
    841c:	2802      	cmp	r0, #2
    841e:	d002      	beq.n	8426 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ba>
    8420:	7808      	ldrb	r0, [r1, #0]
    8422:	2803      	cmp	r0, #3
    8424:	d102      	bne.n	842c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c0>
    8426:	4620      	mov	r0, r4
    8428:	f7ff ff0e 	bl	8248 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x248>
    842c:	4620      	mov	r0, r4
    842e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8432:	f000 b909 	b.w	8648 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    8436:	bd10      	pop	{r4, pc}
    8438:	2000013c 	.word	0x2000013c
    843c:	20001370 	.word	0x20001370
    8440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8444:	4604      	mov	r4, r0
    8446:	4827      	ldr	r0, [pc, #156]	; (84e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>)
    8448:	460d      	mov	r5, r1
    844a:	6840      	ldr	r0, [r0, #4]
    844c:	f004 f8c6 	bl	c5dc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    8450:	4e25      	ldr	r6, [pc, #148]	; (84e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    8452:	2004      	movs	r0, #4
    8454:	7030      	strb	r0, [r6, #0]
    8456:	b325      	cbz	r5, 84a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    8458:	8860      	ldrh	r0, [r4, #2]
    845a:	2810      	cmp	r0, #16
    845c:	d02a      	beq.n	84b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x248>
    845e:	f104 0020 	add.w	r0, r4, #32
    8462:	4680      	mov	r8, r0
    8464:	68b5      	ldr	r5, [r6, #8]
    8466:	f007 fdb9 	bl	ffdc <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    846a:	4607      	mov	r7, r0
    846c:	4640      	mov	r0, r8
    846e:	f007 fdde 	bl	1002e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    8472:	1a38      	subs	r0, r7, r0
    8474:	1e40      	subs	r0, r0, #1
    8476:	b2c0      	uxtb	r0, r0
    8478:	8861      	ldrh	r1, [r4, #2]
    847a:	2228      	movs	r2, #40	; 0x28
    847c:	f000 faec 	bl	8a58 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    8480:	4405      	add	r5, r0
    8482:	78a0      	ldrb	r0, [r4, #2]
    8484:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    8488:	b130      	cbz	r0, 8498 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x22c>
    848a:	6870      	ldr	r0, [r6, #4]
    848c:	4405      	add	r5, r0
    848e:	f007 fe27 	bl	100e0 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    8492:	4428      	add	r0, r5
    8494:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
    8498:	7922      	ldrb	r2, [r4, #4]
    849a:	4629      	mov	r1, r5
    849c:	2000      	movs	r0, #0
    849e:	f004 f8b3 	bl	c608 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    84a2:	8860      	ldrh	r0, [r4, #2]
    84a4:	2813      	cmp	r0, #19
    84a6:	d013      	beq.n	84d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    84a8:	dc09      	bgt.n	84be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x252>
    84aa:	2810      	cmp	r0, #16
    84ac:	d017      	beq.n	84de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    84ae:	2812      	cmp	r0, #18
    84b0:	d109      	bne.n	84c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
    84b2:	e00d      	b.n	84d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    84b4:	7921      	ldrb	r1, [r4, #4]
    84b6:	2000      	movs	r0, #0
    84b8:	f003 fe74 	bl	c1a4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    84bc:	e7f1      	b.n	84a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    84be:	2815      	cmp	r0, #21
    84c0:	d006      	beq.n	84d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    84c2:	281d      	cmp	r0, #29
    84c4:	d004      	beq.n	84d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    84c6:	f640 5148 	movw	r1, #3400	; 0xd48
    84ca:	202d      	movs	r0, #45	; 0x2d
    84cc:	f7fd f880 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84d0:	7922      	ldrb	r2, [r4, #4]
    84d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    84d6:	2101      	movs	r1, #1
    84d8:	2000      	movs	r0, #0
    84da:	f004 b8f7 	b.w	c6cc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    84de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    84e2:	0000      	.short	0x0000
    84e4:	2000013c 	.word	0x2000013c
    84e8:	20001370 	.word	0x20001370
    84ec:	b510      	push	{r4, lr}
    84ee:	4604      	mov	r4, r0
    84f0:	7800      	ldrb	r0, [r0, #0]
    84f2:	460b      	mov	r3, r1
    84f4:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
    84f8:	29ff      	cmp	r1, #255	; 0xff
    84fa:	d010      	beq.n	851e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b2>
    84fc:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
    8500:	1e51      	subs	r1, r2, #1
    8502:	4618      	mov	r0, r3
    8504:	f7fe fd56 	bl	6fb4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    8508:	b130      	cbz	r0, 8518 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
    850a:	f894 00b6 	ldrb.w	r0, [r4, #182]	; 0xb6
    850e:	f040 0002 	orr.w	r0, r0, #2
    8512:	f884 00b6 	strb.w	r0, [r4, #182]	; 0xb6
    8516:	e011      	b.n	853c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d0>
    8518:	f640 7193 	movw	r1, #3987	; 0xf93
    851c:	e023      	b.n	8566 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fa>
    851e:	4813      	ldr	r0, [pc, #76]	; (856c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>)
    8520:	6840      	ldr	r0, [r0, #4]
    8522:	7801      	ldrb	r1, [r0, #0]
    8524:	f3c1 1180 	ubfx	r1, r1, #6, #1
    8528:	f884 10b6 	strb.w	r1, [r4, #182]	; 0xb6
    852c:	f8d0 1003 	ldr.w	r1, [r0, #3]
    8530:	f8c4 10b7 	str.w	r1, [r4, #183]	; 0xb7
    8534:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    8538:	f8a4 00bb 	strh.w	r0, [r4, #187]	; 0xbb
    853c:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    8540:	287f      	cmp	r0, #127	; 0x7f
    8542:	d00e      	beq.n	8562 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f6>
    8544:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    8548:	207f      	movs	r0, #127	; 0x7f
    854a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    854e:	2219      	movs	r2, #25
    8550:	4621      	mov	r1, r4
    8552:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    8556:	f7ff f941 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    855a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    855e:	f7ff ba0f 	b.w	7980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8562:	f640 51fb 	movw	r1, #3579	; 0xdfb
    8566:	202d      	movs	r0, #45	; 0x2d
    8568:	f7fd f832 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    856c:	2000013c 	.word	0x2000013c
    8570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8574:	4690      	mov	r8, r2
    8576:	460e      	mov	r6, r1
    8578:	4604      	mov	r4, r0
    857a:	2903      	cmp	r1, #3
    857c:	d004      	beq.n	8588 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31c>
    857e:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    8582:	b108      	cbz	r0, 8588 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31c>
    8584:	2001      	movs	r0, #1
    8586:	e000      	b.n	858a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31e>
    8588:	2000      	movs	r0, #0
    858a:	4681      	mov	r9, r0
    858c:	f003 fdac 	bl	c0e8 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    8590:	4605      	mov	r5, r0
    8592:	2e03      	cmp	r6, #3
    8594:	d003      	beq.n	859e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
    8596:	2701      	movs	r7, #1
    8598:	2e05      	cmp	r6, #5
    859a:	d005      	beq.n	85a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    859c:	e008      	b.n	85b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x344>
    859e:	78a0      	ldrb	r0, [r4, #2]
    85a0:	2702      	movs	r7, #2
    85a2:	f3c0 0040 	ubfx	r0, r0, #1, #1
    85a6:	e001      	b.n	85ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x340>
    85a8:	78a0      	ldrb	r0, [r4, #2]
    85aa:	07c0      	lsls	r0, r0, #31
    85ac:	2800      	cmp	r0, #0
    85ae:	d042      	beq.n	8636 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ca>
    85b0:	f1b9 0f00 	cmp.w	r9, #0
    85b4:	d13e      	bne.n	8634 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    85b6:	4822      	ldr	r0, [pc, #136]	; (8640 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>)
    85b8:	7b80      	ldrb	r0, [r0, #14]
    85ba:	b140      	cbz	r0, 85ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x362>
    85bc:	f006 fcec 	bl	ef98 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    85c0:	f888 0000 	strb.w	r0, [r8]
    85c4:	28ff      	cmp	r0, #255	; 0xff
    85c6:	d002      	beq.n	85ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x362>
    85c8:	f7fe fd0e 	bl	6fe8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    85cc:	4305      	orrs	r5, r0
    85ce:	4e1d      	ldr	r6, [pc, #116]	; (8644 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>)
    85d0:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    85d4:	f104 0350 	add.w	r3, r4, #80	; 0x50
    85d8:	6871      	ldr	r1, [r6, #4]
    85da:	f811 0b03 	ldrb.w	r0, [r1], #3
    85de:	f3c0 1080 	ubfx	r0, r0, #6, #1
    85e2:	f006 fc4b 	bl	ee7c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    85e6:	f898 1000 	ldrb.w	r1, [r8]
    85ea:	29ff      	cmp	r1, #255	; 0xff
    85ec:	d004      	beq.n	85f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38c>
    85ee:	b990      	cbnz	r0, 8616 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    85f0:	7e60      	ldrb	r0, [r4, #25]
    85f2:	4288      	cmp	r0, r1
    85f4:	d00f      	beq.n	8616 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    85f6:	e008      	b.n	860a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39e>
    85f8:	b138      	cbz	r0, 860a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39e>
    85fa:	6871      	ldr	r1, [r6, #4]
    85fc:	f811 0b03 	ldrb.w	r0, [r1], #3
    8600:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8604:	f007 fc59 	bl	feba <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    8608:	b128      	cbz	r0, 8616 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    860a:	2000      	movs	r0, #0
    860c:	78a1      	ldrb	r1, [r4, #2]
    860e:	0749      	lsls	r1, r1, #29
    8610:	d503      	bpl.n	861a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ae>
    8612:	b990      	cbnz	r0, 863a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ce>
    8614:	e00e      	b.n	8634 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    8616:	2001      	movs	r0, #1
    8618:	e7f8      	b.n	860c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    861a:	b975      	cbnz	r5, 863a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ce>
    861c:	7be0      	ldrb	r0, [r4, #15]
    861e:	b108      	cbz	r0, 8624 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b8>
    8620:	42b8      	cmp	r0, r7
    8622:	d107      	bne.n	8634 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    8624:	6871      	ldr	r1, [r6, #4]
    8626:	f811 0b03 	ldrb.w	r0, [r1], #3
    862a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    862e:	f007 fc44 	bl	feba <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    8632:	b110      	cbz	r0, 863a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ce>
    8634:	2000      	movs	r0, #0
    8636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    863a:	2001      	movs	r0, #1
    863c:	e7fb      	b.n	8636 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ca>
    863e:	0000      	.short	0x0000
    8640:	20001370 	.word	0x20001370
    8644:	2000013c 	.word	0x2000013c
    8648:	b570      	push	{r4, r5, r6, lr}
    864a:	4604      	mov	r4, r0
    864c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    864e:	4d13      	ldr	r5, [pc, #76]	; (869c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x430>)
    8650:	1c40      	adds	r0, r0, #1
    8652:	8520      	strh	r0, [r4, #40]	; 0x28
    8654:	7ba8      	ldrb	r0, [r5, #14]
    8656:	2600      	movs	r6, #0
    8658:	b120      	cbz	r0, 8664 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f8>
    865a:	f003 fd2b 	bl	c0b4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    865e:	f003 fb4f 	bl	bd00 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8662:	73ae      	strb	r6, [r5, #14]
    8664:	702e      	strb	r6, [r5, #0]
    8666:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    866a:	b108      	cbz	r0, 8670 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x404>
    866c:	2101      	movs	r1, #1
    866e:	e00f      	b.n	8690 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    8670:	7b60      	ldrb	r0, [r4, #13]
    8672:	b160      	cbz	r0, 868e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x422>
    8674:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    8676:	4288      	cmp	r0, r1
    8678:	d809      	bhi.n	868e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x422>
    867a:	2101      	movs	r1, #1
    867c:	4620      	mov	r0, r4
    867e:	f007 fd53 	bl	10128 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    8682:	78a0      	ldrb	r0, [r4, #2]
    8684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8688:	07c0      	lsls	r0, r0, #31
    868a:	f7ff b979 	b.w	7980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    868e:	2100      	movs	r1, #0
    8690:	4620      	mov	r0, r4
    8692:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8696:	f007 bd47 	b.w	10128 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    869a:	0000      	.short	0x0000
    869c:	20001370 	.word	0x20001370
    86a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    86a2:	4604      	mov	r4, r0
    86a4:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    86a8:	4616      	mov	r6, r2
    86aa:	460d      	mov	r5, r1
    86ac:	f88d 0000 	strb.w	r0, [sp]
    86b0:	9800      	ldr	r0, [sp, #0]
    86b2:	9000      	str	r0, [sp, #0]
    86b4:	f89d 0000 	ldrb.w	r0, [sp]
    86b8:	b110      	cbz	r0, 86c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    86ba:	f640 31fa 	movw	r1, #3066	; 0xbfa
    86be:	e055      	b.n	876c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x500>
    86c0:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
    86c4:	2700      	movs	r7, #0
    86c6:	8828      	ldrh	r0, [r5, #0]
    86c8:	f8a4 0070 	strh.w	r0, [r4, #112]	; 0x70
    86cc:	2b00      	cmp	r3, #0
    86ce:	d14a      	bne.n	8766 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fa>
    86d0:	6928      	ldr	r0, [r5, #16]
    86d2:	f006 fcbf 	bl	f054 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    86d6:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    86da:	8b28      	ldrh	r0, [r5, #24]
    86dc:	f8a4 0088 	strh.w	r0, [r4, #136]	; 0x88
    86e0:	8b68      	ldrh	r0, [r5, #26]
    86e2:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    86e6:	f895 01c7 	ldrb.w	r0, [r5, #455]	; 0x1c7
    86ea:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    86ee:	7e20      	ldrb	r0, [r4, #24]
    86f0:	f104 0149 	add.w	r1, r4, #73	; 0x49
    86f4:	460d      	mov	r5, r1
    86f6:	b120      	cbz	r0, 8702 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x496>
    86f8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    86fc:	f007 faa4 	bl	fc48 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe0>
    8700:	b940      	cbnz	r0, 8714 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a8>
    8702:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    8706:	b170      	cbz	r0, 8726 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ba>
    8708:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    870c:	4629      	mov	r1, r5
    870e:	f007 fa92 	bl	fc36 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xce>
    8712:	b140      	cbz	r0, 8726 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ba>
    8714:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    8718:	f8c4 007a 	str.w	r0, [r4, #122]	; 0x7a
    871c:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    8720:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    8724:	e003      	b.n	872e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c2>
    8726:	f8c4 707a 	str.w	r7, [r4, #122]	; 0x7a
    872a:	f8a4 707e 	strh.w	r7, [r4, #126]	; 0x7e
    872e:	4814      	ldr	r0, [pc, #80]	; (8780 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x514>)
    8730:	2eff      	cmp	r6, #255	; 0xff
    8732:	6840      	ldr	r0, [r0, #4]
    8734:	7801      	ldrb	r1, [r0, #0]
    8736:	f3c1 1180 	ubfx	r1, r1, #6, #1
    873a:	f884 1073 	strb.w	r1, [r4, #115]	; 0x73
    873e:	f850 1f03 	ldr.w	r1, [r0, #3]!
    8742:	d016      	beq.n	8772 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x506>
    8744:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    8748:	8880      	ldrh	r0, [r0, #4]
    874a:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    874e:	f104 0274 	add.w	r2, r4, #116	; 0x74
    8752:	1e51      	subs	r1, r2, #1
    8754:	4630      	mov	r0, r6
    8756:	f7fe fc2d 	bl	6fb4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    875a:	b128      	cbz	r0, 8768 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fc>
    875c:	f814 0f73 	ldrb.w	r0, [r4, #115]!
    8760:	f040 0002 	orr.w	r0, r0, #2
    8764:	7020      	strb	r0, [r4, #0]
    8766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8768:	f640 411b 	movw	r1, #3099	; 0xc1b
    876c:	202d      	movs	r0, #45	; 0x2d
    876e:	f7fc ff2f 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8772:	f844 1f74 	str.w	r1, [r4, #116]!
    8776:	8880      	ldrh	r0, [r0, #4]
    8778:	80a0      	strh	r0, [r4, #4]
    877a:	60e7      	str	r7, [r4, #12]
    877c:	8227      	strh	r7, [r4, #16]
    877e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8780:	2000013c 	.word	0x2000013c
    8784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8786:	4604      	mov	r4, r0
    8788:	20ff      	movs	r0, #255	; 0xff
    878a:	f88d 0000 	strb.w	r0, [sp]
    878e:	2601      	movs	r6, #1
    8790:	466a      	mov	r2, sp
    8792:	2105      	movs	r1, #5
    8794:	4620      	mov	r0, r4
    8796:	f7ff feeb 	bl	8570 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    879a:	b160      	cbz	r0, 87b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x54a>
    879c:	4d2c      	ldr	r5, [pc, #176]	; (8850 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>)
    879e:	4f2b      	ldr	r7, [pc, #172]	; (884c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
    87a0:	6869      	ldr	r1, [r5, #4]
    87a2:	7bfa      	ldrb	r2, [r7, #15]
    87a4:	f107 0310 	add.w	r3, r7, #16
    87a8:	f811 0b03 	ldrb.w	r0, [r1], #3
    87ac:	f3c0 1080 	ubfx	r0, r0, #6, #1
    87b0:	f006 fb64 	bl	ee7c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    87b4:	b110      	cbz	r0, 87bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x550>
    87b6:	2600      	movs	r6, #0
    87b8:	4630      	mov	r0, r6
    87ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    87bc:	686a      	ldr	r2, [r5, #4]
    87be:	69e0      	ldr	r0, [r4, #28]
    87c0:	7812      	ldrb	r2, [r2, #0]
    87c2:	f810 1f8e 	ldrb.w	r1, [r0, #142]!
    87c6:	f3c2 1240 	ubfx	r2, r2, #5, #1
    87ca:	4011      	ands	r1, r2
    87cc:	7001      	strb	r1, [r0, #0]
    87ce:	2201      	movs	r2, #1
    87d0:	4620      	mov	r0, r4
    87d2:	69e1      	ldr	r1, [r4, #28]
    87d4:	f000 f8a8 	bl	8928 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6bc>
    87d8:	2300      	movs	r3, #0
    87da:	f89d 2000 	ldrb.w	r2, [sp]
    87de:	4620      	mov	r0, r4
    87e0:	69e1      	ldr	r1, [r4, #28]
    87e2:	f7ff ff5d 	bl	86a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x434>
    87e6:	220e      	movs	r2, #14
    87e8:	4621      	mov	r1, r4
    87ea:	f104 0064 	add.w	r0, r4, #100	; 0x64
    87ee:	f7fe fff5 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    87f2:	69e0      	ldr	r0, [r4, #28]
    87f4:	2203      	movs	r2, #3
    87f6:	8801      	ldrh	r1, [r0, #0]
    87f8:	f8a4 10a8 	strh.w	r1, [r4, #168]	; 0xa8
    87fc:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
    8800:	f884 00aa 	strb.w	r0, [r4, #170]	; 0xaa
    8804:	4621      	mov	r1, r4
    8806:	f104 009e 	add.w	r0, r4, #158	; 0x9e
    880a:	f7fe ffe7 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    880e:	f7ff f8b7 	bl	7980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8812:	2000      	movs	r0, #0
    8814:	7038      	strb	r0, [r7, #0]
    8816:	2200      	movs	r2, #0
    8818:	4621      	mov	r1, r4
    881a:	69e0      	ldr	r0, [r4, #28]
    881c:	f000 fa74 	bl	8d08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    8820:	69e0      	ldr	r0, [r4, #28]
    8822:	8800      	ldrh	r0, [r0, #0]
    8824:	f7fd fafc 	bl	5e20 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8828:	f006 f842 	bl	e8b0 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    882c:	6868      	ldr	r0, [r5, #4]
    882e:	69e1      	ldr	r1, [r4, #28]
    8830:	f8d0 2003 	ldr.w	r2, [r0, #3]
    8834:	f841 2f03 	str.w	r2, [r1, #3]!
    8838:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    883c:	808a      	strh	r2, [r1, #4]
    883e:	7800      	ldrb	r0, [r0, #0]
    8840:	69e1      	ldr	r1, [r4, #28]
    8842:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8846:	7088      	strb	r0, [r1, #2]
    8848:	e7b6      	b.n	87b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x54c>
    884a:	0000      	.short	0x0000
    884c:	20001370 	.word	0x20001370
    8850:	2000013c 	.word	0x2000013c
    8854:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    8858:	4604      	mov	r4, r0
    885a:	20ff      	movs	r0, #255	; 0xff
    885c:	f88d 0000 	strb.w	r0, [sp]
    8860:	2501      	movs	r5, #1
    8862:	466a      	mov	r2, sp
    8864:	2103      	movs	r1, #3
    8866:	4620      	mov	r0, r4
    8868:	f7ff fe82 	bl	8570 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    886c:	b330      	cbz	r0, 88bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x650>
    886e:	7b20      	ldrb	r0, [r4, #12]
    8870:	2700      	movs	r7, #0
    8872:	b168      	cbz	r0, 8890 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x624>
    8874:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    8878:	f88d 0004 	strb.w	r0, [sp, #4]
    887c:	9801      	ldr	r0, [sp, #4]
    887e:	9001      	str	r0, [sp, #4]
    8880:	f89d 0004 	ldrb.w	r0, [sp, #4]
    8884:	b920      	cbnz	r0, 8890 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x624>
    8886:	f89d 1000 	ldrb.w	r1, [sp]
    888a:	4620      	mov	r0, r4
    888c:	f7ff fe2e 	bl	84ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    8890:	4e0c      	ldr	r6, [pc, #48]	; (88c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
    8892:	2104      	movs	r1, #4
    8894:	6870      	ldr	r0, [r6, #4]
    8896:	8007      	strh	r7, [r0, #0]
    8898:	f006 ff22 	bl	f6e0 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    889c:	4620      	mov	r0, r4
    889e:	f000 f88b 	bl	89b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x74c>
    88a2:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    88a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    88a8:	6870      	ldr	r0, [r6, #4]
    88aa:	f006 ff50 	bl	f74e <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    88ae:	4906      	ldr	r1, [pc, #24]	; (88c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>)
    88b0:	2005      	movs	r0, #5
    88b2:	7008      	strb	r0, [r1, #0]
    88b4:	6870      	ldr	r0, [r6, #4]
    88b6:	f003 fe91 	bl	c5dc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    88ba:	e000      	b.n	88be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x652>
    88bc:	2500      	movs	r5, #0
    88be:	4628      	mov	r0, r5
    88c0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    88c4:	2000013c 	.word	0x2000013c
    88c8:	20001370 	.word	0x20001370
    88cc:	b570      	push	{r4, r5, r6, lr}
    88ce:	4604      	mov	r4, r0
    88d0:	460e      	mov	r6, r1
    88d2:	7e40      	ldrb	r0, [r0, #25]
    88d4:	f7fe fb3c 	bl	6f50 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    88d8:	0005      	movs	r5, r0
    88da:	d019      	beq.n	8910 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>
    88dc:	2110      	movs	r1, #16
    88de:	f006 fd57 	bl	f390 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    88e2:	2800      	cmp	r0, #0
    88e4:	d114      	bne.n	8910 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>
    88e6:	2001      	movs	r0, #1
    88e8:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    88ec:	f104 0157 	add.w	r1, r4, #87	; 0x57
    88f0:	4632      	mov	r2, r6
    88f2:	460c      	mov	r4, r1
    88f4:	4628      	mov	r0, r5
    88f6:	f006 faf1 	bl	eedc <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    88fa:	4621      	mov	r1, r4
    88fc:	4c05      	ldr	r4, [pc, #20]	; (8914 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a8>)
    88fe:	6860      	ldr	r0, [r4, #4]
    8900:	f006 ff09 	bl	f716 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    8904:	6860      	ldr	r0, [r4, #4]
    8906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    890a:	2101      	movs	r1, #1
    890c:	f006 bf09 	b.w	f722 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    8910:	bd70      	pop	{r4, r5, r6, pc}
    8912:	0000      	.short	0x0000
    8914:	2000013c 	.word	0x2000013c
    8918:	4802      	ldr	r0, [pc, #8]	; (8924 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b8>)
    891a:	2101      	movs	r1, #1
    891c:	6800      	ldr	r0, [r0, #0]
    891e:	f7ff bb25 	b.w	7f6c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    8922:	0000      	.short	0x0000
    8924:	2000013c 	.word	0x2000013c
    8928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    892c:	4e21      	ldr	r6, [pc, #132]	; (89b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x748>)
    892e:	4680      	mov	r8, r0
    8930:	460c      	mov	r4, r1
    8932:	6870      	ldr	r0, [r6, #4]
    8934:	4615      	mov	r5, r2
    8936:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    893a:	6161      	str	r1, [r4, #20]
    893c:	8881      	ldrh	r1, [r0, #4]
    893e:	83a1      	strh	r1, [r4, #28]
    8940:	7981      	ldrb	r1, [r0, #6]
    8942:	77a1      	strb	r1, [r4, #30]
    8944:	8940      	ldrh	r0, [r0, #10]
    8946:	f006 fb81 	bl	f04c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    894a:	4607      	mov	r7, r0
    894c:	6120      	str	r0, [r4, #16]
    894e:	6870      	ldr	r0, [r6, #4]
    8950:	4639      	mov	r1, r7
    8952:	7d80      	ldrb	r0, [r0, #22]
    8954:	f006 fd13 	bl	f37e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8958:	8420      	strh	r0, [r4, #32]
    895a:	6870      	ldr	r0, [r6, #4]
    895c:	4639      	mov	r1, r7
    895e:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    8962:	f006 fd08 	bl	f376 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    8966:	6260      	str	r0, [r4, #36]	; 0x24
    8968:	6870      	ldr	r0, [r6, #4]
    896a:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    896e:	8321      	strh	r1, [r4, #24]
    8970:	8841      	ldrh	r1, [r0, #2]
    8972:	8361      	strh	r1, [r4, #26]
    8974:	6841      	ldr	r1, [r0, #4]
    8976:	f8c4 108f 	str.w	r1, [r4, #143]	; 0x8f
    897a:	7a01      	ldrb	r1, [r0, #8]
    897c:	f884 1093 	strb.w	r1, [r4, #147]	; 0x93
    8980:	7a41      	ldrb	r1, [r0, #9]
    8982:	f001 011f 	and.w	r1, r1, #31
    8986:	f884 109a 	strb.w	r1, [r4, #154]	; 0x9a
    898a:	7a40      	ldrb	r0, [r0, #9]
    898c:	0940      	lsrs	r0, r0, #5
    898e:	f884 01c7 	strb.w	r0, [r4, #455]	; 0x1c7
    8992:	f104 0066 	add.w	r0, r4, #102	; 0x66
    8996:	7205      	strb	r5, [r0, #8]
    8998:	7245      	strb	r5, [r0, #9]
    899a:	21ff      	movs	r1, #255	; 0xff
    899c:	7281      	strb	r1, [r0, #10]
    899e:	2100      	movs	r1, #0
    89a0:	3836      	subs	r0, #54	; 0x36
    89a2:	f007 f8b6 	bl	fb12 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    89a6:	f898 000e 	ldrb.w	r0, [r8, #14]
    89aa:	f884 0072 	strb.w	r0, [r4, #114]	; 0x72
    89ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    89b2:	0000      	.short	0x0000
    89b4:	2000013c 	.word	0x2000013c
    89b8:	b570      	push	{r4, r5, r6, lr}
    89ba:	4d07      	ldr	r5, [pc, #28]	; (89d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x76c>)
    89bc:	4604      	mov	r4, r0
    89be:	f100 0149 	add.w	r1, r0, #73	; 0x49
    89c2:	6868      	ldr	r0, [r5, #4]
    89c4:	f006 feb4 	bl	f730 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    89c8:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    89cc:	6868      	ldr	r0, [r5, #4]
    89ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    89d2:	f006 beb3 	b.w	f73c <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    89d6:	0000      	.short	0x0000
    89d8:	2000013c 	.word	0x2000013c
    89dc:	00555555 	.word	0x00555555
    89e0:	000081f5 	.word	0x000081f5
    89e4:	00008081 	.word	0x00008081
    89e8:	00008171 	.word	0x00008171
    89ec:	00000000 	.word	0x00000000
    89f0:	00008149 	.word	0x00008149
    89f4:	000081a1 	.word	0x000081a1
    89f8:	0000fee1 	.word	0x0000fee1
    89fc:	0000fee7 	.word	0x0000fee7
    8a00:	000083e9 	.word	0x000083e9
    8a04:	0000840d 	.word	0x0000840d
    8a08:	00008919 	.word	0x00008919
    8a0c:	000089fc 	.word	0x000089fc
    8a10:	000089f4 	.word	0x000089f4
    8a14:	000089f0 	.word	0x000089f0

00008a18 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    8a18:	b510      	push	{r4, lr}
    8a1a:	1e42      	subs	r2, r0, #1
    8a1c:	2a02      	cmp	r2, #2
    8a1e:	d901      	bls.n	8a24 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    8a20:	21ca      	movs	r1, #202	; 0xca
    8a22:	e009      	b.n	8a38 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    8a24:	1e40      	subs	r0, r0, #1
    8a26:	2910      	cmp	r1, #16
    8a28:	d009      	beq.n	8a3e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    8a2a:	2912      	cmp	r1, #18
    8a2c:	d00c      	beq.n	8a48 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    8a2e:	2913      	cmp	r1, #19
    8a30:	d00a      	beq.n	8a48 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    8a32:	2915      	cmp	r1, #21
    8a34:	d005      	beq.n	8a42 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    8a36:	21d8      	movs	r1, #216	; 0xd8
    8a38:	202f      	movs	r0, #47	; 0x2f
    8a3a:	f7fc fdc9 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a3e:	4905      	ldr	r1, [pc, #20]	; (8a54 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    8a40:	e004      	b.n	8a4c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    8a42:	4904      	ldr	r1, [pc, #16]	; (8a54 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    8a44:	1d89      	adds	r1, r1, #6
    8a46:	e001      	b.n	8a4c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    8a48:	4902      	ldr	r1, [pc, #8]	; (8a54 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    8a4a:	1f89      	subs	r1, r1, #6
    8a4c:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    8a50:	bd10      	pop	{r4, pc}
    8a52:	0000      	.short	0x0000
    8a54:	000100f8 	.word	0x000100f8

00008a58 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    8a58:	1e42      	subs	r2, r0, #1
    8a5a:	b510      	push	{r4, lr}
    8a5c:	b2d2      	uxtb	r2, r2
    8a5e:	2a01      	cmp	r2, #1
    8a60:	d903      	bls.n	8a6a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    8a62:	291d      	cmp	r1, #29
    8a64:	d001      	beq.n	8a6a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    8a66:	21ee      	movs	r1, #238	; 0xee
    8a68:	e00d      	b.n	8a86 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    8a6a:	2913      	cmp	r1, #19
    8a6c:	d013      	beq.n	8a96 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    8a6e:	dc04      	bgt.n	8a7a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    8a70:	2910      	cmp	r1, #16
    8a72:	d00b      	beq.n	8a8c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    8a74:	2912      	cmp	r1, #18
    8a76:	d104      	bne.n	8a82 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    8a78:	e00d      	b.n	8a96 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    8a7a:	2915      	cmp	r1, #21
    8a7c:	d008      	beq.n	8a90 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    8a7e:	291d      	cmp	r1, #29
    8a80:	d00e      	beq.n	8aa0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    8a82:	f44f 7181 	mov.w	r1, #258	; 0x102
    8a86:	202f      	movs	r0, #47	; 0x2f
    8a88:	f7fc fda2 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a8c:	4807      	ldr	r0, [pc, #28]	; (8aac <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    8a8e:	e004      	b.n	8a9a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    8a90:	4806      	ldr	r0, [pc, #24]	; (8aac <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    8a92:	3008      	adds	r0, #8
    8a94:	e001      	b.n	8a9a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    8a96:	4805      	ldr	r0, [pc, #20]	; (8aac <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    8a98:	1d00      	adds	r0, r0, #4
    8a9a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    8a9e:	bd10      	pop	{r4, pc}
    8aa0:	f240 315a 	movw	r1, #858	; 0x35a
    8aa4:	fb10 f001 	smulbb	r0, r0, r1
    8aa8:	bd10      	pop	{r4, pc}
    8aaa:	0000      	.short	0x0000
    8aac:	000100e6 	.word	0x000100e6

00008ab0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    8ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8ab4:	4604      	mov	r4, r0
    8ab6:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    8aba:	4616      	mov	r6, r2
    8abc:	460f      	mov	r7, r1
    8abe:	2800      	cmp	r0, #0
    8ac0:	d15e      	bne.n	8b80 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    8ac2:	4621      	mov	r1, r4
    8ac4:	484d      	ldr	r0, [pc, #308]	; (8bfc <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
    8ac6:	f7fa fff9 	bl	3abc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8aca:	4605      	mov	r5, r0
    8acc:	2820      	cmp	r0, #32
    8ace:	d057      	beq.n	8b80 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    8ad0:	2250      	movs	r2, #80	; 0x50
    8ad2:	2100      	movs	r1, #0
    8ad4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    8ad8:	f005 f856 	bl	db88 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8adc:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
    8ae0:	2501      	movs	r5, #1
    8ae2:	f8c4 70c4 	str.w	r7, [r4, #196]	; 0xc4
    8ae6:	f884 50d8 	strb.w	r5, [r4, #216]	; 0xd8
    8aea:	b137      	cbz	r7, 8afa <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    8aec:	f7ff f8c4 	bl	7c78 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    8af0:	f000 0007 	and.w	r0, r0, #7
    8af4:	1c40      	adds	r0, r0, #1
    8af6:	f887 01f4 	strb.w	r0, [r7, #500]	; 0x1f4
    8afa:	4620      	mov	r0, r4
    8afc:	f007 fce6 	bl	104cc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    8b00:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
    8b04:	2002      	movs	r0, #2
    8b06:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
    8b0a:	46a8      	mov	r8, r5
    8b0c:	f884 50eb 	strb.w	r5, [r4, #235]	; 0xeb
    8b10:	2500      	movs	r5, #0
    8b12:	f804 5fe0 	strb.w	r5, [r4, #224]!
    8b16:	f7fc f8e1 	bl	4cdc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8b1a:	4607      	mov	r7, r0
    8b1c:	f004 fe57 	bl	d7ce <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8b20:	8921      	ldrh	r1, [r4, #8]
    8b22:	3ce0      	subs	r4, #224	; 0xe0
    8b24:	4288      	cmp	r0, r1
    8b26:	d800      	bhi.n	8b2a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    8b28:	4608      	mov	r0, r1
    8b2a:	4438      	add	r0, r7
    8b2c:	30cc      	adds	r0, #204	; 0xcc
    8b2e:	b287      	uxth	r7, r0
    8b30:	4620      	mov	r0, r4
    8b32:	f007 f974 	bl	fe1e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    8b36:	b330      	cbz	r0, 8b86 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    8b38:	f008 fec3 	bl	118c2 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    8b3c:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    8b40:	b281      	uxth	r1, r0
    8b42:	4630      	mov	r0, r6
    8b44:	f004 fe77 	bl	d836 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8b48:	4430      	add	r0, r6
    8b4a:	f8c4 00e4 	str.w	r0, [r4, #228]	; 0xe4
    8b4e:	34c4      	adds	r4, #196	; 0xc4
    8b50:	f7fb f966 	bl	3e20 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    8b54:	19c0      	adds	r0, r0, r7
    8b56:	4169      	adcs	r1, r5
    8b58:	e9c4 010b 	strd	r0, r1, [r4, #44]	; 0x2c
    8b5c:	f804 5c03 	strb.w	r5, [r4, #-3]
    8b60:	f884 8004 	strb.w	r8, [r4, #4]
    8b64:	2001      	movs	r0, #1
    8b66:	f007 fab7 	bl	100d8 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    8b6a:	f500 7088 	add.w	r0, r0, #272	; 0x110
    8b6e:	1a30      	subs	r0, r6, r0
    8b70:	60a0      	str	r0, [r4, #8]
    8b72:	f04f 30ff 	mov.w	r0, #4294967295
    8b76:	0841      	lsrs	r1, r0, #1
    8b78:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
    8b7c:	3cc4      	subs	r4, #196	; 0xc4
    8b7e:	e022      	b.n	8bc6 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x116>
    8b80:	200c      	movs	r0, #12
    8b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8b86:	4620      	mov	r0, r4
    8b88:	f007 fbf3 	bl	10372 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
    8b8c:	f844 0fe4 	str.w	r0, [r4, #228]!
    8b90:	f804 8c23 	strb.w	r8, [r4, #-35]
    8b94:	f7fb f944 	bl	3e20 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    8b98:	4680      	mov	r8, r0
    8b9a:	4689      	mov	r9, r1
    8b9c:	f7ff f86c 	bl	7c78 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    8ba0:	f242 7110 	movw	r1, #10000	; 0x2710
    8ba4:	fbb0 f2f1 	udiv	r2, r0, r1
    8ba8:	fb01 0012 	mls	r0, r1, r2, r0
    8bac:	1839      	adds	r1, r7, r0
    8bae:	eb11 0108 	adds.w	r1, r1, r8
    8bb2:	eb45 0009 	adc.w	r0, r5, r9
    8bb6:	e9c4 1003 	strd	r1, r0, [r4, #12]
    8bba:	3ce4      	subs	r4, #228	; 0xe4
    8bbc:	b196      	cbz	r6, 8be4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x134>
    8bbe:	1989      	adds	r1, r1, r6
    8bc0:	4168      	adcs	r0, r5
    8bc2:	e9c4 1040 	strd	r1, r0, [r4, #256]	; 0x100
    8bc6:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
    8bca:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
    8bce:	f007 fc7b 	bl	104c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
    8bd2:	b168      	cbz	r0, 8bf0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x140>
    8bd4:	f8a4 50f8 	strh.w	r5, [r4, #248]	; 0xf8
    8bd8:	2100      	movs	r1, #0
    8bda:	4620      	mov	r0, r4
    8bdc:	f007 f94b 	bl	fe76 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8be0:	2000      	movs	r0, #0
    8be2:	e7ce      	b.n	8b82 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    8be4:	f04f 30ff 	mov.w	r0, #4294967295
    8be8:	0841      	lsrs	r1, r0, #1
    8bea:	e9c4 0140 	strd	r0, r1, [r4, #256]	; 0x100
    8bee:	e7ea      	b.n	8bc6 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x116>
    8bf0:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    8bf4:	2030      	movs	r0, #48	; 0x30
    8bf6:	f7fc fceb 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8bfa:	0000      	.short	0x0000
    8bfc:	00010649 	.word	0x00010649

00008c00 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    8c00:	4803      	ldr	r0, [pc, #12]	; (8c10 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x10>)
    8c02:	2100      	movs	r1, #0
    8c04:	7001      	strb	r1, [r0, #0]
    8c06:	2201      	movs	r2, #1
    8c08:	7082      	strb	r2, [r0, #2]
    8c0a:	7041      	strb	r1, [r0, #1]
    8c0c:	f007 bacc 	b.w	101a8 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    8c10:	2000014c 	.word	0x2000014c

00008c14 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    8c14:	4901      	ldr	r1, [pc, #4]	; (8c1c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    8c16:	7008      	strb	r0, [r1, #0]
    8c18:	4770      	bx	lr
    8c1a:	0000      	.short	0x0000
    8c1c:	2000014c 	.word	0x2000014c

00008c20 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    8c20:	4908      	ldr	r1, [pc, #32]	; (8c44 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    8c22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8c26:	fbb1 f1f2 	udiv	r1, r1, r2
    8c2a:	b510      	push	{r4, lr}
    8c2c:	f501 7125 	add.w	r1, r1, #660	; 0x294
    8c30:	f006 ff88 	bl	fb44 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    8c34:	f640 0148 	movw	r1, #2120	; 0x848
    8c38:	4288      	cmp	r0, r1
    8c3a:	d300      	bcc.n	8c3e <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    8c3c:	4608      	mov	r0, r1
    8c3e:	b280      	uxth	r0, r0
    8c40:	bd10      	pop	{r4, pc}
    8c42:	0000      	.short	0x0000
    8c44:	0001527d 	.word	0x0001527d

00008c48 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    8c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c4c:	4c10      	ldr	r4, [pc, #64]	; (8c90 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    8c4e:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    8c52:	f003 fbdd 	bl	c410 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8c56:	4606      	mov	r6, r0
    8c58:	7820      	ldrb	r0, [r4, #0]
    8c5a:	b128      	cbz	r0, 8c68 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    8c5c:	4632      	mov	r2, r6
    8c5e:	4639      	mov	r1, r7
    8c60:	4628      	mov	r0, r5
    8c62:	f006 f9fd 	bl	f060 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    8c66:	4605      	mov	r5, r0
    8c68:	6860      	ldr	r0, [r4, #4]
    8c6a:	4285      	cmp	r5, r0
    8c6c:	d005      	beq.n	8c7a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    8c6e:	68e1      	ldr	r1, [r4, #12]
    8c70:	1a28      	subs	r0, r5, r0
    8c72:	4408      	add	r0, r1
    8c74:	60e0      	str	r0, [r4, #12]
    8c76:	f7fb f819 	bl	3cac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8c7a:	6065      	str	r5, [r4, #4]
    8c7c:	42ae      	cmp	r6, r5
    8c7e:	d801      	bhi.n	8c84 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    8c80:	7860      	ldrb	r0, [r4, #1]
    8c82:	b110      	cbz	r0, 8c8a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    8c84:	2000      	movs	r0, #0
    8c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c8a:	2001      	movs	r0, #1
    8c8c:	e7fb      	b.n	8c86 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    8c8e:	0000      	.short	0x0000
    8c90:	2000014c 	.word	0x2000014c

00008c94 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    8c94:	b510      	push	{r4, lr}
    8c96:	4604      	mov	r4, r0
    8c98:	2906      	cmp	r1, #6
    8c9a:	d22e      	bcs.n	8cfa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66>
    8c9c:	e8df f001 	tbb	[pc, r1]
    8ca0:	14031105 	.word	0x14031105
    8ca4:	2815      	.short	0x2815
    8ca6:	2100      	movs	r1, #0
    8ca8:	e006      	b.n	8cb8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    8caa:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    8cae:	b110      	cbz	r0, 8cb6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    8cb0:	4620      	mov	r0, r4
    8cb2:	f007 fb9c 	bl	103ee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x218>
    8cb6:	2101      	movs	r1, #1
    8cb8:	4620      	mov	r0, r4
    8cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8cbe:	f000 b8fb 	b.w	8eb8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b0>
    8cc2:	2003      	movs	r0, #3
    8cc4:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    8cc8:	bd10      	pop	{r4, pc}
    8cca:	f003 fba7 	bl	c41c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    8cce:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    8cd2:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8cd6:	f003 fc65 	bl	c5a4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8cda:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    8cde:	1a09      	subs	r1, r1, r0
    8ce0:	4808      	ldr	r0, [pc, #32]	; (8d04 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70>)
    8ce2:	6842      	ldr	r2, [r0, #4]
    8ce4:	440a      	add	r2, r1
    8ce6:	6042      	str	r2, [r0, #4]
    8ce8:	6882      	ldr	r2, [r0, #8]
    8cea:	4411      	add	r1, r2
    8cec:	6081      	str	r1, [r0, #8]
    8cee:	bd10      	pop	{r4, pc}
    8cf0:	4620      	mov	r0, r4
    8cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8cf6:	f007 bb65 	b.w	103c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    8cfa:	f240 715b 	movw	r1, #1883	; 0x75b
    8cfe:	2030      	movs	r0, #48	; 0x30
    8d00:	f7fc fc66 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d04:	2000014c 	.word	0x2000014c

00008d08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    8d08:	b570      	push	{r4, r5, r6, lr}
    8d0a:	460c      	mov	r4, r1
    8d0c:	4605      	mov	r5, r0
    8d0e:	b112      	cbz	r2, 8d16 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    8d10:	f240 7185 	movw	r1, #1925	; 0x785
    8d14:	e010      	b.n	8d38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    8d16:	f003 fb7b 	bl	c410 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8d1a:	4601      	mov	r1, r0
    8d1c:	2200      	movs	r2, #0
    8d1e:	4620      	mov	r0, r4
    8d20:	f007 fc46 	bl	105b0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3da>
    8d24:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
    8d28:	462a      	mov	r2, r5
    8d2a:	4905      	ldr	r1, [pc, #20]	; (8d40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    8d2c:	f7fa fd7c 	bl	3828 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    8d30:	2800      	cmp	r0, #0
    8d32:	d104      	bne.n	8d3e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    8d34:	f240 716e 	movw	r1, #1902	; 0x76e
    8d38:	2030      	movs	r0, #48	; 0x30
    8d3a:	f7fc fc49 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d3e:	bd70      	pop	{r4, r5, r6, pc}
    8d40:	000106e9 	.word	0x000106e9
    8d44:	b510      	push	{r4, lr}
    8d46:	280c      	cmp	r0, #12
    8d48:	d304      	bcc.n	8d54 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    8d4a:	f44f 7157 	mov.w	r1, #860	; 0x35c
    8d4e:	2006      	movs	r0, #6
    8d50:	f7fc fc3e 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d54:	4901      	ldr	r1, [pc, #4]	; (8d5c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    8d56:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    8d5a:	bd10      	pop	{r4, pc}
    8d5c:	0001090c 	.word	0x0001090c
    8d60:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    8d62:	4c18      	ldr	r4, [pc, #96]	; (8dc4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbc>)
    8d64:	2001      	movs	r0, #1
    8d66:	7060      	strb	r0, [r4, #1]
    8d68:	f64f 75ff 	movw	r5, #65535	; 0xffff
    8d6c:	e00b      	b.n	8d86 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e>
    8d6e:	2100      	movs	r1, #0
    8d70:	f005 fec2 	bl	eaf8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8d74:	0006      	movs	r6, r0
    8d76:	d010      	beq.n	8d9a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    8d78:	f896 024c 	ldrb.w	r0, [r6, #588]	; 0x24c
    8d7c:	f7fa fd86 	bl	388c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8d80:	4630      	mov	r0, r6
    8d82:	f007 fc08 	bl	10596 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3c0>
    8d86:	4669      	mov	r1, sp
    8d88:	2000      	movs	r0, #0
    8d8a:	f005 febf 	bl	eb0c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8d8e:	b180      	cbz	r0, 8db2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8d90:	f240 1103 	movw	r1, #259	; 0x103
    8d94:	2030      	movs	r0, #48	; 0x30
    8d96:	f7fc fc1b 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d9a:	f240 1123 	movw	r1, #291	; 0x123
    8d9e:	e7f9      	b.n	8d94 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
    8da0:	9802      	ldr	r0, [sp, #8]
    8da2:	b130      	cbz	r0, 8db2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8da4:	f890 1204 	ldrb.w	r1, [r0, #516]	; 0x204
    8da8:	b119      	cbz	r1, 8db2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8daa:	8800      	ldrh	r0, [r0, #0]
    8dac:	42a8      	cmp	r0, r5
    8dae:	d1de      	bne.n	8d6e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x66>
    8db0:	e004      	b.n	8dbc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>
    8db2:	4668      	mov	r0, sp
    8db4:	f7fc fe50 	bl	5a58 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8db8:	2800      	cmp	r0, #0
    8dba:	d0f1      	beq.n	8da0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98>
    8dbc:	2000      	movs	r0, #0
    8dbe:	7060      	strb	r0, [r4, #1]
    8dc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8dc2:	0000      	.short	0x0000
    8dc4:	2000014c 	.word	0x2000014c
    8dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8dcc:	4604      	mov	r4, r0
    8dce:	4839      	ldr	r0, [pc, #228]	; (8eb4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ac>)
    8dd0:	461e      	mov	r6, r3
    8dd2:	4690      	mov	r8, r2
    8dd4:	7880      	ldrb	r0, [r0, #2]
    8dd6:	4689      	mov	r9, r1
    8dd8:	2500      	movs	r5, #0
    8dda:	2800      	cmp	r0, #0
    8ddc:	d063      	beq.n	8ea6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8dde:	f7fc f853 	bl	4e88 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    8de2:	b3e0      	cbz	r0, 8e5e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x156>
    8de4:	f8b4 01f0 	ldrh.w	r0, [r4, #496]	; 0x1f0
    8de8:	2802      	cmp	r0, #2
    8dea:	d35c      	bcc.n	8ea6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8dec:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8df0:	2802      	cmp	r0, #2
    8df2:	d058      	beq.n	8ea6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8df4:	f894 021a 	ldrb.w	r0, [r4, #538]	; 0x21a
    8df8:	bb88      	cbnz	r0, 8e5e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x156>
    8dfa:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
    8dfe:	f7ff ffa1 	bl	8d44 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    8e02:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    8e06:	b281      	uxth	r1, r0
    8e08:	8031      	strh	r1, [r6, #0]
    8e0a:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8e0e:	2700      	movs	r7, #0
    8e10:	2801      	cmp	r0, #1
    8e12:	d00d      	beq.n	8e30 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x128>
    8e14:	6920      	ldr	r0, [r4, #16]
    8e16:	f004 fd0e 	bl	d836 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8e1a:	f8b4 21de 	ldrh.w	r2, [r4, #478]	; 0x1de
    8e1e:	4442      	add	r2, r8
    8e20:	eba2 0109 	sub.w	r1, r2, r9
    8e24:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
    8e28:	1a82      	subs	r2, r0, r2
    8e2a:	fb01 7502 	mla	r5, r1, r2, r7
    8e2e:	e035      	b.n	8e9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x194>
    8e30:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
    8e34:	2803      	cmp	r0, #3
    8e36:	d039      	beq.n	8eac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>
    8e38:	2101      	movs	r1, #1
    8e3a:	2000      	movs	r0, #0
    8e3c:	f006 f9cb 	bl	f1d6 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8e40:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8e42:	1847      	adds	r7, r0, r1
    8e44:	8831      	ldrh	r1, [r6, #0]
    8e46:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    8e4a:	f004 fcf4 	bl	d836 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8e4e:	f8d4 21f8 	ldr.w	r2, [r4, #504]	; 0x1f8
    8e52:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    8e56:	1a82      	subs	r2, r0, r2
    8e58:	fb01 5502 	mla	r5, r1, r2, r5
    8e5c:	e000      	b.n	8e60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x158>
    8e5e:	e022      	b.n	8ea6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8e60:	f8c4 01f8 	str.w	r0, [r4, #504]	; 0x1f8
    8e64:	8831      	ldrh	r1, [r6, #0]
    8e66:	4638      	mov	r0, r7
    8e68:	f004 fce5 	bl	d836 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8e6c:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    8e70:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    8e74:	1a41      	subs	r1, r0, r1
    8e76:	440d      	add	r5, r1
    8e78:	8831      	ldrh	r1, [r6, #0]
    8e7a:	6920      	ldr	r0, [r4, #16]
    8e7c:	f004 fcdb 	bl	d836 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8e80:	f8b4 21de 	ldrh.w	r2, [r4, #478]	; 0x1de
    8e84:	4442      	add	r2, r8
    8e86:	eba2 0109 	sub.w	r1, r2, r9
    8e8a:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    8e8e:	1a89      	subs	r1, r1, r2
    8e90:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
    8e94:	1a82      	subs	r2, r0, r2
    8e96:	1e49      	subs	r1, r1, #1
    8e98:	fb01 5502 	mla	r5, r1, r2, r5
    8e9c:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    8ea0:	2001      	movs	r0, #1
    8ea2:	f884 021a 	strb.w	r0, [r4, #538]	; 0x21a
    8ea6:	4628      	mov	r0, r5
    8ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8eac:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    8eb0:	e7c6      	b.n	8e40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x138>
    8eb2:	0000      	.short	0x0000
    8eb4:	2000014c 	.word	0x2000014c
    8eb8:	b538      	push	{r3, r4, r5, lr}
    8eba:	2500      	movs	r5, #0
    8ebc:	4604      	mov	r4, r0
    8ebe:	2901      	cmp	r1, #1
    8ec0:	d102      	bne.n	8ec8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c0>
    8ec2:	4810      	ldr	r0, [pc, #64]	; (8f04 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1fc>)
    8ec4:	7840      	ldrb	r0, [r0, #1]
    8ec6:	b170      	cbz	r0, 8ee6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1de>
    8ec8:	2004      	movs	r0, #4
    8eca:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    8ece:	bf00      	nop
    8ed0:	f007 fa86 	bl	103e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>
    8ed4:	f8a4 524a 	strh.w	r5, [r4, #586]	; 0x24a
    8ed8:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    8edc:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
    8ee0:	f884 5219 	strb.w	r5, [r4, #537]	; 0x219
    8ee4:	bd38      	pop	{r3, r4, r5, pc}
    8ee6:	9500      	str	r5, [sp, #0]
    8ee8:	f8b4 11cc 	ldrh.w	r1, [r4, #460]	; 0x1cc
    8eec:	2301      	movs	r3, #1
    8eee:	2200      	movs	r2, #0
    8ef0:	4620      	mov	r0, r4
    8ef2:	f000 f809 	bl	8f08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    8ef6:	2800      	cmp	r0, #0
    8ef8:	d0ea      	beq.n	8ed0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c8>
    8efa:	f240 61cf 	movw	r1, #1743	; 0x6cf
    8efe:	2030      	movs	r0, #48	; 0x30
    8f00:	f7fc fb66 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f04:	2000014c 	.word	0x2000014c
    8f08:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f0c:	b08b      	sub	sp, #44	; 0x2c
    8f0e:	4604      	mov	r4, r0
    8f10:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    8f14:	4699      	mov	r9, r3
    8f16:	460f      	mov	r7, r1
    8f18:	9307      	str	r3, [sp, #28]
    8f1a:	9005      	str	r0, [sp, #20]
    8f1c:	f008 fcd1 	bl	118c2 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    8f20:	4605      	mov	r5, r0
    8f22:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
    8f26:	f7ff ff0d 	bl	8d44 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    8f2a:	4428      	add	r0, r5
    8f2c:	f8ad 0004 	strh.w	r0, [sp, #4]
    8f30:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    8f34:	280d      	cmp	r0, #13
    8f36:	d004      	beq.n	8f42 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x23a>
    8f38:	2000      	movs	r0, #0
    8f3a:	9008      	str	r0, [sp, #32]
    8f3c:	980d      	ldr	r0, [sp, #52]	; 0x34
    8f3e:	b110      	cbz	r0, 8f46 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x23e>
    8f40:	e02e      	b.n	8fa0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    8f42:	2001      	movs	r0, #1
    8f44:	e7f9      	b.n	8f3a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    8f46:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8f4a:	2803      	cmp	r0, #3
    8f4c:	d128      	bne.n	8fa0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    8f4e:	9808      	ldr	r0, [sp, #32]
    8f50:	b330      	cbz	r0, 8fa0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    8f52:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    8f56:	42b8      	cmp	r0, r7
    8f58:	d122      	bne.n	8fa0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    8f5a:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    8f5e:	f8c4 01f8 	str.w	r0, [r4, #504]	; 0x1f8
    8f62:	6920      	ldr	r0, [r4, #16]
    8f64:	f8c4 01fc 	str.w	r0, [r4, #508]	; 0x1fc
    8f68:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    8f6c:	f8b4 11de 	ldrh.w	r1, [r4, #478]	; 0x1de
    8f70:	4408      	add	r0, r1
    8f72:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    8f76:	4620      	mov	r0, r4
    8f78:	f007 fce8 	bl	1094c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    8f7c:	f8d4 0278 	ldr.w	r0, [r4, #632]	; 0x278
    8f80:	6260      	str	r0, [r4, #36]	; 0x24
    8f82:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    8f86:	8420      	strh	r0, [r4, #32]
    8f88:	f8d4 027c 	ldr.w	r0, [r4, #636]	; 0x27c
    8f8c:	6120      	str	r0, [r4, #16]
    8f8e:	f8b4 0280 	ldrh.w	r0, [r4, #640]	; 0x280
    8f92:	8320      	strh	r0, [r4, #24]
    8f94:	f8b4 0282 	ldrh.w	r0, [r4, #642]	; 0x282
    8f98:	8360      	strh	r0, [r4, #26]
    8f9a:	2002      	movs	r0, #2
    8f9c:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    8fa0:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    8fa4:	f504 7508 	add.w	r5, r4, #544	; 0x220
    8fa8:	1a38      	subs	r0, r7, r0
    8faa:	fa0f fa80 	sxth.w	sl, r0
    8fae:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
    8fb2:	1a38      	subs	r0, r7, r0
    8fb4:	fa0f f880 	sxth.w	r8, r0
    8fb8:	f1b8 0f00 	cmp.w	r8, #0
    8fbc:	da08      	bge.n	8fd0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c8>
    8fbe:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
    8fc2:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
    8fc6:	46d0      	mov	r8, sl
    8fc8:	e9c4 0190 	strd	r0, r1, [r4, #576]	; 0x240
    8fcc:	2001      	movs	r0, #1
    8fce:	9007      	str	r0, [sp, #28]
    8fd0:	ab01      	add	r3, sp, #4
    8fd2:	4652      	mov	r2, sl
    8fd4:	4641      	mov	r1, r8
    8fd6:	4620      	mov	r0, r4
    8fd8:	f7ff fef6 	bl	8dc8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xc0>
    8fdc:	9004      	str	r0, [sp, #16]
    8fde:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8fe2:	f8df b334 	ldr.w	fp, [pc, #820]	; 9318 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    8fe6:	b140      	cbz	r0, 8ffa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f2>
    8fe8:	2801      	cmp	r0, #1
    8fea:	d07d      	beq.n	90e8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3e0>
    8fec:	2802      	cmp	r0, #2
    8fee:	d051      	beq.n	9094 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38c>
    8ff0:	2803      	cmp	r0, #3
    8ff2:	d07a      	beq.n	90ea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3e2>
    8ff4:	f240 514b 	movw	r1, #1355	; 0x54b
    8ff8:	e18a      	b.n	9310 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    8ffa:	2101      	movs	r1, #1
    8ffc:	2000      	movs	r0, #0
    8ffe:	f006 f8ea 	bl	f1d6 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    9002:	4606      	mov	r6, r0
    9004:	6a60      	ldr	r0, [r4, #36]	; 0x24
    9006:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    900a:	4430      	add	r0, r6
    900c:	f004 fc13 	bl	d836 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    9010:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    9014:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    9018:	6920      	ldr	r0, [r4, #16]
    901a:	f004 fc0c 	bl	d836 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    901e:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    9022:	a907      	add	r1, sp, #28
    9024:	a806      	add	r0, sp, #24
    9026:	f003 f95b 	bl	c2e0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    902a:	e9d4 0190 	ldrd	r0, r1, [r4, #576]	; 0x240
    902e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    9032:	f7fa ff07 	bl	3e44 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    9036:	4682      	mov	sl, r0
    9038:	4620      	mov	r0, r4
    903a:	f007 f9c3 	bl	103c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    903e:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    9042:	f8d4 8250 	ldr.w	r8, [r4, #592]	; 0x250
    9046:	f003 fad9 	bl	c5fc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    904a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    904e:	4401      	add	r1, r0
    9050:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9054:	fbb1 f0f0 	udiv	r0, r1, r0
    9058:	6a61      	ldr	r1, [r4, #36]	; 0x24
    905a:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
    905e:	4431      	add	r1, r6
    9060:	1a08      	subs	r0, r1, r0
    9062:	1a81      	subs	r1, r0, r2
    9064:	4441      	add	r1, r8
    9066:	3920      	subs	r1, #32
    9068:	eba1 060a 	sub.w	r6, r1, sl
    906c:	0050      	lsls	r0, r2, #1
    906e:	8c21      	ldrh	r1, [r4, #32]
    9070:	3060      	adds	r0, #96	; 0x60
    9072:	4401      	add	r1, r0
    9074:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    9078:	f007 fa14 	bl	104a4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ce>
    907c:	3022      	adds	r0, #34	; 0x22
    907e:	f8cb 0010 	str.w	r0, [fp, #16]
    9082:	f8d4 0250 	ldr.w	r0, [r4, #592]	; 0x250
    9086:	1a30      	subs	r0, r6, r0
    9088:	f5b0 7fde 	cmp.w	r0, #444	; 0x1bc
    908c:	d258      	bcs.n	9140 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x438>
    908e:	f240 41e4 	movw	r1, #1252	; 0x4e4
    9092:	e13d      	b.n	9310 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    9094:	6a61      	ldr	r1, [r4, #36]	; 0x24
    9096:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    909a:	4408      	add	r0, r1
    909c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    90a0:	f004 fbc9 	bl	d836 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    90a4:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    90a8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    90ac:	6920      	ldr	r0, [r4, #16]
    90ae:	f004 fbc2 	bl	d836 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    90b2:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    90b6:	4620      	mov	r0, r4
    90b8:	f007 f984 	bl	103c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    90bc:	f8b4 01de 	ldrh.w	r0, [r4, #478]	; 0x1de
    90c0:	bb10      	cbnz	r0, 9108 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x400>
    90c2:	f1b9 0f00 	cmp.w	r9, #0
    90c6:	d01f      	beq.n	9108 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x400>
    90c8:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
    90cc:	4640      	mov	r0, r8
    90ce:	f003 fa95 	bl	c5fc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    90d2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    90d6:	4401      	add	r1, r0
    90d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    90dc:	fbb1 f0f0 	udiv	r0, r1, r0
    90e0:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    90e4:	4408      	add	r0, r1
    90e6:	e001      	b.n	90ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3e4>
    90e8:	e02b      	b.n	9142 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x43a>
    90ea:	e047      	b.n	917c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x474>
    90ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
    90ee:	f8d4 11fc 	ldr.w	r1, [r4, #508]	; 0x1fc
    90f2:	4411      	add	r1, r2
    90f4:	1a0e      	subs	r6, r1, r0
    90f6:	4640      	mov	r0, r8
    90f8:	f003 fa54 	bl	c5a4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    90fc:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    9100:	1a08      	subs	r0, r1, r0
    9102:	4406      	add	r6, r0
    9104:	3e20      	subs	r6, #32
    9106:	e006      	b.n	9116 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x40e>
    9108:	6a61      	ldr	r1, [r4, #36]	; 0x24
    910a:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    910e:	4408      	add	r0, r1
    9110:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    9114:	1a46      	subs	r6, r0, r1
    9116:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    911a:	f8d4 11f8 	ldr.w	r1, [r4, #504]	; 0x1f8
    911e:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    9122:	fb01 0002 	mla	r0, r1, r2, r0
    9126:	0040      	lsls	r0, r0, #1
    9128:	8c21      	ldrh	r1, [r4, #32]
    912a:	3060      	adds	r0, #96	; 0x60
    912c:	4401      	add	r1, r0
    912e:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    9132:	f007 f9b7 	bl	104a4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ce>
    9136:	f8cb 0010 	str.w	r0, [fp, #16]
    913a:	2001      	movs	r0, #1
    913c:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    9140:	e061      	b.n	9206 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4fe>
    9142:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
    9146:	6920      	ldr	r0, [r4, #16]
    9148:	f8b4 11de 	ldrh.w	r1, [r4, #478]	; 0x1de
    914c:	1a86      	subs	r6, r0, r2
    914e:	eb01 000a 	add.w	r0, r1, sl
    9152:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    9156:	f8d4 c1f8 	ldr.w	ip, [r4, #504]	; 0x1f8
    915a:	1a40      	subs	r0, r0, r1
    915c:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
    9160:	1e40      	subs	r0, r0, #1
    9162:	fb0c 3101 	mla	r1, ip, r1, r3
    9166:	fb00 1002 	mla	r0, r0, r2, r1
    916a:	0040      	lsls	r0, r0, #1
    916c:	8c21      	ldrh	r1, [r4, #32]
    916e:	3060      	adds	r0, #96	; 0x60
    9170:	4401      	add	r1, r0
    9172:	fb06 f608 	mul.w	r6, r6, r8
    9176:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    917a:	e040      	b.n	91fe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f6>
    917c:	6920      	ldr	r0, [r4, #16]
    917e:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    9182:	fb00 f008 	mul.w	r0, r0, r8
    9186:	fb08 0611 	mls	r6, r8, r1, r0
    918a:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
    918e:	2824      	cmp	r0, #36	; 0x24
    9190:	d003      	beq.n	919a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x492>
    9192:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    9196:	2824      	cmp	r0, #36	; 0x24
    9198:	d109      	bne.n	91ae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4a6>
    919a:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    919e:	1a38      	subs	r0, r7, r0
    91a0:	b200      	sxth	r0, r0
    91a2:	2800      	cmp	r0, #0
    91a4:	db03      	blt.n	91ae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4a6>
    91a6:	f894 0277 	ldrb.w	r0, [r4, #631]	; 0x277
    91aa:	b100      	cbz	r0, 91ae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4a6>
    91ac:	9005      	str	r0, [sp, #20]
    91ae:	9807      	ldr	r0, [sp, #28]
    91b0:	b1d8      	cbz	r0, 91ea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4e2>
    91b2:	f8b4 01de 	ldrh.w	r0, [r4, #478]	; 0x1de
    91b6:	b9c0      	cbnz	r0, 91ea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4e2>
    91b8:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    91bc:	2800      	cmp	r0, #0
    91be:	d07d      	beq.n	92bc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b4>
    91c0:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    91c4:	f003 fa1a 	bl	c5fc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    91c8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    91cc:	4401      	add	r1, r0
    91ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    91d2:	fbb1 f0f0 	udiv	r0, r1, r0
    91d6:	1a36      	subs	r6, r6, r0
    91d8:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    91dc:	f003 f9e2 	bl	c5a4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    91e0:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    91e4:	1a08      	subs	r0, r1, r0
    91e6:	4406      	add	r6, r0
    91e8:	3e20      	subs	r6, #32
    91ea:	f8b4 11de 	ldrh.w	r1, [r4, #478]	; 0x1de
    91ee:	eb01 000a 	add.w	r0, r1, sl
    91f2:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    91f6:	4348      	muls	r0, r1
    91f8:	0041      	lsls	r1, r0, #1
    91fa:	3160      	adds	r1, #96	; 0x60
    91fc:	9805      	ldr	r0, [sp, #20]
    91fe:	f007 f951 	bl	104a4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ce>
    9202:	f8cb 0010 	str.w	r0, [fp, #16]
    9206:	9804      	ldr	r0, [sp, #16]
    9208:	f8db 2010 	ldr.w	r2, [fp, #16]
    920c:	1a31      	subs	r1, r6, r0
    920e:	f8d4 620c 	ldr.w	r6, [r4, #524]	; 0x20c
    9212:	6920      	ldr	r0, [r4, #16]
    9214:	1b80      	subs	r0, r0, r6
    9216:	f2a0 2046 	subw	r0, r0, #582	; 0x246
    921a:	f8cb 0014 	str.w	r0, [fp, #20]
    921e:	4282      	cmp	r2, r0
    9220:	d800      	bhi.n	9224 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x51c>
    9222:	4610      	mov	r0, r2
    9224:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    9228:	2600      	movs	r6, #0
    922a:	702e      	strb	r6, [r5, #0]
    922c:	2064      	movs	r0, #100	; 0x64
    922e:	8128      	strh	r0, [r5, #8]
    9230:	e9d4 2090 	ldrd	r2, r0, [r4, #576]	; 0x240
    9234:	1851      	adds	r1, r2, r1
    9236:	4170      	adcs	r0, r6
    9238:	e9c5 1004 	strd	r1, r0, [r5, #16]
    923c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    9240:	f006 fc51 	bl	fae6 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9244:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
    9248:	4408      	add	r0, r1
    924a:	6068      	str	r0, [r5, #4]
    924c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    9250:	e9c4 0190 	strd	r0, r1, [r4, #576]	; 0x240
    9254:	f8a4 7248 	strh.w	r7, [r4, #584]	; 0x248
    9258:	72ae      	strb	r6, [r5, #10]
    925a:	f8b4 01c8 	ldrh.w	r0, [r4, #456]	; 0x1c8
    925e:	1bc0      	subs	r0, r0, r7
    9260:	b200      	sxth	r0, r0
    9262:	2800      	cmp	r0, #0
    9264:	dd01      	ble.n	926a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x562>
    9266:	2002      	movs	r0, #2
    9268:	72a8      	strb	r0, [r5, #10]
    926a:	9808      	ldr	r0, [sp, #32]
    926c:	b338      	cbz	r0, 92be <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b6>
    926e:	f1b9 0f00 	cmp.w	r9, #0
    9272:	d01c      	beq.n	92ae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    9274:	f8b4 11f0 	ldrh.w	r1, [r4, #496]	; 0x1f0
    9278:	b3f1      	cbz	r1, 92f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f0>
    927a:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    927e:	bf00      	nop
    9280:	f8a4 01f2 	strh.w	r0, [r4, #498]	; 0x1f2
    9284:	f894 21f4 	ldrb.w	r2, [r4, #500]	; 0x1f4
    9288:	1c40      	adds	r0, r0, #1
    928a:	4342      	muls	r2, r0
    928c:	428a      	cmp	r2, r1
    928e:	d20e      	bcs.n	92ae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    9290:	7aa8      	ldrb	r0, [r5, #10]
    9292:	b160      	cbz	r0, 92ae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    9294:	72ae      	strb	r6, [r5, #10]
    9296:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    929a:	1c40      	adds	r0, r0, #1
    929c:	f8a4 01f2 	strh.w	r0, [r4, #498]	; 0x1f2
    92a0:	f7fe fce4 	bl	7c6c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    92a4:	f000 0007 	and.w	r0, r0, #7
    92a8:	1c40      	adds	r0, r0, #1
    92aa:	f884 01f4 	strb.w	r0, [r4, #500]	; 0x1f4
    92ae:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    92b2:	4629      	mov	r1, r5
    92b4:	f007 f908 	bl	104c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
    92b8:	b340      	cbz	r0, 930c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    92ba:	e001      	b.n	92c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b8>
    92bc:	e009      	b.n	92d2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ca>
    92be:	e00b      	b.n	92d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5d0>
    92c0:	980d      	ldr	r0, [sp, #52]	; 0x34
    92c2:	f080 0001 	eor.w	r0, r0, #1
    92c6:	f884 0218 	strb.w	r0, [r4, #536]	; 0x218
    92ca:	2000      	movs	r0, #0
    92cc:	b00f      	add	sp, #60	; 0x3c
    92ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    92d2:	f240 5136 	movw	r1, #1334	; 0x536
    92d6:	e01b      	b.n	9310 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    92d8:	f1b9 0f00 	cmp.w	r9, #0
    92dc:	d1ca      	bne.n	9274 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x56c>
    92de:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    92e2:	2800      	cmp	r0, #0
    92e4:	d0e3      	beq.n	92ae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    92e6:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    92ea:	6920      	ldr	r0, [r4, #16]
    92ec:	1a41      	subs	r1, r0, r1
    92ee:	4628      	mov	r0, r5
    92f0:	f005 ff83 	bl	f1fa <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    92f4:	0400      	lsls	r0, r0, #16
    92f6:	e000      	b.n	92fa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f2>
    92f8:	e006      	b.n	9308 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    92fa:	0c00      	lsrs	r0, r0, #16
    92fc:	d0d7      	beq.n	92ae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    92fe:	9918      	ldr	r1, [sp, #96]	; 0x60
    9300:	b101      	cbz	r1, 9304 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    9302:	8008      	strh	r0, [r1, #0]
    9304:	2001      	movs	r0, #1
    9306:	e7e1      	b.n	92cc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c4>
    9308:	2000      	movs	r0, #0
    930a:	e7b9      	b.n	9280 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x578>
    930c:	f240 5194 	movw	r1, #1428	; 0x594
    9310:	2030      	movs	r0, #48	; 0x30
    9312:	f7fc f95d 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9316:	0000      	.short	0x0000
    9318:	2000014c 	.word	0x2000014c
    931c:	b570      	push	{r4, r5, r6, lr}
    931e:	4604      	mov	r4, r0
    9320:	f004 fa55 	bl	d7ce <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    9324:	2864      	cmp	r0, #100	; 0x64
    9326:	d901      	bls.n	932c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x624>
    9328:	4605      	mov	r5, r0
    932a:	e000      	b.n	932e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x626>
    932c:	2564      	movs	r5, #100	; 0x64
    932e:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    9332:	2128      	movs	r1, #40	; 0x28
    9334:	f006 ffb6 	bl	102a4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    9338:	4428      	add	r0, r5
    933a:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    933e:	f500 7010 	add.w	r0, r0, #576	; 0x240
    9342:	180e      	adds	r6, r1, r0
    9344:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    9348:	2128      	movs	r1, #40	; 0x28
    934a:	f006 ffab 	bl	102a4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    934e:	f500 7229 	add.w	r2, r0, #676	; 0x2a4
    9352:	4620      	mov	r0, r4
    9354:	6b21      	ldr	r1, [r4, #48]	; 0x30
    9356:	f006 fb63 	bl	fa20 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    935a:	4605      	mov	r5, r0
    935c:	4632      	mov	r2, r6
    935e:	4620      	mov	r0, r4
    9360:	6921      	ldr	r1, [r4, #16]
    9362:	f006 fb5d 	bl	fa20 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    9366:	4907      	ldr	r1, [pc, #28]	; (9384 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x67c>)
    9368:	4285      	cmp	r5, r0
    936a:	6088      	str	r0, [r1, #8]
    936c:	d200      	bcs.n	9370 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x668>
    936e:	4628      	mov	r0, r5
    9370:	6048      	str	r0, [r1, #4]
    9372:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
    9376:	f2a0 1069 	subw	r0, r0, #361	; 0x169
    937a:	60c8      	str	r0, [r1, #12]
    937c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9380:	f7fa bc94 	b.w	3cac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9384:	2000014c 	.word	0x2000014c

00009388 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    9388:	4806      	ldr	r0, [pc, #24]	; (93a4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    938a:	4905      	ldr	r1, [pc, #20]	; (93a0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    938c:	6501      	str	r1, [r0, #80]	; 0x50
    938e:	4906      	ldr	r1, [pc, #24]	; (93a8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    9390:	6541      	str	r1, [r0, #84]	; 0x54
    9392:	4807      	ldr	r0, [pc, #28]	; (93b0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    9394:	4905      	ldr	r1, [pc, #20]	; (93ac <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    9396:	6501      	str	r1, [r0, #80]	; 0x50
    9398:	4906      	ldr	r1, [pc, #24]	; (93b4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    939a:	6541      	str	r1, [r0, #84]	; 0x54
    939c:	4770      	bx	lr
    939e:	0000      	.short	0x0000
    93a0:	0000a7a9 	.word	0x0000a7a9
    93a4:	2000017c 	.word	0x2000017c
    93a8:	0000a88d 	.word	0x0000a88d
    93ac:	0000af49 	.word	0x0000af49
    93b0:	20000214 	.word	0x20000214
    93b4:	0000af79 	.word	0x0000af79

000093b8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    93b8:	481e      	ldr	r0, [pc, #120]	; (9434 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    93ba:	491d      	ldr	r1, [pc, #116]	; (9430 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    93bc:	6081      	str	r1, [r0, #8]
    93be:	491e      	ldr	r1, [pc, #120]	; (9438 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    93c0:	6041      	str	r1, [r0, #4]
    93c2:	491e      	ldr	r1, [pc, #120]	; (943c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    93c4:	6001      	str	r1, [r0, #0]
    93c6:	491e      	ldr	r1, [pc, #120]	; (9440 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    93c8:	6281      	str	r1, [r0, #40]	; 0x28
    93ca:	491e      	ldr	r1, [pc, #120]	; (9444 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    93cc:	62c1      	str	r1, [r0, #44]	; 0x2c
    93ce:	491e      	ldr	r1, [pc, #120]	; (9448 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    93d0:	60c1      	str	r1, [r0, #12]
    93d2:	491e      	ldr	r1, [pc, #120]	; (944c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    93d4:	6181      	str	r1, [r0, #24]
    93d6:	491e      	ldr	r1, [pc, #120]	; (9450 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    93d8:	6301      	str	r1, [r0, #48]	; 0x30
    93da:	491e      	ldr	r1, [pc, #120]	; (9454 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    93dc:	6201      	str	r1, [r0, #32]
    93de:	491e      	ldr	r1, [pc, #120]	; (9458 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    93e0:	64c1      	str	r1, [r0, #76]	; 0x4c
    93e2:	491e      	ldr	r1, [pc, #120]	; (945c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    93e4:	6481      	str	r1, [r0, #72]	; 0x48
    93e6:	491e      	ldr	r1, [pc, #120]	; (9460 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    93e8:	6441      	str	r1, [r0, #68]	; 0x44
    93ea:	491e      	ldr	r1, [pc, #120]	; (9464 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    93ec:	6341      	str	r1, [r0, #52]	; 0x34
    93ee:	491e      	ldr	r1, [pc, #120]	; (9468 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    93f0:	61c1      	str	r1, [r0, #28]
    93f2:	491e      	ldr	r1, [pc, #120]	; (946c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    93f4:	6241      	str	r1, [r0, #36]	; 0x24
    93f6:	481f      	ldr	r0, [pc, #124]	; (9474 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    93f8:	491d      	ldr	r1, [pc, #116]	; (9470 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    93fa:	6081      	str	r1, [r0, #8]
    93fc:	491e      	ldr	r1, [pc, #120]	; (9478 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    93fe:	61c1      	str	r1, [r0, #28]
    9400:	491e      	ldr	r1, [pc, #120]	; (947c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    9402:	6241      	str	r1, [r0, #36]	; 0x24
    9404:	491e      	ldr	r1, [pc, #120]	; (9480 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    9406:	62c1      	str	r1, [r0, #44]	; 0x2c
    9408:	491e      	ldr	r1, [pc, #120]	; (9484 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    940a:	6101      	str	r1, [r0, #16]
    940c:	491e      	ldr	r1, [pc, #120]	; (9488 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    940e:	6141      	str	r1, [r0, #20]
    9410:	491e      	ldr	r1, [pc, #120]	; (948c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    9412:	6441      	str	r1, [r0, #68]	; 0x44
    9414:	491e      	ldr	r1, [pc, #120]	; (9490 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    9416:	6341      	str	r1, [r0, #52]	; 0x34
    9418:	491e      	ldr	r1, [pc, #120]	; (9494 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    941a:	6181      	str	r1, [r0, #24]
    941c:	491e      	ldr	r1, [pc, #120]	; (9498 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    941e:	6301      	str	r1, [r0, #48]	; 0x30
    9420:	491e      	ldr	r1, [pc, #120]	; (949c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    9422:	6481      	str	r1, [r0, #72]	; 0x48
    9424:	491e      	ldr	r1, [pc, #120]	; (94a0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    9426:	64c1      	str	r1, [r0, #76]	; 0x4c
    9428:	491e      	ldr	r1, [pc, #120]	; (94a4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    942a:	6381      	str	r1, [r0, #56]	; 0x38
    942c:	4770      	bx	lr
    942e:	0000      	.short	0x0000
    9430:	0000ac75 	.word	0x0000ac75
    9434:	2000017c 	.word	0x2000017c
    9438:	0000a4cd 	.word	0x0000a4cd
    943c:	0000a531 	.word	0x0000a531
    9440:	0000a961 	.word	0x0000a961
    9444:	0000a9a5 	.word	0x0000a9a5
    9448:	0000a5e5 	.word	0x0000a5e5
    944c:	0000ac4d 	.word	0x0000ac4d
    9450:	0000ad85 	.word	0x0000ad85
    9454:	0000a69d 	.word	0x0000a69d
    9458:	0000a931 	.word	0x0000a931
    945c:	0000a905 	.word	0x0000a905
    9460:	0000abf5 	.word	0x0000abf5
    9464:	0000ac25 	.word	0x0000ac25
    9468:	0000acad 	.word	0x0000acad
    946c:	0000a6f1 	.word	0x0000a6f1
    9470:	0000b1a1 	.word	0x0000b1a1
    9474:	20000214 	.word	0x20000214
    9478:	0000b1c9 	.word	0x0000b1c9
    947c:	0000af19 	.word	0x0000af19
    9480:	0000aff1 	.word	0x0000aff1
    9484:	0000aeed 	.word	0x0000aeed
    9488:	0000b0f5 	.word	0x0000b0f5
    948c:	0000b075 	.word	0x0000b075
    9490:	0000b0a1 	.word	0x0000b0a1
    9494:	0000b119 	.word	0x0000b119
    9498:	0000b225 	.word	0x0000b225
    949c:	0000afa9 	.word	0x0000afa9
    94a0:	0000afd9 	.word	0x0000afd9
    94a4:	0000b0c5 	.word	0x0000b0c5

000094a8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    94a8:	4806      	ldr	r0, [pc, #24]	; (94c4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    94aa:	4905      	ldr	r1, [pc, #20]	; (94c0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    94ac:	6581      	str	r1, [r0, #88]	; 0x58
    94ae:	4906      	ldr	r1, [pc, #24]	; (94c8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    94b0:	6601      	str	r1, [r0, #96]	; 0x60
    94b2:	4807      	ldr	r0, [pc, #28]	; (94d0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    94b4:	4905      	ldr	r1, [pc, #20]	; (94cc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    94b6:	6581      	str	r1, [r0, #88]	; 0x58
    94b8:	4906      	ldr	r1, [pc, #24]	; (94d4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    94ba:	65c1      	str	r1, [r0, #92]	; 0x5c
    94bc:	4770      	bx	lr
    94be:	0000      	.short	0x0000
    94c0:	0000a9c5 	.word	0x0000a9c5
    94c4:	2000017c 	.word	0x2000017c
    94c8:	0000aaa5 	.word	0x0000aaa5
    94cc:	0000b01d 	.word	0x0000b01d
    94d0:	20000214 	.word	0x20000214
    94d4:	0000b04d 	.word	0x0000b04d

000094d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    94d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    94da:	4c7c      	ldr	r4, [pc, #496]	; (96cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    94dc:	2101      	movs	r1, #1
    94de:	f1a4 0610 	sub.w	r6, r4, #16
    94e2:	7021      	strb	r1, [r4, #0]
    94e4:	2500      	movs	r5, #0
    94e6:	6060      	str	r0, [r4, #4]
    94e8:	8075      	strh	r5, [r6, #2]
    94ea:	7075      	strb	r5, [r6, #1]
    94ec:	7035      	strb	r5, [r6, #0]
    94ee:	f880 11d3 	strb.w	r1, [r0, #467]	; 0x1d3
    94f2:	8800      	ldrh	r0, [r0, #0]
    94f4:	f7fc fcaa 	bl	5e4c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    94f8:	b180      	cbz	r0, 951c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    94fa:	6860      	ldr	r0, [r4, #4]
    94fc:	8800      	ldrh	r0, [r0, #0]
    94fe:	f7fc fef9 	bl	62f4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    9502:	6860      	ldr	r0, [r4, #4]
    9504:	8800      	ldrh	r0, [r0, #0]
    9506:	f7fc fe9d 	bl	6244 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    950a:	6860      	ldr	r0, [r4, #4]
    950c:	f8b0 11ca 	ldrh.w	r1, [r0, #458]	; 0x1ca
    9510:	b1c9      	cbz	r1, 9546 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    9512:	3078      	adds	r0, #120	; 0x78
    9514:	f007 fa61 	bl	109da <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9518:	b118      	cbz	r0, 9522 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    951a:	e014      	b.n	9546 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    951c:	f640 3166 	movw	r1, #2918	; 0xb66
    9520:	e06c      	b.n	95fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    9522:	6860      	ldr	r0, [r4, #4]
    9524:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    9528:	f88d 1000 	strb.w	r1, [sp]
    952c:	9900      	ldr	r1, [sp, #0]
    952e:	9100      	str	r1, [sp, #0]
    9530:	f89d 1000 	ldrb.w	r1, [sp]
    9534:	b139      	cbz	r1, 9546 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    9536:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    953a:	2301      	movs	r3, #1
    953c:	4619      	mov	r1, r3
    953e:	3078      	adds	r0, #120	; 0x78
    9540:	f005 fda1 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9544:	b180      	cbz	r0, 9568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    9546:	6860      	ldr	r0, [r4, #4]
    9548:	3078      	adds	r0, #120	; 0x78
    954a:	f007 fa46 	bl	109da <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    954e:	b128      	cbz	r0, 955c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    9550:	6860      	ldr	r0, [r4, #4]
    9552:	f890 010c 	ldrb.w	r0, [r0, #268]	; 0x10c
    9556:	bf00      	nop
    9558:	f000 fbb2 	bl	9cc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>
    955c:	6860      	ldr	r0, [r4, #4]
    955e:	f890 11d5 	ldrb.w	r1, [r0, #469]	; 0x1d5
    9562:	b189      	cbz	r1, 9588 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    9564:	80b5      	strh	r5, [r6, #4]
    9566:	e01e      	b.n	95a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    9568:	6860      	ldr	r0, [r4, #4]
    956a:	f8a0 50b8 	strh.w	r5, [r0, #184]	; 0xb8
    956e:	f890 1119 	ldrb.w	r1, [r0, #281]	; 0x119
    9572:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    9576:	2100      	movs	r1, #0
    9578:	2002      	movs	r0, #2
    957a:	f000 fe53 	bl	a224 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    957e:	6860      	ldr	r0, [r4, #4]
    9580:	f880 51d2 	strb.w	r5, [r0, #466]	; 0x1d2
    9584:	2002      	movs	r0, #2
    9586:	e7e7      	b.n	9558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    9588:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    958c:	f88d 1000 	strb.w	r1, [sp]
    9590:	9900      	ldr	r1, [sp, #0]
    9592:	9100      	str	r1, [sp, #0]
    9594:	f89d 1000 	ldrb.w	r1, [sp]
    9598:	b919      	cbnz	r1, 95a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    959a:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    959c:	8b02      	ldrh	r2, [r0, #24]
    959e:	4291      	cmp	r1, r2
    95a0:	d800      	bhi.n	95a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    95a2:	8b01      	ldrh	r1, [r0, #24]
    95a4:	80b1      	strh	r1, [r6, #4]
    95a6:	f8b0 11ce 	ldrh.w	r1, [r0, #462]	; 0x1ce
    95aa:	1e49      	subs	r1, r1, #1
    95ac:	b28f      	uxth	r7, r1
    95ae:	f8b0 11d0 	ldrh.w	r1, [r0, #464]	; 0x1d0
    95b2:	4439      	add	r1, r7
    95b4:	f8a0 11d0 	strh.w	r1, [r0, #464]	; 0x1d0
    95b8:	f830 1fb4 	ldrh.w	r1, [r0, #180]!
    95bc:	4439      	add	r1, r7
    95be:	8001      	strh	r1, [r0, #0]
    95c0:	f001 fe5e 	bl	b280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da8>
    95c4:	b120      	cbz	r0, 95d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    95c6:	6860      	ldr	r0, [r4, #4]
    95c8:	f850 1fa8 	ldr.w	r1, [r0, #168]!
    95cc:	4439      	add	r1, r7
    95ce:	6001      	str	r1, [r0, #0]
    95d0:	6861      	ldr	r1, [r4, #4]
    95d2:	f8b1 01ca 	ldrh.w	r0, [r1, #458]	; 0x1ca
    95d6:	2801      	cmp	r0, #1
    95d8:	d802      	bhi.n	95e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    95da:	1c40      	adds	r0, r0, #1
    95dc:	f8a1 01ca 	strh.w	r0, [r1, #458]	; 0x1ca
    95e0:	b10f      	cbz	r7, 95e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    95e2:	f881 51dc 	strb.w	r5, [r1, #476]	; 0x1dc
    95e6:	f881 51d2 	strb.w	r5, [r1, #466]	; 0x1d2
    95ea:	f8b1 21ce 	ldrh.w	r2, [r1, #462]	; 0x1ce
    95ee:	f101 0078 	add.w	r0, r1, #120	; 0x78
    95f2:	f005 fedc 	bl	f3ae <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    95f6:	b120      	cbz	r0, 9602 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    95f8:	f640 31ad 	movw	r1, #2989	; 0xbad
    95fc:	2031      	movs	r0, #49	; 0x31
    95fe:	f7fb ffe7 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9602:	6860      	ldr	r0, [r4, #4]
    9604:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9608:	290b      	cmp	r1, #11
    960a:	d001      	beq.n	9610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    960c:	290c      	cmp	r1, #12
    960e:	d119      	bne.n	9644 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    9610:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
    9614:	f8b0 3274 	ldrh.w	r3, [r0, #628]	; 0x274
    9618:	1ad2      	subs	r2, r2, r3
    961a:	b212      	sxth	r2, r2
    961c:	2a00      	cmp	r2, #0
    961e:	db11      	blt.n	9644 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    9620:	f8d0 1276 	ldr.w	r1, [r0, #630]	; 0x276
    9624:	f8c0 108f 	str.w	r1, [r0, #143]	; 0x8f
    9628:	f890 127a 	ldrb.w	r1, [r0, #634]	; 0x27a
    962c:	f880 1093 	strb.w	r1, [r0, #147]	; 0x93
    9630:	2103      	movs	r1, #3
    9632:	f7fd fedd 	bl	73f0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    9636:	6860      	ldr	r0, [r4, #4]
    9638:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    963c:	21ff      	movs	r1, #255	; 0xff
    963e:	f880 10dc 	strb.w	r1, [r0, #220]	; 0xdc
    9642:	e026      	b.n	9692 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    9644:	2924      	cmp	r1, #36	; 0x24
    9646:	d111      	bne.n	966c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    9648:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    964c:	f8b0 2274 	ldrh.w	r2, [r0, #628]	; 0x274
    9650:	1a89      	subs	r1, r1, r2
    9652:	b209      	sxth	r1, r1
    9654:	2900      	cmp	r1, #0
    9656:	db09      	blt.n	966c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    9658:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    965c:	f000 fe9c 	bl	a398 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec0>
    9660:	2800      	cmp	r0, #0
    9662:	6860      	ldr	r0, [r4, #4]
    9664:	f880 5124 	strb.w	r5, [r0, #292]	; 0x124
    9668:	d029      	beq.n	96be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    966a:	e012      	b.n	9692 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    966c:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9670:	2924      	cmp	r1, #36	; 0x24
    9672:	d001      	beq.n	9678 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    9674:	2925      	cmp	r1, #37	; 0x25
    9676:	d10c      	bne.n	9692 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    9678:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    967c:	f8b0 2274 	ldrh.w	r2, [r0, #628]	; 0x274
    9680:	1a89      	subs	r1, r1, r2
    9682:	b209      	sxth	r1, r1
    9684:	2900      	cmp	r1, #0
    9686:	db04      	blt.n	9692 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    9688:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    968c:	f000 fe84 	bl	a398 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec0>
    9690:	b1a8      	cbz	r0, 96be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    9692:	480f      	ldr	r0, [pc, #60]	; (96d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    9694:	9000      	str	r0, [sp, #0]
    9696:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    969a:	4b0e      	ldr	r3, [pc, #56]	; (96d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    969c:	4a0e      	ldr	r2, [pc, #56]	; (96d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    969e:	f7fc fec1 	bl	6424 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    96a2:	6860      	ldr	r0, [r4, #4]
    96a4:	2301      	movs	r3, #1
    96a6:	2105      	movs	r1, #5
    96a8:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    96ac:	3078      	adds	r0, #120	; 0x78
    96ae:	f005 fcea 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    96b2:	2800      	cmp	r0, #0
    96b4:	d009      	beq.n	96ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    96b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    96ba:	f7fc bead 	b.w	6418 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    96be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    96c2:	2100      	movs	r1, #0
    96c4:	4608      	mov	r0, r1
    96c6:	f000 bbd9 	b.w	9e7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a4>
    96ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    96cc:	20000174 	.word	0x20000174
    96d0:	00009e7d 	.word	0x00009e7d
    96d4:	0000999d 	.word	0x0000999d
    96d8:	0000a2e5 	.word	0x0000a2e5
    96dc:	4804      	ldr	r0, [pc, #16]	; (96f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>)
    96de:	2100      	movs	r1, #0
    96e0:	6840      	ldr	r0, [r0, #4]
    96e2:	f820 1fc0 	strh.w	r1, [r0, #192]!
    96e6:	7881      	ldrb	r1, [r0, #2]
    96e8:	1c49      	adds	r1, r1, #1
    96ea:	7081      	strb	r1, [r0, #2]
    96ec:	4770      	bx	lr
    96ee:	0000      	.short	0x0000
    96f0:	20000174 	.word	0x20000174
    96f4:	4807      	ldr	r0, [pc, #28]	; (9714 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>)
    96f6:	b510      	push	{r4, lr}
    96f8:	6841      	ldr	r1, [r0, #4]
    96fa:	f811 0fc2 	ldrb.w	r0, [r1, #194]!
    96fe:	1e40      	subs	r0, r0, #1
    9700:	b240      	sxtb	r0, r0
    9702:	7008      	strb	r0, [r1, #0]
    9704:	2800      	cmp	r0, #0
    9706:	da04      	bge.n	9712 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    9708:	f240 118d 	movw	r1, #397	; 0x18d
    970c:	2031      	movs	r0, #49	; 0x31
    970e:	f7fb ff5f 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9712:	bd10      	pop	{r4, pc}
    9714:	20000174 	.word	0x20000174
    9718:	491d      	ldr	r1, [pc, #116]	; (9790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    971a:	b508      	push	{r3, lr}
    971c:	6849      	ldr	r1, [r1, #4]
    971e:	f891 2086 	ldrb.w	r2, [r1, #134]	; 0x86
    9722:	b1b8      	cbz	r0, 9754 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>
    9724:	2a10      	cmp	r2, #16
    9726:	d006      	beq.n	9736 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25e>
    9728:	2a14      	cmp	r2, #20
    972a:	d007      	beq.n	973c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    972c:	2a15      	cmp	r2, #21
    972e:	d008      	beq.n	9742 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x26a>
    9730:	2a1b      	cmp	r2, #27
    9732:	d127      	bne.n	9784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    9734:	e008      	b.n	9748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x270>
    9736:	2101      	movs	r1, #1
    9738:	200b      	movs	r0, #11
    973a:	e007      	b.n	974c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x274>
    973c:	f001 fb88 	bl	ae50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    9740:	e006      	b.n	9750 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x278>
    9742:	f000 fd8d 	bl	a260 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd88>
    9746:	e003      	b.n	9750 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x278>
    9748:	2101      	movs	r1, #1
    974a:	2006      	movs	r0, #6
    974c:	f000 fd6a 	bl	a224 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9750:	2001      	movs	r0, #1
    9752:	bd08      	pop	{r3, pc}
    9754:	2a21      	cmp	r2, #33	; 0x21
    9756:	d004      	beq.n	9762 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28a>
    9758:	2a28      	cmp	r2, #40	; 0x28
    975a:	d113      	bne.n	9784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    975c:	2101      	movs	r1, #1
    975e:	2011      	movs	r0, #17
    9760:	e7f4      	b.n	974c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x274>
    9762:	f891 0124 	ldrb.w	r0, [r1, #292]	; 0x124
    9766:	2802      	cmp	r0, #2
    9768:	d00e      	beq.n	9788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b0>
    976a:	f891 0124 	ldrb.w	r0, [r1, #292]	; 0x124
    976e:	2801      	cmp	r0, #1
    9770:	d108      	bne.n	9784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    9772:	f891 0125 	ldrb.w	r0, [r1, #293]	; 0x125
    9776:	f88d 0000 	strb.w	r0, [sp]
    977a:	9800      	ldr	r0, [sp, #0]
    977c:	9000      	str	r0, [sp, #0]
    977e:	f89d 0000 	ldrb.w	r0, [sp]
    9782:	b108      	cbz	r0, 9788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b0>
    9784:	2000      	movs	r0, #0
    9786:	bd08      	pop	{r3, pc}
    9788:	2101      	movs	r1, #1
    978a:	2017      	movs	r0, #23
    978c:	e7de      	b.n	974c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x274>
    978e:	0000      	.short	0x0000
    9790:	20000174 	.word	0x20000174
    9794:	b538      	push	{r3, r4, r5, lr}
    9796:	2800      	cmp	r0, #0
    9798:	d16d      	bne.n	9876 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    979a:	4c38      	ldr	r4, [pc, #224]	; (987c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a4>)
    979c:	6860      	ldr	r0, [r4, #4]
    979e:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    97a2:	07ca      	lsls	r2, r1, #31
    97a4:	d002      	beq.n	97ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2d4>
    97a6:	2101      	movs	r1, #1
    97a8:	2009      	movs	r0, #9
    97aa:	e05d      	b.n	9868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    97ac:	078a      	lsls	r2, r1, #30
    97ae:	d50a      	bpl.n	97c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    97b0:	2101      	movs	r1, #1
    97b2:	200c      	movs	r0, #12
    97b4:	f000 fd36 	bl	a224 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    97b8:	6860      	ldr	r0, [r4, #4]
    97ba:	f810 1fc5 	ldrb.w	r1, [r0, #197]!
    97be:	f041 0101 	orr.w	r1, r1, #1
    97c2:	7001      	strb	r1, [r0, #0]
    97c4:	e052      	b.n	986c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>
    97c6:	074a      	lsls	r2, r1, #29
    97c8:	d502      	bpl.n	97d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    97ca:	2101      	movs	r1, #1
    97cc:	2013      	movs	r0, #19
    97ce:	e04b      	b.n	9868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    97d0:	070a      	lsls	r2, r1, #28
    97d2:	d506      	bpl.n	97e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30a>
    97d4:	f890 1108 	ldrb.w	r1, [r0, #264]	; 0x108
    97d8:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    97dc:	2101      	movs	r1, #1
    97de:	2007      	movs	r0, #7
    97e0:	e042      	b.n	9868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    97e2:	f011 0f30 	tst.w	r1, #48	; 0x30
    97e6:	d046      	beq.n	9876 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    97e8:	f890 111b 	ldrb.w	r1, [r0, #283]	; 0x11b
    97ec:	f88d 1000 	strb.w	r1, [sp]
    97f0:	9900      	ldr	r1, [sp, #0]
    97f2:	9100      	str	r1, [sp, #0]
    97f4:	f89d 1000 	ldrb.w	r1, [sp]
    97f8:	bbd1      	cbnz	r1, 9870 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x398>
    97fa:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
    97fe:	2500      	movs	r5, #0
    9800:	f88d 1000 	strb.w	r1, [sp]
    9804:	9900      	ldr	r1, [sp, #0]
    9806:	9100      	str	r1, [sp, #0]
    9808:	f89d 1000 	ldrb.w	r1, [sp]
    980c:	b1c1      	cbz	r1, 9840 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x368>
    980e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9812:	2924      	cmp	r1, #36	; 0x24
    9814:	d02d      	beq.n	9872 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39a>
    9816:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    981a:	2924      	cmp	r1, #36	; 0x24
    981c:	d029      	beq.n	9872 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39a>
    981e:	2300      	movs	r3, #0
    9820:	f200 2276 	addw	r2, r0, #630	; 0x276
    9824:	f500 718d 	add.w	r1, r0, #282	; 0x11a
    9828:	f006 f8ec 	bl	fa04 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    982c:	6860      	ldr	r0, [r4, #4]
    982e:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    9832:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    9836:	f041 0110 	orr.w	r1, r1, #16
    983a:	7001      	strb	r1, [r0, #0]
    983c:	f880 5093 	strb.w	r5, [r0, #147]	; 0x93
    9840:	6860      	ldr	r0, [r4, #4]
    9842:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    9846:	06c9      	lsls	r1, r1, #27
    9848:	d515      	bpl.n	9876 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    984a:	f006 f8f6 	bl	fa3a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    984e:	f000 f92b 	bl	9aa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    9852:	6861      	ldr	r1, [r4, #4]
    9854:	f101 0030 	add.w	r0, r1, #48	; 0x30
    9858:	8bc2      	ldrh	r2, [r0, #30]
    985a:	f8a1 210e 	strh.w	r2, [r1, #270]	; 0x10e
    985e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9860:	f8a1 0110 	strh.w	r0, [r1, #272]	; 0x110
    9864:	2101      	movs	r1, #1
    9866:	2015      	movs	r0, #21
    9868:	f000 fcdc 	bl	a224 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    986c:	2001      	movs	r0, #1
    986e:	bd38      	pop	{r3, r4, r5, pc}
    9870:	e001      	b.n	9876 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    9872:	2301      	movs	r3, #1
    9874:	e7d4      	b.n	9820 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    9876:	2000      	movs	r0, #0
    9878:	e7f9      	b.n	986e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x396>
    987a:	0000      	.short	0x0000
    987c:	20000174 	.word	0x20000174
    9880:	b570      	push	{r4, r5, r6, lr}
    9882:	460d      	mov	r5, r1
    9884:	4606      	mov	r6, r0
    9886:	f005 fe83 	bl	f590 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    988a:	4604      	mov	r4, r0
    988c:	4630      	mov	r0, r6
    988e:	f005 fe8b 	bl	f5a8 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    9892:	4629      	mov	r1, r5
    9894:	f000 f81e 	bl	98d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fc>
    9898:	b1b8      	cbz	r0, 98ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f2>
    989a:	4620      	mov	r0, r4
    989c:	f005 fc8d 	bl	f1ba <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    98a0:	0001      	movs	r1, r0
    98a2:	d00d      	beq.n	98c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>
    98a4:	480a      	ldr	r0, [pc, #40]	; (98d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>)
    98a6:	6840      	ldr	r0, [r0, #4]
    98a8:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    98ac:	428a      	cmp	r2, r1
    98ae:	d007      	beq.n	98c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>
    98b0:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    98b4:	2901      	cmp	r1, #1
    98b6:	d005      	beq.n	98c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ec>
    98b8:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    98bc:	4220      	tst	r0, r4
    98be:	d004      	beq.n	98ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f2>
    98c0:	2001      	movs	r0, #1
    98c2:	bd70      	pop	{r4, r5, r6, pc}
    98c4:	f890 0127 	ldrb.w	r0, [r0, #295]	; 0x127
    98c8:	e7f8      	b.n	98bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e4>
    98ca:	2000      	movs	r0, #0
    98cc:	bd70      	pop	{r4, r5, r6, pc}
    98ce:	0000      	.short	0x0000
    98d0:	20000174 	.word	0x20000174
    98d4:	b570      	push	{r4, r5, r6, lr}
    98d6:	460d      	mov	r5, r1
    98d8:	4604      	mov	r4, r0
    98da:	f005 fc6e 	bl	f1ba <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    98de:	b350      	cbz	r0, 9936 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    98e0:	4916      	ldr	r1, [pc, #88]	; (993c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x464>)
    98e2:	6849      	ldr	r1, [r1, #4]
    98e4:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
    98e8:	4282      	cmp	r2, r0
    98ea:	d024      	beq.n	9936 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    98ec:	f891 3124 	ldrb.w	r3, [r1, #292]	; 0x124
    98f0:	2b01      	cmp	r3, #1
    98f2:	d005      	beq.n	9900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x428>
    98f4:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
    98f8:	4223      	tst	r3, r4
    98fa:	d013      	beq.n	9924 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44c>
    98fc:	b11d      	cbz	r5, 9906 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    98fe:	e01a      	b.n	9936 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    9900:	f891 3126 	ldrb.w	r3, [r1, #294]	; 0x126
    9904:	e7f8      	b.n	98f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    9906:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    990a:	4221      	tst	r1, r4
    990c:	d113      	bne.n	9936 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    990e:	b15a      	cbz	r2, 9928 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x450>
    9910:	2a04      	cmp	r2, #4
    9912:	d00e      	beq.n	9932 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    9914:	2804      	cmp	r0, #4
    9916:	d00c      	beq.n	9932 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    9918:	2a08      	cmp	r2, #8
    991a:	d00a      	beq.n	9932 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    991c:	2808      	cmp	r0, #8
    991e:	d008      	beq.n	9932 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    9920:	4282      	cmp	r2, r0
    9922:	d908      	bls.n	9936 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    9924:	2000      	movs	r0, #0
    9926:	bd70      	pop	{r4, r5, r6, pc}
    9928:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    992c:	2006      	movs	r0, #6
    992e:	f7fb fe4f 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9932:	4282      	cmp	r2, r0
    9934:	d3f6      	bcc.n	9924 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44c>
    9936:	2001      	movs	r0, #1
    9938:	bd70      	pop	{r4, r5, r6, pc}
    993a:	0000      	.short	0x0000
    993c:	20000174 	.word	0x20000174
    9940:	b510      	push	{r4, lr}
    9942:	4c10      	ldr	r4, [pc, #64]	; (9984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ac>)
    9944:	2301      	movs	r3, #1
    9946:	2100      	movs	r1, #0
    9948:	6860      	ldr	r0, [r4, #4]
    994a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    994e:	3078      	adds	r0, #120	; 0x78
    9950:	f005 fb99 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9954:	b140      	cbz	r0, 9968 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x490>
    9956:	6860      	ldr	r0, [r4, #4]
    9958:	2301      	movs	r3, #1
    995a:	2104      	movs	r1, #4
    995c:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9960:	3078      	adds	r0, #120	; 0x78
    9962:	f005 fb90 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9966:	b108      	cbz	r0, 996c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x494>
    9968:	2000      	movs	r0, #0
    996a:	bd10      	pop	{r4, pc}
    996c:	6860      	ldr	r0, [r4, #4]
    996e:	f890 00b2 	ldrb.w	r0, [r0, #178]	; 0xb2
    9972:	2800      	cmp	r0, #0
    9974:	d0f9      	beq.n	996a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    9976:	2100      	movs	r1, #0
    9978:	2012      	movs	r0, #18
    997a:	f000 fc53 	bl	a224 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    997e:	2001      	movs	r0, #1
    9980:	bd10      	pop	{r4, pc}
    9982:	0000      	.short	0x0000
    9984:	20000174 	.word	0x20000174
    9988:	4903      	ldr	r1, [pc, #12]	; (9998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c0>)
    998a:	2000      	movs	r0, #0
    998c:	6849      	ldr	r1, [r1, #4]
    998e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9992:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    9996:	4770      	bx	lr
    9998:	20000174 	.word	0x20000174
    999c:	490d      	ldr	r1, [pc, #52]	; (99d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4fc>)
    999e:	4602      	mov	r2, r0
    99a0:	7848      	ldrb	r0, [r1, #1]
    99a2:	b9a0      	cbnz	r0, 99ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f6>
    99a4:	f101 0010 	add.w	r0, r1, #16
    99a8:	6840      	ldr	r0, [r0, #4]
    99aa:	b142      	cbz	r2, 99be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e6>
    99ac:	7889      	ldrb	r1, [r1, #2]
    99ae:	0709      	lsls	r1, r1, #28
    99b0:	d503      	bpl.n	99ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e2>
    99b2:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
    99b6:	2808      	cmp	r0, #8
    99b8:	d009      	beq.n	99ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f6>
    99ba:	2001      	movs	r0, #1
    99bc:	4770      	bx	lr
    99be:	f100 0130 	add.w	r1, r0, #48	; 0x30
    99c2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    99c4:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    99c6:	428a      	cmp	r2, r1
    99c8:	d801      	bhi.n	99ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f6>
    99ca:	f7ff b93d 	b.w	8c48 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    99ce:	2000      	movs	r0, #0
    99d0:	4770      	bx	lr
    99d2:	0000      	.short	0x0000
    99d4:	20000164 	.word	0x20000164
    99d8:	b538      	push	{r3, r4, r5, lr}
    99da:	4c32      	ldr	r4, [pc, #200]	; (9aa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>)
    99dc:	4605      	mov	r5, r0
    99de:	6860      	ldr	r0, [r4, #4]
    99e0:	3078      	adds	r0, #120	; 0x78
    99e2:	f006 fffa 	bl	109da <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    99e6:	2800      	cmp	r0, #0
    99e8:	d15b      	bne.n	9aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    99ea:	2d00      	cmp	r5, #0
    99ec:	d159      	bne.n	9aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    99ee:	6860      	ldr	r0, [r4, #4]
    99f0:	2301      	movs	r3, #1
    99f2:	4619      	mov	r1, r3
    99f4:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    99f8:	3078      	adds	r0, #120	; 0x78
    99fa:	f005 fb44 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99fe:	2800      	cmp	r0, #0
    9a00:	d14f      	bne.n	9aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9a02:	6860      	ldr	r0, [r4, #4]
    9a04:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    9a08:	f88d 1000 	strb.w	r1, [sp]
    9a0c:	9900      	ldr	r1, [sp, #0]
    9a0e:	9100      	str	r1, [sp, #0]
    9a10:	f89d 2000 	ldrb.w	r2, [sp]
    9a14:	2100      	movs	r1, #0
    9a16:	b142      	cbz	r2, 9a2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x552>
    9a18:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8
    9a1c:	f890 1119 	ldrb.w	r1, [r0, #281]	; 0x119
    9a20:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    9a24:	2100      	movs	r1, #0
    9a26:	2002      	movs	r0, #2
    9a28:	e030      	b.n	9a8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b4>
    9a2a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9a2e:	2301      	movs	r3, #1
    9a30:	2104      	movs	r1, #4
    9a32:	3078      	adds	r0, #120	; 0x78
    9a34:	f005 fb27 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a38:	4605      	mov	r5, r0
    9a3a:	f7ff feab 	bl	9794 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    9a3e:	2800      	cmp	r0, #0
    9a40:	d12f      	bne.n	9aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9a42:	4628      	mov	r0, r5
    9a44:	f7ff fe68 	bl	9718 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    9a48:	2800      	cmp	r0, #0
    9a4a:	d12a      	bne.n	9aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9a4c:	f7ff ff78 	bl	9940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x468>
    9a50:	2800      	cmp	r0, #0
    9a52:	d126      	bne.n	9aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9a54:	6860      	ldr	r0, [r4, #4]
    9a56:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9a5a:	290a      	cmp	r1, #10
    9a5c:	d01a      	beq.n	9a94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5bc>
    9a5e:	2d00      	cmp	r5, #0
    9a60:	d11f      	bne.n	9aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9a62:	f000 fb2b 	bl	a0bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbe4>
    9a66:	2800      	cmp	r0, #0
    9a68:	d11b      	bne.n	9aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9a6a:	6860      	ldr	r0, [r4, #4]
    9a6c:	2301      	movs	r3, #1
    9a6e:	2100      	movs	r1, #0
    9a70:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9a74:	3078      	adds	r0, #120	; 0x78
    9a76:	f005 fb06 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a7a:	2800      	cmp	r0, #0
    9a7c:	d011      	beq.n	9aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9a7e:	6860      	ldr	r0, [r4, #4]
    9a80:	f890 026c 	ldrb.w	r0, [r0, #620]	; 0x26c
    9a84:	2800      	cmp	r0, #0
    9a86:	d00c      	beq.n	9aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9a88:	2100      	movs	r1, #0
    9a8a:	20ff      	movs	r0, #255	; 0xff
    9a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9a90:	f000 bbc8 	b.w	a224 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9a94:	f890 1109 	ldrb.w	r1, [r0, #265]	; 0x109
    9a98:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    9a9c:	2100      	movs	r1, #0
    9a9e:	2007      	movs	r0, #7
    9aa0:	e7f4      	b.n	9a8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b4>
    9aa2:	bd38      	pop	{r3, r4, r5, pc}
    9aa4:	20000174 	.word	0x20000174
    9aa8:	480a      	ldr	r0, [pc, #40]	; (9ad4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fc>)
    9aaa:	b510      	push	{r4, lr}
    9aac:	6843      	ldr	r3, [r0, #4]
    9aae:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    9ab2:	2801      	cmp	r0, #1
    9ab4:	d00a      	beq.n	9acc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f4>
    9ab6:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    9aba:	f103 0130 	add.w	r1, r3, #48	; 0x30
    9abe:	8818      	ldrh	r0, [r3, #0]
    9ac0:	f005 ff78 	bl	f9b4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9ac8:	f7fd bf5a 	b.w	7980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9acc:	2002      	movs	r0, #2
    9ace:	f883 0064 	strb.w	r0, [r3, #100]	; 0x64
    9ad2:	bd10      	pop	{r4, pc}
    9ad4:	20000174 	.word	0x20000174
    9ad8:	b570      	push	{r4, r5, r6, lr}
    9ada:	4c24      	ldr	r4, [pc, #144]	; (9b6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x694>)
    9adc:	0006      	movs	r6, r0
    9ade:	f104 0510 	add.w	r5, r4, #16
    9ae2:	d12f      	bne.n	9b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9ae4:	f000 f8a2 	bl	9c2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x754>
    9ae8:	f000 f844 	bl	9b74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>
    9aec:	0006      	movs	r6, r0
    9aee:	d129      	bne.n	9b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9af0:	8860      	ldrh	r0, [r4, #2]
    9af2:	0741      	lsls	r1, r0, #29
    9af4:	d506      	bpl.n	9b04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    9af6:	6869      	ldr	r1, [r5, #4]
    9af8:	f891 1088 	ldrb.w	r1, [r1, #136]	; 0x88
    9afc:	2907      	cmp	r1, #7
    9afe:	d101      	bne.n	9b04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    9b00:	2101      	movs	r1, #1
    9b02:	7021      	strb	r1, [r4, #0]
    9b04:	0780      	lsls	r0, r0, #30
    9b06:	d512      	bpl.n	9b2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    9b08:	68a0      	ldr	r0, [r4, #8]
    9b0a:	78c0      	ldrb	r0, [r0, #3]
    9b0c:	2826      	cmp	r0, #38	; 0x26
    9b0e:	d205      	bcs.n	9b1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    9b10:	4917      	ldr	r1, [pc, #92]	; (9b70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>)
    9b12:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    9b16:	b109      	cbz	r1, 9b1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    9b18:	4788      	blx	r1
    9b1a:	e008      	b.n	9b2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    9b1c:	28ff      	cmp	r0, #255	; 0xff
    9b1e:	d004      	beq.n	9b2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
    9b20:	f240 71c9 	movw	r1, #1993	; 0x7c9
    9b24:	2031      	movs	r0, #49	; 0x31
    9b26:	f7fb fd53 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b2a:	f001 f9d3 	bl	aed4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19fc>
    9b2e:	78a0      	ldrb	r0, [r4, #2]
    9b30:	06c0      	lsls	r0, r0, #27
    9b32:	d507      	bpl.n	9b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9b34:	6868      	ldr	r0, [r5, #4]
    9b36:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9b3a:	290b      	cmp	r1, #11
    9b3c:	d102      	bne.n	9b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9b3e:	210c      	movs	r1, #12
    9b40:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    9b44:	7860      	ldrb	r0, [r4, #1]
    9b46:	0700      	lsls	r0, r0, #28
    9b48:	d50d      	bpl.n	9b66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x68e>
    9b4a:	6868      	ldr	r0, [r5, #4]
    9b4c:	2301      	movs	r3, #1
    9b4e:	2105      	movs	r1, #5
    9b50:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9b54:	3078      	adds	r0, #120	; 0x78
    9b56:	f005 fa96 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b5a:	b108      	cbz	r0, 9b60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x688>
    9b5c:	2608      	movs	r6, #8
    9b5e:	e002      	b.n	9b66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x68e>
    9b60:	2000      	movs	r0, #0
    9b62:	f7fc fd27 	bl	65b4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    9b66:	4630      	mov	r0, r6
    9b68:	bd70      	pop	{r4, r5, r6, pc}
    9b6a:	0000      	.short	0x0000
    9b6c:	20000164 	.word	0x20000164
    9b70:	20000214 	.word	0x20000214
    9b74:	b570      	push	{r4, r5, r6, lr}
    9b76:	4d2b      	ldr	r5, [pc, #172]	; (9c24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x74c>)
    9b78:	2000      	movs	r0, #0
    9b7a:	78a9      	ldrb	r1, [r5, #2]
    9b7c:	07c9      	lsls	r1, r1, #31
    9b7e:	d017      	beq.n	9bb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d8>
    9b80:	68e8      	ldr	r0, [r5, #12]
    9b82:	f105 0410 	add.w	r4, r5, #16
    9b86:	2301      	movs	r3, #1
    9b88:	78c6      	ldrb	r6, [r0, #3]
    9b8a:	6860      	ldr	r0, [r4, #4]
    9b8c:	2105      	movs	r1, #5
    9b8e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9b92:	3078      	adds	r0, #120	; 0x78
    9b94:	f005 fa77 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b98:	b158      	cbz	r0, 9bb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    9b9a:	1eb6      	subs	r6, r6, #2
    9b9c:	2e0a      	cmp	r6, #10
    9b9e:	d206      	bcs.n	9bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d6>
    9ba0:	e8df f006 	tbb	[pc, r6]
    9ba4:	05050707 	.word	0x05050707
    9ba8:	05050707 	.word	0x05050707
    9bac:	0707      	.short	0x0707
    9bae:	2008      	movs	r0, #8
    9bb0:	bd70      	pop	{r4, r5, r6, pc}
    9bb2:	68e8      	ldr	r0, [r5, #12]
    9bb4:	f7fd fd48 	bl	7648 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    9bb8:	b138      	cbz	r0, 9bca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f2>
    9bba:	68e8      	ldr	r0, [r5, #12]
    9bbc:	78c5      	ldrb	r5, [r0, #3]
    9bbe:	b145      	cbz	r5, 9bd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    9bc0:	2d01      	cmp	r5, #1
    9bc2:	d006      	beq.n	9bd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    9bc4:	2d16      	cmp	r5, #22
    9bc6:	d118      	bne.n	9bfa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    9bc8:	e003      	b.n	9bd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    9bca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9bce:	f000 bdd1 	b.w	a774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    9bd2:	6860      	ldr	r0, [r4, #4]
    9bd4:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9bd8:	f005 faa3 	bl	f122 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9bdc:	b168      	cbz	r0, 9bfa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    9bde:	6861      	ldr	r1, [r4, #4]
    9be0:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    9be4:	281f      	cmp	r0, #31
    9be6:	d008      	beq.n	9bfa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    9be8:	2820      	cmp	r0, #32
    9bea:	d003      	beq.n	9bf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x71c>
    9bec:	2d16      	cmp	r5, #22
    9bee:	d00c      	beq.n	9c0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x732>
    9bf0:	2002      	movs	r0, #2
    9bf2:	bd70      	pop	{r4, r5, r6, pc}
    9bf4:	2027      	movs	r0, #39	; 0x27
    9bf6:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9bfa:	2d26      	cmp	r5, #38	; 0x26
    9bfc:	d207      	bcs.n	9c0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x736>
    9bfe:	480a      	ldr	r0, [pc, #40]	; (9c28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    9c00:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    9c04:	b118      	cbz	r0, 9c0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x736>
    9c06:	4780      	blx	r0
    9c08:	e003      	b.n	9c12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73a>
    9c0a:	2020      	movs	r0, #32
    9c0c:	bd70      	pop	{r4, r5, r6, pc}
    9c0e:	f000 fdb1 	bl	a774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    9c12:	6861      	ldr	r1, [r4, #4]
    9c14:	e9f1 233a 	ldrd	r2, r3, [r1, #232]!	; 0xe8
    9c18:	1c52      	adds	r2, r2, #1
    9c1a:	f143 0300 	adc.w	r3, r3, #0
    9c1e:	e9c1 2300 	strd	r2, r3, [r1]
    9c22:	bd70      	pop	{r4, r5, r6, pc}
    9c24:	20000164 	.word	0x20000164
    9c28:	2000017c 	.word	0x2000017c
    9c2c:	b570      	push	{r4, r5, r6, lr}
    9c2e:	4e23      	ldr	r6, [pc, #140]	; (9cbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>)
    9c30:	78b0      	ldrb	r0, [r6, #2]
    9c32:	0700      	lsls	r0, r0, #28
    9c34:	d540      	bpl.n	9cb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    9c36:	f106 0410 	add.w	r4, r6, #16
    9c3a:	6860      	ldr	r0, [r4, #4]
    9c3c:	3078      	adds	r0, #120	; 0x78
    9c3e:	f006 fecc 	bl	109da <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9c42:	b148      	cbz	r0, 9c58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x780>
    9c44:	6860      	ldr	r0, [r4, #4]
    9c46:	21fe      	movs	r1, #254	; 0xfe
    9c48:	2500      	movs	r5, #0
    9c4a:	f880 110c 	strb.w	r1, [r0, #268]	; 0x10c
    9c4e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9c52:	2919      	cmp	r1, #25
    9c54:	d10c      	bne.n	9c70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x798>
    9c56:	e004      	b.n	9c62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78a>
    9c58:	f240 71d3 	movw	r1, #2003	; 0x7d3
    9c5c:	2031      	movs	r0, #49	; 0x31
    9c5e:	f7fb fcb7 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c62:	f880 50c3 	strb.w	r5, [r0, #195]	; 0xc3
    9c66:	f7ff fd45 	bl	96f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    9c6a:	6860      	ldr	r0, [r4, #4]
    9c6c:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    9c70:	6860      	ldr	r0, [r4, #4]
    9c72:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9c76:	291f      	cmp	r1, #31
    9c78:	d002      	beq.n	9c80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7a8>
    9c7a:	2929      	cmp	r1, #41	; 0x29
    9c7c:	d113      	bne.n	9ca6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    9c7e:	e00b      	b.n	9c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c0>
    9c80:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9c84:	f005 fa4d 	bl	f122 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9c88:	b108      	cbz	r0, 9c8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b6>
    9c8a:	2027      	movs	r0, #39	; 0x27
    9c8c:	e000      	b.n	9c90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b8>
    9c8e:	2020      	movs	r0, #32
    9c90:	6861      	ldr	r1, [r4, #4]
    9c92:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9c96:	e006      	b.n	9ca6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    9c98:	2101      	movs	r1, #1
    9c9a:	f880 126d 	strb.w	r1, [r0, #621]	; 0x26d
    9c9e:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9ca2:	f880 50be 	strb.w	r5, [r0, #190]	; 0xbe
    9ca6:	6860      	ldr	r0, [r4, #4]
    9ca8:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    9cac:	2908      	cmp	r1, #8
    9cae:	d103      	bne.n	9cb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    9cb0:	2102      	movs	r1, #2
    9cb2:	7031      	strb	r1, [r6, #0]
    9cb4:	f880 110c 	strb.w	r1, [r0, #268]	; 0x10c
    9cb8:	bd70      	pop	{r4, r5, r6, pc}
    9cba:	0000      	.short	0x0000
    9cbc:	20000164 	.word	0x20000164
    9cc0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    9cc2:	4606      	mov	r6, r0
    9cc4:	4668      	mov	r0, sp
    9cc6:	f7fc faff 	bl	62c8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    9cca:	b310      	cbz	r0, 9d12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x83a>
    9ccc:	2222      	movs	r2, #34	; 0x22
    9cce:	2100      	movs	r1, #0
    9cd0:	9800      	ldr	r0, [sp, #0]
    9cd2:	f003 ff59 	bl	db88 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9cd6:	2103      	movs	r1, #3
    9cd8:	9800      	ldr	r0, [sp, #0]
    9cda:	f005 fcc9 	bl	f670 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    9cde:	9800      	ldr	r0, [sp, #0]
    9ce0:	7801      	ldrb	r1, [r0, #0]
    9ce2:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    9ce6:	7001      	strb	r1, [r0, #0]
    9ce8:	4631      	mov	r1, r6
    9cea:	f7fd fcbd 	bl	7668 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    9cee:	4c62      	ldr	r4, [pc, #392]	; (9e78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a0>)
    9cf0:	f644 152f 	movw	r5, #18735	; 0x492f
    9cf4:	2e0e      	cmp	r6, #14
    9cf6:	d079      	beq.n	9dec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    9cf8:	dc0e      	bgt.n	9d18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x840>
    9cfa:	f1a6 0602 	sub.w	r6, r6, #2
    9cfe:	2e0c      	cmp	r6, #12
    9d00:	d21c      	bcs.n	9d3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x864>
    9d02:	e8df f006 	tbb	[pc, r6]
    9d06:	1b1e      	.short	0x1b1e
    9d08:	23aeae52 	.word	0x23aeae52
    9d0c:	ae1b5f1b 	.word	0xae1b5f1b
    9d10:	363c      	.short	0x363c
    9d12:	f640 210a 	movw	r1, #2570	; 0xa0a
    9d16:	e0aa      	b.n	9e6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
    9d18:	2e15      	cmp	r6, #21
    9d1a:	d068      	beq.n	9dee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x916>
    9d1c:	dc08      	bgt.n	9d30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x858>
    9d1e:	2e11      	cmp	r6, #17
    9d20:	d01a      	beq.n	9d58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x880>
    9d22:	2e12      	cmp	r6, #18
    9d24:	d017      	beq.n	9d56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87e>
    9d26:	2e13      	cmp	r6, #19
    9d28:	d015      	beq.n	9d56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87e>
    9d2a:	2e14      	cmp	r6, #20
    9d2c:	d106      	bne.n	9d3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x864>
    9d2e:	e05e      	b.n	9dee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x916>
    9d30:	2e16      	cmp	r6, #22
    9d32:	d030      	beq.n	9d96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8be>
    9d34:	2e17      	cmp	r6, #23
    9d36:	d075      	beq.n	9e24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94c>
    9d38:	2eff      	cmp	r6, #255	; 0xff
    9d3a:	d072      	beq.n	9e22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94a>
    9d3c:	f640 217b 	movw	r1, #2683	; 0xa7b
    9d40:	e095      	b.n	9e6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
    9d42:	6861      	ldr	r1, [r4, #4]
    9d44:	9800      	ldr	r0, [sp, #0]
    9d46:	f891 110e 	ldrb.w	r1, [r1, #270]	; 0x10e
    9d4a:	e016      	b.n	9d7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8a2>
    9d4c:	6860      	ldr	r0, [r4, #4]
    9d4e:	9900      	ldr	r1, [sp, #0]
    9d50:	f890 010e 	ldrb.w	r0, [r0, #270]	; 0x10e
    9d54:	7108      	strb	r0, [r1, #4]
    9d56:	e084      	b.n	9e62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9d58:	6860      	ldr	r0, [r4, #4]
    9d5a:	f890 110b 	ldrb.w	r1, [r0, #267]	; 0x10b
    9d5e:	9800      	ldr	r0, [sp, #0]
    9d60:	f005 fc62 	bl	f628 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    9d64:	6860      	ldr	r0, [r4, #4]
    9d66:	f890 110a 	ldrb.w	r1, [r0, #266]	; 0x10a
    9d6a:	9800      	ldr	r0, [sp, #0]
    9d6c:	f005 fc5e 	bl	f62c <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    9d70:	e077      	b.n	9e62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9d72:	6861      	ldr	r1, [r4, #4]
    9d74:	9800      	ldr	r0, [sp, #0]
    9d76:	f891 110a 	ldrb.w	r1, [r1, #266]	; 0x10a
    9d7a:	7101      	strb	r1, [r0, #4]
    9d7c:	e071      	b.n	9e62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9d7e:	9800      	ldr	r0, [sp, #0]
    9d80:	210c      	movs	r1, #12
    9d82:	7101      	strb	r1, [r0, #4]
    9d84:	2159      	movs	r1, #89	; 0x59
    9d86:	7141      	strb	r1, [r0, #5]
    9d88:	2100      	movs	r1, #0
    9d8a:	7181      	strb	r1, [r0, #6]
    9d8c:	21d8      	movs	r1, #216	; 0xd8
    9d8e:	71c1      	strb	r1, [r0, #7]
    9d90:	2111      	movs	r1, #17
    9d92:	7201      	strb	r1, [r0, #8]
    9d94:	e065      	b.n	9e62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9d96:	9800      	ldr	r0, [sp, #0]
    9d98:	f8d4 1004 	ldr.w	r1, [r4, #4]
    9d9c:	f891 2126 	ldrb.w	r2, [r1, #294]	; 0x126
    9da0:	7102      	strb	r2, [r0, #4]
    9da2:	f891 1127 	ldrb.w	r1, [r1, #295]	; 0x127
    9da6:	7141      	strb	r1, [r0, #5]
    9da8:	e05b      	b.n	9e62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9daa:	6861      	ldr	r1, [r4, #4]
    9dac:	9800      	ldr	r0, [sp, #0]
    9dae:	f501 71f4 	add.w	r1, r1, #488	; 0x1e8
    9db2:	f005 fc4e 	bl	f652 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    9db6:	6861      	ldr	r1, [r4, #4]
    9db8:	9800      	ldr	r0, [sp, #0]
    9dba:	f501 7182 	add.w	r1, r1, #260	; 0x104
    9dbe:	f005 fc45 	bl	f64c <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    9dc2:	e04e      	b.n	9e62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9dc4:	f001 ff54 	bl	bc70 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9dc8:	4028      	ands	r0, r5
    9dca:	f001 0106 	and.w	r1, r1, #6
    9dce:	e9cd 0101 	strd	r0, r1, [sp, #4]
    9dd2:	6861      	ldr	r1, [r4, #4]
    9dd4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9dd8:	f891 10d4 	ldrb.w	r1, [r1, #212]	; 0xd4
    9ddc:	4008      	ands	r0, r1
    9dde:	f88d 0004 	strb.w	r0, [sp, #4]
    9de2:	a901      	add	r1, sp, #4
    9de4:	9800      	ldr	r0, [sp, #0]
    9de6:	f005 fc3e 	bl	f666 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    9dea:	e03a      	b.n	9e62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9dec:	e025      	b.n	9e3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x962>
    9dee:	6860      	ldr	r0, [r4, #4]
    9df0:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
    9df4:	9800      	ldr	r0, [sp, #0]
    9df6:	f005 fc43 	bl	f680 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    9dfa:	6860      	ldr	r0, [r4, #4]
    9dfc:	f8b0 1110 	ldrh.w	r1, [r0, #272]	; 0x110
    9e00:	9800      	ldr	r0, [sp, #0]
    9e02:	f005 fc41 	bl	f688 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    9e06:	6860      	ldr	r0, [r4, #4]
    9e08:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    9e0c:	9800      	ldr	r0, [sp, #0]
    9e0e:	f005 fc3f 	bl	f690 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    9e12:	6860      	ldr	r0, [r4, #4]
    9e14:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
    9e18:	9800      	ldr	r0, [sp, #0]
    9e1a:	f005 fc3d 	bl	f698 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    9e1e:	e020      	b.n	9e62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9e20:	e000      	b.n	9e24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94c>
    9e22:	e016      	b.n	9e52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    9e24:	6861      	ldr	r1, [r4, #4]
    9e26:	f891 0124 	ldrb.w	r0, [r1, #292]	; 0x124
    9e2a:	2801      	cmp	r0, #1
    9e2c:	9800      	ldr	r0, [sp, #0]
    9e2e:	d0b5      	beq.n	9d9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c4>
    9e30:	f811 2f6a 	ldrb.w	r2, [r1, #106]!
    9e34:	7102      	strb	r2, [r0, #4]
    9e36:	7849      	ldrb	r1, [r1, #1]
    9e38:	e7b5      	b.n	9da6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8ce>
    9e3a:	f001 ff19 	bl	bc70 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9e3e:	4028      	ands	r0, r5
    9e40:	f001 0106 	and.w	r1, r1, #6
    9e44:	e9cd 0101 	strd	r0, r1, [sp, #4]
    9e48:	a901      	add	r1, sp, #4
    9e4a:	9800      	ldr	r0, [sp, #0]
    9e4c:	f005 fc06 	bl	f65c <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    9e50:	e007      	b.n	9e62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9e52:	6860      	ldr	r0, [r4, #4]
    9e54:	f890 226f 	ldrb.w	r2, [r0, #623]	; 0x26f
    9e58:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
    9e5c:	9800      	ldr	r0, [sp, #0]
    9e5e:	f005 fbe7 	bl	f630 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    9e62:	f7fc fa0b 	bl	627c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    9e66:	2800      	cmp	r0, #0
    9e68:	d104      	bne.n	9e74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x99c>
    9e6a:	f640 217f 	movw	r1, #2687	; 0xa7f
    9e6e:	2031      	movs	r0, #49	; 0x31
    9e70:	f7fb fbae 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9e74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9e76:	0000      	.short	0x0000
    9e78:	20000174 	.word	0x20000174
    9e7c:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9e80:	4e8d      	ldr	r6, [pc, #564]	; (a0b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbe0>)
    9e82:	468a      	mov	sl, r1
    9e84:	6870      	ldr	r0, [r6, #4]
    9e86:	8800      	ldrh	r0, [r0, #0]
    9e88:	f7fb ffe0 	bl	5e4c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    9e8c:	0007      	movs	r7, r0
    9e8e:	d00c      	beq.n	9eaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    9e90:	f1a6 0510 	sub.w	r5, r6, #16
    9e94:	f04f 0400 	mov.w	r4, #0
    9e98:	8868      	ldrh	r0, [r5, #2]
    9e9a:	05c0      	lsls	r0, r0, #23
    9e9c:	d50a      	bpl.n	9eb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9dc>
    9e9e:	6870      	ldr	r0, [r6, #4]
    9ea0:	f8a0 40b4 	strh.w	r4, [r0, #180]	; 0xb4
    9ea4:	f880 41dc 	strb.w	r4, [r0, #476]	; 0x1dc
    9ea8:	e009      	b.n	9ebe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e6>
    9eaa:	f640 515c 	movw	r1, #3420	; 0xd5c
    9eae:	2031      	movs	r0, #49	; 0x31
    9eb0:	f7fb fb8e 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9eb4:	6871      	ldr	r1, [r6, #4]
    9eb6:	f831 0fb4 	ldrh.w	r0, [r1, #180]!
    9eba:	1c40      	adds	r0, r0, #1
    9ebc:	8008      	strh	r0, [r1, #0]
    9ebe:	f001 f9df 	bl	b280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da8>
    9ec2:	f04f 0901 	mov.w	r9, #1
    9ec6:	b348      	cbz	r0, 9f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa44>
    9ec8:	8868      	ldrh	r0, [r5, #2]
    9eca:	0500      	lsls	r0, r0, #20
    9ecc:	d506      	bpl.n	9edc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa04>
    9ece:	6870      	ldr	r0, [r6, #4]
    9ed0:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    9ed4:	b111      	cbz	r1, 9edc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa04>
    9ed6:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
    9eda:	e01f      	b.n	9f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa44>
    9edc:	6871      	ldr	r1, [r6, #4]
    9ede:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
    9ee2:	1c40      	adds	r0, r0, #1
    9ee4:	f8c1 00a8 	str.w	r0, [r1, #168]	; 0xa8
    9ee8:	f8d1 20ac 	ldr.w	r2, [r1, #172]	; 0xac
    9eec:	4282      	cmp	r2, r0
    9eee:	d301      	bcc.n	9ef4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1c>
    9ef0:	1a13      	subs	r3, r2, r0
    9ef2:	e000      	b.n	9ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
    9ef4:	2300      	movs	r3, #0
    9ef6:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    9efa:	f10c 0c05 	add.w	ip, ip, #5
    9efe:	4563      	cmp	r3, ip
    9f00:	d801      	bhi.n	9f06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
    9f02:	f881 90b2 	strb.w	r9, [r1, #178]	; 0xb2
    9f06:	4290      	cmp	r0, r2
    9f08:	d308      	bcc.n	9f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa44>
    9f0a:	f501 709d 	add.w	r0, r1, #314	; 0x13a
    9f0e:	220c      	movs	r2, #12
    9f10:	f8c1 40a8 	str.w	r4, [r1, #168]	; 0xa8
    9f14:	f7fd fc62 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9f18:	f7fd fd32 	bl	7980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9f1c:	8868      	ldrh	r0, [r5, #2]
    9f1e:	f04f 0b02 	mov.w	fp, #2
    9f22:	f410 7f40 	tst.w	r0, #768	; 0x300
    9f26:	d00e      	beq.n	9f46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6e>
    9f28:	6870      	ldr	r0, [r6, #4]
    9f2a:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9f2e:	b111      	cbz	r1, 9f36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5e>
    9f30:	2903      	cmp	r1, #3
    9f32:	d108      	bne.n	9f46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6e>
    9f34:	e002      	b.n	9f3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa64>
    9f36:	f880 908a 	strb.w	r9, [r0, #138]	; 0x8a
    9f3a:	e001      	b.n	9f40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa68>
    9f3c:	f880 b08a 	strb.w	fp, [r0, #138]	; 0x8a
    9f40:	2101      	movs	r1, #1
    9f42:	f7fe fea7 	bl	8c94 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9f46:	6870      	ldr	r0, [r6, #4]
    9f48:	46b0      	mov	r8, r6
    9f4a:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9f4e:	2901      	cmp	r1, #1
    9f50:	d104      	bne.n	9f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa84>
    9f52:	8869      	ldrh	r1, [r5, #2]
    9f54:	0549      	lsls	r1, r1, #21
    9f56:	d501      	bpl.n	9f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa84>
    9f58:	f880 b08a 	strb.w	fp, [r0, #138]	; 0x8a
    9f5c:	9900      	ldr	r1, [sp, #0]
    9f5e:	2900      	cmp	r1, #0
    9f60:	d179      	bne.n	a056 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7e>
    9f62:	78a9      	ldrb	r1, [r5, #2]
    9f64:	0649      	lsls	r1, r1, #25
    9f66:	d502      	bpl.n	9f6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa96>
    9f68:	f8a0 41f0 	strh.w	r4, [r0, #496]	; 0x1f0
    9f6c:	e004      	b.n	9f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaa0>
    9f6e:	f8b0 11f0 	ldrh.w	r1, [r0, #496]	; 0x1f0
    9f72:	1c49      	adds	r1, r1, #1
    9f74:	f8a0 11f0 	strh.w	r1, [r0, #496]	; 0x1f0
    9f78:	4650      	mov	r0, sl
    9f7a:	f7ff fdad 	bl	9ad8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    9f7e:	ea40 000a 	orr.w	r0, r0, sl
    9f82:	4682      	mov	sl, r0
    9f84:	f7ff fd28 	bl	99d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x500>
    9f88:	f8d8 6004 	ldr.w	r6, [r8, #4]
    9f8c:	f8b6 01d0 	ldrh.w	r0, [r6, #464]	; 0x1d0
    9f90:	1c40      	adds	r0, r0, #1
    9f92:	f8a6 01d0 	strh.w	r0, [r6, #464]	; 0x1d0
    9f96:	f896 01d4 	ldrb.w	r0, [r6, #468]	; 0x1d4
    9f9a:	b128      	cbz	r0, 9fa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad0>
    9f9c:	f7fc fb76 	bl	668c <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    9fa0:	b1b0      	cbz	r0, 9fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9fa2:	f8a6 41d0 	strh.w	r4, [r6, #464]	; 0x1d0
    9fa6:	e013      	b.n	9fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9fa8:	f7fc fa10 	bl	63cc <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    9fac:	b108      	cbz	r0, 9fb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xada>
    9fae:	f8a6 41d0 	strh.w	r4, [r6, #464]	; 0x1d0
    9fb2:	f7fc fa05 	bl	63c0 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    9fb6:	b158      	cbz	r0, 9fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9fb8:	f896 01dc 	ldrb.w	r0, [r6, #476]	; 0x1dc
    9fbc:	1c40      	adds	r0, r0, #1
    9fbe:	b2c0      	uxtb	r0, r0
    9fc0:	f886 01dc 	strb.w	r0, [r6, #476]	; 0x1dc
    9fc4:	2802      	cmp	r0, #2
    9fc6:	d903      	bls.n	9fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9fc8:	f8a6 41d0 	strh.w	r4, [r6, #464]	; 0x1d0
    9fcc:	f886 41dc 	strb.w	r4, [r6, #476]	; 0x1dc
    9fd0:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9fd4:	4646      	mov	r6, r8
    9fd6:	2301      	movs	r3, #1
    9fd8:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9fdc:	2100      	movs	r1, #0
    9fde:	3078      	adds	r0, #120	; 0x78
    9fe0:	f005 f851 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9fe4:	b920      	cbnz	r0, 9ff0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb18>
    9fe6:	6870      	ldr	r0, [r6, #4]
    9fe8:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9fec:	280c      	cmp	r0, #12
    9fee:	d160      	bne.n	a0b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    9ff0:	6870      	ldr	r0, [r6, #4]
    9ff2:	2301      	movs	r3, #1
    9ff4:	2100      	movs	r1, #0
    9ff6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9ffa:	3078      	adds	r0, #120	; 0x78
    9ffc:	f005 f843 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a000:	b350      	cbz	r0, a058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    a002:	6870      	ldr	r0, [r6, #4]
    a004:	2301      	movs	r3, #1
    a006:	2100      	movs	r1, #0
    a008:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a00c:	3078      	adds	r0, #120	; 0x78
    a00e:	f005 f83a 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a012:	b308      	cbz	r0, a058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    a014:	6870      	ldr	r0, [r6, #4]
    a016:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    a01a:	2902      	cmp	r1, #2
    a01c:	d149      	bne.n	a0b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    a01e:	f890 01dc 	ldrb.w	r0, [r0, #476]	; 0x1dc
    a022:	b9c8      	cbnz	r0, a058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    a024:	4638      	mov	r0, r7
    a026:	f004 fab8 	bl	e59a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    a02a:	b1a8      	cbz	r0, a058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    a02c:	6870      	ldr	r0, [r6, #4]
    a02e:	3078      	adds	r0, #120	; 0x78
    a030:	f006 fcd3 	bl	109da <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    a034:	b980      	cbnz	r0, a058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    a036:	6871      	ldr	r1, [r6, #4]
    a038:	f8b1 01ca 	ldrh.w	r0, [r1, #458]	; 0x1ca
    a03c:	2801      	cmp	r0, #1
    a03e:	d938      	bls.n	a0b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    a040:	f881 91d2 	strb.w	r9, [r1, #466]	; 0x1d2
    a044:	f8b1 00b6 	ldrh.w	r0, [r1, #182]	; 0xb6
    a048:	f8b1 20b4 	ldrh.w	r2, [r1, #180]	; 0xb4
    a04c:	1e83      	subs	r3, r0, #2
    a04e:	429a      	cmp	r2, r3
    a050:	db03      	blt.n	a05a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb82>
    a052:	2001      	movs	r0, #1
    a054:	e004      	b.n	a060 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
    a056:	e01d      	b.n	a094 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    a058:	e02b      	b.n	a0b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    a05a:	1a80      	subs	r0, r0, r2
    a05c:	1e40      	subs	r0, r0, #1
    a05e:	b280      	uxth	r0, r0
    a060:	f8b1 21d0 	ldrh.w	r2, [r1, #464]	; 0x1d0
    a064:	88ab      	ldrh	r3, [r5, #4]
    a066:	429a      	cmp	r2, r3
    a068:	d301      	bcc.n	a06e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb96>
    a06a:	2201      	movs	r2, #1
    a06c:	e002      	b.n	a074 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb9c>
    a06e:	1a9a      	subs	r2, r3, r2
    a070:	1c52      	adds	r2, r2, #1
    a072:	b292      	uxth	r2, r2
    a074:	4290      	cmp	r0, r2
    a076:	d900      	bls.n	a07a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba2>
    a078:	4610      	mov	r0, r2
    a07a:	2801      	cmp	r0, #1
    a07c:	d102      	bne.n	a084 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbac>
    a07e:	bf00      	nop
    a080:	f881 41d2 	strb.w	r4, [r1, #466]	; 0x1d2
    a084:	6871      	ldr	r1, [r6, #4]
    a086:	f8b1 207c 	ldrh.w	r2, [r1, #124]	; 0x7c
    a08a:	4410      	add	r0, r2
    a08c:	f8a1 01cc 	strh.w	r0, [r1, #460]	; 0x1cc
    a090:	f001 f9ca 	bl	b428 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f50>
    a094:	78a8      	ldrb	r0, [r5, #2]
    a096:	4652      	mov	r2, sl
    a098:	f3c0 1180 	ubfx	r1, r0, #6, #1
    a09c:	9800      	ldr	r0, [sp, #0]
    a09e:	f001 f903 	bl	b2a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    a0a2:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a0a6:	f880 41d3 	strb.w	r4, [r0, #467]	; 0x1d3
    a0aa:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    a0ae:	f7fc b8cf 	b.w	6250 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    a0b2:	2001      	movs	r0, #1
    a0b4:	6871      	ldr	r1, [r6, #4]
    a0b6:	e7e3      	b.n	a080 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba8>
    a0b8:	20000174 	.word	0x20000174
    a0bc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a0be:	4c58      	ldr	r4, [pc, #352]	; (a220 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd48>)
    a0c0:	2301      	movs	r3, #1
    a0c2:	2100      	movs	r1, #0
    a0c4:	6860      	ldr	r0, [r4, #4]
    a0c6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a0ca:	3078      	adds	r0, #120	; 0x78
    a0cc:	f004 ffdb 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a0d0:	2800      	cmp	r0, #0
    a0d2:	d07c      	beq.n	a1ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf6>
    a0d4:	6860      	ldr	r0, [r4, #4]
    a0d6:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    a0da:	2500      	movs	r5, #0
    a0dc:	b139      	cbz	r1, a0ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc16>
    a0de:	2100      	movs	r1, #0
    a0e0:	200e      	movs	r0, #14
    a0e2:	f000 f89f 	bl	a224 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    a0e6:	6860      	ldr	r0, [r4, #4]
    a0e8:	f880 512b 	strb.w	r5, [r0, #299]	; 0x12b
    a0ec:	e096      	b.n	a21c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    a0ee:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    a0f2:	b119      	cbz	r1, a0fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc24>
    a0f4:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    a0f8:	0789      	lsls	r1, r1, #30
    a0fa:	d016      	beq.n	a12a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc52>
    a0fc:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
    a100:	f88d 1004 	strb.w	r1, [sp, #4]
    a104:	9901      	ldr	r1, [sp, #4]
    a106:	9101      	str	r1, [sp, #4]
    a108:	f89d 1004 	ldrb.w	r1, [sp, #4]
    a10c:	b141      	cbz	r1, a120 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc48>
    a10e:	f890 111b 	ldrb.w	r1, [r0, #283]	; 0x11b
    a112:	f88d 1000 	strb.w	r1, [sp]
    a116:	9900      	ldr	r1, [sp, #0]
    a118:	9100      	str	r1, [sp, #0]
    a11a:	f89d 1000 	ldrb.w	r1, [sp]
    a11e:	b189      	cbz	r1, a144 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    a120:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    a124:	2901      	cmp	r1, #1
    a126:	d030      	beq.n	a18a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcb2>
    a128:	e072      	b.n	a210 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    a12a:	2100      	movs	r1, #0
    a12c:	200c      	movs	r0, #12
    a12e:	f000 f879 	bl	a224 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    a132:	6860      	ldr	r0, [r4, #4]
    a134:	f810 1fc5 	ldrb.w	r1, [r0, #197]!
    a138:	f041 0101 	orr.w	r1, r1, #1
    a13c:	7001      	strb	r1, [r0, #0]
    a13e:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    a142:	e06b      	b.n	a21c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    a144:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a148:	2924      	cmp	r1, #36	; 0x24
    a14a:	d01c      	beq.n	a186 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcae>
    a14c:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a150:	2924      	cmp	r1, #36	; 0x24
    a152:	d018      	beq.n	a186 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcae>
    a154:	f05f 0300 	movs.w	r3, #0
    a158:	f200 2276 	addw	r2, r0, #630	; 0x276
    a15c:	f500 718d 	add.w	r1, r0, #282	; 0x11a
    a160:	f005 fc50 	bl	fa04 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    a164:	6860      	ldr	r0, [r4, #4]
    a166:	f880 511a 	strb.w	r5, [r0, #282]	; 0x11a
    a16a:	2100      	movs	r1, #0
    a16c:	2014      	movs	r0, #20
    a16e:	f000 f859 	bl	a224 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    a172:	6861      	ldr	r1, [r4, #4]
    a174:	f101 0030 	add.w	r0, r1, #48	; 0x30
    a178:	8bc2      	ldrh	r2, [r0, #30]
    a17a:	f8a1 210e 	strh.w	r2, [r1, #270]	; 0x10e
    a17e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    a180:	f8a1 0110 	strh.w	r0, [r1, #272]	; 0x110
    a184:	e04a      	b.n	a21c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    a186:	2301      	movs	r3, #1
    a188:	e7e6      	b.n	a158 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc80>
    a18a:	f890 1125 	ldrb.w	r1, [r0, #293]	; 0x125
    a18e:	f88d 1000 	strb.w	r1, [sp]
    a192:	9900      	ldr	r1, [sp, #0]
    a194:	9100      	str	r1, [sp, #0]
    a196:	f89d 1000 	ldrb.w	r1, [sp]
    a19a:	bb31      	cbnz	r1, a1ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd12>
    a19c:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a1a0:	2301      	movs	r3, #1
    a1a2:	210b      	movs	r1, #11
    a1a4:	3078      	adds	r0, #120	; 0x78
    a1a6:	f004 ff6e 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1aa:	b9f0      	cbnz	r0, a1ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd12>
    a1ac:	6860      	ldr	r0, [r4, #4]
    a1ae:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    a1b2:	f006 fc1a 	bl	109ea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    a1b6:	4605      	mov	r5, r0
    a1b8:	6860      	ldr	r0, [r4, #4]
    a1ba:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    a1be:	f006 fc14 	bl	109ea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    a1c2:	4606      	mov	r6, r0
    a1c4:	6860      	ldr	r0, [r4, #4]
    a1c6:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    a1ca:	4628      	mov	r0, r5
    a1cc:	e000      	b.n	a1d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf8>
    a1ce:	e020      	b.n	a212 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    a1d0:	f006 fc16 	bl	10a00 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    a1d4:	b150      	cbz	r0, a1ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>
    a1d6:	6860      	ldr	r0, [r4, #4]
    a1d8:	f890 1127 	ldrb.w	r1, [r0, #295]	; 0x127
    a1dc:	4630      	mov	r0, r6
    a1de:	f006 fc0f 	bl	10a00 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    a1e2:	b118      	cbz	r0, a1ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>
    a1e4:	2000      	movs	r0, #0
    a1e6:	f000 f929 	bl	a43c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a1ea:	e011      	b.n	a210 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    a1ec:	6860      	ldr	r0, [r4, #4]
    a1ee:	2301      	movs	r3, #1
    a1f0:	2103      	movs	r1, #3
    a1f2:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a1f6:	3078      	adds	r0, #120	; 0x78
    a1f8:	f004 ff45 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1fc:	b940      	cbnz	r0, a210 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    a1fe:	6860      	ldr	r0, [r4, #4]
    a200:	2301      	movs	r3, #1
    a202:	2102      	movs	r1, #2
    a204:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a208:	3078      	adds	r0, #120	; 0x78
    a20a:	f004 ff3c 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a20e:	b108      	cbz	r0, a214 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3c>
    a210:	2000      	movs	r0, #0
    a212:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a214:	2100      	movs	r1, #0
    a216:	2016      	movs	r0, #22
    a218:	f000 f804 	bl	a224 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    a21c:	2001      	movs	r0, #1
    a21e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a220:	20000174 	.word	0x20000174
    a224:	b570      	push	{r4, r5, r6, lr}
    a226:	4c0d      	ldr	r4, [pc, #52]	; (a25c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd84>)
    a228:	4606      	mov	r6, r0
    a22a:	460d      	mov	r5, r1
    a22c:	6860      	ldr	r0, [r4, #4]
    a22e:	3078      	adds	r0, #120	; 0x78
    a230:	f006 fbd3 	bl	109da <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    a234:	b120      	cbz	r0, a240 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>
    a236:	f640 2184 	movw	r1, #2692	; 0xa84
    a23a:	2031      	movs	r0, #49	; 0x31
    a23c:	f7fb f9c8 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a240:	6862      	ldr	r2, [r4, #4]
    a242:	2000      	movs	r0, #0
    a244:	f882 610c 	strb.w	r6, [r2, #268]	; 0x10c
    a248:	b115      	cbz	r5, a250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    a24a:	f8a2 00c0 	strh.w	r0, [r2, #192]	; 0xc0
    a24e:	bd70      	pop	{r4, r5, r6, pc}
    a250:	f822 0fba 	strh.w	r0, [r2, #186]!
    a254:	2001      	movs	r0, #1
    a256:	7110      	strb	r0, [r2, #4]
    a258:	bd70      	pop	{r4, r5, r6, pc}
    a25a:	0000      	.short	0x0000
    a25c:	20000174 	.word	0x20000174
    a260:	b538      	push	{r3, r4, r5, lr}
    a262:	4c1f      	ldr	r4, [pc, #124]	; (a2e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe08>)
    a264:	2500      	movs	r5, #0
    a266:	6860      	ldr	r0, [r4, #4]
    a268:	f890 1258 	ldrb.w	r1, [r0, #600]	; 0x258
    a26c:	2901      	cmp	r1, #1
    a26e:	d00a      	beq.n	a286 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    a270:	2902      	cmp	r1, #2
    a272:	d133      	bne.n	a2dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe04>
    a274:	f890 10c4 	ldrb.w	r1, [r0, #196]	; 0xc4
    a278:	b1d9      	cbz	r1, a2b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdda>
    a27a:	2106      	movs	r1, #6
    a27c:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    a280:	2101      	movs	r1, #1
    a282:	2002      	movs	r0, #2
    a284:	e025      	b.n	a2d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfa>
    a286:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a28a:	f88d 1000 	strb.w	r1, [sp]
    a28e:	9900      	ldr	r1, [sp, #0]
    a290:	9100      	str	r1, [sp, #0]
    a292:	f89d 1000 	ldrb.w	r1, [sp]
    a296:	2900      	cmp	r1, #0
    a298:	d120      	bne.n	a2dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe04>
    a29a:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
    a29e:	f500 71f0 	add.w	r1, r0, #480	; 0x1e0
    a2a2:	2200      	movs	r2, #0
    a2a4:	f200 2059 	addw	r0, r0, #601	; 0x259
    a2a8:	f004 fea5 	bl	eff6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    a2ac:	2101      	movs	r1, #1
    a2ae:	2005      	movs	r0, #5
    a2b0:	e00f      	b.n	a2d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfa>
    a2b2:	2203      	movs	r2, #3
    a2b4:	2106      	movs	r1, #6
    a2b6:	f880 210b 	strb.w	r2, [r0, #267]	; 0x10b
    a2ba:	f880 110a 	strb.w	r1, [r0, #266]	; 0x10a
    a2be:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
    a2c2:	0880      	lsrs	r0, r0, #2
    a2c4:	f010 0f01 	tst.w	r0, #1
    a2c8:	d001      	beq.n	a2ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf6>
    a2ca:	2011      	movs	r0, #17
    a2cc:	e000      	b.n	a2d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf8>
    a2ce:	200d      	movs	r0, #13
    a2d0:	2101      	movs	r1, #1
    a2d2:	f7ff ffa7 	bl	a224 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    a2d6:	6860      	ldr	r0, [r4, #4]
    a2d8:	f880 5258 	strb.w	r5, [r0, #600]	; 0x258
    a2dc:	bd38      	pop	{r3, r4, r5, pc}
    a2de:	0000      	.short	0x0000
    a2e0:	20000174 	.word	0x20000174
    a2e4:	b570      	push	{r4, r5, r6, lr}
    a2e6:	4b2b      	ldr	r3, [pc, #172]	; (a394 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xebc>)
    a2e8:	4602      	mov	r2, r0
    a2ea:	8858      	ldrh	r0, [r3, #2]
    a2ec:	4310      	orrs	r0, r2
    a2ee:	8058      	strh	r0, [r3, #2]
    a2f0:	f103 0010 	add.w	r0, r3, #16
    a2f4:	2a40      	cmp	r2, #64	; 0x40
    a2f6:	6840      	ldr	r0, [r0, #4]
    a2f8:	d00d      	beq.n	a316 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3e>
    a2fa:	0796      	lsls	r6, r2, #30
    a2fc:	f04f 0500 	mov.w	r5, #0
    a300:	f04f 0401 	mov.w	r4, #1
    a304:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    a308:	d50c      	bpl.n	a324 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    a30a:	b14e      	cbz	r6, a320 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe48>
    a30c:	f640 41c9 	movw	r1, #3273	; 0xcc9
    a310:	2031      	movs	r0, #49	; 0x31
    a312:	f7fb f95d 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a31a:	2104      	movs	r1, #4
    a31c:	f7fe bcba 	b.w	8c94 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a320:	6099      	str	r1, [r3, #8]
    a322:	e01c      	b.n	a35e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe86>
    a324:	b1c6      	cbz	r6, a358 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    a326:	60d9      	str	r1, [r3, #12]
    a328:	78c9      	ldrb	r1, [r1, #3]
    a32a:	2906      	cmp	r1, #6
    a32c:	d002      	beq.n	a334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5c>
    a32e:	290b      	cmp	r1, #11
    a330:	d112      	bne.n	a358 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    a332:	e009      	b.n	a348 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe70>
    a334:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a338:	2917      	cmp	r1, #23
    a33a:	d10d      	bne.n	a358 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    a33c:	2100      	movs	r1, #0
    a33e:	e9c0 1138 	strd	r1, r1, [r0, #224]	; 0xe0
    a342:	f880 408b 	strb.w	r4, [r0, #139]	; 0x8b
    a346:	e007      	b.n	a358 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    a348:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a34c:	2911      	cmp	r1, #17
    a34e:	d103      	bne.n	a358 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    a350:	f880 508b 	strb.w	r5, [r0, #139]	; 0x8b
    a354:	f880 40c4 	strb.w	r4, [r0, #196]	; 0xc4
    a358:	0791      	lsls	r1, r2, #30
    a35a:	d516      	bpl.n	a38a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    a35c:	6899      	ldr	r1, [r3, #8]
    a35e:	78c9      	ldrb	r1, [r1, #3]
    a360:	2905      	cmp	r1, #5
    a362:	d002      	beq.n	a36a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe92>
    a364:	290b      	cmp	r1, #11
    a366:	d110      	bne.n	a38a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    a368:	e009      	b.n	a37e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea6>
    a36a:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a36e:	2915      	cmp	r1, #21
    a370:	d10b      	bne.n	a38a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    a372:	2100      	movs	r1, #0
    a374:	e9c0 113a 	strd	r1, r1, [r0, #232]	; 0xe8
    a378:	f880 408c 	strb.w	r4, [r0, #140]	; 0x8c
    a37c:	e005      	b.n	a38a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    a37e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a382:	2910      	cmp	r1, #16
    a384:	d101      	bne.n	a38a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    a386:	f880 508c 	strb.w	r5, [r0, #140]	; 0x8c
    a38a:	0690      	lsls	r0, r2, #26
    a38c:	d501      	bpl.n	a392 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
    a38e:	2008      	movs	r0, #8
    a390:	7058      	strb	r0, [r3, #1]
    a392:	bd70      	pop	{r4, r5, r6, pc}
    a394:	20000164 	.word	0x20000164
    a398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a39c:	4c26      	ldr	r4, [pc, #152]	; (a438 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>)
    a39e:	2501      	movs	r5, #1
    a3a0:	6862      	ldr	r2, [r4, #4]
    a3a2:	f892 0276 	ldrb.w	r0, [r2, #630]	; 0x276
    a3a6:	b108      	cbz	r0, a3ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed4>
    a3a8:	2701      	movs	r7, #1
    a3aa:	e000      	b.n	a3ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed6>
    a3ac:	2700      	movs	r7, #0
    a3ae:	f892 1277 	ldrb.w	r1, [r2, #631]	; 0x277
    a3b2:	b109      	cbz	r1, a3b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee0>
    a3b4:	2601      	movs	r6, #1
    a3b6:	e000      	b.n	a3ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee2>
    a3b8:	2600      	movs	r6, #0
    a3ba:	b90f      	cbnz	r7, a3c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee8>
    a3bc:	f892 006e 	ldrb.w	r0, [r2, #110]	; 0x6e
    a3c0:	b90e      	cbnz	r6, a3c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeee>
    a3c2:	f892 106f 	ldrb.w	r1, [r2, #111]	; 0x6f
    a3c6:	f102 0366 	add.w	r3, r2, #102	; 0x66
    a3ca:	7218      	strb	r0, [r3, #8]
    a3cc:	7259      	strb	r1, [r3, #9]
    a3ce:	20ff      	movs	r0, #255	; 0xff
    a3d0:	7298      	strb	r0, [r3, #10]
    a3d2:	f892 0124 	ldrb.w	r0, [r2, #292]	; 0x124
    a3d6:	2801      	cmp	r0, #1
    a3d8:	d001      	beq.n	a3de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf06>
    a3da:	b907      	cbnz	r7, a3de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf06>
    a3dc:	b116      	cbz	r6, a3e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0c>
    a3de:	2000      	movs	r0, #0
    a3e0:	f000 f82c 	bl	a43c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a3e4:	6860      	ldr	r0, [r4, #4]
    a3e6:	3030      	adds	r0, #48	; 0x30
    a3e8:	f005 fb7d 	bl	fae6 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    a3ec:	4607      	mov	r7, r0
    a3ee:	2105      	movs	r1, #5
    a3f0:	6860      	ldr	r0, [r4, #4]
    a3f2:	f7fe fc4f 	bl	8c94 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a3f6:	6860      	ldr	r0, [r4, #4]
    a3f8:	3030      	adds	r0, #48	; 0x30
    a3fa:	f005 fb74 	bl	fae6 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    a3fe:	4606      	mov	r6, r0
    a400:	42b7      	cmp	r7, r6
    a402:	d20a      	bcs.n	a41a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf42>
    a404:	f7f8 fc3c 	bl	2c80 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    a408:	4601      	mov	r1, r0
    a40a:	1bf0      	subs	r0, r6, r7
    a40c:	2865      	cmp	r0, #101	; 0x65
    a40e:	d200      	bcs.n	a412 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf3a>
    a410:	2065      	movs	r0, #101	; 0x65
    a412:	f7f8 fb57 	bl	2ac4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    a416:	b100      	cbz	r0, a41a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf42>
    a418:	2500      	movs	r5, #0
    a41a:	6860      	ldr	r0, [r4, #4]
    a41c:	f005 fb0d 	bl	fa3a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a420:	b138      	cbz	r0, a432 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf5a>
    a422:	6863      	ldr	r3, [r4, #4]
    a424:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    a428:	8818      	ldrh	r0, [r3, #0]
    a42a:	f103 0130 	add.w	r1, r3, #48	; 0x30
    a42e:	f005 fac1 	bl	f9b4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    a432:	4628      	mov	r0, r5
    a434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a438:	20000174 	.word	0x20000174
    a43c:	b510      	push	{r4, lr}
    a43e:	4c11      	ldr	r4, [pc, #68]	; (a484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfac>)
    a440:	6861      	ldr	r1, [r4, #4]
    a442:	880a      	ldrh	r2, [r1, #0]
    a444:	f8a1 2188 	strh.w	r2, [r1, #392]	; 0x188
    a448:	f881 0186 	strb.w	r0, [r1, #390]	; 0x186
    a44c:	f891 006e 	ldrb.w	r0, [r1, #110]	; 0x6e
    a450:	f006 facb 	bl	109ea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    a454:	6861      	ldr	r1, [r4, #4]
    a456:	f881 018a 	strb.w	r0, [r1, #394]	; 0x18a
    a45a:	f891 006f 	ldrb.w	r0, [r1, #111]	; 0x6f
    a45e:	f006 fac4 	bl	109ea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    a462:	6861      	ldr	r1, [r4, #4]
    a464:	2211      	movs	r2, #17
    a466:	f881 018b 	strb.w	r0, [r1, #395]	; 0x18b
    a46a:	f501 70be 	add.w	r0, r1, #380	; 0x17c
    a46e:	f7fd f9b5 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a472:	6861      	ldr	r1, [r4, #4]
    a474:	2000      	movs	r0, #0
    a476:	f881 0124 	strb.w	r0, [r1, #292]	; 0x124
    a47a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a47e:	f7fd ba7f 	b.w	7980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a482:	0000      	.short	0x0000
    a484:	20000174 	.word	0x20000174
    a488:	b570      	push	{r4, r5, r6, lr}
    a48a:	4d0f      	ldr	r5, [pc, #60]	; (a4c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>)
    a48c:	686c      	ldr	r4, [r5, #4]
    a48e:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    a492:	2920      	cmp	r1, #32
    a494:	d002      	beq.n	a49c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc4>
    a496:	2927      	cmp	r1, #39	; 0x27
    a498:	d003      	beq.n	a4a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfca>
    a49a:	e011      	b.n	a4c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfe8>
    a49c:	f7ff ffce 	bl	a43c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a4a0:	e008      	b.n	a4b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfdc>
    a4a2:	f894 2086 	ldrb.w	r2, [r4, #134]	; 0x86
    a4a6:	f104 0078 	add.w	r0, r4, #120	; 0x78
    a4aa:	2301      	movs	r3, #1
    a4ac:	210b      	movs	r1, #11
    a4ae:	f004 fdea 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a4b2:	b138      	cbz	r0, a4c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfec>
    a4b4:	6869      	ldr	r1, [r5, #4]
    a4b6:	2000      	movs	r0, #0
    a4b8:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a4bc:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    a4c0:	2000      	movs	r0, #0
    a4c2:	bd70      	pop	{r4, r5, r6, pc}
    a4c4:	202a      	movs	r0, #42	; 0x2a
    a4c6:	e7e9      	b.n	a49c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc4>
    a4c8:	20000174 	.word	0x20000174
    a4cc:	b570      	push	{r4, r5, r6, lr}
    a4ce:	4c17      	ldr	r4, [pc, #92]	; (a52c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1054>)
    a4d0:	2301      	movs	r3, #1
    a4d2:	2100      	movs	r1, #0
    a4d4:	6860      	ldr	r0, [r4, #4]
    a4d6:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a4da:	3078      	adds	r0, #120	; 0x78
    a4dc:	f004 fdd3 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a4e0:	b1b0      	cbz	r0, a510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1038>
    a4e2:	f1a4 0510 	sub.w	r5, r4, #16
    a4e6:	68e8      	ldr	r0, [r5, #12]
    a4e8:	f005 f826 	bl	f538 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    a4ec:	6861      	ldr	r1, [r4, #4]
    a4ee:	f8a1 0274 	strh.w	r0, [r1, #628]	; 0x274
    a4f2:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    a4f6:	f006 fa91 	bl	10a1c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a4fa:	b158      	cbz	r0, a514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x103c>
    a4fc:	6861      	ldr	r1, [r4, #4]
    a4fe:	2028      	movs	r0, #40	; 0x28
    a500:	2208      	movs	r2, #8
    a502:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    a506:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    a50a:	f7fd f967 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a50e:	e00b      	b.n	a528 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1050>
    a510:	2001      	movs	r0, #1
    a512:	bd70      	pop	{r4, r5, r6, pc}
    a514:	6861      	ldr	r1, [r4, #4]
    a516:	68e8      	ldr	r0, [r5, #12]
    a518:	f201 2176 	addw	r1, r1, #630	; 0x276
    a51c:	f005 f807 	bl	f52e <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    a520:	6861      	ldr	r1, [r4, #4]
    a522:	200b      	movs	r0, #11
    a524:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a528:	2000      	movs	r0, #0
    a52a:	bd70      	pop	{r4, r5, r6, pc}
    a52c:	20000174 	.word	0x20000174
    a530:	b570      	push	{r4, r5, r6, lr}
    a532:	4d2b      	ldr	r5, [pc, #172]	; (a5e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1108>)
    a534:	2301      	movs	r3, #1
    a536:	2100      	movs	r1, #0
    a538:	6868      	ldr	r0, [r5, #4]
    a53a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a53e:	3078      	adds	r0, #120	; 0x78
    a540:	f004 fda1 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a544:	b1d8      	cbz	r0, a57e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a6>
    a546:	f1a5 0410 	sub.w	r4, r5, #16
    a54a:	2100      	movs	r1, #0
    a54c:	68e0      	ldr	r0, [r4, #12]
    a54e:	f004 ffc6 	bl	f4de <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    a552:	b1b0      	cbz	r0, a582 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10aa>
    a554:	68e0      	ldr	r0, [r4, #12]
    a556:	6869      	ldr	r1, [r5, #4]
    a558:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    a55c:	f8a1 0274 	strh.w	r0, [r1, #628]	; 0x274
    a560:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    a564:	f006 fa5a 	bl	10a1c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a568:	b178      	cbz	r0, a58a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b2>
    a56a:	6869      	ldr	r1, [r5, #4]
    a56c:	2028      	movs	r0, #40	; 0x28
    a56e:	2208      	movs	r2, #8
    a570:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    a574:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    a578:	f7fd f930 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a57c:	e02e      	b.n	a5dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1104>
    a57e:	2001      	movs	r0, #1
    a580:	bd70      	pop	{r4, r5, r6, pc}
    a582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a586:	f000 b8f5 	b.w	a774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    a58a:	68e0      	ldr	r0, [r4, #12]
    a58c:	f004 ffd7 	bl	f53e <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    a590:	f004 fd5c 	bl	f04c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    a594:	4606      	mov	r6, r0
    a596:	6868      	ldr	r0, [r5, #4]
    a598:	4631      	mov	r1, r6
    a59a:	f8c0 627c 	str.w	r6, [r0, #636]	; 0x27c
    a59e:	68e0      	ldr	r0, [r4, #12]
    a5a0:	7900      	ldrb	r0, [r0, #4]
    a5a2:	f004 feec 	bl	f37e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    a5a6:	6869      	ldr	r1, [r5, #4]
    a5a8:	f8a1 0276 	strh.w	r0, [r1, #630]	; 0x276
    a5ac:	68e0      	ldr	r0, [r4, #12]
    a5ae:	4631      	mov	r1, r6
    a5b0:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    a5b4:	f004 fedf 	bl	f376 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    a5b8:	6869      	ldr	r1, [r5, #4]
    a5ba:	f8c1 0278 	str.w	r0, [r1, #632]	; 0x278
    a5be:	68e0      	ldr	r0, [r4, #12]
    a5c0:	f004 ffc0 	bl	f544 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    a5c4:	6869      	ldr	r1, [r5, #4]
    a5c6:	f8a1 0280 	strh.w	r0, [r1, #640]	; 0x280
    a5ca:	68e0      	ldr	r0, [r4, #12]
    a5cc:	f004 ffbd 	bl	f54a <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    a5d0:	6869      	ldr	r1, [r5, #4]
    a5d2:	f8a1 0282 	strh.w	r0, [r1, #642]	; 0x282
    a5d6:	200d      	movs	r0, #13
    a5d8:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a5dc:	2000      	movs	r0, #0
    a5de:	bd70      	pop	{r4, r5, r6, pc}
    a5e0:	20000174 	.word	0x20000174
    a5e4:	b538      	push	{r3, r4, r5, lr}
    a5e6:	4c2c      	ldr	r4, [pc, #176]	; (a698 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>)
    a5e8:	2301      	movs	r3, #1
    a5ea:	2100      	movs	r1, #0
    a5ec:	6860      	ldr	r0, [r4, #4]
    a5ee:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a5f2:	3078      	adds	r0, #120	; 0x78
    a5f4:	f004 fd47 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a5f8:	b970      	cbnz	r0, a618 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1140>
    a5fa:	6860      	ldr	r0, [r4, #4]
    a5fc:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a600:	2a12      	cmp	r2, #18
    a602:	d009      	beq.n	a618 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1140>
    a604:	2301      	movs	r3, #1
    a606:	2105      	movs	r1, #5
    a608:	3078      	adds	r0, #120	; 0x78
    a60a:	f004 fd3c 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a60e:	b108      	cbz	r0, a614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x113c>
    a610:	2008      	movs	r0, #8
    a612:	bd38      	pop	{r3, r4, r5, pc}
    a614:	2001      	movs	r0, #1
    a616:	bd38      	pop	{r3, r4, r5, pc}
    a618:	6860      	ldr	r0, [r4, #4]
    a61a:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
    a61e:	b908      	cbnz	r0, a624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x114c>
    a620:	f7ff f85c 	bl	96dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a624:	4d1c      	ldr	r5, [pc, #112]	; (a698 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>)
    a626:	6861      	ldr	r1, [r4, #4]
    a628:	3d10      	subs	r5, #16
    a62a:	f501 71f0 	add.w	r1, r1, #480	; 0x1e0
    a62e:	68e8      	ldr	r0, [r5, #12]
    a630:	f004 ff9a 	bl	f568 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    a634:	6861      	ldr	r1, [r4, #4]
    a636:	68e8      	ldr	r0, [r5, #12]
    a638:	f501 7180 	add.w	r1, r1, #256	; 0x100
    a63c:	f004 ff8b 	bl	f556 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    a640:	6861      	ldr	r1, [r4, #4]
    a642:	f891 028c 	ldrb.w	r0, [r1, #652]	; 0x28c
    a646:	f88d 0000 	strb.w	r0, [sp]
    a64a:	9800      	ldr	r0, [sp, #0]
    a64c:	9000      	str	r0, [sp, #0]
    a64e:	f89d 0000 	ldrb.w	r0, [sp]
    a652:	b120      	cbz	r0, a65e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1186>
    a654:	f240 21a2 	movw	r1, #674	; 0x2a2
    a658:	2031      	movs	r0, #49	; 0x31
    a65a:	f7fa ffb9 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a65e:	8808      	ldrh	r0, [r1, #0]
    a660:	f8a1 028e 	strh.w	r0, [r1, #654]	; 0x28e
    a664:	f501 7124 	add.w	r1, r1, #656	; 0x290
    a668:	68e8      	ldr	r0, [r5, #12]
    a66a:	f004 ff78 	bl	f55e <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    a66e:	6861      	ldr	r1, [r4, #4]
    a670:	68e8      	ldr	r0, [r5, #12]
    a672:	f501 7126 	add.w	r1, r1, #664	; 0x298
    a676:	f004 ff6b 	bl	f550 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    a67a:	6861      	ldr	r1, [r4, #4]
    a67c:	2207      	movs	r2, #7
    a67e:	f501 7021 	add.w	r0, r1, #644	; 0x284
    a682:	f7fd f8ab 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a686:	6861      	ldr	r1, [r4, #4]
    a688:	2014      	movs	r0, #20
    a68a:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a68e:	f7fd f977 	bl	7980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a692:	2000      	movs	r0, #0
    a694:	bd38      	pop	{r3, r4, r5, pc}
    a696:	0000      	.short	0x0000
    a698:	20000174 	.word	0x20000174
    a69c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a69e:	4c13      	ldr	r4, [pc, #76]	; (a6ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>)
    a6a0:	6860      	ldr	r0, [r4, #4]
    a6a2:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a6a6:	07c0      	lsls	r0, r0, #31
    a6a8:	d001      	beq.n	a6ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11d6>
    a6aa:	2001      	movs	r0, #1
    a6ac:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a6ae:	480f      	ldr	r0, [pc, #60]	; (a6ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>)
    a6b0:	4669      	mov	r1, sp
    a6b2:	3810      	subs	r0, #16
    a6b4:	68c0      	ldr	r0, [r0, #12]
    a6b6:	f004 ff5d 	bl	f574 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    a6ba:	f001 fad9 	bl	bc70 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a6be:	f644 122f 	movw	r2, #18735	; 0x492f
    a6c2:	4010      	ands	r0, r2
    a6c4:	e9dd 5200 	ldrd	r5, r2, [sp]
    a6c8:	6863      	ldr	r3, [r4, #4]
    a6ca:	4005      	ands	r5, r0
    a6cc:	f001 0106 	and.w	r1, r1, #6
    a6d0:	f843 5fd4 	str.w	r5, [r3, #212]!
    a6d4:	400a      	ands	r2, r1
    a6d6:	605a      	str	r2, [r3, #4]
    a6d8:	f7ff f800 	bl	96dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a6dc:	6860      	ldr	r0, [r4, #4]
    a6de:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a6e2:	f041 0101 	orr.w	r1, r1, #1
    a6e6:	7001      	strb	r1, [r0, #0]
    a6e8:	2000      	movs	r0, #0
    a6ea:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a6ec:	20000174 	.word	0x20000174
    a6f0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a6f4:	4d1e      	ldr	r5, [pc, #120]	; (a770 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1298>)
    a6f6:	2301      	movs	r3, #1
    a6f8:	2107      	movs	r1, #7
    a6fa:	6868      	ldr	r0, [r5, #4]
    a6fc:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a700:	3078      	adds	r0, #120	; 0x78
    a702:	f004 fcc0 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a706:	b380      	cbz	r0, a76a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1292>
    a708:	f1a5 0010 	sub.w	r0, r5, #16
    a70c:	4669      	mov	r1, sp
    a70e:	68c0      	ldr	r0, [r0, #12]
    a710:	f004 ff35 	bl	f57e <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    a714:	686e      	ldr	r6, [r5, #4]
    a716:	f89d 7004 	ldrb.w	r7, [sp, #4]
    a71a:	36d4      	adds	r6, #212	; 0xd4
    a71c:	9c00      	ldr	r4, [sp, #0]
    a71e:	f001 faa7 	bl	bc70 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a722:	4004      	ands	r4, r0
    a724:	f644 102f 	movw	r0, #18735	; 0x492f
    a728:	4004      	ands	r4, r0
    a72a:	400f      	ands	r7, r1
    a72c:	f007 0006 	and.w	r0, r7, #6
    a730:	6034      	str	r4, [r6, #0]
    a732:	6070      	str	r0, [r6, #4]
    a734:	6869      	ldr	r1, [r5, #4]
    a736:	2000      	movs	r0, #0
    a738:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    a73c:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a740:	880a      	ldrh	r2, [r1, #0]
    a742:	f8a1 2198 	strh.w	r2, [r1, #408]	; 0x198
    a746:	f881 0196 	strb.w	r0, [r1, #406]	; 0x196
    a74a:	9a00      	ldr	r2, [sp, #0]
    a74c:	f8c1 219a 	str.w	r2, [r1, #410]	; 0x19a
    a750:	9a01      	ldr	r2, [sp, #4]
    a752:	f8c1 219e 	str.w	r2, [r1, #414]	; 0x19e
    a756:	f501 70c6 	add.w	r0, r1, #396	; 0x18c
    a75a:	2205      	movs	r2, #5
    a75c:	f7fd f83e 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a760:	f7fd f90e 	bl	7980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a764:	2000      	movs	r0, #0
    a766:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a76a:	e7ff      	b.n	a76c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1294>
    a76c:	2001      	movs	r0, #1
    a76e:	e7fa      	b.n	a766 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128e>
    a770:	20000174 	.word	0x20000174
    a774:	480b      	ldr	r0, [pc, #44]	; (a7a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12cc>)
    a776:	b510      	push	{r4, lr}
    a778:	6840      	ldr	r0, [r0, #4]
    a77a:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a77e:	070a      	lsls	r2, r1, #28
    a780:	d501      	bpl.n	a786 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ae>
    a782:	2001      	movs	r0, #1
    a784:	bd10      	pop	{r4, pc}
    a786:	f041 0108 	orr.w	r1, r1, #8
    a78a:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    a78e:	4905      	ldr	r1, [pc, #20]	; (a7a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12cc>)
    a790:	3910      	subs	r1, #16
    a792:	68c9      	ldr	r1, [r1, #12]
    a794:	78c9      	ldrb	r1, [r1, #3]
    a796:	f880 1108 	strb.w	r1, [r0, #264]	; 0x108
    a79a:	f7fe ff9f 	bl	96dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a79e:	2000      	movs	r0, #0
    a7a0:	bd10      	pop	{r4, pc}
    a7a2:	0000      	.short	0x0000
    a7a4:	20000174 	.word	0x20000174
    a7a8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a7ac:	4d36      	ldr	r5, [pc, #216]	; (a888 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b0>)
    a7ae:	6868      	ldr	r0, [r5, #4]
    a7b0:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a7b4:	f010 0f30 	tst.w	r0, #48	; 0x30
    a7b8:	d002      	beq.n	a7c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e8>
    a7ba:	2001      	movs	r0, #1
    a7bc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a7c0:	4c31      	ldr	r4, [pc, #196]	; (a888 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b0>)
    a7c2:	3c10      	subs	r4, #16
    a7c4:	68e0      	ldr	r0, [r4, #12]
    a7c6:	f004 fef5 	bl	f5b4 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a7ca:	b328      	cbz	r0, a818 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1340>
    a7cc:	68e0      	ldr	r0, [r4, #12]
    a7ce:	f004 fee3 	bl	f598 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a7d2:	4607      	mov	r7, r0
    a7d4:	68e0      	ldr	r0, [r4, #12]
    a7d6:	f004 fee3 	bl	f5a0 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a7da:	4680      	mov	r8, r0
    a7dc:	68e0      	ldr	r0, [r4, #12]
    a7de:	f004 fed9 	bl	f594 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a7e2:	4606      	mov	r6, r0
    a7e4:	68e0      	ldr	r0, [r4, #12]
    a7e6:	f004 fed9 	bl	f59c <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a7ea:	4601      	mov	r1, r0
    a7ec:	9700      	str	r7, [sp, #0]
    a7ee:	6868      	ldr	r0, [r5, #4]
    a7f0:	4643      	mov	r3, r8
    a7f2:	4632      	mov	r2, r6
    a7f4:	3030      	adds	r0, #48	; 0x30
    a7f6:	f005 f9b0 	bl	fb5a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a7fa:	78a0      	ldrb	r0, [r4, #2]
    a7fc:	0781      	lsls	r1, r0, #30
    a7fe:	f04f 0001 	mov.w	r0, #1
    a802:	d503      	bpl.n	a80c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1334>
    a804:	68a1      	ldr	r1, [r4, #8]
    a806:	78c9      	ldrb	r1, [r1, #3]
    a808:	2914      	cmp	r1, #20
    a80a:	d009      	beq.n	a820 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1348>
    a80c:	6869      	ldr	r1, [r5, #4]
    a80e:	f891 1085 	ldrb.w	r1, [r1, #133]	; 0x85
    a812:	291c      	cmp	r1, #28
    a814:	d004      	beq.n	a820 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1348>
    a816:	e006      	b.n	a826 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134e>
    a818:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a81c:	f7ff bfaa 	b.w	a774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    a820:	6869      	ldr	r1, [r5, #4]
    a822:	f881 0064 	strb.w	r0, [r1, #100]	; 0x64
    a826:	686b      	ldr	r3, [r5, #4]
    a828:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    a82c:	2801      	cmp	r0, #1
    a82e:	d011      	beq.n	a854 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137c>
    a830:	f893 011b 	ldrb.w	r0, [r3, #283]	; 0x11b
    a834:	f88d 0004 	strb.w	r0, [sp, #4]
    a838:	9801      	ldr	r0, [sp, #4]
    a83a:	9001      	str	r0, [sp, #4]
    a83c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a840:	b940      	cbnz	r0, a854 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137c>
    a842:	f893 011a 	ldrb.w	r0, [r3, #282]	; 0x11a
    a846:	f88d 0000 	strb.w	r0, [sp]
    a84a:	9800      	ldr	r0, [sp, #0]
    a84c:	9000      	str	r0, [sp, #0]
    a84e:	f89d 0000 	ldrb.w	r0, [sp]
    a852:	b148      	cbz	r0, a868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1390>
    a854:	f813 0f87 	ldrb.w	r0, [r3, #135]!
    a858:	f040 0010 	orr.w	r0, r0, #16
    a85c:	f883 0000 	strb.w	r0, [r3]
    a860:	f7fe ff3c 	bl	96dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a864:	2000      	movs	r0, #0
    a866:	e7a9      	b.n	a7bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e4>
    a868:	f893 0087 	ldrb.w	r0, [r3, #135]	; 0x87
    a86c:	f503 72ad 	add.w	r2, r3, #346	; 0x15a
    a870:	f040 0020 	orr.w	r0, r0, #32
    a874:	f883 0087 	strb.w	r0, [r3, #135]	; 0x87
    a878:	f103 0130 	add.w	r1, r3, #48	; 0x30
    a87c:	8818      	ldrh	r0, [r3, #0]
    a87e:	f005 f973 	bl	fb68 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    a882:	f7fd f87d 	bl	7980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a886:	e7eb      	b.n	a860 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1388>
    a888:	20000174 	.word	0x20000174
    a88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a890:	4c1b      	ldr	r4, [pc, #108]	; (a900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>)
    a892:	2301      	movs	r3, #1
    a894:	210a      	movs	r1, #10
    a896:	6860      	ldr	r0, [r4, #4]
    a898:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a89c:	3078      	adds	r0, #120	; 0x78
    a89e:	f004 fbf2 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a8a2:	b358      	cbz	r0, a8fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
    a8a4:	f1a4 0510 	sub.w	r5, r4, #16
    a8a8:	68e8      	ldr	r0, [r5, #12]
    a8aa:	f004 fe83 	bl	f5b4 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a8ae:	b1d0      	cbz	r0, a8e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x140e>
    a8b0:	68e8      	ldr	r0, [r5, #12]
    a8b2:	f004 fe71 	bl	f598 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a8b6:	4680      	mov	r8, r0
    a8b8:	68e8      	ldr	r0, [r5, #12]
    a8ba:	f004 fe71 	bl	f5a0 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a8be:	4607      	mov	r7, r0
    a8c0:	68e8      	ldr	r0, [r5, #12]
    a8c2:	f004 fe67 	bl	f594 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a8c6:	4606      	mov	r6, r0
    a8c8:	68e8      	ldr	r0, [r5, #12]
    a8ca:	f004 fe67 	bl	f59c <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a8ce:	4601      	mov	r1, r0
    a8d0:	f8cd 8000 	str.w	r8, [sp]
    a8d4:	6860      	ldr	r0, [r4, #4]
    a8d6:	463b      	mov	r3, r7
    a8d8:	4632      	mov	r2, r6
    a8da:	3030      	adds	r0, #48	; 0x30
    a8dc:	f005 f93d 	bl	fb5a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a8e0:	6860      	ldr	r0, [r4, #4]
    a8e2:	f005 f8aa 	bl	fa3a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a8e6:	6861      	ldr	r1, [r4, #4]
    a8e8:	2000      	movs	r0, #0
    a8ea:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    a8ee:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a8f2:	f7ff f8d9 	bl	9aa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    a8f6:	2000      	movs	r0, #0
    a8f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a8fc:	2001      	movs	r0, #1
    a8fe:	e7fb      	b.n	a8f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1420>
    a900:	20000174 	.word	0x20000174
    a904:	b510      	push	{r4, lr}
    a906:	4c09      	ldr	r4, [pc, #36]	; (a92c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1454>)
    a908:	6860      	ldr	r0, [r4, #4]
    a90a:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a90e:	0740      	lsls	r0, r0, #29
    a910:	d501      	bpl.n	a916 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x143e>
    a912:	2001      	movs	r0, #1
    a914:	bd10      	pop	{r4, pc}
    a916:	f7fe fee1 	bl	96dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a91a:	6860      	ldr	r0, [r4, #4]
    a91c:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a920:	f041 0104 	orr.w	r1, r1, #4
    a924:	7001      	strb	r1, [r0, #0]
    a926:	2000      	movs	r0, #0
    a928:	bd10      	pop	{r4, pc}
    a92a:	0000      	.short	0x0000
    a92c:	20000174 	.word	0x20000174
    a930:	b510      	push	{r4, lr}
    a932:	4c0a      	ldr	r4, [pc, #40]	; (a95c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1484>)
    a934:	2301      	movs	r3, #1
    a936:	2109      	movs	r1, #9
    a938:	6860      	ldr	r0, [r4, #4]
    a93a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a93e:	3078      	adds	r0, #120	; 0x78
    a940:	f004 fba1 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a944:	2800      	cmp	r0, #0
    a946:	d007      	beq.n	a958 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1480>
    a948:	6860      	ldr	r0, [r4, #4]
    a94a:	2100      	movs	r1, #0
    a94c:	f800 1fb2 	strb.w	r1, [r0, #178]!
    a950:	7301      	strb	r1, [r0, #12]
    a952:	f800 1c2d 	strb.w	r1, [r0, #-45]
    a956:	4608      	mov	r0, r1
    a958:	bd10      	pop	{r4, pc}
    a95a:	0000      	.short	0x0000
    a95c:	20000174 	.word	0x20000174
    a960:	b510      	push	{r4, lr}
    a962:	4c0f      	ldr	r4, [pc, #60]	; (a9a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>)
    a964:	2301      	movs	r3, #1
    a966:	2100      	movs	r1, #0
    a968:	6860      	ldr	r0, [r4, #4]
    a96a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a96e:	3078      	adds	r0, #120	; 0x78
    a970:	f004 fb89 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a974:	b138      	cbz	r0, a986 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ae>
    a976:	f7fe feb1 	bl	96dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a97a:	6861      	ldr	r1, [r4, #4]
    a97c:	2010      	movs	r0, #16
    a97e:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a982:	2000      	movs	r0, #0
    a984:	bd10      	pop	{r4, pc}
    a986:	6860      	ldr	r0, [r4, #4]
    a988:	2301      	movs	r3, #1
    a98a:	2105      	movs	r1, #5
    a98c:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a990:	3078      	adds	r0, #120	; 0x78
    a992:	f004 fb78 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a996:	b108      	cbz	r0, a99c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c4>
    a998:	2008      	movs	r0, #8
    a99a:	bd10      	pop	{r4, pc}
    a99c:	2001      	movs	r0, #1
    a99e:	bd10      	pop	{r4, pc}
    a9a0:	20000174 	.word	0x20000174
    a9a4:	4806      	ldr	r0, [pc, #24]	; (a9c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e8>)
    a9a6:	6840      	ldr	r0, [r0, #4]
    a9a8:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a9ac:	2911      	cmp	r1, #17
    a9ae:	d001      	beq.n	a9b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14dc>
    a9b0:	2002      	movs	r0, #2
    a9b2:	4770      	bx	lr
    a9b4:	2112      	movs	r1, #18
    a9b6:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a9ba:	2000      	movs	r0, #0
    a9bc:	4770      	bx	lr
    a9be:	0000      	.short	0x0000
    a9c0:	20000174 	.word	0x20000174
    a9c4:	b538      	push	{r3, r4, r5, lr}
    a9c6:	4c36      	ldr	r4, [pc, #216]	; (aaa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    a9c8:	2301      	movs	r3, #1
    a9ca:	210b      	movs	r1, #11
    a9cc:	6860      	ldr	r0, [r4, #4]
    a9ce:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a9d2:	3078      	adds	r0, #120	; 0x78
    a9d4:	f004 fb57 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a9d8:	bb80      	cbnz	r0, aa3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1564>
    a9da:	6860      	ldr	r0, [r4, #4]
    a9dc:	2301      	movs	r3, #1
    a9de:	2100      	movs	r1, #0
    a9e0:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a9e4:	3078      	adds	r0, #120	; 0x78
    a9e6:	f004 fb4e 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a9ea:	b328      	cbz	r0, aa38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1560>
    a9ec:	6860      	ldr	r0, [r4, #4]
    a9ee:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    a9f2:	2824      	cmp	r0, #36	; 0x24
    a9f4:	d023      	beq.n	aa3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1566>
    a9f6:	f1a4 0510 	sub.w	r5, r4, #16
    a9fa:	68e8      	ldr	r0, [r5, #12]
    a9fc:	f004 fdf6 	bl	f5ec <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    aa00:	b1f8      	cbz	r0, aa42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156a>
    aa02:	6860      	ldr	r0, [r4, #4]
    aa04:	2102      	movs	r1, #2
    aa06:	30d4      	adds	r0, #212	; 0xd4
    aa08:	f005 ff96 	bl	10938 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x762>
    aa0c:	68e8      	ldr	r0, [r5, #12]
    aa0e:	7941      	ldrb	r1, [r0, #5]
    aa10:	f001 0207 	and.w	r2, r1, #7
    aa14:	6861      	ldr	r1, [r4, #4]
    aa16:	f881 2067 	strb.w	r2, [r1, #103]	; 0x67
    aa1a:	7900      	ldrb	r0, [r0, #4]
    aa1c:	f000 0007 	and.w	r0, r0, #7
    aa20:	f881 0066 	strb.w	r0, [r1, #102]	; 0x66
    aa24:	f891 3125 	ldrb.w	r3, [r1, #293]	; 0x125
    aa28:	f88d 3000 	strb.w	r3, [sp]
    aa2c:	9b00      	ldr	r3, [sp, #0]
    aa2e:	9300      	str	r3, [sp, #0]
    aa30:	f89d 3000 	ldrb.w	r3, [sp]
    aa34:	bb5b      	cbnz	r3, aa8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b6>
    aa36:	e008      	b.n	aa4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1572>
    aa38:	2001      	movs	r0, #1
    aa3a:	bd38      	pop	{r3, r4, r5, pc}
    aa3c:	e7ff      	b.n	aa3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1566>
    aa3e:	2020      	movs	r0, #32
    aa40:	e7fb      	b.n	aa3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
    aa42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    aa46:	f7ff be95 	b.w	a774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    aa4a:	f891 3124 	ldrb.w	r3, [r1, #292]	; 0x124
    aa4e:	2b01      	cmp	r3, #1
    aa50:	d01d      	beq.n	aa8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b6>
    aa52:	f101 036e 	add.w	r3, r1, #110	; 0x6e
    aa56:	785d      	ldrb	r5, [r3, #1]
    aa58:	4285      	cmp	r5, r0
    aa5a:	d106      	bne.n	aa6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1592>
    aa5c:	7818      	ldrb	r0, [r3, #0]
    aa5e:	4290      	cmp	r0, r2
    aa60:	d103      	bne.n	aa6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1592>
    aa62:	2002      	movs	r0, #2
    aa64:	f881 0124 	strb.w	r0, [r1, #292]	; 0x124
    aa68:	e011      	b.n	aa8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b6>
    aa6a:	f501 70bc 	add.w	r0, r1, #376	; 0x178
    aa6e:	880a      	ldrh	r2, [r1, #0]
    aa70:	f820 2b02 	strh.w	r2, [r0], #2
    aa74:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    aa78:	f800 2b01 	strb.w	r2, [r0], #1
    aa7c:	f891 2067 	ldrb.w	r2, [r1, #103]	; 0x67
    aa80:	f800 290d 	strb.w	r2, [r0], #-13
    aa84:	221b      	movs	r2, #27
    aa86:	f7fc fea9 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    aa8a:	f7fc ff79 	bl	7980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    aa8e:	6861      	ldr	r1, [r4, #4]
    aa90:	2021      	movs	r0, #33	; 0x21
    aa92:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    aa96:	f7fe fe21 	bl	96dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    aa9a:	2000      	movs	r0, #0
    aa9c:	e7cd      	b.n	aa3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
    aa9e:	0000      	.short	0x0000
    aaa0:	20000174 	.word	0x20000174
    aaa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    aaa8:	4951      	ldr	r1, [pc, #324]	; (abf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1718>)
    aaaa:	6848      	ldr	r0, [r1, #4]
    aaac:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    aab0:	2a20      	cmp	r2, #32
    aab2:	d009      	beq.n	aac8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f0>
    aab4:	f05f 0600 	movs.w	r6, #0
    aab8:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    aabc:	2a22      	cmp	r2, #34	; 0x22
    aabe:	d005      	beq.n	aacc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f4>
    aac0:	b3a6      	cbz	r6, ab2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1654>
    aac2:	f100 0485 	add.w	r4, r0, #133	; 0x85
    aac6:	e003      	b.n	aad0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f8>
    aac8:	2601      	movs	r6, #1
    aaca:	e7f5      	b.n	aab8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15e0>
    aacc:	f100 0486 	add.w	r4, r0, #134	; 0x86
    aad0:	4688      	mov	r8, r1
    aad2:	2102      	movs	r1, #2
    aad4:	30d4      	adds	r0, #212	; 0xd4
    aad6:	f005 ff2f 	bl	10938 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x762>
    aada:	4d45      	ldr	r5, [pc, #276]	; (abf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1718>)
    aadc:	3d10      	subs	r5, #16
    aade:	68e8      	ldr	r0, [r5, #12]
    aae0:	f004 fd8e 	bl	f600 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    aae4:	2700      	movs	r7, #0
    aae6:	b328      	cbz	r0, ab34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    aae8:	4631      	mov	r1, r6
    aaea:	68e8      	ldr	r0, [r5, #12]
    aaec:	f7fe fec8 	bl	9880 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    aaf0:	b300      	cbz	r0, ab34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    aaf2:	4646      	mov	r6, r8
    aaf4:	466a      	mov	r2, sp
    aaf6:	f8d8 0004 	ldr.w	r0, [r8, #4]
    aafa:	68e9      	ldr	r1, [r5, #12]
    aafc:	f004 fbf5 	bl	f2ea <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    ab00:	b3a8      	cbz	r0, ab6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1696>
    ab02:	68e8      	ldr	r0, [r5, #12]
    ab04:	f004 fd4e 	bl	f5a4 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    ab08:	6871      	ldr	r1, [r6, #4]
    ab0a:	f8a1 0274 	strh.w	r0, [r1, #628]	; 0x274
    ab0e:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    ab12:	f005 ff83 	bl	10a1c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    ab16:	b358      	cbz	r0, ab70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    ab18:	6871      	ldr	r1, [r6, #4]
    ab1a:	2028      	movs	r0, #40	; 0x28
    ab1c:	2208      	movs	r2, #8
    ab1e:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    ab22:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    ab26:	f7fc fe59 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    ab2a:	e055      	b.n	abd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1700>
    ab2c:	e7ff      	b.n	ab2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1656>
    ab2e:	2002      	movs	r0, #2
    ab30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ab34:	f8d8 0004 	ldr.w	r0, [r8, #4]
    ab38:	f04f 0900 	mov.w	r9, #0
    ab3c:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    ab40:	2901      	cmp	r1, #1
    ab42:	d016      	beq.n	ab72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x169a>
    ab44:	f880 7124 	strb.w	r7, [r0, #292]	; 0x124
    ab48:	b1fe      	cbz	r6, ab8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b2>
    ab4a:	68e8      	ldr	r0, [r5, #12]
    ab4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
    ab50:	2201      	movs	r2, #1
    ab52:	78c0      	ldrb	r0, [r0, #3]
    ab54:	f881 0109 	strb.w	r0, [r1, #265]	; 0x109
    ab58:	4082      	lsls	r2, r0
    ab5a:	f3c2 6000 	ubfx	r0, r2, #24, #1
    ab5e:	b160      	cbz	r0, ab7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a2>
    ab60:	200a      	movs	r0, #10
    ab62:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    ab66:	f891 00be 	ldrb.w	r0, [r1, #190]	; 0xbe
    ab6a:	b9a0      	cbnz	r0, ab96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16be>
    ab6c:	e008      	b.n	ab80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a8>
    ab6e:	e014      	b.n	ab9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c2>
    ab70:	e027      	b.n	abc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ea>
    ab72:	201e      	movs	r0, #30
    ab74:	f7ff fc62 	bl	a43c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    ab78:	e7e6      	b.n	ab48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>
    ab7a:	f240 31fd 	movw	r1, #1021	; 0x3fd
    ab7e:	e001      	b.n	ab84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ac>
    ab80:	f240 4105 	movw	r1, #1029	; 0x405
    ab84:	2031      	movs	r0, #49	; 0x31
    ab86:	f7fa fd23 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab8a:	7027      	strb	r7, [r4, #0]
    ab8c:	f7fe fdb2 	bl	96f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    ab90:	f7ff fdf0 	bl	a774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    ab94:	4681      	mov	r9, r0
    ab96:	4648      	mov	r0, r9
    ab98:	e7ca      	b.n	ab30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1658>
    ab9a:	6870      	ldr	r0, [r6, #4]
    ab9c:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    aba0:	2901      	cmp	r1, #1
    aba2:	d009      	beq.n	abb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e0>
    aba4:	f880 7124 	strb.w	r7, [r0, #292]	; 0x124
    aba8:	6870      	ldr	r0, [r6, #4]
    abaa:	f100 0186 	add.w	r1, r0, #134	; 0x86
    abae:	42a1      	cmp	r1, r4
    abb0:	d112      	bne.n	abd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1700>
    abb2:	f880 7086 	strb.w	r7, [r0, #134]	; 0x86
    abb6:	e00f      	b.n	abd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1700>
    abb8:	2000      	movs	r0, #0
    abba:	f7ff fc3f 	bl	a43c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    abbe:	7027      	strb	r7, [r4, #0]
    abc0:	e7f2      	b.n	aba8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    abc2:	6870      	ldr	r0, [r6, #4]
    abc4:	f89d 1000 	ldrb.w	r1, [sp]
    abc8:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
    abcc:	f89d 1001 	ldrb.w	r1, [sp, #1]
    abd0:	f880 1277 	strb.w	r1, [r0, #631]	; 0x277
    abd4:	2024      	movs	r0, #36	; 0x24
    abd6:	7020      	strb	r0, [r4, #0]
    abd8:	6870      	ldr	r0, [r6, #4]
    abda:	f100 0186 	add.w	r1, r0, #134	; 0x86
    abde:	42a1      	cmp	r1, r4
    abe0:	d102      	bne.n	abe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1710>
    abe2:	f7fe fd87 	bl	96f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    abe6:	e001      	b.n	abec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1714>
    abe8:	f880 70be 	strb.w	r7, [r0, #190]	; 0xbe
    abec:	2000      	movs	r0, #0
    abee:	e79f      	b.n	ab30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1658>
    abf0:	20000174 	.word	0x20000174
    abf4:	b570      	push	{r4, r5, r6, lr}
    abf6:	480a      	ldr	r0, [pc, #40]	; (ac20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1748>)
    abf8:	2102      	movs	r1, #2
    abfa:	6840      	ldr	r0, [r0, #4]
    abfc:	30d4      	adds	r0, #212	; 0xd4
    abfe:	f005 fe9b 	bl	10938 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x762>
    ac02:	4c07      	ldr	r4, [pc, #28]	; (ac20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1748>)
    ac04:	3c10      	subs	r4, #16
    ac06:	68e0      	ldr	r0, [r4, #12]
    ac08:	f004 fd0a 	bl	f620 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    ac0c:	4605      	mov	r5, r0
    ac0e:	68e0      	ldr	r0, [r4, #12]
    ac10:	f004 fd08 	bl	f624 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    ac14:	4601      	mov	r1, r0
    ac16:	4628      	mov	r0, r5
    ac18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ac1c:	f005 bf0a 	b.w	10a34 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    ac20:	20000174 	.word	0x20000174
    ac24:	4808      	ldr	r0, [pc, #32]	; (ac48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>)
    ac26:	68c0      	ldr	r0, [r0, #12]
    ac28:	7901      	ldrb	r1, [r0, #4]
    ac2a:	4807      	ldr	r0, [pc, #28]	; (ac48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>)
    ac2c:	3010      	adds	r0, #16
    ac2e:	6840      	ldr	r0, [r0, #4]
    ac30:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    ac34:	2820      	cmp	r0, #32
    ac36:	d005      	beq.n	ac44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176c>
    ac38:	2827      	cmp	r0, #39	; 0x27
    ac3a:	d003      	beq.n	ac44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176c>
    ac3c:	f05f 00fe 	movs.w	r0, #254	; 0xfe
    ac40:	f005 bef8 	b.w	10a34 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    ac44:	2016      	movs	r0, #22
    ac46:	e7fb      	b.n	ac40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1768>
    ac48:	20000164 	.word	0x20000164
    ac4c:	b510      	push	{r4, lr}
    ac4e:	4c08      	ldr	r4, [pc, #32]	; (ac70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>)
    ac50:	6860      	ldr	r0, [r4, #4]
    ac52:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    ac56:	2817      	cmp	r0, #23
    ac58:	d001      	beq.n	ac5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1786>
    ac5a:	2002      	movs	r0, #2
    ac5c:	bd10      	pop	{r4, pc}
    ac5e:	f7fe fd49 	bl	96f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    ac62:	6861      	ldr	r1, [r4, #4]
    ac64:	201b      	movs	r0, #27
    ac66:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    ac6a:	2000      	movs	r0, #0
    ac6c:	bd10      	pop	{r4, pc}
    ac6e:	0000      	.short	0x0000
    ac70:	20000174 	.word	0x20000174
    ac74:	b510      	push	{r4, lr}
    ac76:	4c0c      	ldr	r4, [pc, #48]	; (aca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d0>)
    ac78:	2301      	movs	r3, #1
    ac7a:	4619      	mov	r1, r3
    ac7c:	6860      	ldr	r0, [r4, #4]
    ac7e:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    ac82:	3078      	adds	r0, #120	; 0x78
    ac84:	f004 f9ff 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ac88:	b108      	cbz	r0, ac8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b6>
    ac8a:	2000      	movs	r0, #0
    ac8c:	bd10      	pop	{r4, pc}
    ac8e:	4806      	ldr	r0, [pc, #24]	; (aca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d0>)
    ac90:	3810      	subs	r0, #16
    ac92:	68c0      	ldr	r0, [r0, #12]
    ac94:	f004 fc8a 	bl	f5ac <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    ac98:	6861      	ldr	r1, [r4, #4]
    ac9a:	f881 0089 	strb.w	r0, [r1, #137]	; 0x89
    ac9e:	2007      	movs	r0, #7
    aca0:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    aca4:	e7f1      	b.n	ac8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b2>
    aca6:	0000      	.short	0x0000
    aca8:	20000174 	.word	0x20000174
    acac:	b570      	push	{r4, r5, r6, lr}
    acae:	4834      	ldr	r0, [pc, #208]	; (ad80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a8>)
    acb0:	4c33      	ldr	r4, [pc, #204]	; (ad80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a8>)
    acb2:	2500      	movs	r5, #0
    acb4:	68c0      	ldr	r0, [r0, #12]
    acb6:	3410      	adds	r4, #16
    acb8:	6862      	ldr	r2, [r4, #4]
    acba:	7901      	ldrb	r1, [r0, #4]
    acbc:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    acc0:	390e      	subs	r1, #14
    acc2:	290a      	cmp	r1, #10
    acc4:	d259      	bcs.n	ad7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    acc6:	e8df f001 	tbb	[pc, r1]
    acca:	5805      	.short	0x5805
    accc:	581a5858 	.word	0x581a5858
    acd0:	442c5820 	.word	0x442c5820
    acd4:	2804      	cmp	r0, #4
    acd6:	d150      	bne.n	ad7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    acd8:	f7fe fe56 	bl	9988 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b0>
    acdc:	6860      	ldr	r0, [r4, #4]
    acde:	2205      	movs	r2, #5
    ace0:	f500 73c6 	add.w	r3, r0, #396	; 0x18c
    ace4:	8801      	ldrh	r1, [r0, #0]
    ace6:	f8a0 1198 	strh.w	r1, [r0, #408]	; 0x198
    acea:	211a      	movs	r1, #26
    acec:	f880 1196 	strb.w	r1, [r0, #406]	; 0x196
    acf0:	4601      	mov	r1, r0
    acf2:	4618      	mov	r0, r3
    acf4:	f7fc fd72 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    acf8:	f7fc fe42 	bl	7980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    acfc:	e03d      	b.n	ad7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    acfe:	280e      	cmp	r0, #14
    ad00:	d13b      	bne.n	ad7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    ad02:	f7ff fe15 	bl	a930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1458>
    ad06:	4605      	mov	r5, r0
    ad08:	e037      	b.n	ad7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    ad0a:	281c      	cmp	r0, #28
    ad0c:	d135      	bne.n	ad7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    ad0e:	f7fe fe3b 	bl	9988 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b0>
    ad12:	6860      	ldr	r0, [r4, #4]
    ad14:	2105      	movs	r1, #5
    ad16:	30d4      	adds	r0, #212	; 0xd4
    ad18:	f005 fe04 	bl	10924 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x74e>
    ad1c:	f7fe fec4 	bl	9aa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    ad20:	e02b      	b.n	ad7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    ad22:	2820      	cmp	r0, #32
    ad24:	d001      	beq.n	ad2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1852>
    ad26:	2827      	cmp	r0, #39	; 0x27
    ad28:	d127      	bne.n	ad7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    ad2a:	f7fe fe2d 	bl	9988 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b0>
    ad2e:	6860      	ldr	r0, [r4, #4]
    ad30:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ad34:	2921      	cmp	r1, #33	; 0x21
    ad36:	d020      	beq.n	ad7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    ad38:	2108      	movs	r1, #8
    ad3a:	30d4      	adds	r0, #212	; 0xd4
    ad3c:	f005 fdf2 	bl	10924 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x74e>
    ad40:	6860      	ldr	r0, [r4, #4]
    ad42:	210b      	movs	r1, #11
    ad44:	30d4      	adds	r0, #212	; 0xd4
    ad46:	f005 fded 	bl	10924 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x74e>
    ad4a:	201a      	movs	r0, #26
    ad4c:	f7ff fb76 	bl	a43c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    ad50:	e013      	b.n	ad7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    ad52:	f892 0086 	ldrb.w	r0, [r2, #134]	; 0x86
    ad56:	2822      	cmp	r0, #34	; 0x22
    ad58:	d10f      	bne.n	ad7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    ad5a:	2600      	movs	r6, #0
    ad5c:	f882 6086 	strb.w	r6, [r2, #134]	; 0x86
    ad60:	f7fe fcc8 	bl	96f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    ad64:	6860      	ldr	r0, [r4, #4]
    ad66:	f890 0124 	ldrb.w	r0, [r0, #292]	; 0x124
    ad6a:	2801      	cmp	r0, #1
    ad6c:	d102      	bne.n	ad74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x189c>
    ad6e:	2000      	movs	r0, #0
    ad70:	f7ff fb64 	bl	a43c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    ad74:	6860      	ldr	r0, [r4, #4]
    ad76:	f880 6124 	strb.w	r6, [r0, #292]	; 0x124
    ad7a:	4628      	mov	r0, r5
    ad7c:	bd70      	pop	{r4, r5, r6, pc}
    ad7e:	0000      	.short	0x0000
    ad80:	20000164 	.word	0x20000164
    ad84:	b570      	push	{r4, r5, r6, lr}
    ad86:	4c31      	ldr	r4, [pc, #196]	; (ae4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1974>)
    ad88:	6860      	ldr	r0, [r4, #4]
    ad8a:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    ad8e:	0789      	lsls	r1, r1, #30
    ad90:	d507      	bpl.n	ada2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ca>
    ad92:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ad96:	2301      	movs	r3, #1
    ad98:	2108      	movs	r1, #8
    ad9a:	3078      	adds	r0, #120	; 0x78
    ad9c:	f004 f973 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ada0:	b1f8      	cbz	r0, ade2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190a>
    ada2:	6860      	ldr	r0, [r4, #4]
    ada4:	f890 00c5 	ldrb.w	r0, [r0, #197]	; 0xc5
    ada8:	0780      	lsls	r0, r0, #30
    adaa:	d414      	bmi.n	add6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fe>
    adac:	4d27      	ldr	r5, [pc, #156]	; (ae4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1974>)
    adae:	3d10      	subs	r5, #16
    adb0:	68e8      	ldr	r0, [r5, #12]
    adb2:	f004 fbfd 	bl	f5b0 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    adb6:	6861      	ldr	r1, [r4, #4]
    adb8:	f881 00cf 	strb.w	r0, [r1, #207]	; 0xcf
    adbc:	68e8      	ldr	r0, [r5, #12]
    adbe:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    adc2:	f8a1 20d0 	strh.w	r2, [r1, #208]	; 0xd0
    adc6:	8840      	ldrh	r0, [r0, #2]
    adc8:	f8a1 00d2 	strh.w	r0, [r1, #210]	; 0xd2
    adcc:	f811 0fc5 	ldrb.w	r0, [r1, #197]!
    add0:	f040 0002 	orr.w	r0, r0, #2
    add4:	7008      	strb	r0, [r1, #0]
    add6:	6860      	ldr	r0, [r4, #4]
    add8:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    addc:	07c9      	lsls	r1, r1, #31
    adde:	d002      	beq.n	ade6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190e>
    ade0:	e015      	b.n	ae0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1936>
    ade2:	2001      	movs	r0, #1
    ade4:	bd70      	pop	{r4, r5, r6, pc}
    ade6:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    adea:	078a      	lsls	r2, r1, #30
    adec:	d504      	bpl.n	adf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1920>
    adee:	f240 21e2 	movw	r1, #738	; 0x2e2
    adf2:	2031      	movs	r0, #49	; 0x31
    adf4:	f7fa fbec 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    adf8:	f041 0102 	orr.w	r1, r1, #2
    adfc:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    ae00:	f7fe fc6c 	bl	96dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    ae04:	6860      	ldr	r0, [r4, #4]
    ae06:	f890 00c5 	ldrb.w	r0, [r0, #197]	; 0xc5
    ae0a:	07c0      	lsls	r0, r0, #31
    ae0c:	d007      	beq.n	ae1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1946>
    ae0e:	6861      	ldr	r1, [r4, #4]
    ae10:	2201      	movs	r2, #1
    ae12:	f101 00c6 	add.w	r0, r1, #198	; 0xc6
    ae16:	f7fc fce1 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    ae1a:	f7fc fdb1 	bl	7980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ae1e:	6860      	ldr	r0, [r4, #4]
    ae20:	2100      	movs	r1, #0
    ae22:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ae26:	2a06      	cmp	r2, #6
    ae28:	d103      	bne.n	ae32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x195a>
    ae2a:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    ae2e:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    ae32:	f890 212a 	ldrb.w	r2, [r0, #298]	; 0x12a
    ae36:	b132      	cbz	r2, ae46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196e>
    ae38:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
    ae3c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ae40:	b90a      	cbnz	r2, ae46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196e>
    ae42:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    ae46:	2000      	movs	r0, #0
    ae48:	bd70      	pop	{r4, r5, r6, pc}
    ae4a:	0000      	.short	0x0000
    ae4c:	20000174 	.word	0x20000174
    ae50:	b510      	push	{r4, lr}
    ae52:	4c1f      	ldr	r4, [pc, #124]	; (aed0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f8>)
    ae54:	6863      	ldr	r3, [r4, #4]
    ae56:	f893 0112 	ldrb.w	r0, [r3, #274]	; 0x112
    ae5a:	2808      	cmp	r0, #8
    ae5c:	d20d      	bcs.n	ae7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a2>
    ae5e:	f500 72f4 	add.w	r2, r0, #488	; 0x1e8
    ae62:	f1c0 0008 	rsb	r0, r0, #8
    ae66:	b2c1      	uxtb	r1, r0
    ae68:	1898      	adds	r0, r3, r2
    ae6a:	f7fa fc4f 	bl	570c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    ae6e:	6861      	ldr	r1, [r4, #4]
    ae70:	f891 2112 	ldrb.w	r2, [r1, #274]	; 0x112
    ae74:	4410      	add	r0, r2
    ae76:	f881 0112 	strb.w	r0, [r1, #274]	; 0x112
    ae7a:	6863      	ldr	r3, [r4, #4]
    ae7c:	f893 0112 	ldrb.w	r0, [r3, #274]	; 0x112
    ae80:	3808      	subs	r0, #8
    ae82:	2804      	cmp	r0, #4
    ae84:	d20d      	bcs.n	aea2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ca>
    ae86:	f500 7282 	add.w	r2, r0, #260	; 0x104
    ae8a:	f1c0 0004 	rsb	r0, r0, #4
    ae8e:	b2c1      	uxtb	r1, r0
    ae90:	1898      	adds	r0, r3, r2
    ae92:	f7fa fc3b 	bl	570c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    ae96:	6861      	ldr	r1, [r4, #4]
    ae98:	f891 2112 	ldrb.w	r2, [r1, #274]	; 0x112
    ae9c:	4410      	add	r0, r2
    ae9e:	f881 0112 	strb.w	r0, [r1, #274]	; 0x112
    aea2:	6860      	ldr	r0, [r4, #4]
    aea4:	f890 1112 	ldrb.w	r1, [r0, #274]	; 0x112
    aea8:	290c      	cmp	r1, #12
    aeaa:	d30f      	bcc.n	aecc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f4>
    aeac:	d005      	beq.n	aeba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e2>
    aeae:	f640 013b 	movw	r1, #2107	; 0x83b
    aeb2:	f04f 0031 	mov.w	r0, #49	; 0x31
    aeb6:	f7fa fb8b 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aeba:	2100      	movs	r1, #0
    aebc:	f880 1112 	strb.w	r1, [r0, #274]	; 0x112
    aec0:	2101      	movs	r1, #1
    aec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aec6:	2004      	movs	r0, #4
    aec8:	f7ff b9ac 	b.w	a224 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    aecc:	bd10      	pop	{r4, pc}
    aece:	0000      	.short	0x0000
    aed0:	20000174 	.word	0x20000174
    aed4:	4804      	ldr	r0, [pc, #16]	; (aee8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>)
    aed6:	2129      	movs	r1, #41	; 0x29
    aed8:	6840      	ldr	r0, [r0, #4]
    aeda:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    aede:	2100      	movs	r1, #0
    aee0:	f880 126c 	strb.w	r1, [r0, #620]	; 0x26c
    aee4:	4770      	bx	lr
    aee6:	0000      	.short	0x0000
    aee8:	20000174 	.word	0x20000174
    aeec:	4809      	ldr	r0, [pc, #36]	; (af14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3c>)
    aeee:	b510      	push	{r4, lr}
    aef0:	6840      	ldr	r0, [r0, #4]
    aef2:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    aef6:	2914      	cmp	r1, #20
    aef8:	d004      	beq.n	af04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2c>
    aefa:	f240 61fd 	movw	r1, #1789	; 0x6fd
    aefe:	2031      	movs	r0, #49	; 0x31
    af00:	f7fa fb66 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af04:	2101      	movs	r1, #1
    af06:	f880 10c3 	strb.w	r1, [r0, #195]	; 0xc3
    af0a:	2115      	movs	r1, #21
    af0c:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    af10:	bd10      	pop	{r4, pc}
    af12:	0000      	.short	0x0000
    af14:	20000174 	.word	0x20000174
    af18:	b510      	push	{r4, lr}
    af1a:	4c0a      	ldr	r4, [pc, #40]	; (af44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    af1c:	6860      	ldr	r0, [r4, #4]
    af1e:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    af22:	07c0      	lsls	r0, r0, #31
    af24:	d008      	beq.n	af38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a60>
    af26:	f7fe fbe5 	bl	96f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    af2a:	6860      	ldr	r0, [r4, #4]
    af2c:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    af30:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
    af34:	7001      	strb	r1, [r0, #0]
    af36:	bd10      	pop	{r4, pc}
    af38:	f44f 61dd 	mov.w	r1, #1768	; 0x6e8
    af3c:	2031      	movs	r0, #49	; 0x31
    af3e:	f7fa fb47 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af42:	0000      	.short	0x0000
    af44:	20000174 	.word	0x20000174
    af48:	b510      	push	{r4, lr}
    af4a:	4c0a      	ldr	r4, [pc, #40]	; (af74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a9c>)
    af4c:	2301      	movs	r3, #1
    af4e:	2100      	movs	r1, #0
    af50:	6860      	ldr	r0, [r4, #4]
    af52:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    af56:	3078      	adds	r0, #120	; 0x78
    af58:	f004 f895 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    af5c:	b120      	cbz	r0, af68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a90>
    af5e:	6861      	ldr	r1, [r4, #4]
    af60:	201c      	movs	r0, #28
    af62:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    af66:	bd10      	pop	{r4, pc}
    af68:	f240 7184 	movw	r1, #1924	; 0x784
    af6c:	2031      	movs	r0, #49	; 0x31
    af6e:	f7fa fb2f 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af72:	0000      	.short	0x0000
    af74:	20000174 	.word	0x20000174
    af78:	480a      	ldr	r0, [pc, #40]	; (afa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1acc>)
    af7a:	b510      	push	{r4, lr}
    af7c:	6840      	ldr	r0, [r0, #4]
    af7e:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    af82:	f3c1 1201 	ubfx	r2, r1, #4, #2
    af86:	2a01      	cmp	r2, #1
    af88:	d004      	beq.n	af94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abc>
    af8a:	f240 718b 	movw	r1, #1931	; 0x78b
    af8e:	2031      	movs	r0, #49	; 0x31
    af90:	f7fa fb1e 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af94:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    af98:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    af9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    afa0:	f7fe bba8 	b.w	96f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    afa4:	20000174 	.word	0x20000174
    afa8:	b510      	push	{r4, lr}
    afaa:	4c0a      	ldr	r4, [pc, #40]	; (afd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afc>)
    afac:	2301      	movs	r3, #1
    afae:	2100      	movs	r1, #0
    afb0:	6860      	ldr	r0, [r4, #4]
    afb2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    afb6:	3078      	adds	r0, #120	; 0x78
    afb8:	f004 f865 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    afbc:	b120      	cbz	r0, afc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
    afbe:	6861      	ldr	r1, [r4, #4]
    afc0:	200e      	movs	r0, #14
    afc2:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    afc6:	bd10      	pop	{r4, pc}
    afc8:	f240 7177 	movw	r1, #1911	; 0x777
    afcc:	2031      	movs	r0, #49	; 0x31
    afce:	f7fa faff 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    afd2:	0000      	.short	0x0000
    afd4:	20000174 	.word	0x20000174
    afd8:	4804      	ldr	r0, [pc, #16]	; (afec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b14>)
    afda:	6840      	ldr	r0, [r0, #4]
    afdc:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    afe0:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    afe4:	7001      	strb	r1, [r0, #0]
    afe6:	f7fe bb85 	b.w	96f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    afea:	0000      	.short	0x0000
    afec:	20000174 	.word	0x20000174
    aff0:	4809      	ldr	r0, [pc, #36]	; (b018 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b40>)
    aff2:	b510      	push	{r4, lr}
    aff4:	6840      	ldr	r0, [r0, #4]
    aff6:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    affa:	2910      	cmp	r1, #16
    affc:	d004      	beq.n	b008 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b30>
    affe:	f240 61f5 	movw	r1, #1781	; 0x6f5
    b002:	2031      	movs	r0, #49	; 0x31
    b004:	f7fa fae4 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b008:	2101      	movs	r1, #1
    b00a:	f880 10c3 	strb.w	r1, [r0, #195]	; 0xc3
    b00e:	2111      	movs	r1, #17
    b010:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b014:	bd10      	pop	{r4, pc}
    b016:	0000      	.short	0x0000
    b018:	20000174 	.word	0x20000174
    b01c:	b510      	push	{r4, lr}
    b01e:	4c0a      	ldr	r4, [pc, #40]	; (b048 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b70>)
    b020:	2301      	movs	r3, #1
    b022:	2100      	movs	r1, #0
    b024:	6860      	ldr	r0, [r4, #4]
    b026:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b02a:	3078      	adds	r0, #120	; 0x78
    b02c:	f004 f82b 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b030:	b120      	cbz	r0, b03c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b64>
    b032:	6861      	ldr	r1, [r4, #4]
    b034:	201f      	movs	r0, #31
    b036:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b03a:	bd10      	pop	{r4, pc}
    b03c:	f240 7197 	movw	r1, #1943	; 0x797
    b040:	2031      	movs	r0, #49	; 0x31
    b042:	f7fa fac5 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b046:	0000      	.short	0x0000
    b048:	20000174 	.word	0x20000174
    b04c:	4808      	ldr	r0, [pc, #32]	; (b070 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b98>)
    b04e:	b510      	push	{r4, lr}
    b050:	6840      	ldr	r0, [r0, #4]
    b052:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b056:	2921      	cmp	r1, #33	; 0x21
    b058:	d005      	beq.n	b066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8e>
    b05a:	b121      	cbz	r1, b066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8e>
    b05c:	f240 719e 	movw	r1, #1950	; 0x79e
    b060:	2031      	movs	r0, #49	; 0x31
    b062:	f7fa fab5 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b066:	2122      	movs	r1, #34	; 0x22
    b068:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b06c:	bd10      	pop	{r4, pc}
    b06e:	0000      	.short	0x0000
    b070:	20000174 	.word	0x20000174
    b074:	4809      	ldr	r0, [pc, #36]	; (b09c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>)
    b076:	b510      	push	{r4, lr}
    b078:	6840      	ldr	r0, [r0, #4]
    b07a:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b07e:	2928      	cmp	r1, #40	; 0x28
    b080:	d006      	beq.n	b090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bb8>
    b082:	2915      	cmp	r1, #21
    b084:	d006      	beq.n	b094 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbc>
    b086:	f240 711e 	movw	r1, #1822	; 0x71e
    b08a:	2031      	movs	r0, #49	; 0x31
    b08c:	f7fa faa0 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b090:	2100      	movs	r1, #0
    b092:	e000      	b.n	b096 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbe>
    b094:	2119      	movs	r1, #25
    b096:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b09a:	bd10      	pop	{r4, pc}
    b09c:	20000174 	.word	0x20000174
    b0a0:	4807      	ldr	r0, [pc, #28]	; (b0c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be8>)
    b0a2:	b510      	push	{r4, lr}
    b0a4:	6840      	ldr	r0, [r0, #4]
    b0a6:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b0aa:	2915      	cmp	r1, #21
    b0ac:	d004      	beq.n	b0b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be0>
    b0ae:	f240 710a 	movw	r1, #1802	; 0x70a
    b0b2:	2031      	movs	r0, #49	; 0x31
    b0b4:	f7fa fa8c 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0b8:	2119      	movs	r1, #25
    b0ba:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b0be:	bd10      	pop	{r4, pc}
    b0c0:	20000174 	.word	0x20000174
    b0c4:	b510      	push	{r4, lr}
    b0c6:	4c0a      	ldr	r4, [pc, #40]	; (b0f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c18>)
    b0c8:	2301      	movs	r3, #1
    b0ca:	2100      	movs	r1, #0
    b0cc:	6860      	ldr	r0, [r4, #4]
    b0ce:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b0d2:	3078      	adds	r0, #120	; 0x78
    b0d4:	f003 ffd7 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b0d8:	b120      	cbz	r0, b0e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c0c>
    b0da:	6861      	ldr	r1, [r4, #4]
    b0dc:	2004      	movs	r0, #4
    b0de:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b0e2:	bd10      	pop	{r4, pc}
    b0e4:	f240 61ef 	movw	r1, #1775	; 0x6ef
    b0e8:	2031      	movs	r0, #49	; 0x31
    b0ea:	f7fa fa71 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0ee:	0000      	.short	0x0000
    b0f0:	20000174 	.word	0x20000174
    b0f4:	4807      	ldr	r0, [pc, #28]	; (b114 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c3c>)
    b0f6:	b510      	push	{r4, lr}
    b0f8:	6840      	ldr	r0, [r0, #4]
    b0fa:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b0fe:	2915      	cmp	r1, #21
    b100:	d004      	beq.n	b10c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c34>
    b102:	f240 7104 	movw	r1, #1796	; 0x704
    b106:	2031      	movs	r0, #49	; 0x31
    b108:	f7fa fa62 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b10c:	2117      	movs	r1, #23
    b10e:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b112:	bd10      	pop	{r4, pc}
    b114:	20000174 	.word	0x20000174
    b118:	b538      	push	{r3, r4, r5, lr}
    b11a:	4d20      	ldr	r5, [pc, #128]	; (b19c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc4>)
    b11c:	6869      	ldr	r1, [r5, #4]
    b11e:	f891 0086 	ldrb.w	r0, [r1, #134]	; 0x86
    b122:	281b      	cmp	r0, #27
    b124:	d002      	beq.n	b12c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c54>
    b126:	f240 7137 	movw	r1, #1847	; 0x737
    b12a:	e00e      	b.n	b14a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c72>
    b12c:	2400      	movs	r4, #0
    b12e:	f881 40c3 	strb.w	r4, [r1, #195]	; 0xc3
    b132:	f891 01be 	ldrb.w	r0, [r1, #446]	; 0x1be
    b136:	f88d 0000 	strb.w	r0, [sp]
    b13a:	9800      	ldr	r0, [sp, #0]
    b13c:	9000      	str	r0, [sp, #0]
    b13e:	f89d 0000 	ldrb.w	r0, [sp]
    b142:	2201      	movs	r2, #1
    b144:	b120      	cbz	r0, b150 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c78>
    b146:	f240 713b 	movw	r1, #1851	; 0x73b
    b14a:	2031      	movs	r0, #49	; 0x31
    b14c:	f7fa fa40 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b150:	4812      	ldr	r0, [pc, #72]	; (b19c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc4>)
    b152:	f891 30c4 	ldrb.w	r3, [r1, #196]	; 0xc4
    b156:	6840      	ldr	r0, [r0, #4]
    b158:	f500 70db 	add.w	r0, r0, #438	; 0x1b6
    b15c:	b143      	cbz	r3, b170 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c98>
    b15e:	f881 40c4 	strb.w	r4, [r1, #196]	; 0xc4
    b162:	880a      	ldrh	r2, [r1, #0]
    b164:	f8a1 21c2 	strh.w	r2, [r1, #450]	; 0x1c2
    b168:	f881 41c0 	strb.w	r4, [r1, #448]	; 0x1c0
    b16c:	220a      	movs	r2, #10
    b16e:	e007      	b.n	b180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca8>
    b170:	880b      	ldrh	r3, [r1, #0]
    b172:	f8a1 31c2 	strh.w	r3, [r1, #450]	; 0x1c2
    b176:	f881 41c0 	strb.w	r4, [r1, #448]	; 0x1c0
    b17a:	f881 21c4 	strb.w	r2, [r1, #452]	; 0x1c4
    b17e:	2209      	movs	r2, #9
    b180:	f7fc fb2c 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    b184:	6868      	ldr	r0, [r5, #4]
    b186:	8800      	ldrh	r0, [r0, #0]
    b188:	f7fa fe4a 	bl	5e20 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    b18c:	f003 fb90 	bl	e8b0 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    b190:	f7fc fbf6 	bl	7980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    b194:	6868      	ldr	r0, [r5, #4]
    b196:	f880 4086 	strb.w	r4, [r0, #134]	; 0x86
    b19a:	bd38      	pop	{r3, r4, r5, pc}
    b19c:	20000174 	.word	0x20000174
    b1a0:	b510      	push	{r4, lr}
    b1a2:	4c08      	ldr	r4, [pc, #32]	; (b1c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cec>)
    b1a4:	2301      	movs	r3, #1
    b1a6:	4619      	mov	r1, r3
    b1a8:	6860      	ldr	r0, [r4, #4]
    b1aa:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    b1ae:	3078      	adds	r0, #120	; 0x78
    b1b0:	f003 ff69 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b1b4:	2800      	cmp	r0, #0
    b1b6:	d103      	bne.n	b1c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ce8>
    b1b8:	6861      	ldr	r1, [r4, #4]
    b1ba:	2008      	movs	r0, #8
    b1bc:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    b1c0:	bd10      	pop	{r4, pc}
    b1c2:	0000      	.short	0x0000
    b1c4:	20000174 	.word	0x20000174
    b1c8:	4815      	ldr	r0, [pc, #84]	; (b220 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d48>)
    b1ca:	b510      	push	{r4, lr}
    b1cc:	6880      	ldr	r0, [r0, #8]
    b1ce:	7901      	ldrb	r1, [r0, #4]
    b1d0:	4813      	ldr	r0, [pc, #76]	; (b220 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d48>)
    b1d2:	3010      	adds	r0, #16
    b1d4:	6840      	ldr	r0, [r0, #4]
    b1d6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b1da:	2a0a      	cmp	r2, #10
    b1dc:	d109      	bne.n	b1f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1a>
    b1de:	f890 2109 	ldrb.w	r2, [r0, #265]	; 0x109
    b1e2:	428a      	cmp	r2, r1
    b1e4:	d105      	bne.n	b1f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1a>
    b1e6:	2100      	movs	r1, #0
    b1e8:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b1ec:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    b1f0:	bd10      	pop	{r4, pc}
    b1f2:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    b1f6:	0713      	lsls	r3, r2, #28
    b1f8:	d507      	bpl.n	b20a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d32>
    b1fa:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
    b1fe:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    b202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b206:	f7fe ba75 	b.w	96f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    b20a:	29ff      	cmp	r1, #255	; 0xff
    b20c:	d004      	beq.n	b218 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d40>
    b20e:	f240 61e2 	movw	r1, #1762	; 0x6e2
    b212:	2031      	movs	r0, #49	; 0x31
    b214:	f7fa f9dc 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b21c:	f7ff be5a 	b.w	aed4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19fc>
    b220:	20000164 	.word	0x20000164
    b224:	b510      	push	{r4, lr}
    b226:	4c15      	ldr	r4, [pc, #84]	; (b27c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da4>)
    b228:	6860      	ldr	r0, [r4, #4]
    b22a:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    b22e:	0789      	lsls	r1, r1, #30
    b230:	d411      	bmi.n	b256 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7e>
    b232:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b236:	2301      	movs	r3, #1
    b238:	2100      	movs	r1, #0
    b23a:	3078      	adds	r0, #120	; 0x78
    b23c:	f003 ff23 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b240:	b120      	cbz	r0, b24c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d74>
    b242:	6861      	ldr	r1, [r4, #4]
    b244:	2006      	movs	r0, #6
    b246:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b24a:	e009      	b.n	b260 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d88>
    b24c:	f240 7163 	movw	r1, #1891	; 0x763
    b250:	2031      	movs	r0, #49	; 0x31
    b252:	f7fa f9bd 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b256:	2100      	movs	r1, #0
    b258:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    b25c:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
    b260:	6860      	ldr	r0, [r4, #4]
    b262:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    b266:	0780      	lsls	r0, r0, #30
    b268:	d507      	bpl.n	b27a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da2>
    b26a:	f7fe fa43 	bl	96f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    b26e:	6860      	ldr	r0, [r4, #4]
    b270:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    b274:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
    b278:	7001      	strb	r1, [r0, #0]
    b27a:	bd10      	pop	{r4, pc}
    b27c:	20000174 	.word	0x20000174
    b280:	4808      	ldr	r0, [pc, #32]	; (b2a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dcc>)
    b282:	b510      	push	{r4, lr}
    b284:	6840      	ldr	r0, [r0, #4]
    b286:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    b28a:	b941      	cbnz	r1, b29e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc6>
    b28c:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    b290:	2301      	movs	r3, #1
    b292:	2106      	movs	r1, #6
    b294:	3078      	adds	r0, #120	; 0x78
    b296:	f003 fef6 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b29a:	2800      	cmp	r0, #0
    b29c:	d000      	beq.n	b2a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc8>
    b29e:	2001      	movs	r0, #1
    b2a0:	bd10      	pop	{r4, pc}
    b2a2:	0000      	.short	0x0000
    b2a4:	20000174 	.word	0x20000174
    b2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b2aa:	4c5e      	ldr	r4, [pc, #376]	; (b424 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4c>)
    b2ac:	4607      	mov	r7, r0
    b2ae:	4615      	mov	r5, r2
    b2b0:	6860      	ldr	r0, [r4, #4]
    b2b2:	2200      	movs	r2, #0
    b2b4:	b111      	cbz	r1, b2bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1de4>
    b2b6:	f8a0 21de 	strh.w	r2, [r0, #478]	; 0x1de
    b2ba:	e006      	b.n	b2ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1df2>
    b2bc:	f8b0 11de 	ldrh.w	r1, [r0, #478]	; 0x1de
    b2c0:	f8b0 21ce 	ldrh.w	r2, [r0, #462]	; 0x1ce
    b2c4:	4411      	add	r1, r2
    b2c6:	f8a0 11de 	strh.w	r1, [r0, #478]	; 0x1de
    b2ca:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    b2ce:	f88d 1000 	strb.w	r1, [sp]
    b2d2:	9900      	ldr	r1, [sp, #0]
    b2d4:	9100      	str	r1, [sp, #0]
    b2d6:	f89d 1000 	ldrb.w	r1, [sp]
    b2da:	b939      	cbnz	r1, b2ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e14>
    b2dc:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    b2e0:	2301      	movs	r3, #1
    b2e2:	4619      	mov	r1, r3
    b2e4:	3078      	adds	r0, #120	; 0x78
    b2e6:	f003 fece 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b2ea:	b130      	cbz	r0, b2fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e22>
    b2ec:	6860      	ldr	r0, [r4, #4]
    b2ee:	f830 1fb8 	ldrh.w	r1, [r0, #184]!
    b2f2:	f8b0 2116 	ldrh.w	r2, [r0, #278]	; 0x116
    b2f6:	4411      	add	r1, r2
    b2f8:	8001      	strh	r1, [r0, #0]
    b2fa:	6861      	ldr	r1, [r4, #4]
    b2fc:	f891 00be 	ldrb.w	r0, [r1, #190]	; 0xbe
    b300:	b130      	cbz	r0, b310 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e38>
    b302:	f8b1 20ba 	ldrh.w	r2, [r1, #186]	; 0xba
    b306:	f8b1 31ce 	ldrh.w	r3, [r1, #462]	; 0x1ce
    b30a:	441a      	add	r2, r3
    b30c:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    b310:	f991 20c2 	ldrsb.w	r2, [r1, #194]	; 0xc2
    b314:	2a00      	cmp	r2, #0
    b316:	dd06      	ble.n	b326 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e4e>
    b318:	f8b1 30c0 	ldrh.w	r3, [r1, #192]	; 0xc0
    b31c:	f8b1 61ce 	ldrh.w	r6, [r1, #462]	; 0x1ce
    b320:	4433      	add	r3, r6
    b322:	f8a1 30c0 	strh.w	r3, [r1, #192]	; 0xc0
    b326:	263d      	movs	r6, #61	; 0x3d
    b328:	b117      	cbz	r7, b330 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e58>
    b32a:	f881 60a6 	strb.w	r6, [r1, #166]	; 0xa6
    b32e:	e016      	b.n	b35e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e86>
    b330:	4b3c      	ldr	r3, [pc, #240]	; (b424 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4c>)
    b332:	3b10      	subs	r3, #16
    b334:	781b      	ldrb	r3, [r3, #0]
    b336:	2b02      	cmp	r3, #2
    b338:	d00b      	beq.n	b352 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e7a>
    b33a:	2b01      	cmp	r3, #1
    b33c:	d015      	beq.n	b36a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e92>
    b33e:	b36d      	cbz	r5, b39c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ec4>
    b340:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    b344:	2208      	movs	r2, #8
    b346:	f7fc fa49 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    b34a:	06e8      	lsls	r0, r5, #27
    b34c:	d510      	bpl.n	b370 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e98>
    b34e:	201e      	movs	r0, #30
    b350:	e01b      	b.n	b38a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eb2>
    b352:	f891 010e 	ldrb.w	r0, [r1, #270]	; 0x10e
    b356:	2806      	cmp	r0, #6
    b358:	d048      	beq.n	b3ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    b35a:	2016      	movs	r0, #22
    b35c:	e046      	b.n	b3ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    b35e:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    b362:	2208      	movs	r2, #8
    b364:	f7fc fa3a 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    b368:	e049      	b.n	b3fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    b36a:	f891 0089 	ldrb.w	r0, [r1, #137]	; 0x89
    b36e:	e03d      	b.n	b3ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    b370:	0728      	lsls	r0, r5, #28
    b372:	d503      	bpl.n	b37c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ea4>
    b374:	6860      	ldr	r0, [r4, #4]
    b376:	f880 60a6 	strb.w	r6, [r0, #166]	; 0xa6
    b37a:	e040      	b.n	b3fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    b37c:	06a8      	lsls	r0, r5, #26
    b37e:	d501      	bpl.n	b384 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eac>
    b380:	2023      	movs	r0, #35	; 0x23
    b382:	e002      	b.n	b38a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eb2>
    b384:	07a8      	lsls	r0, r5, #30
    b386:	d004      	beq.n	b392 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eba>
    b388:	202a      	movs	r0, #42	; 0x2a
    b38a:	6861      	ldr	r1, [r4, #4]
    b38c:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    b390:	e035      	b.n	b3fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    b392:	f640 4173 	movw	r1, #3187	; 0xc73
    b396:	2031      	movs	r0, #49	; 0x31
    b398:	f7fa f91a 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b39c:	b128      	cbz	r0, b3aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ed2>
    b39e:	f8b1 00ba 	ldrh.w	r0, [r1, #186]	; 0xba
    b3a2:	f8b1 30bc 	ldrh.w	r3, [r1, #188]	; 0xbc
    b3a6:	4298      	cmp	r0, r3
    b3a8:	d216      	bcs.n	b3d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f00>
    b3aa:	2a00      	cmp	r2, #0
    b3ac:	dd05      	ble.n	b3ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ee2>
    b3ae:	f8b1 00c0 	ldrh.w	r0, [r1, #192]	; 0xc0
    b3b2:	f8b1 20bc 	ldrh.w	r2, [r1, #188]	; 0xbc
    b3b6:	4290      	cmp	r0, r2
    b3b8:	d20e      	bcs.n	b3d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f00>
    b3ba:	f8b1 20b8 	ldrh.w	r2, [r1, #184]	; 0xb8
    b3be:	f8b1 00b6 	ldrh.w	r0, [r1, #182]	; 0xb6
    b3c2:	4282      	cmp	r2, r0
    b3c4:	d30a      	bcc.n	b3dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f04>
    b3c6:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
    b3ca:	f88d 2000 	strb.w	r2, [sp]
    b3ce:	9a00      	ldr	r2, [sp, #0]
    b3d0:	9200      	str	r2, [sp, #0]
    b3d2:	f89d 2000 	ldrb.w	r2, [sp]
    b3d6:	b10a      	cbz	r2, b3dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f04>
    b3d8:	2022      	movs	r0, #34	; 0x22
    b3da:	e007      	b.n	b3ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    b3dc:	f891 208a 	ldrb.w	r2, [r1, #138]	; 0x8a
    b3e0:	b13a      	cbz	r2, b3f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f1a>
    b3e2:	f8b1 20b4 	ldrh.w	r2, [r1, #180]	; 0xb4
    b3e6:	4282      	cmp	r2, r0
    b3e8:	d309      	bcc.n	b3fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    b3ea:	2008      	movs	r0, #8
    b3ec:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    b3f0:	e7b5      	b.n	b35e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e86>
    b3f2:	f8b1 00b4 	ldrh.w	r0, [r1, #180]	; 0xb4
    b3f6:	2806      	cmp	r0, #6
    b3f8:	d301      	bcc.n	b3fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    b3fa:	203e      	movs	r0, #62	; 0x3e
    b3fc:	e7f6      	b.n	b3ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    b3fe:	6860      	ldr	r0, [r4, #4]
    b400:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    b404:	f88d 1000 	strb.w	r1, [sp]
    b408:	9900      	ldr	r1, [sp, #0]
    b40a:	9100      	str	r1, [sp, #0]
    b40c:	f89d 1000 	ldrb.w	r1, [sp]
    b410:	b119      	cbz	r1, b41a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f42>
    b412:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b416:	f005 bad1 	b.w	109bc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    b41a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b41e:	2100      	movs	r1, #0
    b420:	f7fd bc38 	b.w	8c94 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    b424:	20000174 	.word	0x20000174
    b428:	b570      	push	{r4, r5, r6, lr}
    b42a:	4d2e      	ldr	r5, [pc, #184]	; (b4e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200c>)
    b42c:	6868      	ldr	r0, [r5, #4]
    b42e:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    b432:	b151      	cbz	r1, b44a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f72>
    b434:	2901      	cmp	r1, #1
    b436:	d008      	beq.n	b44a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f72>
    b438:	2902      	cmp	r1, #2
    b43a:	d009      	beq.n	b450 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f78>
    b43c:	2903      	cmp	r1, #3
    b43e:	d007      	beq.n	b450 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f78>
    b440:	f640 21f1 	movw	r1, #2801	; 0xaf1
    b444:	2031      	movs	r0, #49	; 0x31
    b446:	f7fa f8c3 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b44a:	f8b0 11cc 	ldrh.w	r1, [r0, #460]	; 0x1cc
    b44e:	e037      	b.n	b4c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe8>
    b450:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    b454:	2908      	cmp	r1, #8
    b456:	d036      	beq.n	b4c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fee>
    b458:	f8b0 20b4 	ldrh.w	r2, [r0, #180]	; 0xb4
    b45c:	f8b0 10b6 	ldrh.w	r1, [r0, #182]	; 0xb6
    b460:	2400      	movs	r4, #0
    b462:	1c93      	adds	r3, r2, #2
    b464:	4299      	cmp	r1, r3
    b466:	d306      	bcc.n	b476 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f9e>
    b468:	1a89      	subs	r1, r1, r2
    b46a:	1e89      	subs	r1, r1, #2
    b46c:	040c      	lsls	r4, r1, #16
    b46e:	0c24      	lsrs	r4, r4, #16
    b470:	d001      	beq.n	b476 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f9e>
    b472:	1e64      	subs	r4, r4, #1
    b474:	b2a4      	uxth	r4, r4
    b476:	f890 10b2 	ldrb.w	r1, [r0, #178]	; 0xb2
    b47a:	b139      	cbz	r1, b48c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fb4>
    b47c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b480:	2301      	movs	r3, #1
    b482:	2109      	movs	r1, #9
    b484:	3078      	adds	r0, #120	; 0x78
    b486:	f003 fdfe 	bl	f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b48a:	b340      	cbz	r0, b4de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2006>
    b48c:	f7ff fef8 	bl	b280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da8>
    b490:	b178      	cbz	r0, b4b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fda>
    b492:	686a      	ldr	r2, [r5, #4]
    b494:	2000      	movs	r0, #0
    b496:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
    b49a:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
    b49e:	1c93      	adds	r3, r2, #2
    b4a0:	4299      	cmp	r1, r3
    b4a2:	d303      	bcc.n	b4ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fd4>
    b4a4:	1a88      	subs	r0, r1, r2
    b4a6:	1e80      	subs	r0, r0, #2
    b4a8:	d000      	beq.n	b4ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fd4>
    b4aa:	1e40      	subs	r0, r0, #1
    b4ac:	42a0      	cmp	r0, r4
    b4ae:	d200      	bcs.n	b4b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fda>
    b4b0:	b284      	uxth	r4, r0
    b4b2:	b10c      	cbz	r4, b4b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe0>
    b4b4:	1e64      	subs	r4, r4, #1
    b4b6:	b2a4      	uxth	r4, r4
    b4b8:	6868      	ldr	r0, [r5, #4]
    b4ba:	f8b0 11cc 	ldrh.w	r1, [r0, #460]	; 0x1cc
    b4be:	4421      	add	r1, r4
    b4c0:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    b4c4:	bd70      	pop	{r4, r5, r6, pc}
    b4c6:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    b4ca:	2903      	cmp	r1, #3
    b4cc:	d3bd      	bcc.n	b44a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f72>
    b4ce:	f830 1f7c 	ldrh.w	r1, [r0, #124]!
    b4d2:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    b4d4:	4411      	add	r1, r2
    b4d6:	1c49      	adds	r1, r1, #1
    b4d8:	f8a0 114c 	strh.w	r1, [r0, #332]	; 0x14c
    b4dc:	bd70      	pop	{r4, r5, r6, pc}
    b4de:	2400      	movs	r4, #0
    b4e0:	e7ea      	b.n	b4b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe0>
    b4e2:	0000      	.short	0x0000
    b4e4:	20000174 	.word	0x20000174

0000b4e8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    b4e8:	4903      	ldr	r1, [pc, #12]	; (b4f8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    b4ea:	884a      	ldrh	r2, [r1, #2]
    b4ec:	8002      	strh	r2, [r0, #0]
    b4ee:	7809      	ldrb	r1, [r1, #0]
    b4f0:	7081      	strb	r1, [r0, #2]
    b4f2:	2000      	movs	r0, #0
    b4f4:	4770      	bx	lr
    b4f6:	0000      	.short	0x0000
    b4f8:	20001354 	.word	0x20001354

0000b4fc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    b4fc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b4fe:	460c      	mov	r4, r1
    b500:	4605      	mov	r5, r0
    b502:	8800      	ldrh	r0, [r0, #0]
    b504:	4669      	mov	r1, sp
    b506:	f003 fd94 	bl	f032 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b50a:	2200      	movs	r2, #0
    b50c:	b128      	cbz	r0, b51a <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    b50e:	f8c4 2002 	str.w	r2, [r4, #2]
    b512:	71a2      	strb	r2, [r4, #6]
    b514:	8022      	strh	r2, [r4, #0]
    b516:	2002      	movs	r0, #2
    b518:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b51a:	9901      	ldr	r1, [sp, #4]
    b51c:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    b520:	f881 2064 	strb.w	r2, [r1, #100]	; 0x64
    b524:	f8d1 0017 	ldr.w	r0, [r1, #23]
    b528:	f8c4 0002 	str.w	r0, [r4, #2]
    b52c:	7ec8      	ldrb	r0, [r1, #27]
    b52e:	71a0      	strb	r0, [r4, #6]
    b530:	8828      	ldrh	r0, [r5, #0]
    b532:	8020      	strh	r0, [r4, #0]
    b534:	f891 0064 	ldrb.w	r0, [r1, #100]	; 0x64
    b538:	f88d 0008 	strb.w	r0, [sp, #8]
    b53c:	9802      	ldr	r0, [sp, #8]
    b53e:	9002      	str	r0, [sp, #8]
    b540:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b544:	2800      	cmp	r0, #0
    b546:	d1eb      	bne.n	b520 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    b548:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

0000b54c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    b54c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    b54e:	460d      	mov	r5, r1
    b550:	4606      	mov	r6, r0
    b552:	8800      	ldrh	r0, [r0, #0]
    b554:	4669      	mov	r1, sp
    b556:	f003 fd6c 	bl	f032 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b55a:	2800      	cmp	r0, #0
    b55c:	d11a      	bne.n	b594 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    b55e:	f8dd 4004 	ldr.w	r4, [sp, #4]
    b562:	2700      	movs	r7, #0
    b564:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
    b568:	f814 0f6e 	ldrb.w	r0, [r4, #110]!
    b56c:	f005 ff78 	bl	11460 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    b570:	70a8      	strb	r0, [r5, #2]
    b572:	7860      	ldrb	r0, [r4, #1]
    b574:	f005 ff74 	bl	11460 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    b578:	70e8      	strb	r0, [r5, #3]
    b57a:	78a0      	ldrb	r0, [r4, #2]
    b57c:	f88d 0008 	strb.w	r0, [sp, #8]
    b580:	9802      	ldr	r0, [sp, #8]
    b582:	9002      	str	r0, [sp, #8]
    b584:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b588:	3c6e      	subs	r4, #110	; 0x6e
    b58a:	2800      	cmp	r0, #0
    b58c:	d1ea      	bne.n	b564 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    b58e:	8830      	ldrh	r0, [r6, #0]
    b590:	8028      	strh	r0, [r5, #0]
    b592:	2000      	movs	r0, #0
    b594:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000b598 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    b598:	4903      	ldr	r1, [pc, #12]	; (b5a8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    b59a:	888a      	ldrh	r2, [r1, #4]
    b59c:	8002      	strh	r2, [r0, #0]
    b59e:	88c9      	ldrh	r1, [r1, #6]
    b5a0:	8041      	strh	r1, [r0, #2]
    b5a2:	2000      	movs	r0, #0
    b5a4:	4770      	bx	lr
    b5a6:	0000      	.short	0x0000
    b5a8:	200002b4 	.word	0x200002b4

0000b5ac <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    b5ac:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b5ae:	2400      	movs	r4, #0
    b5b0:	a902      	add	r1, sp, #8
    b5b2:	f88d 4004 	strb.w	r4, [sp, #4]
    b5b6:	f88d 4008 	strb.w	r4, [sp, #8]
    b5ba:	9100      	str	r1, [sp, #0]
    b5bc:	7882      	ldrb	r2, [r0, #2]
    b5be:	7841      	ldrb	r1, [r0, #1]
    b5c0:	7800      	ldrb	r0, [r0, #0]
    b5c2:	ab01      	add	r3, sp, #4
    b5c4:	f006 f8de 	bl	11784 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
    b5c8:	2800      	cmp	r0, #0
    b5ca:	d112      	bne.n	b5f2 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    b5cc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b5d0:	f006 f812 	bl	115f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
    b5d4:	b170      	cbz	r0, b5f4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    b5d6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b5da:	f006 f80d 	bl	115f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
    b5de:	b148      	cbz	r0, b5f4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    b5e0:	4805      	ldr	r0, [pc, #20]	; (b5f8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    b5e2:	f89d 1004 	ldrb.w	r1, [sp, #4]
    b5e6:	7381      	strb	r1, [r0, #14]
    b5e8:	f89d 1008 	ldrb.w	r1, [sp, #8]
    b5ec:	73c1      	strb	r1, [r0, #15]
    b5ee:	8204      	strh	r4, [r0, #16]
    b5f0:	2000      	movs	r0, #0
    b5f2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b5f4:	2011      	movs	r0, #17
    b5f6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b5f8:	20001354 	.word	0x20001354

0000b5fc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    b5fc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    b600:	460f      	mov	r7, r1
    b602:	4605      	mov	r5, r0
    b604:	7806      	ldrb	r6, [r0, #0]
    b606:	f005 ffaa 	bl	1155e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x12c>
    b60a:	2800      	cmp	r0, #0
    b60c:	d10a      	bne.n	b624 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    b60e:	4628      	mov	r0, r5
    b610:	f005 ff7f 	bl	11512 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
    b614:	2800      	cmp	r0, #0
    b616:	d105      	bne.n	b624 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    b618:	2001      	movs	r0, #1
    b61a:	f7fa f9cf 	bl	59bc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    b61e:	4286      	cmp	r6, r0
    b620:	d302      	bcc.n	b628 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    b622:	2007      	movs	r0, #7
    b624:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    b628:	2101      	movs	r1, #1
    b62a:	4630      	mov	r0, r6
    b62c:	f003 fa64 	bl	eaf8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    b630:	0004      	movs	r4, r0
    b632:	d004      	beq.n	b63e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    b634:	f004 fdb5 	bl	101a2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    b638:	b170      	cbz	r0, b658 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5c>
    b63a:	200c      	movs	r0, #12
    b63c:	e7f2      	b.n	b624 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    b63e:	2200      	movs	r2, #0
    b640:	2101      	movs	r1, #1
    b642:	4630      	mov	r0, r6
    b644:	f003 fa4e 	bl	eae4 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    b648:	0004      	movs	r4, r0
    b64a:	d013      	beq.n	b674 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x78>
    b64c:	4817      	ldr	r0, [pc, #92]	; (b6ac <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xb0>)
    b64e:	f990 1000 	ldrsb.w	r1, [r0]
    b652:	4620      	mov	r0, r4
    b654:	f004 fb41 	bl	fcda <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    b658:	4620      	mov	r0, r4
    b65a:	f004 fbea 	bl	fe32 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    b65e:	7038      	strb	r0, [r7, #0]
    b660:	74e8      	strb	r0, [r5, #19]
    b662:	4629      	mov	r1, r5
    b664:	4620      	mov	r0, r4
    b666:	f7fc fb89 	bl	7d7c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    b66a:	4606      	mov	r6, r0
    b66c:	7e68      	ldrb	r0, [r5, #25]
    b66e:	b1d0      	cbz	r0, b6a6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xaa>
    b670:	b12e      	cbz	r6, b67e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x82>
    b672:	e018      	b.n	b6a6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xaa>
    b674:	f241 215a 	movw	r1, #4698	; 0x125a
    b678:	2039      	movs	r0, #57	; 0x39
    b67a:	f7f9 ffa9 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b67e:	2200      	movs	r2, #0
    b680:	4668      	mov	r0, sp
    b682:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    b684:	f003 fafc 	bl	ec80 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    b688:	2200      	movs	r2, #0
    b68a:	2101      	movs	r1, #1
    b68c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b68e:	f003 fb6d 	bl	ed6c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    b692:	2204      	movs	r2, #4
    b694:	4668      	mov	r0, sp
    b696:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    b698:	f003 faf2 	bl	ec80 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    b69c:	2200      	movs	r2, #0
    b69e:	4611      	mov	r1, r2
    b6a0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b6a2:	f003 fb63 	bl	ed6c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    b6a6:	4630      	mov	r0, r6
    b6a8:	e7bc      	b.n	b624 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    b6aa:	0000      	.short	0x0000
    b6ac:	200002ac 	.word	0x200002ac

0000b6b0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    b6b0:	7801      	ldrb	r1, [r0, #0]
    b6b2:	b171      	cbz	r1, b6d2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b6b4:	7841      	ldrb	r1, [r0, #1]
    b6b6:	b161      	cbz	r1, b6d2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b6b8:	8841      	ldrh	r1, [r0, #2]
    b6ba:	291b      	cmp	r1, #27
    b6bc:	d309      	bcc.n	b6d2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b6be:	8881      	ldrh	r1, [r0, #4]
    b6c0:	291b      	cmp	r1, #27
    b6c2:	d306      	bcc.n	b6d2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b6c4:	4904      	ldr	r1, [pc, #16]	; (b6d8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    b6c6:	6802      	ldr	r2, [r0, #0]
    b6c8:	600a      	str	r2, [r1, #0]
    b6ca:	8880      	ldrh	r0, [r0, #4]
    b6cc:	8088      	strh	r0, [r1, #4]
    b6ce:	2000      	movs	r0, #0
    b6d0:	4770      	bx	lr
    b6d2:	2012      	movs	r0, #18
    b6d4:	4770      	bx	lr
    b6d6:	0000      	.short	0x0000
    b6d8:	20001354 	.word	0x20001354

0000b6dc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    b6dc:	6800      	ldr	r0, [r0, #0]
    b6de:	f240 41e2 	movw	r1, #1250	; 0x4e2
    b6e2:	4288      	cmp	r0, r1
    b6e4:	d303      	bcc.n	b6ee <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    b6e6:	4903      	ldr	r1, [pc, #12]	; (b6f4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    b6e8:	6088      	str	r0, [r1, #8]
    b6ea:	2000      	movs	r0, #0
    b6ec:	4770      	bx	lr
    b6ee:	2012      	movs	r0, #18
    b6f0:	4770      	bx	lr
    b6f2:	0000      	.short	0x0000
    b6f4:	20001354 	.word	0x20001354

0000b6f8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    b6f8:	4a03      	ldr	r2, [pc, #12]	; (b708 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    b6fa:	e9d2 1200 	ldrd	r1, r2, [r2]
    b6fe:	6001      	str	r1, [r0, #0]
    b700:	6042      	str	r2, [r0, #4]
    b702:	2000      	movs	r0, #0
    b704:	4770      	bx	lr
    b706:	0000      	.short	0x0000
    b708:	0000bb64 	.word	0x0000bb64

0000b70c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    b70c:	b510      	push	{r4, lr}
    b70e:	2005      	movs	r0, #5
    b710:	f000 faa2 	bl	bc58 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    b714:	f7fd fe38 	bl	9388 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    b718:	4902      	ldr	r1, [pc, #8]	; (b724 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    b71a:	4801      	ldr	r0, [pc, #4]	; (b720 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    b71c:	6048      	str	r0, [r1, #4]
    b71e:	bd10      	pop	{r4, pc}
    b720:	0000b729 	.word	0x0000b729
    b724:	200002ac 	.word	0x200002ac
    b728:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    b72c:	4613      	mov	r3, r2
    b72e:	4a33      	ldr	r2, [pc, #204]	; (b7fc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf0>)
    b730:	460f      	mov	r7, r1
    b732:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
    b736:	8814      	ldrh	r4, [r2, #0]
    b738:	f8b0 6056 	ldrh.w	r6, [r0, #86]	; 0x56
    b73c:	428c      	cmp	r4, r1
    b73e:	d200      	bcs.n	b742 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    b740:	4621      	mov	r1, r4
    b742:	4688      	mov	r8, r1
    b744:	8891      	ldrh	r1, [r2, #4]
    b746:	42b1      	cmp	r1, r6
    b748:	d200      	bcs.n	b74c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x40>
    b74a:	460e      	mov	r6, r1
    b74c:	8851      	ldrh	r1, [r2, #2]
    b74e:	f640 0448 	movw	r4, #2120	; 0x848
    b752:	42a1      	cmp	r1, r4
    b754:	d300      	bcc.n	b758 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x4c>
    b756:	4621      	mov	r1, r4
    b758:	88d5      	ldrh	r5, [r2, #6]
    b75a:	42a5      	cmp	r5, r4
    b75c:	d300      	bcc.n	b760 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x54>
    b75e:	4625      	mov	r5, r4
    b760:	42a1      	cmp	r1, r4
    b762:	d200      	bcs.n	b766 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x5a>
    b764:	460c      	mov	r4, r1
    b766:	f44f 72a4 	mov.w	r2, #328	; 0x148
    b76a:	2e1b      	cmp	r6, #27
    b76c:	d001      	beq.n	b772 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x66>
    b76e:	4295      	cmp	r5, r2
    b770:	d104      	bne.n	b77c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x70>
    b772:	f1b8 0f1b 	cmp.w	r8, #27
    b776:	d03e      	beq.n	b7f6 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    b778:	4294      	cmp	r4, r2
    b77a:	d03c      	beq.n	b7f6 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    b77c:	466a      	mov	r2, sp
    b77e:	4619      	mov	r1, r3
    b780:	f005 ff5d 	bl	1163e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
    b784:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    b788:	4641      	mov	r1, r8
    b78a:	4540      	cmp	r0, r8
    b78c:	d900      	bls.n	b790 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x84>
    b78e:	4608      	mov	r0, r1
    b790:	80f8      	strh	r0, [r7, #6]
    b792:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    b796:	42a1      	cmp	r1, r4
    b798:	d800      	bhi.n	b79c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x90>
    b79a:	460c      	mov	r4, r1
    b79c:	813c      	strh	r4, [r7, #8]
    b79e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    b7a2:	42b1      	cmp	r1, r6
    b7a4:	d800      	bhi.n	b7a8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x9c>
    b7a6:	460e      	mov	r6, r1
    b7a8:	807e      	strh	r6, [r7, #2]
    b7aa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b7ae:	42a9      	cmp	r1, r5
    b7b0:	d800      	bhi.n	b7b4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xa8>
    b7b2:	460d      	mov	r5, r1
    b7b4:	80bd      	strh	r5, [r7, #4]
    b7b6:	21ff      	movs	r1, #255	; 0xff
    b7b8:	7039      	strb	r1, [r7, #0]
    b7ba:	381b      	subs	r0, #27
    b7bc:	28e0      	cmp	r0, #224	; 0xe0
    b7be:	d902      	bls.n	b7c6 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xba>
    b7c0:	f640 41b8 	movw	r1, #3256	; 0xcb8
    b7c4:	e014      	b.n	b7f0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe4>
    b7c6:	3e1b      	subs	r6, #27
    b7c8:	2ee0      	cmp	r6, #224	; 0xe0
    b7ca:	d902      	bls.n	b7d2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xc6>
    b7cc:	f640 41ba 	movw	r1, #3258	; 0xcba
    b7d0:	e00e      	b.n	b7f0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe4>
    b7d2:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    b7d6:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    b7da:	4284      	cmp	r4, r0
    b7dc:	d902      	bls.n	b7e4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xd8>
    b7de:	f640 41bc 	movw	r1, #3260	; 0xcbc
    b7e2:	e005      	b.n	b7f0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe4>
    b7e4:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    b7e8:	4285      	cmp	r5, r0
    b7ea:	d904      	bls.n	b7f6 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    b7ec:	f640 41be 	movw	r1, #3262	; 0xcbe
    b7f0:	2039      	movs	r0, #57	; 0x39
    b7f2:	f7f9 feed 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7f6:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    b7fa:	0000      	.short	0x0000
    b7fc:	200002b4 	.word	0x200002b4
    b800:	b510      	push	{r4, lr}
    b802:	480e      	ldr	r0, [pc, #56]	; (b83c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x130>)
    b804:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b808:	4b0d      	ldr	r3, [pc, #52]	; (b840 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x134>)
    b80a:	8281      	strh	r1, [r0, #20]
    b80c:	2100      	movs	r1, #0
    b80e:	7581      	strb	r1, [r0, #22]
    b810:	8301      	strh	r1, [r0, #24]
    b812:	221b      	movs	r2, #27
    b814:	801a      	strh	r2, [r3, #0]
    b816:	f44f 74a4 	mov.w	r4, #328	; 0x148
    b81a:	805c      	strh	r4, [r3, #2]
    b81c:	809a      	strh	r2, [r3, #4]
    b81e:	80dc      	strh	r4, [r3, #6]
    b820:	7381      	strb	r1, [r0, #14]
    b822:	73c1      	strb	r1, [r0, #15]
    b824:	2303      	movs	r3, #3
    b826:	7003      	strb	r3, [r0, #0]
    b828:	2302      	movs	r3, #2
    b82a:	7043      	strb	r3, [r0, #1]
    b82c:	8042      	strh	r2, [r0, #2]
    b82e:	8082      	strh	r2, [r0, #4]
    b830:	f640 62a6 	movw	r2, #3750	; 0xea6
    b834:	6082      	str	r2, [r0, #8]
    b836:	7481      	strb	r1, [r0, #18]
    b838:	7301      	strb	r1, [r0, #12]
    b83a:	bd10      	pop	{r4, pc}
    b83c:	20001354 	.word	0x20001354
    b840:	200002b4 	.word	0x200002b4
    b844:	b510      	push	{r4, lr}
    b846:	2101      	movs	r1, #1
    b848:	2000      	movs	r0, #0
    b84a:	f003 f955 	bl	eaf8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    b84e:	0004      	movs	r4, r0
    b850:	d10c      	bne.n	b86c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    b852:	2200      	movs	r2, #0
    b854:	2101      	movs	r1, #1
    b856:	4610      	mov	r0, r2
    b858:	f003 f944 	bl	eae4 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    b85c:	0004      	movs	r4, r0
    b85e:	d007      	beq.n	b870 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x164>
    b860:	4806      	ldr	r0, [pc, #24]	; (b87c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x170>)
    b862:	f990 1000 	ldrsb.w	r1, [r0]
    b866:	4620      	mov	r0, r4
    b868:	f004 fa37 	bl	fcda <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    b86c:	4620      	mov	r0, r4
    b86e:	bd10      	pop	{r4, pc}
    b870:	f240 2135 	movw	r1, #565	; 0x235
    b874:	2039      	movs	r0, #57	; 0x39
    b876:	f7f9 feab 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b87a:	0000      	.short	0x0000
    b87c:	200002ac 	.word	0x200002ac

0000b880 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    b880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b884:	b088      	sub	sp, #32
    b886:	460c      	mov	r4, r1
    b888:	4606      	mov	r6, r0
    b88a:	f004 fad5 	bl	fe38 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    b88e:	b198      	cbz	r0, b8b8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    b890:	4630      	mov	r0, r6
    b892:	f004 fac4 	bl	fe1e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    b896:	b130      	cbz	r0, b8a6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    b898:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    b89c:	2012      	movs	r0, #18
    b89e:	2900      	cmp	r1, #0
    b8a0:	d00b      	beq.n	b8ba <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b8a2:	2980      	cmp	r1, #128	; 0x80
    b8a4:	d809      	bhi.n	b8ba <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b8a6:	4630      	mov	r0, r6
    b8a8:	f004 faa8 	bl	fdfc <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    b8ac:	b140      	cbz	r0, b8c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b8ae:	4630      	mov	r0, r6
    b8b0:	f004 f9dd 	bl	fc6e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    b8b4:	b130      	cbz	r0, b8c4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    b8b6:	e009      	b.n	b8cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    b8b8:	2042      	movs	r0, #66	; 0x42
    b8ba:	b008      	add	sp, #32
    b8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b8c0:	200c      	movs	r0, #12
    b8c2:	e7fa      	b.n	b8ba <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b8c4:	4630      	mov	r0, r6
    b8c6:	f004 faa4 	bl	fe12 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    b8ca:	b3c0      	cbz	r0, b93e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    b8cc:	4630      	mov	r0, r6
    b8ce:	f004 fc68 	bl	101a2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    b8d2:	2800      	cmp	r0, #0
    b8d4:	d1f4      	bne.n	b8c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b8d6:	4630      	mov	r0, r6
    b8d8:	f004 f9e4 	bl	fca4 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    b8dc:	2800      	cmp	r0, #0
    b8de:	d1ef      	bne.n	b8c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b8e0:	4630      	mov	r0, r6
    b8e2:	f7fc f9e9 	bl	7cb8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    b8e6:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    b8ea:	f242 7110 	movw	r1, #10000	; 0x2710
    b8ee:	fb00 f801 	mul.w	r8, r0, r1
    b8f2:	78e1      	ldrb	r1, [r4, #3]
    b8f4:	4630      	mov	r0, r6
    b8f6:	f004 fa78 	bl	fdea <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    b8fa:	4630      	mov	r0, r6
    b8fc:	f004 fa8b 	bl	fe16 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    b900:	b300      	cbz	r0, b944 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    b902:	2200      	movs	r2, #0
    b904:	4611      	mov	r1, r2
    b906:	a801      	add	r0, sp, #4
    b908:	f7fa f8cc 	bl	5aa4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    b90c:	0004      	movs	r4, r0
    b90e:	d06d      	beq.n	b9ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16c>
    b910:	2100      	movs	r1, #0
    b912:	f7fb fd6d 	bl	73f0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    b916:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b91a:	8020      	strh	r0, [r4, #0]
    b91c:	4621      	mov	r1, r4
    b91e:	4630      	mov	r0, r6
    b920:	f004 fa9d 	bl	fe5e <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    b924:	f000 f9a4 	bl	bc70 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    b928:	0940      	lsrs	r0, r0, #5
    b92a:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    b92e:	07c0      	lsls	r0, r0, #31
    b930:	4d3a      	ldr	r5, [pc, #232]	; (ba1c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>)
    b932:	f104 0030 	add.w	r0, r4, #48	; 0x30
    b936:	d00f      	beq.n	b958 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd8>
    b938:	8869      	ldrh	r1, [r5, #2]
    b93a:	88aa      	ldrh	r2, [r5, #4]
    b93c:	e00e      	b.n	b95c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xdc>
    b93e:	e7ff      	b.n	b940 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc0>
    b940:	2012      	movs	r0, #18
    b942:	e7ba      	b.n	b8ba <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b944:	4642      	mov	r2, r8
    b946:	2100      	movs	r1, #0
    b948:	4630      	mov	r0, r6
    b94a:	f7fd f8b1 	bl	8ab0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    b94e:	2800      	cmp	r0, #0
    b950:	d0b3      	beq.n	b8ba <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b952:	f241 417b 	movw	r1, #5243	; 0x147b
    b956:	e053      	b.n	ba00 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    b958:	211b      	movs	r1, #27
    b95a:	460a      	mov	r2, r1
    b95c:	84c1      	strh	r1, [r0, #38]	; 0x26
    b95e:	8502      	strh	r2, [r0, #40]	; 0x28
    b960:	68a8      	ldr	r0, [r5, #8]
    b962:	6320      	str	r0, [r4, #48]	; 0x30
    b964:	f641 574c 	movw	r7, #7500	; 0x1d4c
    b968:	4630      	mov	r0, r6
    b96a:	f004 fa5c 	bl	fe26 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    b96e:	b910      	cbnz	r0, b976 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf6>
    b970:	4630      	mov	r0, r6
    b972:	f004 fa72 	bl	fe5a <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    b976:	6127      	str	r7, [r4, #16]
    b978:	8821      	ldrh	r1, [r4, #0]
    b97a:	f8ad 1008 	strh.w	r1, [sp, #8]
    b97e:	7ba9      	ldrb	r1, [r5, #14]
    b980:	f88d 100a 	strb.w	r1, [sp, #10]
    b984:	7be9      	ldrb	r1, [r5, #15]
    b986:	f88d 100b 	strb.w	r1, [sp, #11]
    b98a:	8a29      	ldrh	r1, [r5, #16]
    b98c:	f8ad 100c 	strh.w	r1, [sp, #12]
    b990:	a905      	add	r1, sp, #20
    b992:	9100      	str	r1, [sp, #0]
    b994:	2001      	movs	r0, #1
    b996:	ab04      	add	r3, sp, #16
    b998:	aa02      	add	r2, sp, #8
    b99a:	4621      	mov	r1, r4
    b99c:	f005 fe85 	bl	116aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x278>
    b9a0:	b140      	cbz	r0, b9b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x134>
    b9a2:	2100      	movs	r1, #0
    b9a4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b9a8:	f7fa f8a6 	bl	5af8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    b9ac:	b1f0      	cbz	r0, b9ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16c>
    b9ae:	f241 41cb 	movw	r1, #5323	; 0x14cb
    b9b2:	e025      	b.n	ba00 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    b9b4:	f89d 0010 	ldrb.w	r0, [sp, #16]
    b9b8:	f88d 0018 	strb.w	r0, [sp, #24]
    b9bc:	f89d 0014 	ldrb.w	r0, [sp, #20]
    b9c0:	f88d 0019 	strb.w	r0, [sp, #25]
    b9c4:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    b9c8:	f8ad 001a 	strh.w	r0, [sp, #26]
    b9cc:	a906      	add	r1, sp, #24
    b9ce:	4620      	mov	r0, r4
    b9d0:	f003 fbef 	bl	f1b2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    b9d4:	7868      	ldrb	r0, [r5, #1]
    b9d6:	9000      	str	r0, [sp, #0]
    b9d8:	782b      	ldrb	r3, [r5, #0]
    b9da:	88aa      	ldrh	r2, [r5, #4]
    b9dc:	8869      	ldrh	r1, [r5, #2]
    b9de:	8820      	ldrh	r0, [r4, #0]
    b9e0:	f7fa f956 	bl	5c90 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    b9e4:	b120      	cbz	r0, b9f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x170>
    b9e6:	f241 41d6 	movw	r1, #5334	; 0x14d6
    b9ea:	e009      	b.n	ba00 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    b9ec:	2009      	movs	r0, #9
    b9ee:	e764      	b.n	b8ba <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b9f0:	4642      	mov	r2, r8
    b9f2:	4621      	mov	r1, r4
    b9f4:	4630      	mov	r0, r6
    b9f6:	f7fd f85b 	bl	8ab0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    b9fa:	b120      	cbz	r0, ba06 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x186>
    b9fc:	f241 41d8 	movw	r1, #5336	; 0x14d8
    ba00:	2039      	movs	r0, #57	; 0x39
    ba02:	f7f9 fde5 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba06:	4806      	ldr	r0, [pc, #24]	; (ba20 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a0>)
    ba08:	6843      	ldr	r3, [r0, #4]
    ba0a:	b123      	cbz	r3, ba16 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x196>
    ba0c:	2200      	movs	r2, #0
    ba0e:	f504 718d 	add.w	r1, r4, #282	; 0x11a
    ba12:	4620      	mov	r0, r4
    ba14:	4798      	blx	r3
    ba16:	2000      	movs	r0, #0
    ba18:	e74f      	b.n	b8ba <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ba1a:	0000      	.short	0x0000
    ba1c:	20001354 	.word	0x20001354
    ba20:	200002ac 	.word	0x200002ac
    ba24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba28:	b088      	sub	sp, #32
    ba2a:	4604      	mov	r4, r0
    ba2c:	8800      	ldrh	r0, [r0, #0]
    ba2e:	a906      	add	r1, sp, #24
    ba30:	f003 faff 	bl	f032 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ba34:	2800      	cmp	r0, #0
    ba36:	d147      	bne.n	bac8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    ba38:	9807      	ldr	r0, [sp, #28]
    ba3a:	f890 1162 	ldrb.w	r1, [r0, #354]	; 0x162
    ba3e:	f88d 1008 	strb.w	r1, [sp, #8]
    ba42:	9902      	ldr	r1, [sp, #8]
    ba44:	9102      	str	r1, [sp, #8]
    ba46:	f89d 1008 	ldrb.w	r1, [sp, #8]
    ba4a:	3078      	adds	r0, #120	; 0x78
    ba4c:	b101      	cbz	r1, ba50 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>
    ba4e:	2101      	movs	r1, #1
    ba50:	f88d 100c 	strb.w	r1, [sp, #12]
    ba54:	7bc1      	ldrb	r1, [r0, #15]
    ba56:	f04f 0800 	mov.w	r8, #0
    ba5a:	0689      	lsls	r1, r1, #26
    ba5c:	d502      	bpl.n	ba64 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e4>
    ba5e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    ba62:	b149      	cbz	r1, ba78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f8>
    ba64:	f05f 0100 	movs.w	r1, #0
    ba68:	f88d 1004 	strb.w	r1, [sp, #4]
    ba6c:	2105      	movs	r1, #5
    ba6e:	305c      	adds	r0, #92	; 0x5c
    ba70:	f004 ffe8 	bl	10a44 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x88>
    ba74:	b110      	cbz	r0, ba7c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1fc>
    ba76:	e004      	b.n	ba82 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x202>
    ba78:	2101      	movs	r1, #1
    ba7a:	e7f5      	b.n	ba68 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e8>
    ba7c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ba80:	b308      	cbz	r0, bac6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    ba82:	8921      	ldrh	r1, [r4, #8]
    ba84:	88e0      	ldrh	r0, [r4, #6]
    ba86:	f005 fdcc 	bl	11622 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    ba8a:	2800      	cmp	r0, #0
    ba8c:	d11c      	bne.n	bac8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    ba8e:	88a1      	ldrh	r1, [r4, #4]
    ba90:	8860      	ldrh	r0, [r4, #2]
    ba92:	f005 fdc6 	bl	11622 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    ba96:	2800      	cmp	r0, #0
    ba98:	d116      	bne.n	bac8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    ba9a:	8921      	ldrh	r1, [r4, #8]
    ba9c:	88e0      	ldrh	r0, [r4, #6]
    ba9e:	f005 fdb6 	bl	1160e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    baa2:	2800      	cmp	r0, #0
    baa4:	d110      	bne.n	bac8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    baa6:	88a1      	ldrh	r1, [r4, #4]
    baa8:	8860      	ldrh	r0, [r4, #2]
    baaa:	f005 fdb0 	bl	1160e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    baae:	0006      	movs	r6, r0
    bab0:	d10a      	bne.n	bac8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    bab2:	9807      	ldr	r0, [sp, #28]
    bab4:	f500 758d 	add.w	r5, r0, #282	; 0x11a
    bab8:	27ff      	movs	r7, #255	; 0xff
    baba:	706f      	strb	r7, [r5, #1]
    babc:	f89d 100c 	ldrb.w	r1, [sp, #12]
    bac0:	b129      	cbz	r1, bace <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24e>
    bac2:	263a      	movs	r6, #58	; 0x3a
    bac4:	e02e      	b.n	bb24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    bac6:	201a      	movs	r0, #26
    bac8:	b008      	add	sp, #32
    baca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bace:	4641      	mov	r1, r8
    bad0:	aa03      	add	r2, sp, #12
    bad2:	f005 fdb4 	bl	1163e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
    bad6:	8861      	ldrh	r1, [r4, #2]
    bad8:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    badc:	4281      	cmp	r1, r0
    bade:	d200      	bcs.n	bae2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x262>
    bae0:	4608      	mov	r0, r1
    bae2:	80e8      	strh	r0, [r5, #6]
    bae4:	88a1      	ldrh	r1, [r4, #4]
    bae6:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    baea:	4281      	cmp	r1, r0
    baec:	d200      	bcs.n	baf0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x270>
    baee:	4608      	mov	r0, r1
    baf0:	8128      	strh	r0, [r5, #8]
    baf2:	88e2      	ldrh	r2, [r4, #6]
    baf4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    baf8:	428a      	cmp	r2, r1
    bafa:	d200      	bcs.n	bafe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x27e>
    bafc:	4611      	mov	r1, r2
    bafe:	8069      	strh	r1, [r5, #2]
    bb00:	8922      	ldrh	r2, [r4, #8]
    bb02:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    bb06:	428a      	cmp	r2, r1
    bb08:	d200      	bcs.n	bb0c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28c>
    bb0a:	4611      	mov	r1, r2
    bb0c:	f640 0248 	movw	r2, #2120	; 0x848
    bb10:	80a9      	strh	r1, [r5, #4]
    bb12:	4291      	cmp	r1, r2
    bb14:	d300      	bcc.n	bb18 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    bb16:	4611      	mov	r1, r2
    bb18:	80a9      	strh	r1, [r5, #4]
    bb1a:	4290      	cmp	r0, r2
    bb1c:	d200      	bcs.n	bb20 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a0>
    bb1e:	4602      	mov	r2, r0
    bb20:	812a      	strh	r2, [r5, #8]
    bb22:	702f      	strb	r7, [r5, #0]
    bb24:	f885 8001 	strb.w	r8, [r5, #1]
    bb28:	4630      	mov	r0, r6
    bb2a:	e7cd      	b.n	bac8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    bb2c:	b510      	push	{r4, lr}
    bb2e:	4604      	mov	r4, r0
    bb30:	88c1      	ldrh	r1, [r0, #6]
    bb32:	8880      	ldrh	r0, [r0, #4]
    bb34:	f005 fd75 	bl	11622 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    bb38:	2800      	cmp	r0, #0
    bb3a:	d10f      	bne.n	bb5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2dc>
    bb3c:	8861      	ldrh	r1, [r4, #2]
    bb3e:	8820      	ldrh	r0, [r4, #0]
    bb40:	f005 fd6f 	bl	11622 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    bb44:	2800      	cmp	r0, #0
    bb46:	d109      	bne.n	bb5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2dc>
    bb48:	4805      	ldr	r0, [pc, #20]	; (bb60 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2e0>)
    bb4a:	88a1      	ldrh	r1, [r4, #4]
    bb4c:	8081      	strh	r1, [r0, #4]
    bb4e:	8821      	ldrh	r1, [r4, #0]
    bb50:	8001      	strh	r1, [r0, #0]
    bb52:	88e1      	ldrh	r1, [r4, #6]
    bb54:	80c1      	strh	r1, [r0, #6]
    bb56:	8861      	ldrh	r1, [r4, #2]
    bb58:	8041      	strh	r1, [r0, #2]
    bb5a:	2000      	movs	r0, #0
    bb5c:	bd10      	pop	{r4, pc}
    bb5e:	0000      	.short	0x0000
    bb60:	200002b4 	.word	0x200002b4
    bb64:	0c11d80c 	.word	0x0c11d80c
    bb68:	11d80059 	.word	0x11d80059

0000bb6c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    bb6c:	b510      	push	{r4, lr}
    bb6e:	f7fb ff01 	bl	7974 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    bb72:	4805      	ldr	r0, [pc, #20]	; (bb88 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    bb74:	6840      	ldr	r0, [r0, #4]
    bb76:	f005 fe7d 	bl	11874 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x442>
    bb7a:	f005 fbe8 	bl	1134e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    bb7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bb82:	f7fc b867 	b.w	7c54 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    bb86:	0000      	.short	0x0000
    bb88:	200002bc 	.word	0x200002bc

0000bb8c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    bb8c:	b510      	push	{r4, lr}
    bb8e:	4c05      	ldr	r4, [pc, #20]	; (bba4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    bb90:	68a0      	ldr	r0, [r4, #8]
    bb92:	f005 fe6f 	bl	11874 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x442>
    bb96:	68e0      	ldr	r0, [r4, #12]
    bb98:	f005 fe6c 	bl	11874 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x442>
    bb9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bba0:	f005 bc3a 	b.w	11418 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    bba4:	200002bc 	.word	0x200002bc

0000bba8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    bba8:	b510      	push	{r4, lr}
    bbaa:	4905      	ldr	r1, [pc, #20]	; (bbc0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    bbac:	4805      	ldr	r0, [pc, #20]	; (bbc4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    bbae:	f005 fe54 	bl	1185a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x428>
    bbb2:	4804      	ldr	r0, [pc, #16]	; (bbc4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    bbb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bbb8:	4903      	ldr	r1, [pc, #12]	; (bbc8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    bbba:	1d00      	adds	r0, r0, #4
    bbbc:	f005 be4d 	b.w	1185a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x428>
    bbc0:	200002cc 	.word	0x200002cc
    bbc4:	200002c0 	.word	0x200002c0
    bbc8:	200002d4 	.word	0x200002d4

0000bbcc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    bbcc:	b510      	push	{r4, lr}
    bbce:	4908      	ldr	r1, [pc, #32]	; (bbf0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    bbd0:	4808      	ldr	r0, [pc, #32]	; (bbf4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    bbd2:	f005 fe42 	bl	1185a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x428>
    bbd6:	4807      	ldr	r0, [pc, #28]	; (bbf4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    bbd8:	4907      	ldr	r1, [pc, #28]	; (bbf8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    bbda:	1d00      	adds	r0, r0, #4
    bbdc:	f005 fe3d 	bl	1185a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x428>
    bbe0:	4804      	ldr	r0, [pc, #16]	; (bbf4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    bbe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bbe6:	4905      	ldr	r1, [pc, #20]	; (bbfc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    bbe8:	3008      	adds	r0, #8
    bbea:	f005 be36 	b.w	1185a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x428>
    bbee:	0000      	.short	0x0000
    bbf0:	200002e4 	.word	0x200002e4
    bbf4:	200002c0 	.word	0x200002c0
    bbf8:	200002ec 	.word	0x200002ec
    bbfc:	200002dc 	.word	0x200002dc

0000bc00 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    bc00:	4801      	ldr	r0, [pc, #4]	; (bc08 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    bc02:	7800      	ldrb	r0, [r0, #0]
    bc04:	4770      	bx	lr
    bc06:	0000      	.short	0x0000
    bc08:	200002bc 	.word	0x200002bc
    bc0c:	b510      	push	{r4, lr}
    bc0e:	f7fc f975 	bl	7efc <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    bc12:	f7fc fff5 	bl	8c00 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    bc16:	4803      	ldr	r0, [pc, #12]	; (bc24 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    bc18:	f7fc f956 	bl	7ec8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    bc1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc20:	f7fb beb4 	b.w	798c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    bc24:	200017e7 	.word	0x200017e7
    bc28:	4909      	ldr	r1, [pc, #36]	; (bc50 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    bc2a:	b510      	push	{r4, lr}
    bc2c:	2001      	movs	r0, #1
    bc2e:	7008      	strb	r0, [r1, #0]
    bc30:	f7fc f994 	bl	7f5c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    bc34:	f7fd fbc0 	bl	93b8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    bc38:	f003 f91e 	bl	ee78 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    bc3c:	4805      	ldr	r0, [pc, #20]	; (bc54 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    bc3e:	f7fa fbd7 	bl	63f0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    bc42:	2000      	movs	r0, #0
    bc44:	f7f9 fe9e 	bl	5984 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    bc48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc4c:	f7fb bea6 	b.w	799c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    bc50:	200002bc 	.word	0x200002bc
    bc54:	200017e7 	.word	0x200017e7

0000bc58 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    bc58:	4a04      	ldr	r2, [pc, #16]	; (bc6c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    bc5a:	08c1      	lsrs	r1, r0, #3
    bc5c:	f000 0307 	and.w	r3, r0, #7
    bc60:	2001      	movs	r0, #1
    bc62:	4098      	lsls	r0, r3
    bc64:	5c53      	ldrb	r3, [r2, r1]
    bc66:	4303      	orrs	r3, r0
    bc68:	5453      	strb	r3, [r2, r1]
    bc6a:	4770      	bx	lr
    bc6c:	20000020 	.word	0x20000020

0000bc70 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    bc70:	4901      	ldr	r1, [pc, #4]	; (bc78 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    bc72:	e9d1 0100 	ldrd	r0, r1, [r1]
    bc76:	4770      	bx	lr
    bc78:	20000020 	.word	0x20000020

0000bc7c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    bc7c:	4806      	ldr	r0, [pc, #24]	; (bc98 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    bc7e:	8801      	ldrh	r1, [r0, #0]
    bc80:	7900      	ldrb	r0, [r0, #4]
    bc82:	0602      	lsls	r2, r0, #24
    bc84:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    bc88:	f000 0001 	and.w	r0, r0, #1
    bc8c:	1800      	adds	r0, r0, r0
    bc8e:	b2c0      	uxtb	r0, r0
    bc90:	f040 0001 	orr.w	r0, r0, #1
    bc94:	4770      	bx	lr
    bc96:	0000      	.short	0x0000
    bc98:	20000020 	.word	0x20000020

0000bc9c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    bc9c:	b510      	push	{r4, lr}
    bc9e:	f7f9 f8cf 	bl	4e40 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    bca2:	2200      	movs	r2, #0
    bca4:	4b08      	ldr	r3, [pc, #32]	; (bcc8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    bca6:	4611      	mov	r1, r2
    bca8:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    bcac:	4284      	cmp	r4, r0
    bcae:	d303      	bcc.n	bcb8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    bcb0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    bcb4:	7882      	ldrb	r2, [r0, #2]
    bcb6:	e003      	b.n	bcc0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    bcb8:	1c49      	adds	r1, r1, #1
    bcba:	b2c9      	uxtb	r1, r1
    bcbc:	290c      	cmp	r1, #12
    bcbe:	d3f3      	bcc.n	bca8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    bcc0:	4802      	ldr	r0, [pc, #8]	; (bccc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    bcc2:	7002      	strb	r2, [r0, #0]
    bcc4:	bd10      	pop	{r4, pc}
    bcc6:	0000      	.short	0x0000
    bcc8:	000118c6 	.word	0x000118c6
    bccc:	2000033c 	.word	0x2000033c

0000bcd0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    bcd0:	b570      	push	{r4, r5, r6, lr}
    bcd2:	4605      	mov	r5, r0
    bcd4:	4616      	mov	r6, r2
    bcd6:	460c      	mov	r4, r1
    bcd8:	2002      	movs	r0, #2
    bcda:	f000 f9b7 	bl	c04c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    bcde:	4906      	ldr	r1, [pc, #24]	; (bcf8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    bce0:	2001      	movs	r0, #1
    bce2:	1ef6      	subs	r6, r6, #3
    bce4:	7008      	strb	r0, [r1, #0]
    bce6:	4805      	ldr	r0, [pc, #20]	; (bcfc <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    bce8:	6006      	str	r6, [r0, #0]
    bcea:	4804      	ldr	r0, [pc, #16]	; (bcfc <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    bcec:	3808      	subs	r0, #8
    bcee:	6005      	str	r5, [r0, #0]
    bcf0:	1f00      	subs	r0, r0, #4
    bcf2:	6004      	str	r4, [r0, #0]
    bcf4:	bd70      	pop	{r4, r5, r6, pc}
    bcf6:	0000      	.short	0x0000
    bcf8:	2000033d 	.word	0x2000033d
    bcfc:	4000f510 	.word	0x4000f510

0000bd00 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    bd00:	b510      	push	{r4, lr}
    bd02:	4c0c      	ldr	r4, [pc, #48]	; (bd34 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    bd04:	7820      	ldrb	r0, [r4, #0]
    bd06:	b180      	cbz	r0, bd2a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    bd08:	490b      	ldr	r1, [pc, #44]	; (bd38 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    bd0a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    bd0e:	6008      	str	r0, [r1, #0]
    bd10:	f000 f86a 	bl	bde8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    bd14:	2100      	movs	r1, #0
    bd16:	b120      	cbz	r0, bd22 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    bd18:	2001      	movs	r0, #1
    bd1a:	7060      	strb	r0, [r4, #1]
    bd1c:	4807      	ldr	r0, [pc, #28]	; (bd3c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    bd1e:	6800      	ldr	r0, [r0, #0]
    bd20:	e001      	b.n	bd26 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    bd22:	7061      	strb	r1, [r4, #1]
    bd24:	2010      	movs	r0, #16
    bd26:	70a0      	strb	r0, [r4, #2]
    bd28:	7021      	strb	r1, [r4, #0]
    bd2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bd2e:	2000      	movs	r0, #0
    bd30:	f000 b98c 	b.w	c04c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    bd34:	2000033d 	.word	0x2000033d
    bd38:	4001f508 	.word	0x4001f508
    bd3c:	4000f400 	.word	0x4000f400

0000bd40 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    bd40:	b510      	push	{r4, lr}
    bd42:	2002      	movs	r0, #2
    bd44:	f000 f982 	bl	c04c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    bd48:	4904      	ldr	r1, [pc, #16]	; (bd5c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    bd4a:	2001      	movs	r0, #1
    bd4c:	7008      	strb	r0, [r1, #0]
    bd4e:	f000 f859 	bl	be04 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    bd52:	4903      	ldr	r1, [pc, #12]	; (bd60 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    bd54:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    bd58:	6008      	str	r0, [r1, #0]
    bd5a:	bd10      	pop	{r4, pc}
    bd5c:	2000033d 	.word	0x2000033d
    bd60:	4001f504 	.word	0x4001f504

0000bd64 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    bd64:	4803      	ldr	r0, [pc, #12]	; (bd74 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    bd66:	2100      	movs	r1, #0
    bd68:	7001      	strb	r1, [r0, #0]
    bd6a:	7041      	strb	r1, [r0, #1]
    bd6c:	2110      	movs	r1, #16
    bd6e:	7081      	strb	r1, [r0, #2]
    bd70:	4770      	bx	lr
    bd72:	0000      	.short	0x0000
    bd74:	2000033d 	.word	0x2000033d

0000bd78 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    bd78:	4807      	ldr	r0, [pc, #28]	; (bd98 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    bd7a:	b510      	push	{r4, lr}
    bd7c:	7801      	ldrb	r1, [r0, #0]
    bd7e:	b141      	cbz	r1, bd92 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    bd80:	f000 f832 	bl	bde8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    bd84:	b118      	cbz	r0, bd8e <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    bd86:	4805      	ldr	r0, [pc, #20]	; (bd9c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    bd88:	6800      	ldr	r0, [r0, #0]
    bd8a:	b2c0      	uxtb	r0, r0
    bd8c:	bd10      	pop	{r4, pc}
    bd8e:	2010      	movs	r0, #16
    bd90:	bd10      	pop	{r4, pc}
    bd92:	7880      	ldrb	r0, [r0, #2]
    bd94:	bd10      	pop	{r4, pc}
    bd96:	0000      	.short	0x0000
    bd98:	2000033d 	.word	0x2000033d
    bd9c:	4000f400 	.word	0x4000f400

0000bda0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    bda0:	4808      	ldr	r0, [pc, #32]	; (bdc4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    bda2:	b510      	push	{r4, lr}
    bda4:	7801      	ldrb	r1, [r0, #0]
    bda6:	b159      	cbz	r1, bdc0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    bda8:	4807      	ldr	r0, [pc, #28]	; (bdc8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    bdaa:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    bdae:	b128      	cbz	r0, bdbc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    bdb0:	f000 f80c 	bl	bdcc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    bdb4:	2800      	cmp	r0, #0
    bdb6:	d000      	beq.n	bdba <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    bdb8:	2001      	movs	r0, #1
    bdba:	bd10      	pop	{r4, pc}
    bdbc:	2002      	movs	r0, #2
    bdbe:	bd10      	pop	{r4, pc}
    bdc0:	7840      	ldrb	r0, [r0, #1]
    bdc2:	bd10      	pop	{r4, pc}
    bdc4:	2000033d 	.word	0x2000033d
    bdc8:	4000f000 	.word	0x4000f000
    bdcc:	4805      	ldr	r0, [pc, #20]	; (bde4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    bdce:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    bdd2:	b111      	cbz	r1, bdda <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    bdd4:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    bdd8:	b108      	cbz	r0, bdde <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    bdda:	2000      	movs	r0, #0
    bddc:	4770      	bx	lr
    bdde:	2001      	movs	r0, #1
    bde0:	4770      	bx	lr
    bde2:	0000      	.short	0x0000
    bde4:	4000f000 	.word	0x4000f000
    bde8:	4805      	ldr	r0, [pc, #20]	; (be00 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    bdea:	b510      	push	{r4, lr}
    bdec:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    bdf0:	b120      	cbz	r0, bdfc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    bdf2:	f7ff ffeb 	bl	bdcc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    bdf6:	b108      	cbz	r0, bdfc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    bdf8:	2001      	movs	r0, #1
    bdfa:	bd10      	pop	{r4, pc}
    bdfc:	2000      	movs	r0, #0
    bdfe:	bd10      	pop	{r4, pc}
    be00:	4000f000 	.word	0x4000f000
    be04:	4804      	ldr	r0, [pc, #16]	; (be18 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    be06:	2100      	movs	r1, #0
    be08:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    be0c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    be10:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    be14:	4770      	bx	lr
    be16:	0000      	.short	0x0000
    be18:	4000f000 	.word	0x4000f000

0000be1c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    be1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be20:	4604      	mov	r4, r0
    be22:	461e      	mov	r6, r3
    be24:	4690      	mov	r8, r2
    be26:	460f      	mov	r7, r1
    be28:	2001      	movs	r0, #1
    be2a:	f000 f90f 	bl	c04c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    be2e:	4d1e      	ldr	r5, [pc, #120]	; (bea8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    be30:	481e      	ldr	r0, [pc, #120]	; (beac <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    be32:	f004 0103 	and.w	r1, r4, #3
    be36:	712e      	strb	r6, [r5, #4]
    be38:	6800      	ldr	r0, [r0, #0]
    be3a:	0432      	lsls	r2, r6, #16
    be3c:	f361 0007 	bfi	r0, r1, #0, #8
    be40:	f366 200f 	bfi	r0, r6, #8, #8
    be44:	0c00      	lsrs	r0, r0, #16
    be46:	4e1a      	ldr	r6, [pc, #104]	; (beb0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    be48:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    be4c:	4308      	orrs	r0, r1
    be4e:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    be52:	4818      	ldr	r0, [pc, #96]	; (beb4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    be54:	6007      	str	r7, [r0, #0]
    be56:	f001 fddd 	bl	da14 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    be5a:	b938      	cbnz	r0, be6c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    be5c:	4815      	ldr	r0, [pc, #84]	; (beb4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    be5e:	3010      	adds	r0, #16
    be60:	6801      	ldr	r1, [r0, #0]
    be62:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    be66:	ea41 0108 	orr.w	r1, r1, r8
    be6a:	6001      	str	r1, [r0, #0]
    be6c:	f000 f8e4 	bl	c038 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    be70:	b10c      	cbz	r4, be76 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    be72:	2c04      	cmp	r4, #4
    be74:	d107      	bne.n	be86 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    be76:	4811      	ldr	r0, [pc, #68]	; (bebc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    be78:	490d      	ldr	r1, [pc, #52]	; (beb0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    be7a:	4a0f      	ldr	r2, [pc, #60]	; (beb8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    be7c:	1d09      	adds	r1, r1, #4
    be7e:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    be82:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    be86:	2001      	movs	r0, #1
    be88:	7068      	strb	r0, [r5, #1]
    be8a:	70ec      	strb	r4, [r5, #3]
    be8c:	b11c      	cbz	r4, be96 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    be8e:	2c01      	cmp	r4, #1
    be90:	d001      	beq.n	be96 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    be92:	2c02      	cmp	r4, #2
    be94:	d106      	bne.n	bea4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    be96:	7028      	strb	r0, [r5, #0]
    be98:	2100      	movs	r1, #0
    be9a:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    be9e:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    bea2:	6030      	str	r0, [r6, #0]
    bea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bea8:	20000340 	.word	0x20000340
    beac:	0000c048 	.word	0x0000c048
    beb0:	4000f000 	.word	0x4000f000
    beb4:	4000f508 	.word	0x4000f508
    beb8:	4000f100 	.word	0x4000f100
    bebc:	4001f088 	.word	0x4001f088

0000bec0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    bec0:	b570      	push	{r4, r5, r6, lr}
    bec2:	4a1c      	ldr	r2, [pc, #112]	; (bf34 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    bec4:	7853      	ldrb	r3, [r2, #1]
    bec6:	b1a3      	cbz	r3, bef2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    bec8:	4b1b      	ldr	r3, [pc, #108]	; (bf38 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    beca:	6019      	str	r1, [r3, #0]
    becc:	1d19      	adds	r1, r3, #4
    bece:	6008      	str	r0, [r1, #0]
    bed0:	2501      	movs	r5, #1
    bed2:	7095      	strb	r5, [r2, #2]
    bed4:	4610      	mov	r0, r2
    bed6:	78d6      	ldrb	r6, [r2, #3]
    bed8:	4b18      	ldr	r3, [pc, #96]	; (bf3c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    beda:	7800      	ldrb	r0, [r0, #0]
    bedc:	4c18      	ldr	r4, [pc, #96]	; (bf40 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    bede:	2100      	movs	r1, #0
    bee0:	b156      	cbz	r6, bef8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    bee2:	2e04      	cmp	r6, #4
    bee4:	d01b      	beq.n	bf1e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    bee6:	b308      	cbz	r0, bf2c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    bee8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    beec:	0668      	lsls	r0, r5, #25
    beee:	6018      	str	r0, [r3, #0]
    bef0:	bd70      	pop	{r4, r5, r6, pc}
    bef2:	f44f 71c2 	mov.w	r1, #388	; 0x184
    bef6:	e01a      	b.n	bf2e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    bef8:	b178      	cbz	r0, bf1a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    befa:	4620      	mov	r0, r4
    befc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    bf00:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    bf04:	601e      	str	r6, [r3, #0]
    bf06:	1271      	asrs	r1, r6, #9
    bf08:	f005 fd12 	bl	11930 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    bf0c:	2800      	cmp	r0, #0
    bf0e:	d0ef      	beq.n	bef0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    bf10:	6065      	str	r5, [r4, #4]
    bf12:	480a      	ldr	r0, [pc, #40]	; (bf3c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    bf14:	1d00      	adds	r0, r0, #4
    bf16:	6006      	str	r6, [r0, #0]
    bf18:	bd70      	pop	{r4, r5, r6, pc}
    bf1a:	21b3      	movs	r1, #179	; 0xb3
    bf1c:	e007      	b.n	bf2e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    bf1e:	7015      	strb	r5, [r2, #0]
    bf20:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    bf24:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    bf28:	6025      	str	r5, [r4, #0]
    bf2a:	bd70      	pop	{r4, r5, r6, pc}
    bf2c:	21c6      	movs	r1, #198	; 0xc6
    bf2e:	203c      	movs	r0, #60	; 0x3c
    bf30:	f7f9 fb4e 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf34:	20000340 	.word	0x20000340
    bf38:	4000f50c 	.word	0x4000f50c
    bf3c:	4001f504 	.word	0x4001f504
    bf40:	4000f000 	.word	0x4000f000

0000bf44 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    bf44:	b570      	push	{r4, r5, r6, lr}
    bf46:	4d05      	ldr	r5, [pc, #20]	; (bf5c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    bf48:	2400      	movs	r4, #0
    bf4a:	7828      	ldrb	r0, [r5, #0]
    bf4c:	b110      	cbz	r0, bf54 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    bf4e:	f000 f873 	bl	c038 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    bf52:	702c      	strb	r4, [r5, #0]
    bf54:	706c      	strb	r4, [r5, #1]
    bf56:	70ac      	strb	r4, [r5, #2]
    bf58:	bd70      	pop	{r4, r5, r6, pc}
    bf5a:	0000      	.short	0x0000
    bf5c:	20000340 	.word	0x20000340

0000bf60 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    bf60:	4802      	ldr	r0, [pc, #8]	; (bf6c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    bf62:	2100      	movs	r1, #0
    bf64:	7001      	strb	r1, [r0, #0]
    bf66:	7041      	strb	r1, [r0, #1]
    bf68:	7081      	strb	r1, [r0, #2]
    bf6a:	4770      	bx	lr
    bf6c:	20000340 	.word	0x20000340

0000bf70 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    bf70:	480b      	ldr	r0, [pc, #44]	; (bfa0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    bf72:	b510      	push	{r4, lr}
    bf74:	7800      	ldrb	r0, [r0, #0]
    bf76:	b158      	cbz	r0, bf90 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    bf78:	f44f 7182 	mov.w	r1, #260	; 0x104
    bf7c:	4809      	ldr	r0, [pc, #36]	; (bfa4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    bf7e:	f005 fcd7 	bl	11930 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    bf82:	b140      	cbz	r0, bf96 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    bf84:	4808      	ldr	r0, [pc, #32]	; (bfa8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    bf86:	6800      	ldr	r0, [r0, #0]
    bf88:	2800      	cmp	r0, #0
    bf8a:	d000      	beq.n	bf8e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    bf8c:	2001      	movs	r0, #1
    bf8e:	bd10      	pop	{r4, pc}
    bf90:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    bf94:	e001      	b.n	bf9a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    bf96:	f240 11eb 	movw	r1, #491	; 0x1eb
    bf9a:	203c      	movs	r0, #60	; 0x3c
    bf9c:	f7f9 fb18 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bfa0:	20000340 	.word	0x20000340
    bfa4:	4000f000 	.word	0x4000f000
    bfa8:	4000f400 	.word	0x4000f400

0000bfac <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    bfac:	4801      	ldr	r0, [pc, #4]	; (bfb4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    bfae:	2101      	movs	r1, #1
    bfb0:	6081      	str	r1, [r0, #8]
    bfb2:	4770      	bx	lr
    bfb4:	4000f000 	.word	0x4000f000

0000bfb8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    bfb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bfbc:	481b      	ldr	r0, [pc, #108]	; (c02c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    bfbe:	7800      	ldrb	r0, [r0, #0]
    bfc0:	b1d8      	cbz	r0, bffa <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    bfc2:	f8df 806c 	ldr.w	r8, [pc, #108]	; c030 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    bfc6:	f44f 7682 	mov.w	r6, #260	; 0x104
    bfca:	4631      	mov	r1, r6
    bfcc:	4640      	mov	r0, r8
    bfce:	f005 fcaf 	bl	11930 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    bfd2:	2800      	cmp	r0, #0
    bfd4:	d128      	bne.n	c028 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    bfd6:	2002      	movs	r0, #2
    bfd8:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    bfdc:	4c15      	ldr	r4, [pc, #84]	; (c034 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    bfde:	6820      	ldr	r0, [r4, #0]
    bfe0:	43c0      	mvns	r0, r0
    bfe2:	f340 1500 	sbfx	r5, r0, #4, #1
    bfe6:	6820      	ldr	r0, [r4, #0]
    bfe8:	f040 0010 	orr.w	r0, r0, #16
    bfec:	6020      	str	r0, [r4, #0]
    bfee:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    bff2:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    bff6:	1c6d      	adds	r5, r5, #1
    bff8:	e008      	b.n	c00c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    bffa:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
    bffe:	203c      	movs	r0, #60	; 0x3c
    c000:	f7f9 fae6 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c004:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    c008:	f7f9 f93c 	bl	5284 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c00c:	4631      	mov	r1, r6
    c00e:	4640      	mov	r0, r8
    c010:	f005 fc8e 	bl	11930 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    c014:	2800      	cmp	r0, #0
    c016:	d0f5      	beq.n	c004 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    c018:	b91d      	cbnz	r5, c022 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    c01a:	6820      	ldr	r0, [r4, #0]
    c01c:	f020 0010 	bic.w	r0, r0, #16
    c020:	6020      	str	r0, [r4, #0]
    c022:	2002      	movs	r0, #2
    c024:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    c028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c02c:	20000340 	.word	0x20000340
    c030:	4000f000 	.word	0x4000f000
    c034:	e000ed10 	.word	0xe000ed10
    c038:	4902      	ldr	r1, [pc, #8]	; (c044 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    c03a:	4801      	ldr	r0, [pc, #4]	; (c040 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    c03c:	6008      	str	r0, [r1, #0]
    c03e:	4770      	bx	lr
    c040:	02020000 	.word	0x02020000
    c044:	4001f508 	.word	0x4001f508
    c048:	00010000 	.word	0x00010000

0000c04c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    c04c:	b510      	push	{r4, lr}
    c04e:	4604      	mov	r4, r0
    c050:	f000 f820 	bl	c094 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    c054:	2c00      	cmp	r4, #0
    c056:	d00e      	beq.n	c076 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    c058:	4a0b      	ldr	r2, [pc, #44]	; (c088 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    c05a:	480b      	ldr	r0, [pc, #44]	; (c088 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    c05c:	490b      	ldr	r1, [pc, #44]	; (c08c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    c05e:	3214      	adds	r2, #20
    c060:	2c01      	cmp	r4, #1
    c062:	d005      	beq.n	c070 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    c064:	2c02      	cmp	r4, #2
    c066:	d007      	beq.n	c078 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    c068:	2181      	movs	r1, #129	; 0x81
    c06a:	203d      	movs	r0, #61	; 0x3d
    c06c:	f7f9 fab0 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c070:	2302      	movs	r3, #2
    c072:	6003      	str	r3, [r0, #0]
    c074:	6011      	str	r1, [r2, #0]
    c076:	bd10      	pop	{r4, pc}
    c078:	2303      	movs	r3, #3
    c07a:	6003      	str	r3, [r0, #0]
    c07c:	6011      	str	r1, [r2, #0]
    c07e:	4904      	ldr	r1, [pc, #16]	; (c090 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    c080:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    c084:	6008      	str	r0, [r1, #0]
    c086:	bd10      	pop	{r4, pc}
    c088:	4000f500 	.word	0x4000f500
    c08c:	200018e9 	.word	0x200018e9
    c090:	4001f504 	.word	0x4001f504
    c094:	4805      	ldr	r0, [pc, #20]	; (c0ac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    c096:	b510      	push	{r4, lr}
    c098:	2100      	movs	r1, #0
    c09a:	6001      	str	r1, [r0, #0]
    c09c:	6001      	str	r1, [r0, #0]
    c09e:	f7ff ff51 	bl	bf44 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    c0a2:	4903      	ldr	r1, [pc, #12]	; (c0b0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    c0a4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    c0a8:	6008      	str	r0, [r1, #0]
    c0aa:	bd10      	pop	{r4, pc}
    c0ac:	4000f500 	.word	0x4000f500
    c0b0:	4001f508 	.word	0x4001f508

0000c0b4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    c0b4:	4805      	ldr	r0, [pc, #20]	; (c0cc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    c0b6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c0ba:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    c0be:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c0c2:	2100      	movs	r1, #0
    c0c4:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    c0c8:	4770      	bx	lr
    c0ca:	0000      	.short	0x0000
    c0cc:	40001000 	.word	0x40001000

0000c0d0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    c0d0:	4904      	ldr	r1, [pc, #16]	; (c0e4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    c0d2:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    c0d6:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    c0da:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    c0de:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    c0e2:	4770      	bx	lr
    c0e4:	40001000 	.word	0x40001000

0000c0e8 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    c0e8:	4801      	ldr	r0, [pc, #4]	; (c0f0 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    c0ea:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    c0ee:	4770      	bx	lr
    c0f0:	20001398 	.word	0x20001398

0000c0f4 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    c0f4:	4902      	ldr	r1, [pc, #8]	; (c100 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    c0f6:	5c08      	ldrb	r0, [r1, r0]
    c0f8:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    c0fc:	4770      	bx	lr
    c0fe:	0000      	.short	0x0000
    c100:	0000ce22 	.word	0x0000ce22

0000c104 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    c104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c106:	4c24      	ldr	r4, [pc, #144]	; (c198 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    c108:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    c10c:	f010 0f10 	tst.w	r0, #16
    c110:	d001      	beq.n	c116 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    c112:	2701      	movs	r7, #1
    c114:	e000      	b.n	c118 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    c116:	2700      	movs	r7, #0
    c118:	2010      	movs	r0, #16
    c11a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    c11e:	2002      	movs	r0, #2
    c120:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    c124:	481d      	ldr	r0, [pc, #116]	; (c19c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    c126:	2500      	movs	r5, #0
    c128:	491d      	ldr	r1, [pc, #116]	; (c1a0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    c12a:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    c12e:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    c132:	6008      	str	r0, [r1, #0]
    c134:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    c138:	f44f 7688 	mov.w	r6, #272	; 0x110
    c13c:	f010 0fff 	tst.w	r0, #255	; 0xff
    c140:	d019      	beq.n	c176 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    c142:	20ff      	movs	r0, #255	; 0xff
    c144:	f88d 0000 	strb.w	r0, [sp]
    c148:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    c14c:	2001      	movs	r0, #1
    c14e:	6120      	str	r0, [r4, #16]
    c150:	e005      	b.n	c15e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    c152:	bf00      	nop
    c154:	f89d 0000 	ldrb.w	r0, [sp]
    c158:	1e40      	subs	r0, r0, #1
    c15a:	f88d 0000 	strb.w	r0, [sp]
    c15e:	f89d 0000 	ldrb.w	r0, [sp]
    c162:	b128      	cbz	r0, c170 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    c164:	4631      	mov	r1, r6
    c166:	4620      	mov	r0, r4
    c168:	f005 fc11 	bl	1198e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c16c:	2800      	cmp	r0, #0
    c16e:	d0f1      	beq.n	c154 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    c170:	f89d 0000 	ldrb.w	r0, [sp]
    c174:	b158      	cbz	r0, c18e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    c176:	f000 fc49 	bl	ca0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    c17a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    c17e:	f000 fdd1 	bl	cd24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    c182:	2f00      	cmp	r7, #0
    c184:	d002      	beq.n	c18c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    c186:	2010      	movs	r0, #16
    c188:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c18e:	f640 0183 	movw	r1, #2179	; 0x883
    c192:	203e      	movs	r0, #62	; 0x3e
    c194:	f7f9 fa1c 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c198:	40001000 	.word	0x40001000
    c19c:	20001398 	.word	0x20001398
    c1a0:	4001f508 	.word	0x4001f508

0000c1a4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    c1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c1a8:	4d18      	ldr	r5, [pc, #96]	; (c20c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    c1aa:	4607      	mov	r7, r0
    c1ac:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    c1b0:	07c2      	lsls	r2, r0, #31
    c1b2:	d00f      	beq.n	c1d4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    c1b4:	4c16      	ldr	r4, [pc, #88]	; (c210 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    c1b6:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    c1ba:	f042 0201 	orr.w	r2, r2, #1
    c1be:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    c1c2:	f040 0002 	orr.w	r0, r0, #2
    c1c6:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    c1ca:	2601      	movs	r6, #1
    c1cc:	b13f      	cbz	r7, c1de <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    c1ce:	2f01      	cmp	r7, #1
    c1d0:	d00b      	beq.n	c1ea <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    c1d2:	e010      	b.n	c1f6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    c1d4:	f44f 61ed 	mov.w	r1, #1896	; 0x768
    c1d8:	203e      	movs	r0, #62	; 0x3e
    c1da:	f7f9 f9f9 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1de:	4608      	mov	r0, r1
    c1e0:	f000 fdfa 	bl	cdd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    c1e4:	726e      	strb	r6, [r5, #9]
    c1e6:	6026      	str	r6, [r4, #0]
    c1e8:	e005      	b.n	c1f6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    c1ea:	4608      	mov	r0, r1
    c1ec:	f000 fdda 	bl	cda4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    c1f0:	2002      	movs	r0, #2
    c1f2:	7268      	strb	r0, [r5, #9]
    c1f4:	6066      	str	r6, [r4, #4]
    c1f6:	4807      	ldr	r0, [pc, #28]	; (c214 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    c1f8:	64c6      	str	r6, [r0, #76]	; 0x4c
    c1fa:	4806      	ldr	r0, [pc, #24]	; (c214 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    c1fc:	300c      	adds	r0, #12
    c1fe:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    c202:	4638      	mov	r0, r7
    c204:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c208:	f000 bd5e 	b.w	ccc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    c20c:	20001398 	.word	0x20001398
    c210:	40001000 	.word	0x40001000
    c214:	40008000 	.word	0x40008000

0000c218 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    c218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c21c:	4c2c      	ldr	r4, [pc, #176]	; (c2d0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    c21e:	0006      	movs	r6, r0
    c220:	4d2c      	ldr	r5, [pc, #176]	; (c2d4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    c222:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    c226:	f8df 80b0 	ldr.w	r8, [pc, #176]	; c2d8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    c22a:	f040 0002 	orr.w	r0, r0, #2
    c22e:	4689      	mov	r9, r1
    c230:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    c234:	f04f 0700 	mov.w	r7, #0
    c238:	d002      	beq.n	c240 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    c23a:	2e01      	cmp	r6, #1
    c23c:	d020      	beq.n	c280 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    c23e:	e036      	b.n	c2ae <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    c240:	4608      	mov	r0, r1
    c242:	f000 fdc9 	bl	cdd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    c246:	2001      	movs	r0, #1
    c248:	7260      	strb	r0, [r4, #9]
    c24a:	79e0      	ldrb	r0, [r4, #7]
    c24c:	2801      	cmp	r0, #1
    c24e:	d105      	bne.n	c25c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    c250:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    c254:	f040 0008 	orr.w	r0, r0, #8
    c258:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    c25c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c25e:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    c262:	62a0      	str	r0, [r4, #40]	; 0x28
    c264:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c268:	f8c8 0000 	str.w	r0, [r8]
    c26c:	491b      	ldr	r1, [pc, #108]	; (c2dc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    c26e:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    c272:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c276:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    c27a:	fbb0 f7f1 	udiv	r7, r0, r1
    c27e:	e016      	b.n	c2ae <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    c280:	4608      	mov	r0, r1
    c282:	f000 fd8f 	bl	cda4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    c286:	2002      	movs	r0, #2
    c288:	7260      	strb	r0, [r4, #9]
    c28a:	79e0      	ldrb	r0, [r4, #7]
    c28c:	2801      	cmp	r0, #1
    c28e:	d105      	bne.n	c29c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    c290:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    c294:	f040 0004 	orr.w	r0, r0, #4
    c298:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    c29c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c29e:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    c2a2:	62a0      	str	r0, [r4, #40]	; 0x28
    c2a4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    c2a8:	f8c8 0000 	str.w	r0, [r8]
    c2ac:	2729      	movs	r7, #41	; 0x29
    c2ae:	f000 fc19 	bl	cae4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    c2b2:	f001 fa83 	bl	d7bc <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    c2b6:	b120      	cbz	r0, c2c2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    c2b8:	f7ff ff24 	bl	c104 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c2bc:	2000      	movs	r0, #0
    c2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c2c2:	2100      	movs	r1, #0
    c2c4:	4630      	mov	r0, r6
    c2c6:	f000 fcff 	bl	ccc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    c2ca:	4638      	mov	r0, r7
    c2cc:	e7f7      	b.n	c2be <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    c2ce:	0000      	.short	0x0000
    c2d0:	20001398 	.word	0x20001398
    c2d4:	40001000 	.word	0x40001000
    c2d8:	4001f504 	.word	0x4001f504
    c2dc:	0000ce1c 	.word	0x0000ce1c

0000c2e0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    c2e0:	4a02      	ldr	r2, [pc, #8]	; (c2ec <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    c2e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    c2e4:	6003      	str	r3, [r0, #0]
    c2e6:	6b50      	ldr	r0, [r2, #52]	; 0x34
    c2e8:	6008      	str	r0, [r1, #0]
    c2ea:	4770      	bx	lr
    c2ec:	20001398 	.word	0x20001398

0000c2f0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    c2f0:	b510      	push	{r4, lr}
    c2f2:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    c2f4:	4901      	ldr	r1, [pc, #4]	; (c2fc <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    c2f6:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    c2fa:	bd10      	pop	{r4, pc}
    c2fc:	20001388 	.word	0x20001388

0000c300 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    c300:	490f      	ldr	r1, [pc, #60]	; (c340 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    c302:	b510      	push	{r4, lr}
    c304:	69ca      	ldr	r2, [r1, #28]
    c306:	4282      	cmp	r2, r0
    c308:	d302      	bcc.n	c310 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    c30a:	f640 1117 	movw	r1, #2327	; 0x917
    c30e:	e00b      	b.n	c328 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    c310:	2201      	movs	r2, #1
    c312:	730a      	strb	r2, [r1, #12]
    c314:	6108      	str	r0, [r1, #16]
    c316:	490b      	ldr	r1, [pc, #44]	; (c344 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    c318:	644a      	str	r2, [r1, #68]	; 0x44
    c31a:	1d0a      	adds	r2, r1, #4
    c31c:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    c320:	4283      	cmp	r3, r0
    c322:	d304      	bcc.n	c32e <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    c324:	f44f 6112 	mov.w	r1, #2336	; 0x920
    c328:	203e      	movs	r0, #62	; 0x3e
    c32a:	f7f9 f951 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c32e:	2300      	movs	r3, #0
    c330:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    c334:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c33c:	f000 bc98 	b.w	cc70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    c340:	20001398 	.word	0x20001398
    c344:	40008000 	.word	0x40008000

0000c348 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    c348:	b570      	push	{r4, r5, r6, lr}
    c34a:	4c0f      	ldr	r4, [pc, #60]	; (c388 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    c34c:	4603      	mov	r3, r0
    c34e:	2002      	movs	r0, #2
    c350:	7320      	strb	r0, [r4, #12]
    c352:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    c356:	2096      	movs	r0, #150	; 0x96
    c358:	f894 1020 	ldrb.w	r1, [r4, #32]
    c35c:	7d22      	ldrb	r2, [r4, #20]
    c35e:	2d01      	cmp	r5, #1
    c360:	d00e      	beq.n	c380 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    c362:	f000 fd97 	bl	ce94 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    c366:	6120      	str	r0, [r4, #16]
    c368:	4808      	ldr	r0, [pc, #32]	; (c38c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    c36a:	2100      	movs	r1, #0
    c36c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    c370:	6921      	ldr	r1, [r4, #16]
    c372:	69e0      	ldr	r0, [r4, #28]
    c374:	4408      	add	r0, r1
    c376:	4905      	ldr	r1, [pc, #20]	; (c38c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    c378:	1d09      	adds	r1, r1, #4
    c37a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c37e:	bd70      	pop	{r4, r5, r6, pc}
    c380:	f000 fda6 	bl	ced0 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    c384:	e7ef      	b.n	c366 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    c386:	0000      	.short	0x0000
    c388:	20001398 	.word	0x20001398
    c38c:	40008000 	.word	0x40008000

0000c390 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    c390:	b510      	push	{r4, lr}
    c392:	f001 fb5b 	bl	da4c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c396:	2800      	cmp	r0, #0
    c398:	d006      	beq.n	c3a8 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    c39a:	4804      	ldr	r0, [pc, #16]	; (c3ac <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    c39c:	6801      	ldr	r1, [r0, #0]
    c39e:	f021 0101 	bic.w	r1, r1, #1
    c3a2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    c3a6:	6001      	str	r1, [r0, #0]
    c3a8:	bd10      	pop	{r4, pc}
    c3aa:	0000      	.short	0x0000
    c3ac:	40001774 	.word	0x40001774

0000c3b0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    c3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3b4:	2238      	movs	r2, #56	; 0x38
    c3b6:	2100      	movs	r1, #0
    c3b8:	4813      	ldr	r0, [pc, #76]	; (c408 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    c3ba:	f001 fbe5 	bl	db88 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c3be:	f000 fcb1 	bl	cd24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    c3c2:	f001 fafc 	bl	d9be <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c3c6:	4d11      	ldr	r5, [pc, #68]	; (c40c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c3c8:	4e10      	ldr	r6, [pc, #64]	; (c40c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c3ca:	2400      	movs	r4, #0
    c3cc:	4f0f      	ldr	r7, [pc, #60]	; (c40c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c3ce:	3508      	adds	r5, #8
    c3d0:	3610      	adds	r6, #16
    c3d2:	b928      	cbnz	r0, c3e0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    c3d4:	f001 fb0a 	bl	d9ec <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c3d8:	b910      	cbnz	r0, c3e0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    c3da:	f001 fb11 	bl	da00 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    c3de:	b108      	cbz	r0, c3e4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    c3e0:	2224      	movs	r2, #36	; 0x24
    c3e2:	e006      	b.n	c3f2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    c3e4:	f001 fb4c 	bl	da80 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c3e8:	b910      	cbnz	r0, c3f0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    c3ea:	f001 fb3f 	bl	da6c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    c3ee:	b140      	cbz	r0, c402 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    c3f0:	2240      	movs	r2, #64	; 0x40
    c3f2:	21ff      	movs	r1, #255	; 0xff
    c3f4:	4638      	mov	r0, r7
    c3f6:	f001 fbc7 	bl	db88 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c3fa:	602c      	str	r4, [r5, #0]
    c3fc:	6034      	str	r4, [r6, #0]
    c3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c402:	2238      	movs	r2, #56	; 0x38
    c404:	e7f5      	b.n	c3f2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    c406:	0000      	.short	0x0000
    c408:	20001398 	.word	0x20001398
    c40c:	40000e00 	.word	0x40000e00

0000c410 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    c410:	4801      	ldr	r0, [pc, #4]	; (c418 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    c412:	69c0      	ldr	r0, [r0, #28]
    c414:	4770      	bx	lr
    c416:	0000      	.short	0x0000
    c418:	20001398 	.word	0x20001398

0000c41c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    c41c:	4801      	ldr	r0, [pc, #4]	; (c424 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    c41e:	6980      	ldr	r0, [r0, #24]
    c420:	4770      	bx	lr
    c422:	0000      	.short	0x0000
    c424:	20001398 	.word	0x20001398

0000c428 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    c428:	b510      	push	{r4, lr}
    c42a:	f000 fc2f 	bl	cc8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    c42e:	f7ff fe69 	bl	c104 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c432:	f7f8 ff7d 	bl	5330 <mpsl_fem_disable>
    c436:	b130      	cbz	r0, c446 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    c438:	1c40      	adds	r0, r0, #1
    c43a:	d004      	beq.n	c446 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    c43c:	f240 5146 	movw	r1, #1350	; 0x546
    c440:	203e      	movs	r0, #62	; 0x3e
    c442:	f7f9 f8c5 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c446:	480f      	ldr	r0, [pc, #60]	; (c484 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    c448:	4a0f      	ldr	r2, [pc, #60]	; (c488 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    c44a:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c44c:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    c450:	6011      	str	r1, [r2, #0]
    c452:	2400      	movs	r4, #0
    c454:	6284      	str	r4, [r0, #40]	; 0x28
    c456:	7304      	strb	r4, [r0, #12]
    c458:	61c4      	str	r4, [r0, #28]
    c45a:	6184      	str	r4, [r0, #24]
    c45c:	f000 fc16 	bl	cc8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    c460:	480a      	ldr	r0, [pc, #40]	; (c48c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    c462:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    c466:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    c46a:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    c46e:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    c472:	2001      	movs	r0, #1
    c474:	f005 fa7a 	bl	1196c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c47c:	2001      	movs	r0, #1
    c47e:	f005 ba68 	b.w	11952 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    c482:	0000      	.short	0x0000
    c484:	20001398 	.word	0x20001398
    c488:	4001f508 	.word	0x4001f508
    c48c:	40008000 	.word	0x40008000

0000c490 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    c490:	b570      	push	{r4, r5, r6, lr}
    c492:	2001      	movs	r0, #1
    c494:	f005 fa6a 	bl	1196c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c498:	4c37      	ldr	r4, [pc, #220]	; (c578 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    c49a:	2000      	movs	r0, #0
    c49c:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    c4a0:	2001      	movs	r0, #1
    c4a2:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    c4a6:	f001 fac1 	bl	da2c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c4aa:	4d34      	ldr	r5, [pc, #208]	; (c57c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c4ac:	b118      	cbz	r0, c4b6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    c4ae:	6828      	ldr	r0, [r5, #0]
    c4b0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    c4b4:	6028      	str	r0, [r5, #0]
    c4b6:	f001 faad 	bl	da14 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c4ba:	b128      	cbz	r0, c4c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    c4bc:	6828      	ldr	r0, [r5, #0]
    c4be:	4930      	ldr	r1, [pc, #192]	; (c580 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    c4c0:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    c4c4:	4308      	orrs	r0, r1
    c4c6:	6028      	str	r0, [r5, #0]
    c4c8:	f001 fac0 	bl	da4c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c4cc:	b138      	cbz	r0, c4de <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    c4ce:	482b      	ldr	r0, [pc, #172]	; (c57c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c4d0:	1d00      	adds	r0, r0, #4
    c4d2:	6801      	ldr	r1, [r0, #0]
    c4d4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    c4d8:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    c4dc:	6001      	str	r1, [r0, #0]
    c4de:	4927      	ldr	r1, [pc, #156]	; (c57c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c4e0:	4828      	ldr	r0, [pc, #160]	; (c584 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    c4e2:	313c      	adds	r1, #60	; 0x3c
    c4e4:	6008      	str	r0, [r1, #0]
    c4e6:	f7f8 ff59 	bl	539c <mpsl_fem_device_config_254_apply_get>
    c4ea:	b140      	cbz	r0, c4fe <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    c4ec:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4f0:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    c4f4:	1c41      	adds	r1, r0, #1
    c4f6:	d002      	beq.n	c4fe <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    c4f8:	4920      	ldr	r1, [pc, #128]	; (c57c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c4fa:	3110      	adds	r1, #16
    c4fc:	6008      	str	r0, [r1, #0]
    c4fe:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    c502:	6e00      	ldr	r0, [r0, #96]	; 0x60
    c504:	1c41      	adds	r1, r0, #1
    c506:	d004      	beq.n	c512 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    c508:	491f      	ldr	r1, [pc, #124]	; (c588 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    c50a:	680a      	ldr	r2, [r1, #0]
    c50c:	f360 4217 	bfi	r2, r0, #16, #8
    c510:	600a      	str	r2, [r1, #0]
    c512:	f240 1103 	movw	r1, #259	; 0x103
    c516:	f240 605b 	movw	r0, #1627	; 0x65b
    c51a:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    c51e:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c522:	2001      	movs	r0, #1
    c524:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    c528:	f000 f842 	bl	c5b0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    c52c:	f240 2001 	movw	r0, #513	; 0x201
    c530:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    c534:	2002      	movs	r0, #2
    c536:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    c53a:	4914      	ldr	r1, [pc, #80]	; (c58c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    c53c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c540:	6008      	str	r0, [r1, #0]
    c542:	4913      	ldr	r1, [pc, #76]	; (c590 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    c544:	2000      	movs	r0, #0
    c546:	4d13      	ldr	r5, [pc, #76]	; (c594 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    c548:	8608      	strh	r0, [r1, #48]	; 0x30
    c54a:	3110      	adds	r1, #16
    c54c:	61c8      	str	r0, [r1, #28]
    c54e:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    c552:	7028      	strb	r0, [r5, #0]
    c554:	2001      	movs	r0, #1
    c556:	f005 f9fc 	bl	11952 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    c55a:	2010      	movs	r0, #16
    c55c:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c560:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c564:	2002      	movs	r0, #2
    c566:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    c56a:	6868      	ldr	r0, [r5, #4]
    c56c:	2800      	cmp	r0, #0
    c56e:	d002      	beq.n	c576 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe6>
    c570:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c574:	4700      	bx	r0
    c576:	bd70      	pop	{r4, r5, r6, pc}
    c578:	40001000 	.word	0x40001000
    c57c:	4000173c 	.word	0x4000173c
    c580:	80000096 	.word	0x80000096
    c584:	8900002c 	.word	0x8900002c
    c588:	4000158c 	.word	0x4000158c
    c58c:	4001f504 	.word	0x4001f504
    c590:	20001388 	.word	0x20001388
    c594:	200002f4 	.word	0x200002f4

0000c598 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    c598:	4901      	ldr	r1, [pc, #4]	; (c5a0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    c59a:	7548      	strb	r0, [r1, #21]
    c59c:	4770      	bx	lr
    c59e:	0000      	.short	0x0000
    c5a0:	20001398 	.word	0x20001398

0000c5a4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    c5a4:	4901      	ldr	r1, [pc, #4]	; (c5ac <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    c5a6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    c5aa:	4770      	bx	lr
    c5ac:	0000ce70 	.word	0x0000ce70

0000c5b0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    c5b0:	4908      	ldr	r1, [pc, #32]	; (c5d4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    c5b2:	b510      	push	{r4, lr}
    c5b4:	7508      	strb	r0, [r1, #20]
    c5b6:	4908      	ldr	r1, [pc, #32]	; (c5d8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    c5b8:	2801      	cmp	r0, #1
    c5ba:	d006      	beq.n	c5ca <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    c5bc:	2802      	cmp	r0, #2
    c5be:	d006      	beq.n	c5ce <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    c5c0:	f640 5155 	movw	r1, #3413	; 0xd55
    c5c4:	203e      	movs	r0, #62	; 0x3e
    c5c6:	f7f9 f803 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5ca:	2003      	movs	r0, #3
    c5cc:	e000      	b.n	c5d0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    c5ce:	2004      	movs	r0, #4
    c5d0:	6008      	str	r0, [r1, #0]
    c5d2:	bd10      	pop	{r4, pc}
    c5d4:	20001398 	.word	0x20001398
    c5d8:	40001510 	.word	0x40001510

0000c5dc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    c5dc:	4905      	ldr	r1, [pc, #20]	; (c5f4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    c5de:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    c5e2:	4805      	ldr	r0, [pc, #20]	; (c5f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    c5e4:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    c5e8:	f041 0101 	orr.w	r1, r1, #1
    c5ec:	7001      	strb	r1, [r0, #0]
    c5ee:	f000 ba3f 	b.w	ca70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c5f2:	0000      	.short	0x0000
    c5f4:	40001000 	.word	0x40001000
    c5f8:	20001398 	.word	0x20001398

0000c5fc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    c5fc:	4901      	ldr	r1, [pc, #4]	; (c604 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    c5fe:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    c602:	4770      	bx	lr
    c604:	0000ce7c 	.word	0x0000ce7c

0000c608 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    c608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c60c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; c6b0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>
    c610:	4d28      	ldr	r5, [pc, #160]	; (c6b4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xac>)
    c612:	460f      	mov	r7, r1
    c614:	0006      	movs	r6, r0
    c616:	4614      	mov	r4, r2
    c618:	f04f 0801 	mov.w	r8, #1
    c61c:	d004      	beq.n	c628 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20>
    c61e:	2e01      	cmp	r6, #1
    c620:	d010      	beq.n	c644 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3c>
    c622:	f640 0114 	movw	r1, #2068	; 0x814
    c626:	e039      	b.n	c69c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x94>
    c628:	4610      	mov	r0, r2
    c62a:	f000 fbd5 	bl	cdd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    c62e:	4822      	ldr	r0, [pc, #136]	; (c6b8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb0>)
    c630:	f885 8009 	strb.w	r8, [r5, #9]
    c634:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
    c638:	4638      	mov	r0, r7
    c63a:	f000 fb7b 	bl	cd34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    c63e:	4604      	mov	r4, r0
    c640:	4648      	mov	r0, r9
    c642:	e00c      	b.n	c65e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x56>
    c644:	4610      	mov	r0, r2
    c646:	f000 fbad 	bl	cda4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    c64a:	2002      	movs	r0, #2
    c64c:	7268      	strb	r0, [r5, #9]
    c64e:	f649 71ba 	movw	r1, #40890	; 0x9fba
    c652:	4638      	mov	r0, r7
    c654:	f000 fb6e 	bl	cd34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    c658:	4604      	mov	r4, r0
    c65a:	4815      	ldr	r0, [pc, #84]	; (c6b0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>)
    c65c:	1d00      	adds	r0, r0, #4
    c65e:	f000 fb27 	bl	ccb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    c662:	4f16      	ldr	r7, [pc, #88]	; (c6bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    c664:	f8c7 4540 	str.w	r4, [r7, #1344]	; 0x540
    c668:	4916      	ldr	r1, [pc, #88]	; (c6c4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>)
    c66a:	4815      	ldr	r0, [pc, #84]	; (c6c0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>)
    c66c:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    c670:	2010      	movs	r0, #16
    c672:	f8c9 0304 	str.w	r0, [r9, #772]	; 0x304
    c676:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    c678:	4913      	ldr	r1, [pc, #76]	; (c6c8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc0>)
    c67a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    c67e:	62a8      	str	r0, [r5, #40]	; 0x28
    c680:	0138      	lsls	r0, r7, #4
    c682:	6008      	str	r0, [r1, #0]
    c684:	f000 fa2e 	bl	cae4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    c688:	f8c7 804c 	str.w	r8, [r7, #76]	; 0x4c
    c68c:	480b      	ldr	r0, [pc, #44]	; (c6bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    c68e:	300c      	adds	r0, #12
    c690:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    c694:	42a0      	cmp	r0, r4
    c696:	d304      	bcc.n	c6a2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x9a>
    c698:	f640 012a 	movw	r1, #2090	; 0x82a
    c69c:	203e      	movs	r0, #62	; 0x3e
    c69e:	f7f8 ff97 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c6a2:	4621      	mov	r1, r4
    c6a4:	4630      	mov	r0, r6
    c6a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c6aa:	f000 bb0d 	b.w	ccc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    c6ae:	0000      	.short	0x0000
    c6b0:	40001000 	.word	0x40001000
    c6b4:	20001398 	.word	0x20001398
    c6b8:	0000ce1c 	.word	0x0000ce1c
    c6bc:	40008000 	.word	0x40008000
    c6c0:	40008140 	.word	0x40008140
    c6c4:	4001f098 	.word	0x4001f098
    c6c8:	4001f504 	.word	0x4001f504

0000c6cc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    c6cc:	4b0d      	ldr	r3, [pc, #52]	; (c704 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    c6ce:	b510      	push	{r4, lr}
    c6d0:	71d8      	strb	r0, [r3, #7]
    c6d2:	729a      	strb	r2, [r3, #10]
    c6d4:	b151      	cbz	r1, c6ec <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    c6d6:	2002      	movs	r0, #2
    c6d8:	7218      	strb	r0, [r3, #8]
    c6da:	2801      	cmp	r0, #1
    c6dc:	d008      	beq.n	c6f0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    c6de:	2802      	cmp	r0, #2
    c6e0:	d00f      	beq.n	c702 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    c6e2:	f640 213d 	movw	r1, #2621	; 0xa3d
    c6e6:	203e      	movs	r0, #62	; 0x3e
    c6e8:	f7f8 ff72 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c6ec:	2001      	movs	r0, #1
    c6ee:	e7f3      	b.n	c6d8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    c6f0:	7a58      	ldrb	r0, [r3, #9]
    c6f2:	2802      	cmp	r0, #2
    c6f4:	d105      	bne.n	c702 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    c6f6:	f000 f97f 	bl	c9f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    c6fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c6fe:	f000 baad 	b.w	cc5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    c702:	bd10      	pop	{r4, pc}
    c704:	20001398 	.word	0x20001398

0000c708 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    c708:	4902      	ldr	r1, [pc, #8]	; (c714 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    c70a:	2000      	movs	r0, #0
    c70c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c710:	4770      	bx	lr
    c712:	0000      	.short	0x0000
    c714:	40008000 	.word	0x40008000

0000c718 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    c718:	4904      	ldr	r1, [pc, #16]	; (c72c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    c71a:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    c71e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    c722:	4249      	negs	r1, r1
    c724:	7001      	strb	r1, [r0, #0]
    c726:	2001      	movs	r0, #1
    c728:	4770      	bx	lr
    c72a:	0000      	.short	0x0000
    c72c:	40001000 	.word	0x40001000

0000c730 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    c730:	4903      	ldr	r1, [pc, #12]	; (c740 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    c732:	0e02      	lsrs	r2, r0, #24
    c734:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    c738:	0200      	lsls	r0, r0, #8
    c73a:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    c73e:	4770      	bx	lr
    c740:	40001000 	.word	0x40001000

0000c744 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    c744:	6800      	ldr	r0, [r0, #0]
    c746:	4903      	ldr	r1, [pc, #12]	; (c754 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    c748:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c74c:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    c750:	4770      	bx	lr
    c752:	0000      	.short	0x0000
    c754:	40001000 	.word	0x40001000

0000c758 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    c758:	b510      	push	{r4, lr}
    c75a:	2200      	movs	r2, #0
    c75c:	2901      	cmp	r1, #1
    c75e:	d006      	beq.n	c76e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    c760:	2902      	cmp	r1, #2
    c762:	d002      	beq.n	c76a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    c764:	f44f 712f 	mov.w	r1, #700	; 0x2bc
    c768:	e014      	b.n	c794 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    c76a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c76e:	490b      	ldr	r1, [pc, #44]	; (c79c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    c770:	430a      	orrs	r2, r1
    c772:	490b      	ldr	r1, [pc, #44]	; (c7a0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    c774:	600a      	str	r2, [r1, #0]
    c776:	490b      	ldr	r1, [pc, #44]	; (c7a4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    c778:	4308      	orrs	r0, r1
    c77a:	4909      	ldr	r1, [pc, #36]	; (c7a0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    c77c:	1d09      	adds	r1, r1, #4
    c77e:	6008      	str	r0, [r1, #0]
    c780:	4809      	ldr	r0, [pc, #36]	; (c7a8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    c782:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c786:	b2c0      	uxtb	r0, r0
    c788:	2803      	cmp	r0, #3
    c78a:	d001      	beq.n	c790 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    c78c:	280b      	cmp	r0, #11
    c78e:	d104      	bne.n	c79a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    c790:	f44f 7135 	mov.w	r1, #724	; 0x2d4
    c794:	203e      	movs	r0, #62	; 0x3e
    c796:	f7f8 ff1b 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c79a:	bd10      	pop	{r4, pc}
    c79c:	00100108 	.word	0x00100108
    c7a0:	40001514 	.word	0x40001514
    c7a4:	02030000 	.word	0x02030000
    c7a8:	40001000 	.word	0x40001000

0000c7ac <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    c7ac:	4901      	ldr	r1, [pc, #4]	; (c7b4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    c7ae:	7588      	strb	r0, [r1, #22]
    c7b0:	4770      	bx	lr
    c7b2:	0000      	.short	0x0000
    c7b4:	20001398 	.word	0x20001398

0000c7b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    c7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c7bc:	4852      	ldr	r0, [pc, #328]	; (c908 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    c7be:	f04f 0a01 	mov.w	sl, #1
    c7c2:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    c7c6:	4850      	ldr	r0, [pc, #320]	; (c908 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    c7c8:	300c      	adds	r0, #12
    c7ca:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    c7ce:	f000 fff3 	bl	d7b8 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    c7d2:	4c4e      	ldr	r4, [pc, #312]	; (c90c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c7d4:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    c7d8:	f000 f918 	bl	ca0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    c7dc:	494c      	ldr	r1, [pc, #304]	; (c910 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    c7de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c7e0:	6008      	str	r0, [r1, #0]
    c7e2:	f8df 9130 	ldr.w	r9, [pc, #304]	; c914 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    c7e6:	2000      	movs	r0, #0
    c7e8:	62a0      	str	r0, [r4, #40]	; 0x28
    c7ea:	f8d9 2200 	ldr.w	r2, [r9, #512]	; 0x200
    c7ee:	f240 131d 	movw	r3, #285	; 0x11d
    c7f2:	439a      	bics	r2, r3
    c7f4:	f8c9 2200 	str.w	r2, [r9, #512]	; 0x200
    c7f8:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    c7fc:	f000 f986 	bl	cb0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    c800:	4605      	mov	r5, r0
    c802:	4841      	ldr	r0, [pc, #260]	; (c908 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    c804:	3008      	adds	r0, #8
    c806:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    c80a:	4e3f      	ldr	r6, [pc, #252]	; (c908 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    c80c:	61e0      	str	r0, [r4, #28]
    c80e:	1d36      	adds	r6, r6, #4
    c810:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    c814:	61a0      	str	r0, [r4, #24]
    c816:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    c81a:	7d21      	ldrb	r1, [r4, #20]
    c81c:	f884 1020 	strb.w	r1, [r4, #32]
    c820:	7a61      	ldrb	r1, [r4, #9]
    c822:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    c826:	46a0      	mov	r8, r4
    c828:	2400      	movs	r4, #0
    c82a:	4639      	mov	r1, r7
    c82c:	4628      	mov	r0, r5
    c82e:	f000 f9e1 	bl	cbf4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    c832:	b910      	cbnz	r0, c83a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    c834:	f8c9 a010 	str.w	sl, [r9, #16]
    c838:	2401      	movs	r4, #1
    c83a:	4f34      	ldr	r7, [pc, #208]	; (c90c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c83c:	07e8      	lsls	r0, r5, #31
    c83e:	f1a7 0710 	sub.w	r7, r7, #16
    c842:	d002      	beq.n	c84a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    c844:	6838      	ldr	r0, [r7, #0]
    c846:	4780      	blx	r0
    c848:	e032      	b.n	c8b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    c84a:	07a8      	lsls	r0, r5, #30
    c84c:	d527      	bpl.n	c89e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe6>
    c84e:	0768      	lsls	r0, r5, #29
    c850:	d41f      	bmi.n	c892 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c852:	f001 f8fb 	bl	da4c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c856:	b9e0      	cbnz	r0, c892 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c858:	f001 f8e8 	bl	da2c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c85c:	b9c8      	cbnz	r0, c892 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c85e:	482e      	ldr	r0, [pc, #184]	; (c918 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    c860:	6800      	ldr	r0, [r0, #0]
    c862:	f3c0 6c00 	ubfx	ip, r0, #24, #1
    c866:	f3c0 5142 	ubfx	r1, r0, #21, #3
    c86a:	f000 030f 	and.w	r3, r0, #15
    c86e:	f3c0 1203 	ubfx	r2, r0, #4, #4
    c872:	f3c0 2003 	ubfx	r0, r0, #8, #4
    c876:	f1bc 0f00 	cmp.w	ip, #0
    c87a:	d00a      	beq.n	c892 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c87c:	b10b      	cbz	r3, c882 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    c87e:	b102      	cbz	r2, c882 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    c880:	b938      	cbnz	r0, c892 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c882:	4825      	ldr	r0, [pc, #148]	; (c918 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    c884:	1d00      	adds	r0, r0, #4
    c886:	6800      	ldr	r0, [r0, #0]
    c888:	b118      	cbz	r0, c892 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c88a:	2903      	cmp	r1, #3
    c88c:	d201      	bcs.n	c892 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c88e:	f045 0504 	orr.w	r5, r5, #4
    c892:	f345 0080 	sbfx	r0, r5, #2, #1
    c896:	4621      	mov	r1, r4
    c898:	1c40      	adds	r0, r0, #1
    c89a:	687a      	ldr	r2, [r7, #4]
    c89c:	e007      	b.n	c8ae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    c89e:	f015 0f28 	tst.w	r5, #40	; 0x28
    c8a2:	d005      	beq.n	c8b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    c8a4:	f345 1140 	sbfx	r1, r5, #5, #1
    c8a8:	68ba      	ldr	r2, [r7, #8]
    c8aa:	4620      	mov	r0, r4
    c8ac:	1c49      	adds	r1, r1, #1
    c8ae:	4790      	blx	r2
    c8b0:	06e8      	lsls	r0, r5, #27
    c8b2:	d501      	bpl.n	c8b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    c8b4:	68f8      	ldr	r0, [r7, #12]
    c8b6:	4780      	blx	r0
    c8b8:	f898 1009 	ldrb.w	r1, [r8, #9]
    c8bc:	4640      	mov	r0, r8
    c8be:	2902      	cmp	r1, #2
    c8c0:	d120      	bne.n	c904 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    c8c2:	7b01      	ldrb	r1, [r0, #12]
    c8c4:	2900      	cmp	r1, #0
    c8c6:	d01d      	beq.n	c904 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    c8c8:	2902      	cmp	r1, #2
    c8ca:	d004      	beq.n	c8d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11e>
    c8cc:	2901      	cmp	r1, #1
    c8ce:	d009      	beq.n	c8e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12c>
    c8d0:	f640 4134 	movw	r1, #3124	; 0xc34
    c8d4:	e00d      	b.n	c8f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    c8d6:	69c1      	ldr	r1, [r0, #28]
    c8d8:	f8d8 0010 	ldr.w	r0, [r8, #16]
    c8dc:	4408      	add	r0, r1
    c8de:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    c8e2:	e00b      	b.n	c8fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    c8e4:	6901      	ldr	r1, [r0, #16]
    c8e6:	f8d8 001c 	ldr.w	r0, [r8, #28]
    c8ea:	4281      	cmp	r1, r0
    c8ec:	d804      	bhi.n	c8f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x140>
    c8ee:	f640 4135 	movw	r1, #3125	; 0xc35
    c8f2:	203e      	movs	r0, #62	; 0x3e
    c8f4:	f7f8 fe6c 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c8f8:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    c8fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c900:	f000 b9b6 	b.w	cc70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    c904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c908:	40008000 	.word	0x40008000
    c90c:	20001398 	.word	0x20001398
    c910:	4001f508 	.word	0x4001f508
    c914:	40001000 	.word	0x40001000
    c918:	40001450 	.word	0x40001450

0000c91c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    c91c:	b570      	push	{r4, r5, r6, lr}
    c91e:	4b16      	ldr	r3, [pc, #88]	; (c978 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    c920:	888c      	ldrh	r4, [r1, #4]
    c922:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    c926:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    c92a:	780c      	ldrb	r4, [r1, #0]
    c92c:	f8d1 1001 	ldr.w	r1, [r1, #1]
    c930:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    c934:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    c938:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    c93c:	2401      	movs	r4, #1
    c93e:	4084      	lsls	r4, r0
    c940:	b2c9      	uxtb	r1, r1
    c942:	b2e5      	uxtb	r5, r4
    c944:	4329      	orrs	r1, r5
    c946:	b132      	cbz	r2, c956 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    c948:	2a01      	cmp	r2, #1
    c94a:	d00a      	beq.n	c962 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    c94c:	f240 51ad 	movw	r1, #1453	; 0x5ad
    c950:	203e      	movs	r0, #62	; 0x3e
    c952:	f7f8 fe3d 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c956:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    c95a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c95e:	43a0      	bics	r0, r4
    c960:	e004      	b.n	c96c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    c962:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    c966:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c96a:	4328      	orrs	r0, r5
    c96c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    c970:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    c974:	bd70      	pop	{r4, r5, r6, pc}
    c976:	0000      	.short	0x0000
    c978:	40001000 	.word	0x40001000

0000c97c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    c97c:	4901      	ldr	r1, [pc, #4]	; (c984 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    c97e:	2001      	movs	r0, #1
    c980:	7008      	strb	r0, [r1, #0]
    c982:	4770      	bx	lr
    c984:	200002f4 	.word	0x200002f4
    c988:	480b      	ldr	r0, [pc, #44]	; (c9b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    c98a:	7d81      	ldrb	r1, [r0, #22]
    c98c:	480b      	ldr	r0, [pc, #44]	; (c9bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    c98e:	5c40      	ldrb	r0, [r0, r1]
    c990:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    c994:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    c998:	d204      	bcs.n	c9a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    c99a:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    c99e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    c9a2:	e001      	b.n	c9a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    c9a4:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    c9a8:	4a05      	ldr	r2, [pc, #20]	; (c9c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    c9aa:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    c9ae:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    c9b2:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    c9b6:	4770      	bx	lr
    c9b8:	20001398 	.word	0x20001398
    c9bc:	0000ce22 	.word	0x0000ce22
    c9c0:	40001000 	.word	0x40001000
    c9c4:	b508      	push	{r3, lr}
    c9c6:	490b      	ldr	r1, [pc, #44]	; (c9f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    c9c8:	466b      	mov	r3, sp
    c9ca:	f991 2015 	ldrsb.w	r2, [r1, #21]
    c9ce:	7d89      	ldrb	r1, [r1, #22]
    c9d0:	f000 faca 	bl	cf68 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    c9d4:	f99d 0000 	ldrsb.w	r0, [sp]
    c9d8:	f000 fa9a 	bl	cf10 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    c9dc:	f10d 0001 	add.w	r0, sp, #1
    c9e0:	f7f8 fcca 	bl	5378 <mpsl_fem_pa_gain_set>
    c9e4:	2800      	cmp	r0, #0
    c9e6:	d004      	beq.n	c9f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    c9e8:	f240 51ee 	movw	r1, #1518	; 0x5ee
    c9ec:	203e      	movs	r0, #62	; 0x3e
    c9ee:	f7f8 fdef 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c9f2:	bd08      	pop	{r3, pc}
    c9f4:	20001398 	.word	0x20001398
    c9f8:	4803      	ldr	r0, [pc, #12]	; (ca08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    c9fa:	7a01      	ldrb	r1, [r0, #8]
    c9fc:	2901      	cmp	r1, #1
    c9fe:	d102      	bne.n	ca06 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    ca00:	7a80      	ldrb	r0, [r0, #10]
    ca02:	f7ff bfdf 	b.w	c9c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    ca06:	4770      	bx	lr
    ca08:	20001398 	.word	0x20001398
    ca0c:	480d      	ldr	r0, [pc, #52]	; (ca44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    ca0e:	b510      	push	{r4, lr}
    ca10:	7a40      	ldrb	r0, [r0, #9]
    ca12:	2801      	cmp	r0, #1
    ca14:	d00c      	beq.n	ca30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    ca16:	2802      	cmp	r0, #2
    ca18:	d113      	bne.n	ca42 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    ca1a:	f7f8 fc8f 	bl	533c <mpsl_fem_lna_configuration_clear>
    ca1e:	2800      	cmp	r0, #0
    ca20:	d00f      	beq.n	ca42 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    ca22:	1c40      	adds	r0, r0, #1
    ca24:	d00d      	beq.n	ca42 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    ca26:	f640 019a 	movw	r1, #2202	; 0x89a
    ca2a:	203e      	movs	r0, #62	; 0x3e
    ca2c:	f7f8 fdd0 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ca30:	f7f8 fc96 	bl	5360 <mpsl_fem_pa_configuration_clear>
    ca34:	2800      	cmp	r0, #0
    ca36:	d004      	beq.n	ca42 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    ca38:	1c40      	adds	r0, r0, #1
    ca3a:	d002      	beq.n	ca42 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    ca3c:	f640 0194 	movw	r1, #2196	; 0x894
    ca40:	e7f3      	b.n	ca2a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    ca42:	bd10      	pop	{r4, pc}
    ca44:	20001398 	.word	0x20001398
    ca48:	4808      	ldr	r0, [pc, #32]	; (ca6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    ca4a:	2100      	movs	r1, #0
    ca4c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    ca50:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    ca54:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    ca58:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    ca5c:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    ca60:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    ca64:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    ca68:	4770      	bx	lr
    ca6a:	0000      	.short	0x0000
    ca6c:	40001000 	.word	0x40001000
    ca70:	4818      	ldr	r0, [pc, #96]	; (cad4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    ca72:	b510      	push	{r4, lr}
    ca74:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    ca78:	07c1      	lsls	r1, r0, #31
    ca7a:	d029      	beq.n	cad0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    ca7c:	0781      	lsls	r1, r0, #30
    ca7e:	d514      	bpl.n	caaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    ca80:	4815      	ldr	r0, [pc, #84]	; (cad8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    ca82:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    ca86:	f041 0101 	orr.w	r1, r1, #1
    ca8a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    ca8e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    ca92:	b2c0      	uxtb	r0, r0
    ca94:	280b      	cmp	r0, #11
    ca96:	d005      	beq.n	caa4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    ca98:	280a      	cmp	r0, #10
    ca9a:	d003      	beq.n	caa4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    ca9c:	2803      	cmp	r0, #3
    ca9e:	d001      	beq.n	caa4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    caa0:	2802      	cmp	r0, #2
    caa2:	d115      	bne.n	cad0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    caa4:	f240 6117 	movw	r1, #1559	; 0x617
    caa8:	e00f      	b.n	caca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    caaa:	0740      	lsls	r0, r0, #29
    caac:	d510      	bpl.n	cad0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    caae:	480a      	ldr	r0, [pc, #40]	; (cad8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    cab0:	490a      	ldr	r1, [pc, #40]	; (cadc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    cab2:	3008      	adds	r0, #8
    cab4:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    cab8:	f44f 71a0 	mov.w	r1, #320	; 0x140
    cabc:	4808      	ldr	r0, [pc, #32]	; (cae0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    cabe:	f004 ff6b 	bl	11998 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    cac2:	2800      	cmp	r0, #0
    cac4:	d004      	beq.n	cad0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    cac6:	f240 611f 	movw	r1, #1567	; 0x61f
    caca:	203e      	movs	r0, #62	; 0x3e
    cacc:	f7f8 fd80 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cad0:	bd10      	pop	{r4, pc}
    cad2:	0000      	.short	0x0000
    cad4:	20001398 	.word	0x20001398
    cad8:	40001000 	.word	0x40001000
    cadc:	4001f098 	.word	0x4001f098
    cae0:	40008000 	.word	0x40008000
    cae4:	4808      	ldr	r0, [pc, #32]	; (cb08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    cae6:	4601      	mov	r1, r0
    cae8:	79c2      	ldrb	r2, [r0, #7]
    caea:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    caee:	b112      	cbz	r2, caf6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    caf0:	2a01      	cmp	r2, #1
    caf2:	d003      	beq.n	cafc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    caf4:	e006      	b.n	cb04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    caf6:	f041 0102 	orr.w	r1, r1, #2
    cafa:	e001      	b.n	cb00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    cafc:	f041 0104 	orr.w	r1, r1, #4
    cb00:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    cb04:	f7ff bfb4 	b.w	ca70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    cb08:	20001398 	.word	0x20001398
    cb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb10:	4d34      	ldr	r5, [pc, #208]	; (cbe4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    cb12:	2400      	movs	r4, #0
    cb14:	7b28      	ldrb	r0, [r5, #12]
    cb16:	b138      	cbz	r0, cb28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    cb18:	f44f 71a2 	mov.w	r1, #324	; 0x144
    cb1c:	4832      	ldr	r0, [pc, #200]	; (cbe8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    cb1e:	f004 ff3b 	bl	11998 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    cb22:	b108      	cbz	r0, cb28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    cb24:	2601      	movs	r6, #1
    cb26:	e000      	b.n	cb2a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    cb28:	2600      	movs	r6, #0
    cb2a:	7a68      	ldrb	r0, [r5, #9]
    cb2c:	4f2f      	ldr	r7, [pc, #188]	; (cbec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    cb2e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    cb32:	2801      	cmp	r0, #1
    cb34:	d002      	beq.n	cb3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    cb36:	2802      	cmp	r0, #2
    cb38:	d006      	beq.n	cb48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    cb3a:	e016      	b.n	cb6a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    cb3c:	4638      	mov	r0, r7
    cb3e:	f004 ff26 	bl	1198e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    cb42:	b190      	cbz	r0, cb6a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    cb44:	2408      	movs	r4, #8
    cb46:	e010      	b.n	cb6a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    cb48:	4638      	mov	r0, r7
    cb4a:	f004 ff20 	bl	1198e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    cb4e:	b100      	cbz	r0, cb52 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    cb50:	2402      	movs	r4, #2
    cb52:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    cb56:	43c0      	mvns	r0, r0
    cb58:	f340 0000 	sbfx	r0, r0, #0, #1
    cb5c:	1c40      	adds	r0, r0, #1
    cb5e:	d101      	bne.n	cb64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    cb60:	f044 0404 	orr.w	r4, r4, #4
    cb64:	b10e      	cbz	r6, cb6a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    cb66:	f044 0401 	orr.w	r4, r4, #1
    cb6a:	f014 0f0b 	tst.w	r4, #11
    cb6e:	d107      	bne.n	cb80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    cb70:	f44f 7188 	mov.w	r1, #272	; 0x110
    cb74:	4638      	mov	r0, r7
    cb76:	f004 ff0a 	bl	1198e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    cb7a:	b108      	cbz	r0, cb80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    cb7c:	f044 0410 	orr.w	r4, r4, #16
    cb80:	481b      	ldr	r0, [pc, #108]	; (cbf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    cb82:	7800      	ldrb	r0, [r0, #0]
    cb84:	b1f8      	cbz	r0, cbc6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    cb86:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    cb8a:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    cb8e:	d007      	beq.n	cba0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    cb90:	f44f 718a 	mov.w	r1, #276	; 0x114
    cb94:	4638      	mov	r0, r7
    cb96:	f004 fefa 	bl	1198e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    cb9a:	b108      	cbz	r0, cba0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    cb9c:	2001      	movs	r0, #1
    cb9e:	e000      	b.n	cba2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    cba0:	2000      	movs	r0, #0
    cba2:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    cba6:	b13e      	cbz	r6, cbb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    cba8:	f44f 718c 	mov.w	r1, #280	; 0x118
    cbac:	4638      	mov	r0, r7
    cbae:	f004 feee 	bl	1198e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    cbb2:	b108      	cbz	r0, cbb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    cbb4:	2001      	movs	r0, #1
    cbb6:	e000      	b.n	cbba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    cbb8:	2000      	movs	r0, #0
    cbba:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    cbbe:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    cbc2:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    cbc6:	f7ff ff3f 	bl	ca48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    cbca:	06e0      	lsls	r0, r4, #27
    cbcc:	d506      	bpl.n	cbdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    cbce:	0720      	lsls	r0, r4, #28
    cbd0:	d404      	bmi.n	cbdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    cbd2:	7a68      	ldrb	r0, [r5, #9]
    cbd4:	2801      	cmp	r0, #1
    cbd6:	d101      	bne.n	cbdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    cbd8:	f044 0420 	orr.w	r4, r4, #32
    cbdc:	4620      	mov	r0, r4
    cbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cbe2:	0000      	.short	0x0000
    cbe4:	20001398 	.word	0x20001398
    cbe8:	40008000 	.word	0x40008000
    cbec:	40001000 	.word	0x40001000
    cbf0:	200002f4 	.word	0x200002f4
    cbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cbf8:	4c17      	ldr	r4, [pc, #92]	; (cc58 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>)
    cbfa:	460d      	mov	r5, r1
    cbfc:	7a21      	ldrb	r1, [r4, #8]
    cbfe:	b129      	cbz	r1, cc0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    cc00:	f010 0f11 	tst.w	r0, #17
    cc04:	d007      	beq.n	cc16 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    cc06:	f7ff fa7d 	bl	c104 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    cc0a:	e023      	b.n	cc54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    cc0c:	f000 f88a 	bl	cd24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    cc10:	2000      	movs	r0, #0
    cc12:	7320      	strb	r0, [r4, #12]
    cc14:	e01e      	b.n	cc54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    cc16:	2901      	cmp	r1, #1
    cc18:	d001      	beq.n	cc1e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    cc1a:	2601      	movs	r6, #1
    cc1c:	e000      	b.n	cc20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    cc1e:	2600      	movs	r6, #0
    cc20:	79e0      	ldrb	r0, [r4, #7]
    cc22:	2801      	cmp	r0, #1
    cc24:	d00e      	beq.n	cc44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    cc26:	2700      	movs	r7, #0
    cc28:	f000 f87c 	bl	cd24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    cc2c:	2196      	movs	r1, #150	; 0x96
    cc2e:	4630      	mov	r0, r6
    cc30:	f000 f88e 	bl	cd50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d4>
    cc34:	4601      	mov	r1, r0
    cc36:	b14f      	cbz	r7, cc4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    cc38:	353b      	adds	r5, #59	; 0x3b
    cc3a:	428d      	cmp	r5, r1
    cc3c:	d904      	bls.n	cc48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    cc3e:	2000      	movs	r0, #0
    cc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc44:	2701      	movs	r7, #1
    cc46:	e7ef      	b.n	cc28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    cc48:	2001      	movs	r0, #1
    cc4a:	71e0      	strb	r0, [r4, #7]
    cc4c:	7aa2      	ldrb	r2, [r4, #10]
    cc4e:	4630      	mov	r0, r6
    cc50:	f7ff fcda 	bl	c608 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    cc54:	2001      	movs	r0, #1
    cc56:	e7f3      	b.n	cc40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    cc58:	20001398 	.word	0x20001398
    cc5c:	4803      	ldr	r0, [pc, #12]	; (cc6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    cc5e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    cc62:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    cc66:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    cc6a:	4770      	bx	lr
    cc6c:	40001000 	.word	0x40001000
    cc70:	4804      	ldr	r0, [pc, #16]	; (cc84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x308>)
    cc72:	6a81      	ldr	r1, [r0, #40]	; 0x28
    cc74:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    cc78:	6281      	str	r1, [r0, #40]	; 0x28
    cc7a:	4903      	ldr	r1, [pc, #12]	; (cc88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x30c>)
    cc7c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    cc80:	6008      	str	r0, [r1, #0]
    cc82:	4770      	bx	lr
    cc84:	20001398 	.word	0x20001398
    cc88:	4001f504 	.word	0x4001f504
    cc8c:	4a07      	ldr	r2, [pc, #28]	; (ccac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    cc8e:	2000      	movs	r0, #0
    cc90:	3208      	adds	r2, #8
    cc92:	4906      	ldr	r1, [pc, #24]	; (ccac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    cc94:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    cc98:	1d0a      	adds	r2, r1, #4
    cc9a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    cc9e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    cca2:	4902      	ldr	r1, [pc, #8]	; (ccac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    cca4:	310c      	adds	r1, #12
    cca6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    ccaa:	4770      	bx	lr
    ccac:	40008000 	.word	0x40008000
    ccb0:	4903      	ldr	r1, [pc, #12]	; (ccc0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x344>)
    ccb2:	79c9      	ldrb	r1, [r1, #7]
    ccb4:	2900      	cmp	r1, #0
    ccb6:	d102      	bne.n	ccbe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x342>
    ccb8:	4902      	ldr	r1, [pc, #8]	; (ccc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x348>)
    ccba:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    ccbe:	4770      	bx	lr
    ccc0:	20001398 	.word	0x20001398
    ccc4:	4001f098 	.word	0x4001f098
    ccc8:	b510      	push	{r4, lr}
    ccca:	4a14      	ldr	r2, [pc, #80]	; (cd1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    cccc:	b120      	cbz	r0, ccd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    ccce:	2801      	cmp	r0, #1
    ccd0:	d011      	beq.n	ccf6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37a>
    ccd2:	f240 714c 	movw	r1, #1868	; 0x74c
    ccd6:	e01c      	b.n	cd12 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    ccd8:	f101 0028 	add.w	r0, r1, #40	; 0x28
    ccdc:	e9c2 1002 	strd	r1, r0, [r2, #8]
    cce0:	490f      	ldr	r1, [pc, #60]	; (cd20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    cce2:	480e      	ldr	r0, [pc, #56]	; (cd1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    cce4:	f7f8 fb42 	bl	536c <mpsl_fem_pa_configuration_set>
    cce8:	2800      	cmp	r0, #0
    ccea:	d015      	beq.n	cd18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    ccec:	1c40      	adds	r0, r0, #1
    ccee:	d013      	beq.n	cd18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    ccf0:	f240 713b 	movw	r1, #1851	; 0x73b
    ccf4:	e00d      	b.n	cd12 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    ccf6:	f101 0029 	add.w	r0, r1, #41	; 0x29
    ccfa:	e9c2 1002 	strd	r1, r0, [r2, #8]
    ccfe:	4908      	ldr	r1, [pc, #32]	; (cd20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    cd00:	4806      	ldr	r0, [pc, #24]	; (cd1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    cd02:	f7f8 fb21 	bl	5348 <mpsl_fem_lna_configuration_set>
    cd06:	2800      	cmp	r0, #0
    cd08:	d006      	beq.n	cd18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    cd0a:	1c40      	adds	r0, r0, #1
    cd0c:	d004      	beq.n	cd18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    cd0e:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    cd12:	203e      	movs	r0, #62	; 0x3e
    cd14:	f7f8 fc5c 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd18:	bd10      	pop	{r4, pc}
    cd1a:	0000      	.short	0x0000
    cd1c:	200002fc 	.word	0x200002fc
    cd20:	0000ce4c 	.word	0x0000ce4c
    cd24:	4802      	ldr	r0, [pc, #8]	; (cd30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>)
    cd26:	2100      	movs	r1, #0
    cd28:	71c1      	strb	r1, [r0, #7]
    cd2a:	7201      	strb	r1, [r0, #8]
    cd2c:	7241      	strb	r1, [r0, #9]
    cd2e:	4770      	bx	lr
    cd30:	20001398 	.word	0x20001398
    cd34:	4a05      	ldr	r2, [pc, #20]	; (cd4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d0>)
    cd36:	79d2      	ldrb	r2, [r2, #7]
    cd38:	2a01      	cmp	r2, #1
    cd3a:	d006      	beq.n	cd4a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ce>
    cd3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cd40:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    cd44:	fbb1 f1f2 	udiv	r1, r1, r2
    cd48:	1a40      	subs	r0, r0, r1
    cd4a:	4770      	bx	lr
    cd4c:	20001398 	.word	0x20001398
    cd50:	b570      	push	{r4, r5, r6, lr}
    cd52:	4c13      	ldr	r4, [pc, #76]	; (cda0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x424>)
    cd54:	4603      	mov	r3, r0
    cd56:	460d      	mov	r5, r1
    cd58:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    cd5c:	2000      	movs	r0, #0
    cd5e:	b15a      	cbz	r2, cd78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fc>
    cd60:	4621      	mov	r1, r4
    cd62:	f891 1020 	ldrb.w	r1, [r1, #32]
    cd66:	b163      	cbz	r3, cd82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    cd68:	2b01      	cmp	r3, #1
    cd6a:	d111      	bne.n	cd90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>
    cd6c:	2a01      	cmp	r2, #1
    cd6e:	4628      	mov	r0, r5
    cd70:	d012      	beq.n	cd98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    cd72:	f004 fe16 	bl	119a2 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    cd76:	e009      	b.n	cd8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    cd78:	f640 0147 	movw	r1, #2119	; 0x847
    cd7c:	203e      	movs	r0, #62	; 0x3e
    cd7e:	f7f8 fc27 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd82:	2a01      	cmp	r2, #1
    cd84:	4628      	mov	r0, r5
    cd86:	d004      	beq.n	cd92 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x416>
    cd88:	f004 fe19 	bl	119be <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    cd8c:	69e1      	ldr	r1, [r4, #28]
    cd8e:	4408      	add	r0, r1
    cd90:	bd70      	pop	{r4, r5, r6, pc}
    cd92:	f000 f8d1 	bl	cf38 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    cd96:	e7f9      	b.n	cd8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    cd98:	f000 f8c0 	bl	cf1c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    cd9c:	e7f6      	b.n	cd8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    cd9e:	0000      	.short	0x0000
    cda0:	20001398 	.word	0x20001398
    cda4:	b510      	push	{r4, lr}
    cda6:	f7ff fc03 	bl	c5b0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    cdaa:	f7ff fded 	bl	c988 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    cdae:	f7ff fe23 	bl	c9f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    cdb2:	f7ff ff53 	bl	cc5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    cdb6:	f000 fe49 	bl	da4c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    cdba:	2800      	cmp	r0, #0
    cdbc:	d108      	bne.n	cdd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    cdbe:	f000 fe35 	bl	da2c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    cdc2:	2800      	cmp	r0, #0
    cdc4:	d104      	bne.n	cdd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    cdc6:	4803      	ldr	r0, [pc, #12]	; (cdd4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x458>)
    cdc8:	6801      	ldr	r1, [r0, #0]
    cdca:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    cdce:	6001      	str	r1, [r0, #0]
    cdd0:	bd10      	pop	{r4, pc}
    cdd2:	0000      	.short	0x0000
    cdd4:	40001568 	.word	0x40001568
    cdd8:	b510      	push	{r4, lr}
    cdda:	4604      	mov	r4, r0
    cddc:	f7ff fbe8 	bl	c5b0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    cde0:	f7ff fdd2 	bl	c988 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    cde4:	4620      	mov	r0, r4
    cde6:	f7ff fded 	bl	c9c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    cdea:	f000 fe2f 	bl	da4c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    cdee:	2800      	cmp	r0, #0
    cdf0:	d00d      	beq.n	ce0e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x492>
    cdf2:	4a09      	ldr	r2, [pc, #36]	; (ce18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49c>)
    cdf4:	6811      	ldr	r1, [r2, #0]
    cdf6:	0650      	lsls	r0, r2, #25
    cdf8:	2c02      	cmp	r4, #2
    cdfa:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    cdfe:	d007      	beq.n	ce10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    ce00:	f3c0 2006 	ubfx	r0, r0, #8, #7
    ce04:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    ce08:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    ce0c:	6010      	str	r0, [r2, #0]
    ce0e:	bd10      	pop	{r4, pc}
    ce10:	f3c0 6006 	ubfx	r0, r0, #24, #7
    ce14:	e7f6      	b.n	ce04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    ce16:	0000      	.short	0x0000
    ce18:	40001588 	.word	0x40001588
    ce1c:	a62c0000 	.word	0xa62c0000
    ce20:	0604a1e0 	.word	0x0604a1e0
    ce24:	0e0c0a08 	.word	0x0e0c0a08
    ce28:	16141210 	.word	0x16141210
    ce2c:	201e1c18 	.word	0x201e1c18
    ce30:	28262422 	.word	0x28262422
    ce34:	302e2c2a 	.word	0x302e2c2a
    ce38:	38363432 	.word	0x38363432
    ce3c:	403e3c3a 	.word	0x403e3c3a
    ce40:	48464442 	.word	0x48464442
    ce44:	024e4c4a 	.word	0x024e4c4a
    ce48:	0000501a 	.word	0x0000501a
    ce4c:	00000001 	.word	0x00000001
    ce50:	40001110 	.word	0x40001110
	...
    ce68:	00001e14 	.word	0x00001e14
    ce6c:	00001130 	.word	0x00001130
    ce70:	00000000 	.word	0x00000000
    ce74:	00000028 	.word	0x00000028
    ce78:	00000018 	.word	0x00000018
    ce7c:	00000000 	.word	0x00000000
    ce80:	00001e14 	.word	0x00001e14
    ce84:	00001130 	.word	0x00001130
    ce88:	00000000 	.word	0x00000000
    ce8c:	00001770 	.word	0x00001770
    ce90:	00000fa0 	.word	0x00000fa0

0000ce94 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    ce94:	b570      	push	{r4, r5, r6, lr}
    ce96:	4605      	mov	r5, r0
    ce98:	4614      	mov	r4, r2
    ce9a:	4608      	mov	r0, r1
    ce9c:	f7ff fbae 	bl	c5fc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    cea0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    cea4:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    cea8:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    ceac:	4807      	ldr	r0, [pc, #28]	; (cecc <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    ceae:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    ceb2:	4408      	add	r0, r1
    ceb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ceb8:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    cebc:	fbb0 f5f1 	udiv	r5, r0, r1
    cec0:	4620      	mov	r0, r4
    cec2:	f7ff fb6f 	bl	c5a4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    cec6:	4428      	add	r0, r5
    cec8:	1d40      	adds	r0, r0, #5
    ceca:	bd70      	pop	{r4, r5, r6, pc}
    cecc:	0000cf5c 	.word	0x0000cf5c

0000ced0 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    ced0:	b570      	push	{r4, r5, r6, lr}
    ced2:	4d0e      	ldr	r5, [pc, #56]	; (cf0c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    ced4:	461c      	mov	r4, r3
    ced6:	3d08      	subs	r5, #8
    ced8:	4b0c      	ldr	r3, [pc, #48]	; (cf0c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    ceda:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    cede:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    cee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    cee6:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    ceea:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    ceee:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    cef2:	4418      	add	r0, r3
    cef4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    cef8:	fbb0 f5f1 	udiv	r5, r0, r1
    cefc:	4610      	mov	r0, r2
    cefe:	f7ff fb51 	bl	c5a4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    cf02:	4428      	add	r0, r5
    cf04:	4420      	add	r0, r4
    cf06:	1d40      	adds	r0, r0, #5
    cf08:	bd70      	pop	{r4, r5, r6, pc}
    cf0a:	0000      	.short	0x0000
    cf0c:	0000cf5c 	.word	0x0000cf5c

0000cf10 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    cf10:	4901      	ldr	r1, [pc, #4]	; (cf18 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    cf12:	b2c0      	uxtb	r0, r0
    cf14:	6008      	str	r0, [r1, #0]
    cf16:	4770      	bx	lr
    cf18:	4000150c 	.word	0x4000150c

0000cf1c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    cf1c:	4a05      	ldr	r2, [pc, #20]	; (cf34 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    cf1e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    cf22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cf26:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    cf2a:	fbb1 f1f2 	udiv	r1, r1, r2
    cf2e:	4408      	add	r0, r1
    cf30:	1e80      	subs	r0, r0, #2
    cf32:	4770      	bx	lr
    cf34:	0000cf54 	.word	0x0000cf54

0000cf38 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    cf38:	4a05      	ldr	r2, [pc, #20]	; (cf50 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    cf3a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    cf3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cf42:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    cf46:	fbb1 f1f2 	udiv	r1, r1, r2
    cf4a:	4408      	add	r0, r1
    cf4c:	4770      	bx	lr
    cf4e:	0000      	.short	0x0000
    cf50:	0000cf54 	.word	0x0000cf54
    cf54:	05dc0000 	.word	0x05dc0000
    cf58:	000003e8 	.word	0x000003e8
    cf5c:	00000000 	.word	0x00000000
    cf60:	00001e14 	.word	0x00001e14
    cf64:	00001130 	.word	0x00001130

0000cf68 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    cf68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cf6c:	461e      	mov	r6, r3
    cf6e:	4617      	mov	r7, r2
    cf70:	460c      	mov	r4, r1
    cf72:	4605      	mov	r5, r0
    cf74:	f7f4 fc6e 	bl	1854 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    cf78:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d020 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    cf7c:	4680      	mov	r8, r0
    cf7e:	f899 0000 	ldrb.w	r0, [r9]
    cf82:	42a8      	cmp	r0, r5
    cf84:	d110      	bne.n	cfa8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    cf86:	f899 1001 	ldrb.w	r1, [r9, #1]
    cf8a:	4648      	mov	r0, r9
    cf8c:	42a1      	cmp	r1, r4
    cf8e:	d10b      	bne.n	cfa8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    cf90:	f990 1002 	ldrsb.w	r1, [r0, #2]
    cf94:	42b9      	cmp	r1, r7
    cf96:	d107      	bne.n	cfa8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    cf98:	78c2      	ldrb	r2, [r0, #3]
    cf9a:	4542      	cmp	r2, r8
    cf9c:	d104      	bne.n	cfa8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    cf9e:	8881      	ldrh	r1, [r0, #4]
    cfa0:	8031      	strh	r1, [r6, #0]
    cfa2:	7980      	ldrb	r0, [r0, #6]
    cfa4:	70b0      	strb	r0, [r6, #2]
    cfa6:	e036      	b.n	d016 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xae>
    cfa8:	463a      	mov	r2, r7
    cfaa:	4621      	mov	r1, r4
    cfac:	2d01      	cmp	r5, #1
    cfae:	d009      	beq.n	cfc4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    cfb0:	2d02      	cmp	r5, #2
    cfb2:	d009      	beq.n	cfc8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    cfb4:	2d04      	cmp	r5, #4
    cfb6:	d009      	beq.n	cfcc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    cfb8:	2d08      	cmp	r5, #8
    cfba:	d009      	beq.n	cfd0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    cfbc:	f240 4133 	movw	r1, #1075	; 0x433
    cfc0:	2006      	movs	r0, #6
    cfc2:	e00c      	b.n	cfde <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    cfc4:	2000      	movs	r0, #0
    cfc6:	e004      	b.n	cfd2 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    cfc8:	2001      	movs	r0, #1
    cfca:	e002      	b.n	cfd2 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    cfcc:	2003      	movs	r0, #3
    cfce:	e000      	b.n	cfd2 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    cfd0:	2002      	movs	r0, #2
    cfd2:	466b      	mov	r3, sp
    cfd4:	f7f4 fc84 	bl	18e0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    cfd8:	b118      	cbz	r0, cfe2 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    cfda:	213d      	movs	r1, #61	; 0x3d
    cfdc:	2075      	movs	r0, #117	; 0x75
    cfde:	f7f8 faf7 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cfe2:	4620      	mov	r0, r4
    cfe4:	f7ff f886 	bl	c0f4 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    cfe8:	4602      	mov	r2, r0
    cfea:	4631      	mov	r1, r6
    cfec:	f99d 0000 	ldrsb.w	r0, [sp]
    cff0:	f7f8 f9ce 	bl	5390 <mpsl_fem_tx_power_split>
    cff4:	4601      	mov	r1, r0
    cff6:	f889 1007 	strb.w	r1, [r9, #7]
    cffa:	8831      	ldrh	r1, [r6, #0]
    cffc:	f8a9 1004 	strh.w	r1, [r9, #4]
    d000:	78b1      	ldrb	r1, [r6, #2]
    d002:	f889 1006 	strb.w	r1, [r9, #6]
    d006:	f889 5000 	strb.w	r5, [r9]
    d00a:	f889 4001 	strb.w	r4, [r9, #1]
    d00e:	f889 7002 	strb.w	r7, [r9, #2]
    d012:	f889 8003 	strb.w	r8, [r9, #3]
    d016:	f999 0007 	ldrsb.w	r0, [r9, #7]
    d01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d01e:	0000      	.short	0x0000
    d020:	20000345 	.word	0x20000345

0000d024 <__udivmoddi4>:
    d024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d028:	4607      	mov	r7, r0
    d02a:	468c      	mov	ip, r1
    d02c:	4608      	mov	r0, r1
    d02e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    d030:	4615      	mov	r5, r2
    d032:	463c      	mov	r4, r7
    d034:	4619      	mov	r1, r3
    d036:	2b00      	cmp	r3, #0
    d038:	f040 80c6 	bne.w	d1c8 <__udivmoddi4+0x1a4>
    d03c:	4282      	cmp	r2, r0
    d03e:	fab2 f782 	clz	r7, r2
    d042:	d946      	bls.n	d0d2 <__udivmoddi4+0xae>
    d044:	b14f      	cbz	r7, d05a <__udivmoddi4+0x36>
    d046:	f1c7 0e20 	rsb	lr, r7, #32
    d04a:	fa24 fe0e 	lsr.w	lr, r4, lr
    d04e:	fa00 f307 	lsl.w	r3, r0, r7
    d052:	40bd      	lsls	r5, r7
    d054:	ea4e 0c03 	orr.w	ip, lr, r3
    d058:	40bc      	lsls	r4, r7
    d05a:	ea4f 4815 	mov.w	r8, r5, lsr #16
    d05e:	fa1f fe85 	uxth.w	lr, r5
    d062:	fbbc f9f8 	udiv	r9, ip, r8
    d066:	0c22      	lsrs	r2, r4, #16
    d068:	fb08 c319 	mls	r3, r8, r9, ip
    d06c:	fb09 fa0e 	mul.w	sl, r9, lr
    d070:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    d074:	459a      	cmp	sl, r3
    d076:	d928      	bls.n	d0ca <__udivmoddi4+0xa6>
    d078:	18eb      	adds	r3, r5, r3
    d07a:	f109 30ff 	add.w	r0, r9, #4294967295
    d07e:	d204      	bcs.n	d08a <__udivmoddi4+0x66>
    d080:	459a      	cmp	sl, r3
    d082:	d902      	bls.n	d08a <__udivmoddi4+0x66>
    d084:	f1a9 0002 	sub.w	r0, r9, #2
    d088:	442b      	add	r3, r5
    d08a:	eba3 030a 	sub.w	r3, r3, sl
    d08e:	b2a4      	uxth	r4, r4
    d090:	fbb3 f2f8 	udiv	r2, r3, r8
    d094:	fb08 3312 	mls	r3, r8, r2, r3
    d098:	fb02 fe0e 	mul.w	lr, r2, lr
    d09c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    d0a0:	45a6      	cmp	lr, r4
    d0a2:	d914      	bls.n	d0ce <__udivmoddi4+0xaa>
    d0a4:	192c      	adds	r4, r5, r4
    d0a6:	f102 33ff 	add.w	r3, r2, #4294967295
    d0aa:	d203      	bcs.n	d0b4 <__udivmoddi4+0x90>
    d0ac:	45a6      	cmp	lr, r4
    d0ae:	d901      	bls.n	d0b4 <__udivmoddi4+0x90>
    d0b0:	1e93      	subs	r3, r2, #2
    d0b2:	442c      	add	r4, r5
    d0b4:	eba4 040e 	sub.w	r4, r4, lr
    d0b8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    d0bc:	b11e      	cbz	r6, d0c6 <__udivmoddi4+0xa2>
    d0be:	40fc      	lsrs	r4, r7
    d0c0:	2300      	movs	r3, #0
    d0c2:	6034      	str	r4, [r6, #0]
    d0c4:	6073      	str	r3, [r6, #4]
    d0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d0ca:	4648      	mov	r0, r9
    d0cc:	e7dd      	b.n	d08a <__udivmoddi4+0x66>
    d0ce:	4613      	mov	r3, r2
    d0d0:	e7f0      	b.n	d0b4 <__udivmoddi4+0x90>
    d0d2:	b902      	cbnz	r2, d0d6 <__udivmoddi4+0xb2>
    d0d4:	deff      	udf	#255	; 0xff
    d0d6:	bb87      	cbnz	r7, d13a <__udivmoddi4+0x116>
    d0d8:	1a83      	subs	r3, r0, r2
    d0da:	2101      	movs	r1, #1
    d0dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    d0e0:	b2aa      	uxth	r2, r5
    d0e2:	fbb3 fcfe 	udiv	ip, r3, lr
    d0e6:	0c20      	lsrs	r0, r4, #16
    d0e8:	fb0e 331c 	mls	r3, lr, ip, r3
    d0ec:	fb0c f802 	mul.w	r8, ip, r2
    d0f0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    d0f4:	4598      	cmp	r8, r3
    d0f6:	d963      	bls.n	d1c0 <__udivmoddi4+0x19c>
    d0f8:	18eb      	adds	r3, r5, r3
    d0fa:	f10c 30ff 	add.w	r0, ip, #4294967295
    d0fe:	d204      	bcs.n	d10a <__udivmoddi4+0xe6>
    d100:	4598      	cmp	r8, r3
    d102:	d902      	bls.n	d10a <__udivmoddi4+0xe6>
    d104:	f1ac 0002 	sub.w	r0, ip, #2
    d108:	442b      	add	r3, r5
    d10a:	eba3 0308 	sub.w	r3, r3, r8
    d10e:	b2a4      	uxth	r4, r4
    d110:	fbb3 fcfe 	udiv	ip, r3, lr
    d114:	fb0e 331c 	mls	r3, lr, ip, r3
    d118:	fb0c f202 	mul.w	r2, ip, r2
    d11c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    d120:	42a2      	cmp	r2, r4
    d122:	d94f      	bls.n	d1c4 <__udivmoddi4+0x1a0>
    d124:	192c      	adds	r4, r5, r4
    d126:	f10c 33ff 	add.w	r3, ip, #4294967295
    d12a:	d204      	bcs.n	d136 <__udivmoddi4+0x112>
    d12c:	42a2      	cmp	r2, r4
    d12e:	d902      	bls.n	d136 <__udivmoddi4+0x112>
    d130:	f1ac 0302 	sub.w	r3, ip, #2
    d134:	442c      	add	r4, r5
    d136:	1aa4      	subs	r4, r4, r2
    d138:	e7be      	b.n	d0b8 <__udivmoddi4+0x94>
    d13a:	f1c7 0c20 	rsb	ip, r7, #32
    d13e:	fa20 f80c 	lsr.w	r8, r0, ip
    d142:	fa00 f307 	lsl.w	r3, r0, r7
    d146:	fa24 fc0c 	lsr.w	ip, r4, ip
    d14a:	40bd      	lsls	r5, r7
    d14c:	ea4c 0203 	orr.w	r2, ip, r3
    d150:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    d154:	b2ab      	uxth	r3, r5
    d156:	fbb8 fcfe 	udiv	ip, r8, lr
    d15a:	0c11      	lsrs	r1, r2, #16
    d15c:	fb0e 801c 	mls	r0, lr, ip, r8
    d160:	fb0c f903 	mul.w	r9, ip, r3
    d164:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    d168:	4581      	cmp	r9, r0
    d16a:	fa04 f407 	lsl.w	r4, r4, r7
    d16e:	d923      	bls.n	d1b8 <__udivmoddi4+0x194>
    d170:	1828      	adds	r0, r5, r0
    d172:	f10c 31ff 	add.w	r1, ip, #4294967295
    d176:	d204      	bcs.n	d182 <__udivmoddi4+0x15e>
    d178:	4581      	cmp	r9, r0
    d17a:	d902      	bls.n	d182 <__udivmoddi4+0x15e>
    d17c:	f1ac 0102 	sub.w	r1, ip, #2
    d180:	4428      	add	r0, r5
    d182:	eba0 0009 	sub.w	r0, r0, r9
    d186:	b292      	uxth	r2, r2
    d188:	fbb0 fcfe 	udiv	ip, r0, lr
    d18c:	fb0e 001c 	mls	r0, lr, ip, r0
    d190:	fb0c f803 	mul.w	r8, ip, r3
    d194:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    d198:	4598      	cmp	r8, r3
    d19a:	d90f      	bls.n	d1bc <__udivmoddi4+0x198>
    d19c:	18eb      	adds	r3, r5, r3
    d19e:	f10c 32ff 	add.w	r2, ip, #4294967295
    d1a2:	d204      	bcs.n	d1ae <__udivmoddi4+0x18a>
    d1a4:	4598      	cmp	r8, r3
    d1a6:	d902      	bls.n	d1ae <__udivmoddi4+0x18a>
    d1a8:	f1ac 0202 	sub.w	r2, ip, #2
    d1ac:	442b      	add	r3, r5
    d1ae:	eba3 0308 	sub.w	r3, r3, r8
    d1b2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    d1b6:	e791      	b.n	d0dc <__udivmoddi4+0xb8>
    d1b8:	4661      	mov	r1, ip
    d1ba:	e7e2      	b.n	d182 <__udivmoddi4+0x15e>
    d1bc:	4662      	mov	r2, ip
    d1be:	e7f6      	b.n	d1ae <__udivmoddi4+0x18a>
    d1c0:	4660      	mov	r0, ip
    d1c2:	e7a2      	b.n	d10a <__udivmoddi4+0xe6>
    d1c4:	4663      	mov	r3, ip
    d1c6:	e7b6      	b.n	d136 <__udivmoddi4+0x112>
    d1c8:	4283      	cmp	r3, r0
    d1ca:	d905      	bls.n	d1d8 <__udivmoddi4+0x1b4>
    d1cc:	b10e      	cbz	r6, d1d2 <__udivmoddi4+0x1ae>
    d1ce:	e9c6 7000 	strd	r7, r0, [r6]
    d1d2:	2100      	movs	r1, #0
    d1d4:	4608      	mov	r0, r1
    d1d6:	e776      	b.n	d0c6 <__udivmoddi4+0xa2>
    d1d8:	fab3 f183 	clz	r1, r3
    d1dc:	b981      	cbnz	r1, d200 <__udivmoddi4+0x1dc>
    d1de:	4283      	cmp	r3, r0
    d1e0:	d301      	bcc.n	d1e6 <__udivmoddi4+0x1c2>
    d1e2:	42ba      	cmp	r2, r7
    d1e4:	d80a      	bhi.n	d1fc <__udivmoddi4+0x1d8>
    d1e6:	1abc      	subs	r4, r7, r2
    d1e8:	eb60 0303 	sbc.w	r3, r0, r3
    d1ec:	2001      	movs	r0, #1
    d1ee:	469c      	mov	ip, r3
    d1f0:	2e00      	cmp	r6, #0
    d1f2:	d068      	beq.n	d2c6 <__udivmoddi4+0x2a2>
    d1f4:	e9c6 4c00 	strd	r4, ip, [r6]
    d1f8:	2100      	movs	r1, #0
    d1fa:	e764      	b.n	d0c6 <__udivmoddi4+0xa2>
    d1fc:	4608      	mov	r0, r1
    d1fe:	e7f7      	b.n	d1f0 <__udivmoddi4+0x1cc>
    d200:	f1c1 0c20 	rsb	ip, r1, #32
    d204:	408b      	lsls	r3, r1
    d206:	fa22 f40c 	lsr.w	r4, r2, ip
    d20a:	431c      	orrs	r4, r3
    d20c:	fa02 f501 	lsl.w	r5, r2, r1
    d210:	fa00 f301 	lsl.w	r3, r0, r1
    d214:	fa27 f20c 	lsr.w	r2, r7, ip
    d218:	fa20 fb0c 	lsr.w	fp, r0, ip
    d21c:	ea4f 4914 	mov.w	r9, r4, lsr #16
    d220:	4313      	orrs	r3, r2
    d222:	fbbb f8f9 	udiv	r8, fp, r9
    d226:	fa1f fe84 	uxth.w	lr, r4
    d22a:	fb09 bb18 	mls	fp, r9, r8, fp
    d22e:	0c1a      	lsrs	r2, r3, #16
    d230:	fb08 fa0e 	mul.w	sl, r8, lr
    d234:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    d238:	4592      	cmp	sl, r2
    d23a:	fa07 f701 	lsl.w	r7, r7, r1
    d23e:	d93e      	bls.n	d2be <__udivmoddi4+0x29a>
    d240:	18a2      	adds	r2, r4, r2
    d242:	f108 30ff 	add.w	r0, r8, #4294967295
    d246:	d204      	bcs.n	d252 <__udivmoddi4+0x22e>
    d248:	4592      	cmp	sl, r2
    d24a:	d902      	bls.n	d252 <__udivmoddi4+0x22e>
    d24c:	f1a8 0002 	sub.w	r0, r8, #2
    d250:	4422      	add	r2, r4
    d252:	eba2 020a 	sub.w	r2, r2, sl
    d256:	b29b      	uxth	r3, r3
    d258:	fbb2 f8f9 	udiv	r8, r2, r9
    d25c:	fb09 2218 	mls	r2, r9, r8, r2
    d260:	fb08 fe0e 	mul.w	lr, r8, lr
    d264:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    d268:	4596      	cmp	lr, r2
    d26a:	d92a      	bls.n	d2c2 <__udivmoddi4+0x29e>
    d26c:	18a2      	adds	r2, r4, r2
    d26e:	f108 33ff 	add.w	r3, r8, #4294967295
    d272:	d204      	bcs.n	d27e <__udivmoddi4+0x25a>
    d274:	4596      	cmp	lr, r2
    d276:	d902      	bls.n	d27e <__udivmoddi4+0x25a>
    d278:	f1a8 0302 	sub.w	r3, r8, #2
    d27c:	4422      	add	r2, r4
    d27e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    d282:	fba0 9305 	umull	r9, r3, r0, r5
    d286:	eba2 020e 	sub.w	r2, r2, lr
    d28a:	429a      	cmp	r2, r3
    d28c:	46ce      	mov	lr, r9
    d28e:	4698      	mov	r8, r3
    d290:	d302      	bcc.n	d298 <__udivmoddi4+0x274>
    d292:	d106      	bne.n	d2a2 <__udivmoddi4+0x27e>
    d294:	454f      	cmp	r7, r9
    d296:	d204      	bcs.n	d2a2 <__udivmoddi4+0x27e>
    d298:	ebb9 0e05 	subs.w	lr, r9, r5
    d29c:	eb63 0804 	sbc.w	r8, r3, r4
    d2a0:	3801      	subs	r0, #1
    d2a2:	b186      	cbz	r6, d2c6 <__udivmoddi4+0x2a2>
    d2a4:	ebb7 030e 	subs.w	r3, r7, lr
    d2a8:	eb62 0708 	sbc.w	r7, r2, r8
    d2ac:	fa07 fc0c 	lsl.w	ip, r7, ip
    d2b0:	40cb      	lsrs	r3, r1
    d2b2:	ea4c 0303 	orr.w	r3, ip, r3
    d2b6:	40cf      	lsrs	r7, r1
    d2b8:	e9c6 3700 	strd	r3, r7, [r6]
    d2bc:	e79c      	b.n	d1f8 <__udivmoddi4+0x1d4>
    d2be:	4640      	mov	r0, r8
    d2c0:	e7c7      	b.n	d252 <__udivmoddi4+0x22e>
    d2c2:	4643      	mov	r3, r8
    d2c4:	e7db      	b.n	d27e <__udivmoddi4+0x25a>
    d2c6:	4631      	mov	r1, r6
    d2c8:	e6fd      	b.n	d0c6 <__udivmoddi4+0xa2>

0000d2ca <strcmp>:
    d2ca:	f810 2b01 	ldrb.w	r2, [r0], #1
    d2ce:	f811 3b01 	ldrb.w	r3, [r1], #1
    d2d2:	2a01      	cmp	r2, #1
    d2d4:	bf28      	it	cs
    d2d6:	429a      	cmpcs	r2, r3
    d2d8:	d0f7      	beq.n	d2ca <strcmp>
    d2da:	1ad0      	subs	r0, r2, r3
    d2dc:	4770      	bx	lr

0000d2de <strlen>:
    d2de:	4603      	mov	r3, r0
    d2e0:	f813 2b01 	ldrb.w	r2, [r3], #1
    d2e4:	2a00      	cmp	r2, #0
    d2e6:	d1fb      	bne.n	d2e0 <strlen+0x2>
    d2e8:	1a18      	subs	r0, r3, r0
    d2ea:	3801      	subs	r0, #1
    d2ec:	4770      	bx	lr
    d2ee:	2804      	cmp	r0, #4
    d2f0:	d202      	bcs.n	d2f8 <strlen+0x1a>
    d2f2:	f04f 0028 	mov.w	r0, #40	; 0x28
    d2f6:	4770      	bx	lr
    d2f8:	d102      	bne.n	d300 <strlen+0x22>
    d2fa:	f04f 0010 	mov.w	r0, #16
    d2fe:	4770      	bx	lr
    d300:	f04f 0000 	mov.w	r0, #0
    d304:	4770      	bx	lr
    d306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d30a:	000d      	movs	r5, r1
    d30c:	4604      	mov	r4, r0
    d30e:	f04f 0602 	mov.w	r6, #2
    d312:	f04f 0701 	mov.w	r7, #1
    d316:	d008      	beq.n	d32a <strlen+0x4c>
    d318:	7828      	ldrb	r0, [r5, #0]
    d31a:	b1d0      	cbz	r0, d352 <strlen+0x74>
    d31c:	2801      	cmp	r0, #1
    d31e:	d007      	beq.n	d330 <strlen+0x52>
    d320:	2802      	cmp	r0, #2
    d322:	d014      	beq.n	d34e <strlen+0x70>
    d324:	2803      	cmp	r0, #3
    d326:	d13e      	bne.n	d3a6 <strlen+0xc8>
    d328:	e016      	b.n	d358 <strlen+0x7a>
    d32a:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
    d32e:	e00e      	b.n	d34e <strlen+0x70>
    d330:	6868      	ldr	r0, [r5, #4]
    d332:	28c8      	cmp	r0, #200	; 0xc8
    d334:	d303      	bcc.n	d33e <strlen+0x60>
    d336:	2103      	movs	r1, #3
    d338:	f7f5 fbc4 	bl	2ac4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d33c:	b108      	cbz	r0, d342 <strlen+0x64>
    d33e:	2600      	movs	r6, #0
    d340:	e007      	b.n	d352 <strlen+0x74>
    d342:	4620      	mov	r0, r4
    d344:	6869      	ldr	r1, [r5, #4]
    d346:	f000 f943 	bl	d5d0 <strlen+0x2f2>
    d34a:	2601      	movs	r6, #1
    d34c:	e001      	b.n	d352 <strlen+0x74>
    d34e:	f7f4 fb15 	bl	197c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x9c>
    d352:	4630      	mov	r0, r6
    d354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d358:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    d35c:	2800      	cmp	r0, #0
    d35e:	d1f6      	bne.n	d34e <strlen+0x70>
    d360:	6868      	ldr	r0, [r5, #4]
    d362:	f7f4 fadd 	bl	1920 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x40>
    d366:	b1f0      	cbz	r0, d3a6 <strlen+0xc8>
    d368:	6869      	ldr	r1, [r5, #4]
    d36a:	7808      	ldrb	r0, [r1, #0]
    d36c:	b130      	cbz	r0, d37c <strlen+0x9e>
    d36e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d372:	2805      	cmp	r0, #5
    d374:	d008      	beq.n	d388 <strlen+0xaa>
    d376:	f44f 71be 	mov.w	r1, #380	; 0x17c
    d37a:	e011      	b.n	d3a0 <strlen+0xc2>
    d37c:	4620      	mov	r0, r4
    d37e:	f000 f92f 	bl	d5e0 <strlen+0x302>
    d382:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    d386:	e7e2      	b.n	d34e <strlen+0x70>
    d388:	4620      	mov	r0, r4
    d38a:	f000 f942 	bl	d612 <strlen+0x334>
    d38e:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    d392:	4621      	mov	r1, r4
    d394:	f000 f80a 	bl	d3ac <strlen+0xce>
    d398:	2800      	cmp	r0, #0
    d39a:	d1d8      	bne.n	d34e <strlen+0x70>
    d39c:	f44f 71bf 	mov.w	r1, #382	; 0x17e
    d3a0:	206a      	movs	r0, #106	; 0x6a
    d3a2:	f7f7 fe45 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d3a6:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    d3aa:	e7d0      	b.n	d34e <strlen+0x70>
    d3ac:	f7f5 bd6c 	b.w	2e88 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    d3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3b4:	460d      	mov	r5, r1
    d3b6:	0004      	movs	r4, r0
    d3b8:	d00c      	beq.n	d3d4 <strlen+0xf6>
    d3ba:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    d3be:	2700      	movs	r7, #0
    d3c0:	2002      	movs	r0, #2
    d3c2:	2d09      	cmp	r5, #9
    d3c4:	d270      	bcs.n	d4a8 <strlen+0x1ca>
    d3c6:	e8df f005 	tbb	[pc, r5]
    d3ca:	1108      	.short	0x1108
    d3cc:	70653535 	.word	0x70653535
    d3d0:	0093a588 	.word	0x0093a588
    d3d4:	f44f 71cb 	mov.w	r1, #406	; 0x196
    d3d8:	e0f7      	b.n	d5ca <strlen+0x2ec>
    d3da:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d3de:	2804      	cmp	r0, #4
    d3e0:	d07a      	beq.n	d4d8 <strlen+0x1fa>
    d3e2:	2803      	cmp	r0, #3
    d3e4:	d0fc      	beq.n	d3e0 <strlen+0x102>
    d3e6:	f240 11a1 	movw	r1, #417	; 0x1a1
    d3ea:	e0ee      	b.n	d5ca <strlen+0x2ec>
    d3ec:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d3f0:	2804      	cmp	r0, #4
    d3f2:	d004      	beq.n	d3fe <strlen+0x120>
    d3f4:	2803      	cmp	r0, #3
    d3f6:	d002      	beq.n	d3fe <strlen+0x120>
    d3f8:	f240 11a5 	movw	r1, #421	; 0x1a5
    d3fc:	e0e5      	b.n	d5ca <strlen+0x2ec>
    d3fe:	2005      	movs	r0, #5
    d400:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d404:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    d408:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    d40c:	bbb0      	cbnz	r0, d47c <strlen+0x19e>
    d40e:	2100      	movs	r1, #0
    d410:	4620      	mov	r0, r4
    d412:	f000 f8dd 	bl	d5d0 <strlen+0x2f2>
    d416:	7820      	ldrb	r0, [r4, #0]
    d418:	2801      	cmp	r0, #1
    d41a:	d006      	beq.n	d42a <strlen+0x14c>
    d41c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    d420:	e9c4 0106 	strd	r0, r1, [r4, #24]
    d424:	2100      	movs	r1, #0
    d426:	6a22      	ldr	r2, [r4, #32]
    d428:	e048      	b.n	d4bc <strlen+0x1de>
    d42a:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    d42e:	f7f5 fc37 	bl	2ca0 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    d432:	e7f5      	b.n	d420 <strlen+0x142>
    d434:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    d438:	2904      	cmp	r1, #4
    d43a:	d004      	beq.n	d446 <strlen+0x168>
    d43c:	2903      	cmp	r1, #3
    d43e:	d002      	beq.n	d446 <strlen+0x168>
    d440:	f240 11c3 	movw	r1, #451	; 0x1c3
    d444:	e0c1      	b.n	d5ca <strlen+0x2ec>
    d446:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    d44a:	b122      	cbz	r2, d456 <strlen+0x178>
    d44c:	4621      	mov	r1, r4
    d44e:	4630      	mov	r0, r6
    d450:	f000 f8fe 	bl	d650 <strlen+0x372>
    d454:	e0b1      	b.n	d5ba <strlen+0x2dc>
    d456:	2904      	cmp	r1, #4
    d458:	d000      	beq.n	d45c <strlen+0x17e>
    d45a:	2001      	movs	r0, #1
    d45c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d460:	6a22      	ldr	r2, [r4, #32]
    d462:	2d02      	cmp	r5, #2
    d464:	d00b      	beq.n	d47e <strlen+0x1a0>
    d466:	2106      	movs	r1, #6
    d468:	4630      	mov	r0, r6
    d46a:	4790      	blx	r2
    d46c:	2800      	cmp	r0, #0
    d46e:	d06d      	beq.n	d54c <strlen+0x26e>
    d470:	7800      	ldrb	r0, [r0, #0]
    d472:	2800      	cmp	r0, #0
    d474:	d06a      	beq.n	d54c <strlen+0x26e>
    d476:	f240 11dd 	movw	r1, #477	; 0x1dd
    d47a:	e0a6      	b.n	d5ca <strlen+0x2ec>
    d47c:	e034      	b.n	d4e8 <strlen+0x20a>
    d47e:	2105      	movs	r1, #5
    d480:	4630      	mov	r0, r6
    d482:	4790      	blx	r2
    d484:	2800      	cmp	r0, #0
    d486:	d07c      	beq.n	d582 <strlen+0x2a4>
    d488:	7800      	ldrb	r0, [r0, #0]
    d48a:	2800      	cmp	r0, #0
    d48c:	d079      	beq.n	d582 <strlen+0x2a4>
    d48e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    d492:	e09a      	b.n	d5ca <strlen+0x2ec>
    d494:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d498:	2805      	cmp	r0, #5
    d49a:	d002      	beq.n	d4a2 <strlen+0x1c4>
    d49c:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    d4a0:	e093      	b.n	d5ca <strlen+0x2ec>
    d4a2:	2102      	movs	r1, #2
    d4a4:	6a22      	ldr	r2, [r4, #32]
    d4a6:	e009      	b.n	d4bc <strlen+0x1de>
    d4a8:	e07e      	b.n	d5a8 <strlen+0x2ca>
    d4aa:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d4ae:	2805      	cmp	r0, #5
    d4b0:	d002      	beq.n	d4b8 <strlen+0x1da>
    d4b2:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    d4b6:	e088      	b.n	d5ca <strlen+0x2ec>
    d4b8:	6a22      	ldr	r2, [r4, #32]
    d4ba:	2101      	movs	r1, #1
    d4bc:	4630      	mov	r0, r6
    d4be:	4790      	blx	r2
    d4c0:	4601      	mov	r1, r0
    d4c2:	4620      	mov	r0, r4
    d4c4:	f7ff ff1f 	bl	d306 <strlen+0x28>
    d4c8:	2802      	cmp	r0, #2
    d4ca:	d076      	beq.n	d5ba <strlen+0x2dc>
    d4cc:	b3e8      	cbz	r0, d54a <strlen+0x26c>
    d4ce:	2801      	cmp	r0, #1
    d4d0:	d06d      	beq.n	d5ae <strlen+0x2d0>
    d4d2:	f240 212a 	movw	r1, #554	; 0x22a
    d4d6:	e078      	b.n	d5ca <strlen+0x2ec>
    d4d8:	e071      	b.n	d5be <strlen+0x2e0>
    d4da:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d4de:	2805      	cmp	r0, #5
    d4e0:	d002      	beq.n	d4e8 <strlen+0x20a>
    d4e2:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    d4e6:	e070      	b.n	d5ca <strlen+0x2ec>
    d4e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d4ec:	f7f4 ba46 	b.w	197c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x9c>
    d4f0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d4f4:	2805      	cmp	r0, #5
    d4f6:	d002      	beq.n	d4fe <strlen+0x220>
    d4f8:	f240 11f5 	movw	r1, #501	; 0x1f5
    d4fc:	e065      	b.n	d5ca <strlen+0x2ec>
    d4fe:	6a22      	ldr	r2, [r4, #32]
    d500:	210a      	movs	r1, #10
    d502:	4630      	mov	r0, r6
    d504:	4790      	blx	r2
    d506:	4601      	mov	r1, r0
    d508:	4620      	mov	r0, r4
    d50a:	f7ff fefc 	bl	d306 <strlen+0x28>
    d50e:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    d512:	e05a      	b.n	d5ca <strlen+0x2ec>
    d514:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    d518:	2905      	cmp	r1, #5
    d51a:	d007      	beq.n	d52c <strlen+0x24e>
    d51c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    d520:	b10a      	cbz	r2, d526 <strlen+0x248>
    d522:	2903      	cmp	r1, #3
    d524:	d002      	beq.n	d52c <strlen+0x24e>
    d526:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    d52a:	e04e      	b.n	d5ca <strlen+0x2ec>
    d52c:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    d530:	b129      	cbz	r1, d53e <strlen+0x260>
    d532:	4621      	mov	r1, r4
    d534:	4630      	mov	r0, r6
    d536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d53a:	f000 b889 	b.w	d650 <strlen+0x372>
    d53e:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
    d542:	b199      	cbz	r1, d56c <strlen+0x28e>
    d544:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    d548:	e001      	b.n	d54e <strlen+0x270>
    d54a:	e033      	b.n	d5b4 <strlen+0x2d6>
    d54c:	e035      	b.n	d5ba <strlen+0x2dc>
    d54e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d552:	6a22      	ldr	r2, [r4, #32]
    d554:	2108      	movs	r1, #8
    d556:	4630      	mov	r0, r6
    d558:	4790      	blx	r2
    d55a:	2800      	cmp	r0, #0
    d55c:	d011      	beq.n	d582 <strlen+0x2a4>
    d55e:	7800      	ldrb	r0, [r0, #0]
    d560:	2800      	cmp	r0, #0
    d562:	d00e      	beq.n	d582 <strlen+0x2a4>
    d564:	f44f 7102 	mov.w	r1, #520	; 0x208
    d568:	e02f      	b.n	d5ca <strlen+0x2ec>
    d56a:	e00a      	b.n	d582 <strlen+0x2a4>
    d56c:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    d570:	b161      	cbz	r1, d58c <strlen+0x2ae>
    d572:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    d576:	4621      	mov	r1, r4
    d578:	f7ff ff18 	bl	d3ac <strlen+0xce>
    d57c:	b118      	cbz	r0, d586 <strlen+0x2a8>
    d57e:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    d582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d586:	f44f 7103 	mov.w	r1, #524	; 0x20c
    d58a:	e01e      	b.n	d5ca <strlen+0x2ec>
    d58c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d590:	6a22      	ldr	r2, [r4, #32]
    d592:	2107      	movs	r1, #7
    d594:	4630      	mov	r0, r6
    d596:	4790      	blx	r2
    d598:	2800      	cmp	r0, #0
    d59a:	d0f2      	beq.n	d582 <strlen+0x2a4>
    d59c:	7800      	ldrb	r0, [r0, #0]
    d59e:	2800      	cmp	r0, #0
    d5a0:	d0ef      	beq.n	d582 <strlen+0x2a4>
    d5a2:	f44f 7105 	mov.w	r1, #532	; 0x214
    d5a6:	e010      	b.n	d5ca <strlen+0x2ec>
    d5a8:	f240 2119 	movw	r1, #537	; 0x219
    d5ac:	e00d      	b.n	d5ca <strlen+0x2ec>
    d5ae:	2104      	movs	r1, #4
    d5b0:	6a22      	ldr	r2, [r4, #32]
    d5b2:	e783      	b.n	d4bc <strlen+0x1de>
    d5b4:	2103      	movs	r1, #3
    d5b6:	6a22      	ldr	r2, [r4, #32]
    d5b8:	e780      	b.n	d4bc <strlen+0x1de>
    d5ba:	2d00      	cmp	r5, #0
    d5bc:	d1e1      	bne.n	d582 <strlen+0x2a4>
    d5be:	f000 f8fd 	bl	d7bc <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    d5c2:	2800      	cmp	r0, #0
    d5c4:	d0dd      	beq.n	d582 <strlen+0x2a4>
    d5c6:	f240 2133 	movw	r1, #563	; 0x233
    d5ca:	206a      	movs	r0, #106	; 0x6a
    d5cc:	f7f7 fd30 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d5d0:	4602      	mov	r2, r0
    d5d2:	7803      	ldrb	r3, [r0, #0]
    d5d4:	6840      	ldr	r0, [r0, #4]
    d5d6:	4408      	add	r0, r1
    d5d8:	6050      	str	r0, [r2, #4]
    d5da:	3859      	subs	r0, #89	; 0x59
    d5dc:	f7f6 bb66 	b.w	3cac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    d5e0:	2201      	movs	r2, #1
    d5e2:	7002      	strb	r2, [r0, #0]
    d5e4:	2200      	movs	r2, #0
    d5e6:	72c2      	strb	r2, [r0, #11]
    d5e8:	790a      	ldrb	r2, [r1, #4]
    d5ea:	b172      	cbz	r2, d60a <strlen+0x32c>
    d5ec:	2200      	movs	r2, #0
    d5ee:	8102      	strh	r2, [r0, #8]
    d5f0:	794a      	ldrb	r2, [r1, #5]
    d5f2:	b162      	cbz	r2, d60e <strlen+0x330>
    d5f4:	2203      	movs	r2, #3
    d5f6:	7282      	strb	r2, [r0, #10]
    d5f8:	688a      	ldr	r2, [r1, #8]
    d5fa:	326a      	adds	r2, #106	; 0x6a
    d5fc:	6042      	str	r2, [r0, #4]
    d5fe:	68c9      	ldr	r1, [r1, #12]
    d600:	6101      	str	r1, [r0, #16]
    d602:	2103      	movs	r1, #3
    d604:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    d608:	4770      	bx	lr
    d60a:	222b      	movs	r2, #43	; 0x2b
    d60c:	e7ef      	b.n	d5ee <strlen+0x310>
    d60e:	2202      	movs	r2, #2
    d610:	e7f1      	b.n	d5f6 <strlen+0x318>
    d612:	b510      	push	{r4, lr}
    d614:	2200      	movs	r2, #0
    d616:	7002      	strb	r2, [r0, #0]
    d618:	72c2      	strb	r2, [r0, #11]
    d61a:	790a      	ldrb	r2, [r1, #4]
    d61c:	b1a2      	cbz	r2, d648 <strlen+0x36a>
    d61e:	2200      	movs	r2, #0
    d620:	8102      	strh	r2, [r0, #8]
    d622:	794a      	ldrb	r2, [r1, #5]
    d624:	b192      	cbz	r2, d64c <strlen+0x36e>
    d626:	2203      	movs	r2, #3
    d628:	7282      	strb	r2, [r0, #10]
    d62a:	68ca      	ldr	r2, [r1, #12]
    d62c:	326a      	adds	r2, #106	; 0x6a
    d62e:	6042      	str	r2, [r0, #4]
    d630:	e9d0 4206 	ldrd	r4, r2, [r0, #24]
    d634:	6889      	ldr	r1, [r1, #8]
    d636:	17cb      	asrs	r3, r1, #31
    d638:	1861      	adds	r1, r4, r1
    d63a:	415a      	adcs	r2, r3
    d63c:	e9c0 1204 	strd	r1, r2, [r0, #16]
    d640:	2104      	movs	r1, #4
    d642:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    d646:	bd10      	pop	{r4, pc}
    d648:	222b      	movs	r2, #43	; 0x2b
    d64a:	e7e9      	b.n	d620 <strlen+0x342>
    d64c:	2202      	movs	r2, #2
    d64e:	e7eb      	b.n	d628 <strlen+0x34a>
    d650:	b570      	push	{r4, r5, r6, lr}
    d652:	4605      	mov	r5, r0
    d654:	460c      	mov	r4, r1
    d656:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
    d65a:	f7f6 f8f5 	bl	3848 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    d65e:	b178      	cbz	r0, d680 <strlen+0x3a2>
    d660:	4620      	mov	r0, r4
    d662:	f000 f810 	bl	d686 <strlen+0x3a8>
    d666:	6a22      	ldr	r2, [r4, #32]
    d668:	2109      	movs	r1, #9
    d66a:	4628      	mov	r0, r5
    d66c:	4790      	blx	r2
    d66e:	2800      	cmp	r0, #0
    d670:	d008      	beq.n	d684 <strlen+0x3a6>
    d672:	7800      	ldrb	r0, [r0, #0]
    d674:	2800      	cmp	r0, #0
    d676:	d005      	beq.n	d684 <strlen+0x3a6>
    d678:	21dc      	movs	r1, #220	; 0xdc
    d67a:	206a      	movs	r0, #106	; 0x6a
    d67c:	f7f7 fcd8 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d680:	21d8      	movs	r1, #216	; 0xd8
    d682:	e7fa      	b.n	d67a <strlen+0x39c>
    d684:	bd70      	pop	{r4, r5, r6, pc}
    d686:	2100      	movs	r1, #0
    d688:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    d68c:	f800 1f24 	strb.w	r1, [r0, #36]!
    d690:	7041      	strb	r1, [r0, #1]
    d692:	4770      	bx	lr

0000d694 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    d694:	b570      	push	{r4, r5, r6, lr}
    d696:	f7f4 f9cd 	bl	1a34 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    d69a:	4605      	mov	r5, r0
    d69c:	2400      	movs	r4, #0
    d69e:	e006      	b.n	d6ae <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    d6a0:	4620      	mov	r0, r4
    d6a2:	f7f4 f9cd 	bl	1a40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d6a6:	f7ff ffee 	bl	d686 <strlen+0x3a8>
    d6aa:	1c64      	adds	r4, r4, #1
    d6ac:	b2e4      	uxtb	r4, r4
    d6ae:	42ac      	cmp	r4, r5
    d6b0:	d3f6      	bcc.n	d6a0 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    d6b2:	bd70      	pop	{r4, r5, r6, pc}

0000d6b4 <mpsl_timeslot_request>:
    d6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d6b8:	460d      	mov	r5, r1
    d6ba:	f7f4 f9c1 	bl	1a40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d6be:	0004      	movs	r4, r0
    d6c0:	d008      	beq.n	d6d4 <mpsl_timeslot_request+0x20>
    d6c2:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d6c6:	f06f 0622 	mvn.w	r6, #34	; 0x22
    d6ca:	2801      	cmp	r0, #1
    d6cc:	d006      	beq.n	d6dc <mpsl_timeslot_request+0x28>
    d6ce:	2802      	cmp	r0, #2
    d6d0:	d111      	bne.n	d6f6 <mpsl_timeslot_request+0x42>
    d6d2:	e003      	b.n	d6dc <mpsl_timeslot_request+0x28>
    d6d4:	f06f 0001 	mvn.w	r0, #1
    d6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d6dc:	f06f 0715 	mvn.w	r7, #21
    d6e0:	b15d      	cbz	r5, d6fa <mpsl_timeslot_request+0x46>
    d6e2:	4628      	mov	r0, r5
    d6e4:	f7f4 f91c 	bl	1920 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x40>
    d6e8:	b138      	cbz	r0, d6fa <mpsl_timeslot_request+0x46>
    d6ea:	7828      	ldrb	r0, [r5, #0]
    d6ec:	b138      	cbz	r0, d6fe <mpsl_timeslot_request+0x4a>
    d6ee:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d6f2:	2802      	cmp	r0, #2
    d6f4:	d008      	beq.n	d708 <mpsl_timeslot_request+0x54>
    d6f6:	4630      	mov	r0, r6
    d6f8:	e7ee      	b.n	d6d8 <mpsl_timeslot_request+0x24>
    d6fa:	4638      	mov	r0, r7
    d6fc:	e7ec      	b.n	d6d8 <mpsl_timeslot_request+0x24>
    d6fe:	4629      	mov	r1, r5
    d700:	4620      	mov	r0, r4
    d702:	f7ff ff6d 	bl	d5e0 <strlen+0x302>
    d706:	e003      	b.n	d710 <mpsl_timeslot_request+0x5c>
    d708:	4629      	mov	r1, r5
    d70a:	4620      	mov	r0, r4
    d70c:	f7ff ff81 	bl	d612 <strlen+0x334>
    d710:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    d714:	4621      	mov	r1, r4
    d716:	f7ff fe49 	bl	d3ac <strlen+0xce>
    d71a:	b108      	cbz	r0, d720 <mpsl_timeslot_request+0x6c>
    d71c:	2000      	movs	r0, #0
    d71e:	e7db      	b.n	d6d8 <mpsl_timeslot_request+0x24>
    d720:	f240 21b1 	movw	r1, #689	; 0x2b1
    d724:	206a      	movs	r0, #106	; 0x6a
    d726:	f7f7 fc83 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000d72a <mpsl_timeslot_session_close>:
    d72a:	b510      	push	{r4, lr}
    d72c:	4604      	mov	r4, r0
    d72e:	f7f4 f987 	bl	1a40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d732:	0001      	movs	r1, r0
    d734:	d005      	beq.n	d742 <mpsl_timeslot_session_close+0x18>
    d736:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
    d73a:	f06f 0222 	mvn.w	r2, #34	; 0x22
    d73e:	b978      	cbnz	r0, d760 <mpsl_timeslot_session_close+0x36>
    d740:	e002      	b.n	d748 <mpsl_timeslot_session_close+0x1e>
    d742:	f06f 0001 	mvn.w	r0, #1
    d746:	bd10      	pop	{r4, pc}
    d748:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
    d74c:	b140      	cbz	r0, d760 <mpsl_timeslot_session_close+0x36>
    d74e:	2802      	cmp	r0, #2
    d750:	d008      	beq.n	d764 <mpsl_timeslot_session_close+0x3a>
    d752:	2801      	cmp	r0, #1
    d754:	d006      	beq.n	d764 <mpsl_timeslot_session_close+0x3a>
    d756:	2001      	movs	r0, #1
    d758:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    d75c:	2000      	movs	r0, #0
    d75e:	bd10      	pop	{r4, pc}
    d760:	4610      	mov	r0, r2
    d762:	bd10      	pop	{r4, pc}
    d764:	4620      	mov	r0, r4
    d766:	f7ff ff73 	bl	d650 <strlen+0x372>
    d76a:	e7f7      	b.n	d75c <mpsl_timeslot_session_close+0x32>

0000d76c <mpsl_timeslot_session_count_set>:
    d76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d770:	460e      	mov	r6, r1
    d772:	4607      	mov	r7, r0
    d774:	f7f4 f95e 	bl	1a34 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    d778:	4605      	mov	r5, r0
    d77a:	2400      	movs	r4, #0
    d77c:	e00b      	b.n	d796 <mpsl_timeslot_session_count_set+0x2a>
    d77e:	4620      	mov	r0, r4
    d780:	f7f4 f95e 	bl	1a40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d784:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    d788:	b118      	cbz	r0, d792 <mpsl_timeslot_session_count_set+0x26>
    d78a:	f04f 30ff 	mov.w	r0, #4294967295
    d78e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d792:	1c64      	adds	r4, r4, #1
    d794:	b2e4      	uxtb	r4, r4
    d796:	42ac      	cmp	r4, r5
    d798:	d3f1      	bcc.n	d77e <mpsl_timeslot_session_count_set+0x12>
    d79a:	2e08      	cmp	r6, #8
    d79c:	d902      	bls.n	d7a4 <mpsl_timeslot_session_count_set+0x38>
    d79e:	f06f 0015 	mvn.w	r0, #21
    d7a2:	e7f4      	b.n	d78e <mpsl_timeslot_session_count_set+0x22>
    d7a4:	b117      	cbz	r7, d7ac <mpsl_timeslot_session_count_set+0x40>
    d7a6:	4631      	mov	r1, r6
    d7a8:	4638      	mov	r0, r7
    d7aa:	e001      	b.n	d7b0 <mpsl_timeslot_session_count_set+0x44>
    d7ac:	2100      	movs	r1, #0
    d7ae:	4608      	mov	r0, r1
    d7b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d7b4:	f7f4 b92a 	b.w	1a0c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000d7b8 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    d7b8:	f7f6 bd1c 	b.w	41f4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

0000d7bc <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    d7bc:	b510      	push	{r4, lr}
    d7be:	2000      	movs	r0, #0
    d7c0:	f7f7 f83e 	bl	4840 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    d7c4:	6800      	ldr	r0, [r0, #0]
    d7c6:	2800      	cmp	r0, #0
    d7c8:	bf18      	it	ne
    d7ca:	2001      	movne	r0, #1
    d7cc:	bd10      	pop	{r4, pc}

0000d7ce <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    d7ce:	b510      	push	{r4, lr}
    d7d0:	f7f7 f8b6 	bl	4940 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    d7d4:	f7f6 fb88 	bl	3ee8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d7d8:	f000 f802 	bl	d7e0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    d7dc:	b280      	uxth	r0, r0
    d7de:	bd10      	pop	{r4, pc}

0000d7e0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    d7e0:	0a41      	lsrs	r1, r0, #9
    d7e2:	f643 5209 	movw	r2, #15625	; 0x3d09
    d7e6:	4351      	muls	r1, r2
    d7e8:	f3c0 0008 	ubfx	r0, r0, #0, #9
    d7ec:	fb10 f002 	smulbb	r0, r0, r2
    d7f0:	f500 7080 	add.w	r0, r0, #256	; 0x100
    d7f4:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    d7f8:	4770      	bx	lr
    d7fa:	2800      	cmp	r0, #0
    d7fc:	db09      	blt.n	d812 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    d7fe:	f000 021f 	and.w	r2, r0, #31
    d802:	2101      	movs	r1, #1
    d804:	4091      	lsls	r1, r2
    d806:	0940      	lsrs	r0, r0, #5
    d808:	0080      	lsls	r0, r0, #2
    d80a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d80e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d812:	4770      	bx	lr
    d814:	2800      	cmp	r0, #0
    d816:	db0d      	blt.n	d834 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    d818:	f000 021f 	and.w	r2, r0, #31
    d81c:	2101      	movs	r1, #1
    d81e:	4091      	lsls	r1, r2
    d820:	0940      	lsrs	r0, r0, #5
    d822:	0080      	lsls	r0, r0, #2
    d824:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d828:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d82c:	f3bf 8f4f 	dsb	sy
    d830:	f3bf 8f6f 	isb	sy
    d834:	4770      	bx	lr

0000d836 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    d836:	b570      	push	{r4, r5, r6, lr}
    d838:	4602      	mov	r2, r0
    d83a:	2000      	movs	r0, #0
    d83c:	2900      	cmp	r1, #0
    d83e:	d01d      	beq.n	d87c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    d840:	fba2 0101 	umull	r0, r1, r2, r1
    d844:	0a40      	lsrs	r0, r0, #9
    d846:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    d84a:	0a49      	lsrs	r1, r1, #9
    d84c:	1c40      	adds	r0, r0, #1
    d84e:	f141 0100 	adc.w	r1, r1, #0
    d852:	f240 72a1 	movw	r2, #1953	; 0x7a1
    d856:	1883      	adds	r3, r0, r2
    d858:	f141 0100 	adc.w	r1, r1, #0
    d85c:	1c5b      	adds	r3, r3, #1
    d85e:	f141 0400 	adc.w	r4, r1, #0
    d862:	2100      	movs	r1, #0
    d864:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    d868:	41a1      	sbcs	r1, r4
    d86a:	d203      	bcs.n	d874 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    d86c:	2172      	movs	r1, #114	; 0x72
    d86e:	206d      	movs	r0, #109	; 0x6d
    d870:	f7f7 fbde 	bl	5030 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d874:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    d878:	fbb0 f0f2 	udiv	r0, r0, r2
    d87c:	bd70      	pop	{r4, r5, r6, pc}
    d87e:	5840      	ldr	r0, [r0, r1]
    d880:	2800      	cmp	r0, #0
    d882:	d000      	beq.n	d886 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    d884:	2001      	movs	r0, #1
    d886:	4770      	bx	lr
    d888:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    d88c:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    d890:	f002 0201 	and.w	r2, r2, #1
    d894:	03c0      	lsls	r0, r0, #15
    d896:	d503      	bpl.n	d8a0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    d898:	428a      	cmp	r2, r1
    d89a:	d101      	bne.n	d8a0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    d89c:	2001      	movs	r0, #1
    d89e:	4770      	bx	lr
    d8a0:	2000      	movs	r0, #0
    d8a2:	4770      	bx	lr

0000d8a4 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    d8a4:	b510      	push	{r4, lr}
    d8a6:	2101      	movs	r1, #1
    d8a8:	0788      	lsls	r0, r1, #30
    d8aa:	f7f7 fb6b 	bl	4f84 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    d8ae:	2800      	cmp	r0, #0
    d8b0:	d000      	beq.n	d8b4 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    d8b2:	2001      	movs	r0, #1
    d8b4:	bd10      	pop	{r4, pc}

0000d8b6 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    d8b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d8ba:	2101      	movs	r1, #1
    d8bc:	6001      	str	r1, [r0, #0]
    d8be:	4770      	bx	lr

0000d8c0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    d8c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d8c4:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    d8c8:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    d8cc:	f002 0203 	and.w	r2, r2, #3
    d8d0:	03c9      	lsls	r1, r1, #15
    d8d2:	d503      	bpl.n	d8dc <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    d8d4:	4282      	cmp	r2, r0
    d8d6:	d101      	bne.n	d8dc <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    d8d8:	2001      	movs	r0, #1
    d8da:	4770      	bx	lr
    d8dc:	2000      	movs	r0, #0
    d8de:	4770      	bx	lr

0000d8e0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    d8e0:	b510      	push	{r4, lr}
    d8e2:	2100      	movs	r1, #0
    d8e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d8e8:	f7f7 fb4c 	bl	4f84 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    d8ec:	2800      	cmp	r0, #0
    d8ee:	d000      	beq.n	d8f2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    d8f0:	2001      	movs	r0, #1
    d8f2:	bd10      	pop	{r4, pc}
    d8f4:	2800      	cmp	r0, #0
    d8f6:	db09      	blt.n	d90c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    d8f8:	f000 021f 	and.w	r2, r0, #31
    d8fc:	2101      	movs	r1, #1
    d8fe:	4091      	lsls	r1, r2
    d900:	0940      	lsrs	r0, r0, #5
    d902:	0080      	lsls	r0, r0, #2
    d904:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d908:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d90c:	4770      	bx	lr
    d90e:	2800      	cmp	r0, #0
    d910:	db0d      	blt.n	d92e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    d912:	f000 021f 	and.w	r2, r0, #31
    d916:	2101      	movs	r1, #1
    d918:	4091      	lsls	r1, r2
    d91a:	0940      	lsrs	r0, r0, #5
    d91c:	0080      	lsls	r0, r0, #2
    d91e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d922:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d926:	f3bf 8f4f 	dsb	sy
    d92a:	f3bf 8f6f 	isb	sy
    d92e:	4770      	bx	lr
    d930:	00021000 	.word	0x00021000
    d934:	000000fa 	.word	0x000000fa
    d938:	63a70f14 	.word	0x63a70f14
    d93c:	c477f9cf 	.word	0xc477f9cf
    d940:	e931f9ef 	.word	0xe931f9ef
    d944:	03bcf561 	.word	0x03bcf561
    d948:	2b06749a 	.word	0x2b06749a
    d94c:	2800      	cmp	r0, #0
    d94e:	db09      	blt.n	d964 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    d950:	f000 021f 	and.w	r2, r0, #31
    d954:	2101      	movs	r1, #1
    d956:	4091      	lsls	r1, r2
    d958:	0940      	lsrs	r0, r0, #5
    d95a:	0080      	lsls	r0, r0, #2
    d95c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d960:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d964:	4770      	bx	lr

0000d966 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    d966:	f3ef 8110 	mrs	r1, PRIMASK
    d96a:	b672      	cpsid	i
    d96c:	7802      	ldrb	r2, [r0, #0]
    d96e:	2a01      	cmp	r2, #1
    d970:	d001      	beq.n	d976 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    d972:	2201      	movs	r2, #1
    d974:	e000      	b.n	d978 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    d976:	2200      	movs	r2, #0
    d978:	2301      	movs	r3, #1
    d97a:	7003      	strb	r3, [r0, #0]
    d97c:	b901      	cbnz	r1, d980 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    d97e:	b662      	cpsie	i
    d980:	b10a      	cbz	r2, d986 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    d982:	2000      	movs	r0, #0
    d984:	4770      	bx	lr
    d986:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d98a:	4770      	bx	lr

0000d98c <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    d98c:	2100      	movs	r1, #0
    d98e:	7001      	strb	r1, [r0, #0]
    d990:	4608      	mov	r0, r1
    d992:	4770      	bx	lr

0000d994 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    d994:	f3ef 8110 	mrs	r1, PRIMASK
    d998:	b672      	cpsid	i
    d99a:	2200      	movs	r2, #0
    d99c:	7002      	strb	r2, [r0, #0]
    d99e:	b901      	cbnz	r1, d9a2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    d9a0:	b662      	cpsie	i
    d9a2:	2000      	movs	r0, #0
    d9a4:	4770      	bx	lr

0000d9a6 <mpsl_low_priority_process>:
    d9a6:	f7f7 bc33 	b.w	5210 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000d9aa <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    d9aa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d9ae:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d9b2:	280f      	cmp	r0, #15
    d9b4:	d001      	beq.n	d9ba <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    d9b6:	2000      	movs	r0, #0
    d9b8:	4770      	bx	lr
    d9ba:	2001      	movs	r0, #1
    d9bc:	4770      	bx	lr

0000d9be <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    d9be:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d9c2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d9c6:	280a      	cmp	r0, #10
    d9c8:	d001      	beq.n	d9ce <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    d9ca:	2000      	movs	r0, #0
    d9cc:	4770      	bx	lr
    d9ce:	2001      	movs	r0, #1
    d9d0:	4770      	bx	lr

0000d9d2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    d9d2:	b500      	push	{lr}
    d9d4:	f7ff fff3 	bl	d9be <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    d9d8:	b120      	cbz	r0, d9e4 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    d9da:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d9de:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d9e2:	b108      	cbz	r0, d9e8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    d9e4:	2000      	movs	r0, #0
    d9e6:	bd00      	pop	{pc}
    d9e8:	2001      	movs	r0, #1
    d9ea:	bd00      	pop	{pc}

0000d9ec <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    d9ec:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d9f0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d9f4:	280e      	cmp	r0, #14
    d9f6:	d001      	beq.n	d9fc <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    d9f8:	2000      	movs	r0, #0
    d9fa:	4770      	bx	lr
    d9fc:	2001      	movs	r0, #1
    d9fe:	4770      	bx	lr

0000da00 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    da00:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    da04:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    da08:	2810      	cmp	r0, #16
    da0a:	d001      	beq.n	da10 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    da0c:	2000      	movs	r0, #0
    da0e:	4770      	bx	lr
    da10:	2001      	movs	r0, #1
    da12:	4770      	bx	lr

0000da14 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    da14:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    da18:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    da1c:	2806      	cmp	r0, #6
    da1e:	d003      	beq.n	da28 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    da20:	1c40      	adds	r0, r0, #1
    da22:	d001      	beq.n	da28 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    da24:	2000      	movs	r0, #0
    da26:	4770      	bx	lr
    da28:	2001      	movs	r0, #1
    da2a:	4770      	bx	lr

0000da2c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    da2c:	b500      	push	{lr}
    da2e:	f7ff fff1 	bl	da14 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    da32:	b148      	cbz	r0, da48 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    da34:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    da38:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    da3c:	2806      	cmp	r0, #6
    da3e:	d303      	bcc.n	da48 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    da40:	1c40      	adds	r0, r0, #1
    da42:	d001      	beq.n	da48 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    da44:	2001      	movs	r0, #1
    da46:	bd00      	pop	{pc}
    da48:	2000      	movs	r0, #0
    da4a:	bd00      	pop	{pc}

0000da4c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    da4c:	b500      	push	{lr}
    da4e:	f7ff ffe1 	bl	da14 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    da52:	b138      	cbz	r0, da64 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    da54:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    da58:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    da5c:	2806      	cmp	r0, #6
    da5e:	d303      	bcc.n	da68 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    da60:	1c40      	adds	r0, r0, #1
    da62:	d001      	beq.n	da68 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    da64:	2000      	movs	r0, #0
    da66:	bd00      	pop	{pc}
    da68:	2001      	movs	r0, #1
    da6a:	bd00      	pop	{pc}

0000da6c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    da6c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    da70:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    da74:	280d      	cmp	r0, #13
    da76:	d001      	beq.n	da7c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    da78:	2000      	movs	r0, #0
    da7a:	4770      	bx	lr
    da7c:	2001      	movs	r0, #1
    da7e:	4770      	bx	lr

0000da80 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    da80:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    da84:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    da88:	2808      	cmp	r0, #8
    da8a:	d001      	beq.n	da90 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    da8c:	2000      	movs	r0, #0
    da8e:	4770      	bx	lr
    da90:	2001      	movs	r0, #1
    da92:	4770      	bx	lr

0000da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    da94:	b4f0      	push	{r4, r5, r6, r7}
    da96:	ea80 0c01 	eor.w	ip, r0, r1
    da9a:	4603      	mov	r3, r0
    da9c:	f01c 0f03 	tst.w	ip, #3
    daa0:	d13c      	bne.n	db1c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    daa2:	f013 0f03 	tst.w	r3, #3
    daa6:	d00b      	beq.n	dac0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    daa8:	2a00      	cmp	r2, #0
    daaa:	bf04      	itt	eq
    daac:	bcf0      	popeq	{r4, r5, r6, r7}
    daae:	4770      	bxeq	lr
    dab0:	f811 cb01 	ldrb.w	ip, [r1], #1
    dab4:	f803 cb01 	strb.w	ip, [r3], #1
    dab8:	1e52      	subs	r2, r2, #1
    daba:	f013 0f03 	tst.w	r3, #3
    dabe:	d1f3      	bne.n	daa8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    dac0:	2a03      	cmp	r2, #3
    dac2:	d94f      	bls.n	db64 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    dac4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    dac8:	d24c      	bcs.n	db64 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    daca:	f1c2 0c00 	rsb	ip, r2, #0
    dace:	ea4f 74ec 	mov.w	r4, ip, asr #31
    dad2:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    dad6:	ea4f 0cac 	mov.w	ip, ip, asr #2
    dada:	f1cc 0c00 	rsb	ip, ip, #0
    dade:	f1bc 0f00 	cmp.w	ip, #0
    dae2:	dd1b      	ble.n	db1c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    dae4:	1f0d      	subs	r5, r1, #4
    dae6:	1f1c      	subs	r4, r3, #4
    dae8:	f01c 0f01 	tst.w	ip, #1
    daec:	d003      	beq.n	daf6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    daee:	f855 6f04 	ldr.w	r6, [r5, #4]!
    daf2:	f844 6f04 	str.w	r6, [r4, #4]!
    daf6:	ea5f 066c 	movs.w	r6, ip, asr #1
    dafa:	d007      	beq.n	db0c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    dafc:	686f      	ldr	r7, [r5, #4]
    dafe:	6067      	str	r7, [r4, #4]
    db00:	f855 7f08 	ldr.w	r7, [r5, #8]!
    db04:	f844 7f08 	str.w	r7, [r4, #8]!
    db08:	1e76      	subs	r6, r6, #1
    db0a:	d1f7      	bne.n	dafc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    db0c:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    db10:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    db14:	f1cc 0c00 	rsb	ip, ip, #0
    db18:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    db1c:	2a00      	cmp	r2, #0
    db1e:	bf04      	itt	eq
    db20:	bcf0      	popeq	{r4, r5, r6, r7}
    db22:	4770      	bxeq	lr
    db24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    db28:	d226      	bcs.n	db78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    db2a:	2a00      	cmp	r2, #0
    db2c:	bfdc      	itt	le
    db2e:	bcf0      	pople	{r4, r5, r6, r7}
    db30:	4770      	bxle	lr
    db32:	1e49      	subs	r1, r1, #1
    db34:	1e5b      	subs	r3, r3, #1
    db36:	f012 0f01 	tst.w	r2, #1
    db3a:	d003      	beq.n	db44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    db3c:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    db40:	f803 cf01 	strb.w	ip, [r3, #1]!
    db44:	1052      	asrs	r2, r2, #1
    db46:	bf04      	itt	eq
    db48:	bcf0      	popeq	{r4, r5, r6, r7}
    db4a:	4770      	bxeq	lr
    db4c:	f891 c001 	ldrb.w	ip, [r1, #1]
    db50:	f883 c001 	strb.w	ip, [r3, #1]
    db54:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    db58:	f803 cf02 	strb.w	ip, [r3, #2]!
    db5c:	1e52      	subs	r2, r2, #1
    db5e:	d1f5      	bne.n	db4c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    db60:	bcf0      	pop	{r4, r5, r6, r7}
    db62:	4770      	bx	lr
    db64:	2a04      	cmp	r2, #4
    db66:	d3d9      	bcc.n	db1c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    db68:	f851 cb04 	ldr.w	ip, [r1], #4
    db6c:	1f12      	subs	r2, r2, #4
    db6e:	f843 cb04 	str.w	ip, [r3], #4
    db72:	2a04      	cmp	r2, #4
    db74:	d2f8      	bcs.n	db68 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    db76:	e7d1      	b.n	db1c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    db78:	f811 cb01 	ldrb.w	ip, [r1], #1
    db7c:	f803 cb01 	strb.w	ip, [r3], #1
    db80:	1e52      	subs	r2, r2, #1
    db82:	d1f9      	bne.n	db78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    db84:	bcf0      	pop	{r4, r5, r6, r7}
    db86:	4770      	bx	lr

0000db88 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    db88:	b470      	push	{r4, r5, r6}
    db8a:	4603      	mov	r3, r0
    db8c:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    db90:	f010 0f03 	tst.w	r0, #3
    db94:	d009      	beq.n	dbaa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    db96:	2a00      	cmp	r2, #0
    db98:	bf04      	itt	eq
    db9a:	bc70      	popeq	{r4, r5, r6}
    db9c:	4770      	bxeq	lr
    db9e:	f803 cb01 	strb.w	ip, [r3], #1
    dba2:	1e52      	subs	r2, r2, #1
    dba4:	f013 0f03 	tst.w	r3, #3
    dba8:	d1f5      	bne.n	db96 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    dbaa:	b2c9      	uxtb	r1, r1
    dbac:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    dbb0:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    dbb4:	2a03      	cmp	r2, #3
    dbb6:	d939      	bls.n	dc2c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    dbb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    dbbc:	d236      	bcs.n	dc2c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    dbbe:	4251      	negs	r1, r2
    dbc0:	17cc      	asrs	r4, r1, #31
    dbc2:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    dbc6:	1089      	asrs	r1, r1, #2
    dbc8:	424e      	negs	r6, r1
    dbca:	2e00      	cmp	r6, #0
    dbcc:	dd11      	ble.n	dbf2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    dbce:	1f19      	subs	r1, r3, #4
    dbd0:	f016 0f01 	tst.w	r6, #1
    dbd4:	bf18      	it	ne
    dbd6:	f841 5f04 	strne.w	r5, [r1, #4]!
    dbda:	1074      	asrs	r4, r6, #1
    dbdc:	d004      	beq.n	dbe8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    dbde:	604d      	str	r5, [r1, #4]
    dbe0:	f841 5f08 	str.w	r5, [r1, #8]!
    dbe4:	1e64      	subs	r4, r4, #1
    dbe6:	d1fa      	bne.n	dbde <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    dbe8:	4271      	negs	r1, r6
    dbea:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    dbee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    dbf2:	2a00      	cmp	r2, #0
    dbf4:	bf04      	itt	eq
    dbf6:	bc70      	popeq	{r4, r5, r6}
    dbf8:	4770      	bxeq	lr
    dbfa:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    dbfe:	d21d      	bcs.n	dc3c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    dc00:	2a00      	cmp	r2, #0
    dc02:	bfdc      	itt	le
    dc04:	bc70      	pople	{r4, r5, r6}
    dc06:	4770      	bxle	lr
    dc08:	1e59      	subs	r1, r3, #1
    dc0a:	f012 0f01 	tst.w	r2, #1
    dc0e:	bf18      	it	ne
    dc10:	f801 cf01 	strbne.w	ip, [r1, #1]!
    dc14:	1052      	asrs	r2, r2, #1
    dc16:	bf04      	itt	eq
    dc18:	bc70      	popeq	{r4, r5, r6}
    dc1a:	4770      	bxeq	lr
    dc1c:	f881 c001 	strb.w	ip, [r1, #1]
    dc20:	f801 cf02 	strb.w	ip, [r1, #2]!
    dc24:	1e52      	subs	r2, r2, #1
    dc26:	d1f9      	bne.n	dc1c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    dc28:	bc70      	pop	{r4, r5, r6}
    dc2a:	4770      	bx	lr
    dc2c:	2a04      	cmp	r2, #4
    dc2e:	d3e0      	bcc.n	dbf2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    dc30:	1f12      	subs	r2, r2, #4
    dc32:	f843 5b04 	str.w	r5, [r3], #4
    dc36:	2a04      	cmp	r2, #4
    dc38:	d2fa      	bcs.n	dc30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    dc3a:	e7da      	b.n	dbf2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    dc3c:	f803 cb01 	strb.w	ip, [r3], #1
    dc40:	1e52      	subs	r2, r2, #1
    dc42:	d1fb      	bne.n	dc3c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    dc44:	bc70      	pop	{r4, r5, r6}
    dc46:	4770      	bx	lr
    dc48:	f04f 30ff 	mov.w	r0, #4294967295
    dc4c:	4770      	bx	lr
    dc4e:	2000      	movs	r0, #0
    dc50:	4770      	bx	lr
    dc52:	2000      	movs	r0, #0
    dc54:	4770      	bx	lr
    dc56:	f04f 30ff 	mov.w	r0, #4294967295
    dc5a:	4770      	bx	lr
    dc5c:	4770      	bx	lr
    dc5e:	4770      	bx	lr
    dc60:	2000      	movs	r0, #0
    dc62:	4770      	bx	lr
    dc64:	2100      	movs	r1, #0
    dc66:	7001      	strb	r1, [r0, #0]
    dc68:	4770      	bx	lr
    dc6a:	f04f 30ff 	mov.w	r0, #4294967295
    dc6e:	4770      	bx	lr
    dc70:	f04f 30ff 	mov.w	r0, #4294967295
    dc74:	4770      	bx	lr
    dc76:	2100      	movs	r1, #0
    dc78:	7001      	strb	r1, [r0, #0]
    dc7a:	4770      	bx	lr
    dc7c:	f04f 30ff 	mov.w	r0, #4294967295
    dc80:	4770      	bx	lr
    dc82:	f04f 30ff 	mov.w	r0, #4294967295
    dc86:	4770      	bx	lr
    dc88:	7800      	ldrb	r0, [r0, #0]
    dc8a:	2800      	cmp	r0, #0
    dc8c:	d001      	beq.n	dc92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    dc8e:	f06f 0015 	mvn.w	r0, #21
    dc92:	4770      	bx	lr
    dc94:	2000      	movs	r0, #0
    dc96:	4770      	bx	lr
    dc98:	2200      	movs	r2, #0
    dc9a:	f000 b800 	b.w	dc9e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000dc9e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    dc9e:	b570      	push	{r4, r5, r6, lr}
    dca0:	4614      	mov	r4, r2
    dca2:	460d      	mov	r5, r1
    dca4:	1b00      	subs	r0, r0, r4
    dca6:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    dcaa:	4288      	cmp	r0, r1
    dcac:	da01      	bge.n	dcb2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    dcae:	4608      	mov	r0, r1
    dcb0:	e002      	b.n	dcb8 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    dcb2:	287f      	cmp	r0, #127	; 0x7f
    dcb4:	dd00      	ble.n	dcb8 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    dcb6:	207f      	movs	r0, #127	; 0x7f
    dcb8:	b240      	sxtb	r0, r0
    dcba:	f7f3 fdff 	bl	18bc <mpsl_tx_power_radio_supported_power_adjust>
    dcbe:	7028      	strb	r0, [r5, #0]
    dcc0:	706c      	strb	r4, [r5, #1]
    dcc2:	2100      	movs	r1, #0
    dcc4:	4420      	add	r0, r4
    dcc6:	70a9      	strb	r1, [r5, #2]
    dcc8:	b240      	sxtb	r0, r0
    dcca:	bd70      	pop	{r4, r5, r6, pc}
    dccc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcd0:	460c      	mov	r4, r1
    dcd2:	4681      	mov	r9, r0
    dcd4:	7849      	ldrb	r1, [r1, #1]
    dcd6:	f100 0003 	add.w	r0, r0, #3
    dcda:	f88d 1000 	strb.w	r1, [sp]
    dcde:	f020 0003 	bic.w	r0, r0, #3
    dce2:	78a1      	ldrb	r1, [r4, #2]
    dce4:	0016      	movs	r6, r2
    dce6:	4605      	mov	r5, r0
    dce8:	f88d 1001 	strb.w	r1, [sp, #1]
    dcec:	d000      	beq.n	dcf0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x52>
    dcee:	2000      	movs	r0, #0
    dcf0:	4669      	mov	r1, sp
    dcf2:	f7f7 fe71 	bl	59d8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    dcf6:	4428      	add	r0, r5
    dcf8:	78a1      	ldrb	r1, [r4, #2]
    dcfa:	4605      	mov	r5, r0
    dcfc:	b131      	cbz	r1, dd0c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x6e>
    dcfe:	8a63      	ldrh	r3, [r4, #18]
    dd00:	78e2      	ldrb	r2, [r4, #3]
    dd02:	b106      	cbz	r6, dd06 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x68>
    dd04:	2000      	movs	r0, #0
    dd06:	f7f8 f8f9 	bl	5efc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    dd0a:	4405      	add	r5, r0
    dd0c:	7820      	ldrb	r0, [r4, #0]
    dd0e:	7861      	ldrb	r1, [r4, #1]
    dd10:	46b2      	mov	sl, r6
    dd12:	2600      	movs	r6, #0
    dd14:	4408      	add	r0, r1
    dd16:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    dd1a:	4637      	mov	r7, r6
    dd1c:	e008      	b.n	dd30 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x92>
    dd1e:	7a23      	ldrb	r3, [r4, #8]
    dd20:	79e2      	ldrb	r2, [r4, #7]
    dd22:	79a1      	ldrb	r1, [r4, #6]
    dd24:	7960      	ldrb	r0, [r4, #5]
    dd26:	f000 ff0d 	bl	eb44 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    dd2a:	1c7f      	adds	r7, r7, #1
    dd2c:	4406      	add	r6, r0
    dd2e:	b2ff      	uxtb	r7, r7
    dd30:	4547      	cmp	r7, r8
    dd32:	d3f4      	bcc.n	dd1e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x80>
    dd34:	1ced      	adds	r5, r5, #3
    dd36:	f025 0003 	bic.w	r0, r5, #3
    dd3a:	4604      	mov	r4, r0
    dd3c:	f1ba 0f00 	cmp.w	sl, #0
    dd40:	d000      	beq.n	dd44 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xa6>
    dd42:	2000      	movs	r0, #0
    dd44:	4632      	mov	r2, r6
    dd46:	4641      	mov	r1, r8
    dd48:	f7f8 f822 	bl	5d90 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    dd4c:	4420      	add	r0, r4
    dd4e:	1dc0      	adds	r0, r0, #7
    dd50:	f020 0007 	bic.w	r0, r0, #7
    dd54:	eba0 0009 	sub.w	r0, r0, r9
    dd58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000dd5c <sdc_soc_ecb_block_encrypt>:
    dd5c:	b530      	push	{r4, r5, lr}
    dd5e:	460d      	mov	r5, r1
    dd60:	b08d      	sub	sp, #52	; 0x34
    dd62:	4614      	mov	r4, r2
    dd64:	4601      	mov	r1, r0
    dd66:	2210      	movs	r2, #16
    dd68:	4668      	mov	r0, sp
    dd6a:	f7ff fe93 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dd6e:	2210      	movs	r2, #16
    dd70:	4629      	mov	r1, r5
    dd72:	a804      	add	r0, sp, #16
    dd74:	f7ff fe8e 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dd78:	4668      	mov	r0, sp
    dd7a:	f001 f864 	bl	ee46 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    dd7e:	b118      	cbz	r0, dd88 <sdc_soc_ecb_block_encrypt+0x2c>
    dd80:	f06f 0015 	mvn.w	r0, #21
    dd84:	b00d      	add	sp, #52	; 0x34
    dd86:	bd30      	pop	{r4, r5, pc}
    dd88:	2210      	movs	r2, #16
    dd8a:	4620      	mov	r0, r4
    dd8c:	a908      	add	r1, sp, #32
    dd8e:	f7ff fe81 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dd92:	2000      	movs	r0, #0
    dd94:	e7f6      	b.n	dd84 <sdc_soc_ecb_block_encrypt+0x28>

0000dd96 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    dd96:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    dd98:	4604      	mov	r4, r0
    dd9a:	1d01      	adds	r1, r0, #4
    dd9c:	4668      	mov	r0, sp
    dd9e:	f7f9 fc97 	bl	76d0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    dda2:	2800      	cmp	r0, #0
    dda4:	d004      	beq.n	ddb0 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    dda6:	4669      	mov	r1, sp
    dda8:	4620      	mov	r0, r4
    ddaa:	f000 f848 	bl	de3e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    ddae:	2001      	movs	r0, #1
    ddb0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ddb2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    ddb2:	b50e      	push	{r1, r2, r3, lr}
    ddb4:	4601      	mov	r1, r0
    ddb6:	4668      	mov	r0, sp
    ddb8:	f000 f827 	bl	de0a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    ddbc:	4668      	mov	r0, sp
    ddbe:	f001 fd03 	bl	f7c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    ddc2:	bd0e      	pop	{r1, r2, r3, pc}

0000ddc4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    ddc4:	b510      	push	{r4, lr}
    ddc6:	4604      	mov	r4, r0
    ddc8:	4620      	mov	r0, r4
    ddca:	f7f7 fcf9 	bl	57c0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    ddce:	2800      	cmp	r0, #0
    ddd0:	d006      	beq.n	dde0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    ddd2:	78a1      	ldrb	r1, [r4, #2]
    ddd4:	7820      	ldrb	r0, [r4, #0]
    ddd6:	f000 f804 	bl	dde2 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    ddda:	2800      	cmp	r0, #0
    dddc:	d0f4      	beq.n	ddc8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    ddde:	2001      	movs	r0, #1
    dde0:	bd10      	pop	{r4, pc}
    dde2:	b570      	push	{r4, r5, r6, lr}
    dde4:	460c      	mov	r4, r1
    dde6:	4605      	mov	r5, r0
    dde8:	f7f7 fd5c 	bl	58a4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    ddec:	2800      	cmp	r0, #0
    ddee:	d002      	beq.n	ddf6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    ddf0:	2d3e      	cmp	r5, #62	; 0x3e
    ddf2:	d001      	beq.n	ddf8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    ddf4:	2001      	movs	r0, #1
    ddf6:	bd70      	pop	{r4, r5, r6, pc}
    ddf8:	2c12      	cmp	r4, #18
    ddfa:	d004      	beq.n	de06 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    ddfc:	4620      	mov	r0, r4
    ddfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    de02:	f7f7 bd61 	b.w	58c8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    de06:	2000      	movs	r0, #0
    de08:	bd70      	pop	{r4, r5, r6, pc}

0000de0a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    de0a:	880a      	ldrh	r2, [r1, #0]
    de0c:	f3c2 020b 	ubfx	r2, r2, #0, #12
    de10:	8002      	strh	r2, [r0, #0]
    de12:	884a      	ldrh	r2, [r1, #2]
    de14:	8042      	strh	r2, [r0, #2]
    de16:	784a      	ldrb	r2, [r1, #1]
    de18:	0993      	lsrs	r3, r2, #6
    de1a:	2200      	movs	r2, #0
    de1c:	7142      	strb	r2, [r0, #5]
    de1e:	784b      	ldrb	r3, [r1, #1]
    de20:	f3c3 1301 	ubfx	r3, r3, #4, #2
    de24:	b11b      	cbz	r3, de2e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    de26:	2b01      	cmp	r3, #1
    de28:	d005      	beq.n	de36 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    de2a:	2b02      	cmp	r3, #2
    de2c:	d005      	beq.n	de3a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    de2e:	7102      	strb	r2, [r0, #4]
    de30:	1d09      	adds	r1, r1, #4
    de32:	6081      	str	r1, [r0, #8]
    de34:	4770      	bx	lr
    de36:	2201      	movs	r2, #1
    de38:	e7f9      	b.n	de2e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    de3a:	2202      	movs	r2, #2
    de3c:	e7f7      	b.n	de2e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000de3e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    de3e:	b510      	push	{r4, lr}
    de40:	460c      	mov	r4, r1
    de42:	7809      	ldrb	r1, [r1, #0]
    de44:	7001      	strb	r1, [r0, #0]
    de46:	7841      	ldrb	r1, [r0, #1]
    de48:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    de4c:	7041      	strb	r1, [r0, #1]
    de4e:	8822      	ldrh	r2, [r4, #0]
    de50:	f3c2 2203 	ubfx	r2, r2, #8, #4
    de54:	4311      	orrs	r1, r2
    de56:	7041      	strb	r1, [r0, #1]
    de58:	78a2      	ldrb	r2, [r4, #2]
    de5a:	7082      	strb	r2, [r0, #2]
    de5c:	8862      	ldrh	r2, [r4, #2]
    de5e:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    de62:	0a12      	lsrs	r2, r2, #8
    de64:	70c2      	strb	r2, [r0, #3]
    de66:	7041      	strb	r1, [r0, #1]
    de68:	7922      	ldrb	r2, [r4, #4]
    de6a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    de6e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    de72:	7041      	strb	r1, [r0, #1]
    de74:	7962      	ldrb	r2, [r4, #5]
    de76:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    de7a:	7041      	strb	r1, [r0, #1]
    de7c:	68a1      	ldr	r1, [r4, #8]
    de7e:	1d02      	adds	r2, r0, #4
    de80:	4291      	cmp	r1, r2
    de82:	d006      	beq.n	de92 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    de84:	8862      	ldrh	r2, [r4, #2]
    de86:	2afb      	cmp	r2, #251	; 0xfb
    de88:	d300      	bcc.n	de8c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    de8a:	22fb      	movs	r2, #251	; 0xfb
    de8c:	1d00      	adds	r0, r0, #4
    de8e:	f7ff fe01 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    de92:	78a0      	ldrb	r0, [r4, #2]
    de94:	1d00      	adds	r0, r0, #4
    de96:	b2c0      	uxtb	r0, r0
    de98:	bd10      	pop	{r4, pc}

0000de9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    de9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de9e:	4604      	mov	r4, r0
    dea0:	f891 c000 	ldrb.w	ip, [r1]
    dea4:	2000      	movs	r0, #0
    dea6:	2513      	movs	r5, #19
    dea8:	260c      	movs	r6, #12
    deaa:	2705      	movs	r7, #5
    deac:	223e      	movs	r2, #62	; 0x3e
    deae:	23ff      	movs	r3, #255	; 0xff
    deb0:	f1bc 0f1b 	cmp.w	ip, #27
    deb4:	d27d      	bcs.n	dfb2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x118>
    deb6:	e8df f00c 	tbb	[pc, ip]
    deba:	0e7c      	.short	0x0e7c
    debc:	872d2725 	.word	0x872d2725
    dec0:	d0bda391 	.word	0xd0bda391
    dec4:	f2f4ddd2 	.word	0xf2f4ddd2
    dec8:	537c7cf1 	.word	0x537c7cf1
    decc:	edeeefff 	.word	0xedeeefff
    ded0:	e9eaebec 	.word	0xe9eaebec
    ded4:	00e8      	.short	0x00e8
    ded6:	7026      	strb	r6, [r4, #0]
    ded8:	7908      	ldrb	r0, [r1, #4]
    deda:	70a0      	strb	r0, [r4, #2]
    dedc:	7948      	ldrb	r0, [r1, #5]
    dede:	70e0      	strb	r0, [r4, #3]
    dee0:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    dee4:	0a00      	lsrs	r0, r0, #8
    dee6:	7120      	strb	r0, [r4, #4]
    dee8:	79c8      	ldrb	r0, [r1, #7]
    deea:	7160      	strb	r0, [r4, #5]
    deec:	7a08      	ldrb	r0, [r1, #8]
    deee:	71a0      	strb	r0, [r4, #6]
    def0:	8908      	ldrh	r0, [r1, #8]
    def2:	0a00      	lsrs	r0, r0, #8
    def4:	71e0      	strb	r0, [r4, #7]
    def6:	7a88      	ldrb	r0, [r1, #10]
    def8:	7220      	strb	r0, [r4, #8]
    defa:	8948      	ldrh	r0, [r1, #10]
    defc:	0a00      	lsrs	r0, r0, #8
    defe:	7260      	strb	r0, [r4, #9]
    df00:	2008      	movs	r0, #8
    df02:	e174      	b.n	e1ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    df04:	2010      	movs	r0, #16
    df06:	e000      	b.n	df0a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x70>
    df08:	201a      	movs	r0, #26
    df0a:	7020      	strb	r0, [r4, #0]
    df0c:	7908      	ldrb	r0, [r1, #4]
    df0e:	70a0      	strb	r0, [r4, #2]
    df10:	2001      	movs	r0, #1
    df12:	e16c      	b.n	e1ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    df14:	7022      	strb	r2, [r4, #0]
    df16:	2001      	movs	r0, #1
    df18:	70a0      	strb	r0, [r4, #2]
    df1a:	7908      	ldrb	r0, [r1, #4]
    df1c:	70e0      	strb	r0, [r4, #3]
    df1e:	7988      	ldrb	r0, [r1, #6]
    df20:	7120      	strb	r0, [r4, #4]
    df22:	88c8      	ldrh	r0, [r1, #6]
    df24:	0a00      	lsrs	r0, r0, #8
    df26:	7160      	strb	r0, [r4, #5]
    df28:	7a08      	ldrb	r0, [r1, #8]
    df2a:	71a0      	strb	r0, [r4, #6]
    df2c:	7a48      	ldrb	r0, [r1, #9]
    df2e:	71e0      	strb	r0, [r4, #7]
    df30:	f8d1 000a 	ldr.w	r0, [r1, #10]
    df34:	60a0      	str	r0, [r4, #8]
    df36:	89c8      	ldrh	r0, [r1, #14]
    df38:	81a0      	strh	r0, [r4, #12]
    df3a:	7c08      	ldrb	r0, [r1, #16]
    df3c:	73a0      	strb	r0, [r4, #14]
    df3e:	8a08      	ldrh	r0, [r1, #16]
    df40:	0a00      	lsrs	r0, r0, #8
    df42:	73e0      	strb	r0, [r4, #15]
    df44:	7c88      	ldrb	r0, [r1, #18]
    df46:	7420      	strb	r0, [r4, #16]
    df48:	8a48      	ldrh	r0, [r1, #18]
    df4a:	0a00      	lsrs	r0, r0, #8
    df4c:	7460      	strb	r0, [r4, #17]
    df4e:	7d08      	ldrb	r0, [r1, #20]
    df50:	74a0      	strb	r0, [r4, #18]
    df52:	8a88      	ldrh	r0, [r1, #20]
    df54:	0a00      	lsrs	r0, r0, #8
    df56:	74e0      	strb	r0, [r4, #19]
    df58:	7d88      	ldrb	r0, [r1, #22]
    df5a:	7520      	strb	r0, [r4, #20]
    df5c:	4628      	mov	r0, r5
    df5e:	e146      	b.n	e1ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    df60:	7022      	strb	r2, [r4, #0]
    df62:	200a      	movs	r0, #10
    df64:	70a0      	strb	r0, [r4, #2]
    df66:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    df6a:	70e0      	strb	r0, [r4, #3]
    df6c:	7888      	ldrb	r0, [r1, #2]
    df6e:	7120      	strb	r0, [r4, #4]
    df70:	8848      	ldrh	r0, [r1, #2]
    df72:	0a00      	lsrs	r0, r0, #8
    df74:	7160      	strb	r0, [r4, #5]
    df76:	7908      	ldrb	r0, [r1, #4]
    df78:	71a0      	strb	r0, [r4, #6]
    df7a:	7948      	ldrb	r0, [r1, #5]
    df7c:	71e0      	strb	r0, [r4, #7]
    df7e:	f8d1 0006 	ldr.w	r0, [r1, #6]
    df82:	60a0      	str	r0, [r4, #8]
    df84:	8948      	ldrh	r0, [r1, #10]
    df86:	81a0      	strh	r0, [r4, #12]
    df88:	68c8      	ldr	r0, [r1, #12]
    df8a:	f8c4 000e 	str.w	r0, [r4, #14]
    df8e:	8a08      	ldrh	r0, [r1, #16]
    df90:	8260      	strh	r0, [r4, #18]
    df92:	f8d1 0012 	ldr.w	r0, [r1, #18]
    df96:	6160      	str	r0, [r4, #20]
    df98:	8ac8      	ldrh	r0, [r1, #22]
    df9a:	8320      	strh	r0, [r4, #24]
    df9c:	7e08      	ldrb	r0, [r1, #24]
    df9e:	76a0      	strb	r0, [r4, #26]
    dfa0:	8b08      	ldrh	r0, [r1, #24]
    dfa2:	0a00      	lsrs	r0, r0, #8
    dfa4:	76e0      	strb	r0, [r4, #27]
    dfa6:	7e88      	ldrb	r0, [r1, #26]
    dfa8:	7720      	strb	r0, [r4, #28]
    dfaa:	8b48      	ldrh	r0, [r1, #26]
    dfac:	0a00      	lsrs	r0, r0, #8
    dfae:	7760      	strb	r0, [r4, #29]
    dfb0:	e000      	b.n	dfb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11a>
    dfb2:	e097      	b.n	e0e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    dfb4:	7f08      	ldrb	r0, [r1, #28]
    dfb6:	77a0      	strb	r0, [r4, #30]
    dfb8:	8b88      	ldrh	r0, [r1, #28]
    dfba:	0a00      	lsrs	r0, r0, #8
    dfbc:	77e0      	strb	r0, [r4, #31]
    dfbe:	7f88      	ldrb	r0, [r1, #30]
    dfc0:	f884 0020 	strb.w	r0, [r4, #32]
    dfc4:	201f      	movs	r0, #31
    dfc6:	e112      	b.n	e1ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    dfc8:	7022      	strb	r2, [r4, #0]
    dfca:	2014      	movs	r0, #20
    dfcc:	70a0      	strb	r0, [r4, #2]
    dfce:	7908      	ldrb	r0, [r1, #4]
    dfd0:	70e0      	strb	r0, [r4, #3]
    dfd2:	8888      	ldrh	r0, [r1, #4]
    dfd4:	0a00      	lsrs	r0, r0, #8
    dfd6:	7120      	strb	r0, [r4, #4]
    dfd8:	7988      	ldrb	r0, [r1, #6]
    dfda:	e0a6      	b.n	e12a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    dfdc:	7022      	strb	r2, [r4, #0]
    dfde:	2004      	movs	r0, #4
    dfe0:	70a0      	strb	r0, [r4, #2]
    dfe2:	7908      	ldrb	r0, [r1, #4]
    dfe4:	70e0      	strb	r0, [r4, #3]
    dfe6:	7988      	ldrb	r0, [r1, #6]
    dfe8:	7120      	strb	r0, [r4, #4]
    dfea:	88c8      	ldrh	r0, [r1, #6]
    dfec:	0a00      	lsrs	r0, r0, #8
    dfee:	7160      	strb	r0, [r4, #5]
    dff0:	6888      	ldr	r0, [r1, #8]
    dff2:	f8c4 0006 	str.w	r0, [r4, #6]
    dff6:	68c8      	ldr	r0, [r1, #12]
    dff8:	f8c4 000a 	str.w	r0, [r4, #10]
    dffc:	200c      	movs	r0, #12
    dffe:	e0f6      	b.n	e1ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    e000:	7022      	strb	r2, [r4, #0]
    e002:	2003      	movs	r0, #3
    e004:	70a0      	strb	r0, [r4, #2]
    e006:	7908      	ldrb	r0, [r1, #4]
    e008:	70e0      	strb	r0, [r4, #3]
    e00a:	7988      	ldrb	r0, [r1, #6]
    e00c:	7120      	strb	r0, [r4, #4]
    e00e:	88c8      	ldrh	r0, [r1, #6]
    e010:	0a00      	lsrs	r0, r0, #8
    e012:	7160      	strb	r0, [r4, #5]
    e014:	7a08      	ldrb	r0, [r1, #8]
    e016:	71a0      	strb	r0, [r4, #6]
    e018:	8908      	ldrh	r0, [r1, #8]
    e01a:	0a00      	lsrs	r0, r0, #8
    e01c:	71e0      	strb	r0, [r4, #7]
    e01e:	7a88      	ldrb	r0, [r1, #10]
    e020:	7220      	strb	r0, [r4, #8]
    e022:	8948      	ldrh	r0, [r1, #10]
    e024:	0a00      	lsrs	r0, r0, #8
    e026:	7260      	strb	r0, [r4, #9]
    e028:	7b08      	ldrb	r0, [r1, #12]
    e02a:	72a0      	strb	r0, [r4, #10]
    e02c:	8988      	ldrh	r0, [r1, #12]
    e02e:	0a00      	lsrs	r0, r0, #8
    e030:	72e0      	strb	r0, [r4, #11]
    e032:	e0b6      	b.n	e1a2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x308>
    e034:	7022      	strb	r2, [r4, #0]
    e036:	70a7      	strb	r7, [r4, #2]
    e038:	7908      	ldrb	r0, [r1, #4]
    e03a:	70e0      	strb	r0, [r4, #3]
    e03c:	8888      	ldrh	r0, [r1, #4]
    e03e:	0a00      	lsrs	r0, r0, #8
    e040:	7120      	strb	r0, [r4, #4]
    e042:	f8d1 0006 	ldr.w	r0, [r1, #6]
    e046:	f8c4 0005 	str.w	r0, [r4, #5]
    e04a:	f8d1 000a 	ldr.w	r0, [r1, #10]
    e04e:	f8c4 0009 	str.w	r0, [r4, #9]
    e052:	89c8      	ldrh	r0, [r1, #14]
    e054:	f8a4 000d 	strh.w	r0, [r4, #13]
    e058:	e0c8      	b.n	e1ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x352>
    e05a:	2011      	movs	r0, #17
    e05c:	e045      	b.n	e0ea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    e05e:	7027      	strb	r7, [r4, #0]
    e060:	7908      	ldrb	r0, [r1, #4]
    e062:	70a0      	strb	r0, [r4, #2]
    e064:	7948      	ldrb	r0, [r1, #5]
    e066:	70e0      	strb	r0, [r4, #3]
    e068:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    e06c:	0a00      	lsrs	r0, r0, #8
    e06e:	7120      	strb	r0, [r4, #4]
    e070:	79c8      	ldrb	r0, [r1, #7]
    e072:	e05a      	b.n	e12a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    e074:	2008      	movs	r0, #8
    e076:	7020      	strb	r0, [r4, #0]
    e078:	7908      	ldrb	r0, [r1, #4]
    e07a:	70a0      	strb	r0, [r4, #2]
    e07c:	7988      	ldrb	r0, [r1, #6]
    e07e:	70e0      	strb	r0, [r4, #3]
    e080:	88c8      	ldrh	r0, [r1, #6]
    e082:	0a00      	lsrs	r0, r0, #8
    e084:	7120      	strb	r0, [r4, #4]
    e086:	7a08      	ldrb	r0, [r1, #8]
    e088:	e04f      	b.n	e12a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    e08a:	e09a      	b.n	e1c2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    e08c:	e06e      	b.n	e16c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d2>
    e08e:	e04f      	b.n	e130 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x296>
    e090:	e07a      	b.n	e188 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ee>
    e092:	e088      	b.n	e1a6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x30c>
    e094:	e041      	b.n	e11a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x280>
    e096:	e030      	b.n	e0fa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x260>
    e098:	e011      	b.n	e0be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x224>
    e09a:	e00d      	b.n	e0b8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21e>
    e09c:	e024      	b.n	e0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24e>
    e09e:	e01b      	b.n	e0d8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23e>
    e0a0:	e7ff      	b.n	e0a2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x208>
    e0a2:	2030      	movs	r0, #48	; 0x30
    e0a4:	7020      	strb	r0, [r4, #0]
    e0a6:	7908      	ldrb	r0, [r1, #4]
    e0a8:	70a0      	strb	r0, [r4, #2]
    e0aa:	7988      	ldrb	r0, [r1, #6]
    e0ac:	70e0      	strb	r0, [r4, #3]
    e0ae:	88c8      	ldrh	r0, [r1, #6]
    e0b0:	0a00      	lsrs	r0, r0, #8
    e0b2:	7120      	strb	r0, [r4, #4]
    e0b4:	2003      	movs	r0, #3
    e0b6:	e09a      	b.n	e1ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    e0b8:	7022      	strb	r2, [r4, #0]
    e0ba:	2007      	movs	r0, #7
    e0bc:	e03a      	b.n	e134 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29a>
    e0be:	7022      	strb	r2, [r4, #0]
    e0c0:	70a6      	strb	r6, [r4, #2]
    e0c2:	7908      	ldrb	r0, [r1, #4]
    e0c4:	70e0      	strb	r0, [r4, #3]
    e0c6:	7988      	ldrb	r0, [r1, #6]
    e0c8:	7120      	strb	r0, [r4, #4]
    e0ca:	88c8      	ldrh	r0, [r1, #6]
    e0cc:	0a00      	lsrs	r0, r0, #8
    e0ce:	7160      	strb	r0, [r4, #5]
    e0d0:	7a08      	ldrb	r0, [r1, #8]
    e0d2:	71a0      	strb	r0, [r4, #6]
    e0d4:	7a48      	ldrb	r0, [r1, #9]
    e0d6:	e01d      	b.n	e114 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27a>
    e0d8:	4620      	mov	r0, r4
    e0da:	1d09      	adds	r1, r1, #4
    e0dc:	f7f7 fbb4 	bl	5848 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    e0e0:	2800      	cmp	r0, #0
    e0e2:	d109      	bne.n	e0f8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x25e>
    e0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e0e8:	2057      	movs	r0, #87	; 0x57
    e0ea:	7020      	strb	r0, [r4, #0]
    e0ec:	7908      	ldrb	r0, [r1, #4]
    e0ee:	70a0      	strb	r0, [r4, #2]
    e0f0:	8888      	ldrh	r0, [r1, #4]
    e0f2:	0a00      	lsrs	r0, r0, #8
    e0f4:	70e0      	strb	r0, [r4, #3]
    e0f6:	2002      	movs	r0, #2
    e0f8:	e079      	b.n	e1ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    e0fa:	7022      	strb	r2, [r4, #0]
    e0fc:	2012      	movs	r0, #18
    e0fe:	70a0      	strb	r0, [r4, #2]
    e100:	7908      	ldrb	r0, [r1, #4]
    e102:	70e0      	strb	r0, [r4, #3]
    e104:	7948      	ldrb	r0, [r1, #5]
    e106:	7120      	strb	r0, [r4, #4]
    e108:	7988      	ldrb	r0, [r1, #6]
    e10a:	7160      	strb	r0, [r4, #5]
    e10c:	88c8      	ldrh	r0, [r1, #6]
    e10e:	0a00      	lsrs	r0, r0, #8
    e110:	71a0      	strb	r0, [r4, #6]
    e112:	7a08      	ldrb	r0, [r1, #8]
    e114:	71e0      	strb	r0, [r4, #7]
    e116:	2006      	movs	r0, #6
    e118:	e069      	b.n	e1ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    e11a:	7023      	strb	r3, [r4, #0]
    e11c:	20a1      	movs	r0, #161	; 0xa1
    e11e:	70a0      	strb	r0, [r4, #2]
    e120:	7908      	ldrb	r0, [r1, #4]
    e122:	70e0      	strb	r0, [r4, #3]
    e124:	7948      	ldrb	r0, [r1, #5]
    e126:	7120      	strb	r0, [r4, #4]
    e128:	2000      	movs	r0, #0
    e12a:	7160      	strb	r0, [r4, #5]
    e12c:	2004      	movs	r0, #4
    e12e:	e05e      	b.n	e1ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    e130:	7023      	strb	r3, [r4, #0]
    e132:	20a2      	movs	r0, #162	; 0xa2
    e134:	70a0      	strb	r0, [r4, #2]
    e136:	7908      	ldrb	r0, [r1, #4]
    e138:	70e0      	strb	r0, [r4, #3]
    e13a:	8888      	ldrh	r0, [r1, #4]
    e13c:	0a00      	lsrs	r0, r0, #8
    e13e:	7120      	strb	r0, [r4, #4]
    e140:	7988      	ldrb	r0, [r1, #6]
    e142:	7160      	strb	r0, [r4, #5]
    e144:	88c8      	ldrh	r0, [r1, #6]
    e146:	0a00      	lsrs	r0, r0, #8
    e148:	71a0      	strb	r0, [r4, #6]
    e14a:	7a08      	ldrb	r0, [r1, #8]
    e14c:	71e0      	strb	r0, [r4, #7]
    e14e:	8908      	ldrh	r0, [r1, #8]
    e150:	0a00      	lsrs	r0, r0, #8
    e152:	7220      	strb	r0, [r4, #8]
    e154:	7a88      	ldrb	r0, [r1, #10]
    e156:	7260      	strb	r0, [r4, #9]
    e158:	8948      	ldrh	r0, [r1, #10]
    e15a:	0a00      	lsrs	r0, r0, #8
    e15c:	72a0      	strb	r0, [r4, #10]
    e15e:	7b08      	ldrb	r0, [r1, #12]
    e160:	72e0      	strb	r0, [r4, #11]
    e162:	8988      	ldrh	r0, [r1, #12]
    e164:	0a00      	lsrs	r0, r0, #8
    e166:	7320      	strb	r0, [r4, #12]
    e168:	200b      	movs	r0, #11
    e16a:	e040      	b.n	e1ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    e16c:	7023      	strb	r3, [r4, #0]
    e16e:	20a3      	movs	r0, #163	; 0xa3
    e170:	70a0      	strb	r0, [r4, #2]
    e172:	7908      	ldrb	r0, [r1, #4]
    e174:	70e0      	strb	r0, [r4, #3]
    e176:	8888      	ldrh	r0, [r1, #4]
    e178:	0a00      	lsrs	r0, r0, #8
    e17a:	7120      	strb	r0, [r4, #4]
    e17c:	7988      	ldrb	r0, [r1, #6]
    e17e:	7160      	strb	r0, [r4, #5]
    e180:	79c8      	ldrb	r0, [r1, #7]
    e182:	71a0      	strb	r0, [r4, #6]
    e184:	2005      	movs	r0, #5
    e186:	e032      	b.n	e1ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    e188:	7022      	strb	r2, [r4, #0]
    e18a:	70a5      	strb	r5, [r4, #2]
    e18c:	7908      	ldrb	r0, [r1, #4]
    e18e:	70e0      	strb	r0, [r4, #3]
    e190:	7948      	ldrb	r0, [r1, #5]
    e192:	7120      	strb	r0, [r4, #4]
    e194:	f8d1 0006 	ldr.w	r0, [r1, #6]
    e198:	f8c4 0005 	str.w	r0, [r4, #5]
    e19c:	8948      	ldrh	r0, [r1, #10]
    e19e:	f8a4 0009 	strh.w	r0, [r4, #9]
    e1a2:	200a      	movs	r0, #10
    e1a4:	e023      	b.n	e1ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    e1a6:	7023      	strb	r3, [r4, #0]
    e1a8:	20a4      	movs	r0, #164	; 0xa4
    e1aa:	70a0      	strb	r0, [r4, #2]
    e1ac:	7908      	ldrb	r0, [r1, #4]
    e1ae:	70e0      	strb	r0, [r4, #3]
    e1b0:	8888      	ldrh	r0, [r1, #4]
    e1b2:	0a00      	lsrs	r0, r0, #8
    e1b4:	7120      	strb	r0, [r4, #4]
    e1b6:	7988      	ldrb	r0, [r1, #6]
    e1b8:	7160      	strb	r0, [r4, #5]
    e1ba:	79c8      	ldrb	r0, [r1, #7]
    e1bc:	71a0      	strb	r0, [r4, #6]
    e1be:	2007      	movs	r0, #7
    e1c0:	e015      	b.n	e1ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    e1c2:	7023      	strb	r3, [r4, #0]
    e1c4:	2080      	movs	r0, #128	; 0x80
    e1c6:	70a0      	strb	r0, [r4, #2]
    e1c8:	888a      	ldrh	r2, [r1, #4]
    e1ca:	f8a4 2003 	strh.w	r2, [r4, #3]
    e1ce:	88ca      	ldrh	r2, [r1, #6]
    e1d0:	f8a4 2005 	strh.w	r2, [r4, #5]
    e1d4:	7a0a      	ldrb	r2, [r1, #8]
    e1d6:	71e2      	strb	r2, [r4, #7]
    e1d8:	894a      	ldrh	r2, [r1, #10]
    e1da:	8122      	strh	r2, [r4, #8]
    e1dc:	898a      	ldrh	r2, [r1, #12]
    e1de:	8162      	strh	r2, [r4, #10]
    e1e0:	89ca      	ldrh	r2, [r1, #14]
    e1e2:	81a2      	strh	r2, [r4, #12]
    e1e4:	7c09      	ldrb	r1, [r1, #16]
    e1e6:	f001 0101 	and.w	r1, r1, #1
    e1ea:	73a1      	strb	r1, [r4, #14]
    e1ec:	200d      	movs	r0, #13
    e1ee:	7060      	strb	r0, [r4, #1]
    e1f0:	1c80      	adds	r0, r0, #2
    e1f2:	e777      	b.n	e0e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>

0000e1f4 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    e1f4:	223e      	movs	r2, #62	; 0x3e
    e1f6:	7002      	strb	r2, [r0, #0]
    e1f8:	2201      	movs	r2, #1
    e1fa:	7082      	strb	r2, [r0, #2]
    e1fc:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    e200:	70c2      	strb	r2, [r0, #3]
    e202:	788a      	ldrb	r2, [r1, #2]
    e204:	7102      	strb	r2, [r0, #4]
    e206:	884a      	ldrh	r2, [r1, #2]
    e208:	0a12      	lsrs	r2, r2, #8
    e20a:	7142      	strb	r2, [r0, #5]
    e20c:	790a      	ldrb	r2, [r1, #4]
    e20e:	7182      	strb	r2, [r0, #6]
    e210:	794a      	ldrb	r2, [r1, #5]
    e212:	71c2      	strb	r2, [r0, #7]
    e214:	f8d1 2006 	ldr.w	r2, [r1, #6]
    e218:	6082      	str	r2, [r0, #8]
    e21a:	894a      	ldrh	r2, [r1, #10]
    e21c:	8182      	strh	r2, [r0, #12]
    e21e:	7e0a      	ldrb	r2, [r1, #24]
    e220:	7382      	strb	r2, [r0, #14]
    e222:	8b0a      	ldrh	r2, [r1, #24]
    e224:	0a12      	lsrs	r2, r2, #8
    e226:	73c2      	strb	r2, [r0, #15]
    e228:	7e8a      	ldrb	r2, [r1, #26]
    e22a:	7402      	strb	r2, [r0, #16]
    e22c:	8b4a      	ldrh	r2, [r1, #26]
    e22e:	0a12      	lsrs	r2, r2, #8
    e230:	7442      	strb	r2, [r0, #17]
    e232:	7f0a      	ldrb	r2, [r1, #28]
    e234:	7482      	strb	r2, [r0, #18]
    e236:	8b8a      	ldrh	r2, [r1, #28]
    e238:	0a12      	lsrs	r2, r2, #8
    e23a:	74c2      	strb	r2, [r0, #19]
    e23c:	7f89      	ldrb	r1, [r1, #30]
    e23e:	7501      	strb	r1, [r0, #20]
    e240:	2113      	movs	r1, #19
    e242:	7041      	strb	r1, [r0, #1]
    e244:	4608      	mov	r0, r1
    e246:	4770      	bx	lr
    e248:	094a      	lsrs	r2, r1, #5
    e24a:	f001 011f 	and.w	r1, r1, #31
    e24e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    e252:	40c8      	lsrs	r0, r1
    e254:	f000 0001 	and.w	r0, r0, #1
    e258:	4770      	bx	lr

0000e25a <sdc_hci_data_get>:
    e25a:	b510      	push	{r4, lr}
    e25c:	b120      	cbz	r0, e268 <sdc_hci_data_get+0xe>
    e25e:	f7ff fd9a 	bl	dd96 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    e262:	b120      	cbz	r0, e26e <sdc_hci_data_get+0x14>
    e264:	2000      	movs	r0, #0
    e266:	bd10      	pop	{r4, pc}
    e268:	f06f 0015 	mvn.w	r0, #21
    e26c:	bd10      	pop	{r4, pc}
    e26e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e272:	bd10      	pop	{r4, pc}

0000e274 <sdc_hci_data_put>:
    e274:	b510      	push	{r4, lr}
    e276:	f06f 0415 	mvn.w	r4, #21
    e27a:	b120      	cbz	r0, e286 <sdc_hci_data_put+0x12>
    e27c:	f7ff fd99 	bl	ddb2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    e280:	b108      	cbz	r0, e286 <sdc_hci_data_put+0x12>
    e282:	2000      	movs	r0, #0
    e284:	bd10      	pop	{r4, pc}
    e286:	4620      	mov	r0, r4
    e288:	bd10      	pop	{r4, pc}

0000e28a <sdc_hci_evt_get>:
    e28a:	b510      	push	{r4, lr}
    e28c:	b120      	cbz	r0, e298 <sdc_hci_evt_get+0xe>
    e28e:	f7ff fd99 	bl	ddc4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    e292:	b120      	cbz	r0, e29e <sdc_hci_evt_get+0x14>
    e294:	2000      	movs	r0, #0
    e296:	bd10      	pop	{r4, pc}
    e298:	f06f 0015 	mvn.w	r0, #21
    e29c:	bd10      	pop	{r4, pc}
    e29e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e2a2:	bd10      	pop	{r4, pc}

0000e2a4 <sdc_hci_get>:
    e2a4:	b118      	cbz	r0, e2ae <sdc_hci_get+0xa>
    e2a6:	b111      	cbz	r1, e2ae <sdc_hci_get+0xa>
    e2a8:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e2ac:	4770      	bx	lr
    e2ae:	f06f 0015 	mvn.w	r0, #21
    e2b2:	4770      	bx	lr

0000e2b4 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    e2b4:	f002 bfbf 	b.w	11236 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000e2b8 <sdc_hci_cmd_cb_read_transmit_power_level>:
    e2b8:	f003 b80d 	b.w	112d6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000e2bc <sdc_hci_cmd_cb_set_event_mask>:
    e2bc:	b510      	push	{r4, lr}
    e2be:	f7f7 fb13 	bl	58e8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    e2c2:	2000      	movs	r0, #0
    e2c4:	bd10      	pop	{r4, pc}

0000e2c6 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    e2c6:	b510      	push	{r4, lr}
    e2c8:	f7f7 fb1e 	bl	5908 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    e2cc:	2000      	movs	r0, #0
    e2ce:	bd10      	pop	{r4, pc}

0000e2d0 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    e2d0:	f003 b81d 	b.w	1130e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000e2d4 <sdc_hci_cmd_vs_conn_event_extend>:
    e2d4:	b508      	push	{r3, lr}
    e2d6:	7800      	ldrb	r0, [r0, #0]
    e2d8:	f88d 0000 	strb.w	r0, [sp]
    e2dc:	4668      	mov	r0, sp
    e2de:	f002 fecb 	bl	11078 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    e2e2:	bd08      	pop	{r3, pc}

0000e2e4 <sdc_hci_cmd_vs_conn_update>:
    e2e4:	2001      	movs	r0, #1
    e2e6:	4770      	bx	lr

0000e2e8 <sdc_hci_cmd_vs_event_length_set>:
    e2e8:	f7fd b9f8 	b.w	b6dc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000e2ec <sdc_hci_cmd_vs_llpm_mode_set>:
    e2ec:	2001      	movs	r0, #1
    e2ee:	4770      	bx	lr

0000e2f0 <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    e2f0:	7881      	ldrb	r1, [r0, #2]
    e2f2:	8800      	ldrh	r0, [r0, #0]
    e2f4:	f002 be88 	b.w	11008 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000e2f8 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    e2f8:	7800      	ldrb	r0, [r0, #0]
    e2fa:	b100      	cbz	r0, e2fe <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    e2fc:	2001      	movs	r0, #1
    e2fe:	f002 be7e 	b.w	10ffe <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000e302 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    e302:	b570      	push	{r4, r5, r6, lr}
    e304:	4605      	mov	r5, r0
    e306:	2210      	movs	r2, #16
    e308:	2100      	movs	r1, #0
    e30a:	f7ff fc3d 	bl	db88 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e30e:	2210      	movs	r2, #16
    e310:	2100      	movs	r1, #0
    e312:	f105 0010 	add.w	r0, r5, #16
    e316:	f7ff fc37 	bl	db88 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e31a:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    e31e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    e322:	1c40      	adds	r0, r0, #1
    e324:	d10b      	bne.n	e33e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    e326:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e32a:	1c40      	adds	r0, r0, #1
    e32c:	d107      	bne.n	e33e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    e32e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    e332:	1c40      	adds	r0, r0, #1
    e334:	d103      	bne.n	e33e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    e336:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    e33a:	1c40      	adds	r0, r0, #1
    e33c:	d00b      	beq.n	e356 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    e33e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    e342:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e346:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    e34a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    e34e:	612a      	str	r2, [r5, #16]
    e350:	6168      	str	r0, [r5, #20]
    e352:	61a9      	str	r1, [r5, #24]
    e354:	61eb      	str	r3, [r5, #28]
    e356:	2000      	movs	r0, #0
    e358:	f7f8 f81c 	bl	6394 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    e35c:	b918      	cbnz	r0, e366 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    e35e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    e362:	07c0      	lsls	r0, r0, #31
    e364:	d118      	bne.n	e398 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    e366:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    e36a:	1c40      	adds	r0, r0, #1
    e36c:	d10b      	bne.n	e386 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    e36e:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    e372:	1c40      	adds	r0, r0, #1
    e374:	d107      	bne.n	e386 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    e376:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    e37a:	1c40      	adds	r0, r0, #1
    e37c:	d103      	bne.n	e386 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    e37e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    e382:	1c40      	adds	r0, r0, #1
    e384:	d008      	beq.n	e398 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    e386:	f854 0f90 	ldr.w	r0, [r4, #144]!
    e38a:	6861      	ldr	r1, [r4, #4]
    e38c:	68a2      	ldr	r2, [r4, #8]
    e38e:	68e3      	ldr	r3, [r4, #12]
    e390:	6028      	str	r0, [r5, #0]
    e392:	6069      	str	r1, [r5, #4]
    e394:	60aa      	str	r2, [r5, #8]
    e396:	60eb      	str	r3, [r5, #12]
    e398:	2000      	movs	r0, #0
    e39a:	bd70      	pop	{r4, r5, r6, pc}

0000e39c <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    e39c:	b538      	push	{r3, r4, r5, lr}
    e39e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    e3a2:	4604      	mov	r4, r0
    e3a4:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    e3a8:	1c40      	adds	r0, r0, #1
    e3aa:	d105      	bne.n	e3b8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    e3ac:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    e3b0:	43c0      	mvns	r0, r0
    e3b2:	0400      	lsls	r0, r0, #16
    e3b4:	0c00      	lsrs	r0, r0, #16
    e3b6:	d03e      	beq.n	e436 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    e3b8:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    e3bc:	07c0      	lsls	r0, r0, #31
    e3be:	d03a      	beq.n	e436 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    e3c0:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    e3c4:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    e3c8:	f8ad 1000 	strh.w	r1, [sp]
    e3cc:	f8c4 0001 	str.w	r0, [r4, #1]
    e3d0:	f8bd 0000 	ldrh.w	r0, [sp]
    e3d4:	f8a4 0005 	strh.w	r0, [r4, #5]
    e3d8:	79a0      	ldrb	r0, [r4, #6]
    e3da:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    e3de:	71a0      	strb	r0, [r4, #6]
    e3e0:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    e3e4:	1c40      	adds	r0, r0, #1
    e3e6:	d00f      	beq.n	e408 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e3e8:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    e3ec:	1c40      	adds	r0, r0, #1
    e3ee:	d00b      	beq.n	e408 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e3f0:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    e3f4:	1c40      	adds	r0, r0, #1
    e3f6:	d007      	beq.n	e408 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e3f8:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    e3fc:	1c40      	adds	r0, r0, #1
    e3fe:	d003      	beq.n	e408 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e400:	2000      	movs	r0, #0
    e402:	f7f7 ffc7 	bl	6394 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    e406:	b140      	cbz	r0, e41a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    e408:	2210      	movs	r2, #16
    e40a:	2100      	movs	r1, #0
    e40c:	1de0      	adds	r0, r4, #7
    e40e:	f7ff fbbb 	bl	db88 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e412:	2001      	movs	r0, #1
    e414:	7020      	strb	r0, [r4, #0]
    e416:	2000      	movs	r0, #0
    e418:	bd38      	pop	{r3, r4, r5, pc}
    e41a:	f855 2f90 	ldr.w	r2, [r5, #144]!
    e41e:	6869      	ldr	r1, [r5, #4]
    e420:	68a8      	ldr	r0, [r5, #8]
    e422:	68eb      	ldr	r3, [r5, #12]
    e424:	f8c4 2007 	str.w	r2, [r4, #7]
    e428:	f8c4 100b 	str.w	r1, [r4, #11]
    e42c:	f8c4 000f 	str.w	r0, [r4, #15]
    e430:	f8c4 3013 	str.w	r3, [r4, #19]
    e434:	e7ed      	b.n	e412 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    e436:	2000      	movs	r0, #0
    e438:	e7ec      	b.n	e414 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000e43a <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    e43a:	f002 be0f 	b.w	1105c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000e43e <sdc_hci_cmd_ip_read_bd_addr>:
    e43e:	f002 bf0b 	b.w	11258 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000e442 <sdc_hci_cmd_ip_read_local_version_information>:
    e442:	f7fd b959 	b.w	b6f8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000e446 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    e446:	f002 bb76 	b.w	10b36 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000e44a <sdc_hci_cmd_le_add_device_to_resolving_list>:
    e44a:	f002 bb59 	b.w	10b00 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000e44e <sdc_hci_cmd_le_clear_filter_accept_list>:
    e44e:	f002 bb96 	b.w	10b7e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000e452 <sdc_hci_cmd_le_clear_resolving_list>:
    e452:	f002 bb87 	b.w	10b64 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000e456 <sdc_hci_cmd_le_encrypt>:
    e456:	f002 bb9c 	b.w	10b92 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000e45a <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    e45a:	8802      	ldrh	r2, [r0, #0]
    e45c:	800a      	strh	r2, [r1, #0]
    e45e:	f002 bba1 	b.w	10ba4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000e462 <sdc_hci_cmd_le_long_term_key_request_reply>:
    e462:	8802      	ldrh	r2, [r0, #0]
    e464:	800a      	strh	r2, [r1, #0]
    e466:	f002 bbb6 	b.w	10bd6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000e46a <sdc_hci_cmd_le_rand>:
    e46a:	f002 bbde 	b.w	10c2a <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000e46e <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    e46e:	f002 bbe2 	b.w	10c36 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000e472 <sdc_hci_cmd_le_read_buffer_size>:
    e472:	f7fd b839 	b.w	b4e8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000e476 <sdc_hci_cmd_le_read_channel_map>:
    e476:	f7fd b841 	b.w	b4fc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000e47a <sdc_hci_cmd_le_read_filter_accept_list_size>:
    e47a:	f002 bc17 	b.w	10cac <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000e47e <sdc_hci_cmd_le_read_max_data_length>:
    e47e:	f002 bbe3 	b.w	10c48 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000e482 <sdc_hci_cmd_le_read_phy>:
    e482:	f7fd b863 	b.w	b54c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000e486 <sdc_hci_cmd_le_read_remote_features>:
    e486:	f002 bbe8 	b.w	10c5a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000e48a <sdc_hci_cmd_le_read_resolving_list_size>:
    e48a:	f002 bc02 	b.w	10c92 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000e48e <sdc_hci_cmd_le_read_suggested_default_data_length>:
    e48e:	f7fd b883 	b.w	b598 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000e492 <sdc_hci_cmd_le_read_transmit_power>:
    e492:	f002 bc02 	b.w	10c9a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000e496 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    e496:	f002 bc26 	b.w	10ce6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000e49a <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    e49a:	f002 bc0b 	b.w	10cb4 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000e49e <sdc_hci_cmd_le_set_address_resolution_enable>:
    e49e:	f002 bc37 	b.w	10d10 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000e4a2 <sdc_hci_cmd_le_set_adv_data>:
    e4a2:	f002 bc43 	b.w	10d2c <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000e4a6 <sdc_hci_cmd_le_set_adv_enable>:
    e4a6:	f002 bc56 	b.w	10d56 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000e4aa <sdc_hci_cmd_le_set_adv_params>:
    e4aa:	f002 bc87 	b.w	10dbc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000e4ae <sdc_hci_cmd_le_set_data_length>:
    e4ae:	f002 bd1a 	b.w	10ee6 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000e4b2 <sdc_hci_cmd_le_set_default_phy>:
    e4b2:	f7fd b87b 	b.w	b5ac <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000e4b6 <sdc_hci_cmd_le_set_event_mask>:
    e4b6:	b510      	push	{r4, lr}
    e4b8:	f7f7 fa0e 	bl	58d8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    e4bc:	2000      	movs	r0, #0
    e4be:	bd10      	pop	{r4, pc}

0000e4c0 <sdc_hci_cmd_le_set_phy>:
    e4c0:	f002 bd31 	b.w	10f26 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000e4c4 <sdc_hci_cmd_le_set_privacy_mode>:
    e4c4:	f002 bd48 	b.w	10f58 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000e4c8 <sdc_hci_cmd_le_set_random_address>:
    e4c8:	f002 bd5c 	b.w	10f84 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000e4cc <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    e4cc:	f002 bd68 	b.w	10fa0 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000e4d0 <sdc_hci_cmd_le_set_scan_response_data>:
    e4d0:	f002 bd6f 	b.w	10fb2 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000e4d4 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    e4d4:	f002 bd82 	b.w	10fdc <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000e4d8 <sdc_hci_cmd_lc_disconnect>:
    e4d8:	f002 bac4 	b.w	10a64 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000e4dc <sdc_hci_cmd_lc_read_remote_version_information>:
    e4dc:	f002 bec8 	b.w	11270 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    e4e0:	b570      	push	{r4, r5, r6, lr}
    e4e2:	880b      	ldrh	r3, [r1, #0]
    e4e4:	7f04      	ldrb	r4, [r0, #28]
    e4e6:	f100 0524 	add.w	r5, r0, #36	; 0x24
    e4ea:	f3c3 060e 	ubfx	r6, r3, #0, #15
    e4ee:	8802      	ldrh	r2, [r0, #0]
    e4f0:	4435      	add	r5, r6
    e4f2:	1da4      	adds	r4, r4, #6
    e4f4:	882d      	ldrh	r5, [r5, #0]
    e4f6:	4422      	add	r2, r4
    e4f8:	b292      	uxth	r2, r2
    e4fa:	4425      	add	r5, r4
    e4fc:	1e54      	subs	r4, r2, #1
    e4fe:	442c      	add	r4, r5
    e500:	fb94 f4f2 	sdiv	r4, r4, r2
    e504:	fb02 6204 	mla	r2, r2, r4, r6
    e508:	8840      	ldrh	r0, [r0, #2]
    e50a:	b292      	uxth	r2, r2
    e50c:	4290      	cmp	r0, r2
    e50e:	d903      	bls.n	e518 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    e510:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    e514:	4310      	orrs	r0, r2
    e516:	e002      	b.n	e51e <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    e518:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    e51c:	4398      	bics	r0, r3
    e51e:	8008      	strh	r0, [r1, #0]
    e520:	bd70      	pop	{r4, r5, r6, pc}
    e522:	0442      	lsls	r2, r0, #17
    e524:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    e528:	d107      	bne.n	e53a <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    e52a:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    e52e:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    e532:	4288      	cmp	r0, r1
    e534:	d001      	beq.n	e53a <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    e536:	2001      	movs	r0, #1
    e538:	4770      	bx	lr
    e53a:	2000      	movs	r0, #0
    e53c:	4770      	bx	lr

0000e53e <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    e53e:	b570      	push	{r4, r5, r6, lr}
    e540:	7f00      	ldrb	r0, [r0, #28]
    e542:	461c      	mov	r4, r3
    e544:	1d80      	adds	r0, r0, #6
    e546:	4408      	add	r0, r1
    e548:	4613      	mov	r3, r2
    e54a:	8809      	ldrh	r1, [r1, #0]
    e54c:	9a04      	ldr	r2, [sp, #16]
    e54e:	1cc9      	adds	r1, r1, #3
    e550:	b289      	uxth	r1, r1
    e552:	1915      	adds	r5, r2, r4
    e554:	1ec0      	subs	r0, r0, #3
    e556:	428d      	cmp	r5, r1
    e558:	d805      	bhi.n	e566 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    e55a:	1881      	adds	r1, r0, r2
    e55c:	4622      	mov	r2, r4
    e55e:	4618      	mov	r0, r3
    e560:	f7ff fa98 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e564:	e000      	b.n	e568 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    e566:	2400      	movs	r4, #0
    e568:	4620      	mov	r0, r4
    e56a:	bd70      	pop	{r4, r5, r6, pc}

0000e56c <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    e56c:	b570      	push	{r4, r5, r6, lr}
    e56e:	7f00      	ldrb	r0, [r0, #28]
    e570:	461c      	mov	r4, r3
    e572:	1d80      	adds	r0, r0, #6
    e574:	4408      	add	r0, r1
    e576:	4613      	mov	r3, r2
    e578:	8809      	ldrh	r1, [r1, #0]
    e57a:	9a04      	ldr	r2, [sp, #16]
    e57c:	1cc9      	adds	r1, r1, #3
    e57e:	b289      	uxth	r1, r1
    e580:	1915      	adds	r5, r2, r4
    e582:	1ec0      	subs	r0, r0, #3
    e584:	428d      	cmp	r5, r1
    e586:	d805      	bhi.n	e594 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    e588:	4410      	add	r0, r2
    e58a:	4622      	mov	r2, r4
    e58c:	4619      	mov	r1, r3
    e58e:	f7ff fa81 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e592:	e000      	b.n	e596 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    e594:	2400      	movs	r4, #0
    e596:	4620      	mov	r0, r4
    e598:	bd70      	pop	{r4, r5, r6, pc}

0000e59a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    e59a:	8881      	ldrh	r1, [r0, #4]
    e59c:	88c0      	ldrh	r0, [r0, #6]
    e59e:	4288      	cmp	r0, r1
    e5a0:	d101      	bne.n	e5a6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    e5a2:	2001      	movs	r0, #1
    e5a4:	4770      	bx	lr
    e5a6:	2000      	movs	r0, #0
    e5a8:	4770      	bx	lr

0000e5aa <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    e5aa:	8881      	ldrh	r1, [r0, #4]
    e5ac:	8900      	ldrh	r0, [r0, #8]
    e5ae:	4288      	cmp	r0, r1
    e5b0:	d101      	bne.n	e5b6 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    e5b2:	2001      	movs	r0, #1
    e5b4:	4770      	bx	lr
    e5b6:	2000      	movs	r0, #0
    e5b8:	4770      	bx	lr

0000e5ba <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    e5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e5be:	460f      	mov	r7, r1
    e5c0:	4604      	mov	r4, r0
    e5c2:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e5c6:	8880      	ldrh	r0, [r0, #4]
    e5c8:	2600      	movs	r6, #0
    e5ca:	f3c0 000e 	ubfx	r0, r0, #0, #15
    e5ce:	1845      	adds	r5, r0, r1
    e5d0:	603e      	str	r6, [r7, #0]
    e5d2:	8a20      	ldrh	r0, [r4, #16]
    e5d4:	2800      	cmp	r0, #0
    e5d6:	d01a      	beq.n	e60e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x54>
    e5d8:	89a1      	ldrh	r1, [r4, #12]
    e5da:	4408      	add	r0, r1
    e5dc:	b280      	uxth	r0, r0
    e5de:	81a0      	strh	r0, [r4, #12]
    e5e0:	8829      	ldrh	r1, [r5, #0]
    e5e2:	4288      	cmp	r0, r1
    e5e4:	d905      	bls.n	e5f2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    e5e6:	f44f 71b3 	mov.w	r1, #358	; 0x166
    e5ea:	f04f 0014 	mov.w	r0, #20
    e5ee:	f7f6 ffef 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5f2:	d10a      	bne.n	e60a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x50>
    e5f4:	69a0      	ldr	r0, [r4, #24]
    e5f6:	b108      	cbz	r0, e5fc <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x42>
    e5f8:	7f40      	ldrb	r0, [r0, #29]
    e5fa:	70a8      	strb	r0, [r5, #2]
    e5fc:	f104 0104 	add.w	r1, r4, #4
    e600:	4620      	mov	r0, r4
    e602:	f7ff ff6d 	bl	e4e0 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e606:	81a6      	strh	r6, [r4, #12]
    e608:	603d      	str	r5, [r7, #0]
    e60a:	8226      	strh	r6, [r4, #16]
    e60c:	2001      	movs	r0, #1
    e60e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e612 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    e612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e614:	4604      	mov	r4, r0
    e616:	f100 0324 	add.w	r3, r0, #36	; 0x24
    e61a:	88c0      	ldrh	r0, [r0, #6]
    e61c:	460e      	mov	r6, r1
    e61e:	f3c0 070e 	ubfx	r7, r0, #0, #15
    e622:	8a60      	ldrh	r0, [r4, #18]
    e624:	19d9      	adds	r1, r3, r7
    e626:	b108      	cbz	r0, e62c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    e628:	42b0      	cmp	r0, r6
    e62a:	d201      	bcs.n	e630 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    e62c:	2000      	movs	r0, #0
    e62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e630:	89e0      	ldrh	r0, [r4, #14]
    e632:	2500      	movs	r5, #0
    e634:	b140      	cbz	r0, e648 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    e636:	f8b1 c000 	ldrh.w	ip, [r1]
    e63a:	4560      	cmp	r0, ip
    e63c:	d008      	beq.n	e650 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    e63e:	f240 2151 	movw	r1, #593	; 0x251
    e642:	2014      	movs	r0, #20
    e644:	f7f6 ffc4 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e648:	7f60      	ldrb	r0, [r4, #29]
    e64a:	7088      	strb	r0, [r1, #2]
    e64c:	800d      	strh	r5, [r1, #0]
    e64e:	e00e      	b.n	e66e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    e650:	f894 c01c 	ldrb.w	ip, [r4, #28]
    e654:	4418      	add	r0, r3
    e656:	f10c 0c06 	add.w	ip, ip, #6
    e65a:	44bc      	add	ip, r7
    e65c:	4460      	add	r0, ip
    e65e:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    e662:	f820 cc03 	strh.w	ip, [r0, #-3]
    e666:	f894 c020 	ldrb.w	ip, [r4, #32]
    e66a:	f800 cc01 	strb.w	ip, [r0, #-1]
    e66e:	89e0      	ldrh	r0, [r4, #14]
    e670:	4430      	add	r0, r6
    e672:	81e0      	strh	r0, [r4, #14]
    e674:	8808      	ldrh	r0, [r1, #0]
    e676:	4430      	add	r0, r6
    e678:	8008      	strh	r0, [r1, #0]
    e67a:	b19a      	cbz	r2, e6a4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    e67c:	1da1      	adds	r1, r4, #6
    e67e:	4620      	mov	r0, r4
    e680:	f7ff ff2e 	bl	e4e0 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e684:	81e5      	strh	r5, [r4, #14]
    e686:	7f60      	ldrb	r0, [r4, #29]
    e688:	1c40      	adds	r0, r0, #1
    e68a:	7760      	strb	r0, [r4, #29]
    e68c:	7da0      	ldrb	r0, [r4, #22]
    e68e:	f88d 0000 	strb.w	r0, [sp]
    e692:	9800      	ldr	r0, [sp, #0]
    e694:	9000      	str	r0, [sp, #0]
    e696:	f89d 0000 	ldrb.w	r0, [sp]
    e69a:	b178      	cbz	r0, e6bc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    e69c:	88e0      	ldrh	r0, [r4, #6]
    e69e:	82a0      	strh	r0, [r4, #20]
    e6a0:	75a5      	strb	r5, [r4, #22]
    e6a2:	e00b      	b.n	e6bc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    e6a4:	7f20      	ldrb	r0, [r4, #28]
    e6a6:	89e1      	ldrh	r1, [r4, #14]
    e6a8:	1d80      	adds	r0, r0, #6
    e6aa:	4438      	add	r0, r7
    e6ac:	4419      	add	r1, r3
    e6ae:	4408      	add	r0, r1
    e6b0:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    e6b4:	83e1      	strh	r1, [r4, #30]
    e6b6:	7880      	ldrb	r0, [r0, #2]
    e6b8:	f884 0020 	strb.w	r0, [r4, #32]
    e6bc:	8265      	strh	r5, [r4, #18]
    e6be:	2001      	movs	r0, #1
    e6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e6c2 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    e6c2:	1cc0      	adds	r0, r0, #3
    e6c4:	4770      	bx	lr

0000e6c6 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    e6c6:	b510      	push	{r4, lr}
    e6c8:	4604      	mov	r4, r0
    e6ca:	88c0      	ldrh	r0, [r0, #6]
    e6cc:	88a1      	ldrh	r1, [r4, #4]
    e6ce:	4281      	cmp	r1, r0
    e6d0:	d007      	beq.n	e6e2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e6d2:	89a0      	ldrh	r0, [r4, #12]
    e6d4:	b928      	cbnz	r0, e6e2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e6d6:	8a20      	ldrh	r0, [r4, #16]
    e6d8:	b918      	cbnz	r0, e6e2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e6da:	88a0      	ldrh	r0, [r4, #4]
    e6dc:	8aa1      	ldrh	r1, [r4, #20]
    e6de:	4288      	cmp	r0, r1
    e6e0:	d101      	bne.n	e6e6 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    e6e2:	2000      	movs	r0, #0
    e6e4:	bd10      	pop	{r4, pc}
    e6e6:	1d21      	adds	r1, r4, #4
    e6e8:	4620      	mov	r0, r4
    e6ea:	f7ff fef9 	bl	e4e0 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e6ee:	2000      	movs	r0, #0
    e6f0:	8220      	strh	r0, [r4, #16]
    e6f2:	2001      	movs	r0, #1
    e6f4:	bd10      	pop	{r4, pc}

0000e6f6 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    e6f6:	b510      	push	{r4, lr}
    e6f8:	4604      	mov	r4, r0
    e6fa:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e6fe:	88c0      	ldrh	r0, [r0, #6]
    e700:	f3c0 000e 	ubfx	r0, r0, #0, #15
    e704:	4402      	add	r2, r0
    e706:	8820      	ldrh	r0, [r4, #0]
    e708:	2845      	cmp	r0, #69	; 0x45
    e70a:	d200      	bcs.n	e70e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    e70c:	2045      	movs	r0, #69	; 0x45
    e70e:	4288      	cmp	r0, r1
    e710:	d204      	bcs.n	e71c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    e712:	f240 1119 	movw	r1, #281	; 0x119
    e716:	2014      	movs	r0, #20
    e718:	f7f6 ff5a 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e71c:	7de0      	ldrb	r0, [r4, #23]
    e71e:	2800      	cmp	r0, #0
    e720:	d003      	beq.n	e72a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    e722:	8810      	ldrh	r0, [r2, #0]
    e724:	4288      	cmp	r0, r1
    e726:	d201      	bcs.n	e72c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    e728:	2000      	movs	r0, #0
    e72a:	bd10      	pop	{r4, pc}
    e72c:	8011      	strh	r1, [r2, #0]
    e72e:	1da1      	adds	r1, r4, #6
    e730:	4620      	mov	r0, r4
    e732:	f7ff fed5 	bl	e4e0 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e736:	2000      	movs	r0, #0
    e738:	75e0      	strb	r0, [r4, #23]
    e73a:	2001      	movs	r0, #1
    e73c:	bd10      	pop	{r4, pc}

0000e73e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    e73e:	b530      	push	{r4, r5, lr}
    e740:	88c4      	ldrh	r4, [r0, #6]
    e742:	8881      	ldrh	r1, [r0, #4]
    e744:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e748:	f3c1 030e 	ubfx	r3, r1, #0, #15
    e74c:	4413      	add	r3, r2
    e74e:	8882      	ldrh	r2, [r0, #4]
    e750:	8a85      	ldrh	r5, [r0, #20]
    e752:	42aa      	cmp	r2, r5
    e754:	d012      	beq.n	e77c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e756:	42a1      	cmp	r1, r4
    e758:	d010      	beq.n	e77c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e75a:	8981      	ldrh	r1, [r0, #12]
    e75c:	b971      	cbnz	r1, e77c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e75e:	6982      	ldr	r2, [r0, #24]
    e760:	b172      	cbz	r2, e780 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e762:	4610      	mov	r0, r2
    e764:	f7ff ff21 	bl	e5aa <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    e768:	b950      	cbnz	r0, e780 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e76a:	8910      	ldrh	r0, [r2, #8]
    e76c:	3224      	adds	r2, #36	; 0x24
    e76e:	f3c0 000e 	ubfx	r0, r0, #0, #15
    e772:	4410      	add	r0, r2
    e774:	7899      	ldrb	r1, [r3, #2]
    e776:	7880      	ldrb	r0, [r0, #2]
    e778:	4288      	cmp	r0, r1
    e77a:	d101      	bne.n	e780 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e77c:	2000      	movs	r0, #0
    e77e:	bd30      	pop	{r4, r5, pc}
    e780:	4618      	mov	r0, r3
    e782:	bd30      	pop	{r4, r5, pc}

0000e784 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    e784:	7f00      	ldrb	r0, [r0, #28]
    e786:	1d80      	adds	r0, r0, #6
    e788:	4408      	add	r0, r1
    e78a:	1ec0      	subs	r0, r0, #3
    e78c:	6010      	str	r0, [r2, #0]
    e78e:	8808      	ldrh	r0, [r1, #0]
    e790:	4770      	bx	lr

0000e792 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    e792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e796:	460e      	mov	r6, r1
    e798:	88c1      	ldrh	r1, [r0, #6]
    e79a:	8902      	ldrh	r2, [r0, #8]
    e79c:	4604      	mov	r4, r0
    e79e:	f100 0824 	add.w	r8, r0, #36	; 0x24
    e7a2:	8800      	ldrh	r0, [r0, #0]
    e7a4:	f3c1 050e 	ubfx	r5, r1, #0, #15
    e7a8:	f3c2 070e 	ubfx	r7, r2, #0, #15
    e7ac:	2845      	cmp	r0, #69	; 0x45
    e7ae:	d200      	bcs.n	e7b2 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    e7b0:	2045      	movs	r0, #69	; 0x45
    e7b2:	42b0      	cmp	r0, r6
    e7b4:	d203      	bcs.n	e7be <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    e7b6:	21db      	movs	r1, #219	; 0xdb
    e7b8:	2014      	movs	r0, #20
    e7ba:	f7f6 ff09 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7be:	4610      	mov	r0, r2
    e7c0:	f7ff feaf 	bl	e522 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e7c4:	b110      	cbz	r0, e7cc <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    e7c6:	2000      	movs	r0, #0
    e7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e7cc:	42af      	cmp	r7, r5
    e7ce:	d908      	bls.n	e7e2 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e7d0:	7f21      	ldrb	r1, [r4, #28]
    e7d2:	1b78      	subs	r0, r7, r5
    e7d4:	1a40      	subs	r0, r0, r1
    e7d6:	1f80      	subs	r0, r0, #6
    e7d8:	4286      	cmp	r6, r0
    e7da:	dd02      	ble.n	e7e2 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e7dc:	2000      	movs	r0, #0
    e7de:	75e0      	strb	r0, [r4, #23]
    e7e0:	e7f1      	b.n	e7c6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    e7e2:	eb08 0005 	add.w	r0, r8, r5
    e7e6:	2101      	movs	r1, #1
    e7e8:	8006      	strh	r6, [r0, #0]
    e7ea:	75e1      	strb	r1, [r4, #23]
    e7ec:	e7ec      	b.n	e7c8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000e7ee <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    e7ee:	b538      	push	{r3, r4, r5, lr}
    e7f0:	88c4      	ldrh	r4, [r0, #6]
    e7f2:	8881      	ldrh	r1, [r0, #4]
    e7f4:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e7f8:	f3c1 030e 	ubfx	r3, r1, #0, #15
    e7fc:	441a      	add	r2, r3
    e7fe:	42a1      	cmp	r1, r4
    e800:	d010      	beq.n	e824 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e802:	8983      	ldrh	r3, [r0, #12]
    e804:	8a05      	ldrh	r5, [r0, #16]
    e806:	8812      	ldrh	r2, [r2, #0]
    e808:	442b      	add	r3, r5
    e80a:	4293      	cmp	r3, r2
    e80c:	d308      	bcc.n	e820 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    e80e:	f8ad 1000 	strh.w	r1, [sp]
    e812:	4669      	mov	r1, sp
    e814:	f7ff fe64 	bl	e4e0 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e818:	f8bd 0000 	ldrh.w	r0, [sp]
    e81c:	42a0      	cmp	r0, r4
    e81e:	d001      	beq.n	e824 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e820:	2001      	movs	r0, #1
    e822:	bd38      	pop	{r3, r4, r5, pc}
    e824:	2000      	movs	r0, #0
    e826:	bd38      	pop	{r3, r4, r5, pc}

0000e828 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    e828:	b570      	push	{r4, r5, r6, lr}
    e82a:	88c6      	ldrh	r6, [r0, #6]
    e82c:	8885      	ldrh	r5, [r0, #4]
    e82e:	4603      	mov	r3, r0
    e830:	f100 0424 	add.w	r4, r0, #36	; 0x24
    e834:	f3c5 000e 	ubfx	r0, r5, #0, #15
    e838:	4420      	add	r0, r4
    e83a:	42b5      	cmp	r5, r6
    e83c:	d102      	bne.n	e844 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    e83e:	2000      	movs	r0, #0
    e840:	8218      	strh	r0, [r3, #16]
    e842:	bd70      	pop	{r4, r5, r6, pc}
    e844:	8804      	ldrh	r4, [r0, #0]
    e846:	899d      	ldrh	r5, [r3, #12]
    e848:	7f1e      	ldrb	r6, [r3, #28]
    e84a:	1b64      	subs	r4, r4, r5
    e84c:	4435      	add	r5, r6
    e84e:	4428      	add	r0, r5
    e850:	880d      	ldrh	r5, [r1, #0]
    e852:	b2a4      	uxth	r4, r4
    e854:	1cc0      	adds	r0, r0, #3
    e856:	42a5      	cmp	r5, r4
    e858:	d900      	bls.n	e85c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    e85a:	800c      	strh	r4, [r1, #0]
    e85c:	899c      	ldrh	r4, [r3, #12]
    e85e:	b124      	cbz	r4, e86a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    e860:	2400      	movs	r4, #0
    e862:	7014      	strb	r4, [r2, #0]
    e864:	8809      	ldrh	r1, [r1, #0]
    e866:	8219      	strh	r1, [r3, #16]
    e868:	bd70      	pop	{r4, r5, r6, pc}
    e86a:	2401      	movs	r4, #1
    e86c:	e7f9      	b.n	e862 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000e86e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    e86e:	b508      	push	{r3, lr}
    e870:	8a81      	ldrh	r1, [r0, #20]
    e872:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    e876:	3aff      	subs	r2, #255	; 0xff
    e878:	d008      	beq.n	e88c <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    e87a:	7d82      	ldrb	r2, [r0, #22]
    e87c:	f88d 2000 	strb.w	r2, [sp]
    e880:	9a00      	ldr	r2, [sp, #0]
    e882:	9200      	str	r2, [sp, #0]
    e884:	f89d 2000 	ldrb.w	r2, [sp]
    e888:	b952      	cbnz	r2, e8a0 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    e88a:	e004      	b.n	e896 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    e88c:	f240 318e 	movw	r1, #910	; 0x38e
    e890:	2014      	movs	r0, #20
    e892:	f7f6 fe9d 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e896:	8880      	ldrh	r0, [r0, #4]
    e898:	4281      	cmp	r1, r0
    e89a:	d101      	bne.n	e8a0 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    e89c:	2000      	movs	r0, #0
    e89e:	bd08      	pop	{r3, pc}
    e8a0:	2001      	movs	r0, #1
    e8a2:	bd08      	pop	{r3, pc}

0000e8a4 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    e8a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e8a8:	8281      	strh	r1, [r0, #20]
    e8aa:	2100      	movs	r1, #0
    e8ac:	7581      	strb	r1, [r0, #22]
    e8ae:	4770      	bx	lr

0000e8b0 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    e8b0:	b510      	push	{r4, lr}
    e8b2:	8a81      	ldrh	r1, [r0, #20]
    e8b4:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    e8b8:	3aff      	subs	r2, #255	; 0xff
    e8ba:	d004      	beq.n	e8c6 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    e8bc:	f240 316a 	movw	r1, #874	; 0x36a
    e8c0:	2014      	movs	r0, #20
    e8c2:	f7f6 fe85 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8c6:	88c1      	ldrh	r1, [r0, #6]
    e8c8:	8281      	strh	r1, [r0, #20]
    e8ca:	89c1      	ldrh	r1, [r0, #14]
    e8cc:	b109      	cbz	r1, e8d2 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    e8ce:	21ff      	movs	r1, #255	; 0xff
    e8d0:	e000      	b.n	e8d4 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    e8d2:	2100      	movs	r1, #0
    e8d4:	7581      	strb	r1, [r0, #22]
    e8d6:	bd10      	pop	{r4, pc}

0000e8d8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    e8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e8dc:	461d      	mov	r5, r3
    e8de:	4616      	mov	r6, r2
    e8e0:	9f06      	ldr	r7, [sp, #24]
    e8e2:	460b      	mov	r3, r1
    e8e4:	4604      	mov	r4, r0
    e8e6:	463a      	mov	r2, r7
    e8e8:	4629      	mov	r1, r5
    e8ea:	4630      	mov	r0, r6
    e8ec:	f000 f84f 	bl	e98e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e8f0:	4283      	cmp	r3, r0
    e8f2:	d201      	bcs.n	e8f8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    e8f4:	21a8      	movs	r1, #168	; 0xa8
    e8f6:	e018      	b.n	e92a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    e8f8:	1ce0      	adds	r0, r4, #3
    e8fa:	f020 0103 	bic.w	r1, r0, #3
    e8fe:	4620      	mov	r0, r4
    e900:	42a1      	cmp	r1, r4
    e902:	d001      	beq.n	e908 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    e904:	21a9      	movs	r1, #169	; 0xa9
    e906:	e010      	b.n	e92a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    e908:	2224      	movs	r2, #36	; 0x24
    e90a:	2100      	movs	r1, #0
    e90c:	f7ff f93c 	bl	db88 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e910:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e914:	82a0      	strh	r0, [r4, #20]
    e916:	19a8      	adds	r0, r5, r6
    e918:	1d80      	adds	r0, r0, #6
    e91a:	4378      	muls	r0, r7
    e91c:	b280      	uxth	r0, r0
    e91e:	7725      	strb	r5, [r4, #28]
    e920:	8060      	strh	r0, [r4, #2]
    e922:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    e926:	d903      	bls.n	e930 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    e928:	21af      	movs	r1, #175	; 0xaf
    e92a:	2014      	movs	r0, #20
    e92c:	f7f6 fe50 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e930:	8026      	strh	r6, [r4, #0]
    e932:	2000      	movs	r0, #0
    e934:	7760      	strb	r0, [r4, #29]
    e936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e93a <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    e93a:	6181      	str	r1, [r0, #24]
    e93c:	6188      	str	r0, [r1, #24]
    e93e:	4770      	bx	lr

0000e940 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    e940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e944:	460b      	mov	r3, r1
    e946:	4604      	mov	r4, r0
    e948:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e94c:	8905      	ldrh	r5, [r0, #8]
    e94e:	8946      	ldrh	r6, [r0, #10]
    e950:	8880      	ldrh	r0, [r0, #4]
    e952:	f3c5 070e 	ubfx	r7, r5, #0, #15
    e956:	4439      	add	r1, r7
    e958:	460f      	mov	r7, r1
    e95a:	4285      	cmp	r5, r0
    e95c:	d102      	bne.n	e964 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    e95e:	2000      	movs	r0, #0
    e960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e964:	b10a      	cbz	r2, e96a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    e966:	1cc8      	adds	r0, r1, #3
    e968:	6010      	str	r0, [r2, #0]
    e96a:	b123      	cbz	r3, e976 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    e96c:	7f22      	ldrb	r2, [r4, #28]
    e96e:	1cf9      	adds	r1, r7, #3
    e970:	4618      	mov	r0, r3
    e972:	f7ff f88f 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e976:	883f      	ldrh	r7, [r7, #0]
    e978:	f104 0108 	add.w	r1, r4, #8
    e97c:	4620      	mov	r0, r4
    e97e:	f7ff fdaf 	bl	e4e0 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e982:	42b5      	cmp	r5, r6
    e984:	d101      	bne.n	e98a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    e986:	8920      	ldrh	r0, [r4, #8]
    e988:	8160      	strh	r0, [r4, #10]
    e98a:	4638      	mov	r0, r7
    e98c:	e7e8      	b.n	e960 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000e98e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    e98e:	4401      	add	r1, r0
    e990:	1d89      	adds	r1, r1, #6
    e992:	4351      	muls	r1, r2
    e994:	b28a      	uxth	r2, r1
    e996:	2100      	movs	r1, #0
    e998:	2845      	cmp	r0, #69	; 0x45
    e99a:	d202      	bcs.n	e9a2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    e99c:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    e9a0:	b281      	uxth	r1, r0
    e9a2:	3224      	adds	r2, #36	; 0x24
    e9a4:	1850      	adds	r0, r2, r1
    e9a6:	b280      	uxth	r0, r0
    e9a8:	4770      	bx	lr

0000e9aa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    e9aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e9ae:	4688      	mov	r8, r1
    e9b0:	88c1      	ldrh	r1, [r0, #6]
    e9b2:	4604      	mov	r4, r0
    e9b4:	8900      	ldrh	r0, [r0, #8]
    e9b6:	f3c1 060e 	ubfx	r6, r1, #0, #15
    e9ba:	f104 0524 	add.w	r5, r4, #36	; 0x24
    e9be:	f3c0 070e 	ubfx	r7, r0, #0, #15
    e9c2:	eb05 0906 	add.w	r9, r5, r6
    e9c6:	f7ff fdac 	bl	e522 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e9ca:	2200      	movs	r2, #0
    e9cc:	b998      	cbnz	r0, e9f6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    e9ce:	8820      	ldrh	r0, [r4, #0]
    e9d0:	2845      	cmp	r0, #69	; 0x45
    e9d2:	d200      	bcs.n	e9d6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    e9d4:	2045      	movs	r0, #69	; 0x45
    e9d6:	42b7      	cmp	r7, r6
    e9d8:	d906      	bls.n	e9e8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e9da:	7f23      	ldrb	r3, [r4, #28]
    e9dc:	1bb9      	subs	r1, r7, r6
    e9de:	1ac9      	subs	r1, r1, r3
    e9e0:	1f89      	subs	r1, r1, #6
    e9e2:	4281      	cmp	r1, r0
    e9e4:	da00      	bge.n	e9e8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e9e6:	4608      	mov	r0, r1
    e9e8:	89e1      	ldrh	r1, [r4, #14]
    e9ea:	b111      	cbz	r1, e9f2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    e9ec:	f8b9 3000 	ldrh.w	r3, [r9]
    e9f0:	1ac0      	subs	r0, r0, r3
    e9f2:	4540      	cmp	r0, r8
    e9f4:	da03      	bge.n	e9fe <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    e9f6:	8262      	strh	r2, [r4, #18]
    e9f8:	2000      	movs	r0, #0
    e9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e9fe:	7f20      	ldrb	r0, [r4, #28]
    ea00:	4429      	add	r1, r5
    ea02:	1d80      	adds	r0, r0, #6
    ea04:	4430      	add	r0, r6
    ea06:	4408      	add	r0, r1
    ea08:	f8a4 8012 	strh.w	r8, [r4, #18]
    ea0c:	1ec0      	subs	r0, r0, #3
    ea0e:	e7f4      	b.n	e9fa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000ea10 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    ea10:	2100      	movs	r1, #0
    ea12:	81c1      	strh	r1, [r0, #14]
    ea14:	8241      	strh	r1, [r0, #18]
    ea16:	7581      	strb	r1, [r0, #22]
    ea18:	4770      	bx	lr

0000ea1a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    ea1a:	b570      	push	{r4, r5, r6, lr}
    ea1c:	2300      	movs	r3, #0
    ea1e:	f1a1 0208 	sub.w	r2, r1, #8
    ea22:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    ea26:	42a2      	cmp	r2, r4
    ea28:	d304      	bcc.n	ea34 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    ea2a:	f240 11cd 	movw	r1, #461	; 0x1cd
    ea2e:	2015      	movs	r0, #21
    ea30:	f7f6 fdce 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea34:	6802      	ldr	r2, [r0, #0]
    ea36:	b90a      	cbnz	r2, ea3c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    ea38:	e01e      	b.n	ea78 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    ea3a:	4610      	mov	r0, r2
    ea3c:	6802      	ldr	r2, [r0, #0]
    ea3e:	8893      	ldrh	r3, [r2, #4]
    ea40:	428b      	cmp	r3, r1
    ea42:	d002      	beq.n	ea4a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    ea44:	6813      	ldr	r3, [r2, #0]
    ea46:	2b00      	cmp	r3, #0
    ea48:	d1f7      	bne.n	ea3a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    ea4a:	8894      	ldrh	r4, [r2, #4]
    ea4c:	4613      	mov	r3, r2
    ea4e:	428c      	cmp	r4, r1
    ea50:	d101      	bne.n	ea56 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    ea52:	6811      	ldr	r1, [r2, #0]
    ea54:	e00d      	b.n	ea72 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    ea56:	f101 0508 	add.w	r5, r1, #8
    ea5a:	b2ae      	uxth	r6, r5
    ea5c:	2500      	movs	r5, #0
    ea5e:	42b4      	cmp	r4, r6
    ea60:	d309      	bcc.n	ea76 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    ea62:	1a64      	subs	r4, r4, r1
    ea64:	4411      	add	r1, r2
    ea66:	600d      	str	r5, [r1, #0]
    ea68:	808c      	strh	r4, [r1, #4]
    ea6a:	6802      	ldr	r2, [r0, #0]
    ea6c:	6812      	ldr	r2, [r2, #0]
    ea6e:	6002      	str	r2, [r0, #0]
    ea70:	600a      	str	r2, [r1, #0]
    ea72:	6001      	str	r1, [r0, #0]
    ea74:	e000      	b.n	ea78 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    ea76:	2300      	movs	r3, #0
    ea78:	4618      	mov	r0, r3
    ea7a:	bd70      	pop	{r4, r5, r6, pc}

0000ea7c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    ea7c:	b510      	push	{r4, lr}
    ea7e:	000c      	movs	r4, r1
    ea80:	d004      	beq.n	ea8c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    ea82:	2c08      	cmp	r4, #8
    ea84:	d207      	bcs.n	ea96 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    ea86:	f240 1195 	movw	r1, #405	; 0x195
    ea8a:	e00a      	b.n	eaa2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    ea8c:	b108      	cbz	r0, ea92 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    ea8e:	2100      	movs	r1, #0
    ea90:	6001      	str	r1, [r0, #0]
    ea92:	2000      	movs	r0, #0
    ea94:	bd10      	pop	{r4, pc}
    ea96:	b158      	cbz	r0, eab0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    ea98:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    ea9c:	d304      	bcc.n	eaa8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    ea9e:	f240 11a7 	movw	r1, #423	; 0x1a7
    eaa2:	2015      	movs	r0, #21
    eaa4:	f7f6 fd94 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eaa8:	b2a1      	uxth	r1, r4
    eaaa:	6800      	ldr	r0, [r0, #0]
    eaac:	f000 f814 	bl	ead8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    eab0:	1d20      	adds	r0, r4, #4
    eab2:	bd10      	pop	{r4, pc}

0000eab4 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    eab4:	2100      	movs	r1, #0
    eab6:	6802      	ldr	r2, [r0, #0]
    eab8:	e003      	b.n	eac2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    eaba:	8893      	ldrh	r3, [r2, #4]
    eabc:	6812      	ldr	r2, [r2, #0]
    eabe:	4419      	add	r1, r3
    eac0:	b289      	uxth	r1, r1
    eac2:	2a00      	cmp	r2, #0
    eac4:	d1f9      	bne.n	eaba <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    eac6:	f000 b807 	b.w	ead8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000eaca <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    eaca:	2300      	movs	r3, #0
    eacc:	600b      	str	r3, [r1, #0]
    eace:	808a      	strh	r2, [r1, #4]
    ead0:	6802      	ldr	r2, [r0, #0]
    ead2:	600a      	str	r2, [r1, #0]
    ead4:	6001      	str	r1, [r0, #0]
    ead6:	4770      	bx	lr
    ead8:	2300      	movs	r3, #0
    eada:	6043      	str	r3, [r0, #4]
    eadc:	1d02      	adds	r2, r0, #4
    eade:	8101      	strh	r1, [r0, #8]
    eae0:	6002      	str	r2, [r0, #0]
    eae2:	4770      	bx	lr

0000eae4 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    eae4:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    eae8:	3bff      	subs	r3, #255	; 0xff
    eaea:	d001      	beq.n	eaf0 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    eaec:	2902      	cmp	r1, #2
    eaee:	d301      	bcc.n	eaf4 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    eaf0:	2000      	movs	r0, #0
    eaf2:	4770      	bx	lr
    eaf4:	f7f7 b832 	b.w	5b5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000eaf8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    eaf8:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    eafc:	3aff      	subs	r2, #255	; 0xff
    eafe:	d001      	beq.n	eb04 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    eb00:	2902      	cmp	r1, #2
    eb02:	d301      	bcc.n	eb08 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    eb04:	2000      	movs	r0, #0
    eb06:	4770      	bx	lr
    eb08:	f7f7 b862 	b.w	5bd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000eb0c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    eb0c:	b570      	push	{r4, r5, r6, lr}
    eb0e:	4605      	mov	r5, r0
    eb10:	460c      	mov	r4, r1
    eb12:	4608      	mov	r0, r1
    eb14:	f000 f9a9 	bl	ee6a <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    eb18:	b108      	cbz	r0, eb1e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    eb1a:	2010      	movs	r0, #16
    eb1c:	bd70      	pop	{r4, r5, r6, pc}
    eb1e:	2d02      	cmp	r5, #2
    eb20:	d301      	bcc.n	eb26 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    eb22:	2007      	movs	r0, #7
    eb24:	bd70      	pop	{r4, r5, r6, pc}
    eb26:	7025      	strb	r5, [r4, #0]
    eb28:	2000      	movs	r0, #0
    eb2a:	8060      	strh	r0, [r4, #2]
    eb2c:	bd70      	pop	{r4, r5, r6, pc}
    eb2e:	b510      	push	{r4, lr}
    eb30:	4604      	mov	r4, r0
    eb32:	f7f7 f899 	bl	5c68 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    eb36:	42a0      	cmp	r0, r4
    eb38:	d901      	bls.n	eb3e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    eb3a:	2001      	movs	r0, #1
    eb3c:	bd10      	pop	{r4, pc}
    eb3e:	2000      	movs	r0, #0
    eb40:	bd10      	pop	{r4, pc}
    eb42:	4770      	bx	lr

0000eb44 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    eb44:	b570      	push	{r4, r5, r6, lr}
    eb46:	460e      	mov	r6, r1
    eb48:	461d      	mov	r5, r3
    eb4a:	4611      	mov	r1, r2
    eb4c:	f000 f813 	bl	eb76 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    eb50:	4604      	mov	r4, r0
    eb52:	4629      	mov	r1, r5
    eb54:	4630      	mov	r0, r6
    eb56:	f000 f804 	bl	eb62 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    eb5a:	4420      	add	r0, r4
    eb5c:	1d00      	adds	r0, r0, #4
    eb5e:	b280      	uxth	r0, r0
    eb60:	bd70      	pop	{r4, r5, r6, pc}
    eb62:	b510      	push	{r4, lr}
    eb64:	460a      	mov	r2, r1
    eb66:	2101      	movs	r1, #1
    eb68:	f7ff ff11 	bl	e98e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    eb6c:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    eb70:	1cc0      	adds	r0, r0, #3
    eb72:	4008      	ands	r0, r1
    eb74:	bd10      	pop	{r4, pc}
    eb76:	b510      	push	{r4, lr}
    eb78:	460a      	mov	r2, r1
    eb7a:	210a      	movs	r1, #10
    eb7c:	f7ff ff07 	bl	e98e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    eb80:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    eb84:	1cc0      	adds	r0, r0, #3
    eb86:	4008      	ands	r0, r1
    eb88:	bd10      	pop	{r4, pc}
    eb8a:	b109      	cbz	r1, eb90 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    eb8c:	2100      	movs	r1, #0
    eb8e:	e000      	b.n	eb92 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    eb90:	2102      	movs	r1, #2
    eb92:	1843      	adds	r3, r0, r1
    eb94:	7d1a      	ldrb	r2, [r3, #20]
    eb96:	2a02      	cmp	r2, #2
    eb98:	d008      	beq.n	ebac <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    eb9a:	7d5b      	ldrb	r3, [r3, #21]
    eb9c:	2b02      	cmp	r3, #2
    eb9e:	d009      	beq.n	ebb4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    eba0:	2a03      	cmp	r2, #3
    eba2:	d003      	beq.n	ebac <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    eba4:	2b03      	cmp	r3, #3
    eba6:	d005      	beq.n	ebb4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    eba8:	2000      	movs	r0, #0
    ebaa:	4770      	bx	lr
    ebac:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    ebb0:	8b00      	ldrh	r0, [r0, #24]
    ebb2:	4770      	bx	lr
    ebb4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    ebb8:	8b40      	ldrh	r0, [r0, #26]
    ebba:	4770      	bx	lr
    ebbc:	b109      	cbz	r1, ebc2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    ebbe:	2100      	movs	r1, #0
    ebc0:	e000      	b.n	ebc4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    ebc2:	2102      	movs	r1, #2
    ebc4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    ebc8:	8b01      	ldrh	r1, [r0, #24]
    ebca:	b911      	cbnz	r1, ebd2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    ebcc:	8b40      	ldrh	r0, [r0, #26]
    ebce:	2800      	cmp	r0, #0
    ebd0:	d000      	beq.n	ebd4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    ebd2:	2001      	movs	r0, #1
    ebd4:	4770      	bx	lr
    ebd6:	b538      	push	{r3, r4, r5, lr}
    ebd8:	7883      	ldrb	r3, [r0, #2]
    ebda:	f88d 3000 	strb.w	r3, [sp]
    ebde:	9b00      	ldr	r3, [sp, #0]
    ebe0:	9300      	str	r3, [sp, #0]
    ebe2:	f89d 3000 	ldrb.w	r3, [sp]
    ebe6:	b95b      	cbnz	r3, ec00 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    ebe8:	2400      	movs	r4, #0
    ebea:	b10a      	cbz	r2, ebf0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    ebec:	2300      	movs	r3, #0
    ebee:	e000      	b.n	ebf2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    ebf0:	2302      	movs	r3, #2
    ebf2:	18c2      	adds	r2, r0, r3
    ebf4:	7d15      	ldrb	r5, [r2, #20]
    ebf6:	2d02      	cmp	r5, #2
    ebf8:	d004      	beq.n	ec04 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    ebfa:	7d52      	ldrb	r2, [r2, #21]
    ebfc:	2a02      	cmp	r2, #2
    ebfe:	d004      	beq.n	ec0a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    ec00:	2000      	movs	r0, #0
    ec02:	bd38      	pop	{r3, r4, r5, pc}
    ec04:	461a      	mov	r2, r3
    ec06:	1c5b      	adds	r3, r3, #1
    ec08:	e000      	b.n	ec0c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    ec0a:	1c5a      	adds	r2, r3, #1
    ec0c:	b179      	cbz	r1, ec2e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    ec0e:	18c5      	adds	r5, r0, r3
    ec10:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    ec14:	752c      	strb	r4, [r5, #20]
    ec16:	831c      	strh	r4, [r3, #24]
    ec18:	2303      	movs	r3, #3
    ec1a:	1884      	adds	r4, r0, r2
    ec1c:	7523      	strb	r3, [r4, #20]
    ec1e:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    ec22:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    ec26:	685b      	ldr	r3, [r3, #4]
    ec28:	600b      	str	r3, [r1, #0]
    ec2a:	8b00      	ldrh	r0, [r0, #24]
    ec2c:	8088      	strh	r0, [r1, #4]
    ec2e:	2001      	movs	r0, #1
    ec30:	bd38      	pop	{r3, r4, r5, pc}
    ec32:	b510      	push	{r4, lr}
    ec34:	b109      	cbz	r1, ec3a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    ec36:	2100      	movs	r1, #0
    ec38:	e000      	b.n	ec3c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    ec3a:	2102      	movs	r1, #2
    ec3c:	1843      	adds	r3, r0, r1
    ec3e:	7d1c      	ldrb	r4, [r3, #20]
    ec40:	4294      	cmp	r4, r2
    ec42:	d103      	bne.n	ec4c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    ec44:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    ec48:	8b00      	ldrh	r0, [r0, #24]
    ec4a:	bd10      	pop	{r4, pc}
    ec4c:	7d5b      	ldrb	r3, [r3, #21]
    ec4e:	4293      	cmp	r3, r2
    ec50:	d103      	bne.n	ec5a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    ec52:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    ec56:	8b40      	ldrh	r0, [r0, #26]
    ec58:	bd10      	pop	{r4, pc}
    ec5a:	2000      	movs	r0, #0
    ec5c:	bd10      	pop	{r4, pc}
    ec5e:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    ec62:	d201      	bcs.n	ec68 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    ec64:	0841      	lsrs	r1, r0, #1
    ec66:	e000      	b.n	ec6a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    ec68:	21ff      	movs	r1, #255	; 0xff
    ec6a:	1a40      	subs	r0, r0, r1
    ec6c:	f240 6172 	movw	r1, #1650	; 0x672
    ec70:	4288      	cmp	r0, r1
    ec72:	db00      	blt.n	ec76 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    ec74:	4608      	mov	r0, r1
    ec76:	b280      	uxth	r0, r0
    ec78:	4770      	bx	lr

0000ec7a <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    ec7a:	2101      	movs	r1, #1
    ec7c:	f7ff bf85 	b.w	eb8a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000ec80 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    ec80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ec84:	4606      	mov	r6, r0
    ec86:	f342 0780 	sbfx	r7, r2, #2, #1
    ec8a:	7848      	ldrb	r0, [r1, #1]
    ec8c:	460c      	mov	r4, r1
    ec8e:	f022 0504 	bic.w	r5, r2, #4
    ec92:	1c7f      	adds	r7, r7, #1
    ec94:	b100      	cbz	r0, ec98 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    ec96:	b90d      	cbnz	r5, ec9c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    ec98:	4328      	orrs	r0, r5
    ec9a:	d104      	bne.n	eca6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    ec9c:	b145      	cbz	r5, ecb0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    ec9e:	2100      	movs	r1, #0
    eca0:	4620      	mov	r0, r4
    eca2:	f7f7 f8eb 	bl	5e7c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    eca6:	20ff      	movs	r0, #255	; 0xff
    eca8:	70a0      	strb	r0, [r4, #2]
    ecaa:	b11f      	cbz	r7, ecb4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    ecac:	2000      	movs	r0, #0
    ecae:	e002      	b.n	ecb6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    ecb0:	2101      	movs	r1, #1
    ecb2:	e7f5      	b.n	eca0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    ecb4:	2002      	movs	r0, #2
    ecb6:	1821      	adds	r1, r4, r0
    ecb8:	7d09      	ldrb	r1, [r1, #20]
    ecba:	2903      	cmp	r1, #3
    ecbc:	d102      	bne.n	ecc4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    ecbe:	2d02      	cmp	r5, #2
    ecc0:	d000      	beq.n	ecc4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    ecc2:	1c40      	adds	r0, r0, #1
    ecc4:	1822      	adds	r2, r4, r0
    ecc6:	2101      	movs	r1, #1
    ecc8:	7511      	strb	r1, [r2, #20]
    ecca:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    ecce:	2200      	movs	r2, #0
    ecd0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    ecd4:	830a      	strh	r2, [r1, #24]
    ecd6:	6840      	ldr	r0, [r0, #4]
    ecd8:	70a2      	strb	r2, [r4, #2]
    ecda:	4631      	mov	r1, r6
    ecdc:	f362 010f 	bfi	r1, r2, #0, #16
    ece0:	e9c6 0100 	strd	r0, r1, [r6]
    ece4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ece8 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    ece8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ecec:	461e      	mov	r6, r3
    ecee:	4613      	mov	r3, r2
    ecf0:	4604      	mov	r4, r0
    ecf2:	b109      	cbz	r1, ecf8 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    ecf4:	2000      	movs	r0, #0
    ecf6:	e000      	b.n	ecfa <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    ecf8:	2002      	movs	r0, #2
    ecfa:	21ff      	movs	r1, #255	; 0xff
    ecfc:	70a1      	strb	r1, [r4, #2]
    ecfe:	1821      	adds	r1, r4, r0
    ed00:	7d0a      	ldrb	r2, [r1, #20]
    ed02:	2a01      	cmp	r2, #1
    ed04:	d003      	beq.n	ed0e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    ed06:	7d49      	ldrb	r1, [r1, #21]
    ed08:	2901      	cmp	r1, #1
    ed0a:	d10c      	bne.n	ed26 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    ed0c:	1c40      	adds	r0, r0, #1
    ed0e:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    ed12:	2700      	movs	r7, #0
    ed14:	8b29      	ldrh	r1, [r5, #24]
    ed16:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    ed1a:	198a      	adds	r2, r1, r6
    ed1c:	4562      	cmp	r2, ip
    ed1e:	d905      	bls.n	ed2c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    ed20:	4420      	add	r0, r4
    ed22:	832f      	strh	r7, [r5, #24]
    ed24:	7507      	strb	r7, [r0, #20]
    ed26:	2000      	movs	r0, #0
    ed28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed2c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    ed30:	4632      	mov	r2, r6
    ed32:	6840      	ldr	r0, [r0, #4]
    ed34:	4408      	add	r0, r1
    ed36:	4619      	mov	r1, r3
    ed38:	f7fe feac 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ed3c:	8b28      	ldrh	r0, [r5, #24]
    ed3e:	4430      	add	r0, r6
    ed40:	8328      	strh	r0, [r5, #24]
    ed42:	70a7      	strb	r7, [r4, #2]
    ed44:	2001      	movs	r0, #1
    ed46:	e7ef      	b.n	ed28 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000ed48 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    ed48:	2202      	movs	r2, #2
    ed4a:	2100      	movs	r1, #0
    ed4c:	f7ff bf71 	b.w	ec32 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000ed50 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    ed50:	b510      	push	{r4, lr}
    ed52:	2101      	movs	r1, #1
    ed54:	f7ff ff32 	bl	ebbc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    ed58:	2800      	cmp	r0, #0
    ed5a:	d000      	beq.n	ed5e <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    ed5c:	2001      	movs	r0, #1
    ed5e:	bd10      	pop	{r4, pc}

0000ed60 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    ed60:	2201      	movs	r2, #1
    ed62:	f7ff bf38 	b.w	ebd6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000ed66 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    ed66:	2200      	movs	r2, #0
    ed68:	f7ff bf35 	b.w	ebd6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000ed6c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    ed6c:	b570      	push	{r4, r5, r6, lr}
    ed6e:	b109      	cbz	r1, ed74 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    ed70:	2300      	movs	r3, #0
    ed72:	e000      	b.n	ed76 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    ed74:	2302      	movs	r3, #2
    ed76:	21ff      	movs	r1, #255	; 0xff
    ed78:	7081      	strb	r1, [r0, #2]
    ed7a:	18c1      	adds	r1, r0, r3
    ed7c:	2402      	movs	r4, #2
    ed7e:	7d0d      	ldrb	r5, [r1, #20]
    ed80:	2d01      	cmp	r5, #1
    ed82:	d007      	beq.n	ed94 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    ed84:	7d4d      	ldrb	r5, [r1, #21]
    ed86:	2d01      	cmp	r5, #1
    ed88:	d009      	beq.n	ed9e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    ed8a:	f44f 718b 	mov.w	r1, #278	; 0x116
    ed8e:	2009      	movs	r0, #9
    ed90:	f7f6 fc1e 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed94:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    ed98:	831a      	strh	r2, [r3, #24]
    ed9a:	750c      	strb	r4, [r1, #20]
    ed9c:	e003      	b.n	eda6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    ed9e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    eda2:	835a      	strh	r2, [r3, #26]
    eda4:	754c      	strb	r4, [r1, #21]
    eda6:	2100      	movs	r1, #0
    eda8:	7081      	strb	r1, [r0, #2]
    edaa:	bd70      	pop	{r4, r5, r6, pc}

0000edac <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    edac:	2101      	movs	r1, #1
    edae:	7001      	strb	r1, [r0, #0]
    edb0:	4770      	bx	lr

0000edb2 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    edb2:	2201      	movs	r2, #1
    edb4:	4611      	mov	r1, r2
    edb6:	f7ff bf3c 	b.w	ec32 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000edba <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    edba:	2201      	movs	r2, #1
    edbc:	2100      	movs	r1, #0
    edbe:	f7ff bf38 	b.w	ec32 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000edc2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    edc2:	2100      	movs	r1, #0
    edc4:	f7ff bee1 	b.w	eb8a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    edc8:	2800      	cmp	r0, #0
    edca:	db09      	blt.n	ede0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    edcc:	f000 021f 	and.w	r2, r0, #31
    edd0:	2101      	movs	r1, #1
    edd2:	4091      	lsls	r1, r2
    edd4:	0940      	lsrs	r0, r0, #5
    edd6:	0080      	lsls	r0, r0, #2
    edd8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    eddc:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ede0:	4770      	bx	lr
    ede2:	2800      	cmp	r0, #0
    ede4:	db0d      	blt.n	ee02 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    ede6:	f000 021f 	and.w	r2, r0, #31
    edea:	2101      	movs	r1, #1
    edec:	4091      	lsls	r1, r2
    edee:	0940      	lsrs	r0, r0, #5
    edf0:	0080      	lsls	r0, r0, #2
    edf2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    edf6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    edfa:	f3bf 8f4f 	dsb	sy
    edfe:	f3bf 8f6f 	isb	sy
    ee02:	4770      	bx	lr
    ee04:	b510      	push	{r4, lr}
    ee06:	200e      	movs	r0, #14
    ee08:	f7ff ffeb 	bl	ede2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    ee0c:	200e      	movs	r0, #14
    ee0e:	f7ff ffdb 	bl	edc8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    ee12:	200f      	movs	r0, #15
    ee14:	f7ff ffe5 	bl	ede2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    ee18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee1c:	200f      	movs	r0, #15
    ee1e:	f7ff bfd3 	b.w	edc8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    ee22:	2800      	cmp	r0, #0
    ee24:	db09      	blt.n	ee3a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    ee26:	f000 021f 	and.w	r2, r0, #31
    ee2a:	2101      	movs	r1, #1
    ee2c:	4091      	lsls	r1, r2
    ee2e:	0940      	lsrs	r0, r0, #5
    ee30:	0080      	lsls	r0, r0, #2
    ee32:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ee36:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ee3a:	4770      	bx	lr
    ee3c:	5840      	ldr	r0, [r0, r1]
    ee3e:	2800      	cmp	r0, #0
    ee40:	d000      	beq.n	ee44 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    ee42:	2001      	movs	r0, #1
    ee44:	4770      	bx	lr

0000ee46 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    ee46:	b510      	push	{r4, lr}
    ee48:	4604      	mov	r4, r0
    ee4a:	4620      	mov	r0, r4
    ee4c:	f7f7 f916 	bl	607c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
    ee50:	2811      	cmp	r0, #17
    ee52:	d0fa      	beq.n	ee4a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    ee54:	bd10      	pop	{r4, pc}

0000ee56 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    ee56:	b510      	push	{r4, lr}
    ee58:	f7ff fff5 	bl	ee46 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    ee5c:	2800      	cmp	r0, #0
    ee5e:	d003      	beq.n	ee68 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    ee60:	21a0      	movs	r1, #160	; 0xa0
    ee62:	201d      	movs	r0, #29
    ee64:	f7f6 fbb4 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee68:	bd10      	pop	{r4, pc}

0000ee6a <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    ee6a:	b108      	cbz	r0, ee70 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    ee6c:	2000      	movs	r0, #0
    ee6e:	4770      	bx	lr
    ee70:	2001      	movs	r0, #1
    ee72:	4770      	bx	lr

0000ee74 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    ee74:	f7f7 ba54 	b.w	6320 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000ee78 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    ee78:	f7f7 ba42 	b.w	6300 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000ee7c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    ee7c:	b510      	push	{r4, lr}
    ee7e:	4050      	eors	r0, r2
    ee80:	780a      	ldrb	r2, [r1, #0]
    ee82:	781c      	ldrb	r4, [r3, #0]
    ee84:	4062      	eors	r2, r4
    ee86:	4410      	add	r0, r2
    ee88:	784a      	ldrb	r2, [r1, #1]
    ee8a:	785c      	ldrb	r4, [r3, #1]
    ee8c:	4062      	eors	r2, r4
    ee8e:	4410      	add	r0, r2
    ee90:	788a      	ldrb	r2, [r1, #2]
    ee92:	789c      	ldrb	r4, [r3, #2]
    ee94:	4062      	eors	r2, r4
    ee96:	4410      	add	r0, r2
    ee98:	78ca      	ldrb	r2, [r1, #3]
    ee9a:	78dc      	ldrb	r4, [r3, #3]
    ee9c:	4062      	eors	r2, r4
    ee9e:	4410      	add	r0, r2
    eea0:	790a      	ldrb	r2, [r1, #4]
    eea2:	791c      	ldrb	r4, [r3, #4]
    eea4:	7949      	ldrb	r1, [r1, #5]
    eea6:	4062      	eors	r2, r4
    eea8:	4410      	add	r0, r2
    eeaa:	795a      	ldrb	r2, [r3, #5]
    eeac:	4051      	eors	r1, r2
    eeae:	42c1      	cmn	r1, r0
    eeb0:	d101      	bne.n	eeb6 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    eeb2:	2001      	movs	r0, #1
    eeb4:	bd10      	pop	{r4, pc}
    eeb6:	2000      	movs	r0, #0
    eeb8:	bd10      	pop	{r4, pc}

0000eeba <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    eeba:	b510      	push	{r4, lr}
    eebc:	2900      	cmp	r1, #0
    eebe:	4604      	mov	r4, r0
    eec0:	f04f 0106 	mov.w	r1, #6
    eec4:	d002      	beq.n	eecc <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    eec6:	f7f6 fc21 	bl	570c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    eeca:	e001      	b.n	eed0 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    eecc:	f7f6 fc2c 	bl	5728 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    eed0:	7960      	ldrb	r0, [r4, #5]
    eed2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    eed6:	7160      	strb	r0, [r4, #5]
    eed8:	bd10      	pop	{r4, pc}

0000eeda <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    eeda:	4770      	bx	lr

0000eedc <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    eedc:	b530      	push	{r4, r5, lr}
    eede:	460c      	mov	r4, r1
    eee0:	4605      	mov	r5, r0
    eee2:	b08d      	sub	sp, #52	; 0x34
    eee4:	f04f 0103 	mov.w	r1, #3
    eee8:	f104 0003 	add.w	r0, r4, #3
    eeec:	b112      	cbz	r2, eef4 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    eeee:	f7f6 fc0d 	bl	570c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    eef2:	e001      	b.n	eef8 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    eef4:	f7f6 fc18 	bl	5728 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    eef8:	7960      	ldrb	r0, [r4, #5]
    eefa:	220d      	movs	r2, #13
    eefc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    ef00:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    ef04:	7160      	strb	r0, [r4, #5]
    ef06:	2100      	movs	r1, #0
    ef08:	a804      	add	r0, sp, #16
    ef0a:	f7fe fe3d 	bl	db88 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ef0e:	78e0      	ldrb	r0, [r4, #3]
    ef10:	f88d 001f 	strb.w	r0, [sp, #31]
    ef14:	7920      	ldrb	r0, [r4, #4]
    ef16:	f88d 001e 	strb.w	r0, [sp, #30]
    ef1a:	7960      	ldrb	r0, [r4, #5]
    ef1c:	f88d 001d 	strb.w	r0, [sp, #29]
    ef20:	2210      	movs	r2, #16
    ef22:	4629      	mov	r1, r5
    ef24:	4668      	mov	r0, sp
    ef26:	f7fe fdb5 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ef2a:	4668      	mov	r0, sp
    ef2c:	f7ff ff93 	bl	ee56 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    ef30:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    ef34:	7020      	strb	r0, [r4, #0]
    ef36:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    ef3a:	7060      	strb	r0, [r4, #1]
    ef3c:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    ef40:	70a0      	strb	r0, [r4, #2]
    ef42:	b00d      	add	sp, #52	; 0x34
    ef44:	bd30      	pop	{r4, r5, pc}

0000ef46 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    ef46:	f7f7 bdc7 	b.w	6ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    ef4a:	07c1      	lsls	r1, r0, #31
    ef4c:	d001      	beq.n	ef52 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    ef4e:	2001      	movs	r0, #1
    ef50:	4770      	bx	lr
    ef52:	0780      	lsls	r0, r0, #30
    ef54:	d501      	bpl.n	ef5a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    ef56:	2002      	movs	r0, #2
    ef58:	4770      	bx	lr
    ef5a:	2000      	movs	r0, #0
    ef5c:	4770      	bx	lr
    ef5e:	b510      	push	{r4, lr}
    ef60:	2801      	cmp	r0, #1
    ef62:	d008      	beq.n	ef76 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    ef64:	2802      	cmp	r0, #2
    ef66:	d004      	beq.n	ef72 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    ef68:	f240 31f3 	movw	r1, #1011	; 0x3f3
    ef6c:	2006      	movs	r0, #6
    ef6e:	f7f6 fb2f 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef72:	2001      	movs	r0, #1
    ef74:	bd10      	pop	{r4, pc}
    ef76:	2000      	movs	r0, #0
    ef78:	bd10      	pop	{r4, pc}
    ef7a:	2900      	cmp	r1, #0
    ef7c:	d004      	beq.n	ef88 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    ef7e:	2801      	cmp	r0, #1
    ef80:	d003      	beq.n	ef8a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    ef82:	2901      	cmp	r1, #1
    ef84:	d001      	beq.n	ef8a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    ef86:	2002      	movs	r0, #2
    ef88:	4770      	bx	lr
    ef8a:	2001      	movs	r0, #1
    ef8c:	4770      	bx	lr
    ef8e:	f7ff bc4b 	b.w	e828 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000ef92 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    ef92:	2101      	movs	r1, #1
    ef94:	f7f8 b930 	b.w	71f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000ef98 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    ef98:	b510      	push	{r4, lr}
    ef9a:	f002 fcb7 	bl	1190c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    ef9e:	b118      	cbz	r0, efa8 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    efa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    efa4:	f7fc bee8 	b.w	bd78 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    efa8:	20ff      	movs	r0, #255	; 0xff
    efaa:	bd10      	pop	{r4, pc}

0000efac <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    efac:	b510      	push	{r4, lr}
    efae:	f7f8 f96b 	bl	7288 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    efb2:	2810      	cmp	r0, #16
    efb4:	d003      	beq.n	efbe <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    efb6:	f7f8 f937 	bl	7228 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    efba:	2810      	cmp	r0, #16
    efbc:	d100      	bne.n	efc0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    efbe:	2008      	movs	r0, #8
    efc0:	bd10      	pop	{r4, pc}

0000efc2 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    efc2:	b510      	push	{r4, lr}
    efc4:	f7f8 f960 	bl	7288 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    efc8:	2810      	cmp	r0, #16
    efca:	d007      	beq.n	efdc <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    efcc:	f7f8 f92c 	bl	7228 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    efd0:	2810      	cmp	r0, #16
    efd2:	d003      	beq.n	efdc <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    efd4:	f7f8 f9b6 	bl	7344 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    efd8:	2001      	movs	r0, #1
    efda:	bd10      	pop	{r4, pc}
    efdc:	2000      	movs	r0, #0
    efde:	bd10      	pop	{r4, pc}

0000efe0 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    efe0:	b510      	push	{r4, lr}
    efe2:	f7f8 f951 	bl	7288 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    efe6:	2810      	cmp	r0, #16
    efe8:	d003      	beq.n	eff2 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    efea:	f7f8 f9f3 	bl	73d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x250>
    efee:	2001      	movs	r0, #1
    eff0:	bd10      	pop	{r4, pc}
    eff2:	2000      	movs	r0, #0
    eff4:	bd10      	pop	{r4, pc}

0000eff6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    eff6:	b570      	push	{r4, r5, r6, lr}
    eff8:	460e      	mov	r6, r1
    effa:	b08c      	sub	sp, #48	; 0x30
    effc:	4614      	mov	r4, r2
    effe:	4601      	mov	r1, r0
    f000:	461d      	mov	r5, r3
    f002:	2210      	movs	r2, #16
    f004:	4668      	mov	r0, sp
    f006:	f000 f928 	bl	f25a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    f00a:	2210      	movs	r2, #16
    f00c:	4631      	mov	r1, r6
    f00e:	a804      	add	r0, sp, #16
    f010:	f000 f923 	bl	f25a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    f014:	4668      	mov	r0, sp
    f016:	f7ff ff1e 	bl	ee56 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    f01a:	a908      	add	r1, sp, #32
    f01c:	f04f 0210 	mov.w	r2, #16
    f020:	4628      	mov	r0, r5
    f022:	b11c      	cbz	r4, f02c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    f024:	f000 f919 	bl	f25a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    f028:	b00c      	add	sp, #48	; 0x30
    f02a:	bd70      	pop	{r4, r5, r6, pc}
    f02c:	f7fe fd32 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f030:	e7fa      	b.n	f028 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000f032 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    f032:	b510      	push	{r4, lr}
    f034:	460c      	mov	r4, r1
    f036:	2100      	movs	r1, #0
    f038:	f7ff fd5e 	bl	eaf8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f03c:	6060      	str	r0, [r4, #4]
    f03e:	b118      	cbz	r0, f048 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    f040:	2001      	movs	r0, #1
    f042:	7020      	strb	r0, [r4, #0]
    f044:	2000      	movs	r0, #0
    f046:	bd10      	pop	{r4, pc}
    f048:	2002      	movs	r0, #2
    f04a:	bd10      	pop	{r4, pc}

0000f04c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    f04c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    f050:	4348      	muls	r0, r1
    f052:	4770      	bx	lr

0000f054 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    f054:	f240 41e2 	movw	r1, #1250	; 0x4e2
    f058:	fbb0 f0f1 	udiv	r0, r0, r1
    f05c:	b280      	uxth	r0, r0
    f05e:	4770      	bx	lr

0000f060 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    f060:	b570      	push	{r4, r5, r6, lr}
    f062:	4604      	mov	r4, r0
    f064:	4290      	cmp	r0, r2
    f066:	d20b      	bcs.n	f080 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    f068:	1b10      	subs	r0, r2, r4
    f06a:	2865      	cmp	r0, #101	; 0x65
    f06c:	d200      	bcs.n	f070 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    f06e:	2065      	movs	r0, #101	; 0x65
    f070:	1825      	adds	r5, r4, r0
    f072:	428d      	cmp	r5, r1
    f074:	d803      	bhi.n	f07e <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    f076:	2103      	movs	r1, #3
    f078:	f7f3 fd24 	bl	2ac4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    f07c:	b108      	cbz	r0, f082 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    f07e:	4620      	mov	r0, r4
    f080:	bd70      	pop	{r4, r5, r6, pc}
    f082:	4628      	mov	r0, r5
    f084:	bd70      	pop	{r4, r5, r6, pc}

0000f086 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    f086:	b510      	push	{r4, lr}
    f088:	f1a2 030f 	sub.w	r3, r2, #15
    f08c:	290c      	cmp	r1, #12
    f08e:	d244      	bcs.n	f11a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    f090:	e8df f001 	tbb	[pc, r1]
    f094:	120d0806 	.word	0x120d0806
    f098:	241c1815 	.word	0x241c1815
    f09c:	312a4127 	.word	0x312a4127
    f0a0:	b3c2      	cbz	r2, f114 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    f0a2:	e03a      	b.n	f11a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    f0a4:	2a07      	cmp	r2, #7
    f0a6:	d03a      	beq.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f0a8:	2a08      	cmp	r2, #8
    f0aa:	d038      	beq.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f0ac:	e035      	b.n	f11a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    f0ae:	2a0c      	cmp	r2, #12
    f0b0:	d035      	beq.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f0b2:	2a0b      	cmp	r2, #11
    f0b4:	d033      	beq.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f0b6:	e030      	b.n	f11a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    f0b8:	2a0d      	cmp	r2, #13
    f0ba:	d030      	beq.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f0bc:	e02d      	b.n	f11a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    f0be:	2b0c      	cmp	r3, #12
    f0c0:	d92d      	bls.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f0c2:	e02a      	b.n	f11a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    f0c4:	3a10      	subs	r2, #16
    f0c6:	2a0b      	cmp	r2, #11
    f0c8:	d929      	bls.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f0ca:	e026      	b.n	f11a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    f0cc:	2b03      	cmp	r3, #3
    f0ce:	d926      	bls.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f0d0:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
    f0d4:	b308      	cbz	r0, f11a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    f0d6:	2a1b      	cmp	r2, #27
    f0d8:	d921      	bls.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f0da:	e01e      	b.n	f11a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    f0dc:	2a04      	cmp	r2, #4
    f0de:	d01e      	beq.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f0e0:	e01b      	b.n	f11a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    f0e2:	2a06      	cmp	r2, #6
    f0e4:	d01b      	beq.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f0e6:	e018      	b.n	f11a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    f0e8:	2a1c      	cmp	r2, #28
    f0ea:	d018      	beq.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f0ec:	2a1d      	cmp	r2, #29
    f0ee:	d016      	beq.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f0f0:	2a1e      	cmp	r2, #30
    f0f2:	d014      	beq.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f0f4:	e011      	b.n	f11a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    f0f6:	2a1f      	cmp	r2, #31
    f0f8:	d011      	beq.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f0fa:	2a20      	cmp	r2, #32
    f0fc:	d00f      	beq.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f0fe:	2a21      	cmp	r2, #33	; 0x21
    f100:	d00d      	beq.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f102:	2a22      	cmp	r2, #34	; 0x22
    f104:	d00b      	beq.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f106:	2a23      	cmp	r2, #35	; 0x23
    f108:	d009      	beq.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f10a:	2a24      	cmp	r2, #36	; 0x24
    f10c:	d007      	beq.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f10e:	2a27      	cmp	r2, #39	; 0x27
    f110:	d005      	beq.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f112:	e002      	b.n	f11a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    f114:	e003      	b.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f116:	2a0e      	cmp	r2, #14
    f118:	d001      	beq.n	f11e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    f11a:	2000      	movs	r0, #0
    f11c:	bd10      	pop	{r4, pc}
    f11e:	2001      	movs	r0, #1
    f120:	bd10      	pop	{r4, pc}

0000f122 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    f122:	280c      	cmp	r0, #12
    f124:	d013      	beq.n	f14e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    f126:	280b      	cmp	r0, #11
    f128:	d011      	beq.n	f14e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    f12a:	280d      	cmp	r0, #13
    f12c:	d00f      	beq.n	f14e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    f12e:	281f      	cmp	r0, #31
    f130:	d00d      	beq.n	f14e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    f132:	2820      	cmp	r0, #32
    f134:	d00b      	beq.n	f14e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    f136:	2821      	cmp	r0, #33	; 0x21
    f138:	d009      	beq.n	f14e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    f13a:	2822      	cmp	r0, #34	; 0x22
    f13c:	d007      	beq.n	f14e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    f13e:	2823      	cmp	r0, #35	; 0x23
    f140:	d005      	beq.n	f14e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    f142:	2824      	cmp	r0, #36	; 0x24
    f144:	d003      	beq.n	f14e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    f146:	2827      	cmp	r0, #39	; 0x27
    f148:	d001      	beq.n	f14e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    f14a:	2000      	movs	r0, #0
    f14c:	4770      	bx	lr
    f14e:	2001      	movs	r0, #1
    f150:	4770      	bx	lr

0000f152 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    f152:	f011 0f0c 	tst.w	r1, #12
    f156:	d018      	beq.n	f18a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    f158:	074a      	lsls	r2, r1, #29
    f15a:	f44f 7116 	mov.w	r1, #600	; 0x258
    f15e:	2a00      	cmp	r2, #0
    f160:	da02      	bge.n	f168 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    f162:	f04f 0210 	mov.w	r2, #16
    f166:	e001      	b.n	f16c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    f168:	f04f 0240 	mov.w	r2, #64	; 0x40
    f16c:	da01      	bge.n	f172 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    f16e:	f04f 0196 	mov.w	r1, #150	; 0x96
    f172:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    f176:	eba0 0301 	sub.w	r3, r0, r1
    f17a:	4288      	cmp	r0, r1
    f17c:	d903      	bls.n	f186 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    f17e:	fb93 f0f2 	sdiv	r0, r3, r2
    f182:	b280      	uxth	r0, r0
    f184:	4770      	bx	lr
    f186:	2000      	movs	r0, #0
    f188:	4770      	bx	lr
    f18a:	2902      	cmp	r1, #2
    f18c:	d008      	beq.n	f1a0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    f18e:	2870      	cmp	r0, #112	; 0x70
    f190:	d9f9      	bls.n	f186 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    f192:	3870      	subs	r0, #112	; 0x70
    f194:	17c1      	asrs	r1, r0, #31
    f196:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    f19a:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    f19e:	4770      	bx	lr
    f1a0:	283c      	cmp	r0, #60	; 0x3c
    f1a2:	d9f0      	bls.n	f186 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    f1a4:	383c      	subs	r0, #60	; 0x3c
    f1a6:	17c1      	asrs	r1, r0, #31
    f1a8:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    f1ac:	f3c0 008f 	ubfx	r0, r0, #2, #16
    f1b0:	4770      	bx	lr

0000f1b2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    f1b2:	6809      	ldr	r1, [r1, #0]
    f1b4:	f8c0 106a 	str.w	r1, [r0, #106]	; 0x6a
    f1b8:	4770      	bx	lr

0000f1ba <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    f1ba:	07c1      	lsls	r1, r0, #31
    f1bc:	d001      	beq.n	f1c2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    f1be:	2001      	movs	r0, #1
    f1c0:	4770      	bx	lr
    f1c2:	0781      	lsls	r1, r0, #30
    f1c4:	d501      	bpl.n	f1ca <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    f1c6:	2002      	movs	r0, #2
    f1c8:	4770      	bx	lr
    f1ca:	0740      	lsls	r0, r0, #29
    f1cc:	d501      	bpl.n	f1d2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    f1ce:	2008      	movs	r0, #8
    f1d0:	4770      	bx	lr
    f1d2:	2000      	movs	r0, #0
    f1d4:	4770      	bx	lr

0000f1d6 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    f1d6:	b510      	push	{r4, lr}
    f1d8:	f640 12c4 	movw	r2, #2500	; 0x9c4
    f1dc:	2901      	cmp	r1, #1
    f1de:	d006      	beq.n	f1ee <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    f1e0:	2902      	cmp	r1, #2
    f1e2:	d005      	beq.n	f1f0 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    f1e4:	f240 31ba 	movw	r1, #954	; 0x3ba
    f1e8:	2029      	movs	r0, #41	; 0x29
    f1ea:	f7f6 f9f1 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f1ee:	b108      	cbz	r0, f1f4 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    f1f0:	4610      	mov	r0, r2
    f1f2:	bd10      	pop	{r4, pc}
    f1f4:	f240 40e2 	movw	r0, #1250	; 0x4e2
    f1f8:	bd10      	pop	{r4, pc}

0000f1fa <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    f1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f1fe:	4607      	mov	r7, r0
    f200:	460e      	mov	r6, r1
    f202:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    f206:	f7f4 f833 	bl	3270 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    f20a:	b198      	cbz	r0, f234 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    f20c:	b31e      	cbz	r6, f256 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    f20e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    f212:	1b40      	subs	r0, r0, r5
    f214:	2300      	movs	r3, #0
    f216:	eb61 0104 	sbc.w	r1, r1, r4
    f21a:	461a      	mov	r2, r3
    f21c:	1a1b      	subs	r3, r3, r0
    f21e:	418a      	sbcs	r2, r1
    f220:	da19      	bge.n	f256 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    f222:	1c42      	adds	r2, r0, #1
    f224:	f171 0100 	sbcs.w	r1, r1, #0
    f228:	db07      	blt.n	f23a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    f22a:	f240 2136 	movw	r1, #566	; 0x236
    f22e:	2029      	movs	r0, #41	; 0x29
    f230:	f7f6 f9ce 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f234:	f44f 710b 	mov.w	r1, #556	; 0x22c
    f238:	e7f9      	b.n	f22e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    f23a:	4430      	add	r0, r6
    f23c:	1e40      	subs	r0, r0, #1
    f23e:	fbb0 f1f6 	udiv	r1, r0, r6
    f242:	fb01 f006 	mul.w	r0, r1, r6
    f246:	1828      	adds	r0, r5, r0
    f248:	f144 0400 	adc.w	r4, r4, #0
    f24c:	e9c7 0404 	strd	r0, r4, [r7, #16]
    f250:	4608      	mov	r0, r1
    f252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f256:	2000      	movs	r0, #0
    f258:	e7fb      	b.n	f252 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000f25a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    f25a:	b530      	push	{r4, r5, lr}
    f25c:	4613      	mov	r3, r2
    f25e:	e006      	b.n	f26e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    f260:	18cc      	adds	r4, r1, r3
    f262:	1ad5      	subs	r5, r2, r3
    f264:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    f268:	1e5b      	subs	r3, r3, #1
    f26a:	5544      	strb	r4, [r0, r5]
    f26c:	b2db      	uxtb	r3, r3
    f26e:	2b00      	cmp	r3, #0
    f270:	d1f6      	bne.n	f260 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    f272:	bd30      	pop	{r4, r5, pc}

0000f274 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    f274:	b538      	push	{r3, r4, r5, lr}
    f276:	4605      	mov	r5, r0
    f278:	460c      	mov	r4, r1
    f27a:	4668      	mov	r0, sp
    f27c:	f7fd fa4c 	bl	c718 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    f280:	b310      	cbz	r0, f2c8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    f282:	f99d 0000 	ldrsb.w	r0, [sp]
    f286:	7260      	strb	r0, [r4, #9]
    f288:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    f28c:	72a1      	strb	r1, [r4, #10]
    f28e:	f994 100b 	ldrsb.w	r1, [r4, #11]
    f292:	2200      	movs	r2, #0
    f294:	1a41      	subs	r1, r0, r1
    f296:	d500      	bpl.n	f29a <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    f298:	4249      	negs	r1, r1
    f29a:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    f29e:	428b      	cmp	r3, r1
    f2a0:	dc10      	bgt.n	f2c4 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    f2a2:	2bff      	cmp	r3, #255	; 0xff
    f2a4:	d00e      	beq.n	f2c4 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    f2a6:	7b21      	ldrb	r1, [r4, #12]
    f2a8:	1c49      	adds	r1, r1, #1
    f2aa:	b2c9      	uxtb	r1, r1
    f2ac:	7321      	strb	r1, [r4, #12]
    f2ae:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    f2b2:	4299      	cmp	r1, r3
    f2b4:	d802      	bhi.n	f2bc <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    f2b6:	7ae1      	ldrb	r1, [r4, #11]
    f2b8:	297f      	cmp	r1, #127	; 0x7f
    f2ba:	d103      	bne.n	f2c4 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    f2bc:	72e0      	strb	r0, [r4, #11]
    f2be:	2000      	movs	r0, #0
    f2c0:	7320      	strb	r0, [r4, #12]
    f2c2:	2201      	movs	r2, #1
    f2c4:	4610      	mov	r0, r2
    f2c6:	bd38      	pop	{r3, r4, r5, pc}
    f2c8:	207f      	movs	r0, #127	; 0x7f
    f2ca:	7260      	strb	r0, [r4, #9]
    f2cc:	2000      	movs	r0, #0
    f2ce:	bd38      	pop	{r3, r4, r5, pc}

0000f2d0 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    f2d0:	2300      	movs	r3, #0
    f2d2:	6303      	str	r3, [r0, #48]	; 0x30
    f2d4:	8702      	strh	r2, [r0, #56]	; 0x38
    f2d6:	f240 2371 	movw	r3, #625	; 0x271
    f2da:	435a      	muls	r2, r3
    f2dc:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    f2e0:	1e52      	subs	r2, r2, #1
    f2e2:	fbb2 f1f1 	udiv	r1, r2, r1
    f2e6:	6341      	str	r1, [r0, #52]	; 0x34
    f2e8:	4770      	bx	lr

0000f2ea <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    f2ea:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    f2ee:	4607      	mov	r7, r0
    f2f0:	4690      	mov	r8, r2
    f2f2:	468b      	mov	fp, r1
    f2f4:	2601      	movs	r6, #1
    f2f6:	4608      	mov	r0, r1
    f2f8:	f000 f94a 	bl	f590 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    f2fc:	4682      	mov	sl, r0
    f2fe:	4658      	mov	r0, fp
    f300:	f000 f952 	bl	f5a8 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    f304:	4681      	mov	r9, r0
    f306:	f7ff ff58 	bl	f1ba <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    f30a:	4604      	mov	r4, r0
    f30c:	4650      	mov	r0, sl
    f30e:	f7ff ff54 	bl	f1ba <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    f312:	4605      	mov	r5, r0
    f314:	ea54 0005 	orrs.w	r0, r4, r5
    f318:	d100      	bne.n	f31c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    f31a:	2600      	movs	r6, #0
    f31c:	f7fc fcae 	bl	bc7c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f320:	ea10 0f09 	tst.w	r0, r9
    f324:	d100      	bne.n	f328 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    f326:	2400      	movs	r4, #0
    f328:	f7fc fca8 	bl	bc7c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f32c:	ea10 0f0a 	tst.w	r0, sl
    f330:	d100      	bne.n	f334 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    f332:	2500      	movs	r5, #0
    f334:	f897 006e 	ldrb.w	r0, [r7, #110]	; 0x6e
    f338:	42a0      	cmp	r0, r4
    f33a:	d100      	bne.n	f33e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    f33c:	2400      	movs	r4, #0
    f33e:	f888 4000 	strb.w	r4, [r8]
    f342:	f897 006f 	ldrb.w	r0, [r7, #111]	; 0x6f
    f346:	42a8      	cmp	r0, r5
    f348:	d100      	bne.n	f34c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    f34a:	2500      	movs	r5, #0
    f34c:	f888 5001 	strb.w	r5, [r8, #1]
    f350:	b974      	cbnz	r4, f370 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    f352:	b96d      	cbnz	r5, f370 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    f354:	4658      	mov	r0, fp
    f356:	f000 f925 	bl	f5a4 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    f35a:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
    f35e:	1a40      	subs	r0, r0, r1
    f360:	b200      	sxth	r0, r0
    f362:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f366:	4288      	cmp	r0, r1
    f368:	dc01      	bgt.n	f36e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    f36a:	2800      	cmp	r0, #0
    f36c:	dc00      	bgt.n	f370 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    f36e:	2600      	movs	r6, #0
    f370:	4630      	mov	r0, r6
    f372:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000f376 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    f376:	f240 41e2 	movw	r1, #1250	; 0x4e2
    f37a:	4348      	muls	r0, r1
    f37c:	4770      	bx	lr

0000f37e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    f37e:	f240 2171 	movw	r1, #625	; 0x271
    f382:	fb10 f001 	smulbb	r0, r0, r1
    f386:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f38a:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    f38e:	4770      	bx	lr

0000f390 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    f390:	b510      	push	{r4, lr}
    f392:	2300      	movs	r3, #0
    f394:	461a      	mov	r2, r3
    f396:	e003      	b.n	f3a0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    f398:	5c84      	ldrb	r4, [r0, r2]
    f39a:	4323      	orrs	r3, r4
    f39c:	1c52      	adds	r2, r2, #1
    f39e:	b2d2      	uxtb	r2, r2
    f3a0:	428a      	cmp	r2, r1
    f3a2:	d3f9      	bcc.n	f398 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    f3a4:	b10b      	cbz	r3, f3aa <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    f3a6:	2000      	movs	r0, #0
    f3a8:	bd10      	pop	{r4, pc}
    f3aa:	2001      	movs	r0, #1
    f3ac:	bd10      	pop	{r4, pc}

0000f3ae <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    f3ae:	b510      	push	{r4, lr}
    f3b0:	4604      	mov	r4, r0
    f3b2:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    f3b6:	b108      	cbz	r0, f3bc <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    f3b8:	2825      	cmp	r0, #37	; 0x25
    f3ba:	d901      	bls.n	f3c0 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    f3bc:	2012      	movs	r0, #18
    f3be:	bd10      	pop	{r4, pc}
    f3c0:	b12a      	cbz	r2, f3ce <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    f3c2:	7da0      	ldrb	r0, [r4, #22]
    f3c4:	b128      	cbz	r0, f3d2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    f3c6:	2801      	cmp	r0, #1
    f3c8:	d009      	beq.n	f3de <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    f3ca:	201f      	movs	r0, #31
    f3cc:	bd10      	pop	{r4, pc}
    f3ce:	2000      	movs	r0, #0
    f3d0:	bd10      	pop	{r4, pc}
    f3d2:	4620      	mov	r0, r4
    f3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f3d8:	4611      	mov	r1, r2
    f3da:	f7f8 b8f1 	b.w	75c0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    f3de:	88a2      	ldrh	r2, [r4, #4]
    f3e0:	6949      	ldr	r1, [r1, #20]
    f3e2:	f104 0016 	add.w	r0, r4, #22
    f3e6:	f7f8 f897 	bl	7518 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    f3ea:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    f3ee:	e7ee      	b.n	f3ce <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000f3f0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    f3f0:	b530      	push	{r4, r5, lr}
    f3f2:	1c42      	adds	r2, r0, #1
    f3f4:	428a      	cmp	r2, r1
    f3f6:	d004      	beq.n	f402 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    f3f8:	680a      	ldr	r2, [r1, #0]
    f3fa:	f8c0 2001 	str.w	r2, [r0, #1]
    f3fe:	7909      	ldrb	r1, [r1, #4]
    f400:	7141      	strb	r1, [r0, #5]
    f402:	7941      	ldrb	r1, [r0, #5]
    f404:	f001 011f 	and.w	r1, r1, #31
    f408:	7141      	strb	r1, [r0, #5]
    f40a:	2100      	movs	r1, #0
    f40c:	72c1      	strb	r1, [r0, #11]
    f40e:	1843      	adds	r3, r0, r1
    f410:	1c49      	adds	r1, r1, #1
    f412:	785c      	ldrb	r4, [r3, #1]
    f414:	b2c9      	uxtb	r1, r1
    f416:	f004 0201 	and.w	r2, r4, #1
    f41a:	0864      	lsrs	r4, r4, #1
    f41c:	f004 0501 	and.w	r5, r4, #1
    f420:	4415      	add	r5, r2
    f422:	0862      	lsrs	r2, r4, #1
    f424:	f002 0401 	and.w	r4, r2, #1
    f428:	442c      	add	r4, r5
    f42a:	0852      	lsrs	r2, r2, #1
    f42c:	f002 0501 	and.w	r5, r2, #1
    f430:	442c      	add	r4, r5
    f432:	0852      	lsrs	r2, r2, #1
    f434:	f002 0501 	and.w	r5, r2, #1
    f438:	442c      	add	r4, r5
    f43a:	0852      	lsrs	r2, r2, #1
    f43c:	f002 0501 	and.w	r5, r2, #1
    f440:	442c      	add	r4, r5
    f442:	0852      	lsrs	r2, r2, #1
    f444:	f002 0501 	and.w	r5, r2, #1
    f448:	442c      	add	r4, r5
    f44a:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    f44e:	719a      	strb	r2, [r3, #6]
    f450:	7ac3      	ldrb	r3, [r0, #11]
    f452:	2905      	cmp	r1, #5
    f454:	441a      	add	r2, r3
    f456:	72c2      	strb	r2, [r0, #11]
    f458:	d3d9      	bcc.n	f40e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    f45a:	bd30      	pop	{r4, r5, pc}
    f45c:	b570      	push	{r4, r5, r6, lr}
    f45e:	f8d0 201f 	ldr.w	r2, [r0, #31]
    f462:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    f466:	f012 0fff 	tst.w	r2, #255	; 0xff
    f46a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    f46e:	d108      	bne.n	f482 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    f470:	f3c2 2407 	ubfx	r4, r2, #8, #8
    f474:	b92c      	cbnz	r4, f482 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    f476:	f3c2 4407 	ubfx	r4, r2, #16, #8
    f47a:	b914      	cbnz	r4, f482 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    f47c:	0e12      	lsrs	r2, r2, #24
    f47e:	d100      	bne.n	f482 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    f480:	b35b      	cbz	r3, f4da <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f482:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    f486:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    f48a:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    f48e:	7d83      	ldrb	r3, [r0, #22]
    f490:	b141      	cbz	r1, f4a4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    f492:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    f496:	d905      	bls.n	f4a4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    f498:	f640 5107 	movw	r1, #3335	; 0xd07
    f49c:	428a      	cmp	r2, r1
    f49e:	d801      	bhi.n	f4a4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    f4a0:	2101      	movs	r1, #1
    f4a2:	e000      	b.n	f4a6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    f4a4:	2100      	movs	r1, #0
    f4a6:	7846      	ldrb	r6, [r0, #1]
    f4a8:	2e22      	cmp	r6, #34	; 0x22
    f4aa:	d116      	bne.n	f4da <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f4ac:	b959      	cbnz	r1, f4c6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
    f4ae:	1f91      	subs	r1, r2, #6
    f4b0:	f640 467a 	movw	r6, #3194	; 0xc7a
    f4b4:	42b1      	cmp	r1, r6
    f4b6:	d810      	bhi.n	f4da <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f4b8:	b17b      	cbz	r3, f4da <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f4ba:	2b08      	cmp	r3, #8
    f4bc:	d80d      	bhi.n	f4da <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f4be:	4293      	cmp	r3, r2
    f4c0:	d20b      	bcs.n	f4da <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f4c2:	4294      	cmp	r4, r2
    f4c4:	d809      	bhi.n	f4da <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f4c6:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    f4ca:	d206      	bcs.n	f4da <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f4cc:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    f4d0:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    f4d4:	d801      	bhi.n	f4da <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f4d6:	2001      	movs	r0, #1
    f4d8:	bd70      	pop	{r4, r5, r6, pc}
    f4da:	2000      	movs	r0, #0
    f4dc:	bd70      	pop	{r4, r5, r6, pc}

0000f4de <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    f4de:	b570      	push	{r4, r5, r6, lr}
    f4e0:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    f4e4:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    f4e8:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    f4ec:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    f4f0:	88c0      	ldrh	r0, [r0, #6]
    f4f2:	b131      	cbz	r1, f502 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    f4f4:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    f4f8:	d903      	bls.n	f502 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    f4fa:	f640 5107 	movw	r1, #3335	; 0xd07
    f4fe:	428a      	cmp	r2, r1
    f500:	d90b      	bls.n	f51a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    f502:	1f91      	subs	r1, r2, #6
    f504:	f640 467a 	movw	r6, #3194	; 0xc7a
    f508:	42b1      	cmp	r1, r6
    f50a:	d80e      	bhi.n	f52a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f50c:	b16b      	cbz	r3, f52a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f50e:	2b08      	cmp	r3, #8
    f510:	d80b      	bhi.n	f52a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f512:	4293      	cmp	r3, r2
    f514:	d209      	bcs.n	f52a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f516:	4294      	cmp	r4, r2
    f518:	d807      	bhi.n	f52a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f51a:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    f51e:	d204      	bcs.n	f52a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f520:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    f524:	d801      	bhi.n	f52a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f526:	2001      	movs	r0, #1
    f528:	bd70      	pop	{r4, r5, r6, pc}
    f52a:	2000      	movs	r0, #0
    f52c:	bd70      	pop	{r4, r5, r6, pc}

0000f52e <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    f52e:	6842      	ldr	r2, [r0, #4]
    f530:	600a      	str	r2, [r1, #0]
    f532:	7a00      	ldrb	r0, [r0, #8]
    f534:	7108      	strb	r0, [r1, #4]
    f536:	4770      	bx	lr

0000f538 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    f538:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    f53c:	4770      	bx	lr

0000f53e <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    f53e:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    f542:	4770      	bx	lr

0000f544 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    f544:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    f548:	4770      	bx	lr

0000f54a <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    f54a:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    f54e:	4770      	bx	lr

0000f550 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    f550:	8980      	ldrh	r0, [r0, #12]
    f552:	8008      	strh	r0, [r1, #0]
    f554:	4770      	bx	lr

0000f556 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    f556:	f8d0 0016 	ldr.w	r0, [r0, #22]
    f55a:	6008      	str	r0, [r1, #0]
    f55c:	4770      	bx	lr

0000f55e <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    f55e:	6842      	ldr	r2, [r0, #4]
    f560:	600a      	str	r2, [r1, #0]
    f562:	6880      	ldr	r0, [r0, #8]
    f564:	6048      	str	r0, [r1, #4]
    f566:	4770      	bx	lr

0000f568 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    f568:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    f56c:	600a      	str	r2, [r1, #0]
    f56e:	6840      	ldr	r0, [r0, #4]
    f570:	6048      	str	r0, [r1, #4]
    f572:	4770      	bx	lr

0000f574 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    f574:	6842      	ldr	r2, [r0, #4]
    f576:	600a      	str	r2, [r1, #0]
    f578:	6880      	ldr	r0, [r0, #8]
    f57a:	6048      	str	r0, [r1, #4]
    f57c:	4770      	bx	lr

0000f57e <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    f57e:	6842      	ldr	r2, [r0, #4]
    f580:	600a      	str	r2, [r1, #0]
    f582:	6880      	ldr	r0, [r0, #8]
    f584:	6048      	str	r0, [r1, #4]
    f586:	4770      	bx	lr

0000f588 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    f588:	7800      	ldrb	r0, [r0, #0]
    f58a:	f000 0003 	and.w	r0, r0, #3
    f58e:	4770      	bx	lr

0000f590 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    f590:	7900      	ldrb	r0, [r0, #4]
    f592:	4770      	bx	lr

0000f594 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    f594:	8880      	ldrh	r0, [r0, #4]
    f596:	4770      	bx	lr

0000f598 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    f598:	88c0      	ldrh	r0, [r0, #6]
    f59a:	4770      	bx	lr

0000f59c <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    f59c:	8900      	ldrh	r0, [r0, #8]
    f59e:	4770      	bx	lr

0000f5a0 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    f5a0:	8940      	ldrh	r0, [r0, #10]
    f5a2:	4770      	bx	lr

0000f5a4 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    f5a4:	88c0      	ldrh	r0, [r0, #6]
    f5a6:	4770      	bx	lr

0000f5a8 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    f5a8:	7940      	ldrb	r0, [r0, #5]
    f5aa:	4770      	bx	lr

0000f5ac <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    f5ac:	7900      	ldrb	r0, [r0, #4]
    f5ae:	4770      	bx	lr

0000f5b0 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    f5b0:	7900      	ldrb	r0, [r0, #4]
    f5b2:	4770      	bx	lr

0000f5b4 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    f5b4:	8901      	ldrh	r1, [r0, #8]
    f5b6:	291b      	cmp	r1, #27
    f5b8:	d30c      	bcc.n	f5d4 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f5ba:	8941      	ldrh	r1, [r0, #10]
    f5bc:	f44f 72a4 	mov.w	r2, #328	; 0x148
    f5c0:	4291      	cmp	r1, r2
    f5c2:	d307      	bcc.n	f5d4 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f5c4:	8881      	ldrh	r1, [r0, #4]
    f5c6:	291b      	cmp	r1, #27
    f5c8:	d304      	bcc.n	f5d4 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f5ca:	88c0      	ldrh	r0, [r0, #6]
    f5cc:	4290      	cmp	r0, r2
    f5ce:	d301      	bcc.n	f5d4 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f5d0:	2001      	movs	r0, #1
    f5d2:	4770      	bx	lr
    f5d4:	2000      	movs	r0, #0
    f5d6:	4770      	bx	lr

0000f5d8 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    f5d8:	b510      	push	{r4, lr}
    f5da:	29fb      	cmp	r1, #251	; 0xfb
    f5dc:	d904      	bls.n	f5e8 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    f5de:	f240 51fe 	movw	r1, #1534	; 0x5fe
    f5e2:	202a      	movs	r0, #42	; 0x2a
    f5e4:	f7f5 fff4 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5e8:	7041      	strb	r1, [r0, #1]
    f5ea:	bd10      	pop	{r4, pc}

0000f5ec <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    f5ec:	7901      	ldrb	r1, [r0, #4]
    f5ee:	0749      	lsls	r1, r1, #29
    f5f0:	d004      	beq.n	f5fc <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    f5f2:	7940      	ldrb	r0, [r0, #5]
    f5f4:	0740      	lsls	r0, r0, #29
    f5f6:	d001      	beq.n	f5fc <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    f5f8:	2001      	movs	r0, #1
    f5fa:	4770      	bx	lr
    f5fc:	2000      	movs	r0, #0
    f5fe:	4770      	bx	lr

0000f600 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    f600:	7901      	ldrb	r1, [r0, #4]
    f602:	7940      	ldrb	r0, [r0, #5]
    f604:	f001 0107 	and.w	r1, r1, #7
    f608:	1e4a      	subs	r2, r1, #1
    f60a:	f000 0007 	and.w	r0, r0, #7
    f60e:	4011      	ands	r1, r2
    f610:	1e42      	subs	r2, r0, #1
    f612:	4010      	ands	r0, r2
    f614:	4301      	orrs	r1, r0
    f616:	d001      	beq.n	f61c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x1c>
    f618:	2000      	movs	r0, #0
    f61a:	4770      	bx	lr
    f61c:	2001      	movs	r0, #1
    f61e:	4770      	bx	lr

0000f620 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    f620:	7900      	ldrb	r0, [r0, #4]
    f622:	4770      	bx	lr

0000f624 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    f624:	7940      	ldrb	r0, [r0, #5]
    f626:	4770      	bx	lr

0000f628 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    f628:	7101      	strb	r1, [r0, #4]
    f62a:	4770      	bx	lr

0000f62c <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    f62c:	7141      	strb	r1, [r0, #5]
    f62e:	4770      	bx	lr

0000f630 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    f630:	b510      	push	{r4, lr}
    f632:	2a1b      	cmp	r2, #27
    f634:	d904      	bls.n	f640 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    f636:	f240 4127 	movw	r1, #1063	; 0x427
    f63a:	202a      	movs	r0, #42	; 0x2a
    f63c:	f7f5 ffc8 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f640:	7042      	strb	r2, [r0, #1]
    f642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f646:	1cc0      	adds	r0, r0, #3
    f648:	f7fe ba24 	b.w	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000f64c <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    f64c:	6809      	ldr	r1, [r1, #0]
    f64e:	60c1      	str	r1, [r0, #12]
    f650:	4770      	bx	lr

0000f652 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    f652:	680a      	ldr	r2, [r1, #0]
    f654:	6042      	str	r2, [r0, #4]
    f656:	6849      	ldr	r1, [r1, #4]
    f658:	6081      	str	r1, [r0, #8]
    f65a:	4770      	bx	lr

0000f65c <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    f65c:	680a      	ldr	r2, [r1, #0]
    f65e:	6042      	str	r2, [r0, #4]
    f660:	6849      	ldr	r1, [r1, #4]
    f662:	6081      	str	r1, [r0, #8]
    f664:	4770      	bx	lr

0000f666 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    f666:	680a      	ldr	r2, [r1, #0]
    f668:	6042      	str	r2, [r0, #4]
    f66a:	6849      	ldr	r1, [r1, #4]
    f66c:	6081      	str	r1, [r0, #8]
    f66e:	4770      	bx	lr

0000f670 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    f670:	7802      	ldrb	r2, [r0, #0]
    f672:	f001 0103 	and.w	r1, r1, #3
    f676:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    f67a:	430a      	orrs	r2, r1
    f67c:	7002      	strb	r2, [r0, #0]
    f67e:	4770      	bx	lr

0000f680 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    f680:	7101      	strb	r1, [r0, #4]
    f682:	0a09      	lsrs	r1, r1, #8
    f684:	7141      	strb	r1, [r0, #5]
    f686:	4770      	bx	lr

0000f688 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    f688:	7181      	strb	r1, [r0, #6]
    f68a:	0a09      	lsrs	r1, r1, #8
    f68c:	71c1      	strb	r1, [r0, #7]
    f68e:	4770      	bx	lr

0000f690 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    f690:	7201      	strb	r1, [r0, #8]
    f692:	0a09      	lsrs	r1, r1, #8
    f694:	7241      	strb	r1, [r0, #9]
    f696:	4770      	bx	lr

0000f698 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    f698:	7281      	strb	r1, [r0, #10]
    f69a:	0a09      	lsrs	r1, r1, #8
    f69c:	72c1      	strb	r1, [r0, #11]
    f69e:	4770      	bx	lr

0000f6a0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    f6a0:	7802      	ldrb	r2, [r0, #0]
    f6a2:	f002 020f 	and.w	r2, r2, #15
    f6a6:	2a03      	cmp	r2, #3
    f6a8:	d003      	beq.n	f6b2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
    f6aa:	2a05      	cmp	r2, #5
    f6ac:	d104      	bne.n	f6b8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
    f6ae:	f7ff bed5 	b.w	f45c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    f6b2:	7840      	ldrb	r0, [r0, #1]
    f6b4:	280c      	cmp	r0, #12
    f6b6:	d001      	beq.n	f6bc <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
    f6b8:	2000      	movs	r0, #0
    f6ba:	4770      	bx	lr
    f6bc:	2001      	movs	r0, #1
    f6be:	4770      	bx	lr

0000f6c0 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    f6c0:	b570      	push	{r4, r5, r6, lr}
    f6c2:	4614      	mov	r4, r2
    f6c4:	4605      	mov	r5, r0
    f6c6:	2a1f      	cmp	r2, #31
    f6c8:	d903      	bls.n	f6d2 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    f6ca:	21b5      	movs	r1, #181	; 0xb5
    f6cc:	202a      	movs	r0, #42	; 0x2a
    f6ce:	f7f5 ff7f 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6d2:	f105 0009 	add.w	r0, r5, #9
    f6d6:	f7fe f9dd 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f6da:	1da4      	adds	r4, r4, #6
    f6dc:	706c      	strb	r4, [r5, #1]
    f6de:	bd70      	pop	{r4, r5, r6, pc}

0000f6e0 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    f6e0:	b510      	push	{r4, lr}
    f6e2:	7802      	ldrb	r2, [r0, #0]
    f6e4:	f001 030f 	and.w	r3, r1, #15
    f6e8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    f6ec:	431a      	orrs	r2, r3
    f6ee:	7002      	strb	r2, [r0, #0]
    f6f0:	2907      	cmp	r1, #7
    f6f2:	d20c      	bcs.n	f70e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    f6f4:	e8df f001 	tbb	[pc, r1]
    f6f8:	06040604 	.word	0x06040604
    f6fc:	00040804 	.word	0x00040804
    f700:	2106      	movs	r1, #6
    f702:	e002      	b.n	f70a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    f704:	210c      	movs	r1, #12
    f706:	e000      	b.n	f70a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    f708:	2122      	movs	r1, #34	; 0x22
    f70a:	7041      	strb	r1, [r0, #1]
    f70c:	bd10      	pop	{r4, pc}
    f70e:	216f      	movs	r1, #111	; 0x6f
    f710:	202a      	movs	r0, #42	; 0x2a
    f712:	f7f5 ff5d 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f716 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    f716:	680a      	ldr	r2, [r1, #0]
    f718:	f840 2f09 	str.w	r2, [r0, #9]!
    f71c:	8889      	ldrh	r1, [r1, #4]
    f71e:	8081      	strh	r1, [r0, #4]
    f720:	4770      	bx	lr

0000f722 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    f722:	7802      	ldrb	r2, [r0, #0]
    f724:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f728:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    f72c:	7002      	strb	r2, [r0, #0]
    f72e:	4770      	bx	lr

0000f730 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    f730:	680a      	ldr	r2, [r1, #0]
    f732:	f840 2f03 	str.w	r2, [r0, #3]!
    f736:	8889      	ldrh	r1, [r1, #4]
    f738:	8081      	strh	r1, [r0, #4]
    f73a:	4770      	bx	lr

0000f73c <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    f73c:	7802      	ldrb	r2, [r0, #0]
    f73e:	2340      	movs	r3, #64	; 0x40
    f740:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    f744:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    f748:	430a      	orrs	r2, r1
    f74a:	7002      	strb	r2, [r0, #0]
    f74c:	4770      	bx	lr

0000f74e <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    f74e:	b570      	push	{r4, r5, r6, lr}
    f750:	4614      	mov	r4, r2
    f752:	4605      	mov	r5, r0
    f754:	2a1f      	cmp	r2, #31
    f756:	d903      	bls.n	f760 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    f758:	21d7      	movs	r1, #215	; 0xd7
    f75a:	202a      	movs	r0, #42	; 0x2a
    f75c:	f7f5 ff38 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f760:	f105 0009 	add.w	r0, r5, #9
    f764:	f7fe f996 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f768:	1da4      	adds	r4, r4, #6
    f76a:	706c      	strb	r4, [r5, #1]
    f76c:	bd70      	pop	{r4, r5, r6, pc}

0000f76e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    f76e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f772:	4604      	mov	r4, r0
    f774:	2000      	movs	r0, #0
    f776:	f7f6 f921 	bl	59bc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    f77a:	2600      	movs	r6, #0
    f77c:	4605      	mov	r5, r0
    f77e:	4637      	mov	r7, r6
    f780:	e00e      	b.n	f7a0 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    f782:	8820      	ldrh	r0, [r4, #0]
    f784:	1c40      	adds	r0, r0, #1
    f786:	b280      	uxth	r0, r0
    f788:	8020      	strh	r0, [r4, #0]
    f78a:	42a8      	cmp	r0, r5
    f78c:	d300      	bcc.n	f790 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    f78e:	8027      	strh	r7, [r4, #0]
    f790:	8820      	ldrh	r0, [r4, #0]
    f792:	4669      	mov	r1, sp
    f794:	f7ff fc4d 	bl	f032 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f798:	2800      	cmp	r0, #0
    f79a:	d007      	beq.n	f7ac <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    f79c:	1c76      	adds	r6, r6, #1
    f79e:	b2f6      	uxtb	r6, r6
    f7a0:	42ae      	cmp	r6, r5
    f7a2:	d3ee      	bcc.n	f782 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    f7a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    f7a8:	8020      	strh	r0, [r4, #0]
    f7aa:	2012      	movs	r0, #18
    f7ac:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000f7b0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    f7b0:	6841      	ldr	r1, [r0, #4]
    f7b2:	2200      	movs	r2, #0
    f7b4:	f891 31d2 	ldrb.w	r3, [r1, #466]	; 0x1d2
    f7b8:	2b00      	cmp	r3, #0
    f7ba:	d004      	beq.n	f7c6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    f7bc:	f881 21d2 	strb.w	r2, [r1, #466]	; 0x1d2
    f7c0:	6840      	ldr	r0, [r0, #4]
    f7c2:	f000 bd08 	b.w	101d6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    f7c6:	4770      	bx	lr

0000f7c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    f7c8:	b510      	push	{r4, lr}
    f7ca:	7901      	ldrb	r1, [r0, #4]
    f7cc:	b119      	cbz	r1, f7d6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    f7ce:	2901      	cmp	r1, #1
    f7d0:	d006      	beq.n	f7e0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    f7d2:	2000      	movs	r0, #0
    f7d4:	bd10      	pop	{r4, pc}
    f7d6:	8842      	ldrh	r2, [r0, #2]
    f7d8:	6883      	ldr	r3, [r0, #8]
    f7da:	8800      	ldrh	r0, [r0, #0]
    f7dc:	2102      	movs	r1, #2
    f7de:	e003      	b.n	f7e8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    f7e0:	8842      	ldrh	r2, [r0, #2]
    f7e2:	6883      	ldr	r3, [r0, #8]
    f7e4:	8800      	ldrh	r0, [r0, #0]
    f7e6:	2101      	movs	r1, #1
    f7e8:	f7f7 ff9c 	bl	7724 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    f7ec:	b908      	cbnz	r0, f7f2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    f7ee:	f7f7 ffef 	bl	77d0 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    f7f2:	2001      	movs	r0, #1
    f7f4:	bd10      	pop	{r4, pc}
    f7f6:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f7fa:	460e      	mov	r6, r1
    f7fc:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    f800:	4617      	mov	r7, r2
    f802:	39ff      	subs	r1, #255	; 0xff
    f804:	d014      	beq.n	f830 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    f806:	8030      	strh	r0, [r6, #0]
    f808:	2100      	movs	r1, #0
    f80a:	7171      	strb	r1, [r6, #5]
    f80c:	f7f6 fb08 	bl	5e20 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f810:	4604      	mov	r4, r0
    f812:	f7fe ff94 	bl	e73e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    f816:	0005      	movs	r5, r0
    f818:	d00a      	beq.n	f830 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    f81a:	4620      	mov	r0, r4
    f81c:	4629      	mov	r1, r5
    f81e:	aa01      	add	r2, sp, #4
    f820:	f7fe ffb0 	bl	e784 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    f824:	8070      	strh	r0, [r6, #2]
    f826:	b130      	cbz	r0, f836 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    f828:	28fb      	cmp	r0, #251	; 0xfb
    f82a:	d906      	bls.n	f83a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    f82c:	21ae      	movs	r1, #174	; 0xae
    f82e:	e026      	b.n	f87e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f830:	2000      	movs	r0, #0
    f832:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f836:	21ad      	movs	r1, #173	; 0xad
    f838:	e021      	b.n	f87e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f83a:	9801      	ldr	r0, [sp, #4]
    f83c:	f7ff fea4 	bl	f588 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    f840:	2801      	cmp	r0, #1
    f842:	d003      	beq.n	f84c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    f844:	2802      	cmp	r0, #2
    f846:	d001      	beq.n	f84c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    f848:	21bd      	movs	r1, #189	; 0xbd
    f84a:	e018      	b.n	f87e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f84c:	7130      	strb	r0, [r6, #4]
    f84e:	4629      	mov	r1, r5
    f850:	8873      	ldrh	r3, [r6, #2]
    f852:	2503      	movs	r5, #3
    f854:	4620      	mov	r0, r4
    f856:	463a      	mov	r2, r7
    f858:	9500      	str	r5, [sp, #0]
    f85a:	f7fe fe70 	bl	e53e <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    f85e:	4620      	mov	r0, r4
    f860:	60b7      	str	r7, [r6, #8]
    f862:	f7fe ff30 	bl	e6c6 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    f866:	b138      	cbz	r0, f878 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    f868:	2100      	movs	r1, #0
    f86a:	4620      	mov	r0, r4
    f86c:	460a      	mov	r2, r1
    f86e:	f7ff f867 	bl	e940 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    f872:	b118      	cbz	r0, f87c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    f874:	2001      	movs	r0, #1
    f876:	e7dc      	b.n	f832 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    f878:	21cd      	movs	r1, #205	; 0xcd
    f87a:	e000      	b.n	f87e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f87c:	21d2      	movs	r1, #210	; 0xd2
    f87e:	202b      	movs	r0, #43	; 0x2b
    f880:	f7f5 fea6 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f884 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    f884:	f7f8 b9a2 	b.w	7bcc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x230>
    f888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f88c:	460c      	mov	r4, r1
    f88e:	b180      	cbz	r0, f8b2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2e>
    f890:	2700      	movs	r7, #0
    f892:	4606      	mov	r6, r0
    f894:	f500 7596 	add.w	r5, r0, #300	; 0x12c
    f898:	2a10      	cmp	r2, #16
    f89a:	d060      	beq.n	f95e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xda>
    f89c:	dc0c      	bgt.n	f8b8 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x34>
    f89e:	f1a2 0205 	sub.w	r2, r2, #5
    f8a2:	2a08      	cmp	r2, #8
    f8a4:	d210      	bcs.n	f8c8 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    f8a6:	e8df f002 	tbb	[pc, r2]
    f8aa:	124e      	.short	0x124e
    f8ac:	20330f0f 	.word	0x20330f0f
    f8b0:	540f      	.short	0x540f
    f8b2:	f44f 7112 	mov.w	r1, #584	; 0x248
    f8b6:	e034      	b.n	f922 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    f8b8:	2a11      	cmp	r2, #17
    f8ba:	d072      	beq.n	f9a2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x11e>
    f8bc:	2a18      	cmp	r2, #24
    f8be:	d068      	beq.n	f992 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x10e>
    f8c0:	2a1a      	cmp	r2, #26
    f8c2:	d057      	beq.n	f974 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xf0>
    f8c4:	2a1b      	cmp	r2, #27
    f8c6:	d060      	beq.n	f98a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x106>
    f8c8:	f240 2175 	movw	r1, #629	; 0x275
    f8cc:	e029      	b.n	f922 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    f8ce:	7067      	strb	r7, [r4, #1]
    f8d0:	2007      	movs	r0, #7
    f8d2:	7020      	strb	r0, [r4, #0]
    f8d4:	8537      	strh	r7, [r6, #40]	; 0x28
    f8d6:	f855 0f80 	ldr.w	r0, [r5, #128]!
    f8da:	6060      	str	r0, [r4, #4]
    f8dc:	6868      	ldr	r0, [r5, #4]
    f8de:	60a0      	str	r0, [r4, #8]
    f8e0:	8928      	ldrh	r0, [r5, #8]
    f8e2:	81a0      	strh	r0, [r4, #12]
    f8e4:	7127      	strb	r7, [r4, #4]
    f8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f8ea:	8830      	ldrh	r0, [r6, #0]
    f8ec:	f7f6 fa98 	bl	5e20 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f8f0:	4680      	mov	r8, r0
    f8f2:	f7fe ffbc 	bl	e86e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    f8f6:	b110      	cbz	r0, f8fe <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x7a>
    f8f8:	f240 11b9 	movw	r1, #441	; 0x1b9
    f8fc:	e011      	b.n	f922 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    f8fe:	7067      	strb	r7, [r4, #1]
    f900:	200c      	movs	r0, #12
    f902:	7020      	strb	r0, [r4, #0]
    f904:	f895 0094 	ldrb.w	r0, [r5, #148]	; 0x94
    f908:	7120      	strb	r0, [r4, #4]
    f90a:	8830      	ldrh	r0, [r6, #0]
    f90c:	80e0      	strh	r0, [r4, #6]
    f90e:	e015      	b.n	f93c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xb8>
    f910:	8830      	ldrh	r0, [r6, #0]
    f912:	f7f6 fa85 	bl	5e20 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f916:	4680      	mov	r8, r0
    f918:	f7fe ffa9 	bl	e86e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    f91c:	b120      	cbz	r0, f928 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xa4>
    f91e:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    f922:	2010      	movs	r0, #16
    f924:	f7f5 fe54 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f928:	7067      	strb	r7, [r4, #1]
    f92a:	200b      	movs	r0, #11
    f92c:	7020      	strb	r0, [r4, #0]
    f92e:	f815 0f94 	ldrb.w	r0, [r5, #148]!
    f932:	7120      	strb	r0, [r4, #4]
    f934:	8830      	ldrh	r0, [r6, #0]
    f936:	80e0      	strh	r0, [r4, #6]
    f938:	7928      	ldrb	r0, [r5, #4]
    f93a:	7220      	strb	r0, [r4, #8]
    f93c:	4640      	mov	r0, r8
    f93e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f942:	f7fe bfaf 	b.w	e8a4 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    f946:	7067      	strb	r7, [r4, #1]
    f948:	2006      	movs	r0, #6
    f94a:	7020      	strb	r0, [r4, #0]
    f94c:	f855 0f6a 	ldr.w	r0, [r5, #106]!
    f950:	e00a      	b.n	f968 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xe4>
    f952:	7067      	strb	r7, [r4, #1]
    f954:	200e      	movs	r0, #14
    f956:	7020      	strb	r0, [r4, #0]
    f958:	8830      	ldrh	r0, [r6, #0]
    f95a:	8088      	strh	r0, [r1, #4]
    f95c:	e7c3      	b.n	f8e6 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    f95e:	7067      	strb	r7, [r4, #1]
    f960:	2012      	movs	r0, #18
    f962:	7020      	strb	r0, [r4, #0]
    f964:	f855 0f22 	ldr.w	r0, [r5, #34]!
    f968:	6060      	str	r0, [r4, #4]
    f96a:	6868      	ldr	r0, [r5, #4]
    f96c:	60a0      	str	r0, [r4, #8]
    f96e:	68a8      	ldr	r0, [r5, #8]
    f970:	60e0      	str	r0, [r4, #12]
    f972:	e7b8      	b.n	f8e6 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    f974:	7067      	strb	r7, [r4, #1]
    f976:	2018      	movs	r0, #24
    f978:	7020      	strb	r0, [r4, #0]
    f97a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    f97c:	6060      	str	r0, [r4, #4]
    f97e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    f980:	60a0      	str	r0, [r4, #8]
    f982:	f8b5 0040 	ldrh.w	r0, [r5, #64]	; 0x40
    f986:	81a0      	strh	r0, [r4, #12]
    f988:	e7ad      	b.n	f8e6 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    f98a:	2019      	movs	r0, #25
    f98c:	7020      	strb	r0, [r4, #0]
    f98e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    f990:	e004      	b.n	f99c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x118>
    f992:	7067      	strb	r7, [r4, #1]
    f994:	2016      	movs	r0, #22
    f996:	7020      	strb	r0, [r4, #0]
    f998:	f8d5 000a 	ldr.w	r0, [r5, #10]
    f99c:	6048      	str	r0, [r1, #4]
    f99e:	e7a2      	b.n	f8e6 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    f9a0:	e7ff      	b.n	f9a2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x11e>
    f9a2:	7067      	strb	r7, [r4, #1]
    f9a4:	2013      	movs	r0, #19
    f9a6:	7020      	strb	r0, [r4, #0]
    f9a8:	f855 0f5a 	ldr.w	r0, [r5, #90]!
    f9ac:	6060      	str	r0, [r4, #4]
    f9ae:	88a8      	ldrh	r0, [r5, #4]
    f9b0:	8120      	strh	r0, [r4, #8]
    f9b2:	e798      	b.n	f8e6 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>

0000f9b4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    f9b4:	b4f0      	push	{r4, r5, r6, r7}
    f9b6:	8150      	strh	r0, [r2, #10]
    f9b8:	890d      	ldrh	r5, [r1, #8]
    f9ba:	4614      	mov	r4, r2
    f9bc:	8195      	strh	r5, [r2, #12]
    f9be:	898a      	ldrh	r2, [r1, #12]
    f9c0:	81e2      	strh	r2, [r4, #14]
    f9c2:	8948      	ldrh	r0, [r1, #10]
    f9c4:	8220      	strh	r0, [r4, #16]
    f9c6:	89ce      	ldrh	r6, [r1, #14]
    f9c8:	8266      	strh	r6, [r4, #18]
    f9ca:	8dcf      	ldrh	r7, [r1, #46]	; 0x2e
    f9cc:	42b7      	cmp	r7, r6
    f9ce:	d108      	bne.n	f9e2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    f9d0:	8d4e      	ldrh	r6, [r1, #42]	; 0x2a
    f9d2:	4286      	cmp	r6, r0
    f9d4:	d105      	bne.n	f9e2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    f9d6:	8e0e      	ldrh	r6, [r1, #48]	; 0x30
    f9d8:	4296      	cmp	r6, r2
    f9da:	d102      	bne.n	f9e2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    f9dc:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    f9de:	42aa      	cmp	r2, r5
    f9e0:	d001      	beq.n	f9e6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    f9e2:	2201      	movs	r2, #1
    f9e4:	e000      	b.n	f9e8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    f9e6:	2200      	movs	r2, #0
    f9e8:	7522      	strb	r2, [r4, #20]
    f9ea:	8548      	strh	r0, [r1, #42]	; 0x2a
    f9ec:	8a60      	ldrh	r0, [r4, #18]
    f9ee:	85c8      	strh	r0, [r1, #46]	; 0x2e
    f9f0:	89a0      	ldrh	r0, [r4, #12]
    f9f2:	8588      	strh	r0, [r1, #44]	; 0x2c
    f9f4:	89e0      	ldrh	r0, [r4, #14]
    f9f6:	8608      	strh	r0, [r1, #48]	; 0x30
    f9f8:	4620      	mov	r0, r4
    f9fa:	bcf0      	pop	{r4, r5, r6, r7}
    f9fc:	2210      	movs	r2, #16
    f9fe:	4619      	mov	r1, r3
    fa00:	f7f7 beec 	b.w	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>

0000fa04 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    fa04:	b510      	push	{r4, lr}
    fa06:	888c      	ldrh	r4, [r1, #4]
    fa08:	890a      	ldrh	r2, [r1, #8]
    fa0a:	884b      	ldrh	r3, [r1, #2]
    fa0c:	88c9      	ldrh	r1, [r1, #6]
    fa0e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
    fa12:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
    fa16:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
    fa1a:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    fa1e:	bd10      	pop	{r4, pc}

0000fa20 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    fa20:	b570      	push	{r4, r5, r6, lr}
    fa22:	4615      	mov	r5, r2
    fa24:	460c      	mov	r4, r1
    fa26:	f000 f8ce 	bl	fbc6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    fa2a:	3096      	adds	r0, #150	; 0x96
    fa2c:	4428      	add	r0, r5
    fa2e:	42a0      	cmp	r0, r4
    fa30:	d801      	bhi.n	fa36 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    fa32:	1a20      	subs	r0, r4, r0
    fa34:	bd70      	pop	{r4, r5, r6, pc}
    fa36:	2000      	movs	r0, #0
    fa38:	bd70      	pop	{r4, r5, r6, pc}

0000fa3a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    fa3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fa3e:	4604      	mov	r4, r0
    fa40:	8f47      	ldrh	r7, [r0, #58]	; 0x3a
    fa42:	8fc6      	ldrh	r6, [r0, #62]	; 0x3e
    fa44:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
    fa48:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    fa4c:	4285      	cmp	r5, r0
    fa4e:	d300      	bcc.n	fa52 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    fa50:	4605      	mov	r5, r0
    fa52:	4620      	mov	r0, r4
    fa54:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
    fa58:	f000 f8a5 	bl	fba6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    fa5c:	4601      	mov	r1, r0
    fa5e:	8765      	strh	r5, [r4, #58]	; 0x3a
    fa60:	87e1      	strh	r1, [r4, #62]	; 0x3e
    fa62:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
    fa66:	f104 0030 	add.w	r0, r4, #48	; 0x30
    fa6a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    fa6e:	4680      	mov	r8, r0
    fa70:	42aa      	cmp	r2, r5
    fa72:	d200      	bcs.n	fa76 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    fa74:	462a      	mov	r2, r5
    fa76:	428b      	cmp	r3, r1
    fa78:	d200      	bcs.n	fa7c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    fa7a:	460b      	mov	r3, r1
    fa7c:	8202      	strh	r2, [r0, #16]
    fa7e:	f8a8 3012 	strh.w	r3, [r8, #18]
    fa82:	42bd      	cmp	r5, r7
    fa84:	d101      	bne.n	fa8a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    fa86:	42b1      	cmp	r1, r6
    fa88:	d001      	beq.n	fa8e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    fa8a:	2001      	movs	r0, #1
    fa8c:	e000      	b.n	fa90 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x56>
    fa8e:	2000      	movs	r0, #0
    fa90:	4681      	mov	r9, r0
    fa92:	f8b4 504c 	ldrh.w	r5, [r4, #76]	; 0x4c
    fa96:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
    fa9a:	8f27      	ldrh	r7, [r4, #56]	; 0x38
    fa9c:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    fa9e:	4285      	cmp	r5, r0
    faa0:	d300      	bcc.n	faa4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x6a>
    faa2:	4605      	mov	r5, r0
    faa4:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
    faa8:	4620      	mov	r0, r4
    faaa:	f000 f884 	bl	fbb6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    faae:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
    fab2:	2902      	cmp	r1, #2
    fab4:	d108      	bne.n	fac8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8e>
    fab6:	42af      	cmp	r7, r5
    fab8:	d200      	bcs.n	fabc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x82>
    faba:	463d      	mov	r5, r7
    fabc:	4286      	cmp	r6, r0
    fabe:	d200      	bcs.n	fac2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x88>
    fac0:	4630      	mov	r0, r6
    fac2:	2100      	movs	r1, #0
    fac4:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    fac8:	f8a8 5008 	strh.w	r5, [r8, #8]
    facc:	f8a8 000c 	strh.w	r0, [r8, #12]
    fad0:	42bd      	cmp	r5, r7
    fad2:	d101      	bne.n	fad8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    fad4:	42b0      	cmp	r0, r6
    fad6:	d001      	beq.n	fadc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa2>
    fad8:	2001      	movs	r0, #1
    fada:	e000      	b.n	fade <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa4>
    fadc:	2000      	movs	r0, #0
    fade:	ea40 0009 	orr.w	r0, r0, r9
    fae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000fae6 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    fae6:	6840      	ldr	r0, [r0, #4]
    fae8:	4770      	bx	lr

0000faea <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    faea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    faee:	4616      	mov	r6, r2
    faf0:	460f      	mov	r7, r1
    faf2:	4604      	mov	r4, r0
    faf4:	f000 f867 	bl	fbc6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    faf8:	4605      	mov	r5, r0
    fafa:	463a      	mov	r2, r7
    fafc:	6921      	ldr	r1, [r4, #16]
    fafe:	6b20      	ldr	r0, [r4, #48]	; 0x30
    fb00:	f000 f84c 	bl	fb9c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    fb04:	19a9      	adds	r1, r5, r6
    fb06:	4281      	cmp	r1, r0
    fb08:	d300      	bcc.n	fb0c <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    fb0a:	4608      	mov	r0, r1
    fb0c:	6360      	str	r0, [r4, #52]	; 0x34
    fb0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000fb12 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    fb12:	221b      	movs	r2, #27
    fb14:	8402      	strh	r2, [r0, #32]
    fb16:	8382      	strh	r2, [r0, #28]
    fb18:	82c2      	strh	r2, [r0, #22]
    fb1a:	8282      	strh	r2, [r0, #20]
    fb1c:	8142      	strh	r2, [r0, #10]
    fb1e:	8202      	strh	r2, [r0, #16]
    fb20:	8102      	strh	r2, [r0, #8]
    fb22:	8542      	strh	r2, [r0, #42]	; 0x2a
    fb24:	8582      	strh	r2, [r0, #44]	; 0x2c
    fb26:	8482      	strh	r2, [r0, #36]	; 0x24
    fb28:	2900      	cmp	r1, #0
    fb2a:	d10a      	bne.n	fb42 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    fb2c:	f44f 71a4 	mov.w	r1, #328	; 0x148
    fb30:	8441      	strh	r1, [r0, #34]	; 0x22
    fb32:	83c1      	strh	r1, [r0, #30]
    fb34:	8341      	strh	r1, [r0, #26]
    fb36:	8301      	strh	r1, [r0, #24]
    fb38:	81c1      	strh	r1, [r0, #14]
    fb3a:	8241      	strh	r1, [r0, #18]
    fb3c:	8181      	strh	r1, [r0, #12]
    fb3e:	85c1      	strh	r1, [r0, #46]	; 0x2e
    fb40:	8601      	strh	r1, [r0, #48]	; 0x30
    fb42:	4770      	bx	lr

0000fb44 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    fb44:	6800      	ldr	r0, [r0, #0]
    fb46:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    fb4a:	4290      	cmp	r0, r2
    fb4c:	d903      	bls.n	fb56 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    fb4e:	1a40      	subs	r0, r0, r1
    fb50:	389c      	subs	r0, #156	; 0x9c
    fb52:	0840      	lsrs	r0, r0, #1
    fb54:	4770      	bx	lr
    fb56:	2000      	movs	r0, #0
    fb58:	4770      	bx	lr

0000fb5a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    fb5a:	b510      	push	{r4, lr}
    fb5c:	9c02      	ldr	r4, [sp, #8]
    fb5e:	8281      	strh	r1, [r0, #20]
    fb60:	82c2      	strh	r2, [r0, #22]
    fb62:	8303      	strh	r3, [r0, #24]
    fb64:	8344      	strh	r4, [r0, #26]
    fb66:	bd10      	pop	{r4, pc}

0000fb68 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    fb68:	b430      	push	{r4, r5}
    fb6a:	8150      	strh	r0, [r2, #10]
    fb6c:	8a88      	ldrh	r0, [r1, #20]
    fb6e:	8190      	strh	r0, [r2, #12]
    fb70:	8ac8      	ldrh	r0, [r1, #22]
    fb72:	81d0      	strh	r0, [r2, #14]
    fb74:	8b08      	ldrh	r0, [r1, #24]
    fb76:	8210      	strh	r0, [r2, #16]
    fb78:	8b48      	ldrh	r0, [r1, #26]
    fb7a:	4614      	mov	r4, r2
    fb7c:	8250      	strh	r0, [r2, #18]
    fb7e:	4620      	mov	r0, r4
    fb80:	bc30      	pop	{r4, r5}
    fb82:	221a      	movs	r2, #26
    fb84:	4619      	mov	r1, r3
    fb86:	f7f7 be29 	b.w	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    fb8a:	2902      	cmp	r1, #2
    fb8c:	d003      	beq.n	fb96 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2e>
    fb8e:	00c0      	lsls	r0, r0, #3
    fb90:	3070      	adds	r0, #112	; 0x70
    fb92:	b280      	uxth	r0, r0
    fb94:	4770      	bx	lr
    fb96:	0080      	lsls	r0, r0, #2
    fb98:	303c      	adds	r0, #60	; 0x3c
    fb9a:	e7fa      	b.n	fb92 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    fb9c:	4288      	cmp	r0, r1
    fb9e:	d300      	bcc.n	fba2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    fba0:	4608      	mov	r0, r1
    fba2:	1a80      	subs	r0, r0, r2
    fba4:	4770      	bx	lr
    fba6:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
    fbaa:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
    fbae:	4281      	cmp	r1, r0
    fbb0:	d200      	bcs.n	fbb4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4c>
    fbb2:	4608      	mov	r0, r1
    fbb4:	4770      	bx	lr
    fbb6:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    fbba:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    fbbe:	4281      	cmp	r1, r0
    fbc0:	d200      	bcs.n	fbc4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>
    fbc2:	4608      	mov	r0, r1
    fbc4:	4770      	bx	lr
    fbc6:	2196      	movs	r1, #150	; 0x96
    fbc8:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
    fbcc:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
    fbd0:	f000 b800 	b.w	fbd4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x6c>
    fbd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fbd8:	460d      	mov	r5, r1
    fbda:	4606      	mov	r6, r0
    fbdc:	4698      	mov	r8, r3
    fbde:	4617      	mov	r7, r2
    fbe0:	8f00      	ldrh	r0, [r0, #56]	; 0x38
    fbe2:	4611      	mov	r1, r2
    fbe4:	f7ff ffd1 	bl	fb8a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    fbe8:	4604      	mov	r4, r0
    fbea:	4639      	mov	r1, r7
    fbec:	4630      	mov	r0, r6
    fbee:	f7ff ffe2 	bl	fbb6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    fbf2:	42a0      	cmp	r0, r4
    fbf4:	d200      	bcs.n	fbf8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x90>
    fbf6:	4604      	mov	r4, r0
    fbf8:	f8b6 0040 	ldrh.w	r0, [r6, #64]	; 0x40
    fbfc:	4641      	mov	r1, r8
    fbfe:	f7ff ffc4 	bl	fb8a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    fc02:	4607      	mov	r7, r0
    fc04:	4641      	mov	r1, r8
    fc06:	4630      	mov	r0, r6
    fc08:	f7ff ffcd 	bl	fba6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    fc0c:	42b8      	cmp	r0, r7
    fc0e:	d300      	bcc.n	fc12 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xaa>
    fc10:	4638      	mov	r0, r7
    fc12:	4420      	add	r0, r4
    fc14:	4428      	add	r0, r5
    fc16:	1d80      	adds	r0, r0, #6
    fc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fc1c:	b510      	push	{r4, lr}
    fc1e:	4604      	mov	r4, r0
    fc20:	2108      	movs	r1, #8
    fc22:	4620      	mov	r0, r4
    fc24:	f7f5 fd80 	bl	5728 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    fc28:	6820      	ldr	r0, [r4, #0]
    fc2a:	2800      	cmp	r0, #0
    fc2c:	d102      	bne.n	fc34 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    fc2e:	6860      	ldr	r0, [r4, #4]
    fc30:	2800      	cmp	r0, #0
    fc32:	d0f5      	beq.n	fc20 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb8>
    fc34:	bd10      	pop	{r4, pc}
    fc36:	2801      	cmp	r0, #1
    fc38:	d102      	bne.n	fc40 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd8>
    fc3a:	7948      	ldrb	r0, [r1, #5]
    fc3c:	0980      	lsrs	r0, r0, #6
    fc3e:	d001      	beq.n	fc44 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    fc40:	2000      	movs	r0, #0
    fc42:	4770      	bx	lr
    fc44:	2001      	movs	r0, #1
    fc46:	4770      	bx	lr
    fc48:	2801      	cmp	r0, #1
    fc4a:	d106      	bne.n	fc5a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf2>
    fc4c:	7948      	ldrb	r0, [r1, #5]
    fc4e:	2101      	movs	r1, #1
    fc50:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    fc54:	d101      	bne.n	fc5a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf2>
    fc56:	2001      	movs	r0, #1
    fc58:	4770      	bx	lr
    fc5a:	2000      	movs	r0, #0
    fc5c:	4770      	bx	lr
    fc5e:	2802      	cmp	r0, #2
    fc60:	d003      	beq.n	fc6a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x102>
    fc62:	2803      	cmp	r0, #3
    fc64:	d001      	beq.n	fc6a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x102>
    fc66:	2000      	movs	r0, #0
    fc68:	4770      	bx	lr
    fc6a:	2001      	movs	r0, #1
    fc6c:	4770      	bx	lr

0000fc6e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    fc6e:	b510      	push	{r4, lr}
    fc70:	4604      	mov	r4, r0
    fc72:	7c00      	ldrb	r0, [r0, #16]
    fc74:	f7ff fff3 	bl	fc5e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf6>
    fc78:	b148      	cbz	r0, fc8e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    fc7a:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    fc7e:	f104 0150 	add.w	r1, r4, #80	; 0x50
    fc82:	f7ff f993 	bl	efac <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    fc86:	2808      	cmp	r0, #8
    fc88:	d001      	beq.n	fc8e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    fc8a:	2001      	movs	r0, #1
    fc8c:	bd10      	pop	{r4, pc}
    fc8e:	7c20      	ldrb	r0, [r4, #16]
    fc90:	b118      	cbz	r0, fc9a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    fc92:	2802      	cmp	r0, #2
    fc94:	d001      	beq.n	fc9a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    fc96:	7de0      	ldrb	r0, [r4, #23]
    fc98:	bd10      	pop	{r4, pc}
    fc9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fc9e:	2000      	movs	r0, #0
    fca0:	f7f6 bb78 	b.w	6394 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000fca4 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    fca4:	b508      	push	{r3, lr}
    fca6:	f890 106c 	ldrb.w	r1, [r0, #108]	; 0x6c
    fcaa:	f88d 1000 	strb.w	r1, [sp]
    fcae:	9900      	ldr	r1, [sp, #0]
    fcb0:	9100      	str	r1, [sp, #0]
    fcb2:	f89d 1000 	ldrb.w	r1, [sp]
    fcb6:	b109      	cbz	r1, fcbc <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    fcb8:	2001      	movs	r0, #1
    fcba:	bd08      	pop	{r3, pc}
    fcbc:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    fcc0:	f88d 0000 	strb.w	r0, [sp]
    fcc4:	9800      	ldr	r0, [sp, #0]
    fcc6:	9000      	str	r0, [sp, #0]
    fcc8:	f89d 0000 	ldrb.w	r0, [sp]
    fccc:	2000      	movs	r0, #0
    fcce:	bd08      	pop	{r3, pc}

0000fcd0 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    fcd0:	20ff      	movs	r0, #255	; 0xff
    fcd2:	7008      	strb	r0, [r1, #0]
    fcd4:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    fcd6:	f7ff b869 	b.w	edac <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000fcda <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    fcda:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fcdc:	460d      	mov	r5, r1
    fcde:	4604      	mov	r4, r0
    fce0:	f44f 7288 	mov.w	r2, #272	; 0x110
    fce4:	2100      	movs	r1, #0
    fce6:	f7fd ff4f 	bl	db88 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    fcea:	20ff      	movs	r0, #255	; 0xff
    fcec:	7020      	strb	r0, [r4, #0]
    fcee:	207f      	movs	r0, #127	; 0x7f
    fcf0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    fcf4:	2013      	movs	r0, #19
    fcf6:	8060      	strh	r0, [r4, #2]
    fcf8:	f7f6 f954 	bl	5fa4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    fcfc:	4601      	mov	r1, r0
    fcfe:	62e0      	str	r0, [r4, #44]	; 0x2c
    fd00:	2200      	movs	r2, #0
    fd02:	4668      	mov	r0, sp
    fd04:	f7fe ffbc 	bl	ec80 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fd08:	2200      	movs	r2, #0
    fd0a:	2101      	movs	r1, #1
    fd0c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fd0e:	f7ff f82d 	bl	ed6c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fd12:	2204      	movs	r2, #4
    fd14:	4668      	mov	r0, sp
    fd16:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    fd18:	f7fe ffb2 	bl	ec80 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fd1c:	2200      	movs	r2, #0
    fd1e:	4611      	mov	r1, r2
    fd20:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fd22:	f7ff f823 	bl	ed6c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fd26:	73a5      	strb	r5, [r4, #14]
    fd28:	f104 0020 	add.w	r0, r4, #32
    fd2c:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    fd30:	f000 b994 	b.w	1005c <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000fd34 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    fd34:	7880      	ldrb	r0, [r0, #2]
    fd36:	f3c0 0080 	ubfx	r0, r0, #2, #1
    fd3a:	b108      	cbz	r0, fd40 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    fd3c:	2000      	movs	r0, #0
    fd3e:	4770      	bx	lr
    fd40:	201f      	movs	r0, #31
    fd42:	4770      	bx	lr

0000fd44 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    fd44:	f7f8 bc80 	b.w	8648 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>

0000fd48 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI>:
    fd48:	b570      	push	{r4, r5, r6, lr}
    fd4a:	2300      	movs	r3, #0
    fd4c:	2a03      	cmp	r2, #3
    fd4e:	d015      	beq.n	fd7c <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x34>
    fd50:	2a0e      	cmp	r2, #14
    fd52:	d01a      	beq.n	fd8a <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x42>
    fd54:	2a12      	cmp	r2, #18
    fd56:	d030      	beq.n	fdba <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x72>
    fd58:	2a19      	cmp	r2, #25
    fd5a:	d004      	beq.n	fd66 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x1e>
    fd5c:	f240 21d2 	movw	r1, #722	; 0x2d2
    fd60:	202d      	movs	r0, #45	; 0x2d
    fd62:	f7f5 fc35 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd66:	704b      	strb	r3, [r1, #1]
    fd68:	2217      	movs	r2, #23
    fd6a:	700a      	strb	r2, [r1, #0]
    fd6c:	f850 2fb5 	ldr.w	r2, [r0, #181]!
    fd70:	604a      	str	r2, [r1, #4]
    fd72:	6842      	ldr	r2, [r0, #4]
    fd74:	608a      	str	r2, [r1, #8]
    fd76:	7a00      	ldrb	r0, [r0, #8]
    fd78:	7308      	strb	r0, [r1, #12]
    fd7a:	bd70      	pop	{r4, r5, r6, pc}
    fd7c:	704b      	strb	r3, [r1, #1]
    fd7e:	2205      	movs	r2, #5
    fd80:	700a      	strb	r2, [r1, #0]
    fd82:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
    fd86:	6048      	str	r0, [r1, #4]
    fd88:	bd70      	pop	{r4, r5, r6, pc}
    fd8a:	4605      	mov	r5, r0
    fd8c:	704b      	strb	r3, [r1, #1]
    fd8e:	2011      	movs	r0, #17
    fd90:	460c      	mov	r4, r1
    fd92:	7008      	strb	r0, [r1, #0]
    fd94:	2220      	movs	r2, #32
    fd96:	f105 016e 	add.w	r1, r5, #110	; 0x6e
    fd9a:	1d20      	adds	r0, r4, #4
    fd9c:	f7fd fe7a 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fda0:	2001      	movs	r0, #1
    fda2:	7220      	strb	r0, [r4, #8]
    fda4:	7920      	ldrb	r0, [r4, #4]
    fda6:	2800      	cmp	r0, #0
    fda8:	d1ee      	bne.n	fd88 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x40>
    fdaa:	69e8      	ldr	r0, [r5, #28]
    fdac:	8800      	ldrh	r0, [r0, #0]
    fdae:	f7f6 f837 	bl	5e20 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    fdb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fdb6:	f7fe bd75 	b.w	e8a4 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    fdba:	704b      	strb	r3, [r1, #1]
    fdbc:	2214      	movs	r2, #20
    fdbe:	700a      	strb	r2, [r1, #0]
    fdc0:	f850 2f98 	ldr.w	r2, [r0, #152]!
    fdc4:	604a      	str	r2, [r1, #4]
    fdc6:	8880      	ldrh	r0, [r0, #4]
    fdc8:	8108      	strh	r0, [r1, #8]
    fdca:	bd70      	pop	{r4, r5, r6, pc}

0000fdcc <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    fdcc:	6880      	ldr	r0, [r0, #8]
    fdce:	4770      	bx	lr

0000fdd0 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    fdd0:	2001      	movs	r0, #1
    fdd2:	4770      	bx	lr

0000fdd4 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    fdd4:	b510      	push	{r4, lr}
    fdd6:	4604      	mov	r4, r0
    fdd8:	3020      	adds	r0, #32
    fdda:	f000 f8ff 	bl	ffdc <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    fdde:	8861      	ldrh	r1, [r4, #2]
    fde0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fde4:	2228      	movs	r2, #40	; 0x28
    fde6:	f7f8 be17 	b.w	8a18 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000fdea <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    fdea:	2200      	movs	r2, #0
    fdec:	8502      	strh	r2, [r0, #40]	; 0x28
    fdee:	8843      	ldrh	r3, [r0, #2]
    fdf0:	2b1d      	cmp	r3, #29
    fdf2:	d001      	beq.n	fdf8 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    fdf4:	7341      	strb	r1, [r0, #13]
    fdf6:	4770      	bx	lr
    fdf8:	7342      	strb	r2, [r0, #13]
    fdfa:	4770      	bx	lr

0000fdfc <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    fdfc:	b510      	push	{r4, lr}
    fdfe:	2400      	movs	r4, #0
    fe00:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    fe02:	f7fe ffa1 	bl	ed48 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    fe06:	b100      	cbz	r0, fe0a <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    fe08:	2001      	movs	r0, #1
    fe0a:	4384      	bics	r4, r0
    fe0c:	f084 0001 	eor.w	r0, r4, #1
    fe10:	bd10      	pop	{r4, pc}

0000fe12 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    fe12:	2000      	movs	r0, #0
    fe14:	4770      	bx	lr

0000fe16 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    fe16:	7880      	ldrb	r0, [r0, #2]
    fe18:	f000 0001 	and.w	r0, r0, #1
    fe1c:	4770      	bx	lr

0000fe1e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    fe1e:	7880      	ldrb	r0, [r0, #2]
    fe20:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    fe24:	4770      	bx	lr

0000fe26 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    fe26:	2001      	movs	r0, #1
    fe28:	4770      	bx	lr

0000fe2a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    fe2a:	7880      	ldrb	r0, [r0, #2]
    fe2c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    fe30:	4770      	bx	lr

0000fe32 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    fe32:	f990 000e 	ldrsb.w	r0, [r0, #14]
    fe36:	4770      	bx	lr

0000fe38 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    fe38:	7800      	ldrb	r0, [r0, #0]
    fe3a:	28ff      	cmp	r0, #255	; 0xff
    fe3c:	d001      	beq.n	fe42 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    fe3e:	2001      	movs	r0, #1
    fe40:	4770      	bx	lr
    fe42:	2000      	movs	r0, #0
    fe44:	4770      	bx	lr

0000fe46 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    fe46:	680a      	ldr	r2, [r1, #0]
    fe48:	f840 2f11 	str.w	r2, [r0, #17]!
    fe4c:	8889      	ldrh	r1, [r1, #4]
    fe4e:	8081      	strh	r1, [r0, #4]
    fe50:	2101      	movs	r1, #1
    fe52:	7181      	strb	r1, [r0, #6]
    fe54:	4770      	bx	lr

0000fe56 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    fe56:	7b00      	ldrb	r0, [r0, #12]
    fe58:	4770      	bx	lr

0000fe5a <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    fe5a:	2001      	movs	r0, #1
    fe5c:	4770      	bx	lr

0000fe5e <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    fe5e:	61c1      	str	r1, [r0, #28]
    fe60:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
    fe64:	724a      	strb	r2, [r1, #9]
    fe66:	f8d0 2049 	ldr.w	r2, [r0, #73]	; 0x49
    fe6a:	f8c1 200a 	str.w	r2, [r1, #10]
    fe6e:	f8b0 004d 	ldrh.w	r0, [r0, #77]	; 0x4d
    fe72:	81c8      	strh	r0, [r1, #14]
    fe74:	4770      	bx	lr

0000fe76 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    fe76:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    fe7a:	4770      	bx	lr

0000fe7c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    fe7c:	b510      	push	{r4, lr}
    fe7e:	4604      	mov	r4, r0
    fe80:	7880      	ldrb	r0, [r0, #2]
    fe82:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    fe86:	b158      	cbz	r0, fea0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    fe88:	233c      	movs	r3, #60	; 0x3c
    fe8a:	22ff      	movs	r2, #255	; 0xff
    fe8c:	4620      	mov	r0, r4
    fe8e:	69e1      	ldr	r1, [r4, #28]
    fe90:	f7f8 fc06 	bl	86a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x434>
    fe94:	220e      	movs	r2, #14
    fe96:	4621      	mov	r1, r4
    fe98:	f104 0064 	add.w	r0, r4, #100	; 0x64
    fe9c:	f7f7 fc9e 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    fea0:	78a0      	ldrb	r0, [r4, #2]
    fea2:	07c0      	lsls	r0, r0, #31
    fea4:	f7f7 fd6c 	bl	7980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    fea8:	2001      	movs	r0, #1
    feaa:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
    feae:	bd10      	pop	{r4, pc}

0000feb0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    feb0:	7bc0      	ldrb	r0, [r0, #15]
    feb2:	2800      	cmp	r0, #0
    feb4:	d000      	beq.n	feb8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    feb6:	2001      	movs	r0, #1
    feb8:	4770      	bx	lr
    feba:	b510      	push	{r4, lr}
    febc:	f7ff f876 	bl	efac <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    fec0:	4604      	mov	r4, r0
    fec2:	f7f7 f90d 	bl	70e0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    fec6:	b138      	cbz	r0, fed8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    fec8:	4620      	mov	r0, r4
    feca:	f7f7 f841 	bl	6f50 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    fece:	b118      	cbz	r0, fed8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    fed0:	2110      	movs	r1, #16
    fed2:	f7ff fa5d 	bl	f390 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    fed6:	b108      	cbz	r0, fedc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    fed8:	2000      	movs	r0, #0
    feda:	bd10      	pop	{r4, pc}
    fedc:	2001      	movs	r0, #1
    fede:	bd10      	pop	{r4, pc}
    fee0:	2101      	movs	r1, #1
    fee2:	f7f8 b843 	b.w	7f6c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    fee6:	2101      	movs	r1, #1
    fee8:	f7f8 b840 	b.w	7f6c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    feec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fef0:	4604      	mov	r4, r0
    fef2:	460f      	mov	r7, r1
    fef4:	7e40      	ldrb	r0, [r0, #25]
    fef6:	f7f6 ffeb 	bl	6ed0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    fefa:	4606      	mov	r6, r0
    fefc:	7e20      	ldrb	r0, [r4, #24]
    fefe:	f104 0549 	add.w	r5, r4, #73	; 0x49
    ff02:	b120      	cbz	r0, ff0e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x5e>
    ff04:	b11e      	cbz	r6, ff0e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x5e>
    ff06:	7e60      	ldrb	r0, [r4, #25]
    ff08:	f7f6 ffd6 	bl	6eb8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    ff0c:	b1a0      	cbz	r0, ff38 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x88>
    ff0e:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    ff12:	2800      	cmp	r0, #0
    ff14:	d024      	beq.n	ff60 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    ff16:	7ea0      	ldrb	r0, [r4, #26]
    ff18:	2800      	cmp	r0, #0
    ff1a:	d021      	beq.n	ff60 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    ff1c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    ff20:	4629      	mov	r1, r5
    ff22:	f7ff fe91 	bl	fc48 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe0>
    ff26:	b1a8      	cbz	r0, ff54 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa4>
    ff28:	f7f6 ffc2 	bl	6eb0 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    ff2c:	463a      	mov	r2, r7
    ff2e:	4629      	mov	r1, r5
    ff30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ff34:	f7fe bfd2 	b.w	eedc <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    ff38:	2001      	movs	r0, #1
    ff3a:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    ff3e:	463a      	mov	r2, r7
    ff40:	4629      	mov	r1, r5
    ff42:	4630      	mov	r0, r6
    ff44:	f7fe ffca 	bl	eedc <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    ff48:	7e61      	ldrb	r1, [r4, #25]
    ff4a:	4628      	mov	r0, r5
    ff4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ff50:	f7f6 bfca 	b.w	6ee8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    ff54:	4639      	mov	r1, r7
    ff56:	4628      	mov	r0, r5
    ff58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ff5c:	f7fe bfad 	b.w	eeba <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    ff60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ff64:	b510      	push	{r4, lr}
    ff66:	4604      	mov	r4, r0
    ff68:	4608      	mov	r0, r1
    ff6a:	f7fc fc1f 	bl	c7ac <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    ff6e:	7921      	ldrb	r1, [r4, #4]
    ff70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff74:	2025      	movs	r0, #37	; 0x25
    ff76:	f7fc bbef 	b.w	c758 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    ff7a:	b510      	push	{r4, lr}
    ff7c:	4604      	mov	r4, r0
    ff7e:	3026      	adds	r0, #38	; 0x26
    ff80:	f7fc fbca 	bl	c718 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    ff84:	2800      	cmp	r0, #0
    ff86:	d102      	bne.n	ff8e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xde>
    ff88:	207f      	movs	r0, #127	; 0x7f
    ff8a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    ff8e:	bd10      	pop	{r4, pc}
    ff90:	b570      	push	{r4, r5, r6, lr}
    ff92:	4614      	mov	r4, r2
    ff94:	461d      	mov	r5, r3
    ff96:	4606      	mov	r6, r0
    ff98:	f7f3 ff42 	bl	3e20 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ff9c:	1900      	adds	r0, r0, r4
    ff9e:	4169      	adcs	r1, r5
    ffa0:	e9c6 0100 	strd	r0, r1, [r6]
    ffa4:	bd70      	pop	{r4, r5, r6, pc}
    ffa6:	7802      	ldrb	r2, [r0, #0]
    ffa8:	2320      	movs	r3, #32
    ffaa:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    ffae:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    ffb2:	430a      	orrs	r2, r1
    ffb4:	7002      	strb	r2, [r0, #0]
    ffb6:	4770      	bx	lr

0000ffb8 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    ffb8:	b570      	push	{r4, r5, r6, lr}
    ffba:	7001      	strb	r1, [r0, #0]
    ffbc:	7042      	strb	r2, [r0, #1]
    ffbe:	4614      	mov	r4, r2
    ffc0:	460d      	mov	r5, r1
    ffc2:	7880      	ldrb	r0, [r0, #2]
    ffc4:	f000 f87f 	bl	100c6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ffc8:	fb10 f005 	smulbb	r0, r0, r5
    ffcc:	4360      	muls	r0, r4
    ffce:	28ff      	cmp	r0, #255	; 0xff
    ffd0:	d303      	bcc.n	ffda <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    ffd2:	215c      	movs	r1, #92	; 0x5c
    ffd4:	202e      	movs	r0, #46	; 0x2e
    ffd6:	f7f5 fafb 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ffda:	bd70      	pop	{r4, r5, r6, pc}

0000ffdc <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    ffdc:	b510      	push	{r4, lr}
    ffde:	4604      	mov	r4, r0
    ffe0:	7880      	ldrb	r0, [r0, #2]
    ffe2:	f000 f870 	bl	100c6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ffe6:	7861      	ldrb	r1, [r4, #1]
    ffe8:	7822      	ldrb	r2, [r4, #0]
    ffea:	fb11 f102 	smulbb	r1, r1, r2
    ffee:	4348      	muls	r0, r1
    fff0:	b2c0      	uxtb	r0, r0
    fff2:	bd10      	pop	{r4, pc}

0000fff4 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    fff4:	b510      	push	{r4, lr}
    fff6:	4604      	mov	r4, r0
    fff8:	f000 f84d 	bl	10096 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    fffc:	7961      	ldrb	r1, [r4, #5]
    fffe:	1c49      	adds	r1, r1, #1
   10000:	b2c9      	uxtb	r1, r1
   10002:	7161      	strb	r1, [r4, #5]
   10004:	7862      	ldrb	r2, [r4, #1]
   10006:	4291      	cmp	r1, r2
   10008:	d10b      	bne.n	10022 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
   1000a:	2200      	movs	r2, #0
   1000c:	7162      	strb	r2, [r4, #5]
   1000e:	78e1      	ldrb	r1, [r4, #3]
   10010:	4301      	orrs	r1, r0
   10012:	70e1      	strb	r1, [r4, #3]
   10014:	78a3      	ldrb	r3, [r4, #2]
   10016:	4299      	cmp	r1, r3
   10018:	d103      	bne.n	10022 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
   1001a:	70e2      	strb	r2, [r4, #3]
   1001c:	7921      	ldrb	r1, [r4, #4]
   1001e:	1c49      	adds	r1, r1, #1
   10020:	7121      	strb	r1, [r4, #4]
   10022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10026:	f000 b825 	b.w	10074 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0001002a <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
   1002a:	7081      	strb	r1, [r0, #2]
   1002c:	4770      	bx	lr

0001002e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
   1002e:	b570      	push	{r4, r5, r6, lr}
   10030:	4604      	mov	r4, r0
   10032:	7880      	ldrb	r0, [r0, #2]
   10034:	f000 f847 	bl	100c6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
   10038:	7861      	ldrb	r1, [r4, #1]
   1003a:	fb11 f500 	smulbb	r5, r1, r0
   1003e:	78e0      	ldrb	r0, [r4, #3]
   10040:	f000 f841 	bl	100c6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
   10044:	7861      	ldrb	r1, [r4, #1]
   10046:	7962      	ldrb	r2, [r4, #5]
   10048:	fb10 2001 	smlabb	r0, r0, r1, r2
   1004c:	7821      	ldrb	r1, [r4, #0]
   1004e:	7922      	ldrb	r2, [r4, #4]
   10050:	1a89      	subs	r1, r1, r2
   10052:	fb11 f105 	smulbb	r1, r1, r5
   10056:	1a08      	subs	r0, r1, r0
   10058:	b2c0      	uxtb	r0, r0
   1005a:	bd70      	pop	{r4, r5, r6, pc}

0001005c <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
   1005c:	2100      	movs	r1, #0
   1005e:	6001      	str	r1, [r0, #0]
   10060:	8081      	strh	r1, [r0, #4]
   10062:	2101      	movs	r1, #1
   10064:	7041      	strb	r1, [r0, #1]
   10066:	7001      	strb	r1, [r0, #0]
   10068:	4770      	bx	lr

0001006a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
   1006a:	2100      	movs	r1, #0
   1006c:	70c1      	strb	r1, [r0, #3]
   1006e:	7141      	strb	r1, [r0, #5]
   10070:	7101      	strb	r1, [r0, #4]
   10072:	4770      	bx	lr
   10074:	b510      	push	{r4, lr}
   10076:	2801      	cmp	r0, #1
   10078:	d007      	beq.n	1008a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
   1007a:	2802      	cmp	r0, #2
   1007c:	d007      	beq.n	1008e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
   1007e:	2804      	cmp	r0, #4
   10080:	d007      	beq.n	10092 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
   10082:	2139      	movs	r1, #57	; 0x39
   10084:	202e      	movs	r0, #46	; 0x2e
   10086:	f7f5 faa3 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1008a:	2025      	movs	r0, #37	; 0x25
   1008c:	bd10      	pop	{r4, pc}
   1008e:	2026      	movs	r0, #38	; 0x26
   10090:	bd10      	pop	{r4, pc}
   10092:	2027      	movs	r0, #39	; 0x27
   10094:	bd10      	pop	{r4, pc}
   10096:	4601      	mov	r1, r0
   10098:	2000      	movs	r0, #0
   1009a:	788a      	ldrb	r2, [r1, #2]
   1009c:	07d3      	lsls	r3, r2, #31
   1009e:	d002      	beq.n	100a6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
   100a0:	78cb      	ldrb	r3, [r1, #3]
   100a2:	07db      	lsls	r3, r3, #31
   100a4:	d006      	beq.n	100b4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
   100a6:	0793      	lsls	r3, r2, #30
   100a8:	d506      	bpl.n	100b8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
   100aa:	78cb      	ldrb	r3, [r1, #3]
   100ac:	079b      	lsls	r3, r3, #30
   100ae:	d403      	bmi.n	100b8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
   100b0:	2002      	movs	r0, #2
   100b2:	4770      	bx	lr
   100b4:	2001      	movs	r0, #1
   100b6:	4770      	bx	lr
   100b8:	0752      	lsls	r2, r2, #29
   100ba:	d5fc      	bpl.n	100b6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
   100bc:	78c9      	ldrb	r1, [r1, #3]
   100be:	0749      	lsls	r1, r1, #29
   100c0:	d4f9      	bmi.n	100b6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
   100c2:	2004      	movs	r0, #4
   100c4:	4770      	bx	lr
   100c6:	f3c0 0180 	ubfx	r1, r0, #2, #1
   100ca:	f3c0 0240 	ubfx	r2, r0, #1, #1
   100ce:	4411      	add	r1, r2
   100d0:	f000 0001 	and.w	r0, r0, #1
   100d4:	4408      	add	r0, r1
   100d6:	4770      	bx	lr

000100d8 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
   100d8:	f240 315a 	movw	r1, #858	; 0x35a
   100dc:	4348      	muls	r0, r1
   100de:	4770      	bx	lr

000100e0 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
   100e0:	f240 20ef 	movw	r0, #751	; 0x2ef
   100e4:	4770      	bx	lr
   100e6:	020e      	.short	0x020e
   100e8:	0630041c 	.word	0x0630041c
   100ec:	035a0c60 	.word	0x035a0c60
   100f0:	05c506b4 	.word	0x05c506b4
   100f4:	12250bf5 	.word	0x12250bf5
   100f8:	03b101a3 	.word	0x03b101a3
   100fc:	02ef05bf 	.word	0x02ef05bf
   10100:	09a30649 	.word	0x09a30649

00010104 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
   10104:	b510      	push	{r4, lr}
   10106:	f890 1108 	ldrb.w	r1, [r0, #264]	; 0x108
   1010a:	b109      	cbz	r1, 10110 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
   1010c:	2000      	movs	r0, #0
   1010e:	bd10      	pop	{r4, pc}
   10110:	f890 10c8 	ldrb.w	r1, [r0, #200]	; 0xc8
   10114:	b131      	cbz	r1, 10124 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
   10116:	e9d0 1233 	ldrd	r1, r2, [r0, #204]	; 0xcc
   1011a:	428a      	cmp	r2, r1
   1011c:	d902      	bls.n	10124 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
   1011e:	f7ff fead 	bl	fe7c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   10122:	e7f3      	b.n	1010c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
   10124:	2001      	movs	r0, #1
   10126:	bd10      	pop	{r4, pc}

00010128 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
   10128:	b510      	push	{r4, lr}
   1012a:	b131      	cbz	r1, 1013a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
   1012c:	2901      	cmp	r1, #1
   1012e:	d008      	beq.n	10142 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
   10130:	f240 7195 	movw	r1, #1941	; 0x795
   10134:	2030      	movs	r0, #48	; 0x30
   10136:	f7f5 fa4b 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1013a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1013e:	f000 b9ec 	b.w	1051a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x344>
   10142:	2100      	movs	r1, #0
   10144:	f880 10c8 	strb.w	r1, [r0, #200]	; 0xc8
   10148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1014c:	f000 b948 	b.w	103e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>

00010150 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
   10150:	b510      	push	{r4, lr}
   10152:	4604      	mov	r4, r0
   10154:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
   10158:	2800      	cmp	r0, #0
   1015a:	d019      	beq.n	10190 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
   1015c:	2001      	movs	r0, #1
   1015e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   10162:	4601      	mov	r1, r0
   10164:	4620      	mov	r0, r4
   10166:	f7ff fe86 	bl	fe76 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
   1016a:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   1016e:	b170      	cbz	r0, 1018e <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
   10170:	f814 0fc0 	ldrb.w	r0, [r4, #192]!
   10174:	f7f3 fa22 	bl	35bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   10178:	7820      	ldrb	r0, [r4, #0]
   1017a:	f7f3 fb87 	bl	388c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
   1017e:	f814 09c0 	ldrb.w	r0, [r4], #-192
   10182:	f7f3 fb61 	bl	3848 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   10186:	b120      	cbz	r0, 10192 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
   10188:	2000      	movs	r0, #0
   1018a:	f884 00d8 	strb.w	r0, [r4, #216]	; 0xd8
   1018e:	2000      	movs	r0, #0
   10190:	bd10      	pop	{r4, pc}
   10192:	f240 2109 	movw	r1, #521	; 0x209
   10196:	2030      	movs	r0, #48	; 0x30
   10198:	f7f5 fa1a 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001019c <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
   1019c:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
   101a0:	4770      	bx	lr

000101a2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
   101a2:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
   101a6:	4770      	bx	lr

000101a8 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
   101a8:	b50e      	push	{r1, r2, r3, lr}
   101aa:	4669      	mov	r1, sp
   101ac:	2001      	movs	r0, #1
   101ae:	f7fe fcad 	bl	eb0c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   101b2:	b138      	cbz	r0, 101c4 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
   101b4:	f240 1137 	movw	r1, #311	; 0x137
   101b8:	2030      	movs	r0, #48	; 0x30
   101ba:	f7f5 fa09 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   101be:	9802      	ldr	r0, [sp, #8]
   101c0:	f7ff ffc6 	bl	10150 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   101c4:	4668      	mov	r0, sp
   101c6:	f7f5 fc47 	bl	5a58 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   101ca:	2800      	cmp	r0, #0
   101cc:	d0f7      	beq.n	101be <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x16>
   101ce:	f7f8 fdc7 	bl	8d60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
   101d2:	2000      	movs	r0, #0
   101d4:	bd0e      	pop	{r1, r2, r3, pc}

000101d6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
   101d6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   101d8:	4604      	mov	r4, r0
   101da:	f890 01d3 	ldrb.w	r0, [r0, #467]	; 0x1d3
   101de:	2800      	cmp	r0, #0
   101e0:	d15f      	bne.n	102a2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
   101e2:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   101e6:	2803      	cmp	r0, #3
   101e8:	d15b      	bne.n	102a2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
   101ea:	f7f3 fe19 	bl	3e20 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   101ee:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
   101f2:	f8d4 223c 	ldr.w	r2, [r4, #572]	; 0x23c
   101f6:	1ac0      	subs	r0, r0, r3
   101f8:	eb61 0102 	sbc.w	r1, r1, r2
   101fc:	2300      	movs	r3, #0
   101fe:	461a      	mov	r2, r3
   10200:	1a1b      	subs	r3, r3, r0
   10202:	418a      	sbcs	r2, r1
   10204:	da4d      	bge.n	102a2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
   10206:	1c42      	adds	r2, r0, #1
   10208:	f171 0100 	sbcs.w	r1, r1, #0
   1020c:	db02      	blt.n	10214 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
   1020e:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   10212:	e036      	b.n	10282 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
   10214:	6921      	ldr	r1, [r4, #16]
   10216:	b111      	cbz	r1, 1021e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
   10218:	fbb0 f0f1 	udiv	r0, r0, r1
   1021c:	e000      	b.n	10220 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
   1021e:	2000      	movs	r0, #0
   10220:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   10224:	1c40      	adds	r0, r0, #1
   10226:	4408      	add	r0, r1
   10228:	f8a4 0214 	strh.w	r0, [r4, #532]	; 0x214
   1022c:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
   10230:	f8b4 11cc 	ldrh.w	r1, [r4, #460]	; 0x1cc
   10234:	1a08      	subs	r0, r1, r0
   10236:	b200      	sxth	r0, r0
   10238:	2800      	cmp	r0, #0
   1023a:	dd32      	ble.n	102a2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
   1023c:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
   10240:	f7f3 f9bc 	bl	35bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   10244:	2800      	cmp	r0, #0
   10246:	d02c      	beq.n	102a2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
   10248:	20ff      	movs	r0, #255	; 0xff
   1024a:	f884 0219 	strb.w	r0, [r4, #537]	; 0x219
   1024e:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	; 0xb6
   10252:	f8b4 10b4 	ldrh.w	r1, [r4, #180]	; 0xb4
   10256:	ae01      	add	r6, sp, #4
   10258:	1a40      	subs	r0, r0, r1
   1025a:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   1025e:	1e40      	subs	r0, r0, #1
   10260:	4408      	add	r0, r1
   10262:	b285      	uxth	r5, r0
   10264:	e017      	b.n	10296 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
   10266:	9600      	str	r6, [sp, #0]
   10268:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
   1026c:	2300      	movs	r3, #0
   1026e:	2201      	movs	r2, #1
   10270:	4620      	mov	r0, r4
   10272:	f7f8 fe49 	bl	8f08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
   10276:	2800      	cmp	r0, #0
   10278:	d013      	beq.n	102a2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
   1027a:	2801      	cmp	r0, #1
   1027c:	d004      	beq.n	10288 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
   1027e:	f240 6101 	movw	r1, #1537	; 0x601
   10282:	2030      	movs	r0, #48	; 0x30
   10284:	f7f5 f9a4 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10288:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
   1028c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   10290:	4408      	add	r0, r1
   10292:	f8a4 0214 	strh.w	r0, [r4, #532]	; 0x214
   10296:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
   1029a:	1a28      	subs	r0, r5, r0
   1029c:	b200      	sxth	r0, r0
   1029e:	2800      	cmp	r0, #0
   102a0:	dae1      	bge.n	10266 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
   102a2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   102a4:	2000      	movs	r0, #0
   102a6:	4770      	bx	lr
   102a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   102ac:	4604      	mov	r4, r0
   102ae:	2501      	movs	r5, #1
   102b0:	f000 f90c 	bl	104cc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
   102b4:	2600      	movs	r6, #0
   102b6:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
   102ba:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
   102be:	2701      	movs	r7, #1
   102c0:	f884 70eb 	strb.w	r7, [r4, #235]	; 0xeb
   102c4:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
   102c8:	f104 08e0 	add.w	r8, r4, #224	; 0xe0
   102cc:	b169      	cbz	r1, 102ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x114>
   102ce:	e9f4 013c 	ldrd	r0, r1, [r4, #240]!	; 0xf0
   102d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   102d6:	1880      	adds	r0, r0, r2
   102d8:	f141 0100 	adc.w	r1, r1, #0
   102dc:	e864 013c 	strd	r0, r1, [r4], #-240	; 0xf0
   102e0:	2100      	movs	r1, #0
   102e2:	4640      	mov	r0, r8
   102e4:	f7fe ff89 	bl	f1fa <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   102e8:	e00d      	b.n	10306 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x130>
   102ea:	4620      	mov	r0, r4
   102ec:	f7ff fd6e 	bl	fdcc <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
   102f0:	4601      	mov	r1, r0
   102f2:	e9f4 203c 	ldrd	r2, r0, [r4, #240]!	; 0xf0
   102f6:	1852      	adds	r2, r2, r1
   102f8:	4170      	adcs	r0, r6
   102fa:	e864 203c 	strd	r2, r0, [r4], #-240	; 0xf0
   102fe:	4640      	mov	r0, r8
   10300:	f7fe ff7b 	bl	f1fa <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   10304:	1c45      	adds	r5, r0, #1
   10306:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
   1030a:	1c41      	adds	r1, r0, #1
   1030c:	290a      	cmp	r1, #10
   1030e:	d202      	bcs.n	10316 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x140>
   10310:	4428      	add	r0, r5
   10312:	f8a4 00f8 	strh.w	r0, [r4, #248]	; 0xf8
   10316:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   1031a:	b138      	cbz	r0, 1032c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x156>
   1031c:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
   10320:	1c40      	adds	r0, r0, #1
   10322:	280a      	cmp	r0, #10
   10324:	d302      	bcc.n	1032c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x156>
   10326:	f884 70ea 	strb.w	r7, [r4, #234]	; 0xea
   1032a:	e002      	b.n	10332 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15c>
   1032c:	2002      	movs	r0, #2
   1032e:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
   10332:	4620      	mov	r0, r4
   10334:	f000 f823 	bl	1037e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1a8>
   10338:	b120      	cbz	r0, 10344 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16e>
   1033a:	4620      	mov	r0, r4
   1033c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10340:	f000 b80e 	b.w	10360 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18a>
   10344:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
   10348:	4641      	mov	r1, r8
   1034a:	f000 f8bd 	bl	104c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
   1034e:	2800      	cmp	r0, #0
   10350:	d104      	bne.n	1035c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x186>
   10352:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
   10356:	2030      	movs	r0, #48	; 0x30
   10358:	f7f5 f93a 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1035c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10360:	b510      	push	{r4, lr}
   10362:	4604      	mov	r4, r0
   10364:	f814 0fc0 	ldrb.w	r0, [r4, #192]!
   10368:	f7f3 fa6e 	bl	3848 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   1036c:	2000      	movs	r0, #0
   1036e:	7620      	strb	r0, [r4, #24]
   10370:	bd10      	pop	{r4, pc}
   10372:	b510      	push	{r4, lr}
   10374:	f7ff fd2e 	bl	fdd4 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   10378:	f500 7088 	add.w	r0, r0, #272	; 0x110
   1037c:	bd10      	pop	{r4, pc}
   1037e:	b570      	push	{r4, r5, r6, lr}
   10380:	4605      	mov	r5, r0
   10382:	f890 0108 	ldrb.w	r0, [r0, #264]	; 0x108
   10386:	b108      	cbz	r0, 1038c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b6>
   10388:	2001      	movs	r0, #1
   1038a:	bd70      	pop	{r4, r5, r6, pc}
   1038c:	e9d5 1040 	ldrd	r1, r0, [r5, #256]	; 0x100
   10390:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   10394:	4050      	eors	r0, r2
   10396:	ea70 0101 	orns	r1, r0, r1
   1039a:	d011      	beq.n	103c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ea>
   1039c:	2400      	movs	r4, #0
   1039e:	4628      	mov	r0, r5
   103a0:	f7ff ffe7 	bl	10372 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
   103a4:	e9f5 123c 	ldrd	r1, r2, [r5, #240]!	; 0xf0
   103a8:	1840      	adds	r0, r0, r1
   103aa:	4154      	adcs	r4, r2
   103ac:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
   103b0:	3df0      	subs	r5, #240	; 0xf0
   103b2:	1a10      	subs	r0, r2, r0
   103b4:	41a1      	sbcs	r1, r4
   103b6:	d503      	bpl.n	103c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ea>
   103b8:	4628      	mov	r0, r5
   103ba:	f7ff fd5f 	bl	fe7c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   103be:	e7e3      	b.n	10388 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
   103c0:	2000      	movs	r0, #0
   103c2:	bd70      	pop	{r4, r5, r6, pc}
   103c4:	b510      	push	{r4, lr}
   103c6:	4604      	mov	r4, r0
   103c8:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
   103cc:	f000 f9f2 	bl	107b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5de>
   103d0:	4602      	mov	r2, r0
   103d2:	4620      	mov	r0, r4
   103d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   103d8:	f240 111b 	movw	r1, #283	; 0x11b
   103dc:	f7ff bb85 	b.w	faea <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
   103e0:	b510      	push	{r4, lr}
   103e2:	f7fc f821 	bl	c428 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
   103e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   103ea:	f7f3 bb8f 	b.w	3b0c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
   103ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   103f2:	4604      	mov	r4, r0
   103f4:	f890 021a 	ldrb.w	r0, [r0, #538]	; 0x21a
   103f8:	2800      	cmp	r0, #0
   103fa:	d051      	beq.n	104a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ca>
   103fc:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   10400:	2803      	cmp	r0, #3
   10402:	d14d      	bne.n	104a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ca>
   10404:	f894 906f 	ldrb.w	r9, [r4, #111]	; 0x6f
   10408:	f001 fa5b 	bl	118c2 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
   1040c:	4605      	mov	r5, r0
   1040e:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
   10412:	f7f8 fc97 	bl	8d44 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
   10416:	4428      	add	r0, r5
   10418:	b286      	uxth	r6, r0
   1041a:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
   1041e:	f7f8 fc91 	bl	8d44 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
   10422:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
   10426:	fa1f f880 	uxth.w	r8, r0
   1042a:	4648      	mov	r0, r9
   1042c:	f7fc f8ba 	bl	c5a4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   10430:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
   10434:	1a0d      	subs	r5, r1, r0
   10436:	4648      	mov	r0, r9
   10438:	f7fc f8e0 	bl	c5fc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1043c:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   10440:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10444:	fbb0 f0fa 	udiv	r0, r0, sl
   10448:	1a2d      	subs	r5, r5, r0
   1044a:	4648      	mov	r0, r9
   1044c:	f7fc f8aa 	bl	c5a4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   10450:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   10454:	1a0f      	subs	r7, r1, r0
   10456:	4648      	mov	r0, r9
   10458:	f7fc f8d0 	bl	c5fc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1045c:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   10460:	4401      	add	r1, r0
   10462:	fbb1 f0fa 	udiv	r0, r1, sl
   10466:	1a39      	subs	r1, r7, r0
   10468:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
   1046c:	4370      	muls	r0, r6
   1046e:	fbb0 f2f8 	udiv	r2, r0, r8
   10472:	2029      	movs	r0, #41	; 0x29
   10474:	eb00 0051 	add.w	r0, r0, r1, lsr #1
   10478:	3260      	adds	r2, #96	; 0x60
   1047a:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
   1047e:	eb00 0052 	add.w	r0, r0, r2, lsr #1
   10482:	42a9      	cmp	r1, r5
   10484:	d801      	bhi.n	1048a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
   10486:	4285      	cmp	r5, r0
   10488:	d901      	bls.n	1048e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b8>
   1048a:	f7f4 fcdf 	bl	4e4c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
   1048e:	4631      	mov	r1, r6
   10490:	6920      	ldr	r0, [r4, #16]
   10492:	f7fd f9d0 	bl	d836 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   10496:	2100      	movs	r1, #0
   10498:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
   1049c:	f884 121a 	strb.w	r1, [r4, #538]	; 0x21a
   104a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   104a4:	b570      	push	{r4, r5, r6, lr}
   104a6:	460c      	mov	r4, r1
   104a8:	4605      	mov	r5, r0
   104aa:	f7fc f8a7 	bl	c5fc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   104ae:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   104b2:	4408      	add	r0, r1
   104b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   104b8:	fbb0 f6f1 	udiv	r6, r0, r1
   104bc:	4628      	mov	r0, r5
   104be:	f7fc f871 	bl	c5a4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   104c2:	4430      	add	r0, r6
   104c4:	4420      	add	r0, r4
   104c6:	bd70      	pop	{r4, r5, r6, pc}
   104c8:	f7f2 bcde 	b.w	2e88 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   104cc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   104ce:	4604      	mov	r4, r0
   104d0:	f7ff fca9 	bl	fe26 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   104d4:	b1f8      	cbz	r0, 10516 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x340>
   104d6:	4620      	mov	r0, r4
   104d8:	f7ff fc9d 	bl	fe16 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   104dc:	b918      	cbnz	r0, 104e6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x310>
   104de:	4620      	mov	r0, r4
   104e0:	f7ff fca3 	bl	fe2a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   104e4:	b140      	cbz	r0, 104f8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x322>
   104e6:	2449      	movs	r4, #73	; 0x49
   104e8:	4668      	mov	r0, sp
   104ea:	f7f4 ff4b 	bl	5384 <mpsl_fem_pa_is_configured>
   104ee:	f89d 0000 	ldrb.w	r0, [sp]
   104f2:	b118      	cbz	r0, 104fc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x326>
   104f4:	2501      	movs	r5, #1
   104f6:	e002      	b.n	104fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
   104f8:	2442      	movs	r4, #66	; 0x42
   104fa:	e7f5      	b.n	104e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x312>
   104fc:	2500      	movs	r5, #0
   104fe:	a801      	add	r0, sp, #4
   10500:	f7f4 ff28 	bl	5354 <mpsl_fem_lna_is_configured>
   10504:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10508:	b100      	cbz	r0, 1050c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x336>
   1050a:	2001      	movs	r0, #1
   1050c:	4305      	orrs	r5, r0
   1050e:	d000      	beq.n	10512 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x33c>
   10510:	3409      	adds	r4, #9
   10512:	4620      	mov	r0, r4
   10514:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10516:	206b      	movs	r0, #107	; 0x6b
   10518:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1051a:	b570      	push	{r4, r5, r6, lr}
   1051c:	4604      	mov	r4, r0
   1051e:	f890 00c1 	ldrb.w	r0, [r0, #193]	; 0xc1
   10522:	2500      	movs	r5, #0
   10524:	b138      	cbz	r0, 10536 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x360>
   10526:	f7f7 fba1 	bl	7c6c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
   1052a:	f242 7110 	movw	r1, #10000	; 0x2710
   1052e:	fbb0 f2f1 	udiv	r2, r0, r1
   10532:	fb01 0512 	mls	r5, r1, r2, r0
   10536:	4620      	mov	r0, r4
   10538:	f7ff fc48 	bl	fdcc <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
   1053c:	e9d4 213c 	ldrd	r2, r1, [r4, #240]	; 0xf0
   10540:	4428      	add	r0, r5
   10542:	34e0      	adds	r4, #224	; 0xe0
   10544:	2500      	movs	r5, #0
   10546:	1882      	adds	r2, r0, r2
   10548:	eb45 0001 	adc.w	r0, r5, r1
   1054c:	e9c4 2004 	strd	r2, r0, [r4, #16]
   10550:	f804 5b0b 	strb.w	r5, [r4], #11
   10554:	2001      	movs	r0, #1
   10556:	f804 0901 	strb.w	r0, [r4], #-1
   1055a:	2002      	movs	r0, #2
   1055c:	f804 09ea 	strb.w	r0, [r4], #-234
   10560:	4620      	mov	r0, r4
   10562:	f7ff ffb3 	bl	104cc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
   10566:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
   1056a:	4620      	mov	r0, r4
   1056c:	f7ff ff07 	bl	1037e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1a8>
   10570:	b930      	cbnz	r0, 10580 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3aa>
   10572:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
   10576:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
   1057a:	f7ff ffa5 	bl	104c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
   1057e:	b128      	cbz	r0, 1058c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3b6>
   10580:	f8a4 50f8 	strh.w	r5, [r4, #248]	; 0xf8
   10584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10588:	f7ff bf2a 	b.w	103e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>
   1058c:	f240 61ef 	movw	r1, #1775	; 0x6ef
   10590:	2030      	movs	r0, #48	; 0x30
   10592:	f7f5 f81d 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10596:	b510      	push	{r4, lr}
   10598:	4604      	mov	r4, r0
   1059a:	2000      	movs	r0, #0
   1059c:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
   105a0:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
   105a4:	f7f3 f950 	bl	3848 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   105a8:	2020      	movs	r0, #32
   105aa:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
   105ae:	bd10      	pop	{r4, pc}
   105b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   105b4:	4604      	mov	r4, r0
   105b6:	2500      	movs	r5, #0
   105b8:	f880 50c8 	strb.w	r5, [r0, #200]	; 0xc8
   105bc:	e9d4 673c 	ldrd	r6, r7, [r4, #240]	; 0xf0
   105c0:	4689      	mov	r9, r1
   105c2:	f880 50d8 	strb.w	r5, [r0, #216]	; 0xd8
   105c6:	f04f 0801 	mov.w	r8, #1
   105ca:	f880 80d9 	strb.w	r8, [r0, #217]	; 0xd9
   105ce:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
   105d2:	4641      	mov	r1, r8
   105d4:	34c0      	adds	r4, #192	; 0xc0
   105d6:	f7f6 ff0b 	bl	73f0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   105da:	6860      	ldr	r0, [r4, #4]
   105dc:	f8c0 6238 	str.w	r6, [r0, #568]	; 0x238
   105e0:	f8c0 723c 	str.w	r7, [r0, #572]	; 0x23c
   105e4:	6861      	ldr	r1, [r4, #4]
   105e6:	7820      	ldrb	r0, [r4, #0]
   105e8:	f881 024c 	strb.w	r0, [r1, #588]	; 0x24c
   105ec:	6861      	ldr	r1, [r4, #4]
   105ee:	f8c1 9250 	str.w	r9, [r1, #592]	; 0x250
   105f2:	6860      	ldr	r0, [r4, #4]
   105f4:	e9c0 6790 	strd	r6, r7, [r0, #576]	; 0x240
   105f8:	6864      	ldr	r4, [r4, #4]
   105fa:	f884 5204 	strb.w	r5, [r4, #516]	; 0x204
   105fe:	2300      	movs	r3, #0
   10600:	f8a4 5248 	strh.w	r5, [r4, #584]	; 0x248
   10604:	461a      	mov	r2, r3
   10606:	4619      	mov	r1, r3
   10608:	4620      	mov	r0, r4
   1060a:	9500      	str	r5, [sp, #0]
   1060c:	f7f8 fc7c 	bl	8f08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
   10610:	b120      	cbz	r0, 1061c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x446>
   10612:	f240 211d 	movw	r1, #541	; 0x21d
   10616:	2030      	movs	r0, #48	; 0x30
   10618:	f7f4 ffda 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1061c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
   10620:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
   10624:	f884 8204 	strb.w	r8, [r4, #516]	; 0x204
   10628:	f8a4 5216 	strh.w	r5, [r4, #534]	; 0x216
   1062c:	f8a4 5214 	strh.w	r5, [r4, #532]	; 0x214
   10630:	347c      	adds	r4, #124	; 0x7c
   10632:	f884 519d 	strb.w	r5, [r4, #413]	; 0x19d
   10636:	8820      	ldrh	r0, [r4, #0]
   10638:	1e40      	subs	r0, r0, #1
   1063a:	8020      	strh	r0, [r4, #0]
   1063c:	f8a4 51ce 	strh.w	r5, [r4, #462]	; 0x1ce
   10640:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10644:	f7ff becc 	b.w	103e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>
   10648:	b570      	push	{r4, r5, r6, lr}
   1064a:	b140      	cbz	r0, 1065e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x488>
   1064c:	2909      	cmp	r1, #9
   1064e:	d248      	bcs.n	106e2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x50c>
   10650:	e8df f001 	tbb	[pc, r1]
   10654:	3b3b1507 	.word	0x3b3b1507
   10658:	3f294737 	.word	0x3f294737
   1065c:	0043      	.short	0x0043
   1065e:	21ca      	movs	r1, #202	; 0xca
   10660:	e03c      	b.n	106dc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
   10662:	4604      	mov	r4, r0
   10664:	f7f7 fc52 	bl	7f0c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
   10668:	b110      	cbz	r0, 10670 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
   1066a:	f240 2179 	movw	r1, #633	; 0x279
   1066e:	e035      	b.n	106dc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
   10670:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   10674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10678:	38ff      	subs	r0, #255	; 0xff
   1067a:	f7f3 bb17 	b.w	3cac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   1067e:	4605      	mov	r5, r0
   10680:	f7ff fbcd 	bl	fe1e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   10684:	b9a8      	cbnz	r0, 106b2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
   10686:	4628      	mov	r0, r5
   10688:	f7ff fe73 	bl	10372 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
   1068c:	4604      	mov	r4, r0
   1068e:	f8d5 00e4 	ldr.w	r0, [r5, #228]	; 0xe4
   10692:	42a0      	cmp	r0, r4
   10694:	d20b      	bcs.n	106ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4d8>
   10696:	1a20      	subs	r0, r4, r0
   10698:	2103      	movs	r1, #3
   1069a:	f7f2 fa13 	bl	2ac4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   1069e:	b130      	cbz	r0, 106ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4d8>
   106a0:	4628      	mov	r0, r5
   106a2:	f8c5 40e4 	str.w	r4, [r5, #228]	; 0xe4
   106a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   106aa:	f7ff bb4b 	b.w	fd44 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
   106ae:	f8c5 40e4 	str.w	r4, [r5, #228]	; 0xe4
   106b2:	4628      	mov	r0, r5
   106b4:	f7f7 fc46 	bl	7f44 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
   106b8:	2800      	cmp	r0, #0
   106ba:	d014      	beq.n	106e6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x510>
   106bc:	f44f 712b 	mov.w	r1, #684	; 0x2ac
   106c0:	e00c      	b.n	106dc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
   106c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   106c6:	f7fc b877 	b.w	c7b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   106ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   106ce:	f7ff bdeb 	b.w	102a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
   106d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   106d6:	f7ff be43 	b.w	10360 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18a>
   106da:	21ea      	movs	r1, #234	; 0xea
   106dc:	2030      	movs	r0, #48	; 0x30
   106de:	f7f4 ff77 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   106e2:	21ee      	movs	r1, #238	; 0xee
   106e4:	e7fa      	b.n	106dc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
   106e6:	bd70      	pop	{r4, r5, r6, pc}
   106e8:	b510      	push	{r4, lr}
   106ea:	0004      	movs	r4, r0
   106ec:	d008      	beq.n	10700 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x52a>
   106ee:	2909      	cmp	r1, #9
   106f0:	d25e      	bcs.n	107b0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5da>
   106f2:	e8df f001 	tbb	[pc, r1]
   106f6:	3807      	.short	0x3807
   106f8:	5d3c4040 	.word	0x5d3c4040
   106fc:	00594c45 	.word	0x00594c45
   10700:	2193      	movs	r1, #147	; 0x93
   10702:	e052      	b.n	107aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5d4>
   10704:	2100      	movs	r1, #0
   10706:	f8c4 1254 	str.w	r1, [r4, #596]	; 0x254
   1070a:	f894 1218 	ldrb.w	r1, [r4, #536]	; 0x218
   1070e:	4620      	mov	r0, r4
   10710:	b189      	cbz	r1, 10736 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x560>
   10712:	f8b0 2216 	ldrh.w	r2, [r0, #534]	; 0x216
   10716:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
   1071a:	428a      	cmp	r2, r1
   1071c:	d106      	bne.n	1072c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x556>
   1071e:	f8b0 21cc 	ldrh.w	r2, [r0, #460]	; 0x1cc
   10722:	1a51      	subs	r1, r2, r1
   10724:	f8a0 11ce 	strh.w	r1, [r0, #462]	; 0x1ce
   10728:	4611      	mov	r1, r2
   1072a:	e00d      	b.n	10748 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x572>
   1072c:	1a51      	subs	r1, r2, r1
   1072e:	f8a0 11ce 	strh.w	r1, [r0, #462]	; 0x1ce
   10732:	b291      	uxth	r1, r2
   10734:	e008      	b.n	10748 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x572>
   10736:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
   1073a:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
   1073e:	1a89      	subs	r1, r1, r2
   10740:	f8a0 11ce 	strh.w	r1, [r0, #462]	; 0x1ce
   10744:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
   10748:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
   1074c:	e9d0 128c 	ldrd	r1, r2, [r0, #560]	; 0x230
   10750:	f8c0 1238 	str.w	r1, [r0, #568]	; 0x238
   10754:	f8c0 223c 	str.w	r2, [r0, #572]	; 0x23c
   10758:	f7f8 febe 	bl	94d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
   1075c:	4620      	mov	r0, r4
   1075e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10762:	f7f8 bddb 	b.w	931c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x614>
   10766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1076a:	f000 b925 	b.w	109b8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
   1076e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10772:	f7fc b821 	b.w	c7b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   10776:	4620      	mov	r0, r4
   10778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1077c:	f000 b827 	b.w	107ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5f8>
   10780:	2001      	movs	r0, #1
   10782:	f7f2 f98f 	bl	2aa4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
   10786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1078a:	f7fe bbdc 	b.w	ef46 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
   1078e:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   10792:	2804      	cmp	r0, #4
   10794:	d001      	beq.n	1079a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5c4>
   10796:	21b5      	movs	r1, #181	; 0xb5
   10798:	e007      	b.n	107aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5d4>
   1079a:	4620      	mov	r0, r4
   1079c:	f7ff fefb 	bl	10596 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3c0>
   107a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   107a4:	f7f7 b8ec 	b.w	7980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   107a8:	21be      	movs	r1, #190	; 0xbe
   107aa:	2030      	movs	r0, #48	; 0x30
   107ac:	f7f4 ff10 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107b0:	21c2      	movs	r1, #194	; 0xc2
   107b2:	e7fa      	b.n	107aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5d4>
   107b4:	b510      	push	{r4, lr}
   107b6:	f7fb ff21 	bl	c5fc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   107ba:	f64d 7141 	movw	r1, #57153	; 0xdf41
   107be:	4408      	add	r0, r1
   107c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   107c4:	fbb0 f0f1 	udiv	r0, r0, r1
   107c8:	f200 1079 	addw	r0, r0, #377	; 0x179
   107cc:	bd10      	pop	{r4, pc}
   107ce:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   107d0:	4604      	mov	r4, r0
   107d2:	f7f3 fb25 	bl	3e20 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   107d6:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
   107da:	f8d4 223c 	ldr.w	r2, [r4, #572]	; 0x23c
   107de:	1ac0      	subs	r0, r0, r3
   107e0:	eb61 0102 	sbc.w	r1, r1, r2
   107e4:	2200      	movs	r2, #0
   107e6:	4613      	mov	r3, r2
   107e8:	1a12      	subs	r2, r2, r0
   107ea:	418b      	sbcs	r3, r1
   107ec:	db02      	blt.n	107f4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x61e>
   107ee:	f240 6111 	movw	r1, #1553	; 0x611
   107f2:	e052      	b.n	1089a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6c4>
   107f4:	1c42      	adds	r2, r0, #1
   107f6:	f171 0100 	sbcs.w	r1, r1, #0
   107fa:	db02      	blt.n	10802 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x62c>
   107fc:	f240 6112 	movw	r1, #1554	; 0x612
   10800:	e04b      	b.n	1089a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6c4>
   10802:	6922      	ldr	r2, [r4, #16]
   10804:	2100      	movs	r1, #0
   10806:	b10a      	cbz	r2, 1080c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x636>
   10808:	fbb0 f1f2 	udiv	r1, r0, r2
   1080c:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   10810:	280d      	cmp	r0, #13
   10812:	d00c      	beq.n	1082e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x658>
   10814:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
   10818:	f8b4 2216 	ldrh.w	r2, [r4, #534]	; 0x216
   1081c:	1843      	adds	r3, r0, r1
   1081e:	1ad3      	subs	r3, r2, r3
   10820:	b21b      	sxth	r3, r3
   10822:	2b00      	cmp	r3, #0
   10824:	db06      	blt.n	10834 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x65e>
   10826:	1c52      	adds	r2, r2, #1
   10828:	f8a4 2216 	strh.w	r2, [r4, #534]	; 0x216
   1082c:	e006      	b.n	1083c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x666>
   1082e:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
   10832:	e012      	b.n	1085a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x684>
   10834:	1c49      	adds	r1, r1, #1
   10836:	4408      	add	r0, r1
   10838:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
   1083c:	f894 0219 	ldrb.w	r0, [r4, #537]	; 0x219
   10840:	f88d 0000 	strb.w	r0, [sp]
   10844:	9800      	ldr	r0, [sp, #0]
   10846:	9000      	str	r0, [sp, #0]
   10848:	f89d 0000 	ldrb.w	r0, [sp]
   1084c:	b940      	cbnz	r0, 10860 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x68a>
   1084e:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
   10852:	f8b4 11cc 	ldrh.w	r1, [r4, #460]	; 0x1cc
   10856:	4288      	cmp	r0, r1
   10858:	d102      	bne.n	10860 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x68a>
   1085a:	1c40      	adds	r0, r0, #1
   1085c:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
   10860:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
   10864:	1c40      	adds	r0, r0, #1
   10866:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
   1086a:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	; 0xb6
   1086e:	f8b4 10b4 	ldrh.w	r1, [r4, #180]	; 0xb4
   10872:	1a40      	subs	r0, r0, r1
   10874:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   10878:	1e40      	subs	r0, r0, #1
   1087a:	4408      	add	r0, r1
   1087c:	b285      	uxth	r5, r0
   1087e:	e026      	b.n	108ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f8>
   10880:	a801      	add	r0, sp, #4
   10882:	2300      	movs	r3, #0
   10884:	9000      	str	r0, [sp, #0]
   10886:	461a      	mov	r2, r3
   10888:	4620      	mov	r0, r4
   1088a:	f7f8 fb3d 	bl	8f08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
   1088e:	2800      	cmp	r0, #0
   10890:	d03b      	beq.n	1090a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x734>
   10892:	2801      	cmp	r0, #1
   10894:	d004      	beq.n	108a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ca>
   10896:	f240 6151 	movw	r1, #1617	; 0x651
   1089a:	2030      	movs	r0, #48	; 0x30
   1089c:	f7f4 fe98 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   108a0:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
   108a4:	f8b4 11c8 	ldrh.w	r1, [r4, #456]	; 0x1c8
   108a8:	1a42      	subs	r2, r0, r1
   108aa:	b212      	sxth	r2, r2
   108ac:	2a00      	cmp	r2, #0
   108ae:	da09      	bge.n	108c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ee>
   108b0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   108b4:	4402      	add	r2, r0
   108b6:	1aaa      	subs	r2, r5, r2
   108b8:	b212      	sxth	r2, r2
   108ba:	2a00      	cmp	r2, #0
   108bc:	da02      	bge.n	108c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ee>
   108be:	f8a4 1216 	strh.w	r1, [r4, #534]	; 0x216
   108c2:	e004      	b.n	108ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f8>
   108c4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   108c8:	4408      	add	r0, r1
   108ca:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
   108ce:	f8b4 1216 	ldrh.w	r1, [r4, #534]	; 0x216
   108d2:	1a68      	subs	r0, r5, r1
   108d4:	b200      	sxth	r0, r0
   108d6:	2800      	cmp	r0, #0
   108d8:	dad2      	bge.n	10880 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
   108da:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
   108de:	b190      	cbz	r0, 10906 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x730>
   108e0:	2008      	movs	r0, #8
   108e2:	f884 00a6 	strb.w	r0, [r4, #166]	; 0xa6
   108e6:	2208      	movs	r2, #8
   108e8:	4621      	mov	r1, r4
   108ea:	f104 009d 	add.w	r0, r4, #157	; 0x9d
   108ee:	f7f6 ff75 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   108f2:	4620      	mov	r0, r4
   108f4:	f000 f862 	bl	109bc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
   108f8:	4620      	mov	r0, r4
   108fa:	f7ff fe4c 	bl	10596 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3c0>
   108fe:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
   10902:	f7f7 b83d 	b.w	7980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   10906:	203e      	movs	r0, #62	; 0x3e
   10908:	e7eb      	b.n	108e2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x70c>
   1090a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1090c:	00fa01f4 	.word	0x00fa01f4
   10910:	00640096 	.word	0x00640096
   10914:	0032004b 	.word	0x0032004b
   10918:	0014001e 	.word	0x0014001e
   1091c:	0005000a 	.word	0x0005000a
   10920:	00010002 	.word	0x00010002
   10924:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   10928:	f001 0307 	and.w	r3, r1, #7
   1092c:	7802      	ldrb	r2, [r0, #0]
   1092e:	2101      	movs	r1, #1
   10930:	4099      	lsls	r1, r3
   10932:	438a      	bics	r2, r1
   10934:	7002      	strb	r2, [r0, #0]
   10936:	4770      	bx	lr
   10938:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   1093c:	f001 0307 	and.w	r3, r1, #7
   10940:	7802      	ldrb	r2, [r0, #0]
   10942:	2101      	movs	r1, #1
   10944:	4099      	lsls	r1, r3
   10946:	430a      	orrs	r2, r1
   10948:	7002      	strb	r2, [r0, #0]
   1094a:	4770      	bx	lr

0001094c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
   1094c:	b510      	push	{r4, lr}
   1094e:	4604      	mov	r4, r0
   10950:	f8d0 027c 	ldr.w	r0, [r0, #636]	; 0x27c
   10954:	6921      	ldr	r1, [r4, #16]
   10956:	4288      	cmp	r0, r1
   10958:	d109      	bne.n	1096e <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   1095a:	f8b4 1280 	ldrh.w	r1, [r4, #640]	; 0x280
   1095e:	8b22      	ldrh	r2, [r4, #24]
   10960:	4291      	cmp	r1, r2
   10962:	d104      	bne.n	1096e <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   10964:	f8b4 1282 	ldrh.w	r1, [r4, #642]	; 0x282
   10968:	8b62      	ldrh	r2, [r4, #26]
   1096a:	4291      	cmp	r1, r2
   1096c:	d016      	beq.n	1099c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x50>
   1096e:	8821      	ldrh	r1, [r4, #0]
   10970:	f8a4 11ae 	strh.w	r1, [r4, #430]	; 0x1ae
   10974:	f7fe fb6e 	bl	f054 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   10978:	f8a4 01b0 	strh.w	r0, [r4, #432]	; 0x1b0
   1097c:	f8b4 0280 	ldrh.w	r0, [r4, #640]	; 0x280
   10980:	f8a4 01b2 	strh.w	r0, [r4, #434]	; 0x1b2
   10984:	f8b4 0282 	ldrh.w	r0, [r4, #642]	; 0x282
   10988:	f8a4 01b4 	strh.w	r0, [r4, #436]	; 0x1b4
   1098c:	2206      	movs	r2, #6
   1098e:	4621      	mov	r1, r4
   10990:	f504 70d1 	add.w	r0, r4, #418	; 0x1a2
   10994:	f7f6 ff22 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   10998:	f7f6 fff2 	bl	7980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1099c:	2102      	movs	r1, #2
   1099e:	4620      	mov	r0, r4
   109a0:	f7f6 fd26 	bl	73f0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   109a4:	2000      	movs	r0, #0
   109a6:	f804 0f86 	strb.w	r0, [r4, #134]!
   109aa:	2003      	movs	r0, #3
   109ac:	7120      	strb	r0, [r4, #4]
   109ae:	bd10      	pop	{r4, pc}

000109b0 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
   109b0:	f7f5 b9c2 	b.w	5d38 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

000109b4 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
   109b4:	2000      	movs	r0, #0
   109b6:	4770      	bx	lr

000109b8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
   109b8:	f7f5 be7e 	b.w	66b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

000109bc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
   109bc:	2100      	movs	r1, #0
   109be:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
   109c2:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
   109c6:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
   109ca:	f890 11d3 	ldrb.w	r1, [r0, #467]	; 0x1d3
   109ce:	b109      	cbz	r1, 109d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
   109d0:	2102      	movs	r1, #2
   109d2:	e000      	b.n	109d6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
   109d4:	2103      	movs	r1, #3
   109d6:	f7f8 b95d 	b.w	8c94 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   109da:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   109de:	28fe      	cmp	r0, #254	; 0xfe
   109e0:	d001      	beq.n	109e6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
   109e2:	2001      	movs	r0, #1
   109e4:	4770      	bx	lr
   109e6:	2000      	movs	r0, #0
   109e8:	4770      	bx	lr
   109ea:	b510      	push	{r4, lr}
   109ec:	2801      	cmp	r0, #1
   109ee:	d006      	beq.n	109fe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
   109f0:	2802      	cmp	r0, #2
   109f2:	d004      	beq.n	109fe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
   109f4:	f240 21a9 	movw	r1, #681	; 0x2a9
   109f8:	2006      	movs	r0, #6
   109fa:	f7f4 fde9 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   109fe:	bd10      	pop	{r4, pc}
   10a00:	2801      	cmp	r0, #1
   10a02:	d002      	beq.n	10a0a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
   10a04:	2802      	cmp	r0, #2
   10a06:	d105      	bne.n	10a14 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
   10a08:	e002      	b.n	10a10 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
   10a0a:	2901      	cmp	r1, #1
   10a0c:	d004      	beq.n	10a18 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
   10a0e:	e001      	b.n	10a14 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
   10a10:	2902      	cmp	r1, #2
   10a12:	d001      	beq.n	10a18 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
   10a14:	2000      	movs	r0, #0
   10a16:	4770      	bx	lr
   10a18:	2001      	movs	r0, #1
   10a1a:	4770      	bx	lr
   10a1c:	1a40      	subs	r0, r0, r1
   10a1e:	b200      	sxth	r0, r0
   10a20:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   10a24:	4288      	cmp	r0, r1
   10a26:	dc01      	bgt.n	10a2c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
   10a28:	2800      	cmp	r0, #0
   10a2a:	dc01      	bgt.n	10a30 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
   10a2c:	2001      	movs	r0, #1
   10a2e:	4770      	bx	lr
   10a30:	2000      	movs	r0, #0
   10a32:	4770      	bx	lr
   10a34:	4602      	mov	r2, r0
   10a36:	2000      	movs	r0, #0
   10a38:	2a16      	cmp	r2, #22
   10a3a:	d102      	bne.n	10a42 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x86>
   10a3c:	4608      	mov	r0, r1
   10a3e:	f7f9 bd23 	b.w	a488 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb0>
   10a42:	4770      	bx	lr
   10a44:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   10a48:	f001 0107 	and.w	r1, r1, #7
   10a4c:	7800      	ldrb	r0, [r0, #0]
   10a4e:	40c8      	lsrs	r0, r1
   10a50:	f000 0001 	and.w	r0, r0, #1
   10a54:	4770      	bx	lr
   10a56:	b118      	cbz	r0, 10a60 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xa4>
   10a58:	2802      	cmp	r0, #2
   10a5a:	d001      	beq.n	10a60 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xa4>
   10a5c:	2001      	movs	r0, #1
   10a5e:	4770      	bx	lr
   10a60:	2000      	movs	r0, #0
   10a62:	4770      	bx	lr

00010a64 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
   10a64:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10a66:	7881      	ldrb	r1, [r0, #2]
   10a68:	4604      	mov	r4, r0
   10a6a:	291a      	cmp	r1, #26
   10a6c:	d025      	beq.n	10aba <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
   10a6e:	dc0e      	bgt.n	10a8e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
   10a70:	2916      	cmp	r1, #22
   10a72:	d22c      	bcs.n	10ace <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   10a74:	e8df f001 	tbb	[pc, r1]
   10a78:	2b2b2b2b 	.word	0x2b2b2b2b
   10a7c:	2b2b212b 	.word	0x2b2b212b
   10a80:	2b2b2b2b 	.word	0x2b2b2b2b
   10a84:	2b2b2b2b 	.word	0x2b2b2b2b
   10a88:	212b2b2b 	.word	0x212b2b2b
   10a8c:	2121      	.short	0x2121
   10a8e:	292a      	cmp	r1, #42	; 0x2a
   10a90:	d01d      	beq.n	10ace <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   10a92:	dc0b      	bgt.n	10aac <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
   10a94:	f1a1 011e 	sub.w	r1, r1, #30
   10a98:	290c      	cmp	r1, #12
   10a9a:	d218      	bcs.n	10ace <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   10a9c:	e8df f001 	tbb	[pc, r1]
   10aa0:	17171717 	.word	0x17171717
   10aa4:	17171717 	.word	0x17171717
   10aa8:	0d171717 	.word	0x0d171717
   10aac:	393a      	subs	r1, #58	; 0x3a
   10aae:	2904      	cmp	r1, #4
   10ab0:	d20d      	bcs.n	10ace <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   10ab2:	e8df f001 	tbb	[pc, r1]
   10ab6:	020c      	.short	0x020c
   10ab8:	020c      	.short	0x020c
   10aba:	8820      	ldrh	r0, [r4, #0]
   10abc:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   10ac0:	d205      	bcs.n	10ace <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   10ac2:	4669      	mov	r1, sp
   10ac4:	f7fe fab5 	bl	f032 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10ac8:	b118      	cbz	r0, 10ad2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
   10aca:	2002      	movs	r0, #2
   10acc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10ace:	2012      	movs	r0, #18
   10ad0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10ad2:	9801      	ldr	r0, [sp, #4]
   10ad4:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
   10ad8:	f88d 1008 	strb.w	r1, [sp, #8]
   10adc:	9902      	ldr	r1, [sp, #8]
   10ade:	9102      	str	r1, [sp, #8]
   10ae0:	f89d 1008 	ldrb.w	r1, [sp, #8]
   10ae4:	f500 708c 	add.w	r0, r0, #280	; 0x118
   10ae8:	b109      	cbz	r1, 10aee <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
   10aea:	200c      	movs	r0, #12
   10aec:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10aee:	21ff      	movs	r1, #255	; 0xff
   10af0:	7001      	strb	r1, [r0, #0]
   10af2:	78a1      	ldrb	r1, [r4, #2]
   10af4:	7041      	strb	r1, [r0, #1]
   10af6:	4668      	mov	r0, sp
   10af8:	f7fe fe5a 	bl	f7b0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   10afc:	2000      	movs	r0, #0
   10afe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00010b00 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
   10b00:	b510      	push	{r4, lr}
   10b02:	4604      	mov	r4, r0
   10b04:	7800      	ldrb	r0, [r0, #0]
   10b06:	b118      	cbz	r0, 10b10 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   10b08:	2801      	cmp	r0, #1
   10b0a:	d001      	beq.n	10b10 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   10b0c:	2012      	movs	r0, #18
   10b0e:	bd10      	pop	{r4, pc}
   10b10:	f000 fe04 	bl	1171c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
   10b14:	b120      	cbz	r0, 10b20 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   10b16:	f7f6 fa47 	bl	6fa8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   10b1a:	b108      	cbz	r0, 10b20 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   10b1c:	200c      	movs	r0, #12
   10b1e:	bd10      	pop	{r4, pc}
   10b20:	7820      	ldrb	r0, [r4, #0]
   10b22:	f7ff ff98 	bl	10a56 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   10b26:	1de2      	adds	r2, r4, #7
   10b28:	f104 0317 	add.w	r3, r4, #23
   10b2c:	1c61      	adds	r1, r4, #1
   10b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10b32:	f7f6 ba6b 	b.w	700c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

00010b36 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   10b36:	b510      	push	{r4, lr}
   10b38:	4604      	mov	r4, r0
   10b3a:	f000 fe5f 	bl	117fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ca>
   10b3e:	b108      	cbz	r0, 10b44 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   10b40:	200c      	movs	r0, #12
   10b42:	bd10      	pop	{r4, pc}
   10b44:	7820      	ldrb	r0, [r4, #0]
   10b46:	b118      	cbz	r0, 10b50 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   10b48:	2801      	cmp	r0, #1
   10b4a:	d001      	beq.n	10b50 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   10b4c:	2012      	movs	r0, #18
   10b4e:	bd10      	pop	{r4, pc}
   10b50:	f7ff ff81 	bl	10a56 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   10b54:	1c61      	adds	r1, r4, #1
   10b56:	f7f6 fad1 	bl	70fc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
   10b5a:	b108      	cbz	r0, 10b60 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
   10b5c:	2000      	movs	r0, #0
   10b5e:	bd10      	pop	{r4, pc}
   10b60:	2007      	movs	r0, #7
   10b62:	bd10      	pop	{r4, pc}

00010b64 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
   10b64:	b510      	push	{r4, lr}
   10b66:	f000 fdd9 	bl	1171c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
   10b6a:	b120      	cbz	r0, 10b76 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   10b6c:	f7f6 fa1c 	bl	6fa8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   10b70:	b108      	cbz	r0, 10b76 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   10b72:	200c      	movs	r0, #12
   10b74:	bd10      	pop	{r4, pc}
   10b76:	f7f6 fa8f 	bl	7098 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
   10b7a:	2000      	movs	r0, #0
   10b7c:	bd10      	pop	{r4, pc}

00010b7e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   10b7e:	b510      	push	{r4, lr}
   10b80:	f000 fe3c 	bl	117fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ca>
   10b84:	b108      	cbz	r0, 10b8a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   10b86:	200c      	movs	r0, #12
   10b88:	bd10      	pop	{r4, pc}
   10b8a:	f7f6 fadf 	bl	714c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
   10b8e:	2000      	movs	r0, #0
   10b90:	bd10      	pop	{r4, pc}

00010b92 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   10b92:	b510      	push	{r4, lr}
   10b94:	460b      	mov	r3, r1
   10b96:	2201      	movs	r2, #1
   10b98:	f100 0110 	add.w	r1, r0, #16
   10b9c:	f7fe fa2b 	bl	eff6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   10ba0:	2000      	movs	r0, #0
   10ba2:	bd10      	pop	{r4, pc}

00010ba4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
   10ba4:	b510      	push	{r4, lr}
   10ba6:	8800      	ldrh	r0, [r0, #0]
   10ba8:	2100      	movs	r1, #0
   10baa:	f7fd ffa5 	bl	eaf8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10bae:	b118      	cbz	r0, 10bb8 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
   10bb0:	f890 1258 	ldrb.w	r1, [r0, #600]	; 0x258
   10bb4:	b111      	cbz	r1, 10bbc <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
   10bb6:	e007      	b.n	10bc8 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
   10bb8:	2002      	movs	r0, #2
   10bba:	bd10      	pop	{r4, pc}
   10bbc:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   10bc0:	2914      	cmp	r1, #20
   10bc2:	d003      	beq.n	10bcc <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   10bc4:	2915      	cmp	r1, #21
   10bc6:	d001      	beq.n	10bcc <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   10bc8:	200c      	movs	r0, #12
   10bca:	bd10      	pop	{r4, pc}
   10bcc:	2102      	movs	r1, #2
   10bce:	f880 1258 	strb.w	r1, [r0, #600]	; 0x258
   10bd2:	2000      	movs	r0, #0
   10bd4:	bd10      	pop	{r4, pc}

00010bd6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
   10bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10bd8:	4605      	mov	r5, r0
   10bda:	8800      	ldrh	r0, [r0, #0]
   10bdc:	2100      	movs	r1, #0
   10bde:	f7fd ff8b 	bl	eaf8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10be2:	0004      	movs	r4, r0
   10be4:	d003      	beq.n	10bee <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
   10be6:	f894 0258 	ldrb.w	r0, [r4, #600]	; 0x258
   10bea:	b110      	cbz	r0, 10bf2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
   10bec:	e011      	b.n	10c12 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   10bee:	2002      	movs	r0, #2
   10bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10bf2:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   10bf6:	2814      	cmp	r0, #20
   10bf8:	d001      	beq.n	10bfe <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
   10bfa:	2815      	cmp	r0, #21
   10bfc:	d109      	bne.n	10c12 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   10bfe:	f894 028c 	ldrb.w	r0, [r4, #652]	; 0x28c
   10c02:	f88d 0000 	strb.w	r0, [sp]
   10c06:	9800      	ldr	r0, [sp, #0]
   10c08:	9000      	str	r0, [sp, #0]
   10c0a:	f89d 0000 	ldrb.w	r0, [sp]
   10c0e:	2601      	movs	r6, #1
   10c10:	b108      	cbz	r0, 10c16 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
   10c12:	200c      	movs	r0, #12
   10c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10c16:	2210      	movs	r2, #16
   10c18:	1ca9      	adds	r1, r5, #2
   10c1a:	f204 2059 	addw	r0, r4, #601	; 0x259
   10c1e:	f7fc ff39 	bl	da94 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10c22:	f884 6258 	strb.w	r6, [r4, #600]	; 0x258
   10c26:	2000      	movs	r0, #0
   10c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010c2a <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   10c2a:	b510      	push	{r4, lr}
   10c2c:	2108      	movs	r1, #8
   10c2e:	f7f4 fd7b 	bl	5728 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   10c32:	2000      	movs	r0, #0
   10c34:	bd10      	pop	{r4, pc}

00010c36 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
   10c36:	b510      	push	{r4, lr}
   10c38:	4604      	mov	r4, r0
   10c3a:	f7fa fe03 	bl	b844 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10c3e:	f7ff f8f8 	bl	fe32 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   10c42:	7020      	strb	r0, [r4, #0]
   10c44:	2000      	movs	r0, #0
   10c46:	bd10      	pop	{r4, pc}

00010c48 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   10c48:	21fb      	movs	r1, #251	; 0xfb
   10c4a:	8001      	strh	r1, [r0, #0]
   10c4c:	f640 0248 	movw	r2, #2120	; 0x848
   10c50:	8042      	strh	r2, [r0, #2]
   10c52:	8081      	strh	r1, [r0, #4]
   10c54:	80c2      	strh	r2, [r0, #6]
   10c56:	2000      	movs	r0, #0
   10c58:	4770      	bx	lr

00010c5a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
   10c5a:	b51c      	push	{r2, r3, r4, lr}
   10c5c:	8800      	ldrh	r0, [r0, #0]
   10c5e:	4669      	mov	r1, sp
   10c60:	f7fe f9e7 	bl	f032 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10c64:	2800      	cmp	r0, #0
   10c66:	d10d      	bne.n	10c84 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
   10c68:	f89d 0000 	ldrb.w	r0, [sp]
   10c6c:	9c01      	ldr	r4, [sp, #4]
   10c6e:	2801      	cmp	r0, #1
   10c70:	f504 748c 	add.w	r4, r4, #280	; 0x118
   10c74:	d103      	bne.n	10c7e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
   10c76:	9801      	ldr	r0, [sp, #4]
   10c78:	f000 fd3a 	bl	116f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2be>
   10c7c:	b118      	cbz	r0, 10c86 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
   10c7e:	7ce0      	ldrb	r0, [r4, #19]
   10c80:	b118      	cbz	r0, 10c8a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
   10c82:	203a      	movs	r0, #58	; 0x3a
   10c84:	bd1c      	pop	{r2, r3, r4, pc}
   10c86:	2002      	movs	r0, #2
   10c88:	bd1c      	pop	{r2, r3, r4, pc}
   10c8a:	2001      	movs	r0, #1
   10c8c:	74e0      	strb	r0, [r4, #19]
   10c8e:	2000      	movs	r0, #0
   10c90:	bd1c      	pop	{r2, r3, r4, pc}

00010c92 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
   10c92:	2108      	movs	r1, #8
   10c94:	7001      	strb	r1, [r0, #0]
   10c96:	2000      	movs	r0, #0
   10c98:	4770      	bx	lr

00010c9a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   10c9a:	b510      	push	{r4, lr}
   10c9c:	4604      	mov	r4, r0
   10c9e:	20d8      	movs	r0, #216	; 0xd8
   10ca0:	7020      	strb	r0, [r4, #0]
   10ca2:	f000 fd22 	bl	116ea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b8>
   10ca6:	7060      	strb	r0, [r4, #1]
   10ca8:	2000      	movs	r0, #0
   10caa:	bd10      	pop	{r4, pc}

00010cac <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   10cac:	2108      	movs	r1, #8
   10cae:	7001      	strb	r1, [r0, #0]
   10cb0:	2000      	movs	r0, #0
   10cb2:	4770      	bx	lr

00010cb4 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
   10cb4:	b510      	push	{r4, lr}
   10cb6:	4604      	mov	r4, r0
   10cb8:	7800      	ldrb	r0, [r0, #0]
   10cba:	b108      	cbz	r0, 10cc0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
   10cbc:	2801      	cmp	r0, #1
   10cbe:	d110      	bne.n	10ce2 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   10cc0:	f000 fd2c 	bl	1171c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
   10cc4:	b120      	cbz	r0, 10cd0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   10cc6:	f7f6 f96f 	bl	6fa8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   10cca:	b108      	cbz	r0, 10cd0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   10ccc:	200c      	movs	r0, #12
   10cce:	bd10      	pop	{r4, pc}
   10cd0:	7820      	ldrb	r0, [r4, #0]
   10cd2:	f7ff fec0 	bl	10a56 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   10cd6:	1c61      	adds	r1, r4, #1
   10cd8:	f7fe f973 	bl	efc2 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
   10cdc:	b108      	cbz	r0, 10ce2 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   10cde:	2000      	movs	r0, #0
   10ce0:	bd10      	pop	{r4, pc}
   10ce2:	2012      	movs	r0, #18
   10ce4:	bd10      	pop	{r4, pc}

00010ce6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   10ce6:	b510      	push	{r4, lr}
   10ce8:	4604      	mov	r4, r0
   10cea:	f000 fd87 	bl	117fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ca>
   10cee:	b108      	cbz	r0, 10cf4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   10cf0:	200c      	movs	r0, #12
   10cf2:	bd10      	pop	{r4, pc}
   10cf4:	7820      	ldrb	r0, [r4, #0]
   10cf6:	b108      	cbz	r0, 10cfc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
   10cf8:	2801      	cmp	r0, #1
   10cfa:	d107      	bne.n	10d0c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   10cfc:	f7ff feab 	bl	10a56 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   10d00:	1c61      	adds	r1, r4, #1
   10d02:	f7fe f96d 	bl	efe0 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   10d06:	b108      	cbz	r0, 10d0c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   10d08:	2000      	movs	r0, #0
   10d0a:	bd10      	pop	{r4, pc}
   10d0c:	2012      	movs	r0, #18
   10d0e:	bd10      	pop	{r4, pc}

00010d10 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
   10d10:	b510      	push	{r4, lr}
   10d12:	4604      	mov	r4, r0
   10d14:	f000 fd02 	bl	1171c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
   10d18:	b108      	cbz	r0, 10d1e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
   10d1a:	200c      	movs	r0, #12
   10d1c:	bd10      	pop	{r4, pc}
   10d1e:	7820      	ldrb	r0, [r4, #0]
   10d20:	b100      	cbz	r0, 10d24 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0x14>
   10d22:	2001      	movs	r0, #1
   10d24:	f7f6 f93a 	bl	6f9c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
   10d28:	2000      	movs	r0, #0
   10d2a:	bd10      	pop	{r4, pc}

00010d2c <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
   10d2c:	b51c      	push	{r2, r3, r4, lr}
   10d2e:	4604      	mov	r4, r0
   10d30:	f7fa fd88 	bl	b844 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10d34:	2000      	movs	r0, #0
   10d36:	f88d 0002 	strb.w	r0, [sp, #2]
   10d3a:	2103      	movs	r1, #3
   10d3c:	f88d 1001 	strb.w	r1, [sp, #1]
   10d40:	f814 1b01 	ldrb.w	r1, [r4], #1
   10d44:	f88d 1003 	strb.w	r1, [sp, #3]
   10d48:	f88d 0000 	strb.w	r0, [sp]
   10d4c:	4668      	mov	r0, sp
   10d4e:	9401      	str	r4, [sp, #4]
   10d50:	f000 f99c 	bl	1108c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
   10d54:	bd1c      	pop	{r2, r3, r4, pc}

00010d56 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
   10d56:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10d58:	4605      	mov	r5, r0
   10d5a:	f7fa fd73 	bl	b844 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10d5e:	4606      	mov	r6, r0
   10d60:	7828      	ldrb	r0, [r5, #0]
   10d62:	2400      	movs	r4, #0
   10d64:	b160      	cbz	r0, 10d80 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   10d66:	f88d 4000 	strb.w	r4, [sp]
   10d6a:	2001      	movs	r0, #1
   10d6c:	f10d 0101 	add.w	r1, sp, #1
   10d70:	f7f5 fae4 	bl	633c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   10d74:	b120      	cbz	r0, 10d80 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   10d76:	4668      	mov	r0, sp
   10d78:	f000 f897 	bl	10eaa <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
   10d7c:	2800      	cmp	r0, #0
   10d7e:	d112      	bne.n	10da6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   10d80:	f88d 400c 	strb.w	r4, [sp, #12]
   10d84:	4630      	mov	r0, r6
   10d86:	f7ff f84a 	bl	fe1e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   10d8a:	b118      	cbz	r0, 10d94 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
   10d8c:	2080      	movs	r0, #128	; 0x80
   10d8e:	f8ad 000d 	strh.w	r0, [sp, #13]
   10d92:	e001      	b.n	10d98 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
   10d94:	f8ad 400d 	strh.w	r4, [sp, #13]
   10d98:	f88d 400f 	strb.w	r4, [sp, #15]
   10d9c:	7828      	ldrb	r0, [r5, #0]
   10d9e:	2801      	cmp	r0, #1
   10da0:	d003      	beq.n	10daa <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
   10da2:	b138      	cbz	r0, 10db4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
   10da4:	2012      	movs	r0, #18
   10da6:	b004      	add	sp, #16
   10da8:	bd70      	pop	{r4, r5, r6, pc}
   10daa:	a903      	add	r1, sp, #12
   10dac:	4630      	mov	r0, r6
   10dae:	f7fa fd67 	bl	b880 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
   10db2:	e7f8      	b.n	10da6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   10db4:	4630      	mov	r0, r6
   10db6:	f000 fcb8 	bl	1172a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2f8>
   10dba:	e7f4      	b.n	10da6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

00010dbc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
   10dbc:	b530      	push	{r4, r5, lr}
   10dbe:	b08b      	sub	sp, #44	; 0x2c
   10dc0:	4604      	mov	r4, r0
   10dc2:	f7fa fd3f 	bl	b844 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10dc6:	4602      	mov	r2, r0
   10dc8:	7920      	ldrb	r0, [r4, #4]
   10dca:	2804      	cmp	r0, #4
   10dcc:	d803      	bhi.n	10dd6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
   10dce:	8860      	ldrh	r0, [r4, #2]
   10dd0:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   10dd4:	d902      	bls.n	10ddc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
   10dd6:	2012      	movs	r0, #18
   10dd8:	b00b      	add	sp, #44	; 0x2c
   10dda:	bd30      	pop	{r4, r5, pc}
   10ddc:	2500      	movs	r5, #0
   10dde:	f88d 5004 	strb.w	r5, [sp, #4]
   10de2:	7921      	ldrb	r1, [r4, #4]
   10de4:	9500      	str	r5, [sp, #0]
   10de6:	f89d 0000 	ldrb.w	r0, [sp]
   10dea:	2905      	cmp	r1, #5
   10dec:	f040 0010 	orr.w	r0, r0, #16
   10df0:	f88d 0000 	strb.w	r0, [sp]
   10df4:	d254      	bcs.n	10ea0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
   10df6:	e8df f001 	tbb	[pc, r1]
   10dfa:	0803      	.short	0x0803
   10dfc:	000b1105 	.word	0x000b1105
   10e00:	f040 0001 	orr.w	r0, r0, #1
   10e04:	f040 0002 	orr.w	r0, r0, #2
   10e08:	e006      	b.n	10e18 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
   10e0a:	f040 0009 	orr.w	r0, r0, #9
   10e0e:	e001      	b.n	10e14 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
   10e10:	f040 0001 	orr.w	r0, r0, #1
   10e14:	f040 0004 	orr.w	r0, r0, #4
   10e18:	f88d 0000 	strb.w	r0, [sp]
   10e1c:	f8bd 0000 	ldrh.w	r0, [sp]
   10e20:	9000      	str	r0, [sp, #0]
   10e22:	f8bd 0000 	ldrh.w	r0, [sp]
   10e26:	f8ad 0005 	strh.w	r0, [sp, #5]
   10e2a:	8821      	ldrh	r1, [r4, #0]
   10e2c:	f8dd 0006 	ldr.w	r0, [sp, #6]
   10e30:	f361 201f 	bfi	r0, r1, #8, #24
   10e34:	f8cd 0006 	str.w	r0, [sp, #6]
   10e38:	8861      	ldrh	r1, [r4, #2]
   10e3a:	f8dd 0009 	ldr.w	r0, [sp, #9]
   10e3e:	f361 201f 	bfi	r0, r1, #8, #24
   10e42:	f8cd 0009 	str.w	r0, [sp, #9]
   10e46:	7b60      	ldrb	r0, [r4, #13]
   10e48:	f88d 000d 	strb.w	r0, [sp, #13]
   10e4c:	7960      	ldrb	r0, [r4, #5]
   10e4e:	f88d 000e 	strb.w	r0, [sp, #14]
   10e52:	79a0      	ldrb	r0, [r4, #6]
   10e54:	f88d 000f 	strb.w	r0, [sp, #15]
   10e58:	f8d4 0007 	ldr.w	r0, [r4, #7]
   10e5c:	9004      	str	r0, [sp, #16]
   10e5e:	f8b4 000b 	ldrh.w	r0, [r4, #11]
   10e62:	f8ad 0014 	strh.w	r0, [sp, #20]
   10e66:	7ba0      	ldrb	r0, [r4, #14]
   10e68:	f88d 0016 	strb.w	r0, [sp, #22]
   10e6c:	207f      	movs	r0, #127	; 0x7f
   10e6e:	f88d 0017 	strb.w	r0, [sp, #23]
   10e72:	2001      	movs	r0, #1
   10e74:	f88d 0018 	strb.w	r0, [sp, #24]
   10e78:	f88d 5019 	strb.w	r5, [sp, #25]
   10e7c:	f88d 001a 	strb.w	r0, [sp, #26]
   10e80:	f88d 501b 	strb.w	r5, [sp, #27]
   10e84:	4610      	mov	r0, r2
   10e86:	f7fe ffe6 	bl	fe56 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
   10e8a:	f88d 001c 	strb.w	r0, [sp, #28]
   10e8e:	f88d 501d 	strb.w	r5, [sp, #29]
   10e92:	f88d 501e 	strb.w	r5, [sp, #30]
   10e96:	a909      	add	r1, sp, #36	; 0x24
   10e98:	a801      	add	r0, sp, #4
   10e9a:	f7fa fbaf 	bl	b5fc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
   10e9e:	e79b      	b.n	10dd8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
   10ea0:	f241 01cf 	movw	r1, #4303	; 0x10cf
   10ea4:	2039      	movs	r0, #57	; 0x39
   10ea6:	f7f4 fb93 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010eaa <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
   10eaa:	b570      	push	{r4, r5, r6, lr}
   10eac:	4604      	mov	r4, r0
   10eae:	7800      	ldrb	r0, [r0, #0]
   10eb0:	2101      	movs	r1, #1
   10eb2:	f7fd fe21 	bl	eaf8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10eb6:	0005      	movs	r5, r0
   10eb8:	d007      	beq.n	10eca <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
   10eba:	f7ff f972 	bl	101a2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10ebe:	b160      	cbz	r0, 10eda <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   10ec0:	4628      	mov	r0, r5
   10ec2:	f7fe ffb2 	bl	fe2a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10ec6:	b110      	cbz	r0, 10ece <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
   10ec8:	e005      	b.n	10ed6 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
   10eca:	2042      	movs	r0, #66	; 0x42
   10ecc:	bd70      	pop	{r4, r5, r6, pc}
   10ece:	4628      	mov	r0, r5
   10ed0:	f7fe ffa1 	bl	fe16 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   10ed4:	b108      	cbz	r0, 10eda <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   10ed6:	200c      	movs	r0, #12
   10ed8:	bd70      	pop	{r4, r5, r6, pc}
   10eda:	1c61      	adds	r1, r4, #1
   10edc:	4628      	mov	r0, r5
   10ede:	f7fe ffb2 	bl	fe46 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
   10ee2:	2000      	movs	r0, #0
   10ee4:	bd70      	pop	{r4, r5, r6, pc}

00010ee6 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   10ee6:	b50e      	push	{r1, r2, r3, lr}
   10ee8:	8882      	ldrh	r2, [r0, #4]
   10eea:	f244 2390 	movw	r3, #17040	; 0x4290
   10eee:	429a      	cmp	r2, r3
   10ef0:	d901      	bls.n	10ef6 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
   10ef2:	2012      	movs	r0, #18
   10ef4:	bd0e      	pop	{r1, r2, r3, pc}
   10ef6:	f640 0348 	movw	r3, #2120	; 0x848
   10efa:	429a      	cmp	r2, r3
   10efc:	d300      	bcc.n	10f00 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   10efe:	461a      	mov	r2, r3
   10f00:	8803      	ldrh	r3, [r0, #0]
   10f02:	f8ad 3000 	strh.w	r3, [sp]
   10f06:	8843      	ldrh	r3, [r0, #2]
   10f08:	f8ad 3002 	strh.w	r3, [sp, #2]
   10f0c:	f8ad 2004 	strh.w	r2, [sp, #4]
   10f10:	8843      	ldrh	r3, [r0, #2]
   10f12:	f8ad 3006 	strh.w	r3, [sp, #6]
   10f16:	f8ad 2008 	strh.w	r2, [sp, #8]
   10f1a:	8800      	ldrh	r0, [r0, #0]
   10f1c:	8008      	strh	r0, [r1, #0]
   10f1e:	4668      	mov	r0, sp
   10f20:	f7fa fd80 	bl	ba24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a4>
   10f24:	bd0e      	pop	{r1, r2, r3, pc}

00010f26 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   10f26:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10f28:	4604      	mov	r4, r0
   10f2a:	f10d 0007 	add.w	r0, sp, #7
   10f2e:	9000      	str	r0, [sp, #0]
   10f30:	7922      	ldrb	r2, [r4, #4]
   10f32:	78e1      	ldrb	r1, [r4, #3]
   10f34:	78a0      	ldrb	r0, [r4, #2]
   10f36:	f10d 0306 	add.w	r3, sp, #6
   10f3a:	f000 fc23 	bl	11784 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
   10f3e:	2800      	cmp	r0, #0
   10f40:	d109      	bne.n	10f56 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
   10f42:	8820      	ldrh	r0, [r4, #0]
   10f44:	f8ad 0004 	strh.w	r0, [sp, #4]
   10f48:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   10f4c:	f8ad 0008 	strh.w	r0, [sp, #8]
   10f50:	a801      	add	r0, sp, #4
   10f52:	f000 f956 	bl	11202 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   10f56:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00010f58 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
   10f58:	b510      	push	{r4, lr}
   10f5a:	4604      	mov	r4, r0
   10f5c:	f000 fbde 	bl	1171c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
   10f60:	b120      	cbz	r0, 10f6c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   10f62:	f7f6 f821 	bl	6fa8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   10f66:	b108      	cbz	r0, 10f6c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   10f68:	200c      	movs	r0, #12
   10f6a:	bd10      	pop	{r4, pc}
   10f6c:	7820      	ldrb	r0, [r4, #0]
   10f6e:	f7ff fd72 	bl	10a56 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   10f72:	79e2      	ldrb	r2, [r4, #7]
   10f74:	1c61      	adds	r1, r4, #1
   10f76:	f7f5 ffc5 	bl	6f04 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
   10f7a:	b108      	cbz	r0, 10f80 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
   10f7c:	2000      	movs	r0, #0
   10f7e:	bd10      	pop	{r4, pc}
   10f80:	2002      	movs	r0, #2
   10f82:	bd10      	pop	{r4, pc}

00010f84 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   10f84:	b510      	push	{r4, lr}
   10f86:	4604      	mov	r4, r0
   10f88:	2001      	movs	r0, #1
   10f8a:	f000 fa8c 	bl	114a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x74>
   10f8e:	b128      	cbz	r0, 10f9c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   10f90:	4621      	mov	r1, r4
   10f92:	2001      	movs	r0, #1
   10f94:	f7f5 f9ea 	bl	636c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   10f98:	2000      	movs	r0, #0
   10f9a:	bd10      	pop	{r4, pc}
   10f9c:	200c      	movs	r0, #12
   10f9e:	bd10      	pop	{r4, pc}

00010fa0 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
   10fa0:	b510      	push	{r4, lr}
   10fa2:	8800      	ldrh	r0, [r0, #0]
   10fa4:	f7f6 f88e 	bl	70c4 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
   10fa8:	b108      	cbz	r0, 10fae <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
   10faa:	2000      	movs	r0, #0
   10fac:	bd10      	pop	{r4, pc}
   10fae:	2030      	movs	r0, #48	; 0x30
   10fb0:	bd10      	pop	{r4, pc}

00010fb2 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
   10fb2:	b51c      	push	{r2, r3, r4, lr}
   10fb4:	4604      	mov	r4, r0
   10fb6:	f7fa fc45 	bl	b844 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10fba:	2000      	movs	r0, #0
   10fbc:	f88d 0000 	strb.w	r0, [sp]
   10fc0:	f88d 0002 	strb.w	r0, [sp, #2]
   10fc4:	2003      	movs	r0, #3
   10fc6:	f88d 0001 	strb.w	r0, [sp, #1]
   10fca:	f814 0b01 	ldrb.w	r0, [r4], #1
   10fce:	f88d 0003 	strb.w	r0, [sp, #3]
   10fd2:	4668      	mov	r0, sp
   10fd4:	9401      	str	r4, [sp, #4]
   10fd6:	f000 f8c2 	bl	1115e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   10fda:	bd1c      	pop	{r2, r3, r4, pc}

00010fdc <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   10fdc:	b51c      	push	{r2, r3, r4, lr}
   10fde:	8801      	ldrh	r1, [r0, #0]
   10fe0:	f8ad 1000 	strh.w	r1, [sp]
   10fe4:	8841      	ldrh	r1, [r0, #2]
   10fe6:	f8ad 1002 	strh.w	r1, [sp, #2]
   10fea:	8801      	ldrh	r1, [r0, #0]
   10fec:	f8ad 1004 	strh.w	r1, [sp, #4]
   10ff0:	8840      	ldrh	r0, [r0, #2]
   10ff2:	f8ad 0006 	strh.w	r0, [sp, #6]
   10ff6:	4668      	mov	r0, sp
   10ff8:	f7fa fd98 	bl	bb2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ac>
   10ffc:	bd1c      	pop	{r2, r3, r4, pc}

00010ffe <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   10ffe:	b510      	push	{r4, lr}
   11000:	f7f5 f9d8 	bl	63b4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   11004:	2000      	movs	r0, #0
   11006:	bd10      	pop	{r4, pc}

00011008 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
   11008:	b510      	push	{r4, lr}
   1100a:	460c      	mov	r4, r1
   1100c:	2100      	movs	r1, #0
   1100e:	f7fd fd73 	bl	eaf8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   11012:	b118      	cbz	r0, 1101c <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
   11014:	2c02      	cmp	r4, #2
   11016:	d903      	bls.n	11020 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
   11018:	2012      	movs	r0, #18
   1101a:	bd10      	pop	{r4, pc}
   1101c:	2002      	movs	r0, #2
   1101e:	bd10      	pop	{r4, pc}
   11020:	f014 0101 	ands.w	r1, r4, #1
   11024:	f880 11d5 	strb.w	r1, [r0, #469]	; 0x1d5
   11028:	f3c4 0240 	ubfx	r2, r4, #1, #1
   1102c:	f880 21d4 	strb.w	r2, [r0, #468]	; 0x1d4
   11030:	d004      	beq.n	1103c <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   11032:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
   11036:	b109      	cbz	r1, 1103c <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   11038:	f7ff f8cd 	bl	101d6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
   1103c:	2000      	movs	r0, #0
   1103e:	bd10      	pop	{r4, pc}

00011040 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   11040:	b51c      	push	{r2, r3, r4, lr}
   11042:	460c      	mov	r4, r1
   11044:	4669      	mov	r1, sp
   11046:	f7fd fff4 	bl	f032 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1104a:	2800      	cmp	r0, #0
   1104c:	d105      	bne.n	1105a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
   1104e:	2100      	movs	r1, #0
   11050:	4622      	mov	r2, r4
   11052:	9801      	ldr	r0, [sp, #4]
   11054:	f000 faf3 	bl	1163e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
   11058:	2000      	movs	r0, #0
   1105a:	bd1c      	pop	{r2, r3, r4, pc}

0001105c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   1105c:	b510      	push	{r4, lr}
   1105e:	4604      	mov	r4, r0
   11060:	2000      	movs	r0, #0
   11062:	f000 fa20 	bl	114a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x74>
   11066:	b128      	cbz	r0, 11074 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   11068:	4621      	mov	r1, r4
   1106a:	2000      	movs	r0, #0
   1106c:	f7f5 f97e 	bl	636c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   11070:	2000      	movs	r0, #0
   11072:	bd10      	pop	{r4, pc}
   11074:	200c      	movs	r0, #12
   11076:	bd10      	pop	{r4, pc}

00011078 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   11078:	b510      	push	{r4, lr}
   1107a:	7800      	ldrb	r0, [r0, #0]
   1107c:	b100      	cbz	r0, 11080 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
   1107e:	2001      	movs	r0, #1
   11080:	f7f7 fdc8 	bl	8c14 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   11084:	2000      	movs	r0, #0
   11086:	bd10      	pop	{r4, pc}

00011088 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   11088:	f7fa bccc 	b.w	ba24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a4>

0001108c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   1108c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   11090:	4606      	mov	r6, r0
   11092:	7845      	ldrb	r5, [r0, #1]
   11094:	7800      	ldrb	r0, [r0, #0]
   11096:	2101      	movs	r1, #1
   11098:	f7fd fd2e 	bl	eaf8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1109c:	0004      	movs	r4, r0
   1109e:	d01e      	beq.n	110de <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
   110a0:	f7fe fe48 	bl	fd34 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   110a4:	78f1      	ldrb	r1, [r6, #3]
   110a6:	4281      	cmp	r1, r0
   110a8:	d800      	bhi.n	110ac <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
   110aa:	4608      	mov	r0, r1
   110ac:	4607      	mov	r7, r0
   110ae:	2d04      	cmp	r5, #4
   110b0:	d018      	beq.n	110e4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
   110b2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   110b4:	f7fd fe7d 	bl	edb2 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   110b8:	4438      	add	r0, r7
   110ba:	b281      	uxth	r1, r0
   110bc:	4620      	mov	r0, r4
   110be:	2201      	movs	r2, #1
   110c0:	f000 fa03 	bl	114ca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x98>
   110c4:	2800      	cmp	r0, #0
   110c6:	d10b      	bne.n	110e0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   110c8:	2d03      	cmp	r5, #3
   110ca:	d000      	beq.n	110ce <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   110cc:	b1df      	cbz	r7, 11106 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   110ce:	4620      	mov	r0, r4
   110d0:	f7fe fea9 	bl	fe26 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   110d4:	7871      	ldrb	r1, [r6, #1]
   110d6:	2903      	cmp	r1, #3
   110d8:	d010      	beq.n	110fc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   110da:	b9a0      	cbnz	r0, 11106 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   110dc:	e004      	b.n	110e8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
   110de:	2042      	movs	r0, #66	; 0x42
   110e0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   110e4:	b97f      	cbnz	r7, 11106 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   110e6:	e7f2      	b.n	110ce <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   110e8:	2904      	cmp	r1, #4
   110ea:	d107      	bne.n	110fc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   110ec:	4620      	mov	r0, r4
   110ee:	f7ff f858 	bl	101a2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   110f2:	b140      	cbz	r0, 11106 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   110f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   110f6:	f7fd fe2b 	bl	ed50 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   110fa:	b120      	cbz	r0, 11106 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   110fc:	2d01      	cmp	r5, #1
   110fe:	d004      	beq.n	1110a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   11100:	2d03      	cmp	r5, #3
   11102:	d002      	beq.n	1110a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   11104:	e00e      	b.n	11124 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   11106:	2012      	movs	r0, #18
   11108:	e7ea      	b.n	110e0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   1110a:	4620      	mov	r0, r4
   1110c:	f7fe fe8b 	bl	fe26 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   11110:	b108      	cbz	r0, 11116 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   11112:	2200      	movs	r2, #0
   11114:	e002      	b.n	1111c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   11116:	2d01      	cmp	r5, #1
   11118:	d013      	beq.n	11142 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   1111a:	2201      	movs	r2, #1
   1111c:	4668      	mov	r0, sp
   1111e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   11120:	f7fd fdae 	bl	ec80 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   11124:	2d04      	cmp	r5, #4
   11126:	d018      	beq.n	1115a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   11128:	6872      	ldr	r2, [r6, #4]
   1112a:	463b      	mov	r3, r7
   1112c:	2101      	movs	r1, #1
   1112e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   11130:	f7fd fdda 	bl	ece8 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   11134:	b138      	cbz	r0, 11146 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   11136:	7870      	ldrb	r0, [r6, #1]
   11138:	2802      	cmp	r0, #2
   1113a:	d006      	beq.n	1114a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   1113c:	2803      	cmp	r0, #3
   1113e:	d004      	beq.n	1114a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   11140:	e00b      	b.n	1115a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   11142:	2202      	movs	r2, #2
   11144:	e7ea      	b.n	1111c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   11146:	2007      	movs	r0, #7
   11148:	e7ca      	b.n	110e0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   1114a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1114c:	f7fd fe31 	bl	edb2 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   11150:	4602      	mov	r2, r0
   11152:	2101      	movs	r1, #1
   11154:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   11156:	f7fd fe09 	bl	ed6c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   1115a:	2000      	movs	r0, #0
   1115c:	e7c0      	b.n	110e0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0001115e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   1115e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   11162:	4607      	mov	r7, r0
   11164:	7845      	ldrb	r5, [r0, #1]
   11166:	78c6      	ldrb	r6, [r0, #3]
   11168:	7800      	ldrb	r0, [r0, #0]
   1116a:	2101      	movs	r1, #1
   1116c:	f7fd fcc4 	bl	eaf8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   11170:	0004      	movs	r4, r0
   11172:	d003      	beq.n	1117c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   11174:	f7fe fe59 	bl	fe2a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   11178:	b118      	cbz	r0, 11182 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   1117a:	e003      	b.n	11184 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   1117c:	2042      	movs	r0, #66	; 0x42
   1117e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   11182:	2600      	movs	r6, #0
   11184:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   11186:	f7fd fe18 	bl	edba <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   1118a:	4430      	add	r0, r6
   1118c:	b281      	uxth	r1, r0
   1118e:	4688      	mov	r8, r1
   11190:	4620      	mov	r0, r4
   11192:	2201      	movs	r2, #1
   11194:	f000 f999 	bl	114ca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x98>
   11198:	2800      	cmp	r0, #0
   1119a:	d1f0      	bne.n	1117e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1119c:	2d04      	cmp	r5, #4
   1119e:	d008      	beq.n	111b2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   111a0:	2d03      	cmp	r5, #3
   111a2:	d00a      	beq.n	111ba <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   111a4:	b12e      	cbz	r6, 111b2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   111a6:	4620      	mov	r0, r4
   111a8:	f7fe fffb 	bl	101a2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   111ac:	b118      	cbz	r0, 111b6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   111ae:	200c      	movs	r0, #12
   111b0:	e7e5      	b.n	1117e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   111b2:	2012      	movs	r0, #18
   111b4:	e7e3      	b.n	1117e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   111b6:	2d01      	cmp	r5, #1
   111b8:	d10c      	bne.n	111d4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   111ba:	4620      	mov	r0, r4
   111bc:	f7fe fe33 	bl	fe26 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   111c0:	b108      	cbz	r0, 111c6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   111c2:	2204      	movs	r2, #4
   111c4:	e002      	b.n	111cc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   111c6:	2d01      	cmp	r5, #1
   111c8:	d010      	beq.n	111ec <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   111ca:	2205      	movs	r2, #5
   111cc:	4668      	mov	r0, sp
   111ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   111d0:	f7fd fd56 	bl	ec80 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   111d4:	687a      	ldr	r2, [r7, #4]
   111d6:	4633      	mov	r3, r6
   111d8:	2100      	movs	r1, #0
   111da:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   111dc:	f7fd fd84 	bl	ece8 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   111e0:	b130      	cbz	r0, 111f0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   111e2:	2d02      	cmp	r5, #2
   111e4:	d006      	beq.n	111f4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   111e6:	2d03      	cmp	r5, #3
   111e8:	d004      	beq.n	111f4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   111ea:	e008      	b.n	111fe <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   111ec:	2206      	movs	r2, #6
   111ee:	e7ed      	b.n	111cc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   111f0:	2007      	movs	r0, #7
   111f2:	e7c4      	b.n	1117e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   111f4:	4642      	mov	r2, r8
   111f6:	2100      	movs	r1, #0
   111f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   111fa:	f7fd fdb7 	bl	ed6c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   111fe:	2000      	movs	r0, #0
   11200:	e7bd      	b.n	1117e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

00011202 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   11202:	b510      	push	{r4, lr}
   11204:	4604      	mov	r4, r0
   11206:	8880      	ldrh	r0, [r0, #4]
   11208:	b128      	cbz	r0, 11216 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1120a:	2801      	cmp	r0, #1
   1120c:	d003      	beq.n	11216 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1120e:	2802      	cmp	r0, #2
   11210:	d001      	beq.n	11216 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   11212:	2012      	movs	r0, #18
   11214:	bd10      	pop	{r4, pc}
   11216:	78e0      	ldrb	r0, [r4, #3]
   11218:	f000 f9ee 	bl	115f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
   1121c:	b148      	cbz	r0, 11232 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   1121e:	78a0      	ldrb	r0, [r4, #2]
   11220:	f000 f9ea 	bl	115f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
   11224:	b128      	cbz	r0, 11232 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   11226:	4620      	mov	r0, r4
   11228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1122c:	2101      	movs	r1, #1
   1122e:	f000 b890 	b.w	11352 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   11232:	2011      	movs	r0, #17
   11234:	bd10      	pop	{r4, pc}

00011236 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   11236:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   11238:	460c      	mov	r4, r1
   1123a:	4605      	mov	r5, r0
   1123c:	8800      	ldrh	r0, [r0, #0]
   1123e:	4669      	mov	r1, sp
   11240:	f7fd fef7 	bl	f032 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11244:	2800      	cmp	r0, #0
   11246:	d106      	bne.n	11256 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   11248:	9801      	ldr	r0, [sp, #4]
   1124a:	8829      	ldrh	r1, [r5, #0]
   1124c:	8021      	strh	r1, [r4, #0]
   1124e:	f8b0 00b0 	ldrh.w	r0, [r0, #176]	; 0xb0
   11252:	8060      	strh	r0, [r4, #2]
   11254:	2000      	movs	r0, #0
   11256:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00011258 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   11258:	b510      	push	{r4, lr}
   1125a:	4604      	mov	r4, r0
   1125c:	4601      	mov	r1, r0
   1125e:	2000      	movs	r0, #0
   11260:	f7f5 f86c 	bl	633c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   11264:	b910      	cbnz	r0, 1126c <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   11266:	2000      	movs	r0, #0
   11268:	6020      	str	r0, [r4, #0]
   1126a:	80a0      	strh	r0, [r4, #4]
   1126c:	2000      	movs	r0, #0
   1126e:	bd10      	pop	{r4, pc}

00011270 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   11270:	b50e      	push	{r1, r2, r3, lr}
   11272:	8800      	ldrh	r0, [r0, #0]
   11274:	4669      	mov	r1, sp
   11276:	f7fd fedc 	bl	f032 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1127a:	b960      	cbnz	r0, 11296 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   1127c:	9801      	ldr	r0, [sp, #4]
   1127e:	f000 fa37 	bl	116f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2be>
   11282:	b140      	cbz	r0, 11296 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   11284:	9801      	ldr	r0, [sp, #4]
   11286:	4601      	mov	r1, r0
   11288:	f890 212a 	ldrb.w	r2, [r0, #298]	; 0x12a
   1128c:	3078      	adds	r0, #120	; 0x78
   1128e:	f501 7195 	add.w	r1, r1, #298	; 0x12a
   11292:	b962      	cbnz	r2, 112ae <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
   11294:	e001      	b.n	1129a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
   11296:	2002      	movs	r0, #2
   11298:	bd0e      	pop	{r1, r2, r3, pc}
   1129a:	f890 2056 	ldrb.w	r2, [r0, #86]	; 0x56
   1129e:	f88d 2008 	strb.w	r2, [sp, #8]
   112a2:	9a02      	ldr	r2, [sp, #8]
   112a4:	9202      	str	r2, [sp, #8]
   112a6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   112aa:	2201      	movs	r2, #1
   112ac:	b10b      	cbz	r3, 112b2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
   112ae:	203a      	movs	r0, #58	; 0x3a
   112b0:	bd0e      	pop	{r1, r2, r3, pc}
   112b2:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
   112b6:	079b      	lsls	r3, r3, #30
   112b8:	d008      	beq.n	112cc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x5c>
   112ba:	2201      	movs	r2, #1
   112bc:	304e      	adds	r0, #78	; 0x4e
   112be:	9901      	ldr	r1, [sp, #4]
   112c0:	f7f6 fa8c 	bl	77dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   112c4:	f7f6 fb5c 	bl	7980 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   112c8:	2000      	movs	r0, #0
   112ca:	bd0e      	pop	{r1, r2, r3, pc}
   112cc:	700a      	strb	r2, [r1, #0]
   112ce:	4668      	mov	r0, sp
   112d0:	f7fe fa6e 	bl	f7b0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   112d4:	e7f8      	b.n	112c8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>

000112d6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   112d6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   112d8:	460c      	mov	r4, r1
   112da:	4605      	mov	r5, r0
   112dc:	8800      	ldrh	r0, [r0, #0]
   112de:	4669      	mov	r1, sp
   112e0:	f7fd fea7 	bl	f032 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   112e4:	b108      	cbz	r0, 112ea <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   112e6:	2002      	movs	r0, #2
   112e8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   112ea:	78a8      	ldrb	r0, [r5, #2]
   112ec:	b130      	cbz	r0, 112fc <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   112ee:	f000 f9fc 	bl	116ea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b8>
   112f2:	70a0      	strb	r0, [r4, #2]
   112f4:	8828      	ldrh	r0, [r5, #0]
   112f6:	8020      	strh	r0, [r4, #0]
   112f8:	2000      	movs	r0, #0
   112fa:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   112fc:	9801      	ldr	r0, [sp, #4]
   112fe:	f890 0072 	ldrb.w	r0, [r0, #114]	; 0x72
   11302:	e7f6      	b.n	112f2 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

00011304 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   11304:	b510      	push	{r4, lr}
   11306:	f7fa fc41 	bl	bb8c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   1130a:	2000      	movs	r0, #0
   1130c:	bd10      	pop	{r4, pc}

0001130e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   1130e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   11312:	4604      	mov	r4, r0
   11314:	8840      	ldrh	r0, [r0, #2]
   11316:	460d      	mov	r5, r1
   11318:	b1b8      	cbz	r0, 1134a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   1131a:	8820      	ldrh	r0, [r4, #0]
   1131c:	4669      	mov	r1, sp
   1131e:	f7fd fe88 	bl	f032 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11322:	2800      	cmp	r0, #0
   11324:	d10f      	bne.n	11346 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   11326:	8820      	ldrh	r0, [r4, #0]
   11328:	8028      	strh	r0, [r5, #0]
   1132a:	9e01      	ldr	r6, [sp, #4]
   1132c:	f106 0510 	add.w	r5, r6, #16
   11330:	3678      	adds	r6, #120	; 0x78
   11332:	682f      	ldr	r7, [r5, #0]
   11334:	8862      	ldrh	r2, [r4, #2]
   11336:	4639      	mov	r1, r7
   11338:	4630      	mov	r0, r6
   1133a:	f7fd ffc9 	bl	f2d0 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   1133e:	6828      	ldr	r0, [r5, #0]
   11340:	42b8      	cmp	r0, r7
   11342:	d1f6      	bne.n	11332 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   11344:	2000      	movs	r0, #0
   11346:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1134a:	2012      	movs	r0, #18
   1134c:	e7fb      	b.n	11346 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0001134e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   1134e:	f000 b863 	b.w	11418 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00011352 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   11352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11356:	b086      	sub	sp, #24
   11358:	4689      	mov	r9, r1
   1135a:	4607      	mov	r7, r0
   1135c:	8800      	ldrh	r0, [r0, #0]
   1135e:	a901      	add	r1, sp, #4
   11360:	f7fd fe67 	bl	f032 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11364:	2800      	cmp	r0, #0
   11366:	d136      	bne.n	113d6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   11368:	9802      	ldr	r0, [sp, #8]
   1136a:	4601      	mov	r1, r0
   1136c:	4688      	mov	r8, r1
   1136e:	f890 1176 	ldrb.w	r1, [r0, #374]	; 0x176
   11372:	f500 748c 	add.w	r4, r0, #280	; 0x118
   11376:	f88d 1000 	strb.w	r1, [sp]
   1137a:	9900      	ldr	r1, [sp, #0]
   1137c:	9100      	str	r1, [sp, #0]
   1137e:	f89d 1000 	ldrb.w	r1, [sp]
   11382:	3078      	adds	r0, #120	; 0x78
   11384:	b109      	cbz	r1, 1138a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   11386:	2601      	movs	r6, #1
   11388:	e000      	b.n	1138c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   1138a:	2600      	movs	r6, #0
   1138c:	7b81      	ldrb	r1, [r0, #14]
   1138e:	2921      	cmp	r1, #33	; 0x21
   11390:	d100      	bne.n	11394 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   11392:	b13e      	cbz	r6, 113a4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   11394:	2500      	movs	r5, #0
   11396:	305c      	adds	r0, #92	; 0x5c
   11398:	2108      	movs	r1, #8
   1139a:	4682      	mov	sl, r0
   1139c:	f7ff fb52 	bl	10a44 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x88>
   113a0:	b110      	cbz	r0, 113a8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   113a2:	e007      	b.n	113b4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   113a4:	2501      	movs	r5, #1
   113a6:	e7f6      	b.n	11396 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   113a8:	210b      	movs	r1, #11
   113aa:	4650      	mov	r0, sl
   113ac:	f7ff fb4a 	bl	10a44 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x88>
   113b0:	b900      	cbnz	r0, 113b4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   113b2:	b17d      	cbz	r5, 113d4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
   113b4:	a804      	add	r0, sp, #16
   113b6:	9000      	str	r0, [sp, #0]
   113b8:	f89d 0004 	ldrb.w	r0, [sp, #4]
   113bc:	ab03      	add	r3, sp, #12
   113be:	463a      	mov	r2, r7
   113c0:	4641      	mov	r1, r8
   113c2:	f000 f972 	bl	116aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x278>
   113c6:	0005      	movs	r5, r0
   113c8:	d105      	bne.n	113d6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   113ca:	340c      	adds	r4, #12
   113cc:	20ff      	movs	r0, #255	; 0xff
   113ce:	7060      	strb	r0, [r4, #1]
   113d0:	b936      	cbnz	r6, 113e0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   113d2:	e003      	b.n	113dc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
   113d4:	201a      	movs	r0, #26
   113d6:	b006      	add	sp, #24
   113d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   113dc:	7820      	ldrb	r0, [r4, #0]
   113de:	b108      	cbz	r0, 113e4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
   113e0:	253a      	movs	r5, #58	; 0x3a
   113e2:	e012      	b.n	1140a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   113e4:	f884 9000 	strb.w	r9, [r4]
   113e8:	f89d 000c 	ldrb.w	r0, [sp, #12]
   113ec:	70a0      	strb	r0, [r4, #2]
   113ee:	f89d 1010 	ldrb.w	r1, [sp, #16]
   113f2:	70e1      	strb	r1, [r4, #3]
   113f4:	f88d 0000 	strb.w	r0, [sp]
   113f8:	f88d 1001 	strb.w	r1, [sp, #1]
   113fc:	88b8      	ldrh	r0, [r7, #4]
   113fe:	f8ad 0002 	strh.w	r0, [sp, #2]
   11402:	4669      	mov	r1, sp
   11404:	4640      	mov	r0, r8
   11406:	f7fd fed4 	bl	f1b2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   1140a:	2000      	movs	r0, #0
   1140c:	7060      	strb	r0, [r4, #1]
   1140e:	4628      	mov	r0, r5
   11410:	e7e1      	b.n	113d6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

00011412 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   11412:	2008      	movs	r0, #8
   11414:	f7fa bc20 	b.w	bc58 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

00011418 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   11418:	b510      	push	{r4, lr}
   1141a:	f7fd fd5e 	bl	eeda <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   1141e:	f7f5 fda3 	bl	6f68 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   11422:	f7fa fc3b 	bl	bc9c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   11426:	f7fe fa2d 	bl	f884 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   1142a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1142e:	f7fa b9e7 	b.w	b800 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf4>

00011432 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   11432:	f7f8 b839 	b.w	94a8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   11436:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1143a:	4288      	cmp	r0, r1
   1143c:	d303      	bcc.n	11446 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   1143e:	f640 0148 	movw	r1, #2120	; 0x848
   11442:	4288      	cmp	r0, r1
   11444:	d300      	bcc.n	11448 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   11446:	4608      	mov	r0, r1
   11448:	b280      	uxth	r0, r0
   1144a:	4770      	bx	lr
   1144c:	07c1      	lsls	r1, r0, #31
   1144e:	d001      	beq.n	11454 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   11450:	2001      	movs	r0, #1
   11452:	4770      	bx	lr
   11454:	0780      	lsls	r0, r0, #30
   11456:	d501      	bpl.n	1145c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   11458:	2002      	movs	r0, #2
   1145a:	4770      	bx	lr
   1145c:	2000      	movs	r0, #0
   1145e:	4770      	bx	lr
   11460:	b510      	push	{r4, lr}
   11462:	2801      	cmp	r0, #1
   11464:	d006      	beq.n	11474 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   11466:	2802      	cmp	r0, #2
   11468:	d004      	beq.n	11474 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   1146a:	f240 21a9 	movw	r1, #681	; 0x2a9
   1146e:	2006      	movs	r0, #6
   11470:	f7f4 f8ae 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11474:	bd10      	pop	{r4, pc}
   11476:	b50e      	push	{r1, r2, r3, lr}
   11478:	4669      	mov	r1, sp
   1147a:	2001      	movs	r0, #1
   1147c:	f7fd fb46 	bl	eb0c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   11480:	b150      	cbz	r0, 11498 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x66>
   11482:	f44f 71a3 	mov.w	r1, #326	; 0x146
   11486:	2039      	movs	r0, #57	; 0x39
   11488:	f7f4 f8a2 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1148c:	9802      	ldr	r0, [sp, #8]
   1148e:	f7fe fe88 	bl	101a2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   11492:	b108      	cbz	r0, 11498 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x66>
   11494:	2001      	movs	r0, #1
   11496:	bd0e      	pop	{r1, r2, r3, pc}
   11498:	4668      	mov	r0, sp
   1149a:	f7f4 fadd 	bl	5a58 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1149e:	2800      	cmp	r0, #0
   114a0:	d0f4      	beq.n	1148c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5a>
   114a2:	2000      	movs	r0, #0
   114a4:	bd0e      	pop	{r1, r2, r3, pc}
   114a6:	b510      	push	{r4, lr}
   114a8:	f7ff ffe5 	bl	11476 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   114ac:	b158      	cbz	r0, 114c6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x94>
   114ae:	f7fa f9c9 	bl	b844 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   114b2:	4604      	mov	r4, r0
   114b4:	f7fe fcb9 	bl	fe2a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   114b8:	b918      	cbnz	r0, 114c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x90>
   114ba:	4620      	mov	r0, r4
   114bc:	f7fe fcab 	bl	fe16 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   114c0:	b108      	cbz	r0, 114c6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x94>
   114c2:	2000      	movs	r0, #0
   114c4:	bd10      	pop	{r4, pc}
   114c6:	2001      	movs	r0, #1
   114c8:	bd10      	pop	{r4, pc}
   114ca:	b570      	push	{r4, r5, r6, lr}
   114cc:	460c      	mov	r4, r1
   114ce:	4605      	mov	r5, r0
   114d0:	b112      	cbz	r2, 114d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa6>
   114d2:	291f      	cmp	r1, #31
   114d4:	d80c      	bhi.n	114f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xbe>
   114d6:	e016      	b.n	11506 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd4>
   114d8:	f7f4 fd88 	bl	5fec <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   114dc:	42a0      	cmp	r0, r4
   114de:	d201      	bcs.n	114e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb2>
   114e0:	2007      	movs	r0, #7
   114e2:	bd70      	pop	{r4, r5, r6, pc}
   114e4:	4628      	mov	r0, r5
   114e6:	f7fe fc9e 	bl	fe26 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   114ea:	b118      	cbz	r0, 114f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xc2>
   114ec:	2c1f      	cmp	r4, #31
   114ee:	d901      	bls.n	114f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xc2>
   114f0:	2012      	movs	r0, #18
   114f2:	bd70      	pop	{r4, r5, r6, pc}
   114f4:	4628      	mov	r0, r5
   114f6:	f7fe fc9f 	bl	fe38 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   114fa:	b130      	cbz	r0, 1150a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd8>
   114fc:	4621      	mov	r1, r4
   114fe:	4628      	mov	r0, r5
   11500:	f7fe fc66 	bl	fdd0 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   11504:	b118      	cbz	r0, 1150e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xdc>
   11506:	2000      	movs	r0, #0
   11508:	bd70      	pop	{r4, r5, r6, pc}
   1150a:	2042      	movs	r0, #66	; 0x42
   1150c:	bd70      	pop	{r4, r5, r6, pc}
   1150e:	2045      	movs	r0, #69	; 0x45
   11510:	bd70      	pop	{r4, r5, r6, pc}
   11512:	b510      	push	{r4, lr}
   11514:	4604      	mov	r4, r0
   11516:	7840      	ldrb	r0, [r0, #1]
   11518:	06c1      	lsls	r1, r0, #27
   1151a:	d51c      	bpl.n	11556 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   1151c:	07c0      	lsls	r0, r0, #31
   1151e:	d00b      	beq.n	11538 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x106>
   11520:	f7fa fb6e 	bl	bc00 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   11524:	b1b8      	cbz	r0, 11556 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   11526:	7860      	ldrb	r0, [r4, #1]
   11528:	06c1      	lsls	r1, r0, #27
   1152a:	d405      	bmi.n	11538 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x106>
   1152c:	0700      	lsls	r0, r0, #28
   1152e:	d503      	bpl.n	11538 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x106>
   11530:	7d20      	ldrb	r0, [r4, #20]
   11532:	2802      	cmp	r0, #2
   11534:	d10f      	bne.n	11556 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   11536:	e010      	b.n	1155a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x128>
   11538:	7d20      	ldrb	r0, [r4, #20]
   1153a:	2802      	cmp	r0, #2
   1153c:	d001      	beq.n	11542 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x110>
   1153e:	7ea0      	ldrb	r0, [r4, #26]
   11540:	b948      	cbnz	r0, 11556 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   11542:	7860      	ldrb	r0, [r4, #1]
   11544:	0700      	lsls	r0, r0, #28
   11546:	d408      	bmi.n	1155a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x128>
   11548:	f8d4 0005 	ldr.w	r0, [r4, #5]
   1154c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   11550:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   11554:	d201      	bcs.n	1155a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x128>
   11556:	2011      	movs	r0, #17
   11558:	bd10      	pop	{r4, pc}
   1155a:	2000      	movs	r0, #0
   1155c:	bd10      	pop	{r4, pc}
   1155e:	b538      	push	{r3, r4, r5, lr}
   11560:	4604      	mov	r4, r0
   11562:	7800      	ldrb	r0, [r0, #0]
   11564:	28ef      	cmp	r0, #239	; 0xef
   11566:	d843      	bhi.n	115f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   11568:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   1156c:	f8ad 0000 	strh.w	r0, [sp]
   11570:	9800      	ldr	r0, [sp, #0]
   11572:	f000 f91e 	bl	117b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x380>
   11576:	b3a0      	cbz	r0, 115e2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b0>
   11578:	7861      	ldrb	r1, [r4, #1]
   1157a:	0708      	lsls	r0, r1, #28
   1157c:	d40b      	bmi.n	11596 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   1157e:	f8d4 0002 	ldr.w	r0, [r4, #2]
   11582:	f8d4 3005 	ldr.w	r3, [r4, #5]
   11586:	0a02      	lsrs	r2, r0, #8
   11588:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   1158c:	d830      	bhi.n	115f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   1158e:	2220      	movs	r2, #32
   11590:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   11594:	d82c      	bhi.n	115f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   11596:	7a60      	ldrb	r0, [r4, #9]
   11598:	b318      	cbz	r0, 115e2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b0>
   1159a:	2807      	cmp	r0, #7
   1159c:	d828      	bhi.n	115f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   1159e:	7aa0      	ldrb	r0, [r4, #10]
   115a0:	b128      	cbz	r0, 115ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   115a2:	2801      	cmp	r0, #1
   115a4:	d003      	beq.n	115ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   115a6:	2802      	cmp	r0, #2
   115a8:	d001      	beq.n	115ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   115aa:	2803      	cmp	r0, #3
   115ac:	d120      	bne.n	115f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   115ae:	074a      	lsls	r2, r1, #29
   115b0:	d403      	bmi.n	115ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x188>
   115b2:	2802      	cmp	r0, #2
   115b4:	d001      	beq.n	115ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x188>
   115b6:	2803      	cmp	r0, #3
   115b8:	d105      	bne.n	115c6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x194>
   115ba:	7ae0      	ldrb	r0, [r4, #11]
   115bc:	b108      	cbz	r0, 115c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x190>
   115be:	2801      	cmp	r0, #1
   115c0:	d116      	bne.n	115f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   115c2:	0748      	lsls	r0, r1, #29
   115c4:	d407      	bmi.n	115d6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   115c6:	7ca0      	ldrb	r0, [r4, #18]
   115c8:	b128      	cbz	r0, 115d6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   115ca:	2801      	cmp	r0, #1
   115cc:	d003      	beq.n	115d6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   115ce:	2802      	cmp	r0, #2
   115d0:	d001      	beq.n	115d6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   115d2:	2803      	cmp	r0, #3
   115d4:	d10c      	bne.n	115f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   115d6:	06c8      	lsls	r0, r1, #27
   115d8:	7d20      	ldrb	r0, [r4, #20]
   115da:	d503      	bpl.n	115e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b2>
   115dc:	2801      	cmp	r0, #1
   115de:	d107      	bne.n	115f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   115e0:	e002      	b.n	115e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b6>
   115e2:	e005      	b.n	115f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   115e4:	2802      	cmp	r0, #2
   115e6:	d003      	beq.n	115f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   115e8:	7e20      	ldrb	r0, [r4, #24]
   115ea:	b118      	cbz	r0, 115f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c2>
   115ec:	2801      	cmp	r0, #1
   115ee:	d001      	beq.n	115f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c2>
   115f0:	2012      	movs	r0, #18
   115f2:	bd38      	pop	{r3, r4, r5, pc}
   115f4:	2000      	movs	r0, #0
   115f6:	bd38      	pop	{r3, r4, r5, pc}
   115f8:	b510      	push	{r4, lr}
   115fa:	0004      	movs	r4, r0
   115fc:	d005      	beq.n	1160a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   115fe:	f7fa fb3d 	bl	bc7c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   11602:	4384      	bics	r4, r0
   11604:	d001      	beq.n	1160a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   11606:	2000      	movs	r0, #0
   11608:	bd10      	pop	{r4, pc}
   1160a:	2001      	movs	r0, #1
   1160c:	bd10      	pop	{r4, pc}
   1160e:	28fb      	cmp	r0, #251	; 0xfb
   11610:	d803      	bhi.n	1161a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1e8>
   11612:	f640 0048 	movw	r0, #2120	; 0x848
   11616:	4281      	cmp	r1, r0
   11618:	d901      	bls.n	1161e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ec>
   1161a:	2011      	movs	r0, #17
   1161c:	4770      	bx	lr
   1161e:	2000      	movs	r0, #0
   11620:	4770      	bx	lr
   11622:	381b      	subs	r0, #27
   11624:	28e1      	cmp	r0, #225	; 0xe1
   11626:	d206      	bcs.n	11636 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x204>
   11628:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   1162c:	d303      	bcc.n	11636 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x204>
   1162e:	f244 2090 	movw	r0, #17040	; 0x4290
   11632:	4281      	cmp	r1, r0
   11634:	d901      	bls.n	1163a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x208>
   11636:	2012      	movs	r0, #18
   11638:	4770      	bx	lr
   1163a:	2000      	movs	r0, #0
   1163c:	4770      	bx	lr
   1163e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11642:	4606      	mov	r6, r0
   11644:	f8b0 7056 	ldrh.w	r7, [r0, #86]	; 0x56
   11648:	f8b0 4058 	ldrh.w	r4, [r0, #88]	; 0x58
   1164c:	4615      	mov	r5, r2
   1164e:	3030      	adds	r0, #48	; 0x30
   11650:	f7f7 fae6 	bl	8c20 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   11654:	4680      	mov	r8, r0
   11656:	2102      	movs	r1, #2
   11658:	f7fd fd7b 	bl	f152 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1165c:	4287      	cmp	r7, r0
   1165e:	d200      	bcs.n	11662 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x230>
   11660:	4638      	mov	r0, r7
   11662:	4607      	mov	r7, r0
   11664:	2102      	movs	r1, #2
   11666:	4640      	mov	r0, r8
   11668:	f7fd fd73 	bl	f152 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1166c:	4284      	cmp	r4, r0
   1166e:	d200      	bcs.n	11672 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   11670:	4620      	mov	r0, r4
   11672:	8831      	ldrh	r1, [r6, #0]
   11674:	8029      	strh	r1, [r5, #0]
   11676:	2f1b      	cmp	r7, #27
   11678:	d913      	bls.n	116a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x270>
   1167a:	2ffb      	cmp	r7, #251	; 0xfb
   1167c:	d300      	bcc.n	11680 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x24e>
   1167e:	27fb      	movs	r7, #251	; 0xfb
   11680:	806f      	strh	r7, [r5, #2]
   11682:	281b      	cmp	r0, #27
   11684:	d90f      	bls.n	116a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x274>
   11686:	28fb      	cmp	r0, #251	; 0xfb
   11688:	d300      	bcc.n	1168c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   1168a:	20fb      	movs	r0, #251	; 0xfb
   1168c:	80e8      	strh	r0, [r5, #6]
   1168e:	4640      	mov	r0, r8
   11690:	f7ff fed1 	bl	11436 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   11694:	80a8      	strh	r0, [r5, #4]
   11696:	4640      	mov	r0, r8
   11698:	f7ff fecd 	bl	11436 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   1169c:	8128      	strh	r0, [r5, #8]
   1169e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   116a2:	271b      	movs	r7, #27
   116a4:	e7ec      	b.n	11680 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x24e>
   116a6:	201b      	movs	r0, #27
   116a8:	e7f0      	b.n	1168c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   116aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   116ae:	7890      	ldrb	r0, [r2, #2]
   116b0:	9e06      	ldr	r6, [sp, #24]
   116b2:	461d      	mov	r5, r3
   116b4:	4614      	mov	r4, r2
   116b6:	b908      	cbnz	r0, 116bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28a>
   116b8:	f7fa fae0 	bl	bc7c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   116bc:	78e4      	ldrb	r4, [r4, #3]
   116be:	4607      	mov	r7, r0
   116c0:	b914      	cbnz	r4, 116c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x296>
   116c2:	f7fa fadb 	bl	bc7c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   116c6:	4604      	mov	r4, r0
   116c8:	b16f      	cbz	r7, 116e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   116ca:	b164      	cbz	r4, 116e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   116cc:	4638      	mov	r0, r7
   116ce:	f7ff febd 	bl	1144c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   116d2:	4620      	mov	r0, r4
   116d4:	f7ff feba 	bl	1144c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   116d8:	b12f      	cbz	r7, 116e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   116da:	b124      	cbz	r4, 116e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   116dc:	702f      	strb	r7, [r5, #0]
   116de:	7034      	strb	r4, [r6, #0]
   116e0:	2000      	movs	r0, #0
   116e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   116e6:	2009      	movs	r0, #9
   116e8:	e7fb      	b.n	116e2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b0>
   116ea:	207f      	movs	r0, #127	; 0x7f
   116ec:	f000 b843 	b.w	11776 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
   116f0:	b508      	push	{r3, lr}
   116f2:	f890 1204 	ldrb.w	r1, [r0, #516]	; 0x204
   116f6:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
   116fa:	f88d 0000 	strb.w	r0, [sp]
   116fe:	9800      	ldr	r0, [sp, #0]
   11700:	9000      	str	r0, [sp, #0]
   11702:	f89d 0000 	ldrb.w	r0, [sp]
   11706:	b100      	cbz	r0, 1170a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2d8>
   11708:	2001      	movs	r0, #1
   1170a:	1e40      	subs	r0, r0, #1
   1170c:	4208      	tst	r0, r1
   1170e:	d003      	beq.n	11718 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   11710:	2904      	cmp	r1, #4
   11712:	d001      	beq.n	11718 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   11714:	2001      	movs	r0, #1
   11716:	bd08      	pop	{r3, pc}
   11718:	2000      	movs	r0, #0
   1171a:	bd08      	pop	{r3, pc}
   1171c:	b510      	push	{r4, lr}
   1171e:	f7ff feaa 	bl	11476 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   11722:	2800      	cmp	r0, #0
   11724:	d000      	beq.n	11728 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2f6>
   11726:	2001      	movs	r0, #1
   11728:	bd10      	pop	{r4, pc}
   1172a:	b570      	push	{r4, r5, r6, lr}
   1172c:	4605      	mov	r5, r0
   1172e:	f7fe fb83 	bl	fe38 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   11732:	b170      	cbz	r0, 11752 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x320>
   11734:	4628      	mov	r0, r5
   11736:	f7fe fd34 	bl	101a2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1173a:	2800      	cmp	r0, #0
   1173c:	d008      	beq.n	11750 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x31e>
   1173e:	4628      	mov	r0, r5
   11740:	f7fe fd2c 	bl	1019c <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   11744:	4604      	mov	r4, r0
   11746:	4628      	mov	r0, r5
   11748:	f7fe fd02 	bl	10150 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   1174c:	b118      	cbz	r0, 11756 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x324>
   1174e:	200c      	movs	r0, #12
   11750:	bd70      	pop	{r4, r5, r6, pc}
   11752:	2042      	movs	r0, #66	; 0x42
   11754:	bd70      	pop	{r4, r5, r6, pc}
   11756:	b164      	cbz	r4, 11772 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x340>
   11758:	8820      	ldrh	r0, [r4, #0]
   1175a:	f7fd fb8b 	bl	ee74 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   1175e:	8820      	ldrh	r0, [r4, #0]
   11760:	2100      	movs	r1, #0
   11762:	f7f4 f9c9 	bl	5af8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   11766:	b120      	cbz	r0, 11772 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x340>
   11768:	f241 41fd 	movw	r1, #5373	; 0x14fd
   1176c:	2039      	movs	r0, #57	; 0x39
   1176e:	f7f3 ff2f 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11772:	2000      	movs	r0, #0
   11774:	bd70      	pop	{r4, r5, r6, pc}
   11776:	b508      	push	{r3, lr}
   11778:	f640 1288 	movw	r2, #2440	; 0x988
   1177c:	4669      	mov	r1, sp
   1177e:	f7f3 fe07 	bl	5390 <mpsl_fem_tx_power_split>
   11782:	bd08      	pop	{r3, pc}
   11784:	b530      	push	{r4, r5, lr}
   11786:	f340 0400 	sbfx	r4, r0, #0, #1
   1178a:	f340 0040 	sbfx	r0, r0, #1, #1
   1178e:	1c40      	adds	r0, r0, #1
   11790:	9d03      	ldr	r5, [sp, #12]
   11792:	1c64      	adds	r4, r4, #1
   11794:	d000      	beq.n	11798 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x366>
   11796:	b119      	cbz	r1, 117a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36e>
   11798:	b100      	cbz	r0, 1179c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36a>
   1179a:	b10a      	cbz	r2, 117a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36e>
   1179c:	b91c      	cbnz	r4, 117a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x374>
   1179e:	e001      	b.n	117a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x372>
   117a0:	2011      	movs	r0, #17
   117a2:	bd30      	pop	{r4, r5, pc}
   117a4:	2100      	movs	r1, #0
   117a6:	7019      	strb	r1, [r3, #0]
   117a8:	b900      	cbnz	r0, 117ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37a>
   117aa:	2200      	movs	r2, #0
   117ac:	702a      	strb	r2, [r5, #0]
   117ae:	2000      	movs	r0, #0
   117b0:	bd30      	pop	{r4, r5, pc}
   117b2:	b2c0      	uxtb	r0, r0
   117b4:	06c1      	lsls	r1, r0, #27
   117b6:	d40c      	bmi.n	117d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a0>
   117b8:	0681      	lsls	r1, r0, #26
   117ba:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   117be:	d503      	bpl.n	117c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x396>
   117c0:	b9d1      	cbnz	r1, 117f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   117c2:	0781      	lsls	r1, r0, #30
   117c4:	d418      	bmi.n	117f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   117c6:	e001      	b.n	117cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39a>
   117c8:	2900      	cmp	r1, #0
   117ca:	d1fa      	bne.n	117c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x390>
   117cc:	0700      	lsls	r0, r0, #28
   117ce:	d413      	bmi.n	117f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   117d0:	e010      	b.n	117f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c2>
   117d2:	0641      	lsls	r1, r0, #25
   117d4:	d410      	bmi.n	117f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   117d6:	0681      	lsls	r1, r0, #26
   117d8:	d40e      	bmi.n	117f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   117da:	07c1      	lsls	r1, r0, #31
   117dc:	ea4f 7180 	mov.w	r1, r0, lsl #30
   117e0:	d004      	beq.n	117ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
   117e2:	2900      	cmp	r1, #0
   117e4:	db02      	blt.n	117ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
   117e6:	0740      	lsls	r0, r0, #29
   117e8:	d404      	bmi.n	117f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c2>
   117ea:	e005      	b.n	117f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   117ec:	0701      	lsls	r1, r0, #28
   117ee:	d403      	bmi.n	117f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   117f0:	0740      	lsls	r0, r0, #29
   117f2:	d401      	bmi.n	117f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   117f4:	2001      	movs	r0, #1
   117f6:	4770      	bx	lr
   117f8:	2000      	movs	r0, #0
   117fa:	4770      	bx	lr
   117fc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   117fe:	4669      	mov	r1, sp
   11800:	2001      	movs	r0, #1
   11802:	f7fd f983 	bl	eb0c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   11806:	b178      	cbz	r0, 11828 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3f6>
   11808:	f44f 71b2 	mov.w	r1, #356	; 0x164
   1180c:	2039      	movs	r0, #57	; 0x39
   1180e:	f7f3 fedf 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11812:	9c02      	ldr	r4, [sp, #8]
   11814:	4620      	mov	r0, r4
   11816:	f7fe fcc4 	bl	101a2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1181a:	b128      	cbz	r0, 11828 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3f6>
   1181c:	4620      	mov	r0, r4
   1181e:	f7fe fb47 	bl	feb0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   11822:	b108      	cbz	r0, 11828 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3f6>
   11824:	2001      	movs	r0, #1
   11826:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11828:	4668      	mov	r0, sp
   1182a:	f7f4 f915 	bl	5a58 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1182e:	2800      	cmp	r0, #0
   11830:	d0ef      	beq.n	11812 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3e0>
   11832:	2000      	movs	r0, #0
   11834:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11836:	b510      	push	{r4, lr}
   11838:	f7fe fcb6 	bl	101a8 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   1183c:	b108      	cbz	r0, 11842 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x410>
   1183e:	21e7      	movs	r1, #231	; 0xe7
   11840:	e003      	b.n	1184a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x418>
   11842:	f7f6 fb6b 	bl	7f1c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   11846:	b118      	cbz	r0, 11850 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41e>
   11848:	21ec      	movs	r1, #236	; 0xec
   1184a:	2001      	movs	r0, #1
   1184c:	f7f3 fec0 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11854:	2001      	movs	r0, #1
   11856:	f7f4 b895 	b.w	5984 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   1185a:	6802      	ldr	r2, [r0, #0]
   1185c:	b912      	cbnz	r2, 11864 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x432>
   1185e:	6001      	str	r1, [r0, #0]
   11860:	4770      	bx	lr
   11862:	4602      	mov	r2, r0
   11864:	6850      	ldr	r0, [r2, #4]
   11866:	b108      	cbz	r0, 1186c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x43a>
   11868:	428a      	cmp	r2, r1
   1186a:	d1fa      	bne.n	11862 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x430>
   1186c:	428a      	cmp	r2, r1
   1186e:	d0f7      	beq.n	11860 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42e>
   11870:	6051      	str	r1, [r2, #4]
   11872:	4770      	bx	lr
   11874:	b510      	push	{r4, lr}
   11876:	4604      	mov	r4, r0
   11878:	e002      	b.n	11880 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44e>
   1187a:	6820      	ldr	r0, [r4, #0]
   1187c:	4780      	blx	r0
   1187e:	6864      	ldr	r4, [r4, #4]
   11880:	2c00      	cmp	r4, #0
   11882:	d1fa      	bne.n	1187a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x448>
   11884:	bd10      	pop	{r4, pc}
   11886:	b510      	push	{r4, lr}
   11888:	2000      	movs	r0, #0
   1188a:	f7f4 f87b 	bl	5984 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   1188e:	f7f4 fab3 	bl	5df8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   11892:	f7f4 fd35 	bl	6300 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   11896:	f7f4 ff01 	bl	669c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   1189a:	2800      	cmp	r0, #0
   1189c:	d003      	beq.n	118a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x474>
   1189e:	21c6      	movs	r1, #198	; 0xc6
   118a0:	2001      	movs	r0, #1
   118a2:	f7f3 fe95 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   118a6:	bd10      	pop	{r4, pc}
   118a8:	b510      	push	{r4, lr}
   118aa:	f7ff ffc4 	bl	11836 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x404>
   118ae:	f7ff f881 	bl	109b4 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   118b2:	2800      	cmp	r0, #0
   118b4:	d004      	beq.n	118c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x48e>
   118b6:	f240 1103 	movw	r1, #259	; 0x103
   118ba:	2001      	movs	r0, #1
   118bc:	f7f3 fe88 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   118c0:	bd10      	pop	{r4, pc}

000118c2 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   118c2:	f7f3 babd 	b.w	4e40 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   118c6:	0001      	.short	0x0001
   118c8:	0002000b 	.word	0x0002000b
   118cc:	0005000a 	.word	0x0005000a
   118d0:	000a0009 	.word	0x000a0009
   118d4:	00140008 	.word	0x00140008
   118d8:	001e0007 	.word	0x001e0007
   118dc:	00320006 	.word	0x00320006
   118e0:	004b0005 	.word	0x004b0005
   118e4:	00640004 	.word	0x00640004
   118e8:	00960003 	.word	0x00960003
   118ec:	00fa0002 	.word	0x00fa0002
   118f0:	01f40001 	.word	0x01f40001
	...

000118f6 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   118f6:	b510      	push	{r4, lr}
   118f8:	f7fa fd5a 	bl	c3b0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   118fc:	f000 f81d 	bl	1193a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   11900:	f7fa fa30 	bl	bd64 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   11904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11908:	f7fa bb2a 	b.w	bf60 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0001190c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   1190c:	b510      	push	{r4, lr}
   1190e:	24c8      	movs	r4, #200	; 0xc8
   11910:	1e64      	subs	r4, r4, #1
   11912:	b2e4      	uxtb	r4, r4
   11914:	f7fa fa44 	bl	bda0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   11918:	2802      	cmp	r0, #2
   1191a:	d003      	beq.n	11924 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   1191c:	2801      	cmp	r0, #1
   1191e:	d000      	beq.n	11922 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   11920:	2000      	movs	r0, #0
   11922:	bd10      	pop	{r4, pc}
   11924:	2c00      	cmp	r4, #0
   11926:	d1f3      	bne.n	11910 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   11928:	219e      	movs	r1, #158	; 0x9e
   1192a:	203b      	movs	r0, #59	; 0x3b
   1192c:	f7f3 fe50 	bl	55d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11930:	5840      	ldr	r0, [r0, r1]
   11932:	2800      	cmp	r0, #0
   11934:	d000      	beq.n	11938 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   11936:	2001      	movs	r0, #1
   11938:	4770      	bx	lr

0001193a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   1193a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1193e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11942:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   11946:	f3bf 8f4f 	dsb	sy
   1194a:	f3bf 8f6f 	isb	sy
   1194e:	f7fa bba1 	b.w	c094 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   11952:	2800      	cmp	r0, #0
   11954:	db09      	blt.n	1196a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   11956:	f000 021f 	and.w	r2, r0, #31
   1195a:	2101      	movs	r1, #1
   1195c:	4091      	lsls	r1, r2
   1195e:	0940      	lsrs	r0, r0, #5
   11960:	0080      	lsls	r0, r0, #2
   11962:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   11966:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1196a:	4770      	bx	lr
   1196c:	2800      	cmp	r0, #0
   1196e:	db0d      	blt.n	1198c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   11970:	f000 021f 	and.w	r2, r0, #31
   11974:	2101      	movs	r1, #1
   11976:	4091      	lsls	r1, r2
   11978:	0940      	lsrs	r0, r0, #5
   1197a:	0080      	lsls	r0, r0, #2
   1197c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   11980:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   11984:	f3bf 8f4f 	dsb	sy
   11988:	f3bf 8f6f 	isb	sy
   1198c:	4770      	bx	lr
   1198e:	5840      	ldr	r0, [r0, r1]
   11990:	2800      	cmp	r0, #0
   11992:	d000      	beq.n	11996 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   11994:	2001      	movs	r0, #1
   11996:	4770      	bx	lr
   11998:	5840      	ldr	r0, [r0, r1]
   1199a:	2800      	cmp	r0, #0
   1199c:	d000      	beq.n	119a0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   1199e:	2001      	movs	r0, #1
   119a0:	4770      	bx	lr

000119a2 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   119a2:	b510      	push	{r4, lr}
   119a4:	4604      	mov	r4, r0
   119a6:	4608      	mov	r0, r1
   119a8:	f7fa fe28 	bl	c5fc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   119ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   119b0:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   119b4:	fbb0 f0f1 	udiv	r0, r0, r1
   119b8:	1a20      	subs	r0, r4, r0
   119ba:	1e80      	subs	r0, r0, #2
   119bc:	bd10      	pop	{r4, pc}

000119be <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   119be:	b510      	push	{r4, lr}
   119c0:	4604      	mov	r4, r0
   119c2:	4608      	mov	r0, r1
   119c4:	f7fa fe1a 	bl	c5fc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   119c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   119cc:	fbb0 f0f1 	udiv	r0, r0, r1
   119d0:	1a20      	subs	r0, r4, r0
   119d2:	bd10      	pop	{r4, pc}
   119d4:	d8d8d8d8 	.word	0xd8d8d8d8
   119d8:	d8d8d8d8 	.word	0xd8d8d8d8
   119dc:	d8d8d8d8 	.word	0xd8d8d8d8
   119e0:	d8d8d8d8 	.word	0xd8d8d8d8
   119e4:	d8d8d8d8 	.word	0xd8d8d8d8
   119e8:	ecececec 	.word	0xecececec
   119ec:	f0f0f0f0 	.word	0xf0f0f0f0
   119f0:	f4f4f4f4 	.word	0xf4f4f4f4
   119f4:	f8f8f8f8 	.word	0xf8f8f8f8
   119f8:	fcfcfcfc 	.word	0xfcfcfcfc
   119fc:	03020000 	.word	0x03020000
   11a00:	07060504 	.word	0x07060504
   11a04:	d8d8d808 	.word	0xd8d8d808
   11a08:	d8d8d8d8 	.word	0xd8d8d8d8
   11a0c:	d8d8d8d8 	.word	0xd8d8d8d8
   11a10:	d8d8d8d8 	.word	0xd8d8d8d8
   11a14:	d8d8d8d8 	.word	0xd8d8d8d8
   11a18:	ecececd8 	.word	0xecececd8
   11a1c:	f0f0f0ec 	.word	0xf0f0f0ec
   11a20:	f4f4f4f0 	.word	0xf4f4f4f0
   11a24:	f8f8f8f4 	.word	0xf8f8f8f4
   11a28:	fcfcfcf8 	.word	0xfcfcfcf8
   11a2c:	000000fc 	.word	0x000000fc
   11a30:	0403      	.short	0x0403
   11a32:	080c      	.short	0x080c
   11a34:	010d1702 	.word	0x010d1702
   11a38:	09090201 	.word	0x09090201
   11a3c:	02060101 	.word	0x02060101
   11a40:	03181809 	.word	0x03181809
   11a44:	09090101 	.word	0x09090101
   11a48:	03050303 	.word	0x03050303
   11a4c:	02220102 	.word	0x02220102
   11a50:	10092402 	.word	0x10092402
   11a54:	05050404 	.word	0x05050404

00011a58 <AMPShowResult>:
}//end
*/

/* It's your choice here what to do with the data. Here is just an example to print to UART */
int32_t AMPShowResult(float *pData, uint32_t DataCount)
{
   11a58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(!IntCount) index = 0;
  for(int i=0;i<DataCount;i++)
  {
    float x = pData[i];
    int x_int = (int) x;                             // extract the integer part
    int x_frac = (int) (fabs(x - x_int) * 10000);    // extract the fractional part (ensuring it's positive)
   11a5c:	f20f 0958 	addw	r9, pc, #88	; 0x58
   11a60:	e9d9 8900 	ldrd	r8, r9, [r9]
    printf("Current: %d.%04d uA\n\r", x_int, x_frac);
   11a64:	f8df b058 	ldr.w	fp, [pc, #88]	; 11ac0 <AMPShowResult+0x68>
{
   11a68:	4606      	mov	r6, r0
   11a6a:	460d      	mov	r5, r1
  for(int i=0;i<DataCount;i++)
   11a6c:	2400      	movs	r4, #0
   11a6e:	42ac      	cmp	r4, r5
   11a70:	d102      	bne.n	11a78 <AMPShowResult+0x20>
    // printf("index:%d, Current:%fuA\n", index++, pData[i]);
  }
  return 0;
}
   11a72:	2000      	movs	r0, #0
   11a74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    float x = pData[i];
   11a78:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
    int x_int = (int) x;                             // extract the integer part
   11a7c:	4650      	mov	r0, sl
   11a7e:	f7ef fb31 	bl	10e4 <__aeabi_f2iz>
   11a82:	4607      	mov	r7, r0
    int x_frac = (int) (fabs(x - x_int) * 10000);    // extract the fractional part (ensuring it's positive)
   11a84:	f7ef f914 	bl	cb0 <__aeabi_i2f>
   11a88:	4601      	mov	r1, r0
   11a8a:	4650      	mov	r0, sl
   11a8c:	f7ef f85a 	bl	b44 <__aeabi_fsub>
   11a90:	f7ee fcea 	bl	468 <__aeabi_f2d>
   11a94:	f01c f98b 	bl	2ddae <fabs>
   11a98:	4642      	mov	r2, r8
   11a9a:	464b      	mov	r3, r9
   11a9c:	f7ee fd3c 	bl	518 <__aeabi_dmul>
   11aa0:	f7ee ffd4 	bl	a4c <__aeabi_d2iz>
    printf("Current: %d.%04d uA\n\r", x_int, x_frac);
   11aa4:	4639      	mov	r1, r7
    int x_frac = (int) (fabs(x - x_int) * 10000);    // extract the fractional part (ensuring it's positive)
   11aa6:	4602      	mov	r2, r0
    printf("Current: %d.%04d uA\n\r", x_int, x_frac);
   11aa8:	4658      	mov	r0, fp
   11aaa:	f013 fcd9 	bl	25460 <iprintf>
  for(int i=0;i<DataCount;i++)
   11aae:	3401      	adds	r4, #1
   11ab0:	e7dd      	b.n	11a6e <AMPShowResult+0x16>
   11ab2:	bf00      	nop
   11ab4:	f3af 8000 	nop.w
   11ab8:	00000000 	.word	0x00000000
   11abc:	40c38800 	.word	0x40c38800
   11ac0:	0002f624 	.word	0x0002f624
   11ac4:	00000000 	.word	0x00000000

00011ac8 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   11ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   11acc:	4d4b      	ldr	r5, [pc, #300]	; (11bfc <bt_init+0x134>)
{
   11ace:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   11ad0:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
   11ad4:	6899      	ldr	r1, [r3, #8]
   11ad6:	f011 0101 	ands.w	r1, r1, #1
{
   11ada:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   11adc:	d122      	bne.n	11b24 <bt_init+0x5c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   11ade:	f107 0208 	add.w	r2, r7, #8
   11ae2:	f640 4003 	movw	r0, #3075	; 0xc03
   11ae6:	f006 fa99 	bl	1801c <bt_hci_cmd_send_sync>
		if (err) {
   11aea:	4604      	mov	r4, r0
   11aec:	2800      	cmp	r0, #0
   11aee:	d17f      	bne.n	11bf0 <bt_init+0x128>
	uint8_t status = buf->data[0];
   11af0:	68bb      	ldr	r3, [r7, #8]
   11af2:	689b      	ldr	r3, [r3, #8]
	if (status) {
   11af4:	781b      	ldrb	r3, [r3, #0]
   11af6:	b993      	cbnz	r3, 11b1e <bt_init+0x56>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11af8:	f3bf 8f5b 	dmb	ish
   11afc:	462b      	mov	r3, r5
   11afe:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   11b02:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   11b06:	f002 0209 	and.w	r2, r2, #9
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11b0a:	f3bf 8f5b 	dmb	ish
   11b0e:	e853 1f00 	ldrex	r1, [r3]
   11b12:	e843 2000 	strex	r0, r2, [r3]
   11b16:	2800      	cmp	r0, #0
   11b18:	d1f9      	bne.n	11b0e <bt_init+0x46>
   11b1a:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   11b1e:	68b8      	ldr	r0, [r7, #8]
   11b20:	f00d fd28 	bl	1f574 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   11b24:	f107 0208 	add.w	r2, r7, #8
   11b28:	2100      	movs	r1, #0
   11b2a:	f241 0003 	movw	r0, #4099	; 0x1003
   11b2e:	f006 fa75 	bl	1801c <bt_hci_cmd_send_sync>
	if (err) {
   11b32:	4604      	mov	r4, r0
   11b34:	2800      	cmp	r0, #0
   11b36:	d15b      	bne.n	11bf0 <bt_init+0x128>
	read_local_features_complete(rsp);
   11b38:	68bb      	ldr	r3, [r7, #8]
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   11b3a:	4e31      	ldr	r6, [pc, #196]	; (11c00 <bt_init+0x138>)
   11b3c:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   11b3e:	f8d2 0001 	ldr.w	r0, [r2, #1]
   11b42:	f8d2 1005 	ldr.w	r1, [r2, #5]
   11b46:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   11b48:	4618      	mov	r0, r3
   11b4a:	f00d fd13 	bl	1f574 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   11b4e:	4621      	mov	r1, r4
   11b50:	f107 0208 	add.w	r2, r7, #8
   11b54:	f241 0001 	movw	r0, #4097	; 0x1001
   11b58:	f006 fa60 	bl	1801c <bt_hci_cmd_send_sync>
	if (err) {
   11b5c:	4604      	mov	r4, r0
   11b5e:	2800      	cmp	r0, #0
   11b60:	d146      	bne.n	11bf0 <bt_init+0x128>
	read_local_ver_complete(rsp);
   11b62:	68b8      	ldr	r0, [r7, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   11b64:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   11b66:	785a      	ldrb	r2, [r3, #1]
   11b68:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   11b6c:	78d9      	ldrb	r1, [r3, #3]
   11b6e:	789a      	ldrb	r2, [r3, #2]
   11b70:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   11b74:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   11b78:	791a      	ldrb	r2, [r3, #4]
   11b7a:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   11b7e:	7a19      	ldrb	r1, [r3, #8]
   11b80:	79da      	ldrb	r2, [r3, #7]
   11b82:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   11b86:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   11b8a:	795a      	ldrb	r2, [r3, #5]
   11b8c:	799b      	ldrb	r3, [r3, #6]
   11b8e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   11b92:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   11b96:	f00d fced 	bl	1f574 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   11b9a:	4621      	mov	r1, r4
   11b9c:	f107 0208 	add.w	r2, r7, #8
   11ba0:	f241 0002 	movw	r0, #4098	; 0x1002
   11ba4:	f006 fa3a 	bl	1801c <bt_hci_cmd_send_sync>
	if (err) {
   11ba8:	4604      	mov	r4, r0
   11baa:	bb08      	cbnz	r0, 11bf0 <bt_init+0x128>
	read_supported_commands_complete(rsp);
   11bac:	f8d7 c008 	ldr.w	ip, [r7, #8]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   11bb0:	f8dc 2008 	ldr.w	r2, [ip, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   11bb4:	1c53      	adds	r3, r2, #1
   11bb6:	3241      	adds	r2, #65	; 0x41
   11bb8:	6818      	ldr	r0, [r3, #0]
   11bba:	6859      	ldr	r1, [r3, #4]
   11bbc:	4634      	mov	r4, r6
   11bbe:	c403      	stmia	r4!, {r0, r1}
   11bc0:	3308      	adds	r3, #8
   11bc2:	4293      	cmp	r3, r2
   11bc4:	4626      	mov	r6, r4
   11bc6:	d1f7      	bne.n	11bb8 <bt_init+0xf0>
	net_buf_unref(rsp);
   11bc8:	4660      	mov	r0, ip
   11bca:	f00d fcd3 	bl	1f574 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   11bce:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   11bd2:	065a      	lsls	r2, r3, #25
   11bd4:	d41a      	bmi.n	11c0c <bt_init+0x144>
		BT_ERR("Non-LE capable controller detected!");
   11bd6:	4b0b      	ldr	r3, [pc, #44]	; (11c04 <bt_init+0x13c>)
   11bd8:	61fb      	str	r3, [r7, #28]
   11bda:	480b      	ldr	r0, [pc, #44]	; (11c08 <bt_init+0x140>)
   11bdc:	2302      	movs	r3, #2
   11bde:	f107 0218 	add.w	r2, r7, #24
   11be2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   11be6:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("Non-LE capable controller detected!");
   11bea:	61bb      	str	r3, [r7, #24]
   11bec:	f018 fdcd 	bl	2a78a <z_log_msg_static_create.constprop.0>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   11bf0:	4620      	mov	r0, r4
   11bf2:	3720      	adds	r7, #32
   11bf4:	46bd      	mov	sp, r7
   11bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11bfa:	bf00      	nop
   11bfc:	20000350 	.word	0x20000350
   11c00:	200003c0 	.word	0x200003c0
   11c04:	00030693 	.word	0x00030693
   11c08:	0002e5bc 	.word	0x0002e5bc
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   11c0c:	f107 0208 	add.w	r2, r7, #8
   11c10:	2100      	movs	r1, #0
   11c12:	f242 0003 	movw	r0, #8195	; 0x2003
   11c16:	f006 fa01 	bl	1801c <bt_hci_cmd_send_sync>
	if (err) {
   11c1a:	4604      	mov	r4, r0
   11c1c:	2800      	cmp	r0, #0
   11c1e:	d1e7      	bne.n	11bf0 <bt_init+0x128>
	read_le_features_complete(rsp);
   11c20:	68bb      	ldr	r3, [r7, #8]
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   11c22:	4ebd      	ldr	r6, [pc, #756]	; (11f18 <bt_init+0x450>)
   11c24:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   11c26:	f8d2 0001 	ldr.w	r0, [r2, #1]
   11c2a:	f8d2 1005 	ldr.w	r1, [r2, #5]
   11c2e:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   11c30:	4618      	mov	r0, r3
   11c32:	f00d fc9f 	bl	1f574 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   11c36:	4621      	mov	r1, r4
   11c38:	f107 0208 	add.w	r2, r7, #8
   11c3c:	f242 0002 	movw	r0, #8194	; 0x2002
   11c40:	f006 f9ec 	bl	1801c <bt_hci_cmd_send_sync>
		if (err) {
   11c44:	4604      	mov	r4, r0
   11c46:	2800      	cmp	r0, #0
   11c48:	d1d2      	bne.n	11bf0 <bt_init+0x128>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   11c4a:	68bb      	ldr	r3, [r7, #8]
   11c4c:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   11c4e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   11c52:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   11c56:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   11c58:	b129      	cbz	r1, 11c66 <bt_init+0x19e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   11c5a:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   11c5c:	4611      	mov	r1, r2
   11c5e:	f106 0028 	add.w	r0, r6, #40	; 0x28
   11c62:	f01b fc96 	bl	2d592 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   11c66:	68b8      	ldr	r0, [r7, #8]
   11c68:	f00d fc84 	bl	1f574 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   11c6c:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   11c70:	f016 0620 	ands.w	r6, r6, #32
   11c74:	f000 811a 	beq.w	11eac <bt_init+0x3e4>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   11c78:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   11c7c:	071b      	lsls	r3, r3, #28
   11c7e:	d513      	bpl.n	11ca8 <bt_init+0x1e0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   11c80:	f107 0208 	add.w	r2, r7, #8
   11c84:	2100      	movs	r1, #0
   11c86:	f242 001c 	movw	r0, #8220	; 0x201c
   11c8a:	f006 f9c7 	bl	1801c <bt_hci_cmd_send_sync>
		if (err) {
   11c8e:	4604      	mov	r4, r0
   11c90:	2800      	cmp	r0, #0
   11c92:	d1ad      	bne.n	11bf0 <bt_init+0x128>
		le_read_supp_states_complete(rsp);
   11c94:	68b8      	ldr	r0, [r7, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   11c96:	6883      	ldr	r3, [r0, #8]
   11c98:	f8d3 2001 	ldr.w	r2, [r3, #1]
   11c9c:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   11ca0:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   11ca4:	f00d fc66 	bl	1f574 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   11ca8:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   11cac:	069e      	lsls	r6, r3, #26
   11cae:	d521      	bpl.n	11cf4 <bt_init+0x22c>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   11cb0:	1d39      	adds	r1, r7, #4
   11cb2:	1cb8      	adds	r0, r7, #2
   11cb4:	f006 fa2e 	bl	18114 <hci_le_read_max_data_len>
		if (err) {
   11cb8:	4604      	mov	r4, r0
   11cba:	2800      	cmp	r0, #0
   11cbc:	d198      	bne.n	11bf0 <bt_init+0x128>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   11cbe:	2104      	movs	r1, #4
   11cc0:	f242 0024 	movw	r0, #8228	; 0x2024
   11cc4:	f006 f970 	bl	17fa8 <bt_hci_cmd_create>
		if (!buf) {
   11cc8:	4606      	mov	r6, r0
   11cca:	2800      	cmp	r0, #0
   11ccc:	f000 80f5 	beq.w	11eba <bt_init+0x3f2>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   11cd0:	2104      	movs	r1, #4
   11cd2:	3008      	adds	r0, #8
   11cd4:	f01a fe06 	bl	2c8e4 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   11cd8:	887b      	ldrh	r3, [r7, #2]
   11cda:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   11cdc:	88bb      	ldrh	r3, [r7, #4]
   11cde:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   11ce0:	4622      	mov	r2, r4
   11ce2:	4631      	mov	r1, r6
   11ce4:	f242 0024 	movw	r0, #8228	; 0x2024
   11ce8:	f006 f998 	bl	1801c <bt_hci_cmd_send_sync>
		if (err) {
   11cec:	4604      	mov	r4, r0
   11cee:	2800      	cmp	r0, #0
   11cf0:	f47f af7e 	bne.w	11bf0 <bt_init+0x128>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   11cf4:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   11cf8:	065c      	lsls	r4, r3, #25
   11cfa:	d52b      	bpl.n	11d54 <bt_init+0x28c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
   11cfc:	2102      	movs	r1, #2
   11cfe:	f242 002e 	movw	r0, #8238	; 0x202e
   11d02:	f006 f951 	bl	17fa8 <bt_hci_cmd_create>
		if (!buf) {
   11d06:	4604      	mov	r4, r0
   11d08:	2800      	cmp	r0, #0
   11d0a:	f000 80d6 	beq.w	11eba <bt_init+0x3f2>
   11d0e:	2102      	movs	r1, #2
   11d10:	3008      	adds	r0, #8
   11d12:	f01a fde7 	bl	2c8e4 <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(bt_dev.rpa_timeout);
   11d16:	f8b5 31a0 	ldrh.w	r3, [r5, #416]	; 0x1a0
   11d1a:	8003      	strh	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
   11d1c:	4621      	mov	r1, r4
   11d1e:	2200      	movs	r2, #0
   11d20:	f242 002e 	movw	r0, #8238	; 0x202e
   11d24:	f006 f97a 	bl	1801c <bt_hci_cmd_send_sync>
		if (err) {
   11d28:	4604      	mov	r4, r0
   11d2a:	2800      	cmp	r0, #0
   11d2c:	f47f af60 	bne.w	11bf0 <bt_init+0x128>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   11d30:	4601      	mov	r1, r0
   11d32:	f107 0208 	add.w	r2, r7, #8
   11d36:	f242 002a 	movw	r0, #8234	; 0x202a
   11d3a:	f006 f96f 	bl	1801c <bt_hci_cmd_send_sync>
		if (err) {
   11d3e:	4604      	mov	r4, r0
   11d40:	2800      	cmp	r0, #0
   11d42:	f47f af55 	bne.w	11bf0 <bt_init+0x128>
		le_read_resolving_list_size_complete(rsp);
   11d46:	68b8      	ldr	r0, [r7, #8]
	bt_dev.le.rl_size = rp->rl_size;
   11d48:	6883      	ldr	r3, [r0, #8]
   11d4a:	785b      	ldrb	r3, [r3, #1]
   11d4c:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   11d50:	f00d fc10 	bl	1f574 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   11d54:	2108      	movs	r1, #8
   11d56:	f242 0001 	movw	r0, #8193	; 0x2001
   11d5a:	f006 f925 	bl	17fa8 <bt_hci_cmd_create>
	if (!buf) {
   11d5e:	4604      	mov	r4, r0
   11d60:	2800      	cmp	r0, #0
   11d62:	f000 80aa 	beq.w	11eba <bt_init+0x3f2>
   11d66:	2108      	movs	r1, #8
   11d68:	4408      	add	r0, r1
   11d6a:	f01a fdbb 	bl	2c8e4 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   11d6e:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   11d72:	f011 0f40 	tst.w	r1, #64	; 0x40
   11d76:	4602      	mov	r2, r0
   11d78:	f240 2302 	movw	r3, #514	; 0x202
   11d7c:	bf08      	it	eq
   11d7e:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   11d80:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   11d82:	bf4c      	ite	mi
   11d84:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   11d88:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   11d8c:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   11d8e:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   11d92:	bf48      	it	mi
   11d94:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   11d98:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   11d9c:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   11da0:	bf18      	it	ne
   11da2:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   11da6:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   11daa:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   11dac:	bf48      	it	mi
   11dae:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   11db2:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   11db4:	bf08      	it	eq
   11db6:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   11dba:	2100      	movs	r1, #0
   11dbc:	f018 fcf4 	bl	2a7a8 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   11dc0:	4621      	mov	r1, r4
   11dc2:	2200      	movs	r2, #0
   11dc4:	f242 0001 	movw	r0, #8193	; 0x2001
   11dc8:	f006 f928 	bl	1801c <bt_hci_cmd_send_sync>
	if (err) {
   11dcc:	4604      	mov	r4, r0
   11dce:	2800      	cmp	r0, #0
   11dd0:	f47f af0e 	bne.w	11bf0 <bt_init+0x128>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   11dd4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   11dd8:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   11ddc:	0698      	lsls	r0, r3, #26
   11dde:	f100 8081 	bmi.w	11ee4 <bt_init+0x41c>
	if (bt_dev.le.acl_mtu) {
   11de2:	b9e1      	cbnz	r1, 11e1e <bt_init+0x356>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   11de4:	f107 0208 	add.w	r2, r7, #8
   11de8:	f241 0005 	movw	r0, #4101	; 0x1005
   11dec:	f006 f916 	bl	1801c <bt_hci_cmd_send_sync>
	if (err) {
   11df0:	4604      	mov	r4, r0
   11df2:	2800      	cmp	r0, #0
   11df4:	f47f aefc 	bne.w	11bf0 <bt_init+0x128>
	if (bt_dev.le.acl_mtu) {
   11df8:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   11dfc:	b963      	cbnz	r3, 11e18 <bt_init+0x350>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   11dfe:	68bb      	ldr	r3, [r7, #8]
   11e00:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   11e02:	785a      	ldrb	r2, [r3, #1]
   11e04:	7899      	ldrb	r1, [r3, #2]
   11e06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   11e0a:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   11e0e:	889a      	ldrh	r2, [r3, #4]
   11e10:	4842      	ldr	r0, [pc, #264]	; (11f1c <bt_init+0x454>)
   11e12:	4611      	mov	r1, r2
   11e14:	f01b fbbd 	bl	2d592 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   11e18:	68b8      	ldr	r0, [r7, #8]
   11e1a:	f00d fbab 	bl	1f574 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   11e1e:	2108      	movs	r1, #8
   11e20:	f640 4001 	movw	r0, #3073	; 0xc01
   11e24:	f006 f8c0 	bl	17fa8 <bt_hci_cmd_create>
	if (!buf) {
   11e28:	4604      	mov	r4, r0
   11e2a:	2800      	cmp	r0, #0
   11e2c:	d045      	beq.n	11eba <bt_init+0x3f2>
   11e2e:	2108      	movs	r1, #8
   11e30:	4408      	add	r0, r1
   11e32:	f01a fd57 	bl	2c8e4 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   11e36:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   11e3a:	07d9      	lsls	r1, r3, #31
   11e3c:	4602      	mov	r2, r0
   11e3e:	d561      	bpl.n	11f04 <bt_init+0x43c>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   11e40:	a133      	add	r1, pc, #204	; (adr r1, 11f10 <bt_init+0x448>)
   11e42:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
   11e46:	f018 fcaf 	bl	2a7a8 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   11e4a:	4621      	mov	r1, r4
   11e4c:	2200      	movs	r2, #0
   11e4e:	f640 4001 	movw	r0, #3073	; 0xc01
   11e52:	f006 f8e3 	bl	1801c <bt_hci_cmd_send_sync>
	if (err) {
   11e56:	4604      	mov	r4, r0
   11e58:	2800      	cmp	r0, #0
   11e5a:	f47f aec9 	bne.w	11bf0 <bt_init+0x128>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   11e5e:	4601      	mov	r1, r0
   11e60:	1d3a      	adds	r2, r7, #4
   11e62:	f64f 4001 	movw	r0, #64513	; 0xfc01
   11e66:	f006 f8d9 	bl	1801c <bt_hci_cmd_send_sync>
	if (err) {
   11e6a:	2800      	cmp	r0, #0
   11e6c:	d060      	beq.n	11f30 <bt_init+0x468>
		BT_WARN("Vendor HCI extensions not available");
   11e6e:	4b2c      	ldr	r3, [pc, #176]	; (11f20 <bt_init+0x458>)
   11e70:	61fb      	str	r3, [r7, #28]
   11e72:	2302      	movs	r3, #2
   11e74:	61bb      	str	r3, [r7, #24]
			BT_WARN("Failed to read supported vendor features");
   11e76:	482b      	ldr	r0, [pc, #172]	; (11f24 <bt_init+0x45c>)
   11e78:	f107 0218 	add.w	r2, r7, #24
   11e7c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11e80:	f018 fc83 	bl	2a78a <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
   11e84:	f007 fbce 	bl	19624 <bt_id_init>
	if (err) {
   11e88:	4604      	mov	r4, r0
   11e8a:	2800      	cmp	r0, #0
   11e8c:	f47f aeb0 	bne.w	11bf0 <bt_init+0x128>
		err = bt_conn_init();
   11e90:	f008 fa9a 	bl	1a3c8 <bt_conn_init>
		if (err) {
   11e94:	4604      	mov	r4, r0
   11e96:	2800      	cmp	r0, #0
   11e98:	f47f aeaa 	bne.w	11bf0 <bt_init+0x128>
		if (!bt_dev.id_count) {
   11e9c:	79eb      	ldrb	r3, [r5, #7]
   11e9e:	2b00      	cmp	r3, #0
   11ea0:	f040 80d7 	bne.w	12052 <bt_init+0x58a>
   11ea4:	f005 fc7e 	bl	177a4 <bt_init.part.0>
   11ea8:	4604      	mov	r4, r0
   11eaa:	e6a1      	b.n	11bf0 <bt_init+0x128>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   11eac:	2102      	movs	r1, #2
   11eae:	f640 406d 	movw	r0, #3181	; 0xc6d
   11eb2:	f006 f879 	bl	17fa8 <bt_hci_cmd_create>
		if (!buf) {
   11eb6:	4604      	mov	r4, r0
   11eb8:	b910      	cbnz	r0, 11ec0 <bt_init+0x3f8>
		return -ENOBUFS;
   11eba:	f06f 0468 	mvn.w	r4, #104	; 0x68
   11ebe:	e697      	b.n	11bf0 <bt_init+0x128>
   11ec0:	2102      	movs	r1, #2
   11ec2:	3008      	adds	r0, #8
   11ec4:	f01a fd0e 	bl	2c8e4 <net_buf_simple_add>
		cp_le->le = 0x01;
   11ec8:	2301      	movs	r3, #1
   11eca:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   11ecc:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   11ece:	4621      	mov	r1, r4
   11ed0:	4632      	mov	r2, r6
   11ed2:	f640 406d 	movw	r0, #3181	; 0xc6d
   11ed6:	f006 f8a1 	bl	1801c <bt_hci_cmd_send_sync>
		if (err) {
   11eda:	4604      	mov	r4, r0
   11edc:	2800      	cmp	r0, #0
   11ede:	f43f aecb 	beq.w	11c78 <bt_init+0x1b0>
   11ee2:	e685      	b.n	11bf0 <bt_init+0x128>
	else if (!bt_dev.le.acl_mtu) {
   11ee4:	2900      	cmp	r1, #0
   11ee6:	d19a      	bne.n	11e1e <bt_init+0x356>
		BT_ERR("ACL BR/EDR buffers not initialized");
   11ee8:	4b0f      	ldr	r3, [pc, #60]	; (11f28 <bt_init+0x460>)
   11eea:	61fb      	str	r3, [r7, #28]
   11eec:	480d      	ldr	r0, [pc, #52]	; (11f24 <bt_init+0x45c>)
   11eee:	2302      	movs	r3, #2
   11ef0:	f107 0218 	add.w	r2, r7, #24
   11ef4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11ef8:	61bb      	str	r3, [r7, #24]
		return -EIO;
   11efa:	f06f 0404 	mvn.w	r4, #4
		BT_ERR("ACL BR/EDR buffers not initialized");
   11efe:	f018 fc44 	bl	2a78a <z_log_msg_static_create.constprop.0>
	if (err) {
   11f02:	e675      	b.n	11bf0 <bt_init+0x128>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   11f04:	4809      	ldr	r0, [pc, #36]	; (11f2c <bt_init+0x464>)
   11f06:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   11f0a:	e79c      	b.n	11e46 <bt_init+0x37e>
   11f0c:	f3af 8000 	nop.w
   11f10:	02008890 	.word	0x02008890
   11f14:	20008000 	.word	0x20008000
   11f18:	20000420 	.word	0x20000420
   11f1c:	20000450 	.word	0x20000450
   11f20:	000306da 	.word	0x000306da
   11f24:	0002e5bc 	.word	0x0002e5bc
   11f28:	000306b7 	.word	0x000306b7
   11f2c:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
   11f30:	687b      	ldr	r3, [r7, #4]
   11f32:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
   11f34:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   11f38:	2b03      	cmp	r3, #3
		return plat_str[platform];
   11f3a:	bf96      	itet	ls
   11f3c:	4a48      	ldrls	r2, [pc, #288]	; (12060 <bt_init+0x598>)
	return "unknown";
   11f3e:	4949      	ldrhi	r1, [pc, #292]	; (12064 <bt_init+0x59c>)
		return plat_str[platform];
   11f40:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
   11f44:	466e      	mov	r6, sp
   11f46:	b08a      	sub	sp, #40	; 0x28
   11f48:	466a      	mov	r2, sp
   11f4a:	4847      	ldr	r0, [pc, #284]	; (12068 <bt_init+0x5a0>)
   11f4c:	61d3      	str	r3, [r2, #28]
   11f4e:	2302      	movs	r3, #2
   11f50:	f882 3020 	strb.w	r3, [r2, #32]
   11f54:	4b45      	ldr	r3, [pc, #276]	; (1206c <bt_init+0x5a4>)
   11f56:	e9c2 0105 	strd	r0, r1, [r2, #20]
   11f5a:	f842 3f10 	str.w	r3, [r2, #16]!
   11f5e:	4844      	ldr	r0, [pc, #272]	; (12070 <bt_init+0x5a8>)
   11f60:	f44f 510b 	mov.w	r1, #8896	; 0x22c0
   11f64:	f018 fc11 	bl	2a78a <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   11f68:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
   11f6c:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   11f70:	2a02      	cmp	r2, #2
   11f72:	46b5      	mov	sp, r6
   11f74:	d14c      	bne.n	12010 <bt_init+0x548>
	if (variant < ARRAY_SIZE(nordic_str)) {
   11f76:	2b03      	cmp	r3, #3
   11f78:	d84a      	bhi.n	12010 <bt_init+0x548>
		return nordic_str[variant];
   11f7a:	4a3e      	ldr	r2, [pc, #248]	; (12074 <bt_init+0x5ac>)
   11f7c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
   11f80:	466e      	mov	r6, sp
   11f82:	b08a      	sub	sp, #40	; 0x28
   11f84:	466a      	mov	r2, sp
   11f86:	483c      	ldr	r0, [pc, #240]	; (12078 <bt_init+0x5b0>)
   11f88:	61d3      	str	r3, [r2, #28]
   11f8a:	2302      	movs	r3, #2
   11f8c:	f882 3020 	strb.w	r3, [r2, #32]
   11f90:	4b36      	ldr	r3, [pc, #216]	; (1206c <bt_init+0x5a4>)
   11f92:	e9c2 0105 	strd	r0, r1, [r2, #20]
   11f96:	f842 3f10 	str.w	r3, [r2, #16]!
   11f9a:	f44f 510b 	mov.w	r1, #8896	; 0x22c0
   11f9e:	4834      	ldr	r0, [pc, #208]	; (12070 <bt_init+0x5a8>)
   11fa0:	f018 fbf3 	bl	2a78a <z_log_msg_static_create.constprop.0>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   11fa4:	7963      	ldrb	r3, [r4, #5]
   11fa6:	f894 c006 	ldrb.w	ip, [r4, #6]
   11faa:	f8d4 0009 	ldr.w	r0, [r4, #9]
	if (variant < ARRAY_SIZE(var_str)) {
   11fae:	2b03      	cmp	r3, #3
   11fb0:	46b5      	mov	sp, r6
		return var_str[variant];
   11fb2:	bf98      	it	ls
   11fb4:	4a31      	ldrls	r2, [pc, #196]	; (1207c <bt_init+0x5b4>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   11fb6:	f8b4 6007 	ldrh.w	r6, [r4, #7]
		return var_str[variant];
   11fba:	bf94      	ite	ls
   11fbc:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	return "unknown";
   11fc0:	4928      	ldrhi	r1, [pc, #160]	; (12064 <bt_init+0x59c>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   11fc2:	466c      	mov	r4, sp
   11fc4:	b08c      	sub	sp, #48	; 0x30
   11fc6:	466a      	mov	r2, sp
   11fc8:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 12080 <bt_init+0x5b8>
   11fcc:	e9c2 3c07 	strd	r3, ip, [r2, #28]
   11fd0:	f04f 0802 	mov.w	r8, #2
   11fd4:	4b2b      	ldr	r3, [pc, #172]	; (12084 <bt_init+0x5bc>)
   11fd6:	f882 802c 	strb.w	r8, [r2, #44]	; 0x2c
   11fda:	e9c2 e105 	strd	lr, r1, [r2, #20]
   11fde:	e9c2 6009 	strd	r6, r0, [r2, #36]	; 0x24
   11fe2:	f44f 516b 	mov.w	r1, #15040	; 0x3ac0
   11fe6:	f842 3f10 	str.w	r3, [r2, #16]!
   11fea:	4821      	ldr	r0, [pc, #132]	; (12070 <bt_init+0x5a8>)
   11fec:	f018 fbcd 	bl	2a78a <z_log_msg_static_create.constprop.0>
   11ff0:	46a5      	mov	sp, r4
	net_buf_unref(rsp);
   11ff2:	6878      	ldr	r0, [r7, #4]
   11ff4:	f00d fabe 	bl	1f574 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   11ff8:	1d3a      	adds	r2, r7, #4
   11ffa:	2100      	movs	r1, #0
   11ffc:	f64f 4002 	movw	r0, #64514	; 0xfc02
   12000:	f006 f80c 	bl	1801c <bt_hci_cmd_send_sync>
	if (err) {
   12004:	4604      	mov	r4, r0
   12006:	b128      	cbz	r0, 12014 <bt_init+0x54c>
		BT_WARN("Failed to read supported vendor commands");
   12008:	4b1f      	ldr	r3, [pc, #124]	; (12088 <bt_init+0x5c0>)
			BT_WARN("Failed to read supported vendor features");
   1200a:	e9c7 8306 	strd	r8, r3, [r7, #24]
   1200e:	e732      	b.n	11e76 <bt_init+0x3ae>
		return "unknown";
   12010:	4914      	ldr	r1, [pc, #80]	; (12064 <bt_init+0x59c>)
   12012:	e7b5      	b.n	11f80 <bt_init+0x4b8>
	rp.cmds = (void *)rsp->data;
   12014:	6878      	ldr	r0, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   12016:	4e1d      	ldr	r6, [pc, #116]	; (1208c <bt_init+0x5c4>)
   12018:	6883      	ldr	r3, [r0, #8]
   1201a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   1201e:	f8a6 30b9 	strh.w	r3, [r6, #185]	; 0xb9
	net_buf_unref(rsp);
   12022:	f00d faa7 	bl	1f574 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   12026:	f896 30b9 	ldrb.w	r3, [r6, #185]	; 0xb9
   1202a:	075b      	lsls	r3, r3, #29
   1202c:	f57f af2a 	bpl.w	11e84 <bt_init+0x3bc>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   12030:	1d3a      	adds	r2, r7, #4
   12032:	4621      	mov	r1, r4
   12034:	f64f 4003 	movw	r0, #64515	; 0xfc03
   12038:	f005 fff0 	bl	1801c <bt_hci_cmd_send_sync>
		if (err) {
   1203c:	b108      	cbz	r0, 12042 <bt_init+0x57a>
			BT_WARN("Failed to read supported vendor features");
   1203e:	4b14      	ldr	r3, [pc, #80]	; (12090 <bt_init+0x5c8>)
   12040:	e7e3      	b.n	1200a <bt_init+0x542>
		rp.feat = (void *)rsp->data;
   12042:	6878      	ldr	r0, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   12044:	6883      	ldr	r3, [r0, #8]
   12046:	785b      	ldrb	r3, [r3, #1]
   12048:	f886 30b8 	strb.w	r3, [r6, #184]	; 0xb8
		net_buf_unref(rsp);
   1204c:	f00d fa92 	bl	1f574 <net_buf_unref>
   12050:	e718      	b.n	11e84 <bt_init+0x3bc>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12052:	2108      	movs	r1, #8
   12054:	480f      	ldr	r0, [pc, #60]	; (12094 <bt_init+0x5cc>)
   12056:	f018 fb78 	bl	2a74a <atomic_or>
	bt_finalize_init();
   1205a:	f006 fd1b 	bl	18a94 <bt_finalize_init>
	return 0;
   1205e:	e5c7      	b.n	11bf0 <bt_init+0x128>
   12060:	0002ee74 	.word	0x0002ee74
   12064:	0003019e 	.word	0x0003019e
   12068:	000306fe 	.word	0x000306fe
   1206c:	01000004 	.word	0x01000004
   12070:	0002e5bc 	.word	0x0002e5bc
   12074:	0002ee34 	.word	0x0002ee34
   12078:	00030717 	.word	0x00030717
   1207c:	0002eeac 	.word	0x0002eeac
   12080:	0003072f 	.word	0x0003072f
   12084:	01000007 	.word	0x01000007
   12088:	0003075c 	.word	0x0003075c
   1208c:	20000350 	.word	0x20000350
   12090:	00030785 	.word	0x00030785
   12094:	2000041c 	.word	0x2000041c

00012098 <__ieee754_atan2>:
   12098:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1209c:	4692      	mov	sl, r2
   1209e:	4699      	mov	r9, r3
   120a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   120a4:	461f      	mov	r7, r3
   120a6:	f1ca 0300 	rsb	r3, sl, #0
   120aa:	f8df e184 	ldr.w	lr, [pc, #388]	; 12230 <__ieee754_atan2+0x198>
   120ae:	ea43 030a 	orr.w	r3, r3, sl
   120b2:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
   120b6:	4573      	cmp	r3, lr
   120b8:	4604      	mov	r4, r0
   120ba:	460d      	mov	r5, r1
   120bc:	d808      	bhi.n	120d0 <__ieee754_atan2+0x38>
   120be:	4246      	negs	r6, r0
   120c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   120c4:	4306      	orrs	r6, r0
   120c6:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
   120ca:	4576      	cmp	r6, lr
   120cc:	468c      	mov	ip, r1
   120ce:	d908      	bls.n	120e2 <__ieee754_atan2+0x4a>
   120d0:	4652      	mov	r2, sl
   120d2:	464b      	mov	r3, r9
   120d4:	4620      	mov	r0, r4
   120d6:	4629      	mov	r1, r5
   120d8:	f7ee f868 	bl	1ac <__adddf3>
   120dc:	4604      	mov	r4, r0
   120de:	460d      	mov	r5, r1
   120e0:	e019      	b.n	12116 <__ieee754_atan2+0x7e>
   120e2:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
   120e6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   120ea:	ea56 060a 	orrs.w	r6, r6, sl
   120ee:	d103      	bne.n	120f8 <__ieee754_atan2+0x60>
   120f0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120f4:	f000 b8a4 	b.w	12240 <atan>
   120f8:	17be      	asrs	r6, r7, #30
   120fa:	f006 0602 	and.w	r6, r6, #2
   120fe:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
   12102:	ea53 0100 	orrs.w	r1, r3, r0
   12106:	d10a      	bne.n	1211e <__ieee754_atan2+0x86>
   12108:	2e02      	cmp	r6, #2
   1210a:	d067      	beq.n	121dc <__ieee754_atan2+0x144>
   1210c:	2e03      	cmp	r6, #3
   1210e:	d102      	bne.n	12116 <__ieee754_atan2+0x7e>
   12110:	a53b      	add	r5, pc, #236	; (adr r5, 12200 <__ieee754_atan2+0x168>)
   12112:	e9d5 4500 	ldrd	r4, r5, [r5]
   12116:	4620      	mov	r0, r4
   12118:	4629      	mov	r1, r5
   1211a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1211e:	ea52 010a 	orrs.w	r1, r2, sl
   12122:	d106      	bne.n	12132 <__ieee754_atan2+0x9a>
   12124:	f1bc 0f00 	cmp.w	ip, #0
   12128:	da63      	bge.n	121f2 <__ieee754_atan2+0x15a>
   1212a:	a537      	add	r5, pc, #220	; (adr r5, 12208 <__ieee754_atan2+0x170>)
   1212c:	e9d5 4500 	ldrd	r4, r5, [r5]
   12130:	e7f1      	b.n	12116 <__ieee754_atan2+0x7e>
   12132:	4572      	cmp	r2, lr
   12134:	d10f      	bne.n	12156 <__ieee754_atan2+0xbe>
   12136:	4293      	cmp	r3, r2
   12138:	f106 36ff 	add.w	r6, r6, #4294967295
   1213c:	d107      	bne.n	1214e <__ieee754_atan2+0xb6>
   1213e:	2e02      	cmp	r6, #2
   12140:	d850      	bhi.n	121e4 <__ieee754_atan2+0x14c>
   12142:	4b3c      	ldr	r3, [pc, #240]	; (12234 <__ieee754_atan2+0x19c>)
   12144:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   12148:	e9d6 4500 	ldrd	r4, r5, [r6]
   1214c:	e7e3      	b.n	12116 <__ieee754_atan2+0x7e>
   1214e:	2e02      	cmp	r6, #2
   12150:	d84c      	bhi.n	121ec <__ieee754_atan2+0x154>
   12152:	4b39      	ldr	r3, [pc, #228]	; (12238 <__ieee754_atan2+0x1a0>)
   12154:	e7f6      	b.n	12144 <__ieee754_atan2+0xac>
   12156:	4573      	cmp	r3, lr
   12158:	d0e4      	beq.n	12124 <__ieee754_atan2+0x8c>
   1215a:	1a9b      	subs	r3, r3, r2
   1215c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
   12160:	ea4f 5223 	mov.w	r2, r3, asr #20
   12164:	da20      	bge.n	121a8 <__ieee754_atan2+0x110>
   12166:	2f00      	cmp	r7, #0
   12168:	da01      	bge.n	1216e <__ieee754_atan2+0xd6>
   1216a:	323c      	adds	r2, #60	; 0x3c
   1216c:	db20      	blt.n	121b0 <__ieee754_atan2+0x118>
   1216e:	4652      	mov	r2, sl
   12170:	464b      	mov	r3, r9
   12172:	4620      	mov	r0, r4
   12174:	4629      	mov	r1, r5
   12176:	f7ee faf9 	bl	76c <__aeabi_ddiv>
   1217a:	f01b fe18 	bl	2ddae <fabs>
   1217e:	f000 f85f 	bl	12240 <atan>
   12182:	4604      	mov	r4, r0
   12184:	460d      	mov	r5, r1
   12186:	2e01      	cmp	r6, #1
   12188:	d015      	beq.n	121b6 <__ieee754_atan2+0x11e>
   1218a:	2e02      	cmp	r6, #2
   1218c:	d017      	beq.n	121be <__ieee754_atan2+0x126>
   1218e:	2e00      	cmp	r6, #0
   12190:	d0c1      	beq.n	12116 <__ieee754_atan2+0x7e>
   12192:	a31f      	add	r3, pc, #124	; (adr r3, 12210 <__ieee754_atan2+0x178>)
   12194:	e9d3 2300 	ldrd	r2, r3, [r3]
   12198:	4620      	mov	r0, r4
   1219a:	4629      	mov	r1, r5
   1219c:	f7ee f804 	bl	1a8 <__aeabi_dsub>
   121a0:	a31d      	add	r3, pc, #116	; (adr r3, 12218 <__ieee754_atan2+0x180>)
   121a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   121a6:	e016      	b.n	121d6 <__ieee754_atan2+0x13e>
   121a8:	a51d      	add	r5, pc, #116	; (adr r5, 12220 <__ieee754_atan2+0x188>)
   121aa:	e9d5 4500 	ldrd	r4, r5, [r5]
   121ae:	e7ea      	b.n	12186 <__ieee754_atan2+0xee>
   121b0:	2400      	movs	r4, #0
   121b2:	2500      	movs	r5, #0
   121b4:	e7e7      	b.n	12186 <__ieee754_atan2+0xee>
   121b6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   121ba:	461d      	mov	r5, r3
   121bc:	e7ab      	b.n	12116 <__ieee754_atan2+0x7e>
   121be:	a314      	add	r3, pc, #80	; (adr r3, 12210 <__ieee754_atan2+0x178>)
   121c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   121c4:	4620      	mov	r0, r4
   121c6:	4629      	mov	r1, r5
   121c8:	f7ed ffee 	bl	1a8 <__aeabi_dsub>
   121cc:	4602      	mov	r2, r0
   121ce:	460b      	mov	r3, r1
   121d0:	a111      	add	r1, pc, #68	; (adr r1, 12218 <__ieee754_atan2+0x180>)
   121d2:	e9d1 0100 	ldrd	r0, r1, [r1]
   121d6:	f7ed ffe7 	bl	1a8 <__aeabi_dsub>
   121da:	e77f      	b.n	120dc <__ieee754_atan2+0x44>
   121dc:	a50e      	add	r5, pc, #56	; (adr r5, 12218 <__ieee754_atan2+0x180>)
   121de:	e9d5 4500 	ldrd	r4, r5, [r5]
   121e2:	e798      	b.n	12116 <__ieee754_atan2+0x7e>
   121e4:	a510      	add	r5, pc, #64	; (adr r5, 12228 <__ieee754_atan2+0x190>)
   121e6:	e9d5 4500 	ldrd	r4, r5, [r5]
   121ea:	e794      	b.n	12116 <__ieee754_atan2+0x7e>
   121ec:	2400      	movs	r4, #0
   121ee:	2500      	movs	r5, #0
   121f0:	e791      	b.n	12116 <__ieee754_atan2+0x7e>
   121f2:	a50b      	add	r5, pc, #44	; (adr r5, 12220 <__ieee754_atan2+0x188>)
   121f4:	e9d5 4500 	ldrd	r4, r5, [r5]
   121f8:	e78d      	b.n	12116 <__ieee754_atan2+0x7e>
   121fa:	bf00      	nop
   121fc:	f3af 8000 	nop.w
   12200:	54442d18 	.word	0x54442d18
   12204:	c00921fb 	.word	0xc00921fb
   12208:	54442d18 	.word	0x54442d18
   1220c:	bff921fb 	.word	0xbff921fb
   12210:	33145c07 	.word	0x33145c07
   12214:	3ca1a626 	.word	0x3ca1a626
   12218:	54442d18 	.word	0x54442d18
   1221c:	400921fb 	.word	0x400921fb
   12220:	54442d18 	.word	0x54442d18
   12224:	3ff921fb 	.word	0x3ff921fb
   12228:	54442d18 	.word	0x54442d18
   1222c:	3fe921fb 	.word	0x3fe921fb
   12230:	7ff00000 	.word	0x7ff00000
   12234:	0002ea18 	.word	0x0002ea18
   12238:	0002ea30 	.word	0x0002ea30
   1223c:	00000000 	.word	0x00000000

00012240 <atan>:
   12240:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12244:	4bb6      	ldr	r3, [pc, #728]	; (12520 <atan+0x2e0>)
   12246:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   1224a:	429e      	cmp	r6, r3
   1224c:	4604      	mov	r4, r0
   1224e:	460d      	mov	r5, r1
   12250:	468b      	mov	fp, r1
   12252:	dd17      	ble.n	12284 <atan+0x44>
   12254:	4bb3      	ldr	r3, [pc, #716]	; (12524 <atan+0x2e4>)
   12256:	429e      	cmp	r6, r3
   12258:	dc01      	bgt.n	1225e <atan+0x1e>
   1225a:	d109      	bne.n	12270 <atan+0x30>
   1225c:	b140      	cbz	r0, 12270 <atan+0x30>
   1225e:	4622      	mov	r2, r4
   12260:	462b      	mov	r3, r5
   12262:	4620      	mov	r0, r4
   12264:	4629      	mov	r1, r5
   12266:	f7ed ffa1 	bl	1ac <__adddf3>
   1226a:	4604      	mov	r4, r0
   1226c:	460d      	mov	r5, r1
   1226e:	e005      	b.n	1227c <atan+0x3c>
   12270:	f1bb 0f00 	cmp.w	fp, #0
   12274:	4cac      	ldr	r4, [pc, #688]	; (12528 <atan+0x2e8>)
   12276:	f300 8121 	bgt.w	124bc <atan+0x27c>
   1227a:	4dac      	ldr	r5, [pc, #688]	; (1252c <atan+0x2ec>)
   1227c:	4620      	mov	r0, r4
   1227e:	4629      	mov	r1, r5
   12280:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12284:	4baa      	ldr	r3, [pc, #680]	; (12530 <atan+0x2f0>)
   12286:	429e      	cmp	r6, r3
   12288:	dc11      	bgt.n	122ae <atan+0x6e>
   1228a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   1228e:	429e      	cmp	r6, r3
   12290:	dc0a      	bgt.n	122a8 <atan+0x68>
   12292:	a38b      	add	r3, pc, #556	; (adr r3, 124c0 <atan+0x280>)
   12294:	e9d3 2300 	ldrd	r2, r3, [r3]
   12298:	f7ed ff88 	bl	1ac <__adddf3>
   1229c:	4ba5      	ldr	r3, [pc, #660]	; (12534 <atan+0x2f4>)
   1229e:	2200      	movs	r2, #0
   122a0:	f7ee fbca 	bl	a38 <__aeabi_dcmpgt>
   122a4:	2800      	cmp	r0, #0
   122a6:	d1e9      	bne.n	1227c <atan+0x3c>
   122a8:	f04f 3aff 	mov.w	sl, #4294967295
   122ac:	e027      	b.n	122fe <atan+0xbe>
   122ae:	f01b fd7e 	bl	2ddae <fabs>
   122b2:	4ba1      	ldr	r3, [pc, #644]	; (12538 <atan+0x2f8>)
   122b4:	429e      	cmp	r6, r3
   122b6:	4604      	mov	r4, r0
   122b8:	460d      	mov	r5, r1
   122ba:	f300 80b8 	bgt.w	1242e <atan+0x1ee>
   122be:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   122c2:	429e      	cmp	r6, r3
   122c4:	f300 809c 	bgt.w	12400 <atan+0x1c0>
   122c8:	4602      	mov	r2, r0
   122ca:	460b      	mov	r3, r1
   122cc:	f7ed ff6e 	bl	1ac <__adddf3>
   122d0:	4b98      	ldr	r3, [pc, #608]	; (12534 <atan+0x2f4>)
   122d2:	2200      	movs	r2, #0
   122d4:	f7ed ff68 	bl	1a8 <__aeabi_dsub>
   122d8:	2200      	movs	r2, #0
   122da:	4606      	mov	r6, r0
   122dc:	460f      	mov	r7, r1
   122de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   122e2:	4620      	mov	r0, r4
   122e4:	4629      	mov	r1, r5
   122e6:	f7ed ff61 	bl	1ac <__adddf3>
   122ea:	4602      	mov	r2, r0
   122ec:	460b      	mov	r3, r1
   122ee:	4630      	mov	r0, r6
   122f0:	4639      	mov	r1, r7
   122f2:	f7ee fa3b 	bl	76c <__aeabi_ddiv>
   122f6:	f04f 0a00 	mov.w	sl, #0
   122fa:	4604      	mov	r4, r0
   122fc:	460d      	mov	r5, r1
   122fe:	4622      	mov	r2, r4
   12300:	462b      	mov	r3, r5
   12302:	4620      	mov	r0, r4
   12304:	4629      	mov	r1, r5
   12306:	f7ee f907 	bl	518 <__aeabi_dmul>
   1230a:	4602      	mov	r2, r0
   1230c:	460b      	mov	r3, r1
   1230e:	4680      	mov	r8, r0
   12310:	4689      	mov	r9, r1
   12312:	f7ee f901 	bl	518 <__aeabi_dmul>
   12316:	a36c      	add	r3, pc, #432	; (adr r3, 124c8 <atan+0x288>)
   12318:	e9d3 2300 	ldrd	r2, r3, [r3]
   1231c:	4606      	mov	r6, r0
   1231e:	460f      	mov	r7, r1
   12320:	f7ee f8fa 	bl	518 <__aeabi_dmul>
   12324:	a36a      	add	r3, pc, #424	; (adr r3, 124d0 <atan+0x290>)
   12326:	e9d3 2300 	ldrd	r2, r3, [r3]
   1232a:	f7ed ff3f 	bl	1ac <__adddf3>
   1232e:	4632      	mov	r2, r6
   12330:	463b      	mov	r3, r7
   12332:	f7ee f8f1 	bl	518 <__aeabi_dmul>
   12336:	a368      	add	r3, pc, #416	; (adr r3, 124d8 <atan+0x298>)
   12338:	e9d3 2300 	ldrd	r2, r3, [r3]
   1233c:	f7ed ff36 	bl	1ac <__adddf3>
   12340:	4632      	mov	r2, r6
   12342:	463b      	mov	r3, r7
   12344:	f7ee f8e8 	bl	518 <__aeabi_dmul>
   12348:	a365      	add	r3, pc, #404	; (adr r3, 124e0 <atan+0x2a0>)
   1234a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1234e:	f7ed ff2d 	bl	1ac <__adddf3>
   12352:	4632      	mov	r2, r6
   12354:	463b      	mov	r3, r7
   12356:	f7ee f8df 	bl	518 <__aeabi_dmul>
   1235a:	a363      	add	r3, pc, #396	; (adr r3, 124e8 <atan+0x2a8>)
   1235c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12360:	f7ed ff24 	bl	1ac <__adddf3>
   12364:	4632      	mov	r2, r6
   12366:	463b      	mov	r3, r7
   12368:	f7ee f8d6 	bl	518 <__aeabi_dmul>
   1236c:	a360      	add	r3, pc, #384	; (adr r3, 124f0 <atan+0x2b0>)
   1236e:	e9d3 2300 	ldrd	r2, r3, [r3]
   12372:	f7ed ff1b 	bl	1ac <__adddf3>
   12376:	4642      	mov	r2, r8
   12378:	464b      	mov	r3, r9
   1237a:	f7ee f8cd 	bl	518 <__aeabi_dmul>
   1237e:	a35e      	add	r3, pc, #376	; (adr r3, 124f8 <atan+0x2b8>)
   12380:	e9d3 2300 	ldrd	r2, r3, [r3]
   12384:	4680      	mov	r8, r0
   12386:	4689      	mov	r9, r1
   12388:	4630      	mov	r0, r6
   1238a:	4639      	mov	r1, r7
   1238c:	f7ee f8c4 	bl	518 <__aeabi_dmul>
   12390:	a35b      	add	r3, pc, #364	; (adr r3, 12500 <atan+0x2c0>)
   12392:	e9d3 2300 	ldrd	r2, r3, [r3]
   12396:	f7ed ff07 	bl	1a8 <__aeabi_dsub>
   1239a:	4632      	mov	r2, r6
   1239c:	463b      	mov	r3, r7
   1239e:	f7ee f8bb 	bl	518 <__aeabi_dmul>
   123a2:	a359      	add	r3, pc, #356	; (adr r3, 12508 <atan+0x2c8>)
   123a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   123a8:	f7ed fefe 	bl	1a8 <__aeabi_dsub>
   123ac:	4632      	mov	r2, r6
   123ae:	463b      	mov	r3, r7
   123b0:	f7ee f8b2 	bl	518 <__aeabi_dmul>
   123b4:	a356      	add	r3, pc, #344	; (adr r3, 12510 <atan+0x2d0>)
   123b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   123ba:	f7ed fef5 	bl	1a8 <__aeabi_dsub>
   123be:	4632      	mov	r2, r6
   123c0:	463b      	mov	r3, r7
   123c2:	f7ee f8a9 	bl	518 <__aeabi_dmul>
   123c6:	a354      	add	r3, pc, #336	; (adr r3, 12518 <atan+0x2d8>)
   123c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   123cc:	f7ed feec 	bl	1a8 <__aeabi_dsub>
   123d0:	4632      	mov	r2, r6
   123d2:	463b      	mov	r3, r7
   123d4:	f7ee f8a0 	bl	518 <__aeabi_dmul>
   123d8:	4602      	mov	r2, r0
   123da:	460b      	mov	r3, r1
   123dc:	4640      	mov	r0, r8
   123de:	4649      	mov	r1, r9
   123e0:	f7ed fee4 	bl	1ac <__adddf3>
   123e4:	4622      	mov	r2, r4
   123e6:	462b      	mov	r3, r5
   123e8:	f7ee f896 	bl	518 <__aeabi_dmul>
   123ec:	f1ba 3fff 	cmp.w	sl, #4294967295
   123f0:	4602      	mov	r2, r0
   123f2:	460b      	mov	r3, r1
   123f4:	d144      	bne.n	12480 <atan+0x240>
   123f6:	4620      	mov	r0, r4
   123f8:	4629      	mov	r1, r5
   123fa:	f7ed fed5 	bl	1a8 <__aeabi_dsub>
   123fe:	e734      	b.n	1226a <atan+0x2a>
   12400:	4b4c      	ldr	r3, [pc, #304]	; (12534 <atan+0x2f4>)
   12402:	2200      	movs	r2, #0
   12404:	f7ed fed0 	bl	1a8 <__aeabi_dsub>
   12408:	4b4a      	ldr	r3, [pc, #296]	; (12534 <atan+0x2f4>)
   1240a:	4606      	mov	r6, r0
   1240c:	460f      	mov	r7, r1
   1240e:	2200      	movs	r2, #0
   12410:	4620      	mov	r0, r4
   12412:	4629      	mov	r1, r5
   12414:	f7ed feca 	bl	1ac <__adddf3>
   12418:	4602      	mov	r2, r0
   1241a:	460b      	mov	r3, r1
   1241c:	4630      	mov	r0, r6
   1241e:	4639      	mov	r1, r7
   12420:	f7ee f9a4 	bl	76c <__aeabi_ddiv>
   12424:	f04f 0a01 	mov.w	sl, #1
   12428:	4604      	mov	r4, r0
   1242a:	460d      	mov	r5, r1
   1242c:	e767      	b.n	122fe <atan+0xbe>
   1242e:	4b43      	ldr	r3, [pc, #268]	; (1253c <atan+0x2fc>)
   12430:	429e      	cmp	r6, r3
   12432:	da1a      	bge.n	1246a <atan+0x22a>
   12434:	4b42      	ldr	r3, [pc, #264]	; (12540 <atan+0x300>)
   12436:	2200      	movs	r2, #0
   12438:	f7ed feb6 	bl	1a8 <__aeabi_dsub>
   1243c:	4b40      	ldr	r3, [pc, #256]	; (12540 <atan+0x300>)
   1243e:	4606      	mov	r6, r0
   12440:	460f      	mov	r7, r1
   12442:	2200      	movs	r2, #0
   12444:	4620      	mov	r0, r4
   12446:	4629      	mov	r1, r5
   12448:	f7ee f866 	bl	518 <__aeabi_dmul>
   1244c:	4b39      	ldr	r3, [pc, #228]	; (12534 <atan+0x2f4>)
   1244e:	2200      	movs	r2, #0
   12450:	f7ed feac 	bl	1ac <__adddf3>
   12454:	4602      	mov	r2, r0
   12456:	460b      	mov	r3, r1
   12458:	4630      	mov	r0, r6
   1245a:	4639      	mov	r1, r7
   1245c:	f7ee f986 	bl	76c <__aeabi_ddiv>
   12460:	f04f 0a02 	mov.w	sl, #2
   12464:	4604      	mov	r4, r0
   12466:	460d      	mov	r5, r1
   12468:	e749      	b.n	122fe <atan+0xbe>
   1246a:	4602      	mov	r2, r0
   1246c:	460b      	mov	r3, r1
   1246e:	2000      	movs	r0, #0
   12470:	4934      	ldr	r1, [pc, #208]	; (12544 <atan+0x304>)
   12472:	f7ee f97b 	bl	76c <__aeabi_ddiv>
   12476:	f04f 0a03 	mov.w	sl, #3
   1247a:	4604      	mov	r4, r0
   1247c:	460d      	mov	r5, r1
   1247e:	e73e      	b.n	122fe <atan+0xbe>
   12480:	4b31      	ldr	r3, [pc, #196]	; (12548 <atan+0x308>)
   12482:	4e32      	ldr	r6, [pc, #200]	; (1254c <atan+0x30c>)
   12484:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
   12488:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
   1248c:	e9da 2300 	ldrd	r2, r3, [sl]
   12490:	f7ed fe8a 	bl	1a8 <__aeabi_dsub>
   12494:	4622      	mov	r2, r4
   12496:	462b      	mov	r3, r5
   12498:	f7ed fe86 	bl	1a8 <__aeabi_dsub>
   1249c:	4602      	mov	r2, r0
   1249e:	460b      	mov	r3, r1
   124a0:	e9d6 0100 	ldrd	r0, r1, [r6]
   124a4:	f7ed fe80 	bl	1a8 <__aeabi_dsub>
   124a8:	f1bb 0f00 	cmp.w	fp, #0
   124ac:	4604      	mov	r4, r0
   124ae:	460d      	mov	r5, r1
   124b0:	f6bf aee4 	bge.w	1227c <atan+0x3c>
   124b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   124b8:	461d      	mov	r5, r3
   124ba:	e6df      	b.n	1227c <atan+0x3c>
   124bc:	4d24      	ldr	r5, [pc, #144]	; (12550 <atan+0x310>)
   124be:	e6dd      	b.n	1227c <atan+0x3c>
   124c0:	8800759c 	.word	0x8800759c
   124c4:	7e37e43c 	.word	0x7e37e43c
   124c8:	e322da11 	.word	0xe322da11
   124cc:	3f90ad3a 	.word	0x3f90ad3a
   124d0:	24760deb 	.word	0x24760deb
   124d4:	3fa97b4b 	.word	0x3fa97b4b
   124d8:	a0d03d51 	.word	0xa0d03d51
   124dc:	3fb10d66 	.word	0x3fb10d66
   124e0:	c54c206e 	.word	0xc54c206e
   124e4:	3fb745cd 	.word	0x3fb745cd
   124e8:	920083ff 	.word	0x920083ff
   124ec:	3fc24924 	.word	0x3fc24924
   124f0:	5555550d 	.word	0x5555550d
   124f4:	3fd55555 	.word	0x3fd55555
   124f8:	2c6a6c2f 	.word	0x2c6a6c2f
   124fc:	bfa2b444 	.word	0xbfa2b444
   12500:	52defd9a 	.word	0x52defd9a
   12504:	3fadde2d 	.word	0x3fadde2d
   12508:	af749a6d 	.word	0xaf749a6d
   1250c:	3fb3b0f2 	.word	0x3fb3b0f2
   12510:	fe231671 	.word	0xfe231671
   12514:	3fbc71c6 	.word	0x3fbc71c6
   12518:	9998ebc4 	.word	0x9998ebc4
   1251c:	3fc99999 	.word	0x3fc99999
   12520:	440fffff 	.word	0x440fffff
   12524:	7ff00000 	.word	0x7ff00000
   12528:	54442d18 	.word	0x54442d18
   1252c:	bff921fb 	.word	0xbff921fb
   12530:	3fdbffff 	.word	0x3fdbffff
   12534:	3ff00000 	.word	0x3ff00000
   12538:	3ff2ffff 	.word	0x3ff2ffff
   1253c:	40038000 	.word	0x40038000
   12540:	3ff80000 	.word	0x3ff80000
   12544:	bff00000 	.word	0xbff00000
   12548:	0002ea68 	.word	0x0002ea68
   1254c:	0002ea48 	.word	0x0002ea48
   12550:	3ff921fb 	.word	0x3ff921fb

00012554 <AD5940AMPStructInit>:
{
   12554:	b507      	push	{r0, r1, r2, lr}
  AppCHRONOAMPGetCfg(&pAMPCfg);
   12556:	a801      	add	r0, sp, #4
   12558:	f001 f976 	bl	13848 <AppCHRONOAMPGetCfg>
	pAMPCfg->WuptClkFreq = LFOSCFreq;					/* Use measured 32kHz clock freq for accurate wake up timer */
   1255c:	4a13      	ldr	r2, [pc, #76]	; (125ac <AD5940AMPStructInit+0x58>)
   1255e:	9b01      	ldr	r3, [sp, #4]
   12560:	6812      	ldr	r2, [r2, #0]
   12562:	61da      	str	r2, [r3, #28]
  pAMPCfg->MaxSeqLen = 512; 								/* @todo add checker in function */
   12564:	f44f 7100 	mov.w	r1, #512	; 0x200
   12568:	2200      	movs	r2, #0
   1256a:	e9c3 2101 	strd	r2, r1, [r3, #4]
	pAMPCfg->ExtRtia = bFALSE;			/* Set to true if using external Rtia */
   1256e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  pAMPCfg->RcalVal = 10000.0;
   12572:	490f      	ldr	r1, [pc, #60]	; (125b0 <AD5940AMPStructInit+0x5c>)
	pAMPCfg->ExtRtiaVal = 10000000; /* Enter external Rtia value here is using one */
   12574:	4a0f      	ldr	r2, [pc, #60]	; (125b4 <AD5940AMPStructInit+0x60>)
  pAMPCfg->RcalVal = 10000.0;
   12576:	6319      	str	r1, [r3, #48]	; 0x30
	pAMPCfg->ExtRtiaVal = 10000000; /* Enter external Rtia value here is using one */
   12578:	67da      	str	r2, [r3, #124]	; 0x7c
  pAMPCfg->NumOfData = -1;      						/* Never stop until you stop it manually by AppAMPCtrl() function */
   1257a:	f04f 31ff 	mov.w	r1, #4294967295
	pAMPCfg->LptiaRtiaSel = LPTIARTIA_1K;		/* Select TIA gain resistor. */
   1257e:	2202      	movs	r2, #2
  pAMPCfg->NumOfData = -1;      						/* Never stop until you stop it manually by AppAMPCtrl() function */
   12580:	62d9      	str	r1, [r3, #44]	; 0x2c
	pAMPCfg->LptiaRtiaSel = LPTIARTIA_1K;		/* Select TIA gain resistor. */
   12582:	645a      	str	r2, [r3, #68]	; 0x44
	pAMPCfg->AmpODR = 1;
   12584:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	pAMPCfg->SensorBias = 0;   /* Sensor bias voltage between reference and sense electrodes*/
   12588:	2200      	movs	r2, #0
	pAMPCfg->AmpODR = 1;
   1258a:	6299      	str	r1, [r3, #40]	; 0x28
	pAMPCfg->SensorBias = 0;   /* Sensor bias voltage between reference and sense electrodes*/
   1258c:	66da      	str	r2, [r3, #108]	; 0x6c
	pAMPCfg->FifoThresh = 5;
   1258e:	2105      	movs	r1, #5
	pAMPCfg->Vzero = 1100;
   12590:	4a09      	ldr	r2, [pc, #36]	; (125b8 <AD5940AMPStructInit+0x64>)
	pAMPCfg->FifoThresh = 5;
   12592:	6259      	str	r1, [r3, #36]	; 0x24
	pAMPCfg->Vzero = 1100;
   12594:	665a      	str	r2, [r3, #100]	; 0x64
	pAMPCfg->ADCRefVolt = 1.82;							/* Measure voltage on VREF_1V8 pin and add here */
   12596:	4909      	ldr	r1, [pc, #36]	; (125bc <AD5940AMPStructInit+0x68>)
	pAMPCfg->pulseAmplitude = 500;						/* Pulse amplitude on counter electrode (mV) */
   12598:	4a09      	ldr	r2, [pc, #36]	; (125c0 <AD5940AMPStructInit+0x6c>)
   1259a:	671a      	str	r2, [r3, #112]	; 0x70
	pAMPCfg->pulseLength = 500;								/* Length of voltage pulse in ms */		
   1259c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
	pAMPCfg->ADCRefVolt = 1.82;							/* Measure voltage on VREF_1V8 pin and add here */
   125a0:	6799      	str	r1, [r3, #120]	; 0x78
	pAMPCfg->pulseLength = 500;								/* Length of voltage pulse in ms */		
   125a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
   125a6:	b003      	add	sp, #12
   125a8:	f85d fb04 	ldr.w	pc, [sp], #4
   125ac:	20005534 	.word	0x20005534
   125b0:	461c4000 	.word	0x461c4000
   125b4:	4b189680 	.word	0x4b189680
   125b8:	44898000 	.word	0x44898000
   125bc:	3fe8f5c3 	.word	0x3fe8f5c3
   125c0:	43fa0000 	.word	0x43fa0000

000125c4 <main>:

////////////////////////////////////////////////// MAIN //////////////////////////////////////
void main(void)
{
   125c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   125c8:	b094      	sub	sp, #80	; 0x50
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   125ca:	4d77      	ldr	r5, [pc, #476]	; (127a8 <main+0x1e4>)
   125cc:	4628      	mov	r0, r5
   125ce:	f01a fe38 	bl	2d242 <z_device_is_ready>
    // define return variable
	int ret;

    // check if led device is ready
	if (!device_is_ready(led.port)) { return; }
   125d2:	2800      	cmp	r0, #0
   125d4:	f000 80e4 	beq.w	127a0 <main+0x1dc>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   125d8:	692a      	ldr	r2, [r5, #16]
	const struct gpio_driver_api *api =
   125da:	68ae      	ldr	r6, [r5, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   125dc:	6813      	ldr	r3, [r2, #0]
   125de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   125e2:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
   125e4:	210d      	movs	r1, #13
   125e6:	6833      	ldr	r3, [r6, #0]
   125e8:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   125ec:	4628      	mov	r0, r5
   125ee:	4798      	blx	r3

    // set the led to active-high output
	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
	if (ret < 0) { return; }
   125f0:	2800      	cmp	r0, #0
   125f2:	f2c0 80d5 	blt.w	127a0 <main+0x1dc>
   125f6:	2405      	movs	r4, #5
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
   125f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   125fc:	6973      	ldr	r3, [r6, #20]
   125fe:	4628      	mov	r0, r5
   12600:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
   12602:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   12606:	2100      	movs	r1, #0
   12608:	f011 fc7c 	bl	23f04 <z_impl_k_sleep>

    // toggle the led 5 times before starting the program
	int led_counter = 0;
    while (led_counter < 5)
   1260c:	3c01      	subs	r4, #1
   1260e:	d1f3      	bne.n	125f8 <main+0x34>
		k_msleep(SLEEP_TIME_MS);
		led_counter = led_counter + 1;
	}//end while

      // setup the MCU resources for connecting with AD5940
    AD5940_MCUResourceInit(0);
   12610:	4620      	mov	r0, r4
   12612:	f001 f83d 	bl	13690 <AD5940_MCUResourceInit>
    AD5940_Delay10us(50000);        // delay 500 m
   12616:	f24c 3050 	movw	r0, #50000	; 0xc350
   1261a:	f016 fe58 	bl	292ce <AD5940_Delay10us>

    printf("MCU initialized \n\r");
   1261e:	4863      	ldr	r0, [pc, #396]	; (127ac <main+0x1e8>)
        {
            // printf("Interrupt detected  \n\r");

            AD5940_ClrMCUIntFlag(); /* Clear this flag */
            temp[IntCount] = APPBUFF_SIZE;
            AppCHRONOAMPISR(AppBuff[IntCount], &temp[IntCount]); /* Deal with it and provide a buffer to store data we got */
   12620:	4f63      	ldr	r7, [pc, #396]	; (127b0 <main+0x1ec>)
    printf("MCU initialized \n\r");
   12622:	f012 ff1d 	bl	25460 <iprintf>
    AppCHRONOAMPGetCfg(&pAMPCfg);
   12626:	a801      	add	r0, sp, #4
   12628:	f001 f90e 	bl	13848 <AppCHRONOAMPGetCfg>
  clk_cfg.SysClkDiv = SYSCLKDIV_1;
   1262c:	2501      	movs	r5, #1
  AD5940_HWReset();
   1262e:	f016 fe26 	bl	2927e <AD5940_HWReset>
  AD5940_Initialize();
   12632:	f000 fb25 	bl	12c80 <AD5940_Initialize>
  clk_cfg.HFOSCEn = bTRUE;
   12636:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  AD5940_CLKCfg(&clk_cfg);
   1263a:	a805      	add	r0, sp, #20
  fifo_cfg.FIFOThresh = 4;//AppAMPCfg.FifoThresh;        /* DFT result. One pair for RCAL, another for Rz. One DFT result have real part and imaginary part */
   1263c:	2604      	movs	r6, #4
  clk_cfg.ADCCLkSrc = ADCCLKSRC_HFOSC;
   1263e:	e9cd 4405 	strd	r4, r4, [sp, #20]
  clk_cfg.ADCClkDiv = ADCCLKDIV_1;
   12642:	e9cd 5507 	strd	r5, r5, [sp, #28]
  clk_cfg.HFOSCEn = bTRUE;
   12646:	9309      	str	r3, [sp, #36]	; 0x24
  AD5940_CLKCfg(&clk_cfg);
   12648:	f016 fd36 	bl	290b8 <AD5940_CLKCfg>
  fifo_cfg.FIFOMode = FIFOMODE_FIFO;
   1264c:	2302      	movs	r3, #2
  AD5940_FIFOCfg(&fifo_cfg);                             /* Disable to reset FIFO. */
   1264e:	a80a      	add	r0, sp, #40	; 0x28
  fifo_cfg.FIFOSize = FIFOSIZE_4KB;                       /* 4kB for FIFO, The reset 2kB for sequencer */
   12650:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  fifo_cfg.FIFOSrc = FIFOSRC_DFT;
   12654:	930d      	str	r3, [sp, #52]	; 0x34
  fifo_cfg.FIFOEn = bFALSE;
   12656:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
  fifo_cfg.FIFOThresh = 4;//AppAMPCfg.FifoThresh;        /* DFT result. One pair for RCAL, another for Rz. One DFT result have real part and imaginary part */
   1265a:	960e      	str	r6, [sp, #56]	; 0x38
  AD5940_FIFOCfg(&fifo_cfg);                             /* Disable to reset FIFO. */
   1265c:	f016 fadb 	bl	28c16 <AD5940_FIFOCfg>
  AD5940_FIFOCfg(&fifo_cfg);                             /* Enable FIFO here */
   12660:	a80a      	add	r0, sp, #40	; 0x28
	fifo_cfg.FIFOEn = bTRUE;  
   12662:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
  AD5940_FIFOCfg(&fifo_cfg);                             /* Enable FIFO here */
   12666:	f016 fad6 	bl	28c16 <AD5940_FIFOCfg>
  AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_ALLINT, bTRUE);           /* Enable all interrupt in Interrupt Controller 1, so we can check INTC flags */
   1266a:	462a      	mov	r2, r5
   1266c:	f04f 31ff 	mov.w	r1, #4294967295
   12670:	4628      	mov	r0, r5
   12672:	f016 fda0 	bl	291b6 <AD5940_INTCCfg>
  AD5940_INTCClrFlag(AFEINTSRC_ALLINT);
   12676:	f04f 30ff 	mov.w	r0, #4294967295
   1267a:	f016 fdb4 	bl	291e6 <AD5940_INTCClrFlag>
  AD5940_INTCCfg(AFEINTC_0, AFEINTSRC_DATAFIFOTHRESH|AFEINTSRC_ENDSEQ, bTRUE);   /* Interrupt Controller 0 will control GP0 to generate interrupt to MCU */
   1267e:	462a      	mov	r2, r5
   12680:	494c      	ldr	r1, [pc, #304]	; (127b4 <main+0x1f0>)
  AD5940_LFOSCMeasure(&LfoscMeasure, &LFOSCFreq);
   12682:	4d4d      	ldr	r5, [pc, #308]	; (127b8 <main+0x1f4>)
  AD5940_INTCCfg(AFEINTC_0, AFEINTSRC_DATAFIFOTHRESH|AFEINTSRC_ENDSEQ, bTRUE);   /* Interrupt Controller 0 will control GP0 to generate interrupt to MCU */
   12684:	4620      	mov	r0, r4
   12686:	f016 fd96 	bl	291b6 <AD5940_INTCCfg>
  AD5940_INTCClrFlag(AFEINTSRC_ALLINT);
   1268a:	f04f 30ff 	mov.w	r0, #4294967295
   1268e:	f016 fdaa 	bl	291e6 <AD5940_INTCClrFlag>
  gpio_cfg.FuncSet = GP6_SYNC|GP5_SYNC|GP4_SYNC|GP2_TRIG|GP1_SYNC|GP0_INT;
   12692:	f642 2318 	movw	r3, #10776	; 0x2a18
   12696:	930f      	str	r3, [sp, #60]	; 0x3c
  AD5940_AGPIOCfg(&gpio_cfg);
   12698:	a80f      	add	r0, sp, #60	; 0x3c
  gpio_cfg.OutputEnSet = AGPIO_Pin0|AGPIO_Pin1|AGPIO_Pin4|AGPIO_Pin5|AGPIO_Pin6;
   1269a:	2373      	movs	r3, #115	; 0x73
   1269c:	9310      	str	r3, [sp, #64]	; 0x40
  gpio_cfg.PullEnSet = 0;
   1269e:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  gpio_cfg.InputEnSet = AGPIO_Pin2;
   126a2:	9611      	str	r6, [sp, #68]	; 0x44
  AD5940_AGPIOCfg(&gpio_cfg);
   126a4:	f016 fdc5 	bl	29232 <AD5940_AGPIOCfg>
	AD5940_SleepKeyCtrlS(SLPKEY_UNLOCK);  /* Enable AFE to enter sleep mode. */
   126a8:	4844      	ldr	r0, [pc, #272]	; (127bc <main+0x1f8>)
   126aa:	f016 fdd6 	bl	2925a <AD5940_SleepKeyCtrlS>
  LfoscMeasure.CalDuration = 1000.0;  /* 1000ms used for calibration. */
   126ae:	4b44      	ldr	r3, [pc, #272]	; (127c0 <main+0x1fc>)
   126b0:	9303      	str	r3, [sp, #12]
  AD5940_LFOSCMeasure(&LfoscMeasure, &LFOSCFreq);
   126b2:	4629      	mov	r1, r5
  LfoscMeasure.SystemClkFreq = 16000000.0f; /* 16MHz in this firmware. */
   126b4:	4b43      	ldr	r3, [pc, #268]	; (127c4 <main+0x200>)
   126b6:	9304      	str	r3, [sp, #16]
  AD5940_LFOSCMeasure(&LfoscMeasure, &LFOSCFreq);
   126b8:	a802      	add	r0, sp, #8
  LfoscMeasure.CalSeqAddr = 0;
   126ba:	9402      	str	r4, [sp, #8]
  AD5940_LFOSCMeasure(&LfoscMeasure, &LFOSCFreq);
   126bc:	f000 fede 	bl	1347c <AD5940_LFOSCMeasure>
  float x = LFOSCFreq;
   126c0:	682e      	ldr	r6, [r5, #0]
  int x_int = (int) x;		// integer part
   126c2:	4630      	mov	r0, r6
   126c4:	f7ee fd0e 	bl	10e4 <__aeabi_f2iz>
   126c8:	4605      	mov	r5, r0
  int x_frac = (int) ((x - x_int) * 10000);
   126ca:	f7ee faf1 	bl	cb0 <__aeabi_i2f>
   126ce:	4601      	mov	r1, r0
   126d0:	4630      	mov	r0, r6
   126d2:	f7ee fa37 	bl	b44 <__aeabi_fsub>
   126d6:	493c      	ldr	r1, [pc, #240]	; (127c8 <main+0x204>)
   126d8:	f7ee fb3e 	bl	d58 <__aeabi_fmul>
   126dc:	f7ee fd02 	bl	10e4 <__aeabi_f2iz>
  printf("Freq: %d.%04d Hz\n\r", x_int, x_frac);
   126e0:	4629      	mov	r1, r5
  int x_frac = (int) ((x - x_int) * 10000);
   126e2:	4602      	mov	r2, r0
  printf("Freq: %d.%04d Hz\n\r", x_int, x_frac);
   126e4:	4839      	ldr	r0, [pc, #228]	; (127cc <main+0x208>)
   126e6:	f012 febb 	bl	25460 <iprintf>
    AD5940_Delay10us(50000);    // delay 500 m
   126ea:	f24c 3050 	movw	r0, #50000	; 0xc350
   126ee:	f016 fdee 	bl	292ce <AD5940_Delay10us>
    printf("Platform configured \n\r");
   126f2:	4837      	ldr	r0, [pc, #220]	; (127d0 <main+0x20c>)
   126f4:	f012 feb4 	bl	25460 <iprintf>
    AD5940AMPStructInit(); /* Configure your parameters in this function */
   126f8:	f7ff ff2c 	bl	12554 <AD5940AMPStructInit>
    AD5940_Delay10us(50000);    // delay 500 m
   126fc:	f24c 3050 	movw	r0, #50000	; 0xc350
   12700:	f016 fde5 	bl	292ce <AD5940_Delay10us>
    printf("Parameters configured \n\r");
   12704:	4833      	ldr	r0, [pc, #204]	; (127d4 <main+0x210>)
   12706:	f012 feab 	bl	25460 <iprintf>
    AppCHRONOAMPInit(AppBuff[0], APPBUFF_SIZE);    /* Initialize AMP application. Provide a buffer, which is used to store sequencer commands */
   1270a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1270e:	4828      	ldr	r0, [pc, #160]	; (127b0 <main+0x1ec>)
   12710:	f001 f952 	bl	139b8 <AppCHRONOAMPInit>
    AD5940_Delay10us(50000);    // delay 500 m
   12714:	f24c 3050 	movw	r0, #50000	; 0xc350
   12718:	f016 fdd9 	bl	292ce <AD5940_Delay10us>
    AppCHRONOAMPCtrl(CHRONOAMPCTRL_PULSETEST, 0);         /* Control AMP measurement. AMPCTRL_PULSETEST carries out pulse test*/
   1271c:	4621      	mov	r1, r4
   1271e:	2005      	movs	r0, #5
   12720:	f001 f89c 	bl	1385c <AppCHRONOAMPCtrl>
            temp[IntCount] = APPBUFF_SIZE;
   12724:	4c2c      	ldr	r4, [pc, #176]	; (127d8 <main+0x214>)
        if(AD5940_GetMCUIntFlag())
   12726:	f000 ffa5 	bl	13674 <AD5940_GetMCUIntFlag>
   1272a:	2800      	cmp	r0, #0
   1272c:	d0fb      	beq.n	12726 <main+0x162>
            AD5940_ClrMCUIntFlag(); /* Clear this flag */
   1272e:	f000 ffa7 	bl	13680 <AD5940_ClrMCUIntFlag>
            temp[IntCount] = APPBUFF_SIZE;
   12732:	6823      	ldr	r3, [r4, #0]
   12734:	aa14      	add	r2, sp, #80	; 0x50
   12736:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1273a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1273e:	f842 1c14 	str.w	r1, [r2, #-20]
            AppCHRONOAMPISR(AppBuff[IntCount], &temp[IntCount]); /* Deal with it and provide a buffer to store data we got */
   12742:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   12746:	aa0f      	add	r2, sp, #60	; 0x3c
   12748:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   1274c:	fb00 7003 	mla	r0, r0, r3, r7
   12750:	f001 fc00 	bl	13f54 <AppCHRONOAMPISR>
			if(pAMPCfg->bMeasureTransient == bFALSE)
   12754:	9b01      	ldr	r3, [sp, #4]
   12756:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
   1275a:	b91b      	cbnz	r3, 12764 <main+0x1a0>
			{
				AMPShowResult((float*)AppBuff[0], temp[0]);
   1275c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1275e:	4638      	mov	r0, r7
   12760:	f7ff f97a 	bl	11a58 <AMPShowResult>
			}
            if(pAMPCfg->EndSeq) /* End sequence only set at end of transient */
   12764:	9b01      	ldr	r3, [sp, #4]
   12766:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   1276a:	2b00      	cmp	r3, #0
   1276c:	d0db      	beq.n	12726 <main+0x162>
   1276e:	4e10      	ldr	r6, [pc, #64]	; (127b0 <main+0x1ec>)
   12770:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
            {
                for(int i = 0; i<IntCount; i++)
   12774:	2500      	movs	r5, #0
   12776:	6823      	ldr	r3, [r4, #0]
   12778:	429d      	cmp	r5, r3
   1277a:	d308      	bcc.n	1278e <main+0x1ca>
            {
                AMPShowResult((float*)AppBuff[i], temp[i]); /* Show the results to UART */
            }
            pAMPCfg->EndSeq = bFALSE;
   1277c:	9b01      	ldr	r3, [sp, #4]
   1277e:	2100      	movs	r1, #0
   12780:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
            pAMPCfg->bMeasureTransient = bFALSE;
            IntCount = 0;
			AppCHRONOAMPCtrl(CHRONOAMPCTRL_START, 0); /* Begin standard amperometric measurement after pulse test is complete */
   12784:	4608      	mov	r0, r1
            IntCount = 0;
   12786:	6021      	str	r1, [r4, #0]
			AppCHRONOAMPCtrl(CHRONOAMPCTRL_START, 0); /* Begin standard amperometric measurement after pulse test is complete */
   12788:	f001 f868 	bl	1385c <AppCHRONOAMPCtrl>
   1278c:	e7cb      	b.n	12726 <main+0x162>
                AMPShowResult((float*)AppBuff[i], temp[i]); /* Show the results to UART */
   1278e:	4630      	mov	r0, r6
   12790:	f858 1b04 	ldr.w	r1, [r8], #4
   12794:	f7ff f960 	bl	11a58 <AMPShowResult>
                for(int i = 0; i<IntCount; i++)
   12798:	3501      	adds	r5, #1
   1279a:	f506 667a 	add.w	r6, r6, #4000	; 0xfa0
   1279e:	e7ea      	b.n	12776 <main+0x1b2>

    }//end while

    */

}//end main
   127a0:	b014      	add	sp, #80	; 0x50
   127a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   127a6:	bf00      	nop
   127a8:	0002e264 	.word	0x0002e264
   127ac:	0002f63a 	.word	0x0002f63a
   127b0:	20002650 	.word	0x20002650
   127b4:	02008000 	.word	0x02008000
   127b8:	20005534 	.word	0x20005534
   127bc:	000a47e5 	.word	0x000a47e5
   127c0:	447a0000 	.word	0x447a0000
   127c4:	4b742400 	.word	0x4b742400
   127c8:	461c4000 	.word	0x461c4000
   127cc:	0002f64d 	.word	0x0002f64d
   127d0:	0002f660 	.word	0x0002f660
   127d4:	0002f677 	.word	0x0002f677
   127d8:	20005530 	.word	0x20005530

000127dc <AD5940_SEQGenSearchReg>:
static AD5940Err AD5940_SEQGenSearchReg(uint32_t RegAddr, uint32_t *pIndex)
{
  uint32_t i;

  RegAddr = (RegAddr>>2)&0xff;
  for(i=0;i<SeqGenDB.RegCount;i++)
   127dc:	4b0a      	ldr	r3, [pc, #40]	; (12808 <AD5940_SEQGenSearchReg+0x2c>)
{
   127de:	b530      	push	{r4, r5, lr}
  RegAddr = (RegAddr>>2)&0xff;
   127e0:	f3c0 0087 	ubfx	r0, r0, #2, #8
  {
    if(RegAddr == SeqGenDB.pRegInfo[i].RegAddr)
   127e4:	e9d3 4204 	ldrd	r4, r2, [r3, #16]
  for(i=0;i<SeqGenDB.RegCount;i++)
   127e8:	2300      	movs	r3, #0
   127ea:	429a      	cmp	r2, r3
   127ec:	d102      	bne.n	127f4 <AD5940_SEQGenSearchReg+0x18>
    {
      *pIndex = i;
      return AD5940ERR_OK;
    }
  }
  return AD5940ERR_SEQREG;
   127ee:	f06f 0006 	mvn.w	r0, #6
   127f2:	e005      	b.n	12800 <AD5940_SEQGenSearchReg+0x24>
    if(RegAddr == SeqGenDB.pRegInfo[i].RegAddr)
   127f4:	f814 5023 	ldrb.w	r5, [r4, r3, lsl #2]
   127f8:	4285      	cmp	r5, r0
   127fa:	d102      	bne.n	12802 <AD5940_SEQGenSearchReg+0x26>
      *pIndex = i;
   127fc:	600b      	str	r3, [r1, #0]
      return AD5940ERR_OK;
   127fe:	2000      	movs	r0, #0
}
   12800:	bd30      	pop	{r4, r5, pc}
  for(i=0;i<SeqGenDB.RegCount;i++)
   12802:	3301      	adds	r3, #1
   12804:	e7f1      	b.n	127ea <AD5940_SEQGenSearchReg+0xe>
   12806:	bf00      	nop
   12808:	20005538 	.word	0x20005538

0001280c <AD5940_SEQRegInfoInsert>:
 * @return Return None.
*/
static void AD5940_SEQRegInfoInsert(uint16_t RegAddr, uint32_t RegData)
{
  uint32_t temp;
  temp = SeqGenDB.RegCount + SeqGenDB.SeqLen;
   1280c:	4b0d      	ldr	r3, [pc, #52]	; (12844 <AD5940_SEQRegInfoInsert+0x38>)
{
   1280e:	b530      	push	{r4, r5, lr}
  temp = SeqGenDB.RegCount + SeqGenDB.SeqLen;
   12810:	695a      	ldr	r2, [r3, #20]
   12812:	68dc      	ldr	r4, [r3, #12]
  
  if(temp < SeqGenDB.BufferSize)
   12814:	685d      	ldr	r5, [r3, #4]
  temp = SeqGenDB.RegCount + SeqGenDB.SeqLen;
   12816:	4414      	add	r4, r2
  if(temp < SeqGenDB.BufferSize)
   12818:	42a5      	cmp	r5, r4
   1281a:	d90e      	bls.n	1283a <AD5940_SEQRegInfoInsert+0x2e>
  {
    SeqGenDB.pRegInfo --; /* Move back */
   1281c:	691c      	ldr	r4, [r3, #16]
    SeqGenDB.pRegInfo[0].RegAddr = (RegAddr>>2)&0xff;
   1281e:	0880      	lsrs	r0, r0, #2
    SeqGenDB.pRegInfo --; /* Move back */
   12820:	1f25      	subs	r5, r4, #4
   12822:	611d      	str	r5, [r3, #16]
    SeqGenDB.pRegInfo[0].RegAddr = (RegAddr>>2)&0xff;
   12824:	f804 0c04 	strb.w	r0, [r4, #-4]
    SeqGenDB.pRegInfo[0].RegValue = RegData&0x00ffffff;
   12828:	f854 0c04 	ldr.w	r0, [r4, #-4]
    SeqGenDB.RegCount ++;
   1282c:	3201      	adds	r2, #1
    SeqGenDB.pRegInfo[0].RegValue = RegData&0x00ffffff;
   1282e:	f361 201f 	bfi	r0, r1, #8, #24
   12832:	f844 0c04 	str.w	r0, [r4, #-4]
    SeqGenDB.RegCount ++;
   12836:	615a      	str	r2, [r3, #20]
  }
  else  /* There is no more buffer  */
  {
    SeqGenDB.LastError = AD5940ERR_BUFF;
  }
}
   12838:	bd30      	pop	{r4, r5, pc}
    SeqGenDB.LastError = AD5940ERR_BUFF;
   1283a:	f06f 0203 	mvn.w	r2, #3
   1283e:	619a      	str	r2, [r3, #24]
}
   12840:	e7fa      	b.n	12838 <AD5940_SEQRegInfoInsert+0x2c>
   12842:	bf00      	nop
   12844:	20005538 	.word	0x20005538

00012848 <AD5940_SEQGenInsert>:
  temp  = SeqGenDB.RegCount + SeqGenDB.SeqLen;
   12848:	4b09      	ldr	r3, [pc, #36]	; (12870 <AD5940_SEQGenInsert+0x28>)
   1284a:	68d9      	ldr	r1, [r3, #12]
   1284c:	695a      	ldr	r2, [r3, #20]
{
   1284e:	b510      	push	{r4, lr}
  if(temp < SeqGenDB.BufferSize)
   12850:	685c      	ldr	r4, [r3, #4]
  temp  = SeqGenDB.RegCount + SeqGenDB.SeqLen;
   12852:	440a      	add	r2, r1
  if(temp < SeqGenDB.BufferSize)
   12854:	4294      	cmp	r4, r2
    SeqGenDB.pSeqBuff[SeqGenDB.SeqLen] = CmdWord;
   12856:	bf83      	ittte	hi
   12858:	689a      	ldrhi	r2, [r3, #8]
   1285a:	f842 0021 	strhi.w	r0, [r2, r1, lsl #2]
    SeqGenDB.SeqLen ++;
   1285e:	68da      	ldrhi	r2, [r3, #12]
    SeqGenDB.LastError = AD5940ERR_BUFF;
   12860:	f06f 0203 	mvnls.w	r2, #3
    SeqGenDB.SeqLen ++;
   12864:	bf86      	itte	hi
   12866:	3201      	addhi	r2, #1
   12868:	60da      	strhi	r2, [r3, #12]
    SeqGenDB.LastError = AD5940ERR_BUFF;
   1286a:	619a      	strls	r2, [r3, #24]
}
   1286c:	bd10      	pop	{r4, pc}
   1286e:	bf00      	nop
   12870:	20005538 	.word	0x20005538

00012874 <AD5940_SEQGenInit>:
 * @param BufferSize: The buffer length.
 * @return Return None.
*/
void AD5940_SEQGenInit(uint32_t *pBuffer, uint32_t BufferSize)
{
  if(BufferSize < 2) return;
   12874:	2901      	cmp	r1, #1
   12876:	d90d      	bls.n	12894 <AD5940_SEQGenInit+0x20>
  SeqGenDB.BufferSize = BufferSize;
   12878:	4b07      	ldr	r3, [pc, #28]	; (12898 <AD5940_SEQGenInit+0x24>)
  SeqGenDB.pSeqBuff = pBuffer;
  SeqGenDB.pRegInfo = (SEQGenRegInfo_Type*)pBuffer + BufferSize - 1; /* Point to the last element in buffer */
  SeqGenDB.SeqLen = 0;
   1287a:	2200      	movs	r2, #0
  SeqGenDB.pSeqBuff = pBuffer;
   1287c:	e9c3 1001 	strd	r1, r0, [r3, #4]
  SeqGenDB.pRegInfo = (SEQGenRegInfo_Type*)pBuffer + BufferSize - 1; /* Point to the last element in buffer */
   12880:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   12884:	3901      	subs	r1, #1

  SeqGenDB.RegCount = 0;
  SeqGenDB.LastError = AD5940ERR_OK;
   12886:	e9c3 2205 	strd	r2, r2, [r3, #20]
  SeqGenDB.pRegInfo = (SEQGenRegInfo_Type*)pBuffer + BufferSize - 1; /* Point to the last element in buffer */
   1288a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1288e:	6118      	str	r0, [r3, #16]
  SeqGenDB.SeqLen = 0;
   12890:	60da      	str	r2, [r3, #12]
  SeqGenDB.EngineStart = bFALSE;
   12892:	701a      	strb	r2, [r3, #0]
}
   12894:	4770      	bx	lr
   12896:	bf00      	nop
   12898:	20005538 	.word	0x20005538

0001289c <AD5940_SEQGenFetchSeq>:
*/
AD5940Err AD5940_SEQGenFetchSeq(const uint32_t **ppSeqCmd, uint32_t *pSeqLen)
{
  AD5940Err lasterror;

  if(ppSeqCmd)
   1289c:	4b04      	ldr	r3, [pc, #16]	; (128b0 <AD5940_SEQGenFetchSeq+0x14>)
   1289e:	b108      	cbz	r0, 128a4 <AD5940_SEQGenFetchSeq+0x8>
    *ppSeqCmd = SeqGenDB.pSeqBuff;  
   128a0:	689a      	ldr	r2, [r3, #8]
   128a2:	6002      	str	r2, [r0, #0]
  if(pSeqLen)
   128a4:	b109      	cbz	r1, 128aa <AD5940_SEQGenFetchSeq+0xe>
    *pSeqLen = SeqGenDB.SeqLen;
   128a6:	68da      	ldr	r2, [r3, #12]
   128a8:	600a      	str	r2, [r1, #0]

  //SeqGenDB.SeqLen = 0;  /* Start a new sequence */
  lasterror = SeqGenDB.LastError;
  //SeqGenDB.LastError = AD5940ERR_OK;  /* Clear error message */
  return lasterror;
}
   128aa:	6998      	ldr	r0, [r3, #24]
   128ac:	4770      	bx	lr
   128ae:	bf00      	nop
   128b0:	20005538 	.word	0x20005538

000128b4 <AD5940_SEQGenCtrl>:
 * @param bFlag: Enable or disable sequencer generator.
 * @return Return None.
*/
void AD5940_SEQGenCtrl(BoolFlag bFlag)
{
  if(bFlag == bFALSE) /* Disable sequence generator */
   128b4:	4b04      	ldr	r3, [pc, #16]	; (128c8 <AD5940_SEQGenCtrl+0x14>)
   128b6:	b908      	cbnz	r0, 128bc <AD5940_SEQGenCtrl+0x8>
  {
    SeqGenDB.EngineStart = bFALSE;
   128b8:	7018      	strb	r0, [r3, #0]
   128ba:	4770      	bx	lr
  }
  else
  {
    SeqGenDB.SeqLen = 0;
   128bc:	2200      	movs	r2, #0
   128be:	60da      	str	r2, [r3, #12]
    SeqGenDB.LastError = AD5940ERR_OK;  /* Clear error message */
   128c0:	619a      	str	r2, [r3, #24]
    SeqGenDB.EngineStart = bTRUE;
   128c2:	2201      	movs	r2, #1
   128c4:	701a      	strb	r2, [r3, #0]
  }
}
   128c6:	4770      	bx	lr
   128c8:	20005538 	.word	0x20005538

000128cc <AD5940_Notch50HzAvailable>:
 *        If it's not availabe, hardware automatically bypass Notch even if it's enabled.
 * @param pFilterInfo the filter configuration, only need sinc2/sinc3 osr and adc data rate information.
 * @return return bTRUE if notch 50Hz filter is available.
*/
BoolFlag AD5940_Notch50HzAvailable(ADCFilterCfg_Type *pFilterInfo, uint8_t *dl)
{
   128cc:	b570      	push	{r4, r5, r6, lr}
  if((pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)||\
   128ce:	68c4      	ldr	r4, [r0, #12]
   128d0:	2c01      	cmp	r4, #1
{
   128d2:	b086      	sub	sp, #24
   128d4:	4605      	mov	r5, r0
   128d6:	460e      	mov	r6, r1
  if((pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)||\
   128d8:	d120      	bne.n	1291c <AD5940_Notch50HzAvailable+0x50>
   128da:	6803      	ldr	r3, [r0, #0]
   128dc:	2b02      	cmp	r3, #2
   128de:	d133      	bne.n	12948 <AD5940_Notch50HzAvailable+0x7c>
      (pFilterInfo->ADCRate == ADCRATE_1P6MHZ && pFilterInfo->ADCSinc3Osr != ADCSINC3OSR_2))
  {
    //this combination suits for filter:
    //SINC3 OSR2, for 800kSPS
    //and SINC3 OSR4 and OSR5 for 1.6MSPS,
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_533, ADCSINC2OSR_667,ADCSINC2OSR_800, ADCSINC2OSR_889, ADCSINC2OSR_1333};
   128e0:	4b23      	ldr	r3, [pc, #140]	; (12970 <AD5940_Notch50HzAvailable+0xa4>)
   128e2:	6818      	ldr	r0, [r3, #0]
   128e4:	791b      	ldrb	r3, [r3, #4]
   128e6:	f88d 300c 	strb.w	r3, [sp, #12]
    const uint8_t dl_50Hz[] = {15,12,10,9,6};
   128ea:	4b22      	ldr	r3, [pc, #136]	; (12974 <AD5940_Notch50HzAvailable+0xa8>)
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_533, ADCSINC2OSR_667,ADCSINC2OSR_800, ADCSINC2OSR_889, ADCSINC2OSR_1333};
   128ec:	9002      	str	r0, [sp, #8]
    const uint8_t dl_50Hz[] = {15,12,10,9,6};
   128ee:	6818      	ldr	r0, [r3, #0]
   128f0:	791b      	ldrb	r3, [r3, #4]
   128f2:	f88d 3014 	strb.w	r3, [sp, #20]
   128f6:	9004      	str	r0, [sp, #16]
    uint8_t index;
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   128f8:	f10d 0307 	add.w	r3, sp, #7
   128fc:	2205      	movs	r2, #5
    //this combination suits for filter:
    //SINC3 OSR2 for 1.6MSPS
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_889, ADCSINC2OSR_1067, ADCSINC2OSR_1333};
    const uint8_t dl_50Hz[] = {18,15,12};
    uint8_t index;
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   128fe:	7928      	ldrb	r0, [r5, #4]
   12900:	a902      	add	r1, sp, #8
   12902:	f015 fdfb 	bl	284fc <_is_value_in_table>
   12906:	b378      	cbz	r0, 12968 <AD5940_Notch50HzAvailable+0x9c>
    {
      *dl = dl_50Hz[index];
   12908:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1290c:	aa06      	add	r2, sp, #24
   1290e:	4413      	add	r3, r2
      return bTRUE;
   12910:	2001      	movs	r0, #1
      *dl = dl_50Hz[index];
   12912:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   12916:	7033      	strb	r3, [r6, #0]
      return bTRUE;
    }
  }
  *dl = 0;
  return bFALSE;
}
   12918:	b006      	add	sp, #24
   1291a:	bd70      	pop	{r4, r5, r6, pc}
  if((pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)||\
   1291c:	bb24      	cbnz	r4, 12968 <AD5940_Notch50HzAvailable+0x9c>
      (pFilterInfo->ADCRate == ADCRATE_1P6MHZ && pFilterInfo->ADCSinc3Osr != ADCSINC3OSR_2))
   1291e:	6803      	ldr	r3, [r0, #0]
   12920:	2b02      	cmp	r3, #2
   12922:	d1dd      	bne.n	128e0 <AD5940_Notch50HzAvailable+0x14>
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_889, ADCSINC2OSR_1067, ADCSINC2OSR_1333};
   12924:	4b14      	ldr	r3, [pc, #80]	; (12978 <AD5940_Notch50HzAvailable+0xac>)
   12926:	881a      	ldrh	r2, [r3, #0]
   12928:	789b      	ldrb	r3, [r3, #2]
   1292a:	f88d 300a 	strb.w	r3, [sp, #10]
    const uint8_t dl_50Hz[] = {18,15,12};
   1292e:	4b13      	ldr	r3, [pc, #76]	; (1297c <AD5940_Notch50HzAvailable+0xb0>)
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_889, ADCSINC2OSR_1067, ADCSINC2OSR_1333};
   12930:	f8ad 2008 	strh.w	r2, [sp, #8]
    const uint8_t dl_50Hz[] = {18,15,12};
   12934:	881a      	ldrh	r2, [r3, #0]
   12936:	789b      	ldrb	r3, [r3, #2]
   12938:	f8ad 2010 	strh.w	r2, [sp, #16]
   1293c:	f88d 3012 	strb.w	r3, [sp, #18]
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   12940:	2203      	movs	r2, #3
   12942:	f10d 0307 	add.w	r3, sp, #7
   12946:	e7da      	b.n	128fe <AD5940_Notch50HzAvailable+0x32>
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_178, ADCSINC2OSR_267, ADCSINC2OSR_533, ADCSINC2OSR_640,\
   12948:	4b0d      	ldr	r3, [pc, #52]	; (12980 <AD5940_Notch50HzAvailable+0xb4>)
   1294a:	6818      	ldr	r0, [r3, #0]
   1294c:	889b      	ldrh	r3, [r3, #4]
   1294e:	f8ad 300c 	strh.w	r3, [sp, #12]
    const uint8_t dl_50Hz[] = {18,12,6,5,4,3};
   12952:	4b0c      	ldr	r3, [pc, #48]	; (12984 <AD5940_Notch50HzAvailable+0xb8>)
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_178, ADCSINC2OSR_267, ADCSINC2OSR_533, ADCSINC2OSR_640,\
   12954:	9002      	str	r0, [sp, #8]
    const uint8_t dl_50Hz[] = {18,12,6,5,4,3};
   12956:	6818      	ldr	r0, [r3, #0]
   12958:	889b      	ldrh	r3, [r3, #4]
   1295a:	f8ad 3014 	strh.w	r3, [sp, #20]
   1295e:	9004      	str	r0, [sp, #16]
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   12960:	f10d 0307 	add.w	r3, sp, #7
   12964:	2206      	movs	r2, #6
   12966:	e7ca      	b.n	128fe <AD5940_Notch50HzAvailable+0x32>
  *dl = 0;
   12968:	2000      	movs	r0, #0
   1296a:	7030      	strb	r0, [r6, #0]
  return bFALSE;
   1296c:	e7d4      	b.n	12918 <AD5940_Notch50HzAvailable+0x4c>
   1296e:	bf00      	nop
   12970:	0002f690 	.word	0x0002f690
   12974:	0002f696 	.word	0x0002f696
   12978:	0002f69c 	.word	0x0002f69c
   1297c:	0002f6a0 	.word	0x0002f6a0
   12980:	0002f6a4 	.word	0x0002f6a4
   12984:	0002f6ab 	.word	0x0002f6ab

00012988 <AD5940_Notch60HzAvailable>:
 *        If it's not availabe, hardware automatically bypass Notch even if it's enabled.
 * @param pFilterInfo the filter configuration, need sinc2/sinc3 osr and adc data rate information.
 * @return return bTRUE if notch 60Hz filter is available.
*/
BoolFlag AD5940_Notch60HzAvailable(ADCFilterCfg_Type *pFilterInfo, uint8_t *dl)
{
   12988:	b570      	push	{r4, r5, r6, lr}
  if((pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)||\
   1298a:	68c4      	ldr	r4, [r0, #12]
   1298c:	2c01      	cmp	r4, #1
{
   1298e:	b086      	sub	sp, #24
   12990:	4605      	mov	r5, r0
   12992:	460e      	mov	r6, r1
  if((pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)||\
   12994:	d11c      	bne.n	129d0 <AD5940_Notch60HzAvailable+0x48>
   12996:	6803      	ldr	r3, [r0, #0]
   12998:	2b02      	cmp	r3, #2
   1299a:	d128      	bne.n	129ee <AD5940_Notch60HzAvailable+0x66>
      (pFilterInfo->ADCRate == ADCRATE_1P6MHZ && pFilterInfo->ADCSinc3Osr != ADCSINC3OSR_2))
  {
    //this combination suits for filter:
    //SINC3 OSR2, for 800kSPS
    //and SINC3 OSR4 and OSR5 for 1.6MSPS,
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_667, ADCSINC2OSR_1333};
   1299c:	f640 3307 	movw	r3, #2823	; 0xb07
   129a0:	f8ad 3008 	strh.w	r3, [sp, #8]
    const uint8_t dl_60Hz[] = {10,5};
   129a4:	f240 530a 	movw	r3, #1290	; 0x50a
   129a8:	f8ad 3010 	strh.w	r3, [sp, #16]
    uint8_t index;
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   129ac:	2202      	movs	r2, #2
   129ae:	f10d 0307 	add.w	r3, sp, #7
    //this combination suits for filter:
    //SINC3 OSR2 for 1.6MSPS
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_889, ADCSINC2OSR_1333};
    const uint8_t dl_60Hz[] = {15,10};
    uint8_t index;
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   129b2:	7928      	ldrb	r0, [r5, #4]
   129b4:	a902      	add	r1, sp, #8
   129b6:	f015 fda1 	bl	284fc <_is_value_in_table>
   129ba:	b340      	cbz	r0, 12a0e <AD5940_Notch60HzAvailable+0x86>
    {
      *dl = dl_60Hz[index];
   129bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   129c0:	aa06      	add	r2, sp, #24
   129c2:	4413      	add	r3, r2
      return bTRUE;
   129c4:	2001      	movs	r0, #1
      *dl = dl_60Hz[index];
   129c6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   129ca:	7033      	strb	r3, [r6, #0]
      return bTRUE;
    }
  }
  *dl = 0;
  return bFALSE;
}
   129cc:	b006      	add	sp, #24
   129ce:	bd70      	pop	{r4, r5, r6, pc}
  if((pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)||\
   129d0:	b9ec      	cbnz	r4, 12a0e <AD5940_Notch60HzAvailable+0x86>
      (pFilterInfo->ADCRate == ADCRATE_1P6MHZ && pFilterInfo->ADCSinc3Osr != ADCSINC3OSR_2))
   129d2:	6802      	ldr	r2, [r0, #0]
   129d4:	2a02      	cmp	r2, #2
   129d6:	d1e1      	bne.n	1299c <AD5940_Notch60HzAvailable+0x14>
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_889, ADCSINC2OSR_1333};
   129d8:	f640 3309 	movw	r3, #2825	; 0xb09
   129dc:	f8ad 3008 	strh.w	r3, [sp, #8]
    const uint8_t dl_60Hz[] = {15,10};
   129e0:	f640 230f 	movw	r3, #2575	; 0xa0f
   129e4:	f8ad 3010 	strh.w	r3, [sp, #16]
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   129e8:	f10d 0307 	add.w	r3, sp, #7
   129ec:	e7e1      	b.n	129b2 <AD5940_Notch60HzAvailable+0x2a>
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_178, ADCSINC2OSR_267, ADCSINC2OSR_533, ADCSINC2OSR_667,\
   129ee:	4b09      	ldr	r3, [pc, #36]	; (12a14 <AD5940_Notch60HzAvailable+0x8c>)
   129f0:	6818      	ldr	r0, [r3, #0]
   129f2:	889b      	ldrh	r3, [r3, #4]
   129f4:	f8ad 300c 	strh.w	r3, [sp, #12]
    const uint8_t dl_60Hz[] = {15,10,5,4,3,2};
   129f8:	4b07      	ldr	r3, [pc, #28]	; (12a18 <AD5940_Notch60HzAvailable+0x90>)
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_178, ADCSINC2OSR_267, ADCSINC2OSR_533, ADCSINC2OSR_667,\
   129fa:	9002      	str	r0, [sp, #8]
    const uint8_t dl_60Hz[] = {15,10,5,4,3,2};
   129fc:	6818      	ldr	r0, [r3, #0]
   129fe:	889b      	ldrh	r3, [r3, #4]
   12a00:	f8ad 3014 	strh.w	r3, [sp, #20]
   12a04:	9004      	str	r0, [sp, #16]
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
   12a06:	f10d 0307 	add.w	r3, sp, #7
   12a0a:	2206      	movs	r2, #6
   12a0c:	e7d1      	b.n	129b2 <AD5940_Notch60HzAvailable+0x2a>
  *dl = 0;
   12a0e:	2000      	movs	r0, #0
   12a10:	7030      	strb	r0, [r6, #0]
  return bFALSE;
   12a12:	e7db      	b.n	129cc <AD5940_Notch60HzAvailable+0x44>
   12a14:	0002f6b2 	.word	0x0002f6b2
   12a18:	0002f6b9 	.word	0x0002f6b9

00012a1c <AD5940_ClksCalculate>:
 * @param pFilterInfo: Pointer to configuration structure. 
 * @param pClocks: pointer used to store results.         
 * @return return none.
*/
void AD5940_ClksCalculate(ClksCalInfo_Type *pFilterInfo, uint32_t *pClocks)
{
   12a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t temp = 0;
  const uint32_t sinc2osr_table[] = {22,44,89,178,267,533,640,667,800,889,1067,1333,0};
   12a1e:	4d5e      	ldr	r5, [pc, #376]	; (12b98 <AD5940_ClksCalculate+0x17c>)
{
   12a20:	4684      	mov	ip, r0
   12a22:	460f      	mov	r7, r1
  const uint32_t sinc2osr_table[] = {22,44,89,178,267,533,640,667,800,889,1067,1333,0};
   12a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   12a26:	b099      	sub	sp, #100	; 0x64
  const uint32_t sinc2osr_table[] = {22,44,89,178,267,533,640,667,800,889,1067,1333,0};
   12a28:	ae0b      	add	r6, sp, #44	; 0x2c
   12a2a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   12a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12a2e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   12a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12a32:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   12a34:	f855 3b04 	ldr.w	r3, [r5], #4
   12a38:	6033      	str	r3, [r6, #0]
  const uint32_t sinc3osr_table[] = {5,4,2,0};
   12a3a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  uint32_t temp = 0;
   12a3e:	2400      	movs	r4, #0
  const uint32_t sinc3osr_table[] = {5,4,2,0};
   12a40:	ae02      	add	r6, sp, #8
  uint32_t temp = 0;
   12a42:	9401      	str	r4, [sp, #4]
  const uint32_t sinc3osr_table[] = {5,4,2,0};
   12a44:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}

  *pClocks = 0;
   12a48:	603c      	str	r4, [r7, #0]
  if(pFilterInfo == NULL) return;
   12a4a:	4664      	mov	r4, ip
   12a4c:	b314      	cbz	r4, 12a94 <AD5940_ClksCalculate+0x78>
  if(pClocks == NULL) return;
  if(pFilterInfo->ADCSinc2Osr > ADCSINC2OSR_1333) return;
   12a4e:	f8dc 200c 	ldr.w	r2, [ip, #12]
   12a52:	2a0b      	cmp	r2, #11
   12a54:	d81e      	bhi.n	12a94 <AD5940_ClksCalculate+0x78>
  if(pFilterInfo->ADCSinc3Osr > 2)  return; /* 0: OSR5, 1:OSR4, 2:OSR2 */
   12a56:	f8dc 3008 	ldr.w	r3, [ip, #8]
   12a5a:	2b02      	cmp	r3, #2
   12a5c:	d81a      	bhi.n	12a94 <AD5940_ClksCalculate+0x78>
  if(pFilterInfo->ADCAvgNum > ADCAVGNUM_16) return; /* Average number index:0,1,2,3 */
   12a5e:	f8dc 1010 	ldr.w	r1, [ip, #16]
   12a62:	2903      	cmp	r1, #3
   12a64:	d816      	bhi.n	12a94 <AD5940_ClksCalculate+0x78>
  switch(pFilterInfo->DataType)
   12a66:	f8dc 0000 	ldr.w	r0, [ip]
   12a6a:	2804      	cmp	r0, #4
   12a6c:	d810      	bhi.n	12a90 <AD5940_ClksCalculate+0x74>
   12a6e:	e8df f000 	tbb	[pc, r0]
   12a72:	1303      	.short	0x1303
   12a74:	6b29      	.short	0x6b29
   12a76:	41          	.byte	0x41
   12a77:	00          	.byte	0x00
  {
    case DATATYPE_ADCRAW:
      temp = (uint32_t)(20*pFilterInfo->DataCount*pFilterInfo->RatioSys2AdcClk);
   12a78:	f8dc 3004 	ldr.w	r3, [ip, #4]
   12a7c:	2014      	movs	r0, #20
   12a7e:	4358      	muls	r0, r3
   12a80:	f7ee f912 	bl	ca8 <__aeabi_ui2f>
   12a84:	69e1      	ldr	r1, [r4, #28]
   12a86:	f7ee f967 	bl	d58 <__aeabi_fmul>
      break;
    case DATATYPE_SINC3:
      temp = (uint32_t)(((pFilterInfo->DataCount+2)*sinc3osr_table[pFilterInfo->ADCSinc3Osr]+1)*20*pFilterInfo->RatioSys2AdcClk + 0.5f);
   12a8a:	f7ee fb51 	bl	1130 <__aeabi_f2uiz>
   12a8e:	9001      	str	r0, [sp, #4]
      temp += 25; /* add margin */
      break;
    default:
    break;
  }
  *pClocks = temp;
   12a90:	9b01      	ldr	r3, [sp, #4]
   12a92:	603b      	str	r3, [r7, #0]
}
   12a94:	b019      	add	sp, #100	; 0x64
   12a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
      temp = (uint32_t)(((pFilterInfo->DataCount+2)*sinc3osr_table[pFilterInfo->ADCSinc3Osr]+1)*20*pFilterInfo->RatioSys2AdcClk + 0.5f);
   12a98:	f8dc 0004 	ldr.w	r0, [ip, #4]
   12a9c:	2214      	movs	r2, #20
   12a9e:	4350      	muls	r0, r2
   12aa0:	aa18      	add	r2, sp, #96	; 0x60
   12aa2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12aa6:	3028      	adds	r0, #40	; 0x28
   12aa8:	f853 3c58 	ldr.w	r3, [r3, #-88]
   12aac:	4358      	muls	r0, r3
   12aae:	3014      	adds	r0, #20
   12ab0:	f7ee f8fa 	bl	ca8 <__aeabi_ui2f>
   12ab4:	69e1      	ldr	r1, [r4, #28]
   12ab6:	f7ee f94f 	bl	d58 <__aeabi_fmul>
   12aba:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   12abe:	f7ee f843 	bl	b48 <__addsf3>
   12ac2:	e7e2      	b.n	12a8a <AD5940_ClksCalculate+0x6e>
      temp = (pFilterInfo->DataCount+1)*sinc2osr_table[pFilterInfo->ADCSinc2Osr] + 1;
   12ac4:	ab18      	add	r3, sp, #96	; 0x60
   12ac6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   12aca:	f8dc 1004 	ldr.w	r1, [ip, #4]
   12ace:	f852 3c34 	ldr.w	r3, [r2, #-52]
   12ad2:	fb01 3303 	mla	r3, r1, r3, r3
   12ad6:	3301      	adds	r3, #1
      pFilterInfo->DataType = DATATYPE_SINC3;
   12ad8:	2201      	movs	r2, #1
      pFilterInfo->DataCount = temp;
   12ada:	e9cc 2300 	strd	r2, r3, [ip]
      AD5940_ClksCalculate(pFilterInfo, &temp);
   12ade:	a901      	add	r1, sp, #4
   12ae0:	4660      	mov	r0, ip
      temp = (pFilterInfo->DataCount+1)*sinc2osr_table[pFilterInfo->ADCSinc2Osr] + 1;
   12ae2:	9301      	str	r3, [sp, #4]
      AD5940_ClksCalculate(pFilterInfo, &temp);
   12ae4:	f7ff ff9a 	bl	12a1c <AD5940_ClksCalculate>
      pFilterInfo->DataType = DATATYPE_SINC2;
   12ae8:	2302      	movs	r3, #2
   12aea:	6023      	str	r3, [r4, #0]
      temp += 15;   /* Need extra 15 clocks for FIFO etc. Just to be safe. */
   12aec:	9b01      	ldr	r3, [sp, #4]
   12aee:	330f      	adds	r3, #15
      temp += 25; /* add margin */
   12af0:	9301      	str	r3, [sp, #4]
      break;
   12af2:	e7cd      	b.n	12a90 <AD5940_ClksCalculate+0x74>
      filter.ADCRate = pFilterInfo->ADCRate;
   12af4:	f89c 1018 	ldrb.w	r1, [ip, #24]
   12af8:	9109      	str	r1, [sp, #36]	; 0x24
      if(AD5940_Notch50HzAvailable(&filter, &dl_50)){
   12afa:	a806      	add	r0, sp, #24
   12afc:	f10d 0102 	add.w	r1, sp, #2
      filter.ADCSinc2Osr = pFilterInfo->ADCSinc2Osr;
   12b00:	e9cd 3206 	strd	r3, r2, [sp, #24]
      if(AD5940_Notch50HzAvailable(&filter, &dl_50)){
   12b04:	f7ff fee2 	bl	128cc <AD5940_Notch50HzAvailable>
   12b08:	4605      	mov	r5, r0
   12b0a:	b118      	cbz	r0, 12b14 <AD5940_ClksCalculate+0xf8>
        dl += dl_50 - 1;
   12b0c:	f89d 5002 	ldrb.w	r5, [sp, #2]
   12b10:	3d01      	subs	r5, #1
   12b12:	b2ed      	uxtb	r5, r5
      if(AD5940_Notch60HzAvailable(&filter, &dl_60)){
   12b14:	f10d 0103 	add.w	r1, sp, #3
   12b18:	a806      	add	r0, sp, #24
   12b1a:	f7ff ff35 	bl	12988 <AD5940_Notch60HzAvailable>
   12b1e:	b120      	cbz	r0, 12b2a <AD5940_ClksCalculate+0x10e>
        dl += dl_60 - 1;
   12b20:	f89d 0003 	ldrb.w	r0, [sp, #3]
   12b24:	3801      	subs	r0, #1
   12b26:	4405      	add	r5, r0
   12b28:	b2ed      	uxtb	r5, r5
      pFilterInfo->DataType = DATATYPE_SINC2;
   12b2a:	2302      	movs	r3, #2
   12b2c:	6023      	str	r3, [r4, #0]
      pFilterInfo->DataCount += dl; //DL is the extra data input needed for filter to output first data.
   12b2e:	6863      	ldr	r3, [r4, #4]
   12b30:	442b      	add	r3, r5
   12b32:	6063      	str	r3, [r4, #4]
      AD5940_ClksCalculate(pFilterInfo,&temp);
   12b34:	4620      	mov	r0, r4
   12b36:	a901      	add	r1, sp, #4
   12b38:	f7ff ff70 	bl	12a1c <AD5940_ClksCalculate>
      pFilterInfo->DataCount -= dl;
   12b3c:	6860      	ldr	r0, [r4, #4]
      pFilterInfo->DataType = DATATYPE_NOTCH;
   12b3e:	2304      	movs	r3, #4
      pFilterInfo->DataCount -= dl;
   12b40:	1b40      	subs	r0, r0, r5
      pFilterInfo->DataType = DATATYPE_NOTCH;
   12b42:	6023      	str	r3, [r4, #0]
      pFilterInfo->DataCount -= dl;
   12b44:	6060      	str	r0, [r4, #4]
      break;
   12b46:	e7a3      	b.n	12a90 <AD5940_ClksCalculate+0x74>
      switch(pFilterInfo->DftSrc)
   12b48:	f8dc 3014 	ldr.w	r3, [ip, #20]
   12b4c:	2b03      	cmp	r3, #3
   12b4e:	d809      	bhi.n	12b64 <AD5940_ClksCalculate+0x148>
   12b50:	e8df f003 	tbb	[pc, r3]
   12b54:	16020d0f 	.word	0x16020d0f
          pFilterInfo->DataType = DATATYPE_ADCRAW;
   12b58:	2300      	movs	r3, #0
   12b5a:	6023      	str	r3, [r4, #0]
          AD5940_ClksCalculate(pFilterInfo, &temp);
   12b5c:	a901      	add	r1, sp, #4
   12b5e:	4620      	mov	r0, r4
   12b60:	f7ff ff5c 	bl	12a1c <AD5940_ClksCalculate>
      pFilterInfo->DataType = DATATYPE_DFT;
   12b64:	2303      	movs	r3, #3
   12b66:	6023      	str	r3, [r4, #0]
      temp += 25; /* add margin */
   12b68:	9b01      	ldr	r3, [sp, #4]
   12b6a:	3319      	adds	r3, #25
   12b6c:	e7c0      	b.n	12af0 <AD5940_ClksCalculate+0xd4>
          pFilterInfo->DataType = DATATYPE_SINC3;
   12b6e:	2301      	movs	r3, #1
   12b70:	e7f3      	b.n	12b5a <AD5940_ClksCalculate+0x13e>
          if(pFilterInfo->BpNotch)
   12b72:	f89c 3019 	ldrb.w	r3, [ip, #25]
            pFilterInfo->DataType = DATATYPE_NOTCH;
   12b76:	2b00      	cmp	r3, #0
   12b78:	bf14      	ite	ne
   12b7a:	2302      	movne	r3, #2
   12b7c:	2304      	moveq	r3, #4
   12b7e:	e7ec      	b.n	12b5a <AD5940_ClksCalculate+0x13e>
          pFilterInfo->DataType = DATATYPE_SINC3;
   12b80:	2301      	movs	r3, #1
          pFilterInfo->DataCount *= 1L<<(pFilterInfo->ADCAvgNum+1); /* 0: average2, 1: average4, 2: average8, 3: average16 */
   12b82:	4419      	add	r1, r3
          pFilterInfo->DataType = DATATYPE_SINC3;
   12b84:	f8cc 3000 	str.w	r3, [ip]
          pFilterInfo->DataCount *= 1L<<(pFilterInfo->ADCAvgNum+1); /* 0: average2, 1: average4, 2: average8, 3: average16 */
   12b88:	f8dc 3004 	ldr.w	r3, [ip, #4]
   12b8c:	fa03 f101 	lsl.w	r1, r3, r1
   12b90:	f8cc 1004 	str.w	r1, [ip, #4]
   12b94:	e7e2      	b.n	12b5c <AD5940_ClksCalculate+0x140>
   12b96:	bf00      	nop
   12b98:	0002e740 	.word	0x0002e740

00012b9c <AD5940_WriteReg>:
 * @param RegAddr: The register address.
 * @param RegData: The register data.
 * @return Return None.
**/
void AD5940_WriteReg(uint16_t RegAddr, uint32_t RegData)
{
   12b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#ifdef SEQUENCE_GENERATOR
  if(SeqGenDB.EngineStart == bTRUE)
   12b9e:	4f26      	ldr	r7, [pc, #152]	; (12c38 <AD5940_WriteReg+0x9c>)
   12ba0:	783b      	ldrb	r3, [r7, #0]
   12ba2:	2b01      	cmp	r3, #1
{
   12ba4:	4604      	mov	r4, r0
   12ba6:	460e      	mov	r6, r1
  if(SeqGenDB.EngineStart == bTRUE)
   12ba8:	d124      	bne.n	12bf4 <AD5940_WriteReg+0x58>
  if(RegAddr > 0x21ff)
   12baa:	f5b0 5f08 	cmp.w	r0, #8704	; 0x2200
   12bae:	d304      	bcc.n	12bba <AD5940_WriteReg+0x1e>
    SeqGenDB.LastError = AD5940ERR_ADDROR;  /* address out of range  */
   12bb0:	f06f 0304 	mvn.w	r3, #4
   12bb4:	61bb      	str	r3, [r7, #24]
#ifdef CHIPSEL_M355
    AD5940_D2DWriteReg(RegAddr, RegData);
#else
    AD5940_SPIWriteReg(RegAddr, RegData);
#endif
}
   12bb6:	b003      	add	sp, #12
   12bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(AD5940_SEQGenSearchReg(RegAddr, &RegIndex) == AD5940ERR_OK)
   12bba:	a901      	add	r1, sp, #4
   12bbc:	f7ff fe0e 	bl	127dc <AD5940_SEQGenSearchReg>
    AD5940_SEQGenInsert(SEQ_WR(RegAddr, RegData));
   12bc0:	05a5      	lsls	r5, r4, #22
   12bc2:	f005 45fe 	and.w	r5, r5, #2130706432	; 0x7f000000
   12bc6:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
   12bca:	431d      	orrs	r5, r3
   12bcc:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
  if(AD5940_SEQGenSearchReg(RegAddr, &RegIndex) == AD5940ERR_OK)
   12bd0:	b958      	cbnz	r0, 12bea <AD5940_WriteReg+0x4e>
    SeqGenDB.pRegInfo[RegIndex].RegValue = RegData;
   12bd2:	9a01      	ldr	r2, [sp, #4]
   12bd4:	693b      	ldr	r3, [r7, #16]
   12bd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   12bda:	f366 211f 	bfi	r1, r6, #8, #24
   12bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    AD5940_SEQGenInsert(SEQ_WR(RegAddr, RegData));
   12be2:	4628      	mov	r0, r5
   12be4:	f7ff fe30 	bl	12848 <AD5940_SEQGenInsert>
   12be8:	e7e5      	b.n	12bb6 <AD5940_WriteReg+0x1a>
    AD5940_SEQRegInfoInsert(RegAddr, RegData);
   12bea:	4631      	mov	r1, r6
   12bec:	4620      	mov	r0, r4
   12bee:	f7ff fe0d 	bl	1280c <AD5940_SEQRegInfoInsert>
   12bf2:	e7f6      	b.n	12be2 <AD5940_WriteReg+0x46>
  AD5940_CsClr();
   12bf4:	f016 fb72 	bl	292dc <AD5940_CsClr>
  AD5940_ReadWrite8B(SPICMD_SETADDR);
   12bf8:	2020      	movs	r0, #32
   12bfa:	f015 fcb5 	bl	28568 <AD5940_ReadWrite8B.isra.0>
  AD5940_ReadWrite16B(RegAddr);
   12bfe:	4620      	mov	r0, r4
   12c00:	f015 fc89 	bl	28516 <AD5940_ReadWrite16B>
  if(((RegAddr>=0x1000)&&(RegAddr<=0x3014)))
   12c04:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
  AD5940_CsSet();
   12c08:	f016 fb6c 	bl	292e4 <AD5940_CsSet>
  AD5940_CsClr();
   12c0c:	f016 fb66 	bl	292dc <AD5940_CsClr>
  AD5940_ReadWrite8B(SPICMD_WRITEREG);
   12c10:	202d      	movs	r0, #45	; 0x2d
   12c12:	f015 fca9 	bl	28568 <AD5940_ReadWrite8B.isra.0>
  if(((RegAddr>=0x1000)&&(RegAddr<=0x3014)))
   12c16:	b2a4      	uxth	r4, r4
   12c18:	f242 0314 	movw	r3, #8212	; 0x2014
   12c1c:	429c      	cmp	r4, r3
   12c1e:	d807      	bhi.n	12c30 <AD5940_WriteReg+0x94>
    AD5940_ReadWrite32B(RegData);
   12c20:	4630      	mov	r0, r6
   12c22:	f015 fc8a 	bl	2853a <AD5940_ReadWrite32B>
}
   12c26:	b003      	add	sp, #12
   12c28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  AD5940_CsSet();
   12c2c:	f016 bb5a 	b.w	292e4 <AD5940_CsSet>
    AD5940_ReadWrite16B(RegData);
   12c30:	b2b0      	uxth	r0, r6
   12c32:	f015 fc70 	bl	28516 <AD5940_ReadWrite16B>
   12c36:	e7f6      	b.n	12c26 <AD5940_WriteReg+0x8a>
   12c38:	20005538 	.word	0x20005538

00012c3c <AD5940_ReadReg>:
 *        Otherwise, read register value by SPI.
 * @param RegAddr: The register address.
 * @return Return register value.
**/
uint32_t AD5940_ReadReg(uint16_t RegAddr)
{
   12c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
#ifdef SEQUENCE_GENERATOR
  if(SeqGenDB.EngineStart == bTRUE)
   12c3e:	4d0f      	ldr	r5, [pc, #60]	; (12c7c <AD5940_ReadReg+0x40>)
   12c40:	782b      	ldrb	r3, [r5, #0]
   12c42:	2b01      	cmp	r3, #1
{
   12c44:	4604      	mov	r4, r0
  if(SeqGenDB.EngineStart == bTRUE)
   12c46:	d114      	bne.n	12c72 <AD5940_ReadReg+0x36>
  if(AD5940_SEQGenSearchReg(RegAddr, &RegIndex) != AD5940ERR_OK)
   12c48:	a901      	add	r1, sp, #4
   12c4a:	f7ff fdc7 	bl	127dc <AD5940_SEQGenSearchReg>
   12c4e:	b148      	cbz	r0, 12c64 <AD5940_ReadReg+0x28>
  *pRegData = AD5940_SPIReadReg(RegAddr);
   12c50:	4620      	mov	r0, r4
   12c52:	f015 fc94 	bl	2857e <AD5940_SPIReadReg>
   12c56:	4601      	mov	r1, r0
    AD5940_SEQRegInfoInsert(RegAddr, RegData);
   12c58:	4620      	mov	r0, r4
   12c5a:	f7ff fdd7 	bl	1280c <AD5940_SEQRegInfoInsert>
#ifdef CHIPSEL_M355
    return AD5940_D2DReadReg(RegAddr);
#else
    return AD5940_SPIReadReg(RegAddr);
#endif
}
   12c5e:	4608      	mov	r0, r1
   12c60:	b003      	add	sp, #12
   12c62:	bd30      	pop	{r4, r5, pc}
    RegData = SeqGenDB.pRegInfo[RegIndex].RegValue;
   12c64:	692b      	ldr	r3, [r5, #16]
   12c66:	9a01      	ldr	r2, [sp, #4]
   12c68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   12c6c:	f3c1 2117 	ubfx	r1, r1, #8, #24
    return AD5940_SEQReadReg(RegAddr);
   12c70:	e7f5      	b.n	12c5e <AD5940_ReadReg+0x22>
}
   12c72:	b003      	add	sp, #12
   12c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return AD5940_SPIReadReg(RegAddr);
   12c78:	f015 bc81 	b.w	2857e <AD5940_SPIReadReg>
   12c7c:	20005538 	.word	0x20005538

00012c80 <AD5940_Initialize>:
 * @brief Initialize AD5940. This function must be called whenever there is reset(Software Reset or Hardware reset or Power up) happened.
 *        This function is used to put AD5940 to correct state.
 * @return return None
**/
void AD5940_Initialize(void)
{
   12c80:	b530      	push	{r4, r5, lr}
   12c82:	b09d      	sub	sp, #116	; 0x74
  /* Write following registers with its data sequentially whenever there is a reset happened. */
  const struct
  {
    uint16_t reg_addr;
    uint32_t reg_data;
  }RegTable[]=
   12c84:	4915      	ldr	r1, [pc, #84]	; (12cdc <AD5940_Initialize+0x5c>)
   12c86:	2270      	movs	r2, #112	; 0x70
   12c88:	4668      	mov	r0, sp
   12c8a:	f01b f8a5 	bl	2ddd8 <memcpy>
    {0x2250, 0x103F},
    {0x22B0, 0x203C},
    {0x2230, 0xDE87A5A0},
  };
  //initialize global variables
  SeqGenDB.SeqLen = 0;
   12c8e:	4b14      	ldr	r3, [pc, #80]	; (12ce0 <AD5940_Initialize+0x60>)
   12c90:	2400      	movs	r4, #0
  SeqGenDB.RegCount = 0;
  SeqGenDB.LastError = AD5940ERR_OK;
   12c92:	e9c3 4405 	strd	r4, r4, [r3, #20]
  SeqGenDB.SeqLen = 0;
   12c96:	60dc      	str	r4, [r3, #12]
  SeqGenDB.EngineStart = bFALSE;
   12c98:	701c      	strb	r4, [r3, #0]
#ifndef CHIPSEL_M355
  AD5940_CsSet(); /* Pull high CS in case it's low */
   12c9a:	f016 fb23 	bl	292e4 <AD5940_CsSet>
#endif
  for(i=0; i<sizeof(RegTable)/sizeof(RegTable[0]); i++)
   12c9e:	466d      	mov	r5, sp
    AD5940_WriteReg(RegTable[i].reg_addr, RegTable[i].reg_data);
   12ca0:	6869      	ldr	r1, [r5, #4]
   12ca2:	8828      	ldrh	r0, [r5, #0]
  for(i=0; i<sizeof(RegTable)/sizeof(RegTable[0]); i++)
   12ca4:	3401      	adds	r4, #1
    AD5940_WriteReg(RegTable[i].reg_addr, RegTable[i].reg_data);
   12ca6:	f7ff ff79 	bl	12b9c <AD5940_WriteReg>
  for(i=0; i<sizeof(RegTable)/sizeof(RegTable[0]); i++)
   12caa:	2c0e      	cmp	r4, #14
   12cac:	f105 0508 	add.w	r5, r5, #8
   12cb0:	d1f6      	bne.n	12ca0 <AD5940_Initialize+0x20>
  i = AD5940_ReadReg(REG_AFECON_CHIPID);  
   12cb2:	f240 4004 	movw	r0, #1028	; 0x404
   12cb6:	f7ff ffc1 	bl	12c3c <AD5940_ReadReg>
  if(i == 0x5501)
   12cba:	f5a0 43aa 	sub.w	r3, r0, #21760	; 0x5500
   12cbe:	3b01      	subs	r3, #1
   12cc0:	2b01      	cmp	r3, #1
   12cc2:	d804      	bhi.n	12cce <AD5940_Initialize+0x4e>
    bIsS2silicon = bTRUE;
   12cc4:	4b07      	ldr	r3, [pc, #28]	; (12ce4 <AD5940_Initialize+0x64>)
   12cc6:	2201      	movs	r2, #1
  else if(i == 0x5502)  /* S3 chip-id is 0x5502. The is no difference with S2. */
    bIsS2silicon = bTRUE;
  else if(i == 0x5500)
    bIsS2silicon = bFALSE;
   12cc8:	701a      	strb	r2, [r3, #0]
  ADI_Print("This AD594x!\n");
#endif
  ADI_Print("Note: Current Silicon is %s\n", bIsS2silicon?"S2":"S1");
  ADI_Print("AD5940LIB Version:v%d.%d.%d\n", AD5940LIB_VER_MAJOR, AD5940LIB_VER_MINOR, AD5940LIB_VER_PATCH);
#endif
}
   12cca:	b01d      	add	sp, #116	; 0x74
   12ccc:	bd30      	pop	{r4, r5, pc}
  else if(i == 0x5500)
   12cce:	f5b0 4faa 	cmp.w	r0, #21760	; 0x5500
   12cd2:	d1fa      	bne.n	12cca <AD5940_Initialize+0x4a>
    bIsS2silicon = bFALSE;
   12cd4:	4b03      	ldr	r3, [pc, #12]	; (12ce4 <AD5940_Initialize+0x64>)
   12cd6:	2200      	movs	r2, #0
   12cd8:	e7f6      	b.n	12cc8 <AD5940_Initialize+0x48>
   12cda:	bf00      	nop
   12cdc:	0002e7ec 	.word	0x0002e7ec
   12ce0:	20005538 	.word	0x20005538
   12ce4:	20006b28 	.word	0x20006b28

00012ce8 <AD5940_HSTIACfgS>:
   @brief Initialize High speed TIA amplifier
   @param pHsTiaCfg: Pointer to configuration structure
   @return return none.
*/
AD5940Err AD5940_HSTIACfgS(HSTIACfg_Type *pHsTiaCfg)
{
   12ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tempreg;
  //Check parameters
  if(pHsTiaCfg == NULL) return AD5940ERR_NULLP;
   12cea:	4604      	mov	r4, r0
{
   12cec:	b085      	sub	sp, #20
  if(pHsTiaCfg == NULL) return AD5940ERR_NULLP;
   12cee:	2800      	cmp	r0, #0
   12cf0:	d047      	beq.n	12d82 <AD5940_HSTIACfgS+0x9a>
    /* Available parameter is 1k, 5k,...,160k, short, OPEN */
  if(pHsTiaCfg->HstiaDeRtia < HSTIADERTIA_1K)
   12cf2:	6903      	ldr	r3, [r0, #16]
   12cf4:	3b03      	subs	r3, #3
   12cf6:	2b08      	cmp	r3, #8
   12cf8:	d846      	bhi.n	12d88 <AD5940_HSTIACfgS+0xa0>
    return AD5940ERR_PARA;
  if(pHsTiaCfg->HstiaDeRtia > HSTIADERTIA_OPEN)
    return AD5940ERR_PARA;  /* Parameter is invalid */

  if(pHsTiaCfg->HstiaDeRload > HSTIADERLOAD_OPEN)
   12cfa:	6943      	ldr	r3, [r0, #20]
   12cfc:	2b05      	cmp	r3, #5
   12cfe:	d843      	bhi.n	12d88 <AD5940_HSTIACfgS+0xa0>
    return AD5940ERR_PARA;  /* Available parameter is OPEN, 0R,..., 100R */

  tempreg = 0;
  tempreg |= pHsTiaCfg->HstiaBias;
  AD5940_WriteReg(REG_AFE_HSTIACON, tempreg);
   12d00:	6801      	ldr	r1, [r0, #0]
   12d02:	f242 00fc 	movw	r0, #8444	; 0x20fc
   12d06:	f7ff ff49 	bl	12b9c <AD5940_WriteReg>
  /* HSRTIACON */
  /* Calculate CTIA value */
  tempreg = pHsTiaCfg->HstiaCtia << BITP_AFE_HSRTIACON_CTIACON;
  tempreg |= pHsTiaCfg->HstiaRtiaSel;
   12d0a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   12d0e:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
  if(pHsTiaCfg->DiodeClose == bTRUE)
   12d12:	7b23      	ldrb	r3, [r4, #12]
   12d14:	2b01      	cmp	r3, #1
    tempreg |= BITM_AFE_HSRTIACON_TIASW6CON; /* Close switch 6 */
   12d16:	bf08      	it	eq
   12d18:	f041 0110 	orreq.w	r1, r1, #16
  AD5940_WriteReg(REG_AFE_HSRTIACON, tempreg);
   12d1c:	f242 00f0 	movw	r0, #8432	; 0x20f0
   12d20:	f7ff ff3c 	bl	12b9c <AD5940_WriteReg>
  /* DExRESCON */
  __AD5940_SetDExRTIA(0, pHsTiaCfg->HstiaDeRtia, pHsTiaCfg->HstiaDeRload);
   12d24:	e9d4 3604 	ldrd	r3, r6, [r4, #16]
  if(DeRtia >= HSTIADERTIA_OPEN)
   12d28:	2b0a      	cmp	r3, #10
   12d2a:	d828      	bhi.n	12d7e <AD5940_HSTIACfgS+0x96>
  else if(DeRtia >= HSTIADERTIA_1K)
   12d2c:	2b02      	cmp	r3, #2
   12d2e:	d90a      	bls.n	12d46 <AD5940_HSTIACfgS+0x5e>
    tempreg = (DeRtia - 3 + 11) << 3;
   12d30:	f103 0108 	add.w	r1, r3, #8
      tempreg = (uint32_t)(DeRtiaTable[DeRtia][DeRload])<<3;
   12d34:	00c9      	lsls	r1, r1, #3
    AD5940_WriteReg(REG_AFE_DE0RESCON, tempreg);
   12d36:	f242 00f8 	movw	r0, #8440	; 0x20f8
   12d3a:	4331      	orrs	r1, r6
   12d3c:	f7ff ff2e 	bl	12b9c <AD5940_WriteReg>
#ifdef CHIPSEL_M355
  __AD5940_SetDExRTIA(1, pHsTiaCfg->HstiaDe1Rtia, pHsTiaCfg->HstiaDe1Rload);
#endif

  /* Done */
  return AD5940ERR_OK;
   12d40:	2000      	movs	r0, #0
}
   12d42:	b005      	add	sp, #20
   12d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    const uint8_t DeRtiaTable[3][5] = 
   12d46:	4a12      	ldr	r2, [pc, #72]	; (12d90 <AD5940_HSTIACfgS+0xa8>)
   12d48:	466c      	mov	r4, sp
   12d4a:	f102 0708 	add.w	r7, r2, #8
   12d4e:	6810      	ldr	r0, [r2, #0]
   12d50:	6851      	ldr	r1, [r2, #4]
   12d52:	4625      	mov	r5, r4
   12d54:	c503      	stmia	r5!, {r0, r1}
   12d56:	3208      	adds	r2, #8
   12d58:	42ba      	cmp	r2, r7
   12d5a:	462c      	mov	r4, r5
   12d5c:	d1f7      	bne.n	12d4e <AD5940_HSTIACfgS+0x66>
   12d5e:	6810      	ldr	r0, [r2, #0]
   12d60:	8891      	ldrh	r1, [r2, #4]
   12d62:	7992      	ldrb	r2, [r2, #6]
   12d64:	6028      	str	r0, [r5, #0]
    if(DeRload < HSTIADERLOAD_OPEN)
   12d66:	2e04      	cmp	r6, #4
    const uint8_t DeRtiaTable[3][5] = 
   12d68:	80a9      	strh	r1, [r5, #4]
   12d6a:	71aa      	strb	r2, [r5, #6]
    if(DeRload < HSTIADERLOAD_OPEN)
   12d6c:	d807      	bhi.n	12d7e <AD5940_HSTIACfgS+0x96>
      tempreg = (uint32_t)(DeRtiaTable[DeRtia][DeRload])<<3;
   12d6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12d72:	aa04      	add	r2, sp, #16
   12d74:	4413      	add	r3, r2
   12d76:	4433      	add	r3, r6
   12d78:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   12d7c:	e7da      	b.n	12d34 <AD5940_HSTIACfgS+0x4c>
    tempreg = 0x1f << 3;  /* bit field HPTIRES03CON[7:3] */
   12d7e:	21f8      	movs	r1, #248	; 0xf8
   12d80:	e7d9      	b.n	12d36 <AD5940_HSTIACfgS+0x4e>
  if(pHsTiaCfg == NULL) return AD5940ERR_NULLP;
   12d82:	f06f 0002 	mvn.w	r0, #2
   12d86:	e7dc      	b.n	12d42 <AD5940_HSTIACfgS+0x5a>
    return AD5940ERR_PARA;
   12d88:	f06f 0001 	mvn.w	r0, #1
   12d8c:	e7d9      	b.n	12d42 <AD5940_HSTIACfgS+0x5a>
   12d8e:	bf00      	nop
   12d90:	0002e85c 	.word	0x0002e85c

00012d94 <AD5940_WGFreqWordCal>:
   @param SinFreqHz : Target frequency in Hz unit.
   @param WGClock: Waveform generator clock frequency in Hz unit. The clock is sourced from system clock, default value is 16MHz HFOSC.
   @return return none.
*/
uint32_t AD5940_WGFreqWordCal(float SinFreqHz, float WGClock)
{
   12d94:	b570      	push	{r4, r5, r6, lr}
  uint32_t temp;
  uint32_t __BITWIDTH_WGFCW = 26;
  if(bIsS2silicon == bTRUE)
   12d96:	4b19      	ldr	r3, [pc, #100]	; (12dfc <AD5940_WGFreqWordCal+0x68>)
   12d98:	781b      	ldrb	r3, [r3, #0]
{
   12d9a:	460d      	mov	r5, r1
    __BITWIDTH_WGFCW = 30;
   12d9c:	2b01      	cmp	r3, #1
{
   12d9e:	4606      	mov	r6, r0
  if(WGClock == 0) return 0;
   12da0:	f04f 0100 	mov.w	r1, #0
   12da4:	4628      	mov	r0, r5
    __BITWIDTH_WGFCW = 30;
   12da6:	bf14      	ite	ne
   12da8:	241a      	movne	r4, #26
   12daa:	241e      	moveq	r4, #30
  if(WGClock == 0) return 0;
   12dac:	f7ee f968 	bl	1080 <__aeabi_fcmpeq>
   12db0:	bb08      	cbnz	r0, 12df6 <AD5940_WGFreqWordCal+0x62>
  temp = (uint32_t)(SinFreqHz*(1LL<<__BITWIDTH_WGFCW)/WGClock + 0.5f);
   12db2:	2001      	movs	r0, #1
   12db4:	f1a4 0120 	sub.w	r1, r4, #32
   12db8:	f1c4 0320 	rsb	r3, r4, #32
   12dbc:	fa20 f303 	lsr.w	r3, r0, r3
   12dc0:	fa00 f101 	lsl.w	r1, r0, r1
   12dc4:	4319      	orrs	r1, r3
   12dc6:	40a0      	lsls	r0, r4
   12dc8:	f7ed ff88 	bl	cdc <__aeabi_l2f>
   12dcc:	4631      	mov	r1, r6
   12dce:	f7ed ffc3 	bl	d58 <__aeabi_fmul>
   12dd2:	4629      	mov	r1, r5
   12dd4:	f7ee f874 	bl	ec0 <__aeabi_fdiv>
   12dd8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   12ddc:	f7ed feb4 	bl	b48 <__addsf3>
   12de0:	f7ee f9a6 	bl	1130 <__aeabi_f2uiz>
  if(temp > ((__BITWIDTH_WGFCW == 26)?0xfffff:0xffffff))
   12de4:	4b06      	ldr	r3, [pc, #24]	; (12e00 <AD5940_WGFreqWordCal+0x6c>)
   12de6:	2c1a      	cmp	r4, #26
   12de8:	bf18      	it	ne
   12dea:	f06f 437f 	mvnne.w	r3, #4278190080	; 0xff000000
   12dee:	4298      	cmp	r0, r3
   12df0:	bf28      	it	cs
   12df2:	4618      	movcs	r0, r3
    temp = (__BITWIDTH_WGFCW == 26)?0xfffff:0xffffff;
  
  return temp;
}
   12df4:	bd70      	pop	{r4, r5, r6, pc}
  if(WGClock == 0) return 0;
   12df6:	2000      	movs	r0, #0
   12df8:	e7fc      	b.n	12df4 <AD5940_WGFreqWordCal+0x60>
   12dfa:	bf00      	nop
   12dfc:	20006b28 	.word	0x20006b28
   12e00:	000fffff 	.word	0x000fffff

00012e04 <__AD5940_TakeMeasurement>:
/**
 * @brief Turn on ADC to sample one SINC2 data.
 * @return return ADCCode.
*/
static uint32_t __AD5940_TakeMeasurement(int32_t *time_out)
{
   12e04:	b510      	push	{r4, lr}
   12e06:	4604      	mov	r4, r0
  uint32_t ADCCode = 0;
  AD5940_INTCClrFlag(AFEINTSRC_SINC2RDY);
   12e08:	2004      	movs	r0, #4
   12e0a:	f016 f9ec 	bl	291e6 <AD5940_INTCClrFlag>
  AD5940_AFECtrlS(AFECTRL_ADCCNV|AFECTRL_SINC2NOTCH, bTRUE);/* Start conversion */
   12e0e:	4810      	ldr	r0, [pc, #64]	; (12e50 <__AD5940_TakeMeasurement+0x4c>)
   12e10:	2101      	movs	r1, #1
   12e12:	f015 fc9a 	bl	2874a <AD5940_AFECtrlS>
  do
  {
    AD5940_Delay10us(1);  /* Delay 10us */
   12e16:	2001      	movs	r0, #1
   12e18:	f016 fa59 	bl	292ce <AD5940_Delay10us>
    if(AD5940_INTCTestFlag(AFEINTC_1,AFEINTSRC_SINC2RDY))
   12e1c:	2104      	movs	r1, #4
   12e1e:	2001      	movs	r0, #1
   12e20:	f016 f9e6 	bl	291f0 <AD5940_INTCTestFlag>
   12e24:	b150      	cbz	r0, 12e3c <__AD5940_TakeMeasurement+0x38>
      rd = AD5940_ReadReg(REG_AFE_SINC2DAT);
   12e26:	f44f 5002 	mov.w	r0, #8320	; 0x2080
   12e2a:	f7ff ff07 	bl	12c3c <AD5940_ReadReg>
   12e2e:	4604      	mov	r4, r0
        break;
    }
    if(*time_out != -1)
      (*time_out)--;	
  }while(*time_out != 0);
  AD5940_AFECtrlS(AFECTRL_ADCCNV|AFECTRL_SINC2NOTCH, bFALSE);/* Stop conversion */
   12e30:	4807      	ldr	r0, [pc, #28]	; (12e50 <__AD5940_TakeMeasurement+0x4c>)
   12e32:	2100      	movs	r1, #0
   12e34:	f015 fc89 	bl	2874a <AD5940_AFECtrlS>
  return ADCCode;
}
   12e38:	4620      	mov	r0, r4
   12e3a:	bd10      	pop	{r4, pc}
    if(*time_out != -1)
   12e3c:	6823      	ldr	r3, [r4, #0]
   12e3e:	1c5a      	adds	r2, r3, #1
   12e40:	d0e9      	beq.n	12e16 <__AD5940_TakeMeasurement+0x12>
      (*time_out)--;	
   12e42:	3b01      	subs	r3, #1
   12e44:	6023      	str	r3, [r4, #0]
  }while(*time_out != 0);
   12e46:	2b00      	cmp	r3, #0
   12e48:	d1e5      	bne.n	12e16 <__AD5940_TakeMeasurement+0x12>
  uint32_t ADCCode = 0;
   12e4a:	461c      	mov	r4, r3
   12e4c:	e7f0      	b.n	12e30 <__AD5940_TakeMeasurement+0x2c>
   12e4e:	bf00      	nop
   12e50:	00010100 	.word	0x00010100

00012e54 <AD5940_LPRtiaCal>:
 * @param pResult:  Pointer to a variable that used to store result. 
 *                  If bPolarResult in structure is set, then use type fImpPol_Type otherwise use fImpCar_Type. 
 * @return AD5940ERR_OK if succeed.
**/
AD5940Err AD5940_LPRtiaCal(LPRTIACal_Type *pCalCfg, void *pResult)
{
   12e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e58:	b0eb      	sub	sp, #428	; 0x1ac

  float ExcitVolt; /* Excitation voltage, unit is mV */
  uint32_t RtiaVal;
  /* RTIA value table when RLOAD set to 100Ohm */
  uint32_t const LpRtiaTable[]={0,110,1000,2000,3000,4000,6000,8000,10000,12000,16000,20000,24000,30000,32000,40000,48000,64000,85000,96000,100000,120000,128000,160000,196000,256000,512000};
  float const ADCPGAGainTable[] = {1, 1.5, 2, 4, 9};
   12e5a:	4fae      	ldr	r7, [pc, #696]	; (13114 <AD5940_LPRtiaCal+0x2c0>)
{
   12e5c:	9101      	str	r1, [sp, #4]
  uint32_t const LpRtiaTable[]={0,110,1000,2000,3000,4000,6000,8000,10000,12000,16000,20000,24000,30000,32000,40000,48000,64000,85000,96000,100000,120000,128000,160000,196000,256000,512000};
   12e5e:	226c      	movs	r2, #108	; 0x6c
   12e60:	49ad      	ldr	r1, [pc, #692]	; (13118 <AD5940_LPRtiaCal+0x2c4>)
{
   12e62:	4605      	mov	r5, r0
  uint32_t const LpRtiaTable[]={0,110,1000,2000,3000,4000,6000,8000,10000,12000,16000,20000,24000,30000,32000,40000,48000,64000,85000,96000,100000,120000,128000,160000,196000,256000,512000};
   12e64:	a833      	add	r0, sp, #204	; 0xcc
   12e66:	f01a ffb7 	bl	2ddd8 <memcpy>
  float const ADCPGAGainTable[] = {1, 1.5, 2, 4, 9};
   12e6a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   12e6c:	ac0f      	add	r4, sp, #60	; 0x3c
   12e6e:	4626      	mov	r6, r4
   12e70:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   12e72:	683b      	ldr	r3, [r7, #0]
   12e74:	6033      	str	r3, [r6, #0]
  uint32_t ADCPgaGainRtia, ADCPgaGainRcal;
  float GainRatio;

  iImpCar_Type DftRcal, DftRtia;

  if(pCalCfg == NULL)  return AD5940ERR_NULLP;  /* Parameters illegal */
   12e76:	2d00      	cmp	r5, #0
   12e78:	f000 82fc 	beq.w	13474 <AD5940_LPRtiaCal+0x620>
  
  if(pCalCfg->fRcal == 0)
   12e7c:	f8d5 a004 	ldr.w	sl, [r5, #4]
   12e80:	2100      	movs	r1, #0
   12e82:	4650      	mov	r0, sl
   12e84:	f7ee f8fc 	bl	1080 <__aeabi_fcmpeq>
   12e88:	2800      	cmp	r0, #0
   12e8a:	f040 82f0 	bne.w	1346e <AD5940_LPRtiaCal+0x61a>
    return AD5940ERR_PARA;
  if(pCalCfg->LpTiaRtia > LPTIARTIA_512K)
   12e8e:	69af      	ldr	r7, [r5, #24]
    return AD5940ERR_PARA;
  if(pCalCfg->LpTiaRtia == LPTIARTIA_OPEN)
   12e90:	1e7b      	subs	r3, r7, #1
   12e92:	2b19      	cmp	r3, #25
   12e94:	f200 82eb 	bhi.w	1346e <AD5940_LPRtiaCal+0x61a>
    return AD5940ERR_PARA; /* Not supported now. By setting RTIA to open and set corresponding switches can calibrate external RTIA */
  if(pResult == NULL)
   12e98:	9b01      	ldr	r3, [sp, #4]
   12e9a:	2b00      	cmp	r3, #0
   12e9c:	f000 82ea 	beq.w	13474 <AD5940_LPRtiaCal+0x620>
      return AD5940ERR_NULLP;

  if(pCalCfg->AdcClkFreq > (32000000*0.8))
   12ea0:	499e      	ldr	r1, [pc, #632]	; (1311c <AD5940_LPRtiaCal+0x2c8>)
   12ea2:	68e8      	ldr	r0, [r5, #12]
   12ea4:	f7ee f914 	bl	10d0 <__aeabi_fcmpgt>
    bADCClk32MHzMode = bTRUE;   /* Clock frequency is high. */
  if(pCalCfg->fFreq == 0.0f)    /* Frequency is zero means we calibrate RTIA at DC. */
   12ea8:	682b      	ldr	r3, [r5, #0]
   12eaa:	9303      	str	r3, [sp, #12]
  if(pCalCfg->AdcClkFreq > (32000000*0.8))
   12eac:	1e06      	subs	r6, r0, #0
    bDCMode = bTRUE;
  /* Init two pointers */
  pSWCfg = &hs_loop.SWMatCfg;
  pADCBaseCfg = &dsp_cfg.ADCBaseCfg;
  /* Calculate the excitation voltage we should use based on RCAL/Rtia */
  RtiaVal = LpRtiaTable[pCalCfg->LpTiaRtia];
   12eae:	ab6a      	add	r3, sp, #424	; 0x1a8
 /** @cond */
  #define MAXVOLT_P2P 1400  /* Maximum peak to peak voltage 1200mV for ADuCM355. */  
                            /* Maximum peak2peak voltage for AD5940 10kOhm RCAL is 1400mV */
  #define __MAXVOLT_AMP_CODE  (MAXVOLT_P2P*2047L/2200)
 /** @endcond */
  ExcitVolt = 2000*0.8*pCalCfg->fRcal/RtiaVal;
   12eb0:	4650      	mov	r0, sl
  if(pCalCfg->AdcClkFreq > (32000000*0.8))
   12eb2:	bf18      	it	ne
   12eb4:	2601      	movne	r6, #1
  RtiaVal = LpRtiaTable[pCalCfg->LpTiaRtia];
   12eb6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
  ExcitVolt = 2000*0.8*pCalCfg->fRcal/RtiaVal;
   12eba:	f7ed fad5 	bl	468 <__aeabi_f2d>
   12ebe:	4b98      	ldr	r3, [pc, #608]	; (13120 <AD5940_LPRtiaCal+0x2cc>)
  RtiaVal = LpRtiaTable[pCalCfg->LpTiaRtia];
   12ec0:	f857 bcdc 	ldr.w	fp, [r7, #-220]
  ExcitVolt = 2000*0.8*pCalCfg->fRcal/RtiaVal;
   12ec4:	2200      	movs	r2, #0
   12ec6:	f7ed fb27 	bl	518 <__aeabi_dmul>
   12eca:	4680      	mov	r8, r0
   12ecc:	4658      	mov	r0, fp
   12ece:	4689      	mov	r9, r1
   12ed0:	f7ed faa8 	bl	424 <__aeabi_ui2d>
   12ed4:	4602      	mov	r2, r0
   12ed6:	460b      	mov	r3, r1
   12ed8:	4640      	mov	r0, r8
   12eda:	4649      	mov	r1, r9
   12edc:	f7ed fc46 	bl	76c <__aeabi_ddiv>
   12ee0:	f7ed fddc 	bl	a9c <__aeabi_d2f>
  WgAmpWord = ((uint32_t)(ExcitVolt/2200*2047*2)+1)>>1; /* Assign value with rounding (0.5 LSB error) */
   12ee4:	498f      	ldr	r1, [pc, #572]	; (13124 <AD5940_LPRtiaCal+0x2d0>)
   12ee6:	f7ed ffeb 	bl	ec0 <__aeabi_fdiv>
   12eea:	498f      	ldr	r1, [pc, #572]	; (13128 <AD5940_LPRtiaCal+0x2d4>)
   12eec:	f7ed ff34 	bl	d58 <__aeabi_fmul>
   12ef0:	4601      	mov	r1, r0
   12ef2:	f7ed fe29 	bl	b48 <__addsf3>
   12ef6:	f7ee f91b 	bl	1130 <__aeabi_f2uiz>
   12efa:	1c47      	adds	r7, r0, #1
   12efc:	087f      	lsrs	r7, r7, #1
  if(WgAmpWord > __MAXVOLT_AMP_CODE)
   12efe:	f240 5016 	movw	r0, #1302	; 0x516
   12f02:	4287      	cmp	r7, r0
   12f04:	bf28      	it	cs
   12f06:	4607      	movcs	r7, r0
   * Determine the best ADC PGA gain for both RCAL and RTIA voltage measurement.
  */
  {
    float RtiaVolt, RcalVolt, temp;
    ExcitVolt = WgAmpWord*2000.0f/2047; /* 2000mVpp -->ExcitVolt in Peak to Peak unit */
    RtiaVolt = ExcitVolt/(pCalCfg->fRcal + 100)*RtiaVal;
   12f08:	4658      	mov	r0, fp
   12f0a:	f7ed fecd 	bl	ca8 <__aeabi_ui2f>
   12f0e:	4681      	mov	r9, r0
    ExcitVolt = WgAmpWord*2000.0f/2047; /* 2000mVpp -->ExcitVolt in Peak to Peak unit */
   12f10:	4638      	mov	r0, r7
   12f12:	f7ed fec9 	bl	ca8 <__aeabi_ui2f>
   12f16:	4985      	ldr	r1, [pc, #532]	; (1312c <AD5940_LPRtiaCal+0x2d8>)
   12f18:	f7ed ff1e 	bl	d58 <__aeabi_fmul>
   12f1c:	4982      	ldr	r1, [pc, #520]	; (13128 <AD5940_LPRtiaCal+0x2d4>)
   12f1e:	f7ed ffcf 	bl	ec0 <__aeabi_fdiv>
    RtiaVolt = ExcitVolt/(pCalCfg->fRcal + 100)*RtiaVal;
   12f22:	4983      	ldr	r1, [pc, #524]	; (13130 <AD5940_LPRtiaCal+0x2dc>)
    ExcitVolt = WgAmpWord*2000.0f/2047; /* 2000mVpp -->ExcitVolt in Peak to Peak unit */
   12f24:	4680      	mov	r8, r0
    RtiaVolt = ExcitVolt/(pCalCfg->fRcal + 100)*RtiaVal;
   12f26:	4650      	mov	r0, sl
   12f28:	f7ed fe0e 	bl	b48 <__addsf3>
   12f2c:	4601      	mov	r1, r0
   12f2e:	4640      	mov	r0, r8
   12f30:	f7ed ffc6 	bl	ec0 <__aeabi_fdiv>
   12f34:	4649      	mov	r1, r9
   12f36:	f7ed ff0f 	bl	d58 <__aeabi_fmul>
    RcalVolt = RtiaVolt/RtiaVal*pCalCfg->fRcal;
   12f3a:	4649      	mov	r1, r9
    RtiaVolt = ExcitVolt/(pCalCfg->fRcal + 100)*RtiaVal;
   12f3c:	4680      	mov	r8, r0
    RcalVolt = RtiaVolt/RtiaVal*pCalCfg->fRcal;
   12f3e:	f7ed ffbf 	bl	ec0 <__aeabi_fdiv>
   12f42:	4651      	mov	r1, sl
   12f44:	f7ed ff08 	bl	d58 <__aeabi_fmul>
   12f48:	4601      	mov	r1, r0
    /* The input range of ADC is 1.5Vp, we calculate how much gain we need */
    temp = 3000.0f/RcalVolt;
   12f4a:	487a      	ldr	r0, [pc, #488]	; (13134 <AD5940_LPRtiaCal+0x2e0>)
   12f4c:	f7ed ffb8 	bl	ec0 <__aeabi_fdiv>
    if(temp >= 9.0f)  ADCPgaGainRcal = ADCPGA_9;
   12f50:	4979      	ldr	r1, [pc, #484]	; (13138 <AD5940_LPRtiaCal+0x2e4>)
    temp = 3000.0f/RcalVolt;
   12f52:	4681      	mov	r9, r0
    if(temp >= 9.0f)  ADCPgaGainRcal = ADCPGA_9;
   12f54:	f7ee f8b2 	bl	10bc <__aeabi_fcmpge>
   12f58:	2800      	cmp	r0, #0
   12f5a:	f040 81c4 	bne.w	132e6 <AD5940_LPRtiaCal+0x492>
    else if(temp >= 4.0f) ADCPgaGainRcal = ADCPGA_4;
   12f5e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
   12f62:	4648      	mov	r0, r9
   12f64:	f7ee f8aa 	bl	10bc <__aeabi_fcmpge>
   12f68:	2800      	cmp	r0, #0
   12f6a:	f040 81bf 	bne.w	132ec <AD5940_LPRtiaCal+0x498>
    else if(temp >= 2.0f) ADCPgaGainRcal = ADCPGA_2;
   12f6e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12f72:	4648      	mov	r0, r9
   12f74:	f7ee f8a2 	bl	10bc <__aeabi_fcmpge>
   12f78:	2800      	cmp	r0, #0
   12f7a:	f040 81ba 	bne.w	132f2 <AD5940_LPRtiaCal+0x49e>
    else if(temp >= 1.5f) ADCPgaGainRcal = ADCPGA_1P5;
   12f7e:	4648      	mov	r0, r9
   12f80:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
   12f84:	f7ee f89a 	bl	10bc <__aeabi_fcmpge>
   12f88:	f1b0 0900 	subs.w	r9, r0, #0
   12f8c:	bf18      	it	ne
   12f8e:	f04f 0901 	movne.w	r9, #1
    else ADCPgaGainRcal = ADCPGA_1;
    temp = 3000.0f/RtiaVolt;
   12f92:	4641      	mov	r1, r8
   12f94:	4867      	ldr	r0, [pc, #412]	; (13134 <AD5940_LPRtiaCal+0x2e0>)
   12f96:	f7ed ff93 	bl	ec0 <__aeabi_fdiv>
    if(temp >= 9.0f)  ADCPgaGainRtia = ADCPGA_9;
   12f9a:	4967      	ldr	r1, [pc, #412]	; (13138 <AD5940_LPRtiaCal+0x2e4>)
    temp = 3000.0f/RtiaVolt;
   12f9c:	4680      	mov	r8, r0
    if(temp >= 9.0f)  ADCPgaGainRtia = ADCPGA_9;
   12f9e:	f7ee f88d 	bl	10bc <__aeabi_fcmpge>
   12fa2:	2800      	cmp	r0, #0
   12fa4:	f040 81a8 	bne.w	132f8 <AD5940_LPRtiaCal+0x4a4>
    else if(temp >= 4.0f) ADCPgaGainRtia = ADCPGA_4;
   12fa8:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
   12fac:	4640      	mov	r0, r8
   12fae:	f7ee f885 	bl	10bc <__aeabi_fcmpge>
   12fb2:	2800      	cmp	r0, #0
   12fb4:	f040 81a3 	bne.w	132fe <AD5940_LPRtiaCal+0x4aa>
    else if(temp >= 2.0f) ADCPgaGainRtia = ADCPGA_2;
   12fb8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12fbc:	4640      	mov	r0, r8
   12fbe:	f7ee f87d 	bl	10bc <__aeabi_fcmpge>
   12fc2:	2800      	cmp	r0, #0
   12fc4:	f040 819e 	bne.w	13304 <AD5940_LPRtiaCal+0x4b0>
    else if(temp >= 1.5f) ADCPgaGainRtia = ADCPGA_1P5;
   12fc8:	4640      	mov	r0, r8
   12fca:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
   12fce:	f7ee f875 	bl	10bc <__aeabi_fcmpge>
   12fd2:	f1b0 0800 	subs.w	r8, r0, #0
   12fd6:	bf18      	it	ne
   12fd8:	f04f 0801 	movne.w	r8, #1
    else ADCPgaGainRtia = ADCPGA_1;
    GainRatio = ADCPGAGainTable[ADCPgaGainRtia]/ADCPGAGainTable[ADCPgaGainRcal];
   12fdc:	f854 1029 	ldr.w	r1, [r4, r9, lsl #2]
   12fe0:	f854 0028 	ldr.w	r0, [r4, r8, lsl #2]
   12fe4:	f7ed ff6c 	bl	ec0 <__aeabi_fdiv>
   12fe8:	9004      	str	r0, [sp, #16]
  }
  reg_afecon = AD5940_ReadReg(REG_AFE_AFECON);
   12fea:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   12fee:	f7ff fe25 	bl	12c3c <AD5940_ReadReg>
   12ff2:	9005      	str	r0, [sp, #20]
    tempreg = AD5940_ReadReg(REG_INTC_INTCSEL1);
   12ff4:	f243 000c 	movw	r0, #12300	; 0x300c
   12ff8:	f7ff fe20 	bl	12c3c <AD5940_ReadReg>
  /* INTC configuration */
  INTCCfg = AD5940_INTCGetCfg(AFEINTC_1);
  AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_DFTRDY|AFEINTSRC_SINC2RDY, bTRUE); /* Enable SINC2 Interrupt in INTC1 */
   12ffc:	2201      	movs	r2, #1
   12ffe:	2106      	movs	r1, #6
    tempreg = AD5940_ReadReg(REG_INTC_INTCSEL1);
   13000:	9002      	str	r0, [sp, #8]
  AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_DFTRDY|AFEINTSRC_SINC2RDY, bTRUE); /* Enable SINC2 Interrupt in INTC1 */
   13002:	4610      	mov	r0, r2
   13004:	f016 f8d7 	bl	291b6 <AD5940_INTCCfg>
  AD5940_INTCClrFlag(AFEINTSRC_ALLINT);
   13008:	f04f 30ff 	mov.w	r0, #4294967295

  AD5940_AFECtrlS(AFECTRL_ALL, bFALSE);  /* Init all to disable state */
  /* Configure reference system */
	__AD5940_ReferenceON();
	/* Configure DSP */
	AD5940_StructInit(&dsp_cfg, sizeof(dsp_cfg));
   1300c:	ac23      	add	r4, sp, #140	; 0x8c
  AD5940_INTCClrFlag(AFEINTSRC_ALLINT);
   1300e:	f016 f8ea 	bl	291e6 <AD5940_INTCClrFlag>
  AD5940_AFECtrlS(AFECTRL_ALL, bFALSE);  /* Init all to disable state */
   13012:	484a      	ldr	r0, [pc, #296]	; (1313c <AD5940_LPRtiaCal+0x2e8>)
   13014:	2100      	movs	r1, #0
   13016:	f015 fb98 	bl	2874a <AD5940_AFECtrlS>
	__AD5940_ReferenceON();
   1301a:	f015 fc1d 	bl	28858 <__AD5940_ReferenceON>
	AD5940_StructInit(&dsp_cfg, sizeof(dsp_cfg));
   1301e:	2140      	movs	r1, #64	; 0x40
   13020:	4620      	mov	r0, r4
   13022:	f015 fad3 	bl	285cc <AD5940_StructInit>
	dsp_cfg.ADCFilterCfg.ADCAvgNum = ADCAVGNUM_16;  /* Don't care because it's disabled */
   13026:	2303      	movs	r3, #3
   13028:	6163      	str	r3, [r4, #20]
	dsp_cfg.ADCFilterCfg.ADCRate = bADCClk32MHzMode?ADCRATE_1P6MHZ:ADCRATE_800KHZ;
	dsp_cfg.ADCFilterCfg.ADCSinc2Osr = pCalCfg->ADCSinc2Osr;
   1302a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	dsp_cfg.ADCFilterCfg.ADCSinc3Osr = pCalCfg->ADCSinc3Osr;
	dsp_cfg.ADCFilterCfg.BpNotch = bTRUE;
	dsp_cfg.ADCFilterCfg.BpSinc3 = bFALSE;
	dsp_cfg.ADCFilterCfg.Sinc2NotchEnable = bTRUE;
	memcpy(&dsp_cfg.DftCfg, &pCalCfg->DftCfg, sizeof(pCalCfg->DftCfg));
   1302c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1302e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	dsp_cfg.ADCFilterCfg.ADCSinc2Osr = pCalCfg->ADCSinc2Osr;
   13030:	6123      	str	r3, [r4, #16]
	dsp_cfg.ADCFilterCfg.ADCSinc3Osr = pCalCfg->ADCSinc3Osr;
   13032:	6a2b      	ldr	r3, [r5, #32]
   13034:	60e3      	str	r3, [r4, #12]
	memcpy(&dsp_cfg.DftCfg, &pCalCfg->DftCfg, sizeof(pCalCfg->DftCfg));
   13036:	ab2d      	add	r3, sp, #180	; 0xb4
   13038:	c303      	stmia	r3!, {r0, r1}
	dsp_cfg.ADCFilterCfg.ADCRate = bADCClk32MHzMode?ADCRATE_1P6MHZ:ADCRATE_800KHZ;
   1303a:	f086 0601 	eor.w	r6, r6, #1
	memcpy(&dsp_cfg.DftCfg, &pCalCfg->DftCfg, sizeof(pCalCfg->DftCfg));
   1303e:	6b28      	ldr	r0, [r5, #48]	; 0x30
	dsp_cfg.ADCFilterCfg.ADCRate = bADCClk32MHzMode?ADCRATE_1P6MHZ:ADCRATE_800KHZ;
   13040:	61a6      	str	r6, [r4, #24]
	dsp_cfg.ADCFilterCfg.BpNotch = bTRUE;
   13042:	2601      	movs	r6, #1
	memcpy(&dsp_cfg.DftCfg, &pCalCfg->DftCfg, sizeof(pCalCfg->DftCfg));
   13044:	6018      	str	r0, [r3, #0]
	dsp_cfg.ADCFilterCfg.BpNotch = bTRUE;
   13046:	83a6      	strh	r6, [r4, #28]
	AD5940_DSPCfgS(&dsp_cfg);
   13048:	4620      	mov	r0, r4
	dsp_cfg.ADCFilterCfg.Sinc2NotchEnable = bTRUE;
   1304a:	77a6      	strb	r6, [r4, #30]
	AD5940_DSPCfgS(&dsp_cfg);
   1304c:	f015 fdcd 	bl	28bea <AD5940_DSPCfgS>
  /* Configure LP Loop */
  AD5940_StructInit(&lp_loop, sizeof(lp_loop));
   13050:	213c      	movs	r1, #60	; 0x3c
   13052:	a814      	add	r0, sp, #80	; 0x50
   13054:	f015 faba 	bl	285cc <AD5940_StructInit>
  /* Configure LP Amplifies(LPPA and LPTIA). We won't use LP-PA */
  lp_loop.LpDacCfg.LpdacSel = (pCalCfg->LpAmpSel  == LPAMP0)?LPDAC0:LPDAC1;
   13058:	692b      	ldr	r3, [r5, #16]
  lp_loop.LpDacCfg.LpDacSrc = LPDACSRC_WG;             	/* The LPDAC data comes from WG not MMR in this case */
  lp_loop.LpDacCfg.LpDacVbiasMux = LPDACVBIAS_6BIT;    	/* Connect Vbias signal to 6Bit LPDAC output */
  lp_loop.LpDacCfg.LpDacVzeroMux = LPDACVZERO_12BIT;   	/* Connect Vzero signal to 12bit LPDAC output */
  lp_loop.LpDacCfg.PowerEn = bTRUE;                    	/* Power up LPDAC */

  lp_loop.LpAmpCfg.LpAmpSel = pCalCfg->LpAmpSel;
   1305a:	931c      	str	r3, [sp, #112]	; 0x70
  lp_loop.LpDacCfg.LpdacSel = (pCalCfg->LpAmpSel  == LPAMP0)?LPDAC0:LPDAC1;
   1305c:	1e1a      	subs	r2, r3, #0
  lp_loop.LpAmpCfg.LpAmpPwrMod = pCalCfg->LpAmpPwrMod;  /* Set low power amplifiers to normal power mode */
   1305e:	69eb      	ldr	r3, [r5, #28]
   13060:	9320      	str	r3, [sp, #128]	; 0x80
  lp_loop.LpAmpCfg.LpPaPwrEn = bTRUE;                  	/* Enable LP PA(potential-stat amplifier) power */
   13062:	f240 1301 	movw	r3, #257	; 0x101
   13066:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  lp_loop.LpAmpCfg.LpTiaPwrEn = bTRUE;                	/* Enable LPTIA*/
  lp_loop.LpAmpCfg.LpTiaRload = LPTIARLOAD_100R;
   1306a:	f04f 0304 	mov.w	r3, #4
   1306e:	931e      	str	r3, [sp, #120]	; 0x78
  lp_loop.LpAmpCfg.LpTiaRtia = pCalCfg->LpTiaRtia;
   13070:	69ab      	ldr	r3, [r5, #24]
   13072:	931f      	str	r3, [sp, #124]	; 0x7c
  lp_loop.LpDacCfg.LpdacSel = (pCalCfg->LpAmpSel  == LPAMP0)?LPDAC0:LPDAC1;
   13074:	bf18      	it	ne
   13076:	2201      	movne	r2, #1
  lp_loop.LpAmpCfg.LpTiaRf = LPTIARF_OPEN;
  lp_loop.LpAmpCfg.LpTiaSW = LPTIASW(6)|LPTIASW(8)|(pCalCfg->bWithCtia==bTRUE?LPTIASW(5)/*|LPTIASW(9)*/:0);
   13078:	7d2b      	ldrb	r3, [r5, #20]
  lp_loop.LpDacCfg.LpDacRef = LPDACREF_2P5;            	/* Select internal 2.5V reference */
   1307a:	f04f 0a00 	mov.w	sl, #0
  lp_loop.LpDacCfg.LpDacSrc = LPDACSRC_WG;             	/* The LPDAC data comes from WG not MMR in this case */
   1307e:	e9cd 2614 	strd	r2, r6, [sp, #80]	; 0x50
  lp_loop.LpDacCfg.LpDacRef = LPDACREF_2P5;            	/* Select internal 2.5V reference */
   13082:	2211      	movs	r2, #17
  lp_loop.LpAmpCfg.LpTiaSW = LPTIASW(6)|LPTIASW(8)|(pCalCfg->bWithCtia==bTRUE?LPTIASW(5)/*|LPTIASW(9)*/:0);
   13084:	42b3      	cmp	r3, r6
  lp_loop.LpDacCfg.LpDacRef = LPDACREF_2P5;            	/* Select internal 2.5V reference */
   13086:	e9cd 2a18 	strd	r2, sl, [sp, #96]	; 0x60
  lp_loop.LpDacCfg.DataRst =bFALSE;                    	/* Do not keep DATA registers at reset status */
   1308a:	4a2d      	ldr	r2, [pc, #180]	; (13140 <AD5940_LPRtiaCal+0x2ec>)
   1308c:	921a      	str	r2, [sp, #104]	; 0x68
  lp_loop.LpAmpCfg.LpTiaSW = LPTIASW(6)|LPTIASW(8)|(pCalCfg->bWithCtia==bTRUE?LPTIASW(5)/*|LPTIASW(9)*/:0);
   1308e:	bf0c      	ite	eq
   13090:	f44f 73b0 	moveq.w	r3, #352	; 0x160
   13094:	f44f 73a0 	movne.w	r3, #320	; 0x140
  lp_loop.LpDacCfg.DacData6Bit = 32;                    /* middle scale value */
   13098:	2220      	movs	r2, #32
  AD5940_LPLoopCfgS(&lp_loop);
   1309a:	a814      	add	r0, sp, #80	; 0x50
  /* Configure HS Loop */
  AD5940_StructInit(&hs_loop, sizeof(hs_loop));
   1309c:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
  lp_loop.LpDacCfg.DacData6Bit = 32;                    /* middle scale value */
   130a0:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
  lp_loop.LpAmpCfg.LpTiaSW = LPTIASW(6)|LPTIASW(8)|(pCalCfg->bWithCtia==bTRUE?LPTIASW(5)/*|LPTIASW(9)*/:0);
   130a4:	9321      	str	r3, [sp, #132]	; 0x84
  lp_loop.LpDacCfg.LpDacVbiasMux = LPDACVBIAS_6BIT;    	/* Connect Vbias signal to 6Bit LPDAC output */
   130a6:	e9cd 6616 	strd	r6, r6, [sp, #88]	; 0x58
  lp_loop.LpAmpCfg.LpTiaRf = LPTIARF_OPEN;
   130aa:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
  AD5940_LPLoopCfgS(&lp_loop);
   130ae:	f015 fd0d 	bl	28acc <AD5940_LPLoopCfgS>
  AD5940_StructInit(&hs_loop, sizeof(hs_loop));
   130b2:	2170      	movs	r1, #112	; 0x70
   130b4:	4658      	mov	r0, fp
   130b6:	f015 fa89 	bl	285cc <AD5940_StructInit>
  /* Take care of HSTIA, we need to disconnect internal RTIA because it connects to Tswitch directly. */
	hs_loop.HsTiaCfg.DiodeClose = bFALSE;
  hs_loop.HsTiaCfg.HstiaBias = (pCalCfg->LpAmpSel  == LPAMP0)?HSTIABIAS_VZERO0:HSTIABIAS_VZERO1;
   130ba:	692a      	ldr	r2, [r5, #16]

  hs_loop.SWMatCfg.Dswitch = SWD_RCAL0|((pCalCfg->LpAmpSel  == LPAMP0)?SWD_SE0:SWD_SE1);
  hs_loop.SWMatCfg.Pswitch = SWP_RCAL0;
  hs_loop.SWMatCfg.Nswitch = SWN_RCAL1;
  hs_loop.SWMatCfg.Tswitch = SWT_TRTIA|SWT_RCAL1;
  if(bDCMode)
   130bc:	9803      	ldr	r0, [sp, #12]
	hs_loop.HsTiaCfg.DiodeClose = bFALSE;
   130be:	f88d a194 	strb.w	sl, [sp, #404]	; 0x194
  hs_loop.HsTiaCfg.HstiaBias = (pCalCfg->LpAmpSel  == LPAMP0)?HSTIABIAS_VZERO0:HSTIABIAS_VZERO1;
   130c2:	4552      	cmp	r2, sl
   130c4:	bf0c      	ite	eq
   130c6:	4632      	moveq	r2, r6
   130c8:	2202      	movne	r2, #2
   130ca:	9262      	str	r2, [sp, #392]	; 0x188
  hs_loop.HsTiaCfg.HstiaCtia = 31;
   130cc:	f04f 021f 	mov.w	r2, #31
  hs_loop.HsTiaCfg.HstiaDeRtia = HSTIADERTIA_OPEN;
   130d0:	f04f 0105 	mov.w	r1, #5
  hs_loop.HsTiaCfg.HstiaCtia = 31;
   130d4:	9264      	str	r2, [sp, #400]	; 0x190
  hs_loop.HsTiaCfg.HstiaDeRtia = HSTIADERTIA_OPEN;
   130d6:	f04f 020b 	mov.w	r2, #11
   130da:	e9cd 2166 	strd	r2, r1, [sp, #408]	; 0x198
  hs_loop.HsTiaCfg.HstiaDe1Rtia = HSTIADERTIA_OPEN;
   130de:	e9cd 2168 	strd	r2, r1, [sp, #416]	; 0x1a0
  hs_loop.HsDacCfg.HsDacUpdateRate = 255;  	/* Lowest for LPDAC */
   130e2:	f04f 02ff 	mov.w	r2, #255	; 0xff
   130e6:	9254      	str	r2, [sp, #336]	; 0x150
  hs_loop.SWMatCfg.Dswitch = SWD_RCAL0|((pCalCfg->LpAmpSel  == LPAMP0)?SWD_SE0:SWD_SE1);
   130e8:	bf0c      	ite	eq
   130ea:	2241      	moveq	r2, #65	; 0x41
   130ec:	2281      	movne	r2, #129	; 0x81
  hs_loop.SWMatCfg.Pswitch = SWP_RCAL0;
   130ee:	e9cd 264e 	strd	r2, r6, [sp, #312]	; 0x138
  hs_loop.SWMatCfg.Tswitch = SWT_TRTIA|SWT_RCAL1;
   130f2:	f44f 7300 	mov.w	r3, #512	; 0x200
   130f6:	f44f 6210 	mov.w	r2, #2304	; 0x900
  if(bDCMode)
   130fa:	2100      	movs	r1, #0
  hs_loop.HsDacCfg.HsDacGain = 0;  					/* Don't care */
   130fc:	e9cd aa52 	strd	sl, sl, [sp, #328]	; 0x148
  hs_loop.SWMatCfg.Tswitch = SWT_TRTIA|SWT_RCAL1;
   13100:	e9cd 3250 	strd	r3, r2, [sp, #320]	; 0x140
  hs_loop.HsTiaCfg.HstiaRtiaSel = HSTIARTIA_200;
   13104:	f8cd a18c 	str.w	sl, [sp, #396]	; 0x18c
  if(bDCMode)
   13108:	f7ed ffba 	bl	1080 <__aeabi_fcmpeq>
   1310c:	2800      	cmp	r0, #0
   1310e:	f000 8104 	beq.w	1331a <AD5940_LPRtiaCal+0x4c6>
   13112:	e017      	b.n	13144 <AD5940_LPRtiaCal+0x2f0>
   13114:	0002e8fc 	.word	0x0002e8fc
   13118:	0002e890 	.word	0x0002e890
   1311c:	4bc35000 	.word	0x4bc35000
   13120:	40990000 	.word	0x40990000
   13124:	45098000 	.word	0x45098000
   13128:	44ffe000 	.word	0x44ffe000
   1312c:	44fa0000 	.word	0x44fa0000
   13130:	42c80000 	.word	0x42c80000
   13134:	453b8000 	.word	0x453b8000
   13138:	41100000 	.word	0x41100000
   1313c:	0039ffe0 	.word	0x0039ffe0
   13140:	08000100 	.word	0x08000100
  {
    int32_t time_out = -1;    /* Always wait. */
   13144:	f04f 32ff 	mov.w	r2, #4294967295
    /* Configure WG */
    hs_loop.WgCfg.WgType = WGTYPE_MMR;
    hs_loop.WgCfg.WgCode = WgAmpWord;       /* Amplitude word is exactly the maximum DC voltage we could use */
    hs_loop.WgCfg.GainCalEn = bFALSE;		    /* We don't have calibration value for LPDAC, so we don't use it. */
    hs_loop.WgCfg.OffsetCalEn = bFALSE;
    AD5940_HSLoopCfgS(&hs_loop);
   13148:	4658      	mov	r0, fp
    int32_t time_out = -1;    /* Always wait. */
   1314a:	920d      	str	r2, [sp, #52]	; 0x34
    hs_loop.WgCfg.WgCode = WgAmpWord;       /* Amplitude word is exactly the maximum DC voltage we could use */
   1314c:	9761      	str	r7, [sp, #388]	; 0x184
    hs_loop.WgCfg.WgType = WGTYPE_MMR;
   1314e:	f8cd a154 	str.w	sl, [sp, #340]	; 0x154
    hs_loop.WgCfg.GainCalEn = bFALSE;		    /* We don't have calibration value for LPDAC, so we don't use it. */
   13152:	f8ad a158 	strh.w	sl, [sp, #344]	; 0x158
    AD5940_HSLoopCfgS(&hs_loop);
   13156:	f015 fc24 	bl	289a2 <AD5940_HSLoopCfgS>
    AD5940_WGDACCodeS(WgAmpWord + 0x800);
   1315a:	f507 6000 	add.w	r0, r7, #2048	; 0x800
   1315e:	f015 fc32 	bl	289c6 <AD5940_WGDACCodeS>
		AD5940_AFECtrlS(AFECTRL_HSTIAPWR|AFECTRL_INAMPPWR|AFECTRL_WG|AFECTRL_ADCPWR, bTRUE); /* Apply voltage to loop and turn on ADC */
   13162:	4631      	mov	r1, r6
   13164:	f44f 4099 	mov.w	r0, #19584	; 0x4c80
   13168:	f015 faef 	bl	2874a <AD5940_AFECtrlS>
    /* Do offset measurement */
    pSWCfg->Dswitch = SWD_RCAL0;//|SWD_SE0;   /* Disconnect SE0 for now to measure the offset voltage. */
    pSWCfg->Pswitch = SWP_RCAL0;
    pSWCfg->Nswitch = SWN_RCAL1;
    pSWCfg->Tswitch = SWT_TRTIA|SWT_RCAL1;
   1316c:	f44f 6210 	mov.w	r2, #2304	; 0x900
   13170:	f44f 7300 	mov.w	r3, #512	; 0x200
    AD5940_SWMatrixCfgS(pSWCfg);    
   13174:	4658      	mov	r0, fp
    pSWCfg->Tswitch = SWT_TRTIA|SWT_RCAL1;
   13176:	e9cd 3250 	strd	r3, r2, [sp, #320]	; 0x140
    pSWCfg->Pswitch = SWP_RCAL0;
   1317a:	e9cd 664e 	strd	r6, r6, [sp, #312]	; 0x138
    AD5940_SWMatrixCfgS(pSWCfg);    
   1317e:	f015 fb8e 	bl	2889e <AD5940_SWMatrixCfgS>
    AD5940_Delay10us(1000);   /* Wait some time here. */
   13182:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   13186:	f016 f8a2 	bl	292ce <AD5940_Delay10us>
    /* Measure RCAL channel voltage offset */
    pADCBaseCfg->ADCMuxN = ADCMUXN_N_NODE;
    pADCBaseCfg->ADCMuxP = ADCMUXP_P_NODE;
   1318a:	f04f 0a14 	mov.w	sl, #20
   1318e:	2324      	movs	r3, #36	; 0x24
   13190:	e9c4 3a00 	strd	r3, sl, [r4]
    pADCBaseCfg->ADCPga = ADCPgaGainRcal;
    AD5940_ADCBaseCfgS(pADCBaseCfg);
   13194:	4620      	mov	r0, r4
    pADCBaseCfg->ADCPga = ADCPgaGainRcal;
   13196:	f8c4 9008 	str.w	r9, [r4, #8]
    AD5940_ADCBaseCfgS(pADCBaseCfg);
   1319a:	f015 fca1 	bl	28ae0 <AD5940_ADCBaseCfgS>
    AD5940_Delay10us(50);   /* Wait some time here. */
   1319e:	2032      	movs	r0, #50	; 0x32
   131a0:	f016 f895 	bl	292ce <AD5940_Delay10us>
    offset_rcal = __AD5940_TakeMeasurement(&time_out);  /* Turn on ADC to get one valid data and then turn off ADC. */
   131a4:	a80d      	add	r0, sp, #52	; 0x34
   131a6:	f7ff fe2d 	bl	12e04 <__AD5940_TakeMeasurement>
    /* Measure RTIA channel voltage offset */
    if(pCalCfg->LpAmpSel == LPAMP0)
   131aa:	692b      	ldr	r3, [r5, #16]
    pADCBaseCfg->ADCMuxN = ADCMUXN_N_NODE;
   131ac:	4626      	mov	r6, r4
    offset_rcal = __AD5940_TakeMeasurement(&time_out);  /* Turn on ADC to get one valid data and then turn off ADC. */
   131ae:	4607      	mov	r7, r0
    if(pCalCfg->LpAmpSel == LPAMP0)
   131b0:	2b00      	cmp	r3, #0
   131b2:	f040 80aa 	bne.w	1330a <AD5940_LPRtiaCal+0x4b6>
    {
      pADCBaseCfg->ADCMuxN = ADCMUXN_LPTIA0_N;
   131b6:	2302      	movs	r3, #2
   131b8:	6063      	str	r3, [r4, #4]
      pADCBaseCfg->ADCMuxP = ADCMUXP_LPTIA0_P;
   131ba:	2321      	movs	r3, #33	; 0x21
    }else
    {
      pADCBaseCfg->ADCMuxN = ADCMUXN_LPTIA1_N;
      pADCBaseCfg->ADCMuxP = ADCMUXP_LPTIA1_P;
   131bc:	6023      	str	r3, [r4, #0]
    }
    pADCBaseCfg->ADCPga = ADCPgaGainRtia;    
    AD5940_ADCBaseCfgS(pADCBaseCfg);
   131be:	4630      	mov	r0, r6
    pADCBaseCfg->ADCPga = ADCPgaGainRtia;    
   131c0:	f8c6 8008 	str.w	r8, [r6, #8]
    AD5940_ADCBaseCfgS(pADCBaseCfg);
   131c4:	f015 fc8c 	bl	28ae0 <AD5940_ADCBaseCfgS>
    AD5940_Delay10us(50);   /* Wait some time here. */
   131c8:	2032      	movs	r0, #50	; 0x32
   131ca:	f016 f880 	bl	292ce <AD5940_Delay10us>
    offset_rtia = __AD5940_TakeMeasurement(&time_out);  /* Turn on ADC to get one valid data and then turn off ADC. */
   131ce:	a80d      	add	r0, sp, #52	; 0x34
   131d0:	f7ff fe18 	bl	12e04 <__AD5940_TakeMeasurement>
    /* Connect LPTIA loop, let current flow to RTIA. */
    pSWCfg->Dswitch = SWD_RCAL0|((pCalCfg->LpAmpSel == LPAMP0)?SWD_SE0:SWD_SE1);
   131d4:	692b      	ldr	r3, [r5, #16]
   131d6:	2b00      	cmp	r3, #0
   131d8:	bf0c      	ite	eq
   131da:	2341      	moveq	r3, #65	; 0x41
   131dc:	2381      	movne	r3, #129	; 0x81
    pSWCfg->Pswitch = SWP_RCAL0;
    pSWCfg->Nswitch = SWN_RCAL1;
   131de:	f04f 0c01 	mov.w	ip, #1
    pSWCfg->Dswitch = SWD_RCAL0|((pCalCfg->LpAmpSel == LPAMP0)?SWD_SE0:SWD_SE1);
   131e2:	934e      	str	r3, [sp, #312]	; 0x138
    pSWCfg->Nswitch = SWN_RCAL1;
   131e4:	f44f 7300 	mov.w	r3, #512	; 0x200
   131e8:	e9cd c34f 	strd	ip, r3, [sp, #316]	; 0x13c
    offset_rtia = __AD5940_TakeMeasurement(&time_out);  /* Turn on ADC to get one valid data and then turn off ADC. */
   131ec:	4604      	mov	r4, r0
    pSWCfg->Tswitch = SWT_TRTIA|SWT_RCAL1;
   131ee:	f44f 6310 	mov.w	r3, #2304	; 0x900
    AD5940_SWMatrixCfgS(pSWCfg);
   131f2:	4658      	mov	r0, fp
    pSWCfg->Tswitch = SWT_TRTIA|SWT_RCAL1;
   131f4:	9351      	str	r3, [sp, #324]	; 0x144
    AD5940_SWMatrixCfgS(pSWCfg);
   131f6:	f015 fb52 	bl	2889e <AD5940_SWMatrixCfgS>
    AD5940_Delay10us(1000);   /* Wait some time here. */
   131fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   131fe:	f016 f866 	bl	292ce <AD5940_Delay10us>
		/* Measure RCAL */
    pADCBaseCfg = &dsp_cfg.ADCBaseCfg;
    pADCBaseCfg->ADCMuxN = ADCMUXN_N_NODE;
    pADCBaseCfg->ADCMuxP = ADCMUXP_P_NODE;
   13202:	2324      	movs	r3, #36	; 0x24
   13204:	f04f 0e14 	mov.w	lr, #20
   13208:	e9c6 3e00 	strd	r3, lr, [r6]
    pADCBaseCfg->ADCPga = ADCPgaGainRcal;
    AD5940_ADCBaseCfgS(pADCBaseCfg);
   1320c:	4630      	mov	r0, r6
    pADCBaseCfg->ADCPga = ADCPgaGainRcal;
   1320e:	f8c6 9008 	str.w	r9, [r6, #8]
    AD5940_ADCBaseCfgS(pADCBaseCfg);
   13212:	f015 fc65 	bl	28ae0 <AD5940_ADCBaseCfgS>
    AD5940_Delay10us(50);   /* Wait some time here. */
   13216:	2032      	movs	r0, #50	; 0x32
   13218:	f016 f859 	bl	292ce <AD5940_Delay10us>
    DftRcal.Real = (int32_t)__AD5940_TakeMeasurement(&time_out)- offset_rcal;
   1321c:	a80d      	add	r0, sp, #52	; 0x34
   1321e:	f7ff fdf1 	bl	12e04 <__AD5940_TakeMeasurement>
    DftRcal.Image = 0;
   13222:	2300      	movs	r3, #0
   13224:	930a      	str	r3, [sp, #40]	; 0x28
		/* Measure RTIA */    
    if(pCalCfg->LpAmpSel == LPAMP0)
   13226:	692b      	ldr	r3, [r5, #16]
    DftRcal.Real = (int32_t)__AD5940_TakeMeasurement(&time_out)- offset_rcal;
   13228:	1bc7      	subs	r7, r0, r7
   1322a:	9709      	str	r7, [sp, #36]	; 0x24
    if(pCalCfg->LpAmpSel == LPAMP0)
   1322c:	2b00      	cmp	r3, #0
   1322e:	d170      	bne.n	13312 <AD5940_LPRtiaCal+0x4be>
    {
      pADCBaseCfg->ADCMuxN = ADCMUXN_LPTIA0_N;
   13230:	2302      	movs	r3, #2
   13232:	6073      	str	r3, [r6, #4]
      pADCBaseCfg->ADCMuxP = ADCMUXP_LPTIA0_P;
   13234:	2321      	movs	r3, #33	; 0x21
    }else
    {
      pADCBaseCfg->ADCMuxN = ADCMUXN_LPTIA1_N;
      pADCBaseCfg->ADCMuxP = ADCMUXP_LPTIA1_P;
   13236:	6033      	str	r3, [r6, #0]
    }
    pADCBaseCfg->ADCPga = ADCPgaGainRtia;
    AD5940_ADCBaseCfgS(pADCBaseCfg);
   13238:	4630      	mov	r0, r6
    pADCBaseCfg->ADCPga = ADCPgaGainRtia;
   1323a:	f8c6 8008 	str.w	r8, [r6, #8]
    AD5940_ADCBaseCfgS(pADCBaseCfg);
   1323e:	f015 fc4f 	bl	28ae0 <AD5940_ADCBaseCfgS>
    AD5940_Delay10us(50);   /* Wait some time here. */
   13242:	2032      	movs	r0, #50	; 0x32
   13244:	f016 f843 	bl	292ce <AD5940_Delay10us>
    DftRtia.Real = (int32_t)__AD5940_TakeMeasurement(&time_out)- offset_rtia;
   13248:	a80d      	add	r0, sp, #52	; 0x34
   1324a:	f7ff fddb 	bl	12e04 <__AD5940_TakeMeasurement>
    DftRtia.Image = 0;
   1324e:	2300      	movs	r3, #0
    DftRtia.Real = (int32_t)__AD5940_TakeMeasurement(&time_out)- offset_rtia;
   13250:	1b04      	subs	r4, r0, r4
   13252:	940b      	str	r4, [sp, #44]	; 0x2c
    DftRtia.Image = 0;
   13254:	930c      	str	r3, [sp, #48]	; 0x30
  }
  /*
      The impedance engine inside of AD594x give us Real part and Imaginary part of DFT. Due to technology used, the Imaginary 
      part in register is the opposite number. So we add a negative sign on the Imaginary part of results. 
  */
  DftRtia.Image = -DftRtia.Image;
   13256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13258:	425b      	negs	r3, r3
   1325a:	930c      	str	r3, [sp, #48]	; 0x30
  DftRcal.Image = -DftRcal.Image;
   1325c:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  fImpCar_Type res;
  /* RTIA = (DftRtia.Real, DftRtia.Image)/(DftRcal.Real, DftRcal.Image)*fRcal */
  res = AD5940_ComplexDivInt(&DftRtia, &DftRcal);
   1325e:	ae06      	add	r6, sp, #24
  DftRcal.Image = -DftRcal.Image;
   13260:	425b      	negs	r3, r3
  res = AD5940_ComplexDivInt(&DftRtia, &DftRcal);
   13262:	aa09      	add	r2, sp, #36	; 0x24
   13264:	4630      	mov	r0, r6
   13266:	a90b      	add	r1, sp, #44	; 0x2c
  DftRcal.Image = -DftRcal.Image;
   13268:	930a      	str	r3, [sp, #40]	; 0x28
  res = AD5940_ComplexDivInt(&DftRtia, &DftRcal);
   1326a:	f015 f9b3 	bl	285d4 <AD5940_ComplexDivInt>
   1326e:	e896 0003 	ldmia.w	r6, {r0, r1}
   13272:	ac0d      	add	r4, sp, #52	; 0x34
   13274:	e884 0003 	stmia.w	r4, {r0, r1}
  res.Real *= pCalCfg->fRcal/GainRatio;
   13278:	9904      	ldr	r1, [sp, #16]
   1327a:	6868      	ldr	r0, [r5, #4]
   1327c:	f7ed fe20 	bl	ec0 <__aeabi_fdiv>
   13280:	6821      	ldr	r1, [r4, #0]
   13282:	4607      	mov	r7, r0
   13284:	f7ed fd68 	bl	d58 <__aeabi_fmul>
  res.Image *= pCalCfg->fRcal/GainRatio;
   13288:	6861      	ldr	r1, [r4, #4]
  res.Real *= pCalCfg->fRcal/GainRatio;
   1328a:	6020      	str	r0, [r4, #0]
   1328c:	4606      	mov	r6, r0
  res.Image *= pCalCfg->fRcal/GainRatio;
   1328e:	4638      	mov	r0, r7
   13290:	f7ed fd62 	bl	d58 <__aeabi_fmul>
  if(pCalCfg->bPolarResult == bFALSE)
   13294:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  res.Image *= pCalCfg->fRcal/GainRatio;
   13296:	6060      	str	r0, [r4, #4]
  if(pCalCfg->bPolarResult == bFALSE)
   13298:	2b00      	cmp	r3, #0
   1329a:	f040 80de 	bne.w	1345a <AD5940_LPRtiaCal+0x606>
  {
    ((fImpCar_Type*)pResult)->Real = res.Real;
   1329e:	9b01      	ldr	r3, [sp, #4]
   132a0:	601e      	str	r6, [r3, #0]
    ((fImpCar_Type*)pResult)->Image = res.Image;
  }
  else
  {
    ((fImpPol_Type*)pResult)->Magnitude = AD5940_ComplexMag(&res);
    ((fImpPol_Type*)pResult)->Phase = AD5940_ComplexPhase(&res);
   132a2:	6058      	str	r0, [r3, #4]
  }
    
  /* Restore INTC1 DFT configure */
  if(INTCCfg&AFEINTSRC_DFTRDY);
   132a4:	9b02      	ldr	r3, [sp, #8]
   132a6:	f013 0202 	ands.w	r2, r3, #2
   132aa:	d103      	bne.n	132b4 <AD5940_LPRtiaCal+0x460>
  else
    AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_DFTRDY, bFALSE);    /* Disable DFT Interrupt */
   132ac:	2102      	movs	r1, #2
   132ae:	2001      	movs	r0, #1
   132b0:	f015 ff81 	bl	291b6 <AD5940_INTCCfg>
  if(INTCCfg&AFEINTSRC_SINC2RDY);
   132b4:	9b02      	ldr	r3, [sp, #8]
   132b6:	f013 0204 	ands.w	r2, r3, #4
   132ba:	d103      	bne.n	132c4 <AD5940_LPRtiaCal+0x470>
  else
    AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_SINC2RDY, bFALSE);  /* Disable SINC2 Interrupt */
   132bc:	2104      	movs	r1, #4
   132be:	2001      	movs	r0, #1
   132c0:	f015 ff79 	bl	291b6 <AD5940_INTCCfg>
  AD5940_WriteReg(REG_AFE_AFECON, reg_afecon);              /* Restore AFECON register */
   132c4:	9905      	ldr	r1, [sp, #20]
   132c6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   132ca:	f7ff fc67 	bl	12b9c <AD5940_WriteReg>
  /* Open all switches in switch-matrix */
  hs_loop.SWMatCfg.Dswitch = SWD_OPEN;
   132ce:	2400      	movs	r4, #0
  hs_loop.SWMatCfg.Pswitch = SWP_OPEN;
  hs_loop.SWMatCfg.Nswitch = SWN_OPEN;
  hs_loop.SWMatCfg.Tswitch = SWT_OPEN;
  AD5940_SWMatrixCfgS(&hs_loop.SWMatCfg);
   132d0:	a84e      	add	r0, sp, #312	; 0x138
  hs_loop.SWMatCfg.Pswitch = SWP_OPEN;
   132d2:	e9cd 444e 	strd	r4, r4, [sp, #312]	; 0x138
  hs_loop.SWMatCfg.Tswitch = SWT_OPEN;
   132d6:	e9cd 4450 	strd	r4, r4, [sp, #320]	; 0x140
  AD5940_SWMatrixCfgS(&hs_loop.SWMatCfg);
   132da:	f015 fae0 	bl	2889e <AD5940_SWMatrixCfgS>
  
  return AD5940ERR_OK;
   132de:	4620      	mov	r0, r4
}
   132e0:	b06b      	add	sp, #428	; 0x1ac
   132e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(temp >= 9.0f)  ADCPgaGainRcal = ADCPGA_9;
   132e6:	f04f 0904 	mov.w	r9, #4
   132ea:	e652      	b.n	12f92 <AD5940_LPRtiaCal+0x13e>
    else if(temp >= 4.0f) ADCPgaGainRcal = ADCPGA_4;
   132ec:	f04f 0903 	mov.w	r9, #3
   132f0:	e64f      	b.n	12f92 <AD5940_LPRtiaCal+0x13e>
    else if(temp >= 2.0f) ADCPgaGainRcal = ADCPGA_2;
   132f2:	f04f 0902 	mov.w	r9, #2
   132f6:	e64c      	b.n	12f92 <AD5940_LPRtiaCal+0x13e>
    if(temp >= 9.0f)  ADCPgaGainRtia = ADCPGA_9;
   132f8:	f04f 0804 	mov.w	r8, #4
   132fc:	e66e      	b.n	12fdc <AD5940_LPRtiaCal+0x188>
    else if(temp >= 4.0f) ADCPgaGainRtia = ADCPGA_4;
   132fe:	f04f 0803 	mov.w	r8, #3
   13302:	e66b      	b.n	12fdc <AD5940_LPRtiaCal+0x188>
    else if(temp >= 2.0f) ADCPgaGainRtia = ADCPGA_2;
   13304:	f04f 0802 	mov.w	r8, #2
   13308:	e668      	b.n	12fdc <AD5940_LPRtiaCal+0x188>
      pADCBaseCfg->ADCMuxN = ADCMUXN_LPTIA1_N;
   1330a:	2303      	movs	r3, #3
   1330c:	6063      	str	r3, [r4, #4]
      pADCBaseCfg->ADCMuxP = ADCMUXP_LPTIA1_P;
   1330e:	2322      	movs	r3, #34	; 0x22
   13310:	e754      	b.n	131bc <AD5940_LPRtiaCal+0x368>
      pADCBaseCfg->ADCMuxN = ADCMUXN_LPTIA1_N;
   13312:	2303      	movs	r3, #3
   13314:	6073      	str	r3, [r6, #4]
      pADCBaseCfg->ADCMuxP = ADCMUXP_LPTIA1_P;
   13316:	2322      	movs	r3, #34	; 0x22
   13318:	e78d      	b.n	13236 <AD5940_LPRtiaCal+0x3e2>
		hs_loop.WgCfg.SinCfg.SinFreqWord = AD5940_WGFreqWordCal(pCalCfg->fFreq, pCalCfg->SysClkFreq);
   1331a:	68a9      	ldr	r1, [r5, #8]
   1331c:	9003      	str	r0, [sp, #12]
   1331e:	6828      	ldr	r0, [r5, #0]
		hs_loop.WgCfg.SinCfg.SinAmplitudeWord = WgAmpWord;
   13320:	975e      	str	r7, [sp, #376]	; 0x178
		hs_loop.WgCfg.SinCfg.SinFreqWord = AD5940_WGFreqWordCal(pCalCfg->fFreq, pCalCfg->SysClkFreq);
   13322:	f7ff fd37 	bl	12d94 <AD5940_WGFreqWordCal>
		hs_loop.WgCfg.SinCfg.SinOffsetWord = 0;
   13326:	9a03      	ldr	r2, [sp, #12]
		hs_loop.WgCfg.SinCfg.SinFreqWord = AD5940_WGFreqWordCal(pCalCfg->fFreq, pCalCfg->SysClkFreq);
   13328:	905d      	str	r0, [sp, #372]	; 0x174
		hs_loop.WgCfg.WgType = WGTYPE_SIN;
   1332a:	2702      	movs	r7, #2
    AD5940_HSLoopCfgS(&hs_loop);
   1332c:	4658      	mov	r0, fp
		hs_loop.WgCfg.SinCfg.SinPhaseWord = 0;
   1332e:	e9cd 225f 	strd	r2, r2, [sp, #380]	; 0x17c
		hs_loop.WgCfg.WgCode = 0;
   13332:	9261      	str	r2, [sp, #388]	; 0x184
    hs_loop.WgCfg.GainCalEn = bFALSE;      /* disable it */
   13334:	f8ad 2158 	strh.w	r2, [sp, #344]	; 0x158
		hs_loop.WgCfg.WgType = WGTYPE_SIN;
   13338:	9755      	str	r7, [sp, #340]	; 0x154
    AD5940_HSLoopCfgS(&hs_loop);
   1333a:	f015 fb32 	bl	289a2 <AD5940_HSLoopCfgS>
    AD5940_INTCClrFlag(AFEINTSRC_DFTRDY);
   1333e:	4638      	mov	r0, r7
   13340:	f015 ff51 	bl	291e6 <AD5940_INTCClrFlag>
    AD5940_AFECtrlS(AFECTRL_HSTIAPWR|AFECTRL_INAMPPWR, bTRUE);
   13344:	4631      	mov	r1, r6
   13346:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   1334a:	f015 f9fe 	bl	2874a <AD5940_AFECtrlS>
    AD5940_Delay10us(100);      /* Wait for loop stable. */
   1334e:	2064      	movs	r0, #100	; 0x64
   13350:	f015 ffbd 	bl	292ce <AD5940_Delay10us>
    pADCBaseCfg->ADCMuxP = ADCMUXP_P_NODE;
   13354:	2714      	movs	r7, #20
   13356:	2324      	movs	r3, #36	; 0x24
   13358:	e9c4 3700 	strd	r3, r7, [r4]
    AD5940_ADCBaseCfgS(pADCBaseCfg);
   1335c:	4620      	mov	r0, r4
    pADCBaseCfg->ADCPga = ADCPgaGainRcal;
   1335e:	f8c4 9008 	str.w	r9, [r4, #8]
    AD5940_ADCBaseCfgS(pADCBaseCfg);
   13362:	f015 fbbd 	bl	28ae0 <AD5940_ADCBaseCfgS>
    AD5940_AFECtrlS(AFECTRL_ADCPWR|AFECTRL_WG, bTRUE);
   13366:	4631      	mov	r1, r6
   13368:	f44f 4081 	mov.w	r0, #16512	; 0x4080
   1336c:	f015 f9ed 	bl	2874a <AD5940_AFECtrlS>
    AD5940_Delay10us(25);
   13370:	2019      	movs	r0, #25
   13372:	f015 ffac 	bl	292ce <AD5940_Delay10us>
    AD5940_AFECtrlS(AFECTRL_ADCCNV|AFECTRL_DFT, bTRUE);
   13376:	4631      	mov	r1, r6
   13378:	f44f 4001 	mov.w	r0, #33024	; 0x8100
   1337c:	f015 f9e5 	bl	2874a <AD5940_AFECtrlS>
    while(AD5940_INTCTestFlag(AFEINTC_1, AFEINTSRC_DFTRDY) == bFALSE);  
   13380:	2102      	movs	r1, #2
   13382:	2001      	movs	r0, #1
   13384:	f015 ff34 	bl	291f0 <AD5940_INTCTestFlag>
   13388:	2800      	cmp	r0, #0
   1338a:	d0f9      	beq.n	13380 <AD5940_LPRtiaCal+0x52c>
    AD5940_AFECtrlS(AFECTRL_ADCCNV|AFECTRL_DFT|AFECTRL_WG|AFECTRL_ADCPWR, bFALSE);  /* Stop ADC convert and DFT */
   1338c:	2100      	movs	r1, #0
   1338e:	f24c 1080 	movw	r0, #49536	; 0xc180
   13392:	f015 f9da 	bl	2874a <AD5940_AFECtrlS>
    AD5940_INTCClrFlag(AFEINTSRC_DFTRDY);
   13396:	2002      	movs	r0, #2
   13398:	f015 ff25 	bl	291e6 <AD5940_INTCClrFlag>
      rd = AD5940_ReadReg(REG_AFE_DFTREAL);
   1339c:	f242 0078 	movw	r0, #8312	; 0x2078
   133a0:	f7ff fc4c 	bl	12c3c <AD5940_ReadReg>
    DftRcal.Real = AD5940_ReadAfeResult(AFERESULT_DFTREAL);
   133a4:	9009      	str	r0, [sp, #36]	; 0x24
      rd = AD5940_ReadReg(REG_AFE_DFTIMAG);
   133a6:	f242 007c 	movw	r0, #8316	; 0x207c
   133aa:	f7ff fc47 	bl	12c3c <AD5940_ReadReg>
    if(pCalCfg->LpAmpSel == LPAMP0)
   133ae:	692b      	ldr	r3, [r5, #16]
    DftRcal.Image = AD5940_ReadAfeResult(AFERESULT_DFTIMAGE);
   133b0:	900a      	str	r0, [sp, #40]	; 0x28
    if(pCalCfg->LpAmpSel == LPAMP0)
   133b2:	2b00      	cmp	r3, #0
   133b4:	d14d      	bne.n	13452 <AD5940_LPRtiaCal+0x5fe>
      pADCBaseCfg->ADCMuxN = ADCMUXN_LPTIA0_N;
   133b6:	2302      	movs	r3, #2
   133b8:	6063      	str	r3, [r4, #4]
      pADCBaseCfg->ADCMuxP = ADCMUXP_LPTIA0_P;
   133ba:	2321      	movs	r3, #33	; 0x21
      pADCBaseCfg->ADCMuxP = ADCMUXP_LPTIA1_P;
   133bc:	6023      	str	r3, [r4, #0]
    AD5940_ADCBaseCfgS(pADCBaseCfg);
   133be:	4620      	mov	r0, r4
    pADCBaseCfg->ADCPga = ADCPgaGainRtia;
   133c0:	f8c4 8008 	str.w	r8, [r4, #8]
    AD5940_ADCBaseCfgS(pADCBaseCfg);
   133c4:	f015 fb8c 	bl	28ae0 <AD5940_ADCBaseCfgS>
    AD5940_AFECtrlS(AFECTRL_ADCPWR|AFECTRL_WG, bTRUE);
   133c8:	2101      	movs	r1, #1
   133ca:	f44f 4081 	mov.w	r0, #16512	; 0x4080
   133ce:	f015 f9bc 	bl	2874a <AD5940_AFECtrlS>
    AD5940_Delay10us(25);
   133d2:	2019      	movs	r0, #25
   133d4:	f015 ff7b 	bl	292ce <AD5940_Delay10us>
    AD5940_AFECtrlS(AFECTRL_ADCCNV|AFECTRL_DFT, bTRUE);
   133d8:	2101      	movs	r1, #1
   133da:	f44f 4001 	mov.w	r0, #33024	; 0x8100
   133de:	f015 f9b4 	bl	2874a <AD5940_AFECtrlS>
    while(AD5940_INTCTestFlag(AFEINTC_1, AFEINTSRC_DFTRDY) == bFALSE);  
   133e2:	2102      	movs	r1, #2
   133e4:	2001      	movs	r0, #1
   133e6:	f015 ff03 	bl	291f0 <AD5940_INTCTestFlag>
   133ea:	2800      	cmp	r0, #0
   133ec:	d0f9      	beq.n	133e2 <AD5940_LPRtiaCal+0x58e>
    AD5940_AFECtrlS(AFECTRL_ADCCNV|AFECTRL_DFT|AFECTRL_WG|AFECTRL_ADCPWR, bFALSE);  /* Stop ADC convert and DFT */
   133ee:	2100      	movs	r1, #0
   133f0:	f24c 1080 	movw	r0, #49536	; 0xc180
   133f4:	f015 f9a9 	bl	2874a <AD5940_AFECtrlS>
    AD5940_INTCClrFlag(AFEINTSRC_DFTRDY);
   133f8:	2002      	movs	r0, #2
   133fa:	f015 fef4 	bl	291e6 <AD5940_INTCClrFlag>
      rd = AD5940_ReadReg(REG_AFE_DFTREAL);
   133fe:	f242 0078 	movw	r0, #8312	; 0x2078
   13402:	f7ff fc1b 	bl	12c3c <AD5940_ReadReg>
    DftRtia.Real = AD5940_ReadAfeResult(AFERESULT_DFTREAL);
   13406:	900b      	str	r0, [sp, #44]	; 0x2c
      rd = AD5940_ReadReg(REG_AFE_DFTIMAG);
   13408:	f242 007c 	movw	r0, #8316	; 0x207c
   1340c:	f7ff fc16 	bl	12c3c <AD5940_ReadReg>
    if(DftRcal.Real&(1L<<17))
   13410:	9b09      	ldr	r3, [sp, #36]	; 0x24
    DftRtia.Image = AD5940_ReadAfeResult(AFERESULT_DFTIMAGE);
   13412:	900c      	str	r0, [sp, #48]	; 0x30
    if(DftRcal.Real&(1L<<17))
   13414:	039c      	lsls	r4, r3, #14
      DftRcal.Real |= 0xfffc0000;
   13416:	bf42      	ittt	mi
   13418:	ea6f 3383 	mvnmi.w	r3, r3, lsl #14
   1341c:	ea6f 3393 	mvnmi.w	r3, r3, lsr #14
   13420:	9309      	strmi	r3, [sp, #36]	; 0x24
    if(DftRcal.Image&(1L<<17))
   13422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13424:	0399      	lsls	r1, r3, #14
      DftRcal.Image |= 0xfffc0000;
   13426:	bf42      	ittt	mi
   13428:	ea6f 3383 	mvnmi.w	r3, r3, lsl #14
   1342c:	ea6f 3393 	mvnmi.w	r3, r3, lsr #14
   13430:	930a      	strmi	r3, [sp, #40]	; 0x28
    if(DftRtia.Real&(1L<<17))
   13432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13434:	039a      	lsls	r2, r3, #14
      DftRtia.Real |= 0xfffc0000;
   13436:	bf42      	ittt	mi
   13438:	ea6f 3383 	mvnmi.w	r3, r3, lsl #14
   1343c:	ea6f 3393 	mvnmi.w	r3, r3, lsr #14
   13440:	930b      	strmi	r3, [sp, #44]	; 0x2c
    if(DftRtia.Image&(1L<<17))
   13442:	0383      	lsls	r3, r0, #14
      DftRtia.Image |= 0xfffc0000;
   13444:	bf42      	ittt	mi
   13446:	ea6f 3080 	mvnmi.w	r0, r0, lsl #14
   1344a:	ea6f 3090 	mvnmi.w	r0, r0, lsr #14
   1344e:	900c      	strmi	r0, [sp, #48]	; 0x30
   13450:	e701      	b.n	13256 <AD5940_LPRtiaCal+0x402>
      pADCBaseCfg->ADCMuxN = ADCMUXN_LPTIA1_N;
   13452:	2303      	movs	r3, #3
   13454:	6063      	str	r3, [r4, #4]
      pADCBaseCfg->ADCMuxP = ADCMUXP_LPTIA1_P;
   13456:	2322      	movs	r3, #34	; 0x22
   13458:	e7b0      	b.n	133bc <AD5940_LPRtiaCal+0x568>
    ((fImpPol_Type*)pResult)->Magnitude = AD5940_ComplexMag(&res);
   1345a:	4620      	mov	r0, r4
   1345c:	f015 f904 	bl	28668 <AD5940_ComplexMag>
   13460:	9b01      	ldr	r3, [sp, #4]
   13462:	6018      	str	r0, [r3, #0]
    ((fImpPol_Type*)pResult)->Phase = AD5940_ComplexPhase(&res);
   13464:	4620      	mov	r0, r4
   13466:	f015 f915 	bl	28694 <AD5940_ComplexPhase>
   1346a:	9b01      	ldr	r3, [sp, #4]
   1346c:	e719      	b.n	132a2 <AD5940_LPRtiaCal+0x44e>
    return AD5940ERR_PARA;
   1346e:	f06f 0001 	mvn.w	r0, #1
   13472:	e735      	b.n	132e0 <AD5940_LPRtiaCal+0x48c>
  if(pCalCfg == NULL)  return AD5940ERR_NULLP;  /* Parameters illegal */
   13474:	f06f 0002 	mvn.w	r0, #2
   13478:	e732      	b.n	132e0 <AD5940_LPRtiaCal+0x48c>
   1347a:	bf00      	nop

0001347c <AD5940_LFOSCMeasure>:
 * @param pCfg: pointer to structure.
 * @param pFreq:  Pointer to a variable that used to store frequency in Hz. 
 * @return AD5940ERR_OK if succeed.
**/
AD5940Err AD5940_LFOSCMeasure(LFOSCMeasure_Type *pCfg, float *pFreq) /* Measure current LFOSC frequency. */
{
   1347c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13480:	460f      	mov	r7, r1
   13482:	b09f      	sub	sp, #124	; 0x7c
  {
    SEQ_TOUT(0x3fffffff),   /* Re-Set time-out timer, so we can measure the time needed for MCU to read out Timer Count register. */
    SEQ_STOP(),             /* Interrupt flag AFEINTSRC_ENDSEQ will be set here */
  };

  if(pCfg == NULL) return AD5940ERR_NULLP;
   13484:	4604      	mov	r4, r0
   13486:	2800      	cmp	r0, #0
   13488:	f000 80bc 	beq.w	13604 <AD5940_LFOSCMeasure+0x188>
  if(pFreq == NULL) return AD5940ERR_NULLP;
   1348c:	2900      	cmp	r1, #0
   1348e:	f000 80b9 	beq.w	13604 <AD5940_LFOSCMeasure+0x188>
  if(pCfg->CalDuration < 1.0f)
   13492:	6840      	ldr	r0, [r0, #4]
   13494:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   13498:	f7ed fdfc 	bl	1094 <__aeabi_fcmplt>
   1349c:	4606      	mov	r6, r0
   1349e:	2800      	cmp	r0, #0
   134a0:	f040 80b3 	bne.w	1360a <AD5940_LFOSCMeasure+0x18e>
    return AD5940ERR_PARA;
  AD5940_SEQGetCfg(&seq_cfg_backup);
   134a4:	a804      	add	r0, sp, #16
   134a6:	f015 fc31 	bl	28d0c <AD5940_SEQGetCfg>
    tempreg = AD5940_ReadReg(REG_INTC_INTCSEL1);
   134aa:	f243 000c 	movw	r0, #12300	; 0x300c
   134ae:	f7ff fbc5 	bl	12c3c <AD5940_ReadReg>
  INTCCfg = AD5940_INTCGetCfg(AFEINTC_1);
  AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_ENDSEQ, bTRUE);
   134b2:	2201      	movs	r2, #1
   134b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    tempreg = AD5940_ReadReg(REG_INTC_INTCSEL1);
   134b8:	4681      	mov	r9, r0
  AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_ENDSEQ, bTRUE);
   134ba:	4610      	mov	r0, r2
   134bc:	f015 fe7b 	bl	291b6 <AD5940_INTCCfg>
	AD5940_INTCClrFlag(AFEINTSRC_ALLINT);
   134c0:	f04f 30ff 	mov.w	r0, #4294967295

  seq_cfg.SeqMemSize = SEQMEMSIZE_2KB;  /* 2kB SRAM is used for sequencer */
   134c4:	2501      	movs	r5, #1
	AD5940_INTCClrFlag(AFEINTSRC_ALLINT);
   134c6:	f015 fe8e 	bl	291e6 <AD5940_INTCClrFlag>
  seq_cfg.SeqBreakEn = bFALSE;
  seq_cfg.SeqIgnoreEn = bFALSE;
  seq_cfg.SeqCntCRCClr = bFALSE;
  seq_cfg.SeqEnable = bTRUE;
  seq_cfg.SeqWrTimer = 0;
  AD5940_SEQCfg(&seq_cfg);          /* Enable sequencer */
   134ca:	a801      	add	r0, sp, #4
  seq_cfg.SeqWrTimer = 0;
   134cc:	9603      	str	r6, [sp, #12]
  seq_cfg.SeqEnable = bTRUE;
   134ce:	e9cd 5501 	strd	r5, r5, [sp, #4]
  AD5940_SEQCfg(&seq_cfg);          /* Enable sequencer */
   134d2:	f015 fbe3 	bl	28c9c <AD5940_SEQCfg>
  
  seqinfo.pSeqCmd = SeqA;
   134d6:	4b4e      	ldr	r3, [pc, #312]	; (13610 <AD5940_LFOSCMeasure+0x194>)
   134d8:	930b      	str	r3, [sp, #44]	; 0x2c
  seqinfo.SeqId = SEQID_0;
  seqinfo.SeqLen = SEQ_LEN(SeqA);
  seqinfo.SeqRamAddr = pCfg->CalSeqAddr;
  seqinfo.WriteSRAM = bTRUE;
  AD5940_SEQInfoCfg(&seqinfo);
   134da:	a807      	add	r0, sp, #28
  seqinfo.SeqRamAddr = pCfg->CalSeqAddr;
   134dc:	6823      	ldr	r3, [r4, #0]
  seqinfo.SeqId = SEQID_0;
   134de:	9607      	str	r6, [sp, #28]
  seqinfo.SeqRamAddr = pCfg->CalSeqAddr;
   134e0:	9308      	str	r3, [sp, #32]
  seqinfo.SeqLen = SEQ_LEN(SeqA);
   134e2:	9509      	str	r5, [sp, #36]	; 0x24
  seqinfo.WriteSRAM = bTRUE;
   134e4:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
  AD5940_SEQInfoCfg(&seqinfo);
   134e8:	f015 fc5b 	bl	28da2 <AD5940_SEQInfoCfg>
  seqinfo.SeqId = SEQID_1;
  seqinfo.SeqRamAddr = pCfg->CalSeqAddr + SEQ_LEN(SeqA) ;
   134ec:	6823      	ldr	r3, [r4, #0]
  seqinfo.SeqId = SEQID_1;
   134ee:	9507      	str	r5, [sp, #28]
  seqinfo.SeqRamAddr = pCfg->CalSeqAddr + SEQ_LEN(SeqA) ;
   134f0:	442b      	add	r3, r5
  seqinfo.SeqLen = SEQ_LEN(SeqB);
   134f2:	e9cd 3508 	strd	r3, r5, [sp, #32]
  seqinfo.pSeqCmd = SeqB;
  AD5940_SEQInfoCfg(&seqinfo);      /* Configure sequence0 and sequence1 with command SeqA and SeqB */
   134f6:	a807      	add	r0, sp, #28
  seqinfo.pSeqCmd = SeqB;
   134f8:	4b46      	ldr	r3, [pc, #280]	; (13614 <AD5940_LFOSCMeasure+0x198>)
   134fa:	930b      	str	r3, [sp, #44]	; 0x2c
  AD5940_SEQInfoCfg(&seqinfo);      /* Configure sequence0 and sequence1 with command SeqA and SeqB */
   134fc:	f015 fc51 	bl	28da2 <AD5940_SEQInfoCfg>
	
  wupt_cfg.WuptEn = bFALSE;
  wupt_cfg.WuptOrder[0] = SEQID_0;
  wupt_cfg.WuptOrder[1] = SEQID_1;
  wupt_cfg.WuptEndSeq = WUPTENDSEQ_B;
  wupt_cfg.SeqxWakeupTime[0] = 4;       /* Don't care. >4 is acceptable */
   13500:	2304      	movs	r3, #4
  wupt_cfg.SeqxSleepTime[0] = (uint32_t)((pCfg->CalDuration)*32 + 0.5f) - 1 - 4;
   13502:	6860      	ldr	r0, [r4, #4]
  wupt_cfg.SeqxWakeupTime[0] = 4;       /* Don't care. >4 is acceptable */
   13504:	9319      	str	r3, [sp, #100]	; 0x64
  wupt_cfg.SeqxSleepTime[0] = (uint32_t)((pCfg->CalDuration)*32 + 0.5f) - 1 - 4;
   13506:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
  wupt_cfg.WuptOrder[1] = SEQID_1;
   1350a:	e9cd 650d 	strd	r6, r5, [sp, #52]	; 0x34
  wupt_cfg.WuptEn = bFALSE;
   1350e:	f88d 6074 	strb.w	r6, [sp, #116]	; 0x74
  wupt_cfg.WuptEndSeq = WUPTENDSEQ_B;
   13512:	950c      	str	r5, [sp, #48]	; 0x30
  wupt_cfg.SeqxSleepTime[0] = (uint32_t)((pCfg->CalDuration)*32 + 0.5f) - 1 - 4;
   13514:	f7ed fc20 	bl	d58 <__aeabi_fmul>
   13518:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   1351c:	f7ed fb14 	bl	b48 <__addsf3>
   13520:	f7ed fe06 	bl	1130 <__aeabi_f2uiz>
   13524:	1f43      	subs	r3, r0, #5
   13526:	9315      	str	r3, [sp, #84]	; 0x54
  wupt_cfg.SeqxWakeupTime[1] = 4-1;
   13528:	2303      	movs	r3, #3
   1352a:	931a      	str	r3, [sp, #104]	; 0x68
  wupt_cfg.SeqxSleepTime[0] = (uint32_t)((pCfg->CalDuration)*32 + 0.5f) - 1 - 4;
   1352c:	4606      	mov	r6, r0
  wupt_cfg.SeqxSleepTime[1] = 0xffffffff; /* Don't care */
   1352e:	f04f 33ff 	mov.w	r3, #4294967295
  WuptPeriod = (wupt_cfg.SeqxSleepTime[0]+1) + (wupt_cfg.SeqxWakeupTime[1]+1);
  AD5940_WUPTCfg(&wupt_cfg);
   13532:	a80c      	add	r0, sp, #48	; 0x30
  wupt_cfg.SeqxSleepTime[1] = 0xffffffff; /* Don't care */
   13534:	9316      	str	r3, [sp, #88]	; 0x58
  AD5940_WUPTCfg(&wupt_cfg);
   13536:	f015 fc6e 	bl	28e16 <AD5940_WUPTCfg>
  
  AD5940_INTCClrFlag(AFEINTSRC_ENDSEQ);
   1353a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1353e:	f015 fe52 	bl	291e6 <AD5940_INTCClrFlag>
  AD5940_WUPTCtrl(bTRUE);
   13542:	4628      	mov	r0, r5
   13544:	f015 fd06 	bl	28f54 <AD5940_WUPTCtrl>
  
  while(AD5940_INTCTestFlag(AFEINTC_1, AFEINTSRC_ENDSEQ) == bFALSE);
   13548:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1354c:	2001      	movs	r0, #1
   1354e:	f015 fe4f 	bl	291f0 <AD5940_INTCTestFlag>
   13552:	2800      	cmp	r0, #0
   13554:	d0f8      	beq.n	13548 <AD5940_LFOSCMeasure+0xcc>
  TimerCount = AD5940_SEQTimeOutRd();
   13556:	f015 fc5a 	bl	28e0e <AD5940_SEQTimeOutRd>
   1355a:	4680      	mov	r8, r0
  
  AD5940_WUPTCtrl(bFALSE);
   1355c:	2000      	movs	r0, #0
   1355e:	f015 fcf9 	bl	28f54 <AD5940_WUPTCtrl>
	AD5940_WUPTTime(SEQID_0, 4, 4);	/* Set it to minimum value because we don't care about sequence0 now. We only want to measure how much time MCU will need to read register */
   13562:	2204      	movs	r2, #4
   13564:	4611      	mov	r1, r2
   13566:	2000      	movs	r0, #0
   13568:	f015 fd07 	bl	28f7a <AD5940_WUPTTime>
  seqinfo.SeqId = SEQID_1;
  seqinfo.SeqRamAddr = pCfg->CalSeqAddr + SEQ_LEN(SeqA) ;
   1356c:	6823      	ldr	r3, [r4, #0]
  seqinfo.SeqId = SEQID_1;
   1356e:	2501      	movs	r5, #1
  seqinfo.SeqRamAddr = pCfg->CalSeqAddr + SEQ_LEN(SeqA) ;
   13570:	442b      	add	r3, r5
   13572:	9308      	str	r3, [sp, #32]
  seqinfo.SeqLen = SEQ_LEN(SeqBB);
   13574:	2302      	movs	r3, #2
   13576:	9309      	str	r3, [sp, #36]	; 0x24
  seqinfo.pSeqCmd = SeqBB;
  seqinfo.WriteSRAM = bTRUE;
  AD5940_SEQInfoCfg(&seqinfo);
   13578:	a807      	add	r0, sp, #28
  seqinfo.pSeqCmd = SeqBB;
   1357a:	4b27      	ldr	r3, [pc, #156]	; (13618 <AD5940_LFOSCMeasure+0x19c>)
   1357c:	930b      	str	r3, [sp, #44]	; 0x2c
  seqinfo.SeqId = SEQID_1;
   1357e:	9507      	str	r5, [sp, #28]
  seqinfo.WriteSRAM = bTRUE;
   13580:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
  AD5940_SEQInfoCfg(&seqinfo);
   13584:	f015 fc0d 	bl	28da2 <AD5940_SEQInfoCfg>
  AD5940_SEQCtrlS(bTRUE); /* Enable Sequencer again */
   13588:	4628      	mov	r0, r5
   1358a:	f015 fbda 	bl	28d42 <AD5940_SEQCtrlS>

  AD5940_INTCClrFlag(AFEINTSRC_ENDSEQ);
   1358e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   13592:	f015 fe28 	bl	291e6 <AD5940_INTCClrFlag>
  AD5940_WUPTCtrl(bTRUE);
   13596:	4628      	mov	r0, r5
   13598:	f015 fcdc 	bl	28f54 <AD5940_WUPTCtrl>
  while(AD5940_INTCTestFlag(AFEINTC_1, AFEINTSRC_ENDSEQ) == bFALSE);
   1359c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   135a0:	2001      	movs	r0, #1
   135a2:	f015 fe25 	bl	291f0 <AD5940_INTCTestFlag>
   135a6:	2800      	cmp	r0, #0
   135a8:	d0f8      	beq.n	1359c <AD5940_LFOSCMeasure+0x120>
  TimerCount2 = AD5940_SEQTimeOutRd();
   135aa:	f015 fc30 	bl	28e0e <AD5940_SEQTimeOutRd>
	AD5940_INTCTestFlag(AFEINTC_0, AFEINTSRC_ENDSEQ);
   135ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  TimerCount2 = AD5940_SEQTimeOutRd();
   135b2:	4605      	mov	r5, r0
	AD5940_INTCTestFlag(AFEINTC_0, AFEINTSRC_ENDSEQ);
   135b4:	2000      	movs	r0, #0
   135b6:	f015 fe1b 	bl	291f0 <AD5940_INTCTestFlag>

  AD5940_WUPTCtrl(bFALSE);
   135ba:	2000      	movs	r0, #0
   135bc:	f015 fcca 	bl	28f54 <AD5940_WUPTCtrl>
  AD5940_SEQCfg(&seq_cfg_backup);          /* restore sequencer configuration */
   135c0:	a804      	add	r0, sp, #16
   135c2:	f015 fb6b 	bl	28c9c <AD5940_SEQCfg>
  AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_ENDSEQ, (INTCCfg&AFEINTSRC_ENDSEQ)?bTRUE:bFALSE); /* Restore interrupt configuration */
   135c6:	f3c9 32c0 	ubfx	r2, r9, #15, #1
   135ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   135ce:	2001      	movs	r0, #1
   135d0:	f015 fdf1 	bl	291b6 <AD5940_INTCCfg>
  AD5940_INTCClrFlag(AFEINTSRC_ENDSEQ);
   135d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   135d8:	f015 fe05 	bl	291e6 <AD5940_INTCClrFlag>
  //printf("Time duration:%d ", (TimerCount2 - TimerCount));
	*pFreq = pCfg->SystemClkFreq*WuptPeriod/(TimerCount2 - TimerCount);
   135dc:	4630      	mov	r0, r6
   135de:	f7ed fb63 	bl	ca8 <__aeabi_ui2f>
   135e2:	68a1      	ldr	r1, [r4, #8]
   135e4:	f7ed fbb8 	bl	d58 <__aeabi_fmul>
   135e8:	4604      	mov	r4, r0
   135ea:	eba5 0008 	sub.w	r0, r5, r8
   135ee:	f7ed fb5b 	bl	ca8 <__aeabi_ui2f>
   135f2:	4601      	mov	r1, r0
   135f4:	4620      	mov	r0, r4
   135f6:	f7ed fc63 	bl	ec0 <__aeabi_fdiv>
   135fa:	6038      	str	r0, [r7, #0]
  return AD5940ERR_OK;
   135fc:	2000      	movs	r0, #0
}
   135fe:	b01f      	add	sp, #124	; 0x7c
   13600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(pCfg == NULL) return AD5940ERR_NULLP;
   13604:	f06f 0002 	mvn.w	r0, #2
   13608:	e7f9      	b.n	135fe <AD5940_LFOSCMeasure+0x182>
    return AD5940ERR_PARA;
   1360a:	f06f 0001 	mvn.w	r0, #1
   1360e:	e7f6      	b.n	135fe <AD5940_LFOSCMeasure+0x182>
   13610:	0002ea88 	.word	0x0002ea88
   13614:	0002ea8c 	.word	0x0002ea8c
   13618:	0002ea90 	.word	0x0002ea90

0001361c <button_pressed>:
// interrupt indicator flag (interrupt occurred if ucInterrupted == 1)
volatile static uint8_t ucInterrupted = 0;

// executed when button pressed (interrupt occurred)
void button_pressed(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
   1361c:	b513      	push	{r0, r1, r4, lr}
	const struct gpio_driver_data *const data =
   1361e:	4808      	ldr	r0, [pc, #32]	; (13640 <button_pressed+0x24>)
   13620:	6904      	ldr	r4, [r0, #16]
	return api->port_get_raw(port, value);
   13622:	6883      	ldr	r3, [r0, #8]
   13624:	a901      	add	r1, sp, #4
   13626:	685b      	ldr	r3, [r3, #4]
   13628:	4798      	blx	r3
	if (ret == 0) {
   1362a:	b920      	cbnz	r0, 13636 <button_pressed+0x1a>
		*value ^= data->invert;
   1362c:	6823      	ldr	r3, [r4, #0]
   1362e:	9801      	ldr	r0, [sp, #4]
   13630:	4058      	eors	r0, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   13632:	f3c0 5000 	ubfx	r0, r0, #20, #1
    ucInterrupted = gpio_pin_get_dt(&button);
   13636:	4b03      	ldr	r3, [pc, #12]	; (13644 <button_pressed+0x28>)
   13638:	b2c0      	uxtb	r0, r0
   1363a:	7018      	strb	r0, [r3, #0]
}
   1363c:	b002      	add	sp, #8
   1363e:	bd10      	pop	{r4, pc}
   13640:	0002e264 	.word	0x0002e264
   13644:	20006b29 	.word	0x20006b29

00013648 <gpio_pin_set.constprop.0.isra.0>:
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   13648:	2301      	movs	r3, #1
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   1364a:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1364c:	fa03 f100 	lsl.w	r1, r3, r0
	const struct gpio_driver_data *const data =
   13650:	4b07      	ldr	r3, [pc, #28]	; (13670 <gpio_pin_set.constprop.0.isra.0+0x28>)
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   13652:	6918      	ldr	r0, [r3, #16]
   13654:	6800      	ldr	r0, [r0, #0]
   13656:	4201      	tst	r1, r0
		value = (value != 0) ? 0 : 1;
   13658:	bf18      	it	ne
   1365a:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1365e:	b11a      	cbz	r2, 13668 <gpio_pin_set.constprop.0.isra.0+0x20>
	return api->port_set_bits_raw(port, pins);
   13660:	689b      	ldr	r3, [r3, #8]
   13662:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   13664:	4802      	ldr	r0, [pc, #8]	; (13670 <gpio_pin_set.constprop.0.isra.0+0x28>)
   13666:	4718      	bx	r3
   13668:	689b      	ldr	r3, [r3, #8]
   1366a:	691b      	ldr	r3, [r3, #16]
   1366c:	e7fa      	b.n	13664 <gpio_pin_set.constprop.0.isra.0+0x1c>
   1366e:	bf00      	nop
   13670:	0002e264 	.word	0x0002e264

00013674 <AD5940_GetMCUIntFlag>:
}//end

/////////////////////////////////////////// return interrupt indicator flag
uint32_t AD5940_GetMCUIntFlag(void)
{
    return ucInterrupted;
   13674:	4b01      	ldr	r3, [pc, #4]	; (1367c <AD5940_GetMCUIntFlag+0x8>)
   13676:	7818      	ldrb	r0, [r3, #0]
}//end
   13678:	4770      	bx	lr
   1367a:	bf00      	nop
   1367c:	20006b29 	.word	0x20006b29

00013680 <AD5940_ClrMCUIntFlag>:

/////////////////////////////////////////// clear interrupt indicator flag
uint32_t AD5940_ClrMCUIntFlag(void)
{
    ucInterrupted = 0;
   13680:	4b02      	ldr	r3, [pc, #8]	; (1368c <AD5940_ClrMCUIntFlag+0xc>)
   13682:	2200      	movs	r2, #0
   13684:	701a      	strb	r2, [r3, #0]
    return 1;
}//end
   13686:	2001      	movs	r0, #1
   13688:	4770      	bx	lr
   1368a:	bf00      	nop
   1368c:	20006b29 	.word	0x20006b29

00013690 <AD5940_MCUResourceInit>:
    // .frequency = 1000000,
};

/////////////////////////////////////////// setup function: MCU peripherals (GPIO pins, SPI, interrupt)
uint32_t AD5940_MCUResourceInit(void *pCfg)
{
   13690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // set the AD5941 CS pin and the RESET pin to outputs

    // SIO_31 connected to CS pin
    ret = gpio_pin_configure(gpio_dev, CS_PIN, GPIO_OUTPUT);
   13692:	482a      	ldr	r0, [pc, #168]	; (1373c <AD5940_MCUResourceInit+0xac>)
   13694:	4d2a      	ldr	r5, [pc, #168]	; (13740 <AD5940_MCUResourceInit+0xb0>)
   13696:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1369a:	211f      	movs	r1, #31
   1369c:	f015 fdfd 	bl	2929a <gpio_pin_configure>
    if (ret < 0) { 	printf("error A ... \n\r") ; }
   136a0:	2800      	cmp	r0, #0
    ret = gpio_pin_configure(gpio_dev, CS_PIN, GPIO_OUTPUT);
   136a2:	6028      	str	r0, [r5, #0]
    if (ret < 0) { 	printf("error A ... \n\r") ; }
   136a4:	da02      	bge.n	136ac <AD5940_MCUResourceInit+0x1c>
   136a6:	4827      	ldr	r0, [pc, #156]	; (13744 <AD5940_MCUResourceInit+0xb4>)
   136a8:	f011 feda 	bl	25460 <iprintf>

    // SIO_30 connected to RESET pin
    ret = gpio_pin_configure(gpio_dev, RESET_PIN, GPIO_OUTPUT);
   136ac:	4823      	ldr	r0, [pc, #140]	; (1373c <AD5940_MCUResourceInit+0xac>)
   136ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   136b2:	211e      	movs	r1, #30
   136b4:	f015 fdf1 	bl	2929a <gpio_pin_configure>
    if (ret < 0) { 	printf("error B ... \n\r") ; }
   136b8:	2800      	cmp	r0, #0
    ret = gpio_pin_configure(gpio_dev, RESET_PIN, GPIO_OUTPUT);
   136ba:	6028      	str	r0, [r5, #0]
    if (ret < 0) { 	printf("error B ... \n\r") ; }
   136bc:	da02      	bge.n	136c4 <AD5940_MCUResourceInit+0x34>
   136be:	4822      	ldr	r0, [pc, #136]	; (13748 <AD5940_MCUResourceInit+0xb8>)
   136c0:	f011 fece 	bl	25460 <iprintf>
   136c4:	4821      	ldr	r0, [pc, #132]	; (1374c <AD5940_MCUResourceInit+0xbc>)
   136c6:	f019 fdbc 	bl	2d242 <z_device_is_ready>

    if(!device_is_ready(spi_dev))
   136ca:	b910      	cbnz	r0, 136d2 <AD5940_MCUResourceInit+0x42>
    {
		printf("SPI master device is not ready!\n");
   136cc:	4820      	ldr	r0, [pc, #128]	; (13750 <AD5940_MCUResourceInit+0xc0>)
   136ce:	f011 fec7 	bl	25460 <iprintf>
	return gpio_pin_configure(spec->port,
   136d2:	4c1a      	ldr	r4, [pc, #104]	; (1373c <AD5940_MCUResourceInit+0xac>)
   136d4:	4a1f      	ldr	r2, [pc, #124]	; (13754 <AD5940_MCUResourceInit+0xc4>)
   136d6:	2114      	movs	r1, #20
   136d8:	4620      	mov	r0, r4
   136da:	f015 fdde 	bl	2929a <gpio_pin_configure>
   136de:	4601      	mov	r1, r0
     *  pre-scalar setting (0x20 = 32, F(BitClock) = F(BRCLK) / 32)
     */

    // enable external interrupt on pin
    // configure the input button as input
    ret = gpio_pin_configure_dt(&button, GPIO_INPUT);
   136e0:	6028      	str	r0, [r5, #0]
    if (ret != 0)
   136e2:	b120      	cbz	r0, 136ee <AD5940_MCUResourceInit+0x5e>
    {
        printk("Error %d: failed to configure %s pin %d\n", ret, button.port->name, button.pin);
   136e4:	6822      	ldr	r2, [r4, #0]
   136e6:	481c      	ldr	r0, [pc, #112]	; (13758 <AD5940_MCUResourceInit+0xc8>)
   136e8:	2314      	movs	r3, #20
   136ea:	f015 ff05 	bl	294f8 <printk>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   136ee:	6923      	ldr	r3, [r4, #16]
	const struct gpio_driver_api *api =
   136f0:	68a6      	ldr	r6, [r4, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   136f2:	681b      	ldr	r3, [r3, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   136f4:	69b7      	ldr	r7, [r6, #24]
   136f6:	4811      	ldr	r0, [pc, #68]	; (1373c <AD5940_MCUResourceInit+0xac>)
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   136f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   136fc:	f04f 0114 	mov.w	r1, #20
   13700:	bf0c      	ite	eq
   13702:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
   13706:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
   1370a:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
   1370e:	47b8      	blx	r7
   13710:	4601      	mov	r1, r0
    }

    // configure the interrupt for button
    ret = gpio_pin_interrupt_configure_dt(&button, GPIO_INT_EDGE_TO_ACTIVE);
   13712:	6028      	str	r0, [r5, #0]
    if (ret != 0)
   13714:	b120      	cbz	r0, 13720 <AD5940_MCUResourceInit+0x90>
    {
        printk("Error %d: failed to configure interrupt on %s pin %d\n", ret, button.port->name, button.pin);
   13716:	6822      	ldr	r2, [r4, #0]
   13718:	4810      	ldr	r0, [pc, #64]	; (1375c <AD5940_MCUResourceInit+0xcc>)
   1371a:	2314      	movs	r3, #20
   1371c:	f015 feec 	bl	294f8 <printk>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   13720:	490f      	ldr	r1, [pc, #60]	; (13760 <AD5940_MCUResourceInit+0xd0>)
   13722:	4b10      	ldr	r3, [pc, #64]	; (13764 <AD5940_MCUResourceInit+0xd4>)
   13724:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   13726:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1372a:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1372c:	69f3      	ldr	r3, [r6, #28]
   1372e:	b113      	cbz	r3, 13736 <AD5940_MCUResourceInit+0xa6>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   13730:	4802      	ldr	r0, [pc, #8]	; (1373c <AD5940_MCUResourceInit+0xac>)
   13732:	2201      	movs	r2, #1
   13734:	4798      	blx	r3

    gpio_init_callback(&button_cb_data, button_pressed, BIT(button.pin));
    gpio_add_callback(button.port, &button_cb_data);

    return 0;
}//end
   13736:	2000      	movs	r0, #0
   13738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1373a:	bf00      	nop
   1373c:	0002e264 	.word	0x0002e264
   13740:	20005560 	.word	0x20005560
   13744:	0002f6c0 	.word	0x0002f6c0
   13748:	0002f6cf 	.word	0x0002f6cf
   1374c:	0002e30c 	.word	0x0002e30c
   13750:	0002f6de 	.word	0x0002f6de
   13754:	00010010 	.word	0x00010010
   13758:	0002f6ff 	.word	0x0002f6ff
   1375c:	0002f728 	.word	0x0002f728
   13760:	20005554 	.word	0x20005554
   13764:	0001361d 	.word	0x0001361d

00013768 <AD5940_ReadWriteNBytes>:

//////////////////////////////////////// Read and Write function
void AD5940_ReadWriteNBytes(unsigned char *pSendBuffer, unsigned char *pRecvBuff, unsigned long length)
{
   13768:	b510      	push	{r4, lr}
   1376a:	b088      	sub	sp, #32
	const struct spi_buf tx_buf =
    {
		.buf = pSendBuffer,
		.len = length
	};
	const struct spi_buf_set tx =
   1376c:	2301      	movs	r3, #1
	const struct spi_buf tx_buf =
   1376e:	e9cd 0200 	strd	r0, r2, [sp]
    {
		.buffers = &tx_buf,
		.count = 1
	};

	struct spi_buf rx_buf =
   13772:	9205      	str	r2, [sp, #20]
    {
		.buf = pRecvBuff,
		.len = length,
	};
	const struct spi_buf_set rx =
   13774:	aa04      	add	r2, sp, #16
	struct spi_buf rx_buf =
   13776:	e9cd 3103 	strd	r3, r1, [sp, #12]
	const struct spi_buf_set rx =
   1377a:	e9cd 2306 	strd	r2, r3, [sp, #24]
	const struct spi_buf_set tx =
   1377e:	f8cd d008 	str.w	sp, [sp, #8]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
   13782:	4806      	ldr	r0, [pc, #24]	; (1379c <AD5940_ReadWriteNBytes+0x34>)
   13784:	4906      	ldr	r1, [pc, #24]	; (137a0 <AD5940_ReadWriteNBytes+0x38>)
   13786:	6883      	ldr	r3, [r0, #8]
   13788:	aa02      	add	r2, sp, #8
   1378a:	681c      	ldr	r4, [r3, #0]
   1378c:	ab06      	add	r3, sp, #24
   1378e:	47a0      	blx	r4
		.count = 1
	};

	// Start transaction
	int error = spi_transceive(spi_dev, &spi_cfg, &tx, &rx);
	if(error != 0)
   13790:	b110      	cbz	r0, 13798 <AD5940_ReadWriteNBytes+0x30>
    {
		printf("SPI transceive error \n");
   13792:	4804      	ldr	r0, [pc, #16]	; (137a4 <AD5940_ReadWriteNBytes+0x3c>)
   13794:	f011 fe64 	bl	25460 <iprintf>
	}

 }//end
   13798:	b008      	add	sp, #32
   1379a:	bd10      	pop	{r4, pc}
   1379c:	0002e30c 	.word	0x0002e30c
   137a0:	0002ea98 	.word	0x0002ea98
   137a4:	0002f75e 	.word	0x0002f75e

000137a8 <write_ct>:
}

static ssize_t write_ct(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			const void *buf, uint16_t len, uint16_t offset,
			uint8_t flags)
{
   137a8:	b538      	push	{r3, r4, r5, lr}
   137aa:	460c      	mov	r4, r1
   137ac:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
   137b0:	68e5      	ldr	r5, [r4, #12]

	if (offset + len > sizeof(ct)) {
   137b2:	461c      	mov	r4, r3
   137b4:	18c3      	adds	r3, r0, r3
   137b6:	2b0a      	cmp	r3, #10
{
   137b8:	4611      	mov	r1, r2
	if (offset + len > sizeof(ct)) {
   137ba:	dc08      	bgt.n	137ce <write_ct+0x26>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   137bc:	4622      	mov	r2, r4
   137be:	4428      	add	r0, r5
   137c0:	f01a fb0a 	bl	2ddd8 <memcpy>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	memcpy(value + offset, buf, len);
	ct_update = 1U;
   137c4:	4b03      	ldr	r3, [pc, #12]	; (137d4 <write_ct+0x2c>)
   137c6:	2201      	movs	r2, #1
   137c8:	701a      	strb	r2, [r3, #0]

	return len;
}
   137ca:	4620      	mov	r0, r4
   137cc:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   137ce:	f06f 0406 	mvn.w	r4, #6
   137d2:	e7fa      	b.n	137ca <write_ct+0x22>
   137d4:	20006b34 	.word	0x20006b34

000137d8 <AppCHRONOAMPRegModify.constprop.0.isra.0>:
  AppCHRONOAMPCfg.bMeasureTransient = bFALSE;
  return AD5940ERR_OK;
}

/* Modify registers when AFE wakeup */
static AD5940Err AppCHRONOAMPRegModify(int32_t * const pData, uint32_t *pDataCount)
   137d8:	b570      	push	{r4, r5, r6, lr}
{
	  FIFOCfg_Type fifo_cfg;
		SEQCfg_Type seq_cfg;
	/* Reset dtat FIFO threshold for normal amp */
	if(AppCHRONOAMPCfg.EndSeq)
   137da:	4c1a      	ldr	r4, [pc, #104]	; (13844 <AppCHRONOAMPRegModify.constprop.0.isra.0+0x6c>)
   137dc:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
static AD5940Err AppCHRONOAMPRegModify(int32_t * const pData, uint32_t *pDataCount)
   137e0:	b088      	sub	sp, #32
   137e2:	4605      	mov	r5, r0
	if(AppCHRONOAMPCfg.EndSeq)
   137e4:	b1bb      	cbz	r3, 13816 <AppCHRONOAMPRegModify.constprop.0.isra.0+0x3e>
	{
		AD5940_FIFOCtrlS(FIFOSRC_SINC3, bFALSE);									/* Disable FIFO firstly */
   137e6:	2100      	movs	r1, #0
   137e8:	4608      	mov	r0, r1
   137ea:	f015 fa40 	bl	28c6e <AD5940_FIFOCtrlS>
		fifo_cfg.FIFOEn = bTRUE;
		fifo_cfg.FIFOMode = FIFOMODE_FIFO;
   137ee:	2302      	movs	r3, #2
		fifo_cfg.FIFOSize = FIFOSIZE_4KB;                       /* 4kB for FIFO, The reset 2kB for sequencer */
   137f0:	e9cd 3304 	strd	r3, r3, [sp, #16]
		fifo_cfg.FIFOSrc = FIFOSRC_SINC2NOTCH;
   137f4:	2303      	movs	r3, #3
		fifo_cfg.FIFOEn = bTRUE;
   137f6:	2601      	movs	r6, #1
		fifo_cfg.FIFOSrc = FIFOSRC_SINC2NOTCH;
   137f8:	9306      	str	r3, [sp, #24]
		fifo_cfg.FIFOThresh = AppCHRONOAMPCfg.FifoThresh;              /* DFT result. One pair for RCAL, another for Rz. One DFT result have real part and imaginary part */
		AD5940_FIFOCfg(&fifo_cfg);
   137fa:	a803      	add	r0, sp, #12
		fifo_cfg.FIFOThresh = AppCHRONOAMPCfg.FifoThresh;              /* DFT result. One pair for RCAL, another for Rz. One DFT result have real part and imaginary part */
   137fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   137fe:	9307      	str	r3, [sp, #28]
		fifo_cfg.FIFOEn = bTRUE;
   13800:	f88d 600c 	strb.w	r6, [sp, #12]
		AD5940_FIFOCfg(&fifo_cfg);
   13804:	f015 fa07 	bl	28c16 <AD5940_FIFOCfg>
		
		seq_cfg.SeqEnable = bTRUE;
		AD5940_SEQCfg(&seq_cfg);  /* Enable sequencer, and wait for trigger */
   13808:	4668      	mov	r0, sp
		seq_cfg.SeqEnable = bTRUE;
   1380a:	f88d 6004 	strb.w	r6, [sp, #4]
		AD5940_SEQCfg(&seq_cfg);  /* Enable sequencer, and wait for trigger */
   1380e:	f015 fa45 	bl	28c9c <AD5940_SEQCfg>
		AD5940_ClrMCUIntFlag();   /* Clear interrupt flag generated before */
   13812:	f7ff ff35 	bl	13680 <AD5940_ClrMCUIntFlag>
	}
  if(AppCHRONOAMPCfg.NumOfData > 0)
   13816:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   13818:	2a00      	cmp	r2, #0
   1381a:	dd0d      	ble.n	13838 <AppCHRONOAMPRegModify.constprop.0.isra.0+0x60>
  {
    AppCHRONOAMPCfg.FifoDataCount += *pDataCount/4;
   1381c:	6829      	ldr	r1, [r5, #0]
   1381e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   13822:	eb03 0391 	add.w	r3, r3, r1, lsr #2
    if(AppCHRONOAMPCfg.FifoDataCount >= AppCHRONOAMPCfg.NumOfData)
   13826:	4293      	cmp	r3, r2
    AppCHRONOAMPCfg.FifoDataCount += *pDataCount/4;
   13828:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    if(AppCHRONOAMPCfg.FifoDataCount >= AppCHRONOAMPCfg.NumOfData)
   1382c:	d304      	bcc.n	13838 <AppCHRONOAMPRegModify.constprop.0.isra.0+0x60>
    {
      AD5940_WUPTCtrl(bFALSE);
   1382e:	2000      	movs	r0, #0
   13830:	f015 fb90 	bl	28f54 <AD5940_WUPTCtrl>
  {
    AD5940_WUPTCtrl(bFALSE);
    return AD5940ERR_OK;
  }
  return AD5940ERR_OK;
}
   13834:	b008      	add	sp, #32
   13836:	bd70      	pop	{r4, r5, r6, pc}
  if(AppCHRONOAMPCfg.StopRequired == bTRUE)
   13838:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
   1383c:	2b01      	cmp	r3, #1
   1383e:	d1f9      	bne.n	13834 <AppCHRONOAMPRegModify.constprop.0.isra.0+0x5c>
   13840:	e7f5      	b.n	1382e <AppCHRONOAMPRegModify.constprop.0.isra.0+0x56>
   13842:	bf00      	nop
   13844:	20000558 	.word	0x20000558

00013848 <AppCHRONOAMPGetCfg>:
  if(pCfg){
   13848:	b118      	cbz	r0, 13852 <AppCHRONOAMPGetCfg+0xa>
    *(AppCHRONOAMPCfg_Type**)pCfg = &AppCHRONOAMPCfg;
   1384a:	4b03      	ldr	r3, [pc, #12]	; (13858 <AppCHRONOAMPGetCfg+0x10>)
   1384c:	6003      	str	r3, [r0, #0]
    return AD5940ERR_OK;
   1384e:	2000      	movs	r0, #0
   13850:	4770      	bx	lr
  return AD5940ERR_PARA;
   13852:	f06f 0001 	mvn.w	r0, #1
}
   13856:	4770      	bx	lr
   13858:	20000558 	.word	0x20000558

0001385c <AppCHRONOAMPCtrl>:
{
   1385c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1385e:	4604      	mov	r4, r0
   13860:	b097      	sub	sp, #92	; 0x5c
  switch (AmpCtrl)
   13862:	2805      	cmp	r0, #5
   13864:	d83a      	bhi.n	138dc <AppCHRONOAMPCtrl+0x80>
   13866:	e8df f000 	tbb	[pc, r0]
   1386a:	2f03      	.short	0x2f03
   1386c:	5640393b 	.word	0x5640393b
      if(AppCHRONOAMPCfg.CHRONOAMPInited == bFALSE)
   13870:	4d37      	ldr	r5, [pc, #220]	; (13950 <AppCHRONOAMPCtrl+0xf4>)
      AD5940_ReadReg(REG_AFE_ADCDAT); /* Any SPI Operation can wakeup AFE */
   13872:	f242 0074 	movw	r0, #8308	; 0x2074
   13876:	f7ff f9e1 	bl	12c3c <AD5940_ReadReg>
      if(AppCHRONOAMPCfg.CHRONOAMPInited == bFALSE)
   1387a:	f895 3086 	ldrb.w	r3, [r5, #134]	; 0x86
   1387e:	b923      	cbnz	r3, 1388a <AppCHRONOAMPCtrl+0x2e>
        return AD5940ERR_APPERROR;
   13880:	f06f 0463 	mvn.w	r4, #99	; 0x63
}
   13884:	4620      	mov	r0, r4
   13886:	b017      	add	sp, #92	; 0x5c
   13888:	bdf0      	pop	{r4, r5, r6, r7, pc}
			AD5940_FIFOThrshSet(AppCHRONOAMPCfg.FifoThresh);
   1388a:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1388c:	f015 f9fa 	bl	28c84 <AD5940_FIFOThrshSet>
			seq_cfg.SeqEnable = bTRUE;
   13890:	4b30      	ldr	r3, [pc, #192]	; (13954 <AppCHRONOAMPCtrl+0xf8>)
   13892:	2701      	movs	r7, #1
			seq_cfg.SeqWrTimer = 0;
   13894:	2600      	movs	r6, #0
			AD5940_SEQCfg(&seq_cfg);
   13896:	4668      	mov	r0, sp
			seq_cfg.SeqEnable = bTRUE;
   13898:	e9cd 7300 	strd	r7, r3, [sp]
			seq_cfg.SeqWrTimer = 0;
   1389c:	9602      	str	r6, [sp, #8]
			AD5940_SEQCfg(&seq_cfg);
   1389e:	f015 f9fd 	bl	28c9c <AD5940_SEQCfg>
      wupt_cfg.SeqxWakeupTime[SEQID_0] = (uint32_t)(AppCHRONOAMPCfg.WuptClkFreq*AppCHRONOAMPCfg.AmpODR)-2-1;
   138a2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   138a4:	69e8      	ldr	r0, [r5, #28]
      wupt_cfg.WuptEn = bTRUE;
   138a6:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
      wupt_cfg.WuptOrder[0] = SEQID_0;
   138aa:	e9cd 6604 	strd	r6, r6, [sp, #16]
      wupt_cfg.SeqxSleepTime[SEQID_0] = 1; /* The minimum value is 1. Do not set it to zero. Set it to 1 will spend 2 32kHz clock. */
   138ae:	970d      	str	r7, [sp, #52]	; 0x34
      wupt_cfg.SeqxWakeupTime[SEQID_0] = (uint32_t)(AppCHRONOAMPCfg.WuptClkFreq*AppCHRONOAMPCfg.AmpODR)-2-1;
   138b0:	f7ed fa52 	bl	d58 <__aeabi_fmul>
   138b4:	f7ed fc3c 	bl	1130 <__aeabi_f2uiz>
   138b8:	3803      	subs	r0, #3
   138ba:	9011      	str	r0, [sp, #68]	; 0x44
      AD5940_WUPTCfg(&wupt_cfg);
   138bc:	a804      	add	r0, sp, #16
   138be:	f015 faaa 	bl	28e16 <AD5940_WUPTCfg>
      AppCHRONOAMPCfg.FifoDataCount = 0;  /* restart */
   138c2:	f8c5 60c8 	str.w	r6, [r5, #200]	; 0xc8
      break;
   138c6:	e7dd      	b.n	13884 <AppCHRONOAMPCtrl+0x28>
      AD5940_ReadReg(REG_AFE_ADCDAT); /* Any SPI Operation can wakeup AFE */
   138c8:	f242 0074 	movw	r0, #8308	; 0x2074
   138cc:	f7ff f9b6 	bl	12c3c <AD5940_ReadReg>
      AD5940_WUPTCtrl(bFALSE);
   138d0:	2000      	movs	r0, #0
   138d2:	f015 fb3f 	bl	28f54 <AD5940_WUPTCtrl>
      AD5940_WUPTCtrl(bFALSE);
   138d6:	2000      	movs	r0, #0
   138d8:	f015 fb3c 	bl	28f54 <AD5940_WUPTCtrl>
  switch (AmpCtrl)
   138dc:	2400      	movs	r4, #0
   138de:	e7d1      	b.n	13884 <AppCHRONOAMPCtrl+0x28>
      AppCHRONOAMPCfg.StopRequired = bTRUE;
   138e0:	4b1b      	ldr	r3, [pc, #108]	; (13950 <AppCHRONOAMPCtrl+0xf4>)
   138e2:	2201      	movs	r2, #1
   138e4:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
      break;
   138e8:	e7f8      	b.n	138dc <AppCHRONOAMPCtrl+0x80>
      AppCHRONOAMPCtrl(CHRONOAMPCTRL_STOPNOW, 0);  /* Stop the measurement if it's running. */
   138ea:	2100      	movs	r1, #0
   138ec:	2001      	movs	r0, #1
   138ee:	f7ff ffb5 	bl	1385c <AppCHRONOAMPCtrl>
      memset(&aferef_cfg, 0, sizeof(aferef_cfg));
   138f2:	220d      	movs	r2, #13
   138f4:	2100      	movs	r1, #0
   138f6:	4668      	mov	r0, sp
   138f8:	f01a fa8f 	bl	2de1a <memset>
      AD5940_REFCfgS(&aferef_cfg);
   138fc:	4668      	mov	r0, sp
   138fe:	f014 ff56 	bl	287ae <AD5940_REFCfgS>
      memset(&lp_loop, 0, sizeof(lp_loop));
   13902:	223c      	movs	r2, #60	; 0x3c
   13904:	2100      	movs	r1, #0
   13906:	a804      	add	r0, sp, #16
   13908:	f01a fa87 	bl	2de1a <memset>
      AD5940_LPLoopCfgS(&lp_loop);
   1390c:	a804      	add	r0, sp, #16
   1390e:	f015 f8dd 	bl	28acc <AD5940_LPLoopCfgS>
      AD5940_EnterSleepS();  /* Enter Hibernate */
   13912:	f015 fca7 	bl	29264 <AD5940_EnterSleepS>
		AD5940_WUPTCtrl(bFALSE);
   13916:	2000      	movs	r0, #0
   13918:	f015 fb1c 	bl	28f54 <AD5940_WUPTCtrl>
		AppCHRONOAMPCfg.bMeasureTransient = bTRUE;
   1391c:	4c0c      	ldr	r4, [pc, #48]	; (13950 <AppCHRONOAMPCtrl+0xf4>)
		AD5940_FIFOCtrlS(FIFOSRC_SINC3, bFALSE);									/* Disable FIFO firstly */
   1391e:	2100      	movs	r1, #0
   13920:	4608      	mov	r0, r1
		AppCHRONOAMPCfg.bMeasureTransient = bTRUE;
   13922:	2501      	movs	r5, #1
   13924:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
		AD5940_FIFOCtrlS(FIFOSRC_SINC3, bFALSE);									/* Disable FIFO firstly */
   13928:	f015 f9a1 	bl	28c6e <AD5940_FIFOCtrlS>
		fifo_cfg.FIFOMode = FIFOMODE_FIFO;
   1392c:	2302      	movs	r3, #2
		fifo_cfg.FIFOSize = FIFOSIZE_4KB;                       /* 4kB for FIFO, The reset 2kB for sequencer */
   1392e:	e9cd 3305 	strd	r3, r3, [sp, #20]
		fifo_cfg.FIFOThresh = 1000;              
   13932:	2203      	movs	r2, #3
   13934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		AD5940_FIFOCfg(&fifo_cfg);
   13938:	a804      	add	r0, sp, #16
		fifo_cfg.FIFOThresh = 1000;              
   1393a:	e9cd 2307 	strd	r2, r3, [sp, #28]
		fifo_cfg.FIFOEn = bTRUE;
   1393e:	f88d 5010 	strb.w	r5, [sp, #16]
		AD5940_FIFOCfg(&fifo_cfg);
   13942:	f015 f968 	bl	28c16 <AD5940_FIFOCfg>
		AD5940_SEQMmrTrig(AppCHRONOAMPCfg.TransientSeqInfo.SeqId); 
   13946:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   1394a:	f015 fa0d 	bl	28d68 <AD5940_SEQMmrTrig>
    break;
   1394e:	e7c5      	b.n	138dc <AppCHRONOAMPCtrl+0x80>
   13950:	20000558 	.word	0x20000558
   13954:	01000001 	.word	0x01000001

00013958 <AppCHRONOAMPCalcDataNum>:
  
  return 0;
} 

uint32_t AppCHRONOAMPCalcDataNum(uint32_t time)
{
   13958:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t temp = 0;
  const uint32_t sinc2osr_table[] = {22,44,89,178,267,533,640,667,800,889,1067,1333,0};
   1395a:	4e15      	ldr	r6, [pc, #84]	; (139b0 <AppCHRONOAMPCalcDataNum+0x58>)
   1395c:	4635      	mov	r5, r6
{
   1395e:	4607      	mov	r7, r0
  const uint32_t sinc2osr_table[] = {22,44,89,178,267,533,640,667,800,889,1067,1333,0};
   13960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   13962:	b093      	sub	sp, #76	; 0x4c
  const uint32_t sinc2osr_table[] = {22,44,89,178,267,533,640,667,800,889,1067,1333,0};
   13964:	ac05      	add	r4, sp, #20
   13966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   13968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1396a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1396c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1396e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   13970:	682b      	ldr	r3, [r5, #0]
   13972:	6023      	str	r3, [r4, #0]
  const uint32_t sinc3osr_table[] = {5,4,2,0};
   13974:	f106 0334 	add.w	r3, r6, #52	; 0x34
   13978:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1397a:	ac01      	add	r4, sp, #4
   1397c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  temp = time*800/sinc2osr_table[AppCHRONOAMPCfg.ADCSinc2Osr]/sinc3osr_table[AppCHRONOAMPCfg.ADCSinc3Osr];
   13980:	4a0c      	ldr	r2, [pc, #48]	; (139b4 <AppCHRONOAMPCalcDataNum+0x5c>)
   13982:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
   13986:	a912      	add	r1, sp, #72	; 0x48
   13988:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1398c:	f44f 7048 	mov.w	r0, #800	; 0x320
   13990:	4347      	muls	r7, r0
   13992:	f853 0c34 	ldr.w	r0, [r3, #-52]
   13996:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
   1399a:	fbb7 f7f0 	udiv	r7, r7, r0
   1399e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   139a2:	f853 0c44 	ldr.w	r0, [r3, #-68]
  
  return temp;
}
   139a6:	fbb7 f0f0 	udiv	r0, r7, r0
   139aa:	b013      	add	sp, #76	; 0x4c
   139ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   139ae:	bf00      	nop
   139b0:	0002e910 	.word	0x0002e910
   139b4:	20000558 	.word	0x20000558

000139b8 <AppCHRONOAMPInit>:
{
   139b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   139bc:	4606      	mov	r6, r0
   139be:	b0ca      	sub	sp, #296	; 0x128
  AD5940_ReadReg(REG_AFE_ADCDAT); /* Any SPI Operation can wakeup AFE */
   139c0:	f242 0074 	movw	r0, #8308	; 0x2074
{
   139c4:	460f      	mov	r7, r1
  if(((AppCHRONOAMPCfg.ReDoRtiaCal == bTRUE) || \
   139c6:	4ccb      	ldr	r4, [pc, #812]	; (13cf4 <AppCHRONOAMPInit+0x33c>)
  AD5940_ReadReg(REG_AFE_ADCDAT); /* Any SPI Operation can wakeup AFE */
   139c8:	f7ff f938 	bl	12c3c <AD5940_ReadReg>
  seq_cfg.SeqEnable = bFALSE;
   139cc:	2201      	movs	r2, #1
   139ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   139d2:	e9cd 2303 	strd	r2, r3, [sp, #12]
  AD5940_SEQCfg(&seq_cfg);
   139d6:	a803      	add	r0, sp, #12
  seq_cfg.SeqWrTimer = 0;
   139d8:	2300      	movs	r3, #0
   139da:	9305      	str	r3, [sp, #20]
  AD5940_SEQCfg(&seq_cfg);
   139dc:	f015 f95e 	bl	28c9c <AD5940_SEQCfg>
  if(((AppCHRONOAMPCfg.ReDoRtiaCal == bTRUE) || \
   139e0:	7d23      	ldrb	r3, [r4, #20]
   139e2:	2b01      	cmp	r3, #1
   139e4:	d003      	beq.n	139ee <AppCHRONOAMPInit+0x36>
   139e6:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
   139ea:	2b00      	cmp	r3, #0
   139ec:	d137      	bne.n	13a5e <AppCHRONOAMPInit+0xa6>
      AppCHRONOAMPCfg.CHRONOAMPInited == bFALSE) && AppCHRONOAMPCfg.ExtRtia == bFALSE)
   139ee:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   139f2:	2d00      	cmp	r5, #0
   139f4:	d133      	bne.n	13a5e <AppCHRONOAMPInit+0xa6>
  AD5940_StructInit(&lprtia_cal, sizeof(lprtia_cal));
   139f6:	2138      	movs	r1, #56	; 0x38
   139f8:	a82e      	add	r0, sp, #184	; 0xb8
   139fa:	f014 fde7 	bl	285cc <AD5940_StructInit>
  lprtia_cal.SysClkFreq = AppCHRONOAMPCfg.SysClkFreq;
   139fe:	69a2      	ldr	r2, [r4, #24]
  lprtia_cal.AdcClkFreq = AppCHRONOAMPCfg.AdcClkFreq;
   13a00:	6a20      	ldr	r0, [r4, #32]
  lprtia_cal.SysClkFreq = AppCHRONOAMPCfg.SysClkFreq;
   13a02:	9230      	str	r2, [sp, #192]	; 0xc0
  lprtia_cal.bPolarResult = bTRUE;                /* Magnitude + Phase */
   13a04:	2301      	movs	r3, #1
  lprtia_cal.DftCfg.DftNum = DFTNUM_2048;         /* Maximum DFT number */
   13a06:	2209      	movs	r2, #9
  lprtia_cal.fFreq = AppCHRONOAMPCfg.AdcClkFreq/4/22/2048*3;  /* Sample 3 period of signal, 13.317Hz here. Do not use DC method, because it needs ADC/PGA calibrated firstly(but it's faster) */
   13a08:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
  lprtia_cal.ADCSinc2Osr = ADCSINC2OSR_22;        /* Use SINC2 data as DFT data source */
   13a0c:	e9cd 3536 	strd	r3, r5, [sp, #216]	; 0xd8
  lprtia_cal.DftCfg.DftSrc = DFTSRC_SINC2NOTCH;
   13a10:	e9cd 2538 	strd	r2, r5, [sp, #224]	; 0xe0
  lprtia_cal.bPolarResult = bTRUE;                /* Magnitude + Phase */
   13a14:	933b      	str	r3, [sp, #236]	; 0xec
  lprtia_cal.DftCfg.HanWinEn = bTRUE;
   13a16:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
  lprtia_cal.LpAmpSel = LPAMP0;
   13a1a:	9532      	str	r5, [sp, #200]	; 0xc8
  lprtia_cal.AdcClkFreq = AppCHRONOAMPCfg.AdcClkFreq;
   13a1c:	9031      	str	r0, [sp, #196]	; 0xc4
  lprtia_cal.fFreq = AppCHRONOAMPCfg.AdcClkFreq/4/22/2048*3;  /* Sample 3 period of signal, 13.317Hz here. Do not use DC method, because it needs ADC/PGA calibrated firstly(but it's faster) */
   13a1e:	f7ed f99b 	bl	d58 <__aeabi_fmul>
   13a22:	49b5      	ldr	r1, [pc, #724]	; (13cf8 <AppCHRONOAMPInit+0x340>)
   13a24:	f7ed fa4c 	bl	ec0 <__aeabi_fdiv>
   13a28:	f04f 5168 	mov.w	r1, #973078528	; 0x3a000000
   13a2c:	f7ed f994 	bl	d58 <__aeabi_fmul>
   13a30:	49b2      	ldr	r1, [pc, #712]	; (13cfc <AppCHRONOAMPInit+0x344>)
   13a32:	f7ed f991 	bl	d58 <__aeabi_fmul>
  AD5940_LPRtiaCal(&lprtia_cal, &RtiaCalValue);
   13a36:	f10d 0878 	add.w	r8, sp, #120	; 0x78
  lprtia_cal.fRcal = AppCHRONOAMPCfg.RcalVal;
   13a3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  lprtia_cal.fFreq = AppCHRONOAMPCfg.AdcClkFreq/4/22/2048*3;  /* Sample 3 period of signal, 13.317Hz here. Do not use DC method, because it needs ADC/PGA calibrated firstly(but it's faster) */
   13a3c:	902e      	str	r0, [sp, #184]	; 0xb8
  lprtia_cal.fRcal = AppCHRONOAMPCfg.RcalVal;
   13a3e:	932f      	str	r3, [sp, #188]	; 0xbc
  AD5940_LPRtiaCal(&lprtia_cal, &RtiaCalValue);
   13a40:	4641      	mov	r1, r8
  lprtia_cal.LpTiaRtia = AppCHRONOAMPCfg.LptiaRtiaSel;
   13a42:	6c63      	ldr	r3, [r4, #68]	; 0x44
   13a44:	9334      	str	r3, [sp, #208]	; 0xd0
  AD5940_LPRtiaCal(&lprtia_cal, &RtiaCalValue);
   13a46:	a82e      	add	r0, sp, #184	; 0xb8
  lprtia_cal.LpAmpPwrMod = LPAMPPWR_NORM;
   13a48:	9535      	str	r5, [sp, #212]	; 0xd4
  lprtia_cal.bWithCtia = bFALSE;
   13a4a:	f88d 50cc 	strb.w	r5, [sp, #204]	; 0xcc
  AD5940_LPRtiaCal(&lprtia_cal, &RtiaCalValue);
   13a4e:	f7ff fa01 	bl	12e54 <AD5940_LPRtiaCal>
  AppCHRONOAMPCfg.RtiaCalValue = RtiaCalValue;
   13a52:	e898 0003 	ldmia.w	r8, {r0, r1}
   13a56:	4baa      	ldr	r3, [pc, #680]	; (13d00 <AppCHRONOAMPInit+0x348>)
    AppCHRONOAMPCfg.ReDoRtiaCal = bFALSE;
   13a58:	7525      	strb	r5, [r4, #20]
  AppCHRONOAMPCfg.RtiaCalValue = RtiaCalValue;
   13a5a:	e883 0003 	stmia.w	r3, {r0, r1}
  AD5940_FIFOCtrlS(FIFOSRC_SINC3, bFALSE);									/* Disable FIFO firstly */
   13a5e:	2100      	movs	r1, #0
   13a60:	4608      	mov	r0, r1
   13a62:	f015 f904 	bl	28c6e <AD5940_FIFOCtrlS>
  fifo_cfg.FIFOEn = bTRUE;
   13a66:	2301      	movs	r3, #1
   13a68:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  fifo_cfg.FIFOMode = FIFOMODE_FIFO;
   13a6c:	2302      	movs	r3, #2
  fifo_cfg.FIFOSize = FIFOSIZE_4KB;                       /* 4kB for FIFO, The reset 2kB for sequencer */
   13a6e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  fifo_cfg.FIFOSrc = FIFOSRC_SINC2NOTCH;
   13a72:	2303      	movs	r3, #3
   13a74:	930d      	str	r3, [sp, #52]	; 0x34
  AD5940_FIFOCfg(&fifo_cfg);
   13a76:	a80a      	add	r0, sp, #40	; 0x28
  fifo_cfg.FIFOThresh = AppCHRONOAMPCfg.FifoThresh;              /* DFT result. One pair for RCAL, another for Rz. One DFT result have real part and imaginary part */
   13a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13a7a:	930e      	str	r3, [sp, #56]	; 0x38
  AD5940_FIFOCfg(&fifo_cfg);
   13a7c:	f015 f8cb 	bl	28c16 <AD5940_FIFOCfg>
  AD5940_INTCClrFlag(AFEINTSRC_ALLINT);
   13a80:	f04f 30ff 	mov.w	r0, #4294967295
   13a84:	f015 fbaf 	bl	291e6 <AD5940_INTCClrFlag>
  if((AppCHRONOAMPCfg.CHRONOAMPInited == bFALSE)||\
   13a88:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
   13a8c:	b11b      	cbz	r3, 13a96 <AppCHRONOAMPInit+0xde>
   13a8e:	7823      	ldrb	r3, [r4, #0]
   13a90:	2b01      	cmp	r3, #1
   13a92:	f040 81b0 	bne.w	13df6 <AppCHRONOAMPInit+0x43e>
    if(pBuffer == 0)  return AD5940ERR_PARA;
   13a96:	2e00      	cmp	r6, #0
   13a98:	f000 81ea 	beq.w	13e70 <AppCHRONOAMPInit+0x4b8>
    if(BufferSize == 0) return AD5940ERR_PARA;   
   13a9c:	2f00      	cmp	r7, #0
   13a9e:	f000 81e7 	beq.w	13e70 <AppCHRONOAMPInit+0x4b8>
    AD5940_SEQGenInit(pBuffer, BufferSize);
   13aa2:	4639      	mov	r1, r7
   13aa4:	4630      	mov	r0, r6
   13aa6:	f7fe fee5 	bl	12874 <AD5940_SEQGenInit>
  AD5940_SEQGenCtrl(bTRUE);
   13aaa:	2001      	movs	r0, #1
   13aac:	f7fe ff02 	bl	128b4 <AD5940_SEQGenCtrl>
  aferef_cfg.Disc1V1Cap = bFALSE;
   13ab0:	2500      	movs	r5, #0
  aferef_cfg.HpBandgapEn = bTRUE;
   13ab2:	2301      	movs	r3, #1
  AD5940_REFCfgS(&aferef_cfg);	
   13ab4:	a806      	add	r0, sp, #24
  aferef_cfg.HpBandgapEn = bTRUE;
   13ab6:	f88d 3018 	strb.w	r3, [sp, #24]
  aferef_cfg.Hp1V1BuffEn = bTRUE;
   13aba:	f88d 301a 	strb.w	r3, [sp, #26]
  aferef_cfg.Hp1V8BuffEn = bTRUE;
   13abe:	f88d 3019 	strb.w	r3, [sp, #25]
  aferef_cfg.Disc1V1Cap = bFALSE;
   13ac2:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
  aferef_cfg.Disc1V8Cap = bFALSE;
   13ac6:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
  aferef_cfg.Hp1V8ThemBuff = bFALSE;
   13aca:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
  aferef_cfg.Hp1V8Ilimit = bFALSE;
   13ace:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
  aferef_cfg.Lp1V1BuffEn = bTRUE;
   13ad2:	f88d 301c 	strb.w	r3, [sp, #28]
  aferef_cfg.Lp1V8BuffEn = bTRUE;
   13ad6:	f88d 301b 	strb.w	r3, [sp, #27]
  aferef_cfg.LpBandgapEn = bTRUE;
   13ada:	f88d 301d 	strb.w	r3, [sp, #29]
  aferef_cfg.LpRefBufEn = bTRUE;
   13ade:	f88d 301e 	strb.w	r3, [sp, #30]
  aferef_cfg.LpRefBoostEn = bFALSE;
   13ae2:	f88d 501f 	strb.w	r5, [sp, #31]
  AD5940_REFCfgS(&aferef_cfg);	
   13ae6:	f014 fe62 	bl	287ae <AD5940_REFCfgS>
  lp_loop.LpDacCfg.LpDacSW = LPDACSW_VBIAS2LPPA|/*LPDACSW_VBIAS2PIN|*/LPDACSW_VZERO2LPTIA|LPDACSW_VZERO2PIN;
   13aea:	2316      	movs	r3, #22
  lp_loop.LpDacCfg.LpDacRef = LPDACREF_2P5;
   13aec:	e9cd 3513 	strd	r3, r5, [sp, #76]	; 0x4c
	lp_loop.LpDacCfg.DacData6Bit = (uint32_t)((AppCHRONOAMPCfg.Vzero-200)/DAC6BITVOLT_1LSB);
   13af0:	4984      	ldr	r1, [pc, #528]	; (13d04 <AppCHRONOAMPInit+0x34c>)
   13af2:	6e60      	ldr	r0, [r4, #100]	; 0x64
  lp_loop.LpDacCfg.DataRst = bFALSE;
   13af4:	f44f 7380 	mov.w	r3, #256	; 0x100
   13af8:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
  lp_loop.LpDacCfg.LpDacSrc = LPDACSRC_MMR;
   13afc:	e9cd 550f 	strd	r5, r5, [sp, #60]	; 0x3c
  lp_loop.LpDacCfg.LpDacVbiasMux = LPDACVBIAS_12BIT;
   13b00:	e9cd 5511 	strd	r5, r5, [sp, #68]	; 0x44
	lp_loop.LpDacCfg.DacData6Bit = (uint32_t)((AppCHRONOAMPCfg.Vzero-200)/DAC6BITVOLT_1LSB);
   13b04:	f7ed f81e 	bl	b44 <__aeabi_fsub>
   13b08:	497f      	ldr	r1, [pc, #508]	; (13d08 <AppCHRONOAMPInit+0x350>)
   13b0a:	f7ed f9d9 	bl	ec0 <__aeabi_fdiv>
   13b0e:	f7ed fb0f 	bl	1130 <__aeabi_f2uiz>
	lp_loop.LpDacCfg.DacData12Bit =(int32_t)((AppCHRONOAMPCfg.SensorBias)/DAC12BITVOLT_1LSB) + lp_loop.LpDacCfg.DacData6Bit*64;
   13b12:	497e      	ldr	r1, [pc, #504]	; (13d0c <AppCHRONOAMPInit+0x354>)
	lp_loop.LpDacCfg.DacData6Bit = (uint32_t)((AppCHRONOAMPCfg.Vzero-200)/DAC6BITVOLT_1LSB);
   13b14:	b287      	uxth	r7, r0
	lp_loop.LpDacCfg.DacData12Bit =(int32_t)((AppCHRONOAMPCfg.SensorBias)/DAC12BITVOLT_1LSB) + lp_loop.LpDacCfg.DacData6Bit*64;
   13b16:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
	lp_loop.LpDacCfg.DacData6Bit = (uint32_t)((AppCHRONOAMPCfg.Vzero-200)/DAC6BITVOLT_1LSB);
   13b18:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	lp_loop.LpDacCfg.DacData12Bit =(int32_t)((AppCHRONOAMPCfg.SensorBias)/DAC12BITVOLT_1LSB) + lp_loop.LpDacCfg.DacData6Bit*64;
   13b1c:	f7ed f9d0 	bl	ec0 <__aeabi_fdiv>
   13b20:	f7ed fae0 	bl	10e4 <__aeabi_f2iz>
   13b24:	eb00 1387 	add.w	r3, r0, r7, lsl #6
   13b28:	b29b      	uxth	r3, r3
	if(lp_loop.LpDacCfg.DacData12Bit>lp_loop.LpDacCfg.DacData6Bit*64)
   13b2a:	ebb3 1f87 	cmp.w	r3, r7, lsl #6
		lp_loop.LpDacCfg.DacData12Bit--;
   13b2e:	bfc8      	it	gt
   13b30:	f103 33ff 	addgt.w	r3, r3, #4294967295
   13b34:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
  lp_loop.LpAmpCfg.LpPaPwrEn = bTRUE;
   13b38:	f240 1301 	movw	r3, #257	; 0x101
   13b3c:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
  lp_loop.LpAmpCfg.LpTiaRf = AppCHRONOAMPCfg.LpTiaRf;
   13b40:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   13b42:	9318      	str	r3, [sp, #96]	; 0x60
  lp_loop.LpAmpCfg.LpTiaRload = AppCHRONOAMPCfg.LpTiaRl;	
   13b44:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   13b46:	9319      	str	r3, [sp, #100]	; 0x64
	if(AppCHRONOAMPCfg.ExtRtia == bTRUE)
   13b48:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
  lp_loop.LpAmpCfg.LpAmpSel = LPAMP0;
   13b4c:	9517      	str	r5, [sp, #92]	; 0x5c
	if(AppCHRONOAMPCfg.ExtRtia == bTRUE)
   13b4e:	2b01      	cmp	r3, #1
    lp_loop.LpAmpCfg.LpTiaRtia = AppCHRONOAMPCfg.LptiaRtiaSel;
   13b50:	bf1b      	ittet	ne
   13b52:	6c63      	ldrne	r3, [r4, #68]	; 0x44
   13b54:	931a      	strne	r3, [sp, #104]	; 0x68
    lp_loop.LpAmpCfg.LpTiaSW = LPTIASW(9)|LPTIASW(2)|LPTIASW(4)|LPTIASW(5)/*|LPTIASW(12)*/|LPTIASW(13); 
   13b56:	f242 2334 	movweq	r3, #8756	; 0x2234
    lp_loop.LpAmpCfg.LpTiaSW = LPTIASW(5)|LPTIASW(2)|LPTIASW(4)/*|LPTIASW(12)*/|LPTIASW(13); 
   13b5a:	f242 0334 	movwne	r3, #8244	; 0x2034
  AD5940_LPLoopCfgS(&lp_loop);
   13b5e:	a80f      	add	r0, sp, #60	; 0x3c
    lp_loop.LpAmpCfg.LpTiaRtia = LPTIARTIA_OPEN;
   13b60:	bf08      	it	eq
   13b62:	951a      	streq	r5, [sp, #104]	; 0x68
  lp_loop.LpAmpCfg.LpAmpPwrMod = LPAMPPWR_NORM;
   13b64:	951b      	str	r5, [sp, #108]	; 0x6c
    lp_loop.LpAmpCfg.LpTiaSW = LPTIASW(5)|LPTIASW(2)|LPTIASW(4)/*|LPTIASW(12)*/|LPTIASW(13); 
   13b66:	931c      	str	r3, [sp, #112]	; 0x70
  dsp_cfg.ADCBaseCfg.ADCMuxP = ADCMUXP_LPTIA0_P;
   13b68:	f04f 0802 	mov.w	r8, #2
  AD5940_LPLoopCfgS(&lp_loop);
   13b6c:	f014 ffae 	bl	28acc <AD5940_LPLoopCfgS>
  dsp_cfg.ADCBaseCfg.ADCMuxP = ADCMUXP_LPTIA0_P;
   13b70:	2321      	movs	r3, #33	; 0x21
   13b72:	e9cd 381e 	strd	r3, r8, [sp, #120]	; 0x78
  dsp_cfg.ADCBaseCfg.ADCPga = AppCHRONOAMPCfg.ADCPgaGain;
   13b76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13b78:	9320      	str	r3, [sp, #128]	; 0x80
  dsp_cfg.ADCFilterCfg.ADCSinc2Osr = AppCHRONOAMPCfg.ADCSinc2Osr;
   13b7a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   13b7e:	9322      	str	r3, [sp, #136]	; 0x88
  dsp_cfg.ADCFilterCfg.ADCSinc3Osr = AppCHRONOAMPCfg.ADCSinc3Osr;
   13b80:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   13b84:	9321      	str	r3, [sp, #132]	; 0x84
  memset(&dsp_cfg.ADCDigCompCfg, 0, sizeof(dsp_cfg.ADCDigCompCfg));
   13b86:	2600      	movs	r6, #0
  dsp_cfg.ADCFilterCfg.ADCRate = ADCRATE_800KHZ;	/* Tell filter block clock rate of ADC*/
   13b88:	2303      	movs	r3, #3
   13b8a:	2701      	movs	r7, #1
  AD5940_DSPCfgS(&dsp_cfg);
   13b8c:	a81e      	add	r0, sp, #120	; 0x78
  dsp_cfg.ADCFilterCfg.ADCRate = ADCRATE_800KHZ;	/* Tell filter block clock rate of ADC*/
   13b8e:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
  memset(&dsp_cfg.ADCDigCompCfg, 0, sizeof(dsp_cfg.ADCDigCompCfg));
   13b92:	e9cd 6626 	strd	r6, r6, [sp, #152]	; 0x98
  memset(&dsp_cfg.StatCfg, 0, sizeof(dsp_cfg.StatCfg)); /* Don't care about Statistic */
   13b96:	e9cd 662b 	strd	r6, r6, [sp, #172]	; 0xac
  dsp_cfg.ADCFilterCfg.BpNotch = bTRUE;
   13b9a:	f8ad 7094 	strh.w	r7, [sp, #148]	; 0x94
  dsp_cfg.ADCFilterCfg.Sinc2NotchEnable = bTRUE;
   13b9e:	f88d 7096 	strb.w	r7, [sp, #150]	; 0x96
  memset(&dsp_cfg.StatCfg, 0, sizeof(dsp_cfg.StatCfg)); /* Don't care about Statistic */
   13ba2:	962d      	str	r6, [sp, #180]	; 0xb4
  AD5940_DSPCfgS(&dsp_cfg);
   13ba4:	f015 f821 	bl	28bea <AD5940_DSPCfgS>
  AD5940_HSLoopCfgS(&hs_loop);
   13ba8:	a82e      	add	r0, sp, #184	; 0xb8
  hs_loop.SWMatCfg.Pswitch = 0;
   13baa:	e9cd 662e 	strd	r6, r6, [sp, #184]	; 0xb8
  hs_loop.SWMatCfg.Tswitch = 0; 
   13bae:	e9cd 6630 	strd	r6, r6, [sp, #192]	; 0xc0
  AD5940_HSLoopCfgS(&hs_loop);
   13bb2:	f014 fef6 	bl	289a2 <AD5940_HSLoopCfgS>
  AD5940_AFECtrlS(AFECTRL_HPREFPWR|AFECTRL_SINC2NOTCH, bTRUE);
   13bb6:	4639      	mov	r1, r7
   13bb8:	4855      	ldr	r0, [pc, #340]	; (13d10 <AppCHRONOAMPInit+0x358>)
   13bba:	f014 fdc6 	bl	2874a <AD5940_AFECtrlS>
  AD5940_SEQGpioCtrlS(0);     
   13bbe:	4630      	mov	r0, r6
   13bc0:	f015 f920 	bl	28e04 <AD5940_SEQGpioCtrlS>
  AD5940_SEQGenInsert(SEQ_STOP()); /* Add one extra command to disable sequencer for initialization sequence because we only want it to run one time. */
   13bc4:	f04f 4001 	mov.w	r0, #2164260864	; 0x81000000
   13bc8:	f7fe fe3e 	bl	12848 <AD5940_SEQGenInsert>
  error = AD5940_SEQGenFetchSeq(&pSeqCmd, &SeqLen);
   13bcc:	a902      	add	r1, sp, #8
   13bce:	a801      	add	r0, sp, #4
   13bd0:	f7fe fe64 	bl	1289c <AD5940_SEQGenFetchSeq>
   13bd4:	4605      	mov	r5, r0
  AD5940_SEQGenCtrl(bFALSE); /* Stop sequencer generator */
   13bd6:	4630      	mov	r0, r6
   13bd8:	f7fe fe6c 	bl	128b4 <AD5940_SEQGenCtrl>
  if(error == AD5940ERR_OK)
   13bdc:	2d00      	cmp	r5, #0
   13bde:	f040 8143 	bne.w	13e68 <AppCHRONOAMPInit+0x4b0>
    AppCHRONOAMPCfg.InitSeqInfo.SeqLen = SeqLen;
   13be2:	9a02      	ldr	r2, [sp, #8]
    AppCHRONOAMPCfg.InitSeqInfo.SeqRamAddr = AppCHRONOAMPCfg.SeqStartAddr;
   13be4:	6860      	ldr	r0, [r4, #4]
    AppCHRONOAMPCfg.InitSeqInfo.pSeqCmd = pSeqCmd;
   13be6:	9901      	ldr	r1, [sp, #4]
    AppCHRONOAMPCfg.InitSeqInfo.SeqLen = SeqLen;
   13be8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    AppCHRONOAMPCfg.InitSeqInfo.SeqRamAddr = AppCHRONOAMPCfg.SeqStartAddr;
   13bec:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    AppCHRONOAMPCfg.InitSeqInfo.pSeqCmd = pSeqCmd;
   13bf0:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
    AppCHRONOAMPCfg.InitSeqInfo.SeqId = SEQID_1;
   13bf4:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
    AD5940_SEQCmdWrite(AppCHRONOAMPCfg.InitSeqInfo.SeqRamAddr, pSeqCmd, SeqLen);
   13bf8:	f015 f8bf 	bl	28d7a <AD5940_SEQCmdWrite>
  clks_cal.DataType = AppCHRONOAMPCfg.DataFifoSrc;
   13bfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
  clks_cal.RatioSys2AdcClk = AppCHRONOAMPCfg.SysClkFreq/AppCHRONOAMPCfg.AdcClkFreq;
   13bfe:	6a21      	ldr	r1, [r4, #32]
   13c00:	69a0      	ldr	r0, [r4, #24]
  clks_cal.ADCAvgNum = 0;
   13c02:	9532      	str	r5, [sp, #200]	; 0xc8
  clks_cal.DataCount = 1;
   13c04:	e9cd 372e 	strd	r3, r7, [sp, #184]	; 0xb8
  clks_cal.ADCSinc2Osr = AppCHRONOAMPCfg.ADCSinc2Osr;
   13c08:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   13c0c:	9331      	str	r3, [sp, #196]	; 0xc4
  clks_cal.ADCSinc3Osr = AppCHRONOAMPCfg.ADCSinc3Osr;
   13c0e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   13c12:	9330      	str	r3, [sp, #192]	; 0xc0
  clks_cal.RatioSys2AdcClk = AppCHRONOAMPCfg.SysClkFreq/AppCHRONOAMPCfg.AdcClkFreq;
   13c14:	f7ed f954 	bl	ec0 <__aeabi_fdiv>
  AD5940_ClksCalculate(&clks_cal, &WaitClks);
   13c18:	a91e      	add	r1, sp, #120	; 0x78
  clks_cal.RatioSys2AdcClk = AppCHRONOAMPCfg.SysClkFreq/AppCHRONOAMPCfg.AdcClkFreq;
   13c1a:	9035      	str	r0, [sp, #212]	; 0xd4
  AD5940_ClksCalculate(&clks_cal, &WaitClks);
   13c1c:	a82e      	add	r0, sp, #184	; 0xb8
   13c1e:	f7fe fefd 	bl	12a1c <AD5940_ClksCalculate>
  AD5940_SEQGenCtrl(bTRUE);
   13c22:	4638      	mov	r0, r7
   13c24:	f7fe fe46 	bl	128b4 <AD5940_SEQGenCtrl>
  AD5940_SEQGpioCtrlS(AGPIO_Pin1);
   13c28:	4640      	mov	r0, r8
   13c2a:	f015 f8eb 	bl	28e04 <AD5940_SEQGpioCtrlS>
  AD5940_AFECtrlS(AFECTRL_ADCPWR|AFECTRL_SINC2NOTCH, bTRUE);
   13c2e:	4639      	mov	r1, r7
   13c30:	4838      	ldr	r0, [pc, #224]	; (13d14 <AppCHRONOAMPInit+0x35c>)
   13c32:	f014 fd8a 	bl	2874a <AD5940_AFECtrlS>
  AD5940_SEQGenInsert(SEQ_WAIT(16*250));
   13c36:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   13c3a:	f7fe fe05 	bl	12848 <AD5940_SEQGenInsert>
  AD5940_AFECtrlS(AFECTRL_ADCCNV, bTRUE);  /* Start ADC convert and DFT */
   13c3e:	4639      	mov	r1, r7
   13c40:	f44f 7080 	mov.w	r0, #256	; 0x100
   13c44:	f014 fd81 	bl	2874a <AD5940_AFECtrlS>
  AD5940_SEQGenInsert(SEQ_WAIT(WaitClks));  /* wait for first data ready */
   13c48:	981e      	ldr	r0, [sp, #120]	; 0x78
   13c4a:	f020 4040 	bic.w	r0, r0, #3221225472	; 0xc0000000
   13c4e:	f7fe fdfb 	bl	12848 <AD5940_SEQGenInsert>
  AD5940_AFECtrlS(AFECTRL_ADCPWR|AFECTRL_ADCCNV, bFALSE);  /* Stop ADC */
   13c52:	4629      	mov	r1, r5
   13c54:	f44f 70c0 	mov.w	r0, #384	; 0x180
   13c58:	f014 fd77 	bl	2874a <AD5940_AFECtrlS>
  AD5940_SEQGpioCtrlS(0);
   13c5c:	4628      	mov	r0, r5
   13c5e:	f015 f8d1 	bl	28e04 <AD5940_SEQGpioCtrlS>
  AD5940_EnterSleepS();/* Goto hibernate */
   13c62:	f015 faff 	bl	29264 <AD5940_EnterSleepS>
  error = AD5940_SEQGenFetchSeq(&pSeqCmd, &SeqLen);
   13c66:	a90f      	add	r1, sp, #60	; 0x3c
   13c68:	a806      	add	r0, sp, #24
   13c6a:	f7fe fe17 	bl	1289c <AD5940_SEQGenFetchSeq>
   13c6e:	4605      	mov	r5, r0
  AD5940_SEQGenCtrl(bFALSE); /* Stop sequencer generator */
   13c70:	4630      	mov	r0, r6
   13c72:	f7fe fe1f 	bl	128b4 <AD5940_SEQGenCtrl>
  if(error == AD5940ERR_OK)
   13c76:	2d00      	cmp	r5, #0
   13c78:	f040 80f6 	bne.w	13e68 <AppCHRONOAMPInit+0x4b0>
    AppCHRONOAMPCfg.MeasureSeqInfo.SeqRamAddr = AppCHRONOAMPCfg.InitSeqInfo.SeqRamAddr + AppCHRONOAMPCfg.InitSeqInfo.SeqLen ;
   13c7c:	e9d4 0323 	ldrd	r0, r3, [r4, #140]	; 0x8c
    AppCHRONOAMPCfg.MeasureSeqInfo.pSeqCmd = pSeqCmd;
   13c80:	9906      	ldr	r1, [sp, #24]
    AppCHRONOAMPCfg.MeasureSeqInfo.SeqLen = SeqLen;
   13c82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    AppCHRONOAMPCfg.MeasureSeqInfo.SeqId = SEQID_0;
   13c84:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
    AppCHRONOAMPCfg.MeasureSeqInfo.SeqRamAddr = AppCHRONOAMPCfg.InitSeqInfo.SeqRamAddr + AppCHRONOAMPCfg.InitSeqInfo.SeqLen ;
   13c88:	4418      	add	r0, r3
   13c8a:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    AppCHRONOAMPCfg.MeasureSeqInfo.pSeqCmd = pSeqCmd;
   13c8e:	f8c4 10ac 	str.w	r1, [r4, #172]	; 0xac
    AppCHRONOAMPCfg.MeasureSeqInfo.SeqLen = SeqLen;
   13c92:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
    AD5940_SEQCmdWrite(AppCHRONOAMPCfg.MeasureSeqInfo.SeqRamAddr, pSeqCmd, SeqLen);
   13c96:	f015 f870 	bl	28d7a <AD5940_SEQCmdWrite>
	if(AppCHRONOAMPCfg.DataFifoSrc != DATATYPE_SINC2)
   13c9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13c9c:	4543      	cmp	r3, r8
   13c9e:	f040 80e1 	bne.w	13e64 <AppCHRONOAMPInit+0x4ac>
	VzeroCode = (uint32_t)((AppCHRONOAMPCfg.Vzero-200)/DAC6BITVOLT_1LSB);
   13ca2:	4918      	ldr	r1, [pc, #96]	; (13d04 <AppCHRONOAMPInit+0x34c>)
   13ca4:	6e60      	ldr	r0, [r4, #100]	; 0x64
   13ca6:	f7ec ff4d 	bl	b44 <__aeabi_fsub>
   13caa:	4917      	ldr	r1, [pc, #92]	; (13d08 <AppCHRONOAMPInit+0x350>)
   13cac:	f7ed f908 	bl	ec0 <__aeabi_fdiv>
   13cb0:	f7ed fa3e 	bl	1130 <__aeabi_f2uiz>
	VbiasCode = (int32_t)((AppCHRONOAMPCfg.pulseAmplitude + AppCHRONOAMPCfg.SensorBias)/DAC12BITVOLT_1LSB) + VzeroCode*64;
   13cb4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
	VzeroCode = (uint32_t)((AppCHRONOAMPCfg.Vzero-200)/DAC6BITVOLT_1LSB);
   13cb6:	4606      	mov	r6, r0
	VbiasCode = (int32_t)((AppCHRONOAMPCfg.pulseAmplitude + AppCHRONOAMPCfg.SensorBias)/DAC12BITVOLT_1LSB) + VzeroCode*64;
   13cb8:	6f20      	ldr	r0, [r4, #112]	; 0x70
   13cba:	f7ec ff45 	bl	b48 <__addsf3>
   13cbe:	4913      	ldr	r1, [pc, #76]	; (13d0c <AppCHRONOAMPInit+0x354>)
   13cc0:	f7ed f8fe 	bl	ec0 <__aeabi_fdiv>
   13cc4:	f7ed fa0e 	bl	10e4 <__aeabi_f2iz>
   13cc8:	01b5      	lsls	r5, r6, #6
   13cca:	1945      	adds	r5, r0, r5
    VbiasCode --;
   13ccc:	bf28      	it	cs
   13cce:	f105 35ff 	addcs.w	r5, r5, #4294967295
  clks_cal.DataCount = AppCHRONOAMPCalcDataNum(AppCHRONOAMPCfg.pulseLength);
   13cd2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   13cd6:	2e3f      	cmp	r6, #63	; 0x3f
  clks_cal.DataType = AppCHRONOAMPCfg.DataFifoSrc;
   13cd8:	f04f 0802 	mov.w	r8, #2
   13cdc:	bf28      	it	cs
   13cde:	263f      	movcs	r6, #63	; 0x3f
   13ce0:	f8cd 80b8 	str.w	r8, [sp, #184]	; 0xb8
  clks_cal.DataCount = AppCHRONOAMPCalcDataNum(AppCHRONOAMPCfg.pulseLength);
   13ce4:	f7ff fe38 	bl	13958 <AppCHRONOAMPCalcDataNum>
  clks_cal.ADCSinc2Osr = AppCHRONOAMPCfg.ADCSinc2Osr;
   13ce8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  clks_cal.RatioSys2AdcClk = AppCHRONOAMPCfg.SysClkFreq/AppCHRONOAMPCfg.AdcClkFreq;
   13cec:	6a21      	ldr	r1, [r4, #32]
  clks_cal.DataCount = AppCHRONOAMPCalcDataNum(AppCHRONOAMPCfg.pulseLength);
   13cee:	902f      	str	r0, [sp, #188]	; 0xbc
  clks_cal.ADCAvgNum = 0;
   13cf0:	2700      	movs	r7, #0
   13cf2:	e011      	b.n	13d18 <AppCHRONOAMPInit+0x360>
   13cf4:	20000558 	.word	0x20000558
   13cf8:	41b00000 	.word	0x41b00000
   13cfc:	40400000 	.word	0x40400000
   13d00:	200005a8 	.word	0x200005a8
   13d04:	43480000 	.word	0x43480000
   13d08:	42098899 	.word	0x42098899
   13d0c:	3f098899 	.word	0x3f098899
   13d10:	00010020 	.word	0x00010020
   13d14:	00010080 	.word	0x00010080
  clks_cal.RatioSys2AdcClk = AppCHRONOAMPCfg.SysClkFreq/AppCHRONOAMPCfg.AdcClkFreq;
   13d18:	69a0      	ldr	r0, [r4, #24]
  clks_cal.ADCSinc2Osr = AppCHRONOAMPCfg.ADCSinc2Osr;
   13d1a:	9331      	str	r3, [sp, #196]	; 0xc4
  clks_cal.ADCSinc3Osr = AppCHRONOAMPCfg.ADCSinc3Osr;
   13d1c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   13d20:	9330      	str	r3, [sp, #192]	; 0xc0
  clks_cal.ADCAvgNum = 0;
   13d22:	9732      	str	r7, [sp, #200]	; 0xc8
  clks_cal.RatioSys2AdcClk = AppCHRONOAMPCfg.SysClkFreq/AppCHRONOAMPCfg.AdcClkFreq;
   13d24:	f7ed f8cc 	bl	ec0 <__aeabi_fdiv>
  AD5940_ClksCalculate(&clks_cal, &WaitClks);
   13d28:	a91e      	add	r1, sp, #120	; 0x78
  clks_cal.RatioSys2AdcClk = AppCHRONOAMPCfg.SysClkFreq/AppCHRONOAMPCfg.AdcClkFreq;
   13d2a:	9035      	str	r0, [sp, #212]	; 0xd4
  AD5940_ClksCalculate(&clks_cal, &WaitClks);
   13d2c:	a82e      	add	r0, sp, #184	; 0xb8
   13d2e:	f7fe fe75 	bl	12a1c <AD5940_ClksCalculate>
  AD5940_SEQGenCtrl(bTRUE);
   13d32:	2001      	movs	r0, #1
   13d34:	f7fe fdbe 	bl	128b4 <AD5940_SEQGenCtrl>
  AD5940_SEQGpioCtrlS(AGPIO_Pin1);
   13d38:	4640      	mov	r0, r8
   13d3a:	f015 f863 	bl	28e04 <AD5940_SEQGpioCtrlS>
  AD5940_AFECtrlS(AFECTRL_ADCPWR, bTRUE);
   13d3e:	2101      	movs	r1, #1
   13d40:	2080      	movs	r0, #128	; 0x80
   13d42:	f014 fd02 	bl	2874a <AD5940_AFECtrlS>
  AD5940_SEQGenInsert(SEQ_WAIT(16*250));
   13d46:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   13d4a:	f7fe fd7d 	bl	12848 <AD5940_SEQGenInsert>
  AD5940_AFECtrlS(AFECTRL_ADCCNV, bTRUE);                       /* Start ADC conversion before applying step to capture peak */
   13d4e:	2101      	movs	r1, #1
   13d50:	f44f 7080 	mov.w	r0, #256	; 0x100
   13d54:	f014 fcf9 	bl	2874a <AD5940_AFECtrlS>
  AD5940_WriteReg(REG_AFE_LPDACDAT0, VzeroCode<<12|VbiasCode);
   13d58:	f640 73ff 	movw	r3, #4095	; 0xfff
   13d5c:	0331      	lsls	r1, r6, #12
   13d5e:	429d      	cmp	r5, r3
   13d60:	bf94      	ite	ls
   13d62:	4329      	orrls	r1, r5
   13d64:	4319      	orrhi	r1, r3
   13d66:	f242 1020 	movw	r0, #8480	; 0x2120
   13d6a:	f7fe ff17 	bl	12b9c <AD5940_WriteReg>
  AD5940_SEQGenInsert(SEQ_WAIT(WaitClks));                      /* wait for first data ready */
   13d6e:	981e      	ldr	r0, [sp, #120]	; 0x78
   13d70:	f020 4040 	bic.w	r0, r0, #3221225472	; 0xc0000000
   13d74:	f7fe fd68 	bl	12848 <AD5940_SEQGenInsert>
  AD5940_AFECtrlS(AFECTRL_ADCPWR|AFECTRL_ADCCNV, bFALSE);       /* Stop ADC */
   13d78:	4639      	mov	r1, r7
   13d7a:	f44f 70c0 	mov.w	r0, #384	; 0x180
   13d7e:	f014 fce4 	bl	2874a <AD5940_AFECtrlS>
  AD5940_WriteReg(REG_AFE_LPDACDAT0,(uint32_t)((AppCHRONOAMPCfg.Vzero-200)/DAC6BITVOLT_1LSB)<<12|(int32_t)((AppCHRONOAMPCfg.SensorBias)/DAC12BITVOLT_1LSB) + VzeroCode*64);
   13d82:	493d      	ldr	r1, [pc, #244]	; (13e78 <AppCHRONOAMPInit+0x4c0>)
   13d84:	6e60      	ldr	r0, [r4, #100]	; 0x64
   13d86:	f7ec fedd 	bl	b44 <__aeabi_fsub>
   13d8a:	493c      	ldr	r1, [pc, #240]	; (13e7c <AppCHRONOAMPInit+0x4c4>)
   13d8c:	f7ed f898 	bl	ec0 <__aeabi_fdiv>
   13d90:	f7ed f9ce 	bl	1130 <__aeabi_f2uiz>
   13d94:	493a      	ldr	r1, [pc, #232]	; (13e80 <AppCHRONOAMPInit+0x4c8>)
   13d96:	0305      	lsls	r5, r0, #12
   13d98:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   13d9a:	f7ed f891 	bl	ec0 <__aeabi_fdiv>
   13d9e:	f7ed f9a1 	bl	10e4 <__aeabi_f2iz>
   13da2:	eb00 1186 	add.w	r1, r0, r6, lsl #6
   13da6:	4329      	orrs	r1, r5
   13da8:	f242 1020 	movw	r0, #8480	; 0x2120
   13dac:	f7fe fef6 	bl	12b9c <AD5940_WriteReg>
  AD5940_SEQGpioCtrlS(0);
   13db0:	4638      	mov	r0, r7
   13db2:	f015 f827 	bl	28e04 <AD5940_SEQGpioCtrlS>
  AD5940_SEQGenInsert(SEQ_STOP()); /* Add one extra command to disable sequencer for initialization sequence because we only want it to run one time. */
   13db6:	f04f 4001 	mov.w	r0, #2164260864	; 0x81000000
   13dba:	f7fe fd45 	bl	12848 <AD5940_SEQGenInsert>
  AD5940_EnterSleepS();/* Goto hibernate */
   13dbe:	f015 fa51 	bl	29264 <AD5940_EnterSleepS>
  error = AD5940_SEQGenFetchSeq(&pSeqCmd, &SeqLen);
   13dc2:	a90f      	add	r1, sp, #60	; 0x3c
   13dc4:	a806      	add	r0, sp, #24
   13dc6:	f7fe fd69 	bl	1289c <AD5940_SEQGenFetchSeq>
   13dca:	4605      	mov	r5, r0
  AD5940_SEQGenCtrl(bFALSE); /* Stop sequencer generator */
   13dcc:	4638      	mov	r0, r7
   13dce:	f7fe fd71 	bl	128b4 <AD5940_SEQGenCtrl>
  if(error == AD5940ERR_OK)
   13dd2:	2d00      	cmp	r5, #0
   13dd4:	d148      	bne.n	13e68 <AppCHRONOAMPInit+0x4b0>
    AppCHRONOAMPCfg.TransientSeqInfo.SeqRamAddr = AppCHRONOAMPCfg.MeasureSeqInfo.SeqRamAddr + AppCHRONOAMPCfg.MeasureSeqInfo.SeqLen ;
   13dd6:	e9d4 0328 	ldrd	r0, r3, [r4, #160]	; 0xa0
    AppCHRONOAMPCfg.TransientSeqInfo.pSeqCmd = pSeqCmd;
   13dda:	9906      	ldr	r1, [sp, #24]
    AppCHRONOAMPCfg.TransientSeqInfo.SeqLen = SeqLen;
   13ddc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    AppCHRONOAMPCfg.TransientSeqInfo.SeqId = SEQID_2;
   13dde:	f8c4 80b0 	str.w	r8, [r4, #176]	; 0xb0
    AppCHRONOAMPCfg.TransientSeqInfo.SeqRamAddr = AppCHRONOAMPCfg.MeasureSeqInfo.SeqRamAddr + AppCHRONOAMPCfg.MeasureSeqInfo.SeqLen ;
   13de2:	4418      	add	r0, r3
   13de4:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    AppCHRONOAMPCfg.TransientSeqInfo.pSeqCmd = pSeqCmd;
   13de8:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
    AppCHRONOAMPCfg.TransientSeqInfo.SeqLen = SeqLen;
   13dec:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
    AD5940_SEQCmdWrite(AppCHRONOAMPCfg.TransientSeqInfo.SeqRamAddr, pSeqCmd, SeqLen);
   13df0:	f014 ffc3 	bl	28d7a <AD5940_SEQCmdWrite>
    AppCHRONOAMPCfg.bParaChanged = bFALSE; /* Clear this flag as we already implemented the new configuration */
   13df4:	7025      	strb	r5, [r4, #0]
  AppCHRONOAMPCfg.InitSeqInfo.WriteSRAM = bFALSE;
   13df6:	2300      	movs	r3, #0
  AD5940_SEQInfoCfg(&AppCHRONOAMPCfg.InitSeqInfo);
   13df8:	4822      	ldr	r0, [pc, #136]	; (13e84 <AppCHRONOAMPInit+0x4cc>)
  AppCHRONOAMPCfg.InitSeqInfo.WriteSRAM = bFALSE;
   13dfa:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
  AD5940_SEQInfoCfg(&AppCHRONOAMPCfg.InitSeqInfo);
   13dfe:	f014 ffd0 	bl	28da2 <AD5940_SEQInfoCfg>
  seq_cfg.SeqEnable = bTRUE;
   13e02:	2301      	movs	r3, #1
  AD5940_SEQCfg(&seq_cfg);  /* Enable sequencer */
   13e04:	a803      	add	r0, sp, #12
  seq_cfg.SeqEnable = bTRUE;
   13e06:	f88d 3010 	strb.w	r3, [sp, #16]
  AD5940_SEQCfg(&seq_cfg);  /* Enable sequencer */
   13e0a:	f014 ff47 	bl	28c9c <AD5940_SEQCfg>
  AD5940_SEQMmrTrig(AppCHRONOAMPCfg.InitSeqInfo.SeqId);
   13e0e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   13e12:	f014 ffa9 	bl	28d68 <AD5940_SEQMmrTrig>
  while(AD5940_INTCTestFlag(AFEINTC_1, AFEINTSRC_ENDSEQ) == bFALSE);
   13e16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13e1a:	2001      	movs	r0, #1
   13e1c:	f015 f9e8 	bl	291f0 <AD5940_INTCTestFlag>
   13e20:	2800      	cmp	r0, #0
   13e22:	d0f8      	beq.n	13e16 <AppCHRONOAMPInit+0x45e>
  AD5940_INTCClrFlag(AFEINTSRC_ENDSEQ);
   13e24:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   13e28:	f015 f9dd 	bl	291e6 <AD5940_INTCClrFlag>
  AppCHRONOAMPCfg.TransientSeqInfo.WriteSRAM = bFALSE;
   13e2c:	2500      	movs	r5, #0
  AD5940_SEQInfoCfg(&AppCHRONOAMPCfg.TransientSeqInfo);
   13e2e:	4816      	ldr	r0, [pc, #88]	; (13e88 <AppCHRONOAMPInit+0x4d0>)
  AppCHRONOAMPCfg.TransientSeqInfo.WriteSRAM = bFALSE;
   13e30:	f884 50bc 	strb.w	r5, [r4, #188]	; 0xbc
  AD5940_SEQInfoCfg(&AppCHRONOAMPCfg.TransientSeqInfo);
   13e34:	f014 ffb5 	bl	28da2 <AD5940_SEQInfoCfg>
  AD5940_SEQInfoCfg(&AppCHRONOAMPCfg.MeasureSeqInfo);
   13e38:	4814      	ldr	r0, [pc, #80]	; (13e8c <AppCHRONOAMPInit+0x4d4>)
  AppCHRONOAMPCfg.MeasureSeqInfo.WriteSRAM = bFALSE;
   13e3a:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
  seq_cfg.SeqEnable = bTRUE;
   13e3e:	2601      	movs	r6, #1
  AD5940_SEQInfoCfg(&AppCHRONOAMPCfg.MeasureSeqInfo);
   13e40:	f014 ffaf 	bl	28da2 <AD5940_SEQInfoCfg>
  AD5940_SEQCfg(&seq_cfg);  /* Enable sequencer, and wait for trigger */
   13e44:	a803      	add	r0, sp, #12
  seq_cfg.SeqEnable = bTRUE;
   13e46:	f88d 6010 	strb.w	r6, [sp, #16]
  AD5940_SEQCfg(&seq_cfg);  /* Enable sequencer, and wait for trigger */
   13e4a:	f014 ff27 	bl	28c9c <AD5940_SEQCfg>
  AD5940_ClrMCUIntFlag();   /* Clear interrupt flag generated before */
   13e4e:	f7ff fc17 	bl	13680 <AD5940_ClrMCUIntFlag>
  AD5940_AFEPwrBW(AppCHRONOAMPCfg.PwrMod, AFEBW_250KHZ);
   13e52:	6b60      	ldr	r0, [r4, #52]	; 0x34
   13e54:	2103      	movs	r1, #3
   13e56:	f014 fca4 	bl	287a2 <AD5940_AFEPwrBW>
  AppCHRONOAMPCfg.CHRONOAMPInited = bTRUE;  /* CHRONOAMP application has been initialized. */
   13e5a:	f884 6086 	strb.w	r6, [r4, #134]	; 0x86
  AppCHRONOAMPCfg.bMeasureTransient = bFALSE;
   13e5e:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
  return AD5940ERR_OK;
   13e62:	e001      	b.n	13e68 <AppCHRONOAMPInit+0x4b0>
		return AD5940ERR_ERROR; /* FIFO data must be SINC2 filter for measuring transient */
   13e64:	f04f 35ff 	mov.w	r5, #4294967295
}
   13e68:	4628      	mov	r0, r5
   13e6a:	b04a      	add	sp, #296	; 0x128
   13e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(pBuffer == 0)  return AD5940ERR_PARA;
   13e70:	f06f 0501 	mvn.w	r5, #1
   13e74:	e7f8      	b.n	13e68 <AppCHRONOAMPInit+0x4b0>
   13e76:	bf00      	nop
   13e78:	43480000 	.word	0x43480000
   13e7c:	42098899 	.word	0x42098899
   13e80:	3f098899 	.word	0x3f098899
   13e84:	200005e0 	.word	0x200005e0
   13e88:	20000608 	.word	0x20000608
   13e8c:	200005f4 	.word	0x200005f4

00013e90 <AppCHRONOAMPCalcVoltage>:
/* Calculate voltage */
float AppCHRONOAMPCalcVoltage(uint32_t ADCcode)
{
   13e90:	b538      	push	{r3, r4, r5, lr}
  float kFactor = 1.835/1.82;
  float fVolt = 0.0;
  int32_t tmp = 0;
  tmp = ADCcode - 32768;
  switch(AppCHRONOAMPCfg.ADCPgaGain)
   13e92:	4c24      	ldr	r4, [pc, #144]	; (13f24 <AppCHRONOAMPCalcVoltage+0x94>)
   13e94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  tmp = ADCcode - 32768;
   13e96:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
  switch(AppCHRONOAMPCfg.ADCPgaGain)
   13e9a:	2b04      	cmp	r3, #4
   13e9c:	d840      	bhi.n	13f20 <AppCHRONOAMPCalcVoltage+0x90>
   13e9e:	e8df f003 	tbb	[pc, r3]
   13ea2:	1003      	.short	0x1003
   13ea4:	2c1d      	.short	0x2c1d
   13ea6:	36          	.byte	0x36
   13ea7:	00          	.byte	0x00
  {
    case ADCPGA_1:
      fVolt = ((float)(tmp)/32768)*(AppCHRONOAMPCfg.ADCRefVolt/1)*kFactor;
   13ea8:	f7ec ff02 	bl	cb0 <__aeabi_i2f>
   13eac:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   13eb0:	f7ec ff52 	bl	d58 <__aeabi_fmul>
   13eb4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
      break;
    case ADCPGA_4:
      fVolt = ((float)(tmp)/32768)*(AppCHRONOAMPCfg.ADCRefVolt/4)*kFactor;
      break;
    case ADCPGA_9:
      fVolt = ((float)(tmp)/32768)*(AppCHRONOAMPCfg.ADCRefVolt/9)*kFactor;
   13eb6:	f7ec ff4f 	bl	d58 <__aeabi_fmul>
   13eba:	491b      	ldr	r1, [pc, #108]	; (13f28 <AppCHRONOAMPCalcVoltage+0x98>)
   13ebc:	f7ec ff4c 	bl	d58 <__aeabi_fmul>
      break;
  } 
  return fVolt;
}
   13ec0:	bd38      	pop	{r3, r4, r5, pc}
      fVolt = ((float)(tmp)/32768)*(AppCHRONOAMPCfg.ADCRefVolt/1.5f)*kFactor;
   13ec2:	f7ec fef5 	bl	cb0 <__aeabi_i2f>
   13ec6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   13eca:	f7ec ff45 	bl	d58 <__aeabi_fmul>
   13ece:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
   13ed2:	4605      	mov	r5, r0
      fVolt = ((float)(tmp)/32768)*(AppCHRONOAMPCfg.ADCRefVolt/9)*kFactor;
   13ed4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
   13ed6:	f7ec fff3 	bl	ec0 <__aeabi_fdiv>
   13eda:	e00b      	b.n	13ef4 <AppCHRONOAMPCalcVoltage+0x64>
      fVolt = ((float)(tmp)/32768)*(AppCHRONOAMPCfg.ADCRefVolt/2)*kFactor;
   13edc:	f7ec fee8 	bl	cb0 <__aeabi_i2f>
   13ee0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   13ee4:	f7ec ff38 	bl	d58 <__aeabi_fmul>
   13ee8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   13eec:	4605      	mov	r5, r0
      fVolt = ((float)(tmp)/32768)*(AppCHRONOAMPCfg.ADCRefVolt/4)*kFactor;
   13eee:	6fa0      	ldr	r0, [r4, #120]	; 0x78
   13ef0:	f7ec ff32 	bl	d58 <__aeabi_fmul>
      fVolt = ((float)(tmp)/32768)*(AppCHRONOAMPCfg.ADCRefVolt/9)*kFactor;
   13ef4:	4601      	mov	r1, r0
   13ef6:	4628      	mov	r0, r5
   13ef8:	e7dd      	b.n	13eb6 <AppCHRONOAMPCalcVoltage+0x26>
      fVolt = ((float)(tmp)/32768)*(AppCHRONOAMPCfg.ADCRefVolt/4)*kFactor;
   13efa:	f7ec fed9 	bl	cb0 <__aeabi_i2f>
   13efe:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   13f02:	f7ec ff29 	bl	d58 <__aeabi_fmul>
   13f06:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
   13f0a:	4605      	mov	r5, r0
   13f0c:	e7ef      	b.n	13eee <AppCHRONOAMPCalcVoltage+0x5e>
      fVolt = ((float)(tmp)/32768)*(AppCHRONOAMPCfg.ADCRefVolt/9)*kFactor;
   13f0e:	f7ec fecf 	bl	cb0 <__aeabi_i2f>
   13f12:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   13f16:	f7ec ff1f 	bl	d58 <__aeabi_fmul>
   13f1a:	4904      	ldr	r1, [pc, #16]	; (13f2c <AppCHRONOAMPCalcVoltage+0x9c>)
   13f1c:	4605      	mov	r5, r0
   13f1e:	e7d9      	b.n	13ed4 <AppCHRONOAMPCalcVoltage+0x44>
  switch(AppCHRONOAMPCfg.ADCPgaGain)
   13f20:	2000      	movs	r0, #0
  return fVolt;
   13f22:	e7cd      	b.n	13ec0 <AppCHRONOAMPCalcVoltage+0x30>
   13f24:	20000558 	.word	0x20000558
   13f28:	3f810e11 	.word	0x3f810e11
   13f2c:	41100000 	.word	0x41100000

00013f30 <AppCHRONOAMPCalcCurrent>:
/* Calculate current in uA */
float AppCHRONOAMPCalcCurrent(uint32_t ADCcode)
{
   13f30:	b508      	push	{r3, lr}
  float fCurrent, fVoltage = 0.0;
  fVoltage = AppCHRONOAMPCalcVoltage(ADCcode);
   13f32:	f7ff ffad 	bl	13e90 <AppCHRONOAMPCalcVoltage>
  fCurrent = fVoltage/AppCHRONOAMPCfg.RtiaCalValue.Magnitude;
   13f36:	4b05      	ldr	r3, [pc, #20]	; (13f4c <AppCHRONOAMPCalcCurrent+0x1c>)
   13f38:	6d19      	ldr	r1, [r3, #80]	; 0x50
   13f3a:	f7ec ffc1 	bl	ec0 <__aeabi_fdiv>
  return -fCurrent*1000000;
   13f3e:	4904      	ldr	r1, [pc, #16]	; (13f50 <AppCHRONOAMPCalcCurrent+0x20>)
   13f40:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   13f44:	f7ec ff08 	bl	d58 <__aeabi_fmul>
}
   13f48:	bd08      	pop	{r3, pc}
   13f4a:	bf00      	nop
   13f4c:	20000558 	.word	0x20000558
   13f50:	49742400 	.word	0x49742400

00013f54 <AppCHRONOAMPISR>:
{
   13f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(AppCHRONOAMPCfg.CHRONOAMPInited == bFALSE)
   13f56:	4f36      	ldr	r7, [pc, #216]	; (14030 <AppCHRONOAMPISR+0xdc>)
  *pCount = 0;
   13f58:	2400      	movs	r4, #0
   13f5a:	600c      	str	r4, [r1, #0]
  if(AppCHRONOAMPCfg.CHRONOAMPInited == bFALSE)
   13f5c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
{
   13f60:	4605      	mov	r5, r0
   13f62:	460e      	mov	r6, r1
  if(AppCHRONOAMPCfg.CHRONOAMPInited == bFALSE)
   13f64:	2b00      	cmp	r3, #0
   13f66:	d060      	beq.n	1402a <AppCHRONOAMPISR+0xd6>
  AD5940_ReadReg(REG_AFE_ADCDAT); /* Any SPI Operation can wakeup AFE */  
   13f68:	f242 0074 	movw	r0, #8308	; 0x2074
   13f6c:	f7fe fe66 	bl	12c3c <AD5940_ReadReg>
	AD5940_SleepKeyCtrlS(SLPKEY_LOCK);
   13f70:	4620      	mov	r0, r4
   13f72:	f015 f972 	bl	2925a <AD5940_SleepKeyCtrlS>
  if(AD5940_INTCTestFlag(AFEINTC_0, AFEINTSRC_DATAFIFOTHRESH) == bTRUE)
   13f76:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   13f7a:	4620      	mov	r0, r4
   13f7c:	f015 f938 	bl	291f0 <AD5940_INTCTestFlag>
   13f80:	2801      	cmp	r0, #1
   13f82:	d130      	bne.n	13fe6 <AppCHRONOAMPISR+0x92>
    FifoCnt = AD5940_FIFOGetCnt();
   13f84:	f014 fe83 	bl	28c8e <AD5940_FIFOGetCnt>
    if(AppCHRONOAMPCfg.bMeasureTransient) /* We are measuring transient */
   13f88:	f897 7085 	ldrb.w	r7, [r7, #133]	; 0x85
    FifoCnt = AD5940_FIFOGetCnt();
   13f8c:	9001      	str	r0, [sp, #4]
   13f8e:	4601      	mov	r1, r0
      AD5940_FIFORd((uint32_t *)pBuff, FifoCnt);
   13f90:	4628      	mov	r0, r5
    if(AppCHRONOAMPCfg.bMeasureTransient) /* We are measuring transient */
   13f92:	b197      	cbz	r7, 13fba <AppCHRONOAMPISR+0x66>
      AD5940_FIFORd((uint32_t *)pBuff, FifoCnt);
   13f94:	f014 fb8f 	bl	286b6 <AD5940_FIFORd>
      AD5940_INTCClrFlag(AFEINTSRC_DATAFIFOTHRESH);
   13f98:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   13f9c:	f015 f923 	bl	291e6 <AD5940_INTCClrFlag>
      AppCHRONOAMPDataProcess((int32_t*)pBuff, &FifoCnt);
   13fa0:	9901      	ldr	r1, [sp, #4]
   13fa2:	4628      	mov	r0, r5
   13fa4:	f015 f9b7 	bl	29316 <AppCHRONOAMPDataProcess.isra.0>
      *pCount = FifoCnt;
   13fa8:	9b01      	ldr	r3, [sp, #4]
      IntCount++;
   13faa:	4a22      	ldr	r2, [pc, #136]	; (14034 <AppCHRONOAMPISR+0xe0>)
      *pCount = FifoCnt;
   13fac:	6033      	str	r3, [r6, #0]
      IntCount++;
   13fae:	6813      	ldr	r3, [r2, #0]
   13fb0:	3301      	adds	r3, #1
   13fb2:	6013      	str	r3, [r2, #0]
} 
   13fb4:	4620      	mov	r0, r4
   13fb6:	b003      	add	sp, #12
   13fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      AD5940_FIFORd((uint32_t *)pBuff, FifoCnt);
   13fba:	f014 fb7c 	bl	286b6 <AD5940_FIFORd>
      AD5940_INTCClrFlag(AFEINTSRC_DATAFIFOTHRESH);
   13fbe:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   13fc2:	f015 f910 	bl	291e6 <AD5940_INTCClrFlag>
      AppCHRONOAMPRegModify(pBuff, &FifoCnt);   /* If there is need to do AFE re-configure, do it here when AFE is in active state */
   13fc6:	a801      	add	r0, sp, #4
   13fc8:	f7ff fc06 	bl	137d8 <AppCHRONOAMPRegModify.constprop.0.isra.0>
			AD5940_SleepKeyCtrlS(SLPKEY_UNLOCK); /* Unlock so sequencer can put AD5940 to sleep */
   13fcc:	481a      	ldr	r0, [pc, #104]	; (14038 <AppCHRONOAMPISR+0xe4>)
   13fce:	f015 f944 	bl	2925a <AD5940_SleepKeyCtrlS>
			AD5940_EnterSleepS();
   13fd2:	f015 f947 	bl	29264 <AD5940_EnterSleepS>
      AppCHRONOAMPDataProcess((int32_t*)pBuff,&FifoCnt); 
   13fd6:	9901      	ldr	r1, [sp, #4]
   13fd8:	4628      	mov	r0, r5
   13fda:	f015 f99c 	bl	29316 <AppCHRONOAMPDataProcess.isra.0>
      *pCount = FifoCnt;
   13fde:	9b01      	ldr	r3, [sp, #4]
   13fe0:	6033      	str	r3, [r6, #0]
    return 0;
   13fe2:	463c      	mov	r4, r7
   13fe4:	e7e6      	b.n	13fb4 <AppCHRONOAMPISR+0x60>
  if(AD5940_INTCTestFlag(AFEINTC_0, AFEINTSRC_ENDSEQ) == bTRUE)/* End sequence interrupt fires at end of transient sequence */
   13fe6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13fea:	4620      	mov	r0, r4
   13fec:	f015 f900 	bl	291f0 <AD5940_INTCTestFlag>
   13ff0:	2801      	cmp	r0, #1
   13ff2:	d1df      	bne.n	13fb4 <AppCHRONOAMPISR+0x60>
		AppCHRONOAMPCfg.EndSeq = bTRUE;
   13ff4:	f887 0084 	strb.w	r0, [r7, #132]	; 0x84
    FifoCnt = AD5940_FIFOGetCnt();
   13ff8:	f014 fe49 	bl	28c8e <AD5940_FIFOGetCnt>
    IntCount++;
   13ffc:	4a0d      	ldr	r2, [pc, #52]	; (14034 <AppCHRONOAMPISR+0xe0>)
    FifoCnt = AD5940_FIFOGetCnt();
   13ffe:	9001      	str	r0, [sp, #4]
    IntCount++;
   14000:	6813      	ldr	r3, [r2, #0]
    AD5940_INTCClrFlag(AFEINTSRC_ENDSEQ);
   14002:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    IntCount++;
   14006:	3301      	adds	r3, #1
   14008:	6013      	str	r3, [r2, #0]
    AD5940_INTCClrFlag(AFEINTSRC_ENDSEQ);
   1400a:	f015 f8ec 	bl	291e6 <AD5940_INTCClrFlag>
    AD5940_FIFORd((uint32_t *)pBuff, FifoCnt);
   1400e:	9901      	ldr	r1, [sp, #4]
   14010:	4628      	mov	r0, r5
   14012:	f014 fb50 	bl	286b6 <AD5940_FIFORd>
		AppCHRONOAMPRegModify(pBuff, &FifoCnt);
   14016:	a801      	add	r0, sp, #4
   14018:	f7ff fbde 	bl	137d8 <AppCHRONOAMPRegModify.constprop.0.isra.0>
    AppCHRONOAMPDataProcess((int32_t*)pBuff, &FifoCnt);
   1401c:	9901      	ldr	r1, [sp, #4]
   1401e:	4628      	mov	r0, r5
   14020:	f015 f979 	bl	29316 <AppCHRONOAMPDataProcess.isra.0>
    *pCount = FifoCnt;
   14024:	9b01      	ldr	r3, [sp, #4]
   14026:	6033      	str	r3, [r6, #0]
   14028:	e7c4      	b.n	13fb4 <AppCHRONOAMPISR+0x60>
    return AD5940ERR_APPERROR;
   1402a:	f06f 0463 	mvn.w	r4, #99	; 0x63
   1402e:	e7c1      	b.n	13fb4 <AppCHRONOAMPISR+0x60>
   14030:	20000558 	.word	0x20000558
   14034:	20005530 	.word	0x20005530
   14038:	000a47e5 	.word	0x000a47e5

0001403c <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   1403c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14040:	b08d      	sub	sp, #52	; 0x34
   14042:	461f      	mov	r7, r3
   14044:	9203      	str	r2, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   14046:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   1404a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   1404e:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   14050:	1c53      	adds	r3, r2, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   14052:	0782      	lsls	r2, r0, #30
   14054:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   14058:	9305      	str	r3, [sp, #20]
{
   1405a:	4605      	mov	r5, r0
   1405c:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
   1405e:	f040 8222 	bne.w	144a6 <cbvprintf_package+0x46a>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   14062:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   14064:	2800      	cmp	r0, #0
   14066:	f040 8221 	bne.w	144ac <cbvprintf_package+0x470>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   1406a:	f001 0607 	and.w	r6, r1, #7
   1406e:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   14070:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   14074:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
   14078:	f04f 0804 	mov.w	r8, #4
	s = fmt--;
   1407c:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   1407e:	f8cd a010 	str.w	sl, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   14082:	4652      	mov	r2, sl
	bool parsing = false;
   14084:	46d1      	mov	r9, sl
	size = sizeof(char *);
   14086:	4641      	mov	r1, r8

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
   14088:	b105      	cbz	r5, 1408c <cbvprintf_package+0x50>
				*(const char **)buf = s;
   1408a:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1408c:	9805      	ldr	r0, [sp, #20]
   1408e:	2800      	cmp	r0, #0
   14090:	dc07      	bgt.n	140a2 <cbvprintf_package+0x66>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   14092:	48c6      	ldr	r0, [pc, #792]	; (143ac <cbvprintf_package+0x370>)
   14094:	4287      	cmp	r7, r0
   14096:	f0c0 8143 	bcc.w	14320 <cbvprintf_package+0x2e4>
   1409a:	48c5      	ldr	r0, [pc, #788]	; (143b0 <cbvprintf_package+0x374>)
   1409c:	4287      	cmp	r7, r0
   1409e:	f080 813f 	bcs.w	14320 <cbvprintf_package+0x2e4>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
   140a2:	9803      	ldr	r0, [sp, #12]
   140a4:	f010 0e02 	ands.w	lr, r0, #2
   140a8:	f000 8153 	beq.w	14352 <cbvprintf_package+0x316>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   140ac:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   140b0:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   140b2:	f1be 0f00 	cmp.w	lr, #0
   140b6:	f000 8139 	beq.w	1432c <cbvprintf_package+0x2f0>
   140ba:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   140be:	f0c0 8135 	bcc.w	1432c <cbvprintf_package+0x2f0>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
   140c2:	f06f 0015 	mvn.w	r0, #21
   140c6:	e0fd      	b.n	142c4 <cbvprintf_package+0x288>
			switch (*fmt) {
   140c8:	282b      	cmp	r0, #43	; 0x2b
   140ca:	d833      	bhi.n	14134 <cbvprintf_package+0xf8>
   140cc:	281f      	cmp	r0, #31
   140ce:	d811      	bhi.n	140f4 <cbvprintf_package+0xb8>
				parsing = false;
   140d0:	f04f 0900 	mov.w	r9, #0
			if (*++fmt == '\0') {
   140d4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   140d8:	2800      	cmp	r0, #0
   140da:	f000 817e 	beq.w	143da <cbvprintf_package+0x39e>
			if (!parsing) {
   140de:	f1b9 0f00 	cmp.w	r9, #0
   140e2:	d1f1      	bne.n	140c8 <cbvprintf_package+0x8c>
				if (*fmt == '%') {
   140e4:	2825      	cmp	r0, #37	; 0x25
   140e6:	d1f5      	bne.n	140d4 <cbvprintf_package+0x98>
					parsing = true;
   140e8:	f04f 0901 	mov.w	r9, #1
				align = VA_STACK_ALIGN(ptrdiff_t);
   140ec:	f04f 0804 	mov.w	r8, #4
				buf += size;
   140f0:	4641      	mov	r1, r8
   140f2:	e7ef      	b.n	140d4 <cbvprintf_package+0x98>
			switch (*fmt) {
   140f4:	3820      	subs	r0, #32
   140f6:	280b      	cmp	r0, #11
   140f8:	d8ea      	bhi.n	140d0 <cbvprintf_package+0x94>
   140fa:	f20f 0c08 	addw	ip, pc, #8
   140fe:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
   14102:	bf00      	nop
   14104:	000140d5 	.word	0x000140d5
   14108:	000140d1 	.word	0x000140d1
   1410c:	000140d1 	.word	0x000140d1
   14110:	000140d5 	.word	0x000140d5
   14114:	000140d1 	.word	0x000140d1
   14118:	000140d1 	.word	0x000140d1
   1411c:	000140d1 	.word	0x000140d1
   14120:	000140d1 	.word	0x000140d1
   14124:	000140d1 	.word	0x000140d1
   14128:	000140d1 	.word	0x000140d1
   1412c:	000142e7 	.word	0x000142e7
   14130:	000140d5 	.word	0x000140d5
   14134:	382d      	subs	r0, #45	; 0x2d
   14136:	fa5f fc80 	uxtb.w	ip, r0
   1413a:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
   1413e:	d8c7      	bhi.n	140d0 <cbvprintf_package+0x94>
   14140:	284d      	cmp	r0, #77	; 0x4d
   14142:	d8c5      	bhi.n	140d0 <cbvprintf_package+0x94>
   14144:	f20f 0c04 	addw	ip, pc, #4
   14148:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
   1414c:	000140d5 	.word	0x000140d5
   14150:	000140d5 	.word	0x000140d5
   14154:	000140d1 	.word	0x000140d1
   14158:	000140d5 	.word	0x000140d5
   1415c:	000140d5 	.word	0x000140d5
   14160:	000140d5 	.word	0x000140d5
   14164:	000140d5 	.word	0x000140d5
   14168:	000140d5 	.word	0x000140d5
   1416c:	000140d5 	.word	0x000140d5
   14170:	000140d5 	.word	0x000140d5
   14174:	000140d5 	.word	0x000140d5
   14178:	000140d5 	.word	0x000140d5
   1417c:	000140d5 	.word	0x000140d5
   14180:	000140d1 	.word	0x000140d1
   14184:	000140d1 	.word	0x000140d1
   14188:	000140d1 	.word	0x000140d1
   1418c:	000140d1 	.word	0x000140d1
   14190:	000140d1 	.word	0x000140d1
   14194:	000140d1 	.word	0x000140d1
   14198:	000140d1 	.word	0x000140d1
   1419c:	000142a1 	.word	0x000142a1
   141a0:	000140d1 	.word	0x000140d1
   141a4:	000140d1 	.word	0x000140d1
   141a8:	000140d1 	.word	0x000140d1
   141ac:	000142a1 	.word	0x000142a1
   141b0:	000142a1 	.word	0x000142a1
   141b4:	000142a1 	.word	0x000142a1
   141b8:	000140d1 	.word	0x000140d1
   141bc:	000140d1 	.word	0x000140d1
   141c0:	000140d1 	.word	0x000140d1
   141c4:	000140d1 	.word	0x000140d1
   141c8:	000140d5 	.word	0x000140d5
   141cc:	000140d1 	.word	0x000140d1
   141d0:	000140d1 	.word	0x000140d1
   141d4:	000140d1 	.word	0x000140d1
   141d8:	000140d1 	.word	0x000140d1
   141dc:	000140d1 	.word	0x000140d1
   141e0:	000140d1 	.word	0x000140d1
   141e4:	000140d1 	.word	0x000140d1
   141e8:	000140d1 	.word	0x000140d1
   141ec:	000140d1 	.word	0x000140d1
   141f0:	000140d1 	.word	0x000140d1
   141f4:	000140d1 	.word	0x000140d1
   141f8:	00014285 	.word	0x00014285
   141fc:	000140d1 	.word	0x000140d1
   14200:	000140d1 	.word	0x000140d1
   14204:	000140d1 	.word	0x000140d1
   14208:	000140d1 	.word	0x000140d1
   1420c:	000140d1 	.word	0x000140d1
   14210:	000140d1 	.word	0x000140d1
   14214:	000140d1 	.word	0x000140d1
   14218:	000140d1 	.word	0x000140d1
   1421c:	000142a1 	.word	0x000142a1
   14220:	000140d1 	.word	0x000140d1
   14224:	00014285 	.word	0x00014285
   14228:	00014285 	.word	0x00014285
   1422c:	000142a1 	.word	0x000142a1
   14230:	000142a1 	.word	0x000142a1
   14234:	000142a1 	.word	0x000142a1
   14238:	000140d5 	.word	0x000140d5
   1423c:	00014285 	.word	0x00014285
   14240:	000142d5 	.word	0x000142d5
   14244:	000140d1 	.word	0x000140d1
   14248:	000140d5 	.word	0x000140d5
   1424c:	000140d1 	.word	0x000140d1
   14250:	000142db 	.word	0x000142db
   14254:	00014285 	.word	0x00014285
   14258:	000142db 	.word	0x000142db
   1425c:	000140d1 	.word	0x000140d1
   14260:	000140d1 	.word	0x000140d1
   14264:	000142e3 	.word	0x000142e3
   14268:	000140ed 	.word	0x000140ed
   1426c:	00014285 	.word	0x00014285
   14270:	000140d1 	.word	0x000140d1
   14274:	000140d1 	.word	0x000140d1
   14278:	00014285 	.word	0x00014285
   1427c:	000140d1 	.word	0x000140d1
   14280:	000140ed 	.word	0x000140ed
				if (fmt[-1] == 'l') {
   14284:	f813 0c01 	ldrb.w	r0, [r3, #-1]
   14288:	286c      	cmp	r0, #108	; 0x6c
   1428a:	d143      	bne.n	14314 <cbvprintf_package+0x2d8>
					if (fmt[-2] == 'l') {
   1428c:	f813 1c02 	ldrb.w	r1, [r3, #-2]
   14290:	2000      	movs	r0, #0
   14292:	296c      	cmp	r1, #108	; 0x6c
				parsing = false;
   14294:	4681      	mov	r9, r0
					if (fmt[-2] == 'l') {
   14296:	d040      	beq.n	1431a <cbvprintf_package+0x2de>
				align = VA_STACK_ALIGN(void *);
   14298:	f04f 0804 	mov.w	r8, #4
						size = sizeof(long long);
   1429c:	4641      	mov	r1, r8
   1429e:	e023      	b.n	142e8 <cbvprintf_package+0x2ac>
					v.ld = va_arg(ap, long double);
   142a0:	9801      	ldr	r0, [sp, #4]
   142a2:	f100 0b07 	add.w	fp, r0, #7
   142a6:	f02b 0007 	bic.w	r0, fp, #7
   142aa:	e8f0 8902 	ldrd	r8, r9, [r0], #8
				buf = (void *) ROUND_UP(buf, align);
   142ae:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
   142b0:	9001      	str	r0, [sp, #4]
				buf = (void *) ROUND_UP(buf, align);
   142b2:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   142b6:	b155      	cbz	r5, 142ce <cbvprintf_package+0x292>
					if (BUF_OFFSET + size > len) {
   142b8:	eb0e 0004 	add.w	r0, lr, r4
   142bc:	42b0      	cmp	r0, r6
   142be:	d904      	bls.n	142ca <cbvprintf_package+0x28e>
						return -ENOSPC;
   142c0:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   142c4:	b00d      	add	sp, #52	; 0x34
   142c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						*(long double *)buf = v.ld;
   142ca:	e9c4 8900 	strd	r8, r9, [r4]
				buf += size;
   142ce:	3408      	adds	r4, #8
				parsing = false;
   142d0:	f04f 0900 	mov.w	r9, #0
				buf += size;
   142d4:	f04f 0808 	mov.w	r8, #8
   142d8:	e70a      	b.n	140f0 <cbvprintf_package+0xb4>
			switch (*fmt) {
   142da:	2000      	movs	r0, #0
				parsing = false;
   142dc:	f04f 0900 	mov.w	r9, #0
   142e0:	e7da      	b.n	14298 <cbvprintf_package+0x25c>
				is_str_arg = true;
   142e2:	4648      	mov	r0, r9
   142e4:	e7fa      	b.n	142dc <cbvprintf_package+0x2a0>
			switch (*fmt) {
   142e6:	2000      	movs	r0, #0
		buf = (void *) ROUND_UP(buf, align);
   142e8:	3c01      	subs	r4, #1
   142ea:	4444      	add	r4, r8
   142ec:	f1c8 0c00 	rsb	ip, r8, #0
   142f0:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   142f4:	b125      	cbz	r5, 14300 <cbvprintf_package+0x2c4>
   142f6:	eba1 0c05 	sub.w	ip, r1, r5
   142fa:	44a4      	add	ip, r4
   142fc:	4566      	cmp	r6, ip
   142fe:	d3df      	bcc.n	142c0 <cbvprintf_package+0x284>
		if (is_str_arg) {
   14300:	2800      	cmp	r0, #0
   14302:	d045      	beq.n	14390 <cbvprintf_package+0x354>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   14304:	9805      	ldr	r0, [sp, #20]
			s = va_arg(ap, char *);
   14306:	f8dd b004 	ldr.w	fp, [sp, #4]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1430a:	3801      	subs	r0, #1
			s = va_arg(ap, char *);
   1430c:	f85b 7b04 	ldr.w	r7, [fp], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   14310:	9005      	str	r0, [sp, #20]
			s = va_arg(ap, char *);
   14312:	e6b9      	b.n	14088 <cbvprintf_package+0x4c>
   14314:	2000      	movs	r0, #0
				parsing = false;
   14316:	4681      	mov	r9, r0
   14318:	e7e6      	b.n	142e8 <cbvprintf_package+0x2ac>
						align = VA_STACK_ALIGN(long long);
   1431a:	f04f 0808 	mov.w	r8, #8
   1431e:	e7bd      	b.n	1429c <cbvprintf_package+0x260>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
   14320:	9803      	ldr	r0, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   14322:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
   14326:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
   1432a:	e6c1      	b.n	140b0 <cbvprintf_package+0x74>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   1432c:	2a0f      	cmp	r2, #15
   1432e:	f63f aec8 	bhi.w	140c2 <cbvprintf_package+0x86>
				if (buf0 != NULL) {
   14332:	b1d5      	cbz	r5, 1436a <cbvprintf_package+0x32e>
					str_ptr_pos[s_idx] = s_ptr_idx;
   14334:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
   14338:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
   1433c:	4496      	add	lr, r2
   1433e:	f1bc 0f00 	cmp.w	ip, #0
   14342:	d00c      	beq.n	1435e <cbvprintf_package+0x322>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   14344:	f060 007f 	orn	r0, r0, #127	; 0x7f
   14348:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
   1434c:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
   14350:	3201      	adds	r2, #1
			buf += sizeof(char *);
   14352:	3404      	adds	r4, #4
			is_str_arg = false;
   14354:	f8cd b004 	str.w	fp, [sp, #4]
					if (BUF_OFFSET + size > len) {
   14358:	f1c5 0e08 	rsb	lr, r5, #8
   1435c:	e6ba      	b.n	140d4 <cbvprintf_package+0x98>
					str_ptr_pos[s_idx] = s_ptr_idx;
   1435e:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
   14362:	9804      	ldr	r0, [sp, #16]
   14364:	3001      	adds	r0, #1
   14366:	9004      	str	r0, [sp, #16]
   14368:	e7f2      	b.n	14350 <cbvprintf_package+0x314>
				} else if (is_ro || rws_pos_en) {
   1436a:	f1bc 0f00 	cmp.w	ip, #0
   1436e:	d101      	bne.n	14374 <cbvprintf_package+0x338>
   14370:	9802      	ldr	r0, [sp, #8]
   14372:	b108      	cbz	r0, 14378 <cbvprintf_package+0x33c>
					len += 1;
   14374:	3601      	adds	r6, #1
   14376:	e7eb      	b.n	14350 <cbvprintf_package+0x314>
					len += strlen(s) + 1 + 1;
   14378:	4638      	mov	r0, r7
   1437a:	e9cd 1206 	strd	r1, r2, [sp, #24]
   1437e:	9301      	str	r3, [sp, #4]
   14380:	f7f8 ffad 	bl	d2de <strlen>
   14384:	3602      	adds	r6, #2
   14386:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   1438a:	9b01      	ldr	r3, [sp, #4]
   1438c:	4406      	add	r6, r0
   1438e:	e7df      	b.n	14350 <cbvprintf_package+0x314>
		} else if (size == sizeof(int)) {
   14390:	2904      	cmp	r1, #4
   14392:	d10f      	bne.n	143b4 <cbvprintf_package+0x378>
			int v = va_arg(ap, int);
   14394:	9801      	ldr	r0, [sp, #4]
   14396:	3004      	adds	r0, #4
			if (buf0 != NULL) {
   14398:	b12d      	cbz	r5, 143a6 <cbvprintf_package+0x36a>
			int v = va_arg(ap, int);
   1439a:	f8dd c004 	ldr.w	ip, [sp, #4]
   1439e:	f8dc c000 	ldr.w	ip, [ip]
   143a2:	f8c4 c000 	str.w	ip, [r4]
			buf += sizeof(int);
   143a6:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
   143a8:	9001      	str	r0, [sp, #4]
   143aa:	e693      	b.n	140d4 <cbvprintf_package+0x98>
   143ac:	0002e164 	.word	0x0002e164
   143b0:	00031f88 	.word	0x00031f88
		} else if (size == sizeof(long long)) {
   143b4:	2908      	cmp	r1, #8
   143b6:	f47f ae84 	bne.w	140c2 <cbvprintf_package+0x86>
			long long v = va_arg(ap, long long);
   143ba:	9801      	ldr	r0, [sp, #4]
   143bc:	f100 0b07 	add.w	fp, r0, #7
   143c0:	f02b 0007 	bic.w	r0, fp, #7
   143c4:	f100 0c08 	add.w	ip, r0, #8
   143c8:	f8cd c004 	str.w	ip, [sp, #4]
			if (buf0 != NULL) {
   143cc:	b11d      	cbz	r5, 143d6 <cbvprintf_package+0x39a>
			long long v = va_arg(ap, long long);
   143ce:	e9d0 bc00 	ldrd	fp, ip, [r0]
   143d2:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
   143d6:	3408      	adds	r4, #8
   143d8:	e67c      	b.n	140d4 <cbvprintf_package+0x98>
	if (BUF_OFFSET / sizeof(int) > 255) {
   143da:	1b61      	subs	r1, r4, r5
   143dc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   143e0:	f4bf ae6f 	bcs.w	140c2 <cbvprintf_package+0x86>
	if (buf0 == NULL) {
   143e4:	b91d      	cbnz	r5, 143ee <cbvprintf_package+0x3b2>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   143e6:	f1a6 0408 	sub.w	r4, r6, #8
   143ea:	1860      	adds	r0, r4, r1
   143ec:	e76a      	b.n	142c4 <cbvprintf_package+0x288>
	if (rws_pos_en) {
   143ee:	9b02      	ldr	r3, [sp, #8]
	*(char **)buf0 = NULL;
   143f0:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   143f2:	0889      	lsrs	r1, r1, #2
   143f4:	7029      	strb	r1, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   143f6:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (rws_pos_en) {
   143fa:	b1a3      	cbz	r3, 14426 <cbvprintf_package+0x3ea>
		pkg_hdr->desc.str_cnt = 0;
   143fc:	7068      	strb	r0, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   143fe:	70e9      	strb	r1, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   14400:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
   14404:	f1ba 0f00 	cmp.w	sl, #0
   14408:	d006      	beq.n	14418 <cbvprintf_package+0x3dc>
   1440a:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
   1440c:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
   14410:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
   14414:	4562      	cmp	r2, ip
   14416:	d10a      	bne.n	1442e <cbvprintf_package+0x3f2>
   14418:	f10d 0820 	add.w	r8, sp, #32
   1441c:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
   14420:	f1c5 0b01 	rsb	fp, r5, #1
   14424:	e039      	b.n	1449a <cbvprintf_package+0x45e>
		pkg_hdr->desc.rw_str_cnt = 0;
   14426:	9b02      	ldr	r3, [sp, #8]
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   14428:	7069      	strb	r1, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   1442a:	70eb      	strb	r3, [r5, #3]
   1442c:	e7e8      	b.n	14400 <cbvprintf_package+0x3c4>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   1442e:	f810 1b01 	ldrb.w	r1, [r0], #1
   14432:	060b      	lsls	r3, r1, #24
   14434:	d508      	bpl.n	14448 <cbvprintf_package+0x40c>
			if (BUF_OFFSET + 1 > len) {
   14436:	eb04 080e 	add.w	r8, r4, lr
   1443a:	4546      	cmp	r6, r8
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   1443c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   14440:	f4ff af3e 	bcc.w	142c0 <cbvprintf_package+0x284>
			*buf++ = pos;
   14444:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
   14448:	f10c 0c01 	add.w	ip, ip, #1
   1444c:	e7e2      	b.n	14414 <cbvprintf_package+0x3d8>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   1444e:	f1ba 0f00 	cmp.w	sl, #0
   14452:	d003      	beq.n	1445c <cbvprintf_package+0x420>
   14454:	f998 2000 	ldrsb.w	r2, [r8]
   14458:	2a00      	cmp	r2, #0
   1445a:	db1c      	blt.n	14496 <cbvprintf_package+0x45a>
		if (rws_pos_en) {
   1445c:	9b02      	ldr	r3, [sp, #8]
   1445e:	bb03      	cbnz	r3, 144a2 <cbvprintf_package+0x466>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   14460:	f898 2000 	ldrb.w	r2, [r8]
   14464:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   14468:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   1446c:	4638      	mov	r0, r7
   1446e:	f7f8 ff36 	bl	d2de <strlen>
   14472:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
   14474:	eb04 010b 	add.w	r1, r4, fp
   14478:	4411      	add	r1, r2
   1447a:	428e      	cmp	r6, r1
   1447c:	f4ff af20 	bcc.w	142c0 <cbvprintf_package+0x284>
		*buf++ = str_ptr_pos[i];
   14480:	f898 1000 	ldrb.w	r1, [r8]
   14484:	f804 1b01 	strb.w	r1, [r4], #1
   14488:	4639      	mov	r1, r7
   1448a:	4620      	mov	r0, r4
   1448c:	9201      	str	r2, [sp, #4]
   1448e:	f019 fca3 	bl	2ddd8 <memcpy>
		buf += size;
   14492:	9a01      	ldr	r2, [sp, #4]
   14494:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   14496:	f108 0801 	add.w	r8, r8, #1
   1449a:	45c1      	cmp	r9, r8
   1449c:	d1d7      	bne.n	1444e <cbvprintf_package+0x412>
	return BUF_OFFSET;
   1449e:	1b60      	subs	r0, r4, r5
   144a0:	e710      	b.n	142c4 <cbvprintf_package+0x288>
			size = 0;
   144a2:	2200      	movs	r2, #0
   144a4:	e7e6      	b.n	14474 <cbvprintf_package+0x438>
		return -EFAULT;
   144a6:	f06f 000d 	mvn.w	r0, #13
   144aa:	e70b      	b.n	142c4 <cbvprintf_package+0x288>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   144ac:	2907      	cmp	r1, #7
   144ae:	f63f ade1 	bhi.w	14074 <cbvprintf_package+0x38>
   144b2:	e705      	b.n	142c0 <cbvprintf_package+0x284>

000144b4 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   144b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144b8:	b091      	sub	sp, #68	; 0x44
   144ba:	4605      	mov	r5, r0
   144bc:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
   144c0:	9200      	str	r2, [sp, #0]
   144c2:	4699      	mov	r9, r3
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   144c4:	9101      	str	r1, [sp, #4]
   144c6:	b951      	cbnz	r1, 144de <cbprintf_package_convert+0x2a>
	buf += ros_nbr;
   144c8:	7802      	ldrb	r2, [r0, #0]
	s_nbr     = buf[1];
   144ca:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
   144cc:	7880      	ldrb	r0, [r0, #2]
   144ce:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   144d2:	4428      	add	r0, r5
	for (int i = 0; i < s_nbr; i++) {
   144d4:	460f      	mov	r7, r1
   144d6:	42be      	cmp	r6, r7
   144d8:	d81a      	bhi.n	14510 <cbprintf_package_convert+0x5c>
	return (size_t)(uintptr_t)(buf - start);
   144da:	1b43      	subs	r3, r0, r5
   144dc:	9301      	str	r3, [sp, #4]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   144de:	f895 a002 	ldrb.w	sl, [r5, #2]
	ro_cpy = ros_nbr &&
   144e2:	f1ba 0f00 	cmp.w	sl, #0
   144e6:	d01b      	beq.n	14520 <cbprintf_package_convert+0x6c>
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
   144e8:	f00b 0201 	and.w	r2, fp, #1

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   144ec:	78eb      	ldrb	r3, [r5, #3]
   144ee:	9302      	str	r3, [sp, #8]
	rw_cpy = rws_nbr > 0 &&
   144f0:	b113      	cbz	r3, 144f8 <cbprintf_package_convert+0x44>

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
   144f2:	f01b 0f02 	tst.w	fp, #2
   144f6:	d115      	bne.n	14524 <cbprintf_package_convert+0x70>
   144f8:	b9a2      	cbnz	r2, 14524 <cbprintf_package_convert+0x70>
		if (cb) {
   144fa:	9b00      	ldr	r3, [sp, #0]
   144fc:	b11b      	cbz	r3, 14506 <cbprintf_package_convert+0x52>
			cb(in_packaged, in_len, ctx);
   144fe:	9901      	ldr	r1, [sp, #4]
   14500:	464a      	mov	r2, r9
   14502:	4628      	mov	r0, r5
   14504:	4798      	blx	r3
		}

		return in_len;
   14506:	9e01      	ldr	r6, [sp, #4]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   14508:	4630      	mov	r0, r6
   1450a:	b011      	add	sp, #68	; 0x44
   1450c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   14510:	1c44      	adds	r4, r0, #1
		buf += strlen((const char *)buf) + 1;
   14512:	4620      	mov	r0, r4
   14514:	f7f8 fee3 	bl	d2de <strlen>
   14518:	3001      	adds	r0, #1
   1451a:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
   1451c:	3701      	adds	r7, #1
   1451e:	e7da      	b.n	144d6 <cbprintf_package_convert+0x22>
	ro_cpy = ros_nbr &&
   14520:	4652      	mov	r2, sl
   14522:	e7e3      	b.n	144ec <cbprintf_package_convert+0x38>
	args_size = in_desc->len * sizeof(int);
   14524:	782b      	ldrb	r3, [r5, #0]
   14526:	9304      	str	r3, [sp, #16]
   14528:	461c      	mov	r4, r3
   1452a:	009b      	lsls	r3, r3, #2
   1452c:	9303      	str	r3, [sp, #12]
	if (cb == NULL) {
   1452e:	9b00      	ldr	r3, [sp, #0]
	uint8_t *str_pos = &buf[args_size];
   14530:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	if (cb == NULL) {
   14534:	2b00      	cmp	r3, #0
   14536:	d15b      	bne.n	145f0 <cbprintf_package_convert+0x13c>
		out_len = (int)in_len;
   14538:	9e01      	ldr	r6, [sp, #4]
		if (ro_cpy) {
   1453a:	b38a      	cbz	r2, 145a0 <cbprintf_package_convert+0xec>
   1453c:	44a2      	add	sl, r4
	size_t strl_cnt = 0;
   1453e:	461f      	mov	r7, r3
			for (int i = 0; i < ros_nbr; i++) {
   14540:	4554      	cmp	r4, sl
   14542:	d11b      	bne.n	1457c <cbprintf_package_convert+0xc8>
		bool drop_ro_str_pos = !(flags &
   14544:	f8dd a008 	ldr.w	sl, [sp, #8]
   14548:	f8df c224 	ldr.w	ip, [pc, #548]	; 14770 <cbprintf_package_convert+0x2bc>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
   1454c:	4989      	ldr	r1, [pc, #548]	; (14774 <cbprintf_package_convert+0x2c0>)
		bool drop_ro_str_pos = !(flags &
   1454e:	f00b 0805 	and.w	r8, fp, #5
		for (int i = 0; i < rws_nbr; i++) {
   14552:	44a2      	add	sl, r4
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
   14554:	f00b 0202 	and.w	r2, fp, #2
		for (int i = 0; i < rws_nbr; i++) {
   14558:	4554      	cmp	r4, sl
   1455a:	d0d5      	beq.n	14508 <cbprintf_package_convert+0x54>
			const char *str = *(const char **)&buf32[*str_pos];
   1455c:	f814 0b01 	ldrb.w	r0, [r4], #1
   14560:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   14564:	4560      	cmp	r0, ip
   14566:	d326      	bcc.n	145b6 <cbprintf_package_convert+0x102>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
   14568:	4288      	cmp	r0, r1
   1456a:	d224      	bcs.n	145b6 <cbprintf_package_convert+0x102>
   1456c:	f01b 0f01 	tst.w	fp, #1
   14570:	d13b      	bne.n	145ea <cbprintf_package_convert+0x136>
			if (is_ro && drop_ro_str_pos) {
   14572:	f1b8 0f00 	cmp.w	r8, #0
   14576:	d1ef      	bne.n	14558 <cbprintf_package_convert+0xa4>
				out_len--;
   14578:	3e01      	subs	r6, #1
		for (int i = 0; i < rws_nbr; i++) {
   1457a:	e7ed      	b.n	14558 <cbprintf_package_convert+0xa4>
				const char *str = *(const char **)&buf32[*str_pos];
   1457c:	f814 3b01 	ldrb.w	r3, [r4], #1
		return 1 + strlen(str);
   14580:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
   14584:	f7f8 feab 	bl	d2de <strlen>
				if (strl && strl_cnt < strl_len) {
   14588:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
		return 1 + strlen(str);
   1458a:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   1458c:	b133      	cbz	r3, 1459c <cbprintf_package_convert+0xe8>
   1458e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   14590:	429f      	cmp	r7, r3
					strl[strl_cnt++] = (uint16_t)len;
   14592:	bf3e      	ittt	cc
   14594:	9b1b      	ldrcc	r3, [sp, #108]	; 0x6c
   14596:	f823 0017 	strhcc.w	r0, [r3, r7, lsl #1]
   1459a:	3701      	addcc	r7, #1
				out_len += len;
   1459c:	4406      	add	r6, r0
			for (int i = 0; i < ros_nbr; i++) {
   1459e:	e7cf      	b.n	14540 <cbprintf_package_convert+0x8c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
   145a0:	f1ba 0f00 	cmp.w	sl, #0
   145a4:	d005      	beq.n	145b2 <cbprintf_package_convert+0xfe>
   145a6:	f01b 0704 	ands.w	r7, fp, #4
   145aa:	d0cb      	beq.n	14544 <cbprintf_package_convert+0x90>
				str_pos += ros_nbr;
   145ac:	4454      	add	r4, sl
	size_t strl_cnt = 0;
   145ae:	4617      	mov	r7, r2
   145b0:	e7c8      	b.n	14544 <cbprintf_package_convert+0x90>
   145b2:	4657      	mov	r7, sl
   145b4:	e7c6      	b.n	14544 <cbprintf_package_convert+0x90>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
   145b6:	2a00      	cmp	r2, #0
   145b8:	d0ce      	beq.n	14558 <cbprintf_package_convert+0xa4>
   145ba:	f04f 0900 	mov.w	r9, #0
		return 1 + strlen(str);
   145be:	9200      	str	r2, [sp, #0]
   145c0:	f7f8 fe8d 	bl	d2de <strlen>
				if (strl && strl_cnt < strl_len) {
   145c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   145c6:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 14770 <cbprintf_package_convert+0x2bc>
   145ca:	9a00      	ldr	r2, [sp, #0]
   145cc:	4969      	ldr	r1, [pc, #420]	; (14774 <cbprintf_package_convert+0x2c0>)
		return 1 + strlen(str);
   145ce:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   145d0:	b133      	cbz	r3, 145e0 <cbprintf_package_convert+0x12c>
   145d2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   145d4:	429f      	cmp	r7, r3
					strl[strl_cnt++] = (uint16_t)len;
   145d6:	bf3e      	ittt	cc
   145d8:	9b1b      	ldrcc	r3, [sp, #108]	; 0x6c
   145da:	f823 0017 	strhcc.w	r0, [r3, r7, lsl #1]
   145de:	3701      	addcc	r7, #1
				out_len += len;
   145e0:	4406      	add	r6, r0
			if (is_ro && drop_ro_str_pos) {
   145e2:	f1b9 0f00 	cmp.w	r9, #0
   145e6:	d0b7      	beq.n	14558 <cbprintf_package_convert+0xa4>
   145e8:	e7c3      	b.n	14572 <cbprintf_package_convert+0xbe>
   145ea:	f04f 0901 	mov.w	r9, #1
   145ee:	e7e6      	b.n	145be <cbprintf_package_convert+0x10a>
	if (ro_cpy) {
   145f0:	2a00      	cmp	r2, #0
   145f2:	f040 80b0 	bne.w	14756 <cbprintf_package_convert+0x2a2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
   145f6:	f1ba 0f00 	cmp.w	sl, #0
   145fa:	d059      	beq.n	146b0 <cbprintf_package_convert+0x1fc>
   145fc:	f01b 0f04 	tst.w	fp, #4
   14600:	f040 80b2 	bne.w	14768 <cbprintf_package_convert+0x2b4>
		keep_cnt = 0;
   14604:	4690      	mov	r8, r2
		scpy_cnt = 0;
   14606:	4617      	mov	r7, r2
	str_pos += ros_nbr;
   14608:	9b02      	ldr	r3, [sp, #8]
   1460a:	4454      	add	r4, sl
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
   1460c:	f00b 0202 	and.w	r2, fp, #2
   14610:	eb04 0c03 	add.w	ip, r4, r3
   14614:	4621      	mov	r1, r4
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
   14616:	f00b 0301 	and.w	r3, fp, #1
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
   1461a:	9205      	str	r2, [sp, #20]
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
   1461c:	f00b 0604 	and.w	r6, fp, #4
	for (int i = 0; i < rws_nbr; i++) {
   14620:	4561      	cmp	r1, ip
   14622:	d148      	bne.n	146b6 <cbprintf_package_convert+0x202>
   14624:	9a02      	ldr	r2, [sp, #8]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   14626:	786e      	ldrb	r6, [r5, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
   14628:	f01b 0f02 	tst.w	fp, #2
   1462c:	4414      	add	r4, r2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   1462e:	eb06 0207 	add.w	r2, r6, r7
   14632:	b2d2      	uxtb	r2, r2
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
   14634:	bf0c      	ite	eq
   14636:	4640      	moveq	r0, r8
   14638:	2000      	movne	r0, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
   1463a:	2b00      	cmp	r3, #0
   1463c:	d15f      	bne.n	146fe <cbprintf_package_convert+0x24a>
   1463e:	f01b 0f04 	tst.w	fp, #4
   14642:	bf14      	ite	ne
   14644:	4641      	movne	r1, r8
   14646:	2100      	moveq	r1, #0
	*in_desc = out_desc;
   14648:	706a      	strb	r2, [r5, #1]
   1464a:	70a9      	strb	r1, [r5, #2]
   1464c:	70e8      	strb	r0, [r5, #3]
	rv = cb(in_packaged, args_size, ctx);
   1464e:	9903      	ldr	r1, [sp, #12]
   14650:	9b00      	ldr	r3, [sp, #0]
   14652:	464a      	mov	r2, r9
   14654:	4628      	mov	r0, r5
   14656:	4798      	blx	r3
	if (rv < 0) {
   14658:	f1b0 0b00 	subs.w	fp, r0, #0
   1465c:	db77      	blt.n	1474e <cbprintf_package_convert+0x29a>
	*in_desc = in_desc_backup;
   1465e:	9b04      	ldr	r3, [sp, #16]
   14660:	702b      	strb	r3, [r5, #0]
   14662:	9b02      	ldr	r3, [sp, #8]
   14664:	706e      	strb	r6, [r5, #1]
   14666:	70eb      	strb	r3, [r5, #3]
   14668:	f885 a002 	strb.w	sl, [r5, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   1466c:	9b00      	ldr	r3, [sp, #0]
   1466e:	464a      	mov	r2, r9
   14670:	4641      	mov	r1, r8
   14672:	a80c      	add	r0, sp, #48	; 0x30
   14674:	4798      	blx	r3
	if (rv < 0) {
   14676:	1e06      	subs	r6, r0, #0
   14678:	f6ff af46 	blt.w	14508 <cbprintf_package_convert+0x54>
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
   1467c:	9b02      	ldr	r3, [sp, #8]
   1467e:	9903      	ldr	r1, [sp, #12]
   14680:	449a      	add	sl, r3
	rv = cb(str_pos, strs_len, ctx);
   14682:	9b01      	ldr	r3, [sp, #4]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
   14684:	4451      	add	r1, sl
	rv = cb(str_pos, strs_len, ctx);
   14686:	1a59      	subs	r1, r3, r1
   14688:	464a      	mov	r2, r9
   1468a:	9b00      	ldr	r3, [sp, #0]
   1468c:	4620      	mov	r0, r4
   1468e:	4798      	blx	r3
	if (rv < 0) {
   14690:	2800      	cmp	r0, #0
   14692:	db5e      	blt.n	14752 <cbprintf_package_convert+0x29e>
	out_len += rv;
   14694:	445e      	add	r6, fp
	out_len += rv;
   14696:	4406      	add	r6, r0
	for (int i = 0; i < scpy_cnt; i++) {
   14698:	f04f 0800 	mov.w	r8, #0
		uint8_t loc = cpy_str_pos[i];
   1469c:	f10d 0b20 	add.w	fp, sp, #32
	for (int i = 0; i < scpy_cnt; i++) {
   146a0:	4547      	cmp	r7, r8
   146a2:	dc2e      	bgt.n	14702 <cbprintf_package_convert+0x24e>
	(void)cb(NULL, 0, ctx);
   146a4:	2100      	movs	r1, #0
   146a6:	9b00      	ldr	r3, [sp, #0]
   146a8:	464a      	mov	r2, r9
   146aa:	4608      	mov	r0, r1
   146ac:	4798      	blx	r3
	return out_len;
   146ae:	e72b      	b.n	14508 <cbprintf_package_convert+0x54>
		keep_cnt = 0;
   146b0:	46d0      	mov	r8, sl
		scpy_cnt = 0;
   146b2:	4657      	mov	r7, sl
   146b4:	e7a8      	b.n	14608 <cbprintf_package_convert+0x154>
		const char *str = *(const char **)&buf32[*str_pos];
   146b6:	f811 2b01 	ldrb.w	r2, [r1], #1
   146ba:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 14770 <cbprintf_package_convert+0x2bc>
   146be:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
   146c2:	4570      	cmp	r0, lr
   146c4:	d303      	bcc.n	146ce <cbprintf_package_convert+0x21a>
   146c6:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 14774 <cbprintf_package_convert+0x2c0>
   146ca:	4570      	cmp	r0, lr
   146cc:	d30b      	bcc.n	146e6 <cbprintf_package_convert+0x232>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
   146ce:	9805      	ldr	r0, [sp, #20]
   146d0:	b950      	cbnz	r0, 146e8 <cbprintf_package_convert+0x234>
				keep_str_pos[keep_cnt++] = *str_pos;
   146d2:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
   146d6:	f108 0001 	add.w	r0, r8, #1
   146da:	44f0      	add	r8, lr
   146dc:	f808 2c10 	strb.w	r2, [r8, #-16]
   146e0:	fa5f f880 	uxtb.w	r8, r0
	for (int i = 0; i < rws_nbr; i++) {
   146e4:	e79c      	b.n	14620 <cbprintf_package_convert+0x16c>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
   146e6:	b13b      	cbz	r3, 146f8 <cbprintf_package_convert+0x244>
				cpy_str_pos[scpy_cnt++] = *str_pos;
   146e8:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
   146ec:	1c78      	adds	r0, r7, #1
   146ee:	4477      	add	r7, lr
   146f0:	f807 2c20 	strb.w	r2, [r7, #-32]
   146f4:	b2c7      	uxtb	r7, r0
   146f6:	e793      	b.n	14620 <cbprintf_package_convert+0x16c>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
   146f8:	2e00      	cmp	r6, #0
   146fa:	d091      	beq.n	14620 <cbprintf_package_convert+0x16c>
   146fc:	e7e9      	b.n	146d2 <cbprintf_package_convert+0x21e>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
   146fe:	2100      	movs	r1, #0
   14700:	e7a2      	b.n	14648 <cbprintf_package_convert+0x194>
		uint8_t loc = cpy_str_pos[i];
   14702:	f818 300b 	ldrb.w	r3, [r8, fp]
   14706:	f88d 301f 	strb.w	r3, [sp, #31]
		const char *str = *(const char **)&buf32[loc];
   1470a:	f855 a023 	ldr.w	sl, [r5, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   1470e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   14710:	b1db      	cbz	r3, 1474a <cbprintf_package_convert+0x296>
   14712:	f833 4018 	ldrh.w	r4, [r3, r8, lsl #1]
		rv = cb(&loc, 1, ctx);
   14716:	9b00      	ldr	r3, [sp, #0]
   14718:	464a      	mov	r2, r9
   1471a:	2101      	movs	r1, #1
   1471c:	f10d 001f 	add.w	r0, sp, #31
   14720:	4798      	blx	r3
		if (rv < 0) {
   14722:	2800      	cmp	r0, #0
   14724:	db15      	blt.n	14752 <cbprintf_package_convert+0x29e>
		out_len += rv;
   14726:	4406      	add	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   14728:	b924      	cbnz	r4, 14734 <cbprintf_package_convert+0x280>
   1472a:	4650      	mov	r0, sl
   1472c:	f7f8 fdd7 	bl	d2de <strlen>
   14730:	1c44      	adds	r4, r0, #1
   14732:	b2a4      	uxth	r4, r4
	return cb(str, strl, ctx);
   14734:	9b00      	ldr	r3, [sp, #0]
   14736:	464a      	mov	r2, r9
   14738:	4621      	mov	r1, r4
   1473a:	4650      	mov	r0, sl
   1473c:	4798      	blx	r3
		if (rv < 0) {
   1473e:	2800      	cmp	r0, #0
   14740:	db07      	blt.n	14752 <cbprintf_package_convert+0x29e>
		out_len += rv;
   14742:	4406      	add	r6, r0
	for (int i = 0; i < scpy_cnt; i++) {
   14744:	f108 0801 	add.w	r8, r8, #1
   14748:	e7aa      	b.n	146a0 <cbprintf_package_convert+0x1ec>
		uint16_t str_len = strl ? strl[i] : 0;
   1474a:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   1474c:	e7e3      	b.n	14716 <cbprintf_package_convert+0x262>
   1474e:	465e      	mov	r6, fp
   14750:	e6da      	b.n	14508 <cbprintf_package_convert+0x54>
   14752:	4606      	mov	r6, r0
   14754:	e6d8      	b.n	14508 <cbprintf_package_convert+0x54>
	ros_nbr = in_desc->ro_str_cnt;
   14756:	4657      	mov	r7, sl
		dst = cpy_str_pos;
   14758:	a808      	add	r0, sp, #32
		keep_cnt = 0;
   1475a:	f04f 0800 	mov.w	r8, #0
   1475e:	4652      	mov	r2, sl
   14760:	4621      	mov	r1, r4
   14762:	f019 fb39 	bl	2ddd8 <memcpy>
   14766:	e74f      	b.n	14608 <cbprintf_package_convert+0x154>
   14768:	46d0      	mov	r8, sl
		dst = keep_str_pos;
   1476a:	a80c      	add	r0, sp, #48	; 0x30
		scpy_cnt = 0;
   1476c:	4617      	mov	r7, r2
   1476e:	e7f6      	b.n	1475e <cbprintf_package_convert+0x2aa>
   14770:	0002e164 	.word	0x0002e164
   14774:	00031f88 	.word	0x00031f88

00014778 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   14778:	4b01      	ldr	r3, [pc, #4]	; (14780 <__printk_hook_install+0x8>)
   1477a:	6018      	str	r0, [r3, #0]
}
   1477c:	4770      	bx	lr
   1477e:	bf00      	nop
   14780:	20000624 	.word	0x20000624

00014784 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   14784:	b530      	push	{r4, r5, lr}
   14786:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   14788:	2500      	movs	r5, #0
   1478a:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   1478e:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   14790:	9500      	str	r5, [sp, #0]
   14792:	a903      	add	r1, sp, #12
   14794:	4805      	ldr	r0, [pc, #20]	; (147ac <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   14796:	9505      	str	r5, [sp, #20]
   14798:	f000 f94a 	bl	14a30 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   1479c:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   147a0:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   147a2:	bfb8      	it	lt
   147a4:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   147a6:	b007      	add	sp, #28
   147a8:	bd30      	pop	{r4, r5, pc}
   147aa:	bf00      	nop
   147ac:	000294cf 	.word	0x000294cf

000147b0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   147b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   147b4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   147b8:	f019 0808 	ands.w	r8, r9, #8
{
   147bc:	4604      	mov	r4, r0
   147be:	4693      	mov	fp, r2
	if (processing) {
   147c0:	d00d      	beq.n	147de <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   147c2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   147c4:	bf0c      	ite	eq
   147c6:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   147ca:	f049 0920 	orrne.w	r9, r9, #32
   147ce:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   147d2:	f38b 8811 	msr	BASEPRI, fp
   147d6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   147da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   147de:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   147e2:	2902      	cmp	r1, #2
   147e4:	d107      	bne.n	147f6 <process_event+0x46>
			evt = process_recheck(mgr);
   147e6:	4620      	mov	r0, r4
   147e8:	f014 fea0 	bl	2952c <process_recheck>
		if (evt == EVT_NOP) {
   147ec:	2800      	cmp	r0, #0
   147ee:	d0f0      	beq.n	147d2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   147f0:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   147f2:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
   147f4:	d14e      	bne.n	14894 <process_event+0xe4>
			res = mgr->last_res;
   147f6:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   147f8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   147fa:	2f00      	cmp	r7, #0
   147fc:	da15      	bge.n	1482a <process_event+0x7a>
		*clients = mgr->clients;
   147fe:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   14800:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   14804:	e9c4 8800 	strd	r8, r8, [r4]
   14808:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1480c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   1480e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   14810:	8b21      	ldrh	r1, [r4, #24]
   14812:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   14816:	45ca      	cmp	sl, r9
   14818:	d002      	beq.n	14820 <process_event+0x70>
		if (do_monitors
   1481a:	68a3      	ldr	r3, [r4, #8]
   1481c:	2b00      	cmp	r3, #0
   1481e:	d15a      	bne.n	148d6 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
   14820:	b90d      	cbnz	r5, 14826 <process_event+0x76>
		    || (transit != NULL)) {
   14822:	2e00      	cmp	r6, #0
   14824:	d071      	beq.n	1490a <process_event+0x15a>
   14826:	2300      	movs	r3, #0
   14828:	e056      	b.n	148d8 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1482a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1482e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   14830:	2a01      	cmp	r2, #1
   14832:	d81e      	bhi.n	14872 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   14834:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   14838:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   1483a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1483c:	b289      	uxth	r1, r1
   1483e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   14842:	d10a      	bne.n	1485a <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   14844:	b13d      	cbz	r5, 14856 <process_event+0xa6>
   14846:	8b63      	ldrh	r3, [r4, #26]
   14848:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   1484a:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
   1484c:	3301      	adds	r3, #1
   1484e:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   14850:	2a00      	cmp	r2, #0
   14852:	d1fa      	bne.n	1484a <process_event+0x9a>
   14854:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   14856:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   1485a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   1485c:	4620      	mov	r0, r4
   1485e:	f014 fe65 	bl	2952c <process_recheck>
   14862:	4606      	mov	r6, r0
   14864:	2800      	cmp	r0, #0
   14866:	d0d3      	beq.n	14810 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   14868:	8b23      	ldrh	r3, [r4, #24]
   1486a:	f043 0320 	orr.w	r3, r3, #32
   1486e:	8323      	strh	r3, [r4, #24]
   14870:	e7cd      	b.n	1480e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   14872:	2b04      	cmp	r3, #4
   14874:	d10c      	bne.n	14890 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   14876:	f021 0107 	bic.w	r1, r1, #7
   1487a:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1487c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   1487e:	4620      	mov	r0, r4
   14880:	f014 fe54 	bl	2952c <process_recheck>
   14884:	4605      	mov	r5, r0
   14886:	2800      	cmp	r0, #0
   14888:	d0c1      	beq.n	1480e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1488a:	f041 0120 	orr.w	r1, r1, #32
   1488e:	8321      	strh	r1, [r4, #24]
   14890:	2500      	movs	r5, #0
   14892:	e7bc      	b.n	1480e <process_event+0x5e>
		} else if (evt == EVT_START) {
   14894:	2803      	cmp	r0, #3
   14896:	d109      	bne.n	148ac <process_event+0xfc>
			transit = mgr->transitions->start;
   14898:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1489a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   1489e:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   148a0:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   148a4:	8323      	strh	r3, [r4, #24]
}
   148a6:	2500      	movs	r5, #0
		res = 0;
   148a8:	462f      	mov	r7, r5
   148aa:	e7b1      	b.n	14810 <process_event+0x60>
		} else if (evt == EVT_STOP) {
   148ac:	2804      	cmp	r0, #4
   148ae:	d106      	bne.n	148be <process_event+0x10e>
			transit = mgr->transitions->stop;
   148b0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   148b2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   148b6:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   148b8:	f043 0304 	orr.w	r3, r3, #4
   148bc:	e7f2      	b.n	148a4 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
   148be:	2805      	cmp	r0, #5
   148c0:	d106      	bne.n	148d0 <process_event+0x120>
			transit = mgr->transitions->reset;
   148c2:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   148c4:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   148c8:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   148ca:	f043 0305 	orr.w	r3, r3, #5
   148ce:	e7e9      	b.n	148a4 <process_event+0xf4>
   148d0:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   148d2:	462e      	mov	r6, r5
   148d4:	e7e8      	b.n	148a8 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
   148d6:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   148d8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   148dc:	8321      	strh	r1, [r4, #24]
   148de:	f38b 8811 	msr	BASEPRI, fp
   148e2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   148e6:	b9fb      	cbnz	r3, 14928 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
   148e8:	bb85      	cbnz	r5, 1494c <process_event+0x19c>
			if (transit != NULL) {
   148ea:	b116      	cbz	r6, 148f2 <process_event+0x142>
				transit(mgr, transition_complete);
   148ec:	491f      	ldr	r1, [pc, #124]	; (1496c <process_event+0x1bc>)
   148ee:	4620      	mov	r0, r4
   148f0:	47b0      	blx	r6
	__asm__ volatile(
   148f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   148f6:	f3ef 8b11 	mrs	fp, BASEPRI
   148fa:	f383 8812 	msr	BASEPRI_MAX, r3
   148fe:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   14902:	8b23      	ldrh	r3, [r4, #24]
   14904:	f023 0308 	bic.w	r3, r3, #8
   14908:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1490a:	8b23      	ldrh	r3, [r4, #24]
   1490c:	06da      	lsls	r2, r3, #27
   1490e:	d525      	bpl.n	1495c <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   14910:	f023 0310 	bic.w	r3, r3, #16
   14914:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   14916:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   14918:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   1491c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   14920:	2900      	cmp	r1, #0
   14922:	f47f af5e 	bne.w	147e2 <process_event+0x32>
out:
   14926:	e754      	b.n	147d2 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   14928:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1492a:	2900      	cmp	r1, #0
   1492c:	d0dc      	beq.n	148e8 <process_event+0x138>
	return node->next;
   1492e:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   14932:	f8d1 b004 	ldr.w	fp, [r1, #4]
   14936:	463b      	mov	r3, r7
   14938:	4652      	mov	r2, sl
   1493a:	4620      	mov	r0, r4
   1493c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1493e:	f1b9 0f00 	cmp.w	r9, #0
   14942:	d0d1      	beq.n	148e8 <process_event+0x138>
   14944:	4649      	mov	r1, r9
   14946:	f8d9 9000 	ldr.w	r9, [r9]
   1494a:	e7f2      	b.n	14932 <process_event+0x182>
   1494c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   1494e:	463b      	mov	r3, r7
   14950:	4652      	mov	r2, sl
   14952:	4620      	mov	r0, r4
   14954:	682d      	ldr	r5, [r5, #0]
   14956:	f014 fe05 	bl	29564 <notify_one>
   1495a:	e7c5      	b.n	148e8 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1495c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   14960:	bf1e      	ittt	ne
   14962:	f023 0320 	bicne.w	r3, r3, #32
   14966:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   14968:	2102      	movne	r1, #2
   1496a:	e7d5      	b.n	14918 <process_event+0x168>
   1496c:	00029591 	.word	0x00029591

00014970 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   14970:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
   14972:	4e08      	ldr	r6, [pc, #32]	; (14994 <extract_decimal+0x24>)
   14974:	6802      	ldr	r2, [r0, #0]
{
   14976:	4603      	mov	r3, r0
		val = 10U * val + *sp++ - '0';
   14978:	270a      	movs	r7, #10
	size_t val = 0;
   1497a:	2000      	movs	r0, #0
   1497c:	4611      	mov	r1, r2
	while (isdigit((int)(unsigned char)*sp)) {
   1497e:	3201      	adds	r2, #1
   14980:	780c      	ldrb	r4, [r1, #0]
   14982:	5da5      	ldrb	r5, [r4, r6]
   14984:	076d      	lsls	r5, r5, #29
   14986:	d401      	bmi.n	1498c <extract_decimal+0x1c>
	}
	*str = sp;
   14988:	6019      	str	r1, [r3, #0]
	return val;
}
   1498a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   1498c:	fb07 4000 	mla	r0, r7, r0, r4
   14990:	3830      	subs	r0, #48	; 0x30
   14992:	e7f3      	b.n	1497c <extract_decimal+0xc>
   14994:	00031e53 	.word	0x00031e53

00014998 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   14998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1499c:	4615      	mov	r5, r2
   1499e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   149a0:	78d3      	ldrb	r3, [r2, #3]
   149a2:	4a22      	ldr	r2, [pc, #136]	; (14a2c <encode_uint+0x94>)
   149a4:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
   149a8:	2b6f      	cmp	r3, #111	; 0x6f
{
   149aa:	4680      	mov	r8, r0
   149ac:	460f      	mov	r7, r1
   149ae:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   149b2:	d029      	beq.n	14a08 <encode_uint+0x70>
   149b4:	d824      	bhi.n	14a00 <encode_uint+0x68>
		return 16;
   149b6:	2b58      	cmp	r3, #88	; 0x58
   149b8:	bf14      	ite	ne
   149ba:	260a      	movne	r6, #10
   149bc:	2610      	moveq	r6, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   149be:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   149c2:	4632      	mov	r2, r6
   149c4:	2300      	movs	r3, #0
   149c6:	4640      	mov	r0, r8
   149c8:	4639      	mov	r1, r7
   149ca:	f7ec fbd1 	bl	1170 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   149ce:	2a09      	cmp	r2, #9
   149d0:	b2d4      	uxtb	r4, r2
   149d2:	d81e      	bhi.n	14a12 <encode_uint+0x7a>
   149d4:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   149d6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   149d8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   149da:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   149de:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   149e2:	d301      	bcc.n	149e8 <encode_uint+0x50>
   149e4:	45d1      	cmp	r9, sl
   149e6:	d811      	bhi.n	14a0c <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   149e8:	782b      	ldrb	r3, [r5, #0]
   149ea:	069b      	lsls	r3, r3, #26
   149ec:	d505      	bpl.n	149fa <encode_uint+0x62>
		if (radix == 8) {
   149ee:	2e08      	cmp	r6, #8
   149f0:	d115      	bne.n	14a1e <encode_uint+0x86>
			conv->altform_0 = true;
   149f2:	78ab      	ldrb	r3, [r5, #2]
   149f4:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   149f8:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
   149fa:	4648      	mov	r0, r9
   149fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   14a00:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   14a04:	2b70      	cmp	r3, #112	; 0x70
   14a06:	e7d7      	b.n	149b8 <encode_uint+0x20>
	switch (specifier) {
   14a08:	2608      	movs	r6, #8
   14a0a:	e7d8      	b.n	149be <encode_uint+0x26>
		value /= radix;
   14a0c:	4680      	mov	r8, r0
   14a0e:	460f      	mov	r7, r1
   14a10:	e7d7      	b.n	149c2 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   14a12:	f1bb 0f01 	cmp.w	fp, #1
   14a16:	bf0c      	ite	eq
   14a18:	3437      	addeq	r4, #55	; 0x37
   14a1a:	3457      	addne	r4, #87	; 0x57
   14a1c:	e7db      	b.n	149d6 <encode_uint+0x3e>
		} else if (radix == 16) {
   14a1e:	2e10      	cmp	r6, #16
   14a20:	d1eb      	bne.n	149fa <encode_uint+0x62>
			conv->altform_0c = true;
   14a22:	78ab      	ldrb	r3, [r5, #2]
   14a24:	f043 0310 	orr.w	r3, r3, #16
   14a28:	e7e6      	b.n	149f8 <encode_uint+0x60>
   14a2a:	bf00      	nop
   14a2c:	00031e53 	.word	0x00031e53

00014a30 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   14a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a34:	4682      	mov	sl, r0
   14a36:	b093      	sub	sp, #76	; 0x4c
   14a38:	468b      	mov	fp, r1
   14a3a:	4691      	mov	r9, r2
   14a3c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   14a3e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   14a40:	f899 0000 	ldrb.w	r0, [r9]
   14a44:	b908      	cbnz	r0, 14a4a <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   14a46:	4628      	mov	r0, r5
   14a48:	e341      	b.n	150ce <z_cbvprintf_impl+0x69e>
			OUTC(*fp++);
   14a4a:	f109 0301 	add.w	r3, r9, #1
		if (*fp != '%') {
   14a4e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   14a50:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
   14a52:	d006      	beq.n	14a62 <z_cbvprintf_impl+0x32>
			OUTC('%');
   14a54:	4659      	mov	r1, fp
   14a56:	47d0      	blx	sl
   14a58:	2800      	cmp	r0, #0
   14a5a:	f2c0 8338 	blt.w	150ce <z_cbvprintf_impl+0x69e>
   14a5e:	3501      	adds	r5, #1
			break;
   14a60:	e1f5      	b.n	14e4e <z_cbvprintf_impl+0x41e>
		} state = {
   14a62:	2218      	movs	r2, #24
   14a64:	2100      	movs	r1, #0
   14a66:	a80c      	add	r0, sp, #48	; 0x30
   14a68:	f019 f9d7 	bl	2de1a <memset>
	if (*sp == '%') {
   14a6c:	f899 3001 	ldrb.w	r3, [r9, #1]
   14a70:	2b25      	cmp	r3, #37	; 0x25
   14a72:	d05a      	beq.n	14b2a <z_cbvprintf_impl+0xfa>
   14a74:	f109 0201 	add.w	r2, r9, #1
   14a78:	4616      	mov	r6, r2
		switch (*sp) {
   14a7a:	f812 3b01 	ldrb.w	r3, [r2], #1
   14a7e:	2b2b      	cmp	r3, #43	; 0x2b
   14a80:	f000 808b 	beq.w	14b9a <z_cbvprintf_impl+0x16a>
   14a84:	d879      	bhi.n	14b7a <z_cbvprintf_impl+0x14a>
   14a86:	2b20      	cmp	r3, #32
   14a88:	f000 808c 	beq.w	14ba4 <z_cbvprintf_impl+0x174>
   14a8c:	2b23      	cmp	r3, #35	; 0x23
   14a8e:	f000 808e 	beq.w	14bae <z_cbvprintf_impl+0x17e>
	if (conv->flag_zero && conv->flag_dash) {
   14a92:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   14a96:	f003 0244 	and.w	r2, r3, #68	; 0x44
   14a9a:	2a44      	cmp	r2, #68	; 0x44
   14a9c:	d103      	bne.n	14aa6 <z_cbvprintf_impl+0x76>
		conv->flag_zero = false;
   14a9e:	f36f 1386 	bfc	r3, #6, #1
   14aa2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
   14aa6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   14aaa:	9605      	str	r6, [sp, #20]
   14aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14ab0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
   14ab4:	7833      	ldrb	r3, [r6, #0]
   14ab6:	2b2a      	cmp	r3, #42	; 0x2a
   14ab8:	d17e      	bne.n	14bb8 <z_cbvprintf_impl+0x188>
		conv->width_star = true;
   14aba:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   14abe:	f043 0301 	orr.w	r3, r3, #1
   14ac2:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
   14ac6:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
   14ac8:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   14aca:	781a      	ldrb	r2, [r3, #0]
   14acc:	2a2e      	cmp	r2, #46	; 0x2e
   14ace:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   14ad2:	bf0c      	ite	eq
   14ad4:	2101      	moveq	r1, #1
   14ad6:	2100      	movne	r1, #0
   14ad8:	f361 0241 	bfi	r2, r1, #1, #1
   14adc:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
   14ae0:	d10b      	bne.n	14afa <z_cbvprintf_impl+0xca>
	++sp;
   14ae2:	1c5a      	adds	r2, r3, #1
   14ae4:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   14ae6:	785a      	ldrb	r2, [r3, #1]
   14ae8:	2a2a      	cmp	r2, #42	; 0x2a
   14aea:	d17b      	bne.n	14be4 <z_cbvprintf_impl+0x1b4>
		conv->prec_star = true;
   14aec:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   14af0:	f042 0204 	orr.w	r2, r2, #4
   14af4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
   14af8:	3302      	adds	r3, #2
	switch (*sp) {
   14afa:	4619      	mov	r1, r3
   14afc:	f811 0b01 	ldrb.w	r0, [r1], #1
   14b00:	286c      	cmp	r0, #108	; 0x6c
   14b02:	f000 80b6 	beq.w	14c72 <z_cbvprintf_impl+0x242>
   14b06:	d87d      	bhi.n	14c04 <z_cbvprintf_impl+0x1d4>
   14b08:	2868      	cmp	r0, #104	; 0x68
   14b0a:	f000 8084 	beq.w	14c16 <z_cbvprintf_impl+0x1e6>
   14b0e:	286a      	cmp	r0, #106	; 0x6a
   14b10:	f000 80b9 	beq.w	14c86 <z_cbvprintf_impl+0x256>
   14b14:	284c      	cmp	r0, #76	; 0x4c
   14b16:	f000 80bd 	beq.w	14c94 <z_cbvprintf_impl+0x264>
		conv->length_mod = LENGTH_NONE;
   14b1a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   14b1e:	f36f 02c6 	bfc	r2, #3, #4
   14b22:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
   14b26:	4619      	mov	r1, r3
   14b28:	e080      	b.n	14c2c <z_cbvprintf_impl+0x1fc>
		conv->specifier = *sp++;
   14b2a:	f109 0202 	add.w	r2, r9, #2
   14b2e:	9202      	str	r2, [sp, #8]
   14b30:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
   14b34:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   14b38:	07d9      	lsls	r1, r3, #31
   14b3a:	f140 814a 	bpl.w	14dd2 <z_cbvprintf_impl+0x3a2>
			width = va_arg(ap, int);
   14b3e:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   14b42:	f1b8 0f00 	cmp.w	r8, #0
   14b46:	da07      	bge.n	14b58 <z_cbvprintf_impl+0x128>
				conv->flag_dash = true;
   14b48:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   14b4c:	f042 0204 	orr.w	r2, r2, #4
   14b50:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
   14b54:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   14b58:	075a      	lsls	r2, r3, #29
   14b5a:	f140 8143 	bpl.w	14de4 <z_cbvprintf_impl+0x3b4>
			int arg = va_arg(ap, int);
   14b5e:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   14b62:	2f00      	cmp	r7, #0
   14b64:	f280 8142 	bge.w	14dec <z_cbvprintf_impl+0x3bc>
				conv->prec_present = false;
   14b68:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   14b6c:	f36f 0341 	bfc	r3, #1, #1
   14b70:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
   14b74:	f04f 37ff 	mov.w	r7, #4294967295
   14b78:	e138      	b.n	14dec <z_cbvprintf_impl+0x3bc>
		switch (*sp) {
   14b7a:	2b2d      	cmp	r3, #45	; 0x2d
   14b7c:	d006      	beq.n	14b8c <z_cbvprintf_impl+0x15c>
   14b7e:	2b30      	cmp	r3, #48	; 0x30
   14b80:	d187      	bne.n	14a92 <z_cbvprintf_impl+0x62>
			conv->flag_zero = true;
   14b82:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   14b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14b8a:	e003      	b.n	14b94 <z_cbvprintf_impl+0x164>
			conv->flag_dash = true;
   14b8c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   14b90:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   14b94:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
   14b98:	e76e      	b.n	14a78 <z_cbvprintf_impl+0x48>
			conv->flag_plus = true;
   14b9a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   14b9e:	f043 0308 	orr.w	r3, r3, #8
   14ba2:	e7f7      	b.n	14b94 <z_cbvprintf_impl+0x164>
			conv->flag_space = true;
   14ba4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   14ba8:	f043 0310 	orr.w	r3, r3, #16
   14bac:	e7f2      	b.n	14b94 <z_cbvprintf_impl+0x164>
			conv->flag_hash = true;
   14bae:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   14bb2:	f043 0320 	orr.w	r3, r3, #32
   14bb6:	e7ed      	b.n	14b94 <z_cbvprintf_impl+0x164>
	size_t width = extract_decimal(&sp);
   14bb8:	a805      	add	r0, sp, #20
   14bba:	f7ff fed9 	bl	14970 <extract_decimal>
	if (sp != wp) {
   14bbe:	9b05      	ldr	r3, [sp, #20]
   14bc0:	42b3      	cmp	r3, r6
   14bc2:	d081      	beq.n	14ac8 <z_cbvprintf_impl+0x98>
		conv->unsupported |= ((conv->width_value < 0)
   14bc4:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
   14bc8:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
   14bca:	f3c1 0240 	ubfx	r2, r1, #1, #1
   14bce:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   14bd2:	0052      	lsls	r2, r2, #1
   14bd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14bd8:	f001 017d 	and.w	r1, r1, #125	; 0x7d
   14bdc:	430a      	orrs	r2, r1
   14bde:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   14be2:	e771      	b.n	14ac8 <z_cbvprintf_impl+0x98>
	size_t prec = extract_decimal(&sp);
   14be4:	a805      	add	r0, sp, #20
   14be6:	f7ff fec3 	bl	14970 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   14bea:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
   14bee:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
   14bf0:	f3c3 0240 	ubfx	r2, r3, #1, #1
   14bf4:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   14bf8:	f360 0341 	bfi	r3, r0, #1, #1
   14bfc:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
   14c00:	9b05      	ldr	r3, [sp, #20]
   14c02:	e77a      	b.n	14afa <z_cbvprintf_impl+0xca>
	switch (*sp) {
   14c04:	2874      	cmp	r0, #116	; 0x74
   14c06:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   14c0a:	d040      	beq.n	14c8e <z_cbvprintf_impl+0x25e>
   14c0c:	287a      	cmp	r0, #122	; 0x7a
   14c0e:	d184      	bne.n	14b1a <z_cbvprintf_impl+0xea>
		conv->length_mod = LENGTH_Z;
   14c10:	4613      	mov	r3, r2
   14c12:	2206      	movs	r2, #6
   14c14:	e028      	b.n	14c68 <z_cbvprintf_impl+0x238>
		if (*++sp == 'h') {
   14c16:	785a      	ldrb	r2, [r3, #1]
   14c18:	2a68      	cmp	r2, #104	; 0x68
   14c1a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   14c1e:	d121      	bne.n	14c64 <z_cbvprintf_impl+0x234>
			conv->length_mod = LENGTH_HH;
   14c20:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   14c22:	f361 02c6 	bfi	r2, r1, #3, #4
   14c26:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
   14c2a:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   14c2c:	460b      	mov	r3, r1
   14c2e:	f813 2b01 	ldrb.w	r2, [r3], #1
   14c32:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
   14c34:	2a78      	cmp	r2, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   14c36:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
   14c3a:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
   14c3e:	f200 80c0 	bhi.w	14dc2 <z_cbvprintf_impl+0x392>
   14c42:	2a57      	cmp	r2, #87	; 0x57
   14c44:	d833      	bhi.n	14cae <z_cbvprintf_impl+0x27e>
   14c46:	2a41      	cmp	r2, #65	; 0x41
   14c48:	d003      	beq.n	14c52 <z_cbvprintf_impl+0x222>
   14c4a:	3a45      	subs	r2, #69	; 0x45
   14c4c:	2a02      	cmp	r2, #2
   14c4e:	f200 80b8 	bhi.w	14dc2 <z_cbvprintf_impl+0x392>
		conv->specifier_cat = SPECIFIER_FP;
   14c52:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   14c56:	2204      	movs	r2, #4
   14c58:	f362 0302 	bfi	r3, r2, #0, #3
   14c5c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
   14c60:	2301      	movs	r3, #1
			break;
   14c62:	e085      	b.n	14d70 <z_cbvprintf_impl+0x340>
			conv->length_mod = LENGTH_H;
   14c64:	4613      	mov	r3, r2
   14c66:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   14c68:	f362 03c6 	bfi	r3, r2, #3, #4
   14c6c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   14c70:	e7dc      	b.n	14c2c <z_cbvprintf_impl+0x1fc>
		if (*++sp == 'l') {
   14c72:	785a      	ldrb	r2, [r3, #1]
   14c74:	2a6c      	cmp	r2, #108	; 0x6c
   14c76:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   14c7a:	d101      	bne.n	14c80 <z_cbvprintf_impl+0x250>
			conv->length_mod = LENGTH_LL;
   14c7c:	2104      	movs	r1, #4
   14c7e:	e7d0      	b.n	14c22 <z_cbvprintf_impl+0x1f2>
			conv->length_mod = LENGTH_L;
   14c80:	4613      	mov	r3, r2
   14c82:	2203      	movs	r2, #3
   14c84:	e7f0      	b.n	14c68 <z_cbvprintf_impl+0x238>
		conv->length_mod = LENGTH_J;
   14c86:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   14c8a:	2205      	movs	r2, #5
   14c8c:	e7ec      	b.n	14c68 <z_cbvprintf_impl+0x238>
		conv->length_mod = LENGTH_T;
   14c8e:	4613      	mov	r3, r2
   14c90:	2207      	movs	r2, #7
   14c92:	e7e9      	b.n	14c68 <z_cbvprintf_impl+0x238>
		conv->unsupported = true;
   14c94:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   14c98:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   14c9c:	f023 0302 	bic.w	r3, r3, #2
   14ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   14ca4:	f043 0302 	orr.w	r3, r3, #2
   14ca8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
   14cac:	e7be      	b.n	14c2c <z_cbvprintf_impl+0x1fc>
	switch (conv->specifier) {
   14cae:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   14cb2:	2920      	cmp	r1, #32
   14cb4:	f200 8085 	bhi.w	14dc2 <z_cbvprintf_impl+0x392>
   14cb8:	a001      	add	r0, pc, #4	; (adr r0, 14cc0 <z_cbvprintf_impl+0x290>)
   14cba:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   14cbe:	bf00      	nop
   14cc0:	00014d85 	.word	0x00014d85
   14cc4:	00014dc3 	.word	0x00014dc3
   14cc8:	00014dc3 	.word	0x00014dc3
   14ccc:	00014dc3 	.word	0x00014dc3
   14cd0:	00014dc3 	.word	0x00014dc3
   14cd4:	00014dc3 	.word	0x00014dc3
   14cd8:	00014dc3 	.word	0x00014dc3
   14cdc:	00014dc3 	.word	0x00014dc3
   14ce0:	00014dc3 	.word	0x00014dc3
   14ce4:	00014c53 	.word	0x00014c53
   14ce8:	00014dc3 	.word	0x00014dc3
   14cec:	00014d85 	.word	0x00014d85
   14cf0:	00014d45 	.word	0x00014d45
   14cf4:	00014c53 	.word	0x00014c53
   14cf8:	00014c53 	.word	0x00014c53
   14cfc:	00014c53 	.word	0x00014c53
   14d00:	00014dc3 	.word	0x00014dc3
   14d04:	00014d45 	.word	0x00014d45
   14d08:	00014dc3 	.word	0x00014dc3
   14d0c:	00014dc3 	.word	0x00014dc3
   14d10:	00014dc3 	.word	0x00014dc3
   14d14:	00014dc3 	.word	0x00014dc3
   14d18:	00014d8d 	.word	0x00014d8d
   14d1c:	00014d85 	.word	0x00014d85
   14d20:	00014da9 	.word	0x00014da9
   14d24:	00014dc3 	.word	0x00014dc3
   14d28:	00014dc3 	.word	0x00014dc3
   14d2c:	00014da9 	.word	0x00014da9
   14d30:	00014dc3 	.word	0x00014dc3
   14d34:	00014d85 	.word	0x00014d85
   14d38:	00014dc3 	.word	0x00014dc3
   14d3c:	00014dc3 	.word	0x00014dc3
   14d40:	00014d85 	.word	0x00014d85
		conv->specifier_cat = SPECIFIER_SINT;
   14d44:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   14d48:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   14d4a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   14d4e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   14d52:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   14d54:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
   14d58:	bf02      	ittt	eq
   14d5a:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
   14d5e:	f041 0101 	orreq.w	r1, r1, #1
   14d62:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
   14d66:	2a63      	cmp	r2, #99	; 0x63
   14d68:	d131      	bne.n	14dce <z_cbvprintf_impl+0x39e>
			unsupported = (conv->length_mod != LENGTH_NONE);
   14d6a:	3b00      	subs	r3, #0
   14d6c:	bf18      	it	ne
   14d6e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   14d70:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   14d74:	f3c2 0140 	ubfx	r1, r2, #1, #1
   14d78:	430b      	orrs	r3, r1
   14d7a:	f363 0241 	bfi	r2, r3, #1, #1
   14d7e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
   14d82:	e6d7      	b.n	14b34 <z_cbvprintf_impl+0x104>
		conv->specifier_cat = SPECIFIER_UINT;
   14d84:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   14d88:	2002      	movs	r0, #2
   14d8a:	e7de      	b.n	14d4a <z_cbvprintf_impl+0x31a>
		conv->specifier_cat = SPECIFIER_PTR;
   14d8c:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   14d90:	f003 0378 	and.w	r3, r3, #120	; 0x78
   14d94:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   14d98:	2103      	movs	r1, #3
   14d9a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   14d9e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   14da0:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   14da4:	4143      	adcs	r3, r0
   14da6:	e7e3      	b.n	14d70 <z_cbvprintf_impl+0x340>
		conv->specifier_cat = SPECIFIER_PTR;
   14da8:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   14dac:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   14dae:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   14db2:	f361 0202 	bfi	r2, r1, #0, #3
   14db6:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   14dba:	bf14      	ite	ne
   14dbc:	2301      	movne	r3, #1
   14dbe:	2300      	moveq	r3, #0
   14dc0:	e7d6      	b.n	14d70 <z_cbvprintf_impl+0x340>
		conv->invalid = true;
   14dc2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   14dc6:	f043 0301 	orr.w	r3, r3, #1
   14dca:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
   14dce:	2300      	movs	r3, #0
   14dd0:	e7ce      	b.n	14d70 <z_cbvprintf_impl+0x340>
		} else if (conv->width_present) {
   14dd2:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
   14dd6:	2a00      	cmp	r2, #0
			width = conv->width_value;
   14dd8:	bfb4      	ite	lt
   14dda:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
   14dde:	f04f 38ff 	movge.w	r8, #4294967295
   14de2:	e6b9      	b.n	14b58 <z_cbvprintf_impl+0x128>
		} else if (conv->prec_present) {
   14de4:	079f      	lsls	r7, r3, #30
   14de6:	f57f aec5 	bpl.w	14b74 <z_cbvprintf_impl+0x144>
			precision = conv->prec_value;
   14dea:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
   14dec:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
   14df0:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   14df2:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
   14df6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
   14dfa:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   14dfe:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   14e00:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   14e04:	d136      	bne.n	14e74 <z_cbvprintf_impl+0x444>
			switch (length_mod) {
   14e06:	1ecb      	subs	r3, r1, #3
   14e08:	2b04      	cmp	r3, #4
   14e0a:	d823      	bhi.n	14e54 <z_cbvprintf_impl+0x424>
   14e0c:	e8df f003 	tbb	[pc, r3]
   14e10:	22090903 	.word	0x22090903
   14e14:	22          	.byte	0x22
   14e15:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   14e16:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   14e1a:	17da      	asrs	r2, r3, #31
   14e1c:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
   14e20:	e006      	b.n	14e30 <z_cbvprintf_impl+0x400>
					(sint_value_type)va_arg(ap, intmax_t);
   14e22:	3407      	adds	r4, #7
   14e24:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   14e28:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   14e2c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
   14e30:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   14e34:	f013 0603 	ands.w	r6, r3, #3
   14e38:	d05a      	beq.n	14ef0 <z_cbvprintf_impl+0x4c0>
			OUTS(sp, fp);
   14e3a:	9b02      	ldr	r3, [sp, #8]
   14e3c:	464a      	mov	r2, r9
   14e3e:	4659      	mov	r1, fp
   14e40:	4650      	mov	r0, sl
   14e42:	f014 fdee 	bl	29a22 <outs>
   14e46:	2800      	cmp	r0, #0
   14e48:	f2c0 8141 	blt.w	150ce <z_cbvprintf_impl+0x69e>
   14e4c:	4405      	add	r5, r0
			OUTS(bps, bpe);
   14e4e:	f8dd 9008 	ldr.w	r9, [sp, #8]
   14e52:	e5f5      	b.n	14a40 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   14e54:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   14e58:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   14e5a:	ea4f 72e3 	mov.w	r2, r3, asr #31
   14e5e:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   14e62:	d102      	bne.n	14e6a <z_cbvprintf_impl+0x43a>
				value->sint = (signed char)value->sint;
   14e64:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
   14e68:	e7d7      	b.n	14e1a <z_cbvprintf_impl+0x3ea>
			} else if (length_mod == LENGTH_H) {
   14e6a:	2902      	cmp	r1, #2
   14e6c:	d1e0      	bne.n	14e30 <z_cbvprintf_impl+0x400>
				value->sint = (short)value->sint;
   14e6e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   14e72:	e7d2      	b.n	14e1a <z_cbvprintf_impl+0x3ea>
		} else if (specifier_cat == SPECIFIER_UINT) {
   14e74:	2b02      	cmp	r3, #2
   14e76:	d129      	bne.n	14ecc <z_cbvprintf_impl+0x49c>
			switch (length_mod) {
   14e78:	1ecb      	subs	r3, r1, #3
   14e7a:	2b04      	cmp	r3, #4
   14e7c:	d813      	bhi.n	14ea6 <z_cbvprintf_impl+0x476>
   14e7e:	e8df f003 	tbb	[pc, r3]
   14e82:	0a03      	.short	0x0a03
   14e84:	120a      	.short	0x120a
   14e86:	12          	.byte	0x12
   14e87:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   14e88:	6822      	ldr	r2, [r4, #0]
   14e8a:	920c      	str	r2, [sp, #48]	; 0x30
   14e8c:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
   14e8e:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   14e90:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
   14e92:	4604      	mov	r4, r0
   14e94:	e7cc      	b.n	14e30 <z_cbvprintf_impl+0x400>
					(uint_value_type)va_arg(ap,
   14e96:	1de0      	adds	r0, r4, #7
   14e98:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
   14e9c:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   14ea0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
   14ea4:	e7f5      	b.n	14e92 <z_cbvprintf_impl+0x462>
					(uint_value_type)va_arg(ap, size_t);
   14ea6:	f854 3b04 	ldr.w	r3, [r4], #4
   14eaa:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   14eac:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   14eae:	f04f 0300 	mov.w	r3, #0
   14eb2:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
   14eb4:	d105      	bne.n	14ec2 <z_cbvprintf_impl+0x492>
				value->uint = (unsigned char)value->uint;
   14eb6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
   14eba:	930c      	str	r3, [sp, #48]	; 0x30
   14ebc:	2300      	movs	r3, #0
   14ebe:	930d      	str	r3, [sp, #52]	; 0x34
   14ec0:	e7b6      	b.n	14e30 <z_cbvprintf_impl+0x400>
			} else if (length_mod == LENGTH_H) {
   14ec2:	2902      	cmp	r1, #2
   14ec4:	d1b4      	bne.n	14e30 <z_cbvprintf_impl+0x400>
				value->uint = (unsigned short)value->uint;
   14ec6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   14eca:	e7f6      	b.n	14eba <z_cbvprintf_impl+0x48a>
		} else if (specifier_cat == SPECIFIER_FP) {
   14ecc:	2b04      	cmp	r3, #4
   14ece:	d109      	bne.n	14ee4 <z_cbvprintf_impl+0x4b4>
					(sint_value_type)va_arg(ap, long long);
   14ed0:	1de3      	adds	r3, r4, #7
   14ed2:	f023 0307 	bic.w	r3, r3, #7
   14ed6:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   14eda:	e9d3 2300 	ldrd	r2, r3, [r3]
   14ede:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   14ee2:	e7a5      	b.n	14e30 <z_cbvprintf_impl+0x400>
		} else if (specifier_cat == SPECIFIER_PTR) {
   14ee4:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   14ee6:	bf04      	itt	eq
   14ee8:	f854 3b04 	ldreq.w	r3, [r4], #4
   14eec:	930c      	streq	r3, [sp, #48]	; 0x30
   14eee:	e79f      	b.n	14e30 <z_cbvprintf_impl+0x400>
		switch (conv->specifier) {
   14ef0:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   14ef4:	2878      	cmp	r0, #120	; 0x78
   14ef6:	d8aa      	bhi.n	14e4e <z_cbvprintf_impl+0x41e>
   14ef8:	2862      	cmp	r0, #98	; 0x62
   14efa:	d820      	bhi.n	14f3e <z_cbvprintf_impl+0x50e>
   14efc:	2825      	cmp	r0, #37	; 0x25
   14efe:	f43f ada9 	beq.w	14a54 <z_cbvprintf_impl+0x24>
   14f02:	2858      	cmp	r0, #88	; 0x58
   14f04:	d1a3      	bne.n	14e4e <z_cbvprintf_impl+0x41e>
			bps = encode_uint(value->uint, conv, buf, bpe);
   14f06:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   14f0a:	9300      	str	r3, [sp, #0]
   14f0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   14f10:	ab06      	add	r3, sp, #24
   14f12:	aa0e      	add	r2, sp, #56	; 0x38
   14f14:	f7ff fd40 	bl	14998 <encode_uint>
   14f18:	4681      	mov	r9, r0
			if (precision >= 0) {
   14f1a:	2f00      	cmp	r7, #0
   14f1c:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   14f20:	db0b      	blt.n	14f3a <z_cbvprintf_impl+0x50a>
				conv->flag_zero = false;
   14f22:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
   14f26:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
   14f2a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   14f2e:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   14f30:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
   14f34:	d901      	bls.n	14f3a <z_cbvprintf_impl+0x50a>
					conv->pad0_value = precision - (int)len;
   14f36:	1afb      	subs	r3, r7, r3
   14f38:	930f      	str	r3, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
   14f3a:	4607      	mov	r7, r0
   14f3c:	e03d      	b.n	14fba <z_cbvprintf_impl+0x58a>
		switch (conv->specifier) {
   14f3e:	3863      	subs	r0, #99	; 0x63
   14f40:	2815      	cmp	r0, #21
   14f42:	d884      	bhi.n	14e4e <z_cbvprintf_impl+0x41e>
   14f44:	a201      	add	r2, pc, #4	; (adr r2, 14f4c <z_cbvprintf_impl+0x51c>)
   14f46:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   14f4a:	bf00      	nop
   14f4c:	00014fcb 	.word	0x00014fcb
   14f50:	0001502d 	.word	0x0001502d
   14f54:	00014e4f 	.word	0x00014e4f
   14f58:	00014e4f 	.word	0x00014e4f
   14f5c:	00014e4f 	.word	0x00014e4f
   14f60:	00014e4f 	.word	0x00014e4f
   14f64:	0001502d 	.word	0x0001502d
   14f68:	00014e4f 	.word	0x00014e4f
   14f6c:	00014e4f 	.word	0x00014e4f
   14f70:	00014e4f 	.word	0x00014e4f
   14f74:	00014e4f 	.word	0x00014e4f
   14f78:	00015087 	.word	0x00015087
   14f7c:	00015055 	.word	0x00015055
   14f80:	00015059 	.word	0x00015059
   14f84:	00014e4f 	.word	0x00014e4f
   14f88:	00014e4f 	.word	0x00014e4f
   14f8c:	00014fa5 	.word	0x00014fa5
   14f90:	00014e4f 	.word	0x00014e4f
   14f94:	00015055 	.word	0x00015055
   14f98:	00014e4f 	.word	0x00014e4f
   14f9c:	00014e4f 	.word	0x00014e4f
   14fa0:	00015055 	.word	0x00015055
			if (precision >= 0) {
   14fa4:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   14fa6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
   14faa:	db0a      	blt.n	14fc2 <z_cbvprintf_impl+0x592>
				len = strnlen(bps, precision);
   14fac:	4639      	mov	r1, r7
   14fae:	4648      	mov	r0, r9
   14fb0:	f018 fffe 	bl	2dfb0 <strnlen>
			bpe = bps + len;
   14fb4:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
   14fb8:	2600      	movs	r6, #0
		if (bps == NULL) {
   14fba:	f1b9 0f00 	cmp.w	r9, #0
   14fbe:	d10c      	bne.n	14fda <z_cbvprintf_impl+0x5aa>
   14fc0:	e745      	b.n	14e4e <z_cbvprintf_impl+0x41e>
				len = strlen(bps);
   14fc2:	4648      	mov	r0, r9
   14fc4:	f7f8 f98b 	bl	d2de <strlen>
   14fc8:	e7f4      	b.n	14fb4 <z_cbvprintf_impl+0x584>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   14fca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14fcc:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
   14fd0:	2600      	movs	r6, #0
			bpe = buf + 1;
   14fd2:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
   14fd6:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
   14fda:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
   14fde:	b106      	cbz	r6, 14fe2 <z_cbvprintf_impl+0x5b2>
			nj_len += 1U;
   14fe0:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   14fe2:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   14fe6:	06d0      	lsls	r0, r2, #27
   14fe8:	d566      	bpl.n	150b8 <z_cbvprintf_impl+0x688>
			nj_len += 2U;
   14fea:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   14fec:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   14fee:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
   14ff0:	bf48      	it	mi
   14ff2:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
   14ff4:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   14ff6:	bf48      	it	mi
   14ff8:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   14ffa:	f1b8 0f00 	cmp.w	r8, #0
   14ffe:	dd73      	ble.n	150e8 <z_cbvprintf_impl+0x6b8>
			if (!conv->flag_dash) {
   15000:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
   15004:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   15008:	f3c2 0380 	ubfx	r3, r2, #2, #1
   1500c:	9303      	str	r3, [sp, #12]
   1500e:	0753      	lsls	r3, r2, #29
   15010:	d46a      	bmi.n	150e8 <z_cbvprintf_impl+0x6b8>
				if (conv->flag_zero) {
   15012:	0650      	lsls	r0, r2, #25
   15014:	d55e      	bpl.n	150d4 <z_cbvprintf_impl+0x6a4>
					if (sign != 0) {
   15016:	b13e      	cbz	r6, 15028 <z_cbvprintf_impl+0x5f8>
						OUTC(sign);
   15018:	4659      	mov	r1, fp
   1501a:	4630      	mov	r0, r6
   1501c:	47d0      	blx	sl
   1501e:	2800      	cmp	r0, #0
   15020:	db55      	blt.n	150ce <z_cbvprintf_impl+0x69e>
						sign = 0;
   15022:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   15024:	3501      	adds	r5, #1
						sign = 0;
   15026:	461e      	mov	r6, r3
					pad = '0';
   15028:	2330      	movs	r3, #48	; 0x30
   1502a:	e054      	b.n	150d6 <z_cbvprintf_impl+0x6a6>
			if (conv->flag_plus) {
   1502c:	071e      	lsls	r6, r3, #28
   1502e:	d40f      	bmi.n	15050 <z_cbvprintf_impl+0x620>
				sign = ' ';
   15030:	f013 0610 	ands.w	r6, r3, #16
   15034:	bf18      	it	ne
   15036:	2620      	movne	r6, #32
			sint = value->sint;
   15038:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
   1503c:	2b00      	cmp	r3, #0
   1503e:	f6bf af62 	bge.w	14f06 <z_cbvprintf_impl+0x4d6>
				value->uint = (uint_value_type)-sint;
   15042:	4252      	negs	r2, r2
   15044:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   15048:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
   1504c:	262d      	movs	r6, #45	; 0x2d
   1504e:	e75a      	b.n	14f06 <z_cbvprintf_impl+0x4d6>
				sign = '+';
   15050:	262b      	movs	r6, #43	; 0x2b
   15052:	e7f1      	b.n	15038 <z_cbvprintf_impl+0x608>
		switch (conv->specifier) {
   15054:	2600      	movs	r6, #0
   15056:	e756      	b.n	14f06 <z_cbvprintf_impl+0x4d6>
			if (value->ptr != NULL) {
   15058:	980c      	ldr	r0, [sp, #48]	; 0x30
   1505a:	b340      	cbz	r0, 150ae <z_cbvprintf_impl+0x67e>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1505c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   15060:	9300      	str	r3, [sp, #0]
   15062:	aa0e      	add	r2, sp, #56	; 0x38
   15064:	ab06      	add	r3, sp, #24
   15066:	2100      	movs	r1, #0
   15068:	f7ff fc96 	bl	14998 <encode_uint>
				conv->altform_0c = true;
   1506c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
   15070:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   15074:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   15078:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1507c:	4681      	mov	r9, r0
				conv->altform_0c = true;
   1507e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
   15082:	2600      	movs	r6, #0
				goto prec_int_pad0;
   15084:	e749      	b.n	14f1a <z_cbvprintf_impl+0x4ea>
				store_count(conv, value->ptr, count);
   15086:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
   15088:	2907      	cmp	r1, #7
   1508a:	f63f aee0 	bhi.w	14e4e <z_cbvprintf_impl+0x41e>
   1508e:	e8df f001 	tbb	[pc, r1]
   15092:	040c      	.short	0x040c
   15094:	08080c06 	.word	0x08080c06
   15098:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   1509a:	701d      	strb	r5, [r3, #0]
		break;
   1509c:	e6d7      	b.n	14e4e <z_cbvprintf_impl+0x41e>
		*(short *)dp = (short)count;
   1509e:	801d      	strh	r5, [r3, #0]
		break;
   150a0:	e6d5      	b.n	14e4e <z_cbvprintf_impl+0x41e>
		*(intmax_t *)dp = (intmax_t)count;
   150a2:	17ea      	asrs	r2, r5, #31
   150a4:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   150a8:	e6d1      	b.n	14e4e <z_cbvprintf_impl+0x41e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   150aa:	601d      	str	r5, [r3, #0]
		break;
   150ac:	e6cf      	b.n	14e4e <z_cbvprintf_impl+0x41e>
			bpe = bps + 5;
   150ae:	4f2e      	ldr	r7, [pc, #184]	; (15168 <z_cbvprintf_impl+0x738>)
   150b0:	4606      	mov	r6, r0
			bps = "(nil)";
   150b2:	f1a7 0905 	sub.w	r9, r7, #5
   150b6:	e790      	b.n	14fda <z_cbvprintf_impl+0x5aa>
		} else if (conv->altform_0) {
   150b8:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   150ba:	bf48      	it	mi
   150bc:	3301      	addmi	r3, #1
   150be:	e795      	b.n	14fec <z_cbvprintf_impl+0x5bc>
					OUTC(pad);
   150c0:	4618      	mov	r0, r3
   150c2:	4659      	mov	r1, fp
   150c4:	9303      	str	r3, [sp, #12]
   150c6:	47d0      	blx	sl
   150c8:	2800      	cmp	r0, #0
   150ca:	9b03      	ldr	r3, [sp, #12]
   150cc:	da04      	bge.n	150d8 <z_cbvprintf_impl+0x6a8>
#undef OUTS
#undef OUTC
}
   150ce:	b013      	add	sp, #76	; 0x4c
   150d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   150d4:	2320      	movs	r3, #32
   150d6:	4445      	add	r5, r8
   150d8:	4642      	mov	r2, r8
				while (width-- > 0) {
   150da:	2a00      	cmp	r2, #0
   150dc:	eba5 0108 	sub.w	r1, r5, r8
   150e0:	f108 38ff 	add.w	r8, r8, #4294967295
   150e4:	dcec      	bgt.n	150c0 <z_cbvprintf_impl+0x690>
   150e6:	460d      	mov	r5, r1
		if (sign != 0) {
   150e8:	b12e      	cbz	r6, 150f6 <z_cbvprintf_impl+0x6c6>
			OUTC(sign);
   150ea:	4659      	mov	r1, fp
   150ec:	4630      	mov	r0, r6
   150ee:	47d0      	blx	sl
   150f0:	2800      	cmp	r0, #0
   150f2:	dbec      	blt.n	150ce <z_cbvprintf_impl+0x69e>
   150f4:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   150f6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   150fa:	06d9      	lsls	r1, r3, #27
   150fc:	d401      	bmi.n	15102 <z_cbvprintf_impl+0x6d2>
   150fe:	071a      	lsls	r2, r3, #28
   15100:	d505      	bpl.n	1510e <z_cbvprintf_impl+0x6de>
				OUTC('0');
   15102:	4659      	mov	r1, fp
   15104:	2030      	movs	r0, #48	; 0x30
   15106:	47d0      	blx	sl
   15108:	2800      	cmp	r0, #0
   1510a:	dbe0      	blt.n	150ce <z_cbvprintf_impl+0x69e>
   1510c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   1510e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   15112:	06db      	lsls	r3, r3, #27
   15114:	d506      	bpl.n	15124 <z_cbvprintf_impl+0x6f4>
				OUTC(conv->specifier);
   15116:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   1511a:	4659      	mov	r1, fp
   1511c:	47d0      	blx	sl
   1511e:	2800      	cmp	r0, #0
   15120:	dbd5      	blt.n	150ce <z_cbvprintf_impl+0x69e>
   15122:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   15124:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   15126:	442e      	add	r6, r5
   15128:	1b73      	subs	r3, r6, r5
   1512a:	2b00      	cmp	r3, #0
   1512c:	dc15      	bgt.n	1515a <z_cbvprintf_impl+0x72a>
			OUTS(bps, bpe);
   1512e:	463b      	mov	r3, r7
   15130:	464a      	mov	r2, r9
   15132:	4659      	mov	r1, fp
   15134:	4650      	mov	r0, sl
   15136:	f014 fc74 	bl	29a22 <outs>
   1513a:	2800      	cmp	r0, #0
   1513c:	dbc7      	blt.n	150ce <z_cbvprintf_impl+0x69e>
   1513e:	4405      	add	r5, r0
		while (width > 0) {
   15140:	44a8      	add	r8, r5
   15142:	eba8 0305 	sub.w	r3, r8, r5
   15146:	2b00      	cmp	r3, #0
   15148:	f77f ae81 	ble.w	14e4e <z_cbvprintf_impl+0x41e>
			OUTC(' ');
   1514c:	4659      	mov	r1, fp
   1514e:	2020      	movs	r0, #32
   15150:	47d0      	blx	sl
   15152:	2800      	cmp	r0, #0
   15154:	dbbb      	blt.n	150ce <z_cbvprintf_impl+0x69e>
   15156:	3501      	adds	r5, #1
			--width;
   15158:	e7f3      	b.n	15142 <z_cbvprintf_impl+0x712>
				OUTC('0');
   1515a:	4659      	mov	r1, fp
   1515c:	2030      	movs	r0, #48	; 0x30
   1515e:	47d0      	blx	sl
   15160:	2800      	cmp	r0, #0
   15162:	dbb4      	blt.n	150ce <z_cbvprintf_impl+0x69e>
   15164:	3501      	adds	r5, #1
   15166:	e7df      	b.n	15128 <z_cbvprintf_impl+0x6f8>
   15168:	0002f77a 	.word	0x0002f77a

0001516c <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   1516c:	b508      	push	{r3, lr}
   1516e:	f04f 0240 	mov.w	r2, #64	; 0x40
   15172:	f3ef 8311 	mrs	r3, BASEPRI
   15176:	f382 8812 	msr	BASEPRI_MAX, r2
   1517a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   1517e:	f001 ff97 	bl	170b0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   15182:	4803      	ldr	r0, [pc, #12]	; (15190 <sys_reboot+0x24>)
   15184:	f014 f9b8 	bl	294f8 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   15188:	f001 f95e 	bl	16448 <arch_cpu_idle>
   1518c:	e7fc      	b.n	15188 <sys_reboot+0x1c>
   1518e:	bf00      	nop
   15190:	0002f77b 	.word	0x0002f77b

00015194 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   15194:	f00c bf02 	b.w	21f9c <SystemInit>

00015198 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
   15198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1519c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 151f8 <activate_foreach_backend+0x60>
{
   151a0:	4604      	mov	r4, r0
	while (mask_cpy) {
   151a2:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
   151a4:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
   151a8:	b914      	cbnz	r4, 151b0 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
   151aa:	4638      	mov	r0, r7
   151ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   151b0:	fa94 f5a4 	rbit	r5, r4
   151b4:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   151b8:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   151bc:	012e      	lsls	r6, r5, #4
   151be:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   151c2:	ea6f 0a03 	mvn.w	sl, r3
   151c6:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   151ca:	7b2b      	ldrb	r3, [r5, #12]
   151cc:	2b00      	cmp	r3, #0
   151ce:	d0eb      	beq.n	151a8 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   151d0:	f858 3006 	ldr.w	r3, [r8, r6]
   151d4:	691b      	ldr	r3, [r3, #16]
   151d6:	b94b      	cbnz	r3, 151ec <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   151d8:	4446      	add	r6, r8
			log_backend_enable(backend,
   151da:	2204      	movs	r2, #4
   151dc:	6873      	ldr	r3, [r6, #4]
   151de:	4628      	mov	r0, r5
   151e0:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   151e2:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   151e6:	f000 fa43 	bl	15670 <log_backend_enable>
   151ea:	e7dd      	b.n	151a8 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   151ec:	4628      	mov	r0, r5
   151ee:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   151f0:	2800      	cmp	r0, #0
   151f2:	d1d9      	bne.n	151a8 <activate_foreach_backend+0x10>
   151f4:	e7f0      	b.n	151d8 <activate_foreach_backend+0x40>
   151f6:	bf00      	nop
   151f8:	0002e69c 	.word	0x0002e69c

000151fc <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   151fc:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   151fe:	4910      	ldr	r1, [pc, #64]	; (15240 <enable_logger+0x44>)
   15200:	4810      	ldr	r0, [pc, #64]	; (15244 <enable_logger+0x48>)
{
   15202:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   15204:	2200      	movs	r2, #0
   15206:	f018 fc5c 	bl	2dac2 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1520a:	4d0f      	ldr	r5, [pc, #60]	; (15248 <enable_logger+0x4c>)
   1520c:	490f      	ldr	r1, [pc, #60]	; (1524c <enable_logger+0x50>)
   1520e:	2200      	movs	r2, #0
   15210:	2300      	movs	r3, #0
   15212:	e9cd 2306 	strd	r2, r3, [sp, #24]
   15216:	2400      	movs	r4, #0
   15218:	230e      	movs	r3, #14
   1521a:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1521e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   15222:	4b0b      	ldr	r3, [pc, #44]	; (15250 <enable_logger+0x54>)
   15224:	9400      	str	r4, [sp, #0]
   15226:	f44f 7240 	mov.w	r2, #768	; 0x300
   1522a:	4628      	mov	r0, r5
   1522c:	f00d ffd6 	bl	231dc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   15230:	4908      	ldr	r1, [pc, #32]	; (15254 <enable_logger+0x58>)
   15232:	4628      	mov	r0, r5
   15234:	f018 f8c3 	bl	2d3be <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   15238:	4620      	mov	r0, r4
   1523a:	b009      	add	sp, #36	; 0x24
   1523c:	bd30      	pop	{r4, r5, pc}
   1523e:	bf00      	nop
   15240:	00015259 	.word	0x00015259
   15244:	20001df8 	.word	0x20001df8
   15248:	20001e30 	.word	0x20001e30
   1524c:	20007848 	.word	0x20007848
   15250:	00015509 	.word	0x00015509
   15254:	0002f7a4 	.word	0x0002f7a4

00015258 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   15258:	4801      	ldr	r0, [pc, #4]	; (15260 <log_process_thread_timer_expiry_fn+0x8>)
   1525a:	f00e b94b 	b.w	234f4 <z_impl_k_sem_give>
   1525e:	bf00      	nop
   15260:	20000ba0 	.word	0x20000ba0

00015264 <z_log_init>:
{
   15264:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   15268:	4b25      	ldr	r3, [pc, #148]	; (15300 <z_log_init+0x9c>)
   1526a:	f3bf 8f5b 	dmb	ish
   1526e:	4681      	mov	r9, r0
   15270:	4688      	mov	r8, r1
   15272:	e853 4f00 	ldrex	r4, [r3]
   15276:	1c62      	adds	r2, r4, #1
   15278:	e843 2100 	strex	r1, r2, [r3]
   1527c:	2900      	cmp	r1, #0
   1527e:	d1f8      	bne.n	15272 <z_log_init+0xe>
   15280:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   15284:	b11c      	cbz	r4, 1528e <z_log_init+0x2a>
		return 0;
   15286:	2400      	movs	r4, #0
}
   15288:	4620      	mov	r0, r4
   1528a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   1528e:	4d1d      	ldr	r5, [pc, #116]	; (15304 <z_log_init+0xa0>)
   15290:	4e1d      	ldr	r6, [pc, #116]	; (15308 <z_log_init+0xa4>)
   15292:	1b76      	subs	r6, r6, r5
   15294:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   15296:	4627      	mov	r7, r4
				mask |= BIT(i);
   15298:	f04f 0a01 	mov.w	sl, #1
	for (i = 0; i < log_backend_count_get(); i++) {
   1529c:	42b7      	cmp	r7, r6
   1529e:	db11      	blt.n	152c4 <z_log_init+0x60>
	if (blocking) {
   152a0:	f1b9 0f00 	cmp.w	r9, #0
   152a4:	d0f0      	beq.n	15288 <z_log_init+0x24>
		while (mask) {
   152a6:	2c00      	cmp	r4, #0
   152a8:	d0ed      	beq.n	15286 <z_log_init+0x22>
			mask = activate_foreach_backend(mask);
   152aa:	4620      	mov	r0, r4
   152ac:	f7ff ff74 	bl	15198 <activate_foreach_backend>
   152b0:	4604      	mov	r4, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   152b2:	f1b8 0f00 	cmp.w	r8, #0
   152b6:	d0f6      	beq.n	152a6 <z_log_init+0x42>
	return z_impl_k_sleep(timeout);
   152b8:	2100      	movs	r1, #0
   152ba:	f44f 70a4 	mov.w	r0, #328	; 0x148
   152be:	f00e fe21 	bl	23f04 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   152c2:	e7f0      	b.n	152a6 <z_log_init+0x42>
		if (backend->autostart) {
   152c4:	7b2b      	ldrb	r3, [r5, #12]
   152c6:	b17b      	cbz	r3, 152e8 <z_log_init+0x84>
	if (backend->api->init) {
   152c8:	f8d5 b000 	ldr.w	fp, [r5]
   152cc:	f8db 300c 	ldr.w	r3, [fp, #12]
   152d0:	b10b      	cbz	r3, 152d6 <z_log_init+0x72>
		backend->api->init(backend);
   152d2:	4628      	mov	r0, r5
   152d4:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   152d6:	f8db 3010 	ldr.w	r3, [fp, #16]
   152da:	b943      	cbnz	r3, 152ee <z_log_init+0x8a>
				log_backend_enable(backend,
   152dc:	686b      	ldr	r3, [r5, #4]
   152de:	2204      	movs	r2, #4
   152e0:	6819      	ldr	r1, [r3, #0]
   152e2:	4628      	mov	r0, r5
   152e4:	f000 f9c4 	bl	15670 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   152e8:	3701      	adds	r7, #1
   152ea:	3510      	adds	r5, #16
   152ec:	e7d6      	b.n	1529c <z_log_init+0x38>
		return backend->api->is_ready(backend);
   152ee:	4628      	mov	r0, r5
   152f0:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   152f2:	2800      	cmp	r0, #0
   152f4:	d0f2      	beq.n	152dc <z_log_init+0x78>
				mask |= BIT(i);
   152f6:	fa0a f307 	lsl.w	r3, sl, r7
   152fa:	431c      	orrs	r4, r3
   152fc:	e7f4      	b.n	152e8 <z_log_init+0x84>
   152fe:	bf00      	nop
   15300:	2000556c 	.word	0x2000556c
   15304:	0002e69c 	.word	0x0002e69c
   15308:	0002e6bc 	.word	0x0002e6bc

0001530c <log_format_func_t_get>:
}
   1530c:	4b01      	ldr	r3, [pc, #4]	; (15314 <log_format_func_t_get+0x8>)
   1530e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   15312:	4770      	bx	lr
   15314:	0002eaf4 	.word	0x0002eaf4

00015318 <z_log_notify_backend_enabled>:
{
   15318:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   1531a:	4c04      	ldr	r4, [pc, #16]	; (1532c <z_log_notify_backend_enabled+0x14>)
   1531c:	7823      	ldrb	r3, [r4, #0]
   1531e:	b913      	cbnz	r3, 15326 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
   15320:	4803      	ldr	r0, [pc, #12]	; (15330 <z_log_notify_backend_enabled+0x18>)
   15322:	f00e f8e7 	bl	234f4 <z_impl_k_sem_give>
	backend_attached = true;
   15326:	2301      	movs	r3, #1
   15328:	7023      	strb	r3, [r4, #0]
}
   1532a:	bd10      	pop	{r4, pc}
   1532c:	20006b35 	.word	0x20006b35
   15330:	20000ba0 	.word	0x20000ba0

00015334 <z_log_dropped>:
   15334:	4b0c      	ldr	r3, [pc, #48]	; (15368 <z_log_dropped+0x34>)
   15336:	f3bf 8f5b 	dmb	ish
   1533a:	e853 2f00 	ldrex	r2, [r3]
   1533e:	3201      	adds	r2, #1
   15340:	e843 2100 	strex	r1, r2, [r3]
   15344:	2900      	cmp	r1, #0
   15346:	d1f8      	bne.n	1533a <z_log_dropped+0x6>
   15348:	f3bf 8f5b 	dmb	ish
	if (buffered) {
   1534c:	b158      	cbz	r0, 15366 <z_log_dropped+0x32>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1534e:	f3bf 8f5b 	dmb	ish
   15352:	4b06      	ldr	r3, [pc, #24]	; (1536c <z_log_dropped+0x38>)
   15354:	e853 2f00 	ldrex	r2, [r3]
   15358:	3a01      	subs	r2, #1
   1535a:	e843 2100 	strex	r1, r2, [r3]
   1535e:	2900      	cmp	r1, #0
   15360:	d1f8      	bne.n	15354 <z_log_dropped+0x20>
   15362:	f3bf 8f5b 	dmb	ish
}
   15366:	4770      	bx	lr
   15368:	20005568 	.word	0x20005568
   1536c:	20005564 	.word	0x20005564

00015370 <z_log_dropped_read_and_clear>:
}
   15370:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15372:	4b06      	ldr	r3, [pc, #24]	; (1538c <z_log_dropped_read_and_clear+0x1c>)
   15374:	f3bf 8f5b 	dmb	ish
   15378:	4602      	mov	r2, r0
   1537a:	e853 0f00 	ldrex	r0, [r3]
   1537e:	e843 2100 	strex	r1, r2, [r3]
   15382:	2900      	cmp	r1, #0
   15384:	d1f9      	bne.n	1537a <z_log_dropped_read_and_clear+0xa>
   15386:	f3bf 8f5b 	dmb	ish
   1538a:	4770      	bx	lr
   1538c:	20005568 	.word	0x20005568

00015390 <dropped_notify>:
{
   15390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   15392:	f7ff ffed 	bl	15370 <z_log_dropped_read_and_clear>
	return __log_backends_end - __log_backends_start;
   15396:	4c0a      	ldr	r4, [pc, #40]	; (153c0 <dropped_notify+0x30>)
   15398:	4d0a      	ldr	r5, [pc, #40]	; (153c4 <dropped_notify+0x34>)
   1539a:	1b2d      	subs	r5, r5, r4
   1539c:	4607      	mov	r7, r0
   1539e:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   153a0:	2600      	movs	r6, #0
   153a2:	42ae      	cmp	r6, r5
   153a4:	db00      	blt.n	153a8 <dropped_notify+0x18>
}
   153a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   153a8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   153aa:	795b      	ldrb	r3, [r3, #5]
   153ac:	b12b      	cbz	r3, 153ba <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
   153ae:	6823      	ldr	r3, [r4, #0]
   153b0:	685b      	ldr	r3, [r3, #4]
   153b2:	b113      	cbz	r3, 153ba <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
   153b4:	4639      	mov	r1, r7
   153b6:	4620      	mov	r0, r4
   153b8:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   153ba:	3601      	adds	r6, #1
   153bc:	3410      	adds	r4, #16
   153be:	e7f0      	b.n	153a2 <dropped_notify+0x12>
   153c0:	0002e69c 	.word	0x0002e69c
   153c4:	0002e6bc 	.word	0x0002e6bc

000153c8 <z_log_msg_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   153c8:	4901      	ldr	r1, [pc, #4]	; (153d0 <z_log_msg_init+0x8>)
   153ca:	4802      	ldr	r0, [pc, #8]	; (153d4 <z_log_msg_init+0xc>)
   153cc:	f014 bc01 	b.w	29bd2 <mpsc_pbuf_init>
   153d0:	0002eb00 	.word	0x0002eb00
   153d4:	20005570 	.word	0x20005570

000153d8 <log_core_init>:
	panic_mode = false;
   153d8:	4a08      	ldr	r2, [pc, #32]	; (153fc <log_core_init+0x24>)
{
   153da:	b508      	push	{r3, lr}
	panic_mode = false;
   153dc:	2300      	movs	r3, #0
   153de:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   153e0:	4a07      	ldr	r2, [pc, #28]	; (15400 <log_core_init+0x28>)
   153e2:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
   153e4:	4b07      	ldr	r3, [pc, #28]	; (15404 <log_core_init+0x2c>)
   153e6:	4a08      	ldr	r2, [pc, #32]	; (15408 <log_core_init+0x30>)
   153e8:	601a      	str	r2, [r3, #0]
		log_output_timestamp_freq_set(freq);
   153ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   153ee:	f000 fbc5 	bl	15b7c <log_output_timestamp_freq_set>
}
   153f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   153f6:	f7ff bfe7 	b.w	153c8 <z_log_msg_init>
   153fa:	bf00      	nop
   153fc:	20006b36 	.word	0x20006b36
   15400:	20005568 	.word	0x20005568
   15404:	20000628 	.word	0x20000628
   15408:	00029e85 	.word	0x00029e85

0001540c <z_log_msg_alloc>:
{
   1540c:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(&log_buffer, wlen,
   1540e:	2200      	movs	r2, #0
   15410:	4801      	ldr	r0, [pc, #4]	; (15418 <z_log_msg_alloc+0xc>)
   15412:	2300      	movs	r3, #0
   15414:	f014 bbfe 	b.w	29c14 <mpsc_pbuf_alloc>
   15418:	20005570 	.word	0x20005570

0001541c <z_log_msg_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   1541c:	4801      	ldr	r0, [pc, #4]	; (15424 <z_log_msg_claim+0x8>)
   1541e:	f014 bc92 	b.w	29d46 <mpsc_pbuf_claim>
   15422:	bf00      	nop
   15424:	20005570 	.word	0x20005570

00015428 <z_log_msg_free>:
{
   15428:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
   1542a:	4801      	ldr	r0, [pc, #4]	; (15430 <z_log_msg_free+0x8>)
   1542c:	f014 bcd7 	b.w	29dde <mpsc_pbuf_free>
   15430:	20005570 	.word	0x20005570

00015434 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
   15434:	4801      	ldr	r0, [pc, #4]	; (1543c <z_log_msg_pending+0x8>)
   15436:	f014 bd06 	b.w	29e46 <mpsc_pbuf_is_pending>
   1543a:	bf00      	nop
   1543c:	20005570 	.word	0x20005570

00015440 <z_impl_log_process>:
{
   15440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!backend_attached) {
   15442:	4b19      	ldr	r3, [pc, #100]	; (154a8 <z_impl_log_process+0x68>)
   15444:	7818      	ldrb	r0, [r3, #0]
   15446:	b370      	cbz	r0, 154a6 <z_impl_log_process+0x66>
	msg = z_log_msg_claim();
   15448:	f7ff ffe8 	bl	1541c <z_log_msg_claim>
	if (msg) {
   1544c:	4605      	mov	r5, r0
   1544e:	b1a8      	cbz	r0, 1547c <z_impl_log_process+0x3c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   15450:	f3bf 8f5b 	dmb	ish
   15454:	4b15      	ldr	r3, [pc, #84]	; (154ac <z_impl_log_process+0x6c>)
   15456:	e853 2f00 	ldrex	r2, [r3]
   1545a:	3a01      	subs	r2, #1
   1545c:	e843 2100 	strex	r1, r2, [r3]
   15460:	2900      	cmp	r1, #0
   15462:	d1f8      	bne.n	15456 <z_impl_log_process+0x16>
   15464:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
   15468:	4c11      	ldr	r4, [pc, #68]	; (154b0 <z_impl_log_process+0x70>)
   1546a:	4e12      	ldr	r6, [pc, #72]	; (154b4 <z_impl_log_process+0x74>)
   1546c:	1b36      	subs	r6, r6, r4
   1546e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   15470:	2700      	movs	r7, #0
   15472:	42b7      	cmp	r7, r6
   15474:	db0c      	blt.n	15490 <z_impl_log_process+0x50>
		z_log_msg_free(msg);
   15476:	4628      	mov	r0, r5
   15478:	f7ff ffd6 	bl	15428 <z_log_msg_free>
	return dropped_cnt > 0;
   1547c:	4b0e      	ldr	r3, [pc, #56]	; (154b8 <z_impl_log_process+0x78>)
	if (z_log_dropped_pending()) {
   1547e:	681b      	ldr	r3, [r3, #0]
   15480:	2b00      	cmp	r3, #0
   15482:	dd01      	ble.n	15488 <z_impl_log_process+0x48>
		dropped_notify();
   15484:	f7ff ff84 	bl	15390 <dropped_notify>
}
   15488:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return z_log_msg_pending();
   1548c:	f7ff bfd2 	b.w	15434 <z_log_msg_pending>
	return backend->cb->active;
   15490:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   15492:	795b      	ldrb	r3, [r3, #5]
   15494:	b123      	cbz	r3, 154a0 <z_impl_log_process+0x60>
	backend->api->process(backend, msg);
   15496:	6823      	ldr	r3, [r4, #0]
   15498:	4629      	mov	r1, r5
   1549a:	681b      	ldr	r3, [r3, #0]
   1549c:	4620      	mov	r0, r4
   1549e:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   154a0:	3701      	adds	r7, #1
   154a2:	3410      	adds	r4, #16
   154a4:	e7e5      	b.n	15472 <z_impl_log_process+0x32>
}
   154a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   154a8:	20006b35 	.word	0x20006b35
   154ac:	20005564 	.word	0x20005564
   154b0:	0002e69c 	.word	0x0002e69c
   154b4:	0002e6bc 	.word	0x0002e6bc
   154b8:	20005568 	.word	0x20005568

000154bc <z_impl_log_panic>:
{
   154bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   154be:	4f0f      	ldr	r7, [pc, #60]	; (154fc <z_impl_log_panic+0x40>)
   154c0:	783d      	ldrb	r5, [r7, #0]
   154c2:	b97d      	cbnz	r5, 154e4 <z_impl_log_panic+0x28>
	return __log_backends_end - __log_backends_start;
   154c4:	4c0e      	ldr	r4, [pc, #56]	; (15500 <z_impl_log_panic+0x44>)
   154c6:	4e0f      	ldr	r6, [pc, #60]	; (15504 <z_impl_log_panic+0x48>)
	(void)z_log_init(true, false);
   154c8:	4629      	mov	r1, r5
   154ca:	2001      	movs	r0, #1
   154cc:	f7ff feca 	bl	15264 <z_log_init>
   154d0:	1b36      	subs	r6, r6, r4
   154d2:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   154d4:	42b5      	cmp	r5, r6
   154d6:	db06      	blt.n	154e6 <z_impl_log_panic+0x2a>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   154d8:	f7ff ffb2 	bl	15440 <z_impl_log_process>
		while (log_process() == true) {
   154dc:	2800      	cmp	r0, #0
   154de:	d1fb      	bne.n	154d8 <z_impl_log_panic+0x1c>
	panic_mode = true;
   154e0:	2301      	movs	r3, #1
   154e2:	703b      	strb	r3, [r7, #0]
}
   154e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   154e6:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   154e8:	795b      	ldrb	r3, [r3, #5]
   154ea:	b11b      	cbz	r3, 154f4 <z_impl_log_panic+0x38>
	backend->api->panic(backend);
   154ec:	6823      	ldr	r3, [r4, #0]
   154ee:	4620      	mov	r0, r4
   154f0:	689b      	ldr	r3, [r3, #8]
   154f2:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   154f4:	3501      	adds	r5, #1
   154f6:	3410      	adds	r4, #16
   154f8:	e7ec      	b.n	154d4 <z_impl_log_panic+0x18>
   154fa:	bf00      	nop
   154fc:	20006b36 	.word	0x20006b36
   15500:	0002e69c 	.word	0x0002e69c
   15504:	0002e6bc 	.word	0x0002e6bc

00015508 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
   15508:	2100      	movs	r1, #0
{
   1550a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t activate_mask = z_log_init(false, false);
   1550e:	4608      	mov	r0, r1
   15510:	f7ff fea8 	bl	15264 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   15514:	4604      	mov	r4, r0
   15516:	b380      	cbz	r0, 1557a <log_process_thread_func+0x72>
   15518:	f240 6867 	movw	r8, #1639	; 0x667
   1551c:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   15520:	f00e fd24 	bl	23f6c <z_impl_z_current_get>
	proc_tid = process_tid;
   15524:	4b1d      	ldr	r3, [pc, #116]	; (1559c <log_process_thread_func+0x94>)
   15526:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   15528:	b130      	cbz	r0, 15538 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   1552a:	4b1d      	ldr	r3, [pc, #116]	; (155a0 <log_process_thread_func+0x98>)
	    process_tid &&
   1552c:	681b      	ldr	r3, [r3, #0]
   1552e:	2b09      	cmp	r3, #9
   15530:	dd02      	ble.n	15538 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
   15532:	481c      	ldr	r0, [pc, #112]	; (155a4 <log_process_thread_func+0x9c>)
   15534:	f00d ffde 	bl	234f4 <z_impl_k_sem_give>
	return __log_backends_end - __log_backends_start;
   15538:	4e1b      	ldr	r6, [pc, #108]	; (155a8 <log_process_thread_func+0xa0>)
   1553a:	4b1c      	ldr	r3, [pc, #112]	; (155ac <log_process_thread_func+0xa4>)
	return z_impl_k_sem_take(sem, timeout);
   1553c:	f8df b064 	ldr.w	fp, [pc, #100]	; 155a4 <log_process_thread_func+0x9c>
   15540:	1af6      	subs	r6, r6, r3
   15542:	1136      	asrs	r6, r6, #4
   15544:	2700      	movs	r7, #0
		if (activate_mask) {
   15546:	b144      	cbz	r4, 1555a <log_process_thread_func+0x52>
			activate_mask = activate_foreach_backend(activate_mask);
   15548:	4620      	mov	r0, r4
   1554a:	f7ff fe25 	bl	15198 <activate_foreach_backend>
			if (!activate_mask) {
   1554e:	4604      	mov	r4, r0
   15550:	b918      	cbnz	r0, 1555a <log_process_thread_func+0x52>
				timeout = K_FOREVER;
   15552:	f04f 38ff 	mov.w	r8, #4294967295
   15556:	f04f 39ff 	mov.w	r9, #4294967295
   1555a:	f7ff ff71 	bl	15440 <z_impl_log_process>
		if (log_process() == false) {
   1555e:	4605      	mov	r5, r0
   15560:	b948      	cbnz	r0, 15576 <log_process_thread_func+0x6e>
			if (processed_any) {
   15562:	b11f      	cbz	r7, 1556c <log_process_thread_func+0x64>
   15564:	4f11      	ldr	r7, [pc, #68]	; (155ac <log_process_thread_func+0xa4>)
	for (int i = 0; i < log_backend_count_get(); i++) {
   15566:	4682      	mov	sl, r0
   15568:	45b2      	cmp	sl, r6
   1556a:	db0b      	blt.n	15584 <log_process_thread_func+0x7c>
   1556c:	4642      	mov	r2, r8
   1556e:	464b      	mov	r3, r9
   15570:	4658      	mov	r0, fp
   15572:	f00d ffe5 	bl	23540 <z_impl_k_sem_take>
   15576:	462f      	mov	r7, r5
   15578:	e7e5      	b.n	15546 <log_process_thread_func+0x3e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   1557a:	f04f 38ff 	mov.w	r8, #4294967295
   1557e:	f04f 39ff 	mov.w	r9, #4294967295
   15582:	e7cd      	b.n	15520 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   15584:	683b      	ldr	r3, [r7, #0]
   15586:	699b      	ldr	r3, [r3, #24]
   15588:	b11b      	cbz	r3, 15592 <log_process_thread_func+0x8a>
		backend->api->notify(backend, event, arg);
   1558a:	2200      	movs	r2, #0
   1558c:	4611      	mov	r1, r2
   1558e:	4638      	mov	r0, r7
   15590:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   15592:	f10a 0a01 	add.w	sl, sl, #1
   15596:	3710      	adds	r7, #16
   15598:	e7e6      	b.n	15568 <log_process_thread_func+0x60>
   1559a:	bf00      	nop
   1559c:	200055b0 	.word	0x200055b0
   155a0:	20005564 	.word	0x20005564
   155a4:	20000ba0 	.word	0x20000ba0
   155a8:	0002e6bc 	.word	0x0002e6bc
   155ac:	0002e69c 	.word	0x0002e69c

000155b0 <z_log_msg_commit>:
	msg->hdr.timestamp = timestamp_func();
   155b0:	4b21      	ldr	r3, [pc, #132]	; (15638 <z_log_msg_commit+0x88>)
{
   155b2:	b513      	push	{r0, r1, r4, lr}
	msg->hdr.timestamp = timestamp_func();
   155b4:	681b      	ldr	r3, [r3, #0]
{
   155b6:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   155b8:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, &m->buf);
   155ba:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   155bc:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, &m->buf);
   155be:	481f      	ldr	r0, [pc, #124]	; (1563c <z_log_msg_commit+0x8c>)
   155c0:	f014 fba1 	bl	29d06 <mpsc_pbuf_commit>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   155c4:	f3bf 8f5b 	dmb	ish
   155c8:	4b1d      	ldr	r3, [pc, #116]	; (15640 <z_log_msg_commit+0x90>)
   155ca:	e853 2f00 	ldrex	r2, [r3]
   155ce:	1c51      	adds	r1, r2, #1
   155d0:	e843 1000 	strex	r0, r1, [r3]
   155d4:	2800      	cmp	r0, #0
   155d6:	d1f8      	bne.n	155ca <z_log_msg_commit+0x1a>
   155d8:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   155dc:	4b19      	ldr	r3, [pc, #100]	; (15644 <z_log_msg_commit+0x94>)
   155de:	781b      	ldrb	r3, [r3, #0]
   155e0:	b17b      	cbz	r3, 15602 <z_log_msg_commit+0x52>
   155e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   155e6:	f3ef 8411 	mrs	r4, BASEPRI
   155ea:	f383 8812 	msr	BASEPRI_MAX, r3
   155ee:	f3bf 8f6f 	isb	sy
   155f2:	f7ff ff25 	bl	15440 <z_impl_log_process>
	__asm__ volatile(
   155f6:	f384 8811 	msr	BASEPRI, r4
   155fa:	f3bf 8f6f 	isb	sy
}
   155fe:	b002      	add	sp, #8
   15600:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   15602:	4b11      	ldr	r3, [pc, #68]	; (15648 <z_log_msg_commit+0x98>)
   15604:	681b      	ldr	r3, [r3, #0]
   15606:	2b00      	cmp	r3, #0
   15608:	d0f9      	beq.n	155fe <z_log_msg_commit+0x4e>
		if (cnt == 0) {
   1560a:	b952      	cbnz	r2, 15622 <z_log_msg_commit+0x72>
	z_impl_k_timer_start(timer, duration, period);
   1560c:	2200      	movs	r2, #0
   1560e:	2300      	movs	r3, #0
   15610:	e9cd 2300 	strd	r2, r3, [sp]
   15614:	480d      	ldr	r0, [pc, #52]	; (1564c <z_log_msg_commit+0x9c>)
   15616:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1561a:	2300      	movs	r3, #0
   1561c:	f00e fedc 	bl	243d8 <z_impl_k_timer_start>
   15620:	e7ed      	b.n	155fe <z_log_msg_commit+0x4e>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   15622:	2a0a      	cmp	r2, #10
   15624:	d1eb      	bne.n	155fe <z_log_msg_commit+0x4e>
	z_impl_k_timer_stop(timer);
   15626:	4809      	ldr	r0, [pc, #36]	; (1564c <z_log_msg_commit+0x9c>)
   15628:	f018 fa57 	bl	2dada <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   1562c:	4808      	ldr	r0, [pc, #32]	; (15650 <z_log_msg_commit+0xa0>)
}
   1562e:	b002      	add	sp, #8
   15630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15634:	f00d bf5e 	b.w	234f4 <z_impl_k_sem_give>
   15638:	20000628 	.word	0x20000628
   1563c:	20005570 	.word	0x20005570
   15640:	20005564 	.word	0x20005564
   15644:	20006b36 	.word	0x20006b36
   15648:	200055b0 	.word	0x200055b0
   1564c:	20001df8 	.word	0x20001df8
   15650:	20000ba0 	.word	0x20000ba0

00015654 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   15654:	4a04      	ldr	r2, [pc, #16]	; (15668 <log_source_name_get+0x14>)
   15656:	4b05      	ldr	r3, [pc, #20]	; (1566c <log_source_name_get+0x18>)
   15658:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   1565a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   1565e:	bf34      	ite	cc
   15660:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   15664:	2000      	movcs	r0, #0
}
   15666:	4770      	bx	lr
   15668:	0002e574 	.word	0x0002e574
   1566c:	0002e69c 	.word	0x0002e69c

00015670 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   15670:	4a05      	ldr	r2, [pc, #20]	; (15688 <log_backend_enable+0x18>)
	backend->cb->id = id;
   15672:	6843      	ldr	r3, [r0, #4]
   15674:	1a80      	subs	r0, r0, r2
   15676:	1100      	asrs	r0, r0, #4
   15678:	3001      	adds	r0, #1
	backend->cb->active = true;
   1567a:	2201      	movs	r2, #1

	log_backend_id_set(backend, id);
   1567c:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
   1567e:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   15680:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   15682:	f7ff be49 	b.w	15318 <z_log_notify_backend_enabled>
   15686:	bf00      	nop
   15688:	0002e69c 	.word	0x0002e69c

0001568c <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   1568c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   15690:	f3c1 45cb 	ubfx	r5, r1, #19, #12
   15694:	f3c1 2649 	ubfx	r6, r1, #9, #10
   15698:	b08d      	sub	sp, #52	; 0x34
   1569a:	4681      	mov	r9, r0
   1569c:	460c      	mov	r4, r1
   1569e:	4690      	mov	r8, r2
   156a0:	469a      	mov	sl, r3
   156a2:	3517      	adds	r5, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   156a4:	2e00      	cmp	r6, #0
   156a6:	d03b      	beq.n	15720 <z_impl_z_log_msg_static_create+0x94>
	return cbprintf_package_convert(in_packaged, in_len,
   156a8:	2302      	movs	r3, #2
   156aa:	a809      	add	r0, sp, #36	; 0x24
   156ac:	f04f 0b04 	mov.w	fp, #4
   156b0:	af07      	add	r7, sp, #28
	struct z_cbprintf_buf_desc buf_desc = {
   156b2:	2200      	movs	r2, #0
		uint32_t flags = CBPRINTF_PACKAGE_COPY_RW_STR;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   156b4:	4631      	mov	r1, r6
	return cbprintf_package_convert(in_packaged, in_len,
   156b6:	9300      	str	r3, [sp, #0]
   156b8:	f8cd b008 	str.w	fp, [sp, #8]
   156bc:	4603      	mov	r3, r0
   156be:	9701      	str	r7, [sp, #4]
   156c0:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
   156c2:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
   156c6:	920b      	str	r2, [sp, #44]	; 0x2c
	return cbprintf_package_convert(in_packaged, in_len,
   156c8:	9605      	str	r6, [sp, #20]
   156ca:	f7fe fef3 	bl	144b4 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   156ce:	f3c0 0309 	ubfx	r3, r0, #0, #10
   156d2:	1958      	adds	r0, r3, r5
   156d4:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   156d8:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
   156da:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   156dc:	f363 2452 	bfi	r4, r3, #9, #10
   156e0:	9304      	str	r3, [sp, #16]
   156e2:	f7ff fe93 	bl	1540c <z_log_msg_alloc>
		if (msg) {
   156e6:	4605      	mov	r5, r0
   156e8:	b178      	cbz	r0, 1570a <z_impl_z_log_msg_static_create+0x7e>
	struct z_cbprintf_buf_desc buf_desc = {
   156ea:	9b04      	ldr	r3, [sp, #16]
   156ec:	930a      	str	r3, [sp, #40]	; 0x28
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
   156ee:	3010      	adds	r0, #16
   156f0:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
   156f2:	2302      	movs	r3, #2
	struct z_cbprintf_buf_desc buf_desc = {
   156f4:	9009      	str	r0, [sp, #36]	; 0x24
   156f6:	920b      	str	r2, [sp, #44]	; 0x2c
	return cbprintf_package_convert(in_packaged, in_len,
   156f8:	9300      	str	r3, [sp, #0]
   156fa:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   156fe:	4a0c      	ldr	r2, [pc, #48]	; (15730 <z_impl_z_log_msg_static_create+0xa4>)
   15700:	9905      	ldr	r1, [sp, #20]
   15702:	ab09      	add	r3, sp, #36	; 0x24
   15704:	4640      	mov	r0, r8
   15706:	f7fe fed5 	bl	144b4 <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   1570a:	f366 2452 	bfi	r4, r6, #9, #10
   1570e:	4653      	mov	r3, sl
   15710:	4622      	mov	r2, r4
   15712:	4649      	mov	r1, r9
   15714:	4628      	mov	r0, r5
}
   15716:	b00d      	add	sp, #52	; 0x34
   15718:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
   1571c:	f014 bbde 	b.w	29edc <z_log_msg_finalize>
   15720:	f025 0007 	bic.w	r0, r5, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   15724:	0880      	lsrs	r0, r0, #2
   15726:	f7ff fe71 	bl	1540c <z_log_msg_alloc>
   1572a:	4605      	mov	r5, r0
   1572c:	e7ed      	b.n	1570a <z_impl_z_log_msg_static_create+0x7e>
   1572e:	bf00      	nop
   15730:	00029eaf 	.word	0x00029eaf

00015734 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   15734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15738:	b087      	sub	sp, #28
   1573a:	e9dd 5711 	ldrd	r5, r7, [sp, #68]	; 0x44
   1573e:	469a      	mov	sl, r3
   15740:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15742:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
   15746:	9303      	str	r3, [sp, #12]
   15748:	4604      	mov	r4, r0
   1574a:	4689      	mov	r9, r1
   1574c:	4690      	mov	r8, r2
	int plen;

	if (fmt) {
   1574e:	b3cf      	cbz	r7, 157c4 <z_impl_z_log_msg_runtime_vcreate+0x90>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   15750:	f8cd b000 	str.w	fp, [sp]
   15754:	463b      	mov	r3, r7
   15756:	462a      	mov	r2, r5
   15758:	2110      	movs	r1, #16
   1575a:	2000      	movs	r0, #0
		va_copy(ap2, ap);
   1575c:	f8cd b014 	str.w	fp, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   15760:	f7fe fc6c 	bl	1403c <cbvprintf_package>
   15764:	4606      	mov	r6, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   15766:	9a03      	ldr	r2, [sp, #12]
   15768:	f008 0307 	and.w	r3, r8, #7
   1576c:	f004 0807 	and.w	r8, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   15770:	f102 0017 	add.w	r0, r2, #23
	struct log_msg_desc desc =
   15774:	4c14      	ldr	r4, [pc, #80]	; (157c8 <z_impl_z_log_msg_runtime_vcreate+0x94>)
   15776:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   1577a:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1577e:	4430      	add	r0, r6
	struct log_msg_desc desc =
   15780:	4b12      	ldr	r3, [pc, #72]	; (157cc <z_impl_z_log_msg_runtime_vcreate+0x98>)
   15782:	ea04 2446 	and.w	r4, r4, r6, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   15786:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   1578a:	ea48 0804 	orr.w	r8, r8, r4
   1578e:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   15792:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   15794:	ea48 0803 	orr.w	r8, r8, r3
		msg = z_log_msg_alloc(msg_wlen);
   15798:	f7ff fe38 	bl	1540c <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   1579c:	4604      	mov	r4, r0
   1579e:	b140      	cbz	r0, 157b2 <z_impl_z_log_msg_runtime_vcreate+0x7e>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   157a0:	b13f      	cbz	r7, 157b2 <z_impl_z_log_msg_runtime_vcreate+0x7e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   157a2:	f8cd b000 	str.w	fp, [sp]
   157a6:	463b      	mov	r3, r7
   157a8:	462a      	mov	r2, r5
   157aa:	4631      	mov	r1, r6
   157ac:	3010      	adds	r0, #16
   157ae:	f7fe fc45 	bl	1403c <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   157b2:	4653      	mov	r3, sl
   157b4:	4642      	mov	r2, r8
   157b6:	4649      	mov	r1, r9
   157b8:	4620      	mov	r0, r4
	}
}
   157ba:	b007      	add	sp, #28
   157bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   157c0:	f014 bb8c 	b.w	29edc <z_log_msg_finalize>
		plen = 0;
   157c4:	463e      	mov	r6, r7
   157c6:	e7ce      	b.n	15766 <z_impl_z_log_msg_runtime_vcreate+0x32>
   157c8:	0007fe00 	.word	0x0007fe00
   157cc:	7ff80000 	.word	0x7ff80000

000157d0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   157d0:	b40e      	push	{r1, r2, r3}
   157d2:	b503      	push	{r0, r1, lr}
   157d4:	ab03      	add	r3, sp, #12
   157d6:	4601      	mov	r1, r0
   157d8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   157dc:	4804      	ldr	r0, [pc, #16]	; (157f0 <print_formatted+0x20>)
	va_start(args, fmt);
   157de:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   157e0:	f014 fba4 	bl	29f2c <cbvprintf>
	va_end(args);

	return length;
}
   157e4:	b002      	add	sp, #8
   157e6:	f85d eb04 	ldr.w	lr, [sp], #4
   157ea:	b003      	add	sp, #12
   157ec:	4770      	bx	lr
   157ee:	bf00      	nop
   157f0:	00029f55 	.word	0x00029f55

000157f4 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   157f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157f8:	b089      	sub	sp, #36	; 0x24
   157fa:	469a      	mov	sl, r3
   157fc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   15800:	9304      	str	r3, [sp, #16]
   15802:	e9dd 8313 	ldrd	r8, r3, [sp, #76]	; 0x4c
   15806:	9306      	str	r3, [sp, #24]
   15808:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1580a:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
   1580c:	9b04      	ldr	r3, [sp, #16]
{
   1580e:	9e16      	ldr	r6, [sp, #88]	; 0x58
   15810:	4604      	mov	r4, r0
   15812:	460f      	mov	r7, r1
   15814:	4693      	mov	fp, r2
	if (!raw_string) {
   15816:	2b00      	cmp	r3, #0
   15818:	f000 8114 	beq.w	15a44 <log_output_process+0x250>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1581c:	f006 0308 	and.w	r3, r6, #8
   15820:	9307      	str	r3, [sp, #28]
	const char *tag = z_log_get_tag();
   15822:	f014 fb42 	bl	29eaa <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   15826:	f006 0502 	and.w	r5, r6, #2
	if (tag) {
   1582a:	4602      	mov	r2, r0
   1582c:	2800      	cmp	r0, #0
   1582e:	f000 80b2 	beq.w	15996 <log_output_process+0x1a2>
		length += print_formatted(output, "%s ", tag);
   15832:	498a      	ldr	r1, [pc, #552]	; (15a5c <log_output_process+0x268>)
   15834:	4620      	mov	r0, r4
   15836:	f7ff ffcb 	bl	157d0 <print_formatted>
   1583a:	4681      	mov	r9, r0
	if (stamp) {
   1583c:	b14d      	cbz	r5, 15852 <log_output_process+0x5e>
	if (!format) {
   1583e:	f016 0f44 	tst.w	r6, #68	; 0x44
   15842:	f040 80aa 	bne.w	1599a <log_output_process+0x1a6>
		length = print_formatted(output, "[%08lu] ", timestamp);
   15846:	4986      	ldr	r1, [pc, #536]	; (15a60 <log_output_process+0x26c>)
   15848:	463a      	mov	r2, r7
   1584a:	4620      	mov	r0, r4
   1584c:	f7ff ffc0 	bl	157d0 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   15850:	4481      	add	r9, r0
	if (color) {
   15852:	f006 0301 	and.w	r3, r6, #1
   15856:	b15b      	cbz	r3, 15870 <log_output_process+0x7c>
		const char *log_color = start && (colors[level] != NULL) ?
   15858:	4b82      	ldr	r3, [pc, #520]	; (15a64 <log_output_process+0x270>)
   1585a:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
   1585c:	4982      	ldr	r1, [pc, #520]	; (15a68 <log_output_process+0x274>)
		const char *log_color = start && (colors[level] != NULL) ?
   1585e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
   15862:	4b82      	ldr	r3, [pc, #520]	; (15a6c <log_output_process+0x278>)
   15864:	4620      	mov	r0, r4
   15866:	2a00      	cmp	r2, #0
   15868:	bf08      	it	eq
   1586a:	461a      	moveq	r2, r3
   1586c:	f7ff ffb0 	bl	157d0 <print_formatted>
	if (level_on) {
   15870:	f006 0308 	and.w	r3, r6, #8
   15874:	2b00      	cmp	r3, #0
   15876:	f000 80bc 	beq.w	159f2 <log_output_process+0x1fe>
		total += print_formatted(output, "<%s> ", severity[level]);
   1587a:	4b7d      	ldr	r3, [pc, #500]	; (15a70 <log_output_process+0x27c>)
   1587c:	9a04      	ldr	r2, [sp, #16]
   1587e:	497d      	ldr	r1, [pc, #500]	; (15a74 <log_output_process+0x280>)
   15880:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   15884:	4620      	mov	r0, r4
   15886:	f7ff ffa3 	bl	157d0 <print_formatted>
   1588a:	4605      	mov	r5, r0
	if (domain) {
   1588c:	f1bb 0f00 	cmp.w	fp, #0
   15890:	d005      	beq.n	1589e <log_output_process+0xaa>
		total += print_formatted(output, "%s/", domain);
   15892:	4979      	ldr	r1, [pc, #484]	; (15a78 <log_output_process+0x284>)
   15894:	465a      	mov	r2, fp
   15896:	4620      	mov	r0, r4
   15898:	f7ff ff9a 	bl	157d0 <print_formatted>
   1589c:	4405      	add	r5, r0
	if (source) {
   1589e:	f1ba 0f00 	cmp.w	sl, #0
   158a2:	d005      	beq.n	158b0 <log_output_process+0xbc>
		total += print_formatted(output,
   158a4:	4975      	ldr	r1, [pc, #468]	; (15a7c <log_output_process+0x288>)
   158a6:	4652      	mov	r2, sl
   158a8:	4620      	mov	r0, r4
   158aa:	f7ff ff91 	bl	157d0 <print_formatted>
   158ae:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   158b0:	444d      	add	r5, r9
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
	} else {
		prefix_offset = 0;
	}

	if (package) {
   158b2:	f1b8 0f00 	cmp.w	r8, #0
   158b6:	f000 80cd 	beq.w	15a54 <log_output_process+0x260>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
   158ba:	4871      	ldr	r0, [pc, #452]	; (15a80 <log_output_process+0x28c>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   158bc:	4971      	ldr	r1, [pc, #452]	; (15a84 <log_output_process+0x290>)
   158be:	4643      	mov	r3, r8
   158c0:	4622      	mov	r2, r4
   158c2:	f013 fd37 	bl	29334 <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   158c6:	9b05      	ldr	r3, [sp, #20]
   158c8:	2b00      	cmp	r3, #0
   158ca:	d04c      	beq.n	15966 <log_output_process+0x172>
		print_formatted(output, " ");
   158cc:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 15a88 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   158d0:	9f05      	ldr	r7, [sp, #20]
   158d2:	2f10      	cmp	r7, #16
   158d4:	bf28      	it	cs
   158d6:	2710      	movcs	r7, #16
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   158d8:	06f3      	lsls	r3, r6, #27
   158da:	d406      	bmi.n	158ea <log_output_process+0xf6>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   158dc:	06b0      	lsls	r0, r6, #26
		print_formatted(ctx, "\n");
   158de:	bf4c      	ite	mi
   158e0:	496a      	ldrmi	r1, [pc, #424]	; (15a8c <log_output_process+0x298>)
		print_formatted(ctx, "\r\n");
   158e2:	496b      	ldrpl	r1, [pc, #428]	; (15a90 <log_output_process+0x29c>)
   158e4:	4620      	mov	r0, r4
   158e6:	f7ff ff73 	bl	157d0 <print_formatted>
		prefix_offset = 0;
   158ea:	f04f 0a00 	mov.w	sl, #0
	for (int i = 0; i < prefix_offset; i++) {
   158ee:	4555      	cmp	r5, sl
   158f0:	f300 8085 	bgt.w	159fe <log_output_process+0x20a>
			print_formatted(output, "   ");
   158f4:	f8df a19c 	ldr.w	sl, [pc, #412]	; 15a94 <log_output_process+0x2a0>
			print_formatted(output, "%02x ", data[i]);
   158f8:	f8df b19c 	ldr.w	fp, [pc, #412]	; 15a98 <log_output_process+0x2a4>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   158fc:	f04f 0900 	mov.w	r9, #0
		if (i < length) {
   15900:	45b9      	cmp	r9, r7
   15902:	f080 808c 	bcs.w	15a1e <log_output_process+0x22a>
			print_formatted(output, "%02x ", data[i]);
   15906:	9b06      	ldr	r3, [sp, #24]
   15908:	4659      	mov	r1, fp
   1590a:	f813 2009 	ldrb.w	r2, [r3, r9]
   1590e:	4620      	mov	r0, r4
   15910:	f7ff ff5e 	bl	157d0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   15914:	f109 0901 	add.w	r9, r9, #1
   15918:	f1b9 0f10 	cmp.w	r9, #16
   1591c:	d176      	bne.n	15a0c <log_output_process+0x218>
	print_formatted(output, "|");
   1591e:	495f      	ldr	r1, [pc, #380]	; (15a9c <log_output_process+0x2a8>)
			print_formatted(output, "%c",
   15920:	f8df a17c 	ldr.w	sl, [pc, #380]	; 15aa0 <log_output_process+0x2ac>
	print_formatted(output, "|");
   15924:	4620      	mov	r0, r4
   15926:	f7ff ff53 	bl	157d0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1592a:	f04f 0b00 	mov.w	fp, #0
		if (i < length) {
   1592e:	455f      	cmp	r7, fp
   15930:	f240 8083 	bls.w	15a3a <log_output_process+0x246>
			char c = (char)data[i];
   15934:	9b06      	ldr	r3, [sp, #24]
   15936:	f813 200b 	ldrb.w	r2, [r3, fp]
			print_formatted(output, "%c",
   1593a:	4b5a      	ldr	r3, [pc, #360]	; (15aa4 <log_output_process+0x2b0>)
   1593c:	5cd3      	ldrb	r3, [r2, r3]
   1593e:	f013 0f97 	tst.w	r3, #151	; 0x97
   15942:	bf08      	it	eq
   15944:	222e      	moveq	r2, #46	; 0x2e
   15946:	4651      	mov	r1, sl
   15948:	4620      	mov	r0, r4
   1594a:	f7ff ff41 	bl	157d0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1594e:	f10b 0b01 	add.w	fp, fp, #1
   15952:	f1bb 0f10 	cmp.w	fp, #16
   15956:	d167      	bne.n	15a28 <log_output_process+0x234>
		data += length;
   15958:	9b06      	ldr	r3, [sp, #24]
   1595a:	443b      	add	r3, r7
   1595c:	9306      	str	r3, [sp, #24]
	} while (len);
   1595e:	9b05      	ldr	r3, [sp, #20]
   15960:	1bdb      	subs	r3, r3, r7
   15962:	9305      	str	r3, [sp, #20]
   15964:	d1b4      	bne.n	158d0 <log_output_process+0xdc>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   15966:	9b04      	ldr	r3, [sp, #16]
   15968:	b17b      	cbz	r3, 1598a <log_output_process+0x196>
	if (color) {
   1596a:	07f1      	lsls	r1, r6, #31
   1596c:	d504      	bpl.n	15978 <log_output_process+0x184>
		print_formatted(output, "%s", log_color);
   1596e:	4a3f      	ldr	r2, [pc, #252]	; (15a6c <log_output_process+0x278>)
   15970:	493d      	ldr	r1, [pc, #244]	; (15a68 <log_output_process+0x274>)
   15972:	4620      	mov	r0, r4
   15974:	f7ff ff2c 	bl	157d0 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   15978:	06f2      	lsls	r2, r6, #27
   1597a:	d406      	bmi.n	1598a <log_output_process+0x196>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1597c:	06b3      	lsls	r3, r6, #26
		print_formatted(ctx, "\n");
   1597e:	bf4c      	ite	mi
   15980:	4942      	ldrmi	r1, [pc, #264]	; (15a8c <log_output_process+0x298>)
		print_formatted(ctx, "\r\n");
   15982:	4943      	ldrpl	r1, [pc, #268]	; (15a90 <log_output_process+0x29c>)
   15984:	4620      	mov	r0, r4
   15986:	f7ff ff23 	bl	157d0 <print_formatted>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   1598a:	4620      	mov	r0, r4
}
   1598c:	b009      	add	sp, #36	; 0x24
   1598e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   15992:	f014 bad2 	b.w	29f3a <log_output_flush>
	uint32_t length = 0U;
   15996:	4681      	mov	r9, r0
   15998:	e750      	b.n	1583c <log_output_process+0x48>
	} else if (freq != 0U) {
   1599a:	4b43      	ldr	r3, [pc, #268]	; (15aa8 <log_output_process+0x2b4>)
   1599c:	6818      	ldr	r0, [r3, #0]
   1599e:	2800      	cmp	r0, #0
   159a0:	f43f af56 	beq.w	15850 <log_output_process+0x5c>
		timestamp /= timestamp_div;
   159a4:	4b41      	ldr	r3, [pc, #260]	; (15aac <log_output_process+0x2b8>)
		ms = (remainder * 1000U) / freq;
   159a6:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
   159aa:	6819      	ldr	r1, [r3, #0]
   159ac:	fbb7 f7f1 	udiv	r7, r7, r1
		total_seconds = timestamp / freq;
   159b0:	f44f 6561 	mov.w	r5, #3600	; 0xe10
   159b4:	fbb7 f1f0 	udiv	r1, r7, r0
		remainder = timestamp % freq;
   159b8:	fb00 7711 	mls	r7, r0, r1, r7
		ms = (remainder * 1000U) / freq;
   159bc:	fb0e f707 	mul.w	r7, lr, r7
   159c0:	fbb1 f2f5 	udiv	r2, r1, r5
   159c4:	fb05 1512 	mls	r5, r5, r2, r1
		mins = seconds / 60U;
   159c8:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   159ca:	fbb7 fcf0 	udiv	ip, r7, r0
		mins = seconds / 60U;
   159ce:	fbb5 f3f1 	udiv	r3, r5, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   159d2:	fb00 771c 	mls	r7, r0, ip, r7
				length = print_formatted(output,
   159d6:	fb01 5113 	mls	r1, r1, r3, r5
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   159da:	fb0e f707 	mul.w	r7, lr, r7
				length = print_formatted(output,
   159de:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   159e0:	fbb7 f7f0 	udiv	r7, r7, r0
				length = print_formatted(output,
   159e4:	4932      	ldr	r1, [pc, #200]	; (15ab0 <log_output_process+0x2bc>)
   159e6:	e9cd c701 	strd	ip, r7, [sp, #4]
   159ea:	4620      	mov	r0, r4
   159ec:	f7ff fef0 	bl	157d0 <print_formatted>
   159f0:	e72e      	b.n	15850 <log_output_process+0x5c>
	int total = 0;
   159f2:	f006 0508 	and.w	r5, r6, #8
   159f6:	e749      	b.n	1588c <log_output_process+0x98>
		prefix_offset = 0;
   159f8:	9d04      	ldr	r5, [sp, #16]
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
   159fa:	482e      	ldr	r0, [pc, #184]	; (15ab4 <log_output_process+0x2c0>)
   159fc:	e75e      	b.n	158bc <log_output_process+0xc8>
		print_formatted(output, " ");
   159fe:	4641      	mov	r1, r8
   15a00:	4620      	mov	r0, r4
   15a02:	f7ff fee5 	bl	157d0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   15a06:	f10a 0a01 	add.w	sl, sl, #1
   15a0a:	e770      	b.n	158ee <log_output_process+0xfa>
		if (i > 0 && !(i % 8)) {
   15a0c:	f019 0f07 	tst.w	r9, #7
   15a10:	f47f af76 	bne.w	15900 <log_output_process+0x10c>
			print_formatted(output, " ");
   15a14:	4641      	mov	r1, r8
   15a16:	4620      	mov	r0, r4
   15a18:	f7ff feda 	bl	157d0 <print_formatted>
   15a1c:	e770      	b.n	15900 <log_output_process+0x10c>
			print_formatted(output, "   ");
   15a1e:	4651      	mov	r1, sl
   15a20:	4620      	mov	r0, r4
   15a22:	f7ff fed5 	bl	157d0 <print_formatted>
   15a26:	e775      	b.n	15914 <log_output_process+0x120>
		if (i > 0 && !(i % 8)) {
   15a28:	f01b 0f07 	tst.w	fp, #7
   15a2c:	f47f af7f 	bne.w	1592e <log_output_process+0x13a>
			print_formatted(output, " ");
   15a30:	4641      	mov	r1, r8
   15a32:	4620      	mov	r0, r4
   15a34:	f7ff fecc 	bl	157d0 <print_formatted>
   15a38:	e779      	b.n	1592e <log_output_process+0x13a>
			print_formatted(output, " ");
   15a3a:	4641      	mov	r1, r8
   15a3c:	4620      	mov	r0, r4
   15a3e:	f7ff fec7 	bl	157d0 <print_formatted>
   15a42:	e784      	b.n	1594e <log_output_process+0x15a>
	if (package) {
   15a44:	f1b8 0f00 	cmp.w	r8, #0
   15a48:	d1d6      	bne.n	159f8 <log_output_process+0x204>
	if (data_len) {
   15a4a:	9b05      	ldr	r3, [sp, #20]
   15a4c:	2b00      	cmp	r3, #0
   15a4e:	d09c      	beq.n	1598a <log_output_process+0x196>
		prefix_offset = 0;
   15a50:	9d04      	ldr	r5, [sp, #16]
   15a52:	e73b      	b.n	158cc <log_output_process+0xd8>
	if (data_len) {
   15a54:	9b05      	ldr	r3, [sp, #20]
   15a56:	2b00      	cmp	r3, #0
   15a58:	d087      	beq.n	1596a <log_output_process+0x176>
   15a5a:	e737      	b.n	158cc <log_output_process+0xd8>
   15a5c:	0002f7b5 	.word	0x0002f7b5
   15a60:	0002f7b9 	.word	0x0002f7b9
   15a64:	0002eb14 	.word	0x0002eb14
   15a68:	0003062b 	.word	0x0003062b
   15a6c:	0002f7b0 	.word	0x0002f7b0
   15a70:	0002eb28 	.word	0x0002eb28
   15a74:	0002f7de 	.word	0x0002f7de
   15a78:	0002f7e4 	.word	0x0002f7e4
   15a7c:	0002f7e8 	.word	0x0002f7e8
   15a80:	00029f55 	.word	0x00029f55
   15a84:	00029f2d 	.word	0x00029f2d
   15a88:	0002f7f8 	.word	0x0002f7f8
   15a8c:	0002f6a9 	.word	0x0002f6a9
   15a90:	0002f7ed 	.word	0x0002f7ed
   15a94:	0002f7f6 	.word	0x0002f7f6
   15a98:	0002f7f0 	.word	0x0002f7f0
   15a9c:	0002f7fa 	.word	0x0002f7fa
   15aa0:	0002f7fc 	.word	0x0002f7fc
   15aa4:	00031e53 	.word	0x00031e53
   15aa8:	200055b4 	.word	0x200055b4
   15aac:	200055b8 	.word	0x200055b8
   15ab0:	0002f7c2 	.word	0x0002f7c2
   15ab4:	00029f8b 	.word	0x00029f8b

00015ab8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   15ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   15abc:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.level;
   15abe:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   15ac0:	688e      	ldr	r6, [r1, #8]
   15ac2:	b086      	sub	sp, #24
   15ac4:	4605      	mov	r5, r0
   15ac6:	460c      	mov	r4, r1
   15ac8:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
   15aca:	f3c7 1782 	ubfx	r7, r7, #6, #3
	log_timestamp_t timestamp = log_msg_get_timestamp(msg);
	uint8_t level = log_msg_get_level(msg);
	void *source = (void *)log_msg_get_source(msg);
	uint8_t domain_id = log_msg_get_domain(msg);
	int16_t source_id = source ?
   15ace:	b15b      	cbz	r3, 15ae8 <log_output_msg_process+0x30>
   15ad0:	4913      	ldr	r1, [pc, #76]	; (15b20 <log_output_msg_process+0x68>)
   15ad2:	1a5b      	subs	r3, r3, r1
   15ad4:	f343 01cf 	sbfx	r1, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   15ad8:	2900      	cmp	r1, #0
   15ada:	db1f      	blt.n	15b1c <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   15adc:	7820      	ldrb	r0, [r4, #0]
   15ade:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   15ae2:	f7ff fdb7 	bl	15654 <log_source_name_get>
   15ae6:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   15ae8:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
   15aea:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   15aec:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   15af0:	9700      	str	r7, [sp, #0]
   15af2:	f3c2 2249 	ubfx	r2, r2, #9, #10
   15af6:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   15af8:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
   15afc:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   15b00:	bf08      	it	eq
   15b02:	2100      	moveq	r1, #0
   15b04:	e9cd 0803 	strd	r0, r8, [sp, #12]
   15b08:	e9cd 1401 	strd	r1, r4, [sp, #4]
   15b0c:	2200      	movs	r2, #0
   15b0e:	4631      	mov	r1, r6
   15b10:	4628      	mov	r0, r5
   15b12:	f7ff fe6f 	bl	157f4 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   15b16:	b006      	add	sp, #24
   15b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   15b1c:	2300      	movs	r3, #0
   15b1e:	e7e3      	b.n	15ae8 <log_output_msg_process+0x30>
   15b20:	0002e574 	.word	0x0002e574

00015b24 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   15b24:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   15b26:	f242 730f 	movw	r3, #9999	; 0x270f
   15b2a:	428b      	cmp	r3, r1
   15b2c:	bf28      	it	cs
   15b2e:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   15b30:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   15b32:	4a0f      	ldr	r2, [pc, #60]	; (15b70 <log_output_dropped_process+0x4c>)
{
   15b34:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   15b36:	2105      	movs	r1, #5
   15b38:	4668      	mov	r0, sp
   15b3a:	f013 fcea 	bl	29512 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   15b3e:	6863      	ldr	r3, [r4, #4]
   15b40:	490c      	ldr	r1, [pc, #48]	; (15b74 <log_output_dropped_process+0x50>)
   15b42:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   15b44:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   15b46:	220b      	movs	r2, #11
   15b48:	4628      	mov	r0, r5
   15b4a:	f014 f9e2 	bl	29f12 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   15b4e:	6863      	ldr	r3, [r4, #4]
   15b50:	4632      	mov	r2, r6
   15b52:	4669      	mov	r1, sp
   15b54:	4628      	mov	r0, r5
   15b56:	685b      	ldr	r3, [r3, #4]
   15b58:	f014 f9db 	bl	29f12 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   15b5c:	6863      	ldr	r3, [r4, #4]
   15b5e:	4906      	ldr	r1, [pc, #24]	; (15b78 <log_output_dropped_process+0x54>)
   15b60:	685b      	ldr	r3, [r3, #4]
   15b62:	221b      	movs	r2, #27
   15b64:	4628      	mov	r0, r5
   15b66:	f014 f9d4 	bl	29f12 <buffer_write>
		     output->control_block->ctx);
}
   15b6a:	b002      	add	sp, #8
   15b6c:	bd70      	pop	{r4, r5, r6, pc}
   15b6e:	bf00      	nop
   15b70:	00031cc8 	.word	0x00031cc8
   15b74:	0002f83b 	.word	0x0002f83b
   15b78:	0002f81f 	.word	0x0002f81f

00015b7c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   15b7c:	4a08      	ldr	r2, [pc, #32]	; (15ba0 <log_output_timestamp_freq_set+0x24>)
{
   15b7e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
   15b80:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   15b82:	4c08      	ldr	r4, [pc, #32]	; (15ba4 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   15b84:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   15b86:	2100      	movs	r1, #0
   15b88:	42a0      	cmp	r0, r4
   15b8a:	d804      	bhi.n	15b96 <log_output_timestamp_freq_set+0x1a>
   15b8c:	b101      	cbz	r1, 15b90 <log_output_timestamp_freq_set+0x14>
   15b8e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   15b90:	4b05      	ldr	r3, [pc, #20]	; (15ba8 <log_output_timestamp_freq_set+0x2c>)
   15b92:	6018      	str	r0, [r3, #0]
}
   15b94:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   15b96:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   15b98:	005b      	lsls	r3, r3, #1
   15b9a:	2101      	movs	r1, #1
   15b9c:	e7f4      	b.n	15b88 <log_output_timestamp_freq_set+0xc>
   15b9e:	bf00      	nop
   15ba0:	200055b8 	.word	0x200055b8
   15ba4:	000f4240 	.word	0x000f4240
   15ba8:	200055b4 	.word	0x200055b4

00015bac <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   15bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
   15bae:	4f07      	ldr	r7, [pc, #28]	; (15bcc <char_out+0x20>)
{
   15bb0:	460d      	mov	r5, r1
   15bb2:	4604      	mov	r4, r0
   15bb4:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   15bb6:	42b4      	cmp	r4, r6
   15bb8:	d101      	bne.n	15bbe <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
   15bba:	4628      	mov	r0, r5
   15bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   15bbe:	6838      	ldr	r0, [r7, #0]
   15bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   15bc4:	6883      	ldr	r3, [r0, #8]
   15bc6:	685b      	ldr	r3, [r3, #4]
   15bc8:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   15bca:	e7f4      	b.n	15bb6 <char_out+0xa>
   15bcc:	200055d4 	.word	0x200055d4

00015bd0 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   15bd0:	4b01      	ldr	r3, [pc, #4]	; (15bd8 <format_set+0x8>)
	return 0;
}
   15bd2:	2000      	movs	r0, #0
	log_format_current = log_type;
   15bd4:	6019      	str	r1, [r3, #0]
}
   15bd6:	4770      	bx	lr
   15bd8:	200055c4 	.word	0x200055c4

00015bdc <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   15bdc:	4b01      	ldr	r3, [pc, #4]	; (15be4 <log_backend_uart_init+0x8>)
   15bde:	4a02      	ldr	r2, [pc, #8]	; (15be8 <log_backend_uart_init+0xc>)
   15be0:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
   15be2:	4770      	bx	lr
   15be4:	200055d4 	.word	0x200055d4
   15be8:	0002e2dc 	.word	0x0002e2dc

00015bec <panic>:

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
   15bec:	4b02      	ldr	r3, [pc, #8]	; (15bf8 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   15bee:	4803      	ldr	r0, [pc, #12]	; (15bfc <panic+0x10>)
   15bf0:	2201      	movs	r2, #1
   15bf2:	701a      	strb	r2, [r3, #0]
   15bf4:	f014 b9a1 	b.w	29f3a <log_output_flush>
   15bf8:	20006b37 	.word	0x20006b37
   15bfc:	0002eb58 	.word	0x0002eb58

00015c00 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   15c00:	4801      	ldr	r0, [pc, #4]	; (15c08 <dropped+0x8>)
   15c02:	f7ff bf8f 	b.w	15b24 <log_output_dropped_process>
   15c06:	bf00      	nop
   15c08:	0002eb58 	.word	0x0002eb58

00015c0c <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   15c0c:	4b06      	ldr	r3, [pc, #24]	; (15c28 <process+0x1c>)
{
   15c0e:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   15c10:	6818      	ldr	r0, [r3, #0]
{
   15c12:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   15c14:	f7ff fb7a 	bl	1530c <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   15c18:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   15c1a:	4603      	mov	r3, r0
}
   15c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
   15c20:	4802      	ldr	r0, [pc, #8]	; (15c2c <process+0x20>)
   15c22:	220f      	movs	r2, #15
   15c24:	4718      	bx	r3
   15c26:	bf00      	nop
   15c28:	200055c4 	.word	0x200055c4
   15c2c:	0002eb58 	.word	0x0002eb58

00015c30 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   15c30:	4b01      	ldr	r3, [pc, #4]	; (15c38 <log_backend_rtt_init+0x8>)
   15c32:	2201      	movs	r2, #1
   15c34:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   15c36:	4770      	bx	lr
   15c38:	20006b49 	.word	0x20006b49

00015c3c <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   15c3c:	4b01      	ldr	r3, [pc, #4]	; (15c44 <format_set+0x8>)
	return 0;
}
   15c3e:	2000      	movs	r0, #0
	log_format_current = log_type;
   15c40:	6019      	str	r1, [r3, #0]
}
   15c42:	4770      	bx	lr
   15c44:	200055e0 	.word	0x200055e0

00015c48 <panic>:
	panic_mode = true;
   15c48:	4b02      	ldr	r3, [pc, #8]	; (15c54 <panic+0xc>)
	log_output_flush(output);
   15c4a:	4803      	ldr	r0, [pc, #12]	; (15c58 <panic+0x10>)
   15c4c:	2201      	movs	r2, #1
   15c4e:	701a      	strb	r2, [r3, #0]
   15c50:	f014 b973 	b.w	29f3a <log_output_flush>
   15c54:	20006b4a 	.word	0x20006b4a
   15c58:	0002eb84 	.word	0x0002eb84

00015c5c <dropped>:
	log_output_dropped_process(output, cnt);
   15c5c:	4801      	ldr	r0, [pc, #4]	; (15c64 <dropped+0x8>)
   15c5e:	f7ff bf61 	b.w	15b24 <log_output_dropped_process>
   15c62:	bf00      	nop
   15c64:	0002eb84 	.word	0x0002eb84

00015c68 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   15c68:	4b06      	ldr	r3, [pc, #24]	; (15c84 <process+0x1c>)
{
   15c6a:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   15c6c:	6818      	ldr	r0, [r3, #0]
{
   15c6e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   15c70:	f7ff fb4c 	bl	1530c <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
   15c74:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   15c76:	4603      	mov	r3, r0
}
   15c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
   15c7c:	4802      	ldr	r0, [pc, #8]	; (15c88 <process+0x20>)
   15c7e:	220f      	movs	r2, #15
   15c80:	4718      	bx	r3
   15c82:	bf00      	nop
   15c84:	200055e0 	.word	0x200055e0
   15c88:	0002eb84 	.word	0x0002eb84

00015c8c <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   15c8c:	4b05      	ldr	r3, [pc, #20]	; (15ca4 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
   15c8e:	781b      	ldrb	r3, [r3, #0]
   15c90:	b11b      	cbz	r3, 15c9a <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   15c92:	f241 3088 	movw	r0, #5000	; 0x1388
   15c96:	f017 bee5 	b.w	2da64 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   15c9a:	20a4      	movs	r0, #164	; 0xa4
   15c9c:	2100      	movs	r1, #0
   15c9e:	f00e b931 	b.w	23f04 <z_impl_k_sleep>
   15ca2:	bf00      	nop
   15ca4:	20006b4a 	.word	0x20006b4a

00015ca8 <data_out_block_mode>:
{
   15ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   15cac:	f8df 907c 	ldr.w	r9, [pc, #124]	; 15d2c <data_out_block_mode+0x84>
   15cb0:	4d1f      	ldr	r5, [pc, #124]	; (15d30 <data_out_block_mode+0x88>)
{
   15cb2:	4680      	mov	r8, r0
   15cb4:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   15cb6:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
   15cb8:	f899 6000 	ldrb.w	r6, [r9]
   15cbc:	b996      	cbnz	r6, 15ce4 <data_out_block_mode+0x3c>
			RTT_LOCK();
   15cbe:	f00d f87f 	bl	22dc0 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   15cc2:	4630      	mov	r0, r6
   15cc4:	463a      	mov	r2, r7
   15cc6:	4641      	mov	r1, r8
   15cc8:	f00c fff4 	bl	22cb4 <SEGGER_RTT_WriteSkipNoLock>
   15ccc:	4606      	mov	r6, r0
			RTT_UNLOCK();
   15cce:	f00d f881 	bl	22dd4 <zephyr_rtt_mutex_unlock>
		if (ret) {
   15cd2:	b1fe      	cbz	r6, 15d14 <data_out_block_mode+0x6c>
	host_present = true;
   15cd4:	2301      	movs	r3, #1
   15cd6:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
   15cd8:	f899 3000 	ldrb.w	r3, [r9]
   15cdc:	b96b      	cbnz	r3, 15cfa <data_out_block_mode+0x52>
}
   15cde:	4638      	mov	r0, r7
   15ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   15ce4:	463a      	mov	r2, r7
   15ce6:	4641      	mov	r1, r8
   15ce8:	2000      	movs	r0, #0
   15cea:	f00c ffe3 	bl	22cb4 <SEGGER_RTT_WriteSkipNoLock>
   15cee:	4606      	mov	r6, r0
   15cf0:	e7ef      	b.n	15cd2 <data_out_block_mode+0x2a>
	if (retry_cnt == 0) {
   15cf2:	b95c      	cbnz	r4, 15d0c <data_out_block_mode+0x64>
		host_present = false;
   15cf4:	702c      	strb	r4, [r5, #0]
   15cf6:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   15cfa:	2000      	movs	r0, #0
   15cfc:	f00d f856 	bl	22dac <SEGGER_RTT_HasDataUp>
   15d00:	2800      	cmp	r0, #0
   15d02:	d0ec      	beq.n	15cde <data_out_block_mode+0x36>
   15d04:	782b      	ldrb	r3, [r5, #0]
   15d06:	2b00      	cmp	r3, #0
   15d08:	d1f3      	bne.n	15cf2 <data_out_block_mode+0x4a>
   15d0a:	e7e8      	b.n	15cde <data_out_block_mode+0x36>
			on_failed_write(retry_cnt--);
   15d0c:	3c01      	subs	r4, #1
   15d0e:	f7ff ffbd 	bl	15c8c <on_failed_write.part.0>
   15d12:	e7f2      	b.n	15cfa <data_out_block_mode+0x52>
		} else if (host_present) {
   15d14:	782b      	ldrb	r3, [r5, #0]
   15d16:	b113      	cbz	r3, 15d1e <data_out_block_mode+0x76>
	if (retry_cnt == 0) {
   15d18:	3c01      	subs	r4, #1
   15d1a:	d104      	bne.n	15d26 <data_out_block_mode+0x7e>
		host_present = false;
   15d1c:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   15d1e:	782b      	ldrb	r3, [r5, #0]
   15d20:	2b00      	cmp	r3, #0
   15d22:	d1c9      	bne.n	15cb8 <data_out_block_mode+0x10>
   15d24:	e7db      	b.n	15cde <data_out_block_mode+0x36>
   15d26:	f7ff ffb1 	bl	15c8c <on_failed_write.part.0>
   15d2a:	e7f8      	b.n	15d1e <data_out_block_mode+0x76>
   15d2c:	20006b4a 	.word	0x20006b4a
   15d30:	20006b49 	.word	0x20006b49

00015d34 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
   15d34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
   15d36:	2407      	movs	r4, #7
   15d38:	9402      	str	r4, [sp, #8]
   15d3a:	4c04      	ldr	r4, [pc, #16]	; (15d4c <read_pnp_id+0x18>)
   15d3c:	9401      	str	r4, [sp, #4]
   15d3e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   15d42:	9400      	str	r4, [sp, #0]
   15d44:	f015 ff7c 	bl	2bc40 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
   15d48:	b004      	add	sp, #16
   15d4a:	bd10      	pop	{r4, pc}
   15d4c:	20000a50 	.word	0x20000a50

00015d50 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   15d50:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   15d52:	4c08      	ldr	r4, [pc, #32]	; (15d74 <read_blvl+0x24>)
{
   15d54:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   15d56:	7824      	ldrb	r4, [r4, #0]
   15d58:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   15d5c:	2401      	movs	r4, #1
   15d5e:	9402      	str	r4, [sp, #8]
   15d60:	f10d 0417 	add.w	r4, sp, #23
   15d64:	9401      	str	r4, [sp, #4]
   15d66:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   15d6a:	9400      	str	r4, [sp, #0]
   15d6c:	f015 ff68 	bl	2bc40 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   15d70:	b006      	add	sp, #24
   15d72:	bd10      	pop	{r4, pc}
   15d74:	20000a57 	.word	0x20000a57

00015d78 <blvl_ccc_cfg_changed>:
{
   15d78:	b580      	push	{r7, lr}
	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
   15d7a:	4a0c      	ldr	r2, [pc, #48]	; (15dac <blvl_ccc_cfg_changed+0x34>)
   15d7c:	4b0c      	ldr	r3, [pc, #48]	; (15db0 <blvl_ccc_cfg_changed+0x38>)
{
   15d7e:	af00      	add	r7, sp, #0
	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
   15d80:	b088      	sub	sp, #32
   15d82:	2901      	cmp	r1, #1
   15d84:	bf18      	it	ne
   15d86:	4613      	movne	r3, r2
   15d88:	466a      	mov	r2, sp
   15d8a:	490a      	ldr	r1, [pc, #40]	; (15db4 <blvl_ccc_cfg_changed+0x3c>)
   15d8c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   15d90:	2302      	movs	r3, #2
   15d92:	7713      	strb	r3, [r2, #28]
   15d94:	4b08      	ldr	r3, [pc, #32]	; (15db8 <blvl_ccc_cfg_changed+0x40>)
   15d96:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   15d9a:	4808      	ldr	r0, [pc, #32]	; (15dbc <blvl_ccc_cfg_changed+0x44>)
   15d9c:	2300      	movs	r3, #0
   15d9e:	f44f 51d6 	mov.w	r1, #6848	; 0x1ac0
   15da2:	f7ff fc73 	bl	1568c <z_impl_z_log_msg_static_create>
}
   15da6:	46bd      	mov	sp, r7
   15da8:	bd80      	pop	{r7, pc}
   15daa:	bf00      	nop
   15dac:	0002f89b 	.word	0x0002f89b
   15db0:	0002f893 	.word	0x0002f893
   15db4:	0002f8a4 	.word	0x0002f8a4
   15db8:	01000003 	.word	0x01000003
   15dbc:	0002e574 	.word	0x0002e574

00015dc0 <hrs_init>:

static int hrs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	hrs_blsc = 0x01;
   15dc0:	4b02      	ldr	r3, [pc, #8]	; (15dcc <hrs_init+0xc>)
   15dc2:	2201      	movs	r2, #1
   15dc4:	701a      	strb	r2, [r3, #0]

	return 0;
}
   15dc6:	2000      	movs	r0, #0
   15dc8:	4770      	bx	lr
   15dca:	bf00      	nop
   15dcc:	20006b4b 	.word	0x20006b4b

00015dd0 <read_blsc>:
{
   15dd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
   15dd2:	2401      	movs	r4, #1
   15dd4:	9402      	str	r4, [sp, #8]
   15dd6:	4c04      	ldr	r4, [pc, #16]	; (15de8 <read_blsc+0x18>)
   15dd8:	9401      	str	r4, [sp, #4]
   15dda:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   15dde:	9400      	str	r4, [sp, #0]
   15de0:	f015 ff2e 	bl	2bc40 <bt_gatt_attr_read>
}
   15de4:	b004      	add	sp, #16
   15de6:	bd10      	pop	{r4, pc}
   15de8:	20006b4b 	.word	0x20006b4b

00015dec <hrmc_ccc_cfg_changed>:
{
   15dec:	b580      	push	{r7, lr}
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
   15dee:	4a0c      	ldr	r2, [pc, #48]	; (15e20 <hrmc_ccc_cfg_changed+0x34>)
   15df0:	4b0c      	ldr	r3, [pc, #48]	; (15e24 <hrmc_ccc_cfg_changed+0x38>)
{
   15df2:	af00      	add	r7, sp, #0
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
   15df4:	b088      	sub	sp, #32
   15df6:	2901      	cmp	r1, #1
   15df8:	bf18      	it	ne
   15dfa:	4613      	movne	r3, r2
   15dfc:	466a      	mov	r2, sp
   15dfe:	490a      	ldr	r1, [pc, #40]	; (15e28 <hrmc_ccc_cfg_changed+0x3c>)
   15e00:	e9c2 1305 	strd	r1, r3, [r2, #20]
   15e04:	2302      	movs	r3, #2
   15e06:	7713      	strb	r3, [r2, #28]
   15e08:	4b08      	ldr	r3, [pc, #32]	; (15e2c <hrmc_ccc_cfg_changed+0x40>)
   15e0a:	f842 3f10 	str.w	r3, [r2, #16]!
   15e0e:	4808      	ldr	r0, [pc, #32]	; (15e30 <hrmc_ccc_cfg_changed+0x44>)
   15e10:	2300      	movs	r3, #0
   15e12:	f44f 51d6 	mov.w	r1, #6848	; 0x1ac0
   15e16:	f7ff fc39 	bl	1568c <z_impl_z_log_msg_static_create>
}
   15e1a:	46bd      	mov	sp, r7
   15e1c:	bd80      	pop	{r7, pc}
   15e1e:	bf00      	nop
   15e20:	0002f89b 	.word	0x0002f89b
   15e24:	0002f893 	.word	0x0002f893
   15e28:	0002f8bd 	.word	0x0002f8bd
   15e2c:	01000003 	.word	0x01000003
   15e30:	0002e61c 	.word	0x0002e61c

00015e34 <set_alert_level>:

static struct alerting_device devices[CONFIG_BT_MAX_CONN];
static enum bt_ias_alert_lvl curr_lvl;

static void set_alert_level(void)
{
   15e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	enum bt_ias_alert_lvl alert_level;

	alert_level = devices[0].alert_level;
   15e36:	4b12      	ldr	r3, [pc, #72]	; (15e80 <set_alert_level+0x4c>)
		if (alert_level < devices[i].alert_level) {
			alert_level = devices[i].alert_level;
		}
	}

	if (curr_lvl == alert_level) {
   15e38:	4f12      	ldr	r7, [pc, #72]	; (15e84 <set_alert_level+0x50>)
	alert_level = devices[0].alert_level;
   15e3a:	781c      	ldrb	r4, [r3, #0]
	if (curr_lvl == alert_level) {
   15e3c:	783b      	ldrb	r3, [r7, #0]
   15e3e:	42a3      	cmp	r3, r4
   15e40:	d00b      	beq.n	15e5a <set_alert_level+0x26>
		return;
	}

	if (alert_level == BT_IAS_ALERT_LVL_HIGH_ALERT) {
   15e42:	2c02      	cmp	r4, #2
   15e44:	4e10      	ldr	r6, [pc, #64]	; (15e88 <set_alert_level+0x54>)
   15e46:	d109      	bne.n	15e5c <set_alert_level+0x28>
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   15e48:	4d10      	ldr	r5, [pc, #64]	; (15e8c <set_alert_level+0x58>)
   15e4a:	e003      	b.n	15e54 <set_alert_level+0x20>
			if (cb->high_alert) {
   15e4c:	68ab      	ldr	r3, [r5, #8]
   15e4e:	b103      	cbz	r3, 15e52 <set_alert_level+0x1e>
				cb->high_alert();
   15e50:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   15e52:	350c      	adds	r5, #12
   15e54:	42b5      	cmp	r5, r6
   15e56:	d3f9      	bcc.n	15e4c <set_alert_level+0x18>
				cb->no_alert();
			}
		}
		LOG_DBG("No alert");
	}
	curr_lvl = alert_level;
   15e58:	703c      	strb	r4, [r7, #0]
}
   15e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (alert_level == BT_IAS_ALERT_LVL_MILD_ALERT) {
   15e5c:	2c01      	cmp	r4, #1
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   15e5e:	4d0b      	ldr	r5, [pc, #44]	; (15e8c <set_alert_level+0x58>)
	} else if (alert_level == BT_IAS_ALERT_LVL_MILD_ALERT) {
   15e60:	d00a      	beq.n	15e78 <set_alert_level+0x44>
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   15e62:	42b5      	cmp	r5, r6
   15e64:	d2f8      	bcs.n	15e58 <set_alert_level+0x24>
			if (cb->no_alert) {
   15e66:	682b      	ldr	r3, [r5, #0]
   15e68:	b103      	cbz	r3, 15e6c <set_alert_level+0x38>
				cb->no_alert();
   15e6a:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   15e6c:	350c      	adds	r5, #12
   15e6e:	e7f8      	b.n	15e62 <set_alert_level+0x2e>
			if (cb->mild_alert) {
   15e70:	686b      	ldr	r3, [r5, #4]
   15e72:	b103      	cbz	r3, 15e76 <set_alert_level+0x42>
				cb->mild_alert();
   15e74:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   15e76:	350c      	adds	r5, #12
   15e78:	42b5      	cmp	r5, r6
   15e7a:	d3f9      	bcc.n	15e70 <set_alert_level+0x3c>
   15e7c:	e7ec      	b.n	15e58 <set_alert_level+0x24>
   15e7e:	bf00      	nop
   15e80:	20006b4d 	.word	0x20006b4d
   15e84:	20006b4c 	.word	0x20006b4c
   15e88:	0002e574 	.word	0x0002e574
   15e8c:	0002e574 	.word	0x0002e574

00015e90 <disconnected>:

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
   15e90:	b508      	push	{r3, lr}
	devices[bt_conn_index(conn)].alert_level = BT_IAS_ALERT_LVL_NO_ALERT;
   15e92:	f004 f871 	bl	19f78 <bt_conn_index>
   15e96:	4b03      	ldr	r3, [pc, #12]	; (15ea4 <disconnected+0x14>)
   15e98:	2200      	movs	r2, #0
   15e9a:	541a      	strb	r2, [r3, r0]
	set_alert_level();
}
   15e9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	set_alert_level();
   15ea0:	f7ff bfc8 	b.w	15e34 <set_alert_level>
   15ea4:	20006b4d 	.word	0x20006b4d

00015ea8 <bt_ias_write_alert_lvl>:
	return 0;
}

static ssize_t bt_ias_write_alert_lvl(struct bt_conn *conn, const struct bt_gatt_attr *attr,
				      const void *buf, uint16_t len, uint16_t offset, uint8_t flags)
{
   15ea8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   15eaa:	461c      	mov	r4, r3
   15eac:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   15eb0:	4606      	mov	r6, r0
   15eb2:	4611      	mov	r1, r2
	struct net_buf_simple data;
	enum bt_ias_alert_lvl alert_val;

	if (offset > 0) {
   15eb4:	b9ab      	cbnz	r3, 15ee2 <bt_ias_write_alert_lvl+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (len != BT_IAS_ALERT_LVL_LEN) {
   15eb6:	2c01      	cmp	r4, #1
   15eb8:	d116      	bne.n	15ee8 <bt_ias_write_alert_lvl+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	net_buf_simple_init_with_data(&data, (void *)buf, len);
   15eba:	4622      	mov	r2, r4
   15ebc:	a801      	add	r0, sp, #4
   15ebe:	f016 fc8b 	bl	2c7d8 <net_buf_simple_init_with_data>
	alert_val = net_buf_simple_pull_u8(&data);
   15ec2:	a801      	add	r0, sp, #4
   15ec4:	f016 fd3d 	bl	2c942 <net_buf_simple_pull_u8>
   15ec8:	4605      	mov	r5, r0
	devices[bt_conn_index(conn)].alert_level = alert_val;
   15eca:	4630      	mov	r0, r6
   15ecc:	f004 f854 	bl	19f78 <bt_conn_index>
   15ed0:	4b08      	ldr	r3, [pc, #32]	; (15ef4 <bt_ias_write_alert_lvl+0x4c>)

	if (alert_val < BT_IAS_ALERT_LVL_NO_ALERT || alert_val > BT_IAS_ALERT_LVL_HIGH_ALERT) {
   15ed2:	2d02      	cmp	r5, #2
	devices[bt_conn_index(conn)].alert_level = alert_val;
   15ed4:	541d      	strb	r5, [r3, r0]
	if (alert_val < BT_IAS_ALERT_LVL_NO_ALERT || alert_val > BT_IAS_ALERT_LVL_HIGH_ALERT) {
   15ed6:	d80a      	bhi.n	15eee <bt_ias_write_alert_lvl+0x46>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
	}
	set_alert_level();
   15ed8:	f7ff ffac 	bl	15e34 <set_alert_level>

	return len;
   15edc:	4620      	mov	r0, r4
}
   15ede:	b004      	add	sp, #16
   15ee0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   15ee2:	f06f 0006 	mvn.w	r0, #6
   15ee6:	e7fa      	b.n	15ede <bt_ias_write_alert_lvl+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   15ee8:	f06f 000c 	mvn.w	r0, #12
   15eec:	e7f7      	b.n	15ede <bt_ias_write_alert_lvl+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   15eee:	f06f 0012 	mvn.w	r0, #18
   15ef2:	e7f4      	b.n	15ede <bt_ias_write_alert_lvl+0x36>
   15ef4:	20006b4d 	.word	0x20006b4d

00015ef8 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   15ef8:	4b10      	ldr	r3, [pc, #64]	; (15f3c <settings_save_one+0x44>)
{
   15efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   15efe:	681c      	ldr	r4, [r3, #0]
{
   15f00:	4605      	mov	r5, r0
   15f02:	460e      	mov	r6, r1
   15f04:	4617      	mov	r7, r2
	if (!cs) {
   15f06:	b1ac      	cbz	r4, 15f34 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   15f08:	f04f 32ff 	mov.w	r2, #4294967295
   15f0c:	f04f 33ff 	mov.w	r3, #4294967295
   15f10:	480b      	ldr	r0, [pc, #44]	; (15f40 <settings_save_one+0x48>)
   15f12:	f00d fa07 	bl	23324 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   15f16:	6863      	ldr	r3, [r4, #4]
   15f18:	4632      	mov	r2, r6
   15f1a:	f8d3 8008 	ldr.w	r8, [r3, #8]
   15f1e:	4629      	mov	r1, r5
   15f20:	463b      	mov	r3, r7
   15f22:	4620      	mov	r0, r4
   15f24:	47c0      	blx	r8
   15f26:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   15f28:	4805      	ldr	r0, [pc, #20]	; (15f40 <settings_save_one+0x48>)
   15f2a:	f00d fa73 	bl	23414 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   15f2e:	4620      	mov	r0, r4
   15f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   15f34:	f06f 0401 	mvn.w	r4, #1
   15f38:	e7f9      	b.n	15f2e <settings_save_one+0x36>
   15f3a:	bf00      	nop
   15f3c:	200055f8 	.word	0x200055f8
   15f40:	20000b78 	.word	0x20000b78

00015f44 <settings_load_subtree_direct>:
{
   15f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   15f46:	e9cd 0101 	strd	r0, r1, [sp, #4]
   15f4a:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   15f4c:	f04f 33ff 	mov.w	r3, #4294967295
   15f50:	480a      	ldr	r0, [pc, #40]	; (15f7c <settings_load_subtree_direct+0x38>)
   15f52:	f04f 32ff 	mov.w	r2, #4294967295
   15f56:	f00d f9e5 	bl	23324 <z_impl_k_mutex_lock>
	return list->head;
   15f5a:	4b09      	ldr	r3, [pc, #36]	; (15f80 <settings_load_subtree_direct+0x3c>)
   15f5c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   15f5e:	b134      	cbz	r4, 15f6e <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
   15f60:	6863      	ldr	r3, [r4, #4]
   15f62:	4620      	mov	r0, r4
   15f64:	681b      	ldr	r3, [r3, #0]
   15f66:	a901      	add	r1, sp, #4
   15f68:	4798      	blx	r3
	return node->next;
   15f6a:	6824      	ldr	r4, [r4, #0]
   15f6c:	e7f7      	b.n	15f5e <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
   15f6e:	4803      	ldr	r0, [pc, #12]	; (15f7c <settings_load_subtree_direct+0x38>)
   15f70:	f00d fa50 	bl	23414 <z_impl_k_mutex_unlock>
}
   15f74:	2000      	movs	r0, #0
   15f76:	b004      	add	sp, #16
   15f78:	bd10      	pop	{r4, pc}
   15f7a:	bf00      	nop
   15f7c:	20000b78 	.word	0x20000b78
   15f80:	200055f0 	.word	0x200055f0

00015f84 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   15f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15f88:	4605      	mov	r5, r0
	__asm__ volatile(
   15f8a:	f04f 0340 	mov.w	r3, #64	; 0x40
   15f8e:	f3ef 8611 	mrs	r6, BASEPRI
   15f92:	f383 8812 	msr	BASEPRI_MAX, r3
   15f96:	f3bf 8f6f 	isb	sy
	return list->head;
   15f9a:	4b0e      	ldr	r3, [pc, #56]	; (15fd4 <pm_state_notify+0x50>)
   15f9c:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   15f9e:	b19c      	cbz	r4, 15fc8 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   15fa0:	4f0d      	ldr	r7, [pc, #52]	; (15fd8 <pm_state_notify+0x54>)
   15fa2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 15fdc <pm_state_notify+0x58>
   15fa6:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   15faa:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   15fae:	2d00      	cmp	r5, #0
   15fb0:	bf08      	it	eq
   15fb2:	4613      	moveq	r3, r2
		if (callback) {
   15fb4:	b12b      	cbz	r3, 15fc2 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   15fb6:	f898 2014 	ldrb.w	r2, [r8, #20]
   15fba:	fb09 f202 	mul.w	r2, r9, r2
   15fbe:	5cb8      	ldrb	r0, [r7, r2]
   15fc0:	4798      	blx	r3
	return node->next;
   15fc2:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   15fc4:	2c00      	cmp	r4, #0
   15fc6:	d1f0      	bne.n	15faa <pm_state_notify+0x26>
	__asm__ volatile(
   15fc8:	f386 8811 	msr	BASEPRI, r6
   15fcc:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   15fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15fd4:	200055fc 	.word	0x200055fc
   15fd8:	20005610 	.word	0x20005610
   15fdc:	20005ff8 	.word	0x20005ff8

00015fe0 <pm_system_resume>:

void pm_system_resume(void)
{
   15fe0:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = CURRENT_CPU;
   15fe2:	4b1a      	ldr	r3, [pc, #104]	; (1604c <pm_system_resume+0x6c>)
   15fe4:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15fe6:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   15fea:	f004 031f 	and.w	r3, r4, #31
   15fee:	2201      	movs	r2, #1
   15ff0:	409a      	lsls	r2, r3
   15ff2:	4b17      	ldr	r3, [pc, #92]	; (16050 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15ff4:	0961      	lsrs	r1, r4, #5
   15ff6:	43d0      	mvns	r0, r2
   15ff8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   15ffc:	e853 1f00 	ldrex	r1, [r3]
   16000:	ea01 0500 	and.w	r5, r1, r0
   16004:	e843 5c00 	strex	ip, r5, [r3]
   16008:	f1bc 0f00 	cmp.w	ip, #0
   1600c:	d1f6      	bne.n	15ffc <pm_system_resume+0x1c>
   1600e:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   16012:	4211      	tst	r1, r2
   16014:	d013      	beq.n	1603e <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
   16016:	4b0f      	ldr	r3, [pc, #60]	; (16054 <pm_system_resume+0x74>)
   16018:	4d0f      	ldr	r5, [pc, #60]	; (16058 <pm_system_resume+0x78>)
   1601a:	b18b      	cbz	r3, 16040 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
   1601c:	230c      	movs	r3, #12
   1601e:	4363      	muls	r3, r4
   16020:	18ea      	adds	r2, r5, r3
   16022:	5ce8      	ldrb	r0, [r5, r3]
   16024:	7851      	ldrb	r1, [r2, #1]
   16026:	f014 fa94 	bl	2a552 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   1602a:	2000      	movs	r0, #0
   1602c:	f7ff ffaa 	bl	15f84 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   16030:	230c      	movs	r3, #12
   16032:	435c      	muls	r4, r3
   16034:	192a      	adds	r2, r5, r4
   16036:	2300      	movs	r3, #0
   16038:	512b      	str	r3, [r5, r4]
   1603a:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   1603e:	bd38      	pop	{r3, r4, r5, pc}
   16040:	f383 8811 	msr	BASEPRI, r3
   16044:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   16048:	e7ef      	b.n	1602a <pm_system_resume+0x4a>
   1604a:	bf00      	nop
   1604c:	20005ff8 	.word	0x20005ff8
   16050:	2000561c 	.word	0x2000561c
   16054:	0002a553 	.word	0x0002a553
   16058:	20005610 	.word	0x20005610

0001605c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   1605c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   16060:	4b33      	ldr	r3, [pc, #204]	; (16130 <pm_system_suspend+0xd4>)
{
   16062:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   16064:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   16066:	f04f 0340 	mov.w	r3, #64	; 0x40
   1606a:	f3ef 8811 	mrs	r8, BASEPRI
   1606e:	f383 8812 	msr	BASEPRI_MAX, r3
   16072:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   16076:	240c      	movs	r4, #12
   16078:	4b2e      	ldr	r3, [pc, #184]	; (16134 <pm_system_suspend+0xd8>)
   1607a:	4e2f      	ldr	r6, [pc, #188]	; (16138 <pm_system_suspend+0xdc>)
   1607c:	436c      	muls	r4, r5
   1607e:	191a      	adds	r2, r3, r4
   16080:	5d19      	ldrb	r1, [r3, r4]
   16082:	2900      	cmp	r1, #0
   16084:	d049      	beq.n	1611a <pm_system_suspend+0xbe>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   16086:	ca07      	ldmia	r2, {r0, r1, r2}
   16088:	eb06 0c04 	add.w	ip, r6, r4
   1608c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   16090:	2200      	movs	r2, #0
   16092:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   16094:	f388 8811 	msr	BASEPRI, r8
   16098:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   1609c:	230c      	movs	r3, #12
   1609e:	436b      	muls	r3, r5
   160a0:	18f2      	adds	r2, r6, r3
   160a2:	5cf0      	ldrb	r0, [r6, r3]
   160a4:	b3b8      	cbz	r0, 16116 <pm_system_suspend+0xba>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   160a6:	1c7b      	adds	r3, r7, #1
   160a8:	d00f      	beq.n	160ca <pm_system_suspend+0x6e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   160aa:	f8d2 c008 	ldr.w	ip, [r2, #8]
   160ae:	4823      	ldr	r0, [pc, #140]	; (1613c <pm_system_suspend+0xe0>)
   160b0:	4a23      	ldr	r2, [pc, #140]	; (16140 <pm_system_suspend+0xe4>)
   160b2:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   160b6:	2100      	movs	r1, #0
   160b8:	2300      	movs	r3, #0
   160ba:	fbec 0104 	umlal	r0, r1, ip, r4
   160be:	f7eb f857 	bl	1170 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   160c2:	2101      	movs	r1, #1
   160c4:	1a38      	subs	r0, r7, r0
   160c6:	f017 fcad 	bl	2da24 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   160ca:	f00d fc9b 	bl	23a04 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   160ce:	2001      	movs	r0, #1
   160d0:	f7ff ff58 	bl	15f84 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   160d4:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   160d8:	f005 021f 	and.w	r2, r5, #31
   160dc:	2101      	movs	r1, #1
   160de:	4091      	lsls	r1, r2
   160e0:	4a18      	ldr	r2, [pc, #96]	; (16144 <pm_system_suspend+0xe8>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   160e2:	096b      	lsrs	r3, r5, #5
   160e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   160e8:	e853 2f00 	ldrex	r2, [r3]
   160ec:	430a      	orrs	r2, r1
   160ee:	e843 2000 	strex	r0, r2, [r3]
   160f2:	2800      	cmp	r0, #0
   160f4:	d1f8      	bne.n	160e8 <pm_system_suspend+0x8c>
   160f6:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   160fa:	4b13      	ldr	r3, [pc, #76]	; (16148 <pm_system_suspend+0xec>)
   160fc:	b133      	cbz	r3, 1610c <pm_system_suspend+0xb0>
		pm_state_set(info->state, info->substate_id);
   160fe:	200c      	movs	r0, #12
   16100:	4368      	muls	r0, r5
   16102:	1833      	adds	r3, r6, r0
   16104:	5c30      	ldrb	r0, [r6, r0]
   16106:	7859      	ldrb	r1, [r3, #1]
   16108:	f014 fa17 	bl	2a53a <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   1610c:	f7ff ff68 	bl	15fe0 <pm_system_resume>
	k_sched_unlock();
   16110:	f00d fe48 	bl	23da4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   16114:	2001      	movs	r0, #1
}
   16116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   1611a:	4601      	mov	r1, r0
   1611c:	4628      	mov	r0, r5
   1611e:	f000 f815 	bl	1614c <pm_policy_next_state>
		if (info != NULL) {
   16122:	2800      	cmp	r0, #0
   16124:	d0b6      	beq.n	16094 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   16126:	c807      	ldmia	r0, {r0, r1, r2}
   16128:	4434      	add	r4, r6
   1612a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   1612e:	e7b1      	b.n	16094 <pm_system_suspend+0x38>
   16130:	20005ff8 	.word	0x20005ff8
   16134:	20005604 	.word	0x20005604
   16138:	20005610 	.word	0x20005610
   1613c:	000f423f 	.word	0x000f423f
   16140:	000f4240 	.word	0x000f4240
   16144:	2000561c 	.word	0x2000561c
   16148:	0002a53b 	.word	0x0002a53b

0001614c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   1614c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16150:	b085      	sub	sp, #20
   16152:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   16154:	a903      	add	r1, sp, #12
   16156:	f000 f841 	bl	161dc <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
		const struct pm_state_info *state = &cpu_states[i];
   1615a:	9b03      	ldr	r3, [sp, #12]
   1615c:	9301      	str	r3, [sp, #4]

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1615e:	4b1c      	ldr	r3, [pc, #112]	; (161d0 <pm_policy_next_state+0x84>)
   16160:	f8df 8070 	ldr.w	r8, [pc, #112]	; 161d4 <pm_policy_next_state+0x88>
   16164:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   16168:	1e44      	subs	r4, r0, #1
   1616a:	b224      	sxth	r4, r4
   1616c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   16170:	f04f 0b00 	mov.w	fp, #0
   16174:	1c63      	adds	r3, r4, #1
   16176:	d104      	bne.n	16182 <pm_policy_next_state+0x36>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   16178:	2500      	movs	r5, #0
}
   1617a:	4628      	mov	r0, r5
   1617c:	b005      	add	sp, #20
   1617e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   16182:	9b01      	ldr	r3, [sp, #4]
   16184:	4a14      	ldr	r2, [pc, #80]	; (161d8 <pm_policy_next_state+0x8c>)
   16186:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   1618a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1618e:	46c4      	mov	ip, r8
   16190:	6868      	ldr	r0, [r5, #4]
   16192:	4659      	mov	r1, fp
   16194:	fbe0 c107 	umlal	ip, r1, r0, r7
   16198:	2300      	movs	r3, #0
   1619a:	4660      	mov	r0, ip
   1619c:	f7ea ffe8 	bl	1170 <__aeabi_uldivmod>
   161a0:	4681      	mov	r9, r0
   161a2:	68a8      	ldr	r0, [r5, #8]
   161a4:	4a0c      	ldr	r2, [pc, #48]	; (161d8 <pm_policy_next_state+0x8c>)
   161a6:	46c4      	mov	ip, r8
   161a8:	4659      	mov	r1, fp
   161aa:	fbe0 c107 	umlal	ip, r1, r0, r7
   161ae:	2300      	movs	r3, #0
   161b0:	4660      	mov	r0, ip
   161b2:	f7ea ffdd 	bl	1170 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   161b6:	f1ba 3fff 	cmp.w	sl, #4294967295
   161ba:	d001      	beq.n	161c0 <pm_policy_next_state+0x74>
   161bc:	4582      	cmp	sl, r0
   161be:	d904      	bls.n	161ca <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   161c0:	1c72      	adds	r2, r6, #1
   161c2:	d0da      	beq.n	1617a <pm_policy_next_state+0x2e>
		    (ticks >= (min_residency + exit_latency))) {
   161c4:	4448      	add	r0, r9
		if ((ticks == K_TICKS_FOREVER) ||
   161c6:	42b0      	cmp	r0, r6
   161c8:	d9d7      	bls.n	1617a <pm_policy_next_state+0x2e>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   161ca:	3c01      	subs	r4, #1
   161cc:	b224      	sxth	r4, r4
   161ce:	e7d1      	b.n	16174 <pm_policy_next_state+0x28>
   161d0:	2000069c 	.word	0x2000069c
   161d4:	000f423f 	.word	0x000f423f
   161d8:	000f4240 	.word	0x000f4240

000161dc <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   161dc:	b908      	cbnz	r0, 161e2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   161de:	4b02      	ldr	r3, [pc, #8]	; (161e8 <pm_state_cpu_get_all+0xc>)
   161e0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   161e2:	2000      	movs	r0, #0
   161e4:	4770      	bx	lr
   161e6:	bf00      	nop
   161e8:	0002ed4c 	.word	0x0002ed4c

000161ec <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   161ec:	4904      	ldr	r1, [pc, #16]	; (16200 <sub_bytes+0x14>)
   161ee:	1e43      	subs	r3, r0, #1
   161f0:	300f      	adds	r0, #15
   161f2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   161f6:	5c8a      	ldrb	r2, [r1, r2]
   161f8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   161fa:	4283      	cmp	r3, r0
   161fc:	d1f9      	bne.n	161f2 <sub_bytes+0x6>
	}
}
   161fe:	4770      	bx	lr
   16200:	0002f8e4 	.word	0x0002f8e4

00016204 <tc_aes128_set_encrypt_key>:
{
   16204:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   16206:	4e26      	ldr	r6, [pc, #152]	; (162a0 <tc_aes128_set_encrypt_key+0x9c>)
{
   16208:	4607      	mov	r7, r0
   1620a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   1620c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   1620e:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   16210:	ad01      	add	r5, sp, #4
   16212:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   16214:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   16216:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   16218:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1621c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   16220:	4638      	mov	r0, r7
   16222:	2f00      	cmp	r7, #0
   16224:	d038      	beq.n	16298 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   16226:	2c00      	cmp	r4, #0
   16228:	d038      	beq.n	1629c <tc_aes128_set_encrypt_key+0x98>
   1622a:	1f38      	subs	r0, r7, #4
   1622c:	4621      	mov	r1, r4
   1622e:	4602      	mov	r2, r0
   16230:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   16232:	784b      	ldrb	r3, [r1, #1]
   16234:	780d      	ldrb	r5, [r1, #0]
   16236:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   16238:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   1623c:	78cd      	ldrb	r5, [r1, #3]
   1623e:	432b      	orrs	r3, r5
   16240:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   16242:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   16244:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   16248:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1624a:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   1624e:	d1f0      	bne.n	16232 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   16250:	4c14      	ldr	r4, [pc, #80]	; (162a4 <tc_aes128_set_encrypt_key+0xa0>)
   16252:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   16254:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   16256:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   16258:	d116      	bne.n	16288 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1625a:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1625e:	5ca5      	ldrb	r5, [r4, r2]
   16260:	0e1a      	lsrs	r2, r3, #24
   16262:	5ca2      	ldrb	r2, [r4, r2]
   16264:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   16268:	f3c3 2507 	ubfx	r5, r3, #8, #8
   1626c:	b2db      	uxtb	r3, r3
   1626e:	5d65      	ldrb	r5, [r4, r5]
   16270:	5ce3      	ldrb	r3, [r4, r3]
   16272:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   16276:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1627a:	ad0c      	add	r5, sp, #48	; 0x30
   1627c:	f021 0303 	bic.w	r3, r1, #3
   16280:	442b      	add	r3, r5
   16282:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   16286:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   16288:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   1628c:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   1628e:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   16290:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   16292:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   16294:	d1de      	bne.n	16254 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   16296:	2001      	movs	r0, #1
}
   16298:	b00d      	add	sp, #52	; 0x34
   1629a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1629c:	4620      	mov	r0, r4
   1629e:	e7fb      	b.n	16298 <tc_aes128_set_encrypt_key+0x94>
   162a0:	0002e954 	.word	0x0002e954
   162a4:	0002f8e4 	.word	0x0002f8e4

000162a8 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   162a8:	4801      	ldr	r0, [pc, #4]	; (162b0 <nrf_cc3xx_platform_abort_init+0x8>)
   162aa:	f00f bcbd 	b.w	25c28 <nrf_cc3xx_platform_set_abort>
   162ae:	bf00      	nop
   162b0:	0002ed4c 	.word	0x0002ed4c

000162b4 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   162b4:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   162b6:	4604      	mov	r4, r0
   162b8:	b918      	cbnz	r0, 162c2 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   162ba:	4b0d      	ldr	r3, [pc, #52]	; (162f0 <mutex_free_platform+0x3c>)
   162bc:	480d      	ldr	r0, [pc, #52]	; (162f4 <mutex_free_platform+0x40>)
   162be:	685b      	ldr	r3, [r3, #4]
   162c0:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   162c2:	6861      	ldr	r1, [r4, #4]
   162c4:	2908      	cmp	r1, #8
   162c6:	d00d      	beq.n	162e4 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   162c8:	f031 0304 	bics.w	r3, r1, #4
   162cc:	d00a      	beq.n	162e4 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   162ce:	f011 0102 	ands.w	r1, r1, #2
   162d2:	d008      	beq.n	162e6 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   162d4:	4808      	ldr	r0, [pc, #32]	; (162f8 <mutex_free_platform+0x44>)
   162d6:	4621      	mov	r1, r4
   162d8:	f017 f842 	bl	2d360 <k_mem_slab_free>
        mutex->mutex = NULL;
   162dc:	2300      	movs	r3, #0
   162de:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   162e0:	2300      	movs	r3, #0
   162e2:	6063      	str	r3, [r4, #4]
}
   162e4:	bd10      	pop	{r4, pc}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   162e6:	6820      	ldr	r0, [r4, #0]
   162e8:	2214      	movs	r2, #20
   162ea:	f017 fd96 	bl	2de1a <memset>
   162ee:	e7f7      	b.n	162e0 <mutex_free_platform+0x2c>
   162f0:	200008e4 	.word	0x200008e4
   162f4:	0002f9e4 	.word	0x0002f9e4
   162f8:	20005620 	.word	0x20005620

000162fc <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   162fc:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   162fe:	b308      	cbz	r0, 16344 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   16300:	6843      	ldr	r3, [r0, #4]
   16302:	2b04      	cmp	r3, #4
   16304:	d110      	bne.n	16328 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   16306:	2201      	movs	r2, #1
   16308:	6803      	ldr	r3, [r0, #0]
   1630a:	f3bf 8f5b 	dmb	ish
   1630e:	e853 1f00 	ldrex	r1, [r3]
   16312:	2900      	cmp	r1, #0
   16314:	d103      	bne.n	1631e <mutex_lock_platform+0x22>
   16316:	e843 2000 	strex	r0, r2, [r3]
   1631a:	2800      	cmp	r0, #0
   1631c:	d1f7      	bne.n	1630e <mutex_lock_platform+0x12>
   1631e:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   16322:	d10b      	bne.n	1633c <mutex_lock_platform+0x40>
   16324:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   16326:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   16328:	b153      	cbz	r3, 16340 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   1632a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   1632c:	f04f 32ff 	mov.w	r2, #4294967295
   16330:	f04f 33ff 	mov.w	r3, #4294967295
   16334:	f00c fff6 	bl	23324 <z_impl_k_mutex_lock>
        if (ret == 0) {
   16338:	2800      	cmp	r0, #0
   1633a:	d0f3      	beq.n	16324 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1633c:	4803      	ldr	r0, [pc, #12]	; (1634c <mutex_lock_platform+0x50>)
   1633e:	e7f2      	b.n	16326 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   16340:	4803      	ldr	r0, [pc, #12]	; (16350 <mutex_lock_platform+0x54>)
   16342:	e7f0      	b.n	16326 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   16344:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   16348:	e7ed      	b.n	16326 <mutex_lock_platform+0x2a>
   1634a:	bf00      	nop
   1634c:	ffff8fe9 	.word	0xffff8fe9
   16350:	ffff8fea 	.word	0xffff8fea

00016354 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   16354:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   16356:	b1d0      	cbz	r0, 1638e <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   16358:	6843      	ldr	r3, [r0, #4]
   1635a:	2b04      	cmp	r3, #4
   1635c:	d111      	bne.n	16382 <mutex_unlock_platform+0x2e>
   1635e:	2200      	movs	r2, #0
   16360:	6803      	ldr	r3, [r0, #0]
   16362:	f3bf 8f5b 	dmb	ish
   16366:	e853 1f00 	ldrex	r1, [r3]
   1636a:	2901      	cmp	r1, #1
   1636c:	d103      	bne.n	16376 <mutex_unlock_platform+0x22>
   1636e:	e843 2000 	strex	r0, r2, [r3]
   16372:	2800      	cmp	r0, #0
   16374:	d1f7      	bne.n	16366 <mutex_unlock_platform+0x12>
   16376:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1637a:	4807      	ldr	r0, [pc, #28]	; (16398 <mutex_unlock_platform+0x44>)
   1637c:	bf08      	it	eq
   1637e:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   16380:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   16382:	b13b      	cbz	r3, 16394 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   16384:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   16386:	f00d f845 	bl	23414 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   1638a:	2000      	movs	r0, #0
   1638c:	e7f8      	b.n	16380 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1638e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   16392:	e7f5      	b.n	16380 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   16394:	4801      	ldr	r0, [pc, #4]	; (1639c <mutex_unlock_platform+0x48>)
   16396:	e7f3      	b.n	16380 <mutex_unlock_platform+0x2c>
   16398:	ffff8fe9 	.word	0xffff8fe9
   1639c:	ffff8fea 	.word	0xffff8fea

000163a0 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   163a0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   163a2:	4604      	mov	r4, r0
   163a4:	b918      	cbnz	r0, 163ae <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   163a6:	4b16      	ldr	r3, [pc, #88]	; (16400 <mutex_init_platform+0x60>)
   163a8:	4816      	ldr	r0, [pc, #88]	; (16404 <mutex_init_platform+0x64>)
   163aa:	685b      	ldr	r3, [r3, #4]
   163ac:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   163ae:	6863      	ldr	r3, [r4, #4]
   163b0:	2b04      	cmp	r3, #4
   163b2:	d023      	beq.n	163fc <mutex_init_platform+0x5c>
   163b4:	2b08      	cmp	r3, #8
   163b6:	d021      	beq.n	163fc <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   163b8:	b9cb      	cbnz	r3, 163ee <mutex_init_platform+0x4e>
   163ba:	6823      	ldr	r3, [r4, #0]
   163bc:	b9bb      	cbnz	r3, 163ee <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   163be:	4812      	ldr	r0, [pc, #72]	; (16408 <mutex_init_platform+0x68>)
   163c0:	f04f 32ff 	mov.w	r2, #4294967295
   163c4:	f04f 33ff 	mov.w	r3, #4294967295
   163c8:	4621      	mov	r1, r4
   163ca:	f00c fea9 	bl	23120 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   163ce:	b908      	cbnz	r0, 163d4 <mutex_init_platform+0x34>
   163d0:	6823      	ldr	r3, [r4, #0]
   163d2:	b91b      	cbnz	r3, 163dc <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   163d4:	4b0a      	ldr	r3, [pc, #40]	; (16400 <mutex_init_platform+0x60>)
   163d6:	480d      	ldr	r0, [pc, #52]	; (1640c <mutex_init_platform+0x6c>)
   163d8:	685b      	ldr	r3, [r3, #4]
   163da:	4798      	blx	r3
   163dc:	6820      	ldr	r0, [r4, #0]
   163de:	2214      	movs	r2, #20
   163e0:	2100      	movs	r1, #0
   163e2:	f017 fd1a 	bl	2de1a <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   163e6:	6863      	ldr	r3, [r4, #4]
   163e8:	f043 0302 	orr.w	r3, r3, #2
   163ec:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   163ee:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   163f0:	f016 fffb 	bl	2d3ea <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   163f4:	6863      	ldr	r3, [r4, #4]
   163f6:	f043 0301 	orr.w	r3, r3, #1
   163fa:	6063      	str	r3, [r4, #4]
}
   163fc:	bd10      	pop	{r4, pc}
   163fe:	bf00      	nop
   16400:	200008e4 	.word	0x200008e4
   16404:	0002f9e4 	.word	0x0002f9e4
   16408:	20005620 	.word	0x20005620
   1640c:	0002fa0a 	.word	0x0002fa0a

00016410 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   16410:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   16412:	4906      	ldr	r1, [pc, #24]	; (1642c <nrf_cc3xx_platform_mutex_init+0x1c>)
   16414:	4806      	ldr	r0, [pc, #24]	; (16430 <nrf_cc3xx_platform_mutex_init+0x20>)
   16416:	2340      	movs	r3, #64	; 0x40
   16418:	2214      	movs	r2, #20
   1641a:	f016 ff86 	bl	2d32a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   1641e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   16422:	4904      	ldr	r1, [pc, #16]	; (16434 <nrf_cc3xx_platform_mutex_init+0x24>)
   16424:	4804      	ldr	r0, [pc, #16]	; (16438 <nrf_cc3xx_platform_mutex_init+0x28>)
   16426:	f00f bcb3 	b.w	25d90 <nrf_cc3xx_platform_set_mutexes>
   1642a:	bf00      	nop
   1642c:	2000563c 	.word	0x2000563c
   16430:	20005620 	.word	0x20005620
   16434:	0002ed64 	.word	0x0002ed64
   16438:	0002ed54 	.word	0x0002ed54

0001643c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1643c:	4901      	ldr	r1, [pc, #4]	; (16444 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1643e:	2210      	movs	r2, #16
	str	r2, [r1]
   16440:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   16442:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   16444:	e000ed10 	.word	0xe000ed10

00016448 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   16448:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1644a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1644c:	f380 8811 	msr	BASEPRI, r0
	isb
   16450:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   16454:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   16458:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1645a:	b662      	cpsie	i
	isb
   1645c:	f3bf 8f6f 	isb	sy

	bx	lr
   16460:	4770      	bx	lr
   16462:	bf00      	nop

00016464 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   16464:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   16466:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   16468:	f381 8811 	msr	BASEPRI, r1

	wfe
   1646c:	bf20      	wfe

	msr	BASEPRI, r0
   1646e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   16472:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   16474:	4770      	bx	lr
   16476:	bf00      	nop

00016478 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   16478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1647c:	4681      	mov	r9, r0
   1647e:	af00      	add	r7, sp, #0

	if (esf != NULL) {
   16480:	460c      	mov	r4, r1
   16482:	2900      	cmp	r1, #0
   16484:	d04c      	beq.n	16520 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   16486:	466e      	mov	r6, sp
   16488:	b08a      	sub	sp, #40	; 0x28
   1648a:	e9d1 1200 	ldrd	r1, r2, [r1]
   1648e:	68a3      	ldr	r3, [r4, #8]
   16490:	466d      	mov	r5, sp
   16492:	4827      	ldr	r0, [pc, #156]	; (16530 <z_arm_fatal_error+0xb8>)
   16494:	46a8      	mov	r8, r5
   16496:	f04f 0a05 	mov.w	sl, #5
   1649a:	e9c5 0105 	strd	r0, r1, [r5, #20]
   1649e:	e9c5 2307 	strd	r2, r3, [r5, #28]
   164a2:	f848 af10 	str.w	sl, [r8, #16]!
   164a6:	4823      	ldr	r0, [pc, #140]	; (16534 <z_arm_fatal_error+0xbc>)
   164a8:	4642      	mov	r2, r8
   164aa:	2300      	movs	r3, #0
   164ac:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   164b0:	f7ff f8ec 	bl	1568c <z_impl_z_log_msg_static_create>
   164b4:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   164b6:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   164ba:	6963      	ldr	r3, [r4, #20]
   164bc:	46ad      	mov	sp, r5
   164be:	481e      	ldr	r0, [pc, #120]	; (16538 <z_arm_fatal_error+0xc0>)
   164c0:	f8c5 a010 	str.w	sl, [r5, #16]
   164c4:	e9c5 0105 	strd	r0, r1, [r5, #20]
   164c8:	e9c5 2307 	strd	r2, r3, [r5, #28]
   164cc:	4819      	ldr	r0, [pc, #100]	; (16534 <z_arm_fatal_error+0xbc>)
   164ce:	2300      	movs	r3, #0
   164d0:	4642      	mov	r2, r8
   164d2:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   164d6:	f7ff f8d9 	bl	1568c <z_impl_z_log_msg_static_create>
   164da:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   164dc:	b088      	sub	sp, #32
   164de:	69e3      	ldr	r3, [r4, #28]
   164e0:	466d      	mov	r5, sp
   164e2:	4a16      	ldr	r2, [pc, #88]	; (1653c <z_arm_fatal_error+0xc4>)
   164e4:	46a8      	mov	r8, r5
   164e6:	f04f 0a03 	mov.w	sl, #3
   164ea:	e9c5 2305 	strd	r2, r3, [r5, #20]
   164ee:	f848 af10 	str.w	sl, [r8, #16]!
   164f2:	4810      	ldr	r0, [pc, #64]	; (16534 <z_arm_fatal_error+0xbc>)
   164f4:	2300      	movs	r3, #0
   164f6:	4642      	mov	r2, r8
   164f8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   164fc:	f7ff f8c6 	bl	1568c <z_impl_z_log_msg_static_create>
   16500:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   16502:	69a3      	ldr	r3, [r4, #24]
   16504:	46ad      	mov	sp, r5
   16506:	4a0e      	ldr	r2, [pc, #56]	; (16540 <z_arm_fatal_error+0xc8>)
   16508:	f8c5 a010 	str.w	sl, [r5, #16]
   1650c:	e9c5 2305 	strd	r2, r3, [r5, #20]
   16510:	4808      	ldr	r0, [pc, #32]	; (16534 <z_arm_fatal_error+0xbc>)
   16512:	2300      	movs	r3, #0
   16514:	4642      	mov	r2, r8
   16516:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1651a:	f7ff f8b7 	bl	1568c <z_impl_z_log_msg_static_create>
   1651e:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   16520:	4621      	mov	r1, r4
   16522:	4648      	mov	r0, r9
   16524:	f00c fc82 	bl	22e2c <z_fatal_error>
}
   16528:	46bd      	mov	sp, r7
   1652a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1652e:	bf00      	nop
   16530:	0002fa37 	.word	0x0002fa37
   16534:	0002e654 	.word	0x0002e654
   16538:	0002fa66 	.word	0x0002fa66
   1653c:	0002fa95 	.word	0x0002fa95
   16540:	0002faa4 	.word	0x0002faa4

00016544 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   16544:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   16546:	2b00      	cmp	r3, #0
   16548:	db08      	blt.n	1655c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1654a:	2201      	movs	r2, #1
   1654c:	f000 001f 	and.w	r0, r0, #31
   16550:	fa02 f000 	lsl.w	r0, r2, r0
   16554:	095b      	lsrs	r3, r3, #5
   16556:	4a02      	ldr	r2, [pc, #8]	; (16560 <arch_irq_enable+0x1c>)
   16558:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   1655c:	4770      	bx	lr
   1655e:	bf00      	nop
   16560:	e000e100 	.word	0xe000e100

00016564 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   16564:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   16566:	2b00      	cmp	r3, #0
   16568:	db0d      	blt.n	16586 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1656a:	2201      	movs	r2, #1
   1656c:	095b      	lsrs	r3, r3, #5
   1656e:	f000 001f 	and.w	r0, r0, #31
   16572:	fa02 f000 	lsl.w	r0, r2, r0
   16576:	3320      	adds	r3, #32
   16578:	4a03      	ldr	r2, [pc, #12]	; (16588 <arch_irq_disable+0x24>)
   1657a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1657e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16582:	f3bf 8f6f 	isb	sy
}
   16586:	4770      	bx	lr
   16588:	e000e100 	.word	0xe000e100

0001658c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1658c:	4b05      	ldr	r3, [pc, #20]	; (165a4 <arch_irq_is_enabled+0x18>)
   1658e:	0942      	lsrs	r2, r0, #5
   16590:	f000 001f 	and.w	r0, r0, #31
   16594:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   16598:	2301      	movs	r3, #1
   1659a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1659e:	4010      	ands	r0, r2
   165a0:	4770      	bx	lr
   165a2:	bf00      	nop
   165a4:	e000e100 	.word	0xe000e100

000165a8 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   165a8:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   165aa:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   165ac:	bf54      	ite	pl
   165ae:	1c8b      	addpl	r3, r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   165b0:	2300      	movmi	r3, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   165b2:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   165b4:	bfac      	ite	ge
   165b6:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   165ba:	4a07      	ldrlt	r2, [pc, #28]	; (165d8 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   165bc:	ea4f 1343 	mov.w	r3, r3, lsl #5
   165c0:	bfac      	ite	ge
   165c2:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   165c6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   165ca:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   165cc:	bfb4      	ite	lt
   165ce:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   165d0:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   165d4:	4770      	bx	lr
   165d6:	bf00      	nop
   165d8:	e000ed14 	.word	0xe000ed14

000165dc <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   165dc:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   165de:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   165e0:	4b04      	ldr	r3, [pc, #16]	; (165f4 <_arch_isr_direct_pm+0x18>)
   165e2:	699a      	ldr	r2, [r3, #24]
   165e4:	b11a      	cbz	r2, 165ee <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   165e6:	2200      	movs	r2, #0
   165e8:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   165ea:	f016 feef 	bl	2d3cc <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   165ee:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   165f0:	bd08      	pop	{r3, pc}
   165f2:	bf00      	nop
   165f4:	20005ff8 	.word	0x20005ff8

000165f8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   165f8:	bf30      	wfi
    b z_SysNmiOnReset
   165fa:	f7ff bffd 	b.w	165f8 <z_SysNmiOnReset>
   165fe:	bf00      	nop

00016600 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   16600:	4a0b      	ldr	r2, [pc, #44]	; (16630 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   16602:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   16604:	4b0b      	ldr	r3, [pc, #44]	; (16634 <z_arm_prep_c+0x34>)
   16606:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1660a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   1660c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16610:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   16614:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   16618:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1661c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   16620:	f00c fc9c 	bl	22f5c <z_bss_zero>
	z_data_copy();
   16624:	f00d fd1a 	bl	2405c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   16628:	f000 fb86 	bl	16d38 <z_arm_interrupt_init>
	z_cstart();
   1662c:	f00c fcd6 	bl	22fdc <z_cstart>
   16630:	00000000 	.word	0x00000000
   16634:	e000ed00 	.word	0xe000ed00

00016638 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   16638:	4a09      	ldr	r2, [pc, #36]	; (16660 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1663a:	490a      	ldr	r1, [pc, #40]	; (16664 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   1663c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1663e:	6809      	ldr	r1, [r1, #0]
   16640:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   16642:	4909      	ldr	r1, [pc, #36]	; (16668 <arch_swap+0x30>)
	_current->arch.basepri = key;
   16644:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   16646:	684b      	ldr	r3, [r1, #4]
   16648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1664c:	604b      	str	r3, [r1, #4]
   1664e:	2300      	movs	r3, #0
   16650:	f383 8811 	msr	BASEPRI, r3
   16654:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   16658:	6893      	ldr	r3, [r2, #8]
}
   1665a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   1665c:	4770      	bx	lr
   1665e:	bf00      	nop
   16660:	20005ff8 	.word	0x20005ff8
   16664:	0002f320 	.word	0x0002f320
   16668:	e000ed00 	.word	0xe000ed00

0001666c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1666c:	490f      	ldr	r1, [pc, #60]	; (166ac <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1666e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   16670:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   16674:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   16676:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1667a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1667e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   16680:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   16684:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   16688:	4f09      	ldr	r7, [pc, #36]	; (166b0 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1668a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1668e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   16690:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   16692:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   16694:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   16696:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   16698:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1669a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1669e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   166a2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   166a6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   166aa:	4770      	bx	lr
    ldr r1, =_kernel
   166ac:	20005ff8 	.word	0x20005ff8
    ldr v4, =_SCS_ICSR
   166b0:	e000ed04 	.word	0xe000ed04

000166b4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   166b4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   166b8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   166ba:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   166be:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   166c2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   166c4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   166c8:	2902      	cmp	r1, #2
    beq _oops
   166ca:	d0ff      	beq.n	166cc <_oops>

000166cc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   166cc:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   166ce:	f013 fef0 	bl	2a4b2 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   166d2:	bd01      	pop	{r0, pc}

000166d4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   166d4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   166d8:	9b00      	ldr	r3, [sp, #0]
   166da:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   166de:	490a      	ldr	r1, [pc, #40]	; (16708 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   166e0:	9b01      	ldr	r3, [sp, #4]
   166e2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   166e6:	9b02      	ldr	r3, [sp, #8]
   166e8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   166ec:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   166f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   166f4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   166f8:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   166fc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   166fe:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   16700:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   16702:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   16704:	4770      	bx	lr
   16706:	bf00      	nop
   16708:	00029683 	.word	0x00029683

0001670c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1670c:	4b07      	ldr	r3, [pc, #28]	; (1672c <arch_switch_to_main_thread+0x20>)
   1670e:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   16710:	4610      	mov	r0, r2
   16712:	f381 8809 	msr	PSP, r1
   16716:	2100      	movs	r1, #0
   16718:	b663      	cpsie	if
   1671a:	f381 8811 	msr	BASEPRI, r1
   1671e:	f3bf 8f6f 	isb	sy
   16722:	2200      	movs	r2, #0
   16724:	2300      	movs	r3, #0
   16726:	f012 ffac 	bl	29682 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1672a:	bf00      	nop
   1672c:	20005ff8 	.word	0x20005ff8

00016730 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   16730:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   16732:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   16734:	4a0b      	ldr	r2, [pc, #44]	; (16764 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   16736:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   16738:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1673a:	bf1e      	ittt	ne
	movne	r1, #0
   1673c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1673e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   16740:	f016 fe44 	blne	2d3cc <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   16744:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   16746:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1674a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1674e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   16752:	4905      	ldr	r1, [pc, #20]	; (16768 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   16754:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   16756:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   16758:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1675a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1675e:	4903      	ldr	r1, [pc, #12]	; (1676c <_isr_wrapper+0x3c>)
	bx r1
   16760:	4708      	bx	r1
   16762:	0000      	.short	0x0000
	ldr r2, =_kernel
   16764:	20005ff8 	.word	0x20005ff8
	ldr r1, =_sw_isr_table
   16768:	0002e33c 	.word	0x0002e33c
	ldr r1, =z_arm_int_exit
   1676c:	00016771 	.word	0x00016771

00016770 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   16770:	4b04      	ldr	r3, [pc, #16]	; (16784 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   16772:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   16774:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   16776:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   16778:	d003      	beq.n	16782 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1677a:	4903      	ldr	r1, [pc, #12]	; (16788 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1677c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   16780:	600a      	str	r2, [r1, #0]

00016782 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   16782:	4770      	bx	lr
	ldr r3, =_kernel
   16784:	20005ff8 	.word	0x20005ff8
	ldr r1, =_SCS_ICSR
   16788:	e000ed04 	.word	0xe000ed04

0001678c <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1678c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16790:	b086      	sub	sp, #24
   16792:	4606      	mov	r6, r0
   16794:	af00      	add	r7, sp, #0
   16796:	460d      	mov	r5, r1
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   16798:	4b41      	ldr	r3, [pc, #260]	; (168a0 <mem_manage_fault.constprop.0+0x114>)
   1679a:	4842      	ldr	r0, [pc, #264]	; (168a4 <mem_manage_fault.constprop.0+0x118>)
   1679c:	617b      	str	r3, [r7, #20]
   1679e:	2402      	movs	r4, #2
   167a0:	f107 0210 	add.w	r2, r7, #16
   167a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   167a8:	613c      	str	r4, [r7, #16]
   167aa:	f013 fe91 	bl	2a4d0 <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   167ae:	4b3e      	ldr	r3, [pc, #248]	; (168a8 <mem_manage_fault.constprop.0+0x11c>)
   167b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   167b2:	06db      	lsls	r3, r3, #27
   167b4:	d509      	bpl.n	167ca <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   167b6:	4b3d      	ldr	r3, [pc, #244]	; (168ac <mem_manage_fault.constprop.0+0x120>)
   167b8:	483a      	ldr	r0, [pc, #232]	; (168a4 <mem_manage_fault.constprop.0+0x118>)
   167ba:	f107 0210 	add.w	r2, r7, #16
   167be:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   167c2:	e9c7 4304 	strd	r4, r3, [r7, #16]
   167c6:	f013 fe83 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   167ca:	4b37      	ldr	r3, [pc, #220]	; (168a8 <mem_manage_fault.constprop.0+0x11c>)
   167cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   167ce:	0718      	lsls	r0, r3, #28
   167d0:	d50a      	bpl.n	167e8 <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   167d2:	4b37      	ldr	r3, [pc, #220]	; (168b0 <mem_manage_fault.constprop.0+0x124>)
   167d4:	617b      	str	r3, [r7, #20]
   167d6:	4833      	ldr	r0, [pc, #204]	; (168a4 <mem_manage_fault.constprop.0+0x118>)
   167d8:	2302      	movs	r3, #2
   167da:	f107 0210 	add.w	r2, r7, #16
   167de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   167e2:	613b      	str	r3, [r7, #16]
   167e4:	f013 fe74 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   167e8:	4c2f      	ldr	r4, [pc, #188]	; (168a8 <mem_manage_fault.constprop.0+0x11c>)
   167ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   167ec:	0799      	lsls	r1, r3, #30
   167ee:	d522      	bpl.n	16836 <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
   167f0:	46e8      	mov	r8, sp
   167f2:	4b30      	ldr	r3, [pc, #192]	; (168b4 <mem_manage_fault.constprop.0+0x128>)
   167f4:	617b      	str	r3, [r7, #20]
   167f6:	f107 0210 	add.w	r2, r7, #16
   167fa:	2302      	movs	r3, #2
   167fc:	4829      	ldr	r0, [pc, #164]	; (168a4 <mem_manage_fault.constprop.0+0x118>)
   167fe:	613b      	str	r3, [r7, #16]
   16800:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16804:	f013 fe64 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   16808:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1680a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1680c:	0612      	lsls	r2, r2, #24
   1680e:	d512      	bpl.n	16836 <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   16810:	b088      	sub	sp, #32
   16812:	466a      	mov	r2, sp
   16814:	4928      	ldr	r1, [pc, #160]	; (168b8 <mem_manage_fault.constprop.0+0x12c>)
   16816:	4823      	ldr	r0, [pc, #140]	; (168a4 <mem_manage_fault.constprop.0+0x118>)
   16818:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1681c:	2303      	movs	r3, #3
   1681e:	f842 3f10 	str.w	r3, [r2, #16]!
   16822:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16826:	f013 fe53 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
   1682a:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   1682c:	b11e      	cbz	r6, 16836 <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1682e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   16830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   16834:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   16836:	4b1c      	ldr	r3, [pc, #112]	; (168a8 <mem_manage_fault.constprop.0+0x11c>)
   16838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1683a:	07dc      	lsls	r4, r3, #31
   1683c:	d50a      	bpl.n	16854 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
   1683e:	4b1f      	ldr	r3, [pc, #124]	; (168bc <mem_manage_fault.constprop.0+0x130>)
   16840:	617b      	str	r3, [r7, #20]
   16842:	4818      	ldr	r0, [pc, #96]	; (168a4 <mem_manage_fault.constprop.0+0x118>)
   16844:	2302      	movs	r3, #2
   16846:	f107 0210 	add.w	r2, r7, #16
   1684a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1684e:	613b      	str	r3, [r7, #16]
   16850:	f013 fe3e 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   16854:	4b14      	ldr	r3, [pc, #80]	; (168a8 <mem_manage_fault.constprop.0+0x11c>)
   16856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16858:	0698      	lsls	r0, r3, #26
   1685a:	d50a      	bpl.n	16872 <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
   1685c:	4b18      	ldr	r3, [pc, #96]	; (168c0 <mem_manage_fault.constprop.0+0x134>)
   1685e:	617b      	str	r3, [r7, #20]
   16860:	4810      	ldr	r0, [pc, #64]	; (168a4 <mem_manage_fault.constprop.0+0x118>)
   16862:	2302      	movs	r3, #2
   16864:	f107 0210 	add.w	r2, r7, #16
   16868:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1686c:	613b      	str	r3, [r7, #16]
   1686e:	f013 fe2f 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   16872:	4b0d      	ldr	r3, [pc, #52]	; (168a8 <mem_manage_fault.constprop.0+0x11c>)
   16874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   16876:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   16878:	bf58      	it	pl
   1687a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1687c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1687e:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   16880:	bf42      	ittt	mi
   16882:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   16884:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   16888:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1688a:	4a07      	ldr	r2, [pc, #28]	; (168a8 <mem_manage_fault.constprop.0+0x11c>)
   1688c:	6a93      	ldr	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   1688e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   16890:	f043 03ff 	orr.w	r3, r3, #255	; 0xff

	return reason;
}
   16894:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   16896:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   16898:	7028      	strb	r0, [r5, #0]
}
   1689a:	46bd      	mov	sp, r7
   1689c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   168a0:	0002fad2 	.word	0x0002fad2
   168a4:	0002e654 	.word	0x0002e654
   168a8:	e000ed00 	.word	0xe000ed00
   168ac:	0002fae8 	.word	0x0002fae8
   168b0:	0002fb1b 	.word	0x0002fb1b
   168b4:	0002fb2e 	.word	0x0002fb2e
   168b8:	0002fb46 	.word	0x0002fb46
   168bc:	0002fb5c 	.word	0x0002fb5c
   168c0:	0002fb7b 	.word	0x0002fb7b

000168c4 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   168c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   168c8:	b086      	sub	sp, #24
   168ca:	4606      	mov	r6, r0
   168cc:	af00      	add	r7, sp, #0
   168ce:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   168d0:	4b3e      	ldr	r3, [pc, #248]	; (169cc <bus_fault.constprop.0+0x108>)
   168d2:	483f      	ldr	r0, [pc, #252]	; (169d0 <bus_fault.constprop.0+0x10c>)
   168d4:	617b      	str	r3, [r7, #20]
   168d6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   168da:	2402      	movs	r4, #2
   168dc:	f107 0210 	add.w	r2, r7, #16
   168e0:	613c      	str	r4, [r7, #16]
   168e2:	f013 fdf5 	bl	2a4d0 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   168e6:	4b3b      	ldr	r3, [pc, #236]	; (169d4 <bus_fault.constprop.0+0x110>)
   168e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   168ea:	04d9      	lsls	r1, r3, #19
   168ec:	d509      	bpl.n	16902 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
   168ee:	4b3a      	ldr	r3, [pc, #232]	; (169d8 <bus_fault.constprop.0+0x114>)
   168f0:	4837      	ldr	r0, [pc, #220]	; (169d0 <bus_fault.constprop.0+0x10c>)
   168f2:	f107 0210 	add.w	r2, r7, #16
   168f6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   168fa:	e9c7 4304 	strd	r4, r3, [r7, #16]
   168fe:	f013 fde7 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   16902:	4b34      	ldr	r3, [pc, #208]	; (169d4 <bus_fault.constprop.0+0x110>)
   16904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16906:	051a      	lsls	r2, r3, #20
   16908:	d50a      	bpl.n	16920 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   1690a:	4b34      	ldr	r3, [pc, #208]	; (169dc <bus_fault.constprop.0+0x118>)
   1690c:	617b      	str	r3, [r7, #20]
   1690e:	4830      	ldr	r0, [pc, #192]	; (169d0 <bus_fault.constprop.0+0x10c>)
   16910:	2302      	movs	r3, #2
   16912:	f107 0210 	add.w	r2, r7, #16
   16916:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1691a:	613b      	str	r3, [r7, #16]
   1691c:	f013 fdd8 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   16920:	4c2c      	ldr	r4, [pc, #176]	; (169d4 <bus_fault.constprop.0+0x110>)
   16922:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   16924:	059b      	lsls	r3, r3, #22
   16926:	d522      	bpl.n	1696e <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
   16928:	46e8      	mov	r8, sp
   1692a:	4b2d      	ldr	r3, [pc, #180]	; (169e0 <bus_fault.constprop.0+0x11c>)
   1692c:	4828      	ldr	r0, [pc, #160]	; (169d0 <bus_fault.constprop.0+0x10c>)
   1692e:	617b      	str	r3, [r7, #20]
   16930:	f107 0210 	add.w	r2, r7, #16
   16934:	2302      	movs	r3, #2
   16936:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1693a:	613b      	str	r3, [r7, #16]
   1693c:	f013 fdc8 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   16940:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   16942:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   16944:	0410      	lsls	r0, r2, #16
   16946:	d512      	bpl.n	1696e <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   16948:	b088      	sub	sp, #32
   1694a:	466a      	mov	r2, sp
   1694c:	4925      	ldr	r1, [pc, #148]	; (169e4 <bus_fault.constprop.0+0x120>)
   1694e:	4820      	ldr	r0, [pc, #128]	; (169d0 <bus_fault.constprop.0+0x10c>)
   16950:	e9c2 1305 	strd	r1, r3, [r2, #20]
   16954:	2303      	movs	r3, #3
   16956:	f842 3f10 	str.w	r3, [r2, #16]!
   1695a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1695e:	f013 fdb7 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
   16962:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   16964:	b11e      	cbz	r6, 1696e <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   16966:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   16968:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1696c:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1696e:	4b19      	ldr	r3, [pc, #100]	; (169d4 <bus_fault.constprop.0+0x110>)
   16970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16972:	0559      	lsls	r1, r3, #21
   16974:	d50a      	bpl.n	1698c <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
   16976:	4b1c      	ldr	r3, [pc, #112]	; (169e8 <bus_fault.constprop.0+0x124>)
   16978:	617b      	str	r3, [r7, #20]
   1697a:	4815      	ldr	r0, [pc, #84]	; (169d0 <bus_fault.constprop.0+0x10c>)
   1697c:	2302      	movs	r3, #2
   1697e:	f107 0210 	add.w	r2, r7, #16
   16982:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16986:	613b      	str	r3, [r7, #16]
   16988:	f013 fda2 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1698c:	4b11      	ldr	r3, [pc, #68]	; (169d4 <bus_fault.constprop.0+0x110>)
   1698e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   16990:	05d2      	lsls	r2, r2, #23
   16992:	d515      	bpl.n	169c0 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
   16994:	4b15      	ldr	r3, [pc, #84]	; (169ec <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   16996:	617b      	str	r3, [r7, #20]
   16998:	480d      	ldr	r0, [pc, #52]	; (169d0 <bus_fault.constprop.0+0x10c>)
   1699a:	2302      	movs	r3, #2
   1699c:	f107 0210 	add.w	r2, r7, #16
   169a0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   169a4:	613b      	str	r3, [r7, #16]
   169a6:	f013 fd93 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   169aa:	4a0a      	ldr	r2, [pc, #40]	; (169d4 <bus_fault.constprop.0+0x110>)
   169ac:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   169ae:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   169b0:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
   169b4:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   169b6:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   169b8:	7028      	strb	r0, [r5, #0]
}
   169ba:	46bd      	mov	sp, r7
   169bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   169c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   169c2:	049b      	lsls	r3, r3, #18
   169c4:	d5f1      	bpl.n	169aa <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   169c6:	4b0a      	ldr	r3, [pc, #40]	; (169f0 <bus_fault.constprop.0+0x12c>)
   169c8:	e7e5      	b.n	16996 <bus_fault.constprop.0+0xd2>
   169ca:	bf00      	nop
   169cc:	0002fbaa 	.word	0x0002fbaa
   169d0:	0002e654 	.word	0x0002e654
   169d4:	e000ed00 	.word	0xe000ed00
   169d8:	0002fbc0 	.word	0x0002fbc0
   169dc:	0002fb1b 	.word	0x0002fb1b
   169e0:	0002fbd1 	.word	0x0002fbd1
   169e4:	0002fbea 	.word	0x0002fbea
   169e8:	0002fbff 	.word	0x0002fbff
   169ec:	0002fc1a 	.word	0x0002fc1a
   169f0:	0002fb7b 	.word	0x0002fb7b

000169f4 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   169f4:	b510      	push	{r4, lr}
   169f6:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   169f8:	4b33      	ldr	r3, [pc, #204]	; (16ac8 <usage_fault.constprop.0+0xd4>)
   169fa:	4834      	ldr	r0, [pc, #208]	; (16acc <usage_fault.constprop.0+0xd8>)
   169fc:	9305      	str	r3, [sp, #20]
   169fe:	2402      	movs	r4, #2
   16a00:	aa04      	add	r2, sp, #16
   16a02:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16a06:	9404      	str	r4, [sp, #16]
   16a08:	f013 fd62 	bl	2a4d0 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   16a0c:	4b30      	ldr	r3, [pc, #192]	; (16ad0 <usage_fault.constprop.0+0xdc>)
   16a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16a10:	019b      	lsls	r3, r3, #6
   16a12:	d508      	bpl.n	16a26 <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
   16a14:	4b2f      	ldr	r3, [pc, #188]	; (16ad4 <usage_fault.constprop.0+0xe0>)
   16a16:	482d      	ldr	r0, [pc, #180]	; (16acc <usage_fault.constprop.0+0xd8>)
   16a18:	aa04      	add	r2, sp, #16
   16a1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16a1e:	e9cd 4304 	strd	r4, r3, [sp, #16]
   16a22:	f013 fd55 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   16a26:	4b2a      	ldr	r3, [pc, #168]	; (16ad0 <usage_fault.constprop.0+0xdc>)
   16a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16a2a:	01dc      	lsls	r4, r3, #7
   16a2c:	d509      	bpl.n	16a42 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
   16a2e:	4b2a      	ldr	r3, [pc, #168]	; (16ad8 <usage_fault.constprop.0+0xe4>)
   16a30:	9305      	str	r3, [sp, #20]
   16a32:	4826      	ldr	r0, [pc, #152]	; (16acc <usage_fault.constprop.0+0xd8>)
   16a34:	2302      	movs	r3, #2
   16a36:	aa04      	add	r2, sp, #16
   16a38:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16a3c:	9304      	str	r3, [sp, #16]
   16a3e:	f013 fd47 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   16a42:	4b23      	ldr	r3, [pc, #140]	; (16ad0 <usage_fault.constprop.0+0xdc>)
   16a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16a46:	0318      	lsls	r0, r3, #12
   16a48:	d509      	bpl.n	16a5e <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
   16a4a:	4b24      	ldr	r3, [pc, #144]	; (16adc <usage_fault.constprop.0+0xe8>)
   16a4c:	9305      	str	r3, [sp, #20]
   16a4e:	481f      	ldr	r0, [pc, #124]	; (16acc <usage_fault.constprop.0+0xd8>)
   16a50:	2302      	movs	r3, #2
   16a52:	aa04      	add	r2, sp, #16
   16a54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16a58:	9304      	str	r3, [sp, #16]
   16a5a:	f013 fd39 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   16a5e:	4b1c      	ldr	r3, [pc, #112]	; (16ad0 <usage_fault.constprop.0+0xdc>)
   16a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16a62:	0359      	lsls	r1, r3, #13
   16a64:	d509      	bpl.n	16a7a <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   16a66:	4b1e      	ldr	r3, [pc, #120]	; (16ae0 <usage_fault.constprop.0+0xec>)
   16a68:	9305      	str	r3, [sp, #20]
   16a6a:	4818      	ldr	r0, [pc, #96]	; (16acc <usage_fault.constprop.0+0xd8>)
   16a6c:	2302      	movs	r3, #2
   16a6e:	aa04      	add	r2, sp, #16
   16a70:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16a74:	9304      	str	r3, [sp, #16]
   16a76:	f013 fd2b 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   16a7a:	4b15      	ldr	r3, [pc, #84]	; (16ad0 <usage_fault.constprop.0+0xdc>)
   16a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16a7e:	039a      	lsls	r2, r3, #14
   16a80:	d509      	bpl.n	16a96 <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   16a82:	4b18      	ldr	r3, [pc, #96]	; (16ae4 <usage_fault.constprop.0+0xf0>)
   16a84:	9305      	str	r3, [sp, #20]
   16a86:	4811      	ldr	r0, [pc, #68]	; (16acc <usage_fault.constprop.0+0xd8>)
   16a88:	2302      	movs	r3, #2
   16a8a:	aa04      	add	r2, sp, #16
   16a8c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16a90:	9304      	str	r3, [sp, #16]
   16a92:	f013 fd1d 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   16a96:	4b0e      	ldr	r3, [pc, #56]	; (16ad0 <usage_fault.constprop.0+0xdc>)
   16a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16a9a:	03db      	lsls	r3, r3, #15
   16a9c:	d509      	bpl.n	16ab2 <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   16a9e:	4b12      	ldr	r3, [pc, #72]	; (16ae8 <usage_fault.constprop.0+0xf4>)
   16aa0:	9305      	str	r3, [sp, #20]
   16aa2:	480a      	ldr	r0, [pc, #40]	; (16acc <usage_fault.constprop.0+0xd8>)
   16aa4:	2302      	movs	r3, #2
   16aa6:	aa04      	add	r2, sp, #16
   16aa8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16aac:	9304      	str	r3, [sp, #16]
   16aae:	f013 fd0f 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   16ab2:	4a07      	ldr	r2, [pc, #28]	; (16ad0 <usage_fault.constprop.0+0xdc>)
   16ab4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   16ab6:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   16aba:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
   16abe:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   16ac0:	6293      	str	r3, [r2, #40]	; 0x28
}
   16ac2:	b006      	add	sp, #24
   16ac4:	bd10      	pop	{r4, pc}
   16ac6:	bf00      	nop
   16ac8:	0002fc32 	.word	0x0002fc32
   16acc:	0002e654 	.word	0x0002e654
   16ad0:	e000ed00 	.word	0xe000ed00
   16ad4:	0002fc4a 	.word	0x0002fc4a
   16ad8:	0002fc5d 	.word	0x0002fc5d
   16adc:	0002fc77 	.word	0x0002fc77
   16ae0:	0002fc95 	.word	0x0002fc95
   16ae4:	0002fcba 	.word	0x0002fcba
   16ae8:	0002fcd4 	.word	0x0002fcd4

00016aec <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   16aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   16af0:	4b7b      	ldr	r3, [pc, #492]	; (16ce0 <z_arm_fault+0x1f4>)
{
   16af2:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   16af4:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   16af8:	af00      	add	r7, sp, #0
   16afa:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   16afc:	f3c8 0408 	ubfx	r4, r8, #0, #9
   16b00:	2600      	movs	r6, #0
   16b02:	f386 8811 	msr	BASEPRI, r6
   16b06:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   16b0a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   16b0e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   16b12:	d10e      	bne.n	16b32 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   16b14:	f002 030c 	and.w	r3, r2, #12
   16b18:	2b08      	cmp	r3, #8
   16b1a:	d10c      	bne.n	16b36 <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   16b1c:	4b71      	ldr	r3, [pc, #452]	; (16ce4 <z_arm_fault+0x1f8>)
   16b1e:	61fb      	str	r3, [r7, #28]
   16b20:	4871      	ldr	r0, [pc, #452]	; (16ce8 <z_arm_fault+0x1fc>)
   16b22:	2302      	movs	r3, #2
   16b24:	f107 0218 	add.w	r2, r7, #24
   16b28:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16b2c:	61bb      	str	r3, [r7, #24]
   16b2e:	f013 fccf 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
		return NULL;
   16b32:	4635      	mov	r5, r6
   16b34:	e003      	b.n	16b3e <z_arm_fault+0x52>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   16b36:	0712      	lsls	r2, r2, #28
   16b38:	d401      	bmi.n	16b3e <z_arm_fault+0x52>
			ptr_esf = (z_arch_esf_t *)msp;
   16b3a:	4605      	mov	r5, r0
			*nested_exc = true;
   16b3c:	2601      	movs	r6, #1
	*recoverable = false;
   16b3e:	2300      	movs	r3, #0
   16b40:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   16b42:	1ee3      	subs	r3, r4, #3
   16b44:	2b09      	cmp	r3, #9
   16b46:	f200 80aa 	bhi.w	16c9e <z_arm_fault+0x1b2>
   16b4a:	e8df f003 	tbb	[pc, r3]
   16b4e:	9d05      	.short	0x9d05
   16b50:	a8a89aa0 	.word	0xa8a89aa0
   16b54:	a3a8a8a8 	.word	0xa3a8a8a8
	PR_FAULT_INFO("***** HARD FAULT *****");
   16b58:	46e9      	mov	r9, sp
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   16b5a:	f8df 8184 	ldr.w	r8, [pc, #388]	; 16ce0 <z_arm_fault+0x1f4>
	PR_FAULT_INFO("***** HARD FAULT *****");
   16b5e:	4b63      	ldr	r3, [pc, #396]	; (16cec <z_arm_fault+0x200>)
   16b60:	4861      	ldr	r0, [pc, #388]	; (16ce8 <z_arm_fault+0x1fc>)
   16b62:	61fb      	str	r3, [r7, #28]
   16b64:	f04f 0a02 	mov.w	sl, #2
   16b68:	f107 0218 	add.w	r2, r7, #24
   16b6c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16b70:	f8c7 a018 	str.w	sl, [r7, #24]
   16b74:	f013 fcac 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   16b78:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
   16b7c:	f04f 0b00 	mov.w	fp, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   16b80:	ea14 040a 	ands.w	r4, r4, sl
	*recoverable = false;
   16b84:	f887 b007 	strb.w	fp, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   16b88:	d00b      	beq.n	16ba2 <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
   16b8a:	4b59      	ldr	r3, [pc, #356]	; (16cf0 <z_arm_fault+0x204>)
   16b8c:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
   16b90:	4855      	ldr	r0, [pc, #340]	; (16ce8 <z_arm_fault+0x1fc>)
   16b92:	f107 0218 	add.w	r2, r7, #24
   16b96:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16b9a:	f013 fc99 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   16b9e:	2400      	movs	r4, #0
}
   16ba0:	e00d      	b.n	16bbe <z_arm_fault+0xd2>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   16ba2:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
   16ba6:	2b00      	cmp	r3, #0
   16ba8:	da2b      	bge.n	16c02 <z_arm_fault+0x116>
		PR_EXC("  Debug event");
   16baa:	4b52      	ldr	r3, [pc, #328]	; (16cf4 <z_arm_fault+0x208>)
   16bac:	484e      	ldr	r0, [pc, #312]	; (16ce8 <z_arm_fault+0x1fc>)
   16bae:	f107 0218 	add.w	r2, r7, #24
   16bb2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16bb6:	e9c7 a306 	strd	sl, r3, [r7, #24]
   16bba:	f013 fc89 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   16bbe:	79fb      	ldrb	r3, [r7, #7]
   16bc0:	b9db      	cbnz	r3, 16bfa <z_arm_fault+0x10e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   16bc2:	f107 0208 	add.w	r2, r7, #8
   16bc6:	f105 0c20 	add.w	ip, r5, #32
   16bca:	6828      	ldr	r0, [r5, #0]
   16bcc:	6869      	ldr	r1, [r5, #4]
   16bce:	4613      	mov	r3, r2
   16bd0:	c303      	stmia	r3!, {r0, r1}
   16bd2:	3508      	adds	r5, #8
   16bd4:	4565      	cmp	r5, ip
   16bd6:	461a      	mov	r2, r3
   16bd8:	d1f7      	bne.n	16bca <z_arm_fault+0xde>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   16bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16bdc:	2e00      	cmp	r6, #0
   16bde:	d079      	beq.n	16cd4 <z_arm_fault+0x1e8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   16be0:	f3c3 0208 	ubfx	r2, r3, #0, #9
   16be4:	b922      	cbnz	r2, 16bf0 <z_arm_fault+0x104>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   16be6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   16bea:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   16bee:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   16bf0:	f107 0108 	add.w	r1, r7, #8
   16bf4:	4620      	mov	r0, r4
   16bf6:	f7ff fc3f 	bl	16478 <z_arm_fatal_error>
}
   16bfa:	372c      	adds	r7, #44	; 0x2c
   16bfc:	46bd      	mov	sp, r7
   16bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   16c02:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
   16c06:	005b      	lsls	r3, r3, #1
   16c08:	d5d9      	bpl.n	16bbe <z_arm_fault+0xd2>
		PR_EXC("  Fault escalation (see below)");
   16c0a:	4b3b      	ldr	r3, [pc, #236]	; (16cf8 <z_arm_fault+0x20c>)
   16c0c:	4836      	ldr	r0, [pc, #216]	; (16ce8 <z_arm_fault+0x1fc>)
   16c0e:	f107 0218 	add.w	r2, r7, #24
   16c12:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16c16:	e9c7 a306 	strd	sl, r3, [r7, #24]
   16c1a:	f013 fc59 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
   16c1e:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   16c20:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   16c24:	f64d 7302 	movw	r3, #57090	; 0xdf02
   16c28:	429a      	cmp	r2, r3
   16c2a:	d009      	beq.n	16c40 <z_arm_fault+0x154>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   16c2c:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   16c30:	b2db      	uxtb	r3, r3
   16c32:	b1b3      	cbz	r3, 16c62 <z_arm_fault+0x176>
			reason = mem_manage_fault(esf, 1, recoverable);
   16c34:	1df9      	adds	r1, r7, #7
   16c36:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   16c38:	f7ff fda8 	bl	1678c <mem_manage_fault.constprop.0>
   16c3c:	4604      	mov	r4, r0
		break;
   16c3e:	e7be      	b.n	16bbe <z_arm_fault+0xd2>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   16c40:	b088      	sub	sp, #32
   16c42:	682b      	ldr	r3, [r5, #0]
   16c44:	466a      	mov	r2, sp
   16c46:	492d      	ldr	r1, [pc, #180]	; (16cfc <z_arm_fault+0x210>)
   16c48:	4827      	ldr	r0, [pc, #156]	; (16ce8 <z_arm_fault+0x1fc>)
   16c4a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   16c4e:	2303      	movs	r3, #3
   16c50:	f842 3f10 	str.w	r3, [r2, #16]!
   16c54:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16c58:	f013 fc3a 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
   16c5c:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
   16c5e:	682c      	ldr	r4, [r5, #0]
   16c60:	e7ad      	b.n	16bbe <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   16c62:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   16c66:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   16c6a:	d004      	beq.n	16c76 <z_arm_fault+0x18a>
			reason = bus_fault(esf, 1, recoverable);
   16c6c:	1df9      	adds	r1, r7, #7
   16c6e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   16c70:	f7ff fe28 	bl	168c4 <bus_fault.constprop.0>
   16c74:	e7e2      	b.n	16c3c <z_arm_fault+0x150>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   16c76:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   16c7a:	0c1b      	lsrs	r3, r3, #16
   16c7c:	041b      	lsls	r3, r3, #16
   16c7e:	2b00      	cmp	r3, #0
   16c80:	d09d      	beq.n	16bbe <z_arm_fault+0xd2>
		reason = usage_fault(esf);
   16c82:	f7ff feb7 	bl	169f4 <usage_fault.constprop.0>
   16c86:	e7d9      	b.n	16c3c <z_arm_fault+0x150>
		reason = mem_manage_fault(esf, 0, recoverable);
   16c88:	1df9      	adds	r1, r7, #7
   16c8a:	2000      	movs	r0, #0
   16c8c:	e7d4      	b.n	16c38 <z_arm_fault+0x14c>
		reason = bus_fault(esf, 0, recoverable);
   16c8e:	1df9      	adds	r1, r7, #7
   16c90:	2000      	movs	r0, #0
   16c92:	e7ed      	b.n	16c70 <z_arm_fault+0x184>
	PR_FAULT_INFO(
   16c94:	4b1a      	ldr	r3, [pc, #104]	; (16d00 <z_arm_fault+0x214>)
   16c96:	61fb      	str	r3, [r7, #28]
   16c98:	2302      	movs	r3, #2
   16c9a:	61bb      	str	r3, [r7, #24]
   16c9c:	e778      	b.n	16b90 <z_arm_fault+0xa4>
	PR_FAULT_INFO("***** %s %d) *****",
   16c9e:	4a19      	ldr	r2, [pc, #100]	; (16d04 <z_arm_fault+0x218>)
   16ca0:	4b19      	ldr	r3, [pc, #100]	; (16d08 <z_arm_fault+0x21c>)
   16ca2:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   16ca6:	46e8      	mov	r8, sp
   16ca8:	b08a      	sub	sp, #40	; 0x28
   16caa:	bf18      	it	ne
   16cac:	4613      	movne	r3, r2
   16cae:	466a      	mov	r2, sp
   16cb0:	4916      	ldr	r1, [pc, #88]	; (16d0c <z_arm_fault+0x220>)
   16cb2:	480d      	ldr	r0, [pc, #52]	; (16ce8 <z_arm_fault+0x1fc>)
   16cb4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   16cb8:	2302      	movs	r3, #2
   16cba:	f882 3020 	strb.w	r3, [r2, #32]
   16cbe:	3c10      	subs	r4, #16
   16cc0:	4b13      	ldr	r3, [pc, #76]	; (16d10 <z_arm_fault+0x224>)
   16cc2:	61d4      	str	r4, [r2, #28]
   16cc4:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   16cc8:	f842 3f10 	str.w	r3, [r2, #16]!
   16ccc:	f013 fc00 	bl	2a4d0 <z_log_msg_static_create.constprop.0>
   16cd0:	46c5      	mov	sp, r8
   16cd2:	e764      	b.n	16b9e <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   16cd4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   16cd8:	f023 0301 	bic.w	r3, r3, #1
   16cdc:	e787      	b.n	16bee <z_arm_fault+0x102>
   16cde:	bf00      	nop
   16ce0:	e000ed00 	.word	0xe000ed00
   16ce4:	0002fd2d 	.word	0x0002fd2d
   16ce8:	0002e654 	.word	0x0002e654
   16cec:	0002fd58 	.word	0x0002fd58
   16cf0:	0002fd6f 	.word	0x0002fd6f
   16cf4:	0002fd90 	.word	0x0002fd90
   16cf8:	0002fd9e 	.word	0x0002fd9e
   16cfc:	0002fdbd 	.word	0x0002fdbd
   16d00:	0002fdd9 	.word	0x0002fdd9
   16d04:	0002fd14 	.word	0x0002fd14
   16d08:	0002fcff 	.word	0x0002fcff
   16d0c:	0002fdfd 	.word	0x0002fdfd
   16d10:	01000004 	.word	0x01000004

00016d14 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   16d14:	4a02      	ldr	r2, [pc, #8]	; (16d20 <z_arm_fault_init+0xc>)
   16d16:	6953      	ldr	r3, [r2, #20]
   16d18:	f043 0310 	orr.w	r3, r3, #16
   16d1c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   16d1e:	4770      	bx	lr
   16d20:	e000ed00 	.word	0xe000ed00

00016d24 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   16d24:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   16d28:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   16d2c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   16d2e:	4672      	mov	r2, lr
	bl z_arm_fault
   16d30:	f7ff fedc 	bl	16aec <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   16d34:	bd01      	pop	{r0, pc}
   16d36:	bf00      	nop

00016d38 <z_arm_interrupt_init>:
   16d38:	4804      	ldr	r0, [pc, #16]	; (16d4c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   16d3a:	2300      	movs	r3, #0
   16d3c:	2140      	movs	r1, #64	; 0x40
   16d3e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   16d40:	3301      	adds	r3, #1
   16d42:	2b30      	cmp	r3, #48	; 0x30
   16d44:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   16d48:	d1f9      	bne.n	16d3e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   16d4a:	4770      	bx	lr
   16d4c:	e000e100 	.word	0xe000e100

00016d50 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   16d50:	2000      	movs	r0, #0
    msr CONTROL, r0
   16d52:	f380 8814 	msr	CONTROL, r0
    isb
   16d56:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   16d5a:	f7fe fa1b 	bl	15194 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   16d5e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   16d60:	490d      	ldr	r1, [pc, #52]	; (16d98 <__start+0x48>)
    str r0, [r1]
   16d62:	6008      	str	r0, [r1, #0]
    dsb
   16d64:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   16d68:	480c      	ldr	r0, [pc, #48]	; (16d9c <__start+0x4c>)
    msr msp, r0
   16d6a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   16d6e:	f000 f82b 	bl	16dc8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   16d72:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   16d74:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   16d78:	4809      	ldr	r0, [pc, #36]	; (16da0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   16d7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   16d7e:	1840      	adds	r0, r0, r1
    msr PSP, r0
   16d80:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   16d84:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   16d88:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   16d8a:	4308      	orrs	r0, r1
    msr CONTROL, r0
   16d8c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   16d90:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   16d94:	f7ff fc34 	bl	16600 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   16d98:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   16d9c:	200090d0 	.word	0x200090d0
    ldr r0, =z_interrupt_stacks
   16da0:	20009210 	.word	0x20009210

00016da4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   16da4:	4907      	ldr	r1, [pc, #28]	; (16dc4 <z_arm_clear_arm_mpu_config+0x20>)
   16da6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   16daa:	2300      	movs	r3, #0
	int num_regions =
   16dac:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   16db0:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   16db2:	4293      	cmp	r3, r2
   16db4:	d100      	bne.n	16db8 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   16db6:	4770      	bx	lr
  MPU->RNR = rnr;
   16db8:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   16dbc:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   16dc0:	3301      	adds	r3, #1
   16dc2:	e7f6      	b.n	16db2 <z_arm_clear_arm_mpu_config+0xe>
   16dc4:	e000ed00 	.word	0xe000ed00

00016dc8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   16dc8:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   16dca:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   16dcc:	2300      	movs	r3, #0
   16dce:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   16dd2:	f7ff ffe7 	bl	16da4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   16dd6:	4b14      	ldr	r3, [pc, #80]	; (16e28 <z_arm_init_arch_hw_at_boot+0x60>)
   16dd8:	f04f 32ff 	mov.w	r2, #4294967295
   16ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   16de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   16de4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   16de8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   16dec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   16df0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   16df4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   16df8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   16dfc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   16e00:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   16e04:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   16e08:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   16e0c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   16e10:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   16e14:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   16e18:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   16e1c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   16e1e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16e22:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   16e26:	bd08      	pop	{r3, pc}
   16e28:	e000e100 	.word	0xe000e100

00016e2c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   16e2c:	4b08      	ldr	r3, [pc, #32]	; (16e50 <z_impl_k_thread_abort+0x24>)
   16e2e:	689b      	ldr	r3, [r3, #8]
   16e30:	4283      	cmp	r3, r0
   16e32:	d10b      	bne.n	16e4c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16e34:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   16e38:	b143      	cbz	r3, 16e4c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   16e3a:	4b06      	ldr	r3, [pc, #24]	; (16e54 <z_impl_k_thread_abort+0x28>)
   16e3c:	685a      	ldr	r2, [r3, #4]
   16e3e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   16e42:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   16e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   16e46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   16e4a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   16e4c:	f00d b894 	b.w	23f78 <z_thread_abort>
   16e50:	20005ff8 	.word	0x20005ff8
   16e54:	e000ed00 	.word	0xe000ed00

00016e58 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   16e58:	4b02      	ldr	r3, [pc, #8]	; (16e64 <z_arm_configure_static_mpu_regions+0xc>)
   16e5a:	4a03      	ldr	r2, [pc, #12]	; (16e68 <z_arm_configure_static_mpu_regions+0x10>)
   16e5c:	4803      	ldr	r0, [pc, #12]	; (16e6c <z_arm_configure_static_mpu_regions+0x14>)
   16e5e:	2101      	movs	r1, #1
   16e60:	f000 b880 	b.w	16f64 <arm_core_mpu_configure_static_mpu_regions>
   16e64:	20040000 	.word	0x20040000
   16e68:	20000000 	.word	0x20000000
   16e6c:	0002ed78 	.word	0x0002ed78

00016e70 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   16e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   16e72:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 16f28 <mpu_configure_regions+0xb8>
   16e76:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   16e78:	2500      	movs	r5, #0
   16e7a:	428d      	cmp	r5, r1
   16e7c:	da1a      	bge.n	16eb4 <mpu_configure_regions+0x44>
		if (regions[i].size == 0U) {
   16e7e:	6844      	ldr	r4, [r0, #4]
   16e80:	2c00      	cmp	r4, #0
   16e82:	d04d      	beq.n	16f20 <mpu_configure_regions+0xb0>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   16e84:	b1fb      	cbz	r3, 16ec6 <mpu_configure_regions+0x56>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   16e86:	f104 3eff 	add.w	lr, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   16e8a:	ea14 0f0e 	tst.w	r4, lr
   16e8e:	d014      	beq.n	16eba <mpu_configure_regions+0x4a>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   16e90:	466c      	mov	r4, sp
   16e92:	b088      	sub	sp, #32
   16e94:	466a      	mov	r2, sp
   16e96:	4b25      	ldr	r3, [pc, #148]	; (16f2c <mpu_configure_regions+0xbc>)
   16e98:	e9c2 3505 	strd	r3, r5, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   16e9c:	2303      	movs	r3, #3
   16e9e:	f842 3f10 	str.w	r3, [r2, #16]!
   16ea2:	4823      	ldr	r0, [pc, #140]	; (16f30 <mpu_configure_regions+0xc0>)
   16ea4:	2300      	movs	r3, #0
   16ea6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16eaa:	f7fe fbef 	bl	1568c <z_impl_z_log_msg_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   16eae:	f06f 0215 	mvn.w	r2, #21
   16eb2:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   16eb4:	4610      	mov	r0, r2
   16eb6:	46bd      	mov	sp, r7
   16eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   16eba:	2c1f      	cmp	r4, #31
   16ebc:	d9e8      	bls.n	16e90 <mpu_configure_regions+0x20>
		((part->start & (part->size - 1U)) == 0U);
   16ebe:	6806      	ldr	r6, [r0, #0]
		&&
   16ec0:	ea1e 0f06 	tst.w	lr, r6
   16ec4:	d1e4      	bne.n	16e90 <mpu_configure_regions+0x20>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   16ec6:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   16ec8:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   16eca:	f8d0 e008 	ldr.w	lr, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   16ece:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
   16ed0:	d914      	bls.n	16efc <mpu_configure_regions+0x8c>
	if (size > (1UL << 31)) {
   16ed2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   16ed6:	d813      	bhi.n	16f00 <mpu_configure_regions+0x90>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   16ed8:	3c01      	subs	r4, #1
   16eda:	fab4 f484 	clz	r4, r4
   16ede:	f1c4 041f 	rsb	r4, r4, #31
   16ee2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   16ee4:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   16ee6:	ea4e 0404 	orr.w	r4, lr, r4
   16eea:	d90b      	bls.n	16f04 <mpu_configure_regions+0x94>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   16eec:	466c      	mov	r4, sp
   16eee:	b088      	sub	sp, #32
   16ef0:	466b      	mov	r3, sp
   16ef2:	4910      	ldr	r1, [pc, #64]	; (16f34 <mpu_configure_regions+0xc4>)
   16ef4:	e9c3 1205 	strd	r1, r2, [r3, #20]
   16ef8:	461a      	mov	r2, r3
   16efa:	e7cf      	b.n	16e9c <mpu_configure_regions+0x2c>
		return REGION_32B;
   16efc:	2408      	movs	r4, #8
   16efe:	e7f1      	b.n	16ee4 <mpu_configure_regions+0x74>
		return REGION_4G;
   16f00:	243e      	movs	r4, #62	; 0x3e
   16f02:	e7ef      	b.n	16ee4 <mpu_configure_regions+0x74>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   16f04:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
   16f08:	4316      	orrs	r6, r2
   16f0a:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   16f0e:	f044 0401 	orr.w	r4, r4, #1
   16f12:	f8cc 2098 	str.w	r2, [ip, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   16f16:	f8cc 609c 	str.w	r6, [ip, #156]	; 0x9c
		reg_index++;
   16f1a:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   16f1c:	f8cc 40a0 	str.w	r4, [ip, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   16f20:	3501      	adds	r5, #1
   16f22:	300c      	adds	r0, #12
   16f24:	e7a9      	b.n	16e7a <mpu_configure_regions+0xa>
   16f26:	bf00      	nop
   16f28:	e000ed00 	.word	0xe000ed00
   16f2c:	0002fe14 	.word	0x0002fe14
   16f30:	0002e644 	.word	0x0002e644
   16f34:	0002fe37 	.word	0x0002fe37

00016f38 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   16f38:	4b04      	ldr	r3, [pc, #16]	; (16f4c <arm_core_mpu_enable+0x14>)
   16f3a:	2205      	movs	r2, #5
   16f3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   16f40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16f44:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   16f48:	4770      	bx	lr
   16f4a:	bf00      	nop
   16f4c:	e000ed00 	.word	0xe000ed00

00016f50 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   16f50:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   16f54:	4b02      	ldr	r3, [pc, #8]	; (16f60 <arm_core_mpu_disable+0x10>)
   16f56:	2200      	movs	r2, #0
   16f58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   16f5c:	4770      	bx	lr
   16f5e:	bf00      	nop
   16f60:	e000ed00 	.word	0xe000ed00

00016f64 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   16f64:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   16f66:	4c03      	ldr	r4, [pc, #12]	; (16f74 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   16f68:	2301      	movs	r3, #1
   16f6a:	7822      	ldrb	r2, [r4, #0]
   16f6c:	f7ff ff80 	bl	16e70 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   16f70:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   16f72:	bd10      	pop	{r4, pc}
   16f74:	20006b4e 	.word	0x20006b4e

00016f78 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   16f78:	4914      	ldr	r1, [pc, #80]	; (16fcc <z_arm_mpu_init+0x54>)
   16f7a:	6808      	ldr	r0, [r1, #0]
   16f7c:	2808      	cmp	r0, #8
{
   16f7e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   16f80:	d821      	bhi.n	16fc6 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   16f82:	f7ff ffe5 	bl	16f50 <arm_core_mpu_disable>
   16f86:	4c12      	ldr	r4, [pc, #72]	; (16fd0 <z_arm_mpu_init+0x58>)
   16f88:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   16f8a:	2200      	movs	r2, #0
   16f8c:	4290      	cmp	r0, r2
   16f8e:	f101 010c 	add.w	r1, r1, #12
   16f92:	d105      	bne.n	16fa0 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   16f94:	4b0f      	ldr	r3, [pc, #60]	; (16fd4 <z_arm_mpu_init+0x5c>)
   16f96:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   16f98:	f7ff ffce 	bl	16f38 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   16f9c:	2000      	movs	r0, #0
}
   16f9e:	bd10      	pop	{r4, pc}
   16fa0:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   16fa4:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   16fa8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   16fac:	4313      	orrs	r3, r2
   16fae:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   16fb2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   16fb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
   16fba:	f043 0301 	orr.w	r3, r3, #1
   16fbe:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   16fc2:	3201      	adds	r2, #1
   16fc4:	e7e2      	b.n	16f8c <z_arm_mpu_init+0x14>
		return -1;
   16fc6:	f04f 30ff 	mov.w	r0, #4294967295
   16fca:	e7e8      	b.n	16f9e <z_arm_mpu_init+0x26>
   16fcc:	0002ed84 	.word	0x0002ed84
   16fd0:	e000ed00 	.word	0xe000ed00
   16fd4:	20006b4e 	.word	0x20006b4e

00016fd8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   16fd8:	4b01      	ldr	r3, [pc, #4]	; (16fe0 <__stdout_hook_install+0x8>)
   16fda:	6018      	str	r0, [r3, #0]
}
   16fdc:	4770      	bx	lr
   16fde:	bf00      	nop
   16fe0:	200006c4 	.word	0x200006c4

00016fe4 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   16fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
   16fe6:	4f08      	ldr	r7, [pc, #32]	; (17008 <z_impl_zephyr_read_stdin+0x24>)
{
   16fe8:	4606      	mov	r6, r0
   16fea:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
   16fec:	2400      	movs	r4, #0
   16fee:	42ac      	cmp	r4, r5
   16ff0:	da08      	bge.n	17004 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   16ff2:	683b      	ldr	r3, [r7, #0]
   16ff4:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   16ff6:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   16ff8:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   16ffa:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   16ffe:	d001      	beq.n	17004 <z_impl_zephyr_read_stdin+0x20>
   17000:	280d      	cmp	r0, #13
   17002:	d1f4      	bne.n	16fee <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   17004:	4620      	mov	r0, r4
   17006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17008:	200006c0 	.word	0x200006c0

0001700c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   1700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1700e:	4f0a      	ldr	r7, [pc, #40]	; (17038 <z_impl_zephyr_write_stdout+0x2c>)
   17010:	460d      	mov	r5, r1
   17012:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   17014:	f1c0 0401 	rsb	r4, r0, #1
   17018:	19a3      	adds	r3, r4, r6
   1701a:	429d      	cmp	r5, r3
   1701c:	dc01      	bgt.n	17022 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   1701e:	4628      	mov	r0, r5
   17020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   17022:	7873      	ldrb	r3, [r6, #1]
   17024:	2b0a      	cmp	r3, #10
   17026:	d102      	bne.n	1702e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   17028:	683b      	ldr	r3, [r7, #0]
   1702a:	200d      	movs	r0, #13
   1702c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   1702e:	683b      	ldr	r3, [r7, #0]
   17030:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   17034:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   17036:	e7ef      	b.n	17018 <z_impl_zephyr_write_stdout+0xc>
   17038:	200006c4 	.word	0x200006c4

0001703c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   1703c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   1703e:	4c07      	ldr	r4, [pc, #28]	; (1705c <_sbrk+0x20>)
   17040:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   17042:	18c2      	adds	r2, r0, r3
   17044:	4806      	ldr	r0, [pc, #24]	; (17060 <_sbrk+0x24>)
   17046:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   1704a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   1704e:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
   17050:	bf3a      	itte	cc
   17052:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
   17054:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   17056:	f04f 30ff 	movcs.w	r0, #4294967295
	}

	return ret;
}
   1705a:	bd10      	pop	{r4, pc}
   1705c:	20005b3c 	.word	0x20005b3c
   17060:	2000ace7 	.word	0x2000ace7

00017064 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   17064:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   17066:	211d      	movs	r1, #29
   17068:	4804      	ldr	r0, [pc, #16]	; (1707c <__chk_fail+0x18>)
   1706a:	f7ff ffcf 	bl	1700c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   1706e:	4040      	eors	r0, r0
   17070:	f380 8811 	msr	BASEPRI, r0
   17074:	f04f 0003 	mov.w	r0, #3
   17078:	df02      	svc	2
	CODE_UNREACHABLE;
   1707a:	bf00      	nop
   1707c:	0002fe5d 	.word	0x0002fe5d

00017080 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   17080:	f04f 0340 	mov.w	r3, #64	; 0x40
   17084:	f3ef 8211 	mrs	r2, BASEPRI
   17088:	f383 8812 	msr	BASEPRI_MAX, r3
   1708c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   17090:	4906      	ldr	r1, [pc, #24]	; (170ac <nordicsemi_nrf52_init+0x2c>)
   17092:	2301      	movs	r3, #1
   17094:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   17098:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1709c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   170a0:	f382 8811 	msr	BASEPRI, r2
   170a4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   170a8:	2000      	movs	r0, #0
   170aa:	4770      	bx	lr
   170ac:	4001e000 	.word	0x4001e000

000170b0 <sys_arch_reboot>:
    *p_gpregret = val;
   170b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   170b4:	b2c0      	uxtb	r0, r0
   170b6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   170ba:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   170be:	4905      	ldr	r1, [pc, #20]	; (170d4 <sys_arch_reboot+0x24>)
   170c0:	4b05      	ldr	r3, [pc, #20]	; (170d8 <sys_arch_reboot+0x28>)
   170c2:	68ca      	ldr	r2, [r1, #12]
   170c4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   170c8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   170ca:	60cb      	str	r3, [r1, #12]
   170cc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   170d0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   170d2:	e7fd      	b.n	170d0 <sys_arch_reboot+0x20>
   170d4:	e000ed00 	.word	0xe000ed00
   170d8:	05fa0004 	.word	0x05fa0004

000170dc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   170dc:	b120      	cbz	r0, 170e8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   170de:	4b03      	ldr	r3, [pc, #12]	; (170ec <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   170e0:	0180      	lsls	r0, r0, #6
   170e2:	f043 0301 	orr.w	r3, r3, #1
   170e6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   170e8:	4770      	bx	lr
   170ea:	bf00      	nop
   170ec:	0002ea10 	.word	0x0002ea10

000170f0 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   170f0:	4b0e      	ldr	r3, [pc, #56]	; (1712c <bt_hex_real+0x3c>)
   170f2:	2940      	cmp	r1, #64	; 0x40
{
   170f4:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   170f6:	bf28      	it	cs
   170f8:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   170fa:	4c0d      	ldr	r4, [pc, #52]	; (17130 <bt_hex_real+0x40>)
   170fc:	1846      	adds	r6, r0, r1
   170fe:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   17100:	42b0      	cmp	r0, r6
   17102:	f103 0302 	add.w	r3, r3, #2
   17106:	d104      	bne.n	17112 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   17108:	2300      	movs	r3, #0
   1710a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   1710e:	4807      	ldr	r0, [pc, #28]	; (1712c <bt_hex_real+0x3c>)
   17110:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   17112:	7802      	ldrb	r2, [r0, #0]
   17114:	0912      	lsrs	r2, r2, #4
   17116:	5ca2      	ldrb	r2, [r4, r2]
   17118:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   1711c:	f810 2b01 	ldrb.w	r2, [r0], #1
   17120:	f002 020f 	and.w	r2, r2, #15
   17124:	5ca2      	ldrb	r2, [r4, r2]
   17126:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   1712a:	e7e9      	b.n	17100 <bt_hex_real+0x10>
   1712c:	20006b6d 	.word	0x20006b6d
   17130:	0002fed3 	.word	0x0002fed3

00017134 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   17134:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   17136:	7803      	ldrb	r3, [r0, #0]
   17138:	b08b      	sub	sp, #44	; 0x2c
   1713a:	4604      	mov	r4, r0
   1713c:	ad07      	add	r5, sp, #28
   1713e:	2b03      	cmp	r3, #3
   17140:	d821      	bhi.n	17186 <bt_addr_le_str_real+0x52>
   17142:	e8df f003 	tbb	[pc, r3]
   17146:	1a02      	.short	0x1a02
   17148:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   1714a:	4912      	ldr	r1, [pc, #72]	; (17194 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   1714c:	4628      	mov	r0, r5
   1714e:	f016 ff00 	bl	2df52 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   17152:	7863      	ldrb	r3, [r4, #1]
   17154:	9304      	str	r3, [sp, #16]
   17156:	78a3      	ldrb	r3, [r4, #2]
   17158:	9303      	str	r3, [sp, #12]
   1715a:	78e3      	ldrb	r3, [r4, #3]
   1715c:	9302      	str	r3, [sp, #8]
   1715e:	7923      	ldrb	r3, [r4, #4]
   17160:	9301      	str	r3, [sp, #4]
   17162:	7963      	ldrb	r3, [r4, #5]
   17164:	9300      	str	r3, [sp, #0]
   17166:	4a0c      	ldr	r2, [pc, #48]	; (17198 <bt_addr_le_str_real+0x64>)
   17168:	79a3      	ldrb	r3, [r4, #6]
   1716a:	9505      	str	r5, [sp, #20]
   1716c:	211e      	movs	r1, #30
   1716e:	480b      	ldr	r0, [pc, #44]	; (1719c <bt_addr_le_str_real+0x68>)
   17170:	f012 f9cf 	bl	29512 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   17174:	4809      	ldr	r0, [pc, #36]	; (1719c <bt_addr_le_str_real+0x68>)
   17176:	b00b      	add	sp, #44	; 0x2c
   17178:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   1717a:	4909      	ldr	r1, [pc, #36]	; (171a0 <bt_addr_le_str_real+0x6c>)
   1717c:	e7e6      	b.n	1714c <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   1717e:	4909      	ldr	r1, [pc, #36]	; (171a4 <bt_addr_le_str_real+0x70>)
   17180:	e7e4      	b.n	1714c <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   17182:	4909      	ldr	r1, [pc, #36]	; (171a8 <bt_addr_le_str_real+0x74>)
   17184:	e7e2      	b.n	1714c <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   17186:	4a09      	ldr	r2, [pc, #36]	; (171ac <bt_addr_le_str_real+0x78>)
   17188:	210a      	movs	r1, #10
   1718a:	4628      	mov	r0, r5
   1718c:	f012 f9c1 	bl	29512 <snprintk>
		break;
   17190:	e7df      	b.n	17152 <bt_addr_le_str_real+0x1e>
   17192:	bf00      	nop
   17194:	0002fe8e 	.word	0x0002fe8e
   17198:	0002feb0 	.word	0x0002feb0
   1719c:	20006b4f 	.word	0x20006b4f
   171a0:	0002fe95 	.word	0x0002fe95
   171a4:	0002fe9c 	.word	0x0002fe9c
   171a8:	0002fea6 	.word	0x0002fea6
   171ac:	00031628 	.word	0x00031628

000171b0 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   171b0:	b5b0      	push	{r4, r5, r7, lr}
   171b2:	b086      	sub	sp, #24
	int err;
	BT_INFO("Saving ID");
   171b4:	466d      	mov	r5, sp
{
   171b6:	af00      	add	r7, sp, #0
	BT_INFO("Saving ID");
   171b8:	4b1d      	ldr	r3, [pc, #116]	; (17230 <save_id+0x80>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   171ba:	4c1e      	ldr	r4, [pc, #120]	; (17234 <save_id+0x84>)
	BT_INFO("Saving ID");
   171bc:	481e      	ldr	r0, [pc, #120]	; (17238 <save_id+0x88>)
   171be:	617b      	str	r3, [r7, #20]
   171c0:	f107 0210 	add.w	r2, r7, #16
   171c4:	2302      	movs	r3, #2
   171c6:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   171ca:	613b      	str	r3, [r7, #16]
   171cc:	f013 fa0f 	bl	2a5ee <z_log_msg_static_create.constprop.0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   171d0:	79e2      	ldrb	r2, [r4, #7]
   171d2:	481a      	ldr	r0, [pc, #104]	; (1723c <save_id+0x8c>)
   171d4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   171d8:	4621      	mov	r1, r4
   171da:	f7fe fe8d 	bl	15ef8 <settings_save_one>
	if (err) {
   171de:	b168      	cbz	r0, 171fc <save_id+0x4c>
		BT_ERR("Failed to save ID (err %d)", err);
   171e0:	b088      	sub	sp, #32
   171e2:	466a      	mov	r2, sp
   171e4:	4b16      	ldr	r3, [pc, #88]	; (17240 <save_id+0x90>)
   171e6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   171ea:	2303      	movs	r3, #3
   171ec:	f842 3f10 	str.w	r3, [r2, #16]!
   171f0:	4811      	ldr	r0, [pc, #68]	; (17238 <save_id+0x88>)
   171f2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   171f6:	f013 f9fa 	bl	2a5ee <z_log_msg_static_create.constprop.0>
   171fa:	46ad      	mov	sp, r5
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
   171fc:	79e2      	ldrb	r2, [r4, #7]
   171fe:	4911      	ldr	r1, [pc, #68]	; (17244 <save_id+0x94>)
   17200:	4811      	ldr	r0, [pc, #68]	; (17248 <save_id+0x98>)
   17202:	0112      	lsls	r2, r2, #4
   17204:	f7fe fe78 	bl	15ef8 <settings_save_one>
	if (err) {
   17208:	b170      	cbz	r0, 17228 <save_id+0x78>
		BT_ERR("Failed to save IRK (err %d)", err);
   1720a:	466c      	mov	r4, sp
   1720c:	b088      	sub	sp, #32
   1720e:	466a      	mov	r2, sp
   17210:	4b0e      	ldr	r3, [pc, #56]	; (1724c <save_id+0x9c>)
   17212:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17216:	2303      	movs	r3, #3
   17218:	f842 3f10 	str.w	r3, [r2, #16]!
   1721c:	4806      	ldr	r0, [pc, #24]	; (17238 <save_id+0x88>)
   1721e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17222:	f013 f9e4 	bl	2a5ee <z_log_msg_static_create.constprop.0>
   17226:	46a5      	mov	sp, r4
	}
#endif
}
   17228:	3718      	adds	r7, #24
   1722a:	46bd      	mov	sp, r7
   1722c:	bdb0      	pop	{r4, r5, r7, pc}
   1722e:	bf00      	nop
   17230:	0002feeb 	.word	0x0002feeb
   17234:	20000350 	.word	0x20000350
   17238:	0002e5e4 	.word	0x0002e5e4
   1723c:	0002fef5 	.word	0x0002fef5
   17240:	0002fefb 	.word	0x0002fefb
   17244:	200004b0 	.word	0x200004b0
   17248:	0002ff16 	.word	0x0002ff16
   1724c:	0002ff1d 	.word	0x0002ff1d

00017250 <set.part.0>:
static int set(const char *name, size_t len_rd, settings_read_cb read_cb,
   17250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17254:	b089      	sub	sp, #36	; 0x24
   17256:	4605      	mov	r5, r0
   17258:	af00      	add	r7, sp, #0
   1725a:	460e      	mov	r6, r1
   1725c:	4690      	mov	r8, r2
	if (!name) {
   1725e:	b968      	cbnz	r0, 1727c <set.part.0+0x2c>
		BT_ERR("Insufficient number of arguments");
   17260:	4b49      	ldr	r3, [pc, #292]	; (17388 <set.part.0+0x138>)
   17262:	61fb      	str	r3, [r7, #28]
   17264:	4849      	ldr	r0, [pc, #292]	; (1738c <set.part.0+0x13c>)
   17266:	2302      	movs	r3, #2
   17268:	f107 0218 	add.w	r2, r7, #24
   1726c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17270:	61bb      	str	r3, [r7, #24]
   17272:	f013 f9bc 	bl	2a5ee <z_log_msg_static_create.constprop.0>
	return -ENOENT;
   17276:	f06f 0401 	mvn.w	r4, #1
   1727a:	e020      	b.n	172be <set.part.0+0x6e>
	len = settings_name_next(name, &next);
   1727c:	1d39      	adds	r1, r7, #4
   1727e:	f012 fed4 	bl	2a02a <settings_name_next>
	if (!strncmp(name, "id", len)) {
   17282:	4943      	ldr	r1, [pc, #268]	; (17390 <set.part.0+0x140>)
   17284:	4602      	mov	r2, r0
	len = settings_name_next(name, &next);
   17286:	4681      	mov	r9, r0
	if (!strncmp(name, "id", len)) {
   17288:	4628      	mov	r0, r5
   1728a:	f016 fe6a 	bl	2df62 <strncmp>
   1728e:	4604      	mov	r4, r0
   17290:	2800      	cmp	r0, #0
   17292:	d137      	bne.n	17304 <set.part.0+0xb4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17294:	f3bf 8f5b 	dmb	ish
   17298:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 17394 <set.part.0+0x144>
   1729c:	f8d9 3000 	ldr.w	r3, [r9]
   172a0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   172a4:	071b      	lsls	r3, r3, #28
   172a6:	d50f      	bpl.n	172c8 <set.part.0+0x78>
			BT_WARN("Ignoring identities stored in flash");
   172a8:	4b3b      	ldr	r3, [pc, #236]	; (17398 <set.part.0+0x148>)
   172aa:	61fb      	str	r3, [r7, #28]
   172ac:	4837      	ldr	r0, [pc, #220]	; (1738c <set.part.0+0x13c>)
   172ae:	2302      	movs	r3, #2
   172b0:	f107 0218 	add.w	r2, r7, #24
   172b4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   172b8:	61bb      	str	r3, [r7, #24]
   172ba:	f013 f998 	bl	2a5ee <z_log_msg_static_create.constprop.0>
}
   172be:	4620      	mov	r0, r4
   172c0:	3724      	adds	r7, #36	; 0x24
   172c2:	46bd      	mov	sp, r7
   172c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   172c8:	f1a9 05cc 	sub.w	r5, r9, #204	; 0xcc
   172cc:	2207      	movs	r2, #7
   172ce:	4629      	mov	r1, r5
   172d0:	4640      	mov	r0, r8
   172d2:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   172d4:	2806      	cmp	r0, #6
   172d6:	d810      	bhi.n	172fa <set.part.0+0xaa>
				BT_ERR("Invalid length ID address in storage");
   172d8:	4b30      	ldr	r3, [pc, #192]	; (1739c <set.part.0+0x14c>)
   172da:	61fb      	str	r3, [r7, #28]
   172dc:	482b      	ldr	r0, [pc, #172]	; (1738c <set.part.0+0x13c>)
   172de:	2302      	movs	r3, #2
   172e0:	f107 0218 	add.w	r2, r7, #24
   172e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   172e8:	61bb      	str	r3, [r7, #24]
   172ea:	f013 f980 	bl	2a5ee <z_log_msg_static_create.constprop.0>
			(void)memset(bt_dev.id_addr, 0,
   172ee:	f849 4ccc 	str.w	r4, [r9, #-204]
			bt_dev.id_count = 0U;
   172f2:	71ec      	strb	r4, [r5, #7]
			(void)memset(bt_dev.id_addr, 0,
   172f4:	f8c5 4003 	str.w	r4, [r5, #3]
			bt_dev.id_count = 0U;
   172f8:	e7e1      	b.n	172be <set.part.0+0x6e>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   172fa:	2307      	movs	r3, #7
   172fc:	fbb0 f0f3 	udiv	r0, r0, r3
   17300:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   17302:	e7dc      	b.n	172be <set.part.0+0x6e>
	if (!strncmp(name, "name", len)) {
   17304:	4926      	ldr	r1, [pc, #152]	; (173a0 <set.part.0+0x150>)
   17306:	464a      	mov	r2, r9
   17308:	4628      	mov	r0, r5
   1730a:	f016 fe2a 	bl	2df62 <strncmp>
   1730e:	4604      	mov	r4, r0
   17310:	b9d0      	cbnz	r0, 17348 <set.part.0+0xf8>
		len = read_cb(cb_arg, &bt_dev.name, sizeof(bt_dev.name) - 1);
   17312:	4924      	ldr	r1, [pc, #144]	; (173a4 <set.part.0+0x154>)
   17314:	2241      	movs	r2, #65	; 0x41
   17316:	4640      	mov	r0, r8
   17318:	47b0      	blx	r6
		if (len < 0) {
   1731a:	2800      	cmp	r0, #0
   1731c:	da0f      	bge.n	1733e <set.part.0+0xee>
			BT_ERR("Failed to read device name from storage"
   1731e:	466d      	mov	r5, sp
   17320:	b088      	sub	sp, #32
   17322:	466a      	mov	r2, sp
   17324:	4b20      	ldr	r3, [pc, #128]	; (173a8 <set.part.0+0x158>)
   17326:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1732a:	2303      	movs	r3, #3
   1732c:	f842 3f10 	str.w	r3, [r2, #16]!
   17330:	4816      	ldr	r0, [pc, #88]	; (1738c <set.part.0+0x13c>)
   17332:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17336:	f013 f95a 	bl	2a5ee <z_log_msg_static_create.constprop.0>
   1733a:	46ad      	mov	sp, r5
   1733c:	e7bf      	b.n	172be <set.part.0+0x6e>
			bt_dev.name[len] = '\0';
   1733e:	4b1b      	ldr	r3, [pc, #108]	; (173ac <set.part.0+0x15c>)
   17340:	4418      	add	r0, r3
   17342:	f880 41a2 	strb.w	r4, [r0, #418]	; 0x1a2
			BT_DBG("Name set to %s", bt_dev.name);
   17346:	e7ba      	b.n	172be <set.part.0+0x6e>
	if (!strncmp(name, "irk", len)) {
   17348:	4919      	ldr	r1, [pc, #100]	; (173b0 <set.part.0+0x160>)
   1734a:	464a      	mov	r2, r9
   1734c:	4628      	mov	r0, r5
   1734e:	f016 fe08 	bl	2df62 <strncmp>
   17352:	4604      	mov	r4, r0
   17354:	2800      	cmp	r0, #0
   17356:	d18e      	bne.n	17276 <set.part.0+0x26>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
   17358:	4916      	ldr	r1, [pc, #88]	; (173b4 <set.part.0+0x164>)
   1735a:	2210      	movs	r2, #16
   1735c:	4640      	mov	r0, r8
   1735e:	47b0      	blx	r6
		if (len < sizeof(bt_dev.irk[0])) {
   17360:	280f      	cmp	r0, #15
   17362:	d8ac      	bhi.n	172be <set.part.0+0x6e>
				BT_ERR("Invalid length IRK in storage");
   17364:	4b14      	ldr	r3, [pc, #80]	; (173b8 <set.part.0+0x168>)
   17366:	61fb      	str	r3, [r7, #28]
   17368:	f107 0218 	add.w	r2, r7, #24
   1736c:	2302      	movs	r3, #2
   1736e:	4807      	ldr	r0, [pc, #28]	; (1738c <set.part.0+0x13c>)
   17370:	61bb      	str	r3, [r7, #24]
   17372:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17376:	f013 f93a 	bl	2a5ee <z_log_msg_static_create.constprop.0>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
   1737a:	2210      	movs	r2, #16
   1737c:	4621      	mov	r1, r4
   1737e:	480d      	ldr	r0, [pc, #52]	; (173b4 <set.part.0+0x164>)
   17380:	f016 fd4b 	bl	2de1a <memset>
   17384:	e79b      	b.n	172be <set.part.0+0x6e>
   17386:	bf00      	nop
   17388:	0002ff39 	.word	0x0002ff39
   1738c:	0002e5e4 	.word	0x0002e5e4
   17390:	0002fea3 	.word	0x0002fea3
   17394:	2000041c 	.word	0x2000041c
   17398:	0002ff5a 	.word	0x0002ff5a
   1739c:	0002ff7e 	.word	0x0002ff7e
   173a0:	000307c6 	.word	0x000307c6
   173a4:	200004f2 	.word	0x200004f2
   173a8:	0002ffa3 	.word	0x0002ffa3
   173ac:	20000350 	.word	0x20000350
   173b0:	0002ff19 	.word	0x0002ff19
   173b4:	200004b0 	.word	0x200004b0
   173b8:	0002ffd5 	.word	0x0002ffd5

000173bc <set>:
{
   173bc:	b410      	push	{r4}
   173be:	4611      	mov	r1, r2
   173c0:	461a      	mov	r2, r3
   173c2:	4b07      	ldr	r3, [pc, #28]	; (173e0 <set+0x24>)
   173c4:	f3bf 8f5b 	dmb	ish
   173c8:	681c      	ldr	r4, [r3, #0]
   173ca:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   173ce:	f014 0401 	ands.w	r4, r4, #1
   173d2:	d002      	beq.n	173da <set+0x1e>
}
   173d4:	bc10      	pop	{r4}
   173d6:	f7ff bf3b 	b.w	17250 <set.part.0>
   173da:	4620      	mov	r0, r4
   173dc:	bc10      	pop	{r4}
   173de:	4770      	bx	lr
   173e0:	2000041c 	.word	0x2000041c

000173e4 <bt_settings_encode_key>:
{
   173e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   173e8:	b088      	sub	sp, #32
		snprintk(path, path_size,
   173ea:	799c      	ldrb	r4, [r3, #6]
{
   173ec:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   173f0:	795d      	ldrb	r5, [r3, #5]
   173f2:	791e      	ldrb	r6, [r3, #4]
   173f4:	78df      	ldrb	r7, [r3, #3]
   173f6:	f893 c002 	ldrb.w	ip, [r3, #2]
   173fa:	f893 e001 	ldrb.w	lr, [r3, #1]
   173fe:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   17400:	f1b8 0f00 	cmp.w	r8, #0
   17404:	d00e      	beq.n	17424 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   17406:	e9cd 3806 	strd	r3, r8, [sp, #24]
   1740a:	e9cd ce04 	strd	ip, lr, [sp, #16]
   1740e:	4613      	mov	r3, r2
   17410:	e9cd 6702 	strd	r6, r7, [sp, #8]
   17414:	e9cd 4500 	strd	r4, r5, [sp]
   17418:	4a08      	ldr	r2, [pc, #32]	; (1743c <bt_settings_encode_key+0x58>)
   1741a:	f012 f87a 	bl	29512 <snprintk>
}
   1741e:	b008      	add	sp, #32
   17420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   17424:	e9cd e305 	strd	lr, r3, [sp, #20]
   17428:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   1742c:	4613      	mov	r3, r2
   1742e:	e9cd 5601 	strd	r5, r6, [sp, #4]
   17432:	4a03      	ldr	r2, [pc, #12]	; (17440 <bt_settings_encode_key+0x5c>)
   17434:	9400      	str	r4, [sp, #0]
   17436:	f012 f86c 	bl	29512 <snprintk>
}
   1743a:	e7f0      	b.n	1741e <bt_settings_encode_key+0x3a>
   1743c:	0002fff3 	.word	0x0002fff3
   17440:	00030017 	.word	0x00030017

00017444 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   17444:	4801      	ldr	r0, [pc, #4]	; (1744c <bt_settings_save_id+0x8>)
   17446:	f00c b9e3 	b.w	23810 <k_work_submit>
   1744a:	bf00      	nop
   1744c:	200006c8 	.word	0x200006c8

00017450 <commit.part.0>:
}

static int commit(void)
   17450:	b530      	push	{r4, r5, lr}
		 */
		return 0;
	}

#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
   17452:	4d1f      	ldr	r5, [pc, #124]	; (174d0 <commit.part.0+0x80>)
   17454:	f895 31a2 	ldrb.w	r3, [r5, #418]	; 0x1a2
static int commit(void)
   17458:	b087      	sub	sp, #28
	if (bt_dev.name[0] == '\0') {
   1745a:	b913      	cbnz	r3, 17462 <commit.part.0+0x12>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
   1745c:	481d      	ldr	r0, [pc, #116]	; (174d4 <commit.part.0+0x84>)
   1745e:	f001 fbcb 	bl	18bf8 <bt_set_name>
	}
#endif
	if (!bt_dev.id_count) {
   17462:	79eb      	ldrb	r3, [r5, #7]
   17464:	b9bb      	cbnz	r3, 17496 <commit.part.0+0x46>
		err = bt_setup_public_id_addr();
   17466:	f001 ffef 	bl	19448 <bt_setup_public_id_addr>
		if (err) {
   1746a:	4604      	mov	r4, r0
   1746c:	b160      	cbz	r0, 17488 <commit.part.0+0x38>
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			BT_ERR("Unable to setup an identity address");
   1746e:	4b1a      	ldr	r3, [pc, #104]	; (174d8 <commit.part.0+0x88>)
   17470:	9305      	str	r3, [sp, #20]
   17472:	481a      	ldr	r0, [pc, #104]	; (174dc <commit.part.0+0x8c>)
   17474:	2302      	movs	r3, #2
   17476:	aa04      	add	r2, sp, #16
   17478:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1747c:	9304      	str	r3, [sp, #16]
   1747e:	f013 f8b6 	bl	2a5ee <z_log_msg_static_create.constprop.0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   17482:	4620      	mov	r0, r4
   17484:	b007      	add	sp, #28
   17486:	bd30      	pop	{r4, r5, pc}
	if (!bt_dev.id_count) {
   17488:	79eb      	ldrb	r3, [r5, #7]
   1748a:	b923      	cbnz	r3, 17496 <commit.part.0+0x46>
		err = bt_setup_random_id_addr();
   1748c:	f002 f880 	bl	19590 <bt_setup_random_id_addr>
		if (err) {
   17490:	4604      	mov	r4, r0
   17492:	2800      	cmp	r0, #0
   17494:	d1eb      	bne.n	1746e <commit.part.0+0x1e>
   17496:	f3bf 8f5b 	dmb	ish
   1749a:	4d11      	ldr	r5, [pc, #68]	; (174e0 <commit.part.0+0x90>)
   1749c:	682b      	ldr	r3, [r5, #0]
   1749e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   174a2:	075b      	lsls	r3, r3, #29
   174a4:	d401      	bmi.n	174aa <commit.part.0+0x5a>
		bt_finalize_init();
   174a6:	f001 faf5 	bl	18a94 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   174aa:	f3bf 8f5b 	dmb	ish
   174ae:	e855 4f00 	ldrex	r4, [r5]
   174b2:	f424 3380 	bic.w	r3, r4, #65536	; 0x10000
   174b6:	e845 3200 	strex	r2, r3, [r5]
   174ba:	2a00      	cmp	r2, #0
   174bc:	d1f7      	bne.n	174ae <commit.part.0+0x5e>
   174be:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   174c2:	f414 3480 	ands.w	r4, r4, #65536	; 0x10000
   174c6:	d0dc      	beq.n	17482 <commit.part.0+0x32>
		bt_settings_save_id();
   174c8:	f7ff ffbc 	bl	17444 <bt_settings_save_id>
	return 0;
   174cc:	2400      	movs	r4, #0
   174ce:	e7d8      	b.n	17482 <commit.part.0+0x32>
   174d0:	20000350 	.word	0x20000350
   174d4:	00030038 	.word	0x00030038
   174d8:	0003005b 	.word	0x0003005b
   174dc:	0002e5e4 	.word	0x0002e5e4
   174e0:	2000041c 	.word	0x2000041c

000174e4 <commit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   174e4:	4b05      	ldr	r3, [pc, #20]	; (174fc <commit+0x18>)
   174e6:	f3bf 8f5b 	dmb	ish
   174ea:	6818      	ldr	r0, [r3, #0]
   174ec:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   174f0:	f010 0001 	ands.w	r0, r0, #1
   174f4:	d001      	beq.n	174fa <commit+0x16>
   174f6:	f7ff bfab 	b.w	17450 <commit.part.0>
}
   174fa:	4770      	bx	lr
   174fc:	2000041c 	.word	0x2000041c

00017500 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   17500:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   17502:	4d0a      	ldr	r5, [pc, #40]	; (1752c <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   17504:	4b0a      	ldr	r3, [pc, #40]	; (17530 <long_wq_init+0x30>)
{
   17506:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   17508:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   1750a:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   1750c:	9302      	str	r3, [sp, #8]
   1750e:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   17510:	f016 f8fd 	bl	2d70e <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   17514:	ab02      	add	r3, sp, #8
   17516:	9300      	str	r3, [sp, #0]
   17518:	4628      	mov	r0, r5
   1751a:	4906      	ldr	r1, [pc, #24]	; (17534 <long_wq_init+0x34>)
   1751c:	230a      	movs	r3, #10
   1751e:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   17522:	f00c f97b 	bl	2381c <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   17526:	4620      	mov	r0, r4
   17528:	b005      	add	sp, #20
   1752a:	bd30      	pop	{r4, r5, pc}
   1752c:	20001eb0 	.word	0x20001eb0
   17530:	0003008e 	.word	0x0003008e
   17534:	20007b48 	.word	0x20007b48

00017538 <bt_long_wq_schedule>:
{
   17538:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   1753a:	4801      	ldr	r0, [pc, #4]	; (17540 <bt_long_wq_schedule+0x8>)
   1753c:	f00c b9a6 	b.w	2388c <k_work_schedule_for_queue>
   17540:	20001eb0 	.word	0x20001eb0

00017544 <bt_long_wq_reschedule>:
{
   17544:	4601      	mov	r1, r0
	return k_work_reschedule_for_queue(&bt_long_wq, dwork, timeout);
   17546:	4801      	ldr	r0, [pc, #4]	; (1754c <bt_long_wq_reschedule+0x8>)
   17548:	f00c b9d0 	b.w	238ec <k_work_reschedule_for_queue>
   1754c:	20001eb0 	.word	0x20001eb0

00017550 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   17550:	7803      	ldrb	r3, [r0, #0]
   17552:	2b01      	cmp	r3, #1
{
   17554:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   17556:	d013      	beq.n	17580 <uuid_to_uuid128+0x30>
   17558:	2b02      	cmp	r3, #2
   1755a:	d027      	beq.n	175ac <uuid_to_uuid128+0x5c>
   1755c:	b97b      	cbnz	r3, 1757e <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   1755e:	4b19      	ldr	r3, [pc, #100]	; (175c4 <uuid_to_uuid128+0x74>)
   17560:	460a      	mov	r2, r1
   17562:	f103 0410 	add.w	r4, r3, #16
   17566:	f853 5b04 	ldr.w	r5, [r3], #4
   1756a:	f842 5b04 	str.w	r5, [r2], #4
   1756e:	42a3      	cmp	r3, r4
   17570:	d1f9      	bne.n	17566 <uuid_to_uuid128+0x16>
   17572:	781b      	ldrb	r3, [r3, #0]
   17574:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   17576:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
   17578:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   1757a:	0a1b      	lsrs	r3, r3, #8
   1757c:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   1757e:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   17580:	4b10      	ldr	r3, [pc, #64]	; (175c4 <uuid_to_uuid128+0x74>)
   17582:	460a      	mov	r2, r1
   17584:	f103 0410 	add.w	r4, r3, #16
   17588:	f853 5b04 	ldr.w	r5, [r3], #4
   1758c:	f842 5b04 	str.w	r5, [r2], #4
   17590:	42a3      	cmp	r3, r4
   17592:	d1f9      	bne.n	17588 <uuid_to_uuid128+0x38>
   17594:	781b      	ldrb	r3, [r3, #0]
   17596:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   17598:	6843      	ldr	r3, [r0, #4]
	dst[0] = val;
   1759a:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   1759c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   175a0:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   175a2:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   175a4:	0a1b      	lsrs	r3, r3, #8
   175a6:	738a      	strb	r2, [r1, #14]
   175a8:	740b      	strb	r3, [r1, #16]
}
   175aa:	e7e8      	b.n	1757e <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   175ac:	f100 0310 	add.w	r3, r0, #16
   175b0:	f850 2b04 	ldr.w	r2, [r0], #4
   175b4:	f841 2b04 	str.w	r2, [r1], #4
   175b8:	4298      	cmp	r0, r3
   175ba:	d1f9      	bne.n	175b0 <uuid_to_uuid128+0x60>
   175bc:	7803      	ldrb	r3, [r0, #0]
   175be:	700b      	strb	r3, [r1, #0]
   175c0:	e7dd      	b.n	1757e <uuid_to_uuid128+0x2e>
   175c2:	bf00      	nop
   175c4:	00030097 	.word	0x00030097

000175c8 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   175c8:	b538      	push	{r3, r4, r5, lr}
   175ca:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   175cc:	4805      	ldr	r0, [pc, #20]	; (175e4 <bt_buf_get_rx+0x1c>)
   175ce:	f015 f8e4 	bl	2c79a <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   175d2:	4604      	mov	r4, r0
   175d4:	b120      	cbz	r0, 175e0 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   175d6:	2100      	movs	r1, #0
   175d8:	3008      	adds	r0, #8
   175da:	f015 f903 	bl	2c7e4 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   175de:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   175e0:	4620      	mov	r0, r4
   175e2:	bd38      	pop	{r3, r4, r5, pc}
   175e4:	20000cb0 	.word	0x20000cb0

000175e8 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   175e8:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   175ea:	490b      	ldr	r1, [pc, #44]	; (17618 <bt_buf_get_cmd_complete+0x30>)
{
   175ec:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   175ee:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
   175f2:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   175f4:	b920      	cbnz	r0, 17600 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   175f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   175fa:	2001      	movs	r0, #1
   175fc:	f7ff bfe4 	b.w	175c8 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   17600:	f015 f94a 	bl	2c898 <net_buf_ref>
   17604:	2301      	movs	r3, #1
		buf->len = 0U;
   17606:	2100      	movs	r1, #0
   17608:	7503      	strb	r3, [r0, #20]
   1760a:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   1760c:	4604      	mov	r4, r0
   1760e:	3008      	adds	r0, #8
   17610:	f015 f8e8 	bl	2c7e4 <net_buf_simple_reserve>
}
   17614:	4620      	mov	r0, r4
   17616:	bd10      	pop	{r4, pc}
   17618:	20000350 	.word	0x20000350

0001761c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   1761c:	b570      	push	{r4, r5, r6, lr}
   1761e:	4604      	mov	r4, r0
	switch (evt) {
   17620:	2c0f      	cmp	r4, #15
{
   17622:	460d      	mov	r5, r1
   17624:	4610      	mov	r0, r2
   17626:	4619      	mov	r1, r3
	switch (evt) {
   17628:	d805      	bhi.n	17636 <bt_buf_get_evt+0x1a>
   1762a:	2c0d      	cmp	r4, #13
   1762c:	d912      	bls.n	17654 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   1762e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   17632:	f7ff bfd9 	b.w	175e8 <bt_buf_get_cmd_complete>
	switch (evt) {
   17636:	2c13      	cmp	r4, #19
   17638:	d10c      	bne.n	17654 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   1763a:	480b      	ldr	r0, [pc, #44]	; (17668 <bt_buf_get_evt+0x4c>)
   1763c:	f015 f8ad 	bl	2c79a <net_buf_alloc_fixed>
			if (buf) {
   17640:	4604      	mov	r4, r0
   17642:	b128      	cbz	r0, 17650 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   17644:	2100      	movs	r1, #0
   17646:	3008      	adds	r0, #8
   17648:	f015 f8cc 	bl	2c7e4 <net_buf_simple_reserve>
   1764c:	2301      	movs	r3, #1
   1764e:	7523      	strb	r3, [r4, #20]
}
   17650:	4620      	mov	r0, r4
   17652:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   17654:	4602      	mov	r2, r0
   17656:	460b      	mov	r3, r1
		if (discardable) {
   17658:	b10d      	cbz	r5, 1765e <bt_buf_get_evt+0x42>
   1765a:	4804      	ldr	r0, [pc, #16]	; (1766c <bt_buf_get_evt+0x50>)
   1765c:	e7ee      	b.n	1763c <bt_buf_get_evt+0x20>
}
   1765e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   17662:	2001      	movs	r0, #1
   17664:	f7ff bfb0 	b.w	175c8 <bt_buf_get_rx>
   17668:	20000cdc 	.word	0x20000cdc
   1766c:	20000c2c 	.word	0x20000c2c

00017670 <ver_str>:
{
   17670:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   17672:	4d0b      	ldr	r5, [pc, #44]	; (176a0 <ver_str+0x30>)
{
   17674:	4606      	mov	r6, r0
	const char * const str[] = {
   17676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   17678:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   1767a:	ac01      	add	r4, sp, #4
   1767c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1767e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   17680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   17682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   17684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
   17686:	2e0c      	cmp	r6, #12
	const char * const str[] = {
   17688:	682b      	ldr	r3, [r5, #0]
   1768a:	6023      	str	r3, [r4, #0]
		return str[ver];
   1768c:	bf9b      	ittet	ls
   1768e:	ab0e      	addls	r3, sp, #56	; 0x38
   17690:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
   17694:	4803      	ldrhi	r0, [pc, #12]	; (176a4 <ver_str+0x34>)
		return str[ver];
   17696:	f856 0c34 	ldrls.w	r0, [r6, #-52]
}
   1769a:	b00e      	add	sp, #56	; 0x38
   1769c:	bd70      	pop	{r4, r5, r6, pc}
   1769e:	bf00      	nop
   176a0:	0002e980 	.word	0x0002e980
   176a4:	0003019e 	.word	0x0003019e

000176a8 <unpair>:
{
   176a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   176aa:	4606      	mov	r6, r0
   176ac:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
   176ae:	f002 fd83 	bl	1a1b8 <bt_conn_lookup_addr_le>
	if (conn) {
   176b2:	4604      	mov	r4, r0
   176b4:	b9f8      	cbnz	r0, 176f6 <unpair+0x4e>
			keys = bt_keys_find_addr(id, addr);
   176b6:	4639      	mov	r1, r7
   176b8:	4630      	mov	r0, r6
   176ba:	f007 fd15 	bl	1f0e8 <bt_keys_find_addr>
		if (keys) {
   176be:	4605      	mov	r5, r0
   176c0:	b110      	cbz	r0, 176c8 <unpair+0x20>
			bt_keys_clear(keys);
   176c2:	4628      	mov	r0, r5
   176c4:	f007 fd20 	bl	1f108 <bt_keys_clear>
	bt_gatt_clear(id, addr);
   176c8:	4639      	mov	r1, r7
   176ca:	4630      	mov	r0, r6
   176cc:	f005 fc98 	bl	1d000 <bt_gatt_clear>
	return list->head;
   176d0:	4b14      	ldr	r3, [pc, #80]	; (17724 <unpair+0x7c>)
   176d2:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   176d4:	b323      	cbz	r3, 17720 <unpair+0x78>
	return node->next;
   176d6:	f853 490c 	ldr.w	r4, [r3], #-12
   176da:	b104      	cbz	r4, 176de <unpair+0x36>
   176dc:	3c0c      	subs	r4, #12
		if (listener->bond_deleted) {
   176de:	689b      	ldr	r3, [r3, #8]
   176e0:	b113      	cbz	r3, 176e8 <unpair+0x40>
			listener->bond_deleted(id, addr);
   176e2:	4639      	mov	r1, r7
   176e4:	4630      	mov	r0, r6
   176e6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   176e8:	b1d4      	cbz	r4, 17720 <unpair+0x78>
   176ea:	68e2      	ldr	r2, [r4, #12]
   176ec:	b102      	cbz	r2, 176f0 <unpair+0x48>
   176ee:	3a0c      	subs	r2, #12
	struct bt_keys *keys = NULL;
   176f0:	4623      	mov	r3, r4
   176f2:	4614      	mov	r4, r2
   176f4:	e7f3      	b.n	176de <unpair+0x36>
		if (conn->type == BT_CONN_TYPE_LE) {
   176f6:	7883      	ldrb	r3, [r0, #2]
   176f8:	2b01      	cmp	r3, #1
   176fa:	f04f 0300 	mov.w	r3, #0
			keys = conn->le.keys;
   176fe:	bf04      	itt	eq
   17700:	f8d0 50b4 	ldreq.w	r5, [r0, #180]	; 0xb4
			conn->le.keys = NULL;
   17704:	f8c0 30b4 	streq.w	r3, [r0, #180]	; 0xb4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   17708:	f04f 0113 	mov.w	r1, #19
	struct bt_keys *keys = NULL;
   1770c:	bf18      	it	ne
   1770e:	461d      	movne	r5, r3
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   17710:	f013 fa78 	bl	2ac04 <bt_conn_disconnect>
		bt_conn_unref(conn);
   17714:	4620      	mov	r0, r4
   17716:	f013 fa30 	bl	2ab7a <bt_conn_unref>
		if (!keys) {
   1771a:	2d00      	cmp	r5, #0
   1771c:	d1d1      	bne.n	176c2 <unpair+0x1a>
   1771e:	e7ca      	b.n	176b6 <unpair+0xe>
}
   17720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17722:	bf00      	nop
   17724:	20005b6c 	.word	0x20005b6c

00017728 <hci_disconn_complete_prio>:
{
   17728:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1772a:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   1772c:	781a      	ldrb	r2, [r3, #0]
   1772e:	b972      	cbnz	r2, 1774e <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17730:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   17734:	4620      	mov	r0, r4
   17736:	f002 fb29 	bl	19d8c <bt_conn_lookup_handle>
	if (!conn) {
   1773a:	4605      	mov	r5, r0
   1773c:	b940      	cbnz	r0, 17750 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1773e:	4b08      	ldr	r3, [pc, #32]	; (17760 <hci_disconn_complete_prio+0x38>)
   17740:	881a      	ldrh	r2, [r3, #0]
   17742:	b922      	cbnz	r2, 1774e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   17744:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   17748:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   1774c:	8018      	strh	r0, [r3, #0]
}
   1774e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   17750:	2101      	movs	r1, #1
   17752:	f002 fb23 	bl	19d9c <bt_conn_set_state>
	bt_conn_unref(conn);
   17756:	4628      	mov	r0, r5
}
   17758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1775c:	f013 ba0d 	b.w	2ab7a <bt_conn_unref>
   17760:	20006b0c 	.word	0x20006b0c

00017764 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   17764:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   17766:	4c0d      	ldr	r4, [pc, #52]	; (1779c <find_pending_connect.part.0+0x38>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   17768:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1776a:	2205      	movs	r2, #5
   1776c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   17770:	f002 fd6e 	bl	1a250 <bt_conn_lookup_state_le>
		if (!conn) {
   17774:	b978      	cbnz	r0, 17796 <find_pending_connect.part.0+0x32>
						       BT_ADDR_LE_NONE,
   17776:	4b0a      	ldr	r3, [pc, #40]	; (177a0 <find_pending_connect.part.0+0x3c>)
   17778:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1777a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   1777c:	9000      	str	r0, [sp, #0]
   1777e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   17782:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   17786:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   1778a:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   1778e:	2204      	movs	r2, #4
   17790:	4669      	mov	r1, sp
   17792:	f002 fd5d 	bl	1a250 <bt_conn_lookup_state_le>
}
   17796:	b002      	add	sp, #8
   17798:	bd10      	pop	{r4, pc}
   1779a:	bf00      	nop
   1779c:	20000350 	.word	0x20000350
   177a0:	0002e980 	.word	0x0002e980

000177a4 <bt_init.part.0>:
static int bt_init(void)
   177a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			BT_INFO("No ID address. App must call settings_load()");
   177a6:	4b07      	ldr	r3, [pc, #28]	; (177c4 <bt_init.part.0+0x20>)
   177a8:	9305      	str	r3, [sp, #20]
   177aa:	4807      	ldr	r0, [pc, #28]	; (177c8 <bt_init.part.0+0x24>)
   177ac:	2302      	movs	r3, #2
   177ae:	aa04      	add	r2, sp, #16
   177b0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   177b4:	9304      	str	r3, [sp, #16]
   177b6:	f012 ffe8 	bl	2a78a <z_log_msg_static_create.constprop.0>
}
   177ba:	2000      	movs	r0, #0
   177bc:	b007      	add	sp, #28
   177be:	f85d fb04 	ldr.w	pc, [sp], #4
   177c2:	bf00      	nop
   177c4:	000301a6 	.word	0x000301a6
   177c8:	0002e5bc 	.word	0x0002e5bc

000177cc <hci_data_buf_overflow>:
{
   177cc:	b580      	push	{r7, lr}
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   177ce:	6883      	ldr	r3, [r0, #8]
{
   177d0:	af00      	add	r7, sp, #0
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   177d2:	b088      	sub	sp, #32
   177d4:	781b      	ldrb	r3, [r3, #0]
   177d6:	466a      	mov	r2, sp
   177d8:	4906      	ldr	r1, [pc, #24]	; (177f4 <hci_data_buf_overflow+0x28>)
   177da:	4807      	ldr	r0, [pc, #28]	; (177f8 <hci_data_buf_overflow+0x2c>)
   177dc:	e9c2 1305 	strd	r1, r3, [r2, #20]
   177e0:	2303      	movs	r3, #3
   177e2:	f842 3f10 	str.w	r3, [r2, #16]!
   177e6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   177ea:	f012 ffce 	bl	2a78a <z_log_msg_static_create.constprop.0>
}
   177ee:	46bd      	mov	sp, r7
   177f0:	bd80      	pop	{r7, pc}
   177f2:	bf00      	nop
   177f4:	000301d3 	.word	0x000301d3
   177f8:	0002e5bc 	.word	0x0002e5bc

000177fc <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   177fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   177fe:	4b06      	ldr	r3, [pc, #24]	; (17818 <le_conn_param_neg_reply.part.0+0x1c>)
   17800:	9305      	str	r3, [sp, #20]
   17802:	4806      	ldr	r0, [pc, #24]	; (1781c <le_conn_param_neg_reply.part.0+0x20>)
   17804:	2302      	movs	r3, #2
   17806:	aa04      	add	r2, sp, #16
   17808:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1780c:	9304      	str	r3, [sp, #16]
   1780e:	f012 ffbc 	bl	2a78a <z_log_msg_static_create.constprop.0>
}
   17812:	b007      	add	sp, #28
   17814:	f85d fb04 	ldr.w	pc, [sp], #4
   17818:	000301fb 	.word	0x000301fb
   1781c:	0002e5bc 	.word	0x0002e5bc

00017820 <le_conn_update_complete>:
{
   17820:	b5f0      	push	{r4, r5, r6, r7, lr}
   17822:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   17824:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   17826:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   1782a:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   1782c:	4630      	mov	r0, r6
   1782e:	f002 faad 	bl	19d8c <bt_conn_lookup_handle>
	if (!conn) {
   17832:	4604      	mov	r4, r0
   17834:	b988      	cbnz	r0, 1785a <le_conn_update_complete+0x3a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17836:	466c      	mov	r4, sp
   17838:	b088      	sub	sp, #32
   1783a:	466a      	mov	r2, sp
   1783c:	4b22      	ldr	r3, [pc, #136]	; (178c8 <le_conn_update_complete+0xa8>)
   1783e:	4823      	ldr	r0, [pc, #140]	; (178cc <le_conn_update_complete+0xac>)
   17840:	e9c2 3605 	strd	r3, r6, [r2, #20]
   17844:	2303      	movs	r3, #3
   17846:	f842 3f10 	str.w	r3, [r2, #16]!
   1784a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1784e:	f012 ff9c 	bl	2a78a <z_log_msg_static_create.constprop.0>
   17852:	46a5      	mov	sp, r4
}
   17854:	370c      	adds	r7, #12
   17856:	46bd      	mov	sp, r7
   17858:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!evt->status) {
   1785a:	782b      	ldrb	r3, [r5, #0]
   1785c:	b9bb      	cbnz	r3, 1788e <le_conn_update_complete+0x6e>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1785e:	792a      	ldrb	r2, [r5, #4]
   17860:	78eb      	ldrb	r3, [r5, #3]
   17862:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17866:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1786a:	79aa      	ldrb	r2, [r5, #6]
   1786c:	796b      	ldrb	r3, [r5, #5]
   1786e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17872:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   17876:	79eb      	ldrb	r3, [r5, #7]
   17878:	7a2a      	ldrb	r2, [r5, #8]
   1787a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1787e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   17882:	f002 fb9b 	bl	19fbc <notify_le_param_updated>
	bt_conn_unref(conn);
   17886:	4620      	mov	r0, r4
   17888:	f013 f977 	bl	2ab7a <bt_conn_unref>
   1788c:	e7e2      	b.n	17854 <le_conn_update_complete+0x34>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1788e:	2b1a      	cmp	r3, #26
   17890:	d1f9      	bne.n	17886 <le_conn_update_complete+0x66>
   17892:	78c3      	ldrb	r3, [r0, #3]
   17894:	2b01      	cmp	r3, #1
   17896:	d1f6      	bne.n	17886 <le_conn_update_complete+0x66>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   17898:	f44f 7100 	mov.w	r1, #512	; 0x200
   1789c:	3004      	adds	r0, #4
   1789e:	f012 ff54 	bl	2a74a <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   178a2:	0583      	lsls	r3, r0, #22
   178a4:	d4ef      	bmi.n	17886 <le_conn_update_complete+0x66>
		param.interval_min = conn->le.interval_min;
   178a6:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   178aa:	803b      	strh	r3, [r7, #0]
		param.interval_max = conn->le.interval_max;
   178ac:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   178b0:	807b      	strh	r3, [r7, #2]
		param.latency = conn->le.pending_latency;
   178b2:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   178b6:	80bb      	strh	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   178b8:	4639      	mov	r1, r7
		param.timeout = conn->le.pending_timeout;
   178ba:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   178be:	80fb      	strh	r3, [r7, #6]
		bt_l2cap_update_conn_param(conn, &param);
   178c0:	4620      	mov	r0, r4
   178c2:	f002 fedf 	bl	1a684 <bt_l2cap_update_conn_param>
   178c6:	e7de      	b.n	17886 <le_conn_update_complete+0x66>
   178c8:	00030215 	.word	0x00030215
   178cc:	0002e5bc 	.word	0x0002e5bc

000178d0 <rx_queue_put>:
{
   178d0:	b598      	push	{r3, r4, r7, lr}
   178d2:	4601      	mov	r1, r0
   178d4:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   178d6:	480d      	ldr	r0, [pc, #52]	; (1790c <rx_queue_put+0x3c>)
   178d8:	f014 ff88 	bl	2c7ec <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   178dc:	490c      	ldr	r1, [pc, #48]	; (17910 <rx_queue_put+0x40>)
   178de:	480d      	ldr	r0, [pc, #52]	; (17914 <rx_queue_put+0x44>)
   178e0:	f015 ff04 	bl	2d6ec <k_work_submit_to_queue>
	if (err < 0) {
   178e4:	2800      	cmp	r0, #0
   178e6:	da0e      	bge.n	17906 <rx_queue_put+0x36>
		BT_ERR("Could not submit rx_work: %d", err);
   178e8:	466c      	mov	r4, sp
   178ea:	b088      	sub	sp, #32
   178ec:	466a      	mov	r2, sp
   178ee:	4b0a      	ldr	r3, [pc, #40]	; (17918 <rx_queue_put+0x48>)
   178f0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   178f4:	2303      	movs	r3, #3
   178f6:	f842 3f10 	str.w	r3, [r2, #16]!
   178fa:	4808      	ldr	r0, [pc, #32]	; (1791c <rx_queue_put+0x4c>)
   178fc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17900:	f012 ff43 	bl	2a78a <z_log_msg_static_create.constprop.0>
   17904:	46a5      	mov	sp, r4
}
   17906:	46bd      	mov	sp, r7
   17908:	bd98      	pop	{r3, r4, r7, pc}
   1790a:	bf00      	nop
   1790c:	2000048c 	.word	0x2000048c
   17910:	200006d8 	.word	0x200006d8
   17914:	20001f50 	.word	0x20001f50
   17918:	00030239 	.word	0x00030239
   1791c:	0002e5bc 	.word	0x0002e5bc

00017920 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   17920:	b5b0      	push	{r4, r5, r7, lr}
   17922:	460b      	mov	r3, r1
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   17924:	898d      	ldrh	r5, [r1, #12]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   17926:	af00      	add	r7, sp, #0
   17928:	4604      	mov	r4, r0
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   1792a:	4629      	mov	r1, r5
   1792c:	6898      	ldr	r0, [r3, #8]
   1792e:	f7ff fbdf 	bl	170f0 <bt_hex_real>
   17932:	b08a      	sub	sp, #40	; 0x28
   17934:	466a      	mov	r2, sp
   17936:	4b09      	ldr	r3, [pc, #36]	; (1795c <handle_event.part.0+0x3c>)
   17938:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1793c:	2304      	movs	r3, #4
   1793e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   17942:	4b07      	ldr	r3, [pc, #28]	; (17960 <handle_event.part.0+0x40>)
   17944:	e9c2 5007 	strd	r5, r0, [r2, #28]
   17948:	f44f 512a 	mov.w	r1, #10880	; 0x2a80
   1794c:	f842 3f10 	str.w	r3, [r2, #16]!
   17950:	4804      	ldr	r0, [pc, #16]	; (17964 <handle_event.part.0+0x44>)
   17952:	f012 ff1a 	bl	2a78a <z_log_msg_static_create.constprop.0>
}
   17956:	46bd      	mov	sp, r7
   17958:	bdb0      	pop	{r4, r5, r7, pc}
   1795a:	bf00      	nop
   1795c:	00030256 	.word	0x00030256
   17960:	01000005 	.word	0x01000005
   17964:	0002e5bc 	.word	0x0002e5bc

00017968 <hci_hardware_error>:
{
   17968:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   1796a:	2101      	movs	r1, #1
   1796c:	af00      	add	r7, sp, #0
   1796e:	3008      	adds	r0, #8
   17970:	f014 ffdf 	bl	2c932 <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   17974:	b088      	sub	sp, #32
   17976:	7803      	ldrb	r3, [r0, #0]
   17978:	466a      	mov	r2, sp
   1797a:	4906      	ldr	r1, [pc, #24]	; (17994 <hci_hardware_error+0x2c>)
   1797c:	4806      	ldr	r0, [pc, #24]	; (17998 <hci_hardware_error+0x30>)
   1797e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   17982:	2303      	movs	r3, #3
   17984:	f842 3f10 	str.w	r3, [r2, #16]!
   17988:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1798c:	f012 fefd 	bl	2a78a <z_log_msg_static_create.constprop.0>
}
   17990:	46bd      	mov	sp, r7
   17992:	bd80      	pop	{r7, pc}
   17994:	00030278 	.word	0x00030278
   17998:	0002e5bc 	.word	0x0002e5bc

0001799c <le_data_len_change>:
{
   1799c:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1799e:	6883      	ldr	r3, [r0, #8]
   179a0:	881c      	ldrh	r4, [r3, #0]
{
   179a2:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   179a4:	4620      	mov	r0, r4
   179a6:	f002 f9f1 	bl	19d8c <bt_conn_lookup_handle>
	if (!conn) {
   179aa:	b980      	cbnz	r0, 179ce <le_data_len_change+0x32>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   179ac:	466d      	mov	r5, sp
   179ae:	b088      	sub	sp, #32
   179b0:	466a      	mov	r2, sp
   179b2:	4b08      	ldr	r3, [pc, #32]	; (179d4 <le_data_len_change+0x38>)
   179b4:	4808      	ldr	r0, [pc, #32]	; (179d8 <le_data_len_change+0x3c>)
   179b6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   179ba:	2303      	movs	r3, #3
   179bc:	f842 3f10 	str.w	r3, [r2, #16]!
   179c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   179c4:	f012 fee1 	bl	2a78a <z_log_msg_static_create.constprop.0>
   179c8:	46ad      	mov	sp, r5
}
   179ca:	46bd      	mov	sp, r7
   179cc:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   179ce:	f013 f8d4 	bl	2ab7a <bt_conn_unref>
   179d2:	e7fa      	b.n	179ca <le_data_len_change+0x2e>
   179d4:	00030215 	.word	0x00030215
   179d8:	0002e5bc 	.word	0x0002e5bc

000179dc <le_phy_update_complete>:
{
   179dc:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   179de:	6883      	ldr	r3, [r0, #8]
   179e0:	f8b3 4001 	ldrh.w	r4, [r3, #1]
{
   179e4:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   179e6:	4620      	mov	r0, r4
   179e8:	f002 f9d0 	bl	19d8c <bt_conn_lookup_handle>
	if (!conn) {
   179ec:	b980      	cbnz	r0, 17a10 <le_phy_update_complete+0x34>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   179ee:	466d      	mov	r5, sp
   179f0:	b088      	sub	sp, #32
   179f2:	466a      	mov	r2, sp
   179f4:	4b08      	ldr	r3, [pc, #32]	; (17a18 <le_phy_update_complete+0x3c>)
   179f6:	4809      	ldr	r0, [pc, #36]	; (17a1c <le_phy_update_complete+0x40>)
   179f8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   179fc:	2303      	movs	r3, #3
   179fe:	f842 3f10 	str.w	r3, [r2, #16]!
   17a02:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17a06:	f012 fec0 	bl	2a78a <z_log_msg_static_create.constprop.0>
   17a0a:	46ad      	mov	sp, r5
}
   17a0c:	46bd      	mov	sp, r7
   17a0e:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   17a10:	f013 f8b3 	bl	2ab7a <bt_conn_unref>
   17a14:	e7fa      	b.n	17a0c <le_phy_update_complete+0x30>
   17a16:	bf00      	nop
   17a18:	00030215 	.word	0x00030215
   17a1c:	0002e5bc 	.word	0x0002e5bc

00017a20 <hci_disconn_complete>:
{
   17a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   17a24:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   17a26:	782e      	ldrb	r6, [r5, #0]
{
   17a28:	af00      	add	r7, sp, #0
	if (evt->status) {
   17a2a:	b9ae      	cbnz	r6, 17a58 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17a2c:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   17a30:	4640      	mov	r0, r8
   17a32:	f002 f9ab 	bl	19d8c <bt_conn_lookup_handle>
	if (!conn) {
   17a36:	4604      	mov	r4, r0
   17a38:	b988      	cbnz	r0, 17a5e <hci_disconn_complete+0x3e>
		BT_ERR("Unable to look up conn with handle %u", handle);
   17a3a:	466c      	mov	r4, sp
   17a3c:	b088      	sub	sp, #32
   17a3e:	466a      	mov	r2, sp
   17a40:	4b0b      	ldr	r3, [pc, #44]	; (17a70 <hci_disconn_complete+0x50>)
   17a42:	480c      	ldr	r0, [pc, #48]	; (17a74 <hci_disconn_complete+0x54>)
   17a44:	e9c2 3805 	strd	r3, r8, [r2, #20]
   17a48:	2303      	movs	r3, #3
   17a4a:	f842 3f10 	str.w	r3, [r2, #16]!
   17a4e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17a52:	f012 fe9a 	bl	2a78a <z_log_msg_static_create.constprop.0>
   17a56:	46a5      	mov	sp, r4
}
   17a58:	46bd      	mov	sp, r7
   17a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   17a5e:	78eb      	ldrb	r3, [r5, #3]
   17a60:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17a62:	4631      	mov	r1, r6
   17a64:	f002 f99a 	bl	19d9c <bt_conn_set_state>
		bt_conn_unref(conn);
   17a68:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   17a6a:	f013 f886 	bl	2ab7a <bt_conn_unref>
   17a6e:	e7f3      	b.n	17a58 <hci_disconn_complete+0x38>
   17a70:	0003029a 	.word	0x0003029a
   17a74:	0002e5bc 	.word	0x0002e5bc

00017a78 <handle_event>:
{
   17a78:	b598      	push	{r3, r4, r7, lr}
   17a7a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   17a7e:	af00      	add	r7, sp, #0
		if (handler->event != event) {
   17a80:	7814      	ldrb	r4, [r2, #0]
   17a82:	4284      	cmp	r4, r0
   17a84:	d005      	beq.n	17a92 <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   17a86:	3208      	adds	r2, #8
   17a88:	429a      	cmp	r2, r3
   17a8a:	d1f9      	bne.n	17a80 <handle_event+0x8>
	if (err == -EOPNOTSUPP) {
   17a8c:	f7ff ff48 	bl	17920 <handle_event.part.0>
}
   17a90:	e013      	b.n	17aba <handle_event+0x42>
		if (buf->len < handler->min_len) {
   17a92:	898b      	ldrh	r3, [r1, #12]
   17a94:	7854      	ldrb	r4, [r2, #1]
   17a96:	429c      	cmp	r4, r3
   17a98:	d911      	bls.n	17abe <handle_event+0x46>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   17a9a:	466c      	mov	r4, sp
   17a9c:	b088      	sub	sp, #32
   17a9e:	466a      	mov	r2, sp
   17aa0:	4909      	ldr	r1, [pc, #36]	; (17ac8 <handle_event+0x50>)
   17aa2:	61d0      	str	r0, [r2, #28]
   17aa4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   17aa8:	2304      	movs	r3, #4
   17aaa:	f842 3f10 	str.w	r3, [r2, #16]!
   17aae:	4807      	ldr	r0, [pc, #28]	; (17acc <handle_event+0x54>)
   17ab0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   17ab4:	f012 fe69 	bl	2a78a <z_log_msg_static_create.constprop.0>
   17ab8:	46a5      	mov	sp, r4
}
   17aba:	46bd      	mov	sp, r7
   17abc:	bd98      	pop	{r3, r4, r7, pc}
		handler->handler(buf);
   17abe:	6853      	ldr	r3, [r2, #4]
   17ac0:	4608      	mov	r0, r1
   17ac2:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   17ac4:	e7f9      	b.n	17aba <handle_event+0x42>
   17ac6:	bf00      	nop
   17ac8:	000302c0 	.word	0x000302c0
   17acc:	0002e5bc 	.word	0x0002e5bc

00017ad0 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   17ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   17ad2:	4855      	ldr	r0, [pc, #340]	; (17c28 <rx_work_handler+0x158>)
{
   17ad4:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   17ad6:	f014 fea7 	bl	2c828 <net_buf_slist_get>
	if (!buf) {
   17ada:	4604      	mov	r4, r0
   17adc:	2800      	cmp	r0, #0
   17ade:	d06a      	beq.n	17bb6 <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   17ae0:	7d03      	ldrb	r3, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
   17ae2:	2b01      	cmp	r3, #1
   17ae4:	d069      	beq.n	17bba <rx_work_handler+0xea>
   17ae6:	2b03      	cmp	r3, #3
   17ae8:	f040 8099 	bne.w	17c1e <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17aec:	8983      	ldrh	r3, [r0, #12]
   17aee:	2b03      	cmp	r3, #3
   17af0:	d80c      	bhi.n	17b0c <rx_work_handler+0x3c>
   17af2:	4a4e      	ldr	r2, [pc, #312]	; (17c2c <rx_work_handler+0x15c>)
   17af4:	494e      	ldr	r1, [pc, #312]	; (17c30 <rx_work_handler+0x160>)
   17af6:	484f      	ldr	r0, [pc, #316]	; (17c34 <rx_work_handler+0x164>)
   17af8:	f240 13eb 	movw	r3, #491	; 0x1eb
   17afc:	f011 ffa7 	bl	29a4e <assert_print>
   17b00:	4040      	eors	r0, r0
   17b02:	f380 8811 	msr	BASEPRI, r0
   17b06:	f04f 0003 	mov.w	r0, #3
   17b0a:	df02      	svc	2
   17b0c:	2104      	movs	r1, #4
   17b0e:	f104 0008 	add.w	r0, r4, #8
   17b12:	f014 ff0e 	bl	2c932 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   17b16:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
   17b18:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   17b1a:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   17b1c:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   17b1e:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   17b22:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   17b24:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   17b26:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   17b28:	d010      	beq.n	17b4c <rx_work_handler+0x7c>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   17b2a:	466d      	mov	r5, sp
   17b2c:	b088      	sub	sp, #32
   17b2e:	466a      	mov	r2, sp
   17b30:	4841      	ldr	r0, [pc, #260]	; (17c38 <rx_work_handler+0x168>)
   17b32:	61d3      	str	r3, [r2, #28]
   17b34:	2304      	movs	r3, #4
   17b36:	e9c2 0105 	strd	r0, r1, [r2, #20]
   17b3a:	f842 3f10 	str.w	r3, [r2, #16]!
   17b3e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   17b42:	483e      	ldr	r0, [pc, #248]	; (17c3c <rx_work_handler+0x16c>)
   17b44:	f012 fe21 	bl	2a78a <z_log_msg_static_create.constprop.0>
   17b48:	46ad      	mov	sp, r5
   17b4a:	e064      	b.n	17c16 <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   17b4c:	f002 f91e 	bl	19d8c <bt_conn_lookup_handle>
	if (!conn) {
   17b50:	4605      	mov	r5, r0
   17b52:	b960      	cbnz	r0, 17b6e <rx_work_handler+0x9e>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   17b54:	466d      	mov	r5, sp
   17b56:	b088      	sub	sp, #32
   17b58:	8ae3      	ldrh	r3, [r4, #22]
   17b5a:	466a      	mov	r2, sp
   17b5c:	4938      	ldr	r1, [pc, #224]	; (17c40 <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
   17b5e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   17b62:	2303      	movs	r3, #3
   17b64:	f842 3f10 	str.w	r3, [r2, #16]!
   17b68:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17b6c:	e7e9      	b.n	17b42 <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   17b6e:	f002 fa03 	bl	19f78 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   17b72:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   17b74:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   17b76:	4621      	mov	r1, r4
   17b78:	4628      	mov	r0, r5
   17b7a:	f002 f803 	bl	19b84 <bt_conn_recv>
	bt_conn_unref(conn);
   17b7e:	4628      	mov	r0, r5
   17b80:	f012 fffb 	bl	2ab7a <bt_conn_unref>
	return list->head;
   17b84:	4b2f      	ldr	r3, [pc, #188]	; (17c44 <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   17b86:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   17b8a:	b1a3      	cbz	r3, 17bb6 <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   17b8c:	492e      	ldr	r1, [pc, #184]	; (17c48 <rx_work_handler+0x178>)
   17b8e:	482f      	ldr	r0, [pc, #188]	; (17c4c <rx_work_handler+0x17c>)
   17b90:	f015 fdac 	bl	2d6ec <k_work_submit_to_queue>
#endif
		if (err < 0) {
   17b94:	2800      	cmp	r0, #0
   17b96:	da0e      	bge.n	17bb6 <rx_work_handler+0xe6>
			BT_ERR("Could not submit rx_work: %d", err);
   17b98:	466c      	mov	r4, sp
   17b9a:	b088      	sub	sp, #32
   17b9c:	466a      	mov	r2, sp
   17b9e:	4b2c      	ldr	r3, [pc, #176]	; (17c50 <rx_work_handler+0x180>)
   17ba0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17ba4:	2303      	movs	r3, #3
   17ba6:	f842 3f10 	str.w	r3, [r2, #16]!
   17baa:	4824      	ldr	r0, [pc, #144]	; (17c3c <rx_work_handler+0x16c>)
   17bac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17bb0:	f012 fdeb 	bl	2a78a <z_log_msg_static_create.constprop.0>
   17bb4:	46a5      	mov	sp, r4
		}
	}
}
   17bb6:	46bd      	mov	sp, r7
   17bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17bba:	8983      	ldrh	r3, [r0, #12]
   17bbc:	2b01      	cmp	r3, #1
   17bbe:	d80c      	bhi.n	17bda <rx_work_handler+0x10a>
   17bc0:	4a1a      	ldr	r2, [pc, #104]	; (17c2c <rx_work_handler+0x15c>)
   17bc2:	491b      	ldr	r1, [pc, #108]	; (17c30 <rx_work_handler+0x160>)
   17bc4:	481b      	ldr	r0, [pc, #108]	; (17c34 <rx_work_handler+0x164>)
   17bc6:	f640 1359 	movw	r3, #2393	; 0x959
   17bca:	f011 ff40 	bl	29a4e <assert_print>
   17bce:	4040      	eors	r0, r0
   17bd0:	f380 8811 	msr	BASEPRI, r0
   17bd4:	f04f 0003 	mov.w	r0, #3
   17bd8:	df02      	svc	2
   17bda:	2102      	movs	r1, #2
   17bdc:	f104 0008 	add.w	r0, r4, #8
   17be0:	f014 fea7 	bl	2c932 <net_buf_simple_pull_mem>
   17be4:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   17be6:	7800      	ldrb	r0, [r0, #0]
   17be8:	f012 fd84 	bl	2a6f4 <bt_hci_evt_get_flags>
   17bec:	0783      	lsls	r3, r0, #30
   17bee:	d40c      	bmi.n	17c0a <rx_work_handler+0x13a>
   17bf0:	4a0e      	ldr	r2, [pc, #56]	; (17c2c <rx_work_handler+0x15c>)
   17bf2:	4918      	ldr	r1, [pc, #96]	; (17c54 <rx_work_handler+0x184>)
   17bf4:	480f      	ldr	r0, [pc, #60]	; (17c34 <rx_work_handler+0x164>)
   17bf6:	f640 135d 	movw	r3, #2397	; 0x95d
   17bfa:	f011 ff28 	bl	29a4e <assert_print>
   17bfe:	4040      	eors	r0, r0
   17c00:	f380 8811 	msr	BASEPRI, r0
   17c04:	f04f 0003 	mov.w	r0, #3
   17c08:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   17c0a:	4a13      	ldr	r2, [pc, #76]	; (17c58 <rx_work_handler+0x188>)
   17c0c:	7828      	ldrb	r0, [r5, #0]
   17c0e:	2306      	movs	r3, #6
   17c10:	4621      	mov	r1, r4
   17c12:	f7ff ff31 	bl	17a78 <handle_event>
		net_buf_unref(buf);
   17c16:	4620      	mov	r0, r4
   17c18:	f007 fcac 	bl	1f574 <net_buf_unref>
		break;
   17c1c:	e7b2      	b.n	17b84 <rx_work_handler+0xb4>
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   17c1e:	466d      	mov	r5, sp
   17c20:	b088      	sub	sp, #32
   17c22:	466a      	mov	r2, sp
   17c24:	490d      	ldr	r1, [pc, #52]	; (17c5c <rx_work_handler+0x18c>)
   17c26:	e79a      	b.n	17b5e <rx_work_handler+0x8e>
   17c28:	2000048c 	.word	0x2000048c
   17c2c:	000302e2 	.word	0x000302e2
   17c30:	00030316 	.word	0x00030316
   17c34:	0003032f 	.word	0x0003032f
   17c38:	0003034c 	.word	0x0003034c
   17c3c:	0002e5bc 	.word	0x0002e5bc
   17c40:	00030370 	.word	0x00030370
   17c44:	20000350 	.word	0x20000350
   17c48:	200006d8 	.word	0x200006d8
   17c4c:	20001f50 	.word	0x20001f50
   17c50:	00030239 	.word	0x00030239
   17c54:	00030392 	.word	0x00030392
   17c58:	0002ee44 	.word	0x0002ee44
   17c5c:	000303c0 	.word	0x000303c0

00017c60 <hci_le_meta_event>:
{
   17c60:	b510      	push	{r4, lr}
   17c62:	2101      	movs	r1, #1
   17c64:	4604      	mov	r4, r0
   17c66:	3008      	adds	r0, #8
   17c68:	f014 fe63 	bl	2c932 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   17c6c:	4621      	mov	r1, r4
   17c6e:	4a03      	ldr	r2, [pc, #12]	; (17c7c <hci_le_meta_event+0x1c>)
   17c70:	7800      	ldrb	r0, [r0, #0]
}
   17c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   17c76:	230a      	movs	r3, #10
   17c78:	f7ff befe 	b.w	17a78 <handle_event>
   17c7c:	0002edd4 	.word	0x0002edd4

00017c80 <le_remote_feat_complete>:
{
   17c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   17c82:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17c84:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   17c88:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   17c8a:	4630      	mov	r0, r6
   17c8c:	f002 f87e 	bl	19d8c <bt_conn_lookup_handle>
	if (!conn) {
   17c90:	4604      	mov	r4, r0
   17c92:	b980      	cbnz	r0, 17cb6 <le_remote_feat_complete+0x36>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17c94:	466c      	mov	r4, sp
   17c96:	b088      	sub	sp, #32
   17c98:	466a      	mov	r2, sp
   17c9a:	4b10      	ldr	r3, [pc, #64]	; (17cdc <le_remote_feat_complete+0x5c>)
   17c9c:	4810      	ldr	r0, [pc, #64]	; (17ce0 <le_remote_feat_complete+0x60>)
   17c9e:	e9c2 3605 	strd	r3, r6, [r2, #20]
   17ca2:	2303      	movs	r3, #3
   17ca4:	f842 3f10 	str.w	r3, [r2, #16]!
   17ca8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17cac:	f012 fd6d 	bl	2a78a <z_log_msg_static_create.constprop.0>
   17cb0:	46a5      	mov	sp, r4
}
   17cb2:	46bd      	mov	sp, r7
   17cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   17cb6:	782b      	ldrb	r3, [r5, #0]
   17cb8:	b93b      	cbnz	r3, 17cca <le_remote_feat_complete+0x4a>
   17cba:	f8d5 3003 	ldr.w	r3, [r5, #3]
   17cbe:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
   17cc2:	f8d5 3007 	ldr.w	r3, [r5, #7]
   17cc6:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17cca:	f44f 6100 	mov.w	r1, #2048	; 0x800
   17cce:	1d20      	adds	r0, r4, #4
   17cd0:	f012 fd3b 	bl	2a74a <atomic_or>
	bt_conn_unref(conn);
   17cd4:	4620      	mov	r0, r4
   17cd6:	f012 ff50 	bl	2ab7a <bt_conn_unref>
   17cda:	e7ea      	b.n	17cb2 <le_remote_feat_complete+0x32>
   17cdc:	00030215 	.word	0x00030215
   17ce0:	0002e5bc 	.word	0x0002e5bc

00017ce4 <hci_cmd_done>:
{
   17ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17ce8:	4606      	mov	r6, r0
   17cea:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   17cec:	7990      	ldrb	r0, [r2, #6]
   17cee:	4d43      	ldr	r5, [pc, #268]	; (17dfc <hci_cmd_done+0x118>)
{
   17cf0:	4688      	mov	r8, r1
   17cf2:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   17cf4:	f007 fb7a 	bl	1f3ec <net_buf_pool_get>
   17cf8:	4285      	cmp	r5, r0
   17cfa:	d018      	beq.n	17d2e <hci_cmd_done+0x4a>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   17cfc:	79a4      	ldrb	r4, [r4, #6]
   17cfe:	4620      	mov	r0, r4
   17d00:	f007 fb74 	bl	1f3ec <net_buf_pool_get>
   17d04:	46e8      	mov	r8, sp
   17d06:	b08a      	sub	sp, #40	; 0x28
   17d08:	466a      	mov	r2, sp
   17d0a:	4b3d      	ldr	r3, [pc, #244]	; (17e00 <hci_cmd_done+0x11c>)
   17d0c:	6255      	str	r5, [r2, #36]	; 0x24
   17d0e:	e9c2 3605 	strd	r3, r6, [r2, #20]
   17d12:	2306      	movs	r3, #6
   17d14:	e9c2 4007 	strd	r4, r0, [r2, #28]
   17d18:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   17d1c:	f842 3f10 	str.w	r3, [r2, #16]!
   17d20:	4838      	ldr	r0, [pc, #224]	; (17e04 <hci_cmd_done+0x120>)
   17d22:	f012 fd32 	bl	2a78a <z_log_msg_static_create.constprop.0>
   17d26:	46c5      	mov	sp, r8
}
   17d28:	46bd      	mov	sp, r7
   17d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   17d2e:	4620      	mov	r0, r4
   17d30:	f007 fb64 	bl	1f3fc <net_buf_id>
   17d34:	4d34      	ldr	r5, [pc, #208]	; (17e08 <hci_cmd_done+0x124>)
   17d36:	f04f 090c 	mov.w	r9, #12
   17d3a:	fb09 5000 	mla	r0, r9, r0, r5
   17d3e:	8843      	ldrh	r3, [r0, #2]
   17d40:	42b3      	cmp	r3, r6
   17d42:	d016      	beq.n	17d72 <hci_cmd_done+0x8e>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   17d44:	4620      	mov	r0, r4
   17d46:	f007 fb59 	bl	1f3fc <net_buf_id>
   17d4a:	fb09 5500 	mla	r5, r9, r0, r5
   17d4e:	466c      	mov	r4, sp
   17d50:	b088      	sub	sp, #32
   17d52:	886b      	ldrh	r3, [r5, #2]
   17d54:	466a      	mov	r2, sp
   17d56:	492d      	ldr	r1, [pc, #180]	; (17e0c <hci_cmd_done+0x128>)
   17d58:	61d3      	str	r3, [r2, #28]
   17d5a:	2304      	movs	r3, #4
   17d5c:	e9c2 1605 	strd	r1, r6, [r2, #20]
   17d60:	4828      	ldr	r0, [pc, #160]	; (17e04 <hci_cmd_done+0x120>)
   17d62:	f842 3f10 	str.w	r3, [r2, #16]!
   17d66:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   17d6a:	f012 fd0e 	bl	2a78a <z_log_msg_static_create.constprop.0>
   17d6e:	46a5      	mov	sp, r4
		return;
   17d70:	e7da      	b.n	17d28 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   17d72:	4e27      	ldr	r6, [pc, #156]	; (17e10 <hci_cmd_done+0x12c>)
   17d74:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   17d78:	b120      	cbz	r0, 17d84 <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   17d7a:	f007 fbfb 	bl	1f574 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   17d7e:	2300      	movs	r3, #0
   17d80:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   17d84:	4620      	mov	r0, r4
   17d86:	f007 fb39 	bl	1f3fc <net_buf_id>
   17d8a:	260c      	movs	r6, #12
   17d8c:	fb06 5000 	mla	r0, r6, r0, r5
   17d90:	6843      	ldr	r3, [r0, #4]
   17d92:	b1ab      	cbz	r3, 17dc0 <hci_cmd_done+0xdc>
   17d94:	f1b8 0f00 	cmp.w	r8, #0
   17d98:	d112      	bne.n	17dc0 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   17d9a:	4620      	mov	r0, r4
   17d9c:	f007 fb2e 	bl	1f3fc <net_buf_id>
   17da0:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   17da4:	2101      	movs	r1, #1
   17da6:	6842      	ldr	r2, [r0, #4]
   17da8:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   17dac:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   17dae:	f003 061f 	and.w	r6, r3, #31
   17db2:	40b1      	lsls	r1, r6
	if (val) {
   17db4:	095b      	lsrs	r3, r3, #5
   17db6:	b1da      	cbz	r2, 17df0 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17db8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   17dbc:	f012 fcc5 	bl	2a74a <atomic_or>
	if (cmd(buf)->sync) {
   17dc0:	4620      	mov	r0, r4
   17dc2:	f007 fb1b 	bl	1f3fc <net_buf_id>
   17dc6:	260c      	movs	r6, #12
   17dc8:	fb06 5000 	mla	r0, r6, r0, r5
   17dcc:	6883      	ldr	r3, [r0, #8]
   17dce:	2b00      	cmp	r3, #0
   17dd0:	d0aa      	beq.n	17d28 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   17dd2:	4620      	mov	r0, r4
   17dd4:	f007 fb12 	bl	1f3fc <net_buf_id>
   17dd8:	4370      	muls	r0, r6
   17dda:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   17dde:	4620      	mov	r0, r4
   17de0:	f007 fb0c 	bl	1f3fc <net_buf_id>
   17de4:	fb06 5500 	mla	r5, r6, r0, r5
   17de8:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   17dea:	f00b fb83 	bl	234f4 <z_impl_k_sem_give>
}
   17dee:	e79b      	b.n	17d28 <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17df0:	43c9      	mvns	r1, r1
   17df2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   17df6:	f012 fccb 	bl	2a790 <atomic_and.isra.0>
   17dfa:	e7e1      	b.n	17dc0 <hci_cmd_done+0xdc>
   17dfc:	20000c84 	.word	0x20000c84
   17e00:	000303d4 	.word	0x000303d4
   17e04:	0002e5bc 	.word	0x0002e5bc
   17e08:	20005b40 	.word	0x20005b40
   17e0c:	00030409 	.word	0x00030409
   17e10:	20000350 	.word	0x20000350

00017e14 <hci_cmd_status>:
{
   17e14:	b538      	push	{r3, r4, r5, lr}
   17e16:	2104      	movs	r1, #4
   17e18:	4604      	mov	r4, r0
   17e1a:	3008      	adds	r0, #8
   17e1c:	f014 fd89 	bl	2c932 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   17e20:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   17e22:	7801      	ldrb	r1, [r0, #0]
   17e24:	8840      	ldrh	r0, [r0, #2]
   17e26:	4622      	mov	r2, r4
   17e28:	f7ff ff5c 	bl	17ce4 <hci_cmd_done>
	if (ncmd) {
   17e2c:	b125      	cbz	r5, 17e38 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   17e2e:	4803      	ldr	r0, [pc, #12]	; (17e3c <hci_cmd_status+0x28>)
}
   17e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17e34:	f00b bb5e 	b.w	234f4 <z_impl_k_sem_give>
   17e38:	bd38      	pop	{r3, r4, r5, pc}
   17e3a:	bf00      	nop
   17e3c:	20000470 	.word	0x20000470

00017e40 <hci_cmd_complete>:
{
   17e40:	b538      	push	{r3, r4, r5, lr}
   17e42:	2103      	movs	r1, #3
   17e44:	4604      	mov	r4, r0
   17e46:	3008      	adds	r0, #8
   17e48:	f014 fd73 	bl	2c932 <net_buf_simple_pull_mem>
	status = buf->data[0];
   17e4c:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   17e4e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   17e50:	7819      	ldrb	r1, [r3, #0]
   17e52:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   17e56:	4622      	mov	r2, r4
   17e58:	f7ff ff44 	bl	17ce4 <hci_cmd_done>
	if (ncmd) {
   17e5c:	b125      	cbz	r5, 17e68 <hci_cmd_complete+0x28>
   17e5e:	4803      	ldr	r0, [pc, #12]	; (17e6c <hci_cmd_complete+0x2c>)
}
   17e60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17e64:	f00b bb46 	b.w	234f4 <z_impl_k_sem_give>
   17e68:	bd38      	pop	{r3, r4, r5, pc}
   17e6a:	bf00      	nop
   17e6c:	20000470 	.word	0x20000470

00017e70 <hci_num_completed_packets>:
{
   17e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e74:	b087      	sub	sp, #28
	for (i = 0; i < evt->num_handles; i++) {
   17e76:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   17e78:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
   17e7c:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 17f78 <hci_num_completed_packets+0x108>
{
   17e80:	af00      	add	r7, sp, #0
			tx->pending_no_cb = 0U;
   17e82:	46a9      	mov	r9, r5
	for (i = 0; i < evt->num_handles; i++) {
   17e84:	f898 3000 	ldrb.w	r3, [r8]
   17e88:	429d      	cmp	r5, r3
   17e8a:	db03      	blt.n	17e94 <hci_num_completed_packets+0x24>
}
   17e8c:	371c      	adds	r7, #28
   17e8e:	46bd      	mov	sp, r7
   17e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   17e94:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   17e98:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   17e9c:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   17ea0:	4658      	mov	r0, fp
   17ea2:	f001 ff73 	bl	19d8c <bt_conn_lookup_handle>
		if (!conn) {
   17ea6:	4604      	mov	r4, r0
   17ea8:	b1d8      	cbz	r0, 17ee2 <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   17eaa:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   17eae:	2e00      	cmp	r6, #0
   17eb0:	d040      	beq.n	17f34 <hci_num_completed_packets+0xc4>
	__asm__ volatile(
   17eb2:	f04f 0340 	mov.w	r3, #64	; 0x40
   17eb6:	f3ef 8211 	mrs	r2, BASEPRI
   17eba:	f383 8812 	msr	BASEPRI_MAX, r3
   17ebe:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   17ec2:	69e3      	ldr	r3, [r4, #28]
   17ec4:	b1f3      	cbz	r3, 17f04 <hci_num_completed_packets+0x94>
				conn->pending_no_cb--;
   17ec6:	3b01      	subs	r3, #1
   17ec8:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   17eca:	f382 8811 	msr	BASEPRI, r2
   17ece:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   17ed2:	4620      	mov	r0, r4
   17ed4:	f001 fe1e 	bl	19b14 <bt_conn_get_pkts>
   17ed8:	3e01      	subs	r6, #1
   17eda:	f00b fb0b 	bl	234f4 <z_impl_k_sem_give>
   17ede:	b2b6      	uxth	r6, r6
   17ee0:	e7e5      	b.n	17eae <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
   17ee2:	466c      	mov	r4, sp
   17ee4:	b088      	sub	sp, #32
   17ee6:	466a      	mov	r2, sp
   17ee8:	4b24      	ldr	r3, [pc, #144]	; (17f7c <hci_num_completed_packets+0x10c>)
   17eea:	4825      	ldr	r0, [pc, #148]	; (17f80 <hci_num_completed_packets+0x110>)
   17eec:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   17ef0:	2303      	movs	r3, #3
   17ef2:	f842 3f10 	str.w	r3, [r2, #16]!
   17ef6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17efa:	f012 fc46 	bl	2a78a <z_log_msg_static_create.constprop.0>
   17efe:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   17f00:	3501      	adds	r5, #1
   17f02:	e7bf      	b.n	17e84 <hci_num_completed_packets+0x14>
   17f04:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   17f06:	b12b      	cbz	r3, 17f14 <hci_num_completed_packets+0xa4>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17f08:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   17f0a:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   17f0c:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17f0e:	428b      	cmp	r3, r1
	list->tail = node;
   17f10:	bf08      	it	eq
   17f12:	61a0      	streq	r0, [r4, #24]
   17f14:	f382 8811 	msr	BASEPRI, r2
   17f18:	f3bf 8f6f 	isb	sy
			if (!node) {
   17f1c:	b973      	cbnz	r3, 17f3c <hci_num_completed_packets+0xcc>
				BT_ERR("packets count mismatch");
   17f1e:	2302      	movs	r3, #2
   17f20:	4817      	ldr	r0, [pc, #92]	; (17f80 <hci_num_completed_packets+0x110>)
   17f22:	f8c7 a014 	str.w	sl, [r7, #20]
   17f26:	f107 0210 	add.w	r2, r7, #16
   17f2a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17f2e:	613b      	str	r3, [r7, #16]
   17f30:	f012 fc2b 	bl	2a78a <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   17f34:	4620      	mov	r0, r4
   17f36:	f012 fe20 	bl	2ab7a <bt_conn_unref>
   17f3a:	e7e1      	b.n	17f00 <hci_num_completed_packets+0x90>
	__asm__ volatile(
   17f3c:	f04f 0240 	mov.w	r2, #64	; 0x40
   17f40:	f3ef 8111 	mrs	r1, BASEPRI
   17f44:	f382 8812 	msr	BASEPRI_MAX, r2
   17f48:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   17f4c:	68da      	ldr	r2, [r3, #12]
   17f4e:	61e2      	str	r2, [r4, #28]
	return list->tail;
   17f50:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   17f52:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   17f56:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
   17f5a:	b94a      	cbnz	r2, 17f70 <hci_num_completed_packets+0x100>
	list->head = node;
   17f5c:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   17f60:	f381 8811 	msr	BASEPRI, r1
   17f64:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   17f68:	4658      	mov	r0, fp
   17f6a:	f00b fc51 	bl	23810 <k_work_submit>
   17f6e:	e7b0      	b.n	17ed2 <hci_num_completed_packets+0x62>
	parent->next = child;
   17f70:	6013      	str	r3, [r2, #0]
	list->tail = node;
   17f72:	6263      	str	r3, [r4, #36]	; 0x24
}
   17f74:	e7f4      	b.n	17f60 <hci_num_completed_packets+0xf0>
   17f76:	bf00      	nop
   17f78:	00030458 	.word	0x00030458
   17f7c:	0003043c 	.word	0x0003043c
   17f80:	0002e5bc 	.word	0x0002e5bc

00017f84 <bt_hci_cmd_state_set_init>:
{
   17f84:	b510      	push	{r4, lr}
	state->bit = bit;
   17f86:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   17f8a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   17f8e:	720b      	strb	r3, [r1, #8]
{
   17f90:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   17f92:	f007 fa33 	bl	1f3fc <net_buf_id>
   17f96:	4b03      	ldr	r3, [pc, #12]	; (17fa4 <bt_hci_cmd_state_set_init+0x20>)
   17f98:	220c      	movs	r2, #12
   17f9a:	fb02 3300 	mla	r3, r2, r0, r3
   17f9e:	605c      	str	r4, [r3, #4]
}
   17fa0:	bd10      	pop	{r4, pc}
   17fa2:	bf00      	nop
   17fa4:	20005b40 	.word	0x20005b40

00017fa8 <bt_hci_cmd_create>:
{
   17fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   17fac:	f04f 32ff 	mov.w	r2, #4294967295
   17fb0:	f04f 33ff 	mov.w	r3, #4294967295
   17fb4:	4606      	mov	r6, r0
   17fb6:	4817      	ldr	r0, [pc, #92]	; (18014 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   17fb8:	4d17      	ldr	r5, [pc, #92]	; (18018 <bt_hci_cmd_create+0x70>)
{
   17fba:	460f      	mov	r7, r1
   17fbc:	f014 fbed 	bl	2c79a <net_buf_alloc_fixed>
   17fc0:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   17fc2:	f100 0a08 	add.w	sl, r0, #8
   17fc6:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   17fc8:	f04f 0800 	mov.w	r8, #0
   17fcc:	4650      	mov	r0, sl
   17fce:	f014 fc09 	bl	2c7e4 <net_buf_simple_reserve>
   17fd2:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   17fd6:	4620      	mov	r0, r4
   17fd8:	f007 fa10 	bl	1f3fc <net_buf_id>
   17fdc:	f04f 090c 	mov.w	r9, #12
   17fe0:	fb09 5000 	mla	r0, r9, r0, r5
   17fe4:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   17fe6:	4620      	mov	r0, r4
   17fe8:	f007 fa08 	bl	1f3fc <net_buf_id>
   17fec:	fb09 5000 	mla	r0, r9, r0, r5
   17ff0:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   17ff4:	4620      	mov	r0, r4
   17ff6:	f007 fa01 	bl	1f3fc <net_buf_id>
   17ffa:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   17ffe:	2103      	movs	r1, #3
   18000:	f8c5 8004 	str.w	r8, [r5, #4]
   18004:	4650      	mov	r0, sl
   18006:	f014 fc6d 	bl	2c8e4 <net_buf_simple_add>
	hdr->param_len = param_len;
   1800a:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   1800c:	8006      	strh	r6, [r0, #0]
}
   1800e:	4620      	mov	r0, r4
   18010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18014:	20000c84 	.word	0x20000c84
   18018:	20005b40 	.word	0x20005b40

0001801c <bt_hci_cmd_send_sync>:
{
   1801c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18020:	b087      	sub	sp, #28
   18022:	4680      	mov	r8, r0
   18024:	af00      	add	r7, sp, #0
   18026:	4615      	mov	r5, r2
	if (!buf) {
   18028:	460c      	mov	r4, r1
   1802a:	b921      	cbnz	r1, 18036 <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   1802c:	f7ff ffbc 	bl	17fa8 <bt_hci_cmd_create>
		if (!buf) {
   18030:	4604      	mov	r4, r0
   18032:	2800      	cmp	r0, #0
   18034:	d05b      	beq.n	180ee <bt_hci_cmd_send_sync+0xd2>
	return z_impl_k_sem_init(sem, initial_count, limit);
   18036:	2201      	movs	r2, #1
   18038:	2100      	movs	r1, #0
   1803a:	4638      	mov	r0, r7
   1803c:	f015 faa9 	bl	2d592 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   18040:	4620      	mov	r0, r4
   18042:	f007 f9db 	bl	1f3fc <net_buf_id>
   18046:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 180f4 <bt_hci_cmd_send_sync+0xd8>
   1804a:	230c      	movs	r3, #12
   1804c:	fb03 9000 	mla	r0, r3, r0, r9
   18050:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   18052:	4620      	mov	r0, r4
   18054:	f014 fc20 	bl	2c898 <net_buf_ref>
   18058:	4601      	mov	r1, r0
   1805a:	4827      	ldr	r0, [pc, #156]	; (180f8 <bt_hci_cmd_send_sync+0xdc>)
   1805c:	f014 fc0f 	bl	2c87e <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   18060:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   18064:	2300      	movs	r3, #0
   18066:	4638      	mov	r0, r7
   18068:	f00b fa6a 	bl	23540 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   1806c:	4606      	mov	r6, r0
   1806e:	b180      	cbz	r0, 18092 <bt_hci_cmd_send_sync+0x76>
   18070:	4a22      	ldr	r2, [pc, #136]	; (180fc <bt_hci_cmd_send_sync+0xe0>)
   18072:	4923      	ldr	r1, [pc, #140]	; (18100 <bt_hci_cmd_send_sync+0xe4>)
   18074:	4823      	ldr	r0, [pc, #140]	; (18104 <bt_hci_cmd_send_sync+0xe8>)
   18076:	f240 1347 	movw	r3, #327	; 0x147
   1807a:	f011 fce8 	bl	29a4e <assert_print>
   1807e:	4822      	ldr	r0, [pc, #136]	; (18108 <bt_hci_cmd_send_sync+0xec>)
   18080:	4631      	mov	r1, r6
   18082:	f011 fce4 	bl	29a4e <assert_print>
   18086:	4040      	eors	r0, r0
   18088:	f380 8811 	msr	BASEPRI, r0
   1808c:	f04f 0003 	mov.w	r0, #3
   18090:	df02      	svc	2
	status = cmd(buf)->status;
   18092:	4620      	mov	r0, r4
   18094:	f007 f9b2 	bl	1f3fc <net_buf_id>
   18098:	230c      	movs	r3, #12
   1809a:	4358      	muls	r0, r3
   1809c:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
   180a0:	b1e6      	cbz	r6, 180dc <bt_hci_cmd_send_sync+0xc0>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   180a2:	466d      	mov	r5, sp
   180a4:	b088      	sub	sp, #32
   180a6:	466a      	mov	r2, sp
   180a8:	4b18      	ldr	r3, [pc, #96]	; (1810c <bt_hci_cmd_send_sync+0xf0>)
   180aa:	61d6      	str	r6, [r2, #28]
   180ac:	e9c2 3805 	strd	r3, r8, [r2, #20]
   180b0:	2304      	movs	r3, #4
   180b2:	f842 3f10 	str.w	r3, [r2, #16]!
   180b6:	4816      	ldr	r0, [pc, #88]	; (18110 <bt_hci_cmd_send_sync+0xf4>)
   180b8:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   180bc:	f012 fb65 	bl	2a78a <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   180c0:	4620      	mov	r0, r4
   180c2:	46ad      	mov	sp, r5
   180c4:	f007 fa56 	bl	1f574 <net_buf_unref>
			return -EIO;
   180c8:	2e09      	cmp	r6, #9
   180ca:	bf0c      	ite	eq
   180cc:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   180d0:	f06f 0004 	mvnne.w	r0, #4
}
   180d4:	371c      	adds	r7, #28
   180d6:	46bd      	mov	sp, r7
   180d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   180dc:	b115      	cbz	r5, 180e4 <bt_hci_cmd_send_sync+0xc8>
		*rsp = buf;
   180de:	602c      	str	r4, [r5, #0]
	return 0;
   180e0:	4630      	mov	r0, r6
   180e2:	e7f7      	b.n	180d4 <bt_hci_cmd_send_sync+0xb8>
		net_buf_unref(buf);
   180e4:	4620      	mov	r0, r4
   180e6:	f007 fa45 	bl	1f574 <net_buf_unref>
	return 0;
   180ea:	4628      	mov	r0, r5
   180ec:	e7f2      	b.n	180d4 <bt_hci_cmd_send_sync+0xb8>
			return -ENOBUFS;
   180ee:	f06f 0068 	mvn.w	r0, #104	; 0x68
   180f2:	e7ef      	b.n	180d4 <bt_hci_cmd_send_sync+0xb8>
   180f4:	20005b40 	.word	0x20005b40
   180f8:	20000494 	.word	0x20000494
   180fc:	000302e2 	.word	0x000302e2
   18100:	0003046f 	.word	0x0003046f
   18104:	0003032f 	.word	0x0003032f
   18108:	00030478 	.word	0x00030478
   1810c:	00030498 	.word	0x00030498
   18110:	0002e5bc 	.word	0x0002e5bc

00018114 <hci_le_read_max_data_len>:
{
   18114:	b570      	push	{r4, r5, r6, lr}
   18116:	b088      	sub	sp, #32
   18118:	4606      	mov	r6, r0
   1811a:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1811c:	aa01      	add	r2, sp, #4
   1811e:	2100      	movs	r1, #0
   18120:	f242 002f 	movw	r0, #8239	; 0x202f
   18124:	f7ff ff7a 	bl	1801c <bt_hci_cmd_send_sync>
	if (err) {
   18128:	4604      	mov	r4, r0
   1812a:	b160      	cbz	r0, 18146 <hci_le_read_max_data_len+0x32>
		BT_ERR("Failed to read DLE max data len");
   1812c:	4b0b      	ldr	r3, [pc, #44]	; (1815c <hci_le_read_max_data_len+0x48>)
   1812e:	9307      	str	r3, [sp, #28]
   18130:	480b      	ldr	r0, [pc, #44]	; (18160 <hci_le_read_max_data_len+0x4c>)
   18132:	2302      	movs	r3, #2
   18134:	aa06      	add	r2, sp, #24
   18136:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1813a:	9306      	str	r3, [sp, #24]
   1813c:	f012 fb25 	bl	2a78a <z_log_msg_static_create.constprop.0>
}
   18140:	4620      	mov	r0, r4
   18142:	b008      	add	sp, #32
   18144:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   18146:	9801      	ldr	r0, [sp, #4]
   18148:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1814a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1814e:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   18150:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   18154:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   18156:	f007 fa0d 	bl	1f574 <net_buf_unref>
	return 0;
   1815a:	e7f1      	b.n	18140 <hci_le_read_max_data_len+0x2c>
   1815c:	000304b4 	.word	0x000304b4
   18160:	0002e5bc 	.word	0x0002e5bc

00018164 <bt_hci_le_rand>:
{
   18164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   18166:	4b14      	ldr	r3, [pc, #80]	; (181b8 <bt_hci_le_rand+0x54>)
   18168:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   1816c:	2b00      	cmp	r3, #0
{
   1816e:	4605      	mov	r5, r0
   18170:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   18172:	da1d      	bge.n	181b0 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   18174:	b914      	cbnz	r4, 1817c <bt_hci_le_rand+0x18>
	return 0;
   18176:	4620      	mov	r0, r4
}
   18178:	b003      	add	sp, #12
   1817a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   1817c:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   1817e:	aa01      	add	r2, sp, #4
   18180:	f04f 0100 	mov.w	r1, #0
   18184:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   18188:	4626      	mov	r6, r4
   1818a:	bf28      	it	cs
   1818c:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   1818e:	f7ff ff45 	bl	1801c <bt_hci_cmd_send_sync>
		if (err) {
   18192:	2800      	cmp	r0, #0
   18194:	d1f0      	bne.n	18178 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   18196:	9f01      	ldr	r7, [sp, #4]
   18198:	68b9      	ldr	r1, [r7, #8]
   1819a:	4632      	mov	r2, r6
   1819c:	3101      	adds	r1, #1
   1819e:	4628      	mov	r0, r5
   181a0:	f015 fe1a 	bl	2ddd8 <memcpy>
		net_buf_unref(rsp);
   181a4:	4638      	mov	r0, r7
   181a6:	f007 f9e5 	bl	1f574 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   181aa:	4435      	add	r5, r6
		len -= count;
   181ac:	1ba4      	subs	r4, r4, r6
   181ae:	e7e1      	b.n	18174 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   181b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   181b4:	e7e0      	b.n	18178 <bt_hci_le_rand+0x14>
   181b6:	bf00      	nop
   181b8:	20000350 	.word	0x20000350

000181bc <bt_hci_le_enh_conn_complete>:
{
   181bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181c0:	b08f      	sub	sp, #60	; 0x3c
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   181c2:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
   181c6:	4abe      	ldr	r2, [pc, #760]	; (184c0 <bt_hci_le_enh_conn_complete+0x304>)
	handle |= ~BT_ACL_HANDLE_MASK;
   181c8:	ea6f 5309 	mvn.w	r3, r9, lsl #20
		if (disconnected_handles[i] == handle) {
   181cc:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   181ce:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   181d2:	b29b      	uxth	r3, r3
   181d4:	4299      	cmp	r1, r3
{
   181d6:	4605      	mov	r5, r0
   181d8:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   181dc:	bf08      	it	eq
   181de:	8016      	strheq	r6, [r2, #0]
{
   181e0:	af02      	add	r7, sp, #8
			return true;
   181e2:	bf08      	it	eq
   181e4:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   181e6:	f001 f833 	bl	19250 <bt_id_pending_keys_update>
	if (evt->status) {
   181ea:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   181ec:	fa1f f889 	uxth.w	r8, r9
	if (evt->status) {
   181f0:	b3a4      	cbz	r4, 1825c <bt_hci_le_enh_conn_complete+0xa0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   181f2:	2c3c      	cmp	r4, #60	; 0x3c
   181f4:	d122      	bne.n	1823c <bt_hci_le_enh_conn_complete+0x80>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   181f6:	f001 fa6b 	bl	196d0 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   181fa:	f06f 0140 	mvn.w	r1, #64	; 0x40
   181fe:	3010      	adds	r0, #16
   18200:	f012 fac6 	bl	2a790 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   18204:	2000      	movs	r0, #0
   18206:	f7ff faad 	bl	17764 <find_pending_connect.part.0>
		if (!conn) {
   1820a:	4605      	mov	r5, r0
   1820c:	b970      	cbnz	r0, 1822c <bt_hci_le_enh_conn_complete+0x70>
			BT_ERR("No pending peripheral connection");
   1820e:	4bad      	ldr	r3, [pc, #692]	; (184c4 <bt_hci_le_enh_conn_complete+0x308>)
   18210:	62fb      	str	r3, [r7, #44]	; 0x2c
   18212:	48ad      	ldr	r0, [pc, #692]	; (184c8 <bt_hci_le_enh_conn_complete+0x30c>)
   18214:	2302      	movs	r3, #2
   18216:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1821a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1821e:	62bb      	str	r3, [r7, #40]	; 0x28
   18220:	f012 fab3 	bl	2a78a <z_log_msg_static_create.constprop.0>
}
   18224:	3734      	adds	r7, #52	; 0x34
   18226:	46bd      	mov	sp, r7
   18228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   1822c:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1822e:	2100      	movs	r1, #0
   18230:	f001 fdb4 	bl	19d9c <bt_conn_set_state>
		bt_conn_unref(conn);
   18234:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   18236:	f012 fca0 	bl	2ab7a <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1823a:	e7f3      	b.n	18224 <bt_hci_le_enh_conn_complete+0x68>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   1823c:	466d      	mov	r5, sp
   1823e:	b088      	sub	sp, #32
   18240:	aa02      	add	r2, sp, #8
   18242:	4ba2      	ldr	r3, [pc, #648]	; (184cc <bt_hci_le_enh_conn_complete+0x310>)
   18244:	48a0      	ldr	r0, [pc, #640]	; (184c8 <bt_hci_le_enh_conn_complete+0x30c>)
   18246:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1824a:	2303      	movs	r3, #3
   1824c:	f842 3f10 	str.w	r3, [r2, #16]!
   18250:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18254:	f012 fa99 	bl	2a78a <z_log_msg_static_create.constprop.0>
   18258:	46ad      	mov	sp, r5
		return;
   1825a:	e7e3      	b.n	18224 <bt_hci_le_enh_conn_complete+0x68>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   1825c:	792b      	ldrb	r3, [r5, #4]
   1825e:	3b02      	subs	r3, #2
   18260:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   18262:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   18266:	d83f      	bhi.n	182e8 <bt_hci_le_enh_conn_complete+0x12c>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   18268:	4651      	mov	r1, sl
   1826a:	f107 0018 	add.w	r0, r7, #24
   1826e:	f012 fa85 	bl	2a77c <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   18272:	7e3b      	ldrb	r3, [r7, #24]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   18274:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   18278:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   1827a:	f107 0011 	add.w	r0, r7, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1827e:	763b      	strb	r3, [r7, #24]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   18280:	f012 fa77 	bl	2a772 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   18284:	2301      	movs	r3, #1
   18286:	743b      	strb	r3, [r7, #16]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   18288:	78eb      	ldrb	r3, [r5, #3]
   1828a:	2b01      	cmp	r3, #1
   1828c:	d113      	bne.n	182b6 <bt_hci_le_enh_conn_complete+0xfa>
   1828e:	f107 0018 	add.w	r0, r7, #24
   18292:	f7ff fa67 	bl	17764 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18296:	78eb      	ldrb	r3, [r5, #3]
   18298:	2b01      	cmp	r3, #1
   1829a:	4604      	mov	r4, r0
   1829c:	d10a      	bne.n	182b4 <bt_hci_le_enh_conn_complete+0xf8>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1829e:	f001 fa17 	bl	196d0 <bt_le_adv_lookup_legacy>
   182a2:	f06f 0140 	mvn.w	r1, #64	; 0x40
   182a6:	4683      	mov	fp, r0
   182a8:	3010      	adds	r0, #16
   182aa:	f012 fa71 	bl	2a790 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   182ae:	4658      	mov	r0, fp
   182b0:	f012 fc27 	bl	2ab02 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   182b4:	bb6c      	cbnz	r4, 18312 <bt_hci_le_enh_conn_complete+0x156>
		BT_ERR("No pending conn for peer %s",
   182b6:	4650      	mov	r0, sl
   182b8:	f7fe ff3c 	bl	17134 <bt_addr_le_str_real>
   182bc:	466c      	mov	r4, sp
   182be:	b088      	sub	sp, #32
   182c0:	aa02      	add	r2, sp, #8
   182c2:	4b83      	ldr	r3, [pc, #524]	; (184d0 <bt_hci_le_enh_conn_complete+0x314>)
   182c4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   182c8:	2302      	movs	r3, #2
   182ca:	7713      	strb	r3, [r2, #28]
   182cc:	4b81      	ldr	r3, [pc, #516]	; (184d4 <bt_hci_le_enh_conn_complete+0x318>)
   182ce:	f842 3f10 	str.w	r3, [r2, #16]!
   182d2:	487d      	ldr	r0, [pc, #500]	; (184c8 <bt_hci_le_enh_conn_complete+0x30c>)
   182d4:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   182d8:	f012 fa57 	bl	2a78a <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   182dc:	211f      	movs	r1, #31
   182de:	46a5      	mov	sp, r4
   182e0:	4640      	mov	r0, r8
   182e2:	f012 fa71 	bl	2a7c8 <bt_hci_disconnect>
		return;
   182e6:	e79d      	b.n	18224 <bt_hci_le_enh_conn_complete+0x68>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   182e8:	78eb      	ldrb	r3, [r5, #3]
   182ea:	2b01      	cmp	r3, #1
   182ec:	bf04      	itt	eq
   182ee:	4b7a      	ldreq	r3, [pc, #488]	; (184d8 <bt_hci_le_enh_conn_complete+0x31c>)
   182f0:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   182f4:	4651      	mov	r1, sl
   182f6:	4620      	mov	r0, r4
   182f8:	f012 fbac 	bl	2aa54 <bt_lookup_id_addr>
   182fc:	4601      	mov	r1, r0
   182fe:	f107 0018 	add.w	r0, r7, #24
   18302:	f012 fa3b 	bl	2a77c <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   18306:	4651      	mov	r1, sl
   18308:	f107 0010 	add.w	r0, r7, #16
   1830c:	f012 fa36 	bl	2a77c <bt_addr_le_copy>
   18310:	e7ba      	b.n	18288 <bt_hci_le_enh_conn_complete+0xcc>
	conn->handle = handle;
   18312:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   18314:	f107 0118 	add.w	r1, r7, #24
	conn->handle = handle;
   18318:	f820 9b88 	strh.w	r9, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   1831c:	f012 fa2e 	bl	2a77c <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   18320:	7e2a      	ldrb	r2, [r5, #24]
   18322:	7deb      	ldrb	r3, [r5, #23]
   18324:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18328:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1832c:	7eaa      	ldrb	r2, [r5, #26]
   1832e:	7e6b      	ldrb	r3, [r5, #25]
   18330:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18334:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   18338:	7eeb      	ldrb	r3, [r5, #27]
   1833a:	7f2a      	ldrb	r2, [r5, #28]
   1833c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18340:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   18344:	f895 9003 	ldrb.w	r9, [r5, #3]
   18348:	f884 9003 	strb.w	r9, [r4, #3]
	conn->err = 0U;
   1834c:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1834e:	f1b9 0f01 	cmp.w	r9, #1
	conn->err = 0U;
   18352:	7323      	strb	r3, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18354:	d12e      	bne.n	183b4 <bt_hci_le_enh_conn_complete+0x1f8>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   18356:	f107 0110 	add.w	r1, r7, #16
   1835a:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   1835e:	f012 fa0d 	bl	2a77c <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   18362:	f001 f9b5 	bl	196d0 <bt_le_adv_lookup_legacy>
   18366:	f3bf 8f5b 	dmb	ish
   1836a:	6902      	ldr	r2, [r0, #16]
   1836c:	f8df 8168 	ldr.w	r8, [pc, #360]	; 184d8 <bt_hci_le_enh_conn_complete+0x31c>
   18370:	f3bf 8f5b 	dmb	ish
			if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   18374:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   18378:	f3c2 3300 	ubfx	r3, r2, #12, #1
   1837c:	f040 80b4 	bne.w	184e8 <bt_hci_le_enh_conn_complete+0x32c>
				if (bt_addr_cmp(&evt->local_rpa,
   18380:	350b      	adds	r5, #11
				conn->le.resp_addr.type = BT_ADDR_LE_RANDOM;
   18382:	f884 9096 	strb.w	r9, [r4, #150]	; 0x96
	return memcmp(a, b, sizeof(*a));
   18386:	2206      	movs	r2, #6
   18388:	f107 0108 	add.w	r1, r7, #8
   1838c:	4628      	mov	r0, r5
						BT_ADDR_ANY) != 0) {
   1838e:	60bb      	str	r3, [r7, #8]
   18390:	81bb      	strh	r3, [r7, #12]
   18392:	f015 fd11 	bl	2ddb8 <memcmp>
   18396:	4603      	mov	r3, r0
					bt_addr_copy(&conn->le.resp_addr.a,
   18398:	f104 0097 	add.w	r0, r4, #151	; 0x97
				if (bt_addr_cmp(&evt->local_rpa,
   1839c:	2b00      	cmp	r3, #0
   1839e:	f000 808c 	beq.w	184ba <bt_hci_le_enh_conn_complete+0x2fe>
					bt_addr_copy(&conn->le.resp_addr.a,
   183a2:	4629      	mov	r1, r5
					bt_addr_copy(&conn->le.resp_addr.a,
   183a4:	f012 f9e5 	bl	2a772 <bt_addr_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   183a8:	f8d8 30dc 	ldr.w	r3, [r8, #220]	; 0xdc
   183ac:	065d      	lsls	r5, r3, #25
   183ae:	d501      	bpl.n	183b4 <bt_hci_le_enh_conn_complete+0x1f8>
			bt_le_adv_resume();
   183b0:	f001 f992 	bl	196d8 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   183b4:	2107      	movs	r1, #7
   183b6:	4620      	mov	r0, r4
   183b8:	f001 fcf0 	bl	19d9c <bt_conn_set_state>
	if (is_disconnected) {
   183bc:	b11e      	cbz	r6, 183c6 <bt_hci_le_enh_conn_complete+0x20a>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   183be:	2101      	movs	r1, #1
   183c0:	4620      	mov	r0, r4
   183c2:	f001 fceb 	bl	19d9c <bt_conn_set_state>
	bt_conn_connected(conn);
   183c6:	4620      	mov	r0, r4
   183c8:	f012 fc13 	bl	2abf2 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   183cc:	7b63      	ldrb	r3, [r4, #13]
   183ce:	2b07      	cmp	r3, #7
   183d0:	d171      	bne.n	184b6 <bt_hci_le_enh_conn_complete+0x2fa>
   183d2:	f3bf 8f5b 	dmb	ish
   183d6:	6863      	ldr	r3, [r4, #4]
   183d8:	4d3f      	ldr	r5, [pc, #252]	; (184d8 <bt_hci_le_enh_conn_complete+0x31c>)
   183da:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   183de:	f413 6f00 	tst.w	r3, #2048	; 0x800
   183e2:	d129      	bne.n	18438 <bt_hci_le_enh_conn_complete+0x27c>
   183e4:	78e3      	ldrb	r3, [r4, #3]
   183e6:	b11b      	cbz	r3, 183f0 <bt_hci_le_enh_conn_complete+0x234>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   183e8:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   183ec:	0718      	lsls	r0, r3, #28
   183ee:	d523      	bpl.n	18438 <bt_hci_le_enh_conn_complete+0x27c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   183f0:	2102      	movs	r1, #2
   183f2:	f242 0016 	movw	r0, #8214	; 0x2016
   183f6:	f7ff fdd7 	bl	17fa8 <bt_hci_cmd_create>
	if (!buf) {
   183fa:	4606      	mov	r6, r0
   183fc:	2800      	cmp	r0, #0
   183fe:	d07c      	beq.n	184fa <bt_hci_le_enh_conn_complete+0x33e>
   18400:	2102      	movs	r1, #2
   18402:	3008      	adds	r0, #8
   18404:	f014 fa6e 	bl	2c8e4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   18408:	8823      	ldrh	r3, [r4, #0]
   1840a:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   1840c:	2200      	movs	r2, #0
   1840e:	4631      	mov	r1, r6
   18410:	f242 0016 	movw	r0, #8214	; 0x2016
   18414:	f7ff fe02 	bl	1801c <bt_hci_cmd_send_sync>
		if (err) {
   18418:	b170      	cbz	r0, 18438 <bt_hci_le_enh_conn_complete+0x27c>
			BT_ERR("Failed read remote features (%d)", err);
   1841a:	466e      	mov	r6, sp
   1841c:	b088      	sub	sp, #32
   1841e:	aa02      	add	r2, sp, #8
   18420:	4b2e      	ldr	r3, [pc, #184]	; (184dc <bt_hci_le_enh_conn_complete+0x320>)
   18422:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18426:	2303      	movs	r3, #3
   18428:	f842 3f10 	str.w	r3, [r2, #16]!
   1842c:	4826      	ldr	r0, [pc, #152]	; (184c8 <bt_hci_le_enh_conn_complete+0x30c>)
   1842e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18432:	f012 f9aa 	bl	2a78a <z_log_msg_static_create.constprop.0>
   18436:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   18438:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   1843c:	07d9      	lsls	r1, r3, #31
   1843e:	d516      	bpl.n	1846e <bt_hci_le_enh_conn_complete+0x2b2>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   18440:	2100      	movs	r1, #0
   18442:	2302      	movs	r3, #2
   18444:	9100      	str	r1, [sp, #0]
   18446:	461a      	mov	r2, r3
   18448:	4620      	mov	r0, r4
   1844a:	f012 f9f6 	bl	2a83a <bt_le_set_phy>
		if (err) {
   1844e:	b170      	cbz	r0, 1846e <bt_hci_le_enh_conn_complete+0x2b2>
			BT_ERR("Failed LE Set PHY (%d)", err);
   18450:	466e      	mov	r6, sp
   18452:	b088      	sub	sp, #32
   18454:	aa02      	add	r2, sp, #8
   18456:	4b22      	ldr	r3, [pc, #136]	; (184e0 <bt_hci_le_enh_conn_complete+0x324>)
   18458:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1845c:	2303      	movs	r3, #3
   1845e:	f842 3f10 	str.w	r3, [r2, #16]!
   18462:	4819      	ldr	r0, [pc, #100]	; (184c8 <bt_hci_le_enh_conn_complete+0x30c>)
   18464:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18468:	f012 f98f 	bl	2a78a <z_log_msg_static_create.constprop.0>
   1846c:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   1846e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   18472:	069a      	lsls	r2, r3, #26
   18474:	d51f      	bpl.n	184b6 <bt_hci_le_enh_conn_complete+0x2fa>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   18476:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
   1847a:	689b      	ldr	r3, [r3, #8]
   1847c:	079b      	lsls	r3, r3, #30
   1847e:	d51a      	bpl.n	184b6 <bt_hci_le_enh_conn_complete+0x2fa>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   18480:	f107 0108 	add.w	r1, r7, #8
   18484:	1db8      	adds	r0, r7, #6
   18486:	f7ff fe45 	bl	18114 <hci_le_read_max_data_len>
			if (!err) {
   1848a:	b9a0      	cbnz	r0, 184b6 <bt_hci_le_enh_conn_complete+0x2fa>
				err = bt_le_set_data_len(conn,
   1848c:	893a      	ldrh	r2, [r7, #8]
   1848e:	88f9      	ldrh	r1, [r7, #6]
   18490:	4620      	mov	r0, r4
   18492:	f012 f9b4 	bl	2a7fe <bt_le_set_data_len>
				if (err) {
   18496:	b170      	cbz	r0, 184b6 <bt_hci_le_enh_conn_complete+0x2fa>
					BT_ERR("Failed to set data len (%d)", err);
   18498:	466d      	mov	r5, sp
   1849a:	b088      	sub	sp, #32
   1849c:	aa02      	add	r2, sp, #8
   1849e:	4b11      	ldr	r3, [pc, #68]	; (184e4 <bt_hci_le_enh_conn_complete+0x328>)
   184a0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   184a4:	2303      	movs	r3, #3
   184a6:	f842 3f10 	str.w	r3, [r2, #16]!
   184aa:	4807      	ldr	r0, [pc, #28]	; (184c8 <bt_hci_le_enh_conn_complete+0x30c>)
   184ac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   184b0:	f012 f96b 	bl	2a78a <z_log_msg_static_create.constprop.0>
   184b4:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   184b6:	4620      	mov	r0, r4
   184b8:	e6bd      	b.n	18236 <bt_hci_le_enh_conn_complete+0x7a>
					bt_addr_copy(&conn->le.resp_addr.a,
   184ba:	f108 0161 	add.w	r1, r8, #97	; 0x61
   184be:	e771      	b.n	183a4 <bt_hci_le_enh_conn_complete+0x1e8>
   184c0:	20006b0c 	.word	0x20006b0c
   184c4:	000304d4 	.word	0x000304d4
   184c8:	0002e5bc 	.word	0x0002e5bc
   184cc:	000304f5 	.word	0x000304f5
   184d0:	0003050e 	.word	0x0003050e
   184d4:	01000003 	.word	0x01000003
   184d8:	20000350 	.word	0x20000350
   184dc:	0003052a 	.word	0x0003052a
   184e0:	0003054b 	.word	0x0003054b
   184e4:	00030562 	.word	0x00030562
						&bt_dev.id_addr[conn->id]);
   184e8:	7a21      	ldrb	r1, [r4, #8]
   184ea:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   184ee:	4441      	add	r1, r8
   184f0:	f104 0096 	add.w	r0, r4, #150	; 0x96
   184f4:	f012 f942 	bl	2a77c <bt_addr_le_copy>
   184f8:	e756      	b.n	183a8 <bt_hci_le_enh_conn_complete+0x1ec>
		return -ENOBUFS;
   184fa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   184fe:	e78c      	b.n	1841a <bt_hci_le_enh_conn_complete+0x25e>

00018500 <le_legacy_conn_complete>:
{
   18500:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   18502:	6881      	ldr	r1, [r0, #8]
{
   18504:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   18506:	780b      	ldrb	r3, [r1, #0]
   18508:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1850c:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   18510:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   18514:	78cb      	ldrb	r3, [r1, #3]
   18516:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1851a:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1851e:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   18522:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   18526:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1852a:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1852e:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   18532:	7c4b      	ldrb	r3, [r1, #17]
   18534:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   18538:	a803      	add	r0, sp, #12
   1853a:	3104      	adds	r1, #4
   1853c:	f012 f91e 	bl	2a77c <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, &bt_dev.random_addr.a);
   18540:	f10d 0013 	add.w	r0, sp, #19
   18544:	4908      	ldr	r1, [pc, #32]	; (18568 <le_legacy_conn_complete+0x68>)
   18546:	f012 f914 	bl	2a772 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1854a:	2300      	movs	r3, #0
   1854c:	4669      	mov	r1, sp
   1854e:	f10d 0019 	add.w	r0, sp, #25
   18552:	9300      	str	r3, [sp, #0]
   18554:	f8ad 3004 	strh.w	r3, [sp, #4]
   18558:	f012 f90b 	bl	2a772 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   1855c:	a802      	add	r0, sp, #8
   1855e:	f7ff fe2d 	bl	181bc <bt_hci_le_enh_conn_complete>
}
   18562:	b00b      	add	sp, #44	; 0x2c
   18564:	f85d fb04 	ldr.w	pc, [sp], #4
   18568:	200003b1 	.word	0x200003b1

0001856c <bt_unpair>:
{
   1856c:	b530      	push	{r4, r5, lr}
   1856e:	b085      	sub	sp, #20
   18570:	460d      	mov	r5, r1
   18572:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
   18576:	b9d0      	cbnz	r0, 185ae <bt_unpair+0x42>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   18578:	b949      	cbnz	r1, 1858e <bt_unpair+0x22>
		bt_foreach_bond(id, unpair_remote, &id);
   1857a:	490e      	ldr	r1, [pc, #56]	; (185b4 <bt_unpair+0x48>)
   1857c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   18580:	f10d 0207 	add.w	r2, sp, #7
   18584:	f006 fd36 	bl	1eff4 <bt_foreach_bond>
		return 0;
   18588:	2000      	movs	r0, #0
}
   1858a:	b005      	add	sp, #20
   1858c:	bd30      	pop	{r4, r5, pc}
	    (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   1858e:	9002      	str	r0, [sp, #8]
	return memcmp(a, b, sizeof(*a));
   18590:	2207      	movs	r2, #7
   18592:	f8cd 000b 	str.w	r0, [sp, #11]
   18596:	a902      	add	r1, sp, #8
   18598:	4628      	mov	r0, r5
   1859a:	f015 fc0d 	bl	2ddb8 <memcmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1859e:	2800      	cmp	r0, #0
   185a0:	d0eb      	beq.n	1857a <bt_unpair+0xe>
	unpair(id, addr);
   185a2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   185a6:	4629      	mov	r1, r5
   185a8:	f7ff f87e 	bl	176a8 <unpair>
	return 0;
   185ac:	e7ec      	b.n	18588 <bt_unpair+0x1c>
		return -EINVAL;
   185ae:	f06f 0015 	mvn.w	r0, #21
   185b2:	e7ea      	b.n	1858a <bt_unpair+0x1e>
   185b4:	0002a769 	.word	0x0002a769

000185b8 <bt_security_err_get>:
	switch (hci_err) {
   185b8:	2829      	cmp	r0, #41	; 0x29
   185ba:	bf9a      	itte	ls
   185bc:	4b01      	ldrls	r3, [pc, #4]	; (185c4 <bt_security_err_get+0xc>)
   185be:	5c18      	ldrbls	r0, [r3, r0]
{
   185c0:	2009      	movhi	r0, #9
}
   185c2:	4770      	bx	lr
   185c4:	000307cb 	.word	0x000307cb

000185c8 <hci_encrypt_key_refresh_complete>:
{
   185c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   185ca:	b087      	sub	sp, #28
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   185cc:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   185ce:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   185d2:	781d      	ldrb	r5, [r3, #0]
{
   185d4:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   185d6:	4630      	mov	r0, r6
   185d8:	f001 fbd8 	bl	19d8c <bt_conn_lookup_handle>
	if (!conn) {
   185dc:	4604      	mov	r4, r0
   185de:	b988      	cbnz	r0, 18604 <hci_encrypt_key_refresh_complete+0x3c>
		BT_ERR("Unable to look up conn with handle %u", handle);
   185e0:	466c      	mov	r4, sp
   185e2:	b088      	sub	sp, #32
   185e4:	466a      	mov	r2, sp
   185e6:	4b20      	ldr	r3, [pc, #128]	; (18668 <hci_encrypt_key_refresh_complete+0xa0>)
   185e8:	4820      	ldr	r0, [pc, #128]	; (1866c <hci_encrypt_key_refresh_complete+0xa4>)
   185ea:	e9c2 3605 	strd	r3, r6, [r2, #20]
   185ee:	2303      	movs	r3, #3
   185f0:	f842 3f10 	str.w	r3, [r2, #16]!
   185f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   185f8:	f012 f8c7 	bl	2a78a <z_log_msg_static_create.constprop.0>
   185fc:	46a5      	mov	sp, r4
}
   185fe:	371c      	adds	r7, #28
   18600:	46bd      	mov	sp, r7
   18602:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   18604:	b15d      	cbz	r5, 1861e <hci_encrypt_key_refresh_complete+0x56>
		bt_conn_security_changed(conn, status,
   18606:	4628      	mov	r0, r5
   18608:	f7ff ffd6 	bl	185b8 <bt_security_err_get>
   1860c:	4629      	mov	r1, r5
   1860e:	4602      	mov	r2, r0
   18610:	4620      	mov	r0, r4
   18612:	f001 fd7f 	bl	1a114 <bt_conn_security_changed>
	bt_conn_unref(conn);
   18616:	4620      	mov	r0, r4
   18618:	f012 faaf 	bl	2ab7a <bt_conn_unref>
   1861c:	e7ef      	b.n	185fe <hci_encrypt_key_refresh_complete+0x36>
	if (conn->type == BT_CONN_TYPE_LE) {
   1861e:	7883      	ldrb	r3, [r0, #2]
   18620:	2b01      	cmp	r3, #1
   18622:	d107      	bne.n	18634 <hci_encrypt_key_refresh_complete+0x6c>
		bt_smp_update_keys(conn);
   18624:	f006 fbfc 	bl	1ee20 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   18628:	4620      	mov	r0, r4
   1862a:	f012 f875 	bl	2a718 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   1862e:	2800      	cmp	r0, #0
   18630:	bf08      	it	eq
   18632:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   18634:	4628      	mov	r0, r5
   18636:	f7ff ffbf 	bl	185b8 <bt_security_err_get>
   1863a:	4629      	mov	r1, r5
   1863c:	4602      	mov	r2, r0
   1863e:	4620      	mov	r0, r4
   18640:	f001 fd68 	bl	1a114 <bt_conn_security_changed>
	if (status) {
   18644:	2d00      	cmp	r5, #0
   18646:	d0e6      	beq.n	18616 <hci_encrypt_key_refresh_complete+0x4e>
		BT_ERR("Failed to set required security level");
   18648:	4b09      	ldr	r3, [pc, #36]	; (18670 <hci_encrypt_key_refresh_complete+0xa8>)
   1864a:	617b      	str	r3, [r7, #20]
   1864c:	4807      	ldr	r0, [pc, #28]	; (1866c <hci_encrypt_key_refresh_complete+0xa4>)
   1864e:	2302      	movs	r3, #2
   18650:	f107 0210 	add.w	r2, r7, #16
   18654:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18658:	613b      	str	r3, [r7, #16]
   1865a:	f012 f896 	bl	2a78a <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   1865e:	4629      	mov	r1, r5
   18660:	4620      	mov	r0, r4
   18662:	f012 facf 	bl	2ac04 <bt_conn_disconnect>
   18666:	e7d6      	b.n	18616 <hci_encrypt_key_refresh_complete+0x4e>
   18668:	0003029a 	.word	0x0003029a
   1866c:	0002e5bc 	.word	0x0002e5bc
   18670:	0003057e 	.word	0x0003057e

00018674 <hci_encrypt_change>:
{
   18674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18678:	b086      	sub	sp, #24
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   1867a:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1867c:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	uint8_t status = evt->status;
   18680:	7835      	ldrb	r5, [r6, #0]
{
   18682:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   18684:	4640      	mov	r0, r8
   18686:	f001 fb81 	bl	19d8c <bt_conn_lookup_handle>
	if (!conn) {
   1868a:	4604      	mov	r4, r0
   1868c:	b990      	cbnz	r0, 186b4 <hci_encrypt_change+0x40>
		BT_ERR("Unable to look up conn with handle %u", handle);
   1868e:	466c      	mov	r4, sp
   18690:	b088      	sub	sp, #32
   18692:	466a      	mov	r2, sp
   18694:	4b22      	ldr	r3, [pc, #136]	; (18720 <hci_encrypt_change+0xac>)
   18696:	4823      	ldr	r0, [pc, #140]	; (18724 <hci_encrypt_change+0xb0>)
   18698:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1869c:	2303      	movs	r3, #3
   1869e:	f842 3f10 	str.w	r3, [r2, #16]!
   186a2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   186a6:	f012 f870 	bl	2a78a <z_log_msg_static_create.constprop.0>
   186aa:	46a5      	mov	sp, r4
}
   186ac:	3718      	adds	r7, #24
   186ae:	46bd      	mov	sp, r7
   186b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (status) {
   186b4:	b15d      	cbz	r5, 186ce <hci_encrypt_change+0x5a>
		bt_conn_security_changed(conn, status,
   186b6:	4628      	mov	r0, r5
   186b8:	f7ff ff7e 	bl	185b8 <bt_security_err_get>
   186bc:	4629      	mov	r1, r5
   186be:	4602      	mov	r2, r0
   186c0:	4620      	mov	r0, r4
   186c2:	f001 fd27 	bl	1a114 <bt_conn_security_changed>
	bt_conn_unref(conn);
   186c6:	4620      	mov	r0, r4
   186c8:	f012 fa57 	bl	2ab7a <bt_conn_unref>
   186cc:	e7ee      	b.n	186ac <hci_encrypt_change+0x38>
	if (conn->type == BT_CONN_TYPE_LE) {
   186ce:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   186d0:	78f3      	ldrb	r3, [r6, #3]
   186d2:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   186d4:	2a01      	cmp	r2, #1
   186d6:	d108      	bne.n	186ea <hci_encrypt_change+0x76>
		if (conn->encrypt) {
   186d8:	b10b      	cbz	r3, 186de <hci_encrypt_change+0x6a>
			bt_smp_update_keys(conn);
   186da:	f006 fba1 	bl	1ee20 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   186de:	4620      	mov	r0, r4
   186e0:	f012 f81a 	bl	2a718 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   186e4:	2800      	cmp	r0, #0
   186e6:	bf08      	it	eq
   186e8:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   186ea:	4628      	mov	r0, r5
   186ec:	f7ff ff64 	bl	185b8 <bt_security_err_get>
   186f0:	4629      	mov	r1, r5
   186f2:	4602      	mov	r2, r0
   186f4:	4620      	mov	r0, r4
   186f6:	f001 fd0d 	bl	1a114 <bt_conn_security_changed>
	if (status) {
   186fa:	2d00      	cmp	r5, #0
   186fc:	d0e3      	beq.n	186c6 <hci_encrypt_change+0x52>
		BT_ERR("Failed to set required security level");
   186fe:	4b0a      	ldr	r3, [pc, #40]	; (18728 <hci_encrypt_change+0xb4>)
   18700:	617b      	str	r3, [r7, #20]
   18702:	4808      	ldr	r0, [pc, #32]	; (18724 <hci_encrypt_change+0xb0>)
   18704:	2302      	movs	r3, #2
   18706:	f107 0210 	add.w	r2, r7, #16
   1870a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1870e:	613b      	str	r3, [r7, #16]
   18710:	f012 f83b 	bl	2a78a <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   18714:	4629      	mov	r1, r5
   18716:	4620      	mov	r0, r4
   18718:	f012 fa74 	bl	2ac04 <bt_conn_disconnect>
   1871c:	e7d3      	b.n	186c6 <hci_encrypt_change+0x52>
   1871e:	bf00      	nop
   18720:	0003029a 	.word	0x0003029a
   18724:	0002e5bc 	.word	0x0002e5bc
   18728:	0003057e 	.word	0x0003057e

0001872c <bt_send>:
	return bt_dev.drv->send(buf);
   1872c:	4b02      	ldr	r3, [pc, #8]	; (18738 <bt_send+0xc>)
   1872e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   18732:	695b      	ldr	r3, [r3, #20]
   18734:	4718      	bx	r3
   18736:	bf00      	nop
   18738:	20000350 	.word	0x20000350

0001873c <bt_hci_cmd_send>:
{
   1873c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1873e:	4605      	mov	r5, r0
   18740:	af00      	add	r7, sp, #0
	if (!buf) {
   18742:	460c      	mov	r4, r1
   18744:	b919      	cbnz	r1, 1874e <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   18746:	f7ff fc2f 	bl	17fa8 <bt_hci_cmd_create>
		if (!buf) {
   1874a:	4604      	mov	r4, r0
   1874c:	b318      	cbz	r0, 18796 <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1874e:	f640 4335 	movw	r3, #3125	; 0xc35
   18752:	429d      	cmp	r5, r3
   18754:	d119      	bne.n	1878a <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
   18756:	4620      	mov	r0, r4
   18758:	f7ff ffe8 	bl	1872c <bt_send>
		if (err) {
   1875c:	4605      	mov	r5, r0
   1875e:	b188      	cbz	r0, 18784 <bt_hci_cmd_send+0x48>
			BT_ERR("Unable to send to driver (err %d)", err);
   18760:	466e      	mov	r6, sp
   18762:	b088      	sub	sp, #32
   18764:	466a      	mov	r2, sp
   18766:	4b0d      	ldr	r3, [pc, #52]	; (1879c <bt_hci_cmd_send+0x60>)
   18768:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1876c:	2303      	movs	r3, #3
   1876e:	480c      	ldr	r0, [pc, #48]	; (187a0 <bt_hci_cmd_send+0x64>)
   18770:	f842 3f10 	str.w	r3, [r2, #16]!
   18774:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18778:	f012 f807 	bl	2a78a <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   1877c:	4620      	mov	r0, r4
   1877e:	46b5      	mov	sp, r6
   18780:	f006 fef8 	bl	1f574 <net_buf_unref>
}
   18784:	4628      	mov	r0, r5
   18786:	46bd      	mov	sp, r7
   18788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   1878a:	4806      	ldr	r0, [pc, #24]	; (187a4 <bt_hci_cmd_send+0x68>)
   1878c:	4621      	mov	r1, r4
   1878e:	f014 f876 	bl	2c87e <net_buf_put>
	return 0;
   18792:	2500      	movs	r5, #0
   18794:	e7f6      	b.n	18784 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
   18796:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1879a:	e7f3      	b.n	18784 <bt_hci_cmd_send+0x48>
   1879c:	000305a4 	.word	0x000305a4
   187a0:	0002e5bc 	.word	0x0002e5bc
   187a4:	20000494 	.word	0x20000494

000187a8 <le_ltk_request>:
{
   187a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   187ac:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   187ae:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   187b0:	8826      	ldrh	r6, [r4, #0]
   187b2:	fa1f f886 	uxth.w	r8, r6
{
   187b6:	af02      	add	r7, sp, #8
	conn = bt_conn_lookup_handle(handle);
   187b8:	4640      	mov	r0, r8
   187ba:	f001 fae7 	bl	19d8c <bt_conn_lookup_handle>
	if (!conn) {
   187be:	4605      	mov	r5, r0
   187c0:	b990      	cbnz	r0, 187e8 <le_ltk_request+0x40>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   187c2:	466c      	mov	r4, sp
   187c4:	b088      	sub	sp, #32
   187c6:	aa02      	add	r2, sp, #8
   187c8:	4b2c      	ldr	r3, [pc, #176]	; (1887c <le_ltk_request+0xd4>)
   187ca:	482d      	ldr	r0, [pc, #180]	; (18880 <le_ltk_request+0xd8>)
   187cc:	e9c2 3805 	strd	r3, r8, [r2, #20]
   187d0:	2303      	movs	r3, #3
   187d2:	f842 3f10 	str.w	r3, [r2, #16]!
   187d6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   187da:	f011 ffd6 	bl	2a78a <z_log_msg_static_create.constprop.0>
   187de:	46a5      	mov	sp, r4
}
   187e0:	3728      	adds	r7, #40	; 0x28
   187e2:	46bd      	mov	sp, r7
   187e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   187e8:	f8d4 2002 	ldr.w	r2, [r4, #2]
   187ec:	f8d4 3006 	ldr.w	r3, [r4, #6]
   187f0:	9701      	str	r7, [sp, #4]
   187f2:	8961      	ldrh	r1, [r4, #10]
   187f4:	9100      	str	r1, [sp, #0]
   187f6:	f013 fe1c 	bl	2c432 <bt_smp_request_ltk>
   187fa:	b370      	cbz	r0, 1885a <le_ltk_request+0xb2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   187fc:	2112      	movs	r1, #18
   187fe:	f242 001a 	movw	r0, #8218	; 0x201a
   18802:	f7ff fbd1 	bl	17fa8 <bt_hci_cmd_create>
	if (!buf) {
   18806:	4604      	mov	r4, r0
   18808:	b970      	cbnz	r0, 18828 <le_ltk_request+0x80>
		BT_ERR("Out of command buffers");
   1880a:	4b1e      	ldr	r3, [pc, #120]	; (18884 <le_ltk_request+0xdc>)
   1880c:	627b      	str	r3, [r7, #36]	; 0x24
   1880e:	481c      	ldr	r0, [pc, #112]	; (18880 <le_ltk_request+0xd8>)
   18810:	2302      	movs	r3, #2
   18812:	f107 0220 	add.w	r2, r7, #32
   18816:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1881a:	623b      	str	r3, [r7, #32]
   1881c:	f011 ffb5 	bl	2a78a <z_log_msg_static_create.constprop.0>
	bt_conn_unref(conn);
   18820:	4628      	mov	r0, r5
   18822:	f012 f9aa 	bl	2ab7a <bt_conn_unref>
   18826:	e7db      	b.n	187e0 <le_ltk_request+0x38>
   18828:	2112      	movs	r1, #18
   1882a:	3008      	adds	r0, #8
   1882c:	f014 f85a 	bl	2c8e4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   18830:	4603      	mov	r3, r0
   18832:	463a      	mov	r2, r7
   18834:	f823 6b02 	strh.w	r6, [r3], #2
   18838:	f107 0c10 	add.w	ip, r7, #16
   1883c:	4616      	mov	r6, r2
   1883e:	ce03      	ldmia	r6!, {r0, r1}
   18840:	4566      	cmp	r6, ip
   18842:	6018      	str	r0, [r3, #0]
   18844:	6059      	str	r1, [r3, #4]
   18846:	4632      	mov	r2, r6
   18848:	f103 0308 	add.w	r3, r3, #8
   1884c:	d1f6      	bne.n	1883c <le_ltk_request+0x94>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   1884e:	4621      	mov	r1, r4
   18850:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   18854:	f7ff ff72 	bl	1873c <bt_hci_cmd_send>
   18858:	e7e2      	b.n	18820 <le_ltk_request+0x78>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   1885a:	2102      	movs	r1, #2
   1885c:	f242 001b 	movw	r0, #8219	; 0x201b
   18860:	f7ff fba2 	bl	17fa8 <bt_hci_cmd_create>
	if (!buf) {
   18864:	4604      	mov	r4, r0
   18866:	2800      	cmp	r0, #0
   18868:	d0cf      	beq.n	1880a <le_ltk_request+0x62>
   1886a:	2102      	movs	r1, #2
   1886c:	3008      	adds	r0, #8
   1886e:	f014 f839 	bl	2c8e4 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   18872:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   18874:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   18876:	f242 001b 	movw	r0, #8219	; 0x201b
   1887a:	e7eb      	b.n	18854 <le_ltk_request+0xac>
   1887c:	00030215 	.word	0x00030215
   18880:	0002e5bc 	.word	0x0002e5bc
   18884:	000305c6 	.word	0x000305c6

00018888 <le_conn_param_req>:
{
   18888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1888c:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1888e:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   18890:	78d9      	ldrb	r1, [r3, #3]
   18892:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   18894:	f8b3 8000 	ldrh.w	r8, [r3]
{
   18898:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1889a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1889e:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   188a0:	7959      	ldrb	r1, [r3, #5]
   188a2:	791a      	ldrb	r2, [r3, #4]
   188a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   188a8:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   188aa:	799a      	ldrb	r2, [r3, #6]
   188ac:	79d9      	ldrb	r1, [r3, #7]
   188ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   188b2:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   188b4:	7a1a      	ldrb	r2, [r3, #8]
   188b6:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   188b8:	fa1f f488 	uxth.w	r4, r8
	param.timeout = sys_le16_to_cpu(evt->timeout);
   188bc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   188c0:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   188c2:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   188c4:	f001 fa62 	bl	19d8c <bt_conn_lookup_handle>
	if (!conn) {
   188c8:	4606      	mov	r6, r0
   188ca:	b9b0      	cbnz	r0, 188fa <le_conn_param_req+0x72>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   188cc:	466d      	mov	r5, sp
   188ce:	b088      	sub	sp, #32
   188d0:	466a      	mov	r2, sp
   188d2:	4b20      	ldr	r3, [pc, #128]	; (18954 <le_conn_param_req+0xcc>)
   188d4:	4820      	ldr	r0, [pc, #128]	; (18958 <le_conn_param_req+0xd0>)
   188d6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   188da:	2303      	movs	r3, #3
   188dc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   188e0:	f842 3f10 	str.w	r3, [r2, #16]!
   188e4:	f011 ff51 	bl	2a78a <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   188e8:	2102      	movs	r1, #2
   188ea:	46ad      	mov	sp, r5
   188ec:	4620      	mov	r0, r4
   188ee:	f011 ffef 	bl	2a8d0 <le_conn_param_neg_reply>
}
   188f2:	3708      	adds	r7, #8
   188f4:	46bd      	mov	sp, r7
   188f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
   188fa:	4639      	mov	r1, r7
   188fc:	f001 fba2 	bl	1a044 <le_param_req>
   18900:	b938      	cbnz	r0, 18912 <le_conn_param_req+0x8a>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   18902:	211e      	movs	r1, #30
   18904:	4620      	mov	r0, r4
   18906:	f011 ffe3 	bl	2a8d0 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1890a:	4630      	mov	r0, r6
   1890c:	f012 f935 	bl	2ab7a <bt_conn_unref>
   18910:	e7ef      	b.n	188f2 <le_conn_param_req+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   18912:	210e      	movs	r1, #14
   18914:	f242 0020 	movw	r0, #8224	; 0x2020
   18918:	f7ff fb46 	bl	17fa8 <bt_hci_cmd_create>
	if (!buf) {
   1891c:	4605      	mov	r5, r0
   1891e:	2800      	cmp	r0, #0
   18920:	d0f3      	beq.n	1890a <le_conn_param_req+0x82>
   18922:	210e      	movs	r1, #14
   18924:	3008      	adds	r0, #8
   18926:	f013 ffdd 	bl	2c8e4 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1892a:	220e      	movs	r2, #14
   1892c:	4604      	mov	r4, r0
   1892e:	2100      	movs	r1, #0
   18930:	f015 fa73 	bl	2de1a <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   18934:	883b      	ldrh	r3, [r7, #0]
   18936:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   18938:	887b      	ldrh	r3, [r7, #2]
   1893a:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1893c:	88bb      	ldrh	r3, [r7, #4]
   1893e:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   18940:	88fb      	ldrh	r3, [r7, #6]
	cp->handle = sys_cpu_to_le16(handle);
   18942:	f8a4 8000 	strh.w	r8, [r4]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   18946:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   18948:	4629      	mov	r1, r5
   1894a:	f242 0020 	movw	r0, #8224	; 0x2020
   1894e:	f7ff fef5 	bl	1873c <bt_hci_cmd_send>
   18952:	e7da      	b.n	1890a <le_conn_param_req+0x82>
   18954:	00030215 	.word	0x00030215
   18958:	0002e5bc 	.word	0x0002e5bc

0001895c <hci_event_prio>:
{
   1895c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18960:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   18962:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   18966:	4630      	mov	r0, r6
   18968:	f013 fffb 	bl	2c962 <net_buf_simple_headroom>
	state->len = buf->len;
   1896c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   18970:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   18974:	4605      	mov	r5, r0
   18976:	d80c      	bhi.n	18992 <hci_event_prio+0x36>
   18978:	4a1c      	ldr	r2, [pc, #112]	; (189ec <hci_event_prio+0x90>)
   1897a:	491d      	ldr	r1, [pc, #116]	; (189f0 <hci_event_prio+0x94>)
   1897c:	481d      	ldr	r0, [pc, #116]	; (189f4 <hci_event_prio+0x98>)
   1897e:	f640 536f 	movw	r3, #3439	; 0xd6f
   18982:	f011 f864 	bl	29a4e <assert_print>
   18986:	4040      	eors	r0, r0
   18988:	f380 8811 	msr	BASEPRI, r0
   1898c:	f04f 0003 	mov.w	r0, #3
   18990:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   18992:	4630      	mov	r0, r6
   18994:	2102      	movs	r1, #2
   18996:	f013 ffcc 	bl	2c932 <net_buf_simple_pull_mem>
   1899a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1899c:	7800      	ldrb	r0, [r0, #0]
   1899e:	f011 fea9 	bl	2a6f4 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   189a2:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   189a4:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   189a6:	d40c      	bmi.n	189c2 <hci_event_prio+0x66>
   189a8:	4a10      	ldr	r2, [pc, #64]	; (189ec <hci_event_prio+0x90>)
   189aa:	4913      	ldr	r1, [pc, #76]	; (189f8 <hci_event_prio+0x9c>)
   189ac:	4811      	ldr	r0, [pc, #68]	; (189f4 <hci_event_prio+0x98>)
   189ae:	f640 5373 	movw	r3, #3443	; 0xd73
   189b2:	f011 f84c 	bl	29a4e <assert_print>
   189b6:	4040      	eors	r0, r0
   189b8:	f380 8811 	msr	BASEPRI, r0
   189bc:	f04f 0003 	mov.w	r0, #3
   189c0:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   189c2:	2305      	movs	r3, #5
   189c4:	4a0d      	ldr	r2, [pc, #52]	; (189fc <hci_event_prio+0xa0>)
   189c6:	7838      	ldrb	r0, [r7, #0]
   189c8:	4621      	mov	r1, r4
   189ca:	f7ff f855 	bl	17a78 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   189ce:	07b3      	lsls	r3, r6, #30
   189d0:	d507      	bpl.n	189e2 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   189d2:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   189d4:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   189d8:	fa10 f585 	uxtah	r5, r0, r5
   189dc:	60a5      	str	r5, [r4, #8]
}
   189de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   189e2:	4620      	mov	r0, r4
}
   189e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   189e8:	f006 bdc4 	b.w	1f574 <net_buf_unref>
   189ec:	000302e2 	.word	0x000302e2
   189f0:	00030316 	.word	0x00030316
   189f4:	0003032f 	.word	0x0003032f
   189f8:	000305dd 	.word	0x000305dd
   189fc:	0002ee84 	.word	0x0002ee84

00018a00 <bt_recv>:
{
   18a00:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   18a02:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   18a04:	2b01      	cmp	r3, #1
{
   18a06:	af00      	add	r7, sp, #0
   18a08:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   18a0a:	d006      	beq.n	18a1a <bt_recv+0x1a>
   18a0c:	2b03      	cmp	r3, #3
   18a0e:	d113      	bne.n	18a38 <bt_recv+0x38>
			rx_queue_put(buf);
   18a10:	f7fe ff5e 	bl	178d0 <rx_queue_put>
		return 0;
   18a14:	2000      	movs	r0, #0
}
   18a16:	46bd      	mov	sp, r7
   18a18:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   18a1a:	6883      	ldr	r3, [r0, #8]
   18a1c:	7818      	ldrb	r0, [r3, #0]
   18a1e:	f011 fe69 	bl	2a6f4 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   18a22:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   18a24:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   18a26:	d502      	bpl.n	18a2e <bt_recv+0x2e>
			hci_event_prio(buf);
   18a28:	4628      	mov	r0, r5
   18a2a:	f7ff ff97 	bl	1895c <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   18a2e:	f014 0002 	ands.w	r0, r4, #2
   18a32:	d0f0      	beq.n	18a16 <bt_recv+0x16>
			rx_queue_put(buf);
   18a34:	4628      	mov	r0, r5
   18a36:	e7eb      	b.n	18a10 <bt_recv+0x10>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   18a38:	466c      	mov	r4, sp
   18a3a:	b088      	sub	sp, #32
   18a3c:	466a      	mov	r2, sp
   18a3e:	4909      	ldr	r1, [pc, #36]	; (18a64 <bt_recv+0x64>)
   18a40:	4809      	ldr	r0, [pc, #36]	; (18a68 <bt_recv+0x68>)
	switch (bt_buf_get_type(buf)) {
   18a42:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   18a46:	2303      	movs	r3, #3
   18a48:	f842 3f10 	str.w	r3, [r2, #16]!
   18a4c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18a50:	f011 fe9b 	bl	2a78a <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   18a54:	4628      	mov	r0, r5
   18a56:	46a5      	mov	sp, r4
   18a58:	f006 fd8c 	bl	1f574 <net_buf_unref>
		return -EINVAL;
   18a5c:	f06f 0015 	mvn.w	r0, #21
   18a60:	e7d9      	b.n	18a16 <bt_recv+0x16>
   18a62:	bf00      	nop
   18a64:	000305f6 	.word	0x000305f6
   18a68:	0002e5bc 	.word	0x0002e5bc

00018a6c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   18a6c:	4a08      	ldr	r2, [pc, #32]	; (18a90 <bt_hci_driver_register+0x24>)
{
   18a6e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   18a70:	f8d2 015c 	ldr.w	r0, [r2, #348]	; 0x15c
   18a74:	b930      	cbnz	r0, 18a84 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   18a76:	68d9      	ldr	r1, [r3, #12]
   18a78:	b139      	cbz	r1, 18a8a <bt_hci_driver_register+0x1e>
   18a7a:	6959      	ldr	r1, [r3, #20]
   18a7c:	b129      	cbz	r1, 18a8a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   18a7e:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
	return 0;
   18a82:	4770      	bx	lr
		return -EALREADY;
   18a84:	f06f 0077 	mvn.w	r0, #119	; 0x77
   18a88:	4770      	bx	lr
		return -EINVAL;
   18a8a:	f06f 0015 	mvn.w	r0, #21
}
   18a8e:	4770      	bx	lr
   18a90:	20000350 	.word	0x20000350

00018a94 <bt_finalize_init>:
{
   18a94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   18a98:	4c3f      	ldr	r4, [pc, #252]	; (18b98 <bt_finalize_init+0x104>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   18a9a:	4d40      	ldr	r5, [pc, #256]	; (18b9c <bt_finalize_init+0x108>)
{
   18a9c:	af00      	add	r7, sp, #0
   18a9e:	2104      	movs	r1, #4
   18aa0:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
   18aa4:	f011 fe51 	bl	2a74a <atomic_or>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   18aa8:	79e2      	ldrb	r2, [r4, #7]
   18aaa:	4b3d      	ldr	r3, [pc, #244]	; (18ba0 <bt_finalize_init+0x10c>)
   18aac:	4620      	mov	r0, r4
   18aae:	2a01      	cmp	r2, #1
   18ab0:	bf98      	it	ls
   18ab2:	461d      	movls	r5, r3
   18ab4:	466e      	mov	r6, sp
   18ab6:	f7fe fb3d 	bl	17134 <bt_addr_le_str_real>
   18aba:	b08a      	sub	sp, #40	; 0x28
   18abc:	466a      	mov	r2, sp
   18abe:	4b39      	ldr	r3, [pc, #228]	; (18ba4 <bt_finalize_init+0x110>)
   18ac0:	61d0      	str	r0, [r2, #28]
   18ac2:	e9c2 3505 	strd	r3, r5, [r2, #20]
   18ac6:	f240 3302 	movw	r3, #770	; 0x302
   18aca:	8413      	strh	r3, [r2, #32]
   18acc:	4b36      	ldr	r3, [pc, #216]	; (18ba8 <bt_finalize_init+0x114>)
   18ace:	f842 3f10 	str.w	r3, [r2, #16]!
   18ad2:	4836      	ldr	r0, [pc, #216]	; (18bac <bt_finalize_init+0x118>)
		BT_INFO("Identity[%d]: %s",
   18ad4:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 18bb0 <bt_finalize_init+0x11c>
   18ad8:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 18bb4 <bt_finalize_init+0x120>
   18adc:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 18bac <bt_finalize_init+0x118>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   18ae0:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   18ae4:	f011 fe51 	bl	2a78a <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   18ae8:	2501      	movs	r5, #1
   18aea:	46b5      	mov	sp, r6
   18aec:	4626      	mov	r6, r4
   18aee:	79e3      	ldrb	r3, [r4, #7]
   18af0:	429d      	cmp	r5, r3
   18af2:	f106 0607 	add.w	r6, r6, #7
   18af6:	db39      	blt.n	18b6c <bt_finalize_init+0xd8>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   18af8:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
   18afc:	4628      	mov	r0, r5
   18afe:	f7fe fdb7 	bl	17670 <ver_str>
   18b02:	466e      	mov	r6, sp
   18b04:	b08c      	sub	sp, #48	; 0x30
   18b06:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
   18b0a:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
   18b0e:	466a      	mov	r2, sp
   18b10:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 18bb8 <bt_finalize_init+0x124>
   18b14:	6253      	str	r3, [r2, #36]	; 0x24
   18b16:	e9c2 5107 	strd	r5, r1, [r2, #28]
   18b1a:	4b28      	ldr	r3, [pc, #160]	; (18bbc <bt_finalize_init+0x128>)
   18b1c:	2502      	movs	r5, #2
   18b1e:	e9c2 c005 	strd	ip, r0, [r2, #20]
   18b22:	f882 5028 	strb.w	r5, [r2, #40]	; 0x28
   18b26:	f44f 514b 	mov.w	r1, #12992	; 0x32c0
   18b2a:	f842 3f10 	str.w	r3, [r2, #16]!
   18b2e:	481f      	ldr	r0, [pc, #124]	; (18bac <bt_finalize_init+0x118>)
   18b30:	f011 fe2b 	bl	2a78a <z_log_msg_static_create.constprop.0>
   18b34:	46b5      	mov	sp, r6
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   18b36:	f894 6069 	ldrb.w	r6, [r4, #105]	; 0x69
   18b3a:	4630      	mov	r0, r6
   18b3c:	f7fe fd98 	bl	17670 <ver_str>
   18b40:	b08a      	sub	sp, #40	; 0x28
   18b42:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   18b46:	466a      	mov	r2, sp
   18b48:	491d      	ldr	r1, [pc, #116]	; (18bc0 <bt_finalize_init+0x12c>)
   18b4a:	f882 5024 	strb.w	r5, [r2, #36]	; 0x24
   18b4e:	e9c2 6307 	strd	r6, r3, [r2, #28]
   18b52:	4b1c      	ldr	r3, [pc, #112]	; (18bc4 <bt_finalize_init+0x130>)
   18b54:	e9c2 1005 	strd	r1, r0, [r2, #20]
   18b58:	f842 3f10 	str.w	r3, [r2, #16]!
   18b5c:	4813      	ldr	r0, [pc, #76]	; (18bac <bt_finalize_init+0x118>)
   18b5e:	f44f 512b 	mov.w	r1, #10944	; 0x2ac0
   18b62:	f011 fe12 	bl	2a78a <z_log_msg_static_create.constprop.0>
}
   18b66:	46bd      	mov	sp, r7
   18b68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		BT_INFO("Identity[%d]: %s",
   18b6c:	4630      	mov	r0, r6
   18b6e:	f7fe fae1 	bl	17134 <bt_addr_le_str_real>
   18b72:	46eb      	mov	fp, sp
   18b74:	b08a      	sub	sp, #40	; 0x28
   18b76:	466a      	mov	r2, sp
   18b78:	2303      	movs	r3, #3
   18b7a:	e9c2 8505 	strd	r8, r5, [r2, #20]
   18b7e:	61d0      	str	r0, [r2, #28]
   18b80:	f882 3020 	strb.w	r3, [r2, #32]
   18b84:	f44f 510b 	mov.w	r1, #8896	; 0x22c0
   18b88:	f842 9f10 	str.w	r9, [r2, #16]!
   18b8c:	4650      	mov	r0, sl
   18b8e:	f011 fdfc 	bl	2a78a <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   18b92:	3501      	adds	r5, #1
   18b94:	46dd      	mov	sp, fp
   18b96:	e7aa      	b.n	18aee <bt_finalize_init+0x5a>
   18b98:	20000350 	.word	0x20000350
   18b9c:	0003060a 	.word	0x0003060a
   18ba0:	0002f6bf 	.word	0x0002f6bf
   18ba4:	0003060e 	.word	0x0003060e
   18ba8:	02000004 	.word	0x02000004
   18bac:	0002e5bc 	.word	0x0002e5bc
   18bb0:	0003061d 	.word	0x0003061d
   18bb4:	01000004 	.word	0x01000004
   18bb8:	0003062e 	.word	0x0003062e
   18bbc:	01000006 	.word	0x01000006
   18bc0:	0003066c 	.word	0x0003066c
   18bc4:	01000005 	.word	0x01000005

00018bc8 <init_work>:
{
   18bc8:	b510      	push	{r4, lr}
	err = bt_init();
   18bca:	f7f8 ff7d 	bl	11ac8 <bt_init>
	if (ready_cb) {
   18bce:	4b03      	ldr	r3, [pc, #12]	; (18bdc <init_work+0x14>)
   18bd0:	681b      	ldr	r3, [r3, #0]
   18bd2:	b113      	cbz	r3, 18bda <init_work+0x12>
}
   18bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   18bd8:	4718      	bx	r3
}
   18bda:	bd10      	pop	{r4, pc}
   18bdc:	20005b58 	.word	0x20005b58

00018be0 <bt_is_ready>:
   18be0:	4b04      	ldr	r3, [pc, #16]	; (18bf4 <bt_is_ready+0x14>)
   18be2:	f3bf 8f5b 	dmb	ish
   18be6:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
   18bea:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   18bee:	f3c0 0080 	ubfx	r0, r0, #2, #1
   18bf2:	4770      	bx	lr
   18bf4:	20000350 	.word	0x20000350

00018bf8 <bt_set_name>:
#else
BUILD_ASSERT(DEVICE_NAME_LEN < 248);
#endif

int bt_set_name(const char *name)
{
   18bf8:	b570      	push	{r4, r5, r6, lr}
   18bfa:	b086      	sub	sp, #24
   18bfc:	4604      	mov	r4, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
   18bfe:	f7f4 fb6e 	bl	d2de <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   18c02:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
   18c04:	4605      	mov	r5, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   18c06:	d827      	bhi.n	18c58 <bt_set_name+0x60>
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
   18c08:	4e15      	ldr	r6, [pc, #84]	; (18c60 <bt_set_name+0x68>)
   18c0a:	4621      	mov	r1, r4
   18c0c:	f506 70d1 	add.w	r0, r6, #418	; 0x1a2
   18c10:	f7f4 fb5b 	bl	d2ca <strcmp>
   18c14:	b910      	cbnz	r0, 18c1c <bt_set_name+0x24>
		return 0;
   18c16:	2000      	movs	r0, #0

	return 0;
#else
	return -ENOMEM;
#endif
}
   18c18:	b006      	add	sp, #24
   18c1a:	bd70      	pop	{r4, r5, r6, pc}
	strncpy(bt_dev.name, name, len);
   18c1c:	4621      	mov	r1, r4
   18c1e:	2346      	movs	r3, #70	; 0x46
   18c20:	462a      	mov	r2, r5
   18c22:	f506 70d1 	add.w	r0, r6, #418	; 0x1a2
   18c26:	f015 f9b0 	bl	2df8a <__strncpy_chk>
	bt_dev.name[len] = '\0';
   18c2a:	1973      	adds	r3, r6, r5
   18c2c:	2400      	movs	r4, #0
		err = settings_save_one("bt/name", bt_dev.name, len);
   18c2e:	480d      	ldr	r0, [pc, #52]	; (18c64 <bt_set_name+0x6c>)
	bt_dev.name[len] = '\0';
   18c30:	f883 41a2 	strb.w	r4, [r3, #418]	; 0x1a2
		err = settings_save_one("bt/name", bt_dev.name, len);
   18c34:	462a      	mov	r2, r5
   18c36:	f506 71d1 	add.w	r1, r6, #418	; 0x1a2
   18c3a:	f7fd f95d 	bl	15ef8 <settings_save_one>
		if (err) {
   18c3e:	2800      	cmp	r0, #0
   18c40:	d0e9      	beq.n	18c16 <bt_set_name+0x1e>
			BT_WARN("Unable to store name");
   18c42:	4b09      	ldr	r3, [pc, #36]	; (18c68 <bt_set_name+0x70>)
   18c44:	9305      	str	r3, [sp, #20]
   18c46:	4809      	ldr	r0, [pc, #36]	; (18c6c <bt_set_name+0x74>)
   18c48:	2302      	movs	r3, #2
   18c4a:	aa04      	add	r2, sp, #16
   18c4c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18c50:	9304      	str	r3, [sp, #16]
   18c52:	f011 fd9a 	bl	2a78a <z_log_msg_static_create.constprop.0>
   18c56:	e7de      	b.n	18c16 <bt_set_name+0x1e>
		return -ENOMEM;
   18c58:	f06f 000b 	mvn.w	r0, #11
   18c5c:	e7dc      	b.n	18c18 <bt_set_name+0x20>
   18c5e:	bf00      	nop
   18c60:	20000350 	.word	0x20000350
   18c64:	000307ae 	.word	0x000307ae
   18c68:	000307b6 	.word	0x000307b6
   18c6c:	0002e5bc 	.word	0x0002e5bc

00018c70 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   18c70:	4800      	ldr	r0, [pc, #0]	; (18c74 <bt_get_name+0x4>)
   18c72:	4770      	bx	lr
   18c74:	200004f2 	.word	0x200004f2

00018c78 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   18c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   18c7a:	4f0b      	ldr	r7, [pc, #44]	; (18ca8 <id_find+0x30>)
{
   18c7c:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   18c7e:	2500      	movs	r5, #0
   18c80:	79fb      	ldrb	r3, [r7, #7]
   18c82:	b2ec      	uxtb	r4, r5
   18c84:	42a3      	cmp	r3, r4
   18c86:	d802      	bhi.n	18c8e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   18c88:	f06f 0401 	mvn.w	r4, #1
   18c8c:	e009      	b.n	18ca2 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   18c8e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   18c92:	2207      	movs	r2, #7
   18c94:	4439      	add	r1, r7
   18c96:	4630      	mov	r0, r6
   18c98:	f015 f88e 	bl	2ddb8 <memcmp>
   18c9c:	3501      	adds	r5, #1
   18c9e:	2800      	cmp	r0, #0
   18ca0:	d1ee      	bne.n	18c80 <id_find+0x8>
}
   18ca2:	4620      	mov	r0, r4
   18ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18ca6:	bf00      	nop
   18ca8:	20000350 	.word	0x20000350

00018cac <hci_id_add>:
{
   18cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18cae:	460f      	mov	r7, r1
   18cb0:	4615      	mov	r5, r2
	if (id >= CONFIG_BT_ID_MAX) {
   18cb2:	bb70      	cbnz	r0, 18d12 <hci_id_add+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   18cb4:	2127      	movs	r1, #39	; 0x27
   18cb6:	f242 0027 	movw	r0, #8231	; 0x2027
   18cba:	f7ff f975 	bl	17fa8 <bt_hci_cmd_create>
	if (!buf) {
   18cbe:	4606      	mov	r6, r0
   18cc0:	b350      	cbz	r0, 18d18 <hci_id_add+0x6c>
	return net_buf_simple_add(&buf->b, len);
   18cc2:	2127      	movs	r1, #39	; 0x27
   18cc4:	3008      	adds	r0, #8
   18cc6:	f013 fe0d 	bl	2c8e4 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   18cca:	4639      	mov	r1, r7
   18ccc:	f011 fe5f 	bl	2a98e <bt_addr_le_copy>
   18cd0:	4604      	mov	r4, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18cd2:	462a      	mov	r2, r5
   18cd4:	1dc3      	adds	r3, r0, #7
   18cd6:	f105 0110 	add.w	r1, r5, #16
   18cda:	f852 0b04 	ldr.w	r0, [r2], #4
   18cde:	f843 0b04 	str.w	r0, [r3], #4
   18ce2:	428a      	cmp	r2, r1
   18ce4:	d1f9      	bne.n	18cda <hci_id_add+0x2e>
   18ce6:	4d0e      	ldr	r5, [pc, #56]	; (18d20 <hci_id_add+0x74>)
   18ce8:	f104 0317 	add.w	r3, r4, #23
   18cec:	f105 0410 	add.w	r4, r5, #16
   18cf0:	462a      	mov	r2, r5
   18cf2:	ca03      	ldmia	r2!, {r0, r1}
   18cf4:	42a2      	cmp	r2, r4
   18cf6:	6018      	str	r0, [r3, #0]
   18cf8:	6059      	str	r1, [r3, #4]
   18cfa:	4615      	mov	r5, r2
   18cfc:	f103 0308 	add.w	r3, r3, #8
   18d00:	d1f6      	bne.n	18cf0 <hci_id_add+0x44>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   18d02:	4631      	mov	r1, r6
   18d04:	2200      	movs	r2, #0
}
   18d06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   18d0a:	f242 0027 	movw	r0, #8231	; 0x2027
   18d0e:	f7ff b985 	b.w	1801c <bt_hci_cmd_send_sync>
		return -EINVAL;
   18d12:	f06f 0015 	mvn.w	r0, #21
}
   18d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   18d18:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18d1c:	e7fb      	b.n	18d16 <hci_id_add+0x6a>
   18d1e:	bf00      	nop
   18d20:	200004b0 	.word	0x200004b0

00018d24 <bt_id_add.part.0>:
void bt_id_add(struct bt_keys *keys)
   18d24:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   18d26:	2100      	movs	r1, #0
void bt_id_add(struct bt_keys *keys)
   18d28:	b087      	sub	sp, #28
   18d2a:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   18d2c:	2206      	movs	r2, #6
   18d2e:	4608      	mov	r0, r1
   18d30:	f001 fa8e 	bl	1a250 <bt_conn_lookup_state_le>
	if (conn) {
   18d34:	4606      	mov	r6, r0
   18d36:	b170      	cbz	r0, 18d56 <bt_id_add.part.0+0x32>
   18d38:	4848      	ldr	r0, [pc, #288]	; (18e5c <bt_id_add.part.0+0x138>)
   18d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   18d3e:	f011 fe53 	bl	2a9e8 <atomic_or.isra.0>
	keys->state |= flag;
   18d42:	7a23      	ldrb	r3, [r4, #8]
		bt_conn_unref(conn);
   18d44:	4630      	mov	r0, r6
	keys->state |= flag;
   18d46:	f043 0301 	orr.w	r3, r3, #1
   18d4a:	7223      	strb	r3, [r4, #8]
}
   18d4c:	b007      	add	sp, #28
   18d4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   18d52:	f011 bf12 	b.w	2ab7a <bt_conn_unref>
	if (bt_dev.le.rl_entries) {
   18d56:	4d42      	ldr	r5, [pc, #264]	; (18e60 <bt_id_add.part.0+0x13c>)
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   18d58:	4601      	mov	r1, r0
   18d5a:	4842      	ldr	r0, [pc, #264]	; (18e64 <bt_id_add.part.0+0x140>)
   18d5c:	f000 fcb2 	bl	196c4 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   18d60:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   18d64:	b173      	cbz	r3, 18d84 <bt_id_add.part.0+0x60>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   18d66:	4630      	mov	r0, r6
   18d68:	f011 fe26 	bl	2a9b8 <addr_res_enable>
		if (err) {
   18d6c:	b150      	cbz	r0, 18d84 <bt_id_add.part.0+0x60>
			BT_WARN("Failed to disable address resolution");
   18d6e:	4b3e      	ldr	r3, [pc, #248]	; (18e68 <bt_id_add.part.0+0x144>)
		BT_WARN("Set privacy mode command is not supported");
   18d70:	9305      	str	r3, [sp, #20]
   18d72:	2302      	movs	r3, #2
   18d74:	9304      	str	r3, [sp, #16]
   18d76:	aa04      	add	r2, sp, #16
   18d78:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18d7c:	483b      	ldr	r0, [pc, #236]	; (18e6c <bt_id_add.part.0+0x148>)
   18d7e:	f011 fe18 	bl	2a9b2 <z_log_msg_static_create.constprop.0>
	if (err) {
   18d82:	e026      	b.n	18dd2 <bt_id_add.part.0+0xae>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   18d84:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   18d88:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   18d8c:	429a      	cmp	r2, r3
   18d8e:	d12a      	bne.n	18de6 <bt_id_add.part.0+0xc2>
		BT_WARN("Resolving list size exceeded. Switching to host.");
   18d90:	4b37      	ldr	r3, [pc, #220]	; (18e70 <bt_id_add.part.0+0x14c>)
   18d92:	4836      	ldr	r0, [pc, #216]	; (18e6c <bt_id_add.part.0+0x148>)
   18d94:	9305      	str	r3, [sp, #20]
   18d96:	aa04      	add	r2, sp, #16
   18d98:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18d9c:	2602      	movs	r6, #2
   18d9e:	9604      	str	r6, [sp, #16]
   18da0:	f011 fe07 	bl	2a9b2 <z_log_msg_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   18da4:	2200      	movs	r2, #0
   18da6:	4611      	mov	r1, r2
   18da8:	f242 0029 	movw	r0, #8233	; 0x2029
   18dac:	f7ff f936 	bl	1801c <bt_hci_cmd_send_sync>
		if (err) {
   18db0:	b130      	cbz	r0, 18dc0 <bt_id_add.part.0+0x9c>
			BT_ERR("Failed to clear resolution list");
   18db2:	4b30      	ldr	r3, [pc, #192]	; (18e74 <bt_id_add.part.0+0x150>)
   18db4:	e9cd 6304 	strd	r6, r3, [sp, #16]
		BT_ERR("Failed to set privacy mode");
   18db8:	aa04      	add	r2, sp, #16
   18dba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18dbe:	e7dd      	b.n	18d7c <bt_id_add.part.0+0x58>
		bt_dev.le.rl_entries++;
   18dc0:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   18dc4:	3301      	adds	r3, #1
   18dc6:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   18dca:	7a23      	ldrb	r3, [r4, #8]
   18dcc:	f043 0304 	orr.w	r3, r3, #4
   18dd0:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   18dd2:	2001      	movs	r0, #1
   18dd4:	f011 fdf0 	bl	2a9b8 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   18dd8:	4827      	ldr	r0, [pc, #156]	; (18e78 <bt_id_add.part.0+0x154>)
   18dda:	2100      	movs	r1, #0
}
   18ddc:	b007      	add	sp, #28
   18dde:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   18de2:	f000 bc6f 	b.w	196c4 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   18de6:	4622      	mov	r2, r4
   18de8:	1c67      	adds	r7, r4, #1
   18dea:	f812 0b2a 	ldrb.w	r0, [r2], #42
   18dee:	4639      	mov	r1, r7
   18df0:	f7ff ff5c 	bl	18cac <hci_id_add>
	if (err) {
   18df4:	4606      	mov	r6, r0
   18df6:	b120      	cbz	r0, 18e02 <bt_id_add.part.0+0xde>
		BT_ERR("Failed to add IRK to controller");
   18df8:	4b20      	ldr	r3, [pc, #128]	; (18e7c <bt_id_add.part.0+0x158>)
		BT_ERR("Failed to set privacy mode");
   18dfa:	9305      	str	r3, [sp, #20]
   18dfc:	2302      	movs	r3, #2
   18dfe:	9304      	str	r3, [sp, #16]
   18e00:	e7da      	b.n	18db8 <bt_id_add.part.0+0x94>
	bt_dev.le.rl_entries++;
   18e02:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   18e06:	3301      	adds	r3, #1
   18e08:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   18e0c:	7a23      	ldrb	r3, [r4, #8]
   18e0e:	f043 0304 	orr.w	r3, r3, #4
   18e12:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   18e14:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   18e18:	075b      	lsls	r3, r3, #29
   18e1a:	d401      	bmi.n	18e20 <bt_id_add.part.0+0xfc>
		BT_WARN("Set privacy mode command is not supported");
   18e1c:	4b18      	ldr	r3, [pc, #96]	; (18e80 <bt_id_add.part.0+0x15c>)
   18e1e:	e7a7      	b.n	18d70 <bt_id_add.part.0+0x4c>
	bt_addr_le_copy(&cp.id_addr, addr);
   18e20:	4639      	mov	r1, r7
   18e22:	4668      	mov	r0, sp
   18e24:	f011 fdb3 	bl	2a98e <bt_addr_le_copy>
	cp.mode = mode;
   18e28:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   18e2a:	2108      	movs	r1, #8
   18e2c:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   18e30:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   18e34:	f7ff f8b8 	bl	17fa8 <bt_hci_cmd_create>
	if (!buf) {
   18e38:	4604      	mov	r4, r0
   18e3a:	b908      	cbnz	r0, 18e40 <bt_id_add.part.0+0x11c>
		BT_ERR("Failed to set privacy mode");
   18e3c:	4b11      	ldr	r3, [pc, #68]	; (18e84 <bt_id_add.part.0+0x160>)
   18e3e:	e7dc      	b.n	18dfa <bt_id_add.part.0+0xd6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18e40:	2208      	movs	r2, #8
   18e42:	4669      	mov	r1, sp
   18e44:	4410      	add	r0, r2
   18e46:	f013 fd53 	bl	2c8f0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   18e4a:	4632      	mov	r2, r6
   18e4c:	4621      	mov	r1, r4
   18e4e:	f242 004e 	movw	r0, #8270	; 0x204e
   18e52:	f7ff f8e3 	bl	1801c <bt_hci_cmd_send_sync>
	if (err) {
   18e56:	2800      	cmp	r0, #0
   18e58:	d0bb      	beq.n	18dd2 <bt_id_add.part.0+0xae>
   18e5a:	e7ef      	b.n	18e3c <bt_id_add.part.0+0x118>
   18e5c:	2000041c 	.word	0x2000041c
   18e60:	20000350 	.word	0x20000350
   18e64:	0002aa01 	.word	0x0002aa01
   18e68:	000307f5 	.word	0x000307f5
   18e6c:	0002e5c4 	.word	0x0002e5c4
   18e70:	0003081a 	.word	0x0003081a
   18e74:	0003084b 	.word	0x0003084b
   18e78:	0002a95b 	.word	0x0002a95b
   18e7c:	0003086b 	.word	0x0003086b
   18e80:	0003088b 	.word	0x0003088b
   18e84:	000308b5 	.word	0x000308b5

00018e88 <set_random_address>:
{
   18e88:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   18e8a:	2206      	movs	r2, #6
   18e8c:	4912      	ldr	r1, [pc, #72]	; (18ed8 <set_random_address+0x50>)
   18e8e:	4605      	mov	r5, r0
   18e90:	f014 ff92 	bl	2ddb8 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   18e94:	4602      	mov	r2, r0
   18e96:	b1d0      	cbz	r0, 18ece <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   18e98:	2106      	movs	r1, #6
   18e9a:	f242 0005 	movw	r0, #8197	; 0x2005
   18e9e:	f7ff f883 	bl	17fa8 <bt_hci_cmd_create>
	if (!buf) {
   18ea2:	4604      	mov	r4, r0
   18ea4:	b1a8      	cbz	r0, 18ed2 <set_random_address+0x4a>
   18ea6:	2206      	movs	r2, #6
   18ea8:	4629      	mov	r1, r5
   18eaa:	3008      	adds	r0, #8
   18eac:	f013 fd20 	bl	2c8f0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   18eb0:	2200      	movs	r2, #0
   18eb2:	4621      	mov	r1, r4
   18eb4:	f242 0005 	movw	r0, #8197	; 0x2005
   18eb8:	f7ff f8b0 	bl	1801c <bt_hci_cmd_send_sync>
	if (err) {
   18ebc:	4602      	mov	r2, r0
   18ebe:	b930      	cbnz	r0, 18ece <set_random_address+0x46>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   18ec0:	4805      	ldr	r0, [pc, #20]	; (18ed8 <set_random_address+0x50>)
   18ec2:	4629      	mov	r1, r5
   18ec4:	f011 fd5e 	bl	2a984 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   18ec8:	2301      	movs	r3, #1
   18eca:	f800 3c01 	strb.w	r3, [r0, #-1]
}
   18ece:	4610      	mov	r0, r2
   18ed0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   18ed2:	f06f 0268 	mvn.w	r2, #104	; 0x68
   18ed6:	e7fa      	b.n	18ece <set_random_address+0x46>
   18ed8:	200003b1 	.word	0x200003b1

00018edc <bt_id_del.part.0>:
void bt_id_del(struct bt_keys *keys)
   18edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   18ee0:	2100      	movs	r1, #0
void bt_id_del(struct bt_keys *keys)
   18ee2:	b087      	sub	sp, #28
   18ee4:	4604      	mov	r4, r0
   18ee6:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   18ee8:	2206      	movs	r2, #6
   18eea:	4608      	mov	r0, r1
   18eec:	f001 f9b0 	bl	1a250 <bt_conn_lookup_state_le>
	if (conn) {
   18ef0:	4605      	mov	r5, r0
   18ef2:	b178      	cbz	r0, 18f14 <bt_id_del.part.0+0x38>
   18ef4:	483a      	ldr	r0, [pc, #232]	; (18fe0 <bt_id_del.part.0+0x104>)
   18ef6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   18efa:	f011 fd75 	bl	2a9e8 <atomic_or.isra.0>
	keys->state |= flag;
   18efe:	7a23      	ldrb	r3, [r4, #8]
   18f00:	f043 0302 	orr.w	r3, r3, #2
   18f04:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   18f06:	4628      	mov	r0, r5
   18f08:	f011 fe37 	bl	2ab7a <bt_conn_unref>
}
   18f0c:	371c      	adds	r7, #28
   18f0e:	46bd      	mov	sp, r7
   18f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   18f14:	4601      	mov	r1, r0
   18f16:	4833      	ldr	r0, [pc, #204]	; (18fe4 <bt_id_del.part.0+0x108>)
   18f18:	f000 fbd4 	bl	196c4 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   18f1c:	4628      	mov	r0, r5
   18f1e:	f011 fd4b 	bl	2a9b8 <addr_res_enable>
	if (err) {
   18f22:	4d31      	ldr	r5, [pc, #196]	; (18fe8 <bt_id_del.part.0+0x10c>)
   18f24:	4606      	mov	r6, r0
   18f26:	b1d0      	cbz	r0, 18f5e <bt_id_del.part.0+0x82>
		BT_ERR("Disabling address resolution failed (err %d)", err);
   18f28:	466c      	mov	r4, sp
   18f2a:	b088      	sub	sp, #32
   18f2c:	466b      	mov	r3, sp
   18f2e:	4a2f      	ldr	r2, [pc, #188]	; (18fec <bt_id_del.part.0+0x110>)
   18f30:	e9c3 2005 	strd	r2, r0, [r3, #20]
   18f34:	461a      	mov	r2, r3
   18f36:	2303      	movs	r3, #3
   18f38:	f842 3f10 	str.w	r3, [r2, #16]!
   18f3c:	482c      	ldr	r0, [pc, #176]	; (18ff0 <bt_id_del.part.0+0x114>)
   18f3e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18f42:	f011 fd36 	bl	2a9b2 <z_log_msg_static_create.constprop.0>
   18f46:	46a5      	mov	sp, r4
	if (bt_dev.le.rl_entries) {
   18f48:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   18f4c:	b113      	cbz	r3, 18f54 <bt_id_del.part.0+0x78>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   18f4e:	2001      	movs	r0, #1
   18f50:	f011 fd32 	bl	2a9b8 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   18f54:	4827      	ldr	r0, [pc, #156]	; (18ff4 <bt_id_del.part.0+0x118>)
   18f56:	2100      	movs	r1, #0
   18f58:	f000 fbb4 	bl	196c4 <bt_le_ext_adv_foreach>
   18f5c:	e7d6      	b.n	18f0c <bt_id_del.part.0+0x30>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   18f5e:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   18f62:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   18f66:	429a      	cmp	r2, r3
   18f68:	d20c      	bcs.n	18f84 <bt_id_del.part.0+0xa8>
		bt_dev.le.rl_entries--;
   18f6a:	3b01      	subs	r3, #1
   18f6c:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   18f70:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   18f72:	4921      	ldr	r1, [pc, #132]	; (18ff8 <bt_id_del.part.0+0x11c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   18f74:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   18f78:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   18f7a:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   18f7c:	2002      	movs	r0, #2
   18f7e:	f006 f84b 	bl	1f018 <bt_keys_foreach>
		goto done;
   18f82:	e7e1      	b.n	18f48 <bt_id_del.part.0+0x6c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   18f84:	2107      	movs	r1, #7
   18f86:	f242 0028 	movw	r0, #8232	; 0x2028
   18f8a:	f7ff f80d 	bl	17fa8 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   18f8e:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
   18f92:	4680      	mov	r8, r0
   18f94:	b958      	cbnz	r0, 18fae <bt_id_del.part.0+0xd2>
		BT_ERR("Failed to remove IRK from controller");
   18f96:	4b19      	ldr	r3, [pc, #100]	; (18ffc <bt_id_del.part.0+0x120>)
   18f98:	617b      	str	r3, [r7, #20]
   18f9a:	4815      	ldr	r0, [pc, #84]	; (18ff0 <bt_id_del.part.0+0x114>)
   18f9c:	2302      	movs	r3, #2
   18f9e:	f107 0210 	add.w	r2, r7, #16
   18fa2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18fa6:	613b      	str	r3, [r7, #16]
   18fa8:	f011 fd03 	bl	2a9b2 <z_log_msg_static_create.constprop.0>
		goto done;
   18fac:	e7cc      	b.n	18f48 <bt_id_del.part.0+0x6c>
	return net_buf_simple_add(&buf->b, len);
   18fae:	2107      	movs	r1, #7
   18fb0:	3008      	adds	r0, #8
   18fb2:	f013 fc97 	bl	2c8e4 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   18fb6:	4649      	mov	r1, r9
   18fb8:	f011 fce9 	bl	2a98e <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   18fbc:	4632      	mov	r2, r6
   18fbe:	4641      	mov	r1, r8
   18fc0:	f242 0028 	movw	r0, #8232	; 0x2028
   18fc4:	f7ff f82a 	bl	1801c <bt_hci_cmd_send_sync>
	if (err) {
   18fc8:	2800      	cmp	r0, #0
   18fca:	d1e4      	bne.n	18f96 <bt_id_del.part.0+0xba>
	bt_dev.le.rl_entries--;
   18fcc:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   18fd0:	3b01      	subs	r3, #1
   18fd2:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   18fd6:	7a23      	ldrb	r3, [r4, #8]
   18fd8:	f023 0304 	bic.w	r3, r3, #4
   18fdc:	7223      	strb	r3, [r4, #8]
   18fde:	e7b3      	b.n	18f48 <bt_id_del.part.0+0x6c>
   18fe0:	2000041c 	.word	0x2000041c
   18fe4:	0002aa01 	.word	0x0002aa01
   18fe8:	20000350 	.word	0x20000350
   18fec:	000308d0 	.word	0x000308d0
   18ff0:	0002e5c4 	.word	0x0002e5c4
   18ff4:	0002a95b 	.word	0x0002a95b
   18ff8:	0002a99d 	.word	0x0002a99d
   18ffc:	000308fd 	.word	0x000308fd

00019000 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   19000:	b570      	push	{r4, r5, r6, lr}
   19002:	4605      	mov	r5, r0
   19004:	b086      	sub	sp, #24
   19006:	4614      	mov	r4, r2
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   19008:	460e      	mov	r6, r1
   1900a:	b3a9      	cbz	r1, 19078 <id_create+0x78>
   1900c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   1900e:	2207      	movs	r2, #7
   19010:	4669      	mov	r1, sp
   19012:	4630      	mov	r0, r6
   19014:	9300      	str	r3, [sp, #0]
   19016:	f8cd 3003 	str.w	r3, [sp, #3]
   1901a:	f014 fecd 	bl	2ddb8 <memcmp>
   1901e:	b358      	cbz	r0, 19078 <id_create+0x78>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   19020:	482a      	ldr	r0, [pc, #168]	; (190cc <id_create+0xcc>)
   19022:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   19026:	4631      	mov	r1, r6
   19028:	4418      	add	r0, r3
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1902a:	f011 fcb0 	bl	2a98e <bt_addr_le_copy>
#if defined(CONFIG_BT_PRIVACY)
	{
		uint8_t zero_irk[16] = { 0 };

		if (irk && memcmp(irk, zero_irk, 16)) {
			memcpy(&bt_dev.irk[id], irk, 16);
   1902e:	4827      	ldr	r0, [pc, #156]	; (190cc <id_create+0xcc>)
		uint8_t zero_irk[16] = { 0 };
   19030:	2300      	movs	r3, #0
			memcpy(&bt_dev.irk[id], irk, 16);
   19032:	3516      	adds	r5, #22
		uint8_t zero_irk[16] = { 0 };
   19034:	e9cd 3302 	strd	r3, r3, [sp, #8]
   19038:	e9cd 3304 	strd	r3, r3, [sp, #16]
			memcpy(&bt_dev.irk[id], irk, 16);
   1903c:	eb00 1505 	add.w	r5, r0, r5, lsl #4
		if (irk && memcmp(irk, zero_irk, 16)) {
   19040:	b384      	cbz	r4, 190a4 <id_create+0xa4>
   19042:	2210      	movs	r2, #16
   19044:	a902      	add	r1, sp, #8
   19046:	4620      	mov	r0, r4
   19048:	f014 feb6 	bl	2ddb8 <memcmp>
   1904c:	b350      	cbz	r0, 190a4 <id_create+0xa4>
   1904e:	4628      	mov	r0, r5
   19050:	f104 0310 	add.w	r3, r4, #16
   19054:	f854 2b04 	ldr.w	r2, [r4], #4
   19058:	f840 2b04 	str.w	r2, [r0], #4
   1905c:	429c      	cmp	r4, r3
   1905e:	d1f9      	bne.n	19054 <id_create+0x54>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19060:	481b      	ldr	r0, [pc, #108]	; (190d0 <id_create+0xd0>)
   19062:	f011 fc5c 	bl	2a91e <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   19066:	0742      	lsls	r2, r0, #29
   19068:	f3c0 0380 	ubfx	r3, r0, #2, #1
   1906c:	d52c      	bpl.n	190c8 <id_create+0xc8>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   1906e:	f7fe f9e9 	bl	17444 <bt_settings_save_id>
	}

	return 0;
   19072:	2000      	movs	r0, #0
}
   19074:	b006      	add	sp, #24
   19076:	bd70      	pop	{r4, r5, r6, pc}
			err = bt_addr_le_create_static(&new_addr);
   19078:	a802      	add	r0, sp, #8
   1907a:	f011 fb2d 	bl	2a6d8 <bt_addr_le_create_static>
			if (err) {
   1907e:	2800      	cmp	r0, #0
   19080:	d1f8      	bne.n	19074 <id_create+0x74>
		} while (id_find(&new_addr) >= 0);
   19082:	a802      	add	r0, sp, #8
   19084:	f7ff fdf8 	bl	18c78 <id_find>
   19088:	2800      	cmp	r0, #0
   1908a:	daf5      	bge.n	19078 <id_create+0x78>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1908c:	4b0f      	ldr	r3, [pc, #60]	; (190cc <id_create+0xcc>)
   1908e:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
   19092:	4418      	add	r0, r3
   19094:	a902      	add	r1, sp, #8
   19096:	f011 fc7a 	bl	2a98e <bt_addr_le_copy>
		if (addr) {
   1909a:	2e00      	cmp	r6, #0
   1909c:	d0c7      	beq.n	1902e <id_create+0x2e>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1909e:	4601      	mov	r1, r0
   190a0:	4630      	mov	r0, r6
   190a2:	e7c2      	b.n	1902a <id_create+0x2a>
			err = bt_rand(&bt_dev.irk[id], 16);
   190a4:	2110      	movs	r1, #16
   190a6:	4628      	mov	r0, r5
   190a8:	f008 fc20 	bl	218ec <bt_rand>
			if (err) {
   190ac:	2800      	cmp	r0, #0
   190ae:	d1e1      	bne.n	19074 <id_create+0x74>
			if (irk) {
   190b0:	2c00      	cmp	r4, #0
   190b2:	d0d5      	beq.n	19060 <id_create+0x60>
   190b4:	4628      	mov	r0, r5
   190b6:	f105 0310 	add.w	r3, r5, #16
   190ba:	f850 2b04 	ldr.w	r2, [r0], #4
   190be:	f844 2b04 	str.w	r2, [r4], #4
   190c2:	4298      	cmp	r0, r3
   190c4:	d1f9      	bne.n	190ba <id_create+0xba>
   190c6:	e7cb      	b.n	19060 <id_create+0x60>
	return 0;
   190c8:	4618      	mov	r0, r3
   190ca:	e7d3      	b.n	19074 <id_create+0x74>
   190cc:	20000350 	.word	0x20000350
   190d0:	2000041c 	.word	0x2000041c

000190d4 <le_rpa_invalidate>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   190d4:	4b08      	ldr	r3, [pc, #32]	; (190f8 <le_rpa_invalidate+0x24>)
   190d6:	f3bf 8f5b 	dmb	ish
   190da:	e853 2f00 	ldrex	r2, [r3]
   190de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   190e2:	e843 2100 	strex	r1, r2, [r3]
   190e6:	2900      	cmp	r1, #0
   190e8:	d1f7      	bne.n	190da <le_rpa_invalidate+0x6>
   190ea:	f3bf 8f5b 	dmb	ish
		bt_le_ext_adv_foreach(adv_rpa_invalidate, NULL);
   190ee:	4803      	ldr	r0, [pc, #12]	; (190fc <le_rpa_invalidate+0x28>)
   190f0:	2100      	movs	r1, #0
   190f2:	f000 bae7 	b.w	196c4 <bt_le_ext_adv_foreach>
   190f6:	bf00      	nop
   190f8:	2000041c 	.word	0x2000041c
   190fc:	0002aa2b 	.word	0x0002aa2b

00019100 <bt_id_set_private_addr>:
{
   19100:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19102:	4603      	mov	r3, r0
   19104:	481a      	ldr	r0, [pc, #104]	; (19170 <bt_id_set_private_addr+0x70>)
   19106:	f011 fc0a 	bl	2a91e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
   1910a:	0482      	lsls	r2, r0, #18
   1910c:	d42d      	bmi.n	1916a <bt_id_set_private_addr+0x6a>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
   1910e:	4d19      	ldr	r5, [pc, #100]	; (19174 <bt_id_set_private_addr+0x74>)
   19110:	f103 0016 	add.w	r0, r3, #22
   19114:	4669      	mov	r1, sp
   19116:	eb05 1000 	add.w	r0, r5, r0, lsl #4
   1911a:	f011 fa51 	bl	2a5c0 <bt_rpa_create>
	if (!err) {
   1911e:	4604      	mov	r4, r0
   19120:	b950      	cbnz	r0, 19138 <bt_id_set_private_addr+0x38>
		err = set_random_address(&rpa);
   19122:	4668      	mov	r0, sp
   19124:	f7ff feb0 	bl	18e88 <set_random_address>
		if (!err) {
   19128:	4604      	mov	r4, r0
   1912a:	b928      	cbnz	r0, 19138 <bt_id_set_private_addr+0x38>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1912c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   19130:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   19134:	f011 fc58 	bl	2a9e8 <atomic_or.isra.0>
	(void)k_work_schedule(&bt_dev.rpa_update, K_SECONDS(bt_dev.rpa_timeout));
   19138:	f8b5 51a0 	ldrh.w	r5, [r5, #416]	; 0x1a0
   1913c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   19140:	435d      	muls	r5, r3
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   19142:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   19146:	f240 30e7 	movw	r0, #999	; 0x3e7
   1914a:	2100      	movs	r1, #0
   1914c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19150:	2300      	movs	r3, #0
   19152:	fbe5 0106 	umlal	r0, r1, r5, r6
   19156:	f7e8 f80b 	bl	1170 <__aeabi_uldivmod>
   1915a:	4602      	mov	r2, r0
   1915c:	460b      	mov	r3, r1
   1915e:	4806      	ldr	r0, [pc, #24]	; (19178 <bt_id_set_private_addr+0x78>)
   19160:	f00a fbbe 	bl	238e0 <k_work_schedule>
}
   19164:	4620      	mov	r0, r4
   19166:	b002      	add	sp, #8
   19168:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   1916a:	2400      	movs	r4, #0
   1916c:	e7fa      	b.n	19164 <bt_id_set_private_addr+0x64>
   1916e:	bf00      	nop
   19170:	2000041c 	.word	0x2000041c
   19174:	20000350 	.word	0x20000350
   19178:	200004c0 	.word	0x200004c0

0001917c <le_update_private_addr>:
{
   1917c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1917e:	af00      	add	r7, sp, #0
		le_rpa_invalidate();
   19180:	f7ff ffa8 	bl	190d4 <le_rpa_invalidate>
		adv = bt_le_adv_lookup_legacy();
   19184:	f000 faa4 	bl	196d0 <bt_le_adv_lookup_legacy>
		if (adv &&
   19188:	4604      	mov	r4, r0
   1918a:	b9b0      	cbnz	r0, 191ba <le_update_private_addr+0x3e>
	uint8_t id = BT_ID_DEFAULT;
   1918c:	2600      	movs	r6, #0
	bool adv_enabled = false;
   1918e:	4635      	mov	r5, r6
	err = bt_id_set_private_addr(id);
   19190:	4630      	mov	r0, r6
   19192:	f7ff ffb5 	bl	19100 <bt_id_set_private_addr>
	if (err) {
   19196:	b328      	cbz	r0, 191e4 <le_update_private_addr+0x68>
		BT_WARN("Failed to update RPA address (%d)", err);
   19198:	466c      	mov	r4, sp
   1919a:	b088      	sub	sp, #32
   1919c:	466a      	mov	r2, sp
   1919e:	4b16      	ldr	r3, [pc, #88]	; (191f8 <le_update_private_addr+0x7c>)
   191a0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   191a4:	2303      	movs	r3, #3
   191a6:	f842 3f10 	str.w	r3, [r2, #16]!
   191aa:	4814      	ldr	r0, [pc, #80]	; (191fc <le_update_private_addr+0x80>)
   191ac:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   191b0:	f011 fbff 	bl	2a9b2 <z_log_msg_static_create.constprop.0>
   191b4:	46a5      	mov	sp, r4
}
   191b6:	46bd      	mov	sp, r7
   191b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   191ba:	f100 0210 	add.w	r2, r0, #16
   191be:	2106      	movs	r1, #6
   191c0:	4610      	mov	r0, r2
   191c2:	f011 fbb2 	bl	2a92a <atomic_test_bit>
		if (adv &&
   191c6:	4605      	mov	r5, r0
   191c8:	2800      	cmp	r0, #0
   191ca:	d0df      	beq.n	1918c <le_update_private_addr+0x10>
		    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   191cc:	210c      	movs	r1, #12
   191ce:	4610      	mov	r0, r2
   191d0:	f011 fbab 	bl	2a92a <atomic_test_bit>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   191d4:	4601      	mov	r1, r0
   191d6:	2800      	cmp	r0, #0
   191d8:	d1d8      	bne.n	1918c <le_update_private_addr+0x10>
			bt_le_adv_set_enable_legacy(adv, false);
   191da:	4620      	mov	r0, r4
			id = adv->id;
   191dc:	7826      	ldrb	r6, [r4, #0]
			bt_le_adv_set_enable_legacy(adv, false);
   191de:	f011 fc69 	bl	2aab4 <bt_le_adv_set_enable_legacy>
   191e2:	e7d5      	b.n	19190 <le_update_private_addr+0x14>
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
   191e4:	2c00      	cmp	r4, #0
   191e6:	d0e6      	beq.n	191b6 <le_update_private_addr+0x3a>
	    adv && adv_enabled) {
   191e8:	2d00      	cmp	r5, #0
   191ea:	d0e4      	beq.n	191b6 <le_update_private_addr+0x3a>
		bt_le_adv_set_enable_legacy(adv, true);
   191ec:	2101      	movs	r1, #1
   191ee:	4620      	mov	r0, r4
   191f0:	f011 fc60 	bl	2aab4 <bt_le_adv_set_enable_legacy>
   191f4:	e7df      	b.n	191b6 <le_update_private_addr+0x3a>
   191f6:	bf00      	nop
   191f8:	00030922 	.word	0x00030922
   191fc:	0002e5c4 	.word	0x0002e5c4

00019200 <rpa_timeout>:
{
   19200:	b507      	push	{r0, r1, r2, lr}
	bool adv_enabled = false;
   19202:	2300      	movs	r3, #0
		bt_le_ext_adv_foreach(adv_is_private_enabled, &adv_enabled);
   19204:	4810      	ldr	r0, [pc, #64]	; (19248 <rpa_timeout+0x48>)
	bool adv_enabled = false;
   19206:	f88d 3007 	strb.w	r3, [sp, #7]
		bt_le_ext_adv_foreach(adv_is_private_enabled, &adv_enabled);
   1920a:	f10d 0107 	add.w	r1, sp, #7
   1920e:	f000 fa59 	bl	196c4 <bt_le_ext_adv_foreach>
	if (!(adv_enabled ||
   19212:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19216:	b99b      	cbnz	r3, 19240 <rpa_timeout+0x40>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19218:	480c      	ldr	r0, [pc, #48]	; (1924c <rpa_timeout+0x4c>)
   1921a:	f011 fb80 	bl	2a91e <atomic_get>
   1921e:	04c1      	lsls	r1, r0, #19
   19220:	d40e      	bmi.n	19240 <rpa_timeout+0x40>
   19222:	480a      	ldr	r0, [pc, #40]	; (1924c <rpa_timeout+0x4c>)
   19224:	f011 fb7b 	bl	2a91e <atomic_get>
   19228:	0642      	lsls	r2, r0, #25
   1922a:	d404      	bmi.n	19236 <rpa_timeout+0x36>
		le_rpa_invalidate();
   1922c:	f7ff ff52 	bl	190d4 <le_rpa_invalidate>
}
   19230:	b003      	add	sp, #12
   19232:	f85d fb04 	ldr.w	pc, [sp], #4
   19236:	4805      	ldr	r0, [pc, #20]	; (1924c <rpa_timeout+0x4c>)
   19238:	f011 fb71 	bl	2a91e <atomic_get>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   1923c:	05c3      	lsls	r3, r0, #23
   1923e:	d5f5      	bpl.n	1922c <rpa_timeout+0x2c>
	le_update_private_addr();
   19240:	f7ff ff9c 	bl	1917c <le_update_private_addr>
   19244:	e7f4      	b.n	19230 <rpa_timeout+0x30>
   19246:	bf00      	nop
   19248:	0002a939 	.word	0x0002a939
   1924c:	2000041c 	.word	0x2000041c

00019250 <bt_id_pending_keys_update>:
   19250:	4b0a      	ldr	r3, [pc, #40]	; (1927c <bt_id_pending_keys_update+0x2c>)
   19252:	f3bf 8f5b 	dmb	ish
   19256:	e853 2f00 	ldrex	r2, [r3]
   1925a:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   1925e:	e843 1000 	strex	r0, r1, [r3]
   19262:	2800      	cmp	r0, #0
   19264:	d1f7      	bne.n	19256 <bt_id_pending_keys_update+0x6>
   19266:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   1926a:	0413      	lsls	r3, r2, #16
   1926c:	d504      	bpl.n	19278 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   1926e:	4904      	ldr	r1, [pc, #16]	; (19280 <bt_id_pending_keys_update+0x30>)
   19270:	2200      	movs	r2, #0
   19272:	2002      	movs	r0, #2
   19274:	f005 bed0 	b.w	1f018 <bt_keys_foreach>
}
   19278:	4770      	bx	lr
   1927a:	bf00      	nop
   1927c:	2000041c 	.word	0x2000041c
   19280:	0002aa6b 	.word	0x0002aa6b

00019284 <bt_id_add>:
{
   19284:	b410      	push	{r4}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   19286:	490a      	ldr	r1, [pc, #40]	; (192b0 <bt_id_add+0x2c>)
   19288:	f891 4118 	ldrb.w	r4, [r1, #280]	; 0x118
   1928c:	f891 2119 	ldrb.w	r2, [r1, #281]	; 0x119
{
   19290:	4603      	mov	r3, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   19292:	b10c      	cbz	r4, 19298 <bt_id_add+0x14>
   19294:	4294      	cmp	r4, r2
   19296:	d208      	bcs.n	192aa <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
   19298:	3201      	adds	r2, #1
   1929a:	f881 2119 	strb.w	r2, [r1, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   1929e:	7a1a      	ldrb	r2, [r3, #8]
}
   192a0:	bc10      	pop	{r4}
		keys->state |= BT_KEYS_ID_ADDED;
   192a2:	f042 0204 	orr.w	r2, r2, #4
   192a6:	721a      	strb	r2, [r3, #8]
}
   192a8:	4770      	bx	lr
   192aa:	bc10      	pop	{r4}
   192ac:	f7ff bd3a 	b.w	18d24 <bt_id_add.part.0>
   192b0:	20000350 	.word	0x20000350

000192b4 <bt_id_del>:
{
   192b4:	b410      	push	{r4}
	if (!bt_dev.le.rl_size ||
   192b6:	4c0b      	ldr	r4, [pc, #44]	; (192e4 <bt_id_del+0x30>)
   192b8:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   192bc:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
{
   192c0:	4603      	mov	r3, r0
	if (!bt_dev.le.rl_size ||
   192c2:	b111      	cbz	r1, 192ca <bt_id_del+0x16>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   192c4:	3101      	adds	r1, #1
	if (!bt_dev.le.rl_size ||
   192c6:	428a      	cmp	r2, r1
   192c8:	dd08      	ble.n	192dc <bt_id_del+0x28>
		bt_dev.le.rl_entries--;
   192ca:	3a01      	subs	r2, #1
   192cc:	f884 2119 	strb.w	r2, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   192d0:	7a1a      	ldrb	r2, [r3, #8]
}
   192d2:	bc10      	pop	{r4}
		keys->state &= ~BT_KEYS_ID_ADDED;
   192d4:	f022 0204 	bic.w	r2, r2, #4
   192d8:	721a      	strb	r2, [r3, #8]
}
   192da:	4770      	bx	lr
   192dc:	bc10      	pop	{r4}
   192de:	f7ff bdfd 	b.w	18edc <bt_id_del.part.0>
   192e2:	bf00      	nop
   192e4:	20000350 	.word	0x20000350

000192e8 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   192e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   192ea:	460e      	mov	r6, r1
   192ec:	b089      	sub	sp, #36	; 0x24
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   192ee:	4605      	mov	r5, r0
   192f0:	b930      	cbnz	r0, 19300 <bt_id_create+0x18>

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   192f2:	4f2d      	ldr	r7, [pc, #180]	; (193a8 <bt_id_create+0xc0>)
   192f4:	79fb      	ldrb	r3, [r7, #7]
   192f6:	2b01      	cmp	r3, #1
   192f8:	d12a      	bne.n	19350 <bt_id_create+0x68>
		return -ENOMEM;
   192fa:	f06f 000b 	mvn.w	r0, #11
   192fe:	e025      	b.n	1934c <bt_id_create+0x64>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   19300:	2300      	movs	r3, #0
   19302:	2207      	movs	r2, #7
   19304:	4669      	mov	r1, sp
   19306:	9300      	str	r3, [sp, #0]
   19308:	f8cd 3003 	str.w	r3, [sp, #3]
   1930c:	f014 fd54 	bl	2ddb8 <memcmp>
   19310:	2800      	cmp	r0, #0
   19312:	d0ee      	beq.n	192f2 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   19314:	782b      	ldrb	r3, [r5, #0]
   19316:	2b01      	cmp	r3, #1
   19318:	d104      	bne.n	19324 <bt_id_create+0x3c>
   1931a:	79ab      	ldrb	r3, [r5, #6]
   1931c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19320:	2bc0      	cmp	r3, #192	; 0xc0
   19322:	d00c      	beq.n	1933e <bt_id_create+0x56>
			BT_ERR("Only static random identity address supported");
   19324:	4b21      	ldr	r3, [pc, #132]	; (193ac <bt_id_create+0xc4>)
   19326:	9307      	str	r3, [sp, #28]
   19328:	4821      	ldr	r0, [pc, #132]	; (193b0 <bt_id_create+0xc8>)
   1932a:	2302      	movs	r3, #2
   1932c:	aa06      	add	r2, sp, #24
   1932e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19332:	9306      	str	r3, [sp, #24]
   19334:	f011 fb3d 	bl	2a9b2 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   19338:	f06f 0015 	mvn.w	r0, #21
   1933c:	e006      	b.n	1934c <bt_id_create+0x64>
		if (id_find(addr) >= 0) {
   1933e:	4628      	mov	r0, r5
   19340:	f7ff fc9a 	bl	18c78 <id_find>
   19344:	2800      	cmp	r0, #0
   19346:	dbd4      	blt.n	192f2 <bt_id_create+0xa>
			return -EALREADY;
   19348:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   1934c:	b009      	add	sp, #36	; 0x24
   1934e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19350:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
   19354:	f011 fae3 	bl	2a91e <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   19358:	f010 0001 	ands.w	r0, r0, #1
   1935c:	d118      	bne.n	19390 <bt_id_create+0xa8>
		uint8_t zero_irk[16] = { 0 };
   1935e:	e9cd 0002 	strd	r0, r0, [sp, #8]
   19362:	e9cd 0004 	strd	r0, r0, [sp, #16]
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   19366:	2d00      	cmp	r5, #0
   19368:	d0e6      	beq.n	19338 <bt_id_create+0x50>
   1936a:	9000      	str	r0, [sp, #0]
   1936c:	2207      	movs	r2, #7
   1936e:	f8cd 0003 	str.w	r0, [sp, #3]
   19372:	4669      	mov	r1, sp
   19374:	4628      	mov	r0, r5
   19376:	f014 fd1f 	bl	2ddb8 <memcmp>
   1937a:	2800      	cmp	r0, #0
   1937c:	d0dc      	beq.n	19338 <bt_id_create+0x50>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1937e:	2e00      	cmp	r6, #0
   19380:	d0da      	beq.n	19338 <bt_id_create+0x50>
		    !(irk && memcmp(irk, zero_irk, 16))) {
   19382:	2210      	movs	r2, #16
   19384:	a902      	add	r1, sp, #8
   19386:	4630      	mov	r0, r6
   19388:	f014 fd16 	bl	2ddb8 <memcmp>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1938c:	2800      	cmp	r0, #0
   1938e:	d0d3      	beq.n	19338 <bt_id_create+0x50>
	new_id = bt_dev.id_count++;
   19390:	79fc      	ldrb	r4, [r7, #7]
	err = id_create(new_id, addr, irk);
   19392:	4632      	mov	r2, r6
	new_id = bt_dev.id_count++;
   19394:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   19396:	4629      	mov	r1, r5
   19398:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   1939a:	71fb      	strb	r3, [r7, #7]
	err = id_create(new_id, addr, irk);
   1939c:	f7ff fe30 	bl	19000 <id_create>
	new_id = bt_dev.id_count++;
   193a0:	2800      	cmp	r0, #0
   193a2:	bf08      	it	eq
   193a4:	4620      	moveq	r0, r4
   193a6:	e7d1      	b.n	1934c <bt_id_create+0x64>
   193a8:	20000350 	.word	0x20000350
   193ac:	00030944 	.word	0x00030944
   193b0:	0002e5c4 	.word	0x0002e5c4

000193b4 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   193b4:	b570      	push	{r4, r5, r6, lr}
   193b6:	b08a      	sub	sp, #40	; 0x28
   193b8:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   193ba:	aa01      	add	r2, sp, #4
   193bc:	2100      	movs	r1, #0
   193be:	f241 0009 	movw	r0, #4105	; 0x1009
   193c2:	f7fe fe2b 	bl	1801c <bt_hci_cmd_send_sync>
	if (err) {
   193c6:	4604      	mov	r4, r0
   193c8:	b160      	cbz	r0, 193e4 <bt_id_read_public_addr+0x30>
		BT_WARN("Failed to read public address");
   193ca:	4b1d      	ldr	r3, [pc, #116]	; (19440 <bt_id_read_public_addr+0x8c>)
   193cc:	9309      	str	r3, [sp, #36]	; 0x24
   193ce:	481d      	ldr	r0, [pc, #116]	; (19444 <bt_id_read_public_addr+0x90>)
   193d0:	2302      	movs	r3, #2
   193d2:	aa08      	add	r2, sp, #32
   193d4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   193d8:	9308      	str	r3, [sp, #32]
   193da:	f011 faea 	bl	2a9b2 <z_log_msg_static_create.constprop.0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   193de:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   193e0:	b00a      	add	sp, #40	; 0x28
   193e2:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   193e4:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   193e6:	9002      	str	r0, [sp, #8]
   193e8:	689d      	ldr	r5, [r3, #8]
   193ea:	f8ad 000c 	strh.w	r0, [sp, #12]
   193ee:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   193f0:	2206      	movs	r2, #6
   193f2:	a902      	add	r1, sp, #8
   193f4:	4628      	mov	r0, r5
   193f6:	f014 fcdf 	bl	2ddb8 <memcmp>
   193fa:	b918      	cbnz	r0, 19404 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   193fc:	9801      	ldr	r0, [sp, #4]
   193fe:	f006 f8b9 	bl	1f574 <net_buf_unref>
   19402:	e7ec      	b.n	193de <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   19404:	23ff      	movs	r3, #255	; 0xff
   19406:	2206      	movs	r2, #6
   19408:	a904      	add	r1, sp, #16
   1940a:	4628      	mov	r0, r5
   1940c:	f88d 3010 	strb.w	r3, [sp, #16]
   19410:	f88d 3011 	strb.w	r3, [sp, #17]
   19414:	f88d 3012 	strb.w	r3, [sp, #18]
   19418:	f88d 3013 	strb.w	r3, [sp, #19]
   1941c:	f88d 3014 	strb.w	r3, [sp, #20]
   19420:	f88d 3015 	strb.w	r3, [sp, #21]
   19424:	f014 fcc8 	bl	2ddb8 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   19428:	2800      	cmp	r0, #0
   1942a:	d0e7      	beq.n	193fc <bt_id_read_public_addr+0x48>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   1942c:	4629      	mov	r1, r5
   1942e:	1c70      	adds	r0, r6, #1
   19430:	f011 faa8 	bl	2a984 <bt_addr_copy>
	net_buf_unref(rsp);
   19434:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   19436:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   19438:	f006 f89c 	bl	1f574 <net_buf_unref>
	return 1U;
   1943c:	2001      	movs	r0, #1
   1943e:	e7cf      	b.n	193e0 <bt_id_read_public_addr+0x2c>
   19440:	00030972 	.word	0x00030972
   19444:	0002e5c4 	.word	0x0002e5c4

00019448 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   19448:	b570      	push	{r4, r5, r6, lr}
   1944a:	b08e      	sub	sp, #56	; 0x38
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1944c:	a802      	add	r0, sp, #8
   1944e:	f7ff ffb1 	bl	193b4 <bt_id_read_public_addr>
   19452:	4c21      	ldr	r4, [pc, #132]	; (194d8 <bt_setup_public_id_addr+0x90>)
   19454:	71e0      	strb	r0, [r4, #7]

	if (!bt_dev.id_count) {
   19456:	b348      	cbz	r0, 194ac <bt_setup_public_id_addr+0x64>
	memset(ir, 0, 16);
   19458:	2210      	movs	r2, #16
   1945a:	2100      	movs	r1, #0
   1945c:	eb0d 0002 	add.w	r0, sp, r2
   19460:	f014 fcdb 	bl	2de1a <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
   19464:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   19468:	079b      	lsls	r3, r3, #30
   1946a:	d510      	bpl.n	1948e <bt_setup_public_id_addr+0x46>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
   1946c:	aa01      	add	r2, sp, #4
   1946e:	2100      	movs	r1, #0
   19470:	f64f 400a 	movw	r0, #64522	; 0xfc0a
   19474:	f7fe fdd2 	bl	1801c <bt_hci_cmd_send_sync>
	if (err) {
   19478:	b1d0      	cbz	r0, 194b0 <bt_setup_public_id_addr+0x68>
		BT_WARN("Failed to read identity root");
   1947a:	4b18      	ldr	r3, [pc, #96]	; (194dc <bt_setup_public_id_addr+0x94>)
   1947c:	930d      	str	r3, [sp, #52]	; 0x34
   1947e:	4818      	ldr	r0, [pc, #96]	; (194e0 <bt_setup_public_id_addr+0x98>)
   19480:	2302      	movs	r3, #2
   19482:	aa0c      	add	r2, sp, #48	; 0x30
   19484:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19488:	930c      	str	r3, [sp, #48]	; 0x30
   1948a:	f011 fa92 	bl	2a9b2 <z_log_msg_static_create.constprop.0>
	uint8_t ir_irk[16];
	uint8_t ir[16];

	bt_read_identity_root(ir);

	if (!bt_smp_irk_get(ir, ir_irk)) {
   1948e:	a908      	add	r1, sp, #32
   19490:	a804      	add	r0, sp, #16
   19492:	f013 f86d 	bl	2c570 <bt_smp_irk_get>
   19496:	b1e0      	cbz	r0, 194d2 <bt_setup_public_id_addr+0x8a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19498:	4812      	ldr	r0, [pc, #72]	; (194e4 <bt_setup_public_id_addr+0x9c>)
   1949a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1949e:	f011 faa3 	bl	2a9e8 <atomic_or.isra.0>
	uint8_t *irk = NULL;
   194a2:	2200      	movs	r2, #0
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   194a4:	a902      	add	r1, sp, #8
   194a6:	2000      	movs	r0, #0
   194a8:	f7ff fdaa 	bl	19000 <id_create>
}
   194ac:	b00e      	add	sp, #56	; 0x38
   194ae:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   194b0:	9e01      	ldr	r6, [sp, #4]
   194b2:	68b2      	ldr	r2, [r6, #8]
	memcpy(ir, rp->ir, 16);
   194b4:	ad04      	add	r5, sp, #16
   194b6:	1c53      	adds	r3, r2, #1
   194b8:	3211      	adds	r2, #17
   194ba:	6818      	ldr	r0, [r3, #0]
   194bc:	6859      	ldr	r1, [r3, #4]
   194be:	462c      	mov	r4, r5
   194c0:	c403      	stmia	r4!, {r0, r1}
   194c2:	3308      	adds	r3, #8
   194c4:	4293      	cmp	r3, r2
   194c6:	4625      	mov	r5, r4
   194c8:	d1f7      	bne.n	194ba <bt_setup_public_id_addr+0x72>
	net_buf_unref(rsp);
   194ca:	4630      	mov	r0, r6
   194cc:	f006 f852 	bl	1f574 <net_buf_unref>
   194d0:	e7dd      	b.n	1948e <bt_setup_public_id_addr+0x46>
		irk = ir_irk;
   194d2:	aa08      	add	r2, sp, #32
   194d4:	e7e6      	b.n	194a4 <bt_setup_public_id_addr+0x5c>
   194d6:	bf00      	nop
   194d8:	20000350 	.word	0x20000350
   194dc:	00030990 	.word	0x00030990
   194e0:	0002e5c4 	.word	0x0002e5c4
   194e4:	2000041c 	.word	0x2000041c

000194e8 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   194e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   194ea:	4b24      	ldr	r3, [pc, #144]	; (1957c <bt_read_static_addr+0x94>)
   194ec:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   194f0:	f014 0401 	ands.w	r4, r4, #1
{
   194f4:	b089      	sub	sp, #36	; 0x24
   194f6:	4605      	mov	r5, r0
   194f8:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   194fa:	d10a      	bne.n	19512 <bt_read_static_addr+0x2a>
		BT_WARN("Read Static Addresses command not available");
   194fc:	4b20      	ldr	r3, [pc, #128]	; (19580 <bt_read_static_addr+0x98>)
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   194fe:	9307      	str	r3, [sp, #28]
   19500:	4820      	ldr	r0, [pc, #128]	; (19584 <bt_read_static_addr+0x9c>)
   19502:	2302      	movs	r3, #2
   19504:	aa06      	add	r2, sp, #24
   19506:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1950a:	9306      	str	r3, [sp, #24]
   1950c:	f011 fa51 	bl	2a9b2 <z_log_msg_static_create.constprop.0>
   19510:	e012      	b.n	19538 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   19512:	aa01      	add	r2, sp, #4
   19514:	2100      	movs	r1, #0
   19516:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1951a:	f7fe fd7f 	bl	1801c <bt_hci_cmd_send_sync>
	if (err) {
   1951e:	4603      	mov	r3, r0
   19520:	b168      	cbz	r0, 1953e <bt_read_static_addr+0x56>
		BT_WARN("Failed to read static addresses");
   19522:	4b19      	ldr	r3, [pc, #100]	; (19588 <bt_read_static_addr+0xa0>)
   19524:	9307      	str	r3, [sp, #28]
   19526:	4817      	ldr	r0, [pc, #92]	; (19584 <bt_read_static_addr+0x9c>)
   19528:	2302      	movs	r3, #2
   1952a:	aa06      	add	r2, sp, #24
   1952c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return 0;
   19530:	2400      	movs	r4, #0
		BT_WARN("Failed to read static addresses");
   19532:	9306      	str	r3, [sp, #24]
   19534:	f011 fa3d 	bl	2a9b2 <z_log_msg_static_create.constprop.0>
	}

	return cnt;
}
   19538:	4620      	mov	r0, r4
   1953a:	b009      	add	sp, #36	; 0x24
   1953c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
   1953e:	9801      	ldr	r0, [sp, #4]
   19540:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
   19542:	7854      	ldrb	r4, [r2, #1]
   19544:	f04f 0c16 	mov.w	ip, #22
   19548:	42b4      	cmp	r4, r6
   1954a:	bf28      	it	cs
   1954c:	4634      	movcs	r4, r6
   1954e:	eb02 070c 	add.w	r7, r2, ip
	for (i = 0; i < cnt; i++) {
   19552:	429c      	cmp	r4, r3
   19554:	dc05      	bgt.n	19562 <bt_read_static_addr+0x7a>
	net_buf_unref(rsp);
   19556:	f006 f80d 	bl	1f574 <net_buf_unref>
	if (!cnt) {
   1955a:	2c00      	cmp	r4, #0
   1955c:	d1ec      	bne.n	19538 <bt_read_static_addr+0x50>
		BT_WARN("No static addresses stored in controller");
   1955e:	4b0b      	ldr	r3, [pc, #44]	; (1958c <bt_read_static_addr+0xa4>)
   19560:	e7cd      	b.n	194fe <bt_read_static_addr+0x16>
   19562:	1c96      	adds	r6, r2, #2
   19564:	fb0c 5103 	mla	r1, ip, r3, r5
   19568:	f856 eb04 	ldr.w	lr, [r6], #4
   1956c:	f841 eb04 	str.w	lr, [r1], #4
   19570:	42be      	cmp	r6, r7
   19572:	d1f9      	bne.n	19568 <bt_read_static_addr+0x80>
   19574:	883e      	ldrh	r6, [r7, #0]
   19576:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
   19578:	3301      	adds	r3, #1
   1957a:	e7ea      	b.n	19552 <bt_read_static_addr+0x6a>
   1957c:	20000350 	.word	0x20000350
   19580:	000309ad 	.word	0x000309ad
   19584:	0002e5c4 	.word	0x0002e5c4
   19588:	000309d9 	.word	0x000309d9
   1958c:	000309f9 	.word	0x000309f9

00019590 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   19590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   19594:	4d21      	ldr	r5, [pc, #132]	; (1961c <bt_setup_random_id_addr+0x8c>)
   19596:	79ec      	ldrb	r4, [r5, #7]
{
   19598:	b08d      	sub	sp, #52	; 0x34
	if (!bt_dev.id_count) {
   1959a:	bb94      	cbnz	r4, 19602 <bt_setup_random_id_addr+0x72>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1959c:	2101      	movs	r1, #1
   1959e:	a806      	add	r0, sp, #24
   195a0:	f7ff ffa2 	bl	194e8 <bt_read_static_addr>
   195a4:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   195a6:	b360      	cbz	r0, 19602 <bt_setup_random_id_addr+0x72>
   195a8:	2716      	movs	r7, #22
   195aa:	f105 08cc 	add.w	r8, r5, #204	; 0xcc
   195ae:	b2e6      	uxtb	r6, r4
				bt_addr_le_t addr;
				uint8_t *irk = NULL;
#if defined(CONFIG_BT_PRIVACY)
				uint8_t ir_irk[16];

				if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
   195b0:	fb07 f906 	mul.w	r9, r7, r6
   195b4:	f109 0006 	add.w	r0, r9, #6
   195b8:	ab06      	add	r3, sp, #24
   195ba:	a902      	add	r1, sp, #8
   195bc:	4418      	add	r0, r3
   195be:	f012 ffd7 	bl	2c570 <bt_smp_irk_get>
   195c2:	b1e0      	cbz	r0, 195fe <bt_setup_random_id_addr+0x6e>
   195c4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   195c8:	4640      	mov	r0, r8
   195ca:	f011 fa0d 	bl	2a9e8 <atomic_or.isra.0>
				uint8_t *irk = NULL;
   195ce:	2200      	movs	r2, #0
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   195d0:	ab06      	add	r3, sp, #24
   195d2:	eb03 0109 	add.w	r1, r3, r9
   195d6:	f10d 0001 	add.w	r0, sp, #1
   195da:	f011 f9d3 	bl	2a984 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   195de:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
   195e0:	4669      	mov	r1, sp
   195e2:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   195e4:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   195e8:	f7ff fd0a 	bl	19000 <id_create>
				if (err) {
   195ec:	b920      	cbnz	r0, 195f8 <bt_setup_random_id_addr+0x68>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   195ee:	79ea      	ldrb	r2, [r5, #7]
   195f0:	3401      	adds	r4, #1
   195f2:	b2e3      	uxtb	r3, r4
   195f4:	429a      	cmp	r2, r3
   195f6:	d8da      	bhi.n	195ae <bt_setup_random_id_addr+0x1e>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   195f8:	b00d      	add	sp, #52	; 0x34
   195fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					irk = ir_irk;
   195fe:	aa02      	add	r2, sp, #8
   19600:	e7e6      	b.n	195d0 <bt_setup_random_id_addr+0x40>
   19602:	4807      	ldr	r0, [pc, #28]	; (19620 <bt_setup_random_id_addr+0x90>)
   19604:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   19608:	f011 f9ee 	bl	2a9e8 <atomic_or.isra.0>
	return bt_id_create(NULL, NULL);
   1960c:	2100      	movs	r1, #0
   1960e:	4608      	mov	r0, r1
}
   19610:	b00d      	add	sp, #52	; 0x34
   19612:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_id_create(NULL, NULL);
   19616:	f7ff be67 	b.w	192e8 <bt_id_create>
   1961a:	bf00      	nop
   1961c:	20000350 	.word	0x20000350
   19620:	2000041c 	.word	0x2000041c

00019624 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   19624:	b508      	push	{r3, lr}
			return err;
		}
	}

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
   19626:	4903      	ldr	r1, [pc, #12]	; (19634 <bt_id_init+0x10>)
   19628:	4803      	ldr	r0, [pc, #12]	; (19638 <bt_id_init+0x14>)
   1962a:	f014 f876 	bl	2d71a <k_work_init_delayable>
#endif

	return 0;
}
   1962e:	2000      	movs	r0, #0
   19630:	bd08      	pop	{r3, pc}
   19632:	bf00      	nop
   19634:	00019201 	.word	0x00019201
   19638:	200004c0 	.word	0x200004c0

0001963c <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   1963c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1963e:	4606      	mov	r6, r0
   19640:	4b1e      	ldr	r3, [pc, #120]	; (196bc <le_adv_start_add_conn+0x80>)
   19642:	f816 2b09 	ldrb.w	r2, [r6], #9
   19646:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   1964a:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1964c:	2300      	movs	r3, #0
{
   1964e:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
   19650:	2207      	movs	r2, #7
   19652:	460f      	mov	r7, r1
   19654:	4630      	mov	r0, r6
   19656:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   19658:	9300      	str	r3, [sp, #0]
   1965a:	f8cd 3003 	str.w	r3, [sp, #3]
   1965e:	f014 fbab 	bl	2ddb8 <memcmp>
   19662:	782a      	ldrb	r2, [r5, #0]
   19664:	4604      	mov	r4, r0
   19666:	b9a8      	cbnz	r0, 19694 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   19668:	4b15      	ldr	r3, [pc, #84]	; (196c0 <le_adv_start_add_conn+0x84>)
   1966a:	6818      	ldr	r0, [r3, #0]
   1966c:	8899      	ldrh	r1, [r3, #4]
   1966e:	9002      	str	r0, [sp, #8]
   19670:	799b      	ldrb	r3, [r3, #6]
   19672:	f8ad 100c 	strh.w	r1, [sp, #12]
   19676:	4610      	mov	r0, r2
   19678:	a902      	add	r1, sp, #8
   1967a:	f88d 300e 	strb.w	r3, [sp, #14]
   1967e:	f000 fd7d 	bl	1a17c <bt_conn_add_le>
		if (!conn) {
   19682:	4605      	mov	r5, r0
   19684:	b1b8      	cbz	r0, 196b6 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   19686:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   19688:	f000 fb88 	bl	19d9c <bt_conn_set_state>
	*out_conn = conn;
   1968c:	603d      	str	r5, [r7, #0]
	return 0;
}
   1968e:	4620      	mov	r0, r4
   19690:	b005      	add	sp, #20
   19692:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   19694:	4631      	mov	r1, r6
   19696:	4610      	mov	r0, r2
   19698:	f000 fdac 	bl	1a1f4 <bt_conn_exists_le>
   1969c:	4604      	mov	r4, r0
   1969e:	b938      	cbnz	r0, 196b0 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   196a0:	7828      	ldrb	r0, [r5, #0]
   196a2:	4631      	mov	r1, r6
   196a4:	f000 fd6a 	bl	1a17c <bt_conn_add_le>
	if (!conn) {
   196a8:	4605      	mov	r5, r0
   196aa:	b120      	cbz	r0, 196b6 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   196ac:	2105      	movs	r1, #5
   196ae:	e7eb      	b.n	19688 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   196b0:	f06f 0415 	mvn.w	r4, #21
   196b4:	e7eb      	b.n	1968e <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   196b6:	f06f 040b 	mvn.w	r4, #11
   196ba:	e7e8      	b.n	1968e <le_adv_start_add_conn+0x52>
   196bc:	20000350 	.word	0x20000350
   196c0:	0002e9d0 	.word	0x0002e9d0

000196c4 <bt_le_ext_adv_foreach>:
{
   196c4:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   196c6:	4801      	ldr	r0, [pc, #4]	; (196cc <bt_le_ext_adv_foreach+0x8>)
   196c8:	4718      	bx	r3
   196ca:	bf00      	nop
   196cc:	20000368 	.word	0x20000368

000196d0 <bt_le_adv_lookup_legacy>:
}
   196d0:	4800      	ldr	r0, [pc, #0]	; (196d4 <bt_le_adv_lookup_legacy+0x4>)
   196d2:	4770      	bx	lr
   196d4:	20000368 	.word	0x20000368

000196d8 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   196d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   196da:	4822      	ldr	r0, [pc, #136]	; (19764 <bt_le_adv_resume+0x8c>)
   196dc:	4c21      	ldr	r4, [pc, #132]	; (19764 <bt_le_adv_resume+0x8c>)
   196de:	f011 f9d4 	bl	2aa8a <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   196e2:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   196e6:	d03a      	beq.n	1975e <bt_le_adv_resume+0x86>
   196e8:	4620      	mov	r0, r4
   196ea:	f011 f9ce 	bl	2aa8a <atomic_get>
   196ee:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   196f0:	f3c0 1580 	ubfx	r5, r0, #6, #1
   196f4:	d433      	bmi.n	1975e <bt_le_adv_resume+0x86>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   196f6:	4620      	mov	r0, r4
   196f8:	f011 f9c7 	bl	2aa8a <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   196fc:	0582      	lsls	r2, r0, #22
   196fe:	d52e      	bpl.n	1975e <bt_le_adv_resume+0x86>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   19700:	a901      	add	r1, sp, #4
   19702:	f1a4 0010 	sub.w	r0, r4, #16
   19706:	f7ff ff99 	bl	1963c <le_adv_start_add_conn>
	if (err) {
   1970a:	bb40      	cbnz	r0, 1975e <bt_le_adv_resume+0x86>
   1970c:	4620      	mov	r0, r4
   1970e:	f011 f9bc 	bl	2aa8a <atomic_get>
		return;
	}

	BT_DBG("Resuming connectable advertising");

	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   19712:	04c3      	lsls	r3, r0, #19
   19714:	d403      	bmi.n	1971e <bt_le_adv_resume+0x46>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
   19716:	f1a4 0010 	sub.w	r0, r4, #16
   1971a:	f011 f9a3 	bl	2aa64 <bt_id_set_adv_private_addr>
	return bt_le_adv_set_enable_legacy(adv, enable);
   1971e:	4812      	ldr	r0, [pc, #72]	; (19768 <bt_le_adv_resume+0x90>)
   19720:	2101      	movs	r1, #1
   19722:	f011 f9c7 	bl	2aab4 <bt_le_adv_set_enable_legacy>
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
   19726:	b150      	cbz	r0, 1973e <bt_le_adv_resume+0x66>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19728:	9801      	ldr	r0, [sp, #4]
   1972a:	2100      	movs	r1, #0
   1972c:	f000 fb36 	bl	19d9c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19730:	480c      	ldr	r0, [pc, #48]	; (19764 <bt_le_adv_resume+0x8c>)
   19732:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   19736:	f011 f9ae 	bl	2aa96 <atomic_and>
	return (old & mask) != 0;
   1973a:	f3c0 3540 	ubfx	r5, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   1973e:	9801      	ldr	r0, [sp, #4]
   19740:	f011 fa1b 	bl	2ab7a <bt_conn_unref>
	if (persist_paused) {
   19744:	b15d      	cbz	r5, 1975e <bt_le_adv_resume+0x86>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19746:	f3bf 8f5b 	dmb	ish
   1974a:	e854 3f00 	ldrex	r3, [r4]
   1974e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   19752:	e844 3200 	strex	r2, r3, [r4]
   19756:	2a00      	cmp	r2, #0
   19758:	d1f7      	bne.n	1974a <bt_le_adv_resume+0x72>
   1975a:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   1975e:	b003      	add	sp, #12
   19760:	bd30      	pop	{r4, r5, pc}
   19762:	bf00      	nop
   19764:	20000378 	.word	0x20000378
   19768:	20000368 	.word	0x20000368

0001976c <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   1976c:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   1976e:	4904      	ldr	r1, [pc, #16]	; (19780 <bt_pub_key_is_debug+0x14>)
   19770:	2240      	movs	r2, #64	; 0x40
   19772:	f014 fb21 	bl	2ddb8 <memcmp>
}
   19776:	fab0 f080 	clz	r0, r0
   1977a:	0940      	lsrs	r0, r0, #5
   1977c:	bd08      	pop	{r3, pc}
   1977e:	bf00      	nop
   19780:	00030abd 	.word	0x00030abd

00019784 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   19784:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   19786:	4b43      	ldr	r3, [pc, #268]	; (19894 <bt_pub_key_gen+0x110>)
   19788:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1978c:	f003 0306 	and.w	r3, r3, #6
   19790:	2b06      	cmp	r3, #6
{
   19792:	b087      	sub	sp, #28
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   19794:	d00f      	beq.n	197b6 <bt_pub_key_gen+0x32>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   19796:	4b40      	ldr	r3, [pc, #256]	; (19898 <bt_pub_key_gen+0x114>)
   19798:	9305      	str	r3, [sp, #20]
   1979a:	2302      	movs	r3, #2
   1979c:	9304      	str	r3, [sp, #16]
   1979e:	483f      	ldr	r0, [pc, #252]	; (1989c <bt_pub_key_gen+0x118>)
   197a0:	2300      	movs	r3, #0
   197a2:	aa04      	add	r2, sp, #16
   197a4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -ENOTSUP;
   197a8:	f06f 0585 	mvn.w	r5, #133	; 0x85
   197ac:	f7fb ff6e 	bl	1568c <z_impl_z_log_msg_static_create>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   197b0:	4628      	mov	r0, r5
   197b2:	b007      	add	sp, #28
   197b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   197b6:	2800      	cmp	r0, #0
   197b8:	d069      	beq.n	1988e <bt_pub_key_gen+0x10a>
	return list->head;
   197ba:	4e39      	ldr	r6, [pc, #228]	; (198a0 <bt_pub_key_gen+0x11c>)
   197bc:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   197be:	b1a2      	cbz	r2, 197ea <bt_pub_key_gen+0x66>
   197c0:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   197c2:	4298      	cmp	r0, r3
   197c4:	d10d      	bne.n	197e2 <bt_pub_key_gen+0x5e>
			BT_WARN("Callback already registered");
   197c6:	4b37      	ldr	r3, [pc, #220]	; (198a4 <bt_pub_key_gen+0x120>)
   197c8:	9305      	str	r3, [sp, #20]
   197ca:	2302      	movs	r3, #2
   197cc:	9304      	str	r3, [sp, #16]
   197ce:	4833      	ldr	r0, [pc, #204]	; (1989c <bt_pub_key_gen+0x118>)
   197d0:	2300      	movs	r3, #0
   197d2:	aa04      	add	r2, sp, #16
   197d4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   197d8:	f7fb ff58 	bl	1568c <z_impl_z_log_msg_static_create>
			return -EALREADY;
   197dc:	f06f 0577 	mvn.w	r5, #119	; 0x77
   197e0:	e7e6      	b.n	197b0 <bt_pub_key_gen+0x2c>
	return node->next;
   197e2:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   197e4:	b10b      	cbz	r3, 197ea <bt_pub_key_gen+0x66>
   197e6:	3b04      	subs	r3, #4
   197e8:	e7eb      	b.n	197c2 <bt_pub_key_gen+0x3e>
	parent->next = child;
   197ea:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   197ec:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   197ee:	1d03      	adds	r3, r0, #4
	list->head = node;
   197f0:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   197f2:	b902      	cbnz	r2, 197f6 <bt_pub_key_gen+0x72>
	list->tail = node;
   197f4:	6073      	str	r3, [r6, #4]
   197f6:	4c2c      	ldr	r4, [pc, #176]	; (198a8 <bt_pub_key_gen+0x124>)
   197f8:	f3bf 8f5b 	dmb	ish
   197fc:	e854 7f00 	ldrex	r7, [r4]
   19800:	f047 0320 	orr.w	r3, r7, #32
   19804:	e844 3200 	strex	r2, r3, [r4]
   19808:	2a00      	cmp	r2, #0
   1980a:	d1f7      	bne.n	197fc <bt_pub_key_gen+0x78>
   1980c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   19810:	f017 0720 	ands.w	r7, r7, #32
   19814:	d001      	beq.n	1981a <bt_pub_key_gen+0x96>
		return 0;
   19816:	2500      	movs	r5, #0
   19818:	e7ca      	b.n	197b0 <bt_pub_key_gen+0x2c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1981a:	f3bf 8f5b 	dmb	ish
   1981e:	e854 3f00 	ldrex	r3, [r4]
   19822:	f023 0310 	bic.w	r3, r3, #16
   19826:	e844 3200 	strex	r2, r3, [r4]
   1982a:	2a00      	cmp	r2, #0
   1982c:	d1f7      	bne.n	1981e <bt_pub_key_gen+0x9a>
   1982e:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   19832:	463a      	mov	r2, r7
   19834:	4639      	mov	r1, r7
   19836:	f242 0025 	movw	r0, #8229	; 0x2025
   1983a:	f7fe fbef 	bl	1801c <bt_hci_cmd_send_sync>
	if (err) {
   1983e:	4605      	mov	r5, r0
   19840:	2800      	cmp	r0, #0
   19842:	d0e8      	beq.n	19816 <bt_pub_key_gen+0x92>
		BT_ERR("Sending LE P256 Public Key command failed");
   19844:	4b19      	ldr	r3, [pc, #100]	; (198ac <bt_pub_key_gen+0x128>)
   19846:	9305      	str	r3, [sp, #20]
   19848:	2302      	movs	r3, #2
   1984a:	9304      	str	r3, [sp, #16]
   1984c:	4813      	ldr	r0, [pc, #76]	; (1989c <bt_pub_key_gen+0x118>)
   1984e:	463b      	mov	r3, r7
   19850:	aa04      	add	r2, sp, #16
   19852:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19856:	f7fb ff19 	bl	1568c <z_impl_z_log_msg_static_create>
   1985a:	f3bf 8f5b 	dmb	ish
   1985e:	e854 3f00 	ldrex	r3, [r4]
   19862:	f023 0320 	bic.w	r3, r3, #32
   19866:	e844 3200 	strex	r2, r3, [r4]
   1986a:	2a00      	cmp	r2, #0
   1986c:	d1f7      	bne.n	1985e <bt_pub_key_gen+0xda>
   1986e:	f3bf 8f5b 	dmb	ish
	return list->head;
   19872:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   19874:	b13c      	cbz	r4, 19886 <bt_pub_key_gen+0x102>
			if (cb->func) {
   19876:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1987a:	3c04      	subs	r4, #4
			if (cb->func) {
   1987c:	b10b      	cbz	r3, 19882 <bt_pub_key_gen+0xfe>
				cb->func(NULL);
   1987e:	2000      	movs	r0, #0
   19880:	4798      	blx	r3
	return node->next;
   19882:	6864      	ldr	r4, [r4, #4]
   19884:	e7f6      	b.n	19874 <bt_pub_key_gen+0xf0>
	list->head = NULL;
   19886:	2300      	movs	r3, #0
	list->tail = NULL;
   19888:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   1988c:	e790      	b.n	197b0 <bt_pub_key_gen+0x2c>
		return -EINVAL;
   1988e:	f06f 0515 	mvn.w	r5, #21
   19892:	e78d      	b.n	197b0 <bt_pub_key_gen+0x2c>
   19894:	20000350 	.word	0x20000350
   19898:	00030a2f 	.word	0x00030a2f
   1989c:	0002e5a4 	.word	0x0002e5a4
   198a0:	20005b60 	.word	0x20005b60
   198a4:	00030a4e 	.word	0x00030a4e
   198a8:	2000041c 	.word	0x2000041c
   198ac:	00030a6a 	.word	0x00030a6a

000198b0 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   198b0:	4b05      	ldr	r3, [pc, #20]	; (198c8 <bt_pub_key_get+0x18>)
   198b2:	f3bf 8f5b 	dmb	ish
   198b6:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   198b8:	4804      	ldr	r0, [pc, #16]	; (198cc <bt_pub_key_get+0x1c>)
   198ba:	f3bf 8f5b 	dmb	ish
		return pub_key;
   198be:	f013 0f10 	tst.w	r3, #16
}
   198c2:	bf08      	it	eq
   198c4:	2000      	moveq	r0, #0
   198c6:	4770      	bx	lr
   198c8:	2000041c 	.word	0x2000041c
   198cc:	20006bee 	.word	0x20006bee

000198d0 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   198d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   198d2:	4e2a      	ldr	r6, [pc, #168]	; (1997c <bt_dh_key_gen+0xac>)
   198d4:	6833      	ldr	r3, [r6, #0]
   198d6:	428b      	cmp	r3, r1
{
   198d8:	af00      	add	r7, sp, #0
   198da:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
   198dc:	d047      	beq.n	1996e <bt_dh_key_gen+0x9e>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   198de:	b123      	cbz	r3, 198ea <bt_dh_key_gen+0x1a>
		return -EBUSY;
   198e0:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   198e4:	4620      	mov	r0, r4
   198e6:	46bd      	mov	sp, r7
   198e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   198ea:	4b25      	ldr	r3, [pc, #148]	; (19980 <bt_dh_key_gen+0xb0>)
   198ec:	f3bf 8f5b 	dmb	ish
   198f0:	681a      	ldr	r2, [r3, #0]
   198f2:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   198f6:	0692      	lsls	r2, r2, #26
   198f8:	d4f2      	bmi.n	198e0 <bt_dh_key_gen+0x10>
   198fa:	f3bf 8f5b 	dmb	ish
   198fe:	681b      	ldr	r3, [r3, #0]
   19900:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   19904:	06db      	lsls	r3, r3, #27
   19906:	d535      	bpl.n	19974 <bt_dh_key_gen+0xa4>
	dh_key_cb = cb;
   19908:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   1990a:	f242 0026 	movw	r0, #8230	; 0x2026
   1990e:	2140      	movs	r1, #64	; 0x40
   19910:	f7fe fb4a 	bl	17fa8 <bt_hci_cmd_create>
	if (!buf) {
   19914:	4605      	mov	r5, r0
   19916:	b338      	cbz	r0, 19968 <bt_dh_key_gen+0x98>
   19918:	2140      	movs	r1, #64	; 0x40
   1991a:	3008      	adds	r0, #8
   1991c:	f012 ffe2 	bl	2c8e4 <net_buf_simple_add>
   19920:	4623      	mov	r3, r4
   19922:	f104 0240 	add.w	r2, r4, #64	; 0x40
   19926:	f853 1b04 	ldr.w	r1, [r3], #4
   1992a:	f840 1b04 	str.w	r1, [r0], #4
   1992e:	4293      	cmp	r3, r2
   19930:	d1f9      	bne.n	19926 <bt_dh_key_gen+0x56>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   19932:	2200      	movs	r2, #0
   19934:	4629      	mov	r1, r5
   19936:	f242 0026 	movw	r0, #8230	; 0x2026
   1993a:	f7fe fb6f 	bl	1801c <bt_hci_cmd_send_sync>
	if (err) {
   1993e:	4604      	mov	r4, r0
   19940:	2800      	cmp	r0, #0
   19942:	d0cf      	beq.n	198e4 <bt_dh_key_gen+0x14>
		dh_key_cb = NULL;
   19944:	2300      	movs	r3, #0
		BT_WARN("Failed to generate DHKey (err %d)", err);
   19946:	466d      	mov	r5, sp
   19948:	b088      	sub	sp, #32
		dh_key_cb = NULL;
   1994a:	6033      	str	r3, [r6, #0]
		BT_WARN("Failed to generate DHKey (err %d)", err);
   1994c:	466a      	mov	r2, sp
   1994e:	490d      	ldr	r1, [pc, #52]	; (19984 <bt_dh_key_gen+0xb4>)
   19950:	e9c2 1405 	strd	r1, r4, [r2, #20]
   19954:	2103      	movs	r1, #3
   19956:	f842 1f10 	str.w	r1, [r2, #16]!
   1995a:	480b      	ldr	r0, [pc, #44]	; (19988 <bt_dh_key_gen+0xb8>)
   1995c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19960:	f7fb fe94 	bl	1568c <z_impl_z_log_msg_static_create>
   19964:	46ad      	mov	sp, r5
		return err;
   19966:	e7bd      	b.n	198e4 <bt_dh_key_gen+0x14>
		return -ENOBUFS;
   19968:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1996c:	e7ea      	b.n	19944 <bt_dh_key_gen+0x74>
		return -EALREADY;
   1996e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   19972:	e7b7      	b.n	198e4 <bt_dh_key_gen+0x14>
		return -EADDRNOTAVAIL;
   19974:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   19978:	e7b4      	b.n	198e4 <bt_dh_key_gen+0x14>
   1997a:	bf00      	nop
   1997c:	20005b5c 	.word	0x20005b5c
   19980:	2000041c 	.word	0x2000041c
   19984:	00030a94 	.word	0x00030a94
   19988:	0002e5a4 	.word	0x0002e5a4

0001998c <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   1998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1998e:	4b1d      	ldr	r3, [pc, #116]	; (19a04 <bt_hci_evt_le_pkey_complete+0x78>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   19990:	6885      	ldr	r5, [r0, #8]
   19992:	f3bf 8f5b 	dmb	ish
   19996:	e853 2f00 	ldrex	r2, [r3]
   1999a:	f022 0220 	bic.w	r2, r2, #32
   1999e:	e843 2100 	strex	r1, r2, [r3]
   199a2:	2900      	cmp	r1, #0
   199a4:	d1f7      	bne.n	19996 <bt_hci_evt_le_pkey_complete+0xa>
   199a6:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   199aa:	782a      	ldrb	r2, [r5, #0]
   199ac:	b9aa      	cbnz	r2, 199da <bt_hci_evt_le_pkey_complete+0x4e>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   199ae:	4916      	ldr	r1, [pc, #88]	; (19a08 <bt_hci_evt_le_pkey_complete+0x7c>)
   199b0:	1c6a      	adds	r2, r5, #1
   199b2:	f105 0041 	add.w	r0, r5, #65	; 0x41
   199b6:	f852 4b04 	ldr.w	r4, [r2], #4
   199ba:	f841 4b04 	str.w	r4, [r1], #4
   199be:	4282      	cmp	r2, r0
   199c0:	d1f9      	bne.n	199b6 <bt_hci_evt_le_pkey_complete+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   199c2:	f3bf 8f5b 	dmb	ish
   199c6:	e853 2f00 	ldrex	r2, [r3]
   199ca:	f042 0210 	orr.w	r2, r2, #16
   199ce:	e843 2100 	strex	r1, r2, [r3]
   199d2:	2900      	cmp	r1, #0
   199d4:	d1f7      	bne.n	199c6 <bt_hci_evt_le_pkey_complete+0x3a>
   199d6:	f3bf 8f5b 	dmb	ish
	return list->head;
   199da:	4e0c      	ldr	r6, [pc, #48]	; (19a0c <bt_hci_evt_le_pkey_complete+0x80>)
   199dc:	6834      	ldr	r4, [r6, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   199de:	b16c      	cbz	r4, 199fc <bt_hci_evt_le_pkey_complete+0x70>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   199e0:	4f09      	ldr	r7, [pc, #36]	; (19a08 <bt_hci_evt_le_pkey_complete+0x7c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   199e2:	3c04      	subs	r4, #4
		if (cb->func) {
   199e4:	6823      	ldr	r3, [r4, #0]
   199e6:	b12b      	cbz	r3, 199f4 <bt_hci_evt_le_pkey_complete+0x68>
			cb->func(evt->status ? NULL : pub_key);
   199e8:	782a      	ldrb	r2, [r5, #0]
   199ea:	2a00      	cmp	r2, #0
   199ec:	bf0c      	ite	eq
   199ee:	4638      	moveq	r0, r7
   199f0:	2000      	movne	r0, #0
   199f2:	4798      	blx	r3
	return node->next;
   199f4:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   199f6:	b10c      	cbz	r4, 199fc <bt_hci_evt_le_pkey_complete+0x70>
   199f8:	3c04      	subs	r4, #4
   199fa:	e7f3      	b.n	199e4 <bt_hci_evt_le_pkey_complete+0x58>
	list->head = NULL;
   199fc:	2300      	movs	r3, #0
	list->tail = NULL;
   199fe:	e9c6 3300 	strd	r3, r3, [r6]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   19a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19a04:	2000041c 	.word	0x2000041c
   19a08:	20006bee 	.word	0x20006bee
   19a0c:	20005b60 	.word	0x20005b60

00019a10 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   19a10:	4905      	ldr	r1, [pc, #20]	; (19a28 <bt_hci_evt_le_dhkey_complete+0x18>)
   19a12:	680b      	ldr	r3, [r1, #0]
   19a14:	b133      	cbz	r3, 19a24 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   19a16:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   19a18:	2000      	movs	r0, #0
   19a1a:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   19a1c:	7811      	ldrb	r1, [r2, #0]
   19a1e:	b901      	cbnz	r1, 19a22 <bt_hci_evt_le_dhkey_complete+0x12>
   19a20:	1c50      	adds	r0, r2, #1
   19a22:	4718      	bx	r3
	}
}
   19a24:	4770      	bx	lr
   19a26:	bf00      	nop
   19a28:	20005b5c 	.word	0x20005b5c

00019a2c <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   19a2c:	4b0b      	ldr	r3, [pc, #44]	; (19a5c <notify_connected+0x30>)
{
   19a2e:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   19a30:	681d      	ldr	r5, [r3, #0]
{
   19a32:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   19a34:	b925      	cbnz	r5, 19a40 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19a36:	4d0a      	ldr	r5, [pc, #40]	; (19a60 <notify_connected+0x34>)
   19a38:	4e0a      	ldr	r6, [pc, #40]	; (19a64 <notify_connected+0x38>)
   19a3a:	42b5      	cmp	r5, r6
   19a3c:	d307      	bcc.n	19a4e <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   19a3e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   19a40:	682b      	ldr	r3, [r5, #0]
   19a42:	b113      	cbz	r3, 19a4a <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   19a44:	7b21      	ldrb	r1, [r4, #12]
   19a46:	4620      	mov	r0, r4
   19a48:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   19a4a:	69ad      	ldr	r5, [r5, #24]
   19a4c:	e7f2      	b.n	19a34 <notify_connected+0x8>
		if (cb->connected) {
   19a4e:	682b      	ldr	r3, [r5, #0]
   19a50:	b113      	cbz	r3, 19a58 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   19a52:	7b21      	ldrb	r1, [r4, #12]
   19a54:	4620      	mov	r0, r4
   19a56:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19a58:	351c      	adds	r5, #28
   19a5a:	e7ee      	b.n	19a3a <notify_connected+0xe>
   19a5c:	20005b74 	.word	0x20005b74
   19a60:	0002e520 	.word	0x0002e520
   19a64:	0002e53c 	.word	0x0002e53c

00019a68 <bt_conn_create_pdu_timeout.part.0>:
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
   19a68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_WARN("Unable to allocate buffer within timeout");
   19a6a:	4b07      	ldr	r3, [pc, #28]	; (19a88 <bt_conn_create_pdu_timeout.part.0+0x20>)
   19a6c:	9305      	str	r3, [sp, #20]
   19a6e:	4807      	ldr	r0, [pc, #28]	; (19a8c <bt_conn_create_pdu_timeout.part.0+0x24>)
   19a70:	2302      	movs	r3, #2
   19a72:	aa04      	add	r2, sp, #16
   19a74:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19a78:	9304      	str	r3, [sp, #16]
   19a7a:	f011 f854 	bl	2ab26 <z_log_msg_static_create.constprop.0>
}
   19a7e:	2000      	movs	r0, #0
   19a80:	b007      	add	sp, #28
   19a82:	f85d fb04 	ldr.w	pc, [sp], #4
   19a86:	bf00      	nop
   19a88:	00030afd 	.word	0x00030afd
   19a8c:	0002e594 	.word	0x0002e594

00019a90 <tx_notify>:
{
   19a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   19a94:	f8df 804c 	ldr.w	r8, [pc, #76]	; 19ae4 <tx_notify+0x54>
{
   19a98:	4604      	mov	r4, r0
	tx->cb = NULL;
   19a9a:	2700      	movs	r7, #0
	__asm__ volatile(
   19a9c:	f04f 0340 	mov.w	r3, #64	; 0x40
   19aa0:	f3ef 8211 	mrs	r2, BASEPRI
   19aa4:	f383 8812 	msr	BASEPRI_MAX, r3
   19aa8:	f3bf 8f6f 	isb	sy
	return list->head;
   19aac:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   19aae:	b129      	cbz	r1, 19abc <tx_notify+0x2c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19ab0:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   19ab2:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   19ab4:	6223      	str	r3, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19ab6:	4281      	cmp	r1, r0
	list->tail = node;
   19ab8:	bf08      	it	eq
   19aba:	6263      	streq	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   19abc:	f382 8811 	msr	BASEPRI, r2
   19ac0:	f3bf 8f6f 	isb	sy
		if (!tx) {
   19ac4:	b161      	cbz	r1, 19ae0 <tx_notify+0x50>
		user_data = tx->user_data;
   19ac6:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   19aca:	60cf      	str	r7, [r1, #12]
	tx->user_data = NULL;
   19acc:	e9c1 7701 	strd	r7, r7, [r1, #4]
	k_fifo_put(&free_tx, tx);
   19ad0:	4640      	mov	r0, r8
   19ad2:	f013 fd0d 	bl	2d4f0 <k_queue_append>
		cb(conn, user_data, 0);
   19ad6:	2200      	movs	r2, #0
   19ad8:	4631      	mov	r1, r6
   19ada:	4620      	mov	r0, r4
   19adc:	47a8      	blx	r5
	while (1) {
   19ade:	e7dd      	b.n	19a9c <tx_notify+0xc>
}
   19ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19ae4:	20000be8 	.word	0x20000be8

00019ae8 <conn_tx_destroy>:
{
   19ae8:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
   19aea:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   19aee:	2200      	movs	r2, #0
	tx->user_data = NULL;
   19af0:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
   19af4:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
   19af6:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   19af8:	4805      	ldr	r0, [pc, #20]	; (19b10 <conn_tx_destroy+0x28>)
   19afa:	f013 fcf9 	bl	2d4f0 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   19afe:	4631      	mov	r1, r6
   19b00:	4620      	mov	r0, r4
   19b02:	462b      	mov	r3, r5
   19b04:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   19b08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   19b0c:	4718      	bx	r3
   19b0e:	bf00      	nop
   19b10:	20000be8 	.word	0x20000be8

00019b14 <bt_conn_get_pkts>:
}
   19b14:	4800      	ldr	r0, [pc, #0]	; (19b18 <bt_conn_get_pkts+0x4>)
   19b16:	4770      	bx	lr
   19b18:	20000450 	.word	0x20000450

00019b1c <bt_conn_new>:
{
   19b1c:	b538      	push	{r3, r4, r5, lr}
   19b1e:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   19b20:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19b22:	2501      	movs	r5, #1
   19b24:	428b      	cmp	r3, r1
   19b26:	d102      	bne.n	19b2e <bt_conn_new+0x12>
		return NULL;
   19b28:	2400      	movs	r4, #0
}
   19b2a:	4620      	mov	r0, r4
   19b2c:	bd38      	pop	{r3, r4, r5, pc}
   19b2e:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   19b32:	f3bf 8f5b 	dmb	ish
   19b36:	e852 0f00 	ldrex	r0, [r2]
   19b3a:	2800      	cmp	r0, #0
   19b3c:	d104      	bne.n	19b48 <bt_conn_new+0x2c>
   19b3e:	e842 5c00 	strex	ip, r5, [r2]
   19b42:	f1bc 0f00 	cmp.w	ip, #0
   19b46:	d1f6      	bne.n	19b36 <bt_conn_new+0x1a>
   19b48:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   19b4c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   19b50:	d002      	beq.n	19b58 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   19b52:	3301      	adds	r3, #1
   19b54:	4604      	mov	r4, r0
   19b56:	e7e5      	b.n	19b24 <bt_conn_new+0x8>
	if (!conn) {
   19b58:	2c00      	cmp	r4, #0
   19b5a:	d0e6      	beq.n	19b2a <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
   19b5c:	22b8      	movs	r2, #184	; 0xb8
   19b5e:	2100      	movs	r1, #0
   19b60:	4620      	mov	r0, r4
   19b62:	f014 f95a 	bl	2de1a <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   19b66:	f104 0058 	add.w	r0, r4, #88	; 0x58
   19b6a:	4904      	ldr	r1, [pc, #16]	; (19b7c <bt_conn_new+0x60>)
   19b6c:	f013 fdd5 	bl	2d71a <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   19b70:	4903      	ldr	r1, [pc, #12]	; (19b80 <bt_conn_new+0x64>)
   19b72:	f104 0028 	add.w	r0, r4, #40	; 0x28
   19b76:	f013 fd8c 	bl	2d692 <k_work_init>
	return conn;
   19b7a:	e7d6      	b.n	19b2a <bt_conn_new+0xe>
   19b7c:	0001a301 	.word	0x0001a301
   19b80:	0002ab2d 	.word	0x0002ab2d

00019b84 <bt_conn_recv>:
{
   19b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b88:	b086      	sub	sp, #24
   19b8a:	4616      	mov	r6, r2
   19b8c:	af00      	add	r7, sp, #0
   19b8e:	4604      	mov	r4, r0
   19b90:	460d      	mov	r5, r1
	tx_notify(conn);
   19b92:	f7ff ff7d 	bl	19a90 <tx_notify>
	switch (flags) {
   19b96:	2e01      	cmp	r6, #1
   19b98:	d030      	beq.n	19bfc <bt_conn_recv+0x78>
   19b9a:	2e02      	cmp	r6, #2
   19b9c:	d16a      	bne.n	19c74 <bt_conn_recv+0xf0>
		if (conn->rx) {
   19b9e:	6923      	ldr	r3, [r4, #16]
   19ba0:	b163      	cbz	r3, 19bbc <bt_conn_recv+0x38>
			BT_ERR("Unexpected first L2CAP frame");
   19ba2:	4b40      	ldr	r3, [pc, #256]	; (19ca4 <bt_conn_recv+0x120>)
   19ba4:	4840      	ldr	r0, [pc, #256]	; (19ca8 <bt_conn_recv+0x124>)
   19ba6:	f107 0210 	add.w	r2, r7, #16
   19baa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19bae:	e9c7 6304 	strd	r6, r3, [r7, #16]
   19bb2:	f010 ffb8 	bl	2ab26 <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   19bb6:	4620      	mov	r0, r4
   19bb8:	f010 ffbb 	bl	2ab32 <bt_conn_reset_rx_state>
		conn->rx = buf;
   19bbc:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   19bbe:	6921      	ldr	r1, [r4, #16]
   19bc0:	8988      	ldrh	r0, [r1, #12]
   19bc2:	2801      	cmp	r0, #1
   19bc4:	d930      	bls.n	19c28 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   19bc6:	688b      	ldr	r3, [r1, #8]
   19bc8:	881b      	ldrh	r3, [r3, #0]
   19bca:	3304      	adds	r3, #4
   19bcc:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   19bce:	4298      	cmp	r0, r3
   19bd0:	d32a      	bcc.n	19c28 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   19bd2:	d95f      	bls.n	19c94 <bt_conn_recv+0x110>
		BT_ERR("ACL len mismatch (%u > %u)",
   19bd4:	466d      	mov	r5, sp
   19bd6:	b088      	sub	sp, #32
   19bd8:	466a      	mov	r2, sp
   19bda:	4934      	ldr	r1, [pc, #208]	; (19cac <bt_conn_recv+0x128>)
   19bdc:	61d3      	str	r3, [r2, #28]
   19bde:	2304      	movs	r3, #4
   19be0:	e9c2 1005 	strd	r1, r0, [r2, #20]
   19be4:	f842 3f10 	str.w	r3, [r2, #16]!
   19be8:	482f      	ldr	r0, [pc, #188]	; (19ca8 <bt_conn_recv+0x124>)
   19bea:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   19bee:	f010 ff9a 	bl	2ab26 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   19bf2:	4620      	mov	r0, r4
   19bf4:	46ad      	mov	sp, r5
   19bf6:	f010 ff9c 	bl	2ab32 <bt_conn_reset_rx_state>
		return;
   19bfa:	e015      	b.n	19c28 <bt_conn_recv+0xa4>
		if (!conn->rx) {
   19bfc:	6920      	ldr	r0, [r4, #16]
   19bfe:	b970      	cbnz	r0, 19c1e <bt_conn_recv+0x9a>
			BT_ERR("Unexpected L2CAP continuation");
   19c00:	4b2b      	ldr	r3, [pc, #172]	; (19cb0 <bt_conn_recv+0x12c>)
   19c02:	617b      	str	r3, [r7, #20]
   19c04:	4828      	ldr	r0, [pc, #160]	; (19ca8 <bt_conn_recv+0x124>)
   19c06:	2302      	movs	r3, #2
   19c08:	f107 0210 	add.w	r2, r7, #16
   19c0c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19c10:	613b      	str	r3, [r7, #16]
   19c12:	f010 ff88 	bl	2ab26 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   19c16:	4620      	mov	r0, r4
   19c18:	f010 ff8b 	bl	2ab32 <bt_conn_reset_rx_state>
   19c1c:	e001      	b.n	19c22 <bt_conn_recv+0x9e>
		if (!buf->len) {
   19c1e:	89ae      	ldrh	r6, [r5, #12]
   19c20:	b936      	cbnz	r6, 19c30 <bt_conn_recv+0xac>
		net_buf_unref(buf);
   19c22:	4628      	mov	r0, r5
   19c24:	f005 fca6 	bl	1f574 <net_buf_unref>
}
   19c28:	3718      	adds	r7, #24
   19c2a:	46bd      	mov	sp, r7
   19c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   19c30:	3008      	adds	r0, #8
   19c32:	f012 fe9a 	bl	2c96a <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   19c36:	4286      	cmp	r6, r0
   19c38:	d912      	bls.n	19c60 <bt_conn_recv+0xdc>
			BT_ERR("Not enough buffer space for L2CAP data");
   19c3a:	4b1e      	ldr	r3, [pc, #120]	; (19cb4 <bt_conn_recv+0x130>)
   19c3c:	481a      	ldr	r0, [pc, #104]	; (19ca8 <bt_conn_recv+0x124>)
   19c3e:	617b      	str	r3, [r7, #20]
   19c40:	f107 0210 	add.w	r2, r7, #16
   19c44:	2302      	movs	r3, #2
   19c46:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19c4a:	613b      	str	r3, [r7, #16]
   19c4c:	f010 ff6b 	bl	2ab26 <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   19c50:	2200      	movs	r2, #0
   19c52:	6921      	ldr	r1, [r4, #16]
   19c54:	4620      	mov	r0, r4
   19c56:	f000 fcd7 	bl	1a608 <bt_l2cap_recv>
			conn->rx = NULL;
   19c5a:	2300      	movs	r3, #0
   19c5c:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   19c5e:	e7e0      	b.n	19c22 <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19c60:	6920      	ldr	r0, [r4, #16]
   19c62:	89aa      	ldrh	r2, [r5, #12]
   19c64:	68a9      	ldr	r1, [r5, #8]
   19c66:	3008      	adds	r0, #8
   19c68:	f012 fe42 	bl	2c8f0 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   19c6c:	4628      	mov	r0, r5
   19c6e:	f005 fc81 	bl	1f574 <net_buf_unref>
		break;
   19c72:	e7a4      	b.n	19bbe <bt_conn_recv+0x3a>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   19c74:	46e8      	mov	r8, sp
   19c76:	b088      	sub	sp, #32
   19c78:	466a      	mov	r2, sp
   19c7a:	4b0f      	ldr	r3, [pc, #60]	; (19cb8 <bt_conn_recv+0x134>)
   19c7c:	480a      	ldr	r0, [pc, #40]	; (19ca8 <bt_conn_recv+0x124>)
	switch (flags) {
   19c7e:	e9c2 3605 	strd	r3, r6, [r2, #20]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   19c82:	2303      	movs	r3, #3
   19c84:	f842 3f10 	str.w	r3, [r2, #16]!
   19c88:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19c8c:	f010 ff4b 	bl	2ab26 <z_log_msg_static_create.constprop.0>
   19c90:	46c5      	mov	sp, r8
   19c92:	e7c0      	b.n	19c16 <bt_conn_recv+0x92>
	conn->rx = NULL;
   19c94:	2300      	movs	r3, #0
   19c96:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   19c98:	2201      	movs	r2, #1
   19c9a:	4620      	mov	r0, r4
   19c9c:	f000 fcb4 	bl	1a608 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   19ca0:	e7c2      	b.n	19c28 <bt_conn_recv+0xa4>
   19ca2:	bf00      	nop
   19ca4:	00030b26 	.word	0x00030b26
   19ca8:	0002e594 	.word	0x0002e594
   19cac:	00030ba6 	.word	0x00030ba6
   19cb0:	00030b43 	.word	0x00030b43
   19cb4:	00030b61 	.word	0x00030b61
   19cb8:	00030b88 	.word	0x00030b88

00019cbc <bt_conn_send_cb>:
{
   19cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19cc0:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   19cc2:	7b43      	ldrb	r3, [r0, #13]
   19cc4:	2b07      	cmp	r3, #7
{
   19cc6:	b086      	sub	sp, #24
   19cc8:	4605      	mov	r5, r0
   19cca:	460e      	mov	r6, r1
   19ccc:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   19cce:	d00c      	beq.n	19cea <bt_conn_send_cb+0x2e>
		BT_ERR("not connected!");
   19cd0:	4b28      	ldr	r3, [pc, #160]	; (19d74 <bt_conn_send_cb+0xb8>)
   19cd2:	9305      	str	r3, [sp, #20]
   19cd4:	4828      	ldr	r0, [pc, #160]	; (19d78 <bt_conn_send_cb+0xbc>)
   19cd6:	2302      	movs	r3, #2
   19cd8:	aa04      	add	r2, sp, #16
   19cda:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19cde:	9304      	str	r3, [sp, #16]
   19ce0:	f010 ff21 	bl	2ab26 <z_log_msg_static_create.constprop.0>
			return -ENOTCONN;
   19ce4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   19ce8:	e01d      	b.n	19d26 <bt_conn_send_cb+0x6a>
	if (cb) {
   19cea:	2a00      	cmp	r2, #0
   19cec:	d040      	beq.n	19d70 <bt_conn_send_cb+0xb4>
	return z_impl_z_current_get();
   19cee:	f00a f93d 	bl	23f6c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   19cf2:	4b22      	ldr	r3, [pc, #136]	; (19d7c <bt_conn_send_cb+0xc0>)
   19cf4:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   19cf6:	4822      	ldr	r0, [pc, #136]	; (19d80 <bt_conn_send_cb+0xc4>)
   19cf8:	bf07      	ittee	eq
   19cfa:	2200      	moveq	r2, #0
   19cfc:	2300      	moveq	r3, #0
   19cfe:	f04f 32ff 	movne.w	r2, #4294967295
   19d02:	f04f 33ff 	movne.w	r3, #4294967295
   19d06:	f009 fbc1 	bl	2348c <z_impl_k_queue_get>
   19d0a:	4604      	mov	r4, r0
		if (!tx) {
   19d0c:	b970      	cbnz	r0, 19d2c <bt_conn_send_cb+0x70>
			BT_ERR("Unable to allocate TX context");
   19d0e:	4b1d      	ldr	r3, [pc, #116]	; (19d84 <bt_conn_send_cb+0xc8>)
   19d10:	4819      	ldr	r0, [pc, #100]	; (19d78 <bt_conn_send_cb+0xbc>)
   19d12:	9305      	str	r3, [sp, #20]
   19d14:	aa04      	add	r2, sp, #16
   19d16:	2302      	movs	r3, #2
   19d18:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19d1c:	9304      	str	r3, [sp, #16]
   19d1e:	f010 ff02 	bl	2ab26 <z_log_msg_static_create.constprop.0>
			return -ENOBUFS;
   19d22:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   19d26:	b006      	add	sp, #24
   19d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   19d2c:	7b6b      	ldrb	r3, [r5, #13]
   19d2e:	2b07      	cmp	r3, #7
   19d30:	d012      	beq.n	19d58 <bt_conn_send_cb+0x9c>
			BT_WARN("Disconnected while allocating context");
   19d32:	4b15      	ldr	r3, [pc, #84]	; (19d88 <bt_conn_send_cb+0xcc>)
   19d34:	9305      	str	r3, [sp, #20]
   19d36:	4810      	ldr	r0, [pc, #64]	; (19d78 <bt_conn_send_cb+0xbc>)
   19d38:	2302      	movs	r3, #2
   19d3a:	aa04      	add	r2, sp, #16
   19d3c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19d40:	9304      	str	r3, [sp, #16]
   19d42:	f010 fef0 	bl	2ab26 <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   19d46:	2300      	movs	r3, #0
	tx->user_data = NULL;
   19d48:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   19d4c:	480c      	ldr	r0, [pc, #48]	; (19d80 <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   19d4e:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   19d50:	4621      	mov	r1, r4
   19d52:	f013 fbcd 	bl	2d4f0 <k_queue_append>
   19d56:	e7c5      	b.n	19ce4 <bt_conn_send_cb+0x28>
		tx->pending_no_cb = 0U;
   19d58:	2300      	movs	r3, #0
		tx->user_data = user_data;
   19d5a:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   19d5e:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   19d60:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   19d62:	f105 0038 	add.w	r0, r5, #56	; 0x38
   19d66:	4631      	mov	r1, r6
   19d68:	f012 fd89 	bl	2c87e <net_buf_put>
	return 0;
   19d6c:	2000      	movs	r0, #0
   19d6e:	e7da      	b.n	19d26 <bt_conn_send_cb+0x6a>
		tx_data(buf)->tx = NULL;
   19d70:	614a      	str	r2, [r1, #20]
   19d72:	e7f6      	b.n	19d62 <bt_conn_send_cb+0xa6>
   19d74:	00030bc1 	.word	0x00030bc1
   19d78:	0002e594 	.word	0x0002e594
   19d7c:	200025a8 	.word	0x200025a8
   19d80:	20000be8 	.word	0x20000be8
   19d84:	00030bd0 	.word	0x00030bd0
   19d88:	00030bee 	.word	0x00030bee

00019d8c <bt_conn_lookup_handle>:
{
   19d8c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   19d8e:	2101      	movs	r1, #1
   19d90:	4801      	ldr	r0, [pc, #4]	; (19d98 <bt_conn_lookup_handle+0xc>)
   19d92:	f010 bf0c 	b.w	2abae <conn_lookup_handle>
   19d96:	bf00      	nop
   19d98:	20001ff0 	.word	0x20001ff0

00019d9c <bt_conn_set_state>:
{
   19d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
   19d9e:	7b46      	ldrb	r6, [r0, #13]
   19da0:	428e      	cmp	r6, r1
{
   19da2:	af00      	add	r7, sp, #0
   19da4:	4604      	mov	r4, r0
   19da6:	460d      	mov	r5, r1
	if (conn->state == state) {
   19da8:	d117      	bne.n	19dda <bt_conn_set_state+0x3e>
	switch (state) {
   19daa:	2e08      	cmp	r6, #8
   19dac:	bf96      	itet	ls
   19dae:	4b69      	ldrls	r3, [pc, #420]	; (19f54 <bt_conn_set_state+0x1b8>)
	if (conn->state == state) {
   19db0:	4b69      	ldrhi	r3, [pc, #420]	; (19f58 <bt_conn_set_state+0x1bc>)
   19db2:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   19db6:	466c      	mov	r4, sp
   19db8:	b088      	sub	sp, #32
   19dba:	466a      	mov	r2, sp
   19dbc:	4967      	ldr	r1, [pc, #412]	; (19f5c <bt_conn_set_state+0x1c0>)
   19dbe:	e9c2 1305 	strd	r1, r3, [r2, #20]
   19dc2:	2302      	movs	r3, #2
   19dc4:	7713      	strb	r3, [r2, #28]
   19dc6:	4b66      	ldr	r3, [pc, #408]	; (19f60 <bt_conn_set_state+0x1c4>)
   19dc8:	f842 3f10 	str.w	r3, [r2, #16]!
   19dcc:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
		BT_WARN("no valid (%u) state was set", state);
   19dd0:	4864      	ldr	r0, [pc, #400]	; (19f64 <bt_conn_set_state+0x1c8>)
   19dd2:	f010 fea8 	bl	2ab26 <z_log_msg_static_create.constprop.0>
   19dd6:	46a5      	mov	sp, r4
   19dd8:	e040      	b.n	19e5c <bt_conn_set_state+0xc0>
	conn->state = state;
   19dda:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   19ddc:	b926      	cbnz	r6, 19de8 <bt_conn_set_state+0x4c>
		if (conn->type != BT_CONN_TYPE_ISO) {
   19dde:	7883      	ldrb	r3, [r0, #2]
   19de0:	2b08      	cmp	r3, #8
   19de2:	d001      	beq.n	19de8 <bt_conn_set_state+0x4c>
			bt_conn_ref(conn);
   19de4:	f010 feae 	bl	2ab44 <bt_conn_ref>
	switch (conn->state) {
   19de8:	7b63      	ldrb	r3, [r4, #13]
   19dea:	2b08      	cmp	r3, #8
   19dec:	f200 80ad 	bhi.w	19f4a <bt_conn_set_state+0x1ae>
   19df0:	e8df f003 	tbb	[pc, r3]
   19df4:	34340536 	.word	0x34340536
   19df8:	1c343434 	.word	0x1c343434
   19dfc:	34          	.byte	0x34
   19dfd:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   19dfe:	4d5a      	ldr	r5, [pc, #360]	; (19f68 <bt_conn_set_state+0x1cc>)
		tx->pending_no_cb = 0U;
   19e00:	2600      	movs	r6, #0
	__asm__ volatile(
   19e02:	f04f 0340 	mov.w	r3, #64	; 0x40
   19e06:	f3ef 8211 	mrs	r2, BASEPRI
   19e0a:	f383 8812 	msr	BASEPRI_MAX, r3
   19e0e:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   19e12:	69e3      	ldr	r3, [r4, #28]
   19e14:	2b00      	cmp	r3, #0
   19e16:	d077      	beq.n	19f08 <bt_conn_set_state+0x16c>
			conn->pending_no_cb--;
   19e18:	3b01      	subs	r3, #1
   19e1a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   19e1c:	f382 8811 	msr	BASEPRI, r2
   19e20:	f3bf 8f6f 	isb	sy
   19e24:	4628      	mov	r0, r5
   19e26:	f009 fb65 	bl	234f4 <z_impl_k_sem_give>
}
   19e2a:	e7ea      	b.n	19e02 <bt_conn_set_state+0x66>
		if (conn->type == BT_CONN_TYPE_SCO) {
   19e2c:	78a3      	ldrb	r3, [r4, #2]
   19e2e:	2b04      	cmp	r3, #4
   19e30:	d014      	beq.n	19e5c <bt_conn_set_state+0xc0>
	z_impl_k_queue_init(queue);
   19e32:	f104 0038 	add.w	r0, r4, #56	; 0x38
   19e36:	f013 fb4f 	bl	2d4d8 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   19e3a:	484c      	ldr	r0, [pc, #304]	; (19f6c <bt_conn_set_state+0x1d0>)
   19e3c:	2100      	movs	r1, #0
   19e3e:	f00a fb79 	bl	24534 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   19e42:	2300      	movs	r3, #0
	list->tail = NULL;
   19e44:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   19e48:	78e3      	ldrb	r3, [r4, #3]
   19e4a:	2b01      	cmp	r3, #1
   19e4c:	d106      	bne.n	19e5c <bt_conn_set_state+0xc0>
			k_work_schedule(&conn->deferred_work,
   19e4e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   19e52:	2300      	movs	r3, #0
   19e54:	f104 0058 	add.w	r0, r4, #88	; 0x58
   19e58:	f009 fd42 	bl	238e0 <k_work_schedule>
}
   19e5c:	46bd      	mov	sp, r7
   19e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   19e60:	78a3      	ldrb	r3, [r4, #2]
   19e62:	2b04      	cmp	r3, #4
   19e64:	d103      	bne.n	19e6e <bt_conn_set_state+0xd2>
			bt_conn_unref(conn);
   19e66:	4620      	mov	r0, r4
   19e68:	f010 fe87 	bl	2ab7a <bt_conn_unref>
			break;
   19e6c:	e7f6      	b.n	19e5c <bt_conn_set_state+0xc0>
		switch (old_state) {
   19e6e:	2e08      	cmp	r6, #8
   19e70:	d8f4      	bhi.n	19e5c <bt_conn_set_state+0xc0>
   19e72:	a301      	add	r3, pc, #4	; (adr r3, 19e78 <bt_conn_set_state+0xdc>)
   19e74:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   19e78:	00019ef1 	.word	0x00019ef1
   19e7c:	00019e9d 	.word	0x00019e9d
   19e80:	00019ee3 	.word	0x00019ee3
   19e84:	00019e67 	.word	0x00019e67
   19e88:	00019e67 	.word	0x00019e67
   19e8c:	00019ee3 	.word	0x00019ee3
   19e90:	00019ee3 	.word	0x00019ee3
   19e94:	00019ef1 	.word	0x00019ef1
   19e98:	00019ef1 	.word	0x00019ef1
			tx_notify(conn);
   19e9c:	4620      	mov	r0, r4
   19e9e:	f7ff fdf7 	bl	19a90 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   19ea2:	78a3      	ldrb	r3, [r4, #2]
   19ea4:	2b01      	cmp	r3, #1
   19ea6:	d10a      	bne.n	19ebe <bt_conn_set_state+0x122>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   19ea8:	f104 0558 	add.w	r5, r4, #88	; 0x58
   19eac:	4628      	mov	r0, r5
   19eae:	f013 fc40 	bl	2d732 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   19eb2:	f010 0f0c 	tst.w	r0, #12
   19eb6:	d002      	beq.n	19ebe <bt_conn_set_state+0x122>
				k_work_cancel_delayable(&conn->deferred_work);
   19eb8:	4628      	mov	r0, r5
   19eba:	f013 fc3c 	bl	2d736 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19ebe:	f3bf 8f5b 	dmb	ish
   19ec2:	3404      	adds	r4, #4
   19ec4:	e854 3f00 	ldrex	r3, [r4]
   19ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19ecc:	e844 3200 	strex	r2, r3, [r4]
   19ed0:	2a00      	cmp	r2, #0
   19ed2:	d1f7      	bne.n	19ec4 <bt_conn_set_state+0x128>
   19ed4:	f3bf 8f5b 	dmb	ish
   19ed8:	2100      	movs	r1, #0
   19eda:	4824      	ldr	r0, [pc, #144]	; (19f6c <bt_conn_set_state+0x1d0>)
   19edc:	f00a fb2a 	bl	24534 <z_impl_k_poll_signal_raise>
   19ee0:	e7bc      	b.n	19e5c <bt_conn_set_state+0xc0>
			if (conn->err) {
   19ee2:	7b23      	ldrb	r3, [r4, #12]
   19ee4:	2b00      	cmp	r3, #0
   19ee6:	d0be      	beq.n	19e66 <bt_conn_set_state+0xca>
				notify_connected(conn);
   19ee8:	4620      	mov	r0, r4
   19eea:	f7ff fd9f 	bl	19a2c <notify_connected>
   19eee:	e7ba      	b.n	19e66 <bt_conn_set_state+0xca>
			BT_WARN("Invalid (%u) old state", state);
   19ef0:	466c      	mov	r4, sp
   19ef2:	b088      	sub	sp, #32
   19ef4:	466a      	mov	r2, sp
   19ef6:	4b1e      	ldr	r3, [pc, #120]	; (19f70 <bt_conn_set_state+0x1d4>)
		BT_WARN("no valid (%u) state was set", state);
   19ef8:	e9c2 3505 	strd	r3, r5, [r2, #20]
   19efc:	2303      	movs	r3, #3
   19efe:	f842 3f10 	str.w	r3, [r2, #16]!
   19f02:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19f06:	e763      	b.n	19dd0 <bt_conn_set_state+0x34>
	return list->head;
   19f08:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   19f0a:	b129      	cbz	r1, 19f18 <bt_conn_set_state+0x17c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19f0c:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   19f0e:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   19f10:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19f12:	4281      	cmp	r1, r0
	list->tail = node;
   19f14:	bf08      	it	eq
   19f16:	61a3      	streq	r3, [r4, #24]
   19f18:	f382 8811 	msr	BASEPRI, r2
   19f1c:	f3bf 8f6f 	isb	sy
		if (!node) {
   19f20:	2900      	cmp	r1, #0
   19f22:	d09b      	beq.n	19e5c <bt_conn_set_state+0xc0>
	__asm__ volatile(
   19f24:	f04f 0240 	mov.w	r2, #64	; 0x40
   19f28:	f3ef 8311 	mrs	r3, BASEPRI
   19f2c:	f382 8812 	msr	BASEPRI_MAX, r2
   19f30:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   19f34:	68ca      	ldr	r2, [r1, #12]
   19f36:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   19f38:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   19f3a:	f383 8811 	msr	BASEPRI, r3
   19f3e:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   19f42:	4620      	mov	r0, r4
   19f44:	f7ff fdd0 	bl	19ae8 <conn_tx_destroy>
   19f48:	e76c      	b.n	19e24 <bt_conn_set_state+0x88>
		BT_WARN("no valid (%u) state was set", state);
   19f4a:	466c      	mov	r4, sp
   19f4c:	b088      	sub	sp, #32
   19f4e:	466a      	mov	r2, sp
   19f50:	4b08      	ldr	r3, [pc, #32]	; (19f74 <bt_conn_set_state+0x1d8>)
   19f52:	e7d1      	b.n	19ef8 <bt_conn_set_state+0x15c>
   19f54:	0002eebc 	.word	0x0002eebc
   19f58:	00030c14 	.word	0x00030c14
   19f5c:	00030c1e 	.word	0x00030c1e
   19f60:	01000003 	.word	0x01000003
   19f64:	0002e594 	.word	0x0002e594
   19f68:	20000450 	.word	0x20000450
   19f6c:	200006e8 	.word	0x200006e8
   19f70:	00030c2f 	.word	0x00030c2f
   19f74:	00030c46 	.word	0x00030c46

00019f78 <bt_conn_index>:
		index = conn - acl_conns;
   19f78:	4b03      	ldr	r3, [pc, #12]	; (19f88 <bt_conn_index+0x10>)
   19f7a:	1ac0      	subs	r0, r0, r3
   19f7c:	4b03      	ldr	r3, [pc, #12]	; (19f8c <bt_conn_index+0x14>)
   19f7e:	1180      	asrs	r0, r0, #6
   19f80:	4358      	muls	r0, r3
}
   19f82:	b2c0      	uxtb	r0, r0
   19f84:	4770      	bx	lr
   19f86:	bf00      	nop
   19f88:	20001ff0 	.word	0x20001ff0
   19f8c:	aaaaaaab 	.word	0xaaaaaaab

00019f90 <bt_conn_create_pdu_timeout>:
{
   19f90:	b538      	push	{r3, r4, r5, lr}
   19f92:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   19f94:	4908      	ldr	r1, [pc, #32]	; (19fb8 <bt_conn_create_pdu_timeout+0x28>)
   19f96:	2800      	cmp	r0, #0
   19f98:	bf08      	it	eq
   19f9a:	4608      	moveq	r0, r1
   19f9c:	f012 fbfd 	bl	2c79a <net_buf_alloc_fixed>
	if (!buf) {
   19fa0:	4604      	mov	r4, r0
   19fa2:	b918      	cbnz	r0, 19fac <bt_conn_create_pdu_timeout+0x1c>
}
   19fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19fa8:	f7ff bd5e 	b.w	19a68 <bt_conn_create_pdu_timeout.part.0>
	net_buf_simple_reserve(&buf->b, reserve);
   19fac:	1d29      	adds	r1, r5, #4
   19fae:	3008      	adds	r0, #8
   19fb0:	f012 fc18 	bl	2c7e4 <net_buf_simple_reserve>
   19fb4:	4620      	mov	r0, r4
   19fb6:	bd38      	pop	{r3, r4, r5, pc}
   19fb8:	20000c00 	.word	0x20000c00

00019fbc <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   19fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19fbe:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19fc0:	f3bf 8f5b 	dmb	ish
   19fc4:	6863      	ldr	r3, [r4, #4]
   19fc6:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   19fca:	05db      	lsls	r3, r3, #23
   19fcc:	f100 0004 	add.w	r0, r0, #4
   19fd0:	d511      	bpl.n	19ff6 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   19fd2:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   19fd6:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   19fda:	429a      	cmp	r2, r3
   19fdc:	d80b      	bhi.n	19ff6 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   19fde:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
   19fe2:	429a      	cmp	r2, r3
   19fe4:	d307      	bcc.n	19ff6 <notify_le_param_updated+0x3a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   19fe6:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
   19fea:	429a      	cmp	r2, r3
   19fec:	d103      	bne.n	19ff6 <notify_le_param_updated+0x3a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19fee:	f46f 7180 	mvn.w	r1, #256	; 0x100
   19ff2:	f010 fd89 	bl	2ab08 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   19ff6:	4b10      	ldr	r3, [pc, #64]	; (1a038 <notify_le_param_updated+0x7c>)
   19ff8:	681d      	ldr	r5, [r3, #0]
   19ffa:	b925      	cbnz	r5, 1a006 <notify_le_param_updated+0x4a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19ffc:	4d0f      	ldr	r5, [pc, #60]	; (1a03c <notify_le_param_updated+0x80>)
   19ffe:	4f10      	ldr	r7, [pc, #64]	; (1a040 <notify_le_param_updated+0x84>)
   1a000:	42bd      	cmp	r5, r7
   1a002:	d30c      	bcc.n	1a01e <notify_le_param_updated+0x62>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   1a004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   1a006:	68ee      	ldr	r6, [r5, #12]
   1a008:	b13e      	cbz	r6, 1a01a <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
   1a00a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1a00e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1a012:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1a016:	4620      	mov	r0, r4
   1a018:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1a01a:	69ad      	ldr	r5, [r5, #24]
   1a01c:	e7ed      	b.n	19ffa <notify_le_param_updated+0x3e>
		if (cb->le_param_updated) {
   1a01e:	68ee      	ldr	r6, [r5, #12]
   1a020:	b13e      	cbz	r6, 1a032 <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   1a022:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1a026:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1a02a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1a02e:	4620      	mov	r0, r4
   1a030:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a032:	351c      	adds	r5, #28
   1a034:	e7e4      	b.n	1a000 <notify_le_param_updated+0x44>
   1a036:	bf00      	nop
   1a038:	20005b74 	.word	0x20005b74
   1a03c:	0002e520 	.word	0x0002e520
   1a040:	0002e53c 	.word	0x0002e53c

0001a044 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   1a044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a048:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   1a04a:	4608      	mov	r0, r1
{
   1a04c:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   1a04e:	f010 fc1e 	bl	2a88e <bt_le_conn_params_valid>
   1a052:	4605      	mov	r5, r0
   1a054:	b918      	cbnz	r0, 1a05e <le_param_req+0x1a>
		return false;
   1a056:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   1a058:	4628      	mov	r0, r5
   1a05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1a05e:	4b13      	ldr	r3, [pc, #76]	; (1a0ac <le_param_req+0x68>)
   1a060:	681e      	ldr	r6, [r3, #0]
   1a062:	b946      	cbnz	r6, 1a076 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a064:	4e12      	ldr	r6, [pc, #72]	; (1a0b0 <le_param_req+0x6c>)
   1a066:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1a0b4 <le_param_req+0x70>
   1a06a:	4546      	cmp	r6, r8
   1a06c:	d2f4      	bcs.n	1a058 <le_param_req+0x14>
		if (!cb->le_param_req) {
   1a06e:	68b3      	ldr	r3, [r6, #8]
   1a070:	b983      	cbnz	r3, 1a094 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a072:	361c      	adds	r6, #28
   1a074:	e7f9      	b.n	1a06a <le_param_req+0x26>
		if (!cb->le_param_req) {
   1a076:	68b3      	ldr	r3, [r6, #8]
   1a078:	b90b      	cbnz	r3, 1a07e <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   1a07a:	69b6      	ldr	r6, [r6, #24]
   1a07c:	e7f1      	b.n	1a062 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   1a07e:	4621      	mov	r1, r4
   1a080:	4638      	mov	r0, r7
   1a082:	4798      	blx	r3
   1a084:	2800      	cmp	r0, #0
   1a086:	d0e6      	beq.n	1a056 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1a088:	4620      	mov	r0, r4
   1a08a:	f010 fc00 	bl	2a88e <bt_le_conn_params_valid>
   1a08e:	2800      	cmp	r0, #0
   1a090:	d1f3      	bne.n	1a07a <le_param_req+0x36>
   1a092:	e7e0      	b.n	1a056 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   1a094:	4621      	mov	r1, r4
   1a096:	4638      	mov	r0, r7
   1a098:	4798      	blx	r3
   1a09a:	2800      	cmp	r0, #0
   1a09c:	d0db      	beq.n	1a056 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1a09e:	4620      	mov	r0, r4
   1a0a0:	f010 fbf5 	bl	2a88e <bt_le_conn_params_valid>
   1a0a4:	2800      	cmp	r0, #0
   1a0a6:	d1e4      	bne.n	1a072 <le_param_req+0x2e>
   1a0a8:	e7d5      	b.n	1a056 <le_param_req+0x12>
   1a0aa:	bf00      	nop
   1a0ac:	20005b74 	.word	0x20005b74
   1a0b0:	0002e520 	.word	0x0002e520
   1a0b4:	0002e53c 	.word	0x0002e53c

0001a0b8 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   1a0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1a0bc:	78c3      	ldrb	r3, [r0, #3]
{
   1a0be:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1a0c0:	b973      	cbnz	r3, 1a0e0 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   1a0c2:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1a0c6:	4b10      	ldr	r3, [pc, #64]	; (1a108 <bt_conn_identity_resolved+0x50>)
   1a0c8:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1a0ca:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   1a0ce:	b955      	cbnz	r5, 1a0e6 <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a0d0:	4d0e      	ldr	r5, [pc, #56]	; (1a10c <bt_conn_identity_resolved+0x54>)
   1a0d2:	4f0f      	ldr	r7, [pc, #60]	; (1a110 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1a0d4:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a0d8:	42bd      	cmp	r5, r7
   1a0da:	d30c      	bcc.n	1a0f6 <bt_conn_identity_resolved+0x3e>
		}
	}
}
   1a0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   1a0e0:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   1a0e4:	e7ef      	b.n	1a0c6 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   1a0e6:	692b      	ldr	r3, [r5, #16]
   1a0e8:	b11b      	cbz	r3, 1a0f2 <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1a0ea:	463a      	mov	r2, r7
   1a0ec:	4631      	mov	r1, r6
   1a0ee:	4620      	mov	r0, r4
   1a0f0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1a0f2:	69ad      	ldr	r5, [r5, #24]
   1a0f4:	e7eb      	b.n	1a0ce <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   1a0f6:	692b      	ldr	r3, [r5, #16]
   1a0f8:	b11b      	cbz	r3, 1a102 <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1a0fa:	4642      	mov	r2, r8
   1a0fc:	4631      	mov	r1, r6
   1a0fe:	4620      	mov	r0, r4
   1a100:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a102:	351c      	adds	r5, #28
   1a104:	e7e8      	b.n	1a0d8 <bt_conn_identity_resolved+0x20>
   1a106:	bf00      	nop
   1a108:	20005b74 	.word	0x20005b74
   1a10c:	0002e520 	.word	0x0002e520
   1a110:	0002e53c 	.word	0x0002e53c

0001a114 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   1a114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   1a116:	7a43      	ldrb	r3, [r0, #9]
   1a118:	7283      	strb	r3, [r0, #10]
{
   1a11a:	4604      	mov	r4, r0
   1a11c:	4615      	mov	r5, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   1a11e:	f010 fe55 	bl	2adcc <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1a122:	4b13      	ldr	r3, [pc, #76]	; (1a170 <bt_conn_security_changed+0x5c>)
   1a124:	681e      	ldr	r6, [r3, #0]
   1a126:	b98e      	cbnz	r6, 1a14c <bt_conn_security_changed+0x38>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a128:	4e12      	ldr	r6, [pc, #72]	; (1a174 <bt_conn_security_changed+0x60>)
   1a12a:	4f13      	ldr	r7, [pc, #76]	; (1a178 <bt_conn_security_changed+0x64>)
   1a12c:	42be      	cmp	r6, r7
   1a12e:	d315      	bcc.n	1a15c <bt_conn_security_changed+0x48>
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
	if (!err && conn->sec_level >= BT_SECURITY_L2) {
   1a130:	b9e5      	cbnz	r5, 1a16c <bt_conn_security_changed+0x58>
   1a132:	7a63      	ldrb	r3, [r4, #9]
   1a134:	2b01      	cmp	r3, #1
   1a136:	d919      	bls.n	1a16c <bt_conn_security_changed+0x58>
		if (conn->type == BT_CONN_TYPE_LE) {
   1a138:	78a3      	ldrb	r3, [r4, #2]
   1a13a:	2b01      	cmp	r3, #1
   1a13c:	d116      	bne.n	1a16c <bt_conn_security_changed+0x58>
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
   1a13e:	7a20      	ldrb	r0, [r4, #8]
   1a140:	f104 0188 	add.w	r1, r4, #136	; 0x88
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   1a144:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
   1a148:	f005 b93c 	b.w	1f3c4 <bt_keys_update_usage>
		if (cb->security_changed) {
   1a14c:	6973      	ldr	r3, [r6, #20]
   1a14e:	b11b      	cbz	r3, 1a158 <bt_conn_security_changed+0x44>
			cb->security_changed(conn, conn->sec_level, err);
   1a150:	7a61      	ldrb	r1, [r4, #9]
   1a152:	462a      	mov	r2, r5
   1a154:	4620      	mov	r0, r4
   1a156:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1a158:	69b6      	ldr	r6, [r6, #24]
   1a15a:	e7e4      	b.n	1a126 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   1a15c:	6973      	ldr	r3, [r6, #20]
   1a15e:	b11b      	cbz	r3, 1a168 <bt_conn_security_changed+0x54>
			cb->security_changed(conn, conn->sec_level, err);
   1a160:	7a61      	ldrb	r1, [r4, #9]
   1a162:	462a      	mov	r2, r5
   1a164:	4620      	mov	r0, r4
   1a166:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a168:	361c      	adds	r6, #28
   1a16a:	e7df      	b.n	1a12c <bt_conn_security_changed+0x18>
}
   1a16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a16e:	bf00      	nop
   1a170:	20005b74 	.word	0x20005b74
   1a174:	0002e520 	.word	0x0002e520
   1a178:	0002e53c 	.word	0x0002e53c

0001a17c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   1a17c:	b538      	push	{r3, r4, r5, lr}
   1a17e:	4605      	mov	r5, r0
   1a180:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1a182:	480b      	ldr	r0, [pc, #44]	; (1a1b0 <bt_conn_add_le+0x34>)
   1a184:	2101      	movs	r1, #1
   1a186:	f7ff fcc9 	bl	19b1c <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   1a18a:	b180      	cbz	r0, 1a1ae <bt_conn_add_le+0x32>
		return NULL;
	}

	conn->id = id;
   1a18c:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a18e:	6823      	ldr	r3, [r4, #0]
   1a190:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
   1a194:	88a3      	ldrh	r3, [r4, #4]
   1a196:	f8a0 308c 	strh.w	r3, [r0, #140]	; 0x8c
   1a19a:	79a3      	ldrb	r3, [r4, #6]
   1a19c:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   1a1a0:	2301      	movs	r3, #1
   1a1a2:	7243      	strb	r3, [r0, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   1a1a4:	7283      	strb	r3, [r0, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1a1a6:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1a1a8:	4b02      	ldr	r3, [pc, #8]	; (1a1b4 <bt_conn_add_le+0x38>)
   1a1aa:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   1a1ae:	bd38      	pop	{r3, r4, r5, pc}
   1a1b0:	20001ff0 	.word	0x20001ff0
   1a1b4:	00280018 	.word	0x00280018

0001a1b8 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1a1b8:	b570      	push	{r4, r5, r6, lr}
   1a1ba:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a1bc:	480c      	ldr	r0, [pc, #48]	; (1a1f0 <bt_conn_lookup_addr_le+0x38>)
{
   1a1be:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a1c0:	f010 fcc0 	bl	2ab44 <bt_conn_ref>

		if (!conn) {
   1a1c4:	4604      	mov	r4, r0
   1a1c6:	b128      	cbz	r0, 1a1d4 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1a1c8:	7883      	ldrb	r3, [r0, #2]
   1a1ca:	2b01      	cmp	r3, #1
   1a1cc:	d004      	beq.n	1a1d8 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   1a1ce:	f010 fcd4 	bl	2ab7a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1a1d2:	2400      	movs	r4, #0
}
   1a1d4:	4620      	mov	r0, r4
   1a1d6:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1a1d8:	4629      	mov	r1, r5
   1a1da:	4632      	mov	r2, r6
   1a1dc:	f010 fd68 	bl	2acb0 <bt_conn_is_peer_addr_le>
   1a1e0:	4605      	mov	r5, r0
   1a1e2:	2800      	cmp	r0, #0
   1a1e4:	d1f6      	bne.n	1a1d4 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   1a1e6:	4620      	mov	r0, r4
   1a1e8:	f010 fcc7 	bl	2ab7a <bt_conn_unref>
	return NULL;
   1a1ec:	462c      	mov	r4, r5
			continue;
   1a1ee:	e7f1      	b.n	1a1d4 <bt_conn_lookup_addr_le+0x1c>
   1a1f0:	20001ff0 	.word	0x20001ff0

0001a1f4 <bt_conn_exists_le>:
{
   1a1f4:	b5b0      	push	{r4, r5, r7, lr}
   1a1f6:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1a1f8:	f7ff ffde 	bl	1a1b8 <bt_conn_lookup_addr_le>
	if (conn) {
   1a1fc:	4604      	mov	r4, r0
   1a1fe:	b1d8      	cbz	r0, 1a238 <bt_conn_exists_le+0x44>
		BT_WARN("Found valid connection in %s state",
   1a200:	7b43      	ldrb	r3, [r0, #13]
	switch (state) {
   1a202:	2b08      	cmp	r3, #8
   1a204:	bf96      	itet	ls
   1a206:	4a0d      	ldrls	r2, [pc, #52]	; (1a23c <bt_conn_exists_le+0x48>)
		BT_WARN("Found valid connection in %s state",
   1a208:	4b0d      	ldrhi	r3, [pc, #52]	; (1a240 <bt_conn_exists_le+0x4c>)
   1a20a:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1a20e:	466d      	mov	r5, sp
   1a210:	b088      	sub	sp, #32
   1a212:	466a      	mov	r2, sp
   1a214:	490b      	ldr	r1, [pc, #44]	; (1a244 <bt_conn_exists_le+0x50>)
   1a216:	480c      	ldr	r0, [pc, #48]	; (1a248 <bt_conn_exists_le+0x54>)
   1a218:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1a21c:	2302      	movs	r3, #2
   1a21e:	7713      	strb	r3, [r2, #28]
   1a220:	4b0a      	ldr	r3, [pc, #40]	; (1a24c <bt_conn_exists_le+0x58>)
   1a222:	f842 3f10 	str.w	r3, [r2, #16]!
   1a226:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   1a22a:	f010 fc7c 	bl	2ab26 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   1a22e:	4620      	mov	r0, r4
   1a230:	46ad      	mov	sp, r5
   1a232:	f010 fca2 	bl	2ab7a <bt_conn_unref>
		return true;
   1a236:	2001      	movs	r0, #1
}
   1a238:	46bd      	mov	sp, r7
   1a23a:	bdb0      	pop	{r4, r5, r7, pc}
   1a23c:	0002eebc 	.word	0x0002eebc
   1a240:	00030c14 	.word	0x00030c14
   1a244:	00030c62 	.word	0x00030c62
   1a248:	0002e594 	.word	0x0002e594
   1a24c:	01000003 	.word	0x01000003

0001a250 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   1a250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a252:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a254:	480e      	ldr	r0, [pc, #56]	; (1a290 <bt_conn_lookup_state_le+0x40>)
{
   1a256:	460e      	mov	r6, r1
   1a258:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a25a:	f010 fc73 	bl	2ab44 <bt_conn_ref>

		if (!conn) {
   1a25e:	4604      	mov	r4, r0
   1a260:	b1a0      	cbz	r0, 1a28c <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1a262:	7883      	ldrb	r3, [r0, #2]
   1a264:	2b01      	cmp	r3, #1
   1a266:	d003      	beq.n	1a270 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   1a268:	f010 fc87 	bl	2ab7a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1a26c:	2400      	movs	r4, #0
			continue;
   1a26e:	e00d      	b.n	1a28c <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1a270:	b136      	cbz	r6, 1a280 <bt_conn_lookup_state_le+0x30>
   1a272:	4632      	mov	r2, r6
   1a274:	4629      	mov	r1, r5
   1a276:	f010 fd1b 	bl	2acb0 <bt_conn_is_peer_addr_le>
   1a27a:	b908      	cbnz	r0, 1a280 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   1a27c:	4620      	mov	r0, r4
   1a27e:	e7f3      	b.n	1a268 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   1a280:	7b63      	ldrb	r3, [r4, #13]
   1a282:	42bb      	cmp	r3, r7
   1a284:	d1fa      	bne.n	1a27c <bt_conn_lookup_state_le+0x2c>
   1a286:	7a23      	ldrb	r3, [r4, #8]
   1a288:	42ab      	cmp	r3, r5
   1a28a:	d1f7      	bne.n	1a27c <bt_conn_lookup_state_le+0x2c>
}
   1a28c:	4620      	mov	r0, r4
   1a28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a290:	20001ff0 	.word	0x20001ff0

0001a294 <send_conn_le_param_update>:
{
   1a294:	b538      	push	{r3, r4, r5, lr}
   1a296:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   1a298:	4608      	mov	r0, r1
{
   1a29a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1a29c:	f010 faf7 	bl	2a88e <bt_le_conn_params_valid>
   1a2a0:	b348      	cbz	r0, 1a2f6 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1a2a2:	4b16      	ldr	r3, [pc, #88]	; (1a2fc <send_conn_le_param_update+0x68>)
   1a2a4:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1a2a8:	0799      	lsls	r1, r3, #30
   1a2aa:	d407      	bmi.n	1a2bc <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1a2ac:	78e3      	ldrb	r3, [r4, #3]
   1a2ae:	b183      	cbz	r3, 1a2d2 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   1a2b0:	4629      	mov	r1, r5
   1a2b2:	4620      	mov	r0, r4
}
   1a2b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   1a2b8:	f000 b9e4 	b.w	1a684 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1a2bc:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   1a2c0:	079a      	lsls	r2, r3, #30
   1a2c2:	d5f3      	bpl.n	1a2ac <send_conn_le_param_update+0x18>
   1a2c4:	f3bf 8f5b 	dmb	ish
   1a2c8:	6863      	ldr	r3, [r4, #4]
   1a2ca:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1a2ce:	059b      	lsls	r3, r3, #22
   1a2d0:	d4ec      	bmi.n	1a2ac <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1a2d2:	4629      	mov	r1, r5
   1a2d4:	4620      	mov	r0, r4
   1a2d6:	f010 fd0b 	bl	2acf0 <bt_conn_le_conn_update>
		if (rc == 0) {
   1a2da:	b958      	cbnz	r0, 1a2f4 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   1a2dc:	882b      	ldrh	r3, [r5, #0]
   1a2de:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   1a2e2:	886b      	ldrh	r3, [r5, #2]
   1a2e4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   1a2e8:	88ab      	ldrh	r3, [r5, #4]
   1a2ea:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   1a2ee:	88eb      	ldrh	r3, [r5, #6]
   1a2f0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   1a2f4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1a2f6:	f06f 0015 	mvn.w	r0, #21
   1a2fa:	e7fb      	b.n	1a2f4 <send_conn_le_param_update+0x60>
   1a2fc:	20000350 	.word	0x20000350

0001a300 <deferred_work>:
{
   1a300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   1a302:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   1a306:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1a308:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   1a30c:	b9fb      	cbnz	r3, 1a34e <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   1a30e:	4628      	mov	r0, r5
   1a310:	f010 fd4b 	bl	2adaa <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   1a314:	4b28      	ldr	r3, [pc, #160]	; (1a3b8 <deferred_work+0xb8>)
   1a316:	681e      	ldr	r6, [r3, #0]
   1a318:	b94e      	cbnz	r6, 1a32e <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a31a:	4e28      	ldr	r6, [pc, #160]	; (1a3bc <deferred_work+0xbc>)
   1a31c:	4f28      	ldr	r7, [pc, #160]	; (1a3c0 <deferred_work+0xc0>)
   1a31e:	42be      	cmp	r6, r7
   1a320:	d30d      	bcc.n	1a33e <deferred_work+0x3e>
		bt_conn_unref(conn);
   1a322:	4628      	mov	r0, r5
}
   1a324:	b003      	add	sp, #12
   1a326:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   1a32a:	f010 bc26 	b.w	2ab7a <bt_conn_unref>
		if (cb->disconnected) {
   1a32e:	6873      	ldr	r3, [r6, #4]
   1a330:	b11b      	cbz	r3, 1a33a <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   1a332:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   1a336:	4628      	mov	r0, r5
   1a338:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1a33a:	69b6      	ldr	r6, [r6, #24]
   1a33c:	e7ec      	b.n	1a318 <deferred_work+0x18>
		if (cb->disconnected) {
   1a33e:	6873      	ldr	r3, [r6, #4]
   1a340:	b11b      	cbz	r3, 1a34a <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   1a342:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   1a346:	4628      	mov	r0, r5
   1a348:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a34a:	361c      	adds	r6, #28
   1a34c:	e7e7      	b.n	1a31e <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   1a34e:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   1a352:	2b01      	cmp	r3, #1
   1a354:	d128      	bne.n	1a3a8 <deferred_work+0xa8>
	if (atomic_test_and_clear_bit(conn->flags,
   1a356:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a35a:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1a35e:	4630      	mov	r0, r6
   1a360:	f010 fbd2 	bl	2ab08 <atomic_and>
   1a364:	05c3      	lsls	r3, r0, #23
   1a366:	d521      	bpl.n	1a3ac <deferred_work+0xac>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1a368:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   1a36c:	f8ad 3000 	strh.w	r3, [sp]
   1a370:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   1a374:	f8ad 3002 	strh.w	r3, [sp, #2]
   1a378:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   1a37c:	f8ad 3004 	strh.w	r3, [sp, #4]
   1a380:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   1a384:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   1a388:	4669      	mov	r1, sp
   1a38a:	4628      	mov	r0, r5
   1a38c:	f7ff ff82 	bl	1a294 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a390:	f3bf 8f5b 	dmb	ish
   1a394:	e856 3f00 	ldrex	r3, [r6]
   1a398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a39c:	e846 3200 	strex	r2, r3, [r6]
   1a3a0:	2a00      	cmp	r2, #0
   1a3a2:	d1f7      	bne.n	1a394 <deferred_work+0x94>
   1a3a4:	f3bf 8f5b 	dmb	ish
}
   1a3a8:	b003      	add	sp, #12
   1a3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   1a3ac:	4a05      	ldr	r2, [pc, #20]	; (1a3c4 <deferred_work+0xc4>)
   1a3ae:	6810      	ldr	r0, [r2, #0]
   1a3b0:	6851      	ldr	r1, [r2, #4]
   1a3b2:	466b      	mov	r3, sp
   1a3b4:	c303      	stmia	r3!, {r0, r1}
   1a3b6:	e7e7      	b.n	1a388 <deferred_work+0x88>
   1a3b8:	20005b74 	.word	0x20005b74
   1a3bc:	0002e520 	.word	0x0002e520
   1a3c0:	0002e53c 	.word	0x0002e53c
   1a3c4:	0002e9c8 	.word	0x0002e9c8

0001a3c8 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1a3c8:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1a3ca:	490b      	ldr	r1, [pc, #44]	; (1a3f8 <bt_conn_init+0x30>)
   1a3cc:	480b      	ldr	r0, [pc, #44]	; (1a3fc <bt_conn_init+0x34>)
   1a3ce:	f013 f88f 	bl	2d4f0 <k_queue_append>
   1a3d2:	490b      	ldr	r1, [pc, #44]	; (1a400 <bt_conn_init+0x38>)
   1a3d4:	4809      	ldr	r0, [pc, #36]	; (1a3fc <bt_conn_init+0x34>)
   1a3d6:	f013 f88b 	bl	2d4f0 <k_queue_append>
   1a3da:	490a      	ldr	r1, [pc, #40]	; (1a404 <bt_conn_init+0x3c>)
   1a3dc:	4807      	ldr	r0, [pc, #28]	; (1a3fc <bt_conn_init+0x34>)
   1a3de:	f013 f887 	bl	2d4f0 <k_queue_append>
	}

	bt_att_init();
   1a3e2:	f001 fa1f 	bl	1b824 <bt_att_init>

	err = bt_smp_init();
   1a3e6:	f004 fda9 	bl	1ef3c <bt_smp_init>
	if (err) {
   1a3ea:	4604      	mov	r4, r0
   1a3ec:	b908      	cbnz	r0, 1a3f2 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   1a3ee:	f010 fd32 	bl	2ae56 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1a3f2:	4620      	mov	r0, r4
   1a3f4:	bd10      	pop	{r4, pc}
   1a3f6:	bf00      	nop
   1a3f8:	20005b78 	.word	0x20005b78
   1a3fc:	20000be8 	.word	0x20000be8
   1a400:	20005b88 	.word	0x20005b88
   1a404:	20005b98 	.word	0x20005b98

0001a408 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1a408:	b580      	push	{r7, lr}
   1a40a:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   1a40c:	b088      	sub	sp, #32
   1a40e:	466a      	mov	r2, sp
   1a410:	4b06      	ldr	r3, [pc, #24]	; (1a42c <l2cap_create_le_sig_pdu.part.0+0x24>)
   1a412:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a416:	2303      	movs	r3, #3
   1a418:	f842 3f10 	str.w	r3, [r2, #16]!
   1a41c:	4804      	ldr	r0, [pc, #16]	; (1a430 <l2cap_create_le_sig_pdu.part.0+0x28>)
   1a41e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a422:	f010 fc8e 	bl	2ad42 <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   1a426:	2000      	movs	r0, #0
   1a428:	46bd      	mov	sp, r7
   1a42a:	bd80      	pop	{r7, pc}
   1a42c:	00030cfe 	.word	0x00030cfe
   1a430:	0002e5d4 	.word	0x0002e5d4

0001a434 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1a434:	b580      	push	{r7, lr}
   1a436:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   1a438:	b088      	sub	sp, #32
   1a43a:	466a      	mov	r2, sp
   1a43c:	4b07      	ldr	r3, [pc, #28]	; (1a45c <l2cap_accept.part.0+0x28>)
   1a43e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a442:	2303      	movs	r3, #3
   1a444:	f842 3f10 	str.w	r3, [r2, #16]!
   1a448:	4805      	ldr	r0, [pc, #20]	; (1a460 <l2cap_accept.part.0+0x2c>)
   1a44a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a44e:	f010 fc78 	bl	2ad42 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   1a452:	f06f 000b 	mvn.w	r0, #11
   1a456:	46bd      	mov	sp, r7
   1a458:	bd80      	pop	{r7, pc}
   1a45a:	bf00      	nop
   1a45c:	00030d26 	.word	0x00030d26
   1a460:	0002e5d4 	.word	0x0002e5d4

0001a464 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   1a464:	4b04      	ldr	r3, [pc, #16]	; (1a478 <l2cap_accept+0x14>)
   1a466:	681a      	ldr	r2, [r3, #0]
   1a468:	b10a      	cbz	r2, 1a46e <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1a46a:	f7ff bfe3 	b.w	1a434 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   1a46e:	4803      	ldr	r0, [pc, #12]	; (1a47c <l2cap_accept+0x18>)
   1a470:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;
   1a472:	600b      	str	r3, [r1, #0]
}
   1a474:	4610      	mov	r0, r2
   1a476:	4770      	bx	lr
   1a478:	20005ba8 	.word	0x20005ba8
   1a47c:	0002ef00 	.word	0x0002ef00

0001a480 <bt_l2cap_connected>:
{
   1a480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1a482:	4d24      	ldr	r5, [pc, #144]	; (1a514 <bt_l2cap_connected+0x94>)
   1a484:	4f24      	ldr	r7, [pc, #144]	; (1a518 <bt_l2cap_connected+0x98>)
{
   1a486:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a488:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1a48a:	42bd      	cmp	r5, r7
   1a48c:	d301      	bcc.n	1a492 <bt_l2cap_connected+0x12>
}
   1a48e:	b003      	add	sp, #12
   1a490:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   1a492:	686b      	ldr	r3, [r5, #4]
   1a494:	a901      	add	r1, sp, #4
   1a496:	4620      	mov	r0, r4
   1a498:	4798      	blx	r3
   1a49a:	2800      	cmp	r0, #0
   1a49c:	db34      	blt.n	1a508 <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   1a49e:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1a4a0:	882a      	ldrh	r2, [r5, #0]
   1a4a2:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   1a4a4:	849a      	strh	r2, [r3, #36]	; 0x24
   1a4a6:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1a4aa:	68a8      	ldr	r0, [r5, #8]
   1a4ac:	f3bf 8f5b 	dmb	ish
   1a4b0:	e852 1f00 	ldrex	r1, [r2]
   1a4b4:	e842 6c00 	strex	ip, r6, [r2]
   1a4b8:	f1bc 0f00 	cmp.w	ip, #0
   1a4bc:	d1f8      	bne.n	1a4b0 <bt_l2cap_connected+0x30>
   1a4be:	f3bf 8f5b 	dmb	ish
	return list->tail;
   1a4c2:	6d61      	ldr	r1, [r4, #84]	; 0x54
	parent->next = child;
   1a4c4:	609e      	str	r6, [r3, #8]
	sys_slist_append(&conn->channels, &chan->node);
   1a4c6:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   1a4ca:	b9f9      	cbnz	r1, 1a50c <bt_l2cap_connected+0x8c>
	list->head = node;
   1a4cc:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->destroy = destroy;
   1a4d0:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   1a4d2:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   1a4d4:	601c      	str	r4, [r3, #0]
		if (chan->ops->connected) {
   1a4d6:	6843      	ldr	r3, [r0, #4]
   1a4d8:	681b      	ldr	r3, [r3, #0]
   1a4da:	b103      	cbz	r3, 1a4de <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
   1a4dc:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a4de:	9b01      	ldr	r3, [sp, #4]
   1a4e0:	f3bf 8f5b 	dmb	ish
   1a4e4:	3310      	adds	r3, #16
   1a4e6:	e853 2f00 	ldrex	r2, [r3]
   1a4ea:	f042 0201 	orr.w	r2, r2, #1
   1a4ee:	e843 2100 	strex	r1, r2, [r3]
   1a4f2:	2900      	cmp	r1, #0
   1a4f4:	d1f7      	bne.n	1a4e6 <bt_l2cap_connected+0x66>
   1a4f6:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1a4fa:	9801      	ldr	r0, [sp, #4]
   1a4fc:	6843      	ldr	r3, [r0, #4]
   1a4fe:	699b      	ldr	r3, [r3, #24]
   1a500:	b113      	cbz	r3, 1a508 <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
   1a502:	f100 0110 	add.w	r1, r0, #16
   1a506:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1a508:	350c      	adds	r5, #12
   1a50a:	e7be      	b.n	1a48a <bt_l2cap_connected+0xa>
	parent->next = child;
   1a50c:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1a50e:	6562      	str	r2, [r4, #84]	; 0x54
}
   1a510:	e7de      	b.n	1a4d0 <bt_l2cap_connected+0x50>
   1a512:	bf00      	nop
   1a514:	0002e4fc 	.word	0x0002e4fc
   1a518:	0002e520 	.word	0x0002e520

0001a51c <l2cap_recv>:
{
   1a51c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a51e:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   1a520:	898b      	ldrh	r3, [r1, #12]
   1a522:	2b03      	cmp	r3, #3
{
   1a524:	af02      	add	r7, sp, #8
   1a526:	4606      	mov	r6, r0
   1a528:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1a52a:	d80b      	bhi.n	1a544 <l2cap_recv+0x28>
		BT_ERR("Too small L2CAP signaling PDU");
   1a52c:	4b30      	ldr	r3, [pc, #192]	; (1a5f0 <l2cap_recv+0xd4>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   1a52e:	617b      	str	r3, [r7, #20]
   1a530:	4830      	ldr	r0, [pc, #192]	; (1a5f4 <l2cap_recv+0xd8>)
   1a532:	2302      	movs	r3, #2
   1a534:	f107 0210 	add.w	r2, r7, #16
   1a538:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a53c:	613b      	str	r3, [r7, #16]
   1a53e:	f010 fc00 	bl	2ad42 <z_log_msg_static_create.constprop.0>
		return 0;
   1a542:	e019      	b.n	1a578 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1a544:	2104      	movs	r1, #4
   1a546:	f105 0008 	add.w	r0, r5, #8
   1a54a:	f012 f9f2 	bl	2c932 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1a54e:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   1a550:	8841      	ldrh	r1, [r0, #2]
	if (buf->len != len) {
   1a552:	4299      	cmp	r1, r3
   1a554:	4604      	mov	r4, r0
   1a556:	d013      	beq.n	1a580 <l2cap_recv+0x64>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1a558:	466c      	mov	r4, sp
   1a55a:	b088      	sub	sp, #32
   1a55c:	aa02      	add	r2, sp, #8
   1a55e:	4826      	ldr	r0, [pc, #152]	; (1a5f8 <l2cap_recv+0xdc>)
   1a560:	61d1      	str	r1, [r2, #28]
   1a562:	e9c2 0305 	strd	r0, r3, [r2, #20]
   1a566:	2304      	movs	r3, #4
   1a568:	f842 3f10 	str.w	r3, [r2, #16]!
   1a56c:	4821      	ldr	r0, [pc, #132]	; (1a5f4 <l2cap_recv+0xd8>)
   1a56e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1a572:	f010 fbe6 	bl	2ad42 <z_log_msg_static_create.constprop.0>
   1a576:	46a5      	mov	sp, r4
}
   1a578:	2000      	movs	r0, #0
   1a57a:	371c      	adds	r7, #28
   1a57c:	46bd      	mov	sp, r7
   1a57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   1a580:	7843      	ldrb	r3, [r0, #1]
   1a582:	b90b      	cbnz	r3, 1a588 <l2cap_recv+0x6c>
		BT_ERR("Invalid ident value in L2CAP PDU");
   1a584:	4b1d      	ldr	r3, [pc, #116]	; (1a5fc <l2cap_recv+0xe0>)
   1a586:	e7d2      	b.n	1a52e <l2cap_recv+0x12>
	switch (hdr->code) {
   1a588:	7803      	ldrb	r3, [r0, #0]
   1a58a:	2b01      	cmp	r3, #1
   1a58c:	d0f4      	beq.n	1a578 <l2cap_recv+0x5c>
   1a58e:	2b13      	cmp	r3, #19
   1a590:	d103      	bne.n	1a59a <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   1a592:	2901      	cmp	r1, #1
   1a594:	d8f0      	bhi.n	1a578 <l2cap_recv+0x5c>
		BT_ERR("Too small LE conn param rsp");
   1a596:	4b1a      	ldr	r3, [pc, #104]	; (1a600 <l2cap_recv+0xe4>)
   1a598:	e7c9      	b.n	1a52e <l2cap_recv+0x12>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   1a59a:	466d      	mov	r5, sp
   1a59c:	b088      	sub	sp, #32
   1a59e:	aa02      	add	r2, sp, #8
   1a5a0:	4918      	ldr	r1, [pc, #96]	; (1a604 <l2cap_recv+0xe8>)
   1a5a2:	4814      	ldr	r0, [pc, #80]	; (1a5f4 <l2cap_recv+0xd8>)
	switch (hdr->code) {
   1a5a4:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   1a5a8:	2303      	movs	r3, #3
   1a5aa:	f842 3f10 	str.w	r3, [r2, #16]!
   1a5ae:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a5b2:	f010 fbc6 	bl	2ad42 <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1a5b6:	2202      	movs	r2, #2
   1a5b8:	7861      	ldrb	r1, [r4, #1]
   1a5ba:	46ad      	mov	sp, r5
   1a5bc:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1a5be:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1a5c0:	f010 fbc2 	bl	2ad48 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1a5c4:	4604      	mov	r4, r0
   1a5c6:	2800      	cmp	r0, #0
   1a5c8:	d0d6      	beq.n	1a578 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   1a5ca:	2102      	movs	r1, #2
   1a5cc:	3008      	adds	r0, #8
   1a5ce:	f012 f989 	bl	2c8e4 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1a5d2:	2300      	movs	r3, #0
   1a5d4:	7003      	strb	r3, [r0, #0]
   1a5d6:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1a5d8:	4622      	mov	r2, r4
   1a5da:	9300      	str	r3, [sp, #0]
   1a5dc:	2105      	movs	r1, #5
   1a5de:	4628      	mov	r0, r5
   1a5e0:	f010 fc0c 	bl	2adfc <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1a5e4:	2800      	cmp	r0, #0
   1a5e6:	d0c7      	beq.n	1a578 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   1a5e8:	4620      	mov	r0, r4
   1a5ea:	f004 ffc3 	bl	1f574 <net_buf_unref>
   1a5ee:	e7c3      	b.n	1a578 <l2cap_recv+0x5c>
   1a5f0:	00030d4d 	.word	0x00030d4d
   1a5f4:	0002e5d4 	.word	0x0002e5d4
   1a5f8:	00030d6b 	.word	0x00030d6b
   1a5fc:	00030d8c 	.word	0x00030d8c
   1a600:	00030dad 	.word	0x00030dad
   1a604:	00030dc9 	.word	0x00030dc9

0001a608 <bt_l2cap_recv>:
{
   1a608:	b5b0      	push	{r4, r5, r7, lr}
   1a60a:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   1a60c:	898b      	ldrh	r3, [r1, #12]
   1a60e:	2b03      	cmp	r3, #3
{
   1a610:	af00      	add	r7, sp, #0
   1a612:	4605      	mov	r5, r0
   1a614:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1a616:	d810      	bhi.n	1a63a <bt_l2cap_recv+0x32>
		BT_ERR("Too small L2CAP PDU received");
   1a618:	4b17      	ldr	r3, [pc, #92]	; (1a678 <bt_l2cap_recv+0x70>)
   1a61a:	617b      	str	r3, [r7, #20]
   1a61c:	4817      	ldr	r0, [pc, #92]	; (1a67c <bt_l2cap_recv+0x74>)
   1a61e:	2302      	movs	r3, #2
   1a620:	f107 0210 	add.w	r2, r7, #16
   1a624:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a628:	613b      	str	r3, [r7, #16]
   1a62a:	f010 fb8a 	bl	2ad42 <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   1a62e:	4620      	mov	r0, r4
   1a630:	f004 ffa0 	bl	1f574 <net_buf_unref>
}
   1a634:	3718      	adds	r7, #24
   1a636:	46bd      	mov	sp, r7
   1a638:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1a63a:	2104      	movs	r1, #4
   1a63c:	f104 0008 	add.w	r0, r4, #8
   1a640:	f012 f977 	bl	2c932 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1a644:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1a646:	4628      	mov	r0, r5
   1a648:	f010 fbfb 	bl	2ae42 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1a64c:	b978      	cbnz	r0, 1a66e <bt_l2cap_recv+0x66>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   1a64e:	466d      	mov	r5, sp
   1a650:	b088      	sub	sp, #32
   1a652:	466a      	mov	r2, sp
   1a654:	4b0a      	ldr	r3, [pc, #40]	; (1a680 <bt_l2cap_recv+0x78>)
   1a656:	4809      	ldr	r0, [pc, #36]	; (1a67c <bt_l2cap_recv+0x74>)
   1a658:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1a65c:	2303      	movs	r3, #3
   1a65e:	f842 3f10 	str.w	r3, [r2, #16]!
   1a662:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a666:	f010 fb6c 	bl	2ad42 <z_log_msg_static_create.constprop.0>
   1a66a:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   1a66c:	e7df      	b.n	1a62e <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   1a66e:	6843      	ldr	r3, [r0, #4]
   1a670:	4621      	mov	r1, r4
   1a672:	691b      	ldr	r3, [r3, #16]
   1a674:	4798      	blx	r3
   1a676:	e7da      	b.n	1a62e <bt_l2cap_recv+0x26>
   1a678:	00030de7 	.word	0x00030de7
   1a67c:	0002e5d4 	.word	0x0002e5d4
   1a680:	00030e04 	.word	0x00030e04

0001a684 <bt_l2cap_update_conn_param>:
{
   1a684:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a686:	460d      	mov	r5, r1
	ident++;
   1a688:	4916      	ldr	r1, [pc, #88]	; (1a6e4 <bt_l2cap_update_conn_param+0x60>)
   1a68a:	780b      	ldrb	r3, [r1, #0]
   1a68c:	3301      	adds	r3, #1
	if (!ident) {
   1a68e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   1a692:	bf08      	it	eq
   1a694:	2301      	moveq	r3, #1
   1a696:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1a698:	7809      	ldrb	r1, [r1, #0]
{
   1a69a:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1a69c:	2208      	movs	r2, #8
   1a69e:	2012      	movs	r0, #18
   1a6a0:	f010 fb52 	bl	2ad48 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1a6a4:	4604      	mov	r4, r0
   1a6a6:	b1d0      	cbz	r0, 1a6de <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   1a6a8:	2108      	movs	r1, #8
   1a6aa:	4408      	add	r0, r1
   1a6ac:	f012 f91a 	bl	2c8e4 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1a6b0:	882b      	ldrh	r3, [r5, #0]
   1a6b2:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1a6b4:	886b      	ldrh	r3, [r5, #2]
   1a6b6:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1a6b8:	88ab      	ldrh	r3, [r5, #4]
   1a6ba:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1a6bc:	88eb      	ldrh	r3, [r5, #6]
   1a6be:	80c3      	strh	r3, [r0, #6]
   1a6c0:	2300      	movs	r3, #0
   1a6c2:	9300      	str	r3, [sp, #0]
   1a6c4:	4622      	mov	r2, r4
   1a6c6:	2105      	movs	r1, #5
   1a6c8:	4630      	mov	r0, r6
   1a6ca:	f010 fb97 	bl	2adfc <bt_l2cap_send_cb>
	if (err) {
   1a6ce:	4605      	mov	r5, r0
   1a6d0:	b110      	cbz	r0, 1a6d8 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   1a6d2:	4620      	mov	r0, r4
   1a6d4:	f004 ff4e 	bl	1f574 <net_buf_unref>
}
   1a6d8:	4628      	mov	r0, r5
   1a6da:	b002      	add	sp, #8
   1a6dc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1a6de:	f06f 050b 	mvn.w	r5, #11
   1a6e2:	e7f9      	b.n	1a6d8 <bt_l2cap_update_conn_param+0x54>
   1a6e4:	20006c2e 	.word	0x20006c2e

0001a6e8 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1a6e8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1a6ea:	3804      	subs	r0, #4
   1a6ec:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1a6ee:	a901      	add	r1, sp, #4
   1a6f0:	4802      	ldr	r0, [pc, #8]	; (1a6fc <bt_att_released+0x14>)
   1a6f2:	f012 fe35 	bl	2d360 <k_mem_slab_free>
}
   1a6f6:	b003      	add	sp, #12
   1a6f8:	f85d fb04 	ldr.w	pc, [sp], #4
   1a6fc:	20000aa0 	.word	0x20000aa0

0001a700 <tx_meta_data_free>:
{
   1a700:	b510      	push	{r4, lr}
__ssp_bos_icheck3(memset, void *, int)
   1a702:	2100      	movs	r1, #0
   1a704:	4604      	mov	r4, r0
   1a706:	2214      	movs	r2, #20
   1a708:	f013 fb87 	bl	2de1a <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   1a70c:	4621      	mov	r1, r4
   1a70e:	4802      	ldr	r0, [pc, #8]	; (1a718 <tx_meta_data_free+0x18>)
}
   1a710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   1a714:	f012 beec 	b.w	2d4f0 <k_queue_append>
   1a718:	20000bd0 	.word	0x20000bd0

0001a71c <find_type_cb>:
{
   1a71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a720:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   1a722:	f8d2 a000 	ldr.w	sl, [r2]
{
   1a726:	af02      	add	r7, sp, #8
   1a728:	4606      	mov	r6, r0
   1a72a:	4688      	mov	r8, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a72c:	2500      	movs	r5, #0
   1a72e:	f642 0301 	movw	r3, #10241	; 0x2801
   1a732:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1a734:	f8da 9004 	ldr.w	r9, [sl, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a738:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1a73c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   1a740:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a742:	85fb      	strh	r3, [r7, #46]	; 0x2e
   1a744:	f00f ff7a 	bl	2a63c <bt_uuid_cmp>
   1a748:	2800      	cmp	r0, #0
   1a74a:	d071      	beq.n	1a830 <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1a74c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a750:	6830      	ldr	r0, [r6, #0]
   1a752:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1a756:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1a75a:	85fb      	strh	r3, [r7, #46]	; 0x2e
   1a75c:	f00f ff6e 	bl	2a63c <bt_uuid_cmp>
   1a760:	b140      	cbz	r0, 1a774 <find_type_cb+0x58>
		if (data->group &&
   1a762:	68a3      	ldr	r3, [r4, #8]
   1a764:	b123      	cbz	r3, 1a770 <find_type_cb+0x54>
   1a766:	885a      	ldrh	r2, [r3, #2]
   1a768:	4542      	cmp	r2, r8
   1a76a:	d201      	bcs.n	1a770 <find_type_cb+0x54>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1a76c:	f8a3 8002 	strh.w	r8, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1a770:	2001      	movs	r0, #1
   1a772:	e009      	b.n	1a788 <find_type_cb+0x6c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1a774:	6861      	ldr	r1, [r4, #4]
   1a776:	4608      	mov	r0, r1
   1a778:	f010 fb78 	bl	2ae6c <net_buf_frags_len>
   1a77c:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   1a780:	1a1b      	subs	r3, r3, r0
   1a782:	2b03      	cmp	r3, #3
   1a784:	d804      	bhi.n	1a790 <find_type_cb+0x74>
		return BT_GATT_ITER_STOP;
   1a786:	2000      	movs	r0, #0
}
   1a788:	3744      	adds	r7, #68	; 0x44
   1a78a:	46bd      	mov	sp, r7
   1a78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1a790:	4608      	mov	r0, r1
   1a792:	f012 f885 	bl	2c8a0 <net_buf_frag_last>
   1a796:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1a798:	6860      	ldr	r0, [r4, #4]
   1a79a:	f010 fb67 	bl	2ae6c <net_buf_frags_len>
   1a79e:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1a7a2:	f105 0308 	add.w	r3, r5, #8
   1a7a6:	ebab 0b00 	sub.w	fp, fp, r0
   1a7aa:	4618      	mov	r0, r3
   1a7ac:	607b      	str	r3, [r7, #4]
   1a7ae:	f012 f8dc 	bl	2c96a <net_buf_simple_tailroom>
   1a7b2:	4558      	cmp	r0, fp
   1a7b4:	687b      	ldr	r3, [r7, #4]
   1a7b6:	d93e      	bls.n	1a836 <find_type_cb+0x11a>
   1a7b8:	6860      	ldr	r0, [r4, #4]
   1a7ba:	f010 fb57 	bl	2ae6c <net_buf_frags_len>
   1a7be:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   1a7c2:	1a18      	subs	r0, r3, r0
	if (!len) {
   1a7c4:	b970      	cbnz	r0, 1a7e4 <find_type_cb+0xc8>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1a7c6:	6863      	ldr	r3, [r4, #4]
   1a7c8:	7998      	ldrb	r0, [r3, #6]
   1a7ca:	f004 fe0f 	bl	1f3ec <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1a7ce:	2200      	movs	r2, #0
   1a7d0:	2300      	movs	r3, #0
   1a7d2:	f011 ffe2 	bl	2c79a <net_buf_alloc_fixed>
		if (!frag) {
   1a7d6:	4605      	mov	r5, r0
   1a7d8:	2800      	cmp	r0, #0
   1a7da:	d0d4      	beq.n	1a786 <find_type_cb+0x6a>
		net_buf_frag_add(data->buf, frag);
   1a7dc:	4601      	mov	r1, r0
   1a7de:	6860      	ldr	r0, [r4, #4]
   1a7e0:	f012 f86f 	bl	2c8c2 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1a7e4:	2300      	movs	r3, #0
   1a7e6:	9300      	str	r3, [sp, #0]
   1a7e8:	f8d6 a004 	ldr.w	sl, [r6, #4]
   1a7ec:	4631      	mov	r1, r6
   1a7ee:	2310      	movs	r3, #16
   1a7f0:	f107 0208 	add.w	r2, r7, #8
   1a7f4:	4648      	mov	r0, r9
   1a7f6:	47d0      	blx	sl
	if (read < 0) {
   1a7f8:	1e06      	subs	r6, r0, #0
   1a7fa:	db19      	blt.n	1a830 <find_type_cb+0x114>
	if (read != data->value_len) {
   1a7fc:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1a7fe:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1a800:	4296      	cmp	r6, r2
   1a802:	d040      	beq.n	1a886 <find_type_cb+0x16a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1a804:	4601      	mov	r1, r0
   1a806:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1a80a:	f00f ff45 	bl	2a698 <bt_uuid_create>
   1a80e:	b9b0      	cbnz	r0, 1a83e <find_type_cb+0x122>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1a810:	466d      	mov	r5, sp
   1a812:	b088      	sub	sp, #32
   1a814:	7c23      	ldrb	r3, [r4, #16]
   1a816:	aa02      	add	r2, sp, #8
   1a818:	491e      	ldr	r1, [pc, #120]	; (1a894 <find_type_cb+0x178>)
   1a81a:	e9c2 1305 	strd	r1, r3, [r2, #20]
			BT_WARN("Unable to create UUID: size %d", read);
   1a81e:	2303      	movs	r3, #3
   1a820:	f842 3f10 	str.w	r3, [r2, #16]!
   1a824:	481c      	ldr	r0, [pc, #112]	; (1a898 <find_type_cb+0x17c>)
   1a826:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a82a:	f010 fc52 	bl	2b0d2 <z_log_msg_static_create.constprop.0>
   1a82e:	46ad      	mov	sp, r5
	data->group = NULL;
   1a830:	2300      	movs	r3, #0
   1a832:	60a3      	str	r3, [r4, #8]
   1a834:	e79c      	b.n	1a770 <find_type_cb+0x54>
	return net_buf_simple_tailroom(&buf->b);
   1a836:	4618      	mov	r0, r3
   1a838:	f012 f897 	bl	2c96a <net_buf_simple_tailroom>
   1a83c:	e7c2      	b.n	1a7c4 <find_type_cb+0xa8>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1a83e:	b2f2      	uxtb	r2, r6
   1a840:	f107 0108 	add.w	r1, r7, #8
   1a844:	f107 0018 	add.w	r0, r7, #24
   1a848:	f00f ff26 	bl	2a698 <bt_uuid_create>
   1a84c:	b930      	cbnz	r0, 1a85c <find_type_cb+0x140>
			BT_WARN("Unable to create UUID: size %d", read);
   1a84e:	466d      	mov	r5, sp
   1a850:	b088      	sub	sp, #32
   1a852:	aa02      	add	r2, sp, #8
   1a854:	4b11      	ldr	r3, [pc, #68]	; (1a89c <find_type_cb+0x180>)
   1a856:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1a85a:	e7e0      	b.n	1a81e <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1a85c:	f107 0118 	add.w	r1, r7, #24
   1a860:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1a864:	f00f feea 	bl	2a63c <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1a868:	2800      	cmp	r0, #0
   1a86a:	d1e1      	bne.n	1a830 <find_type_cb+0x114>
	data->err = 0x00;
   1a86c:	2300      	movs	r3, #0
   1a86e:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1a870:	2104      	movs	r1, #4
   1a872:	f105 0008 	add.w	r0, r5, #8
   1a876:	f012 f835 	bl	2c8e4 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1a87a:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1a87c:	f8a0 8000 	strh.w	r8, [r0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1a880:	f8a0 8002 	strh.w	r8, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1a884:	e774      	b.n	1a770 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   1a886:	4632      	mov	r2, r6
   1a888:	f107 0108 	add.w	r1, r7, #8
   1a88c:	f013 fa94 	bl	2ddb8 <memcmp>
   1a890:	e7ea      	b.n	1a868 <find_type_cb+0x14c>
   1a892:	bf00      	nop
   1a894:	00030e40 	.word	0x00030e40
   1a898:	0002e584 	.word	0x0002e584
   1a89c:	00030e5f 	.word	0x00030e5f

0001a8a0 <att_get>:
{
   1a8a0:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1a8a2:	7b43      	ldrb	r3, [r0, #13]
   1a8a4:	2b07      	cmp	r3, #7
{
   1a8a6:	b086      	sub	sp, #24
	if (conn->state != BT_CONN_CONNECTED) {
   1a8a8:	d00d      	beq.n	1a8c6 <att_get+0x26>
		BT_WARN("Not connected");
   1a8aa:	4b10      	ldr	r3, [pc, #64]	; (1a8ec <att_get+0x4c>)
   1a8ac:	9305      	str	r3, [sp, #20]
   1a8ae:	4810      	ldr	r0, [pc, #64]	; (1a8f0 <att_get+0x50>)
   1a8b0:	2302      	movs	r3, #2
   1a8b2:	aa04      	add	r2, sp, #16
   1a8b4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return NULL;
   1a8b8:	2400      	movs	r4, #0
		BT_WARN("Not connected");
   1a8ba:	9304      	str	r3, [sp, #16]
   1a8bc:	f010 fc09 	bl	2b0d2 <z_log_msg_static_create.constprop.0>
}
   1a8c0:	4620      	mov	r0, r4
   1a8c2:	b006      	add	sp, #24
   1a8c4:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1a8c6:	2104      	movs	r1, #4
   1a8c8:	f010 fabb 	bl	2ae42 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1a8cc:	4604      	mov	r4, r0
   1a8ce:	b950      	cbnz	r0, 1a8e6 <att_get+0x46>
		BT_ERR("Unable to find ATT channel");
   1a8d0:	4b08      	ldr	r3, [pc, #32]	; (1a8f4 <att_get+0x54>)
   1a8d2:	9305      	str	r3, [sp, #20]
   1a8d4:	4806      	ldr	r0, [pc, #24]	; (1a8f0 <att_get+0x50>)
   1a8d6:	2302      	movs	r3, #2
   1a8d8:	aa04      	add	r2, sp, #16
   1a8da:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a8de:	9304      	str	r3, [sp, #16]
   1a8e0:	f010 fbf7 	bl	2b0d2 <z_log_msg_static_create.constprop.0>
		return NULL;
   1a8e4:	e7ec      	b.n	1a8c0 <att_get+0x20>
	return att_chan->att;
   1a8e6:	f850 4c04 	ldr.w	r4, [r0, #-4]
   1a8ea:	e7e9      	b.n	1a8c0 <att_get+0x20>
   1a8ec:	00030e7e 	.word	0x00030e7e
   1a8f0:	0002e584 	.word	0x0002e584
   1a8f4:	00030e8c 	.word	0x00030e8c

0001a8f8 <bt_att_connected>:
{
   1a8f8:	b510      	push	{r4, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1a8fa:	1f02      	subs	r2, r0, #4
{
   1a8fc:	4604      	mov	r4, r0
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   1a8fe:	308c      	adds	r0, #140	; 0x8c
   1a900:	f3bf 8f5b 	dmb	ish
   1a904:	e850 3f00 	ldrex	r3, [r0]
   1a908:	f043 0304 	orr.w	r3, r3, #4
   1a90c:	e840 3100 	strex	r1, r3, [r0]
   1a910:	2900      	cmp	r1, #0
   1a912:	d1f7      	bne.n	1a904 <bt_att_connected+0xc>
   1a914:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   1a918:	2103      	movs	r1, #3
   1a91a:	f010 fb04 	bl	2af26 <atomic_test_bit>
   1a91e:	b910      	cbnz	r0, 1a926 <bt_att_connected+0x2e>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1a920:	2317      	movs	r3, #23
   1a922:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1a924:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1a926:	4610      	mov	r0, r2
   1a928:	f010 fb11 	bl	2af4e <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1a92c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   1a930:	4903      	ldr	r1, [pc, #12]	; (1a940 <bt_att_connected+0x48>)
   1a932:	f012 fef2 	bl	2d71a <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1a936:	6820      	ldr	r0, [r4, #0]
}
   1a938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   1a93c:	f002 ba9c 	b.w	1ce78 <bt_gatt_connected>
   1a940:	0001ba31 	.word	0x0001ba31

0001a944 <chan_send>:
{
   1a944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	hdr = (void *)buf->data;
   1a948:	688b      	ldr	r3, [r1, #8]
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1a94a:	f8d1 9014 	ldr.w	r9, [r1, #20]
{
   1a94e:	b089      	sub	sp, #36	; 0x24
   1a950:	4606      	mov	r6, r0
   1a952:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1a954:	3090      	adds	r0, #144	; 0x90
   1a956:	2102      	movs	r1, #2
   1a958:	f010 fae5 	bl	2af26 <atomic_test_bit>
   1a95c:	2800      	cmp	r0, #0
   1a95e:	d043      	beq.n	1a9e8 <chan_send+0xa4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1a960:	781b      	ldrb	r3, [r3, #0]
   1a962:	2bd2      	cmp	r3, #210	; 0xd2
   1a964:	d11a      	bne.n	1a99c <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   1a966:	6833      	ldr	r3, [r6, #0]
   1a968:	4621      	mov	r1, r4
   1a96a:	6818      	ldr	r0, [r3, #0]
   1a96c:	f003 fc82 	bl	1e274 <bt_smp_sign>
		if (err) {
   1a970:	4605      	mov	r5, r0
   1a972:	b198      	cbz	r0, 1a99c <chan_send+0x58>
			BT_ERR("Error signing data");
   1a974:	4b1e      	ldr	r3, [pc, #120]	; (1a9f0 <chan_send+0xac>)
   1a976:	481f      	ldr	r0, [pc, #124]	; (1a9f4 <chan_send+0xb0>)
   1a978:	9307      	str	r3, [sp, #28]
   1a97a:	aa06      	add	r2, sp, #24
   1a97c:	2302      	movs	r3, #2
   1a97e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a982:	9306      	str	r3, [sp, #24]
   1a984:	f010 fba5 	bl	2b0d2 <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   1a988:	6960      	ldr	r0, [r4, #20]
   1a98a:	f7ff feb9 	bl	1a700 <tx_meta_data_free>
			net_buf_unref(buf);
   1a98e:	4620      	mov	r0, r4
   1a990:	f004 fdf0 	bl	1f574 <net_buf_unref>
}
   1a994:	4628      	mov	r0, r5
   1a996:	b009      	add	sp, #36	; 0x24
   1a998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   1a99c:	f104 0008 	add.w	r0, r4, #8
   1a9a0:	f011 ffdf 	bl	2c962 <net_buf_simple_headroom>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1a9a4:	6833      	ldr	r3, [r6, #0]
	state->len = buf->len;
   1a9a6:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   1a9aa:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1a9ac:	68a3      	ldr	r3, [r4, #8]
	data->att_chan = chan;
   1a9ae:	f8c9 6000 	str.w	r6, [r9]
	state->offset = net_buf_simple_headroom(buf);
   1a9b2:	4607      	mov	r7, r0
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1a9b4:	7818      	ldrb	r0, [r3, #0]
   1a9b6:	f010 fa71 	bl	2ae9c <att_op_get_type>
	switch (op_type) {
   1a9ba:	2805      	cmp	r0, #5
   1a9bc:	bf96      	itet	ls
   1a9be:	4b0e      	ldrls	r3, [pc, #56]	; (1a9f8 <chan_send+0xb4>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1a9c0:	4b0e      	ldrhi	r3, [pc, #56]	; (1a9fc <chan_send+0xb8>)
   1a9c2:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1a9c6:	f8cd 9000 	str.w	r9, [sp]
   1a9ca:	4628      	mov	r0, r5
   1a9cc:	4622      	mov	r2, r4
   1a9ce:	2104      	movs	r1, #4
   1a9d0:	f010 fa14 	bl	2adfc <bt_l2cap_send_cb>
	if (err) {
   1a9d4:	4605      	mov	r5, r0
   1a9d6:	2800      	cmp	r0, #0
   1a9d8:	d0dc      	beq.n	1a994 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   1a9da:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1a9dc:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1a9e0:	fa10 f787 	uxtah	r7, r0, r7
   1a9e4:	60a7      	str	r7, [r4, #8]
}
   1a9e6:	e7d5      	b.n	1a994 <chan_send+0x50>
		return -EINVAL;
   1a9e8:	f06f 0515 	mvn.w	r5, #21
   1a9ec:	e7d2      	b.n	1a994 <chan_send+0x50>
   1a9ee:	bf00      	nop
   1a9f0:	00030ea7 	.word	0x00030ea7
   1a9f4:	0002e584 	.word	0x0002e584
   1a9f8:	0002ef24 	.word	0x0002ef24
   1a9fc:	0002b4d3 	.word	0x0002b4d3

0001aa00 <read_group_cb>:
{
   1aa00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1aa04:	4605      	mov	r5, r0
   1aa06:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1aa08:	f04f 0800 	mov.w	r8, #0
   1aa0c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1aa10:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1aa12:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1aa14:	f88d 8008 	strb.w	r8, [sp, #8]
   1aa18:	a902      	add	r1, sp, #8
{
   1aa1a:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1aa1c:	f8ad 300a 	strh.w	r3, [sp, #10]
   1aa20:	f00f fe0c 	bl	2a63c <bt_uuid_cmp>
   1aa24:	b1a0      	cbz	r0, 1aa50 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1aa26:	f642 0301 	movw	r3, #10241	; 0x2801
   1aa2a:	6828      	ldr	r0, [r5, #0]
   1aa2c:	f88d 800c 	strb.w	r8, [sp, #12]
   1aa30:	a903      	add	r1, sp, #12
   1aa32:	f8ad 300e 	strh.w	r3, [sp, #14]
   1aa36:	f00f fe01 	bl	2a63c <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1aa3a:	b148      	cbz	r0, 1aa50 <read_group_cb+0x50>
		if (data->group &&
   1aa3c:	6923      	ldr	r3, [r4, #16]
   1aa3e:	b11b      	cbz	r3, 1aa48 <read_group_cb+0x48>
   1aa40:	885a      	ldrh	r2, [r3, #2]
   1aa42:	42b2      	cmp	r2, r6
   1aa44:	d200      	bcs.n	1aa48 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1aa46:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1aa48:	2001      	movs	r0, #1
}
   1aa4a:	b004      	add	sp, #16
   1aa4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1aa50:	6861      	ldr	r1, [r4, #4]
   1aa52:	6828      	ldr	r0, [r5, #0]
   1aa54:	f00f fdf2 	bl	2a63c <bt_uuid_cmp>
   1aa58:	b110      	cbz	r0, 1aa60 <read_group_cb+0x60>
		data->group = NULL;
   1aa5a:	2300      	movs	r3, #0
   1aa5c:	6123      	str	r3, [r4, #16]
   1aa5e:	e7f3      	b.n	1aa48 <read_group_cb+0x48>
	if (data->rsp->len &&
   1aa60:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1aa62:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   1aa64:	781a      	ldrb	r2, [r3, #0]
   1aa66:	b132      	cbz	r2, 1aa76 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1aa68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1aa6a:	8981      	ldrh	r1, [r0, #12]
   1aa6c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1aa6e:	4293      	cmp	r3, r2
   1aa70:	da01      	bge.n	1aa76 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   1aa72:	2000      	movs	r0, #0
   1aa74:	e7e9      	b.n	1aa4a <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1aa76:	2104      	movs	r1, #4
   1aa78:	3008      	adds	r0, #8
   1aa7a:	f011 ff33 	bl	2c8e4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1aa7e:	4b09      	ldr	r3, [pc, #36]	; (1aaa4 <read_group_cb+0xa4>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1aa80:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1aa82:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1aa84:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1aa86:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1aa88:	4629      	mov	r1, r5
   1aa8a:	9300      	str	r3, [sp, #0]
   1aa8c:	9401      	str	r4, [sp, #4]
   1aa8e:	2300      	movs	r3, #0
   1aa90:	4638      	mov	r0, r7
   1aa92:	f010 fb8f 	bl	2b1b4 <att_chan_read>
	if (read < 0) {
   1aa96:	2800      	cmp	r0, #0
   1aa98:	dbeb      	blt.n	1aa72 <read_group_cb+0x72>
	if (!data->group) {
   1aa9a:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1aa9c:	3800      	subs	r0, #0
   1aa9e:	bf18      	it	ne
   1aaa0:	2001      	movne	r0, #1
   1aaa2:	e7d2      	b.n	1aa4a <read_group_cb+0x4a>
   1aaa4:	0002afaf 	.word	0x0002afaf

0001aaa8 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1aaa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aaac:	b082      	sub	sp, #8
   1aaae:	af00      	add	r7, sp, #0
   1aab0:	4680      	mov	r8, r0
   1aab2:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1aab4:	483a      	ldr	r0, [pc, #232]	; (1aba0 <bt_att_accept+0xf8>)
   1aab6:	2200      	movs	r2, #0
   1aab8:	2300      	movs	r3, #0
   1aaba:	4639      	mov	r1, r7
   1aabc:	f008 fb30 	bl	23120 <k_mem_slab_alloc>
   1aac0:	4605      	mov	r5, r0
   1aac2:	b188      	cbz	r0, 1aae8 <bt_att_accept+0x40>
		BT_ERR("No available ATT context for conn %p", conn);
   1aac4:	466c      	mov	r4, sp
   1aac6:	b088      	sub	sp, #32
   1aac8:	466a      	mov	r2, sp
   1aaca:	4b36      	ldr	r3, [pc, #216]	; (1aba4 <bt_att_accept+0xfc>)
   1aacc:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1aad0:	2303      	movs	r3, #3
   1aad2:	f842 3f10 	str.w	r3, [r2, #16]!
   1aad6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		BT_WARN("No available ATT channel for conn %p", att->conn);
   1aada:	4833      	ldr	r0, [pc, #204]	; (1aba8 <bt_att_accept+0x100>)
   1aadc:	f010 faf9 	bl	2b0d2 <z_log_msg_static_create.constprop.0>
   1aae0:	46a5      	mov	sp, r4
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   1aae2:	f06f 050b 	mvn.w	r5, #11
   1aae6:	e055      	b.n	1ab94 <bt_att_accept+0xec>
	return z_impl_z_current_get();
   1aae8:	f009 fa40 	bl	23f6c <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   1aaec:	4b2f      	ldr	r3, [pc, #188]	; (1abac <bt_att_accept+0x104>)
   1aaee:	4629      	mov	r1, r5
   1aaf0:	6018      	str	r0, [r3, #0]
   1aaf2:	2234      	movs	r2, #52	; 0x34
   1aaf4:	6838      	ldr	r0, [r7, #0]
   1aaf6:	f013 f990 	bl	2de1a <memset>
	att->conn = conn;
   1aafa:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1aafc:	482c      	ldr	r0, [pc, #176]	; (1abb0 <bt_att_accept+0x108>)
	list->tail = NULL;
   1aafe:	60a5      	str	r5, [r4, #8]
	list->head = NULL;
   1ab00:	e9c4 8500 	strd	r8, r5, [r4]
	list->tail = NULL;
   1ab04:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
   1ab08:	2200      	movs	r2, #0
   1ab0a:	2300      	movs	r3, #0
   1ab0c:	1d39      	adds	r1, r7, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1ab0e:	607d      	str	r5, [r7, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1ab10:	f008 fb06 	bl	23120 <k_mem_slab_alloc>
   1ab14:	4605      	mov	r5, r0
   1ab16:	b160      	cbz	r0, 1ab32 <bt_att_accept+0x8a>
		BT_WARN("No available ATT channel for conn %p", att->conn);
   1ab18:	6823      	ldr	r3, [r4, #0]
   1ab1a:	466c      	mov	r4, sp
   1ab1c:	b088      	sub	sp, #32
   1ab1e:	466a      	mov	r2, sp
   1ab20:	4924      	ldr	r1, [pc, #144]	; (1abb4 <bt_att_accept+0x10c>)
   1ab22:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1ab26:	2303      	movs	r3, #3
   1ab28:	f842 3f10 	str.w	r3, [r2, #16]!
   1ab2c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1ab30:	e7d3      	b.n	1aada <bt_att_accept+0x32>
   1ab32:	4601      	mov	r1, r0
   1ab34:	22e8      	movs	r2, #232	; 0xe8
   1ab36:	6878      	ldr	r0, [r7, #4]
   1ab38:	f013 f96f 	bl	2de1a <memset>
	chan->chan.chan.ops = &ops;
   1ab3c:	6878      	ldr	r0, [r7, #4]
   1ab3e:	4b1e      	ldr	r3, [pc, #120]	; (1abb8 <bt_att_accept+0x110>)
   1ab40:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   1ab42:	3098      	adds	r0, #152	; 0x98
   1ab44:	f012 fcc8 	bl	2d4d8 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ab48:	687b      	ldr	r3, [r7, #4]
   1ab4a:	f3bf 8f5b 	dmb	ish
   1ab4e:	3390      	adds	r3, #144	; 0x90
   1ab50:	e853 2f00 	ldrex	r2, [r3]
   1ab54:	e843 5100 	strex	r1, r5, [r3]
   1ab58:	2900      	cmp	r1, #0
   1ab5a:	d1f9      	bne.n	1ab50 <bt_att_accept+0xa8>
   1ab5c:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1ab60:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   1ab64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	chan->att = att;
   1ab66:	f8c8 4000 	str.w	r4, [r8]
	if (sys_slist_is_empty(&att->chans)) {
   1ab6a:	b92b      	cbnz	r3, 1ab78 <bt_att_accept+0xd0>
   1ab6c:	f104 000c 	add.w	r0, r4, #12
   1ab70:	f012 fcb2 	bl	2d4d8 <z_impl_k_queue_init>
   1ab74:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	parent->next = child;
   1ab78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1ab7a:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
Z_GENLIST_PREPEND(slist, snode)
   1ab7e:	6b22      	ldr	r2, [r4, #48]	; 0x30
	sys_slist_prepend(&att->chans, &chan->node);
   1ab80:	f108 03e0 	add.w	r3, r8, #224	; 0xe0
	list->head = node;
   1ab84:	62e3      	str	r3, [r4, #44]	; 0x2c
Z_GENLIST_PREPEND(slist, snode)
   1ab86:	b902      	cbnz	r2, 1ab8a <bt_att_accept+0xe2>
	list->tail = node;
   1ab88:	6323      	str	r3, [r4, #48]	; 0x30
	return chan;
   1ab8a:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   1ab8c:	2b00      	cmp	r3, #0
   1ab8e:	d0a8      	beq.n	1aae2 <bt_att_accept+0x3a>
	}

	*ch = &chan->chan.chan;
   1ab90:	3304      	adds	r3, #4
   1ab92:	6033      	str	r3, [r6, #0]

	return 0;
}
   1ab94:	4628      	mov	r0, r5
   1ab96:	3708      	adds	r7, #8
   1ab98:	46bd      	mov	sp, r7
   1ab9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ab9e:	bf00      	nop
   1aba0:	20000a84 	.word	0x20000a84
   1aba4:	00030eba 	.word	0x00030eba
   1aba8:	0002e584 	.word	0x0002e584
   1abac:	20005c34 	.word	0x20005c34
   1abb0:	20000aa0 	.word	0x20000aa0
   1abb4:	00030edf 	.word	0x00030edf
   1abb8:	200006f8 	.word	0x200006f8

0001abbc <read_type_cb>:
{
   1abbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1abc0:	f8d2 8000 	ldr.w	r8, [r2]
{
   1abc4:	4606      	mov	r6, r0
   1abc6:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1abc8:	6800      	ldr	r0, [r0, #0]
   1abca:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   1abcc:	f8d8 5004 	ldr.w	r5, [r8, #4]
{
   1abd0:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1abd2:	f00f fd33 	bl	2a63c <bt_uuid_cmp>
   1abd6:	4607      	mov	r7, r0
   1abd8:	2800      	cmp	r0, #0
   1abda:	d13e      	bne.n	1ac5a <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1abdc:	4628      	mov	r0, r5
   1abde:	2295      	movs	r2, #149	; 0x95
   1abe0:	4631      	mov	r1, r6
   1abe2:	f011 f896 	bl	2bd12 <bt_gatt_check_perm>
   1abe6:	4605      	mov	r5, r0
   1abe8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1abea:	b148      	cbz	r0, 1ac00 <read_type_cb+0x44>
		if (data->rsp->len) {
   1abec:	68e3      	ldr	r3, [r4, #12]
   1abee:	781b      	ldrb	r3, [r3, #0]
   1abf0:	b923      	cbnz	r3, 1abfc <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   1abf2:	2500      	movs	r5, #0
}
   1abf4:	4628      	mov	r0, r5
   1abf6:	b003      	add	sp, #12
   1abf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   1abfc:	7527      	strb	r7, [r4, #20]
   1abfe:	e7f8      	b.n	1abf2 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1ac00:	68a0      	ldr	r0, [r4, #8]
   1ac02:	f011 fe4d 	bl	2c8a0 <net_buf_frag_last>
   1ac06:	2102      	movs	r1, #2
   1ac08:	3008      	adds	r0, #8
   1ac0a:	f011 fe6b 	bl	2c8e4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1ac0e:	4b14      	ldr	r3, [pc, #80]	; (1ac60 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1ac10:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1ac12:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   1ac14:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1ac18:	4631      	mov	r1, r6
   1ac1a:	9300      	str	r3, [sp, #0]
   1ac1c:	9401      	str	r4, [sp, #4]
   1ac1e:	462b      	mov	r3, r5
   1ac20:	4640      	mov	r0, r8
   1ac22:	f010 fac7 	bl	2b1b4 <att_chan_read>
	if (read < 0) {
   1ac26:	2800      	cmp	r0, #0
   1ac28:	da07      	bge.n	1ac3a <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1ac2a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1ac2e:	bf26      	itte	cs
   1ac30:	4240      	negcs	r0, r0
   1ac32:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1ac34:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1ac36:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1ac38:	e7dc      	b.n	1abf4 <read_type_cb+0x38>
	if (!data->item) {
   1ac3a:	6923      	ldr	r3, [r4, #16]
   1ac3c:	2b00      	cmp	r3, #0
   1ac3e:	d0d8      	beq.n	1abf2 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1ac40:	68a0      	ldr	r0, [r4, #8]
   1ac42:	f010 f913 	bl	2ae6c <net_buf_frags_len>
   1ac46:	f8b8 502a 	ldrh.w	r5, [r8, #42]	; 0x2a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1ac4a:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1ac4c:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1ac4e:	7818      	ldrb	r0, [r3, #0]
   1ac50:	4285      	cmp	r5, r0
   1ac52:	bf94      	ite	ls
   1ac54:	2500      	movls	r5, #0
   1ac56:	2501      	movhi	r5, #1
   1ac58:	e7cc      	b.n	1abf4 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1ac5a:	2501      	movs	r5, #1
   1ac5c:	e7ca      	b.n	1abf4 <read_type_cb+0x38>
   1ac5e:	bf00      	nop
   1ac60:	0002ae7d 	.word	0x0002ae7d

0001ac64 <prep_write_cb>:
{
   1ac64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ac68:	4614      	mov	r4, r2
   1ac6a:	4606      	mov	r6, r0
   1ac6c:	460f      	mov	r7, r1
	data->err = bt_gatt_check_perm(data->conn, attr,
   1ac6e:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1ac72:	4601      	mov	r1, r0
   1ac74:	6820      	ldr	r0, [r4, #0]
   1ac76:	f011 f84c 	bl	2bd12 <bt_gatt_check_perm>
   1ac7a:	4605      	mov	r5, r0
   1ac7c:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   1ac7e:	2800      	cmp	r0, #0
   1ac80:	d12e      	bne.n	1ace0 <prep_write_cb+0x7c>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
   1ac82:	8a73      	ldrh	r3, [r6, #18]
   1ac84:	065b      	lsls	r3, r3, #25
   1ac86:	d516      	bpl.n	1acb6 <prep_write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
   1ac88:	2301      	movs	r3, #1
   1ac8a:	9301      	str	r3, [sp, #4]
   1ac8c:	89e3      	ldrh	r3, [r4, #14]
   1ac8e:	9300      	str	r3, [sp, #0]
   1ac90:	f8d6 8008 	ldr.w	r8, [r6, #8]
   1ac94:	89a3      	ldrh	r3, [r4, #12]
   1ac96:	68a2      	ldr	r2, [r4, #8]
   1ac98:	6820      	ldr	r0, [r4, #0]
   1ac9a:	4631      	mov	r1, r6
   1ac9c:	47c0      	blx	r8
	if (write != 0) {
   1ac9e:	b150      	cbz	r0, 1acb6 <prep_write_cb+0x52>
	if (err < 0 && err >= -0xff) {
   1aca0:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1aca4:	bf26      	itte	cs
   1aca6:	4243      	negcs	r3, r0
   1aca8:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1acaa:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
   1acac:	7423      	strb	r3, [r4, #16]
}
   1acae:	4628      	mov	r0, r5
   1acb0:	b002      	add	sp, #8
   1acb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
   1acb6:	480b      	ldr	r0, [pc, #44]	; (1ace4 <prep_write_cb+0x80>)
   1acb8:	2200      	movs	r2, #0
   1acba:	2300      	movs	r3, #0
   1acbc:	f011 fd6d 	bl	2c79a <net_buf_alloc_fixed>
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
   1acc0:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
   1acc2:	b908      	cbnz	r0, 1acc8 <prep_write_cb+0x64>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
   1acc4:	2309      	movs	r3, #9
   1acc6:	e7f1      	b.n	1acac <prep_write_cb+0x48>
	attr_data->offset = data->offset;
   1acc8:	89e3      	ldrh	r3, [r4, #14]
   1acca:	82c3      	strh	r3, [r0, #22]
	attr_data->handle = handle;
   1accc:	8287      	strh	r7, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1acce:	89a2      	ldrh	r2, [r4, #12]
   1acd0:	68a1      	ldr	r1, [r4, #8]
   1acd2:	3008      	adds	r0, #8
   1acd4:	f011 fe0c 	bl	2c8f0 <net_buf_simple_add_mem>
	data->err = 0U;
   1acd8:	2300      	movs	r3, #0
   1acda:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
   1acdc:	2501      	movs	r5, #1
   1acde:	e7e6      	b.n	1acae <prep_write_cb+0x4a>
		return BT_GATT_ITER_STOP;
   1ace0:	2500      	movs	r5, #0
   1ace2:	e7e4      	b.n	1acae <prep_write_cb+0x4a>
   1ace4:	20000d08 	.word	0x20000d08

0001ace8 <bt_att_chan_create_pdu>:
{
   1ace8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1acec:	b087      	sub	sp, #28
   1acee:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1acf0:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1acf2:	1c53      	adds	r3, r2, #1
   1acf4:	428b      	cmp	r3, r1
{
   1acf6:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1acf8:	d915      	bls.n	1ad26 <bt_att_chan_create_pdu+0x3e>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1acfa:	466c      	mov	r4, sp
   1acfc:	b088      	sub	sp, #32
   1acfe:	466a      	mov	r2, sp
   1ad00:	482b      	ldr	r0, [pc, #172]	; (1adb0 <bt_att_chan_create_pdu+0xc8>)
   1ad02:	61d3      	str	r3, [r2, #28]
   1ad04:	2304      	movs	r3, #4
   1ad06:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1ad0a:	f842 3f10 	str.w	r3, [r2, #16]!
   1ad0e:	4829      	ldr	r0, [pc, #164]	; (1adb4 <bt_att_chan_create_pdu+0xcc>)
   1ad10:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1ad14:	f010 f9dd 	bl	2b0d2 <z_log_msg_static_create.constprop.0>
   1ad18:	46a5      	mov	sp, r4
		return NULL;
   1ad1a:	2400      	movs	r4, #0
}
   1ad1c:	4620      	mov	r0, r4
   1ad1e:	371c      	adds	r7, #28
   1ad20:	46bd      	mov	sp, r7
   1ad22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   1ad26:	4628      	mov	r0, r5
   1ad28:	f010 f8b8 	bl	2ae9c <att_op_get_type>
   1ad2c:	2802      	cmp	r0, #2
   1ad2e:	d001      	beq.n	1ad34 <bt_att_chan_create_pdu+0x4c>
   1ad30:	2804      	cmp	r0, #4
   1ad32:	d11b      	bne.n	1ad6c <bt_att_chan_create_pdu+0x84>
   1ad34:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   1ad38:	f04f 0900 	mov.w	r9, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1ad3c:	2100      	movs	r1, #0
   1ad3e:	4642      	mov	r2, r8
   1ad40:	464b      	mov	r3, r9
   1ad42:	4608      	mov	r0, r1
   1ad44:	f010 f857 	bl	2adf6 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1ad48:	4604      	mov	r4, r0
   1ad4a:	b9a0      	cbnz	r0, 1ad76 <bt_att_chan_create_pdu+0x8e>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   1ad4c:	466e      	mov	r6, sp
   1ad4e:	b088      	sub	sp, #32
   1ad50:	466a      	mov	r2, sp
   1ad52:	4b19      	ldr	r3, [pc, #100]	; (1adb8 <bt_att_chan_create_pdu+0xd0>)
   1ad54:	4817      	ldr	r0, [pc, #92]	; (1adb4 <bt_att_chan_create_pdu+0xcc>)
   1ad56:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1ad5a:	2303      	movs	r3, #3
   1ad5c:	f842 3f10 	str.w	r3, [r2, #16]!
   1ad60:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ad64:	f010 f9b5 	bl	2b0d2 <z_log_msg_static_create.constprop.0>
   1ad68:	46b5      	mov	sp, r6
		return NULL;
   1ad6a:	e7d7      	b.n	1ad1c <bt_att_chan_create_pdu+0x34>
		timeout = K_FOREVER;
   1ad6c:	f04f 38ff 	mov.w	r8, #4294967295
   1ad70:	f04f 39ff 	mov.w	r9, #4294967295
   1ad74:	e7e2      	b.n	1ad3c <bt_att_chan_create_pdu+0x54>
	return z_impl_k_queue_get(queue, timeout);
   1ad76:	4811      	ldr	r0, [pc, #68]	; (1adbc <bt_att_chan_create_pdu+0xd4>)
   1ad78:	4642      	mov	r2, r8
   1ad7a:	464b      	mov	r3, r9
   1ad7c:	f008 fb86 	bl	2348c <z_impl_k_queue_get>
	if (!data) {
   1ad80:	b970      	cbnz	r0, 1ada0 <bt_att_chan_create_pdu+0xb8>
		BT_WARN("Unable to allocate ATT TX meta");
   1ad82:	4b0f      	ldr	r3, [pc, #60]	; (1adc0 <bt_att_chan_create_pdu+0xd8>)
   1ad84:	617b      	str	r3, [r7, #20]
   1ad86:	480b      	ldr	r0, [pc, #44]	; (1adb4 <bt_att_chan_create_pdu+0xcc>)
   1ad88:	2302      	movs	r3, #2
   1ad8a:	f107 0210 	add.w	r2, r7, #16
   1ad8e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ad92:	613b      	str	r3, [r7, #16]
   1ad94:	f010 f99d 	bl	2b0d2 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1ad98:	4620      	mov	r0, r4
   1ad9a:	f004 fbeb 	bl	1f574 <net_buf_unref>
		return NULL;
   1ad9e:	e7bc      	b.n	1ad1a <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   1ada0:	6160      	str	r0, [r4, #20]
	return net_buf_simple_add(&buf->b, len);
   1ada2:	2101      	movs	r1, #1
   1ada4:	f104 0008 	add.w	r0, r4, #8
   1ada8:	f011 fd9c 	bl	2c8e4 <net_buf_simple_add>
	hdr->code = op;
   1adac:	7005      	strb	r5, [r0, #0]
	return buf;
   1adae:	e7b5      	b.n	1ad1c <bt_att_chan_create_pdu+0x34>
   1adb0:	00030f04 	.word	0x00030f04
   1adb4:	0002e584 	.word	0x0002e584
   1adb8:	00030cfe 	.word	0x00030cfe
   1adbc:	20000bd0 	.word	0x20000bd0
   1adc0:	00030f29 	.word	0x00030f29

0001adc4 <bt_att_recv>:
{
   1adc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1adc8:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   1adca:	898b      	ldrh	r3, [r1, #12]
{
   1adcc:	af00      	add	r7, sp, #0
   1adce:	4682      	mov	sl, r0
   1add0:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1add2:	b97b      	cbnz	r3, 1adf4 <bt_att_recv+0x30>
		BT_ERR("Too small ATT PDU received");
   1add4:	4b46      	ldr	r3, [pc, #280]	; (1aef0 <bt_att_recv+0x12c>)
   1add6:	617b      	str	r3, [r7, #20]
   1add8:	2302      	movs	r3, #2
   1adda:	613b      	str	r3, [r7, #16]
   1addc:	f107 0210 	add.w	r2, r7, #16
   1ade0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			BT_WARN("Ignoring unexpected indication");
   1ade4:	4843      	ldr	r0, [pc, #268]	; (1aef4 <bt_att_recv+0x130>)
   1ade6:	f010 f974 	bl	2b0d2 <z_log_msg_static_create.constprop.0>
}
   1adea:	2000      	movs	r0, #0
   1adec:	3718      	adds	r7, #24
   1adee:	46bd      	mov	sp, r7
   1adf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1adf4:	2101      	movs	r1, #1
   1adf6:	f104 0008 	add.w	r0, r4, #8
   1adfa:	f011 fd9a 	bl	2c932 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1adfe:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   1ae02:	4605      	mov	r5, r0
   1ae04:	2b00      	cmp	r3, #0
   1ae06:	d0f0      	beq.n	1adea <bt_att_recv+0x26>
		if (hdr->code == handlers[i].op) {
   1ae08:	7801      	ldrb	r1, [r0, #0]
   1ae0a:	4e3b      	ldr	r6, [pc, #236]	; (1aef8 <bt_att_recv+0x134>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1ae0c:	f1aa 0804 	sub.w	r8, sl, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1ae10:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   1ae12:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   1ae16:	428a      	cmp	r2, r1
   1ae18:	d116      	bne.n	1ae48 <bt_att_recv+0x84>
		if (handler->type == ATT_REQUEST &&
   1ae1a:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   1ae1e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   1ae22:	789b      	ldrb	r3, [r3, #2]
   1ae24:	2b01      	cmp	r3, #1
   1ae26:	d131      	bne.n	1ae8c <bt_att_recv+0xc8>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1ae28:	2100      	movs	r1, #0
   1ae2a:	f10a 008c 	add.w	r0, sl, #140	; 0x8c
   1ae2e:	f010 f9ac 	bl	2b18a <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1ae32:	2800      	cmp	r0, #0
   1ae34:	d034      	beq.n	1aea0 <bt_att_recv+0xdc>
			BT_WARN("Ignoring unexpected request");
   1ae36:	4b31      	ldr	r3, [pc, #196]	; (1aefc <bt_att_recv+0x138>)
			BT_WARN("Ignoring unexpected indication");
   1ae38:	617b      	str	r3, [r7, #20]
   1ae3a:	2302      	movs	r3, #2
   1ae3c:	613b      	str	r3, [r7, #16]
   1ae3e:	f107 0210 	add.w	r2, r7, #16
   1ae42:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ae46:	e7cd      	b.n	1ade4 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1ae48:	3301      	adds	r3, #1
   1ae4a:	2b0f      	cmp	r3, #15
   1ae4c:	d1e1      	bne.n	1ae12 <bt_att_recv+0x4e>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   1ae4e:	466c      	mov	r4, sp
   1ae50:	b088      	sub	sp, #32
   1ae52:	466a      	mov	r2, sp
   1ae54:	4b2a      	ldr	r3, [pc, #168]	; (1af00 <bt_att_recv+0x13c>)
   1ae56:	4827      	ldr	r0, [pc, #156]	; (1aef4 <bt_att_recv+0x130>)
   1ae58:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1ae5c:	2303      	movs	r3, #3
   1ae5e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1ae62:	f842 3f10 	str.w	r3, [r2, #16]!
   1ae66:	f010 f934 	bl	2b0d2 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1ae6a:	7829      	ldrb	r1, [r5, #0]
   1ae6c:	46a5      	mov	sp, r4
   1ae6e:	4608      	mov	r0, r1
   1ae70:	f010 f814 	bl	2ae9c <att_op_get_type>
   1ae74:	2800      	cmp	r0, #0
   1ae76:	d0b8      	beq.n	1adea <bt_att_recv+0x26>
   1ae78:	2805      	cmp	r0, #5
   1ae7a:	d0b6      	beq.n	1adea <bt_att_recv+0x26>
	if (!req) {
   1ae7c:	2900      	cmp	r1, #0
   1ae7e:	d0b4      	beq.n	1adea <bt_att_recv+0x26>
   1ae80:	2306      	movs	r3, #6
   1ae82:	2200      	movs	r2, #0
   1ae84:	4640      	mov	r0, r8
   1ae86:	f010 fb8e 	bl	2b5a6 <send_err_rsp.part.0>
   1ae8a:	e7ae      	b.n	1adea <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   1ae8c:	2b05      	cmp	r3, #5
   1ae8e:	d107      	bne.n	1aea0 <bt_att_recv+0xdc>
			   atomic_test_and_set_bit(att_chan->flags,
   1ae90:	2101      	movs	r1, #1
   1ae92:	f10a 008c 	add.w	r0, sl, #140	; 0x8c
   1ae96:	f010 f978 	bl	2b18a <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1ae9a:	b108      	cbz	r0, 1aea0 <bt_att_recv+0xdc>
			BT_WARN("Ignoring unexpected indication");
   1ae9c:	4b19      	ldr	r3, [pc, #100]	; (1af04 <bt_att_recv+0x140>)
   1ae9e:	e7cb      	b.n	1ae38 <bt_att_recv+0x74>
	if (buf->len < handler->expect_len) {
   1aea0:	eb06 0309 	add.w	r3, r6, r9
   1aea4:	89a1      	ldrh	r1, [r4, #12]
   1aea6:	785a      	ldrb	r2, [r3, #1]
   1aea8:	428a      	cmp	r2, r1
   1aeaa:	d91b      	bls.n	1aee4 <bt_att_recv+0x120>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1aeac:	46ea      	mov	sl, sp
   1aeae:	b088      	sub	sp, #32
   1aeb0:	782b      	ldrb	r3, [r5, #0]
   1aeb2:	466a      	mov	r2, sp
   1aeb4:	4814      	ldr	r0, [pc, #80]	; (1af08 <bt_att_recv+0x144>)
   1aeb6:	61d3      	str	r3, [r2, #28]
   1aeb8:	2404      	movs	r4, #4
   1aeba:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1aebe:	f842 4f10 	str.w	r4, [r2, #16]!
   1aec2:	480c      	ldr	r0, [pc, #48]	; (1aef4 <bt_att_recv+0x130>)
   1aec4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1aec8:	f010 f903 	bl	2b0d2 <z_log_msg_static_create.constprop.0>
		err = BT_ATT_ERR_INVALID_PDU;
   1aecc:	4623      	mov	r3, r4
   1aece:	46d5      	mov	sp, sl
	if (handler->type == ATT_REQUEST && err) {
   1aed0:	444e      	add	r6, r9
   1aed2:	78b2      	ldrb	r2, [r6, #2]
   1aed4:	2a01      	cmp	r2, #1
   1aed6:	d188      	bne.n	1adea <bt_att_recv+0x26>
   1aed8:	2b00      	cmp	r3, #0
   1aeda:	d086      	beq.n	1adea <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1aedc:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   1aede:	2900      	cmp	r1, #0
   1aee0:	d083      	beq.n	1adea <bt_att_recv+0x26>
   1aee2:	e7ce      	b.n	1ae82 <bt_att_recv+0xbe>
		err = handler->func(att_chan, buf);
   1aee4:	685b      	ldr	r3, [r3, #4]
   1aee6:	4621      	mov	r1, r4
   1aee8:	4640      	mov	r0, r8
   1aeea:	4798      	blx	r3
   1aeec:	4603      	mov	r3, r0
   1aeee:	e7ef      	b.n	1aed0 <bt_att_recv+0x10c>
   1aef0:	00030f48 	.word	0x00030f48
   1aef4:	0002e584 	.word	0x0002e584
   1aef8:	0002ef3c 	.word	0x0002ef3c
   1aefc:	00030f63 	.word	0x00030f63
   1af00:	00030fbd 	.word	0x00030fbd
   1af04:	00030f7f 	.word	0x00030f7f
   1af08:	00030f9e 	.word	0x00030f9e

0001af0c <att_write_rsp>:
{
   1af0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af10:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1af12:	6803      	ldr	r3, [r0, #0]
   1af14:	460e      	mov	r6, r1
   1af16:	3900      	subs	r1, #0
{
   1af18:	b086      	sub	sp, #24
   1af1a:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1af1c:	bf18      	it	ne
   1af1e:	2101      	movne	r1, #1
   1af20:	6818      	ldr	r0, [r3, #0]
{
   1af22:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1af24:	f010 ffac 	bl	2be80 <bt_gatt_change_aware>
   1af28:	b958      	cbnz	r0, 1af42 <att_write_rsp+0x36>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1af2a:	2105      	movs	r1, #5
   1af2c:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1af30:	f010 f92b 	bl	2b18a <atomic_test_and_set_bit>
   1af34:	2800      	cmp	r0, #0
   1af36:	d052      	beq.n	1afde <att_write_rsp+0xd2>
			return 0;
   1af38:	2500      	movs	r5, #0
}
   1af3a:	4628      	mov	r0, r5
   1af3c:	b006      	add	sp, #24
   1af3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1af42:	2f00      	cmp	r7, #0
   1af44:	d04d      	beq.n	1afe2 <att_write_rsp+0xd6>
	(void)memset(&data, 0, sizeof(data));
   1af46:	2218      	movs	r2, #24
   1af48:	2100      	movs	r1, #0
   1af4a:	4668      	mov	r0, sp
   1af4c:	f012 ff65 	bl	2de1a <memset>
	if (rsp) {
   1af50:	f1b8 0f00 	cmp.w	r8, #0
   1af54:	d132      	bne.n	1afbc <att_write_rsp+0xb0>
	data.conn = chan->att->conn;
   1af56:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1af58:	4a23      	ldr	r2, [pc, #140]	; (1afe8 <att_write_rsp+0xdc>)
	data.conn = chan->att->conn;
   1af5a:	681b      	ldr	r3, [r3, #0]
   1af5c:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   1af5e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1af62:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   1af66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1af68:	9303      	str	r3, [sp, #12]
	data.len = len;
   1af6a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1af6e:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1af72:	2301      	movs	r3, #1
   1af74:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1af78:	4639      	mov	r1, r7
   1af7a:	466b      	mov	r3, sp
   1af7c:	4638      	mov	r0, r7
	data.req = req;
   1af7e:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1af82:	f00f ffd9 	bl	2af38 <bt_gatt_foreach_attr>
	if (data.err) {
   1af86:	f89d 5014 	ldrb.w	r5, [sp, #20]
   1af8a:	b30d      	cbz	r5, 1afd0 <att_write_rsp+0xc4>
		if (rsp) {
   1af8c:	f1b8 0f00 	cmp.w	r8, #0
   1af90:	d00f      	beq.n	1afb2 <att_write_rsp+0xa6>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1af92:	9b01      	ldr	r3, [sp, #4]
   1af94:	6958      	ldr	r0, [r3, #20]
   1af96:	f7ff fbb3 	bl	1a700 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1af9a:	9801      	ldr	r0, [sp, #4]
   1af9c:	f004 faea 	bl	1f574 <net_buf_unref>
	if (!req) {
   1afa0:	2e00      	cmp	r6, #0
   1afa2:	d0c9      	beq.n	1af38 <att_write_rsp+0x2c>
   1afa4:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1afa8:	463a      	mov	r2, r7
   1afaa:	4631      	mov	r1, r6
   1afac:	4620      	mov	r0, r4
   1afae:	f010 fafa 	bl	2b5a6 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1afb2:	2e18      	cmp	r6, #24
   1afb4:	d1c0      	bne.n	1af38 <att_write_rsp+0x2c>
   1afb6:	f89d 5014 	ldrb.w	r5, [sp, #20]
   1afba:	e7be      	b.n	1af3a <att_write_rsp+0x2e>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1afbc:	2200      	movs	r2, #0
   1afbe:	4641      	mov	r1, r8
   1afc0:	4620      	mov	r0, r4
   1afc2:	f7ff fe91 	bl	1ace8 <bt_att_chan_create_pdu>
   1afc6:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1afc8:	2800      	cmp	r0, #0
   1afca:	d1c4      	bne.n	1af56 <att_write_rsp+0x4a>
			return BT_ATT_ERR_UNLIKELY;
   1afcc:	250e      	movs	r5, #14
   1afce:	e7b4      	b.n	1af3a <att_write_rsp+0x2e>
	if (data.buf) {
   1afd0:	9901      	ldr	r1, [sp, #4]
   1afd2:	2900      	cmp	r1, #0
   1afd4:	d0b0      	beq.n	1af38 <att_write_rsp+0x2c>
		bt_att_chan_send_rsp(chan, data.buf);
   1afd6:	4620      	mov	r0, r4
   1afd8:	f010 f8b1 	bl	2b13e <bt_att_chan_send_rsp>
   1afdc:	e7ad      	b.n	1af3a <att_write_rsp+0x2e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1afde:	2512      	movs	r5, #18
   1afe0:	e7ab      	b.n	1af3a <att_write_rsp+0x2e>
		return BT_ATT_ERR_INVALID_HANDLE;
   1afe2:	2501      	movs	r5, #1
   1afe4:	e7a9      	b.n	1af3a <att_write_rsp+0x2e>
   1afe6:	bf00      	nop
   1afe8:	0002afcf 	.word	0x0002afcf

0001afec <att_signed_write_cmd>:
{
   1afec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1aff0:	6847      	ldr	r7, [r0, #4]
{
   1aff2:	b08b      	sub	sp, #44	; 0x2c
   1aff4:	4606      	mov	r6, r0
   1aff6:	460d      	mov	r5, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1aff8:	3090      	adds	r0, #144	; 0x90
   1affa:	2103      	movs	r1, #3
   1affc:	f00f ff93 	bl	2af26 <atomic_test_bit>
   1b000:	b9c0      	cbnz	r0, 1b034 <att_signed_write_cmd+0x48>
	handle = sys_le16_to_cpu(req->handle);
   1b002:	46a9      	mov	r9, r5
	return net_buf_simple_push(&buf->b, len);
   1b004:	2101      	movs	r1, #1
   1b006:	f859 3f08 	ldr.w	r3, [r9, #8]!
   1b00a:	4648      	mov	r0, r9
   1b00c:	f8b3 8000 	ldrh.w	r8, [r3]
   1b010:	f011 fc7f 	bl	2c912 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
   1b014:	4638      	mov	r0, r7
   1b016:	4629      	mov	r1, r5
   1b018:	f003 f8a6 	bl	1e168 <bt_smp_sign_verify>
	if (err) {
   1b01c:	4607      	mov	r7, r0
   1b01e:	b158      	cbz	r0, 1b038 <att_signed_write_cmd+0x4c>
		BT_ERR("Error verifying data");
   1b020:	4b11      	ldr	r3, [pc, #68]	; (1b068 <att_signed_write_cmd+0x7c>)
   1b022:	9309      	str	r3, [sp, #36]	; 0x24
   1b024:	4811      	ldr	r0, [pc, #68]	; (1b06c <att_signed_write_cmd+0x80>)
   1b026:	2302      	movs	r3, #2
   1b028:	aa08      	add	r2, sp, #32
   1b02a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b02e:	9308      	str	r3, [sp, #32]
   1b030:	f010 f84f 	bl	2b0d2 <z_log_msg_static_create.constprop.0>
		return 0;
   1b034:	2000      	movs	r0, #0
   1b036:	e014      	b.n	1b062 <att_signed_write_cmd+0x76>
	return net_buf_simple_pull(&buf->b, len);
   1b038:	2101      	movs	r1, #1
   1b03a:	4648      	mov	r0, r9
   1b03c:	f011 fc71 	bl	2c922 <net_buf_simple_pull>
   1b040:	2102      	movs	r1, #2
   1b042:	4648      	mov	r0, r9
   1b044:	f011 fc6d 	bl	2c922 <net_buf_simple_pull>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data,
   1b048:	89ab      	ldrh	r3, [r5, #12]
   1b04a:	3b0c      	subs	r3, #12
   1b04c:	b29b      	uxth	r3, r3
   1b04e:	9302      	str	r3, [sp, #8]
   1b050:	68ab      	ldr	r3, [r5, #8]
   1b052:	463a      	mov	r2, r7
   1b054:	e9cd 7300 	strd	r7, r3, [sp]
   1b058:	4639      	mov	r1, r7
   1b05a:	4643      	mov	r3, r8
   1b05c:	4630      	mov	r0, r6
   1b05e:	f7ff ff55 	bl	1af0c <att_write_rsp>
}
   1b062:	b00b      	add	sp, #44	; 0x2c
   1b064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b068:	00030fd7 	.word	0x00030fd7
   1b06c:	0002e584 	.word	0x0002e584

0001b070 <bt_att_create_pdu>:
{
   1b070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b072:	af00      	add	r7, sp, #0
   1b074:	460e      	mov	r6, r1
   1b076:	4615      	mov	r5, r2
	att = att_get(conn);
   1b078:	f7ff fc12 	bl	1a8a0 <att_get>
	if (!att) {
   1b07c:	b1f8      	cbz	r0, 1b0be <bt_att_create_pdu+0x4e>
	return list->head;
   1b07e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1b080:	1c69      	adds	r1, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b082:	b138      	cbz	r0, 1b094 <bt_att_create_pdu+0x24>
	return node->next;
   1b084:	f850 39e0 	ldr.w	r3, [r0], #-224
   1b088:	b103      	cbz	r3, 1b08c <bt_att_create_pdu+0x1c>
   1b08a:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b08c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   1b08e:	4291      	cmp	r1, r2
   1b090:	d911      	bls.n	1b0b6 <bt_att_create_pdu+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b092:	b9b3      	cbnz	r3, 1b0c2 <bt_att_create_pdu+0x52>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1b094:	466c      	mov	r4, sp
   1b096:	b088      	sub	sp, #32
   1b098:	466a      	mov	r2, sp
   1b09a:	4b0d      	ldr	r3, [pc, #52]	; (1b0d0 <bt_att_create_pdu+0x60>)
   1b09c:	480d      	ldr	r0, [pc, #52]	; (1b0d4 <bt_att_create_pdu+0x64>)
   1b09e:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1b0a2:	2303      	movs	r3, #3
   1b0a4:	f842 3f10 	str.w	r3, [r2, #16]!
   1b0a8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1b0ac:	f010 f811 	bl	2b0d2 <z_log_msg_static_create.constprop.0>
	return NULL;
   1b0b0:	2000      	movs	r0, #0
   1b0b2:	46a5      	mov	sp, r4
   1b0b4:	e003      	b.n	1b0be <bt_att_create_pdu+0x4e>
		return bt_att_chan_create_pdu(chan, op, len);
   1b0b6:	462a      	mov	r2, r5
   1b0b8:	4631      	mov	r1, r6
   1b0ba:	f7ff fe15 	bl	1ace8 <bt_att_chan_create_pdu>
}
   1b0be:	46bd      	mov	sp, r7
   1b0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b0c2:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b0c6:	b104      	cbz	r4, 1b0ca <bt_att_create_pdu+0x5a>
   1b0c8:	3ce0      	subs	r4, #224	; 0xe0
{
   1b0ca:	4618      	mov	r0, r3
   1b0cc:	4623      	mov	r3, r4
   1b0ce:	e7dd      	b.n	1b08c <bt_att_create_pdu+0x1c>
   1b0d0:	00030fec 	.word	0x00030fec
   1b0d4:	0002e584 	.word	0x0002e584

0001b0d8 <att_exec_write_req>:
{
   1b0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return att_exec_write_rsp(chan, req->flags);
   1b0dc:	688b      	ldr	r3, [r1, #8]
	buf->len  = 0U;
   1b0de:	4f4b      	ldr	r7, [pc, #300]	; (1b20c <att_exec_write_req+0x134>)
   1b0e0:	781b      	ldrb	r3, [r3, #0]
{
   1b0e2:	b089      	sub	sp, #36	; 0x24
   1b0e4:	4605      	mov	r5, r0
	return att_exec_write_rsp(chan, req->flags);
   1b0e6:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = chan->chan.chan.conn;
   1b0e8:	6843      	ldr	r3, [r0, #4]
   1b0ea:	9306      	str	r3, [sp, #24]
	uint8_t err = 0U;
   1b0ec:	2400      	movs	r4, #0
	while (!sys_slist_is_empty(&chan->att->prep_queue)) {
   1b0ee:	6828      	ldr	r0, [r5, #0]
   1b0f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1b0f2:	b98b      	cbnz	r3, 1b118 <att_exec_write_req+0x40>
	if (err) {
   1b0f4:	2c00      	cmp	r4, #0
   1b0f6:	f040 8085 	bne.w	1b204 <att_exec_write_req+0x12c>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
   1b0fa:	2119      	movs	r1, #25
   1b0fc:	9806      	ldr	r0, [sp, #24]
   1b0fe:	4622      	mov	r2, r4
   1b100:	f7ff ffb6 	bl	1b070 <bt_att_create_pdu>
	if (!buf) {
   1b104:	4601      	mov	r1, r0
   1b106:	2800      	cmp	r0, #0
   1b108:	d06f      	beq.n	1b1ea <att_exec_write_req+0x112>
	bt_att_chan_send_rsp(chan, buf);
   1b10a:	4628      	mov	r0, r5
   1b10c:	f010 f817 	bl	2b13e <bt_att_chan_send_rsp>
}
   1b110:	4620      	mov	r0, r4
   1b112:	b009      	add	sp, #36	; 0x24
   1b114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf = net_buf_slist_get(&chan->att->prep_queue);
   1b118:	3024      	adds	r0, #36	; 0x24
   1b11a:	f011 fb85 	bl	2c828 <net_buf_slist_get>
   1b11e:	f04f 0300 	mov.w	r3, #0
		handle = data->handle;
   1b122:	f8b0 a014 	ldrh.w	sl, [r0, #20]
		net_buf_simple_add_mem(&reassembled_data, buf->data, buf->len);
   1b126:	8982      	ldrh	r2, [r0, #12]
   1b128:	6881      	ldr	r1, [r0, #8]
   1b12a:	80bb      	strh	r3, [r7, #4]
		buf = net_buf_slist_get(&chan->att->prep_queue);
   1b12c:	4606      	mov	r6, r0
	buf->data = buf->__buf;
   1b12e:	68bb      	ldr	r3, [r7, #8]
		net_buf_simple_add_mem(&reassembled_data, buf->data, buf->len);
   1b130:	4836      	ldr	r0, [pc, #216]	; (1b20c <att_exec_write_req+0x134>)
   1b132:	603b      	str	r3, [r7, #0]
   1b134:	f011 fbdc 	bl	2c8f0 <net_buf_simple_add_mem>
					    &chan->att->prep_queue,
   1b138:	f8d5 8000 	ldr.w	r8, [r5]
	return list->head;
   1b13c:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, entry, next, node) {
   1b140:	2c00      	cmp	r4, #0
   1b142:	d054      	beq.n	1b1ee <att_exec_write_req+0x116>
		err = exec_write_reassemble(handle, data->offset,
   1b144:	8af3      	ldrh	r3, [r6, #22]
	return node->next;
   1b146:	f8d4 9000 	ldr.w	r9, [r4]
   1b14a:	9307      	str	r3, [sp, #28]
   1b14c:	f04f 0b00 	mov.w	fp, #0
		if (tmp_data->handle == handle) {
   1b150:	8aa2      	ldrh	r2, [r4, #20]
   1b152:	4552      	cmp	r2, sl
   1b154:	d12f      	bne.n	1b1b6 <att_exec_write_req+0xde>
			if (tmp_data->offset == 0) {
   1b156:	8ae2      	ldrh	r2, [r4, #22]
   1b158:	2a00      	cmp	r2, #0
   1b15a:	d048      	beq.n	1b1ee <att_exec_write_req+0x116>
			if (tmp_data->offset != buf->len + offset) {
   1b15c:	88b9      	ldrh	r1, [r7, #4]
   1b15e:	9b07      	ldr	r3, [sp, #28]
   1b160:	1858      	adds	r0, r3, r1
   1b162:	4282      	cmp	r2, r0
   1b164:	d148      	bne.n	1b1f8 <att_exec_write_req+0x120>
			if (buf->len + entry->len > buf->size) {
   1b166:	89a2      	ldrh	r2, [r4, #12]
   1b168:	88f8      	ldrh	r0, [r7, #6]
   1b16a:	4411      	add	r1, r2
   1b16c:	4281      	cmp	r1, r0
   1b16e:	dc4b      	bgt.n	1b208 <att_exec_write_req+0x130>
			net_buf_simple_add_mem(buf, entry->data, entry->len);
   1b170:	68a1      	ldr	r1, [r4, #8]
   1b172:	4638      	mov	r0, r7
   1b174:	f011 fbbc 	bl	2c8f0 <net_buf_simple_add_mem>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   1b178:	6822      	ldr	r2, [r4, #0]
   1b17a:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
   1b17e:	f1bb 0f00 	cmp.w	fp, #0
   1b182:	d111      	bne.n	1b1a8 <att_exec_write_req+0xd0>
   1b184:	428c      	cmp	r4, r1
	list->head = node;
   1b186:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
Z_GENLIST_REMOVE(slist, snode)
   1b18a:	d101      	bne.n	1b190 <att_exec_write_req+0xb8>
	list->tail = node;
   1b18c:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
	parent->next = child;
   1b190:	2300      	movs	r3, #0
   1b192:	6023      	str	r3, [r4, #0]
			net_buf_unref(entry);
   1b194:	4620      	mov	r0, r4
   1b196:	f004 f9ed 	bl	1f574 <net_buf_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, entry, next, node) {
   1b19a:	f1b9 0f00 	cmp.w	r9, #0
   1b19e:	d026      	beq.n	1b1ee <att_exec_write_req+0x116>
	return node->next;
   1b1a0:	464c      	mov	r4, r9
   1b1a2:	f8d9 9000 	ldr.w	r9, [r9]
   1b1a6:	e7d3      	b.n	1b150 <att_exec_write_req+0x78>
Z_GENLIST_REMOVE(slist, snode)
   1b1a8:	428c      	cmp	r4, r1
	parent->next = child;
   1b1aa:	f8cb 2000 	str.w	r2, [fp]
	list->tail = node;
   1b1ae:	bf08      	it	eq
   1b1b0:	f8c8 b028 	streq.w	fp, [r8, #40]	; 0x28
}
   1b1b4:	e7ec      	b.n	1b190 <att_exec_write_req+0xb8>
			prev = &entry->node;
   1b1b6:	46a3      	mov	fp, r4
   1b1b8:	e7ef      	b.n	1b19a <att_exec_write_req+0xc2>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
   1b1ba:	88bb      	ldrh	r3, [r7, #4]
   1b1bc:	9302      	str	r3, [sp, #8]
   1b1be:	683b      	ldr	r3, [r7, #0]
   1b1c0:	9301      	str	r3, [sp, #4]
   1b1c2:	8af3      	ldrh	r3, [r6, #22]
   1b1c4:	9300      	str	r3, [sp, #0]
   1b1c6:	2200      	movs	r2, #0
   1b1c8:	4653      	mov	r3, sl
   1b1ca:	2118      	movs	r1, #24
   1b1cc:	4628      	mov	r0, r5
   1b1ce:	f7ff fe9d 	bl	1af0c <att_write_rsp>
			if (err) {
   1b1d2:	4604      	mov	r4, r0
   1b1d4:	b128      	cbz	r0, 1b1e2 <att_exec_write_req+0x10a>
	if (!req) {
   1b1d6:	4603      	mov	r3, r0
   1b1d8:	8ab2      	ldrh	r2, [r6, #20]
   1b1da:	2118      	movs	r1, #24
   1b1dc:	4628      	mov	r0, r5
   1b1de:	f010 f9e2 	bl	2b5a6 <send_err_rsp.part.0>
		net_buf_unref(buf);
   1b1e2:	4630      	mov	r0, r6
   1b1e4:	f004 f9c6 	bl	1f574 <net_buf_unref>
   1b1e8:	e781      	b.n	1b0ee <att_exec_write_req+0x16>
		return BT_ATT_ERR_UNLIKELY;
   1b1ea:	240e      	movs	r4, #14
   1b1ec:	e790      	b.n	1b110 <att_exec_write_req+0x38>
		if (!err && flags == BT_ATT_FLAG_EXEC) {
   1b1ee:	9b05      	ldr	r3, [sp, #20]
   1b1f0:	2b01      	cmp	r3, #1
   1b1f2:	d0e2      	beq.n	1b1ba <att_exec_write_req+0xe2>
		err = exec_write_reassemble(handle, data->offset,
   1b1f4:	2400      	movs	r4, #0
   1b1f6:	e7f4      	b.n	1b1e2 <att_exec_write_req+0x10a>
				return BT_ATT_ERR_INVALID_OFFSET;
   1b1f8:	2307      	movs	r3, #7
	if (!req) {
   1b1fa:	4652      	mov	r2, sl
   1b1fc:	2118      	movs	r1, #24
   1b1fe:	4628      	mov	r0, r5
   1b200:	f010 f9d1 	bl	2b5a6 <send_err_rsp.part.0>
			return 0;
   1b204:	2400      	movs	r4, #0
	return att_exec_write_rsp(chan, req->flags);
   1b206:	e783      	b.n	1b110 <att_exec_write_req+0x38>
				return BT_ATT_ERR_INVALID_ATTRIBUTE_LEN;
   1b208:	230d      	movs	r3, #13
   1b20a:	e7f6      	b.n	1b1fa <att_exec_write_req+0x122>
   1b20c:	2000071c 	.word	0x2000071c

0001b210 <att_prepare_write_req>:
{
   1b210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b214:	460c      	mov	r4, r1
   1b216:	b087      	sub	sp, #28
   1b218:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1b21a:	2104      	movs	r1, #4
   1b21c:	f104 0008 	add.w	r0, r4, #8
   1b220:	f011 fb87 	bl	2c932 <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
   1b224:	f8d5 b004 	ldr.w	fp, [r5, #4]
	handle = sys_le16_to_cpu(req->handle);
   1b228:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
   1b22c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
   1b230:	f8d4 8008 	ldr.w	r8, [r4, #8]
   1b234:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
   1b236:	2101      	movs	r1, #1
   1b238:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
   1b23a:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
   1b23e:	f010 fe1f 	bl	2be80 <bt_gatt_change_aware>
   1b242:	b960      	cbnz	r0, 1b25e <att_prepare_write_req+0x4e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1b244:	2105      	movs	r1, #5
   1b246:	f105 0090 	add.w	r0, r5, #144	; 0x90
   1b24a:	f00f ff9e 	bl	2b18a <atomic_test_and_set_bit>
			return 0;
   1b24e:	2800      	cmp	r0, #0
   1b250:	bf0c      	ite	eq
   1b252:	2412      	moveq	r4, #18
   1b254:	2400      	movne	r4, #0
}
   1b256:	4620      	mov	r0, r4
   1b258:	b007      	add	sp, #28
   1b25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!handle) {
   1b25e:	2e00      	cmp	r6, #0
   1b260:	d045      	beq.n	1b2ee <att_prepare_write_req+0xde>
	(void)memset(&data, 0, sizeof(data));
   1b262:	2210      	movs	r2, #16
   1b264:	2100      	movs	r1, #0
   1b266:	a802      	add	r0, sp, #8
   1b268:	f012 fdd7 	bl	2de1a <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b26c:	2301      	movs	r3, #1
   1b26e:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   1b272:	4a21      	ldr	r2, [pc, #132]	; (1b2f8 <att_prepare_write_req+0xe8>)
	data.conn = conn;
   1b274:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
   1b278:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   1b27a:	ab01      	add	r3, sp, #4
   1b27c:	4631      	mov	r1, r6
   1b27e:	4630      	mov	r0, r6
	data.offset = offset;
   1b280:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
   1b284:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
   1b288:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   1b28c:	f00f fe54 	bl	2af38 <bt_gatt_foreach_attr>
	if (data.err) {
   1b290:	f89d 4014 	ldrb.w	r4, [sp, #20]
   1b294:	b13c      	cbz	r4, 1b2a6 <att_prepare_write_req+0x96>
	if (!req) {
   1b296:	4623      	mov	r3, r4
   1b298:	4632      	mov	r2, r6
   1b29a:	2116      	movs	r1, #22
   1b29c:	4628      	mov	r0, r5
   1b29e:	f010 f982 	bl	2b5a6 <send_err_rsp.part.0>
		return 0;
   1b2a2:	2400      	movs	r4, #0
   1b2a4:	e7d7      	b.n	1b256 <att_prepare_write_req+0x46>
	net_buf_slist_put(&chan->att->prep_queue, data.buf);
   1b2a6:	6828      	ldr	r0, [r5, #0]
   1b2a8:	9902      	ldr	r1, [sp, #8]
   1b2aa:	3024      	adds	r0, #36	; 0x24
   1b2ac:	f011 fa9e 	bl	2c7ec <net_buf_slist_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
   1b2b0:	4622      	mov	r2, r4
   1b2b2:	2117      	movs	r1, #23
   1b2b4:	4658      	mov	r0, fp
   1b2b6:	f7ff fedb 	bl	1b070 <bt_att_create_pdu>
   1b2ba:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b2bc:	b1c8      	cbz	r0, 1b2f2 <att_prepare_write_req+0xe2>
	return net_buf_simple_add(&buf->b, len);
   1b2be:	2104      	movs	r1, #4
   1b2c0:	3008      	adds	r0, #8
   1b2c2:	f011 fb0f 	bl	2c8e4 <net_buf_simple_add>
   1b2c6:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
   1b2c8:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
   1b2cc:	f8a0 9002 	strh.w	r9, [r0, #2]
   1b2d0:	9802      	ldr	r0, [sp, #8]
   1b2d2:	4639      	mov	r1, r7
   1b2d4:	3008      	adds	r0, #8
   1b2d6:	f011 fb05 	bl	2c8e4 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b2da:	4641      	mov	r1, r8
   1b2dc:	463a      	mov	r2, r7
   1b2de:	1d30      	adds	r0, r6, #4
   1b2e0:	f012 fd7a 	bl	2ddd8 <memcpy>
	bt_att_chan_send_rsp(chan, data.buf);
   1b2e4:	9902      	ldr	r1, [sp, #8]
   1b2e6:	4628      	mov	r0, r5
   1b2e8:	f00f ff29 	bl	2b13e <bt_att_chan_send_rsp>
	return 0;
   1b2ec:	e7b3      	b.n	1b256 <att_prepare_write_req+0x46>
		return BT_ATT_ERR_INVALID_HANDLE;
   1b2ee:	2401      	movs	r4, #1
   1b2f0:	e7b1      	b.n	1b256 <att_prepare_write_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1b2f2:	240e      	movs	r4, #14
   1b2f4:	e7af      	b.n	1b256 <att_prepare_write_req+0x46>
   1b2f6:	bf00      	nop
   1b2f8:	0001ac65 	.word	0x0001ac65

0001b2fc <att_read_group_req>:
{
   1b2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1b300:	898c      	ldrh	r4, [r1, #12]
   1b302:	3c04      	subs	r4, #4
   1b304:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1b306:	2c02      	cmp	r4, #2
{
   1b308:	4605      	mov	r5, r0
   1b30a:	b08c      	sub	sp, #48	; 0x30
   1b30c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1b30e:	d001      	beq.n	1b314 <att_read_group_req+0x18>
   1b310:	2c10      	cmp	r4, #16
   1b312:	d172      	bne.n	1b3fa <att_read_group_req+0xfe>
	return net_buf_simple_pull_mem(&buf->b, len);
   1b314:	2104      	movs	r1, #4
   1b316:	3008      	adds	r0, #8
   1b318:	f011 fb0b 	bl	2c932 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b31c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b320:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b322:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b324:	1d01      	adds	r1, r0, #4
   1b326:	4622      	mov	r2, r4
   1b328:	4640      	mov	r0, r8
   1b32a:	f00f f9b5 	bl	2a698 <bt_uuid_create>
   1b32e:	2800      	cmp	r0, #0
   1b330:	d065      	beq.n	1b3fe <att_read_group_req+0x102>
	if (!start || !end) {
   1b332:	2e00      	cmp	r6, #0
   1b334:	d03e      	beq.n	1b3b4 <att_read_group_req+0xb8>
   1b336:	2400      	movs	r4, #0
   1b338:	2f00      	cmp	r7, #0
   1b33a:	d03a      	beq.n	1b3b2 <att_read_group_req+0xb6>
	if (start > end) {
   1b33c:	42b7      	cmp	r7, r6
   1b33e:	d339      	bcc.n	1b3b4 <att_read_group_req+0xb8>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1b340:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b344:	a901      	add	r1, sp, #4
   1b346:	4640      	mov	r0, r8
   1b348:	f88d 4004 	strb.w	r4, [sp, #4]
   1b34c:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b350:	f00f f974 	bl	2a63c <bt_uuid_cmp>
   1b354:	2800      	cmp	r0, #0
   1b356:	d138      	bne.n	1b3ca <att_read_group_req+0xce>
	struct bt_conn *conn = chan->chan.chan.conn;
   1b358:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   1b35a:	2214      	movs	r2, #20
   1b35c:	2100      	movs	r1, #0
   1b35e:	a807      	add	r0, sp, #28
   1b360:	f012 fd5b 	bl	2de1a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1b364:	2201      	movs	r2, #1
   1b366:	2111      	movs	r1, #17
   1b368:	4620      	mov	r0, r4
   1b36a:	f7ff fe81 	bl	1b070 <bt_att_create_pdu>
   1b36e:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1b370:	2800      	cmp	r0, #0
   1b372:	d044      	beq.n	1b3fe <att_read_group_req+0x102>
	return net_buf_simple_add(&buf->b, len);
   1b374:	2101      	movs	r1, #1
   1b376:	3008      	adds	r0, #8
	data.uuid = uuid;
   1b378:	e9cd 5807 	strd	r5, r8, [sp, #28]
   1b37c:	f011 fab2 	bl	2c8e4 <net_buf_simple_add>
	data.rsp->len = 0U;
   1b380:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1b384:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1b386:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   1b388:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1b38c:	4a1d      	ldr	r2, [pc, #116]	; (1b404 <att_read_group_req+0x108>)
	data.group = NULL;
   1b38e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1b392:	4639      	mov	r1, r7
   1b394:	4630      	mov	r0, r6
   1b396:	f00f fdcf 	bl	2af38 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1b39a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b39c:	781c      	ldrb	r4, [r3, #0]
   1b39e:	bb3c      	cbnz	r4, 1b3f0 <att_read_group_req+0xf4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b3a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b3a2:	6958      	ldr	r0, [r3, #20]
   1b3a4:	f7ff f9ac 	bl	1a700 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1b3a8:	9809      	ldr	r0, [sp, #36]	; 0x24
   1b3aa:	f004 f8e3 	bl	1f574 <net_buf_unref>
	if (!req) {
   1b3ae:	230a      	movs	r3, #10
   1b3b0:	e018      	b.n	1b3e4 <att_read_group_req+0xe8>
			*err = 0U;
   1b3b2:	463e      	mov	r6, r7
	if (!req) {
   1b3b4:	2301      	movs	r3, #1
   1b3b6:	4632      	mov	r2, r6
   1b3b8:	2110      	movs	r1, #16
   1b3ba:	4628      	mov	r0, r5
   1b3bc:	f010 f8f3 	bl	2b5a6 <send_err_rsp.part.0>
		return 0;
   1b3c0:	2400      	movs	r4, #0
}
   1b3c2:	4620      	mov	r0, r4
   1b3c4:	b00c      	add	sp, #48	; 0x30
   1b3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1b3ca:	f642 0301 	movw	r3, #10241	; 0x2801
   1b3ce:	a907      	add	r1, sp, #28
   1b3d0:	4640      	mov	r0, r8
   1b3d2:	f88d 401c 	strb.w	r4, [sp, #28]
   1b3d6:	f8ad 301e 	strh.w	r3, [sp, #30]
   1b3da:	f00f f92f 	bl	2a63c <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1b3de:	2800      	cmp	r0, #0
   1b3e0:	d0ba      	beq.n	1b358 <att_read_group_req+0x5c>
	if (!req) {
   1b3e2:	2310      	movs	r3, #16
   1b3e4:	4632      	mov	r2, r6
   1b3e6:	2110      	movs	r1, #16
   1b3e8:	4628      	mov	r0, r5
   1b3ea:	f010 f8dc 	bl	2b5a6 <send_err_rsp.part.0>
		return 0;
   1b3ee:	e7e8      	b.n	1b3c2 <att_read_group_req+0xc6>
	bt_att_chan_send_rsp(chan, data.buf);
   1b3f0:	9909      	ldr	r1, [sp, #36]	; 0x24
   1b3f2:	4628      	mov	r0, r5
   1b3f4:	f00f fea3 	bl	2b13e <bt_att_chan_send_rsp>
	return 0;
   1b3f8:	e7e2      	b.n	1b3c0 <att_read_group_req+0xc4>
		return BT_ATT_ERR_INVALID_PDU;
   1b3fa:	2404      	movs	r4, #4
   1b3fc:	e7e1      	b.n	1b3c2 <att_read_group_req+0xc6>
		return BT_ATT_ERR_UNLIKELY;
   1b3fe:	240e      	movs	r4, #14
   1b400:	e7df      	b.n	1b3c2 <att_read_group_req+0xc6>
   1b402:	bf00      	nop
   1b404:	0001aa01 	.word	0x0001aa01

0001b408 <att_read_mult_vl_req>:
{
   1b408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1b40c:	6846      	ldr	r6, [r0, #4]
{
   1b40e:	b085      	sub	sp, #20
   1b410:	4604      	mov	r4, r0
   1b412:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1b414:	4630      	mov	r0, r6
   1b416:	2101      	movs	r1, #1
   1b418:	f010 fd32 	bl	2be80 <bt_gatt_change_aware>
   1b41c:	b958      	cbnz	r0, 1b436 <att_read_mult_vl_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1b41e:	2105      	movs	r1, #5
   1b420:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1b424:	f00f feb1 	bl	2b18a <atomic_test_and_set_bit>
			return 0;
   1b428:	2800      	cmp	r0, #0
   1b42a:	bf0c      	ite	eq
   1b42c:	2012      	moveq	r0, #18
   1b42e:	2000      	movne	r0, #0
}
   1b430:	b005      	add	sp, #20
   1b432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1b436:	2210      	movs	r2, #16
   1b438:	2100      	movs	r1, #0
   1b43a:	4668      	mov	r0, sp
   1b43c:	f012 fced 	bl	2de1a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1b440:	2200      	movs	r2, #0
   1b442:	2121      	movs	r1, #33	; 0x21
   1b444:	4630      	mov	r0, r6
   1b446:	f7ff fe13 	bl	1b070 <bt_att_create_pdu>
   1b44a:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b44c:	b368      	cbz	r0, 1b4aa <att_read_mult_vl_req+0xa2>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1b44e:	f8df 9060 	ldr.w	r9, [pc, #96]	; 1b4b0 <att_read_mult_vl_req+0xa8>
	data.chan = chan;
   1b452:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1b454:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b458:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1b45c:	89ab      	ldrh	r3, [r5, #12]
   1b45e:	2b01      	cmp	r3, #1
   1b460:	d804      	bhi.n	1b46c <att_read_mult_vl_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf);
   1b462:	9902      	ldr	r1, [sp, #8]
   1b464:	4620      	mov	r0, r4
   1b466:	f00f fe6a 	bl	2b13e <bt_att_chan_send_rsp>
   1b46a:	e01c      	b.n	1b4a6 <att_read_mult_vl_req+0x9e>
   1b46c:	4638      	mov	r0, r7
   1b46e:	f011 fa70 	bl	2c952 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1b472:	466b      	mov	r3, sp
   1b474:	464a      	mov	r2, r9
   1b476:	4601      	mov	r1, r0
   1b478:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b47a:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1b47e:	f00f fd5b 	bl	2af38 <bt_gatt_foreach_attr>
		if (data.err) {
   1b482:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b486:	2b00      	cmp	r3, #0
   1b488:	d0e8      	beq.n	1b45c <att_read_mult_vl_req+0x54>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b48a:	9b02      	ldr	r3, [sp, #8]
   1b48c:	6958      	ldr	r0, [r3, #20]
   1b48e:	f7ff f937 	bl	1a700 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1b492:	9802      	ldr	r0, [sp, #8]
   1b494:	f004 f86e 	bl	1f574 <net_buf_unref>
	if (!req) {
   1b498:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b49c:	4632      	mov	r2, r6
   1b49e:	2120      	movs	r1, #32
   1b4a0:	4620      	mov	r0, r4
   1b4a2:	f010 f880 	bl	2b5a6 <send_err_rsp.part.0>
	return 0;
   1b4a6:	2000      	movs	r0, #0
   1b4a8:	e7c2      	b.n	1b430 <att_read_mult_vl_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1b4aa:	200e      	movs	r0, #14
   1b4ac:	e7c0      	b.n	1b430 <att_read_mult_vl_req+0x28>
   1b4ae:	bf00      	nop
   1b4b0:	0002b31f 	.word	0x0002b31f

0001b4b4 <att_read_mult_req>:
{
   1b4b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1b4b8:	6846      	ldr	r6, [r0, #4]
{
   1b4ba:	b085      	sub	sp, #20
   1b4bc:	4604      	mov	r4, r0
   1b4be:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1b4c0:	4630      	mov	r0, r6
   1b4c2:	2101      	movs	r1, #1
   1b4c4:	f010 fcdc 	bl	2be80 <bt_gatt_change_aware>
   1b4c8:	b958      	cbnz	r0, 1b4e2 <att_read_mult_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1b4ca:	2105      	movs	r1, #5
   1b4cc:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1b4d0:	f00f fe5b 	bl	2b18a <atomic_test_and_set_bit>
			return 0;
   1b4d4:	2800      	cmp	r0, #0
   1b4d6:	bf0c      	ite	eq
   1b4d8:	2012      	moveq	r0, #18
   1b4da:	2000      	movne	r0, #0
}
   1b4dc:	b005      	add	sp, #20
   1b4de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1b4e2:	2210      	movs	r2, #16
   1b4e4:	2100      	movs	r1, #0
   1b4e6:	4668      	mov	r0, sp
   1b4e8:	f012 fc97 	bl	2de1a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1b4ec:	2200      	movs	r2, #0
   1b4ee:	210f      	movs	r1, #15
   1b4f0:	4630      	mov	r0, r6
   1b4f2:	f7ff fdbd 	bl	1b070 <bt_att_create_pdu>
   1b4f6:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b4f8:	b368      	cbz	r0, 1b556 <att_read_mult_req+0xa2>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b4fa:	f8df 9060 	ldr.w	r9, [pc, #96]	; 1b55c <att_read_mult_req+0xa8>
	data.chan = chan;
   1b4fe:	9400      	str	r4, [sp, #0]
   1b500:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b504:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1b508:	89ab      	ldrh	r3, [r5, #12]
   1b50a:	2b01      	cmp	r3, #1
   1b50c:	d804      	bhi.n	1b518 <att_read_mult_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf);
   1b50e:	9902      	ldr	r1, [sp, #8]
   1b510:	4620      	mov	r0, r4
   1b512:	f00f fe14 	bl	2b13e <bt_att_chan_send_rsp>
   1b516:	e01c      	b.n	1b552 <att_read_mult_req+0x9e>
   1b518:	4638      	mov	r0, r7
   1b51a:	f011 fa1a 	bl	2c952 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b51e:	466b      	mov	r3, sp
   1b520:	464a      	mov	r2, r9
   1b522:	4601      	mov	r1, r0
   1b524:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b526:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b52a:	f00f fd05 	bl	2af38 <bt_gatt_foreach_attr>
		if (data.err) {
   1b52e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b532:	2b00      	cmp	r3, #0
   1b534:	d0e8      	beq.n	1b508 <att_read_mult_req+0x54>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b536:	9b02      	ldr	r3, [sp, #8]
   1b538:	6958      	ldr	r0, [r3, #20]
   1b53a:	f7ff f8e1 	bl	1a700 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1b53e:	9802      	ldr	r0, [sp, #8]
   1b540:	f004 f818 	bl	1f574 <net_buf_unref>
	if (!req) {
   1b544:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b548:	4632      	mov	r2, r6
   1b54a:	210e      	movs	r1, #14
   1b54c:	4620      	mov	r0, r4
   1b54e:	f010 f82a 	bl	2b5a6 <send_err_rsp.part.0>
	return 0;
   1b552:	2000      	movs	r0, #0
   1b554:	e7c2      	b.n	1b4dc <att_read_mult_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1b556:	200e      	movs	r0, #14
   1b558:	e7c0      	b.n	1b4dc <att_read_mult_req+0x28>
   1b55a:	bf00      	nop
   1b55c:	0002b2cb 	.word	0x0002b2cb

0001b560 <att_read_rsp>:
{
   1b560:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1b564:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   1b568:	4604      	mov	r4, r0
   1b56a:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1b56c:	4640      	mov	r0, r8
   1b56e:	2101      	movs	r1, #1
{
   1b570:	4615      	mov	r5, r2
   1b572:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1b574:	f010 fc84 	bl	2be80 <bt_gatt_change_aware>
   1b578:	b960      	cbnz	r0, 1b594 <att_read_rsp+0x34>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1b57a:	2105      	movs	r1, #5
   1b57c:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1b580:	f00f fe03 	bl	2b18a <atomic_test_and_set_bit>
			return 0;
   1b584:	2800      	cmp	r0, #0
   1b586:	bf0c      	ite	eq
   1b588:	2512      	moveq	r5, #18
   1b58a:	2500      	movne	r5, #0
}
   1b58c:	4628      	mov	r0, r5
   1b58e:	b004      	add	sp, #16
   1b590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1b594:	b38e      	cbz	r6, 1b5fa <att_read_rsp+0x9a>
	(void)memset(&data, 0, sizeof(data));
   1b596:	2210      	movs	r2, #16
   1b598:	2100      	movs	r1, #0
   1b59a:	4668      	mov	r0, sp
   1b59c:	f012 fc3d 	bl	2de1a <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1b5a0:	2200      	movs	r2, #0
   1b5a2:	4629      	mov	r1, r5
   1b5a4:	4640      	mov	r0, r8
   1b5a6:	f7ff fd63 	bl	1b070 <bt_att_create_pdu>
   1b5aa:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b5ac:	b338      	cbz	r0, 1b5fe <att_read_rsp+0x9e>
	data.offset = offset;
   1b5ae:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1b5b2:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b5b6:	2301      	movs	r3, #1
   1b5b8:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b5bc:	4a11      	ldr	r2, [pc, #68]	; (1b604 <att_read_rsp+0xa4>)
	data.chan = chan;
   1b5be:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b5c0:	466b      	mov	r3, sp
   1b5c2:	4631      	mov	r1, r6
   1b5c4:	4630      	mov	r0, r6
   1b5c6:	f00f fcb7 	bl	2af38 <bt_gatt_foreach_attr>
	if (data.err) {
   1b5ca:	f89d 500c 	ldrb.w	r5, [sp, #12]
   1b5ce:	b17d      	cbz	r5, 1b5f0 <att_read_rsp+0x90>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b5d0:	9b02      	ldr	r3, [sp, #8]
   1b5d2:	6958      	ldr	r0, [r3, #20]
   1b5d4:	f7ff f894 	bl	1a700 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1b5d8:	9802      	ldr	r0, [sp, #8]
   1b5da:	f003 ffcb 	bl	1f574 <net_buf_unref>
	if (!req) {
   1b5de:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b5e2:	4632      	mov	r2, r6
   1b5e4:	4639      	mov	r1, r7
   1b5e6:	4620      	mov	r0, r4
   1b5e8:	f00f ffdd 	bl	2b5a6 <send_err_rsp.part.0>
		return 0;
   1b5ec:	2500      	movs	r5, #0
   1b5ee:	e7cd      	b.n	1b58c <att_read_rsp+0x2c>
	bt_att_chan_send_rsp(chan, data.buf);
   1b5f0:	9902      	ldr	r1, [sp, #8]
   1b5f2:	4620      	mov	r0, r4
   1b5f4:	f00f fda3 	bl	2b13e <bt_att_chan_send_rsp>
	return 0;
   1b5f8:	e7c8      	b.n	1b58c <att_read_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1b5fa:	2501      	movs	r5, #1
   1b5fc:	e7c6      	b.n	1b58c <att_read_rsp+0x2c>
		return BT_ATT_ERR_UNLIKELY;
   1b5fe:	250e      	movs	r5, #14
   1b600:	e7c4      	b.n	1b58c <att_read_rsp+0x2c>
   1b602:	bf00      	nop
   1b604:	0002b2cb 	.word	0x0002b2cb

0001b608 <att_read_type_req>:
{
   1b608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1b60c:	898c      	ldrh	r4, [r1, #12]
   1b60e:	3c04      	subs	r4, #4
   1b610:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1b612:	2c02      	cmp	r4, #2
{
   1b614:	4605      	mov	r5, r0
   1b616:	b08c      	sub	sp, #48	; 0x30
   1b618:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1b61a:	d001      	beq.n	1b620 <att_read_type_req+0x18>
   1b61c:	2c10      	cmp	r4, #16
   1b61e:	d153      	bne.n	1b6c8 <att_read_type_req+0xc0>
	return net_buf_simple_pull_mem(&buf->b, len);
   1b620:	2104      	movs	r1, #4
   1b622:	3008      	adds	r0, #8
   1b624:	f011 f985 	bl	2c932 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b628:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b62c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b62e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b630:	1d01      	adds	r1, r0, #4
   1b632:	4622      	mov	r2, r4
   1b634:	4640      	mov	r0, r8
   1b636:	f00f f82f 	bl	2a698 <bt_uuid_create>
   1b63a:	b188      	cbz	r0, 1b660 <att_read_type_req+0x58>
	if (!start || !end) {
   1b63c:	b19e      	cbz	r6, 1b666 <att_read_type_req+0x5e>
   1b63e:	b18f      	cbz	r7, 1b664 <att_read_type_req+0x5c>
	if (start > end) {
   1b640:	42b7      	cmp	r7, r6
   1b642:	d310      	bcc.n	1b666 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1b644:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1b646:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   1b648:	2100      	movs	r1, #0
   1b64a:	eb0d 0002 	add.w	r0, sp, r2
   1b64e:	f012 fbe4 	bl	2de1a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1b652:	2201      	movs	r2, #1
   1b654:	2109      	movs	r1, #9
   1b656:	4620      	mov	r0, r4
   1b658:	f7ff fd0a 	bl	1b070 <bt_att_create_pdu>
   1b65c:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1b65e:	b968      	cbnz	r0, 1b67c <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   1b660:	240e      	movs	r4, #14
   1b662:	e007      	b.n	1b674 <att_read_type_req+0x6c>
			*err = 0U;
   1b664:	463e      	mov	r6, r7
	if (!req) {
   1b666:	2301      	movs	r3, #1
   1b668:	4632      	mov	r2, r6
   1b66a:	2108      	movs	r1, #8
   1b66c:	4628      	mov	r0, r5
   1b66e:	f00f ff9a 	bl	2b5a6 <send_err_rsp.part.0>
		return 0;
   1b672:	2400      	movs	r4, #0
}
   1b674:	4620      	mov	r0, r4
   1b676:	b00c      	add	sp, #48	; 0x30
   1b678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1b67c:	2101      	movs	r1, #1
   1b67e:	3008      	adds	r0, #8
	data.uuid = uuid;
   1b680:	e9cd 5806 	strd	r5, r8, [sp, #24]
   1b684:	f011 f92e 	bl	2c8e4 <net_buf_simple_add>
	data.rsp->len = 0U;
   1b688:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1b68c:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1b68e:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1b690:	4a0e      	ldr	r2, [pc, #56]	; (1b6cc <att_read_type_req+0xc4>)
	data.rsp->len = 0U;
   1b692:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1b696:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1b698:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1b69c:	4630      	mov	r0, r6
   1b69e:	ab06      	add	r3, sp, #24
   1b6a0:	f00f fc4a 	bl	2af38 <bt_gatt_foreach_attr>
	if (data.err) {
   1b6a4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   1b6a8:	b14c      	cbz	r4, 1b6be <att_read_type_req+0xb6>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b6aa:	9b08      	ldr	r3, [sp, #32]
   1b6ac:	6958      	ldr	r0, [r3, #20]
   1b6ae:	f7ff f827 	bl	1a700 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1b6b2:	9808      	ldr	r0, [sp, #32]
   1b6b4:	f003 ff5e 	bl	1f574 <net_buf_unref>
	if (!req) {
   1b6b8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1b6bc:	e7d4      	b.n	1b668 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   1b6be:	9908      	ldr	r1, [sp, #32]
   1b6c0:	4628      	mov	r0, r5
   1b6c2:	f00f fd3c 	bl	2b13e <bt_att_chan_send_rsp>
	return 0;
   1b6c6:	e7d5      	b.n	1b674 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   1b6c8:	2404      	movs	r4, #4
   1b6ca:	e7d3      	b.n	1b674 <att_read_type_req+0x6c>
   1b6cc:	0001abbd 	.word	0x0001abbd

0001b6d0 <att_find_type_req>:
{
   1b6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b6d4:	4688      	mov	r8, r1
   1b6d6:	b086      	sub	sp, #24
   1b6d8:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1b6da:	2106      	movs	r1, #6
   1b6dc:	f108 0008 	add.w	r0, r8, #8
   1b6e0:	f011 f927 	bl	2c932 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b6e4:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   1b6e6:	b317      	cbz	r7, 1b72e <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b6e8:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   1b6ec:	f1b9 0f00 	cmp.w	r9, #0
   1b6f0:	d01c      	beq.n	1b72c <att_find_type_req+0x5c>
	if (start > end) {
   1b6f2:	454f      	cmp	r7, r9
   1b6f4:	d81b      	bhi.n	1b72e <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   1b6f6:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1b6f8:	f8ad 3002 	strh.w	r3, [sp, #2]
   1b6fc:	2400      	movs	r4, #0
   1b6fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b702:	a901      	add	r1, sp, #4
   1b704:	4668      	mov	r0, sp
	value = buf->data;
   1b706:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1b70a:	f88d 4000 	strb.w	r4, [sp]
   1b70e:	f88d 4004 	strb.w	r4, [sp, #4]
   1b712:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b716:	f00e ff91 	bl	2a63c <bt_uuid_cmp>
   1b71a:	4606      	mov	r6, r0
   1b71c:	b190      	cbz	r0, 1b744 <att_find_type_req+0x74>
	if (!req) {
   1b71e:	230a      	movs	r3, #10
   1b720:	463a      	mov	r2, r7
   1b722:	2106      	movs	r1, #6
   1b724:	4628      	mov	r0, r5
   1b726:	f00f ff3e 	bl	2b5a6 <send_err_rsp.part.0>
		return 0;
   1b72a:	e007      	b.n	1b73c <att_find_type_req+0x6c>
			*err = 0U;
   1b72c:	464f      	mov	r7, r9
	if (!req) {
   1b72e:	2301      	movs	r3, #1
   1b730:	463a      	mov	r2, r7
   1b732:	2106      	movs	r1, #6
   1b734:	4628      	mov	r0, r5
   1b736:	f00f ff36 	bl	2b5a6 <send_err_rsp.part.0>
		return 0;
   1b73a:	2400      	movs	r4, #0
}
   1b73c:	4620      	mov	r0, r4
   1b73e:	b006      	add	sp, #24
   1b740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1b744:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   1b748:	f8d5 8004 	ldr.w	r8, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   1b74c:	4601      	mov	r1, r0
   1b74e:	2214      	movs	r2, #20
   1b750:	a801      	add	r0, sp, #4
   1b752:	f012 fb62 	bl	2de1a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1b756:	4632      	mov	r2, r6
   1b758:	2107      	movs	r1, #7
   1b75a:	4640      	mov	r0, r8
   1b75c:	f7ff fc88 	bl	1b070 <bt_att_create_pdu>
   1b760:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b762:	b1f8      	cbz	r0, 1b7a4 <att_find_type_req+0xd4>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1b764:	230a      	movs	r3, #10
   1b766:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b76a:	4a0f      	ldr	r2, [pc, #60]	; (1b7a8 <att_find_type_req+0xd8>)
	data.value_len = value_len;
   1b76c:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b770:	ab01      	add	r3, sp, #4
   1b772:	4649      	mov	r1, r9
   1b774:	4638      	mov	r0, r7
	data.value = value;
   1b776:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   1b77a:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b77c:	f00f fbdc 	bl	2af38 <bt_gatt_foreach_attr>
	if (data.err) {
   1b780:	f89d 4015 	ldrb.w	r4, [sp, #21]
   1b784:	b14c      	cbz	r4, 1b79a <att_find_type_req+0xca>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b786:	9b02      	ldr	r3, [sp, #8]
   1b788:	6958      	ldr	r0, [r3, #20]
   1b78a:	f7fe ffb9 	bl	1a700 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1b78e:	9802      	ldr	r0, [sp, #8]
   1b790:	f003 fef0 	bl	1f574 <net_buf_unref>
	if (!req) {
   1b794:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1b798:	e7ca      	b.n	1b730 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   1b79a:	9902      	ldr	r1, [sp, #8]
   1b79c:	4628      	mov	r0, r5
   1b79e:	f00f fcce 	bl	2b13e <bt_att_chan_send_rsp>
	return 0;
   1b7a2:	e7cb      	b.n	1b73c <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1b7a4:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1b7a6:	e7c9      	b.n	1b73c <att_find_type_req+0x6c>
   1b7a8:	0001a71d 	.word	0x0001a71d

0001b7ac <att_find_info_req>:
{
   1b7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1b7ae:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b7b0:	881e      	ldrh	r6, [r3, #0]
{
   1b7b2:	b085      	sub	sp, #20
   1b7b4:	4605      	mov	r5, r0
	if (!start || !end) {
   1b7b6:	b19e      	cbz	r6, 1b7e0 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b7b8:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   1b7ba:	b184      	cbz	r4, 1b7de <att_find_info_req+0x32>
	if (start > end) {
   1b7bc:	42a6      	cmp	r6, r4
   1b7be:	d80f      	bhi.n	1b7e0 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1b7c0:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1b7c2:	2210      	movs	r2, #16
   1b7c4:	2100      	movs	r1, #0
   1b7c6:	4668      	mov	r0, sp
   1b7c8:	f012 fb27 	bl	2de1a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1b7cc:	2200      	movs	r2, #0
   1b7ce:	2105      	movs	r1, #5
   1b7d0:	4638      	mov	r0, r7
   1b7d2:	f7ff fc4d 	bl	1b070 <bt_att_create_pdu>
   1b7d6:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1b7d8:	b958      	cbnz	r0, 1b7f2 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1b7da:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1b7dc:	e007      	b.n	1b7ee <att_find_info_req+0x42>
			*err = 0U;
   1b7de:	4626      	mov	r6, r4
	if (!req) {
   1b7e0:	2301      	movs	r3, #1
   1b7e2:	4632      	mov	r2, r6
   1b7e4:	2104      	movs	r1, #4
   1b7e6:	4628      	mov	r0, r5
   1b7e8:	f00f fedd 	bl	2b5a6 <send_err_rsp.part.0>
	return 0;
   1b7ec:	2000      	movs	r0, #0
}
   1b7ee:	b005      	add	sp, #20
   1b7f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1b7f2:	4621      	mov	r1, r4
   1b7f4:	4a0a      	ldr	r2, [pc, #40]	; (1b820 <att_find_info_req+0x74>)
	data.chan = chan;
   1b7f6:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1b7f8:	466b      	mov	r3, sp
   1b7fa:	4630      	mov	r0, r6
   1b7fc:	f00f fb9c 	bl	2af38 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1b800:	9c02      	ldr	r4, [sp, #8]
   1b802:	b944      	cbnz	r4, 1b816 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b804:	9b01      	ldr	r3, [sp, #4]
   1b806:	6958      	ldr	r0, [r3, #20]
   1b808:	f7fe ff7a 	bl	1a700 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1b80c:	9801      	ldr	r0, [sp, #4]
   1b80e:	f003 feb1 	bl	1f574 <net_buf_unref>
	if (!req) {
   1b812:	230a      	movs	r3, #10
   1b814:	e7e5      	b.n	1b7e2 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1b816:	9901      	ldr	r1, [sp, #4]
   1b818:	4628      	mov	r0, r5
   1b81a:	f00f fc90 	bl	2b13e <bt_att_chan_send_rsp>
   1b81e:	e7e5      	b.n	1b7ec <att_find_info_req+0x40>
   1b820:	0002b035 	.word	0x0002b035

0001b824 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1b824:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1b826:	4d0a      	ldr	r5, [pc, #40]	; (1b850 <bt_att_init+0x2c>)
   1b828:	4c0a      	ldr	r4, [pc, #40]	; (1b854 <bt_att_init+0x30>)
   1b82a:	4629      	mov	r1, r5
   1b82c:	4620      	mov	r0, r4
   1b82e:	f011 fe5f 	bl	2d4f0 <k_queue_append>
   1b832:	f105 0114 	add.w	r1, r5, #20
   1b836:	4620      	mov	r0, r4
   1b838:	f011 fe5a 	bl	2d4f0 <k_queue_append>
   1b83c:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1b840:	4620      	mov	r0, r4
   1b842:	f011 fe55 	bl	2d4f0 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1b846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1b84a:	f000 bddf 	b.w	1c40c <bt_gatt_init>
   1b84e:	bf00      	nop
   1b850:	20005c54 	.word	0x20005c54
   1b854:	20000bd0 	.word	0x20000bd0

0001b858 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1b858:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   1b85a:	2300      	movs	r3, #0
{
   1b85c:	4605      	mov	r5, r0
   1b85e:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1b860:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1b862:	f008 fb83 	bl	23f6c <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1b866:	4b0b      	ldr	r3, [pc, #44]	; (1b894 <bt_att_req_alloc+0x3c>)
   1b868:	681b      	ldr	r3, [r3, #0]
   1b86a:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   1b86c:	bf04      	itt	eq
   1b86e:	2500      	moveq	r5, #0
   1b870:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1b872:	a901      	add	r1, sp, #4
   1b874:	4808      	ldr	r0, [pc, #32]	; (1b898 <bt_att_req_alloc+0x40>)
   1b876:	462a      	mov	r2, r5
   1b878:	4623      	mov	r3, r4
   1b87a:	f007 fc51 	bl	23120 <k_mem_slab_alloc>
   1b87e:	4601      	mov	r1, r0
   1b880:	b930      	cbnz	r0, 1b890 <bt_att_req_alloc+0x38>
__ssp_bos_icheck3(memset, void *, int)
   1b882:	9801      	ldr	r0, [sp, #4]
   1b884:	221c      	movs	r2, #28
   1b886:	f012 fac8 	bl	2de1a <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
   1b88a:	9801      	ldr	r0, [sp, #4]
}
   1b88c:	b003      	add	sp, #12
   1b88e:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1b890:	2000      	movs	r0, #0
   1b892:	e7fb      	b.n	1b88c <bt_att_req_alloc+0x34>
   1b894:	20005c34 	.word	0x20005c34
   1b898:	20000abc 	.word	0x20000abc

0001b89c <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1b89c:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("req %p", req);

	if (req->buf) {
   1b89e:	6883      	ldr	r3, [r0, #8]
{
   1b8a0:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   1b8a2:	b14b      	cbz	r3, 1b8b8 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1b8a4:	6958      	ldr	r0, [r3, #20]
   1b8a6:	f7fe ff2b 	bl	1a700 <tx_meta_data_free>
		net_buf_unref(req->buf);
   1b8aa:	9b01      	ldr	r3, [sp, #4]
   1b8ac:	6898      	ldr	r0, [r3, #8]
   1b8ae:	f003 fe61 	bl	1f574 <net_buf_unref>
		req->buf = NULL;
   1b8b2:	9b01      	ldr	r3, [sp, #4]
   1b8b4:	2200      	movs	r2, #0
   1b8b6:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1b8b8:	4803      	ldr	r0, [pc, #12]	; (1b8c8 <bt_att_req_free+0x2c>)
   1b8ba:	a901      	add	r1, sp, #4
   1b8bc:	f011 fd50 	bl	2d360 <k_mem_slab_free>
}
   1b8c0:	b003      	add	sp, #12
   1b8c2:	f85d fb04 	ldr.w	pc, [sp], #4
   1b8c6:	bf00      	nop
   1b8c8:	20000abc 	.word	0x20000abc

0001b8cc <att_handle_rsp>:
{
   1b8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8d0:	4604      	mov	r4, r0
   1b8d2:	b089      	sub	sp, #36	; 0x24
	k_work_cancel_delayable(&chan->timeout_work);
   1b8d4:	30b0      	adds	r0, #176	; 0xb0
{
   1b8d6:	4689      	mov	r9, r1
   1b8d8:	4692      	mov	sl, r2
   1b8da:	4698      	mov	r8, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1b8dc:	f011 ff2b 	bl	2d736 <k_work_cancel_delayable>
	if (!chan->req) {
   1b8e0:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
   1b8e4:	b9d5      	cbnz	r5, 1b91c <att_handle_rsp+0x50>
		BT_WARN("No pending ATT request");
   1b8e6:	4b17      	ldr	r3, [pc, #92]	; (1b944 <att_handle_rsp+0x78>)
   1b8e8:	9307      	str	r3, [sp, #28]
   1b8ea:	4817      	ldr	r0, [pc, #92]	; (1b948 <att_handle_rsp+0x7c>)
   1b8ec:	2302      	movs	r3, #2
   1b8ee:	aa06      	add	r2, sp, #24
   1b8f0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
	bt_att_func_t func = NULL;
   1b8f4:	462e      	mov	r6, r5
		BT_WARN("No pending ATT request");
   1b8f6:	9306      	str	r3, [sp, #24]
   1b8f8:	f00f fbeb 	bl	2b0d2 <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   1b8fc:	6820      	ldr	r0, [r4, #0]
   1b8fe:	f00f fd7c 	bl	2b3fa <att_req_send_process>
	if (func) {
   1b902:	b13e      	cbz	r6, 1b914 <att_handle_rsp+0x48>
		func(chan->att->conn, err, pdu, len, params);
   1b904:	6820      	ldr	r0, [r4, #0]
   1b906:	f8cd b000 	str.w	fp, [sp]
   1b90a:	6800      	ldr	r0, [r0, #0]
   1b90c:	4653      	mov	r3, sl
   1b90e:	464a      	mov	r2, r9
   1b910:	4641      	mov	r1, r8
   1b912:	47b0      	blx	r6
}
   1b914:	2000      	movs	r0, #0
   1b916:	b009      	add	sp, #36	; 0x24
   1b918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   1b91c:	4b0b      	ldr	r3, [pc, #44]	; (1b94c <att_handle_rsp+0x80>)
   1b91e:	429d      	cmp	r5, r3
   1b920:	f04f 0700 	mov.w	r7, #0
   1b924:	d103      	bne.n	1b92e <att_handle_rsp+0x62>
		chan->req = NULL;
   1b926:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
	bt_att_func_t func = NULL;
   1b92a:	463e      	mov	r6, r7
		goto process;
   1b92c:	e7e6      	b.n	1b8fc <att_handle_rsp+0x30>
	func = chan->req->func;
   1b92e:	686e      	ldr	r6, [r5, #4]
	chan->req->func = NULL;
   1b930:	606f      	str	r7, [r5, #4]
	bt_att_req_free(chan->req);
   1b932:	4628      	mov	r0, r5
	params = chan->req->user_data;
   1b934:	f8d5 b018 	ldr.w	fp, [r5, #24]
	bt_att_req_free(chan->req);
   1b938:	f7ff ffb0 	bl	1b89c <bt_att_req_free>
	chan->req = NULL;
   1b93c:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
   1b940:	e7dc      	b.n	1b8fc <att_handle_rsp+0x30>
   1b942:	bf00      	nop
   1b944:	00031007 	.word	0x00031007
   1b948:	0002e584 	.word	0x0002e584
   1b94c:	20005c38 	.word	0x20005c38

0001b950 <bt_att_disconnected>:
{
   1b950:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   1b954:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   1b958:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1b95a:	2e00      	cmp	r6, #0
   1b95c:	d063      	beq.n	1ba26 <bt_att_disconnected+0xd6>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1b95e:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
   1b962:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   1b966:	f00f fbf8 	bl	2b15a <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1b96a:	1f27      	subs	r7, r4, #4
   1b96c:	f104 0894 	add.w	r8, r4, #148	; 0x94
   1b970:	2200      	movs	r2, #0
   1b972:	2300      	movs	r3, #0
   1b974:	4640      	mov	r0, r8
   1b976:	f010 ff15 	bl	2c7a4 <net_buf_get>
   1b97a:	4605      	mov	r5, r0
   1b97c:	bb58      	cbnz	r0, 1b9d6 <bt_att_disconnected+0x86>
	if (chan->req) {
   1b97e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1b982:	b12b      	cbz	r3, 1b990 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1b984:	4602      	mov	r2, r0
   1b986:	4601      	mov	r1, r0
   1b988:	230e      	movs	r3, #14
   1b98a:	4638      	mov	r0, r7
   1b98c:	f7ff ff9e 	bl	1b8cc <att_handle_rsp>
	chan->att = NULL;
   1b990:	2300      	movs	r3, #0
   1b992:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   1b996:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1b998:	2b00      	cmp	r3, #0
   1b99a:	d144      	bne.n	1ba26 <bt_att_disconnected+0xd6>
	att_reset(att);
   1b99c:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_slist_get(&att->prep_queue))) {
   1b99e:	9803      	ldr	r0, [sp, #12]
   1b9a0:	3024      	adds	r0, #36	; 0x24
   1b9a2:	f010 ff41 	bl	2c828 <net_buf_slist_get>
   1b9a6:	4605      	mov	r5, r0
   1b9a8:	b9e0      	cbnz	r0, 1b9e4 <bt_att_disconnected+0x94>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1b9aa:	9803      	ldr	r0, [sp, #12]
   1b9ac:	2200      	movs	r2, #0
   1b9ae:	2300      	movs	r3, #0
   1b9b0:	300c      	adds	r0, #12
   1b9b2:	f010 fef7 	bl	2c7a4 <net_buf_get>
   1b9b6:	4605      	mov	r5, r0
   1b9b8:	b9d8      	cbnz	r0, 1b9f2 <bt_att_disconnected+0xa2>
	while (!sys_slist_is_empty(&att->reqs)) {
   1b9ba:	9803      	ldr	r0, [sp, #12]
	return list->head;
   1b9bc:	6845      	ldr	r5, [r0, #4]
   1b9be:	b9fd      	cbnz	r5, 1ba00 <bt_att_disconnected+0xb0>
	att->conn = NULL;
   1b9c0:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1b9c2:	a903      	add	r1, sp, #12
   1b9c4:	4819      	ldr	r0, [pc, #100]	; (1ba2c <bt_att_disconnected+0xdc>)
   1b9c6:	f011 fccb 	bl	2d360 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1b9ca:	6820      	ldr	r0, [r4, #0]
}
   1b9cc:	b004      	add	sp, #16
   1b9ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1b9d2:	f001 bb63 	b.w	1d09c <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1b9d6:	6968      	ldr	r0, [r5, #20]
   1b9d8:	f7fe fe92 	bl	1a700 <tx_meta_data_free>
		net_buf_unref(buf);
   1b9dc:	4628      	mov	r0, r5
   1b9de:	f003 fdc9 	bl	1f574 <net_buf_unref>
   1b9e2:	e7c5      	b.n	1b970 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1b9e4:	6968      	ldr	r0, [r5, #20]
   1b9e6:	f7fe fe8b 	bl	1a700 <tx_meta_data_free>
		net_buf_unref(buf);
   1b9ea:	4628      	mov	r0, r5
   1b9ec:	f003 fdc2 	bl	1f574 <net_buf_unref>
   1b9f0:	e7d5      	b.n	1b99e <bt_att_disconnected+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1b9f2:	6968      	ldr	r0, [r5, #20]
   1b9f4:	f7fe fe84 	bl	1a700 <tx_meta_data_free>
		net_buf_unref(buf);
   1b9f8:	4628      	mov	r0, r5
   1b9fa:	f003 fdbb 	bl	1f574 <net_buf_unref>
   1b9fe:	e7d4      	b.n	1b9aa <bt_att_disconnected+0x5a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ba00:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   1ba02:	686e      	ldr	r6, [r5, #4]
	return node->next;
   1ba04:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1ba06:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ba08:	4295      	cmp	r5, r2
	list->tail = node;
   1ba0a:	bf08      	it	eq
   1ba0c:	6083      	streq	r3, [r0, #8]
   1ba0e:	b136      	cbz	r6, 1ba1e <bt_att_disconnected+0xce>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1ba10:	69ab      	ldr	r3, [r5, #24]
   1ba12:	9300      	str	r3, [sp, #0]
   1ba14:	2300      	movs	r3, #0
   1ba16:	6800      	ldr	r0, [r0, #0]
   1ba18:	461a      	mov	r2, r3
   1ba1a:	210e      	movs	r1, #14
   1ba1c:	47b0      	blx	r6
		bt_att_req_free(req);
   1ba1e:	4628      	mov	r0, r5
   1ba20:	f7ff ff3c 	bl	1b89c <bt_att_req_free>
   1ba24:	e7c9      	b.n	1b9ba <bt_att_disconnected+0x6a>
}
   1ba26:	b004      	add	sp, #16
   1ba28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ba2c:	20000a84 	.word	0x20000a84

0001ba30 <att_timeout>:
{
   1ba30:	b510      	push	{r4, lr}
   1ba32:	4604      	mov	r4, r0
   1ba34:	b086      	sub	sp, #24
	BT_ERR("ATT Timeout");
   1ba36:	4b08      	ldr	r3, [pc, #32]	; (1ba58 <att_timeout+0x28>)
   1ba38:	9305      	str	r3, [sp, #20]
   1ba3a:	4808      	ldr	r0, [pc, #32]	; (1ba5c <att_timeout+0x2c>)
   1ba3c:	2302      	movs	r3, #2
   1ba3e:	aa04      	add	r2, sp, #16
   1ba40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ba44:	9304      	str	r3, [sp, #16]
   1ba46:	f00f fb44 	bl	2b0d2 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   1ba4a:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
}
   1ba4e:	b006      	add	sp, #24
   1ba50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1ba54:	f7ff bf7c 	b.w	1b950 <bt_att_disconnected>
   1ba58:	0003101e 	.word	0x0003101e
   1ba5c:	0002e584 	.word	0x0002e584

0001ba60 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1ba60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ba62:	4d0f      	ldr	r5, [pc, #60]	; (1baa0 <find_cf_cfg+0x40>)
   1ba64:	4604      	mov	r4, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1ba66:	2700      	movs	r7, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1ba68:	462e      	mov	r6, r5

		if (!conn) {
   1ba6a:	1c68      	adds	r0, r5, #1
   1ba6c:	b964      	cbnz	r4, 1ba88 <find_cf_cfg+0x28>
   1ba6e:	2207      	movs	r2, #7
   1ba70:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1ba72:	9400      	str	r4, [sp, #0]
   1ba74:	f8cd 4003 	str.w	r4, [sp, #3]
   1ba78:	f012 f99e 	bl	2ddb8 <memcmp>
   1ba7c:	b958      	cbnz	r0, 1ba96 <find_cf_cfg+0x36>
			return cfg;
		}
	}

	return NULL;
}
   1ba7e:	4630      	mov	r0, r6
   1ba80:	b003      	add	sp, #12
   1ba82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ba84:	2701      	movs	r7, #1
   1ba86:	e7ef      	b.n	1ba68 <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1ba88:	4602      	mov	r2, r0
   1ba8a:	7829      	ldrb	r1, [r5, #0]
   1ba8c:	4620      	mov	r0, r4
   1ba8e:	f00f f90f 	bl	2acb0 <bt_conn_is_peer_addr_le>
   1ba92:	2800      	cmp	r0, #0
   1ba94:	d1f3      	bne.n	1ba7e <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1ba96:	3510      	adds	r5, #16
   1ba98:	2f00      	cmp	r7, #0
   1ba9a:	d0f3      	beq.n	1ba84 <find_cf_cfg+0x24>
	return NULL;
   1ba9c:	2600      	movs	r6, #0
   1ba9e:	e7ee      	b.n	1ba7e <find_cf_cfg+0x1e>
   1baa0:	20005c98 	.word	0x20005c98

0001baa4 <ccc_set_direct.part.0>:
	return ccc_set(name, len_rd, read_cb, cb_arg);
}

SETTINGS_STATIC_HANDLER_DEFINE(bt_ccc, "bt/ccc", NULL, ccc_set_cb, NULL, NULL);

static int ccc_set_direct(const char *key, size_t len, settings_read_cb read_cb,
   1baa4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

		BT_DBG("key: %s", (const char *)param);

		/* Only "bt/ccc" settings should ever come here */
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
			BT_ERR("Invalid key");
   1baa6:	4b07      	ldr	r3, [pc, #28]	; (1bac4 <ccc_set_direct.part.0+0x20>)
   1baa8:	9305      	str	r3, [sp, #20]
   1baaa:	4807      	ldr	r0, [pc, #28]	; (1bac8 <ccc_set_direct.part.0+0x24>)
   1baac:	2302      	movs	r3, #2
   1baae:	aa04      	add	r2, sp, #16
   1bab0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bab4:	9304      	str	r3, [sp, #16]
   1bab6:	f010 f83a 	bl	2bb2e <z_log_msg_static_create.constprop.0>
		}

		return ccc_set(name, len, read_cb, cb_arg);
	}
	return 0;
}
   1baba:	f06f 0015 	mvn.w	r0, #21
   1babe:	b007      	add	sp, #28
   1bac0:	f85d fb04 	ldr.w	pc, [sp], #4
   1bac4:	00031031 	.word	0x00031031
   1bac8:	0002e5b4 	.word	0x0002e5b4

0001bacc <db_hash_commit>:

	return 0;
}

static int db_hash_commit(void)
{
   1bacc:	b5b0      	push	{r4, r5, r7, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1bace:	2108      	movs	r1, #8
   1bad0:	af00      	add	r7, sp, #0
   1bad2:	480f      	ldr	r0, [pc, #60]	; (1bb10 <db_hash_commit+0x44>)
   1bad4:	f00f ff68 	bl	2b9a8 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	if (IS_ENABLED(CONFIG_BT_LONG_WQ)) {
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   1bad8:	480e      	ldr	r0, [pc, #56]	; (1bb14 <db_hash_commit+0x48>)
   1bada:	2200      	movs	r2, #0
   1badc:	2300      	movs	r3, #0
   1bade:	f7fb fd31 	bl	17544 <bt_long_wq_reschedule>
	/* Settings commit uses non-zero value to indicate failure. */
	if (err > 0) {
		err = 0;
	}

	if (err) {
   1bae2:	1e04      	subs	r4, r0, #0
   1bae4:	da11      	bge.n	1bb0a <db_hash_commit+0x3e>
		BT_ERR("Unable to reschedule database hash process (err %d)", err);
   1bae6:	466d      	mov	r5, sp
   1bae8:	b088      	sub	sp, #32
   1baea:	466a      	mov	r2, sp
   1baec:	4b0a      	ldr	r3, [pc, #40]	; (1bb18 <db_hash_commit+0x4c>)
   1baee:	480b      	ldr	r0, [pc, #44]	; (1bb1c <db_hash_commit+0x50>)
   1baf0:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1baf4:	2303      	movs	r3, #3
   1baf6:	f842 3f10 	str.w	r3, [r2, #16]!
   1bafa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bafe:	f010 f816 	bl	2bb2e <z_log_msg_static_create.constprop.0>
   1bb02:	46ad      	mov	sp, r5
	}

	return err;
}
   1bb04:	4620      	mov	r0, r4
   1bb06:	46bd      	mov	sp, r7
   1bb08:	bdb0      	pop	{r4, r5, r7, pc}
	if (err) {
   1bb0a:	2400      	movs	r4, #0
	return err;
   1bb0c:	e7fa      	b.n	1bb04 <db_hash_commit+0x38>
   1bb0e:	bf00      	nop
   1bb10:	200021b0 	.word	0x200021b0
   1bb14:	200020d0 	.word	0x200020d0
   1bb18:	0003103d 	.word	0x0003103d
   1bb1c:	0002e5b4 	.word	0x0002e5b4

0001bb20 <sc_store>:
{
   1bb20:	b5b0      	push	{r4, r5, r7, lr}
	if (cfg->id) {
   1bb22:	4605      	mov	r5, r0
{
   1bb24:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   1bb26:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1bb2a:	af02      	add	r7, sp, #8
   1bb2c:	4604      	mov	r4, r0
	if (cfg->id) {
   1bb2e:	b31a      	cbz	r2, 1bb78 <sc_store+0x58>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1bb30:	2104      	movs	r1, #4
   1bb32:	4638      	mov	r0, r7
   1bb34:	f00d fc2b 	bl	2938e <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   1bb38:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   1bb3a:	4a10      	ldr	r2, [pc, #64]	; (1bb7c <sc_store+0x5c>)
   1bb3c:	2124      	movs	r1, #36	; 0x24
   1bb3e:	1d38      	adds	r0, r7, #4
   1bb40:	462b      	mov	r3, r5
   1bb42:	f7fb fc4f 	bl	173e4 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1bb46:	2204      	movs	r2, #4
   1bb48:	f104 0108 	add.w	r1, r4, #8
   1bb4c:	18b8      	adds	r0, r7, r2
   1bb4e:	f7fa f9d3 	bl	15ef8 <settings_save_one>
	if (err) {
   1bb52:	b170      	cbz	r0, 1bb72 <sc_store+0x52>
		BT_ERR("failed to store SC (err %d)", err);
   1bb54:	466c      	mov	r4, sp
   1bb56:	b088      	sub	sp, #32
   1bb58:	aa02      	add	r2, sp, #8
   1bb5a:	4b09      	ldr	r3, [pc, #36]	; (1bb80 <sc_store+0x60>)
   1bb5c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1bb60:	2303      	movs	r3, #3
   1bb62:	f842 3f10 	str.w	r3, [r2, #16]!
   1bb66:	4807      	ldr	r0, [pc, #28]	; (1bb84 <sc_store+0x64>)
   1bb68:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bb6c:	f00f ffdf 	bl	2bb2e <z_log_msg_static_create.constprop.0>
   1bb70:	46a5      	mov	sp, r4
}
   1bb72:	3728      	adds	r7, #40	; 0x28
   1bb74:	46bd      	mov	sp, r7
   1bb76:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   1bb78:	9200      	str	r2, [sp, #0]
   1bb7a:	e7de      	b.n	1bb3a <sc_store+0x1a>
   1bb7c:	00031366 	.word	0x00031366
   1bb80:	00031071 	.word	0x00031071
   1bb84:	0002e5b4 	.word	0x0002e5b4

0001bb88 <cf_write>:
{
   1bb88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb8c:	b086      	sub	sp, #24
   1bb8e:	4698      	mov	r8, r3
   1bb90:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	if (offset > sizeof(cfg->data)) {
   1bb94:	2b01      	cmp	r3, #1
{
   1bb96:	4606      	mov	r6, r0
   1bb98:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1bb9a:	d83e      	bhi.n	1bc1a <cf_write+0x92>
	if (offset + len > sizeof(cfg->data)) {
   1bb9c:	4443      	add	r3, r8
   1bb9e:	2b01      	cmp	r3, #1
   1bba0:	4645      	mov	r5, r8
   1bba2:	dc3d      	bgt.n	1bc20 <cf_write+0x98>
	cfg = find_cf_cfg(conn);
   1bba4:	f7ff ff5c 	bl	1ba60 <find_cf_cfg>
	if (!cfg) {
   1bba8:	4604      	mov	r4, r0
   1bbaa:	b918      	cbnz	r0, 1bbb4 <cf_write+0x2c>
		cfg = find_cf_cfg(NULL);
   1bbac:	f7ff ff58 	bl	1ba60 <find_cf_cfg>
	if (!cfg) {
   1bbb0:	4604      	mov	r4, r0
   1bbb2:	b180      	cbz	r0, 1bbd6 <cf_write+0x4e>
{
   1bbb4:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1bbb6:	f1b8 0f00 	cmp.w	r8, #0
   1bbba:	d11c      	bne.n	1bbf6 <cf_write+0x6e>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1bbbc:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1bbc0:	1c60      	adds	r0, r4, #1
   1bbc2:	f00f ff0f 	bl	2b9e4 <bt_addr_le_copy>
	cfg->id = conn->id;
   1bbc6:	4620      	mov	r0, r4
   1bbc8:	7a33      	ldrb	r3, [r6, #8]
   1bbca:	f800 3b0c 	strb.w	r3, [r0], #12
   1bbce:	2101      	movs	r1, #1
   1bbd0:	f00f feea 	bl	2b9a8 <atomic_or>
}
   1bbd4:	e00b      	b.n	1bbee <cf_write+0x66>
		BT_WARN("No space to store Client Supported Features");
   1bbd6:	4b15      	ldr	r3, [pc, #84]	; (1bc2c <cf_write+0xa4>)
   1bbd8:	9305      	str	r3, [sp, #20]
   1bbda:	4815      	ldr	r0, [pc, #84]	; (1bc30 <cf_write+0xa8>)
   1bbdc:	2302      	movs	r3, #2
   1bbde:	aa04      	add	r2, sp, #16
   1bbe0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1bbe4:	f06f 0510 	mvn.w	r5, #16
		BT_WARN("No space to store Client Supported Features");
   1bbe8:	9304      	str	r3, [sp, #16]
   1bbea:	f00f ffa0 	bl	2bb2e <z_log_msg_static_create.constprop.0>
}
   1bbee:	4628      	mov	r0, r5
   1bbf0:	b006      	add	sp, #24
   1bbf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1bbf6:	7a20      	ldrb	r0, [r4, #8]
   1bbf8:	fa20 f301 	lsr.w	r3, r0, r1
   1bbfc:	07da      	lsls	r2, r3, #31
   1bbfe:	d503      	bpl.n	1bc08 <cf_write+0x80>
		    !(value[i / 8] & BIT(i % 8))) {
   1bc00:	783b      	ldrb	r3, [r7, #0]
   1bc02:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1bc04:	07db      	lsls	r3, r3, #31
   1bc06:	d50e      	bpl.n	1bc26 <cf_write+0x9e>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1bc08:	3101      	adds	r1, #1
   1bc0a:	2903      	cmp	r1, #3
   1bc0c:	d1d3      	bne.n	1bbb6 <cf_write+0x2e>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1bc0e:	783b      	ldrb	r3, [r7, #0]
   1bc10:	f003 0307 	and.w	r3, r3, #7
   1bc14:	4318      	orrs	r0, r3
   1bc16:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1bc18:	e7d0      	b.n	1bbbc <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bc1a:	f06f 0506 	mvn.w	r5, #6
   1bc1e:	e7e6      	b.n	1bbee <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1bc20:	f06f 050c 	mvn.w	r5, #12
   1bc24:	e7e3      	b.n	1bbee <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1bc26:	f06f 0512 	mvn.w	r5, #18
   1bc2a:	e7e0      	b.n	1bbee <cf_write+0x66>
   1bc2c:	0003108d 	.word	0x0003108d
   1bc30:	0002e5b4 	.word	0x0002e5b4

0001bc34 <db_hash_store>:
{
   1bc34:	b598      	push	{r3, r4, r7, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1bc36:	490c      	ldr	r1, [pc, #48]	; (1bc68 <db_hash_store+0x34>)
   1bc38:	480c      	ldr	r0, [pc, #48]	; (1bc6c <db_hash_store+0x38>)
{
   1bc3a:	af00      	add	r7, sp, #0
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1bc3c:	2210      	movs	r2, #16
   1bc3e:	f7fa f95b 	bl	15ef8 <settings_save_one>
	if (err) {
   1bc42:	b170      	cbz	r0, 1bc62 <db_hash_store+0x2e>
		BT_ERR("Failed to save Database Hash (err %d)", err);
   1bc44:	466c      	mov	r4, sp
   1bc46:	b088      	sub	sp, #32
   1bc48:	466a      	mov	r2, sp
   1bc4a:	4b09      	ldr	r3, [pc, #36]	; (1bc70 <db_hash_store+0x3c>)
   1bc4c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1bc50:	2303      	movs	r3, #3
   1bc52:	f842 3f10 	str.w	r3, [r2, #16]!
   1bc56:	4807      	ldr	r0, [pc, #28]	; (1bc74 <db_hash_store+0x40>)
   1bc58:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bc5c:	f00f ff67 	bl	2bb2e <z_log_msg_static_create.constprop.0>
   1bc60:	46a5      	mov	sp, r4
}
   1bc62:	46bd      	mov	sp, r7
   1bc64:	bd98      	pop	{r3, r4, r7, pc}
   1bc66:	bf00      	nop
   1bc68:	200020b0 	.word	0x200020b0
   1bc6c:	000310b9 	.word	0x000310b9
   1bc70:	000310c1 	.word	0x000310c1
   1bc74:	0002e5b4 	.word	0x0002e5b4

0001bc78 <db_hash_set>:
{
   1bc78:	b5b0      	push	{r4, r5, r7, lr}
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1bc7a:	490e      	ldr	r1, [pc, #56]	; (1bcb4 <db_hash_set+0x3c>)
{
   1bc7c:	4614      	mov	r4, r2
   1bc7e:	af00      	add	r7, sp, #0
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1bc80:	2210      	movs	r2, #16
   1bc82:	4618      	mov	r0, r3
   1bc84:	47a0      	blx	r4
	if (len < 0) {
   1bc86:	1e04      	subs	r4, r0, #0
   1bc88:	da11      	bge.n	1bcae <db_hash_set+0x36>
		BT_ERR("Failed to decode value (err %zd)", len);
   1bc8a:	466d      	mov	r5, sp
   1bc8c:	b088      	sub	sp, #32
   1bc8e:	466a      	mov	r2, sp
   1bc90:	4b09      	ldr	r3, [pc, #36]	; (1bcb8 <db_hash_set+0x40>)
   1bc92:	480a      	ldr	r0, [pc, #40]	; (1bcbc <db_hash_set+0x44>)
   1bc94:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1bc98:	2303      	movs	r3, #3
   1bc9a:	f842 3f10 	str.w	r3, [r2, #16]!
   1bc9e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bca2:	f00f ff44 	bl	2bb2e <z_log_msg_static_create.constprop.0>
   1bca6:	46ad      	mov	sp, r5
}
   1bca8:	4620      	mov	r0, r4
   1bcaa:	46bd      	mov	sp, r7
   1bcac:	bdb0      	pop	{r4, r5, r7, pc}
	return 0;
   1bcae:	2400      	movs	r4, #0
   1bcb0:	e7fa      	b.n	1bca8 <db_hash_set+0x30>
   1bcb2:	bf00      	nop
   1bcb4:	200020c0 	.word	0x200020c0
   1bcb8:	000310e7 	.word	0x000310e7
   1bcbc:	0002e5b4 	.word	0x0002e5b4

0001bcc0 <sc_commit>:
{
   1bcc0:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bcc2:	4809      	ldr	r0, [pc, #36]	; (1bce8 <sc_commit+0x28>)
   1bcc4:	f06f 0102 	mvn.w	r1, #2
   1bcc8:	f00f fe7d 	bl	2b9c6 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1bccc:	4806      	ldr	r0, [pc, #24]	; (1bce8 <sc_commit+0x28>)
   1bcce:	f00f fe65 	bl	2b99c <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1bcd2:	07c3      	lsls	r3, r0, #31
   1bcd4:	d505      	bpl.n	1bce2 <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1bcd6:	4805      	ldr	r0, [pc, #20]	; (1bcec <sc_commit+0x2c>)
   1bcd8:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1bcdc:	2300      	movs	r3, #0
   1bcde:	f007 fe33 	bl	23948 <k_work_reschedule>
}
   1bce2:	2000      	movs	r0, #0
   1bce4:	bd08      	pop	{r3, pc}
   1bce6:	bf00      	nop
   1bce8:	200021b0 	.word	0x200021b0
   1bcec:	20002180 	.word	0x20002180

0001bcf0 <find_cf_cfg_by_addr>:
{
   1bcf0:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   1bcf2:	4c0e      	ldr	r4, [pc, #56]	; (1bd2c <find_cf_cfg_by_addr+0x3c>)
   1bcf4:	7823      	ldrb	r3, [r4, #0]
   1bcf6:	4283      	cmp	r3, r0
{
   1bcf8:	4606      	mov	r6, r0
   1bcfa:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   1bcfc:	d00a      	beq.n	1bd14 <find_cf_cfg_by_addr+0x24>
   1bcfe:	7c23      	ldrb	r3, [r4, #16]
   1bd00:	42b3      	cmp	r3, r6
   1bd02:	d111      	bne.n	1bd28 <find_cf_cfg_by_addr+0x38>
   1bd04:	490a      	ldr	r1, [pc, #40]	; (1bd30 <find_cf_cfg_by_addr+0x40>)
   1bd06:	2207      	movs	r2, #7
   1bd08:	4628      	mov	r0, r5
   1bd0a:	f012 f855 	bl	2ddb8 <memcmp>
   1bd0e:	b958      	cbnz	r0, 1bd28 <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1bd10:	2001      	movs	r0, #1
   1bd12:	e006      	b.n	1bd22 <find_cf_cfg_by_addr+0x32>
   1bd14:	2207      	movs	r2, #7
   1bd16:	1c61      	adds	r1, r4, #1
   1bd18:	4628      	mov	r0, r5
   1bd1a:	f012 f84d 	bl	2ddb8 <memcmp>
			if (id == cf_cfg[i].id &&
   1bd1e:	2800      	cmp	r0, #0
   1bd20:	d1ed      	bne.n	1bcfe <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
   1bd22:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   1bd26:	e000      	b.n	1bd2a <find_cf_cfg_by_addr+0x3a>
	return NULL;
   1bd28:	2000      	movs	r0, #0
}
   1bd2a:	bd70      	pop	{r4, r5, r6, pc}
   1bd2c:	20005c98 	.word	0x20005c98
   1bd30:	20005ca9 	.word	0x20005ca9

0001bd34 <cf_set>:
{
   1bd34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bd38:	b08b      	sub	sp, #44	; 0x2c
   1bd3a:	4689      	mov	r9, r1
   1bd3c:	af00      	add	r7, sp, #0
   1bd3e:	4616      	mov	r6, r2
   1bd40:	4698      	mov	r8, r3
	if (!name) {
   1bd42:	4605      	mov	r5, r0
   1bd44:	b988      	cbnz	r0, 1bd6a <cf_set+0x36>
		BT_ERR("Insufficient number of arguments");
   1bd46:	4b40      	ldr	r3, [pc, #256]	; (1be48 <cf_set+0x114>)
   1bd48:	627b      	str	r3, [r7, #36]	; 0x24
   1bd4a:	4840      	ldr	r0, [pc, #256]	; (1be4c <cf_set+0x118>)
   1bd4c:	2302      	movs	r3, #2
   1bd4e:	f107 0220 	add.w	r2, r7, #32
   1bd52:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bd56:	623b      	str	r3, [r7, #32]
   1bd58:	f00f fee9 	bl	2bb2e <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1bd5c:	f06f 0415 	mvn.w	r4, #21
}
   1bd60:	4620      	mov	r0, r4
   1bd62:	372c      	adds	r7, #44	; 0x2c
   1bd64:	46bd      	mov	sp, r7
   1bd66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1bd6a:	f107 0108 	add.w	r1, r7, #8
   1bd6e:	f00e fc41 	bl	2a5f4 <bt_settings_decode_key>
	if (err) {
   1bd72:	4604      	mov	r4, r0
   1bd74:	b188      	cbz	r0, 1bd9a <cf_set+0x66>
		BT_ERR("Unable to decode address %s", name);
   1bd76:	466c      	mov	r4, sp
   1bd78:	b088      	sub	sp, #32
   1bd7a:	466a      	mov	r2, sp
   1bd7c:	4b34      	ldr	r3, [pc, #208]	; (1be50 <cf_set+0x11c>)
   1bd7e:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1bd82:	2302      	movs	r3, #2
   1bd84:	7713      	strb	r3, [r2, #28]
   1bd86:	4b33      	ldr	r3, [pc, #204]	; (1be54 <cf_set+0x120>)
   1bd88:	f842 3f10 	str.w	r3, [r2, #16]!
   1bd8c:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1bd90:	482e      	ldr	r0, [pc, #184]	; (1be4c <cf_set+0x118>)
   1bd92:	f00f fecc 	bl	2bb2e <z_log_msg_static_create.constprop.0>
   1bd96:	46a5      	mov	sp, r4
   1bd98:	e7e0      	b.n	1bd5c <cf_set+0x28>
	settings_name_next(name, &next);
   1bd9a:	1d39      	adds	r1, r7, #4
   1bd9c:	4628      	mov	r0, r5
   1bd9e:	f00e f944 	bl	2a02a <settings_name_next>
	if (!next) {
   1bda2:	6878      	ldr	r0, [r7, #4]
   1bda4:	b180      	cbz	r0, 1bdc8 <cf_set+0x94>
		unsigned long next_id = strtoul(next, NULL, 10);
   1bda6:	220a      	movs	r2, #10
   1bda8:	4621      	mov	r1, r4
   1bdaa:	f009 fbf3 	bl	25594 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1bdae:	b158      	cbz	r0, 1bdc8 <cf_set+0x94>
			BT_ERR("Invalid local identity %lu", next_id);
   1bdb0:	466c      	mov	r4, sp
   1bdb2:	b088      	sub	sp, #32
   1bdb4:	466a      	mov	r2, sp
   1bdb6:	4b28      	ldr	r3, [pc, #160]	; (1be58 <cf_set+0x124>)
   1bdb8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1bdbc:	2303      	movs	r3, #3
   1bdbe:	f842 3f10 	str.w	r3, [r2, #16]!
   1bdc2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bdc6:	e7e3      	b.n	1bd90 <cf_set+0x5c>
	cfg = find_cf_cfg_by_addr(id, &addr);
   1bdc8:	f107 0108 	add.w	r1, r7, #8
   1bdcc:	2000      	movs	r0, #0
   1bdce:	f7ff ff8f 	bl	1bcf0 <find_cf_cfg_by_addr>
	if (!cfg) {
   1bdd2:	4605      	mov	r5, r0
   1bdd4:	b9c0      	cbnz	r0, 1be08 <cf_set+0xd4>
		cfg = find_cf_cfg(NULL);
   1bdd6:	f7ff fe43 	bl	1ba60 <find_cf_cfg>
		if (!cfg) {
   1bdda:	4605      	mov	r5, r0
   1bddc:	b968      	cbnz	r0, 1bdfa <cf_set+0xc6>
			BT_ERR("Unable to restore CF: no cfg left");
   1bdde:	4b1f      	ldr	r3, [pc, #124]	; (1be5c <cf_set+0x128>)
   1bde0:	627b      	str	r3, [r7, #36]	; 0x24
   1bde2:	481a      	ldr	r0, [pc, #104]	; (1be4c <cf_set+0x118>)
   1bde4:	2302      	movs	r3, #2
   1bde6:	f107 0220 	add.w	r2, r7, #32
   1bdea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bdee:	623b      	str	r3, [r7, #32]
			return -ENOMEM;
   1bdf0:	f06f 040b 	mvn.w	r4, #11
			BT_ERR("Unable to restore CF: no cfg left");
   1bdf4:	f00f fe9b 	bl	2bb2e <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   1bdf8:	e7b2      	b.n	1bd60 <cf_set+0x2c>
		cfg->id = id;
   1bdfa:	2300      	movs	r3, #0
   1bdfc:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1be00:	f107 0108 	add.w	r1, r7, #8
   1be04:	f00f fdee 	bl	2b9e4 <bt_addr_le_copy>
	if (len_rd) {
   1be08:	f1b9 0f00 	cmp.w	r9, #0
   1be0c:	d017      	beq.n	1be3e <cf_set+0x10a>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1be0e:	f105 0108 	add.w	r1, r5, #8
   1be12:	2201      	movs	r2, #1
   1be14:	4640      	mov	r0, r8
   1be16:	47b0      	blx	r6
		if (len < 0) {
   1be18:	1e05      	subs	r5, r0, #0
   1be1a:	daa1      	bge.n	1bd60 <cf_set+0x2c>
			BT_ERR("Failed to decode value (err %zd)", len);
   1be1c:	466c      	mov	r4, sp
   1be1e:	b088      	sub	sp, #32
   1be20:	466a      	mov	r2, sp
   1be22:	4b0f      	ldr	r3, [pc, #60]	; (1be60 <cf_set+0x12c>)
   1be24:	4809      	ldr	r0, [pc, #36]	; (1be4c <cf_set+0x118>)
   1be26:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1be2a:	2303      	movs	r3, #3
   1be2c:	f842 3f10 	str.w	r3, [r2, #16]!
   1be30:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1be34:	f00f fe7b 	bl	2bb2e <z_log_msg_static_create.constprop.0>
   1be38:	46a5      	mov	sp, r4
			return len;
   1be3a:	462c      	mov	r4, r5
   1be3c:	e790      	b.n	1bd60 <cf_set+0x2c>
		clear_cf_cfg(cfg);
   1be3e:	4628      	mov	r0, r5
   1be40:	f00f fe78 	bl	2bb34 <clear_cf_cfg>
   1be44:	e78c      	b.n	1bd60 <cf_set+0x2c>
   1be46:	bf00      	nop
   1be48:	0002ff39 	.word	0x0002ff39
   1be4c:	0002e5b4 	.word	0x0002e5b4
   1be50:	00031108 	.word	0x00031108
   1be54:	01000003 	.word	0x01000003
   1be58:	00031124 	.word	0x00031124
   1be5c:	0003113f 	.word	0x0003113f
   1be60:	000310e7 	.word	0x000310e7

0001be64 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   1be64:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1be66:	6881      	ldr	r1, [r0, #8]
{
   1be68:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1be6a:	4a07      	ldr	r2, [pc, #28]	; (1be88 <remove_peer_from_attr+0x24>)
   1be6c:	4291      	cmp	r1, r2
   1be6e:	d109      	bne.n	1be84 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1be70:	791a      	ldrb	r2, [r3, #4]
   1be72:	6819      	ldr	r1, [r3, #0]
   1be74:	68c0      	ldr	r0, [r0, #12]
   1be76:	f00f fe76 	bl	2bb66 <ccc_find_cfg>
	if (cfg) {
   1be7a:	b118      	cbz	r0, 1be84 <remove_peer_from_attr+0x20>
   1be7c:	2300      	movs	r3, #0
   1be7e:	6003      	str	r3, [r0, #0]
   1be80:	6043      	str	r3, [r0, #4]
   1be82:	8103      	strh	r3, [r0, #8]
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
   1be84:	2001      	movs	r0, #1
   1be86:	bd08      	pop	{r3, pc}
   1be88:	0001bf4d 	.word	0x0001bf4d

0001be8c <ccc_load>:
{
   1be8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1be8e:	4b20      	ldr	r3, [pc, #128]	; (1bf10 <ccc_load+0x84>)
{
   1be90:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1be92:	6882      	ldr	r2, [r0, #8]
   1be94:	429a      	cmp	r2, r3
   1be96:	d002      	beq.n	1be9e <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   1be98:	2001      	movs	r0, #1
}
   1be9a:	b003      	add	sp, #12
   1be9c:	bd30      	pop	{r4, r5, pc}
	if (!load->entry) {
   1be9e:	68a3      	ldr	r3, [r4, #8]
   1bea0:	68c5      	ldr	r5, [r0, #12]
   1bea2:	b94b      	cbnz	r3, 1beb8 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   1bea4:	7922      	ldrb	r2, [r4, #4]
   1bea6:	6821      	ldr	r1, [r4, #0]
   1bea8:	4628      	mov	r0, r5
   1beaa:	f00f fe5c 	bl	2bb66 <ccc_find_cfg>
	if (!cfg) {
   1beae:	2800      	cmp	r0, #0
   1beb0:	d0f2      	beq.n	1be98 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   1beb2:	f00f fd9e 	bl	2b9f2 <clear_ccc_cfg>
   1beb6:	e7ef      	b.n	1be98 <ccc_load+0xc>
	} else if (!load->count) {
   1beb8:	68e0      	ldr	r0, [r4, #12]
   1beba:	2800      	cmp	r0, #0
   1bebc:	d0ed      	beq.n	1be9a <ccc_load+0xe>
	if (load->entry->handle != handle) {
   1bebe:	881b      	ldrh	r3, [r3, #0]
   1bec0:	4299      	cmp	r1, r3
   1bec2:	d00a      	beq.n	1beda <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   1bec4:	d9e8      	bls.n	1be98 <ccc_load+0xc>
	load->count--;
   1bec6:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   1bec8:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   1beca:	3801      	subs	r0, #1
	load->entry++;
   1becc:	3304      	adds	r3, #4
	load->count--;
   1bece:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1bed0:	3800      	subs	r0, #0
	load->entry++;
   1bed2:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1bed4:	bf18      	it	ne
   1bed6:	2001      	movne	r0, #1
   1bed8:	e7df      	b.n	1be9a <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   1beda:	7922      	ldrb	r2, [r4, #4]
   1bedc:	6821      	ldr	r1, [r4, #0]
   1bede:	4628      	mov	r0, r5
   1bee0:	f00f fe41 	bl	2bb66 <ccc_find_cfg>
	if (!cfg) {
   1bee4:	4602      	mov	r2, r0
   1bee6:	b978      	cbnz	r0, 1bf08 <ccc_load+0x7c>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   1bee8:	9000      	str	r0, [sp, #0]
   1beea:	4669      	mov	r1, sp
   1beec:	f8cd 0003 	str.w	r0, [sp, #3]
   1bef0:	4628      	mov	r0, r5
   1bef2:	f00f fe38 	bl	2bb66 <ccc_find_cfg>
		if (!cfg) {
   1bef6:	4602      	mov	r2, r0
   1bef8:	2800      	cmp	r0, #0
   1befa:	d0e4      	beq.n	1bec6 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   1befc:	6821      	ldr	r1, [r4, #0]
   1befe:	3001      	adds	r0, #1
   1bf00:	f00f fd70 	bl	2b9e4 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   1bf04:	7923      	ldrb	r3, [r4, #4]
   1bf06:	7013      	strb	r3, [r2, #0]
	cfg->value = load->entry->value;
   1bf08:	68a3      	ldr	r3, [r4, #8]
   1bf0a:	885b      	ldrh	r3, [r3, #2]
   1bf0c:	8113      	strh	r3, [r2, #8]
   1bf0e:	e7da      	b.n	1bec6 <ccc_load+0x3a>
   1bf10:	0001bf4d 	.word	0x0001bf4d

0001bf14 <ccc_save>:
{
   1bf14:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bf16:	4b0c      	ldr	r3, [pc, #48]	; (1bf48 <ccc_save+0x34>)
{
   1bf18:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bf1a:	6882      	ldr	r2, [r0, #8]
   1bf1c:	429a      	cmp	r2, r3
{
   1bf1e:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bf20:	d10f      	bne.n	1bf42 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1bf22:	7922      	ldrb	r2, [r4, #4]
   1bf24:	6821      	ldr	r1, [r4, #0]
   1bf26:	68c0      	ldr	r0, [r0, #12]
   1bf28:	f00f fe1d 	bl	2bb66 <ccc_find_cfg>
	if (!cfg) {
   1bf2c:	b148      	cbz	r0, 1bf42 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1bf2e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   1bf32:	8901      	ldrh	r1, [r0, #8]
   1bf34:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   1bf38:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   1bf3a:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   1bf3c:	8151      	strh	r1, [r2, #10]
	save->count++;
   1bf3e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   1bf42:	2001      	movs	r0, #1
   1bf44:	bd38      	pop	{r3, r4, r5, pc}
   1bf46:	bf00      	nop
   1bf48:	0001bf4d 	.word	0x0001bf4d

0001bf4c <bt_gatt_attr_write_ccc>:
{
   1bf4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bf50:	b086      	sub	sp, #24
   1bf52:	4698      	mov	r8, r3
   1bf54:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1bf58:	f8d1 a00c 	ldr.w	sl, [r1, #12]
{
   1bf5c:	4606      	mov	r6, r0
   1bf5e:	4689      	mov	r9, r1
	if (offset) {
   1bf60:	2b00      	cmp	r3, #0
   1bf62:	d16b      	bne.n	1c03c <bt_gatt_attr_write_ccc+0xf0>
	if (!len || len > sizeof(uint16_t)) {
   1bf64:	f108 33ff 	add.w	r3, r8, #4294967295
   1bf68:	2b01      	cmp	r3, #1
   1bf6a:	d86a      	bhi.n	1c042 <bt_gatt_attr_write_ccc+0xf6>
		value = *(uint8_t *)buf;
   1bf6c:	7817      	ldrb	r7, [r2, #0]
	if (len < sizeof(uint16_t)) {
   1bf6e:	f1b8 0f01 	cmp.w	r8, #1
	cfg = find_ccc_cfg(conn, ccc);
   1bf72:	4651      	mov	r1, sl
   1bf74:	bf14      	ite	ne
   1bf76:	8817      	ldrhne	r7, [r2, #0]
		value = *(uint8_t *)buf;
   1bf78:	b2bf      	uxtheq	r7, r7
	cfg = find_ccc_cfg(conn, ccc);
   1bf7a:	f00f fe03 	bl	2bb84 <find_ccc_cfg>
	if (!cfg) {
   1bf7e:	4605      	mov	r5, r0
   1bf80:	b9e8      	cbnz	r0, 1bfbe <bt_gatt_attr_write_ccc+0x72>
		if (!value) {
   1bf82:	b91f      	cbnz	r7, 1bf8c <bt_gatt_attr_write_ccc+0x40>
			return len;
   1bf84:	4640      	mov	r0, r8
}
   1bf86:	b006      	add	sp, #24
   1bf88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1bf8c:	4651      	mov	r1, sl
   1bf8e:	f00f fdf9 	bl	2bb84 <find_ccc_cfg>
		if (!cfg) {
   1bf92:	4605      	mov	r5, r0
   1bf94:	b960      	cbnz	r0, 1bfb0 <bt_gatt_attr_write_ccc+0x64>
			BT_WARN("No space to store CCC cfg");
   1bf96:	4b2c      	ldr	r3, [pc, #176]	; (1c048 <bt_gatt_attr_write_ccc+0xfc>)
   1bf98:	482c      	ldr	r0, [pc, #176]	; (1c04c <bt_gatt_attr_write_ccc+0x100>)
   1bf9a:	9305      	str	r3, [sp, #20]
   1bf9c:	aa04      	add	r2, sp, #16
   1bf9e:	2302      	movs	r3, #2
   1bfa0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1bfa4:	9304      	str	r3, [sp, #16]
   1bfa6:	f00f fdc2 	bl	2bb2e <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1bfaa:	f06f 0010 	mvn.w	r0, #16
   1bfae:	e7ea      	b.n	1bf86 <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1bfb0:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1bfb4:	3001      	adds	r0, #1
   1bfb6:	f00f fd15 	bl	2b9e4 <bt_addr_le_copy>
		cfg->id = conn->id;
   1bfba:	7a33      	ldrb	r3, [r6, #8]
   1bfbc:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   1bfbe:	f8da 3010 	ldr.w	r3, [sl, #16]
   1bfc2:	bb7b      	cbnz	r3, 1c024 <bt_gatt_attr_write_ccc+0xd8>
	if (cfg->value != ccc->value) {
   1bfc4:	f8ba 300a 	ldrh.w	r3, [sl, #10]
	value_changed = cfg->value != value;
   1bfc8:	892c      	ldrh	r4, [r5, #8]
	cfg->value = value;
   1bfca:	812f      	strh	r7, [r5, #8]
	if (cfg->value != ccc->value) {
   1bfcc:	42bb      	cmp	r3, r7
   1bfce:	d003      	beq.n	1bfd8 <bt_gatt_attr_write_ccc+0x8c>
		gatt_ccc_changed(attr, ccc);
   1bfd0:	4651      	mov	r1, sl
   1bfd2:	4648      	mov	r0, r9
   1bfd4:	f00f fc47 	bl	2b866 <gatt_ccc_changed>
	if (value_changed) {
   1bfd8:	42bc      	cmp	r4, r7
   1bfda:	d01d      	beq.n	1c018 <bt_gatt_attr_write_ccc+0xcc>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   1bfdc:	4630      	mov	r0, r6
   1bfde:	f7fd ffcb 	bl	19f78 <bt_conn_index>
   1bfe2:	4c1b      	ldr	r4, [pc, #108]	; (1c050 <bt_gatt_attr_write_ccc+0x104>)
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1bfe4:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   1bfe8:	429e      	cmp	r6, r3
   1bfea:	d015      	beq.n	1c018 <bt_gatt_attr_write_ccc+0xcc>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1bfec:	7a30      	ldrb	r0, [r6, #8]
   1bfee:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1bff2:	f00e fc8b 	bl	2a90c <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1bff6:	b178      	cbz	r0, 1c018 <bt_gatt_attr_write_ccc+0xcc>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   1bff8:	4630      	mov	r0, r6
   1bffa:	f7fd ffbd 	bl	19f78 <bt_conn_index>
   1bffe:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   1c000:	4630      	mov	r0, r6
   1c002:	f00e fd9f 	bl	2ab44 <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1c006:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   1c00a:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1c00e:	2300      	movs	r3, #0
   1c010:	f104 0008 	add.w	r0, r4, #8
   1c014:	f007 fc98 	bl	23948 <k_work_reschedule>
	if (!value) {
   1c018:	2f00      	cmp	r7, #0
   1c01a:	d1b3      	bne.n	1bf84 <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
   1c01c:	4628      	mov	r0, r5
   1c01e:	f00f fce8 	bl	2b9f2 <clear_ccc_cfg>
   1c022:	e7af      	b.n	1bf84 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1c024:	463a      	mov	r2, r7
   1c026:	4649      	mov	r1, r9
   1c028:	4630      	mov	r0, r6
   1c02a:	4798      	blx	r3
		if (write < 0) {
   1c02c:	2800      	cmp	r0, #0
   1c02e:	dbaa      	blt.n	1bf86 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1c030:	1e44      	subs	r4, r0, #1
   1c032:	2c01      	cmp	r4, #1
   1c034:	d9c6      	bls.n	1bfc4 <bt_gatt_attr_write_ccc+0x78>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1c036:	f06f 000d 	mvn.w	r0, #13
   1c03a:	e7a4      	b.n	1bf86 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c03c:	f06f 0006 	mvn.w	r0, #6
   1c040:	e7a1      	b.n	1bf86 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1c042:	f06f 000c 	mvn.w	r0, #12
   1c046:	e79e      	b.n	1bf86 <bt_gatt_attr_write_ccc+0x3a>
   1c048:	00031161 	.word	0x00031161
   1c04c:	0002e5b4 	.word	0x0002e5b4
   1c050:	20002128 	.word	0x20002128

0001c054 <find_sc_cfg>:
{
   1c054:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1c056:	4c0e      	ldr	r4, [pc, #56]	; (1c090 <find_sc_cfg+0x3c>)
   1c058:	7823      	ldrb	r3, [r4, #0]
   1c05a:	4283      	cmp	r3, r0
{
   1c05c:	4605      	mov	r5, r0
   1c05e:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   1c060:	d00a      	beq.n	1c078 <find_sc_cfg+0x24>
   1c062:	7b23      	ldrb	r3, [r4, #12]
   1c064:	42ab      	cmp	r3, r5
   1c066:	d111      	bne.n	1c08c <find_sc_cfg+0x38>
   1c068:	480a      	ldr	r0, [pc, #40]	; (1c094 <find_sc_cfg+0x40>)
   1c06a:	2207      	movs	r2, #7
   1c06c:	4631      	mov	r1, r6
   1c06e:	f011 fea3 	bl	2ddb8 <memcmp>
   1c072:	b958      	cbnz	r0, 1c08c <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1c074:	2001      	movs	r0, #1
   1c076:	e005      	b.n	1c084 <find_sc_cfg+0x30>
   1c078:	2207      	movs	r2, #7
   1c07a:	1c60      	adds	r0, r4, #1
   1c07c:	f011 fe9c 	bl	2ddb8 <memcmp>
		if (id == sc_cfg[i].id &&
   1c080:	2800      	cmp	r0, #0
   1c082:	d1ee      	bne.n	1c062 <find_sc_cfg+0xe>
			return &sc_cfg[i];
   1c084:	230c      	movs	r3, #12
   1c086:	fb03 4000 	mla	r0, r3, r0, r4
   1c08a:	e000      	b.n	1c08e <find_sc_cfg+0x3a>
	return NULL;
   1c08c:	2000      	movs	r0, #0
}
   1c08e:	bd70      	pop	{r4, r5, r6, pc}
   1c090:	20006b10 	.word	0x20006b10
   1c094:	20006b1d 	.word	0x20006b1d

0001c098 <sc_save>:
{
   1c098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c09c:	b088      	sub	sp, #32
   1c09e:	4680      	mov	r8, r0
   1c0a0:	460f      	mov	r7, r1
   1c0a2:	4616      	mov	r6, r2
   1c0a4:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1c0a6:	f7ff ffd5 	bl	1c054 <find_sc_cfg>
	if (!cfg) {
   1c0aa:	4604      	mov	r4, r0
   1c0ac:	b9c8      	cbnz	r0, 1c0e2 <sc_save+0x4a>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1c0ae:	4669      	mov	r1, sp
   1c0b0:	9000      	str	r0, [sp, #0]
   1c0b2:	f8cd 0003 	str.w	r0, [sp, #3]
   1c0b6:	f7ff ffcd 	bl	1c054 <find_sc_cfg>
		if (!cfg) {
   1c0ba:	4604      	mov	r4, r0
   1c0bc:	b960      	cbnz	r0, 1c0d8 <sc_save+0x40>
			BT_ERR("unable to save SC: no cfg left");
   1c0be:	4b17      	ldr	r3, [pc, #92]	; (1c11c <sc_save+0x84>)
   1c0c0:	9307      	str	r3, [sp, #28]
   1c0c2:	4817      	ldr	r0, [pc, #92]	; (1c120 <sc_save+0x88>)
   1c0c4:	2302      	movs	r3, #2
   1c0c6:	aa06      	add	r2, sp, #24
   1c0c8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c0cc:	9306      	str	r3, [sp, #24]
   1c0ce:	f00f fd2e 	bl	2bb2e <z_log_msg_static_create.constprop.0>
}
   1c0d2:	b008      	add	sp, #32
   1c0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1c0d8:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1c0dc:	4639      	mov	r1, r7
   1c0de:	f00f fc81 	bl	2b9e4 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1c0e2:	8922      	ldrh	r2, [r4, #8]
   1c0e4:	8963      	ldrh	r3, [r4, #10]
   1c0e6:	b97a      	cbnz	r2, 1c108 <sc_save+0x70>
   1c0e8:	b983      	cbnz	r3, 1c10c <sc_save+0x74>
		cfg->data.start = start;
   1c0ea:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1c0ec:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   1c0ee:	4621      	mov	r1, r4
   1c0f0:	f811 0b01 	ldrb.w	r0, [r1], #1
   1c0f4:	f00e fc0a 	bl	2a90c <bt_addr_le_is_bonded>
   1c0f8:	2800      	cmp	r0, #0
   1c0fa:	d0ea      	beq.n	1c0d2 <sc_save+0x3a>
		sc_store(cfg);
   1c0fc:	4620      	mov	r0, r4
}
   1c0fe:	b008      	add	sp, #32
   1c100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   1c104:	f7ff bd0c 	b.w	1bb20 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   1c108:	4296      	cmp	r6, r2
   1c10a:	d302      	bcc.n	1c112 <sc_save+0x7a>
   1c10c:	429d      	cmp	r5, r3
   1c10e:	d8ed      	bhi.n	1c0ec <sc_save+0x54>
   1c110:	e7df      	b.n	1c0d2 <sc_save+0x3a>
	if (*end < new_end) {
   1c112:	429d      	cmp	r5, r3
		*start = new_start;
   1c114:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1c116:	d9ea      	bls.n	1c0ee <sc_save+0x56>
   1c118:	e7e8      	b.n	1c0ec <sc_save+0x54>
   1c11a:	bf00      	nop
   1c11c:	0003117b 	.word	0x0003117b
   1c120:	0002e5b4 	.word	0x0002e5b4

0001c124 <bt_gatt_clear_sc>:
{
   1c124:	b5b0      	push	{r4, r5, r7, lr}
   1c126:	b08c      	sub	sp, #48	; 0x30
   1c128:	af02      	add	r7, sp, #8
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1c12a:	f7ff ff93 	bl	1c054 <find_sc_cfg>
	if (!cfg) {
   1c12e:	4604      	mov	r4, r0
   1c130:	b320      	cbz	r0, 1c17c <bt_gatt_clear_sc+0x58>
		if (cfg->id) {
   1c132:	4605      	mov	r5, r0
   1c134:	f815 2b01 	ldrb.w	r2, [r5], #1
   1c138:	b322      	cbz	r2, 1c184 <bt_gatt_clear_sc+0x60>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1c13a:	2104      	movs	r1, #4
   1c13c:	4638      	mov	r0, r7
   1c13e:	f00d f926 	bl	2938e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   1c142:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   1c144:	1d38      	adds	r0, r7, #4
   1c146:	4a10      	ldr	r2, [pc, #64]	; (1c188 <bt_gatt_clear_sc+0x64>)
   1c148:	462b      	mov	r3, r5
   1c14a:	2124      	movs	r1, #36	; 0x24
   1c14c:	f7fb f94a 	bl	173e4 <bt_settings_encode_key>
		err = settings_delete(key);
   1c150:	1d38      	adds	r0, r7, #4
   1c152:	f00d ff43 	bl	29fdc <settings_delete>
		if (err) {
   1c156:	b170      	cbz	r0, 1c176 <bt_gatt_clear_sc+0x52>
			BT_ERR("failed to delete SC (err %d)", err);
   1c158:	466d      	mov	r5, sp
   1c15a:	b088      	sub	sp, #32
   1c15c:	aa02      	add	r2, sp, #8
   1c15e:	4b0b      	ldr	r3, [pc, #44]	; (1c18c <bt_gatt_clear_sc+0x68>)
   1c160:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c164:	2303      	movs	r3, #3
   1c166:	f842 3f10 	str.w	r3, [r2, #16]!
   1c16a:	4809      	ldr	r0, [pc, #36]	; (1c190 <bt_gatt_clear_sc+0x6c>)
   1c16c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c170:	f00f fcdd 	bl	2bb2e <z_log_msg_static_create.constprop.0>
   1c174:	46ad      	mov	sp, r5
	clear_sc_cfg(cfg);
   1c176:	4620      	mov	r0, r4
   1c178:	f00f fc49 	bl	2ba0e <clear_sc_cfg>
}
   1c17c:	2000      	movs	r0, #0
   1c17e:	3728      	adds	r7, #40	; 0x28
   1c180:	46bd      	mov	sp, r7
   1c182:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   1c184:	9200      	str	r2, [sp, #0]
   1c186:	e7dd      	b.n	1c144 <bt_gatt_clear_sc+0x20>
   1c188:	00031366 	.word	0x00031366
   1c18c:	0003119a 	.word	0x0003119a
   1c190:	0002e5b4 	.word	0x0002e5b4

0001c194 <sc_clear>:
{
   1c194:	b5b0      	push	{r4, r5, r7, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c196:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   1c19a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c19c:	4629      	mov	r1, r5
   1c19e:	7a00      	ldrb	r0, [r0, #8]
{
   1c1a0:	af00      	add	r7, sp, #0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c1a2:	f00e fbb3 	bl	2a90c <bt_addr_le_is_bonded>
   1c1a6:	4603      	mov	r3, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1c1a8:	4629      	mov	r1, r5
   1c1aa:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c1ac:	b19b      	cbz	r3, 1c1d6 <sc_clear+0x42>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1c1ae:	f7ff ffb9 	bl	1c124 <bt_gatt_clear_sc>
		if (err) {
   1c1b2:	b170      	cbz	r0, 1c1d2 <sc_clear+0x3e>
			BT_ERR("Failed to clear SC %d", err);
   1c1b4:	466c      	mov	r4, sp
   1c1b6:	b088      	sub	sp, #32
   1c1b8:	466a      	mov	r2, sp
   1c1ba:	4b0a      	ldr	r3, [pc, #40]	; (1c1e4 <sc_clear+0x50>)
   1c1bc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c1c0:	2303      	movs	r3, #3
   1c1c2:	f842 3f10 	str.w	r3, [r2, #16]!
   1c1c6:	4808      	ldr	r0, [pc, #32]	; (1c1e8 <sc_clear+0x54>)
   1c1c8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c1cc:	f00f fcaf 	bl	2bb2e <z_log_msg_static_create.constprop.0>
   1c1d0:	46a5      	mov	sp, r4
}
   1c1d2:	46bd      	mov	sp, r7
   1c1d4:	bdb0      	pop	{r4, r5, r7, pc}
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1c1d6:	f7ff ff3d 	bl	1c054 <find_sc_cfg>
		if (cfg) {
   1c1da:	2800      	cmp	r0, #0
   1c1dc:	d0f9      	beq.n	1c1d2 <sc_clear+0x3e>
			clear_sc_cfg(cfg);
   1c1de:	f00f fc16 	bl	2ba0e <clear_sc_cfg>
}
   1c1e2:	e7f6      	b.n	1c1d2 <sc_clear+0x3e>
   1c1e4:	000311b7 	.word	0x000311b7
   1c1e8:	0002e5b4 	.word	0x0002e5b4

0001c1ec <disconnected_cb>:
{
   1c1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c1f0:	4b1f      	ldr	r3, [pc, #124]	; (1c270 <disconnected_cb+0x84>)
{
   1c1f2:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c1f4:	6882      	ldr	r2, [r0, #8]
   1c1f6:	429a      	cmp	r2, r3
{
   1c1f8:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c1fa:	d102      	bne.n	1c202 <disconnected_cb+0x16>
	ccc = attr->user_data;
   1c1fc:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1c1fe:	8963      	ldrh	r3, [r4, #10]
   1c200:	b9c3      	cbnz	r3, 1c234 <disconnected_cb+0x48>
}
   1c202:	2001      	movs	r0, #1
   1c204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c208:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1c20c:	7a28      	ldrb	r0, [r5, #8]
   1c20e:	4641      	mov	r1, r8
   1c210:	f00e fb7c 	bl	2a90c <bt_addr_le_is_bonded>
   1c214:	b948      	cbnz	r0, 1c22a <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
   1c216:	4b17      	ldr	r3, [pc, #92]	; (1c274 <disconnected_cb+0x88>)
   1c218:	429c      	cmp	r4, r3
   1c21a:	d102      	bne.n	1c222 <disconnected_cb+0x36>
					sc_clear(conn);
   1c21c:	4628      	mov	r0, r5
   1c21e:	f7ff ffb9 	bl	1c194 <sc_clear>
				clear_ccc_cfg(cfg);
   1c222:	4620      	mov	r0, r4
   1c224:	f00f fbe5 	bl	2b9f2 <clear_ccc_cfg>
	if (!value_used) {
   1c228:	e019      	b.n	1c25e <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1c22a:	4641      	mov	r1, r8
   1c22c:	4638      	mov	r0, r7
   1c22e:	f00f fbd9 	bl	2b9e4 <bt_addr_le_copy>
	if (!value_used) {
   1c232:	e014      	b.n	1c25e <disconnected_cb+0x72>
		if (!cfg->value) {
   1c234:	8923      	ldrh	r3, [r4, #8]
   1c236:	b193      	cbz	r3, 1c25e <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1c238:	4627      	mov	r7, r4
   1c23a:	4628      	mov	r0, r5
   1c23c:	f817 1b01 	ldrb.w	r1, [r7], #1
   1c240:	463a      	mov	r2, r7
   1c242:	f00e fd35 	bl	2acb0 <bt_conn_is_peer_addr_le>
   1c246:	2800      	cmp	r0, #0
   1c248:	d1de      	bne.n	1c208 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1c24a:	7820      	ldrb	r0, [r4, #0]
   1c24c:	4639      	mov	r1, r7
   1c24e:	f7fd ffb3 	bl	1a1b8 <bt_conn_lookup_addr_le>
			if (tmp) {
   1c252:	b120      	cbz	r0, 1c25e <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
   1c254:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
   1c256:	f00e fc90 	bl	2ab7a <bt_conn_unref>
	if (!value_used) {
   1c25a:	2d07      	cmp	r5, #7
   1c25c:	d0d1      	beq.n	1c202 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   1c25e:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1c260:	2100      	movs	r1, #0
   1c262:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1c264:	2b00      	cmp	r3, #0
   1c266:	d0cc      	beq.n	1c202 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1c268:	4630      	mov	r0, r6
   1c26a:	4798      	blx	r3
   1c26c:	e7c9      	b.n	1c202 <disconnected_cb+0x16>
   1c26e:	bf00      	nop
   1c270:	0001bf4d 	.word	0x0001bf4d
   1c274:	20000758 	.word	0x20000758

0001c278 <sc_set>:
{
   1c278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c27c:	b08d      	sub	sp, #52	; 0x34
   1c27e:	460e      	mov	r6, r1
   1c280:	af00      	add	r7, sp, #0
   1c282:	4690      	mov	r8, r2
   1c284:	4699      	mov	r9, r3
	if (!name) {
   1c286:	4604      	mov	r4, r0
   1c288:	b988      	cbnz	r0, 1c2ae <sc_set+0x36>
		BT_ERR("Insufficient number of arguments");
   1c28a:	4b45      	ldr	r3, [pc, #276]	; (1c3a0 <sc_set+0x128>)
   1c28c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1c28e:	4845      	ldr	r0, [pc, #276]	; (1c3a4 <sc_set+0x12c>)
   1c290:	2302      	movs	r3, #2
   1c292:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1c296:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c29a:	62bb      	str	r3, [r7, #40]	; 0x28
   1c29c:	f00f fc47 	bl	2bb2e <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1c2a0:	f06f 0515 	mvn.w	r5, #21
}
   1c2a4:	4628      	mov	r0, r5
   1c2a6:	3734      	adds	r7, #52	; 0x34
   1c2a8:	46bd      	mov	sp, r7
   1c2aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1c2ae:	f107 0108 	add.w	r1, r7, #8
   1c2b2:	f00e f99f 	bl	2a5f4 <bt_settings_decode_key>
	if (err) {
   1c2b6:	4605      	mov	r5, r0
   1c2b8:	b188      	cbz	r0, 1c2de <sc_set+0x66>
		BT_ERR("Unable to decode address %s", name);
   1c2ba:	466d      	mov	r5, sp
   1c2bc:	b088      	sub	sp, #32
   1c2be:	466a      	mov	r2, sp
   1c2c0:	4b39      	ldr	r3, [pc, #228]	; (1c3a8 <sc_set+0x130>)
   1c2c2:	4838      	ldr	r0, [pc, #224]	; (1c3a4 <sc_set+0x12c>)
   1c2c4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1c2c8:	2302      	movs	r3, #2
   1c2ca:	7713      	strb	r3, [r2, #28]
   1c2cc:	4b37      	ldr	r3, [pc, #220]	; (1c3ac <sc_set+0x134>)
   1c2ce:	f842 3f10 	str.w	r3, [r2, #16]!
   1c2d2:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1c2d6:	f00f fc2a 	bl	2bb2e <z_log_msg_static_create.constprop.0>
   1c2da:	46ad      	mov	sp, r5
   1c2dc:	e7e0      	b.n	1c2a0 <sc_set+0x28>
	settings_name_next(name, &next);
   1c2de:	1d39      	adds	r1, r7, #4
   1c2e0:	4620      	mov	r0, r4
   1c2e2:	f00d fea2 	bl	2a02a <settings_name_next>
	if (!next) {
   1c2e6:	6878      	ldr	r0, [r7, #4]
   1c2e8:	b1a0      	cbz	r0, 1c314 <sc_set+0x9c>
		unsigned long next_id = strtoul(next, NULL, 10);
   1c2ea:	220a      	movs	r2, #10
   1c2ec:	4629      	mov	r1, r5
   1c2ee:	f009 f951 	bl	25594 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1c2f2:	b178      	cbz	r0, 1c314 <sc_set+0x9c>
			BT_ERR("Invalid local identity %lu", next_id);
   1c2f4:	466c      	mov	r4, sp
   1c2f6:	b088      	sub	sp, #32
   1c2f8:	466a      	mov	r2, sp
   1c2fa:	4b2d      	ldr	r3, [pc, #180]	; (1c3b0 <sc_set+0x138>)
   1c2fc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c300:	2303      	movs	r3, #3
   1c302:	f842 3f10 	str.w	r3, [r2, #16]!
   1c306:	4827      	ldr	r0, [pc, #156]	; (1c3a4 <sc_set+0x12c>)
   1c308:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c30c:	f00f fc0f 	bl	2bb2e <z_log_msg_static_create.constprop.0>
   1c310:	46a5      	mov	sp, r4
			return -EINVAL;
   1c312:	e7c5      	b.n	1c2a0 <sc_set+0x28>
	cfg = find_sc_cfg(id, &addr);
   1c314:	f107 0108 	add.w	r1, r7, #8
   1c318:	2000      	movs	r0, #0
   1c31a:	f7ff fe9b 	bl	1c054 <find_sc_cfg>
	if (!cfg && len_rd) {
   1c31e:	4604      	mov	r4, r0
   1c320:	2800      	cmp	r0, #0
   1c322:	d137      	bne.n	1c394 <sc_set+0x11c>
   1c324:	2e00      	cmp	r6, #0
   1c326:	d0bd      	beq.n	1c2a4 <sc_set+0x2c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1c328:	f107 0110 	add.w	r1, r7, #16
   1c32c:	6138      	str	r0, [r7, #16]
   1c32e:	4606      	mov	r6, r0
   1c330:	f8c7 0013 	str.w	r0, [r7, #19]
   1c334:	f7ff fe8e 	bl	1c054 <find_sc_cfg>
		if (!cfg) {
   1c338:	4604      	mov	r4, r0
   1c33a:	b968      	cbnz	r0, 1c358 <sc_set+0xe0>
			BT_ERR("Unable to restore SC: no cfg left");
   1c33c:	4b1d      	ldr	r3, [pc, #116]	; (1c3b4 <sc_set+0x13c>)
   1c33e:	62fb      	str	r3, [r7, #44]	; 0x2c
   1c340:	4818      	ldr	r0, [pc, #96]	; (1c3a4 <sc_set+0x12c>)
   1c342:	2302      	movs	r3, #2
   1c344:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1c348:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c34c:	62bb      	str	r3, [r7, #40]	; 0x28
			return -ENOMEM;
   1c34e:	f06f 050b 	mvn.w	r5, #11
			BT_ERR("Unable to restore SC: no cfg left");
   1c352:	f00f fbec 	bl	2bb2e <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   1c356:	e7a5      	b.n	1c2a4 <sc_set+0x2c>
		cfg->id = id;
   1c358:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1c35c:	f107 0108 	add.w	r1, r7, #8
   1c360:	f00f fb40 	bl	2b9e4 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   1c364:	f104 0108 	add.w	r1, r4, #8
   1c368:	2204      	movs	r2, #4
   1c36a:	4648      	mov	r0, r9
   1c36c:	47c0      	blx	r8
		if (len < 0) {
   1c36e:	1e04      	subs	r4, r0, #0
   1c370:	da98      	bge.n	1c2a4 <sc_set+0x2c>
			BT_ERR("Failed to decode value (err %zd)", len);
   1c372:	466d      	mov	r5, sp
   1c374:	b088      	sub	sp, #32
   1c376:	466a      	mov	r2, sp
   1c378:	4b0f      	ldr	r3, [pc, #60]	; (1c3b8 <sc_set+0x140>)
   1c37a:	480a      	ldr	r0, [pc, #40]	; (1c3a4 <sc_set+0x12c>)
   1c37c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1c380:	2303      	movs	r3, #3
   1c382:	f842 3f10 	str.w	r3, [r2, #16]!
   1c386:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c38a:	f00f fbd0 	bl	2bb2e <z_log_msg_static_create.constprop.0>
   1c38e:	46ad      	mov	sp, r5
			return len;
   1c390:	4625      	mov	r5, r4
   1c392:	e787      	b.n	1c2a4 <sc_set+0x2c>
	if (len_rd) {
   1c394:	2e00      	cmp	r6, #0
   1c396:	d1e5      	bne.n	1c364 <sc_set+0xec>
   1c398:	6026      	str	r6, [r4, #0]
   1c39a:	6066      	str	r6, [r4, #4]
   1c39c:	60a6      	str	r6, [r4, #8]
   1c39e:	e781      	b.n	1c2a4 <sc_set+0x2c>
   1c3a0:	0002ff39 	.word	0x0002ff39
   1c3a4:	0002e5b4 	.word	0x0002e5b4
   1c3a8:	00031108 	.word	0x00031108
   1c3ac:	01000003 	.word	0x01000003
   1c3b0:	00031124 	.word	0x00031124
   1c3b4:	000311cd 	.word	0x000311cd
   1c3b8:	000310e7 	.word	0x000310e7

0001c3bc <sc_indicate_rsp>:
{
   1c3bc:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c3be:	f06f 0102 	mvn.w	r1, #2
   1c3c2:	4604      	mov	r4, r0
   1c3c4:	480f      	ldr	r0, [pc, #60]	; (1c404 <sc_indicate_rsp+0x48>)
   1c3c6:	f00f fafe 	bl	2b9c6 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c3ca:	480e      	ldr	r0, [pc, #56]	; (1c404 <sc_indicate_rsp+0x48>)
   1c3cc:	f00f fae6 	bl	2b99c <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1c3d0:	07c2      	lsls	r2, r0, #31
   1c3d2:	d504      	bpl.n	1c3de <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1c3d4:	480c      	ldr	r0, [pc, #48]	; (1c408 <sc_indicate_rsp+0x4c>)
   1c3d6:	2200      	movs	r2, #0
   1c3d8:	2300      	movs	r3, #0
   1c3da:	f007 fab5 	bl	23948 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1c3de:	4620      	mov	r0, r4
   1c3e0:	f00f fa10 	bl	2b804 <bt_att_fixed_chan_only>
   1c3e4:	b160      	cbz	r0, 1c400 <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
   1c3e6:	4620      	mov	r0, r4
   1c3e8:	f7ff fb3a 	bl	1ba60 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1c3ec:	b140      	cbz	r0, 1c400 <sc_indicate_rsp+0x44>
   1c3ee:	7a03      	ldrb	r3, [r0, #8]
   1c3f0:	07db      	lsls	r3, r3, #31
   1c3f2:	d505      	bpl.n	1c400 <sc_indicate_rsp+0x44>
}
   1c3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c3f8:	2101      	movs	r1, #1
   1c3fa:	300c      	adds	r0, #12
   1c3fc:	f00f bad4 	b.w	2b9a8 <atomic_or>
   1c400:	bd10      	pop	{r4, pc}
   1c402:	bf00      	nop
   1c404:	200021b0 	.word	0x200021b0
   1c408:	20002180 	.word	0x20002180

0001c40c <bt_gatt_init>:
{
   1c40c:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c40e:	4b24      	ldr	r3, [pc, #144]	; (1c4a0 <bt_gatt_init+0x94>)
   1c410:	f3bf 8f5b 	dmb	ish
   1c414:	2201      	movs	r2, #1
   1c416:	e853 1f00 	ldrex	r1, [r3]
   1c41a:	2900      	cmp	r1, #0
   1c41c:	d103      	bne.n	1c426 <bt_gatt_init+0x1a>
   1c41e:	e843 2000 	strex	r0, r2, [r3]
   1c422:	2800      	cmp	r0, #0
   1c424:	d1f7      	bne.n	1c416 <bt_gatt_init+0xa>
   1c426:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1c42a:	d138      	bne.n	1c49e <bt_gatt_init+0x92>
   1c42c:	f3bf 8f5b 	dmb	ish
   1c430:	4b1c      	ldr	r3, [pc, #112]	; (1c4a4 <bt_gatt_init+0x98>)
   1c432:	e853 1f00 	ldrex	r1, [r3]
   1c436:	2900      	cmp	r1, #0
   1c438:	d103      	bne.n	1c442 <bt_gatt_init+0x36>
   1c43a:	e843 2000 	strex	r0, r2, [r3]
   1c43e:	2800      	cmp	r0, #0
   1c440:	d1f7      	bne.n	1c432 <bt_gatt_init+0x26>
   1c442:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1c446:	d108      	bne.n	1c45a <bt_gatt_init+0x4e>
   1c448:	4917      	ldr	r1, [pc, #92]	; (1c4a8 <bt_gatt_init+0x9c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1c44a:	4a18      	ldr	r2, [pc, #96]	; (1c4ac <bt_gatt_init+0xa0>)
   1c44c:	880b      	ldrh	r3, [r1, #0]
   1c44e:	4c18      	ldr	r4, [pc, #96]	; (1c4b0 <bt_gatt_init+0xa4>)
	if (!atomic_cas(&service_init, 0, 1)) {
   1c450:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1c452:	42a2      	cmp	r2, r4
   1c454:	d31d      	bcc.n	1c492 <bt_gatt_init+0x86>
   1c456:	b100      	cbz	r0, 1c45a <bt_gatt_init+0x4e>
   1c458:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1c45a:	4b16      	ldr	r3, [pc, #88]	; (1c4b4 <bt_gatt_init+0xa8>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1c45c:	4916      	ldr	r1, [pc, #88]	; (1c4b8 <bt_gatt_init+0xac>)
   1c45e:	4817      	ldr	r0, [pc, #92]	; (1c4bc <bt_gatt_init+0xb0>)
   1c460:	2200      	movs	r2, #0
	list->tail = NULL;
   1c462:	e9c3 2200 	strd	r2, r2, [r3]
   1c466:	f011 f958 	bl	2d71a <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1c46a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1c46e:	2300      	movs	r3, #0
   1c470:	4812      	ldr	r0, [pc, #72]	; (1c4bc <bt_gatt_init+0xb0>)
   1c472:	f7fb f861 	bl	17538 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1c476:	4912      	ldr	r1, [pc, #72]	; (1c4c0 <bt_gatt_init+0xb4>)
   1c478:	4812      	ldr	r0, [pc, #72]	; (1c4c4 <bt_gatt_init+0xb8>)
   1c47a:	f011 f94e 	bl	2d71a <k_work_init_delayable>
   1c47e:	2102      	movs	r1, #2
   1c480:	4811      	ldr	r0, [pc, #68]	; (1c4c8 <bt_gatt_init+0xbc>)
   1c482:	f00f fa91 	bl	2b9a8 <atomic_or>
}
   1c486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   1c48a:	4910      	ldr	r1, [pc, #64]	; (1c4cc <bt_gatt_init+0xc0>)
   1c48c:	4810      	ldr	r0, [pc, #64]	; (1c4d0 <bt_gatt_init+0xc4>)
   1c48e:	f011 b944 	b.w	2d71a <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1c492:	6850      	ldr	r0, [r2, #4]
   1c494:	4403      	add	r3, r0
   1c496:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1c498:	3208      	adds	r2, #8
   1c49a:	2001      	movs	r0, #1
   1c49c:	e7d9      	b.n	1c452 <bt_gatt_init+0x46>
}
   1c49e:	bd10      	pop	{r4, pc}
   1c4a0:	20005cb8 	.word	0x20005cb8
   1c4a4:	20005cd4 	.word	0x20005cd4
   1c4a8:	20006b0e 	.word	0x20006b0e
   1c4ac:	0002e53c 	.word	0x0002e53c
   1c4b0:	0002e574 	.word	0x0002e574
   1c4b4:	20005c90 	.word	0x20005c90
   1c4b8:	0001c6e5 	.word	0x0001c6e5
   1c4bc:	200020d0 	.word	0x200020d0
   1c4c0:	0001caed 	.word	0x0001caed
   1c4c4:	20002180 	.word	0x20002180
   1c4c8:	200021b0 	.word	0x200021b0
   1c4cc:	0002beef 	.word	0x0002beef
   1c4d0:	20002130 	.word	0x20002130

0001c4d4 <bt_gatt_attr_get_handle>:
{
   1c4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1c4d8:	4603      	mov	r3, r0
   1c4da:	b148      	cbz	r0, 1c4f0 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   1c4dc:	8a00      	ldrh	r0, [r0, #16]
   1c4de:	b938      	cbnz	r0, 1c4f0 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c4e0:	4912      	ldr	r1, [pc, #72]	; (1c52c <bt_gatt_attr_get_handle+0x58>)
   1c4e2:	f8df e04c 	ldr.w	lr, [pc, #76]	; 1c530 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   1c4e6:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1c4e8:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c4ec:	4571      	cmp	r1, lr
   1c4ee:	d301      	bcc.n	1c4f4 <bt_gatt_attr_get_handle+0x20>
}
   1c4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1c4f4:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1c4f8:	42bb      	cmp	r3, r7
   1c4fa:	d304      	bcc.n	1c506 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1c4fc:	fb0c 7206 	mla	r2, ip, r6, r7
   1c500:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1c502:	4293      	cmp	r3, r2
   1c504:	d90e      	bls.n	1c524 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   1c506:	19a2      	adds	r2, r4, r6
   1c508:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c50a:	3108      	adds	r1, #8
   1c50c:	4614      	mov	r4, r2
   1c50e:	e7ed      	b.n	1c4ec <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1c510:	fb0c 7805 	mla	r8, ip, r5, r7
   1c514:	4543      	cmp	r3, r8
   1c516:	d007      	beq.n	1c528 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1c518:	3501      	adds	r5, #1
   1c51a:	1962      	adds	r2, r4, r5
   1c51c:	42b5      	cmp	r5, r6
   1c51e:	b292      	uxth	r2, r2
   1c520:	d1f6      	bne.n	1c510 <bt_gatt_attr_get_handle+0x3c>
   1c522:	e7f2      	b.n	1c50a <bt_gatt_attr_get_handle+0x36>
   1c524:	2500      	movs	r5, #0
   1c526:	e7f8      	b.n	1c51a <bt_gatt_attr_get_handle+0x46>
   1c528:	4610      	mov	r0, r2
   1c52a:	e7e1      	b.n	1c4f0 <bt_gatt_attr_get_handle+0x1c>
   1c52c:	0002e53c 	.word	0x0002e53c
   1c530:	0002e574 	.word	0x0002e574

0001c534 <bt_gatt_foreach_attr_type>:
{
   1c534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c538:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1c53c:	9100      	str	r1, [sp, #0]
   1c53e:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1c540:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c544:	2d00      	cmp	r5, #0
   1c546:	bf08      	it	eq
   1c548:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1c54a:	4b24      	ldr	r3, [pc, #144]	; (1c5dc <bt_gatt_foreach_attr_type+0xa8>)
   1c54c:	881b      	ldrh	r3, [r3, #0]
   1c54e:	4283      	cmp	r3, r0
{
   1c550:	4607      	mov	r7, r0
   1c552:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1c554:	d23c      	bcs.n	1c5d0 <bt_gatt_foreach_attr_type+0x9c>
}
   1c556:	b003      	add	sp, #12
   1c558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1c55c:	6873      	ldr	r3, [r6, #4]
   1c55e:	4423      	add	r3, r4
   1c560:	42bb      	cmp	r3, r7
   1c562:	d232      	bcs.n	1c5ca <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   1c564:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c566:	3608      	adds	r6, #8
   1c568:	4b1d      	ldr	r3, [pc, #116]	; (1c5e0 <bt_gatt_foreach_attr_type+0xac>)
   1c56a:	429e      	cmp	r6, r3
   1c56c:	d3f6      	bcc.n	1c55c <bt_gatt_foreach_attr_type+0x28>
   1c56e:	e7f2      	b.n	1c556 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1c570:	5889      	ldr	r1, [r1, r2]
   1c572:	9301      	str	r3, [sp, #4]
   1c574:	4640      	mov	r0, r8
   1c576:	f00e f861 	bl	2a63c <bt_uuid_cmp>
   1c57a:	9b01      	ldr	r3, [sp, #4]
   1c57c:	b190      	cbz	r0, 1c5a4 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1c57e:	3401      	adds	r4, #1
   1c580:	f10a 0a01 	add.w	sl, sl, #1
   1c584:	b2a4      	uxth	r4, r4
   1c586:	6873      	ldr	r3, [r6, #4]
   1c588:	4553      	cmp	r3, sl
   1c58a:	d9ec      	bls.n	1c566 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1c58c:	9b00      	ldr	r3, [sp, #0]
   1c58e:	429c      	cmp	r4, r3
   1c590:	d8e1      	bhi.n	1c556 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1c592:	42bc      	cmp	r4, r7
   1c594:	d3f3      	bcc.n	1c57e <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1c596:	6831      	ldr	r1, [r6, #0]
   1c598:	fb0b f20a 	mul.w	r2, fp, sl
   1c59c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1c59e:	f1b8 0f00 	cmp.w	r8, #0
   1c5a2:	d1e5      	bne.n	1c570 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   1c5a4:	f1b9 0f00 	cmp.w	r9, #0
   1c5a8:	d10b      	bne.n	1c5c2 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   1c5aa:	3d01      	subs	r5, #1
   1c5ac:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1c5ae:	4618      	mov	r0, r3
   1c5b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c5b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c5b4:	4621      	mov	r1, r4
   1c5b6:	4798      	blx	r3
	if (!*num_matches) {
   1c5b8:	2d00      	cmp	r5, #0
   1c5ba:	d0cc      	beq.n	1c556 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1c5bc:	2800      	cmp	r0, #0
   1c5be:	d1de      	bne.n	1c57e <bt_gatt_foreach_attr_type+0x4a>
   1c5c0:	e7c9      	b.n	1c556 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1c5c2:	68da      	ldr	r2, [r3, #12]
   1c5c4:	4591      	cmp	r9, r2
   1c5c6:	d1da      	bne.n	1c57e <bt_gatt_foreach_attr_type+0x4a>
   1c5c8:	e7ef      	b.n	1c5aa <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1c5ca:	f04f 0a00 	mov.w	sl, #0
   1c5ce:	e7da      	b.n	1c586 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c5d0:	4e04      	ldr	r6, [pc, #16]	; (1c5e4 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   1c5d2:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1c5d4:	f04f 0b14 	mov.w	fp, #20
   1c5d8:	e7c6      	b.n	1c568 <bt_gatt_foreach_attr_type+0x34>
   1c5da:	bf00      	nop
   1c5dc:	20006b0e 	.word	0x20006b0e
   1c5e0:	0002e574 	.word	0x0002e574
   1c5e4:	0002e53c 	.word	0x0002e53c

0001c5e8 <db_hash_gen>:
{
   1c5e8:	b530      	push	{r4, r5, lr}
   1c5ea:	b0cf      	sub	sp, #316	; 0x13c
	uint8_t key[16] = {};
   1c5ec:	2300      	movs	r3, #0
{
   1c5ee:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1c5f0:	aa22      	add	r2, sp, #136	; 0x88
   1c5f2:	4669      	mov	r1, sp
   1c5f4:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   1c5f6:	e9cd 3300 	strd	r3, r3, [sp]
   1c5fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1c5fe:	f00d fe89 	bl	2a314 <tc_cmac_setup>
   1c602:	b958      	cbnz	r0, 1c61c <db_hash_gen+0x34>
		BT_ERR("Unable to setup AES CMAC");
   1c604:	4b16      	ldr	r3, [pc, #88]	; (1c660 <db_hash_gen+0x78>)
		BT_ERR("Unable to calculate hash");
   1c606:	9309      	str	r3, [sp, #36]	; 0x24
   1c608:	4816      	ldr	r0, [pc, #88]	; (1c664 <db_hash_gen+0x7c>)
   1c60a:	2302      	movs	r3, #2
   1c60c:	aa08      	add	r2, sp, #32
   1c60e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c612:	9308      	str	r3, [sp, #32]
   1c614:	f00f fa8b 	bl	2bb2e <z_log_msg_static_create.constprop.0>
}
   1c618:	b04f      	add	sp, #316	; 0x13c
   1c61a:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1c61c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c620:	2001      	movs	r0, #1
   1c622:	4a11      	ldr	r2, [pc, #68]	; (1c668 <db_hash_gen+0x80>)
   1c624:	ab0a      	add	r3, sp, #40	; 0x28
   1c626:	f00f fb69 	bl	2bcfc <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1c62a:	4810      	ldr	r0, [pc, #64]	; (1c66c <db_hash_gen+0x84>)
   1c62c:	a90a      	add	r1, sp, #40	; 0x28
   1c62e:	f00d ff07 	bl	2a440 <tc_cmac_final>
   1c632:	b908      	cbnz	r0, 1c638 <db_hash_gen+0x50>
		BT_ERR("Unable to calculate hash");
   1c634:	4b0e      	ldr	r3, [pc, #56]	; (1c670 <db_hash_gen+0x88>)
   1c636:	e7e6      	b.n	1c606 <db_hash_gen+0x1e>
   1c638:	4b0c      	ldr	r3, [pc, #48]	; (1c66c <db_hash_gen+0x84>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1c63a:	2208      	movs	r2, #8
   1c63c:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1c640:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1c642:	780d      	ldrb	r5, [r1, #0]
   1c644:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1c648:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1c64a:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   1c64e:	d1f7      	bne.n	1c640 <db_hash_gen+0x58>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   1c650:	b10c      	cbz	r4, 1c656 <db_hash_gen+0x6e>
		db_hash_store();
   1c652:	f7ff faef 	bl	1bc34 <db_hash_store>
   1c656:	2104      	movs	r1, #4
   1c658:	4806      	ldr	r0, [pc, #24]	; (1c674 <db_hash_gen+0x8c>)
   1c65a:	f00f f9a5 	bl	2b9a8 <atomic_or>
   1c65e:	e7db      	b.n	1c618 <db_hash_gen+0x30>
   1c660:	000311ef 	.word	0x000311ef
   1c664:	0002e5b4 	.word	0x0002e5b4
   1c668:	0002b8f3 	.word	0x0002b8f3
   1c66c:	200020b0 	.word	0x200020b0
   1c670:	00031208 	.word	0x00031208
   1c674:	200021b0 	.word	0x200021b0

0001c678 <db_hash_read>:
{
   1c678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1c67c:	4916      	ldr	r1, [pc, #88]	; (1c6d8 <db_hash_read+0x60>)
{
   1c67e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
   1c682:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1c684:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1c688:	4615      	mov	r5, r2
   1c68a:	461e      	mov	r6, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1c68c:	f011 f867 	bl	2d75e <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c690:	4812      	ldr	r0, [pc, #72]	; (1c6dc <db_hash_read+0x64>)
   1c692:	f00f f983 	bl	2b99c <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1c696:	0741      	lsls	r1, r0, #29
   1c698:	d402      	bmi.n	1c6a0 <db_hash_read+0x28>
		db_hash_gen(true);
   1c69a:	2001      	movs	r0, #1
   1c69c:	f7ff ffa4 	bl	1c5e8 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   1c6a0:	4620      	mov	r0, r4
   1c6a2:	f7ff f9dd 	bl	1ba60 <find_cf_cfg>
	if (cfg &&
   1c6a6:	b168      	cbz	r0, 1c6c4 <db_hash_read+0x4c>
   1c6a8:	7a03      	ldrb	r3, [r0, #8]
   1c6aa:	07da      	lsls	r2, r3, #31
   1c6ac:	d50a      	bpl.n	1c6c4 <db_hash_read+0x4c>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1c6ae:	f100 040c 	add.w	r4, r0, #12
   1c6b2:	4620      	mov	r0, r4
   1c6b4:	f00f f972 	bl	2b99c <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   1c6b8:	07c3      	lsls	r3, r0, #31
   1c6ba:	d403      	bmi.n	1c6c4 <db_hash_read+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c6bc:	2102      	movs	r1, #2
   1c6be:	4620      	mov	r0, r4
   1c6c0:	f00f f972 	bl	2b9a8 <atomic_or>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1c6c4:	2310      	movs	r3, #16
   1c6c6:	9306      	str	r3, [sp, #24]
   1c6c8:	463a      	mov	r2, r7
   1c6ca:	4631      	mov	r1, r6
   1c6cc:	4628      	mov	r0, r5
   1c6ce:	4b04      	ldr	r3, [pc, #16]	; (1c6e0 <db_hash_read+0x68>)
}
   1c6d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1c6d4:	f00f b9a0 	b.w	2ba18 <bt_gatt_attr_read.constprop.0>
   1c6d8:	20002100 	.word	0x20002100
   1c6dc:	200021b0 	.word	0x200021b0
   1c6e0:	200020b0 	.word	0x200020b0

0001c6e4 <db_hash_process>:
{
   1c6e4:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c6e6:	4827      	ldr	r0, [pc, #156]	; (1c784 <db_hash_process+0xa0>)
   1c6e8:	f06f 0108 	mvn.w	r1, #8
   1c6ec:	f00f f96b 	bl	2b9c6 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   1c6f0:	0700      	lsls	r0, r0, #28
   1c6f2:	d542      	bpl.n	1c77a <db_hash_process+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c6f4:	4823      	ldr	r0, [pc, #140]	; (1c784 <db_hash_process+0xa0>)
   1c6f6:	f00f f951 	bl	2b99c <atomic_get>
   1c6fa:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1c6fc:	0759      	lsls	r1, r3, #29
   1c6fe:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1c702:	d401      	bmi.n	1c708 <db_hash_process+0x24>
			db_hash_gen(false);
   1c704:	f7ff ff70 	bl	1c5e8 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   1c708:	491f      	ldr	r1, [pc, #124]	; (1c788 <db_hash_process+0xa4>)
   1c70a:	2210      	movs	r2, #16
   1c70c:	1888      	adds	r0, r1, r2
   1c70e:	f011 fb53 	bl	2ddb8 <memcmp>
   1c712:	b948      	cbnz	r0, 1c728 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   1c714:	481d      	ldr	r0, [pc, #116]	; (1c78c <db_hash_process+0xa8>)
   1c716:	f011 f80e 	bl	2d736 <k_work_cancel_delayable>
}
   1c71a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c71e:	4819      	ldr	r0, [pc, #100]	; (1c784 <db_hash_process+0xa0>)
   1c720:	f06f 0101 	mvn.w	r1, #1
   1c724:	f00f b94f 	b.w	2b9c6 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c728:	4c19      	ldr	r4, [pc, #100]	; (1c790 <db_hash_process+0xac>)
   1c72a:	2101      	movs	r1, #1
   1c72c:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1c730:	f00f f93a 	bl	2b9a8 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1c734:	07c2      	lsls	r2, r0, #31
   1c736:	d410      	bmi.n	1c75a <db_hash_process+0x76>
		gatt_sc.start = start;
   1c738:	4b16      	ldr	r3, [pc, #88]	; (1c794 <db_hash_process+0xb0>)
   1c73a:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c73c:	4811      	ldr	r0, [pc, #68]	; (1c784 <db_hash_process+0xa0>)
   1c73e:	f00f f92d 	bl	2b99c <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   1c742:	0783      	lsls	r3, r0, #30
   1c744:	d405      	bmi.n	1c752 <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   1c746:	4811      	ldr	r0, [pc, #68]	; (1c78c <db_hash_process+0xa8>)
   1c748:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1c74c:	2300      	movs	r3, #0
   1c74e:	f007 f8fb 	bl	23948 <k_work_reschedule>
}
   1c752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		db_hash_store();
   1c756:	f7ff ba6d 	b.w	1bc34 <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   1c75a:	8b23      	ldrh	r3, [r4, #24]
   1c75c:	8b62      	ldrh	r2, [r4, #26]
   1c75e:	2b01      	cmp	r3, #1
   1c760:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c764:	d805      	bhi.n	1c772 <db_hash_process+0x8e>
   1c766:	429a      	cmp	r2, r3
   1c768:	d0f3      	beq.n	1c752 <db_hash_process+0x6e>
		*end = new_end;
   1c76a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c76e:	8363      	strh	r3, [r4, #26]
   1c770:	e7e4      	b.n	1c73c <db_hash_process+0x58>
	if (*end < new_end) {
   1c772:	429a      	cmp	r2, r3
		*start = new_start;
   1c774:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   1c776:	d0e1      	beq.n	1c73c <db_hash_process+0x58>
   1c778:	e7f7      	b.n	1c76a <db_hash_process+0x86>
}
   1c77a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	db_hash_gen(true);
   1c77e:	2001      	movs	r0, #1
   1c780:	f7ff bf32 	b.w	1c5e8 <db_hash_gen>
   1c784:	200021b0 	.word	0x200021b0
   1c788:	200020b0 	.word	0x200020b0
   1c78c:	20002180 	.word	0x20002180
   1c790:	20002160 	.word	0x20002160
   1c794:	ffff0001 	.word	0xffff0001

0001c798 <ccc_set_direct>:
{
   1c798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c79c:	b0b8      	sub	sp, #224	; 0xe0
   1c79e:	af00      	add	r7, sp, #0
   1c7a0:	4689      	mov	r9, r1
   1c7a2:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1c7a4:	4942      	ldr	r1, [pc, #264]	; (1c8b0 <ccc_set_direct+0x118>)
   1c7a6:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
   1c7aa:	463a      	mov	r2, r7
{
   1c7ac:	4698      	mov	r8, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1c7ae:	f00d fc19 	bl	29fe4 <settings_name_steq>
   1c7b2:	b938      	cbnz	r0, 1c7c4 <ccc_set_direct+0x2c>
   1c7b4:	f7ff f976 	bl	1baa4 <ccc_set_direct.part.0>
   1c7b8:	4605      	mov	r5, r0
}
   1c7ba:	4628      	mov	r0, r5
   1c7bc:	37e0      	adds	r7, #224	; 0xe0
   1c7be:	46bd      	mov	sp, r7
   1c7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   1c7c4:	683c      	ldr	r4, [r7, #0]
		settings_name_next(name, &next);
   1c7c6:	1d39      	adds	r1, r7, #4
   1c7c8:	4620      	mov	r0, r4
   1c7ca:	f00d fc2e 	bl	2a02a <settings_name_next>
		if (!name) {
   1c7ce:	b974      	cbnz	r4, 1c7ee <ccc_set_direct+0x56>
			BT_ERR("Insufficient number of arguments");
   1c7d0:	4b38      	ldr	r3, [pc, #224]	; (1c8b4 <ccc_set_direct+0x11c>)
   1c7d2:	637b      	str	r3, [r7, #52]	; 0x34
   1c7d4:	4838      	ldr	r0, [pc, #224]	; (1c8b8 <ccc_set_direct+0x120>)
   1c7d6:	2302      	movs	r3, #2
   1c7d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1c7dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c7e0:	633b      	str	r3, [r7, #48]	; 0x30
   1c7e2:	f00f f9a4 	bl	2bb2e <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1c7e6:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   1c7ea:	4625      	mov	r5, r4
   1c7ec:	e7e5      	b.n	1c7ba <ccc_set_direct+0x22>
		} else if (!next) {
   1c7ee:	6878      	ldr	r0, [r7, #4]
   1c7f0:	b9d8      	cbnz	r0, 1c82a <ccc_set_direct+0x92>
		err = bt_settings_decode_key(name, &addr);
   1c7f2:	f107 0a08 	add.w	sl, r7, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   1c7f6:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   1c7f8:	4651      	mov	r1, sl
   1c7fa:	4620      	mov	r0, r4
			load.addr_with_id.id = BT_ID_DEFAULT;
   1c7fc:	753b      	strb	r3, [r7, #20]
		err = bt_settings_decode_key(name, &addr);
   1c7fe:	f00d fef9 	bl	2a5f4 <bt_settings_decode_key>
		if (err) {
   1c802:	4605      	mov	r5, r0
   1c804:	b338      	cbz	r0, 1c856 <ccc_set_direct+0xbe>
			BT_ERR("Unable to decode address %s", name);
   1c806:	466d      	mov	r5, sp
   1c808:	b088      	sub	sp, #32
   1c80a:	466a      	mov	r2, sp
   1c80c:	4b2b      	ldr	r3, [pc, #172]	; (1c8bc <ccc_set_direct+0x124>)
   1c80e:	482a      	ldr	r0, [pc, #168]	; (1c8b8 <ccc_set_direct+0x120>)
   1c810:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1c814:	2302      	movs	r3, #2
   1c816:	7713      	strb	r3, [r2, #28]
   1c818:	4b29      	ldr	r3, [pc, #164]	; (1c8c0 <ccc_set_direct+0x128>)
   1c81a:	f842 3f10 	str.w	r3, [r2, #16]!
   1c81e:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1c822:	f00f f984 	bl	2bb2e <z_log_msg_static_create.constprop.0>
   1c826:	46ad      	mov	sp, r5
   1c828:	e7dd      	b.n	1c7e6 <ccc_set_direct+0x4e>
			unsigned long next_id = strtoul(next, NULL, 10);
   1c82a:	220a      	movs	r2, #10
   1c82c:	2100      	movs	r1, #0
   1c82e:	f008 feb1 	bl	25594 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   1c832:	2800      	cmp	r0, #0
   1c834:	d0dd      	beq.n	1c7f2 <ccc_set_direct+0x5a>
				BT_ERR("Invalid local identity %lu", next_id);
   1c836:	466c      	mov	r4, sp
   1c838:	b088      	sub	sp, #32
   1c83a:	466a      	mov	r2, sp
   1c83c:	4b21      	ldr	r3, [pc, #132]	; (1c8c4 <ccc_set_direct+0x12c>)
   1c83e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c842:	2303      	movs	r3, #3
   1c844:	f842 3f10 	str.w	r3, [r2, #16]!
   1c848:	481b      	ldr	r0, [pc, #108]	; (1c8b8 <ccc_set_direct+0x120>)
   1c84a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c84e:	f00f f96e 	bl	2bb2e <z_log_msg_static_create.constprop.0>
   1c852:	46a5      	mov	sp, r4
				return -EINVAL;
   1c854:	e7c7      	b.n	1c7e6 <ccc_set_direct+0x4e>
		load.addr_with_id.addr = &addr;
   1c856:	f8c7 a010 	str.w	sl, [r7, #16]
		if (len_rd) {
   1c85a:	f1b9 0f00 	cmp.w	r9, #0
   1c85e:	d024      	beq.n	1c8aa <ccc_set_direct+0x112>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   1c860:	f107 0920 	add.w	r9, r7, #32
   1c864:	22c0      	movs	r2, #192	; 0xc0
   1c866:	4649      	mov	r1, r9
   1c868:	4640      	mov	r0, r8
   1c86a:	47b0      	blx	r6
			if (len < 0) {
   1c86c:	1e04      	subs	r4, r0, #0
   1c86e:	da0f      	bge.n	1c890 <ccc_set_direct+0xf8>
				BT_ERR("Failed to decode value (err %zd)", len);
   1c870:	466d      	mov	r5, sp
   1c872:	b088      	sub	sp, #32
   1c874:	466a      	mov	r2, sp
   1c876:	4b14      	ldr	r3, [pc, #80]	; (1c8c8 <ccc_set_direct+0x130>)
   1c878:	480f      	ldr	r0, [pc, #60]	; (1c8b8 <ccc_set_direct+0x120>)
   1c87a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1c87e:	2303      	movs	r3, #3
   1c880:	f842 3f10 	str.w	r3, [r2, #16]!
   1c884:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c888:	f00f f951 	bl	2bb2e <z_log_msg_static_create.constprop.0>
   1c88c:	46ad      	mov	sp, r5
				return len;
   1c88e:	e7ac      	b.n	1c7ea <ccc_set_direct+0x52>
			load.count = len / sizeof(*ccc_store);
   1c890:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   1c892:	f8c7 9018 	str.w	r9, [r7, #24]
			load.count = len / sizeof(*ccc_store);
   1c896:	61fc      	str	r4, [r7, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   1c898:	4a0c      	ldr	r2, [pc, #48]	; (1c8cc <ccc_set_direct+0x134>)
   1c89a:	f107 0310 	add.w	r3, r7, #16
   1c89e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c8a2:	2001      	movs	r0, #1
   1c8a4:	f00f fa2a 	bl	2bcfc <bt_gatt_foreach_attr>
	return 0;
   1c8a8:	e787      	b.n	1c7ba <ccc_set_direct+0x22>
			load.count = 0;
   1c8aa:	e9c7 0006 	strd	r0, r0, [r7, #24]
   1c8ae:	e7f3      	b.n	1c898 <ccc_set_direct+0x100>
   1c8b0:	00031221 	.word	0x00031221
   1c8b4:	0002ff39 	.word	0x0002ff39
   1c8b8:	0002e5b4 	.word	0x0002e5b4
   1c8bc:	00031108 	.word	0x00031108
   1c8c0:	01000003 	.word	0x01000003
   1c8c4:	00031124 	.word	0x00031124
   1c8c8:	000310e7 	.word	0x000310e7
   1c8cc:	0001be8d 	.word	0x0001be8d

0001c8d0 <bt_gatt_attr_next>:
{
   1c8d0:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1c8d2:	2300      	movs	r3, #0
   1c8d4:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1c8d6:	f7ff fdfd 	bl	1c4d4 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1c8da:	1c41      	adds	r1, r0, #1
   1c8dc:	b289      	uxth	r1, r1
   1c8de:	4608      	mov	r0, r1
   1c8e0:	4a03      	ldr	r2, [pc, #12]	; (1c8f0 <bt_gatt_attr_next+0x20>)
   1c8e2:	ab01      	add	r3, sp, #4
   1c8e4:	f00f fa0a 	bl	2bcfc <bt_gatt_foreach_attr>
}
   1c8e8:	9801      	ldr	r0, [sp, #4]
   1c8ea:	b003      	add	sp, #12
   1c8ec:	f85d fb04 	ldr.w	pc, [sp], #4
   1c8f0:	0002b861 	.word	0x0002b861

0001c8f4 <gatt_indicate>:
{
   1c8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c8f8:	4615      	mov	r5, r2
   1c8fa:	b086      	sub	sp, #24
   1c8fc:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1c8fe:	2294      	movs	r2, #148	; 0x94
   1c900:	6869      	ldr	r1, [r5, #4]
{
   1c902:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1c904:	f00f fa05 	bl	2bd12 <bt_gatt_check_perm>
   1c908:	4680      	mov	r8, r0
   1c90a:	b178      	cbz	r0, 1c92c <gatt_indicate+0x38>
		BT_WARN("Link is not encrypted");
   1c90c:	4b36      	ldr	r3, [pc, #216]	; (1c9e8 <gatt_indicate+0xf4>)
   1c90e:	9305      	str	r3, [sp, #20]
   1c910:	4836      	ldr	r0, [pc, #216]	; (1c9ec <gatt_indicate+0xf8>)
   1c912:	2302      	movs	r3, #2
   1c914:	aa04      	add	r2, sp, #16
   1c916:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -EPERM;
   1c91a:	f04f 35ff 	mov.w	r5, #4294967295
		BT_WARN("Link is not encrypted");
   1c91e:	9304      	str	r3, [sp, #16]
   1c920:	f00f f905 	bl	2bb2e <z_log_msg_static_create.constprop.0>
}
   1c924:	4628      	mov	r0, r5
   1c926:	b006      	add	sp, #24
   1c928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1c92c:	6869      	ldr	r1, [r5, #4]
   1c92e:	2202      	movs	r2, #2
   1c930:	4630      	mov	r0, r6
   1c932:	f00f fa21 	bl	2bd78 <bt_gatt_is_subscribed>
   1c936:	b960      	cbnz	r0, 1c952 <gatt_indicate+0x5e>
			BT_WARN("Device is not subscribed to characteristic");
   1c938:	4b2d      	ldr	r3, [pc, #180]	; (1c9f0 <gatt_indicate+0xfc>)
   1c93a:	9305      	str	r3, [sp, #20]
   1c93c:	482b      	ldr	r0, [pc, #172]	; (1c9ec <gatt_indicate+0xf8>)
   1c93e:	2302      	movs	r3, #2
   1c940:	aa04      	add	r2, sp, #16
   1c942:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1c946:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   1c948:	f06f 0515 	mvn.w	r5, #21
			BT_WARN("Device is not subscribed to characteristic");
   1c94c:	f00f f8ef 	bl	2bb2e <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1c950:	e7e8      	b.n	1c924 <gatt_indicate+0x30>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1c952:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1c956:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1c958:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1c95a:	f7fe ff7d 	bl	1b858 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1c95e:	3702      	adds	r7, #2
	if (!req) {
   1c960:	4604      	mov	r4, r0
   1c962:	b910      	cbnz	r0, 1c96a <gatt_indicate+0x76>
		return -ENOMEM;
   1c964:	f06f 050b 	mvn.w	r5, #11
   1c968:	e7dc      	b.n	1c924 <gatt_indicate+0x30>
	req->func = func;
   1c96a:	4b22      	ldr	r3, [pc, #136]	; (1c9f4 <gatt_indicate+0x100>)
	req->len = len;
   1c96c:	6147      	str	r7, [r0, #20]
	req->att_op = op;
   1c96e:	211d      	movs	r1, #29
   1c970:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1c972:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   1c976:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1c978:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1c97a:	463a      	mov	r2, r7
   1c97c:	4630      	mov	r0, r6
   1c97e:	f7fe fb77 	bl	1b070 <bt_att_create_pdu>
	if (!buf) {
   1c982:	4607      	mov	r7, r0
   1c984:	b968      	cbnz	r0, 1c9a2 <gatt_indicate+0xae>
		BT_WARN("No buffer available to send indication");
   1c986:	4b1c      	ldr	r3, [pc, #112]	; (1c9f8 <gatt_indicate+0x104>)
   1c988:	9305      	str	r3, [sp, #20]
   1c98a:	4818      	ldr	r0, [pc, #96]	; (1c9ec <gatt_indicate+0xf8>)
   1c98c:	2302      	movs	r3, #2
   1c98e:	aa04      	add	r2, sp, #16
   1c990:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1c994:	9304      	str	r3, [sp, #16]
   1c996:	f00f f8ca 	bl	2bb2e <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   1c99a:	4620      	mov	r0, r4
   1c99c:	f7fe ff7e 	bl	1b89c <bt_att_req_free>
   1c9a0:	e7e0      	b.n	1c964 <gatt_indicate+0x70>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1c9a2:	2301      	movs	r3, #1
   1c9a4:	4642      	mov	r2, r8
   1c9a6:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1c9a8:	f107 0a08 	add.w	sl, r7, #8
   1c9ac:	f00e ff51 	bl	2b852 <bt_att_set_tx_meta_data>
   1c9b0:	2102      	movs	r1, #2
   1c9b2:	4650      	mov	r0, sl
   1c9b4:	f00f ff96 	bl	2c8e4 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1c9b8:	4680      	mov	r8, r0
   1c9ba:	8aa9      	ldrh	r1, [r5, #20]
   1c9bc:	f828 9b02 	strh.w	r9, [r8], #2
   1c9c0:	4650      	mov	r0, sl
   1c9c2:	f00f ff8f 	bl	2c8e4 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c9c6:	8aaa      	ldrh	r2, [r5, #20]
   1c9c8:	6929      	ldr	r1, [r5, #16]
   1c9ca:	4640      	mov	r0, r8
   1c9cc:	f011 fa04 	bl	2ddd8 <memcpy>
	req->buf = buf;
   1c9d0:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   1c9d2:	4621      	mov	r1, r4
   1c9d4:	4630      	mov	r0, r6
   1c9d6:	f00e ff00 	bl	2b7da <bt_att_req_send>
	if (err) {
   1c9da:	4605      	mov	r5, r0
   1c9dc:	2800      	cmp	r0, #0
   1c9de:	d0a1      	beq.n	1c924 <gatt_indicate+0x30>
		bt_att_req_free(req);
   1c9e0:	4620      	mov	r0, r4
   1c9e2:	f7fe ff5b 	bl	1b89c <bt_att_req_free>
   1c9e6:	e79d      	b.n	1c924 <gatt_indicate+0x30>
   1c9e8:	00031228 	.word	0x00031228
   1c9ec:	0002e5b4 	.word	0x0002e5b4
   1c9f0:	0003123e 	.word	0x0003123e
   1c9f4:	0002b87b 	.word	0x0002b87b
   1c9f8:	00031269 	.word	0x00031269

0001c9fc <bt_gatt_indicate>:
{
   1c9fc:	b530      	push	{r4, r5, lr}
   1c9fe:	4604      	mov	r4, r0
   1ca00:	b08b      	sub	sp, #44	; 0x2c
   1ca02:	4837      	ldr	r0, [pc, #220]	; (1cae0 <bt_gatt_indicate+0xe4>)
   1ca04:	f00e ffca 	bl	2b99c <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1ca08:	0742      	lsls	r2, r0, #29
{
   1ca0a:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1ca0c:	d561      	bpl.n	1cad2 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1ca0e:	b114      	cbz	r4, 1ca16 <bt_gatt_indicate+0x1a>
   1ca10:	7b63      	ldrb	r3, [r4, #13]
   1ca12:	2b07      	cmp	r3, #7
   1ca14:	d160      	bne.n	1cad8 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   1ca16:	6868      	ldr	r0, [r5, #4]
   1ca18:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1ca1a:	f7ff fd5b 	bl	1c4d4 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1ca1e:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1ca20:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1ca24:	b33a      	cbz	r2, 1ca76 <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1ca26:	a905      	add	r1, sp, #20
   1ca28:	9102      	str	r1, [sp, #8]
   1ca2a:	492e      	ldr	r1, [pc, #184]	; (1cae4 <bt_gatt_indicate+0xe8>)
   1ca2c:	9101      	str	r1, [sp, #4]
   1ca2e:	2101      	movs	r1, #1
	found->attr = NULL;
   1ca30:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1ca32:	9100      	str	r1, [sp, #0]
   1ca34:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1ca38:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1ca3a:	f7ff fd7b 	bl	1c534 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1ca3e:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1ca40:	b91b      	cbnz	r3, 1ca4a <bt_gatt_indicate+0x4e>
			return -ENOENT;
   1ca42:	f06f 0001 	mvn.w	r0, #1
}
   1ca46:	b00b      	add	sp, #44	; 0x2c
   1ca48:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1ca4a:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1ca4c:	9b05      	ldr	r3, [sp, #20]
   1ca4e:	6818      	ldr	r0, [r3, #0]
   1ca50:	2300      	movs	r3, #0
   1ca52:	f88d 3010 	strb.w	r3, [sp, #16]
   1ca56:	a904      	add	r1, sp, #16
   1ca58:	f642 0303 	movw	r3, #10243	; 0x2803
   1ca5c:	f8ad 3012 	strh.w	r3, [sp, #18]
   1ca60:	f00d fdec 	bl	2a63c <bt_uuid_cmp>
   1ca64:	b970      	cbnz	r0, 1ca84 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1ca66:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1ca68:	68c3      	ldr	r3, [r0, #12]
   1ca6a:	799b      	ldrb	r3, [r3, #6]
   1ca6c:	069b      	lsls	r3, r3, #26
   1ca6e:	d405      	bmi.n	1ca7c <bt_gatt_indicate+0x80>
			return -EINVAL;
   1ca70:	f06f 0015 	mvn.w	r0, #21
   1ca74:	e7e7      	b.n	1ca46 <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   1ca76:	2800      	cmp	r0, #0
   1ca78:	d1e8      	bne.n	1ca4c <bt_gatt_indicate+0x50>
   1ca7a:	e7e2      	b.n	1ca42 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1ca7c:	f00f f8f7 	bl	2bc6e <bt_gatt_attr_value_handle>
   1ca80:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1ca84:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1ca88:	b13c      	cbz	r4, 1ca9a <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   1ca8a:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1ca8c:	4601      	mov	r1, r0
		params->_ref = 1;
   1ca8e:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   1ca90:	462a      	mov	r2, r5
   1ca92:	4620      	mov	r0, r4
   1ca94:	f7ff ff2e 	bl	1c8f4 <gatt_indicate>
   1ca98:	e7d5      	b.n	1ca46 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   1ca9a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1ca9e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1caa0:	2302      	movs	r3, #2
   1caa2:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1caa6:	f642 1302 	movw	r3, #10498	; 0x2902
   1caaa:	f8ad 3012 	strh.w	r3, [sp, #18]
   1caae:	ab05      	add	r3, sp, #20
   1cab0:	9302      	str	r3, [sp, #8]
   1cab2:	4b0d      	ldr	r3, [pc, #52]	; (1cae8 <bt_gatt_indicate+0xec>)
   1cab4:	9301      	str	r3, [sp, #4]
   1cab6:	2301      	movs	r3, #1
   1cab8:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   1caba:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1cabc:	4623      	mov	r3, r4
   1cabe:	aa04      	add	r2, sp, #16
   1cac0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1cac4:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1cac6:	f88d 4010 	strb.w	r4, [sp, #16]
   1caca:	f7ff fd33 	bl	1c534 <bt_gatt_foreach_attr_type>
	return data.err;
   1cace:	9807      	ldr	r0, [sp, #28]
   1cad0:	e7b9      	b.n	1ca46 <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   1cad2:	f06f 000a 	mvn.w	r0, #10
   1cad6:	e7b6      	b.n	1ca46 <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   1cad8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1cadc:	e7b3      	b.n	1ca46 <bt_gatt_indicate+0x4a>
   1cade:	bf00      	nop
   1cae0:	2000041c 	.word	0x2000041c
   1cae4:	0002b8a1 	.word	0x0002b8a1
   1cae8:	0001ce61 	.word	0x0001ce61

0001caec <sc_process>:
{
   1caec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1caee:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   1caf2:	f8ad 3004 	strh.w	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1caf6:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   1cafa:	4604      	mov	r4, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1cafc:	f830 3c06 	ldrh.w	r3, [r0, #-6]
   1cb00:	f8ad 3006 	strh.w	r3, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1cb04:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1cb08:	f06f 0101 	mvn.w	r1, #1
   1cb0c:	4628      	mov	r0, r5
   1cb0e:	f00e ff5a 	bl	2b9c6 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1cb12:	4b0d      	ldr	r3, [pc, #52]	; (1cb48 <sc_process+0x5c>)
   1cb14:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1cb18:	4b0c      	ldr	r3, [pc, #48]	; (1cb4c <sc_process+0x60>)
   1cb1a:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1cb1e:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   1cb20:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1cb22:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1cb26:	2304      	movs	r3, #4
	sc->start = 0U;
   1cb28:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1cb2c:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1cb30:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1cb34:	4631      	mov	r1, r6
   1cb36:	f7ff ff61 	bl	1c9fc <bt_gatt_indicate>
   1cb3a:	b918      	cbnz	r0, 1cb44 <sc_process+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1cb3c:	2102      	movs	r1, #2
   1cb3e:	4628      	mov	r0, r5
   1cb40:	f00e ff32 	bl	2b9a8 <atomic_or>
}
   1cb44:	b002      	add	sp, #8
   1cb46:	bd70      	pop	{r4, r5, r6, pc}
   1cb48:	0002efec 	.word	0x0002efec
   1cb4c:	0001c3bd 	.word	0x0001c3bd

0001cb50 <update_ccc>:
{
   1cb50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cb54:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = data->conn;
   1cb56:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1cb58:	4b3c      	ldr	r3, [pc, #240]	; (1cc4c <update_ccc+0xfc>)
{
   1cb5a:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1cb5c:	6882      	ldr	r2, [r0, #8]
   1cb5e:	429a      	cmp	r2, r3
{
   1cb60:	af00      	add	r7, sp, #0
   1cb62:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1cb64:	d122      	bne.n	1cbac <update_ccc+0x5c>
	ccc = attr->user_data;
   1cb66:	f8d0 800c 	ldr.w	r8, [r0, #12]
		if (!cfg->value ||
   1cb6a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1cb6e:	b1eb      	cbz	r3, 1cbac <update_ccc+0x5c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1cb70:	4642      	mov	r2, r8
   1cb72:	4620      	mov	r0, r4
   1cb74:	f812 1b01 	ldrb.w	r1, [r2], #1
   1cb78:	f00e f89a 	bl	2acb0 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1cb7c:	b1b0      	cbz	r0, 1cbac <update_ccc+0x5c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1cb7e:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1cb82:	4629      	mov	r1, r5
   1cb84:	4620      	mov	r0, r4
   1cb86:	f00f f8c4 	bl	2bd12 <bt_gatt_check_perm>
		if (err) {
   1cb8a:	b328      	cbz	r0, 1cbd8 <update_ccc+0x88>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1cb8c:	2803      	cmp	r0, #3
   1cb8e:	d112      	bne.n	1cbb6 <update_ccc+0x66>
				BT_WARN("CCC %p not writable", attr);
   1cb90:	466c      	mov	r4, sp
   1cb92:	b088      	sub	sp, #32
   1cb94:	466a      	mov	r2, sp
   1cb96:	4b2e      	ldr	r3, [pc, #184]	; (1cc50 <update_ccc+0x100>)
   1cb98:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1cb9c:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1cba0:	f842 0f10 	str.w	r0, [r2, #16]!
   1cba4:	482b      	ldr	r0, [pc, #172]	; (1cc54 <update_ccc+0x104>)
   1cba6:	f00e ffc2 	bl	2bb2e <z_log_msg_static_create.constprop.0>
   1cbaa:	46a5      	mov	sp, r4
}
   1cbac:	2001      	movs	r0, #1
   1cbae:	3724      	adds	r7, #36	; 0x24
   1cbb0:	46bd      	mov	sp, r7
   1cbb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				sec = BT_SECURITY_L3;
   1cbb6:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1cbb8:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   1cbba:	bf14      	ite	ne
   1cbbc:	f04f 0902 	movne.w	r9, #2
   1cbc0:	f04f 0903 	moveq.w	r9, #3
			    bt_conn_get_security(conn) < sec) {
   1cbc4:	f00e f872 	bl	2acac <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1cbc8:	4581      	cmp	r9, r0
   1cbca:	d905      	bls.n	1cbd8 <update_ccc+0x88>
				if (data->sec < sec) {
   1cbcc:	7933      	ldrb	r3, [r6, #4]
   1cbce:	454b      	cmp	r3, r9
   1cbd0:	d2ec      	bcs.n	1cbac <update_ccc+0x5c>
					data->sec = sec;
   1cbd2:	f886 9004 	strb.w	r9, [r6, #4]
   1cbd6:	e7e9      	b.n	1cbac <update_ccc+0x5c>
		gatt_ccc_changed(attr, ccc);
   1cbd8:	4641      	mov	r1, r8
   1cbda:	4628      	mov	r0, r5
   1cbdc:	f00e fe43 	bl	2b866 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1cbe0:	4b1d      	ldr	r3, [pc, #116]	; (1cc58 <update_ccc+0x108>)
   1cbe2:	4598      	cmp	r8, r3
   1cbe4:	d1e2      	bne.n	1cbac <update_ccc+0x5c>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1cbe6:	7a20      	ldrb	r0, [r4, #8]
   1cbe8:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1cbec:	f7ff fa32 	bl	1c054 <find_sc_cfg>
	if (!cfg) {
   1cbf0:	2800      	cmp	r0, #0
   1cbf2:	d0db      	beq.n	1cbac <update_ccc+0x5c>
	if (!(cfg->data.start || cfg->data.end)) {
   1cbf4:	8902      	ldrh	r2, [r0, #8]
   1cbf6:	8943      	ldrh	r3, [r0, #10]
   1cbf8:	ea52 0103 	orrs.w	r1, r2, r3
   1cbfc:	d0d6      	beq.n	1cbac <update_ccc+0x5c>
	index = bt_conn_index(conn);
   1cbfe:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1cc00:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1cc02:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   1cc04:	f7fd f9b8 	bl	19f78 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1cc08:	4914      	ldr	r1, [pc, #80]	; (1cc5c <update_ccc+0x10c>)
   1cc0a:	4a15      	ldr	r2, [pc, #84]	; (1cc60 <update_ccc+0x110>)
   1cc0c:	2318      	movs	r3, #24
   1cc0e:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1cc12:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1cc14:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1cc16:	4a13      	ldr	r2, [pc, #76]	; (1cc64 <update_ccc+0x114>)
   1cc18:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1cc1a:	1d3a      	adds	r2, r7, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1cc1c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1cc20:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1cc22:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1cc24:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1cc28:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1cc2a:	4620      	mov	r0, r4
   1cc2c:	f7ff fee6 	bl	1c9fc <bt_gatt_indicate>
   1cc30:	2800      	cmp	r0, #0
   1cc32:	d0bb      	beq.n	1cbac <update_ccc+0x5c>
		BT_ERR("SC restore indication failed");
   1cc34:	4b0c      	ldr	r3, [pc, #48]	; (1cc68 <update_ccc+0x118>)
   1cc36:	61fb      	str	r3, [r7, #28]
   1cc38:	4806      	ldr	r0, [pc, #24]	; (1cc54 <update_ccc+0x104>)
   1cc3a:	2302      	movs	r3, #2
   1cc3c:	f107 0218 	add.w	r2, r7, #24
   1cc40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cc44:	61bb      	str	r3, [r7, #24]
   1cc46:	f00e ff72 	bl	2bb2e <z_log_msg_static_create.constprop.0>
   1cc4a:	e7af      	b.n	1cbac <update_ccc+0x5c>
   1cc4c:	0001bf4d 	.word	0x0001bf4d
   1cc50:	00031290 	.word	0x00031290
   1cc54:	0002e5b4 	.word	0x0002e5b4
   1cc58:	20000758 	.word	0x20000758
   1cc5c:	20005cbc 	.word	0x20005cbc
   1cc60:	0002efec 	.word	0x0002efec
   1cc64:	0002bc05 	.word	0x0002bc05
   1cc68:	000312a4 	.word	0x000312a4

0001cc6c <gatt_notify>:
{
   1cc6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cc70:	4614      	mov	r4, r2
   1cc72:	b087      	sub	sp, #28
   1cc74:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1cc76:	2294      	movs	r2, #148	; 0x94
   1cc78:	6861      	ldr	r1, [r4, #4]
{
   1cc7a:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1cc7c:	f00f f849 	bl	2bd12 <bt_gatt_check_perm>
   1cc80:	b170      	cbz	r0, 1cca0 <gatt_notify+0x34>
		BT_WARN("Link is not encrypted");
   1cc82:	4b2b      	ldr	r3, [pc, #172]	; (1cd30 <gatt_notify+0xc4>)
   1cc84:	482b      	ldr	r0, [pc, #172]	; (1cd34 <gatt_notify+0xc8>)
   1cc86:	9305      	str	r3, [sp, #20]
   1cc88:	aa04      	add	r2, sp, #16
   1cc8a:	2302      	movs	r3, #2
   1cc8c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1cc90:	9304      	str	r3, [sp, #16]
   1cc92:	f00e ff4c 	bl	2bb2e <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1cc96:	f04f 30ff 	mov.w	r0, #4294967295
}
   1cc9a:	b007      	add	sp, #28
   1cc9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1cca0:	6861      	ldr	r1, [r4, #4]
   1cca2:	2201      	movs	r2, #1
   1cca4:	4630      	mov	r0, r6
   1cca6:	f00f f867 	bl	2bd78 <bt_gatt_is_subscribed>
   1ccaa:	b960      	cbnz	r0, 1ccc6 <gatt_notify+0x5a>
			BT_WARN("Device is not subscribed to characteristic");
   1ccac:	4b22      	ldr	r3, [pc, #136]	; (1cd38 <gatt_notify+0xcc>)
   1ccae:	4821      	ldr	r0, [pc, #132]	; (1cd34 <gatt_notify+0xc8>)
   1ccb0:	9305      	str	r3, [sp, #20]
   1ccb2:	aa04      	add	r2, sp, #16
   1ccb4:	2302      	movs	r3, #2
   1ccb6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ccba:	9304      	str	r3, [sp, #16]
   1ccbc:	f00e ff37 	bl	2bb2e <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1ccc0:	f06f 0015 	mvn.w	r0, #21
   1ccc4:	e7e9      	b.n	1cc9a <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   1ccc6:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1ccc8:	211b      	movs	r1, #27
   1ccca:	3202      	adds	r2, #2
   1cccc:	4630      	mov	r0, r6
   1ccce:	f7fe f9cf 	bl	1b070 <bt_att_create_pdu>
	if (!buf) {
   1ccd2:	4605      	mov	r5, r0
   1ccd4:	b960      	cbnz	r0, 1ccf0 <gatt_notify+0x84>
		BT_WARN("No buffer available to send notification");
   1ccd6:	4b19      	ldr	r3, [pc, #100]	; (1cd3c <gatt_notify+0xd0>)
   1ccd8:	4816      	ldr	r0, [pc, #88]	; (1cd34 <gatt_notify+0xc8>)
   1ccda:	9305      	str	r3, [sp, #20]
   1ccdc:	aa04      	add	r2, sp, #16
   1ccde:	2302      	movs	r3, #2
   1cce0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1cce4:	9304      	str	r3, [sp, #16]
   1cce6:	f00e ff22 	bl	2bb2e <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   1ccea:	f06f 000b 	mvn.w	r0, #11
   1ccee:	e7d4      	b.n	1cc9a <gatt_notify+0x2e>
   1ccf0:	f100 0908 	add.w	r9, r0, #8
   1ccf4:	2102      	movs	r1, #2
   1ccf6:	4648      	mov	r0, r9
   1ccf8:	f00f fdf4 	bl	2c8e4 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1ccfc:	4607      	mov	r7, r0
   1ccfe:	89a1      	ldrh	r1, [r4, #12]
   1cd00:	f827 8b02 	strh.w	r8, [r7], #2
   1cd04:	4648      	mov	r0, r9
   1cd06:	f00f fded 	bl	2c8e4 <net_buf_simple_add>
   1cd0a:	89a2      	ldrh	r2, [r4, #12]
   1cd0c:	68a1      	ldr	r1, [r4, #8]
   1cd0e:	4638      	mov	r0, r7
   1cd10:	f011 f862 	bl	2ddd8 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1cd14:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1cd18:	4628      	mov	r0, r5
   1cd1a:	2301      	movs	r3, #1
   1cd1c:	f00e fd99 	bl	2b852 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1cd20:	4629      	mov	r1, r5
   1cd22:	4630      	mov	r0, r6
}
   1cd24:	b007      	add	sp, #28
   1cd26:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1cd2a:	f00e bd13 	b.w	2b754 <bt_att_send>
   1cd2e:	bf00      	nop
   1cd30:	00031228 	.word	0x00031228
   1cd34:	0002e5b4 	.word	0x0002e5b4
   1cd38:	0003123e 	.word	0x0003123e
   1cd3c:	000312c1 	.word	0x000312c1

0001cd40 <notify_cb.part.0>:
static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
   1cd40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1cd44:	4b42      	ldr	r3, [pc, #264]	; (1ce50 <notify_cb.part.0+0x110>)
	ccc = attr->user_data;
   1cd46:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1cd4a:	4598      	cmp	r8, r3
static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
   1cd4c:	b087      	sub	sp, #28
   1cd4e:	4607      	mov	r7, r0
   1cd50:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1cd52:	d11e      	bne.n	1cd92 <notify_cb.part.0+0x52>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1cd54:	2600      	movs	r6, #0
   1cd56:	4d3f      	ldr	r5, [pc, #252]	; (1ce54 <notify_cb.part.0+0x114>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1cd58:	46b1      	mov	r9, r6
   1cd5a:	2207      	movs	r2, #7
   1cd5c:	4669      	mov	r1, sp
   1cd5e:	4628      	mov	r0, r5
   1cd60:	f8cd 9000 	str.w	r9, [sp]
   1cd64:	f8cd 9003 	str.w	r9, [sp, #3]
   1cd68:	f011 f826 	bl	2ddb8 <memcmp>
   1cd6c:	b178      	cbz	r0, 1cd8e <notify_cb.part.0+0x4e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1cd6e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1cd72:	2207      	movs	r2, #7
   1cd74:	4629      	mov	r1, r5
   1cd76:	f7fd fa6b 	bl	1a250 <bt_conn_lookup_state_le>
			if (!conn) {
   1cd7a:	b9e8      	cbnz	r0, 1cdb8 <notify_cb.part.0+0x78>
				sc = (struct sc_data *)data->ind_params->data;
   1cd7c:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   1cd7e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1cd82:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1cd84:	4629      	mov	r1, r5
   1cd86:	8853      	ldrh	r3, [r2, #2]
   1cd88:	8812      	ldrh	r2, [r2, #0]
   1cd8a:	f7ff f985 	bl	1c098 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1cd8e:	350c      	adds	r5, #12
   1cd90:	b186      	cbz	r6, 1cdb4 <notify_cb.part.0+0x74>
		if (cfg->value != data->type) {
   1cd92:	f8b8 2008 	ldrh.w	r2, [r8, #8]
   1cd96:	89a3      	ldrh	r3, [r4, #12]
   1cd98:	429a      	cmp	r2, r3
   1cd9a:	d106      	bne.n	1cdaa <notify_cb.part.0+0x6a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1cd9c:	4641      	mov	r1, r8
   1cd9e:	f811 0b01 	ldrb.w	r0, [r1], #1
   1cda2:	f7fd fa09 	bl	1a1b8 <bt_conn_lookup_addr_le>
		if (!conn) {
   1cda6:	4606      	mov	r6, r0
   1cda8:	b948      	cbnz	r0, 1cdbe <notify_cb.part.0+0x7e>
	return BT_GATT_ITER_CONTINUE;
   1cdaa:	2701      	movs	r7, #1
}
   1cdac:	4638      	mov	r0, r7
   1cdae:	b007      	add	sp, #28
   1cdb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cdb4:	2601      	movs	r6, #1
   1cdb6:	e7d0      	b.n	1cd5a <notify_cb.part.0+0x1a>
			bt_conn_unref(conn);
   1cdb8:	f00d fedf 	bl	2ab7a <bt_conn_unref>
   1cdbc:	e7e7      	b.n	1cd8e <notify_cb.part.0+0x4e>
		if (conn->state != BT_CONN_CONNECTED) {
   1cdbe:	7b43      	ldrb	r3, [r0, #13]
   1cdc0:	2b07      	cmp	r3, #7
   1cdc2:	d002      	beq.n	1cdca <notify_cb.part.0+0x8a>
			bt_conn_unref(conn);
   1cdc4:	f00d fed9 	bl	2ab7a <bt_conn_unref>
			continue;
   1cdc8:	e7ef      	b.n	1cdaa <notify_cb.part.0+0x6a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1cdca:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1cdce:	b123      	cbz	r3, 1cdda <notify_cb.part.0+0x9a>
   1cdd0:	4639      	mov	r1, r7
   1cdd2:	4798      	blx	r3
   1cdd4:	b908      	cbnz	r0, 1cdda <notify_cb.part.0+0x9a>
			bt_conn_unref(conn);
   1cdd6:	4630      	mov	r0, r6
   1cdd8:	e7f4      	b.n	1cdc4 <notify_cb.part.0+0x84>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1cdda:	4639      	mov	r1, r7
   1cddc:	2294      	movs	r2, #148	; 0x94
   1cdde:	4630      	mov	r0, r6
   1cde0:	f00e ff97 	bl	2bd12 <bt_gatt_check_perm>
   1cde4:	4607      	mov	r7, r0
   1cde6:	b150      	cbz	r0, 1cdfe <notify_cb.part.0+0xbe>
			BT_WARN("Link is not encrypted");
   1cde8:	4b1b      	ldr	r3, [pc, #108]	; (1ce58 <notify_cb.part.0+0x118>)
   1cdea:	9305      	str	r3, [sp, #20]
   1cdec:	481b      	ldr	r0, [pc, #108]	; (1ce5c <notify_cb.part.0+0x11c>)
   1cdee:	2302      	movs	r3, #2
   1cdf0:	aa04      	add	r2, sp, #16
   1cdf2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1cdf6:	9304      	str	r3, [sp, #16]
   1cdf8:	f00e fe99 	bl	2bb2e <z_log_msg_static_create.constprop.0>
   1cdfc:	e7eb      	b.n	1cdd6 <notify_cb.part.0+0x96>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1cdfe:	89a3      	ldrh	r3, [r4, #12]
   1ce00:	2b02      	cmp	r3, #2
   1ce02:	d116      	bne.n	1ce32 <notify_cb.part.0+0xf2>
   1ce04:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1ce08:	079a      	lsls	r2, r3, #30
   1ce0a:	d51f      	bpl.n	1ce4c <notify_cb.part.0+0x10c>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1ce0c:	6922      	ldr	r2, [r4, #16]
   1ce0e:	88a1      	ldrh	r1, [r4, #4]
   1ce10:	4630      	mov	r0, r6
   1ce12:	f7ff fd6f 	bl	1c8f4 <gatt_indicate>
			if (err == 0) {
   1ce16:	4605      	mov	r5, r0
   1ce18:	b918      	cbnz	r0, 1ce22 <notify_cb.part.0+0xe2>
				data->ind_params->_ref++;
   1ce1a:	6922      	ldr	r2, [r4, #16]
   1ce1c:	7d93      	ldrb	r3, [r2, #22]
   1ce1e:	3301      	adds	r3, #1
   1ce20:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1ce22:	4630      	mov	r0, r6
   1ce24:	f00d fea9 	bl	2ab7a <bt_conn_unref>
		if (err < 0) {
   1ce28:	2d00      	cmp	r5, #0
   1ce2a:	dbbf      	blt.n	1cdac <notify_cb.part.0+0x6c>
		data->err = 0;
   1ce2c:	2300      	movs	r3, #0
   1ce2e:	60a3      	str	r3, [r4, #8]
   1ce30:	e7bb      	b.n	1cdaa <notify_cb.part.0+0x6a>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1ce32:	2b01      	cmp	r3, #1
   1ce34:	d10a      	bne.n	1ce4c <notify_cb.part.0+0x10c>
   1ce36:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1ce3a:	07db      	lsls	r3, r3, #31
   1ce3c:	d506      	bpl.n	1ce4c <notify_cb.part.0+0x10c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1ce3e:	6922      	ldr	r2, [r4, #16]
   1ce40:	88a1      	ldrh	r1, [r4, #4]
   1ce42:	4630      	mov	r0, r6
   1ce44:	f7ff ff12 	bl	1cc6c <gatt_notify>
   1ce48:	4605      	mov	r5, r0
   1ce4a:	e7ea      	b.n	1ce22 <notify_cb.part.0+0xe2>
			err = 0;
   1ce4c:	463d      	mov	r5, r7
   1ce4e:	e7e8      	b.n	1ce22 <notify_cb.part.0+0xe2>
   1ce50:	20000758 	.word	0x20000758
   1ce54:	20006b11 	.word	0x20006b11
   1ce58:	00031228 	.word	0x00031228
   1ce5c:	0002e5b4 	.word	0x0002e5b4

0001ce60 <notify_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ce60:	4b04      	ldr	r3, [pc, #16]	; (1ce74 <notify_cb+0x14>)
{
   1ce62:	4611      	mov	r1, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ce64:	6882      	ldr	r2, [r0, #8]
   1ce66:	429a      	cmp	r2, r3
   1ce68:	d101      	bne.n	1ce6e <notify_cb+0xe>
   1ce6a:	f7ff bf69 	b.w	1cd40 <notify_cb.part.0>
}
   1ce6e:	2001      	movs	r0, #1
   1ce70:	4770      	bx	lr
   1ce72:	bf00      	nop
   1ce74:	0001bf4d 	.word	0x0001bf4d

0001ce78 <bt_gatt_connected>:
{
   1ce78:	b5b0      	push	{r4, r5, r7, lr}
   1ce7a:	b08e      	sub	sp, #56	; 0x38
   1ce7c:	af02      	add	r7, sp, #8
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ce7e:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   1ce82:	4604      	mov	r4, r0
	data.conn = conn;
   1ce84:	6078      	str	r0, [r7, #4]
	data.sec = BT_SECURITY_L1;
   1ce86:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ce88:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1ce8a:	723b      	strb	r3, [r7, #8]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ce8c:	4629      	mov	r1, r5
   1ce8e:	f00d fd3d 	bl	2a90c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1ce92:	b198      	cbz	r0, 1cebc <bt_gatt_connected+0x44>
		if (conn->id) {
   1ce94:	7a22      	ldrb	r2, [r4, #8]
   1ce96:	b3a2      	cbz	r2, 1cf02 <bt_gatt_connected+0x8a>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1ce98:	2104      	movs	r1, #4
   1ce9a:	4638      	mov	r0, r7
   1ce9c:	f00c fa77 	bl	2938e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1cea0:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1cea2:	4a19      	ldr	r2, [pc, #100]	; (1cf08 <bt_gatt_connected+0x90>)
   1cea4:	2124      	movs	r1, #36	; 0x24
   1cea6:	f107 000c 	add.w	r0, r7, #12
   1ceaa:	462b      	mov	r3, r5
   1ceac:	f7fa fa9a 	bl	173e4 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1ceb0:	f107 020c 	add.w	r2, r7, #12
   1ceb4:	4915      	ldr	r1, [pc, #84]	; (1cf0c <bt_gatt_connected+0x94>)
   1ceb6:	4610      	mov	r0, r2
   1ceb8:	f7f9 f844 	bl	15f44 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1cebc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cec0:	4a13      	ldr	r2, [pc, #76]	; (1cf10 <bt_gatt_connected+0x98>)
   1cec2:	1d3b      	adds	r3, r7, #4
   1cec4:	2001      	movs	r0, #1
   1cec6:	f00e ff19 	bl	2bcfc <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1ceca:	4620      	mov	r0, r4
   1cecc:	f00d feee 	bl	2acac <bt_conn_get_security>
   1ced0:	7a39      	ldrb	r1, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1ced2:	4288      	cmp	r0, r1
   1ced4:	d212      	bcs.n	1cefc <bt_gatt_connected+0x84>
		int err = bt_conn_set_security(conn, data.sec);
   1ced6:	4620      	mov	r0, r4
   1ced8:	f00d feb8 	bl	2ac4c <bt_conn_set_security>
		if (err) {
   1cedc:	b170      	cbz	r0, 1cefc <bt_gatt_connected+0x84>
			BT_WARN("Failed to set security for bonded peer (%d)",
   1cede:	466c      	mov	r4, sp
   1cee0:	b088      	sub	sp, #32
   1cee2:	aa02      	add	r2, sp, #8
   1cee4:	4b0b      	ldr	r3, [pc, #44]	; (1cf14 <bt_gatt_connected+0x9c>)
   1cee6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ceea:	2303      	movs	r3, #3
   1ceec:	f842 3f10 	str.w	r3, [r2, #16]!
   1cef0:	4809      	ldr	r0, [pc, #36]	; (1cf18 <bt_gatt_connected+0xa0>)
   1cef2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1cef6:	f00e fe1a 	bl	2bb2e <z_log_msg_static_create.constprop.0>
   1cefa:	46a5      	mov	sp, r4
}
   1cefc:	3730      	adds	r7, #48	; 0x30
   1cefe:	46bd      	mov	sp, r7
   1cf00:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1cf02:	9200      	str	r2, [sp, #0]
   1cf04:	e7cd      	b.n	1cea2 <bt_gatt_connected+0x2a>
   1cf06:	bf00      	nop
   1cf08:	00031224 	.word	0x00031224
   1cf0c:	0001c799 	.word	0x0001c799
   1cf10:	0001cb51 	.word	0x0001cb51
   1cf14:	000312ea 	.word	0x000312ea
   1cf18:	0002e5b4 	.word	0x0002e5b4

0001cf1c <bt_gatt_att_max_mtu_changed>:
{
   1cf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1cf1e:	4b08      	ldr	r3, [pc, #32]	; (1cf40 <bt_gatt_att_max_mtu_changed+0x24>)
   1cf20:	681c      	ldr	r4, [r3, #0]
   1cf22:	4605      	mov	r5, r0
   1cf24:	460e      	mov	r6, r1
   1cf26:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1cf28:	b14c      	cbz	r4, 1cf3e <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1cf2a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1cf2e:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1cf30:	b11b      	cbz	r3, 1cf3a <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1cf32:	463a      	mov	r2, r7
   1cf34:	4631      	mov	r1, r6
   1cf36:	4628      	mov	r0, r5
   1cf38:	4798      	blx	r3
	return node->next;
   1cf3a:	6864      	ldr	r4, [r4, #4]
   1cf3c:	e7f4      	b.n	1cf28 <bt_gatt_att_max_mtu_changed+0xc>
}
   1cf3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cf40:	20005c90 	.word	0x20005c90

0001cf44 <bt_gatt_encrypt_change>:
{
   1cf44:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1cf46:	4a06      	ldr	r2, [pc, #24]	; (1cf60 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   1cf48:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1cf4a:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1cf4c:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1cf4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1cf52:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1cf56:	f00e fed1 	bl	2bcfc <bt_gatt_foreach_attr>
}
   1cf5a:	b003      	add	sp, #12
   1cf5c:	f85d fb04 	ldr.w	pc, [sp], #4
   1cf60:	0001cb51 	.word	0x0001cb51

0001cf64 <bt_gatt_store_ccc>:
{
   1cf64:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cf66:	b0c1      	sub	sp, #260	; 0x104
   1cf68:	af02      	add	r7, sp, #8
	save.count = 0;
   1cf6a:	2300      	movs	r3, #0
{
   1cf6c:	4604      	mov	r4, r0
   1cf6e:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1cf70:	62f9      	str	r1, [r7, #44]	; 0x2c
	save.addr_with_id.id = id;
   1cf72:	f887 0030 	strb.w	r0, [r7, #48]	; 0x30
	save.count = 0;
   1cf76:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1cf7a:	4a1d      	ldr	r2, [pc, #116]	; (1cff0 <bt_gatt_store_ccc+0x8c>)
   1cf7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1cf80:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cf84:	2001      	movs	r0, #1
   1cf86:	f00e feb9 	bl	2bcfc <bt_gatt_foreach_attr>
	if (id) {
   1cf8a:	b364      	cbz	r4, 1cfe6 <bt_gatt_store_ccc+0x82>
		u8_to_dec(id_str, sizeof(id_str), id);
   1cf8c:	1d3e      	adds	r6, r7, #4
   1cf8e:	4622      	mov	r2, r4
   1cf90:	2104      	movs	r1, #4
   1cf92:	4630      	mov	r0, r6
   1cf94:	f00c f9fb 	bl	2938e <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1cf98:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1cf9a:	4a16      	ldr	r2, [pc, #88]	; (1cff4 <bt_gatt_store_ccc+0x90>)
   1cf9c:	462b      	mov	r3, r5
   1cf9e:	2124      	movs	r1, #36	; 0x24
   1cfa0:	f107 0008 	add.w	r0, r7, #8
   1cfa4:	f7fa fa1e 	bl	173e4 <bt_settings_encode_key>
	if (save.count) {
   1cfa8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1cfac:	b1ea      	cbz	r2, 1cfea <bt_gatt_store_ccc+0x86>
		len = save.count * sizeof(*save.store);
   1cfae:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1cfb0:	f107 0134 	add.w	r1, r7, #52	; 0x34
	err = settings_save_one(key, str, len);
   1cfb4:	f107 0008 	add.w	r0, r7, #8
   1cfb8:	f7f8 ff9e 	bl	15ef8 <settings_save_one>
	if (err) {
   1cfbc:	4604      	mov	r4, r0
   1cfbe:	b170      	cbz	r0, 1cfde <bt_gatt_store_ccc+0x7a>
		BT_ERR("Failed to store CCCs (err %d)", err);
   1cfc0:	466d      	mov	r5, sp
   1cfc2:	b088      	sub	sp, #32
   1cfc4:	aa02      	add	r2, sp, #8
   1cfc6:	4b0c      	ldr	r3, [pc, #48]	; (1cff8 <bt_gatt_store_ccc+0x94>)
   1cfc8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1cfcc:	2303      	movs	r3, #3
   1cfce:	f842 3f10 	str.w	r3, [r2, #16]!
   1cfd2:	480a      	ldr	r0, [pc, #40]	; (1cffc <bt_gatt_store_ccc+0x98>)
   1cfd4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1cfd8:	f00e fda9 	bl	2bb2e <z_log_msg_static_create.constprop.0>
   1cfdc:	46ad      	mov	sp, r5
}
   1cfde:	4620      	mov	r0, r4
   1cfe0:	37fc      	adds	r7, #252	; 0xfc
   1cfe2:	46bd      	mov	sp, r7
   1cfe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1cfe6:	9400      	str	r4, [sp, #0]
   1cfe8:	e7d7      	b.n	1cf9a <bt_gatt_store_ccc+0x36>
		str = NULL;
   1cfea:	4611      	mov	r1, r2
   1cfec:	e7e2      	b.n	1cfb4 <bt_gatt_store_ccc+0x50>
   1cfee:	bf00      	nop
   1cff0:	0001bf15 	.word	0x0001bf15
   1cff4:	00031224 	.word	0x00031224
   1cff8:	00031316 	.word	0x00031316
   1cffc:	0002e5b4 	.word	0x0002e5b4

0001d000 <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
   1d000:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d002:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   1d004:	ae03      	add	r6, sp, #12
{
   1d006:	4604      	mov	r4, r0
   1d008:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
   1d00a:	9103      	str	r1, [sp, #12]
   1d00c:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   1d010:	4a1f      	ldr	r2, [pc, #124]	; (1d090 <bt_gatt_clear+0x90>)
   1d012:	4633      	mov	r3, r6
   1d014:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d018:	2001      	movs	r0, #1
   1d01a:	f00e fe6f 	bl	2bcfc <bt_gatt_foreach_attr>
		if (id) {
   1d01e:	b394      	cbz	r4, 1d086 <bt_gatt_clear+0x86>
			u8_to_dec(id_str, sizeof(id_str), id);
   1d020:	af02      	add	r7, sp, #8
   1d022:	4622      	mov	r2, r4
   1d024:	2104      	movs	r1, #4
   1d026:	4638      	mov	r0, r7
   1d028:	f00c f9b1 	bl	2938e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1d02c:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1d02e:	4a19      	ldr	r2, [pc, #100]	; (1d094 <bt_gatt_clear+0x94>)
   1d030:	462b      	mov	r3, r5
   1d032:	2124      	movs	r1, #36	; 0x24
   1d034:	a805      	add	r0, sp, #20
   1d036:	f7fa f9d5 	bl	173e4 <bt_settings_encode_key>
		return settings_delete(key);
   1d03a:	a805      	add	r0, sp, #20
   1d03c:	f00c ffce 	bl	29fdc <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
   1d040:	2800      	cmp	r0, #0
   1d042:	db1e      	blt.n	1d082 <bt_gatt_clear+0x82>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
   1d044:	4629      	mov	r1, r5
   1d046:	4620      	mov	r0, r4
   1d048:	f7ff f86c 	bl	1c124 <bt_gatt_clear_sc>
		if (err < 0) {
   1d04c:	2800      	cmp	r0, #0
   1d04e:	db18      	blt.n	1d082 <bt_gatt_clear+0x82>
	cfg = find_cf_cfg_by_addr(id, addr);
   1d050:	4629      	mov	r1, r5
   1d052:	4620      	mov	r0, r4
   1d054:	f7fe fe4c 	bl	1bcf0 <find_cf_cfg_by_addr>
	if (cfg) {
   1d058:	b108      	cbz	r0, 1d05e <bt_gatt_clear+0x5e>
		clear_cf_cfg(cfg);
   1d05a:	f00e fd6b 	bl	2bb34 <clear_cf_cfg>
		if (id) {
   1d05e:	b1a4      	cbz	r4, 1d08a <bt_gatt_clear+0x8a>
			u8_to_dec(id_str, sizeof(id_str), id);
   1d060:	4622      	mov	r2, r4
   1d062:	2104      	movs	r1, #4
   1d064:	4630      	mov	r0, r6
   1d066:	f00c f992 	bl	2938e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1d06a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
   1d06c:	4a0a      	ldr	r2, [pc, #40]	; (1d098 <bt_gatt_clear+0x98>)
   1d06e:	462b      	mov	r3, r5
   1d070:	2124      	movs	r1, #36	; 0x24
   1d072:	a805      	add	r0, sp, #20
   1d074:	f7fa f9b6 	bl	173e4 <bt_settings_encode_key>
		return settings_delete(key);
   1d078:	a805      	add	r0, sp, #20
   1d07a:	f00c ffaf 	bl	29fdc <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
   1d07e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
}
   1d082:	b00f      	add	sp, #60	; 0x3c
   1d084:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1d086:	9400      	str	r4, [sp, #0]
   1d088:	e7d1      	b.n	1d02e <bt_gatt_clear+0x2e>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1d08a:	9400      	str	r4, [sp, #0]
   1d08c:	e7ee      	b.n	1d06c <bt_gatt_clear+0x6c>
   1d08e:	bf00      	nop
   1d090:	0001be65 	.word	0x0001be65
   1d094:	00031224 	.word	0x00031224
   1d098:	00031360 	.word	0x00031360

0001d09c <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1d09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d0a0:	b08c      	sub	sp, #48	; 0x30
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1d0a2:	4603      	mov	r3, r0
   1d0a4:	4a41      	ldr	r2, [pc, #260]	; (1d1ac <bt_gatt_disconnected+0x110>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1d0a6:	4e42      	ldr	r6, [pc, #264]	; (1d1b0 <bt_gatt_disconnected+0x114>)
{
   1d0a8:	4604      	mov	r4, r0
   1d0aa:	af02      	add	r7, sp, #8
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1d0ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d0b0:	2001      	movs	r0, #1
   1d0b2:	f00e fe23 	bl	2bcfc <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   1d0b6:	4620      	mov	r0, r4
   1d0b8:	f7fc ff5e 	bl	19f78 <bt_conn_index>
   1d0bc:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1d0be:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   1d0c2:	b120      	cbz	r0, 1d0ce <bt_gatt_disconnected+0x32>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   1d0c4:	f00d fd59 	bl	2ab7a <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   1d0c8:	2300      	movs	r3, #0
   1d0ca:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1d0ce:	4839      	ldr	r0, [pc, #228]	; (1d1b4 <bt_gatt_disconnected+0x118>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d0d0:	f104 0588 	add.w	r5, r4, #136	; 0x88
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1d0d4:	f010 fb2f 	bl	2d736 <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d0d8:	7a20      	ldrb	r0, [r4, #8]
   1d0da:	4629      	mov	r1, r5
   1d0dc:	f00d fc16 	bl	2a90c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1d0e0:	2800      	cmp	r0, #0
   1d0e2:	d039      	beq.n	1d158 <bt_gatt_disconnected+0xbc>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1d0e4:	4629      	mov	r1, r5
   1d0e6:	7a20      	ldrb	r0, [r4, #8]
   1d0e8:	f7ff ff3c 	bl	1cf64 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   1d0ec:	4620      	mov	r0, r4
   1d0ee:	f7fe fcb7 	bl	1ba60 <find_cf_cfg>
	if (!cfg) {
   1d0f2:	4606      	mov	r6, r0
   1d0f4:	2800      	cmp	r0, #0
   1d0f6:	d04f      	beq.n	1d198 <bt_gatt_disconnected+0xfc>
		if (conn->id) {
   1d0f8:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   1d0fa:	3608      	adds	r6, #8
		if (conn->id) {
   1d0fc:	2a00      	cmp	r2, #0
   1d0fe:	d04d      	beq.n	1d19c <bt_gatt_disconnected+0x100>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1d100:	2104      	movs	r1, #4
   1d102:	4638      	mov	r0, r7
   1d104:	f00c f943 	bl	2938e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1d108:	462b      	mov	r3, r5
   1d10a:	4a2b      	ldr	r2, [pc, #172]	; (1d1b8 <bt_gatt_disconnected+0x11c>)
   1d10c:	9700      	str	r7, [sp, #0]
   1d10e:	2124      	movs	r1, #36	; 0x24
   1d110:	1d38      	adds	r0, r7, #4
   1d112:	f7fa f967 	bl	173e4 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   1d116:	7a23      	ldrb	r3, [r4, #8]
   1d118:	f04f 0801 	mov.w	r8, #1
   1d11c:	b93b      	cbnz	r3, 1d12e <bt_gatt_disconnected+0x92>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1d11e:	2300      	movs	r3, #0
   1d120:	9300      	str	r3, [sp, #0]
   1d122:	4a25      	ldr	r2, [pc, #148]	; (1d1b8 <bt_gatt_disconnected+0x11c>)
   1d124:	462b      	mov	r3, r5
   1d126:	2124      	movs	r1, #36	; 0x24
   1d128:	1d38      	adds	r0, r7, #4
   1d12a:	f7fa f95b 	bl	173e4 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1d12e:	4642      	mov	r2, r8
   1d130:	4631      	mov	r1, r6
   1d132:	1d38      	adds	r0, r7, #4
   1d134:	f7f8 fee0 	bl	15ef8 <settings_save_one>
	if (err) {
   1d138:	b170      	cbz	r0, 1d158 <bt_gatt_disconnected+0xbc>
		BT_ERR("Failed to store Client Features (err %d)", err);
   1d13a:	466e      	mov	r6, sp
   1d13c:	b088      	sub	sp, #32
   1d13e:	aa02      	add	r2, sp, #8
   1d140:	4b1e      	ldr	r3, [pc, #120]	; (1d1bc <bt_gatt_disconnected+0x120>)
   1d142:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d146:	2303      	movs	r3, #3
   1d148:	f842 3f10 	str.w	r3, [r2, #16]!
   1d14c:	481c      	ldr	r0, [pc, #112]	; (1d1c0 <bt_gatt_disconnected+0x124>)
   1d14e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d152:	f00e fcec 	bl	2bb2e <z_log_msg_static_create.constprop.0>
   1d156:	46b5      	mov	sp, r6
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d158:	7a20      	ldrb	r0, [r4, #8]
   1d15a:	4629      	mov	r1, r5
   1d15c:	f00d fbd6 	bl	2a90c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1d160:	b148      	cbz	r0, 1d176 <bt_gatt_disconnected+0xda>
		struct addr_with_id addr_with_id = {
   1d162:	7a23      	ldrb	r3, [r4, #8]
   1d164:	723b      	strb	r3, [r7, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1d166:	4a17      	ldr	r2, [pc, #92]	; (1d1c4 <bt_gatt_disconnected+0x128>)
		struct addr_with_id addr_with_id = {
   1d168:	607d      	str	r5, [r7, #4]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1d16a:	1d3b      	adds	r3, r7, #4
   1d16c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d170:	2001      	movs	r0, #1
   1d172:	f00e fdc3 	bl	2bcfc <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1d176:	4620      	mov	r0, r4
   1d178:	f7fe fc72 	bl	1ba60 <find_cf_cfg>
	if (!cfg) {
   1d17c:	4606      	mov	r6, r0
   1d17e:	b138      	cbz	r0, 1d190 <bt_gatt_disconnected+0xf4>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d180:	7a20      	ldrb	r0, [r4, #8]
   1d182:	4629      	mov	r1, r5
   1d184:	f00d fbc2 	bl	2a90c <bt_addr_le_is_bonded>
   1d188:	b958      	cbnz	r0, 1d1a2 <bt_gatt_disconnected+0x106>
		clear_cf_cfg(cfg);
   1d18a:	4630      	mov	r0, r6
   1d18c:	f00e fcd2 	bl	2bb34 <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1d190:	3728      	adds	r7, #40	; 0x28
   1d192:	46bd      	mov	sp, r7
   1d194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
   1d198:	4680      	mov	r8, r0
   1d19a:	e7c0      	b.n	1d11e <bt_gatt_disconnected+0x82>
   1d19c:	f04f 0801 	mov.w	r8, #1
   1d1a0:	e7bd      	b.n	1d11e <bt_gatt_disconnected+0x82>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1d1a2:	4629      	mov	r1, r5
   1d1a4:	1c70      	adds	r0, r6, #1
   1d1a6:	f00e fc1d 	bl	2b9e4 <bt_addr_le_copy>
}
   1d1aa:	e7f1      	b.n	1d190 <bt_gatt_disconnected+0xf4>
   1d1ac:	0001c1ed 	.word	0x0001c1ed
   1d1b0:	20002128 	.word	0x20002128
   1d1b4:	20002130 	.word	0x20002130
   1d1b8:	00031360 	.word	0x00031360
   1d1bc:	00031334 	.word	0x00031334
   1d1c0:	0002e5b4 	.word	0x0002e5b4
   1d1c4:	0001be65 	.word	0x0001be65

0001d1c8 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   1d1c8:	4601      	mov	r1, r0
   1d1ca:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1d1cc:	4803      	ldr	r0, [pc, #12]	; (1d1dc <smp_find+0x14>)
   1d1ce:	f00e fec0 	bl	2bf52 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1d1d2:	2800      	cmp	r0, #0
}
   1d1d4:	4802      	ldr	r0, [pc, #8]	; (1d1e0 <smp_find+0x18>)
   1d1d6:	bf08      	it	eq
   1d1d8:	2000      	moveq	r0, #0
   1d1da:	bd08      	pop	{r3, pc}
   1d1dc:	200021bc 	.word	0x200021bc
   1d1e0:	200021b8 	.word	0x200021b8

0001d1e4 <latch_auth_cb>:
{
   1d1e4:	b510      	push	{r4, lr}
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1d1e6:	4a0c      	ldr	r2, [pc, #48]	; (1d218 <latch_auth_cb+0x34>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1d1e8:	6811      	ldr	r1, [r2, #0]
   1d1ea:	4a0c      	ldr	r2, [pc, #48]	; (1d21c <latch_auth_cb+0x38>)
   1d1ec:	f3bf 8f5b 	dmb	ish
   1d1f0:	f500 73d4 	add.w	r3, r0, #424	; 0x1a8
   1d1f4:	e853 4f00 	ldrex	r4, [r3]
   1d1f8:	4294      	cmp	r4, r2
   1d1fa:	d104      	bne.n	1d206 <latch_auth_cb+0x22>
   1d1fc:	e843 1c00 	strex	ip, r1, [r3]
   1d200:	f1bc 0f00 	cmp.w	ip, #0
   1d204:	d1f6      	bne.n	1d1f4 <latch_auth_cb+0x10>
   1d206:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d20a:	f3bf 8f5b 	dmb	ish
   1d20e:	f8d0 01a8 	ldr.w	r0, [r0, #424]	; 0x1a8
   1d212:	f3bf 8f5b 	dmb	ish
}
   1d216:	bd10      	pop	{r4, pc}
   1d218:	20005b68 	.word	0x20005b68
   1d21c:	200021b8 	.word	0x200021b8

0001d220 <get_io_capa>:
{
   1d220:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d222:	f7ff ffdf 	bl	1d1e4 <latch_auth_cb>
	if (!smp_auth_cb) {
   1d226:	b1b8      	cbz	r0, 1d258 <get_io_capa+0x38>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1d228:	6803      	ldr	r3, [r0, #0]
   1d22a:	b143      	cbz	r3, 1d23e <get_io_capa+0x1e>
   1d22c:	6842      	ldr	r2, [r0, #4]
   1d22e:	b132      	cbz	r2, 1d23e <get_io_capa+0x1e>
   1d230:	6882      	ldr	r2, [r0, #8]
   1d232:	b912      	cbnz	r2, 1d23a <get_io_capa+0x1a>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1d234:	4a0b      	ldr	r2, [pc, #44]	; (1d264 <get_io_capa+0x44>)
   1d236:	7812      	ldrb	r2, [r2, #0]
   1d238:	b93a      	cbnz	r2, 1d24a <get_io_capa+0x2a>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1d23a:	2004      	movs	r0, #4
   1d23c:	e00b      	b.n	1d256 <get_io_capa+0x36>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1d23e:	4a09      	ldr	r2, [pc, #36]	; (1d264 <get_io_capa+0x44>)
   1d240:	7812      	ldrb	r2, [r2, #0]
   1d242:	b112      	cbz	r2, 1d24a <get_io_capa+0x2a>
   1d244:	b10b      	cbz	r3, 1d24a <get_io_capa+0x2a>
   1d246:	6882      	ldr	r2, [r0, #8]
   1d248:	b942      	cbnz	r2, 1d25c <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_entry) {
   1d24a:	6842      	ldr	r2, [r0, #4]
   1d24c:	b942      	cbnz	r2, 1d260 <get_io_capa+0x40>
		return BT_SMP_IO_DISPLAY_ONLY;
   1d24e:	2b00      	cmp	r3, #0
   1d250:	bf0c      	ite	eq
   1d252:	2003      	moveq	r0, #3
   1d254:	2000      	movne	r0, #0
}
   1d256:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1d258:	2003      	movs	r0, #3
   1d25a:	e7fc      	b.n	1d256 <get_io_capa+0x36>
		return BT_SMP_IO_DISPLAY_YESNO;
   1d25c:	2001      	movs	r0, #1
   1d25e:	e7fa      	b.n	1d256 <get_io_capa+0x36>
			return BT_SMP_IO_KEYBOARD_ONLY;
   1d260:	2002      	movs	r0, #2
   1d262:	e7f8      	b.n	1d256 <get_io_capa+0x36>
   1d264:	20006c30 	.word	0x20006c30

0001d268 <get_auth>:
	if (sc_supported) {
   1d268:	4b0c      	ldr	r3, [pc, #48]	; (1d29c <get_auth+0x34>)
   1d26a:	781b      	ldrb	r3, [r3, #0]
{
   1d26c:	b510      	push	{r4, lr}
	if (sc_supported) {
   1d26e:	b17b      	cbz	r3, 1d290 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   1d270:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1d274:	f7ff ffd4 	bl	1d220 <get_io_capa>
	if (bondable) {
   1d278:	4b09      	ldr	r3, [pc, #36]	; (1d2a0 <get_auth+0x38>)
   1d27a:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1d27c:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   1d27e:	bf0c      	ite	eq
   1d280:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1d284:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1d288:	b12b      	cbz	r3, 1d296 <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1d28a:	f044 0001 	orr.w	r0, r4, #1
}
   1d28e:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1d290:	f001 0407 	and.w	r4, r1, #7
   1d294:	e7ee      	b.n	1d274 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1d296:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1d29a:	e7f8      	b.n	1d28e <get_auth+0x26>
   1d29c:	20006c30 	.word	0x20006c30
   1d2a0:	20000a58 	.word	0x20000a58

0001d2a4 <bt_smp_pkey_ready.part.0>:
	}

	return 0;
}

static void bt_smp_pkey_ready(const uint8_t *pkey)
   1d2a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("");

	sc_public_key = pkey;

	if (!pkey) {
		BT_WARN("Public key not available");
   1d2a6:	4b06      	ldr	r3, [pc, #24]	; (1d2c0 <bt_smp_pkey_ready.part.0+0x1c>)
   1d2a8:	9305      	str	r3, [sp, #20]
   1d2aa:	4806      	ldr	r0, [pc, #24]	; (1d2c4 <bt_smp_pkey_ready.part.0+0x20>)
   1d2ac:	2302      	movs	r3, #2
   1d2ae:	aa04      	add	r2, sp, #16
   1d2b0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1d2b4:	9304      	str	r3, [sp, #16]
   1d2b6:	f00e ff3c 	bl	2c132 <z_log_msg_static_create.constprop.0>
		if (err) {
			smp_error(smp, err);
		}
#endif /* CONFIG_BT_PERIPHERAL */
	}
}
   1d2ba:	b007      	add	sp, #28
   1d2bc:	f85d fb04 	ldr.w	pc, [sp], #4
   1d2c0:	00031371 	.word	0x00031371
   1d2c4:	0002e5ec 	.word	0x0002e5ec

0001d2c8 <smp_sign_buf>:
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const uint8_t *key, uint8_t *msg, uint16_t len)
{
   1d2c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
   1d2cc:	1d17      	adds	r7, r2, #4
{
   1d2ce:	460c      	mov	r4, r1
   1d2d0:	b08f      	sub	sp, #60	; 0x3c
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
   1d2d2:	f851 9002 	ldr.w	r9, [r1, r2]
{
   1d2d6:	4606      	mov	r6, r0
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
   1d2d8:	eb01 0802 	add.w	r8, r1, r2
	sys_mem_swap(m, len + sizeof(cnt));
   1d2dc:	4620      	mov	r0, r4
   1d2de:	4639      	mov	r1, r7
{
   1d2e0:	4615      	mov	r5, r2
	sys_mem_swap(m, len + sizeof(cnt));
   1d2e2:	f00e fe27 	bl	2bf34 <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
   1d2e6:	4631      	mov	r1, r6
   1d2e8:	2210      	movs	r2, #16
   1d2ea:	4668      	mov	r0, sp
   1d2ec:	f00e fe18 	bl	2bf20 <sys_memcpy_swap>

	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
   1d2f0:	ab04      	add	r3, sp, #16
   1d2f2:	463a      	mov	r2, r7
   1d2f4:	4621      	mov	r1, r4
   1d2f6:	4668      	mov	r0, sp
   1d2f8:	f00e fe55 	bl	2bfa6 <bt_smp_aes_cmac>
	if (err) {
   1d2fc:	4606      	mov	r6, r0
   1d2fe:	b168      	cbz	r0, 1d31c <smp_sign_buf+0x54>
		BT_ERR("Data signing failed");
   1d300:	4b10      	ldr	r3, [pc, #64]	; (1d344 <smp_sign_buf+0x7c>)
   1d302:	930d      	str	r3, [sp, #52]	; 0x34
   1d304:	4810      	ldr	r0, [pc, #64]	; (1d348 <smp_sign_buf+0x80>)
   1d306:	2302      	movs	r3, #2
   1d308:	aa0c      	add	r2, sp, #48	; 0x30
   1d30a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d30e:	930c      	str	r3, [sp, #48]	; 0x30
   1d310:	f00e ff0f 	bl	2c132 <z_log_msg_static_create.constprop.0>
	memcpy(sig, tmp + 4, 12);

	BT_DBG("sig %s", bt_hex(sig, 12));

	return 0;
}
   1d314:	4630      	mov	r0, r6
   1d316:	b00f      	add	sp, #60	; 0x3c
   1d318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sys_mem_swap(tmp, sizeof(tmp));
   1d31c:	2110      	movs	r1, #16
   1d31e:	eb0d 0001 	add.w	r0, sp, r1
   1d322:	f00e fe07 	bl	2bf34 <sys_mem_swap>
	sys_mem_swap(m, len + sizeof(cnt));
   1d326:	4639      	mov	r1, r7
   1d328:	4620      	mov	r0, r4
   1d32a:	f8cd 9014 	str.w	r9, [sp, #20]
   1d32e:	f00e fe01 	bl	2bf34 <sys_mem_swap>
   1d332:	ab05      	add	r3, sp, #20
   1d334:	cb03      	ldmia	r3!, {r0, r1}
   1d336:	5160      	str	r0, [r4, r5]
   1d338:	6818      	ldr	r0, [r3, #0]
   1d33a:	f8c8 1004 	str.w	r1, [r8, #4]
   1d33e:	f8c8 0008 	str.w	r0, [r8, #8]
   1d342:	e7e7      	b.n	1d314 <smp_sign_buf+0x4c>
   1d344:	0003138a 	.word	0x0003138a
   1d348:	0002e5ec 	.word	0x0002e5ec

0001d34c <bt_smp_accept.part.0>:
	} else {
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1d34c:	b580      	push	{r7, lr}
   1d34e:	af00      	add	r7, sp, #0
		*chan = &smp->chan.chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   1d350:	b088      	sub	sp, #32
   1d352:	466a      	mov	r2, sp
   1d354:	4b07      	ldr	r3, [pc, #28]	; (1d374 <bt_smp_accept.part.0+0x28>)
   1d356:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d35a:	2303      	movs	r3, #3
   1d35c:	f842 3f10 	str.w	r3, [r2, #16]!
   1d360:	4805      	ldr	r0, [pc, #20]	; (1d378 <bt_smp_accept.part.0+0x2c>)
   1d362:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d366:	f00e fee4 	bl	2c132 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   1d36a:	f06f 000b 	mvn.w	r0, #11
   1d36e:	46bd      	mov	sp, r7
   1d370:	bd80      	pop	{r7, pc}
   1d372:	bf00      	nop
   1d374:	0003139e 	.word	0x0003139e
   1d378:	0002e5ec 	.word	0x0002e5ec

0001d37c <bt_smp_accept>:
		if (smp->chan.chan.conn) {
   1d37c:	4b06      	ldr	r3, [pc, #24]	; (1d398 <bt_smp_accept+0x1c>)
   1d37e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   1d382:	b10a      	cbz	r2, 1d388 <bt_smp_accept+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1d384:	f7ff bfe2 	b.w	1d34c <bt_smp_accept.part.0>
		smp->chan.chan.ops = &ops;
   1d388:	4804      	ldr	r0, [pc, #16]	; (1d39c <bt_smp_accept+0x20>)
   1d38a:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
		*chan = &smp->chan.chan;
   1d38e:	33ec      	adds	r3, #236	; 0xec
   1d390:	600b      	str	r3, [r1, #0]
}
   1d392:	4610      	mov	r0, r2
   1d394:	4770      	bx	lr
   1d396:	bf00      	nop
   1d398:	200021b8 	.word	0x200021b8
   1d39c:	0002f168 	.word	0x0002f168

0001d3a0 <smp_chan_get.part.0>:
static struct bt_smp *smp_chan_get(struct bt_conn *conn)
   1d3a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_ERR("Unable to find SMP channel");
   1d3a2:	4b07      	ldr	r3, [pc, #28]	; (1d3c0 <smp_chan_get.part.0+0x20>)
   1d3a4:	9305      	str	r3, [sp, #20]
   1d3a6:	4807      	ldr	r0, [pc, #28]	; (1d3c4 <smp_chan_get.part.0+0x24>)
   1d3a8:	2302      	movs	r3, #2
   1d3aa:	aa04      	add	r2, sp, #16
   1d3ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d3b0:	9304      	str	r3, [sp, #16]
   1d3b2:	f00e febe 	bl	2c132 <z_log_msg_static_create.constprop.0>
}
   1d3b6:	2000      	movs	r0, #0
   1d3b8:	b007      	add	sp, #28
   1d3ba:	f85d fb04 	ldr.w	pc, [sp], #4
   1d3be:	bf00      	nop
   1d3c0:	000313c3 	.word	0x000313c3
   1d3c4:	0002e5ec 	.word	0x0002e5ec

0001d3c8 <smp_init>:
{
   1d3c8:	b538      	push	{r3, r4, r5, lr}
__ssp_bos_icheck3(memset, void *, int)
   1d3ca:	22ec      	movs	r2, #236	; 0xec
   1d3cc:	4605      	mov	r5, r0
   1d3ce:	2100      	movs	r1, #0
   1d3d0:	f010 fd23 	bl	2de1a <memset>
	if (bt_rand(smp->prnd, 16)) {
   1d3d4:	2110      	movs	r1, #16
   1d3d6:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1d3da:	f004 fa87 	bl	218ec <bt_rand>
   1d3de:	4604      	mov	r4, r0
   1d3e0:	b948      	cbnz	r0, 1d3f6 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1d3e2:	2105      	movs	r1, #5
   1d3e4:	4628      	mov	r0, r5
   1d3e6:	f00e feb2 	bl	2c14e <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1d3ea:	f7fc fa61 	bl	198b0 <bt_pub_key_get>
   1d3ee:	4b03      	ldr	r3, [pc, #12]	; (1d3fc <smp_init+0x34>)
   1d3f0:	6018      	str	r0, [r3, #0]
}
   1d3f2:	4620      	mov	r0, r4
   1d3f4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1d3f6:	2408      	movs	r4, #8
   1d3f8:	e7fb      	b.n	1d3f2 <smp_init+0x2a>
   1d3fa:	bf00      	nop
   1d3fc:	20005cd8 	.word	0x20005cd8

0001d400 <smp_dhkey_generate>:
{
   1d400:	b530      	push	{r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1d402:	1d05      	adds	r5, r0, #4
{
   1d404:	b087      	sub	sp, #28
   1d406:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1d408:	2108      	movs	r1, #8
   1d40a:	4628      	mov	r0, r5
   1d40c:	f00e fe9f 	bl	2c14e <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1d410:	490b      	ldr	r1, [pc, #44]	; (1d440 <smp_dhkey_generate+0x40>)
   1d412:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1d416:	f7fc fa5b 	bl	198d0 <bt_dh_key_gen>
	if (err) {
   1d41a:	b170      	cbz	r0, 1d43a <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1d41c:	2108      	movs	r1, #8
   1d41e:	4628      	mov	r0, r5
   1d420:	f00e fe03 	bl	2c02a <atomic_clear_bit>
		BT_ERR("Failed to generate DHKey");
   1d424:	4b07      	ldr	r3, [pc, #28]	; (1d444 <smp_dhkey_generate+0x44>)
   1d426:	4808      	ldr	r0, [pc, #32]	; (1d448 <smp_dhkey_generate+0x48>)
   1d428:	9305      	str	r3, [sp, #20]
   1d42a:	aa04      	add	r2, sp, #16
   1d42c:	2302      	movs	r3, #2
   1d42e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d432:	9304      	str	r3, [sp, #16]
   1d434:	f00e fe7d 	bl	2c132 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1d438:	2008      	movs	r0, #8
}
   1d43a:	b007      	add	sp, #28
   1d43c:	bd30      	pop	{r4, r5, pc}
   1d43e:	bf00      	nop
   1d440:	0002c61f 	.word	0x0002c61f
   1d444:	000313de 	.word	0x000313de
   1d448:	0002e5ec 	.word	0x0002e5ec

0001d44c <smp_ident_info>:
{
   1d44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d44e:	4605      	mov	r5, r0
   1d450:	af00      	add	r7, sp, #0
   1d452:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d454:	3004      	adds	r0, #4
   1d456:	210d      	movs	r1, #13
   1d458:	f00e fd7b 	bl	2bf52 <atomic_test_bit>
   1d45c:	b360      	cbz	r0, 1d4b8 <smp_ident_info+0x6c>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1d45e:	689c      	ldr	r4, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1d460:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1d464:	f103 0688 	add.w	r6, r3, #136	; 0x88
   1d468:	7a19      	ldrb	r1, [r3, #8]
   1d46a:	4632      	mov	r2, r6
   1d46c:	2002      	movs	r0, #2
   1d46e:	f00f f97f 	bl	2c770 <bt_keys_get_type>
		if (!keys) {
   1d472:	b9b0      	cbnz	r0, 1d4a2 <smp_ident_info+0x56>
			BT_ERR("Unable to get keys for %s",
   1d474:	4630      	mov	r0, r6
   1d476:	f7f9 fe5d 	bl	17134 <bt_addr_le_str_real>
   1d47a:	466c      	mov	r4, sp
   1d47c:	b088      	sub	sp, #32
   1d47e:	466a      	mov	r2, sp
   1d480:	4b10      	ldr	r3, [pc, #64]	; (1d4c4 <smp_ident_info+0x78>)
   1d482:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d486:	2302      	movs	r3, #2
   1d488:	7713      	strb	r3, [r2, #28]
   1d48a:	4b0f      	ldr	r3, [pc, #60]	; (1d4c8 <smp_ident_info+0x7c>)
   1d48c:	480f      	ldr	r0, [pc, #60]	; (1d4cc <smp_ident_info+0x80>)
   1d48e:	f842 3f10 	str.w	r3, [r2, #16]!
   1d492:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1d496:	f00e fe4c 	bl	2c132 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1d49a:	2008      	movs	r0, #8
   1d49c:	46a5      	mov	sp, r4
}
   1d49e:	46bd      	mov	sp, r7
   1d4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d4a2:	4622      	mov	r2, r4
   1d4a4:	f100 032a 	add.w	r3, r0, #42	; 0x2a
   1d4a8:	f104 0110 	add.w	r1, r4, #16
   1d4ac:	f852 0b04 	ldr.w	r0, [r2], #4
   1d4b0:	f843 0b04 	str.w	r0, [r3], #4
   1d4b4:	428a      	cmp	r2, r1
   1d4b6:	d1f9      	bne.n	1d4ac <smp_ident_info+0x60>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1d4b8:	4628      	mov	r0, r5
   1d4ba:	2109      	movs	r1, #9
   1d4bc:	f00e fe47 	bl	2c14e <atomic_set_bit>
	return 0;
   1d4c0:	2000      	movs	r0, #0
   1d4c2:	e7ec      	b.n	1d49e <smp_ident_info+0x52>
   1d4c4:	000313f7 	.word	0x000313f7
   1d4c8:	01000003 	.word	0x01000003
   1d4cc:	0002e5ec 	.word	0x0002e5ec

0001d4d0 <smp_encrypt_info>:
{
   1d4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d4d2:	4605      	mov	r5, r0
   1d4d4:	af00      	add	r7, sp, #0
   1d4d6:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d4d8:	3004      	adds	r0, #4
   1d4da:	210d      	movs	r1, #13
   1d4dc:	f00e fd39 	bl	2bf52 <atomic_test_bit>
   1d4e0:	b360      	cbz	r0, 1d53c <smp_encrypt_info+0x6c>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1d4e2:	689c      	ldr	r4, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1d4e4:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1d4e8:	f103 0688 	add.w	r6, r3, #136	; 0x88
   1d4ec:	7a19      	ldrb	r1, [r3, #8]
   1d4ee:	4632      	mov	r2, r6
   1d4f0:	2004      	movs	r0, #4
   1d4f2:	f00f f93d 	bl	2c770 <bt_keys_get_type>
		if (!keys) {
   1d4f6:	b9b0      	cbnz	r0, 1d526 <smp_encrypt_info+0x56>
			BT_ERR("Unable to get keys for %s",
   1d4f8:	4630      	mov	r0, r6
   1d4fa:	f7f9 fe1b 	bl	17134 <bt_addr_le_str_real>
   1d4fe:	466c      	mov	r4, sp
   1d500:	b088      	sub	sp, #32
   1d502:	466a      	mov	r2, sp
   1d504:	4b10      	ldr	r3, [pc, #64]	; (1d548 <smp_encrypt_info+0x78>)
   1d506:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d50a:	2302      	movs	r3, #2
   1d50c:	7713      	strb	r3, [r2, #28]
   1d50e:	4b0f      	ldr	r3, [pc, #60]	; (1d54c <smp_encrypt_info+0x7c>)
   1d510:	480f      	ldr	r0, [pc, #60]	; (1d550 <smp_encrypt_info+0x80>)
   1d512:	f842 3f10 	str.w	r3, [r2, #16]!
   1d516:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1d51a:	f00e fe0a 	bl	2c132 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1d51e:	2008      	movs	r0, #8
   1d520:	46a5      	mov	sp, r4
}
   1d522:	46bd      	mov	sp, r7
   1d524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d526:	4622      	mov	r2, r4
   1d528:	f100 031a 	add.w	r3, r0, #26
   1d52c:	f104 0110 	add.w	r1, r4, #16
   1d530:	f852 0b04 	ldr.w	r0, [r2], #4
   1d534:	f843 0b04 	str.w	r0, [r3], #4
   1d538:	428a      	cmp	r2, r1
   1d53a:	d1f9      	bne.n	1d530 <smp_encrypt_info+0x60>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1d53c:	4628      	mov	r0, r5
   1d53e:	2107      	movs	r1, #7
   1d540:	f00e fe05 	bl	2c14e <atomic_set_bit>
	return 0;
   1d544:	2000      	movs	r0, #0
   1d546:	e7ec      	b.n	1d522 <smp_encrypt_info+0x52>
   1d548:	000313f7 	.word	0x000313f7
   1d54c:	01000003 	.word	0x01000003
   1d550:	0002e5ec 	.word	0x0002e5ec

0001d554 <smp_pairing_req>:
{
   1d554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d558:	460d      	mov	r5, r1
   1d55a:	b087      	sub	sp, #28
   1d55c:	af00      	add	r7, sp, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   1d55e:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   1d562:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d564:	f7ff fe3e 	bl	1d1e4 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   1d568:	68ad      	ldr	r5, [r5, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1d56a:	78eb      	ldrb	r3, [r5, #3]
   1d56c:	3b07      	subs	r3, #7
   1d56e:	2b09      	cmp	r3, #9
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d570:	4681      	mov	r9, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1d572:	d905      	bls.n	1d580 <smp_pairing_req+0x2c>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1d574:	2506      	movs	r5, #6
}
   1d576:	4628      	mov	r0, r5
   1d578:	371c      	adds	r7, #28
   1d57a:	46bd      	mov	sp, r7
   1d57c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   1d580:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
   1d584:	b15b      	cbz	r3, 1d59e <smp_pairing_req+0x4a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1d586:	1d26      	adds	r6, r4, #4
   1d588:	210f      	movs	r1, #15
   1d58a:	4630      	mov	r0, r6
   1d58c:	f00e fce1 	bl	2bf52 <atomic_test_bit>
   1d590:	b988      	cbnz	r0, 1d5b6 <smp_pairing_req+0x62>
		int ret = smp_init(smp);
   1d592:	4620      	mov	r0, r4
   1d594:	f7ff ff18 	bl	1d3c8 <smp_init>
		if (ret) {
   1d598:	b168      	cbz	r0, 1d5b6 <smp_pairing_req+0x62>
			return ret;
   1d59a:	b2c5      	uxtb	r5, r0
   1d59c:	e7eb      	b.n	1d576 <smp_pairing_req+0x22>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1d59e:	f898 0008 	ldrb.w	r0, [r8, #8]
   1d5a2:	f108 0188 	add.w	r1, r8, #136	; 0x88
   1d5a6:	f001 fcdf 	bl	1ef68 <bt_keys_get_addr>
   1d5aa:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
		if (!conn->le.keys) {
   1d5ae:	2800      	cmp	r0, #0
   1d5b0:	d1e9      	bne.n	1d586 <smp_pairing_req+0x32>
	switch (sec) {
   1d5b2:	2508      	movs	r5, #8
   1d5b4:	e7df      	b.n	1d576 <smp_pairing_req+0x22>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1d5b6:	2301      	movs	r3, #1
   1d5b8:	7263      	strb	r3, [r4, #9]
   1d5ba:	682b      	ldr	r3, [r5, #0]
   1d5bc:	f8c4 300a 	str.w	r3, [r4, #10]
   1d5c0:	88ab      	ldrh	r3, [r5, #4]
   1d5c2:	81e3      	strh	r3, [r4, #14]
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1d5c4:	2302      	movs	r3, #2
   1d5c6:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1d5c8:	78a9      	ldrb	r1, [r5, #2]
   1d5ca:	4620      	mov	r0, r4
   1d5cc:	f7ff fe4c 	bl	1d268 <get_auth>
   1d5d0:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   1d5d2:	4620      	mov	r0, r4
   1d5d4:	f7ff fe24 	bl	1d220 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1d5d8:	4ba8      	ldr	r3, [pc, #672]	; (1d87c <smp_pairing_req+0x328>)
	rsp->io_capability = get_io_capa(smp);
   1d5da:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1d5dc:	781b      	ldrb	r3, [r3, #0]
   1d5de:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1d5e0:	2310      	movs	r3, #16
   1d5e2:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1d5e4:	792b      	ldrb	r3, [r5, #4]
   1d5e6:	f003 0307 	and.w	r3, r3, #7
   1d5ea:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1d5ec:	796b      	ldrb	r3, [r5, #5]
   1d5ee:	f003 0307 	and.w	r3, r3, #7
   1d5f2:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1d5f4:	7ce3      	ldrb	r3, [r4, #19]
   1d5f6:	0718      	lsls	r0, r3, #28
   1d5f8:	d50e      	bpl.n	1d618 <smp_pairing_req+0xc4>
   1d5fa:	78ab      	ldrb	r3, [r5, #2]
   1d5fc:	0719      	lsls	r1, r3, #28
   1d5fe:	d50b      	bpl.n	1d618 <smp_pairing_req+0xc4>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1d600:	2105      	movs	r1, #5
   1d602:	4630      	mov	r0, r6
   1d604:	f00e fda3 	bl	2c14e <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1d608:	7d63      	ldrb	r3, [r4, #21]
   1d60a:	f003 0306 	and.w	r3, r3, #6
   1d60e:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1d610:	7da3      	ldrb	r3, [r4, #22]
   1d612:	f003 0306 	and.w	r3, r3, #6
   1d616:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1d618:	7ce3      	ldrb	r3, [r4, #19]
   1d61a:	069a      	lsls	r2, r3, #26
   1d61c:	d506      	bpl.n	1d62c <smp_pairing_req+0xd8>
   1d61e:	78ab      	ldrb	r3, [r5, #2]
   1d620:	069b      	lsls	r3, r3, #26
   1d622:	d503      	bpl.n	1d62c <smp_pairing_req+0xd8>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1d624:	2114      	movs	r1, #20
   1d626:	4630      	mov	r0, r6
   1d628:	f00e fd91 	bl	2c14e <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1d62c:	7da3      	ldrb	r3, [r4, #22]
   1d62e:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1d632:	7d63      	ldrb	r3, [r4, #21]
   1d634:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1d638:	7ce3      	ldrb	r3, [r4, #19]
   1d63a:	07d8      	lsls	r0, r3, #31
   1d63c:	d506      	bpl.n	1d64c <smp_pairing_req+0xf8>
   1d63e:	78ab      	ldrb	r3, [r5, #2]
   1d640:	07d9      	lsls	r1, r3, #31
   1d642:	d503      	bpl.n	1d64c <smp_pairing_req+0xf8>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1d644:	210d      	movs	r1, #13
   1d646:	4630      	mov	r0, r6
   1d648:	f00e fd81 	bl	2c14e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1d64c:	2103      	movs	r1, #3
   1d64e:	4630      	mov	r0, r6
   1d650:	f00e fd7d 	bl	2c14e <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d654:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1d656:	782d      	ldrb	r5, [r5, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d658:	f00e fc7b 	bl	2bf52 <atomic_test_bit>
   1d65c:	bb30      	cbnz	r0, 1d6ac <smp_pairing_req+0x158>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1d65e:	2d04      	cmp	r5, #4
   1d660:	d843      	bhi.n	1d6ea <smp_pairing_req+0x196>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1d662:	7ca2      	ldrb	r2, [r4, #18]
   1d664:	7ae3      	ldrb	r3, [r4, #11]
   1d666:	4013      	ands	r3, r2
   1d668:	07da      	lsls	r2, r3, #31
   1d66a:	d43c      	bmi.n	1d6e6 <smp_pairing_req+0x192>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1d66c:	7b21      	ldrb	r1, [r4, #12]
   1d66e:	7ce0      	ldrb	r0, [r4, #19]
   1d670:	4301      	orrs	r1, r0
   1d672:	f011 0104 	ands.w	r1, r1, #4
   1d676:	d010      	beq.n	1d69a <smp_pairing_req+0x146>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1d678:	4620      	mov	r0, r4
   1d67a:	f7ff fdd1 	bl	1d220 <get_io_capa>
   1d67e:	4b80      	ldr	r3, [pc, #512]	; (1d880 <smp_pairing_req+0x32c>)
   1d680:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1d684:	441d      	add	r5, r3
   1d686:	5c29      	ldrb	r1, [r5, r0]
	if (method == PASSKEY_ROLE) {
   1d688:	2904      	cmp	r1, #4
   1d68a:	d106      	bne.n	1d69a <smp_pairing_req+0x146>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1d68c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1d690:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   1d692:	2b00      	cmp	r3, #0
   1d694:	bf0c      	ite	eq
   1d696:	2102      	moveq	r1, #2
   1d698:	2101      	movne	r1, #1
	smp->method = get_pair_method(smp, req->io_capability);
   1d69a:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1d69c:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
   1d6a0:	4620      	mov	r0, r4
   1d6a2:	f00e fc5f 	bl	2bf64 <update_keys_check>
   1d6a6:	bb10      	cbnz	r0, 1d6ee <smp_pairing_req+0x19a>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1d6a8:	2503      	movs	r5, #3
   1d6aa:	e764      	b.n	1d576 <smp_pairing_req+0x22>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1d6ac:	7b20      	ldrb	r0, [r4, #12]
   1d6ae:	7ce2      	ldrb	r2, [r4, #19]
   1d6b0:	ea00 0302 	and.w	r3, r0, r2
   1d6b4:	071b      	lsls	r3, r3, #28
   1d6b6:	d506      	bpl.n	1d6c6 <smp_pairing_req+0x172>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1d6b8:	7ae3      	ldrb	r3, [r4, #11]
   1d6ba:	f894 c012 	ldrb.w	ip, [r4, #18]
   1d6be:	ea43 030c 	orr.w	r3, r3, ip
   1d6c2:	07db      	lsls	r3, r3, #31
   1d6c4:	d4e9      	bmi.n	1d69a <smp_pairing_req+0x146>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1d6c6:	2d04      	cmp	r5, #4
   1d6c8:	d80f      	bhi.n	1d6ea <smp_pairing_req+0x196>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1d6ca:	ea40 0102 	orr.w	r1, r0, r2
   1d6ce:	f011 0104 	ands.w	r1, r1, #4
   1d6d2:	d0e2      	beq.n	1d69a <smp_pairing_req+0x146>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1d6d4:	4620      	mov	r0, r4
   1d6d6:	f7ff fda3 	bl	1d220 <get_io_capa>
   1d6da:	4b6a      	ldr	r3, [pc, #424]	; (1d884 <smp_pairing_req+0x330>)
   1d6dc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1d6e0:	441d      	add	r5, r3
   1d6e2:	5c29      	ldrb	r1, [r5, r0]
   1d6e4:	e7d9      	b.n	1d69a <smp_pairing_req+0x146>
		return LEGACY_OOB;
   1d6e6:	2106      	movs	r1, #6
   1d6e8:	e7d7      	b.n	1d69a <smp_pairing_req+0x146>
		return JUST_WORKS;
   1d6ea:	2100      	movs	r1, #0
   1d6ec:	e7d5      	b.n	1d69a <smp_pairing_req+0x146>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1d6ee:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1d6f2:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1d6f4:	2b03      	cmp	r3, #3
   1d6f6:	d03e      	beq.n	1d776 <smp_pairing_req+0x222>
   1d6f8:	d82c      	bhi.n	1d754 <smp_pairing_req+0x200>
   1d6fa:	3b01      	subs	r3, #1
   1d6fc:	2b01      	cmp	r3, #1
   1d6fe:	f63f af58 	bhi.w	1d5b2 <smp_pairing_req+0x5e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d702:	2105      	movs	r1, #5
   1d704:	4630      	mov	r0, r6
   1d706:	f00e fc24 	bl	2bf52 <atomic_test_bit>
   1d70a:	2800      	cmp	r0, #0
   1d70c:	f040 80c4 	bne.w	1d898 <smp_pairing_req+0x344>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d710:	4620      	mov	r0, r4
   1d712:	f7ff fd67 	bl	1d1e4 <latch_auth_cb>
   1d716:	4680      	mov	r8, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d718:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1d71a:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d71e:	f7ff fd61 	bl	1d1e4 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1d722:	f109 0188 	add.w	r1, r9, #136	; 0x88
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d726:	4605      	mov	r5, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1d728:	f899 0008 	ldrb.w	r0, [r9, #8]
   1d72c:	f001 fcdc 	bl	1f0e8 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1d730:	7a23      	ldrb	r3, [r4, #8]
   1d732:	b320      	cbz	r0, 1d77e <smp_pairing_req+0x22a>
   1d734:	7b42      	ldrb	r2, [r0, #13]
   1d736:	07d2      	lsls	r2, r2, #31
   1d738:	d521      	bpl.n	1d77e <smp_pairing_req+0x22a>
   1d73a:	bb03      	cbnz	r3, 1d77e <smp_pairing_req+0x22a>
		BT_ERR("JustWorks failed, authenticated keys present");
   1d73c:	4b52      	ldr	r3, [pc, #328]	; (1d888 <smp_pairing_req+0x334>)
   1d73e:	617b      	str	r3, [r7, #20]
   1d740:	4852      	ldr	r0, [pc, #328]	; (1d88c <smp_pairing_req+0x338>)
   1d742:	2302      	movs	r3, #2
   1d744:	f107 0210 	add.w	r2, r7, #16
   1d748:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d74c:	613b      	str	r3, [r7, #16]
   1d74e:	f00e fcf0 	bl	2c132 <z_log_msg_static_create.constprop.0>
	if (ret) {
   1d752:	e72e      	b.n	1d5b2 <smp_pairing_req+0x5e>
	switch (sec) {
   1d754:	2b04      	cmp	r3, #4
   1d756:	f47f af2c 	bne.w	1d5b2 <smp_pairing_req+0x5e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1d75a:	7d23      	ldrb	r3, [r4, #20]
   1d75c:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1d75e:	4293      	cmp	r3, r2
   1d760:	bf28      	it	cs
   1d762:	4613      	movcs	r3, r2
   1d764:	2b10      	cmp	r3, #16
   1d766:	f47f af05 	bne.w	1d574 <smp_pairing_req+0x20>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d76a:	2105      	movs	r1, #5
   1d76c:	4630      	mov	r0, r6
   1d76e:	f00e fbf0 	bl	2bf52 <atomic_test_bit>
   1d772:	2800      	cmp	r0, #0
   1d774:	d098      	beq.n	1d6a8 <smp_pairing_req+0x154>
		if (smp->method == JUST_WORKS) {
   1d776:	7a23      	ldrb	r3, [r4, #8]
   1d778:	2b00      	cmp	r3, #0
   1d77a:	d1c2      	bne.n	1d702 <smp_pairing_req+0x1ae>
   1d77c:	e794      	b.n	1d6a8 <smp_pairing_req+0x154>
	switch (smp->method) {
   1d77e:	2b06      	cmp	r3, #6
   1d780:	d85f      	bhi.n	1d842 <smp_pairing_req+0x2ee>
   1d782:	e8df f003 	tbb	[pc, r3]
   1d786:	5617      	.short	0x5617
   1d788:	5e5e5e2f 	.word	0x5e5e5e2f
   1d78c:	04          	.byte	0x04
   1d78d:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1d78e:	2d00      	cmp	r5, #0
   1d790:	d067      	beq.n	1d862 <smp_pairing_req+0x30e>
   1d792:	68eb      	ldr	r3, [r5, #12]
   1d794:	2b00      	cmp	r3, #0
   1d796:	d064      	beq.n	1d862 <smp_pairing_req+0x30e>
			struct bt_conn_oob_info info = {
   1d798:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d79a:	210a      	movs	r1, #10
   1d79c:	4630      	mov	r0, r6
			struct bt_conn_oob_info info = {
   1d79e:	803b      	strh	r3, [r7, #0]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d7a0:	f00e fcd5 	bl	2c14e <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1d7a4:	68eb      	ldr	r3, [r5, #12]
   1d7a6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1d7aa:	4639      	mov	r1, r7
   1d7ac:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1d7ae:	7a23      	ldrb	r3, [r4, #8]
   1d7b0:	2b00      	cmp	r3, #0
   1d7b2:	d158      	bne.n	1d866 <smp_pairing_req+0x312>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1d7b4:	210f      	movs	r1, #15
   1d7b6:	4630      	mov	r0, r6
   1d7b8:	f00e fbcb 	bl	2bf52 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1d7bc:	4605      	mov	r5, r0
   1d7be:	2800      	cmp	r0, #0
   1d7c0:	d151      	bne.n	1d866 <smp_pairing_req+0x312>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1d7c2:	f1b8 0f00 	cmp.w	r8, #0
   1d7c6:	d04e      	beq.n	1d866 <smp_pairing_req+0x312>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1d7c8:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1d7cc:	2b00      	cmp	r3, #0
   1d7ce:	d04a      	beq.n	1d866 <smp_pairing_req+0x312>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d7d0:	4630      	mov	r0, r6
   1d7d2:	210a      	movs	r1, #10
   1d7d4:	f00e fcbb 	bl	2c14e <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   1d7d8:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1d7dc:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1d7e0:	4798      	blx	r3
		return 0;
   1d7e2:	e6c8      	b.n	1d576 <smp_pairing_req+0x22>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1d7e4:	2104      	movs	r1, #4
   1d7e6:	4638      	mov	r0, r7
   1d7e8:	f004 f880 	bl	218ec <bt_rand>
   1d7ec:	2800      	cmp	r0, #0
   1d7ee:	f47f aee0 	bne.w	1d5b2 <smp_pairing_req+0x5e>
			passkey %= 1000000;
   1d7f2:	683b      	ldr	r3, [r7, #0]
   1d7f4:	4a26      	ldr	r2, [pc, #152]	; (1d890 <smp_pairing_req+0x33c>)
   1d7f6:	fbb3 f1f2 	udiv	r1, r3, r2
   1d7fa:	fb02 3311 	mls	r3, r2, r1, r3
   1d7fe:	603b      	str	r3, [r7, #0]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1d800:	b14d      	cbz	r5, 1d816 <smp_pairing_req+0x2c2>
   1d802:	682b      	ldr	r3, [r5, #0]
   1d804:	b13b      	cbz	r3, 1d816 <smp_pairing_req+0x2c2>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1d806:	210b      	movs	r1, #11
   1d808:	4630      	mov	r0, r6
   1d80a:	f00e fca0 	bl	2c14e <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   1d80e:	682b      	ldr	r3, [r5, #0]
   1d810:	6839      	ldr	r1, [r7, #0]
   1d812:	4648      	mov	r0, r9
   1d814:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1d816:	683b      	ldr	r3, [r7, #0]
	dst[0] = val;
   1d818:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1d81c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1d820:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1d822:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1d826:	0a1b      	lsrs	r3, r3, #8
   1d828:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1d82c:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1d830:	e7bd      	b.n	1d7ae <smp_pairing_req+0x25a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d832:	4630      	mov	r0, r6
   1d834:	210a      	movs	r1, #10
   1d836:	f00e fc8a 	bl	2c14e <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1d83a:	686b      	ldr	r3, [r5, #4]
   1d83c:	4648      	mov	r0, r9
   1d83e:	4798      	blx	r3
	if (ret) {
   1d840:	e7b5      	b.n	1d7ae <smp_pairing_req+0x25a>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1d842:	466c      	mov	r4, sp
   1d844:	b088      	sub	sp, #32
   1d846:	466a      	mov	r2, sp
   1d848:	4912      	ldr	r1, [pc, #72]	; (1d894 <smp_pairing_req+0x340>)
   1d84a:	4810      	ldr	r0, [pc, #64]	; (1d88c <smp_pairing_req+0x338>)
	switch (smp->method) {
   1d84c:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1d850:	2303      	movs	r3, #3
   1d852:	f842 3f10 	str.w	r3, [r2, #16]!
   1d856:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d85a:	f00e fc6a 	bl	2c132 <z_log_msg_static_create.constprop.0>
   1d85e:	46a5      	mov	sp, r4
	if (ret) {
   1d860:	e6a7      	b.n	1d5b2 <smp_pairing_req+0x5e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1d862:	2502      	movs	r5, #2
   1d864:	e687      	b.n	1d576 <smp_pairing_req+0x22>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1d866:	2103      	movs	r1, #3
   1d868:	4620      	mov	r0, r4
   1d86a:	f00e fc70 	bl	2c14e <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1d86e:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1d870:	f00e fc6d 	bl	2c14e <atomic_set_bit>
	return send_pairing_rsp(smp);
   1d874:	f00e fc9e 	bl	2c1b4 <send_pairing_rsp>
   1d878:	4605      	mov	r5, r0
   1d87a:	e67c      	b.n	1d576 <smp_pairing_req+0x22>
   1d87c:	20006c2f 	.word	0x20006c2f
   1d880:	00031792 	.word	0x00031792
   1d884:	000317ab 	.word	0x000317ab
   1d888:	00031411 	.word	0x00031411
   1d88c:	0002e5ec 	.word	0x0002e5ec
   1d890:	000f4240 	.word	0x000f4240
   1d894:	0003143e 	.word	0x0003143e
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1d898:	7a25      	ldrb	r5, [r4, #8]
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1d89a:	b995      	cbnz	r5, 1d8c2 <smp_pairing_req+0x36e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1d89c:	210f      	movs	r1, #15
   1d89e:	4630      	mov	r0, r6
   1d8a0:	f00e fb57 	bl	2bf52 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1d8a4:	b968      	cbnz	r0, 1d8c2 <smp_pairing_req+0x36e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1d8a6:	f1b9 0f00 	cmp.w	r9, #0
   1d8aa:	d00a      	beq.n	1d8c2 <smp_pairing_req+0x36e>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1d8ac:	f8d9 3014 	ldr.w	r3, [r9, #20]
   1d8b0:	b13b      	cbz	r3, 1d8c2 <smp_pairing_req+0x36e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d8b2:	4630      	mov	r0, r6
   1d8b4:	210a      	movs	r1, #10
   1d8b6:	f00e fc4a 	bl	2c14e <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1d8ba:	f8d9 3014 	ldr.w	r3, [r9, #20]
   1d8be:	4640      	mov	r0, r8
   1d8c0:	e78e      	b.n	1d7e0 <smp_pairing_req+0x28c>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1d8c2:	210c      	movs	r1, #12
   1d8c4:	4620      	mov	r0, r4
   1d8c6:	e7d3      	b.n	1d870 <smp_pairing_req+0x31c>

0001d8c8 <compute_and_check_and_send_periph_dhcheck>:
{
   1d8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8cc:	b0a3      	sub	sp, #140	; 0x8c
   1d8ce:	4604      	mov	r4, r0
   1d8d0:	af04      	add	r7, sp, #16
	(void)memset(r, 0, sizeof(r));
   1d8d2:	2210      	movs	r2, #16
   1d8d4:	2100      	movs	r1, #0
   1d8d6:	4638      	mov	r0, r7
   1d8d8:	f010 fa9f 	bl	2de1a <memset>
	switch (smp->method) {
   1d8dc:	7a23      	ldrb	r3, [r4, #8]
   1d8de:	2b05      	cmp	r3, #5
   1d8e0:	f200 80a6 	bhi.w	1da30 <compute_and_check_and_send_periph_dhcheck+0x168>
   1d8e4:	e8df f003 	tbb	[pc, r3]
   1d8e8:	06030306 	.word	0x06030306
   1d8ec:	93a4      	.short	0x93a4
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1d8ee:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1d8f2:	603b      	str	r3, [r7, #0]
	uint8_t m[53] = { 0x00, /* counter */
   1d8f4:	4b86      	ldr	r3, [pc, #536]	; (1db10 <compute_and_check_and_send_periph_dhcheck+0x248>)
		   &smp->chan.chan.conn->le.init_addr,
   1d8f6:	f8d4 a0ec 	ldr.w	sl, [r4, #236]	; 0xec
	uint8_t m[53] = { 0x00, /* counter */
   1d8fa:	f107 0240 	add.w	r2, r7, #64	; 0x40
   1d8fe:	f103 0630 	add.w	r6, r3, #48	; 0x30
   1d902:	4693      	mov	fp, r2
   1d904:	6818      	ldr	r0, [r3, #0]
   1d906:	6859      	ldr	r1, [r3, #4]
   1d908:	4615      	mov	r5, r2
   1d90a:	c503      	stmia	r5!, {r0, r1}
   1d90c:	3308      	adds	r3, #8
   1d90e:	42b3      	cmp	r3, r6
   1d910:	462a      	mov	r2, r5
   1d912:	d1f7      	bne.n	1d904 <compute_and_check_and_send_periph_dhcheck+0x3c>
   1d914:	6818      	ldr	r0, [r3, #0]
   1d916:	791b      	ldrb	r3, [r3, #4]
   1d918:	6028      	str	r0, [r5, #0]
   1d91a:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   1d91c:	f107 0520 	add.w	r5, r7, #32
   1d920:	2220      	movs	r2, #32
   1d922:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1d926:	4628      	mov	r0, r5
   1d928:	f00e fafa 	bl	2bf20 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1d92c:	4879      	ldr	r0, [pc, #484]	; (1db14 <compute_and_check_and_send_periph_dhcheck+0x24c>)
   1d92e:	f107 0310 	add.w	r3, r7, #16
   1d932:	2220      	movs	r2, #32
   1d934:	4629      	mov	r1, r5
   1d936:	f00e fb36 	bl	2bfa6 <bt_smp_aes_cmac>
	if (err) {
   1d93a:	2800      	cmp	r0, #0
   1d93c:	f040 80e5 	bne.w	1db0a <compute_and_check_and_send_periph_dhcheck+0x242>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1d940:	f104 0837 	add.w	r8, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   1d944:	2210      	movs	r2, #16
   1d946:	4641      	mov	r1, r8
   1d948:	f107 0045 	add.w	r0, r7, #69	; 0x45
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1d94c:	f104 0927 	add.w	r9, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   1d950:	f00e fae6 	bl	2bf20 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1d954:	2210      	movs	r2, #16
   1d956:	4649      	mov	r1, r9
   1d958:	f107 0055 	add.w	r0, r7, #85	; 0x55
   1d95c:	f00e fae0 	bl	2bf20 <sys_memcpy_swap>
	m[37] = a1->type;
   1d960:	f89a 308f 	ldrb.w	r3, [sl, #143]	; 0x8f
   1d964:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1d968:	2206      	movs	r2, #6
   1d96a:	f10a 0190 	add.w	r1, sl, #144	; 0x90
   1d96e:	f107 0066 	add.w	r0, r7, #102	; 0x66
   1d972:	f00e fad5 	bl	2bf20 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1d976:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   1d97a:	f89a 3096 	ldrb.w	r3, [sl, #150]	; 0x96
   1d97e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1d982:	2206      	movs	r2, #6
   1d984:	f10a 0197 	add.w	r1, sl, #151	; 0x97
   1d988:	f107 006d 	add.w	r0, r7, #109	; 0x6d
   1d98c:	f00e fac8 	bl	2bf20 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   1d990:	4633      	mov	r3, r6
   1d992:	2235      	movs	r2, #53	; 0x35
   1d994:	4659      	mov	r1, fp
   1d996:	f107 0010 	add.w	r0, r7, #16
   1d99a:	f00e fb04 	bl	2bfa6 <bt_smp_aes_cmac>
	if (err) {
   1d99e:	2800      	cmp	r0, #0
   1d9a0:	f040 80b3 	bne.w	1db0a <compute_and_check_and_send_periph_dhcheck+0x242>
	sys_mem_swap(mackey, 16);
   1d9a4:	2110      	movs	r1, #16
   1d9a6:	4630      	mov	r0, r6
   1d9a8:	f00e fac4 	bl	2bf34 <sys_mem_swap>
		   smp->tk)) {
   1d9ac:	f104 0a47 	add.w	sl, r4, #71	; 0x47
	m[0] = 0x01;
   1d9b0:	2301      	movs	r3, #1
   1d9b2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1d9b6:	2235      	movs	r2, #53	; 0x35
   1d9b8:	4653      	mov	r3, sl
   1d9ba:	4659      	mov	r1, fp
   1d9bc:	f107 0010 	add.w	r0, r7, #16
   1d9c0:	f00e faf1 	bl	2bfa6 <bt_smp_aes_cmac>
	if (err) {
   1d9c4:	2800      	cmp	r0, #0
   1d9c6:	f040 80a0 	bne.w	1db0a <compute_and_check_and_send_periph_dhcheck+0x242>
	sys_mem_swap(ltk, 16);
   1d9ca:	2110      	movs	r1, #16
   1d9cc:	4650      	mov	r0, sl
   1d9ce:	f00e fab1 	bl	2bf34 <sys_mem_swap>
		   &smp->chan.chan.conn->le.resp_addr,
   1d9d2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1d9d6:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1d9d8:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   1d9dc:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1d9de:	9301      	str	r3, [sp, #4]
   1d9e0:	f104 0311 	add.w	r3, r4, #17
   1d9e4:	9202      	str	r2, [sp, #8]
   1d9e6:	9300      	str	r3, [sp, #0]
   1d9e8:	4642      	mov	r2, r8
   1d9ea:	463b      	mov	r3, r7
   1d9ec:	4649      	mov	r1, r9
   1d9ee:	4630      	mov	r0, r6
   1d9f0:	f00e fb31 	bl	2c056 <smp_f6>
   1d9f4:	b368      	cbz	r0, 1da52 <compute_and_check_and_send_periph_dhcheck+0x18a>
		BT_ERR("Calculate local DHKey check failed");
   1d9f6:	4b48      	ldr	r3, [pc, #288]	; (1db18 <compute_and_check_and_send_periph_dhcheck+0x250>)
		BT_ERR("Calculate LTK failed");
   1d9f8:	657b      	str	r3, [r7, #84]	; 0x54
   1d9fa:	4848      	ldr	r0, [pc, #288]	; (1db1c <compute_and_check_and_send_periph_dhcheck+0x254>)
   1d9fc:	2302      	movs	r3, #2
   1d9fe:	f107 0250 	add.w	r2, r7, #80	; 0x50
   1da02:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1da06:	653b      	str	r3, [r7, #80]	; 0x50
   1da08:	f00e fb93 	bl	2c132 <z_log_msg_static_create.constprop.0>
   1da0c:	e01f      	b.n	1da4e <compute_and_check_and_send_periph_dhcheck+0x186>
		if (smp->oobd_remote) {
   1da0e:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   1da12:	2b00      	cmp	r3, #0
   1da14:	f43f af6e 	beq.w	1d8f4 <compute_and_check_and_send_periph_dhcheck+0x2c>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1da18:	463d      	mov	r5, r7
   1da1a:	f103 0610 	add.w	r6, r3, #16
   1da1e:	6818      	ldr	r0, [r3, #0]
   1da20:	6859      	ldr	r1, [r3, #4]
   1da22:	462a      	mov	r2, r5
   1da24:	c203      	stmia	r2!, {r0, r1}
   1da26:	3308      	adds	r3, #8
   1da28:	42b3      	cmp	r3, r6
   1da2a:	4615      	mov	r5, r2
   1da2c:	d1f7      	bne.n	1da1e <compute_and_check_and_send_periph_dhcheck+0x156>
   1da2e:	e761      	b.n	1d8f4 <compute_and_check_and_send_periph_dhcheck+0x2c>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1da30:	466c      	mov	r4, sp
   1da32:	b088      	sub	sp, #32
   1da34:	aa04      	add	r2, sp, #16
   1da36:	493a      	ldr	r1, [pc, #232]	; (1db20 <compute_and_check_and_send_periph_dhcheck+0x258>)
   1da38:	4838      	ldr	r0, [pc, #224]	; (1db1c <compute_and_check_and_send_periph_dhcheck+0x254>)
	switch (smp->method) {
   1da3a:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1da3e:	2303      	movs	r3, #3
   1da40:	f842 3f10 	str.w	r3, [r2, #16]!
   1da44:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1da48:	f00e fb73 	bl	2c132 <z_log_msg_static_create.constprop.0>
   1da4c:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1da4e:	2008      	movs	r0, #8
   1da50:	e055      	b.n	1dafe <compute_and_check_and_send_periph_dhcheck+0x236>
	if (smp->method == LE_SC_OOB) {
   1da52:	7a23      	ldrb	r3, [r4, #8]
   1da54:	2b05      	cmp	r3, #5
   1da56:	d10e      	bne.n	1da76 <compute_and_check_and_send_periph_dhcheck+0x1ae>
		if (smp->oobd_local) {
   1da58:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   1da5c:	b311      	cbz	r1, 1daa4 <compute_and_check_and_send_periph_dhcheck+0x1dc>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1da5e:	460b      	mov	r3, r1
   1da60:	46bc      	mov	ip, r7
   1da62:	f101 0e10 	add.w	lr, r1, #16
   1da66:	6818      	ldr	r0, [r3, #0]
   1da68:	6859      	ldr	r1, [r3, #4]
   1da6a:	4662      	mov	r2, ip
   1da6c:	c203      	stmia	r2!, {r0, r1}
   1da6e:	3308      	adds	r3, #8
   1da70:	4573      	cmp	r3, lr
   1da72:	4694      	mov	ip, r2
   1da74:	d1f7      	bne.n	1da66 <compute_and_check_and_send_periph_dhcheck+0x19e>
		   &smp->chan.chan.conn->le.init_addr,
   1da76:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   1da7a:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   1da7e:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1da80:	f107 0a10 	add.w	sl, r7, #16
   1da84:	9301      	str	r3, [sp, #4]
   1da86:	f104 030a 	add.w	r3, r4, #10
   1da8a:	9202      	str	r2, [sp, #8]
   1da8c:	9300      	str	r3, [sp, #0]
   1da8e:	f8cd a00c 	str.w	sl, [sp, #12]
   1da92:	463b      	mov	r3, r7
   1da94:	464a      	mov	r2, r9
   1da96:	4641      	mov	r1, r8
   1da98:	4630      	mov	r0, r6
   1da9a:	f00e fadc 	bl	2c056 <smp_f6>
   1da9e:	b130      	cbz	r0, 1daae <compute_and_check_and_send_periph_dhcheck+0x1e6>
		BT_ERR("Calculate remote DHKey check failed");
   1daa0:	4b20      	ldr	r3, [pc, #128]	; (1db24 <compute_and_check_and_send_periph_dhcheck+0x25c>)
   1daa2:	e7a9      	b.n	1d9f8 <compute_and_check_and_send_periph_dhcheck+0x130>
			memset(r, 0, sizeof(r));
   1daa4:	2210      	movs	r2, #16
   1daa6:	4638      	mov	r0, r7
   1daa8:	f010 f9b7 	bl	2de1a <memset>
   1daac:	e7e3      	b.n	1da76 <compute_and_check_and_send_periph_dhcheck+0x1ae>
	if (memcmp(smp->e, re, 16)) {
   1daae:	2210      	movs	r2, #16
   1dab0:	4651      	mov	r1, sl
   1dab2:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1dab6:	f010 f97f 	bl	2ddb8 <memcmp>
   1daba:	bb20      	cbnz	r0, 1db06 <compute_and_check_and_send_periph_dhcheck+0x23e>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1dabc:	210d      	movs	r1, #13
   1dabe:	4620      	mov	r0, r4
   1dac0:	f00e fb59 	bl	2c176 <smp_create_pdu.constprop.0>
	if (!buf) {
   1dac4:	4606      	mov	r6, r0
   1dac6:	2800      	cmp	r0, #0
   1dac8:	d0c1      	beq.n	1da4e <compute_and_check_and_send_periph_dhcheck+0x186>
   1daca:	2110      	movs	r1, #16
   1dacc:	3008      	adds	r0, #8
   1dace:	f00e ff09 	bl	2c8e4 <net_buf_simple_add>
   1dad2:	f107 0c30 	add.w	ip, r7, #48	; 0x30
   1dad6:	4603      	mov	r3, r0
   1dad8:	462a      	mov	r2, r5
   1dada:	ca03      	ldmia	r2!, {r0, r1}
   1dadc:	4562      	cmp	r2, ip
   1dade:	6018      	str	r0, [r3, #0]
   1dae0:	6059      	str	r1, [r3, #4]
   1dae2:	4615      	mov	r5, r2
   1dae4:	f103 0308 	add.w	r3, r3, #8
   1dae8:	d1f6      	bne.n	1dad8 <compute_and_check_and_send_periph_dhcheck+0x210>
	smp_send(smp, buf, NULL, NULL);
   1daea:	2200      	movs	r2, #0
   1daec:	4631      	mov	r1, r6
   1daee:	4620      	mov	r0, r4
   1daf0:	f00e fb02 	bl	2c0f8 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1daf4:	1d20      	adds	r0, r4, #4
   1daf6:	2101      	movs	r1, #1
   1daf8:	f00e fb29 	bl	2c14e <atomic_set_bit>
	return 0;
   1dafc:	2000      	movs	r0, #0
}
   1dafe:	377c      	adds	r7, #124	; 0x7c
   1db00:	46bd      	mov	sp, r7
   1db02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1db06:	200b      	movs	r0, #11
   1db08:	e7f9      	b.n	1dafe <compute_and_check_and_send_periph_dhcheck+0x236>
		BT_ERR("Calculate LTK failed");
   1db0a:	4b07      	ldr	r3, [pc, #28]	; (1db28 <compute_and_check_and_send_periph_dhcheck+0x260>)
   1db0c:	e774      	b.n	1d9f8 <compute_and_check_and_send_periph_dhcheck+0x130>
   1db0e:	bf00      	nop
   1db10:	0002e9d7 	.word	0x0002e9d7
   1db14:	000317c4 	.word	0x000317c4
   1db18:	0003145a 	.word	0x0003145a
   1db1c:	0002e5ec 	.word	0x0002e5ec
   1db20:	0003143e 	.word	0x0003143e
   1db24:	0003147d 	.word	0x0003147d
   1db28:	000314a1 	.word	0x000314a1

0001db2c <smp_send_pairing_confirm>:
{
   1db2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db2e:	b083      	sub	sp, #12
	switch (smp->method) {
   1db30:	7a04      	ldrb	r4, [r0, #8]
   1db32:	2c02      	cmp	r4, #2
{
   1db34:	af02      	add	r7, sp, #8
   1db36:	4605      	mov	r5, r0
	switch (smp->method) {
   1db38:	d823      	bhi.n	1db82 <smp_send_pairing_confirm+0x56>
   1db3a:	b144      	cbz	r4, 1db4e <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1db3c:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1db40:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1db44:	40dc      	lsrs	r4, r3
   1db46:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1db4a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1db4e:	2103      	movs	r1, #3
   1db50:	4628      	mov	r0, r5
   1db52:	f00e fb10 	bl	2c176 <smp_create_pdu.constprop.0>
	if (!buf) {
   1db56:	4606      	mov	r6, r0
   1db58:	b320      	cbz	r0, 1dba4 <smp_send_pairing_confirm+0x78>
   1db5a:	2110      	movs	r1, #16
   1db5c:	3008      	adds	r0, #8
   1db5e:	f00e fec1 	bl	2c8e4 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1db62:	9000      	str	r0, [sp, #0]
   1db64:	4818      	ldr	r0, [pc, #96]	; (1dbc8 <smp_send_pairing_confirm+0x9c>)
   1db66:	4623      	mov	r3, r4
   1db68:	6800      	ldr	r0, [r0, #0]
   1db6a:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1db6e:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1db72:	f00e fa34 	bl	2bfde <smp_f4>
   1db76:	4604      	mov	r4, r0
   1db78:	b1c0      	cbz	r0, 1dbac <smp_send_pairing_confirm+0x80>
		net_buf_unref(buf);
   1db7a:	4630      	mov	r0, r6
   1db7c:	f001 fcfa 	bl	1f574 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1db80:	e010      	b.n	1dba4 <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
   1db82:	2c03      	cmp	r4, #3
   1db84:	d010      	beq.n	1dba8 <smp_send_pairing_confirm+0x7c>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1db86:	466d      	mov	r5, sp
   1db88:	b088      	sub	sp, #32
   1db8a:	aa02      	add	r2, sp, #8
   1db8c:	4b0f      	ldr	r3, [pc, #60]	; (1dbcc <smp_send_pairing_confirm+0xa0>)
   1db8e:	4810      	ldr	r0, [pc, #64]	; (1dbd0 <smp_send_pairing_confirm+0xa4>)
	switch (smp->method) {
   1db90:	e9c2 3405 	strd	r3, r4, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1db94:	2303      	movs	r3, #3
   1db96:	f842 3f10 	str.w	r3, [r2, #16]!
   1db9a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1db9e:	f00e fac8 	bl	2c132 <z_log_msg_static_create.constprop.0>
   1dba2:	46ad      	mov	sp, r5
		return BT_SMP_ERR_UNSPECIFIED;
   1dba4:	2008      	movs	r0, #8
   1dba6:	e00b      	b.n	1dbc0 <smp_send_pairing_confirm+0x94>
	switch (smp->method) {
   1dba8:	2400      	movs	r4, #0
   1dbaa:	e7d0      	b.n	1db4e <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   1dbac:	4602      	mov	r2, r0
   1dbae:	4631      	mov	r1, r6
   1dbb0:	4628      	mov	r0, r5
   1dbb2:	f00e faa1 	bl	2c0f8 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1dbb6:	1d28      	adds	r0, r5, #4
   1dbb8:	4621      	mov	r1, r4
   1dbba:	f00e fa36 	bl	2c02a <atomic_clear_bit>
	return 0;
   1dbbe:	4620      	mov	r0, r4
}
   1dbc0:	3704      	adds	r7, #4
   1dbc2:	46bd      	mov	sp, r7
   1dbc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dbc6:	bf00      	nop
   1dbc8:	20005cd8 	.word	0x20005cd8
   1dbcc:	0003143e 	.word	0x0003143e
   1dbd0:	0002e5ec 	.word	0x0002e5ec

0001dbd4 <smp_public_key_periph>:
{
   1dbd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dbd8:	b086      	sub	sp, #24
   1dbda:	af00      	add	r7, sp, #0
   1dbdc:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1dbde:	f7ff fb01 	bl	1d1e4 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1dbe2:	1d25      	adds	r5, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1dbe4:	4606      	mov	r6, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1dbe6:	210e      	movs	r1, #14
   1dbe8:	4628      	mov	r0, r5
   1dbea:	f00e f9b2 	bl	2bf52 <atomic_test_bit>
   1dbee:	b9a0      	cbnz	r0, 1dc1a <smp_public_key_periph+0x46>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1dbf0:	4b54      	ldr	r3, [pc, #336]	; (1dd44 <smp_public_key_periph+0x170>)
   1dbf2:	2220      	movs	r2, #32
   1dbf4:	6819      	ldr	r1, [r3, #0]
   1dbf6:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1dbfa:	f010 f8dd 	bl	2ddb8 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1dbfe:	b960      	cbnz	r0, 1dc1a <smp_public_key_periph+0x46>
		BT_WARN("Remote public key rejected");
   1dc00:	4b51      	ldr	r3, [pc, #324]	; (1dd48 <smp_public_key_periph+0x174>)
   1dc02:	617b      	str	r3, [r7, #20]
   1dc04:	4851      	ldr	r0, [pc, #324]	; (1dd4c <smp_public_key_periph+0x178>)
   1dc06:	2302      	movs	r3, #2
   1dc08:	f107 0210 	add.w	r2, r7, #16
   1dc0c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1dc10:	613b      	str	r3, [r7, #16]
   1dc12:	f00e fa8e 	bl	2c132 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1dc16:	2008      	movs	r0, #8
   1dc18:	e034      	b.n	1dc84 <smp_public_key_periph+0xb0>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1dc1a:	210c      	movs	r1, #12
   1dc1c:	4620      	mov	r0, r4
   1dc1e:	f00e faaa 	bl	2c176 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1dc22:	4680      	mov	r8, r0
   1dc24:	2800      	cmp	r0, #0
   1dc26:	d0f6      	beq.n	1dc16 <smp_public_key_periph+0x42>
   1dc28:	2140      	movs	r1, #64	; 0x40
   1dc2a:	3008      	adds	r0, #8
   1dc2c:	f00e fe5a 	bl	2c8e4 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1dc30:	4b44      	ldr	r3, [pc, #272]	; (1dd44 <smp_public_key_periph+0x170>)
   1dc32:	681b      	ldr	r3, [r3, #0]
   1dc34:	4602      	mov	r2, r0
   1dc36:	4601      	mov	r1, r0
   1dc38:	f103 0020 	add.w	r0, r3, #32
   1dc3c:	f853 cb04 	ldr.w	ip, [r3], #4
   1dc40:	f841 cb04 	str.w	ip, [r1], #4
   1dc44:	4283      	cmp	r3, r0
   1dc46:	d1f9      	bne.n	1dc3c <smp_public_key_periph+0x68>
   1dc48:	3220      	adds	r2, #32
   1dc4a:	f103 0120 	add.w	r1, r3, #32
   1dc4e:	f853 0b04 	ldr.w	r0, [r3], #4
   1dc52:	f842 0b04 	str.w	r0, [r2], #4
   1dc56:	428b      	cmp	r3, r1
   1dc58:	d1f9      	bne.n	1dc4e <smp_public_key_periph+0x7a>
	smp_send(smp, req_buf, NULL, NULL);
   1dc5a:	2200      	movs	r2, #0
   1dc5c:	4641      	mov	r1, r8
   1dc5e:	4620      	mov	r0, r4
   1dc60:	f00e fa4a 	bl	2c0f8 <smp_send.constprop.0>
	switch (smp->method) {
   1dc64:	7a23      	ldrb	r3, [r4, #8]
   1dc66:	2b05      	cmp	r3, #5
   1dc68:	d85a      	bhi.n	1dd20 <smp_public_key_periph+0x14c>
   1dc6a:	e8df f003 	tbb	[pc, r3]
   1dc6e:	3b03      	.short	0x3b03
   1dc70:	5659030f 	.word	0x5659030f
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1dc74:	2104      	movs	r1, #4
   1dc76:	4620      	mov	r0, r4
   1dc78:	f00e fa69 	bl	2c14e <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1dc7c:	f7ff ff56 	bl	1db2c <smp_send_pairing_confirm>
		if (err) {
   1dc80:	2800      	cmp	r0, #0
   1dc82:	d03e      	beq.n	1dd02 <smp_public_key_periph+0x12e>
}
   1dc84:	3718      	adds	r7, #24
   1dc86:	46bd      	mov	sp, r7
   1dc88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1dc8c:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1dc8e:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1dc92:	f7ff faa7 	bl	1d1e4 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1dc96:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1dc98:	4606      	mov	r6, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1dc9a:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1dc9e:	f003 fe25 	bl	218ec <bt_rand>
   1dca2:	2800      	cmp	r0, #0
   1dca4:	d1b7      	bne.n	1dc16 <smp_public_key_periph+0x42>
		smp->passkey %= 1000000;
   1dca6:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1dcaa:	4a29      	ldr	r2, [pc, #164]	; (1dd50 <smp_public_key_periph+0x17c>)
   1dcac:	fbb3 f1f2 	udiv	r1, r3, r2
   1dcb0:	fb02 3311 	mls	r3, r2, r1, r3
   1dcb4:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   1dcb8:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1dcbc:	b156      	cbz	r6, 1dcd4 <smp_public_key_periph+0x100>
   1dcbe:	6833      	ldr	r3, [r6, #0]
   1dcc0:	b143      	cbz	r3, 1dcd4 <smp_public_key_periph+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1dcc2:	210b      	movs	r1, #11
   1dcc4:	4628      	mov	r0, r5
   1dcc6:	f00e fa42 	bl	2c14e <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   1dcca:	6833      	ldr	r3, [r6, #0]
   1dccc:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1dcd0:	4640      	mov	r0, r8
   1dcd2:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1dcd4:	2103      	movs	r1, #3
   1dcd6:	4620      	mov	r0, r4
   1dcd8:	f00e fa39 	bl	2c14e <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1dcdc:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1dcde:	f00e fa36 	bl	2c14e <atomic_set_bit>
		break;
   1dce2:	e00e      	b.n	1dd02 <smp_public_key_periph+0x12e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1dce4:	4620      	mov	r0, r4
   1dce6:	2103      	movs	r1, #3
   1dce8:	f00e fa31 	bl	2c14e <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1dcec:	210e      	movs	r1, #14
   1dcee:	f00e fa2e 	bl	2c14e <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1dcf2:	4628      	mov	r0, r5
   1dcf4:	210a      	movs	r1, #10
   1dcf6:	f00e fa2a 	bl	2c14e <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   1dcfa:	6873      	ldr	r3, [r6, #4]
   1dcfc:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1dd00:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1dd02:	4628      	mov	r0, r5
   1dd04:	2107      	movs	r1, #7
   1dd06:	f00e fa22 	bl	2c14e <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1dd0a:	2008      	movs	r0, #8
   1dd0c:	f7ff fa5c 	bl	1d1c8 <smp_find>
   1dd10:	b9b0      	cbnz	r0, 1dd40 <smp_public_key_periph+0x16c>
		return smp_dhkey_generate(smp);
   1dd12:	4620      	mov	r0, r4
   1dd14:	f7ff fb74 	bl	1d400 <smp_dhkey_generate>
   1dd18:	e7b4      	b.n	1dc84 <smp_public_key_periph+0xb0>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1dd1a:	2104      	movs	r1, #4
   1dd1c:	4620      	mov	r0, r4
   1dd1e:	e7de      	b.n	1dcde <smp_public_key_periph+0x10a>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1dd20:	466c      	mov	r4, sp
   1dd22:	b088      	sub	sp, #32
   1dd24:	466a      	mov	r2, sp
   1dd26:	490b      	ldr	r1, [pc, #44]	; (1dd54 <smp_public_key_periph+0x180>)
   1dd28:	4808      	ldr	r0, [pc, #32]	; (1dd4c <smp_public_key_periph+0x178>)
	switch (smp->method) {
   1dd2a:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1dd2e:	2303      	movs	r3, #3
   1dd30:	f842 3f10 	str.w	r3, [r2, #16]!
   1dd34:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1dd38:	f00e f9fb 	bl	2c132 <z_log_msg_static_create.constprop.0>
   1dd3c:	46a5      	mov	sp, r4
   1dd3e:	e76a      	b.n	1dc16 <smp_public_key_periph+0x42>
	return 0;
   1dd40:	2000      	movs	r0, #0
   1dd42:	e79f      	b.n	1dc84 <smp_public_key_periph+0xb0>
   1dd44:	20005cd8 	.word	0x20005cd8
   1dd48:	000314b6 	.word	0x000314b6
   1dd4c:	0002e5ec 	.word	0x0002e5ec
   1dd50:	000f4240 	.word	0x000f4240
   1dd54:	0003143e 	.word	0x0003143e

0001dd58 <smp_public_key>:
{
   1dd58:	b530      	push	{r4, r5, lr}
   1dd5a:	460d      	mov	r5, r1
   1dd5c:	b087      	sub	sp, #28
   1dd5e:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1dd60:	f7ff fa40 	bl	1d1e4 <latch_auth_cb>
   1dd64:	68ab      	ldr	r3, [r5, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1dd66:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1dd6a:	4602      	mov	r2, r0
   1dd6c:	f103 0120 	add.w	r1, r3, #32
   1dd70:	f853 5b04 	ldr.w	r5, [r3], #4
   1dd74:	f842 5b04 	str.w	r5, [r2], #4
   1dd78:	428b      	cmp	r3, r1
   1dd7a:	d1f9      	bne.n	1dd70 <smp_public_key+0x18>
   1dd7c:	f104 0277 	add.w	r2, r4, #119	; 0x77
   1dd80:	f103 0120 	add.w	r1, r3, #32
   1dd84:	f853 5b04 	ldr.w	r5, [r3], #4
   1dd88:	f842 5b04 	str.w	r5, [r2], #4
   1dd8c:	428b      	cmp	r3, r1
   1dd8e:	d1f9      	bne.n	1dd84 <smp_public_key+0x2c>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1dd90:	f7fb fcec 	bl	1976c <bt_pub_key_is_debug>
   1dd94:	b940      	cbnz	r0, 1dda8 <smp_public_key+0x50>
	if (!sc_public_key) {
   1dd96:	4b1c      	ldr	r3, [pc, #112]	; (1de08 <smp_public_key+0xb0>)
   1dd98:	681d      	ldr	r5, [r3, #0]
   1dd9a:	bb75      	cbnz	r5, 1ddfa <smp_public_key+0xa2>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1dd9c:	1d20      	adds	r0, r4, #4
   1dd9e:	2106      	movs	r1, #6
   1dda0:	f00e f9d5 	bl	2c14e <atomic_set_bit>
		return 0;
   1dda4:	4628      	mov	r0, r5
   1dda6:	e026      	b.n	1ddf6 <smp_public_key+0x9e>
		BT_INFO("Remote is using Debug Public key");
   1dda8:	4b18      	ldr	r3, [pc, #96]	; (1de0c <smp_public_key+0xb4>)
   1ddaa:	4819      	ldr	r0, [pc, #100]	; (1de10 <smp_public_key+0xb8>)
   1ddac:	9305      	str	r3, [sp, #20]
   1ddae:	aa04      	add	r2, sp, #16
   1ddb0:	2302      	movs	r3, #2
   1ddb2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1ddb6:	9304      	str	r3, [sp, #16]
   1ddb8:	f00e f9bb 	bl	2c132 <z_log_msg_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1ddbc:	210e      	movs	r1, #14
   1ddbe:	1d20      	adds	r0, r4, #4
   1ddc0:	f00e f9c5 	bl	2c14e <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1ddc4:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   1ddc8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1ddcc:	b933      	cbnz	r3, 1dddc <smp_public_key+0x84>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1ddce:	7a28      	ldrb	r0, [r5, #8]
   1ddd0:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1ddd4:	f001 f8c8 	bl	1ef68 <bt_keys_get_addr>
   1ddd8:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   1dddc:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1dde0:	2b00      	cmp	r3, #0
   1dde2:	d0d8      	beq.n	1dd96 <smp_public_key+0x3e>
   1dde4:	89da      	ldrh	r2, [r3, #14]
   1dde6:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1ddea:	2a00      	cmp	r2, #0
   1ddec:	d0d3      	beq.n	1dd96 <smp_public_key+0x3e>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1ddee:	7b5b      	ldrb	r3, [r3, #13]
   1ddf0:	079b      	lsls	r3, r3, #30
   1ddf2:	d4d0      	bmi.n	1dd96 <smp_public_key+0x3e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1ddf4:	2003      	movs	r0, #3
}
   1ddf6:	b007      	add	sp, #28
   1ddf8:	bd30      	pop	{r4, r5, pc}
	err = smp_public_key_periph(smp);
   1ddfa:	4620      	mov	r0, r4
}
   1ddfc:	b007      	add	sp, #28
   1ddfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	err = smp_public_key_periph(smp);
   1de02:	f7ff bee7 	b.w	1dbd4 <smp_public_key_periph>
   1de06:	bf00      	nop
   1de08:	20005cd8 	.word	0x20005cd8
   1de0c:	000314d1 	.word	0x000314d1
   1de10:	0002e5ec 	.word	0x0002e5ec

0001de14 <bt_smp_connected>:
{
   1de14:	b538      	push	{r3, r4, r5, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1de16:	490b      	ldr	r1, [pc, #44]	; (1de44 <bt_smp_connected+0x30>)
{
   1de18:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   1de1a:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1de1e:	308c      	adds	r0, #140	; 0x8c
   1de20:	f00f fc7b 	bl	2d71a <k_work_init_delayable>
	smp_reset(smp);
   1de24:	4628      	mov	r0, r5
   1de26:	f00e fa45 	bl	2c2b4 <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1de2a:	f3bf 8f5b 	dmb	ish
   1de2e:	4b06      	ldr	r3, [pc, #24]	; (1de48 <bt_smp_connected+0x34>)
   1de30:	34bc      	adds	r4, #188	; 0xbc
   1de32:	e854 2f00 	ldrex	r2, [r4]
   1de36:	e844 3100 	strex	r1, r3, [r4]
   1de3a:	2900      	cmp	r1, #0
   1de3c:	d1f9      	bne.n	1de32 <bt_smp_connected+0x1e>
   1de3e:	f3bf 8f5b 	dmb	ish
}
   1de42:	bd38      	pop	{r3, r4, r5, pc}
   1de44:	0001ede5 	.word	0x0001ede5
   1de48:	200021b8 	.word	0x200021b8

0001de4c <smp_pairing_confirm>:
{
   1de4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1de4e:	688d      	ldr	r5, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1de50:	1d06      	adds	r6, r0, #4
{
   1de52:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1de54:	210b      	movs	r1, #11
{
   1de56:	af00      	add	r7, sp, #0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1de58:	4630      	mov	r0, r6
   1de5a:	f00e f8e6 	bl	2c02a <atomic_clear_bit>
   1de5e:	462b      	mov	r3, r5
   1de60:	f104 0217 	add.w	r2, r4, #23
   1de64:	f105 0110 	add.w	r1, r5, #16
   1de68:	f853 0b04 	ldr.w	r0, [r3], #4
   1de6c:	f842 0b04 	str.w	r0, [r2], #4
   1de70:	428b      	cmp	r3, r1
   1de72:	d1f9      	bne.n	1de68 <smp_pairing_confirm+0x1c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1de74:	2105      	movs	r1, #5
   1de76:	4630      	mov	r0, r6
   1de78:	f00e f86b 	bl	2bf52 <atomic_test_bit>
   1de7c:	b920      	cbnz	r0, 1de88 <smp_pairing_confirm+0x3c>
		return legacy_pairing_confirm(smp);
   1de7e:	4620      	mov	r0, r4
   1de80:	f00e fa97 	bl	2c3b2 <legacy_pairing_confirm>
}
   1de84:	46bd      	mov	sp, r7
   1de86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
   1de88:	7a23      	ldrb	r3, [r4, #8]
   1de8a:	2b01      	cmp	r3, #1
   1de8c:	d008      	beq.n	1dea0 <smp_pairing_confirm+0x54>
   1de8e:	2b02      	cmp	r3, #2
   1de90:	d112      	bne.n	1deb8 <smp_pairing_confirm+0x6c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1de92:	2104      	movs	r1, #4
   1de94:	4620      	mov	r0, r4
   1de96:	f00e f95a 	bl	2c14e <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   1de9a:	f7ff fe47 	bl	1db2c <smp_send_pairing_confirm>
   1de9e:	e7f1      	b.n	1de84 <smp_pairing_confirm+0x38>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1dea0:	210a      	movs	r1, #10
   1dea2:	4630      	mov	r0, r6
   1dea4:	f00e f855 	bl	2bf52 <atomic_test_bit>
   1dea8:	2800      	cmp	r0, #0
   1deaa:	d0f2      	beq.n	1de92 <smp_pairing_confirm+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1deac:	4630      	mov	r0, r6
   1deae:	2100      	movs	r1, #0
   1deb0:	f00e f94d 	bl	2c14e <atomic_set_bit>
			return 0;
   1deb4:	2000      	movs	r0, #0
   1deb6:	e7e5      	b.n	1de84 <smp_pairing_confirm+0x38>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1deb8:	466c      	mov	r4, sp
   1deba:	b088      	sub	sp, #32
   1debc:	466a      	mov	r2, sp
   1debe:	4907      	ldr	r1, [pc, #28]	; (1dedc <smp_pairing_confirm+0x90>)
   1dec0:	4807      	ldr	r0, [pc, #28]	; (1dee0 <smp_pairing_confirm+0x94>)
	switch (smp->method) {
   1dec2:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1dec6:	2303      	movs	r3, #3
   1dec8:	f842 3f10 	str.w	r3, [r2, #16]!
   1decc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ded0:	f00e f92f 	bl	2c132 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1ded4:	2008      	movs	r0, #8
   1ded6:	46a5      	mov	sp, r4
   1ded8:	e7d4      	b.n	1de84 <smp_pairing_confirm+0x38>
   1deda:	bf00      	nop
   1dedc:	0003143e 	.word	0x0003143e
   1dee0:	0002e5ec 	.word	0x0002e5ec

0001dee4 <smp_pairing_random>:
{
   1dee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dee8:	b09d      	sub	sp, #116	; 0x74
   1deea:	460d      	mov	r5, r1
   1deec:	af04      	add	r7, sp, #16
   1deee:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1def0:	f7ff f978 	bl	1d1e4 <latch_auth_cb>
   1def4:	68ab      	ldr	r3, [r5, #8]
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1def6:	f104 0937 	add.w	r9, r4, #55	; 0x37
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1defa:	4680      	mov	r8, r0
   1defc:	464a      	mov	r2, r9
   1defe:	f103 0110 	add.w	r1, r3, #16
   1df02:	f853 0b04 	ldr.w	r0, [r3], #4
   1df06:	f842 0b04 	str.w	r0, [r2], #4
   1df0a:	428b      	cmp	r3, r1
   1df0c:	d1f9      	bne.n	1df02 <smp_pairing_random+0x1e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1df0e:	1d26      	adds	r6, r4, #4
   1df10:	2105      	movs	r1, #5
   1df12:	4630      	mov	r0, r6
   1df14:	f00e f81d 	bl	2bf52 <atomic_test_bit>
   1df18:	2800      	cmp	r0, #0
   1df1a:	d14f      	bne.n	1dfbc <smp_pairing_random+0xd8>
	struct bt_conn *conn = smp->chan.chan.conn;
   1df1c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1df20:	9702      	str	r7, [sp, #8]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1df22:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1df26:	f104 0547 	add.w	r5, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1df2a:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1df2c:	9201      	str	r2, [sp, #4]
   1df2e:	9300      	str	r3, [sp, #0]
   1df30:	f104 0209 	add.w	r2, r4, #9
   1df34:	f104 0310 	add.w	r3, r4, #16
   1df38:	4649      	mov	r1, r9
   1df3a:	4628      	mov	r0, r5
   1df3c:	f00e f9dd 	bl	2c2fa <smp_c1>
	if (err) {
   1df40:	bb20      	cbnz	r0, 1df8c <smp_pairing_random+0xa8>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1df42:	2210      	movs	r2, #16
   1df44:	4639      	mov	r1, r7
   1df46:	f104 0017 	add.w	r0, r4, #23
   1df4a:	f00f ff35 	bl	2ddb8 <memcmp>
   1df4e:	2800      	cmp	r0, #0
   1df50:	f040 8092 	bne.w	1e078 <smp_pairing_random+0x194>
	memcpy(out, r2, 8);
   1df54:	f8d4 0037 	ldr.w	r0, [r4, #55]	; 0x37
   1df58:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1df5c:	463b      	mov	r3, r7
   1df5e:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
   1df60:	f8d4 0027 	ldr.w	r0, [r4, #39]	; 0x27
   1df64:	f8d4 102b 	ldr.w	r1, [r4, #43]	; 0x2b
	return bt_encrypt_le(k, out, out);
   1df68:	463a      	mov	r2, r7
	memcpy(out + 8, r1, 8);
   1df6a:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
   1df6c:	4639      	mov	r1, r7
   1df6e:	4628      	mov	r0, r5
   1df70:	f00e ff9d 	bl	2ceae <bt_encrypt_le>
		if (err) {
   1df74:	b160      	cbz	r0, 1df90 <smp_pairing_random+0xac>
			BT_ERR("Calculate STK failed");
   1df76:	4b75      	ldr	r3, [pc, #468]	; (1e14c <smp_pairing_random+0x268>)
		BT_ERR("Calculate confirm failed");
   1df78:	627b      	str	r3, [r7, #36]	; 0x24
   1df7a:	4875      	ldr	r0, [pc, #468]	; (1e150 <smp_pairing_random+0x26c>)
   1df7c:	2302      	movs	r3, #2
   1df7e:	f107 0220 	add.w	r2, r7, #32
   1df82:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1df86:	623b      	str	r3, [r7, #32]
   1df88:	f00e f8d3 	bl	2c132 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1df8c:	2508      	movs	r5, #8
   1df8e:	e074      	b.n	1e07a <smp_pairing_random+0x196>
   1df90:	463b      	mov	r3, r7
   1df92:	462a      	mov	r2, r5
   1df94:	f107 0c10 	add.w	ip, r7, #16
   1df98:	461d      	mov	r5, r3
   1df9a:	cd03      	ldmia	r5!, {r0, r1}
   1df9c:	4565      	cmp	r5, ip
   1df9e:	6010      	str	r0, [r2, #0]
   1dfa0:	6051      	str	r1, [r2, #4]
   1dfa2:	462b      	mov	r3, r5
   1dfa4:	f102 0208 	add.w	r2, r2, #8
   1dfa8:	d1f6      	bne.n	1df98 <smp_pairing_random+0xb4>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1dfaa:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1dfac:	4630      	mov	r0, r6
   1dfae:	f00e f8ce 	bl	2c14e <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1dfb2:	4620      	mov	r0, r4
   1dfb4:	f00e f918 	bl	2c1e8 <smp_send_pairing_random>
   1dfb8:	4605      	mov	r5, r0
   1dfba:	e05e      	b.n	1e07a <smp_pairing_random+0x196>
	switch (smp->method) {
   1dfbc:	7a23      	ldrb	r3, [r4, #8]
   1dfbe:	2b05      	cmp	r3, #5
   1dfc0:	f200 809f 	bhi.w	1e102 <smp_pairing_random+0x21e>
   1dfc4:	e8df f003 	tbb	[pc, r3]
   1dfc8:	033d3d37 	.word	0x033d3d37
   1dfcc:	809d      	.short	0x809d
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1dfce:	4b61      	ldr	r3, [pc, #388]	; (1e154 <smp_pairing_random+0x270>)
   1dfd0:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   1dfd2:	2220      	movs	r2, #32
   1dfd4:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1dfd8:	f107 0010 	add.w	r0, r7, #16
   1dfdc:	f00d ffa0 	bl	2bf20 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1dfe0:	2220      	movs	r2, #32
   1dfe2:	4629      	mov	r1, r5
   1dfe4:	f107 0030 	add.w	r0, r7, #48	; 0x30
   1dfe8:	f00d ff9a 	bl	2bf20 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1dfec:	2210      	movs	r2, #16
   1dfee:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1dff2:	f107 0050 	add.w	r0, r7, #80	; 0x50
   1dff6:	f00d ff93 	bl	2bf20 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1dffa:	2210      	movs	r2, #16
   1dffc:	4649      	mov	r1, r9
   1dffe:	4638      	mov	r0, r7
   1e000:	f00d ff8e 	bl	2bf20 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1e004:	463b      	mov	r3, r7
   1e006:	2250      	movs	r2, #80	; 0x50
   1e008:	f107 0110 	add.w	r1, r7, #16
   1e00c:	4638      	mov	r0, r7
   1e00e:	f00d ffca 	bl	2bfa6 <bt_smp_aes_cmac>
	if (err) {
   1e012:	2800      	cmp	r0, #0
   1e014:	d1ba      	bne.n	1df8c <smp_pairing_random+0xa8>
	memcpy(passkey, xs + 12, 4);
   1e016:	68fd      	ldr	r5, [r7, #12]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1e018:	210a      	movs	r1, #10
   1e01a:	4630      	mov	r0, r6
   1e01c:	f00e f897 	bl	2c14e <atomic_set_bit>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1e020:	4b4d      	ldr	r3, [pc, #308]	; (1e158 <smp_pairing_random+0x274>)
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1e022:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1e026:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1e02a:	ba2d      	rev	r5, r5
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1e02c:	fbb5 f1f3 	udiv	r1, r5, r3
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1e030:	fb03 5111 	mls	r1, r3, r1, r5
   1e034:	4790      	blx	r2
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1e036:	210d      	movs	r1, #13
   1e038:	4620      	mov	r0, r4
   1e03a:	f00e f888 	bl	2c14e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1e03e:	2110      	movs	r1, #16
   1e040:	e7b4      	b.n	1dfac <smp_pairing_random+0xc8>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1e042:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1e046:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1e04a:	4942      	ldr	r1, [pc, #264]	; (1e154 <smp_pairing_random+0x270>)
   1e04c:	9700      	str	r7, [sp, #0]
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1e04e:	40d3      	lsrs	r3, r2
   1e050:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1e054:	6809      	ldr	r1, [r1, #0]
   1e056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1e05a:	464a      	mov	r2, r9
   1e05c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1e060:	f00d ffbd 	bl	2bfde <smp_f4>
   1e064:	b108      	cbz	r0, 1e06a <smp_pairing_random+0x186>
		BT_ERR("Calculate confirm failed");
   1e066:	4b3d      	ldr	r3, [pc, #244]	; (1e15c <smp_pairing_random+0x278>)
   1e068:	e786      	b.n	1df78 <smp_pairing_random+0x94>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1e06a:	2210      	movs	r2, #16
   1e06c:	4639      	mov	r1, r7
   1e06e:	f104 0017 	add.w	r0, r4, #23
   1e072:	f00f fea1 	bl	2ddb8 <memcmp>
   1e076:	b128      	cbz	r0, 1e084 <smp_pairing_random+0x1a0>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1e078:	2504      	movs	r5, #4
}
   1e07a:	4628      	mov	r0, r5
   1e07c:	3764      	adds	r7, #100	; 0x64
   1e07e:	46bd      	mov	sp, r7
   1e080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		atomic_set_bit(smp->allowed_cmds,
   1e084:	2103      	movs	r1, #3
   1e086:	4620      	mov	r0, r4
   1e088:	f00e f861 	bl	2c14e <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1e08c:	f00e f8ac 	bl	2c1e8 <smp_send_pairing_random>
		if (err) {
   1e090:	4605      	mov	r5, r0
   1e092:	2800      	cmp	r0, #0
   1e094:	d1f1      	bne.n	1e07a <smp_pairing_random+0x196>
		smp->passkey_round++;
   1e096:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1e09a:	3301      	adds	r3, #1
   1e09c:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1e09e:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1e0a0:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1e0a4:	d108      	bne.n	1e0b8 <smp_pairing_random+0x1d4>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1e0a6:	4620      	mov	r0, r4
   1e0a8:	210d      	movs	r1, #13
   1e0aa:	f00e f850 	bl	2c14e <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1e0ae:	2110      	movs	r1, #16
   1e0b0:	4630      	mov	r0, r6
   1e0b2:	f00e f84c 	bl	2c14e <atomic_set_bit>
			return 0;
   1e0b6:	e7e0      	b.n	1e07a <smp_pairing_random+0x196>
		if (bt_rand(smp->prnd, 16)) {
   1e0b8:	2110      	movs	r1, #16
   1e0ba:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1e0be:	f003 fc15 	bl	218ec <bt_rand>
   1e0c2:	2800      	cmp	r0, #0
   1e0c4:	d0d9      	beq.n	1e07a <smp_pairing_random+0x196>
   1e0c6:	e761      	b.n	1df8c <smp_pairing_random+0xa8>
		if (bt_rand(smp->prnd, 16)) {
   1e0c8:	2110      	movs	r1, #16
   1e0ca:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1e0ce:	f003 fc0d 	bl	218ec <bt_rand>
   1e0d2:	2800      	cmp	r0, #0
   1e0d4:	f47f af5a 	bne.w	1df8c <smp_pairing_random+0xa8>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1e0d8:	f1b8 0f00 	cmp.w	r8, #0
   1e0dc:	d021      	beq.n	1e122 <smp_pairing_random+0x23e>
   1e0de:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1e0e2:	b1f3      	cbz	r3, 1e122 <smp_pairing_random+0x23e>
			struct bt_conn_oob_info info = {
   1e0e4:	4b1e      	ldr	r3, [pc, #120]	; (1e160 <smp_pairing_random+0x27c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1e0e6:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   1e0e8:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
   1e0ec:	823b      	strh	r3, [r7, #16]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1e0ee:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1e0f0:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1e0f2:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1e0f6:	d416      	bmi.n	1e126 <smp_pairing_random+0x242>
				     BT_CONN_OOB_BOTH_PEERS :
   1e0f8:	2b00      	cmp	r3, #0
   1e0fa:	bf0c      	ite	eq
   1e0fc:	2003      	moveq	r0, #3
   1e0fe:	2001      	movne	r0, #1
   1e100:	e014      	b.n	1e12c <smp_pairing_random+0x248>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1e102:	466c      	mov	r4, sp
   1e104:	b088      	sub	sp, #32
   1e106:	aa04      	add	r2, sp, #16
   1e108:	4916      	ldr	r1, [pc, #88]	; (1e164 <smp_pairing_random+0x280>)
   1e10a:	4811      	ldr	r0, [pc, #68]	; (1e150 <smp_pairing_random+0x26c>)
	switch (smp->method) {
   1e10c:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1e110:	2303      	movs	r3, #3
   1e112:	f842 3f10 	str.w	r3, [r2, #16]!
   1e116:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e11a:	f00e f80a 	bl	2c132 <z_log_msg_static_create.constprop.0>
   1e11e:	46a5      	mov	sp, r4
   1e120:	e734      	b.n	1df8c <smp_pairing_random+0xa8>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1e122:	2502      	movs	r5, #2
   1e124:	e7a9      	b.n	1e07a <smp_pairing_random+0x196>
				     BT_CONN_OOB_BOTH_PEERS :
   1e126:	2b00      	cmp	r3, #0
   1e128:	bf18      	it	ne
   1e12a:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
   1e12c:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
   1e12e:	7478      	strb	r0, [r7, #17]
			smp->oobd_remote = NULL;
   1e130:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1e134:	4630      	mov	r0, r6
   1e136:	210c      	movs	r1, #12
   1e138:	f00e f809 	bl	2c14e <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1e13c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1e140:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1e144:	f107 0110 	add.w	r1, r7, #16
   1e148:	4798      	blx	r3
			return 0;
   1e14a:	e796      	b.n	1e07a <smp_pairing_random+0x196>
   1e14c:	000314f2 	.word	0x000314f2
   1e150:	0002e5ec 	.word	0x0002e5ec
   1e154:	20005cd8 	.word	0x20005cd8
   1e158:	000f4240 	.word	0x000f4240
   1e15c:	00031507 	.word	0x00031507
   1e160:	0002e9d7 	.word	0x0002e9d7
   1e164:	0003143e 	.word	0x0003143e

0001e168 <bt_smp_sign_verify>:
{
   1e168:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e16a:	b085      	sub	sp, #20
	return buf->data + buf->len;
   1e16c:	898b      	ldrh	r3, [r1, #12]
   1e16e:	688a      	ldr	r2, [r1, #8]
   1e170:	441a      	add	r2, r3
   1e172:	4605      	mov	r5, r0
   1e174:	af00      	add	r7, sp, #0
   1e176:	f852 0c0c 	ldr.w	r0, [r2, #-12]
   1e17a:	460c      	mov	r4, r1
   1e17c:	f852 1c08 	ldr.w	r1, [r2, #-8]
   1e180:	1d3b      	adds	r3, r7, #4
   1e182:	c303      	stmia	r3!, {r0, r1}
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   1e184:	f105 0688 	add.w	r6, r5, #136	; 0x88
   1e188:	f852 0c04 	ldr.w	r0, [r2, #-4]
   1e18c:	7a29      	ldrb	r1, [r5, #8]
   1e18e:	6018      	str	r0, [r3, #0]
   1e190:	4632      	mov	r2, r6
   1e192:	2010      	movs	r0, #16
   1e194:	f000 ff58 	bl	1f048 <bt_keys_find>
	if (!keys) {
   1e198:	4605      	mov	r5, r0
   1e19a:	b9c0      	cbnz	r0, 1e1ce <bt_smp_sign_verify+0x66>
		BT_ERR("Unable to find Remote CSRK for %s",
   1e19c:	4630      	mov	r0, r6
   1e19e:	f7f8 ffc9 	bl	17134 <bt_addr_le_str_real>
   1e1a2:	466c      	mov	r4, sp
   1e1a4:	b088      	sub	sp, #32
   1e1a6:	466a      	mov	r2, sp
   1e1a8:	4b2d      	ldr	r3, [pc, #180]	; (1e260 <bt_smp_sign_verify+0xf8>)
   1e1aa:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e1ae:	2302      	movs	r3, #2
   1e1b0:	7713      	strb	r3, [r2, #28]
   1e1b2:	4b2c      	ldr	r3, [pc, #176]	; (1e264 <bt_smp_sign_verify+0xfc>)
   1e1b4:	482c      	ldr	r0, [pc, #176]	; (1e268 <bt_smp_sign_verify+0x100>)
   1e1b6:	f842 3f10 	str.w	r3, [r2, #16]!
   1e1ba:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1e1be:	f00d ffb8 	bl	2c132 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
   1e1c2:	f06f 0001 	mvn.w	r0, #1
   1e1c6:	46a5      	mov	sp, r4
}
   1e1c8:	3714      	adds	r7, #20
   1e1ca:	46bd      	mov	sp, r7
   1e1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e1ce:	89a1      	ldrh	r1, [r4, #12]
   1e1d0:	68a3      	ldr	r3, [r4, #8]
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
   1e1d2:	6e42      	ldr	r2, [r0, #100]	; 0x64
   1e1d4:	440b      	add	r3, r1
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
   1e1d6:	3054      	adds	r0, #84	; 0x54
   1e1d8:	f843 2c0c 	str.w	r2, [r3, #-12]
   1e1dc:	89a2      	ldrh	r2, [r4, #12]
   1e1de:	68a1      	ldr	r1, [r4, #8]
   1e1e0:	3a0c      	subs	r2, #12
   1e1e2:	b292      	uxth	r2, r2
   1e1e4:	f7ff f870 	bl	1d2c8 <smp_sign_buf>
	if (err) {
   1e1e8:	b1b0      	cbz	r0, 1e218 <bt_smp_sign_verify+0xb0>
		BT_ERR("Unable to create signature for %s",
   1e1ea:	4630      	mov	r0, r6
   1e1ec:	f7f8 ffa2 	bl	17134 <bt_addr_le_str_real>
   1e1f0:	466c      	mov	r4, sp
   1e1f2:	b088      	sub	sp, #32
   1e1f4:	466a      	mov	r2, sp
   1e1f6:	4b1d      	ldr	r3, [pc, #116]	; (1e26c <bt_smp_sign_verify+0x104>)
   1e1f8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e1fc:	2302      	movs	r3, #2
   1e1fe:	7713      	strb	r3, [r2, #28]
   1e200:	4b18      	ldr	r3, [pc, #96]	; (1e264 <bt_smp_sign_verify+0xfc>)
   1e202:	4819      	ldr	r0, [pc, #100]	; (1e268 <bt_smp_sign_verify+0x100>)
   1e204:	f842 3f10 	str.w	r3, [r2, #16]!
   1e208:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1e20c:	f00d ff91 	bl	2c132 <z_log_msg_static_create.constprop.0>
		return -EIO;
   1e210:	f06f 0004 	mvn.w	r0, #4
   1e214:	46a5      	mov	sp, r4
   1e216:	e7d7      	b.n	1e1c8 <bt_smp_sign_verify+0x60>
   1e218:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
   1e21a:	68a1      	ldr	r1, [r4, #8]
   1e21c:	3b0c      	subs	r3, #12
   1e21e:	220c      	movs	r2, #12
   1e220:	4419      	add	r1, r3
   1e222:	1d38      	adds	r0, r7, #4
   1e224:	f00f fdc8 	bl	2ddb8 <memcmp>
   1e228:	b1b0      	cbz	r0, 1e258 <bt_smp_sign_verify+0xf0>
		BT_ERR("Unable to verify signature for %s",
   1e22a:	4630      	mov	r0, r6
   1e22c:	f7f8 ff82 	bl	17134 <bt_addr_le_str_real>
   1e230:	466c      	mov	r4, sp
   1e232:	b088      	sub	sp, #32
   1e234:	466a      	mov	r2, sp
   1e236:	4b0e      	ldr	r3, [pc, #56]	; (1e270 <bt_smp_sign_verify+0x108>)
   1e238:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e23c:	2302      	movs	r3, #2
   1e23e:	7713      	strb	r3, [r2, #28]
   1e240:	4b08      	ldr	r3, [pc, #32]	; (1e264 <bt_smp_sign_verify+0xfc>)
   1e242:	4809      	ldr	r0, [pc, #36]	; (1e268 <bt_smp_sign_verify+0x100>)
   1e244:	f842 3f10 	str.w	r3, [r2, #16]!
   1e248:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1e24c:	f00d ff71 	bl	2c132 <z_log_msg_static_create.constprop.0>
		return -EBADMSG;
   1e250:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   1e254:	46a5      	mov	sp, r4
   1e256:	e7b7      	b.n	1e1c8 <bt_smp_sign_verify+0x60>
	keys->remote_csrk.cnt++;
   1e258:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1e25a:	3301      	adds	r3, #1
   1e25c:	666b      	str	r3, [r5, #100]	; 0x64
	return 0;
   1e25e:	e7b3      	b.n	1e1c8 <bt_smp_sign_verify+0x60>
   1e260:	00031520 	.word	0x00031520
   1e264:	01000003 	.word	0x01000003
   1e268:	0002e5ec 	.word	0x0002e5ec
   1e26c:	00031542 	.word	0x00031542
   1e270:	00031564 	.word	0x00031564

0001e274 <bt_smp_sign>:
{
   1e274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   1e276:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1e27a:	af00      	add	r7, sp, #0
   1e27c:	460d      	mov	r5, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   1e27e:	4632      	mov	r2, r6
   1e280:	7a01      	ldrb	r1, [r0, #8]
   1e282:	2008      	movs	r0, #8
   1e284:	f000 fee0 	bl	1f048 <bt_keys_find>
	if (!keys) {
   1e288:	4604      	mov	r4, r0
   1e28a:	b9b8      	cbnz	r0, 1e2bc <bt_smp_sign+0x48>
		BT_ERR("Unable to find local CSRK for %s",
   1e28c:	4630      	mov	r0, r6
   1e28e:	f7f8 ff51 	bl	17134 <bt_addr_le_str_real>
   1e292:	466c      	mov	r4, sp
   1e294:	b088      	sub	sp, #32
   1e296:	466a      	mov	r2, sp
   1e298:	4b20      	ldr	r3, [pc, #128]	; (1e31c <bt_smp_sign+0xa8>)
   1e29a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e29e:	2302      	movs	r3, #2
   1e2a0:	7713      	strb	r3, [r2, #28]
   1e2a2:	4b1f      	ldr	r3, [pc, #124]	; (1e320 <bt_smp_sign+0xac>)
   1e2a4:	481f      	ldr	r0, [pc, #124]	; (1e324 <bt_smp_sign+0xb0>)
   1e2a6:	f842 3f10 	str.w	r3, [r2, #16]!
   1e2aa:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1e2ae:	f00d ff40 	bl	2c132 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
   1e2b2:	f06f 0001 	mvn.w	r0, #1
   1e2b6:	46a5      	mov	sp, r4
}
   1e2b8:	46bd      	mov	sp, r7
   1e2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1e2bc:	210c      	movs	r1, #12
   1e2be:	f105 0008 	add.w	r0, r5, #8
   1e2c2:	f00e fb0f 	bl	2c8e4 <net_buf_simple_add>
	return buf->data + buf->len;
   1e2c6:	89a9      	ldrh	r1, [r5, #12]
   1e2c8:	68ab      	ldr	r3, [r5, #8]
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
   1e2ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1e2cc:	440b      	add	r3, r1
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
   1e2ce:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1e2d2:	f843 2c0c 	str.w	r2, [r3, #-12]
   1e2d6:	89aa      	ldrh	r2, [r5, #12]
   1e2d8:	68a9      	ldr	r1, [r5, #8]
   1e2da:	3a0c      	subs	r2, #12
   1e2dc:	b292      	uxth	r2, r2
   1e2de:	f7fe fff3 	bl	1d2c8 <smp_sign_buf>
	if (err) {
   1e2e2:	b1b0      	cbz	r0, 1e312 <bt_smp_sign+0x9e>
		BT_ERR("Unable to create signature for %s",
   1e2e4:	4630      	mov	r0, r6
   1e2e6:	f7f8 ff25 	bl	17134 <bt_addr_le_str_real>
   1e2ea:	466c      	mov	r4, sp
   1e2ec:	b088      	sub	sp, #32
   1e2ee:	466a      	mov	r2, sp
   1e2f0:	4b0d      	ldr	r3, [pc, #52]	; (1e328 <bt_smp_sign+0xb4>)
   1e2f2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e2f6:	2302      	movs	r3, #2
   1e2f8:	7713      	strb	r3, [r2, #28]
   1e2fa:	4b09      	ldr	r3, [pc, #36]	; (1e320 <bt_smp_sign+0xac>)
   1e2fc:	4809      	ldr	r0, [pc, #36]	; (1e324 <bt_smp_sign+0xb0>)
   1e2fe:	f842 3f10 	str.w	r3, [r2, #16]!
   1e302:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1e306:	f00d ff14 	bl	2c132 <z_log_msg_static_create.constprop.0>
		return -EIO;
   1e30a:	f06f 0004 	mvn.w	r0, #4
   1e30e:	46a5      	mov	sp, r4
   1e310:	e7d2      	b.n	1e2b8 <bt_smp_sign+0x44>
	keys->local_csrk.cnt++;
   1e312:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1e314:	3301      	adds	r3, #1
   1e316:	6523      	str	r3, [r4, #80]	; 0x50
	return 0;
   1e318:	e7ce      	b.n	1e2b8 <bt_smp_sign+0x44>
   1e31a:	bf00      	nop
   1e31c:	00031586 	.word	0x00031586
   1e320:	01000003 	.word	0x01000003
   1e324:	0002e5ec 	.word	0x0002e5ec
   1e328:	00031542 	.word	0x00031542

0001e32c <bt_smp_start_security>:
{
   1e32c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1e330:	f890 8003 	ldrb.w	r8, [r0, #3]
   1e334:	f1b8 0f01 	cmp.w	r8, #1
{
   1e338:	4605      	mov	r5, r0
	switch (conn->role) {
   1e33a:	d005      	beq.n	1e348 <bt_smp_start_security+0x1c>
		return -EINVAL;
   1e33c:	f06f 0415 	mvn.w	r4, #21
}
   1e340:	4620      	mov	r0, r4
   1e342:	b003      	add	sp, #12
   1e344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1e348:	f00d fef6 	bl	2c138 <smp_chan_get>
	if (!smp) {
   1e34c:	4606      	mov	r6, r0
   1e34e:	2800      	cmp	r0, #0
   1e350:	f000 80b1 	beq.w	1e4b6 <bt_smp_start_security+0x18a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1e354:	1d07      	adds	r7, r0, #4
   1e356:	2104      	movs	r1, #4
   1e358:	4638      	mov	r0, r7
   1e35a:	f00d fdfa 	bl	2bf52 <atomic_test_bit>
   1e35e:	2800      	cmp	r0, #0
   1e360:	f040 80ac 	bne.w	1e4bc <bt_smp_start_security+0x190>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1e364:	2103      	movs	r1, #3
   1e366:	4638      	mov	r0, r7
   1e368:	f00d fdf3 	bl	2bf52 <atomic_test_bit>
   1e36c:	b110      	cbz	r0, 1e374 <bt_smp_start_security+0x48>
		return -EBUSY;
   1e36e:	f06f 040f 	mvn.w	r4, #15
   1e372:	e7e5      	b.n	1e340 <bt_smp_start_security+0x14>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1e374:	4641      	mov	r1, r8
   1e376:	4638      	mov	r0, r7
   1e378:	f00d fdeb 	bl	2bf52 <atomic_test_bit>
   1e37c:	2800      	cmp	r0, #0
   1e37e:	d1f6      	bne.n	1e36e <bt_smp_start_security+0x42>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1e380:	4630      	mov	r0, r6
   1e382:	f7fe ff2f 	bl	1d1e4 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1e386:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
   1e38a:	7a9b      	ldrb	r3, [r3, #10]
   1e38c:	2b03      	cmp	r3, #3
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1e38e:	4604      	mov	r4, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1e390:	d042      	beq.n	1e418 <bt_smp_start_security+0xec>
   1e392:	d832      	bhi.n	1e3fa <bt_smp_start_security+0xce>
   1e394:	3b01      	subs	r3, #1
   1e396:	2b01      	cmp	r3, #1
   1e398:	d94a      	bls.n	1e430 <bt_smp_start_security+0x104>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1e39a:	210a      	movs	r1, #10
   1e39c:	1d28      	adds	r0, r5, #4
   1e39e:	f00d fdd8 	bl	2bf52 <atomic_test_bit>
   1e3a2:	2800      	cmp	r0, #0
   1e3a4:	d1ca      	bne.n	1e33c <bt_smp_start_security+0x10>
	if (!conn->le.keys) {
   1e3a6:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1e3aa:	b983      	cbnz	r3, 1e3ce <bt_smp_start_security+0xa2>
						     conn->id, &conn->le.dst);
   1e3ac:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1e3b0:	7a29      	ldrb	r1, [r5, #8]
   1e3b2:	4622      	mov	r2, r4
   1e3b4:	2020      	movs	r0, #32
   1e3b6:	f000 fe47 	bl	1f048 <bt_keys_find>
   1e3ba:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   1e3be:	b930      	cbnz	r0, 1e3ce <bt_smp_start_security+0xa2>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1e3c0:	7a29      	ldrb	r1, [r5, #8]
   1e3c2:	4622      	mov	r2, r4
   1e3c4:	2004      	movs	r0, #4
   1e3c6:	f000 fe3f 	bl	1f048 <bt_keys_find>
   1e3ca:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   1e3ce:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1e3d2:	2b00      	cmp	r3, #0
   1e3d4:	d0b2      	beq.n	1e33c <bt_smp_start_security+0x10>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   1e3d6:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   1e3d8:	f012 0f24 	tst.w	r2, #36	; 0x24
   1e3dc:	d0ae      	beq.n	1e33c <bt_smp_start_security+0x10>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   1e3de:	7aa9      	ldrb	r1, [r5, #10]
   1e3e0:	2902      	cmp	r1, #2
   1e3e2:	d925      	bls.n	1e430 <bt_smp_start_security+0x104>
   1e3e4:	7b58      	ldrb	r0, [r3, #13]
   1e3e6:	07c0      	lsls	r0, r0, #31
   1e3e8:	d5a8      	bpl.n	1e33c <bt_smp_start_security+0x10>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   1e3ea:	2903      	cmp	r1, #3
   1e3ec:	d020      	beq.n	1e430 <bt_smp_start_security+0x104>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   1e3ee:	0692      	lsls	r2, r2, #26
   1e3f0:	d5a4      	bpl.n	1e33c <bt_smp_start_security+0x10>
   1e3f2:	7b1b      	ldrb	r3, [r3, #12]
   1e3f4:	2b10      	cmp	r3, #16
   1e3f6:	d1a1      	bne.n	1e33c <bt_smp_start_security+0x10>
   1e3f8:	e01a      	b.n	1e430 <bt_smp_start_security+0x104>
	switch (smp->chan.chan.conn->required_sec_level) {
   1e3fa:	2b04      	cmp	r3, #4
   1e3fc:	d1cd      	bne.n	1e39a <bt_smp_start_security+0x6e>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1e3fe:	4630      	mov	r0, r6
   1e400:	f7fe ff0e 	bl	1d220 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1e404:	2803      	cmp	r0, #3
   1e406:	d102      	bne.n	1e40e <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1e408:	b1fc      	cbz	r4, 1e44a <bt_smp_start_security+0x11e>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1e40a:	68e4      	ldr	r4, [r4, #12]
   1e40c:	b10c      	cbz	r4, 1e412 <bt_smp_start_security+0xe6>
   1e40e:	4b2d      	ldr	r3, [pc, #180]	; (1e4c4 <bt_smp_start_security+0x198>)
   1e410:	781c      	ldrb	r4, [r3, #0]
   1e412:	f004 0401 	and.w	r4, r4, #1
   1e416:	e009      	b.n	1e42c <bt_smp_start_security+0x100>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1e418:	4630      	mov	r0, r6
   1e41a:	f7fe ff01 	bl	1d220 <get_io_capa>
   1e41e:	2803      	cmp	r0, #3
   1e420:	d111      	bne.n	1e446 <bt_smp_start_security+0x11a>
   1e422:	b11c      	cbz	r4, 1e42c <bt_smp_start_security+0x100>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1e424:	68e4      	ldr	r4, [r4, #12]
   1e426:	3c00      	subs	r4, #0
   1e428:	bf18      	it	ne
   1e42a:	2401      	movne	r4, #1
	if (!(sec_level_reachable(smp) || smp_keys_check(conn))) {
   1e42c:	2c00      	cmp	r4, #0
   1e42e:	d0b4      	beq.n	1e39a <bt_smp_start_security+0x6e>
	if (!conn->le.keys) {
   1e430:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   1e434:	b15b      	cbz	r3, 1e44e <bt_smp_start_security+0x122>
	if (smp_init(smp) != 0) {
   1e436:	4630      	mov	r0, r6
   1e438:	f7fe ffc6 	bl	1d3c8 <smp_init>
   1e43c:	4604      	mov	r4, r0
   1e43e:	b190      	cbz	r0, 1e466 <bt_smp_start_security+0x13a>
		return -ENOBUFS;
   1e440:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1e444:	e77c      	b.n	1e340 <bt_smp_start_security+0x14>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1e446:	4644      	mov	r4, r8
   1e448:	e7f0      	b.n	1e42c <bt_smp_start_security+0x100>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1e44a:	2400      	movs	r4, #0
   1e44c:	e7e1      	b.n	1e412 <bt_smp_start_security+0xe6>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1e44e:	7a28      	ldrb	r0, [r5, #8]
   1e450:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1e454:	f000 fd88 	bl	1ef68 <bt_keys_get_addr>
   1e458:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   1e45c:	2800      	cmp	r0, #0
   1e45e:	d1ea      	bne.n	1e436 <bt_smp_start_security+0x10a>
			return -ENOMEM;
   1e460:	f06f 040b 	mvn.w	r4, #11
   1e464:	e76c      	b.n	1e340 <bt_smp_start_security+0x14>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1e466:	210b      	movs	r1, #11
   1e468:	4630      	mov	r0, r6
   1e46a:	f00d fe84 	bl	2c176 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1e46e:	4680      	mov	r8, r0
   1e470:	2800      	cmp	r0, #0
   1e472:	d0e5      	beq.n	1e440 <bt_smp_start_security+0x114>
	return net_buf_simple_add(&buf->b, len);
   1e474:	2101      	movs	r1, #1
   1e476:	3008      	adds	r0, #8
   1e478:	f00e fa34 	bl	2c8e4 <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1e47c:	2109      	movs	r1, #9
   1e47e:	4681      	mov	r9, r0
   1e480:	4630      	mov	r0, r6
   1e482:	f7fe fef1 	bl	1d268 <get_auth>
   1e486:	4623      	mov	r3, r4
   1e488:	f889 0000 	strb.w	r0, [r9]
   1e48c:	4642      	mov	r2, r8
   1e48e:	9400      	str	r4, [sp, #0]
   1e490:	2106      	movs	r1, #6
   1e492:	4628      	mov	r0, r5
   1e494:	f00c fcb2 	bl	2adfc <bt_l2cap_send_cb>
	if (err) {
   1e498:	4604      	mov	r4, r0
   1e49a:	b118      	cbz	r0, 1e4a4 <bt_smp_start_security+0x178>
		net_buf_unref(req_buf);
   1e49c:	4640      	mov	r0, r8
   1e49e:	f001 f869 	bl	1f574 <net_buf_unref>
		return err;
   1e4a2:	e74d      	b.n	1e340 <bt_smp_start_security+0x14>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1e4a4:	4638      	mov	r0, r7
   1e4a6:	210f      	movs	r1, #15
   1e4a8:	f00d fe51 	bl	2c14e <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1e4ac:	2101      	movs	r1, #1
   1e4ae:	4630      	mov	r0, r6
   1e4b0:	f00d fe4d 	bl	2c14e <atomic_set_bit>
	return 0;
   1e4b4:	e744      	b.n	1e340 <bt_smp_start_security+0x14>
		return -ENOTCONN;
   1e4b6:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1e4ba:	e741      	b.n	1e340 <bt_smp_start_security+0x14>
		return -EIO;
   1e4bc:	f06f 0404 	mvn.w	r4, #4
   1e4c0:	e73e      	b.n	1e340 <bt_smp_start_security+0x14>
   1e4c2:	bf00      	nop
   1e4c4:	20006c30 	.word	0x20006c30

0001e4c8 <smp_pairing_complete>:
{
   1e4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1e4ca:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
{
   1e4ce:	4606      	mov	r6, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1e4d0:	1d05      	adds	r5, r0, #4
	if (!status) {
   1e4d2:	b9f1      	cbnz	r1, 1e512 <smp_pairing_complete+0x4a>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1e4d4:	210d      	movs	r1, #13
   1e4d6:	4628      	mov	r0, r5
   1e4d8:	f00d fd3b 	bl	2bf52 <atomic_test_bit>
		if (bond_flag) {
   1e4dc:	4607      	mov	r7, r0
   1e4de:	b118      	cbz	r0, 1e4e8 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   1e4e0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1e4e4:	f000 ff36 	bl	1f354 <bt_keys_store>
	return list->head;
   1e4e8:	4b31      	ldr	r3, [pc, #196]	; (1e5b0 <smp_pairing_complete+0xe8>)
   1e4ea:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1e4ec:	2b00      	cmp	r3, #0
   1e4ee:	d051      	beq.n	1e594 <smp_pairing_complete+0xcc>
	return node->next;
   1e4f0:	f853 590c 	ldr.w	r5, [r3], #-12
   1e4f4:	b105      	cbz	r5, 1e4f8 <smp_pairing_complete+0x30>
   1e4f6:	3d0c      	subs	r5, #12
			if (listener->pairing_complete) {
   1e4f8:	681b      	ldr	r3, [r3, #0]
   1e4fa:	b113      	cbz	r3, 1e502 <smp_pairing_complete+0x3a>
				listener->pairing_complete(conn, bond_flag);
   1e4fc:	4639      	mov	r1, r7
   1e4fe:	4620      	mov	r0, r4
   1e500:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1e502:	2d00      	cmp	r5, #0
   1e504:	d046      	beq.n	1e594 <smp_pairing_complete+0xcc>
   1e506:	68ea      	ldr	r2, [r5, #12]
   1e508:	b102      	cbz	r2, 1e50c <smp_pairing_complete+0x44>
   1e50a:	3a0c      	subs	r2, #12
{
   1e50c:	462b      	mov	r3, r5
   1e50e:	4615      	mov	r5, r2
   1e510:	e7f2      	b.n	1e4f8 <smp_pairing_complete+0x30>
	switch (smp_err) {
   1e512:	3901      	subs	r1, #1
   1e514:	b2c9      	uxtb	r1, r1
   1e516:	290e      	cmp	r1, #14
   1e518:	bf9c      	itt	ls
   1e51a:	4b26      	ldrls	r3, [pc, #152]	; (1e5b4 <smp_pairing_complete+0xec>)
   1e51c:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   1e51e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   1e522:	bf88      	it	hi
   1e524:	2709      	movhi	r7, #9
		if (conn->le.keys &&
   1e526:	b143      	cbz	r3, 1e53a <smp_pairing_complete+0x72>
   1e528:	7b1b      	ldrb	r3, [r3, #12]
   1e52a:	bb63      	cbnz	r3, 1e586 <smp_pairing_complete+0xbe>
			bt_keys_clear(conn->le.keys);
   1e52c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1e530:	f000 fdea 	bl	1f108 <bt_keys_clear>
			conn->le.keys = NULL;
   1e534:	2300      	movs	r3, #0
   1e536:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1e53a:	2102      	movs	r1, #2
   1e53c:	4628      	mov	r0, r5
   1e53e:	f00d fd08 	bl	2bf52 <atomic_test_bit>
   1e542:	b940      	cbnz	r0, 1e556 <smp_pairing_complete+0x8e>
	switch (err) {
   1e544:	2f07      	cmp	r7, #7
   1e546:	bf96      	itet	ls
   1e548:	4b1b      	ldrls	r3, [pc, #108]	; (1e5b8 <smp_pairing_complete+0xf0>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1e54a:	211f      	movhi	r1, #31
   1e54c:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
   1e54e:	463a      	mov	r2, r7
   1e550:	4620      	mov	r0, r4
   1e552:	f7fb fddf 	bl	1a114 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1e556:	2103      	movs	r1, #3
   1e558:	4628      	mov	r0, r5
   1e55a:	f00d fcfa 	bl	2bf52 <atomic_test_bit>
   1e55e:	b1c8      	cbz	r0, 1e594 <smp_pairing_complete+0xcc>
	return list->head;
   1e560:	4b13      	ldr	r3, [pc, #76]	; (1e5b0 <smp_pairing_complete+0xe8>)
   1e562:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1e564:	b1b3      	cbz	r3, 1e594 <smp_pairing_complete+0xcc>
	return node->next;
   1e566:	f853 590c 	ldr.w	r5, [r3], #-12
   1e56a:	b105      	cbz	r5, 1e56e <smp_pairing_complete+0xa6>
   1e56c:	3d0c      	subs	r5, #12
				if (listener->pairing_failed) {
   1e56e:	685b      	ldr	r3, [r3, #4]
   1e570:	b113      	cbz	r3, 1e578 <smp_pairing_complete+0xb0>
					listener->pairing_failed(conn, security_err);
   1e572:	4639      	mov	r1, r7
   1e574:	4620      	mov	r0, r4
   1e576:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1e578:	b165      	cbz	r5, 1e594 <smp_pairing_complete+0xcc>
   1e57a:	68ea      	ldr	r2, [r5, #12]
   1e57c:	b102      	cbz	r2, 1e580 <smp_pairing_complete+0xb8>
   1e57e:	3a0c      	subs	r2, #12
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1e580:	462b      	mov	r3, r5
   1e582:	4615      	mov	r5, r2
   1e584:	e7f3      	b.n	1e56e <smp_pairing_complete+0xa6>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1e586:	2102      	movs	r1, #2
   1e588:	4628      	mov	r0, r5
   1e58a:	f00d fce2 	bl	2bf52 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1e58e:	2800      	cmp	r0, #0
   1e590:	d1cc      	bne.n	1e52c <smp_pairing_complete+0x64>
   1e592:	e7d2      	b.n	1e53a <smp_pairing_complete+0x72>
	smp_reset(smp);
   1e594:	4630      	mov	r0, r6
   1e596:	f00d fe8d 	bl	2c2b4 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1e59a:	7a62      	ldrb	r2, [r4, #9]
   1e59c:	7aa3      	ldrb	r3, [r4, #10]
   1e59e:	429a      	cmp	r2, r3
   1e5a0:	d004      	beq.n	1e5ac <smp_pairing_complete+0xe4>
		bt_smp_start_security(conn);
   1e5a2:	4620      	mov	r0, r4
}
   1e5a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1e5a8:	f7ff bec0 	b.w	1e32c <bt_smp_start_security>
}
   1e5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e5ae:	bf00      	nop
   1e5b0:	20005b6c 	.word	0x20005b6c
   1e5b4:	00031772 	.word	0x00031772
   1e5b8:	0003178a 	.word	0x0003178a

0001e5bc <bt_smp_recv>:
{
   1e5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e5c0:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   1e5c2:	898b      	ldrh	r3, [r1, #12]
{
   1e5c4:	af00      	add	r7, sp, #0
   1e5c6:	4680      	mov	r8, r0
   1e5c8:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1e5ca:	b97b      	cbnz	r3, 1e5ec <bt_smp_recv+0x30>
		BT_ERR("Too small SMP PDU received");
   1e5cc:	4b44      	ldr	r3, [pc, #272]	; (1e6e0 <bt_smp_recv+0x124>)
   1e5ce:	617b      	str	r3, [r7, #20]
   1e5d0:	4844      	ldr	r0, [pc, #272]	; (1e6e4 <bt_smp_recv+0x128>)
   1e5d2:	2302      	movs	r3, #2
   1e5d4:	f107 0210 	add.w	r2, r7, #16
   1e5d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e5dc:	613b      	str	r3, [r7, #16]
   1e5de:	f00d fda8 	bl	2c132 <z_log_msg_static_create.constprop.0>
}
   1e5e2:	2000      	movs	r0, #0
   1e5e4:	3718      	adds	r7, #24
   1e5e6:	46bd      	mov	sp, r7
   1e5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1e5ec:	2101      	movs	r1, #1
   1e5ee:	f105 0008 	add.w	r0, r5, #8
   1e5f2:	f00e f99e 	bl	2c932 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1e5f6:	2104      	movs	r1, #4
   1e5f8:	4606      	mov	r6, r0
   1e5fa:	f1a8 00e8 	sub.w	r0, r8, #232	; 0xe8
   1e5fe:	f00d fca8 	bl	2bf52 <atomic_test_bit>
   1e602:	f1a8 04ec 	sub.w	r4, r8, #236	; 0xec
   1e606:	7831      	ldrb	r1, [r6, #0]
   1e608:	b178      	cbz	r0, 1e62a <bt_smp_recv+0x6e>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1e60a:	466c      	mov	r4, sp
   1e60c:	b088      	sub	sp, #32
   1e60e:	466a      	mov	r2, sp
   1e610:	4b35      	ldr	r3, [pc, #212]	; (1e6e8 <bt_smp_recv+0x12c>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1e612:	4834      	ldr	r0, [pc, #208]	; (1e6e4 <bt_smp_recv+0x128>)
   1e614:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1e618:	2303      	movs	r3, #3
   1e61a:	f842 3f10 	str.w	r3, [r2, #16]!
   1e61e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1e622:	f00d fd86 	bl	2c132 <z_log_msg_static_create.constprop.0>
   1e626:	46a5      	mov	sp, r4
		return 0;
   1e628:	e7db      	b.n	1e5e2 <bt_smp_recv+0x26>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1e62a:	290e      	cmp	r1, #14
   1e62c:	d904      	bls.n	1e638 <bt_smp_recv+0x7c>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1e62e:	466c      	mov	r4, sp
   1e630:	b088      	sub	sp, #32
   1e632:	466a      	mov	r2, sp
   1e634:	4b2d      	ldr	r3, [pc, #180]	; (1e6ec <bt_smp_recv+0x130>)
   1e636:	e7ec      	b.n	1e612 <bt_smp_recv+0x56>
	if (!handlers[hdr->code].func) {
   1e638:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1e6f0 <bt_smp_recv+0x134>
   1e63c:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   1e640:	b99b      	cbnz	r3, 1e66a <bt_smp_recv+0xae>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1e642:	466d      	mov	r5, sp
   1e644:	b088      	sub	sp, #32
   1e646:	466a      	mov	r2, sp
   1e648:	4b2a      	ldr	r3, [pc, #168]	; (1e6f4 <bt_smp_recv+0x138>)
   1e64a:	4826      	ldr	r0, [pc, #152]	; (1e6e4 <bt_smp_recv+0x128>)
   1e64c:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1e650:	2303      	movs	r3, #3
   1e652:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1e656:	f842 3f10 	str.w	r3, [r2, #16]!
   1e65a:	f00d fd6a 	bl	2c132 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1e65e:	2107      	movs	r1, #7
   1e660:	46ad      	mov	sp, r5
		smp_error(smp, err);
   1e662:	4620      	mov	r0, r4
   1e664:	f00d ffa3 	bl	2c5ae <smp_error>
   1e668:	e7bb      	b.n	1e5e2 <bt_smp_recv+0x26>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1e66a:	4620      	mov	r0, r4
   1e66c:	f00d fe0a 	bl	2c284 <atomic_test_and_clear_bit>
   1e670:	7833      	ldrb	r3, [r6, #0]
   1e672:	b998      	cbnz	r0, 1e69c <bt_smp_recv+0xe0>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1e674:	466d      	mov	r5, sp
   1e676:	b088      	sub	sp, #32
   1e678:	466a      	mov	r2, sp
   1e67a:	491f      	ldr	r1, [pc, #124]	; (1e6f8 <bt_smp_recv+0x13c>)
   1e67c:	4819      	ldr	r0, [pc, #100]	; (1e6e4 <bt_smp_recv+0x128>)
   1e67e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1e682:	2303      	movs	r3, #3
   1e684:	f842 3f10 	str.w	r3, [r2, #16]!
   1e688:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1e68c:	f00d fd51 	bl	2c132 <z_log_msg_static_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1e690:	7833      	ldrb	r3, [r6, #0]
   1e692:	2b05      	cmp	r3, #5
   1e694:	46ad      	mov	sp, r5
   1e696:	d0a4      	beq.n	1e5e2 <bt_smp_recv+0x26>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1e698:	2108      	movs	r1, #8
   1e69a:	e7e2      	b.n	1e662 <bt_smp_recv+0xa6>
	if (buf->len != handlers[hdr->code].expect_len) {
   1e69c:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1e6a0:	89a9      	ldrh	r1, [r5, #12]
   1e6a2:	7912      	ldrb	r2, [r2, #4]
   1e6a4:	428a      	cmp	r2, r1
   1e6a6:	d011      	beq.n	1e6cc <bt_smp_recv+0x110>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1e6a8:	466d      	mov	r5, sp
   1e6aa:	b088      	sub	sp, #32
   1e6ac:	466a      	mov	r2, sp
   1e6ae:	4813      	ldr	r0, [pc, #76]	; (1e6fc <bt_smp_recv+0x140>)
   1e6b0:	61d3      	str	r3, [r2, #28]
   1e6b2:	2304      	movs	r3, #4
   1e6b4:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1e6b8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e6bc:	f842 3f10 	str.w	r3, [r2, #16]!
   1e6c0:	4808      	ldr	r0, [pc, #32]	; (1e6e4 <bt_smp_recv+0x128>)
   1e6c2:	f00d fd36 	bl	2c132 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1e6c6:	210a      	movs	r1, #10
   1e6c8:	46ad      	mov	sp, r5
   1e6ca:	e7ca      	b.n	1e662 <bt_smp_recv+0xa6>
	err = handlers[hdr->code].func(smp, buf);
   1e6cc:	4629      	mov	r1, r5
   1e6ce:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
   1e6d2:	4620      	mov	r0, r4
   1e6d4:	4798      	blx	r3
	if (err) {
   1e6d6:	4601      	mov	r1, r0
   1e6d8:	2800      	cmp	r0, #0
   1e6da:	d082      	beq.n	1e5e2 <bt_smp_recv+0x26>
   1e6dc:	e7c1      	b.n	1e662 <bt_smp_recv+0xa6>
   1e6de:	bf00      	nop
   1e6e0:	000315a7 	.word	0x000315a7
   1e6e4:	0002e5ec 	.word	0x0002e5ec
   1e6e8:	000315c2 	.word	0x000315c2
   1e6ec:	000315f3 	.word	0x000315f3
   1e6f0:	0002f0f0 	.word	0x0002f0f0
   1e6f4:	00031615 	.word	0x00031615
   1e6f8:	0003162f 	.word	0x0003162f
   1e6fc:	00030f9e 	.word	0x00030f9e

0001e700 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1e700:	4b0e      	ldr	r3, [pc, #56]	; (1e73c <bt_smp_pkey_ready+0x3c>)
{
   1e702:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1e704:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1e706:	b918      	cbnz	r0, 1e710 <bt_smp_pkey_ready+0x10>
}
   1e708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e70c:	f7fe bdca 	b.w	1d2a4 <bt_smp_pkey_ready.part.0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e710:	4c0b      	ldr	r4, [pc, #44]	; (1e740 <bt_smp_pkey_ready+0x40>)
	z_impl_k_sem_give(sem);
   1e712:	480c      	ldr	r0, [pc, #48]	; (1e744 <bt_smp_pkey_ready+0x44>)
   1e714:	f004 feee 	bl	234f4 <z_impl_k_sem_give>
   1e718:	f3bf 8f5b 	dmb	ish
   1e71c:	6863      	ldr	r3, [r4, #4]
   1e71e:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1e722:	065b      	lsls	r3, r3, #25
   1e724:	d509      	bpl.n	1e73a <bt_smp_pkey_ready+0x3a>
		err = smp_public_key_periph(smp);
   1e726:	4620      	mov	r0, r4
   1e728:	f7ff fa54 	bl	1dbd4 <smp_public_key_periph>
		if (err) {
   1e72c:	4601      	mov	r1, r0
   1e72e:	b120      	cbz	r0, 1e73a <bt_smp_pkey_ready+0x3a>
			smp_error(smp, err);
   1e730:	4620      	mov	r0, r4
}
   1e732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   1e736:	f00d bf3a 	b.w	2c5ae <smp_error>
}
   1e73a:	bd10      	pop	{r4, pc}
   1e73c:	20005cd8 	.word	0x20005cd8
   1e740:	200021b8 	.word	0x200021b8
   1e744:	20000bb8 	.word	0x20000bb8

0001e748 <smp_signing_info>:
{
   1e748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e74c:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1e74e:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   1e752:	af00      	add	r7, sp, #0
   1e754:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e756:	210d      	movs	r1, #13
   1e758:	3004      	adds	r0, #4
   1e75a:	f00d fbfa 	bl	2bf52 <atomic_test_bit>
   1e75e:	b358      	cbz	r0, 1e7b8 <smp_signing_info+0x70>
					&conn->le.dst);
   1e760:	f108 0688 	add.w	r6, r8, #136	; 0x88
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   1e764:	f898 1008 	ldrb.w	r1, [r8, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
   1e768:	689d      	ldr	r5, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   1e76a:	4632      	mov	r2, r6
   1e76c:	2010      	movs	r0, #16
   1e76e:	f00d ffff 	bl	2c770 <bt_keys_get_type>
		if (!keys) {
   1e772:	b9b8      	cbnz	r0, 1e7a4 <smp_signing_info+0x5c>
			BT_ERR("Unable to get keys for %s",
   1e774:	4630      	mov	r0, r6
   1e776:	f7f8 fcdd 	bl	17134 <bt_addr_le_str_real>
   1e77a:	466c      	mov	r4, sp
   1e77c:	b088      	sub	sp, #32
   1e77e:	466a      	mov	r2, sp
   1e780:	4b15      	ldr	r3, [pc, #84]	; (1e7d8 <smp_signing_info+0x90>)
   1e782:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e786:	2302      	movs	r3, #2
   1e788:	7713      	strb	r3, [r2, #28]
   1e78a:	4b14      	ldr	r3, [pc, #80]	; (1e7dc <smp_signing_info+0x94>)
   1e78c:	4814      	ldr	r0, [pc, #80]	; (1e7e0 <smp_signing_info+0x98>)
   1e78e:	f842 3f10 	str.w	r3, [r2, #16]!
   1e792:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1e796:	f00d fccc 	bl	2c132 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1e79a:	2008      	movs	r0, #8
   1e79c:	46a5      	mov	sp, r4
}
   1e79e:	46bd      	mov	sp, r7
   1e7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e7a4:	462b      	mov	r3, r5
   1e7a6:	3054      	adds	r0, #84	; 0x54
   1e7a8:	f105 0210 	add.w	r2, r5, #16
   1e7ac:	f853 1b04 	ldr.w	r1, [r3], #4
   1e7b0:	f840 1b04 	str.w	r1, [r0], #4
   1e7b4:	4293      	cmp	r3, r2
   1e7b6:	d1f9      	bne.n	1e7ac <smp_signing_info+0x64>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
   1e7b8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1e7bc:	f023 0304 	bic.w	r3, r3, #4
   1e7c0:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (!smp->local_dist && !smp->remote_dist) {
   1e7c4:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1e7c8:	b91d      	cbnz	r5, 1e7d2 <smp_signing_info+0x8a>
		smp_pairing_complete(smp, 0);
   1e7ca:	4629      	mov	r1, r5
   1e7cc:	4620      	mov	r0, r4
   1e7ce:	f7ff fe7b 	bl	1e4c8 <smp_pairing_complete>
	return 0;
   1e7d2:	2000      	movs	r0, #0
   1e7d4:	e7e3      	b.n	1e79e <smp_signing_info+0x56>
   1e7d6:	bf00      	nop
   1e7d8:	000313f7 	.word	0x000313f7
   1e7dc:	01000003 	.word	0x01000003
   1e7e0:	0002e5ec 	.word	0x0002e5ec

0001e7e4 <smp_ident_addr_info>:
{
   1e7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1e7e8:	f8d1 8008 	ldr.w	r8, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1e7ec:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1e7f0:	f898 3000 	ldrb.w	r3, [r8]
{
   1e7f4:	af00      	add	r7, sp, #0
   1e7f6:	4604      	mov	r4, r0
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1e7f8:	f105 0988 	add.w	r9, r5, #136	; 0x88
   1e7fc:	b3a3      	cbz	r3, 1e868 <smp_ident_addr_info+0x84>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1e7fe:	f898 3006 	ldrb.w	r3, [r8, #6]
   1e802:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e806:	2bc0      	cmp	r3, #192	; 0xc0
   1e808:	d02e      	beq.n	1e868 <smp_ident_addr_info+0x84>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1e80a:	4640      	mov	r0, r8
   1e80c:	f7f8 fc92 	bl	17134 <bt_addr_le_str_real>
   1e810:	466e      	mov	r6, sp
   1e812:	b088      	sub	sp, #32
   1e814:	466c      	mov	r4, sp
   1e816:	4b50      	ldr	r3, [pc, #320]	; (1e958 <smp_ident_addr_info+0x174>)
   1e818:	f8df 8140 	ldr.w	r8, [pc, #320]	; 1e95c <smp_ident_addr_info+0x178>
   1e81c:	4625      	mov	r5, r4
   1e81e:	f04f 0a02 	mov.w	sl, #2
   1e822:	e9c4 3005 	strd	r3, r0, [r4, #20]
   1e826:	f884 a01c 	strb.w	sl, [r4, #28]
   1e82a:	f845 8f10 	str.w	r8, [r5, #16]!
   1e82e:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1e832:	462a      	mov	r2, r5
   1e834:	484a      	ldr	r0, [pc, #296]	; (1e960 <smp_ident_addr_info+0x17c>)
   1e836:	f00d fc7c 	bl	2c132 <z_log_msg_static_create.constprop.0>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1e83a:	4648      	mov	r0, r9
   1e83c:	46b5      	mov	sp, r6
   1e83e:	f7f8 fc79 	bl	17134 <bt_addr_le_str_real>
   1e842:	46a5      	mov	sp, r4
   1e844:	4b47      	ldr	r3, [pc, #284]	; (1e964 <smp_ident_addr_info+0x180>)
   1e846:	f884 a01c 	strb.w	sl, [r4, #28]
   1e84a:	e9c4 3005 	strd	r3, r0, [r4, #20]
   1e84e:	f8c4 8010 	str.w	r8, [r4, #16]
   1e852:	4843      	ldr	r0, [pc, #268]	; (1e960 <smp_ident_addr_info+0x17c>)
   1e854:	462a      	mov	r2, r5
   1e856:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1e85a:	f00d fc6a 	bl	2c132 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   1e85e:	200a      	movs	r0, #10
   1e860:	46b5      	mov	sp, r6
}
   1e862:	46bd      	mov	sp, r7
   1e864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return memcmp(a, b, sizeof(*a));
   1e868:	2207      	movs	r2, #7
   1e86a:	4641      	mov	r1, r8
   1e86c:	4648      	mov	r0, r9
   1e86e:	f00f faa3 	bl	2ddb8 <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   1e872:	b168      	cbz	r0, 1e890 <smp_ident_addr_info+0xac>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1e874:	7a28      	ldrb	r0, [r5, #8]
   1e876:	4641      	mov	r1, r8
   1e878:	f000 fc36 	bl	1f0e8 <bt_keys_find_addr>
		if (keys) {
   1e87c:	4606      	mov	r6, r0
   1e87e:	b138      	cbz	r0, 1e890 <smp_ident_addr_info+0xac>
			if (!update_keys_check(smp, keys)) {
   1e880:	4601      	mov	r1, r0
   1e882:	4620      	mov	r0, r4
   1e884:	f00d fb6e 	bl	2bf64 <update_keys_check>
   1e888:	b318      	cbz	r0, 1e8d2 <smp_ident_addr_info+0xee>
			bt_keys_clear(keys);
   1e88a:	4630      	mov	r0, r6
   1e88c:	f000 fc3c 	bl	1f108 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e890:	210d      	movs	r1, #13
   1e892:	1d20      	adds	r0, r4, #4
   1e894:	f00d fb5d 	bl	2bf52 <atomic_test_bit>
   1e898:	2800      	cmp	r0, #0
   1e89a:	d045      	beq.n	1e928 <smp_ident_addr_info+0x144>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1e89c:	7a29      	ldrb	r1, [r5, #8]
   1e89e:	464a      	mov	r2, r9
   1e8a0:	2002      	movs	r0, #2
   1e8a2:	f00d ff65 	bl	2c770 <bt_keys_get_type>
		if (!keys) {
   1e8a6:	4606      	mov	r6, r0
   1e8a8:	b9a8      	cbnz	r0, 1e8d6 <smp_ident_addr_info+0xf2>
			BT_ERR("Unable to get keys for %s",
   1e8aa:	4648      	mov	r0, r9
   1e8ac:	f7f8 fc42 	bl	17134 <bt_addr_le_str_real>
   1e8b0:	466c      	mov	r4, sp
   1e8b2:	b088      	sub	sp, #32
   1e8b4:	466a      	mov	r2, sp
   1e8b6:	4b2c      	ldr	r3, [pc, #176]	; (1e968 <smp_ident_addr_info+0x184>)
   1e8b8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e8bc:	2302      	movs	r3, #2
   1e8be:	7713      	strb	r3, [r2, #28]
   1e8c0:	4b26      	ldr	r3, [pc, #152]	; (1e95c <smp_ident_addr_info+0x178>)
   1e8c2:	f842 3f10 	str.w	r3, [r2, #16]!
   1e8c6:	4826      	ldr	r0, [pc, #152]	; (1e960 <smp_ident_addr_info+0x17c>)
   1e8c8:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1e8cc:	f00d fc31 	bl	2c132 <z_log_msg_static_create.constprop.0>
   1e8d0:	46a5      	mov	sp, r4
				return BT_SMP_ERR_UNSPECIFIED;
   1e8d2:	2008      	movs	r0, #8
   1e8d4:	e7c5      	b.n	1e862 <smp_ident_addr_info+0x7e>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1e8d6:	78eb      	ldrb	r3, [r5, #3]
   1e8d8:	bbdb      	cbnz	r3, 1e952 <smp_ident_addr_info+0x16e>
			dst = &conn->le.resp_addr;
   1e8da:	f105 0396 	add.w	r3, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1e8de:	781a      	ldrb	r2, [r3, #0]
   1e8e0:	2a01      	cmp	r2, #1
   1e8e2:	d11e      	bne.n	1e922 <smp_ident_addr_info+0x13e>
		if (bt_addr_le_is_rpa(dst)) {
   1e8e4:	799a      	ldrb	r2, [r3, #6]
   1e8e6:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1e8ea:	2a40      	cmp	r2, #64	; 0x40
   1e8ec:	d119      	bne.n	1e922 <smp_ident_addr_info+0x13e>
   1e8ee:	f8d3 2001 	ldr.w	r2, [r3, #1]
   1e8f2:	f8c6 203a 	str.w	r2, [r6, #58]	; 0x3a
   1e8f6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   1e8fa:	87f3      	strh	r3, [r6, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1e8fc:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   1e900:	b17b      	cbz	r3, 1e922 <smp_ident_addr_info+0x13e>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1e902:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   1e906:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e90a:	2bc0      	cmp	r3, #192	; 0xc0
   1e90c:	d009      	beq.n	1e922 <smp_ident_addr_info+0x13e>
				bt_addr_le_copy(&keys->addr, &req->addr);
   1e90e:	4641      	mov	r1, r8
   1e910:	1c70      	adds	r0, r6, #1
   1e912:	f00d fb99 	bl	2c048 <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
   1e916:	4648      	mov	r0, r9
   1e918:	f00d fb96 	bl	2c048 <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
   1e91c:	4628      	mov	r0, r5
   1e91e:	f7fb fbcb 	bl	1a0b8 <bt_conn_identity_resolved>
		bt_id_add(keys);
   1e922:	4630      	mov	r0, r6
   1e924:	f7fa fcae 	bl	19284 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1e928:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1e92c:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1e930:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1e932:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1e936:	d503      	bpl.n	1e940 <smp_ident_addr_info+0x15c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1e938:	210a      	movs	r1, #10
   1e93a:	4620      	mov	r0, r4
   1e93c:	f00d fc07 	bl	2c14e <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1e940:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1e944:	b91d      	cbnz	r5, 1e94e <smp_ident_addr_info+0x16a>
		smp_pairing_complete(smp, 0);
   1e946:	4629      	mov	r1, r5
   1e948:	4620      	mov	r0, r4
   1e94a:	f7ff fdbd 	bl	1e4c8 <smp_pairing_complete>
	return 0;
   1e94e:	2000      	movs	r0, #0
   1e950:	e787      	b.n	1e862 <smp_ident_addr_info+0x7e>
			dst = &conn->le.init_addr;
   1e952:	f105 038f 	add.w	r3, r5, #143	; 0x8f
   1e956:	e7c2      	b.n	1e8de <smp_ident_addr_info+0xfa>
   1e958:	0003164a 	.word	0x0003164a
   1e95c:	01000003 	.word	0x01000003
   1e960:	0002e5ec 	.word	0x0002e5ec
   1e964:	0003153a 	.word	0x0003153a
   1e968:	000313f7 	.word	0x000313f7

0001e96c <smp_central_ident>:
{
   1e96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e970:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1e972:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   1e976:	af00      	add	r7, sp, #0
   1e978:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e97a:	210d      	movs	r1, #13
   1e97c:	3004      	adds	r0, #4
   1e97e:	f00d fae8 	bl	2bf52 <atomic_test_bit>
   1e982:	b350      	cbz	r0, 1e9da <smp_central_ident+0x6e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1e984:	f108 0688 	add.w	r6, r8, #136	; 0x88
   1e988:	f898 1008 	ldrb.w	r1, [r8, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1e98c:	689d      	ldr	r5, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1e98e:	4632      	mov	r2, r6
   1e990:	2004      	movs	r0, #4
   1e992:	f00d feed 	bl	2c770 <bt_keys_get_type>
		if (!keys) {
   1e996:	b9b8      	cbnz	r0, 1e9c8 <smp_central_ident+0x5c>
			BT_ERR("Unable to get keys for %s",
   1e998:	4630      	mov	r0, r6
   1e99a:	f7f8 fbcb 	bl	17134 <bt_addr_le_str_real>
   1e99e:	466c      	mov	r4, sp
   1e9a0:	b088      	sub	sp, #32
   1e9a2:	466a      	mov	r2, sp
   1e9a4:	4b19      	ldr	r3, [pc, #100]	; (1ea0c <smp_central_ident+0xa0>)
   1e9a6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e9aa:	2302      	movs	r3, #2
   1e9ac:	7713      	strb	r3, [r2, #28]
   1e9ae:	4b18      	ldr	r3, [pc, #96]	; (1ea10 <smp_central_ident+0xa4>)
   1e9b0:	4818      	ldr	r0, [pc, #96]	; (1ea14 <smp_central_ident+0xa8>)
   1e9b2:	f842 3f10 	str.w	r3, [r2, #16]!
   1e9b6:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1e9ba:	f00d fbba 	bl	2c132 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1e9be:	2008      	movs	r0, #8
   1e9c0:	46a5      	mov	sp, r4
}
   1e9c2:	46bd      	mov	sp, r7
   1e9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e9c8:	462a      	mov	r2, r5
   1e9ca:	f832 3b02 	ldrh.w	r3, [r2], #2
   1e9ce:	8303      	strh	r3, [r0, #24]
   1e9d0:	f8d5 3002 	ldr.w	r3, [r5, #2]
   1e9d4:	6103      	str	r3, [r0, #16]
   1e9d6:	6853      	ldr	r3, [r2, #4]
   1e9d8:	6143      	str	r3, [r0, #20]
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1e9da:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1e9de:	f023 0201 	bic.w	r2, r3, #1
   1e9e2:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1e9e6:	079a      	lsls	r2, r3, #30
   1e9e8:	d50c      	bpl.n	1ea04 <smp_central_ident+0x98>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1e9ea:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1e9ec:	4620      	mov	r0, r4
   1e9ee:	f00d fbae 	bl	2c14e <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1e9f2:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1e9f6:	b91d      	cbnz	r5, 1ea00 <smp_central_ident+0x94>
		smp_pairing_complete(smp, 0);
   1e9f8:	4629      	mov	r1, r5
   1e9fa:	4620      	mov	r0, r4
   1e9fc:	f7ff fd64 	bl	1e4c8 <smp_pairing_complete>
	return 0;
   1ea00:	2000      	movs	r0, #0
   1ea02:	e7de      	b.n	1e9c2 <smp_central_ident+0x56>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1ea04:	075b      	lsls	r3, r3, #29
   1ea06:	d5f4      	bpl.n	1e9f2 <smp_central_ident+0x86>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1ea08:	210a      	movs	r1, #10
   1ea0a:	e7ef      	b.n	1e9ec <smp_central_ident+0x80>
   1ea0c:	000313f7 	.word	0x000313f7
   1ea10:	01000003 	.word	0x01000003
   1ea14:	0002e5ec 	.word	0x0002e5ec

0001ea18 <smp_pairing_failed>:
{
   1ea18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ea1c:	460e      	mov	r6, r1
   1ea1e:	af00      	add	r7, sp, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   1ea20:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   1ea24:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ea26:	f7fe fbdd 	bl	1d1e4 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1ea2a:	68b6      	ldr	r6, [r6, #8]
	BT_ERR("reason 0x%x", req->reason);
   1ea2c:	46e9      	mov	r9, sp
   1ea2e:	b088      	sub	sp, #32
   1ea30:	7833      	ldrb	r3, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ea32:	4605      	mov	r5, r0
	BT_ERR("reason 0x%x", req->reason);
   1ea34:	466a      	mov	r2, sp
   1ea36:	4914      	ldr	r1, [pc, #80]	; (1ea88 <smp_pairing_failed+0x70>)
   1ea38:	4814      	ldr	r0, [pc, #80]	; (1ea8c <smp_pairing_failed+0x74>)
   1ea3a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1ea3e:	2303      	movs	r3, #3
   1ea40:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ea44:	f842 3f10 	str.w	r3, [r2, #16]!
   1ea48:	f00d fb73 	bl	2c132 <z_log_msg_static_create.constprop.0>
   1ea4c:	46cd      	mov	sp, r9
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1ea4e:	f104 0904 	add.w	r9, r4, #4
   1ea52:	210a      	movs	r1, #10
   1ea54:	4648      	mov	r0, r9
   1ea56:	f00d fc15 	bl	2c284 <atomic_test_and_clear_bit>
   1ea5a:	b140      	cbz	r0, 1ea6e <smp_pairing_failed+0x56>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1ea5c:	b975      	cbnz	r5, 1ea7c <smp_pairing_failed+0x64>
	smp_pairing_complete(smp, req->reason);
   1ea5e:	4620      	mov	r0, r4
   1ea60:	7831      	ldrb	r1, [r6, #0]
   1ea62:	f7ff fd31 	bl	1e4c8 <smp_pairing_complete>
}
   1ea66:	2000      	movs	r0, #0
   1ea68:	46bd      	mov	sp, r7
   1ea6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1ea6e:	210b      	movs	r1, #11
   1ea70:	4648      	mov	r0, r9
   1ea72:	f00d fc07 	bl	2c284 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1ea76:	2800      	cmp	r0, #0
   1ea78:	d1f0      	bne.n	1ea5c <smp_pairing_failed+0x44>
   1ea7a:	e7f0      	b.n	1ea5e <smp_pairing_failed+0x46>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1ea7c:	692b      	ldr	r3, [r5, #16]
   1ea7e:	2b00      	cmp	r3, #0
   1ea80:	d0ed      	beq.n	1ea5e <smp_pairing_failed+0x46>
			smp_auth_cb->cancel(conn);
   1ea82:	4640      	mov	r0, r8
   1ea84:	4798      	blx	r3
   1ea86:	e7ea      	b.n	1ea5e <smp_pairing_failed+0x46>
   1ea88:	0003165e 	.word	0x0003165e
   1ea8c:	0002e5ec 	.word	0x0002e5ec

0001ea90 <bt_smp_encrypt_change>:
{
   1ea90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
   1ea94:	4604      	mov	r4, r0
{
   1ea96:	b091      	sub	sp, #68	; 0x44
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1ea98:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1ea9c:	4605      	mov	r5, r0
   1ea9e:	af00      	add	r7, sp, #0
   1eaa0:	4688      	mov	r8, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1eaa2:	4630      	mov	r0, r6
   1eaa4:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1eaa6:	f854 99ec 	ldr.w	r9, [r4], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1eaaa:	f00d fbeb 	bl	2c284 <atomic_test_and_clear_bit>
   1eaae:	b328      	cbz	r0, 1eafc <bt_smp_encrypt_change+0x6c>
	if (hci_status) {
   1eab0:	f1b8 0f00 	cmp.w	r8, #0
   1eab4:	d017      	beq.n	1eae6 <bt_smp_encrypt_change+0x56>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1eab6:	2103      	movs	r1, #3
   1eab8:	4630      	mov	r0, r6
   1eaba:	f00d fa4a 	bl	2bf52 <atomic_test_bit>
   1eabe:	b1e8      	cbz	r0, 1eafc <bt_smp_encrypt_change+0x6c>
			uint8_t smp_err = smp_err_get(
   1eac0:	4640      	mov	r0, r8
   1eac2:	f7f9 fd79 	bl	185b8 <bt_security_err_get>
	switch (auth_err) {
   1eac6:	3801      	subs	r0, #1
   1eac8:	b2c0      	uxtb	r0, r0
   1eaca:	2808      	cmp	r0, #8
   1eacc:	bf9a      	itte	ls
   1eace:	4bb7      	ldrls	r3, [pc, #732]	; (1edac <bt_smp_encrypt_change+0x31c>)
   1ead0:	5c1d      	ldrbls	r5, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1ead2:	2500      	movhi	r5, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1ead4:	2102      	movs	r1, #2
   1ead6:	4630      	mov	r0, r6
   1ead8:	f00d fb39 	bl	2c14e <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1eadc:	4629      	mov	r1, r5
		smp_pairing_complete(smp, 0);
   1eade:	4620      	mov	r0, r4
   1eae0:	f7ff fcf2 	bl	1e4c8 <smp_pairing_complete>
   1eae4:	e00a      	b.n	1eafc <bt_smp_encrypt_change+0x6c>
	if (!conn->encrypt) {
   1eae6:	f899 300b 	ldrb.w	r3, [r9, #11]
   1eaea:	b13b      	cbz	r3, 1eafc <bt_smp_encrypt_change+0x6c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1eaec:	2103      	movs	r1, #3
   1eaee:	4630      	mov	r0, r6
   1eaf0:	f00d fa2f 	bl	2bf52 <atomic_test_bit>
   1eaf4:	b930      	cbnz	r0, 1eb04 <bt_smp_encrypt_change+0x74>
		smp_reset(smp);
   1eaf6:	4620      	mov	r0, r4
   1eaf8:	f00d fbdc 	bl	2c2b4 <smp_reset>
}
   1eafc:	3744      	adds	r7, #68	; 0x44
   1eafe:	46bd      	mov	sp, r7
   1eb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1eb04:	2105      	movs	r1, #5
   1eb06:	4630      	mov	r0, r6
   1eb08:	f00d fa23 	bl	2bf52 <atomic_test_bit>
   1eb0c:	b1b8      	cbz	r0, 1eb3e <bt_smp_encrypt_change+0xae>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1eb0e:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1eb12:	071b      	lsls	r3, r3, #28
   1eb14:	d507      	bpl.n	1eb26 <bt_smp_encrypt_change+0x96>
   1eb16:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   1eb1a:	0718      	lsls	r0, r3, #28
   1eb1c:	d503      	bpl.n	1eb26 <bt_smp_encrypt_change+0x96>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1eb1e:	2111      	movs	r1, #17
   1eb20:	4630      	mov	r0, r6
   1eb22:	f00d fb14 	bl	2c14e <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1eb26:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1eb2a:	f023 0308 	bic.w	r3, r3, #8
   1eb2e:	f805 3c04 	strb.w	r3, [r5, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1eb32:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   1eb36:	f023 0308 	bic.w	r3, r3, #8
   1eb3a:	f805 3c03 	strb.w	r3, [r5, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1eb3e:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   1eb42:	07d9      	lsls	r1, r3, #31
   1eb44:	d524      	bpl.n	1eb90 <bt_smp_encrypt_change+0x100>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1eb46:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1eb48:	4620      	mov	r0, r4
   1eb4a:	f00d fb00 	bl	2c14e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1eb4e:	2102      	movs	r1, #2
   1eb50:	4630      	mov	r0, r6
   1eb52:	f00d fafc 	bl	2c14e <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1eb56:	f8d5 b000 	ldr.w	fp, [r5]
	struct bt_keys *keys = conn->le.keys;
   1eb5a:	f8db a0b4 	ldr.w	sl, [fp, #180]	; 0xb4
	if (!keys) {
   1eb5e:	f1ba 0f00 	cmp.w	sl, #0
   1eb62:	d11d      	bne.n	1eba0 <bt_smp_encrypt_change+0x110>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1eb64:	f10b 0088 	add.w	r0, fp, #136	; 0x88
   1eb68:	f7f8 fae4 	bl	17134 <bt_addr_le_str_real>
   1eb6c:	466c      	mov	r4, sp
   1eb6e:	b088      	sub	sp, #32
   1eb70:	466a      	mov	r2, sp
   1eb72:	4b8f      	ldr	r3, [pc, #572]	; (1edb0 <bt_smp_encrypt_change+0x320>)
   1eb74:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1eb78:	2302      	movs	r3, #2
   1eb7a:	7713      	strb	r3, [r2, #28]
   1eb7c:	4b8d      	ldr	r3, [pc, #564]	; (1edb4 <bt_smp_encrypt_change+0x324>)
   1eb7e:	f842 3f10 	str.w	r3, [r2, #16]!
   1eb82:	488d      	ldr	r0, [pc, #564]	; (1edb8 <bt_smp_encrypt_change+0x328>)
   1eb84:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1eb88:	f00d fad3 	bl	2c132 <z_log_msg_static_create.constprop.0>
   1eb8c:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1eb8e:	e7b5      	b.n	1eafc <bt_smp_encrypt_change+0x6c>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1eb90:	079a      	lsls	r2, r3, #30
   1eb92:	d501      	bpl.n	1eb98 <bt_smp_encrypt_change+0x108>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1eb94:	2108      	movs	r1, #8
   1eb96:	e7d7      	b.n	1eb48 <bt_smp_encrypt_change+0xb8>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1eb98:	0758      	lsls	r0, r3, #29
   1eb9a:	d5d8      	bpl.n	1eb4e <bt_smp_encrypt_change+0xbe>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1eb9c:	210a      	movs	r1, #10
   1eb9e:	e7d3      	b.n	1eb48 <bt_smp_encrypt_change+0xb8>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1eba0:	2105      	movs	r1, #5
   1eba2:	f00d f9d6 	bl	2bf52 <atomic_test_bit>
   1eba6:	b9c0      	cbnz	r0, 1ebda <bt_smp_encrypt_change+0x14a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1eba8:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1ebac:	07d9      	lsls	r1, r3, #31
   1ebae:	d514      	bpl.n	1ebda <bt_smp_encrypt_change+0x14a>
	struct bt_keys *keys = conn->le.keys;
   1ebb0:	682b      	ldr	r3, [r5, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1ebb2:	211a      	movs	r1, #26
   1ebb4:	f107 0020 	add.w	r0, r7, #32
	struct bt_keys *keys = conn->le.keys;
   1ebb8:	f8d3 80b4 	ldr.w	r8, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1ebbc:	f002 fe96 	bl	218ec <bt_rand>
   1ebc0:	6078      	str	r0, [r7, #4]
   1ebc2:	b310      	cbz	r0, 1ec0a <bt_smp_encrypt_change+0x17a>
			BT_ERR("Unable to get random bytes");
   1ebc4:	4b7d      	ldr	r3, [pc, #500]	; (1edbc <bt_smp_encrypt_change+0x32c>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1ebc6:	61fb      	str	r3, [r7, #28]
   1ebc8:	487b      	ldr	r0, [pc, #492]	; (1edb8 <bt_smp_encrypt_change+0x328>)
   1ebca:	2302      	movs	r3, #2
   1ebcc:	f107 0218 	add.w	r2, r7, #24
   1ebd0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ebd4:	61bb      	str	r3, [r7, #24]
   1ebd6:	f00d faac 	bl	2c132 <z_log_msg_static_create.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
   1ebda:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1ebde:	079a      	lsls	r2, r3, #30
   1ebe0:	f140 80ab 	bpl.w	1ed3a <bt_smp_encrypt_change+0x2aa>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
   1ebe4:	2108      	movs	r1, #8
   1ebe6:	4620      	mov	r0, r4
   1ebe8:	f00d fac5 	bl	2c176 <smp_create_pdu.constprop.0>
		if (!buf) {
   1ebec:	4681      	mov	r9, r0
   1ebee:	2800      	cmp	r0, #0
   1ebf0:	d16e      	bne.n	1ecd0 <bt_smp_encrypt_change+0x240>
			BT_ERR("Unable to allocate Ident Info buffer");
   1ebf2:	4b73      	ldr	r3, [pc, #460]	; (1edc0 <bt_smp_encrypt_change+0x330>)
			BT_ERR("Unable to allocate Signing Info buffer");
   1ebf4:	637b      	str	r3, [r7, #52]	; 0x34
   1ebf6:	4870      	ldr	r0, [pc, #448]	; (1edb8 <bt_smp_encrypt_change+0x328>)
   1ebf8:	2302      	movs	r3, #2
   1ebfa:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1ebfe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ec02:	633b      	str	r3, [r7, #48]	; 0x30
   1ec04:	f00d fa95 	bl	2c132 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1ec08:	e778      	b.n	1eafc <bt_smp_encrypt_change+0x6c>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1ec0a:	2106      	movs	r1, #6
   1ec0c:	4620      	mov	r0, r4
   1ec0e:	f00d fab2 	bl	2c176 <smp_create_pdu.constprop.0>
		if (!buf) {
   1ec12:	4681      	mov	r9, r0
   1ec14:	b908      	cbnz	r0, 1ec1a <bt_smp_encrypt_change+0x18a>
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1ec16:	4b6b      	ldr	r3, [pc, #428]	; (1edc4 <bt_smp_encrypt_change+0x334>)
   1ec18:	e7d5      	b.n	1ebc6 <bt_smp_encrypt_change+0x136>
	return net_buf_simple_add(&buf->b, len);
   1ec1a:	2110      	movs	r1, #16
   1ec1c:	3008      	adds	r0, #8
   1ec1e:	f00d fe61 	bl	2c8e4 <net_buf_simple_add>
   1ec22:	f898 200c 	ldrb.w	r2, [r8, #12]
   1ec26:	6038      	str	r0, [r7, #0]
   1ec28:	f107 0120 	add.w	r1, r7, #32
   1ec2c:	f00f f8d4 	bl	2ddd8 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1ec30:	f898 000c 	ldrb.w	r0, [r8, #12]
   1ec34:	280f      	cmp	r0, #15
   1ec36:	d806      	bhi.n	1ec46 <bt_smp_encrypt_change+0x1b6>
__ssp_bos_icheck3(memset, void *, int)
   1ec38:	e9d7 3100 	ldrd	r3, r1, [r7]
   1ec3c:	f1c0 0210 	rsb	r2, r0, #16
   1ec40:	4418      	add	r0, r3
   1ec42:	f00f f8ea 	bl	2de1a <memset>
		smp_send(smp, buf, NULL, NULL);
   1ec46:	4649      	mov	r1, r9
   1ec48:	2200      	movs	r2, #0
   1ec4a:	4620      	mov	r0, r4
   1ec4c:	f00d fa54 	bl	2c0f8 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1ec50:	2107      	movs	r1, #7
   1ec52:	4620      	mov	r0, r4
   1ec54:	f00d fa8f 	bl	2c176 <smp_create_pdu.constprop.0>
		if (!buf) {
   1ec58:	4681      	mov	r9, r0
   1ec5a:	b908      	cbnz	r0, 1ec60 <bt_smp_encrypt_change+0x1d0>
			BT_ERR("Unable to allocate Central Ident buffer");
   1ec5c:	4b5a      	ldr	r3, [pc, #360]	; (1edc8 <bt_smp_encrypt_change+0x338>)
   1ec5e:	e7b2      	b.n	1ebc6 <bt_smp_encrypt_change+0x136>
   1ec60:	210a      	movs	r1, #10
   1ec62:	3008      	adds	r0, #8
   1ec64:	f00d fe3e 	bl	2c8e4 <net_buf_simple_add>
   1ec68:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1ec6c:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ec6e:	ca03      	ldmia	r2!, {r0, r1}
   1ec70:	f8c3 0002 	str.w	r0, [r3, #2]
   1ec74:	f8c3 1006 	str.w	r1, [r3, #6]
   1ec78:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
   1ec7a:	801a      	strh	r2, [r3, #0]
		smp_send(smp, buf, smp_ident_sent, NULL);
   1ec7c:	4649      	mov	r1, r9
   1ec7e:	4620      	mov	r0, r4
   1ec80:	4a52      	ldr	r2, [pc, #328]	; (1edcc <bt_smp_encrypt_change+0x33c>)
   1ec82:	f00d fa39 	bl	2c0f8 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ec86:	210d      	movs	r1, #13
   1ec88:	4630      	mov	r0, r6
   1ec8a:	f00d f962 	bl	2bf52 <atomic_test_bit>
   1ec8e:	f107 0930 	add.w	r9, r7, #48	; 0x30
   1ec92:	2800      	cmp	r0, #0
   1ec94:	d0a1      	beq.n	1ebda <bt_smp_encrypt_change+0x14a>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1ec96:	2101      	movs	r1, #1
   1ec98:	4640      	mov	r0, r8
   1ec9a:	f00d fd79 	bl	2c790 <bt_keys_add_type>
   1ec9e:	f107 0220 	add.w	r2, r7, #32
   1eca2:	f108 0c72 	add.w	ip, r8, #114	; 0x72
   1eca6:	4613      	mov	r3, r2
   1eca8:	cb03      	ldmia	r3!, {r0, r1}
   1ecaa:	454b      	cmp	r3, r9
   1ecac:	f8cc 0000 	str.w	r0, [ip]
   1ecb0:	f8cc 1004 	str.w	r1, [ip, #4]
   1ecb4:	461a      	mov	r2, r3
   1ecb6:	f10c 0c08 	add.w	ip, ip, #8
   1ecba:	d1f4      	bne.n	1eca6 <bt_smp_encrypt_change+0x216>
   1ecbc:	464b      	mov	r3, r9
   1ecbe:	cb03      	ldmia	r3!, {r0, r1}
   1ecc0:	f8c8 0068 	str.w	r0, [r8, #104]	; 0x68
   1ecc4:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
   1ecc8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
   1ecca:	f8a8 3070 	strh.w	r3, [r8, #112]	; 0x70
   1ecce:	e784      	b.n	1ebda <bt_smp_encrypt_change+0x14a>
   1ecd0:	2110      	movs	r1, #16
   1ecd2:	3008      	adds	r0, #8
   1ecd4:	f00d fe06 	bl	2c8e4 <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
   1ecd8:	f89b 3008 	ldrb.w	r3, [fp, #8]
   1ecdc:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 1edd0 <bt_smp_encrypt_change+0x340>
   1ece0:	3316      	adds	r3, #22
   1ece2:	eb08 1303 	add.w	r3, r8, r3, lsl #4
   1ece6:	4602      	mov	r2, r0
   1ece8:	f103 0e10 	add.w	lr, r3, #16
   1ecec:	469c      	mov	ip, r3
   1ecee:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
   1ecf2:	45f4      	cmp	ip, lr
   1ecf4:	6010      	str	r0, [r2, #0]
   1ecf6:	6051      	str	r1, [r2, #4]
   1ecf8:	4663      	mov	r3, ip
   1ecfa:	f102 0208 	add.w	r2, r2, #8
   1ecfe:	d1f5      	bne.n	1ecec <bt_smp_encrypt_change+0x25c>
		smp_send(smp, buf, NULL, NULL);
   1ed00:	4649      	mov	r1, r9
   1ed02:	2200      	movs	r2, #0
   1ed04:	4620      	mov	r0, r4
   1ed06:	f00d f9f7 	bl	2c0f8 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
   1ed0a:	2109      	movs	r1, #9
   1ed0c:	4620      	mov	r0, r4
   1ed0e:	f00d fa32 	bl	2c176 <smp_create_pdu.constprop.0>
		if (!buf) {
   1ed12:	4681      	mov	r9, r0
   1ed14:	b908      	cbnz	r0, 1ed1a <bt_smp_encrypt_change+0x28a>
			BT_ERR("Unable to allocate Ident Addr Info buffer");
   1ed16:	4b2f      	ldr	r3, [pc, #188]	; (1edd4 <bt_smp_encrypt_change+0x344>)
   1ed18:	e76c      	b.n	1ebf4 <bt_smp_encrypt_change+0x164>
   1ed1a:	2107      	movs	r1, #7
   1ed1c:	3008      	adds	r0, #8
   1ed1e:	f00d fde1 	bl	2c8e4 <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
   1ed22:	f89b 1008 	ldrb.w	r1, [fp, #8]
		smp_send(smp, buf, smp_id_sent, NULL);
   1ed26:	4a2c      	ldr	r2, [pc, #176]	; (1edd8 <bt_smp_encrypt_change+0x348>)
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
   1ed28:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1ed2c:	4441      	add	r1, r8
   1ed2e:	f00d f98b 	bl	2c048 <bt_addr_le_copy>
		smp_send(smp, buf, smp_id_sent, NULL);
   1ed32:	4649      	mov	r1, r9
   1ed34:	4620      	mov	r0, r4
   1ed36:	f00d f9df 	bl	2c0f8 <smp_send.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
   1ed3a:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1ed3e:	075b      	lsls	r3, r3, #29
   1ed40:	d52e      	bpl.n	1eda0 <bt_smp_encrypt_change+0x310>
		buf = smp_create_pdu(smp, BT_SMP_CMD_SIGNING_INFO,
   1ed42:	210a      	movs	r1, #10
   1ed44:	4620      	mov	r0, r4
   1ed46:	f00d fa16 	bl	2c176 <smp_create_pdu.constprop.0>
		if (!buf) {
   1ed4a:	4681      	mov	r9, r0
   1ed4c:	b908      	cbnz	r0, 1ed52 <bt_smp_encrypt_change+0x2c2>
			BT_ERR("Unable to allocate Signing Info buffer");
   1ed4e:	4b23      	ldr	r3, [pc, #140]	; (1eddc <bt_smp_encrypt_change+0x34c>)
   1ed50:	e750      	b.n	1ebf4 <bt_smp_encrypt_change+0x164>
   1ed52:	2110      	movs	r1, #16
   1ed54:	3008      	adds	r0, #8
   1ed56:	f00d fdc5 	bl	2c8e4 <net_buf_simple_add>
		if (bt_rand(info->csrk, sizeof(info->csrk))) {
   1ed5a:	2110      	movs	r1, #16
   1ed5c:	4680      	mov	r8, r0
   1ed5e:	f002 fdc5 	bl	218ec <bt_rand>
   1ed62:	2800      	cmp	r0, #0
   1ed64:	f47f aeca 	bne.w	1eafc <bt_smp_encrypt_change+0x6c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ed68:	210d      	movs	r1, #13
   1ed6a:	4630      	mov	r0, r6
   1ed6c:	f00d f8f1 	bl	2bf52 <atomic_test_bit>
   1ed70:	b188      	cbz	r0, 1ed96 <bt_smp_encrypt_change+0x306>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
   1ed72:	2108      	movs	r1, #8
   1ed74:	4650      	mov	r0, sl
   1ed76:	f00d fd0b 	bl	2c790 <bt_keys_add_type>
   1ed7a:	4643      	mov	r3, r8
   1ed7c:	f10a 0240 	add.w	r2, sl, #64	; 0x40
   1ed80:	f108 0110 	add.w	r1, r8, #16
   1ed84:	f853 0b04 	ldr.w	r0, [r3], #4
   1ed88:	f842 0b04 	str.w	r0, [r2], #4
   1ed8c:	428b      	cmp	r3, r1
   1ed8e:	d1f9      	bne.n	1ed84 <bt_smp_encrypt_change+0x2f4>
			keys->local_csrk.cnt = 0U;
   1ed90:	2300      	movs	r3, #0
   1ed92:	f8ca 3050 	str.w	r3, [sl, #80]	; 0x50
		smp_send(smp, buf, smp_sign_info_sent, NULL);
   1ed96:	4a12      	ldr	r2, [pc, #72]	; (1ede0 <bt_smp_encrypt_change+0x350>)
   1ed98:	4649      	mov	r1, r9
   1ed9a:	4620      	mov	r0, r4
   1ed9c:	f00d f9ac 	bl	2c0f8 <smp_send.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   1eda0:	f835 1c04 	ldrh.w	r1, [r5, #-4]
   1eda4:	2900      	cmp	r1, #0
   1eda6:	f47f aea9 	bne.w	1eafc <bt_smp_encrypt_change+0x6c>
   1edaa:	e698      	b.n	1eade <bt_smp_encrypt_change+0x4e>
   1edac:	00031781 	.word	0x00031781
   1edb0:	0003166a 	.word	0x0003166a
   1edb4:	01000003 	.word	0x01000003
   1edb8:	0002e5ec 	.word	0x0002e5ec
   1edbc:	0003167f 	.word	0x0003167f
   1edc0:	000316e9 	.word	0x000316e9
   1edc4:	0003169a 	.word	0x0003169a
   1edc8:	000316c1 	.word	0x000316c1
   1edcc:	0002c6f1 	.word	0x0002c6f1
   1edd0:	20000350 	.word	0x20000350
   1edd4:	0003170e 	.word	0x0003170e
   1edd8:	0002c6e7 	.word	0x0002c6e7
   1eddc:	00031738 	.word	0x00031738
   1ede0:	0002c6dd 	.word	0x0002c6dd

0001ede4 <smp_timeout>:
{
   1ede4:	b510      	push	{r4, lr}
   1ede6:	4604      	mov	r4, r0
   1ede8:	b086      	sub	sp, #24
	BT_ERR("SMP Timeout");
   1edea:	4b0b      	ldr	r3, [pc, #44]	; (1ee18 <smp_timeout+0x34>)
   1edec:	9305      	str	r3, [sp, #20]
   1edee:	aa04      	add	r2, sp, #16
   1edf0:	2302      	movs	r3, #2
   1edf2:	480a      	ldr	r0, [pc, #40]	; (1ee1c <smp_timeout+0x38>)
   1edf4:	9304      	str	r3, [sp, #16]
   1edf6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1edfa:	f00d f99a 	bl	2c132 <z_log_msg_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1edfe:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
   1ee02:	2108      	movs	r1, #8
   1ee04:	f7ff fb60 	bl	1e4c8 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1ee08:	2104      	movs	r1, #4
   1ee0a:	f5a4 70ba 	sub.w	r0, r4, #372	; 0x174
}
   1ee0e:	b006      	add	sp, #24
   1ee10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1ee14:	f00d b99b 	b.w	2c14e <atomic_set_bit>
   1ee18:	0003175f 	.word	0x0003175f
   1ee1c:	0002e5ec 	.word	0x0002e5ec

0001ee20 <bt_smp_update_keys>:
{
   1ee20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ee24:	af00      	add	r7, sp, #0
   1ee26:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1ee28:	f00d f986 	bl	2c138 <smp_chan_get>
	if (!smp) {
   1ee2c:	4605      	mov	r5, r0
   1ee2e:	b358      	cbz	r0, 1ee88 <bt_smp_update_keys+0x68>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1ee30:	1d06      	adds	r6, r0, #4
   1ee32:	2103      	movs	r1, #3
   1ee34:	4630      	mov	r0, r6
   1ee36:	f00d f88c 	bl	2bf52 <atomic_test_bit>
   1ee3a:	b328      	cbz	r0, 1ee88 <bt_smp_update_keys+0x68>
	if (conn->le.keys) {
   1ee3c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1ee40:	b108      	cbz	r0, 1ee46 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1ee42:	f000 f961 	bl	1f108 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1ee46:	f104 0888 	add.w	r8, r4, #136	; 0x88
   1ee4a:	7a20      	ldrb	r0, [r4, #8]
   1ee4c:	4641      	mov	r1, r8
   1ee4e:	f000 f88b 	bl	1ef68 <bt_keys_get_addr>
   1ee52:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   1ee56:	b9d0      	cbnz	r0, 1ee8e <bt_smp_update_keys+0x6e>
		BT_ERR("Unable to get keys for %s",
   1ee58:	4640      	mov	r0, r8
   1ee5a:	f7f8 f96b 	bl	17134 <bt_addr_le_str_real>
   1ee5e:	466c      	mov	r4, sp
   1ee60:	b088      	sub	sp, #32
   1ee62:	466a      	mov	r2, sp
   1ee64:	4b32      	ldr	r3, [pc, #200]	; (1ef30 <bt_smp_update_keys+0x110>)
   1ee66:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ee6a:	2302      	movs	r3, #2
   1ee6c:	7713      	strb	r3, [r2, #28]
   1ee6e:	4b31      	ldr	r3, [pc, #196]	; (1ef34 <bt_smp_update_keys+0x114>)
   1ee70:	4831      	ldr	r0, [pc, #196]	; (1ef38 <bt_smp_update_keys+0x118>)
   1ee72:	f842 3f10 	str.w	r3, [r2, #16]!
   1ee76:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1ee7a:	f00d f95a 	bl	2c132 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1ee7e:	2108      	movs	r1, #8
   1ee80:	46a5      	mov	sp, r4
   1ee82:	4628      	mov	r0, r5
   1ee84:	f00d fb93 	bl	2c5ae <smp_error>
}
   1ee88:	46bd      	mov	sp, r7
   1ee8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1ee8e:	210e      	movs	r1, #14
   1ee90:	4630      	mov	r0, r6
   1ee92:	f00d f85e 	bl	2bf52 <atomic_test_bit>
   1ee96:	b128      	cbz	r0, 1eea4 <bt_smp_update_keys+0x84>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1ee98:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1ee9c:	7b53      	ldrb	r3, [r2, #13]
   1ee9e:	f043 0302 	orr.w	r3, r3, #2
   1eea2:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1eea4:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1eea6:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   1eeaa:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1eeac:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1eeae:	d834      	bhi.n	1ef1a <bt_smp_update_keys+0xfa>
   1eeb0:	b3b2      	cbz	r2, 1ef20 <bt_smp_update_keys+0x100>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1eeb2:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1eeb6:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1eeb8:	7d2b      	ldrb	r3, [r5, #20]
   1eeba:	7b6a      	ldrb	r2, [r5, #13]
   1eebc:	4293      	cmp	r3, r2
   1eebe:	bf28      	it	cs
   1eec0:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1eec2:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1eec4:	4630      	mov	r0, r6
   1eec6:	2105      	movs	r1, #5
   1eec8:	f00d f843 	bl	2bf52 <atomic_test_bit>
   1eecc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   1eed0:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1eed2:	b340      	cbz	r0, 1ef26 <bt_smp_update_keys+0x106>
		conn->le.keys->flags |= BT_KEYS_SC;
   1eed4:	f042 0210 	orr.w	r2, r2, #16
   1eed8:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1eeda:	210d      	movs	r1, #13
   1eedc:	4630      	mov	r0, r6
   1eede:	f00d f838 	bl	2bf52 <atomic_test_bit>
   1eee2:	2800      	cmp	r0, #0
   1eee4:	d0d0      	beq.n	1ee88 <bt_smp_update_keys+0x68>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1eee6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1eeea:	2120      	movs	r1, #32
   1eeec:	f00d fc50 	bl	2c790 <bt_keys_add_type>
   1eef0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1eef4:	f105 0247 	add.w	r2, r5, #71	; 0x47
   1eef8:	331a      	adds	r3, #26
   1eefa:	3557      	adds	r5, #87	; 0x57
   1eefc:	f852 1b04 	ldr.w	r1, [r2], #4
   1ef00:	f843 1b04 	str.w	r1, [r3], #4
   1ef04:	42aa      	cmp	r2, r5
   1ef06:	d1f9      	bne.n	1eefc <bt_smp_update_keys+0xdc>
__ssp_bos_icheck3(memset, void *, int)
   1ef08:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1ef0c:	2300      	movs	r3, #0
   1ef0e:	6113      	str	r3, [r2, #16]
   1ef10:	6153      	str	r3, [r2, #20]
   1ef12:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1ef16:	8313      	strh	r3, [r2, #24]
   1ef18:	e7b6      	b.n	1ee88 <bt_smp_update_keys+0x68>
	switch (smp->method) {
   1ef1a:	3a05      	subs	r2, #5
   1ef1c:	2a01      	cmp	r2, #1
   1ef1e:	d9c8      	bls.n	1eeb2 <bt_smp_update_keys+0x92>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1ef20:	f023 0301 	bic.w	r3, r3, #1
   1ef24:	e7c7      	b.n	1eeb6 <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1ef26:	f022 0210 	bic.w	r2, r2, #16
   1ef2a:	735a      	strb	r2, [r3, #13]
   1ef2c:	e7ac      	b.n	1ee88 <bt_smp_update_keys+0x68>
   1ef2e:	bf00      	nop
   1ef30:	000313f7 	.word	0x000313f7
   1ef34:	01000003 	.word	0x01000003
   1ef38:	0002e5ec 	.word	0x0002e5ec

0001ef3c <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1ef3c:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1ef3e:	4b07      	ldr	r3, [pc, #28]	; (1ef5c <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1ef40:	4807      	ldr	r0, [pc, #28]	; (1ef60 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1ef42:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1ef46:	f003 0306 	and.w	r3, r3, #6
   1ef4a:	1f9a      	subs	r2, r3, #6
   1ef4c:	4253      	negs	r3, r2
   1ef4e:	4153      	adcs	r3, r2
   1ef50:	4a04      	ldr	r2, [pc, #16]	; (1ef64 <bt_smp_init+0x28>)
   1ef52:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1ef54:	f7fa fc16 	bl	19784 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1ef58:	2000      	movs	r0, #0
   1ef5a:	bd08      	pop	{r3, pc}
   1ef5c:	20000350 	.word	0x20000350
   1ef60:	20000770 	.word	0x20000770
   1ef64:	20006c30 	.word	0x20006c30

0001ef68 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1ef68:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1ef6a:	4c1e      	ldr	r4, [pc, #120]	; (1efe4 <bt_keys_get_addr+0x7c>)
   1ef6c:	7823      	ldrb	r3, [r4, #0]
   1ef6e:	4283      	cmp	r3, r0
{
   1ef70:	b085      	sub	sp, #20
   1ef72:	4606      	mov	r6, r0
   1ef74:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1ef76:	d01d      	beq.n	1efb4 <bt_keys_get_addr+0x4c>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1ef78:	2500      	movs	r5, #0
	return memcmp(a, b, sizeof(*a));
   1ef7a:	481b      	ldr	r0, [pc, #108]	; (1efe8 <bt_keys_get_addr+0x80>)
   1ef7c:	9502      	str	r5, [sp, #8]
   1ef7e:	2207      	movs	r2, #7
   1ef80:	a902      	add	r1, sp, #8
   1ef82:	f8cd 500b 	str.w	r5, [sp, #11]
   1ef86:	f00e ff17 	bl	2ddb8 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1ef8a:	b1d8      	cbz	r0, 1efc4 <bt_keys_get_addr+0x5c>
			BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));
			return NULL;
		}

		/* Use a copy as bt_unpair will clear the oldest key. */
		bt_addr_le_copy(&oldest_addr, &oldest->addr);
   1ef8c:	4668      	mov	r0, sp
   1ef8e:	4916      	ldr	r1, [pc, #88]	; (1efe8 <bt_keys_get_addr+0x80>)
   1ef90:	f00d fbe7 	bl	2c762 <bt_addr_le_copy>
		bt_unpair(oldest->id, &oldest_addr);
   1ef94:	4601      	mov	r1, r0
   1ef96:	7820      	ldrb	r0, [r4, #0]
   1ef98:	f7f9 fae8 	bl	1856c <bt_unpair>
   1ef9c:	4812      	ldr	r0, [pc, #72]	; (1efe8 <bt_keys_get_addr+0x80>)
		if (!bt_addr_le_cmp(&oldest->addr, BT_ADDR_LE_ANY)) {
   1ef9e:	9502      	str	r5, [sp, #8]
   1efa0:	2207      	movs	r2, #7
   1efa2:	a902      	add	r1, sp, #8
   1efa4:	f8cd 500b 	str.w	r5, [sp, #11]
   1efa8:	f00e ff06 	bl	2ddb8 <memcmp>
   1efac:	b150      	cbz	r0, 1efc4 <bt_keys_get_addr+0x5c>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1efae:	4628      	mov	r0, r5
}
   1efb0:	b005      	add	sp, #20
   1efb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1efb4:	2207      	movs	r2, #7
   1efb6:	1c60      	adds	r0, r4, #1
   1efb8:	f00e fefe 	bl	2ddb8 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1efbc:	2800      	cmp	r0, #0
   1efbe:	d1db      	bne.n	1ef78 <bt_keys_get_addr+0x10>
		keys = &key_pool[i];
   1efc0:	4620      	mov	r0, r4
   1efc2:	e7f5      	b.n	1efb0 <bt_keys_get_addr+0x48>
		keys->aging_counter = ++aging_counter_val;
   1efc4:	4a09      	ldr	r2, [pc, #36]	; (1efec <bt_keys_get_addr+0x84>)
		bt_addr_le_copy(&keys->addr, addr);
   1efc6:	4808      	ldr	r0, [pc, #32]	; (1efe8 <bt_keys_get_addr+0x80>)
		keys->id = id;
   1efc8:	7026      	strb	r6, [r4, #0]
		bt_addr_le_copy(&keys->addr, addr);
   1efca:	4639      	mov	r1, r7
   1efcc:	f00d fbc9 	bl	2c762 <bt_addr_le_copy>
		keys->aging_counter = ++aging_counter_val;
   1efd0:	6813      	ldr	r3, [r2, #0]
   1efd2:	3301      	adds	r3, #1
   1efd4:	6013      	str	r3, [r2, #0]
   1efd6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		last_keys_updated = keys;
   1efda:	4b05      	ldr	r3, [pc, #20]	; (1eff0 <bt_keys_get_addr+0x88>)
		return keys;
   1efdc:	3801      	subs	r0, #1
		last_keys_updated = keys;
   1efde:	601c      	str	r4, [r3, #0]
		return keys;
   1efe0:	e7e6      	b.n	1efb0 <bt_keys_get_addr+0x48>
   1efe2:	bf00      	nop
   1efe4:	20005ce0 	.word	0x20005ce0
   1efe8:	20005ce1 	.word	0x20005ce1
   1efec:	20005cdc 	.word	0x20005cdc
   1eff0:	20005d68 	.word	0x20005d68

0001eff4 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
   1eff4:	b513      	push	{r0, r1, r4, lr}
   1eff6:	460c      	mov	r4, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
   1eff8:	4906      	ldr	r1, [pc, #24]	; (1f014 <bt_foreach_bond+0x20>)
   1effa:	89cb      	ldrh	r3, [r1, #14]
   1effc:	b143      	cbz	r3, 1f010 <bt_foreach_bond+0x1c>
   1effe:	780b      	ldrb	r3, [r1, #0]
   1f000:	4283      	cmp	r3, r0
   1f002:	d105      	bne.n	1f010 <bt_foreach_bond+0x1c>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
   1f004:	3101      	adds	r1, #1
   1f006:	4668      	mov	r0, sp
   1f008:	f00d fbab 	bl	2c762 <bt_addr_le_copy>
			func(&info, user_data);
   1f00c:	4611      	mov	r1, r2
   1f00e:	47a0      	blx	r4
		}
	}
}
   1f010:	b002      	add	sp, #8
   1f012:	bd10      	pop	{r4, pc}
   1f014:	20005ce0 	.word	0x20005ce0

0001f018 <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   1f018:	460b      	mov	r3, r1
   1f01a:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   1f01c:	4a04      	ldr	r2, [pc, #16]	; (1f030 <bt_keys_foreach+0x18>)
{
   1f01e:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   1f020:	89d4      	ldrh	r4, [r2, #14]
   1f022:	4204      	tst	r4, r0
   1f024:	d002      	beq.n	1f02c <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1f026:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   1f028:	4610      	mov	r0, r2
   1f02a:	4718      	bx	r3
}
   1f02c:	bc10      	pop	{r4}
   1f02e:	4770      	bx	lr
   1f030:	20005ce0 	.word	0x20005ce0

0001f034 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   1f034:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   1f036:	4903      	ldr	r1, [pc, #12]	; (1f044 <keys_commit+0x10>)
   1f038:	2200      	movs	r2, #0
   1f03a:	2002      	movs	r0, #2
   1f03c:	f7ff ffec 	bl	1f018 <bt_keys_foreach>
	}

	return 0;
}
   1f040:	2000      	movs	r0, #0
   1f042:	bd08      	pop	{r3, pc}
   1f044:	0002c75f 	.word	0x0002c75f

0001f048 <bt_keys_find>:
{
   1f048:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1f04a:	4c09      	ldr	r4, [pc, #36]	; (1f070 <bt_keys_find+0x28>)
{
   1f04c:	460b      	mov	r3, r1
   1f04e:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1f050:	89e2      	ldrh	r2, [r4, #14]
   1f052:	4202      	tst	r2, r0
   1f054:	d007      	beq.n	1f066 <bt_keys_find+0x1e>
   1f056:	7822      	ldrb	r2, [r4, #0]
   1f058:	429a      	cmp	r2, r3
   1f05a:	d104      	bne.n	1f066 <bt_keys_find+0x1e>
   1f05c:	2207      	movs	r2, #7
   1f05e:	1c60      	adds	r0, r4, #1
   1f060:	f00e feaa 	bl	2ddb8 <memcmp>
   1f064:	b108      	cbz	r0, 1f06a <bt_keys_find+0x22>
	return NULL;
   1f066:	2000      	movs	r0, #0
}
   1f068:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1f06a:	4620      	mov	r0, r4
   1f06c:	e7fc      	b.n	1f068 <bt_keys_find+0x20>
   1f06e:	bf00      	nop
   1f070:	20005ce0 	.word	0x20005ce0

0001f074 <bt_keys_find_irk>:
{
   1f074:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1f076:	780b      	ldrb	r3, [r1, #0]
   1f078:	2b01      	cmp	r3, #1
   1f07a:	4606      	mov	r6, r0
   1f07c:	460d      	mov	r5, r1
   1f07e:	d001      	beq.n	1f084 <bt_keys_find_irk+0x10>
		return NULL;
   1f080:	2000      	movs	r0, #0
}
   1f082:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1f084:	798b      	ldrb	r3, [r1, #6]
   1f086:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f08a:	2b40      	cmp	r3, #64	; 0x40
   1f08c:	d1f8      	bne.n	1f080 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1f08e:	4c13      	ldr	r4, [pc, #76]	; (1f0dc <bt_keys_find_irk+0x68>)
   1f090:	89e3      	ldrh	r3, [r4, #14]
   1f092:	079b      	lsls	r3, r3, #30
   1f094:	d5f4      	bpl.n	1f080 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   1f096:	7823      	ldrb	r3, [r4, #0]
   1f098:	42b3      	cmp	r3, r6
   1f09a:	d10b      	bne.n	1f0b4 <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
   1f09c:	2206      	movs	r2, #6
   1f09e:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   1f0a2:	1c68      	adds	r0, r5, #1
   1f0a4:	f00e fe88 	bl	2ddb8 <memcmp>
   1f0a8:	b908      	cbnz	r0, 1f0ae <bt_keys_find_irk+0x3a>
			return &key_pool[i];
   1f0aa:	4620      	mov	r0, r4
   1f0ac:	e7e9      	b.n	1f082 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1f0ae:	89e3      	ldrh	r3, [r4, #14]
   1f0b0:	079a      	lsls	r2, r3, #30
   1f0b2:	d5e5      	bpl.n	1f080 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1f0b4:	7823      	ldrb	r3, [r4, #0]
   1f0b6:	42b3      	cmp	r3, r6
   1f0b8:	d1e2      	bne.n	1f080 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1f0ba:	1c6e      	adds	r6, r5, #1
   1f0bc:	4808      	ldr	r0, [pc, #32]	; (1f0e0 <bt_keys_find_irk+0x6c>)
   1f0be:	4631      	mov	r1, r6
   1f0c0:	f00b fa6b 	bl	2a59a <bt_rpa_irk_matches>
   1f0c4:	2800      	cmp	r0, #0
   1f0c6:	d0db      	beq.n	1f080 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   1f0c8:	f8d5 3001 	ldr.w	r3, [r5, #1]
   1f0cc:	4805      	ldr	r0, [pc, #20]	; (1f0e4 <bt_keys_find_irk+0x70>)
   1f0ce:	f8c4 303a 	str.w	r3, [r4, #58]	; 0x3a
   1f0d2:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   1f0d6:	8083      	strh	r3, [r0, #4]
			return &key_pool[i];
   1f0d8:	383a      	subs	r0, #58	; 0x3a
}
   1f0da:	e7d2      	b.n	1f082 <bt_keys_find_irk+0xe>
   1f0dc:	20005ce0 	.word	0x20005ce0
   1f0e0:	20005d0a 	.word	0x20005d0a
   1f0e4:	20005d1a 	.word	0x20005d1a

0001f0e8 <bt_keys_find_addr>:
{
   1f0e8:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   1f0ea:	4c06      	ldr	r4, [pc, #24]	; (1f104 <bt_keys_find_addr+0x1c>)
   1f0ec:	7823      	ldrb	r3, [r4, #0]
   1f0ee:	4283      	cmp	r3, r0
   1f0f0:	d104      	bne.n	1f0fc <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   1f0f2:	2207      	movs	r2, #7
   1f0f4:	1c60      	adds	r0, r4, #1
   1f0f6:	f00e fe5f 	bl	2ddb8 <memcmp>
   1f0fa:	b108      	cbz	r0, 1f100 <bt_keys_find_addr+0x18>
	return NULL;
   1f0fc:	2000      	movs	r0, #0
}
   1f0fe:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1f100:	4620      	mov	r0, r4
   1f102:	e7fc      	b.n	1f0fe <bt_keys_find_addr+0x16>
   1f104:	20005ce0 	.word	0x20005ce0

0001f108 <bt_keys_clear>:
{
   1f108:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   1f10a:	7a03      	ldrb	r3, [r0, #8]
   1f10c:	075b      	lsls	r3, r3, #29
{
   1f10e:	b08c      	sub	sp, #48	; 0x30
   1f110:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1f112:	d501      	bpl.n	1f118 <bt_keys_clear+0x10>
		bt_id_del(keys);
   1f114:	f7fa f8ce 	bl	192b4 <bt_id_del>
		if (keys->id) {
   1f118:	4625      	mov	r5, r4
   1f11a:	f815 2b01 	ldrb.w	r2, [r5], #1
   1f11e:	b1b2      	cbz	r2, 1f14e <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   1f120:	ae02      	add	r6, sp, #8
   1f122:	2104      	movs	r1, #4
   1f124:	4630      	mov	r0, r6
   1f126:	f00a f932 	bl	2938e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1f12a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1f12c:	4a09      	ldr	r2, [pc, #36]	; (1f154 <bt_keys_clear+0x4c>)
   1f12e:	462b      	mov	r3, r5
   1f130:	2124      	movs	r1, #36	; 0x24
   1f132:	a803      	add	r0, sp, #12
   1f134:	f7f8 f956 	bl	173e4 <bt_settings_encode_key>
		settings_delete(key);
   1f138:	a803      	add	r0, sp, #12
   1f13a:	f00a ff4f 	bl	29fdc <settings_delete>
   1f13e:	2288      	movs	r2, #136	; 0x88
   1f140:	2100      	movs	r1, #0
   1f142:	4620      	mov	r0, r4
}
   1f144:	b00c      	add	sp, #48	; 0x30
   1f146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f14a:	f00e be66 	b.w	2de1a <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1f14e:	9200      	str	r2, [sp, #0]
   1f150:	e7ec      	b.n	1f12c <bt_keys_clear+0x24>
   1f152:	bf00      	nop
   1f154:	00031895 	.word	0x00031895

0001f158 <keys_set>:
{
   1f158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f15c:	b0a4      	sub	sp, #144	; 0x90
   1f15e:	4614      	mov	r4, r2
   1f160:	af00      	add	r7, sp, #0
	if (!name) {
   1f162:	4606      	mov	r6, r0
   1f164:	b990      	cbnz	r0, 1f18c <keys_set+0x34>
		BT_ERR("Insufficient number of arguments");
   1f166:	4b70      	ldr	r3, [pc, #448]	; (1f328 <keys_set+0x1d0>)
   1f168:	627b      	str	r3, [r7, #36]	; 0x24
   1f16a:	2302      	movs	r3, #2
   1f16c:	623b      	str	r3, [r7, #32]
   1f16e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f172:	4603      	mov	r3, r0
   1f174:	f107 0220 	add.w	r2, r7, #32
   1f178:	486c      	ldr	r0, [pc, #432]	; (1f32c <keys_set+0x1d4>)
   1f17a:	f7f6 fa87 	bl	1568c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1f17e:	f06f 0515 	mvn.w	r5, #21
}
   1f182:	4628      	mov	r0, r5
   1f184:	3790      	adds	r7, #144	; 0x90
   1f186:	46bd      	mov	sp, r7
   1f188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1f18c:	227c      	movs	r2, #124	; 0x7c
   1f18e:	f107 0110 	add.w	r1, r7, #16
   1f192:	4618      	mov	r0, r3
   1f194:	47a0      	blx	r4
	if (len < 0) {
   1f196:	1e04      	subs	r4, r0, #0
   1f198:	da10      	bge.n	1f1bc <keys_set+0x64>
		BT_ERR("Failed to read value (err %zd)", len);
   1f19a:	466d      	mov	r5, sp
   1f19c:	b088      	sub	sp, #32
   1f19e:	466a      	mov	r2, sp
   1f1a0:	4b63      	ldr	r3, [pc, #396]	; (1f330 <keys_set+0x1d8>)
   1f1a2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1f1a6:	2303      	movs	r3, #3
   1f1a8:	f842 3f10 	str.w	r3, [r2, #16]!
   1f1ac:	485f      	ldr	r0, [pc, #380]	; (1f32c <keys_set+0x1d4>)
   1f1ae:	2300      	movs	r3, #0
   1f1b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f1b4:	f7f6 fa6a 	bl	1568c <z_impl_z_log_msg_static_create>
   1f1b8:	46ad      	mov	sp, r5
   1f1ba:	e7e0      	b.n	1f17e <keys_set+0x26>
	err = bt_settings_decode_key(name, &addr);
   1f1bc:	f107 0108 	add.w	r1, r7, #8
   1f1c0:	4630      	mov	r0, r6
   1f1c2:	f00b fa17 	bl	2a5f4 <bt_settings_decode_key>
	if (err) {
   1f1c6:	4605      	mov	r5, r0
   1f1c8:	b190      	cbz	r0, 1f1f0 <keys_set+0x98>
		BT_ERR("Unable to decode address %s", name);
   1f1ca:	466c      	mov	r4, sp
   1f1cc:	b088      	sub	sp, #32
   1f1ce:	466a      	mov	r2, sp
   1f1d0:	4b58      	ldr	r3, [pc, #352]	; (1f334 <keys_set+0x1dc>)
   1f1d2:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1f1d6:	2302      	movs	r3, #2
   1f1d8:	7713      	strb	r3, [r2, #28]
   1f1da:	4b57      	ldr	r3, [pc, #348]	; (1f338 <keys_set+0x1e0>)
   1f1dc:	f842 3f10 	str.w	r3, [r2, #16]!
   1f1e0:	2300      	movs	r3, #0
   1f1e2:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1f1e6:	4851      	ldr	r0, [pc, #324]	; (1f32c <keys_set+0x1d4>)
   1f1e8:	f7f6 fa50 	bl	1568c <z_impl_z_log_msg_static_create>
   1f1ec:	46a5      	mov	sp, r4
			return -EINVAL;
   1f1ee:	e7c6      	b.n	1f17e <keys_set+0x26>
	settings_name_next(name, &next);
   1f1f0:	1d39      	adds	r1, r7, #4
   1f1f2:	4630      	mov	r0, r6
   1f1f4:	f00a ff19 	bl	2a02a <settings_name_next>
	if (!next) {
   1f1f8:	6878      	ldr	r0, [r7, #4]
   1f1fa:	b188      	cbz	r0, 1f220 <keys_set+0xc8>
		unsigned long next_id = strtoul(next, NULL, 10);
   1f1fc:	220a      	movs	r2, #10
   1f1fe:	4629      	mov	r1, r5
   1f200:	f006 f9c8 	bl	25594 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1f204:	b160      	cbz	r0, 1f220 <keys_set+0xc8>
			BT_ERR("Invalid local identity %lu", next_id);
   1f206:	466c      	mov	r4, sp
   1f208:	b088      	sub	sp, #32
   1f20a:	466a      	mov	r2, sp
   1f20c:	4b4b      	ldr	r3, [pc, #300]	; (1f33c <keys_set+0x1e4>)
   1f20e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f212:	2303      	movs	r3, #3
   1f214:	f842 3f10 	str.w	r3, [r2, #16]!
   1f218:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f21c:	462b      	mov	r3, r5
   1f21e:	e7e2      	b.n	1f1e6 <keys_set+0x8e>
	if (!len) {
   1f220:	bb1c      	cbnz	r4, 1f26a <keys_set+0x112>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1f222:	f107 0208 	add.w	r2, r7, #8
   1f226:	4621      	mov	r1, r4
   1f228:	203f      	movs	r0, #63	; 0x3f
   1f22a:	f7ff ff0d 	bl	1f048 <bt_keys_find>
		if (keys) {
   1f22e:	b128      	cbz	r0, 1f23c <keys_set+0xe4>
   1f230:	2288      	movs	r2, #136	; 0x88
   1f232:	4621      	mov	r1, r4
   1f234:	f00e fdf1 	bl	2de1a <memset>
		return 0;
   1f238:	4625      	mov	r5, r4
   1f23a:	e7a2      	b.n	1f182 <keys_set+0x2a>
			BT_WARN("Unable to find deleted keys for %s",
   1f23c:	f107 0008 	add.w	r0, r7, #8
   1f240:	f7f7 ff78 	bl	17134 <bt_addr_le_str_real>
   1f244:	466d      	mov	r5, sp
   1f246:	b088      	sub	sp, #32
   1f248:	466a      	mov	r2, sp
   1f24a:	4b3d      	ldr	r3, [pc, #244]	; (1f340 <keys_set+0x1e8>)
   1f24c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f250:	2302      	movs	r3, #2
   1f252:	7713      	strb	r3, [r2, #28]
   1f254:	4b38      	ldr	r3, [pc, #224]	; (1f338 <keys_set+0x1e0>)
   1f256:	f842 3f10 	str.w	r3, [r2, #16]!
   1f25a:	4834      	ldr	r0, [pc, #208]	; (1f32c <keys_set+0x1d4>)
   1f25c:	4623      	mov	r3, r4
   1f25e:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   1f262:	f7f6 fa13 	bl	1568c <z_impl_z_log_msg_static_create>
   1f266:	46ad      	mov	sp, r5
   1f268:	e7e6      	b.n	1f238 <keys_set+0xe0>
	keys = bt_keys_get_addr(id, &addr);
   1f26a:	f107 0108 	add.w	r1, r7, #8
   1f26e:	2000      	movs	r0, #0
   1f270:	f7ff fe7a 	bl	1ef68 <bt_keys_get_addr>
	if (!keys) {
   1f274:	4606      	mov	r6, r0
   1f276:	b9c0      	cbnz	r0, 1f2aa <keys_set+0x152>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1f278:	f107 0008 	add.w	r0, r7, #8
   1f27c:	f7f7 ff5a 	bl	17134 <bt_addr_le_str_real>
   1f280:	466c      	mov	r4, sp
   1f282:	b088      	sub	sp, #32
   1f284:	466a      	mov	r2, sp
   1f286:	4b2f      	ldr	r3, [pc, #188]	; (1f344 <keys_set+0x1ec>)
   1f288:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f28c:	2302      	movs	r3, #2
   1f28e:	7713      	strb	r3, [r2, #28]
   1f290:	4b29      	ldr	r3, [pc, #164]	; (1f338 <keys_set+0x1e0>)
   1f292:	f842 3f10 	str.w	r3, [r2, #16]!
   1f296:	4825      	ldr	r0, [pc, #148]	; (1f32c <keys_set+0x1d4>)
   1f298:	4633      	mov	r3, r6
   1f29a:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1f29e:	f7f6 f9f5 	bl	1568c <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   1f2a2:	f06f 050b 	mvn.w	r5, #11
   1f2a6:	46a5      	mov	sp, r4
   1f2a8:	e76b      	b.n	1f182 <keys_set+0x2a>
	if (len != BT_KEYS_STORAGE_LEN) {
   1f2aa:	2c7c      	cmp	r4, #124	; 0x7c
   1f2ac:	d017      	beq.n	1f2de <keys_set+0x186>
		if (IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST) &&
   1f2ae:	2c78      	cmp	r4, #120	; 0x78
   1f2b0:	d124      	bne.n	1f2fc <keys_set+0x1a4>
			BT_WARN("Keys for %s have no aging counter",
   1f2b2:	f107 0008 	add.w	r0, r7, #8
   1f2b6:	f7f7 ff3d 	bl	17134 <bt_addr_le_str_real>
   1f2ba:	46e8      	mov	r8, sp
   1f2bc:	b088      	sub	sp, #32
   1f2be:	466a      	mov	r2, sp
   1f2c0:	4b21      	ldr	r3, [pc, #132]	; (1f348 <keys_set+0x1f0>)
   1f2c2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f2c6:	2302      	movs	r3, #2
   1f2c8:	7713      	strb	r3, [r2, #28]
   1f2ca:	4b1b      	ldr	r3, [pc, #108]	; (1f338 <keys_set+0x1e0>)
   1f2cc:	f842 3f10 	str.w	r3, [r2, #16]!
   1f2d0:	4816      	ldr	r0, [pc, #88]	; (1f32c <keys_set+0x1d4>)
   1f2d2:	2300      	movs	r3, #0
   1f2d4:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   1f2d8:	f7f6 f9d8 	bl	1568c <z_impl_z_log_msg_static_create>
   1f2dc:	46c5      	mov	sp, r8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1f2de:	4622      	mov	r2, r4
   1f2e0:	f107 0110 	add.w	r1, r7, #16
   1f2e4:	f106 000c 	add.w	r0, r6, #12
   1f2e8:	f00e fd76 	bl	2ddd8 <memcpy>
	if (aging_counter_val < keys->aging_counter) {
   1f2ec:	4b17      	ldr	r3, [pc, #92]	; (1f34c <keys_set+0x1f4>)
   1f2ee:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
   1f2f2:	6819      	ldr	r1, [r3, #0]
   1f2f4:	428a      	cmp	r2, r1
		aging_counter_val = keys->aging_counter;
   1f2f6:	bf88      	it	hi
   1f2f8:	601a      	strhi	r2, [r3, #0]
   1f2fa:	e742      	b.n	1f182 <keys_set+0x2a>
			BT_ERR("Invalid key length %zd != %zu", len,
   1f2fc:	466d      	mov	r5, sp
   1f2fe:	b088      	sub	sp, #32
   1f300:	466a      	mov	r2, sp
   1f302:	4b13      	ldr	r3, [pc, #76]	; (1f350 <keys_set+0x1f8>)
   1f304:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1f308:	237c      	movs	r3, #124	; 0x7c
   1f30a:	61d3      	str	r3, [r2, #28]
   1f30c:	2304      	movs	r3, #4
   1f30e:	f842 3f10 	str.w	r3, [r2, #16]!
   1f312:	4806      	ldr	r0, [pc, #24]	; (1f32c <keys_set+0x1d4>)
   1f314:	2300      	movs	r3, #0
   1f316:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f31a:	f7f6 f9b7 	bl	1568c <z_impl_z_log_msg_static_create>
			bt_keys_clear(keys);
   1f31e:	4630      	mov	r0, r6
   1f320:	46ad      	mov	sp, r5
   1f322:	f7ff fef1 	bl	1f108 <bt_keys_clear>
			return -EINVAL;
   1f326:	e72a      	b.n	1f17e <keys_set+0x26>
   1f328:	0002ff39 	.word	0x0002ff39
   1f32c:	0002e5cc 	.word	0x0002e5cc
   1f330:	000317d4 	.word	0x000317d4
   1f334:	00031108 	.word	0x00031108
   1f338:	01000003 	.word	0x01000003
   1f33c:	00031124 	.word	0x00031124
   1f340:	000317f3 	.word	0x000317f3
   1f344:	00031816 	.word	0x00031816
   1f348:	00031835 	.word	0x00031835
   1f34c:	20005cdc 	.word	0x20005cdc
   1f350:	00031857 	.word	0x00031857

0001f354 <bt_keys_store>:
{
   1f354:	b5b0      	push	{r4, r5, r7, lr}
	if (keys->id) {
   1f356:	4605      	mov	r5, r0
{
   1f358:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   1f35a:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1f35e:	af02      	add	r7, sp, #8
   1f360:	4604      	mov	r4, r0
	if (keys->id) {
   1f362:	b332      	cbz	r2, 1f3b2 <bt_keys_store+0x5e>
		u8_to_dec(id, sizeof(id), keys->id);
   1f364:	2104      	movs	r1, #4
   1f366:	4638      	mov	r0, r7
   1f368:	f00a f811 	bl	2938e <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1f36c:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1f36e:	4a12      	ldr	r2, [pc, #72]	; (1f3b8 <bt_keys_store+0x64>)
   1f370:	462b      	mov	r3, r5
   1f372:	2124      	movs	r1, #36	; 0x24
   1f374:	1d38      	adds	r0, r7, #4
   1f376:	f7f8 f835 	bl	173e4 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1f37a:	f104 010c 	add.w	r1, r4, #12
   1f37e:	227c      	movs	r2, #124	; 0x7c
   1f380:	1d38      	adds	r0, r7, #4
   1f382:	f7f6 fdb9 	bl	15ef8 <settings_save_one>
	if (err) {
   1f386:	4604      	mov	r4, r0
   1f388:	b178      	cbz	r0, 1f3aa <bt_keys_store+0x56>
		BT_ERR("Failed to save keys (err %d)", err);
   1f38a:	466d      	mov	r5, sp
   1f38c:	b088      	sub	sp, #32
   1f38e:	aa02      	add	r2, sp, #8
   1f390:	4b0a      	ldr	r3, [pc, #40]	; (1f3bc <bt_keys_store+0x68>)
   1f392:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f396:	2303      	movs	r3, #3
   1f398:	f842 3f10 	str.w	r3, [r2, #16]!
   1f39c:	4808      	ldr	r0, [pc, #32]	; (1f3c0 <bt_keys_store+0x6c>)
   1f39e:	2300      	movs	r3, #0
   1f3a0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f3a4:	f7f6 f972 	bl	1568c <z_impl_z_log_msg_static_create>
   1f3a8:	46ad      	mov	sp, r5
}
   1f3aa:	4620      	mov	r0, r4
   1f3ac:	3728      	adds	r7, #40	; 0x28
   1f3ae:	46bd      	mov	sp, r7
   1f3b0:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1f3b2:	9200      	str	r2, [sp, #0]
   1f3b4:	e7db      	b.n	1f36e <bt_keys_store+0x1a>
   1f3b6:	bf00      	nop
   1f3b8:	00031895 	.word	0x00031895
   1f3bc:	00031875 	.word	0x00031875
   1f3c0:	0002e5cc 	.word	0x0002e5cc

0001f3c4 <bt_keys_update_usage>:

#endif /* CONFIG_BT_SETTINGS */

#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
void bt_keys_update_usage(uint8_t id, const bt_addr_le_t *addr)
{
   1f3c4:	b508      	push	{r3, lr}
	struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1f3c6:	f7ff fe8f 	bl	1f0e8 <bt_keys_find_addr>

	if (!keys) {
   1f3ca:	b150      	cbz	r0, 1f3e2 <bt_keys_update_usage+0x1e>
		return;
	}

	if (last_keys_updated == keys) {
   1f3cc:	4a05      	ldr	r2, [pc, #20]	; (1f3e4 <bt_keys_update_usage+0x20>)
   1f3ce:	6813      	ldr	r3, [r2, #0]
   1f3d0:	4283      	cmp	r3, r0
   1f3d2:	d006      	beq.n	1f3e2 <bt_keys_update_usage+0x1e>
		return;
	}

	keys->aging_counter = ++aging_counter_val;
   1f3d4:	4904      	ldr	r1, [pc, #16]	; (1f3e8 <bt_keys_update_usage+0x24>)
	last_keys_updated = keys;
   1f3d6:	6010      	str	r0, [r2, #0]
	keys->aging_counter = ++aging_counter_val;
   1f3d8:	680b      	ldr	r3, [r1, #0]
   1f3da:	3301      	adds	r3, #1
   1f3dc:	600b      	str	r3, [r1, #0]
   1f3de:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	       keys->aging_counter);

	if (IS_ENABLED(CONFIG_BT_KEYS_SAVE_AGING_COUNTER_ON_PAIRING)) {
		bt_keys_store(keys);
	}
}
   1f3e2:	bd08      	pop	{r3, pc}
   1f3e4:	20005d68 	.word	0x20005d68
   1f3e8:	20005cdc 	.word	0x20005cdc

0001f3ec <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1f3ec:	4b02      	ldr	r3, [pc, #8]	; (1f3f8 <net_buf_pool_get+0xc>)
   1f3ee:	222c      	movs	r2, #44	; 0x2c
   1f3f0:	fb02 3000 	mla	r0, r2, r0, r3
   1f3f4:	4770      	bx	lr
   1f3f6:	bf00      	nop
   1f3f8:	20000c00 	.word	0x20000c00

0001f3fc <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1f3fc:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1f3fe:	4b06      	ldr	r3, [pc, #24]	; (1f418 <net_buf_id+0x1c>)
   1f400:	212c      	movs	r1, #44	; 0x2c
   1f402:	fb01 3302 	mla	r3, r1, r2, r3
   1f406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1f408:	7f1b      	ldrb	r3, [r3, #28]
   1f40a:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1f40c:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1f40e:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1f412:	fbb0 f0f3 	udiv	r0, r0, r3
   1f416:	4770      	bx	lr
   1f418:	20000c00 	.word	0x20000c00

0001f41c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1f41c:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f41e:	4b0a      	ldr	r3, [pc, #40]	; (1f448 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1f420:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f422:	242c      	movs	r4, #44	; 0x2c
   1f424:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1f428:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f42c:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1f42e:	6823      	ldr	r3, [r4, #0]
   1f430:	429a      	cmp	r2, r3
   1f432:	bf94      	ite	ls
   1f434:	600a      	strls	r2, [r1, #0]
   1f436:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1f438:	f7ff ffe0 	bl	1f3fc <net_buf_id>
   1f43c:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1f440:	fb02 3000 	mla	r0, r2, r0, r3
   1f444:	bd10      	pop	{r4, pc}
   1f446:	bf00      	nop
   1f448:	20000c00 	.word	0x20000c00

0001f44c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1f44c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f450:	4605      	mov	r5, r0
   1f452:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1f454:	4610      	mov	r0, r2
   1f456:	4619      	mov	r1, r3
{
   1f458:	4691      	mov	r9, r2
   1f45a:	4698      	mov	r8, r3
   1f45c:	4617      	mov	r7, r2
   1f45e:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1f460:	f00e fb04 	bl	2da6c <sys_clock_timeout_end_calc>
   1f464:	4682      	mov	sl, r0
   1f466:	468b      	mov	fp, r1
	__asm__ volatile(
   1f468:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f46c:	f3ef 8111 	mrs	r1, BASEPRI
   1f470:	f383 8812 	msr	BASEPRI_MAX, r3
   1f474:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1f478:	8b6b      	ldrh	r3, [r5, #26]
   1f47a:	2b00      	cmp	r3, #0
   1f47c:	d05a      	beq.n	1f534 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1f47e:	8b2a      	ldrh	r2, [r5, #24]
   1f480:	429a      	cmp	r2, r3
   1f482:	d93e      	bls.n	1f502 <net_buf_alloc_len+0xb6>
   1f484:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1f486:	2200      	movs	r2, #0
   1f488:	2300      	movs	r3, #0
   1f48a:	4628      	mov	r0, r5
   1f48c:	f003 fffe 	bl	2348c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1f490:	9900      	ldr	r1, [sp, #0]
   1f492:	4604      	mov	r4, r0
   1f494:	2800      	cmp	r0, #0
   1f496:	d034      	beq.n	1f502 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   1f498:	f381 8811 	msr	BASEPRI, r1
   1f49c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1f4a0:	9b01      	ldr	r3, [sp, #4]
   1f4a2:	2b00      	cmp	r3, #0
   1f4a4:	d056      	beq.n	1f554 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1f4a6:	ea58 0309 	orrs.w	r3, r8, r9
   1f4aa:	d00f      	beq.n	1f4cc <net_buf_alloc_len+0x80>
   1f4ac:	f1b8 3fff 	cmp.w	r8, #4294967295
   1f4b0:	bf08      	it	eq
   1f4b2:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1f4b6:	d009      	beq.n	1f4cc <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1f4b8:	f004 ff0a 	bl	242d0 <sys_clock_tick_get>
   1f4bc:	ebba 0700 	subs.w	r7, sl, r0
   1f4c0:	eb6b 0601 	sbc.w	r6, fp, r1
   1f4c4:	2e00      	cmp	r6, #0
   1f4c6:	bfbc      	itt	lt
   1f4c8:	2700      	movlt	r7, #0
   1f4ca:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1f4cc:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1f4ce:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1f56c <net_buf_alloc_len+0x120>
   1f4d2:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1f4d6:	fb09 8303 	mla	r3, r9, r3, r8
   1f4da:	463a      	mov	r2, r7
   1f4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f4de:	681b      	ldr	r3, [r3, #0]
   1f4e0:	a901      	add	r1, sp, #4
   1f4e2:	681d      	ldr	r5, [r3, #0]
   1f4e4:	4620      	mov	r0, r4
   1f4e6:	4633      	mov	r3, r6
   1f4e8:	47a8      	blx	r5
   1f4ea:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1f4ec:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1f4ee:	2800      	cmp	r0, #0
   1f4f0:	d131      	bne.n	1f556 <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   1f4f2:	79a0      	ldrb	r0, [r4, #6]
   1f4f4:	4621      	mov	r1, r4
   1f4f6:	fb00 8009 	mla	r0, r0, r9, r8
   1f4fa:	f00e f804 	bl	2d506 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1f4fe:	462c      	mov	r4, r5
}
   1f500:	e024      	b.n	1f54c <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   1f502:	8b68      	ldrh	r0, [r5, #26]
   1f504:	1e43      	subs	r3, r0, #1
   1f506:	836b      	strh	r3, [r5, #26]
   1f508:	f381 8811 	msr	BASEPRI, r1
   1f50c:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1f510:	7f2a      	ldrb	r2, [r5, #28]
   1f512:	f102 0417 	add.w	r4, r2, #23
   1f516:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1f51a:	8b2c      	ldrh	r4, [r5, #24]
   1f51c:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1f51e:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1f520:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1f524:	4811      	ldr	r0, [pc, #68]	; (1f56c <net_buf_alloc_len+0x120>)
   1f526:	4b12      	ldr	r3, [pc, #72]	; (1f570 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   1f528:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   1f52a:	1a2d      	subs	r5, r5, r0
   1f52c:	10ad      	asrs	r5, r5, #2
   1f52e:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1f530:	71a5      	strb	r5, [r4, #6]
		goto success;
   1f532:	e7b5      	b.n	1f4a0 <net_buf_alloc_len+0x54>
   1f534:	f381 8811 	msr	BASEPRI, r1
   1f538:	f3bf 8f6f 	isb	sy
   1f53c:	464a      	mov	r2, r9
   1f53e:	4643      	mov	r3, r8
   1f540:	4628      	mov	r0, r5
   1f542:	f003 ffa3 	bl	2348c <z_impl_k_queue_get>
	if (!buf) {
   1f546:	4604      	mov	r4, r0
   1f548:	2800      	cmp	r0, #0
   1f54a:	d1a9      	bne.n	1f4a0 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1f54c:	4620      	mov	r0, r4
   1f54e:	b003      	add	sp, #12
   1f550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1f554:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1f556:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1f558:	2201      	movs	r2, #1
	buf->frags = NULL;
   1f55a:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1f55c:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1f55e:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1f560:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1f562:	6923      	ldr	r3, [r4, #16]
   1f564:	81e2      	strh	r2, [r4, #14]
   1f566:	60a3      	str	r3, [r4, #8]
	return buf;
   1f568:	e7f0      	b.n	1f54c <net_buf_alloc_len+0x100>
   1f56a:	bf00      	nop
   1f56c:	20000c00 	.word	0x20000c00
   1f570:	ba2e8ba3 	.word	0xba2e8ba3

0001f574 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1f574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f578:	4d16      	ldr	r5, [pc, #88]	; (1f5d4 <net_buf_unref+0x60>)
   1f57a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1f57c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1f57e:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   1f580:	b90c      	cbnz	r4, 1f586 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1f582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1f586:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1f588:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1f58c:	3b01      	subs	r3, #1
   1f58e:	b2db      	uxtb	r3, r3
   1f590:	7123      	strb	r3, [r4, #4]
   1f592:	2b00      	cmp	r3, #0
   1f594:	d1f5      	bne.n	1f582 <net_buf_unref+0xe>
		if (buf->__buf) {
   1f596:	6921      	ldr	r1, [r4, #16]
   1f598:	b159      	cbz	r1, 1f5b2 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1f59a:	7963      	ldrb	r3, [r4, #5]
   1f59c:	079b      	lsls	r3, r3, #30
   1f59e:	d407      	bmi.n	1f5b0 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1f5a0:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1f5a2:	fb07 5303 	mla	r3, r7, r3, r5
   1f5a6:	4620      	mov	r0, r4
   1f5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f5aa:	681b      	ldr	r3, [r3, #0]
   1f5ac:	689b      	ldr	r3, [r3, #8]
   1f5ae:	4798      	blx	r3
			buf->__buf = NULL;
   1f5b0:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1f5b2:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1f5b4:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1f5b6:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1f5ba:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1f5bc:	6a1b      	ldr	r3, [r3, #32]
   1f5be:	b11b      	cbz	r3, 1f5c8 <net_buf_unref+0x54>
			pool->destroy(buf);
   1f5c0:	4620      	mov	r0, r4
   1f5c2:	4798      	blx	r3
{
   1f5c4:	4644      	mov	r4, r8
   1f5c6:	e7db      	b.n	1f580 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1f5c8:	4621      	mov	r1, r4
   1f5ca:	fb00 5007 	mla	r0, r0, r7, r5
   1f5ce:	f00d ff9a 	bl	2d506 <k_queue_prepend>
}
   1f5d2:	e7f7      	b.n	1f5c4 <net_buf_unref+0x50>
   1f5d4:	20000c00 	.word	0x20000c00

0001f5d8 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1f5d8:	b508      	push	{r3, lr}
	entropy_driver = DEVICE_DT_GET(DT_CHOSEN(zephyr_entropy));
   1f5da:	4b05      	ldr	r3, [pc, #20]	; (1f5f0 <xoshiro128_initialize+0x18>)
   1f5dc:	4805      	ldr	r0, [pc, #20]	; (1f5f4 <xoshiro128_initialize+0x1c>)
   1f5de:	6018      	str	r0, [r3, #0]
   1f5e0:	f00d fe2f 	bl	2d242 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
   1f5e4:	2800      	cmp	r0, #0
	}
	return 0;
}
   1f5e6:	bf0c      	ite	eq
   1f5e8:	f06f 0012 	mvneq.w	r0, #18
   1f5ec:	2000      	movne	r0, #0
   1f5ee:	bd08      	pop	{r3, pc}
   1f5f0:	20005d6c 	.word	0x20005d6c
   1f5f4:	0002e2c4 	.word	0x0002e2c4

0001f5f8 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1f5f8:	4b08      	ldr	r3, [pc, #32]	; (1f61c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1f5fa:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1f5fc:	1ac3      	subs	r3, r0, r3
{
   1f5fe:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1f600:	4907      	ldr	r1, [pc, #28]	; (1f620 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1f602:	109b      	asrs	r3, r3, #2
{
   1f604:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1f606:	4359      	muls	r1, r3
   1f608:	4806      	ldr	r0, [pc, #24]	; (1f624 <onoff_stop+0x2c>)
   1f60a:	2240      	movs	r2, #64	; 0x40
   1f60c:	f00d f9d1 	bl	2c9b2 <stop>
	notify(mgr, res);
   1f610:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1f612:	4601      	mov	r1, r0
	notify(mgr, res);
   1f614:	4620      	mov	r0, r4
}
   1f616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1f61a:	4718      	bx	r3
   1f61c:	20005d80 	.word	0x20005d80
   1f620:	b6db6db7 	.word	0xb6db6db7
   1f624:	0002e24c 	.word	0x0002e24c

0001f628 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1f628:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1f62a:	4c0c      	ldr	r4, [pc, #48]	; (1f65c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1f62c:	4a0c      	ldr	r2, [pc, #48]	; (1f660 <onoff_start+0x38>)
   1f62e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   1f630:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1f632:	9300      	str	r3, [sp, #0]
{
   1f634:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1f636:	460b      	mov	r3, r1
   1f638:	490a      	ldr	r1, [pc, #40]	; (1f664 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   1f63a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1f63c:	4361      	muls	r1, r4
{
   1f63e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1f640:	4809      	ldr	r0, [pc, #36]	; (1f668 <onoff_start+0x40>)
   1f642:	f00d f9e3 	bl	2ca0c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1f646:	1e01      	subs	r1, r0, #0
   1f648:	da05      	bge.n	1f656 <onoff_start+0x2e>
		notify(mgr, err);
   1f64a:	4630      	mov	r0, r6
   1f64c:	462b      	mov	r3, r5
	}
}
   1f64e:	b002      	add	sp, #8
   1f650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1f654:	4718      	bx	r3
}
   1f656:	b002      	add	sp, #8
   1f658:	bd70      	pop	{r4, r5, r6, pc}
   1f65a:	bf00      	nop
   1f65c:	20005d80 	.word	0x20005d80
   1f660:	0002ca7b 	.word	0x0002ca7b
   1f664:	b6db6db7 	.word	0xb6db6db7
   1f668:	0002e24c 	.word	0x0002e24c

0001f66c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1f66c:	2200      	movs	r2, #0
{
   1f66e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1f670:	2101      	movs	r1, #1
{
   1f672:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1f674:	4610      	mov	r0, r2
   1f676:	f7f6 ff97 	bl	165a8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1f67a:	480f      	ldr	r0, [pc, #60]	; (1f6b8 <clk_init+0x4c>)
   1f67c:	f002 fb56 	bl	21d2c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1f680:	4b0e      	ldr	r3, [pc, #56]	; (1f6bc <clk_init+0x50>)
   1f682:	4298      	cmp	r0, r3
   1f684:	d115      	bne.n	1f6b2 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1f686:	f00d fc99 	bl	2cfbc <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1f68a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1f68c:	490c      	ldr	r1, [pc, #48]	; (1f6c0 <clk_init+0x54>)
   1f68e:	4630      	mov	r0, r6
   1f690:	f009 ff9b 	bl	295ca <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1f694:	2800      	cmp	r0, #0
   1f696:	db0b      	blt.n	1f6b0 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
   1f698:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1f69a:	4909      	ldr	r1, [pc, #36]	; (1f6c0 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1f69c:	2501      	movs	r5, #1
   1f69e:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1f6a0:	f104 001c 	add.w	r0, r4, #28
   1f6a4:	f009 ff91 	bl	295ca <onoff_manager_init>
		if (err < 0) {
   1f6a8:	2800      	cmp	r0, #0
   1f6aa:	db01      	blt.n	1f6b0 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1f6ac:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   1f6ae:	2000      	movs	r0, #0
}
   1f6b0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1f6b2:	f06f 0004 	mvn.w	r0, #4
   1f6b6:	e7fb      	b.n	1f6b0 <clk_init+0x44>
   1f6b8:	0001f6f9 	.word	0x0001f6f9
   1f6bc:	0bad0000 	.word	0x0bad0000
   1f6c0:	0002f1cc 	.word	0x0002f1cc

0001f6c4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1f6c4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1f6c6:	230c      	movs	r3, #12
   1f6c8:	4809      	ldr	r0, [pc, #36]	; (1f6f0 <clkstarted_handle.constprop.0+0x2c>)
   1f6ca:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1f6cc:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1f6ce:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1f6d0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   1f6d4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1f6d6:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   1f6d8:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1f6da:	4418      	add	r0, r3
   1f6dc:	f00d f956 	bl	2c98c <set_on_state>
	if (callback) {
   1f6e0:	b12d      	cbz	r5, 1f6ee <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1f6e2:	4632      	mov	r2, r6
   1f6e4:	462b      	mov	r3, r5
   1f6e6:	4803      	ldr	r0, [pc, #12]	; (1f6f4 <clkstarted_handle.constprop.0+0x30>)
}
   1f6e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1f6ec:	4718      	bx	r3
}
   1f6ee:	bd70      	pop	{r4, r5, r6, pc}
   1f6f0:	20005d80 	.word	0x20005d80
   1f6f4:	0002e24c 	.word	0x0002e24c

0001f6f8 <clock_event_handler>:
	switch (event) {
   1f6f8:	b110      	cbz	r0, 1f700 <clock_event_handler+0x8>
   1f6fa:	2801      	cmp	r0, #1
   1f6fc:	d004      	beq.n	1f708 <clock_event_handler+0x10>
   1f6fe:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1f700:	4b03      	ldr	r3, [pc, #12]	; (1f710 <clock_event_handler+0x18>)
   1f702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f704:	075b      	lsls	r3, r3, #29
   1f706:	d101      	bne.n	1f70c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1f708:	f7ff bfdc 	b.w	1f6c4 <clkstarted_handle.constprop.0>
}
   1f70c:	4770      	bx	lr
   1f70e:	bf00      	nop
   1f710:	20005d80 	.word	0x20005d80

0001f714 <generic_hfclk_start>:
{
   1f714:	b508      	push	{r3, lr}
	__asm__ volatile(
   1f716:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f71a:	f3ef 8111 	mrs	r1, BASEPRI
   1f71e:	f383 8812 	msr	BASEPRI_MAX, r3
   1f722:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1f726:	4a12      	ldr	r2, [pc, #72]	; (1f770 <generic_hfclk_start+0x5c>)
   1f728:	6813      	ldr	r3, [r2, #0]
   1f72a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1f72e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1f732:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1f734:	d00c      	beq.n	1f750 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1f736:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1f73a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1f73e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1f742:	f013 0301 	ands.w	r3, r3, #1
   1f746:	d003      	beq.n	1f750 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1f748:	480a      	ldr	r0, [pc, #40]	; (1f774 <generic_hfclk_start+0x60>)
   1f74a:	f00d f91f 	bl	2c98c <set_on_state>
			already_started = true;
   1f74e:	2301      	movs	r3, #1
	__asm__ volatile(
   1f750:	f381 8811 	msr	BASEPRI, r1
   1f754:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1f758:	b123      	cbz	r3, 1f764 <generic_hfclk_start+0x50>
}
   1f75a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1f75e:	2000      	movs	r0, #0
   1f760:	f7ff bfb0 	b.w	1f6c4 <clkstarted_handle.constprop.0>
}
   1f764:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1f768:	2001      	movs	r0, #1
   1f76a:	f002 bacf 	b.w	21d0c <nrfx_clock_start>
   1f76e:	bf00      	nop
   1f770:	20005dd0 	.word	0x20005dd0
   1f774:	20005dc0 	.word	0x20005dc0

0001f778 <api_blocking_start>:
{
   1f778:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1f77a:	2200      	movs	r2, #0
   1f77c:	2301      	movs	r3, #1
   1f77e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1f782:	ab04      	add	r3, sp, #16
   1f784:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1f788:	4a09      	ldr	r2, [pc, #36]	; (1f7b0 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1f78a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1f78e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1f790:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1f794:	f00d f96a 	bl	2ca6c <api_start>
	if (err < 0) {
   1f798:	2800      	cmp	r0, #0
   1f79a:	db05      	blt.n	1f7a8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1f79c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1f7a0:	2300      	movs	r3, #0
   1f7a2:	4668      	mov	r0, sp
   1f7a4:	f003 fecc 	bl	23540 <z_impl_k_sem_take>
}
   1f7a8:	b007      	add	sp, #28
   1f7aa:	f85d fb04 	ldr.w	pc, [sp], #4
   1f7ae:	bf00      	nop
   1f7b0:	0002ca99 	.word	0x0002ca99

0001f7b4 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f7b4:	4b09      	ldr	r3, [pc, #36]	; (1f7dc <generic_hfclk_stop+0x28>)
   1f7b6:	f3bf 8f5b 	dmb	ish
   1f7ba:	e853 2f00 	ldrex	r2, [r3]
   1f7be:	f022 0102 	bic.w	r1, r2, #2
   1f7c2:	e843 1000 	strex	r0, r1, [r3]
   1f7c6:	2800      	cmp	r0, #0
   1f7c8:	d1f7      	bne.n	1f7ba <generic_hfclk_stop+0x6>
   1f7ca:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1f7ce:	07d3      	lsls	r3, r2, #31
   1f7d0:	d402      	bmi.n	1f7d8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1f7d2:	2001      	movs	r0, #1
   1f7d4:	f00d bbed 	b.w	2cfb2 <nrfx_clock_stop>
}
   1f7d8:	4770      	bx	lr
   1f7da:	bf00      	nop
   1f7dc:	20005dd0 	.word	0x20005dd0

0001f7e0 <z_nrf_clock_control_lf_on>:
{
   1f7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f7e2:	4928      	ldr	r1, [pc, #160]	; (1f884 <z_nrf_clock_control_lf_on+0xa4>)
   1f7e4:	f3bf 8f5b 	dmb	ish
   1f7e8:	4606      	mov	r6, r0
   1f7ea:	2201      	movs	r2, #1
   1f7ec:	e851 3f00 	ldrex	r3, [r1]
   1f7f0:	e841 2000 	strex	r0, r2, [r1]
   1f7f4:	2800      	cmp	r0, #0
   1f7f6:	d1f9      	bne.n	1f7ec <z_nrf_clock_control_lf_on+0xc>
   1f7f8:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1f7fc:	b933      	cbnz	r3, 1f80c <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1f7fe:	4922      	ldr	r1, [pc, #136]	; (1f888 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
   1f800:	4822      	ldr	r0, [pc, #136]	; (1f88c <z_nrf_clock_control_lf_on+0xac>)
   1f802:	604b      	str	r3, [r1, #4]
   1f804:	60cb      	str	r3, [r1, #12]
   1f806:	608a      	str	r2, [r1, #8]
   1f808:	f009 fef2 	bl	295f0 <onoff_request>
	switch (start_mode) {
   1f80c:	1e73      	subs	r3, r6, #1
   1f80e:	2b01      	cmp	r3, #1
   1f810:	d820      	bhi.n	1f854 <z_nrf_clock_control_lf_on+0x74>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1f812:	f00d fdce 	bl	2d3b2 <k_is_in_isr>
   1f816:	4604      	mov	r4, r0
   1f818:	b910      	cbnz	r0, 1f820 <z_nrf_clock_control_lf_on+0x40>
	return !z_sys_post_kernel;
   1f81a:	4b1d      	ldr	r3, [pc, #116]	; (1f890 <z_nrf_clock_control_lf_on+0xb0>)
	int key = isr_mode ? irq_lock() : 0;
   1f81c:	781b      	ldrb	r3, [r3, #0]
   1f81e:	bb53      	cbnz	r3, 1f876 <z_nrf_clock_control_lf_on+0x96>
	__asm__ volatile(
   1f820:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f824:	f3ef 8511 	mrs	r5, BASEPRI
   1f828:	f383 8812 	msr	BASEPRI_MAX, r3
   1f82c:	f3bf 8f6f 	isb	sy
   1f830:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1f832:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   1f836:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1f83a:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
   1f83e:	03d2      	lsls	r2, r2, #15
   1f840:	d509      	bpl.n	1f856 <z_nrf_clock_control_lf_on+0x76>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1f842:	079b      	lsls	r3, r3, #30
   1f844:	d001      	beq.n	1f84a <z_nrf_clock_control_lf_on+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1f846:	2e01      	cmp	r6, #1
   1f848:	d105      	bne.n	1f856 <z_nrf_clock_control_lf_on+0x76>
	if (isr_mode) {
   1f84a:	b174      	cbz	r4, 1f86a <z_nrf_clock_control_lf_on+0x8a>
	__asm__ volatile(
   1f84c:	f385 8811 	msr	BASEPRI, r5
   1f850:	f3bf 8f6f 	isb	sy
}
   1f854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1f856:	b11c      	cbz	r4, 1f860 <z_nrf_clock_control_lf_on+0x80>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1f858:	4628      	mov	r0, r5
   1f85a:	f7f6 fe03 	bl	16464 <arch_cpu_atomic_idle>
}
   1f85e:	e7ea      	b.n	1f836 <z_nrf_clock_control_lf_on+0x56>
	return z_impl_k_sleep(timeout);
   1f860:	2100      	movs	r1, #0
   1f862:	2021      	movs	r0, #33	; 0x21
   1f864:	f004 fb4e 	bl	23f04 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1f868:	e7e5      	b.n	1f836 <z_nrf_clock_control_lf_on+0x56>
    p_reg->INTENSET = mask;
   1f86a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f86e:	2202      	movs	r2, #2
   1f870:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1f874:	e7ee      	b.n	1f854 <z_nrf_clock_control_lf_on+0x74>
    p_reg->INTENCLR = mask;
   1f876:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f87a:	2202      	movs	r2, #2
   1f87c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1f880:	4605      	mov	r5, r0
}
   1f882:	e7d6      	b.n	1f832 <z_nrf_clock_control_lf_on+0x52>
   1f884:	20005dd4 	.word	0x20005dd4
   1f888:	20005d70 	.word	0x20005d70
   1f88c:	20005d9c 	.word	0x20005d9c
   1f890:	20007847 	.word	0x20007847

0001f894 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   1f894:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   1f896:	4c04      	ldr	r4, [pc, #16]	; (1f8a8 <rtt_console_init+0x14>)
   1f898:	4620      	mov	r0, r4
   1f89a:	f7f4 ff6d 	bl	14778 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   1f89e:	4620      	mov	r0, r4
   1f8a0:	f7f7 fb9a 	bl	16fd8 <__stdout_hook_install>

	return 0;
}
   1f8a4:	2000      	movs	r0, #0
   1f8a6:	bd10      	pop	{r4, pc}
   1f8a8:	0001f8ad 	.word	0x0001f8ad

0001f8ac <rtt_console_out>:
{
   1f8ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f8ae:	4e13      	ldr	r6, [pc, #76]	; (1f8fc <rtt_console_out+0x50>)
	char c = (char)character;
   1f8b0:	f88d 0007 	strb.w	r0, [sp, #7]
{
   1f8b4:	4604      	mov	r4, r0
	char c = (char)character;
   1f8b6:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
   1f8b8:	f003 fa82 	bl	22dc0 <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   1f8bc:	2201      	movs	r2, #1
   1f8be:	f10d 0107 	add.w	r1, sp, #7
   1f8c2:	2000      	movs	r0, #0
   1f8c4:	f003 fa42 	bl	22d4c <SEGGER_RTT_WriteNoLock>
   1f8c8:	4607      	mov	r7, r0
		SEGGER_RTT_UNLOCK();
   1f8ca:	f003 fa83 	bl	22dd4 <zephyr_rtt_mutex_unlock>
		if (cnt) {
   1f8ce:	b127      	cbz	r7, 1f8da <rtt_console_out+0x2e>
			host_present = true;
   1f8d0:	2301      	movs	r3, #1
   1f8d2:	7033      	strb	r3, [r6, #0]
}
   1f8d4:	4620      	mov	r0, r4
   1f8d6:	b003      	add	sp, #12
   1f8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
   1f8da:	7833      	ldrb	r3, [r6, #0]
   1f8dc:	2b00      	cmp	r3, #0
   1f8de:	d0f9      	beq.n	1f8d4 <rtt_console_out+0x28>
			if (max_cnt) {
   1f8e0:	3d01      	subs	r5, #1
   1f8e2:	d008      	beq.n	1f8f6 <rtt_console_out+0x4a>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   1f8e4:	f00d fd65 	bl	2d3b2 <k_is_in_isr>
   1f8e8:	2800      	cmp	r0, #0
   1f8ea:	d1e5      	bne.n	1f8b8 <rtt_console_out+0xc>
   1f8ec:	2100      	movs	r1, #0
   1f8ee:	2042      	movs	r0, #66	; 0x42
   1f8f0:	f004 fb08 	bl	23f04 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
   1f8f4:	e7e0      	b.n	1f8b8 <rtt_console_out+0xc>
				host_present = false;
   1f8f6:	7035      	strb	r5, [r6, #0]
   1f8f8:	e7ec      	b.n	1f8d4 <rtt_console_out+0x28>
   1f8fa:	bf00      	nop
   1f8fc:	20006c31 	.word	0x20006c31

0001f900 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1f900:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   1f902:	4b08      	ldr	r3, [pc, #32]	; (1f924 <uart_console_init+0x24>)
   1f904:	4808      	ldr	r0, [pc, #32]	; (1f928 <uart_console_init+0x28>)
   1f906:	6018      	str	r0, [r3, #0]
   1f908:	f00d fc9b 	bl	2d242 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   1f90c:	b138      	cbz	r0, 1f91e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   1f90e:	4807      	ldr	r0, [pc, #28]	; (1f92c <uart_console_init+0x2c>)
   1f910:	f7f7 fb62 	bl	16fd8 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1f914:	4805      	ldr	r0, [pc, #20]	; (1f92c <uart_console_init+0x2c>)
   1f916:	f7f4 ff2f 	bl	14778 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1f91a:	2000      	movs	r0, #0
}
   1f91c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1f91e:	f06f 0012 	mvn.w	r0, #18
   1f922:	e7fb      	b.n	1f91c <uart_console_init+0x1c>
   1f924:	20005dd8 	.word	0x20005dd8
   1f928:	0002e2dc 	.word	0x0002e2dc
   1f92c:	0001f931 	.word	0x0001f931

0001f930 <console_out>:
	if ('\n' == c) {
   1f930:	280a      	cmp	r0, #10
{
   1f932:	b538      	push	{r3, r4, r5, lr}
   1f934:	4d07      	ldr	r5, [pc, #28]	; (1f954 <console_out+0x24>)
   1f936:	4604      	mov	r4, r0
	if ('\n' == c) {
   1f938:	d104      	bne.n	1f944 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   1f93a:	6828      	ldr	r0, [r5, #0]
   1f93c:	6883      	ldr	r3, [r0, #8]
   1f93e:	210d      	movs	r1, #13
   1f940:	685b      	ldr	r3, [r3, #4]
   1f942:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   1f944:	6828      	ldr	r0, [r5, #0]
   1f946:	6883      	ldr	r3, [r0, #8]
   1f948:	b2e1      	uxtb	r1, r4
   1f94a:	685b      	ldr	r3, [r3, #4]
   1f94c:	4798      	blx	r3
}
   1f94e:	4620      	mov	r0, r4
   1f950:	bd38      	pop	{r3, r4, r5, pc}
   1f952:	bf00      	nop
   1f954:	20005dd8 	.word	0x20005dd8

0001f958 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1f958:	b530      	push	{r4, r5, lr}
	return port->config;
   1f95a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1f95c:	7b04      	ldrb	r4, [r0, #12]
   1f95e:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1f962:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1f966:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   1f96a:	b085      	sub	sp, #20
   1f96c:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   1f970:	d105      	bne.n	1f97e <gpio_nrfx_pin_interrupt_configure+0x26>
		nrfx_gpiote_trigger_disable(abs_pin);
   1f972:	4628      	mov	r0, r5
   1f974:	f002 fe82 	bl	2267c <nrfx_gpiote_trigger_disable>
		return -EINVAL;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   1f978:	2000      	movs	r0, #0
}
   1f97a:	b005      	add	sp, #20
   1f97c:	bd30      	pop	{r4, r5, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
   1f97e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1f982:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1f986:	d134      	bne.n	1f9f2 <gpio_nrfx_pin_interrupt_configure+0x9a>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1f988:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1f98c:	bf0c      	ite	eq
   1f98e:	2304      	moveq	r3, #4
   1f990:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1f992:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1f996:	6883      	ldr	r3, [r0, #8]
   1f998:	fa23 f101 	lsr.w	r1, r3, r1
   1f99c:	07c9      	lsls	r1, r1, #31
   1f99e:	d41a      	bmi.n	1f9d6 <gpio_nrfx_pin_interrupt_configure+0x7e>
   1f9a0:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1f9a4:	d117      	bne.n	1f9d6 <gpio_nrfx_pin_interrupt_configure+0x7e>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1f9a6:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   1f9a8:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1f9aa:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   1f9ae:	4a1c      	ldr	r2, [pc, #112]	; (1fa20 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1f9b0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   1f9b4:	bf18      	it	ne
   1f9b6:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1f9ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1f9be:	07db      	lsls	r3, r3, #31
   1f9c0:	d409      	bmi.n	1f9d6 <gpio_nrfx_pin_interrupt_configure+0x7e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1f9c2:	f10d 0407 	add.w	r4, sp, #7
   1f9c6:	4621      	mov	r1, r4
   1f9c8:	4628      	mov	r0, r5
   1f9ca:	f002 fdbb 	bl	22544 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1f9ce:	4b15      	ldr	r3, [pc, #84]	; (1fa24 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   1f9d0:	4298      	cmp	r0, r3
   1f9d2:	d019      	beq.n	1fa08 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
   1f9d4:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1f9d6:	2300      	movs	r3, #0
   1f9d8:	4619      	mov	r1, r3
   1f9da:	aa02      	add	r2, sp, #8
   1f9dc:	4628      	mov	r0, r5
   1f9de:	f002 fc8b 	bl	222f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1f9e2:	4b11      	ldr	r3, [pc, #68]	; (1fa28 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   1f9e4:	4298      	cmp	r0, r3
   1f9e6:	d118      	bne.n	1fa1a <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1f9e8:	2101      	movs	r1, #1
   1f9ea:	4628      	mov	r0, r5
   1f9ec:	f002 fdfe 	bl	225ec <nrfx_gpiote_trigger_enable>
   1f9f0:	e7c2      	b.n	1f978 <gpio_nrfx_pin_interrupt_configure+0x20>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1f9f2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1f9f6:	d005      	beq.n	1fa04 <gpio_nrfx_pin_interrupt_configure+0xac>
   1f9f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1f9fc:	bf0c      	ite	eq
   1f9fe:	2302      	moveq	r3, #2
   1fa00:	2301      	movne	r3, #1
   1fa02:	e7c6      	b.n	1f992 <gpio_nrfx_pin_interrupt_configure+0x3a>
   1fa04:	2303      	movs	r3, #3
   1fa06:	e7c4      	b.n	1f992 <gpio_nrfx_pin_interrupt_configure+0x3a>
			err = nrfx_gpiote_channel_alloc(&ch);
   1fa08:	4620      	mov	r0, r4
   1fa0a:	f002 fde9 	bl	225e0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1fa0e:	4b06      	ldr	r3, [pc, #24]	; (1fa28 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   1fa10:	4298      	cmp	r0, r3
   1fa12:	d0df      	beq.n	1f9d4 <gpio_nrfx_pin_interrupt_configure+0x7c>
				return -ENOMEM;
   1fa14:	f06f 000b 	mvn.w	r0, #11
   1fa18:	e7af      	b.n	1f97a <gpio_nrfx_pin_interrupt_configure+0x22>
		return -EINVAL;
   1fa1a:	f06f 0015 	mvn.w	r0, #21
   1fa1e:	e7ac      	b.n	1f97a <gpio_nrfx_pin_interrupt_configure+0x22>
   1fa20:	50000300 	.word	0x50000300
   1fa24:	0bad0004 	.word	0x0bad0004
   1fa28:	0bad0000 	.word	0x0bad0000

0001fa2c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1fa2c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1fa2e:	f002 fdc7 	bl	225c0 <nrfx_gpiote_is_init>
   1fa32:	4604      	mov	r4, r0
   1fa34:	b968      	cbnz	r0, 1fa52 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1fa36:	f002 fd9b 	bl	22570 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1fa3a:	4b08      	ldr	r3, [pc, #32]	; (1fa5c <gpio_nrfx_init+0x30>)
   1fa3c:	4298      	cmp	r0, r3
   1fa3e:	d10a      	bne.n	1fa56 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1fa40:	4807      	ldr	r0, [pc, #28]	; (1fa60 <gpio_nrfx_init+0x34>)
   1fa42:	4621      	mov	r1, r4
   1fa44:	f002 fd78 	bl	22538 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1fa48:	4622      	mov	r2, r4
   1fa4a:	2105      	movs	r1, #5
   1fa4c:	2006      	movs	r0, #6
   1fa4e:	f7f6 fdab 	bl	165a8 <z_arm_irq_priority_set>
		return 0;
   1fa52:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1fa54:	bd10      	pop	{r4, pc}
		return -EIO;
   1fa56:	f06f 0004 	mvn.w	r0, #4
   1fa5a:	e7fb      	b.n	1fa54 <gpio_nrfx_init+0x28>
   1fa5c:	0bad0000 	.word	0x0bad0000
   1fa60:	0001fa65 	.word	0x0001fa65

0001fa64 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1fa64:	0942      	lsrs	r2, r0, #5
{
   1fa66:	b570      	push	{r4, r5, r6, lr}
   1fa68:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1fa6a:	d002      	beq.n	1fa72 <nrfx_gpio_handler+0xe>
   1fa6c:	2a01      	cmp	r2, #1
   1fa6e:	d015      	beq.n	1fa9c <nrfx_gpio_handler+0x38>
}
   1fa70:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1fa72:	4e0b      	ldr	r6, [pc, #44]	; (1faa0 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1fa74:	6932      	ldr	r2, [r6, #16]
   1fa76:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1fa78:	2900      	cmp	r1, #0
   1fa7a:	d0f9      	beq.n	1fa70 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   1fa7c:	f003 031f 	and.w	r3, r3, #31
   1fa80:	2501      	movs	r5, #1
   1fa82:	680c      	ldr	r4, [r1, #0]
   1fa84:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   1fa86:	688a      	ldr	r2, [r1, #8]
   1fa88:	402a      	ands	r2, r5
   1fa8a:	d002      	beq.n	1fa92 <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1fa8c:	684b      	ldr	r3, [r1, #4]
   1fa8e:	4630      	mov	r0, r6
   1fa90:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1fa92:	2c00      	cmp	r4, #0
   1fa94:	d0ec      	beq.n	1fa70 <nrfx_gpio_handler+0xc>
   1fa96:	4621      	mov	r1, r4
   1fa98:	6824      	ldr	r4, [r4, #0]
   1fa9a:	e7f4      	b.n	1fa86 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1fa9c:	4e01      	ldr	r6, [pc, #4]	; (1faa4 <nrfx_gpio_handler+0x40>)
   1fa9e:	e7e9      	b.n	1fa74 <nrfx_gpio_handler+0x10>
   1faa0:	0002e264 	.word	0x0002e264
   1faa4:	0002e27c 	.word	0x0002e27c

0001faa8 <gpio_nrfx_pin_configure>:
{
   1faa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   1faac:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1fab0:	f898 300c 	ldrb.w	r3, [r8, #12]
   1fab4:	f001 061f 	and.w	r6, r1, #31
{
   1fab8:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1faba:	ea46 1643 	orr.w	r6, r6, r3, lsl #5
{
   1fabe:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1fac0:	4630      	mov	r0, r6
   1fac2:	f10d 0103 	add.w	r1, sp, #3
{
   1fac6:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1fac8:	f002 fd3c 	bl	22544 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1facc:	f414 3540 	ands.w	r5, r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1fad0:	4681      	mov	r9, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1fad2:	d10b      	bne.n	1faec <gpio_nrfx_pin_configure+0x44>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1fad4:	4630      	mov	r0, r6
   1fad6:	f002 fdf9 	bl	226cc <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1fada:	4b43      	ldr	r3, [pc, #268]	; (1fbe8 <gpio_nrfx_pin_configure+0x140>)
   1fadc:	4599      	cmp	r9, r3
   1fade:	d103      	bne.n	1fae8 <gpio_nrfx_pin_configure+0x40>
			err = nrfx_gpiote_channel_free(ch);
   1fae0:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1fae4:	f002 fd76 	bl	225d4 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1fae8:	2000      	movs	r0, #0
   1faea:	e057      	b.n	1fb9c <gpio_nrfx_pin_configure+0xf4>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1faec:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1faee:	4619      	mov	r1, r3
   1faf0:	aa02      	add	r2, sp, #8
   1faf2:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   1faf4:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1faf8:	f002 fbfe 	bl	222f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1fafc:	4b3a      	ldr	r3, [pc, #232]	; (1fbe8 <gpio_nrfx_pin_configure+0x140>)
   1fafe:	4298      	cmp	r0, r3
   1fb00:	d002      	beq.n	1fb08 <gpio_nrfx_pin_configure+0x60>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1fb02:	f06f 0015 	mvn.w	r0, #21
   1fb06:	e049      	b.n	1fb9c <gpio_nrfx_pin_configure+0xf4>
	if (free_ch) {
   1fb08:	4581      	cmp	r9, r0
   1fb0a:	d103      	bne.n	1fb14 <gpio_nrfx_pin_configure+0x6c>
		err = nrfx_gpiote_channel_free(ch);
   1fb0c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1fb10:	f002 fd60 	bl	225d4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1fb14:	03a5      	lsls	r5, r4, #14
   1fb16:	d554      	bpl.n	1fbc2 <gpio_nrfx_pin_configure+0x11a>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1fb18:	f240 3306 	movw	r3, #774	; 0x306
   1fb1c:	4023      	ands	r3, r4
   1fb1e:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1fb22:	d03e      	beq.n	1fba2 <gpio_nrfx_pin_configure+0xfa>
   1fb24:	d80c      	bhi.n	1fb40 <gpio_nrfx_pin_configure+0x98>
   1fb26:	2b06      	cmp	r3, #6
   1fb28:	d015      	beq.n	1fb56 <gpio_nrfx_pin_configure+0xae>
   1fb2a:	d804      	bhi.n	1fb36 <gpio_nrfx_pin_configure+0x8e>
   1fb2c:	b19b      	cbz	r3, 1fb56 <gpio_nrfx_pin_configure+0xae>
   1fb2e:	2b02      	cmp	r3, #2
   1fb30:	d1e7      	bne.n	1fb02 <gpio_nrfx_pin_configure+0x5a>
   1fb32:	2304      	movs	r3, #4
   1fb34:	e00f      	b.n	1fb56 <gpio_nrfx_pin_configure+0xae>
   1fb36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1fb3a:	d1e2      	bne.n	1fb02 <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_H0S1;
   1fb3c:	2301      	movs	r3, #1
   1fb3e:	e00a      	b.n	1fb56 <gpio_nrfx_pin_configure+0xae>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1fb40:	f240 2202 	movw	r2, #514	; 0x202
   1fb44:	4293      	cmp	r3, r2
   1fb46:	d02e      	beq.n	1fba6 <gpio_nrfx_pin_configure+0xfe>
   1fb48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1fb4c:	d02d      	beq.n	1fbaa <gpio_nrfx_pin_configure+0x102>
   1fb4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1fb52:	d1d6      	bne.n	1fb02 <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_S0H1;
   1fb54:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   1fb56:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1fb5a:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1fb5e:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1fb62:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1fb64:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   1fb68:	bf54      	ite	pl
   1fb6a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1fb6e:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1fb70:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1fb72:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1fb76:	d51a      	bpl.n	1fbae <gpio_nrfx_pin_configure+0x106>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1fb78:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1fb7c:	2101      	movs	r1, #1
   1fb7e:	fa01 f707 	lsl.w	r7, r1, r7
    p_reg->OUTSET = set_mask;
   1fb82:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1fb86:	2200      	movs	r2, #0
   1fb88:	a901      	add	r1, sp, #4
   1fb8a:	4630      	mov	r0, r6
   1fb8c:	f002 fc62 	bl	22454 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1fb90:	4b15      	ldr	r3, [pc, #84]	; (1fbe8 <gpio_nrfx_pin_configure+0x140>)
   1fb92:	4298      	cmp	r0, r3
   1fb94:	bf14      	ite	ne
   1fb96:	f06f 0015 	mvnne.w	r0, #21
   1fb9a:	2000      	moveq	r0, #0
}
   1fb9c:	b005      	add	sp, #20
   1fb9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*drive = NRF_GPIO_PIN_H0D1;
   1fba2:	2307      	movs	r3, #7
   1fba4:	e7d7      	b.n	1fb56 <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_D0H1;
   1fba6:	2305      	movs	r3, #5
   1fba8:	e7d5      	b.n	1fb56 <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_H0H1;
   1fbaa:	2303      	movs	r3, #3
   1fbac:	e7d3      	b.n	1fb56 <gpio_nrfx_pin_configure+0xae>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1fbae:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1fbb0:	bf41      	itttt	mi
   1fbb2:	f8d8 3004 	ldrmi.w	r3, [r8, #4]
   1fbb6:	2101      	movmi	r1, #1
   1fbb8:	fa01 f707 	lslmi.w	r7, r1, r7
    p_reg->OUTCLR = clr_mask;
   1fbbc:	f8c3 750c 	strmi.w	r7, [r3, #1292]	; 0x50c
}
   1fbc0:	e7e1      	b.n	1fb86 <gpio_nrfx_pin_configure+0xde>
	if (flags & GPIO_PULL_UP) {
   1fbc2:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1fbc4:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1fbc8:	bf54      	ite	pl
   1fbca:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   1fbce:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1fbd0:	461a      	mov	r2, r3
   1fbd2:	a901      	add	r1, sp, #4
   1fbd4:	4630      	mov	r0, r6
	nrfx_gpiote_input_config_t input_config = {
   1fbd6:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1fbda:	f002 fb8d 	bl	222f8 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1fbde:	4b02      	ldr	r3, [pc, #8]	; (1fbe8 <gpio_nrfx_pin_configure+0x140>)
   1fbe0:	4298      	cmp	r0, r3
   1fbe2:	d081      	beq.n	1fae8 <gpio_nrfx_pin_configure+0x40>
   1fbe4:	e78d      	b.n	1fb02 <gpio_nrfx_pin_configure+0x5a>
   1fbe6:	bf00      	nop
   1fbe8:	0bad0000 	.word	0x0bad0000

0001fbec <spi_nrfx_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int spi_nrfx_init(const struct device *dev)
{
   1fbec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fbf0:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
   1fbf2:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1fbf4:	6905      	ldr	r5, [r0, #16]
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1fbf6:	6a26      	ldr	r6, [r4, #32]
{
   1fbf8:	af00      	add	r7, sp, #0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1fbfa:	1d3a      	adds	r2, r7, #4
   1fbfc:	2100      	movs	r1, #0
   1fbfe:	4630      	mov	r0, r6
   1fc00:	f00d f887 	bl	2cd12 <pinctrl_lookup_state>
	if (ret < 0) {
   1fc04:	2800      	cmp	r0, #0
   1fc06:	db32      	blt.n	1fc6e <spi_nrfx_init+0x82>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1fc08:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1fc0a:	6832      	ldr	r2, [r6, #0]
   1fc0c:	7919      	ldrb	r1, [r3, #4]
   1fc0e:	6818      	ldr	r0, [r3, #0]
   1fc10:	f00d f89c 	bl	2cd4c <pinctrl_configure_pins>
	if (err < 0) {
   1fc14:	2800      	cmp	r0, #0
   1fc16:	db2a      	blt.n	1fc6e <spi_nrfx_init+0x82>
		return err;
	}
#endif

	dev_config->irq_connect();
   1fc18:	69e3      	ldr	r3, [r4, #28]
   1fc1a:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1fc1c:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1fc1e:	2601      	movs	r6, #1
   1fc20:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   1fc24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1fc28:	429c      	cmp	r4, r3
   1fc2a:	d304      	bcc.n	1fc36 <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1fc2c:	4628      	mov	r0, r5
   1fc2e:	f00c ffdb 	bl	2cbe8 <spi_context_unlock_unconditionally>

	return 0;
   1fc32:	2000      	movs	r0, #0
   1fc34:	e01b      	b.n	1fc6e <spi_nrfx_init+0x82>
		if (!device_is_ready(cs_gpio->port)) {
   1fc36:	6820      	ldr	r0, [r4, #0]
   1fc38:	f00d fb03 	bl	2d242 <z_device_is_ready>
   1fc3c:	b9d8      	cbnz	r0, 1fc76 <spi_nrfx_init+0x8a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1fc3e:	6823      	ldr	r3, [r4, #0]
   1fc40:	6819      	ldr	r1, [r3, #0]
   1fc42:	7923      	ldrb	r3, [r4, #4]
   1fc44:	466c      	mov	r4, sp
   1fc46:	b08a      	sub	sp, #40	; 0x28
   1fc48:	466a      	mov	r2, sp
   1fc4a:	481c      	ldr	r0, [pc, #112]	; (1fcbc <spi_nrfx_init+0xd0>)
   1fc4c:	61d3      	str	r3, [r2, #28]
   1fc4e:	2302      	movs	r3, #2
   1fc50:	f882 3020 	strb.w	r3, [r2, #32]
   1fc54:	4b1a      	ldr	r3, [pc, #104]	; (1fcc0 <spi_nrfx_init+0xd4>)
   1fc56:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1fc5a:	481a      	ldr	r0, [pc, #104]	; (1fcc4 <spi_nrfx_init+0xd8>)
   1fc5c:	f842 3f10 	str.w	r3, [r2, #16]!
   1fc60:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   1fc64:	f00c ff87 	bl	2cb76 <z_log_msg_static_create.constprop.0>
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
   1fc68:	f06f 0012 	mvn.w	r0, #18
   1fc6c:	46a5      	mov	sp, r4
}
   1fc6e:	370c      	adds	r7, #12
   1fc70:	46bd      	mov	sp, r7
   1fc72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return gpio_pin_configure(spec->port,
   1fc76:	6820      	ldr	r0, [r4, #0]
   1fc78:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   1fc7a:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
   1fc7c:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
   1fc80:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1fc84:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1fc88:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   1fc8a:	bf54      	ite	pl
   1fc8c:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1fc90:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1fc94:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1fc98:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1fc9c:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1fc9e:	bf4c      	ite	mi
   1fca0:	ea4c 0308 	orrmi.w	r3, ip, r8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1fca4:	ea2c 0308 	bicpl.w	r3, ip, r8
   1fca8:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
   1fcac:	f8d9 3000 	ldr.w	r3, [r9]
   1fcb0:	4798      	blx	r3
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
   1fcb2:	2800      	cmp	r0, #0
   1fcb4:	dbdb      	blt.n	1fc6e <spi_nrfx_init+0x82>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1fcb6:	3408      	adds	r4, #8
   1fcb8:	e7b2      	b.n	1fc20 <spi_nrfx_init+0x34>
   1fcba:	bf00      	nop
   1fcbc:	000318ef 	.word	0x000318ef
   1fcc0:	01000004 	.word	0x01000004
   1fcc4:	0002e68c 	.word	0x0002e68c

0001fcc8 <transfer_next_chunk>:
{
   1fcc8:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1fcca:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1fccc:	6daa      	ldr	r2, [r5, #88]	; 0x58
		return ctx->rx_len;
   1fcce:	6e2b      	ldr	r3, [r5, #96]	; 0x60
{
   1fcd0:	b085      	sub	sp, #20
	if (!ctx->tx_len) {
   1fcd2:	b982      	cbnz	r2, 1fcf6 <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
   1fcd4:	bb73      	cbnz	r3, 1fd34 <transfer_next_chunk+0x6c>
	int error = 0;
   1fcd6:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   1fcd8:	2200      	movs	r2, #0
   1fcda:	4611      	mov	r1, r2
   1fcdc:	4628      	mov	r0, r5
   1fcde:	f00c ff61 	bl	2cba4 <_spi_context_cs_control>
	ctx->sync_status = status;
   1fce2:	642c      	str	r4, [r5, #64]	; 0x40
	z_impl_k_sem_give(sem);
   1fce4:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1fce8:	f003 fc04 	bl	234f4 <z_impl_k_sem_give>
	dev_data->busy = false;
   1fcec:	2300      	movs	r3, #0
   1fcee:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
}
   1fcf2:	b005      	add	sp, #20
   1fcf4:	bd30      	pop	{r4, r5, pc}
	} else if (!ctx->rx_len) {
   1fcf6:	4611      	mov	r1, r2
   1fcf8:	b113      	cbz	r3, 1fd00 <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1fcfa:	429a      	cmp	r2, r3
   1fcfc:	bf28      	it	cs
   1fcfe:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
   1fd00:	6d6c      	ldr	r4, [r5, #84]	; 0x54
	const struct spi_nrfx_config *dev_config = dev->config;
   1fd02:	6840      	ldr	r0, [r0, #4]
		xfer.p_tx_buffer = ctx->tx_buf;
   1fd04:	9400      	str	r4, [sp, #0]
		dev_data->chunk_len = chunk_len;
   1fd06:	66a9      	str	r1, [r5, #104]	; 0x68
	return !!(ctx->tx_buf && ctx->tx_len);
   1fd08:	b1b4      	cbz	r4, 1fd38 <transfer_next_chunk+0x70>
   1fd0a:	2a00      	cmp	r2, #0
   1fd0c:	bf18      	it	ne
   1fd0e:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1fd10:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1fd12:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1fd14:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1fd16:	b18a      	cbz	r2, 1fd3c <transfer_next_chunk+0x74>
   1fd18:	2b00      	cmp	r3, #0
   1fd1a:	bf18      	it	ne
   1fd1c:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
   1fd1e:	2200      	movs	r2, #0
   1fd20:	4669      	mov	r1, sp
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1fd22:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
   1fd24:	f002 fef8 	bl	22b18 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   1fd28:	4b05      	ldr	r3, [pc, #20]	; (1fd40 <transfer_next_chunk+0x78>)
   1fd2a:	4298      	cmp	r0, r3
   1fd2c:	d0e1      	beq.n	1fcf2 <transfer_next_chunk+0x2a>
		error = -EIO;
   1fd2e:	f06f 0404 	mvn.w	r4, #4
   1fd32:	e7d1      	b.n	1fcd8 <transfer_next_chunk+0x10>
   1fd34:	4619      	mov	r1, r3
   1fd36:	e7e3      	b.n	1fd00 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1fd38:	4622      	mov	r2, r4
   1fd3a:	e7e9      	b.n	1fd10 <transfer_next_chunk+0x48>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1fd3c:	4613      	mov	r3, r2
   1fd3e:	e7ee      	b.n	1fd1e <transfer_next_chunk+0x56>
   1fd40:	0bad0000 	.word	0x0bad0000

0001fd44 <event_handler>:
{
   1fd44:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1fd46:	7803      	ldrb	r3, [r0, #0]
{
   1fd48:	b086      	sub	sp, #24
   1fd4a:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1fd4c:	2b00      	cmp	r3, #0
   1fd4e:	d154      	bne.n	1fdfa <event_handler+0xb6>
	if (!ctx->tx_len) {
   1fd50:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   1fd52:	b163      	cbz	r3, 1fd6e <event_handler+0x2a>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1fd54:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	if (len > ctx->tx_len) {
   1fd56:	429a      	cmp	r2, r3
   1fd58:	d91e      	bls.n	1fd98 <event_handler+0x54>
		LOG_ERR("Update exceeds current buffer");
   1fd5a:	4b29      	ldr	r3, [pc, #164]	; (1fe00 <event_handler+0xbc>)
   1fd5c:	9305      	str	r3, [sp, #20]
   1fd5e:	4829      	ldr	r0, [pc, #164]	; (1fe04 <event_handler+0xc0>)
   1fd60:	2302      	movs	r3, #2
   1fd62:	aa04      	add	r2, sp, #16
   1fd64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1fd68:	9304      	str	r3, [sp, #16]
   1fd6a:	f00c ff04 	bl	2cb76 <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
   1fd6e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1fd70:	b163      	cbz	r3, 1fd8c <event_handler+0x48>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1fd72:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	if (len > ctx->rx_len) {
   1fd74:	429a      	cmp	r2, r3
   1fd76:	d927      	bls.n	1fdc8 <event_handler+0x84>
		LOG_ERR("Update exceeds current buffer");
   1fd78:	4b21      	ldr	r3, [pc, #132]	; (1fe00 <event_handler+0xbc>)
   1fd7a:	9305      	str	r3, [sp, #20]
   1fd7c:	4821      	ldr	r0, [pc, #132]	; (1fe04 <event_handler+0xc0>)
   1fd7e:	2302      	movs	r3, #2
   1fd80:	aa04      	add	r2, sp, #16
   1fd82:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1fd86:	9304      	str	r3, [sp, #16]
   1fd88:	f00c fef5 	bl	2cb76 <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   1fd8c:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   1fd8e:	b006      	add	sp, #24
   1fd90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1fd94:	f7ff bf98 	b.w	1fcc8 <transfer_next_chunk>
	ctx->tx_len -= len;
   1fd98:	1a9b      	subs	r3, r3, r2
   1fd9a:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   1fd9c:	b973      	cbnz	r3, 1fdbc <event_handler+0x78>
		++ctx->current_tx;
   1fd9e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   1fda0:	3308      	adds	r3, #8
   1fda2:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   1fda4:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   1fda6:	3b01      	subs	r3, #1
   1fda8:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1fdaa:	f101 0258 	add.w	r2, r1, #88	; 0x58
   1fdae:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1fdb2:	3148      	adds	r1, #72	; 0x48
   1fdb4:	f00c fece 	bl	2cb54 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1fdb8:	6560      	str	r0, [r4, #84]	; 0x54
   1fdba:	e7d8      	b.n	1fd6e <event_handler+0x2a>
	} else if (ctx->tx_buf) {
   1fdbc:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1fdbe:	2b00      	cmp	r3, #0
   1fdc0:	d0d5      	beq.n	1fd6e <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
   1fdc2:	4413      	add	r3, r2
   1fdc4:	654b      	str	r3, [r1, #84]	; 0x54
   1fdc6:	e7d2      	b.n	1fd6e <event_handler+0x2a>
	ctx->rx_len -= len;
   1fdc8:	1a9b      	subs	r3, r3, r2
   1fdca:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1fdcc:	b97b      	cbnz	r3, 1fdee <event_handler+0xaa>
		++ctx->current_rx;
   1fdce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1fdd0:	3308      	adds	r3, #8
   1fdd2:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1fdd4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1fdd6:	3b01      	subs	r3, #1
   1fdd8:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1fdda:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1fdde:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1fde2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1fde6:	f00c feb5 	bl	2cb54 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   1fdea:	65e0      	str	r0, [r4, #92]	; 0x5c
   1fdec:	e7ce      	b.n	1fd8c <event_handler+0x48>
	} else if (ctx->rx_buf) {
   1fdee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1fdf0:	2b00      	cmp	r3, #0
   1fdf2:	d0cb      	beq.n	1fd8c <event_handler+0x48>
		ctx->rx_buf += dfs * len;
   1fdf4:	4413      	add	r3, r2
   1fdf6:	65e3      	str	r3, [r4, #92]	; 0x5c
   1fdf8:	e7c8      	b.n	1fd8c <event_handler+0x48>
}
   1fdfa:	b006      	add	sp, #24
   1fdfc:	bd10      	pop	{r4, pc}
   1fdfe:	bf00      	nop
   1fe00:	00031913 	.word	0x00031913
   1fe04:	0002e68c 	.word	0x0002e68c

0001fe08 <spi_nrfx_transceive>:
{
   1fe08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe0c:	b08b      	sub	sp, #44	; 0x2c
   1fe0e:	469a      	mov	sl, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1fe10:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1fe12:	6904      	ldr	r4, [r0, #16]
{
   1fe14:	af00      	add	r7, sp, #0
   1fe16:	049b      	lsls	r3, r3, #18
   1fe18:	4680      	mov	r8, r0
   1fe1a:	460e      	mov	r6, r1
   1fe1c:	60fa      	str	r2, [r7, #12]
   1fe1e:	d434      	bmi.n	1fe8a <spi_nrfx_transceive+0x82>
	return z_impl_k_sem_take(sem, timeout);
   1fe20:	f04f 32ff 	mov.w	r2, #4294967295
   1fe24:	f04f 33ff 	mov.w	r3, #4294967295
   1fe28:	f104 0010 	add.w	r0, r4, #16
   1fe2c:	f003 fb88 	bl	23540 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1fe30:	6066      	str	r6, [r4, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1fe32:	f8d8 9010 	ldr.w	r9, [r8, #16]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1fe36:	f899 306d 	ldrb.w	r3, [r9, #109]	; 0x6d
   1fe3a:	607b      	str	r3, [r7, #4]
   1fe3c:	b123      	cbz	r3, 1fe48 <spi_nrfx_transceive+0x40>
   1fe3e:	f8d9 3000 	ldr.w	r3, [r9]
   1fe42:	429e      	cmp	r6, r3
   1fe44:	f000 80cc 	beq.w	1ffe0 <spi_nrfx_transceive+0x1d8>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1fe48:	f8b6 c004 	ldrh.w	ip, [r6, #4]
   1fe4c:	f41c 6f00 	tst.w	ip, #2048	; 0x800
   1fe50:	d022      	beq.n	1fe98 <spi_nrfx_transceive+0x90>
		LOG_ERR("Half-duplex not supported");
   1fe52:	4b99      	ldr	r3, [pc, #612]	; (200b8 <spi_nrfx_transceive+0x2b0>)
   1fe54:	627b      	str	r3, [r7, #36]	; 0x24
   1fe56:	4899      	ldr	r0, [pc, #612]	; (200bc <spi_nrfx_transceive+0x2b4>)
   1fe58:	2302      	movs	r3, #2
   1fe5a:	f107 0220 	add.w	r2, r7, #32
   1fe5e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
   1fe62:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
   1fe66:	623b      	str	r3, [r7, #32]
   1fe68:	f00c fe85 	bl	2cb76 <z_log_msg_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1fe6c:	6823      	ldr	r3, [r4, #0]
   1fe6e:	889b      	ldrh	r3, [r3, #4]
   1fe70:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   1fe74:	d104      	bne.n	1fe80 <spi_nrfx_transceive+0x78>
		ctx->owner = NULL;
   1fe76:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1fe78:	f104 0010 	add.w	r0, r4, #16
   1fe7c:	f003 fb3a 	bl	234f4 <z_impl_k_sem_give>
}
   1fe80:	4628      	mov	r0, r5
   1fe82:	372c      	adds	r7, #44	; 0x2c
   1fe84:	46bd      	mov	sp, r7
   1fe86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1fe8a:	69a3      	ldr	r3, [r4, #24]
   1fe8c:	2b00      	cmp	r3, #0
   1fe8e:	d1c7      	bne.n	1fe20 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1fe90:	6863      	ldr	r3, [r4, #4]
   1fe92:	4299      	cmp	r1, r3
   1fe94:	d1c4      	bne.n	1fe20 <spi_nrfx_transceive+0x18>
   1fe96:	e7cc      	b.n	1fe32 <spi_nrfx_transceive+0x2a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1fe98:	f01c 0f01 	tst.w	ip, #1
   1fe9c:	d015      	beq.n	1feca <spi_nrfx_transceive+0xc2>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1fe9e:	466d      	mov	r5, sp
   1fea0:	b088      	sub	sp, #32
   1fea2:	f8d8 3000 	ldr.w	r3, [r8]
   1fea6:	466a      	mov	r2, sp
   1fea8:	4985      	ldr	r1, [pc, #532]	; (200c0 <spi_nrfx_transceive+0x2b8>)
   1feaa:	4884      	ldr	r0, [pc, #528]	; (200bc <spi_nrfx_transceive+0x2b4>)
   1feac:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1feb0:	2302      	movs	r3, #2
   1feb2:	7713      	strb	r3, [r2, #28]
   1feb4:	4b83      	ldr	r3, [pc, #524]	; (200c4 <spi_nrfx_transceive+0x2bc>)
   1feb6:	f842 3f10 	str.w	r3, [r2, #16]!
   1feba:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
   1febe:	f00c fe5a 	bl	2cb76 <z_log_msg_static_create.constprop.0>
   1fec2:	46ad      	mov	sp, r5
		return -EINVAL;
   1fec4:	f06f 0515 	mvn.w	r5, #21
   1fec8:	e7d0      	b.n	1fe6c <spi_nrfx_transceive+0x64>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1feca:	f01c 0f08 	tst.w	ip, #8
   1fece:	d00b      	beq.n	1fee8 <spi_nrfx_transceive+0xe0>
		LOG_ERR("Loopback mode is not supported");
   1fed0:	4b7d      	ldr	r3, [pc, #500]	; (200c8 <spi_nrfx_transceive+0x2c0>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1fed2:	627b      	str	r3, [r7, #36]	; 0x24
   1fed4:	4879      	ldr	r0, [pc, #484]	; (200bc <spi_nrfx_transceive+0x2b4>)
   1fed6:	2302      	movs	r3, #2
   1fed8:	f107 0220 	add.w	r2, r7, #32
   1fedc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1fee0:	623b      	str	r3, [r7, #32]
   1fee2:	f00c fe48 	bl	2cb76 <z_log_msg_static_create.constprop.0>
   1fee6:	e7ed      	b.n	1fec4 <spi_nrfx_transceive+0xbc>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1fee8:	f3cc 1345 	ubfx	r3, ip, #5, #6
   1feec:	2b08      	cmp	r3, #8
   1feee:	d001      	beq.n	1fef4 <spi_nrfx_transceive+0xec>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1fef0:	4b76      	ldr	r3, [pc, #472]	; (200cc <spi_nrfx_transceive+0x2c4>)
   1fef2:	e7ee      	b.n	1fed2 <spi_nrfx_transceive+0xca>
	if (spi_cfg->frequency < 125000) {
   1fef4:	6835      	ldr	r5, [r6, #0]
   1fef6:	4b76      	ldr	r3, [pc, #472]	; (200d0 <spi_nrfx_transceive+0x2c8>)
   1fef8:	429d      	cmp	r5, r3
   1fefa:	d801      	bhi.n	1ff00 <spi_nrfx_transceive+0xf8>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1fefc:	4b75      	ldr	r3, [pc, #468]	; (200d4 <spi_nrfx_transceive+0x2cc>)
   1fefe:	e7e8      	b.n	1fed2 <spi_nrfx_transceive+0xca>
	const struct spi_nrfx_config *dev_config = dev->config;
   1ff00:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1ff04:	60bb      	str	r3, [r7, #8]
	config = dev_config->def_config;
   1ff06:	f103 0b08 	add.w	fp, r3, #8
   1ff0a:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
   1ff0e:	f107 0e10 	add.w	lr, r7, #16
   1ff12:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1ff16:	f8db 3000 	ldr.w	r3, [fp]
   1ff1a:	f8ce 3000 	str.w	r3, [lr]
	if (frequency < 250000) {
   1ff1e:	4b6e      	ldr	r3, [pc, #440]	; (200d8 <spi_nrfx_transceive+0x2d0>)
   1ff20:	429d      	cmp	r5, r3
   1ff22:	d945      	bls.n	1ffb0 <spi_nrfx_transceive+0x1a8>
	} else if (frequency < 500000) {
   1ff24:	4b6d      	ldr	r3, [pc, #436]	; (200dc <spi_nrfx_transceive+0x2d4>)
   1ff26:	429d      	cmp	r5, r3
   1ff28:	d945      	bls.n	1ffb6 <spi_nrfx_transceive+0x1ae>
	} else if (frequency < 1000000) {
   1ff2a:	4b6d      	ldr	r3, [pc, #436]	; (200e0 <spi_nrfx_transceive+0x2d8>)
   1ff2c:	429d      	cmp	r5, r3
   1ff2e:	d945      	bls.n	1ffbc <spi_nrfx_transceive+0x1b4>
	} else if (frequency < 2000000) {
   1ff30:	4b6c      	ldr	r3, [pc, #432]	; (200e4 <spi_nrfx_transceive+0x2dc>)
   1ff32:	429d      	cmp	r5, r3
   1ff34:	d945      	bls.n	1ffc2 <spi_nrfx_transceive+0x1ba>
	} else if (frequency < 4000000) {
   1ff36:	4b6c      	ldr	r3, [pc, #432]	; (200e8 <spi_nrfx_transceive+0x2e0>)
   1ff38:	429d      	cmp	r5, r3
   1ff3a:	d945      	bls.n	1ffc8 <spi_nrfx_transceive+0x1c0>
		return NRF_SPI_FREQ_8M;
   1ff3c:	4b6b      	ldr	r3, [pc, #428]	; (200ec <spi_nrfx_transceive+0x2e4>)
   1ff3e:	429d      	cmp	r5, r3
   1ff40:	bf34      	ite	cc
   1ff42:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
   1ff46:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1ff4a:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
   1ff4e:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1ff50:	f00c 0304 	and.w	r3, ip, #4
   1ff54:	d03b      	beq.n	1ffce <spi_nrfx_transceive+0x1c6>
			return NRF_SPI_MODE_2;
   1ff56:	2b00      	cmp	r3, #0
   1ff58:	bf14      	ite	ne
   1ff5a:	2303      	movne	r3, #3
   1ff5c:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
   1ff5e:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
   1ff60:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
   1ff62:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
   1ff66:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
   1ff6a:	b12b      	cbz	r3, 1ff78 <spi_nrfx_transceive+0x170>
		nrfx_spi_uninit(&dev_config->spi);
   1ff6c:	68b8      	ldr	r0, [r7, #8]
   1ff6e:	f002 fd9b 	bl	22aa8 <nrfx_spi_uninit>
		dev_data->initialized = false;
   1ff72:	2300      	movs	r3, #0
   1ff74:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
	result = nrfx_spi_init(&dev_config->spi, &config,
   1ff78:	464b      	mov	r3, r9
   1ff7a:	4a5d      	ldr	r2, [pc, #372]	; (200f0 <spi_nrfx_transceive+0x2e8>)
   1ff7c:	68b8      	ldr	r0, [r7, #8]
   1ff7e:	f107 0110 	add.w	r1, r7, #16
   1ff82:	f002 fce5 	bl	22950 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
   1ff86:	4b5b      	ldr	r3, [pc, #364]	; (200f4 <spi_nrfx_transceive+0x2ec>)
   1ff88:	4298      	cmp	r0, r3
   1ff8a:	d024      	beq.n	1ffd6 <spi_nrfx_transceive+0x1ce>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1ff8c:	466d      	mov	r5, sp
   1ff8e:	b088      	sub	sp, #32
   1ff90:	466a      	mov	r2, sp
   1ff92:	4b59      	ldr	r3, [pc, #356]	; (200f8 <spi_nrfx_transceive+0x2f0>)
   1ff94:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ff98:	2303      	movs	r3, #3
   1ff9a:	f842 3f10 	str.w	r3, [r2, #16]!
   1ff9e:	4847      	ldr	r0, [pc, #284]	; (200bc <spi_nrfx_transceive+0x2b4>)
   1ffa0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ffa4:	f00c fde7 	bl	2cb76 <z_log_msg_static_create.constprop.0>
   1ffa8:	46ad      	mov	sp, r5
		return -EIO;
   1ffaa:	f06f 0504 	mvn.w	r5, #4
   1ffae:	e75d      	b.n	1fe6c <spi_nrfx_transceive+0x64>
		return NRF_SPI_FREQ_125K;
   1ffb0:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   1ffb4:	e7c9      	b.n	1ff4a <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_250K;
   1ffb6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   1ffba:	e7c6      	b.n	1ff4a <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_500K;
   1ffbc:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   1ffc0:	e7c3      	b.n	1ff4a <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_1M;
   1ffc2:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1ffc6:	e7c0      	b.n	1ff4a <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_2M;
   1ffc8:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   1ffcc:	e7bd      	b.n	1ff4a <spi_nrfx_transceive+0x142>
			return NRF_SPI_MODE_0;
   1ffce:	3b00      	subs	r3, #0
   1ffd0:	bf18      	it	ne
   1ffd2:	2301      	movne	r3, #1
   1ffd4:	e7c3      	b.n	1ff5e <spi_nrfx_transceive+0x156>
	dev_data->initialized = true;
   1ffd6:	2301      	movs	r3, #1
   1ffd8:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
	ctx->config = spi_cfg;
   1ffdc:	f8c9 6000 	str.w	r6, [r9]
		dev_data->busy = true;
   1ffe0:	2301      	movs	r3, #1
   1ffe2:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1ffe6:	68fb      	ldr	r3, [r7, #12]
   1ffe8:	2b00      	cmp	r3, #0
   1ffea:	d154      	bne.n	20096 <spi_nrfx_transceive+0x28e>
   1ffec:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1ffee:	461a      	mov	r2, r3
   1fff0:	64a2      	str	r2, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1fff2:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1fff6:	f104 0258 	add.w	r2, r4, #88	; 0x58
   1fffa:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1fffe:	f00c fda9 	bl	2cb54 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   20002:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   20004:	f1ba 0f00 	cmp.w	sl, #0
   20008:	d14c      	bne.n	200a4 <spi_nrfx_transceive+0x29c>
   2000a:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   2000e:	4653      	mov	r3, sl
   20010:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   20012:	f104 0260 	add.w	r2, r4, #96	; 0x60
   20016:	f104 0150 	add.w	r1, r4, #80	; 0x50
   2001a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   2001e:	f00c fd99 	bl	2cb54 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   20022:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   20024:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   20026:	65e0      	str	r0, [r4, #92]	; 0x5c
	_spi_context_cs_control(ctx, on, false);
   20028:	2101      	movs	r1, #1
   2002a:	4620      	mov	r0, r4
	ctx->sync_status = 0;
   2002c:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   2002e:	f00c fdb9 	bl	2cba4 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   20032:	4640      	mov	r0, r8
   20034:	f7ff fe48 	bl	1fcc8 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   20038:	6e25      	ldr	r5, [r4, #96]	; 0x60
   2003a:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   2003c:	46a0      	mov	r8, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   2003e:	429d      	cmp	r5, r3
   20040:	bf38      	it	cc
   20042:	461d      	movcc	r5, r3
   20044:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   20048:	435d      	muls	r5, r3
			     ctx->config->frequency;
   2004a:	f858 3b28 	ldr.w	r3, [r8], #40
   2004e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   20052:	681b      	ldr	r3, [r3, #0]
   20054:	fbb5 f5f3 	udiv	r5, r5, r3
   20058:	4631      	mov	r1, r6
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   2005a:	35c8      	adds	r5, #200	; 0xc8
   2005c:	f240 30e7 	movw	r0, #999	; 0x3e7
   20060:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20064:	2300      	movs	r3, #0
   20066:	fbe5 010c 	umlal	r0, r1, r5, ip
   2006a:	f7e1 f881 	bl	1170 <__aeabi_uldivmod>
   2006e:	4602      	mov	r2, r0
   20070:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   20072:	4640      	mov	r0, r8
   20074:	f003 fa64 	bl	23540 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   20078:	b1e0      	cbz	r0, 200b4 <spi_nrfx_transceive+0x2ac>
		LOG_ERR("Timeout waiting for transfer complete");
   2007a:	4b20      	ldr	r3, [pc, #128]	; (200fc <spi_nrfx_transceive+0x2f4>)
   2007c:	627b      	str	r3, [r7, #36]	; 0x24
   2007e:	480f      	ldr	r0, [pc, #60]	; (200bc <spi_nrfx_transceive+0x2b4>)
   20080:	2302      	movs	r3, #2
   20082:	f107 0220 	add.w	r2, r7, #32
   20086:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2008a:	623b      	str	r3, [r7, #32]
		return -ETIMEDOUT;
   2008c:	f06f 0573 	mvn.w	r5, #115	; 0x73
		LOG_ERR("Timeout waiting for transfer complete");
   20090:	f00c fd71 	bl	2cb76 <z_log_msg_static_create.constprop.0>
		return -ETIMEDOUT;
   20094:	e6ea      	b.n	1fe6c <spi_nrfx_transceive+0x64>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   20096:	68fb      	ldr	r3, [r7, #12]
   20098:	681a      	ldr	r2, [r3, #0]
   2009a:	6462      	str	r2, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   2009c:	2a00      	cmp	r2, #0
   2009e:	d0a7      	beq.n	1fff0 <spi_nrfx_transceive+0x1e8>
   200a0:	685a      	ldr	r2, [r3, #4]
   200a2:	e7a5      	b.n	1fff0 <spi_nrfx_transceive+0x1e8>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   200a4:	f8da 3000 	ldr.w	r3, [sl]
   200a8:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   200aa:	2b00      	cmp	r3, #0
   200ac:	d0b0      	beq.n	20010 <spi_nrfx_transceive+0x208>
   200ae:	f8da 3004 	ldr.w	r3, [sl, #4]
   200b2:	e7ad      	b.n	20010 <spi_nrfx_transceive+0x208>
	status = ctx->sync_status;
   200b4:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   200b6:	e6d9      	b.n	1fe6c <spi_nrfx_transceive+0x64>
   200b8:	00031931 	.word	0x00031931
   200bc:	0002e68c 	.word	0x0002e68c
   200c0:	0003194b 	.word	0x0003194b
   200c4:	01000003 	.word	0x01000003
   200c8:	0003196d 	.word	0x0003196d
   200cc:	0003198c 	.word	0x0003198c
   200d0:	0001e847 	.word	0x0001e847
   200d4:	000319bb 	.word	0x000319bb
   200d8:	0003d08f 	.word	0x0003d08f
   200dc:	0007a11f 	.word	0x0007a11f
   200e0:	000f423f 	.word	0x000f423f
   200e4:	001e847f 	.word	0x001e847f
   200e8:	003d08ff 	.word	0x003d08ff
   200ec:	007a1200 	.word	0x007a1200
   200f0:	0001fd45 	.word	0x0001fd45
   200f4:	0bad0000 	.word	0x0bad0000
   200f8:	000319ec 	.word	0x000319ec
   200fc:	00031a13 	.word	0x00031a13

00020100 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   20100:	4b02      	ldr	r3, [pc, #8]	; (2010c <flash_nrf_pages_layout+0xc>)
   20102:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   20104:	2301      	movs	r3, #1
   20106:	6013      	str	r3, [r2, #0]
}
   20108:	4770      	bx	lr
   2010a:	bf00      	nop
   2010c:	20005df4 	.word	0x20005df4

00020110 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   20110:	4800      	ldr	r0, [pc, #0]	; (20114 <flash_nrf_get_parameters+0x4>)
   20112:	4770      	bx	lr
   20114:	0002f284 	.word	0x0002f284

00020118 <flash_nrf_read.part.0>:
static int flash_nrf_read(const struct device *dev, off_t addr,
   20118:	b580      	push	{r7, lr}
   2011a:	af00      	add	r7, sp, #0
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2011c:	b088      	sub	sp, #32
   2011e:	466a      	mov	r2, sp
   20120:	4b08      	ldr	r3, [pc, #32]	; (20144 <flash_nrf_read.part.0+0x2c>)
   20122:	61d1      	str	r1, [r2, #28]
   20124:	e9c2 3005 	strd	r3, r0, [r2, #20]
   20128:	2304      	movs	r3, #4
   2012a:	f842 3f10 	str.w	r3, [r2, #16]!
   2012e:	4806      	ldr	r0, [pc, #24]	; (20148 <flash_nrf_read.part.0+0x30>)
   20130:	2300      	movs	r3, #0
   20132:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20136:	f7f5 faa9 	bl	1568c <z_impl_z_log_msg_static_create>
}
   2013a:	f06f 0015 	mvn.w	r0, #21
   2013e:	46bd      	mov	sp, r7
   20140:	bd80      	pop	{r7, pc}
   20142:	bf00      	nop
   20144:	00031a53 	.word	0x00031a53
   20148:	0002e604 	.word	0x0002e604

0002014c <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   2014c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2014e:	2201      	movs	r2, #1
   20150:	4611      	mov	r1, r2
   20152:	4807      	ldr	r0, [pc, #28]	; (20170 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   20154:	4c07      	ldr	r4, [pc, #28]	; (20174 <nrf_flash_init+0x28>)
   20156:	f00d fa1c 	bl	2d592 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   2015a:	f001 fe2f 	bl	21dbc <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   2015e:	f00c ffba 	bl	2d0d6 <nrfx_nvmc_flash_page_count_get>
   20162:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   20164:	f00c ffb3 	bl	2d0ce <nrfx_nvmc_flash_page_size_get>
   20168:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   2016a:	2000      	movs	r0, #0
   2016c:	bd10      	pop	{r4, pc}
   2016e:	bf00      	nop
   20170:	20005dfc 	.word	0x20005dfc
   20174:	20005df4 	.word	0x20005df4

00020178 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   20178:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2017c:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   20180:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   20184:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   20188:	f023 031f 	bic.w	r3, r3, #31
   2018c:	430b      	orrs	r3, r1
    pofcon |=
   2018e:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   20192:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   20196:	4b02      	ldr	r3, [pc, #8]	; (201a0 <restore_pofwarn.part.0+0x28>)
   20198:	2200      	movs	r2, #0
   2019a:	701a      	strb	r2, [r3, #0]
	}
}
   2019c:	4770      	bx	lr
   2019e:	bf00      	nop
   201a0:	20006c32 	.word	0x20006c32

000201a4 <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   201a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   201a8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   201ac:	2b08      	cmp	r3, #8
   201ae:	d122      	bne.n	201f6 <suspend_pofwarn+0x52>
    uint32_t pofcon = p_reg->POFCON;
   201b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   201b4:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   201b8:	f011 0001 	ands.w	r0, r1, #1
   201bc:	d01c      	beq.n	201f8 <suspend_pofwarn+0x54>
    uint32_t pofcon = p_reg->POFCON;
   201be:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   201c2:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   201c6:	f020 001f 	bic.w	r0, r0, #31
    pofcon |=
   201ca:	4308      	orrs	r0, r1
    p_reg->POFCON = pofcon;
   201cc:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   201d0:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   201d4:	b158      	cbz	r0, 201ee <suspend_pofwarn+0x4a>
    uint32_t pofcon = p_reg->POFCON;
   201d6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   201da:	f023 031f 	bic.w	r3, r3, #31
   201de:	430b      	orrs	r3, r1
    pofcon |=
   201e0:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   201e4:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   201e8:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   201ec:	4770      	bx	lr
		pofcon_enabled = enabled;
   201ee:	4b03      	ldr	r3, [pc, #12]	; (201fc <suspend_pofwarn+0x58>)
   201f0:	2201      	movs	r2, #1
   201f2:	701a      	strb	r2, [r3, #0]
   201f4:	4770      	bx	lr
		return 0;
   201f6:	2000      	movs	r0, #0
}
   201f8:	4770      	bx	lr
   201fa:	bf00      	nop
   201fc:	20006c32 	.word	0x20006c32

00020200 <erase_op>:
{
   20200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20202:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   20204:	f00c ff63 	bl	2d0ce <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   20208:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2020a:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   2020c:	b10b      	cbz	r3, 20212 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   2020e:	f00c feda 	bl	2cfc6 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   20212:	4f13      	ldr	r7, [pc, #76]	; (20260 <erase_op+0x60>)
{
   20214:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   20216:	f7ff ffc5 	bl	201a4 <suspend_pofwarn>
   2021a:	b9e8      	cbnz	r0, 20258 <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   2021c:	6860      	ldr	r0, [r4, #4]
   2021e:	f002 fb5b 	bl	228d8 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   20222:	68a3      	ldr	r3, [r4, #8]
   20224:	1b5b      	subs	r3, r3, r5
   20226:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   20228:	6863      	ldr	r3, [r4, #4]
   2022a:	442b      	add	r3, r5
   2022c:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   2022e:	783b      	ldrb	r3, [r7, #0]
   20230:	b10b      	cbz	r3, 20236 <erase_op+0x36>
   20232:	f7ff ffa1 	bl	20178 <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   20236:	7b23      	ldrb	r3, [r4, #12]
		i++;
   20238:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   2023a:	b93b      	cbnz	r3, 2024c <erase_op+0x4c>
	} while (e_ctx->len > 0);
   2023c:	68a3      	ldr	r3, [r4, #8]
   2023e:	2b00      	cmp	r3, #0
   20240:	d1e9      	bne.n	20216 <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   20242:	68a0      	ldr	r0, [r4, #8]
   20244:	3800      	subs	r0, #0
   20246:	bf18      	it	ne
   20248:	2001      	movne	r0, #1
}
   2024a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   2024c:	4630      	mov	r0, r6
   2024e:	f001 fe59 	bl	21f04 <nrf_flash_sync_check_time_limit>
   20252:	2800      	cmp	r0, #0
   20254:	d0f2      	beq.n	2023c <erase_op+0x3c>
   20256:	e7f4      	b.n	20242 <erase_op+0x42>
			return -ECANCELED;
   20258:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2025c:	e7f5      	b.n	2024a <erase_op+0x4a>
   2025e:	bf00      	nop
   20260:	20006c32 	.word	0x20006c32

00020264 <write_op>:
{
   20264:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   20266:	7b03      	ldrb	r3, [r0, #12]
{
   20268:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   2026a:	b10b      	cbz	r3, 20270 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   2026c:	f00c feab 	bl	2cfc6 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   20270:	4e19      	ldr	r6, [pc, #100]	; (202d8 <write_op+0x74>)
{
   20272:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   20274:	68a3      	ldr	r3, [r4, #8]
   20276:	2b03      	cmp	r3, #3
   20278:	d806      	bhi.n	20288 <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2027a:	4a18      	ldr	r2, [pc, #96]	; (202dc <write_op+0x78>)
   2027c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   20280:	07db      	lsls	r3, r3, #31
   20282:	d5fb      	bpl.n	2027c <write_op+0x18>
	return FLASH_OP_DONE;
   20284:	2000      	movs	r0, #0
}
   20286:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   20288:	f7ff ff8c 	bl	201a4 <suspend_pofwarn>
   2028c:	bb08      	cbnz	r0, 202d2 <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   2028e:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   20290:	6860      	ldr	r0, [r4, #4]
   20292:	6819      	ldr	r1, [r3, #0]
   20294:	f002 fb40 	bl	22918 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   20298:	7833      	ldrb	r3, [r6, #0]
   2029a:	b10b      	cbz	r3, 202a0 <write_op+0x3c>
   2029c:	f7ff ff6c 	bl	20178 <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   202a0:	6863      	ldr	r3, [r4, #4]
   202a2:	3304      	adds	r3, #4
   202a4:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   202a6:	6823      	ldr	r3, [r4, #0]
   202a8:	3304      	adds	r3, #4
   202aa:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   202ac:	68a3      	ldr	r3, [r4, #8]
   202ae:	3b04      	subs	r3, #4
   202b0:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   202b2:	7b23      	ldrb	r3, [r4, #12]
		i++;
   202b4:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   202b6:	2b00      	cmp	r3, #0
   202b8:	d0dc      	beq.n	20274 <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   202ba:	4628      	mov	r0, r5
   202bc:	f001 fe22 	bl	21f04 <nrf_flash_sync_check_time_limit>
   202c0:	2800      	cmp	r0, #0
   202c2:	d0d7      	beq.n	20274 <write_op+0x10>
   202c4:	4a05      	ldr	r2, [pc, #20]	; (202dc <write_op+0x78>)
   202c6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   202ca:	07d9      	lsls	r1, r3, #31
   202cc:	d5fb      	bpl.n	202c6 <write_op+0x62>
				return FLASH_OP_ONGOING;
   202ce:	2001      	movs	r0, #1
   202d0:	e7d9      	b.n	20286 <write_op+0x22>
			return -ECANCELED;
   202d2:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   202d6:	e7d6      	b.n	20286 <write_op+0x22>
   202d8:	20006c32 	.word	0x20006c32
   202dc:	4001e000 	.word	0x4001e000

000202e0 <flash_nrf_erase>:
{
   202e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   202e4:	b086      	sub	sp, #24
   202e6:	af00      	add	r7, sp, #0
   202e8:	460e      	mov	r6, r1
   202ea:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   202ec:	f00c feef 	bl	2d0ce <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   202f0:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   202f2:	4680      	mov	r8, r0
	if (is_regular_addr_valid(addr, size)) {
   202f4:	4630      	mov	r0, r6
   202f6:	f00c fc99 	bl	2cc2c <is_regular_addr_valid>
   202fa:	4603      	mov	r3, r0
   202fc:	b3c8      	cbz	r0, 20372 <flash_nrf_erase+0x92>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   202fe:	fbb6 f3f8 	udiv	r3, r6, r8
   20302:	fb08 6313 	mls	r3, r8, r3, r6
   20306:	b923      	cbnz	r3, 20312 <flash_nrf_erase+0x32>
   20308:	fbb5 f4f8 	udiv	r4, r5, r8
   2030c:	fb08 5414 	mls	r4, r8, r4, r5
   20310:	b1bc      	cbz	r4, 20342 <flash_nrf_erase+0x62>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   20312:	466c      	mov	r4, sp
   20314:	b088      	sub	sp, #32
   20316:	466a      	mov	r2, sp
   20318:	4b27      	ldr	r3, [pc, #156]	; (203b8 <flash_nrf_erase+0xd8>)
   2031a:	61d5      	str	r5, [r2, #28]
   2031c:	e9c2 3605 	strd	r3, r6, [r2, #20]
   20320:	2304      	movs	r3, #4
   20322:	f842 3f10 	str.w	r3, [r2, #16]!
   20326:	2300      	movs	r3, #0
   20328:	4824      	ldr	r0, [pc, #144]	; (203bc <flash_nrf_erase+0xdc>)
   2032a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   2032e:	f7f5 f9ad 	bl	1568c <z_impl_z_log_msg_static_create>
   20332:	46a5      	mov	sp, r4
		return -EINVAL;
   20334:	f06f 0415 	mvn.w	r4, #21
}
   20338:	4620      	mov	r0, r4
   2033a:	3718      	adds	r7, #24
   2033c:	46bd      	mov	sp, r7
   2033e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!n_pages) {
   20342:	4545      	cmp	r5, r8
   20344:	d3f8      	bcc.n	20338 <flash_nrf_erase+0x58>
	return z_impl_k_sem_take(sem, timeout);
   20346:	f04f 33ff 	mov.w	r3, #4294967295
   2034a:	f04f 32ff 	mov.w	r2, #4294967295
   2034e:	481c      	ldr	r0, [pc, #112]	; (203c0 <flash_nrf_erase+0xe0>)
   20350:	f003 f8f6 	bl	23540 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   20354:	f00c fe35 	bl	2cfc2 <nrf_flash_sync_is_required>
   20358:	f107 0308 	add.w	r3, r7, #8
   2035c:	4601      	mov	r1, r0
   2035e:	b998      	cbnz	r0, 20388 <flash_nrf_erase+0xa8>
	struct flash_context context = {
   20360:	2210      	movs	r2, #16
   20362:	4618      	mov	r0, r3
   20364:	f00d fd59 	bl	2de1a <memset>
   20368:	e9c7 6503 	strd	r6, r5, [r7, #12]
	return	erase_op(&context);
   2036c:	f7ff ff48 	bl	20200 <erase_op>
   20370:	e01c      	b.n	203ac <flash_nrf_erase+0xcc>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   20372:	466c      	mov	r4, sp
   20374:	b088      	sub	sp, #32
   20376:	466a      	mov	r2, sp
   20378:	4912      	ldr	r1, [pc, #72]	; (203c4 <flash_nrf_erase+0xe4>)
   2037a:	61d5      	str	r5, [r2, #28]
   2037c:	e9c2 1605 	strd	r1, r6, [r2, #20]
   20380:	2104      	movs	r1, #4
   20382:	f842 1f10 	str.w	r1, [r2, #16]!
	compiler_barrier();
   20386:	e7cf      	b.n	20328 <flash_nrf_erase+0x48>
	struct flash_context context = {
   20388:	2210      	movs	r2, #16
   2038a:	4621      	mov	r1, r4
   2038c:	4618      	mov	r0, r3
   2038e:	f00d fd44 	bl	2de1a <memset>
   20392:	2201      	movs	r2, #1
   20394:	753a      	strb	r2, [r7, #20]
	struct flash_op_desc flash_op_desc = {
   20396:	4a0c      	ldr	r2, [pc, #48]	; (203c8 <flash_nrf_erase+0xe8>)
   20398:	e9c7 2000 	strd	r2, r0, [r7]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   2039c:	480b      	ldr	r0, [pc, #44]	; (203cc <flash_nrf_erase+0xec>)
	struct flash_context context = {
   2039e:	e9c7 6503 	strd	r6, r5, [r7, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   203a2:	f001 fd13 	bl	21dcc <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   203a6:	4638      	mov	r0, r7
   203a8:	f001 fd16 	bl	21dd8 <nrf_flash_sync_exe>
	return	erase_op(&context);
   203ac:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   203ae:	4804      	ldr	r0, [pc, #16]	; (203c0 <flash_nrf_erase+0xe0>)
   203b0:	f003 f8a0 	bl	234f4 <z_impl_k_sem_give>
}
   203b4:	e7c0      	b.n	20338 <flash_nrf_erase+0x58>
   203b6:	bf00      	nop
   203b8:	00031a70 	.word	0x00031a70
   203bc:	0002e604 	.word	0x0002e604
   203c0:	20005dfc 	.word	0x20005dfc
   203c4:	00031a53 	.word	0x00031a53
   203c8:	00020201 	.word	0x00020201
   203cc:	00015e64 	.word	0x00015e64

000203d0 <flash_nrf_write>:
{
   203d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   203d2:	460d      	mov	r5, r1
   203d4:	b087      	sub	sp, #28
	if (is_regular_addr_valid(addr, len)) {
   203d6:	4619      	mov	r1, r3
{
   203d8:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   203da:	4628      	mov	r0, r5
{
   203dc:	461c      	mov	r4, r3
   203de:	4616      	mov	r6, r2
	if (is_regular_addr_valid(addr, len)) {
   203e0:	f00c fc24 	bl	2cc2c <is_regular_addr_valid>
   203e4:	4603      	mov	r3, r0
   203e6:	b9a8      	cbnz	r0, 20414 <flash_nrf_write+0x44>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   203e8:	466e      	mov	r6, sp
   203ea:	b088      	sub	sp, #32
   203ec:	466a      	mov	r2, sp
   203ee:	4925      	ldr	r1, [pc, #148]	; (20484 <flash_nrf_write+0xb4>)
   203f0:	61d4      	str	r4, [r2, #28]
   203f2:	e9c2 1505 	strd	r1, r5, [r2, #20]
   203f6:	2104      	movs	r1, #4
   203f8:	f842 1f10 	str.w	r1, [r2, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
   203fc:	4822      	ldr	r0, [pc, #136]	; (20488 <flash_nrf_write+0xb8>)
   203fe:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20402:	f7f5 f943 	bl	1568c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   20406:	f06f 0415 	mvn.w	r4, #21
   2040a:	46b5      	mov	sp, r6
}
   2040c:	4620      	mov	r0, r4
   2040e:	371c      	adds	r7, #28
   20410:	46bd      	mov	sp, r7
   20412:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   20414:	ea44 0305 	orr.w	r3, r4, r5
   20418:	079b      	lsls	r3, r3, #30
   2041a:	d00b      	beq.n	20434 <flash_nrf_write+0x64>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   2041c:	466e      	mov	r6, sp
   2041e:	b088      	sub	sp, #32
   20420:	466a      	mov	r2, sp
   20422:	4b1a      	ldr	r3, [pc, #104]	; (2048c <flash_nrf_write+0xbc>)
   20424:	61d4      	str	r4, [r2, #28]
   20426:	e9c2 3505 	strd	r3, r5, [r2, #20]
   2042a:	2304      	movs	r3, #4
   2042c:	f842 3f10 	str.w	r3, [r2, #16]!
   20430:	2300      	movs	r3, #0
   20432:	e7e3      	b.n	203fc <flash_nrf_write+0x2c>
	if (!len) {
   20434:	2c00      	cmp	r4, #0
   20436:	d0e9      	beq.n	2040c <flash_nrf_write+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   20438:	f04f 33ff 	mov.w	r3, #4294967295
   2043c:	f04f 32ff 	mov.w	r2, #4294967295
   20440:	4813      	ldr	r0, [pc, #76]	; (20490 <flash_nrf_write+0xc0>)
   20442:	f003 f87d 	bl	23540 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   20446:	f00c fdbc 	bl	2cfc2 <nrf_flash_sync_is_required>
   2044a:	4603      	mov	r3, r0
	struct flash_context context = {
   2044c:	e9c7 6502 	strd	r6, r5, [r7, #8]
   20450:	f107 0008 	add.w	r0, r7, #8
   20454:	613c      	str	r4, [r7, #16]
	if (nrf_flash_sync_is_required()) {
   20456:	b183      	cbz	r3, 2047a <flash_nrf_write+0xaa>
	struct flash_context context = {
   20458:	2301      	movs	r3, #1
   2045a:	753b      	strb	r3, [r7, #20]
	struct flash_op_desc flash_op_desc = {
   2045c:	4b0d      	ldr	r3, [pc, #52]	; (20494 <flash_nrf_write+0xc4>)
   2045e:	e9c7 3000 	strd	r3, r0, [r7]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   20462:	f641 504c 	movw	r0, #7500	; 0x1d4c
   20466:	f001 fcb1 	bl	21dcc <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   2046a:	4638      	mov	r0, r7
   2046c:	f001 fcb4 	bl	21dd8 <nrf_flash_sync_exe>
	return write_op(&context);
   20470:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   20472:	4807      	ldr	r0, [pc, #28]	; (20490 <flash_nrf_write+0xc0>)
   20474:	f003 f83e 	bl	234f4 <z_impl_k_sem_give>
}
   20478:	e7c8      	b.n	2040c <flash_nrf_write+0x3c>
	struct flash_context context = {
   2047a:	753b      	strb	r3, [r7, #20]
	return write_op(&context);
   2047c:	f7ff fef2 	bl	20264 <write_op>
   20480:	e7f6      	b.n	20470 <flash_nrf_write+0xa0>
   20482:	bf00      	nop
   20484:	00031a53 	.word	0x00031a53
   20488:	0002e604 	.word	0x0002e604
   2048c:	00031a8f 	.word	0x00031a8f
   20490:	20005dfc 	.word	0x20005dfc
   20494:	00020265 	.word	0x00020265

00020498 <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20498:	4b07      	ldr	r3, [pc, #28]	; (204b8 <uart_nrfx_poll_in+0x20>)
   2049a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   2049e:	b142      	cbz	r2, 204b2 <uart_nrfx_poll_in+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   204a0:	2000      	movs	r0, #0
   204a2:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   204a6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
   204aa:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   204ae:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
   204b0:	4770      	bx	lr
		return -1;
   204b2:	f04f 30ff 	mov.w	r0, #4294967295
}
   204b6:	4770      	bx	lr
   204b8:	40002000 	.word	0x40002000

000204bc <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   204bc:	4b02      	ldr	r3, [pc, #8]	; (204c8 <uart_nrfx_err_check+0xc>)
   204be:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   204c2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   204c6:	4770      	bx	lr
   204c8:	40002000 	.word	0x40002000

000204cc <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
   204cc:	b530      	push	{r4, r5, lr}
	struct uart_nrfx_data *data = dev->data;
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   204ce:	794b      	ldrb	r3, [r1, #5]
   204d0:	2b01      	cmp	r3, #1
   204d2:	d022      	beq.n	2051a <uart_nrfx_configure+0x4e>
   204d4:	2b03      	cmp	r3, #3
   204d6:	d11d      	bne.n	20514 <uart_nrfx_configure+0x48>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
   204d8:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   204da:	798b      	ldrb	r3, [r1, #6]
   204dc:	2b03      	cmp	r3, #3
   204de:	d119      	bne.n	20514 <uart_nrfx_configure+0x48>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   204e0:	79cb      	ldrb	r3, [r1, #7]
   204e2:	b9bb      	cbnz	r3, 20514 <uart_nrfx_configure+0x48>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   204e4:	790a      	ldrb	r2, [r1, #4]
   204e6:	b112      	cbz	r2, 204ee <uart_nrfx_configure+0x22>
   204e8:	2a02      	cmp	r2, #2
   204ea:	d113      	bne.n	20514 <uart_nrfx_configure+0x48>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
   204ec:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   204ee:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   204f0:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   204f4:	d061      	beq.n	205ba <uart_nrfx_configure+0xee>
   204f6:	d82d      	bhi.n	20554 <uart_nrfx_configure+0x88>
   204f8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   204fc:	d05f      	beq.n	205be <uart_nrfx_configure+0xf2>
   204fe:	d816      	bhi.n	2052e <uart_nrfx_configure+0x62>
   20500:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   20504:	d05d      	beq.n	205c2 <uart_nrfx_configure+0xf6>
   20506:	d80a      	bhi.n	2051e <uart_nrfx_configure+0x52>
   20508:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   2050c:	d05c      	beq.n	205c8 <uart_nrfx_configure+0xfc>
   2050e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   20512:	d05c      	beq.n	205ce <uart_nrfx_configure+0x102>
   20514:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20518:	e04e      	b.n	205b8 <uart_nrfx_configure+0xec>
	switch (cfg->stop_bits) {
   2051a:	2500      	movs	r5, #0
   2051c:	e7dd      	b.n	204da <uart_nrfx_configure+0xe>
	switch (baudrate) {
   2051e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   20522:	d057      	beq.n	205d4 <uart_nrfx_configure+0x108>
   20524:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   20528:	d1f4      	bne.n	20514 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   2052a:	4b34      	ldr	r3, [pc, #208]	; (205fc <uart_nrfx_configure+0x130>)
   2052c:	e039      	b.n	205a2 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   2052e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   20532:	d052      	beq.n	205da <uart_nrfx_configure+0x10e>
   20534:	d807      	bhi.n	20546 <uart_nrfx_configure+0x7a>
   20536:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   2053a:	d050      	beq.n	205de <uart_nrfx_configure+0x112>
   2053c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   20540:	d1e8      	bne.n	20514 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   20542:	4b2f      	ldr	r3, [pc, #188]	; (20600 <uart_nrfx_configure+0x134>)
   20544:	e02d      	b.n	205a2 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   20546:	f647 2412 	movw	r4, #31250	; 0x7a12
   2054a:	42a3      	cmp	r3, r4
   2054c:	d1e2      	bne.n	20514 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   2054e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   20552:	e026      	b.n	205a2 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   20554:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   20558:	d044      	beq.n	205e4 <uart_nrfx_configure+0x118>
   2055a:	d811      	bhi.n	20580 <uart_nrfx_configure+0xb4>
   2055c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   20560:	d042      	beq.n	205e8 <uart_nrfx_configure+0x11c>
   20562:	d808      	bhi.n	20576 <uart_nrfx_configure+0xaa>
   20564:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   20568:	42a3      	cmp	r3, r4
   2056a:	d03f      	beq.n	205ec <uart_nrfx_configure+0x120>
   2056c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   20570:	d1d0      	bne.n	20514 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   20572:	4b24      	ldr	r3, [pc, #144]	; (20604 <uart_nrfx_configure+0x138>)
   20574:	e015      	b.n	205a2 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   20576:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   2057a:	d1cb      	bne.n	20514 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   2057c:	4b22      	ldr	r3, [pc, #136]	; (20608 <uart_nrfx_configure+0x13c>)
   2057e:	e010      	b.n	205a2 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   20580:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   20584:	d035      	beq.n	205f2 <uart_nrfx_configure+0x126>
   20586:	d807      	bhi.n	20598 <uart_nrfx_configure+0xcc>
   20588:	4c20      	ldr	r4, [pc, #128]	; (2060c <uart_nrfx_configure+0x140>)
   2058a:	42a3      	cmp	r3, r4
   2058c:	d033      	beq.n	205f6 <uart_nrfx_configure+0x12a>
   2058e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   20592:	d1bf      	bne.n	20514 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   20594:	4b1e      	ldr	r3, [pc, #120]	; (20610 <uart_nrfx_configure+0x144>)
   20596:	e004      	b.n	205a2 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   20598:	4c1e      	ldr	r4, [pc, #120]	; (20614 <uart_nrfx_configure+0x148>)
   2059a:	42a3      	cmp	r3, r4
   2059c:	d1ba      	bne.n	20514 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   2059e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uart_nrfx_data *data = dev->data;
   205a2:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   205a4:	481c      	ldr	r0, [pc, #112]	; (20618 <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
   205a6:	432a      	orrs	r2, r5
    p_reg->BAUDRATE = baudrate;
   205a8:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   205ac:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	data->uart_config = *cfg;
   205b0:	c903      	ldmia	r1, {r0, r1}
   205b2:	e884 0003 	stmia.w	r4, {r0, r1}

	return 0;
   205b6:	2000      	movs	r0, #0
}
   205b8:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   205ba:	4b18      	ldr	r3, [pc, #96]	; (2061c <uart_nrfx_configure+0x150>)
   205bc:	e7f1      	b.n	205a2 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   205be:	4b18      	ldr	r3, [pc, #96]	; (20620 <uart_nrfx_configure+0x154>)
   205c0:	e7ef      	b.n	205a2 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   205c2:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   205c6:	e7ec      	b.n	205a2 <uart_nrfx_configure+0xd6>
		nrf_baudrate = 0x00014000;
   205c8:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   205cc:	e7e9      	b.n	205a2 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   205ce:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   205d2:	e7e6      	b.n	205a2 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   205d4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   205d8:	e7e3      	b.n	205a2 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   205da:	4b12      	ldr	r3, [pc, #72]	; (20624 <uart_nrfx_configure+0x158>)
   205dc:	e7e1      	b.n	205a2 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   205de:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   205e2:	e7de      	b.n	205a2 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   205e4:	4b10      	ldr	r3, [pc, #64]	; (20628 <uart_nrfx_configure+0x15c>)
   205e6:	e7dc      	b.n	205a2 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   205e8:	4b10      	ldr	r3, [pc, #64]	; (2062c <uart_nrfx_configure+0x160>)
   205ea:	e7da      	b.n	205a2 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   205ec:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   205f0:	e7d7      	b.n	205a2 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   205f2:	4b0f      	ldr	r3, [pc, #60]	; (20630 <uart_nrfx_configure+0x164>)
   205f4:	e7d5      	b.n	205a2 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   205f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   205fa:	e7d2      	b.n	205a2 <uart_nrfx_configure+0xd6>
   205fc:	0013b000 	.word	0x0013b000
   20600:	004ea000 	.word	0x004ea000
   20604:	00ebf000 	.word	0x00ebf000
   20608:	01d7e000 	.word	0x01d7e000
   2060c:	0003d090 	.word	0x0003d090
   20610:	075f7000 	.word	0x075f7000
   20614:	000f4240 	.word	0x000f4240
   20618:	40002000 	.word	0x40002000
   2061c:	009d5000 	.word	0x009d5000
   20620:	00275000 	.word	0x00275000
   20624:	0075f000 	.word	0x0075f000
   20628:	03afb000 	.word	0x03afb000
   2062c:	013a9000 	.word	0x013a9000
   20630:	0ebed000 	.word	0x0ebed000

00020634 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
   20634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct uart_nrfx_data *data = dev->data;
	int err;
#ifdef CONFIG_PINCTRL
	const struct uart_nrfx_config *config = dev->config;
   20636:	6843      	ldr	r3, [r0, #4]
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
   20638:	4c12      	ldr	r4, [pc, #72]	; (20684 <uart_nrfx_init+0x50>)
#endif /* CONFIG_PINCTRL */

	nrf_uart_disable(uart0_addr);

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
   2063a:	681e      	ldr	r6, [r3, #0]
	struct uart_nrfx_data *data = dev->data;
   2063c:	6907      	ldr	r7, [r0, #16]
   2063e:	2100      	movs	r1, #0
{
   20640:	4605      	mov	r5, r0
   20642:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	ret = pinctrl_lookup_state(config, id, &state);
   20646:	aa01      	add	r2, sp, #4
   20648:	4630      	mov	r0, r6
   2064a:	f00c fb62 	bl	2cd12 <pinctrl_lookup_state>
	if (ret < 0) {
   2064e:	2800      	cmp	r0, #0
   20650:	db15      	blt.n	2067e <uart_nrfx_init+0x4a>
	return pinctrl_apply_state_direct(config, state);
   20652:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   20654:	6832      	ldr	r2, [r6, #0]
   20656:	7919      	ldrb	r1, [r3, #4]
   20658:	6818      	ldr	r0, [r3, #0]
   2065a:	f00c fb77 	bl	2cd4c <pinctrl_configure_pins>
	if (err < 0) {
   2065e:	2800      	cmp	r0, #0
   20660:	db0d      	blt.n	2067e <uart_nrfx_init+0x4a>
#else
	uart_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &data->uart_config);
   20662:	4639      	mov	r1, r7
   20664:	4628      	mov	r0, r5
   20666:	f7ff ff31 	bl	204cc <uart_nrfx_configure>
	if (err) {
   2066a:	b940      	cbnz	r0, 2067e <uart_nrfx_init+0x4a>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   2066c:	2304      	movs	r3, #4
   2066e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20672:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
   20676:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2067a:	2301      	movs	r3, #1
   2067c:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
   2067e:	b003      	add	sp, #12
   20680:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20682:	bf00      	nop
   20684:	40002000 	.word	0x40002000

00020688 <uart_nrfx_poll_out>:
{
   20688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2068a:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   2068c:	f00c fe91 	bl	2d3b2 <k_is_in_isr>
   20690:	4d1a      	ldr	r5, [pc, #104]	; (206fc <uart_nrfx_poll_out+0x74>)
   20692:	bb78      	cbnz	r0, 206f4 <uart_nrfx_poll_out+0x6c>
   20694:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20696:	2701      	movs	r7, #1
   20698:	f3bf 8f5b 	dmb	ish
   2069c:	e855 3f00 	ldrex	r3, [r5]
   206a0:	2b00      	cmp	r3, #0
   206a2:	d103      	bne.n	206ac <uart_nrfx_poll_out+0x24>
   206a4:	e845 7200 	strex	r2, r7, [r5]
   206a8:	2a00      	cmp	r2, #0
   206aa:	d1f7      	bne.n	2069c <uart_nrfx_poll_out+0x14>
   206ac:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   206b0:	d007      	beq.n	206c2 <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
   206b2:	2021      	movs	r0, #33	; 0x21
   206b4:	2100      	movs	r1, #0
			if (--safety_cnt == 0) {
   206b6:	3c01      	subs	r4, #1
   206b8:	f003 fc24 	bl	23f04 <z_impl_k_sleep>
   206bc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   206c0:	d1ea      	bne.n	20698 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   206c2:	4c0f      	ldr	r4, [pc, #60]	; (20700 <uart_nrfx_poll_out+0x78>)
   206c4:	2300      	movs	r3, #0
   206c6:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   206ca:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   206ce:	2301      	movs	r3, #1
   206d0:	60a3      	str	r3, [r4, #8]
    p_reg->TXD = txd;
   206d2:	f8c4 651c 	str.w	r6, [r4, #1308]	; 0x51c
   206d6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   206da:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   206de:	b923      	cbnz	r3, 206ea <uart_nrfx_poll_out+0x62>
   206e0:	2001      	movs	r0, #1
   206e2:	f00c fc96 	bl	2d012 <nrfx_busy_wait>
   206e6:	3e01      	subs	r6, #1
   206e8:	d1f7      	bne.n	206da <uart_nrfx_poll_out+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   206ea:	2301      	movs	r3, #1
   206ec:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   206ee:	2300      	movs	r3, #0
   206f0:	602b      	str	r3, [r5, #0]
}
   206f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
   206f4:	2301      	movs	r3, #1
   206f6:	602b      	str	r3, [r5, #0]
   206f8:	e7e3      	b.n	206c2 <uart_nrfx_poll_out+0x3a>
   206fa:	bf00      	nop
   206fc:	20005e14 	.word	0x20005e14
   20700:	40002000 	.word	0x40002000

00020704 <random_byte_get>:
	__asm__ volatile(
   20704:	f04f 0340 	mov.w	r3, #64	; 0x40
   20708:	f3ef 8211 	mrs	r2, BASEPRI
   2070c:	f383 8812 	msr	BASEPRI_MAX, r3
   20710:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   20714:	4b09      	ldr	r3, [pc, #36]	; (2073c <random_byte_get+0x38>)
   20716:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   2071a:	b161      	cbz	r1, 20736 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2071c:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   2071e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   20722:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   20726:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   2072a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   2072c:	f382 8811 	msr	BASEPRI, r2
   20730:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   20734:	4770      	bx	lr
	int retval = -EAGAIN;
   20736:	f06f 000a 	mvn.w	r0, #10
   2073a:	e7f7      	b.n	2072c <random_byte_get+0x28>
   2073c:	4000d000 	.word	0x4000d000

00020740 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   20740:	b5f0      	push	{r4, r5, r6, r7, lr}
   20742:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   20744:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   20746:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   20748:	f04f 0040 	mov.w	r0, #64	; 0x40
   2074c:	f3ef 8e11 	mrs	lr, BASEPRI
   20750:	f380 8812 	msr	BASEPRI_MAX, r0
   20754:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   20758:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   2075a:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   2075e:	1ba4      	subs	r4, r4, r6
   20760:	403c      	ands	r4, r7
	if (available < len) {
   20762:	42a2      	cmp	r2, r4
		len = available;
   20764:	bf88      	it	hi
   20766:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   20768:	18b0      	adds	r0, r6, r2
   2076a:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   2076c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   2076e:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   20770:	f38e 8811 	msr	BASEPRI, lr
   20774:	f3bf 8f6f 	isb	sy
   20778:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   2077a:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   2077c:	4290      	cmp	r0, r2
   2077e:	d119      	bne.n	207b4 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   20780:	4566      	cmp	r6, ip
   20782:	d10d      	bne.n	207a0 <rng_pool_get+0x60>
	__asm__ volatile(
   20784:	f04f 0540 	mov.w	r5, #64	; 0x40
   20788:	f3ef 8011 	mrs	r0, BASEPRI
   2078c:	f385 8812 	msr	BASEPRI_MAX, r5
   20790:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   20794:	781d      	ldrb	r5, [r3, #0]
   20796:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   20798:	f380 8811 	msr	BASEPRI, r0
   2079c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   207a0:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   207a2:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   207a4:	b290      	uxth	r0, r2
	available = available - len;
   207a6:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   207a8:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   207aa:	bf22      	ittt	cs
   207ac:	4b06      	ldrcs	r3, [pc, #24]	; (207c8 <rng_pool_get+0x88>)
   207ae:	2201      	movcs	r2, #1
   207b0:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   207b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   207b4:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   207b8:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   207ba:	f89e e005 	ldrb.w	lr, [lr, #5]
   207be:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   207c2:	403d      	ands	r5, r7
   207c4:	e7da      	b.n	2077c <rng_pool_get+0x3c>
   207c6:	bf00      	nop
   207c8:	4000d000 	.word	0x4000d000

000207cc <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   207cc:	43db      	mvns	r3, r3
{
   207ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   207d2:	f013 0501 	ands.w	r5, r3, #1
{
   207d6:	460e      	mov	r6, r1
   207d8:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   207da:	d004      	beq.n	207e6 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   207dc:	4821      	ldr	r0, [pc, #132]	; (20864 <entropy_nrf5_get_entropy_isr+0x98>)
   207de:	f7ff ffaf 	bl	20740 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   207e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   207e6:	b3a2      	cbz	r2, 20852 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   207e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   207ec:	f3ef 8811 	mrs	r8, BASEPRI
   207f0:	f383 8812 	msr	BASEPRI_MAX, r3
   207f4:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   207f8:	200d      	movs	r0, #13
   207fa:	f7f5 fec7 	bl	1658c <arch_irq_is_enabled>
   207fe:	4607      	mov	r7, r0
		irq_disable(IRQN);
   20800:	200d      	movs	r0, #13
   20802:	f7f5 feaf 	bl	16564 <arch_irq_disable>
	__asm__ volatile(
   20806:	f388 8811 	msr	BASEPRI, r8
   2080a:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2080e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 20868 <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20812:	f8df 9058 	ldr.w	r9, [pc, #88]	; 2086c <entropy_nrf5_get_entropy_isr+0xa0>
   20816:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   2081a:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   2081e:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   20822:	2301      	movs	r3, #1
   20824:	f8c8 3000 	str.w	r3, [r8]
   20828:	4625      	mov	r5, r4
   2082a:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   2082e:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   20832:	b183      	cbz	r3, 20856 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   20834:	f7ff ff66 	bl	20704 <random_byte_get>
			if (byte < 0) {
   20838:	1e03      	subs	r3, r0, #0
   2083a:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   2083e:	dbf6      	blt.n	2082e <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   20840:	3d01      	subs	r5, #1
   20842:	b2ad      	uxth	r5, r5
   20844:	5573      	strb	r3, [r6, r5]
		} while (len);
   20846:	2d00      	cmp	r5, #0
   20848:	d1f1      	bne.n	2082e <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   2084a:	b117      	cbz	r7, 20852 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   2084c:	200d      	movs	r0, #13
   2084e:	f7f5 fe79 	bl	16544 <arch_irq_enable>
	return cnt;
   20852:	4620      	mov	r0, r4
   20854:	e7c5      	b.n	207e2 <entropy_nrf5_get_entropy_isr+0x16>
   20856:	f3bf 8f4f 	dsb	sy
				__WFE();
   2085a:	bf20      	wfe
				__SEV();
   2085c:	bf40      	sev
				__WFE();
   2085e:	bf20      	wfe
   20860:	e7e5      	b.n	2082e <entropy_nrf5_get_entropy_isr+0x62>
   20862:	bf00      	nop
   20864:	20005e48 	.word	0x20005e48
   20868:	4000d000 	.word	0x4000d000
   2086c:	e000e100 	.word	0xe000e100

00020870 <entropy_nrf5_get_entropy>:
{
   20870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   20874:	4f13      	ldr	r7, [pc, #76]	; (208c4 <entropy_nrf5_get_entropy+0x54>)
   20876:	460d      	mov	r5, r1
   20878:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   2087a:	f107 0845 	add.w	r8, r7, #69	; 0x45
   2087e:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   20882:	b914      	cbnz	r4, 2088a <entropy_nrf5_get_entropy+0x1a>
}
   20884:	4620      	mov	r0, r4
   20886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2088a:	f04f 33ff 	mov.w	r3, #4294967295
   2088e:	f04f 32ff 	mov.w	r2, #4294967295
   20892:	4638      	mov	r0, r7
   20894:	f002 fe54 	bl	23540 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   20898:	4622      	mov	r2, r4
   2089a:	4629      	mov	r1, r5
   2089c:	4640      	mov	r0, r8
   2089e:	f7ff ff4f 	bl	20740 <rng_pool_get>
   208a2:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   208a4:	4638      	mov	r0, r7
   208a6:	f002 fe25 	bl	234f4 <z_impl_k_sem_give>
		if (bytes == 0U) {
   208aa:	b93e      	cbnz	r6, 208bc <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   208ac:	f04f 32ff 	mov.w	r2, #4294967295
   208b0:	f04f 33ff 	mov.w	r3, #4294967295
   208b4:	4648      	mov	r0, r9
   208b6:	f002 fe43 	bl	23540 <z_impl_k_sem_take>
			continue;
   208ba:	e7e2      	b.n	20882 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   208bc:	1ba4      	subs	r4, r4, r6
   208be:	b2a4      	uxth	r4, r4
		buf += bytes;
   208c0:	4435      	add	r5, r6
   208c2:	e7de      	b.n	20882 <entropy_nrf5_get_entropy+0x12>
   208c4:	20005e18 	.word	0x20005e18

000208c8 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   208c8:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   208ca:	4c19      	ldr	r4, [pc, #100]	; (20930 <entropy_nrf5_init+0x68>)
   208cc:	2201      	movs	r2, #1
   208ce:	4611      	mov	r1, r2
   208d0:	4620      	mov	r0, r4
   208d2:	f00c fe5e 	bl	2d592 <z_impl_k_sem_init>
   208d6:	2201      	movs	r2, #1
   208d8:	2100      	movs	r1, #0
   208da:	f104 0018 	add.w	r0, r4, #24
   208de:	f00c fe58 	bl	2d592 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   208e2:	f240 4307 	movw	r3, #1031	; 0x407
   208e6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   208ea:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   208ee:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   208f0:	230c      	movs	r3, #12
   208f2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   208f6:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   208f8:	4b0e      	ldr	r3, [pc, #56]	; (20934 <entropy_nrf5_init+0x6c>)
   208fa:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   208fe:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   20902:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   20906:	f022 0201 	bic.w	r2, r2, #1
   2090a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   2090e:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   20910:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   20914:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   20918:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   2091c:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2091e:	6019      	str	r1, [r3, #0]
   20920:	200d      	movs	r0, #13
   20922:	f7f5 fe41 	bl	165a8 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   20926:	200d      	movs	r0, #13
   20928:	f7f5 fe0c 	bl	16544 <arch_irq_enable>

	return 0;
}
   2092c:	4628      	mov	r0, r5
   2092e:	bd38      	pop	{r3, r4, r5, pc}
   20930:	20005e18 	.word	0x20005e18
   20934:	4000d000 	.word	0x4000d000

00020938 <isr>:
{
   20938:	b510      	push	{r4, lr}
	byte = random_byte_get();
   2093a:	f7ff fee3 	bl	20704 <random_byte_get>
	if (byte < 0) {
   2093e:	2800      	cmp	r0, #0
   20940:	db20      	blt.n	20984 <isr+0x4c>
	uint8_t last  = rngp->last;
   20942:	4b17      	ldr	r3, [pc, #92]	; (209a0 <isr+0x68>)
   20944:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   20948:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   2094c:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   20950:	1a51      	subs	r1, r2, r1
   20952:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   20956:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   20958:	d10d      	bne.n	20976 <isr+0x3e>
	uint8_t last  = rngp->last;
   2095a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   2095e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   20962:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   20966:	1a51      	subs	r1, r2, r1
   20968:	ea34 0101 	bics.w	r1, r4, r1
   2096c:	d10b      	bne.n	20986 <isr+0x4e>
   2096e:	4b0d      	ldr	r3, [pc, #52]	; (209a4 <isr+0x6c>)
   20970:	2201      	movs	r2, #1
   20972:	605a      	str	r2, [r3, #4]
}
   20974:	e00e      	b.n	20994 <isr+0x5c>
	rngp->buffer[last] = byte;
   20976:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   20978:	3201      	adds	r2, #1
   2097a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   2097c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   20980:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   20984:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   20986:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   20988:	3201      	adds	r2, #1
   2098a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   2098c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   20990:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   20994:	4804      	ldr	r0, [pc, #16]	; (209a8 <isr+0x70>)
}
   20996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2099a:	f002 bdab 	b.w	234f4 <z_impl_k_sem_give>
   2099e:	bf00      	nop
   209a0:	20005e18 	.word	0x20005e18
   209a4:	4000d000 	.word	0x4000d000
   209a8:	20005e30 	.word	0x20005e30

000209ac <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   209ac:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   209ae:	2301      	movs	r3, #1
   209b0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   209b2:	4a11      	ldr	r2, [pc, #68]	; (209f8 <compare_int_lock+0x4c>)
   209b4:	f3bf 8f5b 	dmb	ish
   209b8:	43dc      	mvns	r4, r3
   209ba:	e852 1f00 	ldrex	r1, [r2]
   209be:	ea01 0c04 	and.w	ip, r1, r4
   209c2:	e842 ce00 	strex	lr, ip, [r2]
   209c6:	f1be 0f00 	cmp.w	lr, #0
   209ca:	d1f6      	bne.n	209ba <compare_int_lock+0xe>
   209cc:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   209d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   209d4:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   209d8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   209dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   209e0:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   209e4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   209e8:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   209ec:	420b      	tst	r3, r1
}
   209ee:	bf14      	ite	ne
   209f0:	2001      	movne	r0, #1
   209f2:	2000      	moveq	r0, #0
   209f4:	bd10      	pop	{r4, pc}
   209f6:	bf00      	nop
   209f8:	20005e70 	.word	0x20005e70

000209fc <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   209fc:	4919      	ldr	r1, [pc, #100]	; (20a64 <sys_clock_timeout_handler+0x68>)
{
   209fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20a00:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   20a02:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   20a06:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   20a08:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   20a0c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   20a10:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   20a12:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   20a16:	d222      	bcs.n	20a5e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   20a18:	4b13      	ldr	r3, [pc, #76]	; (20a68 <sys_clock_timeout_handler+0x6c>)
   20a1a:	681b      	ldr	r3, [r3, #0]
   20a1c:	0a1a      	lsrs	r2, r3, #8
   20a1e:	061b      	lsls	r3, r3, #24
   20a20:	195e      	adds	r6, r3, r5
   20a22:	4b12      	ldr	r3, [pc, #72]	; (20a6c <sys_clock_timeout_handler+0x70>)
   20a24:	f142 0700 	adc.w	r7, r2, #0
   20a28:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   20a2c:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   20a2e:	f003 fbf3 	bl	24218 <sys_clock_announce>
    return p_reg->CC[ch];
   20a32:	00a3      	lsls	r3, r4, #2
   20a34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20a38:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   20a3c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   20a40:	42aa      	cmp	r2, r5
   20a42:	d10b      	bne.n	20a5c <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   20a44:	b91e      	cbnz	r6, 20a4e <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   20a46:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   20a4a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   20a4e:	4b08      	ldr	r3, [pc, #32]	; (20a70 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   20a50:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   20a54:	fa00 f404 	lsl.w	r4, r0, r4
   20a58:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   20a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   20a5e:	2600      	movs	r6, #0
   20a60:	e7e5      	b.n	20a2e <sys_clock_timeout_handler+0x32>
   20a62:	bf00      	nop
   20a64:	20002380 	.word	0x20002380
   20a68:	20005e74 	.word	0x20005e74
   20a6c:	20002368 	.word	0x20002368
   20a70:	40011000 	.word	0x40011000

00020a74 <compare_int_unlock>:
	if (key) {
   20a74:	b319      	cbz	r1, 20abe <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20a76:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   20a7a:	2301      	movs	r3, #1
   20a7c:	4a10      	ldr	r2, [pc, #64]	; (20ac0 <compare_int_unlock+0x4c>)
   20a7e:	4083      	lsls	r3, r0
   20a80:	e852 1f00 	ldrex	r1, [r2]
   20a84:	4319      	orrs	r1, r3
   20a86:	e842 1c00 	strex	ip, r1, [r2]
   20a8a:	f1bc 0f00 	cmp.w	ip, #0
   20a8e:	d1f7      	bne.n	20a80 <compare_int_unlock+0xc>
   20a90:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   20a94:	4a0b      	ldr	r2, [pc, #44]	; (20ac4 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   20a96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   20a9a:	4083      	lsls	r3, r0
   20a9c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20aa0:	4b09      	ldr	r3, [pc, #36]	; (20ac8 <compare_int_unlock+0x54>)
   20aa2:	f3bf 8f5b 	dmb	ish
   20aa6:	681b      	ldr	r3, [r3, #0]
   20aa8:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   20aac:	fa23 f000 	lsr.w	r0, r3, r0
   20ab0:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20ab2:	bf42      	ittt	mi
   20ab4:	4b05      	ldrmi	r3, [pc, #20]	; (20acc <compare_int_unlock+0x58>)
   20ab6:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   20aba:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   20abe:	4770      	bx	lr
   20ac0:	20005e70 	.word	0x20005e70
   20ac4:	40011000 	.word	0x40011000
   20ac8:	20005e6c 	.word	0x20005e6c
   20acc:	e000e100 	.word	0xe000e100

00020ad0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   20ad0:	4b0d      	ldr	r3, [pc, #52]	; (20b08 <z_nrf_rtc_timer_read+0x38>)
   20ad2:	6818      	ldr	r0, [r3, #0]
   20ad4:	0a01      	lsrs	r1, r0, #8
   20ad6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   20ad8:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   20adc:	4b0b      	ldr	r3, [pc, #44]	; (20b0c <z_nrf_rtc_timer_read+0x3c>)
   20ade:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   20ae2:	1818      	adds	r0, r3, r0
   20ae4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   20ae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   20aec:	d20a      	bcs.n	20b04 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   20aee:	4b08      	ldr	r3, [pc, #32]	; (20b10 <z_nrf_rtc_timer_read+0x40>)
   20af0:	e9d3 2300 	ldrd	r2, r3, [r3]
   20af4:	4290      	cmp	r0, r2
   20af6:	eb71 0303 	sbcs.w	r3, r1, r3
   20afa:	d203      	bcs.n	20b04 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   20afc:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   20b00:	f141 0100 	adc.w	r1, r1, #0
}
   20b04:	4770      	bx	lr
   20b06:	bf00      	nop
   20b08:	20005e74 	.word	0x20005e74
   20b0c:	40011000 	.word	0x40011000
   20b10:	20002368 	.word	0x20002368

00020b14 <compare_set>:
{
   20b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b18:	b085      	sub	sp, #20
   20b1a:	4616      	mov	r6, r2
   20b1c:	4698      	mov	r8, r3
   20b1e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   20b20:	f7ff ff44 	bl	209ac <compare_int_lock>
   20b24:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   20b26:	f7ff ffd3 	bl	20ad0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   20b2a:	42b0      	cmp	r0, r6
   20b2c:	eb71 0308 	sbcs.w	r3, r1, r8
   20b30:	d278      	bcs.n	20c24 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   20b32:	4b46      	ldr	r3, [pc, #280]	; (20c4c <compare_set+0x138>)
   20b34:	1a30      	subs	r0, r6, r0
   20b36:	eb68 0101 	sbc.w	r1, r8, r1
   20b3a:	4298      	cmp	r0, r3
   20b3c:	f171 0300 	sbcs.w	r3, r1, #0
   20b40:	f080 8081 	bcs.w	20c46 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   20b44:	4b42      	ldr	r3, [pc, #264]	; (20c50 <compare_set+0x13c>)
   20b46:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   20b4a:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   20b4e:	45d8      	cmp	r8, fp
   20b50:	bf08      	it	eq
   20b52:	4556      	cmpeq	r6, sl
   20b54:	d051      	beq.n	20bfa <compare_set+0xe6>
   20b56:	ea4f 0985 	mov.w	r9, r5, lsl #2
   20b5a:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   20b5e:	f105 0750 	add.w	r7, r5, #80	; 0x50
   20b62:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   20b66:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   20b68:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   20b6c:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   20b70:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   20b72:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   20b76:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   20b7a:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   20b7c:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   20b80:	4b34      	ldr	r3, [pc, #208]	; (20c54 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   20b82:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   20b86:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   20b88:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   20b8c:	1a40      	subs	r0, r0, r1
   20b8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   20b92:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   20b96:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   20b98:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   20b9c:	d107      	bne.n	20bae <compare_set+0x9a>
   20b9e:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   20ba2:	2013      	movs	r0, #19
   20ba4:	f00c ff5e 	bl	2da64 <z_impl_k_busy_wait>
   20ba8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   20bac:	4b29      	ldr	r3, [pc, #164]	; (20c54 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   20bae:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   20bb2:	eba4 000c 	sub.w	r0, r4, ip
   20bb6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   20bba:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   20bbe:	bf88      	it	hi
   20bc0:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   20bc2:	2000      	movs	r0, #0
   20bc4:	6038      	str	r0, [r7, #0]
   20bc6:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   20bc8:	9801      	ldr	r0, [sp, #4]
   20bca:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   20bce:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   20bd2:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   20bd6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   20bda:	4281      	cmp	r1, r0
   20bdc:	d006      	beq.n	20bec <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   20bde:	1a20      	subs	r0, r4, r0
   20be0:	3802      	subs	r0, #2
   20be2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   20be6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   20bea:	d819      	bhi.n	20c20 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   20bec:	1aa4      	subs	r4, r4, r2
   20bee:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   20bf2:	eb14 0a06 	adds.w	sl, r4, r6
   20bf6:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   20bfa:	4915      	ldr	r1, [pc, #84]	; (20c50 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   20bfc:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   20bfe:	012b      	lsls	r3, r5, #4
   20c00:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   20c04:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   20c08:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   20c0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20c0c:	6053      	str	r3, [r2, #4]
	return ret;
   20c0e:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   20c10:	4628      	mov	r0, r5
   20c12:	9900      	ldr	r1, [sp, #0]
   20c14:	f7ff ff2e 	bl	20a74 <compare_int_unlock>
}
   20c18:	4620      	mov	r0, r4
   20c1a:	b005      	add	sp, #20
   20c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c20:	4620      	mov	r0, r4
   20c22:	e7b1      	b.n	20b88 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   20c24:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20c26:	4a0c      	ldr	r2, [pc, #48]	; (20c58 <compare_set+0x144>)
   20c28:	f3bf 8f5b 	dmb	ish
   20c2c:	40ab      	lsls	r3, r5
   20c2e:	e852 1f00 	ldrex	r1, [r2]
   20c32:	4319      	orrs	r1, r3
   20c34:	e842 1000 	strex	r0, r1, [r2]
   20c38:	2800      	cmp	r0, #0
   20c3a:	d1f8      	bne.n	20c2e <compare_set+0x11a>
   20c3c:	f3bf 8f5b 	dmb	ish
   20c40:	46b2      	mov	sl, r6
   20c42:	46c3      	mov	fp, r8
   20c44:	e7d9      	b.n	20bfa <compare_set+0xe6>
			return -EINVAL;
   20c46:	f06f 0415 	mvn.w	r4, #21
   20c4a:	e7e1      	b.n	20c10 <compare_set+0xfc>
   20c4c:	01000001 	.word	0x01000001
   20c50:	20002370 	.word	0x20002370
   20c54:	40011000 	.word	0x40011000
   20c58:	20005e6c 	.word	0x20005e6c

00020c5c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   20c5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   20c5e:	4b19      	ldr	r3, [pc, #100]	; (20cc4 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   20c60:	4d19      	ldr	r5, [pc, #100]	; (20cc8 <sys_clock_driver_init+0x6c>)
   20c62:	2400      	movs	r4, #0
   20c64:	f04f 30ff 	mov.w	r0, #4294967295
   20c68:	f04f 31ff 	mov.w	r1, #4294967295
   20c6c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   20c70:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   20c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   20c78:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20c7c:	4b13      	ldr	r3, [pc, #76]	; (20ccc <sys_clock_driver_init+0x70>)
   20c7e:	2602      	movs	r6, #2
   20c80:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   20c84:	2101      	movs	r1, #1
   20c86:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   20c8a:	2011      	movs	r0, #17
   20c8c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   20c90:	4622      	mov	r2, r4
   20c92:	f7f5 fc89 	bl	165a8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   20c96:	2011      	movs	r0, #17
   20c98:	f7f5 fc54 	bl	16544 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   20c9c:	4a0c      	ldr	r2, [pc, #48]	; (20cd0 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   20c9e:	2301      	movs	r3, #1
   20ca0:	60ab      	str	r3, [r5, #8]
   20ca2:	602b      	str	r3, [r5, #0]
   20ca4:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   20ca6:	4b0b      	ldr	r3, [pc, #44]	; (20cd4 <sys_clock_driver_init+0x78>)
   20ca8:	4a0b      	ldr	r2, [pc, #44]	; (20cd8 <sys_clock_driver_init+0x7c>)
   20caa:	9300      	str	r3, [sp, #0]
   20cac:	9401      	str	r4, [sp, #4]
   20cae:	2300      	movs	r3, #0
   20cb0:	4620      	mov	r0, r4
   20cb2:	f7ff ff2f 	bl	20b14 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   20cb6:	4630      	mov	r0, r6
   20cb8:	f7fe fd92 	bl	1f7e0 <z_nrf_clock_control_lf_on>

	return 0;
}
   20cbc:	4620      	mov	r0, r4
   20cbe:	b002      	add	sp, #8
   20cc0:	bd70      	pop	{r4, r5, r6, pc}
   20cc2:	bf00      	nop
   20cc4:	20002370 	.word	0x20002370
   20cc8:	40011000 	.word	0x40011000
   20ccc:	e000e100 	.word	0xe000e100
   20cd0:	20005e70 	.word	0x20005e70
   20cd4:	000209fd 	.word	0x000209fd
   20cd8:	007fffff 	.word	0x007fffff

00020cdc <rtc_nrf_isr>:
{
   20cdc:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    return p_reg->INTENSET & mask;
   20ce0:	4c2c      	ldr	r4, [pc, #176]	; (20d94 <rtc_nrf_isr+0xb8>)
   20ce2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   20ce6:	0799      	lsls	r1, r3, #30
   20ce8:	d50b      	bpl.n	20d02 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20cea:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   20cee:	b143      	cbz	r3, 20d02 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   20cf0:	4a29      	ldr	r2, [pc, #164]	; (20d98 <rtc_nrf_isr+0xbc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   20cf2:	2300      	movs	r3, #0
   20cf4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   20cf8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   20cfc:	6813      	ldr	r3, [r2, #0]
   20cfe:	3301      	adds	r3, #1
   20d00:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   20d02:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   20d06:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   20d08:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   20d0c:	03d2      	lsls	r2, r2, #15
   20d0e:	d52d      	bpl.n	20d6c <rtc_nrf_isr+0x90>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20d10:	f3bf 8f5b 	dmb	ish
   20d14:	4a21      	ldr	r2, [pc, #132]	; (20d9c <rtc_nrf_isr+0xc0>)
   20d16:	e852 1f00 	ldrex	r1, [r2]
   20d1a:	f021 0001 	bic.w	r0, r1, #1
   20d1e:	e842 0500 	strex	r5, r0, [r2]
   20d22:	2d00      	cmp	r5, #0
   20d24:	d1f7      	bne.n	20d16 <rtc_nrf_isr+0x3a>
   20d26:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   20d2a:	b911      	cbnz	r1, 20d32 <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20d2c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
		if (result) {
   20d30:	b1e2      	cbz	r2, 20d6c <rtc_nrf_isr+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   20d32:	2500      	movs	r5, #0
   20d34:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   20d38:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   20d3c:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   20d40:	f7ff fec6 	bl	20ad0 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   20d44:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   20d48:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   20d4a:	4b15      	ldr	r3, [pc, #84]	; (20da0 <rtc_nrf_isr+0xc4>)
   20d4c:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   20d50:	42b0      	cmp	r0, r6
   20d52:	41b9      	sbcs	r1, r7
   20d54:	d20f      	bcs.n	20d76 <rtc_nrf_isr+0x9a>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   20d56:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   20d58:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   20d5c:	b141      	cbz	r1, 20d70 <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
   20d5e:	f8cd 8000 	str.w	r8, [sp]
   20d62:	4632      	mov	r2, r6
   20d64:	463b      	mov	r3, r7
   20d66:	2000      	movs	r0, #0
   20d68:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   20d6a:	e001      	b.n	20d70 <rtc_nrf_isr+0x94>
   20d6c:	f383 8810 	msr	PRIMASK, r3
}
   20d70:	b002      	add	sp, #8
   20d72:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   20d76:	f04f 3aff 	mov.w	sl, #4294967295
   20d7a:	f04f 3bff 	mov.w	fp, #4294967295
			user_context = cc_data[chan].user_context;
   20d7e:	e9d3 1800 	ldrd	r1, r8, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   20d82:	e9c3 ab02 	strd	sl, fp, [r3, #8]
			cc_data[chan].callback = NULL;
   20d86:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   20d88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   20d8c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   20d90:	e7e2      	b.n	20d58 <rtc_nrf_isr+0x7c>
   20d92:	bf00      	nop
   20d94:	40011000 	.word	0x40011000
   20d98:	20005e74 	.word	0x20005e74
   20d9c:	20005e6c 	.word	0x20005e6c
   20da0:	20002370 	.word	0x20002370

00020da4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   20da4:	1c43      	adds	r3, r0, #1
{
   20da6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   20da8:	d021      	beq.n	20dee <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   20daa:	2801      	cmp	r0, #1
   20dac:	dd21      	ble.n	20df2 <sys_clock_set_timeout+0x4e>
   20dae:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   20db2:	da20      	bge.n	20df6 <sys_clock_set_timeout+0x52>
   20db4:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   20db6:	f7ff fe8b 	bl	20ad0 <z_nrf_rtc_timer_read>
   20dba:	4b10      	ldr	r3, [pc, #64]	; (20dfc <sys_clock_set_timeout+0x58>)
   20dbc:	e9d3 1300 	ldrd	r1, r3, [r3]
   20dc0:	1a40      	subs	r0, r0, r1
		ticks = 0;
   20dc2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   20dc6:	bf28      	it	cs
   20dc8:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   20dca:	3001      	adds	r0, #1
   20dcc:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   20dce:	480c      	ldr	r0, [pc, #48]	; (20e00 <sys_clock_set_timeout+0x5c>)
   20dd0:	4282      	cmp	r2, r0
   20dd2:	bf28      	it	cs
   20dd4:	4602      	movcs	r2, r0
   20dd6:	1852      	adds	r2, r2, r1
   20dd8:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   20ddc:	4909      	ldr	r1, [pc, #36]	; (20e04 <sys_clock_set_timeout+0x60>)
   20dde:	9001      	str	r0, [sp, #4]
   20de0:	9100      	str	r1, [sp, #0]
   20de2:	f143 0300 	adc.w	r3, r3, #0
   20de6:	f7ff fe95 	bl	20b14 <compare_set>
}
   20dea:	b002      	add	sp, #8
   20dec:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   20dee:	4804      	ldr	r0, [pc, #16]	; (20e00 <sys_clock_set_timeout+0x5c>)
   20df0:	e7e0      	b.n	20db4 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   20df2:	2400      	movs	r4, #0
   20df4:	e7df      	b.n	20db6 <sys_clock_set_timeout+0x12>
   20df6:	4c02      	ldr	r4, [pc, #8]	; (20e00 <sys_clock_set_timeout+0x5c>)
   20df8:	e7dd      	b.n	20db6 <sys_clock_set_timeout+0x12>
   20dfa:	bf00      	nop
   20dfc:	20002380 	.word	0x20002380
   20e00:	007fffff 	.word	0x007fffff
   20e04:	000209fd 	.word	0x000209fd

00020e08 <sys_clock_elapsed>:
{
   20e08:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   20e0a:	f7ff fe61 	bl	20ad0 <z_nrf_rtc_timer_read>
   20e0e:	4b02      	ldr	r3, [pc, #8]	; (20e18 <sys_clock_elapsed+0x10>)
   20e10:	681b      	ldr	r3, [r3, #0]
}
   20e12:	1ac0      	subs	r0, r0, r3
   20e14:	bd08      	pop	{r3, pc}
   20e16:	bf00      	nop
   20e18:	20002380 	.word	0x20002380

00020e1c <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
   20e1c:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   20e20:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   20e22:	2801      	cmp	r0, #1
   20e24:	4b04      	ldr	r3, [pc, #16]	; (20e38 <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   20e26:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   20e2a:	bf18      	it	ne
   20e2c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   20e30:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   20e32:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
   20e36:	4770      	bx	lr
   20e38:	50000300 	.word	0x50000300

00020e3c <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
   20e3c:	b530      	push	{r4, r5, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   20e3e:	f400 5480 	and.w	r4, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   20e42:	2c00      	cmp	r4, #0
   20e44:	bf08      	it	eq
   20e46:	4615      	moveq	r5, r2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   20e48:	ea4f 2303 	mov.w	r3, r3, lsl #8
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
   20e4c:	f3c0 1281 	ubfx	r2, r0, #6, #2
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   20e50:	bf1c      	itt	ne
   20e52:	2501      	movne	r5, #1
   20e54:	2100      	movne	r1, #0
    *p_pin = pin_number & 0x1F;
   20e56:	f000 041f 	and.w	r4, r0, #31
        case 1: return NRF_P1;
   20e5a:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   20e5e:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
        case 1: return NRF_P1;
   20e62:	4806      	ldr	r0, [pc, #24]	; (20e7c <nrf_pin_configure+0x40>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   20e64:	ea42 0201 	orr.w	r2, r2, r1
        case 1: return NRF_P1;
   20e68:	bf08      	it	eq
   20e6a:	f04f 40a0 	moveq.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   20e6e:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   20e72:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   20e76:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
		     NRF_GPIO_PIN_NOSENSE);
}
   20e7a:	bd30      	pop	{r4, r5, pc}
   20e7c:	50000300 	.word	0x50000300

00020e80 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
   20e80:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   20e84:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   20e86:	2801      	cmp	r0, #1
   20e88:	4b04      	ldr	r3, [pc, #16]	; (20e9c <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   20e8a:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   20e8e:	bf18      	it	ne
   20e90:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   20e94:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   20e96:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   20e9a:	4770      	bx	lr
   20e9c:	50000300 	.word	0x50000300

00020ea0 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   20ea0:	4602      	mov	r2, r0
   20ea2:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   20ea4:	4801      	ldr	r0, [pc, #4]	; (20eac <multithreading_lock_acquire+0xc>)
   20ea6:	f002 ba3d 	b.w	23324 <z_impl_k_mutex_lock>
   20eaa:	bf00      	nop
   20eac:	20000b28 	.word	0x20000b28

00020eb0 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   20eb0:	4801      	ldr	r0, [pc, #4]	; (20eb8 <multithreading_lock_release+0x8>)
   20eb2:	f002 baaf 	b.w	23414 <z_impl_k_mutex_unlock>
   20eb6:	bf00      	nop
   20eb8:	20000b28 	.word	0x20000b28

00020ebc <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   20ebc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   20ebe:	f7f4 fafd 	bl	154bc <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   20ec2:	4b07      	ldr	r3, [pc, #28]	; (20ee0 <k_sys_fatal_error_handler+0x24>)
   20ec4:	9305      	str	r3, [sp, #20]
   20ec6:	2302      	movs	r3, #2
   20ec8:	9304      	str	r3, [sp, #16]
   20eca:	4806      	ldr	r0, [pc, #24]	; (20ee4 <k_sys_fatal_error_handler+0x28>)
   20ecc:	2300      	movs	r3, #0
   20ece:	aa04      	add	r2, sp, #16
   20ed0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20ed4:	f7f4 fbda 	bl	1568c <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   20ed8:	2000      	movs	r0, #0
   20eda:	f7f6 f8e9 	bl	170b0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   20ede:	bf00      	nop
   20ee0:	00031b0e 	.word	0x00031b0e
   20ee4:	0002e5fc 	.word	0x0002e5fc

00020ee8 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   20ee8:	b598      	push	{r3, r4, r7, lr}
   20eea:	af00      	add	r7, sp, #0
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   20eec:	466c      	mov	r4, sp
   20eee:	b08a      	sub	sp, #40	; 0x28
   20ef0:	466a      	mov	r2, sp
   20ef2:	4b0c      	ldr	r3, [pc, #48]	; (20f24 <sdc_assertion_handler+0x3c>)
   20ef4:	61d1      	str	r1, [r2, #28]
   20ef6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   20efa:	2302      	movs	r3, #2
   20efc:	f882 3020 	strb.w	r3, [r2, #32]
   20f00:	4b09      	ldr	r3, [pc, #36]	; (20f28 <sdc_assertion_handler+0x40>)
   20f02:	f842 3f10 	str.w	r3, [r2, #16]!
   20f06:	4809      	ldr	r0, [pc, #36]	; (20f2c <sdc_assertion_handler+0x44>)
   20f08:	2300      	movs	r3, #0
   20f0a:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   20f0e:	f7f4 fbbd 	bl	1568c <z_impl_z_log_msg_static_create>
   20f12:	46a5      	mov	sp, r4
	k_oops();
   20f14:	4040      	eors	r0, r0
   20f16:	f380 8811 	msr	BASEPRI, r0
   20f1a:	f04f 0003 	mov.w	r0, #3
   20f1e:	df02      	svc	2
}
   20f20:	46bd      	mov	sp, r7
   20f22:	bd98      	pop	{r3, r4, r7, pc}
   20f24:	00031b2b 	.word	0x00031b2b
   20f28:	01000004 	.word	0x01000004
   20f2c:	0002e66c 	.word	0x0002e66c

00020f30 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   20f30:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   20f32:	4804      	ldr	r0, [pc, #16]	; (20f44 <hci_driver_init+0x14>)
   20f34:	f7f7 fd9a 	bl	18a6c <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   20f38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   20f3c:	4802      	ldr	r0, [pc, #8]	; (20f48 <hci_driver_init+0x18>)
   20f3e:	f7e4 bafd 	b.w	553c <sdc_init>
   20f42:	bf00      	nop
   20f44:	0002f2e0 	.word	0x0002f2e0
   20f48:	00020ee9 	.word	0x00020ee9

00020f4c <rand_prio_low_vector_get>:
{
   20f4c:	b538      	push	{r3, r4, r5, lr}
   20f4e:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   20f50:	4807      	ldr	r0, [pc, #28]	; (20f70 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   20f52:	6883      	ldr	r3, [r0, #8]
   20f54:	685d      	ldr	r5, [r3, #4]
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   20f56:	460a      	mov	r2, r1
   20f58:	b135      	cbz	r5, 20f68 <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   20f5a:	2300      	movs	r3, #0
   20f5c:	4621      	mov	r1, r4
   20f5e:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   20f60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   20f64:	b2c0      	uxtb	r0, r0
   20f66:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   20f68:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20f6c:	e7f8      	b.n	20f60 <rand_prio_low_vector_get+0x14>
   20f6e:	bf00      	nop
   20f70:	0002e294 	.word	0x0002e294

00020f74 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   20f74:	4901      	ldr	r1, [pc, #4]	; (20f7c <receive_signal_raise+0x8>)
   20f76:	4802      	ldr	r0, [pc, #8]	; (20f80 <receive_signal_raise+0xc>)
   20f78:	f00c bbb8 	b.w	2d6ec <k_work_submit_to_queue>
   20f7c:	20005e78 	.word	0x20005e78
   20f80:	20002408 	.word	0x20002408

00020f84 <rand_prio_low_vector_get_blocking>:
{
   20f84:	b410      	push	{r4}
   20f86:	4603      	mov	r3, r0
   20f88:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   20f8a:	4803      	ldr	r0, [pc, #12]	; (20f98 <rand_prio_low_vector_get_blocking+0x14>)
   20f8c:	6881      	ldr	r1, [r0, #8]
   20f8e:	680c      	ldr	r4, [r1, #0]
   20f90:	4619      	mov	r1, r3
   20f92:	4623      	mov	r3, r4
}
   20f94:	bc10      	pop	{r4}
   20f96:	4718      	bx	r3
   20f98:	0002e294 	.word	0x0002e294

00020f9c <event_packet_process.constprop.0>:
static void event_packet_process(uint8_t *hci_buf)
   20f9c:	b570      	push	{r4, r5, r6, lr}
	switch (hdr->evt) {
   20f9e:	4e1a      	ldr	r6, [pc, #104]	; (21008 <event_packet_process.constprop.0+0x6c>)
   20fa0:	7830      	ldrb	r0, [r6, #0]
   20fa2:	283e      	cmp	r0, #62	; 0x3e
static void event_packet_process(uint8_t *hci_buf)
   20fa4:	b086      	sub	sp, #24
	switch (hdr->evt) {
   20fa6:	d019      	beq.n	20fdc <event_packet_process.constprop.0+0x40>
   20fa8:	28ff      	cmp	r0, #255	; 0xff
   20faa:	d01e      	beq.n	20fea <event_packet_process.constprop.0+0x4e>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   20fac:	f04f 32ff 	mov.w	r2, #4294967295
   20fb0:	f04f 33ff 	mov.w	r3, #4294967295
		switch (subevent) {
   20fb4:	2400      	movs	r4, #0
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   20fb6:	4621      	mov	r1, r4
   20fb8:	f7f6 fb30 	bl	1761c <bt_buf_get_evt>
	if (!evt_buf) {
   20fbc:	4605      	mov	r5, r0
   20fbe:	b9b8      	cbnz	r0, 20ff0 <event_packet_process.constprop.0+0x54>
		if (discardable) {
   20fc0:	b954      	cbnz	r4, 20fd8 <event_packet_process.constprop.0+0x3c>
		BT_ERR("No event buffer available");
   20fc2:	4b12      	ldr	r3, [pc, #72]	; (2100c <event_packet_process.constprop.0+0x70>)
   20fc4:	9305      	str	r3, [sp, #20]
   20fc6:	2302      	movs	r3, #2
   20fc8:	9304      	str	r3, [sp, #16]
   20fca:	4811      	ldr	r0, [pc, #68]	; (21010 <event_packet_process.constprop.0+0x74>)
   20fcc:	4623      	mov	r3, r4
   20fce:	aa04      	add	r2, sp, #16
   20fd0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20fd4:	f7f4 fb5a 	bl	1568c <z_impl_z_log_msg_static_create>
}
   20fd8:	b006      	add	sp, #24
   20fda:	bd70      	pop	{r4, r5, r6, pc}
		switch (me->subevent) {
   20fdc:	78b3      	ldrb	r3, [r6, #2]
   20fde:	2b02      	cmp	r3, #2
		switch (subevent) {
   20fe0:	d1e4      	bne.n	20fac <event_packet_process.constprop.0+0x10>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   20fe2:	2200      	movs	r2, #0
   20fe4:	2300      	movs	r3, #0
		switch (subevent) {
   20fe6:	2401      	movs	r4, #1
   20fe8:	e7e5      	b.n	20fb6 <event_packet_process.constprop.0+0x1a>
   20fea:	78b3      	ldrb	r3, [r6, #2]
   20fec:	2b80      	cmp	r3, #128	; 0x80
   20fee:	e7f7      	b.n	20fe0 <event_packet_process.constprop.0+0x44>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   20ff0:	7872      	ldrb	r2, [r6, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   20ff2:	4905      	ldr	r1, [pc, #20]	; (21008 <event_packet_process.constprop.0+0x6c>)
   20ff4:	3202      	adds	r2, #2
   20ff6:	3008      	adds	r0, #8
   20ff8:	f00b fc7a 	bl	2c8f0 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   20ffc:	4628      	mov	r0, r5
}
   20ffe:	b006      	add	sp, #24
   21000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_recv(evt_buf);
   21004:	f7f7 bcfc 	b.w	18a00 <bt_recv>
   21008:	20006c33 	.word	0x20006c33
   2100c:	00031b50 	.word	0x00031b50
   21010:	0002e66c 	.word	0x0002e66c

00021014 <hci_driver_open>:
{
   21014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21018:	b08c      	sub	sp, #48	; 0x30
   2101a:	af00      	add	r7, sp, #0
		hci_ecdh_init();
   2101c:	f000 fd78 	bl	21b10 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   21020:	1d38      	adds	r0, r7, #4
   21022:	f7e4 f9ef 	bl	5404 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   21026:	466c      	mov	r4, sp
   21028:	b088      	sub	sp, #32
   2102a:	466a      	mov	r2, sp
   2102c:	4b61      	ldr	r3, [pc, #388]	; (211b4 <hci_driver_open+0x1a0>)
   2102e:	6153      	str	r3, [r2, #20]
   21030:	4b61      	ldr	r3, [pc, #388]	; (211b8 <hci_driver_open+0x1a4>)
   21032:	6193      	str	r3, [r2, #24]
   21034:	f04f 0802 	mov.w	r8, #2
   21038:	4b60      	ldr	r3, [pc, #384]	; (211bc <hci_driver_open+0x1a8>)
   2103a:	f882 801c 	strb.w	r8, [r2, #28]
   2103e:	f842 3f10 	str.w	r3, [r2, #16]!
   21042:	495f      	ldr	r1, [pc, #380]	; (211c0 <hci_driver_open+0x1ac>)
   21044:	485f      	ldr	r0, [pc, #380]	; (211c4 <hci_driver_open+0x1b0>)
   21046:	1d3b      	adds	r3, r7, #4
   21048:	f7f4 fb20 	bl	1568c <z_impl_z_log_msg_static_create>
   2104c:	46a5      	mov	sp, r4
			err = sdc_support_adv();
   2104e:	f7e4 faf3 	bl	5638 <sdc_support_adv>
			if (err) {
   21052:	b128      	cbz	r0, 21060 <hci_driver_open+0x4c>
				return -ENOTSUP;
   21054:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   21058:	3730      	adds	r7, #48	; 0x30
   2105a:	46bd      	mov	sp, r7
   2105c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = sdc_support_peripheral();
   21060:	f7e4 fb1c 	bl	569c <sdc_support_peripheral>
		if (err) {
   21064:	2800      	cmp	r0, #0
   21066:	d1f5      	bne.n	21054 <hci_driver_open+0x40>
			err = sdc_support_dle_peripheral();
   21068:	f7e4 faf6 	bl	5658 <sdc_support_dle_peripheral>
			if (err) {
   2106c:	2800      	cmp	r0, #0
   2106e:	d1f1      	bne.n	21054 <hci_driver_open+0x40>
		err = sdc_support_le_2m_phy();
   21070:	f7e4 fb02 	bl	5678 <sdc_support_le_2m_phy>
		if (err) {
   21074:	2800      	cmp	r0, #0
   21076:	d1ed      	bne.n	21054 <hci_driver_open+0x40>
			err = sdc_support_phy_update_peripheral();
   21078:	f7e4 fb20 	bl	56bc <sdc_support_phy_update_peripheral>
			if (err) {
   2107c:	4605      	mov	r5, r0
   2107e:	2800      	cmp	r0, #0
   21080:	d1e8      	bne.n	21054 <hci_driver_open+0x40>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21082:	f107 0418 	add.w	r4, r7, #24
   21086:	4622      	mov	r2, r4
   21088:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   2108a:	7638      	strb	r0, [r7, #24]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2108c:	f7e4 f9c8 	bl	5420 <sdc_cfg_set>
	if (required_memory < 0) {
   21090:	2800      	cmp	r0, #0
   21092:	dbe1      	blt.n	21058 <hci_driver_open+0x44>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   21094:	2601      	movs	r6, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21096:	4622      	mov	r2, r4
   21098:	4641      	mov	r1, r8
   2109a:	4628      	mov	r0, r5
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   2109c:	763e      	strb	r6, [r7, #24]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2109e:	f7e4 f9bf 	bl	5420 <sdc_cfg_set>
	if (required_memory < 0) {
   210a2:	2800      	cmp	r0, #0
   210a4:	dbd8      	blt.n	21058 <hci_driver_open+0x44>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   210a6:	4b48      	ldr	r3, [pc, #288]	; (211c8 <hci_driver_open+0x1b4>)
   210a8:	61bb      	str	r3, [r7, #24]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   210aa:	4622      	mov	r2, r4
   210ac:	2103      	movs	r1, #3
   210ae:	4628      	mov	r0, r5
   210b0:	f7e4 f9b6 	bl	5420 <sdc_cfg_set>
	if (required_memory < 0) {
   210b4:	2800      	cmp	r0, #0
   210b6:	dbcf      	blt.n	21058 <hci_driver_open+0x44>
	cfg.event_length.event_length_us =
   210b8:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   210bc:	4622      	mov	r2, r4
   210be:	2104      	movs	r1, #4
   210c0:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   210c2:	61bb      	str	r3, [r7, #24]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   210c4:	f7e4 f9ac 	bl	5420 <sdc_cfg_set>
	if (required_memory < 0) {
   210c8:	2800      	cmp	r0, #0
   210ca:	dbc5      	blt.n	21058 <hci_driver_open+0x44>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   210cc:	4622      	mov	r2, r4
   210ce:	2105      	movs	r1, #5
   210d0:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   210d2:	763e      	strb	r6, [r7, #24]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   210d4:	f7e4 f9a4 	bl	5420 <sdc_cfg_set>
	if (required_memory < 0) {
   210d8:	2800      	cmp	r0, #0
   210da:	dbbd      	blt.n	21058 <hci_driver_open+0x44>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   210dc:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   210de:	4622      	mov	r2, r4
   210e0:	2107      	movs	r1, #7
   210e2:	2000      	movs	r0, #0
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   210e4:	833b      	strh	r3, [r7, #24]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   210e6:	f7e4 f99b 	bl	5420 <sdc_cfg_set>
		if (required_memory < 0) {
   210ea:	2800      	cmp	r0, #0
   210ec:	dbb4      	blt.n	21058 <hci_driver_open+0x44>
	if (required_memory > sizeof(sdc_mempool)) {
   210ee:	f240 7314 	movw	r3, #1812	; 0x714
   210f2:	4298      	cmp	r0, r3
   210f4:	dd19      	ble.n	2112a <hci_driver_open+0x116>
		BT_ERR("Allocated memory too low: %u < %u",
   210f6:	466c      	mov	r4, sp
   210f8:	b088      	sub	sp, #32
   210fa:	466a      	mov	r2, sp
   210fc:	4933      	ldr	r1, [pc, #204]	; (211cc <hci_driver_open+0x1b8>)
   210fe:	61d0      	str	r0, [r2, #28]
   21100:	e9c2 1305 	strd	r1, r3, [r2, #20]
   21104:	2304      	movs	r3, #4
   21106:	f842 3f10 	str.w	r3, [r2, #16]!
   2110a:	482e      	ldr	r0, [pc, #184]	; (211c4 <hci_driver_open+0x1b0>)
   2110c:	2300      	movs	r3, #0
   2110e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   21112:	f7f4 fabb 	bl	1568c <z_impl_z_log_msg_static_create>
   21116:	46a5      	mov	sp, r4
		k_panic();
   21118:	4040      	eors	r0, r0
   2111a:	f380 8811 	msr	BASEPRI, r0
   2111e:	f04f 0004 	mov.w	r0, #4
   21122:	df02      	svc	2
		return -ENOMEM;
   21124:	f06f 000b 	mvn.w	r0, #11
   21128:	e796      	b.n	21058 <hci_driver_open+0x44>
   2112a:	4829      	ldr	r0, [pc, #164]	; (211d0 <hci_driver_open+0x1bc>)
   2112c:	f00c f889 	bl	2d242 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   21130:	4603      	mov	r3, r0
   21132:	b968      	cbnz	r0, 21150 <hci_driver_open+0x13c>
		BT_ERR("Entropy source device not ready");
   21134:	4a27      	ldr	r2, [pc, #156]	; (211d4 <hci_driver_open+0x1c0>)
   21136:	62fa      	str	r2, [r7, #44]	; 0x2c
   21138:	2202      	movs	r2, #2
   2113a:	62ba      	str	r2, [r7, #40]	; 0x28
   2113c:	4821      	ldr	r0, [pc, #132]	; (211c4 <hci_driver_open+0x1b0>)
   2113e:	f107 0228 	add.w	r2, r7, #40	; 0x28
   21142:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   21146:	f7f4 faa1 	bl	1568c <z_impl_z_log_msg_static_create>
		return -ENODEV;
   2114a:	f06f 0012 	mvn.w	r0, #18
   2114e:	e783      	b.n	21058 <hci_driver_open+0x44>
	sdc_rand_source_t rand_functions = {
   21150:	4b21      	ldr	r3, [pc, #132]	; (211d8 <hci_driver_open+0x1c4>)
   21152:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   21156:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   2115a:	4620      	mov	r0, r4
   2115c:	f7e4 fb00 	bl	5760 <sdc_rand_source_register>
	if (err) {
   21160:	b190      	cbz	r0, 21188 <hci_driver_open+0x174>
		BT_ERR("Failed to register rand source (%d)", err);
   21162:	466c      	mov	r4, sp
   21164:	b088      	sub	sp, #32
   21166:	466a      	mov	r2, sp
   21168:	4b1c      	ldr	r3, [pc, #112]	; (211dc <hci_driver_open+0x1c8>)
   2116a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   2116e:	2303      	movs	r3, #3
   21170:	f842 3f10 	str.w	r3, [r2, #16]!
   21174:	4813      	ldr	r0, [pc, #76]	; (211c4 <hci_driver_open+0x1b0>)
   21176:	2300      	movs	r3, #0
   21178:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2117c:	f7f4 fa86 	bl	1568c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   21180:	f06f 0015 	mvn.w	r0, #21
   21184:	46a5      	mov	sp, r4
   21186:	e767      	b.n	21058 <hci_driver_open+0x44>
	k_work_init(&receive_work, receive_work_handler);
   21188:	4915      	ldr	r1, [pc, #84]	; (211e0 <hci_driver_open+0x1cc>)
   2118a:	4816      	ldr	r0, [pc, #88]	; (211e4 <hci_driver_open+0x1d0>)
   2118c:	f00c fa81 	bl	2d692 <k_work_init>
	err = MULTITHREADING_LOCK_ACQUIRE();
   21190:	f04f 30ff 	mov.w	r0, #4294967295
   21194:	f04f 31ff 	mov.w	r1, #4294967295
   21198:	f7ff fe82 	bl	20ea0 <multithreading_lock_acquire>
	if (!err) {
   2119c:	4604      	mov	r4, r0
   2119e:	b930      	cbnz	r0, 211ae <hci_driver_open+0x19a>
		err = sdc_enable(hci_driver_receive_process, sdc_mempool);
   211a0:	4911      	ldr	r1, [pc, #68]	; (211e8 <hci_driver_open+0x1d4>)
   211a2:	4812      	ldr	r0, [pc, #72]	; (211ec <hci_driver_open+0x1d8>)
   211a4:	f7e4 f9a2 	bl	54ec <sdc_enable>
   211a8:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   211aa:	f7ff fe81 	bl	20eb0 <multithreading_lock_release>
	if (err < 0) {
   211ae:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   211b2:	e751      	b.n	21058 <hci_driver_open+0x44>
   211b4:	0003062b 	.word	0x0003062b
   211b8:	00031b6a 	.word	0x00031b6a
   211bc:	01000003 	.word	0x01000003
   211c0:	00a01ac0 	.word	0x00a01ac0
   211c4:	0002e66c 	.word	0x0002e66c
   211c8:	02031b1b 	.word	0x02031b1b
   211cc:	00031b91 	.word	0x00031b91
   211d0:	0002e294 	.word	0x0002e294
   211d4:	00031bb3 	.word	0x00031bb3
   211d8:	0002e9bc 	.word	0x0002e9bc
   211dc:	00031bd3 	.word	0x00031bd3
   211e0:	0002ceab 	.word	0x0002ceab
   211e4:	20005e78 	.word	0x20005e78
   211e8:	20006c7c 	.word	0x20006c7c
   211ec:	00021251 	.word	0x00021251

000211f0 <data_packet_process.part.0>:
static void data_packet_process(uint8_t *hci_buf)
   211f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_ERR("No data buffer available");
   211f2:	4b07      	ldr	r3, [pc, #28]	; (21210 <data_packet_process.part.0+0x20>)
   211f4:	9305      	str	r3, [sp, #20]
   211f6:	2302      	movs	r3, #2
   211f8:	9304      	str	r3, [sp, #16]
   211fa:	4806      	ldr	r0, [pc, #24]	; (21214 <data_packet_process.part.0+0x24>)
   211fc:	2300      	movs	r3, #0
   211fe:	aa04      	add	r2, sp, #16
   21200:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   21204:	f7f4 fa42 	bl	1568c <z_impl_z_log_msg_static_create>
}
   21208:	b007      	add	sp, #28
   2120a:	f85d fb04 	ldr.w	pc, [sp], #4
   2120e:	bf00      	nop
   21210:	00031bf7 	.word	0x00031bf7
   21214:	0002e66c 	.word	0x0002e66c

00021218 <data_packet_process.constprop.0>:
static void data_packet_process(uint8_t *hci_buf)
   21218:	b510      	push	{r4, lr}
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   2121a:	f04f 32ff 	mov.w	r2, #4294967295
   2121e:	f04f 33ff 	mov.w	r3, #4294967295
   21222:	2003      	movs	r0, #3
   21224:	f7f6 f9d0 	bl	175c8 <bt_buf_get_rx>
	if (!data_buf) {
   21228:	4604      	mov	r4, r0
   2122a:	b918      	cbnz	r0, 21234 <data_packet_process.constprop.0+0x1c>
}
   2122c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21230:	f7ff bfde 	b.w	211f0 <data_packet_process.part.0>
	len = sys_le16_to_cpu(hdr->len);
   21234:	4905      	ldr	r1, [pc, #20]	; (2124c <data_packet_process.constprop.0+0x34>)
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   21236:	884a      	ldrh	r2, [r1, #2]
   21238:	3008      	adds	r0, #8
   2123a:	3204      	adds	r2, #4
   2123c:	f00b fb58 	bl	2c8f0 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   21240:	4620      	mov	r0, r4
}
   21242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_recv(data_buf);
   21246:	f7f7 bbdb 	b.w	18a00 <bt_recv>
   2124a:	bf00      	nop
   2124c:	20006c33 	.word	0x20006c33

00021250 <hci_driver_receive_process>:
{
   21250:	b573      	push	{r0, r1, r4, r5, r6, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   21252:	f04f 30ff 	mov.w	r0, #4294967295
   21256:	f04f 31ff 	mov.w	r1, #4294967295
   2125a:	f7ff fe21 	bl	20ea0 <multithreading_lock_acquire>
	if (!errcode) {
   2125e:	b1c0      	cbz	r0, 21292 <hci_driver_receive_process+0x42>
		return false;
   21260:	2600      	movs	r6, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   21262:	f04f 30ff 	mov.w	r0, #4294967295
   21266:	f04f 31ff 	mov.w	r1, #4294967295
   2126a:	f7ff fe19 	bl	20ea0 <multithreading_lock_acquire>
	if (!errcode) {
   2126e:	b1e0      	cbz	r0, 212aa <hci_driver_receive_process+0x5a>
		return false;
   21270:	2500      	movs	r5, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   21272:	f04f 30ff 	mov.w	r0, #4294967295
   21276:	f04f 31ff 	mov.w	r1, #4294967295
   2127a:	f7ff fe11 	bl	20ea0 <multithreading_lock_acquire>
	if (!errcode) {
   2127e:	b300      	cbz	r0, 212c2 <hci_driver_receive_process+0x72>
		return false;
   21280:	2300      	movs	r3, #0
	if (received_evt || received_data || received_msg) {
   21282:	b90e      	cbnz	r6, 21288 <hci_driver_receive_process+0x38>
   21284:	b905      	cbnz	r5, 21288 <hci_driver_receive_process+0x38>
   21286:	b39b      	cbz	r3, 212f0 <hci_driver_receive_process+0xa0>
}
   21288:	b002      	add	sp, #8
   2128a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		receive_signal_raise();
   2128e:	f7ff be71 	b.w	20f74 <receive_signal_raise>
		errcode = hci_internal_evt_get(p_hci_buffer);
   21292:	4818      	ldr	r0, [pc, #96]	; (212f4 <hci_driver_receive_process+0xa4>)
   21294:	f000 fb02 	bl	2189c <hci_internal_evt_get>
   21298:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2129a:	f7ff fe09 	bl	20eb0 <multithreading_lock_release>
	if (errcode) {
   2129e:	2c00      	cmp	r4, #0
   212a0:	d1de      	bne.n	21260 <hci_driver_receive_process+0x10>
	event_packet_process(p_hci_buffer);
   212a2:	f7ff fe7b 	bl	20f9c <event_packet_process.constprop.0>
	return true;
   212a6:	2601      	movs	r6, #1
   212a8:	e7db      	b.n	21262 <hci_driver_receive_process+0x12>
		errcode = sdc_hci_data_get(p_hci_buffer);
   212aa:	4812      	ldr	r0, [pc, #72]	; (212f4 <hci_driver_receive_process+0xa4>)
   212ac:	f7ec ffd5 	bl	e25a <sdc_hci_data_get>
   212b0:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   212b2:	f7ff fdfd 	bl	20eb0 <multithreading_lock_release>
	if (errcode) {
   212b6:	2c00      	cmp	r4, #0
   212b8:	d1da      	bne.n	21270 <hci_driver_receive_process+0x20>
	data_packet_process(p_hci_buffer);
   212ba:	f7ff ffad 	bl	21218 <data_packet_process.constprop.0>
	return true;
   212be:	2501      	movs	r5, #1
   212c0:	e7d7      	b.n	21272 <hci_driver_receive_process+0x22>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   212c2:	480c      	ldr	r0, [pc, #48]	; (212f4 <hci_driver_receive_process+0xa4>)
   212c4:	f10d 0107 	add.w	r1, sp, #7
   212c8:	f000 fafa 	bl	218c0 <hci_internal_msg_get>
   212cc:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   212ce:	f7ff fdef 	bl	20eb0 <multithreading_lock_release>
	if (errcode) {
   212d2:	2c00      	cmp	r4, #0
   212d4:	d1d4      	bne.n	21280 <hci_driver_receive_process+0x30>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   212d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   212da:	2b04      	cmp	r3, #4
   212dc:	d103      	bne.n	212e6 <hci_driver_receive_process+0x96>
		event_packet_process(p_hci_buffer);
   212de:	f7ff fe5d 	bl	20f9c <event_packet_process.constprop.0>
	return true;
   212e2:	2301      	movs	r3, #1
   212e4:	e7cd      	b.n	21282 <hci_driver_receive_process+0x32>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   212e6:	2b02      	cmp	r3, #2
   212e8:	d1ca      	bne.n	21280 <hci_driver_receive_process+0x30>
		data_packet_process(p_hci_buffer);
   212ea:	f7ff ff95 	bl	21218 <data_packet_process.constprop.0>
   212ee:	e7f8      	b.n	212e2 <hci_driver_receive_process+0x92>
}
   212f0:	b002      	add	sp, #8
   212f2:	bd70      	pop	{r4, r5, r6, pc}
   212f4:	20006c33 	.word	0x20006c33

000212f8 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   212f8:	b538      	push	{r3, r4, r5, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   212fa:	4cd6      	ldr	r4, [pc, #856]	; (21654 <hci_internal_cmd_put+0x35c>)
   212fc:	7823      	ldrb	r3, [r4, #0]
   212fe:	2b00      	cmp	r3, #0
   21300:	f040 82c6 	bne.w	21890 <hci_internal_cmd_put+0x598>
	return ((uint16_t)src[1] << 8) | src[0];
   21304:	8805      	ldrh	r5, [r0, #0]
	switch (BT_OGF(opcode)) {
   21306:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   2130a:	b22b      	sxth	r3, r5
   2130c:	ea4f 2295 	mov.w	r2, r5, lsr #10
   21310:	d209      	bcs.n	21326 <hci_internal_cmd_put+0x2e>
   21312:	b15a      	cbz	r2, 2132c <hci_internal_cmd_put+0x34>
   21314:	3a01      	subs	r2, #1
   21316:	2a07      	cmp	r2, #7
   21318:	d808      	bhi.n	2132c <hci_internal_cmd_put+0x34>
   2131a:	e8df f002 	tbb	[pc, r2]
   2131e:	0709      	.short	0x0709
   21320:	07075925 	.word	0x07075925
   21324:	d107      	.short	0xd107
   21326:	2a3f      	cmp	r2, #63	; 0x3f
   21328:	f000 822b 	beq.w	21782 <hci_internal_cmd_put+0x48a>
	switch (opcode)	{
   2132c:	2001      	movs	r0, #1
   2132e:	e00e      	b.n	2134e <hci_internal_cmd_put+0x56>
	switch (opcode)	{
   21330:	f240 4206 	movw	r2, #1030	; 0x406
   21334:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   21336:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   2133a:	d006      	beq.n	2134a <hci_internal_cmd_put+0x52>
   2133c:	f240 421d 	movw	r2, #1053	; 0x41d
   21340:	4293      	cmp	r3, r2
   21342:	d1f3      	bne.n	2132c <hci_internal_cmd_put+0x34>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   21344:	f7ed f8ca 	bl	e4dc <sdc_hci_cmd_lc_read_remote_version_information>
   21348:	e001      	b.n	2134e <hci_internal_cmd_put+0x56>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   2134a:	f7ed f8c5 	bl	e4d8 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2134e:	230f      	movs	r3, #15
   21350:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   21352:	2304      	movs	r3, #4
   21354:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   21356:	2301      	movs	r3, #1
	evt_data->status = status_code;
   21358:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   2135a:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   2135c:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   21360:	2301      	movs	r3, #1
   21362:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   21364:	2000      	movs	r0, #0
}
   21366:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   21368:	f640 4263 	movw	r2, #3171	; 0xc63
   2136c:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2136e:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   21372:	d025      	beq.n	213c0 <hci_internal_cmd_put+0xc8>
   21374:	dc0f      	bgt.n	21396 <hci_internal_cmd_put+0x9e>
   21376:	f640 4203 	movw	r2, #3075	; 0xc03
   2137a:	4293      	cmp	r3, r2
   2137c:	d018      	beq.n	213b0 <hci_internal_cmd_put+0xb8>
   2137e:	f640 422d 	movw	r2, #3117	; 0xc2d
   21382:	4293      	cmp	r3, r2
   21384:	d017      	beq.n	213b6 <hci_internal_cmd_put+0xbe>
   21386:	f640 4201 	movw	r2, #3073	; 0xc01
   2138a:	4293      	cmp	r3, r2
   2138c:	d1ce      	bne.n	2132c <hci_internal_cmd_put+0x34>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   2138e:	f7ec ff95 	bl	e2bc <sdc_hci_cmd_cb_set_event_mask>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   21392:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   21394:	e091      	b.n	214ba <hci_internal_cmd_put+0x1c2>
	switch (opcode)	{
   21396:	f640 427b 	movw	r2, #3195	; 0xc7b
   2139a:	4293      	cmp	r3, r2
   2139c:	d013      	beq.n	213c6 <hci_internal_cmd_put+0xce>
   2139e:	f640 427c 	movw	r2, #3196	; 0xc7c
   213a2:	4293      	cmp	r3, r2
   213a4:	d1c2      	bne.n	2132c <hci_internal_cmd_put+0x34>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   213a6:	49ac      	ldr	r1, [pc, #688]	; (21658 <hci_internal_cmd_put+0x360>)
   213a8:	f7ec ff92 	bl	e2d0 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   213ac:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   213ae:	e084      	b.n	214ba <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_cb_reset();
   213b0:	f7e4 fac4 	bl	593c <sdc_hci_cmd_cb_reset>
   213b4:	e7ed      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   213b6:	49a8      	ldr	r1, [pc, #672]	; (21658 <hci_internal_cmd_put+0x360>)
   213b8:	f7ec ff7e 	bl	e2b8 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   213bc:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   213be:	e07c      	b.n	214ba <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   213c0:	f7ec ff81 	bl	e2c6 <sdc_hci_cmd_cb_set_event_mask_page_2>
   213c4:	e7e5      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   213c6:	49a4      	ldr	r1, [pc, #656]	; (21658 <hci_internal_cmd_put+0x360>)
   213c8:	f7ec ff74 	bl	e2b4 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   213cc:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   213ce:	e074      	b.n	214ba <hci_internal_cmd_put+0x1c2>
	switch (opcode)	{
   213d0:	f5a5 5380 	sub.w	r3, r5, #4096	; 0x1000
   213d4:	3b01      	subs	r3, #1
   213d6:	2b08      	cmp	r3, #8
   213d8:	d8a8      	bhi.n	2132c <hci_internal_cmd_put+0x34>
   213da:	a201      	add	r2, pc, #4	; (adr r2, 213e0 <hci_internal_cmd_put+0xe8>)
   213dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   213e0:	00021405 	.word	0x00021405
   213e4:	0002140f 	.word	0x0002140f
   213e8:	0002148b 	.word	0x0002148b
   213ec:	0002132d 	.word	0x0002132d
   213f0:	0002132d 	.word	0x0002132d
   213f4:	0002132d 	.word	0x0002132d
   213f8:	0002132d 	.word	0x0002132d
   213fc:	0002132d 	.word	0x0002132d
   21400:	000214b3 	.word	0x000214b3
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   21404:	4894      	ldr	r0, [pc, #592]	; (21658 <hci_internal_cmd_put+0x360>)
   21406:	f7ed f81c 	bl	e442 <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   2140a:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   2140c:	e055      	b.n	214ba <hci_internal_cmd_put+0x1c2>
	memset(cmds, 0, sizeof(*cmds));
   2140e:	4892      	ldr	r0, [pc, #584]	; (21658 <hci_internal_cmd_put+0x360>)
   21410:	222f      	movs	r2, #47	; 0x2f
   21412:	2100      	movs	r1, #0
   21414:	f00c fd01 	bl	2de1a <memset>
	cmds->hci_disconnect = 1;
   21418:	2320      	movs	r3, #32
   2141a:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   2141c:	2380      	movs	r3, #128	; 0x80
   2141e:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   21420:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   21424:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   21426:	2304      	movs	r3, #4
   21428:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   2142a:	2328      	movs	r3, #40	; 0x28
   2142c:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   2142e:	2302      	movs	r3, #2
   21430:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   21432:	2304      	movs	r3, #4
   21434:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   21436:	f06f 0308 	mvn.w	r3, #8
   2143a:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   2143e:	f06f 033c 	mvn.w	r3, #60	; 0x3c
   21442:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   21446:	f06f 030c 	mvn.w	r3, #12
   2144a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   2144e:	237e      	movs	r3, #126	; 0x7e
   21450:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   21454:	2330      	movs	r3, #48	; 0x30
   21456:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   2145a:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   2145e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   21462:	237f      	movs	r3, #127	; 0x7f
   21464:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   21468:	f06f 0301 	mvn.w	r3, #1
   2146c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   21470:	2301      	movs	r3, #1
   21472:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   21476:	2380      	movs	r3, #128	; 0x80
   21478:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   2147c:	2304      	movs	r3, #4
   2147e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->hci_le_generate_dhkey_v2 = 1;
   21482:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		return 0;
   21486:	2344      	movs	r3, #68	; 0x44
   21488:	e13d      	b.n	21706 <hci_internal_cmd_put+0x40e>
	memset(features, 0, sizeof(*features));
   2148a:	4b73      	ldr	r3, [pc, #460]	; (21658 <hci_internal_cmd_put+0x360>)
   2148c:	2000      	movs	r0, #0
   2148e:	f8c4 0007 	str.w	r0, [r4, #7]
   21492:	6058      	str	r0, [r3, #4]
	features->bdedr_not_supported = 1;
   21494:	7ae3      	ldrb	r3, [r4, #11]
   21496:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   2149a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   2149e:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   214a0:	230c      	movs	r3, #12
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   214a2:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   214a4:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   214a6:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   214a8:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   214aa:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   214ac:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   214ae:	71a0      	strb	r0, [r4, #6]
}
   214b0:	e756      	b.n	21360 <hci_internal_cmd_put+0x68>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   214b2:	4869      	ldr	r0, [pc, #420]	; (21658 <hci_internal_cmd_put+0x360>)
   214b4:	f7ec ffc3 	bl	e43e <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   214b8:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   214ba:	2801      	cmp	r0, #1
   214bc:	d1f1      	bne.n	214a2 <hci_internal_cmd_put+0x1aa>
   214be:	e746      	b.n	2134e <hci_internal_cmd_put+0x56>
	switch (opcode)	{
   214c0:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   214c4:	3b01      	subs	r3, #1
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   214c6:	3003      	adds	r0, #3
	switch (opcode)	{
   214c8:	2b5d      	cmp	r3, #93	; 0x5d
   214ca:	f63f af2f 	bhi.w	2132c <hci_internal_cmd_put+0x34>
   214ce:	a201      	add	r2, pc, #4	; (adr r2, 214d4 <hci_internal_cmd_put+0x1dc>)
   214d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   214d4:	0002164d 	.word	0x0002164d
   214d8:	0002165d 	.word	0x0002165d
   214dc:	00021665 	.word	0x00021665
   214e0:	0002132d 	.word	0x0002132d
   214e4:	00021689 	.word	0x00021689
   214e8:	0002168f 	.word	0x0002168f
   214ec:	00021695 	.word	0x00021695
   214f0:	0002169f 	.word	0x0002169f
   214f4:	000216a5 	.word	0x000216a5
   214f8:	000216ab 	.word	0x000216ab
   214fc:	0002132d 	.word	0x0002132d
   21500:	0002132d 	.word	0x0002132d
   21504:	0002132d 	.word	0x0002132d
   21508:	0002132d 	.word	0x0002132d
   2150c:	000216b1 	.word	0x000216b1
   21510:	000216b9 	.word	0x000216b9
   21514:	000216bf 	.word	0x000216bf
   21518:	000216c5 	.word	0x000216c5
   2151c:	0002132d 	.word	0x0002132d
   21520:	0002132d 	.word	0x0002132d
   21524:	000216cb 	.word	0x000216cb
   21528:	000216d5 	.word	0x000216d5
   2152c:	000216db 	.word	0x000216db
   21530:	000216e5 	.word	0x000216e5
   21534:	0002132d 	.word	0x0002132d
   21538:	000216ed 	.word	0x000216ed
   2153c:	000216f5 	.word	0x000216f5
   21540:	000216fd 	.word	0x000216fd
   21544:	0002132d 	.word	0x0002132d
   21548:	0002132d 	.word	0x0002132d
   2154c:	0002132d 	.word	0x0002132d
   21550:	0002132d 	.word	0x0002132d
   21554:	0002132d 	.word	0x0002132d
   21558:	0002170b 	.word	0x0002170b
   2155c:	00021713 	.word	0x00021713
   21560:	0002171b 	.word	0x0002171b
   21564:	00021721 	.word	0x00021721
   21568:	00021727 	.word	0x00021727
   2156c:	00021733 	.word	0x00021733
   21570:	00021739 	.word	0x00021739
   21574:	0002173f 	.word	0x0002173f
   21578:	00021745 	.word	0x00021745
   2157c:	0002132d 	.word	0x0002132d
   21580:	0002132d 	.word	0x0002132d
   21584:	0002174d 	.word	0x0002174d
   21588:	00021753 	.word	0x00021753
   2158c:	00021759 	.word	0x00021759
   21590:	00021761 	.word	0x00021761
   21594:	00021769 	.word	0x00021769
   21598:	0002176f 	.word	0x0002176f
   2159c:	0002132d 	.word	0x0002132d
   215a0:	0002132d 	.word	0x0002132d
   215a4:	0002132d 	.word	0x0002132d
   215a8:	0002132d 	.word	0x0002132d
   215ac:	0002132d 	.word	0x0002132d
   215b0:	0002132d 	.word	0x0002132d
   215b4:	0002132d 	.word	0x0002132d
   215b8:	0002132d 	.word	0x0002132d
   215bc:	0002132d 	.word	0x0002132d
   215c0:	0002132d 	.word	0x0002132d
   215c4:	0002132d 	.word	0x0002132d
   215c8:	0002132d 	.word	0x0002132d
   215cc:	0002132d 	.word	0x0002132d
   215d0:	0002132d 	.word	0x0002132d
   215d4:	0002132d 	.word	0x0002132d
   215d8:	0002132d 	.word	0x0002132d
   215dc:	0002132d 	.word	0x0002132d
   215e0:	0002132d 	.word	0x0002132d
   215e4:	0002132d 	.word	0x0002132d
   215e8:	0002132d 	.word	0x0002132d
   215ec:	0002132d 	.word	0x0002132d
   215f0:	0002132d 	.word	0x0002132d
   215f4:	0002132d 	.word	0x0002132d
   215f8:	0002132d 	.word	0x0002132d
   215fc:	00021775 	.word	0x00021775
   21600:	0002132d 	.word	0x0002132d
   21604:	0002132d 	.word	0x0002132d
   21608:	0002177d 	.word	0x0002177d
   2160c:	0002132d 	.word	0x0002132d
   21610:	0002132d 	.word	0x0002132d
   21614:	0002132d 	.word	0x0002132d
   21618:	0002132d 	.word	0x0002132d
   2161c:	0002132d 	.word	0x0002132d
   21620:	0002132d 	.word	0x0002132d
   21624:	0002132d 	.word	0x0002132d
   21628:	0002132d 	.word	0x0002132d
   2162c:	0002132d 	.word	0x0002132d
   21630:	0002132d 	.word	0x0002132d
   21634:	0002132d 	.word	0x0002132d
   21638:	0002132d 	.word	0x0002132d
   2163c:	0002132d 	.word	0x0002132d
   21640:	0002132d 	.word	0x0002132d
   21644:	0002132d 	.word	0x0002132d
   21648:	0002172d 	.word	0x0002172d
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   2164c:	f7ec ff33 	bl	e4b6 <sdc_hci_cmd_le_set_event_mask>
   21650:	e69f      	b.n	21392 <hci_internal_cmd_put+0x9a>
   21652:	bf00      	nop
   21654:	20007390 	.word	0x20007390
   21658:	20007397 	.word	0x20007397
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   2165c:	488e      	ldr	r0, [pc, #568]	; (21898 <hci_internal_cmd_put+0x5a0>)
   2165e:	f7ec ff08 	bl	e472 <sdc_hci_cmd_le_read_buffer_size>
   21662:	e6ab      	b.n	213bc <hci_internal_cmd_put+0xc4>
	memset(features, 0, sizeof(*features));
   21664:	4b8c      	ldr	r3, [pc, #560]	; (21898 <hci_internal_cmd_put+0x5a0>)
   21666:	2000      	movs	r0, #0
   21668:	f8c4 0007 	str.w	r0, [r4, #7]
   2166c:	7118      	strb	r0, [r3, #4]
	features->le_encryption = 1;
   2166e:	79e3      	ldrb	r3, [r4, #7]
   21670:	f023 037d 	bic.w	r3, r3, #125	; 0x7d
   21674:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
   21678:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   2167a:	7a23      	ldrb	r3, [r4, #8]
   2167c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   21680:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   21684:	7223      	strb	r3, [r4, #8]
   21686:	e70b      	b.n	214a0 <hci_internal_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   21688:	f7ec ff1e 	bl	e4c8 <sdc_hci_cmd_le_set_random_address>
   2168c:	e681      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   2168e:	f7ec ff0c 	bl	e4aa <sdc_hci_cmd_le_set_adv_params>
   21692:	e67e      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   21694:	4880      	ldr	r0, [pc, #512]	; (21898 <hci_internal_cmd_put+0x5a0>)
   21696:	f7ec feea 	bl	e46e <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   2169a:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   2169c:	e70d      	b.n	214ba <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   2169e:	f7ec ff00 	bl	e4a2 <sdc_hci_cmd_le_set_adv_data>
   216a2:	e676      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   216a4:	f7ec ff14 	bl	e4d0 <sdc_hci_cmd_le_set_scan_response_data>
   216a8:	e673      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   216aa:	f7ec fefc 	bl	e4a6 <sdc_hci_cmd_le_set_adv_enable>
   216ae:	e670      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   216b0:	4879      	ldr	r0, [pc, #484]	; (21898 <hci_internal_cmd_put+0x5a0>)
   216b2:	f7ec fee2 	bl	e47a <sdc_hci_cmd_le_read_filter_accept_list_size>
   216b6:	e7f0      	b.n	2169a <hci_internal_cmd_put+0x3a2>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   216b8:	f7ec fec9 	bl	e44e <sdc_hci_cmd_le_clear_filter_accept_list>
   216bc:	e669      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   216be:	f7ec fec2 	bl	e446 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   216c2:	e666      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   216c4:	f7ec fee7 	bl	e496 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   216c8:	e663      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   216ca:	4973      	ldr	r1, [pc, #460]	; (21898 <hci_internal_cmd_put+0x5a0>)
   216cc:	f7ec fed3 	bl	e476 <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   216d0:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   216d2:	e6f2      	b.n	214ba <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   216d4:	f7ec fed7 	bl	e486 <sdc_hci_cmd_le_read_remote_features>
   216d8:	e639      	b.n	2134e <hci_internal_cmd_put+0x56>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   216da:	496f      	ldr	r1, [pc, #444]	; (21898 <hci_internal_cmd_put+0x5a0>)
   216dc:	f7ec febb 	bl	e456 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   216e0:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   216e2:	e6ea      	b.n	214ba <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   216e4:	486c      	ldr	r0, [pc, #432]	; (21898 <hci_internal_cmd_put+0x5a0>)
   216e6:	f7ec fec0 	bl	e46a <sdc_hci_cmd_le_rand>
   216ea:	e68e      	b.n	2140a <hci_internal_cmd_put+0x112>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   216ec:	496a      	ldr	r1, [pc, #424]	; (21898 <hci_internal_cmd_put+0x5a0>)
   216ee:	f7ec feb8 	bl	e462 <sdc_hci_cmd_le_long_term_key_request_reply>
   216f2:	e65b      	b.n	213ac <hci_internal_cmd_put+0xb4>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   216f4:	4968      	ldr	r1, [pc, #416]	; (21898 <hci_internal_cmd_put+0x5a0>)
   216f6:	f7ec feb0 	bl	e45a <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   216fa:	e657      	b.n	213ac <hci_internal_cmd_put+0xb4>
	*buf = states1;
   216fc:	238f      	movs	r3, #143	; 0x8f
   216fe:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   21700:	23c0      	movs	r3, #192	; 0xc0
   21702:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   21704:	230c      	movs	r3, #12
		return 0;
   21706:	2000      	movs	r0, #0
   21708:	e6cb      	b.n	214a2 <hci_internal_cmd_put+0x1aa>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   2170a:	4963      	ldr	r1, [pc, #396]	; (21898 <hci_internal_cmd_put+0x5a0>)
   2170c:	f7ec fecf 	bl	e4ae <sdc_hci_cmd_le_set_data_length>
   21710:	e64c      	b.n	213ac <hci_internal_cmd_put+0xb4>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   21712:	4861      	ldr	r0, [pc, #388]	; (21898 <hci_internal_cmd_put+0x5a0>)
   21714:	f7ec febb 	bl	e48e <sdc_hci_cmd_le_read_suggested_default_data_length>
   21718:	e658      	b.n	213cc <hci_internal_cmd_put+0xd4>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   2171a:	f7ec fedb 	bl	e4d4 <sdc_hci_cmd_le_write_suggested_default_data_length>
   2171e:	e638      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return hci_cmd_le_read_local_p256_public_key();
   21720:	f000 fa20 	bl	21b64 <hci_cmd_le_read_local_p256_public_key>
   21724:	e613      	b.n	2134e <hci_internal_cmd_put+0x56>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   21726:	f00b fc01 	bl	2cf2c <hci_cmd_le_generate_dhkey>
   2172a:	e610      	b.n	2134e <hci_internal_cmd_put+0x56>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   2172c:	f00b fc01 	bl	2cf32 <hci_cmd_le_generate_dhkey_v2>
   21730:	e62f      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   21732:	f7ec fe8a 	bl	e44a <sdc_hci_cmd_le_add_device_to_resolving_list>
   21736:	e62c      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   21738:	f7ec feaf 	bl	e49a <sdc_hci_cmd_le_remove_device_from_resolving_list>
   2173c:	e629      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_clear_resolving_list();
   2173e:	f7ec fe88 	bl	e452 <sdc_hci_cmd_le_clear_resolving_list>
   21742:	e626      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   21744:	4854      	ldr	r0, [pc, #336]	; (21898 <hci_internal_cmd_put+0x5a0>)
   21746:	f7ec fea0 	bl	e48a <sdc_hci_cmd_le_read_resolving_list_size>
   2174a:	e7a6      	b.n	2169a <hci_internal_cmd_put+0x3a2>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   2174c:	f7ec fea7 	bl	e49e <sdc_hci_cmd_le_set_address_resolution_enable>
   21750:	e61f      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   21752:	f7ec febb 	bl	e4cc <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   21756:	e61c      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   21758:	484f      	ldr	r0, [pc, #316]	; (21898 <hci_internal_cmd_put+0x5a0>)
   2175a:	f7ec fe90 	bl	e47e <sdc_hci_cmd_le_read_max_data_length>
   2175e:	e654      	b.n	2140a <hci_internal_cmd_put+0x112>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   21760:	494d      	ldr	r1, [pc, #308]	; (21898 <hci_internal_cmd_put+0x5a0>)
   21762:	f7ec fe8e 	bl	e482 <sdc_hci_cmd_le_read_phy>
   21766:	e631      	b.n	213cc <hci_internal_cmd_put+0xd4>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   21768:	f7ec fea3 	bl	e4b2 <sdc_hci_cmd_le_set_default_phy>
   2176c:	e611      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   2176e:	f7ec fea7 	bl	e4c0 <sdc_hci_cmd_le_set_phy>
   21772:	e5ec      	b.n	2134e <hci_internal_cmd_put+0x56>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   21774:	4848      	ldr	r0, [pc, #288]	; (21898 <hci_internal_cmd_put+0x5a0>)
   21776:	f7ec fe8c 	bl	e492 <sdc_hci_cmd_le_read_transmit_power>
   2177a:	e617      	b.n	213ac <hci_internal_cmd_put+0xb4>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   2177c:	f7ec fea2 	bl	e4c4 <sdc_hci_cmd_le_set_privacy_mode>
   21780:	e607      	b.n	21392 <hci_internal_cmd_put+0x9a>
	switch (opcode)	{
   21782:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   21786:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   21788:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   2178c:	d820      	bhi.n	217d0 <hci_internal_cmd_put+0x4d8>
   2178e:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   21792:	f43f adcb 	beq.w	2132c <hci_internal_cmd_put+0x34>
   21796:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   2179a:	3b01      	subs	r3, #1
   2179c:	2b09      	cmp	r3, #9
   2179e:	f63f adc5 	bhi.w	2132c <hci_internal_cmd_put+0x34>
   217a2:	a201      	add	r2, pc, #4	; (adr r2, 217a8 <hci_internal_cmd_put+0x4b0>)
   217a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   217a8:	00021815 	.word	0x00021815
   217ac:	0002181f 	.word	0x0002181f
   217b0:	0002132d 	.word	0x0002132d
   217b4:	0002132d 	.word	0x0002132d
   217b8:	0002132d 	.word	0x0002132d
   217bc:	00021853 	.word	0x00021853
   217c0:	0002132d 	.word	0x0002132d
   217c4:	0002132d 	.word	0x0002132d
   217c8:	0002183f 	.word	0x0002183f
   217cc:	00021849 	.word	0x00021849
   217d0:	f505 7340 	add.w	r3, r5, #768	; 0x300
   217d4:	b29b      	uxth	r3, r3
   217d6:	2b09      	cmp	r3, #9
   217d8:	f63f ada8 	bhi.w	2132c <hci_internal_cmd_put+0x34>
   217dc:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   217e0:	2b09      	cmp	r3, #9
   217e2:	f63f ada3 	bhi.w	2132c <hci_internal_cmd_put+0x34>
   217e6:	a201      	add	r2, pc, #4	; (adr r2, 217ec <hci_internal_cmd_put+0x4f4>)
   217e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   217ec:	00021859 	.word	0x00021859
   217f0:	0002186d 	.word	0x0002186d
   217f4:	00021873 	.word	0x00021873
   217f8:	00021879 	.word	0x00021879
   217fc:	0002187f 	.word	0x0002187f
   21800:	00021885 	.word	0x00021885
   21804:	0002132d 	.word	0x0002132d
   21808:	0002132d 	.word	0x0002132d
   2180c:	0002132d 	.word	0x0002132d
   21810:	0002188b 	.word	0x0002188b
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   21814:	4820      	ldr	r0, [pc, #128]	; (21898 <hci_internal_cmd_put+0x5a0>)
   21816:	f7e4 f8a5 	bl	5964 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   2181a:	2310      	movs	r3, #16
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   2181c:	e64d      	b.n	214ba <hci_internal_cmd_put+0x1c2>
	memset(cmds, 0, sizeof(*cmds));
   2181e:	2300      	movs	r3, #0
   21820:	f8a4 3007 	strh.w	r3, [r4, #7]
	cmds->read_version_info = 1;
   21824:	79e3      	ldrb	r3, [r4, #7]
   21826:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   2182a:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   2182e:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   21830:	7a23      	ldrb	r3, [r4, #8]
   21832:	f023 0307 	bic.w	r3, r3, #7
   21836:	f043 0307 	orr.w	r3, r3, #7
   2183a:	7223      	strb	r3, [r4, #8]
}
   2183c:	e623      	b.n	21486 <hci_internal_cmd_put+0x18e>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   2183e:	4816      	ldr	r0, [pc, #88]	; (21898 <hci_internal_cmd_put+0x5a0>)
   21840:	f7ec fdac 	bl	e39c <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   21844:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   21846:	e638      	b.n	214ba <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   21848:	4813      	ldr	r0, [pc, #76]	; (21898 <hci_internal_cmd_put+0x5a0>)
   2184a:	f7ec fd5a 	bl	e302 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   2184e:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   21850:	e633      	b.n	214ba <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   21852:	f7ec fdf2 	bl	e43a <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   21856:	e59c      	b.n	21392 <hci_internal_cmd_put+0x9a>
	memset(cmds, 0, sizeof(*cmds));
   21858:	2300      	movs	r3, #0
   2185a:	f8a4 3007 	strh.w	r3, [r4, #7]
	cmds->read_supported_vs_commands = 1;
   2185e:	79e3      	ldrb	r3, [r4, #7]
   21860:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   21864:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   21868:	71e3      	strb	r3, [r4, #7]
}
   2186a:	e60c      	b.n	21486 <hci_internal_cmd_put+0x18e>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   2186c:	f7ec fd3e 	bl	e2ec <sdc_hci_cmd_vs_llpm_mode_set>
   21870:	e58f      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   21872:	f7ec fd37 	bl	e2e4 <sdc_hci_cmd_vs_conn_update>
   21876:	e58c      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   21878:	f7ec fd2c 	bl	e2d4 <sdc_hci_cmd_vs_conn_event_extend>
   2187c:	e589      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   2187e:	f7ec fd3b 	bl	e2f8 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   21882:	e586      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   21884:	f7ec fd30 	bl	e2e8 <sdc_hci_cmd_vs_event_length_set>
   21888:	e583      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   2188a:	f7ec fd31 	bl	e2f0 <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   2188e:	e580      	b.n	21392 <hci_internal_cmd_put+0x9a>
		return -NRF_EPERM;
   21890:	f04f 30ff 	mov.w	r0, #4294967295
   21894:	e567      	b.n	21366 <hci_internal_cmd_put+0x6e>
   21896:	bf00      	nop
   21898:	20007397 	.word	0x20007397

0002189c <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   2189c:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   2189e:	4c07      	ldr	r4, [pc, #28]	; (218bc <hci_internal_evt_get+0x20>)
   218a0:	7823      	ldrb	r3, [r4, #0]
   218a2:	b91b      	cbnz	r3, 218ac <hci_internal_evt_get+0x10>

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   218a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   218a8:	f7ec bcef 	b.w	e28a <sdc_hci_evt_get>
		memcpy(evt_out,
   218ac:	78a2      	ldrb	r2, [r4, #2]
   218ae:	1c61      	adds	r1, r4, #1
   218b0:	3202      	adds	r2, #2
   218b2:	f00c fa91 	bl	2ddd8 <memcpy>
		cmd_complete_or_status.occurred = false;
   218b6:	2000      	movs	r0, #0
   218b8:	7020      	strb	r0, [r4, #0]
}
   218ba:	bd10      	pop	{r4, pc}
   218bc:	20007390 	.word	0x20007390

000218c0 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   218c0:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   218c2:	4c09      	ldr	r4, [pc, #36]	; (218e8 <hci_internal_msg_get+0x28>)
   218c4:	7823      	ldrb	r3, [r4, #0]
{
   218c6:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   218c8:	b91b      	cbnz	r3, 218d2 <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   218ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   218ce:	f7ec bce9 	b.w	e2a4 <sdc_hci_get>
		memcpy(msg_out,
   218d2:	78a2      	ldrb	r2, [r4, #2]
   218d4:	1c61      	adds	r1, r4, #1
   218d6:	3202      	adds	r2, #2
   218d8:	f00c fa7e 	bl	2ddd8 <memcpy>
		cmd_complete_or_status.occurred = false;
   218dc:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   218de:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   218e0:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   218e2:	702b      	strb	r3, [r5, #0]
}
   218e4:	bd38      	pop	{r3, r4, r5, pc}
   218e6:	bf00      	nop
   218e8:	20007390 	.word	0x20007390

000218ec <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   218ec:	b570      	push	{r4, r5, r6, lr}
   218ee:	4605      	mov	r5, r0
   218f0:	460e      	mov	r6, r1
   218f2:	4c08      	ldr	r4, [pc, #32]	; (21914 <bt_rand+0x28>)
   218f4:	4620      	mov	r0, r4
   218f6:	f00b fca4 	bl	2d242 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   218fa:	b138      	cbz	r0, 2190c <bt_rand+0x20>
   218fc:	68a3      	ldr	r3, [r4, #8]
   218fe:	b2b2      	uxth	r2, r6
   21900:	4629      	mov	r1, r5
   21902:	4620      	mov	r0, r4
   21904:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   21906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2190a:	4718      	bx	r3
   2190c:	f06f 0012 	mvn.w	r0, #18
   21910:	bd70      	pop	{r4, r5, r6, pc}
   21912:	bf00      	nop
   21914:	0002e294 	.word	0x0002e294

00021918 <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   21918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   2191a:	4b24      	ldr	r3, [pc, #144]	; (219ac <ecdh_p256_common_secret+0x94>)
   2191c:	4924      	ldr	r1, [pc, #144]	; (219b0 <ecdh_p256_common_secret+0x98>)
   2191e:	f103 0220 	add.w	r2, r3, #32
   21922:	2800      	cmp	r0, #0
   21924:	bf08      	it	eq
   21926:	4619      	moveq	r1, r3
{
   21928:	af00      	add	r7, sp, #0
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   2192a:	4610      	mov	r0, r2
   2192c:	f002 fe6a 	bl	24604 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   21930:	4604      	mov	r4, r0
   21932:	b180      	cbz	r0, 21956 <ecdh_p256_common_secret+0x3e>
		BT_ERR("public key is not valid (err %d)", err);
   21934:	466d      	mov	r5, sp
   21936:	b088      	sub	sp, #32
   21938:	466a      	mov	r2, sp
   2193a:	4b1e      	ldr	r3, [pc, #120]	; (219b4 <ecdh_p256_common_secret+0x9c>)
   2193c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   21940:	2303      	movs	r3, #3
   21942:	f842 3f10 	str.w	r3, [r2, #16]!
   21946:	481c      	ldr	r0, [pc, #112]	; (219b8 <ecdh_p256_common_secret+0xa0>)
   21948:	2300      	movs	r3, #0
   2194a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2194e:	f7f3 fe9d 	bl	1568c <z_impl_z_log_msg_static_create>
		return BT_HCI_ERR_INVALID_PARAM;
   21952:	2412      	movs	r4, #18
   21954:	46ad      	mov	sp, r5
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   21956:	f04f 32ff 	mov.w	r2, #4294967295
   2195a:	f04f 33ff 	mov.w	r3, #4294967295
   2195e:	2001      	movs	r0, #1
   21960:	f7f5 fe32 	bl	175c8 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   21964:	f100 0608 	add.w	r6, r0, #8
   21968:	2102      	movs	r1, #2
   2196a:	4605      	mov	r5, r0
   2196c:	4630      	mov	r0, r6
   2196e:	f00a ffb9 	bl	2c8e4 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   21972:	233e      	movs	r3, #62	; 0x3e
   21974:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   21976:	2322      	movs	r3, #34	; 0x22
   21978:	7043      	strb	r3, [r0, #1]
   2197a:	2101      	movs	r1, #1
   2197c:	4630      	mov	r0, r6
   2197e:	f00a ffb1 	bl	2c8e4 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   21982:	2309      	movs	r3, #9
   21984:	7003      	strb	r3, [r0, #0]
   21986:	2121      	movs	r1, #33	; 0x21
   21988:	4630      	mov	r0, r6
   2198a:	f00a ffab 	bl	2c8e4 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   2198e:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   21992:	b134      	cbz	r4, 219a2 <ecdh_p256_common_secret+0x8a>
__ssp_bos_icheck3(memset, void *, int)
   21994:	2220      	movs	r2, #32
   21996:	21ff      	movs	r1, #255	; 0xff
   21998:	f00c fa3f 	bl	2de1a <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   2199c:	4628      	mov	r0, r5
   2199e:	46bd      	mov	sp, r7
   219a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   219a2:	4906      	ldr	r1, [pc, #24]	; (219bc <ecdh_p256_common_secret+0xa4>)
   219a4:	f00b fab8 	bl	2cf18 <sys_memcpy_swap.constprop.0>
   219a8:	e7f8      	b.n	2199c <ecdh_p256_common_secret+0x84>
   219aa:	bf00      	nop
   219ac:	200073d7 	.word	0x200073d7
   219b0:	00031c97 	.word	0x00031c97
   219b4:	00031c51 	.word	0x00031c51
   219b8:	0002e5ac 	.word	0x0002e5ac
   219bc:	200073f7 	.word	0x200073f7

000219c0 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   219c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   219c2:	4e3d      	ldr	r6, [pc, #244]	; (21ab8 <ecdh_cmd_process+0xf8>)
   219c4:	f3bf 8f5b 	dmb	ish
   219c8:	6833      	ldr	r3, [r6, #0]
   219ca:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   219ce:	2b02      	cmp	r3, #2
{
   219d0:	b087      	sub	sp, #28
	switch (atomic_get(&cmd)) {
   219d2:	d05a      	beq.n	21a8a <ecdh_cmd_process+0xca>
   219d4:	2b04      	cmp	r3, #4
   219d6:	d05d      	beq.n	21a94 <ecdh_cmd_process+0xd4>
   219d8:	2b01      	cmp	r3, #1
   219da:	d15d      	bne.n	21a98 <ecdh_cmd_process+0xd8>
		err = bt_rand(ecdh.private_key_be, 32);
   219dc:	4c37      	ldr	r4, [pc, #220]	; (21abc <ecdh_cmd_process+0xfc>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   219de:	4f38      	ldr	r7, [pc, #224]	; (21ac0 <ecdh_cmd_process+0x100>)
		err = bt_rand(ecdh.private_key_be, 32);
   219e0:	2120      	movs	r1, #32
   219e2:	4620      	mov	r0, r4
   219e4:	f7ff ff82 	bl	218ec <bt_rand>
		if (err) {
   219e8:	2800      	cmp	r0, #0
   219ea:	d143      	bne.n	21a74 <ecdh_cmd_process+0xb4>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   219ec:	2220      	movs	r2, #32
   219ee:	4639      	mov	r1, r7
   219f0:	4620      	mov	r0, r4
   219f2:	f00c f9e1 	bl	2ddb8 <memcmp>
   219f6:	2800      	cmp	r0, #0
   219f8:	d0f2      	beq.n	219e0 <ecdh_cmd_process+0x20>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   219fa:	4832      	ldr	r0, [pc, #200]	; (21ac4 <ecdh_cmd_process+0x104>)
   219fc:	4621      	mov	r1, r4
   219fe:	f002 fded 	bl	245dc <ocrypto_ecdh_p256_public_key>
	} while (err);
   21a02:	4605      	mov	r5, r0
   21a04:	2800      	cmp	r0, #0
   21a06:	d1eb      	bne.n	219e0 <ecdh_cmd_process+0x20>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   21a08:	f04f 32ff 	mov.w	r2, #4294967295
   21a0c:	f04f 33ff 	mov.w	r3, #4294967295
   21a10:	2001      	movs	r0, #1
   21a12:	f7f5 fdd9 	bl	175c8 <bt_buf_get_rx>
   21a16:	f100 0708 	add.w	r7, r0, #8
   21a1a:	2102      	movs	r1, #2
   21a1c:	4604      	mov	r4, r0
   21a1e:	4638      	mov	r0, r7
   21a20:	f00a ff60 	bl	2c8e4 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   21a24:	233e      	movs	r3, #62	; 0x3e
   21a26:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   21a28:	2342      	movs	r3, #66	; 0x42
   21a2a:	7043      	strb	r3, [r0, #1]
   21a2c:	2101      	movs	r1, #1
   21a2e:	4638      	mov	r0, r7
   21a30:	f00a ff58 	bl	2c8e4 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   21a34:	2308      	movs	r3, #8
   21a36:	7003      	strb	r3, [r0, #0]
   21a38:	2141      	movs	r1, #65	; 0x41
   21a3a:	4638      	mov	r0, r7
   21a3c:	f00a ff52 	bl	2c8e4 <net_buf_simple_add>
   21a40:	4607      	mov	r7, r0
	evt->status = status;
   21a42:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   21a46:	b1bd      	cbz	r5, 21a78 <ecdh_cmd_process+0xb8>
   21a48:	2240      	movs	r2, #64	; 0x40
   21a4a:	2100      	movs	r1, #0
   21a4c:	f00c f9e5 	bl	2de1a <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21a50:	f3bf 8f5b 	dmb	ish
   21a54:	2300      	movs	r3, #0
   21a56:	e856 2f00 	ldrex	r2, [r6]
   21a5a:	e846 3100 	strex	r1, r3, [r6]
   21a5e:	2900      	cmp	r1, #0
   21a60:	d1f9      	bne.n	21a56 <ecdh_cmd_process+0x96>
   21a62:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   21a66:	b324      	cbz	r4, 21ab2 <ecdh_cmd_process+0xf2>
		bt_recv(buf);
   21a68:	4620      	mov	r0, r4
	}
}
   21a6a:	b007      	add	sp, #28
   21a6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_recv(buf);
   21a70:	f7f6 bfc6 	b.w	18a00 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   21a74:	251f      	movs	r5, #31
   21a76:	e7c7      	b.n	21a08 <ecdh_cmd_process+0x48>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   21a78:	4912      	ldr	r1, [pc, #72]	; (21ac4 <ecdh_cmd_process+0x104>)
   21a7a:	f00b fa4d 	bl	2cf18 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   21a7e:	3120      	adds	r1, #32
   21a80:	f107 0021 	add.w	r0, r7, #33	; 0x21
   21a84:	f00b fa48 	bl	2cf18 <sys_memcpy_swap.constprop.0>
		break;
   21a88:	e7e2      	b.n	21a50 <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(false);
   21a8a:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   21a8c:	f7ff ff44 	bl	21918 <ecdh_p256_common_secret>
   21a90:	4604      	mov	r4, r0
		break;
   21a92:	e7dd      	b.n	21a50 <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(true);
   21a94:	2001      	movs	r0, #1
   21a96:	e7f9      	b.n	21a8c <ecdh_cmd_process+0xcc>
		BT_WARN("Unknown command");
   21a98:	4b0b      	ldr	r3, [pc, #44]	; (21ac8 <ecdh_cmd_process+0x108>)
   21a9a:	9305      	str	r3, [sp, #20]
   21a9c:	2302      	movs	r3, #2
   21a9e:	9304      	str	r3, [sp, #16]
   21aa0:	480a      	ldr	r0, [pc, #40]	; (21acc <ecdh_cmd_process+0x10c>)
   21aa2:	2300      	movs	r3, #0
   21aa4:	aa04      	add	r2, sp, #16
   21aa6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   21aaa:	f7f3 fdef 	bl	1568c <z_impl_z_log_msg_static_create>
		buf = NULL;
   21aae:	2400      	movs	r4, #0
		break;
   21ab0:	e7ce      	b.n	21a50 <ecdh_cmd_process+0x90>
}
   21ab2:	b007      	add	sp, #28
   21ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21ab6:	bf00      	nop
   21ab8:	20005e88 	.word	0x20005e88
   21abc:	200073d7 	.word	0x200073d7
   21ac0:	00031c97 	.word	0x00031c97
   21ac4:	200073f7 	.word	0x200073f7
   21ac8:	00031c72 	.word	0x00031c72
   21acc:	0002e5ac 	.word	0x0002e5ac

00021ad0 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   21ad0:	b510      	push	{r4, lr}
   21ad2:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   21ad4:	2210      	movs	r2, #16
   21ad6:	2100      	movs	r1, #0
   21ad8:	a801      	add	r0, sp, #4
   21ada:	f00c f99e 	bl	2de1a <memset>
   21ade:	4c0b      	ldr	r4, [pc, #44]	; (21b0c <ecdh_thread+0x3c>)
   21ae0:	9405      	str	r4, [sp, #20]
   21ae2:	2301      	movs	r3, #1
   21ae4:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   21ae8:	f04f 32ff 	mov.w	r2, #4294967295
   21aec:	f04f 33ff 	mov.w	r3, #4294967295
   21af0:	2101      	movs	r1, #1
   21af2:	a801      	add	r0, sp, #4
   21af4:	f002 fcc2 	bl	2447c <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   21af8:	4620      	mov	r0, r4
   21afa:	f00c f94d 	bl	2dd98 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   21afe:	9b04      	ldr	r3, [sp, #16]
   21b00:	f36f 3352 	bfc	r3, #13, #6
   21b04:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   21b06:	f7ff ff5b 	bl	219c0 <ecdh_cmd_process>
	while (true) {
   21b0a:	e7ed      	b.n	21ae8 <ecdh_thread+0x18>
   21b0c:	20005e8c 	.word	0x20005e8c

00021b10 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   21b10:	b510      	push	{r4, lr}
   21b12:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   21b14:	480e      	ldr	r0, [pc, #56]	; (21b50 <hci_ecdh_init+0x40>)
   21b16:	f00c f93a 	bl	2dd8e <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   21b1a:	4c0e      	ldr	r4, [pc, #56]	; (21b54 <hci_ecdh_init+0x44>)
   21b1c:	490e      	ldr	r1, [pc, #56]	; (21b58 <hci_ecdh_init+0x48>)
   21b1e:	2200      	movs	r2, #0
   21b20:	2300      	movs	r3, #0
   21b22:	e9cd 2306 	strd	r2, r3, [sp, #24]
   21b26:	2300      	movs	r3, #0
   21b28:	220a      	movs	r2, #10
   21b2a:	e9cd 2303 	strd	r2, r3, [sp, #12]
   21b2e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   21b32:	9300      	str	r3, [sp, #0]
   21b34:	f44f 7262 	mov.w	r2, #904	; 0x388
   21b38:	4b08      	ldr	r3, [pc, #32]	; (21b5c <hci_ecdh_init+0x4c>)
   21b3a:	4620      	mov	r0, r4
   21b3c:	f001 fb4e 	bl	231dc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   21b40:	4907      	ldr	r1, [pc, #28]	; (21b60 <hci_ecdh_init+0x50>)
   21b42:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   21b44:	b008      	add	sp, #32
   21b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21b4a:	f00b bc38 	b.w	2d3be <z_impl_k_thread_name_set>
   21b4e:	bf00      	nop
   21b50:	20005e8c 	.word	0x20005e8c
   21b54:	20002388 	.word	0x20002388
   21b58:	20008148 	.word	0x20008148
   21b5c:	00021ad1 	.word	0x00021ad1
   21b60:	00031c82 	.word	0x00031c82

00021b64 <hci_cmd_le_read_local_p256_public_key>:

uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   21b64:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   21b66:	4b0b      	ldr	r3, [pc, #44]	; (21b94 <hci_cmd_le_read_local_p256_public_key+0x30>)
   21b68:	f3bf 8f5b 	dmb	ish
   21b6c:	2201      	movs	r2, #1
   21b6e:	e853 1f00 	ldrex	r1, [r3]
   21b72:	2900      	cmp	r1, #0
   21b74:	d103      	bne.n	21b7e <hci_cmd_le_read_local_p256_public_key+0x1a>
   21b76:	e843 2000 	strex	r0, r2, [r3]
   21b7a:	2800      	cmp	r0, #0
   21b7c:	d1f7      	bne.n	21b6e <hci_cmd_le_read_local_p256_public_key+0xa>
   21b7e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   21b82:	d105      	bne.n	21b90 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   21b84:	4804      	ldr	r0, [pc, #16]	; (21b98 <hci_cmd_le_read_local_p256_public_key+0x34>)
   21b86:	2100      	movs	r1, #0
   21b88:	f002 fcd4 	bl	24534 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   21b8c:	2000      	movs	r0, #0
}
   21b8e:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   21b90:	200c      	movs	r0, #12
   21b92:	e7fc      	b.n	21b8e <hci_cmd_le_read_local_p256_public_key+0x2a>
   21b94:	20005e88 	.word	0x20005e88
   21b98:	20005e8c 	.word	0x20005e8c

00021b9c <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   21b9c:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   21b9e:	2900      	cmp	r1, #0
   21ba0:	4b11      	ldr	r3, [pc, #68]	; (21be8 <cmd_le_generate_dhkey+0x4c>)
   21ba2:	f3bf 8f5b 	dmb	ish
{
   21ba6:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   21ba8:	bf14      	ite	ne
   21baa:	2204      	movne	r2, #4
   21bac:	2202      	moveq	r2, #2
   21bae:	e853 1f00 	ldrex	r1, [r3]
   21bb2:	2900      	cmp	r1, #0
   21bb4:	d103      	bne.n	21bbe <cmd_le_generate_dhkey+0x22>
   21bb6:	e843 2000 	strex	r0, r2, [r3]
   21bba:	2800      	cmp	r0, #0
   21bbc:	d1f7      	bne.n	21bae <cmd_le_generate_dhkey+0x12>
   21bbe:	f3bf 8f5b 	dmb	ish
   21bc2:	d10e      	bne.n	21be2 <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   21bc4:	4621      	mov	r1, r4
   21bc6:	4809      	ldr	r0, [pc, #36]	; (21bec <cmd_le_generate_dhkey+0x50>)
   21bc8:	f00b f9a6 	bl	2cf18 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   21bcc:	4808      	ldr	r0, [pc, #32]	; (21bf0 <cmd_le_generate_dhkey+0x54>)
   21bce:	f104 0120 	add.w	r1, r4, #32
   21bd2:	f00b f9a1 	bl	2cf18 <sys_memcpy_swap.constprop.0>
   21bd6:	4807      	ldr	r0, [pc, #28]	; (21bf4 <cmd_le_generate_dhkey+0x58>)
   21bd8:	2100      	movs	r1, #0
   21bda:	f002 fcab 	bl	24534 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   21bde:	2000      	movs	r0, #0
}
   21be0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   21be2:	200c      	movs	r0, #12
   21be4:	e7fc      	b.n	21be0 <cmd_le_generate_dhkey+0x44>
   21be6:	bf00      	nop
   21be8:	20005e88 	.word	0x20005e88
   21bec:	200073f7 	.word	0x200073f7
   21bf0:	20007417 	.word	0x20007417
   21bf4:	20005e8c 	.word	0x20005e8c

00021bf8 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   21bf8:	4901      	ldr	r1, [pc, #4]	; (21c00 <mpsl_low_prio_irq_handler+0x8>)
   21bfa:	4802      	ldr	r0, [pc, #8]	; (21c04 <mpsl_low_prio_irq_handler+0xc>)
   21bfc:	f00b bd76 	b.w	2d6ec <k_work_submit_to_queue>
   21c00:	20005e9c 	.word	0x20005e9c
   21c04:	20002408 	.word	0x20002408

00021c08 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   21c08:	b513      	push	{r0, r1, r4, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   21c0a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   21c0e:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   21c12:	2300      	movs	r3, #0
   21c14:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   21c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   21c1c:	f8ad 3000 	strh.w	r3, [sp]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   21c20:	4a10      	ldr	r2, [pc, #64]	; (21c64 <mpsl_lib_init+0x5c>)
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   21c22:	2302      	movs	r3, #2
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   21c24:	2119      	movs	r1, #25
   21c26:	4668      	mov	r0, sp
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   21c28:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   21c2c:	f7e3 fa24 	bl	5078 <mpsl_init>
	if (err) {
   21c30:	4604      	mov	r4, r0
   21c32:	b9a0      	cbnz	r0, 21c5e <mpsl_lib_init+0x56>
		return err;
	}

#if MPSL_TIMESLOT_SESSION_COUNT > 0
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   21c34:	480c      	ldr	r0, [pc, #48]	; (21c68 <mpsl_lib_init+0x60>)
   21c36:	2101      	movs	r1, #1
   21c38:	f7eb fd98 	bl	d76c <mpsl_timeslot_session_count_set>
			MPSL_TIMESLOT_SESSION_COUNT);
	if (err) {
   21c3c:	4604      	mov	r4, r0
   21c3e:	b970      	cbnz	r0, 21c5e <mpsl_lib_init+0x56>
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   21c40:	4601      	mov	r1, r0
   21c42:	2201      	movs	r2, #1
   21c44:	2008      	movs	r0, #8
   21c46:	f7f4 fcaf 	bl	165a8 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   21c4a:	2201      	movs	r2, #1
   21c4c:	4621      	mov	r1, r4
   21c4e:	200b      	movs	r0, #11
   21c50:	f7f4 fcaa 	bl	165a8 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   21c54:	2201      	movs	r2, #1
   21c56:	4621      	mov	r1, r4
   21c58:	4610      	mov	r0, r2
   21c5a:	f7f4 fca5 	bl	165a8 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);

	return 0;
}
   21c5e:	4620      	mov	r0, r4
   21c60:	b002      	add	sp, #8
   21c62:	bd10      	pop	{r4, pc}
   21c64:	00021c6d 	.word	0x00021c6d
   21c68:	20005eac 	.word	0x20005eac

00021c6c <m_assert_handler>:
{
   21c6c:	b598      	push	{r3, r4, r7, lr}
   21c6e:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   21c70:	466c      	mov	r4, sp
   21c72:	b08a      	sub	sp, #40	; 0x28
   21c74:	466a      	mov	r2, sp
   21c76:	4b0c      	ldr	r3, [pc, #48]	; (21ca8 <m_assert_handler+0x3c>)
   21c78:	61d1      	str	r1, [r2, #28]
   21c7a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   21c7e:	2302      	movs	r3, #2
   21c80:	f882 3020 	strb.w	r3, [r2, #32]
   21c84:	4b09      	ldr	r3, [pc, #36]	; (21cac <m_assert_handler+0x40>)
   21c86:	f842 3f10 	str.w	r3, [r2, #16]!
   21c8a:	4809      	ldr	r0, [pc, #36]	; (21cb0 <m_assert_handler+0x44>)
   21c8c:	2300      	movs	r3, #0
   21c8e:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   21c92:	f7f3 fcfb 	bl	1568c <z_impl_z_log_msg_static_create>
   21c96:	46a5      	mov	sp, r4
	k_oops();
   21c98:	4040      	eors	r0, r0
   21c9a:	f380 8811 	msr	BASEPRI, r0
   21c9e:	f04f 0003 	mov.w	r0, #3
   21ca2:	df02      	svc	2
}
   21ca4:	46bd      	mov	sp, r7
   21ca6:	bd98      	pop	{r3, r4, r7, pc}
   21ca8:	00031cb7 	.word	0x00031cb7
   21cac:	01000004 	.word	0x01000004
   21cb0:	0002e63c 	.word	0x0002e63c

00021cb4 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   21cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   21cb6:	4d0d      	ldr	r5, [pc, #52]	; (21cec <mpsl_low_prio_init+0x38>)
   21cb8:	490d      	ldr	r1, [pc, #52]	; (21cf0 <mpsl_low_prio_init+0x3c>)
   21cba:	2400      	movs	r4, #0
   21cbc:	9400      	str	r4, [sp, #0]
   21cbe:	f06f 0309 	mvn.w	r3, #9
   21cc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   21cc6:	4628      	mov	r0, r5
   21cc8:	f001 fda8 	bl	2381c <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   21ccc:	4909      	ldr	r1, [pc, #36]	; (21cf4 <mpsl_low_prio_init+0x40>)
   21cce:	4628      	mov	r0, r5
   21cd0:	f00b fb75 	bl	2d3be <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   21cd4:	4908      	ldr	r1, [pc, #32]	; (21cf8 <mpsl_low_prio_init+0x44>)
   21cd6:	4809      	ldr	r0, [pc, #36]	; (21cfc <mpsl_low_prio_init+0x48>)
   21cd8:	f00b fcdb 	bl	2d692 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   21cdc:	4622      	mov	r2, r4
   21cde:	2104      	movs	r1, #4
   21ce0:	2019      	movs	r0, #25
   21ce2:	f7f4 fc61 	bl	165a8 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   21ce6:	4620      	mov	r0, r4
   21ce8:	b003      	add	sp, #12
   21cea:	bd30      	pop	{r4, r5, pc}
   21cec:	20002408 	.word	0x20002408
   21cf0:	200084d0 	.word	0x200084d0
   21cf4:	00031ccb 	.word	0x00031ccb
   21cf8:	0002cf61 	.word	0x0002cf61
   21cfc:	20005e9c 	.word	0x20005e9c

00021d00 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   21d00:	4b01      	ldr	r3, [pc, #4]	; (21d08 <mpsl_hfclk_callback+0x8>)
   21d02:	2000      	movs	r0, #0
   21d04:	681b      	ldr	r3, [r3, #0]
   21d06:	4718      	bx	r3
   21d08:	20005edc 	.word	0x20005edc

00021d0c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   21d0c:	b120      	cbz	r0, 21d18 <nrfx_clock_start+0xc>
   21d0e:	2801      	cmp	r0, #1
   21d10:	d106      	bne.n	21d20 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   21d12:	4804      	ldr	r0, [pc, #16]	; (21d24 <nrfx_clock_start+0x18>)
   21d14:	f7e3 b826 	b.w	4d64 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   21d18:	4b03      	ldr	r3, [pc, #12]	; (21d28 <nrfx_clock_start+0x1c>)
   21d1a:	2001      	movs	r0, #1
   21d1c:	681b      	ldr	r3, [r3, #0]
   21d1e:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   21d20:	4770      	bx	lr
   21d22:	bf00      	nop
   21d24:	00021d01 	.word	0x00021d01
   21d28:	20005edc 	.word	0x20005edc

00021d2c <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   21d2c:	4b01      	ldr	r3, [pc, #4]	; (21d34 <nrfx_clock_init+0x8>)
   21d2e:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   21d30:	4801      	ldr	r0, [pc, #4]	; (21d38 <nrfx_clock_init+0xc>)
   21d32:	4770      	bx	lr
   21d34:	20005edc 	.word	0x20005edc
   21d38:	0bad0000 	.word	0x0bad0000

00021d3c <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   21d3c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21d3e:	4d1d      	ldr	r5, [pc, #116]	; (21db4 <timeslot_callback+0x78>)
   21d40:	f3bf 8f5b 	dmb	ish
   21d44:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   21d46:	f3bf 8f5b 	dmb	ish
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);

	if (atomic_get(&_context.timeout_occured)) {
   21d4a:	bb84      	cbnz	r4, 21dae <timeslot_callback+0x72>
		return NULL;
	}

	switch (signal) {
   21d4c:	2906      	cmp	r1, #6
   21d4e:	d804      	bhi.n	21d5a <timeslot_callback+0x1e>
   21d50:	2904      	cmp	r1, #4
   21d52:	d822      	bhi.n	21d9a <timeslot_callback+0x5e>
   21d54:	b139      	cbz	r1, 21d66 <timeslot_callback+0x2a>
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
}
   21d56:	4620      	mov	r0, r4
   21d58:	bd38      	pop	{r3, r4, r5, pc}
	switch (signal) {
   21d5a:	2907      	cmp	r1, #7
   21d5c:	d1fb      	bne.n	21d56 <timeslot_callback+0x1a>
	z_impl_k_sem_give(sem);
   21d5e:	4628      	mov	r0, r5
   21d60:	f001 fbc8 	bl	234f4 <z_impl_k_sem_give>
}
   21d64:	e7f7      	b.n	21d56 <timeslot_callback+0x1a>
		rc = _context.op_desc->handler(_context.op_desc->context);
   21d66:	6a2b      	ldr	r3, [r5, #32]
   21d68:	e9d3 2000 	ldrd	r2, r0, [r3]
   21d6c:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   21d6e:	2801      	cmp	r0, #1
   21d70:	d005      	beq.n	21d7e <timeslot_callback+0x42>
			_context.return_param.callback_action =
   21d72:	462c      	mov	r4, r5
   21d74:	2302      	movs	r3, #2
   21d76:	f804 3f34 	strb.w	r3, [r4, #52]!
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   21d7a:	63e8      	str	r0, [r5, #60]	; 0x3c
			_context.return_param.callback_action =
   21d7c:	e7eb      	b.n	21d56 <timeslot_callback+0x1a>
			_context.timeslot_request.params.earliest.timeout_us =
   21d7e:	f247 5330 	movw	r3, #30000	; 0x7530
   21d82:	632b      	str	r3, [r5, #48]	; 0x30
			_context.return_param.callback_action =
   21d84:	2303      	movs	r3, #3
   21d86:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
			_context.return_param.params.request.p_next =
   21d8a:	f105 0324 	add.w	r3, r5, #36	; 0x24
			_context.timeslot_request.params.earliest.priority =
   21d8e:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
			_context.return_param.params.request.p_next =
   21d92:	63ab      	str	r3, [r5, #56]	; 0x38
   21d94:	f105 0434 	add.w	r4, r5, #52	; 0x34
   21d98:	e7dd      	b.n	21d56 <timeslot_callback+0x1a>
	_context.timeslot_request.params.earliest.timeout_us =
   21d9a:	4b07      	ldr	r3, [pc, #28]	; (21db8 <timeslot_callback+0x7c>)
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   21d9c:	7e28      	ldrb	r0, [r5, #24]
	_context.timeslot_request.params.earliest.priority =
   21d9e:	f885 4029 	strb.w	r4, [r5, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   21da2:	f105 0124 	add.w	r1, r5, #36	; 0x24
	_context.timeslot_request.params.earliest.timeout_us =
   21da6:	632b      	str	r3, [r5, #48]	; 0x30
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   21da8:	f7eb fc84 	bl	d6b4 <mpsl_timeslot_request>
}
   21dac:	e7d3      	b.n	21d56 <timeslot_callback+0x1a>
		return NULL;
   21dae:	2400      	movs	r4, #0
   21db0:	e7d1      	b.n	21d56 <timeslot_callback+0x1a>
   21db2:	bf00      	nop
   21db4:	20005ee0 	.word	0x20005ee0
   21db8:	0f423fff 	.word	0x0f423fff

00021dbc <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   21dbc:	4802      	ldr	r0, [pc, #8]	; (21dc8 <nrf_flash_sync_init+0xc>)
   21dbe:	2201      	movs	r2, #1
   21dc0:	2100      	movs	r1, #0
   21dc2:	f00b bbe6 	b.w	2d592 <z_impl_k_sem_init>
   21dc6:	bf00      	nop
   21dc8:	20005ee0 	.word	0x20005ee0

00021dcc <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   21dcc:	4b01      	ldr	r3, [pc, #4]	; (21dd4 <nrf_flash_sync_set_context+0x8>)
   21dce:	61d8      	str	r0, [r3, #28]
}
   21dd0:	4770      	bx	lr
   21dd2:	bf00      	nop
   21dd4:	20005ee0 	.word	0x20005ee0

00021dd8 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   21dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
	__ASSERT_NO_MSG(errcode == 0);
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   21ddc:	4c43      	ldr	r4, [pc, #268]	; (21eec <nrf_flash_sync_exe+0x114>)
{
   21dde:	b086      	sub	sp, #24
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   21de0:	f04f 31ff 	mov.w	r1, #4294967295
{
   21de4:	af00      	add	r7, sp, #0
   21de6:	4680      	mov	r8, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   21de8:	f04f 30ff 	mov.w	r0, #4294967295
   21dec:	f7ff f858 	bl	20ea0 <multithreading_lock_acquire>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   21df0:	f104 0118 	add.w	r1, r4, #24
   21df4:	483e      	ldr	r0, [pc, #248]	; (21ef0 <nrf_flash_sync_exe+0x118>)
   21df6:	f7df fdcf 	bl	1998 <mpsl_timeslot_session_open>
   21dfa:	4605      	mov	r5, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   21dfc:	f7ff f858 	bl	20eb0 <multithreading_lock_release>

	if (ret < 0) {
   21e00:	2d00      	cmp	r5, #0
   21e02:	da15      	bge.n	21e30 <nrf_flash_sync_exe+0x58>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   21e04:	466c      	mov	r4, sp
   21e06:	b088      	sub	sp, #32
   21e08:	466a      	mov	r2, sp
   21e0a:	4b3a      	ldr	r3, [pc, #232]	; (21ef4 <nrf_flash_sync_exe+0x11c>)
   21e0c:	e9c2 3505 	strd	r3, r5, [r2, #20]
   21e10:	2303      	movs	r3, #3
   21e12:	f842 3f10 	str.w	r3, [r2, #16]!
   21e16:	4838      	ldr	r0, [pc, #224]	; (21ef8 <nrf_flash_sync_exe+0x120>)
   21e18:	2300      	movs	r3, #0
   21e1a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21e1e:	f7f3 fc35 	bl	1568c <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   21e22:	f06f 000b 	mvn.w	r0, #11
   21e26:	46a5      	mov	sp, r4
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   21e28:	3718      	adds	r7, #24
   21e2a:	46bd      	mov	sp, r7
   21e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   21e30:	f240 1301 	movw	r3, #257	; 0x101
   21e34:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   21e36:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   21e38:	f8c4 8020 	str.w	r8, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   21e3c:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   21e3e:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;
   21e40:	f247 5330 	movw	r3, #30000	; 0x7530
   21e44:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   21e46:	2600      	movs	r6, #0
	_context.status = -ETIMEDOUT;
   21e48:	f06f 0373 	mvn.w	r3, #115	; 0x73
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   21e4c:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	_context.status = -ETIMEDOUT;
   21e50:	63e3      	str	r3, [r4, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21e52:	f104 0540 	add.w	r5, r4, #64	; 0x40
   21e56:	f3bf 8f5b 	dmb	ish
   21e5a:	e855 3f00 	ldrex	r3, [r5]
   21e5e:	e845 6200 	strex	r2, r6, [r5]
   21e62:	2a00      	cmp	r2, #0
   21e64:	d1f9      	bne.n	21e5a <nrf_flash_sync_exe+0x82>
   21e66:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   21e6a:	f04f 31ff 	mov.w	r1, #4294967295
   21e6e:	f04f 30ff 	mov.w	r0, #4294967295
   21e72:	f7ff f815 	bl	20ea0 <multithreading_lock_acquire>
	ret = mpsl_timeslot_request(_context.session_id, req);
   21e76:	f104 0124 	add.w	r1, r4, #36	; 0x24
   21e7a:	7e20      	ldrb	r0, [r4, #24]
   21e7c:	f7eb fc1a 	bl	d6b4 <mpsl_timeslot_request>
	MULTITHREADING_LOCK_RELEASE();
   21e80:	f7ff f816 	bl	20eb0 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   21e84:	4a1d      	ldr	r2, [pc, #116]	; (21efc <nrf_flash_sync_exe+0x124>)
   21e86:	2300      	movs	r3, #0
   21e88:	4620      	mov	r0, r4
   21e8a:	f001 fb59 	bl	23540 <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   21e8e:	42b0      	cmp	r0, r6
   21e90:	da16      	bge.n	21ec0 <nrf_flash_sync_exe+0xe8>
		LOG_ERR("timeout");
   21e92:	4b1b      	ldr	r3, [pc, #108]	; (21f00 <nrf_flash_sync_exe+0x128>)
   21e94:	617b      	str	r3, [r7, #20]
   21e96:	2302      	movs	r3, #2
   21e98:	613b      	str	r3, [r7, #16]
   21e9a:	4817      	ldr	r0, [pc, #92]	; (21ef8 <nrf_flash_sync_exe+0x120>)
   21e9c:	4633      	mov	r3, r6
   21e9e:	f107 0210 	add.w	r2, r7, #16
   21ea2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   21ea6:	f7f3 fbf1 	bl	1568c <z_impl_z_log_msg_static_create>
   21eaa:	f3bf 8f5b 	dmb	ish
   21eae:	2301      	movs	r3, #1
   21eb0:	e855 2f00 	ldrex	r2, [r5]
   21eb4:	e845 3100 	strex	r1, r3, [r5]
   21eb8:	2900      	cmp	r1, #0
   21eba:	d1f9      	bne.n	21eb0 <nrf_flash_sync_exe+0xd8>
   21ebc:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   21ec0:	f04f 31ff 	mov.w	r1, #4294967295
   21ec4:	f04f 30ff 	mov.w	r0, #4294967295
   21ec8:	f7fe ffea 	bl	20ea0 <multithreading_lock_acquire>
	mpsl_timeslot_session_close(_context.session_id);
   21ecc:	7e20      	ldrb	r0, [r4, #24]
   21ece:	f7eb fc2c 	bl	d72a <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   21ed2:	f7fe ffed 	bl	20eb0 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21ed6:	f3bf 8f5b 	dmb	ish
   21eda:	6c23      	ldr	r3, [r4, #64]	; 0x40
   21edc:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   21ee0:	b113      	cbz	r3, 21ee8 <nrf_flash_sync_exe+0x110>
	z_impl_k_sem_reset(sem);
   21ee2:	4802      	ldr	r0, [pc, #8]	; (21eec <nrf_flash_sync_exe+0x114>)
   21ee4:	f001 fb54 	bl	23590 <z_impl_k_sem_reset>
	return _context.status;
   21ee8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   21eea:	e79d      	b.n	21e28 <nrf_flash_sync_exe+0x50>
   21eec:	20005ee0 	.word	0x20005ee0
   21ef0:	00021d3d 	.word	0x00021d3d
   21ef4:	00031cdf 	.word	0x00031cdf
   21ef8:	0002e60c 	.word	0x0002e60c
   21efc:	000b7b44 	.word	0x000b7b44
   21f00:	00030b1e 	.word	0x00030b1e

00021f04 <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21f04:	4b07      	ldr	r3, [pc, #28]	; (21f24 <nrf_flash_sync_check_time_limit+0x20>)
   21f06:	2201      	movs	r2, #1
   21f08:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   21f0a:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   21f0e:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   21f12:	4418      	add	r0, r3
   21f14:	4b04      	ldr	r3, [pc, #16]	; (21f28 <nrf_flash_sync_check_time_limit+0x24>)
   21f16:	69db      	ldr	r3, [r3, #28]
}
   21f18:	4298      	cmp	r0, r3
   21f1a:	bf34      	ite	cc
   21f1c:	2000      	movcc	r0, #0
   21f1e:	2001      	movcs	r0, #1
   21f20:	4770      	bx	lr
   21f22:	bf00      	nop
   21f24:	40008000 	.word	0x40008000
   21f28:	20005ee0 	.word	0x20005ee0

00021f2c <temp_nrf5_mpsl_channel_get>:
	int32_t uval;
	uint32_t uval_abs;
	uint32_t val1_abs;
	uint32_t val2_abs;

	if (chan != SENSOR_CHAN_DIE_TEMP) {
   21f2c:	290c      	cmp	r1, #12
{
   21f2e:	b510      	push	{r4, lr}
	struct temp_nrf5_mpsl_data *data = dev->data;
   21f30:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
   21f32:	d113      	bne.n	21f5c <temp_nrf5_mpsl_channel_get+0x30>
		return -ENOTSUP;
	}

	uval = data->sample;
   21f34:	6818      	ldr	r0, [r3, #0]
	uval_abs = (uval < 0) ? (-uval) : uval;

	val1_abs = uval_abs / TEMP_NRF5_MPSL_INC_PER_DEGREE_C;
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
   21f36:	4c0b      	ldr	r4, [pc, #44]	; (21f64 <temp_nrf5_mpsl_channel_get+0x38>)
	uval_abs = (uval < 0) ? (-uval) : uval;
   21f38:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
   21f3c:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
	val1_abs = uval_abs / TEMP_NRF5_MPSL_INC_PER_DEGREE_C;
   21f40:	0899      	lsrs	r1, r3, #2
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
   21f42:	f003 0303 	and.w	r3, r3, #3
		   TEMP_NRF5_MPSL_MILLIDEGREE_C_PER_INC;

	if (uval < 0) {
   21f46:	2800      	cmp	r0, #0
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
   21f48:	fb04 f303 	mul.w	r3, r4, r3
		val->val1 = -(int32_t)val1_abs;
   21f4c:	bfbd      	ittte	lt
   21f4e:	4249      	neglt	r1, r1
		val->val2 = -(int32_t)val2_abs;
   21f50:	425b      	neglt	r3, r3
		val->val1 = -(int32_t)val1_abs;
   21f52:	6011      	strlt	r1, [r2, #0]
	} else {
		val->val1 = (int32_t)val1_abs;
   21f54:	6011      	strge	r1, [r2, #0]
		val->val2 = (int32_t)val2_abs;
   21f56:	6053      	str	r3, [r2, #4]
	}

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
   21f58:	2000      	movs	r0, #0
}
   21f5a:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   21f5c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   21f60:	e7fb      	b.n	21f5a <temp_nrf5_mpsl_channel_get+0x2e>
   21f62:	bf00      	nop
   21f64:	0003d090 	.word	0x0003d090

00021f68 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   21f68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   21f6c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   21f70:	2a08      	cmp	r2, #8
   21f72:	d106      	bne.n	21f82 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   21f74:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   21f78:	2b05      	cmp	r3, #5
   21f7a:	d802      	bhi.n	21f82 <nrf52_errata_103+0x1a>
   21f7c:	4a02      	ldr	r2, [pc, #8]	; (21f88 <nrf52_errata_103+0x20>)
   21f7e:	5cd0      	ldrb	r0, [r2, r3]
   21f80:	4770      	bx	lr
        return false;
   21f82:	2000      	movs	r0, #0
}
   21f84:	4770      	bx	lr
   21f86:	bf00      	nop
   21f88:	00031d38 	.word	0x00031d38

00021f8c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   21f8c:	4a02      	ldr	r2, [pc, #8]	; (21f98 <nvmc_wait+0xc>)
   21f8e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   21f92:	2b00      	cmp	r3, #0
   21f94:	d0fb      	beq.n	21f8e <nvmc_wait+0x2>
}
   21f96:	4770      	bx	lr
   21f98:	4001e000 	.word	0x4001e000

00021f9c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   21f9c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   21f9e:	f00b f82e 	bl	2cffe <nrf52_errata_136>
   21fa2:	b140      	cbz	r0, 21fb6 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   21fa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21fa8:	2200      	movs	r2, #0
   21faa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   21fae:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   21fb2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   21fb6:	f00b f822 	bl	2cffe <nrf52_errata_136>
   21fba:	2800      	cmp	r0, #0
   21fbc:	d046      	beq.n	2204c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   21fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   21fc2:	4b60      	ldr	r3, [pc, #384]	; (22144 <SystemInit+0x1a8>)
   21fc4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   21fc8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   21fcc:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   21fd0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   21fd4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   21fd8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   21fdc:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   21fe0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   21fe4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   21fe8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   21fec:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   21ff0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   21ff4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   21ff8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   21ffc:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   22000:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   22004:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   22008:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   2200c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   22010:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   22014:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   22018:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   2201c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   22020:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   22024:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   22028:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   2202c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   22030:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   22034:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   22038:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   2203c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   22040:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   22044:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   22048:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   2204c:	f7ff ff8c 	bl	21f68 <nrf52_errata_103>
   22050:	b118      	cbz	r0, 2205a <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   22052:	4b3d      	ldr	r3, [pc, #244]	; (22148 <SystemInit+0x1ac>)
   22054:	4a3d      	ldr	r2, [pc, #244]	; (2214c <SystemInit+0x1b0>)
   22056:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   2205a:	f7ff ff85 	bl	21f68 <nrf52_errata_103>
   2205e:	b118      	cbz	r0, 22068 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   22060:	4b3b      	ldr	r3, [pc, #236]	; (22150 <SystemInit+0x1b4>)
   22062:	22fb      	movs	r2, #251	; 0xfb
   22064:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   22068:	f7ff ff7e 	bl	21f68 <nrf52_errata_103>
   2206c:	b170      	cbz	r0, 2208c <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   2206e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   22072:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22076:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   2207a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   2207e:	f022 020f 	bic.w	r2, r2, #15
   22082:	f003 030f 	and.w	r3, r3, #15
   22086:	4313      	orrs	r3, r2
   22088:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   2208c:	f7ff ff6c 	bl	21f68 <nrf52_errata_103>
   22090:	b120      	cbz	r0, 2209c <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   22092:	4b30      	ldr	r3, [pc, #192]	; (22154 <SystemInit+0x1b8>)
   22094:	f44f 7200 	mov.w	r2, #512	; 0x200
   22098:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   2209c:	f00a ffaf 	bl	2cffe <nrf52_errata_136>
   220a0:	b148      	cbz	r0, 220b6 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   220a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   220a6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   220aa:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   220ac:	bf44      	itt	mi
   220ae:	f06f 0201 	mvnmi.w	r2, #1
   220b2:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   220b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   220ba:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   220be:	2a08      	cmp	r2, #8
   220c0:	d10e      	bne.n	220e0 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   220c2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   220c6:	2b05      	cmp	r3, #5
   220c8:	d802      	bhi.n	220d0 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   220ca:	4a23      	ldr	r2, [pc, #140]	; (22158 <SystemInit+0x1bc>)
   220cc:	5cd3      	ldrb	r3, [r2, r3]
   220ce:	b13b      	cbz	r3, 220e0 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   220d0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   220d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   220d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   220dc:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   220e0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   220e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   220e8:	2a00      	cmp	r2, #0
   220ea:	db03      	blt.n	220f4 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   220ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   220f0:	2b00      	cmp	r3, #0
   220f2:	da22      	bge.n	2213a <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   220f4:	4919      	ldr	r1, [pc, #100]	; (2215c <SystemInit+0x1c0>)
   220f6:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   220f8:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   220fc:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   22100:	2412      	movs	r4, #18
    nvmc_wait();
   22102:	f7ff ff43 	bl	21f8c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   22106:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   2210a:	f7ff ff3f 	bl	21f8c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   2210e:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   22112:	f7ff ff3b 	bl	21f8c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   22116:	2300      	movs	r3, #0
   22118:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   2211c:	f7ff ff36 	bl	21f8c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   22120:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   22124:	490e      	ldr	r1, [pc, #56]	; (22160 <SystemInit+0x1c4>)
   22126:	4b0f      	ldr	r3, [pc, #60]	; (22164 <SystemInit+0x1c8>)
   22128:	68ca      	ldr	r2, [r1, #12]
   2212a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2212e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   22130:	60cb      	str	r3, [r1, #12]
   22132:	f3bf 8f4f 	dsb	sy
    __NOP();
   22136:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   22138:	e7fd      	b.n	22136 <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   2213a:	4b0b      	ldr	r3, [pc, #44]	; (22168 <SystemInit+0x1cc>)
   2213c:	4a0b      	ldr	r2, [pc, #44]	; (2216c <SystemInit+0x1d0>)
   2213e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   22140:	bd10      	pop	{r4, pc}
   22142:	bf00      	nop
   22144:	4000c000 	.word	0x4000c000
   22148:	40005000 	.word	0x40005000
   2214c:	00038148 	.word	0x00038148
   22150:	4000f000 	.word	0x4000f000
   22154:	40029000 	.word	0x40029000
   22158:	00031d32 	.word	0x00031d32
   2215c:	4001e000 	.word	0x4001e000
   22160:	e000ed00 	.word	0xe000ed00
   22164:	05fa0004 	.word	0x05fa0004
   22168:	200007f0 	.word	0x200007f0
   2216c:	03d09000 	.word	0x03d09000

00022170 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   22170:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   22172:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   22174:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   22176:	fab2 f382 	clz	r3, r2
   2217a:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   2217e:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   22180:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   22182:	d014      	beq.n	221ae <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   22184:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   22188:	fa05 f303 	lsl.w	r3, r5, r3
   2218c:	ea22 0303 	bic.w	r3, r2, r3
   22190:	e850 6f00 	ldrex	r6, [r0]
   22194:	4296      	cmp	r6, r2
   22196:	d104      	bne.n	221a2 <nrfx_flag32_alloc+0x32>
   22198:	e840 3c00 	strex	ip, r3, [r0]
   2219c:	f1bc 0f00 	cmp.w	ip, #0
   221a0:	d1f6      	bne.n	22190 <nrfx_flag32_alloc+0x20>
   221a2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   221a6:	d1e5      	bne.n	22174 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   221a8:	4802      	ldr	r0, [pc, #8]	; (221b4 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   221aa:	700c      	strb	r4, [r1, #0]
}
   221ac:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   221ae:	4802      	ldr	r0, [pc, #8]	; (221b8 <nrfx_flag32_alloc+0x48>)
   221b0:	e7fc      	b.n	221ac <nrfx_flag32_alloc+0x3c>
   221b2:	bf00      	nop
   221b4:	0bad0000 	.word	0x0bad0000
   221b8:	0bad0002 	.word	0x0bad0002

000221bc <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   221bc:	6803      	ldr	r3, [r0, #0]
   221be:	40cb      	lsrs	r3, r1
   221c0:	07db      	lsls	r3, r3, #31
{
   221c2:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   221c4:	d415      	bmi.n	221f2 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   221c6:	2301      	movs	r3, #1
   221c8:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   221cc:	6803      	ldr	r3, [r0, #0]
   221ce:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   221d2:	ea41 0203 	orr.w	r2, r1, r3
   221d6:	e850 4f00 	ldrex	r4, [r0]
   221da:	429c      	cmp	r4, r3
   221dc:	d104      	bne.n	221e8 <nrfx_flag32_free+0x2c>
   221de:	e840 2c00 	strex	ip, r2, [r0]
   221e2:	f1bc 0f00 	cmp.w	ip, #0
   221e6:	d1f6      	bne.n	221d6 <nrfx_flag32_free+0x1a>
   221e8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   221ec:	d1ee      	bne.n	221cc <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   221ee:	4802      	ldr	r0, [pc, #8]	; (221f8 <nrfx_flag32_free+0x3c>)
}
   221f0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   221f2:	4802      	ldr	r0, [pc, #8]	; (221fc <nrfx_flag32_free+0x40>)
   221f4:	e7fc      	b.n	221f0 <nrfx_flag32_free+0x34>
   221f6:	bf00      	nop
   221f8:	0bad0000 	.word	0x0bad0000
   221fc:	0bad0004 	.word	0x0bad0004

00022200 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   22200:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   22202:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   22206:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   22208:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   2220a:	6002      	str	r2, [r0, #0]
}
   2220c:	4802      	ldr	r0, [pc, #8]	; (22218 <nrf_gpio_pin_port_decode+0x18>)
   2220e:	bf18      	it	ne
   22210:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   22214:	4770      	bx	lr
   22216:	bf00      	nop
   22218:	50000300 	.word	0x50000300

0002221c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2221c:	4b03      	ldr	r3, [pc, #12]	; (2222c <pin_in_use_by_te+0x10>)
   2221e:	3008      	adds	r0, #8
   22220:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   22224:	f3c0 1040 	ubfx	r0, r0, #5, #1
   22228:	4770      	bx	lr
   2222a:	bf00      	nop
   2222c:	200007f4 	.word	0x200007f4

00022230 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   22230:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   22232:	f100 0308 	add.w	r3, r0, #8
   22236:	4c0c      	ldr	r4, [pc, #48]	; (22268 <call_handler+0x38>)
   22238:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   2223c:	05da      	lsls	r2, r3, #23
{
   2223e:	4605      	mov	r5, r0
   22240:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   22242:	d507      	bpl.n	22254 <call_handler+0x24>
   22244:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   22248:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   2224c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   22250:	6852      	ldr	r2, [r2, #4]
   22252:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   22254:	68a3      	ldr	r3, [r4, #8]
   22256:	b12b      	cbz	r3, 22264 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   22258:	68e2      	ldr	r2, [r4, #12]
   2225a:	4631      	mov	r1, r6
   2225c:	4628      	mov	r0, r5
    }
}
   2225e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   22262:	4718      	bx	r3
}
   22264:	bd70      	pop	{r4, r5, r6, pc}
   22266:	bf00      	nop
   22268:	200007f4 	.word	0x200007f4

0002226c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2226c:	4a12      	ldr	r2, [pc, #72]	; (222b8 <release_handler+0x4c>)
   2226e:	3008      	adds	r0, #8
{
   22270:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   22272:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   22276:	05d9      	lsls	r1, r3, #23
   22278:	d51b      	bpl.n	222b2 <release_handler+0x46>
   2227a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   2227e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   22282:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   22286:	f102 0410 	add.w	r4, r2, #16
   2228a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   2228c:	f834 3b02 	ldrh.w	r3, [r4], #2
   22290:	f413 7f80 	tst.w	r3, #256	; 0x100
   22294:	d003      	beq.n	2229e <release_handler+0x32>
   22296:	f3c3 2343 	ubfx	r3, r3, #9, #4
   2229a:	4299      	cmp	r1, r3
   2229c:	d009      	beq.n	222b2 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2229e:	3001      	adds	r0, #1
   222a0:	2830      	cmp	r0, #48	; 0x30
   222a2:	d1f3      	bne.n	2228c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   222a4:	2300      	movs	r3, #0
   222a6:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   222aa:	4804      	ldr	r0, [pc, #16]	; (222bc <release_handler+0x50>)
}
   222ac:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   222ae:	f7ff bf85 	b.w	221bc <nrfx_flag32_free>
}
   222b2:	bc10      	pop	{r4}
   222b4:	4770      	bx	lr
   222b6:	bf00      	nop
   222b8:	200007f4 	.word	0x200007f4
   222bc:	20000868 	.word	0x20000868

000222c0 <pin_handler_trigger_uninit>:
{
   222c0:	b538      	push	{r3, r4, r5, lr}
   222c2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   222c4:	f7ff ffaa 	bl	2221c <pin_in_use_by_te>
   222c8:	4c09      	ldr	r4, [pc, #36]	; (222f0 <pin_handler_trigger_uninit+0x30>)
   222ca:	f102 0508 	add.w	r5, r2, #8
   222ce:	b140      	cbz	r0, 222e2 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   222d0:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   222d4:	4907      	ldr	r1, [pc, #28]	; (222f4 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   222d6:	0b5b      	lsrs	r3, r3, #13
   222d8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   222dc:	2000      	movs	r0, #0
   222de:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   222e2:	4610      	mov	r0, r2
   222e4:	f7ff ffc2 	bl	2226c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   222e8:	2300      	movs	r3, #0
   222ea:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   222ee:	bd38      	pop	{r3, r4, r5, pc}
   222f0:	200007f4 	.word	0x200007f4
   222f4:	40006000 	.word	0x40006000

000222f8 <nrfx_gpiote_input_configure>:
{
   222f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   222fc:	4604      	mov	r4, r0
   222fe:	4617      	mov	r7, r2
   22300:	461d      	mov	r5, r3
    if (p_input_config)
   22302:	b321      	cbz	r1, 2234e <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22304:	4e4e      	ldr	r6, [pc, #312]	; (22440 <nrfx_gpiote_input_configure+0x148>)
   22306:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2230a:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   2230e:	079b      	lsls	r3, r3, #30
   22310:	d506      	bpl.n	22320 <nrfx_gpiote_input_configure+0x28>
   22312:	f7ff ff83 	bl	2221c <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   22316:	b118      	cbz	r0, 22320 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   22318:	484a      	ldr	r0, [pc, #296]	; (22444 <nrfx_gpiote_input_configure+0x14c>)
}
   2231a:	b004      	add	sp, #16
   2231c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   22320:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   22322:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   22326:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   2232a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2232e:	f10d 020f 	add.w	r2, sp, #15
   22332:	460b      	mov	r3, r1
   22334:	4620      	mov	r0, r4
   22336:	f10d 010e 	add.w	r1, sp, #14
   2233a:	f00a fe6c 	bl	2d016 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   2233e:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   22342:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   22346:	f043 0301 	orr.w	r3, r3, #1
   2234a:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   2234e:	b197      	cbz	r7, 22376 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22350:	4b3b      	ldr	r3, [pc, #236]	; (22440 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   22352:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   22354:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22356:	f104 0008 	add.w	r0, r4, #8
   2235a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   2235e:	078f      	lsls	r7, r1, #30
   22360:	d50c      	bpl.n	2237c <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   22362:	2a00      	cmp	r2, #0
   22364:	d1d8      	bne.n	22318 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   22366:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   2236a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   2236e:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   22372:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   22376:	bbcd      	cbnz	r5, 223ec <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   22378:	4833      	ldr	r0, [pc, #204]	; (22448 <nrfx_gpiote_input_configure+0x150>)
   2237a:	e7ce      	b.n	2231a <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   2237c:	f021 0120 	bic.w	r1, r1, #32
   22380:	04c9      	lsls	r1, r1, #19
   22382:	0cc9      	lsrs	r1, r1, #19
   22384:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   22388:	2a00      	cmp	r2, #0
   2238a:	d0ec      	beq.n	22366 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   2238c:	2e03      	cmp	r6, #3
   2238e:	d8c3      	bhi.n	22318 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   22390:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   22392:	b92e      	cbnz	r6, 223a0 <nrfx_gpiote_input_configure+0xa8>
   22394:	4a2d      	ldr	r2, [pc, #180]	; (2244c <nrfx_gpiote_input_configure+0x154>)
   22396:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   2239a:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   2239e:	e7e2      	b.n	22366 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   223a0:	00ba      	lsls	r2, r7, #2
   223a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   223a6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   223aa:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   223ae:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   223b2:	f02c 0c03 	bic.w	ip, ip, #3
   223b6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   223ba:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   223be:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   223c2:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   223c6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   223ca:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   223ce:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   223d2:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   223d6:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   223da:	ea4c 0c0e 	orr.w	ip, ip, lr
   223de:	f041 0120 	orr.w	r1, r1, #32
   223e2:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   223e6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   223ea:	e7bc      	b.n	22366 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   223ec:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   223f0:	4620      	mov	r0, r4
   223f2:	f7ff ff3b 	bl	2226c <release_handler>
    if (!handler)
   223f6:	2e00      	cmp	r6, #0
   223f8:	d0be      	beq.n	22378 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   223fa:	4d11      	ldr	r5, [pc, #68]	; (22440 <nrfx_gpiote_input_configure+0x148>)
   223fc:	682b      	ldr	r3, [r5, #0]
   223fe:	429e      	cmp	r6, r3
   22400:	d104      	bne.n	2240c <nrfx_gpiote_input_configure+0x114>
   22402:	686b      	ldr	r3, [r5, #4]
   22404:	429f      	cmp	r7, r3
   22406:	d101      	bne.n	2240c <nrfx_gpiote_input_configure+0x114>
   22408:	2200      	movs	r2, #0
   2240a:	e00a      	b.n	22422 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   2240c:	4810      	ldr	r0, [pc, #64]	; (22450 <nrfx_gpiote_input_configure+0x158>)
   2240e:	f10d 010f 	add.w	r1, sp, #15
   22412:	f7ff fead 	bl	22170 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   22416:	4b0c      	ldr	r3, [pc, #48]	; (22448 <nrfx_gpiote_input_configure+0x150>)
   22418:	4298      	cmp	r0, r3
   2241a:	f47f af7e 	bne.w	2231a <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   2241e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   22422:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   22426:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   2242a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   2242c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   2242e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   22432:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   22436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2243a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   2243e:	e79b      	b.n	22378 <nrfx_gpiote_input_configure+0x80>
   22440:	200007f4 	.word	0x200007f4
   22444:	0bad0004 	.word	0x0bad0004
   22448:	0bad0000 	.word	0x0bad0000
   2244c:	40006000 	.word	0x40006000
   22450:	20000868 	.word	0x20000868

00022454 <nrfx_gpiote_output_configure>:
{
   22454:	b5f0      	push	{r4, r5, r6, r7, lr}
   22456:	4604      	mov	r4, r0
   22458:	b085      	sub	sp, #20
   2245a:	4615      	mov	r5, r2
    if (p_config)
   2245c:	b319      	cbz	r1, 224a6 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2245e:	4e33      	ldr	r6, [pc, #204]	; (2252c <nrfx_gpiote_output_configure+0xd8>)
   22460:	f100 0708 	add.w	r7, r0, #8
   22464:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   22468:	0793      	lsls	r3, r2, #30
   2246a:	d403      	bmi.n	22474 <nrfx_gpiote_output_configure+0x20>
   2246c:	f7ff fed6 	bl	2221c <pin_in_use_by_te>
   22470:	2800      	cmp	r0, #0
   22472:	d158      	bne.n	22526 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   22474:	f012 0f1c 	tst.w	r2, #28
   22478:	d002      	beq.n	22480 <nrfx_gpiote_output_configure+0x2c>
   2247a:	784b      	ldrb	r3, [r1, #1]
   2247c:	2b01      	cmp	r3, #1
   2247e:	d052      	beq.n	22526 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   22480:	2301      	movs	r3, #1
   22482:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   22486:	2300      	movs	r3, #0
   22488:	e9cd 1300 	strd	r1, r3, [sp]
   2248c:	1c4a      	adds	r2, r1, #1
   2248e:	1c8b      	adds	r3, r1, #2
   22490:	4620      	mov	r0, r4
   22492:	f10d 010f 	add.w	r1, sp, #15
   22496:	f00a fdbe 	bl	2d016 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   2249a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   2249e:	f043 0303 	orr.w	r3, r3, #3
   224a2:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   224a6:	b915      	cbnz	r5, 224ae <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   224a8:	4821      	ldr	r0, [pc, #132]	; (22530 <nrfx_gpiote_output_configure+0xdc>)
}
   224aa:	b005      	add	sp, #20
   224ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   224ae:	4e1f      	ldr	r6, [pc, #124]	; (2252c <nrfx_gpiote_output_configure+0xd8>)
   224b0:	f104 0708 	add.w	r7, r4, #8
   224b4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   224b8:	0783      	lsls	r3, r0, #30
   224ba:	d534      	bpl.n	22526 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   224bc:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   224c0:	4661      	mov	r1, ip
   224c2:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   224c4:	f020 0020 	bic.w	r0, r0, #32
   224c8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   224cc:	04c0      	lsls	r0, r0, #19
   224ce:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   224d2:	0cc0      	lsrs	r0, r0, #19
   224d4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   224d8:	2300      	movs	r3, #0
   224da:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   224de:	786a      	ldrb	r2, [r5, #1]
   224e0:	2a00      	cmp	r2, #0
   224e2:	d0e1      	beq.n	224a8 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   224e4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   224e8:	78ad      	ldrb	r5, [r5, #2]
   224ea:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   224ee:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   224f2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   224f6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   224fa:	0223      	lsls	r3, r4, #8
   224fc:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   22500:	0412      	lsls	r2, r2, #16
   22502:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22506:	ea43 030e 	orr.w	r3, r3, lr
   2250a:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   2250c:	052a      	lsls	r2, r5, #20
   2250e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   22512:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22516:	4313      	orrs	r3, r2
   22518:	f040 0020 	orr.w	r0, r0, #32
   2251c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   22520:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   22524:	e7c0      	b.n	224a8 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   22526:	4803      	ldr	r0, [pc, #12]	; (22534 <nrfx_gpiote_output_configure+0xe0>)
   22528:	e7bf      	b.n	224aa <nrfx_gpiote_output_configure+0x56>
   2252a:	bf00      	nop
   2252c:	200007f4 	.word	0x200007f4
   22530:	0bad0000 	.word	0x0bad0000
   22534:	0bad0004 	.word	0x0bad0004

00022538 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   22538:	4b01      	ldr	r3, [pc, #4]	; (22540 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   2253a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   2253e:	4770      	bx	lr
   22540:	200007f4 	.word	0x200007f4

00022544 <nrfx_gpiote_channel_get>:
{
   22544:	b508      	push	{r3, lr}
   22546:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   22548:	f7ff fe68 	bl	2221c <pin_in_use_by_te>
   2254c:	b138      	cbz	r0, 2255e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2254e:	4b05      	ldr	r3, [pc, #20]	; (22564 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   22550:	4805      	ldr	r0, [pc, #20]	; (22568 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   22552:	3208      	adds	r2, #8
   22554:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   22558:	0b5b      	lsrs	r3, r3, #13
   2255a:	700b      	strb	r3, [r1, #0]
}
   2255c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2255e:	4803      	ldr	r0, [pc, #12]	; (2256c <nrfx_gpiote_channel_get+0x28>)
   22560:	e7fc      	b.n	2255c <nrfx_gpiote_channel_get+0x18>
   22562:	bf00      	nop
   22564:	200007f4 	.word	0x200007f4
   22568:	0bad0000 	.word	0x0bad0000
   2256c:	0bad0004 	.word	0x0bad0004

00022570 <nrfx_gpiote_init>:
{
   22570:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   22572:	4c0f      	ldr	r4, [pc, #60]	; (225b0 <nrfx_gpiote_init+0x40>)
   22574:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   22578:	b9bd      	cbnz	r5, 225aa <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   2257a:	2260      	movs	r2, #96	; 0x60
   2257c:	4629      	mov	r1, r5
   2257e:	f104 0010 	add.w	r0, r4, #16
   22582:	f00b fc4a 	bl	2de1a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   22586:	2006      	movs	r0, #6
   22588:	f7f3 ffdc 	bl	16544 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2258c:	4b09      	ldr	r3, [pc, #36]	; (225b4 <nrfx_gpiote_init+0x44>)
    return err_code;
   2258e:	480a      	ldr	r0, [pc, #40]	; (225b8 <nrfx_gpiote_init+0x48>)
   22590:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   22594:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   22598:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   2259c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   225a0:	2301      	movs	r3, #1
   225a2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   225a6:	6763      	str	r3, [r4, #116]	; 0x74
}
   225a8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   225aa:	4804      	ldr	r0, [pc, #16]	; (225bc <nrfx_gpiote_init+0x4c>)
   225ac:	e7fc      	b.n	225a8 <nrfx_gpiote_init+0x38>
   225ae:	bf00      	nop
   225b0:	200007f4 	.word	0x200007f4
   225b4:	40006000 	.word	0x40006000
   225b8:	0bad0000 	.word	0x0bad0000
   225bc:	0bad0005 	.word	0x0bad0005

000225c0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   225c0:	4b03      	ldr	r3, [pc, #12]	; (225d0 <nrfx_gpiote_is_init+0x10>)
   225c2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   225c6:	3800      	subs	r0, #0
   225c8:	bf18      	it	ne
   225ca:	2001      	movne	r0, #1
   225cc:	4770      	bx	lr
   225ce:	bf00      	nop
   225d0:	200007f4 	.word	0x200007f4

000225d4 <nrfx_gpiote_channel_free>:
{
   225d4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   225d6:	4801      	ldr	r0, [pc, #4]	; (225dc <nrfx_gpiote_channel_free+0x8>)
   225d8:	f7ff bdf0 	b.w	221bc <nrfx_flag32_free>
   225dc:	20000864 	.word	0x20000864

000225e0 <nrfx_gpiote_channel_alloc>:
{
   225e0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   225e2:	4801      	ldr	r0, [pc, #4]	; (225e8 <nrfx_gpiote_channel_alloc+0x8>)
   225e4:	f7ff bdc4 	b.w	22170 <nrfx_flag32_alloc>
   225e8:	20000864 	.word	0x20000864

000225ec <nrfx_gpiote_trigger_enable>:
{
   225ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   225ee:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   225f0:	f7ff fe14 	bl	2221c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   225f4:	f104 0208 	add.w	r2, r4, #8
   225f8:	4b1e      	ldr	r3, [pc, #120]	; (22674 <nrfx_gpiote_trigger_enable+0x88>)
   225fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   225fe:	b1e8      	cbz	r0, 2263c <nrfx_gpiote_trigger_enable+0x50>
   22600:	f013 0502 	ands.w	r5, r3, #2
   22604:	d11a      	bne.n	2263c <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   22606:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   22608:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   2260a:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   2260e:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   22612:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   22616:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2261a:	6005      	str	r5, [r0, #0]
   2261c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   2261e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   22622:	f040 0001 	orr.w	r0, r0, #1
   22626:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   2262a:	b129      	cbz	r1, 22638 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   2262c:	2201      	movs	r2, #1
   2262e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   22632:	4a11      	ldr	r2, [pc, #68]	; (22678 <nrfx_gpiote_trigger_enable+0x8c>)
   22634:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   22638:	b003      	add	sp, #12
   2263a:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2263c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   22640:	2b04      	cmp	r3, #4
   22642:	d012      	beq.n	2266a <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   22644:	2b05      	cmp	r3, #5
   22646:	d012      	beq.n	2266e <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22648:	a801      	add	r0, sp, #4
   2264a:	9401      	str	r4, [sp, #4]
   2264c:	f7ff fdd8 	bl	22200 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   22650:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   22652:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   22656:	40d9      	lsrs	r1, r3
   22658:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2265c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   2265e:	4620      	mov	r0, r4
}
   22660:	b003      	add	sp, #12
   22662:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   22666:	f00a bd1d 	b.w	2d0a4 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   2266a:	2103      	movs	r1, #3
   2266c:	e7f7      	b.n	2265e <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   2266e:	2102      	movs	r1, #2
   22670:	e7f5      	b.n	2265e <nrfx_gpiote_trigger_enable+0x72>
   22672:	bf00      	nop
   22674:	200007f4 	.word	0x200007f4
   22678:	40006000 	.word	0x40006000

0002267c <nrfx_gpiote_trigger_disable>:
{
   2267c:	b508      	push	{r3, lr}
   2267e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   22680:	f7ff fdcc 	bl	2221c <pin_in_use_by_te>
   22684:	b1c0      	cbz	r0, 226b8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22686:	f102 0108 	add.w	r1, r2, #8
   2268a:	4b0e      	ldr	r3, [pc, #56]	; (226c4 <nrfx_gpiote_trigger_disable+0x48>)
   2268c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   22690:	0799      	lsls	r1, r3, #30
   22692:	d411      	bmi.n	226b8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   22694:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   22696:	2201      	movs	r2, #1
   22698:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   2269a:	009b      	lsls	r3, r3, #2
   2269c:	490a      	ldr	r1, [pc, #40]	; (226c8 <nrfx_gpiote_trigger_disable+0x4c>)
   2269e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   226a2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   226a6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   226aa:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   226ae:	f022 0203 	bic.w	r2, r2, #3
   226b2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   226b6:	bd08      	pop	{r3, pc}
   226b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   226bc:	2100      	movs	r1, #0
   226be:	4610      	mov	r0, r2
   226c0:	f00a bcf0 	b.w	2d0a4 <nrf_gpio_cfg_sense_set>
   226c4:	200007f4 	.word	0x200007f4
   226c8:	40006000 	.word	0x40006000

000226cc <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   226cc:	4b0e      	ldr	r3, [pc, #56]	; (22708 <nrfx_gpiote_pin_uninit+0x3c>)
   226ce:	f100 0208 	add.w	r2, r0, #8
{
   226d2:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   226d4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   226d8:	07db      	lsls	r3, r3, #31
{
   226da:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   226dc:	d511      	bpl.n	22702 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   226de:	f7ff ffcd 	bl	2267c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   226e2:	4620      	mov	r0, r4
   226e4:	f7ff fdec 	bl	222c0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   226e8:	a801      	add	r0, sp, #4
   226ea:	9401      	str	r4, [sp, #4]
   226ec:	f7ff fd88 	bl	22200 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   226f0:	9b01      	ldr	r3, [sp, #4]
   226f2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   226f6:	2202      	movs	r2, #2
   226f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   226fc:	4803      	ldr	r0, [pc, #12]	; (2270c <nrfx_gpiote_pin_uninit+0x40>)
}
   226fe:	b002      	add	sp, #8
   22700:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   22702:	4803      	ldr	r0, [pc, #12]	; (22710 <nrfx_gpiote_pin_uninit+0x44>)
   22704:	e7fb      	b.n	226fe <nrfx_gpiote_pin_uninit+0x32>
   22706:	bf00      	nop
   22708:	200007f4 	.word	0x200007f4
   2270c:	0bad0000 	.word	0x0bad0000
   22710:	0bad0004 	.word	0x0bad0004

00022714 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   22714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22718:	4b64      	ldr	r3, [pc, #400]	; (228ac <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   2271a:	4865      	ldr	r0, [pc, #404]	; (228b0 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2271c:	4965      	ldr	r1, [pc, #404]	; (228b4 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   2271e:	2600      	movs	r6, #0
{
   22720:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   22722:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22724:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22726:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   22728:	b135      	cbz	r5, 22738 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   2272a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   2272e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22730:	bf1e      	ittt	ne
   22732:	601c      	strne	r4, [r3, #0]
   22734:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   22736:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   22738:	3304      	adds	r3, #4
   2273a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   2273c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   22740:	d1f1      	bne.n	22726 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22742:	f8df 816c 	ldr.w	r8, [pc, #364]	; 228b0 <nrfx_gpiote_irq_handler+0x19c>
   22746:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   2274a:	2b00      	cmp	r3, #0
   2274c:	f000 8091 	beq.w	22872 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   22750:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   22754:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   22758:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   2275a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   2275e:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   22762:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   22764:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   22768:	2700      	movs	r7, #0
            while (latch[i])
   2276a:	f10d 0910 	add.w	r9, sp, #16
   2276e:	017b      	lsls	r3, r7, #5
   22770:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   22772:	f04f 0a01 	mov.w	sl, #1
   22776:	e049      	b.n	2280c <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   22778:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2277a:	4a4f      	ldr	r2, [pc, #316]	; (228b8 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   2277c:	fa94 f4a4 	rbit	r4, r4
   22780:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   22784:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   22786:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   2278a:	08e0      	lsrs	r0, r4, #3
   2278c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   22790:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   22792:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   22796:	fa0a fc02 	lsl.w	ip, sl, r2
   2279a:	f819 2000 	ldrb.w	r2, [r9, r0]
   2279e:	ea22 020c 	bic.w	r2, r2, ip
   227a2:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   227a6:	a803      	add	r0, sp, #12
   227a8:	f3c3 0582 	ubfx	r5, r3, #2, #3
   227ac:	0899      	lsrs	r1, r3, #2
   227ae:	f7ff fd27 	bl	22200 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   227b2:	9a03      	ldr	r2, [sp, #12]
   227b4:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   227b8:	074b      	lsls	r3, r1, #29
   227ba:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   227be:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   227c0:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   227c4:	d529      	bpl.n	2281a <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   227c6:	4620      	mov	r0, r4
   227c8:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   227ca:	b2d5      	uxtb	r5, r2
   227cc:	f7ff fd30 	bl	22230 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   227d0:	a803      	add	r0, sp, #12
   227d2:	9403      	str	r4, [sp, #12]
   227d4:	f7ff fd14 	bl	22200 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   227d8:	9b03      	ldr	r3, [sp, #12]
   227da:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   227de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   227e2:	f3c3 4301 	ubfx	r3, r3, #16, #2
   227e6:	429d      	cmp	r5, r3
   227e8:	d107      	bne.n	227fa <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   227ea:	2100      	movs	r1, #0
   227ec:	4620      	mov	r0, r4
   227ee:	f00a fc59 	bl	2d0a4 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   227f2:	4629      	mov	r1, r5
   227f4:	4620      	mov	r0, r4
   227f6:	f00a fc55 	bl	2d0a4 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   227fa:	a803      	add	r0, sp, #12
   227fc:	9403      	str	r4, [sp, #12]
   227fe:	f7ff fcff 	bl	22200 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   22802:	9b03      	ldr	r3, [sp, #12]
   22804:	fa0a f303 	lsl.w	r3, sl, r3
   22808:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   2280c:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   22810:	2c00      	cmp	r4, #0
   22812:	d1b1      	bne.n	22778 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   22814:	b9cf      	cbnz	r7, 2284a <nrfx_gpiote_irq_handler+0x136>
   22816:	2701      	movs	r7, #1
   22818:	e7a9      	b.n	2276e <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2281a:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   2281c:	bf0c      	ite	eq
   2281e:	2103      	moveq	r1, #3
   22820:	2102      	movne	r1, #2
   22822:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   22824:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   22826:	f00a fc3d 	bl	2d0a4 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   2282a:	2d03      	cmp	r5, #3
   2282c:	d004      	beq.n	22838 <nrfx_gpiote_irq_handler+0x124>
   2282e:	9a01      	ldr	r2, [sp, #4]
   22830:	2a02      	cmp	r2, #2
   22832:	d106      	bne.n	22842 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   22834:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   22836:	d1e0      	bne.n	227fa <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   22838:	4659      	mov	r1, fp
   2283a:	4620      	mov	r0, r4
   2283c:	f7ff fcf8 	bl	22230 <call_handler>
   22840:	e7db      	b.n	227fa <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   22842:	2a03      	cmp	r2, #3
   22844:	d1d9      	bne.n	227fa <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   22846:	2d02      	cmp	r5, #2
   22848:	e7f5      	b.n	22836 <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2284a:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   2284e:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   22852:	491a      	ldr	r1, [pc, #104]	; (228bc <nrfx_gpiote_irq_handler+0x1a8>)
   22854:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   22858:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   2285c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   2285e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   22862:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   22866:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   22868:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   2286c:	4313      	orrs	r3, r2
   2286e:	f47f af7b 	bne.w	22768 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   22872:	2401      	movs	r4, #1
    while (mask)
   22874:	b916      	cbnz	r6, 2287c <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   22876:	b007      	add	sp, #28
   22878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   2287c:	fa96 f3a6 	rbit	r3, r6
   22880:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   22884:	fa04 f203 	lsl.w	r2, r4, r3
   22888:	009b      	lsls	r3, r3, #2
   2288a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2288e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   22892:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   22896:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   2289a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   2289e:	f3c0 2005 	ubfx	r0, r0, #8, #6
   228a2:	f3c1 4101 	ubfx	r1, r1, #16, #2
   228a6:	f7ff fcc3 	bl	22230 <call_handler>
   228aa:	e7e3      	b.n	22874 <nrfx_gpiote_irq_handler+0x160>
   228ac:	40006100 	.word	0x40006100
   228b0:	40006000 	.word	0x40006000
   228b4:	40006120 	.word	0x40006120
   228b8:	200007f4 	.word	0x200007f4
   228bc:	50000300 	.word	0x50000300

000228c0 <nvmc_word_write>:
   228c0:	4a04      	ldr	r2, [pc, #16]	; (228d4 <nvmc_word_write+0x14>)
   228c2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   228c6:	07db      	lsls	r3, r3, #31
   228c8:	d5fb      	bpl.n	228c2 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   228ca:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   228cc:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   228d0:	4770      	bx	lr
   228d2:	bf00      	nop
   228d4:	4001e000 	.word	0x4001e000

000228d8 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   228d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   228dc:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   228de:	fbb0 f3f2 	udiv	r3, r0, r2
   228e2:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   228e6:	b973      	cbnz	r3, 22906 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   228e8:	4b08      	ldr	r3, [pc, #32]	; (2290c <nrfx_nvmc_page_erase+0x34>)
   228ea:	2202      	movs	r2, #2
   228ec:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   228f0:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   228f4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   228f8:	07d2      	lsls	r2, r2, #31
   228fa:	d5fb      	bpl.n	228f4 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   228fc:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   228fe:	4804      	ldr	r0, [pc, #16]	; (22910 <nrfx_nvmc_page_erase+0x38>)
   22900:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   22904:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   22906:	4803      	ldr	r0, [pc, #12]	; (22914 <nrfx_nvmc_page_erase+0x3c>)
}
   22908:	4770      	bx	lr
   2290a:	bf00      	nop
   2290c:	4001e000 	.word	0x4001e000
   22910:	0bad0000 	.word	0x0bad0000
   22914:	0bad000a 	.word	0x0bad000a

00022918 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   22918:	b510      	push	{r4, lr}
   2291a:	4c05      	ldr	r4, [pc, #20]	; (22930 <nrfx_nvmc_word_write+0x18>)
   2291c:	2301      	movs	r3, #1
   2291e:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   22922:	f7ff ffcd 	bl	228c0 <nvmc_word_write>
   22926:	2300      	movs	r3, #0
   22928:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   2292c:	bd10      	pop	{r4, pc}
   2292e:	bf00      	nop
   22930:	4001e000 	.word	0x4001e000

00022934 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   22934:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   22936:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   2293a:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   2293c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   2293e:	6002      	str	r2, [r0, #0]
}
   22940:	4802      	ldr	r0, [pc, #8]	; (2294c <nrf_gpio_pin_port_decode+0x18>)
   22942:	bf18      	it	ne
   22944:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   22948:	4770      	bx	lr
   2294a:	bf00      	nop
   2294c:	50000300 	.word	0x50000300

00022950 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   22950:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   22954:	7907      	ldrb	r7, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   22956:	4c51      	ldr	r4, [pc, #324]	; (22a9c <nrfx_spi_init+0x14c>)
   22958:	f04f 0c28 	mov.w	ip, #40	; 0x28
   2295c:	fb0c fc07 	mul.w	ip, ip, r7
{
   22960:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   22962:	eb04 000c 	add.w	r0, r4, ip
   22966:	7f05      	ldrb	r5, [r0, #28]
   22968:	2d00      	cmp	r5, #0
   2296a:	f040 8095 	bne.w	22a98 <nrfx_spi_init+0x148>
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   2296e:	6835      	ldr	r5, [r6, #0]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   22970:	6043      	str	r3, [r0, #4]
    p_cb->handler = handler;
   22972:	f844 200c 	str.w	r2, [r4, ip]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   22976:	7bcb      	ldrb	r3, [r1, #15]
   22978:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
   2297c:	78ca      	ldrb	r2, [r1, #3]
   2297e:	7782      	strb	r2, [r0, #30]
    p_cb->orc = p_config->orc;
   22980:	794a      	ldrb	r2, [r1, #5]
   22982:	77c2      	strb	r2, [r0, #31]
    if (!p_config->skip_gpio_cfg)
   22984:	2b00      	cmp	r3, #0
   22986:	d140      	bne.n	22a0a <nrfx_spi_init+0xba>
    if (value == 0)
   22988:	7b0b      	ldrb	r3, [r1, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
   2298a:	7808      	ldrb	r0, [r1, #0]
   2298c:	2b01      	cmp	r3, #1
   2298e:	d87a      	bhi.n	22a86 <nrfx_spi_init+0x136>
        nrf_gpio_pin_clear(pin_number);
   22990:	f00a fbc0 	bl	2d114 <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   22994:	780b      	ldrb	r3, [r1, #0]
   22996:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22998:	a801      	add	r0, sp, #4
   2299a:	f7ff ffcb 	bl	22934 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2299e:	9b01      	ldr	r3, [sp, #4]
   229a0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   229a4:	2201      	movs	r2, #1
   229a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   229aa:	7848      	ldrb	r0, [r1, #1]
   229ac:	28ff      	cmp	r0, #255	; 0xff
   229ae:	d00c      	beq.n	229ca <nrfx_spi_init+0x7a>
        nrf_gpio_pin_clear(pin_number);
   229b0:	f00a fbb0 	bl	2d114 <nrf_gpio_pin_clear>
            nrf_gpio_cfg_output(p_config->mosi_pin);
   229b4:	784b      	ldrb	r3, [r1, #1]
   229b6:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   229b8:	a801      	add	r0, sp, #4
   229ba:	f7ff ffbb 	bl	22934 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   229be:	9b01      	ldr	r3, [sp, #4]
   229c0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   229c4:	2203      	movs	r2, #3
   229c6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   229ca:	788b      	ldrb	r3, [r1, #2]
   229cc:	2bff      	cmp	r3, #255	; 0xff
   229ce:	d00c      	beq.n	229ea <nrfx_spi_init+0x9a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   229d0:	a801      	add	r0, sp, #4
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
   229d2:	f891 800e 	ldrb.w	r8, [r1, #14]
   229d6:	9301      	str	r3, [sp, #4]
   229d8:	f7ff ffac 	bl	22934 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   229dc:	9b01      	ldr	r3, [sp, #4]
   229de:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   229e2:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   229e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   229ea:	78c8      	ldrb	r0, [r1, #3]
   229ec:	28ff      	cmp	r0, #255	; 0xff
   229ee:	d00c      	beq.n	22a0a <nrfx_spi_init+0xba>
        nrf_gpio_pin_set(pin_number);
   229f0:	f00a fb83 	bl	2d0fa <nrf_gpio_pin_set>
            nrf_gpio_cfg_output(p_config->ss_pin);
   229f4:	78cb      	ldrb	r3, [r1, #3]
   229f6:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   229f8:	a801      	add	r0, sp, #4
   229fa:	f7ff ff9b 	bl	22934 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   229fe:	9b01      	ldr	r3, [sp, #4]
   22a00:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   22a04:	2203      	movs	r2, #3
   22a06:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   22a0a:	7c0b      	ldrb	r3, [r1, #16]
   22a0c:	b993      	cbnz	r3, 22a34 <nrfx_spi_init+0xe4>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   22a0e:	784b      	ldrb	r3, [r1, #1]
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   22a10:	7808      	ldrb	r0, [r1, #0]
                            : NRF_SPI_PIN_NOT_CONNECTED;
   22a12:	2bff      	cmp	r3, #255	; 0xff
   22a14:	bf18      	it	ne
   22a16:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   22a18:	788b      	ldrb	r3, [r1, #2]
                                        uint32_t       sck_pin,
                                        uint32_t       mosi_pin,
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
   22a1a:	f8c5 0508 	str.w	r0, [r5, #1288]	; 0x508
                            : NRF_SPI_PIN_NOT_CONNECTED;
   22a1e:	bf08      	it	eq
   22a20:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPI_PIN_NOT_CONNECTED;
   22a24:	2bff      	cmp	r3, #255	; 0xff
   22a26:	bf08      	it	eq
   22a28:	f04f 33ff 	moveq.w	r3, #4294967295
#else
    p_reg->PSELSCK  = sck_pin;
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
   22a2c:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
#else
    p_reg->PSELMOSI = mosi_pin;
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
   22a30:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   22a34:	688b      	ldr	r3, [r1, #8]
   22a36:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   22a3a:	7b4b      	ldrb	r3, [r1, #13]

    configure_pins(p_spi, p_config);

    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   22a3c:	7b0a      	ldrb	r2, [r1, #12]
   22a3e:	3b00      	subs	r3, #0
   22a40:	bf18      	it	ne
   22a42:	2301      	movne	r3, #1
    switch (spi_mode)
   22a44:	2a02      	cmp	r2, #2
   22a46:	d021      	beq.n	22a8c <nrfx_spi_init+0x13c>
   22a48:	2a03      	cmp	r2, #3
   22a4a:	d022      	beq.n	22a92 <nrfx_spi_init+0x142>
   22a4c:	2a01      	cmp	r2, #1
   22a4e:	d101      	bne.n	22a54 <nrfx_spi_init+0x104>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   22a50:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   22a54:	f8c5 3554 	str.w	r3, [r5, #1364]	; 0x554
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   22a58:	2301      	movs	r3, #1
   22a5a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   22a5e:	2328      	movs	r3, #40	; 0x28
   22a60:	437b      	muls	r3, r7
   22a62:	58e3      	ldr	r3, [r4, r3]
   22a64:	b123      	cbz	r3, 22a70 <nrfx_spi_init+0x120>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   22a66:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   22a68:	f340 3007 	sbfx	r0, r0, #12, #8
   22a6c:	f7f3 fd6a 	bl	16544 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   22a70:	2328      	movs	r3, #40	; 0x28
   22a72:	fb03 4407 	mla	r4, r3, r7, r4
   22a76:	2300      	movs	r3, #0
   22a78:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   22a7a:	4809      	ldr	r0, [pc, #36]	; (22aa0 <nrfx_spi_init+0x150>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   22a7c:	2301      	movs	r3, #1
   22a7e:	7723      	strb	r3, [r4, #28]
}
   22a80:	b002      	add	sp, #8
   22a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_set(pin_number);
   22a86:	f00a fb38 	bl	2d0fa <nrf_gpio_pin_set>
   22a8a:	e783      	b.n	22994 <nrfx_spi_init+0x44>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   22a8c:	f043 0304 	orr.w	r3, r3, #4
        break;
   22a90:	e7e0      	b.n	22a54 <nrfx_spi_init+0x104>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   22a92:	f043 0306 	orr.w	r3, r3, #6
        break;
   22a96:	e7dd      	b.n	22a54 <nrfx_spi_init+0x104>
        return err_code;
   22a98:	4802      	ldr	r0, [pc, #8]	; (22aa4 <nrfx_spi_init+0x154>)
   22a9a:	e7f1      	b.n	22a80 <nrfx_spi_init+0x130>
   22a9c:	20005f28 	.word	0x20005f28
   22aa0:	0bad0000 	.word	0x0bad0000
   22aa4:	0bad0005 	.word	0x0bad0005

00022aa8 <nrfx_spi_uninit>:

void nrfx_spi_uninit(nrfx_spi_t const * p_instance)
{
   22aa8:	b570      	push	{r4, r5, r6, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   22aaa:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPI_Type * p_spi = p_instance->p_reg;

    if (p_cb->handler)
   22aac:	4c19      	ldr	r4, [pc, #100]	; (22b14 <nrfx_spi_uninit+0x6c>)
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   22aae:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
   22ab0:	2328      	movs	r3, #40	; 0x28
   22ab2:	4373      	muls	r3, r6
   22ab4:	58e3      	ldr	r3, [r4, r3]
   22ab6:	b133      	cbz	r3, 22ac6 <nrfx_spi_uninit+0x1e>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   22ab8:	f345 3007 	sbfx	r0, r5, #12, #8
   22abc:	f7f3 fd52 	bl	16564 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   22ac0:	2304      	movs	r3, #4
   22ac2:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
   22ac6:	2300      	movs	r3, #0
   22ac8:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        nrf_spi_int_disable(p_spi, NRF_SPI_ALL_INTS_MASK);
    }

    nrf_spi_disable(p_spi);

    if (!p_cb->skip_gpio_cfg)
   22acc:	2328      	movs	r3, #40	; 0x28
   22ace:	fb03 4306 	mla	r3, r3, r6, r4
   22ad2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   22ad6:	b9bb      	cbnz	r3, 22b08 <nrfx_spi_uninit+0x60>
    return p_reg->PSEL.SCK;
   22ad8:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    {
        nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));
   22adc:	f00a faff 	bl	2d0de <nrf_gpio_cfg_default>
    return p_reg->PSEL.MISO;
   22ae0:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510

        uint32_t miso_pin = nrf_spi_miso_pin_get(p_spi);
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
   22ae4:	1c42      	adds	r2, r0, #1
   22ae6:	d001      	beq.n	22aec <nrfx_spi_uninit+0x44>
        {
            nrf_gpio_cfg_default(miso_pin);
   22ae8:	f00a faf9 	bl	2d0de <nrf_gpio_cfg_default>
    return p_reg->PSEL.MOSI;
   22aec:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
        }

        uint32_t mosi_pin = nrf_spi_mosi_pin_get(p_spi);
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
   22af0:	1c43      	adds	r3, r0, #1
   22af2:	d001      	beq.n	22af8 <nrfx_spi_uninit+0x50>
        {
            nrf_gpio_cfg_default(mosi_pin);
   22af4:	f00a faf3 	bl	2d0de <nrf_gpio_cfg_default>
        }

        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   22af8:	2328      	movs	r3, #40	; 0x28
   22afa:	fb03 4306 	mla	r3, r3, r6, r4
   22afe:	7f98      	ldrb	r0, [r3, #30]
   22b00:	28ff      	cmp	r0, #255	; 0xff
   22b02:	d001      	beq.n	22b08 <nrfx_spi_uninit+0x60>
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
   22b04:	f00a faeb 	bl	2d0de <nrf_gpio_cfg_default>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   22b08:	2328      	movs	r3, #40	; 0x28
   22b0a:	fb03 4406 	mla	r4, r3, r6, r4
   22b0e:	2300      	movs	r3, #0
   22b10:	7723      	strb	r3, [r4, #28]
}
   22b12:	bd70      	pop	{r4, r5, r6, pc}
   22b14:	20005f28 	.word	0x20005f28

00022b18 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   22b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   22b1c:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   22b1e:	4c39      	ldr	r4, [pc, #228]	; (22c04 <nrfx_spi_xfer+0xec>)
   22b20:	2328      	movs	r3, #40	; 0x28
   22b22:	437b      	muls	r3, r7
{
   22b24:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
   22b26:	18e2      	adds	r2, r4, r3
{
   22b28:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
   22b2a:	7f51      	ldrb	r1, [r2, #29]
{
   22b2c:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
   22b2e:	2900      	cmp	r1, #0
   22b30:	d165      	bne.n	22bfe <nrfx_spi_xfer+0xe6>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   22b32:	58e3      	ldr	r3, [r4, r3]
   22b34:	b10b      	cbz	r3, 22b3a <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
   22b36:	2301      	movs	r3, #1
   22b38:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   22b3a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   22b3e:	2528      	movs	r5, #40	; 0x28
   22b40:	fb05 4507 	mla	r5, r5, r7, r4
   22b44:	f105 0c0c 	add.w	ip, r5, #12
   22b48:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   22b4c:	7fa8      	ldrb	r0, [r5, #30]
    p_cb->abort = false;
   22b4e:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   22b50:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
   22b52:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   22b56:	d001      	beq.n	22b5c <nrfx_spi_xfer+0x44>
        nrf_gpio_pin_clear(pin_number);
   22b58:	f00a fadc 	bl	2d114 <nrf_gpio_pin_clear>
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
   22b5c:	2328      	movs	r3, #40	; 0x28
   22b5e:	f1b8 0f00 	cmp.w	r8, #0
   22b62:	d006      	beq.n	22b72 <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
   22b64:	fb03 4407 	mla	r4, r3, r7, r4
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   22b68:	4827      	ldr	r0, [pc, #156]	; (22c08 <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
   22b6a:	2300      	movs	r3, #0
   22b6c:	7763      	strb	r3, [r4, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   22b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   22b72:	f8d9 5000 	ldr.w	r5, [r9]
    p_cb->bytes_transferred = 0;
   22b76:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->INTENCLR = mask;
   22b7a:	2204      	movs	r2, #4
   22b7c:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
   22b80:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22b84:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
   22b88:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   22b8c:	6872      	ldr	r2, [r6, #4]
    nrf_spi_txd_set(p_spi,
   22b8e:	b192      	cbz	r2, 22bb6 <nrfx_spi_xfer+0x9e>
   22b90:	6833      	ldr	r3, [r6, #0]
   22b92:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   22b94:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   22b98:	2a01      	cmp	r2, #1
   22b9a:	d90e      	bls.n	22bba <nrfx_spi_xfer+0xa2>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   22b9c:	6833      	ldr	r3, [r6, #0]
   22b9e:	785b      	ldrb	r3, [r3, #1]
   22ba0:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_cb->handler)
   22ba4:	2328      	movs	r3, #40	; 0x28
   22ba6:	437b      	muls	r3, r7
   22ba8:	58e6      	ldr	r6, [r4, r3]
   22baa:	b176      	cbz	r6, 22bca <nrfx_spi_xfer+0xb2>
    p_reg->INTENSET = mask;
   22bac:	2304      	movs	r3, #4
   22bae:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   22bb2:	4816      	ldr	r0, [pc, #88]	; (22c0c <nrfx_spi_xfer+0xf4>)
   22bb4:	e7db      	b.n	22b6e <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
   22bb6:	7fdb      	ldrb	r3, [r3, #31]
   22bb8:	e7ec      	b.n	22b94 <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
   22bba:	68f3      	ldr	r3, [r6, #12]
   22bbc:	2b01      	cmp	r3, #1
   22bbe:	d9f1      	bls.n	22ba4 <nrfx_spi_xfer+0x8c>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   22bc0:	2328      	movs	r3, #40	; 0x28
   22bc2:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->TXD = data;
   22bc6:	7fdb      	ldrb	r3, [r3, #31]
   22bc8:	e7ea      	b.n	22ba0 <nrfx_spi_xfer+0x88>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   22bca:	eb07 0187 	add.w	r1, r7, r7, lsl #2
   22bce:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22bd2:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   22bd6:	2b00      	cmp	r3, #0
   22bd8:	d0fb      	beq.n	22bd2 <nrfx_spi_xfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22bda:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   22bde:	4628      	mov	r0, r5
   22be0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   22be4:	f00a faa3 	bl	2d12e <transfer_byte>
   22be8:	2800      	cmp	r0, #0
   22bea:	d1f2      	bne.n	22bd2 <nrfx_spi_xfer+0xba>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   22bec:	2328      	movs	r3, #40	; 0x28
   22bee:	fb03 4407 	mla	r4, r3, r7, r4
   22bf2:	7fa0      	ldrb	r0, [r4, #30]
   22bf4:	28ff      	cmp	r0, #255	; 0xff
   22bf6:	d0dc      	beq.n	22bb2 <nrfx_spi_xfer+0x9a>
        nrf_gpio_pin_set(pin_number);
   22bf8:	f00a fa7f 	bl	2d0fa <nrf_gpio_pin_set>
   22bfc:	e7d9      	b.n	22bb2 <nrfx_spi_xfer+0x9a>
        return err_code;
   22bfe:	4804      	ldr	r0, [pc, #16]	; (22c10 <nrfx_spi_xfer+0xf8>)
   22c00:	e7b5      	b.n	22b6e <nrfx_spi_xfer+0x56>
   22c02:	bf00      	nop
   22c04:	20005f28 	.word	0x20005f28
   22c08:	0bad0003 	.word	0x0bad0003
   22c0c:	0bad0000 	.word	0x0bad0000
   22c10:	0bad000b 	.word	0x0bad000b

00022c14 <nrfx_spi_1_irq_handler>:
   22c14:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   22c18:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
   22c1a:	b510      	push	{r4, lr}
    if (!transfer_byte(p_spi, p_cb))
   22c1c:	490b      	ldr	r1, [pc, #44]	; (22c4c <nrfx_spi_1_irq_handler+0x38>)
   22c1e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   22c22:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   22c26:	f00a fa82 	bl	2d12e <transfer_byte>
   22c2a:	b968      	cbnz	r0, 22c48 <nrfx_spi_1_irq_handler+0x34>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   22c2c:	7f88      	ldrb	r0, [r1, #30]
   22c2e:	28ff      	cmp	r0, #255	; 0xff
   22c30:	d001      	beq.n	22c36 <nrfx_spi_1_irq_handler+0x22>
   22c32:	f00a fa62 	bl	2d0fa <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
   22c36:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   22c38:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
   22c3a:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
}
   22c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   22c40:	e9d1 3100 	ldrd	r3, r1, [r1]
   22c44:	4802      	ldr	r0, [pc, #8]	; (22c50 <nrfx_spi_1_irq_handler+0x3c>)
   22c46:	4718      	bx	r3
}
   22c48:	bd10      	pop	{r4, pc}
   22c4a:	bf00      	nop
   22c4c:	20005f28 	.word	0x20005f28
   22c50:	20005f30 	.word	0x20005f30

00022c54 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   22c54:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   22c56:	4c11      	ldr	r4, [pc, #68]	; (22c9c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   22c58:	4a11      	ldr	r2, [pc, #68]	; (22ca0 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   22c5a:	4912      	ldr	r1, [pc, #72]	; (22ca4 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   22c5c:	2303      	movs	r3, #3
   22c5e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   22c60:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   22c62:	4b11      	ldr	r3, [pc, #68]	; (22ca8 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   22c64:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   22c66:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   22c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
   22c6c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   22c6e:	2300      	movs	r3, #0
   22c70:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   22c72:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   22c74:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   22c76:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   22c78:	4a0c      	ldr	r2, [pc, #48]	; (22cac <_DoInit+0x58>)
   22c7a:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   22c7c:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   22c7e:	2210      	movs	r2, #16
   22c80:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   22c82:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   22c84:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   22c86:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   22c88:	f00b f963 	bl	2df52 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   22c8c:	4908      	ldr	r1, [pc, #32]	; (22cb0 <_DoInit+0x5c>)
   22c8e:	4620      	mov	r0, r4
   22c90:	f00b f95f 	bl	2df52 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   22c94:	2320      	movs	r3, #32
   22c96:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   22c98:	bd10      	pop	{r4, pc}
   22c9a:	bf00      	nop
   22c9c:	20005f50 	.word	0x20005f50
   22ca0:	00031d3e 	.word	0x00031d3e
   22ca4:	00031d47 	.word	0x00031d47
   22ca8:	20007447 	.word	0x20007447
   22cac:	20007437 	.word	0x20007437
   22cb0:	00031d4b 	.word	0x00031d4b

00022cb4 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   22cb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   22cb8:	4f23      	ldr	r7, [pc, #140]	; (22d48 <SEGGER_RTT_WriteSkipNoLock+0x94>)
   22cba:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   22cbe:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   22cc0:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   22cc4:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   22cc6:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   22cc8:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   22cca:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   22ccc:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   22cce:	d834      	bhi.n	22d3a <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   22cd0:	f8d2 a020 	ldr.w	sl, [r2, #32]
   22cd4:	ebaa 0905 	sub.w	r9, sl, r5
   22cd8:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   22cdc:	4294      	cmp	r4, r2
   22cde:	d811      	bhi.n	22d04 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   22ce0:	f04f 0918 	mov.w	r9, #24
   22ce4:	fb06 9309 	mla	r3, r6, r9, r9
   22ce8:	443b      	add	r3, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22cea:	4622      	mov	r2, r4
   22cec:	6858      	ldr	r0, [r3, #4]
   22cee:	4641      	mov	r1, r8
   22cf0:	4428      	add	r0, r5
   22cf2:	f00b f871 	bl	2ddd8 <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   22cf6:	fb09 7606 	mla	r6, r9, r6, r7
   22cfa:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   22cfc:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   22cfe:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   22d00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   22d04:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   22d06:	429c      	cmp	r4, r3
   22d08:	d81b      	bhi.n	22d42 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   22d0a:	fb00 bb0b 	mla	fp, r0, fp, fp
   22d0e:	44bb      	add	fp, r7
   22d10:	464a      	mov	r2, r9
   22d12:	f8db 0004 	ldr.w	r0, [fp, #4]
   22d16:	442c      	add	r4, r5
   22d18:	4428      	add	r0, r5
   22d1a:	f00b f85d 	bl	2ddd8 <memcpy>
      if (NumBytes) {
   22d1e:	ebb4 040a 	subs.w	r4, r4, sl
   22d22:	d006      	beq.n	22d32 <SEGGER_RTT_WriteSkipNoLock+0x7e>
   22d24:	f8db 0004 	ldr.w	r0, [fp, #4]
   22d28:	4622      	mov	r2, r4
   22d2a:	eb08 0109 	add.w	r1, r8, r9
   22d2e:	f00b f853 	bl	2ddd8 <memcpy>
      pRing->WrOff = NumBytes;
   22d32:	2018      	movs	r0, #24
   22d34:	fb00 7606 	mla	r6, r0, r6, r7
   22d38:	e7e0      	b.n	22cfc <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   22d3a:	3b01      	subs	r3, #1
   22d3c:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   22d3e:	42a3      	cmp	r3, r4
   22d40:	d2ce      	bcs.n	22ce0 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   22d42:	2000      	movs	r0, #0
   22d44:	e7dc      	b.n	22d00 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   22d46:	bf00      	nop
   22d48:	20005f50 	.word	0x20005f50

00022d4c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   22d4c:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   22d4e:	4b16      	ldr	r3, [pc, #88]	; (22da8 <SEGGER_RTT_WriteNoLock+0x5c>)
   22d50:	2418      	movs	r4, #24
   22d52:	fb00 4504 	mla	r5, r0, r4, r4
   22d56:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   22d58:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   22d5c:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   22d5e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   22d60:	2c01      	cmp	r4, #1
   22d62:	d00e      	beq.n	22d82 <SEGGER_RTT_WriteNoLock+0x36>
   22d64:	2c02      	cmp	r4, #2
   22d66:	d018      	beq.n	22d9a <SEGGER_RTT_WriteNoLock+0x4e>
   22d68:	b9e4      	cbnz	r4, 22da4 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   22d6a:	4628      	mov	r0, r5
   22d6c:	f00a fa12 	bl	2d194 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   22d70:	4286      	cmp	r6, r0
   22d72:	d804      	bhi.n	22d7e <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   22d74:	4632      	mov	r2, r6
   22d76:	4628      	mov	r0, r5
   22d78:	f00a fa15 	bl	2d1a6 <_WriteNoCheck>
   22d7c:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   22d7e:	4620      	mov	r0, r4
   22d80:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
   22d82:	4628      	mov	r0, r5
   22d84:	f00a fa06 	bl	2d194 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   22d88:	4286      	cmp	r6, r0
   22d8a:	4634      	mov	r4, r6
   22d8c:	bf28      	it	cs
   22d8e:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   22d90:	4622      	mov	r2, r4
   22d92:	4628      	mov	r0, r5
   22d94:	f00a fa07 	bl	2d1a6 <_WriteNoCheck>
    break;
   22d98:	e7f1      	b.n	22d7e <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   22d9a:	4628      	mov	r0, r5
}
   22d9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   22da0:	f00a ba1e 	b.w	2d1e0 <_WriteBlocking>
  switch (pRing->Flags) {
   22da4:	2400      	movs	r4, #0
  return Status;
   22da6:	e7ea      	b.n	22d7e <SEGGER_RTT_WriteNoLock+0x32>
   22da8:	20005f50 	.word	0x20005f50

00022dac <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   22dac:	4b03      	ldr	r3, [pc, #12]	; (22dbc <SEGGER_RTT_HasDataUp+0x10>)
   22dae:	2218      	movs	r2, #24
   22db0:	fb02 3300 	mla	r3, r2, r0, r3
   22db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   22db6:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   22db8:	1a80      	subs	r0, r0, r2
   22dba:	4770      	bx	lr
   22dbc:	20005f50 	.word	0x20005f50

00022dc0 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   22dc0:	4803      	ldr	r0, [pc, #12]	; (22dd0 <zephyr_rtt_mutex_lock+0x10>)
   22dc2:	f04f 32ff 	mov.w	r2, #4294967295
   22dc6:	f04f 33ff 	mov.w	r3, #4294967295
   22dca:	f000 baab 	b.w	23324 <z_impl_k_mutex_lock>
   22dce:	bf00      	nop
   22dd0:	20000b64 	.word	0x20000b64

00022dd4 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   22dd4:	4801      	ldr	r0, [pc, #4]	; (22ddc <zephyr_rtt_mutex_unlock+0x8>)
   22dd6:	f000 bb1d 	b.w	23414 <z_impl_k_mutex_unlock>
   22dda:	bf00      	nop
   22ddc:	20000b64 	.word	0x20000b64

00022de0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   22de0:	4b0e      	ldr	r3, [pc, #56]	; (22e1c <z_sys_init_run_level+0x3c>)
{
   22de2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   22de4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   22de8:	3001      	adds	r0, #1
   22dea:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   22dee:	42a6      	cmp	r6, r4
   22df0:	d800      	bhi.n	22df4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   22df2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   22df4:	e9d4 3500 	ldrd	r3, r5, [r4]
   22df8:	4628      	mov	r0, r5
   22dfa:	4798      	blx	r3
		if (dev != NULL) {
   22dfc:	b165      	cbz	r5, 22e18 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   22dfe:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   22e00:	b130      	cbz	r0, 22e10 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   22e02:	2800      	cmp	r0, #0
   22e04:	bfb8      	it	lt
   22e06:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   22e08:	28ff      	cmp	r0, #255	; 0xff
   22e0a:	bfa8      	it	ge
   22e0c:	20ff      	movge	r0, #255	; 0xff
   22e0e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   22e10:	785a      	ldrb	r2, [r3, #1]
   22e12:	f042 0201 	orr.w	r2, r2, #1
   22e16:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   22e18:	3408      	adds	r4, #8
   22e1a:	e7e8      	b.n	22dee <z_sys_init_run_level+0xe>
   22e1c:	0002f30c 	.word	0x0002f30c

00022e20 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   22e20:	4b01      	ldr	r3, [pc, #4]	; (22e28 <z_impl_z_errno+0x8>)
   22e22:	6898      	ldr	r0, [r3, #8]
}
   22e24:	3064      	adds	r0, #100	; 0x64
   22e26:	4770      	bx	lr
   22e28:	20005ff8 	.word	0x20005ff8

00022e2c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   22e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22e30:	b086      	sub	sp, #24
   22e32:	4605      	mov	r5, r0
   22e34:	af00      	add	r7, sp, #0
   22e36:	460e      	mov	r6, r1
	__asm__ volatile(
   22e38:	f04f 0340 	mov.w	r3, #64	; 0x40
   22e3c:	f3ef 8811 	mrs	r8, BASEPRI
   22e40:	f383 8812 	msr	BASEPRI_MAX, r3
   22e44:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   22e48:	f001 f890 	bl	23f6c <z_impl_z_current_get>
   22e4c:	2d04      	cmp	r5, #4
   22e4e:	bf96      	itet	ls
   22e50:	4b2c      	ldrls	r3, [pc, #176]	; (22f04 <z_fatal_error+0xd8>)
   22e52:	4b2d      	ldrhi	r3, [pc, #180]	; (22f08 <z_fatal_error+0xdc>)
   22e54:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   22e58:	46e9      	mov	r9, sp
   22e5a:	b08a      	sub	sp, #40	; 0x28
   22e5c:	4604      	mov	r4, r0
   22e5e:	466a      	mov	r2, sp
   22e60:	492a      	ldr	r1, [pc, #168]	; (22f0c <z_fatal_error+0xe0>)
   22e62:	61d3      	str	r3, [r2, #28]
   22e64:	2303      	movs	r3, #3
   22e66:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   22e6a:	f04f 0a00 	mov.w	sl, #0
   22e6e:	4b28      	ldr	r3, [pc, #160]	; (22f10 <z_fatal_error+0xe4>)
   22e70:	f8c2 a020 	str.w	sl, [r2, #32]
   22e74:	e9c2 1505 	strd	r1, r5, [r2, #20]
   22e78:	f842 3f10 	str.w	r3, [r2, #16]!
   22e7c:	4825      	ldr	r0, [pc, #148]	; (22f14 <z_fatal_error+0xe8>)
   22e7e:	4653      	mov	r3, sl
   22e80:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
   22e84:	f7f2 fc02 	bl	1568c <z_impl_z_log_msg_static_create>
   22e88:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   22e8a:	b17e      	cbz	r6, 22eac <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   22e8c:	69f3      	ldr	r3, [r6, #28]
   22e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   22e92:	b15b      	cbz	r3, 22eac <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
   22e94:	4b20      	ldr	r3, [pc, #128]	; (22f18 <z_fatal_error+0xec>)
   22e96:	617b      	str	r3, [r7, #20]
   22e98:	2302      	movs	r3, #2
   22e9a:	613b      	str	r3, [r7, #16]
   22e9c:	481d      	ldr	r0, [pc, #116]	; (22f14 <z_fatal_error+0xe8>)
   22e9e:	4653      	mov	r3, sl
   22ea0:	f107 0210 	add.w	r2, r7, #16
   22ea4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   22ea8:	f7f2 fbf0 	bl	1568c <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   22eac:	b12c      	cbz	r4, 22eba <z_fatal_error+0x8e>
   22eae:	4620      	mov	r0, r4
   22eb0:	f00a fa88 	bl	2d3c4 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   22eb4:	b108      	cbz	r0, 22eba <z_fatal_error+0x8e>
   22eb6:	7803      	ldrb	r3, [r0, #0]
   22eb8:	b903      	cbnz	r3, 22ebc <z_fatal_error+0x90>
		thread_name = "unknown";
   22eba:	4818      	ldr	r0, [pc, #96]	; (22f1c <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   22ebc:	46e9      	mov	r9, sp
   22ebe:	b08a      	sub	sp, #40	; 0x28
   22ec0:	466a      	mov	r2, sp
   22ec2:	4b17      	ldr	r3, [pc, #92]	; (22f20 <z_fatal_error+0xf4>)
   22ec4:	61d0      	str	r0, [r2, #28]
   22ec6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   22eca:	2303      	movs	r3, #3
   22ecc:	f882 3020 	strb.w	r3, [r2, #32]
   22ed0:	4b14      	ldr	r3, [pc, #80]	; (22f24 <z_fatal_error+0xf8>)
   22ed2:	f842 3f10 	str.w	r3, [r2, #16]!
   22ed6:	2300      	movs	r3, #0
   22ed8:	480e      	ldr	r0, [pc, #56]	; (22f14 <z_fatal_error+0xe8>)
   22eda:	f44f 5109 	mov.w	r1, #8768	; 0x2240
   22ede:	f7f2 fbd5 	bl	1568c <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   22ee2:	4631      	mov	r1, r6
   22ee4:	46cd      	mov	sp, r9
   22ee6:	4628      	mov	r0, r5
   22ee8:	f7fd ffe8 	bl	20ebc <k_sys_fatal_error_handler>
	__asm__ volatile(
   22eec:	f388 8811 	msr	BASEPRI, r8
   22ef0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   22ef4:	4620      	mov	r0, r4
   22ef6:	f7f3 ff99 	bl	16e2c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   22efa:	3718      	adds	r7, #24
   22efc:	46bd      	mov	sp, r7
   22efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22f02:	bf00      	nop
   22f04:	0002f324 	.word	0x0002f324
   22f08:	00031d52 	.word	0x00031d52
   22f0c:	00031d60 	.word	0x00031d60
   22f10:	01000005 	.word	0x01000005
   22f14:	0002e654 	.word	0x0002e654
   22f18:	00031d88 	.word	0x00031d88
   22f1c:	0003019e 	.word	0x0003019e
   22f20:	00031da9 	.word	0x00031da9
   22f24:	01000004 	.word	0x01000004

00022f28 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   22f28:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   22f2a:	4b0a      	ldr	r3, [pc, #40]	; (22f54 <bg_thread_main+0x2c>)
   22f2c:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   22f2e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   22f30:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   22f32:	f7ff ff55 	bl	22de0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   22f36:	f001 fb45 	bl	245c4 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   22f3a:	2003      	movs	r0, #3
   22f3c:	f7ff ff50 	bl	22de0 <z_sys_init_run_level>

	z_init_static_threads();
   22f40:	f000 f978 	bl	23234 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   22f44:	f7ef fb3e 	bl	125c4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   22f48:	4a03      	ldr	r2, [pc, #12]	; (22f58 <bg_thread_main+0x30>)
   22f4a:	7b13      	ldrb	r3, [r2, #12]
   22f4c:	f023 0301 	bic.w	r3, r3, #1
   22f50:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   22f52:	bd08      	pop	{r3, pc}
   22f54:	20007847 	.word	0x20007847
   22f58:	20002528 	.word	0x20002528

00022f5c <z_bss_zero>:
{
   22f5c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   22f5e:	4803      	ldr	r0, [pc, #12]	; (22f6c <z_bss_zero+0x10>)
   22f60:	4a03      	ldr	r2, [pc, #12]	; (22f70 <z_bss_zero+0x14>)
   22f62:	2100      	movs	r1, #0
   22f64:	1a12      	subs	r2, r2, r0
   22f66:	f00a f976 	bl	2d256 <z_early_memset>
}
   22f6a:	bd08      	pop	{r3, pc}
   22f6c:	20000d38 	.word	0x20000d38
   22f70:	20007848 	.word	0x20007848

00022f74 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   22f74:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   22f76:	2300      	movs	r3, #0
{
   22f78:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   22f7a:	2201      	movs	r2, #1
   22f7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   22f80:	4e11      	ldr	r6, [pc, #68]	; (22fc8 <z_init_cpu+0x54>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   22f82:	4d12      	ldr	r5, [pc, #72]	; (22fcc <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   22f84:	9301      	str	r3, [sp, #4]
   22f86:	220f      	movs	r2, #15
   22f88:	e9cd 3202 	strd	r3, r2, [sp, #8]
   22f8c:	4910      	ldr	r1, [pc, #64]	; (22fd0 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   22f8e:	2318      	movs	r3, #24
   22f90:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   22f94:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
	z_setup_new_thread(thread, stack,
   22f98:	f44f 72a0 	mov.w	r2, #320	; 0x140
{
   22f9c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   22f9e:	fb02 1100 	mla	r1, r2, r0, r1
   22fa2:	4b0c      	ldr	r3, [pc, #48]	; (22fd4 <z_init_cpu+0x60>)
   22fa4:	9500      	str	r5, [sp, #0]
   22fa6:	4630      	mov	r0, r6
   22fa8:	f000 f8e8 	bl	2317c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   22fac:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   22fae:	480a      	ldr	r0, [pc, #40]	; (22fd8 <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
   22fb0:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   22fb2:	3401      	adds	r4, #1
   22fb4:	f023 0304 	bic.w	r3, r3, #4
   22fb8:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
   22fbc:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   22fbe:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   22fc0:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   22fc2:	b006      	add	sp, #24
   22fc4:	bd70      	pop	{r4, r5, r6, pc}
   22fc6:	bf00      	nop
   22fc8:	200024a8 	.word	0x200024a8
   22fcc:	20005ff8 	.word	0x20005ff8
   22fd0:	200090d0 	.word	0x200090d0
   22fd4:	000232ed 	.word	0x000232ed
   22fd8:	20009210 	.word	0x20009210

00022fdc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   22fdc:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   22fde:	4b2f      	ldr	r3, [pc, #188]	; (2309c <z_cstart+0xc0>)
   22fe0:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   22fe2:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   22fe6:	4d2e      	ldr	r5, [pc, #184]	; (230a0 <z_cstart+0xc4>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   22fe8:	4e2e      	ldr	r6, [pc, #184]	; (230a4 <z_cstart+0xc8>)
   22fea:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   22fec:	4f2e      	ldr	r7, [pc, #184]	; (230a8 <z_cstart+0xcc>)
   22fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   22ff2:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22ff4:	23e0      	movs	r3, #224	; 0xe0
   22ff6:	2400      	movs	r4, #0
   22ff8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   22ffc:	2320      	movs	r3, #32
   22ffe:	77eb      	strb	r3, [r5, #31]
   23000:	762c      	strb	r4, [r5, #24]
   23002:	766c      	strb	r4, [r5, #25]
   23004:	76ac      	strb	r4, [r5, #26]
   23006:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2300a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2300c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   23010:	626b      	str	r3, [r5, #36]	; 0x24
   23012:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   23016:	f7f3 fe7d 	bl	16d14 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2301a:	f7f3 fa0f 	bl	1643c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2301e:	f04f 33ff 	mov.w	r3, #4294967295
   23022:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   23024:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   23026:	f7f3 ffa7 	bl	16f78 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   2302a:	f7f3 ff15 	bl	16e58 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   2302e:	f7f2 f9d3 	bl	153d8 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   23032:	f240 1301 	movw	r3, #257	; 0x101
   23036:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   2303a:	ab06      	add	r3, sp, #24
   2303c:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   2303e:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   23042:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   23044:	f00a f8fc 	bl	2d240 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   23048:	4620      	mov	r0, r4
   2304a:	f7ff fec9 	bl	22de0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2304e:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   23050:	4d16      	ldr	r5, [pc, #88]	; (230ac <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   23052:	f7ff fec5 	bl	22de0 <z_sys_init_run_level>
	z_sched_init();
   23056:	f000 fec1 	bl	23ddc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2305a:	4b15      	ldr	r3, [pc, #84]	; (230b0 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
   2305c:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2305e:	9305      	str	r3, [sp, #20]
   23060:	2301      	movs	r3, #1
   23062:	4914      	ldr	r1, [pc, #80]	; (230b4 <z_cstart+0xd8>)
   23064:	9400      	str	r4, [sp, #0]
   23066:	e9cd 4303 	strd	r4, r3, [sp, #12]
   2306a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2306e:	463b      	mov	r3, r7
   23070:	e9cd 4401 	strd	r4, r4, [sp, #4]
   23074:	4628      	mov	r0, r5
   23076:	f000 f881 	bl	2317c <z_setup_new_thread>
   2307a:	7b6a      	ldrb	r2, [r5, #13]
   2307c:	4606      	mov	r6, r0
   2307e:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   23082:	4628      	mov	r0, r5
   23084:	736a      	strb	r2, [r5, #13]
   23086:	f00a fbf1 	bl	2d86c <z_ready_thread>
	z_init_cpu(0);
   2308a:	4620      	mov	r0, r4
   2308c:	f7ff ff72 	bl	22f74 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   23090:	463a      	mov	r2, r7
   23092:	4631      	mov	r1, r6
   23094:	4628      	mov	r0, r5
   23096:	f7f3 fb39 	bl	1670c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2309a:	bf00      	nop
   2309c:	20009a10 	.word	0x20009a10
   230a0:	e000ed00 	.word	0xe000ed00
   230a4:	20005ff8 	.word	0x20005ff8
   230a8:	00022f29 	.word	0x00022f29
   230ac:	20002528 	.word	0x20002528
   230b0:	00031e0b 	.word	0x00031e0b
   230b4:	200088d0 	.word	0x200088d0

000230b8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   230b8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   230ba:	4c06      	ldr	r4, [pc, #24]	; (230d4 <statics_init+0x1c>)
   230bc:	4d06      	ldr	r5, [pc, #24]	; (230d8 <statics_init+0x20>)
   230be:	42ac      	cmp	r4, r5
   230c0:	d301      	bcc.n	230c6 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   230c2:	2000      	movs	r0, #0
   230c4:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   230c6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   230ca:	4620      	mov	r0, r4
   230cc:	f00a f8c7 	bl	2d25e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   230d0:	3414      	adds	r4, #20
   230d2:	e7f4      	b.n	230be <statics_init+0x6>
   230d4:	20000ad8 	.word	0x20000ad8
   230d8:	20000ad8 	.word	0x20000ad8

000230dc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   230dc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   230de:	4b0e      	ldr	r3, [pc, #56]	; (23118 <init_mem_slab_module+0x3c>)
   230e0:	4c0e      	ldr	r4, [pc, #56]	; (2311c <init_mem_slab_module+0x40>)
   230e2:	42a3      	cmp	r3, r4
   230e4:	d301      	bcc.n	230ea <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   230e6:	2000      	movs	r0, #0
	return rc;
}
   230e8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   230ea:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   230ee:	ea41 0200 	orr.w	r2, r1, r0
   230f2:	f012 0203 	ands.w	r2, r2, #3
   230f6:	d10b      	bne.n	23110 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   230f8:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   230fa:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   230fc:	42aa      	cmp	r2, r5
   230fe:	d101      	bne.n	23104 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   23100:	331c      	adds	r3, #28
   23102:	e7ee      	b.n	230e2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   23104:	695e      	ldr	r6, [r3, #20]
   23106:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   23108:	3201      	adds	r2, #1
		slab->free_list = p;
   2310a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   2310c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   2310e:	e7f5      	b.n	230fc <init_mem_slab_module+0x20>
	return rc;
   23110:	f06f 0015 	mvn.w	r0, #21
   23114:	e7e8      	b.n	230e8 <init_mem_slab_module+0xc>
   23116:	bf00      	nop
   23118:	20000a84 	.word	0x20000a84
   2311c:	20000ad8 	.word	0x20000ad8

00023120 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   23120:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23122:	460c      	mov	r4, r1
	__asm__ volatile(
   23124:	f04f 0540 	mov.w	r5, #64	; 0x40
   23128:	f3ef 8111 	mrs	r1, BASEPRI
   2312c:	f385 8812 	msr	BASEPRI_MAX, r5
   23130:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   23134:	6945      	ldr	r5, [r0, #20]
   23136:	b15d      	cbz	r5, 23150 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   23138:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   2313a:	682b      	ldr	r3, [r5, #0]
   2313c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   2313e:	6983      	ldr	r3, [r0, #24]
   23140:	3301      	adds	r3, #1
   23142:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   23144:	2000      	movs	r0, #0
	__asm__ volatile(
   23146:	f381 8811 	msr	BASEPRI, r1
   2314a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   2314e:	e011      	b.n	23174 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   23150:	ea52 0c03 	orrs.w	ip, r2, r3
   23154:	d103      	bne.n	2315e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   23156:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   23158:	f06f 000b 	mvn.w	r0, #11
   2315c:	e7f3      	b.n	23146 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   2315e:	e9cd 2300 	strd	r2, r3, [sp]
   23162:	4602      	mov	r2, r0
   23164:	3008      	adds	r0, #8
   23166:	f000 fd8f 	bl	23c88 <z_pend_curr>
		if (result == 0) {
   2316a:	b918      	cbnz	r0, 23174 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   2316c:	4b02      	ldr	r3, [pc, #8]	; (23178 <k_mem_slab_alloc+0x58>)
   2316e:	689b      	ldr	r3, [r3, #8]
   23170:	695b      	ldr	r3, [r3, #20]
   23172:	6023      	str	r3, [r4, #0]
}
   23174:	b003      	add	sp, #12
   23176:	bd30      	pop	{r4, r5, pc}
   23178:	20005ff8 	.word	0x20005ff8

0002317c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   2317c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   23180:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   23182:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   23184:	2604      	movs	r6, #4
   23186:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   23188:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   2318a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2318c:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   23190:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   23192:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23196:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   23198:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2319a:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   2319e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   231a2:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   231a6:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   231a8:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   231aa:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   231ac:	9202      	str	r2, [sp, #8]
   231ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   231b0:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   231b2:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   231b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   231b8:	9200      	str	r2, [sp, #0]
   231ba:	4642      	mov	r2, r8
{
   231bc:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   231be:	f7f3 fa89 	bl	166d4 <arch_new_thread>
	if (!_current) {
   231c2:	4b05      	ldr	r3, [pc, #20]	; (231d8 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   231c4:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   231c6:	689b      	ldr	r3, [r3, #8]
   231c8:	b103      	cbz	r3, 231cc <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   231ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   231cc:	6763      	str	r3, [r4, #116]	; 0x74
}
   231ce:	4640      	mov	r0, r8
   231d0:	b004      	add	sp, #16
   231d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   231d6:	bf00      	nop
   231d8:	20005ff8 	.word	0x20005ff8

000231dc <z_impl_k_thread_create>:
{
   231dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   231de:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   231e0:	2700      	movs	r7, #0
   231e2:	9705      	str	r7, [sp, #20]
   231e4:	9f10      	ldr	r7, [sp, #64]	; 0x40
   231e6:	9704      	str	r7, [sp, #16]
   231e8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   231ea:	9703      	str	r7, [sp, #12]
   231ec:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   231ee:	9702      	str	r7, [sp, #8]
{
   231f0:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   231f4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   231f6:	9701      	str	r7, [sp, #4]
   231f8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   231fa:	9700      	str	r7, [sp, #0]
{
   231fc:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   231fe:	f7ff ffbd 	bl	2317c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   23202:	f1b5 3fff 	cmp.w	r5, #4294967295
   23206:	bf08      	it	eq
   23208:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2320c:	d005      	beq.n	2321a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2320e:	ea55 0306 	orrs.w	r3, r5, r6
   23212:	d105      	bne.n	23220 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   23214:	4620      	mov	r0, r4
   23216:	f000 fcdb 	bl	23bd0 <z_sched_start>
}
   2321a:	4620      	mov	r0, r4
   2321c:	b007      	add	sp, #28
   2321e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   23220:	4903      	ldr	r1, [pc, #12]	; (23230 <z_impl_k_thread_create+0x54>)
   23222:	4632      	mov	r2, r6
   23224:	462b      	mov	r3, r5
   23226:	f104 0018 	add.w	r0, r4, #24
   2322a:	f000 ff7b 	bl	24124 <z_add_timeout>
   2322e:	e7f4      	b.n	2321a <z_impl_k_thread_create+0x3e>
   23230:	0002d88d 	.word	0x0002d88d

00023234 <z_init_static_threads>:
{
   23234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23238:	4c29      	ldr	r4, [pc, #164]	; (232e0 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   2323a:	4d2a      	ldr	r5, [pc, #168]	; (232e4 <z_init_static_threads+0xb0>)
{
   2323c:	b087      	sub	sp, #28
   2323e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   23240:	42ae      	cmp	r6, r5
   23242:	f104 0430 	add.w	r4, r4, #48	; 0x30
   23246:	d30f      	bcc.n	23268 <z_init_static_threads+0x34>
	k_sched_lock();
   23248:	f000 fbdc 	bl	23a04 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   2324c:	4c24      	ldr	r4, [pc, #144]	; (232e0 <z_init_static_threads+0xac>)
   2324e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 232e8 <z_init_static_threads+0xb4>
   23252:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   23256:	f240 37e7 	movw	r7, #999	; 0x3e7
   2325a:	42ac      	cmp	r4, r5
   2325c:	d320      	bcc.n	232a0 <z_init_static_threads+0x6c>
}
   2325e:	b007      	add	sp, #28
   23260:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   23264:	f000 bd9e 	b.w	23da4 <k_sched_unlock>
		z_setup_new_thread(
   23268:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2326c:	9305      	str	r3, [sp, #20]
   2326e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   23272:	9304      	str	r3, [sp, #16]
   23274:	f854 3c14 	ldr.w	r3, [r4, #-20]
   23278:	9303      	str	r3, [sp, #12]
   2327a:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2327e:	9302      	str	r3, [sp, #8]
   23280:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   23284:	9301      	str	r3, [sp, #4]
   23286:	f854 3c20 	ldr.w	r3, [r4, #-32]
   2328a:	9300      	str	r3, [sp, #0]
   2328c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   23290:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   23294:	f7ff ff72 	bl	2317c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   23298:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2329c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   2329e:	e7ce      	b.n	2323e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   232a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   232a2:	1c5a      	adds	r2, r3, #1
   232a4:	d00d      	beq.n	232c2 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   232a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   232aa:	2100      	movs	r1, #0
   232ac:	4638      	mov	r0, r7
   232ae:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   232b2:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   232b6:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   232ba:	d104      	bne.n	232c6 <z_init_static_threads+0x92>
	z_sched_start(thread);
   232bc:	4640      	mov	r0, r8
   232be:	f000 fc87 	bl	23bd0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   232c2:	3430      	adds	r4, #48	; 0x30
   232c4:	e7c9      	b.n	2325a <z_init_static_threads+0x26>
   232c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   232ca:	2300      	movs	r3, #0
   232cc:	f7dd ff50 	bl	1170 <__aeabi_uldivmod>
   232d0:	4602      	mov	r2, r0
   232d2:	460b      	mov	r3, r1
   232d4:	f108 0018 	add.w	r0, r8, #24
   232d8:	4649      	mov	r1, r9
   232da:	f000 ff23 	bl	24124 <z_add_timeout>
   232de:	e7f0      	b.n	232c2 <z_init_static_threads+0x8e>
   232e0:	20000a84 	.word	0x20000a84
   232e4:	20000a84 	.word	0x20000a84
   232e8:	0002d88d 	.word	0x0002d88d

000232ec <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   232ec:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   232ee:	4c0b      	ldr	r4, [pc, #44]	; (2331c <idle+0x30>)
	return !z_sys_post_kernel;
   232f0:	4d0b      	ldr	r5, [pc, #44]	; (23320 <idle+0x34>)
	__asm__ volatile(
   232f2:	f04f 0240 	mov.w	r2, #64	; 0x40
   232f6:	f3ef 8311 	mrs	r3, BASEPRI
   232fa:	f382 8812 	msr	BASEPRI_MAX, r2
   232fe:	f3bf 8f6f 	isb	sy
   23302:	f00a fb7f 	bl	2da04 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   23306:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   23308:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2330a:	b913      	cbnz	r3, 23312 <idle+0x26>
	arch_cpu_idle();
   2330c:	f7f3 f89c 	bl	16448 <arch_cpu_idle>
}
   23310:	e7ef      	b.n	232f2 <idle+0x6>
   23312:	f7f2 fea3 	bl	1605c <pm_system_suspend>
   23316:	2800      	cmp	r0, #0
   23318:	d1eb      	bne.n	232f2 <idle+0x6>
   2331a:	e7f7      	b.n	2330c <idle+0x20>
   2331c:	20005ff8 	.word	0x20005ff8
   23320:	20007847 	.word	0x20007847

00023324 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   23324:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23328:	4604      	mov	r4, r0
   2332a:	4617      	mov	r7, r2
   2332c:	461e      	mov	r6, r3
   2332e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23332:	f3ef 8811 	mrs	r8, BASEPRI
   23336:	f383 8812 	msr	BASEPRI_MAX, r3
   2333a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2333e:	68c3      	ldr	r3, [r0, #12]
   23340:	4a32      	ldr	r2, [pc, #200]	; (2340c <z_impl_k_mutex_lock+0xe8>)
   23342:	b16b      	cbz	r3, 23360 <z_impl_k_mutex_lock+0x3c>
   23344:	6880      	ldr	r0, [r0, #8]
   23346:	6891      	ldr	r1, [r2, #8]
   23348:	4288      	cmp	r0, r1
   2334a:	d019      	beq.n	23380 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   2334c:	ea57 0306 	orrs.w	r3, r7, r6
   23350:	d118      	bne.n	23384 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   23352:	f388 8811 	msr	BASEPRI, r8
   23356:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   2335a:	f06f 000f 	mvn.w	r0, #15
   2335e:	e00c      	b.n	2337a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   23360:	6891      	ldr	r1, [r2, #8]
   23362:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   23366:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   23368:	3301      	adds	r3, #1
   2336a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2336c:	6893      	ldr	r3, [r2, #8]
   2336e:	60a3      	str	r3, [r4, #8]
   23370:	f388 8811 	msr	BASEPRI, r8
   23374:	f3bf 8f6f 	isb	sy
		return 0;
   23378:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   2337a:	b002      	add	sp, #8
   2337c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   23380:	6921      	ldr	r1, [r4, #16]
   23382:	e7f0      	b.n	23366 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   23384:	f991 100e 	ldrsb.w	r1, [r1, #14]
   23388:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   2338c:	4299      	cmp	r1, r3
   2338e:	bfa8      	it	ge
   23390:	4619      	movge	r1, r3
   23392:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   23396:	4291      	cmp	r1, r2
   23398:	bfb8      	it	lt
   2339a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2339c:	428b      	cmp	r3, r1
   2339e:	dd2e      	ble.n	233fe <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   233a0:	f00a f81b 	bl	2d3da <adjust_owner_prio.isra.0>
   233a4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   233a6:	e9cd 7600 	strd	r7, r6, [sp]
   233aa:	4819      	ldr	r0, [pc, #100]	; (23410 <z_impl_k_mutex_lock+0xec>)
   233ac:	4622      	mov	r2, r4
   233ae:	4641      	mov	r1, r8
   233b0:	f000 fc6a 	bl	23c88 <z_pend_curr>
	if (got_mutex == 0) {
   233b4:	2800      	cmp	r0, #0
   233b6:	d0e0      	beq.n	2337a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   233b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   233bc:	f3ef 8611 	mrs	r6, BASEPRI
   233c0:	f383 8812 	msr	BASEPRI_MAX, r3
   233c4:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   233c8:	6823      	ldr	r3, [r4, #0]
   233ca:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   233cc:	429c      	cmp	r4, r3
   233ce:	d00a      	beq.n	233e6 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   233d0:	b14b      	cbz	r3, 233e6 <z_impl_k_mutex_lock+0xc2>
   233d2:	f993 300e 	ldrsb.w	r3, [r3, #14]
   233d6:	4299      	cmp	r1, r3
   233d8:	bfa8      	it	ge
   233da:	4619      	movge	r1, r3
   233dc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   233e0:	4299      	cmp	r1, r3
   233e2:	bfb8      	it	lt
   233e4:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   233e6:	68a0      	ldr	r0, [r4, #8]
   233e8:	f009 fff7 	bl	2d3da <adjust_owner_prio.isra.0>
   233ec:	b900      	cbnz	r0, 233f0 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   233ee:	b145      	cbz	r5, 23402 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   233f0:	4807      	ldr	r0, [pc, #28]	; (23410 <z_impl_k_mutex_lock+0xec>)
   233f2:	4631      	mov	r1, r6
   233f4:	f000 faf4 	bl	239e0 <z_reschedule>
	return -EAGAIN;
   233f8:	f06f 000a 	mvn.w	r0, #10
   233fc:	e7bd      	b.n	2337a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   233fe:	2500      	movs	r5, #0
   23400:	e7d1      	b.n	233a6 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   23402:	f386 8811 	msr	BASEPRI, r6
   23406:	f3bf 8f6f 	isb	sy
   2340a:	e7f5      	b.n	233f8 <z_impl_k_mutex_lock+0xd4>
   2340c:	20005ff8 	.word	0x20005ff8
   23410:	20007848 	.word	0x20007848

00023414 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   23414:	6883      	ldr	r3, [r0, #8]
{
   23416:	b570      	push	{r4, r5, r6, lr}
   23418:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   2341a:	b36b      	cbz	r3, 23478 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2341c:	4a19      	ldr	r2, [pc, #100]	; (23484 <z_impl_k_mutex_unlock+0x70>)
   2341e:	6892      	ldr	r2, [r2, #8]
   23420:	4293      	cmp	r3, r2
   23422:	d12c      	bne.n	2347e <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   23424:	68c3      	ldr	r3, [r0, #12]
   23426:	2b01      	cmp	r3, #1
   23428:	d903      	bls.n	23432 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   2342a:	3b01      	subs	r3, #1
   2342c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   2342e:	2000      	movs	r0, #0
}
   23430:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   23432:	f04f 0340 	mov.w	r3, #64	; 0x40
   23436:	f3ef 8511 	mrs	r5, BASEPRI
   2343a:	f383 8812 	msr	BASEPRI_MAX, r3
   2343e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   23442:	6901      	ldr	r1, [r0, #16]
   23444:	6880      	ldr	r0, [r0, #8]
   23446:	f009 ffc8 	bl	2d3da <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2344a:	4620      	mov	r0, r4
   2344c:	f00a fa7f 	bl	2d94e <z_unpend_first_thread>
	mutex->owner = new_owner;
   23450:	2600      	movs	r6, #0
   23452:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   23454:	b150      	cbz	r0, 2346c <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   23456:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2345a:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2345c:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   2345e:	f00a fa05 	bl	2d86c <z_ready_thread>
		z_reschedule(&lock, key);
   23462:	4809      	ldr	r0, [pc, #36]	; (23488 <z_impl_k_mutex_unlock+0x74>)
   23464:	4629      	mov	r1, r5
   23466:	f000 fabb 	bl	239e0 <z_reschedule>
   2346a:	e7e0      	b.n	2342e <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   2346c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2346e:	f385 8811 	msr	BASEPRI, r5
   23472:	f3bf 8f6f 	isb	sy
   23476:	e7da      	b.n	2342e <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   23478:	f06f 0015 	mvn.w	r0, #21
   2347c:	e7d8      	b.n	23430 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   2347e:	f04f 30ff 	mov.w	r0, #4294967295
   23482:	e7d5      	b.n	23430 <z_impl_k_mutex_unlock+0x1c>
   23484:	20005ff8 	.word	0x20005ff8
   23488:	20007848 	.word	0x20007848

0002348c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   2348c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2348e:	4611      	mov	r1, r2
	__asm__ volatile(
   23490:	f04f 0240 	mov.w	r2, #64	; 0x40
   23494:	f3ef 8511 	mrs	r5, BASEPRI
   23498:	f382 8812 	msr	BASEPRI_MAX, r2
   2349c:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   234a0:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   234a2:	b19c      	cbz	r4, 234cc <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   234a4:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   234a6:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   234a8:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   234ac:	4294      	cmp	r4, r2
	list->head = node;
   234ae:	6003      	str	r3, [r0, #0]
	list->tail = node;
   234b0:	bf08      	it	eq
   234b2:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   234b4:	2101      	movs	r1, #1
   234b6:	4620      	mov	r0, r4
   234b8:	f00a f802 	bl	2d4c0 <z_queue_node_peek>
   234bc:	4604      	mov	r4, r0
	__asm__ volatile(
   234be:	f385 8811 	msr	BASEPRI, r5
   234c2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   234c6:	4620      	mov	r0, r4
   234c8:	b003      	add	sp, #12
   234ca:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   234cc:	ea51 0203 	orrs.w	r2, r1, r3
   234d0:	d0f5      	beq.n	234be <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   234d2:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   234d6:	e9cd 1300 	strd	r1, r3, [sp]
   234da:	4610      	mov	r0, r2
   234dc:	4629      	mov	r1, r5
   234de:	f000 fbd3 	bl	23c88 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   234e2:	2800      	cmp	r0, #0
   234e4:	d1ef      	bne.n	234c6 <z_impl_k_queue_get+0x3a>
   234e6:	4b02      	ldr	r3, [pc, #8]	; (234f0 <z_impl_k_queue_get+0x64>)
   234e8:	689b      	ldr	r3, [r3, #8]
   234ea:	695c      	ldr	r4, [r3, #20]
   234ec:	e7eb      	b.n	234c6 <z_impl_k_queue_get+0x3a>
   234ee:	bf00      	nop
   234f0:	20005ff8 	.word	0x20005ff8

000234f4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   234f4:	b538      	push	{r3, r4, r5, lr}
   234f6:	4604      	mov	r4, r0
	__asm__ volatile(
   234f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   234fc:	f3ef 8511 	mrs	r5, BASEPRI
   23500:	f383 8812 	msr	BASEPRI_MAX, r3
   23504:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   23508:	f00a fa21 	bl	2d94e <z_unpend_first_thread>

	if (thread != NULL) {
   2350c:	b148      	cbz	r0, 23522 <z_impl_k_sem_give+0x2e>
   2350e:	2200      	movs	r2, #0
   23510:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   23512:	f00a f9ab 	bl	2d86c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   23516:	4629      	mov	r1, r5
   23518:	4808      	ldr	r0, [pc, #32]	; (2353c <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   2351a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2351e:	f000 ba5f 	b.w	239e0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   23522:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   23526:	429a      	cmp	r2, r3
   23528:	bf18      	it	ne
   2352a:	3301      	addne	r3, #1
   2352c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2352e:	2102      	movs	r1, #2
   23530:	f104 0010 	add.w	r0, r4, #16
   23534:	f00a fc1d 	bl	2dd72 <z_handle_obj_poll_events>
}
   23538:	e7ed      	b.n	23516 <z_impl_k_sem_give+0x22>
   2353a:	bf00      	nop
   2353c:	20007848 	.word	0x20007848

00023540 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   23540:	b513      	push	{r0, r1, r4, lr}
   23542:	f04f 0440 	mov.w	r4, #64	; 0x40
   23546:	f3ef 8111 	mrs	r1, BASEPRI
   2354a:	f384 8812 	msr	BASEPRI_MAX, r4
   2354e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   23552:	6884      	ldr	r4, [r0, #8]
   23554:	b144      	cbz	r4, 23568 <z_impl_k_sem_take+0x28>
		sem->count--;
   23556:	3c01      	subs	r4, #1
   23558:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   2355a:	f381 8811 	msr	BASEPRI, r1
   2355e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   23562:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   23564:	b002      	add	sp, #8
   23566:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23568:	ea52 0403 	orrs.w	r4, r2, r3
   2356c:	d106      	bne.n	2357c <z_impl_k_sem_take+0x3c>
   2356e:	f381 8811 	msr	BASEPRI, r1
   23572:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   23576:	f06f 000f 	mvn.w	r0, #15
   2357a:	e7f3      	b.n	23564 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2357c:	e9cd 2300 	strd	r2, r3, [sp]
   23580:	4602      	mov	r2, r0
   23582:	4802      	ldr	r0, [pc, #8]	; (2358c <z_impl_k_sem_take+0x4c>)
   23584:	f000 fb80 	bl	23c88 <z_pend_curr>
	return ret;
   23588:	e7ec      	b.n	23564 <z_impl_k_sem_take+0x24>
   2358a:	bf00      	nop
   2358c:	20007848 	.word	0x20007848

00023590 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   23590:	b570      	push	{r4, r5, r6, lr}
   23592:	4604      	mov	r4, r0
	__asm__ volatile(
   23594:	f04f 0340 	mov.w	r3, #64	; 0x40
   23598:	f3ef 8511 	mrs	r5, BASEPRI
   2359c:	f383 8812 	msr	BASEPRI_MAX, r3
   235a0:	f3bf 8f6f 	isb	sy
   235a4:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   235a8:	4620      	mov	r0, r4
   235aa:	f00a f9d0 	bl	2d94e <z_unpend_first_thread>
		if (thread == NULL) {
   235ae:	b118      	cbz	r0, 235b8 <z_impl_k_sem_reset+0x28>
   235b0:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   235b2:	f00a f95b 	bl	2d86c <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   235b6:	e7f7      	b.n	235a8 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   235b8:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   235ba:	2102      	movs	r1, #2
   235bc:	f104 0010 	add.w	r0, r4, #16
   235c0:	f00a fbd7 	bl	2dd72 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   235c4:	4629      	mov	r1, r5
   235c6:	4802      	ldr	r0, [pc, #8]	; (235d0 <z_impl_k_sem_reset+0x40>)
}
   235c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   235cc:	f000 ba08 	b.w	239e0 <z_reschedule>
   235d0:	20007848 	.word	0x20007848

000235d4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   235d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   235d6:	4b09      	ldr	r3, [pc, #36]	; (235fc <k_sys_work_q_init+0x28>)
   235d8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   235da:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   235dc:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   235de:	9300      	str	r3, [sp, #0]
   235e0:	4907      	ldr	r1, [pc, #28]	; (23600 <k_sys_work_q_init+0x2c>)
   235e2:	4808      	ldr	r0, [pc, #32]	; (23604 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   235e4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   235e8:	f04f 33ff 	mov.w	r3, #4294967295
   235ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
   235f0:	f000 f914 	bl	2381c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   235f4:	4620      	mov	r0, r4
   235f6:	b004      	add	sp, #16
   235f8:	bd10      	pop	{r4, pc}
   235fa:	bf00      	nop
   235fc:	00031e13 	.word	0x00031e13
   23600:	20009a10 	.word	0x20009a10
   23604:	200025a8 	.word	0x200025a8

00023608 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   23608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   2360c:	4e47      	ldr	r6, [pc, #284]	; (2372c <work_queue_main+0x124>)
   2360e:	b085      	sub	sp, #20
   23610:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   23612:	f04f 38ff 	mov.w	r8, #4294967295
   23616:	f04f 39ff 	mov.w	r9, #4294967295
   2361a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2361e:	f3ef 8711 	mrs	r7, BASEPRI
   23622:	f383 8812 	msr	BASEPRI_MAX, r3
   23626:	f3bf 8f6f 	isb	sy
   2362a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   2362e:	b98d      	cbnz	r5, 23654 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   23630:	2102      	movs	r1, #2
   23632:	f104 0098 	add.w	r0, r4, #152	; 0x98
   23636:	f009 ffbc 	bl	2d5b2 <flag_test_and_clear>
   2363a:	2800      	cmp	r0, #0
   2363c:	d135      	bne.n	236aa <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   2363e:	2300      	movs	r3, #0
   23640:	e9cd 8900 	strd	r8, r9, [sp]
   23644:	9302      	str	r3, [sp, #8]
   23646:	f104 0288 	add.w	r2, r4, #136	; 0x88
   2364a:	4639      	mov	r1, r7
   2364c:	4838      	ldr	r0, [pc, #224]	; (23730 <work_queue_main+0x128>)
   2364e:	f000 fcf3 	bl	24038 <z_sched_wait>
			continue;
   23652:	e7e2      	b.n	2361a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23654:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   23658:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   2365a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2365e:	4295      	cmp	r5, r2
   23660:	d101      	bne.n	23666 <work_queue_main+0x5e>
	list->tail = node;
   23662:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   23666:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2366a:	f043 0302 	orr.w	r3, r3, #2
   2366e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   23672:	68eb      	ldr	r3, [r5, #12]
   23674:	f023 0304 	bic.w	r3, r3, #4
   23678:	f043 0301 	orr.w	r3, r3, #1
   2367c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   2367e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   23680:	f387 8811 	msr	BASEPRI, r7
   23684:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   23688:	4628      	mov	r0, r5
   2368a:	4798      	blx	r3
	__asm__ volatile(
   2368c:	f04f 0340 	mov.w	r3, #64	; 0x40
   23690:	f3ef 8b11 	mrs	fp, BASEPRI
   23694:	f383 8812 	msr	BASEPRI_MAX, r3
   23698:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   2369c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2369e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   236a0:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   236a4:	d40b      	bmi.n	236be <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   236a6:	60ea      	str	r2, [r5, #12]
   236a8:	e00e      	b.n	236c8 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   236aa:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   236ae:	2200      	movs	r2, #0
   236b0:	2101      	movs	r1, #1
   236b2:	4628      	mov	r0, r5
   236b4:	f00a f973 	bl	2d99e <z_sched_wake>
   236b8:	2800      	cmp	r0, #0
   236ba:	d1f8      	bne.n	236ae <work_queue_main+0xa6>
   236bc:	e7bf      	b.n	2363e <work_queue_main+0x36>
	return list->head;
   236be:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   236c0:	f023 0303 	bic.w	r3, r3, #3
   236c4:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   236c6:	b970      	cbnz	r0, 236e6 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   236c8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   236cc:	f023 0302 	bic.w	r3, r3, #2
   236d0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   236d4:	f38b 8811 	msr	BASEPRI, fp
   236d8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   236dc:	05d8      	lsls	r0, r3, #23
   236de:	d49c      	bmi.n	2361a <work_queue_main+0x12>
	z_impl_k_yield();
   236e0:	f000 fb88 	bl	23df4 <z_impl_k_yield>
}
   236e4:	e799      	b.n	2361a <work_queue_main+0x12>
	return node->next;
   236e6:	2700      	movs	r7, #0
   236e8:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   236ec:	463b      	mov	r3, r7
		if (wc->work == work) {
   236ee:	6842      	ldr	r2, [r0, #4]
   236f0:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   236f2:	4601      	mov	r1, r0
		if (wc->work == work) {
   236f4:	d10c      	bne.n	23710 <work_queue_main+0x108>
	return node->next;
   236f6:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   236f8:	b997      	cbnz	r7, 23720 <work_queue_main+0x118>
   236fa:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   236fc:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   236fe:	4282      	cmp	r2, r0
   23700:	d100      	bne.n	23704 <work_queue_main+0xfc>
	list->tail = node;
   23702:	6071      	str	r1, [r6, #4]
	parent->next = child;
   23704:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   23708:	f7ff fef4 	bl	234f4 <z_impl_k_sem_give>
}
   2370c:	4639      	mov	r1, r7
   2370e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   23710:	f1ba 0f00 	cmp.w	sl, #0
   23714:	d0d8      	beq.n	236c8 <work_queue_main+0xc0>
	return node->next;
   23716:	4650      	mov	r0, sl
   23718:	460f      	mov	r7, r1
   2371a:	f8da a000 	ldr.w	sl, [sl]
   2371e:	e7e6      	b.n	236ee <work_queue_main+0xe6>
	return list->tail;
   23720:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   23722:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   23724:	4290      	cmp	r0, r2
	list->tail = node;
   23726:	bf08      	it	eq
   23728:	6077      	streq	r7, [r6, #4]
}
   2372a:	e7eb      	b.n	23704 <work_queue_main+0xfc>
   2372c:	20006020 	.word	0x20006020
   23730:	20007848 	.word	0x20007848

00023734 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   23734:	68c3      	ldr	r3, [r0, #12]
{
   23736:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   23738:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   2373c:	079b      	lsls	r3, r3, #30
{
   2373e:	4605      	mov	r5, r0
   23740:	460c      	mov	r4, r1
	if (ret) {
   23742:	d50d      	bpl.n	23760 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   23744:	2201      	movs	r2, #1
   23746:	2100      	movs	r1, #0
   23748:	f104 0008 	add.w	r0, r4, #8
   2374c:	f009 ff21 	bl	2d592 <z_impl_k_sem_init>
	parent->next = child;
   23750:	2300      	movs	r3, #0
   23752:	6023      	str	r3, [r4, #0]
	return list->tail;
   23754:	4b05      	ldr	r3, [pc, #20]	; (2376c <cancel_sync_locked+0x38>)
	canceler->work = work;
   23756:	6065      	str	r5, [r4, #4]
   23758:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   2375a:	b91a      	cbnz	r2, 23764 <cancel_sync_locked+0x30>
	list->head = node;
   2375c:	e9c3 4400 	strd	r4, r4, [r3]
}
   23760:	4630      	mov	r0, r6
   23762:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   23764:	6014      	str	r4, [r2, #0]
	list->tail = node;
   23766:	605c      	str	r4, [r3, #4]
}
   23768:	e7fa      	b.n	23760 <cancel_sync_locked+0x2c>
   2376a:	bf00      	nop
   2376c:	20006020 	.word	0x20006020

00023770 <submit_to_queue_locked>:
{
   23770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   23772:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   23774:	079a      	lsls	r2, r3, #30
{
   23776:	4604      	mov	r4, r0
   23778:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2377a:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2377e:	d41f      	bmi.n	237c0 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   23780:	075f      	lsls	r7, r3, #29
   23782:	d41f      	bmi.n	237c4 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   23784:	680a      	ldr	r2, [r1, #0]
   23786:	b90a      	cbnz	r2, 2378c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   23788:	6882      	ldr	r2, [r0, #8]
   2378a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   2378c:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   2378e:	bf44      	itt	mi
   23790:	68a3      	ldrmi	r3, [r4, #8]
   23792:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   23794:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   23796:	bf4c      	ite	mi
   23798:	2502      	movmi	r5, #2
		ret = 1;
   2379a:	2501      	movpl	r5, #1
	if (queue == NULL) {
   2379c:	b37f      	cbz	r7, 237fe <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2379e:	4b1b      	ldr	r3, [pc, #108]	; (2380c <submit_to_queue_locked+0x9c>)
   237a0:	689b      	ldr	r3, [r3, #8]
   237a2:	42bb      	cmp	r3, r7
   237a4:	d111      	bne.n	237ca <submit_to_queue_locked+0x5a>
   237a6:	f009 fe04 	bl	2d3b2 <k_is_in_isr>
   237aa:	f080 0001 	eor.w	r0, r0, #1
   237ae:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   237b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   237b4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   237b6:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   237ba:	d523      	bpl.n	23804 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   237bc:	b13a      	cbz	r2, 237ce <submit_to_queue_locked+0x5e>
   237be:	b940      	cbnz	r0, 237d2 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   237c0:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   237c4:	2300      	movs	r3, #0
   237c6:	6033      	str	r3, [r6, #0]
	return ret;
   237c8:	e013      	b.n	237f2 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   237ca:	2000      	movs	r0, #0
   237cc:	e7f0      	b.n	237b0 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   237ce:	071b      	lsls	r3, r3, #28
   237d0:	d4f6      	bmi.n	237c0 <submit_to_queue_locked+0x50>
	parent->next = child;
   237d2:	2300      	movs	r3, #0
   237d4:	6023      	str	r3, [r4, #0]
	return list->tail;
   237d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   237da:	b963      	cbnz	r3, 237f6 <submit_to_queue_locked+0x86>
	list->head = node;
   237dc:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   237e0:	4638      	mov	r0, r7
   237e2:	f009 feff 	bl	2d5e4 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   237e6:	68e3      	ldr	r3, [r4, #12]
   237e8:	f043 0304 	orr.w	r3, r3, #4
   237ec:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   237ee:	6833      	ldr	r3, [r6, #0]
   237f0:	60a3      	str	r3, [r4, #8]
}
   237f2:	4628      	mov	r0, r5
   237f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   237f6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   237f8:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   237fc:	e7f0      	b.n	237e0 <submit_to_queue_locked+0x70>
		return -EINVAL;
   237fe:	f06f 0515 	mvn.w	r5, #21
   23802:	e7df      	b.n	237c4 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   23804:	f06f 0512 	mvn.w	r5, #18
   23808:	e7dc      	b.n	237c4 <submit_to_queue_locked+0x54>
   2380a:	bf00      	nop
   2380c:	20005ff8 	.word	0x20005ff8

00023810 <k_work_submit>:
{
   23810:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   23812:	4801      	ldr	r0, [pc, #4]	; (23818 <k_work_submit+0x8>)
   23814:	f009 bf6a 	b.w	2d6ec <k_work_submit_to_queue>
   23818:	200025a8 	.word	0x200025a8

0002381c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   2381c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2381e:	b089      	sub	sp, #36	; 0x24
   23820:	4604      	mov	r4, r0
	list->head = NULL;
   23822:	2000      	movs	r0, #0
	list->tail = NULL;
   23824:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   23828:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2382a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   2382e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   23832:	f104 0090 	add.w	r0, r4, #144	; 0x90
   23836:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   2383a:	b31d      	cbz	r5, 23884 <k_work_queue_start+0x68>
   2383c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   2383e:	2800      	cmp	r0, #0
   23840:	f240 1001 	movw	r0, #257	; 0x101
   23844:	bf08      	it	eq
   23846:	2001      	moveq	r0, #1
	*flagp = flags;
   23848:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2384c:	2000      	movs	r0, #0
   2384e:	f04f 36ff 	mov.w	r6, #4294967295
   23852:	f04f 37ff 	mov.w	r7, #4294967295
   23856:	e9cd 3003 	strd	r3, r0, [sp, #12]
   2385a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2385e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   23862:	4b09      	ldr	r3, [pc, #36]	; (23888 <k_work_queue_start+0x6c>)
   23864:	9400      	str	r4, [sp, #0]
   23866:	4620      	mov	r0, r4
   23868:	f7ff fcb8 	bl	231dc <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   2386c:	b125      	cbz	r5, 23878 <k_work_queue_start+0x5c>
   2386e:	6829      	ldr	r1, [r5, #0]
   23870:	b111      	cbz	r1, 23878 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   23872:	4620      	mov	r0, r4
   23874:	f009 fda3 	bl	2d3be <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   23878:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   2387a:	b009      	add	sp, #36	; 0x24
   2387c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   23880:	f009 bda2 	b.w	2d3c8 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   23884:	2001      	movs	r0, #1
   23886:	e7df      	b.n	23848 <k_work_queue_start+0x2c>
   23888:	00023609 	.word	0x00023609

0002388c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   2388c:	b513      	push	{r0, r1, r4, lr}
   2388e:	9001      	str	r0, [sp, #4]
   23890:	4608      	mov	r0, r1
	__asm__ volatile(
   23892:	f04f 0140 	mov.w	r1, #64	; 0x40
   23896:	f3ef 8411 	mrs	r4, BASEPRI
   2389a:	f381 8812 	msr	BASEPRI_MAX, r1
   2389e:	f3bf 8f6f 	isb	sy
	return *flagp;
   238a2:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   238a4:	f011 0f0e 	tst.w	r1, #14
   238a8:	d116      	bne.n	238d8 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   238aa:	ea53 0c02 	orrs.w	ip, r3, r2
   238ae:	d108      	bne.n	238c2 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   238b0:	a901      	add	r1, sp, #4
   238b2:	f7ff ff5d 	bl	23770 <submit_to_queue_locked>
	__asm__ volatile(
   238b6:	f384 8811 	msr	BASEPRI, r4
   238ba:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   238be:	b002      	add	sp, #8
   238c0:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   238c2:	f041 0108 	orr.w	r1, r1, #8
   238c6:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   238c8:	9901      	ldr	r1, [sp, #4]
   238ca:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   238cc:	3010      	adds	r0, #16
   238ce:	4903      	ldr	r1, [pc, #12]	; (238dc <k_work_schedule_for_queue+0x50>)
   238d0:	f000 fc28 	bl	24124 <z_add_timeout>
	return ret;
   238d4:	2001      	movs	r0, #1
   238d6:	e7ee      	b.n	238b6 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   238d8:	2000      	movs	r0, #0
   238da:	e7ec      	b.n	238b6 <k_work_schedule_for_queue+0x2a>
   238dc:	0002d655 	.word	0x0002d655

000238e0 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   238e0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   238e2:	4801      	ldr	r0, [pc, #4]	; (238e8 <k_work_schedule+0x8>)
   238e4:	f7ff bfd2 	b.w	2388c <k_work_schedule_for_queue>
   238e8:	200025a8 	.word	0x200025a8

000238ec <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   238ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   238ee:	460c      	mov	r4, r1
   238f0:	9001      	str	r0, [sp, #4]
   238f2:	4616      	mov	r6, r2
   238f4:	461d      	mov	r5, r3
	__asm__ volatile(
   238f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   238fa:	f3ef 8711 	mrs	r7, BASEPRI
   238fe:	f383 8812 	msr	BASEPRI_MAX, r3
   23902:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   23906:	4608      	mov	r0, r1
   23908:	f009 fe5e 	bl	2d5c8 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2390c:	ea55 0306 	orrs.w	r3, r5, r6
   23910:	d109      	bne.n	23926 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   23912:	a901      	add	r1, sp, #4
   23914:	4620      	mov	r0, r4
   23916:	f7ff ff2b 	bl	23770 <submit_to_queue_locked>
	__asm__ volatile(
   2391a:	f387 8811 	msr	BASEPRI, r7
   2391e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   23922:	b003      	add	sp, #12
   23924:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   23926:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   23928:	4906      	ldr	r1, [pc, #24]	; (23944 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   2392a:	f043 0308 	orr.w	r3, r3, #8
   2392e:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   23930:	9b01      	ldr	r3, [sp, #4]
   23932:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   23934:	f104 0010 	add.w	r0, r4, #16
   23938:	4632      	mov	r2, r6
   2393a:	462b      	mov	r3, r5
   2393c:	f000 fbf2 	bl	24124 <z_add_timeout>
	return ret;
   23940:	2001      	movs	r0, #1
   23942:	e7ea      	b.n	2391a <k_work_reschedule_for_queue+0x2e>
   23944:	0002d655 	.word	0x0002d655

00023948 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   23948:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   2394a:	4801      	ldr	r0, [pc, #4]	; (23950 <k_work_reschedule+0x8>)
   2394c:	f7ff bfce 	b.w	238ec <k_work_reschedule_for_queue>
   23950:	200025a8 	.word	0x200025a8

00023954 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   23954:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   23956:	4d07      	ldr	r5, [pc, #28]	; (23974 <z_reset_time_slice+0x20>)
   23958:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   2395a:	b154      	cbz	r4, 23972 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   2395c:	f7fd fa54 	bl	20e08 <sys_clock_elapsed>
   23960:	4b05      	ldr	r3, [pc, #20]	; (23978 <z_reset_time_slice+0x24>)
   23962:	4404      	add	r4, r0
   23964:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   23966:	6828      	ldr	r0, [r5, #0]
   23968:	2100      	movs	r1, #0
	}
}
   2396a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   2396e:	f00a b859 	b.w	2da24 <z_set_timeout_expiry>
}
   23972:	bd38      	pop	{r3, r4, r5, pc}
   23974:	20006030 	.word	0x20006030
   23978:	20005ff8 	.word	0x20005ff8

0002397c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   2397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2397e:	4604      	mov	r4, r0
   23980:	460d      	mov	r5, r1
	__asm__ volatile(
   23982:	f04f 0340 	mov.w	r3, #64	; 0x40
   23986:	f3ef 8711 	mrs	r7, BASEPRI
   2398a:	f383 8812 	msr	BASEPRI_MAX, r3
   2398e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   23992:	4e10      	ldr	r6, [pc, #64]	; (239d4 <k_sched_time_slice_set+0x58>)
   23994:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   23996:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   2399a:	f240 30e7 	movw	r0, #999	; 0x3e7
   2399e:	6131      	str	r1, [r6, #16]
   239a0:	2300      	movs	r3, #0
   239a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   239a6:	fbe4 010c 	umlal	r0, r1, r4, ip
   239aa:	f7dd fbe1 	bl	1170 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   239ae:	2c00      	cmp	r4, #0
   239b0:	4b09      	ldr	r3, [pc, #36]	; (239d8 <k_sched_time_slice_set+0x5c>)
   239b2:	dc0a      	bgt.n	239ca <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   239b4:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   239b6:	4b09      	ldr	r3, [pc, #36]	; (239dc <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   239b8:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   239ba:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   239bc:	f7ff ffca 	bl	23954 <z_reset_time_slice>
	__asm__ volatile(
   239c0:	f387 8811 	msr	BASEPRI, r7
   239c4:	f3bf 8f6f 	isb	sy
	}
}
   239c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   239ca:	2802      	cmp	r0, #2
   239cc:	bfb8      	it	lt
   239ce:	2002      	movlt	r0, #2
   239d0:	e7f0      	b.n	239b4 <k_sched_time_slice_set+0x38>
   239d2:	bf00      	nop
   239d4:	20005ff8 	.word	0x20005ff8
   239d8:	20006030 	.word	0x20006030
   239dc:	2000602c 	.word	0x2000602c

000239e0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   239e0:	b949      	cbnz	r1, 239f6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   239e2:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   239e6:	b930      	cbnz	r0, 239f6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   239e8:	4b05      	ldr	r3, [pc, #20]	; (23a00 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   239ea:	69da      	ldr	r2, [r3, #28]
   239ec:	689b      	ldr	r3, [r3, #8]
   239ee:	429a      	cmp	r2, r3
   239f0:	d001      	beq.n	239f6 <z_reschedule+0x16>
	ret = arch_swap(key);
   239f2:	f7f2 be21 	b.w	16638 <arch_swap>
   239f6:	f381 8811 	msr	BASEPRI, r1
   239fa:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   239fe:	4770      	bx	lr
   23a00:	20005ff8 	.word	0x20005ff8

00023a04 <k_sched_lock>:
	__asm__ volatile(
   23a04:	f04f 0340 	mov.w	r3, #64	; 0x40
   23a08:	f3ef 8111 	mrs	r1, BASEPRI
   23a0c:	f383 8812 	msr	BASEPRI_MAX, r3
   23a10:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   23a14:	4b04      	ldr	r3, [pc, #16]	; (23a28 <k_sched_lock+0x24>)
   23a16:	689a      	ldr	r2, [r3, #8]
   23a18:	7bd3      	ldrb	r3, [r2, #15]
   23a1a:	3b01      	subs	r3, #1
   23a1c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   23a1e:	f381 8811 	msr	BASEPRI, r1
   23a22:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   23a26:	4770      	bx	lr
   23a28:	20005ff8 	.word	0x20005ff8

00023a2c <update_cache>:
{
   23a2c:	b538      	push	{r3, r4, r5, lr}
   23a2e:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   23a30:	480c      	ldr	r0, [pc, #48]	; (23a64 <update_cache+0x38>)
   23a32:	4d0d      	ldr	r5, [pc, #52]	; (23a68 <update_cache+0x3c>)
   23a34:	f009 ff14 	bl	2d860 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   23a38:	4604      	mov	r4, r0
   23a3a:	b900      	cbnz	r0, 23a3e <update_cache+0x12>
   23a3c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   23a3e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   23a40:	b94a      	cbnz	r2, 23a56 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   23a42:	7b5a      	ldrb	r2, [r3, #13]
   23a44:	06d2      	lsls	r2, r2, #27
   23a46:	d106      	bne.n	23a56 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   23a48:	69a2      	ldr	r2, [r4, #24]
   23a4a:	b922      	cbnz	r2, 23a56 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   23a4c:	89da      	ldrh	r2, [r3, #14]
   23a4e:	2a7f      	cmp	r2, #127	; 0x7f
   23a50:	d901      	bls.n	23a56 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   23a52:	61eb      	str	r3, [r5, #28]
}
   23a54:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   23a56:	429c      	cmp	r4, r3
   23a58:	d002      	beq.n	23a60 <update_cache+0x34>
			z_reset_time_slice(thread);
   23a5a:	4620      	mov	r0, r4
   23a5c:	f7ff ff7a 	bl	23954 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   23a60:	61ec      	str	r4, [r5, #28]
}
   23a62:	e7f7      	b.n	23a54 <update_cache+0x28>
   23a64:	20006018 	.word	0x20006018
   23a68:	20005ff8 	.word	0x20005ff8

00023a6c <move_thread_to_end_of_prio_q>:
{
   23a6c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   23a6e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   23a72:	7b43      	ldrb	r3, [r0, #13]
   23a74:	2a00      	cmp	r2, #0
{
   23a76:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   23a78:	da04      	bge.n	23a84 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23a7e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   23a80:	f009 fe99 	bl	2d7b6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   23a84:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   23a86:	4a15      	ldr	r2, [pc, #84]	; (23adc <move_thread_to_end_of_prio_q+0x70>)
   23a88:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23a8c:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   23a8e:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23a92:	f102 0520 	add.w	r5, r2, #32
   23a96:	42ab      	cmp	r3, r5
   23a98:	d01b      	beq.n	23ad2 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23a9a:	b1d3      	cbz	r3, 23ad2 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   23a9c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   23aa0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   23aa4:	4286      	cmp	r6, r0
   23aa6:	d00f      	beq.n	23ac8 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   23aa8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   23aaa:	2800      	cmp	r0, #0
   23aac:	dd0c      	ble.n	23ac8 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   23aae:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   23ab0:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   23ab4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   23ab6:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   23ab8:	6890      	ldr	r0, [r2, #8]
   23aba:	1a43      	subs	r3, r0, r1
   23abc:	4258      	negs	r0, r3
}
   23abe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   23ac2:	4158      	adcs	r0, r3
   23ac4:	f7ff bfb2 	b.w	23a2c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   23ac8:	42a3      	cmp	r3, r4
   23aca:	d002      	beq.n	23ad2 <move_thread_to_end_of_prio_q+0x66>
   23acc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23ace:	2b00      	cmp	r3, #0
   23ad0:	d1e6      	bne.n	23aa0 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   23ad2:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   23ad6:	6021      	str	r1, [r4, #0]
	list->tail = node;
   23ad8:	6251      	str	r1, [r2, #36]	; 0x24
}
   23ada:	e7ed      	b.n	23ab8 <move_thread_to_end_of_prio_q+0x4c>
   23adc:	20005ff8 	.word	0x20005ff8

00023ae0 <z_time_slice>:
{
   23ae0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   23ae2:	f04f 0340 	mov.w	r3, #64	; 0x40
   23ae6:	f3ef 8511 	mrs	r5, BASEPRI
   23aea:	f383 8812 	msr	BASEPRI_MAX, r3
   23aee:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   23af2:	4b17      	ldr	r3, [pc, #92]	; (23b50 <z_time_slice+0x70>)
   23af4:	4a17      	ldr	r2, [pc, #92]	; (23b54 <z_time_slice+0x74>)
   23af6:	689c      	ldr	r4, [r3, #8]
   23af8:	6811      	ldr	r1, [r2, #0]
   23afa:	428c      	cmp	r4, r1
   23afc:	d107      	bne.n	23b0e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   23afe:	4620      	mov	r0, r4
   23b00:	f7ff ff28 	bl	23954 <z_reset_time_slice>
	__asm__ volatile(
   23b04:	f385 8811 	msr	BASEPRI, r5
   23b08:	f3bf 8f6f 	isb	sy
}
   23b0c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   23b0e:	2100      	movs	r1, #0
   23b10:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   23b12:	4a11      	ldr	r2, [pc, #68]	; (23b58 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   23b14:	6812      	ldr	r2, [r2, #0]
   23b16:	b1c2      	cbz	r2, 23b4a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   23b18:	89e2      	ldrh	r2, [r4, #14]
   23b1a:	2a7f      	cmp	r2, #127	; 0x7f
   23b1c:	d815      	bhi.n	23b4a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   23b1e:	7b62      	ldrb	r2, [r4, #13]
   23b20:	06d2      	lsls	r2, r2, #27
   23b22:	d112      	bne.n	23b4a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   23b24:	4a0d      	ldr	r2, [pc, #52]	; (23b5c <z_time_slice+0x7c>)
   23b26:	f994 100e 	ldrsb.w	r1, [r4, #14]
   23b2a:	6812      	ldr	r2, [r2, #0]
   23b2c:	4291      	cmp	r1, r2
   23b2e:	db0c      	blt.n	23b4a <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
   23b30:	4a0b      	ldr	r2, [pc, #44]	; (23b60 <z_time_slice+0x80>)
   23b32:	4294      	cmp	r4, r2
   23b34:	d009      	beq.n	23b4a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   23b36:	691a      	ldr	r2, [r3, #16]
   23b38:	4282      	cmp	r2, r0
   23b3a:	dc03      	bgt.n	23b44 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   23b3c:	4620      	mov	r0, r4
   23b3e:	f7ff ff95 	bl	23a6c <move_thread_to_end_of_prio_q>
   23b42:	e7dc      	b.n	23afe <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   23b44:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   23b46:	611a      	str	r2, [r3, #16]
   23b48:	e7dc      	b.n	23b04 <z_time_slice+0x24>
   23b4a:	2200      	movs	r2, #0
   23b4c:	e7fb      	b.n	23b46 <z_time_slice+0x66>
   23b4e:	bf00      	nop
   23b50:	20005ff8 	.word	0x20005ff8
   23b54:	20006028 	.word	0x20006028
   23b58:	20006030 	.word	0x20006030
   23b5c:	2000602c 	.word	0x2000602c
   23b60:	200024a8 	.word	0x200024a8

00023b64 <ready_thread>:
{
   23b64:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   23b66:	f990 200d 	ldrsb.w	r2, [r0, #13]
   23b6a:	7b43      	ldrb	r3, [r0, #13]
   23b6c:	2a00      	cmp	r2, #0
   23b6e:	db2a      	blt.n	23bc6 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23b70:	06da      	lsls	r2, r3, #27
   23b72:	d128      	bne.n	23bc6 <ready_thread+0x62>
   23b74:	6982      	ldr	r2, [r0, #24]
   23b76:	bb32      	cbnz	r2, 23bc6 <ready_thread+0x62>
	return list->head == list;
   23b78:	4a14      	ldr	r2, [pc, #80]	; (23bcc <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   23b7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23b7e:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   23b80:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23b84:	f102 0520 	add.w	r5, r2, #32
   23b88:	42ab      	cmp	r3, r5
   23b8a:	d017      	beq.n	23bbc <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23b8c:	b1b3      	cbz	r3, 23bbc <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   23b8e:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   23b92:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   23b96:	428e      	cmp	r6, r1
   23b98:	d00b      	beq.n	23bb2 <ready_thread+0x4e>
		return b2 - b1;
   23b9a:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   23b9c:	2900      	cmp	r1, #0
   23b9e:	dd08      	ble.n	23bb2 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   23ba0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23ba2:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   23ba6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   23ba8:	6058      	str	r0, [r3, #4]
}
   23baa:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   23bac:	2000      	movs	r0, #0
   23bae:	f7ff bf3d 	b.w	23a2c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   23bb2:	42a3      	cmp	r3, r4
   23bb4:	d002      	beq.n	23bbc <ready_thread+0x58>
   23bb6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23bb8:	2b00      	cmp	r3, #0
   23bba:	d1ea      	bne.n	23b92 <ready_thread+0x2e>
	node->prev = tail;
   23bbc:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   23bc0:	6020      	str	r0, [r4, #0]
	list->tail = node;
   23bc2:	6250      	str	r0, [r2, #36]	; 0x24
}
   23bc4:	e7f1      	b.n	23baa <ready_thread+0x46>
}
   23bc6:	bc70      	pop	{r4, r5, r6}
   23bc8:	4770      	bx	lr
   23bca:	bf00      	nop
   23bcc:	20005ff8 	.word	0x20005ff8

00023bd0 <z_sched_start>:
{
   23bd0:	b510      	push	{r4, lr}
	__asm__ volatile(
   23bd2:	f04f 0240 	mov.w	r2, #64	; 0x40
   23bd6:	f3ef 8411 	mrs	r4, BASEPRI
   23bda:	f382 8812 	msr	BASEPRI_MAX, r2
   23bde:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   23be2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   23be4:	0751      	lsls	r1, r2, #29
   23be6:	d404      	bmi.n	23bf2 <z_sched_start+0x22>
	__asm__ volatile(
   23be8:	f384 8811 	msr	BASEPRI, r4
   23bec:	f3bf 8f6f 	isb	sy
}
   23bf0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   23bf2:	f022 0204 	bic.w	r2, r2, #4
   23bf6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   23bf8:	f7ff ffb4 	bl	23b64 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   23bfc:	4621      	mov	r1, r4
   23bfe:	4802      	ldr	r0, [pc, #8]	; (23c08 <z_sched_start+0x38>)
}
   23c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   23c04:	f7ff beec 	b.w	239e0 <z_reschedule>
   23c08:	20007848 	.word	0x20007848

00023c0c <unready_thread>:
{
   23c0c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   23c0e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   23c12:	7b43      	ldrb	r3, [r0, #13]
   23c14:	2a00      	cmp	r2, #0
{
   23c16:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   23c18:	da04      	bge.n	23c24 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23c1e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   23c20:	f009 fdc9 	bl	2d7b6 <sys_dlist_remove>
	update_cache(thread == _current);
   23c24:	4b04      	ldr	r3, [pc, #16]	; (23c38 <unready_thread+0x2c>)
   23c26:	6898      	ldr	r0, [r3, #8]
   23c28:	1a43      	subs	r3, r0, r1
   23c2a:	4258      	negs	r0, r3
   23c2c:	4158      	adcs	r0, r3
}
   23c2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   23c32:	f7ff befb 	b.w	23a2c <update_cache>
   23c36:	bf00      	nop
   23c38:	20005ff8 	.word	0x20005ff8

00023c3c <pend>:
{
   23c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23c40:	4606      	mov	r6, r0
   23c42:	4615      	mov	r5, r2
   23c44:	461c      	mov	r4, r3
	__asm__ volatile(
   23c46:	f04f 0340 	mov.w	r3, #64	; 0x40
   23c4a:	f3ef 8711 	mrs	r7, BASEPRI
   23c4e:	f383 8812 	msr	BASEPRI_MAX, r3
   23c52:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   23c56:	f009 fe3b 	bl	2d8d0 <add_to_waitq_locked>
	__asm__ volatile(
   23c5a:	f387 8811 	msr	BASEPRI, r7
   23c5e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23c62:	f1b4 3fff 	cmp.w	r4, #4294967295
   23c66:	bf08      	it	eq
   23c68:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   23c6c:	d008      	beq.n	23c80 <pend+0x44>
   23c6e:	462a      	mov	r2, r5
   23c70:	4623      	mov	r3, r4
   23c72:	f106 0018 	add.w	r0, r6, #24
   23c76:	4903      	ldr	r1, [pc, #12]	; (23c84 <pend+0x48>)
}
   23c78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23c7c:	f000 ba52 	b.w	24124 <z_add_timeout>
   23c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23c84:	0002d88d 	.word	0x0002d88d

00023c88 <z_pend_curr>:
{
   23c88:	b510      	push	{r4, lr}
	pending_current = _current;
   23c8a:	4b07      	ldr	r3, [pc, #28]	; (23ca8 <z_pend_curr+0x20>)
   23c8c:	6898      	ldr	r0, [r3, #8]
   23c8e:	4b07      	ldr	r3, [pc, #28]	; (23cac <z_pend_curr+0x24>)
{
   23c90:	460c      	mov	r4, r1
	pending_current = _current;
   23c92:	6018      	str	r0, [r3, #0]
{
   23c94:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   23c96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   23c9a:	f7ff ffcf 	bl	23c3c <pend>
   23c9e:	4620      	mov	r0, r4
}
   23ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23ca4:	f7f2 bcc8 	b.w	16638 <arch_swap>
   23ca8:	20005ff8 	.word	0x20005ff8
   23cac:	20006028 	.word	0x20006028

00023cb0 <z_set_prio>:
{
   23cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23cb2:	4604      	mov	r4, r0
	__asm__ volatile(
   23cb4:	f04f 0340 	mov.w	r3, #64	; 0x40
   23cb8:	f3ef 8611 	mrs	r6, BASEPRI
   23cbc:	f383 8812 	msr	BASEPRI_MAX, r3
   23cc0:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   23cc4:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23cc6:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   23cc8:	b249      	sxtb	r1, r1
   23cca:	d133      	bne.n	23d34 <z_set_prio+0x84>
		if (need_sched) {
   23ccc:	6982      	ldr	r2, [r0, #24]
   23cce:	bb8a      	cbnz	r2, 23d34 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23cd4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   23cd6:	f009 fd6e 	bl	2d7b6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   23cda:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   23cdc:	4a17      	ldr	r2, [pc, #92]	; (23d3c <z_set_prio+0x8c>)
				thread->base.prio = prio;
   23cde:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   23ce0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23ce4:	7343      	strb	r3, [r0, #13]
   23ce6:	4610      	mov	r0, r2
   23ce8:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23cec:	4283      	cmp	r3, r0
   23cee:	d01b      	beq.n	23d28 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23cf0:	b1d3      	cbz	r3, 23d28 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   23cf2:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   23cf4:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   23cf8:	42a9      	cmp	r1, r5
   23cfa:	d010      	beq.n	23d1e <z_set_prio+0x6e>
		return b2 - b1;
   23cfc:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   23cfe:	2d00      	cmp	r5, #0
   23d00:	dd0d      	ble.n	23d1e <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   23d02:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23d04:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   23d08:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23d0a:	605c      	str	r4, [r3, #4]
			update_cache(1);
   23d0c:	2001      	movs	r0, #1
   23d0e:	f7ff fe8d 	bl	23a2c <update_cache>
   23d12:	2001      	movs	r0, #1
	__asm__ volatile(
   23d14:	f386 8811 	msr	BASEPRI, r6
   23d18:	f3bf 8f6f 	isb	sy
}
   23d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   23d1e:	42bb      	cmp	r3, r7
   23d20:	d002      	beq.n	23d28 <z_set_prio+0x78>
   23d22:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23d24:	2b00      	cmp	r3, #0
   23d26:	d1e5      	bne.n	23cf4 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   23d28:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   23d2a:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   23d2e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23d30:	6254      	str	r4, [r2, #36]	; 0x24
}
   23d32:	e7eb      	b.n	23d0c <z_set_prio+0x5c>
			thread->base.prio = prio;
   23d34:	73a1      	strb	r1, [r4, #14]
   23d36:	2000      	movs	r0, #0
   23d38:	e7ec      	b.n	23d14 <z_set_prio+0x64>
   23d3a:	bf00      	nop
   23d3c:	20005ff8 	.word	0x20005ff8

00023d40 <z_impl_k_thread_suspend>:
{
   23d40:	b570      	push	{r4, r5, r6, lr}
   23d42:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   23d44:	3018      	adds	r0, #24
   23d46:	f009 fe47 	bl	2d9d8 <z_abort_timeout>
	__asm__ volatile(
   23d4a:	f04f 0340 	mov.w	r3, #64	; 0x40
   23d4e:	f3ef 8611 	mrs	r6, BASEPRI
   23d52:	f383 8812 	msr	BASEPRI_MAX, r3
   23d56:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   23d5a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   23d5e:	7b63      	ldrb	r3, [r4, #13]
   23d60:	2a00      	cmp	r2, #0
   23d62:	da05      	bge.n	23d70 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23d68:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   23d6a:	4620      	mov	r0, r4
   23d6c:	f009 fd23 	bl	2d7b6 <sys_dlist_remove>
		update_cache(thread == _current);
   23d70:	4d0b      	ldr	r5, [pc, #44]	; (23da0 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   23d72:	7b63      	ldrb	r3, [r4, #13]
   23d74:	68a8      	ldr	r0, [r5, #8]
   23d76:	f043 0310 	orr.w	r3, r3, #16
   23d7a:	7363      	strb	r3, [r4, #13]
   23d7c:	1b03      	subs	r3, r0, r4
   23d7e:	4258      	negs	r0, r3
   23d80:	4158      	adcs	r0, r3
   23d82:	f7ff fe53 	bl	23a2c <update_cache>
	__asm__ volatile(
   23d86:	f386 8811 	msr	BASEPRI, r6
   23d8a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   23d8e:	68ab      	ldr	r3, [r5, #8]
   23d90:	42a3      	cmp	r3, r4
   23d92:	d103      	bne.n	23d9c <z_impl_k_thread_suspend+0x5c>
}
   23d94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   23d98:	f009 bd58 	b.w	2d84c <z_reschedule_unlocked>
}
   23d9c:	bd70      	pop	{r4, r5, r6, pc}
   23d9e:	bf00      	nop
   23da0:	20005ff8 	.word	0x20005ff8

00023da4 <k_sched_unlock>:
{
   23da4:	b510      	push	{r4, lr}
	__asm__ volatile(
   23da6:	f04f 0340 	mov.w	r3, #64	; 0x40
   23daa:	f3ef 8411 	mrs	r4, BASEPRI
   23dae:	f383 8812 	msr	BASEPRI_MAX, r3
   23db2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   23db6:	4b08      	ldr	r3, [pc, #32]	; (23dd8 <k_sched_unlock+0x34>)
   23db8:	689a      	ldr	r2, [r3, #8]
   23dba:	7bd3      	ldrb	r3, [r2, #15]
   23dbc:	3301      	adds	r3, #1
   23dbe:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   23dc0:	2000      	movs	r0, #0
   23dc2:	f7ff fe33 	bl	23a2c <update_cache>
	__asm__ volatile(
   23dc6:	f384 8811 	msr	BASEPRI, r4
   23dca:	f3bf 8f6f 	isb	sy
}
   23dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   23dd2:	f009 bd3b 	b.w	2d84c <z_reschedule_unlocked>
   23dd6:	bf00      	nop
   23dd8:	20005ff8 	.word	0x20005ff8

00023ddc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   23ddc:	4b04      	ldr	r3, [pc, #16]	; (23df0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   23dde:	2100      	movs	r1, #0
   23de0:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   23de4:	e9c3 2208 	strd	r2, r2, [r3, #32]
   23de8:	4608      	mov	r0, r1
   23dea:	f7ff bdc7 	b.w	2397c <k_sched_time_slice_set>
   23dee:	bf00      	nop
   23df0:	20005ff8 	.word	0x20005ff8

00023df4 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   23df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   23df6:	f04f 0340 	mov.w	r3, #64	; 0x40
   23dfa:	f3ef 8511 	mrs	r5, BASEPRI
   23dfe:	f383 8812 	msr	BASEPRI_MAX, r3
   23e02:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   23e06:	491a      	ldr	r1, [pc, #104]	; (23e70 <z_impl_k_yield+0x7c>)
   23e08:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23e0a:	7b43      	ldrb	r3, [r0, #13]
   23e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23e10:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   23e12:	f009 fcd0 	bl	2d7b6 <sys_dlist_remove>
	}
	queue_thread(_current);
   23e16:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   23e18:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   23e1a:	4608      	mov	r0, r1
   23e1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   23e20:	735a      	strb	r2, [r3, #13]
   23e22:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23e26:	4282      	cmp	r2, r0
   23e28:	d01c      	beq.n	23e64 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23e2a:	b1da      	cbz	r2, 23e64 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   23e2c:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   23e2e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   23e32:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   23e36:	42a6      	cmp	r6, r4
   23e38:	d00f      	beq.n	23e5a <z_impl_k_yield+0x66>
		return b2 - b1;
   23e3a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   23e3c:	2c00      	cmp	r4, #0
   23e3e:	dd0c      	ble.n	23e5a <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   23e40:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   23e42:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   23e46:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   23e48:	6053      	str	r3, [r2, #4]
	update_cache(1);
   23e4a:	2001      	movs	r0, #1
   23e4c:	f7ff fdee 	bl	23a2c <update_cache>
   23e50:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   23e52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   23e56:	f7f2 bbef 	b.w	16638 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   23e5a:	42ba      	cmp	r2, r7
   23e5c:	d002      	beq.n	23e64 <z_impl_k_yield+0x70>
   23e5e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23e60:	2a00      	cmp	r2, #0
   23e62:	d1e6      	bne.n	23e32 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   23e64:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   23e66:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   23e6a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   23e6c:	624b      	str	r3, [r1, #36]	; 0x24
}
   23e6e:	e7ec      	b.n	23e4a <z_impl_k_yield+0x56>
   23e70:	20005ff8 	.word	0x20005ff8

00023e74 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   23e74:	ea50 0301 	orrs.w	r3, r0, r1
{
   23e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23e7c:	4605      	mov	r5, r0
   23e7e:	460e      	mov	r6, r1
	if (ticks == 0) {
   23e80:	d103      	bne.n	23e8a <z_tick_sleep+0x16>
	z_impl_k_yield();
   23e82:	f7ff ffb7 	bl	23df4 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   23e86:	2000      	movs	r0, #0
   23e88:	e033      	b.n	23ef2 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   23e8a:	f06f 0401 	mvn.w	r4, #1
   23e8e:	1a24      	subs	r4, r4, r0
   23e90:	f04f 33ff 	mov.w	r3, #4294967295
   23e94:	eb63 0301 	sbc.w	r3, r3, r1
   23e98:	2c01      	cmp	r4, #1
   23e9a:	f173 0300 	sbcs.w	r3, r3, #0
   23e9e:	da02      	bge.n	23ea6 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   23ea0:	f009 fdda 	bl	2da58 <sys_clock_tick_get_32>
   23ea4:	1944      	adds	r4, r0, r5
   23ea6:	f04f 0340 	mov.w	r3, #64	; 0x40
   23eaa:	f3ef 8811 	mrs	r8, BASEPRI
   23eae:	f383 8812 	msr	BASEPRI_MAX, r3
   23eb2:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   23eb6:	4f10      	ldr	r7, [pc, #64]	; (23ef8 <z_tick_sleep+0x84>)
   23eb8:	4b10      	ldr	r3, [pc, #64]	; (23efc <z_tick_sleep+0x88>)
   23eba:	68b8      	ldr	r0, [r7, #8]
   23ebc:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   23ebe:	f7ff fea5 	bl	23c0c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   23ec2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   23ec4:	490e      	ldr	r1, [pc, #56]	; (23f00 <z_tick_sleep+0x8c>)
   23ec6:	462a      	mov	r2, r5
   23ec8:	4633      	mov	r3, r6
   23eca:	3018      	adds	r0, #24
   23ecc:	f000 f92a 	bl	24124 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   23ed0:	68ba      	ldr	r2, [r7, #8]
   23ed2:	7b53      	ldrb	r3, [r2, #13]
   23ed4:	f043 0310 	orr.w	r3, r3, #16
   23ed8:	7353      	strb	r3, [r2, #13]
   23eda:	4640      	mov	r0, r8
   23edc:	f7f2 fbac 	bl	16638 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   23ee0:	f009 fdba 	bl	2da58 <sys_clock_tick_get_32>
   23ee4:	1a20      	subs	r0, r4, r0
   23ee6:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   23eea:	2801      	cmp	r0, #1
   23eec:	f173 0300 	sbcs.w	r3, r3, #0
   23ef0:	dbc9      	blt.n	23e86 <z_tick_sleep+0x12>
}
   23ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23ef6:	bf00      	nop
   23ef8:	20005ff8 	.word	0x20005ff8
   23efc:	20006028 	.word	0x20006028
   23f00:	0002d88d 	.word	0x0002d88d

00023f04 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23f04:	f1b1 3fff 	cmp.w	r1, #4294967295
   23f08:	bf08      	it	eq
   23f0a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   23f0e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23f10:	d106      	bne.n	23f20 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   23f12:	4b08      	ldr	r3, [pc, #32]	; (23f34 <z_impl_k_sleep+0x30>)
   23f14:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   23f16:	f7ff ff13 	bl	23d40 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   23f1a:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   23f1e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   23f20:	f7ff ffa8 	bl	23e74 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   23f24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   23f28:	fb80 0303 	smull	r0, r3, r0, r3
   23f2c:	0bc0      	lsrs	r0, r0, #15
   23f2e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   23f32:	e7f4      	b.n	23f1e <z_impl_k_sleep+0x1a>
   23f34:	20005ff8 	.word	0x20005ff8

00023f38 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
   23f38:	b538      	push	{r3, r4, r5, lr}
   23f3a:	4604      	mov	r4, r0
   23f3c:	4809      	ldr	r0, [pc, #36]	; (23f64 <z_impl_k_usleep+0x2c>)
   23f3e:	4a0a      	ldr	r2, [pc, #40]	; (23f68 <z_impl_k_usleep+0x30>)
   23f40:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   23f44:	2100      	movs	r1, #0
   23f46:	2300      	movs	r3, #0
   23f48:	fbc4 0105 	smlal	r0, r1, r4, r5
   23f4c:	f7dd f910 	bl	1170 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
   23f50:	17c1      	asrs	r1, r0, #31
   23f52:	f7ff ff8f 	bl	23e74 <z_tick_sleep>
   23f56:	4b04      	ldr	r3, [pc, #16]	; (23f68 <z_impl_k_usleep+0x30>)
   23f58:	fb80 3003 	smull	r3, r0, r0, r3
   23f5c:	0bdb      	lsrs	r3, r3, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
   23f5e:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
   23f62:	bd38      	pop	{r3, r4, r5, pc}
   23f64:	000f423f 	.word	0x000f423f
   23f68:	000f4240 	.word	0x000f4240

00023f6c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   23f6c:	4b01      	ldr	r3, [pc, #4]	; (23f74 <z_impl_z_current_get+0x8>)
   23f6e:	6898      	ldr	r0, [r3, #8]
   23f70:	4770      	bx	lr
   23f72:	bf00      	nop
   23f74:	20005ff8 	.word	0x20005ff8

00023f78 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   23f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23f7c:	4604      	mov	r4, r0
   23f7e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23f82:	f3ef 8611 	mrs	r6, BASEPRI
   23f86:	f383 8812 	msr	BASEPRI_MAX, r3
   23f8a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   23f8e:	7b03      	ldrb	r3, [r0, #12]
   23f90:	07d9      	lsls	r1, r3, #31
   23f92:	d50b      	bpl.n	23fac <z_thread_abort+0x34>
	__asm__ volatile(
   23f94:	f386 8811 	msr	BASEPRI, r6
   23f98:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   23f9c:	4040      	eors	r0, r0
   23f9e:	f380 8811 	msr	BASEPRI, r0
   23fa2:	f04f 0004 	mov.w	r0, #4
   23fa6:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   23fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   23fac:	7b43      	ldrb	r3, [r0, #13]
   23fae:	071a      	lsls	r2, r3, #28
   23fb0:	d504      	bpl.n	23fbc <z_thread_abort+0x44>
   23fb2:	f386 8811 	msr	BASEPRI, r6
   23fb6:	f3bf 8f6f 	isb	sy
   23fba:	e7f5      	b.n	23fa8 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   23fbc:	f023 0220 	bic.w	r2, r3, #32
   23fc0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   23fc4:	09d2      	lsrs	r2, r2, #7
   23fc6:	d120      	bne.n	2400a <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   23fc8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   23fca:	68a3      	ldr	r3, [r4, #8]
   23fcc:	b113      	cbz	r3, 23fd4 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   23fce:	4620      	mov	r0, r4
   23fd0:	f009 fbf9 	bl	2d7c6 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   23fd4:	f104 0018 	add.w	r0, r4, #24
   23fd8:	f009 fcfe 	bl	2d9d8 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   23fdc:	f104 0758 	add.w	r7, r4, #88	; 0x58
   23fe0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   23fe4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23fe6:	42bd      	cmp	r5, r7
   23fe8:	d000      	beq.n	23fec <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   23fea:	b9b5      	cbnz	r5, 2401a <z_thread_abort+0xa2>
		update_cache(1);
   23fec:	2001      	movs	r0, #1
   23fee:	f7ff fd1d 	bl	23a2c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   23ff2:	4b10      	ldr	r3, [pc, #64]	; (24034 <z_thread_abort+0xbc>)
   23ff4:	689b      	ldr	r3, [r3, #8]
   23ff6:	42a3      	cmp	r3, r4
   23ff8:	d1db      	bne.n	23fb2 <z_thread_abort+0x3a>
   23ffa:	f3ef 8305 	mrs	r3, IPSR
   23ffe:	2b00      	cmp	r3, #0
   24000:	d1d7      	bne.n	23fb2 <z_thread_abort+0x3a>
   24002:	4630      	mov	r0, r6
   24004:	f7f2 fb18 	bl	16638 <arch_swap>
	return ret;
   24008:	e7d3      	b.n	23fb2 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2400a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   2400e:	f043 0308 	orr.w	r3, r3, #8
   24012:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   24014:	f009 fbcf 	bl	2d7b6 <sys_dlist_remove>
}
   24018:	e7d7      	b.n	23fca <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   2401a:	4628      	mov	r0, r5
   2401c:	f009 fbd3 	bl	2d7c6 <unpend_thread_no_timeout>
   24020:	f105 0018 	add.w	r0, r5, #24
   24024:	f009 fcd8 	bl	2d9d8 <z_abort_timeout>
   24028:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   2402c:	4628      	mov	r0, r5
   2402e:	f7ff fd99 	bl	23b64 <ready_thread>
   24032:	e7d7      	b.n	23fe4 <z_thread_abort+0x6c>
   24034:	20005ff8 	.word	0x20005ff8

00024038 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   24038:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2403a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   2403e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   24040:	e9cd 6700 	strd	r6, r7, [sp]
   24044:	f7ff fe20 	bl	23c88 <z_pend_curr>

	if (data != NULL) {
   24048:	b11c      	cbz	r4, 24052 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2404a:	4b03      	ldr	r3, [pc, #12]	; (24058 <z_sched_wait+0x20>)
   2404c:	689b      	ldr	r3, [r3, #8]
   2404e:	695b      	ldr	r3, [r3, #20]
   24050:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   24052:	b002      	add	sp, #8
   24054:	bdd0      	pop	{r4, r6, r7, pc}
   24056:	bf00      	nop
   24058:	20005ff8 	.word	0x20005ff8

0002405c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   2405c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   2405e:	4806      	ldr	r0, [pc, #24]	; (24078 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   24060:	4a06      	ldr	r2, [pc, #24]	; (2407c <z_data_copy+0x20>)
   24062:	4907      	ldr	r1, [pc, #28]	; (24080 <z_data_copy+0x24>)
   24064:	1a12      	subs	r2, r2, r0
   24066:	f009 f8f8 	bl	2d25a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2406a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   2406e:	4a05      	ldr	r2, [pc, #20]	; (24084 <z_data_copy+0x28>)
   24070:	4905      	ldr	r1, [pc, #20]	; (24088 <z_data_copy+0x2c>)
   24072:	4806      	ldr	r0, [pc, #24]	; (2408c <z_data_copy+0x30>)
   24074:	f009 b8f1 	b.w	2d25a <z_early_memcpy>
   24078:	20000000 	.word	0x20000000
   2407c:	20000d34 	.word	0x20000d34
   24080:	00031f88 	.word	0x00031f88
   24084:	00000000 	.word	0x00000000
   24088:	00031f88 	.word	0x00031f88
   2408c:	20000000 	.word	0x20000000

00024090 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   24090:	4b03      	ldr	r3, [pc, #12]	; (240a0 <elapsed+0x10>)
   24092:	681b      	ldr	r3, [r3, #0]
   24094:	b90b      	cbnz	r3, 2409a <elapsed+0xa>
   24096:	f7fc beb7 	b.w	20e08 <sys_clock_elapsed>
}
   2409a:	2000      	movs	r0, #0
   2409c:	4770      	bx	lr
   2409e:	bf00      	nop
   240a0:	20006034 	.word	0x20006034

000240a4 <next_timeout>:
	return list->head == list;
   240a4:	4b10      	ldr	r3, [pc, #64]	; (240e8 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   240a6:	b510      	push	{r4, lr}
   240a8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   240aa:	429c      	cmp	r4, r3
   240ac:	bf08      	it	eq
   240ae:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   240b0:	f7ff ffee 	bl	24090 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   240b4:	b1a4      	cbz	r4, 240e0 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   240b6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   240ba:	1a1b      	subs	r3, r3, r0
   240bc:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   240c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   240c4:	f170 0200 	sbcs.w	r2, r0, #0
   240c8:	da0a      	bge.n	240e0 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   240ca:	2800      	cmp	r0, #0
   240cc:	bfac      	ite	ge
   240ce:	4618      	movge	r0, r3
   240d0:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   240d2:	4b06      	ldr	r3, [pc, #24]	; (240ec <next_timeout+0x48>)
   240d4:	691b      	ldr	r3, [r3, #16]
   240d6:	b113      	cbz	r3, 240de <next_timeout+0x3a>
   240d8:	4298      	cmp	r0, r3
   240da:	bfa8      	it	ge
   240dc:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   240de:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   240e0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   240e4:	e7f5      	b.n	240d2 <next_timeout+0x2e>
   240e6:	bf00      	nop
   240e8:	20000870 	.word	0x20000870
   240ec:	20005ff8 	.word	0x20005ff8

000240f0 <remove_timeout>:
{
   240f0:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   240f2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   240f4:	b168      	cbz	r0, 24112 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   240f6:	4a0a      	ldr	r2, [pc, #40]	; (24120 <remove_timeout+0x30>)
   240f8:	6852      	ldr	r2, [r2, #4]
   240fa:	4290      	cmp	r0, r2
   240fc:	d009      	beq.n	24112 <remove_timeout+0x22>
	if (next(t) != NULL) {
   240fe:	b143      	cbz	r3, 24112 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   24100:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   24104:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   24108:	1912      	adds	r2, r2, r4
   2410a:	eb41 0105 	adc.w	r1, r1, r5
   2410e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   24112:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   24114:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24116:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24118:	2300      	movs	r3, #0
	node->prev = NULL;
   2411a:	e9c0 3300 	strd	r3, r3, [r0]
}
   2411e:	bd30      	pop	{r4, r5, pc}
   24120:	20000870 	.word	0x20000870

00024124 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24124:	f1b3 3fff 	cmp.w	r3, #4294967295
   24128:	bf08      	it	eq
   2412a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2412e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24130:	4604      	mov	r4, r0
   24132:	461f      	mov	r7, r3
   24134:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24136:	d067      	beq.n	24208 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   24138:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   2413a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2413e:	f3ef 8611 	mrs	r6, BASEPRI
   24142:	f383 8812 	msr	BASEPRI_MAX, r3
   24146:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   2414a:	f06f 0201 	mvn.w	r2, #1
   2414e:	1b53      	subs	r3, r2, r5
   24150:	f04f 3cff 	mov.w	ip, #4294967295
   24154:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   24158:	2b00      	cmp	r3, #0
   2415a:	db1b      	blt.n	24194 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2415c:	4b2b      	ldr	r3, [pc, #172]	; (2420c <z_add_timeout+0xe8>)
   2415e:	e9d3 1300 	ldrd	r1, r3, [r3]
   24162:	1a52      	subs	r2, r2, r1
   24164:	eb6c 0303 	sbc.w	r3, ip, r3
   24168:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   2416a:	eb63 0307 	sbc.w	r3, r3, r7
   2416e:	2d01      	cmp	r5, #1
   24170:	f173 0200 	sbcs.w	r2, r3, #0
   24174:	bfbc      	itt	lt
   24176:	2501      	movlt	r5, #1
   24178:	2300      	movlt	r3, #0
   2417a:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   2417e:	4824      	ldr	r0, [pc, #144]	; (24210 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   24180:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24184:	4283      	cmp	r3, r0
   24186:	d118      	bne.n	241ba <z_add_timeout+0x96>
	node->prev = tail;
   24188:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   2418c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   24190:	6044      	str	r4, [r0, #4]
}
   24192:	e026      	b.n	241e2 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   24194:	f7ff ff7c 	bl	24090 <elapsed>
   24198:	3501      	adds	r5, #1
   2419a:	f147 0700 	adc.w	r7, r7, #0
   2419e:	182d      	adds	r5, r5, r0
   241a0:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   241a4:	e9c4 5704 	strd	r5, r7, [r4, #16]
   241a8:	e7e9      	b.n	2417e <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   241aa:	1a52      	subs	r2, r2, r1
   241ac:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   241b0:	459c      	cmp	ip, r3
   241b2:	e9c4 2504 	strd	r2, r5, [r4, #16]
   241b6:	d0e7      	beq.n	24188 <z_add_timeout+0x64>
   241b8:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   241ba:	2b00      	cmp	r3, #0
   241bc:	d0e4      	beq.n	24188 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   241be:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   241c2:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   241c6:	428a      	cmp	r2, r1
   241c8:	eb75 0e07 	sbcs.w	lr, r5, r7
   241cc:	daed      	bge.n	241aa <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   241ce:	1a8a      	subs	r2, r1, r2
   241d0:	eb67 0505 	sbc.w	r5, r7, r5
   241d4:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   241d8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   241da:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   241de:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   241e0:	605c      	str	r4, [r3, #4]
	return list->head == list;
   241e2:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   241e4:	4283      	cmp	r3, r0
   241e6:	d00b      	beq.n	24200 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   241e8:	429c      	cmp	r4, r3
   241ea:	d109      	bne.n	24200 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   241ec:	f7ff ff5a 	bl	240a4 <next_timeout>

			if (next_time == 0 ||
   241f0:	b118      	cbz	r0, 241fa <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   241f2:	4b08      	ldr	r3, [pc, #32]	; (24214 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   241f4:	691b      	ldr	r3, [r3, #16]
   241f6:	4283      	cmp	r3, r0
   241f8:	d002      	beq.n	24200 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   241fa:	2100      	movs	r1, #0
   241fc:	f7fc fdd2 	bl	20da4 <sys_clock_set_timeout>
	__asm__ volatile(
   24200:	f386 8811 	msr	BASEPRI, r6
   24204:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   24208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2420a:	bf00      	nop
   2420c:	20002648 	.word	0x20002648
   24210:	20000870 	.word	0x20000870
   24214:	20005ff8 	.word	0x20005ff8

00024218 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   24218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2421c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2421e:	f7ff fc5f 	bl	23ae0 <z_time_slice>
	__asm__ volatile(
   24222:	f04f 0340 	mov.w	r3, #64	; 0x40
   24226:	f3ef 8511 	mrs	r5, BASEPRI
   2422a:	f383 8812 	msr	BASEPRI_MAX, r3
   2422e:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   24232:	4f24      	ldr	r7, [pc, #144]	; (242c4 <sys_clock_announce+0xac>)
	return list->head == list;
   24234:	f8df 8090 	ldr.w	r8, [pc, #144]	; 242c8 <sys_clock_announce+0xb0>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   24238:	4e24      	ldr	r6, [pc, #144]	; (242cc <sys_clock_announce+0xb4>)
	announce_remaining = ticks;
   2423a:	603c      	str	r4, [r7, #0]
   2423c:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   24240:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24242:	4540      	cmp	r0, r8
		curr_tick += dt;
   24244:	e9d6 2e00 	ldrd	r2, lr, [r6]
   24248:	ea4f 71e3 	mov.w	r1, r3, asr #31
   2424c:	d00b      	beq.n	24266 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   2424e:	b150      	cbz	r0, 24266 <sys_clock_announce+0x4e>
   24250:	e9d0 4c04 	ldrd	r4, ip, [r0, #16]
   24254:	42a3      	cmp	r3, r4
   24256:	eb71 090c 	sbcs.w	r9, r1, ip
   2425a:	da16      	bge.n	2428a <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2425c:	1ae4      	subs	r4, r4, r3
   2425e:	eb6c 0c01 	sbc.w	ip, ip, r1
   24262:	e9c0 4c04 	strd	r4, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   24266:	189b      	adds	r3, r3, r2
   24268:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
   2426c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2426e:	e9c6 3100 	strd	r3, r1, [r6]
	announce_remaining = 0;
   24272:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   24274:	f7ff ff16 	bl	240a4 <next_timeout>
   24278:	4621      	mov	r1, r4
   2427a:	f7fc fd93 	bl	20da4 <sys_clock_set_timeout>
	__asm__ volatile(
   2427e:	f385 8811 	msr	BASEPRI, r5
   24282:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   24286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   2428a:	18a2      	adds	r2, r4, r2
   2428c:	eb4e 71e4 	adc.w	r1, lr, r4, asr #31
   24290:	e9c6 2100 	strd	r2, r1, [r6]
		t->dticks = 0;
   24294:	2300      	movs	r3, #0
   24296:	2200      	movs	r2, #0
   24298:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   2429c:	f7ff ff28 	bl	240f0 <remove_timeout>
   242a0:	f385 8811 	msr	BASEPRI, r5
   242a4:	f3bf 8f6f 	isb	sy
		t->fn(t);
   242a8:	6883      	ldr	r3, [r0, #8]
   242aa:	4798      	blx	r3
	__asm__ volatile(
   242ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   242b0:	f3ef 8511 	mrs	r5, BASEPRI
   242b4:	f383 8812 	msr	BASEPRI_MAX, r3
   242b8:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   242bc:	683b      	ldr	r3, [r7, #0]
   242be:	1b1b      	subs	r3, r3, r4
   242c0:	603b      	str	r3, [r7, #0]
   242c2:	e7bb      	b.n	2423c <sys_clock_announce+0x24>
   242c4:	20006034 	.word	0x20006034
   242c8:	20000870 	.word	0x20000870
   242cc:	20002648 	.word	0x20002648

000242d0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   242d0:	b510      	push	{r4, lr}
   242d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   242d6:	f3ef 8411 	mrs	r4, BASEPRI
   242da:	f383 8812 	msr	BASEPRI_MAX, r3
   242de:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   242e2:	f7ff fed5 	bl	24090 <elapsed>
   242e6:	4b06      	ldr	r3, [pc, #24]	; (24300 <sys_clock_tick_get+0x30>)
   242e8:	4601      	mov	r1, r0
   242ea:	e9d3 0300 	ldrd	r0, r3, [r3]
   242ee:	1808      	adds	r0, r1, r0
   242f0:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
	__asm__ volatile(
   242f4:	f384 8811 	msr	BASEPRI, r4
   242f8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   242fc:	bd10      	pop	{r4, pc}
   242fe:	bf00      	nop
   24300:	20002648 	.word	0x20002648

00024304 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   24304:	b570      	push	{r4, r5, r6, lr}
   24306:	4604      	mov	r4, r0
	__asm__ volatile(
   24308:	f04f 0340 	mov.w	r3, #64	; 0x40
   2430c:	f3ef 8511 	mrs	r5, BASEPRI
   24310:	f383 8812 	msr	BASEPRI_MAX, r3
   24314:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   24318:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   2431c:	3301      	adds	r3, #1
   2431e:	f142 0200 	adc.w	r2, r2, #0
   24322:	2b02      	cmp	r3, #2
   24324:	f172 0300 	sbcs.w	r3, r2, #0
   24328:	d322      	bcc.n	24370 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   2432a:	f009 fb99 	bl	2da60 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   2432e:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   24332:	3001      	adds	r0, #1
   24334:	f141 0100 	adc.w	r1, r1, #0
   24338:	18c0      	adds	r0, r0, r3
   2433a:	eb41 0102 	adc.w	r1, r1, r2
   2433e:	2801      	cmp	r0, #1
   24340:	f171 0300 	sbcs.w	r3, r1, #0
   24344:	db32      	blt.n	243ac <z_timer_expiration_handler+0xa8>
   24346:	f009 fb8b 	bl	2da60 <z_impl_k_uptime_ticks>
   2434a:	3001      	adds	r0, #1
   2434c:	f141 0300 	adc.w	r3, r1, #0
   24350:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   24354:	1880      	adds	r0, r0, r2
   24356:	f06f 0201 	mvn.w	r2, #1
   2435a:	eb43 0301 	adc.w	r3, r3, r1
   2435e:	1a12      	subs	r2, r2, r0
   24360:	f04f 31ff 	mov.w	r1, #4294967295
   24364:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24368:	491a      	ldr	r1, [pc, #104]	; (243d4 <z_timer_expiration_handler+0xd0>)
   2436a:	4620      	mov	r0, r4
   2436c:	f7ff feda 	bl	24124 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   24370:	6b23      	ldr	r3, [r4, #48]	; 0x30
   24372:	3301      	adds	r3, #1
   24374:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   24376:	6a23      	ldr	r3, [r4, #32]
   24378:	b173      	cbz	r3, 24398 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   2437a:	f385 8811 	msr	BASEPRI, r5
   2437e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   24382:	6a23      	ldr	r3, [r4, #32]
   24384:	4620      	mov	r0, r4
   24386:	4798      	blx	r3
	__asm__ volatile(
   24388:	f04f 0340 	mov.w	r3, #64	; 0x40
   2438c:	f3ef 8511 	mrs	r5, BASEPRI
   24390:	f383 8812 	msr	BASEPRI_MAX, r3
   24394:	f3bf 8f6f 	isb	sy
	return list->head == list;
   24398:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2439c:	42a6      	cmp	r6, r4
   2439e:	d000      	beq.n	243a2 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   243a0:	b94e      	cbnz	r6, 243b6 <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   243a2:	f385 8811 	msr	BASEPRI, r5
   243a6:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   243aa:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   243ac:	f06f 0201 	mvn.w	r2, #1
   243b0:	f04f 33ff 	mov.w	r3, #4294967295
   243b4:	e7d8      	b.n	24368 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   243b6:	4630      	mov	r0, r6
   243b8:	f009 fa18 	bl	2d7ec <z_unpend_thread_no_timeout>
   243bc:	2300      	movs	r3, #0
   243be:	67f3      	str	r3, [r6, #124]	; 0x7c
   243c0:	f385 8811 	msr	BASEPRI, r5
   243c4:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   243c8:	4630      	mov	r0, r6
}
   243ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   243ce:	f009 ba4d 	b.w	2d86c <z_ready_thread>
   243d2:	bf00      	nop
   243d4:	00024305 	.word	0x00024305

000243d8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   243d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   243dc:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   243de:	f1b3 3fff 	cmp.w	r3, #4294967295
   243e2:	bf08      	it	eq
   243e4:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
   243e8:	4606      	mov	r6, r0
   243ea:	461c      	mov	r4, r3
   243ec:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
   243f0:	4689      	mov	r9, r1
   243f2:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   243f4:	d03e      	beq.n	24474 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   243f6:	f1b0 3fff 	cmp.w	r0, #4294967295
   243fa:	bf08      	it	eq
   243fc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   24400:	4615      	mov	r5, r2
   24402:	4607      	mov	r7, r0
   24404:	d014      	beq.n	24430 <z_impl_k_timer_start+0x58>
   24406:	ea50 0302 	orrs.w	r3, r0, r2
   2440a:	d011      	beq.n	24430 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   2440c:	f06f 0301 	mvn.w	r3, #1
   24410:	1a9b      	subs	r3, r3, r2
   24412:	f04f 33ff 	mov.w	r3, #4294967295
   24416:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   2441a:	2b00      	cmp	r3, #0
   2441c:	da08      	bge.n	24430 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   2441e:	2a02      	cmp	r2, #2
   24420:	f170 0300 	sbcs.w	r3, r0, #0
   24424:	bfbc      	itt	lt
   24426:	2502      	movlt	r5, #2
   24428:	2700      	movlt	r7, #0
   2442a:	3d01      	subs	r5, #1
   2442c:	f147 37ff 	adc.w	r7, r7, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   24430:	f06f 0301 	mvn.w	r3, #1
   24434:	1a5b      	subs	r3, r3, r1
   24436:	f04f 33ff 	mov.w	r3, #4294967295
   2443a:	eb63 0304 	sbc.w	r3, r3, r4
   2443e:	2b00      	cmp	r3, #0
   24440:	da09      	bge.n	24456 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   24442:	2901      	cmp	r1, #1
   24444:	f174 0300 	sbcs.w	r3, r4, #0
   24448:	bfbc      	itt	lt
   2444a:	2101      	movlt	r1, #1
   2444c:	2400      	movlt	r4, #0
   2444e:	f111 39ff 	adds.w	r9, r1, #4294967295
   24452:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   24456:	4630      	mov	r0, r6
   24458:	f009 fabe 	bl	2d9d8 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   2445c:	2300      	movs	r3, #0
   2445e:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
   24460:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24464:	464a      	mov	r2, r9
   24466:	4643      	mov	r3, r8
   24468:	4630      	mov	r0, r6
   2446a:	4903      	ldr	r1, [pc, #12]	; (24478 <z_impl_k_timer_start+0xa0>)
		     duration);
}
   2446c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24470:	f7ff be58 	b.w	24124 <z_add_timeout>
}
   24474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24478:	00024305 	.word	0x00024305

0002447c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   2447c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   24480:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   24482:	4b29      	ldr	r3, [pc, #164]	; (24528 <z_impl_k_poll+0xac>)
   24484:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   24486:	2301      	movs	r3, #1
   24488:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   2448c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   24490:	ea52 0305 	orrs.w	r3, r2, r5
{
   24494:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   24496:	bf0c      	ite	eq
   24498:	2301      	moveq	r3, #1
   2449a:	2300      	movne	r3, #0
   2449c:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   244a0:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   244a2:	f009 fb66 	bl	2db72 <register_events>
   244a6:	4681      	mov	r9, r0
	__asm__ volatile(
   244a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   244ac:	f3ef 8a11 	mrs	sl, BASEPRI
   244b0:	f383 8812 	msr	BASEPRI_MAX, r3
   244b4:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   244b8:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   244bc:	b964      	cbnz	r4, 244d8 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   244be:	4601      	mov	r1, r0
   244c0:	4652      	mov	r2, sl
   244c2:	4640      	mov	r0, r8
   244c4:	f009 fc26 	bl	2dd14 <clear_event_registrations>
	__asm__ volatile(
   244c8:	f38a 8811 	msr	BASEPRI, sl
   244cc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   244d0:	4620      	mov	r0, r4
   244d2:	b002      	add	sp, #8
   244d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   244d8:	2300      	movs	r3, #0
   244da:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   244de:	ea56 0305 	orrs.w	r3, r6, r5
   244e2:	d106      	bne.n	244f2 <z_impl_k_poll+0x76>
   244e4:	f38a 8811 	msr	BASEPRI, sl
   244e8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   244ec:	f06f 040a 	mvn.w	r4, #10
   244f0:	e7ee      	b.n	244d0 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   244f2:	e9cd 6500 	strd	r6, r5, [sp]
   244f6:	4a0d      	ldr	r2, [pc, #52]	; (2452c <z_impl_k_poll+0xb0>)
   244f8:	480d      	ldr	r0, [pc, #52]	; (24530 <z_impl_k_poll+0xb4>)
   244fa:	4651      	mov	r1, sl
   244fc:	f7ff fbc4 	bl	23c88 <z_pend_curr>
   24500:	4604      	mov	r4, r0
	__asm__ volatile(
   24502:	f04f 0340 	mov.w	r3, #64	; 0x40
   24506:	f3ef 8511 	mrs	r5, BASEPRI
   2450a:	f383 8812 	msr	BASEPRI_MAX, r3
   2450e:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   24512:	462a      	mov	r2, r5
   24514:	4649      	mov	r1, r9
   24516:	4640      	mov	r0, r8
   24518:	f009 fbfc 	bl	2dd14 <clear_event_registrations>
	__asm__ volatile(
   2451c:	f385 8811 	msr	BASEPRI, r5
   24520:	f3bf 8f6f 	isb	sy
	return swap_rc;
   24524:	e7d4      	b.n	244d0 <z_impl_k_poll+0x54>
   24526:	bf00      	nop
   24528:	20005ff8 	.word	0x20005ff8
   2452c:	20000878 	.word	0x20000878
   24530:	20007848 	.word	0x20007848

00024534 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   24534:	b538      	push	{r3, r4, r5, lr}
   24536:	4603      	mov	r3, r0
	__asm__ volatile(
   24538:	f04f 0240 	mov.w	r2, #64	; 0x40
   2453c:	f3ef 8511 	mrs	r5, BASEPRI
   24540:	f382 8812 	msr	BASEPRI_MAX, r2
   24544:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   24548:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   2454a:	2101      	movs	r1, #1
   2454c:	6081      	str	r1, [r0, #8]
	return list->head == list;
   2454e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   24550:	4283      	cmp	r3, r0
   24552:	d106      	bne.n	24562 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   24554:	f385 8811 	msr	BASEPRI, r5
   24558:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   2455c:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   2455e:	4620      	mov	r0, r4
   24560:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   24562:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   24566:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24568:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2456a:	2300      	movs	r3, #0
	node->prev = NULL;
   2456c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24570:	f009 fb76 	bl	2dc60 <signal_poll_event>
	z_reschedule(&lock, key);
   24574:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24576:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   24578:	4801      	ldr	r0, [pc, #4]	; (24580 <z_impl_k_poll_signal_raise+0x4c>)
   2457a:	f7ff fa31 	bl	239e0 <z_reschedule>
	return rc;
   2457e:	e7ee      	b.n	2455e <z_impl_k_poll_signal_raise+0x2a>
   24580:	20007848 	.word	0x20007848

00024584 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   24584:	b573      	push	{r0, r1, r4, r5, r6, lr}
   24586:	4606      	mov	r6, r0
   24588:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2458a:	f008 ff12 	bl	2d3b2 <k_is_in_isr>
   2458e:	b978      	cbnz	r0, 245b0 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   24590:	4b0b      	ldr	r3, [pc, #44]	; (245c0 <z_thread_aligned_alloc+0x3c>)
   24592:	689b      	ldr	r3, [r3, #8]
   24594:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   24596:	b17c      	cbz	r4, 245b8 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   24598:	1d2a      	adds	r2, r5, #4
   2459a:	d209      	bcs.n	245b0 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2459c:	2000      	movs	r0, #0
   2459e:	2100      	movs	r1, #0
   245a0:	e9cd 0100 	strd	r0, r1, [sp]
   245a4:	f046 0104 	orr.w	r1, r6, #4
   245a8:	4620      	mov	r0, r4
   245aa:	f008 fe60 	bl	2d26e <k_heap_aligned_alloc>
	if (mem == NULL) {
   245ae:	b908      	cbnz	r0, 245b4 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   245b0:	2400      	movs	r4, #0
	}

	return ret;
   245b2:	e001      	b.n	245b8 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   245b4:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   245b6:	1d04      	adds	r4, r0, #4
}
   245b8:	4620      	mov	r0, r4
   245ba:	b002      	add	sp, #8
   245bc:	bd70      	pop	{r4, r5, r6, pc}
   245be:	bf00      	nop
   245c0:	20005ff8 	.word	0x20005ff8

000245c4 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   245c4:	4a02      	ldr	r2, [pc, #8]	; (245d0 <boot_banner+0xc>)
   245c6:	4903      	ldr	r1, [pc, #12]	; (245d4 <boot_banner+0x10>)
   245c8:	4803      	ldr	r0, [pc, #12]	; (245d8 <boot_banner+0x14>)
   245ca:	f004 bf95 	b.w	294f8 <printk>
   245ce:	bf00      	nop
   245d0:	0002f6bf 	.word	0x0002f6bf
   245d4:	00031e1c 	.word	0x00031e1c
   245d8:	00031e2b 	.word	0x00031e2b

000245dc <ocrypto_ecdh_p256_public_key>:
   245dc:	b530      	push	{r4, r5, lr}
   245de:	b099      	sub	sp, #100	; 0x64
   245e0:	4605      	mov	r5, r0
   245e2:	4668      	mov	r0, sp
   245e4:	f000 f828 	bl	24638 <ocrypto_sc_p256_from32bytes>
   245e8:	4669      	mov	r1, sp
   245ea:	4604      	mov	r4, r0
   245ec:	a808      	add	r0, sp, #32
   245ee:	f000 fa53 	bl	24a98 <ocrypto_curve_p256_scalarmult_base>
   245f2:	a908      	add	r1, sp, #32
   245f4:	4304      	orrs	r4, r0
   245f6:	4628      	mov	r0, r5
   245f8:	f000 f98a 	bl	24910 <ocrypto_curve_p256_to64bytes>
   245fc:	4620      	mov	r0, r4
   245fe:	b019      	add	sp, #100	; 0x64
   24600:	bd30      	pop	{r4, r5, pc}
   24602:	bf00      	nop

00024604 <ocrypto_ecdh_p256_common_secret>:
   24604:	b570      	push	{r4, r5, r6, lr}
   24606:	b098      	sub	sp, #96	; 0x60
   24608:	4605      	mov	r5, r0
   2460a:	4668      	mov	r0, sp
   2460c:	4616      	mov	r6, r2
   2460e:	f000 f813 	bl	24638 <ocrypto_sc_p256_from32bytes>
   24612:	4631      	mov	r1, r6
   24614:	4604      	mov	r4, r0
   24616:	a808      	add	r0, sp, #32
   24618:	f000 f946 	bl	248a8 <ocrypto_curve_p256_from64bytes>
   2461c:	a908      	add	r1, sp, #32
   2461e:	466a      	mov	r2, sp
   24620:	4304      	orrs	r4, r0
   24622:	4608      	mov	r0, r1
   24624:	f000 f982 	bl	2492c <ocrypto_curve_p256_scalarmult>
   24628:	a908      	add	r1, sp, #32
   2462a:	4304      	orrs	r4, r0
   2462c:	4628      	mov	r0, r5
   2462e:	f000 f96d 	bl	2490c <ocrypto_curve_p256_to32bytes>
   24632:	4620      	mov	r0, r4
   24634:	b018      	add	sp, #96	; 0x60
   24636:	bd70      	pop	{r4, r5, r6, pc}

00024638 <ocrypto_sc_p256_from32bytes>:
   24638:	b570      	push	{r4, r5, r6, lr}
   2463a:	680b      	ldr	r3, [r1, #0]
   2463c:	4e12      	ldr	r6, [pc, #72]	; (24688 <ocrypto_sc_p256_from32bytes+0x50>)
   2463e:	ba1b      	rev	r3, r3
   24640:	61c3      	str	r3, [r0, #28]
   24642:	684b      	ldr	r3, [r1, #4]
   24644:	ba1b      	rev	r3, r3
   24646:	6183      	str	r3, [r0, #24]
   24648:	688b      	ldr	r3, [r1, #8]
   2464a:	ba1b      	rev	r3, r3
   2464c:	6143      	str	r3, [r0, #20]
   2464e:	68cb      	ldr	r3, [r1, #12]
   24650:	ba1b      	rev	r3, r3
   24652:	6103      	str	r3, [r0, #16]
   24654:	690b      	ldr	r3, [r1, #16]
   24656:	ba1b      	rev	r3, r3
   24658:	60c3      	str	r3, [r0, #12]
   2465a:	694b      	ldr	r3, [r1, #20]
   2465c:	ba1b      	rev	r3, r3
   2465e:	6083      	str	r3, [r0, #8]
   24660:	698b      	ldr	r3, [r1, #24]
   24662:	ba1b      	rev	r3, r3
   24664:	6043      	str	r3, [r0, #4]
   24666:	69cb      	ldr	r3, [r1, #28]
   24668:	ba1b      	rev	r3, r3
   2466a:	4632      	mov	r2, r6
   2466c:	6003      	str	r3, [r0, #0]
   2466e:	4601      	mov	r1, r0
   24670:	4604      	mov	r4, r0
   24672:	f7dc fdb7 	bl	11e4 <ocrypto_bigint_sub256>
   24676:	4631      	mov	r1, r6
   24678:	4605      	mov	r5, r0
   2467a:	4602      	mov	r2, r0
   2467c:	4620      	mov	r0, r4
   2467e:	f7dc fdd1 	bl	1224 <ocrypto_bigint_cadd256>
   24682:	1e68      	subs	r0, r5, #1
   24684:	bd70      	pop	{r4, r5, r6, pc}
   24686:	bf00      	nop
   24688:	0002f338 	.word	0x0002f338

0002468c <p256_zdblu>:
   2468c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24690:	b088      	sub	sp, #32
   24692:	460c      	mov	r4, r1
   24694:	4606      	mov	r6, r0
   24696:	f102 0120 	add.w	r1, r2, #32
   2469a:	4668      	mov	r0, sp
   2469c:	f106 0720 	add.w	r7, r6, #32
   246a0:	4690      	mov	r8, r2
   246a2:	f7dd f8a9 	bl	17f8 <ocrypto_mod_p256_sqr>
   246a6:	466a      	mov	r2, sp
   246a8:	4669      	mov	r1, sp
   246aa:	4668      	mov	r0, sp
   246ac:	f7dc ffb6 	bl	161c <ocrypto_mod_p256_add>
   246b0:	4669      	mov	r1, sp
   246b2:	4638      	mov	r0, r7
   246b4:	f7dd f8a0 	bl	17f8 <ocrypto_mod_p256_sqr>
   246b8:	463a      	mov	r2, r7
   246ba:	4639      	mov	r1, r7
   246bc:	4638      	mov	r0, r7
   246be:	f104 0520 	add.w	r5, r4, #32
   246c2:	f7dc ffab 	bl	161c <ocrypto_mod_p256_add>
   246c6:	466a      	mov	r2, sp
   246c8:	4669      	mov	r1, sp
   246ca:	4668      	mov	r0, sp
   246cc:	f7dc ffa6 	bl	161c <ocrypto_mod_p256_add>
   246d0:	4641      	mov	r1, r8
   246d2:	4628      	mov	r0, r5
   246d4:	f7dd f890 	bl	17f8 <ocrypto_mod_p256_sqr>
   246d8:	466a      	mov	r2, sp
   246da:	4641      	mov	r1, r8
   246dc:	4630      	mov	r0, r6
   246de:	f7dd f873 	bl	17c8 <ocrypto_mod_p256_mul>
   246e2:	462a      	mov	r2, r5
   246e4:	4629      	mov	r1, r5
   246e6:	4668      	mov	r0, sp
   246e8:	f7dc ff98 	bl	161c <ocrypto_mod_p256_add>
   246ec:	462a      	mov	r2, r5
   246ee:	4669      	mov	r1, sp
   246f0:	4668      	mov	r0, sp
   246f2:	f7dc ff93 	bl	161c <ocrypto_mod_p256_add>
   246f6:	4a12      	ldr	r2, [pc, #72]	; (24740 <p256_zdblu+0xb4>)
   246f8:	4669      	mov	r1, sp
   246fa:	4668      	mov	r0, sp
   246fc:	f7dc ff8e 	bl	161c <ocrypto_mod_p256_add>
   24700:	4669      	mov	r1, sp
   24702:	4620      	mov	r0, r4
   24704:	f7dd f878 	bl	17f8 <ocrypto_mod_p256_sqr>
   24708:	4632      	mov	r2, r6
   2470a:	4621      	mov	r1, r4
   2470c:	4620      	mov	r0, r4
   2470e:	f7dc ffc3 	bl	1698 <ocrypto_mod_p256_sub>
   24712:	4632      	mov	r2, r6
   24714:	4621      	mov	r1, r4
   24716:	4620      	mov	r0, r4
   24718:	f7dc ffbe 	bl	1698 <ocrypto_mod_p256_sub>
   2471c:	4622      	mov	r2, r4
   2471e:	4631      	mov	r1, r6
   24720:	4628      	mov	r0, r5
   24722:	f7dc ffb9 	bl	1698 <ocrypto_mod_p256_sub>
   24726:	466a      	mov	r2, sp
   24728:	4629      	mov	r1, r5
   2472a:	4628      	mov	r0, r5
   2472c:	f7dd f84c 	bl	17c8 <ocrypto_mod_p256_mul>
   24730:	463a      	mov	r2, r7
   24732:	4629      	mov	r1, r5
   24734:	4628      	mov	r0, r5
   24736:	f7dc ffaf 	bl	1698 <ocrypto_mod_p256_sub>
   2473a:	b008      	add	sp, #32
   2473c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24740:	0002f3d8 	.word	0x0002f3d8

00024744 <p256_zaddc>:
   24744:	b5f0      	push	{r4, r5, r6, r7, lr}
   24746:	b099      	sub	sp, #100	; 0x64
   24748:	4604      	mov	r4, r0
   2474a:	460d      	mov	r5, r1
   2474c:	460a      	mov	r2, r1
   2474e:	4601      	mov	r1, r0
   24750:	4668      	mov	r0, sp
   24752:	f7dc ffa1 	bl	1698 <ocrypto_mod_p256_sub>
   24756:	4669      	mov	r1, sp
   24758:	4668      	mov	r0, sp
   2475a:	f7dd f84d 	bl	17f8 <ocrypto_mod_p256_sqr>
   2475e:	466a      	mov	r2, sp
   24760:	4621      	mov	r1, r4
   24762:	a808      	add	r0, sp, #32
   24764:	f105 0620 	add.w	r6, r5, #32
   24768:	f104 0720 	add.w	r7, r4, #32
   2476c:	f7dd f82c 	bl	17c8 <ocrypto_mod_p256_mul>
   24770:	466a      	mov	r2, sp
   24772:	4629      	mov	r1, r5
   24774:	4668      	mov	r0, sp
   24776:	f7dd f827 	bl	17c8 <ocrypto_mod_p256_mul>
   2477a:	4632      	mov	r2, r6
   2477c:	4639      	mov	r1, r7
   2477e:	a810      	add	r0, sp, #64	; 0x40
   24780:	f7dc ff4c 	bl	161c <ocrypto_mod_p256_add>
   24784:	4632      	mov	r2, r6
   24786:	4639      	mov	r1, r7
   24788:	4630      	mov	r0, r6
   2478a:	f7dc ff85 	bl	1698 <ocrypto_mod_p256_sub>
   2478e:	4631      	mov	r1, r6
   24790:	4628      	mov	r0, r5
   24792:	f7dd f831 	bl	17f8 <ocrypto_mod_p256_sqr>
   24796:	466a      	mov	r2, sp
   24798:	a908      	add	r1, sp, #32
   2479a:	4620      	mov	r0, r4
   2479c:	f7dc ff3e 	bl	161c <ocrypto_mod_p256_add>
   247a0:	4622      	mov	r2, r4
   247a2:	4629      	mov	r1, r5
   247a4:	4628      	mov	r0, r5
   247a6:	f7dc ff77 	bl	1698 <ocrypto_mod_p256_sub>
   247aa:	466a      	mov	r2, sp
   247ac:	a908      	add	r1, sp, #32
   247ae:	4668      	mov	r0, sp
   247b0:	f7dc ff72 	bl	1698 <ocrypto_mod_p256_sub>
   247b4:	466a      	mov	r2, sp
   247b6:	4639      	mov	r1, r7
   247b8:	4638      	mov	r0, r7
   247ba:	f7dd f805 	bl	17c8 <ocrypto_mod_p256_mul>
   247be:	462a      	mov	r2, r5
   247c0:	a908      	add	r1, sp, #32
   247c2:	4668      	mov	r0, sp
   247c4:	f7dc ff68 	bl	1698 <ocrypto_mod_p256_sub>
   247c8:	466a      	mov	r2, sp
   247ca:	4631      	mov	r1, r6
   247cc:	4630      	mov	r0, r6
   247ce:	f7dc fffb 	bl	17c8 <ocrypto_mod_p256_mul>
   247d2:	463a      	mov	r2, r7
   247d4:	4631      	mov	r1, r6
   247d6:	4630      	mov	r0, r6
   247d8:	f7dc ff5e 	bl	1698 <ocrypto_mod_p256_sub>
   247dc:	a910      	add	r1, sp, #64	; 0x40
   247de:	4668      	mov	r0, sp
   247e0:	f7dd f80a 	bl	17f8 <ocrypto_mod_p256_sqr>
   247e4:	4622      	mov	r2, r4
   247e6:	4669      	mov	r1, sp
   247e8:	4620      	mov	r0, r4
   247ea:	f7dc ff55 	bl	1698 <ocrypto_mod_p256_sub>
   247ee:	a908      	add	r1, sp, #32
   247f0:	4622      	mov	r2, r4
   247f2:	4608      	mov	r0, r1
   247f4:	f7dc ff50 	bl	1698 <ocrypto_mod_p256_sub>
   247f8:	a910      	add	r1, sp, #64	; 0x40
   247fa:	aa08      	add	r2, sp, #32
   247fc:	4608      	mov	r0, r1
   247fe:	f7dc ffe3 	bl	17c8 <ocrypto_mod_p256_mul>
   24802:	463a      	mov	r2, r7
   24804:	a910      	add	r1, sp, #64	; 0x40
   24806:	4638      	mov	r0, r7
   24808:	f7dc ff46 	bl	1698 <ocrypto_mod_p256_sub>
   2480c:	b019      	add	sp, #100	; 0x64
   2480e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024810 <p256_zaddu>:
   24810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24814:	b088      	sub	sp, #32
   24816:	460c      	mov	r4, r1
   24818:	4605      	mov	r5, r0
   2481a:	4690      	mov	r8, r2
   2481c:	460a      	mov	r2, r1
   2481e:	4601      	mov	r1, r0
   24820:	4668      	mov	r0, sp
   24822:	f7dc ff39 	bl	1698 <ocrypto_mod_p256_sub>
   24826:	4669      	mov	r1, sp
   24828:	4668      	mov	r0, sp
   2482a:	f7dc ffe5 	bl	17f8 <ocrypto_mod_p256_sqr>
   2482e:	466a      	mov	r2, sp
   24830:	4629      	mov	r1, r5
   24832:	4628      	mov	r0, r5
   24834:	f104 0620 	add.w	r6, r4, #32
   24838:	f7dc ffc6 	bl	17c8 <ocrypto_mod_p256_mul>
   2483c:	f105 0720 	add.w	r7, r5, #32
   24840:	466a      	mov	r2, sp
   24842:	4621      	mov	r1, r4
   24844:	4668      	mov	r0, sp
   24846:	f7dc ffbf 	bl	17c8 <ocrypto_mod_p256_mul>
   2484a:	4632      	mov	r2, r6
   2484c:	4639      	mov	r1, r7
   2484e:	4630      	mov	r0, r6
   24850:	f7dc ff22 	bl	1698 <ocrypto_mod_p256_sub>
   24854:	4631      	mov	r1, r6
   24856:	4620      	mov	r0, r4
   24858:	f7dc ffce 	bl	17f8 <ocrypto_mod_p256_sqr>
   2485c:	462a      	mov	r2, r5
   2485e:	4621      	mov	r1, r4
   24860:	4620      	mov	r0, r4
   24862:	f7dc ff19 	bl	1698 <ocrypto_mod_p256_sub>
   24866:	466a      	mov	r2, sp
   24868:	4621      	mov	r1, r4
   2486a:	4620      	mov	r0, r4
   2486c:	f7dc ff14 	bl	1698 <ocrypto_mod_p256_sub>
   24870:	466a      	mov	r2, sp
   24872:	4629      	mov	r1, r5
   24874:	4640      	mov	r0, r8
   24876:	f7dc ff0f 	bl	1698 <ocrypto_mod_p256_sub>
   2487a:	4642      	mov	r2, r8
   2487c:	4639      	mov	r1, r7
   2487e:	4638      	mov	r0, r7
   24880:	f7dc ffa2 	bl	17c8 <ocrypto_mod_p256_mul>
   24884:	4622      	mov	r2, r4
   24886:	4629      	mov	r1, r5
   24888:	4668      	mov	r0, sp
   2488a:	f7dc ff05 	bl	1698 <ocrypto_mod_p256_sub>
   2488e:	466a      	mov	r2, sp
   24890:	4631      	mov	r1, r6
   24892:	4630      	mov	r0, r6
   24894:	f7dc ff98 	bl	17c8 <ocrypto_mod_p256_mul>
   24898:	463a      	mov	r2, r7
   2489a:	4631      	mov	r1, r6
   2489c:	4630      	mov	r0, r6
   2489e:	f7dc fefb 	bl	1698 <ocrypto_mod_p256_sub>
   248a2:	b008      	add	sp, #32
   248a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000248a8 <ocrypto_curve_p256_from64bytes>:
   248a8:	b570      	push	{r4, r5, r6, lr}
   248aa:	f100 0620 	add.w	r6, r0, #32
   248ae:	b090      	sub	sp, #64	; 0x40
   248b0:	460d      	mov	r5, r1
   248b2:	4604      	mov	r4, r0
   248b4:	f000 f914 	bl	24ae0 <ocrypto_mod_p256_from_bytes>
   248b8:	f105 0120 	add.w	r1, r5, #32
   248bc:	4630      	mov	r0, r6
   248be:	f000 f90f 	bl	24ae0 <ocrypto_mod_p256_from_bytes>
   248c2:	4621      	mov	r1, r4
   248c4:	a808      	add	r0, sp, #32
   248c6:	f7dc ff97 	bl	17f8 <ocrypto_mod_p256_sqr>
   248ca:	a908      	add	r1, sp, #32
   248cc:	4608      	mov	r0, r1
   248ce:	4a0d      	ldr	r2, [pc, #52]	; (24904 <ocrypto_curve_p256_from64bytes+0x5c>)
   248d0:	f7dc fea4 	bl	161c <ocrypto_mod_p256_add>
   248d4:	a908      	add	r1, sp, #32
   248d6:	4622      	mov	r2, r4
   248d8:	4608      	mov	r0, r1
   248da:	f7dc ff75 	bl	17c8 <ocrypto_mod_p256_mul>
   248de:	a908      	add	r1, sp, #32
   248e0:	4a09      	ldr	r2, [pc, #36]	; (24908 <ocrypto_curve_p256_from64bytes+0x60>)
   248e2:	4608      	mov	r0, r1
   248e4:	f7dc fe9a 	bl	161c <ocrypto_mod_p256_add>
   248e8:	4631      	mov	r1, r6
   248ea:	4668      	mov	r0, sp
   248ec:	f7dc ff84 	bl	17f8 <ocrypto_mod_p256_sqr>
   248f0:	2220      	movs	r2, #32
   248f2:	4669      	mov	r1, sp
   248f4:	eb0d 0002 	add.w	r0, sp, r2
   248f8:	f7dc fe62 	bl	15c0 <ocrypto_constant_time_equal>
   248fc:	3801      	subs	r0, #1
   248fe:	b010      	add	sp, #64	; 0x40
   24900:	bd70      	pop	{r4, r5, r6, pc}
   24902:	bf00      	nop
   24904:	0002f3d8 	.word	0x0002f3d8
   24908:	0002f3f8 	.word	0x0002f3f8

0002490c <ocrypto_curve_p256_to32bytes>:
   2490c:	f000 b902 	b.w	24b14 <ocrypto_mod_p256_to_bytes>

00024910 <ocrypto_curve_p256_to64bytes>:
   24910:	b538      	push	{r3, r4, r5, lr}
   24912:	4604      	mov	r4, r0
   24914:	460d      	mov	r5, r1
   24916:	f000 f8fd 	bl	24b14 <ocrypto_mod_p256_to_bytes>
   2491a:	f105 0120 	add.w	r1, r5, #32
   2491e:	f104 0020 	add.w	r0, r4, #32
   24922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   24926:	f000 b8f5 	b.w	24b14 <ocrypto_mod_p256_to_bytes>
   2492a:	bf00      	nop

0002492c <ocrypto_curve_p256_scalarmult>:
   2492c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24930:	4613      	mov	r3, r2
   24932:	b0b8      	sub	sp, #224	; 0xe0
   24934:	4a54      	ldr	r2, [pc, #336]	; (24a88 <ocrypto_curve_p256_scalarmult+0x15c>)
   24936:	4689      	mov	r9, r1
   24938:	4680      	mov	r8, r0
   2493a:	4619      	mov	r1, r3
   2493c:	a810      	add	r0, sp, #64	; 0x40
   2493e:	f7dc fc51 	bl	11e4 <ocrypto_bigint_sub256>
   24942:	4952      	ldr	r1, [pc, #328]	; (24a8c <ocrypto_curve_p256_scalarmult+0x160>)
   24944:	4602      	mov	r2, r0
   24946:	a810      	add	r0, sp, #64	; 0x40
   24948:	f7dc fc6c 	bl	1224 <ocrypto_bigint_cadd256>
   2494c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   2494e:	494e      	ldr	r1, [pc, #312]	; (24a88 <ocrypto_curve_p256_scalarmult+0x15c>)
   24950:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   24954:	4607      	mov	r7, r0
   24956:	f1c6 0201 	rsb	r2, r6, #1
   2495a:	a810      	add	r0, sp, #64	; 0x40
   2495c:	f7dc fc62 	bl	1224 <ocrypto_bigint_cadd256>
   24960:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   24962:	464a      	mov	r2, r9
   24964:	ea6f 0a03 	mvn.w	sl, r3
   24968:	a928      	add	r1, sp, #160	; 0xa0
   2496a:	a818      	add	r0, sp, #96	; 0x60
   2496c:	f7ff fe8e 	bl	2468c <p256_zdblu>
   24970:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   24974:	a920      	add	r1, sp, #128	; 0x80
   24976:	f1ca 0201 	rsb	r2, sl, #1
   2497a:	4608      	mov	r0, r1
   2497c:	f000 f892 	bl	24aa4 <ocrypto_mod_p256_cneg>
   24980:	f1c7 0701 	rsb	r7, r7, #1
   24984:	24fe      	movs	r4, #254	; 0xfe
   24986:	466a      	mov	r2, sp
   24988:	a918      	add	r1, sp, #96	; 0x60
   2498a:	a828      	add	r0, sp, #160	; 0xa0
   2498c:	f7ff ff40 	bl	24810 <p256_zaddu>
   24990:	1162      	asrs	r2, r4, #5
   24992:	ab38      	add	r3, sp, #224	; 0xe0
   24994:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   24998:	f004 011f 	and.w	r1, r4, #31
   2499c:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   249a0:	40cb      	lsrs	r3, r1
   249a2:	4655      	mov	r5, sl
   249a4:	f003 0a01 	and.w	sl, r3, #1
   249a8:	ea8a 0505 	eor.w	r5, sl, r5
   249ac:	462a      	mov	r2, r5
   249ae:	a928      	add	r1, sp, #160	; 0xa0
   249b0:	a818      	add	r0, sp, #96	; 0x60
   249b2:	f7dc fc93 	bl	12dc <ocrypto_bigint_cswap256>
   249b6:	462a      	mov	r2, r5
   249b8:	a930      	add	r1, sp, #192	; 0xc0
   249ba:	a820      	add	r0, sp, #128	; 0x80
   249bc:	f7dc fc8e 	bl	12dc <ocrypto_bigint_cswap256>
   249c0:	3c01      	subs	r4, #1
   249c2:	a928      	add	r1, sp, #160	; 0xa0
   249c4:	a818      	add	r0, sp, #96	; 0x60
   249c6:	f7ff febd 	bl	24744 <p256_zaddc>
   249ca:	1c63      	adds	r3, r4, #1
   249cc:	d1db      	bne.n	24986 <ocrypto_curve_p256_scalarmult+0x5a>
   249ce:	f1ca 0201 	rsb	r2, sl, #1
   249d2:	a920      	add	r1, sp, #128	; 0x80
   249d4:	a808      	add	r0, sp, #32
   249d6:	f000 f865 	bl	24aa4 <ocrypto_mod_p256_cneg>
   249da:	ea86 060a 	eor.w	r6, r6, sl
   249de:	466a      	mov	r2, sp
   249e0:	a918      	add	r1, sp, #96	; 0x60
   249e2:	a828      	add	r0, sp, #160	; 0xa0
   249e4:	f7ff ff14 	bl	24810 <p256_zaddu>
   249e8:	a928      	add	r1, sp, #160	; 0xa0
   249ea:	4632      	mov	r2, r6
   249ec:	a818      	add	r0, sp, #96	; 0x60
   249ee:	f7dc fc75 	bl	12dc <ocrypto_bigint_cswap256>
   249f2:	4632      	mov	r2, r6
   249f4:	a930      	add	r1, sp, #192	; 0xc0
   249f6:	a820      	add	r0, sp, #128	; 0x80
   249f8:	f7dc fc70 	bl	12dc <ocrypto_bigint_cswap256>
   249fc:	a908      	add	r1, sp, #32
   249fe:	466a      	mov	r2, sp
   24a00:	4608      	mov	r0, r1
   24a02:	f7dc fee1 	bl	17c8 <ocrypto_mod_p256_mul>
   24a06:	a908      	add	r1, sp, #32
   24a08:	4608      	mov	r0, r1
   24a0a:	f000 f89d 	bl	24b48 <ocrypto_mod_p256_inv>
   24a0e:	a908      	add	r1, sp, #32
   24a10:	f108 0420 	add.w	r4, r8, #32
   24a14:	f109 0220 	add.w	r2, r9, #32
   24a18:	4608      	mov	r0, r1
   24a1a:	f7dc fed5 	bl	17c8 <ocrypto_mod_p256_mul>
   24a1e:	a920      	add	r1, sp, #128	; 0x80
   24a20:	aa08      	add	r2, sp, #32
   24a22:	4620      	mov	r0, r4
   24a24:	f7dc fed0 	bl	17c8 <ocrypto_mod_p256_mul>
   24a28:	aa08      	add	r2, sp, #32
   24a2a:	a918      	add	r1, sp, #96	; 0x60
   24a2c:	4668      	mov	r0, sp
   24a2e:	f7dc fecb 	bl	17c8 <ocrypto_mod_p256_mul>
   24a32:	4669      	mov	r1, sp
   24a34:	4668      	mov	r0, sp
   24a36:	f7dc fedf 	bl	17f8 <ocrypto_mod_p256_sqr>
   24a3a:	aa18      	add	r2, sp, #96	; 0x60
   24a3c:	4669      	mov	r1, sp
   24a3e:	a808      	add	r0, sp, #32
   24a40:	f7dc fec2 	bl	17c8 <ocrypto_mod_p256_mul>
   24a44:	4621      	mov	r1, r4
   24a46:	4668      	mov	r0, sp
   24a48:	f7dc fed6 	bl	17f8 <ocrypto_mod_p256_sqr>
   24a4c:	aa08      	add	r2, sp, #32
   24a4e:	4669      	mov	r1, sp
   24a50:	4610      	mov	r0, r2
   24a52:	f7dc fe21 	bl	1698 <ocrypto_mod_p256_sub>
   24a56:	4a0e      	ldr	r2, [pc, #56]	; (24a90 <ocrypto_curve_p256_scalarmult+0x164>)
   24a58:	a908      	add	r1, sp, #32
   24a5a:	4668      	mov	r0, sp
   24a5c:	f7dc fe1c 	bl	1698 <ocrypto_mod_p256_sub>
   24a60:	4620      	mov	r0, r4
   24a62:	2120      	movs	r1, #32
   24a64:	f7dc fdc0 	bl	15e8 <ocrypto_constant_time_is_zero>
   24a68:	a908      	add	r1, sp, #32
   24a6a:	4243      	negs	r3, r0
   24a6c:	4602      	mov	r2, r0
   24a6e:	4668      	mov	r0, sp
   24a70:	431f      	orrs	r7, r3
   24a72:	f7dc fc33 	bl	12dc <ocrypto_bigint_cswap256>
   24a76:	4640      	mov	r0, r8
   24a78:	4a06      	ldr	r2, [pc, #24]	; (24a94 <ocrypto_curve_p256_scalarmult+0x168>)
   24a7a:	4669      	mov	r1, sp
   24a7c:	f7dc fea4 	bl	17c8 <ocrypto_mod_p256_mul>
   24a80:	4638      	mov	r0, r7
   24a82:	b038      	add	sp, #224	; 0xe0
   24a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24a88:	0002f418 	.word	0x0002f418
   24a8c:	0002f398 	.word	0x0002f398
   24a90:	0002f3f8 	.word	0x0002f3f8
   24a94:	0002f3b8 	.word	0x0002f3b8

00024a98 <ocrypto_curve_p256_scalarmult_base>:
   24a98:	460a      	mov	r2, r1
   24a9a:	4901      	ldr	r1, [pc, #4]	; (24aa0 <ocrypto_curve_p256_scalarmult_base+0x8>)
   24a9c:	f7ff bf46 	b.w	2492c <ocrypto_curve_p256_scalarmult>
   24aa0:	0002f358 	.word	0x0002f358

00024aa4 <ocrypto_mod_p256_cneg>:
   24aa4:	b570      	push	{r4, r5, r6, lr}
   24aa6:	b088      	sub	sp, #32
   24aa8:	4604      	mov	r4, r0
   24aaa:	460d      	mov	r5, r1
   24aac:	4616      	mov	r6, r2
   24aae:	2100      	movs	r1, #0
   24ab0:	2220      	movs	r2, #32
   24ab2:	4668      	mov	r0, sp
   24ab4:	f009 f9b1 	bl	2de1a <memset>
   24ab8:	2300      	movs	r3, #0
   24aba:	4629      	mov	r1, r5
   24abc:	2220      	movs	r2, #32
   24abe:	4620      	mov	r0, r4
   24ac0:	9300      	str	r3, [sp, #0]
   24ac2:	f009 f989 	bl	2ddd8 <memcpy>
   24ac6:	462a      	mov	r2, r5
   24ac8:	4669      	mov	r1, sp
   24aca:	4668      	mov	r0, sp
   24acc:	f7dc fde4 	bl	1698 <ocrypto_mod_p256_sub>
   24ad0:	4632      	mov	r2, r6
   24ad2:	4669      	mov	r1, sp
   24ad4:	4620      	mov	r0, r4
   24ad6:	f7dc fc01 	bl	12dc <ocrypto_bigint_cswap256>
   24ada:	b008      	add	sp, #32
   24adc:	bd70      	pop	{r4, r5, r6, pc}
   24ade:	bf00      	nop

00024ae0 <ocrypto_mod_p256_from_bytes>:
   24ae0:	680b      	ldr	r3, [r1, #0]
   24ae2:	ba1b      	rev	r3, r3
   24ae4:	61c3      	str	r3, [r0, #28]
   24ae6:	684b      	ldr	r3, [r1, #4]
   24ae8:	ba1b      	rev	r3, r3
   24aea:	6183      	str	r3, [r0, #24]
   24aec:	688b      	ldr	r3, [r1, #8]
   24aee:	ba1b      	rev	r3, r3
   24af0:	6143      	str	r3, [r0, #20]
   24af2:	68cb      	ldr	r3, [r1, #12]
   24af4:	ba1b      	rev	r3, r3
   24af6:	6103      	str	r3, [r0, #16]
   24af8:	690b      	ldr	r3, [r1, #16]
   24afa:	ba1b      	rev	r3, r3
   24afc:	60c3      	str	r3, [r0, #12]
   24afe:	694b      	ldr	r3, [r1, #20]
   24b00:	ba1b      	rev	r3, r3
   24b02:	6083      	str	r3, [r0, #8]
   24b04:	698b      	ldr	r3, [r1, #24]
   24b06:	ba1b      	rev	r3, r3
   24b08:	6043      	str	r3, [r0, #4]
   24b0a:	69cb      	ldr	r3, [r1, #28]
   24b0c:	ba1b      	rev	r3, r3
   24b0e:	6003      	str	r3, [r0, #0]
   24b10:	4770      	bx	lr
   24b12:	bf00      	nop

00024b14 <ocrypto_mod_p256_to_bytes>:
   24b14:	69cb      	ldr	r3, [r1, #28]
   24b16:	ba1b      	rev	r3, r3
   24b18:	6003      	str	r3, [r0, #0]
   24b1a:	698b      	ldr	r3, [r1, #24]
   24b1c:	ba1b      	rev	r3, r3
   24b1e:	6043      	str	r3, [r0, #4]
   24b20:	694b      	ldr	r3, [r1, #20]
   24b22:	ba1b      	rev	r3, r3
   24b24:	6083      	str	r3, [r0, #8]
   24b26:	690b      	ldr	r3, [r1, #16]
   24b28:	ba1b      	rev	r3, r3
   24b2a:	60c3      	str	r3, [r0, #12]
   24b2c:	68cb      	ldr	r3, [r1, #12]
   24b2e:	ba1b      	rev	r3, r3
   24b30:	6103      	str	r3, [r0, #16]
   24b32:	688b      	ldr	r3, [r1, #8]
   24b34:	ba1b      	rev	r3, r3
   24b36:	6143      	str	r3, [r0, #20]
   24b38:	684b      	ldr	r3, [r1, #4]
   24b3a:	ba1b      	rev	r3, r3
   24b3c:	6183      	str	r3, [r0, #24]
   24b3e:	680b      	ldr	r3, [r1, #0]
   24b40:	ba1b      	rev	r3, r3
   24b42:	61c3      	str	r3, [r0, #28]
   24b44:	4770      	bx	lr
   24b46:	bf00      	nop

00024b48 <ocrypto_mod_p256_inv>:
   24b48:	b570      	push	{r4, r5, r6, lr}
   24b4a:	b098      	sub	sp, #96	; 0x60
   24b4c:	460d      	mov	r5, r1
   24b4e:	4606      	mov	r6, r0
   24b50:	a810      	add	r0, sp, #64	; 0x40
   24b52:	f7dc fe51 	bl	17f8 <ocrypto_mod_p256_sqr>
   24b56:	462a      	mov	r2, r5
   24b58:	a910      	add	r1, sp, #64	; 0x40
   24b5a:	4668      	mov	r0, sp
   24b5c:	f7dc fe34 	bl	17c8 <ocrypto_mod_p256_mul>
   24b60:	4669      	mov	r1, sp
   24b62:	a810      	add	r0, sp, #64	; 0x40
   24b64:	f7dc fe48 	bl	17f8 <ocrypto_mod_p256_sqr>
   24b68:	a910      	add	r1, sp, #64	; 0x40
   24b6a:	4608      	mov	r0, r1
   24b6c:	f7dc fe44 	bl	17f8 <ocrypto_mod_p256_sqr>
   24b70:	466a      	mov	r2, sp
   24b72:	a910      	add	r1, sp, #64	; 0x40
   24b74:	a808      	add	r0, sp, #32
   24b76:	f7dc fe27 	bl	17c8 <ocrypto_mod_p256_mul>
   24b7a:	a908      	add	r1, sp, #32
   24b7c:	a810      	add	r0, sp, #64	; 0x40
   24b7e:	f7dc fe3b 	bl	17f8 <ocrypto_mod_p256_sqr>
   24b82:	a910      	add	r1, sp, #64	; 0x40
   24b84:	4608      	mov	r0, r1
   24b86:	f7dc fe37 	bl	17f8 <ocrypto_mod_p256_sqr>
   24b8a:	a910      	add	r1, sp, #64	; 0x40
   24b8c:	4608      	mov	r0, r1
   24b8e:	f7dc fe33 	bl	17f8 <ocrypto_mod_p256_sqr>
   24b92:	a910      	add	r1, sp, #64	; 0x40
   24b94:	4608      	mov	r0, r1
   24b96:	f7dc fe2f 	bl	17f8 <ocrypto_mod_p256_sqr>
   24b9a:	a910      	add	r1, sp, #64	; 0x40
   24b9c:	aa08      	add	r2, sp, #32
   24b9e:	4608      	mov	r0, r1
   24ba0:	f7dc fe12 	bl	17c8 <ocrypto_mod_p256_mul>
   24ba4:	a910      	add	r1, sp, #64	; 0x40
   24ba6:	4608      	mov	r0, r1
   24ba8:	f7dc fe26 	bl	17f8 <ocrypto_mod_p256_sqr>
   24bac:	a910      	add	r1, sp, #64	; 0x40
   24bae:	4608      	mov	r0, r1
   24bb0:	f7dc fe22 	bl	17f8 <ocrypto_mod_p256_sqr>
   24bb4:	a910      	add	r1, sp, #64	; 0x40
   24bb6:	466a      	mov	r2, sp
   24bb8:	a808      	add	r0, sp, #32
   24bba:	f7dc fe05 	bl	17c8 <ocrypto_mod_p256_mul>
   24bbe:	2405      	movs	r4, #5
   24bc0:	a908      	add	r1, sp, #32
   24bc2:	a810      	add	r0, sp, #64	; 0x40
   24bc4:	f7dc fe18 	bl	17f8 <ocrypto_mod_p256_sqr>
   24bc8:	a910      	add	r1, sp, #64	; 0x40
   24bca:	4608      	mov	r0, r1
   24bcc:	f7dc fe14 	bl	17f8 <ocrypto_mod_p256_sqr>
   24bd0:	3c01      	subs	r4, #1
   24bd2:	a910      	add	r1, sp, #64	; 0x40
   24bd4:	d1f5      	bne.n	24bc2 <ocrypto_mod_p256_inv+0x7a>
   24bd6:	aa08      	add	r2, sp, #32
   24bd8:	4608      	mov	r0, r1
   24bda:	f7dc fdf5 	bl	17c8 <ocrypto_mod_p256_mul>
   24bde:	2405      	movs	r4, #5
   24be0:	a910      	add	r1, sp, #64	; 0x40
   24be2:	4608      	mov	r0, r1
   24be4:	f7dc fe08 	bl	17f8 <ocrypto_mod_p256_sqr>
   24be8:	a910      	add	r1, sp, #64	; 0x40
   24bea:	4608      	mov	r0, r1
   24bec:	f7dc fe04 	bl	17f8 <ocrypto_mod_p256_sqr>
   24bf0:	3c01      	subs	r4, #1
   24bf2:	d1f5      	bne.n	24be0 <ocrypto_mod_p256_inv+0x98>
   24bf4:	a910      	add	r1, sp, #64	; 0x40
   24bf6:	aa08      	add	r2, sp, #32
   24bf8:	4608      	mov	r0, r1
   24bfa:	f7dc fde5 	bl	17c8 <ocrypto_mod_p256_mul>
   24bfe:	a910      	add	r1, sp, #64	; 0x40
   24c00:	a808      	add	r0, sp, #32
   24c02:	f7dc fdf9 	bl	17f8 <ocrypto_mod_p256_sqr>
   24c06:	a908      	add	r1, sp, #32
   24c08:	4608      	mov	r0, r1
   24c0a:	f7dc fdf5 	bl	17f8 <ocrypto_mod_p256_sqr>
   24c0e:	a908      	add	r1, sp, #32
   24c10:	466a      	mov	r2, sp
   24c12:	4668      	mov	r0, sp
   24c14:	f7dc fdd8 	bl	17c8 <ocrypto_mod_p256_mul>
   24c18:	2410      	movs	r4, #16
   24c1a:	4669      	mov	r1, sp
   24c1c:	a810      	add	r0, sp, #64	; 0x40
   24c1e:	f7dc fdeb 	bl	17f8 <ocrypto_mod_p256_sqr>
   24c22:	a910      	add	r1, sp, #64	; 0x40
   24c24:	4608      	mov	r0, r1
   24c26:	f7dc fde7 	bl	17f8 <ocrypto_mod_p256_sqr>
   24c2a:	3c01      	subs	r4, #1
   24c2c:	a910      	add	r1, sp, #64	; 0x40
   24c2e:	d1f5      	bne.n	24c1c <ocrypto_mod_p256_inv+0xd4>
   24c30:	462a      	mov	r2, r5
   24c32:	4608      	mov	r0, r1
   24c34:	f7dc fdc8 	bl	17c8 <ocrypto_mod_p256_mul>
   24c38:	2440      	movs	r4, #64	; 0x40
   24c3a:	a910      	add	r1, sp, #64	; 0x40
   24c3c:	4608      	mov	r0, r1
   24c3e:	f7dc fddb 	bl	17f8 <ocrypto_mod_p256_sqr>
   24c42:	a910      	add	r1, sp, #64	; 0x40
   24c44:	4608      	mov	r0, r1
   24c46:	f7dc fdd7 	bl	17f8 <ocrypto_mod_p256_sqr>
   24c4a:	3c01      	subs	r4, #1
   24c4c:	d1f5      	bne.n	24c3a <ocrypto_mod_p256_inv+0xf2>
   24c4e:	a910      	add	r1, sp, #64	; 0x40
   24c50:	466a      	mov	r2, sp
   24c52:	4608      	mov	r0, r1
   24c54:	f7dc fdb8 	bl	17c8 <ocrypto_mod_p256_mul>
   24c58:	2410      	movs	r4, #16
   24c5a:	a910      	add	r1, sp, #64	; 0x40
   24c5c:	4608      	mov	r0, r1
   24c5e:	f7dc fdcb 	bl	17f8 <ocrypto_mod_p256_sqr>
   24c62:	a910      	add	r1, sp, #64	; 0x40
   24c64:	4608      	mov	r0, r1
   24c66:	f7dc fdc7 	bl	17f8 <ocrypto_mod_p256_sqr>
   24c6a:	3c01      	subs	r4, #1
   24c6c:	d1f5      	bne.n	24c5a <ocrypto_mod_p256_inv+0x112>
   24c6e:	a910      	add	r1, sp, #64	; 0x40
   24c70:	466a      	mov	r2, sp
   24c72:	4608      	mov	r0, r1
   24c74:	f7dc fda8 	bl	17c8 <ocrypto_mod_p256_mul>
   24c78:	2410      	movs	r4, #16
   24c7a:	a910      	add	r1, sp, #64	; 0x40
   24c7c:	4608      	mov	r0, r1
   24c7e:	f7dc fdbb 	bl	17f8 <ocrypto_mod_p256_sqr>
   24c82:	a910      	add	r1, sp, #64	; 0x40
   24c84:	4608      	mov	r0, r1
   24c86:	f7dc fdb7 	bl	17f8 <ocrypto_mod_p256_sqr>
   24c8a:	3c01      	subs	r4, #1
   24c8c:	d1f5      	bne.n	24c7a <ocrypto_mod_p256_inv+0x132>
   24c8e:	a910      	add	r1, sp, #64	; 0x40
   24c90:	aa08      	add	r2, sp, #32
   24c92:	4608      	mov	r0, r1
   24c94:	f7dc fd98 	bl	17c8 <ocrypto_mod_p256_mul>
   24c98:	462a      	mov	r2, r5
   24c9a:	a910      	add	r1, sp, #64	; 0x40
   24c9c:	4630      	mov	r0, r6
   24c9e:	f7dc fd93 	bl	17c8 <ocrypto_mod_p256_mul>
   24ca2:	b018      	add	sp, #96	; 0x60
   24ca4:	bd70      	pop	{r4, r5, r6, pc}
   24ca6:	bf00      	nop

00024ca8 <sqrt>:
   24ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24caa:	4606      	mov	r6, r0
   24cac:	460f      	mov	r7, r1
   24cae:	f000 f827 	bl	24d00 <__ieee754_sqrt>
   24cb2:	4b12      	ldr	r3, [pc, #72]	; (24cfc <sqrt+0x54>)
   24cb4:	f993 3000 	ldrsb.w	r3, [r3]
   24cb8:	3301      	adds	r3, #1
   24cba:	4604      	mov	r4, r0
   24cbc:	460d      	mov	r5, r1
   24cbe:	d019      	beq.n	24cf4 <sqrt+0x4c>
   24cc0:	4632      	mov	r2, r6
   24cc2:	463b      	mov	r3, r7
   24cc4:	4630      	mov	r0, r6
   24cc6:	4639      	mov	r1, r7
   24cc8:	f7dc fdae 	bl	1828 <__aeabi_dcmpun>
   24ccc:	b990      	cbnz	r0, 24cf4 <sqrt+0x4c>
   24cce:	2200      	movs	r2, #0
   24cd0:	2300      	movs	r3, #0
   24cd2:	4630      	mov	r0, r6
   24cd4:	4639      	mov	r1, r7
   24cd6:	f7db fe91 	bl	9fc <__aeabi_dcmplt>
   24cda:	b158      	cbz	r0, 24cf4 <sqrt+0x4c>
   24cdc:	f005 fc2b 	bl	2a536 <__errno>
   24ce0:	2321      	movs	r3, #33	; 0x21
   24ce2:	6003      	str	r3, [r0, #0]
   24ce4:	2200      	movs	r2, #0
   24ce6:	2300      	movs	r3, #0
   24ce8:	4610      	mov	r0, r2
   24cea:	4619      	mov	r1, r3
   24cec:	f7db fd3e 	bl	76c <__aeabi_ddiv>
   24cf0:	4604      	mov	r4, r0
   24cf2:	460d      	mov	r5, r1
   24cf4:	4620      	mov	r0, r4
   24cf6:	4629      	mov	r1, r5
   24cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24cfa:	bf00      	nop
   24cfc:	20000a59 	.word	0x20000a59

00024d00 <__ieee754_sqrt>:
   24d00:	f8df c154 	ldr.w	ip, [pc, #340]	; 24e58 <__ieee754_sqrt+0x158>
   24d04:	ea3c 0c01 	bics.w	ip, ip, r1
   24d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24d0c:	460a      	mov	r2, r1
   24d0e:	4606      	mov	r6, r0
   24d10:	460d      	mov	r5, r1
   24d12:	460c      	mov	r4, r1
   24d14:	4607      	mov	r7, r0
   24d16:	4603      	mov	r3, r0
   24d18:	d10f      	bne.n	24d3a <__ieee754_sqrt+0x3a>
   24d1a:	4602      	mov	r2, r0
   24d1c:	460b      	mov	r3, r1
   24d1e:	f7db fbfb 	bl	518 <__aeabi_dmul>
   24d22:	4602      	mov	r2, r0
   24d24:	460b      	mov	r3, r1
   24d26:	4630      	mov	r0, r6
   24d28:	4629      	mov	r1, r5
   24d2a:	f7db fa3f 	bl	1ac <__adddf3>
   24d2e:	4606      	mov	r6, r0
   24d30:	460d      	mov	r5, r1
   24d32:	4630      	mov	r0, r6
   24d34:	4629      	mov	r1, r5
   24d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24d3a:	2900      	cmp	r1, #0
   24d3c:	dc0e      	bgt.n	24d5c <__ieee754_sqrt+0x5c>
   24d3e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   24d42:	ea5c 0707 	orrs.w	r7, ip, r7
   24d46:	d0f4      	beq.n	24d32 <__ieee754_sqrt+0x32>
   24d48:	b141      	cbz	r1, 24d5c <__ieee754_sqrt+0x5c>
   24d4a:	4602      	mov	r2, r0
   24d4c:	460b      	mov	r3, r1
   24d4e:	f7db fa2b 	bl	1a8 <__aeabi_dsub>
   24d52:	4602      	mov	r2, r0
   24d54:	460b      	mov	r3, r1
   24d56:	f7db fd09 	bl	76c <__aeabi_ddiv>
   24d5a:	e7e8      	b.n	24d2e <__ieee754_sqrt+0x2e>
   24d5c:	1521      	asrs	r1, r4, #20
   24d5e:	d074      	beq.n	24e4a <__ieee754_sqrt+0x14a>
   24d60:	07cc      	lsls	r4, r1, #31
   24d62:	f3c2 0213 	ubfx	r2, r2, #0, #20
   24d66:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   24d6a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   24d6e:	bf5e      	ittt	pl
   24d70:	0fd9      	lsrpl	r1, r3, #31
   24d72:	005b      	lslpl	r3, r3, #1
   24d74:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
   24d78:	2400      	movs	r4, #0
   24d7a:	0fd9      	lsrs	r1, r3, #31
   24d7c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   24d80:	107f      	asrs	r7, r7, #1
   24d82:	005b      	lsls	r3, r3, #1
   24d84:	2516      	movs	r5, #22
   24d86:	4620      	mov	r0, r4
   24d88:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   24d8c:	1846      	adds	r6, r0, r1
   24d8e:	4296      	cmp	r6, r2
   24d90:	bfde      	ittt	le
   24d92:	1b92      	suble	r2, r2, r6
   24d94:	1870      	addle	r0, r6, r1
   24d96:	1864      	addle	r4, r4, r1
   24d98:	0052      	lsls	r2, r2, #1
   24d9a:	3d01      	subs	r5, #1
   24d9c:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
   24da0:	ea4f 0151 	mov.w	r1, r1, lsr #1
   24da4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   24da8:	d1f0      	bne.n	24d8c <__ieee754_sqrt+0x8c>
   24daa:	4629      	mov	r1, r5
   24dac:	f04f 0e20 	mov.w	lr, #32
   24db0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
   24db4:	4282      	cmp	r2, r0
   24db6:	eb06 0c05 	add.w	ip, r6, r5
   24dba:	dc02      	bgt.n	24dc2 <__ieee754_sqrt+0xc2>
   24dbc:	d113      	bne.n	24de6 <__ieee754_sqrt+0xe6>
   24dbe:	459c      	cmp	ip, r3
   24dc0:	d811      	bhi.n	24de6 <__ieee754_sqrt+0xe6>
   24dc2:	f1bc 0f00 	cmp.w	ip, #0
   24dc6:	eb0c 0506 	add.w	r5, ip, r6
   24dca:	da43      	bge.n	24e54 <__ieee754_sqrt+0x154>
   24dcc:	2d00      	cmp	r5, #0
   24dce:	db41      	blt.n	24e54 <__ieee754_sqrt+0x154>
   24dd0:	f100 0801 	add.w	r8, r0, #1
   24dd4:	1a12      	subs	r2, r2, r0
   24dd6:	459c      	cmp	ip, r3
   24dd8:	bf88      	it	hi
   24dda:	f102 32ff 	addhi.w	r2, r2, #4294967295
   24dde:	eba3 030c 	sub.w	r3, r3, ip
   24de2:	4431      	add	r1, r6
   24de4:	4640      	mov	r0, r8
   24de6:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
   24dea:	f1be 0e01 	subs.w	lr, lr, #1
   24dee:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
   24df2:	ea4f 0343 	mov.w	r3, r3, lsl #1
   24df6:	ea4f 0656 	mov.w	r6, r6, lsr #1
   24dfa:	d1db      	bne.n	24db4 <__ieee754_sqrt+0xb4>
   24dfc:	4313      	orrs	r3, r2
   24dfe:	d006      	beq.n	24e0e <__ieee754_sqrt+0x10e>
   24e00:	1c48      	adds	r0, r1, #1
   24e02:	bf13      	iteet	ne
   24e04:	3101      	addne	r1, #1
   24e06:	3401      	addeq	r4, #1
   24e08:	4671      	moveq	r1, lr
   24e0a:	f021 0101 	bicne.w	r1, r1, #1
   24e0e:	1063      	asrs	r3, r4, #1
   24e10:	0849      	lsrs	r1, r1, #1
   24e12:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   24e16:	07e2      	lsls	r2, r4, #31
   24e18:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   24e1c:	bf48      	it	mi
   24e1e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
   24e22:	eb03 5507 	add.w	r5, r3, r7, lsl #20
   24e26:	460e      	mov	r6, r1
   24e28:	e783      	b.n	24d32 <__ieee754_sqrt+0x32>
   24e2a:	0ada      	lsrs	r2, r3, #11
   24e2c:	3815      	subs	r0, #21
   24e2e:	055b      	lsls	r3, r3, #21
   24e30:	2a00      	cmp	r2, #0
   24e32:	d0fa      	beq.n	24e2a <__ieee754_sqrt+0x12a>
   24e34:	02d5      	lsls	r5, r2, #11
   24e36:	d50a      	bpl.n	24e4e <__ieee754_sqrt+0x14e>
   24e38:	f1c1 0420 	rsb	r4, r1, #32
   24e3c:	fa23 f404 	lsr.w	r4, r3, r4
   24e40:	1e4d      	subs	r5, r1, #1
   24e42:	408b      	lsls	r3, r1
   24e44:	4322      	orrs	r2, r4
   24e46:	1b41      	subs	r1, r0, r5
   24e48:	e78a      	b.n	24d60 <__ieee754_sqrt+0x60>
   24e4a:	4608      	mov	r0, r1
   24e4c:	e7f0      	b.n	24e30 <__ieee754_sqrt+0x130>
   24e4e:	0052      	lsls	r2, r2, #1
   24e50:	3101      	adds	r1, #1
   24e52:	e7ef      	b.n	24e34 <__ieee754_sqrt+0x134>
   24e54:	4680      	mov	r8, r0
   24e56:	e7bd      	b.n	24dd4 <__ieee754_sqrt+0xd4>
   24e58:	7ff00000 	.word	0x7ff00000

00024e5c <malloc>:
   24e5c:	4b02      	ldr	r3, [pc, #8]	; (24e68 <malloc+0xc>)
   24e5e:	4601      	mov	r1, r0
   24e60:	6818      	ldr	r0, [r3, #0]
   24e62:	f000 b84d 	b.w	24f00 <_malloc_r>
   24e66:	bf00      	nop
   24e68:	20000880 	.word	0x20000880

00024e6c <_free_r>:
   24e6c:	b538      	push	{r3, r4, r5, lr}
   24e6e:	4605      	mov	r5, r0
   24e70:	2900      	cmp	r1, #0
   24e72:	d041      	beq.n	24ef8 <_free_r+0x8c>
   24e74:	f851 3c04 	ldr.w	r3, [r1, #-4]
   24e78:	1f0c      	subs	r4, r1, #4
   24e7a:	2b00      	cmp	r3, #0
   24e7c:	bfb8      	it	lt
   24e7e:	18e4      	addlt	r4, r4, r3
   24e80:	f000 fe10 	bl	25aa4 <__malloc_lock>
   24e84:	4a1d      	ldr	r2, [pc, #116]	; (24efc <_free_r+0x90>)
   24e86:	6813      	ldr	r3, [r2, #0]
   24e88:	b933      	cbnz	r3, 24e98 <_free_r+0x2c>
   24e8a:	6063      	str	r3, [r4, #4]
   24e8c:	6014      	str	r4, [r2, #0]
   24e8e:	4628      	mov	r0, r5
   24e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   24e94:	f000 be0c 	b.w	25ab0 <__malloc_unlock>
   24e98:	42a3      	cmp	r3, r4
   24e9a:	d908      	bls.n	24eae <_free_r+0x42>
   24e9c:	6820      	ldr	r0, [r4, #0]
   24e9e:	1821      	adds	r1, r4, r0
   24ea0:	428b      	cmp	r3, r1
   24ea2:	bf01      	itttt	eq
   24ea4:	6819      	ldreq	r1, [r3, #0]
   24ea6:	685b      	ldreq	r3, [r3, #4]
   24ea8:	1809      	addeq	r1, r1, r0
   24eaa:	6021      	streq	r1, [r4, #0]
   24eac:	e7ed      	b.n	24e8a <_free_r+0x1e>
   24eae:	461a      	mov	r2, r3
   24eb0:	685b      	ldr	r3, [r3, #4]
   24eb2:	b10b      	cbz	r3, 24eb8 <_free_r+0x4c>
   24eb4:	42a3      	cmp	r3, r4
   24eb6:	d9fa      	bls.n	24eae <_free_r+0x42>
   24eb8:	6811      	ldr	r1, [r2, #0]
   24eba:	1850      	adds	r0, r2, r1
   24ebc:	42a0      	cmp	r0, r4
   24ebe:	d10b      	bne.n	24ed8 <_free_r+0x6c>
   24ec0:	6820      	ldr	r0, [r4, #0]
   24ec2:	4401      	add	r1, r0
   24ec4:	1850      	adds	r0, r2, r1
   24ec6:	4283      	cmp	r3, r0
   24ec8:	6011      	str	r1, [r2, #0]
   24eca:	d1e0      	bne.n	24e8e <_free_r+0x22>
   24ecc:	6818      	ldr	r0, [r3, #0]
   24ece:	685b      	ldr	r3, [r3, #4]
   24ed0:	6053      	str	r3, [r2, #4]
   24ed2:	4401      	add	r1, r0
   24ed4:	6011      	str	r1, [r2, #0]
   24ed6:	e7da      	b.n	24e8e <_free_r+0x22>
   24ed8:	d902      	bls.n	24ee0 <_free_r+0x74>
   24eda:	230c      	movs	r3, #12
   24edc:	602b      	str	r3, [r5, #0]
   24ede:	e7d6      	b.n	24e8e <_free_r+0x22>
   24ee0:	6820      	ldr	r0, [r4, #0]
   24ee2:	1821      	adds	r1, r4, r0
   24ee4:	428b      	cmp	r3, r1
   24ee6:	bf04      	itt	eq
   24ee8:	6819      	ldreq	r1, [r3, #0]
   24eea:	685b      	ldreq	r3, [r3, #4]
   24eec:	6063      	str	r3, [r4, #4]
   24eee:	bf04      	itt	eq
   24ef0:	1809      	addeq	r1, r1, r0
   24ef2:	6021      	streq	r1, [r4, #0]
   24ef4:	6054      	str	r4, [r2, #4]
   24ef6:	e7ca      	b.n	24e8e <_free_r+0x22>
   24ef8:	bd38      	pop	{r3, r4, r5, pc}
   24efa:	bf00      	nop
   24efc:	20006038 	.word	0x20006038

00024f00 <_malloc_r>:
   24f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24f02:	1ccd      	adds	r5, r1, #3
   24f04:	f025 0503 	bic.w	r5, r5, #3
   24f08:	3508      	adds	r5, #8
   24f0a:	2d0c      	cmp	r5, #12
   24f0c:	bf38      	it	cc
   24f0e:	250c      	movcc	r5, #12
   24f10:	2d00      	cmp	r5, #0
   24f12:	4606      	mov	r6, r0
   24f14:	db01      	blt.n	24f1a <_malloc_r+0x1a>
   24f16:	42a9      	cmp	r1, r5
   24f18:	d903      	bls.n	24f22 <_malloc_r+0x22>
   24f1a:	230c      	movs	r3, #12
   24f1c:	6033      	str	r3, [r6, #0]
   24f1e:	2000      	movs	r0, #0
   24f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24f22:	f000 fdbf 	bl	25aa4 <__malloc_lock>
   24f26:	4921      	ldr	r1, [pc, #132]	; (24fac <_malloc_r+0xac>)
   24f28:	680a      	ldr	r2, [r1, #0]
   24f2a:	4614      	mov	r4, r2
   24f2c:	b99c      	cbnz	r4, 24f56 <_malloc_r+0x56>
   24f2e:	4f20      	ldr	r7, [pc, #128]	; (24fb0 <_malloc_r+0xb0>)
   24f30:	683b      	ldr	r3, [r7, #0]
   24f32:	b923      	cbnz	r3, 24f3e <_malloc_r+0x3e>
   24f34:	4621      	mov	r1, r4
   24f36:	4630      	mov	r0, r6
   24f38:	f000 faaa 	bl	25490 <_sbrk_r>
   24f3c:	6038      	str	r0, [r7, #0]
   24f3e:	4629      	mov	r1, r5
   24f40:	4630      	mov	r0, r6
   24f42:	f000 faa5 	bl	25490 <_sbrk_r>
   24f46:	1c43      	adds	r3, r0, #1
   24f48:	d123      	bne.n	24f92 <_malloc_r+0x92>
   24f4a:	230c      	movs	r3, #12
   24f4c:	6033      	str	r3, [r6, #0]
   24f4e:	4630      	mov	r0, r6
   24f50:	f000 fdae 	bl	25ab0 <__malloc_unlock>
   24f54:	e7e3      	b.n	24f1e <_malloc_r+0x1e>
   24f56:	6823      	ldr	r3, [r4, #0]
   24f58:	1b5b      	subs	r3, r3, r5
   24f5a:	d417      	bmi.n	24f8c <_malloc_r+0x8c>
   24f5c:	2b0b      	cmp	r3, #11
   24f5e:	d903      	bls.n	24f68 <_malloc_r+0x68>
   24f60:	6023      	str	r3, [r4, #0]
   24f62:	441c      	add	r4, r3
   24f64:	6025      	str	r5, [r4, #0]
   24f66:	e004      	b.n	24f72 <_malloc_r+0x72>
   24f68:	6863      	ldr	r3, [r4, #4]
   24f6a:	42a2      	cmp	r2, r4
   24f6c:	bf0c      	ite	eq
   24f6e:	600b      	streq	r3, [r1, #0]
   24f70:	6053      	strne	r3, [r2, #4]
   24f72:	4630      	mov	r0, r6
   24f74:	f000 fd9c 	bl	25ab0 <__malloc_unlock>
   24f78:	f104 000b 	add.w	r0, r4, #11
   24f7c:	1d23      	adds	r3, r4, #4
   24f7e:	f020 0007 	bic.w	r0, r0, #7
   24f82:	1ac2      	subs	r2, r0, r3
   24f84:	d0cc      	beq.n	24f20 <_malloc_r+0x20>
   24f86:	1a1b      	subs	r3, r3, r0
   24f88:	50a3      	str	r3, [r4, r2]
   24f8a:	e7c9      	b.n	24f20 <_malloc_r+0x20>
   24f8c:	4622      	mov	r2, r4
   24f8e:	6864      	ldr	r4, [r4, #4]
   24f90:	e7cc      	b.n	24f2c <_malloc_r+0x2c>
   24f92:	1cc4      	adds	r4, r0, #3
   24f94:	f024 0403 	bic.w	r4, r4, #3
   24f98:	42a0      	cmp	r0, r4
   24f9a:	d0e3      	beq.n	24f64 <_malloc_r+0x64>
   24f9c:	1a21      	subs	r1, r4, r0
   24f9e:	4630      	mov	r0, r6
   24fa0:	f000 fa76 	bl	25490 <_sbrk_r>
   24fa4:	3001      	adds	r0, #1
   24fa6:	d1dd      	bne.n	24f64 <_malloc_r+0x64>
   24fa8:	e7cf      	b.n	24f4a <_malloc_r+0x4a>
   24faa:	bf00      	nop
   24fac:	20006038 	.word	0x20006038
   24fb0:	2000603c 	.word	0x2000603c

00024fb4 <_vfiprintf_r>:
   24fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24fb8:	460d      	mov	r5, r1
   24fba:	b09d      	sub	sp, #116	; 0x74
   24fbc:	4614      	mov	r4, r2
   24fbe:	4698      	mov	r8, r3
   24fc0:	4606      	mov	r6, r0
   24fc2:	b118      	cbz	r0, 24fcc <_vfiprintf_r+0x18>
   24fc4:	6983      	ldr	r3, [r0, #24]
   24fc6:	b90b      	cbnz	r3, 24fcc <_vfiprintf_r+0x18>
   24fc8:	f000 fcae 	bl	25928 <__sinit>
   24fcc:	4b89      	ldr	r3, [pc, #548]	; (251f4 <_vfiprintf_r+0x240>)
   24fce:	429d      	cmp	r5, r3
   24fd0:	d11b      	bne.n	2500a <_vfiprintf_r+0x56>
   24fd2:	6875      	ldr	r5, [r6, #4]
   24fd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   24fd6:	07d9      	lsls	r1, r3, #31
   24fd8:	d405      	bmi.n	24fe6 <_vfiprintf_r+0x32>
   24fda:	89ab      	ldrh	r3, [r5, #12]
   24fdc:	059a      	lsls	r2, r3, #22
   24fde:	d402      	bmi.n	24fe6 <_vfiprintf_r+0x32>
   24fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   24fe2:	f005 faa0 	bl	2a526 <__retarget_lock_acquire_recursive>
   24fe6:	89ab      	ldrh	r3, [r5, #12]
   24fe8:	071b      	lsls	r3, r3, #28
   24fea:	d501      	bpl.n	24ff0 <_vfiprintf_r+0x3c>
   24fec:	692b      	ldr	r3, [r5, #16]
   24fee:	b9eb      	cbnz	r3, 2502c <_vfiprintf_r+0x78>
   24ff0:	4629      	mov	r1, r5
   24ff2:	4630      	mov	r0, r6
   24ff4:	f000 fb2a 	bl	2564c <__swsetup_r>
   24ff8:	b1c0      	cbz	r0, 2502c <_vfiprintf_r+0x78>
   24ffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   24ffc:	07dc      	lsls	r4, r3, #31
   24ffe:	d50e      	bpl.n	2501e <_vfiprintf_r+0x6a>
   25000:	f04f 30ff 	mov.w	r0, #4294967295
   25004:	b01d      	add	sp, #116	; 0x74
   25006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2500a:	4b7b      	ldr	r3, [pc, #492]	; (251f8 <_vfiprintf_r+0x244>)
   2500c:	429d      	cmp	r5, r3
   2500e:	d101      	bne.n	25014 <_vfiprintf_r+0x60>
   25010:	68b5      	ldr	r5, [r6, #8]
   25012:	e7df      	b.n	24fd4 <_vfiprintf_r+0x20>
   25014:	4b79      	ldr	r3, [pc, #484]	; (251fc <_vfiprintf_r+0x248>)
   25016:	429d      	cmp	r5, r3
   25018:	bf08      	it	eq
   2501a:	68f5      	ldreq	r5, [r6, #12]
   2501c:	e7da      	b.n	24fd4 <_vfiprintf_r+0x20>
   2501e:	89ab      	ldrh	r3, [r5, #12]
   25020:	0598      	lsls	r0, r3, #22
   25022:	d4ed      	bmi.n	25000 <_vfiprintf_r+0x4c>
   25024:	6da8      	ldr	r0, [r5, #88]	; 0x58
   25026:	f005 fa84 	bl	2a532 <__retarget_lock_release_recursive>
   2502a:	e7e9      	b.n	25000 <_vfiprintf_r+0x4c>
   2502c:	2300      	movs	r3, #0
   2502e:	9309      	str	r3, [sp, #36]	; 0x24
   25030:	2320      	movs	r3, #32
   25032:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   25036:	f8cd 800c 	str.w	r8, [sp, #12]
   2503a:	2330      	movs	r3, #48	; 0x30
   2503c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 25200 <_vfiprintf_r+0x24c>
   25040:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   25044:	f04f 0901 	mov.w	r9, #1
   25048:	4623      	mov	r3, r4
   2504a:	469a      	mov	sl, r3
   2504c:	f813 2b01 	ldrb.w	r2, [r3], #1
   25050:	b10a      	cbz	r2, 25056 <_vfiprintf_r+0xa2>
   25052:	2a25      	cmp	r2, #37	; 0x25
   25054:	d1f9      	bne.n	2504a <_vfiprintf_r+0x96>
   25056:	ebba 0b04 	subs.w	fp, sl, r4
   2505a:	d00b      	beq.n	25074 <_vfiprintf_r+0xc0>
   2505c:	465b      	mov	r3, fp
   2505e:	4622      	mov	r2, r4
   25060:	4629      	mov	r1, r5
   25062:	4630      	mov	r0, r6
   25064:	f008 fef6 	bl	2de54 <__sfputs_r>
   25068:	3001      	adds	r0, #1
   2506a:	f000 80aa 	beq.w	251c2 <_vfiprintf_r+0x20e>
   2506e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25070:	445a      	add	r2, fp
   25072:	9209      	str	r2, [sp, #36]	; 0x24
   25074:	f89a 3000 	ldrb.w	r3, [sl]
   25078:	2b00      	cmp	r3, #0
   2507a:	f000 80a2 	beq.w	251c2 <_vfiprintf_r+0x20e>
   2507e:	2300      	movs	r3, #0
   25080:	f04f 32ff 	mov.w	r2, #4294967295
   25084:	e9cd 2305 	strd	r2, r3, [sp, #20]
   25088:	f10a 0a01 	add.w	sl, sl, #1
   2508c:	9304      	str	r3, [sp, #16]
   2508e:	9307      	str	r3, [sp, #28]
   25090:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   25094:	931a      	str	r3, [sp, #104]	; 0x68
   25096:	4654      	mov	r4, sl
   25098:	2205      	movs	r2, #5
   2509a:	f814 1b01 	ldrb.w	r1, [r4], #1
   2509e:	4858      	ldr	r0, [pc, #352]	; (25200 <_vfiprintf_r+0x24c>)
   250a0:	f7db f82e 	bl	100 <memchr>
   250a4:	9a04      	ldr	r2, [sp, #16]
   250a6:	b9d8      	cbnz	r0, 250e0 <_vfiprintf_r+0x12c>
   250a8:	06d1      	lsls	r1, r2, #27
   250aa:	bf44      	itt	mi
   250ac:	2320      	movmi	r3, #32
   250ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   250b2:	0713      	lsls	r3, r2, #28
   250b4:	bf44      	itt	mi
   250b6:	232b      	movmi	r3, #43	; 0x2b
   250b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   250bc:	f89a 3000 	ldrb.w	r3, [sl]
   250c0:	2b2a      	cmp	r3, #42	; 0x2a
   250c2:	d015      	beq.n	250f0 <_vfiprintf_r+0x13c>
   250c4:	9a07      	ldr	r2, [sp, #28]
   250c6:	4654      	mov	r4, sl
   250c8:	2000      	movs	r0, #0
   250ca:	f04f 0c0a 	mov.w	ip, #10
   250ce:	4621      	mov	r1, r4
   250d0:	f811 3b01 	ldrb.w	r3, [r1], #1
   250d4:	3b30      	subs	r3, #48	; 0x30
   250d6:	2b09      	cmp	r3, #9
   250d8:	d94e      	bls.n	25178 <_vfiprintf_r+0x1c4>
   250da:	b1b0      	cbz	r0, 2510a <_vfiprintf_r+0x156>
   250dc:	9207      	str	r2, [sp, #28]
   250de:	e014      	b.n	2510a <_vfiprintf_r+0x156>
   250e0:	eba0 0308 	sub.w	r3, r0, r8
   250e4:	fa09 f303 	lsl.w	r3, r9, r3
   250e8:	4313      	orrs	r3, r2
   250ea:	9304      	str	r3, [sp, #16]
   250ec:	46a2      	mov	sl, r4
   250ee:	e7d2      	b.n	25096 <_vfiprintf_r+0xe2>
   250f0:	9b03      	ldr	r3, [sp, #12]
   250f2:	1d19      	adds	r1, r3, #4
   250f4:	681b      	ldr	r3, [r3, #0]
   250f6:	9103      	str	r1, [sp, #12]
   250f8:	2b00      	cmp	r3, #0
   250fa:	bfbb      	ittet	lt
   250fc:	425b      	neglt	r3, r3
   250fe:	f042 0202 	orrlt.w	r2, r2, #2
   25102:	9307      	strge	r3, [sp, #28]
   25104:	9307      	strlt	r3, [sp, #28]
   25106:	bfb8      	it	lt
   25108:	9204      	strlt	r2, [sp, #16]
   2510a:	7823      	ldrb	r3, [r4, #0]
   2510c:	2b2e      	cmp	r3, #46	; 0x2e
   2510e:	d10c      	bne.n	2512a <_vfiprintf_r+0x176>
   25110:	7863      	ldrb	r3, [r4, #1]
   25112:	2b2a      	cmp	r3, #42	; 0x2a
   25114:	d135      	bne.n	25182 <_vfiprintf_r+0x1ce>
   25116:	9b03      	ldr	r3, [sp, #12]
   25118:	1d1a      	adds	r2, r3, #4
   2511a:	681b      	ldr	r3, [r3, #0]
   2511c:	9203      	str	r2, [sp, #12]
   2511e:	2b00      	cmp	r3, #0
   25120:	bfb8      	it	lt
   25122:	f04f 33ff 	movlt.w	r3, #4294967295
   25126:	3402      	adds	r4, #2
   25128:	9305      	str	r3, [sp, #20]
   2512a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 25204 <_vfiprintf_r+0x250>
   2512e:	7821      	ldrb	r1, [r4, #0]
   25130:	2203      	movs	r2, #3
   25132:	4650      	mov	r0, sl
   25134:	f7da ffe4 	bl	100 <memchr>
   25138:	b140      	cbz	r0, 2514c <_vfiprintf_r+0x198>
   2513a:	2340      	movs	r3, #64	; 0x40
   2513c:	eba0 000a 	sub.w	r0, r0, sl
   25140:	fa03 f000 	lsl.w	r0, r3, r0
   25144:	9b04      	ldr	r3, [sp, #16]
   25146:	4303      	orrs	r3, r0
   25148:	3401      	adds	r4, #1
   2514a:	9304      	str	r3, [sp, #16]
   2514c:	f814 1b01 	ldrb.w	r1, [r4], #1
   25150:	482d      	ldr	r0, [pc, #180]	; (25208 <_vfiprintf_r+0x254>)
   25152:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   25156:	2206      	movs	r2, #6
   25158:	f7da ffd2 	bl	100 <memchr>
   2515c:	2800      	cmp	r0, #0
   2515e:	d03f      	beq.n	251e0 <_vfiprintf_r+0x22c>
   25160:	4b2a      	ldr	r3, [pc, #168]	; (2520c <_vfiprintf_r+0x258>)
   25162:	bb1b      	cbnz	r3, 251ac <_vfiprintf_r+0x1f8>
   25164:	9b03      	ldr	r3, [sp, #12]
   25166:	3307      	adds	r3, #7
   25168:	f023 0307 	bic.w	r3, r3, #7
   2516c:	3308      	adds	r3, #8
   2516e:	9303      	str	r3, [sp, #12]
   25170:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25172:	443b      	add	r3, r7
   25174:	9309      	str	r3, [sp, #36]	; 0x24
   25176:	e767      	b.n	25048 <_vfiprintf_r+0x94>
   25178:	fb0c 3202 	mla	r2, ip, r2, r3
   2517c:	460c      	mov	r4, r1
   2517e:	2001      	movs	r0, #1
   25180:	e7a5      	b.n	250ce <_vfiprintf_r+0x11a>
   25182:	2300      	movs	r3, #0
   25184:	3401      	adds	r4, #1
   25186:	9305      	str	r3, [sp, #20]
   25188:	4619      	mov	r1, r3
   2518a:	f04f 0c0a 	mov.w	ip, #10
   2518e:	4620      	mov	r0, r4
   25190:	f810 2b01 	ldrb.w	r2, [r0], #1
   25194:	3a30      	subs	r2, #48	; 0x30
   25196:	2a09      	cmp	r2, #9
   25198:	d903      	bls.n	251a2 <_vfiprintf_r+0x1ee>
   2519a:	2b00      	cmp	r3, #0
   2519c:	d0c5      	beq.n	2512a <_vfiprintf_r+0x176>
   2519e:	9105      	str	r1, [sp, #20]
   251a0:	e7c3      	b.n	2512a <_vfiprintf_r+0x176>
   251a2:	fb0c 2101 	mla	r1, ip, r1, r2
   251a6:	4604      	mov	r4, r0
   251a8:	2301      	movs	r3, #1
   251aa:	e7f0      	b.n	2518e <_vfiprintf_r+0x1da>
   251ac:	ab03      	add	r3, sp, #12
   251ae:	9300      	str	r3, [sp, #0]
   251b0:	462a      	mov	r2, r5
   251b2:	4b17      	ldr	r3, [pc, #92]	; (25210 <_vfiprintf_r+0x25c>)
   251b4:	a904      	add	r1, sp, #16
   251b6:	4630      	mov	r0, r6
   251b8:	f3af 8000 	nop.w
   251bc:	4607      	mov	r7, r0
   251be:	1c78      	adds	r0, r7, #1
   251c0:	d1d6      	bne.n	25170 <_vfiprintf_r+0x1bc>
   251c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   251c4:	07d9      	lsls	r1, r3, #31
   251c6:	d405      	bmi.n	251d4 <_vfiprintf_r+0x220>
   251c8:	89ab      	ldrh	r3, [r5, #12]
   251ca:	059a      	lsls	r2, r3, #22
   251cc:	d402      	bmi.n	251d4 <_vfiprintf_r+0x220>
   251ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
   251d0:	f005 f9af 	bl	2a532 <__retarget_lock_release_recursive>
   251d4:	89ab      	ldrh	r3, [r5, #12]
   251d6:	065b      	lsls	r3, r3, #25
   251d8:	f53f af12 	bmi.w	25000 <_vfiprintf_r+0x4c>
   251dc:	9809      	ldr	r0, [sp, #36]	; 0x24
   251de:	e711      	b.n	25004 <_vfiprintf_r+0x50>
   251e0:	ab03      	add	r3, sp, #12
   251e2:	9300      	str	r3, [sp, #0]
   251e4:	462a      	mov	r2, r5
   251e6:	4b0a      	ldr	r3, [pc, #40]	; (25210 <_vfiprintf_r+0x25c>)
   251e8:	a904      	add	r1, sp, #16
   251ea:	4630      	mov	r0, r6
   251ec:	f000 f812 	bl	25214 <_printf_i>
   251f0:	e7e4      	b.n	251bc <_vfiprintf_r+0x208>
   251f2:	bf00      	nop
   251f4:	0002f45c 	.word	0x0002f45c
   251f8:	0002f47c 	.word	0x0002f47c
   251fc:	0002f43c 	.word	0x0002f43c
   25200:	00031f53 	.word	0x00031f53
   25204:	00031f59 	.word	0x00031f59
   25208:	00031f5d 	.word	0x00031f5d
   2520c:	00000000 	.word	0x00000000
   25210:	0002de55 	.word	0x0002de55

00025214 <_printf_i>:
   25214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   25218:	7e0f      	ldrb	r7, [r1, #24]
   2521a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2521c:	2f78      	cmp	r7, #120	; 0x78
   2521e:	4691      	mov	r9, r2
   25220:	4680      	mov	r8, r0
   25222:	460c      	mov	r4, r1
   25224:	469a      	mov	sl, r3
   25226:	f101 0243 	add.w	r2, r1, #67	; 0x43
   2522a:	d807      	bhi.n	2523c <_printf_i+0x28>
   2522c:	2f62      	cmp	r7, #98	; 0x62
   2522e:	d80a      	bhi.n	25246 <_printf_i+0x32>
   25230:	2f00      	cmp	r7, #0
   25232:	f000 80d8 	beq.w	253e6 <_printf_i+0x1d2>
   25236:	2f58      	cmp	r7, #88	; 0x58
   25238:	f000 80a3 	beq.w	25382 <_printf_i+0x16e>
   2523c:	f104 0542 	add.w	r5, r4, #66	; 0x42
   25240:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   25244:	e03a      	b.n	252bc <_printf_i+0xa8>
   25246:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   2524a:	2b15      	cmp	r3, #21
   2524c:	d8f6      	bhi.n	2523c <_printf_i+0x28>
   2524e:	a101      	add	r1, pc, #4	; (adr r1, 25254 <_printf_i+0x40>)
   25250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   25254:	000252ad 	.word	0x000252ad
   25258:	000252c1 	.word	0x000252c1
   2525c:	0002523d 	.word	0x0002523d
   25260:	0002523d 	.word	0x0002523d
   25264:	0002523d 	.word	0x0002523d
   25268:	0002523d 	.word	0x0002523d
   2526c:	000252c1 	.word	0x000252c1
   25270:	0002523d 	.word	0x0002523d
   25274:	0002523d 	.word	0x0002523d
   25278:	0002523d 	.word	0x0002523d
   2527c:	0002523d 	.word	0x0002523d
   25280:	000253cd 	.word	0x000253cd
   25284:	000252f1 	.word	0x000252f1
   25288:	000253af 	.word	0x000253af
   2528c:	0002523d 	.word	0x0002523d
   25290:	0002523d 	.word	0x0002523d
   25294:	000253ef 	.word	0x000253ef
   25298:	0002523d 	.word	0x0002523d
   2529c:	000252f1 	.word	0x000252f1
   252a0:	0002523d 	.word	0x0002523d
   252a4:	0002523d 	.word	0x0002523d
   252a8:	000253b7 	.word	0x000253b7
   252ac:	682b      	ldr	r3, [r5, #0]
   252ae:	1d1a      	adds	r2, r3, #4
   252b0:	681b      	ldr	r3, [r3, #0]
   252b2:	602a      	str	r2, [r5, #0]
   252b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
   252b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   252bc:	2301      	movs	r3, #1
   252be:	e0a3      	b.n	25408 <_printf_i+0x1f4>
   252c0:	6820      	ldr	r0, [r4, #0]
   252c2:	6829      	ldr	r1, [r5, #0]
   252c4:	0606      	lsls	r6, r0, #24
   252c6:	f101 0304 	add.w	r3, r1, #4
   252ca:	d50a      	bpl.n	252e2 <_printf_i+0xce>
   252cc:	680e      	ldr	r6, [r1, #0]
   252ce:	602b      	str	r3, [r5, #0]
   252d0:	2e00      	cmp	r6, #0
   252d2:	da03      	bge.n	252dc <_printf_i+0xc8>
   252d4:	232d      	movs	r3, #45	; 0x2d
   252d6:	4276      	negs	r6, r6
   252d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   252dc:	485e      	ldr	r0, [pc, #376]	; (25458 <_printf_i+0x244>)
   252de:	230a      	movs	r3, #10
   252e0:	e019      	b.n	25316 <_printf_i+0x102>
   252e2:	680e      	ldr	r6, [r1, #0]
   252e4:	602b      	str	r3, [r5, #0]
   252e6:	f010 0f40 	tst.w	r0, #64	; 0x40
   252ea:	bf18      	it	ne
   252ec:	b236      	sxthne	r6, r6
   252ee:	e7ef      	b.n	252d0 <_printf_i+0xbc>
   252f0:	682b      	ldr	r3, [r5, #0]
   252f2:	6820      	ldr	r0, [r4, #0]
   252f4:	1d19      	adds	r1, r3, #4
   252f6:	6029      	str	r1, [r5, #0]
   252f8:	0601      	lsls	r1, r0, #24
   252fa:	d501      	bpl.n	25300 <_printf_i+0xec>
   252fc:	681e      	ldr	r6, [r3, #0]
   252fe:	e002      	b.n	25306 <_printf_i+0xf2>
   25300:	0646      	lsls	r6, r0, #25
   25302:	d5fb      	bpl.n	252fc <_printf_i+0xe8>
   25304:	881e      	ldrh	r6, [r3, #0]
   25306:	4854      	ldr	r0, [pc, #336]	; (25458 <_printf_i+0x244>)
   25308:	2f6f      	cmp	r7, #111	; 0x6f
   2530a:	bf0c      	ite	eq
   2530c:	2308      	moveq	r3, #8
   2530e:	230a      	movne	r3, #10
   25310:	2100      	movs	r1, #0
   25312:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   25316:	6865      	ldr	r5, [r4, #4]
   25318:	60a5      	str	r5, [r4, #8]
   2531a:	2d00      	cmp	r5, #0
   2531c:	bfa2      	ittt	ge
   2531e:	6821      	ldrge	r1, [r4, #0]
   25320:	f021 0104 	bicge.w	r1, r1, #4
   25324:	6021      	strge	r1, [r4, #0]
   25326:	b90e      	cbnz	r6, 2532c <_printf_i+0x118>
   25328:	2d00      	cmp	r5, #0
   2532a:	d04d      	beq.n	253c8 <_printf_i+0x1b4>
   2532c:	4615      	mov	r5, r2
   2532e:	fbb6 f1f3 	udiv	r1, r6, r3
   25332:	fb03 6711 	mls	r7, r3, r1, r6
   25336:	5dc7      	ldrb	r7, [r0, r7]
   25338:	f805 7d01 	strb.w	r7, [r5, #-1]!
   2533c:	4637      	mov	r7, r6
   2533e:	42bb      	cmp	r3, r7
   25340:	460e      	mov	r6, r1
   25342:	d9f4      	bls.n	2532e <_printf_i+0x11a>
   25344:	2b08      	cmp	r3, #8
   25346:	d10b      	bne.n	25360 <_printf_i+0x14c>
   25348:	6823      	ldr	r3, [r4, #0]
   2534a:	07de      	lsls	r6, r3, #31
   2534c:	d508      	bpl.n	25360 <_printf_i+0x14c>
   2534e:	6923      	ldr	r3, [r4, #16]
   25350:	6861      	ldr	r1, [r4, #4]
   25352:	4299      	cmp	r1, r3
   25354:	bfde      	ittt	le
   25356:	2330      	movle	r3, #48	; 0x30
   25358:	f805 3c01 	strble.w	r3, [r5, #-1]
   2535c:	f105 35ff 	addle.w	r5, r5, #4294967295
   25360:	1b52      	subs	r2, r2, r5
   25362:	6122      	str	r2, [r4, #16]
   25364:	f8cd a000 	str.w	sl, [sp]
   25368:	464b      	mov	r3, r9
   2536a:	aa03      	add	r2, sp, #12
   2536c:	4621      	mov	r1, r4
   2536e:	4640      	mov	r0, r8
   25370:	f008 fd82 	bl	2de78 <_printf_common>
   25374:	3001      	adds	r0, #1
   25376:	d14c      	bne.n	25412 <_printf_i+0x1fe>
   25378:	f04f 30ff 	mov.w	r0, #4294967295
   2537c:	b004      	add	sp, #16
   2537e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25382:	4835      	ldr	r0, [pc, #212]	; (25458 <_printf_i+0x244>)
   25384:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
   25388:	6829      	ldr	r1, [r5, #0]
   2538a:	6823      	ldr	r3, [r4, #0]
   2538c:	f851 6b04 	ldr.w	r6, [r1], #4
   25390:	6029      	str	r1, [r5, #0]
   25392:	061d      	lsls	r5, r3, #24
   25394:	d514      	bpl.n	253c0 <_printf_i+0x1ac>
   25396:	07df      	lsls	r7, r3, #31
   25398:	bf44      	itt	mi
   2539a:	f043 0320 	orrmi.w	r3, r3, #32
   2539e:	6023      	strmi	r3, [r4, #0]
   253a0:	b91e      	cbnz	r6, 253aa <_printf_i+0x196>
   253a2:	6823      	ldr	r3, [r4, #0]
   253a4:	f023 0320 	bic.w	r3, r3, #32
   253a8:	6023      	str	r3, [r4, #0]
   253aa:	2310      	movs	r3, #16
   253ac:	e7b0      	b.n	25310 <_printf_i+0xfc>
   253ae:	6823      	ldr	r3, [r4, #0]
   253b0:	f043 0320 	orr.w	r3, r3, #32
   253b4:	6023      	str	r3, [r4, #0]
   253b6:	2378      	movs	r3, #120	; 0x78
   253b8:	4828      	ldr	r0, [pc, #160]	; (2545c <_printf_i+0x248>)
   253ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   253be:	e7e3      	b.n	25388 <_printf_i+0x174>
   253c0:	0659      	lsls	r1, r3, #25
   253c2:	bf48      	it	mi
   253c4:	b2b6      	uxthmi	r6, r6
   253c6:	e7e6      	b.n	25396 <_printf_i+0x182>
   253c8:	4615      	mov	r5, r2
   253ca:	e7bb      	b.n	25344 <_printf_i+0x130>
   253cc:	682b      	ldr	r3, [r5, #0]
   253ce:	6826      	ldr	r6, [r4, #0]
   253d0:	6961      	ldr	r1, [r4, #20]
   253d2:	1d18      	adds	r0, r3, #4
   253d4:	6028      	str	r0, [r5, #0]
   253d6:	0635      	lsls	r5, r6, #24
   253d8:	681b      	ldr	r3, [r3, #0]
   253da:	d501      	bpl.n	253e0 <_printf_i+0x1cc>
   253dc:	6019      	str	r1, [r3, #0]
   253de:	e002      	b.n	253e6 <_printf_i+0x1d2>
   253e0:	0670      	lsls	r0, r6, #25
   253e2:	d5fb      	bpl.n	253dc <_printf_i+0x1c8>
   253e4:	8019      	strh	r1, [r3, #0]
   253e6:	2300      	movs	r3, #0
   253e8:	6123      	str	r3, [r4, #16]
   253ea:	4615      	mov	r5, r2
   253ec:	e7ba      	b.n	25364 <_printf_i+0x150>
   253ee:	682b      	ldr	r3, [r5, #0]
   253f0:	1d1a      	adds	r2, r3, #4
   253f2:	602a      	str	r2, [r5, #0]
   253f4:	681d      	ldr	r5, [r3, #0]
   253f6:	6862      	ldr	r2, [r4, #4]
   253f8:	2100      	movs	r1, #0
   253fa:	4628      	mov	r0, r5
   253fc:	f7da fe80 	bl	100 <memchr>
   25400:	b108      	cbz	r0, 25406 <_printf_i+0x1f2>
   25402:	1b40      	subs	r0, r0, r5
   25404:	6060      	str	r0, [r4, #4]
   25406:	6863      	ldr	r3, [r4, #4]
   25408:	6123      	str	r3, [r4, #16]
   2540a:	2300      	movs	r3, #0
   2540c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   25410:	e7a8      	b.n	25364 <_printf_i+0x150>
   25412:	6923      	ldr	r3, [r4, #16]
   25414:	462a      	mov	r2, r5
   25416:	4649      	mov	r1, r9
   25418:	4640      	mov	r0, r8
   2541a:	47d0      	blx	sl
   2541c:	3001      	adds	r0, #1
   2541e:	d0ab      	beq.n	25378 <_printf_i+0x164>
   25420:	6823      	ldr	r3, [r4, #0]
   25422:	079b      	lsls	r3, r3, #30
   25424:	d413      	bmi.n	2544e <_printf_i+0x23a>
   25426:	68e0      	ldr	r0, [r4, #12]
   25428:	9b03      	ldr	r3, [sp, #12]
   2542a:	4298      	cmp	r0, r3
   2542c:	bfb8      	it	lt
   2542e:	4618      	movlt	r0, r3
   25430:	e7a4      	b.n	2537c <_printf_i+0x168>
   25432:	2301      	movs	r3, #1
   25434:	4632      	mov	r2, r6
   25436:	4649      	mov	r1, r9
   25438:	4640      	mov	r0, r8
   2543a:	47d0      	blx	sl
   2543c:	3001      	adds	r0, #1
   2543e:	d09b      	beq.n	25378 <_printf_i+0x164>
   25440:	3501      	adds	r5, #1
   25442:	68e3      	ldr	r3, [r4, #12]
   25444:	9903      	ldr	r1, [sp, #12]
   25446:	1a5b      	subs	r3, r3, r1
   25448:	42ab      	cmp	r3, r5
   2544a:	dcf2      	bgt.n	25432 <_printf_i+0x21e>
   2544c:	e7eb      	b.n	25426 <_printf_i+0x212>
   2544e:	2500      	movs	r5, #0
   25450:	f104 0619 	add.w	r6, r4, #25
   25454:	e7f5      	b.n	25442 <_printf_i+0x22e>
   25456:	bf00      	nop
   25458:	00031f64 	.word	0x00031f64
   2545c:	00031f75 	.word	0x00031f75

00025460 <iprintf>:
   25460:	b40f      	push	{r0, r1, r2, r3}
   25462:	4b0a      	ldr	r3, [pc, #40]	; (2548c <iprintf+0x2c>)
   25464:	b513      	push	{r0, r1, r4, lr}
   25466:	681c      	ldr	r4, [r3, #0]
   25468:	b124      	cbz	r4, 25474 <iprintf+0x14>
   2546a:	69a3      	ldr	r3, [r4, #24]
   2546c:	b913      	cbnz	r3, 25474 <iprintf+0x14>
   2546e:	4620      	mov	r0, r4
   25470:	f000 fa5a 	bl	25928 <__sinit>
   25474:	ab05      	add	r3, sp, #20
   25476:	9a04      	ldr	r2, [sp, #16]
   25478:	68a1      	ldr	r1, [r4, #8]
   2547a:	9301      	str	r3, [sp, #4]
   2547c:	4620      	mov	r0, r4
   2547e:	f7ff fd99 	bl	24fb4 <_vfiprintf_r>
   25482:	b002      	add	sp, #8
   25484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25488:	b004      	add	sp, #16
   2548a:	4770      	bx	lr
   2548c:	20000880 	.word	0x20000880

00025490 <_sbrk_r>:
   25490:	b538      	push	{r3, r4, r5, lr}
   25492:	4d06      	ldr	r5, [pc, #24]	; (254ac <_sbrk_r+0x1c>)
   25494:	2300      	movs	r3, #0
   25496:	4604      	mov	r4, r0
   25498:	4608      	mov	r0, r1
   2549a:	602b      	str	r3, [r5, #0]
   2549c:	f7f1 fdce 	bl	1703c <_sbrk>
   254a0:	1c43      	adds	r3, r0, #1
   254a2:	d102      	bne.n	254aa <_sbrk_r+0x1a>
   254a4:	682b      	ldr	r3, [r5, #0]
   254a6:	b103      	cbz	r3, 254aa <_sbrk_r+0x1a>
   254a8:	6023      	str	r3, [r4, #0]
   254aa:	bd38      	pop	{r3, r4, r5, pc}
   254ac:	20006040 	.word	0x20006040

000254b0 <_strtoul_l.constprop.0>:
   254b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   254b4:	4f36      	ldr	r7, [pc, #216]	; (25590 <_strtoul_l.constprop.0+0xe0>)
   254b6:	4686      	mov	lr, r0
   254b8:	460d      	mov	r5, r1
   254ba:	4628      	mov	r0, r5
   254bc:	f815 4b01 	ldrb.w	r4, [r5], #1
   254c0:	5de6      	ldrb	r6, [r4, r7]
   254c2:	f016 0608 	ands.w	r6, r6, #8
   254c6:	d1f8      	bne.n	254ba <_strtoul_l.constprop.0+0xa>
   254c8:	2c2d      	cmp	r4, #45	; 0x2d
   254ca:	d12f      	bne.n	2552c <_strtoul_l.constprop.0+0x7c>
   254cc:	782c      	ldrb	r4, [r5, #0]
   254ce:	2601      	movs	r6, #1
   254d0:	1c85      	adds	r5, r0, #2
   254d2:	2b00      	cmp	r3, #0
   254d4:	d057      	beq.n	25586 <_strtoul_l.constprop.0+0xd6>
   254d6:	2b10      	cmp	r3, #16
   254d8:	d109      	bne.n	254ee <_strtoul_l.constprop.0+0x3e>
   254da:	2c30      	cmp	r4, #48	; 0x30
   254dc:	d107      	bne.n	254ee <_strtoul_l.constprop.0+0x3e>
   254de:	7828      	ldrb	r0, [r5, #0]
   254e0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   254e4:	2858      	cmp	r0, #88	; 0x58
   254e6:	d149      	bne.n	2557c <_strtoul_l.constprop.0+0xcc>
   254e8:	786c      	ldrb	r4, [r5, #1]
   254ea:	2310      	movs	r3, #16
   254ec:	3502      	adds	r5, #2
   254ee:	f04f 38ff 	mov.w	r8, #4294967295
   254f2:	2700      	movs	r7, #0
   254f4:	fbb8 f8f3 	udiv	r8, r8, r3
   254f8:	fb03 f908 	mul.w	r9, r3, r8
   254fc:	ea6f 0909 	mvn.w	r9, r9
   25500:	4638      	mov	r0, r7
   25502:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   25506:	f1bc 0f09 	cmp.w	ip, #9
   2550a:	d814      	bhi.n	25536 <_strtoul_l.constprop.0+0x86>
   2550c:	4664      	mov	r4, ip
   2550e:	42a3      	cmp	r3, r4
   25510:	dd22      	ble.n	25558 <_strtoul_l.constprop.0+0xa8>
   25512:	2f00      	cmp	r7, #0
   25514:	db1d      	blt.n	25552 <_strtoul_l.constprop.0+0xa2>
   25516:	4580      	cmp	r8, r0
   25518:	d31b      	bcc.n	25552 <_strtoul_l.constprop.0+0xa2>
   2551a:	d101      	bne.n	25520 <_strtoul_l.constprop.0+0x70>
   2551c:	45a1      	cmp	r9, r4
   2551e:	db18      	blt.n	25552 <_strtoul_l.constprop.0+0xa2>
   25520:	fb00 4003 	mla	r0, r0, r3, r4
   25524:	2701      	movs	r7, #1
   25526:	f815 4b01 	ldrb.w	r4, [r5], #1
   2552a:	e7ea      	b.n	25502 <_strtoul_l.constprop.0+0x52>
   2552c:	2c2b      	cmp	r4, #43	; 0x2b
   2552e:	bf04      	itt	eq
   25530:	782c      	ldrbeq	r4, [r5, #0]
   25532:	1c85      	addeq	r5, r0, #2
   25534:	e7cd      	b.n	254d2 <_strtoul_l.constprop.0+0x22>
   25536:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   2553a:	f1bc 0f19 	cmp.w	ip, #25
   2553e:	d801      	bhi.n	25544 <_strtoul_l.constprop.0+0x94>
   25540:	3c37      	subs	r4, #55	; 0x37
   25542:	e7e4      	b.n	2550e <_strtoul_l.constprop.0+0x5e>
   25544:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   25548:	f1bc 0f19 	cmp.w	ip, #25
   2554c:	d804      	bhi.n	25558 <_strtoul_l.constprop.0+0xa8>
   2554e:	3c57      	subs	r4, #87	; 0x57
   25550:	e7dd      	b.n	2550e <_strtoul_l.constprop.0+0x5e>
   25552:	f04f 37ff 	mov.w	r7, #4294967295
   25556:	e7e6      	b.n	25526 <_strtoul_l.constprop.0+0x76>
   25558:	2f00      	cmp	r7, #0
   2555a:	da07      	bge.n	2556c <_strtoul_l.constprop.0+0xbc>
   2555c:	2322      	movs	r3, #34	; 0x22
   2555e:	f8ce 3000 	str.w	r3, [lr]
   25562:	f04f 30ff 	mov.w	r0, #4294967295
   25566:	b932      	cbnz	r2, 25576 <_strtoul_l.constprop.0+0xc6>
   25568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2556c:	b106      	cbz	r6, 25570 <_strtoul_l.constprop.0+0xc0>
   2556e:	4240      	negs	r0, r0
   25570:	2a00      	cmp	r2, #0
   25572:	d0f9      	beq.n	25568 <_strtoul_l.constprop.0+0xb8>
   25574:	b107      	cbz	r7, 25578 <_strtoul_l.constprop.0+0xc8>
   25576:	1e69      	subs	r1, r5, #1
   25578:	6011      	str	r1, [r2, #0]
   2557a:	e7f5      	b.n	25568 <_strtoul_l.constprop.0+0xb8>
   2557c:	2430      	movs	r4, #48	; 0x30
   2557e:	2b00      	cmp	r3, #0
   25580:	d1b5      	bne.n	254ee <_strtoul_l.constprop.0+0x3e>
   25582:	2308      	movs	r3, #8
   25584:	e7b3      	b.n	254ee <_strtoul_l.constprop.0+0x3e>
   25586:	2c30      	cmp	r4, #48	; 0x30
   25588:	d0a9      	beq.n	254de <_strtoul_l.constprop.0+0x2e>
   2558a:	230a      	movs	r3, #10
   2558c:	e7af      	b.n	254ee <_strtoul_l.constprop.0+0x3e>
   2558e:	bf00      	nop
   25590:	00031e53 	.word	0x00031e53

00025594 <strtoul>:
   25594:	4613      	mov	r3, r2
   25596:	460a      	mov	r2, r1
   25598:	4601      	mov	r1, r0
   2559a:	4802      	ldr	r0, [pc, #8]	; (255a4 <strtoul+0x10>)
   2559c:	6800      	ldr	r0, [r0, #0]
   2559e:	f7ff bf87 	b.w	254b0 <_strtoul_l.constprop.0>
   255a2:	bf00      	nop
   255a4:	20000880 	.word	0x20000880

000255a8 <__swbuf_r>:
   255a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   255aa:	460e      	mov	r6, r1
   255ac:	4614      	mov	r4, r2
   255ae:	4605      	mov	r5, r0
   255b0:	b118      	cbz	r0, 255ba <__swbuf_r+0x12>
   255b2:	6983      	ldr	r3, [r0, #24]
   255b4:	b90b      	cbnz	r3, 255ba <__swbuf_r+0x12>
   255b6:	f000 f9b7 	bl	25928 <__sinit>
   255ba:	4b21      	ldr	r3, [pc, #132]	; (25640 <__swbuf_r+0x98>)
   255bc:	429c      	cmp	r4, r3
   255be:	d12b      	bne.n	25618 <__swbuf_r+0x70>
   255c0:	686c      	ldr	r4, [r5, #4]
   255c2:	69a3      	ldr	r3, [r4, #24]
   255c4:	60a3      	str	r3, [r4, #8]
   255c6:	89a3      	ldrh	r3, [r4, #12]
   255c8:	071a      	lsls	r2, r3, #28
   255ca:	d52f      	bpl.n	2562c <__swbuf_r+0x84>
   255cc:	6923      	ldr	r3, [r4, #16]
   255ce:	b36b      	cbz	r3, 2562c <__swbuf_r+0x84>
   255d0:	6923      	ldr	r3, [r4, #16]
   255d2:	6820      	ldr	r0, [r4, #0]
   255d4:	1ac0      	subs	r0, r0, r3
   255d6:	6963      	ldr	r3, [r4, #20]
   255d8:	b2f6      	uxtb	r6, r6
   255da:	4283      	cmp	r3, r0
   255dc:	4637      	mov	r7, r6
   255de:	dc04      	bgt.n	255ea <__swbuf_r+0x42>
   255e0:	4621      	mov	r1, r4
   255e2:	4628      	mov	r0, r5
   255e4:	f000 f922 	bl	2582c <_fflush_r>
   255e8:	bb30      	cbnz	r0, 25638 <__swbuf_r+0x90>
   255ea:	68a3      	ldr	r3, [r4, #8]
   255ec:	3b01      	subs	r3, #1
   255ee:	60a3      	str	r3, [r4, #8]
   255f0:	6823      	ldr	r3, [r4, #0]
   255f2:	1c5a      	adds	r2, r3, #1
   255f4:	6022      	str	r2, [r4, #0]
   255f6:	701e      	strb	r6, [r3, #0]
   255f8:	6963      	ldr	r3, [r4, #20]
   255fa:	3001      	adds	r0, #1
   255fc:	4283      	cmp	r3, r0
   255fe:	d004      	beq.n	2560a <__swbuf_r+0x62>
   25600:	89a3      	ldrh	r3, [r4, #12]
   25602:	07db      	lsls	r3, r3, #31
   25604:	d506      	bpl.n	25614 <__swbuf_r+0x6c>
   25606:	2e0a      	cmp	r6, #10
   25608:	d104      	bne.n	25614 <__swbuf_r+0x6c>
   2560a:	4621      	mov	r1, r4
   2560c:	4628      	mov	r0, r5
   2560e:	f000 f90d 	bl	2582c <_fflush_r>
   25612:	b988      	cbnz	r0, 25638 <__swbuf_r+0x90>
   25614:	4638      	mov	r0, r7
   25616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25618:	4b0a      	ldr	r3, [pc, #40]	; (25644 <__swbuf_r+0x9c>)
   2561a:	429c      	cmp	r4, r3
   2561c:	d101      	bne.n	25622 <__swbuf_r+0x7a>
   2561e:	68ac      	ldr	r4, [r5, #8]
   25620:	e7cf      	b.n	255c2 <__swbuf_r+0x1a>
   25622:	4b09      	ldr	r3, [pc, #36]	; (25648 <__swbuf_r+0xa0>)
   25624:	429c      	cmp	r4, r3
   25626:	bf08      	it	eq
   25628:	68ec      	ldreq	r4, [r5, #12]
   2562a:	e7ca      	b.n	255c2 <__swbuf_r+0x1a>
   2562c:	4621      	mov	r1, r4
   2562e:	4628      	mov	r0, r5
   25630:	f000 f80c 	bl	2564c <__swsetup_r>
   25634:	2800      	cmp	r0, #0
   25636:	d0cb      	beq.n	255d0 <__swbuf_r+0x28>
   25638:	f04f 37ff 	mov.w	r7, #4294967295
   2563c:	e7ea      	b.n	25614 <__swbuf_r+0x6c>
   2563e:	bf00      	nop
   25640:	0002f45c 	.word	0x0002f45c
   25644:	0002f47c 	.word	0x0002f47c
   25648:	0002f43c 	.word	0x0002f43c

0002564c <__swsetup_r>:
   2564c:	4b32      	ldr	r3, [pc, #200]	; (25718 <__swsetup_r+0xcc>)
   2564e:	b570      	push	{r4, r5, r6, lr}
   25650:	681d      	ldr	r5, [r3, #0]
   25652:	4606      	mov	r6, r0
   25654:	460c      	mov	r4, r1
   25656:	b125      	cbz	r5, 25662 <__swsetup_r+0x16>
   25658:	69ab      	ldr	r3, [r5, #24]
   2565a:	b913      	cbnz	r3, 25662 <__swsetup_r+0x16>
   2565c:	4628      	mov	r0, r5
   2565e:	f000 f963 	bl	25928 <__sinit>
   25662:	4b2e      	ldr	r3, [pc, #184]	; (2571c <__swsetup_r+0xd0>)
   25664:	429c      	cmp	r4, r3
   25666:	d10f      	bne.n	25688 <__swsetup_r+0x3c>
   25668:	686c      	ldr	r4, [r5, #4]
   2566a:	89a3      	ldrh	r3, [r4, #12]
   2566c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   25670:	0719      	lsls	r1, r3, #28
   25672:	d42c      	bmi.n	256ce <__swsetup_r+0x82>
   25674:	06dd      	lsls	r5, r3, #27
   25676:	d411      	bmi.n	2569c <__swsetup_r+0x50>
   25678:	2309      	movs	r3, #9
   2567a:	6033      	str	r3, [r6, #0]
   2567c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   25680:	81a3      	strh	r3, [r4, #12]
   25682:	f04f 30ff 	mov.w	r0, #4294967295
   25686:	e03e      	b.n	25706 <__swsetup_r+0xba>
   25688:	4b25      	ldr	r3, [pc, #148]	; (25720 <__swsetup_r+0xd4>)
   2568a:	429c      	cmp	r4, r3
   2568c:	d101      	bne.n	25692 <__swsetup_r+0x46>
   2568e:	68ac      	ldr	r4, [r5, #8]
   25690:	e7eb      	b.n	2566a <__swsetup_r+0x1e>
   25692:	4b24      	ldr	r3, [pc, #144]	; (25724 <__swsetup_r+0xd8>)
   25694:	429c      	cmp	r4, r3
   25696:	bf08      	it	eq
   25698:	68ec      	ldreq	r4, [r5, #12]
   2569a:	e7e6      	b.n	2566a <__swsetup_r+0x1e>
   2569c:	0758      	lsls	r0, r3, #29
   2569e:	d512      	bpl.n	256c6 <__swsetup_r+0x7a>
   256a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   256a2:	b141      	cbz	r1, 256b6 <__swsetup_r+0x6a>
   256a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   256a8:	4299      	cmp	r1, r3
   256aa:	d002      	beq.n	256b2 <__swsetup_r+0x66>
   256ac:	4630      	mov	r0, r6
   256ae:	f7ff fbdd 	bl	24e6c <_free_r>
   256b2:	2300      	movs	r3, #0
   256b4:	6363      	str	r3, [r4, #52]	; 0x34
   256b6:	89a3      	ldrh	r3, [r4, #12]
   256b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   256bc:	81a3      	strh	r3, [r4, #12]
   256be:	2300      	movs	r3, #0
   256c0:	6063      	str	r3, [r4, #4]
   256c2:	6923      	ldr	r3, [r4, #16]
   256c4:	6023      	str	r3, [r4, #0]
   256c6:	89a3      	ldrh	r3, [r4, #12]
   256c8:	f043 0308 	orr.w	r3, r3, #8
   256cc:	81a3      	strh	r3, [r4, #12]
   256ce:	6923      	ldr	r3, [r4, #16]
   256d0:	b94b      	cbnz	r3, 256e6 <__swsetup_r+0x9a>
   256d2:	89a3      	ldrh	r3, [r4, #12]
   256d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
   256d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   256dc:	d003      	beq.n	256e6 <__swsetup_r+0x9a>
   256de:	4621      	mov	r1, r4
   256e0:	4630      	mov	r0, r6
   256e2:	f000 f99f 	bl	25a24 <__smakebuf_r>
   256e6:	89a0      	ldrh	r0, [r4, #12]
   256e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   256ec:	f010 0301 	ands.w	r3, r0, #1
   256f0:	d00a      	beq.n	25708 <__swsetup_r+0xbc>
   256f2:	2300      	movs	r3, #0
   256f4:	60a3      	str	r3, [r4, #8]
   256f6:	6963      	ldr	r3, [r4, #20]
   256f8:	425b      	negs	r3, r3
   256fa:	61a3      	str	r3, [r4, #24]
   256fc:	6923      	ldr	r3, [r4, #16]
   256fe:	b943      	cbnz	r3, 25712 <__swsetup_r+0xc6>
   25700:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   25704:	d1ba      	bne.n	2567c <__swsetup_r+0x30>
   25706:	bd70      	pop	{r4, r5, r6, pc}
   25708:	0781      	lsls	r1, r0, #30
   2570a:	bf58      	it	pl
   2570c:	6963      	ldrpl	r3, [r4, #20]
   2570e:	60a3      	str	r3, [r4, #8]
   25710:	e7f4      	b.n	256fc <__swsetup_r+0xb0>
   25712:	2000      	movs	r0, #0
   25714:	e7f7      	b.n	25706 <__swsetup_r+0xba>
   25716:	bf00      	nop
   25718:	20000880 	.word	0x20000880
   2571c:	0002f45c 	.word	0x0002f45c
   25720:	0002f47c 	.word	0x0002f47c
   25724:	0002f43c 	.word	0x0002f43c

00025728 <__sflush_r>:
   25728:	898a      	ldrh	r2, [r1, #12]
   2572a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2572c:	4605      	mov	r5, r0
   2572e:	0710      	lsls	r0, r2, #28
   25730:	460c      	mov	r4, r1
   25732:	d457      	bmi.n	257e4 <__sflush_r+0xbc>
   25734:	684b      	ldr	r3, [r1, #4]
   25736:	2b00      	cmp	r3, #0
   25738:	dc04      	bgt.n	25744 <__sflush_r+0x1c>
   2573a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   2573c:	2b00      	cmp	r3, #0
   2573e:	dc01      	bgt.n	25744 <__sflush_r+0x1c>
   25740:	2000      	movs	r0, #0
   25742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25744:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   25746:	2e00      	cmp	r6, #0
   25748:	d0fa      	beq.n	25740 <__sflush_r+0x18>
   2574a:	2300      	movs	r3, #0
   2574c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   25750:	682f      	ldr	r7, [r5, #0]
   25752:	602b      	str	r3, [r5, #0]
   25754:	d032      	beq.n	257bc <__sflush_r+0x94>
   25756:	6d60      	ldr	r0, [r4, #84]	; 0x54
   25758:	89a3      	ldrh	r3, [r4, #12]
   2575a:	075a      	lsls	r2, r3, #29
   2575c:	d505      	bpl.n	2576a <__sflush_r+0x42>
   2575e:	6863      	ldr	r3, [r4, #4]
   25760:	1ac0      	subs	r0, r0, r3
   25762:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25764:	b10b      	cbz	r3, 2576a <__sflush_r+0x42>
   25766:	6c23      	ldr	r3, [r4, #64]	; 0x40
   25768:	1ac0      	subs	r0, r0, r3
   2576a:	2300      	movs	r3, #0
   2576c:	4602      	mov	r2, r0
   2576e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   25770:	6a21      	ldr	r1, [r4, #32]
   25772:	4628      	mov	r0, r5
   25774:	47b0      	blx	r6
   25776:	1c43      	adds	r3, r0, #1
   25778:	89a3      	ldrh	r3, [r4, #12]
   2577a:	d106      	bne.n	2578a <__sflush_r+0x62>
   2577c:	6829      	ldr	r1, [r5, #0]
   2577e:	291d      	cmp	r1, #29
   25780:	d82c      	bhi.n	257dc <__sflush_r+0xb4>
   25782:	4a29      	ldr	r2, [pc, #164]	; (25828 <__sflush_r+0x100>)
   25784:	40ca      	lsrs	r2, r1
   25786:	07d6      	lsls	r6, r2, #31
   25788:	d528      	bpl.n	257dc <__sflush_r+0xb4>
   2578a:	2200      	movs	r2, #0
   2578c:	6062      	str	r2, [r4, #4]
   2578e:	04d9      	lsls	r1, r3, #19
   25790:	6922      	ldr	r2, [r4, #16]
   25792:	6022      	str	r2, [r4, #0]
   25794:	d504      	bpl.n	257a0 <__sflush_r+0x78>
   25796:	1c42      	adds	r2, r0, #1
   25798:	d101      	bne.n	2579e <__sflush_r+0x76>
   2579a:	682b      	ldr	r3, [r5, #0]
   2579c:	b903      	cbnz	r3, 257a0 <__sflush_r+0x78>
   2579e:	6560      	str	r0, [r4, #84]	; 0x54
   257a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   257a2:	602f      	str	r7, [r5, #0]
   257a4:	2900      	cmp	r1, #0
   257a6:	d0cb      	beq.n	25740 <__sflush_r+0x18>
   257a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   257ac:	4299      	cmp	r1, r3
   257ae:	d002      	beq.n	257b6 <__sflush_r+0x8e>
   257b0:	4628      	mov	r0, r5
   257b2:	f7ff fb5b 	bl	24e6c <_free_r>
   257b6:	2000      	movs	r0, #0
   257b8:	6360      	str	r0, [r4, #52]	; 0x34
   257ba:	e7c2      	b.n	25742 <__sflush_r+0x1a>
   257bc:	6a21      	ldr	r1, [r4, #32]
   257be:	2301      	movs	r3, #1
   257c0:	4628      	mov	r0, r5
   257c2:	47b0      	blx	r6
   257c4:	1c41      	adds	r1, r0, #1
   257c6:	d1c7      	bne.n	25758 <__sflush_r+0x30>
   257c8:	682b      	ldr	r3, [r5, #0]
   257ca:	2b00      	cmp	r3, #0
   257cc:	d0c4      	beq.n	25758 <__sflush_r+0x30>
   257ce:	2b1d      	cmp	r3, #29
   257d0:	d001      	beq.n	257d6 <__sflush_r+0xae>
   257d2:	2b16      	cmp	r3, #22
   257d4:	d101      	bne.n	257da <__sflush_r+0xb2>
   257d6:	602f      	str	r7, [r5, #0]
   257d8:	e7b2      	b.n	25740 <__sflush_r+0x18>
   257da:	89a3      	ldrh	r3, [r4, #12]
   257dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   257e0:	81a3      	strh	r3, [r4, #12]
   257e2:	e7ae      	b.n	25742 <__sflush_r+0x1a>
   257e4:	690f      	ldr	r7, [r1, #16]
   257e6:	2f00      	cmp	r7, #0
   257e8:	d0aa      	beq.n	25740 <__sflush_r+0x18>
   257ea:	0793      	lsls	r3, r2, #30
   257ec:	680e      	ldr	r6, [r1, #0]
   257ee:	bf08      	it	eq
   257f0:	694b      	ldreq	r3, [r1, #20]
   257f2:	600f      	str	r7, [r1, #0]
   257f4:	bf18      	it	ne
   257f6:	2300      	movne	r3, #0
   257f8:	1bf6      	subs	r6, r6, r7
   257fa:	608b      	str	r3, [r1, #8]
   257fc:	2e00      	cmp	r6, #0
   257fe:	dd9f      	ble.n	25740 <__sflush_r+0x18>
   25800:	6a21      	ldr	r1, [r4, #32]
   25802:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   25806:	4633      	mov	r3, r6
   25808:	463a      	mov	r2, r7
   2580a:	4628      	mov	r0, r5
   2580c:	47e0      	blx	ip
   2580e:	2800      	cmp	r0, #0
   25810:	dc06      	bgt.n	25820 <__sflush_r+0xf8>
   25812:	89a3      	ldrh	r3, [r4, #12]
   25814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25818:	81a3      	strh	r3, [r4, #12]
   2581a:	f04f 30ff 	mov.w	r0, #4294967295
   2581e:	e790      	b.n	25742 <__sflush_r+0x1a>
   25820:	4407      	add	r7, r0
   25822:	1a36      	subs	r6, r6, r0
   25824:	e7ea      	b.n	257fc <__sflush_r+0xd4>
   25826:	bf00      	nop
   25828:	20400001 	.word	0x20400001

0002582c <_fflush_r>:
   2582c:	b538      	push	{r3, r4, r5, lr}
   2582e:	690b      	ldr	r3, [r1, #16]
   25830:	4605      	mov	r5, r0
   25832:	460c      	mov	r4, r1
   25834:	b913      	cbnz	r3, 2583c <_fflush_r+0x10>
   25836:	2500      	movs	r5, #0
   25838:	4628      	mov	r0, r5
   2583a:	bd38      	pop	{r3, r4, r5, pc}
   2583c:	b118      	cbz	r0, 25846 <_fflush_r+0x1a>
   2583e:	6983      	ldr	r3, [r0, #24]
   25840:	b90b      	cbnz	r3, 25846 <_fflush_r+0x1a>
   25842:	f000 f871 	bl	25928 <__sinit>
   25846:	4b14      	ldr	r3, [pc, #80]	; (25898 <_fflush_r+0x6c>)
   25848:	429c      	cmp	r4, r3
   2584a:	d11b      	bne.n	25884 <_fflush_r+0x58>
   2584c:	686c      	ldr	r4, [r5, #4]
   2584e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25852:	2b00      	cmp	r3, #0
   25854:	d0ef      	beq.n	25836 <_fflush_r+0xa>
   25856:	6e62      	ldr	r2, [r4, #100]	; 0x64
   25858:	07d0      	lsls	r0, r2, #31
   2585a:	d404      	bmi.n	25866 <_fflush_r+0x3a>
   2585c:	0599      	lsls	r1, r3, #22
   2585e:	d402      	bmi.n	25866 <_fflush_r+0x3a>
   25860:	6da0      	ldr	r0, [r4, #88]	; 0x58
   25862:	f004 fe60 	bl	2a526 <__retarget_lock_acquire_recursive>
   25866:	4628      	mov	r0, r5
   25868:	4621      	mov	r1, r4
   2586a:	f7ff ff5d 	bl	25728 <__sflush_r>
   2586e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   25870:	07da      	lsls	r2, r3, #31
   25872:	4605      	mov	r5, r0
   25874:	d4e0      	bmi.n	25838 <_fflush_r+0xc>
   25876:	89a3      	ldrh	r3, [r4, #12]
   25878:	059b      	lsls	r3, r3, #22
   2587a:	d4dd      	bmi.n	25838 <_fflush_r+0xc>
   2587c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2587e:	f004 fe58 	bl	2a532 <__retarget_lock_release_recursive>
   25882:	e7d9      	b.n	25838 <_fflush_r+0xc>
   25884:	4b05      	ldr	r3, [pc, #20]	; (2589c <_fflush_r+0x70>)
   25886:	429c      	cmp	r4, r3
   25888:	d101      	bne.n	2588e <_fflush_r+0x62>
   2588a:	68ac      	ldr	r4, [r5, #8]
   2588c:	e7df      	b.n	2584e <_fflush_r+0x22>
   2588e:	4b04      	ldr	r3, [pc, #16]	; (258a0 <_fflush_r+0x74>)
   25890:	429c      	cmp	r4, r3
   25892:	bf08      	it	eq
   25894:	68ec      	ldreq	r4, [r5, #12]
   25896:	e7da      	b.n	2584e <_fflush_r+0x22>
   25898:	0002f45c 	.word	0x0002f45c
   2589c:	0002f47c 	.word	0x0002f47c
   258a0:	0002f43c 	.word	0x0002f43c

000258a4 <std>:
   258a4:	2300      	movs	r3, #0
   258a6:	b510      	push	{r4, lr}
   258a8:	4604      	mov	r4, r0
   258aa:	e9c0 3300 	strd	r3, r3, [r0]
   258ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
   258b2:	6083      	str	r3, [r0, #8]
   258b4:	8181      	strh	r1, [r0, #12]
   258b6:	6643      	str	r3, [r0, #100]	; 0x64
   258b8:	81c2      	strh	r2, [r0, #14]
   258ba:	6183      	str	r3, [r0, #24]
   258bc:	4619      	mov	r1, r3
   258be:	2208      	movs	r2, #8
   258c0:	305c      	adds	r0, #92	; 0x5c
   258c2:	f008 faaa 	bl	2de1a <memset>
   258c6:	4b05      	ldr	r3, [pc, #20]	; (258dc <std+0x38>)
   258c8:	6263      	str	r3, [r4, #36]	; 0x24
   258ca:	4b05      	ldr	r3, [pc, #20]	; (258e0 <std+0x3c>)
   258cc:	62a3      	str	r3, [r4, #40]	; 0x28
   258ce:	4b05      	ldr	r3, [pc, #20]	; (258e4 <std+0x40>)
   258d0:	62e3      	str	r3, [r4, #44]	; 0x2c
   258d2:	4b05      	ldr	r3, [pc, #20]	; (258e8 <std+0x44>)
   258d4:	6224      	str	r4, [r4, #32]
   258d6:	6323      	str	r3, [r4, #48]	; 0x30
   258d8:	bd10      	pop	{r4, pc}
   258da:	bf00      	nop
   258dc:	0002e0b1 	.word	0x0002e0b1
   258e0:	0002e0d3 	.word	0x0002e0d3
   258e4:	0002e10b 	.word	0x0002e10b
   258e8:	0002e12f 	.word	0x0002e12f

000258ec <_cleanup_r>:
   258ec:	4901      	ldr	r1, [pc, #4]	; (258f4 <_cleanup_r+0x8>)
   258ee:	f008 bb81 	b.w	2dff4 <_fwalk_reent>
   258f2:	bf00      	nop
   258f4:	0002582d 	.word	0x0002582d

000258f8 <__sfp_lock_acquire>:
   258f8:	4801      	ldr	r0, [pc, #4]	; (25900 <__sfp_lock_acquire+0x8>)
   258fa:	f004 be14 	b.w	2a526 <__retarget_lock_acquire_recursive>
   258fe:	bf00      	nop
   25900:	20000aec 	.word	0x20000aec

00025904 <__sfp_lock_release>:
   25904:	4801      	ldr	r0, [pc, #4]	; (2590c <__sfp_lock_release+0x8>)
   25906:	f004 be14 	b.w	2a532 <__retarget_lock_release_recursive>
   2590a:	bf00      	nop
   2590c:	20000aec 	.word	0x20000aec

00025910 <__sinit_lock_acquire>:
   25910:	4801      	ldr	r0, [pc, #4]	; (25918 <__sinit_lock_acquire+0x8>)
   25912:	f004 be08 	b.w	2a526 <__retarget_lock_acquire_recursive>
   25916:	bf00      	nop
   25918:	20000b00 	.word	0x20000b00

0002591c <__sinit_lock_release>:
   2591c:	4801      	ldr	r0, [pc, #4]	; (25924 <__sinit_lock_release+0x8>)
   2591e:	f004 be08 	b.w	2a532 <__retarget_lock_release_recursive>
   25922:	bf00      	nop
   25924:	20000b00 	.word	0x20000b00

00025928 <__sinit>:
   25928:	b510      	push	{r4, lr}
   2592a:	4604      	mov	r4, r0
   2592c:	f7ff fff0 	bl	25910 <__sinit_lock_acquire>
   25930:	69a3      	ldr	r3, [r4, #24]
   25932:	b11b      	cbz	r3, 2593c <__sinit+0x14>
   25934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25938:	f7ff bff0 	b.w	2591c <__sinit_lock_release>
   2593c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   25940:	6523      	str	r3, [r4, #80]	; 0x50
   25942:	4b13      	ldr	r3, [pc, #76]	; (25990 <__sinit+0x68>)
   25944:	4a13      	ldr	r2, [pc, #76]	; (25994 <__sinit+0x6c>)
   25946:	681b      	ldr	r3, [r3, #0]
   25948:	62a2      	str	r2, [r4, #40]	; 0x28
   2594a:	42a3      	cmp	r3, r4
   2594c:	bf04      	itt	eq
   2594e:	2301      	moveq	r3, #1
   25950:	61a3      	streq	r3, [r4, #24]
   25952:	4620      	mov	r0, r4
   25954:	f000 f820 	bl	25998 <__sfp>
   25958:	6060      	str	r0, [r4, #4]
   2595a:	4620      	mov	r0, r4
   2595c:	f000 f81c 	bl	25998 <__sfp>
   25960:	60a0      	str	r0, [r4, #8]
   25962:	4620      	mov	r0, r4
   25964:	f000 f818 	bl	25998 <__sfp>
   25968:	2200      	movs	r2, #0
   2596a:	60e0      	str	r0, [r4, #12]
   2596c:	2104      	movs	r1, #4
   2596e:	6860      	ldr	r0, [r4, #4]
   25970:	f7ff ff98 	bl	258a4 <std>
   25974:	68a0      	ldr	r0, [r4, #8]
   25976:	2201      	movs	r2, #1
   25978:	2109      	movs	r1, #9
   2597a:	f7ff ff93 	bl	258a4 <std>
   2597e:	68e0      	ldr	r0, [r4, #12]
   25980:	2202      	movs	r2, #2
   25982:	2112      	movs	r1, #18
   25984:	f7ff ff8e 	bl	258a4 <std>
   25988:	2301      	movs	r3, #1
   2598a:	61a3      	str	r3, [r4, #24]
   2598c:	e7d2      	b.n	25934 <__sinit+0xc>
   2598e:	bf00      	nop
   25990:	0002f438 	.word	0x0002f438
   25994:	000258ed 	.word	0x000258ed

00025998 <__sfp>:
   25998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2599a:	4607      	mov	r7, r0
   2599c:	f7ff ffac 	bl	258f8 <__sfp_lock_acquire>
   259a0:	4b1e      	ldr	r3, [pc, #120]	; (25a1c <__sfp+0x84>)
   259a2:	681e      	ldr	r6, [r3, #0]
   259a4:	69b3      	ldr	r3, [r6, #24]
   259a6:	b913      	cbnz	r3, 259ae <__sfp+0x16>
   259a8:	4630      	mov	r0, r6
   259aa:	f7ff ffbd 	bl	25928 <__sinit>
   259ae:	3648      	adds	r6, #72	; 0x48
   259b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   259b4:	3b01      	subs	r3, #1
   259b6:	d503      	bpl.n	259c0 <__sfp+0x28>
   259b8:	6833      	ldr	r3, [r6, #0]
   259ba:	b30b      	cbz	r3, 25a00 <__sfp+0x68>
   259bc:	6836      	ldr	r6, [r6, #0]
   259be:	e7f7      	b.n	259b0 <__sfp+0x18>
   259c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   259c4:	b9d5      	cbnz	r5, 259fc <__sfp+0x64>
   259c6:	4b16      	ldr	r3, [pc, #88]	; (25a20 <__sfp+0x88>)
   259c8:	60e3      	str	r3, [r4, #12]
   259ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
   259ce:	6665      	str	r5, [r4, #100]	; 0x64
   259d0:	f004 fd9f 	bl	2a512 <__retarget_lock_init_recursive>
   259d4:	f7ff ff96 	bl	25904 <__sfp_lock_release>
   259d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
   259dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
   259e0:	6025      	str	r5, [r4, #0]
   259e2:	61a5      	str	r5, [r4, #24]
   259e4:	2208      	movs	r2, #8
   259e6:	4629      	mov	r1, r5
   259e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   259ec:	f008 fa15 	bl	2de1a <memset>
   259f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   259f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   259f8:	4620      	mov	r0, r4
   259fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   259fc:	3468      	adds	r4, #104	; 0x68
   259fe:	e7d9      	b.n	259b4 <__sfp+0x1c>
   25a00:	2104      	movs	r1, #4
   25a02:	4638      	mov	r0, r7
   25a04:	f008 fae0 	bl	2dfc8 <__sfmoreglue>
   25a08:	4604      	mov	r4, r0
   25a0a:	6030      	str	r0, [r6, #0]
   25a0c:	2800      	cmp	r0, #0
   25a0e:	d1d5      	bne.n	259bc <__sfp+0x24>
   25a10:	f7ff ff78 	bl	25904 <__sfp_lock_release>
   25a14:	230c      	movs	r3, #12
   25a16:	603b      	str	r3, [r7, #0]
   25a18:	e7ee      	b.n	259f8 <__sfp+0x60>
   25a1a:	bf00      	nop
   25a1c:	0002f438 	.word	0x0002f438
   25a20:	ffff0001 	.word	0xffff0001

00025a24 <__smakebuf_r>:
   25a24:	898b      	ldrh	r3, [r1, #12]
   25a26:	b573      	push	{r0, r1, r4, r5, r6, lr}
   25a28:	079d      	lsls	r5, r3, #30
   25a2a:	4606      	mov	r6, r0
   25a2c:	460c      	mov	r4, r1
   25a2e:	d507      	bpl.n	25a40 <__smakebuf_r+0x1c>
   25a30:	f104 0347 	add.w	r3, r4, #71	; 0x47
   25a34:	6023      	str	r3, [r4, #0]
   25a36:	6123      	str	r3, [r4, #16]
   25a38:	2301      	movs	r3, #1
   25a3a:	6163      	str	r3, [r4, #20]
   25a3c:	b002      	add	sp, #8
   25a3e:	bd70      	pop	{r4, r5, r6, pc}
   25a40:	ab01      	add	r3, sp, #4
   25a42:	466a      	mov	r2, sp
   25a44:	f008 faf5 	bl	2e032 <__swhatbuf_r>
   25a48:	9900      	ldr	r1, [sp, #0]
   25a4a:	4605      	mov	r5, r0
   25a4c:	4630      	mov	r0, r6
   25a4e:	f7ff fa57 	bl	24f00 <_malloc_r>
   25a52:	b948      	cbnz	r0, 25a68 <__smakebuf_r+0x44>
   25a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25a58:	059a      	lsls	r2, r3, #22
   25a5a:	d4ef      	bmi.n	25a3c <__smakebuf_r+0x18>
   25a5c:	f023 0303 	bic.w	r3, r3, #3
   25a60:	f043 0302 	orr.w	r3, r3, #2
   25a64:	81a3      	strh	r3, [r4, #12]
   25a66:	e7e3      	b.n	25a30 <__smakebuf_r+0xc>
   25a68:	4b0d      	ldr	r3, [pc, #52]	; (25aa0 <__smakebuf_r+0x7c>)
   25a6a:	62b3      	str	r3, [r6, #40]	; 0x28
   25a6c:	89a3      	ldrh	r3, [r4, #12]
   25a6e:	6020      	str	r0, [r4, #0]
   25a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   25a74:	81a3      	strh	r3, [r4, #12]
   25a76:	9b00      	ldr	r3, [sp, #0]
   25a78:	6163      	str	r3, [r4, #20]
   25a7a:	9b01      	ldr	r3, [sp, #4]
   25a7c:	6120      	str	r0, [r4, #16]
   25a7e:	b15b      	cbz	r3, 25a98 <__smakebuf_r+0x74>
   25a80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   25a84:	4630      	mov	r0, r6
   25a86:	f000 f84d 	bl	25b24 <_isatty_r>
   25a8a:	b128      	cbz	r0, 25a98 <__smakebuf_r+0x74>
   25a8c:	89a3      	ldrh	r3, [r4, #12]
   25a8e:	f023 0303 	bic.w	r3, r3, #3
   25a92:	f043 0301 	orr.w	r3, r3, #1
   25a96:	81a3      	strh	r3, [r4, #12]
   25a98:	89a0      	ldrh	r0, [r4, #12]
   25a9a:	4305      	orrs	r5, r0
   25a9c:	81a5      	strh	r5, [r4, #12]
   25a9e:	e7cd      	b.n	25a3c <__smakebuf_r+0x18>
   25aa0:	000258ed 	.word	0x000258ed

00025aa4 <__malloc_lock>:
   25aa4:	4801      	ldr	r0, [pc, #4]	; (25aac <__malloc_lock+0x8>)
   25aa6:	f004 bd3e 	b.w	2a526 <__retarget_lock_acquire_recursive>
   25aaa:	bf00      	nop
   25aac:	20000ad8 	.word	0x20000ad8

00025ab0 <__malloc_unlock>:
   25ab0:	4801      	ldr	r0, [pc, #4]	; (25ab8 <__malloc_unlock+0x8>)
   25ab2:	f004 bd3e 	b.w	2a532 <__retarget_lock_release_recursive>
   25ab6:	bf00      	nop
   25ab8:	20000ad8 	.word	0x20000ad8

00025abc <_write_r>:
   25abc:	b538      	push	{r3, r4, r5, lr}
   25abe:	4d07      	ldr	r5, [pc, #28]	; (25adc <_write_r+0x20>)
   25ac0:	4604      	mov	r4, r0
   25ac2:	4608      	mov	r0, r1
   25ac4:	4611      	mov	r1, r2
   25ac6:	2200      	movs	r2, #0
   25ac8:	602a      	str	r2, [r5, #0]
   25aca:	461a      	mov	r2, r3
   25acc:	f004 fd0e 	bl	2a4ec <_write>
   25ad0:	1c43      	adds	r3, r0, #1
   25ad2:	d102      	bne.n	25ada <_write_r+0x1e>
   25ad4:	682b      	ldr	r3, [r5, #0]
   25ad6:	b103      	cbz	r3, 25ada <_write_r+0x1e>
   25ad8:	6023      	str	r3, [r4, #0]
   25ada:	bd38      	pop	{r3, r4, r5, pc}
   25adc:	20006040 	.word	0x20006040

00025ae0 <_close_r>:
   25ae0:	b538      	push	{r3, r4, r5, lr}
   25ae2:	4d06      	ldr	r5, [pc, #24]	; (25afc <_close_r+0x1c>)
   25ae4:	2300      	movs	r3, #0
   25ae6:	4604      	mov	r4, r0
   25ae8:	4608      	mov	r0, r1
   25aea:	602b      	str	r3, [r5, #0]
   25aec:	f004 fd02 	bl	2a4f4 <_close>
   25af0:	1c43      	adds	r3, r0, #1
   25af2:	d102      	bne.n	25afa <_close_r+0x1a>
   25af4:	682b      	ldr	r3, [r5, #0]
   25af6:	b103      	cbz	r3, 25afa <_close_r+0x1a>
   25af8:	6023      	str	r3, [r4, #0]
   25afa:	bd38      	pop	{r3, r4, r5, pc}
   25afc:	20006040 	.word	0x20006040

00025b00 <_fstat_r>:
   25b00:	b538      	push	{r3, r4, r5, lr}
   25b02:	4d07      	ldr	r5, [pc, #28]	; (25b20 <_fstat_r+0x20>)
   25b04:	2300      	movs	r3, #0
   25b06:	4604      	mov	r4, r0
   25b08:	4608      	mov	r0, r1
   25b0a:	4611      	mov	r1, r2
   25b0c:	602b      	str	r3, [r5, #0]
   25b0e:	f004 fcfb 	bl	2a508 <_fstat>
   25b12:	1c43      	adds	r3, r0, #1
   25b14:	d102      	bne.n	25b1c <_fstat_r+0x1c>
   25b16:	682b      	ldr	r3, [r5, #0]
   25b18:	b103      	cbz	r3, 25b1c <_fstat_r+0x1c>
   25b1a:	6023      	str	r3, [r4, #0]
   25b1c:	bd38      	pop	{r3, r4, r5, pc}
   25b1e:	bf00      	nop
   25b20:	20006040 	.word	0x20006040

00025b24 <_isatty_r>:
   25b24:	b538      	push	{r3, r4, r5, lr}
   25b26:	4d06      	ldr	r5, [pc, #24]	; (25b40 <_isatty_r+0x1c>)
   25b28:	2300      	movs	r3, #0
   25b2a:	4604      	mov	r4, r0
   25b2c:	4608      	mov	r0, r1
   25b2e:	602b      	str	r3, [r5, #0]
   25b30:	f004 fce5 	bl	2a4fe <_isatty>
   25b34:	1c43      	adds	r3, r0, #1
   25b36:	d102      	bne.n	25b3e <_isatty_r+0x1a>
   25b38:	682b      	ldr	r3, [r5, #0]
   25b3a:	b103      	cbz	r3, 25b3e <_isatty_r+0x1a>
   25b3c:	6023      	str	r3, [r4, #0]
   25b3e:	bd38      	pop	{r3, r4, r5, pc}
   25b40:	20006040 	.word	0x20006040

00025b44 <_lseek_r>:
   25b44:	b538      	push	{r3, r4, r5, lr}
   25b46:	4d07      	ldr	r5, [pc, #28]	; (25b64 <_lseek_r+0x20>)
   25b48:	4604      	mov	r4, r0
   25b4a:	4608      	mov	r0, r1
   25b4c:	4611      	mov	r1, r2
   25b4e:	2200      	movs	r2, #0
   25b50:	602a      	str	r2, [r5, #0]
   25b52:	461a      	mov	r2, r3
   25b54:	f004 fcd1 	bl	2a4fa <_lseek>
   25b58:	1c43      	adds	r3, r0, #1
   25b5a:	d102      	bne.n	25b62 <_lseek_r+0x1e>
   25b5c:	682b      	ldr	r3, [r5, #0]
   25b5e:	b103      	cbz	r3, 25b62 <_lseek_r+0x1e>
   25b60:	6023      	str	r3, [r4, #0]
   25b62:	bd38      	pop	{r3, r4, r5, pc}
   25b64:	20006040 	.word	0x20006040

00025b68 <_read_r>:
   25b68:	b538      	push	{r3, r4, r5, lr}
   25b6a:	4d07      	ldr	r5, [pc, #28]	; (25b88 <_read_r+0x20>)
   25b6c:	4604      	mov	r4, r0
   25b6e:	4608      	mov	r0, r1
   25b70:	4611      	mov	r1, r2
   25b72:	2200      	movs	r2, #0
   25b74:	602a      	str	r2, [r5, #0]
   25b76:	461a      	mov	r2, r3
   25b78:	f004 fcb4 	bl	2a4e4 <_read>
   25b7c:	1c43      	adds	r3, r0, #1
   25b7e:	d102      	bne.n	25b86 <_read_r+0x1e>
   25b80:	682b      	ldr	r3, [r5, #0]
   25b82:	b103      	cbz	r3, 25b86 <_read_r+0x1e>
   25b84:	6023      	str	r3, [r4, #0]
   25b86:	bd38      	pop	{r3, r4, r5, pc}
   25b88:	20006040 	.word	0x20006040

00025b8c <nrf_cc3xx_platform_init>:
   25b8c:	b510      	push	{r4, lr}
   25b8e:	4c0c      	ldr	r4, [pc, #48]	; (25bc0 <nrf_cc3xx_platform_init+0x34>)
   25b90:	6823      	ldr	r3, [r4, #0]
   25b92:	b113      	cbz	r3, 25b9a <nrf_cc3xx_platform_init+0xe>
   25b94:	4b0b      	ldr	r3, [pc, #44]	; (25bc4 <nrf_cc3xx_platform_init+0x38>)
   25b96:	681b      	ldr	r3, [r3, #0]
   25b98:	b92b      	cbnz	r3, 25ba6 <nrf_cc3xx_platform_init+0x1a>
   25b9a:	f000 fe7d 	bl	26898 <CC_LibInit>
   25b9e:	b930      	cbnz	r0, 25bae <nrf_cc3xx_platform_init+0x22>
   25ba0:	4b08      	ldr	r3, [pc, #32]	; (25bc4 <nrf_cc3xx_platform_init+0x38>)
   25ba2:	2201      	movs	r2, #1
   25ba4:	601a      	str	r2, [r3, #0]
   25ba6:	2301      	movs	r3, #1
   25ba8:	6023      	str	r3, [r4, #0]
   25baa:	2000      	movs	r0, #0
   25bac:	bd10      	pop	{r4, pc}
   25bae:	3801      	subs	r0, #1
   25bb0:	2806      	cmp	r0, #6
   25bb2:	d901      	bls.n	25bb8 <nrf_cc3xx_platform_init+0x2c>
   25bb4:	4804      	ldr	r0, [pc, #16]	; (25bc8 <nrf_cc3xx_platform_init+0x3c>)
   25bb6:	bd10      	pop	{r4, pc}
   25bb8:	4b04      	ldr	r3, [pc, #16]	; (25bcc <nrf_cc3xx_platform_init+0x40>)
   25bba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   25bbe:	bd10      	pop	{r4, pc}
   25bc0:	20006044 	.word	0x20006044
   25bc4:	20006048 	.word	0x20006048
   25bc8:	ffff8ffe 	.word	0xffff8ffe
   25bcc:	0002f49c 	.word	0x0002f49c

00025bd0 <nrf_cc3xx_platform_abort>:
   25bd0:	f3bf 8f4f 	dsb	sy
   25bd4:	4905      	ldr	r1, [pc, #20]	; (25bec <nrf_cc3xx_platform_abort+0x1c>)
   25bd6:	4b06      	ldr	r3, [pc, #24]	; (25bf0 <nrf_cc3xx_platform_abort+0x20>)
   25bd8:	68ca      	ldr	r2, [r1, #12]
   25bda:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   25bde:	4313      	orrs	r3, r2
   25be0:	60cb      	str	r3, [r1, #12]
   25be2:	f3bf 8f4f 	dsb	sy
   25be6:	bf00      	nop
   25be8:	e7fd      	b.n	25be6 <nrf_cc3xx_platform_abort+0x16>
   25bea:	bf00      	nop
   25bec:	e000ed00 	.word	0xe000ed00
   25bf0:	05fa0004 	.word	0x05fa0004

00025bf4 <CC_PalAbort>:
   25bf4:	b410      	push	{r4}
   25bf6:	4b09      	ldr	r3, [pc, #36]	; (25c1c <CC_PalAbort+0x28>)
   25bf8:	4909      	ldr	r1, [pc, #36]	; (25c20 <CC_PalAbort+0x2c>)
   25bfa:	4c0a      	ldr	r4, [pc, #40]	; (25c24 <CC_PalAbort+0x30>)
   25bfc:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   25c00:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   25c04:	6849      	ldr	r1, [r1, #4]
   25c06:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   25c0a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   25c0e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   25c12:	2300      	movs	r3, #0
   25c14:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   25c18:	bc10      	pop	{r4}
   25c1a:	4708      	bx	r1
   25c1c:	5002b000 	.word	0x5002b000
   25c20:	200008e4 	.word	0x200008e4
   25c24:	5002a000 	.word	0x5002a000

00025c28 <nrf_cc3xx_platform_set_abort>:
   25c28:	e9d0 1200 	ldrd	r1, r2, [r0]
   25c2c:	4b01      	ldr	r3, [pc, #4]	; (25c34 <nrf_cc3xx_platform_set_abort+0xc>)
   25c2e:	e9c3 1200 	strd	r1, r2, [r3]
   25c32:	4770      	bx	lr
   25c34:	200008e4 	.word	0x200008e4

00025c38 <nrf_cc3xx_platform_ctr_drbg_init>:
   25c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25c3c:	4c14      	ldr	r4, [pc, #80]	; (25c90 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   25c3e:	4e15      	ldr	r6, [pc, #84]	; (25c94 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   25c40:	2800      	cmp	r0, #0
   25c42:	bf18      	it	ne
   25c44:	4604      	movne	r4, r0
   25c46:	b083      	sub	sp, #12
   25c48:	6823      	ldr	r3, [r4, #0]
   25c4a:	42b3      	cmp	r3, r6
   25c4c:	d01c      	beq.n	25c88 <nrf_cc3xx_platform_ctr_drbg_init+0x50>
   25c4e:	460d      	mov	r5, r1
   25c50:	4620      	mov	r0, r4
   25c52:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   25c56:	f104 0904 	add.w	r9, r4, #4
   25c5a:	4617      	mov	r7, r2
   25c5c:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   25c60:	f000 f8d0 	bl	25e04 <mbedtls_platform_zeroize>
   25c64:	4648      	mov	r0, r9
   25c66:	f000 fd05 	bl	26674 <cc_mbedtls_entropy_init>
   25c6a:	4640      	mov	r0, r8
   25c6c:	f000 fb32 	bl	262d4 <cc_mbedtls_ctr_drbg_init>
   25c70:	4909      	ldr	r1, [pc, #36]	; (25c98 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   25c72:	9700      	str	r7, [sp, #0]
   25c74:	462b      	mov	r3, r5
   25c76:	464a      	mov	r2, r9
   25c78:	4640      	mov	r0, r8
   25c7a:	f000 fb41 	bl	26300 <cc_mbedtls_ctr_drbg_seed>
   25c7e:	b900      	cbnz	r0, 25c82 <nrf_cc3xx_platform_ctr_drbg_init+0x4a>
   25c80:	6026      	str	r6, [r4, #0]
   25c82:	b003      	add	sp, #12
   25c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25c88:	2000      	movs	r0, #0
   25c8a:	b003      	add	sp, #12
   25c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25c90:	2000604c 	.word	0x2000604c
   25c94:	5ac9bca5 	.word	0x5ac9bca5
   25c98:	000266f5 	.word	0x000266f5

00025c9c <nrf_cc3xx_platform_ctr_drbg_get>:
   25c9c:	b570      	push	{r4, r5, r6, lr}
   25c9e:	4d0d      	ldr	r5, [pc, #52]	; (25cd4 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   25ca0:	2800      	cmp	r0, #0
   25ca2:	bf18      	it	ne
   25ca4:	4605      	movne	r5, r0
   25ca6:	461e      	mov	r6, r3
   25ca8:	6828      	ldr	r0, [r5, #0]
   25caa:	4b0b      	ldr	r3, [pc, #44]	; (25cd8 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   25cac:	4298      	cmp	r0, r3
   25cae:	b082      	sub	sp, #8
   25cb0:	d10d      	bne.n	25cce <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   25cb2:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   25cb6:	2500      	movs	r5, #0
   25cb8:	9500      	str	r5, [sp, #0]
   25cba:	462b      	mov	r3, r5
   25cbc:	4614      	mov	r4, r2
   25cbe:	f000 fb6d 	bl	2639c <cc_mbedtls_ctr_drbg_random_with_add>
   25cc2:	2800      	cmp	r0, #0
   25cc4:	bf18      	it	ne
   25cc6:	462c      	movne	r4, r5
   25cc8:	6034      	str	r4, [r6, #0]
   25cca:	b002      	add	sp, #8
   25ccc:	bd70      	pop	{r4, r5, r6, pc}
   25cce:	4803      	ldr	r0, [pc, #12]	; (25cdc <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   25cd0:	e7fb      	b.n	25cca <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   25cd2:	bf00      	nop
   25cd4:	2000604c 	.word	0x2000604c
   25cd8:	5ac9bca5 	.word	0x5ac9bca5
   25cdc:	ffff8fe8 	.word	0xffff8fe8

00025ce0 <mutex_free>:
   25ce0:	b510      	push	{r4, lr}
   25ce2:	4604      	mov	r4, r0
   25ce4:	b130      	cbz	r0, 25cf4 <mutex_free+0x14>
   25ce6:	6863      	ldr	r3, [r4, #4]
   25ce8:	06db      	lsls	r3, r3, #27
   25cea:	d502      	bpl.n	25cf2 <mutex_free+0x12>
   25cec:	2300      	movs	r3, #0
   25cee:	6023      	str	r3, [r4, #0]
   25cf0:	6063      	str	r3, [r4, #4]
   25cf2:	bd10      	pop	{r4, pc}
   25cf4:	4b02      	ldr	r3, [pc, #8]	; (25d00 <mutex_free+0x20>)
   25cf6:	4803      	ldr	r0, [pc, #12]	; (25d04 <mutex_free+0x24>)
   25cf8:	685b      	ldr	r3, [r3, #4]
   25cfa:	4798      	blx	r3
   25cfc:	e7f3      	b.n	25ce6 <mutex_free+0x6>
   25cfe:	bf00      	nop
   25d00:	200008e4 	.word	0x200008e4
   25d04:	0002f4b8 	.word	0x0002f4b8

00025d08 <mutex_lock>:
   25d08:	b1b0      	cbz	r0, 25d38 <mutex_lock+0x30>
   25d0a:	6843      	ldr	r3, [r0, #4]
   25d0c:	b193      	cbz	r3, 25d34 <mutex_lock+0x2c>
   25d0e:	06db      	lsls	r3, r3, #27
   25d10:	d50e      	bpl.n	25d30 <mutex_lock+0x28>
   25d12:	2301      	movs	r3, #1
   25d14:	e850 2f00 	ldrex	r2, [r0]
   25d18:	4619      	mov	r1, r3
   25d1a:	e840 1c00 	strex	ip, r1, [r0]
   25d1e:	f09c 0f00 	teq	ip, #0
   25d22:	d1f7      	bne.n	25d14 <mutex_lock+0xc>
   25d24:	2a01      	cmp	r2, #1
   25d26:	d0f5      	beq.n	25d14 <mutex_lock+0xc>
   25d28:	f3bf 8f5f 	dmb	sy
   25d2c:	2000      	movs	r0, #0
   25d2e:	4770      	bx	lr
   25d30:	4803      	ldr	r0, [pc, #12]	; (25d40 <mutex_lock+0x38>)
   25d32:	4770      	bx	lr
   25d34:	4803      	ldr	r0, [pc, #12]	; (25d44 <mutex_lock+0x3c>)
   25d36:	4770      	bx	lr
   25d38:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   25d3c:	4770      	bx	lr
   25d3e:	bf00      	nop
   25d40:	ffff8fe9 	.word	0xffff8fe9
   25d44:	ffff8fea 	.word	0xffff8fea

00025d48 <mutex_unlock>:
   25d48:	b168      	cbz	r0, 25d66 <mutex_unlock+0x1e>
   25d4a:	6843      	ldr	r3, [r0, #4]
   25d4c:	b13b      	cbz	r3, 25d5e <mutex_unlock+0x16>
   25d4e:	06db      	lsls	r3, r3, #27
   25d50:	d507      	bpl.n	25d62 <mutex_unlock+0x1a>
   25d52:	f3bf 8f5f 	dmb	sy
   25d56:	2300      	movs	r3, #0
   25d58:	6003      	str	r3, [r0, #0]
   25d5a:	4618      	mov	r0, r3
   25d5c:	4770      	bx	lr
   25d5e:	4803      	ldr	r0, [pc, #12]	; (25d6c <mutex_unlock+0x24>)
   25d60:	4770      	bx	lr
   25d62:	4803      	ldr	r0, [pc, #12]	; (25d70 <mutex_unlock+0x28>)
   25d64:	4770      	bx	lr
   25d66:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   25d6a:	4770      	bx	lr
   25d6c:	ffff8fea 	.word	0xffff8fea
   25d70:	ffff8fe9 	.word	0xffff8fe9

00025d74 <mutex_init>:
   25d74:	b510      	push	{r4, lr}
   25d76:	4604      	mov	r4, r0
   25d78:	b120      	cbz	r0, 25d84 <mutex_init+0x10>
   25d7a:	2200      	movs	r2, #0
   25d7c:	2311      	movs	r3, #17
   25d7e:	6022      	str	r2, [r4, #0]
   25d80:	6063      	str	r3, [r4, #4]
   25d82:	bd10      	pop	{r4, pc}
   25d84:	4801      	ldr	r0, [pc, #4]	; (25d8c <mutex_init+0x18>)
   25d86:	f7ff ff35 	bl	25bf4 <CC_PalAbort>
   25d8a:	e7f6      	b.n	25d7a <mutex_init+0x6>
   25d8c:	0002f4e0 	.word	0x0002f4e0

00025d90 <nrf_cc3xx_platform_set_mutexes>:
   25d90:	b570      	push	{r4, r5, r6, lr}
   25d92:	e9d0 2300 	ldrd	r2, r3, [r0]
   25d96:	4c13      	ldr	r4, [pc, #76]	; (25de4 <nrf_cc3xx_platform_set_mutexes+0x54>)
   25d98:	4d13      	ldr	r5, [pc, #76]	; (25de8 <nrf_cc3xx_platform_set_mutexes+0x58>)
   25d9a:	6063      	str	r3, [r4, #4]
   25d9c:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   25da0:	e9c4 3002 	strd	r3, r0, [r4, #8]
   25da4:	6022      	str	r2, [r4, #0]
   25da6:	4b11      	ldr	r3, [pc, #68]	; (25dec <nrf_cc3xx_platform_set_mutexes+0x5c>)
   25da8:	6808      	ldr	r0, [r1, #0]
   25daa:	6018      	str	r0, [r3, #0]
   25dac:	6848      	ldr	r0, [r1, #4]
   25dae:	6058      	str	r0, [r3, #4]
   25db0:	6888      	ldr	r0, [r1, #8]
   25db2:	6098      	str	r0, [r3, #8]
   25db4:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   25db8:	60d8      	str	r0, [r3, #12]
   25dba:	6119      	str	r1, [r3, #16]
   25dbc:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   25dc0:	06db      	lsls	r3, r3, #27
   25dc2:	d50d      	bpl.n	25de0 <nrf_cc3xx_platform_set_mutexes+0x50>
   25dc4:	2300      	movs	r3, #0
   25dc6:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
   25dca:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
   25dce:	f505 708a 	add.w	r0, r5, #276	; 0x114
   25dd2:	4790      	blx	r2
   25dd4:	6823      	ldr	r3, [r4, #0]
   25dd6:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   25dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25dde:	4718      	bx	r3
   25de0:	bd70      	pop	{r4, r5, r6, pc}
   25de2:	bf00      	nop
   25de4:	200008f4 	.word	0x200008f4
   25de8:	2000604c 	.word	0x2000604c
   25dec:	20000904 	.word	0x20000904

00025df0 <mbedtls_zeroize_internal>:
   25df0:	b138      	cbz	r0, 25e02 <mbedtls_zeroize_internal+0x12>
   25df2:	b131      	cbz	r1, 25e02 <mbedtls_zeroize_internal+0x12>
   25df4:	4401      	add	r1, r0
   25df6:	2200      	movs	r2, #0
   25df8:	4603      	mov	r3, r0
   25dfa:	3001      	adds	r0, #1
   25dfc:	4281      	cmp	r1, r0
   25dfe:	701a      	strb	r2, [r3, #0]
   25e00:	d1fa      	bne.n	25df8 <mbedtls_zeroize_internal+0x8>
   25e02:	4770      	bx	lr

00025e04 <mbedtls_platform_zeroize>:
   25e04:	b138      	cbz	r0, 25e16 <mbedtls_platform_zeroize+0x12>
   25e06:	b131      	cbz	r1, 25e16 <mbedtls_platform_zeroize+0x12>
   25e08:	4401      	add	r1, r0
   25e0a:	2200      	movs	r2, #0
   25e0c:	4603      	mov	r3, r0
   25e0e:	3001      	adds	r0, #1
   25e10:	4288      	cmp	r0, r1
   25e12:	701a      	strb	r2, [r3, #0]
   25e14:	d1fa      	bne.n	25e0c <mbedtls_platform_zeroize+0x8>
   25e16:	4770      	bx	lr

00025e18 <block_cipher_df>:
   25e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25e1c:	b0b7      	sub	sp, #220	; 0xdc
   25e1e:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   25e22:	9005      	str	r0, [sp, #20]
   25e24:	f200 8147 	bhi.w	260b6 <block_cipher_df+0x29e>
   25e28:	4614      	mov	r4, r2
   25e2a:	460d      	mov	r5, r1
   25e2c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   25e30:	2100      	movs	r1, #0
   25e32:	48a2      	ldr	r0, [pc, #648]	; (260bc <block_cipher_df+0x2a4>)
   25e34:	f007 fff1 	bl	2de1a <memset>
   25e38:	a819      	add	r0, sp, #100	; 0x64
   25e3a:	f001 f9cb 	bl	271d4 <cc_mbedtls_aes_init>
   25e3e:	489f      	ldr	r0, [pc, #636]	; (260bc <block_cipher_df+0x2a4>)
   25e40:	2300      	movs	r3, #0
   25e42:	8203      	strh	r3, [r0, #16]
   25e44:	ba63      	rev16	r3, r4
   25e46:	8243      	strh	r3, [r0, #18]
   25e48:	2320      	movs	r3, #32
   25e4a:	4629      	mov	r1, r5
   25e4c:	75c3      	strb	r3, [r0, #23]
   25e4e:	4605      	mov	r5, r0
   25e50:	4622      	mov	r2, r4
   25e52:	3018      	adds	r0, #24
   25e54:	f007 ffc0 	bl	2ddd8 <memcpy>
   25e58:	462b      	mov	r3, r5
   25e5a:	4423      	add	r3, r4
   25e5c:	2280      	movs	r2, #128	; 0x80
   25e5e:	761a      	strb	r2, [r3, #24]
   25e60:	4b97      	ldr	r3, [pc, #604]	; (260c0 <block_cipher_df+0x2a8>)
   25e62:	930d      	str	r3, [sp, #52]	; 0x34
   25e64:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   25e68:	930e      	str	r3, [sp, #56]	; 0x38
   25e6a:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   25e6e:	930f      	str	r3, [sp, #60]	; 0x3c
   25e70:	a90d      	add	r1, sp, #52	; 0x34
   25e72:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   25e76:	a819      	add	r0, sp, #100	; 0x64
   25e78:	9310      	str	r3, [sp, #64]	; 0x40
   25e7a:	f001 f9c1 	bl	27200 <cc_mbedtls_aes_setkey_enc>
   25e7e:	4605      	mov	r5, r0
   25e80:	2800      	cmp	r0, #0
   25e82:	f040 80f4 	bne.w	2606e <block_cipher_df+0x256>
   25e86:	f104 0319 	add.w	r3, r4, #25
   25e8a:	9306      	str	r3, [sp, #24]
   25e8c:	f10d 0820 	add.w	r8, sp, #32
   25e90:	ab11      	add	r3, sp, #68	; 0x44
   25e92:	9304      	str	r3, [sp, #16]
   25e94:	9307      	str	r3, [sp, #28]
   25e96:	46c1      	mov	r9, r8
   25e98:	2210      	movs	r2, #16
   25e9a:	2100      	movs	r1, #0
   25e9c:	4648      	mov	r0, r9
   25e9e:	f007 ffbc 	bl	2de1a <memset>
   25ea2:	f8df a220 	ldr.w	sl, [pc, #544]	; 260c4 <block_cipher_df+0x2ac>
   25ea6:	9b06      	ldr	r3, [sp, #24]
   25ea8:	9300      	str	r3, [sp, #0]
   25eaa:	f8cd 900c 	str.w	r9, [sp, #12]
   25eae:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
   25eb2:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
   25eb6:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
   25eba:	f89d 5020 	ldrb.w	r5, [sp, #32]
   25ebe:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   25ec2:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
   25ec6:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
   25eca:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
   25ece:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   25ed2:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
   25ed6:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
   25eda:	406a      	eors	r2, r5
   25edc:	ea8e 0e00 	eor.w	lr, lr, r0
   25ee0:	9d00      	ldr	r5, [sp, #0]
   25ee2:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   25ee6:	9202      	str	r2, [sp, #8]
   25ee8:	ea8c 0c03 	eor.w	ip, ip, r3
   25eec:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
   25ef0:	f81a 2c0f 	ldrb.w	r2, [sl, #-15]
   25ef4:	2d10      	cmp	r5, #16
   25ef6:	ea80 0003 	eor.w	r0, r0, r3
   25efa:	462b      	mov	r3, r5
   25efc:	bf8c      	ite	hi
   25efe:	3b10      	subhi	r3, #16
   25f00:	1b6b      	subls	r3, r5, r5
   25f02:	9300      	str	r3, [sp, #0]
   25f04:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
   25f08:	f81a 3c03 	ldrb.w	r3, [sl, #-3]
   25f0c:	f81a 9c0e 	ldrb.w	r9, [sl, #-14]
   25f10:	f81a 8c0a 	ldrb.w	r8, [sl, #-10]
   25f14:	4061      	eors	r1, r4
   25f16:	405f      	eors	r7, r3
   25f18:	2400      	movs	r4, #0
   25f1a:	406a      	eors	r2, r5
   25f1c:	ea8b 0b06 	eor.w	fp, fp, r6
   25f20:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   25f24:	f81a 6c02 	ldrb.w	r6, [sl, #-2]
   25f28:	f81a 3c0b 	ldrb.w	r3, [sl, #-11]
   25f2c:	9601      	str	r6, [sp, #4]
   25f2e:	4626      	mov	r6, r4
   25f30:	406b      	eors	r3, r5
   25f32:	f36b 0607 	bfi	r6, fp, #0, #8
   25f36:	4625      	mov	r5, r4
   25f38:	f367 260f 	bfi	r6, r7, #8, #8
   25f3c:	462f      	mov	r7, r5
   25f3e:	f361 0707 	bfi	r7, r1, #0, #8
   25f42:	9902      	ldr	r1, [sp, #8]
   25f44:	f361 0507 	bfi	r5, r1, #0, #8
   25f48:	f362 250f 	bfi	r5, r2, #8, #8
   25f4c:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   25f50:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
   25f54:	f363 270f 	bfi	r7, r3, #8, #8
   25f58:	ea82 0909 	eor.w	r9, r2, r9
   25f5c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   25f60:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   25f64:	ea83 0808 	eor.w	r8, r3, r8
   25f68:	404a      	eors	r2, r1
   25f6a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   25f6e:	f81a 1c09 	ldrb.w	r1, [sl, #-9]
   25f72:	f36e 0407 	bfi	r4, lr, #0, #8
   25f76:	404b      	eors	r3, r1
   25f78:	f368 4717 	bfi	r7, r8, #16, #8
   25f7c:	f36c 240f 	bfi	r4, ip, #8, #8
   25f80:	f363 671f 	bfi	r7, r3, #24, #8
   25f84:	9b03      	ldr	r3, [sp, #12]
   25f86:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
   25f8a:	f8dd e004 	ldr.w	lr, [sp, #4]
   25f8e:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
   25f92:	ea8c 0c0e 	eor.w	ip, ip, lr
   25f96:	f36c 4617 	bfi	r6, ip, #16, #8
   25f9a:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
   25f9e:	f81a ec05 	ldrb.w	lr, [sl, #-5]
   25fa2:	ea8c 0c08 	eor.w	ip, ip, r8
   25fa6:	f36c 661f 	bfi	r6, ip, #24, #8
   25faa:	f369 4517 	bfi	r5, r9, #16, #8
   25fae:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
   25fb2:	960b      	str	r6, [sp, #44]	; 0x2c
   25fb4:	f362 651f 	bfi	r5, r2, #24, #8
   25fb8:	f360 4417 	bfi	r4, r0, #16, #8
   25fbc:	9508      	str	r5, [sp, #32]
   25fbe:	ea8c 050e 	eor.w	r5, ip, lr
   25fc2:	f365 641f 	bfi	r4, r5, #24, #8
   25fc6:	461a      	mov	r2, r3
   25fc8:	2101      	movs	r1, #1
   25fca:	a819      	add	r0, sp, #100	; 0x64
   25fcc:	f10a 0a10 	add.w	sl, sl, #16
   25fd0:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
   25fd4:	f001 f92e 	bl	27234 <cc_mbedtls_aes_crypt_ecb>
   25fd8:	2800      	cmp	r0, #0
   25fda:	d168      	bne.n	260ae <block_cipher_df+0x296>
   25fdc:	9b00      	ldr	r3, [sp, #0]
   25fde:	2b00      	cmp	r3, #0
   25fe0:	f47f af65 	bne.w	25eae <block_cipher_df+0x96>
   25fe4:	9c07      	ldr	r4, [sp, #28]
   25fe6:	f8dd 900c 	ldr.w	r9, [sp, #12]
   25fea:	4620      	mov	r0, r4
   25fec:	2210      	movs	r2, #16
   25fee:	3410      	adds	r4, #16
   25ff0:	4649      	mov	r1, r9
   25ff2:	9407      	str	r4, [sp, #28]
   25ff4:	f007 fef0 	bl	2ddd8 <memcpy>
   25ff8:	4a30      	ldr	r2, [pc, #192]	; (260bc <block_cipher_df+0x2a4>)
   25ffa:	78d3      	ldrb	r3, [r2, #3]
   25ffc:	3301      	adds	r3, #1
   25ffe:	70d3      	strb	r3, [r2, #3]
   26000:	ab19      	add	r3, sp, #100	; 0x64
   26002:	429c      	cmp	r4, r3
   26004:	f47f af48 	bne.w	25e98 <block_cipher_df+0x80>
   26008:	9904      	ldr	r1, [sp, #16]
   2600a:	2280      	movs	r2, #128	; 0x80
   2600c:	4618      	mov	r0, r3
   2600e:	f001 f8f7 	bl	27200 <cc_mbedtls_aes_setkey_enc>
   26012:	46c8      	mov	r8, r9
   26014:	4605      	mov	r5, r0
   26016:	bb70      	cbnz	r0, 26076 <block_cipher_df+0x25e>
   26018:	9c05      	ldr	r4, [sp, #20]
   2601a:	f104 0620 	add.w	r6, r4, #32
   2601e:	ab15      	add	r3, sp, #84	; 0x54
   26020:	461a      	mov	r2, r3
   26022:	2101      	movs	r1, #1
   26024:	a819      	add	r0, sp, #100	; 0x64
   26026:	f001 f905 	bl	27234 <cc_mbedtls_aes_crypt_ecb>
   2602a:	2210      	movs	r2, #16
   2602c:	4605      	mov	r5, r0
   2602e:	bb10      	cbnz	r0, 26076 <block_cipher_df+0x25e>
   26030:	4620      	mov	r0, r4
   26032:	a915      	add	r1, sp, #84	; 0x54
   26034:	3410      	adds	r4, #16
   26036:	f007 fecf 	bl	2ddd8 <memcpy>
   2603a:	42b4      	cmp	r4, r6
   2603c:	d1ef      	bne.n	2601e <block_cipher_df+0x206>
   2603e:	a819      	add	r0, sp, #100	; 0x64
   26040:	f001 f8d8 	bl	271f4 <cc_mbedtls_aes_free>
   26044:	481d      	ldr	r0, [pc, #116]	; (260bc <block_cipher_df+0x2a4>)
   26046:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   2604a:	f7ff fedb 	bl	25e04 <mbedtls_platform_zeroize>
   2604e:	9804      	ldr	r0, [sp, #16]
   26050:	2120      	movs	r1, #32
   26052:	f7ff fed7 	bl	25e04 <mbedtls_platform_zeroize>
   26056:	a80d      	add	r0, sp, #52	; 0x34
   26058:	2110      	movs	r1, #16
   2605a:	f7ff fed3 	bl	25e04 <mbedtls_platform_zeroize>
   2605e:	4640      	mov	r0, r8
   26060:	2110      	movs	r1, #16
   26062:	f7ff fecf 	bl	25e04 <mbedtls_platform_zeroize>
   26066:	4628      	mov	r0, r5
   26068:	b037      	add	sp, #220	; 0xdc
   2606a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2606e:	ab11      	add	r3, sp, #68	; 0x44
   26070:	9304      	str	r3, [sp, #16]
   26072:	f10d 0820 	add.w	r8, sp, #32
   26076:	a819      	add	r0, sp, #100	; 0x64
   26078:	f001 f8bc 	bl	271f4 <cc_mbedtls_aes_free>
   2607c:	480f      	ldr	r0, [pc, #60]	; (260bc <block_cipher_df+0x2a4>)
   2607e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   26082:	f7ff febf 	bl	25e04 <mbedtls_platform_zeroize>
   26086:	9804      	ldr	r0, [sp, #16]
   26088:	2120      	movs	r1, #32
   2608a:	f7ff febb 	bl	25e04 <mbedtls_platform_zeroize>
   2608e:	a80d      	add	r0, sp, #52	; 0x34
   26090:	2110      	movs	r1, #16
   26092:	f7ff feb7 	bl	25e04 <mbedtls_platform_zeroize>
   26096:	4640      	mov	r0, r8
   26098:	2110      	movs	r1, #16
   2609a:	f7ff feb3 	bl	25e04 <mbedtls_platform_zeroize>
   2609e:	9805      	ldr	r0, [sp, #20]
   260a0:	2120      	movs	r1, #32
   260a2:	f7ff feaf 	bl	25e04 <mbedtls_platform_zeroize>
   260a6:	4628      	mov	r0, r5
   260a8:	b037      	add	sp, #220	; 0xdc
   260aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   260ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
   260b2:	4605      	mov	r5, r0
   260b4:	e7df      	b.n	26076 <block_cipher_df+0x25e>
   260b6:	f06f 0537 	mvn.w	r5, #55	; 0x37
   260ba:	e7f4      	b.n	260a6 <block_cipher_df+0x28e>
   260bc:	2000621c 	.word	0x2000621c
   260c0:	03020100 	.word	0x03020100
   260c4:	2000622c 	.word	0x2000622c

000260c8 <ctr_drbg_update_internal>:
   260c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   260cc:	b088      	sub	sp, #32
   260ce:	4604      	mov	r4, r0
   260d0:	460d      	mov	r5, r1
   260d2:	2220      	movs	r2, #32
   260d4:	2100      	movs	r1, #0
   260d6:	4668      	mov	r0, sp
   260d8:	f007 fe9f 	bl	2de1a <memset>
   260dc:	f104 0620 	add.w	r6, r4, #32
   260e0:	466f      	mov	r7, sp
   260e2:	7be2      	ldrb	r2, [r4, #15]
   260e4:	3201      	adds	r2, #1
   260e6:	b2d2      	uxtb	r2, r2
   260e8:	73e2      	strb	r2, [r4, #15]
   260ea:	2a00      	cmp	r2, #0
   260ec:	d14d      	bne.n	2618a <ctr_drbg_update_internal+0xc2>
   260ee:	7ba2      	ldrb	r2, [r4, #14]
   260f0:	3201      	adds	r2, #1
   260f2:	b2d2      	uxtb	r2, r2
   260f4:	73a2      	strb	r2, [r4, #14]
   260f6:	2a00      	cmp	r2, #0
   260f8:	d147      	bne.n	2618a <ctr_drbg_update_internal+0xc2>
   260fa:	7b63      	ldrb	r3, [r4, #13]
   260fc:	3301      	adds	r3, #1
   260fe:	b2db      	uxtb	r3, r3
   26100:	7363      	strb	r3, [r4, #13]
   26102:	2b00      	cmp	r3, #0
   26104:	d141      	bne.n	2618a <ctr_drbg_update_internal+0xc2>
   26106:	7b23      	ldrb	r3, [r4, #12]
   26108:	3301      	adds	r3, #1
   2610a:	b2db      	uxtb	r3, r3
   2610c:	7323      	strb	r3, [r4, #12]
   2610e:	2b00      	cmp	r3, #0
   26110:	d13b      	bne.n	2618a <ctr_drbg_update_internal+0xc2>
   26112:	7ae3      	ldrb	r3, [r4, #11]
   26114:	3301      	adds	r3, #1
   26116:	b2db      	uxtb	r3, r3
   26118:	72e3      	strb	r3, [r4, #11]
   2611a:	2b00      	cmp	r3, #0
   2611c:	d135      	bne.n	2618a <ctr_drbg_update_internal+0xc2>
   2611e:	7aa3      	ldrb	r3, [r4, #10]
   26120:	3301      	adds	r3, #1
   26122:	b2db      	uxtb	r3, r3
   26124:	72a3      	strb	r3, [r4, #10]
   26126:	2b00      	cmp	r3, #0
   26128:	d12f      	bne.n	2618a <ctr_drbg_update_internal+0xc2>
   2612a:	7a63      	ldrb	r3, [r4, #9]
   2612c:	3301      	adds	r3, #1
   2612e:	b2db      	uxtb	r3, r3
   26130:	7263      	strb	r3, [r4, #9]
   26132:	bb53      	cbnz	r3, 2618a <ctr_drbg_update_internal+0xc2>
   26134:	7a23      	ldrb	r3, [r4, #8]
   26136:	3301      	adds	r3, #1
   26138:	b2db      	uxtb	r3, r3
   2613a:	7223      	strb	r3, [r4, #8]
   2613c:	bb2b      	cbnz	r3, 2618a <ctr_drbg_update_internal+0xc2>
   2613e:	79e3      	ldrb	r3, [r4, #7]
   26140:	3301      	adds	r3, #1
   26142:	b2db      	uxtb	r3, r3
   26144:	71e3      	strb	r3, [r4, #7]
   26146:	bb03      	cbnz	r3, 2618a <ctr_drbg_update_internal+0xc2>
   26148:	79a3      	ldrb	r3, [r4, #6]
   2614a:	3301      	adds	r3, #1
   2614c:	b2db      	uxtb	r3, r3
   2614e:	71a3      	strb	r3, [r4, #6]
   26150:	b9db      	cbnz	r3, 2618a <ctr_drbg_update_internal+0xc2>
   26152:	7963      	ldrb	r3, [r4, #5]
   26154:	3301      	adds	r3, #1
   26156:	b2db      	uxtb	r3, r3
   26158:	7163      	strb	r3, [r4, #5]
   2615a:	b9b3      	cbnz	r3, 2618a <ctr_drbg_update_internal+0xc2>
   2615c:	7923      	ldrb	r3, [r4, #4]
   2615e:	3301      	adds	r3, #1
   26160:	b2db      	uxtb	r3, r3
   26162:	7123      	strb	r3, [r4, #4]
   26164:	b98b      	cbnz	r3, 2618a <ctr_drbg_update_internal+0xc2>
   26166:	78e3      	ldrb	r3, [r4, #3]
   26168:	3301      	adds	r3, #1
   2616a:	b2db      	uxtb	r3, r3
   2616c:	70e3      	strb	r3, [r4, #3]
   2616e:	b963      	cbnz	r3, 2618a <ctr_drbg_update_internal+0xc2>
   26170:	78a3      	ldrb	r3, [r4, #2]
   26172:	3301      	adds	r3, #1
   26174:	b2db      	uxtb	r3, r3
   26176:	70a3      	strb	r3, [r4, #2]
   26178:	b93b      	cbnz	r3, 2618a <ctr_drbg_update_internal+0xc2>
   2617a:	7863      	ldrb	r3, [r4, #1]
   2617c:	3301      	adds	r3, #1
   2617e:	b2db      	uxtb	r3, r3
   26180:	7063      	strb	r3, [r4, #1]
   26182:	b913      	cbnz	r3, 2618a <ctr_drbg_update_internal+0xc2>
   26184:	7823      	ldrb	r3, [r4, #0]
   26186:	3301      	adds	r3, #1
   26188:	7023      	strb	r3, [r4, #0]
   2618a:	463b      	mov	r3, r7
   2618c:	4622      	mov	r2, r4
   2618e:	2101      	movs	r1, #1
   26190:	4630      	mov	r0, r6
   26192:	f001 f84f 	bl	27234 <cc_mbedtls_aes_crypt_ecb>
   26196:	4680      	mov	r8, r0
   26198:	bb50      	cbnz	r0, 261f0 <ctr_drbg_update_internal+0x128>
   2619a:	3710      	adds	r7, #16
   2619c:	ab08      	add	r3, sp, #32
   2619e:	429f      	cmp	r7, r3
   261a0:	d19f      	bne.n	260e2 <ctr_drbg_update_internal+0x1a>
   261a2:	9a00      	ldr	r2, [sp, #0]
   261a4:	682b      	ldr	r3, [r5, #0]
   261a6:	9906      	ldr	r1, [sp, #24]
   261a8:	4053      	eors	r3, r2
   261aa:	9300      	str	r3, [sp, #0]
   261ac:	9a01      	ldr	r2, [sp, #4]
   261ae:	686b      	ldr	r3, [r5, #4]
   261b0:	4053      	eors	r3, r2
   261b2:	9301      	str	r3, [sp, #4]
   261b4:	9a02      	ldr	r2, [sp, #8]
   261b6:	68ab      	ldr	r3, [r5, #8]
   261b8:	4053      	eors	r3, r2
   261ba:	9302      	str	r3, [sp, #8]
   261bc:	9a03      	ldr	r2, [sp, #12]
   261be:	68eb      	ldr	r3, [r5, #12]
   261c0:	4053      	eors	r3, r2
   261c2:	9303      	str	r3, [sp, #12]
   261c4:	9a04      	ldr	r2, [sp, #16]
   261c6:	692b      	ldr	r3, [r5, #16]
   261c8:	4053      	eors	r3, r2
   261ca:	9304      	str	r3, [sp, #16]
   261cc:	9a05      	ldr	r2, [sp, #20]
   261ce:	696b      	ldr	r3, [r5, #20]
   261d0:	4053      	eors	r3, r2
   261d2:	69aa      	ldr	r2, [r5, #24]
   261d4:	9305      	str	r3, [sp, #20]
   261d6:	404a      	eors	r2, r1
   261d8:	69eb      	ldr	r3, [r5, #28]
   261da:	9206      	str	r2, [sp, #24]
   261dc:	9a07      	ldr	r2, [sp, #28]
   261de:	4630      	mov	r0, r6
   261e0:	4053      	eors	r3, r2
   261e2:	4669      	mov	r1, sp
   261e4:	2280      	movs	r2, #128	; 0x80
   261e6:	9307      	str	r3, [sp, #28]
   261e8:	f001 f80a 	bl	27200 <cc_mbedtls_aes_setkey_enc>
   261ec:	4680      	mov	r8, r0
   261ee:	b138      	cbz	r0, 26200 <ctr_drbg_update_internal+0x138>
   261f0:	4668      	mov	r0, sp
   261f2:	2120      	movs	r1, #32
   261f4:	f7ff fe06 	bl	25e04 <mbedtls_platform_zeroize>
   261f8:	4640      	mov	r0, r8
   261fa:	b008      	add	sp, #32
   261fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26200:	2210      	movs	r2, #16
   26202:	eb0d 0102 	add.w	r1, sp, r2
   26206:	4620      	mov	r0, r4
   26208:	f007 fde6 	bl	2ddd8 <memcpy>
   2620c:	e7f0      	b.n	261f0 <ctr_drbg_update_internal+0x128>
   2620e:	bf00      	nop

00026210 <mbedtls_ctr_drbg_reseed_internal>:
   26210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26214:	4604      	mov	r4, r0
   26216:	6980      	ldr	r0, [r0, #24]
   26218:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   2621c:	d852      	bhi.n	262c4 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   2621e:	461d      	mov	r5, r3
   26220:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   26224:	42ab      	cmp	r3, r5
   26226:	d34d      	bcc.n	262c4 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   26228:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   2622c:	1a18      	subs	r0, r3, r0
   2622e:	4290      	cmp	r0, r2
   26230:	4616      	mov	r6, r2
   26232:	d347      	bcc.n	262c4 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   26234:	f8df 9098 	ldr.w	r9, [pc, #152]	; 262d0 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   26238:	f44f 72c0 	mov.w	r2, #384	; 0x180
   2623c:	460f      	mov	r7, r1
   2623e:	4648      	mov	r0, r9
   26240:	2100      	movs	r1, #0
   26242:	f007 fdea 	bl	2de1a <memset>
   26246:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   2624a:	69a2      	ldr	r2, [r4, #24]
   2624c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   26250:	4649      	mov	r1, r9
   26252:	4798      	blx	r3
   26254:	2800      	cmp	r0, #0
   26256:	d138      	bne.n	262ca <mbedtls_ctr_drbg_reseed_internal+0xba>
   26258:	f8d4 8018 	ldr.w	r8, [r4, #24]
   2625c:	b13d      	cbz	r5, 2626e <mbedtls_ctr_drbg_reseed_internal+0x5e>
   2625e:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   26262:	462a      	mov	r2, r5
   26264:	eb09 0108 	add.w	r1, r9, r8
   26268:	4798      	blx	r3
   2626a:	bb70      	cbnz	r0, 262ca <mbedtls_ctr_drbg_reseed_internal+0xba>
   2626c:	44a8      	add	r8, r5
   2626e:	b107      	cbz	r7, 26272 <mbedtls_ctr_drbg_reseed_internal+0x62>
   26270:	b9c6      	cbnz	r6, 262a4 <mbedtls_ctr_drbg_reseed_internal+0x94>
   26272:	4917      	ldr	r1, [pc, #92]	; (262d0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   26274:	4642      	mov	r2, r8
   26276:	4608      	mov	r0, r1
   26278:	f7ff fdce 	bl	25e18 <block_cipher_df>
   2627c:	4605      	mov	r5, r0
   2627e:	b138      	cbz	r0, 26290 <mbedtls_ctr_drbg_reseed_internal+0x80>
   26280:	4813      	ldr	r0, [pc, #76]	; (262d0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   26282:	f44f 71c0 	mov.w	r1, #384	; 0x180
   26286:	f7ff fdbd 	bl	25e04 <mbedtls_platform_zeroize>
   2628a:	4628      	mov	r0, r5
   2628c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26290:	490f      	ldr	r1, [pc, #60]	; (262d0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   26292:	4620      	mov	r0, r4
   26294:	f7ff ff18 	bl	260c8 <ctr_drbg_update_internal>
   26298:	4605      	mov	r5, r0
   2629a:	2800      	cmp	r0, #0
   2629c:	d1f0      	bne.n	26280 <mbedtls_ctr_drbg_reseed_internal+0x70>
   2629e:	2301      	movs	r3, #1
   262a0:	6123      	str	r3, [r4, #16]
   262a2:	e7ed      	b.n	26280 <mbedtls_ctr_drbg_reseed_internal+0x70>
   262a4:	eb09 0008 	add.w	r0, r9, r8
   262a8:	4639      	mov	r1, r7
   262aa:	4632      	mov	r2, r6
   262ac:	f007 fd94 	bl	2ddd8 <memcpy>
   262b0:	4907      	ldr	r1, [pc, #28]	; (262d0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   262b2:	44b0      	add	r8, r6
   262b4:	4642      	mov	r2, r8
   262b6:	4608      	mov	r0, r1
   262b8:	f7ff fdae 	bl	25e18 <block_cipher_df>
   262bc:	4605      	mov	r5, r0
   262be:	2800      	cmp	r0, #0
   262c0:	d1de      	bne.n	26280 <mbedtls_ctr_drbg_reseed_internal+0x70>
   262c2:	e7e5      	b.n	26290 <mbedtls_ctr_drbg_reseed_internal+0x80>
   262c4:	f06f 0537 	mvn.w	r5, #55	; 0x37
   262c8:	e7df      	b.n	2628a <mbedtls_ctr_drbg_reseed_internal+0x7a>
   262ca:	f06f 0533 	mvn.w	r5, #51	; 0x33
   262ce:	e7dc      	b.n	2628a <mbedtls_ctr_drbg_reseed_internal+0x7a>
   262d0:	200063bc 	.word	0x200063bc

000262d4 <cc_mbedtls_ctr_drbg_init>:
   262d4:	b510      	push	{r4, lr}
   262d6:	22a4      	movs	r2, #164	; 0xa4
   262d8:	4604      	mov	r4, r0
   262da:	2100      	movs	r1, #0
   262dc:	f007 fd9d 	bl	2de1a <memset>
   262e0:	4b06      	ldr	r3, [pc, #24]	; (262fc <cc_mbedtls_ctr_drbg_init+0x28>)
   262e2:	f04f 31ff 	mov.w	r1, #4294967295
   262e6:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   262ea:	6121      	str	r1, [r4, #16]
   262ec:	61e2      	str	r2, [r4, #28]
   262ee:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   262f2:	681b      	ldr	r3, [r3, #0]
   262f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   262f8:	4718      	bx	r3
   262fa:	bf00      	nop
   262fc:	20000948 	.word	0x20000948

00026300 <cc_mbedtls_ctr_drbg_seed>:
   26300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26304:	b085      	sub	sp, #20
   26306:	4605      	mov	r5, r0
   26308:	460f      	mov	r7, r1
   2630a:	4616      	mov	r6, r2
   2630c:	2100      	movs	r1, #0
   2630e:	2210      	movs	r2, #16
   26310:	4668      	mov	r0, sp
   26312:	4699      	mov	r9, r3
   26314:	f007 fd81 	bl	2de1a <memset>
   26318:	4b1e      	ldr	r3, [pc, #120]	; (26394 <cc_mbedtls_ctr_drbg_seed+0x94>)
   2631a:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   2631e:	681b      	ldr	r3, [r3, #0]
   26320:	4640      	mov	r0, r8
   26322:	4798      	blx	r3
   26324:	b120      	cbz	r0, 26330 <cc_mbedtls_ctr_drbg_seed+0x30>
   26326:	4604      	mov	r4, r0
   26328:	4620      	mov	r0, r4
   2632a:	b005      	add	sp, #20
   2632c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26330:	f105 0420 	add.w	r4, r5, #32
   26334:	4620      	mov	r0, r4
   26336:	f000 ff4d 	bl	271d4 <cc_mbedtls_aes_init>
   2633a:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   2633e:	69ae      	ldr	r6, [r5, #24]
   26340:	692b      	ldr	r3, [r5, #16]
   26342:	b9ee      	cbnz	r6, 26380 <cc_mbedtls_ctr_drbg_seed+0x80>
   26344:	2220      	movs	r2, #32
   26346:	2b00      	cmp	r3, #0
   26348:	61aa      	str	r2, [r5, #24]
   2634a:	db20      	blt.n	2638e <cc_mbedtls_ctr_drbg_seed+0x8e>
   2634c:	461e      	mov	r6, r3
   2634e:	4620      	mov	r0, r4
   26350:	4669      	mov	r1, sp
   26352:	2280      	movs	r2, #128	; 0x80
   26354:	f000 ff54 	bl	27200 <cc_mbedtls_aes_setkey_enc>
   26358:	4604      	mov	r4, r0
   2635a:	b930      	cbnz	r0, 2636a <cc_mbedtls_ctr_drbg_seed+0x6a>
   2635c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2635e:	4633      	mov	r3, r6
   26360:	4649      	mov	r1, r9
   26362:	4628      	mov	r0, r5
   26364:	f7ff ff54 	bl	26210 <mbedtls_ctr_drbg_reseed_internal>
   26368:	4604      	mov	r4, r0
   2636a:	4b0b      	ldr	r3, [pc, #44]	; (26398 <cc_mbedtls_ctr_drbg_seed+0x98>)
   2636c:	4640      	mov	r0, r8
   2636e:	681b      	ldr	r3, [r3, #0]
   26370:	4798      	blx	r3
   26372:	2800      	cmp	r0, #0
   26374:	bf18      	it	ne
   26376:	4604      	movne	r4, r0
   26378:	4620      	mov	r0, r4
   2637a:	b005      	add	sp, #20
   2637c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26380:	2b00      	cmp	r3, #0
   26382:	dae3      	bge.n	2634c <cc_mbedtls_ctr_drbg_seed+0x4c>
   26384:	2e17      	cmp	r6, #23
   26386:	d802      	bhi.n	2638e <cc_mbedtls_ctr_drbg_seed+0x8e>
   26388:	3601      	adds	r6, #1
   2638a:	0876      	lsrs	r6, r6, #1
   2638c:	e7df      	b.n	2634e <cc_mbedtls_ctr_drbg_seed+0x4e>
   2638e:	2600      	movs	r6, #0
   26390:	e7dd      	b.n	2634e <cc_mbedtls_ctr_drbg_seed+0x4e>
   26392:	bf00      	nop
   26394:	2000094c 	.word	0x2000094c
   26398:	20000950 	.word	0x20000950

0002639c <cc_mbedtls_ctr_drbg_random_with_add>:
   2639c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   263a0:	b08d      	sub	sp, #52	; 0x34
   263a2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   263a6:	9f16      	ldr	r7, [sp, #88]	; 0x58
   263a8:	f200 80e3 	bhi.w	26572 <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   263ac:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   263b0:	f200 80dc 	bhi.w	2656c <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   263b4:	4604      	mov	r4, r0
   263b6:	4615      	mov	r5, r2
   263b8:	460e      	mov	r6, r1
   263ba:	2220      	movs	r2, #32
   263bc:	2100      	movs	r1, #0
   263be:	a804      	add	r0, sp, #16
   263c0:	4698      	mov	r8, r3
   263c2:	f007 fd2a 	bl	2de1a <memset>
   263c6:	4b6c      	ldr	r3, [pc, #432]	; (26578 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   263c8:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   263cc:	681b      	ldr	r3, [r3, #0]
   263ce:	4648      	mov	r0, r9
   263d0:	4798      	blx	r3
   263d2:	4683      	mov	fp, r0
   263d4:	2800      	cmp	r0, #0
   263d6:	f040 8092 	bne.w	264fe <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   263da:	6922      	ldr	r2, [r4, #16]
   263dc:	69e3      	ldr	r3, [r4, #28]
   263de:	429a      	cmp	r2, r3
   263e0:	f300 8091 	bgt.w	26506 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   263e4:	6963      	ldr	r3, [r4, #20]
   263e6:	2b00      	cmp	r3, #0
   263e8:	f040 808d 	bne.w	26506 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   263ec:	2f00      	cmp	r7, #0
   263ee:	f040 80a9 	bne.w	26544 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   263f2:	f8df a188 	ldr.w	sl, [pc, #392]	; 2657c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   263f6:	466f      	mov	r7, sp
   263f8:	2d00      	cmp	r5, #0
   263fa:	f000 8098 	beq.w	2652e <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   263fe:	f104 0820 	add.w	r8, r4, #32
   26402:	466f      	mov	r7, sp
   26404:	e00e      	b.n	26424 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   26406:	2d10      	cmp	r5, #16
   26408:	46ab      	mov	fp, r5
   2640a:	bf28      	it	cs
   2640c:	f04f 0b10 	movcs.w	fp, #16
   26410:	4630      	mov	r0, r6
   26412:	465a      	mov	r2, fp
   26414:	4639      	mov	r1, r7
   26416:	f007 fcdf 	bl	2ddd8 <memcpy>
   2641a:	ebb5 050b 	subs.w	r5, r5, fp
   2641e:	445e      	add	r6, fp
   26420:	f000 8085 	beq.w	2652e <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   26424:	7be3      	ldrb	r3, [r4, #15]
   26426:	3301      	adds	r3, #1
   26428:	b2db      	uxtb	r3, r3
   2642a:	73e3      	strb	r3, [r4, #15]
   2642c:	2b00      	cmp	r3, #0
   2642e:	d14d      	bne.n	264cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   26430:	7ba3      	ldrb	r3, [r4, #14]
   26432:	3301      	adds	r3, #1
   26434:	b2db      	uxtb	r3, r3
   26436:	73a3      	strb	r3, [r4, #14]
   26438:	2b00      	cmp	r3, #0
   2643a:	d147      	bne.n	264cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2643c:	7b63      	ldrb	r3, [r4, #13]
   2643e:	3301      	adds	r3, #1
   26440:	b2db      	uxtb	r3, r3
   26442:	7363      	strb	r3, [r4, #13]
   26444:	2b00      	cmp	r3, #0
   26446:	d141      	bne.n	264cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   26448:	7b23      	ldrb	r3, [r4, #12]
   2644a:	3301      	adds	r3, #1
   2644c:	b2db      	uxtb	r3, r3
   2644e:	7323      	strb	r3, [r4, #12]
   26450:	2b00      	cmp	r3, #0
   26452:	d13b      	bne.n	264cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   26454:	7ae3      	ldrb	r3, [r4, #11]
   26456:	3301      	adds	r3, #1
   26458:	b2db      	uxtb	r3, r3
   2645a:	72e3      	strb	r3, [r4, #11]
   2645c:	2b00      	cmp	r3, #0
   2645e:	d135      	bne.n	264cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   26460:	7aa3      	ldrb	r3, [r4, #10]
   26462:	3301      	adds	r3, #1
   26464:	b2db      	uxtb	r3, r3
   26466:	72a3      	strb	r3, [r4, #10]
   26468:	2b00      	cmp	r3, #0
   2646a:	d12f      	bne.n	264cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2646c:	7a63      	ldrb	r3, [r4, #9]
   2646e:	3301      	adds	r3, #1
   26470:	b2db      	uxtb	r3, r3
   26472:	7263      	strb	r3, [r4, #9]
   26474:	bb53      	cbnz	r3, 264cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   26476:	7a23      	ldrb	r3, [r4, #8]
   26478:	3301      	adds	r3, #1
   2647a:	b2db      	uxtb	r3, r3
   2647c:	7223      	strb	r3, [r4, #8]
   2647e:	bb2b      	cbnz	r3, 264cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   26480:	79e3      	ldrb	r3, [r4, #7]
   26482:	3301      	adds	r3, #1
   26484:	b2db      	uxtb	r3, r3
   26486:	71e3      	strb	r3, [r4, #7]
   26488:	bb03      	cbnz	r3, 264cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2648a:	79a3      	ldrb	r3, [r4, #6]
   2648c:	3301      	adds	r3, #1
   2648e:	b2db      	uxtb	r3, r3
   26490:	71a3      	strb	r3, [r4, #6]
   26492:	b9db      	cbnz	r3, 264cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   26494:	7963      	ldrb	r3, [r4, #5]
   26496:	3301      	adds	r3, #1
   26498:	b2db      	uxtb	r3, r3
   2649a:	7163      	strb	r3, [r4, #5]
   2649c:	b9b3      	cbnz	r3, 264cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2649e:	7923      	ldrb	r3, [r4, #4]
   264a0:	3301      	adds	r3, #1
   264a2:	b2db      	uxtb	r3, r3
   264a4:	7123      	strb	r3, [r4, #4]
   264a6:	b98b      	cbnz	r3, 264cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   264a8:	78e3      	ldrb	r3, [r4, #3]
   264aa:	3301      	adds	r3, #1
   264ac:	b2db      	uxtb	r3, r3
   264ae:	70e3      	strb	r3, [r4, #3]
   264b0:	b963      	cbnz	r3, 264cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   264b2:	78a3      	ldrb	r3, [r4, #2]
   264b4:	3301      	adds	r3, #1
   264b6:	b2db      	uxtb	r3, r3
   264b8:	70a3      	strb	r3, [r4, #2]
   264ba:	b93b      	cbnz	r3, 264cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   264bc:	7863      	ldrb	r3, [r4, #1]
   264be:	3301      	adds	r3, #1
   264c0:	b2db      	uxtb	r3, r3
   264c2:	7063      	strb	r3, [r4, #1]
   264c4:	b913      	cbnz	r3, 264cc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   264c6:	7823      	ldrb	r3, [r4, #0]
   264c8:	3301      	adds	r3, #1
   264ca:	7023      	strb	r3, [r4, #0]
   264cc:	463b      	mov	r3, r7
   264ce:	4622      	mov	r2, r4
   264d0:	2101      	movs	r1, #1
   264d2:	4640      	mov	r0, r8
   264d4:	f000 feae 	bl	27234 <cc_mbedtls_aes_crypt_ecb>
   264d8:	4683      	mov	fp, r0
   264da:	2800      	cmp	r0, #0
   264dc:	d093      	beq.n	26406 <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   264de:	f8da 3000 	ldr.w	r3, [sl]
   264e2:	4648      	mov	r0, r9
   264e4:	4798      	blx	r3
   264e6:	2120      	movs	r1, #32
   264e8:	4603      	mov	r3, r0
   264ea:	a804      	add	r0, sp, #16
   264ec:	2b00      	cmp	r3, #0
   264ee:	bf18      	it	ne
   264f0:	469b      	movne	fp, r3
   264f2:	f7ff fc87 	bl	25e04 <mbedtls_platform_zeroize>
   264f6:	2110      	movs	r1, #16
   264f8:	4638      	mov	r0, r7
   264fa:	f7ff fc83 	bl	25e04 <mbedtls_platform_zeroize>
   264fe:	4658      	mov	r0, fp
   26500:	b00d      	add	sp, #52	; 0x34
   26502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26506:	463a      	mov	r2, r7
   26508:	4641      	mov	r1, r8
   2650a:	2300      	movs	r3, #0
   2650c:	4620      	mov	r0, r4
   2650e:	f7ff fe7f 	bl	26210 <mbedtls_ctr_drbg_reseed_internal>
   26512:	f8df a068 	ldr.w	sl, [pc, #104]	; 2657c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   26516:	2800      	cmp	r0, #0
   26518:	f43f af6d 	beq.w	263f6 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   2651c:	f8da 3000 	ldr.w	r3, [sl]
   26520:	4648      	mov	r0, r9
   26522:	4798      	blx	r3
   26524:	4683      	mov	fp, r0
   26526:	2800      	cmp	r0, #0
   26528:	f43f af65 	beq.w	263f6 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   2652c:	e7e7      	b.n	264fe <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   2652e:	a904      	add	r1, sp, #16
   26530:	4620      	mov	r0, r4
   26532:	f7ff fdc9 	bl	260c8 <ctr_drbg_update_internal>
   26536:	4683      	mov	fp, r0
   26538:	2800      	cmp	r0, #0
   2653a:	d1d0      	bne.n	264de <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   2653c:	6923      	ldr	r3, [r4, #16]
   2653e:	3301      	adds	r3, #1
   26540:	6123      	str	r3, [r4, #16]
   26542:	e7cc      	b.n	264de <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   26544:	463a      	mov	r2, r7
   26546:	4641      	mov	r1, r8
   26548:	a804      	add	r0, sp, #16
   2654a:	f7ff fc65 	bl	25e18 <block_cipher_df>
   2654e:	4683      	mov	fp, r0
   26550:	b118      	cbz	r0, 2655a <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   26552:	f8df a028 	ldr.w	sl, [pc, #40]	; 2657c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   26556:	466f      	mov	r7, sp
   26558:	e7c1      	b.n	264de <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   2655a:	a904      	add	r1, sp, #16
   2655c:	4620      	mov	r0, r4
   2655e:	f7ff fdb3 	bl	260c8 <ctr_drbg_update_internal>
   26562:	4683      	mov	fp, r0
   26564:	2800      	cmp	r0, #0
   26566:	f43f af44 	beq.w	263f2 <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   2656a:	e7f2      	b.n	26552 <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   2656c:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   26570:	e7c5      	b.n	264fe <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   26572:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   26576:	e7c2      	b.n	264fe <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   26578:	2000094c 	.word	0x2000094c
   2657c:	20000950 	.word	0x20000950

00026580 <entropy_update>:
   26580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26584:	2b20      	cmp	r3, #32
   26586:	b08b      	sub	sp, #44	; 0x2c
   26588:	461d      	mov	r5, r3
   2658a:	4606      	mov	r6, r0
   2658c:	4688      	mov	r8, r1
   2658e:	4691      	mov	r9, r2
   26590:	d826      	bhi.n	265e0 <entropy_update+0x60>
   26592:	b2db      	uxtb	r3, r3
   26594:	af02      	add	r7, sp, #8
   26596:	f88d 8004 	strb.w	r8, [sp, #4]
   2659a:	46b0      	mov	r8, r6
   2659c:	f88d 3005 	strb.w	r3, [sp, #5]
   265a0:	f858 1b04 	ldr.w	r1, [r8], #4
   265a4:	b921      	cbnz	r1, 265b0 <entropy_update+0x30>
   265a6:	4640      	mov	r0, r8
   265a8:	f000 fe88 	bl	272bc <cc_mbedtls_sha256_starts>
   265ac:	4604      	mov	r4, r0
   265ae:	b940      	cbnz	r0, 265c2 <entropy_update+0x42>
   265b0:	2301      	movs	r3, #1
   265b2:	6033      	str	r3, [r6, #0]
   265b4:	2202      	movs	r2, #2
   265b6:	a901      	add	r1, sp, #4
   265b8:	4640      	mov	r0, r8
   265ba:	f000 fe93 	bl	272e4 <cc_mbedtls_sha256_update>
   265be:	4604      	mov	r4, r0
   265c0:	b138      	cbz	r0, 265d2 <entropy_update+0x52>
   265c2:	4638      	mov	r0, r7
   265c4:	2120      	movs	r1, #32
   265c6:	f7ff fc1d 	bl	25e04 <mbedtls_platform_zeroize>
   265ca:	4620      	mov	r0, r4
   265cc:	b00b      	add	sp, #44	; 0x2c
   265ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   265d2:	462a      	mov	r2, r5
   265d4:	4649      	mov	r1, r9
   265d6:	4640      	mov	r0, r8
   265d8:	f000 fe84 	bl	272e4 <cc_mbedtls_sha256_update>
   265dc:	4604      	mov	r4, r0
   265de:	e7f0      	b.n	265c2 <entropy_update+0x42>
   265e0:	af02      	add	r7, sp, #8
   265e2:	4619      	mov	r1, r3
   265e4:	4610      	mov	r0, r2
   265e6:	2300      	movs	r3, #0
   265e8:	463a      	mov	r2, r7
   265ea:	f001 f803 	bl	275f4 <cc_mbedtls_sha256>
   265ee:	4604      	mov	r4, r0
   265f0:	2800      	cmp	r0, #0
   265f2:	d1e6      	bne.n	265c2 <entropy_update+0x42>
   265f4:	2320      	movs	r3, #32
   265f6:	46b9      	mov	r9, r7
   265f8:	461d      	mov	r5, r3
   265fa:	e7cc      	b.n	26596 <entropy_update+0x16>

000265fc <entropy_gather_internal.part.0>:
   265fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   265fe:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   26602:	b0a7      	sub	sp, #156	; 0x9c
   26604:	2b00      	cmp	r3, #0
   26606:	bfd8      	it	le
   26608:	ae02      	addle	r6, sp, #8
   2660a:	dd2c      	ble.n	26666 <entropy_gather_internal.part.0+0x6a>
   2660c:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   26610:	4605      	mov	r5, r0
   26612:	2300      	movs	r3, #0
   26614:	ae02      	add	r6, sp, #8
   26616:	9301      	str	r3, [sp, #4]
   26618:	f1a4 0701 	sub.w	r7, r4, #1
   2661c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   26620:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   26624:	ab01      	add	r3, sp, #4
   26626:	2290      	movs	r2, #144	; 0x90
   26628:	4631      	mov	r1, r6
   2662a:	47a0      	blx	r4
   2662c:	fab7 f787 	clz	r7, r7
   26630:	097f      	lsrs	r7, r7, #5
   26632:	4604      	mov	r4, r0
   26634:	b910      	cbnz	r0, 2663c <entropy_gather_internal.part.0+0x40>
   26636:	9b01      	ldr	r3, [sp, #4]
   26638:	b93b      	cbnz	r3, 2664a <entropy_gather_internal.part.0+0x4e>
   2663a:	b1a7      	cbz	r7, 26666 <entropy_gather_internal.part.0+0x6a>
   2663c:	4630      	mov	r0, r6
   2663e:	2190      	movs	r1, #144	; 0x90
   26640:	f7ff fbe0 	bl	25e04 <mbedtls_platform_zeroize>
   26644:	4620      	mov	r0, r4
   26646:	b027      	add	sp, #156	; 0x9c
   26648:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2664a:	4601      	mov	r1, r0
   2664c:	4632      	mov	r2, r6
   2664e:	4628      	mov	r0, r5
   26650:	f7ff ff96 	bl	26580 <entropy_update>
   26654:	b950      	cbnz	r0, 2666c <entropy_gather_internal.part.0+0x70>
   26656:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   2665a:	9a01      	ldr	r2, [sp, #4]
   2665c:	4413      	add	r3, r2
   2665e:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   26662:	2f00      	cmp	r7, #0
   26664:	d1ea      	bne.n	2663c <entropy_gather_internal.part.0+0x40>
   26666:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   2666a:	e7e7      	b.n	2663c <entropy_gather_internal.part.0+0x40>
   2666c:	4604      	mov	r4, r0
   2666e:	4620      	mov	r0, r4
   26670:	b027      	add	sp, #156	; 0x9c
   26672:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026674 <cc_mbedtls_entropy_init>:
   26674:	b570      	push	{r4, r5, r6, lr}
   26676:	2500      	movs	r5, #0
   26678:	4604      	mov	r4, r0
   2667a:	2214      	movs	r2, #20
   2667c:	4629      	mov	r1, r5
   2667e:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   26682:	30fc      	adds	r0, #252	; 0xfc
   26684:	f007 fbc9 	bl	2de1a <memset>
   26688:	4b16      	ldr	r3, [pc, #88]	; (266e4 <cc_mbedtls_entropy_init+0x70>)
   2668a:	f504 7688 	add.w	r6, r4, #272	; 0x110
   2668e:	681b      	ldr	r3, [r3, #0]
   26690:	4630      	mov	r0, r6
   26692:	4798      	blx	r3
   26694:	4620      	mov	r0, r4
   26696:	f840 5b04 	str.w	r5, [r0], #4
   2669a:	f000 fdf5 	bl	27288 <cc_mbedtls_sha256_init>
   2669e:	4b12      	ldr	r3, [pc, #72]	; (266e8 <cc_mbedtls_entropy_init+0x74>)
   266a0:	4630      	mov	r0, r6
   266a2:	681b      	ldr	r3, [r3, #0]
   266a4:	4798      	blx	r3
   266a6:	b9d8      	cbnz	r0, 266e0 <cc_mbedtls_entropy_init+0x6c>
   266a8:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   266ac:	42ab      	cmp	r3, r5
   266ae:	dc11      	bgt.n	266d4 <cc_mbedtls_entropy_init+0x60>
   266b0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   266b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   266b8:	2120      	movs	r1, #32
   266ba:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   266be:	2101      	movs	r1, #1
   266c0:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   266c4:	3301      	adds	r3, #1
   266c6:	4909      	ldr	r1, [pc, #36]	; (266ec <cc_mbedtls_entropy_init+0x78>)
   266c8:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   266cc:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   266d0:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   266d4:	4b06      	ldr	r3, [pc, #24]	; (266f0 <cc_mbedtls_entropy_init+0x7c>)
   266d6:	4630      	mov	r0, r6
   266d8:	681b      	ldr	r3, [r3, #0]
   266da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   266de:	4718      	bx	r3
   266e0:	bd70      	pop	{r4, r5, r6, pc}
   266e2:	bf00      	nop
   266e4:	20000948 	.word	0x20000948
   266e8:	2000094c 	.word	0x2000094c
   266ec:	000270d9 	.word	0x000270d9
   266f0:	20000950 	.word	0x20000950

000266f4 <cc_mbedtls_entropy_func>:
   266f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   266f8:	2a20      	cmp	r2, #32
   266fa:	b088      	sub	sp, #32
   266fc:	d876      	bhi.n	267ec <cc_mbedtls_entropy_func+0xf8>
   266fe:	4b3d      	ldr	r3, [pc, #244]	; (267f4 <cc_mbedtls_entropy_func+0x100>)
   26700:	f500 7988 	add.w	r9, r0, #272	; 0x110
   26704:	681b      	ldr	r3, [r3, #0]
   26706:	4604      	mov	r4, r0
   26708:	4648      	mov	r0, r9
   2670a:	4617      	mov	r7, r2
   2670c:	4688      	mov	r8, r1
   2670e:	4798      	blx	r3
   26710:	4605      	mov	r5, r0
   26712:	bba0      	cbnz	r0, 2677e <cc_mbedtls_entropy_func+0x8a>
   26714:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   26718:	f240 1601 	movw	r6, #257	; 0x101
   2671c:	e001      	b.n	26722 <cc_mbedtls_entropy_func+0x2e>
   2671e:	3e01      	subs	r6, #1
   26720:	d060      	beq.n	267e4 <cc_mbedtls_entropy_func+0xf0>
   26722:	4620      	mov	r0, r4
   26724:	b37b      	cbz	r3, 26786 <cc_mbedtls_entropy_func+0x92>
   26726:	f7ff ff69 	bl	265fc <entropy_gather_internal.part.0>
   2672a:	4605      	mov	r5, r0
   2672c:	bb68      	cbnz	r0, 2678a <cc_mbedtls_entropy_func+0x96>
   2672e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   26732:	2b00      	cmp	r3, #0
   26734:	ddf3      	ble.n	2671e <cc_mbedtls_entropy_func+0x2a>
   26736:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   2673a:	4290      	cmp	r0, r2
   2673c:	d3ef      	bcc.n	2671e <cc_mbedtls_entropy_func+0x2a>
   2673e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   26742:	2a01      	cmp	r2, #1
   26744:	d1eb      	bne.n	2671e <cc_mbedtls_entropy_func+0x2a>
   26746:	281f      	cmp	r0, #31
   26748:	d9e9      	bls.n	2671e <cc_mbedtls_entropy_func+0x2a>
   2674a:	466e      	mov	r6, sp
   2674c:	4629      	mov	r1, r5
   2674e:	2220      	movs	r2, #32
   26750:	4630      	mov	r0, r6
   26752:	f104 0a04 	add.w	sl, r4, #4
   26756:	f007 fb60 	bl	2de1a <memset>
   2675a:	4631      	mov	r1, r6
   2675c:	4650      	mov	r0, sl
   2675e:	f000 fdeb 	bl	27338 <cc_mbedtls_sha256_finish>
   26762:	4605      	mov	r5, r0
   26764:	b198      	cbz	r0, 2678e <cc_mbedtls_entropy_func+0x9a>
   26766:	2120      	movs	r1, #32
   26768:	4630      	mov	r0, r6
   2676a:	f7ff fb4b 	bl	25e04 <mbedtls_platform_zeroize>
   2676e:	4b22      	ldr	r3, [pc, #136]	; (267f8 <cc_mbedtls_entropy_func+0x104>)
   26770:	4648      	mov	r0, r9
   26772:	681b      	ldr	r3, [r3, #0]
   26774:	4798      	blx	r3
   26776:	2800      	cmp	r0, #0
   26778:	bf18      	it	ne
   2677a:	f06f 051d 	mvnne.w	r5, #29
   2677e:	4628      	mov	r0, r5
   26780:	b008      	add	sp, #32
   26782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26786:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   2678a:	466e      	mov	r6, sp
   2678c:	e7eb      	b.n	26766 <cc_mbedtls_entropy_func+0x72>
   2678e:	4650      	mov	r0, sl
   26790:	f000 fd8e 	bl	272b0 <cc_mbedtls_sha256_free>
   26794:	4650      	mov	r0, sl
   26796:	f000 fd77 	bl	27288 <cc_mbedtls_sha256_init>
   2679a:	4629      	mov	r1, r5
   2679c:	4650      	mov	r0, sl
   2679e:	f000 fd8d 	bl	272bc <cc_mbedtls_sha256_starts>
   267a2:	4605      	mov	r5, r0
   267a4:	2800      	cmp	r0, #0
   267a6:	d1de      	bne.n	26766 <cc_mbedtls_entropy_func+0x72>
   267a8:	4650      	mov	r0, sl
   267aa:	2220      	movs	r2, #32
   267ac:	4631      	mov	r1, r6
   267ae:	f000 fd99 	bl	272e4 <cc_mbedtls_sha256_update>
   267b2:	4605      	mov	r5, r0
   267b4:	2800      	cmp	r0, #0
   267b6:	d1d6      	bne.n	26766 <cc_mbedtls_entropy_func+0x72>
   267b8:	4603      	mov	r3, r0
   267ba:	4632      	mov	r2, r6
   267bc:	2120      	movs	r1, #32
   267be:	4630      	mov	r0, r6
   267c0:	f000 ff18 	bl	275f4 <cc_mbedtls_sha256>
   267c4:	4605      	mov	r5, r0
   267c6:	2800      	cmp	r0, #0
   267c8:	d1cd      	bne.n	26766 <cc_mbedtls_entropy_func+0x72>
   267ca:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   267ce:	2b00      	cmp	r3, #0
   267d0:	bfc4      	itt	gt
   267d2:	2300      	movgt	r3, #0
   267d4:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   267d8:	463a      	mov	r2, r7
   267da:	4640      	mov	r0, r8
   267dc:	4631      	mov	r1, r6
   267de:	f007 fafb 	bl	2ddd8 <memcpy>
   267e2:	e7c0      	b.n	26766 <cc_mbedtls_entropy_func+0x72>
   267e4:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   267e8:	466e      	mov	r6, sp
   267ea:	e7bc      	b.n	26766 <cc_mbedtls_entropy_func+0x72>
   267ec:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   267f0:	e7c5      	b.n	2677e <cc_mbedtls_entropy_func+0x8a>
   267f2:	bf00      	nop
   267f4:	2000094c 	.word	0x2000094c
   267f8:	20000950 	.word	0x20000950

000267fc <RndStartupTest.constprop.0>:
   267fc:	b530      	push	{r4, r5, lr}
   267fe:	b08d      	sub	sp, #52	; 0x34
   26800:	2100      	movs	r1, #0
   26802:	2228      	movs	r2, #40	; 0x28
   26804:	a802      	add	r0, sp, #8
   26806:	9101      	str	r1, [sp, #4]
   26808:	f007 fb07 	bl	2de1a <memset>
   2680c:	a802      	add	r0, sp, #8
   2680e:	f000 ff19 	bl	27644 <RNG_PLAT_SetUserRngParameters>
   26812:	4604      	mov	r4, r0
   26814:	b110      	cbz	r0, 2681c <RndStartupTest.constprop.0+0x20>
   26816:	4620      	mov	r0, r4
   26818:	b00d      	add	sp, #52	; 0x34
   2681a:	bd30      	pop	{r4, r5, pc}
   2681c:	4d18      	ldr	r5, [pc, #96]	; (26880 <RndStartupTest.constprop.0+0x84>)
   2681e:	f04f 31ff 	mov.w	r1, #4294967295
   26822:	6828      	ldr	r0, [r5, #0]
   26824:	f000 f946 	bl	26ab4 <CC_PalMutexLock>
   26828:	4604      	mov	r4, r0
   2682a:	b9c0      	cbnz	r0, 2685e <RndStartupTest.constprop.0+0x62>
   2682c:	2000      	movs	r0, #0
   2682e:	f000 f971 	bl	26b14 <CC_PalPowerSaveModeSelect>
   26832:	bb00      	cbnz	r0, 26876 <RndStartupTest.constprop.0+0x7a>
   26834:	4a13      	ldr	r2, [pc, #76]	; (26884 <RndStartupTest.constprop.0+0x88>)
   26836:	a902      	add	r1, sp, #8
   26838:	a801      	add	r0, sp, #4
   2683a:	f000 fc3f 	bl	270bc <LLF_RND_RunTrngStartupTest>
   2683e:	4604      	mov	r4, r0
   26840:	2001      	movs	r0, #1
   26842:	f000 f967 	bl	26b14 <CC_PalPowerSaveModeSelect>
   26846:	b990      	cbnz	r0, 2686e <RndStartupTest.constprop.0+0x72>
   26848:	6828      	ldr	r0, [r5, #0]
   2684a:	f000 f93b 	bl	26ac4 <CC_PalMutexUnlock>
   2684e:	2800      	cmp	r0, #0
   26850:	d0e1      	beq.n	26816 <RndStartupTest.constprop.0+0x1a>
   26852:	480d      	ldr	r0, [pc, #52]	; (26888 <RndStartupTest.constprop.0+0x8c>)
   26854:	f7ff f9ce 	bl	25bf4 <CC_PalAbort>
   26858:	4620      	mov	r0, r4
   2685a:	b00d      	add	sp, #52	; 0x34
   2685c:	bd30      	pop	{r4, r5, pc}
   2685e:	480b      	ldr	r0, [pc, #44]	; (2688c <RndStartupTest.constprop.0+0x90>)
   26860:	f7ff f9c8 	bl	25bf4 <CC_PalAbort>
   26864:	2c01      	cmp	r4, #1
   26866:	bf08      	it	eq
   26868:	2405      	moveq	r4, #5
   2686a:	d0ed      	beq.n	26848 <RndStartupTest.constprop.0+0x4c>
   2686c:	e7de      	b.n	2682c <RndStartupTest.constprop.0+0x30>
   2686e:	4808      	ldr	r0, [pc, #32]	; (26890 <RndStartupTest.constprop.0+0x94>)
   26870:	f7ff f9c0 	bl	25bf4 <CC_PalAbort>
   26874:	e7e8      	b.n	26848 <RndStartupTest.constprop.0+0x4c>
   26876:	4807      	ldr	r0, [pc, #28]	; (26894 <RndStartupTest.constprop.0+0x98>)
   26878:	f7ff f9bc 	bl	25bf4 <CC_PalAbort>
   2687c:	e7da      	b.n	26834 <RndStartupTest.constprop.0+0x38>
   2687e:	bf00      	nop
   26880:	20000944 	.word	0x20000944
   26884:	200065a8 	.word	0x200065a8
   26888:	0002f55c 	.word	0x0002f55c
   2688c:	0002f504 	.word	0x0002f504
   26890:	0002f53c 	.word	0x0002f53c
   26894:	0002f51c 	.word	0x0002f51c

00026898 <CC_LibInit>:
   26898:	b530      	push	{r4, r5, lr}
   2689a:	b083      	sub	sp, #12
   2689c:	f000 f85c 	bl	26958 <CC_HalInit>
   268a0:	b128      	cbz	r0, 268ae <CC_LibInit+0x16>
   268a2:	f000 f8ab 	bl	269fc <CC_PalTerminate>
   268a6:	2403      	movs	r4, #3
   268a8:	4620      	mov	r0, r4
   268aa:	b003      	add	sp, #12
   268ac:	bd30      	pop	{r4, r5, pc}
   268ae:	f000 f877 	bl	269a0 <CC_PalInit>
   268b2:	b9d8      	cbnz	r0, 268ec <CC_LibInit+0x54>
   268b4:	f000 f92e 	bl	26b14 <CC_PalPowerSaveModeSelect>
   268b8:	b9e0      	cbnz	r0, 268f4 <CC_LibInit+0x5c>
   268ba:	4c22      	ldr	r4, [pc, #136]	; (26944 <CC_LibInit+0xac>)
   268bc:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   268c0:	0e1b      	lsrs	r3, r3, #24
   268c2:	2bf0      	cmp	r3, #240	; 0xf0
   268c4:	d10a      	bne.n	268dc <CC_LibInit+0x44>
   268c6:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   268ca:	4b1f      	ldr	r3, [pc, #124]	; (26948 <CC_LibInit+0xb0>)
   268cc:	429a      	cmp	r2, r3
   268ce:	d031      	beq.n	26934 <CC_LibInit+0x9c>
   268d0:	f000 f844 	bl	2695c <CC_HalTerminate>
   268d4:	2407      	movs	r4, #7
   268d6:	f000 f891 	bl	269fc <CC_PalTerminate>
   268da:	e7e5      	b.n	268a8 <CC_LibInit+0x10>
   268dc:	f000 f83e 	bl	2695c <CC_HalTerminate>
   268e0:	f000 f88c 	bl	269fc <CC_PalTerminate>
   268e4:	2406      	movs	r4, #6
   268e6:	4620      	mov	r0, r4
   268e8:	b003      	add	sp, #12
   268ea:	bd30      	pop	{r4, r5, pc}
   268ec:	2404      	movs	r4, #4
   268ee:	4620      	mov	r0, r4
   268f0:	b003      	add	sp, #12
   268f2:	bd30      	pop	{r4, r5, pc}
   268f4:	f000 f832 	bl	2695c <CC_HalTerminate>
   268f8:	f000 f880 	bl	269fc <CC_PalTerminate>
   268fc:	f7ff ff7e 	bl	267fc <RndStartupTest.constprop.0>
   26900:	4604      	mov	r4, r0
   26902:	b998      	cbnz	r0, 2692c <CC_LibInit+0x94>
   26904:	4d11      	ldr	r5, [pc, #68]	; (2694c <CC_LibInit+0xb4>)
   26906:	682b      	ldr	r3, [r5, #0]
   26908:	2b00      	cmp	r3, #0
   2690a:	d1cd      	bne.n	268a8 <CC_LibInit+0x10>
   2690c:	4602      	mov	r2, r0
   2690e:	4601      	mov	r1, r0
   26910:	f7ff f992 	bl	25c38 <nrf_cc3xx_platform_ctr_drbg_init>
   26914:	b950      	cbnz	r0, 2692c <CC_LibInit+0x94>
   26916:	490e      	ldr	r1, [pc, #56]	; (26950 <CC_LibInit+0xb8>)
   26918:	ab01      	add	r3, sp, #4
   2691a:	2268      	movs	r2, #104	; 0x68
   2691c:	f7ff f9be 	bl	25c9c <nrf_cc3xx_platform_ctr_drbg_get>
   26920:	b920      	cbnz	r0, 2692c <CC_LibInit+0x94>
   26922:	4b0c      	ldr	r3, [pc, #48]	; (26954 <CC_LibInit+0xbc>)
   26924:	602b      	str	r3, [r5, #0]
   26926:	4620      	mov	r0, r4
   26928:	b003      	add	sp, #12
   2692a:	bd30      	pop	{r4, r5, pc}
   2692c:	2405      	movs	r4, #5
   2692e:	4620      	mov	r0, r4
   26930:	b003      	add	sp, #12
   26932:	bd30      	pop	{r4, r5, pc}
   26934:	2001      	movs	r0, #1
   26936:	f000 f8ed 	bl	26b14 <CC_PalPowerSaveModeSelect>
   2693a:	2800      	cmp	r0, #0
   2693c:	d1da      	bne.n	268f4 <CC_LibInit+0x5c>
   2693e:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   26942:	e7db      	b.n	268fc <CC_LibInit+0x64>
   26944:	5002b000 	.word	0x5002b000
   26948:	20e00000 	.word	0x20e00000
   2694c:	200065a4 	.word	0x200065a4
   26950:	2000653c 	.word	0x2000653c
   26954:	5a5aea5a 	.word	0x5a5aea5a

00026958 <CC_HalInit>:
   26958:	2000      	movs	r0, #0
   2695a:	4770      	bx	lr

0002695c <CC_HalTerminate>:
   2695c:	2000      	movs	r0, #0
   2695e:	4770      	bx	lr

00026960 <CC_HalClearInterruptBit>:
   26960:	0543      	lsls	r3, r0, #21
   26962:	d504      	bpl.n	2696e <CC_HalClearInterruptBit+0xe>
   26964:	4b04      	ldr	r3, [pc, #16]	; (26978 <CC_HalClearInterruptBit+0x18>)
   26966:	f04f 32ff 	mov.w	r2, #4294967295
   2696a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   2696e:	4b02      	ldr	r3, [pc, #8]	; (26978 <CC_HalClearInterruptBit+0x18>)
   26970:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   26974:	4770      	bx	lr
   26976:	bf00      	nop
   26978:	5002b000 	.word	0x5002b000

0002697c <CC_HalMaskInterrupt>:
   2697c:	4b01      	ldr	r3, [pc, #4]	; (26984 <CC_HalMaskInterrupt+0x8>)
   2697e:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   26982:	4770      	bx	lr
   26984:	5002b000 	.word	0x5002b000

00026988 <CC_HalWaitInterrupt>:
   26988:	b108      	cbz	r0, 2698e <CC_HalWaitInterrupt+0x6>
   2698a:	f000 b86b 	b.w	26a64 <CC_PalWaitInterrupt>
   2698e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   26992:	4770      	bx	lr

00026994 <CC_HalWaitInterruptRND>:
   26994:	b108      	cbz	r0, 2699a <CC_HalWaitInterruptRND+0x6>
   26996:	f000 b84f 	b.w	26a38 <CC_PalWaitInterruptRND>
   2699a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   2699e:	4770      	bx	lr

000269a0 <CC_PalInit>:
   269a0:	b510      	push	{r4, lr}
   269a2:	4811      	ldr	r0, [pc, #68]	; (269e8 <CC_PalInit+0x48>)
   269a4:	f000 f872 	bl	26a8c <CC_PalMutexCreate>
   269a8:	b100      	cbz	r0, 269ac <CC_PalInit+0xc>
   269aa:	bd10      	pop	{r4, pc}
   269ac:	480f      	ldr	r0, [pc, #60]	; (269ec <CC_PalInit+0x4c>)
   269ae:	f000 f86d 	bl	26a8c <CC_PalMutexCreate>
   269b2:	2800      	cmp	r0, #0
   269b4:	d1f9      	bne.n	269aa <CC_PalInit+0xa>
   269b6:	4c0e      	ldr	r4, [pc, #56]	; (269f0 <CC_PalInit+0x50>)
   269b8:	4620      	mov	r0, r4
   269ba:	f000 f867 	bl	26a8c <CC_PalMutexCreate>
   269be:	2800      	cmp	r0, #0
   269c0:	d1f3      	bne.n	269aa <CC_PalInit+0xa>
   269c2:	4b0c      	ldr	r3, [pc, #48]	; (269f4 <CC_PalInit+0x54>)
   269c4:	480c      	ldr	r0, [pc, #48]	; (269f8 <CC_PalInit+0x58>)
   269c6:	601c      	str	r4, [r3, #0]
   269c8:	f000 f860 	bl	26a8c <CC_PalMutexCreate>
   269cc:	4601      	mov	r1, r0
   269ce:	2800      	cmp	r0, #0
   269d0:	d1eb      	bne.n	269aa <CC_PalInit+0xa>
   269d2:	f000 f82d 	bl	26a30 <CC_PalDmaInit>
   269d6:	4604      	mov	r4, r0
   269d8:	b108      	cbz	r0, 269de <CC_PalInit+0x3e>
   269da:	4620      	mov	r0, r4
   269dc:	bd10      	pop	{r4, pc}
   269de:	f000 f87b 	bl	26ad8 <CC_PalPowerSaveModeInit>
   269e2:	4620      	mov	r0, r4
   269e4:	e7fa      	b.n	269dc <CC_PalInit+0x3c>
   269e6:	bf00      	nop
   269e8:	20000940 	.word	0x20000940
   269ec:	20000934 	.word	0x20000934
   269f0:	2000093c 	.word	0x2000093c
   269f4:	20000944 	.word	0x20000944
   269f8:	20000938 	.word	0x20000938

000269fc <CC_PalTerminate>:
   269fc:	b508      	push	{r3, lr}
   269fe:	4808      	ldr	r0, [pc, #32]	; (26a20 <CC_PalTerminate+0x24>)
   26a00:	f000 f84e 	bl	26aa0 <CC_PalMutexDestroy>
   26a04:	4807      	ldr	r0, [pc, #28]	; (26a24 <CC_PalTerminate+0x28>)
   26a06:	f000 f84b 	bl	26aa0 <CC_PalMutexDestroy>
   26a0a:	4807      	ldr	r0, [pc, #28]	; (26a28 <CC_PalTerminate+0x2c>)
   26a0c:	f000 f848 	bl	26aa0 <CC_PalMutexDestroy>
   26a10:	4806      	ldr	r0, [pc, #24]	; (26a2c <CC_PalTerminate+0x30>)
   26a12:	f000 f845 	bl	26aa0 <CC_PalMutexDestroy>
   26a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   26a1a:	f000 b80b 	b.w	26a34 <CC_PalDmaTerminate>
   26a1e:	bf00      	nop
   26a20:	20000940 	.word	0x20000940
   26a24:	20000934 	.word	0x20000934
   26a28:	2000093c 	.word	0x2000093c
   26a2c:	20000938 	.word	0x20000938

00026a30 <CC_PalDmaInit>:
   26a30:	2000      	movs	r0, #0
   26a32:	4770      	bx	lr

00026a34 <CC_PalDmaTerminate>:
   26a34:	4770      	bx	lr
   26a36:	bf00      	nop

00026a38 <CC_PalWaitInterruptRND>:
   26a38:	b410      	push	{r4}
   26a3a:	4c09      	ldr	r4, [pc, #36]	; (26a60 <CC_PalWaitInterruptRND+0x28>)
   26a3c:	4602      	mov	r2, r0
   26a3e:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   26a42:	4213      	tst	r3, r2
   26a44:	d0fb      	beq.n	26a3e <CC_PalWaitInterruptRND+0x6>
   26a46:	b121      	cbz	r1, 26a52 <CC_PalWaitInterruptRND+0x1a>
   26a48:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   26a4c:	600b      	str	r3, [r1, #0]
   26a4e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   26a52:	4b03      	ldr	r3, [pc, #12]	; (26a60 <CC_PalWaitInterruptRND+0x28>)
   26a54:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   26a58:	2000      	movs	r0, #0
   26a5a:	bc10      	pop	{r4}
   26a5c:	4770      	bx	lr
   26a5e:	bf00      	nop
   26a60:	5002b000 	.word	0x5002b000

00026a64 <CC_PalWaitInterrupt>:
   26a64:	4a04      	ldr	r2, [pc, #16]	; (26a78 <CC_PalWaitInterrupt+0x14>)
   26a66:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   26a6a:	4218      	tst	r0, r3
   26a6c:	d0fb      	beq.n	26a66 <CC_PalWaitInterrupt+0x2>
   26a6e:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   26a72:	2000      	movs	r0, #0
   26a74:	4770      	bx	lr
   26a76:	bf00      	nop
   26a78:	5002b000 	.word	0x5002b000

00026a7c <CC_PalMemCopyPlat>:
   26a7c:	f007 bafe 	b.w	2e07c <memmove>

00026a80 <CC_PalMemSetPlat>:
   26a80:	f007 b9cb 	b.w	2de1a <memset>

00026a84 <CC_PalMemSetZeroPlat>:
   26a84:	460a      	mov	r2, r1
   26a86:	2100      	movs	r1, #0
   26a88:	f007 b9c7 	b.w	2de1a <memset>

00026a8c <CC_PalMutexCreate>:
   26a8c:	b508      	push	{r3, lr}
   26a8e:	4b03      	ldr	r3, [pc, #12]	; (26a9c <CC_PalMutexCreate+0x10>)
   26a90:	6802      	ldr	r2, [r0, #0]
   26a92:	681b      	ldr	r3, [r3, #0]
   26a94:	6810      	ldr	r0, [r2, #0]
   26a96:	4798      	blx	r3
   26a98:	2000      	movs	r0, #0
   26a9a:	bd08      	pop	{r3, pc}
   26a9c:	200008f4 	.word	0x200008f4

00026aa0 <CC_PalMutexDestroy>:
   26aa0:	b508      	push	{r3, lr}
   26aa2:	4b03      	ldr	r3, [pc, #12]	; (26ab0 <CC_PalMutexDestroy+0x10>)
   26aa4:	6802      	ldr	r2, [r0, #0]
   26aa6:	685b      	ldr	r3, [r3, #4]
   26aa8:	6810      	ldr	r0, [r2, #0]
   26aaa:	4798      	blx	r3
   26aac:	2000      	movs	r0, #0
   26aae:	bd08      	pop	{r3, pc}
   26ab0:	200008f4 	.word	0x200008f4

00026ab4 <CC_PalMutexLock>:
   26ab4:	4b02      	ldr	r3, [pc, #8]	; (26ac0 <CC_PalMutexLock+0xc>)
   26ab6:	6802      	ldr	r2, [r0, #0]
   26ab8:	689b      	ldr	r3, [r3, #8]
   26aba:	6810      	ldr	r0, [r2, #0]
   26abc:	4718      	bx	r3
   26abe:	bf00      	nop
   26ac0:	200008f4 	.word	0x200008f4

00026ac4 <CC_PalMutexUnlock>:
   26ac4:	b508      	push	{r3, lr}
   26ac6:	4b03      	ldr	r3, [pc, #12]	; (26ad4 <CC_PalMutexUnlock+0x10>)
   26ac8:	6802      	ldr	r2, [r0, #0]
   26aca:	68db      	ldr	r3, [r3, #12]
   26acc:	6810      	ldr	r0, [r2, #0]
   26ace:	4798      	blx	r3
   26ad0:	2000      	movs	r0, #0
   26ad2:	bd08      	pop	{r3, pc}
   26ad4:	200008f4 	.word	0x200008f4

00026ad8 <CC_PalPowerSaveModeInit>:
   26ad8:	b570      	push	{r4, r5, r6, lr}
   26ada:	4c09      	ldr	r4, [pc, #36]	; (26b00 <CC_PalPowerSaveModeInit+0x28>)
   26adc:	4d09      	ldr	r5, [pc, #36]	; (26b04 <CC_PalPowerSaveModeInit+0x2c>)
   26ade:	6920      	ldr	r0, [r4, #16]
   26ae0:	68ab      	ldr	r3, [r5, #8]
   26ae2:	4798      	blx	r3
   26ae4:	b118      	cbz	r0, 26aee <CC_PalPowerSaveModeInit+0x16>
   26ae6:	4b08      	ldr	r3, [pc, #32]	; (26b08 <CC_PalPowerSaveModeInit+0x30>)
   26ae8:	4808      	ldr	r0, [pc, #32]	; (26b0c <CC_PalPowerSaveModeInit+0x34>)
   26aea:	685b      	ldr	r3, [r3, #4]
   26aec:	4798      	blx	r3
   26aee:	4a08      	ldr	r2, [pc, #32]	; (26b10 <CC_PalPowerSaveModeInit+0x38>)
   26af0:	68eb      	ldr	r3, [r5, #12]
   26af2:	6920      	ldr	r0, [r4, #16]
   26af4:	2100      	movs	r1, #0
   26af6:	6011      	str	r1, [r2, #0]
   26af8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26afc:	4718      	bx	r3
   26afe:	bf00      	nop
   26b00:	20000904 	.word	0x20000904
   26b04:	200008f4 	.word	0x200008f4
   26b08:	200008e4 	.word	0x200008e4
   26b0c:	0002f574 	.word	0x0002f574
   26b10:	200067c8 	.word	0x200067c8

00026b14 <CC_PalPowerSaveModeSelect>:
   26b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26b16:	4d1a      	ldr	r5, [pc, #104]	; (26b80 <CC_PalPowerSaveModeSelect+0x6c>)
   26b18:	4e1a      	ldr	r6, [pc, #104]	; (26b84 <CC_PalPowerSaveModeSelect+0x70>)
   26b1a:	4604      	mov	r4, r0
   26b1c:	68b2      	ldr	r2, [r6, #8]
   26b1e:	6928      	ldr	r0, [r5, #16]
   26b20:	4790      	blx	r2
   26b22:	b9e8      	cbnz	r0, 26b60 <CC_PalPowerSaveModeSelect+0x4c>
   26b24:	4f18      	ldr	r7, [pc, #96]	; (26b88 <CC_PalPowerSaveModeSelect+0x74>)
   26b26:	683b      	ldr	r3, [r7, #0]
   26b28:	b14c      	cbz	r4, 26b3e <CC_PalPowerSaveModeSelect+0x2a>
   26b2a:	b1a3      	cbz	r3, 26b56 <CC_PalPowerSaveModeSelect+0x42>
   26b2c:	2b01      	cmp	r3, #1
   26b2e:	d019      	beq.n	26b64 <CC_PalPowerSaveModeSelect+0x50>
   26b30:	3b01      	subs	r3, #1
   26b32:	603b      	str	r3, [r7, #0]
   26b34:	6928      	ldr	r0, [r5, #16]
   26b36:	68f3      	ldr	r3, [r6, #12]
   26b38:	4798      	blx	r3
   26b3a:	2000      	movs	r0, #0
   26b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26b3e:	b943      	cbnz	r3, 26b52 <CC_PalPowerSaveModeSelect+0x3e>
   26b40:	4a12      	ldr	r2, [pc, #72]	; (26b8c <CC_PalPowerSaveModeSelect+0x78>)
   26b42:	2101      	movs	r1, #1
   26b44:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   26b48:	4911      	ldr	r1, [pc, #68]	; (26b90 <CC_PalPowerSaveModeSelect+0x7c>)
   26b4a:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   26b4e:	2a00      	cmp	r2, #0
   26b50:	d1fb      	bne.n	26b4a <CC_PalPowerSaveModeSelect+0x36>
   26b52:	3301      	adds	r3, #1
   26b54:	603b      	str	r3, [r7, #0]
   26b56:	68f3      	ldr	r3, [r6, #12]
   26b58:	6928      	ldr	r0, [r5, #16]
   26b5a:	4798      	blx	r3
   26b5c:	2000      	movs	r0, #0
   26b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26b60:	480c      	ldr	r0, [pc, #48]	; (26b94 <CC_PalPowerSaveModeSelect+0x80>)
   26b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26b64:	4a0a      	ldr	r2, [pc, #40]	; (26b90 <CC_PalPowerSaveModeSelect+0x7c>)
   26b66:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   26b6a:	2b00      	cmp	r3, #0
   26b6c:	d1fb      	bne.n	26b66 <CC_PalPowerSaveModeSelect+0x52>
   26b6e:	4a07      	ldr	r2, [pc, #28]	; (26b8c <CC_PalPowerSaveModeSelect+0x78>)
   26b70:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   26b74:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   26b78:	f7ff ff00 	bl	2697c <CC_HalMaskInterrupt>
   26b7c:	683b      	ldr	r3, [r7, #0]
   26b7e:	e7d7      	b.n	26b30 <CC_PalPowerSaveModeSelect+0x1c>
   26b80:	20000904 	.word	0x20000904
   26b84:	200008f4 	.word	0x200008f4
   26b88:	200067c8 	.word	0x200067c8
   26b8c:	5002a000 	.word	0x5002a000
   26b90:	5002b000 	.word	0x5002b000
   26b94:	ffff8fe9 	.word	0xffff8fe9

00026b98 <mutex_init>:
   26b98:	4b01      	ldr	r3, [pc, #4]	; (26ba0 <mutex_init+0x8>)
   26b9a:	681b      	ldr	r3, [r3, #0]
   26b9c:	4718      	bx	r3
   26b9e:	bf00      	nop
   26ba0:	200008f4 	.word	0x200008f4

00026ba4 <mutex_lock>:
   26ba4:	4b01      	ldr	r3, [pc, #4]	; (26bac <mutex_lock+0x8>)
   26ba6:	689b      	ldr	r3, [r3, #8]
   26ba8:	4718      	bx	r3
   26baa:	bf00      	nop
   26bac:	200008f4 	.word	0x200008f4

00026bb0 <mutex_unlock>:
   26bb0:	4b01      	ldr	r3, [pc, #4]	; (26bb8 <mutex_unlock+0x8>)
   26bb2:	68db      	ldr	r3, [r3, #12]
   26bb4:	4718      	bx	r3
   26bb6:	bf00      	nop
   26bb8:	200008f4 	.word	0x200008f4

00026bbc <startTrngHW>:
   26bbc:	2800      	cmp	r0, #0
   26bbe:	f000 8084 	beq.w	26cca <startTrngHW+0x10e>
   26bc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26bc6:	460c      	mov	r4, r1
   26bc8:	b083      	sub	sp, #12
   26bca:	2900      	cmp	r1, #0
   26bcc:	d078      	beq.n	26cc0 <startTrngHW+0x104>
   26bce:	461d      	mov	r5, r3
   26bd0:	2b00      	cmp	r3, #0
   26bd2:	d075      	beq.n	26cc0 <startTrngHW+0x104>
   26bd4:	4607      	mov	r7, r0
   26bd6:	b11a      	cbz	r2, 26be0 <startTrngHW+0x24>
   26bd8:	2201      	movs	r2, #1
   26bda:	2300      	movs	r3, #0
   26bdc:	602a      	str	r2, [r5, #0]
   26bde:	6003      	str	r3, [r0, #0]
   26be0:	682b      	ldr	r3, [r5, #0]
   26be2:	2b00      	cmp	r3, #0
   26be4:	d067      	beq.n	26cb6 <startTrngHW+0xfa>
   26be6:	4629      	mov	r1, r5
   26be8:	4620      	mov	r0, r4
   26bea:	f000 fde9 	bl	277c0 <LLF_RND_GetFastestRosc>
   26bee:	4603      	mov	r3, r0
   26bf0:	2800      	cmp	r0, #0
   26bf2:	d161      	bne.n	26cb8 <startTrngHW+0xfc>
   26bf4:	6828      	ldr	r0, [r5, #0]
   26bf6:	4621      	mov	r1, r4
   26bf8:	f000 fdc4 	bl	27784 <LLF_RND_GetRoscSampleCnt>
   26bfc:	4603      	mov	r3, r0
   26bfe:	2800      	cmp	r0, #0
   26c00:	d15a      	bne.n	26cb8 <startTrngHW+0xfc>
   26c02:	682a      	ldr	r2, [r5, #0]
   26c04:	2a08      	cmp	r2, #8
   26c06:	d072      	beq.n	26cee <startTrngHW+0x132>
   26c08:	2a04      	cmp	r2, #4
   26c0a:	d073      	beq.n	26cf4 <startTrngHW+0x138>
   26c0c:	f1a2 0802 	sub.w	r8, r2, #2
   26c10:	fab8 f888 	clz	r8, r8
   26c14:	ea4f 1858 	mov.w	r8, r8, lsr #5
   26c18:	4e38      	ldr	r6, [pc, #224]	; (26cfc <startTrngHW+0x140>)
   26c1a:	2001      	movs	r0, #1
   26c1c:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   26c20:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   26c24:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   26c28:	6a62      	ldr	r2, [r4, #36]	; 0x24
   26c2a:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   26c2e:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   26c32:	428a      	cmp	r2, r1
   26c34:	d1f6      	bne.n	26c24 <startTrngHW+0x68>
   26c36:	f04f 0900 	mov.w	r9, #0
   26c3a:	9301      	str	r3, [sp, #4]
   26c3c:	f04f 30ff 	mov.w	r0, #4294967295
   26c40:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   26c44:	f7ff fe8c 	bl	26960 <CC_HalClearInterruptBit>
   26c48:	f06f 021b 	mvn.w	r2, #27
   26c4c:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   26c50:	4648      	mov	r0, r9
   26c52:	f7ff fe93 	bl	2697c <CC_HalMaskInterrupt>
   26c56:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   26c5a:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   26c5e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   26c62:	f7ff fe8b 	bl	2697c <CC_HalMaskInterrupt>
   26c66:	220a      	movs	r2, #10
   26c68:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   26c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26c6e:	2b01      	cmp	r3, #1
   26c70:	9b01      	ldr	r3, [sp, #4]
   26c72:	d02d      	beq.n	26cd0 <startTrngHW+0x114>
   26c74:	6922      	ldr	r2, [r4, #16]
   26c76:	4922      	ldr	r1, [pc, #136]	; (26d00 <startTrngHW+0x144>)
   26c78:	fba1 1202 	umull	r1, r2, r1, r2
   26c7c:	0912      	lsrs	r2, r2, #4
   26c7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   26c80:	fb01 f202 	mul.w	r2, r1, r2
   26c84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   26c88:	491c      	ldr	r1, [pc, #112]	; (26cfc <startTrngHW+0x140>)
   26c8a:	03d2      	lsls	r2, r2, #15
   26c8c:	0992      	lsrs	r2, r2, #6
   26c8e:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   26c92:	2201      	movs	r2, #1
   26c94:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   26c98:	683a      	ldr	r2, [r7, #0]
   26c9a:	6829      	ldr	r1, [r5, #0]
   26c9c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   26ca0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   26ca4:	603a      	str	r2, [r7, #0]
   26ca6:	6829      	ldr	r1, [r5, #0]
   26ca8:	4618      	mov	r0, r3
   26caa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   26cae:	603a      	str	r2, [r7, #0]
   26cb0:	b003      	add	sp, #12
   26cb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26cb6:	4b13      	ldr	r3, [pc, #76]	; (26d04 <startTrngHW+0x148>)
   26cb8:	4618      	mov	r0, r3
   26cba:	b003      	add	sp, #12
   26cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26cc0:	4b11      	ldr	r3, [pc, #68]	; (26d08 <startTrngHW+0x14c>)
   26cc2:	4618      	mov	r0, r3
   26cc4:	b003      	add	sp, #12
   26cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26cca:	4b0f      	ldr	r3, [pc, #60]	; (26d08 <startTrngHW+0x14c>)
   26ccc:	4618      	mov	r0, r3
   26cce:	4770      	bx	lr
   26cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   26cd4:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   26cd8:	3101      	adds	r1, #1
   26cda:	d006      	beq.n	26cea <startTrngHW+0x12e>
   26cdc:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   26ce0:	4907      	ldr	r1, [pc, #28]	; (26d00 <startTrngHW+0x144>)
   26ce2:	fba1 1202 	umull	r1, r2, r1, r2
   26ce6:	0912      	lsrs	r2, r2, #4
   26ce8:	e7c9      	b.n	26c7e <startTrngHW+0xc2>
   26cea:	2216      	movs	r2, #22
   26cec:	e7c7      	b.n	26c7e <startTrngHW+0xc2>
   26cee:	f04f 0803 	mov.w	r8, #3
   26cf2:	e791      	b.n	26c18 <startTrngHW+0x5c>
   26cf4:	f04f 0802 	mov.w	r8, #2
   26cf8:	e78e      	b.n	26c18 <startTrngHW+0x5c>
   26cfa:	bf00      	nop
   26cfc:	5002b000 	.word	0x5002b000
   26d00:	aaaaaaab 	.word	0xaaaaaaab
   26d04:	00f10c31 	.word	0x00f10c31
   26d08:	00f10c35 	.word	0x00f10c35

00026d0c <LLF_RND_RepetitionCounterTest.part.0>:
   26d0c:	b570      	push	{r4, r5, r6, lr}
   26d0e:	00c9      	lsls	r1, r1, #3
   26d10:	2400      	movs	r4, #0
   26d12:	1e4e      	subs	r6, r1, #1
   26d14:	f04f 0c01 	mov.w	ip, #1
   26d18:	4625      	mov	r5, r4
   26d1a:	46a6      	mov	lr, r4
   26d1c:	e008      	b.n	26d30 <LLF_RND_RepetitionCounterTest.part.0+0x24>
   26d1e:	459e      	cmp	lr, r3
   26d20:	d015      	beq.n	26d4e <LLF_RND_RepetitionCounterTest.part.0+0x42>
   26d22:	2501      	movs	r5, #1
   26d24:	45b4      	cmp	ip, r6
   26d26:	d817      	bhi.n	26d58 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   26d28:	3401      	adds	r4, #1
   26d2a:	f10c 0c01 	add.w	ip, ip, #1
   26d2e:	469e      	mov	lr, r3
   26d30:	0963      	lsrs	r3, r4, #5
   26d32:	f004 011f 	and.w	r1, r4, #31
   26d36:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   26d3a:	291f      	cmp	r1, #31
   26d3c:	fa23 f301 	lsr.w	r3, r3, r1
   26d40:	bf18      	it	ne
   26d42:	f003 0301 	andne.w	r3, r3, #1
   26d46:	2c00      	cmp	r4, #0
   26d48:	d1e9      	bne.n	26d1e <LLF_RND_RepetitionCounterTest.part.0+0x12>
   26d4a:	2501      	movs	r5, #1
   26d4c:	e7ec      	b.n	26d28 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   26d4e:	3501      	adds	r5, #1
   26d50:	4295      	cmp	r5, r2
   26d52:	d1e7      	bne.n	26d24 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   26d54:	4801      	ldr	r0, [pc, #4]	; (26d5c <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   26d56:	bd70      	pop	{r4, r5, r6, pc}
   26d58:	2000      	movs	r0, #0
   26d5a:	bd70      	pop	{r4, r5, r6, pc}
   26d5c:	00f10c36 	.word	0x00f10c36

00026d60 <LLF_RND_AdaptiveProportionTest>:
   26d60:	2800      	cmp	r0, #0
   26d62:	d03f      	beq.n	26de4 <LLF_RND_AdaptiveProportionTest+0x84>
   26d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26d68:	1e4c      	subs	r4, r1, #1
   26d6a:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   26d6e:	d228      	bcs.n	26dc2 <LLF_RND_AdaptiveProportionTest+0x62>
   26d70:	b33b      	cbz	r3, 26dc2 <LLF_RND_AdaptiveProportionTest+0x62>
   26d72:	b332      	cbz	r2, 26dc2 <LLF_RND_AdaptiveProportionTest+0x62>
   26d74:	f04f 0e00 	mov.w	lr, #0
   26d78:	00cf      	lsls	r7, r1, #3
   26d7a:	4676      	mov	r6, lr
   26d7c:	4675      	mov	r5, lr
   26d7e:	4674      	mov	r4, lr
   26d80:	f103 38ff 	add.w	r8, r3, #4294967295
   26d84:	0961      	lsrs	r1, r4, #5
   26d86:	f004 0c1f 	and.w	ip, r4, #31
   26d8a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   26d8e:	f1bc 0f1f 	cmp.w	ip, #31
   26d92:	fa21 f10c 	lsr.w	r1, r1, ip
   26d96:	bf18      	it	ne
   26d98:	f001 0101 	andne.w	r1, r1, #1
   26d9c:	b1a4      	cbz	r4, 26dc8 <LLF_RND_AdaptiveProportionTest+0x68>
   26d9e:	42ab      	cmp	r3, r5
   26da0:	d018      	beq.n	26dd4 <LLF_RND_AdaptiveProportionTest+0x74>
   26da2:	428e      	cmp	r6, r1
   26da4:	bf08      	it	eq
   26da6:	f10e 0e01 	addeq.w	lr, lr, #1
   26daa:	45a8      	cmp	r8, r5
   26dac:	d015      	beq.n	26dda <LLF_RND_AdaptiveProportionTest+0x7a>
   26dae:	3501      	adds	r5, #1
   26db0:	4631      	mov	r1, r6
   26db2:	3401      	adds	r4, #1
   26db4:	42bc      	cmp	r4, r7
   26db6:	d001      	beq.n	26dbc <LLF_RND_AdaptiveProportionTest+0x5c>
   26db8:	460e      	mov	r6, r1
   26dba:	e7e3      	b.n	26d84 <LLF_RND_AdaptiveProportionTest+0x24>
   26dbc:	2000      	movs	r0, #0
   26dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26dc2:	4809      	ldr	r0, [pc, #36]	; (26de8 <LLF_RND_AdaptiveProportionTest+0x88>)
   26dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26dc8:	f04f 0e01 	mov.w	lr, #1
   26dcc:	4674      	mov	r4, lr
   26dce:	4675      	mov	r5, lr
   26dd0:	460e      	mov	r6, r1
   26dd2:	e7d7      	b.n	26d84 <LLF_RND_AdaptiveProportionTest+0x24>
   26dd4:	2501      	movs	r5, #1
   26dd6:	46ae      	mov	lr, r5
   26dd8:	e7eb      	b.n	26db2 <LLF_RND_AdaptiveProportionTest+0x52>
   26dda:	4572      	cmp	r2, lr
   26ddc:	d3f1      	bcc.n	26dc2 <LLF_RND_AdaptiveProportionTest+0x62>
   26dde:	4631      	mov	r1, r6
   26de0:	461d      	mov	r5, r3
   26de2:	e7e6      	b.n	26db2 <LLF_RND_AdaptiveProportionTest+0x52>
   26de4:	4800      	ldr	r0, [pc, #0]	; (26de8 <LLF_RND_AdaptiveProportionTest+0x88>)
   26de6:	4770      	bx	lr
   26de8:	00f10c37 	.word	0x00f10c37

00026dec <getTrngSource>:
   26dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26df0:	b091      	sub	sp, #68	; 0x44
   26df2:	460d      	mov	r5, r1
   26df4:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   26df8:	4681      	mov	r9, r0
   26dfa:	2900      	cmp	r1, #0
   26dfc:	d14c      	bne.n	26e98 <getTrngSource+0xac>
   26dfe:	6928      	ldr	r0, [r5, #16]
   26e00:	9006      	str	r0, [sp, #24]
   26e02:	981a      	ldr	r0, [sp, #104]	; 0x68
   26e04:	601c      	str	r4, [r3, #0]
   26e06:	2300      	movs	r3, #0
   26e08:	6003      	str	r3, [r0, #0]
   26e0a:	2a00      	cmp	r2, #0
   26e0c:	f000 8124 	beq.w	27058 <getTrngSource+0x26c>
   26e10:	4b9d      	ldr	r3, [pc, #628]	; (27088 <getTrngSource+0x29c>)
   26e12:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   26e14:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   26e18:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   26e1c:	429a      	cmp	r2, r3
   26e1e:	d147      	bne.n	26eb0 <getTrngSource+0xc4>
   26e20:	290a      	cmp	r1, #10
   26e22:	d145      	bne.n	26eb0 <getTrngSource+0xc4>
   26e24:	f899 3003 	ldrb.w	r3, [r9, #3]
   26e28:	9308      	str	r3, [sp, #32]
   26e2a:	f104 0308 	add.w	r3, r4, #8
   26e2e:	9a06      	ldr	r2, [sp, #24]
   26e30:	9307      	str	r3, [sp, #28]
   26e32:	4b96      	ldr	r3, [pc, #600]	; (2708c <getTrngSource+0x2a0>)
   26e34:	4c94      	ldr	r4, [pc, #592]	; (27088 <getTrngSource+0x29c>)
   26e36:	fba3 1302 	umull	r1, r3, r3, r2
   26e3a:	089b      	lsrs	r3, r3, #2
   26e3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26e40:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   26e44:	9303      	str	r3, [sp, #12]
   26e46:	2304      	movs	r3, #4
   26e48:	9305      	str	r3, [sp, #20]
   26e4a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   26e4c:	9e06      	ldr	r6, [sp, #24]
   26e4e:	601e      	str	r6, [r3, #0]
   26e50:	2e00      	cmp	r6, #0
   26e52:	d033      	beq.n	26ebc <getTrngSource+0xd0>
   26e54:	f8dd 801c 	ldr.w	r8, [sp, #28]
   26e58:	2700      	movs	r7, #0
   26e5a:	f04f 0a01 	mov.w	sl, #1
   26e5e:	f000 fcbf 	bl	277e0 <LLF_RND_TurnOffTrng>
   26e62:	2300      	movs	r3, #0
   26e64:	9309      	str	r3, [sp, #36]	; 0x24
   26e66:	f1b9 0f00 	cmp.w	r9, #0
   26e6a:	f000 80df 	beq.w	2702c <getTrngSource+0x240>
   26e6e:	2d00      	cmp	r5, #0
   26e70:	f000 80dc 	beq.w	2702c <getTrngSource+0x240>
   26e74:	9b08      	ldr	r3, [sp, #32]
   26e76:	b1eb      	cbz	r3, 26eb4 <getTrngSource+0xc8>
   26e78:	a908      	add	r1, sp, #32
   26e7a:	4628      	mov	r0, r5
   26e7c:	f000 fca0 	bl	277c0 <LLF_RND_GetFastestRosc>
   26e80:	2800      	cmp	r0, #0
   26e82:	d03e      	beq.n	26f02 <getTrngSource+0x116>
   26e84:	4b82      	ldr	r3, [pc, #520]	; (27090 <getTrngSource+0x2a4>)
   26e86:	4298      	cmp	r0, r3
   26e88:	d118      	bne.n	26ebc <getTrngSource+0xd0>
   26e8a:	9003      	str	r0, [sp, #12]
   26e8c:	f000 fca8 	bl	277e0 <LLF_RND_TurnOffTrng>
   26e90:	9803      	ldr	r0, [sp, #12]
   26e92:	b011      	add	sp, #68	; 0x44
   26e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26e98:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   26e9c:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   26ea0:	3601      	adds	r6, #1
   26ea2:	bf14      	ite	ne
   26ea4:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   26ea8:	f44f 7004 	moveq.w	r0, #528	; 0x210
   26eac:	9006      	str	r0, [sp, #24]
   26eae:	e7a8      	b.n	26e02 <getTrngSource+0x16>
   26eb0:	4878      	ldr	r0, [pc, #480]	; (27094 <getTrngSource+0x2a8>)
   26eb2:	e7ea      	b.n	26e8a <getTrngSource+0x9e>
   26eb4:	4878      	ldr	r0, [pc, #480]	; (27098 <getTrngSource+0x2ac>)
   26eb6:	4b76      	ldr	r3, [pc, #472]	; (27090 <getTrngSource+0x2a4>)
   26eb8:	4298      	cmp	r0, r3
   26eba:	d0e6      	beq.n	26e8a <getTrngSource+0x9e>
   26ebc:	9b08      	ldr	r3, [sp, #32]
   26ebe:	2b08      	cmp	r3, #8
   26ec0:	f000 80c8 	beq.w	27054 <getTrngSource+0x268>
   26ec4:	005b      	lsls	r3, r3, #1
   26ec6:	2200      	movs	r2, #0
   26ec8:	9308      	str	r3, [sp, #32]
   26eca:	9200      	str	r2, [sp, #0]
   26ecc:	ab08      	add	r3, sp, #32
   26ece:	4629      	mov	r1, r5
   26ed0:	4648      	mov	r0, r9
   26ed2:	f7ff fe73 	bl	26bbc <startTrngHW>
   26ed6:	4b70      	ldr	r3, [pc, #448]	; (27098 <getTrngSource+0x2ac>)
   26ed8:	4298      	cmp	r0, r3
   26eda:	f000 80b7 	beq.w	2704c <getTrngSource+0x260>
   26ede:	2800      	cmp	r0, #0
   26ee0:	d1d3      	bne.n	26e8a <getTrngSource+0x9e>
   26ee2:	f8d9 2000 	ldr.w	r2, [r9]
   26ee6:	0a13      	lsrs	r3, r2, #8
   26ee8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   26eec:	4313      	orrs	r3, r2
   26eee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   26ef2:	f8c9 3000 	str.w	r3, [r9]
   26ef6:	9b05      	ldr	r3, [sp, #20]
   26ef8:	3b01      	subs	r3, #1
   26efa:	9305      	str	r3, [sp, #20]
   26efc:	d1a5      	bne.n	26e4a <getTrngSource+0x5e>
   26efe:	2000      	movs	r0, #0
   26f00:	e7c3      	b.n	26e8a <getTrngSource+0x9e>
   26f02:	9808      	ldr	r0, [sp, #32]
   26f04:	4629      	mov	r1, r5
   26f06:	f000 fc3d 	bl	27784 <LLF_RND_GetRoscSampleCnt>
   26f0a:	2800      	cmp	r0, #0
   26f0c:	d1ba      	bne.n	26e84 <getTrngSource+0x98>
   26f0e:	9b08      	ldr	r3, [sp, #32]
   26f10:	2b08      	cmp	r3, #8
   26f12:	f000 8095 	beq.w	27040 <getTrngSource+0x254>
   26f16:	2b04      	cmp	r3, #4
   26f18:	f000 8095 	beq.w	27046 <getTrngSource+0x25a>
   26f1c:	f1a3 0302 	sub.w	r3, r3, #2
   26f20:	fab3 f383 	clz	r3, r3
   26f24:	095b      	lsrs	r3, r3, #5
   26f26:	9304      	str	r3, [sp, #16]
   26f28:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   26f2c:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   26f30:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   26f34:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   26f36:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   26f3a:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   26f3e:	4293      	cmp	r3, r2
   26f40:	d1f6      	bne.n	26f30 <getTrngSource+0x144>
   26f42:	f04f 0b00 	mov.w	fp, #0
   26f46:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   26f4a:	f04f 30ff 	mov.w	r0, #4294967295
   26f4e:	f7ff fd07 	bl	26960 <CC_HalClearInterruptBit>
   26f52:	f06f 031b 	mvn.w	r3, #27
   26f56:	4658      	mov	r0, fp
   26f58:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   26f5c:	f7ff fd0e 	bl	2697c <CC_HalMaskInterrupt>
   26f60:	9b04      	ldr	r3, [sp, #16]
   26f62:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   26f66:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   26f6a:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   26f6e:	f7ff fd05 	bl	2697c <CC_HalMaskInterrupt>
   26f72:	230a      	movs	r3, #10
   26f74:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   26f78:	692b      	ldr	r3, [r5, #16]
   26f7a:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   26f7e:	fbab 2303 	umull	r2, r3, fp, r3
   26f82:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   26f84:	091b      	lsrs	r3, r3, #4
   26f86:	fb02 f303 	mul.w	r3, r2, r3
   26f8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26f8e:	03db      	lsls	r3, r3, #15
   26f90:	099b      	lsrs	r3, r3, #6
   26f92:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   26f96:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   26f9a:	9908      	ldr	r1, [sp, #32]
   26f9c:	f8d9 2000 	ldr.w	r2, [r9]
   26fa0:	020b      	lsls	r3, r1, #8
   26fa2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   26fa6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   26faa:	4313      	orrs	r3, r2
   26fac:	f8c9 3000 	str.w	r3, [r9]
   26fb0:	a809      	add	r0, sp, #36	; 0x24
   26fb2:	f000 fbd7 	bl	27764 <LLF_RND_WaitRngInterrupt>
   26fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26fb8:	f003 031a 	and.w	r3, r3, #26
   26fbc:	4303      	orrs	r3, r0
   26fbe:	f47f af7d 	bne.w	26ebc <getTrngSource+0xd0>
   26fc2:	fbab 3b06 	umull	r3, fp, fp, r6
   26fc6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   26fca:	930a      	str	r3, [sp, #40]	; 0x28
   26fcc:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   26fd0:	930b      	str	r3, [sp, #44]	; 0x2c
   26fd2:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   26fd6:	930c      	str	r3, [sp, #48]	; 0x30
   26fd8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   26fdc:	930d      	str	r3, [sp, #52]	; 0x34
   26fde:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   26fe2:	930e      	str	r3, [sp, #56]	; 0x38
   26fe4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   26fe8:	930f      	str	r3, [sp, #60]	; 0x3c
   26fea:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   26fee:	d101      	bne.n	26ff4 <getTrngSource+0x208>
   26ff0:	9b03      	ldr	r3, [sp, #12]
   26ff2:	b9eb      	cbnz	r3, 27030 <getTrngSource+0x244>
   26ff4:	4640      	mov	r0, r8
   26ff6:	2218      	movs	r2, #24
   26ff8:	a90a      	add	r1, sp, #40	; 0x28
   26ffa:	3e18      	subs	r6, #24
   26ffc:	f108 0818 	add.w	r8, r8, #24
   27000:	f7ff fd3c 	bl	26a7c <CC_PalMemCopyPlat>
   27004:	3701      	adds	r7, #1
   27006:	2e00      	cmp	r6, #0
   27008:	f47f af29 	bne.w	26e5e <getTrngSource+0x72>
   2700c:	9b06      	ldr	r3, [sp, #24]
   2700e:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   27012:	d836      	bhi.n	27082 <getTrngSource+0x296>
   27014:	9e07      	ldr	r6, [sp, #28]
   27016:	696a      	ldr	r2, [r5, #20]
   27018:	4619      	mov	r1, r3
   2701a:	4630      	mov	r0, r6
   2701c:	461f      	mov	r7, r3
   2701e:	f7ff fe75 	bl	26d0c <LLF_RND_RepetitionCounterTest.part.0>
   27022:	b320      	cbz	r0, 2706e <getTrngSource+0x282>
   27024:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   27026:	2300      	movs	r3, #0
   27028:	6013      	str	r3, [r2, #0]
   2702a:	e72b      	b.n	26e84 <getTrngSource+0x98>
   2702c:	481b      	ldr	r0, [pc, #108]	; (2709c <getTrngSource+0x2b0>)
   2702e:	e729      	b.n	26e84 <getTrngSource+0x98>
   27030:	4640      	mov	r0, r8
   27032:	461a      	mov	r2, r3
   27034:	a90a      	add	r1, sp, #40	; 0x28
   27036:	1af6      	subs	r6, r6, r3
   27038:	4498      	add	r8, r3
   2703a:	f7ff fd1f 	bl	26a7c <CC_PalMemCopyPlat>
   2703e:	e7e1      	b.n	27004 <getTrngSource+0x218>
   27040:	2303      	movs	r3, #3
   27042:	9304      	str	r3, [sp, #16]
   27044:	e770      	b.n	26f28 <getTrngSource+0x13c>
   27046:	2302      	movs	r3, #2
   27048:	9304      	str	r3, [sp, #16]
   2704a:	e76d      	b.n	26f28 <getTrngSource+0x13c>
   2704c:	6a2b      	ldr	r3, [r5, #32]
   2704e:	2b00      	cmp	r3, #0
   27050:	f43f af1b 	beq.w	26e8a <getTrngSource+0x9e>
   27054:	4812      	ldr	r0, [pc, #72]	; (270a0 <getTrngSource+0x2b4>)
   27056:	e718      	b.n	26e8a <getTrngSource+0x9e>
   27058:	9100      	str	r1, [sp, #0]
   2705a:	ab08      	add	r3, sp, #32
   2705c:	2201      	movs	r2, #1
   2705e:	4629      	mov	r1, r5
   27060:	4648      	mov	r0, r9
   27062:	f7ff fdab 	bl	26bbc <startTrngHW>
   27066:	2800      	cmp	r0, #0
   27068:	f43f aedf 	beq.w	26e2a <getTrngSource+0x3e>
   2706c:	e70d      	b.n	26e8a <getTrngSource+0x9e>
   2706e:	69aa      	ldr	r2, [r5, #24]
   27070:	f44f 6380 	mov.w	r3, #1024	; 0x400
   27074:	4639      	mov	r1, r7
   27076:	4630      	mov	r0, r6
   27078:	f7ff fe72 	bl	26d60 <LLF_RND_AdaptiveProportionTest>
   2707c:	2800      	cmp	r0, #0
   2707e:	d1d1      	bne.n	27024 <getTrngSource+0x238>
   27080:	e73d      	b.n	26efe <getTrngSource+0x112>
   27082:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   27084:	601e      	str	r6, [r3, #0]
   27086:	e719      	b.n	26ebc <getTrngSource+0xd0>
   27088:	5002b000 	.word	0x5002b000
   2708c:	aaaaaaab 	.word	0xaaaaaaab
   27090:	00f10c02 	.word	0x00f10c02
   27094:	00f10c30 	.word	0x00f10c30
   27098:	00f10c31 	.word	0x00f10c31
   2709c:	00f10c35 	.word	0x00f10c35
   270a0:	00f10c32 	.word	0x00f10c32

000270a4 <LLF_RND_GetTrngSource>:
   270a4:	b410      	push	{r4}
   270a6:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   270aa:	9401      	str	r4, [sp, #4]
   270ac:	9c03      	ldr	r4, [sp, #12]
   270ae:	9402      	str	r4, [sp, #8]
   270b0:	2400      	movs	r4, #0
   270b2:	9403      	str	r4, [sp, #12]
   270b4:	bc10      	pop	{r4}
   270b6:	f7ff be99 	b.w	26dec <getTrngSource>
   270ba:	bf00      	nop

000270bc <LLF_RND_RunTrngStartupTest>:
   270bc:	b510      	push	{r4, lr}
   270be:	b086      	sub	sp, #24
   270c0:	ab05      	add	r3, sp, #20
   270c2:	2401      	movs	r4, #1
   270c4:	e9cd 2401 	strd	r2, r4, [sp, #4]
   270c8:	9300      	str	r3, [sp, #0]
   270ca:	2200      	movs	r2, #0
   270cc:	ab04      	add	r3, sp, #16
   270ce:	f7ff fe8d 	bl	26dec <getTrngSource>
   270d2:	b006      	add	sp, #24
   270d4:	bd10      	pop	{r4, pc}
   270d6:	bf00      	nop

000270d8 <mbedtls_hardware_poll>:
   270d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   270da:	b089      	sub	sp, #36	; 0x24
   270dc:	9205      	str	r2, [sp, #20]
   270de:	2900      	cmp	r1, #0
   270e0:	d064      	beq.n	271ac <mbedtls_hardware_poll+0xd4>
   270e2:	461c      	mov	r4, r3
   270e4:	2b00      	cmp	r3, #0
   270e6:	d061      	beq.n	271ac <mbedtls_hardware_poll+0xd4>
   270e8:	4615      	mov	r5, r2
   270ea:	2a00      	cmp	r2, #0
   270ec:	d05e      	beq.n	271ac <mbedtls_hardware_poll+0xd4>
   270ee:	4f31      	ldr	r7, [pc, #196]	; (271b4 <mbedtls_hardware_poll+0xdc>)
   270f0:	460e      	mov	r6, r1
   270f2:	6838      	ldr	r0, [r7, #0]
   270f4:	f04f 31ff 	mov.w	r1, #4294967295
   270f8:	f7ff fcdc 	bl	26ab4 <CC_PalMutexLock>
   270fc:	2800      	cmp	r0, #0
   270fe:	d14b      	bne.n	27198 <mbedtls_hardware_poll+0xc0>
   27100:	2000      	movs	r0, #0
   27102:	f7ff fd07 	bl	26b14 <CC_PalPowerSaveModeSelect>
   27106:	2800      	cmp	r0, #0
   27108:	d142      	bne.n	27190 <mbedtls_hardware_poll+0xb8>
   2710a:	482b      	ldr	r0, [pc, #172]	; (271b8 <mbedtls_hardware_poll+0xe0>)
   2710c:	f000 fa9a 	bl	27644 <RNG_PLAT_SetUserRngParameters>
   27110:	b1d8      	cbz	r0, 2714a <mbedtls_hardware_poll+0x72>
   27112:	2001      	movs	r0, #1
   27114:	f04f 36ff 	mov.w	r6, #4294967295
   27118:	f7ff fcfc 	bl	26b14 <CC_PalPowerSaveModeSelect>
   2711c:	2800      	cmp	r0, #0
   2711e:	d133      	bne.n	27188 <mbedtls_hardware_poll+0xb0>
   27120:	4826      	ldr	r0, [pc, #152]	; (271bc <mbedtls_hardware_poll+0xe4>)
   27122:	f44f 7108 	mov.w	r1, #544	; 0x220
   27126:	f7fe fe63 	bl	25df0 <mbedtls_zeroize_internal>
   2712a:	4825      	ldr	r0, [pc, #148]	; (271c0 <mbedtls_hardware_poll+0xe8>)
   2712c:	2104      	movs	r1, #4
   2712e:	f7fe fe5f 	bl	25df0 <mbedtls_zeroize_internal>
   27132:	4821      	ldr	r0, [pc, #132]	; (271b8 <mbedtls_hardware_poll+0xe0>)
   27134:	2128      	movs	r1, #40	; 0x28
   27136:	f7fe fe5b 	bl	25df0 <mbedtls_zeroize_internal>
   2713a:	6838      	ldr	r0, [r7, #0]
   2713c:	f7ff fcc2 	bl	26ac4 <CC_PalMutexUnlock>
   27140:	2800      	cmp	r0, #0
   27142:	d12d      	bne.n	271a0 <mbedtls_hardware_poll+0xc8>
   27144:	4630      	mov	r0, r6
   27146:	b009      	add	sp, #36	; 0x24
   27148:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2714a:	4b1c      	ldr	r3, [pc, #112]	; (271bc <mbedtls_hardware_poll+0xe4>)
   2714c:	9302      	str	r3, [sp, #8]
   2714e:	ab07      	add	r3, sp, #28
   27150:	9003      	str	r0, [sp, #12]
   27152:	4602      	mov	r2, r0
   27154:	9300      	str	r3, [sp, #0]
   27156:	4918      	ldr	r1, [pc, #96]	; (271b8 <mbedtls_hardware_poll+0xe0>)
   27158:	4819      	ldr	r0, [pc, #100]	; (271c0 <mbedtls_hardware_poll+0xe8>)
   2715a:	9401      	str	r4, [sp, #4]
   2715c:	ab05      	add	r3, sp, #20
   2715e:	f7ff ffa1 	bl	270a4 <LLF_RND_GetTrngSource>
   27162:	4603      	mov	r3, r0
   27164:	2800      	cmp	r0, #0
   27166:	d1d4      	bne.n	27112 <mbedtls_hardware_poll+0x3a>
   27168:	6822      	ldr	r2, [r4, #0]
   2716a:	42aa      	cmp	r2, r5
   2716c:	d3d1      	bcc.n	27112 <mbedtls_hardware_poll+0x3a>
   2716e:	9907      	ldr	r1, [sp, #28]
   27170:	4630      	mov	r0, r6
   27172:	3108      	adds	r1, #8
   27174:	462a      	mov	r2, r5
   27176:	461e      	mov	r6, r3
   27178:	f7ff fc80 	bl	26a7c <CC_PalMemCopyPlat>
   2717c:	6025      	str	r5, [r4, #0]
   2717e:	2001      	movs	r0, #1
   27180:	f7ff fcc8 	bl	26b14 <CC_PalPowerSaveModeSelect>
   27184:	2800      	cmp	r0, #0
   27186:	d0cb      	beq.n	27120 <mbedtls_hardware_poll+0x48>
   27188:	480e      	ldr	r0, [pc, #56]	; (271c4 <mbedtls_hardware_poll+0xec>)
   2718a:	f7fe fd33 	bl	25bf4 <CC_PalAbort>
   2718e:	e7c7      	b.n	27120 <mbedtls_hardware_poll+0x48>
   27190:	480d      	ldr	r0, [pc, #52]	; (271c8 <mbedtls_hardware_poll+0xf0>)
   27192:	f7fe fd2f 	bl	25bf4 <CC_PalAbort>
   27196:	e7b8      	b.n	2710a <mbedtls_hardware_poll+0x32>
   27198:	480c      	ldr	r0, [pc, #48]	; (271cc <mbedtls_hardware_poll+0xf4>)
   2719a:	f7fe fd2b 	bl	25bf4 <CC_PalAbort>
   2719e:	e7af      	b.n	27100 <mbedtls_hardware_poll+0x28>
   271a0:	480b      	ldr	r0, [pc, #44]	; (271d0 <mbedtls_hardware_poll+0xf8>)
   271a2:	f7fe fd27 	bl	25bf4 <CC_PalAbort>
   271a6:	4630      	mov	r0, r6
   271a8:	b009      	add	sp, #36	; 0x24
   271aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   271ac:	f04f 36ff 	mov.w	r6, #4294967295
   271b0:	e7c8      	b.n	27144 <mbedtls_hardware_poll+0x6c>
   271b2:	bf00      	nop
   271b4:	20000944 	.word	0x20000944
   271b8:	200069f0 	.word	0x200069f0
   271bc:	200067d0 	.word	0x200067d0
   271c0:	200067cc 	.word	0x200067cc
   271c4:	0002f53c 	.word	0x0002f53c
   271c8:	0002f51c 	.word	0x0002f51c
   271cc:	0002f504 	.word	0x0002f504
   271d0:	0002f594 	.word	0x0002f594

000271d4 <cc_mbedtls_aes_init>:
   271d4:	b510      	push	{r4, lr}
   271d6:	4604      	mov	r4, r0
   271d8:	b130      	cbz	r0, 271e8 <cc_mbedtls_aes_init+0x14>
   271da:	2200      	movs	r2, #0
   271dc:	2301      	movs	r3, #1
   271de:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   271e2:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   271e6:	bd10      	pop	{r4, pc}
   271e8:	4801      	ldr	r0, [pc, #4]	; (271f0 <cc_mbedtls_aes_init+0x1c>)
   271ea:	f7fe fd03 	bl	25bf4 <CC_PalAbort>
   271ee:	e7f4      	b.n	271da <cc_mbedtls_aes_init+0x6>
   271f0:	0002f5ac 	.word	0x0002f5ac

000271f4 <cc_mbedtls_aes_free>:
   271f4:	b118      	cbz	r0, 271fe <cc_mbedtls_aes_free+0xa>
   271f6:	2274      	movs	r2, #116	; 0x74
   271f8:	2100      	movs	r1, #0
   271fa:	f7ff bc41 	b.w	26a80 <CC_PalMemSetPlat>
   271fe:	4770      	bx	lr

00027200 <cc_mbedtls_aes_setkey_enc>:
   27200:	b190      	cbz	r0, 27228 <cc_mbedtls_aes_setkey_enc+0x28>
   27202:	b1a1      	cbz	r1, 2722e <cc_mbedtls_aes_setkey_enc+0x2e>
   27204:	b510      	push	{r4, lr}
   27206:	2a80      	cmp	r2, #128	; 0x80
   27208:	f04f 0400 	mov.w	r4, #0
   2720c:	6384      	str	r4, [r0, #56]	; 0x38
   2720e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   27212:	d106      	bne.n	27222 <cc_mbedtls_aes_setkey_enc+0x22>
   27214:	2210      	movs	r2, #16
   27216:	6304      	str	r4, [r0, #48]	; 0x30
   27218:	4410      	add	r0, r2
   2721a:	f7ff fc2f 	bl	26a7c <CC_PalMemCopyPlat>
   2721e:	4620      	mov	r0, r4
   27220:	bd10      	pop	{r4, pc}
   27222:	f06f 001f 	mvn.w	r0, #31
   27226:	bd10      	pop	{r4, pc}
   27228:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2722c:	4770      	bx	lr
   2722e:	f06f 001f 	mvn.w	r0, #31
   27232:	4770      	bx	lr

00027234 <cc_mbedtls_aes_crypt_ecb>:
   27234:	b328      	cbz	r0, 27282 <cc_mbedtls_aes_crypt_ecb+0x4e>
   27236:	b322      	cbz	r2, 27282 <cc_mbedtls_aes_crypt_ecb+0x4e>
   27238:	b31b      	cbz	r3, 27282 <cc_mbedtls_aes_crypt_ecb+0x4e>
   2723a:	2901      	cmp	r1, #1
   2723c:	d821      	bhi.n	27282 <cc_mbedtls_aes_crypt_ecb+0x4e>
   2723e:	b570      	push	{r4, r5, r6, lr}
   27240:	4604      	mov	r4, r0
   27242:	6b81      	ldr	r1, [r0, #56]	; 0x38
   27244:	b086      	sub	sp, #24
   27246:	d017      	beq.n	27278 <cc_mbedtls_aes_crypt_ecb+0x44>
   27248:	2901      	cmp	r1, #1
   2724a:	d117      	bne.n	2727c <cc_mbedtls_aes_crypt_ecb+0x48>
   2724c:	2510      	movs	r5, #16
   2724e:	2100      	movs	r1, #0
   27250:	eb0d 0605 	add.w	r6, sp, r5
   27254:	6361      	str	r1, [r4, #52]	; 0x34
   27256:	4610      	mov	r0, r2
   27258:	9500      	str	r5, [sp, #0]
   2725a:	9601      	str	r6, [sp, #4]
   2725c:	aa02      	add	r2, sp, #8
   2725e:	4629      	mov	r1, r5
   27260:	f000 faca 	bl	277f8 <SetDataBuffersInfo>
   27264:	b950      	cbnz	r0, 2727c <cc_mbedtls_aes_crypt_ecb+0x48>
   27266:	462b      	mov	r3, r5
   27268:	4632      	mov	r2, r6
   2726a:	a902      	add	r1, sp, #8
   2726c:	4620      	mov	r0, r4
   2726e:	f000 fd4b 	bl	27d08 <ProcessAesDrv>
   27272:	b918      	cbnz	r0, 2727c <cc_mbedtls_aes_crypt_ecb+0x48>
   27274:	b006      	add	sp, #24
   27276:	bd70      	pop	{r4, r5, r6, pc}
   27278:	2900      	cmp	r1, #0
   2727a:	d0e7      	beq.n	2724c <cc_mbedtls_aes_crypt_ecb+0x18>
   2727c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   27280:	e7f8      	b.n	27274 <cc_mbedtls_aes_crypt_ecb+0x40>
   27282:	f06f 0021 	mvn.w	r0, #33	; 0x21
   27286:	4770      	bx	lr

00027288 <cc_mbedtls_sha256_init>:
   27288:	b510      	push	{r4, lr}
   2728a:	4604      	mov	r4, r0
   2728c:	b128      	cbz	r0, 2729a <cc_mbedtls_sha256_init+0x12>
   2728e:	4620      	mov	r0, r4
   27290:	21f4      	movs	r1, #244	; 0xf4
   27292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27296:	f7ff bbf5 	b.w	26a84 <CC_PalMemSetZeroPlat>
   2729a:	4804      	ldr	r0, [pc, #16]	; (272ac <cc_mbedtls_sha256_init+0x24>)
   2729c:	f7fe fcaa 	bl	25bf4 <CC_PalAbort>
   272a0:	4620      	mov	r0, r4
   272a2:	21f4      	movs	r1, #244	; 0xf4
   272a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   272a8:	f7ff bbec 	b.w	26a84 <CC_PalMemSetZeroPlat>
   272ac:	0002f5c0 	.word	0x0002f5c0

000272b0 <cc_mbedtls_sha256_free>:
   272b0:	b110      	cbz	r0, 272b8 <cc_mbedtls_sha256_free+0x8>
   272b2:	21f4      	movs	r1, #244	; 0xf4
   272b4:	f7fe bd9c 	b.w	25df0 <mbedtls_zeroize_internal>
   272b8:	4770      	bx	lr
   272ba:	bf00      	nop

000272bc <cc_mbedtls_sha256_starts>:
   272bc:	b508      	push	{r3, lr}
   272be:	b161      	cbz	r1, 272da <cc_mbedtls_sha256_starts+0x1e>
   272c0:	2901      	cmp	r1, #1
   272c2:	d107      	bne.n	272d4 <cc_mbedtls_sha256_starts+0x18>
   272c4:	2102      	movs	r1, #2
   272c6:	f000 f85b 	bl	27380 <mbedtls_sha_starts_internal>
   272ca:	2800      	cmp	r0, #0
   272cc:	bf18      	it	ne
   272ce:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   272d2:	bd08      	pop	{r3, pc}
   272d4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   272d8:	bd08      	pop	{r3, pc}
   272da:	2101      	movs	r1, #1
   272dc:	f000 f850 	bl	27380 <mbedtls_sha_starts_internal>
   272e0:	e7f3      	b.n	272ca <cc_mbedtls_sha256_starts+0xe>
   272e2:	bf00      	nop

000272e4 <cc_mbedtls_sha256_update>:
   272e4:	b530      	push	{r4, r5, lr}
   272e6:	4605      	mov	r5, r0
   272e8:	1888      	adds	r0, r1, r2
   272ea:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   272ee:	b0a1      	sub	sp, #132	; 0x84
   272f0:	460b      	mov	r3, r1
   272f2:	4614      	mov	r4, r2
   272f4:	d801      	bhi.n	272fa <cc_mbedtls_sha256_update+0x16>
   272f6:	2a80      	cmp	r2, #128	; 0x80
   272f8:	d90c      	bls.n	27314 <cc_mbedtls_sha256_update+0x30>
   272fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   272fe:	d917      	bls.n	27330 <cc_mbedtls_sha256_update+0x4c>
   27300:	4622      	mov	r2, r4
   27302:	4619      	mov	r1, r3
   27304:	4628      	mov	r0, r5
   27306:	f000 f87d 	bl	27404 <mbedtls_sha_update_internal>
   2730a:	4604      	mov	r4, r0
   2730c:	b984      	cbnz	r4, 27330 <cc_mbedtls_sha256_update+0x4c>
   2730e:	4620      	mov	r0, r4
   27310:	b021      	add	sp, #132	; 0x84
   27312:	bd30      	pop	{r4, r5, pc}
   27314:	4668      	mov	r0, sp
   27316:	f7ff fbb1 	bl	26a7c <CC_PalMemCopyPlat>
   2731a:	4622      	mov	r2, r4
   2731c:	4669      	mov	r1, sp
   2731e:	4628      	mov	r0, r5
   27320:	f000 f870 	bl	27404 <mbedtls_sha_update_internal>
   27324:	2180      	movs	r1, #128	; 0x80
   27326:	4604      	mov	r4, r0
   27328:	4668      	mov	r0, sp
   2732a:	f7ff fbab 	bl	26a84 <CC_PalMemSetZeroPlat>
   2732e:	e7ed      	b.n	2730c <cc_mbedtls_sha256_update+0x28>
   27330:	f06f 0436 	mvn.w	r4, #54	; 0x36
   27334:	e7eb      	b.n	2730e <cc_mbedtls_sha256_update+0x2a>
   27336:	bf00      	nop

00027338 <cc_mbedtls_sha256_finish>:
   27338:	b570      	push	{r4, r5, r6, lr}
   2733a:	b1e8      	cbz	r0, 27378 <cc_mbedtls_sha256_finish+0x40>
   2733c:	460e      	mov	r6, r1
   2733e:	b1d9      	cbz	r1, 27378 <cc_mbedtls_sha256_finish+0x40>
   27340:	4604      	mov	r4, r0
   27342:	f000 f831 	bl	273a8 <mbedtls_sha_finish_internal>
   27346:	4605      	mov	r5, r0
   27348:	b9b0      	cbnz	r0, 27378 <cc_mbedtls_sha256_finish+0x40>
   2734a:	6823      	ldr	r3, [r4, #0]
   2734c:	2b01      	cmp	r3, #1
   2734e:	d00b      	beq.n	27368 <cc_mbedtls_sha256_finish+0x30>
   27350:	2b02      	cmp	r3, #2
   27352:	d001      	beq.n	27358 <cc_mbedtls_sha256_finish+0x20>
   27354:	4628      	mov	r0, r5
   27356:	bd70      	pop	{r4, r5, r6, pc}
   27358:	221c      	movs	r2, #28
   2735a:	f104 0108 	add.w	r1, r4, #8
   2735e:	4630      	mov	r0, r6
   27360:	f7ff fb8c 	bl	26a7c <CC_PalMemCopyPlat>
   27364:	4628      	mov	r0, r5
   27366:	bd70      	pop	{r4, r5, r6, pc}
   27368:	2220      	movs	r2, #32
   2736a:	f104 0108 	add.w	r1, r4, #8
   2736e:	4630      	mov	r0, r6
   27370:	f7ff fb84 	bl	26a7c <CC_PalMemCopyPlat>
   27374:	4628      	mov	r0, r5
   27376:	bd70      	pop	{r4, r5, r6, pc}
   27378:	f06f 0536 	mvn.w	r5, #54	; 0x36
   2737c:	e7ea      	b.n	27354 <cc_mbedtls_sha256_finish+0x1c>
   2737e:	bf00      	nop

00027380 <mbedtls_sha_starts_internal>:
   27380:	b178      	cbz	r0, 273a2 <mbedtls_sha_starts_internal+0x22>
   27382:	b538      	push	{r3, r4, r5, lr}
   27384:	4604      	mov	r4, r0
   27386:	460d      	mov	r5, r1
   27388:	21f0      	movs	r1, #240	; 0xf0
   2738a:	f7ff fb7b 	bl	26a84 <CC_PalMemSetZeroPlat>
   2738e:	2340      	movs	r3, #64	; 0x40
   27390:	6025      	str	r5, [r4, #0]
   27392:	65e3      	str	r3, [r4, #92]	; 0x5c
   27394:	4620      	mov	r0, r4
   27396:	f000 fa63 	bl	27860 <InitHashDrv>
   2739a:	3800      	subs	r0, #0
   2739c:	bf18      	it	ne
   2739e:	2001      	movne	r0, #1
   273a0:	bd38      	pop	{r3, r4, r5, pc}
   273a2:	2001      	movs	r0, #1
   273a4:	4770      	bx	lr
   273a6:	bf00      	nop

000273a8 <mbedtls_sha_finish_internal>:
   273a8:	b570      	push	{r4, r5, r6, lr}
   273aa:	6e05      	ldr	r5, [r0, #96]	; 0x60
   273ac:	b0a4      	sub	sp, #144	; 0x90
   273ae:	4604      	mov	r4, r0
   273b0:	ae04      	add	r6, sp, #16
   273b2:	b9e5      	cbnz	r5, 273ee <mbedtls_sha_finish_internal+0x46>
   273b4:	2201      	movs	r2, #1
   273b6:	2300      	movs	r3, #0
   273b8:	6062      	str	r2, [r4, #4]
   273ba:	4630      	mov	r0, r6
   273bc:	e9cd 3300 	strd	r3, r3, [sp]
   273c0:	aa02      	add	r2, sp, #8
   273c2:	4629      	mov	r1, r5
   273c4:	f000 fa18 	bl	277f8 <SetDataBuffersInfo>
   273c8:	b110      	cbz	r0, 273d0 <mbedtls_sha_finish_internal+0x28>
   273ca:	2001      	movs	r0, #1
   273cc:	b024      	add	sp, #144	; 0x90
   273ce:	bd70      	pop	{r4, r5, r6, pc}
   273d0:	462a      	mov	r2, r5
   273d2:	a902      	add	r1, sp, #8
   273d4:	4620      	mov	r0, r4
   273d6:	f000 fa6d 	bl	278b4 <ProcessHashDrv>
   273da:	2800      	cmp	r0, #0
   273dc:	d1f5      	bne.n	273ca <mbedtls_sha_finish_internal+0x22>
   273de:	4620      	mov	r0, r4
   273e0:	f000 fb7e 	bl	27ae0 <FinishHashDrv>
   273e4:	2800      	cmp	r0, #0
   273e6:	d1f0      	bne.n	273ca <mbedtls_sha_finish_internal+0x22>
   273e8:	6620      	str	r0, [r4, #96]	; 0x60
   273ea:	b024      	add	sp, #144	; 0x90
   273ec:	bd70      	pop	{r4, r5, r6, pc}
   273ee:	2d80      	cmp	r5, #128	; 0x80
   273f0:	462a      	mov	r2, r5
   273f2:	f100 0164 	add.w	r1, r0, #100	; 0x64
   273f6:	bf28      	it	cs
   273f8:	2280      	movcs	r2, #128	; 0x80
   273fa:	4630      	mov	r0, r6
   273fc:	f7ff fb3e 	bl	26a7c <CC_PalMemCopyPlat>
   27400:	6e25      	ldr	r5, [r4, #96]	; 0x60
   27402:	e7d7      	b.n	273b4 <mbedtls_sha_finish_internal+0xc>

00027404 <mbedtls_sha_update_internal>:
   27404:	2800      	cmp	r0, #0
   27406:	f000 80cd 	beq.w	275a4 <mbedtls_sha_update_internal+0x1a0>
   2740a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2740e:	4615      	mov	r5, r2
   27410:	b0a5      	sub	sp, #148	; 0x94
   27412:	2a00      	cmp	r2, #0
   27414:	f000 80b4 	beq.w	27580 <mbedtls_sha_update_internal+0x17c>
   27418:	460f      	mov	r7, r1
   2741a:	2900      	cmp	r1, #0
   2741c:	f000 80ac 	beq.w	27578 <mbedtls_sha_update_internal+0x174>
   27420:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   27424:	4606      	mov	r6, r0
   27426:	6e00      	ldr	r0, [r0, #96]	; 0x60
   27428:	d37d      	bcc.n	27526 <mbedtls_sha_update_internal+0x122>
   2742a:	f64f 78ff 	movw	r8, #65535	; 0xffff
   2742e:	f106 0964 	add.w	r9, r6, #100	; 0x64
   27432:	e014      	b.n	2745e <mbedtls_sha_update_internal+0x5a>
   27434:	4283      	cmp	r3, r0
   27436:	46ba      	mov	sl, r7
   27438:	f64f 74ff 	movw	r4, #65535	; 0xffff
   2743c:	d029      	beq.n	27492 <mbedtls_sha_update_internal+0x8e>
   2743e:	fbb4 fbf3 	udiv	fp, r4, r3
   27442:	fb03 fb0b 	mul.w	fp, r3, fp
   27446:	f1bb 0f00 	cmp.w	fp, #0
   2744a:	d144      	bne.n	274d6 <mbedtls_sha_update_internal+0xd2>
   2744c:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   27450:	4447      	add	r7, r8
   27452:	3dff      	subs	r5, #255	; 0xff
   27454:	2c00      	cmp	r4, #0
   27456:	d159      	bne.n	2750c <mbedtls_sha_update_internal+0x108>
   27458:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   2745c:	d363      	bcc.n	27526 <mbedtls_sha_update_internal+0x122>
   2745e:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   27460:	1a1c      	subs	r4, r3, r0
   27462:	fbb4 f2f3 	udiv	r2, r4, r3
   27466:	fb03 4412 	mls	r4, r3, r2, r4
   2746a:	2c00      	cmp	r4, #0
   2746c:	d0e2      	beq.n	27434 <mbedtls_sha_update_internal+0x30>
   2746e:	4544      	cmp	r4, r8
   27470:	bf28      	it	cs
   27472:	4644      	movcs	r4, r8
   27474:	4622      	mov	r2, r4
   27476:	4448      	add	r0, r9
   27478:	4639      	mov	r1, r7
   2747a:	f7ff faff 	bl	26a7c <CC_PalMemCopyPlat>
   2747e:	6e30      	ldr	r0, [r6, #96]	; 0x60
   27480:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   27482:	4420      	add	r0, r4
   27484:	4283      	cmp	r3, r0
   27486:	eb07 0a04 	add.w	sl, r7, r4
   2748a:	6630      	str	r0, [r6, #96]	; 0x60
   2748c:	eba8 0404 	sub.w	r4, r8, r4
   27490:	d1d5      	bne.n	2743e <mbedtls_sha_update_internal+0x3a>
   27492:	2b80      	cmp	r3, #128	; 0x80
   27494:	bf28      	it	cs
   27496:	2380      	movcs	r3, #128	; 0x80
   27498:	461a      	mov	r2, r3
   2749a:	4649      	mov	r1, r9
   2749c:	a804      	add	r0, sp, #16
   2749e:	f7ff faed 	bl	26a7c <CC_PalMemCopyPlat>
   274a2:	2300      	movs	r3, #0
   274a4:	e9cd 3300 	strd	r3, r3, [sp]
   274a8:	aa02      	add	r2, sp, #8
   274aa:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   274ac:	a804      	add	r0, sp, #16
   274ae:	f000 f9a3 	bl	277f8 <SetDataBuffersInfo>
   274b2:	2800      	cmp	r0, #0
   274b4:	d160      	bne.n	27578 <mbedtls_sha_update_internal+0x174>
   274b6:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   274b8:	a902      	add	r1, sp, #8
   274ba:	4630      	mov	r0, r6
   274bc:	f000 f9fa 	bl	278b4 <ProcessHashDrv>
   274c0:	2800      	cmp	r0, #0
   274c2:	d159      	bne.n	27578 <mbedtls_sha_update_internal+0x174>
   274c4:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   274c6:	fbb4 fbf3 	udiv	fp, r4, r3
   274ca:	fb03 fb0b 	mul.w	fp, r3, fp
   274ce:	6630      	str	r0, [r6, #96]	; 0x60
   274d0:	f1bb 0f00 	cmp.w	fp, #0
   274d4:	d0ba      	beq.n	2744c <mbedtls_sha_update_internal+0x48>
   274d6:	2300      	movs	r3, #0
   274d8:	e9cd 3300 	strd	r3, r3, [sp]
   274dc:	aa02      	add	r2, sp, #8
   274de:	4659      	mov	r1, fp
   274e0:	4650      	mov	r0, sl
   274e2:	f000 f989 	bl	277f8 <SetDataBuffersInfo>
   274e6:	2800      	cmp	r0, #0
   274e8:	d146      	bne.n	27578 <mbedtls_sha_update_internal+0x174>
   274ea:	a902      	add	r1, sp, #8
   274ec:	465a      	mov	r2, fp
   274ee:	4630      	mov	r0, r6
   274f0:	f000 f9e0 	bl	278b4 <ProcessHashDrv>
   274f4:	2800      	cmp	r0, #0
   274f6:	d13f      	bne.n	27578 <mbedtls_sha_update_internal+0x174>
   274f8:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   274fc:	eba4 040b 	sub.w	r4, r4, fp
   27500:	6e30      	ldr	r0, [r6, #96]	; 0x60
   27502:	44da      	add	sl, fp
   27504:	4447      	add	r7, r8
   27506:	3dff      	subs	r5, #255	; 0xff
   27508:	2c00      	cmp	r4, #0
   2750a:	d0a5      	beq.n	27458 <mbedtls_sha_update_internal+0x54>
   2750c:	3019      	adds	r0, #25
   2750e:	4651      	mov	r1, sl
   27510:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   27514:	4622      	mov	r2, r4
   27516:	f7ff fab1 	bl	26a7c <CC_PalMemCopyPlat>
   2751a:	6e30      	ldr	r0, [r6, #96]	; 0x60
   2751c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   27520:	4420      	add	r0, r4
   27522:	6630      	str	r0, [r6, #96]	; 0x60
   27524:	d29b      	bcs.n	2745e <mbedtls_sha_update_internal+0x5a>
   27526:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   27528:	1a14      	subs	r4, r2, r0
   2752a:	fbb4 f3f2 	udiv	r3, r4, r2
   2752e:	fb02 4413 	mls	r4, r2, r3, r4
   27532:	42ac      	cmp	r4, r5
   27534:	bf28      	it	cs
   27536:	462c      	movcs	r4, r5
   27538:	bb34      	cbnz	r4, 27588 <mbedtls_sha_update_internal+0x184>
   2753a:	4290      	cmp	r0, r2
   2753c:	d034      	beq.n	275a8 <mbedtls_sha_update_internal+0x1a4>
   2753e:	fbb5 f4f2 	udiv	r4, r5, r2
   27542:	fb02 f404 	mul.w	r4, r2, r4
   27546:	b96c      	cbnz	r4, 27564 <mbedtls_sha_update_internal+0x160>
   27548:	b1d5      	cbz	r5, 27580 <mbedtls_sha_update_internal+0x17c>
   2754a:	6e33      	ldr	r3, [r6, #96]	; 0x60
   2754c:	3319      	adds	r3, #25
   2754e:	eb06 0083 	add.w	r0, r6, r3, lsl #2
   27552:	462a      	mov	r2, r5
   27554:	4639      	mov	r1, r7
   27556:	f7ff fa91 	bl	26a7c <CC_PalMemCopyPlat>
   2755a:	6e33      	ldr	r3, [r6, #96]	; 0x60
   2755c:	442b      	add	r3, r5
   2755e:	2000      	movs	r0, #0
   27560:	6633      	str	r3, [r6, #96]	; 0x60
   27562:	e00a      	b.n	2757a <mbedtls_sha_update_internal+0x176>
   27564:	2300      	movs	r3, #0
   27566:	e9cd 3300 	strd	r3, r3, [sp]
   2756a:	aa02      	add	r2, sp, #8
   2756c:	4621      	mov	r1, r4
   2756e:	4638      	mov	r0, r7
   27570:	f000 f942 	bl	277f8 <SetDataBuffersInfo>
   27574:	2800      	cmp	r0, #0
   27576:	d033      	beq.n	275e0 <mbedtls_sha_update_internal+0x1dc>
   27578:	2001      	movs	r0, #1
   2757a:	b025      	add	sp, #148	; 0x94
   2757c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27580:	4628      	mov	r0, r5
   27582:	b025      	add	sp, #148	; 0x94
   27584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27588:	f106 0364 	add.w	r3, r6, #100	; 0x64
   2758c:	4639      	mov	r1, r7
   2758e:	4622      	mov	r2, r4
   27590:	4418      	add	r0, r3
   27592:	f7ff fa73 	bl	26a7c <CC_PalMemCopyPlat>
   27596:	6e30      	ldr	r0, [r6, #96]	; 0x60
   27598:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   2759a:	4420      	add	r0, r4
   2759c:	1b2d      	subs	r5, r5, r4
   2759e:	4427      	add	r7, r4
   275a0:	6630      	str	r0, [r6, #96]	; 0x60
   275a2:	e7ca      	b.n	2753a <mbedtls_sha_update_internal+0x136>
   275a4:	2001      	movs	r0, #1
   275a6:	4770      	bx	lr
   275a8:	2a80      	cmp	r2, #128	; 0x80
   275aa:	bf28      	it	cs
   275ac:	2280      	movcs	r2, #128	; 0x80
   275ae:	f106 0164 	add.w	r1, r6, #100	; 0x64
   275b2:	a804      	add	r0, sp, #16
   275b4:	f7ff fa62 	bl	26a7c <CC_PalMemCopyPlat>
   275b8:	2300      	movs	r3, #0
   275ba:	e9cd 3300 	strd	r3, r3, [sp]
   275be:	a804      	add	r0, sp, #16
   275c0:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   275c2:	aa02      	add	r2, sp, #8
   275c4:	f000 f918 	bl	277f8 <SetDataBuffersInfo>
   275c8:	2800      	cmp	r0, #0
   275ca:	d1d5      	bne.n	27578 <mbedtls_sha_update_internal+0x174>
   275cc:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   275ce:	a902      	add	r1, sp, #8
   275d0:	4630      	mov	r0, r6
   275d2:	f000 f96f 	bl	278b4 <ProcessHashDrv>
   275d6:	2800      	cmp	r0, #0
   275d8:	d1ce      	bne.n	27578 <mbedtls_sha_update_internal+0x174>
   275da:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   275dc:	6630      	str	r0, [r6, #96]	; 0x60
   275de:	e7ae      	b.n	2753e <mbedtls_sha_update_internal+0x13a>
   275e0:	a902      	add	r1, sp, #8
   275e2:	4622      	mov	r2, r4
   275e4:	4630      	mov	r0, r6
   275e6:	f000 f965 	bl	278b4 <ProcessHashDrv>
   275ea:	2800      	cmp	r0, #0
   275ec:	d1c4      	bne.n	27578 <mbedtls_sha_update_internal+0x174>
   275ee:	4427      	add	r7, r4
   275f0:	1b2d      	subs	r5, r5, r4
   275f2:	e7a9      	b.n	27548 <mbedtls_sha_update_internal+0x144>

000275f4 <cc_mbedtls_sha256>:
   275f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   275f6:	461c      	mov	r4, r3
   275f8:	4605      	mov	r5, r0
   275fa:	4811      	ldr	r0, [pc, #68]	; (27640 <cc_mbedtls_sha256+0x4c>)
   275fc:	460e      	mov	r6, r1
   275fe:	4617      	mov	r7, r2
   27600:	f7ff fe42 	bl	27288 <cc_mbedtls_sha256_init>
   27604:	4621      	mov	r1, r4
   27606:	480e      	ldr	r0, [pc, #56]	; (27640 <cc_mbedtls_sha256+0x4c>)
   27608:	f7ff fe58 	bl	272bc <cc_mbedtls_sha256_starts>
   2760c:	4604      	mov	r4, r0
   2760e:	b120      	cbz	r0, 2761a <cc_mbedtls_sha256+0x26>
   27610:	480b      	ldr	r0, [pc, #44]	; (27640 <cc_mbedtls_sha256+0x4c>)
   27612:	f7ff fe4d 	bl	272b0 <cc_mbedtls_sha256_free>
   27616:	4620      	mov	r0, r4
   27618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2761a:	4809      	ldr	r0, [pc, #36]	; (27640 <cc_mbedtls_sha256+0x4c>)
   2761c:	4632      	mov	r2, r6
   2761e:	4629      	mov	r1, r5
   27620:	f7ff fe60 	bl	272e4 <cc_mbedtls_sha256_update>
   27624:	4604      	mov	r4, r0
   27626:	2800      	cmp	r0, #0
   27628:	d1f2      	bne.n	27610 <cc_mbedtls_sha256+0x1c>
   2762a:	4639      	mov	r1, r7
   2762c:	4804      	ldr	r0, [pc, #16]	; (27640 <cc_mbedtls_sha256+0x4c>)
   2762e:	f7ff fe83 	bl	27338 <cc_mbedtls_sha256_finish>
   27632:	4604      	mov	r4, r0
   27634:	4802      	ldr	r0, [pc, #8]	; (27640 <cc_mbedtls_sha256+0x4c>)
   27636:	f7ff fe3b 	bl	272b0 <cc_mbedtls_sha256_free>
   2763a:	4620      	mov	r0, r4
   2763c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2763e:	bf00      	nop
   27640:	20006a18 	.word	0x20006a18

00027644 <RNG_PLAT_SetUserRngParameters>:
   27644:	b530      	push	{r4, r5, lr}
   27646:	b083      	sub	sp, #12
   27648:	231c      	movs	r3, #28
   2764a:	a901      	add	r1, sp, #4
   2764c:	4604      	mov	r4, r0
   2764e:	9301      	str	r3, [sp, #4]
   27650:	f000 f834 	bl	276bc <CC_PalTrngParamGet>
   27654:	4605      	mov	r5, r0
   27656:	b938      	cbnz	r0, 27668 <RNG_PLAT_SetUserRngParameters+0x24>
   27658:	9b01      	ldr	r3, [sp, #4]
   2765a:	2b1c      	cmp	r3, #28
   2765c:	d007      	beq.n	2766e <RNG_PLAT_SetUserRngParameters+0x2a>
   2765e:	4d15      	ldr	r5, [pc, #84]	; (276b4 <RNG_PLAT_SetUserRngParameters+0x70>)
   27660:	211c      	movs	r1, #28
   27662:	4620      	mov	r0, r4
   27664:	f7ff fa0e 	bl	26a84 <CC_PalMemSetZeroPlat>
   27668:	4628      	mov	r0, r5
   2766a:	b003      	add	sp, #12
   2766c:	bd30      	pop	{r4, r5, pc}
   2766e:	e9d4 3200 	ldrd	r3, r2, [r4]
   27672:	2101      	movs	r1, #1
   27674:	3b00      	subs	r3, #0
   27676:	61e1      	str	r1, [r4, #28]
   27678:	bf18      	it	ne
   2767a:	2301      	movne	r3, #1
   2767c:	b10a      	cbz	r2, 27682 <RNG_PLAT_SetUserRngParameters+0x3e>
   2767e:	f043 0302 	orr.w	r3, r3, #2
   27682:	68a2      	ldr	r2, [r4, #8]
   27684:	b932      	cbnz	r2, 27694 <RNG_PLAT_SetUserRngParameters+0x50>
   27686:	68e2      	ldr	r2, [r4, #12]
   27688:	b942      	cbnz	r2, 2769c <RNG_PLAT_SetUserRngParameters+0x58>
   2768a:	e9c4 3208 	strd	r3, r2, [r4, #32]
   2768e:	b97b      	cbnz	r3, 276b0 <RNG_PLAT_SetUserRngParameters+0x6c>
   27690:	4d09      	ldr	r5, [pc, #36]	; (276b8 <RNG_PLAT_SetUserRngParameters+0x74>)
   27692:	e7e5      	b.n	27660 <RNG_PLAT_SetUserRngParameters+0x1c>
   27694:	68e2      	ldr	r2, [r4, #12]
   27696:	f043 0304 	orr.w	r3, r3, #4
   2769a:	b13a      	cbz	r2, 276ac <RNG_PLAT_SetUserRngParameters+0x68>
   2769c:	f043 0308 	orr.w	r3, r3, #8
   276a0:	2200      	movs	r2, #0
   276a2:	4628      	mov	r0, r5
   276a4:	e9c4 3208 	strd	r3, r2, [r4, #32]
   276a8:	b003      	add	sp, #12
   276aa:	bd30      	pop	{r4, r5, pc}
   276ac:	e9c4 3208 	strd	r3, r2, [r4, #32]
   276b0:	4615      	mov	r5, r2
   276b2:	e7d9      	b.n	27668 <RNG_PLAT_SetUserRngParameters+0x24>
   276b4:	00f00c37 	.word	0x00f00c37
   276b8:	00f00c0e 	.word	0x00f00c0e

000276bc <CC_PalTrngParamGet>:
   276bc:	b118      	cbz	r0, 276c6 <CC_PalTrngParamGet+0xa>
   276be:	b111      	cbz	r1, 276c6 <CC_PalTrngParamGet+0xa>
   276c0:	680b      	ldr	r3, [r1, #0]
   276c2:	2b1c      	cmp	r3, #28
   276c4:	d001      	beq.n	276ca <CC_PalTrngParamGet+0xe>
   276c6:	2001      	movs	r0, #1
   276c8:	4770      	bx	lr
   276ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   276ce:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   276d2:	3201      	adds	r2, #1
   276d4:	bf14      	ite	ne
   276d6:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   276da:	f241 225c 	movweq	r2, #4700	; 0x125c
   276de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   276e2:	6002      	str	r2, [r0, #0]
   276e4:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   276e8:	3201      	adds	r2, #1
   276ea:	bf14      	ite	ne
   276ec:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   276f0:	f641 1264 	movweq	r2, #6500	; 0x1964
   276f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   276f8:	6042      	str	r2, [r0, #4]
   276fa:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   276fe:	3201      	adds	r2, #1
   27700:	bf14      	ite	ne
   27702:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   27706:	f640 62d8 	movweq	r2, #3800	; 0xed8
   2770a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2770e:	6082      	str	r2, [r0, #8]
   27710:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   27714:	3201      	adds	r2, #1
   27716:	bf14      	ite	ne
   27718:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   2771c:	f241 3288 	movweq	r2, #5000	; 0x1388
   27720:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27724:	60c2      	str	r2, [r0, #12]
   27726:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   2772a:	3201      	adds	r2, #1
   2772c:	bf14      	ite	ne
   2772e:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   27732:	2290      	moveq	r2, #144	; 0x90
   27734:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27738:	6102      	str	r2, [r0, #16]
   2773a:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   2773e:	3201      	adds	r2, #1
   27740:	bf14      	ite	ne
   27742:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   27746:	2251      	moveq	r2, #81	; 0x51
   27748:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2774c:	6142      	str	r2, [r0, #20]
   2774e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   27752:	3201      	adds	r2, #1
   27754:	bf14      	ite	ne
   27756:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   2775a:	f240 3337 	movweq	r3, #823	; 0x337
   2775e:	6183      	str	r3, [r0, #24]
   27760:	2000      	movs	r0, #0
   27762:	4770      	bx	lr

00027764 <LLF_RND_WaitRngInterrupt>:
   27764:	b508      	push	{r3, lr}
   27766:	4601      	mov	r1, r0
   27768:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2776c:	f7ff f912 	bl	26994 <CC_HalWaitInterruptRND>
   27770:	4b03      	ldr	r3, [pc, #12]	; (27780 <LLF_RND_WaitRngInterrupt+0x1c>)
   27772:	2200      	movs	r2, #0
   27774:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   27778:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   2777c:	bd08      	pop	{r3, pc}
   2777e:	bf00      	nop
   27780:	5002b000 	.word	0x5002b000

00027784 <LLF_RND_GetRoscSampleCnt>:
   27784:	3801      	subs	r0, #1
   27786:	2807      	cmp	r0, #7
   27788:	d805      	bhi.n	27796 <LLF_RND_GetRoscSampleCnt+0x12>
   2778a:	e8df f000 	tbb	[pc, r0]
   2778e:	0e12      	.short	0x0e12
   27790:	04040a04 	.word	0x04040a04
   27794:	0604      	.short	0x0604
   27796:	4809      	ldr	r0, [pc, #36]	; (277bc <LLF_RND_GetRoscSampleCnt+0x38>)
   27798:	4770      	bx	lr
   2779a:	68cb      	ldr	r3, [r1, #12]
   2779c:	624b      	str	r3, [r1, #36]	; 0x24
   2779e:	2000      	movs	r0, #0
   277a0:	4770      	bx	lr
   277a2:	688b      	ldr	r3, [r1, #8]
   277a4:	624b      	str	r3, [r1, #36]	; 0x24
   277a6:	2000      	movs	r0, #0
   277a8:	4770      	bx	lr
   277aa:	684b      	ldr	r3, [r1, #4]
   277ac:	624b      	str	r3, [r1, #36]	; 0x24
   277ae:	2000      	movs	r0, #0
   277b0:	4770      	bx	lr
   277b2:	680b      	ldr	r3, [r1, #0]
   277b4:	624b      	str	r3, [r1, #36]	; 0x24
   277b6:	2000      	movs	r0, #0
   277b8:	4770      	bx	lr
   277ba:	bf00      	nop
   277bc:	00f10c31 	.word	0x00f10c31

000277c0 <LLF_RND_GetFastestRosc>:
   277c0:	680b      	ldr	r3, [r1, #0]
   277c2:	e002      	b.n	277ca <LLF_RND_GetFastestRosc+0xa>
   277c4:	2b08      	cmp	r3, #8
   277c6:	600b      	str	r3, [r1, #0]
   277c8:	d806      	bhi.n	277d8 <LLF_RND_GetFastestRosc+0x18>
   277ca:	6a02      	ldr	r2, [r0, #32]
   277cc:	4213      	tst	r3, r2
   277ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
   277d2:	d0f7      	beq.n	277c4 <LLF_RND_GetFastestRosc+0x4>
   277d4:	2000      	movs	r0, #0
   277d6:	4770      	bx	lr
   277d8:	4800      	ldr	r0, [pc, #0]	; (277dc <LLF_RND_GetFastestRosc+0x1c>)
   277da:	4770      	bx	lr
   277dc:	00f10c31 	.word	0x00f10c31

000277e0 <LLF_RND_TurnOffTrng>:
   277e0:	4b04      	ldr	r3, [pc, #16]	; (277f4 <LLF_RND_TurnOffTrng+0x14>)
   277e2:	2200      	movs	r2, #0
   277e4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   277e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   277ec:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   277f0:	f7ff b8b6 	b.w	26960 <CC_HalClearInterruptBit>
   277f4:	5002b000 	.word	0x5002b000

000277f8 <SetDataBuffersInfo>:
   277f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   277fa:	b083      	sub	sp, #12
   277fc:	461d      	mov	r5, r3
   277fe:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   27802:	f04f 0300 	mov.w	r3, #0
   27806:	f88d 3007 	strb.w	r3, [sp, #7]
   2780a:	d324      	bcc.n	27856 <SetDataBuffersInfo+0x5e>
   2780c:	468c      	mov	ip, r1
   2780e:	4484      	add	ip, r0
   27810:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   27814:	4604      	mov	r4, r0
   27816:	d81e      	bhi.n	27856 <SetDataBuffersInfo+0x5e>
   27818:	4617      	mov	r7, r2
   2781a:	f10d 0307 	add.w	r3, sp, #7
   2781e:	2201      	movs	r2, #1
   27820:	f000 fe68 	bl	284f4 <CC_PalDataBufferAttrGet>
   27824:	4606      	mov	r6, r0
   27826:	b9b0      	cbnz	r0, 27856 <SetDataBuffersInfo+0x5e>
   27828:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2782a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2782e:	603c      	str	r4, [r7, #0]
   27830:	713b      	strb	r3, [r7, #4]
   27832:	b192      	cbz	r2, 2785a <SetDataBuffersInfo+0x62>
   27834:	b14d      	cbz	r5, 2784a <SetDataBuffersInfo+0x52>
   27836:	4602      	mov	r2, r0
   27838:	9908      	ldr	r1, [sp, #32]
   2783a:	f10d 0307 	add.w	r3, sp, #7
   2783e:	4628      	mov	r0, r5
   27840:	f000 fe58 	bl	284f4 <CC_PalDataBufferAttrGet>
   27844:	b938      	cbnz	r0, 27856 <SetDataBuffersInfo+0x5e>
   27846:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2784a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2784c:	4630      	mov	r0, r6
   2784e:	6015      	str	r5, [r2, #0]
   27850:	7113      	strb	r3, [r2, #4]
   27852:	b003      	add	sp, #12
   27854:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27856:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   2785a:	4630      	mov	r0, r6
   2785c:	b003      	add	sp, #12
   2785e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027860 <InitHashDrv>:
   27860:	b1e8      	cbz	r0, 2789e <InitHashDrv+0x3e>
   27862:	b510      	push	{r4, lr}
   27864:	6804      	ldr	r4, [r0, #0]
   27866:	2c01      	cmp	r4, #1
   27868:	d004      	beq.n	27874 <InitHashDrv+0x14>
   2786a:	2c02      	cmp	r4, #2
   2786c:	d010      	beq.n	27890 <InitHashDrv+0x30>
   2786e:	b144      	cbz	r4, 27882 <InitHashDrv+0x22>
   27870:	480c      	ldr	r0, [pc, #48]	; (278a4 <InitHashDrv+0x44>)
   27872:	bd10      	pop	{r4, pc}
   27874:	490c      	ldr	r1, [pc, #48]	; (278a8 <InitHashDrv+0x48>)
   27876:	2220      	movs	r2, #32
   27878:	3008      	adds	r0, #8
   2787a:	f7ff f8ff 	bl	26a7c <CC_PalMemCopyPlat>
   2787e:	2000      	movs	r0, #0
   27880:	bd10      	pop	{r4, pc}
   27882:	490a      	ldr	r1, [pc, #40]	; (278ac <InitHashDrv+0x4c>)
   27884:	2214      	movs	r2, #20
   27886:	3008      	adds	r0, #8
   27888:	f7ff f8f8 	bl	26a7c <CC_PalMemCopyPlat>
   2788c:	4620      	mov	r0, r4
   2788e:	bd10      	pop	{r4, pc}
   27890:	4907      	ldr	r1, [pc, #28]	; (278b0 <InitHashDrv+0x50>)
   27892:	2220      	movs	r2, #32
   27894:	3008      	adds	r0, #8
   27896:	f7ff f8f1 	bl	26a7c <CC_PalMemCopyPlat>
   2789a:	2000      	movs	r0, #0
   2789c:	bd10      	pop	{r4, pc}
   2789e:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   278a2:	4770      	bx	lr
   278a4:	00f30001 	.word	0x00f30001
   278a8:	0002f604 	.word	0x0002f604
   278ac:	0002f5d0 	.word	0x0002f5d0
   278b0:	0002f5e4 	.word	0x0002f5e4

000278b4 <ProcessHashDrv>:
   278b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   278b8:	2900      	cmp	r1, #0
   278ba:	f000 80f9 	beq.w	27ab0 <ProcessHashDrv+0x1fc>
   278be:	4604      	mov	r4, r0
   278c0:	2800      	cmp	r0, #0
   278c2:	f000 80f9 	beq.w	27ab8 <ProcessHashDrv+0x204>
   278c6:	6803      	ldr	r3, [r0, #0]
   278c8:	4690      	mov	r8, r2
   278ca:	460f      	mov	r7, r1
   278cc:	2b00      	cmp	r3, #0
   278ce:	f000 80c3 	beq.w	27a58 <ProcessHashDrv+0x1a4>
   278d2:	3b01      	subs	r3, #1
   278d4:	2b01      	cmp	r3, #1
   278d6:	f200 80d7 	bhi.w	27a88 <ProcessHashDrv+0x1d4>
   278da:	4879      	ldr	r0, [pc, #484]	; (27ac0 <ProcessHashDrv+0x20c>)
   278dc:	f04f 31ff 	mov.w	r1, #4294967295
   278e0:	f04f 0902 	mov.w	r9, #2
   278e4:	f7ff f8e6 	bl	26ab4 <CC_PalMutexLock>
   278e8:	2800      	cmp	r0, #0
   278ea:	f040 80bf 	bne.w	27a6c <ProcessHashDrv+0x1b8>
   278ee:	2000      	movs	r0, #0
   278f0:	f7ff f910 	bl	26b14 <CC_PalPowerSaveModeSelect>
   278f4:	4606      	mov	r6, r0
   278f6:	2800      	cmp	r0, #0
   278f8:	f040 80c2 	bne.w	27a80 <ProcessHashDrv+0x1cc>
   278fc:	4a71      	ldr	r2, [pc, #452]	; (27ac4 <ProcessHashDrv+0x210>)
   278fe:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   27902:	2b00      	cmp	r3, #0
   27904:	d1fb      	bne.n	278fe <ProcessHashDrv+0x4a>
   27906:	4d6f      	ldr	r5, [pc, #444]	; (27ac4 <ProcessHashDrv+0x210>)
   27908:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   2790c:	2b00      	cmp	r3, #0
   2790e:	d1fb      	bne.n	27908 <ProcessHashDrv+0x54>
   27910:	f04f 30ff 	mov.w	r0, #4294967295
   27914:	f7ff f824 	bl	26960 <CC_HalClearInterruptBit>
   27918:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   2791c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   27920:	f7ff f82c 	bl	2697c <CC_HalMaskInterrupt>
   27924:	2301      	movs	r3, #1
   27926:	2207      	movs	r2, #7
   27928:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   2792c:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   27930:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   27934:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   27936:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   2793a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   2793c:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   27940:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   27944:	6823      	ldr	r3, [r4, #0]
   27946:	b15b      	cbz	r3, 27960 <ProcessHashDrv+0xac>
   27948:	3b01      	subs	r3, #1
   2794a:	2b01      	cmp	r3, #1
   2794c:	d818      	bhi.n	27980 <ProcessHashDrv+0xcc>
   2794e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27950:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   27954:	6a23      	ldr	r3, [r4, #32]
   27956:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   2795a:	69e3      	ldr	r3, [r4, #28]
   2795c:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   27960:	4b58      	ldr	r3, [pc, #352]	; (27ac4 <ProcessHashDrv+0x210>)
   27962:	69a2      	ldr	r2, [r4, #24]
   27964:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   27968:	6962      	ldr	r2, [r4, #20]
   2796a:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   2796e:	6922      	ldr	r2, [r4, #16]
   27970:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   27974:	68e2      	ldr	r2, [r4, #12]
   27976:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   2797a:	68a2      	ldr	r2, [r4, #8]
   2797c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   27980:	4a50      	ldr	r2, [pc, #320]	; (27ac4 <ProcessHashDrv+0x210>)
   27982:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   27986:	2b00      	cmp	r3, #0
   27988:	d1fb      	bne.n	27982 <ProcessHashDrv+0xce>
   2798a:	f1b8 0f00 	cmp.w	r8, #0
   2798e:	d05f      	beq.n	27a50 <ProcessHashDrv+0x19c>
   27990:	6863      	ldr	r3, [r4, #4]
   27992:	2b01      	cmp	r3, #1
   27994:	bf08      	it	eq
   27996:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   2799a:	4b4a      	ldr	r3, [pc, #296]	; (27ac4 <ProcessHashDrv+0x210>)
   2799c:	683a      	ldr	r2, [r7, #0]
   2799e:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   279a2:	2040      	movs	r0, #64	; 0x40
   279a4:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   279a8:	f7fe ffee 	bl	26988 <CC_HalWaitInterrupt>
   279ac:	4606      	mov	r6, r0
   279ae:	4a45      	ldr	r2, [pc, #276]	; (27ac4 <ProcessHashDrv+0x210>)
   279b0:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   279b4:	2b00      	cmp	r3, #0
   279b6:	d1fb      	bne.n	279b0 <ProcessHashDrv+0xfc>
   279b8:	4a42      	ldr	r2, [pc, #264]	; (27ac4 <ProcessHashDrv+0x210>)
   279ba:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   279be:	2b00      	cmp	r3, #0
   279c0:	d1fb      	bne.n	279ba <ProcessHashDrv+0x106>
   279c2:	6823      	ldr	r3, [r4, #0]
   279c4:	b15b      	cbz	r3, 279de <ProcessHashDrv+0x12a>
   279c6:	3b01      	subs	r3, #1
   279c8:	2b01      	cmp	r3, #1
   279ca:	d818      	bhi.n	279fe <ProcessHashDrv+0x14a>
   279cc:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   279d0:	6263      	str	r3, [r4, #36]	; 0x24
   279d2:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   279d6:	6223      	str	r3, [r4, #32]
   279d8:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   279dc:	61e3      	str	r3, [r4, #28]
   279de:	4b39      	ldr	r3, [pc, #228]	; (27ac4 <ProcessHashDrv+0x210>)
   279e0:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   279e4:	61a2      	str	r2, [r4, #24]
   279e6:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   279ea:	6162      	str	r2, [r4, #20]
   279ec:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   279f0:	6122      	str	r2, [r4, #16]
   279f2:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   279f6:	60e2      	str	r2, [r4, #12]
   279f8:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   279fc:	60a3      	str	r3, [r4, #8]
   279fe:	4a31      	ldr	r2, [pc, #196]	; (27ac4 <ProcessHashDrv+0x210>)
   27a00:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   27a04:	64a1      	str	r1, [r4, #72]	; 0x48
   27a06:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   27a0a:	64e1      	str	r1, [r4, #76]	; 0x4c
   27a0c:	2300      	movs	r3, #0
   27a0e:	2101      	movs	r1, #1
   27a10:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   27a14:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   27a18:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   27a1c:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   27a20:	2b00      	cmp	r3, #0
   27a22:	d1fb      	bne.n	27a1c <ProcessHashDrv+0x168>
   27a24:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   27a28:	2e00      	cmp	r6, #0
   27a2a:	d13b      	bne.n	27aa4 <ProcessHashDrv+0x1f0>
   27a2c:	4b25      	ldr	r3, [pc, #148]	; (27ac4 <ProcessHashDrv+0x210>)
   27a2e:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   27a32:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   27a36:	f7fe ffa1 	bl	2697c <CC_HalMaskInterrupt>
   27a3a:	2001      	movs	r0, #1
   27a3c:	f7ff f86a 	bl	26b14 <CC_PalPowerSaveModeSelect>
   27a40:	bb60      	cbnz	r0, 27a9c <ProcessHashDrv+0x1e8>
   27a42:	481f      	ldr	r0, [pc, #124]	; (27ac0 <ProcessHashDrv+0x20c>)
   27a44:	f7ff f83e 	bl	26ac4 <CC_PalMutexUnlock>
   27a48:	bb10      	cbnz	r0, 27a90 <ProcessHashDrv+0x1dc>
   27a4a:	4630      	mov	r0, r6
   27a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27a50:	2304      	movs	r3, #4
   27a52:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   27a56:	e7aa      	b.n	279ae <ProcessHashDrv+0xfa>
   27a58:	4819      	ldr	r0, [pc, #100]	; (27ac0 <ProcessHashDrv+0x20c>)
   27a5a:	f04f 31ff 	mov.w	r1, #4294967295
   27a5e:	f04f 0901 	mov.w	r9, #1
   27a62:	f7ff f827 	bl	26ab4 <CC_PalMutexLock>
   27a66:	2800      	cmp	r0, #0
   27a68:	f43f af41 	beq.w	278ee <ProcessHashDrv+0x3a>
   27a6c:	4816      	ldr	r0, [pc, #88]	; (27ac8 <ProcessHashDrv+0x214>)
   27a6e:	f7fe f8c1 	bl	25bf4 <CC_PalAbort>
   27a72:	2000      	movs	r0, #0
   27a74:	f7ff f84e 	bl	26b14 <CC_PalPowerSaveModeSelect>
   27a78:	4606      	mov	r6, r0
   27a7a:	2800      	cmp	r0, #0
   27a7c:	f43f af3e 	beq.w	278fc <ProcessHashDrv+0x48>
   27a80:	4812      	ldr	r0, [pc, #72]	; (27acc <ProcessHashDrv+0x218>)
   27a82:	f7fe f8b7 	bl	25bf4 <CC_PalAbort>
   27a86:	e739      	b.n	278fc <ProcessHashDrv+0x48>
   27a88:	4e11      	ldr	r6, [pc, #68]	; (27ad0 <ProcessHashDrv+0x21c>)
   27a8a:	4630      	mov	r0, r6
   27a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27a90:	4810      	ldr	r0, [pc, #64]	; (27ad4 <ProcessHashDrv+0x220>)
   27a92:	f7fe f8af 	bl	25bf4 <CC_PalAbort>
   27a96:	4630      	mov	r0, r6
   27a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27a9c:	480e      	ldr	r0, [pc, #56]	; (27ad8 <ProcessHashDrv+0x224>)
   27a9e:	f7fe f8a9 	bl	25bf4 <CC_PalAbort>
   27aa2:	e7ce      	b.n	27a42 <ProcessHashDrv+0x18e>
   27aa4:	2110      	movs	r1, #16
   27aa6:	f104 0008 	add.w	r0, r4, #8
   27aaa:	f7fe ffeb 	bl	26a84 <CC_PalMemSetZeroPlat>
   27aae:	e7bd      	b.n	27a2c <ProcessHashDrv+0x178>
   27ab0:	4e0a      	ldr	r6, [pc, #40]	; (27adc <ProcessHashDrv+0x228>)
   27ab2:	4630      	mov	r0, r6
   27ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27ab8:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   27abc:	e7c5      	b.n	27a4a <ProcessHashDrv+0x196>
   27abe:	bf00      	nop
   27ac0:	20000940 	.word	0x20000940
   27ac4:	5002b000 	.word	0x5002b000
   27ac8:	0002f504 	.word	0x0002f504
   27acc:	0002f51c 	.word	0x0002f51c
   27ad0:	00f30001 	.word	0x00f30001
   27ad4:	0002f55c 	.word	0x0002f55c
   27ad8:	0002f53c 	.word	0x0002f53c
   27adc:	00f30003 	.word	0x00f30003

00027ae0 <FinishHashDrv>:
   27ae0:	b398      	cbz	r0, 27b4a <FinishHashDrv+0x6a>
   27ae2:	b470      	push	{r4, r5, r6}
   27ae4:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   27ae8:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   27aec:	ba26      	rev	r6, r4
   27aee:	ba0d      	rev	r5, r1
   27af0:	ba14      	rev	r4, r2
   27af2:	ba19      	rev	r1, r3
   27af4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   27af8:	ba12      	rev	r2, r2
   27afa:	e9c0 4104 	strd	r4, r1, [r0, #16]
   27afe:	6182      	str	r2, [r0, #24]
   27b00:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   27b04:	e9c0 6502 	strd	r6, r5, [r0, #8]
   27b08:	ba1b      	rev	r3, r3
   27b0a:	ba25      	rev	r5, r4
   27b0c:	e9c0 3507 	strd	r3, r5, [r0, #28]
   27b10:	ba14      	rev	r4, r2
   27b12:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   27b16:	6a81      	ldr	r1, [r0, #40]	; 0x28
   27b18:	ba12      	rev	r2, r2
   27b1a:	ba09      	rev	r1, r1
   27b1c:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   27b20:	62c2      	str	r2, [r0, #44]	; 0x2c
   27b22:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   27b26:	ba1b      	rev	r3, r3
   27b28:	ba25      	rev	r5, r4
   27b2a:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   27b2e:	ba14      	rev	r4, r2
   27b30:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   27b34:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   27b36:	ba12      	rev	r2, r2
   27b38:	ba09      	rev	r1, r1
   27b3a:	ba1b      	rev	r3, r3
   27b3c:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   27b40:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   27b44:	2000      	movs	r0, #0
   27b46:	bc70      	pop	{r4, r5, r6}
   27b48:	4770      	bx	lr
   27b4a:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   27b4e:	4770      	bx	lr

00027b50 <LoadAesKey>:
   27b50:	2800      	cmp	r0, #0
   27b52:	d046      	beq.n	27be2 <LoadAesKey+0x92>
   27b54:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   27b58:	2b00      	cmp	r3, #0
   27b5a:	d033      	beq.n	27bc4 <LoadAesKey+0x74>
   27b5c:	2b03      	cmp	r3, #3
   27b5e:	b510      	push	{r4, lr}
   27b60:	d013      	beq.n	27b8a <LoadAesKey+0x3a>
   27b62:	4821      	ldr	r0, [pc, #132]	; (27be8 <LoadAesKey+0x98>)
   27b64:	4c21      	ldr	r4, [pc, #132]	; (27bec <LoadAesKey+0x9c>)
   27b66:	6822      	ldr	r2, [r4, #0]
   27b68:	4b21      	ldr	r3, [pc, #132]	; (27bf0 <LoadAesKey+0xa0>)
   27b6a:	6812      	ldr	r2, [r2, #0]
   27b6c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   27b70:	6822      	ldr	r2, [r4, #0]
   27b72:	6852      	ldr	r2, [r2, #4]
   27b74:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   27b78:	6822      	ldr	r2, [r4, #0]
   27b7a:	6892      	ldr	r2, [r2, #8]
   27b7c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   27b80:	6822      	ldr	r2, [r4, #0]
   27b82:	68d2      	ldr	r2, [r2, #12]
   27b84:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   27b88:	bd10      	pop	{r4, pc}
   27b8a:	6b01      	ldr	r1, [r0, #48]	; 0x30
   27b8c:	6c00      	ldr	r0, [r0, #64]	; 0x40
   27b8e:	4c17      	ldr	r4, [pc, #92]	; (27bec <LoadAesKey+0x9c>)
   27b90:	f000 fbac 	bl	282ec <kmu_validate_kdr_slot_and_size>
   27b94:	2800      	cmp	r0, #0
   27b96:	d1e6      	bne.n	27b66 <LoadAesKey+0x16>
   27b98:	6822      	ldr	r2, [r4, #0]
   27b9a:	4b15      	ldr	r3, [pc, #84]	; (27bf0 <LoadAesKey+0xa0>)
   27b9c:	6812      	ldr	r2, [r2, #0]
   27b9e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   27ba2:	6822      	ldr	r2, [r4, #0]
   27ba4:	6852      	ldr	r2, [r2, #4]
   27ba6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   27baa:	6822      	ldr	r2, [r4, #0]
   27bac:	6892      	ldr	r2, [r2, #8]
   27bae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   27bb2:	6822      	ldr	r2, [r4, #0]
   27bb4:	68d2      	ldr	r2, [r2, #12]
   27bb6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   27bba:	f000 fba3 	bl	28304 <kmu_use_kdr_key>
   27bbe:	2800      	cmp	r0, #0
   27bc0:	d1d1      	bne.n	27b66 <LoadAesKey+0x16>
   27bc2:	bd10      	pop	{r4, pc}
   27bc4:	4a0a      	ldr	r2, [pc, #40]	; (27bf0 <LoadAesKey+0xa0>)
   27bc6:	6901      	ldr	r1, [r0, #16]
   27bc8:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   27bcc:	6941      	ldr	r1, [r0, #20]
   27bce:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   27bd2:	6981      	ldr	r1, [r0, #24]
   27bd4:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   27bd8:	69c1      	ldr	r1, [r0, #28]
   27bda:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   27bde:	4618      	mov	r0, r3
   27be0:	4770      	bx	lr
   27be2:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   27be6:	4770      	bx	lr
   27be8:	00f10009 	.word	0x00f10009
   27bec:	20000930 	.word	0x20000930
   27bf0:	5002b000 	.word	0x5002b000

00027bf4 <InitAes.part.0>:
   27bf4:	4a37      	ldr	r2, [pc, #220]	; (27cd4 <InitAes.part.0+0xe0>)
   27bf6:	b538      	push	{r3, r4, r5, lr}
   27bf8:	4604      	mov	r4, r0
   27bfa:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   27bfe:	2b00      	cmp	r3, #0
   27c00:	d1fb      	bne.n	27bfa <InitAes.part.0+0x6>
   27c02:	4a34      	ldr	r2, [pc, #208]	; (27cd4 <InitAes.part.0+0xe0>)
   27c04:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   27c08:	2b00      	cmp	r3, #0
   27c0a:	d1fb      	bne.n	27c04 <InitAes.part.0+0x10>
   27c0c:	4a31      	ldr	r2, [pc, #196]	; (27cd4 <InitAes.part.0+0xe0>)
   27c0e:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   27c12:	2b00      	cmp	r3, #0
   27c14:	d1fb      	bne.n	27c0e <InitAes.part.0+0x1a>
   27c16:	4a2f      	ldr	r2, [pc, #188]	; (27cd4 <InitAes.part.0+0xe0>)
   27c18:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   27c1c:	2b00      	cmp	r3, #0
   27c1e:	d1fb      	bne.n	27c18 <InitAes.part.0+0x24>
   27c20:	4a2c      	ldr	r2, [pc, #176]	; (27cd4 <InitAes.part.0+0xe0>)
   27c22:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   27c26:	2b00      	cmp	r3, #0
   27c28:	d1fb      	bne.n	27c22 <InitAes.part.0+0x2e>
   27c2a:	4d2a      	ldr	r5, [pc, #168]	; (27cd4 <InitAes.part.0+0xe0>)
   27c2c:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   27c30:	2b00      	cmp	r3, #0
   27c32:	d1fb      	bne.n	27c2c <InitAes.part.0+0x38>
   27c34:	f04f 30ff 	mov.w	r0, #4294967295
   27c38:	f7fe fe92 	bl	26960 <CC_HalClearInterruptBit>
   27c3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27c3e:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   27c42:	f023 0304 	bic.w	r3, r3, #4
   27c46:	2b03      	cmp	r3, #3
   27c48:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   27c4a:	d039      	beq.n	27cc0 <InitAes.part.0+0xcc>
   27c4c:	2b01      	cmp	r3, #1
   27c4e:	bf0c      	ite	eq
   27c50:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   27c54:	f020 0020 	bicne.w	r0, r0, #32
   27c58:	f7fe fe90 	bl	2697c <CC_HalMaskInterrupt>
   27c5c:	4a1d      	ldr	r2, [pc, #116]	; (27cd4 <InitAes.part.0+0xe0>)
   27c5e:	2301      	movs	r3, #1
   27c60:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   27c64:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   27c68:	2b00      	cmp	r3, #0
   27c6a:	d1fb      	bne.n	27c64 <InitAes.part.0+0x70>
   27c6c:	4a19      	ldr	r2, [pc, #100]	; (27cd4 <InitAes.part.0+0xe0>)
   27c6e:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   27c72:	2b00      	cmp	r3, #0
   27c74:	d1fb      	bne.n	27c6e <InitAes.part.0+0x7a>
   27c76:	4917      	ldr	r1, [pc, #92]	; (27cd4 <InitAes.part.0+0xe0>)
   27c78:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   27c7c:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   27c80:	2b00      	cmp	r3, #0
   27c82:	d1fb      	bne.n	27c7c <InitAes.part.0+0x88>
   27c84:	4a13      	ldr	r2, [pc, #76]	; (27cd4 <InitAes.part.0+0xe0>)
   27c86:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   27c8a:	2b00      	cmp	r3, #0
   27c8c:	d1fb      	bne.n	27c86 <InitAes.part.0+0x92>
   27c8e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   27c90:	f022 0104 	bic.w	r1, r2, #4
   27c94:	2903      	cmp	r1, #3
   27c96:	bf18      	it	ne
   27c98:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   27c9a:	490e      	ldr	r1, [pc, #56]	; (27cd4 <InitAes.part.0+0xe0>)
   27c9c:	ea4f 0282 	mov.w	r2, r2, lsl #2
   27ca0:	bf18      	it	ne
   27ca2:	f003 0301 	andne.w	r3, r3, #1
   27ca6:	f002 021c 	and.w	r2, r2, #28
   27caa:	4313      	orrs	r3, r2
   27cac:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   27cb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27cb2:	2b07      	cmp	r3, #7
   27cb4:	bf04      	itt	eq
   27cb6:	2301      	moveq	r3, #1
   27cb8:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   27cbc:	2000      	movs	r0, #0
   27cbe:	bd38      	pop	{r3, r4, r5, pc}
   27cc0:	2b01      	cmp	r3, #1
   27cc2:	bf0c      	ite	eq
   27cc4:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   27cc8:	f020 0010 	bicne.w	r0, r0, #16
   27ccc:	f7fe fe56 	bl	2697c <CC_HalMaskInterrupt>
   27cd0:	e7c4      	b.n	27c5c <InitAes.part.0+0x68>
   27cd2:	bf00      	nop
   27cd4:	5002b000 	.word	0x5002b000

00027cd8 <write_invalid_key>:
   27cd8:	4a09      	ldr	r2, [pc, #36]	; (27d00 <write_invalid_key+0x28>)
   27cda:	4b0a      	ldr	r3, [pc, #40]	; (27d04 <write_invalid_key+0x2c>)
   27cdc:	6811      	ldr	r1, [r2, #0]
   27cde:	6809      	ldr	r1, [r1, #0]
   27ce0:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   27ce4:	6811      	ldr	r1, [r2, #0]
   27ce6:	6849      	ldr	r1, [r1, #4]
   27ce8:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   27cec:	6811      	ldr	r1, [r2, #0]
   27cee:	6889      	ldr	r1, [r1, #8]
   27cf0:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   27cf4:	6812      	ldr	r2, [r2, #0]
   27cf6:	68d2      	ldr	r2, [r2, #12]
   27cf8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   27cfc:	4770      	bx	lr
   27cfe:	bf00      	nop
   27d00:	20000930 	.word	0x20000930
   27d04:	5002b000 	.word	0x5002b000

00027d08 <ProcessAesDrv>:
   27d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27d0c:	b085      	sub	sp, #20
   27d0e:	2900      	cmp	r1, #0
   27d10:	f000 80a3 	beq.w	27e5a <ProcessAesDrv+0x152>
   27d14:	4690      	mov	r8, r2
   27d16:	2a00      	cmp	r2, #0
   27d18:	f000 809f 	beq.w	27e5a <ProcessAesDrv+0x152>
   27d1c:	4605      	mov	r5, r0
   27d1e:	2800      	cmp	r0, #0
   27d20:	f000 813c 	beq.w	27f9c <ProcessAesDrv+0x294>
   27d24:	4699      	mov	r9, r3
   27d26:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   27d28:	460e      	mov	r6, r1
   27d2a:	2b00      	cmp	r3, #0
   27d2c:	d151      	bne.n	27dd2 <ProcessAesDrv+0xca>
   27d2e:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   27d32:	d253      	bcs.n	27ddc <ProcessAesDrv+0xd4>
   27d34:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   27d38:	2b04      	cmp	r3, #4
   27d3a:	f000 8112 	beq.w	27f62 <ProcessAesDrv+0x25a>
   27d3e:	2700      	movs	r7, #0
   27d40:	48a6      	ldr	r0, [pc, #664]	; (27fdc <ProcessAesDrv+0x2d4>)
   27d42:	f04f 31ff 	mov.w	r1, #4294967295
   27d46:	f7fe feb5 	bl	26ab4 <CC_PalMutexLock>
   27d4a:	2800      	cmp	r0, #0
   27d4c:	f040 80e8 	bne.w	27f20 <ProcessAesDrv+0x218>
   27d50:	2000      	movs	r0, #0
   27d52:	f7fe fedf 	bl	26b14 <CC_PalPowerSaveModeSelect>
   27d56:	2800      	cmp	r0, #0
   27d58:	f040 80eb 	bne.w	27f32 <ProcessAesDrv+0x22a>
   27d5c:	48a0      	ldr	r0, [pc, #640]	; (27fe0 <ProcessAesDrv+0x2d8>)
   27d5e:	2301      	movs	r3, #1
   27d60:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   27d64:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   27d68:	2c00      	cmp	r4, #0
   27d6a:	d1fb      	bne.n	27d64 <ProcessAesDrv+0x5c>
   27d6c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27d6e:	2b03      	cmp	r3, #3
   27d70:	dc39      	bgt.n	27de6 <ProcessAesDrv+0xde>
   27d72:	2b00      	cmp	r3, #0
   27d74:	da3a      	bge.n	27dec <ProcessAesDrv+0xe4>
   27d76:	4c9b      	ldr	r4, [pc, #620]	; (27fe4 <ProcessAesDrv+0x2dc>)
   27d78:	4a99      	ldr	r2, [pc, #612]	; (27fe0 <ProcessAesDrv+0x2d8>)
   27d7a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   27d7e:	2b00      	cmp	r3, #0
   27d80:	d1fb      	bne.n	27d7a <ProcessAesDrv+0x72>
   27d82:	2f00      	cmp	r7, #0
   27d84:	f040 80e4 	bne.w	27f50 <ProcessAesDrv+0x248>
   27d88:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27d8a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   27d8c:	f023 0304 	bic.w	r3, r3, #4
   27d90:	2b03      	cmp	r3, #3
   27d92:	4b93      	ldr	r3, [pc, #588]	; (27fe0 <ProcessAesDrv+0x2d8>)
   27d94:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   27d98:	d056      	beq.n	27e48 <ProcessAesDrv+0x140>
   27d9a:	2a01      	cmp	r2, #1
   27d9c:	bf0c      	ite	eq
   27d9e:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   27da2:	f040 0020 	orrne.w	r0, r0, #32
   27da6:	f7fe fde9 	bl	2697c <CC_HalMaskInterrupt>
   27daa:	4b8d      	ldr	r3, [pc, #564]	; (27fe0 <ProcessAesDrv+0x2d8>)
   27dac:	2200      	movs	r2, #0
   27dae:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   27db2:	2001      	movs	r0, #1
   27db4:	f7fe feae 	bl	26b14 <CC_PalPowerSaveModeSelect>
   27db8:	2800      	cmp	r0, #0
   27dba:	f040 80c5 	bne.w	27f48 <ProcessAesDrv+0x240>
   27dbe:	4887      	ldr	r0, [pc, #540]	; (27fdc <ProcessAesDrv+0x2d4>)
   27dc0:	f7fe fe80 	bl	26ac4 <CC_PalMutexUnlock>
   27dc4:	2800      	cmp	r0, #0
   27dc6:	f040 80b8 	bne.w	27f3a <ProcessAesDrv+0x232>
   27dca:	4620      	mov	r0, r4
   27dcc:	b005      	add	sp, #20
   27dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27dd2:	2b01      	cmp	r3, #1
   27dd4:	d1ae      	bne.n	27d34 <ProcessAesDrv+0x2c>
   27dd6:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   27dda:	d3ab      	bcc.n	27d34 <ProcessAesDrv+0x2c>
   27ddc:	4c82      	ldr	r4, [pc, #520]	; (27fe8 <ProcessAesDrv+0x2e0>)
   27dde:	4620      	mov	r0, r4
   27de0:	b005      	add	sp, #20
   27de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27de6:	3b06      	subs	r3, #6
   27de8:	2b01      	cmp	r3, #1
   27dea:	d8c4      	bhi.n	27d76 <ProcessAesDrv+0x6e>
   27dec:	6bab      	ldr	r3, [r5, #56]	; 0x38
   27dee:	2b01      	cmp	r3, #1
   27df0:	f200 80d2 	bhi.w	27f98 <ProcessAesDrv+0x290>
   27df4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   27df6:	2b01      	cmp	r3, #1
   27df8:	d834      	bhi.n	27e64 <ProcessAesDrv+0x15c>
   27dfa:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   27dfc:	2b01      	cmp	r3, #1
   27dfe:	f200 8122 	bhi.w	28046 <ProcessAesDrv+0x33e>
   27e02:	4628      	mov	r0, r5
   27e04:	f7ff fef6 	bl	27bf4 <InitAes.part.0>
   27e08:	4604      	mov	r4, r0
   27e0a:	2800      	cmp	r0, #0
   27e0c:	d1b4      	bne.n	27d78 <ProcessAesDrv+0x70>
   27e0e:	4628      	mov	r0, r5
   27e10:	f7ff fe9e 	bl	27b50 <LoadAesKey>
   27e14:	4604      	mov	r4, r0
   27e16:	2800      	cmp	r0, #0
   27e18:	d1ae      	bne.n	27d78 <ProcessAesDrv+0x70>
   27e1a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27e1c:	2b07      	cmp	r3, #7
   27e1e:	d8aa      	bhi.n	27d76 <ProcessAesDrv+0x6e>
   27e20:	a201      	add	r2, pc, #4	; (adr r2, 27e28 <ProcessAesDrv+0x120>)
   27e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27e26:	bf00      	nop
   27e28:	00027e85 	.word	0x00027e85
   27e2c:	00027e69 	.word	0x00027e69
   27e30:	0002800d 	.word	0x0002800d
   27e34:	00027e69 	.word	0x00027e69
   27e38:	00027d77 	.word	0x00027d77
   27e3c:	00027d77 	.word	0x00027d77
   27e40:	0002800d 	.word	0x0002800d
   27e44:	00027e69 	.word	0x00027e69
   27e48:	2a01      	cmp	r2, #1
   27e4a:	bf0c      	ite	eq
   27e4c:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   27e50:	f040 0010 	orrne.w	r0, r0, #16
   27e54:	f7fe fd92 	bl	2697c <CC_HalMaskInterrupt>
   27e58:	e7a7      	b.n	27daa <ProcessAesDrv+0xa2>
   27e5a:	4c64      	ldr	r4, [pc, #400]	; (27fec <ProcessAesDrv+0x2e4>)
   27e5c:	4620      	mov	r0, r4
   27e5e:	b005      	add	sp, #20
   27e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27e64:	4c62      	ldr	r4, [pc, #392]	; (27ff0 <ProcessAesDrv+0x2e8>)
   27e66:	e787      	b.n	27d78 <ProcessAesDrv+0x70>
   27e68:	4b5d      	ldr	r3, [pc, #372]	; (27fe0 <ProcessAesDrv+0x2d8>)
   27e6a:	682a      	ldr	r2, [r5, #0]
   27e6c:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   27e70:	686a      	ldr	r2, [r5, #4]
   27e72:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   27e76:	68aa      	ldr	r2, [r5, #8]
   27e78:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   27e7c:	68ea      	ldr	r2, [r5, #12]
   27e7e:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   27e82:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27e84:	6832      	ldr	r2, [r6, #0]
   27e86:	f023 0304 	bic.w	r3, r3, #4
   27e8a:	2b03      	cmp	r3, #3
   27e8c:	d00d      	beq.n	27eaa <ProcessAesDrv+0x1a2>
   27e8e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   27e90:	f8d8 1000 	ldr.w	r1, [r8]
   27e94:	2b01      	cmp	r3, #1
   27e96:	4b52      	ldr	r3, [pc, #328]	; (27fe0 <ProcessAesDrv+0x2d8>)
   27e98:	bf0b      	itete	eq
   27e9a:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   27e9e:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   27ea2:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   27ea6:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   27eaa:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   27eac:	2b01      	cmp	r3, #1
   27eae:	4b4c      	ldr	r3, [pc, #304]	; (27fe0 <ProcessAesDrv+0x2d8>)
   27eb0:	bf0b      	itete	eq
   27eb2:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   27eb6:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   27eba:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   27ebe:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   27ec2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27ec4:	f023 0304 	bic.w	r3, r3, #4
   27ec8:	2b03      	cmp	r3, #3
   27eca:	d06a      	beq.n	27fa2 <ProcessAesDrv+0x29a>
   27ecc:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   27ece:	2b01      	cmp	r3, #1
   27ed0:	bf0c      	ite	eq
   27ed2:	2080      	moveq	r0, #128	; 0x80
   27ed4:	2020      	movne	r0, #32
   27ed6:	f7fe fd57 	bl	26988 <CC_HalWaitInterrupt>
   27eda:	4604      	mov	r4, r0
   27edc:	2800      	cmp	r0, #0
   27ede:	f47f af4b 	bne.w	27d78 <ProcessAesDrv+0x70>
   27ee2:	4b3f      	ldr	r3, [pc, #252]	; (27fe0 <ProcessAesDrv+0x2d8>)
   27ee4:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   27ee8:	2c00      	cmp	r4, #0
   27eea:	d1fb      	bne.n	27ee4 <ProcessAesDrv+0x1dc>
   27eec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27eee:	3b01      	subs	r3, #1
   27ef0:	2b06      	cmp	r3, #6
   27ef2:	d812      	bhi.n	27f1a <ProcessAesDrv+0x212>
   27ef4:	e8df f003 	tbb	[pc, r3]
   27ef8:	11049904 	.word	0x11049904
   27efc:	9911      	.short	0x9911
   27efe:	04          	.byte	0x04
   27eff:	00          	.byte	0x00
   27f00:	4b37      	ldr	r3, [pc, #220]	; (27fe0 <ProcessAesDrv+0x2d8>)
   27f02:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   27f06:	602a      	str	r2, [r5, #0]
   27f08:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   27f0c:	606a      	str	r2, [r5, #4]
   27f0e:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   27f12:	60aa      	str	r2, [r5, #8]
   27f14:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   27f18:	60eb      	str	r3, [r5, #12]
   27f1a:	2301      	movs	r3, #1
   27f1c:	65ab      	str	r3, [r5, #88]	; 0x58
   27f1e:	e72b      	b.n	27d78 <ProcessAesDrv+0x70>
   27f20:	4834      	ldr	r0, [pc, #208]	; (27ff4 <ProcessAesDrv+0x2ec>)
   27f22:	f7fd fe67 	bl	25bf4 <CC_PalAbort>
   27f26:	2000      	movs	r0, #0
   27f28:	f7fe fdf4 	bl	26b14 <CC_PalPowerSaveModeSelect>
   27f2c:	2800      	cmp	r0, #0
   27f2e:	f43f af15 	beq.w	27d5c <ProcessAesDrv+0x54>
   27f32:	4831      	ldr	r0, [pc, #196]	; (27ff8 <ProcessAesDrv+0x2f0>)
   27f34:	f7fd fe5e 	bl	25bf4 <CC_PalAbort>
   27f38:	e710      	b.n	27d5c <ProcessAesDrv+0x54>
   27f3a:	4830      	ldr	r0, [pc, #192]	; (27ffc <ProcessAesDrv+0x2f4>)
   27f3c:	f7fd fe5a 	bl	25bf4 <CC_PalAbort>
   27f40:	4620      	mov	r0, r4
   27f42:	b005      	add	sp, #20
   27f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27f48:	482d      	ldr	r0, [pc, #180]	; (28000 <ProcessAesDrv+0x2f8>)
   27f4a:	f7fd fe53 	bl	25bf4 <CC_PalAbort>
   27f4e:	e736      	b.n	27dbe <ProcessAesDrv+0xb6>
   27f50:	2304      	movs	r3, #4
   27f52:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   27f56:	2120      	movs	r1, #32
   27f58:	f105 0010 	add.w	r0, r5, #16
   27f5c:	f7fe fd92 	bl	26a84 <CC_PalMemSetZeroPlat>
   27f60:	e712      	b.n	27d88 <ProcessAesDrv+0x80>
   27f62:	6b29      	ldr	r1, [r5, #48]	; 0x30
   27f64:	6c28      	ldr	r0, [r5, #64]	; 0x40
   27f66:	f000 f9b5 	bl	282d4 <kmu_validate_slot_and_size>
   27f6a:	b998      	cbnz	r0, 27f94 <ProcessAesDrv+0x28c>
   27f6c:	4f25      	ldr	r7, [pc, #148]	; (28004 <ProcessAesDrv+0x2fc>)
   27f6e:	4c1c      	ldr	r4, [pc, #112]	; (27fe0 <ProcessAesDrv+0x2d8>)
   27f70:	683b      	ldr	r3, [r7, #0]
   27f72:	681b      	ldr	r3, [r3, #0]
   27f74:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   27f78:	683b      	ldr	r3, [r7, #0]
   27f7a:	685b      	ldr	r3, [r3, #4]
   27f7c:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   27f80:	683b      	ldr	r3, [r7, #0]
   27f82:	689b      	ldr	r3, [r3, #8]
   27f84:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   27f88:	683b      	ldr	r3, [r7, #0]
   27f8a:	68db      	ldr	r3, [r3, #12]
   27f8c:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   27f90:	6b29      	ldr	r1, [r5, #48]	; 0x30
   27f92:	b161      	cbz	r1, 27fae <ProcessAesDrv+0x2a6>
   27f94:	2701      	movs	r7, #1
   27f96:	e6d3      	b.n	27d40 <ProcessAesDrv+0x38>
   27f98:	4c1b      	ldr	r4, [pc, #108]	; (28008 <ProcessAesDrv+0x300>)
   27f9a:	e6ed      	b.n	27d78 <ProcessAesDrv+0x70>
   27f9c:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   27fa0:	e713      	b.n	27dca <ProcessAesDrv+0xc2>
   27fa2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   27fa4:	2b01      	cmp	r3, #1
   27fa6:	bf0c      	ite	eq
   27fa8:	2040      	moveq	r0, #64	; 0x40
   27faa:	2010      	movne	r0, #16
   27fac:	e793      	b.n	27ed6 <ProcessAesDrv+0x1ce>
   27fae:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   27fb0:	9301      	str	r3, [sp, #4]
   27fb2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   27fb4:	9300      	str	r3, [sp, #0]
   27fb6:	f105 0a10 	add.w	sl, r5, #16
   27fba:	f04f 0b10 	mov.w	fp, #16
   27fbe:	f8cd a008 	str.w	sl, [sp, #8]
   27fc2:	f8cd b00c 	str.w	fp, [sp, #12]
   27fc6:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   27fca:	6c28      	ldr	r0, [r5, #64]	; 0x40
   27fcc:	f000 f9a4 	bl	28318 <kmu_derive_cmac>
   27fd0:	2800      	cmp	r0, #0
   27fd2:	d13a      	bne.n	2804a <ProcessAesDrv+0x342>
   27fd4:	2300      	movs	r3, #0
   27fd6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   27fda:	e7db      	b.n	27f94 <ProcessAesDrv+0x28c>
   27fdc:	20000940 	.word	0x20000940
   27fe0:	5002b000 	.word	0x5002b000
   27fe4:	00f10001 	.word	0x00f10001
   27fe8:	00f10005 	.word	0x00f10005
   27fec:	00f1000b 	.word	0x00f1000b
   27ff0:	00f10003 	.word	0x00f10003
   27ff4:	0002f504 	.word	0x0002f504
   27ff8:	0002f51c 	.word	0x0002f51c
   27ffc:	0002f55c 	.word	0x0002f55c
   28000:	0002f53c 	.word	0x0002f53c
   28004:	20000930 	.word	0x20000930
   28008:	00f10002 	.word	0x00f10002
   2800c:	4b19      	ldr	r3, [pc, #100]	; (28074 <ProcessAesDrv+0x36c>)
   2800e:	682a      	ldr	r2, [r5, #0]
   28010:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   28014:	686a      	ldr	r2, [r5, #4]
   28016:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   2801a:	68aa      	ldr	r2, [r5, #8]
   2801c:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   28020:	68ea      	ldr	r2, [r5, #12]
   28022:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   28026:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   28028:	e72c      	b.n	27e84 <ProcessAesDrv+0x17c>
   2802a:	4b12      	ldr	r3, [pc, #72]	; (28074 <ProcessAesDrv+0x36c>)
   2802c:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   28030:	602a      	str	r2, [r5, #0]
   28032:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   28036:	606a      	str	r2, [r5, #4]
   28038:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   2803c:	60aa      	str	r2, [r5, #8]
   2803e:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   28042:	60eb      	str	r3, [r5, #12]
   28044:	e769      	b.n	27f1a <ProcessAesDrv+0x212>
   28046:	4c0c      	ldr	r4, [pc, #48]	; (28078 <ProcessAesDrv+0x370>)
   28048:	e696      	b.n	27d78 <ProcessAesDrv+0x70>
   2804a:	683b      	ldr	r3, [r7, #0]
   2804c:	681b      	ldr	r3, [r3, #0]
   2804e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   28052:	683b      	ldr	r3, [r7, #0]
   28054:	685b      	ldr	r3, [r3, #4]
   28056:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   2805a:	683b      	ldr	r3, [r7, #0]
   2805c:	689b      	ldr	r3, [r3, #8]
   2805e:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   28062:	683b      	ldr	r3, [r7, #0]
   28064:	68db      	ldr	r3, [r3, #12]
   28066:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   2806a:	4659      	mov	r1, fp
   2806c:	4650      	mov	r0, sl
   2806e:	f7fe fd09 	bl	26a84 <CC_PalMemSetZeroPlat>
   28072:	e7af      	b.n	27fd4 <ProcessAesDrv+0x2cc>
   28074:	5002b000 	.word	0x5002b000
   28078:	00f10004 	.word	0x00f10004

0002807c <FinishAesDrv>:
   2807c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28080:	b301      	cbz	r1, 280c4 <FinishAesDrv+0x48>
   28082:	b1fa      	cbz	r2, 280c4 <FinishAesDrv+0x48>
   28084:	4604      	mov	r4, r0
   28086:	2800      	cmp	r0, #0
   28088:	d07c      	beq.n	28184 <FinishAesDrv+0x108>
   2808a:	461d      	mov	r5, r3
   2808c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2808e:	2b07      	cmp	r3, #7
   28090:	460e      	mov	r6, r1
   28092:	d01b      	beq.n	280cc <FinishAesDrv+0x50>
   28094:	b95d      	cbnz	r5, 280ae <FinishAesDrv+0x32>
   28096:	2b03      	cmp	r3, #3
   28098:	d110      	bne.n	280bc <FinishAesDrv+0x40>
   2809a:	6d83      	ldr	r3, [r0, #88]	; 0x58
   2809c:	b973      	cbnz	r3, 280bc <FinishAesDrv+0x40>
   2809e:	f100 0364 	add.w	r3, r0, #100	; 0x64
   280a2:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   280a6:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   280aa:	600b      	str	r3, [r1, #0]
   280ac:	2510      	movs	r5, #16
   280ae:	462b      	mov	r3, r5
   280b0:	4631      	mov	r1, r6
   280b2:	4620      	mov	r0, r4
   280b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   280b8:	f7ff be26 	b.w	27d08 <ProcessAesDrv>
   280bc:	462f      	mov	r7, r5
   280be:	4638      	mov	r0, r7
   280c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   280c4:	4f77      	ldr	r7, [pc, #476]	; (282a4 <FinishAesDrv+0x228>)
   280c6:	4638      	mov	r0, r7
   280c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   280cc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   280ce:	2b00      	cmp	r3, #0
   280d0:	d15b      	bne.n	2818a <FinishAesDrv+0x10e>
   280d2:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   280d6:	d25d      	bcs.n	28194 <FinishAesDrv+0x118>
   280d8:	b915      	cbnz	r5, 280e0 <FinishAesDrv+0x64>
   280da:	6da3      	ldr	r3, [r4, #88]	; 0x58
   280dc:	2b00      	cmp	r3, #0
   280de:	d159      	bne.n	28194 <FinishAesDrv+0x118>
   280e0:	4871      	ldr	r0, [pc, #452]	; (282a8 <FinishAesDrv+0x22c>)
   280e2:	f04f 31ff 	mov.w	r1, #4294967295
   280e6:	f7fe fce5 	bl	26ab4 <CC_PalMutexLock>
   280ea:	2800      	cmp	r0, #0
   280ec:	f040 80b8 	bne.w	28260 <FinishAesDrv+0x1e4>
   280f0:	2000      	movs	r0, #0
   280f2:	f7fe fd0f 	bl	26b14 <CC_PalPowerSaveModeSelect>
   280f6:	2800      	cmp	r0, #0
   280f8:	f040 80ae 	bne.w	28258 <FinishAesDrv+0x1dc>
   280fc:	4a6b      	ldr	r2, [pc, #428]	; (282ac <FinishAesDrv+0x230>)
   280fe:	2301      	movs	r3, #1
   28100:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   28104:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   28108:	2b00      	cmp	r3, #0
   2810a:	d1fb      	bne.n	28104 <FinishAesDrv+0x88>
   2810c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2810e:	2b03      	cmp	r3, #3
   28110:	dd20      	ble.n	28154 <FinishAesDrv+0xd8>
   28112:	3b06      	subs	r3, #6
   28114:	2b01      	cmp	r3, #1
   28116:	d81f      	bhi.n	28158 <FinishAesDrv+0xdc>
   28118:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2811a:	2b01      	cmp	r3, #1
   2811c:	d83c      	bhi.n	28198 <FinishAesDrv+0x11c>
   2811e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   28120:	2b01      	cmp	r3, #1
   28122:	f200 80a5 	bhi.w	28270 <FinishAesDrv+0x1f4>
   28126:	6e23      	ldr	r3, [r4, #96]	; 0x60
   28128:	2b01      	cmp	r3, #1
   2812a:	f200 80a3 	bhi.w	28274 <FinishAesDrv+0x1f8>
   2812e:	4620      	mov	r0, r4
   28130:	f7ff fd60 	bl	27bf4 <InitAes.part.0>
   28134:	4607      	mov	r7, r0
   28136:	b980      	cbnz	r0, 2815a <FinishAesDrv+0xde>
   28138:	4620      	mov	r0, r4
   2813a:	f7ff fd09 	bl	27b50 <LoadAesKey>
   2813e:	4607      	mov	r7, r0
   28140:	b958      	cbnz	r0, 2815a <FinishAesDrv+0xde>
   28142:	6b63      	ldr	r3, [r4, #52]	; 0x34
   28144:	2b07      	cmp	r3, #7
   28146:	d807      	bhi.n	28158 <FinishAesDrv+0xdc>
   28148:	e8df f003 	tbb	[pc, r3]
   2814c:	285c2835 	.word	0x285c2835
   28150:	285c0606 	.word	0x285c0606
   28154:	2b00      	cmp	r3, #0
   28156:	dadf      	bge.n	28118 <FinishAesDrv+0x9c>
   28158:	4f55      	ldr	r7, [pc, #340]	; (282b0 <FinishAesDrv+0x234>)
   2815a:	4a54      	ldr	r2, [pc, #336]	; (282ac <FinishAesDrv+0x230>)
   2815c:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   28160:	2b00      	cmp	r3, #0
   28162:	d1fb      	bne.n	2815c <FinishAesDrv+0xe0>
   28164:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   28168:	2001      	movs	r0, #1
   2816a:	f7fe fcd3 	bl	26b14 <CC_PalPowerSaveModeSelect>
   2816e:	2800      	cmp	r0, #0
   28170:	d17a      	bne.n	28268 <FinishAesDrv+0x1ec>
   28172:	484d      	ldr	r0, [pc, #308]	; (282a8 <FinishAesDrv+0x22c>)
   28174:	f7fe fca6 	bl	26ac4 <CC_PalMutexUnlock>
   28178:	2800      	cmp	r0, #0
   2817a:	d0a0      	beq.n	280be <FinishAesDrv+0x42>
   2817c:	484d      	ldr	r0, [pc, #308]	; (282b4 <FinishAesDrv+0x238>)
   2817e:	f7fd fd39 	bl	25bf4 <CC_PalAbort>
   28182:	e79c      	b.n	280be <FinishAesDrv+0x42>
   28184:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   28188:	e799      	b.n	280be <FinishAesDrv+0x42>
   2818a:	2b01      	cmp	r3, #1
   2818c:	d1a4      	bne.n	280d8 <FinishAesDrv+0x5c>
   2818e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   28192:	d3a1      	bcc.n	280d8 <FinishAesDrv+0x5c>
   28194:	4f48      	ldr	r7, [pc, #288]	; (282b8 <FinishAesDrv+0x23c>)
   28196:	e792      	b.n	280be <FinishAesDrv+0x42>
   28198:	4f48      	ldr	r7, [pc, #288]	; (282bc <FinishAesDrv+0x240>)
   2819a:	e7de      	b.n	2815a <FinishAesDrv+0xde>
   2819c:	4b43      	ldr	r3, [pc, #268]	; (282ac <FinishAesDrv+0x230>)
   2819e:	6822      	ldr	r2, [r4, #0]
   281a0:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   281a4:	6862      	ldr	r2, [r4, #4]
   281a6:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   281aa:	68a2      	ldr	r2, [r4, #8]
   281ac:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   281b0:	68e2      	ldr	r2, [r4, #12]
   281b2:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   281b6:	4b3d      	ldr	r3, [pc, #244]	; (282ac <FinishAesDrv+0x230>)
   281b8:	2201      	movs	r2, #1
   281ba:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   281be:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   281c2:	2d00      	cmp	r5, #0
   281c4:	d158      	bne.n	28278 <FinishAesDrv+0x1fc>
   281c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
   281c8:	b909      	cbnz	r1, 281ce <FinishAesDrv+0x152>
   281ca:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   281ce:	4b37      	ldr	r3, [pc, #220]	; (282ac <FinishAesDrv+0x230>)
   281d0:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   281d4:	2f00      	cmp	r7, #0
   281d6:	d1fb      	bne.n	281d0 <FinishAesDrv+0x154>
   281d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   281da:	3b01      	subs	r3, #1
   281dc:	2b06      	cmp	r3, #6
   281de:	d8bc      	bhi.n	2815a <FinishAesDrv+0xde>
   281e0:	a201      	add	r2, pc, #4	; (adr r2, 281e8 <FinishAesDrv+0x16c>)
   281e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   281e6:	bf00      	nop
   281e8:	00028221 	.word	0x00028221
   281ec:	0002823d 	.word	0x0002823d
   281f0:	00028221 	.word	0x00028221
   281f4:	0002815b 	.word	0x0002815b
   281f8:	0002815b 	.word	0x0002815b
   281fc:	0002823d 	.word	0x0002823d
   28200:	00028221 	.word	0x00028221
   28204:	4b29      	ldr	r3, [pc, #164]	; (282ac <FinishAesDrv+0x230>)
   28206:	6822      	ldr	r2, [r4, #0]
   28208:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   2820c:	6862      	ldr	r2, [r4, #4]
   2820e:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   28212:	68a2      	ldr	r2, [r4, #8]
   28214:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   28218:	68e2      	ldr	r2, [r4, #12]
   2821a:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   2821e:	e7ca      	b.n	281b6 <FinishAesDrv+0x13a>
   28220:	4b22      	ldr	r3, [pc, #136]	; (282ac <FinishAesDrv+0x230>)
   28222:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   28226:	6022      	str	r2, [r4, #0]
   28228:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   2822c:	6062      	str	r2, [r4, #4]
   2822e:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   28232:	60a2      	str	r2, [r4, #8]
   28234:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   28238:	60e3      	str	r3, [r4, #12]
   2823a:	e78e      	b.n	2815a <FinishAesDrv+0xde>
   2823c:	4b1b      	ldr	r3, [pc, #108]	; (282ac <FinishAesDrv+0x230>)
   2823e:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   28242:	6022      	str	r2, [r4, #0]
   28244:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   28248:	6062      	str	r2, [r4, #4]
   2824a:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   2824e:	60a2      	str	r2, [r4, #8]
   28250:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   28254:	60e3      	str	r3, [r4, #12]
   28256:	e780      	b.n	2815a <FinishAesDrv+0xde>
   28258:	4819      	ldr	r0, [pc, #100]	; (282c0 <FinishAesDrv+0x244>)
   2825a:	f7fd fccb 	bl	25bf4 <CC_PalAbort>
   2825e:	e74d      	b.n	280fc <FinishAesDrv+0x80>
   28260:	4818      	ldr	r0, [pc, #96]	; (282c4 <FinishAesDrv+0x248>)
   28262:	f7fd fcc7 	bl	25bf4 <CC_PalAbort>
   28266:	e743      	b.n	280f0 <FinishAesDrv+0x74>
   28268:	4817      	ldr	r0, [pc, #92]	; (282c8 <FinishAesDrv+0x24c>)
   2826a:	f7fd fcc3 	bl	25bf4 <CC_PalAbort>
   2826e:	e780      	b.n	28172 <FinishAesDrv+0xf6>
   28270:	4f16      	ldr	r7, [pc, #88]	; (282cc <FinishAesDrv+0x250>)
   28272:	e772      	b.n	2815a <FinishAesDrv+0xde>
   28274:	4f16      	ldr	r7, [pc, #88]	; (282d0 <FinishAesDrv+0x254>)
   28276:	e770      	b.n	2815a <FinishAesDrv+0xde>
   28278:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   2827a:	6832      	ldr	r2, [r6, #0]
   2827c:	2901      	cmp	r1, #1
   2827e:	d00a      	beq.n	28296 <FinishAesDrv+0x21a>
   28280:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   28284:	2010      	movs	r0, #16
   28286:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   2828a:	f7fe fb7d 	bl	26988 <CC_HalWaitInterrupt>
   2828e:	4607      	mov	r7, r0
   28290:	2800      	cmp	r0, #0
   28292:	d09c      	beq.n	281ce <FinishAesDrv+0x152>
   28294:	e761      	b.n	2815a <FinishAesDrv+0xde>
   28296:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   2829a:	2040      	movs	r0, #64	; 0x40
   2829c:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   282a0:	e7f3      	b.n	2828a <FinishAesDrv+0x20e>
   282a2:	bf00      	nop
   282a4:	00f1000b 	.word	0x00f1000b
   282a8:	20000940 	.word	0x20000940
   282ac:	5002b000 	.word	0x5002b000
   282b0:	00f10001 	.word	0x00f10001
   282b4:	0002f55c 	.word	0x0002f55c
   282b8:	00f10005 	.word	0x00f10005
   282bc:	00f10002 	.word	0x00f10002
   282c0:	0002f51c 	.word	0x0002f51c
   282c4:	0002f504 	.word	0x0002f504
   282c8:	0002f53c 	.word	0x0002f53c
   282cc:	00f10003 	.word	0x00f10003
   282d0:	00f10004 	.word	0x00f10004

000282d4 <kmu_validate_slot_and_size>:
   282d4:	b921      	cbnz	r1, 282e0 <kmu_validate_slot_and_size+0xc>
   282d6:	4b03      	ldr	r3, [pc, #12]	; (282e4 <kmu_validate_slot_and_size+0x10>)
   282d8:	2800      	cmp	r0, #0
   282da:	bf18      	it	ne
   282dc:	4618      	movne	r0, r3
   282de:	4770      	bx	lr
   282e0:	4801      	ldr	r0, [pc, #4]	; (282e8 <kmu_validate_slot_and_size+0x14>)
   282e2:	4770      	bx	lr
   282e4:	00f70001 	.word	0x00f70001
   282e8:	00f70003 	.word	0x00f70003

000282ec <kmu_validate_kdr_slot_and_size>:
   282ec:	b921      	cbnz	r1, 282f8 <kmu_validate_kdr_slot_and_size+0xc>
   282ee:	4b03      	ldr	r3, [pc, #12]	; (282fc <kmu_validate_kdr_slot_and_size+0x10>)
   282f0:	2800      	cmp	r0, #0
   282f2:	bf18      	it	ne
   282f4:	4618      	movne	r0, r3
   282f6:	4770      	bx	lr
   282f8:	4801      	ldr	r0, [pc, #4]	; (28300 <kmu_validate_kdr_slot_and_size+0x14>)
   282fa:	4770      	bx	lr
   282fc:	00f70001 	.word	0x00f70001
   28300:	00f70003 	.word	0x00f70003

00028304 <kmu_use_kdr_key>:
   28304:	4b03      	ldr	r3, [pc, #12]	; (28314 <kmu_use_kdr_key+0x10>)
   28306:	2000      	movs	r0, #0
   28308:	2201      	movs	r2, #1
   2830a:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   2830e:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   28312:	4770      	bx	lr
   28314:	5002b000 	.word	0x5002b000

00028318 <kmu_derive_cmac>:
   28318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2831c:	b0cc      	sub	sp, #304	; 0x130
   2831e:	2400      	movs	r4, #0
   28320:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   28322:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   28326:	4682      	mov	sl, r0
   28328:	4689      	mov	r9, r1
   2832a:	4616      	mov	r6, r2
   2832c:	4621      	mov	r1, r4
   2832e:	2274      	movs	r2, #116	; 0x74
   28330:	a80e      	add	r0, sp, #56	; 0x38
   28332:	461f      	mov	r7, r3
   28334:	f005 fd71 	bl	2de1a <memset>
   28338:	2280      	movs	r2, #128	; 0x80
   2833a:	4621      	mov	r1, r4
   2833c:	a82c      	add	r0, sp, #176	; 0xb0
   2833e:	942b      	str	r4, [sp, #172]	; 0xac
   28340:	f005 fd6b 	bl	2de1a <memset>
   28344:	2384      	movs	r3, #132	; 0x84
   28346:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2834a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   2834e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   28352:	9305      	str	r3, [sp, #20]
   28354:	d863      	bhi.n	2841e <kmu_derive_cmac+0x106>
   28356:	f7ff fcbf 	bl	27cd8 <write_invalid_key>
   2835a:	ab05      	add	r3, sp, #20
   2835c:	4630      	mov	r0, r6
   2835e:	ae2b      	add	r6, sp, #172	; 0xac
   28360:	9301      	str	r3, [sp, #4]
   28362:	9502      	str	r5, [sp, #8]
   28364:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   28368:	4639      	mov	r1, r7
   2836a:	9600      	str	r6, [sp, #0]
   2836c:	f000 f862 	bl	28434 <UtilCmacBuildDataForDerivation>
   28370:	2800      	cmp	r0, #0
   28372:	d14f      	bne.n	28414 <kmu_derive_cmac+0xfc>
   28374:	2303      	movs	r3, #3
   28376:	f88d 3013 	strb.w	r3, [sp, #19]
   2837a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2837e:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   28382:	2307      	movs	r3, #7
   28384:	2200      	movs	r2, #0
   28386:	901c      	str	r0, [sp, #112]	; 0x70
   28388:	2110      	movs	r1, #16
   2838a:	a80e      	add	r0, sp, #56	; 0x38
   2838c:	931b      	str	r3, [sp, #108]	; 0x6c
   2838e:	2401      	movs	r4, #1
   28390:	2301      	movs	r3, #1
   28392:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   28396:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   2839a:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   2839e:	9426      	str	r4, [sp, #152]	; 0x98
   283a0:	f10d 0920 	add.w	r9, sp, #32
   283a4:	f7fe fb6e 	bl	26a84 <CC_PalMemSetZeroPlat>
   283a8:	2210      	movs	r2, #16
   283aa:	9200      	str	r2, [sp, #0]
   283ac:	9905      	ldr	r1, [sp, #20]
   283ae:	f8cd 9004 	str.w	r9, [sp, #4]
   283b2:	ab0a      	add	r3, sp, #40	; 0x28
   283b4:	4630      	mov	r0, r6
   283b6:	aa06      	add	r2, sp, #24
   283b8:	f7ff fa1e 	bl	277f8 <SetDataBuffersInfo>
   283bc:	4607      	mov	r7, r0
   283be:	b170      	cbz	r0, 283de <kmu_derive_cmac+0xc6>
   283c0:	e01d      	b.n	283fe <kmu_derive_cmac+0xe6>
   283c2:	a90e      	add	r1, sp, #56	; 0x38
   283c4:	eb08 0007 	add.w	r0, r8, r7
   283c8:	f7fe fb58 	bl	26a7c <CC_PalMemCopyPlat>
   283cc:	2110      	movs	r1, #16
   283ce:	a80e      	add	r0, sp, #56	; 0x38
   283d0:	f7fe fb58 	bl	26a84 <CC_PalMemSetZeroPlat>
   283d4:	3401      	adds	r4, #1
   283d6:	1bad      	subs	r5, r5, r6
   283d8:	4437      	add	r7, r6
   283da:	b2e4      	uxtb	r4, r4
   283dc:	d024      	beq.n	28428 <kmu_derive_cmac+0x110>
   283de:	2d10      	cmp	r5, #16
   283e0:	464a      	mov	r2, r9
   283e2:	9b05      	ldr	r3, [sp, #20]
   283e4:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   283e8:	a906      	add	r1, sp, #24
   283ea:	a80e      	add	r0, sp, #56	; 0x38
   283ec:	462e      	mov	r6, r5
   283ee:	bf28      	it	cs
   283f0:	2610      	movcs	r6, #16
   283f2:	f7ff fe43 	bl	2807c <FinishAesDrv>
   283f6:	4632      	mov	r2, r6
   283f8:	2800      	cmp	r0, #0
   283fa:	d0e2      	beq.n	283c2 <kmu_derive_cmac+0xaa>
   283fc:	4607      	mov	r7, r0
   283fe:	a80e      	add	r0, sp, #56	; 0x38
   28400:	2274      	movs	r2, #116	; 0x74
   28402:	2100      	movs	r1, #0
   28404:	f7fe fb3c 	bl	26a80 <CC_PalMemSetPlat>
   28408:	f7ff fc66 	bl	27cd8 <write_invalid_key>
   2840c:	4638      	mov	r0, r7
   2840e:	b04c      	add	sp, #304	; 0x130
   28410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28414:	4f05      	ldr	r7, [pc, #20]	; (2842c <kmu_derive_cmac+0x114>)
   28416:	4638      	mov	r0, r7
   28418:	b04c      	add	sp, #304	; 0x130
   2841a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2841e:	4f04      	ldr	r7, [pc, #16]	; (28430 <kmu_derive_cmac+0x118>)
   28420:	4638      	mov	r0, r7
   28422:	b04c      	add	sp, #304	; 0x130
   28424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28428:	462f      	mov	r7, r5
   2842a:	e7e8      	b.n	283fe <kmu_derive_cmac+0xe6>
   2842c:	00f1000e 	.word	0x00f1000e
   28430:	00f1000f 	.word	0x00f1000f

00028434 <UtilCmacBuildDataForDerivation>:
   28434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28438:	b082      	sub	sp, #8
   2843a:	461e      	mov	r6, r3
   2843c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2843e:	2300      	movs	r3, #0
   28440:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   28444:	9301      	str	r3, [sp, #4]
   28446:	d83e      	bhi.n	284c6 <UtilCmacBuildDataForDerivation+0x92>
   28448:	00e4      	lsls	r4, r4, #3
   2844a:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   2844e:	4617      	mov	r7, r2
   28450:	f101 32ff 	add.w	r2, r1, #4294967295
   28454:	bf34      	ite	cc
   28456:	2303      	movcc	r3, #3
   28458:	2304      	movcs	r3, #4
   2845a:	2a3f      	cmp	r2, #63	; 0x3f
   2845c:	460d      	mov	r5, r1
   2845e:	9300      	str	r3, [sp, #0]
   28460:	d831      	bhi.n	284c6 <UtilCmacBuildDataForDerivation+0x92>
   28462:	b380      	cbz	r0, 284c6 <UtilCmacBuildDataForDerivation+0x92>
   28464:	b116      	cbz	r6, 2846c <UtilCmacBuildDataForDerivation+0x38>
   28466:	b377      	cbz	r7, 284c6 <UtilCmacBuildDataForDerivation+0x92>
   28468:	2e40      	cmp	r6, #64	; 0x40
   2846a:	d82c      	bhi.n	284c6 <UtilCmacBuildDataForDerivation+0x92>
   2846c:	9a08      	ldr	r2, [sp, #32]
   2846e:	b352      	cbz	r2, 284c6 <UtilCmacBuildDataForDerivation+0x92>
   28470:	9a09      	ldr	r2, [sp, #36]	; 0x24
   28472:	6811      	ldr	r1, [r2, #0]
   28474:	b339      	cbz	r1, 284c6 <UtilCmacBuildDataForDerivation+0x92>
   28476:	19aa      	adds	r2, r5, r6
   28478:	4413      	add	r3, r2
   2847a:	4299      	cmp	r1, r3
   2847c:	d323      	bcc.n	284c6 <UtilCmacBuildDataForDerivation+0x92>
   2847e:	9b08      	ldr	r3, [sp, #32]
   28480:	4601      	mov	r1, r0
   28482:	462a      	mov	r2, r5
   28484:	1c58      	adds	r0, r3, #1
   28486:	f7fe faf9 	bl	26a7c <CC_PalMemCopyPlat>
   2848a:	9b08      	ldr	r3, [sp, #32]
   2848c:	f105 0802 	add.w	r8, r5, #2
   28490:	441d      	add	r5, r3
   28492:	2300      	movs	r3, #0
   28494:	706b      	strb	r3, [r5, #1]
   28496:	bb0e      	cbnz	r6, 284dc <UtilCmacBuildDataForDerivation+0xa8>
   28498:	9b08      	ldr	r3, [sp, #32]
   2849a:	9400      	str	r4, [sp, #0]
   2849c:	2cff      	cmp	r4, #255	; 0xff
   2849e:	eb03 0008 	add.w	r0, r3, r8
   284a2:	d914      	bls.n	284ce <UtilCmacBuildDataForDerivation+0x9a>
   284a4:	0223      	lsls	r3, r4, #8
   284a6:	b29b      	uxth	r3, r3
   284a8:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   284ac:	2202      	movs	r2, #2
   284ae:	a901      	add	r1, sp, #4
   284b0:	9401      	str	r4, [sp, #4]
   284b2:	f7fe fae3 	bl	26a7c <CC_PalMemCopyPlat>
   284b6:	f108 0302 	add.w	r3, r8, #2
   284ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
   284bc:	2000      	movs	r0, #0
   284be:	6013      	str	r3, [r2, #0]
   284c0:	b002      	add	sp, #8
   284c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   284c6:	480a      	ldr	r0, [pc, #40]	; (284f0 <UtilCmacBuildDataForDerivation+0xbc>)
   284c8:	b002      	add	sp, #8
   284ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   284ce:	2201      	movs	r2, #1
   284d0:	4669      	mov	r1, sp
   284d2:	f7fe fad3 	bl	26a7c <CC_PalMemCopyPlat>
   284d6:	f108 0301 	add.w	r3, r8, #1
   284da:	e7ee      	b.n	284ba <UtilCmacBuildDataForDerivation+0x86>
   284dc:	9b08      	ldr	r3, [sp, #32]
   284de:	4632      	mov	r2, r6
   284e0:	eb03 0008 	add.w	r0, r3, r8
   284e4:	4639      	mov	r1, r7
   284e6:	f7fe fac9 	bl	26a7c <CC_PalMemCopyPlat>
   284ea:	44b0      	add	r8, r6
   284ec:	e7d4      	b.n	28498 <UtilCmacBuildDataForDerivation+0x64>
   284ee:	bf00      	nop
   284f0:	80000006 	.word	0x80000006

000284f4 <CC_PalDataBufferAttrGet>:
   284f4:	2000      	movs	r0, #0
   284f6:	7018      	strb	r0, [r3, #0]
   284f8:	4770      	bx	lr
   284fa:	bf00      	nop

000284fc <_is_value_in_table>:
{
   284fc:	b530      	push	{r4, r5, lr}
  for(int i=0; i<len; i++)
   284fe:	2400      	movs	r4, #0
    if(value == table[i])
   28500:	5d0d      	ldrb	r5, [r1, r4]
   28502:	4285      	cmp	r5, r0
   28504:	d102      	bne.n	2850c <_is_value_in_table+0x10>
      *index = i;
   28506:	701c      	strb	r4, [r3, #0]
      return bTRUE;
   28508:	2001      	movs	r0, #1
}
   2850a:	bd30      	pop	{r4, r5, pc}
  for(int i=0; i<len; i++)
   2850c:	3401      	adds	r4, #1
   2850e:	42a2      	cmp	r2, r4
   28510:	dcf6      	bgt.n	28500 <_is_value_in_table+0x4>
  return bFALSE;
   28512:	2000      	movs	r0, #0
   28514:	e7f9      	b.n	2850a <_is_value_in_table+0xe>

00028516 <AD5940_ReadWrite16B>:
{
   28516:	b507      	push	{r0, r1, r2, lr}
   SendBuffer[0] = data>>8;
   28518:	0a03      	lsrs	r3, r0, #8
   SendBuffer[1] = data&0xff;
   2851a:	f88d 0001 	strb.w	r0, [sp, #1]
   AD5940_ReadWriteNBytes(SendBuffer,RecvBuffer,2);
   2851e:	2202      	movs	r2, #2
   28520:	4668      	mov	r0, sp
   28522:	a901      	add	r1, sp, #4
   SendBuffer[0] = data>>8;
   28524:	f88d 3000 	strb.w	r3, [sp]
   AD5940_ReadWriteNBytes(SendBuffer,RecvBuffer,2);
   28528:	f7eb f91e 	bl	13768 <AD5940_ReadWriteNBytes>
   return (((uint16_t)RecvBuffer[0])<<8)|RecvBuffer[1];
   2852c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   28530:	ba40      	rev16	r0, r0
}
   28532:	b280      	uxth	r0, r0
   28534:	b003      	add	sp, #12
   28536:	f85d fb04 	ldr.w	pc, [sp], #4

0002853a <AD5940_ReadWrite32B>:
{
   2853a:	b507      	push	{r0, r1, r2, lr}
   SendBuffer[0] = (data>>24)&0xff;
   2853c:	0e03      	lsrs	r3, r0, #24
   2853e:	f88d 3000 	strb.w	r3, [sp]
   AD5940_ReadWriteNBytes(SendBuffer,RecvBuffer,4);
   28542:	2204      	movs	r2, #4
   SendBuffer[1] = (data>>16)&0xff;
   28544:	0c03      	lsrs	r3, r0, #16
   28546:	f88d 3001 	strb.w	r3, [sp, #1]
   SendBuffer[3] = (data    )&0xff;
   2854a:	f88d 0003 	strb.w	r0, [sp, #3]
   SendBuffer[2] = (data>> 8)&0xff;
   2854e:	0a03      	lsrs	r3, r0, #8
   AD5940_ReadWriteNBytes(SendBuffer,RecvBuffer,4);
   28550:	eb0d 0102 	add.w	r1, sp, r2
   28554:	4668      	mov	r0, sp
   SendBuffer[2] = (data>> 8)&0xff;
   28556:	f88d 3002 	strb.w	r3, [sp, #2]
   AD5940_ReadWriteNBytes(SendBuffer,RecvBuffer,4);
   2855a:	f7eb f905 	bl	13768 <AD5940_ReadWriteNBytes>
}
   2855e:	9801      	ldr	r0, [sp, #4]
   28560:	ba00      	rev	r0, r0
   28562:	b003      	add	sp, #12
   28564:	f85d fb04 	ldr.w	pc, [sp], #4

00028568 <AD5940_ReadWrite8B.isra.0>:
static unsigned char AD5940_ReadWrite8B(unsigned char data)
   28568:	b507      	push	{r0, r1, r2, lr}
   AD5940_ReadWriteNBytes(tx,rx,1);
   2856a:	2201      	movs	r2, #1
   tx[0] = data;
   2856c:	f88d 0000 	strb.w	r0, [sp]
   AD5940_ReadWriteNBytes(tx,rx,1);
   28570:	a901      	add	r1, sp, #4
   28572:	4668      	mov	r0, sp
   28574:	f7eb f8f8 	bl	13768 <AD5940_ReadWriteNBytes>
}
   28578:	b003      	add	sp, #12
   2857a:	f85d fb04 	ldr.w	pc, [sp], #4

0002857e <AD5940_SPIReadReg>:
{  
   2857e:	b510      	push	{r4, lr}
   28580:	4604      	mov	r4, r0
  AD5940_CsClr();
   28582:	f000 feab 	bl	292dc <AD5940_CsClr>
  AD5940_ReadWrite8B(SPICMD_SETADDR);
   28586:	2020      	movs	r0, #32
   28588:	f7ff ffee 	bl	28568 <AD5940_ReadWrite8B.isra.0>
  AD5940_ReadWrite16B(RegAddr);
   2858c:	4620      	mov	r0, r4
   2858e:	f7ff ffc2 	bl	28516 <AD5940_ReadWrite16B>
  AD5940_CsSet();
   28592:	f000 fea7 	bl	292e4 <AD5940_CsSet>
  AD5940_CsClr();
   28596:	f000 fea1 	bl	292dc <AD5940_CsClr>
  AD5940_ReadWrite8B(SPICMD_READREG);
   2859a:	206d      	movs	r0, #109	; 0x6d
   2859c:	f7ff ffe4 	bl	28568 <AD5940_ReadWrite8B.isra.0>
  if((RegAddr>=0x1000)&&(RegAddr<=0x3014))
   285a0:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
  AD5940_ReadWrite8B(0);  //Dummy read
   285a4:	2000      	movs	r0, #0
   285a6:	f7ff ffdf 	bl	28568 <AD5940_ReadWrite8B.isra.0>
  if((RegAddr>=0x1000)&&(RegAddr<=0x3014))
   285aa:	b2a4      	uxth	r4, r4
   285ac:	f242 0314 	movw	r3, #8212	; 0x2014
   285b0:	429c      	cmp	r4, r3
    Data = AD5940_ReadWrite32B(0);
   285b2:	f04f 0000 	mov.w	r0, #0
  if((RegAddr>=0x1000)&&(RegAddr<=0x3014))
   285b6:	d806      	bhi.n	285c6 <AD5940_SPIReadReg+0x48>
    Data = AD5940_ReadWrite32B(0);
   285b8:	f7ff ffbf 	bl	2853a <AD5940_ReadWrite32B>
    Data = AD5940_ReadWrite16B(0);
   285bc:	4604      	mov	r4, r0
  AD5940_CsSet();
   285be:	f000 fe91 	bl	292e4 <AD5940_CsSet>
}
   285c2:	4620      	mov	r0, r4
   285c4:	bd10      	pop	{r4, pc}
    Data = AD5940_ReadWrite16B(0);
   285c6:	f7ff ffa6 	bl	28516 <AD5940_ReadWrite16B>
   285ca:	e7f7      	b.n	285bc <AD5940_SPIReadReg+0x3e>

000285cc <AD5940_StructInit>:
{
   285cc:	460a      	mov	r2, r1
__ssp_bos_icheck3(memset, void *, int)
   285ce:	2100      	movs	r1, #0
   285d0:	f005 bc23 	b.w	2de1a <memset>

000285d4 <AD5940_ComplexDivInt>:
{
   285d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   285d8:	4606      	mov	r6, r0
  temp = (float)b->Real*b->Real + (float)b->Image*b->Image;
   285da:	6810      	ldr	r0, [r2, #0]
{
   285dc:	4614      	mov	r4, r2
   285de:	4689      	mov	r9, r1
  temp = (float)b->Real*b->Real + (float)b->Image*b->Image;
   285e0:	f7d8 fb66 	bl	cb0 <__aeabi_i2f>
   285e4:	4605      	mov	r5, r0
   285e6:	6860      	ldr	r0, [r4, #4]
   285e8:	f7d8 fb62 	bl	cb0 <__aeabi_i2f>
   285ec:	4629      	mov	r1, r5
   285ee:	4604      	mov	r4, r0
   285f0:	4628      	mov	r0, r5
   285f2:	f7d8 fbb1 	bl	d58 <__aeabi_fmul>
   285f6:	4621      	mov	r1, r4
   285f8:	4607      	mov	r7, r0
   285fa:	4620      	mov	r0, r4
   285fc:	f7d8 fbac 	bl	d58 <__aeabi_fmul>
   28600:	4601      	mov	r1, r0
   28602:	4638      	mov	r0, r7
   28604:	f7d8 faa0 	bl	b48 <__addsf3>
   28608:	4607      	mov	r7, r0
  res.Real = (float)a->Real*b->Real + (float)a->Image*b->Image;
   2860a:	f8d9 0000 	ldr.w	r0, [r9]
   2860e:	f7d8 fb4f 	bl	cb0 <__aeabi_i2f>
   28612:	4680      	mov	r8, r0
   28614:	f8d9 0004 	ldr.w	r0, [r9, #4]
   28618:	f7d8 fb4a 	bl	cb0 <__aeabi_i2f>
   2861c:	4641      	mov	r1, r8
   2861e:	4681      	mov	r9, r0
   28620:	4628      	mov	r0, r5
   28622:	f7d8 fb99 	bl	d58 <__aeabi_fmul>
   28626:	4649      	mov	r1, r9
   28628:	4682      	mov	sl, r0
   2862a:	4620      	mov	r0, r4
   2862c:	f7d8 fb94 	bl	d58 <__aeabi_fmul>
   28630:	4601      	mov	r1, r0
   28632:	4650      	mov	r0, sl
   28634:	f7d8 fa88 	bl	b48 <__addsf3>
  res.Real /= temp;
   28638:	4639      	mov	r1, r7
   2863a:	f7d8 fc41 	bl	ec0 <__aeabi_fdiv>
  res.Image = (float)a->Image*b->Real - (float)a->Real*b->Image;
   2863e:	4649      	mov	r1, r9
  return res;
   28640:	6030      	str	r0, [r6, #0]
  res.Image = (float)a->Image*b->Real - (float)a->Real*b->Image;
   28642:	4628      	mov	r0, r5
   28644:	f7d8 fb88 	bl	d58 <__aeabi_fmul>
   28648:	4641      	mov	r1, r8
   2864a:	4605      	mov	r5, r0
   2864c:	4620      	mov	r0, r4
   2864e:	f7d8 fb83 	bl	d58 <__aeabi_fmul>
   28652:	4601      	mov	r1, r0
   28654:	4628      	mov	r0, r5
   28656:	f7d8 fa75 	bl	b44 <__aeabi_fsub>
  res.Image /= temp;
   2865a:	4639      	mov	r1, r7
   2865c:	f7d8 fc30 	bl	ec0 <__aeabi_fdiv>
  return res;
   28660:	6070      	str	r0, [r6, #4]
}
   28662:	4630      	mov	r0, r6
   28664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00028668 <AD5940_ComplexMag>:
  return sqrt(a->Real*a->Real + a->Image*a->Image);
   28668:	6801      	ldr	r1, [r0, #0]
{
   2866a:	b538      	push	{r3, r4, r5, lr}
  return sqrt(a->Real*a->Real + a->Image*a->Image);
   2866c:	6845      	ldr	r5, [r0, #4]
   2866e:	4608      	mov	r0, r1
   28670:	f7d8 fb72 	bl	d58 <__aeabi_fmul>
   28674:	4629      	mov	r1, r5
   28676:	4604      	mov	r4, r0
   28678:	4628      	mov	r0, r5
   2867a:	f7d8 fb6d 	bl	d58 <__aeabi_fmul>
   2867e:	4601      	mov	r1, r0
   28680:	4620      	mov	r0, r4
   28682:	f7d8 fa61 	bl	b48 <__addsf3>
   28686:	f7d7 feef 	bl	468 <__aeabi_f2d>
   2868a:	f7fc fb0d 	bl	24ca8 <sqrt>
   2868e:	f7d8 fa05 	bl	a9c <__aeabi_d2f>
}
   28692:	bd38      	pop	{r3, r4, r5, pc}

00028694 <AD5940_ComplexPhase>:
{
   28694:	b5d0      	push	{r4, r6, r7, lr}
   28696:	4604      	mov	r4, r0
  return atan2(a->Image, a->Real);
   28698:	6800      	ldr	r0, [r0, #0]
   2869a:	f7d7 fee5 	bl	468 <__aeabi_f2d>
   2869e:	4606      	mov	r6, r0
   286a0:	460f      	mov	r7, r1
   286a2:	6860      	ldr	r0, [r4, #4]
   286a4:	f7d7 fee0 	bl	468 <__aeabi_f2d>
   286a8:	4632      	mov	r2, r6
   286aa:	463b      	mov	r3, r7
   286ac:	f005 fb82 	bl	2ddb4 <atan2>
   286b0:	f7d8 f9f4 	bl	a9c <__aeabi_d2f>
}
   286b4:	bdd0      	pop	{r4, r6, r7, pc}

000286b6 <AD5940_FIFORd>:
   if(uiReadCount < 3)
   286b6:	2902      	cmp	r1, #2
{
   286b8:	b570      	push	{r4, r5, r6, lr}
   286ba:	4604      	mov	r4, r0
   286bc:	460d      	mov	r5, r1
   if(uiReadCount < 3)
   286be:	d81f      	bhi.n	28700 <AD5940_FIFORd+0x4a>
      AD5940_CsClr();
   286c0:	f000 fe0c 	bl	292dc <AD5940_CsClr>
      AD5940_ReadWrite8B(SPICMD_SETADDR);
   286c4:	2020      	movs	r0, #32
   286c6:	f7ff ff4f 	bl	28568 <AD5940_ReadWrite8B.isra.0>
      AD5940_ReadWrite16B(REG_AFE_DATAFIFORD);
   286ca:	f242 006c 	movw	r0, #8300	; 0x206c
   286ce:	f7ff ff22 	bl	28516 <AD5940_ReadWrite16B>
      AD5940_CsSet();
   286d2:	f000 fe07 	bl	292e4 <AD5940_CsSet>
      for(i=0;i<uiReadCount;i++)
   286d6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   286da:	42ac      	cmp	r4, r5
   286dc:	d100      	bne.n	286e0 <AD5940_FIFORd+0x2a>
}
   286de:	bd70      	pop	{r4, r5, r6, pc}
         AD5940_CsClr();
   286e0:	f000 fdfc 	bl	292dc <AD5940_CsClr>
         AD5940_ReadWrite8B(SPICMD_READREG);
   286e4:	206d      	movs	r0, #109	; 0x6d
   286e6:	f7ff ff3f 	bl	28568 <AD5940_ReadWrite8B.isra.0>
         AD5940_ReadWrite8B(0);//Write Host status/Don't care
   286ea:	2000      	movs	r0, #0
   286ec:	f7ff ff3c 	bl	28568 <AD5940_ReadWrite8B.isra.0>
         pBuffer[i] = AD5940_ReadWrite32B(0);
   286f0:	2000      	movs	r0, #0
   286f2:	f7ff ff22 	bl	2853a <AD5940_ReadWrite32B>
   286f6:	f844 0b04 	str.w	r0, [r4], #4
         AD5940_CsSet();
   286fa:	f000 fdf3 	bl	292e4 <AD5940_CsSet>
      for(i=0;i<uiReadCount;i++)
   286fe:	e7ec      	b.n	286da <AD5940_FIFORd+0x24>
      AD5940_CsClr();
   28700:	f000 fdec 	bl	292dc <AD5940_CsClr>
      AD5940_ReadWrite8B(SPICMD_READFIFO);
   28704:	205f      	movs	r0, #95	; 0x5f
   28706:	f7ff ff2f 	bl	28568 <AD5940_ReadWrite8B.isra.0>
   2870a:	2606      	movs	r6, #6
         AD5940_ReadWrite8B(0);
   2870c:	2000      	movs	r0, #0
   2870e:	f7ff ff2b 	bl	28568 <AD5940_ReadWrite8B.isra.0>
      for(i=0;i<6;i++)
   28712:	3e01      	subs	r6, #1
   28714:	d1fa      	bne.n	2870c <AD5940_FIFORd+0x56>
      for(i=0;i<uiReadCount-2;i++)
   28716:	3d02      	subs	r5, #2
         pBuffer[i] = AD5940_ReadWrite32B(0); /*Offset is 0, so we always read DATAFIFORD register */
   28718:	2000      	movs	r0, #0
   2871a:	f7ff ff0e 	bl	2853a <AD5940_ReadWrite32B>
   2871e:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
      for(i=0;i<uiReadCount-2;i++)
   28722:	3601      	adds	r6, #1
   28724:	42b5      	cmp	r5, r6
   28726:	d8f7      	bhi.n	28718 <AD5940_FIFORd+0x62>
      pBuffer[i++] = AD5940_ReadWrite32B(0x44444444);
   28728:	f04f 3044 	mov.w	r0, #1145324612	; 0x44444444
   2872c:	f7ff ff05 	bl	2853a <AD5940_ReadWrite32B>
   28730:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
      pBuffer[i] = AD5940_ReadWrite32B(0x44444444);
   28734:	f04f 3044 	mov.w	r0, #1145324612	; 0x44444444
   28738:	f7ff feff 	bl	2853a <AD5940_ReadWrite32B>
      pBuffer[i++] = AD5940_ReadWrite32B(0x44444444);
   2873c:	00ae      	lsls	r6, r5, #2
      pBuffer[i] = AD5940_ReadWrite32B(0x44444444);
   2873e:	3604      	adds	r6, #4
   28740:	51a0      	str	r0, [r4, r6]
}
   28742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      AD5940_CsSet();
   28746:	f000 bdcd 	b.w	292e4 <AD5940_CsSet>

0002874a <AD5940_AFECtrlS>:
{
   2874a:	b538      	push	{r3, r4, r5, lr}
   2874c:	4604      	mov	r4, r0
   2874e:	460d      	mov	r5, r1
  tempreg = AD5940_ReadReg(REG_AFE_AFECON);
   28750:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   28754:	f7ea fa72 	bl	12c3c <AD5940_ReadReg>
  if (State == bTRUE) {
   28758:	2d01      	cmp	r5, #1
    if (AfeCtrlSet & AFECTRL_HPREFPWR) {
   2875a:	f004 0320 	and.w	r3, r4, #32
  if (State == bTRUE) {
   2875e:	d112      	bne.n	28786 <AD5940_AFECtrlS+0x3c>
    if (AfeCtrlSet & AFECTRL_HPREFPWR) {
   28760:	b11b      	cbz	r3, 2876a <AD5940_AFECtrlS+0x20>
        tempreg &= ~BITM_AFE_AFECON_HPREFDIS;
   28762:	f020 0020 	bic.w	r0, r0, #32
        AfeCtrlSet &= ~AFECTRL_HPREFPWR;
   28766:	f024 0420 	bic.w	r4, r4, #32
    if(AfeCtrlSet & AFECTRL_ALDOLIMIT)
   2876a:	0322      	lsls	r2, r4, #12
      tempreg &= ~BITM_AFE_AFECON_ALDOILIMITEN;
   2876c:	bf44      	itt	mi
   2876e:	f420 2000 	bicmi.w	r0, r0, #524288	; 0x80000
      AfeCtrlSet &= ~AFECTRL_ALDOLIMIT;
   28772:	f424 2400 	bicmi.w	r4, r4, #524288	; 0x80000
    tempreg |= AfeCtrlSet;
   28776:	ea44 0100 	orr.w	r1, r4, r0
}
   2877a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  AD5940_WriteReg(REG_AFE_AFECON, tempreg);
   2877e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   28782:	f7ea ba0b 	b.w	12b9c <AD5940_WriteReg>
    if(AfeCtrlSet & AFECTRL_HPREFPWR)
   28786:	b11b      	cbz	r3, 28790 <AD5940_AFECtrlS+0x46>
        tempreg |= BITM_AFE_AFECON_HPREFDIS;
   28788:	f040 0020 	orr.w	r0, r0, #32
        AfeCtrlSet &= ~AFECTRL_HPREFPWR;
   2878c:	f024 0420 	bic.w	r4, r4, #32
    if(AfeCtrlSet & AFECTRL_ALDOLIMIT)
   28790:	0323      	lsls	r3, r4, #12
      tempreg |= BITM_AFE_AFECON_ALDOILIMITEN;
   28792:	bf44      	itt	mi
   28794:	f440 2000 	orrmi.w	r0, r0, #524288	; 0x80000
      AfeCtrlSet &= ~AFECTRL_ALDOLIMIT;
   28798:	f424 2400 	bicmi.w	r4, r4, #524288	; 0x80000
    tempreg &= ~AfeCtrlSet;
   2879c:	ea20 0104 	bic.w	r1, r0, r4
   287a0:	e7eb      	b.n	2877a <AD5940_AFECtrlS+0x30>

000287a2 <AD5940_AFEPwrBW>:
  AD5940_WriteReg(REG_AFE_PMBW, tempreg);
   287a2:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
   287a6:	f242 20f0 	movw	r0, #8944	; 0x22f0
   287aa:	f7ea b9f7 	b.w	12b9c <AD5940_WriteReg>

000287ae <AD5940_REFCfgS>:
{
   287ae:	b510      	push	{r4, lr}
   287b0:	4604      	mov	r4, r0
  tempreg = AD5940_ReadReg(REG_AFE_AFECON);
   287b2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   287b6:	f7ea fa41 	bl	12c3c <AD5940_ReadReg>
  if(pBufCfg->HpBandgapEn == bFALSE)
   287ba:	7823      	ldrb	r3, [r4, #0]
  tempreg &= ~BITM_AFE_AFECON_HPREFDIS;
   287bc:	f020 0120 	bic.w	r1, r0, #32
  if(pBufCfg->HpBandgapEn == bFALSE)
   287c0:	b90b      	cbnz	r3, 287c6 <AD5940_REFCfgS+0x18>
    tempreg |= BITM_AFE_AFECON_HPREFDIS;
   287c2:	f041 0120 	orr.w	r1, r1, #32
  AD5940_WriteReg(REG_AFE_AFECON, tempreg);
   287c6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   287ca:	f7ea f9e7 	bl	12b9c <AD5940_WriteReg>
  tempreg = AD5940_ReadReg(REG_AFE_BUFSENCON);
   287ce:	f44f 5006 	mov.w	r0, #8576	; 0x2180
   287d2:	f7ea fa33 	bl	12c3c <AD5940_ReadReg>
  if(pBufCfg->Hp1V8BuffEn == bTRUE)
   287d6:	7863      	ldrb	r3, [r4, #1]
   287d8:	2b01      	cmp	r3, #1
  if(pBufCfg->Hp1V1BuffEn == bTRUE)
   287da:	78a3      	ldrb	r3, [r4, #2]
  tempreg = AD5940_ReadReg(REG_AFE_BUFSENCON);
   287dc:	4601      	mov	r1, r0
    tempreg |= BITM_AFE_BUFSENCON_V1P8HPADCEN;
   287de:	bf08      	it	eq
   287e0:	f040 0101 	orreq.w	r1, r0, #1
  if(pBufCfg->Hp1V1BuffEn == bTRUE)
   287e4:	2b01      	cmp	r3, #1
  if(pBufCfg->Lp1V8BuffEn == bTRUE)
   287e6:	78e3      	ldrb	r3, [r4, #3]
    tempreg |= BITM_AFE_BUFSENCON_V1P1HPADCEN;
   287e8:	bf08      	it	eq
   287ea:	f041 0110 	orreq.w	r1, r1, #16
  if(pBufCfg->Lp1V8BuffEn == bTRUE)
   287ee:	2b01      	cmp	r3, #1
  if(pBufCfg->Lp1V1BuffEn == bTRUE)
   287f0:	7923      	ldrb	r3, [r4, #4]
    tempreg |= BITM_AFE_BUFSENCON_V1P8LPADCEN;
   287f2:	bf08      	it	eq
   287f4:	f041 0104 	orreq.w	r1, r1, #4
  if(pBufCfg->Lp1V1BuffEn == bTRUE)
   287f8:	2b01      	cmp	r3, #1
  if(pBufCfg->Hp1V8ThemBuff == bTRUE)
   287fa:	7a63      	ldrb	r3, [r4, #9]
    tempreg |= BITM_AFE_BUFSENCON_V1P1LPADCEN;
   287fc:	bf08      	it	eq
   287fe:	f041 0120 	orreq.w	r1, r1, #32
  if(pBufCfg->Hp1V8ThemBuff == bTRUE)
   28802:	2b01      	cmp	r3, #1
  if(pBufCfg->Hp1V8Ilimit == bTRUE)
   28804:	7aa3      	ldrb	r3, [r4, #10]
    tempreg |= BITM_AFE_BUFSENCON_V1P8THERMSTEN;
   28806:	bf08      	it	eq
   28808:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
  if(pBufCfg->Hp1V8Ilimit == bTRUE)
   2880c:	2b01      	cmp	r3, #1
  if(pBufCfg->Disc1V8Cap == bTRUE)
   2880e:	7ae3      	ldrb	r3, [r4, #11]
    tempreg |= BITM_AFE_BUFSENCON_V1P8HPADCILIMITEN;
   28810:	bf08      	it	eq
   28812:	f041 0102 	orreq.w	r1, r1, #2
  if(pBufCfg->Disc1V8Cap == bTRUE)
   28816:	2b01      	cmp	r3, #1
  if(pBufCfg->Disc1V1Cap == bTRUE)
   28818:	7b23      	ldrb	r3, [r4, #12]
    tempreg |= BITM_AFE_BUFSENCON_V1P8HPADCCHGDIS;
   2881a:	bf08      	it	eq
   2881c:	f041 0108 	orreq.w	r1, r1, #8
  if(pBufCfg->Disc1V1Cap == bTRUE)
   28820:	2b01      	cmp	r3, #1
    tempreg |= BITM_AFE_BUFSENCON_V1P1LPADCCHGDIS;
   28822:	bf08      	it	eq
   28824:	f041 0140 	orreq.w	r1, r1, #64	; 0x40
  AD5940_WriteReg(REG_AFE_BUFSENCON, tempreg);
   28828:	f44f 5006 	mov.w	r0, #8576	; 0x2180
   2882c:	f7ea f9b6 	bl	12b9c <AD5940_WriteReg>
  if(pBufCfg->LpRefBufEn == bFALSE)
   28830:	79a3      	ldrb	r3, [r4, #6]
    tempreg |= BITM_AFE_LPREFBUFCON_LPBUF2P5DIS;
   28832:	2b00      	cmp	r3, #0
  if(pBufCfg->LpBandgapEn == bFALSE)
   28834:	7963      	ldrb	r3, [r4, #5]
    tempreg |= BITM_AFE_LPREFBUFCON_LPBUF2P5DIS;
   28836:	bf14      	ite	ne
   28838:	2100      	movne	r1, #0
   2883a:	2102      	moveq	r1, #2
  if(pBufCfg->LpBandgapEn == bFALSE)
   2883c:	b90b      	cbnz	r3, 28842 <AD5940_REFCfgS+0x94>
    tempreg |= BITM_AFE_LPREFBUFCON_LPREFDIS;
   2883e:	f041 0101 	orr.w	r1, r1, #1
  if(pBufCfg->LpRefBoostEn == bTRUE)
   28842:	79e3      	ldrb	r3, [r4, #7]
   28844:	2b01      	cmp	r3, #1
}
   28846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tempreg |= BITM_AFE_LPREFBUFCON_BOOSTCURRENT;
   2884a:	bf08      	it	eq
   2884c:	f041 0104 	orreq.w	r1, r1, #4
  AD5940_WriteReg(REG_AFE_LPREFBUFCON, tempreg);
   28850:	f242 0050 	movw	r0, #8272	; 0x2050
   28854:	f7ea b9a2 	b.w	12b9c <AD5940_WriteReg>

00028858 <__AD5940_ReferenceON>:
{
   28858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ref_cfg.Hp1V1BuffEn = bTRUE;
   2885a:	2301      	movs	r3, #1
   2885c:	f88d 3002 	strb.w	r3, [sp, #2]
  ref_cfg.Hp1V8BuffEn = bTRUE;
   28860:	f88d 3001 	strb.w	r3, [sp, #1]
  ref_cfg.HpBandgapEn = bTRUE;
   28864:	f88d 3000 	strb.w	r3, [sp]
  ref_cfg.HSDACRefEn = bTRUE;
   28868:	f88d 3008 	strb.w	r3, [sp, #8]
  ref_cfg.LpBandgapEn = bTRUE;
   2886c:	f88d 3005 	strb.w	r3, [sp, #5]
  ref_cfg.LpRefBufEn = bTRUE;
   28870:	f88d 3006 	strb.w	r3, [sp, #6]
  AD5940_REFCfgS(&ref_cfg);
   28874:	4668      	mov	r0, sp
  ref_cfg.Disc1V1Cap = bFALSE;
   28876:	2300      	movs	r3, #0
   28878:	f88d 300c 	strb.w	r3, [sp, #12]
  ref_cfg.Disc1V8Cap = bFALSE;
   2887c:	f88d 300b 	strb.w	r3, [sp, #11]
  ref_cfg.Hp1V8Ilimit = bFALSE;
   28880:	f88d 300a 	strb.w	r3, [sp, #10]
  ref_cfg.Hp1V8ThemBuff = bFALSE;
   28884:	f88d 3009 	strb.w	r3, [sp, #9]
  ref_cfg.Lp1V1BuffEn = bFALSE;
   28888:	f88d 3004 	strb.w	r3, [sp, #4]
  ref_cfg.Lp1V8BuffEn = bFALSE;
   2888c:	f88d 3003 	strb.w	r3, [sp, #3]
  ref_cfg.LpRefBoostEn = bFALSE;
   28890:	f88d 3007 	strb.w	r3, [sp, #7]
  AD5940_REFCfgS(&ref_cfg);
   28894:	f7ff ff8b 	bl	287ae <AD5940_REFCfgS>
}
   28898:	b005      	add	sp, #20
   2889a:	f85d fb04 	ldr.w	pc, [sp], #4

0002889e <AD5940_SWMatrixCfgS>:
{
   2889e:	b510      	push	{r4, lr}
   288a0:	4604      	mov	r4, r0
  AD5940_WriteReg(REG_AFE_DSWFULLCON, pSwMatrix->Dswitch);
   288a2:	6801      	ldr	r1, [r0, #0]
   288a4:	f242 1050 	movw	r0, #8528	; 0x2150
   288a8:	f7ea f978 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_PSWFULLCON, pSwMatrix->Pswitch);
   288ac:	6861      	ldr	r1, [r4, #4]
   288ae:	f242 1058 	movw	r0, #8536	; 0x2158
   288b2:	f7ea f973 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_NSWFULLCON, pSwMatrix->Nswitch);
   288b6:	68a1      	ldr	r1, [r4, #8]
   288b8:	f242 1054 	movw	r0, #8532	; 0x2154
   288bc:	f7ea f96e 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_TSWFULLCON, pSwMatrix->Tswitch);
   288c0:	68e1      	ldr	r1, [r4, #12]
   288c2:	f242 105c 	movw	r0, #8540	; 0x215c
   288c6:	f7ea f969 	bl	12b9c <AD5940_WriteReg>
}
   288ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WriteReg(REG_AFE_SWCON, BITM_AFE_SWCON_SWSOURCESEL); /* Update switch configuration */
   288ce:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   288d2:	f242 000c 	movw	r0, #8204	; 0x200c
   288d6:	f7ea b961 	b.w	12b9c <AD5940_WriteReg>

000288da <AD5940_HSDacCfgS>:
  if(pHsDacCfg->ExcitBufGain == EXCITBUFGAIN_0P25)
   288da:	6803      	ldr	r3, [r0, #0]
    tempreg |= BITM_AFE_HSDACCON_INAMPGNMDE; /* Enable attenuator */
   288dc:	2b01      	cmp	r3, #1
  if(pHsDacCfg->HsDacGain == HSDACGAIN_0P2)
   288de:	6843      	ldr	r3, [r0, #4]
    tempreg |= BITM_AFE_HSDACCON_INAMPGNMDE; /* Enable attenuator */
   288e0:	bf0c      	ite	eq
   288e2:	f44f 5180 	moveq.w	r1, #4096	; 0x1000
   288e6:	2100      	movne	r1, #0
  if(pHsDacCfg->HsDacGain == HSDACGAIN_0P2)
   288e8:	2b01      	cmp	r3, #1
  tempreg |= (pHsDacCfg->HsDacUpdateRate&0xff)<<BITP_AFE_HSDACCON_RATE;
   288ea:	6883      	ldr	r3, [r0, #8]
   288ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
    tempreg |= BITM_AFE_HSDACCON_ATTENEN; /* Enable attenuator */
   288f0:	bf08      	it	eq
   288f2:	f041 0101 	orreq.w	r1, r1, #1
  tempreg |= (pHsDacCfg->HsDacUpdateRate&0xff)<<BITP_AFE_HSDACCON_RATE;
   288f6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
  AD5940_WriteReg(REG_AFE_HSDACCON, tempreg);
   288fa:	4319      	orrs	r1, r3
   288fc:	f242 0010 	movw	r0, #8208	; 0x2010
   28900:	f7ea b94c 	b.w	12b9c <AD5940_WriteReg>

00028904 <AD5940_WGCfgS>:
  if(pWGInit->WgType == WGTYPE_SIN)
   28904:	6803      	ldr	r3, [r0, #0]
   28906:	2b02      	cmp	r3, #2
{
   28908:	b510      	push	{r4, lr}
   2890a:	4604      	mov	r4, r0
  if(pWGInit->WgType == WGTYPE_SIN)
   2890c:	d126      	bne.n	2895c <AD5940_WGCfgS+0x58>
    AD5940_WriteReg(REG_AFE_WGFCW, pWGInit->SinCfg.SinFreqWord);
   2890e:	6a01      	ldr	r1, [r0, #32]
   28910:	f242 0030 	movw	r0, #8240	; 0x2030
   28914:	f7ea f942 	bl	12b9c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGAMPLITUDE, pWGInit->SinCfg.SinAmplitudeWord);
   28918:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2891a:	f242 003c 	movw	r0, #8252	; 0x203c
   2891e:	f7ea f93d 	bl	12b9c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGOFFSET, pWGInit->SinCfg.SinOffsetWord);
   28922:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   28924:	f242 0038 	movw	r0, #8248	; 0x2038
   28928:	f7ea f938 	bl	12b9c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGPHASE, pWGInit->SinCfg.SinPhaseWord);
   2892c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   2892e:	f242 0034 	movw	r0, #8244	; 0x2034
    AD5940_WriteReg(REG_AFE_HSDACDAT, pWGInit->WgCode);
   28932:	f7ea f933 	bl	12b9c <AD5940_WriteReg>
  if(pWGInit->GainCalEn == bTRUE)
   28936:	7923      	ldrb	r3, [r4, #4]
  if(pWGInit->OffsetCalEn == bTRUE)
   28938:	7962      	ldrb	r2, [r4, #5]
  tempreg |= (pWGInit->WgType) << BITP_AFE_WGCON_TYPESEL;
   2893a:	6821      	ldr	r1, [r4, #0]
    tempreg |= BITM_AFE_WGCON_DACGAINCAL;
   2893c:	2b01      	cmp	r3, #1
   2893e:	bf0c      	ite	eq
   28940:	2320      	moveq	r3, #32
   28942:	2300      	movne	r3, #0
  if(pWGInit->OffsetCalEn == bTRUE)
   28944:	2a01      	cmp	r2, #1
    tempreg |= BITM_AFE_WGCON_DACOFFSETCAL;
   28946:	bf08      	it	eq
   28948:	f043 0310 	orreq.w	r3, r3, #16
}
   2894c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WriteReg(REG_AFE_WGCON, tempreg);
   28950:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
   28954:	f242 0014 	movw	r0, #8212	; 0x2014
   28958:	f7ea b920 	b.w	12b9c <AD5940_WriteReg>
  else if(pWGInit->WgType == WGTYPE_TRAPZ)
   2895c:	2b03      	cmp	r3, #3
   2895e:	d11c      	bne.n	2899a <AD5940_WGCfgS+0x96>
    AD5940_WriteReg(REG_AFE_WGDCLEVEL1, pWGInit->TrapzCfg.WGTrapzDCLevel1);
   28960:	6881      	ldr	r1, [r0, #8]
   28962:	f242 0018 	movw	r0, #8216	; 0x2018
   28966:	f7ea f919 	bl	12b9c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGDCLEVEL2, pWGInit->TrapzCfg.WGTrapzDCLevel2);
   2896a:	68e1      	ldr	r1, [r4, #12]
   2896c:	f242 001c 	movw	r0, #8220	; 0x201c
   28970:	f7ea f914 	bl	12b9c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGDELAY1, pWGInit->TrapzCfg.WGTrapzDelay1);
   28974:	6921      	ldr	r1, [r4, #16]
   28976:	f242 0020 	movw	r0, #8224	; 0x2020
   2897a:	f7ea f90f 	bl	12b9c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGDELAY2, pWGInit->TrapzCfg.WGTrapzDelay2);
   2897e:	6961      	ldr	r1, [r4, #20]
   28980:	f242 0028 	movw	r0, #8232	; 0x2028
   28984:	f7ea f90a 	bl	12b9c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGSLOPE1, pWGInit->TrapzCfg.WGTrapzSlope1);
   28988:	69a1      	ldr	r1, [r4, #24]
   2898a:	f242 0024 	movw	r0, #8228	; 0x2024
   2898e:	f7ea f905 	bl	12b9c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGSLOPE2, pWGInit->TrapzCfg.WGTrapzSlope2);
   28992:	69e1      	ldr	r1, [r4, #28]
   28994:	f242 002c 	movw	r0, #8236	; 0x202c
   28998:	e7cb      	b.n	28932 <AD5940_WGCfgS+0x2e>
    AD5940_WriteReg(REG_AFE_HSDACDAT, pWGInit->WgCode);
   2899a:	6b01      	ldr	r1, [r0, #48]	; 0x30
   2899c:	f242 0048 	movw	r0, #8264	; 0x2048
   289a0:	e7c7      	b.n	28932 <AD5940_WGCfgS+0x2e>

000289a2 <AD5940_HSLoopCfgS>:
{
   289a2:	b510      	push	{r4, lr}
   289a4:	4604      	mov	r4, r0
  AD5940_HSDacCfgS(&pHsLoopCfg->HsDacCfg);
   289a6:	3010      	adds	r0, #16
   289a8:	f7ff ff97 	bl	288da <AD5940_HSDacCfgS>
  AD5940_HSTIACfgS(&pHsLoopCfg->HsTiaCfg);
   289ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
   289b0:	f7ea f99a 	bl	12ce8 <AD5940_HSTIACfgS>
  AD5940_SWMatrixCfgS(&pHsLoopCfg->SWMatCfg);
   289b4:	4620      	mov	r0, r4
   289b6:	f7ff ff72 	bl	2889e <AD5940_SWMatrixCfgS>
  AD5940_WGCfgS(&pHsLoopCfg->WgCfg);
   289ba:	f104 001c 	add.w	r0, r4, #28
}
   289be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WGCfgS(&pHsLoopCfg->WgCfg);
   289c2:	f7ff bf9f 	b.w	28904 <AD5940_WGCfgS>

000289c6 <AD5940_WGDACCodeS>:
{
   289c6:	b508      	push	{r3, lr}
  AD5940_WriteReg(REG_AFE_HSDACDAT, code);
   289c8:	f3c0 010b 	ubfx	r1, r0, #0, #12
   289cc:	f242 0048 	movw	r0, #8264	; 0x2048
   289d0:	f7ea f8e4 	bl	12b9c <AD5940_WriteReg>
}
   289d4:	2000      	movs	r0, #0
   289d6:	bd08      	pop	{r3, pc}

000289d8 <AD5940_LPDAC0WriteS>:
  AD5940_WriteReg(REG_AFE_LPDACDAT0, ((uint32_t)Data6Bit<<12)|Data12Bit);
   289d8:	f3c0 000b 	ubfx	r0, r0, #0, #12
   289dc:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   289e0:	ea40 3101 	orr.w	r1, r0, r1, lsl #12
   289e4:	f242 1020 	movw	r0, #8480	; 0x2120
   289e8:	f7ea b8d8 	b.w	12b9c <AD5940_WriteReg>

000289ec <AD5940_LPDAC1WriteS>:
  AD5940_WriteReg(REG_AFE_LPDACDAT1, ((uint32_t)Data6Bit<<12)|Data12Bit);
   289ec:	f3c0 000b 	ubfx	r0, r0, #0, #12
   289f0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   289f4:	ea40 3101 	orr.w	r1, r0, r1, lsl #12
   289f8:	f242 102c 	movw	r0, #8492	; 0x212c
   289fc:	f7ea b8ce 	b.w	12b9c <AD5940_WriteReg>

00028a00 <AD5940_LPDACCfgS>:
  tempreg |= (pLpDacCfg->LpDacVzeroMux)<<BITP_AFE_LPDACCON0_VZEROMUX;
   28a00:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
{
   28a04:	b510      	push	{r4, lr}
  tempreg |= (pLpDacCfg->LpDacVzeroMux)<<BITP_AFE_LPDACCON0_VZEROMUX;
   28a06:	0119      	lsls	r1, r3, #4
  tempreg |= (pLpDacCfg->LpDacVbiasMux)<<BITP_AFE_LPDACCON0_VBIASMUX;
   28a08:	68c3      	ldr	r3, [r0, #12]
  tempreg |= (pLpDacCfg->LpDacVzeroMux)<<BITP_AFE_LPDACCON0_VZEROMUX;
   28a0a:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
  tempreg |= (pLpDacCfg->LpDacVbiasMux)<<BITP_AFE_LPDACCON0_VBIASMUX;
   28a0e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
  tempreg |= (pLpDacCfg->LpDacRef)<<BITP_AFE_LPDACCON0_REFSEL;
   28a12:	6943      	ldr	r3, [r0, #20]
   28a14:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
  if(pLpDacCfg->DataRst == bFALSE)
   28a18:	7e03      	ldrb	r3, [r0, #24]
{
   28a1a:	4604      	mov	r4, r0
  if(pLpDacCfg->DataRst == bFALSE)
   28a1c:	b90b      	cbnz	r3, 28a22 <AD5940_LPDACCfgS+0x22>
    tempreg |= BITM_AFE_LPDACCON0_RSTEN;
   28a1e:	f041 0101 	orr.w	r1, r1, #1
  if(pLpDacCfg->PowerEn == bFALSE)
   28a22:	7e63      	ldrb	r3, [r4, #25]
   28a24:	b90b      	cbnz	r3, 28a2a <AD5940_LPDACCfgS+0x2a>
    tempreg |= BITM_AFE_LPDACCON0_PWDEN;
   28a26:	f041 0102 	orr.w	r1, r1, #2
  if(pLpDacCfg->LpdacSel == LPDAC0)
   28a2a:	6823      	ldr	r3, [r4, #0]
   28a2c:	b983      	cbnz	r3, 28a50 <AD5940_LPDACCfgS+0x50>
    AD5940_WriteReg(REG_AFE_LPDACCON0, tempreg);
   28a2e:	f242 1028 	movw	r0, #8488	; 0x2128
   28a32:	f7ea f8b3 	bl	12b9c <AD5940_WriteReg>
    AD5940_LPDAC0WriteS(pLpDacCfg->DacData12Bit, pLpDacCfg->DacData6Bit);
   28a36:	7f21      	ldrb	r1, [r4, #28]
   28a38:	8b60      	ldrh	r0, [r4, #26]
   28a3a:	f7ff ffcd 	bl	289d8 <AD5940_LPDAC0WriteS>
    AD5940_WriteReg(REG_AFE_LPDACSW0, pLpDacCfg->LpDacSW|BITM_AFE_LPDACSW0_LPMODEDIS);  /* Overwrite LPDACSW settings. On Si1, this register is not accessible. */
   28a3e:	6921      	ldr	r1, [r4, #16]
   28a40:	f242 1024 	movw	r0, #8484	; 0x2124
   28a44:	f041 0120 	orr.w	r1, r1, #32
}
   28a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    AD5940_WriteReg(REG_AFE_LPDACSW1, pLpDacCfg->LpDacSW|BITM_AFE_LPDACSW0_LPMODEDIS);  /* Overwrite LPDACSW settings. On Si1, this register is not accessible. */
   28a4c:	f7ea b8a6 	b.w	12b9c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_LPDACCON1, tempreg);
   28a50:	f242 1034 	movw	r0, #8500	; 0x2134
   28a54:	f7ea f8a2 	bl	12b9c <AD5940_WriteReg>
    AD5940_LPDAC1WriteS(pLpDacCfg->DacData12Bit, pLpDacCfg->DacData6Bit);
   28a58:	7f21      	ldrb	r1, [r4, #28]
   28a5a:	8b60      	ldrh	r0, [r4, #26]
   28a5c:	f7ff ffc6 	bl	289ec <AD5940_LPDAC1WriteS>
    AD5940_WriteReg(REG_AFE_LPDACSW1, pLpDacCfg->LpDacSW|BITM_AFE_LPDACSW0_LPMODEDIS);  /* Overwrite LPDACSW settings. On Si1, this register is not accessible. */
   28a60:	6921      	ldr	r1, [r4, #16]
   28a62:	f242 1030 	movw	r0, #8496	; 0x2130
   28a66:	f041 0120 	orr.w	r1, r1, #32
   28a6a:	e7ed      	b.n	28a48 <AD5940_LPDACCfgS+0x48>

00028a6c <AD5940_LPAMPCfgS>:
{
   28a6c:	b510      	push	{r4, lr}
  if(pLpAmpCfg->LpPaPwrEn == bFALSE)
   28a6e:	7e03      	ldrb	r3, [r0, #24]
    tempreg |= BITM_AFE_LPTIACON0_PAPDEN; 
   28a70:	2b00      	cmp	r3, #0
  if(pLpAmpCfg->LpTiaPwrEn == bFALSE)
   28a72:	7e43      	ldrb	r3, [r0, #25]
{
   28a74:	4604      	mov	r4, r0
    tempreg |= BITM_AFE_LPTIACON0_PAPDEN; 
   28a76:	bf14      	ite	ne
   28a78:	2100      	movne	r1, #0
   28a7a:	2102      	moveq	r1, #2
  if(pLpAmpCfg->LpTiaPwrEn == bFALSE)
   28a7c:	b90b      	cbnz	r3, 28a82 <AD5940_LPAMPCfgS+0x16>
    tempreg |= BITM_AFE_LPTIACON0_TIAPDEN;
   28a7e:	f041 0101 	orr.w	r1, r1, #1
  if(pLpAmpCfg->LpAmpPwrMod == LPAMPPWR_HALF) 
   28a82:	6922      	ldr	r2, [r4, #16]
  tempreg |= pLpAmpCfg->LpTiaRload<<BITP_AFE_LPTIACON0_TIARL;
   28a84:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
  if(pLpAmpCfg->LpAmpPwrMod == LPAMPPWR_HALF) 
   28a88:	2a04      	cmp	r2, #4
    tempreg |= BITM_AFE_LPTIACON0_HALFPWR;
   28a8a:	bf0c      	ite	eq
   28a8c:	f041 0204 	orreq.w	r2, r1, #4
    tempreg |= pLpAmpCfg->LpAmpPwrMod<<BITP_AFE_LPTIACON0_IBOOST;
   28a90:	ea41 02c2 	orrne.w	r2, r1, r2, lsl #3
  tempreg |= pLpAmpCfg->LpTiaRload<<BITP_AFE_LPTIACON0_TIARL;
   28a94:	0299      	lsls	r1, r3, #10
  tempreg |= pLpAmpCfg->LpTiaRf<<BITP_AFE_LPTIACON0_TIARF;
   28a96:	6863      	ldr	r3, [r4, #4]
   28a98:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
   28a9c:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
  if(pLpAmpCfg->LpAmpSel == LPAMP0)
   28aa0:	6823      	ldr	r3, [r4, #0]
  tempreg |= pLpAmpCfg->LpTiaRf<<BITP_AFE_LPTIACON0_TIARF;
   28aa2:	4311      	orrs	r1, r2
  if(pLpAmpCfg->LpAmpSel == LPAMP0)
   28aa4:	b953      	cbnz	r3, 28abc <AD5940_LPAMPCfgS+0x50>
    AD5940_WriteReg(REG_AFE_LPTIACON0, tempreg);
   28aa6:	f242 00ec 	movw	r0, #8428	; 0x20ec
   28aaa:	f7ea f877 	bl	12b9c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_LPTIASW0, pLpAmpCfg->LpTiaSW);
   28aae:	6961      	ldr	r1, [r4, #20]
   28ab0:	f242 00e4 	movw	r0, #8420	; 0x20e4
}
   28ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    AD5940_WriteReg(REG_AFE_LPTIASW1, pLpAmpCfg->LpTiaSW);
   28ab8:	f7ea b870 	b.w	12b9c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_LPTIACON1, tempreg);
   28abc:	f242 00e8 	movw	r0, #8424	; 0x20e8
   28ac0:	f7ea f86c 	bl	12b9c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_LPTIASW1, pLpAmpCfg->LpTiaSW);
   28ac4:	6961      	ldr	r1, [r4, #20]
   28ac6:	f242 00e0 	movw	r0, #8416	; 0x20e0
   28aca:	e7f3      	b.n	28ab4 <AD5940_LPAMPCfgS+0x48>

00028acc <AD5940_LPLoopCfgS>:
{
   28acc:	b510      	push	{r4, lr}
   28ace:	4604      	mov	r4, r0
  AD5940_LPDACCfgS(&pLpLoopCfg->LpDacCfg);
   28ad0:	f7ff ff96 	bl	28a00 <AD5940_LPDACCfgS>
  AD5940_LPAMPCfgS(&pLpLoopCfg->LpAmpCfg);
   28ad4:	f104 0020 	add.w	r0, r4, #32
}
   28ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_LPAMPCfgS(&pLpLoopCfg->LpAmpCfg);
   28adc:	f7ff bfc6 	b.w	28a6c <AD5940_LPAMPCfgS>

00028ae0 <AD5940_ADCBaseCfgS>:
  tempreg |= (uint32_t)(pADCInit->ADCMuxN)<<BITP_AFE_ADCCON_MUXSELN;
   28ae0:	e9d0 1200 	ldrd	r1, r2, [r0]
  tempreg |= (uint32_t)(pADCInit->ADCPga)<<BITP_AFE_ADCCON_GNPGA;
   28ae4:	6883      	ldr	r3, [r0, #8]
   28ae6:	041b      	lsls	r3, r3, #16
   28ae8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  AD5940_WriteReg(REG_AFE_ADCCON, tempreg);
   28aec:	4319      	orrs	r1, r3
   28aee:	f242 10a8 	movw	r0, #8616	; 0x21a8
   28af2:	f7ea b853 	b.w	12b9c <AD5940_WriteReg>

00028af6 <AD5940_ADCFilterCfgS>:
{
   28af6:	b510      	push	{r4, lr}
   28af8:	4604      	mov	r4, r0
  tempreg = AD5940_ReadReg(REG_AFE_ADCFILTERCON);
   28afa:	f242 0044 	movw	r0, #8260	; 0x2044
   28afe:	f7ea f89d 	bl	12c3c <AD5940_ReadReg>
  if(pFiltCfg->BpNotch == bTRUE)
   28b02:	7c23      	ldrb	r3, [r4, #16]
  tempreg |= pFiltCfg->ADCRate;
   28b04:	68e1      	ldr	r1, [r4, #12]
  if(pFiltCfg->BpNotch == bTRUE)
   28b06:	2b01      	cmp	r3, #1
  tempreg &= BITM_AFE_ADCFILTERCON_AVRGEN; /* Keep this bit setting. */
   28b08:	f000 0080 	and.w	r0, r0, #128	; 0x80
  if(pFiltCfg->BpSinc3 == bTRUE)
   28b0c:	7c63      	ldrb	r3, [r4, #17]
  tempreg |= pFiltCfg->ADCRate;
   28b0e:	ea40 0001 	orr.w	r0, r0, r1
    tempreg |= BITM_AFE_ADCFILTERCON_LPFBYPEN;
   28b12:	bf08      	it	eq
   28b14:	f040 0010 	orreq.w	r0, r0, #16
  if(pFiltCfg->BpSinc3 == bTRUE)
   28b18:	2b01      	cmp	r3, #1
  tempreg |= (uint32_t)(pFiltCfg->ADCSinc3Osr)<<BITP_AFE_ADCFILTERCON_SINC3OSR;
   28b1a:	e9d4 1300 	ldrd	r1, r3, [r4]
   28b1e:	ea4f 3101 	mov.w	r1, r1, lsl #12
  tempreg |= (uint32_t)(pFiltCfg->ADCAvgNum)<<BITP_AFE_ADCFILTERCON_AVRGNUM;
   28b22:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   28b26:	68a3      	ldr	r3, [r4, #8]
    tempreg |= BITM_AFE_ADCFILTERCON_SINC3BYP;
   28b28:	bf08      	it	eq
   28b2a:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
  tempreg |= (uint32_t)(pFiltCfg->ADCAvgNum)<<BITP_AFE_ADCFILTERCON_AVRGNUM;
   28b2e:	ea41 3183 	orr.w	r1, r1, r3, lsl #14
  AD5940_WriteReg(REG_AFE_ADCFILTERCON, tempreg);
   28b32:	4301      	orrs	r1, r0
   28b34:	f242 0044 	movw	r0, #8260	; 0x2044
   28b38:	f7ea f830 	bl	12b9c <AD5940_WriteReg>
  if(pFiltCfg->Sinc2NotchEnable)
   28b3c:	7ca3      	ldrb	r3, [r4, #18]
   28b3e:	b133      	cbz	r3, 28b4e <AD5940_ADCFilterCfgS+0x58>
}
   28b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    AD5940_AFECtrlS(AFECTRL_SINC2NOTCH,bTRUE);
   28b44:	2101      	movs	r1, #1
   28b46:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   28b4a:	f7ff bdfe 	b.w	2874a <AD5940_AFECtrlS>
}
   28b4e:	bd10      	pop	{r4, pc}

00028b50 <AD5940_ADCDigCompCfgS>:
{
   28b50:	b510      	push	{r4, lr}
   28b52:	4604      	mov	r4, r0
  AD5940_WriteReg(REG_AFE_ADCMIN, pCompCfg->ADCMin);
   28b54:	8801      	ldrh	r1, [r0, #0]
   28b56:	f242 00a8 	movw	r0, #8360	; 0x20a8
   28b5a:	f7ea f81f 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_ADCMINSM, pCompCfg->ADCMinHys);
   28b5e:	8861      	ldrh	r1, [r4, #2]
   28b60:	f242 00ac 	movw	r0, #8364	; 0x20ac
   28b64:	f7ea f81a 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_ADCMAX, pCompCfg->ADCMax);
   28b68:	88a1      	ldrh	r1, [r4, #4]
   28b6a:	f242 00b0 	movw	r0, #8368	; 0x20b0
   28b6e:	f7ea f815 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_ADCMAXSMEN, pCompCfg->ADCMaxHys);
   28b72:	88e1      	ldrh	r1, [r4, #6]
   28b74:	f242 00b4 	movw	r0, #8372	; 0x20b4
}
   28b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WriteReg(REG_AFE_ADCMAXSMEN, pCompCfg->ADCMaxHys);
   28b7c:	f7ea b80e 	b.w	12b9c <AD5940_WriteReg>

00028b80 <AD5940_StatisticCfgS>:
  tempreg |= (pStatCfg->StatDev) << BITP_AFE_STATSCON_STDDEV;
   28b80:	e9d0 3100 	ldrd	r3, r1, [r0]
   28b84:	01db      	lsls	r3, r3, #7
   28b86:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
  if(pStatCfg->StatEnable == bTRUE)
   28b8a:	7a03      	ldrb	r3, [r0, #8]
  AD5940_WriteReg(REG_AFE_STATSCON, tempreg);
   28b8c:	f242 10c4 	movw	r0, #8644	; 0x21c4
   28b90:	2b01      	cmp	r3, #1
   28b92:	bf08      	it	eq
   28b94:	f041 0101 	orreq.w	r1, r1, #1
   28b98:	f7ea b800 	b.w	12b9c <AD5940_WriteReg>

00028b9c <AD5940_DFTCfgS>:
{
   28b9c:	b510      	push	{r4, lr}
   28b9e:	4604      	mov	r4, r0
  reg_adcfilter = AD5940_ReadReg(REG_AFE_ADCFILTERCON);
   28ba0:	f242 0044 	movw	r0, #8260	; 0x2044
   28ba4:	f7ea f84a 	bl	12c3c <AD5940_ReadReg>
  if(pDftCfg->DftSrc == DFTSRC_AVG)
   28ba8:	6863      	ldr	r3, [r4, #4]
   28baa:	2b03      	cmp	r3, #3
   28bac:	d114      	bne.n	28bd8 <AD5940_DFTCfgS+0x3c>
    AD5940_WriteReg(REG_AFE_ADCFILTERCON, reg_adcfilter);
   28bae:	f040 0180 	orr.w	r1, r0, #128	; 0x80
   28bb2:	f242 0044 	movw	r0, #8260	; 0x2044
   28bb6:	f7e9 fff1 	bl	12b9c <AD5940_WriteReg>
  reg_dftcon = 0;
   28bba:	2100      	movs	r1, #0
  reg_dftcon |= (pDftCfg->DftNum) << BITP_AFE_DFTCON_DFTNUM;
   28bbc:	6823      	ldr	r3, [r4, #0]
   28bbe:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
  if(pDftCfg->HanWinEn == bTRUE)
   28bc2:	7a23      	ldrb	r3, [r4, #8]
   28bc4:	2b01      	cmp	r3, #1
}
   28bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    reg_dftcon |= BITM_AFE_DFTCON_HANNINGEN;
   28bca:	bf08      	it	eq
   28bcc:	f041 0101 	orreq.w	r1, r1, #1
  AD5940_WriteReg(REG_AFE_DFTCON, reg_dftcon);
   28bd0:	f242 00d0 	movw	r0, #8400	; 0x20d0
   28bd4:	f7e9 bfe2 	b.w	12b9c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_ADCFILTERCON, reg_adcfilter);
   28bd8:	f020 0180 	bic.w	r1, r0, #128	; 0x80
   28bdc:	f242 0044 	movw	r0, #8260	; 0x2044
   28be0:	f7e9 ffdc 	bl	12b9c <AD5940_WriteReg>
    reg_dftcon |= (pDftCfg->DftSrc) << BITP_AFE_DFTCON_DFTINSEL;
   28be4:	6861      	ldr	r1, [r4, #4]
   28be6:	0509      	lsls	r1, r1, #20
   28be8:	e7e8      	b.n	28bbc <AD5940_DFTCfgS+0x20>

00028bea <AD5940_DSPCfgS>:
{
   28bea:	b510      	push	{r4, lr}
   28bec:	4604      	mov	r4, r0
  AD5940_ADCBaseCfgS(&pDSPCfg->ADCBaseCfg);
   28bee:	f7ff ff77 	bl	28ae0 <AD5940_ADCBaseCfgS>
  AD5940_ADCFilterCfgS(&pDSPCfg->ADCFilterCfg);
   28bf2:	f104 000c 	add.w	r0, r4, #12
   28bf6:	f7ff ff7e 	bl	28af6 <AD5940_ADCFilterCfgS>
  AD5940_ADCDigCompCfgS(&pDSPCfg->ADCDigCompCfg);
   28bfa:	f104 0020 	add.w	r0, r4, #32
   28bfe:	f7ff ffa7 	bl	28b50 <AD5940_ADCDigCompCfgS>
  AD5940_DFTCfgS(&pDSPCfg->DftCfg);
   28c02:	f104 0028 	add.w	r0, r4, #40	; 0x28
   28c06:	f7ff ffc9 	bl	28b9c <AD5940_DFTCfgS>
  AD5940_StatisticCfgS(&pDSPCfg->StatCfg);
   28c0a:	f104 0034 	add.w	r0, r4, #52	; 0x34
}
   28c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_StatisticCfgS(&pDSPCfg->StatCfg);
   28c12:	f7ff bfb5 	b.w	28b80 <AD5940_StatisticCfgS>

00028c16 <AD5940_FIFOCfg>:
{
   28c16:	b510      	push	{r4, lr}
  AD5940_WriteReg(REG_AFE_FIFOCON, 0);  /* Disable FIFO firstly! */
   28c18:	2100      	movs	r1, #0
{
   28c1a:	4604      	mov	r4, r0
  AD5940_WriteReg(REG_AFE_FIFOCON, 0);  /* Disable FIFO firstly! */
   28c1c:	f242 0008 	movw	r0, #8200	; 0x2008
   28c20:	f7e9 ffbc 	bl	12b9c <AD5940_WriteReg>
  tempreg = AD5940_ReadReg(REG_AFE_CMDDATACON);
   28c24:	f242 10d8 	movw	r0, #8664	; 0x21d8
   28c28:	f7ea f808 	bl	12c3c <AD5940_ReadReg>
  tempreg |= pFifoCfg->FIFOSize << BITP_AFE_CMDDATACON_DATA_MEM_SEL;  		  /* Data FIFO memory size */
   28c2c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   28c30:	019b      	lsls	r3, r3, #6
   28c32:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
  tempreg &= BITM_AFE_CMDDATACON_CMD_MEM_SEL|BITM_AFE_CMDDATACON_CMDMEMMDE; /* Keep sequencer memory settings */
   28c36:	f000 013f 	and.w	r1, r0, #63	; 0x3f
  AD5940_WriteReg(REG_AFE_CMDDATACON, tempreg);
   28c3a:	4319      	orrs	r1, r3
   28c3c:	f242 10d8 	movw	r0, #8664	; 0x21d8
   28c40:	f7e9 ffac 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_DATAFIFOTHRES, pFifoCfg->FIFOThresh << BITP_AFE_DATAFIFOTHRES_HIGHTHRES);
   28c44:	6921      	ldr	r1, [r4, #16]
   28c46:	f242 10e0 	movw	r0, #8672	; 0x21e0
   28c4a:	0409      	lsls	r1, r1, #16
   28c4c:	f7e9 ffa6 	bl	12b9c <AD5940_WriteReg>
  if(pFifoCfg->FIFOEn == bTRUE)
   28c50:	7823      	ldrb	r3, [r4, #0]
  tempreg |= pFifoCfg->FIFOSrc << BITP_AFE_FIFOCON_DATAFIFOSRCSEL;
   28c52:	68e1      	ldr	r1, [r4, #12]
    tempreg |= BITM_AFE_FIFOCON_DATAFIFOEN;																/* Enable FIFO after everything set. */
   28c54:	2b01      	cmp	r3, #1
   28c56:	bf14      	ite	ne
   28c58:	2300      	movne	r3, #0
   28c5a:	f44f 6300 	moveq.w	r3, #2048	; 0x800
}
   28c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WriteReg(REG_AFE_FIFOCON, tempreg);
   28c62:	ea43 3141 	orr.w	r1, r3, r1, lsl #13
   28c66:	f242 0008 	movw	r0, #8200	; 0x2008
   28c6a:	f7e9 bf97 	b.w	12b9c <AD5940_WriteReg>

00028c6e <AD5940_FIFOCtrlS>:
    tempreg |= BITM_AFE_FIFOCON_DATAFIFOEN;
   28c6e:	2901      	cmp	r1, #1
   28c70:	bf14      	ite	ne
   28c72:	2100      	movne	r1, #0
   28c74:	f44f 6100 	moveq.w	r1, #2048	; 0x800
  AD5940_WriteReg(REG_AFE_FIFOCON, tempreg);
   28c78:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
   28c7c:	f242 0008 	movw	r0, #8200	; 0x2008
   28c80:	f7e9 bf8c 	b.w	12b9c <AD5940_WriteReg>

00028c84 <AD5940_FIFOThrshSet>:
  AD5940_WriteReg(REG_AFE_DATAFIFOTHRES, FIFOThresh << BITP_AFE_DATAFIFOTHRES_HIGHTHRES);
   28c84:	0401      	lsls	r1, r0, #16
   28c86:	f242 10e0 	movw	r0, #8672	; 0x21e0
   28c8a:	f7e9 bf87 	b.w	12b9c <AD5940_WriteReg>

00028c8e <AD5940_FIFOGetCnt>:
{
   28c8e:	b508      	push	{r3, lr}
  return AD5940_ReadReg(REG_AFE_FIFOCNTSTA) >> BITP_AFE_FIFOCNTSTA_DATAFIFOCNTSTA;
   28c90:	f44f 5008 	mov.w	r0, #8704	; 0x2200
   28c94:	f7e9 ffd2 	bl	12c3c <AD5940_ReadReg>
}
   28c98:	0c00      	lsrs	r0, r0, #16
   28c9a:	bd08      	pop	{r3, pc}

00028c9c <AD5940_SEQCfg>:
{
   28c9c:	b538      	push	{r3, r4, r5, lr}
   28c9e:	4604      	mov	r4, r0
  fifocon = AD5940_ReadReg(REG_AFE_FIFOCON);
   28ca0:	f242 0008 	movw	r0, #8200	; 0x2008
   28ca4:	f7e9 ffca 	bl	12c3c <AD5940_ReadReg>
  AD5940_WriteReg(REG_AFE_FIFOCON, 0);  /* Disable FIFO before changing memory configuration */
   28ca8:	2100      	movs	r1, #0
  fifocon = AD5940_ReadReg(REG_AFE_FIFOCON);
   28caa:	4605      	mov	r5, r0
  AD5940_WriteReg(REG_AFE_FIFOCON, 0);  /* Disable FIFO before changing memory configuration */
   28cac:	f242 0008 	movw	r0, #8200	; 0x2008
   28cb0:	f7e9 ff74 	bl	12b9c <AD5940_WriteReg>
  tempreg = AD5940_ReadReg(REG_AFE_CMDDATACON);
   28cb4:	f242 10d8 	movw	r0, #8664	; 0x21d8
   28cb8:	f7e9 ffc0 	bl	12c3c <AD5940_ReadReg>
  tempreg &= ~(BITM_AFE_CMDDATACON_CMDMEMMDE|BITM_AFE_CMDDATACON_CMD_MEM_SEL);  /* Clear settings for sequencer memory */
   28cbc:	f020 013f 	bic.w	r1, r0, #63	; 0x3f
   28cc0:	6820      	ldr	r0, [r4, #0]
   28cc2:	4301      	orrs	r1, r0
  AD5940_WriteReg(REG_AFE_CMDDATACON, tempreg);
   28cc4:	f041 0108 	orr.w	r1, r1, #8
   28cc8:	f242 10d8 	movw	r0, #8664	; 0x21d8
   28ccc:	f7e9 ff66 	bl	12b9c <AD5940_WriteReg>
  if(pSeqCfg->SeqCntCRCClr)
   28cd0:	79e3      	ldrb	r3, [r4, #7]
   28cd2:	b14b      	cbz	r3, 28ce8 <AD5940_SEQCfg+0x4c>
    AD5940_WriteReg(REG_AFE_SEQCON, 0);  /* Disable sequencer firstly */
   28cd4:	2100      	movs	r1, #0
   28cd6:	f242 0004 	movw	r0, #8196	; 0x2004
   28cda:	f7e9 ff5f 	bl	12b9c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_SEQCNT, 0);  /* When sequencer is disabled, any write to SEQCNT will clear CNT and CRC register */  
   28cde:	2100      	movs	r1, #0
   28ce0:	f242 0064 	movw	r0, #8292	; 0x2064
   28ce4:	f7e9 ff5a 	bl	12b9c <AD5940_WriteReg>
  if(pSeqCfg->SeqEnable == bTRUE)
   28ce8:	7923      	ldrb	r3, [r4, #4]
  tempreg |= (pSeqCfg->SeqWrTimer) << BITP_AFE_SEQCON_SEQWRTMR;
   28cea:	68a1      	ldr	r1, [r4, #8]
  if(pSeqCfg->SeqEnable == bTRUE)
   28cec:	1e5a      	subs	r2, r3, #1
   28cee:	4253      	negs	r3, r2
   28cf0:	4153      	adcs	r3, r2
  AD5940_WriteReg(REG_AFE_SEQCON, tempreg);
   28cf2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   28cf6:	f242 0004 	movw	r0, #8196	; 0x2004
   28cfa:	f7e9 ff4f 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_FIFOCON, fifocon);  /* restore FIFO configuration */
   28cfe:	4629      	mov	r1, r5
   28d00:	f242 0008 	movw	r0, #8200	; 0x2008
}
   28d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  AD5940_WriteReg(REG_AFE_FIFOCON, fifocon);  /* restore FIFO configuration */
   28d08:	f7e9 bf48 	b.w	12b9c <AD5940_WriteReg>

00028d0c <AD5940_SEQGetCfg>:
{
   28d0c:	b538      	push	{r3, r4, r5, lr}
  if(pSeqCfg == NULL)
   28d0e:	4604      	mov	r4, r0
   28d10:	b1a0      	cbz	r0, 28d3c <AD5940_SEQGetCfg+0x30>
  tempreg = AD5940_ReadReg(REG_AFE_CMDDATACON);
   28d12:	f242 10d8 	movw	r0, #8664	; 0x21d8
   28d16:	f7e9 ff91 	bl	12c3c <AD5940_ReadReg>
  pSeqCfg->SeqCntCRCClr = bFALSE; /* Has no meaning */
   28d1a:	2500      	movs	r5, #0
  pSeqCfg->SeqMemSize = (tempreg&BITM_AFE_CMDDATACON_CMD_MEM_SEL) >> BITP_AFE_CMDDATACON_CMD_MEM_SEL;
   28d1c:	f000 0007 	and.w	r0, r0, #7
   28d20:	6020      	str	r0, [r4, #0]
  pSeqCfg->SeqCntCRCClr = bFALSE; /* Has no meaning */
   28d22:	71e5      	strb	r5, [r4, #7]
  tempreg = AD5940_ReadReg(REG_AFE_SEQCON);
   28d24:	f242 0004 	movw	r0, #8196	; 0x2004
   28d28:	f7e9 ff88 	bl	12c3c <AD5940_ReadReg>
  pSeqCfg->SeqEnable = (tempreg&BITM_AFE_SEQCON_SEQEN)?bTRUE:bFALSE;
   28d2c:	f000 0301 	and.w	r3, r0, #1
  pSeqCfg->SeqWrTimer = (tempreg&BITM_AFE_SEQCON_SEQWRTMR) >> BITP_AFE_SEQCON_SEQWRTMR;
   28d30:	f3c0 2007 	ubfx	r0, r0, #8, #8
   28d34:	60a0      	str	r0, [r4, #8]
  pSeqCfg->SeqEnable = (tempreg&BITM_AFE_SEQCON_SEQEN)?bTRUE:bFALSE;
   28d36:	7123      	strb	r3, [r4, #4]
  return AD5940ERR_OK;
   28d38:	4628      	mov	r0, r5
}
   28d3a:	bd38      	pop	{r3, r4, r5, pc}
    return AD5940ERR_NULLP;
   28d3c:	f06f 0002 	mvn.w	r0, #2
   28d40:	e7fb      	b.n	28d3a <AD5940_SEQGetCfg+0x2e>

00028d42 <AD5940_SEQCtrlS>:
{
   28d42:	b510      	push	{r4, lr}
   28d44:	4604      	mov	r4, r0
  uint32_t tempreg = AD5940_ReadReg(REG_AFE_SEQCON);
   28d46:	f242 0004 	movw	r0, #8196	; 0x2004
   28d4a:	f7e9 ff77 	bl	12c3c <AD5940_ReadReg>
  if(SeqEn == bTRUE)
   28d4e:	2c01      	cmp	r4, #1
  uint32_t tempreg = AD5940_ReadReg(REG_AFE_SEQCON);
   28d50:	4601      	mov	r1, r0
}
   28d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tempreg |= BITM_AFE_SEQCON_SEQEN;
   28d56:	bf0c      	ite	eq
   28d58:	f040 0101 	orreq.w	r1, r0, #1
    tempreg &= ~BITM_AFE_SEQCON_SEQEN;
   28d5c:	f021 0101 	bicne.w	r1, r1, #1
  AD5940_WriteReg(REG_AFE_SEQCON, tempreg);
   28d60:	f242 0004 	movw	r0, #8196	; 0x2004
   28d64:	f7e9 bf1a 	b.w	12b9c <AD5940_WriteReg>

00028d68 <AD5940_SEQMmrTrig>:
  if(SeqId > SEQID_3)
   28d68:	2803      	cmp	r0, #3
   28d6a:	d805      	bhi.n	28d78 <AD5940_SEQMmrTrig+0x10>
  AD5940_WriteReg(REG_AFECON_TRIGSEQ, 1L<<SeqId);
   28d6c:	2101      	movs	r1, #1
   28d6e:	4081      	lsls	r1, r0
   28d70:	f44f 6086 	mov.w	r0, #1072	; 0x430
   28d74:	f7e9 bf12 	b.w	12b9c <AD5940_WriteReg>
}
   28d78:	4770      	bx	lr

00028d7a <AD5940_SEQCmdWrite>:
{
   28d7a:	b570      	push	{r4, r5, r6, lr}
   28d7c:	460c      	mov	r4, r1
  while(CmdCnt--)
   28d7e:	1885      	adds	r5, r0, r2
   28d80:	42a8      	cmp	r0, r5
   28d82:	d100      	bne.n	28d86 <AD5940_SEQCmdWrite+0xc>
}
   28d84:	bd70      	pop	{r4, r5, r6, pc}
    AD5940_WriteReg(REG_AFE_CMDFIFOWADDR, StartAddr++);
   28d86:	4601      	mov	r1, r0
   28d88:	1c46      	adds	r6, r0, #1
   28d8a:	f242 10d4 	movw	r0, #8660	; 0x21d4
   28d8e:	f7e9 ff05 	bl	12b9c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_CMDFIFOWRITE, *pCommand++);
   28d92:	f242 0070 	movw	r0, #8304	; 0x2070
   28d96:	f854 1b04 	ldr.w	r1, [r4], #4
   28d9a:	f7e9 feff 	bl	12b9c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_CMDFIFOWADDR, StartAddr++);
   28d9e:	4630      	mov	r0, r6
   28da0:	e7ee      	b.n	28d80 <AD5940_SEQCmdWrite+0x6>

00028da2 <AD5940_SEQInfoCfg>:
  switch(pSeq->SeqId)
   28da2:	6803      	ldr	r3, [r0, #0]
{
   28da4:	b510      	push	{r4, lr}
   28da6:	4604      	mov	r4, r0
  switch(pSeq->SeqId)
   28da8:	2b03      	cmp	r3, #3
   28daa:	d80b      	bhi.n	28dc4 <AD5940_SEQInfoCfg+0x22>
   28dac:	e8df f003 	tbb	[pc, r3]
   28db0:	221b1402 	.word	0x221b1402
    AD5940_WriteReg(REG_AFE_SEQ0INFO, (pSeq->SeqLen<< 16) | pSeq->SeqRamAddr);
   28db4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   28db8:	f242 10cc 	movw	r0, #8652	; 0x21cc
   28dbc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    AD5940_WriteReg(REG_AFE_SEQ3INFO, (pSeq->SeqLen<< 16) | pSeq->SeqRamAddr);
   28dc0:	f7e9 feec 	bl	12b9c <AD5940_WriteReg>
  if(pSeq->WriteSRAM == bTRUE)
   28dc4:	7b23      	ldrb	r3, [r4, #12]
   28dc6:	2b01      	cmp	r3, #1
   28dc8:	d11b      	bne.n	28e02 <AD5940_SEQInfoCfg+0x60>
    AD5940_SEQCmdWrite(pSeq->SeqRamAddr, pSeq->pSeqCmd, pSeq->SeqLen);
   28dca:	68a2      	ldr	r2, [r4, #8]
   28dcc:	6921      	ldr	r1, [r4, #16]
   28dce:	6860      	ldr	r0, [r4, #4]
}
   28dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    AD5940_SEQCmdWrite(pSeq->SeqRamAddr, pSeq->pSeqCmd, pSeq->SeqLen);
   28dd4:	f7ff bfd1 	b.w	28d7a <AD5940_SEQCmdWrite>
    AD5940_WriteReg(REG_AFE_SEQ1INFO, (pSeq->SeqLen<< 16) | pSeq->SeqRamAddr);
   28dd8:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   28ddc:	f242 10e8 	movw	r0, #8680	; 0x21e8
   28de0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   28de4:	e7ec      	b.n	28dc0 <AD5940_SEQInfoCfg+0x1e>
    AD5940_WriteReg(REG_AFE_SEQ2INFO, (pSeq->SeqLen<< 16) | pSeq->SeqRamAddr);
   28de6:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   28dea:	f242 10d0 	movw	r0, #8656	; 0x21d0
   28dee:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   28df2:	e7e5      	b.n	28dc0 <AD5940_SEQInfoCfg+0x1e>
    AD5940_WriteReg(REG_AFE_SEQ3INFO, (pSeq->SeqLen<< 16) | pSeq->SeqRamAddr);
   28df4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   28df8:	f242 10e4 	movw	r0, #8676	; 0x21e4
   28dfc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   28e00:	e7de      	b.n	28dc0 <AD5940_SEQInfoCfg+0x1e>
}
   28e02:	bd10      	pop	{r4, pc}

00028e04 <AD5940_SEQGpioCtrlS>:
{
   28e04:	4601      	mov	r1, r0
  AD5940_WriteReg(REG_AFE_SYNCEXTDEVICE, Gpio);
   28e06:	f242 0054 	movw	r0, #8276	; 0x2054
   28e0a:	f7e9 bec7 	b.w	12b9c <AD5940_WriteReg>

00028e0e <AD5940_SEQTimeOutRd>:
  return AD5940_ReadReg(REG_AFE_SEQTIMEOUT);
   28e0e:	f242 0068 	movw	r0, #8296	; 0x2068
   28e12:	f7e9 bf13 	b.w	12c3c <AD5940_ReadReg>

00028e16 <AD5940_WUPTCfg>:
{
   28e16:	b510      	push	{r4, lr}
   28e18:	4604      	mov	r4, r0
  AD5940_WriteReg(REG_WUPTMR_SEQ0WUPL, (pWuptCfg->SeqxWakeupTime[0] & 0xFFFF));    
   28e1a:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   28e1c:	f640 0008 	movw	r0, #2056	; 0x808
   28e20:	f7e9 febc 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ0WUPH, (pWuptCfg->SeqxWakeupTime[0] & 0xF0000)>>16);
   28e24:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
   28e26:	f640 000c 	movw	r0, #2060	; 0x80c
   28e2a:	f001 010f 	and.w	r1, r1, #15
   28e2e:	f7e9 feb5 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ0SLEEPL, (pWuptCfg->SeqxSleepTime[0] & 0xFFFF));    
   28e32:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   28e34:	f44f 6001 	mov.w	r0, #2064	; 0x810
   28e38:	f7e9 feb0 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ0SLEEPH, (pWuptCfg->SeqxSleepTime[0] & 0xF0000)>>16);
   28e3c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   28e3e:	f640 0014 	movw	r0, #2068	; 0x814
   28e42:	f001 010f 	and.w	r1, r1, #15
   28e46:	f7e9 fea9 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ1WUPL, (pWuptCfg->SeqxWakeupTime[1] & 0xFFFF));    
   28e4a:	8f21      	ldrh	r1, [r4, #56]	; 0x38
   28e4c:	f640 0018 	movw	r0, #2072	; 0x818
   28e50:	f7e9 fea4 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ1WUPH, (pWuptCfg->SeqxWakeupTime[1] & 0xF0000)>>16);
   28e54:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
   28e56:	f640 001c 	movw	r0, #2076	; 0x81c
   28e5a:	f001 010f 	and.w	r1, r1, #15
   28e5e:	f7e9 fe9d 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ1SLEEPL, (pWuptCfg->SeqxSleepTime[1] & 0xFFFF));    
   28e62:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   28e64:	f44f 6002 	mov.w	r0, #2080	; 0x820
   28e68:	f7e9 fe98 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ1SLEEPH, (pWuptCfg->SeqxSleepTime[1] & 0xF0000)>>16);
   28e6c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   28e6e:	f640 0024 	movw	r0, #2084	; 0x824
   28e72:	f001 010f 	and.w	r1, r1, #15
   28e76:	f7e9 fe91 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ2WUPL, (pWuptCfg->SeqxWakeupTime[2] & 0xFFFF));    
   28e7a:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
   28e7c:	f640 0028 	movw	r0, #2088	; 0x828
   28e80:	f7e9 fe8c 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ2WUPH, (pWuptCfg->SeqxWakeupTime[2] & 0xF0000)>>16);
   28e84:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
   28e86:	f640 002c 	movw	r0, #2092	; 0x82c
   28e8a:	f001 010f 	and.w	r1, r1, #15
   28e8e:	f7e9 fe85 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ2SLEEPL, (pWuptCfg->SeqxSleepTime[2] & 0xFFFF));    
   28e92:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   28e94:	f44f 6003 	mov.w	r0, #2096	; 0x830
   28e98:	f7e9 fe80 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ2SLEEPH, (pWuptCfg->SeqxSleepTime[2] & 0xF0000)>>16);
   28e9c:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
   28e9e:	f640 0034 	movw	r0, #2100	; 0x834
   28ea2:	f001 010f 	and.w	r1, r1, #15
   28ea6:	f7e9 fe79 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ3WUPL, (pWuptCfg->SeqxWakeupTime[3] & 0xFFFF));    
   28eaa:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
   28eae:	f640 0038 	movw	r0, #2104	; 0x838
   28eb2:	f7e9 fe73 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ3WUPH, (pWuptCfg->SeqxWakeupTime[3] & 0xF0000)>>16);
   28eb6:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
   28eba:	f640 003c 	movw	r0, #2108	; 0x83c
   28ebe:	f001 010f 	and.w	r1, r1, #15
   28ec2:	f7e9 fe6b 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ3SLEEPL, (pWuptCfg->SeqxSleepTime[3] & 0xFFFF));    
   28ec6:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   28ec8:	f44f 6004 	mov.w	r0, #2112	; 0x840
   28ecc:	f7e9 fe66 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ3SLEEPH, (pWuptCfg->SeqxSleepTime[3] & 0xF0000)>>16);
   28ed0:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   28ed2:	f640 0044 	movw	r0, #2116	; 0x844
   28ed6:	f001 010f 	and.w	r1, r1, #15
   28eda:	f7e9 fe5f 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_ALLON_TMRCON, BITM_ALLON_TMRCON_TMRINTEN);
   28ede:	2101      	movs	r1, #1
   28ee0:	f640 201c 	movw	r0, #2588	; 0xa1c
   28ee4:	f7e9 fe5a 	bl	12b9c <AD5940_WriteReg>
  tempreg |= (pWuptCfg->WuptOrder[1]&0x03) << BITP_WUPTMR_SEQORDER_SEQB; /* position B */
   28ee8:	68a3      	ldr	r3, [r4, #8]
  tempreg |= (pWuptCfg->WuptOrder[2]&0x03) << BITP_WUPTMR_SEQORDER_SEQC; /* position C */
   28eea:	68e2      	ldr	r2, [r4, #12]
  tempreg |= (pWuptCfg->WuptOrder[4]&0x03) << BITP_WUPTMR_SEQORDER_SEQE; /* position E */
   28eec:	6960      	ldr	r0, [r4, #20]
  tempreg |= (pWuptCfg->WuptOrder[1]&0x03) << BITP_WUPTMR_SEQORDER_SEQB; /* position B */
   28eee:	009b      	lsls	r3, r3, #2
  tempreg |= (pWuptCfg->WuptOrder[2]&0x03) << BITP_WUPTMR_SEQORDER_SEQC; /* position C */
   28ef0:	0112      	lsls	r2, r2, #4
   28ef2:	f002 0230 	and.w	r2, r2, #48	; 0x30
  tempreg |= (pWuptCfg->WuptOrder[1]&0x03) << BITP_WUPTMR_SEQORDER_SEQB; /* position B */
   28ef6:	f003 030c 	and.w	r3, r3, #12
  tempreg |= (pWuptCfg->WuptOrder[2]&0x03) << BITP_WUPTMR_SEQORDER_SEQC; /* position C */
   28efa:	4313      	orrs	r3, r2
  tempreg |= (pWuptCfg->WuptOrder[0]&0x03) << BITP_WUPTMR_SEQORDER_SEQA; /* position A */
   28efc:	6862      	ldr	r2, [r4, #4]
   28efe:	f002 0203 	and.w	r2, r2, #3
  tempreg |= (pWuptCfg->WuptOrder[2]&0x03) << BITP_WUPTMR_SEQORDER_SEQC; /* position C */
   28f02:	4313      	orrs	r3, r2
  tempreg |= (pWuptCfg->WuptOrder[3]&0x03) << BITP_WUPTMR_SEQORDER_SEQD; /* position D */
   28f04:	6922      	ldr	r2, [r4, #16]
   28f06:	0192      	lsls	r2, r2, #6
  tempreg |= (pWuptCfg->WuptOrder[4]&0x03) << BITP_WUPTMR_SEQORDER_SEQE; /* position E */
   28f08:	0200      	lsls	r0, r0, #8
  tempreg |= (pWuptCfg->WuptOrder[3]&0x03) << BITP_WUPTMR_SEQORDER_SEQD; /* position D */
   28f0a:	b2d2      	uxtb	r2, r2
   28f0c:	431a      	orrs	r2, r3
  tempreg |= (pWuptCfg->WuptOrder[4]&0x03) << BITP_WUPTMR_SEQORDER_SEQE; /* position E */
   28f0e:	f400 7140 	and.w	r1, r0, #768	; 0x300
   28f12:	430a      	orrs	r2, r1
  tempreg |= (pWuptCfg->WuptOrder[5]&0x03) << BITP_WUPTMR_SEQORDER_SEQF; /* position F */
   28f14:	69a1      	ldr	r1, [r4, #24]
   28f16:	0289      	lsls	r1, r1, #10
   28f18:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
   28f1c:	4311      	orrs	r1, r2
  tempreg |= (pWuptCfg->WuptOrder[6]&0x03) << BITP_WUPTMR_SEQORDER_SEQG; /* position G */
   28f1e:	69e2      	ldr	r2, [r4, #28]
   28f20:	0312      	lsls	r2, r2, #12
   28f22:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
   28f26:	430a      	orrs	r2, r1
  tempreg |= (pWuptCfg->WuptOrder[7]&0x03) << BITP_WUPTMR_SEQORDER_SEQH; /* position H */
   28f28:	6a21      	ldr	r1, [r4, #32]
   28f2a:	0389      	lsls	r1, r1, #14
   28f2c:	b289      	uxth	r1, r1
  AD5940_WriteReg(REG_WUPTMR_SEQORDER, tempreg);
   28f2e:	4311      	orrs	r1, r2
   28f30:	f640 0004 	movw	r0, #2052	; 0x804
   28f34:	f7e9 fe32 	bl	12b9c <AD5940_WriteReg>
  if(pWuptCfg->WuptEn == bTRUE)
   28f38:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  tempreg |= pWuptCfg->WuptEndSeq << BITP_WUPTMR_CON_ENDSEQ;
   28f3c:	6821      	ldr	r1, [r4, #0]
  if(pWuptCfg->WuptEn == bTRUE)
   28f3e:	1e5a      	subs	r2, r3, #1
   28f40:	4253      	negs	r3, r2
   28f42:	4153      	adcs	r3, r2
}
   28f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WriteReg(REG_WUPTMR_CON, tempreg);
   28f48:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
   28f4c:	f44f 6000 	mov.w	r0, #2048	; 0x800
   28f50:	f7e9 be24 	b.w	12b9c <AD5940_WriteReg>

00028f54 <AD5940_WUPTCtrl>:
{
   28f54:	b510      	push	{r4, lr}
   28f56:	4604      	mov	r4, r0
  tempreg = AD5940_ReadReg(REG_WUPTMR_CON);
   28f58:	f44f 6000 	mov.w	r0, #2048	; 0x800
   28f5c:	f7e9 fe6e 	bl	12c3c <AD5940_ReadReg>
  tempreg &= ~BITM_WUPTMR_CON_EN;
   28f60:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   28f64:	4001      	ands	r1, r0
  if(Enable == bTRUE)
   28f66:	2c01      	cmp	r4, #1
    tempreg |= BITM_WUPTMR_CON_EN;
   28f68:	bf08      	it	eq
   28f6a:	f041 0101 	orreq.w	r1, r1, #1
}
   28f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WriteReg(REG_WUPTMR_CON, tempreg);
   28f72:	f44f 6000 	mov.w	r0, #2048	; 0x800
   28f76:	f7e9 be11 	b.w	12b9c <AD5940_WriteReg>

00028f7a <AD5940_WUPTTime>:
{
   28f7a:	b538      	push	{r3, r4, r5, lr}
   28f7c:	460c      	mov	r4, r1
   28f7e:	4615      	mov	r5, r2
  switch (SeqId)
   28f80:	2803      	cmp	r0, #3
   28f82:	d85a      	bhi.n	2903a <AD5940_WUPTTime+0xc0>
   28f84:	e8df f000 	tbb	[pc, r0]
   28f88:	442f1a02 	.word	0x442f1a02
      AD5940_WriteReg(REG_WUPTMR_SEQ0WUPL, (WakeupTime & 0xFFFF));    
   28f8c:	b291      	uxth	r1, r2
   28f8e:	f640 0008 	movw	r0, #2056	; 0x808
   28f92:	f7e9 fe03 	bl	12b9c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ0WUPH, (WakeupTime & 0xF0000)>>16);
   28f96:	f3c5 4103 	ubfx	r1, r5, #16, #4
   28f9a:	f640 000c 	movw	r0, #2060	; 0x80c
   28f9e:	f7e9 fdfd 	bl	12b9c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ0SLEEPL, (SleepTime & 0xFFFF));    
   28fa2:	b2a1      	uxth	r1, r4
   28fa4:	f44f 6001 	mov.w	r0, #2064	; 0x810
   28fa8:	f7e9 fdf8 	bl	12b9c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ0SLEEPH, (SleepTime & 0xF0000)>>16);
   28fac:	f3c4 4103 	ubfx	r1, r4, #16, #4
   28fb0:	f640 0014 	movw	r0, #2068	; 0x814
      AD5940_WriteReg(REG_WUPTMR_SEQ3SLEEPH, (SleepTime & 0xF0000)>>16);
   28fb4:	f7e9 fdf2 	bl	12b9c <AD5940_WriteReg>
  return AD5940ERR_OK;
   28fb8:	2000      	movs	r0, #0
}
   28fba:	bd38      	pop	{r3, r4, r5, pc}
      AD5940_WriteReg(REG_WUPTMR_SEQ1WUPL, (WakeupTime & 0xFFFF));    
   28fbc:	b291      	uxth	r1, r2
   28fbe:	f640 0018 	movw	r0, #2072	; 0x818
   28fc2:	f7e9 fdeb 	bl	12b9c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ1WUPH, (WakeupTime & 0xF0000)>>16);
   28fc6:	f3c5 4103 	ubfx	r1, r5, #16, #4
   28fca:	f640 001c 	movw	r0, #2076	; 0x81c
   28fce:	f7e9 fde5 	bl	12b9c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ1SLEEPL, (SleepTime & 0xFFFF));    
   28fd2:	b2a1      	uxth	r1, r4
   28fd4:	f44f 6002 	mov.w	r0, #2080	; 0x820
   28fd8:	f7e9 fde0 	bl	12b9c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ1SLEEPH, (SleepTime & 0xF0000)>>16);
   28fdc:	f3c4 4103 	ubfx	r1, r4, #16, #4
   28fe0:	f640 0024 	movw	r0, #2084	; 0x824
   28fe4:	e7e6      	b.n	28fb4 <AD5940_WUPTTime+0x3a>
      AD5940_WriteReg(REG_WUPTMR_SEQ2WUPL, (WakeupTime & 0xFFFF));    
   28fe6:	b291      	uxth	r1, r2
   28fe8:	f640 0028 	movw	r0, #2088	; 0x828
   28fec:	f7e9 fdd6 	bl	12b9c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ2WUPH, (WakeupTime & 0xF0000)>>16);
   28ff0:	f3c5 4103 	ubfx	r1, r5, #16, #4
   28ff4:	f640 002c 	movw	r0, #2092	; 0x82c
   28ff8:	f7e9 fdd0 	bl	12b9c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ2SLEEPL, (SleepTime & 0xFFFF));    
   28ffc:	b2a1      	uxth	r1, r4
   28ffe:	f44f 6003 	mov.w	r0, #2096	; 0x830
   29002:	f7e9 fdcb 	bl	12b9c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ2SLEEPH, (SleepTime & 0xF0000)>>16);
   29006:	f3c4 4103 	ubfx	r1, r4, #16, #4
   2900a:	f640 0034 	movw	r0, #2100	; 0x834
   2900e:	e7d1      	b.n	28fb4 <AD5940_WUPTTime+0x3a>
      AD5940_WriteReg(REG_WUPTMR_SEQ3WUPL, (WakeupTime & 0xFFFF));    
   29010:	b291      	uxth	r1, r2
   29012:	f640 0038 	movw	r0, #2104	; 0x838
   29016:	f7e9 fdc1 	bl	12b9c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ3WUPH, (WakeupTime & 0xF0000)>>16);
   2901a:	f3c5 4103 	ubfx	r1, r5, #16, #4
   2901e:	f640 003c 	movw	r0, #2108	; 0x83c
   29022:	f7e9 fdbb 	bl	12b9c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ3SLEEPL, (SleepTime & 0xFFFF));    
   29026:	b2a1      	uxth	r1, r4
   29028:	f44f 6004 	mov.w	r0, #2112	; 0x840
   2902c:	f7e9 fdb6 	bl	12b9c <AD5940_WriteReg>
      AD5940_WriteReg(REG_WUPTMR_SEQ3SLEEPH, (SleepTime & 0xF0000)>>16);
   29030:	f3c4 4103 	ubfx	r1, r4, #16, #4
   29034:	f640 0044 	movw	r0, #2116	; 0x844
   29038:	e7bc      	b.n	28fb4 <AD5940_WUPTTime+0x3a>
  switch (SeqId)
   2903a:	f06f 0001 	mvn.w	r0, #1
   2903e:	e7bc      	b.n	28fba <AD5940_WUPTTime+0x40>

00029040 <AD5940_HFOSC32MHzCtrl>:
{
   29040:	b538      	push	{r3, r4, r5, lr}
   29042:	4605      	mov	r5, r0
  RdCLKEN1 = AD5940_ReadReg(REG_AFECON_CLKEN1);
   29044:	f44f 6082 	mov.w	r0, #1040	; 0x410
   29048:	f7e9 fdf8 	bl	12c3c <AD5940_ReadReg>
  RdCLKEN1 |= (bit8<<8)|(bit9<<9);
   2904c:	0844      	lsrs	r4, r0, #1
   2904e:	0041      	lsls	r1, r0, #1
   29050:	f401 7100 	and.w	r1, r1, #512	; 0x200
   29054:	f404 7480 	and.w	r4, r4, #256	; 0x100
  RdCLKEN1 = RdCLKEN1&0xff;
   29058:	b2c3      	uxtb	r3, r0
  RdCLKEN1 |= (bit8<<8)|(bit9<<9);
   2905a:	430c      	orrs	r4, r1
   2905c:	431c      	orrs	r4, r3
  AD5940_WriteReg(REG_AFECON_CLKEN1,RdCLKEN1|BITM_AFECON_CLKEN1_ACLKDIS); /* Disable ACLK during clock changing */
   2905e:	f044 0120 	orr.w	r1, r4, #32
   29062:	f44f 6082 	mov.w	r0, #1040	; 0x410
   29066:	f7e9 fd99 	bl	12b9c <AD5940_WriteReg>
  RdHPOSCCON = AD5940_ReadReg(REG_AFE_HPOSCCON); 
   2906a:	f242 00bc 	movw	r0, #8380	; 0x20bc
   2906e:	f7e9 fde5 	bl	12c3c <AD5940_ReadReg>
  if(Mode32MHz == bTRUE)
   29072:	2d01      	cmp	r5, #1
   29074:	d113      	bne.n	2909e <AD5940_HFOSC32MHzCtrl+0x5e>
    AD5940_WriteReg(REG_AFE_HPOSCCON,RdHPOSCCON&(~BITM_AFE_HPOSCCON_CLK32MHZEN)); /* Enable 32MHz output(bit definition-0: 32MHz, 1: 16MHz) */  
   29076:	f020 0104 	bic.w	r1, r0, #4
   2907a:	f242 00bc 	movw	r0, #8380	; 0x20bc
   2907e:	f7e9 fd8d 	bl	12b9c <AD5940_WriteReg>
    while((AD5940_ReadReg(REG_ALLON_OSCCON)&BITM_ALLON_OSCCON_HFOSCOK) == 0); /* Wait for clock ready */
   29082:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   29086:	f7e9 fdd9 	bl	12c3c <AD5940_ReadReg>
   2908a:	0582      	lsls	r2, r0, #22
   2908c:	d5f9      	bpl.n	29082 <AD5940_HFOSC32MHzCtrl+0x42>
  AD5940_WriteReg(REG_AFECON_CLKEN1,RdCLKEN1&(~BITM_AFECON_CLKEN1_ACLKDIS)); /* Enable ACLK */
   2908e:	f024 0120 	bic.w	r1, r4, #32
   29092:	f44f 6082 	mov.w	r0, #1040	; 0x410
}
   29096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  AD5940_WriteReg(REG_AFECON_CLKEN1,RdCLKEN1&(~BITM_AFECON_CLKEN1_ACLKDIS)); /* Enable ACLK */
   2909a:	f7e9 bd7f 	b.w	12b9c <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_HPOSCCON,RdHPOSCCON|BITM_AFE_HPOSCCON_CLK32MHZEN); /* Enable 16MHz output(bit definition-0: 32MHz, 1: 16MHz) */       
   2909e:	f040 0104 	orr.w	r1, r0, #4
   290a2:	f242 00bc 	movw	r0, #8380	; 0x20bc
   290a6:	f7e9 fd79 	bl	12b9c <AD5940_WriteReg>
    while((AD5940_ReadReg(REG_ALLON_OSCCON)&BITM_ALLON_OSCCON_HFOSCOK) == 0); /* Wait for clock ready */
   290aa:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   290ae:	f7e9 fdc5 	bl	12c3c <AD5940_ReadReg>
   290b2:	0583      	lsls	r3, r0, #22
   290b4:	d5f9      	bpl.n	290aa <AD5940_HFOSC32MHzCtrl+0x6a>
   290b6:	e7ea      	b.n	2908e <AD5940_HFOSC32MHzCtrl+0x4e>

000290b8 <AD5940_CLKCfg>:
{
   290b8:	b538      	push	{r3, r4, r5, lr}
   290ba:	4605      	mov	r5, r0
  reg_osccon = AD5940_ReadReg(REG_ALLON_OSCCON);
   290bc:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   290c0:	f7e9 fdbc 	bl	12c3c <AD5940_ReadReg>
  if(pClkCfg->HFXTALEn == bTRUE)
   290c4:	7ceb      	ldrb	r3, [r5, #19]
   290c6:	2b01      	cmp	r3, #1
  reg_osccon = AD5940_ReadReg(REG_ALLON_OSCCON);
   290c8:	4604      	mov	r4, r0
  if(pClkCfg->HFXTALEn == bTRUE)
   290ca:	d112      	bne.n	290f2 <AD5940_CLKCfg+0x3a>
    reg_osccon |= BITM_ALLON_OSCCON_HFXTALEN;
   290cc:	f040 0404 	orr.w	r4, r0, #4
    AD5940_WriteReg(REG_ALLON_OSCKEY,KEY_OSCCON); /* Write Key */
   290d0:	f64c 3114 	movw	r1, #51988	; 0xcb14
   290d4:	f640 200c 	movw	r0, #2572	; 0xa0c
   290d8:	f7e9 fd60 	bl	12b9c <AD5940_WriteReg>
    AD5940_WriteReg(REG_ALLON_OSCCON, reg_osccon); /* Enable HFXTAL */
   290dc:	4621      	mov	r1, r4
   290de:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   290e2:	f7e9 fd5b 	bl	12b9c <AD5940_WriteReg>
    while((AD5940_ReadReg(REG_ALLON_OSCCON)&BITM_ALLON_OSCCON_HFXTALOK) == 0); /* Wait for clock ready */
   290e6:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   290ea:	f7e9 fda7 	bl	12c3c <AD5940_ReadReg>
   290ee:	0541      	lsls	r1, r0, #21
   290f0:	d5f9      	bpl.n	290e6 <AD5940_CLKCfg+0x2e>
  if(pClkCfg->HFOSCEn == bTRUE)
   290f2:	7c2b      	ldrb	r3, [r5, #16]
   290f4:	2b01      	cmp	r3, #1
   290f6:	d118      	bne.n	2912a <AD5940_CLKCfg+0x72>
    AD5940_WriteReg(REG_ALLON_OSCKEY,KEY_OSCCON); /* Write Key */
   290f8:	f64c 3114 	movw	r1, #51988	; 0xcb14
   290fc:	f640 200c 	movw	r0, #2572	; 0xa0c
    reg_osccon |= BITM_ALLON_OSCCON_HFOSCEN;
   29100:	f044 0402 	orr.w	r4, r4, #2
    AD5940_WriteReg(REG_ALLON_OSCKEY,KEY_OSCCON); /* Write Key */
   29104:	f7e9 fd4a 	bl	12b9c <AD5940_WriteReg>
    AD5940_WriteReg(REG_ALLON_OSCCON, reg_osccon); /* Enable HFOSC */
   29108:	4621      	mov	r1, r4
   2910a:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   2910e:	f7e9 fd45 	bl	12b9c <AD5940_WriteReg>
    while((AD5940_ReadReg(REG_ALLON_OSCCON)&BITM_ALLON_OSCCON_HFOSCOK) == 0); /* Wait for clock ready */
   29112:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   29116:	f7e9 fd91 	bl	12c3c <AD5940_ReadReg>
   2911a:	0582      	lsls	r2, r0, #22
   2911c:	d5f9      	bpl.n	29112 <AD5940_CLKCfg+0x5a>
    if(pClkCfg->HfOSC32MHzMode  == bTRUE)
   2911e:	7c68      	ldrb	r0, [r5, #17]
   29120:	2801      	cmp	r0, #1
      AD5940_HFOSC32MHzCtrl(bFALSE);
   29122:	bf18      	it	ne
   29124:	2000      	movne	r0, #0
   29126:	f7ff ff8b 	bl	29040 <AD5940_HFOSC32MHzCtrl>
  if(pClkCfg->LFOSCEn == bTRUE)
   2912a:	7cab      	ldrb	r3, [r5, #18]
   2912c:	2b01      	cmp	r3, #1
   2912e:	d112      	bne.n	29156 <AD5940_CLKCfg+0x9e>
    AD5940_WriteReg(REG_ALLON_OSCKEY,KEY_OSCCON); /* Write Key */  
   29130:	f64c 3114 	movw	r1, #51988	; 0xcb14
   29134:	f640 200c 	movw	r0, #2572	; 0xa0c
    reg_osccon |= BITM_ALLON_OSCCON_LFOSCEN;  
   29138:	f044 0401 	orr.w	r4, r4, #1
    AD5940_WriteReg(REG_ALLON_OSCKEY,KEY_OSCCON); /* Write Key */  
   2913c:	f7e9 fd2e 	bl	12b9c <AD5940_WriteReg>
    AD5940_WriteReg(REG_ALLON_OSCCON, reg_osccon); /* Enable LFOSC */
   29140:	4621      	mov	r1, r4
   29142:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   29146:	f7e9 fd29 	bl	12b9c <AD5940_WriteReg>
    while((AD5940_ReadReg(REG_ALLON_OSCCON)&BITM_ALLON_OSCCON_LFOSCOK) == 0); /* Wait for clock ready */
   2914a:	f44f 6021 	mov.w	r0, #2576	; 0xa10
   2914e:	f7e9 fd75 	bl	12c3c <AD5940_ReadReg>
   29152:	05c3      	lsls	r3, r0, #23
   29154:	d5f9      	bpl.n	2914a <AD5940_CLKCfg+0x92>
  tempreg |= (pClkCfg->ADCClkDiv&0xf) << BITP_AFECON_CLKCON0_ADCCLKDIV;
   29156:	68eb      	ldr	r3, [r5, #12]
  tempreg = pClkCfg->SysClkDiv&0x3f;
   29158:	68a9      	ldr	r1, [r5, #8]
  tempreg |= (pClkCfg->ADCClkDiv&0xf) << BITP_AFECON_CLKCON0_ADCCLKDIV;
   2915a:	019b      	lsls	r3, r3, #6
   2915c:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
  tempreg = pClkCfg->SysClkDiv&0x3f;
   29160:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  AD5940_WriteReg(REG_AFECON_CLKCON0, tempreg);
   29164:	4319      	orrs	r1, r3
   29166:	f44f 6081 	mov.w	r0, #1032	; 0x408
   2916a:	f7e9 fd17 	bl	12b9c <AD5940_WriteReg>
  AD5940_Delay10us(10);
   2916e:	200a      	movs	r0, #10
   29170:	f000 f8ad 	bl	292ce <AD5940_Delay10us>
  tempreg |= pClkCfg->ADCCLkSrc << BITP_AFECON_CLKSEL_ADCCLKSEL;
   29174:	e9d5 3100 	ldrd	r3, r1, [r5]
  AD5940_WriteReg(REG_AFECON_CLKSEL, tempreg);
   29178:	f240 4014 	movw	r0, #1044	; 0x414
   2917c:	ea43 0181 	orr.w	r1, r3, r1, lsl #2
   29180:	f7e9 fd0c 	bl	12b9c <AD5940_WriteReg>
  if(pClkCfg->HFXTALEn == bFALSE)
   29184:	7ceb      	ldrb	r3, [r5, #19]
   29186:	b90b      	cbnz	r3, 2918c <AD5940_CLKCfg+0xd4>
    reg_osccon &= ~BITM_ALLON_OSCCON_HFXTALEN;
   29188:	f024 0404 	bic.w	r4, r4, #4
  if(pClkCfg->HFOSCEn == bFALSE)
   2918c:	7c2b      	ldrb	r3, [r5, #16]
   2918e:	b90b      	cbnz	r3, 29194 <AD5940_CLKCfg+0xdc>
    reg_osccon &= ~BITM_ALLON_OSCCON_HFOSCEN;
   29190:	f024 0402 	bic.w	r4, r4, #2
  if(pClkCfg->LFOSCEn == bFALSE)
   29194:	7cab      	ldrb	r3, [r5, #18]
   29196:	b90b      	cbnz	r3, 2919c <AD5940_CLKCfg+0xe4>
    reg_osccon &= ~BITM_ALLON_OSCCON_LFOSCEN;
   29198:	f024 0401 	bic.w	r4, r4, #1
  AD5940_WriteReg(REG_ALLON_OSCKEY, KEY_OSCCON); /* Write Key */
   2919c:	f64c 3114 	movw	r1, #51988	; 0xcb14
   291a0:	f640 200c 	movw	r0, #2572	; 0xa0c
   291a4:	f7e9 fcfa 	bl	12b9c <AD5940_WriteReg>
  AD5940_WriteReg(REG_ALLON_OSCCON, reg_osccon);
   291a8:	4621      	mov	r1, r4
   291aa:	f44f 6021 	mov.w	r0, #2576	; 0xa10
}
   291ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  AD5940_WriteReg(REG_ALLON_OSCCON, reg_osccon);
   291b2:	f7e9 bcf3 	b.w	12b9c <AD5940_WriteReg>

000291b6 <AD5940_INTCCfg>:
{
   291b6:	b570      	push	{r4, r5, r6, lr}
  tempreg = AD5940_ReadReg(regaddr);
   291b8:	f243 030c 	movw	r3, #12300	; 0x300c
   291bc:	f243 0408 	movw	r4, #12296	; 0x3008
   291c0:	2801      	cmp	r0, #1
   291c2:	bf08      	it	eq
   291c4:	461c      	moveq	r4, r3
   291c6:	4620      	mov	r0, r4
{
   291c8:	460d      	mov	r5, r1
   291ca:	4616      	mov	r6, r2
  tempreg = AD5940_ReadReg(regaddr);
   291cc:	f7e9 fd36 	bl	12c3c <AD5940_ReadReg>
  if(State == bTRUE)
   291d0:	2e01      	cmp	r6, #1
    tempreg |= AFEIntSrc;    /* Enable this interrupt */
   291d2:	bf0c      	ite	eq
   291d4:	ea40 0105 	orreq.w	r1, r0, r5
    tempreg &= ~(AFEIntSrc); /* Disable this interrupt  */
   291d8:	ea20 0105 	bicne.w	r1, r0, r5
  AD5940_WriteReg(regaddr,tempreg);
   291dc:	4620      	mov	r0, r4
}
   291de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  AD5940_WriteReg(regaddr,tempreg);
   291e2:	f7e9 bcdb 	b.w	12b9c <AD5940_WriteReg>

000291e6 <AD5940_INTCClrFlag>:
{
   291e6:	4601      	mov	r1, r0
  AD5940_WriteReg(REG_INTC_INTCCLR,AfeIntSrcSel);
   291e8:	f243 0004 	movw	r0, #12292	; 0x3004
   291ec:	f7e9 bcd6 	b.w	12b9c <AD5940_WriteReg>

000291f0 <AD5940_INTCTestFlag>:
  tempreg = AD5940_ReadReg(regaddr);
   291f0:	f243 0210 	movw	r2, #12304	; 0x3010
   291f4:	f243 0314 	movw	r3, #12308	; 0x3014
{
   291f8:	b510      	push	{r4, lr}
  tempreg = AD5940_ReadReg(regaddr);
   291fa:	2800      	cmp	r0, #0
   291fc:	bf0c      	ite	eq
   291fe:	4610      	moveq	r0, r2
   29200:	4618      	movne	r0, r3
{
   29202:	460c      	mov	r4, r1
  tempreg = AD5940_ReadReg(regaddr);
   29204:	f7e9 fd1a 	bl	12c3c <AD5940_ReadReg>
  if(tempreg & AfeIntSrcSel)
   29208:	4220      	tst	r0, r4
}
   2920a:	bf14      	ite	ne
   2920c:	2001      	movne	r0, #1
   2920e:	2000      	moveq	r0, #0
   29210:	bd10      	pop	{r4, pc}

00029212 <AD5940_AGPIOFuncCfg>:
{
   29212:	4601      	mov	r1, r0
   AD5940_WriteReg(REG_AGPIO_GP0CON,uiCfgSet);
   29214:	2000      	movs	r0, #0
   29216:	f7e9 bcc1 	b.w	12b9c <AD5940_WriteReg>

0002921a <AD5940_AGPIOOen>:
{
   2921a:	4601      	mov	r1, r0
   AD5940_WriteReg(REG_AGPIO_GP0OEN,uiPinSet);
   2921c:	2004      	movs	r0, #4
   2921e:	f7e9 bcbd 	b.w	12b9c <AD5940_WriteReg>

00029222 <AD5940_AGPIOIen>:
{
   29222:	4601      	mov	r1, r0
   AD5940_WriteReg(REG_AGPIO_GP0IEN,uiPinSet);
   29224:	200c      	movs	r0, #12
   29226:	f7e9 bcb9 	b.w	12b9c <AD5940_WriteReg>

0002922a <AD5940_AGPIOPen>:
{
   2922a:	4601      	mov	r1, r0
   AD5940_WriteReg(REG_AGPIO_GP0PE,uiPinSet);
   2922c:	2008      	movs	r0, #8
   2922e:	f7e9 bcb5 	b.w	12b9c <AD5940_WriteReg>

00029232 <AD5940_AGPIOCfg>:
{
   29232:	b510      	push	{r4, lr}
   29234:	4604      	mov	r4, r0
  AD5940_AGPIOFuncCfg(pAgpioCfg->FuncSet);
   29236:	6800      	ldr	r0, [r0, #0]
   29238:	f7ff ffeb 	bl	29212 <AD5940_AGPIOFuncCfg>
  AD5940_AGPIOOen(pAgpioCfg->OutputEnSet);
   2923c:	6860      	ldr	r0, [r4, #4]
   2923e:	f7ff ffec 	bl	2921a <AD5940_AGPIOOen>
  AD5940_AGPIOIen(pAgpioCfg->InputEnSet);
   29242:	68a0      	ldr	r0, [r4, #8]
   29244:	f7ff ffed 	bl	29222 <AD5940_AGPIOIen>
  AD5940_AGPIOPen(pAgpioCfg->PullEnSet);
   29248:	68e0      	ldr	r0, [r4, #12]
   2924a:	f7ff ffee 	bl	2922a <AD5940_AGPIOPen>
  AD5940_WriteReg(REG_AGPIO_GP0OUT, pAgpioCfg->OutVal);
   2924e:	6921      	ldr	r1, [r4, #16]
   29250:	2014      	movs	r0, #20
}
   29252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AD5940_WriteReg(REG_AGPIO_GP0OUT, pAgpioCfg->OutVal);
   29256:	f7e9 bca1 	b.w	12b9c <AD5940_WriteReg>

0002925a <AD5940_SleepKeyCtrlS>:
{
   2925a:	4601      	mov	r1, r0
  AD5940_WriteReg(REG_AFE_SEQSLPLOCK, SlpKey);
   2925c:	f242 1018 	movw	r0, #8472	; 0x2118
   29260:	f7e9 bc9c 	b.w	12b9c <AD5940_WriteReg>

00029264 <AD5940_EnterSleepS>:
{
   29264:	b508      	push	{r3, lr}
  AD5940_WriteReg(REG_AFE_SEQTRGSLP, 0);
   29266:	2100      	movs	r1, #0
   29268:	f242 101c 	movw	r0, #8476	; 0x211c
   2926c:	f7e9 fc96 	bl	12b9c <AD5940_WriteReg>
}
   29270:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  AD5940_WriteReg(REG_AFE_SEQTRGSLP, 1);
   29274:	2101      	movs	r1, #1
   29276:	f242 101c 	movw	r0, #8476	; 0x211c
   2927a:	f7e9 bc8f 	b.w	12b9c <AD5940_WriteReg>

0002927e <AD5940_HWReset>:
{
   2927e:	b508      	push	{r3, lr}
  AD5940_RstClr();
   29280:	f000 f834 	bl	292ec <AD5940_RstClr>
  AD5940_Delay10us(200); /* Delay some time */
   29284:	20c8      	movs	r0, #200	; 0xc8
   29286:	f000 f822 	bl	292ce <AD5940_Delay10us>
  AD5940_RstSet();
   2928a:	f000 f833 	bl	292f4 <AD5940_RstSet>
}
   2928e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  AD5940_Delay10us(500); /* AD5940 need some time to exit reset status. 200us looks good. */
   29292:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   29296:	f000 b81a 	b.w	292ce <AD5940_Delay10us>

0002929a <gpio_pin_configure>:

extern int z_impl_gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
{
   2929a:	b4f0      	push	{r4, r5, r6, r7}
   2929c:	4613      	mov	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   2929e:	02d4      	lsls	r4, r2, #11
	const struct gpio_driver_api *api =
   292a0:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
   292a2:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   292a4:	d506      	bpl.n	292b4 <gpio_pin_configure+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   292a6:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   292aa:	d003      	beq.n	292b4 <gpio_pin_configure+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   292ac:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   292ae:	bf48      	it	mi
   292b0:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   292b4:	6834      	ldr	r4, [r6, #0]
   292b6:	2501      	movs	r5, #1
   292b8:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   292ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   292be:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   292c0:	bf4c      	ite	mi
   292c2:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   292c4:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
   292c6:	683b      	ldr	r3, [r7, #0]
   292c8:	6034      	str	r4, [r6, #0]
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
}
   292ca:	bcf0      	pop	{r4, r5, r6, r7}
   292cc:	4718      	bx	r3

000292ce <AD5940_Delay10us>:
    uint32_t time_total_us = time * 10 ;
   292ce:	2801      	cmp	r0, #1
   292d0:	bf38      	it	cc
   292d2:	2001      	movcc	r0, #1
	return z_impl_k_usleep(us);
   292d4:	230a      	movs	r3, #10
   292d6:	4358      	muls	r0, r3
   292d8:	f7fa be2e 	b.w	23f38 <z_impl_k_usleep>

000292dc <AD5940_CsClr>:
    gpio_pin_set(gpio_dev, CS_PIN, 0);
   292dc:	2100      	movs	r1, #0
   292de:	201f      	movs	r0, #31
   292e0:	f7ea b9b2 	b.w	13648 <gpio_pin_set.constprop.0.isra.0>

000292e4 <AD5940_CsSet>:
    gpio_pin_set(gpio_dev, CS_PIN, 1);
   292e4:	2101      	movs	r1, #1
   292e6:	201f      	movs	r0, #31
   292e8:	f7ea b9ae 	b.w	13648 <gpio_pin_set.constprop.0.isra.0>

000292ec <AD5940_RstClr>:
    gpio_pin_set(gpio_dev, RESET_PIN, 0);
   292ec:	2100      	movs	r1, #0
   292ee:	201e      	movs	r0, #30
   292f0:	f7ea b9aa 	b.w	13648 <gpio_pin_set.constprop.0.isra.0>

000292f4 <AD5940_RstSet>:
    gpio_pin_set(gpio_dev, RESET_PIN, 1);
   292f4:	2101      	movs	r1, #1
   292f6:	201e      	movs	r0, #30
   292f8:	f7ea b9a6 	b.w	13648 <gpio_pin_set.constprop.0.isra.0>

000292fc <ct_ccc_cfg_changed>:
}
   292fc:	4770      	bx	lr

000292fe <read_ct>:
{
   292fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   29300:	240a      	movs	r4, #10
   29302:	9402      	str	r4, [sp, #8]
   29304:	68cc      	ldr	r4, [r1, #12]
   29306:	9401      	str	r4, [sp, #4]
   29308:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   2930c:	9400      	str	r4, [sp, #0]
   2930e:	f002 fc97 	bl	2bc40 <bt_gatt_attr_read>
}
   29312:	b004      	add	sp, #16
   29314:	bd10      	pop	{r4, pc}

00029316 <AppCHRONOAMPDataProcess.isra.0>:
static AD5940Err AppCHRONOAMPDataProcess(int32_t * const pData, uint32_t *pDataCount)
   29316:	b538      	push	{r3, r4, r5, lr}
   29318:	4604      	mov	r4, r0
   2931a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
  for(i=0;i<datacount;i++)
   2931e:	42ac      	cmp	r4, r5
   29320:	d100      	bne.n	29324 <AppCHRONOAMPDataProcess.isra.0+0xe>
}
   29322:	bd38      	pop	{r3, r4, r5, pc}
    pData[i] &= 0xffff;
   29324:	8820      	ldrh	r0, [r4, #0]
   29326:	f844 0b04 	str.w	r0, [r4], #4
    pOut[i] = AppCHRONOAMPCalcCurrent(pData[i]);
   2932a:	f7ea fe01 	bl	13f30 <AppCHRONOAMPCalcCurrent>
   2932e:	f844 0c04 	str.w	r0, [r4, #-4]
  for(i=0;i<datacount;i++)
   29332:	e7f4      	b.n	2931e <AppCHRONOAMPDataProcess.isra.0+0x8>

00029334 <cbpprintf_external>:
{
   29334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29338:	4607      	mov	r7, r0
   2933a:	460e      	mov	r6, r1
   2933c:	4690      	mov	r8, r2
	if (buf == NULL) {
   2933e:	461d      	mov	r5, r3
   29340:	b30b      	cbz	r3, 29386 <cbpprintf_external+0x52>
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
   29342:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   29344:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = hdr->hdr.desc.str_cnt;
   29346:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
   2934a:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
   2934c:	441c      	add	r4, r3
   2934e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   29352:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
   29354:	f04f 0900 	mov.w	r9, #0
   29358:	45d1      	cmp	r9, sl
   2935a:	d308      	bcc.n	2936e <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
   2935c:	686a      	ldr	r2, [r5, #4]
   2935e:	f105 0308 	add.w	r3, r5, #8
   29362:	4641      	mov	r1, r8
   29364:	4638      	mov	r0, r7
   29366:	46b4      	mov	ip, r6
}
   29368:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   2936c:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   2936e:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   29372:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   29376:	4620      	mov	r0, r4
   29378:	f7e3 ffb1 	bl	d2de <strlen>
   2937c:	3001      	adds	r0, #1
   2937e:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   29380:	f109 0901 	add.w	r9, r9, #1
   29384:	e7e8      	b.n	29358 <cbpprintf_external+0x24>
}
   29386:	f06f 0015 	mvn.w	r0, #21
   2938a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002938e <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   2938e:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   29390:	2364      	movs	r3, #100	; 0x64
{
   29392:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   29394:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   29396:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   29398:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   2939c:	b111      	cbz	r1, 293a4 <u8_to_dec+0x16>
   2939e:	3d01      	subs	r5, #1
   293a0:	d101      	bne.n	293a6 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   293a2:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   293a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   293a6:	429a      	cmp	r2, r3
		digit = value / divisor;
   293a8:	fbb2 f7f3 	udiv	r7, r2, r3
   293ac:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   293ae:	d202      	bcs.n	293b6 <u8_to_dec+0x28>
   293b0:	2b01      	cmp	r3, #1
   293b2:	d000      	beq.n	293b6 <u8_to_dec+0x28>
   293b4:	b130      	cbz	r0, 293c4 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   293b6:	3630      	adds	r6, #48	; 0x30
			buflen--;
   293b8:	3901      	subs	r1, #1
			num_digits++;
   293ba:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   293bc:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   293c0:	b2c9      	uxtb	r1, r1
			num_digits++;
   293c2:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   293c4:	fb03 2217 	mls	r2, r3, r7, r2
   293c8:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   293ca:	fbb3 f3fc 	udiv	r3, r3, ip
   293ce:	e7e5      	b.n	2939c <u8_to_dec+0xe>

000293d0 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   293d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   293d4:	b2db      	uxtb	r3, r3
   293d6:	2b09      	cmp	r3, #9
   293d8:	d802      	bhi.n	293e0 <char2hex+0x10>
		*x = c - '0';
   293da:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   293dc:	2000      	movs	r0, #0
   293de:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   293e0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   293e4:	2b05      	cmp	r3, #5
   293e6:	d802      	bhi.n	293ee <char2hex+0x1e>
		*x = c - 'a' + 10;
   293e8:	3857      	subs	r0, #87	; 0x57
   293ea:	7008      	strb	r0, [r1, #0]
   293ec:	e7f6      	b.n	293dc <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   293ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   293f2:	2b05      	cmp	r3, #5
   293f4:	d801      	bhi.n	293fa <char2hex+0x2a>
		*x = c - 'A' + 10;
   293f6:	3837      	subs	r0, #55	; 0x37
   293f8:	e7f7      	b.n	293ea <char2hex+0x1a>
		return -EINVAL;
   293fa:	f06f 0015 	mvn.w	r0, #21
}
   293fe:	4770      	bx	lr

00029400 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   29400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29402:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   29404:	f001 0001 	and.w	r0, r1, #1
   29408:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   2940c:	429d      	cmp	r5, r3
   2940e:	ea4f 0651 	mov.w	r6, r1, lsr #1
   29412:	d903      	bls.n	2941c <hex2bin+0x1c>
		return 0;
   29414:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   29416:	4628      	mov	r0, r5
   29418:	b003      	add	sp, #12
   2941a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   2941c:	b158      	cbz	r0, 29436 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   2941e:	7820      	ldrb	r0, [r4, #0]
   29420:	f10d 0107 	add.w	r1, sp, #7
   29424:	f7ff ffd4 	bl	293d0 <char2hex>
   29428:	2800      	cmp	r0, #0
   2942a:	dbf3      	blt.n	29414 <hex2bin+0x14>
		buf[0] = dec;
   2942c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   29430:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   29434:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   29436:	3401      	adds	r4, #1
   29438:	4416      	add	r6, r2
   2943a:	42b2      	cmp	r2, r6
   2943c:	d0eb      	beq.n	29416 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   2943e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   29442:	f10d 0107 	add.w	r1, sp, #7
   29446:	f7ff ffc3 	bl	293d0 <char2hex>
   2944a:	2800      	cmp	r0, #0
   2944c:	dbe2      	blt.n	29414 <hex2bin+0x14>
		buf[i] = dec << 4;
   2944e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   29452:	011b      	lsls	r3, r3, #4
   29454:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   29456:	f814 0b02 	ldrb.w	r0, [r4], #2
   2945a:	f7ff ffb9 	bl	293d0 <char2hex>
   2945e:	2800      	cmp	r0, #0
   29460:	dbd8      	blt.n	29414 <hex2bin+0x14>
		buf[i] += dec;
   29462:	7813      	ldrb	r3, [r2, #0]
   29464:	f89d 1007 	ldrb.w	r1, [sp, #7]
   29468:	440b      	add	r3, r1
   2946a:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2946e:	e7e4      	b.n	2943a <hex2bin+0x3a>

00029470 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   29470:	4603      	mov	r3, r0
   29472:	b140      	cbz	r0, 29486 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   29474:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   29476:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   2947a:	2a02      	cmp	r2, #2
   2947c:	d006      	beq.n	2948c <sys_notify_validate+0x1c>
   2947e:	2a03      	cmp	r2, #3
   29480:	d004      	beq.n	2948c <sys_notify_validate+0x1c>
   29482:	2a01      	cmp	r2, #1
   29484:	d005      	beq.n	29492 <sys_notify_validate+0x22>
		return -EINVAL;
   29486:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   2948a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2948c:	681a      	ldr	r2, [r3, #0]
   2948e:	2a00      	cmp	r2, #0
   29490:	d0f9      	beq.n	29486 <sys_notify_validate+0x16>
		notify->result = 0;
   29492:	2000      	movs	r0, #0
   29494:	6098      	str	r0, [r3, #8]
   29496:	4770      	bx	lr

00029498 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   29498:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2949a:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   2949e:	2a02      	cmp	r2, #2
{
   294a0:	b510      	push	{r4, lr}
   294a2:	4603      	mov	r3, r0
	notify->result = res;
   294a4:	6081      	str	r1, [r0, #8]
	switch (method) {
   294a6:	d00a      	beq.n	294be <sys_notify_finalize+0x26>
   294a8:	2a03      	cmp	r2, #3
   294aa:	d10b      	bne.n	294c4 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   294ac:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   294ae:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   294b0:	2200      	movs	r2, #0
   294b2:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   294b4:	b108      	cbz	r0, 294ba <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   294b6:	f7fb f83d 	bl	24534 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   294ba:	4620      	mov	r0, r4
   294bc:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   294be:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   294c0:	2400      	movs	r4, #0
		break;
   294c2:	e7f5      	b.n	294b0 <sys_notify_finalize+0x18>
	switch (method) {
   294c4:	2400      	movs	r4, #0
   294c6:	4620      	mov	r0, r4
   294c8:	e7f2      	b.n	294b0 <sys_notify_finalize+0x18>

000294ca <arch_printk_char_out>:
}
   294ca:	2000      	movs	r0, #0
   294cc:	4770      	bx	lr

000294ce <str_out>:
{
   294ce:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   294d0:	688a      	ldr	r2, [r1, #8]
   294d2:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   294d4:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   294d6:	b114      	cbz	r4, 294de <str_out+0x10>
   294d8:	684b      	ldr	r3, [r1, #4]
   294da:	4293      	cmp	r3, r2
   294dc:	dc01      	bgt.n	294e2 <str_out+0x14>
		ctx->count++;
   294de:	608d      	str	r5, [r1, #8]
}
   294e0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   294e2:	3b01      	subs	r3, #1
   294e4:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   294e6:	bf08      	it	eq
   294e8:	2200      	moveq	r2, #0
   294ea:	608d      	str	r5, [r1, #8]
   294ec:	bf0c      	ite	eq
   294ee:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   294f0:	54a0      	strbne	r0, [r4, r2]
   294f2:	e7f5      	b.n	294e0 <str_out+0x12>

000294f4 <vprintk>:
		z_log_vprintk(fmt, ap);
   294f4:	f000 bcc8 	b.w	29e88 <z_log_vprintk>

000294f8 <printk>:
{
   294f8:	b40f      	push	{r0, r1, r2, r3}
   294fa:	b507      	push	{r0, r1, r2, lr}
   294fc:	a904      	add	r1, sp, #16
   294fe:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   29502:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   29504:	f000 fcc0 	bl	29e88 <z_log_vprintk>
}
   29508:	b003      	add	sp, #12
   2950a:	f85d eb04 	ldr.w	lr, [sp], #4
   2950e:	b004      	add	sp, #16
   29510:	4770      	bx	lr

00029512 <snprintk>:
{
   29512:	b40c      	push	{r2, r3}
   29514:	b507      	push	{r0, r1, r2, lr}
   29516:	ab04      	add	r3, sp, #16
   29518:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2951c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2951e:	f7eb f931 	bl	14784 <vsnprintk>
}
   29522:	b003      	add	sp, #12
   29524:	f85d eb04 	ldr.w	lr, [sp], #4
   29528:	b002      	add	sp, #8
   2952a:	4770      	bx	lr

0002952c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2952c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   2952e:	f013 0307 	ands.w	r3, r3, #7
   29532:	d105      	bne.n	29540 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   29534:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   29536:	2b00      	cmp	r3, #0
   29538:	bf0c      	ite	eq
   2953a:	2000      	moveq	r0, #0
   2953c:	2003      	movne	r0, #3
   2953e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   29540:	2b02      	cmp	r3, #2
   29542:	d105      	bne.n	29550 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   29544:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   29546:	2b00      	cmp	r3, #0
   29548:	bf14      	ite	ne
   2954a:	2000      	movne	r0, #0
   2954c:	2004      	moveq	r0, #4
   2954e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   29550:	2b01      	cmp	r3, #1
   29552:	d105      	bne.n	29560 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   29554:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   29556:	2b00      	cmp	r3, #0
   29558:	bf0c      	ite	eq
   2955a:	2000      	moveq	r0, #0
   2955c:	2005      	movne	r0, #5
   2955e:	4770      	bx	lr
	int evt = EVT_NOP;
   29560:	2000      	movs	r0, #0
}
   29562:	4770      	bx	lr

00029564 <notify_one>:
{
   29564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29568:	460d      	mov	r5, r1
   2956a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2956c:	4619      	mov	r1, r3
   2956e:	1d28      	adds	r0, r5, #4
{
   29570:	4690      	mov	r8, r2
   29572:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   29574:	f7ff ff90 	bl	29498 <sys_notify_finalize>
	if (cb) {
   29578:	4604      	mov	r4, r0
   2957a:	b138      	cbz	r0, 2958c <notify_one+0x28>
		cb(mgr, cli, state, res);
   2957c:	4633      	mov	r3, r6
   2957e:	4642      	mov	r2, r8
   29580:	4629      	mov	r1, r5
   29582:	4638      	mov	r0, r7
   29584:	46a4      	mov	ip, r4
}
   29586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2958a:	4760      	bx	ip
}
   2958c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029590 <transition_complete>:
{
   29590:	b410      	push	{r4}
	__asm__ volatile(
   29592:	f04f 0440 	mov.w	r4, #64	; 0x40
   29596:	f3ef 8211 	mrs	r2, BASEPRI
   2959a:	f384 8812 	msr	BASEPRI_MAX, r4
   2959e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   295a2:	6141      	str	r1, [r0, #20]
}
   295a4:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   295a6:	2101      	movs	r1, #1
   295a8:	f7eb b902 	b.w	147b0 <process_event>

000295ac <validate_args>:
{
   295ac:	b510      	push	{r4, lr}
   295ae:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   295b0:	b140      	cbz	r0, 295c4 <validate_args+0x18>
   295b2:	b139      	cbz	r1, 295c4 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   295b4:	1d08      	adds	r0, r1, #4
   295b6:	f7ff ff5b 	bl	29470 <sys_notify_validate>
	if ((rv == 0)
   295ba:	b928      	cbnz	r0, 295c8 <validate_args+0x1c>
	    && ((cli->notify.flags
   295bc:	68a3      	ldr	r3, [r4, #8]
   295be:	f033 0303 	bics.w	r3, r3, #3
   295c2:	d001      	beq.n	295c8 <validate_args+0x1c>
		rv = -EINVAL;
   295c4:	f06f 0015 	mvn.w	r0, #21
}
   295c8:	bd10      	pop	{r4, pc}

000295ca <onoff_manager_init>:
{
   295ca:	b538      	push	{r3, r4, r5, lr}
   295cc:	460c      	mov	r4, r1
	if ((mgr == NULL)
   295ce:	4605      	mov	r5, r0
   295d0:	b158      	cbz	r0, 295ea <onoff_manager_init+0x20>
	    || (transitions == NULL)
   295d2:	b151      	cbz	r1, 295ea <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   295d4:	680b      	ldr	r3, [r1, #0]
   295d6:	b143      	cbz	r3, 295ea <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   295d8:	684b      	ldr	r3, [r1, #4]
   295da:	b133      	cbz	r3, 295ea <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   295dc:	221c      	movs	r2, #28
   295de:	2100      	movs	r1, #0
   295e0:	f004 fc1b 	bl	2de1a <memset>
   295e4:	612c      	str	r4, [r5, #16]
	return 0;
   295e6:	2000      	movs	r0, #0
}
   295e8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   295ea:	f06f 0015 	mvn.w	r0, #21
   295ee:	e7fb      	b.n	295e8 <onoff_manager_init+0x1e>

000295f0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   295f0:	b570      	push	{r4, r5, r6, lr}
   295f2:	4604      	mov	r4, r0
   295f4:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   295f6:	f7ff ffd9 	bl	295ac <validate_args>

	if (rv < 0) {
   295fa:	1e05      	subs	r5, r0, #0
   295fc:	db31      	blt.n	29662 <onoff_request+0x72>
   295fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   29602:	f3ef 8111 	mrs	r1, BASEPRI
   29606:	f383 8812 	msr	BASEPRI_MAX, r3
   2960a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   2960e:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   29610:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   29612:	f64f 75ff 	movw	r5, #65535	; 0xffff
   29616:	42ab      	cmp	r3, r5
   29618:	f000 0207 	and.w	r2, r0, #7
   2961c:	d02e      	beq.n	2967c <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   2961e:	2a02      	cmp	r2, #2
   29620:	d10e      	bne.n	29640 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   29622:	3301      	adds	r3, #1
   29624:	8363      	strh	r3, [r4, #26]
	rv = state;
   29626:	4615      	mov	r5, r2
		notify = true;
   29628:	2301      	movs	r3, #1
	__asm__ volatile(
   2962a:	f381 8811 	msr	BASEPRI, r1
   2962e:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   29632:	b1b3      	cbz	r3, 29662 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   29634:	2300      	movs	r3, #0
   29636:	4631      	mov	r1, r6
   29638:	4620      	mov	r0, r4
   2963a:	f7ff ff93 	bl	29564 <notify_one>
   2963e:	e010      	b.n	29662 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   29640:	0783      	lsls	r3, r0, #30
   29642:	d001      	beq.n	29648 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   29644:	2a06      	cmp	r2, #6
   29646:	d10e      	bne.n	29666 <onoff_request+0x76>
	parent->next = child;
   29648:	2300      	movs	r3, #0
   2964a:	6033      	str	r3, [r6, #0]
	return list->tail;
   2964c:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   2964e:	b993      	cbnz	r3, 29676 <onoff_request+0x86>
	list->head = node;
   29650:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   29654:	4615      	mov	r5, r2
   29656:	b962      	cbnz	r2, 29672 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   29658:	460a      	mov	r2, r1
   2965a:	4620      	mov	r0, r4
   2965c:	2102      	movs	r1, #2
   2965e:	f7eb f8a7 	bl	147b0 <process_event>
		}
	}

	return rv;
}
   29662:	4628      	mov	r0, r5
   29664:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   29666:	2a05      	cmp	r2, #5
   29668:	bf0c      	ite	eq
   2966a:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   2966e:	f06f 0504 	mvnne.w	r5, #4
   29672:	2300      	movs	r3, #0
   29674:	e7d9      	b.n	2962a <onoff_request+0x3a>
	parent->next = child;
   29676:	601e      	str	r6, [r3, #0]
	list->tail = node;
   29678:	6066      	str	r6, [r4, #4]
}
   2967a:	e7eb      	b.n	29654 <onoff_request+0x64>
		rv = -EAGAIN;
   2967c:	f06f 050a 	mvn.w	r5, #10
   29680:	e7f7      	b.n	29672 <onoff_request+0x82>

00029682 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   29682:	4604      	mov	r4, r0
   29684:	b508      	push	{r3, lr}
   29686:	4608      	mov	r0, r1
   29688:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2968a:	461a      	mov	r2, r3
   2968c:	47a0      	blx	r4
	return z_impl_z_current_get();
   2968e:	f7fa fc6d 	bl	23f6c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   29692:	f7ed fbcb 	bl	16e2c <z_impl_k_thread_abort>

00029696 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   29696:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2969a:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   2969c:	0840      	lsrs	r0, r0, #1
   2969e:	4770      	bx	lr

000296a0 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   296a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   296a2:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   296a4:	f7ff fff7 	bl	29696 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   296a8:	fab0 f080 	clz	r0, r0
   296ac:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   296b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   296b4:	00ca      	lsls	r2, r1, #3
   296b6:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   296ba:	1d17      	adds	r7, r2, #4
{
   296bc:	460c      	mov	r4, r1
   296be:	3206      	adds	r2, #6
   296c0:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   296c2:	b956      	cbnz	r6, 296da <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   296c4:	2101      	movs	r1, #1
   296c6:	fa01 f000 	lsl.w	r0, r1, r0
   296ca:	68d9      	ldr	r1, [r3, #12]
   296cc:	4301      	orrs	r1, r0
   296ce:	60d9      	str	r1, [r3, #12]
		b->next = c;
   296d0:	f8cc 4010 	str.w	r4, [ip, #16]
   296d4:	53dd      	strh	r5, [r3, r7]
   296d6:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   296d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   296da:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   296dc:	3104      	adds	r1, #4
   296de:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   296e0:	53d8      	strh	r0, [r3, r7]
   296e2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   296e6:	529e      	strh	r6, [r3, r2]
   296e8:	80c5      	strh	r5, [r0, #6]
   296ea:	525d      	strh	r5, [r3, r1]
   296ec:	e7f4      	b.n	296d8 <free_list_add+0x38>

000296ee <free_list_remove_bidx>:
{
   296ee:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   296f0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   296f4:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   296f6:	4299      	cmp	r1, r3
   296f8:	f102 0104 	add.w	r1, r2, #4
   296fc:	d10a      	bne.n	29714 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   296fe:	2301      	movs	r3, #1
   29700:	fa03 f202 	lsl.w	r2, r3, r2
   29704:	68c3      	ldr	r3, [r0, #12]
   29706:	ea23 0302 	bic.w	r3, r3, r2
   2970a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2970c:	2300      	movs	r3, #0
   2970e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   29712:	bd10      	pop	{r4, pc}
   29714:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   29716:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2971a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2971e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   29722:	80cb      	strh	r3, [r1, #6]
   29724:	8082      	strh	r2, [r0, #4]
}
   29726:	e7f4      	b.n	29712 <free_list_remove_bidx+0x24>

00029728 <free_list_remove>:
{
   29728:	b508      	push	{r3, lr}
   2972a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2972c:	f7ff ffb3 	bl	29696 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   29730:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   29734:	f1c2 021f 	rsb	r2, r2, #31
   29738:	4618      	mov	r0, r3
}
   2973a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2973e:	f7ff bfd6 	b.w	296ee <free_list_remove_bidx>

00029742 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   29742:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29746:	fab1 f581 	clz	r5, r1
   2974a:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   2974e:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   29752:	4603      	mov	r3, r0
	if (b->next) {
   29754:	693a      	ldr	r2, [r7, #16]
{
   29756:	460e      	mov	r6, r1
	if (b->next) {
   29758:	b1c2      	cbz	r2, 2978c <alloc_chunk+0x4a>
   2975a:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   2975e:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   29760:	4618      	mov	r0, r3
   29762:	4621      	mov	r1, r4
   29764:	f7ff ff97 	bl	29696 <chunk_size>
   29768:	42b0      	cmp	r0, r6
   2976a:	d306      	bcc.n	2977a <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   2976c:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   2976e:	4618      	mov	r0, r3
   29770:	f7ff ffbd 	bl	296ee <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   29774:	4620      	mov	r0, r4
   29776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2977a:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   2977e:	f1b8 0801 	subs.w	r8, r8, #1
   29782:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   29784:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   29786:	d001      	beq.n	2978c <alloc_chunk+0x4a>
   29788:	4282      	cmp	r2, r0
   2978a:	d1e8      	bne.n	2975e <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2978c:	f1c5 0220 	rsb	r2, r5, #32
   29790:	f04f 34ff 	mov.w	r4, #4294967295
   29794:	4094      	lsls	r4, r2
   29796:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   29798:	4014      	ands	r4, r2
   2979a:	d0eb      	beq.n	29774 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   2979c:	fa94 f2a4 	rbit	r2, r4
   297a0:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   297a4:	1d11      	adds	r1, r2, #4
   297a6:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   297aa:	4621      	mov	r1, r4
   297ac:	e7df      	b.n	2976e <alloc_chunk+0x2c>

000297ae <merge_chunks>:
{
   297ae:	b538      	push	{r3, r4, r5, lr}
   297b0:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   297b2:	f7ff ff70 	bl	29696 <chunk_size>
{
   297b6:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   297b8:	4604      	mov	r4, r0
   297ba:	4611      	mov	r1, r2
   297bc:	4618      	mov	r0, r3
   297be:	f7ff ff6a 	bl	29696 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   297c2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   297c6:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   297c8:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   297ca:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   297cc:	4618      	mov	r0, r3
   297ce:	f7ff ff62 	bl	29696 <chunk_size>
	void *cmem = &buf[c];
   297d2:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   297d4:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   297d8:	bd38      	pop	{r3, r4, r5, pc}

000297da <split_chunks>:
{
   297da:	b538      	push	{r3, r4, r5, lr}
   297dc:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   297de:	f7ff ff5a 	bl	29696 <chunk_size>
{
   297e2:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   297e4:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   297e6:	1a51      	subs	r1, r2, r1
   297e8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   297ec:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   297ee:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   297f0:	8060      	strh	r0, [r4, #2]
   297f2:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   297f6:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   297f8:	8044      	strh	r4, [r0, #2]
   297fa:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   297fe:	4618      	mov	r0, r3
   29800:	4611      	mov	r1, r2
   29802:	f7ff ff48 	bl	29696 <chunk_size>
	void *cmem = &buf[c];
   29806:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   29808:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2980c:	bd38      	pop	{r3, r4, r5, pc}

0002980e <free_chunk>:
{
   2980e:	b538      	push	{r3, r4, r5, lr}
   29810:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   29812:	f7ff ff40 	bl	29696 <chunk_size>
   29816:	460c      	mov	r4, r1
   29818:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2981a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2981e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   29820:	07da      	lsls	r2, r3, #31
   29822:	d40a      	bmi.n	2983a <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   29824:	4628      	mov	r0, r5
   29826:	f7ff ff7f 	bl	29728 <free_list_remove>
	return c + chunk_size(h, c);
   2982a:	4621      	mov	r1, r4
   2982c:	4628      	mov	r0, r5
   2982e:	f7ff ff32 	bl	29696 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   29832:	1822      	adds	r2, r4, r0
   29834:	4628      	mov	r0, r5
   29836:	f7ff ffba 	bl	297ae <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2983a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2983e:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   29840:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   29844:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   29846:	07db      	lsls	r3, r3, #31
   29848:	d40c      	bmi.n	29864 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2984a:	4628      	mov	r0, r5
   2984c:	f7ff ff6c 	bl	29728 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   29850:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   29854:	4622      	mov	r2, r4
   29856:	1a61      	subs	r1, r4, r1
   29858:	4628      	mov	r0, r5
   2985a:	f7ff ffa8 	bl	297ae <merge_chunks>
   2985e:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   29862:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   29864:	4621      	mov	r1, r4
   29866:	4628      	mov	r0, r5
}
   29868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2986c:	f7ff bf18 	b.w	296a0 <free_list_add>

00029870 <sys_heap_free>:
	if (mem == NULL) {
   29870:	b161      	cbz	r1, 2988c <sys_heap_free+0x1c>
   29872:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   29874:	3904      	subs	r1, #4
   29876:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   29878:	f021 0307 	bic.w	r3, r1, #7
   2987c:	4403      	add	r3, r0
	free_chunk(h, c);
   2987e:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   29880:	885a      	ldrh	r2, [r3, #2]
   29882:	f022 0201 	bic.w	r2, r2, #1
   29886:	805a      	strh	r2, [r3, #2]
   29888:	f7ff bfc1 	b.w	2980e <free_chunk>
}
   2988c:	4770      	bx	lr

0002988e <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   2988e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   29890:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   29892:	b909      	cbnz	r1, 29898 <sys_heap_alloc+0xa>
		return NULL;
   29894:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   29896:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   29898:	68ab      	ldr	r3, [r5, #8]
   2989a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2989e:	d9f9      	bls.n	29894 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   298a0:	310b      	adds	r1, #11
   298a2:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   298a4:	4621      	mov	r1, r4
   298a6:	4628      	mov	r0, r5
   298a8:	f7ff ff4b 	bl	29742 <alloc_chunk>
	if (c == 0U) {
   298ac:	4606      	mov	r6, r0
   298ae:	2800      	cmp	r0, #0
   298b0:	d0f0      	beq.n	29894 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   298b2:	4601      	mov	r1, r0
   298b4:	4628      	mov	r0, r5
   298b6:	f7ff feee 	bl	29696 <chunk_size>
   298ba:	42a0      	cmp	r0, r4
   298bc:	d907      	bls.n	298ce <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   298be:	1932      	adds	r2, r6, r4
   298c0:	4628      	mov	r0, r5
   298c2:	f7ff ff8a 	bl	297da <split_chunks>
		free_list_add(h, c + chunk_sz);
   298c6:	4611      	mov	r1, r2
   298c8:	4628      	mov	r0, r5
   298ca:	f7ff fee9 	bl	296a0 <free_list_add>
	void *cmem = &buf[c];
   298ce:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   298d2:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   298d4:	8853      	ldrh	r3, [r2, #2]
   298d6:	f043 0301 	orr.w	r3, r3, #1
   298da:	8053      	strh	r3, [r2, #2]
   298dc:	3004      	adds	r0, #4
	return mem;
   298de:	e7da      	b.n	29896 <sys_heap_alloc+0x8>

000298e0 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   298e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   298e4:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   298e6:	424a      	negs	r2, r1
   298e8:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   298ec:	ea31 0202 	bics.w	r2, r1, r2
{
   298f0:	4603      	mov	r3, r0
	if (align != rew) {
   298f2:	d00a      	beq.n	2990a <sys_heap_aligned_alloc+0x2a>
		return false;
   298f4:	2f04      	cmp	r7, #4
   298f6:	463a      	mov	r2, r7
   298f8:	46b9      	mov	r9, r7
   298fa:	bf28      	it	cs
   298fc:	2204      	movcs	r2, #4
		align -= rew;
   298fe:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   29900:	b974      	cbnz	r4, 29920 <sys_heap_aligned_alloc+0x40>
		return NULL;
   29902:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   29904:	4628      	mov	r0, r5
   29906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   2990a:	2904      	cmp	r1, #4
   2990c:	d804      	bhi.n	29918 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   2990e:	4621      	mov	r1, r4
}
   29910:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   29914:	f7ff bfbb 	b.w	2988e <sys_heap_alloc>
		rew = 0;
   29918:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   2991c:	2204      	movs	r2, #4
   2991e:	e7ef      	b.n	29900 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   29920:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   29922:	68b3      	ldr	r3, [r6, #8]
   29924:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   29928:	d9eb      	bls.n	29902 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2992a:	f104 010b 	add.w	r1, r4, #11
   2992e:	4439      	add	r1, r7
   29930:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   29932:	08c9      	lsrs	r1, r1, #3
   29934:	4630      	mov	r0, r6
   29936:	f7ff ff04 	bl	29742 <alloc_chunk>
	if (c0 == 0) {
   2993a:	4680      	mov	r8, r0
   2993c:	2800      	cmp	r0, #0
   2993e:	d0e0      	beq.n	29902 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   29940:	f109 0504 	add.w	r5, r9, #4
   29944:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   29948:	1e7b      	subs	r3, r7, #1
   2994a:	4435      	add	r5, r6
   2994c:	441d      	add	r5, r3
   2994e:	427f      	negs	r7, r7
   29950:	403d      	ands	r5, r7
   29952:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   29956:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   29958:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2995a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2995c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2995e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   29962:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   29964:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   29968:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   2996c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   29970:	d208      	bcs.n	29984 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   29972:	4601      	mov	r1, r0
   29974:	463a      	mov	r2, r7
   29976:	4630      	mov	r0, r6
   29978:	f7ff ff2f 	bl	297da <split_chunks>
		free_list_add(h, c0);
   2997c:	4641      	mov	r1, r8
   2997e:	4630      	mov	r0, r6
   29980:	f7ff fe8e 	bl	296a0 <free_list_add>
	return c + chunk_size(h, c);
   29984:	4639      	mov	r1, r7
   29986:	4630      	mov	r0, r6
   29988:	f7ff fe85 	bl	29696 <chunk_size>
   2998c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   2998e:	4284      	cmp	r4, r0
   29990:	d207      	bcs.n	299a2 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   29992:	4630      	mov	r0, r6
   29994:	4622      	mov	r2, r4
   29996:	f7ff ff20 	bl	297da <split_chunks>
		free_list_add(h, c_end);
   2999a:	4621      	mov	r1, r4
   2999c:	4630      	mov	r0, r6
   2999e:	f7ff fe7f 	bl	296a0 <free_list_add>
	void *cmem = &buf[c];
   299a2:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   299a6:	8873      	ldrh	r3, [r6, #2]
   299a8:	f043 0301 	orr.w	r3, r3, #1
   299ac:	8073      	strh	r3, [r6, #2]
   299ae:	e7a9      	b.n	29904 <sys_heap_aligned_alloc+0x24>

000299b0 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   299b0:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   299b2:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   299b4:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   299b6:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   299ba:	f021 0107 	bic.w	r1, r1, #7
{
   299be:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   299c0:	1acd      	subs	r5, r1, r3
   299c2:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   299c4:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   299c6:	fab2 f082 	clz	r0, r2
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   299ca:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   299ce:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   299d0:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   299d2:	2600      	movs	r6, #0
   299d4:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   299d6:	f1c0 0020 	rsb	r0, r0, #32
   299da:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   299de:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   299e0:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   299e2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   299e6:	4284      	cmp	r4, r0
   299e8:	d118      	bne.n	29a1c <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   299ea:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   299ec:	f040 0001 	orr.w	r0, r0, #1
   299f0:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   299f2:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   299f6:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   299f8:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   299fa:	801e      	strh	r6, [r3, #0]
   299fc:	8067      	strh	r7, [r4, #2]
   299fe:	195c      	adds	r4, r3, r5
   29a00:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   29a04:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   29a08:	8066      	strh	r6, [r4, #2]
   29a0a:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   29a0c:	8850      	ldrh	r0, [r2, #2]
   29a0e:	f040 0001 	orr.w	r0, r0, #1
   29a12:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   29a14:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   29a16:	4618      	mov	r0, r3
   29a18:	f7ff be42 	b.w	296a0 <free_list_add>
		h->buckets[i].next = 0;
   29a1c:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   29a20:	e7e1      	b.n	299e6 <sys_heap_init+0x36>

00029a22 <outs>:
{
   29a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29a26:	4607      	mov	r7, r0
   29a28:	4688      	mov	r8, r1
   29a2a:	4615      	mov	r5, r2
   29a2c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   29a2e:	4614      	mov	r4, r2
   29a30:	42b4      	cmp	r4, r6
   29a32:	eba4 0005 	sub.w	r0, r4, r5
   29a36:	d302      	bcc.n	29a3e <outs+0x1c>
   29a38:	b93e      	cbnz	r6, 29a4a <outs+0x28>
   29a3a:	7823      	ldrb	r3, [r4, #0]
   29a3c:	b12b      	cbz	r3, 29a4a <outs+0x28>
		int rc = out((int)*sp++, ctx);
   29a3e:	f814 0b01 	ldrb.w	r0, [r4], #1
   29a42:	4641      	mov	r1, r8
   29a44:	47b8      	blx	r7
		if (rc < 0) {
   29a46:	2800      	cmp	r0, #0
   29a48:	daf2      	bge.n	29a30 <outs+0xe>
}
   29a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029a4e <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   29a4e:	b40f      	push	{r0, r1, r2, r3}
   29a50:	b507      	push	{r0, r1, r2, lr}
   29a52:	a904      	add	r1, sp, #16
   29a54:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   29a58:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   29a5a:	f7ff fd4b 	bl	294f4 <vprintk>

	va_end(ap);
}
   29a5e:	b003      	add	sp, #12
   29a60:	f85d eb04 	ldr.w	lr, [sp], #4
   29a64:	b004      	add	sp, #16
   29a66:	4770      	bx	lr

00029a68 <free_space>:
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   29a68:	4602      	mov	r2, r0
   29a6a:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   29a6c:	68c0      	ldr	r0, [r0, #12]
   29a6e:	6814      	ldr	r4, [r2, #0]
   29a70:	42a0      	cmp	r0, r4
   29a72:	d904      	bls.n	29a7e <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   29a74:	3801      	subs	r0, #1
   29a76:	1b00      	subs	r0, r0, r4
   29a78:	6008      	str	r0, [r1, #0]

		return false;
   29a7a:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   29a7c:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   29a7e:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
   29a80:	b918      	cbnz	r0, 29a8a <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   29a82:	3b01      	subs	r3, #1
   29a84:	1b1b      	subs	r3, r3, r4
   29a86:	600b      	str	r3, [r1, #0]
		return false;
   29a88:	e7f8      	b.n	29a7c <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
   29a8a:	1b1b      	subs	r3, r3, r4
   29a8c:	600b      	str	r3, [r1, #0]
	return true;
   29a8e:	2001      	movs	r0, #1
   29a90:	e7f4      	b.n	29a7c <free_space+0x14>

00029a92 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   29a92:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   29a94:	a901      	add	r1, sp, #4
{
   29a96:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   29a98:	f7ff ffe6 	bl	29a68 <free_space>
   29a9c:	b120      	cbz	r0, 29aa8 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   29a9e:	9b01      	ldr	r3, [sp, #4]
   29aa0:	68e2      	ldr	r2, [r4, #12]
   29aa2:	3b01      	subs	r3, #1
   29aa4:	4413      	add	r3, r2
   29aa6:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   29aa8:	9801      	ldr	r0, [sp, #4]
   29aaa:	6a23      	ldr	r3, [r4, #32]
   29aac:	43c0      	mvns	r0, r0
}
   29aae:	4418      	add	r0, r3
   29ab0:	b002      	add	sp, #8
   29ab2:	bd10      	pop	{r4, pc}

00029ab4 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   29ab4:	b510      	push	{r4, lr}
   29ab6:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   29ab8:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   29aba:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   29abc:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   29abe:	07d2      	lsls	r2, r2, #31
   29ac0:	d502      	bpl.n	29ac8 <idx_inc+0x14>
		return i & (buffer->size - 1);
   29ac2:	3b01      	subs	r3, #1
   29ac4:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   29ac6:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   29ac8:	4298      	cmp	r0, r3
   29aca:	bf28      	it	cs
   29acc:	1ac0      	subcs	r0, r0, r3
   29ace:	e7fa      	b.n	29ac6 <idx_inc+0x12>

00029ad0 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   29ad0:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   29ad2:	69c2      	ldr	r2, [r0, #28]
{
   29ad4:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
   29ad6:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   29ad8:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   29ada:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   29ade:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   29ae2:	462a      	mov	r2, r5
   29ae4:	6801      	ldr	r1, [r0, #0]
{
   29ae6:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   29ae8:	f7ff ffe4 	bl	29ab4 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   29aec:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   29aee:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   29af0:	462a      	mov	r2, r5
   29af2:	4620      	mov	r0, r4
   29af4:	f7ff ffde 	bl	29ab4 <idx_inc>
   29af8:	6060      	str	r0, [r4, #4]
}
   29afa:	bd38      	pop	{r3, r4, r5, pc}

00029afc <max_utilization_update>:
{
   29afc:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   29afe:	6903      	ldr	r3, [r0, #16]
   29b00:	075b      	lsls	r3, r3, #29
{
   29b02:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   29b04:	d506      	bpl.n	29b14 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   29b06:	6a45      	ldr	r5, [r0, #36]	; 0x24
   29b08:	f7ff ffc3 	bl	29a92 <get_usage>
   29b0c:	4285      	cmp	r5, r0
   29b0e:	d902      	bls.n	29b16 <max_utilization_update+0x1a>
   29b10:	6a60      	ldr	r0, [r4, #36]	; 0x24
   29b12:	6260      	str	r0, [r4, #36]	; 0x24
}
   29b14:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   29b16:	4620      	mov	r0, r4
   29b18:	f7ff ffbb 	bl	29a92 <get_usage>
   29b1c:	e7f9      	b.n	29b12 <max_utilization_update+0x16>

00029b1e <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   29b1e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   29b22:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   29b26:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
   29b2a:	461f      	mov	r7, r3
	*user_packet = false;
   29b2c:	2300      	movs	r3, #0
   29b2e:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
   29b30:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   29b34:	f003 0303 	and.w	r3, r3, #3
   29b38:	2b02      	cmp	r3, #2
{
   29b3a:	4604      	mov	r4, r0
   29b3c:	468b      	mov	fp, r1
   29b3e:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   29b40:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   29b44:	d103      	bne.n	29b4e <drop_item_locked+0x30>
		return item->skip.len;
   29b46:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   29b4a:	08ad      	lsrs	r5, r5, #2
   29b4c:	d12e      	bne.n	29bac <drop_item_locked+0x8e>
   29b4e:	69a3      	ldr	r3, [r4, #24]
   29b50:	4630      	mov	r0, r6
   29b52:	4798      	blx	r3
   29b54:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   29b56:	f1b8 0f00 	cmp.w	r8, #0
   29b5a:	d036      	beq.n	29bca <drop_item_locked+0xac>
		if (item->hdr.busy) {
   29b5c:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   29b60:	079b      	lsls	r3, r3, #30
   29b62:	d52f      	bpl.n	29bc4 <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   29b64:	f10b 0101 	add.w	r1, fp, #1
   29b68:	4620      	mov	r0, r4
   29b6a:	f7ff ffb1 	bl	29ad0 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   29b6e:	6861      	ldr	r1, [r4, #4]
   29b70:	462a      	mov	r2, r5
   29b72:	4620      	mov	r0, r4
   29b74:	f7ff ff9e 	bl	29ab4 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   29b78:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   29b7a:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   29b7c:	462a      	mov	r2, r5
   29b7e:	4620      	mov	r0, r4
   29b80:	f7ff ff98 	bl	29ab4 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   29b84:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   29b86:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   29b88:	68e1      	ldr	r1, [r4, #12]
   29b8a:	4620      	mov	r0, r4
   29b8c:	f7ff ff92 	bl	29ab4 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   29b90:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   29b92:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
   29b96:	f002 0203 	and.w	r2, r2, #3
   29b9a:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   29b9c:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   29ba0:	d10c      	bne.n	29bbc <drop_item_locked+0x9e>
		return item->skip.len;
   29ba2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   29ba6:	089b      	lsrs	r3, r3, #2
   29ba8:	d008      	beq.n	29bbc <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
   29baa:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   29bac:	68e1      	ldr	r1, [r4, #12]
   29bae:	462a      	mov	r2, r5
   29bb0:	4620      	mov	r0, r4
   29bb2:	f7ff ff7f 	bl	29ab4 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   29bb6:	e9c4 0002 	strd	r0, r0, [r4, #8]
   29bba:	e007      	b.n	29bcc <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
   29bbc:	69a3      	ldr	r3, [r4, #24]
   29bbe:	4630      	mov	r0, r6
   29bc0:	4798      	blx	r3
   29bc2:	4405      	add	r5, r0
			*user_packet = true;
   29bc4:	2301      	movs	r3, #1
   29bc6:	703b      	strb	r3, [r7, #0]
   29bc8:	e7f0      	b.n	29bac <drop_item_locked+0x8e>
		item = NULL;
   29bca:	4646      	mov	r6, r8
	}

	return item;
}
   29bcc:	4630      	mov	r0, r6
   29bce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029bd2 <mpsc_pbuf_init>:
{
   29bd2:	b538      	push	{r3, r4, r5, lr}
   29bd4:	460d      	mov	r5, r1
   29bd6:	4604      	mov	r4, r0
   29bd8:	221c      	movs	r2, #28
   29bda:	2100      	movs	r1, #0
   29bdc:	f004 f91d 	bl	2de1a <memset>
	buffer->get_wlen = cfg->get_wlen;
   29be0:	68eb      	ldr	r3, [r5, #12]
   29be2:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   29be4:	68ab      	ldr	r3, [r5, #8]
	buffer->size = cfg->size;
   29be6:	686a      	ldr	r2, [r5, #4]
	buffer->notify_drop = cfg->notify_drop;
   29be8:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   29bea:	682b      	ldr	r3, [r5, #0]
   29bec:	61e3      	str	r3, [r4, #28]
	buffer->max_usage = 0;
   29bee:	2300      	movs	r3, #0
   29bf0:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->size = cfg->size;
   29bf2:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
   29bf4:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   29bf6:	b122      	cbz	r2, 29c02 <mpsc_pbuf_init+0x30>
   29bf8:	1e51      	subs	r1, r2, #1
   29bfa:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   29bfc:	bf08      	it	eq
   29bfe:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
   29c02:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   29c04:	2201      	movs	r2, #1
   29c06:	f104 0028 	add.w	r0, r4, #40	; 0x28
   29c0a:	2100      	movs	r1, #0
}
   29c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29c10:	f003 bcbf 	b.w	2d592 <z_impl_k_sem_init>

00029c14 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   29c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29c18:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   29c1a:	6a03      	ldr	r3, [r0, #32]
   29c1c:	3b01      	subs	r3, #1
   29c1e:	428b      	cmp	r3, r1
{
   29c20:	b085      	sub	sp, #20
   29c22:	4604      	mov	r4, r0
   29c24:	460f      	mov	r7, r1
   29c26:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
   29c28:	d367      	bcc.n	29cfa <mpsc_pbuf_alloc+0xe6>
	union mpsc_pbuf_generic *dropped_item = NULL;
   29c2a:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
   29c2c:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
   29c2e:	f100 0b28 	add.w	fp, r0, #40	; 0x28
	__asm__ volatile(
   29c32:	f04f 0340 	mov.w	r3, #64	; 0x40
   29c36:	f3ef 8611 	mrs	r6, BASEPRI
   29c3a:	f383 8812 	msr	BASEPRI_MAX, r3
   29c3e:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
   29c42:	a903      	add	r1, sp, #12
   29c44:	4620      	mov	r0, r4
   29c46:	f7ff ff0f 	bl	29a68 <free_space>
		if (free_wlen >= wlen) {
   29c4a:	9903      	ldr	r1, [sp, #12]
   29c4c:	42b9      	cmp	r1, r7
   29c4e:	d324      	bcc.n	29c9a <mpsc_pbuf_alloc+0x86>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   29c50:	6821      	ldr	r1, [r4, #0]
			item =
   29c52:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   29c54:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
   29c58:	f022 0203 	bic.w	r2, r2, #3
   29c5c:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   29c60:	4620      	mov	r0, r4
   29c62:	463a      	mov	r2, r7
			item =
   29c64:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
   29c68:	f7ff ff24 	bl	29ab4 <idx_inc>
		cont = false;
   29c6c:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
   29c6e:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   29c70:	f386 8811 	msr	BASEPRI, r6
   29c74:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   29c78:	2b00      	cmp	r3, #0
   29c7a:	d040      	beq.n	29cfe <mpsc_pbuf_alloc+0xea>
   29c7c:	2d00      	cmp	r5, #0
   29c7e:	d0d8      	beq.n	29c32 <mpsc_pbuf_alloc+0x1e>
   29c80:	f89d 300b 	ldrb.w	r3, [sp, #11]
   29c84:	2b00      	cmp	r3, #0
   29c86:	d0d4      	beq.n	29c32 <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   29c88:	6963      	ldr	r3, [r4, #20]
   29c8a:	b123      	cbz	r3, 29c96 <mpsc_pbuf_alloc+0x82>
				buffer->notify_drop(buffer, dropped_item);
   29c8c:	4629      	mov	r1, r5
   29c8e:	4620      	mov	r0, r4
   29c90:	4798      	blx	r3
			}
			dropped_item = NULL;
   29c92:	2500      	movs	r5, #0
   29c94:	e7cd      	b.n	29c32 <mpsc_pbuf_alloc+0x1e>
   29c96:	461d      	mov	r5, r3
   29c98:	e7cb      	b.n	29c32 <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
   29c9a:	b128      	cbz	r0, 29ca8 <mpsc_pbuf_alloc+0x94>
   29c9c:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
   29c9e:	4620      	mov	r0, r4
   29ca0:	f7ff ff16 	bl	29ad0 <add_skip_item>
			cont = true;
   29ca4:	9b01      	ldr	r3, [sp, #4]
   29ca6:	e7e3      	b.n	29c70 <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   29ca8:	ea58 0309 	orrs.w	r3, r8, r9
   29cac:	d017      	beq.n	29cde <mpsc_pbuf_alloc+0xca>
			   !k_is_in_isr()) {
   29cae:	f003 fb80 	bl	2d3b2 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   29cb2:	b9a0      	cbnz	r0, 29cde <mpsc_pbuf_alloc+0xca>
   29cb4:	f386 8811 	msr	BASEPRI, r6
   29cb8:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   29cbc:	4642      	mov	r2, r8
   29cbe:	464b      	mov	r3, r9
   29cc0:	4658      	mov	r0, fp
   29cc2:	f7f9 fc3d 	bl	23540 <z_impl_k_sem_take>
	__asm__ volatile(
   29cc6:	f04f 0340 	mov.w	r3, #64	; 0x40
   29cca:	f3ef 8611 	mrs	r6, BASEPRI
   29cce:	f383 8812 	msr	BASEPRI_MAX, r3
   29cd2:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   29cd6:	fab0 f380 	clz	r3, r0
   29cda:	095b      	lsrs	r3, r3, #5
   29cdc:	e7c8      	b.n	29c70 <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   29cde:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   29ce0:	9903      	ldr	r1, [sp, #12]
   29ce2:	f10d 030b 	add.w	r3, sp, #11
   29ce6:	f3c2 0240 	ubfx	r2, r2, #1, #1
   29cea:	4620      	mov	r0, r4
   29cec:	f7ff ff17 	bl	29b1e <drop_item_locked>
			cont = dropped_item != NULL;
   29cf0:	1e03      	subs	r3, r0, #0
   29cf2:	4605      	mov	r5, r0
   29cf4:	bf18      	it	ne
   29cf6:	2301      	movne	r3, #1
   29cf8:	e7ba      	b.n	29c70 <mpsc_pbuf_alloc+0x5c>
		return NULL;
   29cfa:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   29cfe:	4650      	mov	r0, sl
   29d00:	b005      	add	sp, #20
   29d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029d06 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   29d06:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   29d08:	6983      	ldr	r3, [r0, #24]
{
   29d0a:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   29d0c:	4608      	mov	r0, r1
{
   29d0e:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   29d10:	4798      	blx	r3
   29d12:	4602      	mov	r2, r0
   29d14:	f04f 0340 	mov.w	r3, #64	; 0x40
   29d18:	f3ef 8611 	mrs	r6, BASEPRI
   29d1c:	f383 8812 	msr	BASEPRI_MAX, r3
   29d20:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   29d24:	782b      	ldrb	r3, [r5, #0]
   29d26:	f043 0301 	orr.w	r3, r3, #1
   29d2a:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   29d2c:	6861      	ldr	r1, [r4, #4]
   29d2e:	4620      	mov	r0, r4
   29d30:	f7ff fec0 	bl	29ab4 <idx_inc>
   29d34:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   29d36:	4620      	mov	r0, r4
   29d38:	f7ff fee0 	bl	29afc <max_utilization_update>
	__asm__ volatile(
   29d3c:	f386 8811 	msr	BASEPRI, r6
   29d40:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   29d44:	bd70      	pop	{r4, r5, r6, pc}

00029d46 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   29d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29d4a:	4604      	mov	r4, r0
	__asm__ volatile(
   29d4c:	f04f 0340 	mov.w	r3, #64	; 0x40
   29d50:	f3ef 8611 	mrs	r6, BASEPRI
   29d54:	f383 8812 	msr	BASEPRI_MAX, r3
   29d58:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   29d5c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
   29d60:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   29d62:	bf88      	it	hi
   29d64:	6a23      	ldrhi	r3, [r4, #32]
   29d66:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
   29d68:	b1f3      	cbz	r3, 29da8 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
   29d6a:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
   29d6c:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
   29d70:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
   29d74:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
   29d78:	d016      	beq.n	29da8 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
   29d7a:	2b02      	cmp	r3, #2
   29d7c:	d103      	bne.n	29d86 <mpsc_pbuf_claim+0x40>
		return item->skip.len;
   29d7e:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   29d82:	08ad      	lsrs	r5, r5, #2
   29d84:	d115      	bne.n	29db2 <mpsc_pbuf_claim+0x6c>
   29d86:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
   29d88:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
   29d8a:	d50f      	bpl.n	29dac <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
   29d8c:	f042 0202 	orr.w	r2, r2, #2
   29d90:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   29d94:	4640      	mov	r0, r8
   29d96:	4798      	blx	r3
   29d98:	4639      	mov	r1, r7
   29d9a:	4602      	mov	r2, r0
   29d9c:	4620      	mov	r0, r4
   29d9e:	f7ff fe89 	bl	29ab4 <idx_inc>
		cont = false;
   29da2:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
   29da4:	60a0      	str	r0, [r4, #8]
   29da6:	e011      	b.n	29dcc <mpsc_pbuf_claim+0x86>
			item = NULL;
   29da8:	4698      	mov	r8, r3
   29daa:	e00f      	b.n	29dcc <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
   29dac:	4640      	mov	r0, r8
   29dae:	4798      	blx	r3
   29db0:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   29db2:	68a1      	ldr	r1, [r4, #8]
   29db4:	462a      	mov	r2, r5
   29db6:	4620      	mov	r0, r4
   29db8:	f7ff fe7c 	bl	29ab4 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   29dbc:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   29dbe:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   29dc0:	462a      	mov	r2, r5
   29dc2:	4620      	mov	r0, r4
   29dc4:	f7ff fe76 	bl	29ab4 <idx_inc>
				cont = true;
   29dc8:	2301      	movs	r3, #1
				buffer->rd_idx =
   29dca:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   29dcc:	f386 8811 	msr	BASEPRI, r6
   29dd0:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   29dd4:	2b00      	cmp	r3, #0
   29dd6:	d1b9      	bne.n	29d4c <mpsc_pbuf_claim+0x6>

	return item;
}
   29dd8:	4640      	mov	r0, r8
   29dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029dde <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   29dde:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   29de0:	6983      	ldr	r3, [r0, #24]
{
   29de2:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   29de4:	4608      	mov	r0, r1
{
   29de6:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   29de8:	4798      	blx	r3
   29dea:	4602      	mov	r2, r0
	__asm__ volatile(
   29dec:	f04f 0340 	mov.w	r3, #64	; 0x40
   29df0:	f3ef 8611 	mrs	r6, BASEPRI
   29df4:	f383 8812 	msr	BASEPRI_MAX, r3
   29df8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   29dfc:	782b      	ldrb	r3, [r5, #0]
   29dfe:	f36f 0300 	bfc	r3, #0, #1
   29e02:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   29e04:	6923      	ldr	r3, [r4, #16]
   29e06:	079b      	lsls	r3, r3, #30
   29e08:	d505      	bpl.n	29e16 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   29e0a:	68e1      	ldr	r1, [r4, #12]
   29e0c:	69e3      	ldr	r3, [r4, #28]
   29e0e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   29e12:	429d      	cmp	r5, r3
   29e14:	d112      	bne.n	29e3c <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   29e16:	782b      	ldrb	r3, [r5, #0]
   29e18:	f36f 0341 	bfc	r3, #1, #1
   29e1c:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   29e1e:	68e1      	ldr	r1, [r4, #12]
   29e20:	4620      	mov	r0, r4
   29e22:	f7ff fe47 	bl	29ab4 <idx_inc>
   29e26:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   29e28:	f386 8811 	msr	BASEPRI, r6
   29e2c:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   29e30:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   29e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   29e38:	f7f9 bb5c 	b.w	234f4 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   29e3c:	682b      	ldr	r3, [r5, #0]
   29e3e:	f360 039f 	bfi	r3, r0, #2, #30
   29e42:	602b      	str	r3, [r5, #0]
   29e44:	e7f0      	b.n	29e28 <mpsc_pbuf_free+0x4a>

00029e46 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   29e46:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   29e4a:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   29e4c:	bf8a      	itet	hi
   29e4e:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   29e50:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   29e52:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   29e54:	1e18      	subs	r0, r3, #0
   29e56:	bf18      	it	ne
   29e58:	2001      	movne	r0, #1
   29e5a:	4770      	bx	lr

00029e5c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   29e5c:	4770      	bx	lr

00029e5e <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   29e5e:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   29e60:	075b      	lsls	r3, r3, #29
   29e62:	d40b      	bmi.n	29e7c <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   29e64:	6803      	ldr	r3, [r0, #0]
   29e66:	8840      	ldrh	r0, [r0, #2]
   29e68:	f3c3 2349 	ubfx	r3, r3, #9, #10
   29e6c:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   29e70:	4418      	add	r0, r3
   29e72:	3017      	adds	r0, #23
   29e74:	f020 0007 	bic.w	r0, r0, #7
   29e78:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   29e7a:	4770      	bx	lr
	return 0;
   29e7c:	2000      	movs	r0, #0
}
   29e7e:	4770      	bx	lr

00029e80 <dummy_timestamp>:
}
   29e80:	2000      	movs	r0, #0
   29e82:	4770      	bx	lr

00029e84 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   29e84:	f002 bf41 	b.w	2cd0a <sys_clock_cycle_get_32>

00029e88 <z_log_vprintk>:
{
   29e88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   29e8a:	2300      	movs	r3, #0
   29e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   29e90:	e9cd 3300 	strd	r3, r3, [sp]
   29e94:	461a      	mov	r2, r3
   29e96:	4619      	mov	r1, r3
   29e98:	4618      	mov	r0, r3
   29e9a:	f7eb fc4b 	bl	15734 <z_impl_z_log_msg_runtime_vcreate>
}
   29e9e:	b005      	add	sp, #20
   29ea0:	f85d fb04 	ldr.w	pc, [sp], #4

00029ea4 <notify_drop>:
	z_log_dropped(true);
   29ea4:	2001      	movs	r0, #1
   29ea6:	f7eb ba45 	b.w	15334 <z_log_dropped>

00029eaa <z_log_get_tag>:
}
   29eaa:	2000      	movs	r0, #0
   29eac:	4770      	bx	lr

00029eae <z_cbprintf_cpy>:
{
   29eae:	b570      	push	{r4, r5, r6, lr}
   29eb0:	4603      	mov	r3, r0
   29eb2:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   29eb4:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
   29eb8:	1a12      	subs	r2, r2, r0
   29eba:	428a      	cmp	r2, r1
{
   29ebc:	460c      	mov	r4, r1
	if ((desc->size - desc->off) < len) {
   29ebe:	d30a      	bcc.n	29ed6 <z_cbprintf_cpy+0x28>
	memcpy(&((uint8_t *)desc->buf)[desc->off], (void *)buf, len);
   29ec0:	682e      	ldr	r6, [r5, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29ec2:	460a      	mov	r2, r1
   29ec4:	4430      	add	r0, r6
   29ec6:	4619      	mov	r1, r3
   29ec8:	f003 ff86 	bl	2ddd8 <memcpy>
	desc->off += len;
   29ecc:	68ab      	ldr	r3, [r5, #8]
   29ece:	4423      	add	r3, r4
   29ed0:	60ab      	str	r3, [r5, #8]
	return len;
   29ed2:	4620      	mov	r0, r4
}
   29ed4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   29ed6:	f06f 001b 	mvn.w	r0, #27
   29eda:	e7fb      	b.n	29ed4 <z_cbprintf_cpy+0x26>

00029edc <z_log_msg_finalize>:
{
   29edc:	b570      	push	{r4, r5, r6, lr}
   29ede:	460e      	mov	r6, r1
   29ee0:	4615      	mov	r5, r2
   29ee2:	4619      	mov	r1, r3
	if (!msg) {
   29ee4:	4604      	mov	r4, r0
   29ee6:	b918      	cbnz	r0, 29ef0 <z_log_msg_finalize+0x14>
}
   29ee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   29eec:	f7eb ba22 	b.w	15334 <z_log_dropped>
	if (data) {
   29ef0:	b143      	cbz	r3, 29f04 <z_log_msg_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
   29ef2:	f100 0310 	add.w	r3, r0, #16
   29ef6:	f3c2 2049 	ubfx	r0, r2, #9, #10
   29efa:	4418      	add	r0, r3
   29efc:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   29f00:	f003 ff6a 	bl	2ddd8 <memcpy>
	msg->hdr.source = source;
   29f04:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   29f08:	4620      	mov	r0, r4
}
   29f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   29f0e:	f7eb bb4f 	b.w	155b0 <z_log_msg_commit>

00029f12 <buffer_write>:
{
   29f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29f14:	4606      	mov	r6, r0
   29f16:	460d      	mov	r5, r1
   29f18:	4614      	mov	r4, r2
   29f1a:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   29f1c:	4621      	mov	r1, r4
   29f1e:	4628      	mov	r0, r5
   29f20:	463a      	mov	r2, r7
   29f22:	47b0      	blx	r6
	} while (len != 0);
   29f24:	1a24      	subs	r4, r4, r0
		buf += processed;
   29f26:	4405      	add	r5, r0
	} while (len != 0);
   29f28:	d1f8      	bne.n	29f1c <buffer_write+0xa>
}
   29f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029f2c <cbvprintf>:
{
   29f2c:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   29f2e:	2400      	movs	r4, #0
   29f30:	9400      	str	r4, [sp, #0]
   29f32:	f7ea fd7d 	bl	14a30 <z_cbvprintf_impl>
}
   29f36:	b002      	add	sp, #8
   29f38:	bd10      	pop	{r4, pc}

00029f3a <log_output_flush>:
		     output->control_block->offset,
   29f3a:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   29f3c:	6881      	ldr	r1, [r0, #8]
{
   29f3e:	b510      	push	{r4, lr}
   29f40:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   29f42:	e9d2 2300 	ldrd	r2, r3, [r2]
   29f46:	6800      	ldr	r0, [r0, #0]
   29f48:	f7ff ffe3 	bl	29f12 <buffer_write>
	output->control_block->offset = 0;
   29f4c:	6863      	ldr	r3, [r4, #4]
   29f4e:	2200      	movs	r2, #0
   29f50:	601a      	str	r2, [r3, #0]
}
   29f52:	bd10      	pop	{r4, pc}

00029f54 <out_func>:
{
   29f54:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   29f56:	684b      	ldr	r3, [r1, #4]
   29f58:	681a      	ldr	r2, [r3, #0]
   29f5a:	68cb      	ldr	r3, [r1, #12]
   29f5c:	429a      	cmp	r2, r3
{
   29f5e:	4605      	mov	r5, r0
   29f60:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   29f62:	d102      	bne.n	29f6a <out_func+0x16>
		log_output_flush(out_ctx);
   29f64:	4608      	mov	r0, r1
   29f66:	f7ff ffe8 	bl	29f3a <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   29f6a:	6863      	ldr	r3, [r4, #4]
   29f6c:	f3bf 8f5b 	dmb	ish
   29f70:	e853 2f00 	ldrex	r2, [r3]
   29f74:	1c51      	adds	r1, r2, #1
   29f76:	e843 1000 	strex	r0, r1, [r3]
   29f7a:	2800      	cmp	r0, #0
   29f7c:	d1f8      	bne.n	29f70 <out_func+0x1c>
   29f7e:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   29f82:	68a3      	ldr	r3, [r4, #8]
   29f84:	549d      	strb	r5, [r3, r2]
}
   29f86:	2000      	movs	r0, #0
   29f88:	bd38      	pop	{r3, r4, r5, pc}

00029f8a <cr_out_func>:
{
   29f8a:	b538      	push	{r3, r4, r5, lr}
   29f8c:	4605      	mov	r5, r0
   29f8e:	460c      	mov	r4, r1
	out_func(c, ctx);
   29f90:	f7ff ffe0 	bl	29f54 <out_func>
	if (c == '\n') {
   29f94:	2d0a      	cmp	r5, #10
   29f96:	d103      	bne.n	29fa0 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
   29f98:	4621      	mov	r1, r4
   29f9a:	200d      	movs	r0, #13
   29f9c:	f7ff ffda 	bl	29f54 <out_func>
}
   29fa0:	2000      	movs	r0, #0
   29fa2:	bd38      	pop	{r3, r4, r5, pc}

00029fa4 <read_str>:
{
   29fa4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   29fa8:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   29fac:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   29fae:	4640      	mov	r0, r8
{
   29fb0:	461f      	mov	r7, r3
   29fb2:	460c      	mov	r4, r1
   29fb4:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   29fb6:	f7e3 f992 	bl	d2de <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   29fba:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   29fbe:	9300      	str	r3, [sp, #0]
   29fc0:	b280      	uxth	r0, r0
   29fc2:	e9cd 8001 	strd	r8, r0, [sp, #4]
   29fc6:	463b      	mov	r3, r7
   29fc8:	4632      	mov	r2, r6
   29fca:	4621      	mov	r1, r4
   29fcc:	4628      	mov	r0, r5
   29fce:	f001 fe37 	bl	2bc40 <bt_gatt_attr_read>
}
   29fd2:	b004      	add	sp, #16
   29fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029fd8 <bas_init>:
static int bas_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return 0;
}
   29fd8:	2000      	movs	r0, #0
   29fda:	4770      	bx	lr

00029fdc <settings_delete>:

int settings_delete(const char *name)
{
	return settings_save_one(name, NULL, 0);
   29fdc:	2200      	movs	r2, #0
   29fde:	4611      	mov	r1, r2
   29fe0:	f7eb bf8a 	b.w	15ef8 <settings_save_one>

00029fe4 <settings_name_steq>:
	return rc;
}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

int settings_name_steq(const char *name, const char *key, const char **next)
{
   29fe4:	4603      	mov	r3, r0
   29fe6:	b530      	push	{r4, r5, lr}
   29fe8:	4608      	mov	r0, r1
	if (next) {
   29fea:	b10a      	cbz	r2, 29ff0 <settings_name_steq+0xc>
		*next = NULL;
   29fec:	2100      	movs	r1, #0
   29fee:	6011      	str	r1, [r2, #0]
	}

	if ((!name) || (!key)) {
   29ff0:	b163      	cbz	r3, 2a00c <settings_name_steq+0x28>
   29ff2:	b190      	cbz	r0, 2a01a <settings_name_steq+0x36>
   29ff4:	1e41      	subs	r1, r0, #1
   29ff6:	4618      	mov	r0, r3
	/* name might come from flash directly, in flash the name would end
	 * with '=' or '\0' depending how storage is done. Flash reading is
	 * limited to what can be read
	 */

	while ((*key != '\0') && (*key == *name) &&
   29ff8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   29ffc:	4604      	mov	r4, r0
   29ffe:	f810 3b01 	ldrb.w	r3, [r0], #1
   2a002:	b15d      	cbz	r5, 2a01c <settings_name_steq+0x38>
   2a004:	429d      	cmp	r5, r3
   2a006:	d101      	bne.n	2a00c <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2a008:	2d3d      	cmp	r5, #61	; 0x3d
   2a00a:	d1f5      	bne.n	29ff8 <settings_name_steq+0x14>

	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
		return 1;
	}

	return 0;
   2a00c:	2000      	movs	r0, #0
   2a00e:	e004      	b.n	2a01a <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   2a010:	2b3d      	cmp	r3, #61	; 0x3d
   2a012:	d008      	beq.n	2a026 <settings_name_steq+0x42>
   2a014:	fab3 f083 	clz	r0, r3
   2a018:	0940      	lsrs	r0, r0, #5
}
   2a01a:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   2a01c:	2b2f      	cmp	r3, #47	; 0x2f
   2a01e:	d1f7      	bne.n	2a010 <settings_name_steq+0x2c>
		if (next) {
   2a020:	b10a      	cbz	r2, 2a026 <settings_name_steq+0x42>
			*next = name + 1;
   2a022:	3401      	adds	r4, #1
   2a024:	6014      	str	r4, [r2, #0]
		return 1;
   2a026:	2001      	movs	r0, #1
   2a028:	e7f7      	b.n	2a01a <settings_name_steq+0x36>

0002a02a <settings_name_next>:

int settings_name_next(const char *name, const char **next)
{
   2a02a:	b530      	push	{r4, r5, lr}
   2a02c:	4603      	mov	r3, r0
	int rc = 0;

	if (next) {
   2a02e:	b109      	cbz	r1, 2a034 <settings_name_next+0xa>
		*next = NULL;
   2a030:	2200      	movs	r2, #0
   2a032:	600a      	str	r2, [r1, #0]
	}

	if (!name) {
   2a034:	b16b      	cbz	r3, 2a052 <settings_name_next+0x28>
   2a036:	461a      	mov	r2, r3
   2a038:	4614      	mov	r4, r2
   2a03a:	1ad0      	subs	r0, r2, r3

	/* name might come from flash directly, in flash the name would end
	 * with '=' or '\0' depending how storage is done. Flash reading is
	 * limited to what can be read
	 */
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   2a03c:	f812 5b01 	ldrb.w	r5, [r2], #1
   2a040:	b135      	cbz	r5, 2a050 <settings_name_next+0x26>
   2a042:	2d3d      	cmp	r5, #61	; 0x3d
   2a044:	d004      	beq.n	2a050 <settings_name_next+0x26>
   2a046:	2d2f      	cmp	r5, #47	; 0x2f
   2a048:	d1f6      	bne.n	2a038 <settings_name_next+0xe>
		rc++;
		name++;
	}

	if (*name == SETTINGS_NAME_SEPARATOR) {
		if (next) {
   2a04a:	b109      	cbz	r1, 2a050 <settings_name_next+0x26>
			*next = name + 1;
   2a04c:	3401      	adds	r4, #1
   2a04e:	600c      	str	r4, [r1, #0]
		}
		return rc;
	}

	return rc;
}
   2a050:	bd30      	pop	{r4, r5, pc}
		return 0;
   2a052:	4618      	mov	r0, r3
   2a054:	e7fc      	b.n	2a050 <settings_name_next+0x26>

0002a056 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2a056:	b538      	push	{r3, r4, r5, lr}
   2a058:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2a05a:	42ab      	cmp	r3, r5
{
   2a05c:	4611      	mov	r1, r2
   2a05e:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2a060:	d804      	bhi.n	2a06c <_copy+0x16>
   2a062:	461a      	mov	r2, r3
   2a064:	f003 feb8 	bl	2ddd8 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2a068:	4620      	mov	r0, r4
   2a06a:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2a06c:	2400      	movs	r4, #0
   2a06e:	e7fb      	b.n	2a068 <_copy+0x12>

0002a070 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   2a070:	f003 bed3 	b.w	2de1a <memset>

0002a074 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2a074:	09c3      	lsrs	r3, r0, #7
   2a076:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2a07a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2a07e:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2a082:	b2c0      	uxtb	r0, r0
   2a084:	4770      	bx	lr

0002a086 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2a086:	78cb      	ldrb	r3, [r1, #3]
   2a088:	7802      	ldrb	r2, [r0, #0]
   2a08a:	4053      	eors	r3, r2
   2a08c:	7003      	strb	r3, [r0, #0]
   2a08e:	884b      	ldrh	r3, [r1, #2]
   2a090:	7842      	ldrb	r2, [r0, #1]
   2a092:	4053      	eors	r3, r2
   2a094:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2a096:	680a      	ldr	r2, [r1, #0]
   2a098:	7883      	ldrb	r3, [r0, #2]
   2a09a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2a09e:	7083      	strb	r3, [r0, #2]
   2a0a0:	680a      	ldr	r2, [r1, #0]
   2a0a2:	78c3      	ldrb	r3, [r0, #3]
   2a0a4:	4053      	eors	r3, r2
   2a0a6:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2a0a8:	79cb      	ldrb	r3, [r1, #7]
   2a0aa:	7902      	ldrb	r2, [r0, #4]
   2a0ac:	4053      	eors	r3, r2
   2a0ae:	7103      	strb	r3, [r0, #4]
   2a0b0:	88cb      	ldrh	r3, [r1, #6]
   2a0b2:	7942      	ldrb	r2, [r0, #5]
   2a0b4:	4053      	eors	r3, r2
   2a0b6:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2a0b8:	684a      	ldr	r2, [r1, #4]
   2a0ba:	7983      	ldrb	r3, [r0, #6]
   2a0bc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2a0c0:	7183      	strb	r3, [r0, #6]
   2a0c2:	684a      	ldr	r2, [r1, #4]
   2a0c4:	79c3      	ldrb	r3, [r0, #7]
   2a0c6:	4053      	eors	r3, r2
   2a0c8:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2a0ca:	7acb      	ldrb	r3, [r1, #11]
   2a0cc:	7a02      	ldrb	r2, [r0, #8]
   2a0ce:	4053      	eors	r3, r2
   2a0d0:	7203      	strb	r3, [r0, #8]
   2a0d2:	7a42      	ldrb	r2, [r0, #9]
   2a0d4:	894b      	ldrh	r3, [r1, #10]
   2a0d6:	4053      	eors	r3, r2
   2a0d8:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2a0da:	688a      	ldr	r2, [r1, #8]
   2a0dc:	7a83      	ldrb	r3, [r0, #10]
   2a0de:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2a0e2:	7283      	strb	r3, [r0, #10]
   2a0e4:	688a      	ldr	r2, [r1, #8]
   2a0e6:	7ac3      	ldrb	r3, [r0, #11]
   2a0e8:	4053      	eors	r3, r2
   2a0ea:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2a0ec:	7bcb      	ldrb	r3, [r1, #15]
   2a0ee:	7b02      	ldrb	r2, [r0, #12]
   2a0f0:	4053      	eors	r3, r2
   2a0f2:	7303      	strb	r3, [r0, #12]
   2a0f4:	89cb      	ldrh	r3, [r1, #14]
   2a0f6:	7b42      	ldrb	r2, [r0, #13]
   2a0f8:	4053      	eors	r3, r2
   2a0fa:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2a0fc:	68ca      	ldr	r2, [r1, #12]
   2a0fe:	7b83      	ldrb	r3, [r0, #14]
   2a100:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2a104:	7383      	strb	r3, [r0, #14]
   2a106:	68ca      	ldr	r2, [r1, #12]
   2a108:	7bc3      	ldrb	r3, [r0, #15]
   2a10a:	4053      	eors	r3, r2
   2a10c:	73c3      	strb	r3, [r0, #15]
}
   2a10e:	4770      	bx	lr

0002a110 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2a110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2a112:	7802      	ldrb	r2, [r0, #0]
   2a114:	f88d 2000 	strb.w	r2, [sp]
   2a118:	7942      	ldrb	r2, [r0, #5]
   2a11a:	f88d 2001 	strb.w	r2, [sp, #1]
   2a11e:	7a82      	ldrb	r2, [r0, #10]
   2a120:	f88d 2002 	strb.w	r2, [sp, #2]
   2a124:	7bc2      	ldrb	r2, [r0, #15]
   2a126:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2a12a:	7902      	ldrb	r2, [r0, #4]
   2a12c:	f88d 2004 	strb.w	r2, [sp, #4]
   2a130:	7a42      	ldrb	r2, [r0, #9]
   2a132:	f88d 2005 	strb.w	r2, [sp, #5]
   2a136:	7b82      	ldrb	r2, [r0, #14]
   2a138:	f88d 2006 	strb.w	r2, [sp, #6]
   2a13c:	78c2      	ldrb	r2, [r0, #3]
   2a13e:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2a142:	7a02      	ldrb	r2, [r0, #8]
   2a144:	f88d 2008 	strb.w	r2, [sp, #8]
   2a148:	7b42      	ldrb	r2, [r0, #13]
   2a14a:	f88d 2009 	strb.w	r2, [sp, #9]
   2a14e:	7882      	ldrb	r2, [r0, #2]
   2a150:	f88d 200a 	strb.w	r2, [sp, #10]
   2a154:	79c2      	ldrb	r2, [r0, #7]
   2a156:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2a15a:	7b02      	ldrb	r2, [r0, #12]
   2a15c:	f88d 200c 	strb.w	r2, [sp, #12]
   2a160:	7842      	ldrb	r2, [r0, #1]
   2a162:	7ac3      	ldrb	r3, [r0, #11]
   2a164:	f88d 200d 	strb.w	r2, [sp, #13]
   2a168:	7982      	ldrb	r2, [r0, #6]
   2a16a:	f88d 200e 	strb.w	r2, [sp, #14]
   2a16e:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2a172:	2310      	movs	r3, #16
   2a174:	466a      	mov	r2, sp
   2a176:	4619      	mov	r1, r3
   2a178:	f7ff ff6d 	bl	2a056 <_copy>
}
   2a17c:	b005      	add	sp, #20
   2a17e:	f85d fb04 	ldr.w	pc, [sp], #4

0002a182 <mult_row_column>:
{
   2a182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a184:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2a186:	7808      	ldrb	r0, [r1, #0]
{
   2a188:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2a18a:	f7ff ff73 	bl	2a074 <_double_byte>
   2a18e:	4605      	mov	r5, r0
   2a190:	7860      	ldrb	r0, [r4, #1]
   2a192:	f7ff ff6f 	bl	2a074 <_double_byte>
   2a196:	78a2      	ldrb	r2, [r4, #2]
   2a198:	7863      	ldrb	r3, [r4, #1]
   2a19a:	4053      	eors	r3, r2
   2a19c:	78e2      	ldrb	r2, [r4, #3]
   2a19e:	4053      	eors	r3, r2
   2a1a0:	405d      	eors	r5, r3
   2a1a2:	4045      	eors	r5, r0
   2a1a4:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2a1a6:	7860      	ldrb	r0, [r4, #1]
   2a1a8:	7827      	ldrb	r7, [r4, #0]
   2a1aa:	f7ff ff63 	bl	2a074 <_double_byte>
   2a1ae:	4605      	mov	r5, r0
   2a1b0:	78a0      	ldrb	r0, [r4, #2]
   2a1b2:	f7ff ff5f 	bl	2a074 <_double_byte>
   2a1b6:	78a3      	ldrb	r3, [r4, #2]
   2a1b8:	405f      	eors	r7, r3
   2a1ba:	78e3      	ldrb	r3, [r4, #3]
   2a1bc:	405f      	eors	r7, r3
   2a1be:	407d      	eors	r5, r7
   2a1c0:	4045      	eors	r5, r0
   2a1c2:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2a1c4:	78a0      	ldrb	r0, [r4, #2]
   2a1c6:	7865      	ldrb	r5, [r4, #1]
   2a1c8:	7827      	ldrb	r7, [r4, #0]
   2a1ca:	f7ff ff53 	bl	2a074 <_double_byte>
   2a1ce:	406f      	eors	r7, r5
   2a1d0:	4605      	mov	r5, r0
   2a1d2:	78e0      	ldrb	r0, [r4, #3]
   2a1d4:	f7ff ff4e 	bl	2a074 <_double_byte>
   2a1d8:	78e3      	ldrb	r3, [r4, #3]
   2a1da:	405f      	eors	r7, r3
   2a1dc:	407d      	eors	r5, r7
   2a1de:	4045      	eors	r5, r0
   2a1e0:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2a1e2:	7820      	ldrb	r0, [r4, #0]
   2a1e4:	f7ff ff46 	bl	2a074 <_double_byte>
   2a1e8:	7863      	ldrb	r3, [r4, #1]
   2a1ea:	7825      	ldrb	r5, [r4, #0]
   2a1ec:	405d      	eors	r5, r3
   2a1ee:	78a3      	ldrb	r3, [r4, #2]
   2a1f0:	405d      	eors	r5, r3
   2a1f2:	4045      	eors	r5, r0
   2a1f4:	78e0      	ldrb	r0, [r4, #3]
   2a1f6:	f7ff ff3d 	bl	2a074 <_double_byte>
   2a1fa:	b2ed      	uxtb	r5, r5
   2a1fc:	4045      	eors	r5, r0
   2a1fe:	70f5      	strb	r5, [r6, #3]
}
   2a200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a202 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   2a202:	b570      	push	{r4, r5, r6, lr}
   2a204:	4614      	mov	r4, r2
   2a206:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2a208:	4605      	mov	r5, r0
   2a20a:	2800      	cmp	r0, #0
   2a20c:	d049      	beq.n	2a2a2 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2a20e:	2900      	cmp	r1, #0
   2a210:	d049      	beq.n	2a2a6 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2a212:	2a00      	cmp	r2, #0
   2a214:	d049      	beq.n	2a2aa <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2a216:	2310      	movs	r3, #16
   2a218:	460a      	mov	r2, r1
   2a21a:	4668      	mov	r0, sp
   2a21c:	4619      	mov	r1, r3
   2a21e:	f7ff ff1a 	bl	2a056 <_copy>
	add_round_key(state, s->words);
   2a222:	4621      	mov	r1, r4
   2a224:	4668      	mov	r0, sp
   2a226:	f7ff ff2e 	bl	2a086 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   2a22a:	3410      	adds	r4, #16
   2a22c:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   2a230:	4668      	mov	r0, sp
   2a232:	f7eb ffdb 	bl	161ec <sub_bytes>
		shift_rows(state);
   2a236:	4668      	mov	r0, sp
   2a238:	f7ff ff6a 	bl	2a110 <shift_rows>
	mult_row_column(t, s);
   2a23c:	4669      	mov	r1, sp
   2a23e:	a804      	add	r0, sp, #16
   2a240:	f7ff ff9f 	bl	2a182 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2a244:	a901      	add	r1, sp, #4
   2a246:	a805      	add	r0, sp, #20
   2a248:	f7ff ff9b 	bl	2a182 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2a24c:	a902      	add	r1, sp, #8
   2a24e:	a806      	add	r0, sp, #24
   2a250:	f7ff ff97 	bl	2a182 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2a254:	a903      	add	r1, sp, #12
   2a256:	a807      	add	r0, sp, #28
   2a258:	f7ff ff93 	bl	2a182 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2a25c:	2310      	movs	r3, #16
   2a25e:	4619      	mov	r1, r3
   2a260:	eb0d 0203 	add.w	r2, sp, r3
   2a264:	4668      	mov	r0, sp
   2a266:	f7ff fef6 	bl	2a056 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2a26a:	4621      	mov	r1, r4
   2a26c:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2a26e:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2a270:	f7ff ff09 	bl	2a086 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   2a274:	42a6      	cmp	r6, r4
   2a276:	d1db      	bne.n	2a230 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2a278:	f7eb ffb8 	bl	161ec <sub_bytes>
	shift_rows(state);
   2a27c:	4668      	mov	r0, sp
   2a27e:	f7ff ff47 	bl	2a110 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2a282:	4631      	mov	r1, r6
   2a284:	4668      	mov	r0, sp
   2a286:	f7ff fefe 	bl	2a086 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2a28a:	2310      	movs	r3, #16
   2a28c:	4619      	mov	r1, r3
   2a28e:	466a      	mov	r2, sp
   2a290:	4628      	mov	r0, r5
   2a292:	f7ff fee0 	bl	2a056 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2a296:	4668      	mov	r0, sp
   2a298:	2210      	movs	r2, #16
   2a29a:	2100      	movs	r1, #0
   2a29c:	f7ff fee8 	bl	2a070 <_set>

	return TC_CRYPTO_SUCCESS;
   2a2a0:	2001      	movs	r0, #1
}
   2a2a2:	b008      	add	sp, #32
   2a2a4:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2a2a6:	4608      	mov	r0, r1
   2a2a8:	e7fb      	b.n	2a2a2 <tc_aes_encrypt+0xa0>
   2a2aa:	4610      	mov	r0, r2
   2a2ac:	e7f9      	b.n	2a2a2 <tc_aes_encrypt+0xa0>

0002a2ae <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2a2ae:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2a2b0:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2a2b2:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2a2b4:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2a2b8:	2b00      	cmp	r3, #0
   2a2ba:	bfb4      	ite	lt
   2a2bc:	2387      	movlt	r3, #135	; 0x87
   2a2be:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2a2c0:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2a2c4:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2a2c8:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   2a2ca:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2a2ce:	d002      	beq.n	2a2d6 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2a2d0:	7813      	ldrb	r3, [r2, #0]
   2a2d2:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2a2d4:	e7f4      	b.n	2a2c0 <gf_double+0x12>
	}
}
   2a2d6:	bd10      	pop	{r4, pc}

0002a2d8 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2a2d8:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2a2da:	b120      	cbz	r0, 2a2e6 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2a2dc:	2258      	movs	r2, #88	; 0x58
   2a2de:	2100      	movs	r1, #0
   2a2e0:	f7ff fec6 	bl	2a070 <_set>
   2a2e4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2a2e6:	bd08      	pop	{r3, pc}

0002a2e8 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2a2e8:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2a2ea:	4604      	mov	r4, r0
   2a2ec:	b188      	cbz	r0, 2a312 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2a2ee:	2210      	movs	r2, #16
   2a2f0:	2100      	movs	r1, #0
   2a2f2:	f7ff febd 	bl	2a070 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2a2f6:	2210      	movs	r2, #16
   2a2f8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2a2fc:	2100      	movs	r1, #0
   2a2fe:	f7ff feb7 	bl	2a070 <_set>
	s->leftover_offset = 0;
   2a302:	2300      	movs	r3, #0
   2a304:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2a306:	2200      	movs	r2, #0
   2a308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2a30c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   2a310:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2a312:	bd10      	pop	{r4, pc}

0002a314 <tc_cmac_setup>:
{
   2a314:	b570      	push	{r4, r5, r6, lr}
   2a316:	460d      	mov	r5, r1
   2a318:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2a31a:	4604      	mov	r4, r0
   2a31c:	b310      	cbz	r0, 2a364 <tc_cmac_setup+0x50>
   2a31e:	b311      	cbz	r1, 2a366 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2a320:	2258      	movs	r2, #88	; 0x58
   2a322:	2100      	movs	r1, #0
   2a324:	f7ff fea4 	bl	2a070 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2a328:	4629      	mov	r1, r5
	s->sched = sched;
   2a32a:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2a32c:	4630      	mov	r0, r6
   2a32e:	f7eb ff69 	bl	16204 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2a332:	2210      	movs	r2, #16
   2a334:	2100      	movs	r1, #0
   2a336:	4620      	mov	r0, r4
   2a338:	f7ff fe9a 	bl	2a070 <_set>
	gf_double (s->K1, s->iv);
   2a33c:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2a340:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2a342:	4621      	mov	r1, r4
   2a344:	4620      	mov	r0, r4
   2a346:	f7ff ff5c 	bl	2a202 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2a34a:	4621      	mov	r1, r4
   2a34c:	4628      	mov	r0, r5
   2a34e:	f7ff ffae 	bl	2a2ae <gf_double>
	gf_double (s->K2, s->K1);
   2a352:	4629      	mov	r1, r5
   2a354:	f104 0020 	add.w	r0, r4, #32
   2a358:	f7ff ffa9 	bl	2a2ae <gf_double>
	tc_cmac_init(s);
   2a35c:	4620      	mov	r0, r4
   2a35e:	f7ff ffc3 	bl	2a2e8 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2a362:	2001      	movs	r0, #1
}
   2a364:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2a366:	4608      	mov	r0, r1
   2a368:	e7fc      	b.n	2a364 <tc_cmac_setup+0x50>

0002a36a <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2a36a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a36e:	460d      	mov	r5, r1
   2a370:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2a372:	4604      	mov	r4, r0
   2a374:	2800      	cmp	r0, #0
   2a376:	d061      	beq.n	2a43c <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2a378:	b912      	cbnz	r2, 2a380 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2a37a:	2001      	movs	r0, #1
}
   2a37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   2a380:	2900      	cmp	r1, #0
   2a382:	d05b      	beq.n	2a43c <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   2a384:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2a388:	ea53 0102 	orrs.w	r1, r3, r2
   2a38c:	d056      	beq.n	2a43c <tc_cmac_update+0xd2>
	s->countdown--;
   2a38e:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   2a390:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   2a394:	f142 32ff 	adc.w	r2, r2, #4294967295
   2a398:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2a39c:	f1b8 0f00 	cmp.w	r8, #0
   2a3a0:	d02a      	beq.n	2a3f8 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2a3a2:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2a3a6:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2a3aa:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2a3ac:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2a3ae:	d208      	bcs.n	2a3c2 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2a3b0:	462a      	mov	r2, r5
   2a3b2:	4633      	mov	r3, r6
   2a3b4:	4631      	mov	r1, r6
   2a3b6:	f7ff fe4e 	bl	2a056 <_copy>
			s->leftover_offset += data_length;
   2a3ba:	6c62      	ldr	r2, [r4, #68]	; 0x44
   2a3bc:	4432      	add	r2, r6
   2a3be:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2a3c0:	e7db      	b.n	2a37a <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   2a3c2:	463b      	mov	r3, r7
   2a3c4:	462a      	mov	r2, r5
   2a3c6:	4639      	mov	r1, r7
   2a3c8:	f7ff fe45 	bl	2a056 <_copy>
		data_length -= remaining_space;
   2a3cc:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   2a3ce:	2300      	movs	r3, #0
   2a3d0:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2a3d2:	4446      	add	r6, r8
		data += remaining_space;
   2a3d4:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a3d6:	1e63      	subs	r3, r4, #1
   2a3d8:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2a3dc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2a3e0:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a3e4:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2a3e6:	ea82 0200 	eor.w	r2, r2, r0
   2a3ea:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a3ec:	d1f6      	bne.n	2a3dc <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2a3ee:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2a3f0:	4621      	mov	r1, r4
   2a3f2:	4620      	mov	r0, r4
   2a3f4:	f7ff ff05 	bl	2a202 <tc_aes_encrypt>
   2a3f8:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2a3fc:	2e10      	cmp	r6, #16
   2a3fe:	d80a      	bhi.n	2a416 <tc_cmac_update+0xac>
	if (data_length > 0) {
   2a400:	2e00      	cmp	r6, #0
   2a402:	d0ba      	beq.n	2a37a <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   2a404:	4633      	mov	r3, r6
   2a406:	462a      	mov	r2, r5
   2a408:	4631      	mov	r1, r6
   2a40a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2a40e:	f7ff fe22 	bl	2a056 <_copy>
		s->leftover_offset = data_length;
   2a412:	6466      	str	r6, [r4, #68]	; 0x44
   2a414:	e7b1      	b.n	2a37a <tc_cmac_update+0x10>
   2a416:	1e63      	subs	r3, r4, #1
   2a418:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   2a41a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2a41e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a422:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2a424:	ea82 0200 	eor.w	r2, r2, r0
   2a428:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a42a:	d1f6      	bne.n	2a41a <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2a42c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2a42e:	4621      	mov	r1, r4
   2a430:	4620      	mov	r0, r4
   2a432:	f7ff fee6 	bl	2a202 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2a436:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2a438:	3e10      	subs	r6, #16
   2a43a:	e7df      	b.n	2a3fc <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   2a43c:	2000      	movs	r0, #0
   2a43e:	e79d      	b.n	2a37c <tc_cmac_update+0x12>

0002a440 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2a440:	b570      	push	{r4, r5, r6, lr}
   2a442:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2a444:	4605      	mov	r5, r0
   2a446:	b1e8      	cbz	r0, 2a484 <tc_cmac_final+0x44>
   2a448:	b369      	cbz	r1, 2a4a6 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2a44a:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2a44c:	2a10      	cmp	r2, #16
   2a44e:	d11a      	bne.n	2a486 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2a450:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a452:	1e63      	subs	r3, r4, #1
   2a454:	3901      	subs	r1, #1
   2a456:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2a45a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2a45e:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   2a462:	4072      	eors	r2, r6
   2a464:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a468:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2a46a:	ea82 0206 	eor.w	r2, r2, r6
   2a46e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a470:	d1f3      	bne.n	2a45a <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2a472:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2a474:	4621      	mov	r1, r4
   2a476:	4628      	mov	r0, r5
   2a478:	f7ff fec3 	bl	2a202 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2a47c:	4620      	mov	r0, r4
   2a47e:	f7ff ff2b 	bl	2a2d8 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2a482:	2001      	movs	r0, #1
}
   2a484:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2a486:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2a48a:	2100      	movs	r1, #0
   2a48c:	f1c2 0210 	rsb	r2, r2, #16
   2a490:	4420      	add	r0, r4
   2a492:	f7ff fded 	bl	2a070 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2a496:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2a498:	4423      	add	r3, r4
   2a49a:	2280      	movs	r2, #128	; 0x80
   2a49c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2a4a0:	f104 0120 	add.w	r1, r4, #32
   2a4a4:	e7d5      	b.n	2a452 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2a4a6:	4608      	mov	r0, r1
   2a4a8:	e7ec      	b.n	2a484 <tc_cmac_final+0x44>

0002a4aa <abort_function>:
{
   2a4aa:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   2a4ac:	2000      	movs	r0, #0
   2a4ae:	f7ea fe5d 	bl	1516c <sys_reboot>

0002a4b2 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   2a4b2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2a4b4:	6800      	ldr	r0, [r0, #0]
   2a4b6:	f7eb bfdf 	b.w	16478 <z_arm_fatal_error>

0002a4ba <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2a4ba:	2100      	movs	r1, #0
   2a4bc:	2001      	movs	r0, #1
   2a4be:	f7eb bfdb 	b.w	16478 <z_arm_fatal_error>

0002a4c2 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2a4c2:	b508      	push	{r3, lr}
	handler();
   2a4c4:	f7ec f898 	bl	165f8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2a4c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2a4cc:	f7ec b950 	b.w	16770 <z_arm_exc_exit>

0002a4d0 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   2a4d0:	2300      	movs	r3, #0
   2a4d2:	f7eb b8db 	b.w	1568c <z_impl_z_log_msg_static_create>

0002a4d6 <malloc_prepare>:
}
   2a4d6:	2000      	movs	r0, #0
   2a4d8:	4770      	bx	lr

0002a4da <_stdout_hook_default>:
}
   2a4da:	f04f 30ff 	mov.w	r0, #4294967295
   2a4de:	4770      	bx	lr

0002a4e0 <_stdin_hook_default>:
}
   2a4e0:	2000      	movs	r0, #0
   2a4e2:	4770      	bx	lr

0002a4e4 <_read>:
{
   2a4e4:	4608      	mov	r0, r1
   2a4e6:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   2a4e8:	f7ec bd7c 	b.w	16fe4 <z_impl_zephyr_read_stdin>

0002a4ec <_write>:
{
   2a4ec:	4608      	mov	r0, r1
   2a4ee:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2a4f0:	f7ec bd8c 	b.w	1700c <z_impl_zephyr_write_stdout>

0002a4f4 <_close>:
   2a4f4:	f04f 30ff 	mov.w	r0, #4294967295
   2a4f8:	4770      	bx	lr

0002a4fa <_lseek>:
}
   2a4fa:	2000      	movs	r0, #0
   2a4fc:	4770      	bx	lr

0002a4fe <_isatty>:
}
   2a4fe:	2802      	cmp	r0, #2
   2a500:	bfcc      	ite	gt
   2a502:	2000      	movgt	r0, #0
   2a504:	2001      	movle	r0, #1
   2a506:	4770      	bx	lr

0002a508 <_fstat>:
	st->st_mode = S_IFCHR;
   2a508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   2a50c:	604b      	str	r3, [r1, #4]
}
   2a50e:	2000      	movs	r0, #0
   2a510:	4770      	bx	lr

0002a512 <__retarget_lock_init_recursive>:
{
   2a512:	b510      	push	{r4, lr}
   2a514:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
   2a516:	2014      	movs	r0, #20
   2a518:	f7fa fca0 	bl	24e5c <malloc>
   2a51c:	6020      	str	r0, [r4, #0]
}
   2a51e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   2a522:	f002 bf62 	b.w	2d3ea <z_impl_k_mutex_init>

0002a526 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2a526:	f04f 32ff 	mov.w	r2, #4294967295
   2a52a:	f04f 33ff 	mov.w	r3, #4294967295
   2a52e:	f7f8 bef9 	b.w	23324 <z_impl_k_mutex_lock>

0002a532 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   2a532:	f7f8 bf6f 	b.w	23414 <z_impl_k_mutex_unlock>

0002a536 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2a536:	f7f8 bc73 	b.w	22e20 <z_impl_z_errno>

0002a53a <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2a53a:	2806      	cmp	r0, #6
   2a53c:	d108      	bne.n	2a550 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2a53e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a542:	2201      	movs	r2, #1
   2a544:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2a548:	f3bf 8f4f 	dsb	sy
        __WFE();
   2a54c:	bf20      	wfe
    while (true)
   2a54e:	e7fd      	b.n	2a54c <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2a550:	4770      	bx	lr

0002a552 <pm_state_exit_post_ops>:
   2a552:	2300      	movs	r3, #0
   2a554:	f383 8811 	msr	BASEPRI, r3
   2a558:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2a55c:	4770      	bx	lr

0002a55e <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   2a55e:	b530      	push	{r4, r5, lr}
   2a560:	b085      	sub	sp, #20
   2a562:	4614      	mov	r4, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   2a564:	880a      	ldrh	r2, [r1, #0]
   2a566:	788b      	ldrb	r3, [r1, #2]
   2a568:	f8ad 2000 	strh.w	r2, [sp]
{
   2a56c:	4605      	mov	r5, r0
	(void)memset(res + 3, 0, 13);
   2a56e:	220d      	movs	r2, #13
   2a570:	2100      	movs	r1, #0
   2a572:	f10d 0003 	add.w	r0, sp, #3
	memcpy(res, r, 3);
   2a576:	f88d 3002 	strb.w	r3, [sp, #2]
	(void)memset(res + 3, 0, 13);
   2a57a:	f003 fc4e 	bl	2de1a <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   2a57e:	466a      	mov	r2, sp
   2a580:	4669      	mov	r1, sp
   2a582:	4628      	mov	r0, r5
   2a584:	f002 fc93 	bl	2ceae <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   2a588:	b928      	cbnz	r0, 2a596 <ah+0x38>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a58a:	f8bd 2000 	ldrh.w	r2, [sp]
   2a58e:	f89d 3002 	ldrb.w	r3, [sp, #2]
   2a592:	8022      	strh	r2, [r4, #0]
   2a594:	70a3      	strb	r3, [r4, #2]
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
   2a596:	b005      	add	sp, #20
   2a598:	bd30      	pop	{r4, r5, pc}

0002a59a <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   2a59a:	b513      	push	{r0, r1, r4, lr}
   2a59c:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   2a59e:	aa01      	add	r2, sp, #4
   2a5a0:	3103      	adds	r1, #3
   2a5a2:	f7ff ffdc 	bl	2a55e <ah>
	if (err) {
   2a5a6:	b948      	cbnz	r0, 2a5bc <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   2a5a8:	2203      	movs	r2, #3
   2a5aa:	a901      	add	r1, sp, #4
   2a5ac:	4620      	mov	r0, r4
   2a5ae:	f003 fc03 	bl	2ddb8 <memcmp>
   2a5b2:	fab0 f080 	clz	r0, r0
   2a5b6:	0940      	lsrs	r0, r0, #5
}
   2a5b8:	b002      	add	sp, #8
   2a5ba:	bd10      	pop	{r4, pc}
		return false;
   2a5bc:	2000      	movs	r0, #0
   2a5be:	e7fb      	b.n	2a5b8 <bt_rpa_irk_matches+0x1e>

0002a5c0 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   2a5c0:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   2a5c2:	1cce      	adds	r6, r1, #3
{
   2a5c4:	4605      	mov	r5, r0
   2a5c6:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   2a5c8:	4630      	mov	r0, r6
   2a5ca:	2103      	movs	r1, #3
   2a5cc:	f7f7 f98e 	bl	218ec <bt_rand>
	if (err) {
   2a5d0:	b960      	cbnz	r0, 2a5ec <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   2a5d2:	7963      	ldrb	r3, [r4, #5]
   2a5d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2a5d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2a5dc:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   2a5de:	4622      	mov	r2, r4
   2a5e0:	4631      	mov	r1, r6
   2a5e2:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   2a5e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   2a5e8:	f7ff bfb9 	b.w	2a55e <ah>
}
   2a5ec:	bd70      	pop	{r4, r5, r6, pc}

0002a5ee <z_log_msg_static_create.constprop.0>:
   2a5ee:	2300      	movs	r3, #0
   2a5f0:	f7eb b84c 	b.w	1568c <z_impl_z_log_msg_static_create>

0002a5f4 <bt_settings_decode_key>:
{
   2a5f4:	b570      	push	{r4, r5, r6, lr}
   2a5f6:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   2a5f8:	2100      	movs	r1, #0
{
   2a5fa:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   2a5fc:	f7ff fd15 	bl	2a02a <settings_name_next>
   2a600:	280d      	cmp	r0, #13
   2a602:	d118      	bne.n	2a636 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   2a604:	7b23      	ldrb	r3, [r4, #12]
   2a606:	2b30      	cmp	r3, #48	; 0x30
   2a608:	d111      	bne.n	2a62e <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   2a60a:	2300      	movs	r3, #0
   2a60c:	702b      	strb	r3, [r5, #0]
   2a60e:	f104 060c 	add.w	r6, r4, #12
   2a612:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2a614:	462a      	mov	r2, r5
   2a616:	4620      	mov	r0, r4
   2a618:	2301      	movs	r3, #1
   2a61a:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   2a61c:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2a61e:	f7fe feef 	bl	29400 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   2a622:	42b4      	cmp	r4, r6
   2a624:	f105 35ff 	add.w	r5, r5, #4294967295
   2a628:	d1f4      	bne.n	2a614 <bt_settings_decode_key+0x20>
	return 0;
   2a62a:	2000      	movs	r0, #0
}
   2a62c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   2a62e:	2b31      	cmp	r3, #49	; 0x31
   2a630:	d101      	bne.n	2a636 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   2a632:	2301      	movs	r3, #1
   2a634:	e7ea      	b.n	2a60c <bt_settings_decode_key+0x18>
		return -EINVAL;
   2a636:	f06f 0015 	mvn.w	r0, #21
   2a63a:	e7f7      	b.n	2a62c <bt_settings_decode_key+0x38>

0002a63c <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2a63c:	b510      	push	{r4, lr}
   2a63e:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2a640:	7801      	ldrb	r1, [r0, #0]
   2a642:	7822      	ldrb	r2, [r4, #0]
   2a644:	428a      	cmp	r2, r1
{
   2a646:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2a648:	d00f      	beq.n	2a66a <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   2a64a:	4669      	mov	r1, sp
   2a64c:	f7ec ff80 	bl	17550 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2a650:	a905      	add	r1, sp, #20
   2a652:	4620      	mov	r0, r4
   2a654:	f7ec ff7c 	bl	17550 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2a658:	2210      	movs	r2, #16
   2a65a:	f10d 0115 	add.w	r1, sp, #21
   2a65e:	f10d 0001 	add.w	r0, sp, #1
   2a662:	f003 fba9 	bl	2ddb8 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2a666:	b00a      	add	sp, #40	; 0x28
   2a668:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   2a66a:	2a01      	cmp	r2, #1
   2a66c:	d006      	beq.n	2a67c <bt_uuid_cmp+0x40>
   2a66e:	2a02      	cmp	r2, #2
   2a670:	d007      	beq.n	2a682 <bt_uuid_cmp+0x46>
   2a672:	b972      	cbnz	r2, 2a692 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2a674:	8840      	ldrh	r0, [r0, #2]
   2a676:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2a678:	1ac0      	subs	r0, r0, r3
   2a67a:	e7f4      	b.n	2a666 <bt_uuid_cmp+0x2a>
   2a67c:	6840      	ldr	r0, [r0, #4]
   2a67e:	6863      	ldr	r3, [r4, #4]
   2a680:	e7fa      	b.n	2a678 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2a682:	2210      	movs	r2, #16
   2a684:	1c61      	adds	r1, r4, #1
   2a686:	3001      	adds	r0, #1
}
   2a688:	b00a      	add	sp, #40	; 0x28
   2a68a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2a68e:	f003 bb93 	b.w	2ddb8 <memcmp>
	switch (u1->type) {
   2a692:	f06f 0015 	mvn.w	r0, #21
   2a696:	e7e6      	b.n	2a666 <bt_uuid_cmp+0x2a>

0002a698 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2a698:	2a04      	cmp	r2, #4
   2a69a:	d00a      	beq.n	2a6b2 <bt_uuid_create+0x1a>
   2a69c:	2a10      	cmp	r2, #16
   2a69e:	d00d      	beq.n	2a6bc <bt_uuid_create+0x24>
   2a6a0:	2a02      	cmp	r2, #2
   2a6a2:	f04f 0300 	mov.w	r3, #0
   2a6a6:	d115      	bne.n	2a6d4 <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2a6a8:	7003      	strb	r3, [r0, #0]
   2a6aa:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2a6ac:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2a6ae:	2001      	movs	r0, #1
		break;
   2a6b0:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   2a6b2:	2301      	movs	r3, #1
   2a6b4:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2a6b6:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2a6b8:	6042      	str	r2, [r0, #4]
		break;
   2a6ba:	e7f8      	b.n	2a6ae <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   2a6bc:	2302      	movs	r3, #2
   2a6be:	f800 3b01 	strb.w	r3, [r0], #1
   2a6c2:	f101 0310 	add.w	r3, r1, #16
   2a6c6:	f851 2b04 	ldr.w	r2, [r1], #4
   2a6ca:	f840 2b04 	str.w	r2, [r0], #4
   2a6ce:	4299      	cmp	r1, r3
   2a6d0:	d1f9      	bne.n	2a6c6 <bt_uuid_create+0x2e>
   2a6d2:	e7ec      	b.n	2a6ae <bt_uuid_create+0x16>
	switch (data_len) {
   2a6d4:	4618      	mov	r0, r3
}
   2a6d6:	4770      	bx	lr

0002a6d8 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2a6d8:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2a6da:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2a6dc:	2106      	movs	r1, #6
{
   2a6de:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2a6e0:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2a6e4:	f7f7 f902 	bl	218ec <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2a6e8:	b918      	cbnz	r0, 2a6f2 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2a6ea:	79a3      	ldrb	r3, [r4, #6]
   2a6ec:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2a6f0:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2a6f2:	bd10      	pop	{r4, pc}

0002a6f4 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2a6f4:	280f      	cmp	r0, #15
   2a6f6:	d806      	bhi.n	2a706 <bt_hci_evt_get_flags+0x12>
   2a6f8:	280d      	cmp	r0, #13
   2a6fa:	d80b      	bhi.n	2a714 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   2a6fc:	2805      	cmp	r0, #5
   2a6fe:	bf14      	ite	ne
   2a700:	2002      	movne	r0, #2
   2a702:	2003      	moveq	r0, #3
   2a704:	4770      	bx	lr
	switch (evt) {
   2a706:	2813      	cmp	r0, #19
   2a708:	d004      	beq.n	2a714 <bt_hci_evt_get_flags+0x20>
   2a70a:	281a      	cmp	r0, #26
   2a70c:	bf14      	ite	ne
   2a70e:	2002      	movne	r0, #2
   2a710:	2001      	moveq	r0, #1
   2a712:	4770      	bx	lr
   2a714:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   2a716:	4770      	bx	lr

0002a718 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2a718:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   2a71c:	b193      	cbz	r3, 2a744 <update_sec_level+0x2c>
   2a71e:	7b5a      	ldrb	r2, [r3, #13]
   2a720:	07d1      	lsls	r1, r2, #31
   2a722:	d50f      	bpl.n	2a744 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2a724:	06d2      	lsls	r2, r2, #27
   2a726:	d50b      	bpl.n	2a740 <update_sec_level+0x28>
   2a728:	7b1b      	ldrb	r3, [r3, #12]
   2a72a:	2b10      	cmp	r3, #16
   2a72c:	d108      	bne.n	2a740 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   2a72e:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   2a730:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2a732:	7a82      	ldrb	r2, [r0, #10]
   2a734:	7a40      	ldrb	r0, [r0, #9]
}
   2a736:	4282      	cmp	r2, r0
   2a738:	bf8c      	ite	hi
   2a73a:	2000      	movhi	r0, #0
   2a73c:	2001      	movls	r0, #1
   2a73e:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   2a740:	2303      	movs	r3, #3
   2a742:	e7f5      	b.n	2a730 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   2a744:	2302      	movs	r3, #2
   2a746:	e7f3      	b.n	2a730 <update_sec_level+0x18>

0002a748 <hci_vendor_event>:
}
   2a748:	4770      	bx	lr

0002a74a <atomic_or>:
{
   2a74a:	4603      	mov	r3, r0
}
   2a74c:	f3bf 8f5b 	dmb	ish
   2a750:	e853 0f00 	ldrex	r0, [r3]
   2a754:	ea40 0201 	orr.w	r2, r0, r1
   2a758:	e843 2c00 	strex	ip, r2, [r3]
   2a75c:	f1bc 0f00 	cmp.w	ip, #0
   2a760:	d1f6      	bne.n	2a750 <atomic_or+0x6>
   2a762:	f3bf 8f5b 	dmb	ish
   2a766:	4770      	bx	lr

0002a768 <unpair_remote>:
{
   2a768:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   2a76a:	4601      	mov	r1, r0
   2a76c:	7818      	ldrb	r0, [r3, #0]
   2a76e:	f7ec bf9b 	b.w	176a8 <unpair>

0002a772 <bt_addr_copy>:
   2a772:	680b      	ldr	r3, [r1, #0]
   2a774:	6003      	str	r3, [r0, #0]
   2a776:	888b      	ldrh	r3, [r1, #4]
   2a778:	8083      	strh	r3, [r0, #4]
}
   2a77a:	4770      	bx	lr

0002a77c <bt_addr_le_copy>:
   2a77c:	680b      	ldr	r3, [r1, #0]
   2a77e:	6003      	str	r3, [r0, #0]
   2a780:	888b      	ldrh	r3, [r1, #4]
   2a782:	8083      	strh	r3, [r0, #4]
   2a784:	798b      	ldrb	r3, [r1, #6]
   2a786:	7183      	strb	r3, [r0, #6]
}
   2a788:	4770      	bx	lr

0002a78a <z_log_msg_static_create.constprop.0>:
   2a78a:	2300      	movs	r3, #0
   2a78c:	f7ea bf7e 	b.w	1568c <z_impl_z_log_msg_static_create>

0002a790 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a790:	f3bf 8f5b 	dmb	ish
   2a794:	e850 3f00 	ldrex	r3, [r0]
   2a798:	400b      	ands	r3, r1
   2a79a:	e840 3200 	strex	r2, r3, [r0]
   2a79e:	2a00      	cmp	r2, #0
   2a7a0:	d1f8      	bne.n	2a794 <atomic_and.isra.0+0x4>
   2a7a2:	f3bf 8f5b 	dmb	ish
}
   2a7a6:	4770      	bx	lr

0002a7a8 <sys_put_le64>:
	dst[1] = val >> 8;
   2a7a8:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   2a7ac:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2a7ae:	0e00      	lsrs	r0, r0, #24
   2a7b0:	7053      	strb	r3, [r2, #1]
   2a7b2:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   2a7b4:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   2a7b6:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2a7ba:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2a7bc:	7093      	strb	r3, [r2, #2]
   2a7be:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   2a7c0:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2a7c2:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2a7c4:	71d1      	strb	r1, [r2, #7]
}
   2a7c6:	4770      	bx	lr

0002a7c8 <bt_hci_disconnect>:
{
   2a7c8:	b570      	push	{r4, r5, r6, lr}
   2a7ca:	4606      	mov	r6, r0
   2a7cc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2a7ce:	f240 4006 	movw	r0, #1030	; 0x406
   2a7d2:	2103      	movs	r1, #3
   2a7d4:	f7ed fbe8 	bl	17fa8 <bt_hci_cmd_create>
	if (!buf) {
   2a7d8:	4604      	mov	r4, r0
   2a7da:	b168      	cbz	r0, 2a7f8 <bt_hci_disconnect+0x30>
   2a7dc:	2103      	movs	r1, #3
   2a7de:	3008      	adds	r0, #8
   2a7e0:	f002 f880 	bl	2c8e4 <net_buf_simple_add>
	disconn->reason = reason;
   2a7e4:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   2a7e6:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2a7e8:	4621      	mov	r1, r4
   2a7ea:	2200      	movs	r2, #0
}
   2a7ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2a7f0:	f240 4006 	movw	r0, #1030	; 0x406
   2a7f4:	f7ed bc12 	b.w	1801c <bt_hci_cmd_send_sync>
}
   2a7f8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a7fc:	bd70      	pop	{r4, r5, r6, pc}

0002a7fe <bt_le_set_data_len>:
{
   2a7fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a800:	4607      	mov	r7, r0
   2a802:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2a804:	f242 0022 	movw	r0, #8226	; 0x2022
   2a808:	2106      	movs	r1, #6
{
   2a80a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2a80c:	f7ed fbcc 	bl	17fa8 <bt_hci_cmd_create>
	if (!buf) {
   2a810:	4604      	mov	r4, r0
   2a812:	b178      	cbz	r0, 2a834 <bt_le_set_data_len+0x36>
   2a814:	2106      	movs	r1, #6
   2a816:	3008      	adds	r0, #8
   2a818:	f002 f864 	bl	2c8e4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2a81c:	883b      	ldrh	r3, [r7, #0]
   2a81e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2a820:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2a822:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2a824:	4621      	mov	r1, r4
   2a826:	2200      	movs	r2, #0
}
   2a828:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2a82c:	f242 0022 	movw	r0, #8226	; 0x2022
   2a830:	f7ed bbf4 	b.w	1801c <bt_hci_cmd_send_sync>
}
   2a834:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a83a <bt_le_set_phy>:
{
   2a83a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a83e:	4680      	mov	r8, r0
   2a840:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2a842:	f242 0032 	movw	r0, #8242	; 0x2032
   2a846:	2107      	movs	r1, #7
{
   2a848:	f89d 9020 	ldrb.w	r9, [sp, #32]
   2a84c:	4616      	mov	r6, r2
   2a84e:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2a850:	f7ed fbaa 	bl	17fa8 <bt_hci_cmd_create>
	if (!buf) {
   2a854:	4604      	mov	r4, r0
   2a856:	b198      	cbz	r0, 2a880 <bt_le_set_phy+0x46>
   2a858:	2107      	movs	r1, #7
   2a85a:	3008      	adds	r0, #8
   2a85c:	f002 f842 	bl	2c8e4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2a860:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   2a864:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2a866:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2a868:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2a86a:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   2a86c:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2a870:	4621      	mov	r1, r4
   2a872:	2200      	movs	r2, #0
}
   2a874:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2a878:	f242 0032 	movw	r0, #8242	; 0x2032
   2a87c:	f7ed bbce 	b.w	1801c <bt_hci_cmd_send_sync>
}
   2a880:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002a888 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2a888:	6880      	ldr	r0, [r0, #8]
   2a88a:	f7ed bc97 	b.w	181bc <bt_hci_le_enh_conn_complete>

0002a88e <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   2a88e:	8803      	ldrh	r3, [r0, #0]
   2a890:	8842      	ldrh	r2, [r0, #2]
   2a892:	4293      	cmp	r3, r2
{
   2a894:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2a896:	d819      	bhi.n	2a8cc <bt_le_conn_params_valid+0x3e>
   2a898:	2b05      	cmp	r3, #5
   2a89a:	d917      	bls.n	2a8cc <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2a89c:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   2a8a0:	d814      	bhi.n	2a8cc <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   2a8a2:	8883      	ldrh	r3, [r0, #4]
   2a8a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2a8a8:	d210      	bcs.n	2a8cc <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2a8aa:	88c0      	ldrh	r0, [r0, #6]
   2a8ac:	f1a0 010a 	sub.w	r1, r0, #10
   2a8b0:	b289      	uxth	r1, r1
   2a8b2:	f640 4476 	movw	r4, #3190	; 0xc76
   2a8b6:	42a1      	cmp	r1, r4
   2a8b8:	d808      	bhi.n	2a8cc <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2a8ba:	3301      	adds	r3, #1
   2a8bc:	b29b      	uxth	r3, r3
   2a8be:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   2a8c0:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2a8c4:	bf34      	ite	cc
   2a8c6:	2001      	movcc	r0, #1
   2a8c8:	2000      	movcs	r0, #0
}
   2a8ca:	bd10      	pop	{r4, pc}
		return false;
   2a8cc:	2000      	movs	r0, #0
   2a8ce:	e7fc      	b.n	2a8ca <bt_le_conn_params_valid+0x3c>

0002a8d0 <le_conn_param_neg_reply>:
{
   2a8d0:	b570      	push	{r4, r5, r6, lr}
   2a8d2:	4606      	mov	r6, r0
   2a8d4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   2a8d6:	f242 0021 	movw	r0, #8225	; 0x2021
   2a8da:	2103      	movs	r1, #3
   2a8dc:	f7ed fb64 	bl	17fa8 <bt_hci_cmd_create>
	if (!buf) {
   2a8e0:	4604      	mov	r4, r0
   2a8e2:	b918      	cbnz	r0, 2a8ec <le_conn_param_neg_reply+0x1c>
}
   2a8e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2a8e8:	f7ec bf88 	b.w	177fc <le_conn_param_neg_reply.part.0>
   2a8ec:	2103      	movs	r1, #3
   2a8ee:	3008      	adds	r0, #8
   2a8f0:	f001 fff8 	bl	2c8e4 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   2a8f4:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   2a8f6:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2a8f8:	4621      	mov	r1, r4
   2a8fa:	f242 0021 	movw	r0, #8225	; 0x2021
}
   2a8fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2a902:	f7ed bf1b 	b.w	1873c <bt_hci_cmd_send>

0002a906 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   2a906:	f240 3041 	movw	r0, #833	; 0x341
   2a90a:	4770      	bx	lr

0002a90c <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   2a90c:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2a90e:	f7f4 fbeb 	bl	1f0e8 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   2a912:	b118      	cbz	r0, 2a91c <bt_addr_le_is_bonded+0x10>
   2a914:	89c0      	ldrh	r0, [r0, #14]
   2a916:	3800      	subs	r0, #0
   2a918:	bf18      	it	ne
   2a91a:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   2a91c:	bd08      	pop	{r3, pc}

0002a91e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a91e:	f3bf 8f5b 	dmb	ish
   2a922:	6800      	ldr	r0, [r0, #0]
   2a924:	f3bf 8f5b 	dmb	ish
}
   2a928:	4770      	bx	lr

0002a92a <atomic_test_bit>:
{
   2a92a:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2a92c:	f7ff fff7 	bl	2a91e <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2a930:	4108      	asrs	r0, r1
}
   2a932:	f000 0001 	and.w	r0, r0, #1
   2a936:	bd08      	pop	{r3, pc}

0002a938 <adv_is_private_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2a938:	f100 0210 	add.w	r2, r0, #16
{
   2a93c:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2a93e:	4610      	mov	r0, r2
{
   2a940:	460c      	mov	r4, r1
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2a942:	2106      	movs	r1, #6
   2a944:	f7ff fff1 	bl	2a92a <atomic_test_bit>
   2a948:	b130      	cbz	r0, 2a958 <adv_is_private_enabled+0x20>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   2a94a:	210c      	movs	r1, #12
   2a94c:	4610      	mov	r0, r2
   2a94e:	f7ff ffec 	bl	2a92a <atomic_test_bit>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2a952:	b908      	cbnz	r0, 2a958 <adv_is_private_enabled+0x20>
		*adv_enabled = true;
   2a954:	2301      	movs	r3, #1
   2a956:	7023      	strb	r3, [r4, #0]
}
   2a958:	bd10      	pop	{r4, pc}

0002a95a <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a95a:	f100 0310 	add.w	r3, r0, #16
   2a95e:	f3bf 8f5b 	dmb	ish
   2a962:	e853 2f00 	ldrex	r2, [r3]
   2a966:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   2a96a:	e843 1c00 	strex	ip, r1, [r3]
   2a96e:	f1bc 0f00 	cmp.w	ip, #0
   2a972:	d1f6      	bne.n	2a962 <adv_unpause_enabled+0x8>
   2a974:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   2a978:	0453      	lsls	r3, r2, #17
   2a97a:	d502      	bpl.n	2a982 <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   2a97c:	2101      	movs	r1, #1
   2a97e:	f000 b8be 	b.w	2aafe <bt_le_adv_set_enable>
}
   2a982:	4770      	bx	lr

0002a984 <bt_addr_copy>:
   2a984:	680b      	ldr	r3, [r1, #0]
   2a986:	6003      	str	r3, [r0, #0]
   2a988:	888b      	ldrh	r3, [r1, #4]
   2a98a:	8083      	strh	r3, [r0, #4]
}
   2a98c:	4770      	bx	lr

0002a98e <bt_addr_le_copy>:
   2a98e:	680b      	ldr	r3, [r1, #0]
   2a990:	6003      	str	r3, [r0, #0]
   2a992:	888b      	ldrh	r3, [r1, #4]
   2a994:	8083      	strh	r3, [r0, #4]
   2a996:	798b      	ldrb	r3, [r1, #6]
   2a998:	7183      	strb	r3, [r0, #6]
}
   2a99a:	4770      	bx	lr

0002a99c <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2a99c:	7a03      	ldrb	r3, [r0, #8]
   2a99e:	075b      	lsls	r3, r3, #29
{
   2a9a0:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2a9a2:	d505      	bpl.n	2a9b0 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2a9a4:	4601      	mov	r1, r0
   2a9a6:	322a      	adds	r2, #42	; 0x2a
   2a9a8:	f811 0b01 	ldrb.w	r0, [r1], #1
   2a9ac:	f7ee b97e 	b.w	18cac <hci_id_add>
}
   2a9b0:	4770      	bx	lr

0002a9b2 <z_log_msg_static_create.constprop.0>:
   2a9b2:	2300      	movs	r3, #0
   2a9b4:	f7ea be6a 	b.w	1568c <z_impl_z_log_msg_static_create>

0002a9b8 <addr_res_enable>:
{
   2a9b8:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2a9ba:	2101      	movs	r1, #1
{
   2a9bc:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2a9be:	f242 002d 	movw	r0, #8237	; 0x202d
   2a9c2:	f7ed faf1 	bl	17fa8 <bt_hci_cmd_create>
	if (!buf) {
   2a9c6:	4604      	mov	r4, r0
   2a9c8:	b158      	cbz	r0, 2a9e2 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2a9ca:	4629      	mov	r1, r5
   2a9cc:	3008      	adds	r0, #8
   2a9ce:	f001 ff98 	bl	2c902 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2a9d2:	4621      	mov	r1, r4
   2a9d4:	2200      	movs	r2, #0
}
   2a9d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2a9da:	f242 002d 	movw	r0, #8237	; 0x202d
   2a9de:	f7ed bb1d 	b.w	1801c <bt_hci_cmd_send_sync>
}
   2a9e2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a9e6:	bd38      	pop	{r3, r4, r5, pc}

0002a9e8 <atomic_or.isra.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a9e8:	f3bf 8f5b 	dmb	ish
   2a9ec:	e850 3f00 	ldrex	r3, [r0]
   2a9f0:	430b      	orrs	r3, r1
   2a9f2:	e840 3200 	strex	r2, r3, [r0]
   2a9f6:	2a00      	cmp	r2, #0
   2a9f8:	d1f8      	bne.n	2a9ec <atomic_or.isra.0+0x4>
   2a9fa:	f3bf 8f5b 	dmb	ish
}
   2a9fe:	4770      	bx	lr

0002aa00 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2aa00:	f100 0210 	add.w	r2, r0, #16
{
   2aa04:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2aa06:	2106      	movs	r1, #6
{
   2aa08:	4604      	mov	r4, r0
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2aa0a:	4610      	mov	r0, r2
   2aa0c:	f7ff ff8d 	bl	2a92a <atomic_test_bit>
   2aa10:	b150      	cbz	r0, 2aa28 <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2aa12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   2aa16:	4610      	mov	r0, r2
   2aa18:	f7ff ffe6 	bl	2a9e8 <atomic_or.isra.0>
		bt_le_adv_set_enable(adv, false);
   2aa1c:	4620      	mov	r0, r4
   2aa1e:	2100      	movs	r1, #0
}
   2aa20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_set_enable(adv, false);
   2aa24:	f000 b86b 	b.w	2aafe <bt_le_adv_set_enable>
}
   2aa28:	bd10      	pop	{r4, pc}

0002aa2a <adv_rpa_invalidate>:
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED)) {
   2aa2a:	f100 0210 	add.w	r2, r0, #16
{
   2aa2e:	b508      	push	{r3, lr}
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED)) {
   2aa30:	2105      	movs	r1, #5
   2aa32:	4610      	mov	r0, r2
   2aa34:	f7ff ff79 	bl	2a92a <atomic_test_bit>
   2aa38:	b958      	cbnz	r0, 2aa52 <adv_rpa_invalidate+0x28>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2aa3a:	f3bf 8f5b 	dmb	ish
   2aa3e:	e852 3f00 	ldrex	r3, [r2]
   2aa42:	f023 0310 	bic.w	r3, r3, #16
   2aa46:	e842 3100 	strex	r1, r3, [r2]
   2aa4a:	2900      	cmp	r1, #0
   2aa4c:	d1f7      	bne.n	2aa3e <adv_rpa_invalidate+0x14>
   2aa4e:	f3bf 8f5b 	dmb	ish
}
   2aa52:	bd08      	pop	{r3, pc}

0002aa54 <bt_lookup_id_addr>:
{
   2aa54:	b510      	push	{r4, lr}
   2aa56:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   2aa58:	f7f4 fb0c 	bl	1f074 <bt_keys_find_irk>
		if (keys) {
   2aa5c:	b100      	cbz	r0, 2aa60 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   2aa5e:	1c44      	adds	r4, r0, #1
}
   2aa60:	4620      	mov	r0, r4
   2aa62:	bd10      	pop	{r4, pc}

0002aa64 <bt_id_set_adv_private_addr>:
		return bt_id_set_private_addr(adv->id);
   2aa64:	7800      	ldrb	r0, [r0, #0]
   2aa66:	f7ee bb4b 	b.w	19100 <bt_id_set_private_addr>

0002aa6a <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2aa6a:	7a03      	ldrb	r3, [r0, #8]
   2aa6c:	07d9      	lsls	r1, r3, #31
   2aa6e:	d504      	bpl.n	2aa7a <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2aa70:	f023 0301 	bic.w	r3, r3, #1
   2aa74:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2aa76:	f7ee bc05 	b.w	19284 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2aa7a:	0799      	lsls	r1, r3, #30
   2aa7c:	d504      	bpl.n	2aa88 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2aa7e:	f023 0302 	bic.w	r3, r3, #2
   2aa82:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2aa84:	f7ee bc16 	b.w	192b4 <bt_id_del>
}
   2aa88:	4770      	bx	lr

0002aa8a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2aa8a:	f3bf 8f5b 	dmb	ish
   2aa8e:	6800      	ldr	r0, [r0, #0]
   2aa90:	f3bf 8f5b 	dmb	ish
}
   2aa94:	4770      	bx	lr

0002aa96 <atomic_and>:
{
   2aa96:	4603      	mov	r3, r0
}
   2aa98:	f3bf 8f5b 	dmb	ish
   2aa9c:	e853 0f00 	ldrex	r0, [r3]
   2aaa0:	ea00 0201 	and.w	r2, r0, r1
   2aaa4:	e843 2c00 	strex	ip, r2, [r3]
   2aaa8:	f1bc 0f00 	cmp.w	ip, #0
   2aaac:	d1f6      	bne.n	2aa9c <atomic_and+0x6>
   2aaae:	f3bf 8f5b 	dmb	ish
   2aab2:	4770      	bx	lr

0002aab4 <bt_le_adv_set_enable_legacy>:
{
   2aab4:	b570      	push	{r4, r5, r6, lr}
   2aab6:	4606      	mov	r6, r0
   2aab8:	b086      	sub	sp, #24
   2aaba:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2aabc:	f242 000a 	movw	r0, #8202	; 0x200a
   2aac0:	2101      	movs	r1, #1
   2aac2:	f7ed fa71 	bl	17fa8 <bt_hci_cmd_create>
	if (!buf) {
   2aac6:	4604      	mov	r4, r0
   2aac8:	b1b0      	cbz	r0, 2aaf8 <bt_le_adv_set_enable_legacy+0x44>
   2aaca:	3008      	adds	r0, #8
	if (enable) {
   2aacc:	b195      	cbz	r5, 2aaf4 <bt_le_adv_set_enable_legacy+0x40>
   2aace:	2101      	movs	r1, #1
   2aad0:	f001 ff17 	bl	2c902 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2aad4:	f106 0210 	add.w	r2, r6, #16
   2aad8:	a903      	add	r1, sp, #12
   2aada:	4620      	mov	r0, r4
   2aadc:	9500      	str	r5, [sp, #0]
   2aade:	2306      	movs	r3, #6
   2aae0:	f7ed fa50 	bl	17f84 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2aae4:	2200      	movs	r2, #0
   2aae6:	4621      	mov	r1, r4
   2aae8:	f242 000a 	movw	r0, #8202	; 0x200a
   2aaec:	f7ed fa96 	bl	1801c <bt_hci_cmd_send_sync>
}
   2aaf0:	b006      	add	sp, #24
   2aaf2:	bd70      	pop	{r4, r5, r6, pc}
   2aaf4:	4629      	mov	r1, r5
   2aaf6:	e7eb      	b.n	2aad0 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   2aaf8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2aafc:	e7f8      	b.n	2aaf0 <bt_le_adv_set_enable_legacy+0x3c>

0002aafe <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   2aafe:	f7ff bfd9 	b.w	2aab4 <bt_le_adv_set_enable_legacy>

0002ab02 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2ab02:	3018      	adds	r0, #24
   2ab04:	f002 be17 	b.w	2d736 <k_work_cancel_delayable>

0002ab08 <atomic_and>:
{
   2ab08:	4603      	mov	r3, r0
}
   2ab0a:	f3bf 8f5b 	dmb	ish
   2ab0e:	e853 0f00 	ldrex	r0, [r3]
   2ab12:	ea00 0201 	and.w	r2, r0, r1
   2ab16:	e843 2c00 	strex	ip, r2, [r3]
   2ab1a:	f1bc 0f00 	cmp.w	ip, #0
   2ab1e:	d1f6      	bne.n	2ab0e <atomic_and+0x6>
   2ab20:	f3bf 8f5b 	dmb	ish
   2ab24:	4770      	bx	lr

0002ab26 <z_log_msg_static_create.constprop.0>:
   2ab26:	2300      	movs	r3, #0
   2ab28:	f7ea bdb0 	b.w	1568c <z_impl_z_log_msg_static_create>

0002ab2c <tx_complete_work>:
	tx_notify(conn);
   2ab2c:	3828      	subs	r0, #40	; 0x28
   2ab2e:	f7ee bfaf 	b.w	19a90 <tx_notify>

0002ab32 <bt_conn_reset_rx_state>:
{
   2ab32:	b510      	push	{r4, lr}
   2ab34:	4604      	mov	r4, r0
	if (!conn->rx) {
   2ab36:	6900      	ldr	r0, [r0, #16]
   2ab38:	b118      	cbz	r0, 2ab42 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2ab3a:	f7f4 fd1b 	bl	1f574 <net_buf_unref>
	conn->rx = NULL;
   2ab3e:	2300      	movs	r3, #0
   2ab40:	6123      	str	r3, [r4, #16]
}
   2ab42:	bd10      	pop	{r4, pc}

0002ab44 <bt_conn_ref>:
{
   2ab44:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   2ab46:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ab4a:	f3bf 8f5b 	dmb	ish
   2ab4e:	6813      	ldr	r3, [r2, #0]
   2ab50:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2ab54:	b17b      	cbz	r3, 2ab76 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2ab56:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2ab5a:	1c59      	adds	r1, r3, #1
   2ab5c:	e852 4f00 	ldrex	r4, [r2]
   2ab60:	429c      	cmp	r4, r3
   2ab62:	d104      	bne.n	2ab6e <bt_conn_ref+0x2a>
   2ab64:	e842 1c00 	strex	ip, r1, [r2]
   2ab68:	f1bc 0f00 	cmp.w	ip, #0
   2ab6c:	d1f6      	bne.n	2ab5c <bt_conn_ref+0x18>
   2ab6e:	f3bf 8f5b 	dmb	ish
   2ab72:	d1ea      	bne.n	2ab4a <bt_conn_ref+0x6>
}
   2ab74:	bd10      	pop	{r4, pc}
			return NULL;
   2ab76:	4618      	mov	r0, r3
   2ab78:	e7fc      	b.n	2ab74 <bt_conn_ref+0x30>

0002ab7a <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   2ab7a:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2ab7e:	f3bf 8f5b 	dmb	ish
   2ab82:	e853 2f00 	ldrex	r2, [r3]
   2ab86:	3a01      	subs	r2, #1
   2ab88:	e843 2100 	strex	r1, r2, [r3]
   2ab8c:	2900      	cmp	r1, #0
   2ab8e:	d1f8      	bne.n	2ab82 <bt_conn_unref+0x8>
   2ab90:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   2ab94:	7883      	ldrb	r3, [r0, #2]
   2ab96:	2b01      	cmp	r3, #1
   2ab98:	d108      	bne.n	2abac <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ab9a:	f3bf 8f5b 	dmb	ish
   2ab9e:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   2aba2:	f3bf 8f5b 	dmb	ish
   2aba6:	b90b      	cbnz	r3, 2abac <bt_conn_unref+0x32>
		bt_le_adv_resume();
   2aba8:	f7ee bd96 	b.w	196d8 <bt_le_adv_resume>
}
   2abac:	4770      	bx	lr

0002abae <conn_lookup_handle>:
{
   2abae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2abb2:	4607      	mov	r7, r0
   2abb4:	460e      	mov	r6, r1
   2abb6:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2abb8:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2abba:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   2abbe:	42b4      	cmp	r4, r6
   2abc0:	d103      	bne.n	2abca <conn_lookup_handle+0x1c>
	return NULL;
   2abc2:	2300      	movs	r3, #0
}
   2abc4:	4618      	mov	r0, r3
   2abc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2abca:	fb09 7004 	mla	r0, r9, r4, r7
   2abce:	f7ff ffb9 	bl	2ab44 <bt_conn_ref>
   2abd2:	4603      	mov	r3, r0
		if (!conn) {
   2abd4:	b158      	cbz	r0, 2abee <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2abd6:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2abd8:	2d01      	cmp	r5, #1
   2abda:	d002      	beq.n	2abe2 <conn_lookup_handle+0x34>
   2abdc:	3d07      	subs	r5, #7
   2abde:	2d01      	cmp	r5, #1
   2abe0:	d803      	bhi.n	2abea <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2abe2:	881a      	ldrh	r2, [r3, #0]
   2abe4:	4542      	cmp	r2, r8
   2abe6:	d0ed      	beq.n	2abc4 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2abe8:	4618      	mov	r0, r3
   2abea:	f7ff ffc6 	bl	2ab7a <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2abee:	3401      	adds	r4, #1
   2abf0:	e7e5      	b.n	2abbe <conn_lookup_handle+0x10>

0002abf2 <bt_conn_connected>:
{
   2abf2:	b510      	push	{r4, lr}
   2abf4:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2abf6:	f7ef fc43 	bl	1a480 <bt_l2cap_connected>
	notify_connected(conn);
   2abfa:	4620      	mov	r0, r4
}
   2abfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2ac00:	f7ee bf14 	b.w	19a2c <notify_connected>

0002ac04 <bt_conn_disconnect>:
{
   2ac04:	b538      	push	{r3, r4, r5, lr}
	switch (conn->state) {
   2ac06:	7b43      	ldrb	r3, [r0, #13]
   2ac08:	3b02      	subs	r3, #2
{
   2ac0a:	4604      	mov	r4, r0
	switch (conn->state) {
   2ac0c:	2b06      	cmp	r3, #6
   2ac0e:	d805      	bhi.n	2ac1c <bt_conn_disconnect+0x18>
   2ac10:	e8df f003 	tbb	[pc, r3]
   2ac14:	04040408 	.word	0x04040408
   2ac18:	0e0c      	.short	0x0e0c
   2ac1a:	0c          	.byte	0x0c
   2ac1b:	00          	.byte	0x00
   2ac1c:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   2ac20:	4628      	mov	r0, r5
   2ac22:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   2ac24:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2ac26:	2100      	movs	r1, #0
   2ac28:	f7ef f8b8 	bl	19d9c <bt_conn_set_state>
		return 0;
   2ac2c:	2500      	movs	r5, #0
   2ac2e:	e7f7      	b.n	2ac20 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   2ac30:	8800      	ldrh	r0, [r0, #0]
   2ac32:	f7ff fdc9 	bl	2a7c8 <bt_hci_disconnect>
	if (err) {
   2ac36:	4605      	mov	r5, r0
   2ac38:	2800      	cmp	r0, #0
   2ac3a:	d1f1      	bne.n	2ac20 <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   2ac3c:	7b63      	ldrb	r3, [r4, #13]
   2ac3e:	2b07      	cmp	r3, #7
   2ac40:	d1ee      	bne.n	2ac20 <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2ac42:	2108      	movs	r1, #8
   2ac44:	4620      	mov	r0, r4
   2ac46:	f7ef f8a9 	bl	19d9c <bt_conn_set_state>
   2ac4a:	e7e9      	b.n	2ac20 <bt_conn_disconnect+0x1c>

0002ac4c <bt_conn_set_security>:
{
   2ac4c:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2ac4e:	7b43      	ldrb	r3, [r0, #13]
   2ac50:	2b07      	cmp	r3, #7
{
   2ac52:	4604      	mov	r4, r0
   2ac54:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   2ac56:	d124      	bne.n	2aca2 <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2ac58:	7a43      	ldrb	r3, [r0, #9]
   2ac5a:	428b      	cmp	r3, r1
   2ac5c:	d224      	bcs.n	2aca8 <bt_conn_set_security+0x5c>
   2ac5e:	7a83      	ldrb	r3, [r0, #10]
   2ac60:	428b      	cmp	r3, r1
   2ac62:	d221      	bcs.n	2aca8 <bt_conn_set_security+0x5c>
	if (val) {
   2ac64:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2ac66:	f100 0004 	add.w	r0, r0, #4
   2ac6a:	d515      	bpl.n	2ac98 <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ac6c:	f3bf 8f5b 	dmb	ish
   2ac70:	e850 3f00 	ldrex	r3, [r0]
   2ac74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   2ac78:	e840 3200 	strex	r2, r3, [r0]
   2ac7c:	2a00      	cmp	r2, #0
   2ac7e:	d1f7      	bne.n	2ac70 <bt_conn_set_security+0x24>
   2ac80:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2ac84:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   2ac88:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   2ac8a:	4620      	mov	r0, r4
   2ac8c:	f7f3 fb4e 	bl	1e32c <bt_smp_start_security>
	if (err) {
   2ac90:	b108      	cbz	r0, 2ac96 <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   2ac92:	7a63      	ldrb	r3, [r4, #9]
   2ac94:	72a3      	strb	r3, [r4, #10]
}
   2ac96:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ac98:	f46f 6180 	mvn.w	r1, #1024	; 0x400
   2ac9c:	f7ff ff34 	bl	2ab08 <atomic_and>
   2aca0:	e7f0      	b.n	2ac84 <bt_conn_set_security+0x38>
		return -ENOTCONN;
   2aca2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2aca6:	e7f6      	b.n	2ac96 <bt_conn_set_security+0x4a>
		return 0;
   2aca8:	2000      	movs	r0, #0
   2acaa:	e7f4      	b.n	2ac96 <bt_conn_set_security+0x4a>

0002acac <bt_conn_get_security>:
}
   2acac:	7a40      	ldrb	r0, [r0, #9]
   2acae:	4770      	bx	lr

0002acb0 <bt_conn_is_peer_addr_le>:
{
   2acb0:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2acb2:	7a03      	ldrb	r3, [r0, #8]
   2acb4:	428b      	cmp	r3, r1
{
   2acb6:	4604      	mov	r4, r0
   2acb8:	4615      	mov	r5, r2
	if (id != conn->id) {
   2acba:	d115      	bne.n	2ace8 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2acbc:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2acc0:	2207      	movs	r2, #7
   2acc2:	4628      	mov	r0, r5
   2acc4:	f003 f878 	bl	2ddb8 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   2acc8:	b180      	cbz	r0, 2acec <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2acca:	78e3      	ldrb	r3, [r4, #3]
   2accc:	2207      	movs	r2, #7
   2acce:	b943      	cbnz	r3, 2ace2 <bt_conn_is_peer_addr_le+0x32>
   2acd0:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2acd4:	4628      	mov	r0, r5
   2acd6:	f003 f86f 	bl	2ddb8 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2acda:	fab0 f080 	clz	r0, r0
   2acde:	0940      	lsrs	r0, r0, #5
}
   2ace0:	bd38      	pop	{r3, r4, r5, pc}
   2ace2:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   2ace6:	e7f5      	b.n	2acd4 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2ace8:	2000      	movs	r0, #0
   2acea:	e7f9      	b.n	2ace0 <bt_conn_is_peer_addr_le+0x30>
		return true;
   2acec:	2001      	movs	r0, #1
   2acee:	e7f7      	b.n	2ace0 <bt_conn_is_peer_addr_le+0x30>

0002acf0 <bt_conn_le_conn_update>:
{
   2acf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2acf2:	4607      	mov	r7, r0
   2acf4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2acf6:	f242 0013 	movw	r0, #8211	; 0x2013
   2acfa:	210e      	movs	r1, #14
   2acfc:	f7ed f954 	bl	17fa8 <bt_hci_cmd_create>
	if (!buf) {
   2ad00:	4606      	mov	r6, r0
   2ad02:	b1d0      	cbz	r0, 2ad3a <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2ad04:	210e      	movs	r1, #14
   2ad06:	3008      	adds	r0, #8
   2ad08:	f001 fdec 	bl	2c8e4 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   2ad0c:	220e      	movs	r2, #14
   2ad0e:	4604      	mov	r4, r0
   2ad10:	2100      	movs	r1, #0
   2ad12:	f003 f882 	bl	2de1a <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2ad16:	883b      	ldrh	r3, [r7, #0]
   2ad18:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2ad1a:	882b      	ldrh	r3, [r5, #0]
   2ad1c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2ad1e:	886b      	ldrh	r3, [r5, #2]
   2ad20:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2ad22:	88ab      	ldrh	r3, [r5, #4]
   2ad24:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2ad26:	88eb      	ldrh	r3, [r5, #6]
   2ad28:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2ad2a:	4631      	mov	r1, r6
   2ad2c:	2200      	movs	r2, #0
}
   2ad2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2ad32:	f242 0013 	movw	r0, #8211	; 0x2013
   2ad36:	f7ed b971 	b.w	1801c <bt_hci_cmd_send_sync>
}
   2ad3a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2ad3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002ad40 <l2cap_connected>:
}
   2ad40:	4770      	bx	lr

0002ad42 <z_log_msg_static_create.constprop.0>:
   2ad42:	2300      	movs	r3, #0
   2ad44:	f7ea bca2 	b.w	1568c <z_impl_z_log_msg_static_create>

0002ad48 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2ad48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ad4a:	4605      	mov	r5, r0
   2ad4c:	460f      	mov	r7, r1
   2ad4e:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   2ad50:	2300      	movs	r3, #0
   2ad52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2ad56:	2104      	movs	r1, #4
   2ad58:	2000      	movs	r0, #0
   2ad5a:	f7ef f919 	bl	19f90 <bt_conn_create_pdu_timeout>
	if (!buf) {
   2ad5e:	4604      	mov	r4, r0
   2ad60:	b920      	cbnz	r0, 2ad6c <l2cap_create_le_sig_pdu.constprop.0+0x24>
   2ad62:	4628      	mov	r0, r5
}
   2ad64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2ad68:	f7ef bb4e 	b.w	1a408 <l2cap_create_le_sig_pdu.part.0>
   2ad6c:	2104      	movs	r1, #4
   2ad6e:	3008      	adds	r0, #8
   2ad70:	f001 fdb8 	bl	2c8e4 <net_buf_simple_add>
	hdr->code = code;
   2ad74:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   2ad76:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   2ad78:	8046      	strh	r6, [r0, #2]
}
   2ad7a:	4620      	mov	r0, r4
   2ad7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002ad7e <l2cap_disconnected>:
   2ad7e:	4770      	bx	lr

0002ad80 <bt_l2cap_chan_del>:
{
   2ad80:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2ad82:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2ad86:	4604      	mov	r4, r0
	if (!chan->conn) {
   2ad88:	b123      	cbz	r3, 2ad94 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2ad8a:	686b      	ldr	r3, [r5, #4]
   2ad8c:	b103      	cbz	r3, 2ad90 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2ad8e:	4798      	blx	r3
	chan->conn = NULL;
   2ad90:	2300      	movs	r3, #0
   2ad92:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2ad94:	68e3      	ldr	r3, [r4, #12]
   2ad96:	b10b      	cbz	r3, 2ad9c <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2ad98:	4620      	mov	r0, r4
   2ad9a:	4798      	blx	r3
	if (ops->released) {
   2ad9c:	69eb      	ldr	r3, [r5, #28]
   2ad9e:	b11b      	cbz	r3, 2ada8 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2ada0:	4620      	mov	r0, r4
}
   2ada2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2ada6:	4718      	bx	r3
}
   2ada8:	bd70      	pop	{r4, r5, r6, pc}

0002adaa <bt_l2cap_disconnected>:
	return list->head;
   2adaa:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   2adac:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2adae:	b160      	cbz	r0, 2adca <bt_l2cap_disconnected+0x20>
	return node->next;
   2adb0:	f850 4908 	ldr.w	r4, [r0], #-8
   2adb4:	b104      	cbz	r4, 2adb8 <bt_l2cap_disconnected+0xe>
   2adb6:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2adb8:	f7ff ffe2 	bl	2ad80 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2adbc:	b12c      	cbz	r4, 2adca <bt_l2cap_disconnected+0x20>
   2adbe:	68a3      	ldr	r3, [r4, #8]
   2adc0:	b103      	cbz	r3, 2adc4 <bt_l2cap_disconnected+0x1a>
   2adc2:	3b08      	subs	r3, #8
{
   2adc4:	4620      	mov	r0, r4
   2adc6:	461c      	mov	r4, r3
   2adc8:	e7f6      	b.n	2adb8 <bt_l2cap_disconnected+0xe>
}
   2adca:	bd10      	pop	{r4, pc}

0002adcc <bt_l2cap_security_changed>:
	return list->head;
   2adcc:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   2adce:	b538      	push	{r3, r4, r5, lr}
   2add0:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2add2:	b178      	cbz	r0, 2adf4 <bt_l2cap_security_changed+0x28>
	return node->next;
   2add4:	f850 4908 	ldr.w	r4, [r0], #-8
   2add8:	b104      	cbz	r4, 2addc <bt_l2cap_security_changed+0x10>
   2adda:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2addc:	6843      	ldr	r3, [r0, #4]
   2adde:	689b      	ldr	r3, [r3, #8]
   2ade0:	b10b      	cbz	r3, 2ade6 <bt_l2cap_security_changed+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   2ade2:	4629      	mov	r1, r5
   2ade4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2ade6:	b12c      	cbz	r4, 2adf4 <bt_l2cap_security_changed+0x28>
   2ade8:	68a3      	ldr	r3, [r4, #8]
   2adea:	b103      	cbz	r3, 2adee <bt_l2cap_security_changed+0x22>
   2adec:	3b08      	subs	r3, #8
{
   2adee:	4620      	mov	r0, r4
   2adf0:	461c      	mov	r4, r3
   2adf2:	e7f3      	b.n	2addc <bt_l2cap_security_changed+0x10>
}
   2adf4:	bd38      	pop	{r3, r4, r5, pc}

0002adf6 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2adf6:	3104      	adds	r1, #4
   2adf8:	f7ef b8ca 	b.w	19f90 <bt_conn_create_pdu_timeout>

0002adfc <bt_l2cap_send_cb>:
{
   2adfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ae00:	4614      	mov	r4, r2
   2ae02:	4605      	mov	r5, r0
   2ae04:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2ae06:	f102 0008 	add.w	r0, r2, #8
   2ae0a:	2104      	movs	r1, #4
   2ae0c:	461e      	mov	r6, r3
   2ae0e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2ae12:	f001 fd7e 	bl	2c912 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2ae16:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   2ae18:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2ae1a:	3a04      	subs	r2, #4
   2ae1c:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2ae1e:	4643      	mov	r3, r8
   2ae20:	4632      	mov	r2, r6
   2ae22:	4621      	mov	r1, r4
   2ae24:	4628      	mov	r0, r5
}
   2ae26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2ae2a:	f7ee bf47 	b.w	19cbc <bt_conn_send_cb>

0002ae2e <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2ae2e:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ae30:	b130      	cbz	r0, 2ae40 <bt_l2cap_le_lookup_tx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2ae32:	8b83      	ldrh	r3, [r0, #28]
   2ae34:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ae36:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2ae3a:	d001      	beq.n	2ae40 <bt_l2cap_le_lookup_tx_cid+0x12>
	return node->next;
   2ae3c:	6880      	ldr	r0, [r0, #8]
   2ae3e:	e7f7      	b.n	2ae30 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   2ae40:	4770      	bx	lr

0002ae42 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2ae42:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ae44:	b130      	cbz	r0, 2ae54 <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2ae46:	8983      	ldrh	r3, [r0, #12]
   2ae48:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ae4a:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2ae4e:	d001      	beq.n	2ae54 <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   2ae50:	6880      	ldr	r0, [r0, #8]
   2ae52:	e7f7      	b.n	2ae44 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2ae54:	4770      	bx	lr

0002ae56 <bt_l2cap_init>:
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
	for (size_t i = 0; i < ARRAY_SIZE(l2cap_tx_meta_data); i++) {
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2ae56:	4770      	bx	lr

0002ae58 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2ae58:	4603      	mov	r3, r0
	return list->head;
   2ae5a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2ae5c:	b128      	cbz	r0, 2ae6a <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2ae5e:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2ae60:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2ae62:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2ae64:	4288      	cmp	r0, r1
	list->tail = node;
   2ae66:	bf08      	it	eq
   2ae68:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2ae6a:	4770      	bx	lr

0002ae6c <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2ae6c:	4603      	mov	r3, r0
	size_t bytes = 0;
   2ae6e:	2000      	movs	r0, #0

	while (buf) {
   2ae70:	b903      	cbnz	r3, 2ae74 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2ae72:	4770      	bx	lr
		bytes += buf->len;
   2ae74:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2ae76:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2ae78:	4410      	add	r0, r2
		buf = buf->frags;
   2ae7a:	e7f9      	b.n	2ae70 <net_buf_frags_len+0x4>

0002ae7c <attr_read_type_cb>:
{
   2ae7c:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2ae7e:	68d4      	ldr	r4, [r2, #12]
   2ae80:	7823      	ldrb	r3, [r4, #0]
   2ae82:	3102      	adds	r1, #2
   2ae84:	b913      	cbnz	r3, 2ae8c <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2ae86:	7021      	strb	r1, [r4, #0]
	return true;
   2ae88:	2001      	movs	r0, #1
   2ae8a:	e006      	b.n	2ae9a <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2ae8c:	428b      	cmp	r3, r1
   2ae8e:	d0fb      	beq.n	2ae88 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2ae90:	8983      	ldrh	r3, [r0, #12]
   2ae92:	3b02      	subs	r3, #2
   2ae94:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2ae96:	2000      	movs	r0, #0
   2ae98:	6110      	str	r0, [r2, #16]
}
   2ae9a:	bd10      	pop	{r4, pc}

0002ae9c <att_op_get_type>:
	switch (op) {
   2ae9c:	2852      	cmp	r0, #82	; 0x52
   2ae9e:	d830      	bhi.n	2af02 <att_op_get_type+0x66>
   2aea0:	b388      	cbz	r0, 2af06 <att_op_get_type+0x6a>
   2aea2:	1e43      	subs	r3, r0, #1
   2aea4:	2b51      	cmp	r3, #81	; 0x51
   2aea6:	d82e      	bhi.n	2af06 <att_op_get_type+0x6a>
   2aea8:	e8df f003 	tbb	[pc, r3]
   2aeac:	39333933 	.word	0x39333933
   2aeb0:	39333933 	.word	0x39333933
   2aeb4:	39333933 	.word	0x39333933
   2aeb8:	39333933 	.word	0x39333933
   2aebc:	2d333933 	.word	0x2d333933
   2aec0:	3933392d 	.word	0x3933392d
   2aec4:	2d352d33 	.word	0x2d352d33
   2aec8:	392d2937 	.word	0x392d2937
   2aecc:	2d352d33 	.word	0x2d352d33
   2aed0:	2d2d2d2d 	.word	0x2d2d2d2d
   2aed4:	2d2d2d2d 	.word	0x2d2d2d2d
   2aed8:	2d2d2d2d 	.word	0x2d2d2d2d
   2aedc:	2d2d2d2d 	.word	0x2d2d2d2d
   2aee0:	2d2d2d2d 	.word	0x2d2d2d2d
   2aee4:	2d2d2d2d 	.word	0x2d2d2d2d
   2aee8:	2d2d2d2d 	.word	0x2d2d2d2d
   2aeec:	2d2d2d2d 	.word	0x2d2d2d2d
   2aef0:	2d2d2d2d 	.word	0x2d2d2d2d
   2aef4:	2d2d2d2d 	.word	0x2d2d2d2d
   2aef8:	2d2d2d2d 	.word	0x2d2d2d2d
   2aefc:	3b2d      	.short	0x3b2d
   2aefe:	2004      	movs	r0, #4
   2af00:	4770      	bx	lr
   2af02:	28d2      	cmp	r0, #210	; 0xd2
   2af04:	d00d      	beq.n	2af22 <att_op_get_type+0x86>
		return ATT_COMMAND;
   2af06:	f010 0f40 	tst.w	r0, #64	; 0x40
   2af0a:	bf0c      	ite	eq
   2af0c:	2006      	moveq	r0, #6
   2af0e:	2000      	movne	r0, #0
   2af10:	4770      	bx	lr
		return ATT_RESPONSE;
   2af12:	2002      	movs	r0, #2
   2af14:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2af16:	2003      	movs	r0, #3
   2af18:	4770      	bx	lr
		return ATT_INDICATION;
   2af1a:	2005      	movs	r0, #5
   2af1c:	4770      	bx	lr
		return ATT_REQUEST;
   2af1e:	2001      	movs	r0, #1
   2af20:	4770      	bx	lr
		return ATT_COMMAND;
   2af22:	2000      	movs	r0, #0
}
   2af24:	4770      	bx	lr

0002af26 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2af26:	f3bf 8f5b 	dmb	ish
   2af2a:	6800      	ldr	r0, [r0, #0]
   2af2c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2af30:	4108      	asrs	r0, r1
}
   2af32:	f000 0001 	and.w	r0, r0, #1
   2af36:	4770      	bx	lr

0002af38 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2af38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2af3a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2af3e:	2300      	movs	r3, #0
   2af40:	9300      	str	r3, [sp, #0]
   2af42:	461a      	mov	r2, r3
   2af44:	f7f1 faf6 	bl	1c534 <bt_gatt_foreach_attr_type>
				  user_data);
}
   2af48:	b005      	add	sp, #20
   2af4a:	f85d fb04 	ldr.w	pc, [sp], #4

0002af4e <att_chan_mtu_updated>:
{
   2af4e:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2af50:	6806      	ldr	r6, [r0, #0]
	return list->head;
   2af52:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2af54:	b1c3      	cbz	r3, 2af88 <att_chan_mtu_updated+0x3a>
   2af56:	461a      	mov	r2, r3
	return node->next;
   2af58:	f852 49e0 	ldr.w	r4, [r2], #-224
   2af5c:	b104      	cbz	r4, 2af60 <att_chan_mtu_updated+0x12>
   2af5e:	3ce0      	subs	r4, #224	; 0xe0
{
   2af60:	2300      	movs	r3, #0
   2af62:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   2af64:	4290      	cmp	r0, r2
   2af66:	d007      	beq.n	2af78 <att_chan_mtu_updated+0x2a>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2af68:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2af6a:	8b52      	ldrh	r2, [r2, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2af6c:	42a9      	cmp	r1, r5
   2af6e:	bf38      	it	cc
   2af70:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2af72:	4293      	cmp	r3, r2
   2af74:	bf38      	it	cc
   2af76:	4613      	movcc	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2af78:	b13c      	cbz	r4, 2af8a <att_chan_mtu_updated+0x3c>
   2af7a:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
   2af7e:	b105      	cbz	r5, 2af82 <att_chan_mtu_updated+0x34>
   2af80:	3de0      	subs	r5, #224	; 0xe0
{
   2af82:	4622      	mov	r2, r4
   2af84:	462c      	mov	r4, r5
   2af86:	e7ed      	b.n	2af64 <att_chan_mtu_updated+0x16>
   2af88:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2af8a:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2af8c:	8b42      	ldrh	r2, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2af8e:	428c      	cmp	r4, r1
   2af90:	d801      	bhi.n	2af96 <att_chan_mtu_updated+0x48>
   2af92:	429a      	cmp	r2, r3
   2af94:	d909      	bls.n	2afaa <att_chan_mtu_updated+0x5c>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2af96:	429a      	cmp	r2, r3
   2af98:	bf38      	it	cc
   2af9a:	461a      	movcc	r2, r3
   2af9c:	42a1      	cmp	r1, r4
   2af9e:	6830      	ldr	r0, [r6, #0]
   2afa0:	bf38      	it	cc
   2afa2:	4621      	movcc	r1, r4
}
   2afa4:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2afa6:	f7f1 bfb9 	b.w	1cf1c <bt_gatt_att_max_mtu_changed>
}
   2afaa:	bc70      	pop	{r4, r5, r6}
   2afac:	4770      	bx	lr

0002afae <attr_read_group_cb>:
	if (!data->rsp->len) {
   2afae:	68d0      	ldr	r0, [r2, #12]
   2afb0:	7803      	ldrb	r3, [r0, #0]
   2afb2:	3104      	adds	r1, #4
   2afb4:	b913      	cbnz	r3, 2afbc <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2afb6:	7001      	strb	r1, [r0, #0]
	return true;
   2afb8:	2001      	movs	r0, #1
}
   2afba:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2afbc:	428b      	cmp	r3, r1
   2afbe:	d0fb      	beq.n	2afb8 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2afc0:	6891      	ldr	r1, [r2, #8]
   2afc2:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   2afc4:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2afc6:	3b04      	subs	r3, #4
   2afc8:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2afca:	6110      	str	r0, [r2, #16]
		return false;
   2afcc:	4770      	bx	lr

0002afce <write_cb>:
{
   2afce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2afd0:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2afd2:	4601      	mov	r1, r0
{
   2afd4:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2afd6:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2afda:	6820      	ldr	r0, [r4, #0]
   2afdc:	f000 fe99 	bl	2bd12 <bt_gatt_check_perm>
   2afe0:	4605      	mov	r5, r0
   2afe2:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2afe4:	bb20      	cbnz	r0, 2b030 <write_cb+0x62>
	if (!data->req) {
   2afe6:	7a23      	ldrb	r3, [r4, #8]
   2afe8:	b1ab      	cbz	r3, 2b016 <write_cb+0x48>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   2afea:	2b18      	cmp	r3, #24
   2afec:	bf14      	ite	ne
   2afee:	2300      	movne	r3, #0
   2aff0:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   2aff2:	9301      	str	r3, [sp, #4]
   2aff4:	8a63      	ldrh	r3, [r4, #18]
   2aff6:	9300      	str	r3, [sp, #0]
   2aff8:	68b7      	ldr	r7, [r6, #8]
   2affa:	8a23      	ldrh	r3, [r4, #16]
   2affc:	68e2      	ldr	r2, [r4, #12]
   2affe:	6820      	ldr	r0, [r4, #0]
   2b000:	4631      	mov	r1, r6
   2b002:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2b004:	1e03      	subs	r3, r0, #0
   2b006:	db08      	blt.n	2b01a <write_cb+0x4c>
   2b008:	8a22      	ldrh	r2, [r4, #16]
   2b00a:	4293      	cmp	r3, r2
   2b00c:	d10e      	bne.n	2b02c <write_cb+0x5e>
	data->err = 0U;
   2b00e:	2300      	movs	r3, #0
   2b010:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2b012:	2501      	movs	r5, #1
   2b014:	e007      	b.n	2b026 <write_cb+0x58>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2b016:	2302      	movs	r3, #2
   2b018:	e7eb      	b.n	2aff2 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   2b01a:	f113 0fff 	cmn.w	r3, #255	; 0xff
   2b01e:	d305      	bcc.n	2b02c <write_cb+0x5e>
		return -err;
   2b020:	425b      	negs	r3, r3
   2b022:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   2b024:	7523      	strb	r3, [r4, #20]
}
   2b026:	4628      	mov	r0, r5
   2b028:	b003      	add	sp, #12
   2b02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   2b02c:	230e      	movs	r3, #14
   2b02e:	e7f9      	b.n	2b024 <write_cb+0x56>
		return BT_GATT_ITER_STOP;
   2b030:	2500      	movs	r5, #0
   2b032:	e7f8      	b.n	2b026 <write_cb+0x58>

0002b034 <find_info_cb>:
{
   2b034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2b036:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   2b038:	6816      	ldr	r6, [r2, #0]
{
   2b03a:	4605      	mov	r5, r0
   2b03c:	460f      	mov	r7, r1
   2b03e:	4614      	mov	r4, r2
	if (!data->rsp) {
   2b040:	b963      	cbnz	r3, 2b05c <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2b042:	6850      	ldr	r0, [r2, #4]
   2b044:	2101      	movs	r1, #1
   2b046:	3008      	adds	r0, #8
   2b048:	f001 fc4c 	bl	2c8e4 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2b04c:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2b04e:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2b050:	781b      	ldrb	r3, [r3, #0]
   2b052:	2b00      	cmp	r3, #0
   2b054:	bf0c      	ite	eq
   2b056:	2301      	moveq	r3, #1
   2b058:	2302      	movne	r3, #2
   2b05a:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2b05c:	68a3      	ldr	r3, [r4, #8]
   2b05e:	781b      	ldrb	r3, [r3, #0]
   2b060:	2b01      	cmp	r3, #1
   2b062:	d003      	beq.n	2b06c <find_info_cb+0x38>
   2b064:	2b02      	cmp	r3, #2
   2b066:	d018      	beq.n	2b09a <find_info_cb+0x66>
			return BT_GATT_ITER_STOP;
   2b068:	2000      	movs	r0, #0
   2b06a:	e015      	b.n	2b098 <find_info_cb+0x64>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2b06c:	682b      	ldr	r3, [r5, #0]
   2b06e:	781b      	ldrb	r3, [r3, #0]
   2b070:	2b00      	cmp	r3, #0
   2b072:	d1f9      	bne.n	2b068 <find_info_cb+0x34>
   2b074:	6860      	ldr	r0, [r4, #4]
   2b076:	2104      	movs	r1, #4
   2b078:	3008      	adds	r0, #8
   2b07a:	f001 fc33 	bl	2c8e4 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2b07e:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2b080:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2b082:	885b      	ldrh	r3, [r3, #2]
   2b084:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2b086:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   2b088:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   2b08a:	899b      	ldrh	r3, [r3, #12]
   2b08c:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   2b08e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2b090:	2804      	cmp	r0, #4
   2b092:	bf94      	ite	ls
   2b094:	2000      	movls	r0, #0
   2b096:	2001      	movhi	r0, #1
}
   2b098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2b09a:	682b      	ldr	r3, [r5, #0]
   2b09c:	781b      	ldrb	r3, [r3, #0]
   2b09e:	2b02      	cmp	r3, #2
   2b0a0:	d1e2      	bne.n	2b068 <find_info_cb+0x34>
   2b0a2:	6860      	ldr	r0, [r4, #4]
   2b0a4:	2112      	movs	r1, #18
   2b0a6:	3008      	adds	r0, #8
   2b0a8:	f001 fc1c 	bl	2c8e4 <net_buf_simple_add>
   2b0ac:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b0ae:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2b0b0:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2b0b2:	f823 7b02 	strh.w	r7, [r3], #2
   2b0b6:	1c51      	adds	r1, r2, #1
   2b0b8:	3211      	adds	r2, #17
   2b0ba:	f851 0b04 	ldr.w	r0, [r1], #4
   2b0be:	f843 0b04 	str.w	r0, [r3], #4
   2b0c2:	4291      	cmp	r1, r2
   2b0c4:	d1f9      	bne.n	2b0ba <find_info_cb+0x86>
		if (chan->chan.tx.mtu - data->buf->len >
   2b0c6:	6863      	ldr	r3, [r4, #4]
   2b0c8:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   2b0ca:	899b      	ldrh	r3, [r3, #12]
   2b0cc:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2b0ce:	2812      	cmp	r0, #18
   2b0d0:	e7df      	b.n	2b092 <find_info_cb+0x5e>

0002b0d2 <z_log_msg_static_create.constprop.0>:
   2b0d2:	2300      	movs	r3, #0
   2b0d4:	f7ea bada 	b.w	1568c <z_impl_z_log_msg_static_create>

0002b0d8 <chan_req_send>:
{
   2b0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2b0da:	688e      	ldr	r6, [r1, #8]
{
   2b0dc:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2b0de:	4630      	mov	r0, r6
   2b0e0:	f7ff fec4 	bl	2ae6c <net_buf_frags_len>
   2b0e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   2b0e6:	4283      	cmp	r3, r0
{
   2b0e8:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2b0ea:	d30c      	bcc.n	2b106 <chan_req_send+0x2e>
	req->buf = NULL;
   2b0ec:	2700      	movs	r7, #0
	chan->req = req;
   2b0ee:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
	return chan_send(chan, buf);
   2b0f2:	4620      	mov	r0, r4
	req->buf = NULL;
   2b0f4:	608f      	str	r7, [r1, #8]
	return chan_send(chan, buf);
   2b0f6:	4631      	mov	r1, r6
   2b0f8:	f7ef fc24 	bl	1a944 <chan_send>
	if (err) {
   2b0fc:	b110      	cbz	r0, 2b104 <chan_req_send+0x2c>
		req->buf = buf;
   2b0fe:	60ae      	str	r6, [r5, #8]
		chan->req = NULL;
   2b100:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
}
   2b104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2b106:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2b10a:	e7fb      	b.n	2b104 <chan_req_send+0x2c>

0002b10c <process_queue>:
{
   2b10c:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2b10e:	2200      	movs	r2, #0
{
   2b110:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   2b112:	2300      	movs	r3, #0
   2b114:	4608      	mov	r0, r1
{
   2b116:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   2b118:	f001 fb44 	bl	2c7a4 <net_buf_get>
	if (buf) {
   2b11c:	4605      	mov	r5, r0
   2b11e:	b158      	cbz	r0, 2b138 <process_queue+0x2c>
	return chan_send(chan, buf);
   2b120:	4601      	mov	r1, r0
   2b122:	4620      	mov	r0, r4
   2b124:	f7ef fc0e 	bl	1a944 <chan_send>
		if (err) {
   2b128:	4604      	mov	r4, r0
   2b12a:	b118      	cbz	r0, 2b134 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   2b12c:	4629      	mov	r1, r5
   2b12e:	4630      	mov	r0, r6
   2b130:	f002 f9e9 	bl	2d506 <k_queue_prepend>
}
   2b134:	4620      	mov	r0, r4
   2b136:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2b138:	f06f 0401 	mvn.w	r4, #1
   2b13c:	e7fa      	b.n	2b134 <process_queue+0x28>

0002b13e <bt_att_chan_send_rsp>:
{
   2b13e:	b538      	push	{r3, r4, r5, lr}
   2b140:	4604      	mov	r4, r0
   2b142:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2b144:	f7ef fbfe 	bl	1a944 <chan_send>
	if (err) {
   2b148:	b130      	cbz	r0, 2b158 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2b14a:	4629      	mov	r1, r5
   2b14c:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   2b150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2b154:	f001 bb93 	b.w	2c87e <net_buf_put>
}
   2b158:	bd38      	pop	{r3, r4, r5, pc}

0002b15a <sys_slist_find_and_remove.isra.0>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b15a:	b510      	push	{r4, lr}
	return list->head;
   2b15c:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b15e:	2200      	movs	r2, #0
   2b160:	b153      	cbz	r3, 2b178 <sys_slist_find_and_remove.isra.0+0x1e>
   2b162:	428b      	cmp	r3, r1
   2b164:	d10e      	bne.n	2b184 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   2b166:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   2b168:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2b16a:	b932      	cbnz	r2, 2b17a <sys_slist_find_and_remove.isra.0+0x20>
   2b16c:	42a1      	cmp	r1, r4
	list->head = node;
   2b16e:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b170:	d100      	bne.n	2b174 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2b172:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2b174:	2300      	movs	r3, #0
   2b176:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b178:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   2b17a:	42a1      	cmp	r1, r4
	parent->next = child;
   2b17c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2b17e:	bf08      	it	eq
   2b180:	6042      	streq	r2, [r0, #4]
}
   2b182:	e7f7      	b.n	2b174 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2b184:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b186:	681b      	ldr	r3, [r3, #0]
   2b188:	e7ea      	b.n	2b160 <sys_slist_find_and_remove.isra.0+0x6>

0002b18a <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2b18a:	2301      	movs	r3, #1
   2b18c:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b190:	f3bf 8f5b 	dmb	ish
   2b194:	e850 3f00 	ldrex	r3, [r0]
   2b198:	ea43 0201 	orr.w	r2, r3, r1
   2b19c:	e840 2c00 	strex	ip, r2, [r0]
   2b1a0:	f1bc 0f00 	cmp.w	ip, #0
   2b1a4:	d1f6      	bne.n	2b194 <atomic_test_and_set_bit+0xa>
   2b1a6:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2b1aa:	4219      	tst	r1, r3
}
   2b1ac:	bf14      	ite	ne
   2b1ae:	2001      	movne	r0, #1
   2b1b0:	2000      	moveq	r0, #0
   2b1b2:	4770      	bx	lr

0002b1b4 <att_chan_read>:
{
   2b1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b1b8:	4680      	mov	r8, r0
   2b1ba:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2b1bc:	4610      	mov	r0, r2
{
   2b1be:	4699      	mov	r9, r3
   2b1c0:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2b1c2:	f7ff fe53 	bl	2ae6c <net_buf_frags_len>
   2b1c6:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2b1ca:	4283      	cmp	r3, r0
{
   2b1cc:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2b1ce:	d97a      	bls.n	2b2c6 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2b1d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2b1d4:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2b1d6:	4630      	mov	r0, r6
   2b1d8:	f001 fb62 	bl	2c8a0 <net_buf_frag_last>
	size_t len, total = 0;
   2b1dc:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2b1e0:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2b1e2:	4630      	mov	r0, r6
   2b1e4:	f7ff fe42 	bl	2ae6c <net_buf_frags_len>
   2b1e8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   2b1ec:	f105 0708 	add.w	r7, r5, #8
   2b1f0:	1a24      	subs	r4, r4, r0
   2b1f2:	4638      	mov	r0, r7
   2b1f4:	f001 fbb9 	bl	2c96a <net_buf_simple_tailroom>
   2b1f8:	4284      	cmp	r4, r0
   2b1fa:	d211      	bcs.n	2b220 <att_chan_read+0x6c>
   2b1fc:	4630      	mov	r0, r6
   2b1fe:	f7ff fe35 	bl	2ae6c <net_buf_frags_len>
   2b202:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2b206:	1a24      	subs	r4, r4, r0
		if (!len) {
   2b208:	bb34      	cbnz	r4, 2b258 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2b20a:	79b0      	ldrb	r0, [r6, #6]
   2b20c:	f7f4 f8ee 	bl	1f3ec <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2b210:	2200      	movs	r2, #0
   2b212:	2300      	movs	r3, #0
   2b214:	f001 fac1 	bl	2c79a <net_buf_alloc_fixed>
			if (!frag) {
   2b218:	4605      	mov	r5, r0
   2b21a:	b930      	cbnz	r0, 2b22a <att_chan_read+0x76>
	return total;
   2b21c:	4657      	mov	r7, sl
   2b21e:	e02c      	b.n	2b27a <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2b220:	4638      	mov	r0, r7
   2b222:	f001 fba2 	bl	2c96a <net_buf_simple_tailroom>
   2b226:	4604      	mov	r4, r0
   2b228:	e7ee      	b.n	2b208 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2b22a:	4601      	mov	r1, r0
   2b22c:	4630      	mov	r0, r6
   2b22e:	f001 fb48 	bl	2c8c2 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2b232:	4630      	mov	r0, r6
   2b234:	f7ff fe1a 	bl	2ae6c <net_buf_frags_len>
   2b238:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2b23c:	f105 0708 	add.w	r7, r5, #8
   2b240:	1a24      	subs	r4, r4, r0
   2b242:	4638      	mov	r0, r7
   2b244:	f001 fb91 	bl	2c96a <net_buf_simple_tailroom>
   2b248:	4284      	cmp	r4, r0
   2b24a:	d21a      	bcs.n	2b282 <att_chan_read+0xce>
   2b24c:	4630      	mov	r0, r6
   2b24e:	f7ff fe0d 	bl	2ae6c <net_buf_frags_len>
   2b252:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2b256:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2b258:	68a9      	ldr	r1, [r5, #8]
   2b25a:	89aa      	ldrh	r2, [r5, #12]
   2b25c:	f8db 7004 	ldr.w	r7, [fp, #4]
   2b260:	9803      	ldr	r0, [sp, #12]
   2b262:	f8cd 9000 	str.w	r9, [sp]
   2b266:	440a      	add	r2, r1
   2b268:	b2a3      	uxth	r3, r4
   2b26a:	4659      	mov	r1, fp
   2b26c:	47b8      	blx	r7
		if (read < 0) {
   2b26e:	1e07      	subs	r7, r0, #0
   2b270:	da0c      	bge.n	2b28c <att_chan_read+0xd8>
				return total;
   2b272:	f1ba 0f00 	cmp.w	sl, #0
   2b276:	bf18      	it	ne
   2b278:	4657      	movne	r7, sl
}
   2b27a:	4638      	mov	r0, r7
   2b27c:	b005      	add	sp, #20
   2b27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b282:	4638      	mov	r0, r7
   2b284:	f001 fb71 	bl	2c96a <net_buf_simple_tailroom>
   2b288:	4604      	mov	r4, r0
   2b28a:	e7e5      	b.n	2b258 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2b28c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b28e:	b993      	cbnz	r3, 2b2b6 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2b290:	4639      	mov	r1, r7
   2b292:	f105 0008 	add.w	r0, r5, #8
   2b296:	f001 fb25 	bl	2c8e4 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2b29a:	4630      	mov	r0, r6
   2b29c:	f7ff fde6 	bl	2ae6c <net_buf_frags_len>
   2b2a0:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   2b2a4:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2b2a6:	4283      	cmp	r3, r0
		total += read;
   2b2a8:	44ba      	add	sl, r7
		offset += read;
   2b2aa:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2b2ae:	d9b5      	bls.n	2b21c <att_chan_read+0x68>
   2b2b0:	42a7      	cmp	r7, r4
   2b2b2:	d096      	beq.n	2b1e2 <att_chan_read+0x2e>
   2b2b4:	e7b2      	b.n	2b21c <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2b2b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b2b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b2ba:	4639      	mov	r1, r7
   2b2bc:	4628      	mov	r0, r5
   2b2be:	4798      	blx	r3
   2b2c0:	2800      	cmp	r0, #0
   2b2c2:	d1e5      	bne.n	2b290 <att_chan_read+0xdc>
   2b2c4:	e7aa      	b.n	2b21c <att_chan_read+0x68>
		return 0;
   2b2c6:	2700      	movs	r7, #0
   2b2c8:	e7d7      	b.n	2b27a <att_chan_read+0xc6>

0002b2ca <read_cb>:
{
   2b2ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2b2ce:	f8d2 8000 	ldr.w	r8, [r2]
{
   2b2d2:	4606      	mov	r6, r0
	data->err = 0x00;
   2b2d4:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2b2d6:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   2b2da:	7317      	strb	r7, [r2, #12]
{
   2b2dc:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2b2de:	4631      	mov	r1, r6
   2b2e0:	2295      	movs	r2, #149	; 0x95
   2b2e2:	f000 fd16 	bl	2bd12 <bt_gatt_check_perm>
   2b2e6:	4604      	mov	r4, r0
   2b2e8:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2b2ea:	b9a0      	cbnz	r0, 2b316 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2b2ec:	e9cd 0000 	strd	r0, r0, [sp]
   2b2f0:	88ab      	ldrh	r3, [r5, #4]
   2b2f2:	68aa      	ldr	r2, [r5, #8]
   2b2f4:	4631      	mov	r1, r6
   2b2f6:	4640      	mov	r0, r8
   2b2f8:	f7ff ff5c 	bl	2b1b4 <att_chan_read>
	if (ret < 0) {
   2b2fc:	1e03      	subs	r3, r0, #0
   2b2fe:	da0c      	bge.n	2b31a <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   2b300:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2b304:	bf26      	itte	cs
   2b306:	425b      	negcs	r3, r3
   2b308:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2b30a:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   2b30c:	732b      	strb	r3, [r5, #12]
}
   2b30e:	4620      	mov	r0, r4
   2b310:	b002      	add	sp, #8
   2b312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   2b316:	463c      	mov	r4, r7
   2b318:	e7f9      	b.n	2b30e <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   2b31a:	2401      	movs	r4, #1
   2b31c:	e7f7      	b.n	2b30e <read_cb+0x44>

0002b31e <read_vl_cb>:
{
   2b31e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2b322:	f8d2 8000 	ldr.w	r8, [r2]
{
   2b326:	4606      	mov	r6, r0
	data->err = 0x00;
   2b328:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2b32a:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   2b32e:	7317      	strb	r7, [r2, #12]
{
   2b330:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2b332:	4631      	mov	r1, r6
   2b334:	2295      	movs	r2, #149	; 0x95
   2b336:	f000 fcec 	bl	2bd12 <bt_gatt_check_perm>
   2b33a:	4604      	mov	r4, r0
   2b33c:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2b33e:	bb18      	cbnz	r0, 2b388 <read_vl_cb+0x6a>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2b340:	68a8      	ldr	r0, [r5, #8]
   2b342:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2b346:	8982      	ldrh	r2, [r0, #12]
   2b348:	1a9b      	subs	r3, r3, r2
   2b34a:	2b01      	cmp	r3, #1
   2b34c:	dd15      	ble.n	2b37a <read_vl_cb+0x5c>
   2b34e:	2102      	movs	r1, #2
   2b350:	3008      	adds	r0, #8
   2b352:	f001 fac7 	bl	2c8e4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2b356:	88ab      	ldrh	r3, [r5, #4]
   2b358:	68aa      	ldr	r2, [r5, #8]
   2b35a:	e9cd 4400 	strd	r4, r4, [sp]
   2b35e:	4607      	mov	r7, r0
   2b360:	4631      	mov	r1, r6
   2b362:	4640      	mov	r0, r8
   2b364:	f7ff ff26 	bl	2b1b4 <att_chan_read>
	if (read < 0) {
   2b368:	1e03      	subs	r3, r0, #0
   2b36a:	da0a      	bge.n	2b382 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   2b36c:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2b370:	bf26      	itte	cs
   2b372:	425b      	negcs	r3, r3
   2b374:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2b376:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   2b378:	732b      	strb	r3, [r5, #12]
}
   2b37a:	4620      	mov	r0, r4
   2b37c:	b002      	add	sp, #8
   2b37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   2b382:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   2b384:	2401      	movs	r4, #1
   2b386:	e7f8      	b.n	2b37a <read_vl_cb+0x5c>
		return BT_GATT_ITER_STOP;
   2b388:	463c      	mov	r4, r7
   2b38a:	e7f6      	b.n	2b37a <read_vl_cb+0x5c>

0002b38c <bt_att_sent>:
{
   2b38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b38e:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2b390:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b392:	f100 038c 	add.w	r3, r0, #140	; 0x8c
	struct bt_att *att = chan->att;
   2b396:	f850 4c04 	ldr.w	r4, [r0, #-4]
   2b39a:	f3bf 8f5b 	dmb	ish
   2b39e:	e853 2f00 	ldrex	r2, [r3]
   2b3a2:	f022 0210 	bic.w	r2, r2, #16
   2b3a6:	e843 2100 	strex	r1, r2, [r3]
   2b3aa:	2900      	cmp	r1, #0
   2b3ac:	d1f7      	bne.n	2b39e <bt_att_sent+0x12>
   2b3ae:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2b3b2:	b30c      	cbz	r4, 2b3f8 <bt_att_sent+0x6c>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2b3b4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   2b3b8:	b98b      	cbnz	r3, 2b3de <bt_att_sent+0x52>
   2b3ba:	6863      	ldr	r3, [r4, #4]
   2b3bc:	b17b      	cbz	r3, 2b3de <bt_att_sent+0x52>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2b3be:	1d20      	adds	r0, r4, #4
   2b3c0:	f7ff fd4a 	bl	2ae58 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2b3c4:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2b3c6:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2b3c8:	4638      	mov	r0, r7
   2b3ca:	f7ff fe85 	bl	2b0d8 <chan_req_send>
   2b3ce:	2800      	cmp	r0, #0
   2b3d0:	da12      	bge.n	2b3f8 <bt_att_sent+0x6c>
	parent->next = child;
   2b3d2:	6863      	ldr	r3, [r4, #4]
   2b3d4:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2b3d6:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2b3d8:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2b3da:	b903      	cbnz	r3, 2b3de <bt_att_sent+0x52>
	list->tail = node;
   2b3dc:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2b3de:	f105 0194 	add.w	r1, r5, #148	; 0x94
   2b3e2:	4638      	mov	r0, r7
   2b3e4:	f7ff fe92 	bl	2b10c <process_queue>
	if (!err) {
   2b3e8:	b130      	cbz	r0, 2b3f8 <bt_att_sent+0x6c>
	(void)process_queue(chan, &att->tx_queue);
   2b3ea:	f104 010c 	add.w	r1, r4, #12
   2b3ee:	4638      	mov	r0, r7
}
   2b3f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2b3f4:	f7ff be8a 	b.w	2b10c <process_queue>
}
   2b3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b3fa <att_req_send_process>:
{
   2b3fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   2b3fe:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   2b400:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b402:	2c00      	cmp	r4, #0
   2b404:	d03b      	beq.n	2b47e <att_req_send_process+0x84>
	return node->next;
   2b406:	f854 59e0 	ldr.w	r5, [r4], #-224
   2b40a:	b105      	cbz	r5, 2b40e <att_req_send_process+0x14>
   2b40c:	3de0      	subs	r5, #224	; 0xe0
{
   2b40e:	2300      	movs	r3, #0
   2b410:	461e      	mov	r6, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   2b412:	f108 0704 	add.w	r7, r8, #4
		if (chan->req) {
   2b416:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   2b41a:	b9e2      	cbnz	r2, 2b456 <att_req_send_process+0x5c>
		if (!req && prev &&
   2b41c:	b16e      	cbz	r6, 2b43a <att_req_send_process+0x40>
	sys_snode_t *node = sys_slist_get(reqs);
   2b41e:	4638      	mov	r0, r7
   2b420:	f7ff fd1a 	bl	2ae58 <sys_slist_get>
	if (node) {
   2b424:	4606      	mov	r6, r0
   2b426:	b9c0      	cbnz	r0, 2b45a <att_req_send_process+0x60>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b428:	b34d      	cbz	r5, 2b47e <att_req_send_process+0x84>
   2b42a:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
   2b42e:	b102      	cbz	r2, 2b432 <att_req_send_process+0x38>
   2b430:	3ae0      	subs	r2, #224	; 0xe0
{
   2b432:	4623      	mov	r3, r4
   2b434:	462c      	mov	r4, r5
   2b436:	4615      	mov	r5, r2
   2b438:	e7ed      	b.n	2b416 <att_req_send_process+0x1c>
		if (!req && prev &&
   2b43a:	2b00      	cmp	r3, #0
   2b43c:	d0ef      	beq.n	2b41e <att_req_send_process+0x24>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2b43e:	2103      	movs	r1, #3
   2b440:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2b444:	f7ff fd6f 	bl	2af26 <atomic_test_bit>
   2b448:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2b44a:	f103 0090 	add.w	r0, r3, #144	; 0x90
   2b44e:	f7ff fd6a 	bl	2af26 <atomic_test_bit>
		if (!req && prev &&
   2b452:	4282      	cmp	r2, r0
   2b454:	d1e3      	bne.n	2b41e <att_req_send_process+0x24>
   2b456:	461c      	mov	r4, r3
   2b458:	e7e6      	b.n	2b428 <att_req_send_process+0x2e>
	return chan_req_send(chan, req);
   2b45a:	4601      	mov	r1, r0
   2b45c:	4620      	mov	r0, r4
   2b45e:	f7ff fe3b 	bl	2b0d8 <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2b462:	2800      	cmp	r0, #0
   2b464:	da0b      	bge.n	2b47e <att_req_send_process+0x84>
	parent->next = child;
   2b466:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2b46a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2b46c:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   2b470:	f8c8 6004 	str.w	r6, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   2b474:	2b00      	cmp	r3, #0
   2b476:	d1d7      	bne.n	2b428 <att_req_send_process+0x2e>
	list->tail = node;
   2b478:	f8c8 6008 	str.w	r6, [r8, #8]
}
   2b47c:	e7d4      	b.n	2b428 <att_req_send_process+0x2e>
}
   2b47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b482 <bt_att_status>:
{
   2b482:	b538      	push	{r3, r4, r5, lr}
   2b484:	4605      	mov	r5, r0
   2b486:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2b488:	2100      	movs	r1, #0
   2b48a:	f7ff fd4c 	bl	2af26 <atomic_test_bit>
   2b48e:	b1c0      	cbz	r0, 2b4c2 <bt_att_status+0x40>
	if (!chan->att) {
   2b490:	f855 0c04 	ldr.w	r0, [r5, #-4]
   2b494:	b1a8      	cbz	r0, 2b4c2 <bt_att_status+0x40>
	if (chan->req) {
   2b496:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   2b49a:	b993      	cbnz	r3, 2b4c2 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   2b49c:	3004      	adds	r0, #4
   2b49e:	f7ff fcdb 	bl	2ae58 <sys_slist_get>
	if (!node) {
   2b4a2:	4604      	mov	r4, r0
   2b4a4:	b168      	cbz	r0, 2b4c2 <bt_att_status+0x40>
	return chan_req_send(chan, req);
   2b4a6:	4601      	mov	r1, r0
   2b4a8:	1f28      	subs	r0, r5, #4
   2b4aa:	f7ff fe15 	bl	2b0d8 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2b4ae:	2800      	cmp	r0, #0
   2b4b0:	da07      	bge.n	2b4c2 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   2b4b2:	f855 3c04 	ldr.w	r3, [r5, #-4]
	parent->next = child;
   2b4b6:	685a      	ldr	r2, [r3, #4]
   2b4b8:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2b4ba:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2b4bc:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2b4be:	b902      	cbnz	r2, 2b4c2 <bt_att_status+0x40>
	list->tail = node;
   2b4c0:	609c      	str	r4, [r3, #8]
}
   2b4c2:	bd38      	pop	{r3, r4, r5, pc}

0002b4c4 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   2b4c4:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   2b4c6:	6883      	ldr	r3, [r0, #8]
   2b4c8:	695b      	ldr	r3, [r3, #20]
   2b4ca:	b10b      	cbz	r3, 2b4d0 <att_sent+0xc>
		chan->ops->sent(chan);
   2b4cc:	3004      	adds	r0, #4
   2b4ce:	4718      	bx	r3
}
   2b4d0:	4770      	bx	lr

0002b4d2 <att_unknown>:
{
   2b4d2:	b510      	push	{r4, lr}
   2b4d4:	460c      	mov	r4, r1
	if (!err) {
   2b4d6:	b90a      	cbnz	r2, 2b4dc <att_unknown+0xa>
		att_sent(conn, user_data);
   2b4d8:	f7ff fff4 	bl	2b4c4 <att_sent>
	tx_meta_data_free(user_data);
   2b4dc:	4620      	mov	r0, r4
}
   2b4de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2b4e2:	f7ef b90d 	b.w	1a700 <tx_meta_data_free>

0002b4e6 <att_tx_complete>:
{
   2b4e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b4ea:	4606      	mov	r6, r0
   2b4ec:	460d      	mov	r5, r1
	if (!err) {
   2b4ee:	4614      	mov	r4, r2
   2b4f0:	b90a      	cbnz	r2, 2b4f6 <att_tx_complete+0x10>
		att_sent(conn, user_data);
   2b4f2:	f7ff ffe7 	bl	2b4c4 <att_sent>
	tx_meta_data_free(data);
   2b4f6:	4628      	mov	r0, r5
	bt_gatt_complete_func_t func = data->func;
   2b4f8:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   2b4fa:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   2b4fe:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   2b502:	f7ef f8fd 	bl	1a700 <tx_meta_data_free>
	if (!err && func) {
   2b506:	b904      	cbnz	r4, 2b50a <att_tx_complete+0x24>
   2b508:	b92f      	cbnz	r7, 2b516 <att_tx_complete+0x30>
}
   2b50a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   2b50e:	4649      	mov	r1, r9
   2b510:	4630      	mov	r0, r6
   2b512:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   2b514:	3401      	adds	r4, #1
   2b516:	b2a3      	uxth	r3, r4
   2b518:	4598      	cmp	r8, r3
   2b51a:	d8f8      	bhi.n	2b50e <att_tx_complete+0x28>
   2b51c:	e7f5      	b.n	2b50a <att_tx_complete+0x24>

0002b51e <att_req_sent>:
{
   2b51e:	b510      	push	{r4, lr}
   2b520:	460c      	mov	r4, r1
	if (!err) {
   2b522:	b90a      	cbnz	r2, 2b528 <att_req_sent+0xa>
		att_sent(conn, user_data);
   2b524:	f7ff ffce 	bl	2b4c4 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   2b528:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   2b52a:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   2b52e:	b12b      	cbz	r3, 2b53c <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2b530:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2b534:	2300      	movs	r3, #0
   2b536:	30b0      	adds	r0, #176	; 0xb0
   2b538:	f7f8 fa06 	bl	23948 <k_work_reschedule>
	tx_meta_data_free(user_data);
   2b53c:	4620      	mov	r0, r4
}
   2b53e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2b542:	f7ef b8dd 	b.w	1a700 <tx_meta_data_free>

0002b546 <att_cfm_sent>:
{
   2b546:	b510      	push	{r4, lr}
   2b548:	460c      	mov	r4, r1
	if (!err) {
   2b54a:	b90a      	cbnz	r2, 2b550 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   2b54c:	f7ff ffba 	bl	2b4c4 <att_sent>
   2b550:	6823      	ldr	r3, [r4, #0]
   2b552:	f3bf 8f5b 	dmb	ish
   2b556:	3390      	adds	r3, #144	; 0x90
   2b558:	e853 2f00 	ldrex	r2, [r3]
   2b55c:	f022 0202 	bic.w	r2, r2, #2
   2b560:	e843 2100 	strex	r1, r2, [r3]
   2b564:	2900      	cmp	r1, #0
   2b566:	d1f7      	bne.n	2b558 <att_cfm_sent+0x12>
   2b568:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2b56c:	4620      	mov	r0, r4
}
   2b56e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2b572:	f7ef b8c5 	b.w	1a700 <tx_meta_data_free>

0002b576 <att_rsp_sent>:
{
   2b576:	b510      	push	{r4, lr}
   2b578:	460c      	mov	r4, r1
	if (!err) {
   2b57a:	b90a      	cbnz	r2, 2b580 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   2b57c:	f7ff ffa2 	bl	2b4c4 <att_sent>
   2b580:	6823      	ldr	r3, [r4, #0]
   2b582:	f3bf 8f5b 	dmb	ish
   2b586:	3390      	adds	r3, #144	; 0x90
   2b588:	e853 2f00 	ldrex	r2, [r3]
   2b58c:	f022 0201 	bic.w	r2, r2, #1
   2b590:	e843 2100 	strex	r1, r2, [r3]
   2b594:	2900      	cmp	r1, #0
   2b596:	d1f7      	bne.n	2b588 <att_rsp_sent+0x12>
   2b598:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2b59c:	4620      	mov	r0, r4
}
   2b59e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2b5a2:	f7ef b8ad 	b.w	1a700 <tx_meta_data_free>

0002b5a6 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2b5a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b5aa:	4688      	mov	r8, r1
   2b5ac:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2b5ae:	2101      	movs	r1, #1
   2b5b0:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2b5b2:	4605      	mov	r5, r0
   2b5b4:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2b5b6:	f7ef fb97 	bl	1ace8 <bt_att_chan_create_pdu>
	if (!buf) {
   2b5ba:	4604      	mov	r4, r0
   2b5bc:	b170      	cbz	r0, 2b5dc <send_err_rsp.part.0+0x36>
   2b5be:	2104      	movs	r1, #4
   2b5c0:	3008      	adds	r0, #8
   2b5c2:	f001 f98f 	bl	2c8e4 <net_buf_simple_add>
	rsp->request = req;
   2b5c6:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   2b5ca:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   2b5cc:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf);
   2b5d0:	4621      	mov	r1, r4
   2b5d2:	4628      	mov	r0, r5
}
   2b5d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   2b5d8:	f7ff bdb1 	b.w	2b13e <bt_att_chan_send_rsp>
}
   2b5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b5e0 <att_write_cmd>:
{
   2b5e0:	b530      	push	{r4, r5, lr}
   2b5e2:	460c      	mov	r4, r1
   2b5e4:	b085      	sub	sp, #20
   2b5e6:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2b5e8:	f101 0008 	add.w	r0, r1, #8
   2b5ec:	f001 f9b1 	bl	2c952 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2b5f0:	89a2      	ldrh	r2, [r4, #12]
   2b5f2:	9202      	str	r2, [sp, #8]
   2b5f4:	68a2      	ldr	r2, [r4, #8]
   2b5f6:	9201      	str	r2, [sp, #4]
   2b5f8:	2200      	movs	r2, #0
   2b5fa:	4603      	mov	r3, r0
   2b5fc:	9200      	str	r2, [sp, #0]
   2b5fe:	4611      	mov	r1, r2
   2b600:	4628      	mov	r0, r5
   2b602:	f7ef fc83 	bl	1af0c <att_write_rsp>
}
   2b606:	b005      	add	sp, #20
   2b608:	bd30      	pop	{r4, r5, pc}

0002b60a <att_write_req>:
{
   2b60a:	b530      	push	{r4, r5, lr}
   2b60c:	460c      	mov	r4, r1
   2b60e:	b085      	sub	sp, #20
   2b610:	4605      	mov	r5, r0
   2b612:	f101 0008 	add.w	r0, r1, #8
   2b616:	f001 f99c 	bl	2c952 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2b61a:	89a2      	ldrh	r2, [r4, #12]
   2b61c:	9202      	str	r2, [sp, #8]
   2b61e:	68a2      	ldr	r2, [r4, #8]
   2b620:	9201      	str	r2, [sp, #4]
   2b622:	2200      	movs	r2, #0
   2b624:	4603      	mov	r3, r0
   2b626:	9200      	str	r2, [sp, #0]
   2b628:	2112      	movs	r1, #18
   2b62a:	2213      	movs	r2, #19
   2b62c:	4628      	mov	r0, r5
   2b62e:	f7ef fc6d 	bl	1af0c <att_write_rsp>
}
   2b632:	b005      	add	sp, #20
   2b634:	bd30      	pop	{r4, r5, pc}

0002b636 <att_read_blob_req>:
{
   2b636:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2b638:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2b63a:	8813      	ldrh	r3, [r2, #0]
   2b63c:	8852      	ldrh	r2, [r2, #2]
   2b63e:	9200      	str	r2, [sp, #0]
   2b640:	210c      	movs	r1, #12
   2b642:	220d      	movs	r2, #13
   2b644:	f7ef ff8c 	bl	1b560 <att_read_rsp>
}
   2b648:	b003      	add	sp, #12
   2b64a:	f85d fb04 	ldr.w	pc, [sp], #4

0002b64e <att_read_req>:
{
   2b64e:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2b650:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2b652:	2200      	movs	r2, #0
   2b654:	881b      	ldrh	r3, [r3, #0]
   2b656:	9200      	str	r2, [sp, #0]
   2b658:	210a      	movs	r1, #10
   2b65a:	220b      	movs	r2, #11
   2b65c:	f7ef ff80 	bl	1b560 <att_read_rsp>
}
   2b660:	b003      	add	sp, #12
   2b662:	f85d fb04 	ldr.w	pc, [sp], #4

0002b666 <att_mtu_req>:
{
   2b666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b668:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2b66a:	f850 2b90 	ldr.w	r2, [r0], #144
{
   2b66e:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2b670:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2b672:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2b674:	f7ff fc57 	bl	2af26 <atomic_test_bit>
   2b678:	4604      	mov	r4, r0
   2b67a:	b9f0      	cbnz	r0, 2b6ba <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2b67c:	689b      	ldr	r3, [r3, #8]
   2b67e:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2b680:	2e16      	cmp	r6, #22
   2b682:	d91c      	bls.n	2b6be <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2b684:	4638      	mov	r0, r7
   2b686:	2202      	movs	r2, #2
   2b688:	f7ef fcf2 	bl	1b070 <bt_att_create_pdu>
	if (!pdu) {
   2b68c:	4607      	mov	r7, r0
   2b68e:	b1c0      	cbz	r0, 2b6c2 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   2b690:	2102      	movs	r1, #2
   2b692:	3008      	adds	r0, #8
   2b694:	f001 f926 	bl	2c8e4 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2b698:	2341      	movs	r3, #65	; 0x41
   2b69a:	7003      	strb	r3, [r0, #0]
   2b69c:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2b69e:	4639      	mov	r1, r7
   2b6a0:	4628      	mov	r0, r5
   2b6a2:	f7ff fd4c 	bl	2b13e <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2b6a6:	2e41      	cmp	r6, #65	; 0x41
   2b6a8:	bf28      	it	cs
   2b6aa:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   2b6ac:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2b6ae:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2b6b0:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2b6b2:	f7ff fc4c 	bl	2af4e <att_chan_mtu_updated>
	return 0;
   2b6b6:	4620      	mov	r0, r4
}
   2b6b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2b6ba:	2006      	movs	r0, #6
   2b6bc:	e7fc      	b.n	2b6b8 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   2b6be:	2004      	movs	r0, #4
   2b6c0:	e7fa      	b.n	2b6b8 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   2b6c2:	200e      	movs	r0, #14
   2b6c4:	e7f8      	b.n	2b6b8 <att_mtu_req+0x52>

0002b6c6 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2b6c6:	898a      	ldrh	r2, [r1, #12]
   2b6c8:	6889      	ldr	r1, [r1, #8]
   2b6ca:	2300      	movs	r3, #0
   2b6cc:	f7f0 b8fe 	b.w	1b8cc <att_handle_rsp>

0002b6d0 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   2b6d0:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   2b6d4:	b570      	push	{r4, r5, r6, lr}
   2b6d6:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2b6d8:	1f06      	subs	r6, r0, #4
	if (!att_chan->att) {
   2b6da:	2b00      	cmp	r3, #0
   2b6dc:	d039      	beq.n	2b752 <bt_att_encrypt_change+0x82>
	if (hci_status) {
   2b6de:	b171      	cbz	r1, 2b6fe <bt_att_encrypt_change+0x2e>
		if (att_chan->req && att_chan->req->retrying) {
   2b6e0:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
   2b6e4:	2b00      	cmp	r3, #0
   2b6e6:	d034      	beq.n	2b752 <bt_att_encrypt_change+0x82>
   2b6e8:	7c1b      	ldrb	r3, [r3, #16]
   2b6ea:	07da      	lsls	r2, r3, #31
   2b6ec:	d531      	bpl.n	2b752 <bt_att_encrypt_change+0x82>
		return BT_ATT_ERR_AUTHENTICATION;
   2b6ee:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   2b6f0:	2200      	movs	r2, #0
   2b6f2:	4630      	mov	r0, r6
   2b6f4:	4611      	mov	r1, r2
}
   2b6f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2b6fa:	f7f0 b8e7 	b.w	1b8cc <att_handle_rsp>
	struct bt_conn *conn = le_chan->chan.conn;
   2b6fe:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   2b700:	4628      	mov	r0, r5
   2b702:	f7f1 fc1f 	bl	1cf44 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2b706:	7a6b      	ldrb	r3, [r5, #9]
   2b708:	2b01      	cmp	r3, #1
   2b70a:	d022      	beq.n	2b752 <bt_att_encrypt_change+0x82>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2b70c:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
   2b710:	b1fd      	cbz	r5, 2b752 <bt_att_encrypt_change+0x82>
   2b712:	7c2b      	ldrb	r3, [r5, #16]
   2b714:	07db      	lsls	r3, r3, #31
   2b716:	d51c      	bpl.n	2b752 <bt_att_encrypt_change+0x82>
	if (!req->encode) {
   2b718:	68eb      	ldr	r3, [r5, #12]
   2b71a:	2b00      	cmp	r3, #0
   2b71c:	d0e7      	beq.n	2b6ee <bt_att_encrypt_change+0x1e>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2b71e:	696a      	ldr	r2, [r5, #20]
   2b720:	7c69      	ldrb	r1, [r5, #17]
   2b722:	4630      	mov	r0, r6
   2b724:	f7ef fae0 	bl	1ace8 <bt_att_chan_create_pdu>
	if (!buf) {
   2b728:	4604      	mov	r4, r0
   2b72a:	b150      	cbz	r0, 2b742 <bt_att_encrypt_change+0x72>
	if (req->encode(buf, req->len, req->user_data)) {
   2b72c:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   2b730:	68eb      	ldr	r3, [r5, #12]
   2b732:	4798      	blx	r3
   2b734:	b138      	cbz	r0, 2b746 <bt_att_encrypt_change+0x76>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2b736:	6960      	ldr	r0, [r4, #20]
   2b738:	f7ee ffe2 	bl	1a700 <tx_meta_data_free>
		net_buf_unref(buf);
   2b73c:	4620      	mov	r0, r4
   2b73e:	f7f3 ff19 	bl	1f574 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2b742:	230e      	movs	r3, #14
   2b744:	e7d4      	b.n	2b6f0 <bt_att_encrypt_change+0x20>
	if (chan_send(att_chan, buf)) {
   2b746:	4621      	mov	r1, r4
   2b748:	4630      	mov	r0, r6
   2b74a:	f7ef f8fb 	bl	1a944 <chan_send>
   2b74e:	2800      	cmp	r0, #0
   2b750:	d1f1      	bne.n	2b736 <bt_att_encrypt_change+0x66>
}
   2b752:	bd70      	pop	{r4, r5, r6, pc}

0002b754 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   2b754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b756:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   2b758:	f7ef f8a2 	bl	1a8a0 <att_get>
	if (!att) {
   2b75c:	4604      	mov	r4, r0
   2b75e:	b940      	cbnz	r0, 2b772 <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2b760:	6968      	ldr	r0, [r5, #20]
   2b762:	f7ee ffcd 	bl	1a700 <tx_meta_data_free>
		net_buf_unref(buf);
   2b766:	4628      	mov	r0, r5
   2b768:	f7f3 ff04 	bl	1f574 <net_buf_unref>
		return -ENOTCONN;
   2b76c:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   2b770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   2b772:	f100 060c 	add.w	r6, r0, #12
   2b776:	4629      	mov	r1, r5
   2b778:	4630      	mov	r0, r6
   2b77a:	f001 f880 	bl	2c87e <net_buf_put>
	return list->head;
   2b77e:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b780:	4625      	mov	r5, r4
   2b782:	b11c      	cbz	r4, 2b78c <bt_att_send+0x38>
	return node->next;
   2b784:	f855 49e0 	ldr.w	r4, [r5], #-224
   2b788:	b104      	cbz	r4, 2b78c <bt_att_send+0x38>
   2b78a:	3ce0      	subs	r4, #224	; 0xe0
   2b78c:	2300      	movs	r3, #0
   2b78e:	461f      	mov	r7, r3
   2b790:	b13d      	cbz	r5, 2b7a2 <bt_att_send+0x4e>
		if (err == -ENOENT && prev &&
   2b792:	1c9a      	adds	r2, r3, #2
   2b794:	d007      	beq.n	2b7a6 <bt_att_send+0x52>
		err = process_queue(chan, &att->tx_queue);
   2b796:	4631      	mov	r1, r6
   2b798:	4628      	mov	r0, r5
   2b79a:	f7ff fcb7 	bl	2b10c <process_queue>
		if (!err) {
   2b79e:	4603      	mov	r3, r0
   2b7a0:	b980      	cbnz	r0, 2b7c4 <bt_att_send+0x70>
	return 0;
   2b7a2:	2000      	movs	r0, #0
   2b7a4:	e7e4      	b.n	2b770 <bt_att_send+0x1c>
		if (err == -ENOENT && prev &&
   2b7a6:	2f00      	cmp	r7, #0
   2b7a8:	d0f5      	beq.n	2b796 <bt_att_send+0x42>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2b7aa:	2103      	movs	r1, #3
   2b7ac:	f105 0090 	add.w	r0, r5, #144	; 0x90
   2b7b0:	f7ff fbb9 	bl	2af26 <atomic_test_bit>
   2b7b4:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2b7b6:	f107 0090 	add.w	r0, r7, #144	; 0x90
   2b7ba:	f7ff fbb4 	bl	2af26 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   2b7be:	4282      	cmp	r2, r0
   2b7c0:	d1e9      	bne.n	2b796 <bt_att_send+0x42>
   2b7c2:	463d      	mov	r5, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b7c4:	b13c      	cbz	r4, 2b7d6 <bt_att_send+0x82>
   2b7c6:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   2b7ca:	b102      	cbz	r2, 2b7ce <bt_att_send+0x7a>
   2b7cc:	3ae0      	subs	r2, #224	; 0xe0
   2b7ce:	462f      	mov	r7, r5
   2b7d0:	4625      	mov	r5, r4
   2b7d2:	4614      	mov	r4, r2
   2b7d4:	e7dc      	b.n	2b790 <bt_att_send+0x3c>
   2b7d6:	4622      	mov	r2, r4
   2b7d8:	e7f9      	b.n	2b7ce <bt_att_send+0x7a>

0002b7da <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   2b7da:	b510      	push	{r4, lr}
   2b7dc:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   2b7de:	f7ef f85f 	bl	1a8a0 <att_get>
	if (!att) {
   2b7e2:	b160      	cbz	r0, 2b7fe <bt_att_req_send+0x24>
	parent->next = child;
   2b7e4:	2300      	movs	r3, #0
   2b7e6:	6023      	str	r3, [r4, #0]
	return list->tail;
   2b7e8:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   2b7ea:	b92b      	cbnz	r3, 2b7f8 <bt_att_req_send+0x1e>
	list->head = node;
   2b7ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   2b7f0:	f7ff fe03 	bl	2b3fa <att_req_send_process>

	return 0;
   2b7f4:	2000      	movs	r0, #0
}
   2b7f6:	bd10      	pop	{r4, pc}
	parent->next = child;
   2b7f8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2b7fa:	6084      	str	r4, [r0, #8]
}
   2b7fc:	e7f8      	b.n	2b7f0 <bt_att_req_send+0x16>
		return -ENOTCONN;
   2b7fe:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2b802:	e7f8      	b.n	2b7f6 <bt_att_req_send+0x1c>

0002b804 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2b804:	2001      	movs	r0, #1
   2b806:	4770      	bx	lr

0002b808 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2b808:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   2b80a:	f7ef f849 	bl	1a8a0 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2b80e:	b198      	cbz	r0, 2b838 <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   2b810:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2b812:	b18b      	cbz	r3, 2b838 <bt_att_clear_out_of_sync_sent+0x30>
   2b814:	f3bf 8f5b 	dmb	ish
   2b818:	3be0      	subs	r3, #224	; 0xe0
   2b81a:	f103 0290 	add.w	r2, r3, #144	; 0x90
   2b81e:	e852 1f00 	ldrex	r1, [r2]
   2b822:	f021 0120 	bic.w	r1, r1, #32
   2b826:	e842 1000 	strex	r0, r1, [r2]
   2b82a:	2800      	cmp	r0, #0
   2b82c:	d1f7      	bne.n	2b81e <bt_att_clear_out_of_sync_sent+0x16>
   2b82e:	f3bf 8f5b 	dmb	ish
	return node->next;
   2b832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   2b836:	e7ec      	b.n	2b812 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   2b838:	bd08      	pop	{r3, pc}

0002b83a <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2b83a:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2b83c:	2104      	movs	r1, #4
   2b83e:	f7ff fb00 	bl	2ae42 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2b842:	b128      	cbz	r0, 2b850 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2b844:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2b848:	2105      	movs	r1, #5
   2b84a:	308c      	adds	r0, #140	; 0x8c
   2b84c:	f7ff bb6b 	b.w	2af26 <atomic_test_bit>
}
   2b850:	bd08      	pop	{r3, pc}

0002b852 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2b852:	6940      	ldr	r0, [r0, #20]

	data->func = func;
	data->user_data = user_data;
   2b854:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   2b858:	2201      	movs	r2, #1
   2b85a:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   2b85c:	7403      	strb	r3, [r0, #16]
}
   2b85e:	4770      	bx	lr

0002b860 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2b860:	6010      	str	r0, [r2, #0]
}
   2b862:	2000      	movs	r0, #0
   2b864:	4770      	bx	lr

0002b866 <gatt_ccc_changed>:
{
   2b866:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2b868:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2b86a:	895a      	ldrh	r2, [r3, #10]
   2b86c:	428a      	cmp	r2, r1
   2b86e:	d003      	beq.n	2b878 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2b870:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2b872:	68db      	ldr	r3, [r3, #12]
   2b874:	b103      	cbz	r3, 2b878 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   2b876:	4718      	bx	r3
}
   2b878:	4770      	bx	lr

0002b87a <gatt_indicate_rsp>:
{
   2b87a:	b510      	push	{r4, lr}
   2b87c:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2b87e:	68a3      	ldr	r3, [r4, #8]
{
   2b880:	460a      	mov	r2, r1
	if (params->func) {
   2b882:	b10b      	cbz	r3, 2b888 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2b884:	4621      	mov	r1, r4
   2b886:	4798      	blx	r3
	params->_ref--;
   2b888:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2b88a:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2b88c:	3b01      	subs	r3, #1
   2b88e:	b2db      	uxtb	r3, r3
   2b890:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2b892:	b122      	cbz	r2, 2b89e <gatt_indicate_rsp+0x24>
   2b894:	b91b      	cbnz	r3, 2b89e <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2b896:	4620      	mov	r0, r4
}
   2b898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2b89c:	4710      	bx	r2
}
   2b89e:	bd10      	pop	{r4, pc}

0002b8a0 <match_uuid>:
	data->attr = attr;
   2b8a0:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2b8a2:	8091      	strh	r1, [r2, #4]
}
   2b8a4:	2000      	movs	r0, #0
   2b8a6:	4770      	bx	lr

0002b8a8 <ccc_set_cb>:
}
   2b8a8:	2000      	movs	r0, #0
   2b8aa:	4770      	bx	lr

0002b8ac <write_name>:
{
   2b8ac:	b570      	push	{r4, r5, r6, lr}
   2b8ae:	b092      	sub	sp, #72	; 0x48
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   2b8b0:	2100      	movs	r1, #0
{
   2b8b2:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   2b8b6:	9101      	str	r1, [sp, #4]
{
   2b8b8:	4616      	mov	r6, r2
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   2b8ba:	a802      	add	r0, sp, #8
   2b8bc:	223d      	movs	r2, #61	; 0x3d
{
   2b8be:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   2b8c0:	f002 faab 	bl	2de1a <memset>
	if (offset >= sizeof(value)) {
   2b8c4:	2d40      	cmp	r5, #64	; 0x40
   2b8c6:	d80e      	bhi.n	2b8e6 <write_name+0x3a>
	if (offset + len >= sizeof(value)) {
   2b8c8:	4425      	add	r5, r4
   2b8ca:	2d40      	cmp	r5, #64	; 0x40
   2b8cc:	dc0e      	bgt.n	2b8ec <write_name+0x40>
	memcpy(value, buf, len);
   2b8ce:	2341      	movs	r3, #65	; 0x41
   2b8d0:	4622      	mov	r2, r4
   2b8d2:	4631      	mov	r1, r6
   2b8d4:	a801      	add	r0, sp, #4
   2b8d6:	f002 fa8d 	bl	2ddf4 <__memcpy_chk>
	bt_set_name(value);
   2b8da:	a801      	add	r0, sp, #4
   2b8dc:	f7ed f98c 	bl	18bf8 <bt_set_name>
}
   2b8e0:	4620      	mov	r0, r4
   2b8e2:	b012      	add	sp, #72	; 0x48
   2b8e4:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2b8e6:	f06f 0406 	mvn.w	r4, #6
   2b8ea:	e7f9      	b.n	2b8e0 <write_name+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   2b8ec:	f06f 040c 	mvn.w	r4, #12
   2b8f0:	e7f6      	b.n	2b8e0 <write_name+0x34>

0002b8f2 <gen_hash_m>:
{
   2b8f2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2b8f4:	6807      	ldr	r7, [r0, #0]
   2b8f6:	783d      	ldrb	r5, [r7, #0]
{
   2b8f8:	b089      	sub	sp, #36	; 0x24
   2b8fa:	4606      	mov	r6, r0
   2b8fc:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2b8fe:	b10d      	cbz	r5, 2b904 <gen_hash_m+0x12>
	switch (u16->val) {
   2b900:	2501      	movs	r5, #1
   2b902:	e014      	b.n	2b92e <gen_hash_m+0x3c>
   2b904:	887b      	ldrh	r3, [r7, #2]
   2b906:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2b90a:	d004      	beq.n	2b916 <gen_hash_m+0x24>
   2b90c:	d812      	bhi.n	2b934 <gen_hash_m+0x42>
   2b90e:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2b912:	2b03      	cmp	r3, #3
   2b914:	d8f4      	bhi.n	2b900 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2b916:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b91a:	2202      	movs	r2, #2
   2b91c:	f10d 010a 	add.w	r1, sp, #10
   2b920:	4620      	mov	r0, r4
   2b922:	f7fe fd22 	bl	2a36a <tc_cmac_update>
   2b926:	b9e0      	cbnz	r0, 2b962 <gen_hash_m+0x70>
			state->err = -EINVAL;
   2b928:	f06f 0315 	mvn.w	r3, #21
   2b92c:	65a3      	str	r3, [r4, #88]	; 0x58
}
   2b92e:	4628      	mov	r0, r5
   2b930:	b009      	add	sp, #36	; 0x24
   2b932:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2b934:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2b938:	33ff      	adds	r3, #255	; 0xff
   2b93a:	b29b      	uxth	r3, r3
   2b93c:	2b04      	cmp	r3, #4
   2b93e:	d8df      	bhi.n	2b900 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2b940:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b944:	2202      	movs	r2, #2
   2b946:	f10d 010a 	add.w	r1, sp, #10
   2b94a:	4620      	mov	r0, r4
   2b94c:	f7fe fd0d 	bl	2a36a <tc_cmac_update>
   2b950:	2800      	cmp	r0, #0
   2b952:	d0e9      	beq.n	2b928 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   2b954:	887b      	ldrh	r3, [r7, #2]
   2b956:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b95a:	2202      	movs	r2, #2
   2b95c:	f10d 010a 	add.w	r1, sp, #10
   2b960:	e016      	b.n	2b990 <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   2b962:	887b      	ldrh	r3, [r7, #2]
   2b964:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b968:	2202      	movs	r2, #2
   2b96a:	f10d 010a 	add.w	r1, sp, #10
   2b96e:	4620      	mov	r0, r4
   2b970:	f7fe fcfb 	bl	2a36a <tc_cmac_update>
   2b974:	2800      	cmp	r0, #0
   2b976:	d0d7      	beq.n	2b928 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2b978:	2000      	movs	r0, #0
   2b97a:	aa03      	add	r2, sp, #12
   2b97c:	6877      	ldr	r7, [r6, #4]
   2b97e:	9000      	str	r0, [sp, #0]
   2b980:	2313      	movs	r3, #19
   2b982:	4631      	mov	r1, r6
   2b984:	47b8      	blx	r7
		if (len < 0) {
   2b986:	1e02      	subs	r2, r0, #0
   2b988:	da01      	bge.n	2b98e <gen_hash_m+0x9c>
			state->err = len;
   2b98a:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2b98c:	e7cf      	b.n	2b92e <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   2b98e:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b990:	4620      	mov	r0, r4
   2b992:	f7fe fcea 	bl	2a36a <tc_cmac_update>
   2b996:	2800      	cmp	r0, #0
   2b998:	d1b2      	bne.n	2b900 <gen_hash_m+0xe>
   2b99a:	e7c5      	b.n	2b928 <gen_hash_m+0x36>

0002b99c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b99c:	f3bf 8f5b 	dmb	ish
   2b9a0:	6800      	ldr	r0, [r0, #0]
   2b9a2:	f3bf 8f5b 	dmb	ish
}
   2b9a6:	4770      	bx	lr

0002b9a8 <atomic_or>:
{
   2b9a8:	4603      	mov	r3, r0
}
   2b9aa:	f3bf 8f5b 	dmb	ish
   2b9ae:	e853 0f00 	ldrex	r0, [r3]
   2b9b2:	ea40 0201 	orr.w	r2, r0, r1
   2b9b6:	e843 2c00 	strex	ip, r2, [r3]
   2b9ba:	f1bc 0f00 	cmp.w	ip, #0
   2b9be:	d1f6      	bne.n	2b9ae <atomic_or+0x6>
   2b9c0:	f3bf 8f5b 	dmb	ish
   2b9c4:	4770      	bx	lr

0002b9c6 <atomic_and>:
{
   2b9c6:	4603      	mov	r3, r0
}
   2b9c8:	f3bf 8f5b 	dmb	ish
   2b9cc:	e853 0f00 	ldrex	r0, [r3]
   2b9d0:	ea00 0201 	and.w	r2, r0, r1
   2b9d4:	e843 2c00 	strex	ip, r2, [r3]
   2b9d8:	f1bc 0f00 	cmp.w	ip, #0
   2b9dc:	d1f6      	bne.n	2b9cc <atomic_and+0x6>
   2b9de:	f3bf 8f5b 	dmb	ish
   2b9e2:	4770      	bx	lr

0002b9e4 <bt_addr_le_copy>:
   2b9e4:	680b      	ldr	r3, [r1, #0]
   2b9e6:	6003      	str	r3, [r0, #0]
   2b9e8:	888b      	ldrh	r3, [r1, #4]
   2b9ea:	8083      	strh	r3, [r0, #4]
   2b9ec:	798b      	ldrb	r3, [r1, #6]
   2b9ee:	7183      	strb	r3, [r0, #6]
}
   2b9f0:	4770      	bx	lr

0002b9f2 <clear_ccc_cfg>:
{
   2b9f2:	b513      	push	{r0, r1, r4, lr}
   2b9f4:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2b9f6:	2400      	movs	r4, #0
   2b9f8:	4669      	mov	r1, sp
   2b9fa:	3001      	adds	r0, #1
   2b9fc:	9400      	str	r4, [sp, #0]
   2b9fe:	f8cd 4003 	str.w	r4, [sp, #3]
   2ba02:	f7ff ffef 	bl	2b9e4 <bt_addr_le_copy>
	cfg->id = 0U;
   2ba06:	7014      	strb	r4, [r2, #0]
	cfg->value = 0U;
   2ba08:	8114      	strh	r4, [r2, #8]
}
   2ba0a:	b002      	add	sp, #8
   2ba0c:	bd10      	pop	{r4, pc}

0002ba0e <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   2ba0e:	2300      	movs	r3, #0
   2ba10:	6003      	str	r3, [r0, #0]
   2ba12:	6043      	str	r3, [r0, #4]
   2ba14:	6083      	str	r3, [r0, #8]
}
   2ba16:	4770      	bx	lr

0002ba18 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2ba18:	b538      	push	{r3, r4, r5, lr}
   2ba1a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	if (offset > value_len) {
   2ba1e:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2ba20:	460c      	mov	r4, r1
   2ba22:	4611      	mov	r1, r2
	if (offset > value_len) {
   2ba24:	d30a      	bcc.n	2ba3c <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   2ba26:	1aad      	subs	r5, r5, r2
   2ba28:	42a5      	cmp	r5, r4
   2ba2a:	bfa8      	it	ge
   2ba2c:	4625      	movge	r5, r4
   2ba2e:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2ba30:	462a      	mov	r2, r5
   2ba32:	4419      	add	r1, r3
   2ba34:	f002 f9d0 	bl	2ddd8 <memcpy>
}
   2ba38:	4628      	mov	r0, r5
   2ba3a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2ba3c:	f06f 0506 	mvn.w	r5, #6
   2ba40:	e7fa      	b.n	2ba38 <bt_gatt_attr_read.constprop.0+0x20>

0002ba42 <bt_gatt_attr_read_service>:
{
   2ba42:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2ba44:	460c      	mov	r4, r1
   2ba46:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   2ba48:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   2ba4a:	781c      	ldrb	r4, [r3, #0]
{
   2ba4c:	4610      	mov	r0, r2
   2ba4e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   2ba52:	b13c      	cbz	r4, 2ba64 <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2ba54:	2410      	movs	r4, #16
   2ba56:	3301      	adds	r3, #1
   2ba58:	9406      	str	r4, [sp, #24]
}
   2ba5a:	b004      	add	sp, #16
   2ba5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2ba60:	f7ff bfda 	b.w	2ba18 <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2ba64:	885b      	ldrh	r3, [r3, #2]
   2ba66:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2ba6a:	2302      	movs	r3, #2
   2ba6c:	9300      	str	r3, [sp, #0]
   2ba6e:	f10d 030e 	add.w	r3, sp, #14
   2ba72:	f7ff ffd1 	bl	2ba18 <bt_gatt_attr_read.constprop.0>
}
   2ba76:	b004      	add	sp, #16
   2ba78:	bd10      	pop	{r4, pc}

0002ba7a <cf_read>:
{
   2ba7a:	b530      	push	{r4, r5, lr}
   2ba7c:	b085      	sub	sp, #20
   2ba7e:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   2ba80:	2300      	movs	r3, #0
{
   2ba82:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   2ba84:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   2ba88:	f7ef ffea 	bl	1ba60 <find_cf_cfg>
	if (cfg) {
   2ba8c:	b110      	cbz	r0, 2ba94 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   2ba8e:	7a03      	ldrb	r3, [r0, #8]
   2ba90:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2ba94:	2301      	movs	r3, #1
   2ba96:	9300      	str	r3, [sp, #0]
   2ba98:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2ba9c:	ab03      	add	r3, sp, #12
   2ba9e:	4629      	mov	r1, r5
   2baa0:	4620      	mov	r0, r4
   2baa2:	f7ff ffb9 	bl	2ba18 <bt_gatt_attr_read.constprop.0>
}
   2baa6:	b005      	add	sp, #20
   2baa8:	bd30      	pop	{r4, r5, pc}

0002baaa <read_name>:
{
   2baaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2baae:	4614      	mov	r4, r2
   2bab0:	461d      	mov	r5, r3
   2bab2:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   2bab6:	f7ed f8db 	bl	18c70 <bt_get_name>
   2baba:	4606      	mov	r6, r0
				 strlen(name));
   2babc:	f7e1 fc0f 	bl	d2de <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2bac0:	b280      	uxth	r0, r0
   2bac2:	9006      	str	r0, [sp, #24]
   2bac4:	4633      	mov	r3, r6
   2bac6:	463a      	mov	r2, r7
   2bac8:	4629      	mov	r1, r5
   2baca:	4620      	mov	r0, r4
}
   2bacc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2bad0:	f7ff bfa2 	b.w	2ba18 <bt_gatt_attr_read.constprop.0>

0002bad4 <read_appearance>:
{
   2bad4:	b530      	push	{r4, r5, lr}
   2bad6:	b085      	sub	sp, #20
   2bad8:	4614      	mov	r4, r2
   2bada:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2badc:	f7fe ff13 	bl	2a906 <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2bae0:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2bae2:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2bae6:	9300      	str	r3, [sp, #0]
   2bae8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2baec:	f10d 030e 	add.w	r3, sp, #14
   2baf0:	4629      	mov	r1, r5
   2baf2:	4620      	mov	r0, r4
   2baf4:	f7ff ff90 	bl	2ba18 <bt_gatt_attr_read.constprop.0>
}
   2baf8:	b005      	add	sp, #20
   2bafa:	bd30      	pop	{r4, r5, pc}

0002bafc <read_ppcp>:
{
   2bafc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2bafe:	4619      	mov	r1, r3
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   2bb00:	2318      	movs	r3, #24
   2bb02:	f8ad 3008 	strh.w	r3, [sp, #8]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   2bb06:	2328      	movs	r3, #40	; 0x28
   2bb08:	f8ad 300a 	strh.w	r3, [sp, #10]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2bb0c:	2300      	movs	r3, #0
   2bb0e:	f8ad 300c 	strh.w	r3, [sp, #12]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   2bb12:	232a      	movs	r3, #42	; 0x2a
   2bb14:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2bb18:	2308      	movs	r3, #8
   2bb1a:	9300      	str	r3, [sp, #0]
{
   2bb1c:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2bb1e:	446b      	add	r3, sp
   2bb20:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2bb24:	f7ff ff78 	bl	2ba18 <bt_gatt_attr_read.constprop.0>
}
   2bb28:	b005      	add	sp, #20
   2bb2a:	f85d fb04 	ldr.w	pc, [sp], #4

0002bb2e <z_log_msg_static_create.constprop.0>:
   2bb2e:	2300      	movs	r3, #0
   2bb30:	f7e9 bdac 	b.w	1568c <z_impl_z_log_msg_static_create>

0002bb34 <clear_cf_cfg>:
{
   2bb34:	b513      	push	{r0, r1, r4, lr}
   2bb36:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2bb38:	2400      	movs	r4, #0
   2bb3a:	4669      	mov	r1, sp
   2bb3c:	3001      	adds	r0, #1
   2bb3e:	9400      	str	r4, [sp, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2bb40:	320c      	adds	r2, #12
   2bb42:	f8cd 4003 	str.w	r4, [sp, #3]
   2bb46:	f7ff ff4d 	bl	2b9e4 <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   2bb4a:	f802 4c04 	strb.w	r4, [r2, #-4]
   2bb4e:	f3bf 8f5b 	dmb	ish
   2bb52:	e852 3f00 	ldrex	r3, [r2]
   2bb56:	e842 4100 	strex	r1, r4, [r2]
   2bb5a:	2900      	cmp	r1, #0
   2bb5c:	d1f9      	bne.n	2bb52 <clear_cf_cfg+0x1e>
   2bb5e:	f3bf 8f5b 	dmb	ish
}
   2bb62:	b002      	add	sp, #8
   2bb64:	bd10      	pop	{r4, pc}

0002bb66 <ccc_find_cfg>:
{
   2bb66:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   2bb68:	7803      	ldrb	r3, [r0, #0]
   2bb6a:	4293      	cmp	r3, r2
{
   2bb6c:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   2bb6e:	d001      	beq.n	2bb74 <ccc_find_cfg+0xe>
	return NULL;
   2bb70:	2000      	movs	r0, #0
}
   2bb72:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   2bb74:	2207      	movs	r2, #7
   2bb76:	3001      	adds	r0, #1
   2bb78:	f002 f91e 	bl	2ddb8 <memcmp>
		if (id == ccc->cfg[i].id &&
   2bb7c:	2800      	cmp	r0, #0
   2bb7e:	d1f7      	bne.n	2bb70 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   2bb80:	4620      	mov	r0, r4
   2bb82:	e7f6      	b.n	2bb72 <ccc_find_cfg+0xc>

0002bb84 <find_ccc_cfg>:
{
   2bb84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2bb86:	460c      	mov	r4, r1
						    &cfg->peer)) {
   2bb88:	1c4d      	adds	r5, r1, #1
		if (conn) {
   2bb8a:	b148      	cbz	r0, 2bba0 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2bb8c:	7809      	ldrb	r1, [r1, #0]
   2bb8e:	462a      	mov	r2, r5
   2bb90:	f7ff f88e 	bl	2acb0 <bt_conn_is_peer_addr_le>
	return NULL;
   2bb94:	2800      	cmp	r0, #0
   2bb96:	bf08      	it	eq
   2bb98:	2400      	moveq	r4, #0
}
   2bb9a:	4620      	mov	r0, r4
   2bb9c:	b003      	add	sp, #12
   2bb9e:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2bba0:	9000      	str	r0, [sp, #0]
   2bba2:	2207      	movs	r2, #7
   2bba4:	f8cd 0003 	str.w	r0, [sp, #3]
   2bba8:	4669      	mov	r1, sp
   2bbaa:	4628      	mov	r0, r5
   2bbac:	f002 f904 	bl	2ddb8 <memcmp>
	return NULL;
   2bbb0:	2800      	cmp	r0, #0
   2bbb2:	bf18      	it	ne
   2bbb4:	2400      	movne	r4, #0
   2bbb6:	e7f0      	b.n	2bb9a <find_ccc_cfg+0x16>

0002bbb8 <bt_gatt_attr_read_ccc>:
{
   2bbb8:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2bbba:	68c9      	ldr	r1, [r1, #12]
{
   2bbbc:	b085      	sub	sp, #20
   2bbbe:	4614      	mov	r4, r2
   2bbc0:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   2bbc2:	f7ff ffdf 	bl	2bb84 <find_ccc_cfg>
	if (cfg) {
   2bbc6:	b100      	cbz	r0, 2bbca <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   2bbc8:	8900      	ldrh	r0, [r0, #8]
   2bbca:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2bbce:	2302      	movs	r3, #2
   2bbd0:	9300      	str	r3, [sp, #0]
   2bbd2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2bbd6:	f10d 030e 	add.w	r3, sp, #14
   2bbda:	4629      	mov	r1, r5
   2bbdc:	4620      	mov	r0, r4
   2bbde:	f7ff ff1b 	bl	2ba18 <bt_gatt_attr_read.constprop.0>
}
   2bbe2:	b005      	add	sp, #20
   2bbe4:	bd30      	pop	{r4, r5, pc}

0002bbe6 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2bbe6:	2a02      	cmp	r2, #2
{
   2bbe8:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2bbea:	d108      	bne.n	2bbfe <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2bbec:	2300      	movs	r3, #0
   2bbee:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2bbf2:	461a      	mov	r2, r3
   2bbf4:	7a00      	ldrb	r0, [r0, #8]
   2bbf6:	f7f0 fa4f 	bl	1c098 <sc_save>
}
   2bbfa:	2002      	movs	r0, #2
   2bbfc:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2bbfe:	f7f0 fac9 	bl	1c194 <sc_clear>
   2bc02:	e7fa      	b.n	2bbfa <sc_ccc_cfg_write+0x14>

0002bc04 <sc_restore_rsp>:
{
   2bc04:	b538      	push	{r3, r4, r5, lr}
   2bc06:	4604      	mov	r4, r0
   2bc08:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   2bc0a:	f7ff fdfb 	bl	2b804 <bt_att_fixed_chan_only>
   2bc0e:	b150      	cbz	r0, 2bc26 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   2bc10:	4620      	mov	r0, r4
   2bc12:	f7ef ff25 	bl	1ba60 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2bc16:	b130      	cbz	r0, 2bc26 <sc_restore_rsp+0x22>
   2bc18:	7a03      	ldrb	r3, [r0, #8]
   2bc1a:	07db      	lsls	r3, r3, #31
   2bc1c:	d503      	bpl.n	2bc26 <sc_restore_rsp+0x22>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2bc1e:	2101      	movs	r1, #1
   2bc20:	300c      	adds	r0, #12
   2bc22:	f7ff fec1 	bl	2b9a8 <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2bc26:	b955      	cbnz	r5, 2bc3e <sc_restore_rsp+0x3a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2bc28:	7a20      	ldrb	r0, [r4, #8]
   2bc2a:	f104 0188 	add.w	r1, r4, #136	; 0x88
   2bc2e:	f7f0 fa11 	bl	1c054 <find_sc_cfg>
		if (sc_cfg) {
   2bc32:	b120      	cbz	r0, 2bc3e <sc_restore_rsp+0x3a>
   2bc34:	6085      	str	r5, [r0, #8]
}
   2bc36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   2bc3a:	f7ef bf71 	b.w	1bb20 <sc_store>
}
   2bc3e:	bd38      	pop	{r3, r4, r5, pc}

0002bc40 <bt_gatt_attr_read>:
{
   2bc40:	b538      	push	{r3, r4, r5, lr}
   2bc42:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2bc46:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   2bc4a:	428d      	cmp	r5, r1
{
   2bc4c:	4610      	mov	r0, r2
	if (offset > value_len) {
   2bc4e:	d30b      	bcc.n	2bc68 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   2bc50:	1a6d      	subs	r5, r5, r1
   2bc52:	429d      	cmp	r5, r3
   2bc54:	bfa8      	it	ge
   2bc56:	461d      	movge	r5, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2bc58:	9b05      	ldr	r3, [sp, #20]
   2bc5a:	b2ad      	uxth	r5, r5
   2bc5c:	462a      	mov	r2, r5
   2bc5e:	4419      	add	r1, r3
   2bc60:	f002 f8ba 	bl	2ddd8 <memcpy>
}
   2bc64:	4628      	mov	r0, r5
   2bc66:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2bc68:	f06f 0506 	mvn.w	r5, #6
   2bc6c:	e7fa      	b.n	2bc64 <bt_gatt_attr_read+0x24>

0002bc6e <bt_gatt_attr_value_handle>:
{
   2bc6e:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2bc70:	4604      	mov	r4, r0
   2bc72:	b910      	cbnz	r0, 2bc7a <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2bc74:	2000      	movs	r0, #0
}
   2bc76:	b002      	add	sp, #8
   2bc78:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2bc7a:	2300      	movs	r3, #0
   2bc7c:	f88d 3004 	strb.w	r3, [sp, #4]
   2bc80:	6800      	ldr	r0, [r0, #0]
   2bc82:	f642 0303 	movw	r3, #10243	; 0x2803
   2bc86:	a901      	add	r1, sp, #4
   2bc88:	f8ad 3006 	strh.w	r3, [sp, #6]
   2bc8c:	f7fe fcd6 	bl	2a63c <bt_uuid_cmp>
   2bc90:	2800      	cmp	r0, #0
   2bc92:	d1ef      	bne.n	2bc74 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2bc94:	68e3      	ldr	r3, [r4, #12]
   2bc96:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2bc98:	2800      	cmp	r0, #0
   2bc9a:	d1ec      	bne.n	2bc76 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2bc9c:	4620      	mov	r0, r4
   2bc9e:	f7f0 fc19 	bl	1c4d4 <bt_gatt_attr_get_handle>
   2bca2:	3001      	adds	r0, #1
   2bca4:	b280      	uxth	r0, r0
	return handle;
   2bca6:	e7e6      	b.n	2bc76 <bt_gatt_attr_value_handle+0x8>

0002bca8 <bt_gatt_attr_read_chrc>:
{
   2bca8:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2bcaa:	68cc      	ldr	r4, [r1, #12]
{
   2bcac:	b088      	sub	sp, #32
   2bcae:	4608      	mov	r0, r1
   2bcb0:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   2bcb2:	79a3      	ldrb	r3, [r4, #6]
   2bcb4:	f88d 300c 	strb.w	r3, [sp, #12]
{
   2bcb8:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2bcba:	f7ff ffd8 	bl	2bc6e <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2bcbe:	6824      	ldr	r4, [r4, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2bcc0:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2bcc4:	7823      	ldrb	r3, [r4, #0]
   2bcc6:	b96b      	cbnz	r3, 2bce4 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2bcc8:	8863      	ldrh	r3, [r4, #2]
   2bcca:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   2bcce:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2bcd0:	9300      	str	r3, [sp, #0]
   2bcd2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   2bcd6:	ab03      	add	r3, sp, #12
   2bcd8:	4631      	mov	r1, r6
   2bcda:	4628      	mov	r0, r5
   2bcdc:	f7ff fe9c 	bl	2ba18 <bt_gatt_attr_read.constprop.0>
}
   2bce0:	b008      	add	sp, #32
   2bce2:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2bce4:	1c63      	adds	r3, r4, #1
   2bce6:	f10d 020f 	add.w	r2, sp, #15
   2bcea:	3411      	adds	r4, #17
   2bcec:	f853 1b04 	ldr.w	r1, [r3], #4
   2bcf0:	f842 1b04 	str.w	r1, [r2], #4
   2bcf4:	42a3      	cmp	r3, r4
   2bcf6:	d1f9      	bne.n	2bcec <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   2bcf8:	2313      	movs	r3, #19
   2bcfa:	e7e9      	b.n	2bcd0 <bt_gatt_attr_read_chrc+0x28>

0002bcfc <bt_gatt_foreach_attr>:
{
   2bcfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2bcfe:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2bd02:	2300      	movs	r3, #0
   2bd04:	9300      	str	r3, [sp, #0]
   2bd06:	461a      	mov	r2, r3
   2bd08:	f7f0 fc14 	bl	1c534 <bt_gatt_foreach_attr_type>
}
   2bd0c:	b005      	add	sp, #20
   2bd0e:	f85d fb04 	ldr.w	pc, [sp], #4

0002bd12 <bt_gatt_check_perm>:
{
   2bd12:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2bd14:	07d3      	lsls	r3, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2bd16:	8a4c      	ldrh	r4, [r1, #18]
{
   2bd18:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   2bd1a:	d504      	bpl.n	2bd26 <bt_gatt_check_perm+0x14>
   2bd1c:	f014 0f95 	tst.w	r4, #149	; 0x95
   2bd20:	d026      	beq.n	2bd70 <bt_gatt_check_perm+0x5e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2bd22:	684b      	ldr	r3, [r1, #4]
   2bd24:	b323      	cbz	r3, 2bd70 <bt_gatt_check_perm+0x5e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2bd26:	0790      	lsls	r0, r2, #30
   2bd28:	d504      	bpl.n	2bd34 <bt_gatt_check_perm+0x22>
   2bd2a:	f414 7f95 	tst.w	r4, #298	; 0x12a
   2bd2e:	d021      	beq.n	2bd74 <bt_gatt_check_perm+0x62>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2bd30:	688b      	ldr	r3, [r1, #8]
   2bd32:	b1fb      	cbz	r3, 2bd74 <bt_gatt_check_perm+0x62>
	mask &= attr->perm;
   2bd34:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2bd36:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2bd3a:	d007      	beq.n	2bd4c <bt_gatt_check_perm+0x3a>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2bd3c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2bd40:	b90b      	cbnz	r3, 2bd46 <bt_gatt_check_perm+0x34>
			return BT_ATT_ERR_AUTHENTICATION;
   2bd42:	2005      	movs	r0, #5
}
   2bd44:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2bd46:	7b5b      	ldrb	r3, [r3, #13]
   2bd48:	06db      	lsls	r3, r3, #27
   2bd4a:	d5fa      	bpl.n	2bd42 <bt_gatt_check_perm+0x30>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2bd4c:	f014 0f30 	tst.w	r4, #48	; 0x30
   2bd50:	d108      	bne.n	2bd64 <bt_gatt_check_perm+0x52>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2bd52:	f014 000c 	ands.w	r0, r4, #12
   2bd56:	d0f5      	beq.n	2bd44 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   2bd58:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2bd5a:	2b00      	cmp	r3, #0
   2bd5c:	bf14      	ite	ne
   2bd5e:	2000      	movne	r0, #0
   2bd60:	200f      	moveq	r0, #15
   2bd62:	e7ef      	b.n	2bd44 <bt_gatt_check_perm+0x32>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2bd64:	4628      	mov	r0, r5
   2bd66:	f7fe ffa1 	bl	2acac <bt_conn_get_security>
   2bd6a:	2802      	cmp	r0, #2
   2bd6c:	d8f1      	bhi.n	2bd52 <bt_gatt_check_perm+0x40>
   2bd6e:	e7e8      	b.n	2bd42 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2bd70:	2002      	movs	r0, #2
   2bd72:	e7e7      	b.n	2bd44 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2bd74:	2003      	movs	r0, #3
   2bd76:	e7e5      	b.n	2bd44 <bt_gatt_check_perm+0x32>

0002bd78 <bt_gatt_is_subscribed>:
{
   2bd78:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2bd7c:	7b43      	ldrb	r3, [r0, #13]
   2bd7e:	2b07      	cmp	r3, #7
{
   2bd80:	4606      	mov	r6, r0
   2bd82:	460c      	mov	r4, r1
   2bd84:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   2bd86:	d003      	beq.n	2bd90 <bt_gatt_is_subscribed+0x18>
		return false;
   2bd88:	2000      	movs	r0, #0
}
   2bd8a:	b004      	add	sp, #16
   2bd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   2bd90:	2300      	movs	r3, #0
   2bd92:	f88d 300c 	strb.w	r3, [sp, #12]
   2bd96:	6820      	ldr	r0, [r4, #0]
   2bd98:	f642 0303 	movw	r3, #10243	; 0x2803
   2bd9c:	a903      	add	r1, sp, #12
   2bd9e:	f8ad 300e 	strh.w	r3, [sp, #14]
   2bda2:	f7fe fc4b 	bl	2a63c <bt_uuid_cmp>
   2bda6:	b940      	cbnz	r0, 2bdba <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   2bda8:	68e3      	ldr	r3, [r4, #12]
   2bdaa:	7999      	ldrb	r1, [r3, #6]
   2bdac:	f011 0030 	ands.w	r0, r1, #48	; 0x30
   2bdb0:	d0eb      	beq.n	2bd8a <bt_gatt_is_subscribed+0x12>
		attr = bt_gatt_attr_next(attr);
   2bdb2:	4620      	mov	r0, r4
   2bdb4:	f7f0 fd8c 	bl	1c8d0 <bt_gatt_attr_next>
   2bdb8:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2bdba:	2300      	movs	r3, #0
   2bdbc:	6820      	ldr	r0, [r4, #0]
   2bdbe:	f88d 300c 	strb.w	r3, [sp, #12]
   2bdc2:	a903      	add	r1, sp, #12
   2bdc4:	f642 1302 	movw	r3, #10498	; 0x2902
   2bdc8:	f8ad 300e 	strh.w	r3, [sp, #14]
   2bdcc:	f7fe fc36 	bl	2a63c <bt_uuid_cmp>
   2bdd0:	b118      	cbz	r0, 2bdda <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   2bdd2:	4620      	mov	r0, r4
   2bdd4:	f7f0 fd7c 	bl	1c8d0 <bt_gatt_attr_next>
   2bdd8:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2bdda:	2500      	movs	r5, #0
   2bddc:	f642 1802 	movw	r8, #10498	; 0x2902
   2bde0:	6820      	ldr	r0, [r4, #0]
   2bde2:	f88d 5000 	strb.w	r5, [sp]
   2bde6:	4669      	mov	r1, sp
   2bde8:	f8ad 8002 	strh.w	r8, [sp, #2]
   2bdec:	f7fe fc26 	bl	2a63c <bt_uuid_cmp>
   2bdf0:	b9d8      	cbnz	r0, 2be2a <bt_gatt_is_subscribed+0xb2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2bdf2:	6820      	ldr	r0, [r4, #0]
   2bdf4:	2500      	movs	r5, #0
   2bdf6:	f642 1302 	movw	r3, #10498	; 0x2902
   2bdfa:	a903      	add	r1, sp, #12
   2bdfc:	f88d 500c 	strb.w	r5, [sp, #12]
   2be00:	f8ad 300e 	strh.w	r3, [sp, #14]
   2be04:	f7fe fc1a 	bl	2a63c <bt_uuid_cmp>
   2be08:	2800      	cmp	r0, #0
   2be0a:	d1bd      	bne.n	2bd88 <bt_gatt_is_subscribed+0x10>
	ccc = attr->user_data;
   2be0c:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   2be0e:	4622      	mov	r2, r4
   2be10:	4630      	mov	r0, r6
   2be12:	f812 1b01 	ldrb.w	r1, [r2], #1
   2be16:	f7fe ff4b 	bl	2acb0 <bt_conn_is_peer_addr_le>
   2be1a:	2800      	cmp	r0, #0
   2be1c:	d0b4      	beq.n	2bd88 <bt_gatt_is_subscribed+0x10>
   2be1e:	8923      	ldrh	r3, [r4, #8]
   2be20:	421f      	tst	r7, r3
   2be22:	bf14      	ite	ne
   2be24:	2001      	movne	r0, #1
   2be26:	2000      	moveq	r0, #0
   2be28:	e7af      	b.n	2bd8a <bt_gatt_is_subscribed+0x12>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2be2a:	6820      	ldr	r0, [r4, #0]
   2be2c:	f88d 5004 	strb.w	r5, [sp, #4]
   2be30:	f642 0303 	movw	r3, #10243	; 0x2803
   2be34:	a901      	add	r1, sp, #4
   2be36:	f8ad 3006 	strh.w	r3, [sp, #6]
   2be3a:	f7fe fbff 	bl	2a63c <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2be3e:	2800      	cmp	r0, #0
   2be40:	d0d7      	beq.n	2bdf2 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2be42:	6820      	ldr	r0, [r4, #0]
   2be44:	f88d 5008 	strb.w	r5, [sp, #8]
   2be48:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2be4c:	a902      	add	r1, sp, #8
   2be4e:	f8ad 300a 	strh.w	r3, [sp, #10]
   2be52:	f7fe fbf3 	bl	2a63c <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2be56:	2800      	cmp	r0, #0
   2be58:	d0cb      	beq.n	2bdf2 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2be5a:	6820      	ldr	r0, [r4, #0]
   2be5c:	f88d 500c 	strb.w	r5, [sp, #12]
   2be60:	f642 0301 	movw	r3, #10241	; 0x2801
   2be64:	a903      	add	r1, sp, #12
   2be66:	f8ad 300e 	strh.w	r3, [sp, #14]
   2be6a:	f7fe fbe7 	bl	2a63c <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2be6e:	2800      	cmp	r0, #0
   2be70:	d0bf      	beq.n	2bdf2 <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   2be72:	4620      	mov	r0, r4
   2be74:	f7f0 fd2c 	bl	1c8d0 <bt_gatt_attr_next>
		if (!attr) {
   2be78:	4604      	mov	r4, r0
   2be7a:	2800      	cmp	r0, #0
   2be7c:	d1b0      	bne.n	2bde0 <bt_gatt_is_subscribed+0x68>
   2be7e:	e783      	b.n	2bd88 <bt_gatt_is_subscribed+0x10>

0002be80 <bt_gatt_change_aware>:
{
   2be80:	b570      	push	{r4, r5, r6, lr}
   2be82:	4606      	mov	r6, r0
   2be84:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   2be86:	f7ef fdeb 	bl	1ba60 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2be8a:	b910      	cbnz	r0, 2be92 <bt_gatt_change_aware+0x12>
		return true;
   2be8c:	2401      	movs	r4, #1
}
   2be8e:	4620      	mov	r0, r4
   2be90:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2be92:	7a03      	ldrb	r3, [r0, #8]
   2be94:	07da      	lsls	r2, r3, #31
   2be96:	d5f9      	bpl.n	2be8c <bt_gatt_change_aware+0xc>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2be98:	f100 050c 	add.w	r5, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2be9c:	4628      	mov	r0, r5
   2be9e:	f7ff fd7d 	bl	2b99c <atomic_get>
   2bea2:	07c3      	lsls	r3, r0, #31
   2bea4:	d4f2      	bmi.n	2be8c <bt_gatt_change_aware+0xc>
	if (!req) {
   2bea6:	b90c      	cbnz	r4, 2beac <bt_gatt_change_aware+0x2c>
		return false;
   2bea8:	2400      	movs	r4, #0
   2beaa:	e7f0      	b.n	2be8e <bt_gatt_change_aware+0xe>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2beac:	f06f 0102 	mvn.w	r1, #2
   2beb0:	4628      	mov	r0, r5
   2beb2:	f7ff fd88 	bl	2b9c6 <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2beb6:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   2beba:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2bebc:	d006      	beq.n	2becc <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   2bebe:	f7ff fca3 	bl	2b808 <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2bec2:	2101      	movs	r1, #1
   2bec4:	4628      	mov	r0, r5
   2bec6:	f7ff fd6f 	bl	2b9a8 <atomic_or>
}
   2beca:	e7e0      	b.n	2be8e <bt_gatt_change_aware+0xe>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2becc:	f7ff fc9a 	bl	2b804 <bt_att_fixed_chan_only>
   2bed0:	2800      	cmp	r0, #0
   2bed2:	d0e9      	beq.n	2bea8 <bt_gatt_change_aware+0x28>
   2bed4:	4630      	mov	r0, r6
   2bed6:	f7ff fcb0 	bl	2b83a <bt_att_out_of_sync_sent_on_fixed>
   2beda:	4604      	mov	r4, r0
   2bedc:	2800      	cmp	r0, #0
   2bede:	d0e3      	beq.n	2bea8 <bt_gatt_change_aware+0x28>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2bee0:	f06f 0102 	mvn.w	r1, #2
   2bee4:	4628      	mov	r0, r5
   2bee6:	f7ff fd6e 	bl	2b9c6 <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   2beea:	4630      	mov	r0, r6
   2beec:	e7e7      	b.n	2bebe <bt_gatt_change_aware+0x3e>

0002beee <ccc_delayed_store>:
{
   2beee:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   2bef0:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2bef4:	4605      	mov	r5, r0
		if (!conn) {
   2bef6:	b194      	cbz	r4, 2bf1e <ccc_delayed_store+0x30>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2bef8:	f104 0688 	add.w	r6, r4, #136	; 0x88
   2befc:	7a20      	ldrb	r0, [r4, #8]
   2befe:	4631      	mov	r1, r6
   2bf00:	f7fe fd04 	bl	2a90c <bt_addr_le_is_bonded>
   2bf04:	b158      	cbz	r0, 2bf1e <ccc_delayed_store+0x30>
			ccc_store->conn_list[i] = NULL;
   2bf06:	2300      	movs	r3, #0
   2bf08:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   2bf0c:	7a20      	ldrb	r0, [r4, #8]
   2bf0e:	4631      	mov	r1, r6
   2bf10:	f7f1 f828 	bl	1cf64 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   2bf14:	4620      	mov	r0, r4
}
   2bf16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   2bf1a:	f7fe be2e 	b.w	2ab7a <bt_conn_unref>
}
   2bf1e:	bd70      	pop	{r4, r5, r6, pc}

0002bf20 <sys_memcpy_swap>:
	psrc += length - 1;
   2bf20:	1e53      	subs	r3, r2, #1
   2bf22:	4419      	add	r1, r3
	for (; length > 0; length--) {
   2bf24:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   2bf26:	f811 3901 	ldrb.w	r3, [r1], #-1
   2bf2a:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   2bf2e:	4290      	cmp	r0, r2
   2bf30:	d1f9      	bne.n	2bf26 <sys_memcpy_swap+0x6>
}
   2bf32:	4770      	bx	lr

0002bf34 <sys_mem_swap>:
{
   2bf34:	b510      	push	{r4, lr}
   2bf36:	1843      	adds	r3, r0, r1
   2bf38:	eb00 0151 	add.w	r1, r0, r1, lsr #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2bf3c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		uint8_t tmp = ((uint8_t *)buf)[i];
   2bf40:	7802      	ldrb	r2, [r0, #0]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2bf42:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < (length/2); i++) {
   2bf46:	4288      	cmp	r0, r1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2bf48:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   2bf4a:	d1f7      	bne.n	2bf3c <sys_mem_swap+0x8>
	}
}
   2bf4c:	bd10      	pop	{r4, pc}

0002bf4e <smp_pairing_rsp>:
}
   2bf4e:	2007      	movs	r0, #7
   2bf50:	4770      	bx	lr

0002bf52 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2bf52:	f3bf 8f5b 	dmb	ish
   2bf56:	6800      	ldr	r0, [r0, #0]
   2bf58:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2bf5c:	4108      	asrs	r0, r1
}
   2bf5e:	f000 0001 	and.w	r0, r0, #1
   2bf62:	4770      	bx	lr

0002bf64 <update_keys_check>:
{
   2bf64:	b510      	push	{r4, lr}
   2bf66:	4603      	mov	r3, r0
	if (!keys ||
   2bf68:	b1d9      	cbz	r1, 2bfa2 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2bf6a:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2bf6c:	f010 0f24 	tst.w	r0, #36	; 0x24
   2bf70:	d017      	beq.n	2bfa2 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2bf72:	7d1a      	ldrb	r2, [r3, #20]
   2bf74:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2bf76:	7b09      	ldrb	r1, [r1, #12]
   2bf78:	42a2      	cmp	r2, r4
   2bf7a:	bf28      	it	cs
   2bf7c:	4622      	movcs	r2, r4
   2bf7e:	4291      	cmp	r1, r2
   2bf80:	d901      	bls.n	2bf86 <update_keys_check+0x22>
		return false;
   2bf82:	2000      	movs	r0, #0
}
   2bf84:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2bf86:	0682      	lsls	r2, r0, #26
   2bf88:	d404      	bmi.n	2bf94 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2bf8a:	7a18      	ldrb	r0, [r3, #8]
   2bf8c:	3800      	subs	r0, #0
   2bf8e:	bf18      	it	ne
   2bf90:	2001      	movne	r0, #1
   2bf92:	e7f7      	b.n	2bf84 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2bf94:	2105      	movs	r1, #5
   2bf96:	1d18      	adds	r0, r3, #4
   2bf98:	f7ff ffdb 	bl	2bf52 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2bf9c:	2800      	cmp	r0, #0
   2bf9e:	d1f4      	bne.n	2bf8a <update_keys_check+0x26>
   2bfa0:	e7ef      	b.n	2bf82 <update_keys_check+0x1e>
		return true;
   2bfa2:	2001      	movs	r0, #1
   2bfa4:	e7ee      	b.n	2bf84 <update_keys_check+0x20>

0002bfa6 <bt_smp_aes_cmac>:
{
   2bfa6:	b570      	push	{r4, r5, r6, lr}
   2bfa8:	b0c2      	sub	sp, #264	; 0x108
   2bfaa:	460d      	mov	r5, r1
   2bfac:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2bfae:	4601      	mov	r1, r0
   2bfb0:	aa16      	add	r2, sp, #88	; 0x58
   2bfb2:	4668      	mov	r0, sp
{
   2bfb4:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2bfb6:	f7fe f9ad 	bl	2a314 <tc_cmac_setup>
   2bfba:	b150      	cbz	r0, 2bfd2 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2bfbc:	4632      	mov	r2, r6
   2bfbe:	4629      	mov	r1, r5
   2bfc0:	4668      	mov	r0, sp
   2bfc2:	f7fe f9d2 	bl	2a36a <tc_cmac_update>
   2bfc6:	b120      	cbz	r0, 2bfd2 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2bfc8:	4669      	mov	r1, sp
   2bfca:	4620      	mov	r0, r4
   2bfcc:	f7fe fa38 	bl	2a440 <tc_cmac_final>
   2bfd0:	b918      	cbnz	r0, 2bfda <bt_smp_aes_cmac+0x34>
		return -EIO;
   2bfd2:	f06f 0004 	mvn.w	r0, #4
}
   2bfd6:	b042      	add	sp, #264	; 0x108
   2bfd8:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   2bfda:	2000      	movs	r0, #0
   2bfdc:	e7fb      	b.n	2bfd6 <bt_smp_aes_cmac+0x30>

0002bfde <smp_f4>:
{
   2bfde:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bfe0:	b097      	sub	sp, #92	; 0x5c
   2bfe2:	4614      	mov	r4, r2
   2bfe4:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   2bfe6:	2220      	movs	r2, #32
   2bfe8:	4601      	mov	r1, r0
   2bfea:	a805      	add	r0, sp, #20
{
   2bfec:	461d      	mov	r5, r3
   2bfee:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2bff0:	f7ff ff96 	bl	2bf20 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2bff4:	2220      	movs	r2, #32
   2bff6:	4631      	mov	r1, r6
   2bff8:	a80d      	add	r0, sp, #52	; 0x34
   2bffa:	f7ff ff91 	bl	2bf20 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2bffe:	4621      	mov	r1, r4
   2c000:	2210      	movs	r2, #16
   2c002:	a801      	add	r0, sp, #4
	m[64] = z;
   2c004:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2c008:	f7ff ff8a 	bl	2bf20 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   2c00c:	463b      	mov	r3, r7
   2c00e:	2241      	movs	r2, #65	; 0x41
   2c010:	a905      	add	r1, sp, #20
   2c012:	a801      	add	r0, sp, #4
   2c014:	f7ff ffc7 	bl	2bfa6 <bt_smp_aes_cmac>
	if (err) {
   2c018:	4604      	mov	r4, r0
   2c01a:	b918      	cbnz	r0, 2c024 <smp_f4+0x46>
	sys_mem_swap(res, 16);
   2c01c:	2110      	movs	r1, #16
   2c01e:	4638      	mov	r0, r7
   2c020:	f7ff ff88 	bl	2bf34 <sys_mem_swap>
}
   2c024:	4620      	mov	r0, r4
   2c026:	b017      	add	sp, #92	; 0x5c
   2c028:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c02a <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c02a:	2301      	movs	r3, #1
   2c02c:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c02e:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c030:	f3bf 8f5b 	dmb	ish
   2c034:	e850 2f00 	ldrex	r2, [r0]
   2c038:	401a      	ands	r2, r3
   2c03a:	e840 2100 	strex	r1, r2, [r0]
   2c03e:	2900      	cmp	r1, #0
   2c040:	d1f8      	bne.n	2c034 <atomic_clear_bit+0xa>
   2c042:	f3bf 8f5b 	dmb	ish
}
   2c046:	4770      	bx	lr

0002c048 <bt_addr_le_copy>:
   2c048:	680b      	ldr	r3, [r1, #0]
   2c04a:	6003      	str	r3, [r0, #0]
   2c04c:	888b      	ldrh	r3, [r1, #4]
   2c04e:	8083      	strh	r3, [r0, #4]
   2c050:	798b      	ldrb	r3, [r1, #6]
   2c052:	7183      	strb	r3, [r0, #6]
}
   2c054:	4770      	bx	lr

0002c056 <smp_f6>:
{
   2c056:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c05a:	b097      	sub	sp, #92	; 0x5c
   2c05c:	4604      	mov	r4, r0
   2c05e:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   2c060:	a805      	add	r0, sp, #20
   2c062:	2210      	movs	r2, #16
{
   2c064:	461d      	mov	r5, r3
   2c066:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
   2c06a:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   2c06c:	f7ff ff58 	bl	2bf20 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2c070:	2210      	movs	r2, #16
   2c072:	4631      	mov	r1, r6
   2c074:	a809      	add	r0, sp, #36	; 0x24
   2c076:	f7ff ff53 	bl	2bf20 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2c07a:	2210      	movs	r2, #16
   2c07c:	4629      	mov	r1, r5
   2c07e:	a80d      	add	r0, sp, #52	; 0x34
   2c080:	f7ff ff4e 	bl	2bf20 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2c084:	991e      	ldr	r1, [sp, #120]	; 0x78
   2c086:	2203      	movs	r2, #3
   2c088:	a811      	add	r0, sp, #68	; 0x44
   2c08a:	f7ff ff49 	bl	2bf20 <sys_memcpy_swap>
	m[51] = a1->type;
   2c08e:	4649      	mov	r1, r9
	memcpy(m + 52, a1->a.val, 6);
   2c090:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   2c094:	f811 3b01 	ldrb.w	r3, [r1], #1
   2c098:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2c09c:	9012      	str	r0, [sp, #72]	; 0x48
   2c09e:	888b      	ldrh	r3, [r1, #4]
   2c0a0:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2c0a4:	2206      	movs	r2, #6
   2c0a6:	a812      	add	r0, sp, #72	; 0x48
   2c0a8:	f7ff ff3a 	bl	2bf20 <sys_memcpy_swap>
	m[58] = a2->type;
   2c0ac:	4641      	mov	r1, r8
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2c0ae:	2206      	movs	r2, #6
	m[58] = a2->type;
   2c0b0:	f811 3b01 	ldrb.w	r3, [r1], #1
   2c0b4:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2c0b8:	f8d8 3001 	ldr.w	r3, [r8, #1]
   2c0bc:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2c0c0:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   2c0c4:	888b      	ldrh	r3, [r1, #4]
   2c0c6:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2c0ca:	f7ff ff29 	bl	2bf20 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2c0ce:	4621      	mov	r1, r4
   2c0d0:	2210      	movs	r2, #16
   2c0d2:	a801      	add	r0, sp, #4
   2c0d4:	f7ff ff24 	bl	2bf20 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   2c0d8:	463b      	mov	r3, r7
   2c0da:	2241      	movs	r2, #65	; 0x41
   2c0dc:	a905      	add	r1, sp, #20
   2c0de:	a801      	add	r0, sp, #4
   2c0e0:	f7ff ff61 	bl	2bfa6 <bt_smp_aes_cmac>
	if (err) {
   2c0e4:	4604      	mov	r4, r0
   2c0e6:	b918      	cbnz	r0, 2c0f0 <smp_f6+0x9a>
	sys_mem_swap(check, 16);
   2c0e8:	2110      	movs	r1, #16
   2c0ea:	4638      	mov	r0, r7
   2c0ec:	f7ff ff22 	bl	2bf34 <sys_mem_swap>
}
   2c0f0:	4620      	mov	r0, r4
   2c0f2:	b017      	add	sp, #92	; 0x5c
   2c0f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002c0f8 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2c0f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c0fa:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2c0fc:	2200      	movs	r2, #0
   2c0fe:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2c100:	4604      	mov	r4, r0
   2c102:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2c104:	460a      	mov	r2, r1
   2c106:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2c10a:	2106      	movs	r1, #6
   2c10c:	f7fe fe76 	bl	2adfc <bt_l2cap_send_cb>
   2c110:	b128      	cbz	r0, 2c11e <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   2c112:	4628      	mov	r0, r5
}
   2c114:	b003      	add	sp, #12
   2c116:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2c11a:	f7f3 ba2b 	b.w	1f574 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2c11e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2c122:	2300      	movs	r3, #0
   2c124:	f504 70bc 	add.w	r0, r4, #376	; 0x178
}
   2c128:	b003      	add	sp, #12
   2c12a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2c12e:	f7f7 bc0b 	b.w	23948 <k_work_reschedule>

0002c132 <z_log_msg_static_create.constprop.0>:
   2c132:	2300      	movs	r3, #0
   2c134:	f7e9 baaa 	b.w	1568c <z_impl_z_log_msg_static_create>

0002c138 <smp_chan_get>:
{
   2c138:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   2c13a:	2106      	movs	r1, #6
   2c13c:	f7fe fe81 	bl	2ae42 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   2c140:	b918      	cbnz	r0, 2c14a <smp_chan_get+0x12>
}
   2c142:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2c146:	f7f1 b92b 	b.w	1d3a0 <smp_chan_get.part.0>
   2c14a:	38ec      	subs	r0, #236	; 0xec
   2c14c:	bd08      	pop	{r3, pc}

0002c14e <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c14e:	2301      	movs	r3, #1
   2c150:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c152:	f3bf 8f5b 	dmb	ish
   2c156:	e850 2f00 	ldrex	r2, [r0]
   2c15a:	431a      	orrs	r2, r3
   2c15c:	e840 2100 	strex	r1, r2, [r0]
   2c160:	2900      	cmp	r1, #0
   2c162:	d1f8      	bne.n	2c156 <atomic_set_bit+0x8>
   2c164:	f3bf 8f5b 	dmb	ish
}
   2c168:	4770      	bx	lr

0002c16a <smp_keypress_notif>:
{
   2c16a:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2c16c:	210e      	movs	r1, #14
   2c16e:	f7ff ffee 	bl	2c14e <atomic_set_bit>
}
   2c172:	2000      	movs	r0, #0
   2c174:	bd08      	pop	{r3, pc}

0002c176 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2c176:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2c178:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2c17a:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2c17c:	4628      	mov	r0, r5
   2c17e:	2104      	movs	r1, #4
   2c180:	f7ff fee7 	bl	2bf52 <atomic_test_bit>
   2c184:	b970      	cbnz	r0, 2c1a4 <smp_create_pdu.constprop.0+0x2e>
		timeout = SMP_TIMEOUT;
   2c186:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2c18a:	2100      	movs	r1, #0
		timeout = K_NO_WAIT;
   2c18c:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2c18e:	4608      	mov	r0, r1
   2c190:	f7fe fe31 	bl	2adf6 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2c194:	4604      	mov	r4, r0
   2c196:	b938      	cbnz	r0, 2c1a8 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2c198:	2104      	movs	r1, #4
   2c19a:	4628      	mov	r0, r5
   2c19c:	f7ff ffd7 	bl	2c14e <atomic_set_bit>
}
   2c1a0:	4620      	mov	r0, r4
   2c1a2:	bd70      	pop	{r4, r5, r6, pc}
		timeout = K_NO_WAIT;
   2c1a4:	2200      	movs	r2, #0
   2c1a6:	e7f0      	b.n	2c18a <smp_create_pdu.constprop.0+0x14>
   2c1a8:	2101      	movs	r1, #1
   2c1aa:	3008      	adds	r0, #8
   2c1ac:	f000 fb9a 	bl	2c8e4 <net_buf_simple_add>
	hdr->code = op;
   2c1b0:	7006      	strb	r6, [r0, #0]
	return buf;
   2c1b2:	e7f5      	b.n	2c1a0 <smp_create_pdu.constprop.0+0x2a>

0002c1b4 <send_pairing_rsp>:
{
   2c1b4:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2c1b6:	2102      	movs	r1, #2
{
   2c1b8:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2c1ba:	f7ff ffdc 	bl	2c176 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2c1be:	4605      	mov	r5, r0
   2c1c0:	b180      	cbz	r0, 2c1e4 <send_pairing_rsp+0x30>
   2c1c2:	2106      	movs	r1, #6
   2c1c4:	3008      	adds	r0, #8
   2c1c6:	f000 fb8d 	bl	2c8e4 <net_buf_simple_add>
   2c1ca:	f8d4 3011 	ldr.w	r3, [r4, #17]
   2c1ce:	6003      	str	r3, [r0, #0]
   2c1d0:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   2c1d4:	8083      	strh	r3, [r0, #4]
	smp_send(smp, rsp_buf, NULL, NULL);
   2c1d6:	2200      	movs	r2, #0
   2c1d8:	4620      	mov	r0, r4
   2c1da:	4629      	mov	r1, r5
   2c1dc:	f7ff ff8c 	bl	2c0f8 <smp_send.constprop.0>
	return 0;
   2c1e0:	2000      	movs	r0, #0
}
   2c1e2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2c1e4:	2008      	movs	r0, #8
   2c1e6:	e7fc      	b.n	2c1e2 <send_pairing_rsp+0x2e>

0002c1e8 <smp_send_pairing_random>:
{
   2c1e8:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2c1ea:	2104      	movs	r1, #4
{
   2c1ec:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2c1ee:	f7ff ffc2 	bl	2c176 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2c1f2:	4605      	mov	r5, r0
   2c1f4:	b1a0      	cbz	r0, 2c220 <smp_send_pairing_random+0x38>
   2c1f6:	2110      	movs	r1, #16
   2c1f8:	3008      	adds	r0, #8
   2c1fa:	f000 fb73 	bl	2c8e4 <net_buf_simple_add>
   2c1fe:	f104 0327 	add.w	r3, r4, #39	; 0x27
   2c202:	f104 0237 	add.w	r2, r4, #55	; 0x37
   2c206:	f853 1b04 	ldr.w	r1, [r3], #4
   2c20a:	f840 1b04 	str.w	r1, [r0], #4
   2c20e:	4293      	cmp	r3, r2
   2c210:	d1f9      	bne.n	2c206 <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   2c212:	4620      	mov	r0, r4
   2c214:	2200      	movs	r2, #0
   2c216:	4629      	mov	r1, r5
   2c218:	f7ff ff6e 	bl	2c0f8 <smp_send.constprop.0>
	return 0;
   2c21c:	2000      	movs	r0, #0
}
   2c21e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2c220:	2008      	movs	r0, #8
   2c222:	e7fc      	b.n	2c21e <smp_send_pairing_random+0x36>

0002c224 <smp_dhkey_check>:
{
   2c224:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2c226:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   2c22a:	78db      	ldrb	r3, [r3, #3]
   2c22c:	2b01      	cmp	r3, #1
{
   2c22e:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2c230:	d119      	bne.n	2c266 <smp_dhkey_check+0x42>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2c232:	688d      	ldr	r5, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2c234:	1d06      	adds	r6, r0, #4
   2c236:	2110      	movs	r1, #16
   2c238:	4630      	mov	r0, r6
   2c23a:	f7ff fef6 	bl	2c02a <atomic_clear_bit>
   2c23e:	462b      	mov	r3, r5
   2c240:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
   2c244:	f105 0110 	add.w	r1, r5, #16
   2c248:	f853 0b04 	ldr.w	r0, [r3], #4
   2c24c:	f842 0b04 	str.w	r0, [r2], #4
   2c250:	428b      	cmp	r3, r1
   2c252:	d1f9      	bne.n	2c248 <smp_dhkey_check+0x24>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2c254:	2107      	movs	r1, #7
   2c256:	4630      	mov	r0, r6
   2c258:	f7ff fe7b 	bl	2bf52 <atomic_test_bit>
   2c25c:	b128      	cbz	r0, 2c26a <smp_dhkey_check+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2c25e:	2109      	movs	r1, #9
   2c260:	4630      	mov	r0, r6
   2c262:	f7ff ff74 	bl	2c14e <atomic_set_bit>
}
   2c266:	2000      	movs	r0, #0
   2c268:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2c26a:	210a      	movs	r1, #10
   2c26c:	4630      	mov	r0, r6
   2c26e:	f7ff fe70 	bl	2bf52 <atomic_test_bit>
   2c272:	2800      	cmp	r0, #0
   2c274:	d1f3      	bne.n	2c25e <smp_dhkey_check+0x3a>
		return compute_and_check_and_send_periph_dhcheck(smp);
   2c276:	4620      	mov	r0, r4
}
   2c278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   2c27c:	f7f1 bb24 	b.w	1d8c8 <compute_and_check_and_send_periph_dhcheck>

0002c280 <smp_security_request>:
   2c280:	2007      	movs	r0, #7
   2c282:	4770      	bx	lr

0002c284 <atomic_test_and_clear_bit>:
{
   2c284:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c286:	2301      	movs	r3, #1
   2c288:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c28c:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c28e:	f3bf 8f5b 	dmb	ish
   2c292:	e850 3f00 	ldrex	r3, [r0]
   2c296:	ea03 0c02 	and.w	ip, r3, r2
   2c29a:	e840 ce00 	strex	lr, ip, [r0]
   2c29e:	f1be 0f00 	cmp.w	lr, #0
   2c2a2:	d1f6      	bne.n	2c292 <atomic_test_and_clear_bit+0xe>
   2c2a4:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2c2a8:	420b      	tst	r3, r1
}
   2c2aa:	bf14      	ite	ne
   2c2ac:	2001      	movne	r0, #1
   2c2ae:	2000      	moveq	r0, #0
   2c2b0:	f85d fb04 	ldr.w	pc, [sp], #4

0002c2b4 <smp_reset>:
{
   2c2b4:	b538      	push	{r3, r4, r5, lr}
   2c2b6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2c2b8:	1d03      	adds	r3, r0, #4
   2c2ba:	2500      	movs	r5, #0
   2c2bc:	f3bf 8f5b 	dmb	ish
   2c2c0:	e853 2f00 	ldrex	r2, [r3]
   2c2c4:	e843 5100 	strex	r1, r5, [r3]
   2c2c8:	2900      	cmp	r1, #0
   2c2ca:	d1f9      	bne.n	2c2c0 <smp_reset+0xc>
   2c2cc:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   2c2d0:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   2c2d4:	f001 fa2f 	bl	2d736 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2c2d8:	7225      	strb	r5, [r4, #8]
   2c2da:	f3bf 8f5b 	dmb	ish
   2c2de:	e854 3f00 	ldrex	r3, [r4]
   2c2e2:	e844 5200 	strex	r2, r5, [r4]
   2c2e6:	2a00      	cmp	r2, #0
   2c2e8:	d1f9      	bne.n	2c2de <smp_reset+0x2a>
   2c2ea:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2c2ee:	4620      	mov	r0, r4
   2c2f0:	2101      	movs	r1, #1
}
   2c2f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2c2f6:	f7ff bf2a 	b.w	2c14e <atomic_set_bit>

0002c2fa <smp_c1>:
{
   2c2fa:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c2fc:	b089      	sub	sp, #36	; 0x24
   2c2fe:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   2c302:	4605      	mov	r5, r0
	p1[0] = ia->type;
   2c304:	7830      	ldrb	r0, [r6, #0]
   2c306:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   2c30a:	7838      	ldrb	r0, [r7, #0]
   2c30c:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   2c310:	6810      	ldr	r0, [r2, #0]
   2c312:	f8cd 0002 	str.w	r0, [sp, #2]
   2c316:	8890      	ldrh	r0, [r2, #4]
   2c318:	7992      	ldrb	r2, [r2, #6]
{
   2c31a:	9c10      	ldr	r4, [sp, #64]	; 0x40
	memcpy(p1 + 2, preq, 7);
   2c31c:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   2c320:	681a      	ldr	r2, [r3, #0]
   2c322:	f8cd 2009 	str.w	r2, [sp, #9]
   2c326:	889a      	ldrh	r2, [r3, #4]
   2c328:	799b      	ldrb	r3, [r3, #6]
	memcpy(p1 + 2, preq, 7);
   2c32a:	f8ad 0006 	strh.w	r0, [sp, #6]
	memcpy(p1 + 9, pres, 7);
   2c32e:	f8ad 200d 	strh.w	r2, [sp, #13]
   2c332:	f88d 300f 	strb.w	r3, [sp, #15]
	while (len--) {
   2c336:	f101 0c10 	add.w	ip, r1, #16
   2c33a:	4620      	mov	r0, r4
   2c33c:	466a      	mov	r2, sp
   2c33e:	458c      	cmp	ip, r1
   2c340:	d124      	bne.n	2c38c <smp_c1+0x92>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2c342:	4622      	mov	r2, r4
   2c344:	4621      	mov	r1, r4
   2c346:	4628      	mov	r0, r5
   2c348:	f000 fdb1 	bl	2ceae <bt_encrypt_le>
	if (err) {
   2c34c:	4603      	mov	r3, r0
   2c34e:	bb70      	cbnz	r0, 2c3ae <smp_c1+0xb4>
	memcpy(p2, ra->a.val, 6);
   2c350:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   2c354:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   2c358:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   2c35c:	f8d7 0001 	ldr.w	r0, [r7, #1]
	memcpy(p2 + 6, ia->a.val, 6);
   2c360:	f8cd 2016 	str.w	r2, [sp, #22]
   2c364:	f8b6 2005 	ldrh.w	r2, [r6, #5]
	memcpy(p2, ra->a.val, 6);
   2c368:	9004      	str	r0, [sp, #16]
	(void)memset(p2 + 12, 0, 4);
   2c36a:	9307      	str	r3, [sp, #28]
	memcpy(p2 + 6, ia->a.val, 6);
   2c36c:	f8ad 201a 	strh.w	r2, [sp, #26]
	while (len--) {
   2c370:	f104 0010 	add.w	r0, r4, #16
   2c374:	4623      	mov	r3, r4
   2c376:	a904      	add	r1, sp, #16
   2c378:	4283      	cmp	r3, r0
   2c37a:	d110      	bne.n	2c39e <smp_c1+0xa4>
	return bt_encrypt_le(k, enc_data, enc_data);
   2c37c:	4622      	mov	r2, r4
   2c37e:	4621      	mov	r1, r4
   2c380:	4628      	mov	r0, r5
}
   2c382:	b009      	add	sp, #36	; 0x24
   2c384:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   2c388:	f000 bd91 	b.w	2ceae <bt_encrypt_le>
		*r++ = *p++ ^ *q++;
   2c38c:	f811 3b01 	ldrb.w	r3, [r1], #1
   2c390:	f812 eb01 	ldrb.w	lr, [r2], #1
   2c394:	ea83 030e 	eor.w	r3, r3, lr
   2c398:	f800 3b01 	strb.w	r3, [r0], #1
   2c39c:	e7cf      	b.n	2c33e <smp_c1+0x44>
   2c39e:	f813 2b01 	ldrb.w	r2, [r3], #1
   2c3a2:	f811 6b01 	ldrb.w	r6, [r1], #1
   2c3a6:	4072      	eors	r2, r6
   2c3a8:	f803 2c01 	strb.w	r2, [r3, #-1]
   2c3ac:	e7e4      	b.n	2c378 <smp_c1+0x7e>
}
   2c3ae:	b009      	add	sp, #36	; 0x24
   2c3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c3b2 <legacy_pairing_confirm>:
{
   2c3b2:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2c3b4:	1d07      	adds	r7, r0, #4
{
   2c3b6:	b085      	sub	sp, #20
   2c3b8:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2c3ba:	210a      	movs	r1, #10
   2c3bc:	4638      	mov	r0, r7
   2c3be:	f7ff fdc8 	bl	2bf52 <atomic_test_bit>
   2c3c2:	bb88      	cbnz	r0, 2c428 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   2c3c4:	2104      	movs	r1, #4
   2c3c6:	4628      	mov	r0, r5
   2c3c8:	f7ff fec1 	bl	2c14e <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2c3cc:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   2c3ce:	f8d5 40ec 	ldr.w	r4, [r5, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2c3d2:	f7ff fed0 	bl	2c176 <smp_create_pdu.constprop.0>
	if (!buf) {
   2c3d6:	4606      	mov	r6, r0
   2c3d8:	b1c0      	cbz	r0, 2c40c <legacy_pairing_confirm+0x5a>
   2c3da:	2110      	movs	r1, #16
   2c3dc:	3008      	adds	r0, #8
   2c3de:	f000 fa81 	bl	2c8e4 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2c3e2:	f104 0396 	add.w	r3, r4, #150	; 0x96
   2c3e6:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2c3e8:	9002      	str	r0, [sp, #8]
   2c3ea:	9301      	str	r3, [sp, #4]
   2c3ec:	9400      	str	r4, [sp, #0]
   2c3ee:	f105 0310 	add.w	r3, r5, #16
   2c3f2:	f105 0209 	add.w	r2, r5, #9
   2c3f6:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2c3fa:	f105 0047 	add.w	r0, r5, #71	; 0x47
   2c3fe:	f7ff ff7c 	bl	2c2fa <smp_c1>
   2c402:	4604      	mov	r4, r0
   2c404:	b120      	cbz	r0, 2c410 <legacy_pairing_confirm+0x5e>
		net_buf_unref(buf);
   2c406:	4630      	mov	r0, r6
   2c408:	f7f3 f8b4 	bl	1f574 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2c40c:	2008      	movs	r0, #8
   2c40e:	e009      	b.n	2c424 <legacy_pairing_confirm+0x72>
	smp_send(smp, buf, NULL, NULL);
   2c410:	4602      	mov	r2, r0
   2c412:	4631      	mov	r1, r6
   2c414:	4628      	mov	r0, r5
   2c416:	f7ff fe6f 	bl	2c0f8 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2c41a:	4621      	mov	r1, r4
   2c41c:	4638      	mov	r0, r7
   2c41e:	f7ff fe04 	bl	2c02a <atomic_clear_bit>
	return 0;
   2c422:	2000      	movs	r0, #0
}
   2c424:	b005      	add	sp, #20
   2c426:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2c428:	2100      	movs	r1, #0
   2c42a:	4638      	mov	r0, r7
   2c42c:	f7ff fe8f 	bl	2c14e <atomic_set_bit>
   2c430:	e7f7      	b.n	2c422 <legacy_pairing_confirm+0x70>

0002c432 <bt_smp_request_ltk>:
{
   2c432:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2c436:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   2c43a:	e9cd 2300 	strd	r2, r3, [sp]
   2c43e:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   2c440:	f7ff fe7a 	bl	2c138 <smp_chan_get>
	if (!smp) {
   2c444:	4605      	mov	r5, r0
   2c446:	2800      	cmp	r0, #0
   2c448:	f000 8090 	beq.w	2c56c <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   2c44c:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2c450:	1d07      	adds	r7, r0, #4
	if (ediv == 0U && rand == 0U &&
   2c452:	f1b9 0f00 	cmp.w	r9, #0
   2c456:	d12a      	bne.n	2c4ae <bt_smp_request_ltk+0x7c>
   2c458:	e9dd 2300 	ldrd	r2, r3, [sp]
   2c45c:	4313      	orrs	r3, r2
   2c45e:	d126      	bne.n	2c4ae <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2c460:	2103      	movs	r1, #3
   2c462:	4638      	mov	r0, r7
   2c464:	f7ff fd75 	bl	2bf52 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2c468:	b308      	cbz	r0, 2c4ae <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2c46a:	2101      	movs	r1, #1
   2c46c:	4638      	mov	r0, r7
   2c46e:	f7ff fd70 	bl	2bf52 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2c472:	4606      	mov	r6, r0
   2c474:	b1d8      	cbz	r0, 2c4ae <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   2c476:	7d2c      	ldrb	r4, [r5, #20]
   2c478:	7b6b      	ldrb	r3, [r5, #13]
   2c47a:	429c      	cmp	r4, r3
   2c47c:	bf28      	it	cs
   2c47e:	461c      	movcs	r4, r3
   2c480:	4622      	mov	r2, r4
   2c482:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2c486:	4640      	mov	r0, r8
   2c488:	f001 fca6 	bl	2ddd8 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2c48c:	2c0f      	cmp	r4, #15
   2c48e:	d806      	bhi.n	2c49e <bt_smp_request_ltk+0x6c>
__ssp_bos_icheck3(memset, void *, int)
   2c490:	f1c4 0210 	rsb	r2, r4, #16
   2c494:	4649      	mov	r1, r9
   2c496:	eb08 0004 	add.w	r0, r8, r4
   2c49a:	f001 fcbe 	bl	2de1a <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2c49e:	2101      	movs	r1, #1
   2c4a0:	4638      	mov	r0, r7
   2c4a2:	f7ff fe54 	bl	2c14e <atomic_set_bit>
}
   2c4a6:	4630      	mov	r0, r6
   2c4a8:	b003      	add	sp, #12
   2c4aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   2c4ae:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2c4b2:	b983      	cbnz	r3, 2c4d6 <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   2c4b4:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2c4b8:	7a21      	ldrb	r1, [r4, #8]
   2c4ba:	4632      	mov	r2, r6
   2c4bc:	2020      	movs	r0, #32
   2c4be:	f7f2 fdc3 	bl	1f048 <bt_keys_find>
   2c4c2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   2c4c6:	b930      	cbnz	r0, 2c4d6 <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2c4c8:	7a21      	ldrb	r1, [r4, #8]
   2c4ca:	4632      	mov	r2, r6
   2c4cc:	2001      	movs	r0, #1
   2c4ce:	f7f2 fdbb 	bl	1f048 <bt_keys_find>
   2c4d2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   2c4d6:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2c4da:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   2c4de:	b9ee      	cbnz	r6, 2c51c <bt_smp_request_ltk+0xea>
   2c4e0:	e9dd 2300 	ldrd	r2, r3, [sp]
   2c4e4:	4313      	orrs	r3, r2
   2c4e6:	d119      	bne.n	2c51c <bt_smp_request_ltk+0xea>
   2c4e8:	b388      	cbz	r0, 2c54e <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2c4ea:	89c3      	ldrh	r3, [r0, #14]
   2c4ec:	069a      	lsls	r2, r3, #26
   2c4ee:	d516      	bpl.n	2c51e <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   2c4f0:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2c4f2:	f100 011a 	add.w	r1, r0, #26
   2c4f6:	4622      	mov	r2, r4
   2c4f8:	4640      	mov	r0, r8
   2c4fa:	f001 fc6d 	bl	2ddd8 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2c4fe:	2c0f      	cmp	r4, #15
   2c500:	d806      	bhi.n	2c510 <bt_smp_request_ltk+0xde>
__ssp_bos_icheck3(memset, void *, int)
   2c502:	f1c4 0210 	rsb	r2, r4, #16
   2c506:	4631      	mov	r1, r6
   2c508:	eb08 0004 	add.w	r0, r8, r4
   2c50c:	f001 fc85 	bl	2de1a <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2c510:	2101      	movs	r1, #1
   2c512:	4638      	mov	r0, r7
   2c514:	f7ff fe1b 	bl	2c14e <atomic_set_bit>
		return true;
   2c518:	2601      	movs	r6, #1
   2c51a:	e7c4      	b.n	2c4a6 <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2c51c:	b1b8      	cbz	r0, 2c54e <bt_smp_request_ltk+0x11c>
   2c51e:	89c3      	ldrh	r3, [r0, #14]
   2c520:	07db      	lsls	r3, r3, #31
   2c522:	d514      	bpl.n	2c54e <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2c524:	2208      	movs	r2, #8
   2c526:	4669      	mov	r1, sp
   2c528:	3068      	adds	r0, #104	; 0x68
   2c52a:	f001 fc45 	bl	2ddb8 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2c52e:	b970      	cbnz	r0, 2c54e <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2c530:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2c534:	2202      	movs	r2, #2
   2c536:	a90a      	add	r1, sp, #40	; 0x28
   2c538:	3070      	adds	r0, #112	; 0x70
   2c53a:	f001 fc3d 	bl	2ddb8 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2c53e:	4606      	mov	r6, r0
   2c540:	b928      	cbnz	r0, 2c54e <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   2c542:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   2c546:	7b0c      	ldrb	r4, [r1, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2c548:	3172      	adds	r1, #114	; 0x72
   2c54a:	4622      	mov	r2, r4
   2c54c:	e7d4      	b.n	2c4f8 <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2c54e:	210f      	movs	r1, #15
   2c550:	4638      	mov	r0, r7
   2c552:	f7ff fcfe 	bl	2bf52 <atomic_test_bit>
   2c556:	b120      	cbz	r0, 2c562 <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2c558:	2202      	movs	r2, #2
   2c55a:	2106      	movs	r1, #6
   2c55c:	4620      	mov	r0, r4
   2c55e:	f7ed fdd9 	bl	1a114 <bt_conn_security_changed>
	smp_reset(smp);
   2c562:	4628      	mov	r0, r5
   2c564:	f7ff fea6 	bl	2c2b4 <smp_reset>
	return false;
   2c568:	2600      	movs	r6, #0
   2c56a:	e79c      	b.n	2c4a6 <bt_smp_request_ltk+0x74>
		return false;
   2c56c:	4606      	mov	r6, r0
   2c56e:	e79a      	b.n	2c4a6 <bt_smp_request_ltk+0x74>

0002c570 <bt_smp_irk_get>:
{
   2c570:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   2c572:	2500      	movs	r5, #0
{
   2c574:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   2c576:	2210      	movs	r2, #16
   2c578:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   2c57a:	e9cd 5500 	strd	r5, r5, [sp]
   2c57e:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   2c582:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   2c584:	f001 fc18 	bl	2ddb8 <memcmp>
   2c588:	b170      	cbz	r0, 2c5a8 <bt_smp_irk_get+0x38>
	dst[0] = val;
   2c58a:	2301      	movs	r3, #1
   2c58c:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   2c58e:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   2c590:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   2c592:	70e5      	strb	r5, [r4, #3]
__ssp_bos_icheck3(memset, void *, int)
   2c594:	6065      	str	r5, [r4, #4]
   2c596:	60a5      	str	r5, [r4, #8]
   2c598:	60e5      	str	r5, [r4, #12]
	err = bt_encrypt_le(key, res, res);
   2c59a:	4622      	mov	r2, r4
   2c59c:	4621      	mov	r1, r4
   2c59e:	4630      	mov	r0, r6
   2c5a0:	f000 fc85 	bl	2ceae <bt_encrypt_le>
}
   2c5a4:	b004      	add	sp, #16
   2c5a6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2c5a8:	f06f 0015 	mvn.w	r0, #21
   2c5ac:	e7fa      	b.n	2c5a4 <bt_smp_irk_get+0x34>

0002c5ae <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c5ae:	1d03      	adds	r3, r0, #4
{
   2c5b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c5b2:	4605      	mov	r5, r0
   2c5b4:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c5b6:	4618      	mov	r0, r3
   2c5b8:	2103      	movs	r1, #3
   2c5ba:	f7ff fcca 	bl	2bf52 <atomic_test_bit>
   2c5be:	b1f0      	cbz	r0, 2c5fe <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   2c5c0:	4631      	mov	r1, r6
   2c5c2:	4628      	mov	r0, r5
   2c5c4:	f7f1 ff80 	bl	1e4c8 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   2c5c8:	2105      	movs	r1, #5
   2c5ca:	4628      	mov	r0, r5
   2c5cc:	f7ff fdd3 	bl	2c176 <smp_create_pdu.constprop.0>
	if (!buf) {
   2c5d0:	4604      	mov	r4, r0
   2c5d2:	b308      	cbz	r0, 2c618 <smp_error+0x6a>
   2c5d4:	2101      	movs	r1, #1
   2c5d6:	3008      	adds	r0, #8
   2c5d8:	f000 f984 	bl	2c8e4 <net_buf_simple_add>
	rsp->reason = reason;
   2c5dc:	7006      	strb	r6, [r0, #0]
   2c5de:	2600      	movs	r6, #0
   2c5e0:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
   2c5e4:	9600      	str	r6, [sp, #0]
   2c5e6:	4633      	mov	r3, r6
   2c5e8:	4622      	mov	r2, r4
   2c5ea:	2106      	movs	r1, #6
   2c5ec:	f7fe fc06 	bl	2adfc <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   2c5f0:	b118      	cbz	r0, 2c5fa <smp_error+0x4c>
		net_buf_unref(buf);
   2c5f2:	4620      	mov	r0, r4
   2c5f4:	f7f2 ffbe 	bl	1f574 <net_buf_unref>
	return 0;
   2c5f8:	4630      	mov	r0, r6
}
   2c5fa:	b002      	add	sp, #8
   2c5fc:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2c5fe:	2101      	movs	r1, #1
   2c600:	4618      	mov	r0, r3
   2c602:	f7ff fca6 	bl	2bf52 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c606:	2800      	cmp	r0, #0
   2c608:	d1da      	bne.n	2c5c0 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2c60a:	210f      	movs	r1, #15
   2c60c:	4618      	mov	r0, r3
   2c60e:	f7ff fca0 	bl	2bf52 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2c612:	2800      	cmp	r0, #0
   2c614:	d1d4      	bne.n	2c5c0 <smp_error+0x12>
   2c616:	e7d7      	b.n	2c5c8 <smp_error+0x1a>
		return -ENOBUFS;
   2c618:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c61c:	e7ed      	b.n	2c5fa <smp_error+0x4c>

0002c61e <bt_smp_dhkey_ready>:
{
   2c61e:	b570      	push	{r4, r5, r6, lr}
   2c620:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2c622:	2008      	movs	r0, #8
   2c624:	f7f0 fdd0 	bl	1d1c8 <smp_find>
	if (smp) {
   2c628:	4605      	mov	r5, r0
   2c62a:	b1e0      	cbz	r0, 2c666 <bt_smp_dhkey_ready+0x48>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2c62c:	1d06      	adds	r6, r0, #4
   2c62e:	2108      	movs	r1, #8
   2c630:	4630      	mov	r0, r6
   2c632:	f7ff fcfa 	bl	2c02a <atomic_clear_bit>
	if (!dhkey) {
   2c636:	b3bc      	cbz	r4, 2c6a8 <bt_smp_dhkey_ready+0x8a>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2c638:	2107      	movs	r1, #7
   2c63a:	f7ff fcf6 	bl	2c02a <atomic_clear_bit>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2c63e:	4623      	mov	r3, r4
   2c640:	f105 0297 	add.w	r2, r5, #151	; 0x97
   2c644:	f104 0120 	add.w	r1, r4, #32
   2c648:	f853 0b04 	ldr.w	r0, [r3], #4
   2c64c:	f842 0b04 	str.w	r0, [r2], #4
   2c650:	428b      	cmp	r3, r1
   2c652:	d1f9      	bne.n	2c648 <bt_smp_dhkey_ready+0x2a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2c654:	210a      	movs	r1, #10
   2c656:	4630      	mov	r0, r6
   2c658:	f7ff fc7b 	bl	2bf52 <atomic_test_bit>
   2c65c:	b170      	cbz	r0, 2c67c <bt_smp_dhkey_ready+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2c65e:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2c660:	4630      	mov	r0, r6
   2c662:	f7ff fd74 	bl	2c14e <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2c666:	2007      	movs	r0, #7
   2c668:	f7f0 fdae 	bl	1d1c8 <smp_find>
		if (smp) {
   2c66c:	4604      	mov	r4, r0
   2c66e:	b1e8      	cbz	r0, 2c6ac <bt_smp_dhkey_ready+0x8e>
			err = smp_dhkey_generate(smp);
   2c670:	f7f0 fec6 	bl	1d400 <smp_dhkey_generate>
			if (err) {
   2c674:	4601      	mov	r1, r0
   2c676:	b1c8      	cbz	r0, 2c6ac <bt_smp_dhkey_ready+0x8e>
				smp_error(smp, err);
   2c678:	4620      	mov	r0, r4
   2c67a:	e012      	b.n	2c6a2 <bt_smp_dhkey_ready+0x84>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2c67c:	2110      	movs	r1, #16
   2c67e:	4630      	mov	r0, r6
   2c680:	f7ff fc67 	bl	2bf52 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2c684:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2c686:	2800      	cmp	r0, #0
   2c688:	d1ea      	bne.n	2c660 <bt_smp_dhkey_ready+0x42>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2c68a:	4630      	mov	r0, r6
   2c68c:	f7ff fc61 	bl	2bf52 <atomic_test_bit>
   2c690:	2800      	cmp	r0, #0
   2c692:	d0e8      	beq.n	2c666 <bt_smp_dhkey_ready+0x48>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2c694:	4628      	mov	r0, r5
   2c696:	f7f1 f917 	bl	1d8c8 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   2c69a:	4601      	mov	r1, r0
   2c69c:	2800      	cmp	r0, #0
   2c69e:	d0e2      	beq.n	2c666 <bt_smp_dhkey_ready+0x48>
			smp_error(smp, err);
   2c6a0:	4628      	mov	r0, r5
   2c6a2:	f7ff ff84 	bl	2c5ae <smp_error>
   2c6a6:	e7de      	b.n	2c666 <bt_smp_dhkey_ready+0x48>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2c6a8:	210b      	movs	r1, #11
   2c6aa:	e7f9      	b.n	2c6a0 <bt_smp_dhkey_ready+0x82>
}
   2c6ac:	bd70      	pop	{r4, r5, r6, pc}

0002c6ae <smp_check_complete>:
{
   2c6ae:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   2c6b0:	7883      	ldrb	r3, [r0, #2]
   2c6b2:	2b01      	cmp	r3, #1
{
   2c6b4:	460c      	mov	r4, r1
	if (conn->type == BT_CONN_TYPE_LE) {
   2c6b6:	d110      	bne.n	2c6da <smp_check_complete+0x2c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   2c6b8:	2106      	movs	r1, #6
   2c6ba:	f7fe fbb8 	bl	2ae2e <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   2c6be:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   2c6c2:	ea23 0104 	bic.w	r1, r3, r4
   2c6c6:	f800 1c04 	strb.w	r1, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   2c6ca:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   2c6ce:	b921      	cbnz	r1, 2c6da <smp_check_complete+0x2c>
}
   2c6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   2c6d4:	38ec      	subs	r0, #236	; 0xec
   2c6d6:	f7f1 bef7 	b.w	1e4c8 <smp_pairing_complete>
}
   2c6da:	bd10      	pop	{r4, pc}

0002c6dc <smp_sign_info_sent>:
	if (!err) {
   2c6dc:	b912      	cbnz	r2, 2c6e4 <smp_sign_info_sent+0x8>
		smp_check_complete(conn, BT_SMP_DIST_SIGN);
   2c6de:	2104      	movs	r1, #4
   2c6e0:	f7ff bfe5 	b.w	2c6ae <smp_check_complete>
}
   2c6e4:	4770      	bx	lr

0002c6e6 <smp_id_sent>:
	if (!err) {
   2c6e6:	b912      	cbnz	r2, 2c6ee <smp_id_sent+0x8>
		smp_check_complete(conn, BT_SMP_DIST_ID_KEY);
   2c6e8:	2102      	movs	r1, #2
   2c6ea:	f7ff bfe0 	b.w	2c6ae <smp_check_complete>
}
   2c6ee:	4770      	bx	lr

0002c6f0 <smp_ident_sent>:
	if (!err) {
   2c6f0:	b912      	cbnz	r2, 2c6f8 <smp_ident_sent+0x8>
		smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
   2c6f2:	2101      	movs	r1, #1
   2c6f4:	f7ff bfdb 	b.w	2c6ae <smp_check_complete>
}
   2c6f8:	4770      	bx	lr

0002c6fa <bt_smp_disconnected>:
{
   2c6fa:	b570      	push	{r4, r5, r6, lr}
   2c6fc:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2c6fe:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2c702:	f850 3b8c 	ldr.w	r3, [r0], #140
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c706:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   2c708:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   2c70c:	f001 f813 	bl	2d736 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c710:	2103      	movs	r1, #3
   2c712:	4620      	mov	r0, r4
   2c714:	f7ff fc1d 	bl	2bf52 <atomic_test_bit>
   2c718:	b1a0      	cbz	r0, 2c744 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2c71a:	2108      	movs	r1, #8
   2c71c:	4630      	mov	r0, r6
   2c71e:	f7f1 fed3 	bl	1e4c8 <smp_pairing_complete>
	if (keys) {
   2c722:	b13d      	cbz	r5, 2c734 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2c724:	89eb      	ldrh	r3, [r5, #14]
   2c726:	b113      	cbz	r3, 2c72e <bt_smp_disconnected+0x34>
   2c728:	7b6b      	ldrb	r3, [r5, #13]
   2c72a:	079b      	lsls	r3, r3, #30
   2c72c:	d502      	bpl.n	2c734 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2c72e:	4628      	mov	r0, r5
   2c730:	f7f2 fcea 	bl	1f108 <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   2c734:	4630      	mov	r0, r6
   2c736:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
}
   2c73a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2c73e:	2100      	movs	r1, #0
   2c740:	f001 bb6b 	b.w	2de1a <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2c744:	2101      	movs	r1, #1
   2c746:	4620      	mov	r0, r4
   2c748:	f7ff fc03 	bl	2bf52 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c74c:	2800      	cmp	r0, #0
   2c74e:	d1e4      	bne.n	2c71a <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2c750:	210f      	movs	r1, #15
   2c752:	4620      	mov	r0, r4
   2c754:	f7ff fbfd 	bl	2bf52 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2c758:	2800      	cmp	r0, #0
   2c75a:	d1de      	bne.n	2c71a <bt_smp_disconnected+0x20>
   2c75c:	e7e1      	b.n	2c722 <bt_smp_disconnected+0x28>

0002c75e <id_add>:
	bt_id_add(keys);
   2c75e:	f7ec bd91 	b.w	19284 <bt_id_add>

0002c762 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2c762:	680b      	ldr	r3, [r1, #0]
   2c764:	6003      	str	r3, [r0, #0]
   2c766:	888b      	ldrh	r3, [r1, #4]
   2c768:	8083      	strh	r3, [r0, #4]
   2c76a:	798b      	ldrb	r3, [r1, #6]
   2c76c:	7183      	strb	r3, [r0, #6]
   2c76e:	4770      	bx	lr

0002c770 <bt_keys_get_type>:
{
   2c770:	b570      	push	{r4, r5, r6, lr}
   2c772:	4604      	mov	r4, r0
   2c774:	460d      	mov	r5, r1
   2c776:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   2c778:	f7f2 fc66 	bl	1f048 <bt_keys_find>
	if (keys) {
   2c77c:	b938      	cbnz	r0, 2c78e <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   2c77e:	4631      	mov	r1, r6
   2c780:	4628      	mov	r0, r5
   2c782:	f7f2 fbf1 	bl	1ef68 <bt_keys_get_addr>
	if (!keys) {
   2c786:	b110      	cbz	r0, 2c78e <bt_keys_get_type+0x1e>
	keys->keys |= type;
   2c788:	89c3      	ldrh	r3, [r0, #14]
   2c78a:	431c      	orrs	r4, r3
   2c78c:	81c4      	strh	r4, [r0, #14]
}
   2c78e:	bd70      	pop	{r4, r5, r6, pc}

0002c790 <bt_keys_add_type>:
	keys->keys |= type;
   2c790:	89c3      	ldrh	r3, [r0, #14]
   2c792:	4319      	orrs	r1, r3
   2c794:	81c1      	strh	r1, [r0, #14]
}
   2c796:	4770      	bx	lr

0002c798 <fixed_data_unref>:
}
   2c798:	4770      	bx	lr

0002c79a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2c79a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2c79c:	6849      	ldr	r1, [r1, #4]
   2c79e:	6809      	ldr	r1, [r1, #0]
   2c7a0:	f7f2 be54 	b.w	1f44c <net_buf_alloc_len>

0002c7a4 <net_buf_get>:
{
   2c7a4:	b570      	push	{r4, r5, r6, lr}
   2c7a6:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   2c7a8:	f7f6 fe70 	bl	2348c <z_impl_k_queue_get>
	if (!buf) {
   2c7ac:	4605      	mov	r5, r0
   2c7ae:	b128      	cbz	r0, 2c7bc <net_buf_get+0x18>
   2c7b0:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2c7b2:	7963      	ldrb	r3, [r4, #5]
   2c7b4:	f013 0301 	ands.w	r3, r3, #1
   2c7b8:	d102      	bne.n	2c7c0 <net_buf_get+0x1c>
	frag->frags = NULL;
   2c7ba:	6023      	str	r3, [r4, #0]
}
   2c7bc:	4628      	mov	r0, r5
   2c7be:	bd70      	pop	{r4, r5, r6, pc}
   2c7c0:	2300      	movs	r3, #0
   2c7c2:	2200      	movs	r2, #0
   2c7c4:	4630      	mov	r0, r6
   2c7c6:	f7f6 fe61 	bl	2348c <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   2c7ca:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   2c7cc:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   2c7ce:	f023 0301 	bic.w	r3, r3, #1
   2c7d2:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2c7d4:	4604      	mov	r4, r0
   2c7d6:	e7ec      	b.n	2c7b2 <net_buf_get+0xe>

0002c7d8 <net_buf_simple_init_with_data>:
	buf->size  = size;
   2c7d8:	b292      	uxth	r2, r2
	buf->__buf = data;
   2c7da:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2c7dc:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   2c7de:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2c7e0:	8082      	strh	r2, [r0, #4]
}
   2c7e2:	4770      	bx	lr

0002c7e4 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   2c7e4:	6883      	ldr	r3, [r0, #8]
   2c7e6:	440b      	add	r3, r1
   2c7e8:	6003      	str	r3, [r0, #0]
}
   2c7ea:	4770      	bx	lr

0002c7ec <net_buf_slist_put>:
{
   2c7ec:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   2c7ee:	460b      	mov	r3, r1
   2c7f0:	681c      	ldr	r4, [r3, #0]
   2c7f2:	b98c      	cbnz	r4, 2c818 <net_buf_slist_put+0x2c>
	__asm__ volatile(
   2c7f4:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c7f8:	f3ef 8411 	mrs	r4, BASEPRI
   2c7fc:	f382 8812 	msr	BASEPRI_MAX, r2
   2c800:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(slist, snode)
   2c804:	b119      	cbz	r1, 2c80e <net_buf_slist_put+0x22>
	return list->tail;
   2c806:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   2c808:	b962      	cbnz	r2, 2c824 <net_buf_slist_put+0x38>
	list->head = node;
   2c80a:	6001      	str	r1, [r0, #0]
	list->tail = node;
   2c80c:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   2c80e:	f384 8811 	msr	BASEPRI, r4
   2c812:	f3bf 8f6f 	isb	sy
}
   2c816:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   2c818:	795a      	ldrb	r2, [r3, #5]
   2c81a:	f042 0201 	orr.w	r2, r2, #1
   2c81e:	715a      	strb	r2, [r3, #5]
   2c820:	4623      	mov	r3, r4
   2c822:	e7e5      	b.n	2c7f0 <net_buf_slist_put+0x4>
	parent->next = child;
   2c824:	6011      	str	r1, [r2, #0]
}
   2c826:	e7f1      	b.n	2c80c <net_buf_slist_put+0x20>

0002c828 <net_buf_slist_get>:
{
   2c828:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c82a:	4603      	mov	r3, r0
	__asm__ volatile(
   2c82c:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c830:	f3ef 8611 	mrs	r6, BASEPRI
   2c834:	f382 8812 	msr	BASEPRI_MAX, r2
   2c838:	f3bf 8f6f 	isb	sy
	return list->head;
   2c83c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2c83e:	b158      	cbz	r0, 2c858 <net_buf_slist_get+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c840:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2c842:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2c844:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c846:	4288      	cmp	r0, r1
	list->tail = node;
   2c848:	bf08      	it	eq
   2c84a:	605a      	streq	r2, [r3, #4]
   2c84c:	4602      	mov	r2, r0
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2c84e:	7951      	ldrb	r1, [r2, #5]
   2c850:	f011 0401 	ands.w	r4, r1, #1
   2c854:	d105      	bne.n	2c862 <net_buf_slist_get+0x3a>
		frag->frags = NULL;
   2c856:	6014      	str	r4, [r2, #0]
	__asm__ volatile(
   2c858:	f386 8811 	msr	BASEPRI, r6
   2c85c:	f3bf 8f6f 	isb	sy
}
   2c860:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return list->head;
   2c862:	681c      	ldr	r4, [r3, #0]
Z_GENLIST_GET(slist, snode)
   2c864:	b12c      	cbz	r4, 2c872 <net_buf_slist_get+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c866:	685f      	ldr	r7, [r3, #4]
	return node->next;
   2c868:	6825      	ldr	r5, [r4, #0]
	list->head = node;
   2c86a:	601d      	str	r5, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c86c:	42bc      	cmp	r4, r7
	list->tail = node;
   2c86e:	bf08      	it	eq
   2c870:	605d      	streq	r5, [r3, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   2c872:	f021 0101 	bic.w	r1, r1, #1
			frag->frags = (void *)sys_slist_get(list);
   2c876:	6014      	str	r4, [r2, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   2c878:	7151      	strb	r1, [r2, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2c87a:	4622      	mov	r2, r4
   2c87c:	e7e7      	b.n	2c84e <net_buf_slist_get+0x26>

0002c87e <net_buf_put>:
{
   2c87e:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   2c880:	460a      	mov	r2, r1
   2c882:	6814      	ldr	r4, [r2, #0]
   2c884:	b914      	cbnz	r4, 2c88c <net_buf_put+0xe>
}
   2c886:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   2c888:	f000 be47 	b.w	2d51a <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   2c88c:	7953      	ldrb	r3, [r2, #5]
   2c88e:	f043 0301 	orr.w	r3, r3, #1
   2c892:	7153      	strb	r3, [r2, #5]
   2c894:	4622      	mov	r2, r4
   2c896:	e7f4      	b.n	2c882 <net_buf_put+0x4>

0002c898 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2c898:	7902      	ldrb	r2, [r0, #4]
   2c89a:	3201      	adds	r2, #1
   2c89c:	7102      	strb	r2, [r0, #4]
	return buf;
}
   2c89e:	4770      	bx	lr

0002c8a0 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2c8a0:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2c8a2:	4618      	mov	r0, r3
   2c8a4:	681b      	ldr	r3, [r3, #0]
   2c8a6:	2b00      	cmp	r3, #0
   2c8a8:	d1fb      	bne.n	2c8a2 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2c8aa:	4770      	bx	lr

0002c8ac <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2c8ac:	6802      	ldr	r2, [r0, #0]
{
   2c8ae:	b510      	push	{r4, lr}
	if (parent->frags) {
   2c8b0:	b12a      	cbz	r2, 2c8be <net_buf_frag_insert+0x12>
   2c8b2:	460b      	mov	r3, r1
	while (buf->frags) {
   2c8b4:	461c      	mov	r4, r3
   2c8b6:	681b      	ldr	r3, [r3, #0]
   2c8b8:	2b00      	cmp	r3, #0
   2c8ba:	d1fb      	bne.n	2c8b4 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   2c8bc:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2c8be:	6001      	str	r1, [r0, #0]
}
   2c8c0:	bd10      	pop	{r4, pc}

0002c8c2 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2c8c2:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2c8c4:	4604      	mov	r4, r0
   2c8c6:	b920      	cbnz	r0, 2c8d2 <net_buf_frag_add+0x10>
	buf->ref++;
   2c8c8:	790b      	ldrb	r3, [r1, #4]
   2c8ca:	3301      	adds	r3, #1
   2c8cc:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   2c8ce:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2c8d0:	bd10      	pop	{r4, pc}
   2c8d2:	4603      	mov	r3, r0
	while (buf->frags) {
   2c8d4:	4618      	mov	r0, r3
   2c8d6:	681b      	ldr	r3, [r3, #0]
   2c8d8:	2b00      	cmp	r3, #0
   2c8da:	d1fb      	bne.n	2c8d4 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2c8dc:	f7ff ffe6 	bl	2c8ac <net_buf_frag_insert>
   2c8e0:	4620      	mov	r0, r4
   2c8e2:	e7f5      	b.n	2c8d0 <net_buf_frag_add+0xe>

0002c8e4 <net_buf_simple_add>:
	return buf->data + buf->len;
   2c8e4:	8883      	ldrh	r3, [r0, #4]
   2c8e6:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2c8e8:	4419      	add	r1, r3
   2c8ea:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2c8ec:	18d0      	adds	r0, r2, r3
   2c8ee:	4770      	bx	lr

0002c8f0 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2c8f0:	b430      	push	{r4, r5}
   2c8f2:	8884      	ldrh	r4, [r0, #4]
   2c8f4:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2c8f6:	18a3      	adds	r3, r4, r2
   2c8f8:	8083      	strh	r3, [r0, #4]
   2c8fa:	1928      	adds	r0, r5, r4
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   2c8fc:	bc30      	pop	{r4, r5}
   2c8fe:	f001 ba6b 	b.w	2ddd8 <memcpy>

0002c902 <net_buf_simple_add_u8>:
   2c902:	8883      	ldrh	r3, [r0, #4]
   2c904:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2c906:	b510      	push	{r4, lr}
	buf->len += len;
   2c908:	1c5c      	adds	r4, r3, #1
   2c90a:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2c90c:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2c90e:	18d0      	adds	r0, r2, r3
   2c910:	bd10      	pop	{r4, pc}

0002c912 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2c912:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2c914:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   2c916:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   2c918:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2c91a:	4411      	add	r1, r2
	buf->data -= len;
   2c91c:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2c91e:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2c920:	4770      	bx	lr

0002c922 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2c922:	8882      	ldrh	r2, [r0, #4]
   2c924:	1a52      	subs	r2, r2, r1
{
   2c926:	4603      	mov	r3, r0
	buf->len -= len;
   2c928:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2c92a:	6800      	ldr	r0, [r0, #0]
   2c92c:	4408      	add	r0, r1
   2c92e:	6018      	str	r0, [r3, #0]
}
   2c930:	4770      	bx	lr

0002c932 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2c932:	4603      	mov	r3, r0
	void *data = buf->data;
   2c934:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2c936:	889a      	ldrh	r2, [r3, #4]
   2c938:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2c93a:	4401      	add	r1, r0
	buf->len -= len;
   2c93c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2c93e:	6019      	str	r1, [r3, #0]

	return data;
}
   2c940:	4770      	bx	lr

0002c942 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   2c942:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   2c944:	6803      	ldr	r3, [r0, #0]
   2c946:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2c948:	2101      	movs	r1, #1
   2c94a:	f7ff ffea 	bl	2c922 <net_buf_simple_pull>

	return val;
}
   2c94e:	4620      	mov	r0, r4
   2c950:	bd10      	pop	{r4, pc}

0002c952 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2c952:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2c954:	6803      	ldr	r3, [r0, #0]
   2c956:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2c958:	2102      	movs	r1, #2
   2c95a:	f7ff ffe2 	bl	2c922 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2c95e:	4620      	mov	r0, r4
   2c960:	bd10      	pop	{r4, pc}

0002c962 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2c962:	6802      	ldr	r2, [r0, #0]
   2c964:	6880      	ldr	r0, [r0, #8]
}
   2c966:	1a10      	subs	r0, r2, r0
   2c968:	4770      	bx	lr

0002c96a <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2c96a:	8883      	ldrh	r3, [r0, #4]
   2c96c:	88c2      	ldrh	r2, [r0, #6]
   2c96e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2c970:	6803      	ldr	r3, [r0, #0]
   2c972:	6880      	ldr	r0, [r0, #8]
   2c974:	1a18      	subs	r0, r3, r0
}
   2c976:	1a10      	subs	r0, r2, r0
   2c978:	4770      	bx	lr

0002c97a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2c97a:	6903      	ldr	r3, [r0, #16]
   2c97c:	b2c9      	uxtb	r1, r1
   2c97e:	220c      	movs	r2, #12
   2c980:	fb01 3302 	mla	r3, r1, r2, r3
   2c984:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   2c986:	f000 0007 	and.w	r0, r0, #7
   2c98a:	4770      	bx	lr

0002c98c <set_on_state>:
	__asm__ volatile(
   2c98c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c990:	f3ef 8211 	mrs	r2, BASEPRI
   2c994:	f383 8812 	msr	BASEPRI_MAX, r3
   2c998:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2c99c:	6803      	ldr	r3, [r0, #0]
   2c99e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2c9a2:	f043 0302 	orr.w	r3, r3, #2
   2c9a6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2c9a8:	f382 8811 	msr	BASEPRI, r2
   2c9ac:	f3bf 8f6f 	isb	sy
}
   2c9b0:	4770      	bx	lr

0002c9b2 <stop>:
{
   2c9b2:	4603      	mov	r3, r0
   2c9b4:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   2c9b6:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   2c9b8:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2c9ba:	f04f 0440 	mov.w	r4, #64	; 0x40
   2c9be:	f3ef 8611 	mrs	r6, BASEPRI
   2c9c2:	f384 8812 	msr	BASEPRI_MAX, r4
   2c9c6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2c9ca:	250c      	movs	r5, #12
   2c9cc:	fb05 0401 	mla	r4, r5, r1, r0
   2c9d0:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2c9d2:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   2c9d6:	d001      	beq.n	2c9dc <stop+0x2a>
   2c9d8:	42a2      	cmp	r2, r4
   2c9da:	d111      	bne.n	2ca00 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2c9dc:	fb05 0001 	mla	r0, r5, r1, r0
   2c9e0:	2201      	movs	r2, #1
   2c9e2:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   2c9e4:	2000      	movs	r0, #0
	__asm__ volatile(
   2c9e6:	f386 8811 	msr	BASEPRI, r6
   2c9ea:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2c9ee:	b930      	cbnz	r0, 2c9fe <stop+0x4c>
	get_sub_config(dev, type)->stop();
   2c9f0:	685b      	ldr	r3, [r3, #4]
   2c9f2:	220c      	movs	r2, #12
   2c9f4:	fb02 3101 	mla	r1, r2, r1, r3
   2c9f8:	684b      	ldr	r3, [r1, #4]
   2c9fa:	4798      	blx	r3
	return 0;
   2c9fc:	2000      	movs	r0, #0
}
   2c9fe:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   2ca00:	f04f 30ff 	mov.w	r0, #4294967295
   2ca04:	e7ef      	b.n	2c9e6 <stop+0x34>

0002ca06 <api_stop>:
	return stop(dev, subsys, CTX_API);
   2ca06:	2280      	movs	r2, #128	; 0x80
   2ca08:	f7ff bfd3 	b.w	2c9b2 <stop>

0002ca0c <async_start>:
{
   2ca0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ca0e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2ca10:	6904      	ldr	r4, [r0, #16]
{
   2ca12:	4605      	mov	r5, r0
   2ca14:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2ca16:	f04f 0040 	mov.w	r0, #64	; 0x40
   2ca1a:	f3ef 8c11 	mrs	ip, BASEPRI
   2ca1e:	f380 8812 	msr	BASEPRI_MAX, r0
   2ca22:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2ca26:	260c      	movs	r6, #12
   2ca28:	fb06 4601 	mla	r6, r6, r1, r4
   2ca2c:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2ca2e:	f000 0e07 	and.w	lr, r0, #7
   2ca32:	f1be 0f01 	cmp.w	lr, #1
   2ca36:	d110      	bne.n	2ca5a <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2ca38:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   2ca3a:	2600      	movs	r6, #0
	__asm__ volatile(
   2ca3c:	f38c 8811 	msr	BASEPRI, ip
   2ca40:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2ca44:	b93e      	cbnz	r6, 2ca56 <async_start+0x4a>
	subdata->cb = cb;
   2ca46:	200c      	movs	r0, #12
   2ca48:	4341      	muls	r1, r0
   2ca4a:	440c      	add	r4, r1
	subdata->user_data = user_data;
   2ca4c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2ca50:	686b      	ldr	r3, [r5, #4]
   2ca52:	585b      	ldr	r3, [r3, r1]
   2ca54:	4798      	blx	r3
}
   2ca56:	4630      	mov	r0, r6
   2ca58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2ca5a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   2ca5e:	4287      	cmp	r7, r0
   2ca60:	bf14      	ite	ne
   2ca62:	f04f 36ff 	movne.w	r6, #4294967295
   2ca66:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   2ca6a:	e7e7      	b.n	2ca3c <async_start+0x30>

0002ca6c <api_start>:
{
   2ca6c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2ca6e:	2480      	movs	r4, #128	; 0x80
   2ca70:	9400      	str	r4, [sp, #0]
   2ca72:	f7ff ffcb 	bl	2ca0c <async_start>
}
   2ca76:	b002      	add	sp, #8
   2ca78:	bd10      	pop	{r4, pc}

0002ca7a <onoff_started_callback>:
	return &data->mgr[type];
   2ca7a:	6900      	ldr	r0, [r0, #16]
{
   2ca7c:	b410      	push	{r4}
	return &data->mgr[type];
   2ca7e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2ca80:	241c      	movs	r4, #28
   2ca82:	fb03 0004 	mla	r0, r3, r4, r0
   2ca86:	2100      	movs	r1, #0
}
   2ca88:	bc10      	pop	{r4}
	notify(mgr, 0);
   2ca8a:	4710      	bx	r2

0002ca8c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2ca8c:	2000      	movs	r0, #0
   2ca8e:	f7f5 b93d 	b.w	21d0c <nrfx_clock_start>

0002ca92 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2ca92:	2000      	movs	r0, #0
   2ca94:	f000 ba8d 	b.w	2cfb2 <nrfx_clock_stop>

0002ca98 <blocking_start_callback>:
{
   2ca98:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2ca9a:	f7f6 bd2b 	b.w	234f4 <z_impl_k_sem_give>

0002ca9e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2ca9e:	6843      	ldr	r3, [r0, #4]
   2caa0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2caa2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2caa6:	600b      	str	r3, [r1, #0]
}
   2caa8:	2000      	movs	r0, #0
   2caaa:	4770      	bx	lr

0002caac <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2caac:	6843      	ldr	r3, [r0, #4]
   2caae:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   2cab0:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   2cab4:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2cab8:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2cabc:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2cac0:	2000      	movs	r0, #0
   2cac2:	4770      	bx	lr

0002cac4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2cac4:	6843      	ldr	r3, [r0, #4]
   2cac6:	685b      	ldr	r3, [r3, #4]
}
   2cac8:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2caca:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2cace:	4770      	bx	lr

0002cad0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2cad0:	6843      	ldr	r3, [r0, #4]
   2cad2:	685b      	ldr	r3, [r3, #4]
}
   2cad4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2cad6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2cada:	4770      	bx	lr

0002cadc <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2cadc:	6843      	ldr	r3, [r0, #4]
   2cade:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2cae0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   2cae4:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2cae8:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2caea:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2caee:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   2caf2:	2000      	movs	r0, #0
   2caf4:	4770      	bx	lr

0002caf6 <gpio_nrfx_manage_callback>:
	return port->data;
   2caf6:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2caf8:	6858      	ldr	r0, [r3, #4]
{
   2cafa:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   2cafc:	b158      	cbz	r0, 2cb16 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2cafe:	2400      	movs	r4, #0
   2cb00:	4281      	cmp	r1, r0
   2cb02:	d112      	bne.n	2cb2a <gpio_nrfx_manage_callback+0x34>
	return node->next;
   2cb04:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   2cb06:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   2cb08:	b954      	cbnz	r4, 2cb20 <gpio_nrfx_manage_callback+0x2a>
   2cb0a:	428d      	cmp	r5, r1
	list->head = node;
   2cb0c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2cb0e:	d100      	bne.n	2cb12 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   2cb10:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2cb12:	2000      	movs	r0, #0
   2cb14:	6008      	str	r0, [r1, #0]
	if (set) {
   2cb16:	b96a      	cbnz	r2, 2cb34 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   2cb18:	2000      	movs	r0, #0
}
   2cb1a:	bd30      	pop	{r4, r5, pc}
   2cb1c:	4628      	mov	r0, r5
   2cb1e:	e7ef      	b.n	2cb00 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   2cb20:	428d      	cmp	r5, r1
	parent->next = child;
   2cb22:	6020      	str	r0, [r4, #0]
	list->tail = node;
   2cb24:	bf08      	it	eq
   2cb26:	609c      	streq	r4, [r3, #8]
}
   2cb28:	e7f3      	b.n	2cb12 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   2cb2a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2cb2c:	4604      	mov	r4, r0
   2cb2e:	2d00      	cmp	r5, #0
   2cb30:	d1f4      	bne.n	2cb1c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   2cb32:	b13a      	cbz	r2, 2cb44 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   2cb34:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   2cb36:	685a      	ldr	r2, [r3, #4]
   2cb38:	600a      	str	r2, [r1, #0]
	list->head = node;
   2cb3a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2cb3c:	2800      	cmp	r0, #0
   2cb3e:	d1eb      	bne.n	2cb18 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   2cb40:	6099      	str	r1, [r3, #8]
}
   2cb42:	e7ea      	b.n	2cb1a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   2cb44:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2cb48:	e7e7      	b.n	2cb1a <gpio_nrfx_manage_callback+0x24>

0002cb4a <irq_connect1>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEFINE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEFINE(1);
   2cb4a:	2200      	movs	r2, #0
   2cb4c:	2101      	movs	r1, #1
   2cb4e:	2004      	movs	r0, #4
   2cb50:	f7e9 bd2a 	b.w	165a8 <z_arm_irq_priority_set>

0002cb54 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   2cb54:	b530      	push	{r4, r5, lr}
   2cb56:	4604      	mov	r4, r0
	while (*count) {
   2cb58:	6808      	ldr	r0, [r1, #0]
   2cb5a:	b908      	cbnz	r0, 2cb60 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
   2cb5c:	6010      	str	r0, [r2, #0]
	return NULL;
   2cb5e:	e004      	b.n	2cb6a <spi_context_get_next_buf.constprop.0+0x16>
		if (((*current)->len / dfs) != 0) {
   2cb60:	6823      	ldr	r3, [r4, #0]
   2cb62:	685d      	ldr	r5, [r3, #4]
   2cb64:	b115      	cbz	r5, 2cb6c <spi_context_get_next_buf.constprop.0+0x18>
			return (*current)->buf;
   2cb66:	6818      	ldr	r0, [r3, #0]
			*buf_len = (*current)->len / dfs;
   2cb68:	6015      	str	r5, [r2, #0]
}
   2cb6a:	bd30      	pop	{r4, r5, pc}
		++(*current);
   2cb6c:	3308      	adds	r3, #8
		--(*count);
   2cb6e:	3801      	subs	r0, #1
		++(*current);
   2cb70:	6023      	str	r3, [r4, #0]
		--(*count);
   2cb72:	6008      	str	r0, [r1, #0]
   2cb74:	e7f0      	b.n	2cb58 <spi_context_get_next_buf.constprop.0+0x4>

0002cb76 <z_log_msg_static_create.constprop.0>:
   2cb76:	2300      	movs	r3, #0
   2cb78:	f7e8 bd88 	b.w	1568c <z_impl_z_log_msg_static_create>

0002cb7c <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   2cb7c:	4603      	mov	r3, r0
   2cb7e:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   2cb80:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2cb82:	7919      	ldrb	r1, [r3, #4]
   2cb84:	2301      	movs	r3, #1
   2cb86:	fa03 f101 	lsl.w	r1, r3, r1
   2cb8a:	6903      	ldr	r3, [r0, #16]
   2cb8c:	681b      	ldr	r3, [r3, #0]
   2cb8e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   2cb90:	bf18      	it	ne
   2cb92:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   2cb96:	b112      	cbz	r2, 2cb9e <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   2cb98:	6883      	ldr	r3, [r0, #8]
   2cb9a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2cb9c:	4718      	bx	r3
   2cb9e:	6883      	ldr	r3, [r0, #8]
   2cba0:	691b      	ldr	r3, [r3, #16]
   2cba2:	e7fb      	b.n	2cb9c <gpio_pin_set_dt.isra.0+0x20>

0002cba4 <_spi_context_cs_control>:
{
   2cba4:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2cba6:	6803      	ldr	r3, [r0, #0]
{
   2cba8:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2cbaa:	b1e3      	cbz	r3, 2cbe6 <_spi_context_cs_control+0x42>
   2cbac:	6898      	ldr	r0, [r3, #8]
   2cbae:	b1d0      	cbz	r0, 2cbe6 <_spi_context_cs_control+0x42>
   2cbb0:	6805      	ldr	r5, [r0, #0]
   2cbb2:	b1c5      	cbz	r5, 2cbe6 <_spi_context_cs_control+0x42>
		if (on) {
   2cbb4:	b149      	cbz	r1, 2cbca <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   2cbb6:	2101      	movs	r1, #1
   2cbb8:	f7ff ffe0 	bl	2cb7c <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   2cbbc:	6823      	ldr	r3, [r4, #0]
   2cbbe:	689b      	ldr	r3, [r3, #8]
   2cbc0:	6898      	ldr	r0, [r3, #8]
}
   2cbc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2cbc6:	f000 bf4d 	b.w	2da64 <z_impl_k_busy_wait>
			if (!force_off &&
   2cbca:	b912      	cbnz	r2, 2cbd2 <_spi_context_cs_control+0x2e>
   2cbcc:	889b      	ldrh	r3, [r3, #4]
   2cbce:	04db      	lsls	r3, r3, #19
   2cbd0:	d409      	bmi.n	2cbe6 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   2cbd2:	6880      	ldr	r0, [r0, #8]
   2cbd4:	f000 ff46 	bl	2da64 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2cbd8:	6823      	ldr	r3, [r4, #0]
   2cbda:	2100      	movs	r1, #0
   2cbdc:	6898      	ldr	r0, [r3, #8]
}
   2cbde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2cbe2:	f7ff bfcb 	b.w	2cb7c <gpio_pin_set_dt.isra.0>
}
   2cbe6:	bd38      	pop	{r3, r4, r5, pc}

0002cbe8 <spi_context_unlock_unconditionally>:
{
   2cbe8:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   2cbea:	2201      	movs	r2, #1
   2cbec:	2100      	movs	r1, #0
{
   2cbee:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2cbf0:	f7ff ffd8 	bl	2cba4 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   2cbf4:	69a3      	ldr	r3, [r4, #24]
   2cbf6:	b933      	cbnz	r3, 2cc06 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   2cbf8:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   2cbfa:	f104 0010 	add.w	r0, r4, #16
}
   2cbfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2cc02:	f7f6 bc77 	b.w	234f4 <z_impl_k_sem_give>
   2cc06:	bd10      	pop	{r4, pc}

0002cc08 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = dev->data;
   2cc08:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2cc0a:	6803      	ldr	r3, [r0, #0]
   2cc0c:	428b      	cmp	r3, r1
{
   2cc0e:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2cc10:	d106      	bne.n	2cc20 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   2cc12:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   2cc16:	b934      	cbnz	r4, 2cc26 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2cc18:	f7ff ffe6 	bl	2cbe8 <spi_context_unlock_unconditionally>
	return 0;
   2cc1c:	4620      	mov	r0, r4
}
   2cc1e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2cc20:	f06f 0015 	mvn.w	r0, #21
   2cc24:	e7fb      	b.n	2cc1e <spi_nrfx_release+0x16>
		return -EBUSY;
   2cc26:	f06f 000f 	mvn.w	r0, #15
   2cc2a:	e7f8      	b.n	2cc1e <spi_nrfx_release+0x16>

0002cc2c <is_regular_addr_valid>:
{
   2cc2c:	b538      	push	{r3, r4, r5, lr}
   2cc2e:	4605      	mov	r5, r0
   2cc30:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   2cc32:	f000 fa46 	bl	2d0c2 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2cc36:	2d00      	cmp	r5, #0
   2cc38:	db07      	blt.n	2cc4a <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2cc3a:	42a8      	cmp	r0, r5
   2cc3c:	d905      	bls.n	2cc4a <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   2cc3e:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   2cc40:	4284      	cmp	r4, r0
   2cc42:	bf8c      	ite	hi
   2cc44:	2000      	movhi	r0, #0
   2cc46:	2001      	movls	r0, #1
}
   2cc48:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2cc4a:	2000      	movs	r0, #0
   2cc4c:	e7fc      	b.n	2cc48 <is_regular_addr_valid+0x1c>

0002cc4e <flash_nrf_read>:
{
   2cc4e:	b570      	push	{r4, r5, r6, lr}
   2cc50:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   2cc52:	4628      	mov	r0, r5
   2cc54:	4619      	mov	r1, r3
{
   2cc56:	4616      	mov	r6, r2
   2cc58:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   2cc5a:	f7ff ffe7 	bl	2cc2c <is_regular_addr_valid>
   2cc5e:	b928      	cbnz	r0, 2cc6c <flash_nrf_read+0x1e>
   2cc60:	4621      	mov	r1, r4
   2cc62:	4628      	mov	r0, r5
}
   2cc64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2cc68:	f7f3 ba56 	b.w	20118 <flash_nrf_read.part.0>
	if (!len) {
   2cc6c:	b124      	cbz	r4, 2cc78 <flash_nrf_read+0x2a>
   2cc6e:	4622      	mov	r2, r4
   2cc70:	4629      	mov	r1, r5
   2cc72:	4630      	mov	r0, r6
   2cc74:	f001 f8b0 	bl	2ddd8 <memcpy>
}
   2cc78:	2000      	movs	r0, #0
   2cc7a:	bd70      	pop	{r4, r5, r6, pc}

0002cc7c <uart_nrfx_config_get>:
	*cfg = data->uart_config;
   2cc7c:	6902      	ldr	r2, [r0, #16]
{
   2cc7e:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   2cc80:	e892 0003 	ldmia.w	r2, {r0, r1}
   2cc84:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2cc88:	2000      	movs	r0, #0
   2cc8a:	4770      	bx	lr

0002cc8c <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2cc8c:	2000      	movs	r0, #0
   2cc8e:	4770      	bx	lr

0002cc90 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2cc90:	b538      	push	{r3, r4, r5, lr}
   2cc92:	460c      	mov	r4, r1
   2cc94:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2cc96:	f7eb ffa3 	bl	18be0 <bt_is_ready>
   2cc9a:	b128      	cbz	r0, 2cca8 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2cc9c:	4629      	mov	r1, r5
   2cc9e:	4620      	mov	r0, r4
}
   2cca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   2cca4:	f7eb ba5e 	b.w	18164 <bt_hci_le_rand>
}
   2cca8:	f06f 000a 	mvn.w	r0, #10
   2ccac:	bd38      	pop	{r3, r4, r5, pc}

0002ccae <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   2ccae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ccb0:	460f      	mov	r7, r1
   2ccb2:	4616      	mov	r6, r2

	return err;
#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   2ccb4:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   2ccb8:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   2ccba:	42a6      	cmp	r6, r4
   2ccbc:	d803      	bhi.n	2ccc6 <entropy_cc3xx_rng_get_entropy+0x18>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   2ccbe:	d116      	bne.n	2ccee <entropy_cc3xx_rng_get_entropy+0x40>
		err = 0;
   2ccc0:	2000      	movs	r0, #0
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   2ccc2:	b003      	add	sp, #12
   2ccc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   2ccc6:	1b33      	subs	r3, r6, r4
   2ccc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2cccc:	bf38      	it	cc
   2ccce:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   2ccd0:	462a      	mov	r2, r5
   2ccd2:	ab01      	add	r3, sp, #4
   2ccd4:	1939      	adds	r1, r7, r4
   2ccd6:	2000      	movs	r0, #0
   2ccd8:	f7f8 ffe0 	bl	25c9c <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   2ccdc:	b920      	cbnz	r0, 2cce8 <entropy_cc3xx_rng_get_entropy+0x3a>
		if (olen != chunk_size) {
   2ccde:	9b01      	ldr	r3, [sp, #4]
   2cce0:	42ab      	cmp	r3, r5
   2cce2:	d101      	bne.n	2cce8 <entropy_cc3xx_rng_get_entropy+0x3a>
		offset += chunk_size;
   2cce4:	442c      	add	r4, r5
   2cce6:	e7e8      	b.n	2ccba <entropy_cc3xx_rng_get_entropy+0xc>
			return -EINVAL;
   2cce8:	f06f 0015 	mvn.w	r0, #21
   2ccec:	e7e9      	b.n	2ccc2 <entropy_cc3xx_rng_get_entropy+0x14>
	int err = EINVAL;
   2ccee:	2016      	movs	r0, #22
   2ccf0:	e7e7      	b.n	2ccc2 <entropy_cc3xx_rng_get_entropy+0x14>

0002ccf2 <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2ccf2:	2200      	movs	r2, #0
{
   2ccf4:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2ccf6:	4611      	mov	r1, r2
   2ccf8:	4610      	mov	r0, r2
   2ccfa:	f7f8 ff9d 	bl	25c38 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   2ccfe:	2800      	cmp	r0, #0
	}
#endif

	return 0;
}
   2cd00:	bf18      	it	ne
   2cd02:	f06f 0015 	mvnne.w	r0, #21
   2cd06:	bd08      	pop	{r3, pc}

0002cd08 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2cd08:	4770      	bx	lr

0002cd0a <sys_clock_cycle_get_32>:
{
   2cd0a:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2cd0c:	f7f3 fee0 	bl	20ad0 <z_nrf_rtc_timer_read>
}
   2cd10:	bd08      	pop	{r3, pc}

0002cd12 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2cd12:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2cd14:	6843      	ldr	r3, [r0, #4]
   2cd16:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   2cd18:	7a03      	ldrb	r3, [r0, #8]
   2cd1a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   2cd1e:	3b01      	subs	r3, #1
   2cd20:	00db      	lsls	r3, r3, #3
   2cd22:	6845      	ldr	r5, [r0, #4]
   2cd24:	6814      	ldr	r4, [r2, #0]
   2cd26:	441d      	add	r5, r3
   2cd28:	42ac      	cmp	r4, r5
   2cd2a:	d902      	bls.n	2cd32 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   2cd2c:	f06f 0001 	mvn.w	r0, #1
}
   2cd30:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2cd32:	7965      	ldrb	r5, [r4, #5]
   2cd34:	428d      	cmp	r5, r1
   2cd36:	d002      	beq.n	2cd3e <pinctrl_lookup_state+0x2c>
		(*state)++;
   2cd38:	3408      	adds	r4, #8
   2cd3a:	6014      	str	r4, [r2, #0]
   2cd3c:	e7f1      	b.n	2cd22 <pinctrl_lookup_state+0x10>
			return 0;
   2cd3e:	2000      	movs	r0, #0
   2cd40:	e7f6      	b.n	2cd30 <pinctrl_lookup_state+0x1e>

0002cd42 <nrf_gpio_pin_write>:
    if (value == 0)
   2cd42:	b909      	cbnz	r1, 2cd48 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   2cd44:	f7f4 b86a 	b.w	20e1c <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   2cd48:	f7f4 b89a 	b.w	20e80 <nrf_gpio_pin_set>

0002cd4c <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2cd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cd50:	4616      	mov	r6, r2
   2cd52:	4605      	mov	r5, r0
   2cd54:	eb00 0781 	add.w	r7, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2cd58:	42af      	cmp	r7, r5
   2cd5a:	d102      	bne.n	2cd62 <pinctrl_configure_pins+0x16>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   2cd5c:	2000      	movs	r0, #0
}
   2cd5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2cd62:	682c      	ldr	r4, [r5, #0]
		switch (NRF_GET_FUN(pins[i])) {
   2cd64:	0c23      	lsrs	r3, r4, #16
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2cd66:	f3c4 2803 	ubfx	r8, r4, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
   2cd6a:	2b19      	cmp	r3, #25
   2cd6c:	d862      	bhi.n	2ce34 <pinctrl_configure_pins+0xe8>
   2cd6e:	e8df f003 	tbb	[pc, r3]
   2cd72:	190d      	.short	0x190d
   2cd74:	37264121 	.word	0x37264121
   2cd78:	61616141 	.word	0x61616141
   2cd7c:	61616161 	.word	0x61616161
   2cd80:	61616161 	.word	0x61616161
   2cd84:	61616161 	.word	0x61616161
   2cd88:	5c575246 	.word	0x5c575246
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   2cd8c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2cd90:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   2cd94:	6828      	ldr	r0, [r5, #0]
   2cd96:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2cd9a:	f7f4 f871 	bl	20e80 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2cd9e:	4643      	mov	r3, r8
   2cda0:	2201      	movs	r2, #1
   2cda2:	e005      	b.n	2cdb0 <pinctrl_configure_pins+0x64>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   2cda4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2cda8:	f8c6 4514 	str.w	r4, [r6, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2cdac:	4643      	mov	r3, r8
   2cdae:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2cdb0:	4611      	mov	r1, r2
   2cdb2:	e010      	b.n	2cdd6 <pinctrl_configure_pins+0x8a>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   2cdb4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2cdb8:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
   2cdbc:	e7ea      	b.n	2cd94 <pinctrl_configure_pins+0x48>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   2cdbe:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2cdc2:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   2cdc6:	6828      	ldr	r0, [r5, #0]
        nrf_gpio_pin_clear(pin_number);
   2cdc8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2cdcc:	f7f4 f826 	bl	20e1c <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2cdd0:	4643      	mov	r3, r8
   2cdd2:	2200      	movs	r2, #0
   2cdd4:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2cdd6:	6828      	ldr	r0, [r5, #0]
   2cdd8:	f7f4 f830 	bl	20e3c <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2cddc:	3504      	adds	r5, #4
   2cdde:	e7bb      	b.n	2cd58 <pinctrl_configure_pins+0xc>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   2cde0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2cde4:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   2cde8:	6828      	ldr	r0, [r5, #0]
   2cdea:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2cdee:	f7f4 f815 	bl	20e1c <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2cdf2:	e7d4      	b.n	2cd9e <pinctrl_configure_pins+0x52>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   2cdf4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2cdf8:	f8c6 4510 	str.w	r4, [r6, #1296]	; 0x510
   2cdfc:	e7d6      	b.n	2cdac <pinctrl_configure_pins+0x60>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   2cdfe:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2ce02:	f8c6 4560 	str.w	r4, [r6, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   2ce06:	6828      	ldr	r0, [r5, #0]
   2ce08:	f3c0 3140 	ubfx	r1, r0, #13, #1
   2ce0c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2ce10:	f7ff ff97 	bl	2cd42 <nrf_gpio_pin_write>
   2ce14:	e7c3      	b.n	2cd9e <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   2ce16:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2ce1a:	f8c6 4564 	str.w	r4, [r6, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   2ce1e:	e7f2      	b.n	2ce06 <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   2ce20:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2ce24:	f8c6 4568 	str.w	r4, [r6, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   2ce28:	e7ed      	b.n	2ce06 <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   2ce2a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2ce2e:	f8c6 456c 	str.w	r4, [r6, #1388]	; 0x56c
   2ce32:	e7e8      	b.n	2ce06 <pinctrl_configure_pins+0xba>
		switch (NRF_GET_FUN(pins[i])) {
   2ce34:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ce38:	e791      	b.n	2cd5e <pinctrl_configure_pins+0x12>

0002ce3a <rand_prio_high_vector_get>:
   2ce3a:	f7f4 b887 	b.w	20f4c <rand_prio_low_vector_get>

0002ce3e <hci_driver_send>:
{
   2ce3e:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2ce40:	8983      	ldrh	r3, [r0, #12]
{
   2ce42:	4605      	mov	r5, r0
	if (!buf->len) {
   2ce44:	b373      	cbz	r3, 2cea4 <hci_driver_send+0x66>
   2ce46:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   2ce48:	b1a3      	cbz	r3, 2ce74 <hci_driver_send+0x36>
   2ce4a:	2b02      	cmp	r3, #2
   2ce4c:	d12a      	bne.n	2cea4 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2ce4e:	f04f 30ff 	mov.w	r0, #4294967295
   2ce52:	f04f 31ff 	mov.w	r1, #4294967295
   2ce56:	f7f4 f823 	bl	20ea0 <multithreading_lock_acquire>
	if (!errcode) {
   2ce5a:	4604      	mov	r4, r0
   2ce5c:	b940      	cbnz	r0, 2ce70 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   2ce5e:	68a8      	ldr	r0, [r5, #8]
   2ce60:	f7e1 fa08 	bl	e274 <sdc_hci_data_put>
   2ce64:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2ce66:	f7f4 f823 	bl	20eb0 <multithreading_lock_release>
		if (errcode) {
   2ce6a:	b1b4      	cbz	r4, 2ce9a <hci_driver_send+0x5c>
			receive_signal_raise();
   2ce6c:	f7f4 f882 	bl	20f74 <receive_signal_raise>
}
   2ce70:	4620      	mov	r0, r4
   2ce72:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2ce74:	f04f 30ff 	mov.w	r0, #4294967295
   2ce78:	f04f 31ff 	mov.w	r1, #4294967295
   2ce7c:	f7f4 f810 	bl	20ea0 <multithreading_lock_acquire>
	if (!errcode) {
   2ce80:	4604      	mov	r4, r0
   2ce82:	2800      	cmp	r0, #0
   2ce84:	d1f4      	bne.n	2ce70 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   2ce86:	68a8      	ldr	r0, [r5, #8]
   2ce88:	f7f4 fa36 	bl	212f8 <hci_internal_cmd_put>
   2ce8c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2ce8e:	f7f4 f80f 	bl	20eb0 <multithreading_lock_release>
	if (errcode) {
   2ce92:	2c00      	cmp	r4, #0
   2ce94:	d1ec      	bne.n	2ce70 <hci_driver_send+0x32>
	receive_signal_raise();
   2ce96:	f7f4 f86d 	bl	20f74 <receive_signal_raise>
		net_buf_unref(buf);
   2ce9a:	4628      	mov	r0, r5
   2ce9c:	f7f2 fb6a 	bl	1f574 <net_buf_unref>
   2cea0:	2400      	movs	r4, #0
   2cea2:	e7e5      	b.n	2ce70 <hci_driver_send+0x32>
	switch (type) {
   2cea4:	f06f 0415 	mvn.w	r4, #21
   2cea8:	e7e2      	b.n	2ce70 <hci_driver_send+0x32>

0002ceaa <receive_work_handler>:
	hci_driver_receive_process();
   2ceaa:	f7f4 b9d1 	b.w	21250 <hci_driver_receive_process>

0002ceae <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   2ceae:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ceb0:	b08d      	sub	sp, #52	; 0x34
   2ceb2:	4615      	mov	r5, r2
   2ceb4:	466a      	mov	r2, sp
   2ceb6:	f100 0310 	add.w	r3, r0, #16
   2ceba:	4616      	mov	r6, r2
		*pdst++ = *psrc--;
   2cebc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2cec0:	f802 4b01 	strb.w	r4, [r2], #1
	for (; length > 0; length--) {
   2cec4:	4298      	cmp	r0, r3
   2cec6:	d1f9      	bne.n	2cebc <bt_encrypt_le+0xe>
   2cec8:	aa04      	add	r2, sp, #16
   2ceca:	f101 0310 	add.w	r3, r1, #16
   2cece:	4617      	mov	r7, r2
		*pdst++ = *psrc--;
   2ced0:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2ced4:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   2ced8:	428b      	cmp	r3, r1
   2ceda:	d1f9      	bne.n	2ced0 <bt_encrypt_le+0x22>
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2cedc:	f04f 30ff 	mov.w	r0, #4294967295
   2cee0:	f04f 31ff 	mov.w	r1, #4294967295
   2cee4:	f7f3 ffdc 	bl	20ea0 <multithreading_lock_acquire>

	if (!errcode) {
   2cee8:	4604      	mov	r4, r0
   2ceea:	b990      	cbnz	r0, 2cf12 <bt_encrypt_le+0x64>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   2ceec:	aa08      	add	r2, sp, #32
   2ceee:	4639      	mov	r1, r7
   2cef0:	4630      	mov	r0, r6
   2cef2:	f7e0 ff33 	bl	dd5c <sdc_soc_ecb_block_encrypt>
   2cef6:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2cef8:	f7f3 ffda 	bl	20eb0 <multithreading_lock_release>
	}

	if (!errcode) {
   2cefc:	b94c      	cbnz	r4, 2cf12 <bt_encrypt_le+0x64>
   2cefe:	1e6b      	subs	r3, r5, #1
	psrc += length - 1;
   2cf00:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   2cf04:	350f      	adds	r5, #15
		*pdst++ = *psrc--;
   2cf06:	f812 1901 	ldrb.w	r1, [r2], #-1
   2cf0a:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   2cf0e:	429d      	cmp	r5, r3
   2cf10:	d1f9      	bne.n	2cf06 <bt_encrypt_le+0x58>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   2cf12:	4620      	mov	r0, r4
   2cf14:	b00d      	add	sp, #52	; 0x34
   2cf16:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002cf18 <sys_memcpy_swap.constprop.0>:
   2cf18:	f101 0320 	add.w	r3, r1, #32
   2cf1c:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   2cf1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2cf22:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   2cf26:	428b      	cmp	r3, r1
   2cf28:	d1f9      	bne.n	2cf1e <sys_memcpy_swap.constprop.0+0x6>
}
   2cf2a:	4770      	bx	lr

0002cf2c <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   2cf2c:	2100      	movs	r1, #0
   2cf2e:	f7f4 be35 	b.w	21b9c <cmd_le_generate_dhkey>

0002cf32 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2cf32:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2cf36:	2901      	cmp	r1, #1
   2cf38:	d801      	bhi.n	2cf3e <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   2cf3a:	f7f4 be2f 	b.w	21b9c <cmd_le_generate_dhkey>
}
   2cf3e:	2012      	movs	r0, #18
   2cf40:	4770      	bx	lr

0002cf42 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2cf42:	4668      	mov	r0, sp
   2cf44:	f020 0107 	bic.w	r1, r0, #7
   2cf48:	468d      	mov	sp, r1
   2cf4a:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2cf4c:	f7d7 f8a0 	bl	4090 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2cf50:	f7e9 fb44 	bl	165dc <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2cf54:	f7e9 fc0c 	bl	16770 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2cf58:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2cf5c:	4685      	mov	sp, r0
   2cf5e:	4770      	bx	lr

0002cf60 <mpsl_low_prio_work_handler>:
{
   2cf60:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2cf62:	f04f 31ff 	mov.w	r1, #4294967295
   2cf66:	f04f 30ff 	mov.w	r0, #4294967295
   2cf6a:	f7f3 ff99 	bl	20ea0 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   2cf6e:	f7e0 fd1a 	bl	d9a6 <mpsl_low_priority_process>
}
   2cf72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   2cf76:	f7f3 bf9b 	b.w	20eb0 <multithreading_lock_release>

0002cf7a <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2cf7a:	4668      	mov	r0, sp
   2cf7c:	f020 0107 	bic.w	r1, r0, #7
   2cf80:	468d      	mov	sp, r1
   2cf82:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2cf84:	f7d6 fffa 	bl	3f7c <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2cf88:	f7e9 fb28 	bl	165dc <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2cf8c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2cf90:	4685      	mov	sp, r0
   2cf92:	4770      	bx	lr

0002cf94 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2cf94:	4668      	mov	r0, sp
   2cf96:	f020 0107 	bic.w	r1, r0, #7
   2cf9a:	468d      	mov	sp, r1
   2cf9c:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2cf9e:	f7d4 fd5d 	bl	1a5c <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2cfa2:	f7e9 fb1b 	bl	165dc <_arch_isr_direct_pm>
   2cfa6:	f7e9 fbe3 	bl	16770 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2cfaa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2cfae:	4685      	mov	sp, r0
   2cfb0:	4770      	bx	lr

0002cfb2 <nrfx_clock_stop>:
	switch (domain) {
   2cfb2:	2801      	cmp	r0, #1
   2cfb4:	d101      	bne.n	2cfba <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   2cfb6:	f7d7 bec7 	b.w	4d48 <mpsl_clock_hfclk_release>
}
   2cfba:	4770      	bx	lr

0002cfbc <nrfx_clock_enable>:
}
   2cfbc:	4770      	bx	lr

0002cfbe <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   2cfbe:	f7d7 bcd7 	b.w	4970 <MPSL_IRQ_CLOCK_Handler>

0002cfc2 <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   2cfc2:	f7d8 b891 	b.w	50e8 <mpsl_is_initialized>

0002cfc6 <nrf_flash_sync_get_timestamp_begin>:
}
   2cfc6:	4770      	bx	lr

0002cfc8 <temp_nrf5_mpsl_init>:
	(void)dev;

	LOG_DBG("");

	return 0;
}
   2cfc8:	2000      	movs	r0, #0
   2cfca:	4770      	bx	lr

0002cfcc <temp_nrf5_mpsl_sample_fetch>:
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   2cfcc:	2939      	cmp	r1, #57	; 0x39
{
   2cfce:	b510      	push	{r4, lr}
	struct temp_nrf5_mpsl_data *data = dev->data;
   2cfd0:	6904      	ldr	r4, [r0, #16]
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   2cfd2:	d001      	beq.n	2cfd8 <temp_nrf5_mpsl_sample_fetch+0xc>
   2cfd4:	290c      	cmp	r1, #12
   2cfd6:	d104      	bne.n	2cfe2 <temp_nrf5_mpsl_sample_fetch+0x16>
	data->sample = mpsl_temperature_get();
   2cfd8:	f7d8 f89e 	bl	5118 <mpsl_temperature_get>
   2cfdc:	6020      	str	r0, [r4, #0]
	return 0;
   2cfde:	2000      	movs	r0, #0
}
   2cfe0:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2cfe2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2cfe6:	e7fb      	b.n	2cfe0 <temp_nrf5_mpsl_sample_fetch+0x14>

0002cfe8 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   2cfe8:	f7f8 bdd0 	b.w	25b8c <nrf_cc3xx_platform_init>

0002cfec <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   2cfec:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   2cfee:	f7e9 f95b 	bl	162a8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   2cff2:	f7e9 fa0d 	bl	16410 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   2cff6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   2cffa:	f7f8 bdc7 	b.w	25b8c <nrf_cc3xx_platform_init>

0002cffe <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2cffe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2d002:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   2d006:	f1a0 0308 	sub.w	r3, r0, #8
   2d00a:	4258      	negs	r0, r3
   2d00c:	4158      	adcs	r0, r3
   2d00e:	4770      	bx	lr

0002d010 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2d010:	4700      	bx	r0

0002d012 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2d012:	f000 bd27 	b.w	2da64 <z_impl_k_busy_wait>

0002d016 <nrf_gpio_reconfigure>:
{
   2d016:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d018:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d01a:	a801      	add	r0, sp, #4
{
   2d01c:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   2d020:	4617      	mov	r7, r2
   2d022:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d024:	f7f5 f8ec 	bl	22200 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2d028:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2d02a:	2f00      	cmp	r7, #0
   2d02c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2d030:	bf14      	ite	ne
   2d032:	2302      	movne	r3, #2
   2d034:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2d036:	2900      	cmp	r1, #0
   2d038:	bf18      	it	ne
   2d03a:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2d03e:	2d00      	cmp	r5, #0
   2d040:	bf14      	ite	ne
   2d042:	f04f 0c0c 	movne.w	ip, #12
   2d046:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2d04a:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2d04c:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2d050:	bf14      	ite	ne
   2d052:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   2d056:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2d05a:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2d05c:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2d060:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2d064:	bf14      	ite	ne
   2d066:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   2d06a:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2d06e:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   2d072:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2d076:	b101      	cbz	r1, 2d07a <nrf_gpio_reconfigure+0x64>
   2d078:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2d07a:	b10f      	cbz	r7, 2d080 <nrf_gpio_reconfigure+0x6a>
   2d07c:	783f      	ldrb	r7, [r7, #0]
   2d07e:	007f      	lsls	r7, r7, #1
   2d080:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2d082:	b10d      	cbz	r5, 2d088 <nrf_gpio_reconfigure+0x72>
   2d084:	782d      	ldrb	r5, [r5, #0]
   2d086:	00ad      	lsls	r5, r5, #2
   2d088:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2d08a:	b10c      	cbz	r4, 2d090 <nrf_gpio_reconfigure+0x7a>
   2d08c:	7822      	ldrb	r2, [r4, #0]
   2d08e:	0214      	lsls	r4, r2, #8
   2d090:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2d092:	b10e      	cbz	r6, 2d098 <nrf_gpio_reconfigure+0x82>
   2d094:	7836      	ldrb	r6, [r6, #0]
   2d096:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2d098:	432c      	orrs	r4, r5
   2d09a:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   2d09c:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   2d0a0:	b003      	add	sp, #12
   2d0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002d0a4 <nrf_gpio_cfg_sense_set>:
{
   2d0a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2d0a6:	f10d 030f 	add.w	r3, sp, #15
   2d0aa:	9301      	str	r3, [sp, #4]
   2d0ac:	2300      	movs	r3, #0
{
   2d0ae:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2d0b2:	9300      	str	r3, [sp, #0]
   2d0b4:	461a      	mov	r2, r3
   2d0b6:	4619      	mov	r1, r3
   2d0b8:	f7ff ffad 	bl	2d016 <nrf_gpio_reconfigure>
}
   2d0bc:	b005      	add	sp, #20
   2d0be:	f85d fb04 	ldr.w	pc, [sp], #4

0002d0c2 <nrfx_nvmc_flash_size_get>:
   2d0c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2d0c6:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   2d0c8:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2d0ca:	4350      	muls	r0, r2
   2d0cc:	4770      	bx	lr

0002d0ce <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   2d0ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2d0d2:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2d0d4:	4770      	bx	lr

0002d0d6 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   2d0d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2d0da:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2d0dc:	4770      	bx	lr

0002d0de <nrf_gpio_cfg_default>:
{
   2d0de:	b507      	push	{r0, r1, r2, lr}
   2d0e0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d0e2:	a801      	add	r0, sp, #4
   2d0e4:	f7f5 fc26 	bl	22934 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2d0e8:	9b01      	ldr	r3, [sp, #4]
   2d0ea:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2d0ee:	2202      	movs	r2, #2
   2d0f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   2d0f4:	b003      	add	sp, #12
   2d0f6:	f85d fb04 	ldr.w	pc, [sp], #4

0002d0fa <nrf_gpio_pin_set>:
{
   2d0fa:	b507      	push	{r0, r1, r2, lr}
   2d0fc:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d0fe:	a801      	add	r0, sp, #4
   2d100:	f7f5 fc18 	bl	22934 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2d104:	9a01      	ldr	r2, [sp, #4]
   2d106:	2301      	movs	r3, #1
   2d108:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2d10a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   2d10e:	b003      	add	sp, #12
   2d110:	f85d fb04 	ldr.w	pc, [sp], #4

0002d114 <nrf_gpio_pin_clear>:
{
   2d114:	b507      	push	{r0, r1, r2, lr}
   2d116:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d118:	a801      	add	r0, sp, #4
   2d11a:	f7f5 fc0b 	bl	22934 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2d11e:	9a01      	ldr	r2, [sp, #4]
   2d120:	2301      	movs	r3, #1
   2d122:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2d124:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   2d128:	b003      	add	sp, #12
   2d12a:	f85d fb04 	ldr.w	pc, [sp], #4

0002d12e <transfer_byte>:
{
   2d12e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   2d130:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   2d134:	698a      	ldr	r2, [r1, #24]
   2d136:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   2d138:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   2d13c:	6a0b      	ldr	r3, [r1, #32]
   2d13e:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   2d140:	bf3e      	ittt	cc
   2d142:	694a      	ldrcc	r2, [r1, #20]
   2d144:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   2d148:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   2d14a:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   2d14c:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   2d150:	1c53      	adds	r3, r2, #1
   2d152:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   2d154:	3202      	adds	r2, #2
    if (p_cb->abort)
   2d156:	b13c      	cbz	r4, 2d168 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   2d158:	690c      	ldr	r4, [r1, #16]
   2d15a:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2d15c:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   2d15e:	bf38      	it	cc
   2d160:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2d162:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   2d164:	bf88      	it	hi
   2d166:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   2d168:	690d      	ldr	r5, [r1, #16]
   2d16a:	4295      	cmp	r5, r2
   2d16c:	d905      	bls.n	2d17a <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   2d16e:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   2d170:	5c9b      	ldrb	r3, [r3, r2]
   2d172:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2d176:	2001      	movs	r0, #1
   2d178:	e00a      	b.n	2d190 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2d17a:	698c      	ldr	r4, [r1, #24]
   2d17c:	4294      	cmp	r4, r2
   2d17e:	d901      	bls.n	2d184 <transfer_byte+0x56>
   2d180:	7fcb      	ldrb	r3, [r1, #31]
   2d182:	e7f6      	b.n	2d172 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2d184:	42ab      	cmp	r3, r5
   2d186:	d3f6      	bcc.n	2d176 <transfer_byte+0x48>
   2d188:	42a3      	cmp	r3, r4
   2d18a:	bf2c      	ite	cs
   2d18c:	2000      	movcs	r0, #0
   2d18e:	2001      	movcc	r0, #1
}
   2d190:	b003      	add	sp, #12
   2d192:	bd30      	pop	{r4, r5, pc}

0002d194 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   2d194:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   2d196:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   2d198:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   2d19a:	bf9c      	itt	ls
   2d19c:	6880      	ldrls	r0, [r0, #8]
   2d19e:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   2d1a0:	3b01      	subs	r3, #1
   2d1a2:	1a98      	subs	r0, r3, r2
}
   2d1a4:	4770      	bx	lr

0002d1a6 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2d1a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d1aa:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   2d1ac:	e9d0 8002 	ldrd	r8, r0, [r0, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2d1b0:	f8d4 c004 	ldr.w	ip, [r4, #4]
  Rem = pRing->SizeOfBuffer - WrOff;
   2d1b4:	eba8 0600 	sub.w	r6, r8, r0
  if (Rem > NumBytes) {
   2d1b8:	4296      	cmp	r6, r2
    pRing->WrOff = WrOff + NumBytes;
   2d1ba:	eb00 0502 	add.w	r5, r0, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2d1be:	460f      	mov	r7, r1
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2d1c0:	4460      	add	r0, ip
  if (Rem > NumBytes) {
   2d1c2:	d904      	bls.n	2d1ce <_WriteNoCheck+0x28>
   2d1c4:	f000 fe08 	bl	2ddd8 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   2d1c8:	60e5      	str	r5, [r4, #12]
}
   2d1ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d1ce:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
   2d1d0:	eba5 0508 	sub.w	r5, r5, r8
   2d1d4:	f000 fe00 	bl	2ddd8 <memcpy>
   2d1d8:	6860      	ldr	r0, [r4, #4]
   2d1da:	462a      	mov	r2, r5
   2d1dc:	19b9      	adds	r1, r7, r6
   2d1de:	e7f1      	b.n	2d1c4 <_WriteNoCheck+0x1e>

0002d1e0 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   2d1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   2d1e4:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   2d1e6:	4606      	mov	r6, r0
   2d1e8:	4689      	mov	r9, r1
   2d1ea:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   2d1ec:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   2d1f0:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   2d1f2:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2d1f4:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   2d1f6:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   2d1f8:	bf28      	it	cs
   2d1fa:	18e4      	addcs	r4, r4, r3
   2d1fc:	3c01      	subs	r4, #1
   2d1fe:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   2d200:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   2d202:	42bc      	cmp	r4, r7
   2d204:	bf28      	it	cs
   2d206:	463c      	movcs	r4, r7
   2d208:	4294      	cmp	r4, r2
   2d20a:	bf28      	it	cs
   2d20c:	4614      	movcs	r4, r2
   2d20e:	4649      	mov	r1, r9
   2d210:	4428      	add	r0, r5
   2d212:	4622      	mov	r2, r4
   2d214:	f000 fde0 	bl	2ddd8 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   2d218:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   2d21a:	4425      	add	r5, r4
      WrOff = 0u;
   2d21c:	42ab      	cmp	r3, r5
   2d21e:	bf08      	it	eq
   2d220:	2500      	moveq	r5, #0
  } while (NumBytes);
   2d222:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   2d224:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   2d226:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   2d228:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   2d22a:	d1e1      	bne.n	2d1f0 <_WriteBlocking+0x10>
}
   2d22c:	4640      	mov	r0, r8
   2d22e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002d232 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2d232:	f7f5 bd0f 	b.w	22c54 <_DoInit>

0002d236 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2d236:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2d238:	f7ff fffb 	bl	2d232 <SEGGER_RTT_Init>

	return 0;
}
   2d23c:	2000      	movs	r0, #0
   2d23e:	bd08      	pop	{r3, pc}

0002d240 <z_device_state_init>:
}
   2d240:	4770      	bx	lr

0002d242 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2d242:	b138      	cbz	r0, 2d254 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2d244:	68c3      	ldr	r3, [r0, #12]
   2d246:	8818      	ldrh	r0, [r3, #0]
   2d248:	f3c0 0008 	ubfx	r0, r0, #0, #9
   2d24c:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2d250:	4258      	negs	r0, r3
   2d252:	4158      	adcs	r0, r3
}
   2d254:	4770      	bx	lr

0002d256 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   2d256:	f000 bde0 	b.w	2de1a <memset>

0002d25a <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d25a:	f000 bdbd 	b.w	2ddd8 <memcpy>

0002d25e <k_heap_init>:
{
   2d25e:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2d260:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2d264:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2d268:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2d26a:	f7fc bba1 	b.w	299b0 <sys_heap_init>

0002d26e <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2d26e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d272:	b085      	sub	sp, #20
   2d274:	4606      	mov	r6, r0
   2d276:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2d278:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   2d27c:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2d27e:	f000 fbf5 	bl	2da6c <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2d282:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2d286:	4605      	mov	r5, r0
   2d288:	460f      	mov	r7, r1
	__asm__ volatile(
   2d28a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d28e:	f3ef 8411 	mrs	r4, BASEPRI
   2d292:	f383 8812 	msr	BASEPRI_MAX, r3
   2d296:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2d29a:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2d29e:	464a      	mov	r2, r9
   2d2a0:	4641      	mov	r1, r8
   2d2a2:	4630      	mov	r0, r6
   2d2a4:	f7fc fb1c 	bl	298e0 <sys_heap_aligned_alloc>
   2d2a8:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   2d2aa:	f7f7 f811 	bl	242d0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2d2ae:	9b03      	ldr	r3, [sp, #12]
   2d2b0:	b13b      	cbz	r3, 2d2c2 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   2d2b2:	f384 8811 	msr	BASEPRI, r4
   2d2b6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2d2ba:	4618      	mov	r0, r3
   2d2bc:	b005      	add	sp, #20
   2d2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2d2c2:	1a28      	subs	r0, r5, r0
   2d2c4:	eb67 0101 	sbc.w	r1, r7, r1
   2d2c8:	2801      	cmp	r0, #1
   2d2ca:	f171 0200 	sbcs.w	r2, r1, #0
   2d2ce:	dbf0      	blt.n	2d2b2 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2d2d0:	e9cd 0100 	strd	r0, r1, [sp]
   2d2d4:	465a      	mov	r2, fp
   2d2d6:	4621      	mov	r1, r4
   2d2d8:	4650      	mov	r0, sl
   2d2da:	f7f6 fcd5 	bl	23c88 <z_pend_curr>
	__asm__ volatile(
   2d2de:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d2e2:	f3ef 8411 	mrs	r4, BASEPRI
   2d2e6:	f383 8812 	msr	BASEPRI_MAX, r3
   2d2ea:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   2d2ee:	e7d6      	b.n	2d29e <k_heap_aligned_alloc+0x30>

0002d2f0 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2d2f0:	b538      	push	{r3, r4, r5, lr}
   2d2f2:	4604      	mov	r4, r0
   2d2f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d2f8:	f3ef 8511 	mrs	r5, BASEPRI
   2d2fc:	f383 8812 	msr	BASEPRI_MAX, r3
   2d300:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2d304:	f7fc fab4 	bl	29870 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2d308:	f104 000c 	add.w	r0, r4, #12
   2d30c:	f000 fb37 	bl	2d97e <z_unpend_all>
   2d310:	b130      	cbz	r0, 2d320 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2d312:	4629      	mov	r1, r5
   2d314:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2d318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2d31c:	f7f6 bb60 	b.w	239e0 <z_reschedule>
	__asm__ volatile(
   2d320:	f385 8811 	msr	BASEPRI, r5
   2d324:	f3bf 8f6f 	isb	sy
}
   2d328:	bd38      	pop	{r3, r4, r5, pc}

0002d32a <k_mem_slab_init>:
{
   2d32a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2d32c:	2400      	movs	r4, #0
   2d32e:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2d330:	ea41 0402 	orr.w	r4, r1, r2
   2d334:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2d338:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2d33c:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2d33e:	d10c      	bne.n	2d35a <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   2d340:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2d342:	42a3      	cmp	r3, r4
   2d344:	d103      	bne.n	2d34e <k_mem_slab_init+0x24>
   2d346:	e9c0 0000 	strd	r0, r0, [r0]
}
   2d34a:	2000      	movs	r0, #0
}
   2d34c:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2d34e:	6945      	ldr	r5, [r0, #20]
   2d350:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2d352:	3401      	adds	r4, #1
		slab->free_list = p;
   2d354:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   2d356:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2d358:	e7f3      	b.n	2d342 <k_mem_slab_init+0x18>
		return -EINVAL;
   2d35a:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2d35e:	e7f5      	b.n	2d34c <k_mem_slab_init+0x22>

0002d360 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2d360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d362:	4604      	mov	r4, r0
   2d364:	460d      	mov	r5, r1
	__asm__ volatile(
   2d366:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d36a:	f3ef 8611 	mrs	r6, BASEPRI
   2d36e:	f383 8812 	msr	BASEPRI_MAX, r3
   2d372:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2d376:	6947      	ldr	r7, [r0, #20]
   2d378:	b977      	cbnz	r7, 2d398 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2d37a:	f000 fae8 	bl	2d94e <z_unpend_first_thread>

		if (pending_thread != NULL) {
   2d37e:	b158      	cbz	r0, 2d398 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2d380:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2d382:	6142      	str	r2, [r0, #20]
   2d384:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   2d386:	f000 fa71 	bl	2d86c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2d38a:	4631      	mov	r1, r6
   2d38c:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2d390:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   2d394:	f7f6 bb24 	b.w	239e0 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2d398:	682b      	ldr	r3, [r5, #0]
   2d39a:	6962      	ldr	r2, [r4, #20]
   2d39c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2d39e:	682b      	ldr	r3, [r5, #0]
   2d3a0:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2d3a2:	69a3      	ldr	r3, [r4, #24]
   2d3a4:	3b01      	subs	r3, #1
   2d3a6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2d3a8:	f386 8811 	msr	BASEPRI, r6
   2d3ac:	f3bf 8f6f 	isb	sy
}
   2d3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002d3b2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2d3b2:	f3ef 8005 	mrs	r0, IPSR
}
   2d3b6:	3800      	subs	r0, #0
   2d3b8:	bf18      	it	ne
   2d3ba:	2001      	movne	r0, #1
   2d3bc:	4770      	bx	lr

0002d3be <z_impl_k_thread_name_set>:
}
   2d3be:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2d3c2:	4770      	bx	lr

0002d3c4 <k_thread_name_get>:
}
   2d3c4:	2000      	movs	r0, #0
   2d3c6:	4770      	bx	lr

0002d3c8 <z_impl_k_thread_start>:
	z_sched_start(thread);
   2d3c8:	f7f6 bc02 	b.w	23bd0 <z_sched_start>

0002d3cc <z_pm_save_idle_exit>:
{
   2d3cc:	b508      	push	{r3, lr}
	pm_system_resume();
   2d3ce:	f7e8 fe07 	bl	15fe0 <pm_system_resume>
}
   2d3d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2d3d6:	f7ff bc97 	b.w	2cd08 <sys_clock_idle_exit>

0002d3da <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2d3da:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2d3de:	428b      	cmp	r3, r1
   2d3e0:	d001      	beq.n	2d3e6 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2d3e2:	f7f6 bc65 	b.w	23cb0 <z_set_prio>
}
   2d3e6:	2000      	movs	r0, #0
   2d3e8:	4770      	bx	lr

0002d3ea <z_impl_k_mutex_init>:
{
   2d3ea:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2d3ec:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2d3ee:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2d3f2:	e9c3 3300 	strd	r3, r3, [r3]
}
   2d3f6:	4770      	bx	lr

0002d3f8 <queue_insert>:
{
   2d3f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d3fc:	4699      	mov	r9, r3
   2d3fe:	4604      	mov	r4, r0
   2d400:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2d404:	460d      	mov	r5, r1
   2d406:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2d408:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2d40c:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d410:	f3ef 8711 	mrs	r7, BASEPRI
   2d414:	f382 8812 	msr	BASEPRI_MAX, r2
   2d418:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2d41c:	b103      	cbz	r3, 2d420 <queue_insert+0x28>
	return list->tail;
   2d41e:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2d420:	4630      	mov	r0, r6
   2d422:	f000 fa94 	bl	2d94e <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2d426:	b158      	cbz	r0, 2d440 <queue_insert+0x48>
   2d428:	2400      	movs	r4, #0
   2d42a:	67c4      	str	r4, [r0, #124]	; 0x7c
   2d42c:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2d430:	f000 fa1c 	bl	2d86c <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2d434:	4630      	mov	r0, r6
   2d436:	4639      	mov	r1, r7
   2d438:	f7f6 fad2 	bl	239e0 <z_reschedule>
	return 0;
   2d43c:	2000      	movs	r0, #0
   2d43e:	e00c      	b.n	2d45a <queue_insert+0x62>
	if (alloc) {
   2d440:	f1b9 0f00 	cmp.w	r9, #0
   2d444:	d01b      	beq.n	2d47e <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   2d446:	2108      	movs	r1, #8
   2d448:	f7f7 f89c 	bl	24584 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2d44c:	b938      	cbnz	r0, 2d45e <queue_insert+0x66>
	__asm__ volatile(
   2d44e:	f387 8811 	msr	BASEPRI, r7
   2d452:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2d456:	f06f 000b 	mvn.w	r0, #11
}
   2d45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2d45e:	2301      	movs	r3, #1
		anode->data = data;
   2d460:	f8c0 8004 	str.w	r8, [r0, #4]
   2d464:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d466:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d468:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2d46c:	b95d      	cbnz	r5, 2d486 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d46e:	6823      	ldr	r3, [r4, #0]
   2d470:	4313      	orrs	r3, r2
   2d472:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2d474:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2d476:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2d478:	b973      	cbnz	r3, 2d498 <queue_insert+0xa0>
	list->tail = node;
   2d47a:	6060      	str	r0, [r4, #4]
}
   2d47c:	e00c      	b.n	2d498 <queue_insert+0xa0>
	node->next_and_flags = flags;
   2d47e:	f8c8 9000 	str.w	r9, [r8]
}
   2d482:	4640      	mov	r0, r8
   2d484:	e7ef      	b.n	2d466 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2d486:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2d488:	f033 0303 	bics.w	r3, r3, #3
   2d48c:	d110      	bne.n	2d4b0 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d48e:	6002      	str	r2, [r0, #0]
	return list->tail;
   2d490:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2d492:	b93a      	cbnz	r2, 2d4a4 <queue_insert+0xac>
	list->head = node;
   2d494:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2d498:	2104      	movs	r1, #4
   2d49a:	f104 0010 	add.w	r0, r4, #16
   2d49e:	f000 fc68 	bl	2dd72 <z_handle_obj_poll_events>
   2d4a2:	e7c7      	b.n	2d434 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d4a4:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d4a6:	f003 0303 	and.w	r3, r3, #3
   2d4aa:	4303      	orrs	r3, r0
   2d4ac:	6013      	str	r3, [r2, #0]
   2d4ae:	e7e4      	b.n	2d47a <queue_insert+0x82>
   2d4b0:	4313      	orrs	r3, r2
   2d4b2:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d4b4:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d4b6:	f003 0303 	and.w	r3, r3, #3
   2d4ba:	4303      	orrs	r3, r0
   2d4bc:	602b      	str	r3, [r5, #0]
}
   2d4be:	e7eb      	b.n	2d498 <queue_insert+0xa0>

0002d4c0 <z_queue_node_peek>:
{
   2d4c0:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2d4c2:	4604      	mov	r4, r0
   2d4c4:	b130      	cbz	r0, 2d4d4 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d4c6:	6802      	ldr	r2, [r0, #0]
   2d4c8:	0793      	lsls	r3, r2, #30
   2d4ca:	d003      	beq.n	2d4d4 <z_queue_node_peek+0x14>
		ret = anode->data;
   2d4cc:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2d4ce:	b109      	cbz	r1, 2d4d4 <z_queue_node_peek+0x14>
			k_free(anode);
   2d4d0:	f000 fc65 	bl	2dd9e <k_free>
}
   2d4d4:	4620      	mov	r0, r4
   2d4d6:	bd10      	pop	{r4, pc}

0002d4d8 <z_impl_k_queue_init>:
	list->head = NULL;
   2d4d8:	2300      	movs	r3, #0
	list->tail = NULL;
   2d4da:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   2d4de:	f100 0308 	add.w	r3, r0, #8
   2d4e2:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2d4e6:	f100 0310 	add.w	r3, r0, #16
   2d4ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2d4ee:	4770      	bx	lr

0002d4f0 <k_queue_append>:
{
   2d4f0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2d4f2:	2301      	movs	r3, #1
   2d4f4:	9300      	str	r3, [sp, #0]
   2d4f6:	2300      	movs	r3, #0
{
   2d4f8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2d4fa:	4619      	mov	r1, r3
   2d4fc:	f7ff ff7c 	bl	2d3f8 <queue_insert>
}
   2d500:	b003      	add	sp, #12
   2d502:	f85d fb04 	ldr.w	pc, [sp], #4

0002d506 <k_queue_prepend>:
{
   2d506:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2d508:	2300      	movs	r3, #0
{
   2d50a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2d50c:	9300      	str	r3, [sp, #0]
   2d50e:	4619      	mov	r1, r3
   2d510:	f7ff ff72 	bl	2d3f8 <queue_insert>
}
   2d514:	b003      	add	sp, #12
   2d516:	f85d fb04 	ldr.w	pc, [sp], #4

0002d51a <k_queue_append_list>:
{
   2d51a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d51e:	4605      	mov	r5, r0
   2d520:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   2d522:	460c      	mov	r4, r1
   2d524:	b391      	cbz	r1, 2d58c <k_queue_append_list+0x72>
   2d526:	b38a      	cbz	r2, 2d58c <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2d528:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   2d52c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d530:	f3ef 8811 	mrs	r8, BASEPRI
   2d534:	f383 8812 	msr	BASEPRI_MAX, r3
   2d538:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   2d53c:	4638      	mov	r0, r7
   2d53e:	f000 fa06 	bl	2d94e <z_unpend_first_thread>
   2d542:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   2d546:	b920      	cbnz	r0, 2d552 <k_queue_append_list+0x38>
	return list->tail;
   2d548:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2d54a:	b9ca      	cbnz	r2, 2d580 <k_queue_append_list+0x66>
	list->head = node;
   2d54c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2d54e:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2d550:	e00a      	b.n	2d568 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   2d552:	6144      	str	r4, [r0, #20]
   2d554:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2d558:	f000 f988 	bl	2d86c <z_ready_thread>
		head = *(void **)head;
   2d55c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2d55e:	4638      	mov	r0, r7
   2d560:	f000 f9f5 	bl	2d94e <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2d564:	2c00      	cmp	r4, #0
   2d566:	d1ee      	bne.n	2d546 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2d568:	2104      	movs	r1, #4
   2d56a:	f105 0010 	add.w	r0, r5, #16
   2d56e:	f000 fc00 	bl	2dd72 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2d572:	4638      	mov	r0, r7
   2d574:	4641      	mov	r1, r8
   2d576:	f7f6 fa33 	bl	239e0 <z_reschedule>
	return 0;
   2d57a:	2000      	movs	r0, #0
}
   2d57c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d580:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d582:	f003 0303 	and.w	r3, r3, #3
   2d586:	431c      	orrs	r4, r3
   2d588:	6014      	str	r4, [r2, #0]
}
   2d58a:	e7e0      	b.n	2d54e <k_queue_append_list+0x34>
		return -EINVAL;
   2d58c:	f06f 0015 	mvn.w	r0, #21
   2d590:	e7f4      	b.n	2d57c <k_queue_append_list+0x62>

0002d592 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2d592:	b15a      	cbz	r2, 2d5ac <z_impl_k_sem_init+0x1a>
   2d594:	428a      	cmp	r2, r1
   2d596:	d309      	bcc.n	2d5ac <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2d598:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2d59c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2d5a0:	e9c0 0000 	strd	r0, r0, [r0]
   2d5a4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2d5a8:	2000      	movs	r0, #0
   2d5aa:	4770      	bx	lr
		return -EINVAL;
   2d5ac:	f06f 0015 	mvn.w	r0, #21
}
   2d5b0:	4770      	bx	lr

0002d5b2 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   2d5b2:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2d5b4:	2301      	movs	r3, #1
   2d5b6:	408b      	lsls	r3, r1
   2d5b8:	ea22 0303 	bic.w	r3, r2, r3
   2d5bc:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2d5be:	fa22 f001 	lsr.w	r0, r2, r1
}
   2d5c2:	f000 0001 	and.w	r0, r0, #1
   2d5c6:	4770      	bx	lr

0002d5c8 <unschedule_locked>:
{
   2d5c8:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2d5ca:	2103      	movs	r1, #3
{
   2d5cc:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2d5ce:	300c      	adds	r0, #12
   2d5d0:	f7ff ffef 	bl	2d5b2 <flag_test_and_clear>
   2d5d4:	4604      	mov	r4, r0
   2d5d6:	b118      	cbz	r0, 2d5e0 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2d5d8:	f105 0010 	add.w	r0, r5, #16
   2d5dc:	f000 f9fc 	bl	2d9d8 <z_abort_timeout>
}
   2d5e0:	4620      	mov	r0, r4
   2d5e2:	bd38      	pop	{r3, r4, r5, pc}

0002d5e4 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2d5e4:	b120      	cbz	r0, 2d5f0 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2d5e6:	2200      	movs	r2, #0
   2d5e8:	4611      	mov	r1, r2
   2d5ea:	3088      	adds	r0, #136	; 0x88
   2d5ec:	f000 b9d7 	b.w	2d99e <z_sched_wake>
}
   2d5f0:	4770      	bx	lr

0002d5f2 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   2d5f2:	68c3      	ldr	r3, [r0, #12]
{
   2d5f4:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2d5f6:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2d5fa:	079b      	lsls	r3, r3, #30
{
   2d5fc:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2d5fe:	d416      	bmi.n	2d62e <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2d600:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2d602:	2102      	movs	r1, #2
   2d604:	300c      	adds	r0, #12
   2d606:	f7ff ffd4 	bl	2d5b2 <flag_test_and_clear>
   2d60a:	b180      	cbz	r0, 2d62e <cancel_async_locked+0x3c>
	return list->head;
   2d60c:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d610:	b16a      	cbz	r2, 2d62e <cancel_async_locked+0x3c>
   2d612:	4294      	cmp	r4, r2
   2d614:	d11b      	bne.n	2d64e <cancel_async_locked+0x5c>
	return node->next;
   2d616:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   2d618:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   2d61c:	b98d      	cbnz	r5, 2d642 <cancel_async_locked+0x50>
   2d61e:	428c      	cmp	r4, r1
	list->head = node;
   2d620:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2d624:	d101      	bne.n	2d62a <cancel_async_locked+0x38>
	list->tail = node;
   2d626:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   2d62a:	2300      	movs	r3, #0
   2d62c:	6023      	str	r3, [r4, #0]
	return *flagp;
   2d62e:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2d630:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2d634:	bf1e      	ittt	ne
   2d636:	f043 0302 	orrne.w	r3, r3, #2
   2d63a:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2d63c:	f003 000f 	andne.w	r0, r3, #15
}
   2d640:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   2d642:	428c      	cmp	r4, r1
	parent->next = child;
   2d644:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2d646:	bf08      	it	eq
   2d648:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   2d64c:	e7ed      	b.n	2d62a <cancel_async_locked+0x38>
	return node->next;
   2d64e:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d650:	6812      	ldr	r2, [r2, #0]
   2d652:	e7dd      	b.n	2d610 <cancel_async_locked+0x1e>

0002d654 <work_timeout>:
{
   2d654:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2d656:	4604      	mov	r4, r0
   2d658:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d65c:	f3ef 8511 	mrs	r5, BASEPRI
   2d660:	f383 8812 	msr	BASEPRI_MAX, r3
   2d664:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2d668:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2d66a:	f1a0 0610 	sub.w	r6, r0, #16
   2d66e:	2103      	movs	r1, #3
   2d670:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   2d672:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2d674:	f7ff ff9d 	bl	2d5b2 <flag_test_and_clear>
   2d678:	b128      	cbz	r0, 2d686 <work_timeout+0x32>
		queue = dw->queue;
   2d67a:	69a3      	ldr	r3, [r4, #24]
   2d67c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2d67e:	a901      	add	r1, sp, #4
   2d680:	4630      	mov	r0, r6
   2d682:	f7f6 f875 	bl	23770 <submit_to_queue_locked>
	__asm__ volatile(
   2d686:	f385 8811 	msr	BASEPRI, r5
   2d68a:	f3bf 8f6f 	isb	sy
}
   2d68e:	b002      	add	sp, #8
   2d690:	bd70      	pop	{r4, r5, r6, pc}

0002d692 <k_work_init>:
{
   2d692:	b538      	push	{r3, r4, r5, lr}
   2d694:	4604      	mov	r4, r0
   2d696:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2d698:	2210      	movs	r2, #16
   2d69a:	2100      	movs	r1, #0
   2d69c:	f000 fbbd 	bl	2de1a <memset>
   2d6a0:	6065      	str	r5, [r4, #4]
}
   2d6a2:	bd38      	pop	{r3, r4, r5, pc}

0002d6a4 <k_work_busy_get>:
	__asm__ volatile(
   2d6a4:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d6a8:	f3ef 8311 	mrs	r3, BASEPRI
   2d6ac:	f382 8812 	msr	BASEPRI_MAX, r2
   2d6b0:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   2d6b4:	68c0      	ldr	r0, [r0, #12]
   2d6b6:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   2d6ba:	f383 8811 	msr	BASEPRI, r3
   2d6be:	f3bf 8f6f 	isb	sy
}
   2d6c2:	4770      	bx	lr

0002d6c4 <z_work_submit_to_queue>:
{
   2d6c4:	b513      	push	{r0, r1, r4, lr}
   2d6c6:	9001      	str	r0, [sp, #4]
   2d6c8:	4608      	mov	r0, r1
	__asm__ volatile(
   2d6ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d6ce:	f3ef 8411 	mrs	r4, BASEPRI
   2d6d2:	f383 8812 	msr	BASEPRI_MAX, r3
   2d6d6:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2d6da:	a901      	add	r1, sp, #4
   2d6dc:	f7f6 f848 	bl	23770 <submit_to_queue_locked>
	__asm__ volatile(
   2d6e0:	f384 8811 	msr	BASEPRI, r4
   2d6e4:	f3bf 8f6f 	isb	sy
}
   2d6e8:	b002      	add	sp, #8
   2d6ea:	bd10      	pop	{r4, pc}

0002d6ec <k_work_submit_to_queue>:
{
   2d6ec:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2d6ee:	f7ff ffe9 	bl	2d6c4 <z_work_submit_to_queue>
	if (ret > 0) {
   2d6f2:	1e04      	subs	r4, r0, #0
   2d6f4:	dd09      	ble.n	2d70a <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2d6f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d6fa:	f3ef 8011 	mrs	r0, BASEPRI
   2d6fe:	f383 8812 	msr	BASEPRI_MAX, r3
   2d702:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2d706:	f000 f895 	bl	2d834 <z_reschedule_irqlock>
}
   2d70a:	4620      	mov	r0, r4
   2d70c:	bd10      	pop	{r4, pc}

0002d70e <k_work_queue_init>:
{
   2d70e:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   2d710:	22a0      	movs	r2, #160	; 0xa0
   2d712:	2100      	movs	r1, #0
   2d714:	f000 fb81 	bl	2de1a <memset>
}
   2d718:	bd08      	pop	{r3, pc}

0002d71a <k_work_init_delayable>:
{
   2d71a:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   2d71c:	2230      	movs	r2, #48	; 0x30
{
   2d71e:	4604      	mov	r4, r0
   2d720:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2d722:	2100      	movs	r1, #0
   2d724:	f000 fb79 	bl	2de1a <memset>
   2d728:	f44f 7380 	mov.w	r3, #256	; 0x100
   2d72c:	6065      	str	r5, [r4, #4]
   2d72e:	60e3      	str	r3, [r4, #12]
}
   2d730:	bd38      	pop	{r3, r4, r5, pc}

0002d732 <k_work_delayable_busy_get>:
   2d732:	f7ff bfb7 	b.w	2d6a4 <k_work_busy_get>

0002d736 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2d736:	b538      	push	{r3, r4, r5, lr}
   2d738:	4604      	mov	r4, r0
   2d73a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d73e:	f3ef 8511 	mrs	r5, BASEPRI
   2d742:	f383 8812 	msr	BASEPRI_MAX, r3
   2d746:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2d74a:	f7ff ff3d 	bl	2d5c8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2d74e:	4620      	mov	r0, r4
   2d750:	f7ff ff4f 	bl	2d5f2 <cancel_async_locked>
	__asm__ volatile(
   2d754:	f385 8811 	msr	BASEPRI, r5
   2d758:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2d75c:	bd38      	pop	{r3, r4, r5, pc}

0002d75e <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2d75e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d760:	4604      	mov	r4, r0
   2d762:	460d      	mov	r5, r1
	__asm__ volatile(
   2d764:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d768:	f3ef 8711 	mrs	r7, BASEPRI
   2d76c:	f383 8812 	msr	BASEPRI_MAX, r3
   2d770:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   2d774:	68c3      	ldr	r3, [r0, #12]
   2d776:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2d77a:	2b00      	cmp	r3, #0
   2d77c:	bf14      	ite	ne
   2d77e:	2601      	movne	r6, #1
   2d780:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   2d782:	d009      	beq.n	2d798 <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   2d784:	f7ff ff20 	bl	2d5c8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2d788:	4620      	mov	r0, r4
   2d78a:	f7ff ff32 	bl	2d5f2 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2d78e:	4629      	mov	r1, r5
   2d790:	4620      	mov	r0, r4
   2d792:	f7f5 ffcf 	bl	23734 <cancel_sync_locked>
   2d796:	4603      	mov	r3, r0
	__asm__ volatile(
   2d798:	f387 8811 	msr	BASEPRI, r7
   2d79c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2d7a0:	b13b      	cbz	r3, 2d7b2 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   2d7a2:	f04f 32ff 	mov.w	r2, #4294967295
   2d7a6:	f04f 33ff 	mov.w	r3, #4294967295
   2d7aa:	f105 0008 	add.w	r0, r5, #8
   2d7ae:	f7f5 fec7 	bl	23540 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2d7b2:	4630      	mov	r0, r6
   2d7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002d7b6 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2d7b6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2d7ba:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2d7bc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2d7be:	2300      	movs	r3, #0
	node->prev = NULL;
   2d7c0:	e9c0 3300 	strd	r3, r3, [r0]
}
   2d7c4:	4770      	bx	lr

0002d7c6 <unpend_thread_no_timeout>:
{
   2d7c6:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   2d7c8:	f7ff fff5 	bl	2d7b6 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2d7cc:	7b43      	ldrb	r3, [r0, #13]
   2d7ce:	f023 0302 	bic.w	r3, r3, #2
   2d7d2:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   2d7d4:	2300      	movs	r3, #0
   2d7d6:	6083      	str	r3, [r0, #8]
}
   2d7d8:	bd08      	pop	{r3, pc}

0002d7da <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2d7da:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2d7de:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2d7e2:	4283      	cmp	r3, r0
		return b2 - b1;
   2d7e4:	bf14      	ite	ne
   2d7e6:	1ac0      	subne	r0, r0, r3
	return 0;
   2d7e8:	2000      	moveq	r0, #0
}
   2d7ea:	4770      	bx	lr

0002d7ec <z_unpend_thread_no_timeout>:
{
   2d7ec:	b508      	push	{r3, lr}
	__asm__ volatile(
   2d7ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d7f2:	f3ef 8111 	mrs	r1, BASEPRI
   2d7f6:	f383 8812 	msr	BASEPRI_MAX, r3
   2d7fa:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2d7fe:	f7ff ffe2 	bl	2d7c6 <unpend_thread_no_timeout>
	__asm__ volatile(
   2d802:	f381 8811 	msr	BASEPRI, r1
   2d806:	f3bf 8f6f 	isb	sy
}
   2d80a:	bd08      	pop	{r3, pc}

0002d80c <z_unpend_thread>:
{
   2d80c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2d80e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d812:	f3ef 8411 	mrs	r4, BASEPRI
   2d816:	f383 8812 	msr	BASEPRI_MAX, r3
   2d81a:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2d81e:	f7ff ffd2 	bl	2d7c6 <unpend_thread_no_timeout>
	__asm__ volatile(
   2d822:	f384 8811 	msr	BASEPRI, r4
   2d826:	f3bf 8f6f 	isb	sy
}
   2d82a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d82e:	3018      	adds	r0, #24
   2d830:	f000 b8d2 	b.w	2d9d8 <z_abort_timeout>

0002d834 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2d834:	4603      	mov	r3, r0
   2d836:	b920      	cbnz	r0, 2d842 <z_reschedule_irqlock+0xe>
   2d838:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2d83c:	b90a      	cbnz	r2, 2d842 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2d83e:	f7e8 befb 	b.w	16638 <arch_swap>
   2d842:	f383 8811 	msr	BASEPRI, r3
   2d846:	f3bf 8f6f 	isb	sy
}
   2d84a:	4770      	bx	lr

0002d84c <z_reschedule_unlocked>:
	__asm__ volatile(
   2d84c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d850:	f3ef 8011 	mrs	r0, BASEPRI
   2d854:	f383 8812 	msr	BASEPRI_MAX, r3
   2d858:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2d85c:	f7ff bfea 	b.w	2d834 <z_reschedule_irqlock>

0002d860 <z_priq_dumb_best>:
{
   2d860:	4603      	mov	r3, r0
	return list->head == list;
   2d862:	6800      	ldr	r0, [r0, #0]
}
   2d864:	4283      	cmp	r3, r0
   2d866:	bf08      	it	eq
   2d868:	2000      	moveq	r0, #0
   2d86a:	4770      	bx	lr

0002d86c <z_ready_thread>:
{
   2d86c:	b510      	push	{r4, lr}
   2d86e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d872:	f3ef 8411 	mrs	r4, BASEPRI
   2d876:	f383 8812 	msr	BASEPRI_MAX, r3
   2d87a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2d87e:	f7f6 f971 	bl	23b64 <ready_thread>
	__asm__ volatile(
   2d882:	f384 8811 	msr	BASEPRI, r4
   2d886:	f3bf 8f6f 	isb	sy
}
   2d88a:	bd10      	pop	{r4, pc}

0002d88c <z_thread_timeout>:
{
   2d88c:	b510      	push	{r4, lr}
   2d88e:	4601      	mov	r1, r0
	__asm__ volatile(
   2d890:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d894:	f3ef 8411 	mrs	r4, BASEPRI
   2d898:	f383 8812 	msr	BASEPRI_MAX, r3
   2d89c:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2d8a0:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   2d8a4:	f013 0f28 	tst.w	r3, #40	; 0x28
   2d8a8:	d10d      	bne.n	2d8c6 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   2d8aa:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2d8ae:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   2d8b0:	b10b      	cbz	r3, 2d8b6 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   2d8b2:	f7ff ff88 	bl	2d7c6 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2d8b6:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   2d8ba:	f023 0314 	bic.w	r3, r3, #20
   2d8be:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   2d8c2:	f7f6 f94f 	bl	23b64 <ready_thread>
	__asm__ volatile(
   2d8c6:	f384 8811 	msr	BASEPRI, r4
   2d8ca:	f3bf 8f6f 	isb	sy
}
   2d8ce:	bd10      	pop	{r4, pc}

0002d8d0 <add_to_waitq_locked>:
{
   2d8d0:	b538      	push	{r3, r4, r5, lr}
   2d8d2:	4604      	mov	r4, r0
   2d8d4:	460d      	mov	r5, r1
	unready_thread(thread);
   2d8d6:	f7f6 f999 	bl	23c0c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2d8da:	7b63      	ldrb	r3, [r4, #13]
   2d8dc:	f043 0302 	orr.w	r3, r3, #2
   2d8e0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2d8e2:	b195      	cbz	r5, 2d90a <add_to_waitq_locked+0x3a>
   2d8e4:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2d8e6:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d8e8:	429d      	cmp	r5, r3
   2d8ea:	d015      	beq.n	2d918 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2d8ec:	b1a3      	cbz	r3, 2d918 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   2d8ee:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2d8f2:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   2d8f6:	4291      	cmp	r1, r2
   2d8f8:	d008      	beq.n	2d90c <add_to_waitq_locked+0x3c>
		return b2 - b1;
   2d8fa:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2d8fc:	2a00      	cmp	r2, #0
   2d8fe:	dd05      	ble.n	2d90c <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   2d900:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2d902:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2d906:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2d908:	605c      	str	r4, [r3, #4]
}
   2d90a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2d90c:	686a      	ldr	r2, [r5, #4]
   2d90e:	4293      	cmp	r3, r2
   2d910:	d002      	beq.n	2d918 <add_to_waitq_locked+0x48>
   2d912:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2d914:	2b00      	cmp	r3, #0
   2d916:	d1ec      	bne.n	2d8f2 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   2d918:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2d91a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2d91e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2d920:	606c      	str	r4, [r5, #4]
}
   2d922:	e7f2      	b.n	2d90a <add_to_waitq_locked+0x3a>

0002d924 <z_unpend1_no_timeout>:
{
   2d924:	b510      	push	{r4, lr}
	__asm__ volatile(
   2d926:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d92a:	f3ef 8411 	mrs	r4, BASEPRI
   2d92e:	f383 8812 	msr	BASEPRI_MAX, r3
   2d932:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2d936:	f7ff ff93 	bl	2d860 <z_priq_dumb_best>
		if (thread != NULL) {
   2d93a:	4601      	mov	r1, r0
   2d93c:	b108      	cbz	r0, 2d942 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   2d93e:	f7ff ff42 	bl	2d7c6 <unpend_thread_no_timeout>
	__asm__ volatile(
   2d942:	f384 8811 	msr	BASEPRI, r4
   2d946:	f3bf 8f6f 	isb	sy
}
   2d94a:	4608      	mov	r0, r1
   2d94c:	bd10      	pop	{r4, pc}

0002d94e <z_unpend_first_thread>:
{
   2d94e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2d950:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d954:	f3ef 8511 	mrs	r5, BASEPRI
   2d958:	f383 8812 	msr	BASEPRI_MAX, r3
   2d95c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2d960:	f7ff ff7e 	bl	2d860 <z_priq_dumb_best>
		if (thread != NULL) {
   2d964:	4604      	mov	r4, r0
   2d966:	b120      	cbz	r0, 2d972 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   2d968:	f7ff ff2d 	bl	2d7c6 <unpend_thread_no_timeout>
   2d96c:	3018      	adds	r0, #24
   2d96e:	f000 f833 	bl	2d9d8 <z_abort_timeout>
	__asm__ volatile(
   2d972:	f385 8811 	msr	BASEPRI, r5
   2d976:	f3bf 8f6f 	isb	sy
}
   2d97a:	4620      	mov	r0, r4
   2d97c:	bd38      	pop	{r3, r4, r5, pc}

0002d97e <z_unpend_all>:
{
   2d97e:	b538      	push	{r3, r4, r5, lr}
   2d980:	4605      	mov	r5, r0
	int need_sched = 0;
   2d982:	2000      	movs	r0, #0
	return list->head == list;
   2d984:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d986:	42a5      	cmp	r5, r4
   2d988:	d000      	beq.n	2d98c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2d98a:	b904      	cbnz	r4, 2d98e <z_unpend_all+0x10>
}
   2d98c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2d98e:	4620      	mov	r0, r4
   2d990:	f7ff ff3c 	bl	2d80c <z_unpend_thread>
		z_ready_thread(thread);
   2d994:	4620      	mov	r0, r4
   2d996:	f7ff ff69 	bl	2d86c <z_ready_thread>
		need_sched = 1;
   2d99a:	2001      	movs	r0, #1
   2d99c:	e7f2      	b.n	2d984 <z_unpend_all+0x6>

0002d99e <z_sched_wake>:
{
   2d99e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2d9a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d9a4:	f3ef 8511 	mrs	r5, BASEPRI
   2d9a8:	f383 8812 	msr	BASEPRI_MAX, r3
   2d9ac:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2d9b0:	f7ff ff56 	bl	2d860 <z_priq_dumb_best>
		if (thread != NULL) {
   2d9b4:	4604      	mov	r4, r0
   2d9b6:	b150      	cbz	r0, 2d9ce <z_sched_wake+0x30>
   2d9b8:	67c1      	str	r1, [r0, #124]	; 0x7c
   2d9ba:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   2d9bc:	f7ff ff03 	bl	2d7c6 <unpend_thread_no_timeout>
   2d9c0:	3018      	adds	r0, #24
   2d9c2:	f000 f809 	bl	2d9d8 <z_abort_timeout>
			ready_thread(thread);
   2d9c6:	4620      	mov	r0, r4
   2d9c8:	f7f6 f8cc 	bl	23b64 <ready_thread>
			ret = true;
   2d9cc:	2001      	movs	r0, #1
	__asm__ volatile(
   2d9ce:	f385 8811 	msr	BASEPRI, r5
   2d9d2:	f3bf 8f6f 	isb	sy
}
   2d9d6:	bd38      	pop	{r3, r4, r5, pc}

0002d9d8 <z_abort_timeout>:
{
   2d9d8:	b510      	push	{r4, lr}
	__asm__ volatile(
   2d9da:	f04f 0240 	mov.w	r2, #64	; 0x40
   2d9de:	f3ef 8411 	mrs	r4, BASEPRI
   2d9e2:	f382 8812 	msr	BASEPRI_MAX, r2
   2d9e6:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2d9ea:	6803      	ldr	r3, [r0, #0]
   2d9ec:	b13b      	cbz	r3, 2d9fe <z_abort_timeout+0x26>
			remove_timeout(to);
   2d9ee:	f7f6 fb7f 	bl	240f0 <remove_timeout>
			ret = 0;
   2d9f2:	2000      	movs	r0, #0
	__asm__ volatile(
   2d9f4:	f384 8811 	msr	BASEPRI, r4
   2d9f8:	f3bf 8f6f 	isb	sy
}
   2d9fc:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2d9fe:	f06f 0015 	mvn.w	r0, #21
   2da02:	e7f7      	b.n	2d9f4 <z_abort_timeout+0x1c>

0002da04 <z_get_next_timeout_expiry>:
{
   2da04:	b510      	push	{r4, lr}
	__asm__ volatile(
   2da06:	f04f 0340 	mov.w	r3, #64	; 0x40
   2da0a:	f3ef 8411 	mrs	r4, BASEPRI
   2da0e:	f383 8812 	msr	BASEPRI_MAX, r3
   2da12:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2da16:	f7f6 fb45 	bl	240a4 <next_timeout>
	__asm__ volatile(
   2da1a:	f384 8811 	msr	BASEPRI, r4
   2da1e:	f3bf 8f6f 	isb	sy
}
   2da22:	bd10      	pop	{r4, pc}

0002da24 <z_set_timeout_expiry>:
{
   2da24:	b570      	push	{r4, r5, r6, lr}
   2da26:	4604      	mov	r4, r0
   2da28:	460d      	mov	r5, r1
	__asm__ volatile(
   2da2a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2da2e:	f3ef 8611 	mrs	r6, BASEPRI
   2da32:	f383 8812 	msr	BASEPRI_MAX, r3
   2da36:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2da3a:	f7f6 fb33 	bl	240a4 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2da3e:	2801      	cmp	r0, #1
   2da40:	dd05      	ble.n	2da4e <z_set_timeout_expiry+0x2a>
   2da42:	42a0      	cmp	r0, r4
   2da44:	db03      	blt.n	2da4e <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2da46:	4629      	mov	r1, r5
   2da48:	4620      	mov	r0, r4
   2da4a:	f7f3 f9ab 	bl	20da4 <sys_clock_set_timeout>
	__asm__ volatile(
   2da4e:	f386 8811 	msr	BASEPRI, r6
   2da52:	f3bf 8f6f 	isb	sy
}
   2da56:	bd70      	pop	{r4, r5, r6, pc}

0002da58 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2da58:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2da5a:	f7f6 fc39 	bl	242d0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2da5e:	bd08      	pop	{r3, pc}

0002da60 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2da60:	f7f6 bc36 	b.w	242d0 <sys_clock_tick_get>

0002da64 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2da64:	b108      	cbz	r0, 2da6a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2da66:	f7e9 bb39 	b.w	170dc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2da6a:	4770      	bx	lr

0002da6c <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2da6c:	f1b1 3fff 	cmp.w	r1, #4294967295
   2da70:	bf08      	it	eq
   2da72:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2da76:	b538      	push	{r3, r4, r5, lr}
   2da78:	4605      	mov	r5, r0
   2da7a:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2da7c:	d01d      	beq.n	2daba <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2da7e:	ea51 0300 	orrs.w	r3, r1, r0
   2da82:	d103      	bne.n	2da8c <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2da84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2da88:	f7f6 bc22 	b.w	242d0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2da8c:	f06f 0301 	mvn.w	r3, #1
   2da90:	1a18      	subs	r0, r3, r0
   2da92:	f04f 33ff 	mov.w	r3, #4294967295
   2da96:	eb63 0101 	sbc.w	r1, r3, r1
   2da9a:	2900      	cmp	r1, #0
   2da9c:	da0c      	bge.n	2dab8 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   2da9e:	f7f6 fc17 	bl	242d0 <sys_clock_tick_get>
   2daa2:	2d01      	cmp	r5, #1
   2daa4:	4622      	mov	r2, r4
   2daa6:	f174 0400 	sbcs.w	r4, r4, #0
   2daaa:	462b      	mov	r3, r5
   2daac:	bfbc      	itt	lt
   2daae:	2301      	movlt	r3, #1
   2dab0:	2200      	movlt	r2, #0
   2dab2:	1818      	adds	r0, r3, r0
   2dab4:	eb41 0102 	adc.w	r1, r1, r2
}
   2dab8:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2daba:	f04f 30ff 	mov.w	r0, #4294967295
   2dabe:	4601      	mov	r1, r0
   2dac0:	e7fa      	b.n	2dab8 <sys_clock_timeout_end_calc+0x4c>

0002dac2 <k_timer_init>:
	timer->status = 0U;
   2dac2:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2dac4:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2dac8:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2dacc:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2dad0:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2dad4:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2dad6:	6343      	str	r3, [r0, #52]	; 0x34
}
   2dad8:	4770      	bx	lr

0002dada <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2dada:	b510      	push	{r4, lr}
   2dadc:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2dade:	f7ff ff7b 	bl	2d9d8 <z_abort_timeout>

	if (inactive) {
   2dae2:	b9b0      	cbnz	r0, 2db12 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2dae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2dae6:	b10b      	cbz	r3, 2daec <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2dae8:	4620      	mov	r0, r4
   2daea:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2daec:	f104 0018 	add.w	r0, r4, #24
   2daf0:	f7ff ff18 	bl	2d924 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2daf4:	b168      	cbz	r0, 2db12 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2daf6:	f7ff feb9 	bl	2d86c <z_ready_thread>
	__asm__ volatile(
   2dafa:	f04f 0340 	mov.w	r3, #64	; 0x40
   2dafe:	f3ef 8011 	mrs	r0, BASEPRI
   2db02:	f383 8812 	msr	BASEPRI_MAX, r3
   2db06:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2db0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2db0e:	f7ff be91 	b.w	2d834 <z_reschedule_irqlock>
   2db12:	bd10      	pop	{r4, pc}

0002db14 <add_event>:
{
   2db14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2db16:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2db18:	e9d0 1300 	ldrd	r1, r3, [r0]
   2db1c:	4288      	cmp	r0, r1
   2db1e:	4604      	mov	r4, r0
   2db20:	d00d      	beq.n	2db3e <add_event+0x2a>
	if ((pending == NULL) ||
   2db22:	b163      	cbz	r3, 2db3e <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2db24:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2db26:	b100      	cbz	r0, 2db2a <add_event+0x16>
   2db28:	3860      	subs	r0, #96	; 0x60
   2db2a:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2db2e:	4639      	mov	r1, r7
   2db30:	f7ff fe53 	bl	2d7da <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2db34:	2800      	cmp	r0, #0
   2db36:	dc02      	bgt.n	2db3e <add_event+0x2a>
	return list->head == list;
   2db38:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2db3a:	42b4      	cmp	r4, r6
   2db3c:	d109      	bne.n	2db52 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   2db3e:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2db40:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2db44:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2db46:	6065      	str	r5, [r4, #4]
}
   2db48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2db4a:	6863      	ldr	r3, [r4, #4]
   2db4c:	42b3      	cmp	r3, r6
   2db4e:	d0f6      	beq.n	2db3e <add_event+0x2a>
   2db50:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2db52:	2e00      	cmp	r6, #0
   2db54:	d0f3      	beq.n	2db3e <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   2db56:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2db58:	b101      	cbz	r1, 2db5c <add_event+0x48>
   2db5a:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2db5c:	4638      	mov	r0, r7
   2db5e:	f7ff fe3c 	bl	2d7da <z_sched_prio_cmp>
   2db62:	2800      	cmp	r0, #0
   2db64:	ddf1      	ble.n	2db4a <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   2db66:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2db68:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2db6c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2db6e:	6075      	str	r5, [r6, #4]
			return;
   2db70:	e7ea      	b.n	2db48 <add_event+0x34>

0002db72 <register_events>:
{
   2db72:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2db76:	2500      	movs	r5, #0
{
   2db78:	468b      	mov	fp, r1
   2db7a:	4614      	mov	r4, r2
   2db7c:	461f      	mov	r7, r3
   2db7e:	4682      	mov	sl, r0
	int events_registered = 0;
   2db80:	462e      	mov	r6, r5
	event->poller = NULL;
   2db82:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2db84:	455d      	cmp	r5, fp
   2db86:	db02      	blt.n	2db8e <register_events+0x1c>
}
   2db88:	4630      	mov	r0, r6
   2db8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2db8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2db92:	f3ef 8911 	mrs	r9, BASEPRI
   2db96:	f383 8812 	msr	BASEPRI_MAX, r3
   2db9a:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2db9e:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2dba2:	f003 031f 	and.w	r3, r3, #31
   2dba6:	3b01      	subs	r3, #1
   2dba8:	2b07      	cmp	r3, #7
   2dbaa:	d80f      	bhi.n	2dbcc <register_events+0x5a>
   2dbac:	e8df f003 	tbb	[pc, r3]
   2dbb0:	0a0e041e 	.word	0x0a0e041e
   2dbb4:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   2dbb8:	f8da 3010 	ldr.w	r3, [sl, #16]
   2dbbc:	689b      	ldr	r3, [r3, #8]
   2dbbe:	b12b      	cbz	r3, 2dbcc <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2dbc0:	2302      	movs	r3, #2
   2dbc2:	e020      	b.n	2dc06 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2dbc4:	f8da 3010 	ldr.w	r3, [sl, #16]
   2dbc8:	681b      	ldr	r3, [r3, #0]
   2dbca:	bb8b      	cbnz	r3, 2dc30 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2dbcc:	bb47      	cbnz	r7, 2dc20 <register_events+0xae>
   2dbce:	7823      	ldrb	r3, [r4, #0]
   2dbd0:	b333      	cbz	r3, 2dc20 <register_events+0xae>
	switch (event->type) {
   2dbd2:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2dbd6:	f003 031f 	and.w	r3, r3, #31
   2dbda:	3b01      	subs	r3, #1
   2dbdc:	2b07      	cmp	r3, #7
   2dbde:	d830      	bhi.n	2dc42 <register_events+0xd0>
   2dbe0:	e8df f003 	tbb	[pc, r3]
   2dbe4:	282f2833 	.word	0x282f2833
   2dbe8:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   2dbec:	f8da 3010 	ldr.w	r3, [sl, #16]
   2dbf0:	689b      	ldr	r3, [r3, #8]
   2dbf2:	2b00      	cmp	r3, #0
   2dbf4:	d0ea      	beq.n	2dbcc <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2dbf6:	2301      	movs	r3, #1
   2dbf8:	e005      	b.n	2dc06 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2dbfa:	f8da 3010 	ldr.w	r3, [sl, #16]
   2dbfe:	6a1b      	ldr	r3, [r3, #32]
   2dc00:	2b00      	cmp	r3, #0
   2dc02:	d0e3      	beq.n	2dbcc <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2dc04:	2310      	movs	r3, #16
	event->state |= state;
   2dc06:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2dc0a:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2dc0e:	f3c2 3145 	ubfx	r1, r2, #13, #6
   2dc12:	430b      	orrs	r3, r1
   2dc14:	f363 3252 	bfi	r2, r3, #13, #6
   2dc18:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   2dc1c:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2dc20:	f389 8811 	msr	BASEPRI, r9
   2dc24:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2dc28:	3501      	adds	r5, #1
   2dc2a:	f10a 0a14 	add.w	sl, sl, #20
   2dc2e:	e7a9      	b.n	2db84 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2dc30:	2304      	movs	r3, #4
   2dc32:	e7e8      	b.n	2dc06 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2dc34:	f8da 0010 	ldr.w	r0, [sl, #16]
   2dc38:	4622      	mov	r2, r4
   2dc3a:	4651      	mov	r1, sl
   2dc3c:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2dc3e:	f7ff ff69 	bl	2db14 <add_event>
	event->poller = poller;
   2dc42:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2dc46:	3601      	adds	r6, #1
   2dc48:	e7ea      	b.n	2dc20 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2dc4a:	f8da 0010 	ldr.w	r0, [sl, #16]
   2dc4e:	4622      	mov	r2, r4
   2dc50:	4651      	mov	r1, sl
   2dc52:	e7f4      	b.n	2dc3e <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2dc54:	f8da 0010 	ldr.w	r0, [sl, #16]
   2dc58:	4622      	mov	r2, r4
   2dc5a:	4651      	mov	r1, sl
   2dc5c:	3024      	adds	r0, #36	; 0x24
   2dc5e:	e7ee      	b.n	2dc3e <register_events+0xcc>

0002dc60 <signal_poll_event>:
{
   2dc60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2dc64:	6884      	ldr	r4, [r0, #8]
{
   2dc66:	4605      	mov	r5, r0
   2dc68:	460e      	mov	r6, r1
	if (poller != NULL) {
   2dc6a:	b144      	cbz	r4, 2dc7e <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2dc6c:	7863      	ldrb	r3, [r4, #1]
   2dc6e:	2b01      	cmp	r3, #1
   2dc70:	d136      	bne.n	2dce0 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   2dc72:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2dc76:	f013 0302 	ands.w	r3, r3, #2
   2dc7a:	d10a      	bne.n	2dc92 <signal_poll_event+0x32>
		poller->is_polling = false;
   2dc7c:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2dc7e:	68eb      	ldr	r3, [r5, #12]
   2dc80:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2dc84:	430e      	orrs	r6, r1
	event->poller = NULL;
   2dc86:	2000      	movs	r0, #0
	event->state |= state;
   2dc88:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   2dc8c:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2dc8e:	60eb      	str	r3, [r5, #12]
	return retcode;
   2dc90:	e00b      	b.n	2dcaa <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   2dc92:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2dc96:	f1b3 3fff 	cmp.w	r3, #4294967295
   2dc9a:	bf08      	it	eq
   2dc9c:	f112 0f02 	cmneq.w	r2, #2
   2dca0:	d105      	bne.n	2dcae <signal_poll_event+0x4e>
		poller->is_polling = false;
   2dca2:	2300      	movs	r3, #0
   2dca4:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2dca6:	f06f 000a 	mvn.w	r0, #10
}
   2dcaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2dcae:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2dcb2:	4640      	mov	r0, r8
   2dcb4:	f7ff fdaa 	bl	2d80c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2dcb8:	2e08      	cmp	r6, #8
   2dcba:	bf0c      	ite	eq
   2dcbc:	f06f 0303 	mvneq.w	r3, #3
   2dcc0:	2300      	movne	r3, #0
   2dcc2:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2dcc4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2dcc8:	06db      	lsls	r3, r3, #27
   2dcca:	d102      	bne.n	2dcd2 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   2dccc:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2dcd0:	b10f      	cbz	r7, 2dcd6 <signal_poll_event+0x76>
		poller->is_polling = false;
   2dcd2:	2300      	movs	r3, #0
   2dcd4:	e7d2      	b.n	2dc7c <signal_poll_event+0x1c>
	z_ready_thread(thread);
   2dcd6:	4640      	mov	r0, r8
   2dcd8:	f7ff fdc8 	bl	2d86c <z_ready_thread>
		poller->is_polling = false;
   2dcdc:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2dcde:	e7ce      	b.n	2dc7e <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2dce0:	2b02      	cmp	r3, #2
   2dce2:	d1f6      	bne.n	2dcd2 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2dce4:	7823      	ldrb	r3, [r4, #0]
   2dce6:	2b00      	cmp	r3, #0
   2dce8:	d0c9      	beq.n	2dc7e <signal_poll_event+0x1e>
   2dcea:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2dcee:	2f00      	cmp	r7, #0
   2dcf0:	d0f4      	beq.n	2dcdc <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2dcf2:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2dcf6:	f1a4 0914 	sub.w	r9, r4, #20
   2dcfa:	f104 0014 	add.w	r0, r4, #20
   2dcfe:	f7ff fe6b 	bl	2d9d8 <z_abort_timeout>
		twork->poll_result = 0;
   2dd02:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2dd06:	4649      	mov	r1, r9
   2dd08:	4638      	mov	r0, r7
   2dd0a:	f7ff fcdb 	bl	2d6c4 <z_work_submit_to_queue>
		poller->is_polling = false;
   2dd0e:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2dd12:	e7b4      	b.n	2dc7e <signal_poll_event+0x1e>

0002dd14 <clear_event_registrations>:
	while (num_events--) {
   2dd14:	2314      	movs	r3, #20
{
   2dd16:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dd18:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   2dd1c:	2400      	movs	r4, #0
   2dd1e:	2601      	movs	r6, #1
	while (num_events--) {
   2dd20:	b901      	cbnz	r1, 2dd24 <clear_event_registrations+0x10>
}
   2dd22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   2dd24:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   2dd28:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   2dd2c:	f003 031f 	and.w	r3, r3, #31
   2dd30:	2b08      	cmp	r3, #8
   2dd32:	f1a0 0714 	sub.w	r7, r0, #20
   2dd36:	d80d      	bhi.n	2dd54 <clear_event_registrations+0x40>
   2dd38:	fa06 f303 	lsl.w	r3, r6, r3
   2dd3c:	f413 7f8b 	tst.w	r3, #278	; 0x116
   2dd40:	d008      	beq.n	2dd54 <clear_event_registrations+0x40>
	return node->next != NULL;
   2dd42:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2dd46:	b12b      	cbz	r3, 2dd54 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   2dd48:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   2dd4c:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2dd4e:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2dd50:	e940 4405 	strd	r4, r4, [r0, #-20]
   2dd54:	f382 8811 	msr	BASEPRI, r2
   2dd58:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2dd5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2dd60:	f3ef 8211 	mrs	r2, BASEPRI
   2dd64:	f383 8812 	msr	BASEPRI_MAX, r3
   2dd68:	f3bf 8f6f 	isb	sy
   2dd6c:	3901      	subs	r1, #1
   2dd6e:	4638      	mov	r0, r7
   2dd70:	e7d6      	b.n	2dd20 <clear_event_registrations+0xc>

0002dd72 <z_handle_obj_poll_events>:
{
   2dd72:	4603      	mov	r3, r0
	return list->head == list;
   2dd74:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2dd76:	4283      	cmp	r3, r0
   2dd78:	d008      	beq.n	2dd8c <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2dd7a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2dd7e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2dd80:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2dd82:	2300      	movs	r3, #0
	node->prev = NULL;
   2dd84:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2dd88:	f7ff bf6a 	b.w	2dc60 <signal_poll_event>
}
   2dd8c:	4770      	bx	lr

0002dd8e <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2dd8e:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2dd90:	e9c0 0000 	strd	r0, r0, [r0]
   2dd94:	6083      	str	r3, [r0, #8]
}
   2dd96:	4770      	bx	lr

0002dd98 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   2dd98:	2300      	movs	r3, #0
   2dd9a:	6083      	str	r3, [r0, #8]
}
   2dd9c:	4770      	bx	lr

0002dd9e <k_free>:
	if (ptr != NULL) {
   2dd9e:	b120      	cbz	r0, 2ddaa <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2dda0:	1f01      	subs	r1, r0, #4
   2dda2:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2dda6:	f7ff baa3 	b.w	2d2f0 <k_heap_free>
}
   2ddaa:	4770      	bx	lr

0002ddac <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2ddac:	4770      	bx	lr

0002ddae <fabs>:
   2ddae:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   2ddb2:	4770      	bx	lr

0002ddb4 <atan2>:
   2ddb4:	f7e4 b970 	b.w	12098 <__ieee754_atan2>

0002ddb8 <memcmp>:
   2ddb8:	b510      	push	{r4, lr}
   2ddba:	3901      	subs	r1, #1
   2ddbc:	4402      	add	r2, r0
   2ddbe:	4290      	cmp	r0, r2
   2ddc0:	d101      	bne.n	2ddc6 <memcmp+0xe>
   2ddc2:	2000      	movs	r0, #0
   2ddc4:	e005      	b.n	2ddd2 <memcmp+0x1a>
   2ddc6:	7803      	ldrb	r3, [r0, #0]
   2ddc8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2ddcc:	42a3      	cmp	r3, r4
   2ddce:	d001      	beq.n	2ddd4 <memcmp+0x1c>
   2ddd0:	1b18      	subs	r0, r3, r4
   2ddd2:	bd10      	pop	{r4, pc}
   2ddd4:	3001      	adds	r0, #1
   2ddd6:	e7f2      	b.n	2ddbe <memcmp+0x6>

0002ddd8 <memcpy>:
   2ddd8:	440a      	add	r2, r1
   2ddda:	4291      	cmp	r1, r2
   2dddc:	f100 33ff 	add.w	r3, r0, #4294967295
   2dde0:	d100      	bne.n	2dde4 <memcpy+0xc>
   2dde2:	4770      	bx	lr
   2dde4:	b510      	push	{r4, lr}
   2dde6:	f811 4b01 	ldrb.w	r4, [r1], #1
   2ddea:	f803 4f01 	strb.w	r4, [r3, #1]!
   2ddee:	4291      	cmp	r1, r2
   2ddf0:	d1f9      	bne.n	2dde6 <memcpy+0xe>
   2ddf2:	bd10      	pop	{r4, pc}

0002ddf4 <__memcpy_chk>:
   2ddf4:	429a      	cmp	r2, r3
   2ddf6:	b508      	push	{r3, lr}
   2ddf8:	d901      	bls.n	2ddfe <__memcpy_chk+0xa>
   2ddfa:	f7e9 f933 	bl	17064 <__chk_fail>
   2ddfe:	4281      	cmp	r1, r0
   2de00:	d804      	bhi.n	2de0c <__memcpy_chk+0x18>
   2de02:	188b      	adds	r3, r1, r2
   2de04:	4298      	cmp	r0, r3
   2de06:	d3f8      	bcc.n	2ddfa <__memcpy_chk+0x6>
   2de08:	4281      	cmp	r1, r0
   2de0a:	d102      	bne.n	2de12 <__memcpy_chk+0x1e>
   2de0c:	1883      	adds	r3, r0, r2
   2de0e:	4299      	cmp	r1, r3
   2de10:	d3f3      	bcc.n	2ddfa <__memcpy_chk+0x6>
   2de12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2de16:	f7ff bfdf 	b.w	2ddd8 <memcpy>

0002de1a <memset>:
   2de1a:	4402      	add	r2, r0
   2de1c:	4603      	mov	r3, r0
   2de1e:	4293      	cmp	r3, r2
   2de20:	d100      	bne.n	2de24 <memset+0xa>
   2de22:	4770      	bx	lr
   2de24:	f803 1b01 	strb.w	r1, [r3], #1
   2de28:	e7f9      	b.n	2de1e <memset+0x4>

0002de2a <__sfputc_r>:
   2de2a:	6893      	ldr	r3, [r2, #8]
   2de2c:	3b01      	subs	r3, #1
   2de2e:	2b00      	cmp	r3, #0
   2de30:	b410      	push	{r4}
   2de32:	6093      	str	r3, [r2, #8]
   2de34:	da07      	bge.n	2de46 <__sfputc_r+0x1c>
   2de36:	6994      	ldr	r4, [r2, #24]
   2de38:	42a3      	cmp	r3, r4
   2de3a:	db01      	blt.n	2de40 <__sfputc_r+0x16>
   2de3c:	290a      	cmp	r1, #10
   2de3e:	d102      	bne.n	2de46 <__sfputc_r+0x1c>
   2de40:	bc10      	pop	{r4}
   2de42:	f7f7 bbb1 	b.w	255a8 <__swbuf_r>
   2de46:	6813      	ldr	r3, [r2, #0]
   2de48:	1c58      	adds	r0, r3, #1
   2de4a:	6010      	str	r0, [r2, #0]
   2de4c:	7019      	strb	r1, [r3, #0]
   2de4e:	4608      	mov	r0, r1
   2de50:	bc10      	pop	{r4}
   2de52:	4770      	bx	lr

0002de54 <__sfputs_r>:
   2de54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2de56:	4606      	mov	r6, r0
   2de58:	460f      	mov	r7, r1
   2de5a:	4614      	mov	r4, r2
   2de5c:	18d5      	adds	r5, r2, r3
   2de5e:	42ac      	cmp	r4, r5
   2de60:	d101      	bne.n	2de66 <__sfputs_r+0x12>
   2de62:	2000      	movs	r0, #0
   2de64:	e007      	b.n	2de76 <__sfputs_r+0x22>
   2de66:	f814 1b01 	ldrb.w	r1, [r4], #1
   2de6a:	463a      	mov	r2, r7
   2de6c:	4630      	mov	r0, r6
   2de6e:	f7ff ffdc 	bl	2de2a <__sfputc_r>
   2de72:	1c43      	adds	r3, r0, #1
   2de74:	d1f3      	bne.n	2de5e <__sfputs_r+0xa>
   2de76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002de78 <_printf_common>:
   2de78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2de7c:	4616      	mov	r6, r2
   2de7e:	4699      	mov	r9, r3
   2de80:	688a      	ldr	r2, [r1, #8]
   2de82:	690b      	ldr	r3, [r1, #16]
   2de84:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2de88:	4293      	cmp	r3, r2
   2de8a:	bfb8      	it	lt
   2de8c:	4613      	movlt	r3, r2
   2de8e:	6033      	str	r3, [r6, #0]
   2de90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2de94:	4607      	mov	r7, r0
   2de96:	460c      	mov	r4, r1
   2de98:	b10a      	cbz	r2, 2de9e <_printf_common+0x26>
   2de9a:	3301      	adds	r3, #1
   2de9c:	6033      	str	r3, [r6, #0]
   2de9e:	6823      	ldr	r3, [r4, #0]
   2dea0:	0699      	lsls	r1, r3, #26
   2dea2:	bf42      	ittt	mi
   2dea4:	6833      	ldrmi	r3, [r6, #0]
   2dea6:	3302      	addmi	r3, #2
   2dea8:	6033      	strmi	r3, [r6, #0]
   2deaa:	6825      	ldr	r5, [r4, #0]
   2deac:	f015 0506 	ands.w	r5, r5, #6
   2deb0:	d106      	bne.n	2dec0 <_printf_common+0x48>
   2deb2:	f104 0a19 	add.w	sl, r4, #25
   2deb6:	68e3      	ldr	r3, [r4, #12]
   2deb8:	6832      	ldr	r2, [r6, #0]
   2deba:	1a9b      	subs	r3, r3, r2
   2debc:	42ab      	cmp	r3, r5
   2debe:	dc26      	bgt.n	2df0e <_printf_common+0x96>
   2dec0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   2dec4:	1e13      	subs	r3, r2, #0
   2dec6:	6822      	ldr	r2, [r4, #0]
   2dec8:	bf18      	it	ne
   2deca:	2301      	movne	r3, #1
   2decc:	0692      	lsls	r2, r2, #26
   2dece:	d42b      	bmi.n	2df28 <_printf_common+0xb0>
   2ded0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2ded4:	4649      	mov	r1, r9
   2ded6:	4638      	mov	r0, r7
   2ded8:	47c0      	blx	r8
   2deda:	3001      	adds	r0, #1
   2dedc:	d01e      	beq.n	2df1c <_printf_common+0xa4>
   2dede:	6823      	ldr	r3, [r4, #0]
   2dee0:	68e5      	ldr	r5, [r4, #12]
   2dee2:	6832      	ldr	r2, [r6, #0]
   2dee4:	f003 0306 	and.w	r3, r3, #6
   2dee8:	2b04      	cmp	r3, #4
   2deea:	bf08      	it	eq
   2deec:	1aad      	subeq	r5, r5, r2
   2deee:	68a3      	ldr	r3, [r4, #8]
   2def0:	6922      	ldr	r2, [r4, #16]
   2def2:	bf0c      	ite	eq
   2def4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   2def8:	2500      	movne	r5, #0
   2defa:	4293      	cmp	r3, r2
   2defc:	bfc4      	itt	gt
   2defe:	1a9b      	subgt	r3, r3, r2
   2df00:	18ed      	addgt	r5, r5, r3
   2df02:	2600      	movs	r6, #0
   2df04:	341a      	adds	r4, #26
   2df06:	42b5      	cmp	r5, r6
   2df08:	d11a      	bne.n	2df40 <_printf_common+0xc8>
   2df0a:	2000      	movs	r0, #0
   2df0c:	e008      	b.n	2df20 <_printf_common+0xa8>
   2df0e:	2301      	movs	r3, #1
   2df10:	4652      	mov	r2, sl
   2df12:	4649      	mov	r1, r9
   2df14:	4638      	mov	r0, r7
   2df16:	47c0      	blx	r8
   2df18:	3001      	adds	r0, #1
   2df1a:	d103      	bne.n	2df24 <_printf_common+0xac>
   2df1c:	f04f 30ff 	mov.w	r0, #4294967295
   2df20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2df24:	3501      	adds	r5, #1
   2df26:	e7c6      	b.n	2deb6 <_printf_common+0x3e>
   2df28:	18e1      	adds	r1, r4, r3
   2df2a:	1c5a      	adds	r2, r3, #1
   2df2c:	2030      	movs	r0, #48	; 0x30
   2df2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2df32:	4422      	add	r2, r4
   2df34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   2df38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   2df3c:	3302      	adds	r3, #2
   2df3e:	e7c7      	b.n	2ded0 <_printf_common+0x58>
   2df40:	2301      	movs	r3, #1
   2df42:	4622      	mov	r2, r4
   2df44:	4649      	mov	r1, r9
   2df46:	4638      	mov	r0, r7
   2df48:	47c0      	blx	r8
   2df4a:	3001      	adds	r0, #1
   2df4c:	d0e6      	beq.n	2df1c <_printf_common+0xa4>
   2df4e:	3601      	adds	r6, #1
   2df50:	e7d9      	b.n	2df06 <_printf_common+0x8e>

0002df52 <strcpy>:
   2df52:	4603      	mov	r3, r0
   2df54:	f811 2b01 	ldrb.w	r2, [r1], #1
   2df58:	f803 2b01 	strb.w	r2, [r3], #1
   2df5c:	2a00      	cmp	r2, #0
   2df5e:	d1f9      	bne.n	2df54 <strcpy+0x2>
   2df60:	4770      	bx	lr

0002df62 <strncmp>:
   2df62:	b510      	push	{r4, lr}
   2df64:	4603      	mov	r3, r0
   2df66:	b172      	cbz	r2, 2df86 <strncmp+0x24>
   2df68:	3901      	subs	r1, #1
   2df6a:	1884      	adds	r4, r0, r2
   2df6c:	f813 0b01 	ldrb.w	r0, [r3], #1
   2df70:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2df74:	4290      	cmp	r0, r2
   2df76:	d101      	bne.n	2df7c <strncmp+0x1a>
   2df78:	42a3      	cmp	r3, r4
   2df7a:	d101      	bne.n	2df80 <strncmp+0x1e>
   2df7c:	1a80      	subs	r0, r0, r2
   2df7e:	bd10      	pop	{r4, pc}
   2df80:	2800      	cmp	r0, #0
   2df82:	d1f3      	bne.n	2df6c <strncmp+0xa>
   2df84:	e7fa      	b.n	2df7c <strncmp+0x1a>
   2df86:	4610      	mov	r0, r2
   2df88:	e7f9      	b.n	2df7e <strncmp+0x1c>

0002df8a <__strncpy_chk>:
   2df8a:	429a      	cmp	r2, r3
   2df8c:	b508      	push	{r3, lr}
   2df8e:	d901      	bls.n	2df94 <__strncpy_chk+0xa>
   2df90:	f7e9 f868 	bl	17064 <__chk_fail>
   2df94:	4281      	cmp	r1, r0
   2df96:	d804      	bhi.n	2dfa2 <__strncpy_chk+0x18>
   2df98:	188b      	adds	r3, r1, r2
   2df9a:	4298      	cmp	r0, r3
   2df9c:	d3f8      	bcc.n	2df90 <__strncpy_chk+0x6>
   2df9e:	4281      	cmp	r1, r0
   2dfa0:	d102      	bne.n	2dfa8 <__strncpy_chk+0x1e>
   2dfa2:	1883      	adds	r3, r0, r2
   2dfa4:	4299      	cmp	r1, r3
   2dfa6:	d3f3      	bcc.n	2df90 <__strncpy_chk+0x6>
   2dfa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2dfac:	f000 b8c3 	b.w	2e136 <strncpy>

0002dfb0 <strnlen>:
   2dfb0:	b510      	push	{r4, lr}
   2dfb2:	4602      	mov	r2, r0
   2dfb4:	4401      	add	r1, r0
   2dfb6:	428a      	cmp	r2, r1
   2dfb8:	4613      	mov	r3, r2
   2dfba:	d003      	beq.n	2dfc4 <strnlen+0x14>
   2dfbc:	781c      	ldrb	r4, [r3, #0]
   2dfbe:	3201      	adds	r2, #1
   2dfc0:	2c00      	cmp	r4, #0
   2dfc2:	d1f8      	bne.n	2dfb6 <strnlen+0x6>
   2dfc4:	1a18      	subs	r0, r3, r0
   2dfc6:	bd10      	pop	{r4, pc}

0002dfc8 <__sfmoreglue>:
   2dfc8:	b570      	push	{r4, r5, r6, lr}
   2dfca:	2268      	movs	r2, #104	; 0x68
   2dfcc:	1e4d      	subs	r5, r1, #1
   2dfce:	4355      	muls	r5, r2
   2dfd0:	460e      	mov	r6, r1
   2dfd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
   2dfd6:	f7f6 ff93 	bl	24f00 <_malloc_r>
   2dfda:	4604      	mov	r4, r0
   2dfdc:	b140      	cbz	r0, 2dff0 <__sfmoreglue+0x28>
   2dfde:	2100      	movs	r1, #0
   2dfe0:	e9c0 1600 	strd	r1, r6, [r0]
   2dfe4:	300c      	adds	r0, #12
   2dfe6:	60a0      	str	r0, [r4, #8]
   2dfe8:	f105 0268 	add.w	r2, r5, #104	; 0x68
   2dfec:	f7ff ff15 	bl	2de1a <memset>
   2dff0:	4620      	mov	r0, r4
   2dff2:	bd70      	pop	{r4, r5, r6, pc}

0002dff4 <_fwalk_reent>:
   2dff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2dff8:	4606      	mov	r6, r0
   2dffa:	4688      	mov	r8, r1
   2dffc:	f100 0448 	add.w	r4, r0, #72	; 0x48
   2e000:	2700      	movs	r7, #0
   2e002:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   2e006:	f1b9 0901 	subs.w	r9, r9, #1
   2e00a:	d505      	bpl.n	2e018 <_fwalk_reent+0x24>
   2e00c:	6824      	ldr	r4, [r4, #0]
   2e00e:	2c00      	cmp	r4, #0
   2e010:	d1f7      	bne.n	2e002 <_fwalk_reent+0xe>
   2e012:	4638      	mov	r0, r7
   2e014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2e018:	89ab      	ldrh	r3, [r5, #12]
   2e01a:	2b01      	cmp	r3, #1
   2e01c:	d907      	bls.n	2e02e <_fwalk_reent+0x3a>
   2e01e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   2e022:	3301      	adds	r3, #1
   2e024:	d003      	beq.n	2e02e <_fwalk_reent+0x3a>
   2e026:	4629      	mov	r1, r5
   2e028:	4630      	mov	r0, r6
   2e02a:	47c0      	blx	r8
   2e02c:	4307      	orrs	r7, r0
   2e02e:	3568      	adds	r5, #104	; 0x68
   2e030:	e7e9      	b.n	2e006 <_fwalk_reent+0x12>

0002e032 <__swhatbuf_r>:
   2e032:	b570      	push	{r4, r5, r6, lr}
   2e034:	460e      	mov	r6, r1
   2e036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2e03a:	2900      	cmp	r1, #0
   2e03c:	b096      	sub	sp, #88	; 0x58
   2e03e:	4614      	mov	r4, r2
   2e040:	461d      	mov	r5, r3
   2e042:	da08      	bge.n	2e056 <__swhatbuf_r+0x24>
   2e044:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
   2e048:	2200      	movs	r2, #0
   2e04a:	602a      	str	r2, [r5, #0]
   2e04c:	061a      	lsls	r2, r3, #24
   2e04e:	d410      	bmi.n	2e072 <__swhatbuf_r+0x40>
   2e050:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2e054:	e00e      	b.n	2e074 <__swhatbuf_r+0x42>
   2e056:	466a      	mov	r2, sp
   2e058:	f7f7 fd52 	bl	25b00 <_fstat_r>
   2e05c:	2800      	cmp	r0, #0
   2e05e:	dbf1      	blt.n	2e044 <__swhatbuf_r+0x12>
   2e060:	9a01      	ldr	r2, [sp, #4]
   2e062:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   2e066:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   2e06a:	425a      	negs	r2, r3
   2e06c:	415a      	adcs	r2, r3
   2e06e:	602a      	str	r2, [r5, #0]
   2e070:	e7ee      	b.n	2e050 <__swhatbuf_r+0x1e>
   2e072:	2340      	movs	r3, #64	; 0x40
   2e074:	2000      	movs	r0, #0
   2e076:	6023      	str	r3, [r4, #0]
   2e078:	b016      	add	sp, #88	; 0x58
   2e07a:	bd70      	pop	{r4, r5, r6, pc}

0002e07c <memmove>:
   2e07c:	4288      	cmp	r0, r1
   2e07e:	b510      	push	{r4, lr}
   2e080:	eb01 0402 	add.w	r4, r1, r2
   2e084:	d902      	bls.n	2e08c <memmove+0x10>
   2e086:	4284      	cmp	r4, r0
   2e088:	4623      	mov	r3, r4
   2e08a:	d807      	bhi.n	2e09c <memmove+0x20>
   2e08c:	1e43      	subs	r3, r0, #1
   2e08e:	42a1      	cmp	r1, r4
   2e090:	d008      	beq.n	2e0a4 <memmove+0x28>
   2e092:	f811 2b01 	ldrb.w	r2, [r1], #1
   2e096:	f803 2f01 	strb.w	r2, [r3, #1]!
   2e09a:	e7f8      	b.n	2e08e <memmove+0x12>
   2e09c:	4402      	add	r2, r0
   2e09e:	4601      	mov	r1, r0
   2e0a0:	428a      	cmp	r2, r1
   2e0a2:	d100      	bne.n	2e0a6 <memmove+0x2a>
   2e0a4:	bd10      	pop	{r4, pc}
   2e0a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2e0aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2e0ae:	e7f7      	b.n	2e0a0 <memmove+0x24>

0002e0b0 <__sread>:
   2e0b0:	b510      	push	{r4, lr}
   2e0b2:	460c      	mov	r4, r1
   2e0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2e0b8:	f7f7 fd56 	bl	25b68 <_read_r>
   2e0bc:	2800      	cmp	r0, #0
   2e0be:	bfab      	itete	ge
   2e0c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   2e0c2:	89a3      	ldrhlt	r3, [r4, #12]
   2e0c4:	181b      	addge	r3, r3, r0
   2e0c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   2e0ca:	bfac      	ite	ge
   2e0cc:	6563      	strge	r3, [r4, #84]	; 0x54
   2e0ce:	81a3      	strhlt	r3, [r4, #12]
   2e0d0:	bd10      	pop	{r4, pc}

0002e0d2 <__swrite>:
   2e0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e0d6:	461f      	mov	r7, r3
   2e0d8:	898b      	ldrh	r3, [r1, #12]
   2e0da:	05db      	lsls	r3, r3, #23
   2e0dc:	4605      	mov	r5, r0
   2e0de:	460c      	mov	r4, r1
   2e0e0:	4616      	mov	r6, r2
   2e0e2:	d505      	bpl.n	2e0f0 <__swrite+0x1e>
   2e0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2e0e8:	2302      	movs	r3, #2
   2e0ea:	2200      	movs	r2, #0
   2e0ec:	f7f7 fd2a 	bl	25b44 <_lseek_r>
   2e0f0:	89a3      	ldrh	r3, [r4, #12]
   2e0f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2e0f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2e0fa:	81a3      	strh	r3, [r4, #12]
   2e0fc:	4632      	mov	r2, r6
   2e0fe:	463b      	mov	r3, r7
   2e100:	4628      	mov	r0, r5
   2e102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2e106:	f7f7 bcd9 	b.w	25abc <_write_r>

0002e10a <__sseek>:
   2e10a:	b510      	push	{r4, lr}
   2e10c:	460c      	mov	r4, r1
   2e10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2e112:	f7f7 fd17 	bl	25b44 <_lseek_r>
   2e116:	1c43      	adds	r3, r0, #1
   2e118:	89a3      	ldrh	r3, [r4, #12]
   2e11a:	bf15      	itete	ne
   2e11c:	6560      	strne	r0, [r4, #84]	; 0x54
   2e11e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   2e122:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   2e126:	81a3      	strheq	r3, [r4, #12]
   2e128:	bf18      	it	ne
   2e12a:	81a3      	strhne	r3, [r4, #12]
   2e12c:	bd10      	pop	{r4, pc}

0002e12e <__sclose>:
   2e12e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2e132:	f7f7 bcd5 	b.w	25ae0 <_close_r>

0002e136 <strncpy>:
   2e136:	b510      	push	{r4, lr}
   2e138:	3901      	subs	r1, #1
   2e13a:	4603      	mov	r3, r0
   2e13c:	b132      	cbz	r2, 2e14c <strncpy+0x16>
   2e13e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2e142:	f803 4b01 	strb.w	r4, [r3], #1
   2e146:	3a01      	subs	r2, #1
   2e148:	2c00      	cmp	r4, #0
   2e14a:	d1f7      	bne.n	2e13c <strncpy+0x6>
   2e14c:	441a      	add	r2, r3
   2e14e:	2100      	movs	r1, #0
   2e150:	4293      	cmp	r3, r2
   2e152:	d100      	bne.n	2e156 <strncpy+0x20>
   2e154:	bd10      	pop	{r4, pc}
   2e156:	f803 1b01 	strb.w	r1, [r3], #1
   2e15a:	e7f9      	b.n	2e150 <strncpy+0x1a>
